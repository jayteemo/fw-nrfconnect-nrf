
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	20031290 	.word	0x20031290
   1c204:	00026f2d 	.word	0x00026f2d
   1c208:	00042c8b 	.word	0x00042c8b
   1c20c:	00026f5d 	.word	0x00026f5d
   1c210:	00026f5d 	.word	0x00026f5d
   1c214:	00026f5d 	.word	0x00026f5d
   1c218:	00026f5d 	.word	0x00026f5d
   1c21c:	00026f5d 	.word	0x00026f5d
	...
   1c22c:	00026bc1 	.word	0x00026bc1
   1c230:	00026f5d 	.word	0x00026f5d
   1c234:	00000000 	.word	0x00000000
   1c238:	00026b11 	.word	0x00026b11
   1c23c:	00026765 	.word	0x00026765

0001c240 <_irq_vector_table>:
   1c240:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c250:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c260:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c270:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c280:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c290:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c2a0:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c2b0:	0002954d 000440d1 00026eed 00026eed     M....@...n...n..
   1c2c0:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c2d0:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c2e0:	00026eed 00026eed 000440ef 00026eed     .n...n...@...n..
   1c2f0:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c300:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c310:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c320:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c330:	00026eed 00026eed 00026eed 00026eed     .n...n...n...n..
   1c340:	00026eed                                .n..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	00033df4 00000001 0001c200 0001c200     .=..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_d2f>:
   1cd7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cd84:	bf24      	itt	cs
   1cd86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cd8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cd8e:	d90d      	bls.n	1cdac <__aeabi_d2f+0x30>
   1cd90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cd94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cd98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cd9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cda0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cda4:	bf08      	it	eq
   1cda6:	f020 0001 	biceq.w	r0, r0, #1
   1cdaa:	4770      	bx	lr
   1cdac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cdb0:	d121      	bne.n	1cdf6 <__aeabi_d2f+0x7a>
   1cdb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cdb6:	bfbc      	itt	lt
   1cdb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cdbc:	4770      	bxlt	lr
   1cdbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdc6:	f1c2 0218 	rsb	r2, r2, #24
   1cdca:	f1c2 0c20 	rsb	ip, r2, #32
   1cdce:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdd2:	fa20 f002 	lsr.w	r0, r0, r2
   1cdd6:	bf18      	it	ne
   1cdd8:	f040 0001 	orrne.w	r0, r0, #1
   1cddc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cde0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cde4:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cde8:	ea40 000c 	orr.w	r0, r0, ip
   1cdec:	fa23 f302 	lsr.w	r3, r3, r2
   1cdf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cdf4:	e7cc      	b.n	1cd90 <__aeabi_d2f+0x14>
   1cdf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cdfa:	d107      	bne.n	1ce0c <__aeabi_d2f+0x90>
   1cdfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce00:	bf1e      	ittt	ne
   1ce02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce0a:	4770      	bxne	lr
   1ce0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce18:	4770      	bx	lr
   1ce1a:	bf00      	nop

0001ce1c <__aeabi_ldivmod>:
   1ce1c:	b97b      	cbnz	r3, 1ce3e <__aeabi_ldivmod+0x22>
   1ce1e:	b972      	cbnz	r2, 1ce3e <__aeabi_ldivmod+0x22>
   1ce20:	2900      	cmp	r1, #0
   1ce22:	bfbe      	ittt	lt
   1ce24:	2000      	movlt	r0, #0
   1ce26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce2a:	e006      	blt.n	1ce3a <__aeabi_ldivmod+0x1e>
   1ce2c:	bf08      	it	eq
   1ce2e:	2800      	cmpeq	r0, #0
   1ce30:	bf1c      	itt	ne
   1ce32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce36:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ce3a:	f000 b9bb 	b.w	1d1b4 <__aeabi_idiv0>
   1ce3e:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce46:	2900      	cmp	r1, #0
   1ce48:	db09      	blt.n	1ce5e <__aeabi_ldivmod+0x42>
   1ce4a:	2b00      	cmp	r3, #0
   1ce4c:	db1a      	blt.n	1ce84 <__aeabi_ldivmod+0x68>
   1ce4e:	f000 f84d 	bl	1ceec <__udivmoddi4>
   1ce52:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce5a:	b004      	add	sp, #16
   1ce5c:	4770      	bx	lr
   1ce5e:	4240      	negs	r0, r0
   1ce60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	db1b      	blt.n	1cea0 <__aeabi_ldivmod+0x84>
   1ce68:	f000 f840 	bl	1ceec <__udivmoddi4>
   1ce6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce74:	b004      	add	sp, #16
   1ce76:	4240      	negs	r0, r0
   1ce78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce7c:	4252      	negs	r2, r2
   1ce7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce82:	4770      	bx	lr
   1ce84:	4252      	negs	r2, r2
   1ce86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce8a:	f000 f82f 	bl	1ceec <__udivmoddi4>
   1ce8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce96:	b004      	add	sp, #16
   1ce98:	4240      	negs	r0, r0
   1ce9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce9e:	4770      	bx	lr
   1cea0:	4252      	negs	r2, r2
   1cea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cea6:	f000 f821 	bl	1ceec <__udivmoddi4>
   1ceaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ceb2:	b004      	add	sp, #16
   1ceb4:	4252      	negs	r2, r2
   1ceb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceba:	4770      	bx	lr

0001cebc <__aeabi_uldivmod>:
   1cebc:	b953      	cbnz	r3, 1ced4 <__aeabi_uldivmod+0x18>
   1cebe:	b94a      	cbnz	r2, 1ced4 <__aeabi_uldivmod+0x18>
   1cec0:	2900      	cmp	r1, #0
   1cec2:	bf08      	it	eq
   1cec4:	2800      	cmpeq	r0, #0
   1cec6:	bf1c      	itt	ne
   1cec8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cecc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ced0:	f000 b970 	b.w	1d1b4 <__aeabi_idiv0>
   1ced4:	f1ad 0c08 	sub.w	ip, sp, #8
   1ced8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cedc:	f000 f806 	bl	1ceec <__udivmoddi4>
   1cee0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cee8:	b004      	add	sp, #16
   1ceea:	4770      	bx	lr

0001ceec <__udivmoddi4>:
   1ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cef2:	4604      	mov	r4, r0
   1cef4:	4689      	mov	r9, r1
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	f040 8083 	bne.w	1d002 <__udivmoddi4+0x116>
   1cefc:	428a      	cmp	r2, r1
   1cefe:	4615      	mov	r5, r2
   1cf00:	d945      	bls.n	1cf8e <__udivmoddi4+0xa2>
   1cf02:	fab2 f282 	clz	r2, r2
   1cf06:	b14a      	cbz	r2, 1cf1c <__udivmoddi4+0x30>
   1cf08:	f1c2 0720 	rsb	r7, r2, #32
   1cf0c:	fa01 f302 	lsl.w	r3, r1, r2
   1cf10:	4095      	lsls	r5, r2
   1cf12:	4094      	lsls	r4, r2
   1cf14:	fa20 f707 	lsr.w	r7, r0, r7
   1cf18:	ea47 0903 	orr.w	r9, r7, r3
   1cf1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cf20:	0c23      	lsrs	r3, r4, #16
   1cf22:	fa1f f885 	uxth.w	r8, r5
   1cf26:	fbb9 fcfe 	udiv	ip, r9, lr
   1cf2a:	fb0e 991c 	mls	r9, lr, ip, r9
   1cf2e:	fb0c f108 	mul.w	r1, ip, r8
   1cf32:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1cf36:	4299      	cmp	r1, r3
   1cf38:	d90a      	bls.n	1cf50 <__udivmoddi4+0x64>
   1cf3a:	18eb      	adds	r3, r5, r3
   1cf3c:	bf2c      	ite	cs
   1cf3e:	2001      	movcs	r0, #1
   1cf40:	2000      	movcc	r0, #0
   1cf42:	4299      	cmp	r1, r3
   1cf44:	d902      	bls.n	1cf4c <__udivmoddi4+0x60>
   1cf46:	2800      	cmp	r0, #0
   1cf48:	f000 811d 	beq.w	1d186 <__udivmoddi4+0x29a>
   1cf4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1cf50:	1a59      	subs	r1, r3, r1
   1cf52:	b2a3      	uxth	r3, r4
   1cf54:	fbb1 f0fe 	udiv	r0, r1, lr
   1cf58:	fb0e 1110 	mls	r1, lr, r0, r1
   1cf5c:	fb00 f808 	mul.w	r8, r0, r8
   1cf60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cf64:	45a0      	cmp	r8, r4
   1cf66:	d905      	bls.n	1cf74 <__udivmoddi4+0x88>
   1cf68:	192c      	adds	r4, r5, r4
   1cf6a:	d202      	bcs.n	1cf72 <__udivmoddi4+0x86>
   1cf6c:	45a0      	cmp	r8, r4
   1cf6e:	f200 810e 	bhi.w	1d18e <__udivmoddi4+0x2a2>
   1cf72:	3801      	subs	r0, #1
   1cf74:	eba4 0408 	sub.w	r4, r4, r8
   1cf78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cf7c:	2700      	movs	r7, #0
   1cf7e:	b11e      	cbz	r6, 1cf88 <__udivmoddi4+0x9c>
   1cf80:	40d4      	lsrs	r4, r2
   1cf82:	2300      	movs	r3, #0
   1cf84:	e9c6 4300 	strd	r4, r3, [r6]
   1cf88:	4639      	mov	r1, r7
   1cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf8e:	2a00      	cmp	r2, #0
   1cf90:	d051      	beq.n	1d036 <__udivmoddi4+0x14a>
   1cf92:	fab2 f282 	clz	r2, r2
   1cf96:	2a00      	cmp	r2, #0
   1cf98:	f040 80af 	bne.w	1d0fa <__udivmoddi4+0x20e>
   1cf9c:	1b49      	subs	r1, r1, r5
   1cf9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfa2:	fa1f f885 	uxth.w	r8, r5
   1cfa6:	2701      	movs	r7, #1
   1cfa8:	0c23      	lsrs	r3, r4, #16
   1cfaa:	fbb1 fcfe 	udiv	ip, r1, lr
   1cfae:	fb0e 111c 	mls	r1, lr, ip, r1
   1cfb2:	fb08 f00c 	mul.w	r0, r8, ip
   1cfb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cfba:	4298      	cmp	r0, r3
   1cfbc:	d90a      	bls.n	1cfd4 <__udivmoddi4+0xe8>
   1cfbe:	18eb      	adds	r3, r5, r3
   1cfc0:	bf2c      	ite	cs
   1cfc2:	2101      	movcs	r1, #1
   1cfc4:	2100      	movcc	r1, #0
   1cfc6:	4298      	cmp	r0, r3
   1cfc8:	d902      	bls.n	1cfd0 <__udivmoddi4+0xe4>
   1cfca:	2900      	cmp	r1, #0
   1cfcc:	f000 80d7 	beq.w	1d17e <__udivmoddi4+0x292>
   1cfd0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1cfd4:	1a19      	subs	r1, r3, r0
   1cfd6:	b2a3      	uxth	r3, r4
   1cfd8:	fbb1 f0fe 	udiv	r0, r1, lr
   1cfdc:	fb0e 1110 	mls	r1, lr, r0, r1
   1cfe0:	fb08 f800 	mul.w	r8, r8, r0
   1cfe4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cfe8:	45a0      	cmp	r8, r4
   1cfea:	d905      	bls.n	1cff8 <__udivmoddi4+0x10c>
   1cfec:	192c      	adds	r4, r5, r4
   1cfee:	d202      	bcs.n	1cff6 <__udivmoddi4+0x10a>
   1cff0:	45a0      	cmp	r8, r4
   1cff2:	f200 80c1 	bhi.w	1d178 <__udivmoddi4+0x28c>
   1cff6:	3801      	subs	r0, #1
   1cff8:	eba4 0408 	sub.w	r4, r4, r8
   1cffc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d000:	e7bd      	b.n	1cf7e <__udivmoddi4+0x92>
   1d002:	428b      	cmp	r3, r1
   1d004:	d908      	bls.n	1d018 <__udivmoddi4+0x12c>
   1d006:	2e00      	cmp	r6, #0
   1d008:	d074      	beq.n	1d0f4 <__udivmoddi4+0x208>
   1d00a:	2700      	movs	r7, #0
   1d00c:	e9c6 0100 	strd	r0, r1, [r6]
   1d010:	4638      	mov	r0, r7
   1d012:	4639      	mov	r1, r7
   1d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d018:	fab3 f783 	clz	r7, r3
   1d01c:	b967      	cbnz	r7, 1d038 <__udivmoddi4+0x14c>
   1d01e:	428b      	cmp	r3, r1
   1d020:	f0c0 80a4 	bcc.w	1d16c <__udivmoddi4+0x280>
   1d024:	4282      	cmp	r2, r0
   1d026:	f240 80a1 	bls.w	1d16c <__udivmoddi4+0x280>
   1d02a:	4638      	mov	r0, r7
   1d02c:	2e00      	cmp	r6, #0
   1d02e:	d0ab      	beq.n	1cf88 <__udivmoddi4+0x9c>
   1d030:	e9c6 4900 	strd	r4, r9, [r6]
   1d034:	e7a8      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d036:	deff      	udf	#255	; 0xff
   1d038:	f1c7 0520 	rsb	r5, r7, #32
   1d03c:	40bb      	lsls	r3, r7
   1d03e:	fa02 fc07 	lsl.w	ip, r2, r7
   1d042:	fa01 f407 	lsl.w	r4, r1, r7
   1d046:	40ea      	lsrs	r2, r5
   1d048:	fa20 f805 	lsr.w	r8, r0, r5
   1d04c:	40e9      	lsrs	r1, r5
   1d04e:	fa00 fe07 	lsl.w	lr, r0, r7
   1d052:	431a      	orrs	r2, r3
   1d054:	ea48 0404 	orr.w	r4, r8, r4
   1d058:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1d05c:	0c20      	lsrs	r0, r4, #16
   1d05e:	fa1f f982 	uxth.w	r9, r2
   1d062:	fbb1 faf8 	udiv	sl, r1, r8
   1d066:	fb08 111a 	mls	r1, r8, sl, r1
   1d06a:	fb0a fb09 	mul.w	fp, sl, r9
   1d06e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1d072:	458b      	cmp	fp, r1
   1d074:	d90a      	bls.n	1d08c <__udivmoddi4+0x1a0>
   1d076:	1851      	adds	r1, r2, r1
   1d078:	bf2c      	ite	cs
   1d07a:	2301      	movcs	r3, #1
   1d07c:	2300      	movcc	r3, #0
   1d07e:	458b      	cmp	fp, r1
   1d080:	d902      	bls.n	1d088 <__udivmoddi4+0x19c>
   1d082:	2b00      	cmp	r3, #0
   1d084:	f000 8088 	beq.w	1d198 <__udivmoddi4+0x2ac>
   1d088:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1d08c:	eba1 010b 	sub.w	r1, r1, fp
   1d090:	b2a4      	uxth	r4, r4
   1d092:	fbb1 f0f8 	udiv	r0, r1, r8
   1d096:	fb08 1110 	mls	r1, r8, r0, r1
   1d09a:	fb00 f909 	mul.w	r9, r0, r9
   1d09e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1d0a2:	4589      	cmp	r9, r1
   1d0a4:	d904      	bls.n	1d0b0 <__udivmoddi4+0x1c4>
   1d0a6:	1851      	adds	r1, r2, r1
   1d0a8:	d201      	bcs.n	1d0ae <__udivmoddi4+0x1c2>
   1d0aa:	4589      	cmp	r9, r1
   1d0ac:	d87b      	bhi.n	1d1a6 <__udivmoddi4+0x2ba>
   1d0ae:	3801      	subs	r0, #1
   1d0b0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1d0b4:	eba1 0109 	sub.w	r1, r1, r9
   1d0b8:	fba0 890c 	umull	r8, r9, r0, ip
   1d0bc:	4549      	cmp	r1, r9
   1d0be:	4644      	mov	r4, r8
   1d0c0:	464b      	mov	r3, r9
   1d0c2:	d302      	bcc.n	1d0ca <__udivmoddi4+0x1de>
   1d0c4:	d106      	bne.n	1d0d4 <__udivmoddi4+0x1e8>
   1d0c6:	45c6      	cmp	lr, r8
   1d0c8:	d204      	bcs.n	1d0d4 <__udivmoddi4+0x1e8>
   1d0ca:	3801      	subs	r0, #1
   1d0cc:	ebb8 040c 	subs.w	r4, r8, ip
   1d0d0:	eb69 0302 	sbc.w	r3, r9, r2
   1d0d4:	2e00      	cmp	r6, #0
   1d0d6:	d05d      	beq.n	1d194 <__udivmoddi4+0x2a8>
   1d0d8:	ebbe 0204 	subs.w	r2, lr, r4
   1d0dc:	eb61 0103 	sbc.w	r1, r1, r3
   1d0e0:	fa01 f505 	lsl.w	r5, r1, r5
   1d0e4:	fa22 f307 	lsr.w	r3, r2, r7
   1d0e8:	40f9      	lsrs	r1, r7
   1d0ea:	2700      	movs	r7, #0
   1d0ec:	431d      	orrs	r5, r3
   1d0ee:	e9c6 5100 	strd	r5, r1, [r6]
   1d0f2:	e749      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d0f4:	4637      	mov	r7, r6
   1d0f6:	4630      	mov	r0, r6
   1d0f8:	e746      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d0fa:	f1c2 0020 	rsb	r0, r2, #32
   1d0fe:	4095      	lsls	r5, r2
   1d100:	fa01 f702 	lsl.w	r7, r1, r2
   1d104:	fa21 f300 	lsr.w	r3, r1, r0
   1d108:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d10c:	fa24 f100 	lsr.w	r1, r4, r0
   1d110:	fa1f f885 	uxth.w	r8, r5
   1d114:	4094      	lsls	r4, r2
   1d116:	4339      	orrs	r1, r7
   1d118:	fbb3 f0fe 	udiv	r0, r3, lr
   1d11c:	0c0f      	lsrs	r7, r1, #16
   1d11e:	fb0e 3310 	mls	r3, lr, r0, r3
   1d122:	fb00 fc08 	mul.w	ip, r0, r8
   1d126:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1d12a:	459c      	cmp	ip, r3
   1d12c:	d907      	bls.n	1d13e <__udivmoddi4+0x252>
   1d12e:	18eb      	adds	r3, r5, r3
   1d130:	bf2c      	ite	cs
   1d132:	2701      	movcs	r7, #1
   1d134:	2700      	movcc	r7, #0
   1d136:	459c      	cmp	ip, r3
   1d138:	d900      	bls.n	1d13c <__udivmoddi4+0x250>
   1d13a:	b38f      	cbz	r7, 1d1a0 <__udivmoddi4+0x2b4>
   1d13c:	3801      	subs	r0, #1
   1d13e:	eba3 030c 	sub.w	r3, r3, ip
   1d142:	b289      	uxth	r1, r1
   1d144:	fbb3 f7fe 	udiv	r7, r3, lr
   1d148:	fb0e 3317 	mls	r3, lr, r7, r3
   1d14c:	fb07 fc08 	mul.w	ip, r7, r8
   1d150:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d154:	458c      	cmp	ip, r1
   1d156:	d904      	bls.n	1d162 <__udivmoddi4+0x276>
   1d158:	1869      	adds	r1, r5, r1
   1d15a:	d201      	bcs.n	1d160 <__udivmoddi4+0x274>
   1d15c:	458c      	cmp	ip, r1
   1d15e:	d825      	bhi.n	1d1ac <__udivmoddi4+0x2c0>
   1d160:	3f01      	subs	r7, #1
   1d162:	eba1 010c 	sub.w	r1, r1, ip
   1d166:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1d16a:	e71d      	b.n	1cfa8 <__udivmoddi4+0xbc>
   1d16c:	1a84      	subs	r4, r0, r2
   1d16e:	eb61 0303 	sbc.w	r3, r1, r3
   1d172:	2001      	movs	r0, #1
   1d174:	4699      	mov	r9, r3
   1d176:	e759      	b.n	1d02c <__udivmoddi4+0x140>
   1d178:	3802      	subs	r0, #2
   1d17a:	442c      	add	r4, r5
   1d17c:	e73c      	b.n	1cff8 <__udivmoddi4+0x10c>
   1d17e:	f1ac 0c02 	sub.w	ip, ip, #2
   1d182:	442b      	add	r3, r5
   1d184:	e726      	b.n	1cfd4 <__udivmoddi4+0xe8>
   1d186:	f1ac 0c02 	sub.w	ip, ip, #2
   1d18a:	442b      	add	r3, r5
   1d18c:	e6e0      	b.n	1cf50 <__udivmoddi4+0x64>
   1d18e:	3802      	subs	r0, #2
   1d190:	442c      	add	r4, r5
   1d192:	e6ef      	b.n	1cf74 <__udivmoddi4+0x88>
   1d194:	4637      	mov	r7, r6
   1d196:	e6f7      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d198:	f1aa 0a02 	sub.w	sl, sl, #2
   1d19c:	4411      	add	r1, r2
   1d19e:	e775      	b.n	1d08c <__udivmoddi4+0x1a0>
   1d1a0:	3802      	subs	r0, #2
   1d1a2:	442b      	add	r3, r5
   1d1a4:	e7cb      	b.n	1d13e <__udivmoddi4+0x252>
   1d1a6:	3802      	subs	r0, #2
   1d1a8:	4411      	add	r1, r2
   1d1aa:	e781      	b.n	1d0b0 <__udivmoddi4+0x1c4>
   1d1ac:	3f02      	subs	r7, #2
   1d1ae:	4429      	add	r1, r5
   1d1b0:	e7d7      	b.n	1d162 <__udivmoddi4+0x276>
   1d1b2:	bf00      	nop

0001d1b4 <__aeabi_idiv0>:
   1d1b4:	4770      	bx	lr
   1d1b6:	bf00      	nop

0001d1b8 <__aeabi_dcmpun>:
   1d1b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d1bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1c0:	d102      	bne.n	1d1c8 <__aeabi_dcmpun+0x10>
   1d1c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d1c6:	d10a      	bne.n	1d1de <__aeabi_dcmpun+0x26>
   1d1c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d1cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1d0:	d102      	bne.n	1d1d8 <__aeabi_dcmpun+0x20>
   1d1d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d1d6:	d102      	bne.n	1d1de <__aeabi_dcmpun+0x26>
   1d1d8:	f04f 0000 	mov.w	r0, #0
   1d1dc:	4770      	bx	lr
   1d1de:	f04f 0001 	mov.w	r0, #1
   1d1e2:	4770      	bx	lr

0001d1e4 <__aeabi_d2lz>:
   1d1e4:	b538      	push	{r3, r4, r5, lr}
   1d1e6:	2200      	movs	r2, #0
   1d1e8:	2300      	movs	r3, #0
   1d1ea:	4604      	mov	r4, r0
   1d1ec:	460d      	mov	r5, r1
   1d1ee:	f7ff fd55 	bl	1cc9c <__aeabi_dcmplt>
   1d1f2:	b928      	cbnz	r0, 1d200 <__aeabi_d2lz+0x1c>
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	4629      	mov	r1, r5
   1d1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d1fc:	f000 b80a 	b.w	1d214 <__aeabi_d2ulz>
   1d200:	4620      	mov	r0, r4
   1d202:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d206:	f000 f805 	bl	1d214 <__aeabi_d2ulz>
   1d20a:	4240      	negs	r0, r0
   1d20c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d210:	bd38      	pop	{r3, r4, r5, pc}
   1d212:	bf00      	nop

0001d214 <__aeabi_d2ulz>:
   1d214:	b5d0      	push	{r4, r6, r7, lr}
   1d216:	2200      	movs	r2, #0
   1d218:	4b0b      	ldr	r3, [pc, #44]	; (1d248 <__aeabi_d2ulz+0x34>)
   1d21a:	4606      	mov	r6, r0
   1d21c:	460f      	mov	r7, r1
   1d21e:	f7ff facb 	bl	1c7b8 <__aeabi_dmul>
   1d222:	f7ff fd8b 	bl	1cd3c <__aeabi_d2uiz>
   1d226:	4604      	mov	r4, r0
   1d228:	f7ff fa4c 	bl	1c6c4 <__aeabi_ui2d>
   1d22c:	2200      	movs	r2, #0
   1d22e:	4b07      	ldr	r3, [pc, #28]	; (1d24c <__aeabi_d2ulz+0x38>)
   1d230:	f7ff fac2 	bl	1c7b8 <__aeabi_dmul>
   1d234:	4602      	mov	r2, r0
   1d236:	460b      	mov	r3, r1
   1d238:	4630      	mov	r0, r6
   1d23a:	4639      	mov	r1, r7
   1d23c:	f7ff f904 	bl	1c448 <__aeabi_dsub>
   1d240:	f7ff fd7c 	bl	1cd3c <__aeabi_d2uiz>
   1d244:	4621      	mov	r1, r4
   1d246:	bdd0      	pop	{r4, r6, r7, pc}
   1d248:	3df00000 	.word	0x3df00000
   1d24c:	41f00000 	.word	0x41f00000

0001d250 <strcmp>:
   1d250:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d254:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d258:	2a01      	cmp	r2, #1
   1d25a:	bf28      	it	cs
   1d25c:	429a      	cmpcs	r2, r3
   1d25e:	d0f7      	beq.n	1d250 <strcmp>
   1d260:	1ad0      	subs	r0, r2, r3
   1d262:	4770      	bx	lr

0001d264 <strlen>:
   1d264:	4603      	mov	r3, r0
   1d266:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d26a:	2a00      	cmp	r2, #0
   1d26c:	d1fb      	bne.n	1d266 <strlen+0x2>
   1d26e:	1a18      	subs	r0, r3, r0
   1d270:	3801      	subs	r0, #1
   1d272:	4770      	bx	lr
   1d274:	0000      	movs	r0, r0
	...

0001d278 <send_agps_request>:
{
	error_handler(ERROR_CLOUD, err);
}

static void send_agps_request(struct k_work *work)
{
   1d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d27c:	4b28      	ldr	r3, [pc, #160]	; (1d320 <send_agps_request+0xa8>)
	static int64_t last_request_timestamp;

/* Request A-GPS data no more often than every hour (time in milliseconds). */
#define AGPS_UPDATE_PERIOD (60 * 60 * 1000)

	if ((last_request_timestamp != 0) &&
   1d27e:	4d29      	ldr	r5, [pc, #164]	; (1d324 <send_agps_request+0xac>)
   1d280:	4c29      	ldr	r4, [pc, #164]	; (1d328 <send_agps_request+0xb0>)
   1d282:	46a8      	mov	r8, r5
   1d284:	1ae4      	subs	r4, r4, r3
   1d286:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d28a:	4313      	orrs	r3, r2
   1d28c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1d290:	d018      	beq.n	1d2c4 <send_agps_request+0x4c>
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   1d292:	f024 fb01 	bl	41898 <k_uptime_get>
   1d296:	e9d5 3200 	ldrd	r3, r2, [r5]
   1d29a:	1ac6      	subs	r6, r0, r3
   1d29c:	eb61 0702 	sbc.w	r7, r1, r2
	if ((last_request_timestamp != 0) &&
   1d2a0:	a31d      	add	r3, pc, #116	; (adr r3, 1d318 <send_agps_request+0xa0>)
   1d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2a6:	42b2      	cmp	r2, r6
   1d2a8:	41bb      	sbcs	r3, r7
   1d2aa:	db0b      	blt.n	1d2c4 <send_agps_request+0x4c>
		LOG_WRN("A-GPS request was sent less than 1 hour ago");
   1d2ac:	f04f 0000 	mov.w	r0, #0
   1d2b0:	2302      	movs	r3, #2
   1d2b2:	491e      	ldr	r1, [pc, #120]	; (1d32c <send_agps_request+0xb4>)
   1d2b4:	f363 0007 	bfi	r0, r3, #0, #8
   1d2b8:	f364 108f 	bfi	r0, r4, #6, #10

	last_request_timestamp = k_uptime_get();

	LOG_INF("A-GPS request sent");
#endif /* defined(CONFIG_AGPS) */
}
   1d2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("A-GPS request sent");
   1d2c0:	f024 bebd 	b.w	4203e <log_string_sync>
	LOG_INF("Sending A-GPS request");
   1d2c4:	2303      	movs	r3, #3
   1d2c6:	f04f 0000 	mov.w	r0, #0
   1d2ca:	f363 0007 	bfi	r0, r3, #0, #8
   1d2ce:	f364 108f 	bfi	r0, r4, #6, #10
   1d2d2:	4917      	ldr	r1, [pc, #92]	; (1d330 <send_agps_request+0xb8>)
   1d2d4:	f024 feb3 	bl	4203e <log_string_sync>
	err = gps_agps_request(agps_request, GPS_SOCKET_NOT_PROVIDED);
   1d2d8:	4a16      	ldr	r2, [pc, #88]	; (1d334 <send_agps_request+0xbc>)
   1d2da:	2300      	movs	r3, #0
   1d2dc:	ca07      	ldmia	r2, {r0, r1, r2}
   1d2de:	f009 fbb1 	bl	26a44 <gps_agps_request>
	if (err) {
   1d2e2:	4602      	mov	r2, r0
   1d2e4:	b158      	cbz	r0, 1d2fe <send_agps_request+0x86>
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1d2e6:	2101      	movs	r1, #1
   1d2e8:	f04f 0000 	mov.w	r0, #0
   1d2ec:	f361 0007 	bfi	r0, r1, #0, #8
   1d2f0:	f364 108f 	bfi	r0, r4, #6, #10
   1d2f4:	4910      	ldr	r1, [pc, #64]	; (1d338 <send_agps_request+0xc0>)
}
   1d2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1d2fa:	f024 bea0 	b.w	4203e <log_string_sync>
	last_request_timestamp = k_uptime_get();
   1d2fe:	f024 facb 	bl	41898 <k_uptime_get>
	LOG_INF("A-GPS request sent");
   1d302:	2303      	movs	r3, #3
	last_request_timestamp = k_uptime_get();
   1d304:	e9c8 0100 	strd	r0, r1, [r8]
	LOG_INF("A-GPS request sent");
   1d308:	f04f 0000 	mov.w	r0, #0
   1d30c:	f363 0007 	bfi	r0, r3, #0, #8
   1d310:	f364 108f 	bfi	r0, r4, #6, #10
   1d314:	4909      	ldr	r1, [pc, #36]	; (1d33c <send_agps_request+0xc4>)
   1d316:	e7d1      	b.n	1d2bc <send_agps_request+0x44>
   1d318:	0036ee7f 	.word	0x0036ee7f
   1d31c:	00000000 	.word	0x00000000
   1d320:	00046878 	.word	0x00046878
   1d324:	20020e58 	.word	0x20020e58
   1d328:	00046888 	.word	0x00046888
   1d32c:	00048486 	.word	0x00048486
   1d330:	000484b2 	.word	0x000484b2
   1d334:	20024598 	.word	0x20024598
   1d338:	000484c8 	.word	0x000484c8
   1d33c:	000484f0 	.word	0x000484f0

0001d340 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d340:	b570      	push	{r4, r5, r6, lr}
   1d342:	b096      	sub	sp, #88	; 0x58
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d344:	f027 fe9b 	bl	4507e <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d348:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d34c:	fba0 5604 	umull	r5, r6, r0, r4
   1d350:	fb04 6601 	mla	r6, r4, r1, r6
   1d354:	0bea      	lsrs	r2, r5, #15
		err = sensor_sample_fetch_chan(accel_dev,
   1d356:	4c52      	ldr	r4, [pc, #328]	; (1d4a0 <motion_work_q_handler+0x160>)
   1d358:	ea42 4246 	orr.w	r2, r2, r6, lsl #17
   1d35c:	0bf3      	lsrs	r3, r6, #15
	motion_data_t motion_data;

	motion_data.ts = k_uptime_get();
   1d35e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		err = sensor_sample_fetch_chan(accel_dev,
   1d362:	6820      	ldr	r0, [r4, #0]
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   1d364:	6883      	ldr	r3, [r0, #8]
   1d366:	2103      	movs	r1, #3
   1d368:	68db      	ldr	r3, [r3, #12]
   1d36a:	4798      	blx	r3
	if (err) {
   1d36c:	4601      	mov	r1, r0
   1d36e:	b178      	cbz	r0, 1d390 <motion_work_q_handler+0x50>
		LOG_ERR("sensor_sample_fetch failed");
   1d370:	2301      	movs	r3, #1
   1d372:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1d376:	4a4b      	ldr	r2, [pc, #300]	; (1d4a4 <motion_work_q_handler+0x164>)
   1d378:	f363 0007 	bfi	r0, r3, #0, #8
   1d37c:	4b4a      	ldr	r3, [pc, #296]	; (1d4a8 <motion_work_q_handler+0x168>)
   1d37e:	494b      	ldr	r1, [pc, #300]	; (1d4ac <motion_work_q_handler+0x16c>)
   1d380:	1a9b      	subs	r3, r3, r2
   1d382:	08db      	lsrs	r3, r3, #3
   1d384:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("sensor_channel_get failed");
   1d388:	f024 fe59 	bl	4203e <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d38c:	b016      	add	sp, #88	; 0x58
   1d38e:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d390:	aa06      	add	r2, sp, #24
   1d392:	6820      	ldr	r0, [r4, #0]
   1d394:	f024 fa9d 	bl	418d2 <sensor_channel_get>
	if (err) {
   1d398:	b160      	cbz	r0, 1d3b4 <motion_work_q_handler+0x74>
		LOG_ERR("sensor_channel_get failed");
   1d39a:	2301      	movs	r3, #1
   1d39c:	f04f 0000 	mov.w	r0, #0
   1d3a0:	4a40      	ldr	r2, [pc, #256]	; (1d4a4 <motion_work_q_handler+0x164>)
   1d3a2:	f363 0007 	bfi	r0, r3, #0, #8
   1d3a6:	4b40      	ldr	r3, [pc, #256]	; (1d4a8 <motion_work_q_handler+0x168>)
   1d3a8:	4941      	ldr	r1, [pc, #260]	; (1d4b0 <motion_work_q_handler+0x170>)
   1d3aa:	1a9b      	subs	r3, r3, r2
   1d3ac:	08db      	lsrs	r3, r3, #3
   1d3ae:	f363 108f 	bfi	r0, r3, #6, #10
   1d3b2:	e7e9      	b.n	1d388 <motion_work_q_handler+0x48>
	err = sensor_channel_get(accel_dev,
   1d3b4:	aa08      	add	r2, sp, #32
   1d3b6:	2101      	movs	r1, #1
   1d3b8:	6820      	ldr	r0, [r4, #0]
   1d3ba:	f024 fa8a 	bl	418d2 <sensor_channel_get>
	if (err) {
   1d3be:	2800      	cmp	r0, #0
   1d3c0:	d1eb      	bne.n	1d39a <motion_work_q_handler+0x5a>
	err = sensor_channel_get(accel_dev,
   1d3c2:	aa0a      	add	r2, sp, #40	; 0x28
   1d3c4:	2102      	movs	r1, #2
   1d3c6:	6820      	ldr	r0, [r4, #0]
   1d3c8:	f024 fa83 	bl	418d2 <sensor_channel_get>
	if (err) {
   1d3cc:	2800      	cmp	r0, #0
   1d3ce:	d1e4      	bne.n	1d39a <motion_work_q_handler+0x5a>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d3d0:	9807      	ldr	r0, [sp, #28]
   1d3d2:	f7ff f987 	bl	1c6e4 <__aeabi_i2d>
   1d3d6:	a330      	add	r3, pc, #192	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3dc:	f7ff fb16 	bl	1ca0c <__aeabi_ddiv>
   1d3e0:	4604      	mov	r4, r0
   1d3e2:	9806      	ldr	r0, [sp, #24]
   1d3e4:	460d      	mov	r5, r1
   1d3e6:	f7ff f97d 	bl	1c6e4 <__aeabi_i2d>
   1d3ea:	4602      	mov	r2, r0
   1d3ec:	460b      	mov	r3, r1
   1d3ee:	4620      	mov	r0, r4
   1d3f0:	4629      	mov	r1, r5
   1d3f2:	f7ff f82b 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d3f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d3fc:	f7ff f972 	bl	1c6e4 <__aeabi_i2d>
   1d400:	a325      	add	r3, pc, #148	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d402:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d406:	f7ff fb01 	bl	1ca0c <__aeabi_ddiv>
   1d40a:	4604      	mov	r4, r0
   1d40c:	9808      	ldr	r0, [sp, #32]
   1d40e:	460d      	mov	r5, r1
   1d410:	f7ff f968 	bl	1c6e4 <__aeabi_i2d>
   1d414:	4602      	mov	r2, r0
   1d416:	460b      	mov	r3, r1
   1d418:	4620      	mov	r0, r4
   1d41a:	4629      	mov	r1, r5
   1d41c:	f7ff f816 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1d424:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d426:	f7ff f95d 	bl	1c6e4 <__aeabi_i2d>
   1d42a:	a31b      	add	r3, pc, #108	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d430:	f7ff faec 	bl	1ca0c <__aeabi_ddiv>
   1d434:	4604      	mov	r4, r0
   1d436:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d438:	460d      	mov	r5, r1
   1d43a:	f7ff f953 	bl	1c6e4 <__aeabi_i2d>
   1d43e:	4602      	mov	r2, r0
   1d440:	460b      	mov	r3, r1
   1d442:	4620      	mov	r0, r4
   1d444:	4629      	mov	r1, r5
   1d446:	f7ff f801 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d44a:	2200      	movs	r2, #0
   1d44c:	4b19      	ldr	r3, [pc, #100]	; (1d4b4 <motion_work_q_handler+0x174>)
   1d44e:	4604      	mov	r4, r0
   1d450:	460d      	mov	r5, r1
   1d452:	f7ff fc37 	bl	1ccc4 <__aeabi_dcmpge>
   1d456:	b190      	cbz	r0, 1d47e <motion_work_q_handler+0x13e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d458:	2301      	movs	r3, #1
			handler(motion_data);
   1d45a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   1d45e:	466c      	mov	r4, sp
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d460:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			handler(motion_data);
   1d464:	4b14      	ldr	r3, [pc, #80]	; (1d4b8 <motion_work_q_handler+0x178>)
   1d466:	ad10      	add	r5, sp, #64	; 0x40
   1d468:	681e      	ldr	r6, [r3, #0]
   1d46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d46e:	e895 0003 	ldmia.w	r5, {r0, r1}
   1d472:	e884 0003 	stmia.w	r4, {r0, r1}
   1d476:	ab0c      	add	r3, sp, #48	; 0x30
   1d478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d47a:	47b0      	blx	r6
}
   1d47c:	e786      	b.n	1d38c <motion_work_q_handler+0x4c>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d47e:	2200      	movs	r2, #0
   1d480:	4b0e      	ldr	r3, [pc, #56]	; (1d4bc <motion_work_q_handler+0x17c>)
   1d482:	4620      	mov	r0, r4
   1d484:	4629      	mov	r1, r5
   1d486:	f7ff fc13 	bl	1ccb0 <__aeabi_dcmple>
   1d48a:	b108      	cbz	r0, 1d490 <motion_work_q_handler+0x150>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d48c:	2302      	movs	r3, #2
   1d48e:	e7e4      	b.n	1d45a <motion_work_q_handler+0x11a>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d490:	2303      	movs	r3, #3
   1d492:	e7e2      	b.n	1d45a <motion_work_q_handler+0x11a>
   1d494:	f3af 8000 	nop.w
   1d498:	00000000 	.word	0x00000000
   1d49c:	412e8480 	.word	0x412e8480
   1d4a0:	20024600 	.word	0x20024600
   1d4a4:	00046878 	.word	0x00046878
   1d4a8:	00046928 	.word	0x00046928
   1d4ac:	00048721 	.word	0x00048721
   1d4b0:	0004873c 	.word	0x0004873c
   1d4b4:	40140000 	.word	0x40140000
   1d4b8:	20024604 	.word	0x20024604
   1d4bc:	c0140000 	.word	0xc0140000

0001d4c0 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c4:	b08d      	sub	sp, #52	; 0x34
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d4c6:	4b6a      	ldr	r3, [pc, #424]	; (1d670 <env_sensors_poll_fn+0x1b0>)
{
   1d4c8:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d4ca:	681a      	ldr	r2, [r3, #0]
{
   1d4cc:	f8c7 d008 	str.w	sp, [r7, #8]
	if (data_send_interval_s == 0) {
   1d4d0:	603b      	str	r3, [r7, #0]
   1d4d2:	2a00      	cmp	r2, #0
   1d4d4:	d05c      	beq.n	1d590 <env_sensors_poll_fn+0xd0>
   1d4d6:	4b67      	ldr	r3, [pc, #412]	; (1d674 <env_sensors_poll_fn+0x1b4>)
	for (int i = 0; i < num_sensors; i++) {
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d4d8:	4a67      	ldr	r2, [pc, #412]	; (1d678 <env_sensors_poll_fn+0x1b8>)
   1d4da:	4c68      	ldr	r4, [pc, #416]	; (1d67c <env_sensors_poll_fn+0x1bc>)
   1d4dc:	1a9b      	subs	r3, r3, r2
   1d4de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1d4e2:	613b      	str	r3, [r7, #16]
   1d4e4:	2303      	movs	r3, #3
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d4e6:	4e66      	ldr	r6, [pc, #408]	; (1d680 <env_sensors_poll_fn+0x1c0>)
   1d4e8:	f107 0518 	add.w	r5, r7, #24
   1d4ec:	60fb      	str	r3, [r7, #12]
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d4ee:	f854 3b04 	ldr.w	r3, [r4], #4
   1d4f2:	6a18      	ldr	r0, [r3, #32]
   1d4f4:	8b19      	ldrh	r1, [r3, #24]
	return api->sample_fetch(dev, type);
   1d4f6:	6883      	ldr	r3, [r0, #8]
   1d4f8:	68db      	ldr	r3, [r3, #12]
   1d4fa:	4798      	blx	r3
			if (err) {
   1d4fc:	4680      	mov	r8, r0
   1d4fe:	b1b0      	cbz	r0, 1d52e <env_sensors_poll_fn+0x6e>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d500:	8abb      	ldrh	r3, [r7, #20]
   1d502:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   1d506:	f042 0201 	orr.w	r2, r2, #1
   1d50a:	f362 0307 	bfi	r3, r2, #0, #8
   1d50e:	693a      	ldr	r2, [r7, #16]
   1d510:	b29b      	uxth	r3, r3
   1d512:	f362 138f 	bfi	r3, r2, #6, #10
   1d516:	82bb      	strh	r3, [r7, #20]
   1d518:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d51c:	69d8      	ldr	r0, [r3, #28]
   1d51e:	f024 fda1 	bl	42064 <log_strdup>
   1d522:	4643      	mov	r3, r8
   1d524:	4602      	mov	r2, r0
   1d526:	4957      	ldr	r1, [pc, #348]	; (1d684 <env_sensors_poll_fn+0x1c4>)
   1d528:	8ab8      	ldrh	r0, [r7, #20]
   1d52a:	f024 fd88 	bl	4203e <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d52e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d532:	6a18      	ldr	r0, [r3, #32]
   1d534:	8b19      	ldrh	r1, [r3, #24]
	return api->channel_get(dev, chan, val);
   1d536:	6883      	ldr	r3, [r0, #8]
   1d538:	462a      	mov	r2, r5
   1d53a:	691b      	ldr	r3, [r3, #16]
   1d53c:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d53e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d542:	4681      	mov	r9, r0
   1d544:	b340      	cbz	r0, 1d598 <env_sensors_poll_fn+0xd8>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d546:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   1d54a:	f042 0201 	orr.w	r2, r2, #1
   1d54e:	f362 0a07 	bfi	sl, r2, #0, #8
   1d552:	693a      	ldr	r2, [r7, #16]
   1d554:	69d8      	ldr	r0, [r3, #28]
   1d556:	f362 1a8f 	bfi	sl, r2, #6, #10
   1d55a:	f024 fd83 	bl	42064 <log_strdup>
   1d55e:	464b      	mov	r3, r9
   1d560:	4602      	mov	r2, r0
   1d562:	4948      	ldr	r1, [pc, #288]	; (1d684 <env_sensors_poll_fn+0x1c4>)
   1d564:	4650      	mov	r0, sl
   1d566:	f024 fd6a 	bl	4203e <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d56a:	68fb      	ldr	r3, [r7, #12]
   1d56c:	3508      	adds	r5, #8
   1d56e:	3b01      	subs	r3, #1
   1d570:	60fb      	str	r3, [r7, #12]
   1d572:	d1bc      	bne.n	1d4ee <env_sensors_poll_fn+0x2e>
			env_sensors[i]->sensor.ts = k_uptime_get();
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d574:	4b44      	ldr	r3, [pc, #272]	; (1d688 <env_sensors_poll_fn+0x1c8>)
   1d576:	681b      	ldr	r3, [r3, #0]
   1d578:	b103      	cbz	r3, 1d57c <env_sensors_poll_fn+0xbc>
		data_ready_cb();
   1d57a:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d57c:	4b43      	ldr	r3, [pc, #268]	; (1d68c <env_sensors_poll_fn+0x1cc>)
   1d57e:	781b      	ldrb	r3, [r3, #0]
   1d580:	2b00      	cmp	r3, #0
   1d582:	d16c      	bne.n	1d65e <env_sensors_poll_fn+0x19e>
   1d584:	683b      	ldr	r3, [r7, #0]
   1d586:	6818      	ldr	r0, [r3, #0]
   1d588:	f006 faa0 	bl	23acc <submit_poll_work>
   1d58c:	f8d7 d008 	ldr.w	sp, [r7, #8]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d590:	3734      	adds	r7, #52	; 0x34
   1d592:	46bd      	mov	sp, r7
   1d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d598:	f103 0824 	add.w	r8, r3, #36	; 0x24
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d59c:	f04f 0320 	mov.w	r3, #32
   1d5a0:	f3ef 8211 	mrs	r2, BASEPRI
   1d5a4:	f383 8811 	msr	BASEPRI, r3
   1d5a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d5ac:	4640      	mov	r0, r8
   1d5ae:	607a      	str	r2, [r7, #4]
   1d5b0:	f021 f848 	bl	3e644 <z_spin_lock_valid>
   1d5b4:	b968      	cbnz	r0, 1d5d2 <env_sensors_poll_fn+0x112>
   1d5b6:	235c      	movs	r3, #92	; 0x5c
   1d5b8:	4632      	mov	r2, r6
   1d5ba:	4935      	ldr	r1, [pc, #212]	; (1d690 <env_sensors_poll_fn+0x1d0>)
   1d5bc:	4835      	ldr	r0, [pc, #212]	; (1d694 <env_sensors_poll_fn+0x1d4>)
   1d5be:	f024 fb13 	bl	41be8 <printk>
   1d5c2:	4641      	mov	r1, r8
   1d5c4:	4834      	ldr	r0, [pc, #208]	; (1d698 <env_sensors_poll_fn+0x1d8>)
   1d5c6:	f024 fb0f 	bl	41be8 <printk>
   1d5ca:	215c      	movs	r1, #92	; 0x5c
   1d5cc:	4630      	mov	r0, r6
   1d5ce:	f024 fd25 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   1d5d2:	4640      	mov	r0, r8
   1d5d4:	f021 f854 	bl	3e680 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d5d8:	6868      	ldr	r0, [r5, #4]
   1d5da:	f7ff f883 	bl	1c6e4 <__aeabi_i2d>
   1d5de:	a322      	add	r3, pc, #136	; (adr r3, 1d668 <env_sensors_poll_fn+0x1a8>)
   1d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d5e4:	f7ff fa12 	bl	1ca0c <__aeabi_ddiv>
   1d5e8:	4680      	mov	r8, r0
   1d5ea:	6828      	ldr	r0, [r5, #0]
   1d5ec:	4689      	mov	r9, r1
   1d5ee:	f7ff f879 	bl	1c6e4 <__aeabi_i2d>
   1d5f2:	4602      	mov	r2, r0
   1d5f4:	460b      	mov	r3, r1
   1d5f6:	4640      	mov	r0, r8
   1d5f8:	4649      	mov	r1, r9
   1d5fa:	f7fe ff27 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d5fe:	f854 bc04 	ldr.w	fp, [r4, #-4]
   1d602:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1d606:	f027 fd3a 	bl	4507e <z_impl_k_uptime_ticks>
   1d60a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1d60e:	fba0 890c 	umull	r8, r9, r0, ip
   1d612:	fb0c 9901 	mla	r9, ip, r1, r9
   1d616:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1d61a:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1d61e:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
			env_sensors[i]->sensor.ts = k_uptime_get();
   1d622:	e9cb 2304 	strd	r2, r3, [fp, #16]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d626:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d62a:	f103 0824 	add.w	r8, r3, #36	; 0x24
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d62e:	4640      	mov	r0, r8
   1d630:	f021 f816 	bl	3e660 <z_spin_unlock_valid>
   1d634:	b968      	cbnz	r0, 1d652 <env_sensors_poll_fn+0x192>
   1d636:	2384      	movs	r3, #132	; 0x84
   1d638:	4632      	mov	r2, r6
   1d63a:	4918      	ldr	r1, [pc, #96]	; (1d69c <env_sensors_poll_fn+0x1dc>)
   1d63c:	4815      	ldr	r0, [pc, #84]	; (1d694 <env_sensors_poll_fn+0x1d4>)
   1d63e:	f024 fad3 	bl	41be8 <printk>
   1d642:	4641      	mov	r1, r8
   1d644:	4816      	ldr	r0, [pc, #88]	; (1d6a0 <env_sensors_poll_fn+0x1e0>)
   1d646:	f024 facf 	bl	41be8 <printk>
   1d64a:	2184      	movs	r1, #132	; 0x84
   1d64c:	4630      	mov	r0, r6
   1d64e:	f024 fce5 	bl	4201c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	f383 8811 	msr	BASEPRI, r3
   1d658:	f3bf 8f6f 	isb	sy
   1d65c:	e785      	b.n	1d56a <env_sensors_poll_fn+0xaa>
	submit_poll_work(backoff_enabled ?
   1d65e:	2014      	movs	r0, #20
   1d660:	e792      	b.n	1d588 <env_sensors_poll_fn+0xc8>
   1d662:	bf00      	nop
   1d664:	f3af 8000 	nop.w
   1d668:	00000000 	.word	0x00000000
   1d66c:	412e8480 	.word	0x412e8480
   1d670:	20020640 	.word	0x20020640
   1d674:	000468e8 	.word	0x000468e8
   1d678:	00046878 	.word	0x00046878
   1d67c:	00046c50 	.word	0x00046c50
   1d680:	00048d7b 	.word	0x00048d7b
   1d684:	00048d53 	.word	0x00048d53
   1d688:	20024628 	.word	0x20024628
   1d68c:	2002ae7f 	.word	0x2002ae7f
   1d690:	00048da1 	.word	0x00048da1
   1d694:	0004825b 	.word	0x0004825b
   1d698:	00048db6 	.word	0x00048db6
   1d69c:	00048dce 	.word	0x00048dce
   1d6a0:	00048de5 	.word	0x00048de5
   1d6a4:	00000000 	.word	0x00000000

0001d6a8 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1d6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6ac:	4605      	mov	r5, r0
   1d6ae:	b09b      	sub	sp, #108	; 0x6c
   1d6b0:	460f      	mov	r7, r1
   1d6b2:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1d6b4:	2100      	movs	r1, #0
   1d6b6:	2230      	movs	r2, #48	; 0x30
   1d6b8:	a802      	add	r0, sp, #8
   1d6ba:	f027 fdd5 	bl	45268 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1d6be:	2d00      	cmp	r5, #0
   1d6c0:	f000 8087 	beq.w	1d7d2 <sntp_query+0x12a>
   1d6c4:	2e00      	cmp	r6, #0
   1d6c6:	f000 8084 	beq.w	1d7d2 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1d6ca:	231b      	movs	r3, #27
   1d6cc:	f88d 3008 	strb.w	r3, [sp, #8]
   1d6d0:	f027 fcd5 	bl	4507e <z_impl_k_uptime_ticks>
   1d6d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d6d8:	2400      	movs	r4, #0
   1d6da:	fba0 8903 	umull	r8, r9, r0, r3
   1d6de:	fb03 9901 	mla	r9, r3, r1, r9
   1d6e2:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   1d6e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d6ea:	2300      	movs	r3, #0
   1d6ec:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1d6f0:	4621      	mov	r1, r4
   1d6f2:	f7ff fbe3 	bl	1cebc <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d6f6:	4a3c      	ldr	r2, [pc, #240]	; (1d7e8 <sntp_query+0x140>)
   1d6f8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d6fa:	0a13      	lsrs	r3, r2, #8
   1d6fc:	0211      	lsls	r1, r2, #8
   1d6fe:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1d702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d706:	430b      	orrs	r3, r1
   1d708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d70c:	f043 0383 	orr.w	r3, r3, #131	; 0x83
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d710:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d712:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1d714:	68e8      	ldr	r0, [r5, #12]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d716:	2230      	movs	r2, #48	; 0x30
   1d718:	e9cd 4400 	strd	r4, r4, [sp]
   1d71c:	4623      	mov	r3, r4
   1d71e:	a902      	add	r1, sp, #8
   1d720:	f025 f830 	bl	42784 <z_impl_zsock_sendto>
	if (ret < 0) {
   1d724:	2800      	cmp	r0, #0
   1d726:	db0f      	blt.n	1d748 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   1d728:	4621      	mov	r1, r4
   1d72a:	2230      	movs	r2, #48	; 0x30
   1d72c:	a80e      	add	r0, sp, #56	; 0x38
   1d72e:	f027 fd9b 	bl	45268 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1d732:	68a9      	ldr	r1, [r5, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d734:	463a      	mov	r2, r7
   1d736:	4628      	mov	r0, r5
   1d738:	f007 feac 	bl	25494 <z_impl_zsock_poll>
	if (status < 0) {
   1d73c:	42a0      	cmp	r0, r4
   1d73e:	da06      	bge.n	1d74e <sntp_query+0xa6>
		return -errno;
   1d740:	f025 faeb 	bl	42d1a <__errno>
   1d744:	6800      	ldr	r0, [r0, #0]
   1d746:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1d748:	b01b      	add	sp, #108	; 0x6c
   1d74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   1d74e:	d037      	beq.n	1d7c0 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1d750:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d752:	2230      	movs	r2, #48	; 0x30
   1d754:	e9cd 4400 	strd	r4, r4, [sp]
   1d758:	4623      	mov	r3, r4
   1d75a:	a90e      	add	r1, sp, #56	; 0x38
   1d75c:	f025 f845 	bl	427ea <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1d760:	2800      	cmp	r0, #0
   1d762:	dbed      	blt.n	1d740 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1d764:	2830      	cmp	r0, #48	; 0x30
   1d766:	d12e      	bne.n	1d7c6 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1d768:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d76a:	692a      	ldr	r2, [r5, #16]
   1d76c:	ba1b      	rev	r3, r3
   1d76e:	429a      	cmp	r2, r3
   1d770:	d002      	beq.n	1d778 <sntp_query+0xd0>
		return -EINVAL;
   1d772:	f06f 0015 	mvn.w	r0, #21
   1d776:	e7e7      	b.n	1d748 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1d778:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d77c:	f003 0307 	and.w	r3, r3, #7
   1d780:	2b04      	cmp	r3, #4
   1d782:	d1f6      	bne.n	1d772 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1d784:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d788:	b303      	cbz	r3, 1d7cc <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1d78a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d78c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d78e:	ba1b      	rev	r3, r3
   1d790:	ba12      	rev	r2, r2
   1d792:	ea53 0102 	orrs.w	r1, r3, r2
   1d796:	d0ec      	beq.n	1d772 <sntp_query+0xca>
	if (ts & 0x80000000) {
   1d798:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1d79a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1d79c:	da0c      	bge.n	1d7b8 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1d79e:	4a13      	ldr	r2, [pc, #76]	; (1d7ec <sntp_query+0x144>)
   1d7a0:	4293      	cmp	r3, r2
   1d7a2:	d9e6      	bls.n	1d772 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1d7a4:	a10c      	add	r1, pc, #48	; (adr r1, 1d7d8 <sntp_query+0x130>)
   1d7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d7aa:	18c4      	adds	r4, r0, r3
   1d7ac:	f141 0500 	adc.w	r5, r1, #0
   1d7b0:	e9c6 4500 	strd	r4, r5, [r6]
	return 0;
   1d7b4:	2000      	movs	r0, #0
   1d7b6:	e7c7      	b.n	1d748 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d7b8:	a109      	add	r1, pc, #36	; (adr r1, 1d7e0 <sntp_query+0x138>)
   1d7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d7be:	e7f4      	b.n	1d7aa <sntp_query+0x102>
		return -ETIMEDOUT;
   1d7c0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1d7c4:	e7c0      	b.n	1d748 <sntp_query+0xa0>
		return -EMSGSIZE;
   1d7c6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d7ca:	e7bd      	b.n	1d748 <sntp_query+0xa0>
		return -EBUSY;
   1d7cc:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1d7d0:	e7ba      	b.n	1d748 <sntp_query+0xa0>
		return -EFAULT;
   1d7d2:	f06f 000d 	mvn.w	r0, #13
   1d7d6:	e7b7      	b.n	1d748 <sntp_query+0xa0>
   1d7d8:	7c558180 	.word	0x7c558180
   1d7dc:	ffffffff 	.word	0xffffffff
   1d7e0:	7c558180 	.word	0x7c558180
   1d7e4:	00000000 	.word	0x00000000
   1d7e8:	83aa7e80 	.word	0x83aa7e80
   1d7ec:	83aa7e7f 	.word	0x83aa7e7f

0001d7f0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7f4:	4605      	mov	r5, r0
   1d7f6:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d7f8:	460c      	mov	r4, r1
   1d7fa:	b909      	cbnz	r1, 1d800 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d7fc:	2000      	movs	r0, #0
   1d7fe:	e024      	b.n	1d84a <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d800:	6808      	ldr	r0, [r1, #0]
   1d802:	2800      	cmp	r0, #0
   1d804:	d0fa      	beq.n	1d7fc <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d806:	688b      	ldr	r3, [r1, #8]
   1d808:	6862      	ldr	r2, [r4, #4]
   1d80a:	1d19      	adds	r1, r3, #4
   1d80c:	4291      	cmp	r1, r2
   1d80e:	d80b      	bhi.n	1d828 <parse_value+0x38>
   1d810:	2204      	movs	r2, #4
   1d812:	49b1      	ldr	r1, [pc, #708]	; (1dad8 <parse_value+0x2e8>)
   1d814:	4418      	add	r0, r3
   1d816:	f027 ff00 	bl	4561a <strncmp>
   1d81a:	b928      	cbnz	r0, 1d828 <parse_value+0x38>
        item->type = cJSON_NULL;
   1d81c:	2304      	movs	r3, #4
   1d81e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d820:	68a3      	ldr	r3, [r4, #8]
   1d822:	3304      	adds	r3, #4
    input_buffer->offset++;
   1d824:	60a3      	str	r3, [r4, #8]
   1d826:	e074      	b.n	1d912 <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d828:	68a3      	ldr	r3, [r4, #8]
   1d82a:	6862      	ldr	r2, [r4, #4]
   1d82c:	1d59      	adds	r1, r3, #5
   1d82e:	4291      	cmp	r1, r2
   1d830:	d80e      	bhi.n	1d850 <parse_value+0x60>
   1d832:	6820      	ldr	r0, [r4, #0]
   1d834:	2205      	movs	r2, #5
   1d836:	49a9      	ldr	r1, [pc, #676]	; (1dadc <parse_value+0x2ec>)
   1d838:	4418      	add	r0, r3
   1d83a:	f027 feee 	bl	4561a <strncmp>
   1d83e:	b938      	cbnz	r0, 1d850 <parse_value+0x60>
        item->type = cJSON_False;
   1d840:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d842:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1d844:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d846:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1d848:	60a3      	str	r3, [r4, #8]
}
   1d84a:	b013      	add	sp, #76	; 0x4c
   1d84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d850:	68a3      	ldr	r3, [r4, #8]
   1d852:	6862      	ldr	r2, [r4, #4]
   1d854:	1d19      	adds	r1, r3, #4
   1d856:	4291      	cmp	r1, r2
   1d858:	d80d      	bhi.n	1d876 <parse_value+0x86>
   1d85a:	6820      	ldr	r0, [r4, #0]
   1d85c:	2204      	movs	r2, #4
   1d85e:	49a0      	ldr	r1, [pc, #640]	; (1dae0 <parse_value+0x2f0>)
   1d860:	4418      	add	r0, r3
   1d862:	f027 feda 	bl	4561a <strncmp>
   1d866:	b930      	cbnz	r0, 1d876 <parse_value+0x86>
        item->type = cJSON_True;
   1d868:	2302      	movs	r3, #2
        item->valueint = 1;
   1d86a:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1d86c:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d86e:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1d870:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d872:	3304      	adds	r3, #4
   1d874:	e7e8      	b.n	1d848 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d876:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1d87a:	42ba      	cmp	r2, r7
   1d87c:	d2be      	bcs.n	1d7fc <parse_value+0xc>
   1d87e:	6820      	ldr	r0, [r4, #0]
   1d880:	5c83      	ldrb	r3, [r0, r2]
   1d882:	2b22      	cmp	r3, #34	; 0x22
   1d884:	d104      	bne.n	1d890 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1d886:	4621      	mov	r1, r4
   1d888:	4628      	mov	r0, r5
   1d88a:	f00b f8b9 	bl	28a00 <parse_string>
   1d88e:	e7dc      	b.n	1d84a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d890:	2b2d      	cmp	r3, #45	; 0x2d
   1d892:	d003      	beq.n	1d89c <parse_value+0xac>
   1d894:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1d898:	2e09      	cmp	r6, #9
   1d89a:	d850      	bhi.n	1d93e <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1d89c:	2300      	movs	r3, #0
   1d89e:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d8a0:	2800      	cmp	r0, #0
   1d8a2:	d0ab      	beq.n	1d7fc <parse_value+0xc>
   1d8a4:	1abf      	subs	r7, r7, r2
   1d8a6:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d8a8:	429f      	cmp	r7, r3
   1d8aa:	eb02 0103 	add.w	r1, r2, r3
   1d8ae:	d00e      	beq.n	1d8ce <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1d8b0:	5c41      	ldrb	r1, [r0, r1]
   1d8b2:	2939      	cmp	r1, #57	; 0x39
   1d8b4:	d82f      	bhi.n	1d916 <parse_value+0x126>
   1d8b6:	2930      	cmp	r1, #48	; 0x30
   1d8b8:	d205      	bcs.n	1d8c6 <parse_value+0xd6>
   1d8ba:	292d      	cmp	r1, #45	; 0x2d
   1d8bc:	d003      	beq.n	1d8c6 <parse_value+0xd6>
   1d8be:	292e      	cmp	r1, #46	; 0x2e
   1d8c0:	d001      	beq.n	1d8c6 <parse_value+0xd6>
   1d8c2:	292b      	cmp	r1, #43	; 0x2b
   1d8c4:	d103      	bne.n	1d8ce <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1d8c6:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d8c8:	3301      	adds	r3, #1
   1d8ca:	2b3f      	cmp	r3, #63	; 0x3f
   1d8cc:	d1ec      	bne.n	1d8a8 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1d8ce:	aa12      	add	r2, sp, #72	; 0x48
   1d8d0:	4413      	add	r3, r2
   1d8d2:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8d4:	a901      	add	r1, sp, #4
   1d8d6:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1d8d8:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8dc:	f022 fd0c 	bl	402f8 <strtod>
    if (number_c_string == after_end)
   1d8e0:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8e2:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1d8e6:	42b7      	cmp	r7, r6
   1d8e8:	d088      	beq.n	1d7fc <parse_value+0xc>
    if (number >= INT_MAX)
   1d8ea:	a379      	add	r3, pc, #484	; (adr r3, 1dad0 <parse_value+0x2e0>)
   1d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d8f0:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d8f4:	ee10 0a10 	vmov	r0, s0
   1d8f8:	4649      	mov	r1, r9
   1d8fa:	f7ff f9e3 	bl	1ccc4 <__aeabi_dcmpge>
   1d8fe:	b170      	cbz	r0, 1d91e <parse_value+0x12e>
        item->valueint = INT_MAX;
   1d900:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d904:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d906:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d908:	1bbe      	subs	r6, r7, r6
   1d90a:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1d90c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d90e:	443e      	add	r6, r7
   1d910:	60a6      	str	r6, [r4, #8]
    return true;
   1d912:	2001      	movs	r0, #1
   1d914:	e799      	b.n	1d84a <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1d916:	2945      	cmp	r1, #69	; 0x45
   1d918:	d0d5      	beq.n	1d8c6 <parse_value+0xd6>
   1d91a:	2965      	cmp	r1, #101	; 0x65
   1d91c:	e7d2      	b.n	1d8c4 <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1d91e:	2200      	movs	r2, #0
   1d920:	4b70      	ldr	r3, [pc, #448]	; (1dae4 <parse_value+0x2f4>)
   1d922:	4640      	mov	r0, r8
   1d924:	4649      	mov	r1, r9
   1d926:	f7ff f9c3 	bl	1ccb0 <__aeabi_dcmple>
   1d92a:	b110      	cbz	r0, 1d932 <parse_value+0x142>
        item->valueint = INT_MIN;
   1d92c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d930:	e7e8      	b.n	1d904 <parse_value+0x114>
        item->valueint = (int)number;
   1d932:	4640      	mov	r0, r8
   1d934:	4649      	mov	r1, r9
   1d936:	f7ff f9d9 	bl	1ccec <__aeabi_d2iz>
   1d93a:	6168      	str	r0, [r5, #20]
   1d93c:	e7e3      	b.n	1d906 <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d93e:	2b5b      	cmp	r3, #91	; 0x5b
   1d940:	d153      	bne.n	1d9ea <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d942:	68e3      	ldr	r3, [r4, #12]
   1d944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d948:	f4bf af58 	bcs.w	1d7fc <parse_value+0xc>
    input_buffer->depth++;
   1d94c:	3301      	adds	r3, #1
   1d94e:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d950:	5c83      	ldrb	r3, [r0, r2]
   1d952:	2b5b      	cmp	r3, #91	; 0x5b
   1d954:	f47f af52 	bne.w	1d7fc <parse_value+0xc>
    input_buffer->offset++;
   1d958:	3201      	adds	r2, #1
   1d95a:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d95c:	4620      	mov	r0, r4
   1d95e:	f026 faae 	bl	43ebe <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d962:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d966:	4293      	cmp	r3, r2
   1d968:	d262      	bcs.n	1da30 <parse_value+0x240>
   1d96a:	6822      	ldr	r2, [r4, #0]
   1d96c:	5cd2      	ldrb	r2, [r2, r3]
   1d96e:	2a5d      	cmp	r2, #93	; 0x5d
   1d970:	d109      	bne.n	1d986 <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1d972:	2600      	movs	r6, #0
    input_buffer->depth--;
   1d974:	68e3      	ldr	r3, [r4, #12]
   1d976:	3b01      	subs	r3, #1
   1d978:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d97a:	2320      	movs	r3, #32
    item->child = head;
   1d97c:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1d980:	68a3      	ldr	r3, [r4, #8]
   1d982:	3301      	adds	r3, #1
   1d984:	e74e      	b.n	1d824 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d986:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1d98a:	4646      	mov	r6, r8
    input_buffer->offset--;
   1d98c:	3b01      	subs	r3, #1
   1d98e:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d990:	6920      	ldr	r0, [r4, #16]
   1d992:	f026 fac6 	bl	43f22 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d996:	4607      	mov	r7, r0
   1d998:	b300      	cbz	r0, 1d9dc <parse_value+0x1ec>
        if (head == NULL)
   1d99a:	b1ee      	cbz	r6, 1d9d8 <parse_value+0x1e8>
            current_item->next = new_item;
   1d99c:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d9a0:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d9a4:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9a6:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d9a8:	3301      	adds	r3, #1
   1d9aa:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9ac:	f026 fa87 	bl	43ebe <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d9b0:	4621      	mov	r1, r4
   1d9b2:	4638      	mov	r0, r7
   1d9b4:	f7ff ff1c 	bl	1d7f0 <parse_value>
   1d9b8:	b198      	cbz	r0, 1d9e2 <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1d9ba:	4620      	mov	r0, r4
   1d9bc:	f026 fa7f 	bl	43ebe <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d9c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9c4:	4293      	cmp	r3, r2
   1d9c6:	d20c      	bcs.n	1d9e2 <parse_value+0x1f2>
   1d9c8:	6822      	ldr	r2, [r4, #0]
   1d9ca:	46b8      	mov	r8, r7
   1d9cc:	5cd3      	ldrb	r3, [r2, r3]
   1d9ce:	2b2c      	cmp	r3, #44	; 0x2c
   1d9d0:	d0de      	beq.n	1d990 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d9d2:	2b5d      	cmp	r3, #93	; 0x5d
   1d9d4:	d105      	bne.n	1d9e2 <parse_value+0x1f2>
   1d9d6:	e7cd      	b.n	1d974 <parse_value+0x184>
        if (head == NULL)
   1d9d8:	4606      	mov	r6, r0
   1d9da:	e7e3      	b.n	1d9a4 <parse_value+0x1b4>
    if (head != NULL)
   1d9dc:	2e00      	cmp	r6, #0
   1d9de:	f43f af0d 	beq.w	1d7fc <parse_value+0xc>
        cJSON_Delete(head);
   1d9e2:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1d9e4:	f00b fc16 	bl	29214 <cJSON_Delete>
   1d9e8:	e708      	b.n	1d7fc <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d9ea:	2b7b      	cmp	r3, #123	; 0x7b
   1d9ec:	f47f af06 	bne.w	1d7fc <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d9f0:	68e3      	ldr	r3, [r4, #12]
   1d9f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d9f6:	f4bf af01 	bcs.w	1d7fc <parse_value+0xc>
    input_buffer->depth++;
   1d9fa:	3301      	adds	r3, #1
   1d9fc:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d9fe:	5c83      	ldrb	r3, [r0, r2]
   1da00:	2b7b      	cmp	r3, #123	; 0x7b
   1da02:	f47f aefb 	bne.w	1d7fc <parse_value+0xc>
    input_buffer->offset++;
   1da06:	3201      	adds	r2, #1
   1da08:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1da0a:	4620      	mov	r0, r4
   1da0c:	f026 fa57 	bl	43ebe <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1da10:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1da14:	4293      	cmp	r3, r2
   1da16:	d20b      	bcs.n	1da30 <parse_value+0x240>
   1da18:	6822      	ldr	r2, [r4, #0]
   1da1a:	5cd2      	ldrb	r2, [r2, r3]
   1da1c:	2a7d      	cmp	r2, #125	; 0x7d
   1da1e:	d10a      	bne.n	1da36 <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1da20:	2700      	movs	r7, #0
    input_buffer->depth--;
   1da22:	68e3      	ldr	r3, [r4, #12]
   1da24:	3b01      	subs	r3, #1
   1da26:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1da28:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1da2a:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1da2e:	e7a7      	b.n	1d980 <parse_value+0x190>
        input_buffer->offset--;
   1da30:	3b01      	subs	r3, #1
   1da32:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1da34:	e6e2      	b.n	1d7fc <parse_value+0xc>
    cJSON *current_item = NULL;
   1da36:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1da3a:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1da3c:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1da3e:	3b01      	subs	r3, #1
   1da40:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1da42:	6920      	ldr	r0, [r4, #16]
   1da44:	f026 fa6d 	bl	43f22 <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1da48:	4606      	mov	r6, r0
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d039      	beq.n	1dac2 <parse_value+0x2d2>
        if (head == NULL)
   1da4e:	b3b7      	cbz	r7, 1dabe <parse_value+0x2ce>
            current_item->next = new_item;
   1da50:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1da54:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1da58:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da5a:	4620      	mov	r0, r4
        input_buffer->offset++;
   1da5c:	3301      	adds	r3, #1
   1da5e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da60:	f026 fa2d 	bl	43ebe <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1da64:	4621      	mov	r1, r4
   1da66:	4630      	mov	r0, r6
   1da68:	f00a ffca 	bl	28a00 <parse_string>
   1da6c:	b360      	cbz	r0, 1dac8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1da6e:	4620      	mov	r0, r4
   1da70:	f026 fa25 	bl	43ebe <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1da74:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1da76:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1da7a:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1da7c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1da80:	4293      	cmp	r3, r2
   1da82:	d221      	bcs.n	1dac8 <parse_value+0x2d8>
   1da84:	6822      	ldr	r2, [r4, #0]
   1da86:	5cd2      	ldrb	r2, [r2, r3]
   1da88:	2a3a      	cmp	r2, #58	; 0x3a
   1da8a:	d11d      	bne.n	1dac8 <parse_value+0x2d8>
        input_buffer->offset++;
   1da8c:	3301      	adds	r3, #1
   1da8e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da90:	4620      	mov	r0, r4
   1da92:	f026 fa14 	bl	43ebe <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1da96:	4621      	mov	r1, r4
   1da98:	4630      	mov	r0, r6
   1da9a:	f7ff fea9 	bl	1d7f0 <parse_value>
   1da9e:	b198      	cbz	r0, 1dac8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1daa0:	4620      	mov	r0, r4
   1daa2:	f026 fa0c 	bl	43ebe <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1daa6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1daaa:	4293      	cmp	r3, r2
   1daac:	d20c      	bcs.n	1dac8 <parse_value+0x2d8>
   1daae:	6822      	ldr	r2, [r4, #0]
   1dab0:	46b0      	mov	r8, r6
   1dab2:	5cd3      	ldrb	r3, [r2, r3]
   1dab4:	2b2c      	cmp	r3, #44	; 0x2c
   1dab6:	d0c4      	beq.n	1da42 <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1dab8:	2b7d      	cmp	r3, #125	; 0x7d
   1daba:	d105      	bne.n	1dac8 <parse_value+0x2d8>
   1dabc:	e7b1      	b.n	1da22 <parse_value+0x232>
        if (head == NULL)
   1dabe:	4607      	mov	r7, r0
   1dac0:	e7ca      	b.n	1da58 <parse_value+0x268>
    if (head != NULL)
   1dac2:	2f00      	cmp	r7, #0
   1dac4:	f43f ae9a 	beq.w	1d7fc <parse_value+0xc>
        cJSON_Delete(head);
   1dac8:	4638      	mov	r0, r7
   1daca:	e78b      	b.n	1d9e4 <parse_value+0x1f4>
   1dacc:	f3af 8000 	nop.w
   1dad0:	ffc00000 	.word	0xffc00000
   1dad4:	41dfffff 	.word	0x41dfffff
   1dad8:	0004a257 	.word	0x0004a257
   1dadc:	0004a26e 	.word	0x0004a26e
   1dae0:	0004a274 	.word	0x0004a274
   1dae4:	c1e00000 	.word	0xc1e00000

0001dae8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1dae8:	4b17      	ldr	r3, [pc, #92]	; (1db48 <cJSON_CreateNumber+0x60>)
{
   1daea:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1daec:	6818      	ldr	r0, [r3, #0]
{
   1daee:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1daf2:	f026 fa16 	bl	43f22 <cJSON_New_Item.isra.1>
    if(item)
   1daf6:	4604      	mov	r4, r0
   1daf8:	b170      	cbz	r0, 1db18 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1dafa:	2308      	movs	r3, #8
        item->valuedouble = num;
   1dafc:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1db00:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1db02:	4639      	mov	r1, r7
   1db04:	a30e      	add	r3, pc, #56	; (adr r3, 1db40 <cJSON_CreateNumber+0x58>)
   1db06:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db0a:	4630      	mov	r0, r6
   1db0c:	f7ff f8da 	bl	1ccc4 <__aeabi_dcmpge>
   1db10:	b120      	cbz	r0, 1db1c <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1db12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1db16:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1db18:	4620      	mov	r0, r4
   1db1a:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1db1c:	2200      	movs	r2, #0
   1db1e:	4b0b      	ldr	r3, [pc, #44]	; (1db4c <cJSON_CreateNumber+0x64>)
   1db20:	4630      	mov	r0, r6
   1db22:	4639      	mov	r1, r7
   1db24:	f7ff f8c4 	bl	1ccb0 <__aeabi_dcmple>
   1db28:	b110      	cbz	r0, 1db30 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1db2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1db2e:	e7f2      	b.n	1db16 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1db30:	4630      	mov	r0, r6
   1db32:	4639      	mov	r1, r7
   1db34:	f7ff f8da 	bl	1ccec <__aeabi_d2iz>
   1db38:	6160      	str	r0, [r4, #20]
    return item;
   1db3a:	e7ed      	b.n	1db18 <cJSON_CreateNumber+0x30>
   1db3c:	f3af 8000 	nop.w
   1db40:	ffc00000 	.word	0xffc00000
   1db44:	41dfffff 	.word	0x41dfffff
   1db48:	200206f0 	.word	0x200206f0
   1db4c:	c1e00000 	.word	0xc1e00000

0001db50 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   1db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db54:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   1db58:	460e      	mov	r6, r1
{
   1db5a:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
   1db5c:	b991      	cbnz	r1, 1db84 <at_handler+0x34>
		LOG_ERR("Response buffer is NULL-pointer");
   1db5e:	2301      	movs	r3, #1
   1db60:	f04f 0000 	mov.w	r0, #0
   1db64:	4ab6      	ldr	r2, [pc, #728]	; (1de40 <at_handler+0x2f0>)
   1db66:	f363 0007 	bfi	r0, r3, #0, #8
   1db6a:	4bb6      	ldr	r3, [pc, #728]	; (1de44 <at_handler+0x2f4>)
   1db6c:	49b6      	ldr	r1, [pc, #728]	; (1de48 <at_handler+0x2f8>)
   1db6e:	1a9b      	subs	r3, r3, r2
   1db70:	08db      	lsrs	r3, r3, #3
   1db72:	f363 108f 	bfi	r0, r3, #6, #10
   1db76:	f024 fa62 	bl	4203e <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
   1db7a:	b00c      	add	sp, #48	; 0x30
   1db7c:	ecbd 8b02 	vpop	{d8}
   1db80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1db84:	2400      	movs	r4, #0
   1db86:	4fb1      	ldr	r7, [pc, #708]	; (1de4c <at_handler+0x2fc>)
		if (strncmp(at_notifs[i], notif,
   1db88:	f857 5b04 	ldr.w	r5, [r7], #4
   1db8c:	4628      	mov	r0, r5
   1db8e:	f7ff fb69 	bl	1d264 <strlen>
   1db92:	4631      	mov	r1, r6
   1db94:	4602      	mov	r2, r0
   1db96:	4628      	mov	r0, r5
   1db98:	f027 fd3f 	bl	4561a <strncmp>
   1db9c:	4605      	mov	r5, r0
   1db9e:	bba0      	cbnz	r0, 1dc0a <at_handler+0xba>
			*type = i;
   1dba0:	b2e4      	uxtb	r4, r4
	switch (notif_type) {
   1dba2:	2c01      	cmp	r4, #1
   1dba4:	f000 8123 	beq.w	1ddee <at_handler+0x29e>
   1dba8:	2c02      	cmp	r4, #2
   1dbaa:	f000 81bb 	beq.w	1df24 <at_handler+0x3d4>
	size_t len = sizeof(str_buf) - 1;
   1dbae:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dbb2:	210a      	movs	r1, #10
   1dbb4:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   1dbb6:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dbba:	f026 fe11 	bl	447e0 <at_params_list_init>
	if (err) {
   1dbbe:	4604      	mov	r4, r0
   1dbc0:	b338      	cbz	r0, 1dc12 <at_handler+0xc2>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dbc2:	2301      	movs	r3, #1
   1dbc4:	f04f 0000 	mov.w	r0, #0
   1dbc8:	4a9d      	ldr	r2, [pc, #628]	; (1de40 <at_handler+0x2f0>)
   1dbca:	f363 0007 	bfi	r0, r3, #0, #8
   1dbce:	4b9d      	ldr	r3, [pc, #628]	; (1de44 <at_handler+0x2f4>)
   1dbd0:	499f      	ldr	r1, [pc, #636]	; (1de50 <at_handler+0x300>)
   1dbd2:	1a9b      	subs	r3, r3, r2
   1dbd4:	08db      	lsrs	r3, r3, #3
   1dbd6:	f363 108f 	bfi	r0, r3, #6, #10
   1dbda:	4622      	mov	r2, r4
   1dbdc:	f024 fa2f 	bl	4203e <log_string_sync>
			LOG_ERR("Failed to parse notification (error %d): %s",
   1dbe0:	2301      	movs	r3, #1
   1dbe2:	f04f 0500 	mov.w	r5, #0
   1dbe6:	4a96      	ldr	r2, [pc, #600]	; (1de40 <at_handler+0x2f0>)
   1dbe8:	f363 0507 	bfi	r5, r3, #0, #8
   1dbec:	4b95      	ldr	r3, [pc, #596]	; (1de44 <at_handler+0x2f4>)
   1dbee:	4630      	mov	r0, r6
   1dbf0:	1a9b      	subs	r3, r3, r2
   1dbf2:	08db      	lsrs	r3, r3, #3
   1dbf4:	f363 158f 	bfi	r5, r3, #6, #10
   1dbf8:	f024 fa34 	bl	42064 <log_strdup>
   1dbfc:	4622      	mov	r2, r4
   1dbfe:	4603      	mov	r3, r0
   1dc00:	4994      	ldr	r1, [pc, #592]	; (1de54 <at_handler+0x304>)
   1dc02:	4628      	mov	r0, r5
   1dc04:	f024 fa1b 	bl	4203e <log_string_sync>
			return;
   1dc08:	e7b7      	b.n	1db7a <at_handler+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1dc0a:	3401      	adds	r4, #1
   1dc0c:	2c03      	cmp	r4, #3
   1dc0e:	d1bb      	bne.n	1db88 <at_handler+0x38>
   1dc10:	e7b3      	b.n	1db7a <at_handler+0x2a>
	err = at_parser_params_from_str(notification,
   1dc12:	4601      	mov	r1, r0
   1dc14:	aa07      	add	r2, sp, #28
   1dc16:	4630      	mov	r0, r6
   1dc18:	f026 fddf 	bl	447da <at_parser_params_from_str>
	if (err) {
   1dc1c:	4604      	mov	r4, r0
   1dc1e:	2800      	cmp	r0, #0
   1dc20:	d060      	beq.n	1dce4 <at_handler+0x194>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1dc22:	2301      	movs	r3, #1
   1dc24:	f04f 0000 	mov.w	r0, #0
   1dc28:	4a85      	ldr	r2, [pc, #532]	; (1de40 <at_handler+0x2f0>)
   1dc2a:	f363 0007 	bfi	r0, r3, #0, #8
   1dc2e:	4b85      	ldr	r3, [pc, #532]	; (1de44 <at_handler+0x2f4>)
   1dc30:	4989      	ldr	r1, [pc, #548]	; (1de58 <at_handler+0x308>)
   1dc32:	1a9b      	subs	r3, r3, r2
   1dc34:	4622      	mov	r2, r4
   1dc36:	08db      	lsrs	r3, r3, #3
   1dc38:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get registration status, error: %d", err);
   1dc3c:	f024 f9ff 	bl	4203e <log_string_sync>
	at_params_list_free(&resp_list);
   1dc40:	a807      	add	r0, sp, #28
   1dc42:	f026 fde0 	bl	44806 <at_params_list_free>
		if (err) {
   1dc46:	2c00      	cmp	r4, #0
   1dc48:	d1ca      	bne.n	1dbe0 <at_handler+0x90>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc4a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1dc4e:	2b01      	cmp	r3, #1
   1dc50:	d102      	bne.n	1dc58 <at_handler+0x108>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1dc52:	4882      	ldr	r0, [pc, #520]	; (1de5c <at_handler+0x30c>)
   1dc54:	f020 fad6 	bl	3e204 <z_impl_k_sem_give>
		if (!evt_handler) {
   1dc58:	4c81      	ldr	r4, [pc, #516]	; (1de60 <at_handler+0x310>)
   1dc5a:	6823      	ldr	r3, [r4, #0]
   1dc5c:	2b00      	cmp	r3, #0
   1dc5e:	d08c      	beq.n	1db7a <at_handler+0x2a>
		if (reg_status != prev_reg_status) {
   1dc60:	4a80      	ldr	r2, [pc, #512]	; (1de64 <at_handler+0x314>)
   1dc62:	7811      	ldrb	r1, [r2, #0]
   1dc64:	42a9      	cmp	r1, r5
   1dc66:	d007      	beq.n	1dc78 <at_handler+0x128>
			prev_reg_status = reg_status;
   1dc68:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1dc6a:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   1dc6c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1dc70:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
   1dc74:	a809      	add	r0, sp, #36	; 0x24
   1dc76:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1dc78:	4e7b      	ldr	r6, [pc, #492]	; (1de68 <at_handler+0x318>)
   1dc7a:	ad03      	add	r5, sp, #12
   1dc7c:	2208      	movs	r2, #8
   1dc7e:	4631      	mov	r1, r6
   1dc80:	4628      	mov	r0, r5
   1dc82:	f027 fac3 	bl	4520c <memcmp>
   1dc86:	b160      	cbz	r0, 1dca2 <at_handler+0x152>
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1dc88:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   1dc8c:	2304      	movs	r3, #4
   1dc8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1dc92:	ab0c      	add	r3, sp, #48	; 0x30
   1dc94:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1dc98:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1dc9c:	6823      	ldr	r3, [r4, #0]
   1dc9e:	a809      	add	r0, sp, #36	; 0x24
   1dca0:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   1dca2:	4e72      	ldr	r6, [pc, #456]	; (1de6c <at_handler+0x31c>)
   1dca4:	ad05      	add	r5, sp, #20
   1dca6:	2208      	movs	r2, #8
   1dca8:	4631      	mov	r1, r6
   1dcaa:	4628      	mov	r0, r5
   1dcac:	f027 faae 	bl	4520c <memcmp>
   1dcb0:	b160      	cbz	r0, 1dccc <at_handler+0x17c>
			memcpy(&prev_psm_cfg, &psm_cfg,
   1dcb2:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   1dcb6:	2301      	movs	r3, #1
   1dcb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.psm_cfg, &psm_cfg,
   1dcbc:	ab0c      	add	r3, sp, #48	; 0x30
   1dcbe:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_psm_cfg, &psm_cfg,
   1dcc2:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1dcc6:	6823      	ldr	r3, [r4, #0]
   1dcc8:	a809      	add	r0, sp, #36	; 0x24
   1dcca:	4798      	blx	r3
	bool notify = false;
   1dccc:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   1dcce:	4a64      	ldr	r2, [pc, #400]	; (1de60 <at_handler+0x310>)
   1dcd0:	6812      	ldr	r2, [r2, #0]
   1dcd2:	2a00      	cmp	r2, #0
   1dcd4:	f43f af51 	beq.w	1db7a <at_handler+0x2a>
   1dcd8:	2b00      	cmp	r3, #0
   1dcda:	f43f af4e 	beq.w	1db7a <at_handler+0x2a>
		evt_handler(&evt);
   1dcde:	a809      	add	r0, sp, #36	; 0x24
   1dce0:	4790      	blx	r2
   1dce2:	e74a      	b.n	1db7a <at_handler+0x2a>
	err = at_params_int_get(&resp_list,
   1dce4:	aa01      	add	r2, sp, #4
   1dce6:	2101      	movs	r1, #1
   1dce8:	a807      	add	r0, sp, #28
   1dcea:	f026 fe3a 	bl	44962 <at_params_int_get>
	if (err) {
   1dcee:	4604      	mov	r4, r0
   1dcf0:	b168      	cbz	r0, 1dd0e <at_handler+0x1be>
		LOG_ERR("Could not get registration status, error: %d", err);
   1dcf2:	2301      	movs	r3, #1
   1dcf4:	f04f 0000 	mov.w	r0, #0
   1dcf8:	4a51      	ldr	r2, [pc, #324]	; (1de40 <at_handler+0x2f0>)
   1dcfa:	f363 0007 	bfi	r0, r3, #0, #8
   1dcfe:	4b51      	ldr	r3, [pc, #324]	; (1de44 <at_handler+0x2f4>)
   1dd00:	495b      	ldr	r1, [pc, #364]	; (1de70 <at_handler+0x320>)
   1dd02:	1a9b      	subs	r3, r3, r2
   1dd04:	08db      	lsrs	r3, r3, #3
   1dd06:	f363 108f 	bfi	r0, r3, #6, #10
   1dd0a:	4622      	mov	r2, r4
   1dd0c:	e796      	b.n	1dc3c <at_handler+0xec>
	*reg_status = status;
   1dd0e:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
   1dd12:	2d5a      	cmp	r5, #90	; 0x5a
   1dd14:	d04f      	beq.n	1ddb6 <at_handler+0x266>
		err = at_params_string_get(&resp_list,
   1dd16:	ab02      	add	r3, sp, #8
   1dd18:	aa09      	add	r2, sp, #36	; 0x24
   1dd1a:	2102      	movs	r1, #2
   1dd1c:	a807      	add	r0, sp, #28
   1dd1e:	f026 fe37 	bl	44990 <at_params_string_get>
		if (err) {
   1dd22:	4607      	mov	r7, r0
   1dd24:	b180      	cbz	r0, 1dd48 <at_handler+0x1f8>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1dd26:	2301      	movs	r3, #1
   1dd28:	f04f 0000 	mov.w	r0, #0
   1dd2c:	4a44      	ldr	r2, [pc, #272]	; (1de40 <at_handler+0x2f0>)
   1dd2e:	f363 0007 	bfi	r0, r3, #0, #8
   1dd32:	4b44      	ldr	r3, [pc, #272]	; (1de44 <at_handler+0x2f4>)
   1dd34:	494f      	ldr	r1, [pc, #316]	; (1de74 <at_handler+0x324>)
   1dd36:	1a9b      	subs	r3, r3, r2
   1dd38:	463a      	mov	r2, r7
   1dd3a:	08db      	lsrs	r3, r3, #3
   1dd3c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dd40:	f024 f97d 	bl	4203e <log_string_sync>
			goto clean_exit;
   1dd44:	463c      	mov	r4, r7
   1dd46:	e77b      	b.n	1dc40 <at_handler+0xf0>
		str_buf[len] = '\0';
   1dd48:	9b02      	ldr	r3, [sp, #8]
   1dd4a:	aa0c      	add	r2, sp, #48	; 0x30
   1dd4c:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd4e:	4621      	mov	r1, r4
   1dd50:	2210      	movs	r2, #16
   1dd52:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dd54:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd58:	f022 fbd0 	bl	404fc <strtoul>
		err = at_params_string_get(&resp_list,
   1dd5c:	ab02      	add	r3, sp, #8
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd5e:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
   1dd60:	aa09      	add	r2, sp, #36	; 0x24
   1dd62:	2103      	movs	r1, #3
   1dd64:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
   1dd66:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
   1dd6a:	f026 fe11 	bl	44990 <at_params_string_get>
		if (err) {
   1dd6e:	4607      	mov	r7, r0
   1dd70:	b168      	cbz	r0, 1dd8e <at_handler+0x23e>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dd72:	2301      	movs	r3, #1
   1dd74:	f04f 0000 	mov.w	r0, #0
   1dd78:	4a31      	ldr	r2, [pc, #196]	; (1de40 <at_handler+0x2f0>)
   1dd7a:	f363 0007 	bfi	r0, r3, #0, #8
   1dd7e:	4b31      	ldr	r3, [pc, #196]	; (1de44 <at_handler+0x2f4>)
   1dd80:	493d      	ldr	r1, [pc, #244]	; (1de78 <at_handler+0x328>)
   1dd82:	1a9b      	subs	r3, r3, r2
   1dd84:	08db      	lsrs	r3, r3, #3
   1dd86:	f363 108f 	bfi	r0, r3, #6, #10
   1dd8a:	463a      	mov	r2, r7
   1dd8c:	e7d8      	b.n	1dd40 <at_handler+0x1f0>
		str_buf[len] = '\0';
   1dd8e:	9b02      	ldr	r3, [sp, #8]
   1dd90:	aa0c      	add	r2, sp, #48	; 0x30
   1dd92:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   1dd94:	4621      	mov	r1, r4
   1dd96:	2210      	movs	r2, #16
   1dd98:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dd9a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1dd9e:	f022 fbad 	bl	404fc <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dda2:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1dda6:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
   1dda8:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1ddaa:	d009      	beq.n	1ddc0 <at_handler+0x270>
		psm_cfg->tau = -1;
   1ddac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		psm_cfg->active_time = -1;
   1ddb0:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1ddb4:	e744      	b.n	1dc40 <at_handler+0xf0>
		cell->tac = UINT32_MAX;
   1ddb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = UINT32_MAX;
   1ddba:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1ddbe:	e7f5      	b.n	1ddac <at_handler+0x25c>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1ddc0:	aa05      	add	r2, sp, #20
   1ddc2:	2101      	movs	r1, #1
   1ddc4:	a807      	add	r0, sp, #28
   1ddc6:	f00d fcf1 	bl	2b7ac <parse_psm_cfg>
		if (err) {
   1ddca:	4604      	mov	r4, r0
   1ddcc:	2800      	cmp	r0, #0
   1ddce:	f43f af37 	beq.w	1dc40 <at_handler+0xf0>
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   1ddd2:	2301      	movs	r3, #1
   1ddd4:	f04f 0000 	mov.w	r0, #0
   1ddd8:	4a19      	ldr	r2, [pc, #100]	; (1de40 <at_handler+0x2f0>)
   1ddda:	f363 0007 	bfi	r0, r3, #0, #8
   1ddde:	4b19      	ldr	r3, [pc, #100]	; (1de44 <at_handler+0x2f4>)
   1dde0:	4926      	ldr	r1, [pc, #152]	; (1de7c <at_handler+0x32c>)
   1dde2:	1a9b      	subs	r3, r3, r2
   1dde4:	08db      	lsrs	r3, r3, #3
   1dde6:	f363 108f 	bfi	r0, r3, #6, #10
   1ddea:	4622      	mov	r2, r4
   1ddec:	e726      	b.n	1dc3c <at_handler+0xec>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1ddee:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1ddf2:	2104      	movs	r1, #4
   1ddf4:	a807      	add	r0, sp, #28
   1ddf6:	f026 fcf3 	bl	447e0 <at_params_list_init>
	if (err) {
   1ddfa:	4605      	mov	r5, r0
   1ddfc:	2800      	cmp	r0, #0
   1ddfe:	d041      	beq.n	1de84 <at_handler+0x334>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1de00:	2301      	movs	r3, #1
   1de02:	f04f 0000 	mov.w	r0, #0
   1de06:	4a0e      	ldr	r2, [pc, #56]	; (1de40 <at_handler+0x2f0>)
   1de08:	f363 0007 	bfi	r0, r3, #0, #8
   1de0c:	4b0d      	ldr	r3, [pc, #52]	; (1de44 <at_handler+0x2f4>)
   1de0e:	4910      	ldr	r1, [pc, #64]	; (1de50 <at_handler+0x300>)
   1de10:	1a9b      	subs	r3, r3, r2
   1de12:	08db      	lsrs	r3, r3, #3
   1de14:	f363 108f 	bfi	r0, r3, #6, #10
   1de18:	462a      	mov	r2, r5
   1de1a:	f024 f910 	bl	4203e <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   1de1e:	2301      	movs	r3, #1
   1de20:	f04f 0000 	mov.w	r0, #0
   1de24:	4a06      	ldr	r2, [pc, #24]	; (1de40 <at_handler+0x2f0>)
   1de26:	f363 0007 	bfi	r0, r3, #0, #8
   1de2a:	4b06      	ldr	r3, [pc, #24]	; (1de44 <at_handler+0x2f4>)
   1de2c:	4914      	ldr	r1, [pc, #80]	; (1de80 <at_handler+0x330>)
   1de2e:	1a9b      	subs	r3, r3, r2
   1de30:	462a      	mov	r2, r5
   1de32:	08db      	lsrs	r3, r3, #3
   1de34:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1de38:	f024 f901 	bl	4203e <log_string_sync>
			return;
   1de3c:	e69d      	b.n	1db7a <at_handler+0x2a>
   1de3e:	bf00      	nop
   1de40:	00046878 	.word	0x00046878
   1de44:	00046908 	.word	0x00046908
   1de48:	0004abfc 	.word	0x0004abfc
   1de4c:	00046f50 	.word	0x00046f50
   1de50:	0004ac1c 	.word	0x0004ac1c
   1de54:	0004ad19 	.word	0x0004ad19
   1de58:	0004ac45 	.word	0x0004ac45
   1de5c:	20024930 	.word	0x20024930
   1de60:	2002492c 	.word	0x2002492c
   1de64:	2002c9db 	.word	0x2002c9db
   1de68:	20024948 	.word	0x20024948
   1de6c:	20024950 	.word	0x20024950
   1de70:	0004ac72 	.word	0x0004ac72
   1de74:	0004ac9f 	.word	0x0004ac9f
   1de78:	0004accb 	.word	0x0004accb
   1de7c:	0004acec 	.word	0x0004acec
   1de80:	0004adb5 	.word	0x0004adb5
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1de84:	4601      	mov	r1, r0
   1de86:	aa07      	add	r2, sp, #28
   1de88:	4630      	mov	r0, r6
   1de8a:	f026 fca6 	bl	447da <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1de8e:	4605      	mov	r5, r0
   1de90:	b1c0      	cbz	r0, 1dec4 <at_handler+0x374>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1de92:	2301      	movs	r3, #1
   1de94:	f04f 0000 	mov.w	r0, #0
   1de98:	4aa7      	ldr	r2, [pc, #668]	; (1e138 <at_handler+0x5e8>)
   1de9a:	f363 0007 	bfi	r0, r3, #0, #8
   1de9e:	4ba7      	ldr	r3, [pc, #668]	; (1e13c <at_handler+0x5ec>)
   1dea0:	49a7      	ldr	r1, [pc, #668]	; (1e140 <at_handler+0x5f0>)
   1dea2:	1a9b      	subs	r3, r3, r2
   1dea4:	462a      	mov	r2, r5
   1dea6:	08db      	lsrs	r3, r3, #3
   1dea8:	f363 108f 	bfi	r0, r3, #6, #10
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1deac:	f024 f8c7 	bl	4203e <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1deb0:	a807      	add	r0, sp, #28
   1deb2:	f026 fca8 	bl	44806 <at_params_list_free>
		if (err) {
   1deb6:	2d00      	cmp	r5, #0
   1deb8:	d1b1      	bne.n	1de1e <at_handler+0x2ce>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   1deba:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1debc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   1dec0:	2301      	movs	r3, #1
		break;
   1dec2:	e704      	b.n	1dcce <at_handler+0x17e>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1dec4:	aa05      	add	r2, sp, #20
   1dec6:	4621      	mov	r1, r4
   1dec8:	a807      	add	r0, sp, #28
   1deca:	f026 fd4a 	bl	44962 <at_params_int_get>
	if (err) {
   1dece:	4605      	mov	r5, r0
   1ded0:	b168      	cbz	r0, 1deee <at_handler+0x39e>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1ded2:	2301      	movs	r3, #1
   1ded4:	f04f 0000 	mov.w	r0, #0
   1ded8:	4a97      	ldr	r2, [pc, #604]	; (1e138 <at_handler+0x5e8>)
   1deda:	f363 0007 	bfi	r0, r3, #0, #8
   1dede:	4b97      	ldr	r3, [pc, #604]	; (1e13c <at_handler+0x5ec>)
   1dee0:	4998      	ldr	r1, [pc, #608]	; (1e144 <at_handler+0x5f4>)
   1dee2:	1a9b      	subs	r3, r3, r2
   1dee4:	08db      	lsrs	r3, r3, #3
   1dee6:	f363 108f 	bfi	r0, r3, #6, #10
   1deea:	462a      	mov	r2, r5
   1deec:	e7de      	b.n	1deac <at_handler+0x35c>
	if (temp_mode == 0) {
   1deee:	9a05      	ldr	r2, [sp, #20]
   1def0:	b912      	cbnz	r2, 1def8 <at_handler+0x3a8>
		*mode = LTE_LC_RRC_MODE_IDLE;
   1def2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
   1def6:	e7db      	b.n	1deb0 <at_handler+0x360>
	} else if (temp_mode == 1) {
   1def8:	2a01      	cmp	r2, #1
   1defa:	d102      	bne.n	1df02 <at_handler+0x3b2>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1defc:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   1df00:	e7d6      	b.n	1deb0 <at_handler+0x360>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1df02:	2301      	movs	r3, #1
   1df04:	f04f 0000 	mov.w	r0, #0
   1df08:	498b      	ldr	r1, [pc, #556]	; (1e138 <at_handler+0x5e8>)
   1df0a:	f363 0007 	bfi	r0, r3, #0, #8
   1df0e:	4b8b      	ldr	r3, [pc, #556]	; (1e13c <at_handler+0x5ec>)
		err = -EINVAL;
   1df10:	f06f 0515 	mvn.w	r5, #21
   1df14:	1a5b      	subs	r3, r3, r1
   1df16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1df18:	f363 108f 	bfi	r0, r3, #6, #10
   1df1c:	498a      	ldr	r1, [pc, #552]	; (1e148 <at_handler+0x5f8>)
   1df1e:	f024 f88e 	bl	4203e <log_string_sync>
		err = -EINVAL;
   1df22:	e7c5      	b.n	1deb0 <at_handler+0x360>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1df24:	2304      	movs	r3, #4
	switch (sys_mode_current) {
   1df26:	4d89      	ldr	r5, [pc, #548]	; (1e14c <at_handler+0x5fc>)
	struct at_param_list resp_list = {0};
   1df28:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
   1df2c:	782a      	ldrb	r2, [r5, #0]
	size_t len = sizeof(tmp_buf) - 1;
   1df2e:	9303      	str	r3, [sp, #12]
	switch (sys_mode_current) {
   1df30:	3a01      	subs	r2, #1
   1df32:	2a04      	cmp	r2, #4
   1df34:	d804      	bhi.n	1df40 <at_handler+0x3f0>
   1df36:	e8df f002 	tbb	[pc, r2]
   1df3a:	3921      	.short	0x3921
   1df3c:	2103      	.short	0x2103
   1df3e:	39          	.byte	0x39
   1df3f:	00          	.byte	0x00
		LOG_ERR("No LTE connection available in this system mode");
   1df40:	2301      	movs	r3, #1
   1df42:	f04f 0000 	mov.w	r0, #0
   1df46:	4a7c      	ldr	r2, [pc, #496]	; (1e138 <at_handler+0x5e8>)
   1df48:	f363 0007 	bfi	r0, r3, #0, #8
   1df4c:	4b7b      	ldr	r3, [pc, #492]	; (1e13c <at_handler+0x5ec>)
   1df4e:	4980      	ldr	r1, [pc, #512]	; (1e150 <at_handler+0x600>)
   1df50:	1a9b      	subs	r3, r3, r2
   1df52:	08db      	lsrs	r3, r3, #3
   1df54:	f363 108f 	bfi	r0, r3, #6, #10
   1df58:	f024 f871 	bl	4203e <log_string_sync>
		return -ENOTCONN;
   1df5c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1df60:	2301      	movs	r3, #1
   1df62:	f04f 0000 	mov.w	r0, #0
   1df66:	4a74      	ldr	r2, [pc, #464]	; (1e138 <at_handler+0x5e8>)
   1df68:	f363 0007 	bfi	r0, r3, #0, #8
   1df6c:	4b73      	ldr	r3, [pc, #460]	; (1e13c <at_handler+0x5ec>)
   1df6e:	4979      	ldr	r1, [pc, #484]	; (1e154 <at_handler+0x604>)
   1df70:	1a9b      	subs	r3, r3, r2
   1df72:	08db      	lsrs	r3, r3, #3
   1df74:	f363 108f 	bfi	r0, r3, #6, #10
   1df78:	4622      	mov	r2, r4
   1df7a:	e75d      	b.n	1de38 <at_handler+0x2e8>
		*ptw_multiplier = 1.28;
   1df7c:	ed9f 8a76 	vldr	s16, [pc, #472]	; 1e158 <at_handler+0x608>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1df80:	2105      	movs	r1, #5
   1df82:	a807      	add	r0, sp, #28
   1df84:	f026 fc2c 	bl	447e0 <at_params_list_init>
	if (err) {
   1df88:	4604      	mov	r4, r0
   1df8a:	b190      	cbz	r0, 1dfb2 <at_handler+0x462>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1df8c:	2301      	movs	r3, #1
   1df8e:	f04f 0000 	mov.w	r0, #0
   1df92:	4a69      	ldr	r2, [pc, #420]	; (1e138 <at_handler+0x5e8>)
   1df94:	f363 0007 	bfi	r0, r3, #0, #8
   1df98:	4b68      	ldr	r3, [pc, #416]	; (1e13c <at_handler+0x5ec>)
   1df9a:	4970      	ldr	r1, [pc, #448]	; (1e15c <at_handler+0x60c>)
   1df9c:	1a9b      	subs	r3, r3, r2
   1df9e:	08db      	lsrs	r3, r3, #3
   1dfa0:	f363 108f 	bfi	r0, r3, #6, #10
   1dfa4:	4622      	mov	r2, r4
   1dfa6:	f024 f84a 	bl	4203e <log_string_sync>
		return err;
   1dfaa:	e7d9      	b.n	1df60 <at_handler+0x410>
		*ptw_multiplier = 2.56;
   1dfac:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 1e160 <at_handler+0x610>
   1dfb0:	e7e6      	b.n	1df80 <at_handler+0x430>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1dfb2:	4601      	mov	r1, r0
   1dfb4:	aa07      	add	r2, sp, #28
   1dfb6:	4630      	mov	r0, r6
   1dfb8:	f026 fc0f 	bl	447da <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1dfbc:	4604      	mov	r4, r0
   1dfbe:	b1a8      	cbz	r0, 1dfec <at_handler+0x49c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1dfc0:	2301      	movs	r3, #1
   1dfc2:	f04f 0000 	mov.w	r0, #0
   1dfc6:	4a5c      	ldr	r2, [pc, #368]	; (1e138 <at_handler+0x5e8>)
   1dfc8:	f363 0007 	bfi	r0, r3, #0, #8
   1dfcc:	4b5b      	ldr	r3, [pc, #364]	; (1e13c <at_handler+0x5ec>)
   1dfce:	4965      	ldr	r1, [pc, #404]	; (1e164 <at_handler+0x614>)
   1dfd0:	1a9b      	subs	r3, r3, r2
   1dfd2:	4622      	mov	r2, r4
   1dfd4:	08db      	lsrs	r3, r3, #3
   1dfd6:	f363 108f 	bfi	r0, r3, #6, #10
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1dfda:	f024 f830 	bl	4203e <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1dfde:	a807      	add	r0, sp, #28
   1dfe0:	f026 fc11 	bl	44806 <at_params_list_free>
		if (err) {
   1dfe4:	2c00      	cmp	r4, #0
   1dfe6:	d1bb      	bne.n	1df60 <at_handler+0x410>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dfe8:	2302      	movs	r3, #2
   1dfea:	e767      	b.n	1debc <at_handler+0x36c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1dfec:	ab03      	add	r3, sp, #12
   1dfee:	aa05      	add	r2, sp, #20
   1dff0:	2103      	movs	r1, #3
   1dff2:	a807      	add	r0, sp, #28
   1dff4:	f026 fccc 	bl	44990 <at_params_string_get>
	if (err) {
   1dff8:	4604      	mov	r4, r0
   1dffa:	b168      	cbz	r0, 1e018 <at_handler+0x4c8>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1dffc:	2301      	movs	r3, #1
   1dffe:	f04f 0000 	mov.w	r0, #0
   1e002:	4a4d      	ldr	r2, [pc, #308]	; (1e138 <at_handler+0x5e8>)
   1e004:	f363 0007 	bfi	r0, r3, #0, #8
   1e008:	4b4c      	ldr	r3, [pc, #304]	; (1e13c <at_handler+0x5ec>)
   1e00a:	4957      	ldr	r1, [pc, #348]	; (1e168 <at_handler+0x618>)
   1e00c:	1a9b      	subs	r3, r3, r2
   1e00e:	08db      	lsrs	r3, r3, #3
   1e010:	f363 108f 	bfi	r0, r3, #6, #10
   1e014:	4622      	mov	r2, r4
   1e016:	e7e0      	b.n	1dfda <at_handler+0x48a>
	tmp_buf[len] = '\0';
   1e018:	9b03      	ldr	r3, [sp, #12]
   1e01a:	aa0c      	add	r2, sp, #48	; 0x30
   1e01c:	4413      	add	r3, r2
   1e01e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1e022:	4601      	mov	r1, r0
   1e024:	2202      	movs	r2, #2
   1e026:	a805      	add	r0, sp, #20
   1e028:	f022 fa68 	bl	404fc <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e02c:	b2c0      	uxtb	r0, r0
   1e02e:	280f      	cmp	r0, #15
   1e030:	d850      	bhi.n	1e0d4 <at_handler+0x584>
	switch (sys_mode_current) {
   1e032:	782b      	ldrb	r3, [r5, #0]
   1e034:	3b01      	subs	r3, #1
   1e036:	2b04      	cmp	r3, #4
   1e038:	d82c      	bhi.n	1e094 <at_handler+0x544>
   1e03a:	e8df f003 	tbb	[pc, r3]
   1e03e:	2903      	.short	0x2903
   1e040:	032b      	.short	0x032b
   1e042:	29          	.byte	0x29
   1e043:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
   1e044:	4b49      	ldr	r3, [pc, #292]	; (1e16c <at_handler+0x61c>)
		multiplier = edrx_lookup_nbiot[idx];
   1e046:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e04a:	2800      	cmp	r0, #0
   1e04c:	d040      	beq.n	1e0d0 <at_handler+0x580>
   1e04e:	f7fe fb49 	bl	1c6e4 <__aeabi_i2d>
   1e052:	a337      	add	r3, pc, #220	; (adr r3, 1e130 <at_handler+0x5e0>)
   1e054:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e058:	f7fe fbae 	bl	1c7b8 <__aeabi_dmul>
   1e05c:	f7fe fe8e 	bl	1cd7c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e060:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e062:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e064:	ab03      	add	r3, sp, #12
   1e066:	aa05      	add	r2, sp, #20
   1e068:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   1e06a:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e06c:	f026 fc90 	bl	44990 <at_params_string_get>
	if (err) {
   1e070:	4604      	mov	r4, r0
   1e072:	b390      	cbz	r0, 1e0da <at_handler+0x58a>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e074:	2301      	movs	r3, #1
   1e076:	f04f 0000 	mov.w	r0, #0
   1e07a:	4a2f      	ldr	r2, [pc, #188]	; (1e138 <at_handler+0x5e8>)
   1e07c:	f363 0007 	bfi	r0, r3, #0, #8
   1e080:	4b2e      	ldr	r3, [pc, #184]	; (1e13c <at_handler+0x5ec>)
   1e082:	493b      	ldr	r1, [pc, #236]	; (1e170 <at_handler+0x620>)
   1e084:	1a9b      	subs	r3, r3, r2
   1e086:	08db      	lsrs	r3, r3, #3
   1e088:	f363 108f 	bfi	r0, r3, #6, #10
   1e08c:	4622      	mov	r2, r4
   1e08e:	e7a4      	b.n	1dfda <at_handler+0x48a>
		multiplier = edrx_lookup_nbiot[idx];
   1e090:	4b38      	ldr	r3, [pc, #224]	; (1e174 <at_handler+0x624>)
   1e092:	e7d8      	b.n	1e046 <at_handler+0x4f6>
		LOG_ERR("No LTE connection available in this system mode");
   1e094:	2301      	movs	r3, #1
   1e096:	f04f 0000 	mov.w	r0, #0
   1e09a:	4a27      	ldr	r2, [pc, #156]	; (1e138 <at_handler+0x5e8>)
   1e09c:	f363 0007 	bfi	r0, r3, #0, #8
   1e0a0:	4b26      	ldr	r3, [pc, #152]	; (1e13c <at_handler+0x5ec>)
   1e0a2:	492b      	ldr	r1, [pc, #172]	; (1e150 <at_handler+0x600>)
   1e0a4:	1a9b      	subs	r3, r3, r2
   1e0a6:	08db      	lsrs	r3, r3, #3
   1e0a8:	f363 108f 	bfi	r0, r3, #6, #10
   1e0ac:	f023 ffc7 	bl	4203e <log_string_sync>
		return -ENOTCONN;
   1e0b0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e0b4:	2301      	movs	r3, #1
   1e0b6:	f04f 0000 	mov.w	r0, #0
   1e0ba:	4a1f      	ldr	r2, [pc, #124]	; (1e138 <at_handler+0x5e8>)
   1e0bc:	f363 0007 	bfi	r0, r3, #0, #8
   1e0c0:	4b1e      	ldr	r3, [pc, #120]	; (1e13c <at_handler+0x5ec>)
   1e0c2:	492d      	ldr	r1, [pc, #180]	; (1e178 <at_handler+0x628>)
   1e0c4:	1a9b      	subs	r3, r3, r2
   1e0c6:	08db      	lsrs	r3, r3, #3
   1e0c8:	f363 108f 	bfi	r0, r3, #6, #10
   1e0cc:	4622      	mov	r2, r4
   1e0ce:	e784      	b.n	1dfda <at_handler+0x48a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e0d0:	482a      	ldr	r0, [pc, #168]	; (1e17c <at_handler+0x62c>)
   1e0d2:	e7c5      	b.n	1e060 <at_handler+0x510>
		return -EINVAL;
   1e0d4:	f06f 0415 	mvn.w	r4, #21
   1e0d8:	e7ec      	b.n	1e0b4 <at_handler+0x564>
	tmp_buf[len] = '\0';
   1e0da:	9b03      	ldr	r3, [sp, #12]
   1e0dc:	aa0c      	add	r2, sp, #48	; 0x30
   1e0de:	4413      	add	r3, r2
   1e0e0:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1e0e4:	2202      	movs	r2, #2
   1e0e6:	4601      	mov	r1, r0
   1e0e8:	a805      	add	r0, sp, #20
   1e0ea:	f022 fa07 	bl	404fc <strtoul>
	if (idx > 15) {
   1e0ee:	b2c2      	uxtb	r2, r0
   1e0f0:	2a0f      	cmp	r2, #15
   1e0f2:	d910      	bls.n	1e116 <at_handler+0x5c6>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e0f4:	2301      	movs	r3, #1
   1e0f6:	f04f 0000 	mov.w	r0, #0
   1e0fa:	490f      	ldr	r1, [pc, #60]	; (1e138 <at_handler+0x5e8>)
   1e0fc:	f363 0007 	bfi	r0, r3, #0, #8
   1e100:	4b0e      	ldr	r3, [pc, #56]	; (1e13c <at_handler+0x5ec>)
		err = -EINVAL;
   1e102:	f06f 0415 	mvn.w	r4, #21
   1e106:	1a5b      	subs	r3, r3, r1
   1e108:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e10a:	f363 108f 	bfi	r0, r3, #6, #10
   1e10e:	491c      	ldr	r1, [pc, #112]	; (1e180 <at_handler+0x630>)
   1e110:	f023 ff95 	bl	4203e <log_string_sync>
		goto clean_exit;
   1e114:	e763      	b.n	1dfde <at_handler+0x48e>
	idx += 1;
   1e116:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   1e118:	b2c0      	uxtb	r0, r0
   1e11a:	ee07 0a90 	vmov	s15, r0
   1e11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e122:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e126:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   1e12a:	e758      	b.n	1dfde <at_handler+0x48e>
   1e12c:	f3af 8000 	nop.w
   1e130:	47ae147b 	.word	0x47ae147b
   1e134:	40247ae1 	.word	0x40247ae1
   1e138:	00046878 	.word	0x00046878
   1e13c:	00046908 	.word	0x00046908
   1e140:	0004ad45 	.word	0x0004ad45
   1e144:	0004ad70 	.word	0x0004ad70
   1e148:	0004ad99 	.word	0x0004ad99
   1e14c:	2002c9dc 	.word	0x2002c9dc
   1e150:	0004addc 	.word	0x0004addc
   1e154:	0004aed0 	.word	0x0004aed0
   1e158:	3fa3d70a 	.word	0x3fa3d70a
   1e15c:	0004ac1c 	.word	0x0004ac1c
   1e160:	4023d70a 	.word	0x4023d70a
   1e164:	0004ae0c 	.word	0x0004ae0c
   1e168:	0004ae38 	.word	0x0004ae38
   1e16c:	00047914 	.word	0x00047914
   1e170:	0004ae88 	.word	0x0004ae88
   1e174:	00047934 	.word	0x00047934
   1e178:	0004ae64 	.word	0x0004ae64
   1e17c:	40a3d70a 	.word	0x40a3d70a
   1e180:	0004aeb3 	.word	0x0004aeb3
   1e184:	00000000 	.word	0x00000000

0001e188 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1e188:	b5d0      	push	{r4, r6, r7, lr}
   1e18a:	4614      	mov	r4, r2
   1e18c:	460f      	mov	r7, r1
   1e18e:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1e190:	f7fe fdac 	bl	1ccec <__aeabi_d2iz>
   1e194:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1e196:	f7fe faa5 	bl	1c6e4 <__aeabi_i2d>
   1e19a:	4602      	mov	r2, r0
   1e19c:	460b      	mov	r3, r1
   1e19e:	4630      	mov	r0, r6
   1e1a0:	4639      	mov	r1, r7
   1e1a2:	f7fe f951 	bl	1c448 <__aeabi_dsub>
   1e1a6:	a304      	add	r3, pc, #16	; (adr r3, 1e1b8 <double_to_sensor_value+0x30>)
   1e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e1ac:	f7fe fb04 	bl	1c7b8 <__aeabi_dmul>
   1e1b0:	f7fe fd9c 	bl	1ccec <__aeabi_d2iz>
   1e1b4:	6060      	str	r0, [r4, #4]
}
   1e1b6:	bdd0      	pop	{r4, r6, r7, pc}
   1e1b8:	00000000 	.word	0x00000000
   1e1bc:	412e8480 	.word	0x412e8480

0001e1c0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1e1c2:	2910      	cmp	r1, #16
   1e1c4:	f200 80a8 	bhi.w	1e318 <sensor_sim_sample_fetch+0x158>
   1e1c8:	e8df f001 	tbb	[pc, r1]
   1e1cc:	40302009 	.word	0x40302009
   1e1d0:	a6a6a6a6 	.word	0xa6a6a6a6
   1e1d4:	a6a6a6a6 	.word	0xa6a6a6a6
   1e1d8:	a6926aa6 	.word	0xa6926aa6
   1e1dc:	7f          	.byte	0x7f
   1e1dd:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1e1de:	4c54      	ldr	r4, [pc, #336]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e1e0:	f014 f8f0 	bl	323c4 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1e1e4:	6820      	ldr	r0, [r4, #0]
   1e1e6:	f7fe fa7d 	bl	1c6e4 <__aeabi_i2d>
   1e1ea:	4b52      	ldr	r3, [pc, #328]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e1ec:	2200      	movs	r2, #0
   1e1ee:	4606      	mov	r6, r0
   1e1f0:	460f      	mov	r7, r1
   1e1f2:	f7fe fae1 	bl	1c7b8 <__aeabi_dmul>
   1e1f6:	4b50      	ldr	r3, [pc, #320]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e1f8:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1e1fc:	4630      	mov	r0, r6
   1e1fe:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e202:	f7fe fd73 	bl	1ccec <__aeabi_d2iz>
   1e206:	6020      	str	r0, [r4, #0]
	return 0;
   1e208:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1e20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1e20c:	4c48      	ldr	r4, [pc, #288]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e20e:	f014 f8d9 	bl	323c4 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1e212:	6820      	ldr	r0, [r4, #0]
   1e214:	f7fe fa66 	bl	1c6e4 <__aeabi_i2d>
   1e218:	4b46      	ldr	r3, [pc, #280]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e21a:	2200      	movs	r2, #0
   1e21c:	4606      	mov	r6, r0
   1e21e:	460f      	mov	r7, r1
   1e220:	f7fe faca 	bl	1c7b8 <__aeabi_dmul>
   1e224:	4b44      	ldr	r3, [pc, #272]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e226:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1e22a:	e7e7      	b.n	1e1fc <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1e22c:	4c40      	ldr	r4, [pc, #256]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e22e:	f014 f8c9 	bl	323c4 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1e232:	6820      	ldr	r0, [r4, #0]
   1e234:	f7fe fa56 	bl	1c6e4 <__aeabi_i2d>
   1e238:	4b3e      	ldr	r3, [pc, #248]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e23a:	2200      	movs	r2, #0
   1e23c:	4606      	mov	r6, r0
   1e23e:	460f      	mov	r7, r1
   1e240:	f7fe faba 	bl	1c7b8 <__aeabi_dmul>
   1e244:	4b3c      	ldr	r3, [pc, #240]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e246:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1e24a:	e7d7      	b.n	1e1fc <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e24c:	f014 f8ba 	bl	323c4 <generate_sine.constprop.2>
   1e250:	4c39      	ldr	r4, [pc, #228]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e252:	e9c4 0100 	strd	r0, r1, [r4]
	return z_impl_k_sleep(timeout);
   1e256:	2100      	movs	r1, #0
   1e258:	2021      	movs	r0, #33	; 0x21
   1e25a:	f01f ff97 	bl	3e18c <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e25e:	f014 f8b1 	bl	323c4 <generate_sine.constprop.2>
   1e262:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1e266:	4d32      	ldr	r5, [pc, #200]	; (1e330 <sensor_sim_sample_fetch+0x170>)
   1e268:	2100      	movs	r1, #0
   1e26a:	2021      	movs	r0, #33	; 0x21
   1e26c:	f01f ff8e 	bl	3e18c <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e270:	f014 f8a8 	bl	323c4 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1e274:	6828      	ldr	r0, [r5, #0]
   1e276:	f7fe fa35 	bl	1c6e4 <__aeabi_i2d>
   1e27a:	2200      	movs	r2, #0
   1e27c:	4b2d      	ldr	r3, [pc, #180]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e27e:	4606      	mov	r6, r0
   1e280:	460f      	mov	r7, r1
   1e282:	f7fe fa99 	bl	1c7b8 <__aeabi_dmul>
   1e286:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1e28a:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1e28e:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1e292:	4630      	mov	r0, r6
   1e294:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e298:	f7fe fd28 	bl	1ccec <__aeabi_d2iz>
   1e29c:	6028      	str	r0, [r5, #0]
	return retval;
   1e29e:	e7b3      	b.n	1e208 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2a0:	f021 ff80 	bl	401a4 <rand>
   1e2a4:	f7fe fa1e 	bl	1c6e4 <__aeabi_i2d>
   1e2a8:	a31d      	add	r3, pc, #116	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2ae:	f7fe fbad 	bl	1ca0c <__aeabi_ddiv>
   1e2b2:	2200      	movs	r2, #0
   1e2b4:	4b21      	ldr	r3, [pc, #132]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e2b6:	f7fe f8c7 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1e2ba:	4b21      	ldr	r3, [pc, #132]	; (1e340 <sensor_sim_sample_fetch+0x180>)
   1e2bc:	2200      	movs	r2, #0
   1e2be:	f7fe f8c5 	bl	1c44c <__adddf3>
   1e2c2:	4b20      	ldr	r3, [pc, #128]	; (1e344 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e2c4:	e9c3 0100 	strd	r0, r1, [r3]
   1e2c8:	e79e      	b.n	1e208 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2ca:	f021 ff6b 	bl	401a4 <rand>
   1e2ce:	f7fe fa09 	bl	1c6e4 <__aeabi_i2d>
   1e2d2:	a313      	add	r3, pc, #76	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2d8:	f7fe fb98 	bl	1ca0c <__aeabi_ddiv>
   1e2dc:	2200      	movs	r2, #0
   1e2de:	4b17      	ldr	r3, [pc, #92]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e2e0:	f7fe f8b2 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1e2e4:	4b18      	ldr	r3, [pc, #96]	; (1e348 <sensor_sim_sample_fetch+0x188>)
   1e2e6:	2200      	movs	r2, #0
   1e2e8:	f7fe f8b0 	bl	1c44c <__adddf3>
   1e2ec:	4b17      	ldr	r3, [pc, #92]	; (1e34c <sensor_sim_sample_fetch+0x18c>)
   1e2ee:	e7e9      	b.n	1e2c4 <sensor_sim_sample_fetch+0x104>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2f0:	f021 ff58 	bl	401a4 <rand>
   1e2f4:	f7fe f9f6 	bl	1c6e4 <__aeabi_i2d>
   1e2f8:	a309      	add	r3, pc, #36	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2fe:	f7fe fb85 	bl	1ca0c <__aeabi_ddiv>
   1e302:	2200      	movs	r2, #0
   1e304:	4b0d      	ldr	r3, [pc, #52]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e306:	f7fe f89f 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e30a:	a307      	add	r3, pc, #28	; (adr r3, 1e328 <sensor_sim_sample_fetch+0x168>)
   1e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e310:	f7fe f89c 	bl	1c44c <__adddf3>
   1e314:	4b0e      	ldr	r3, [pc, #56]	; (1e350 <sensor_sim_sample_fetch+0x190>)
   1e316:	e7d5      	b.n	1e2c4 <sensor_sim_sample_fetch+0x104>
		return -ENOTSUP;
   1e318:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1e31c:	e775      	b.n	1e20a <sensor_sim_sample_fetch+0x4a>
   1e31e:	bf00      	nop
   1e320:	ffc00000 	.word	0xffc00000
   1e324:	41cfffff 	.word	0x41cfffff
   1e328:	cccccccd 	.word	0xcccccccd
   1e32c:	40588ccc 	.word	0x40588ccc
   1e330:	2002076c 	.word	0x2002076c
   1e334:	40340000 	.word	0x40340000
   1e338:	20023640 	.word	0x20023640
   1e33c:	3ff00000 	.word	0x3ff00000
   1e340:	40350000 	.word	0x40350000
   1e344:	20023968 	.word	0x20023968
   1e348:	404a0000 	.word	0x404a0000
   1e34c:	20023658 	.word	0x20023658
   1e350:	20023660 	.word	0x20023660
   1e354:	00000000 	.word	0x00000000

0001e358 <sin>:
   1e358:	ec51 0b10 	vmov	r0, r1, d0
   1e35c:	4a2c      	ldr	r2, [pc, #176]	; (1e410 <sin+0xb8>)
   1e35e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1e362:	4293      	cmp	r3, r2
   1e364:	b500      	push	{lr}
   1e366:	b085      	sub	sp, #20
   1e368:	dd27      	ble.n	1e3ba <sin+0x62>
   1e36a:	4a2a      	ldr	r2, [pc, #168]	; (1e414 <sin+0xbc>)
   1e36c:	4293      	cmp	r3, r2
   1e36e:	dd09      	ble.n	1e384 <sin+0x2c>
   1e370:	ee10 2a10 	vmov	r2, s0
   1e374:	460b      	mov	r3, r1
   1e376:	f7fe f867 	bl	1c448 <__aeabi_dsub>
   1e37a:	ec41 0b10 	vmov	d0, r0, r1
   1e37e:	b005      	add	sp, #20
   1e380:	f85d fb04 	ldr.w	pc, [sp], #4
   1e384:	4668      	mov	r0, sp
   1e386:	f000 f847 	bl	1e418 <__ieee754_rem_pio2>
   1e38a:	f000 0003 	and.w	r0, r0, #3
   1e38e:	2801      	cmp	r0, #1
   1e390:	d01f      	beq.n	1e3d2 <sin+0x7a>
   1e392:	2802      	cmp	r0, #2
   1e394:	d030      	beq.n	1e3f8 <sin+0xa0>
   1e396:	b328      	cbz	r0, 1e3e4 <sin+0x8c>
   1e398:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e39c:	ed9d 0b00 	vldr	d0, [sp]
   1e3a0:	f000 fa56 	bl	1e850 <__kernel_cos>
   1e3a4:	ee10 0a10 	vmov	r0, s0
   1e3a8:	ec53 2b10 	vmov	r2, r3, d0
   1e3ac:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1e3b0:	ec41 0b10 	vmov	d0, r0, r1
   1e3b4:	b005      	add	sp, #20
   1e3b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3ba:	2000      	movs	r0, #0
   1e3bc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1e408 <sin+0xb0>
   1e3c0:	f000 ff9e 	bl	1f300 <__kernel_sin>
   1e3c4:	ec51 0b10 	vmov	r0, r1, d0
   1e3c8:	ec41 0b10 	vmov	d0, r0, r1
   1e3cc:	b005      	add	sp, #20
   1e3ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3d2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3d6:	ed9d 0b00 	vldr	d0, [sp]
   1e3da:	f000 fa39 	bl	1e850 <__kernel_cos>
   1e3de:	ec51 0b10 	vmov	r0, r1, d0
   1e3e2:	e7ca      	b.n	1e37a <sin+0x22>
   1e3e4:	2001      	movs	r0, #1
   1e3e6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3ea:	ed9d 0b00 	vldr	d0, [sp]
   1e3ee:	f000 ff87 	bl	1f300 <__kernel_sin>
   1e3f2:	ec51 0b10 	vmov	r0, r1, d0
   1e3f6:	e7c0      	b.n	1e37a <sin+0x22>
   1e3f8:	2001      	movs	r0, #1
   1e3fa:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3fe:	ed9d 0b00 	vldr	d0, [sp]
   1e402:	f000 ff7d 	bl	1f300 <__kernel_sin>
   1e406:	e7cd      	b.n	1e3a4 <sin+0x4c>
	...
   1e410:	3fe921fb 	.word	0x3fe921fb
   1e414:	7fefffff 	.word	0x7fefffff

0001e418 <__ieee754_rem_pio2>:
   1e418:	ec53 2b10 	vmov	r2, r3, d0
   1e41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e420:	4999      	ldr	r1, [pc, #612]	; (1e688 <__ieee754_rem_pio2+0x270>)
   1e422:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1e426:	b08f      	sub	sp, #60	; 0x3c
   1e428:	428d      	cmp	r5, r1
   1e42a:	f340 8088 	ble.w	1e53e <__ieee754_rem_pio2+0x126>
   1e42e:	4997      	ldr	r1, [pc, #604]	; (1e68c <__ieee754_rem_pio2+0x274>)
   1e430:	461e      	mov	r6, r3
   1e432:	4604      	mov	r4, r0
   1e434:	428d      	cmp	r5, r1
   1e436:	dc29      	bgt.n	1e48c <__ieee754_rem_pio2+0x74>
   1e438:	2e00      	cmp	r6, #0
   1e43a:	4619      	mov	r1, r3
   1e43c:	ee10 0a10 	vmov	r0, s0
   1e440:	a387      	add	r3, pc, #540	; (adr r3, 1e660 <__ieee754_rem_pio2+0x248>)
   1e442:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e446:	f340 81ae 	ble.w	1e7a6 <__ieee754_rem_pio2+0x38e>
   1e44a:	f7fd fffd 	bl	1c448 <__aeabi_dsub>
   1e44e:	4b90      	ldr	r3, [pc, #576]	; (1e690 <__ieee754_rem_pio2+0x278>)
   1e450:	4680      	mov	r8, r0
   1e452:	4689      	mov	r9, r1
   1e454:	429d      	cmp	r5, r3
   1e456:	f000 8088 	beq.w	1e56a <__ieee754_rem_pio2+0x152>
   1e45a:	2701      	movs	r7, #1
   1e45c:	a382      	add	r3, pc, #520	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e462:	f7fd fff1 	bl	1c448 <__aeabi_dsub>
   1e466:	4602      	mov	r2, r0
   1e468:	460b      	mov	r3, r1
   1e46a:	4640      	mov	r0, r8
   1e46c:	4649      	mov	r1, r9
   1e46e:	e9c4 2300 	strd	r2, r3, [r4]
   1e472:	f7fd ffe9 	bl	1c448 <__aeabi_dsub>
   1e476:	a37c      	add	r3, pc, #496	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e47c:	f7fd ffe4 	bl	1c448 <__aeabi_dsub>
   1e480:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e484:	4638      	mov	r0, r7
   1e486:	b00f      	add	sp, #60	; 0x3c
   1e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48c:	4981      	ldr	r1, [pc, #516]	; (1e694 <__ieee754_rem_pio2+0x27c>)
   1e48e:	428d      	cmp	r5, r1
   1e490:	f340 808b 	ble.w	1e5aa <__ieee754_rem_pio2+0x192>
   1e494:	4980      	ldr	r1, [pc, #512]	; (1e698 <__ieee754_rem_pio2+0x280>)
   1e496:	428d      	cmp	r5, r1
   1e498:	dc5c      	bgt.n	1e554 <__ieee754_rem_pio2+0x13c>
   1e49a:	152f      	asrs	r7, r5, #20
   1e49c:	ee10 0a10 	vmov	r0, s0
   1e4a0:	ee10 8a10 	vmov	r8, s0
   1e4a4:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1e4a8:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1e4ac:	4649      	mov	r1, r9
   1e4ae:	f7fe fc1d 	bl	1ccec <__aeabi_d2iz>
   1e4b2:	f7fe f917 	bl	1c6e4 <__aeabi_i2d>
   1e4b6:	4682      	mov	sl, r0
   1e4b8:	468b      	mov	fp, r1
   1e4ba:	4640      	mov	r0, r8
   1e4bc:	4649      	mov	r1, r9
   1e4be:	4652      	mov	r2, sl
   1e4c0:	465b      	mov	r3, fp
   1e4c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1e4c6:	f7fd ffbf 	bl	1c448 <__aeabi_dsub>
   1e4ca:	2200      	movs	r2, #0
   1e4cc:	4b73      	ldr	r3, [pc, #460]	; (1e69c <__ieee754_rem_pio2+0x284>)
   1e4ce:	f7fe f973 	bl	1c7b8 <__aeabi_dmul>
   1e4d2:	4689      	mov	r9, r1
   1e4d4:	4680      	mov	r8, r0
   1e4d6:	f7fe fc09 	bl	1ccec <__aeabi_d2iz>
   1e4da:	4605      	mov	r5, r0
   1e4dc:	f7fe f902 	bl	1c6e4 <__aeabi_i2d>
   1e4e0:	4602      	mov	r2, r0
   1e4e2:	460b      	mov	r3, r1
   1e4e4:	4640      	mov	r0, r8
   1e4e6:	4649      	mov	r1, r9
   1e4e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1e4ec:	f7fd ffac 	bl	1c448 <__aeabi_dsub>
   1e4f0:	2200      	movs	r2, #0
   1e4f2:	4b6a      	ldr	r3, [pc, #424]	; (1e69c <__ieee754_rem_pio2+0x284>)
   1e4f4:	f7fe f960 	bl	1c7b8 <__aeabi_dmul>
   1e4f8:	2200      	movs	r2, #0
   1e4fa:	2300      	movs	r3, #0
   1e4fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1e500:	f7fe fbc2 	bl	1cc88 <__aeabi_dcmpeq>
   1e504:	2800      	cmp	r0, #0
   1e506:	f000 814c 	beq.w	1e7a2 <__ieee754_rem_pio2+0x38a>
   1e50a:	2d00      	cmp	r5, #0
   1e50c:	bf0c      	ite	eq
   1e50e:	2301      	moveq	r3, #1
   1e510:	2302      	movne	r3, #2
   1e512:	4963      	ldr	r1, [pc, #396]	; (1e6a0 <__ieee754_rem_pio2+0x288>)
   1e514:	2002      	movs	r0, #2
   1e516:	463a      	mov	r2, r7
   1e518:	9101      	str	r1, [sp, #4]
   1e51a:	4621      	mov	r1, r4
   1e51c:	9000      	str	r0, [sp, #0]
   1e51e:	a808      	add	r0, sp, #32
   1e520:	f000 fada 	bl	1ead8 <__kernel_rem_pio2>
   1e524:	2e00      	cmp	r6, #0
   1e526:	4607      	mov	r7, r0
   1e528:	daac      	bge.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e52a:	6862      	ldr	r2, [r4, #4]
   1e52c:	4247      	negs	r7, r0
   1e52e:	68e3      	ldr	r3, [r4, #12]
   1e530:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1e534:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e538:	6062      	str	r2, [r4, #4]
   1e53a:	60e3      	str	r3, [r4, #12]
   1e53c:	e7a2      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e53e:	2700      	movs	r7, #0
   1e540:	2400      	movs	r4, #0
   1e542:	2500      	movs	r5, #0
   1e544:	ed80 0b00 	vstr	d0, [r0]
   1e548:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1e54c:	4638      	mov	r0, r7
   1e54e:	b00f      	add	sp, #60	; 0x3c
   1e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e554:	ee10 0a10 	vmov	r0, s0
   1e558:	4619      	mov	r1, r3
   1e55a:	f7fd ff75 	bl	1c448 <__aeabi_dsub>
   1e55e:	2700      	movs	r7, #0
   1e560:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e564:	e9c4 0100 	strd	r0, r1, [r4]
   1e568:	e78c      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e56a:	a341      	add	r3, pc, #260	; (adr r3, 1e670 <__ieee754_rem_pio2+0x258>)
   1e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e570:	f7fd ff6a 	bl	1c448 <__aeabi_dsub>
   1e574:	4606      	mov	r6, r0
   1e576:	460f      	mov	r7, r1
   1e578:	a33f      	add	r3, pc, #252	; (adr r3, 1e678 <__ieee754_rem_pio2+0x260>)
   1e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e57e:	f7fd ff63 	bl	1c448 <__aeabi_dsub>
   1e582:	4602      	mov	r2, r0
   1e584:	460b      	mov	r3, r1
   1e586:	4630      	mov	r0, r6
   1e588:	4639      	mov	r1, r7
   1e58a:	2701      	movs	r7, #1
   1e58c:	e9c4 2300 	strd	r2, r3, [r4]
   1e590:	f7fd ff5a 	bl	1c448 <__aeabi_dsub>
   1e594:	a338      	add	r3, pc, #224	; (adr r3, 1e678 <__ieee754_rem_pio2+0x260>)
   1e596:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e59a:	f7fd ff55 	bl	1c448 <__aeabi_dsub>
   1e59e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e5a2:	4638      	mov	r0, r7
   1e5a4:	b00f      	add	sp, #60	; 0x3c
   1e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5aa:	f021 f87f 	bl	3f6ac <fabs>
   1e5ae:	ee10 0a10 	vmov	r0, s0
   1e5b2:	ec59 8b10 	vmov	r8, r9, d0
   1e5b6:	a332      	add	r3, pc, #200	; (adr r3, 1e680 <__ieee754_rem_pio2+0x268>)
   1e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5bc:	4649      	mov	r1, r9
   1e5be:	f7fe f8fb 	bl	1c7b8 <__aeabi_dmul>
   1e5c2:	2200      	movs	r2, #0
   1e5c4:	4b37      	ldr	r3, [pc, #220]	; (1e6a4 <__ieee754_rem_pio2+0x28c>)
   1e5c6:	f7fd ff41 	bl	1c44c <__adddf3>
   1e5ca:	f7fe fb8f 	bl	1ccec <__aeabi_d2iz>
   1e5ce:	4607      	mov	r7, r0
   1e5d0:	f7fe f888 	bl	1c6e4 <__aeabi_i2d>
   1e5d4:	a322      	add	r3, pc, #136	; (adr r3, 1e660 <__ieee754_rem_pio2+0x248>)
   1e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1e5de:	f7fe f8eb 	bl	1c7b8 <__aeabi_dmul>
   1e5e2:	4602      	mov	r2, r0
   1e5e4:	460b      	mov	r3, r1
   1e5e6:	4640      	mov	r0, r8
   1e5e8:	4649      	mov	r1, r9
   1e5ea:	f7fd ff2d 	bl	1c448 <__aeabi_dsub>
   1e5ee:	4682      	mov	sl, r0
   1e5f0:	468b      	mov	fp, r1
   1e5f2:	a31d      	add	r3, pc, #116	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e5fc:	f7fe f8dc 	bl	1c7b8 <__aeabi_dmul>
   1e600:	2f1f      	cmp	r7, #31
   1e602:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e606:	dc51      	bgt.n	1e6ac <__ieee754_rem_pio2+0x294>
   1e608:	4602      	mov	r2, r0
   1e60a:	460b      	mov	r3, r1
   1e60c:	4650      	mov	r0, sl
   1e60e:	4659      	mov	r1, fp
   1e610:	f7fd ff1a 	bl	1c448 <__aeabi_dsub>
   1e614:	4b24      	ldr	r3, [pc, #144]	; (1e6a8 <__ieee754_rem_pio2+0x290>)
   1e616:	1e7a      	subs	r2, r7, #1
   1e618:	4680      	mov	r8, r0
   1e61a:	4689      	mov	r9, r1
   1e61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e620:	42ab      	cmp	r3, r5
   1e622:	d04b      	beq.n	1e6bc <__ieee754_rem_pio2+0x2a4>
   1e624:	4642      	mov	r2, r8
   1e626:	464b      	mov	r3, r9
   1e628:	4650      	mov	r0, sl
   1e62a:	4659      	mov	r1, fp
   1e62c:	e9c4 8900 	strd	r8, r9, [r4]
   1e630:	f7fd ff0a 	bl	1c448 <__aeabi_dsub>
   1e634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e638:	f7fd ff06 	bl	1c448 <__aeabi_dsub>
   1e63c:	2e00      	cmp	r6, #0
   1e63e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e642:	f6bf af1f 	bge.w	1e484 <__ieee754_rem_pio2+0x6c>
   1e646:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1e64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e64e:	427f      	negs	r7, r7
   1e650:	e9c4 8500 	strd	r8, r5, [r4]
   1e654:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1e658:	e714      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e65a:	bf00      	nop
   1e65c:	f3af 8000 	nop.w
   1e660:	54400000 	.word	0x54400000
   1e664:	3ff921fb 	.word	0x3ff921fb
   1e668:	1a626331 	.word	0x1a626331
   1e66c:	3dd0b461 	.word	0x3dd0b461
   1e670:	1a600000 	.word	0x1a600000
   1e674:	3dd0b461 	.word	0x3dd0b461
   1e678:	2e037073 	.word	0x2e037073
   1e67c:	3ba3198a 	.word	0x3ba3198a
   1e680:	6dc9c883 	.word	0x6dc9c883
   1e684:	3fe45f30 	.word	0x3fe45f30
   1e688:	3fe921fb 	.word	0x3fe921fb
   1e68c:	4002d97b 	.word	0x4002d97b
   1e690:	3ff921fb 	.word	0x3ff921fb
   1e694:	413921fb 	.word	0x413921fb
   1e698:	7fefffff 	.word	0x7fefffff
   1e69c:	41700000 	.word	0x41700000
   1e6a0:	00047758 	.word	0x00047758
   1e6a4:	3fe00000 	.word	0x3fe00000
   1e6a8:	000476d8 	.word	0x000476d8
   1e6ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e6b0:	4650      	mov	r0, sl
   1e6b2:	4659      	mov	r1, fp
   1e6b4:	f7fd fec8 	bl	1c448 <__aeabi_dsub>
   1e6b8:	4680      	mov	r8, r0
   1e6ba:	4689      	mov	r9, r1
   1e6bc:	152d      	asrs	r5, r5, #20
   1e6be:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1e6c2:	1aeb      	subs	r3, r5, r3
   1e6c4:	2b10      	cmp	r3, #16
   1e6c6:	ddad      	ble.n	1e624 <__ieee754_rem_pio2+0x20c>
   1e6c8:	a357      	add	r3, pc, #348	; (adr r3, 1e828 <__ieee754_rem_pio2+0x410>)
   1e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e6d2:	f7fe f871 	bl	1c7b8 <__aeabi_dmul>
   1e6d6:	4680      	mov	r8, r0
   1e6d8:	4689      	mov	r9, r1
   1e6da:	4602      	mov	r2, r0
   1e6dc:	460b      	mov	r3, r1
   1e6de:	4650      	mov	r0, sl
   1e6e0:	4659      	mov	r1, fp
   1e6e2:	f7fd feb1 	bl	1c448 <__aeabi_dsub>
   1e6e6:	4602      	mov	r2, r0
   1e6e8:	460b      	mov	r3, r1
   1e6ea:	4650      	mov	r0, sl
   1e6ec:	4659      	mov	r1, fp
   1e6ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e6f2:	f7fd fea9 	bl	1c448 <__aeabi_dsub>
   1e6f6:	4642      	mov	r2, r8
   1e6f8:	464b      	mov	r3, r9
   1e6fa:	f7fd fea5 	bl	1c448 <__aeabi_dsub>
   1e6fe:	4680      	mov	r8, r0
   1e700:	4689      	mov	r9, r1
   1e702:	a34b      	add	r3, pc, #300	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e704:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e70c:	f7fe f854 	bl	1c7b8 <__aeabi_dmul>
   1e710:	4642      	mov	r2, r8
   1e712:	464b      	mov	r3, r9
   1e714:	f7fd fe98 	bl	1c448 <__aeabi_dsub>
   1e718:	460b      	mov	r3, r1
   1e71a:	4602      	mov	r2, r0
   1e71c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1e720:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e724:	4650      	mov	r0, sl
   1e726:	4659      	mov	r1, fp
   1e728:	f7fd fe8e 	bl	1c448 <__aeabi_dsub>
   1e72c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1e730:	4680      	mov	r8, r0
   1e732:	4689      	mov	r9, r1
   1e734:	1aed      	subs	r5, r5, r3
   1e736:	2d31      	cmp	r5, #49	; 0x31
   1e738:	f77f af74 	ble.w	1e624 <__ieee754_rem_pio2+0x20c>
   1e73c:	a33f      	add	r3, pc, #252	; (adr r3, 1e83c <__ieee754_rem_pio2+0x424>)
   1e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e746:	f7fe f837 	bl	1c7b8 <__aeabi_dmul>
   1e74a:	4680      	mov	r8, r0
   1e74c:	4689      	mov	r9, r1
   1e74e:	4602      	mov	r2, r0
   1e750:	460b      	mov	r3, r1
   1e752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e756:	f7fd fe77 	bl	1c448 <__aeabi_dsub>
   1e75a:	4602      	mov	r2, r0
   1e75c:	460b      	mov	r3, r1
   1e75e:	4682      	mov	sl, r0
   1e760:	468b      	mov	fp, r1
   1e762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e766:	f7fd fe6f 	bl	1c448 <__aeabi_dsub>
   1e76a:	4642      	mov	r2, r8
   1e76c:	464b      	mov	r3, r9
   1e76e:	f7fd fe6b 	bl	1c448 <__aeabi_dsub>
   1e772:	4680      	mov	r8, r0
   1e774:	4689      	mov	r9, r1
   1e776:	a333      	add	r3, pc, #204	; (adr r3, 1e844 <__ieee754_rem_pio2+0x42c>)
   1e778:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e780:	f7fe f81a 	bl	1c7b8 <__aeabi_dmul>
   1e784:	4642      	mov	r2, r8
   1e786:	464b      	mov	r3, r9
   1e788:	f7fd fe5e 	bl	1c448 <__aeabi_dsub>
   1e78c:	4602      	mov	r2, r0
   1e78e:	460b      	mov	r3, r1
   1e790:	4650      	mov	r0, sl
   1e792:	4659      	mov	r1, fp
   1e794:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e798:	f7fd fe56 	bl	1c448 <__aeabi_dsub>
   1e79c:	4680      	mov	r8, r0
   1e79e:	4689      	mov	r9, r1
   1e7a0:	e740      	b.n	1e624 <__ieee754_rem_pio2+0x20c>
   1e7a2:	2303      	movs	r3, #3
   1e7a4:	e6b5      	b.n	1e512 <__ieee754_rem_pio2+0xfa>
   1e7a6:	f7fd fe51 	bl	1c44c <__adddf3>
   1e7aa:	4b23      	ldr	r3, [pc, #140]	; (1e838 <__ieee754_rem_pio2+0x420>)
   1e7ac:	4680      	mov	r8, r0
   1e7ae:	4689      	mov	r9, r1
   1e7b0:	429d      	cmp	r5, r3
   1e7b2:	d016      	beq.n	1e7e2 <__ieee754_rem_pio2+0x3ca>
   1e7b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e7b8:	a319      	add	r3, pc, #100	; (adr r3, 1e820 <__ieee754_rem_pio2+0x408>)
   1e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7be:	f7fd fe45 	bl	1c44c <__adddf3>
   1e7c2:	4602      	mov	r2, r0
   1e7c4:	460b      	mov	r3, r1
   1e7c6:	4640      	mov	r0, r8
   1e7c8:	4649      	mov	r1, r9
   1e7ca:	e9c4 2300 	strd	r2, r3, [r4]
   1e7ce:	f7fd fe3b 	bl	1c448 <__aeabi_dsub>
   1e7d2:	a313      	add	r3, pc, #76	; (adr r3, 1e820 <__ieee754_rem_pio2+0x408>)
   1e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7d8:	f7fd fe38 	bl	1c44c <__adddf3>
   1e7dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e7e0:	e650      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e7e2:	a311      	add	r3, pc, #68	; (adr r3, 1e828 <__ieee754_rem_pio2+0x410>)
   1e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7e8:	f7fd fe30 	bl	1c44c <__adddf3>
   1e7ec:	460f      	mov	r7, r1
   1e7ee:	4606      	mov	r6, r0
   1e7f0:	a30f      	add	r3, pc, #60	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7f6:	f7fd fe29 	bl	1c44c <__adddf3>
   1e7fa:	4602      	mov	r2, r0
   1e7fc:	460b      	mov	r3, r1
   1e7fe:	4630      	mov	r0, r6
   1e800:	4639      	mov	r1, r7
   1e802:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e806:	e9c4 2300 	strd	r2, r3, [r4]
   1e80a:	f7fd fe1d 	bl	1c448 <__aeabi_dsub>
   1e80e:	a308      	add	r3, pc, #32	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e810:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e814:	f7fd fe1a 	bl	1c44c <__adddf3>
   1e818:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e81c:	e632      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e81e:	bf00      	nop
   1e820:	1a626331 	.word	0x1a626331
   1e824:	3dd0b461 	.word	0x3dd0b461
   1e828:	1a600000 	.word	0x1a600000
   1e82c:	3dd0b461 	.word	0x3dd0b461
   1e830:	2e037073 	.word	0x2e037073
   1e834:	3ba3198a 	.word	0x3ba3198a
   1e838:	3ff921fb 	.word	0x3ff921fb
   1e83c:	2e000000 	.word	0x2e000000
   1e840:	3ba3198a 	.word	0x3ba3198a
   1e844:	252049c1 	.word	0x252049c1
   1e848:	397b839a 	.word	0x397b839a
   1e84c:	00000000 	.word	0x00000000

0001e850 <__kernel_cos>:
   1e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e854:	ec57 6b10 	vmov	r6, r7, d0
   1e858:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e85c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1e860:	ed2d 8b02 	vpush	{d8}
   1e864:	eeb0 8a41 	vmov.f32	s16, s2
   1e868:	eef0 8a61 	vmov.f32	s17, s3
   1e86c:	b083      	sub	sp, #12
   1e86e:	da72      	bge.n	1e956 <__kernel_cos+0x106>
   1e870:	ee10 0a10 	vmov	r0, s0
   1e874:	4639      	mov	r1, r7
   1e876:	f7fe fa39 	bl	1ccec <__aeabi_d2iz>
   1e87a:	2800      	cmp	r0, #0
   1e87c:	f000 80f6 	beq.w	1ea6c <__kernel_cos+0x21c>
   1e880:	4632      	mov	r2, r6
   1e882:	463b      	mov	r3, r7
   1e884:	4630      	mov	r0, r6
   1e886:	4639      	mov	r1, r7
   1e888:	f7fd ff96 	bl	1c7b8 <__aeabi_dmul>
   1e88c:	4604      	mov	r4, r0
   1e88e:	460d      	mov	r5, r1
   1e890:	a37b      	add	r3, pc, #492	; (adr r3, 1ea80 <__kernel_cos+0x230>)
   1e892:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e896:	f7fd ff8f 	bl	1c7b8 <__aeabi_dmul>
   1e89a:	a37b      	add	r3, pc, #492	; (adr r3, 1ea88 <__kernel_cos+0x238>)
   1e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8a0:	f7fd fdd4 	bl	1c44c <__adddf3>
   1e8a4:	4622      	mov	r2, r4
   1e8a6:	462b      	mov	r3, r5
   1e8a8:	f7fd ff86 	bl	1c7b8 <__aeabi_dmul>
   1e8ac:	a378      	add	r3, pc, #480	; (adr r3, 1ea90 <__kernel_cos+0x240>)
   1e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8b2:	f7fd fdc9 	bl	1c448 <__aeabi_dsub>
   1e8b6:	4622      	mov	r2, r4
   1e8b8:	462b      	mov	r3, r5
   1e8ba:	f7fd ff7d 	bl	1c7b8 <__aeabi_dmul>
   1e8be:	a376      	add	r3, pc, #472	; (adr r3, 1ea98 <__kernel_cos+0x248>)
   1e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8c4:	f7fd fdc2 	bl	1c44c <__adddf3>
   1e8c8:	4622      	mov	r2, r4
   1e8ca:	462b      	mov	r3, r5
   1e8cc:	f7fd ff74 	bl	1c7b8 <__aeabi_dmul>
   1e8d0:	a373      	add	r3, pc, #460	; (adr r3, 1eaa0 <__kernel_cos+0x250>)
   1e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8d6:	f7fd fdb7 	bl	1c448 <__aeabi_dsub>
   1e8da:	4622      	mov	r2, r4
   1e8dc:	462b      	mov	r3, r5
   1e8de:	f7fd ff6b 	bl	1c7b8 <__aeabi_dmul>
   1e8e2:	a371      	add	r3, pc, #452	; (adr r3, 1eaa8 <__kernel_cos+0x258>)
   1e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8e8:	f7fd fdb0 	bl	1c44c <__adddf3>
   1e8ec:	4622      	mov	r2, r4
   1e8ee:	462b      	mov	r3, r5
   1e8f0:	f7fd ff62 	bl	1c7b8 <__aeabi_dmul>
   1e8f4:	4682      	mov	sl, r0
   1e8f6:	468b      	mov	fp, r1
   1e8f8:	2200      	movs	r2, #0
   1e8fa:	4b71      	ldr	r3, [pc, #452]	; (1eac0 <__kernel_cos+0x270>)
   1e8fc:	4620      	mov	r0, r4
   1e8fe:	4629      	mov	r1, r5
   1e900:	f7fd ff5a 	bl	1c7b8 <__aeabi_dmul>
   1e904:	4652      	mov	r2, sl
   1e906:	4680      	mov	r8, r0
   1e908:	4689      	mov	r9, r1
   1e90a:	465b      	mov	r3, fp
   1e90c:	4620      	mov	r0, r4
   1e90e:	4629      	mov	r1, r5
   1e910:	f7fd ff52 	bl	1c7b8 <__aeabi_dmul>
   1e914:	4604      	mov	r4, r0
   1e916:	460d      	mov	r5, r1
   1e918:	4630      	mov	r0, r6
   1e91a:	4639      	mov	r1, r7
   1e91c:	ec53 2b18 	vmov	r2, r3, d8
   1e920:	f7fd ff4a 	bl	1c7b8 <__aeabi_dmul>
   1e924:	4602      	mov	r2, r0
   1e926:	460b      	mov	r3, r1
   1e928:	4620      	mov	r0, r4
   1e92a:	4629      	mov	r1, r5
   1e92c:	f7fd fd8c 	bl	1c448 <__aeabi_dsub>
   1e930:	4602      	mov	r2, r0
   1e932:	460b      	mov	r3, r1
   1e934:	4640      	mov	r0, r8
   1e936:	4649      	mov	r1, r9
   1e938:	f7fd fd86 	bl	1c448 <__aeabi_dsub>
   1e93c:	4602      	mov	r2, r0
   1e93e:	460b      	mov	r3, r1
   1e940:	2000      	movs	r0, #0
   1e942:	4960      	ldr	r1, [pc, #384]	; (1eac4 <__kernel_cos+0x274>)
   1e944:	f7fd fd80 	bl	1c448 <__aeabi_dsub>
   1e948:	ec41 0b10 	vmov	d0, r0, r1
   1e94c:	b003      	add	sp, #12
   1e94e:	ecbd 8b02 	vpop	{d8}
   1e952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e956:	ee10 2a10 	vmov	r2, s0
   1e95a:	ee10 0a10 	vmov	r0, s0
   1e95e:	463b      	mov	r3, r7
   1e960:	4639      	mov	r1, r7
   1e962:	f7fd ff29 	bl	1c7b8 <__aeabi_dmul>
   1e966:	4604      	mov	r4, r0
   1e968:	460d      	mov	r5, r1
   1e96a:	a345      	add	r3, pc, #276	; (adr r3, 1ea80 <__kernel_cos+0x230>)
   1e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e970:	f7fd ff22 	bl	1c7b8 <__aeabi_dmul>
   1e974:	a344      	add	r3, pc, #272	; (adr r3, 1ea88 <__kernel_cos+0x238>)
   1e976:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e97a:	f7fd fd67 	bl	1c44c <__adddf3>
   1e97e:	4622      	mov	r2, r4
   1e980:	462b      	mov	r3, r5
   1e982:	f7fd ff19 	bl	1c7b8 <__aeabi_dmul>
   1e986:	a342      	add	r3, pc, #264	; (adr r3, 1ea90 <__kernel_cos+0x240>)
   1e988:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e98c:	f7fd fd5c 	bl	1c448 <__aeabi_dsub>
   1e990:	4622      	mov	r2, r4
   1e992:	462b      	mov	r3, r5
   1e994:	f7fd ff10 	bl	1c7b8 <__aeabi_dmul>
   1e998:	a33f      	add	r3, pc, #252	; (adr r3, 1ea98 <__kernel_cos+0x248>)
   1e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e99e:	f7fd fd55 	bl	1c44c <__adddf3>
   1e9a2:	4622      	mov	r2, r4
   1e9a4:	462b      	mov	r3, r5
   1e9a6:	f7fd ff07 	bl	1c7b8 <__aeabi_dmul>
   1e9aa:	a33d      	add	r3, pc, #244	; (adr r3, 1eaa0 <__kernel_cos+0x250>)
   1e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9b0:	f7fd fd4a 	bl	1c448 <__aeabi_dsub>
   1e9b4:	4622      	mov	r2, r4
   1e9b6:	462b      	mov	r3, r5
   1e9b8:	f7fd fefe 	bl	1c7b8 <__aeabi_dmul>
   1e9bc:	a33a      	add	r3, pc, #232	; (adr r3, 1eaa8 <__kernel_cos+0x258>)
   1e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9c2:	f7fd fd43 	bl	1c44c <__adddf3>
   1e9c6:	462b      	mov	r3, r5
   1e9c8:	4622      	mov	r2, r4
   1e9ca:	f7fd fef5 	bl	1c7b8 <__aeabi_dmul>
   1e9ce:	4b3e      	ldr	r3, [pc, #248]	; (1eac8 <__kernel_cos+0x278>)
   1e9d0:	4682      	mov	sl, r0
   1e9d2:	468b      	mov	fp, r1
   1e9d4:	4599      	cmp	r9, r3
   1e9d6:	dd8f      	ble.n	1e8f8 <__kernel_cos+0xa8>
   1e9d8:	4b3c      	ldr	r3, [pc, #240]	; (1eacc <__kernel_cos+0x27c>)
   1e9da:	4599      	cmp	r9, r3
   1e9dc:	dc3d      	bgt.n	1ea5a <__kernel_cos+0x20a>
   1e9de:	2200      	movs	r2, #0
   1e9e0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e9e4:	2000      	movs	r0, #0
   1e9e6:	4937      	ldr	r1, [pc, #220]	; (1eac4 <__kernel_cos+0x274>)
   1e9e8:	4690      	mov	r8, r2
   1e9ea:	4699      	mov	r9, r3
   1e9ec:	f7fd fd2c 	bl	1c448 <__aeabi_dsub>
   1e9f0:	e9cd 0100 	strd	r0, r1, [sp]
   1e9f4:	2200      	movs	r2, #0
   1e9f6:	4b32      	ldr	r3, [pc, #200]	; (1eac0 <__kernel_cos+0x270>)
   1e9f8:	4620      	mov	r0, r4
   1e9fa:	4629      	mov	r1, r5
   1e9fc:	f7fd fedc 	bl	1c7b8 <__aeabi_dmul>
   1ea00:	4642      	mov	r2, r8
   1ea02:	464b      	mov	r3, r9
   1ea04:	f7fd fd20 	bl	1c448 <__aeabi_dsub>
   1ea08:	4652      	mov	r2, sl
   1ea0a:	4680      	mov	r8, r0
   1ea0c:	4689      	mov	r9, r1
   1ea0e:	465b      	mov	r3, fp
   1ea10:	4620      	mov	r0, r4
   1ea12:	4629      	mov	r1, r5
   1ea14:	f7fd fed0 	bl	1c7b8 <__aeabi_dmul>
   1ea18:	4604      	mov	r4, r0
   1ea1a:	460d      	mov	r5, r1
   1ea1c:	4630      	mov	r0, r6
   1ea1e:	4639      	mov	r1, r7
   1ea20:	ec53 2b18 	vmov	r2, r3, d8
   1ea24:	f7fd fec8 	bl	1c7b8 <__aeabi_dmul>
   1ea28:	4602      	mov	r2, r0
   1ea2a:	460b      	mov	r3, r1
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	4629      	mov	r1, r5
   1ea30:	f7fd fd0a 	bl	1c448 <__aeabi_dsub>
   1ea34:	4602      	mov	r2, r0
   1ea36:	460b      	mov	r3, r1
   1ea38:	4640      	mov	r0, r8
   1ea3a:	4649      	mov	r1, r9
   1ea3c:	f7fd fd04 	bl	1c448 <__aeabi_dsub>
   1ea40:	4602      	mov	r2, r0
   1ea42:	460b      	mov	r3, r1
   1ea44:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ea48:	f7fd fcfe 	bl	1c448 <__aeabi_dsub>
   1ea4c:	ec41 0b10 	vmov	d0, r0, r1
   1ea50:	b003      	add	sp, #12
   1ea52:	ecbd 8b02 	vpop	{d8}
   1ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea5a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1eab0 <__kernel_cos+0x260>
   1ea5e:	f04f 0800 	mov.w	r8, #0
   1ea62:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1ead0 <__kernel_cos+0x280>
   1ea66:	ed8d 7b00 	vstr	d7, [sp]
   1ea6a:	e7c3      	b.n	1e9f4 <__kernel_cos+0x1a4>
   1ea6c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1eab8 <__kernel_cos+0x268>
   1ea70:	b003      	add	sp, #12
   1ea72:	ecbd 8b02 	vpop	{d8}
   1ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea7a:	bf00      	nop
   1ea7c:	f3af 8000 	nop.w
   1ea80:	be8838d4 	.word	0xbe8838d4
   1ea84:	bda8fae9 	.word	0xbda8fae9
   1ea88:	bdb4b1c4 	.word	0xbdb4b1c4
   1ea8c:	3e21ee9e 	.word	0x3e21ee9e
   1ea90:	809c52ad 	.word	0x809c52ad
   1ea94:	3e927e4f 	.word	0x3e927e4f
   1ea98:	19cb1590 	.word	0x19cb1590
   1ea9c:	3efa01a0 	.word	0x3efa01a0
   1eaa0:	16c15177 	.word	0x16c15177
   1eaa4:	3f56c16c 	.word	0x3f56c16c
   1eaa8:	5555554c 	.word	0x5555554c
   1eaac:	3fa55555 	.word	0x3fa55555
   1eab0:	00000000 	.word	0x00000000
   1eab4:	3fe70000 	.word	0x3fe70000
   1eab8:	00000000 	.word	0x00000000
   1eabc:	3ff00000 	.word	0x3ff00000
   1eac0:	3fe00000 	.word	0x3fe00000
   1eac4:	3ff00000 	.word	0x3ff00000
   1eac8:	3fd33332 	.word	0x3fd33332
   1eacc:	3fe90000 	.word	0x3fe90000
   1ead0:	3fd20000 	.word	0x3fd20000
   1ead4:	00000000 	.word	0x00000000

0001ead8 <__kernel_rem_pio2>:
   1ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eadc:	461c      	mov	r4, r3
   1eade:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1eae2:	f112 0f14 	cmn.w	r2, #20
   1eae6:	910b      	str	r1, [sp, #44]	; 0x2c
   1eae8:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
   1eaec:	9308      	str	r3, [sp, #32]
   1eaee:	9103      	str	r1, [sp, #12]
   1eaf0:	4bb1      	ldr	r3, [pc, #708]	; (1edb8 <__kernel_rem_pio2+0x2e0>)
   1eaf2:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1eaf4:	9004      	str	r0, [sp, #16]
   1eaf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1eafa:	9305      	str	r3, [sp, #20]
   1eafc:	f2c0 82c1 	blt.w	1f082 <__kernel_rem_pio2+0x5aa>
   1eb00:	1ed3      	subs	r3, r2, #3
   1eb02:	49ae      	ldr	r1, [pc, #696]	; (1edbc <__kernel_rem_pio2+0x2e4>)
   1eb04:	fb81 0103 	smull	r0, r1, r1, r3
   1eb08:	17db      	asrs	r3, r3, #31
   1eb0a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1eb0e:	9307      	str	r3, [sp, #28]
   1eb10:	3301      	adds	r3, #1
   1eb12:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1eb16:	00db      	lsls	r3, r3, #3
   1eb18:	18d3      	adds	r3, r2, r3
   1eb1a:	9a07      	ldr	r2, [sp, #28]
   1eb1c:	9306      	str	r3, [sp, #24]
   1eb1e:	9b03      	ldr	r3, [sp, #12]
   1eb20:	1ad6      	subs	r6, r2, r3
   1eb22:	9a05      	ldr	r2, [sp, #20]
   1eb24:	eb12 0803 	adds.w	r8, r2, r3
   1eb28:	d414      	bmi.n	1eb54 <__kernel_rem_pio2+0x7c>
   1eb2a:	f108 0801 	add.w	r8, r8, #1
   1eb2e:	af20      	add	r7, sp, #128	; 0x80
   1eb30:	2400      	movs	r4, #0
   1eb32:	2500      	movs	r5, #0
   1eb34:	44b0      	add	r8, r6
   1eb36:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1eb3a:	2e00      	cmp	r6, #0
   1eb3c:	4620      	mov	r0, r4
   1eb3e:	4629      	mov	r1, r5
   1eb40:	db03      	blt.n	1eb4a <__kernel_rem_pio2+0x72>
   1eb42:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1eb46:	f7fd fdcd 	bl	1c6e4 <__aeabi_i2d>
   1eb4a:	3601      	adds	r6, #1
   1eb4c:	4546      	cmp	r6, r8
   1eb4e:	e8e7 0102 	strd	r0, r1, [r7], #8
   1eb52:	d1f2      	bne.n	1eb3a <__kernel_rem_pio2+0x62>
   1eb54:	9b05      	ldr	r3, [sp, #20]
   1eb56:	2b00      	cmp	r3, #0
   1eb58:	9b08      	ldr	r3, [sp, #32]
   1eb5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1eb5e:	9301      	str	r3, [sp, #4]
   1eb60:	db29      	blt.n	1ebb6 <__kernel_rem_pio2+0xde>
   1eb62:	9a04      	ldr	r2, [sp, #16]
   1eb64:	a920      	add	r1, sp, #128	; 0x80
   1eb66:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1eb6a:	eb02 0803 	add.w	r8, r2, r3
   1eb6e:	eb01 0903 	add.w	r9, r1, r3
   1eb72:	aa72      	add	r2, sp, #456	; 0x1c8
   1eb74:	9b05      	ldr	r3, [sp, #20]
   1eb76:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1eb7a:	9b03      	ldr	r3, [sp, #12]
   1eb7c:	2b00      	cmp	r3, #0
   1eb7e:	f2c0 819e 	blt.w	1eebe <__kernel_rem_pio2+0x3e6>
   1eb82:	464d      	mov	r5, r9
   1eb84:	9c04      	ldr	r4, [sp, #16]
   1eb86:	2600      	movs	r6, #0
   1eb88:	2700      	movs	r7, #0
   1eb8a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1eb8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1eb92:	f7fd fe11 	bl	1c7b8 <__aeabi_dmul>
   1eb96:	4602      	mov	r2, r0
   1eb98:	460b      	mov	r3, r1
   1eb9a:	4630      	mov	r0, r6
   1eb9c:	4639      	mov	r1, r7
   1eb9e:	f7fd fc55 	bl	1c44c <__adddf3>
   1eba2:	4544      	cmp	r4, r8
   1eba4:	4606      	mov	r6, r0
   1eba6:	460f      	mov	r7, r1
   1eba8:	d1ef      	bne.n	1eb8a <__kernel_rem_pio2+0xb2>
   1ebaa:	f109 0908 	add.w	r9, r9, #8
   1ebae:	e8ea 6702 	strd	r6, r7, [sl], #8
   1ebb2:	45da      	cmp	sl, fp
   1ebb4:	d1e1      	bne.n	1eb7a <__kernel_rem_pio2+0xa2>
   1ebb6:	9905      	ldr	r1, [sp, #20]
   1ebb8:	9a01      	ldr	r2, [sp, #4]
   1ebba:	9804      	ldr	r0, [sp, #16]
   1ebbc:	008b      	lsls	r3, r1, #2
   1ebbe:	9101      	str	r1, [sp, #4]
   1ebc0:	4402      	add	r2, r0
   1ebc2:	a80b      	add	r0, sp, #44	; 0x2c
   1ebc4:	4693      	mov	fp, r2
   1ebc6:	f1a3 0208 	sub.w	r2, r3, #8
   1ebca:	18c3      	adds	r3, r0, r3
   1ebcc:	930a      	str	r3, [sp, #40]	; 0x28
   1ebce:	ab0c      	add	r3, sp, #48	; 0x30
   1ebd0:	4413      	add	r3, r2
   1ebd2:	9309      	str	r3, [sp, #36]	; 0x24
   1ebd4:	9a01      	ldr	r2, [sp, #4]
   1ebd6:	a998      	add	r1, sp, #608	; 0x260
   1ebd8:	2a00      	cmp	r2, #0
   1ebda:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1ebde:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1ebe2:	dd29      	ble.n	1ec38 <__kernel_rem_pio2+0x160>
   1ebe4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1ebe8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1ebec:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	4b73      	ldr	r3, [pc, #460]	; (1edc0 <__kernel_rem_pio2+0x2e8>)
   1ebf4:	4620      	mov	r0, r4
   1ebf6:	4629      	mov	r1, r5
   1ebf8:	f7fd fdde 	bl	1c7b8 <__aeabi_dmul>
   1ebfc:	f7fe f876 	bl	1ccec <__aeabi_d2iz>
   1ec00:	f7fd fd70 	bl	1c6e4 <__aeabi_i2d>
   1ec04:	2200      	movs	r2, #0
   1ec06:	4b6f      	ldr	r3, [pc, #444]	; (1edc4 <__kernel_rem_pio2+0x2ec>)
   1ec08:	4606      	mov	r6, r0
   1ec0a:	460f      	mov	r7, r1
   1ec0c:	f7fd fdd4 	bl	1c7b8 <__aeabi_dmul>
   1ec10:	4602      	mov	r2, r0
   1ec12:	460b      	mov	r3, r1
   1ec14:	4620      	mov	r0, r4
   1ec16:	4629      	mov	r1, r5
   1ec18:	f7fd fc16 	bl	1c448 <__aeabi_dsub>
   1ec1c:	f7fe f866 	bl	1ccec <__aeabi_d2iz>
   1ec20:	4639      	mov	r1, r7
   1ec22:	f849 0b04 	str.w	r0, [r9], #4
   1ec26:	4630      	mov	r0, r6
   1ec28:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1ec2c:	f7fd fc0e 	bl	1c44c <__adddf3>
   1ec30:	4604      	mov	r4, r0
   1ec32:	45d0      	cmp	r8, sl
   1ec34:	460d      	mov	r5, r1
   1ec36:	d1db      	bne.n	1ebf0 <__kernel_rem_pio2+0x118>
   1ec38:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1ec3c:	ec45 4b10 	vmov	d0, r4, r5
   1ec40:	4648      	mov	r0, r9
   1ec42:	f000 fcad 	bl	1f5a0 <scalbn>
   1ec46:	2200      	movs	r2, #0
   1ec48:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1ec4c:	ee10 0a10 	vmov	r0, s0
   1ec50:	ec55 4b10 	vmov	r4, r5, d0
   1ec54:	4629      	mov	r1, r5
   1ec56:	f7fd fdaf 	bl	1c7b8 <__aeabi_dmul>
   1ec5a:	ec41 0b10 	vmov	d0, r0, r1
   1ec5e:	f000 fc1b 	bl	1f498 <floor>
   1ec62:	2200      	movs	r2, #0
   1ec64:	4b58      	ldr	r3, [pc, #352]	; (1edc8 <__kernel_rem_pio2+0x2f0>)
   1ec66:	ec51 0b10 	vmov	r0, r1, d0
   1ec6a:	f7fd fda5 	bl	1c7b8 <__aeabi_dmul>
   1ec6e:	4602      	mov	r2, r0
   1ec70:	460b      	mov	r3, r1
   1ec72:	4620      	mov	r0, r4
   1ec74:	4629      	mov	r1, r5
   1ec76:	f7fd fbe7 	bl	1c448 <__aeabi_dsub>
   1ec7a:	460d      	mov	r5, r1
   1ec7c:	4604      	mov	r4, r0
   1ec7e:	f7fe f835 	bl	1ccec <__aeabi_d2iz>
   1ec82:	4680      	mov	r8, r0
   1ec84:	f7fd fd2e 	bl	1c6e4 <__aeabi_i2d>
   1ec88:	460b      	mov	r3, r1
   1ec8a:	4602      	mov	r2, r0
   1ec8c:	4629      	mov	r1, r5
   1ec8e:	4620      	mov	r0, r4
   1ec90:	f7fd fbda 	bl	1c448 <__aeabi_dsub>
   1ec94:	464b      	mov	r3, r9
   1ec96:	4606      	mov	r6, r0
   1ec98:	460f      	mov	r7, r1
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	f340 8096 	ble.w	1edcc <__kernel_rem_pio2+0x2f4>
   1eca0:	9a01      	ldr	r2, [sp, #4]
   1eca2:	a90c      	add	r1, sp, #48	; 0x30
   1eca4:	f1c9 0318 	rsb	r3, r9, #24
   1eca8:	f1c9 0517 	rsb	r5, r9, #23
   1ecac:	3a01      	subs	r2, #1
   1ecae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1ecb2:	fa41 f003 	asr.w	r0, r1, r3
   1ecb6:	fa00 f303 	lsl.w	r3, r0, r3
   1ecba:	4480      	add	r8, r0
   1ecbc:	1acb      	subs	r3, r1, r3
   1ecbe:	a90c      	add	r1, sp, #48	; 0x30
   1ecc0:	fa43 f505 	asr.w	r5, r3, r5
   1ecc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ecc8:	2d00      	cmp	r5, #0
   1ecca:	f300 8089 	bgt.w	1ede0 <__kernel_rem_pio2+0x308>
   1ecce:	2200      	movs	r2, #0
   1ecd0:	2300      	movs	r3, #0
   1ecd2:	4630      	mov	r0, r6
   1ecd4:	4639      	mov	r1, r7
   1ecd6:	f7fd ffd7 	bl	1cc88 <__aeabi_dcmpeq>
   1ecda:	2800      	cmp	r0, #0
   1ecdc:	f000 8297 	beq.w	1f20e <__kernel_rem_pio2+0x736>
   1ece0:	9901      	ldr	r1, [sp, #4]
   1ece2:	9b05      	ldr	r3, [sp, #20]
   1ece4:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1ece8:	454b      	cmp	r3, r9
   1ecea:	dc10      	bgt.n	1ed0e <__kernel_rem_pio2+0x236>
   1ecec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1ecf0:	2200      	movs	r2, #0
   1ecf2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ecf4:	440b      	add	r3, r1
   1ecf6:	a90c      	add	r1, sp, #48	; 0x30
   1ecf8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ecfc:	f853 1904 	ldr.w	r1, [r3], #-4
   1ed00:	4283      	cmp	r3, r0
   1ed02:	ea42 0201 	orr.w	r2, r2, r1
   1ed06:	d1f9      	bne.n	1ecfc <__kernel_rem_pio2+0x224>
   1ed08:	2a00      	cmp	r2, #0
   1ed0a:	f040 80e2 	bne.w	1eed2 <__kernel_rem_pio2+0x3fa>
   1ed0e:	9b05      	ldr	r3, [sp, #20]
   1ed10:	aa0c      	add	r2, sp, #48	; 0x30
   1ed12:	3b01      	subs	r3, #1
   1ed14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	f040 80cb 	bne.w	1eeb4 <__kernel_rem_pio2+0x3dc>
   1ed1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ed20:	2301      	movs	r3, #1
   1ed22:	f852 1904 	ldr.w	r1, [r2], #-4
   1ed26:	3301      	adds	r3, #1
   1ed28:	2900      	cmp	r1, #0
   1ed2a:	d0fa      	beq.n	1ed22 <__kernel_rem_pio2+0x24a>
   1ed2c:	9901      	ldr	r1, [sp, #4]
   1ed2e:	1c4a      	adds	r2, r1, #1
   1ed30:	18cb      	adds	r3, r1, r3
   1ed32:	4691      	mov	r9, r2
   1ed34:	9302      	str	r3, [sp, #8]
   1ed36:	9b07      	ldr	r3, [sp, #28]
   1ed38:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1ed3c:	9901      	ldr	r1, [sp, #4]
   1ed3e:	18d3      	adds	r3, r2, r3
   1ed40:	9808      	ldr	r0, [sp, #32]
   1ed42:	449a      	add	sl, r3
   1ed44:	4401      	add	r1, r0
   1ed46:	ab20      	add	r3, sp, #128	; 0x80
   1ed48:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1ed4c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1ed4e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1ed52:	ab70      	add	r3, sp, #448	; 0x1c0
   1ed54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ed58:	9301      	str	r3, [sp, #4]
   1ed5a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1ed5e:	46a8      	mov	r8, r5
   1ed60:	f7fd fcc0 	bl	1c6e4 <__aeabi_i2d>
   1ed64:	460b      	mov	r3, r1
   1ed66:	9903      	ldr	r1, [sp, #12]
   1ed68:	4602      	mov	r2, r0
   1ed6a:	2900      	cmp	r1, #0
   1ed6c:	e8e8 2302 	strd	r2, r3, [r8], #8
   1ed70:	db1f      	blt.n	1edb2 <__kernel_rem_pio2+0x2da>
   1ed72:	9c04      	ldr	r4, [sp, #16]
   1ed74:	2600      	movs	r6, #0
   1ed76:	2700      	movs	r7, #0
   1ed78:	e001      	b.n	1ed7e <__kernel_rem_pio2+0x2a6>
   1ed7a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1ed7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1ed82:	f7fd fd19 	bl	1c7b8 <__aeabi_dmul>
   1ed86:	4602      	mov	r2, r0
   1ed88:	460b      	mov	r3, r1
   1ed8a:	4630      	mov	r0, r6
   1ed8c:	4639      	mov	r1, r7
   1ed8e:	f7fd fb5d 	bl	1c44c <__adddf3>
   1ed92:	455c      	cmp	r4, fp
   1ed94:	4606      	mov	r6, r0
   1ed96:	460f      	mov	r7, r1
   1ed98:	d1ef      	bne.n	1ed7a <__kernel_rem_pio2+0x2a2>
   1ed9a:	9b01      	ldr	r3, [sp, #4]
   1ed9c:	f109 0901 	add.w	r9, r9, #1
   1eda0:	4645      	mov	r5, r8
   1eda2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1eda6:	9301      	str	r3, [sp, #4]
   1eda8:	9b02      	ldr	r3, [sp, #8]
   1edaa:	4599      	cmp	r9, r3
   1edac:	ddd5      	ble.n	1ed5a <__kernel_rem_pio2+0x282>
   1edae:	9301      	str	r3, [sp, #4]
   1edb0:	e710      	b.n	1ebd4 <__kernel_rem_pio2+0xfc>
   1edb2:	2600      	movs	r6, #0
   1edb4:	2700      	movs	r7, #0
   1edb6:	e7f0      	b.n	1ed9a <__kernel_rem_pio2+0x2c2>
   1edb8:	00047860 	.word	0x00047860
   1edbc:	2aaaaaab 	.word	0x2aaaaaab
   1edc0:	3e700000 	.word	0x3e700000
   1edc4:	41700000 	.word	0x41700000
   1edc8:	40200000 	.word	0x40200000
   1edcc:	d169      	bne.n	1eea2 <__kernel_rem_pio2+0x3ca>
   1edce:	9b01      	ldr	r3, [sp, #4]
   1edd0:	aa0c      	add	r2, sp, #48	; 0x30
   1edd2:	3b01      	subs	r3, #1
   1edd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1edd8:	15ed      	asrs	r5, r5, #23
   1edda:	2d00      	cmp	r5, #0
   1eddc:	f77f af77 	ble.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ede0:	9b01      	ldr	r3, [sp, #4]
   1ede2:	f108 0801 	add.w	r8, r8, #1
   1ede6:	2b00      	cmp	r3, #0
   1ede8:	f340 820f 	ble.w	1f20a <__kernel_rem_pio2+0x732>
   1edec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1edee:	2c00      	cmp	r4, #0
   1edf0:	d13a      	bne.n	1ee68 <__kernel_rem_pio2+0x390>
   1edf2:	9b01      	ldr	r3, [sp, #4]
   1edf4:	2b01      	cmp	r3, #1
   1edf6:	d009      	beq.n	1ee0c <__kernel_rem_pio2+0x334>
   1edf8:	a90c      	add	r1, sp, #48	; 0x30
   1edfa:	2201      	movs	r2, #1
   1edfc:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1ee00:	1c53      	adds	r3, r2, #1
   1ee02:	bb9c      	cbnz	r4, 1ee6c <__kernel_rem_pio2+0x394>
   1ee04:	461a      	mov	r2, r3
   1ee06:	9b01      	ldr	r3, [sp, #4]
   1ee08:	4293      	cmp	r3, r2
   1ee0a:	d1f7      	bne.n	1edfc <__kernel_rem_pio2+0x324>
   1ee0c:	9b06      	ldr	r3, [sp, #24]
   1ee0e:	2b00      	cmp	r3, #0
   1ee10:	dd0e      	ble.n	1ee30 <__kernel_rem_pio2+0x358>
   1ee12:	2b01      	cmp	r3, #1
   1ee14:	f000 811a 	beq.w	1f04c <__kernel_rem_pio2+0x574>
   1ee18:	2b02      	cmp	r3, #2
   1ee1a:	d109      	bne.n	1ee30 <__kernel_rem_pio2+0x358>
   1ee1c:	9b01      	ldr	r3, [sp, #4]
   1ee1e:	a90c      	add	r1, sp, #48	; 0x30
   1ee20:	1e5a      	subs	r2, r3, #1
   1ee22:	ab0c      	add	r3, sp, #48	; 0x30
   1ee24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ee28:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1ee2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ee30:	2d02      	cmp	r5, #2
   1ee32:	f47f af4c 	bne.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ee36:	4632      	mov	r2, r6
   1ee38:	463b      	mov	r3, r7
   1ee3a:	2000      	movs	r0, #0
   1ee3c:	4998      	ldr	r1, [pc, #608]	; (1f0a0 <__kernel_rem_pio2+0x5c8>)
   1ee3e:	f7fd fb03 	bl	1c448 <__aeabi_dsub>
   1ee42:	4606      	mov	r6, r0
   1ee44:	460f      	mov	r7, r1
   1ee46:	2c00      	cmp	r4, #0
   1ee48:	f43f af41 	beq.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ee4c:	9806      	ldr	r0, [sp, #24]
   1ee4e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1f090 <__kernel_rem_pio2+0x5b8>
   1ee52:	f000 fba5 	bl	1f5a0 <scalbn>
   1ee56:	4630      	mov	r0, r6
   1ee58:	4639      	mov	r1, r7
   1ee5a:	ec53 2b10 	vmov	r2, r3, d0
   1ee5e:	f7fd faf3 	bl	1c448 <__aeabi_dsub>
   1ee62:	4606      	mov	r6, r0
   1ee64:	460f      	mov	r7, r1
   1ee66:	e732      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1ee68:	2301      	movs	r3, #1
   1ee6a:	2200      	movs	r2, #0
   1ee6c:	a90c      	add	r1, sp, #48	; 0x30
   1ee6e:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1ee72:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1ee76:	9901      	ldr	r1, [sp, #4]
   1ee78:	4299      	cmp	r1, r3
   1ee7a:	dd10      	ble.n	1ee9e <__kernel_rem_pio2+0x3c6>
   1ee7c:	a80c      	add	r0, sp, #48	; 0x30
   1ee7e:	aa0c      	add	r2, sp, #48	; 0x30
   1ee80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1ee84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ee88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ee8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1ee90:	e000      	b.n	1ee94 <__kernel_rem_pio2+0x3bc>
   1ee92:	681a      	ldr	r2, [r3, #0]
   1ee94:	1a8a      	subs	r2, r1, r2
   1ee96:	f843 2b04 	str.w	r2, [r3], #4
   1ee9a:	4283      	cmp	r3, r0
   1ee9c:	d1f9      	bne.n	1ee92 <__kernel_rem_pio2+0x3ba>
   1ee9e:	2401      	movs	r4, #1
   1eea0:	e7b4      	b.n	1ee0c <__kernel_rem_pio2+0x334>
   1eea2:	2200      	movs	r2, #0
   1eea4:	4b7f      	ldr	r3, [pc, #508]	; (1f0a4 <__kernel_rem_pio2+0x5cc>)
   1eea6:	f7fd ff0d 	bl	1ccc4 <__aeabi_dcmpge>
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	f040 80d9 	bne.w	1f062 <__kernel_rem_pio2+0x58a>
   1eeb0:	4605      	mov	r5, r0
   1eeb2:	e70c      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1eeb4:	9b01      	ldr	r3, [sp, #4]
   1eeb6:	1c5a      	adds	r2, r3, #1
   1eeb8:	4691      	mov	r9, r2
   1eeba:	9202      	str	r2, [sp, #8]
   1eebc:	e73b      	b.n	1ed36 <__kernel_rem_pio2+0x25e>
   1eebe:	2600      	movs	r6, #0
   1eec0:	2700      	movs	r7, #0
   1eec2:	f109 0908 	add.w	r9, r9, #8
   1eec6:	e8ea 6702 	strd	r6, r7, [sl], #8
   1eeca:	45da      	cmp	sl, fp
   1eecc:	f47f ae55 	bne.w	1eb7a <__kernel_rem_pio2+0xa2>
   1eed0:	e671      	b.n	1ebb6 <__kernel_rem_pio2+0xde>
   1eed2:	9a06      	ldr	r2, [sp, #24]
   1eed4:	ab0c      	add	r3, sp, #48	; 0x30
   1eed6:	f8cd 801c 	str.w	r8, [sp, #28]
   1eeda:	3a18      	subs	r2, #24
   1eedc:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1eee0:	9504      	str	r5, [sp, #16]
   1eee2:	9206      	str	r2, [sp, #24]
   1eee4:	b973      	cbnz	r3, 1ef04 <__kernel_rem_pio2+0x42c>
   1eee6:	4b70      	ldr	r3, [pc, #448]	; (1f0a8 <__kernel_rem_pio2+0x5d0>)
   1eee8:	9901      	ldr	r1, [sp, #4]
   1eeea:	4419      	add	r1, r3
   1eeec:	460b      	mov	r3, r1
   1eeee:	a90c      	add	r1, sp, #48	; 0x30
   1eef0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1eef4:	f853 1904 	ldr.w	r1, [r3], #-4
   1eef8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1eefc:	3a18      	subs	r2, #24
   1eefe:	2900      	cmp	r1, #0
   1ef00:	d0f8      	beq.n	1eef4 <__kernel_rem_pio2+0x41c>
   1ef02:	9206      	str	r2, [sp, #24]
   1ef04:	9806      	ldr	r0, [sp, #24]
   1ef06:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1f090 <__kernel_rem_pio2+0x5b8>
   1ef0a:	f000 fb49 	bl	1f5a0 <scalbn>
   1ef0e:	f1b9 0f00 	cmp.w	r9, #0
   1ef12:	ec55 4b10 	vmov	r4, r5, d0
   1ef16:	f2c0 81da 	blt.w	1f2ce <__kernel_rem_pio2+0x7f6>
   1ef1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1ef1e:	aa70      	add	r2, sp, #448	; 0x1c0
   1ef20:	f109 0601 	add.w	r6, r9, #1
   1ef24:	f04f 0a00 	mov.w	sl, #0
   1ef28:	eb02 0803 	add.w	r8, r2, r3
   1ef2c:	9306      	str	r3, [sp, #24]
   1ef2e:	ab0c      	add	r3, sp, #48	; 0x30
   1ef30:	f8df b178 	ldr.w	fp, [pc, #376]	; 1f0ac <__kernel_rem_pio2+0x5d4>
   1ef34:	f108 0708 	add.w	r7, r8, #8
   1ef38:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1ef3c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1ef40:	f7fd fbd0 	bl	1c6e4 <__aeabi_i2d>
   1ef44:	4622      	mov	r2, r4
   1ef46:	462b      	mov	r3, r5
   1ef48:	f7fd fc36 	bl	1c7b8 <__aeabi_dmul>
   1ef4c:	465b      	mov	r3, fp
   1ef4e:	4652      	mov	r2, sl
   1ef50:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1ef54:	4620      	mov	r0, r4
   1ef56:	4629      	mov	r1, r5
   1ef58:	f7fd fc2e 	bl	1c7b8 <__aeabi_dmul>
   1ef5c:	ab0c      	add	r3, sp, #48	; 0x30
   1ef5e:	4604      	mov	r4, r0
   1ef60:	460d      	mov	r5, r1
   1ef62:	429e      	cmp	r6, r3
   1ef64:	d1ea      	bne.n	1ef3c <__kernel_rem_pio2+0x464>
   1ef66:	ab48      	add	r3, sp, #288	; 0x120
   1ef68:	46c3      	mov	fp, r8
   1ef6a:	f04f 0a00 	mov.w	sl, #0
   1ef6e:	9303      	str	r3, [sp, #12]
   1ef70:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1ef74:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1ef78:	f1b9 0f00 	cmp.w	r9, #0
   1ef7c:	db2b      	blt.n	1efd6 <__kernel_rem_pio2+0x4fe>
   1ef7e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1f0b0 <__kernel_rem_pio2+0x5d8>
   1ef82:	465d      	mov	r5, fp
   1ef84:	2400      	movs	r4, #0
   1ef86:	2600      	movs	r6, #0
   1ef88:	2700      	movs	r7, #0
   1ef8a:	a343      	add	r3, pc, #268	; (adr r3, 1f098 <__kernel_rem_pio2+0x5c0>)
   1ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ef90:	e003      	b.n	1ef9a <__kernel_rem_pio2+0x4c2>
   1ef92:	4554      	cmp	r4, sl
   1ef94:	dc10      	bgt.n	1efb8 <__kernel_rem_pio2+0x4e0>
   1ef96:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1ef9a:	3401      	adds	r4, #1
   1ef9c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1efa0:	f7fd fc0a 	bl	1c7b8 <__aeabi_dmul>
   1efa4:	4602      	mov	r2, r0
   1efa6:	460b      	mov	r3, r1
   1efa8:	4630      	mov	r0, r6
   1efaa:	4639      	mov	r1, r7
   1efac:	f7fd fa4e 	bl	1c44c <__adddf3>
   1efb0:	45a1      	cmp	r9, r4
   1efb2:	4606      	mov	r6, r0
   1efb4:	460f      	mov	r7, r1
   1efb6:	daec      	bge.n	1ef92 <__kernel_rem_pio2+0x4ba>
   1efb8:	9a02      	ldr	r2, [sp, #8]
   1efba:	f1ab 0b08 	sub.w	fp, fp, #8
   1efbe:	9b01      	ldr	r3, [sp, #4]
   1efc0:	4592      	cmp	sl, r2
   1efc2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1efc6:	9301      	str	r3, [sp, #4]
   1efc8:	f10a 0301 	add.w	r3, sl, #1
   1efcc:	d006      	beq.n	1efdc <__kernel_rem_pio2+0x504>
   1efce:	f1b9 0f00 	cmp.w	r9, #0
   1efd2:	469a      	mov	sl, r3
   1efd4:	dad3      	bge.n	1ef7e <__kernel_rem_pio2+0x4a6>
   1efd6:	2600      	movs	r6, #0
   1efd8:	2700      	movs	r7, #0
   1efda:	e7ed      	b.n	1efb8 <__kernel_rem_pio2+0x4e0>
   1efdc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1efde:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1efe2:	2b03      	cmp	r3, #3
   1efe4:	d82b      	bhi.n	1f03e <__kernel_rem_pio2+0x566>
   1efe6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1efea:	00f5      	.short	0x00f5
   1efec:	00e400e4 	.word	0x00e400e4
   1eff0:	0067      	.short	0x0067
   1eff2:	ab48      	add	r3, sp, #288	; 0x120
   1eff4:	2400      	movs	r4, #0
   1eff6:	2500      	movs	r5, #0
   1eff8:	9303      	str	r3, [sp, #12]
   1effa:	9903      	ldr	r1, [sp, #12]
   1effc:	462b      	mov	r3, r5
   1effe:	4622      	mov	r2, r4
   1f000:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f004:	f7fd fa20 	bl	1c448 <__aeabi_dsub>
   1f008:	9b04      	ldr	r3, [sp, #16]
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	f040 813e 	bne.w	1f28c <__kernel_rem_pio2+0x7b4>
   1f010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f012:	f1b9 0f00 	cmp.w	r9, #0
   1f016:	e9c3 4500 	strd	r4, r5, [r3]
   1f01a:	dd0d      	ble.n	1f038 <__kernel_rem_pio2+0x560>
   1f01c:	ad4a      	add	r5, sp, #296	; 0x128
   1f01e:	2401      	movs	r4, #1
   1f020:	3401      	adds	r4, #1
   1f022:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1f026:	f7fd fa11 	bl	1c44c <__adddf3>
   1f02a:	45a1      	cmp	r9, r4
   1f02c:	daf8      	bge.n	1f020 <__kernel_rem_pio2+0x548>
   1f02e:	9b04      	ldr	r3, [sp, #16]
   1f030:	b113      	cbz	r3, 1f038 <__kernel_rem_pio2+0x560>
   1f032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f036:	4619      	mov	r1, r3
   1f038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f03a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1f03e:	9b07      	ldr	r3, [sp, #28]
   1f040:	f003 0007 	and.w	r0, r3, #7
   1f044:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f04c:	9b01      	ldr	r3, [sp, #4]
   1f04e:	a90c      	add	r1, sp, #48	; 0x30
   1f050:	1e5a      	subs	r2, r3, #1
   1f052:	ab0c      	add	r3, sp, #48	; 0x30
   1f054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f058:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1f05c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1f060:	e6e6      	b.n	1ee30 <__kernel_rem_pio2+0x358>
   1f062:	9b01      	ldr	r3, [sp, #4]
   1f064:	f108 0801 	add.w	r8, r8, #1
   1f068:	2502      	movs	r5, #2
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	f73f aebe 	bgt.w	1edec <__kernel_rem_pio2+0x314>
   1f070:	4632      	mov	r2, r6
   1f072:	463b      	mov	r3, r7
   1f074:	2000      	movs	r0, #0
   1f076:	490a      	ldr	r1, [pc, #40]	; (1f0a0 <__kernel_rem_pio2+0x5c8>)
   1f078:	f7fd f9e6 	bl	1c448 <__aeabi_dsub>
   1f07c:	4606      	mov	r6, r0
   1f07e:	460f      	mov	r7, r1
   1f080:	e625      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1f082:	2100      	movs	r1, #0
   1f084:	f06f 0317 	mvn.w	r3, #23
   1f088:	9107      	str	r1, [sp, #28]
   1f08a:	e545      	b.n	1eb18 <__kernel_rem_pio2+0x40>
   1f08c:	f3af 8000 	nop.w
   1f090:	00000000 	.word	0x00000000
   1f094:	3ff00000 	.word	0x3ff00000
   1f098:	40000000 	.word	0x40000000
   1f09c:	3ff921fb 	.word	0x3ff921fb
   1f0a0:	3ff00000 	.word	0x3ff00000
   1f0a4:	3fe00000 	.word	0x3fe00000
   1f0a8:	3ffffffe 	.word	0x3ffffffe
   1f0ac:	3e700000 	.word	0x3e700000
   1f0b0:	00046a60 	.word	0x00046a60
   1f0b4:	ab48      	add	r3, sp, #288	; 0x120
   1f0b6:	9303      	str	r3, [sp, #12]
   1f0b8:	f1b9 0f00 	cmp.w	r9, #0
   1f0bc:	f340 8119 	ble.w	1f2f2 <__kernel_rem_pio2+0x81a>
   1f0c0:	9a03      	ldr	r2, [sp, #12]
   1f0c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1f0c6:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1f0ca:	9301      	str	r3, [sp, #4]
   1f0cc:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1f0d0:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1f0d4:	4652      	mov	r2, sl
   1f0d6:	465b      	mov	r3, fp
   1f0d8:	4630      	mov	r0, r6
   1f0da:	4639      	mov	r1, r7
   1f0dc:	f7fd f9b6 	bl	1c44c <__adddf3>
   1f0e0:	4604      	mov	r4, r0
   1f0e2:	460d      	mov	r5, r1
   1f0e4:	4602      	mov	r2, r0
   1f0e6:	460b      	mov	r3, r1
   1f0e8:	4630      	mov	r0, r6
   1f0ea:	4639      	mov	r1, r7
   1f0ec:	f7fd f9ac 	bl	1c448 <__aeabi_dsub>
   1f0f0:	465b      	mov	r3, fp
   1f0f2:	4652      	mov	r2, sl
   1f0f4:	46ab      	mov	fp, r5
   1f0f6:	f7fd f9a9 	bl	1c44c <__adddf3>
   1f0fa:	9b03      	ldr	r3, [sp, #12]
   1f0fc:	46a2      	mov	sl, r4
   1f0fe:	4543      	cmp	r3, r8
   1f100:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1f104:	e9c8 4500 	strd	r4, r5, [r8]
   1f108:	d1e2      	bne.n	1f0d0 <__kernel_rem_pio2+0x5f8>
   1f10a:	f1b9 0f01 	cmp.w	r9, #1
   1f10e:	f340 80f0 	ble.w	1f2f2 <__kernel_rem_pio2+0x81a>
   1f112:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1f116:	9b01      	ldr	r3, [sp, #4]
   1f118:	9903      	ldr	r1, [sp, #12]
   1f11a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1f11e:	444a      	add	r2, r9
   1f120:	440b      	add	r3, r1
   1f122:	00d2      	lsls	r2, r2, #3
   1f124:	f102 0b08 	add.w	fp, r2, #8
   1f128:	9201      	str	r2, [sp, #4]
   1f12a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1f12e:	448b      	add	fp, r1
   1f130:	4632      	mov	r2, r6
   1f132:	463b      	mov	r3, r7
   1f134:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1f138:	4640      	mov	r0, r8
   1f13a:	4649      	mov	r1, r9
   1f13c:	f7fd f986 	bl	1c44c <__adddf3>
   1f140:	4604      	mov	r4, r0
   1f142:	460d      	mov	r5, r1
   1f144:	4602      	mov	r2, r0
   1f146:	460b      	mov	r3, r1
   1f148:	4640      	mov	r0, r8
   1f14a:	4649      	mov	r1, r9
   1f14c:	f7fd f97c 	bl	1c448 <__aeabi_dsub>
   1f150:	4632      	mov	r2, r6
   1f152:	463b      	mov	r3, r7
   1f154:	4626      	mov	r6, r4
   1f156:	f7fd f979 	bl	1c44c <__adddf3>
   1f15a:	45da      	cmp	sl, fp
   1f15c:	462f      	mov	r7, r5
   1f15e:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1f162:	e9cb 4500 	strd	r4, r5, [fp]
   1f166:	d1e3      	bne.n	1f130 <__kernel_rem_pio2+0x658>
   1f168:	9c01      	ldr	r4, [sp, #4]
   1f16a:	2000      	movs	r0, #0
   1f16c:	9b03      	ldr	r3, [sp, #12]
   1f16e:	2100      	movs	r1, #0
   1f170:	3410      	adds	r4, #16
   1f172:	f103 0510 	add.w	r5, r3, #16
   1f176:	441c      	add	r4, r3
   1f178:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1f17c:	f7fd f966 	bl	1c44c <__adddf3>
   1f180:	42a5      	cmp	r5, r4
   1f182:	d1f9      	bne.n	1f178 <__kernel_rem_pio2+0x6a0>
   1f184:	9c03      	ldr	r4, [sp, #12]
   1f186:	9e04      	ldr	r6, [sp, #16]
   1f188:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f18c:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1f190:	2e00      	cmp	r6, #0
   1f192:	f040 8086 	bne.w	1f2a2 <__kernel_rem_pio2+0x7ca>
   1f196:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f198:	e9c6 2300 	strd	r2, r3, [r6]
   1f19c:	9b07      	ldr	r3, [sp, #28]
   1f19e:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f1a2:	f003 0007 	and.w	r0, r3, #7
   1f1a6:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1f1aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b2:	9e06      	ldr	r6, [sp, #24]
   1f1b4:	2400      	movs	r4, #0
   1f1b6:	9f03      	ldr	r7, [sp, #12]
   1f1b8:	2500      	movs	r5, #0
   1f1ba:	3608      	adds	r6, #8
   1f1bc:	443e      	add	r6, r7
   1f1be:	4620      	mov	r0, r4
   1f1c0:	4629      	mov	r1, r5
   1f1c2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1f1c6:	f7fd f941 	bl	1c44c <__adddf3>
   1f1ca:	4604      	mov	r4, r0
   1f1cc:	42b7      	cmp	r7, r6
   1f1ce:	460d      	mov	r5, r1
   1f1d0:	d1f5      	bne.n	1f1be <__kernel_rem_pio2+0x6e6>
   1f1d2:	e712      	b.n	1effa <__kernel_rem_pio2+0x522>
   1f1d4:	9c06      	ldr	r4, [sp, #24]
   1f1d6:	2000      	movs	r0, #0
   1f1d8:	9d03      	ldr	r5, [sp, #12]
   1f1da:	2100      	movs	r1, #0
   1f1dc:	3408      	adds	r4, #8
   1f1de:	442c      	add	r4, r5
   1f1e0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1f1e4:	f7fd f932 	bl	1c44c <__adddf3>
   1f1e8:	42a5      	cmp	r5, r4
   1f1ea:	d1f9      	bne.n	1f1e0 <__kernel_rem_pio2+0x708>
   1f1ec:	9b04      	ldr	r3, [sp, #16]
   1f1ee:	b113      	cbz	r3, 1f1f6 <__kernel_rem_pio2+0x71e>
   1f1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f1f4:	4619      	mov	r1, r3
   1f1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f1f8:	e9c3 0100 	strd	r0, r1, [r3]
   1f1fc:	9b07      	ldr	r3, [sp, #28]
   1f1fe:	f003 0007 	and.w	r0, r3, #7
   1f202:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f20a:	2400      	movs	r4, #0
   1f20c:	e5fe      	b.n	1ee0c <__kernel_rem_pio2+0x334>
   1f20e:	9c06      	ldr	r4, [sp, #24]
   1f210:	f8cd 801c 	str.w	r8, [sp, #28]
   1f214:	4260      	negs	r0, r4
   1f216:	9504      	str	r5, [sp, #16]
   1f218:	ec47 6b10 	vmov	d0, r6, r7
   1f21c:	f000 f9c0 	bl	1f5a0 <scalbn>
   1f220:	2200      	movs	r2, #0
   1f222:	ee10 0a10 	vmov	r0, s0
   1f226:	4b34      	ldr	r3, [pc, #208]	; (1f2f8 <__kernel_rem_pio2+0x820>)
   1f228:	ec57 6b10 	vmov	r6, r7, d0
   1f22c:	4639      	mov	r1, r7
   1f22e:	f7fd fd49 	bl	1ccc4 <__aeabi_dcmpge>
   1f232:	b308      	cbz	r0, 1f278 <__kernel_rem_pio2+0x7a0>
   1f234:	3418      	adds	r4, #24
   1f236:	2200      	movs	r2, #0
   1f238:	4b30      	ldr	r3, [pc, #192]	; (1f2fc <__kernel_rem_pio2+0x824>)
   1f23a:	4630      	mov	r0, r6
   1f23c:	4639      	mov	r1, r7
   1f23e:	9406      	str	r4, [sp, #24]
   1f240:	f7fd faba 	bl	1c7b8 <__aeabi_dmul>
   1f244:	9d01      	ldr	r5, [sp, #4]
   1f246:	f7fd fd51 	bl	1ccec <__aeabi_d2iz>
   1f24a:	4604      	mov	r4, r0
   1f24c:	f7fd fa4a 	bl	1c6e4 <__aeabi_i2d>
   1f250:	2200      	movs	r2, #0
   1f252:	4b29      	ldr	r3, [pc, #164]	; (1f2f8 <__kernel_rem_pio2+0x820>)
   1f254:	f105 0901 	add.w	r9, r5, #1
   1f258:	f7fd faae 	bl	1c7b8 <__aeabi_dmul>
   1f25c:	460b      	mov	r3, r1
   1f25e:	4602      	mov	r2, r0
   1f260:	4639      	mov	r1, r7
   1f262:	4630      	mov	r0, r6
   1f264:	f7fd f8f0 	bl	1c448 <__aeabi_dsub>
   1f268:	f7fd fd40 	bl	1ccec <__aeabi_d2iz>
   1f26c:	ab0c      	add	r3, sp, #48	; 0x30
   1f26e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1f272:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1f276:	e645      	b.n	1ef04 <__kernel_rem_pio2+0x42c>
   1f278:	4630      	mov	r0, r6
   1f27a:	4639      	mov	r1, r7
   1f27c:	9c01      	ldr	r4, [sp, #4]
   1f27e:	f7fd fd35 	bl	1ccec <__aeabi_d2iz>
   1f282:	aa0c      	add	r2, sp, #48	; 0x30
   1f284:	46a1      	mov	r9, r4
   1f286:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1f28a:	e63b      	b.n	1ef04 <__kernel_rem_pio2+0x42c>
   1f28c:	4622      	mov	r2, r4
   1f28e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1f292:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f294:	f1b9 0f00 	cmp.w	r9, #0
   1f298:	e9c4 2300 	strd	r2, r3, [r4]
   1f29c:	f73f aebe 	bgt.w	1f01c <__kernel_rem_pio2+0x544>
   1f2a0:	e6c7      	b.n	1f032 <__kernel_rem_pio2+0x55a>
   1f2a2:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1f2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f2aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f2ac:	4626      	mov	r6, r4
   1f2ae:	4694      	mov	ip, r2
   1f2b0:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1f2b4:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1f2b8:	9b07      	ldr	r3, [sp, #28]
   1f2ba:	f003 0007 	and.w	r0, r3, #7
   1f2be:	e9c1 c700 	strd	ip, r7, [r1]
   1f2c2:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1f2c6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1f2d0:	2b03      	cmp	r3, #3
   1f2d2:	f63f aeb4 	bhi.w	1f03e <__kernel_rem_pio2+0x566>
   1f2d6:	a201      	add	r2, pc, #4	; (adr r2, 1f2dc <__kernel_rem_pio2+0x804>)
   1f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f2dc:	0001f2ed 	.word	0x0001f2ed
   1f2e0:	0001eff3 	.word	0x0001eff3
   1f2e4:	0001eff3 	.word	0x0001eff3
   1f2e8:	0001f0b5 	.word	0x0001f0b5
   1f2ec:	2000      	movs	r0, #0
   1f2ee:	2100      	movs	r1, #0
   1f2f0:	e77c      	b.n	1f1ec <__kernel_rem_pio2+0x714>
   1f2f2:	2000      	movs	r0, #0
   1f2f4:	2100      	movs	r1, #0
   1f2f6:	e745      	b.n	1f184 <__kernel_rem_pio2+0x6ac>
   1f2f8:	41700000 	.word	0x41700000
   1f2fc:	3e700000 	.word	0x3e700000

0001f300 <__kernel_sin>:
   1f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f304:	ec55 4b10 	vmov	r4, r5, d0
   1f308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1f30c:	4682      	mov	sl, r0
   1f30e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f312:	ed2d 8b02 	vpush	{d8}
   1f316:	eeb0 8a41 	vmov.f32	s16, s2
   1f31a:	eef0 8a61 	vmov.f32	s17, s3
   1f31e:	b083      	sub	sp, #12
   1f320:	da07      	bge.n	1f332 <__kernel_sin+0x32>
   1f322:	ee10 0a10 	vmov	r0, s0
   1f326:	4629      	mov	r1, r5
   1f328:	f7fd fce0 	bl	1ccec <__aeabi_d2iz>
   1f32c:	2800      	cmp	r0, #0
   1f32e:	f000 808e 	beq.w	1f44e <__kernel_ram_size+0xce>
   1f332:	4622      	mov	r2, r4
   1f334:	462b      	mov	r3, r5
   1f336:	4620      	mov	r0, r4
   1f338:	4629      	mov	r1, r5
   1f33a:	f7fd fa3d 	bl	1c7b8 <__aeabi_dmul>
   1f33e:	4606      	mov	r6, r0
   1f340:	460f      	mov	r7, r1
   1f342:	4602      	mov	r2, r0
   1f344:	460b      	mov	r3, r1
   1f346:	4620      	mov	r0, r4
   1f348:	4629      	mov	r1, r5
   1f34a:	f7fd fa35 	bl	1c7b8 <__aeabi_dmul>
   1f34e:	4680      	mov	r8, r0
   1f350:	4689      	mov	r9, r1
   1f352:	4630      	mov	r0, r6
   1f354:	4639      	mov	r1, r7
   1f356:	a345      	add	r3, pc, #276	; (adr r3, 1f46c <__kernel_ram_size+0xec>)
   1f358:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f35c:	f7fd fa2c 	bl	1c7b8 <__aeabi_dmul>
   1f360:	a344      	add	r3, pc, #272	; (adr r3, 1f474 <__kernel_ram_size+0xf4>)
   1f362:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f366:	f7fd f86f 	bl	1c448 <__aeabi_dsub>
   1f36a:	4632      	mov	r2, r6
   1f36c:	463b      	mov	r3, r7
   1f36e:	f7fd fa23 	bl	1c7b8 <__aeabi_dmul>
   1f372:	a342      	add	r3, pc, #264	; (adr r3, 1f47c <__kernel_ram_size+0xfc>)
   1f374:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f378:	f7fd f868 	bl	1c44c <__adddf3>
   1f37c:	4632      	mov	r2, r6
   1f37e:	463b      	mov	r3, r7
   1f380:	f7fd fa1a 	bl	1c7b8 <__aeabi_dmul>
   1f384:	a33f      	add	r3, pc, #252	; (adr r3, 1f484 <__kernel_ram_size+0x104>)
   1f386:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f38a:	f7fd f85d 	bl	1c448 <__aeabi_dsub>
   1f38e:	4632      	mov	r2, r6
   1f390:	463b      	mov	r3, r7
   1f392:	f7fd fa11 	bl	1c7b8 <__aeabi_dmul>
   1f396:	a33d      	add	r3, pc, #244	; (adr r3, 1f48c <__kernel_ram_size+0x10c>)
   1f398:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f39c:	f7fd f856 	bl	1c44c <__adddf3>
   1f3a0:	e9cd 0100 	strd	r0, r1, [sp]
   1f3a4:	f1ba 0f00 	cmp.w	sl, #0
   1f3a8:	d037      	beq.n	1f41a <__kernel_ram_size+0x9a>
   1f3aa:	2200      	movs	r2, #0
   1f3ac:	4b2e      	ldr	r3, [pc, #184]	; (1f468 <__kernel_ram_size+0xe8>)
   1f3ae:	ec51 0b18 	vmov	r0, r1, d8
   1f3b2:	f7fd fa01 	bl	1c7b8 <__aeabi_dmul>
   1f3b6:	4682      	mov	sl, r0
   1f3b8:	468b      	mov	fp, r1
   1f3ba:	4640      	mov	r0, r8
   1f3bc:	4649      	mov	r1, r9
   1f3be:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f3c2:	f7fd f9f9 	bl	1c7b8 <__aeabi_dmul>
   1f3c6:	4602      	mov	r2, r0
   1f3c8:	460b      	mov	r3, r1
   1f3ca:	4650      	mov	r0, sl
   1f3cc:	4659      	mov	r1, fp
   1f3ce:	f7fd f83b 	bl	1c448 <__aeabi_dsub>
   1f3d2:	4632      	mov	r2, r6
   1f3d4:	463b      	mov	r3, r7
   1f3d6:	f7fd f9ef 	bl	1c7b8 <__aeabi_dmul>
   1f3da:	ec53 2b18 	vmov	r2, r3, d8
   1f3de:	f7fd f833 	bl	1c448 <__aeabi_dsub>
   1f3e2:	4606      	mov	r6, r0
   1f3e4:	460f      	mov	r7, r1
   1f3e6:	4640      	mov	r0, r8
   1f3e8:	4649      	mov	r1, r9
   1f3ea:	a31d      	add	r3, pc, #116	; (adr r3, 1f460 <__kernel_ram_size+0xe0>)
   1f3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3f0:	f7fd f9e2 	bl	1c7b8 <__aeabi_dmul>
   1f3f4:	4602      	mov	r2, r0
   1f3f6:	460b      	mov	r3, r1
   1f3f8:	4630      	mov	r0, r6
   1f3fa:	4639      	mov	r1, r7
   1f3fc:	f7fd f826 	bl	1c44c <__adddf3>
   1f400:	4602      	mov	r2, r0
   1f402:	460b      	mov	r3, r1
   1f404:	4620      	mov	r0, r4
   1f406:	4629      	mov	r1, r5
   1f408:	f7fd f81e 	bl	1c448 <__aeabi_dsub>
   1f40c:	ec41 0b10 	vmov	d0, r0, r1
   1f410:	b003      	add	sp, #12
   1f412:	ecbd 8b02 	vpop	{d8}
   1f416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f41a:	4602      	mov	r2, r0
   1f41c:	460b      	mov	r3, r1
   1f41e:	4630      	mov	r0, r6
   1f420:	4639      	mov	r1, r7
   1f422:	f7fd f9c9 	bl	1c7b8 <__aeabi_dmul>
   1f426:	a30e      	add	r3, pc, #56	; (adr r3, 1f460 <__kernel_ram_size+0xe0>)
   1f428:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f42c:	f7fd f80c 	bl	1c448 <__aeabi_dsub>
   1f430:	4642      	mov	r2, r8
   1f432:	464b      	mov	r3, r9
   1f434:	f7fd f9c0 	bl	1c7b8 <__aeabi_dmul>
   1f438:	4622      	mov	r2, r4
   1f43a:	462b      	mov	r3, r5
   1f43c:	f7fd f806 	bl	1c44c <__adddf3>
   1f440:	ec41 0b10 	vmov	d0, r0, r1
   1f444:	b003      	add	sp, #12
   1f446:	ecbd 8b02 	vpop	{d8}
   1f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f44e:	ec45 4b10 	vmov	d0, r4, r5
   1f452:	b003      	add	sp, #12
   1f454:	ecbd 8b02 	vpop	{d8}
   1f458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f45c:	f3af 8000 	nop.w
   1f460:	55555549 	.word	0x55555549
   1f464:	3fc55555 	.word	0x3fc55555
   1f468:	3fe00000 	.word	0x3fe00000
   1f46c:	5acfd57c 	.word	0x5acfd57c
   1f470:	3de5d93a 	.word	0x3de5d93a
   1f474:	8a2b9ceb 	.word	0x8a2b9ceb
   1f478:	3e5ae5e6 	.word	0x3e5ae5e6
   1f47c:	57b1fe7d 	.word	0x57b1fe7d
   1f480:	3ec71de3 	.word	0x3ec71de3
   1f484:	19c161d5 	.word	0x19c161d5
   1f488:	3f2a01a0 	.word	0x3f2a01a0
   1f48c:	1110f8a6 	.word	0x1110f8a6
   1f490:	3f811111 	.word	0x3f811111
   1f494:	00000000 	.word	0x00000000

0001f498 <floor>:
   1f498:	ec51 0b10 	vmov	r0, r1, d0
   1f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f49e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1f4a2:	460c      	mov	r4, r1
   1f4a4:	ee10 6a10 	vmov	r6, s0
   1f4a8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1f4ac:	2d13      	cmp	r5, #19
   1f4ae:	dc30      	bgt.n	1f512 <floor+0x7a>
   1f4b0:	2d00      	cmp	r5, #0
   1f4b2:	db1e      	blt.n	1f4f2 <floor+0x5a>
   1f4b4:	4f38      	ldr	r7, [pc, #224]	; (1f598 <floor+0x100>)
   1f4b6:	412f      	asrs	r7, r5
   1f4b8:	ea07 0301 	and.w	r3, r7, r1
   1f4bc:	4303      	orrs	r3, r0
   1f4be:	d02d      	beq.n	1f51c <floor+0x84>
   1f4c0:	a333      	add	r3, pc, #204	; (adr r3, 1f590 <floor+0xf8>)
   1f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4c6:	f7fc ffc1 	bl	1c44c <__adddf3>
   1f4ca:	2200      	movs	r2, #0
   1f4cc:	2300      	movs	r3, #0
   1f4ce:	f7fd fc03 	bl	1ccd8 <__aeabi_dcmpgt>
   1f4d2:	b148      	cbz	r0, 1f4e8 <floor+0x50>
   1f4d4:	2c00      	cmp	r4, #0
   1f4d6:	da04      	bge.n	1f4e2 <floor+0x4a>
   1f4d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f4dc:	fa43 f505 	asr.w	r5, r3, r5
   1f4e0:	442c      	add	r4, r5
   1f4e2:	ea24 0407 	bic.w	r4, r4, r7
   1f4e6:	2600      	movs	r6, #0
   1f4e8:	4623      	mov	r3, r4
   1f4ea:	4632      	mov	r2, r6
   1f4ec:	ec43 2b10 	vmov	d0, r2, r3
   1f4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4f2:	a327      	add	r3, pc, #156	; (adr r3, 1f590 <floor+0xf8>)
   1f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4f8:	f7fc ffa8 	bl	1c44c <__adddf3>
   1f4fc:	2200      	movs	r2, #0
   1f4fe:	2300      	movs	r3, #0
   1f500:	f7fd fbea 	bl	1ccd8 <__aeabi_dcmpgt>
   1f504:	2800      	cmp	r0, #0
   1f506:	d0ef      	beq.n	1f4e8 <floor+0x50>
   1f508:	2c00      	cmp	r4, #0
   1f50a:	db29      	blt.n	1f560 <floor+0xc8>
   1f50c:	2600      	movs	r6, #0
   1f50e:	4634      	mov	r4, r6
   1f510:	e7ea      	b.n	1f4e8 <floor+0x50>
   1f512:	2d33      	cmp	r5, #51	; 0x33
   1f514:	dd05      	ble.n	1f522 <floor+0x8a>
   1f516:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1f51a:	d019      	beq.n	1f550 <floor+0xb8>
   1f51c:	ec41 0b10 	vmov	d0, r0, r1
   1f520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f522:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1f526:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f52a:	40df      	lsrs	r7, r3
   1f52c:	4207      	tst	r7, r0
   1f52e:	d0f5      	beq.n	1f51c <floor+0x84>
   1f530:	a317      	add	r3, pc, #92	; (adr r3, 1f590 <floor+0xf8>)
   1f532:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f536:	f7fc ff89 	bl	1c44c <__adddf3>
   1f53a:	2200      	movs	r2, #0
   1f53c:	2300      	movs	r3, #0
   1f53e:	f7fd fbcb 	bl	1ccd8 <__aeabi_dcmpgt>
   1f542:	2800      	cmp	r0, #0
   1f544:	d0d0      	beq.n	1f4e8 <floor+0x50>
   1f546:	2c00      	cmp	r4, #0
   1f548:	db13      	blt.n	1f572 <floor+0xda>
   1f54a:	ea26 0607 	bic.w	r6, r6, r7
   1f54e:	e7cb      	b.n	1f4e8 <floor+0x50>
   1f550:	ee10 2a10 	vmov	r2, s0
   1f554:	460b      	mov	r3, r1
   1f556:	f7fc ff79 	bl	1c44c <__adddf3>
   1f55a:	ec41 0b10 	vmov	d0, r0, r1
   1f55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f560:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1f564:	4a0d      	ldr	r2, [pc, #52]	; (1f59c <floor+0x104>)
   1f566:	4333      	orrs	r3, r6
   1f568:	2600      	movs	r6, #0
   1f56a:	42b3      	cmp	r3, r6
   1f56c:	bf18      	it	ne
   1f56e:	4614      	movne	r4, r2
   1f570:	e7ba      	b.n	1f4e8 <floor+0x50>
   1f572:	2d14      	cmp	r5, #20
   1f574:	d008      	beq.n	1f588 <floor+0xf0>
   1f576:	2301      	movs	r3, #1
   1f578:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1f57c:	fa03 f505 	lsl.w	r5, r3, r5
   1f580:	19ae      	adds	r6, r5, r6
   1f582:	bf28      	it	cs
   1f584:	18e4      	addcs	r4, r4, r3
   1f586:	e7e0      	b.n	1f54a <floor+0xb2>
   1f588:	3401      	adds	r4, #1
   1f58a:	e7de      	b.n	1f54a <floor+0xb2>
   1f58c:	f3af 8000 	nop.w
   1f590:	8800759c 	.word	0x8800759c
   1f594:	7e37e43c 	.word	0x7e37e43c
   1f598:	000fffff 	.word	0x000fffff
   1f59c:	bff00000 	.word	0xbff00000

0001f5a0 <scalbn>:
   1f5a0:	b538      	push	{r3, r4, r5, lr}
   1f5a2:	ec53 2b10 	vmov	r2, r3, d0
   1f5a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1f5aa:	461c      	mov	r4, r3
   1f5ac:	4605      	mov	r5, r0
   1f5ae:	bb81      	cbnz	r1, 1f612 <scalbn+0x72>
   1f5b0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1f5b4:	ee10 1a10 	vmov	r1, s0
   1f5b8:	4321      	orrs	r1, r4
   1f5ba:	d029      	beq.n	1f610 <scalbn+0x70>
   1f5bc:	4c3c      	ldr	r4, [pc, #240]	; (1f6b0 <scalbn+0x110>)
   1f5be:	4619      	mov	r1, r3
   1f5c0:	2200      	movs	r2, #0
   1f5c2:	4b3c      	ldr	r3, [pc, #240]	; (1f6b4 <scalbn+0x114>)
   1f5c4:	ee10 0a10 	vmov	r0, s0
   1f5c8:	f7fd f8f6 	bl	1c7b8 <__aeabi_dmul>
   1f5cc:	42a5      	cmp	r5, r4
   1f5ce:	4602      	mov	r2, r0
   1f5d0:	460b      	mov	r3, r1
   1f5d2:	db16      	blt.n	1f602 <scalbn+0x62>
   1f5d4:	460c      	mov	r4, r1
   1f5d6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1f5da:	3936      	subs	r1, #54	; 0x36
   1f5dc:	4429      	add	r1, r5
   1f5de:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1f5e2:	4281      	cmp	r1, r0
   1f5e4:	dc21      	bgt.n	1f62a <scalbn+0x8a>
   1f5e6:	2900      	cmp	r1, #0
   1f5e8:	dc45      	bgt.n	1f676 <scalbn+0xd6>
   1f5ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1f5ee:	da34      	bge.n	1f65a <scalbn+0xba>
   1f5f0:	f24c 3150 	movw	r1, #50000	; 0xc350
   1f5f4:	428d      	cmp	r5, r1
   1f5f6:	dc18      	bgt.n	1f62a <scalbn+0x8a>
   1f5f8:	2b00      	cmp	r3, #0
   1f5fa:	a125      	add	r1, pc, #148	; (adr r1, 1f690 <scalbn+0xf0>)
   1f5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f600:	db40      	blt.n	1f684 <scalbn+0xe4>
   1f602:	a323      	add	r3, pc, #140	; (adr r3, 1f690 <scalbn+0xf0>)
   1f604:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f608:	f7fd f8d6 	bl	1c7b8 <__aeabi_dmul>
   1f60c:	ec41 0b10 	vmov	d0, r0, r1
   1f610:	bd38      	pop	{r3, r4, r5, pc}
   1f612:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1f616:	4281      	cmp	r1, r0
   1f618:	d1e0      	bne.n	1f5dc <scalbn+0x3c>
   1f61a:	ee10 0a10 	vmov	r0, s0
   1f61e:	4619      	mov	r1, r3
   1f620:	f7fc ff14 	bl	1c44c <__adddf3>
   1f624:	ec41 0b10 	vmov	d0, r0, r1
   1f628:	bd38      	pop	{r3, r4, r5, pc}
   1f62a:	2b00      	cmp	r3, #0
   1f62c:	a11a      	add	r1, pc, #104	; (adr r1, 1f698 <scalbn+0xf8>)
   1f62e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f632:	db07      	blt.n	1f644 <scalbn+0xa4>
   1f634:	a318      	add	r3, pc, #96	; (adr r3, 1f698 <scalbn+0xf8>)
   1f636:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f63a:	f7fd f8bd 	bl	1c7b8 <__aeabi_dmul>
   1f63e:	ec41 0b10 	vmov	d0, r0, r1
   1f642:	bd38      	pop	{r3, r4, r5, pc}
   1f644:	a116      	add	r1, pc, #88	; (adr r1, 1f6a0 <scalbn+0x100>)
   1f646:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f64a:	a313      	add	r3, pc, #76	; (adr r3, 1f698 <scalbn+0xf8>)
   1f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f650:	f7fd f8b2 	bl	1c7b8 <__aeabi_dmul>
   1f654:	ec41 0b10 	vmov	d0, r0, r1
   1f658:	e7f3      	b.n	1f642 <scalbn+0xa2>
   1f65a:	4817      	ldr	r0, [pc, #92]	; (1f6b8 <scalbn+0x118>)
   1f65c:	3136      	adds	r1, #54	; 0x36
   1f65e:	4020      	ands	r0, r4
   1f660:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f664:	4610      	mov	r0, r2
   1f666:	2200      	movs	r2, #0
   1f668:	4619      	mov	r1, r3
   1f66a:	4b14      	ldr	r3, [pc, #80]	; (1f6bc <scalbn+0x11c>)
   1f66c:	f7fd f8a4 	bl	1c7b8 <__aeabi_dmul>
   1f670:	ec41 0b10 	vmov	d0, r0, r1
   1f674:	bd38      	pop	{r3, r4, r5, pc}
   1f676:	4810      	ldr	r0, [pc, #64]	; (1f6b8 <scalbn+0x118>)
   1f678:	4020      	ands	r0, r4
   1f67a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f67e:	ec43 2b10 	vmov	d0, r2, r3
   1f682:	bd38      	pop	{r3, r4, r5, pc}
   1f684:	a108      	add	r1, pc, #32	; (adr r1, 1f6a8 <scalbn+0x108>)
   1f686:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f68a:	e7ba      	b.n	1f602 <scalbn+0x62>
   1f68c:	f3af 8000 	nop.w
   1f690:	c2f8f359 	.word	0xc2f8f359
   1f694:	01a56e1f 	.word	0x01a56e1f
   1f698:	8800759c 	.word	0x8800759c
   1f69c:	7e37e43c 	.word	0x7e37e43c
   1f6a0:	8800759c 	.word	0x8800759c
   1f6a4:	fe37e43c 	.word	0xfe37e43c
   1f6a8:	c2f8f359 	.word	0xc2f8f359
   1f6ac:	81a56e1f 	.word	0x81a56e1f
   1f6b0:	ffff3cb0 	.word	0xffff3cb0
   1f6b4:	43500000 	.word	0x43500000
   1f6b8:	800fffff 	.word	0x800fffff
   1f6bc:	3c900000 	.word	0x3c900000

0001f6c0 <_strtod_l>:
   1f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6c4:	461f      	mov	r7, r3
   1f6c6:	b0a1      	sub	sp, #132	; 0x84
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	460e      	mov	r6, r1
   1f6cc:	9004      	str	r0, [sp, #16]
   1f6ce:	f04f 0a00 	mov.w	sl, #0
   1f6d2:	931c      	str	r3, [sp, #112]	; 0x70
   1f6d4:	f04f 0b00 	mov.w	fp, #0
   1f6d8:	4b97      	ldr	r3, [pc, #604]	; (1f938 <_strtod_l+0x278>)
   1f6da:	9217      	str	r2, [sp, #92]	; 0x5c
   1f6dc:	681b      	ldr	r3, [r3, #0]
   1f6de:	4618      	mov	r0, r3
   1f6e0:	9305      	str	r3, [sp, #20]
   1f6e2:	f7fd fdbf 	bl	1d264 <strlen>
   1f6e6:	4604      	mov	r4, r0
   1f6e8:	961b      	str	r6, [sp, #108]	; 0x6c
   1f6ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1f6ec:	7813      	ldrb	r3, [r2, #0]
   1f6ee:	2b0d      	cmp	r3, #13
   1f6f0:	d832      	bhi.n	1f758 <_strtod_l+0x98>
   1f6f2:	2b09      	cmp	r3, #9
   1f6f4:	d236      	bcs.n	1f764 <_strtod_l+0xa4>
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d03e      	beq.n	1f778 <_strtod_l+0xb8>
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	930c      	str	r3, [sp, #48]	; 0x30
   1f6fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1f700:	782b      	ldrb	r3, [r5, #0]
   1f702:	2b30      	cmp	r3, #48	; 0x30
   1f704:	f040 80a9 	bne.w	1f85a <_strtod_l+0x19a>
   1f708:	786b      	ldrb	r3, [r5, #1]
   1f70a:	2b58      	cmp	r3, #88	; 0x58
   1f70c:	d001      	beq.n	1f712 <_strtod_l+0x52>
   1f70e:	2b78      	cmp	r3, #120	; 0x78
   1f710:	d167      	bne.n	1f7e2 <_strtod_l+0x122>
   1f712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f714:	a91b      	add	r1, sp, #108	; 0x6c
   1f716:	9702      	str	r7, [sp, #8]
   1f718:	9301      	str	r3, [sp, #4]
   1f71a:	ab1c      	add	r3, sp, #112	; 0x70
   1f71c:	4a87      	ldr	r2, [pc, #540]	; (1f93c <_strtod_l+0x27c>)
   1f71e:	9300      	str	r3, [sp, #0]
   1f720:	ab1d      	add	r3, sp, #116	; 0x74
   1f722:	9804      	ldr	r0, [sp, #16]
   1f724:	f021 f984 	bl	40a30 <__gethex>
   1f728:	f010 0407 	ands.w	r4, r0, #7
   1f72c:	4606      	mov	r6, r0
   1f72e:	d005      	beq.n	1f73c <_strtod_l+0x7c>
   1f730:	2c06      	cmp	r4, #6
   1f732:	d12b      	bne.n	1f78c <_strtod_l+0xcc>
   1f734:	3501      	adds	r5, #1
   1f736:	2300      	movs	r3, #0
   1f738:	951b      	str	r5, [sp, #108]	; 0x6c
   1f73a:	930c      	str	r3, [sp, #48]	; 0x30
   1f73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f73e:	2b00      	cmp	r3, #0
   1f740:	f040 8572 	bne.w	20228 <_strtod_l+0xb68>
   1f744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f746:	b1e3      	cbz	r3, 1f782 <_strtod_l+0xc2>
   1f748:	4652      	mov	r2, sl
   1f74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f74e:	ec43 2b10 	vmov	d0, r2, r3
   1f752:	b021      	add	sp, #132	; 0x84
   1f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f758:	2b2b      	cmp	r3, #43	; 0x2b
   1f75a:	d006      	beq.n	1f76a <_strtod_l+0xaa>
   1f75c:	2b2d      	cmp	r3, #45	; 0x2d
   1f75e:	d013      	beq.n	1f788 <_strtod_l+0xc8>
   1f760:	2b20      	cmp	r3, #32
   1f762:	d1ca      	bne.n	1f6fa <_strtod_l+0x3a>
   1f764:	3201      	adds	r2, #1
   1f766:	921b      	str	r2, [sp, #108]	; 0x6c
   1f768:	e7bf      	b.n	1f6ea <_strtod_l+0x2a>
   1f76a:	2300      	movs	r3, #0
   1f76c:	930c      	str	r3, [sp, #48]	; 0x30
   1f76e:	1c53      	adds	r3, r2, #1
   1f770:	931b      	str	r3, [sp, #108]	; 0x6c
   1f772:	7853      	ldrb	r3, [r2, #1]
   1f774:	2b00      	cmp	r3, #0
   1f776:	d1c2      	bne.n	1f6fe <_strtod_l+0x3e>
   1f778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f77a:	961b      	str	r6, [sp, #108]	; 0x6c
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	f040 8551 	bne.w	20224 <_strtod_l+0xb64>
   1f782:	4652      	mov	r2, sl
   1f784:	465b      	mov	r3, fp
   1f786:	e7e2      	b.n	1f74e <_strtod_l+0x8e>
   1f788:	2301      	movs	r3, #1
   1f78a:	e7ef      	b.n	1f76c <_strtod_l+0xac>
   1f78c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f78e:	b13a      	cbz	r2, 1f7a0 <_strtod_l+0xe0>
   1f790:	2135      	movs	r1, #53	; 0x35
   1f792:	a81e      	add	r0, sp, #120	; 0x78
   1f794:	f026 fd1e 	bl	461d4 <__copybits>
   1f798:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f79a:	9804      	ldr	r0, [sp, #16]
   1f79c:	f026 fa52 	bl	45c44 <_Bfree>
   1f7a0:	3c01      	subs	r4, #1
   1f7a2:	2c04      	cmp	r4, #4
   1f7a4:	d806      	bhi.n	1f7b4 <_strtod_l+0xf4>
   1f7a6:	e8df f004 	tbb	[pc, r4]
   1f7aa:	030a      	.short	0x030a
   1f7ac:	1714      	.short	0x1714
   1f7ae:	0a          	.byte	0x0a
   1f7af:	00          	.byte	0x00
   1f7b0:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1f7b4:	0731      	lsls	r1, r6, #28
   1f7b6:	d5c1      	bpl.n	1f73c <_strtod_l+0x7c>
   1f7b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1f7bc:	e7be      	b.n	1f73c <_strtod_l+0x7c>
   1f7be:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1f7c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1f7c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f7c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1f7cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1f7d0:	e7f0      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7d2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1f940 <_strtod_l+0x280>
   1f7d6:	e7ed      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7d8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1f7dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1f7e0:	e7e8      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f7e4:	1c5a      	adds	r2, r3, #1
   1f7e6:	921b      	str	r2, [sp, #108]	; 0x6c
   1f7e8:	785b      	ldrb	r3, [r3, #1]
   1f7ea:	2b30      	cmp	r3, #48	; 0x30
   1f7ec:	d0f9      	beq.n	1f7e2 <_strtod_l+0x122>
   1f7ee:	2b00      	cmp	r3, #0
   1f7f0:	d0a4      	beq.n	1f73c <_strtod_l+0x7c>
   1f7f2:	2301      	movs	r3, #1
   1f7f4:	f04f 0900 	mov.w	r9, #0
   1f7f8:	9306      	str	r3, [sp, #24]
   1f7fa:	220a      	movs	r2, #10
   1f7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f7fe:	46c8      	mov	r8, r9
   1f800:	f8cd 901c 	str.w	r9, [sp, #28]
   1f804:	9309      	str	r3, [sp, #36]	; 0x24
   1f806:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1f808:	7805      	ldrb	r5, [r0, #0]
   1f80a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1f80e:	b2d9      	uxtb	r1, r3
   1f810:	2909      	cmp	r1, #9
   1f812:	d924      	bls.n	1f85e <_strtod_l+0x19e>
   1f814:	4622      	mov	r2, r4
   1f816:	9905      	ldr	r1, [sp, #20]
   1f818:	f025 feff 	bl	4561a <strncmp>
   1f81c:	b378      	cbz	r0, 1f87e <_strtod_l+0x1be>
   1f81e:	2000      	movs	r0, #0
   1f820:	462b      	mov	r3, r5
   1f822:	4644      	mov	r4, r8
   1f824:	4602      	mov	r2, r0
   1f826:	9005      	str	r0, [sp, #20]
   1f828:	2b65      	cmp	r3, #101	; 0x65
   1f82a:	d001      	beq.n	1f830 <_strtod_l+0x170>
   1f82c:	2b45      	cmp	r3, #69	; 0x45
   1f82e:	d112      	bne.n	1f856 <_strtod_l+0x196>
   1f830:	b91c      	cbnz	r4, 1f83a <_strtod_l+0x17a>
   1f832:	9b06      	ldr	r3, [sp, #24]
   1f834:	4303      	orrs	r3, r0
   1f836:	d09f      	beq.n	1f778 <_strtod_l+0xb8>
   1f838:	2400      	movs	r4, #0
   1f83a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1f83c:	1c73      	adds	r3, r6, #1
   1f83e:	931b      	str	r3, [sp, #108]	; 0x6c
   1f840:	7873      	ldrb	r3, [r6, #1]
   1f842:	2b2b      	cmp	r3, #43	; 0x2b
   1f844:	d071      	beq.n	1f92a <_strtod_l+0x26a>
   1f846:	2b2d      	cmp	r3, #45	; 0x2d
   1f848:	d074      	beq.n	1f934 <_strtod_l+0x274>
   1f84a:	2700      	movs	r7, #0
   1f84c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f850:	2909      	cmp	r1, #9
   1f852:	d97b      	bls.n	1f94c <_strtod_l+0x28c>
   1f854:	961b      	str	r6, [sp, #108]	; 0x6c
   1f856:	2500      	movs	r5, #0
   1f858:	e098      	b.n	1f98c <_strtod_l+0x2cc>
   1f85a:	2300      	movs	r3, #0
   1f85c:	e7ca      	b.n	1f7f4 <_strtod_l+0x134>
   1f85e:	f1b8 0f08 	cmp.w	r8, #8
   1f862:	f100 0001 	add.w	r0, r0, #1
   1f866:	f108 0801 	add.w	r8, r8, #1
   1f86a:	bfd4      	ite	le
   1f86c:	9907      	ldrle	r1, [sp, #28]
   1f86e:	fb02 3909 	mlagt	r9, r2, r9, r3
   1f872:	901b      	str	r0, [sp, #108]	; 0x6c
   1f874:	bfdc      	itt	le
   1f876:	fb02 3301 	mlale	r3, r2, r1, r3
   1f87a:	9307      	strle	r3, [sp, #28]
   1f87c:	e7c3      	b.n	1f806 <_strtod_l+0x146>
   1f87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f880:	191a      	adds	r2, r3, r4
   1f882:	921b      	str	r2, [sp, #108]	; 0x6c
   1f884:	5d1b      	ldrb	r3, [r3, r4]
   1f886:	f1b8 0f00 	cmp.w	r8, #0
   1f88a:	d035      	beq.n	1f8f8 <_strtod_l+0x238>
   1f88c:	4644      	mov	r4, r8
   1f88e:	9005      	str	r0, [sp, #20]
   1f890:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f894:	2a09      	cmp	r2, #9
   1f896:	d912      	bls.n	1f8be <_strtod_l+0x1fe>
   1f898:	2201      	movs	r2, #1
   1f89a:	e7c5      	b.n	1f828 <_strtod_l+0x168>
   1f89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f89e:	3001      	adds	r0, #1
   1f8a0:	1c5a      	adds	r2, r3, #1
   1f8a2:	921b      	str	r2, [sp, #108]	; 0x6c
   1f8a4:	785b      	ldrb	r3, [r3, #1]
   1f8a6:	2b30      	cmp	r3, #48	; 0x30
   1f8a8:	d0f8      	beq.n	1f89c <_strtod_l+0x1dc>
   1f8aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1f8ae:	2a08      	cmp	r2, #8
   1f8b0:	f200 84bf 	bhi.w	20232 <_strtod_l+0xb72>
   1f8b4:	9005      	str	r0, [sp, #20]
   1f8b6:	2000      	movs	r0, #0
   1f8b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1f8ba:	4604      	mov	r4, r0
   1f8bc:	9209      	str	r2, [sp, #36]	; 0x24
   1f8be:	3b30      	subs	r3, #48	; 0x30
   1f8c0:	f100 0201 	add.w	r2, r0, #1
   1f8c4:	d012      	beq.n	1f8ec <_strtod_l+0x22c>
   1f8c6:	9905      	ldr	r1, [sp, #20]
   1f8c8:	1905      	adds	r5, r0, r4
   1f8ca:	4411      	add	r1, r2
   1f8cc:	4622      	mov	r2, r4
   1f8ce:	9105      	str	r1, [sp, #20]
   1f8d0:	210a      	movs	r1, #10
   1f8d2:	42aa      	cmp	r2, r5
   1f8d4:	d112      	bne.n	1f8fc <_strtod_l+0x23c>
   1f8d6:	1822      	adds	r2, r4, r0
   1f8d8:	3401      	adds	r4, #1
   1f8da:	2a08      	cmp	r2, #8
   1f8dc:	4404      	add	r4, r0
   1f8de:	dc1a      	bgt.n	1f916 <_strtod_l+0x256>
   1f8e0:	9907      	ldr	r1, [sp, #28]
   1f8e2:	220a      	movs	r2, #10
   1f8e4:	fb02 3301 	mla	r3, r2, r1, r3
   1f8e8:	9307      	str	r3, [sp, #28]
   1f8ea:	2200      	movs	r2, #0
   1f8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f8ee:	4610      	mov	r0, r2
   1f8f0:	1c59      	adds	r1, r3, #1
   1f8f2:	911b      	str	r1, [sp, #108]	; 0x6c
   1f8f4:	785b      	ldrb	r3, [r3, #1]
   1f8f6:	e7cb      	b.n	1f890 <_strtod_l+0x1d0>
   1f8f8:	4640      	mov	r0, r8
   1f8fa:	e7d4      	b.n	1f8a6 <_strtod_l+0x1e6>
   1f8fc:	2a08      	cmp	r2, #8
   1f8fe:	dc04      	bgt.n	1f90a <_strtod_l+0x24a>
   1f900:	9f07      	ldr	r7, [sp, #28]
   1f902:	434f      	muls	r7, r1
   1f904:	9707      	str	r7, [sp, #28]
   1f906:	3201      	adds	r2, #1
   1f908:	e7e3      	b.n	1f8d2 <_strtod_l+0x212>
   1f90a:	1c57      	adds	r7, r2, #1
   1f90c:	2f10      	cmp	r7, #16
   1f90e:	bfd8      	it	le
   1f910:	fb01 f909 	mulle.w	r9, r1, r9
   1f914:	e7f7      	b.n	1f906 <_strtod_l+0x246>
   1f916:	2c10      	cmp	r4, #16
   1f918:	bfdc      	itt	le
   1f91a:	220a      	movle	r2, #10
   1f91c:	fb02 3909 	mlale	r9, r2, r9, r3
   1f920:	e7e3      	b.n	1f8ea <_strtod_l+0x22a>
   1f922:	2300      	movs	r3, #0
   1f924:	2201      	movs	r2, #1
   1f926:	9305      	str	r3, [sp, #20]
   1f928:	e783      	b.n	1f832 <_strtod_l+0x172>
   1f92a:	2700      	movs	r7, #0
   1f92c:	1cb3      	adds	r3, r6, #2
   1f92e:	931b      	str	r3, [sp, #108]	; 0x6c
   1f930:	78b3      	ldrb	r3, [r6, #2]
   1f932:	e78b      	b.n	1f84c <_strtod_l+0x18c>
   1f934:	2701      	movs	r7, #1
   1f936:	e7f9      	b.n	1f92c <_strtod_l+0x26c>
   1f938:	000478fc 	.word	0x000478fc
   1f93c:	00047874 	.word	0x00047874
   1f940:	7ff00000 	.word	0x7ff00000
   1f944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f946:	1c59      	adds	r1, r3, #1
   1f948:	911b      	str	r1, [sp, #108]	; 0x6c
   1f94a:	785b      	ldrb	r3, [r3, #1]
   1f94c:	2b30      	cmp	r3, #48	; 0x30
   1f94e:	d0f9      	beq.n	1f944 <_strtod_l+0x284>
   1f950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1f954:	2908      	cmp	r1, #8
   1f956:	f63f af7e 	bhi.w	1f856 <_strtod_l+0x196>
   1f95a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1f95e:	f04f 0e0a 	mov.w	lr, #10
   1f962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f964:	9308      	str	r3, [sp, #32]
   1f966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f968:	1c59      	adds	r1, r3, #1
   1f96a:	911b      	str	r1, [sp, #108]	; 0x6c
   1f96c:	785b      	ldrb	r3, [r3, #1]
   1f96e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1f972:	2d09      	cmp	r5, #9
   1f974:	d92e      	bls.n	1f9d4 <_strtod_l+0x314>
   1f976:	9d08      	ldr	r5, [sp, #32]
   1f978:	1b49      	subs	r1, r1, r5
   1f97a:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1f97e:	2908      	cmp	r1, #8
   1f980:	dc02      	bgt.n	1f988 <_strtod_l+0x2c8>
   1f982:	4565      	cmp	r5, ip
   1f984:	bfa8      	it	ge
   1f986:	4665      	movge	r5, ip
   1f988:	b107      	cbz	r7, 1f98c <_strtod_l+0x2cc>
   1f98a:	426d      	negs	r5, r5
   1f98c:	2c00      	cmp	r4, #0
   1f98e:	d14b      	bne.n	1fa28 <_strtod_l+0x368>
   1f990:	9906      	ldr	r1, [sp, #24]
   1f992:	4301      	orrs	r1, r0
   1f994:	f47f aed2 	bne.w	1f73c <_strtod_l+0x7c>
   1f998:	2a00      	cmp	r2, #0
   1f99a:	f47f aeed 	bne.w	1f778 <_strtod_l+0xb8>
   1f99e:	2b4e      	cmp	r3, #78	; 0x4e
   1f9a0:	d022      	beq.n	1f9e8 <_strtod_l+0x328>
   1f9a2:	dc1c      	bgt.n	1f9de <_strtod_l+0x31e>
   1f9a4:	2b49      	cmp	r3, #73	; 0x49
   1f9a6:	f47f aee7 	bne.w	1f778 <_strtod_l+0xb8>
   1f9aa:	499a      	ldr	r1, [pc, #616]	; (1fc14 <_strtod_l+0x554>)
   1f9ac:	a81b      	add	r0, sp, #108	; 0x6c
   1f9ae:	f026 f81e 	bl	459ee <__match>
   1f9b2:	2800      	cmp	r0, #0
   1f9b4:	f43f aee0 	beq.w	1f778 <_strtod_l+0xb8>
   1f9b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9ba:	a81b      	add	r0, sp, #108	; 0x6c
   1f9bc:	4996      	ldr	r1, [pc, #600]	; (1fc18 <_strtod_l+0x558>)
   1f9be:	3b01      	subs	r3, #1
   1f9c0:	931b      	str	r3, [sp, #108]	; 0x6c
   1f9c2:	f026 f814 	bl	459ee <__match>
   1f9c6:	b910      	cbnz	r0, 1f9ce <_strtod_l+0x30e>
   1f9c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9ca:	3301      	adds	r3, #1
   1f9cc:	931b      	str	r3, [sp, #108]	; 0x6c
   1f9ce:	f8df b260 	ldr.w	fp, [pc, #608]	; 1fc30 <_strtod_l+0x570>
   1f9d2:	e6b3      	b.n	1f73c <_strtod_l+0x7c>
   1f9d4:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1f9d8:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1f9dc:	e7c3      	b.n	1f966 <_strtod_l+0x2a6>
   1f9de:	2b69      	cmp	r3, #105	; 0x69
   1f9e0:	d0e3      	beq.n	1f9aa <_strtod_l+0x2ea>
   1f9e2:	2b6e      	cmp	r3, #110	; 0x6e
   1f9e4:	f47f aec8 	bne.w	1f778 <_strtod_l+0xb8>
   1f9e8:	498c      	ldr	r1, [pc, #560]	; (1fc1c <_strtod_l+0x55c>)
   1f9ea:	a81b      	add	r0, sp, #108	; 0x6c
   1f9ec:	f025 ffff 	bl	459ee <__match>
   1f9f0:	2800      	cmp	r0, #0
   1f9f2:	f43f aec1 	beq.w	1f778 <_strtod_l+0xb8>
   1f9f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9f8:	781b      	ldrb	r3, [r3, #0]
   1f9fa:	2b28      	cmp	r3, #40	; 0x28
   1f9fc:	d10e      	bne.n	1fa1c <_strtod_l+0x35c>
   1f9fe:	aa1e      	add	r2, sp, #120	; 0x78
   1fa00:	4987      	ldr	r1, [pc, #540]	; (1fc20 <_strtod_l+0x560>)
   1fa02:	a81b      	add	r0, sp, #108	; 0x6c
   1fa04:	f026 f807 	bl	45a16 <__hexnan>
   1fa08:	2805      	cmp	r0, #5
   1fa0a:	d107      	bne.n	1fa1c <_strtod_l+0x35c>
   1fa0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1fa0e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1fa12:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1fa16:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1fa1a:	e68f      	b.n	1f73c <_strtod_l+0x7c>
   1fa1c:	4881      	ldr	r0, [pc, #516]	; (1fc24 <_strtod_l+0x564>)
   1fa1e:	f001 f9c7 	bl	20db0 <nan>
   1fa22:	ec5b ab10 	vmov	sl, fp, d0
   1fa26:	e689      	b.n	1f73c <_strtod_l+0x7c>
   1fa28:	9b05      	ldr	r3, [sp, #20]
   1fa2a:	f1b8 0f00 	cmp.w	r8, #0
   1fa2e:	bf08      	it	eq
   1fa30:	46a0      	moveq	r8, r4
   1fa32:	2c10      	cmp	r4, #16
   1fa34:	9807      	ldr	r0, [sp, #28]
   1fa36:	eba5 0303 	sub.w	r3, r5, r3
   1fa3a:	4626      	mov	r6, r4
   1fa3c:	bfa8      	it	ge
   1fa3e:	2610      	movge	r6, #16
   1fa40:	9308      	str	r3, [sp, #32]
   1fa42:	f7fc fe3f 	bl	1c6c4 <__aeabi_ui2d>
   1fa46:	2c09      	cmp	r4, #9
   1fa48:	4682      	mov	sl, r0
   1fa4a:	468b      	mov	fp, r1
   1fa4c:	dd13      	ble.n	1fa76 <_strtod_l+0x3b6>
   1fa4e:	4b76      	ldr	r3, [pc, #472]	; (1fc28 <_strtod_l+0x568>)
   1fa50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1fa54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1fa58:	f7fc feae 	bl	1c7b8 <__aeabi_dmul>
   1fa5c:	4682      	mov	sl, r0
   1fa5e:	468b      	mov	fp, r1
   1fa60:	4648      	mov	r0, r9
   1fa62:	f7fc fe2f 	bl	1c6c4 <__aeabi_ui2d>
   1fa66:	4602      	mov	r2, r0
   1fa68:	460b      	mov	r3, r1
   1fa6a:	4650      	mov	r0, sl
   1fa6c:	4659      	mov	r1, fp
   1fa6e:	f7fc fced 	bl	1c44c <__adddf3>
   1fa72:	4682      	mov	sl, r0
   1fa74:	468b      	mov	fp, r1
   1fa76:	2c0f      	cmp	r4, #15
   1fa78:	dc38      	bgt.n	1faec <_strtod_l+0x42c>
   1fa7a:	9b08      	ldr	r3, [sp, #32]
   1fa7c:	2b00      	cmp	r3, #0
   1fa7e:	f43f ae5d 	beq.w	1f73c <_strtod_l+0x7c>
   1fa82:	dd24      	ble.n	1face <_strtod_l+0x40e>
   1fa84:	2b16      	cmp	r3, #22
   1fa86:	dc0b      	bgt.n	1faa0 <_strtod_l+0x3e0>
   1fa88:	4c67      	ldr	r4, [pc, #412]	; (1fc28 <_strtod_l+0x568>)
   1fa8a:	4652      	mov	r2, sl
   1fa8c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1fa90:	465b      	mov	r3, fp
   1fa92:	e9d4 0100 	ldrd	r0, r1, [r4]
   1fa96:	f7fc fe8f 	bl	1c7b8 <__aeabi_dmul>
   1fa9a:	4682      	mov	sl, r0
   1fa9c:	468b      	mov	fp, r1
   1fa9e:	e64d      	b.n	1f73c <_strtod_l+0x7c>
   1faa0:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1faa4:	9a08      	ldr	r2, [sp, #32]
   1faa6:	4293      	cmp	r3, r2
   1faa8:	db20      	blt.n	1faec <_strtod_l+0x42c>
   1faaa:	f1c4 040f 	rsb	r4, r4, #15
   1faae:	4d5e      	ldr	r5, [pc, #376]	; (1fc28 <_strtod_l+0x568>)
   1fab0:	4652      	mov	r2, sl
   1fab2:	465b      	mov	r3, fp
   1fab4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1fab8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fabc:	f7fc fe7c 	bl	1c7b8 <__aeabi_dmul>
   1fac0:	9b08      	ldr	r3, [sp, #32]
   1fac2:	1b1c      	subs	r4, r3, r4
   1fac4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1fac8:	e9d5 2300 	ldrd	r2, r3, [r5]
   1facc:	e7e3      	b.n	1fa96 <_strtod_l+0x3d6>
   1face:	9b08      	ldr	r3, [sp, #32]
   1fad0:	3316      	adds	r3, #22
   1fad2:	db0b      	blt.n	1faec <_strtod_l+0x42c>
   1fad4:	9b05      	ldr	r3, [sp, #20]
   1fad6:	4650      	mov	r0, sl
   1fad8:	4a53      	ldr	r2, [pc, #332]	; (1fc28 <_strtod_l+0x568>)
   1fada:	4659      	mov	r1, fp
   1fadc:	1b5d      	subs	r5, r3, r5
   1fade:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1fae2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fae6:	f7fc ff91 	bl	1ca0c <__aeabi_ddiv>
   1faea:	e7d6      	b.n	1fa9a <_strtod_l+0x3da>
   1faec:	1ba6      	subs	r6, r4, r6
   1faee:	9b08      	ldr	r3, [sp, #32]
   1faf0:	441e      	add	r6, r3
   1faf2:	2e00      	cmp	r6, #0
   1faf4:	dd6e      	ble.n	1fbd4 <_strtod_l+0x514>
   1faf6:	f016 030f 	ands.w	r3, r6, #15
   1fafa:	d00a      	beq.n	1fb12 <_strtod_l+0x452>
   1fafc:	494a      	ldr	r1, [pc, #296]	; (1fc28 <_strtod_l+0x568>)
   1fafe:	4652      	mov	r2, sl
   1fb00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1fb04:	465b      	mov	r3, fp
   1fb06:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fb0a:	f7fc fe55 	bl	1c7b8 <__aeabi_dmul>
   1fb0e:	4682      	mov	sl, r0
   1fb10:	468b      	mov	fp, r1
   1fb12:	f036 060f 	bics.w	r6, r6, #15
   1fb16:	d04e      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fb18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1fb1c:	dd23      	ble.n	1fb66 <_strtod_l+0x4a6>
   1fb1e:	2400      	movs	r4, #0
   1fb20:	9405      	str	r4, [sp, #20]
   1fb22:	9409      	str	r4, [sp, #36]	; 0x24
   1fb24:	9407      	str	r4, [sp, #28]
   1fb26:	2322      	movs	r3, #34	; 0x22
   1fb28:	9a04      	ldr	r2, [sp, #16]
   1fb2a:	f8df b104 	ldr.w	fp, [pc, #260]	; 1fc30 <_strtod_l+0x570>
   1fb2e:	f04f 0a00 	mov.w	sl, #0
   1fb32:	6013      	str	r3, [r2, #0]
   1fb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb36:	2b00      	cmp	r3, #0
   1fb38:	f43f ae00 	beq.w	1f73c <_strtod_l+0x7c>
   1fb3c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fb3e:	9804      	ldr	r0, [sp, #16]
   1fb40:	f026 f880 	bl	45c44 <_Bfree>
   1fb44:	9907      	ldr	r1, [sp, #28]
   1fb46:	9804      	ldr	r0, [sp, #16]
   1fb48:	f026 f87c 	bl	45c44 <_Bfree>
   1fb4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fb50:	f026 f878 	bl	45c44 <_Bfree>
   1fb54:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fb56:	9804      	ldr	r0, [sp, #16]
   1fb58:	f026 f874 	bl	45c44 <_Bfree>
   1fb5c:	4621      	mov	r1, r4
   1fb5e:	9804      	ldr	r0, [sp, #16]
   1fb60:	f026 f870 	bl	45c44 <_Bfree>
   1fb64:	e5ea      	b.n	1f73c <_strtod_l+0x7c>
   1fb66:	2300      	movs	r3, #0
   1fb68:	1136      	asrs	r6, r6, #4
   1fb6a:	4650      	mov	r0, sl
   1fb6c:	4659      	mov	r1, fp
   1fb6e:	461f      	mov	r7, r3
   1fb70:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1fc2c <_strtod_l+0x56c>
   1fb74:	2e01      	cmp	r6, #1
   1fb76:	dc21      	bgt.n	1fbbc <_strtod_l+0x4fc>
   1fb78:	b10b      	cbz	r3, 1fb7e <_strtod_l+0x4be>
   1fb7a:	4682      	mov	sl, r0
   1fb7c:	468b      	mov	fp, r1
   1fb7e:	4b2b      	ldr	r3, [pc, #172]	; (1fc2c <_strtod_l+0x56c>)
   1fb80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1fb84:	4652      	mov	r2, sl
   1fb86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1fb8a:	465b      	mov	r3, fp
   1fb8c:	e9d7 0100 	ldrd	r0, r1, [r7]
   1fb90:	f7fc fe12 	bl	1c7b8 <__aeabi_dmul>
   1fb94:	4b26      	ldr	r3, [pc, #152]	; (1fc30 <_strtod_l+0x570>)
   1fb96:	460a      	mov	r2, r1
   1fb98:	4682      	mov	sl, r0
   1fb9a:	400b      	ands	r3, r1
   1fb9c:	4925      	ldr	r1, [pc, #148]	; (1fc34 <_strtod_l+0x574>)
   1fb9e:	428b      	cmp	r3, r1
   1fba0:	d8bd      	bhi.n	1fb1e <_strtod_l+0x45e>
   1fba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1fba6:	428b      	cmp	r3, r1
   1fba8:	bf86      	itte	hi
   1fbaa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1fc38 <_strtod_l+0x578>
   1fbae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   1fbb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1fbb6:	2300      	movs	r3, #0
   1fbb8:	9306      	str	r3, [sp, #24]
   1fbba:	e078      	b.n	1fcae <_strtod_l+0x5ee>
   1fbbc:	07f2      	lsls	r2, r6, #31
   1fbbe:	d506      	bpl.n	1fbce <_strtod_l+0x50e>
   1fbc0:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1fbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fbc8:	f7fc fdf6 	bl	1c7b8 <__aeabi_dmul>
   1fbcc:	2301      	movs	r3, #1
   1fbce:	3701      	adds	r7, #1
   1fbd0:	1076      	asrs	r6, r6, #1
   1fbd2:	e7cf      	b.n	1fb74 <_strtod_l+0x4b4>
   1fbd4:	d0ef      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fbd6:	4276      	negs	r6, r6
   1fbd8:	f016 020f 	ands.w	r2, r6, #15
   1fbdc:	d00a      	beq.n	1fbf4 <_strtod_l+0x534>
   1fbde:	4b12      	ldr	r3, [pc, #72]	; (1fc28 <_strtod_l+0x568>)
   1fbe0:	4650      	mov	r0, sl
   1fbe2:	4659      	mov	r1, fp
   1fbe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fbec:	f7fc ff0e 	bl	1ca0c <__aeabi_ddiv>
   1fbf0:	4682      	mov	sl, r0
   1fbf2:	468b      	mov	fp, r1
   1fbf4:	1136      	asrs	r6, r6, #4
   1fbf6:	d0de      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fbf8:	2e1f      	cmp	r6, #31
   1fbfa:	dd1f      	ble.n	1fc3c <_strtod_l+0x57c>
   1fbfc:	2400      	movs	r4, #0
   1fbfe:	9405      	str	r4, [sp, #20]
   1fc00:	9409      	str	r4, [sp, #36]	; 0x24
   1fc02:	9407      	str	r4, [sp, #28]
   1fc04:	2322      	movs	r3, #34	; 0x22
   1fc06:	9a04      	ldr	r2, [sp, #16]
   1fc08:	f04f 0a00 	mov.w	sl, #0
   1fc0c:	f04f 0b00 	mov.w	fp, #0
   1fc10:	6013      	str	r3, [r2, #0]
   1fc12:	e78f      	b.n	1fb34 <_strtod_l+0x474>
   1fc14:	00049325 	.word	0x00049325
   1fc18:	0004f340 	.word	0x0004f340
   1fc1c:	0004f329 	.word	0x0004f329
   1fc20:	00047888 	.word	0x00047888
   1fc24:	00049479 	.word	0x00049479
   1fc28:	00046ae8 	.word	0x00046ae8
   1fc2c:	00046ac0 	.word	0x00046ac0
   1fc30:	7ff00000 	.word	0x7ff00000
   1fc34:	7ca00000 	.word	0x7ca00000
   1fc38:	7fefffff 	.word	0x7fefffff
   1fc3c:	f016 0310 	ands.w	r3, r6, #16
   1fc40:	4650      	mov	r0, sl
   1fc42:	4659      	mov	r1, fp
   1fc44:	4fac      	ldr	r7, [pc, #688]	; (1fef8 <_strtod_l+0x838>)
   1fc46:	bf18      	it	ne
   1fc48:	236a      	movne	r3, #106	; 0x6a
   1fc4a:	9306      	str	r3, [sp, #24]
   1fc4c:	2300      	movs	r3, #0
   1fc4e:	07f2      	lsls	r2, r6, #31
   1fc50:	d504      	bpl.n	1fc5c <_strtod_l+0x59c>
   1fc52:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fc56:	f7fc fdaf 	bl	1c7b8 <__aeabi_dmul>
   1fc5a:	2301      	movs	r3, #1
   1fc5c:	1076      	asrs	r6, r6, #1
   1fc5e:	f107 0708 	add.w	r7, r7, #8
   1fc62:	d1f4      	bne.n	1fc4e <_strtod_l+0x58e>
   1fc64:	b10b      	cbz	r3, 1fc6a <_strtod_l+0x5aa>
   1fc66:	4682      	mov	sl, r0
   1fc68:	468b      	mov	fp, r1
   1fc6a:	9b06      	ldr	r3, [sp, #24]
   1fc6c:	b1bb      	cbz	r3, 1fc9e <_strtod_l+0x5de>
   1fc6e:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1fc72:	4659      	mov	r1, fp
   1fc74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1fc78:	2b00      	cmp	r3, #0
   1fc7a:	dd10      	ble.n	1fc9e <_strtod_l+0x5de>
   1fc7c:	2b1f      	cmp	r3, #31
   1fc7e:	f340 8126 	ble.w	1fece <_strtod_l+0x80e>
   1fc82:	2b34      	cmp	r3, #52	; 0x34
   1fc84:	f04f 0a00 	mov.w	sl, #0
   1fc88:	bfdb      	ittet	le
   1fc8a:	3b20      	suble	r3, #32
   1fc8c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   1fc90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1fc94:	fa02 f303 	lslle.w	r3, r2, r3
   1fc98:	bfd8      	it	le
   1fc9a:	ea03 0b01 	andle.w	fp, r3, r1
   1fc9e:	2200      	movs	r2, #0
   1fca0:	2300      	movs	r3, #0
   1fca2:	4650      	mov	r0, sl
   1fca4:	4659      	mov	r1, fp
   1fca6:	f7fc ffef 	bl	1cc88 <__aeabi_dcmpeq>
   1fcaa:	2800      	cmp	r0, #0
   1fcac:	d1a6      	bne.n	1fbfc <_strtod_l+0x53c>
   1fcae:	9b07      	ldr	r3, [sp, #28]
   1fcb0:	4642      	mov	r2, r8
   1fcb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fcb4:	9300      	str	r3, [sp, #0]
   1fcb6:	4623      	mov	r3, r4
   1fcb8:	9804      	ldr	r0, [sp, #16]
   1fcba:	f026 f817 	bl	45cec <__s2b>
   1fcbe:	9009      	str	r0, [sp, #36]	; 0x24
   1fcc0:	2800      	cmp	r0, #0
   1fcc2:	f43f af2c 	beq.w	1fb1e <_strtod_l+0x45e>
   1fcc6:	9b05      	ldr	r3, [sp, #20]
   1fcc8:	2400      	movs	r4, #0
   1fcca:	1b5d      	subs	r5, r3, r5
   1fccc:	9b08      	ldr	r3, [sp, #32]
   1fcce:	9405      	str	r4, [sp, #20]
   1fcd0:	2b00      	cmp	r3, #0
   1fcd2:	bfb4      	ite	lt
   1fcd4:	462b      	movlt	r3, r5
   1fcd6:	2300      	movge	r3, #0
   1fcd8:	930e      	str	r3, [sp, #56]	; 0x38
   1fcda:	9b08      	ldr	r3, [sp, #32]
   1fcdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fce0:	9316      	str	r3, [sp, #88]	; 0x58
   1fce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fce4:	9804      	ldr	r0, [sp, #16]
   1fce6:	6859      	ldr	r1, [r3, #4]
   1fce8:	f025 ff78 	bl	45bdc <_Balloc>
   1fcec:	9007      	str	r0, [sp, #28]
   1fcee:	2800      	cmp	r0, #0
   1fcf0:	f43f af19 	beq.w	1fb26 <_strtod_l+0x466>
   1fcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcf6:	300c      	adds	r0, #12
   1fcf8:	691a      	ldr	r2, [r3, #16]
   1fcfa:	f103 010c 	add.w	r1, r3, #12
   1fcfe:	3202      	adds	r2, #2
   1fd00:	0092      	lsls	r2, r2, #2
   1fd02:	f025 fa91 	bl	45228 <memcpy>
   1fd06:	aa1e      	add	r2, sp, #120	; 0x78
   1fd08:	a91d      	add	r1, sp, #116	; 0x74
   1fd0a:	9804      	ldr	r0, [sp, #16]
   1fd0c:	ec4b ab10 	vmov	d0, sl, fp
   1fd10:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1fd14:	f026 f9dd 	bl	460d2 <__d2b>
   1fd18:	901c      	str	r0, [sp, #112]	; 0x70
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	f43f af03 	beq.w	1fb26 <_strtod_l+0x466>
   1fd20:	2101      	movs	r1, #1
   1fd22:	9804      	ldr	r0, [sp, #16]
   1fd24:	f026 f870 	bl	45e08 <__i2b>
   1fd28:	9005      	str	r0, [sp, #20]
   1fd2a:	4603      	mov	r3, r0
   1fd2c:	2800      	cmp	r0, #0
   1fd2e:	f43f aefa 	beq.w	1fb26 <_strtod_l+0x466>
   1fd32:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1fd34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1fd36:	2e00      	cmp	r6, #0
   1fd38:	bfa9      	itett	ge
   1fd3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1fd3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1fd3e:	18f7      	addge	r7, r6, r3
   1fd40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1fd42:	bfb8      	it	lt
   1fd44:	1b9d      	sublt	r5, r3, r6
   1fd46:	9b06      	ldr	r3, [sp, #24]
   1fd48:	bfb8      	it	lt
   1fd4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1fd4c:	1af6      	subs	r6, r6, r3
   1fd4e:	4b6b      	ldr	r3, [pc, #428]	; (1fefc <_strtod_l+0x83c>)
   1fd50:	4416      	add	r6, r2
   1fd52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1fd56:	3e01      	subs	r6, #1
   1fd58:	429e      	cmp	r6, r3
   1fd5a:	f280 80bf 	bge.w	1fedc <_strtod_l+0x81c>
   1fd5e:	1b9b      	subs	r3, r3, r6
   1fd60:	f04f 0801 	mov.w	r8, #1
   1fd64:	2b1f      	cmp	r3, #31
   1fd66:	eba2 0203 	sub.w	r2, r2, r3
   1fd6a:	bfcd      	iteet	gt
   1fd6c:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1fd70:	fa08 f803 	lslle.w	r8, r8, r3
   1fd74:	2600      	movle	r6, #0
   1fd76:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1fd7a:	bfc2      	ittt	gt
   1fd7c:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1fd80:	36e2      	addgt	r6, #226	; 0xe2
   1fd82:	fa08 f606 	lslgt.w	r6, r8, r6
   1fd86:	eb07 0902 	add.w	r9, r7, r2
   1fd8a:	9b06      	ldr	r3, [sp, #24]
   1fd8c:	4415      	add	r5, r2
   1fd8e:	454f      	cmp	r7, r9
   1fd90:	441d      	add	r5, r3
   1fd92:	463b      	mov	r3, r7
   1fd94:	bfa8      	it	ge
   1fd96:	464b      	movge	r3, r9
   1fd98:	42ab      	cmp	r3, r5
   1fd9a:	bfa8      	it	ge
   1fd9c:	462b      	movge	r3, r5
   1fd9e:	2b00      	cmp	r3, #0
   1fda0:	bfc2      	ittt	gt
   1fda2:	eba9 0903 	subgt.w	r9, r9, r3
   1fda6:	1aed      	subgt	r5, r5, r3
   1fda8:	1aff      	subgt	r7, r7, r3
   1fdaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fdac:	2b00      	cmp	r3, #0
   1fdae:	dd17      	ble.n	1fde0 <_strtod_l+0x720>
   1fdb0:	461a      	mov	r2, r3
   1fdb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fdb6:	f021 f8bf 	bl	40f38 <__pow5mult>
   1fdba:	9005      	str	r0, [sp, #20]
   1fdbc:	2800      	cmp	r0, #0
   1fdbe:	f43f aeb2 	beq.w	1fb26 <_strtod_l+0x466>
   1fdc2:	4601      	mov	r1, r0
   1fdc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1fdc6:	9804      	ldr	r0, [sp, #16]
   1fdc8:	f026 f827 	bl	45e1a <__multiply>
   1fdcc:	900d      	str	r0, [sp, #52]	; 0x34
   1fdce:	2800      	cmp	r0, #0
   1fdd0:	f43f aea9 	beq.w	1fb26 <_strtod_l+0x466>
   1fdd4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fdd6:	9804      	ldr	r0, [sp, #16]
   1fdd8:	f025 ff34 	bl	45c44 <_Bfree>
   1fddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdde:	931c      	str	r3, [sp, #112]	; 0x70
   1fde0:	f1b9 0f00 	cmp.w	r9, #0
   1fde4:	dc7e      	bgt.n	1fee4 <_strtod_l+0x824>
   1fde6:	9b08      	ldr	r3, [sp, #32]
   1fde8:	2b00      	cmp	r3, #0
   1fdea:	dd08      	ble.n	1fdfe <_strtod_l+0x73e>
   1fdec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1fdee:	9907      	ldr	r1, [sp, #28]
   1fdf0:	9804      	ldr	r0, [sp, #16]
   1fdf2:	f021 f8a1 	bl	40f38 <__pow5mult>
   1fdf6:	9007      	str	r0, [sp, #28]
   1fdf8:	2800      	cmp	r0, #0
   1fdfa:	f43f ae94 	beq.w	1fb26 <_strtod_l+0x466>
   1fdfe:	2d00      	cmp	r5, #0
   1fe00:	dd08      	ble.n	1fe14 <_strtod_l+0x754>
   1fe02:	462a      	mov	r2, r5
   1fe04:	9907      	ldr	r1, [sp, #28]
   1fe06:	9804      	ldr	r0, [sp, #16]
   1fe08:	f026 f896 	bl	45f38 <__lshift>
   1fe0c:	9007      	str	r0, [sp, #28]
   1fe0e:	2800      	cmp	r0, #0
   1fe10:	f43f ae89 	beq.w	1fb26 <_strtod_l+0x466>
   1fe14:	2f00      	cmp	r7, #0
   1fe16:	dd08      	ble.n	1fe2a <_strtod_l+0x76a>
   1fe18:	463a      	mov	r2, r7
   1fe1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fe1e:	f026 f88b 	bl	45f38 <__lshift>
   1fe22:	9005      	str	r0, [sp, #20]
   1fe24:	2800      	cmp	r0, #0
   1fe26:	f43f ae7e 	beq.w	1fb26 <_strtod_l+0x466>
   1fe2a:	9a07      	ldr	r2, [sp, #28]
   1fe2c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fe2e:	9804      	ldr	r0, [sp, #16]
   1fe30:	f026 f8ef 	bl	46012 <__mdiff>
   1fe34:	4604      	mov	r4, r0
   1fe36:	2800      	cmp	r0, #0
   1fe38:	f43f ae75 	beq.w	1fb26 <_strtod_l+0x466>
   1fe3c:	68c3      	ldr	r3, [r0, #12]
   1fe3e:	9905      	ldr	r1, [sp, #20]
   1fe40:	930d      	str	r3, [sp, #52]	; 0x34
   1fe42:	2300      	movs	r3, #0
   1fe44:	60c3      	str	r3, [r0, #12]
   1fe46:	f026 f8ca 	bl	45fde <__mcmp>
   1fe4a:	2800      	cmp	r0, #0
   1fe4c:	da5c      	bge.n	1ff08 <_strtod_l+0x848>
   1fe4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe50:	ea53 030a 	orrs.w	r3, r3, sl
   1fe54:	d17e      	bne.n	1ff54 <_strtod_l+0x894>
   1fe56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fe5a:	2b00      	cmp	r3, #0
   1fe5c:	d17a      	bne.n	1ff54 <_strtod_l+0x894>
   1fe5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fe62:	0d1b      	lsrs	r3, r3, #20
   1fe64:	051b      	lsls	r3, r3, #20
   1fe66:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1fe6a:	d973      	bls.n	1ff54 <_strtod_l+0x894>
   1fe6c:	6963      	ldr	r3, [r4, #20]
   1fe6e:	b913      	cbnz	r3, 1fe76 <_strtod_l+0x7b6>
   1fe70:	6923      	ldr	r3, [r4, #16]
   1fe72:	2b01      	cmp	r3, #1
   1fe74:	dd6e      	ble.n	1ff54 <_strtod_l+0x894>
   1fe76:	4621      	mov	r1, r4
   1fe78:	2201      	movs	r2, #1
   1fe7a:	9804      	ldr	r0, [sp, #16]
   1fe7c:	f026 f85c 	bl	45f38 <__lshift>
   1fe80:	9905      	ldr	r1, [sp, #20]
   1fe82:	4604      	mov	r4, r0
   1fe84:	f026 f8ab 	bl	45fde <__mcmp>
   1fe88:	2800      	cmp	r0, #0
   1fe8a:	dd63      	ble.n	1ff54 <_strtod_l+0x894>
   1fe8c:	9906      	ldr	r1, [sp, #24]
   1fe8e:	465b      	mov	r3, fp
   1fe90:	4a1b      	ldr	r2, [pc, #108]	; (1ff00 <_strtod_l+0x840>)
   1fe92:	2900      	cmp	r1, #0
   1fe94:	d07d      	beq.n	1ff92 <_strtod_l+0x8d2>
   1fe96:	ea02 010b 	and.w	r1, r2, fp
   1fe9a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1fe9e:	dc78      	bgt.n	1ff92 <_strtod_l+0x8d2>
   1fea0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1fea4:	f77f aeae 	ble.w	1fc04 <_strtod_l+0x544>
   1fea8:	2300      	movs	r3, #0
   1feaa:	4a16      	ldr	r2, [pc, #88]	; (1ff04 <_strtod_l+0x844>)
   1feac:	4650      	mov	r0, sl
   1feae:	4659      	mov	r1, fp
   1feb0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1feb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1feb8:	f7fc fc7e 	bl	1c7b8 <__aeabi_dmul>
   1febc:	460b      	mov	r3, r1
   1febe:	4682      	mov	sl, r0
   1fec0:	468b      	mov	fp, r1
   1fec2:	4303      	orrs	r3, r0
   1fec4:	bf02      	ittt	eq
   1fec6:	2322      	moveq	r3, #34	; 0x22
   1fec8:	9a04      	ldreq	r2, [sp, #16]
   1feca:	6013      	streq	r3, [r2, #0]
   1fecc:	e636      	b.n	1fb3c <_strtod_l+0x47c>
   1fece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fed2:	fa02 f303 	lsl.w	r3, r2, r3
   1fed6:	ea03 0a0a 	and.w	sl, r3, sl
   1feda:	e6e0      	b.n	1fc9e <_strtod_l+0x5de>
   1fedc:	2600      	movs	r6, #0
   1fede:	f04f 0801 	mov.w	r8, #1
   1fee2:	e750      	b.n	1fd86 <_strtod_l+0x6c6>
   1fee4:	464a      	mov	r2, r9
   1fee6:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fee8:	9804      	ldr	r0, [sp, #16]
   1feea:	f026 f825 	bl	45f38 <__lshift>
   1feee:	901c      	str	r0, [sp, #112]	; 0x70
   1fef0:	2800      	cmp	r0, #0
   1fef2:	f47f af78 	bne.w	1fde6 <_strtod_l+0x726>
   1fef6:	e616      	b.n	1fb26 <_strtod_l+0x466>
   1fef8:	00046a98 	.word	0x00046a98
   1fefc:	fffffc02 	.word	0xfffffc02
   1ff00:	7ff00000 	.word	0x7ff00000
   1ff04:	39500000 	.word	0x39500000
   1ff08:	465d      	mov	r5, fp
   1ff0a:	d160      	bne.n	1ffce <_strtod_l+0x90e>
   1ff0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ff0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ff12:	b342      	cbz	r2, 1ff66 <_strtod_l+0x8a6>
   1ff14:	4ab8      	ldr	r2, [pc, #736]	; (201f8 <_strtod_l+0xb38>)
   1ff16:	4293      	cmp	r3, r2
   1ff18:	d128      	bne.n	1ff6c <_strtod_l+0x8ac>
   1ff1a:	9b06      	ldr	r3, [sp, #24]
   1ff1c:	4650      	mov	r0, sl
   1ff1e:	b1eb      	cbz	r3, 1ff5c <_strtod_l+0x89c>
   1ff20:	4ab6      	ldr	r2, [pc, #728]	; (201fc <_strtod_l+0xb3c>)
   1ff22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff26:	402a      	ands	r2, r5
   1ff28:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1ff2c:	d819      	bhi.n	1ff62 <_strtod_l+0x8a2>
   1ff2e:	0d12      	lsrs	r2, r2, #20
   1ff30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ff34:	fa01 f303 	lsl.w	r3, r1, r3
   1ff38:	4298      	cmp	r0, r3
   1ff3a:	d117      	bne.n	1ff6c <_strtod_l+0x8ac>
   1ff3c:	4bb0      	ldr	r3, [pc, #704]	; (20200 <_strtod_l+0xb40>)
   1ff3e:	429d      	cmp	r5, r3
   1ff40:	d102      	bne.n	1ff48 <_strtod_l+0x888>
   1ff42:	3001      	adds	r0, #1
   1ff44:	f43f adef 	beq.w	1fb26 <_strtod_l+0x466>
   1ff48:	4bac      	ldr	r3, [pc, #688]	; (201fc <_strtod_l+0xb3c>)
   1ff4a:	f04f 0a00 	mov.w	sl, #0
   1ff4e:	402b      	ands	r3, r5
   1ff50:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1ff54:	9b06      	ldr	r3, [sp, #24]
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d1a6      	bne.n	1fea8 <_strtod_l+0x7e8>
   1ff5a:	e5ef      	b.n	1fb3c <_strtod_l+0x47c>
   1ff5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff60:	e7ea      	b.n	1ff38 <_strtod_l+0x878>
   1ff62:	460b      	mov	r3, r1
   1ff64:	e7e8      	b.n	1ff38 <_strtod_l+0x878>
   1ff66:	ea53 030a 	orrs.w	r3, r3, sl
   1ff6a:	d08f      	beq.n	1fe8c <_strtod_l+0x7cc>
   1ff6c:	b1de      	cbz	r6, 1ffa6 <_strtod_l+0x8e6>
   1ff6e:	422e      	tst	r6, r5
   1ff70:	d0f0      	beq.n	1ff54 <_strtod_l+0x894>
   1ff72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff74:	4650      	mov	r0, sl
   1ff76:	9a06      	ldr	r2, [sp, #24]
   1ff78:	4659      	mov	r1, fp
   1ff7a:	b1bb      	cbz	r3, 1ffac <_strtod_l+0x8ec>
   1ff7c:	f025 fb95 	bl	456aa <sulp>
   1ff80:	4602      	mov	r2, r0
   1ff82:	460b      	mov	r3, r1
   1ff84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ff88:	f7fc fa60 	bl	1c44c <__adddf3>
   1ff8c:	4682      	mov	sl, r0
   1ff8e:	468b      	mov	fp, r1
   1ff90:	e7e0      	b.n	1ff54 <_strtod_l+0x894>
   1ff92:	4013      	ands	r3, r2
   1ff94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1ff98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ff9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1ffa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1ffa4:	e7d6      	b.n	1ff54 <_strtod_l+0x894>
   1ffa6:	ea18 0f0a 	tst.w	r8, sl
   1ffaa:	e7e1      	b.n	1ff70 <_strtod_l+0x8b0>
   1ffac:	f025 fb7d 	bl	456aa <sulp>
   1ffb0:	4602      	mov	r2, r0
   1ffb2:	460b      	mov	r3, r1
   1ffb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ffb8:	f7fc fa46 	bl	1c448 <__aeabi_dsub>
   1ffbc:	2200      	movs	r2, #0
   1ffbe:	2300      	movs	r3, #0
   1ffc0:	4682      	mov	sl, r0
   1ffc2:	468b      	mov	fp, r1
   1ffc4:	f7fc fe60 	bl	1cc88 <__aeabi_dcmpeq>
   1ffc8:	2800      	cmp	r0, #0
   1ffca:	d0c3      	beq.n	1ff54 <_strtod_l+0x894>
   1ffcc:	e61a      	b.n	1fc04 <_strtod_l+0x544>
   1ffce:	9905      	ldr	r1, [sp, #20]
   1ffd0:	4620      	mov	r0, r4
   1ffd2:	f026 f8cc 	bl	4616e <__ratio>
   1ffd6:	2200      	movs	r2, #0
   1ffd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ffdc:	ee10 0a10 	vmov	r0, s0
   1ffe0:	ec57 6b10 	vmov	r6, r7, d0
   1ffe4:	4639      	mov	r1, r7
   1ffe6:	f7fc fe63 	bl	1ccb0 <__aeabi_dcmple>
   1ffea:	2800      	cmp	r0, #0
   1ffec:	d073      	beq.n	200d6 <_strtod_l+0xa16>
   1ffee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fff0:	2b00      	cmp	r3, #0
   1fff2:	d046      	beq.n	20082 <_strtod_l+0x9c2>
   1fff4:	f04f 0800 	mov.w	r8, #0
   1fff8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 20204 <_strtod_l+0xb44>
   1fffc:	2600      	movs	r6, #0
   1fffe:	4f81      	ldr	r7, [pc, #516]	; (20204 <_strtod_l+0xb44>)
   20000:	4b7e      	ldr	r3, [pc, #504]	; (201fc <_strtod_l+0xb3c>)
   20002:	402b      	ands	r3, r5
   20004:	930f      	str	r3, [sp, #60]	; 0x3c
   20006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20008:	4b7f      	ldr	r3, [pc, #508]	; (20208 <_strtod_l+0xb48>)
   2000a:	429a      	cmp	r2, r3
   2000c:	f040 80ab 	bne.w	20166 <_strtod_l+0xaa6>
   20010:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   20014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   20018:	ec4b ab10 	vmov	d0, sl, fp
   2001c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   20020:	f020 ffd8 	bl	40fd4 <__ulp>
   20024:	4640      	mov	r0, r8
   20026:	4649      	mov	r1, r9
   20028:	ec53 2b10 	vmov	r2, r3, d0
   2002c:	f7fc fbc4 	bl	1c7b8 <__aeabi_dmul>
   20030:	4652      	mov	r2, sl
   20032:	465b      	mov	r3, fp
   20034:	f7fc fa0a 	bl	1c44c <__adddf3>
   20038:	460b      	mov	r3, r1
   2003a:	4970      	ldr	r1, [pc, #448]	; (201fc <_strtod_l+0xb3c>)
   2003c:	4682      	mov	sl, r0
   2003e:	4a73      	ldr	r2, [pc, #460]	; (2020c <_strtod_l+0xb4c>)
   20040:	4019      	ands	r1, r3
   20042:	4291      	cmp	r1, r2
   20044:	d95b      	bls.n	200fe <_strtod_l+0xa3e>
   20046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   2004c:	4293      	cmp	r3, r2
   2004e:	d103      	bne.n	20058 <_strtod_l+0x998>
   20050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20052:	3301      	adds	r3, #1
   20054:	f43f ad67 	beq.w	1fb26 <_strtod_l+0x466>
   20058:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 20200 <_strtod_l+0xb40>
   2005c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   20060:	991c      	ldr	r1, [sp, #112]	; 0x70
   20062:	9804      	ldr	r0, [sp, #16]
   20064:	f025 fdee 	bl	45c44 <_Bfree>
   20068:	9907      	ldr	r1, [sp, #28]
   2006a:	9804      	ldr	r0, [sp, #16]
   2006c:	f025 fdea 	bl	45c44 <_Bfree>
   20070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20074:	f025 fde6 	bl	45c44 <_Bfree>
   20078:	4621      	mov	r1, r4
   2007a:	9804      	ldr	r0, [sp, #16]
   2007c:	f025 fde2 	bl	45c44 <_Bfree>
   20080:	e62f      	b.n	1fce2 <_strtod_l+0x622>
   20082:	f1ba 0f00 	cmp.w	sl, #0
   20086:	d118      	bne.n	200ba <_strtod_l+0x9fa>
   20088:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2008c:	b9db      	cbnz	r3, 200c6 <_strtod_l+0xa06>
   2008e:	2200      	movs	r2, #0
   20090:	4b5c      	ldr	r3, [pc, #368]	; (20204 <_strtod_l+0xb44>)
   20092:	4630      	mov	r0, r6
   20094:	4639      	mov	r1, r7
   20096:	f7fc fe01 	bl	1cc9c <__aeabi_dcmplt>
   2009a:	b9c8      	cbnz	r0, 200d0 <_strtod_l+0xa10>
   2009c:	4630      	mov	r0, r6
   2009e:	4639      	mov	r1, r7
   200a0:	2200      	movs	r2, #0
   200a2:	4b5b      	ldr	r3, [pc, #364]	; (20210 <_strtod_l+0xb50>)
   200a4:	f7fc fb88 	bl	1c7b8 <__aeabi_dmul>
   200a8:	4606      	mov	r6, r0
   200aa:	460f      	mov	r7, r1
   200ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   200b0:	9618      	str	r6, [sp, #96]	; 0x60
   200b2:	9319      	str	r3, [sp, #100]	; 0x64
   200b4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   200b8:	e7a2      	b.n	20000 <_strtod_l+0x940>
   200ba:	f1ba 0f01 	cmp.w	sl, #1
   200be:	d102      	bne.n	200c6 <_strtod_l+0xa06>
   200c0:	2d00      	cmp	r5, #0
   200c2:	f43f ad9f 	beq.w	1fc04 <_strtod_l+0x544>
   200c6:	f04f 0800 	mov.w	r8, #0
   200ca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 20214 <_strtod_l+0xb54>
   200ce:	e795      	b.n	1fffc <_strtod_l+0x93c>
   200d0:	2600      	movs	r6, #0
   200d2:	4f4f      	ldr	r7, [pc, #316]	; (20210 <_strtod_l+0xb50>)
   200d4:	e7ea      	b.n	200ac <_strtod_l+0x9ec>
   200d6:	4b4e      	ldr	r3, [pc, #312]	; (20210 <_strtod_l+0xb50>)
   200d8:	4630      	mov	r0, r6
   200da:	4639      	mov	r1, r7
   200dc:	2200      	movs	r2, #0
   200de:	f7fc fb6b 	bl	1c7b8 <__aeabi_dmul>
   200e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200e4:	4606      	mov	r6, r0
   200e6:	460f      	mov	r7, r1
   200e8:	b933      	cbnz	r3, 200f8 <_strtod_l+0xa38>
   200ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   200ee:	9010      	str	r0, [sp, #64]	; 0x40
   200f0:	9311      	str	r3, [sp, #68]	; 0x44
   200f2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   200f6:	e783      	b.n	20000 <_strtod_l+0x940>
   200f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   200fc:	e7f9      	b.n	200f2 <_strtod_l+0xa32>
   200fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   20102:	9b06      	ldr	r3, [sp, #24]
   20104:	2b00      	cmp	r3, #0
   20106:	d1ab      	bne.n	20060 <_strtod_l+0x9a0>
   20108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   2010c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2010e:	0d1b      	lsrs	r3, r3, #20
   20110:	051b      	lsls	r3, r3, #20
   20112:	429a      	cmp	r2, r3
   20114:	d1a4      	bne.n	20060 <_strtod_l+0x9a0>
   20116:	4630      	mov	r0, r6
   20118:	4639      	mov	r1, r7
   2011a:	f7fd f863 	bl	1d1e4 <__aeabi_d2lz>
   2011e:	f7fc fb1d 	bl	1c75c <__aeabi_l2d>
   20122:	4602      	mov	r2, r0
   20124:	460b      	mov	r3, r1
   20126:	4630      	mov	r0, r6
   20128:	4639      	mov	r1, r7
   2012a:	f7fc f98d 	bl	1c448 <__aeabi_dsub>
   2012e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   20132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20134:	4606      	mov	r6, r0
   20136:	ea43 030a 	orr.w	r3, r3, sl
   2013a:	460f      	mov	r7, r1
   2013c:	4313      	orrs	r3, r2
   2013e:	d06b      	beq.n	20218 <_strtod_l+0xb58>
   20140:	a327      	add	r3, pc, #156	; (adr r3, 201e0 <_strtod_l+0xb20>)
   20142:	e9d3 2300 	ldrd	r2, r3, [r3]
   20146:	f7fc fda9 	bl	1cc9c <__aeabi_dcmplt>
   2014a:	2800      	cmp	r0, #0
   2014c:	f47f acf6 	bne.w	1fb3c <_strtod_l+0x47c>
   20150:	4630      	mov	r0, r6
   20152:	4639      	mov	r1, r7
   20154:	a324      	add	r3, pc, #144	; (adr r3, 201e8 <_strtod_l+0xb28>)
   20156:	e9d3 2300 	ldrd	r2, r3, [r3]
   2015a:	f7fc fdbd 	bl	1ccd8 <__aeabi_dcmpgt>
   2015e:	2800      	cmp	r0, #0
   20160:	f43f af7e 	beq.w	20060 <_strtod_l+0x9a0>
   20164:	e4ea      	b.n	1fb3c <_strtod_l+0x47c>
   20166:	9b06      	ldr	r3, [sp, #24]
   20168:	b31b      	cbz	r3, 201b2 <_strtod_l+0xaf2>
   2016a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2016c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   20170:	d81f      	bhi.n	201b2 <_strtod_l+0xaf2>
   20172:	4630      	mov	r0, r6
   20174:	4639      	mov	r1, r7
   20176:	a31e      	add	r3, pc, #120	; (adr r3, 201f0 <_strtod_l+0xb30>)
   20178:	e9d3 2300 	ldrd	r2, r3, [r3]
   2017c:	f7fc fd98 	bl	1ccb0 <__aeabi_dcmple>
   20180:	b190      	cbz	r0, 201a8 <_strtod_l+0xae8>
   20182:	4639      	mov	r1, r7
   20184:	4630      	mov	r0, r6
   20186:	f7fc fdd9 	bl	1cd3c <__aeabi_d2uiz>
   2018a:	2800      	cmp	r0, #0
   2018c:	bf08      	it	eq
   2018e:	2001      	moveq	r0, #1
   20190:	f7fc fa98 	bl	1c6c4 <__aeabi_ui2d>
   20194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20196:	4606      	mov	r6, r0
   20198:	460f      	mov	r7, r1
   2019a:	b9db      	cbnz	r3, 201d4 <_strtod_l+0xb14>
   2019c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   201a0:	9012      	str	r0, [sp, #72]	; 0x48
   201a2:	9313      	str	r3, [sp, #76]	; 0x4c
   201a4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   201a8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   201ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201ae:	eba3 0902 	sub.w	r9, r3, r2
   201b2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   201b6:	f020 ff0d 	bl	40fd4 <__ulp>
   201ba:	4640      	mov	r0, r8
   201bc:	4649      	mov	r1, r9
   201be:	ec53 2b10 	vmov	r2, r3, d0
   201c2:	f7fc faf9 	bl	1c7b8 <__aeabi_dmul>
   201c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   201ca:	f7fc f93f 	bl	1c44c <__adddf3>
   201ce:	4682      	mov	sl, r0
   201d0:	468b      	mov	fp, r1
   201d2:	e796      	b.n	20102 <_strtod_l+0xa42>
   201d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   201d8:	e7e4      	b.n	201a4 <_strtod_l+0xae4>
   201da:	bf00      	nop
   201dc:	f3af 8000 	nop.w
   201e0:	94a03595 	.word	0x94a03595
   201e4:	3fdfffff 	.word	0x3fdfffff
   201e8:	35afe535 	.word	0x35afe535
   201ec:	3fe00000 	.word	0x3fe00000
   201f0:	ffc00000 	.word	0xffc00000
   201f4:	41dfffff 	.word	0x41dfffff
   201f8:	000fffff 	.word	0x000fffff
   201fc:	7ff00000 	.word	0x7ff00000
   20200:	7fefffff 	.word	0x7fefffff
   20204:	3ff00000 	.word	0x3ff00000
   20208:	7fe00000 	.word	0x7fe00000
   2020c:	7c9fffff 	.word	0x7c9fffff
   20210:	3fe00000 	.word	0x3fe00000
   20214:	bff00000 	.word	0xbff00000
   20218:	a30b      	add	r3, pc, #44	; (adr r3, 20248 <_strtod_l+0xb88>)
   2021a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2021e:	f7fc fd3d 	bl	1cc9c <__aeabi_dcmplt>
   20222:	e79c      	b.n	2015e <_strtod_l+0xa9e>
   20224:	2300      	movs	r3, #0
   20226:	930c      	str	r3, [sp, #48]	; 0x30
   20228:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2022a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2022c:	6013      	str	r3, [r2, #0]
   2022e:	f7ff ba89 	b.w	1f744 <_strtod_l+0x84>
   20232:	2b65      	cmp	r3, #101	; 0x65
   20234:	f43f ab75 	beq.w	1f922 <_strtod_l+0x262>
   20238:	2b45      	cmp	r3, #69	; 0x45
   2023a:	f43f ab72 	beq.w	1f922 <_strtod_l+0x262>
   2023e:	2201      	movs	r2, #1
   20240:	f7ff bba6 	b.w	1f990 <_strtod_l+0x2d0>
   20244:	f3af 8000 	nop.w
   20248:	94a03595 	.word	0x94a03595
   2024c:	3fcfffff 	.word	0x3fcfffff

00020250 <_dtoa_r>:
   20250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20254:	6a47      	ldr	r7, [r0, #36]	; 0x24
   20256:	b099      	sub	sp, #100	; 0x64
   20258:	4683      	mov	fp, r0
   2025a:	9108      	str	r1, [sp, #32]
   2025c:	920d      	str	r2, [sp, #52]	; 0x34
   2025e:	9314      	str	r3, [sp, #80]	; 0x50
   20260:	9e22      	ldr	r6, [sp, #136]	; 0x88
   20262:	ec55 4b10 	vmov	r4, r5, d0
   20266:	e9cd 4500 	strd	r4, r5, [sp]
   2026a:	b947      	cbnz	r7, 2027e <_dtoa_r+0x2e>
   2026c:	2010      	movs	r0, #16
   2026e:	f01f fa57 	bl	3f720 <malloc>
   20272:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   20276:	6007      	str	r7, [r0, #0]
   20278:	60c7      	str	r7, [r0, #12]
   2027a:	e9c0 7701 	strd	r7, r7, [r0, #4]
   2027e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   20282:	6819      	ldr	r1, [r3, #0]
   20284:	b159      	cbz	r1, 2029e <_dtoa_r+0x4e>
   20286:	685a      	ldr	r2, [r3, #4]
   20288:	2301      	movs	r3, #1
   2028a:	4658      	mov	r0, fp
   2028c:	4093      	lsls	r3, r2
   2028e:	604a      	str	r2, [r1, #4]
   20290:	608b      	str	r3, [r1, #8]
   20292:	f025 fcd7 	bl	45c44 <_Bfree>
   20296:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   2029a:	2200      	movs	r2, #0
   2029c:	601a      	str	r2, [r3, #0]
   2029e:	1e2b      	subs	r3, r5, #0
   202a0:	bfb7      	itett	lt
   202a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   202a6:	2300      	movge	r3, #0
   202a8:	2201      	movlt	r2, #1
   202aa:	9301      	strlt	r3, [sp, #4]
   202ac:	bfa8      	it	ge
   202ae:	6033      	strge	r3, [r6, #0]
   202b0:	9c01      	ldr	r4, [sp, #4]
   202b2:	4bb1      	ldr	r3, [pc, #708]	; (20578 <_dtoa_r+0x328>)
   202b4:	bfb8      	it	lt
   202b6:	6032      	strlt	r2, [r6, #0]
   202b8:	43a3      	bics	r3, r4
   202ba:	d11a      	bne.n	202f2 <_dtoa_r+0xa2>
   202bc:	f242 730f 	movw	r3, #9999	; 0x270f
   202c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   202c2:	6013      	str	r3, [r2, #0]
   202c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   202c8:	9a00      	ldr	r2, [sp, #0]
   202ca:	4313      	orrs	r3, r2
   202cc:	f000 8547 	beq.w	20d5e <_dtoa_r+0xb0e>
   202d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   202d2:	b953      	cbnz	r3, 202ea <_dtoa_r+0x9a>
   202d4:	4ba9      	ldr	r3, [pc, #676]	; (2057c <_dtoa_r+0x32c>)
   202d6:	e023      	b.n	20320 <_dtoa_r+0xd0>
   202d8:	4ba9      	ldr	r3, [pc, #676]	; (20580 <_dtoa_r+0x330>)
   202da:	9303      	str	r3, [sp, #12]
   202dc:	3308      	adds	r3, #8
   202de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   202e0:	6013      	str	r3, [r2, #0]
   202e2:	9803      	ldr	r0, [sp, #12]
   202e4:	b019      	add	sp, #100	; 0x64
   202e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202ea:	4ba4      	ldr	r3, [pc, #656]	; (2057c <_dtoa_r+0x32c>)
   202ec:	9303      	str	r3, [sp, #12]
   202ee:	3303      	adds	r3, #3
   202f0:	e7f5      	b.n	202de <_dtoa_r+0x8e>
   202f2:	ed9d 7b00 	vldr	d7, [sp]
   202f6:	2200      	movs	r2, #0
   202f8:	2300      	movs	r3, #0
   202fa:	ec51 0b17 	vmov	r0, r1, d7
   202fe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   20302:	f7fc fcc1 	bl	1cc88 <__aeabi_dcmpeq>
   20306:	4607      	mov	r7, r0
   20308:	b160      	cbz	r0, 20324 <_dtoa_r+0xd4>
   2030a:	2301      	movs	r3, #1
   2030c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2030e:	6013      	str	r3, [r2, #0]
   20310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20312:	2b00      	cmp	r3, #0
   20314:	f000 8520 	beq.w	20d58 <_dtoa_r+0xb08>
   20318:	4b9a      	ldr	r3, [pc, #616]	; (20584 <_dtoa_r+0x334>)
   2031a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   2031c:	6013      	str	r3, [r2, #0]
   2031e:	3b01      	subs	r3, #1
   20320:	9303      	str	r3, [sp, #12]
   20322:	e7de      	b.n	202e2 <_dtoa_r+0x92>
   20324:	f3c4 560a 	ubfx	r6, r4, #20, #11
   20328:	aa16      	add	r2, sp, #88	; 0x58
   2032a:	a917      	add	r1, sp, #92	; 0x5c
   2032c:	4658      	mov	r0, fp
   2032e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   20332:	f025 fece 	bl	460d2 <__d2b>
   20336:	4680      	mov	r8, r0
   20338:	2e00      	cmp	r6, #0
   2033a:	d07d      	beq.n	20438 <_dtoa_r+0x1e8>
   2033c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2033e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   20342:	9715      	str	r7, [sp, #84]	; 0x54
   20344:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20348:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   2034c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   20350:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   20354:	2200      	movs	r2, #0
   20356:	4b8c      	ldr	r3, [pc, #560]	; (20588 <_dtoa_r+0x338>)
   20358:	4620      	mov	r0, r4
   2035a:	4629      	mov	r1, r5
   2035c:	f7fc f874 	bl	1c448 <__aeabi_dsub>
   20360:	a37f      	add	r3, pc, #508	; (adr r3, 20560 <_dtoa_r+0x310>)
   20362:	e9d3 2300 	ldrd	r2, r3, [r3]
   20366:	f7fc fa27 	bl	1c7b8 <__aeabi_dmul>
   2036a:	a37f      	add	r3, pc, #508	; (adr r3, 20568 <_dtoa_r+0x318>)
   2036c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20370:	f7fc f86c 	bl	1c44c <__adddf3>
   20374:	4604      	mov	r4, r0
   20376:	460d      	mov	r5, r1
   20378:	4630      	mov	r0, r6
   2037a:	f7fc f9b3 	bl	1c6e4 <__aeabi_i2d>
   2037e:	a37c      	add	r3, pc, #496	; (adr r3, 20570 <_dtoa_r+0x320>)
   20380:	e9d3 2300 	ldrd	r2, r3, [r3]
   20384:	f7fc fa18 	bl	1c7b8 <__aeabi_dmul>
   20388:	4602      	mov	r2, r0
   2038a:	460b      	mov	r3, r1
   2038c:	4620      	mov	r0, r4
   2038e:	4629      	mov	r1, r5
   20390:	f7fc f85c 	bl	1c44c <__adddf3>
   20394:	4604      	mov	r4, r0
   20396:	460d      	mov	r5, r1
   20398:	f7fc fca8 	bl	1ccec <__aeabi_d2iz>
   2039c:	2200      	movs	r2, #0
   2039e:	4682      	mov	sl, r0
   203a0:	2300      	movs	r3, #0
   203a2:	4620      	mov	r0, r4
   203a4:	4629      	mov	r1, r5
   203a6:	f7fc fc79 	bl	1cc9c <__aeabi_dcmplt>
   203aa:	b148      	cbz	r0, 203c0 <_dtoa_r+0x170>
   203ac:	4650      	mov	r0, sl
   203ae:	f7fc f999 	bl	1c6e4 <__aeabi_i2d>
   203b2:	4622      	mov	r2, r4
   203b4:	462b      	mov	r3, r5
   203b6:	f7fc fc67 	bl	1cc88 <__aeabi_dcmpeq>
   203ba:	b908      	cbnz	r0, 203c0 <_dtoa_r+0x170>
   203bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   203c0:	f1ba 0f16 	cmp.w	sl, #22
   203c4:	d857      	bhi.n	20476 <_dtoa_r+0x226>
   203c6:	4b71      	ldr	r3, [pc, #452]	; (2058c <_dtoa_r+0x33c>)
   203c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   203cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   203d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   203d4:	f7fc fc62 	bl	1cc9c <__aeabi_dcmplt>
   203d8:	2800      	cmp	r0, #0
   203da:	d04e      	beq.n	2047a <_dtoa_r+0x22a>
   203dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   203e0:	2300      	movs	r3, #0
   203e2:	9311      	str	r3, [sp, #68]	; 0x44
   203e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   203e6:	1b9e      	subs	r6, r3, r6
   203e8:	1e73      	subs	r3, r6, #1
   203ea:	9307      	str	r3, [sp, #28]
   203ec:	bf49      	itett	mi
   203ee:	f1c6 0301 	rsbmi	r3, r6, #1
   203f2:	2300      	movpl	r3, #0
   203f4:	9306      	strmi	r3, [sp, #24]
   203f6:	2300      	movmi	r3, #0
   203f8:	bf54      	ite	pl
   203fa:	9306      	strpl	r3, [sp, #24]
   203fc:	9307      	strmi	r3, [sp, #28]
   203fe:	f1ba 0f00 	cmp.w	sl, #0
   20402:	db3c      	blt.n	2047e <_dtoa_r+0x22e>
   20404:	9b07      	ldr	r3, [sp, #28]
   20406:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   2040a:	4453      	add	r3, sl
   2040c:	9307      	str	r3, [sp, #28]
   2040e:	2300      	movs	r3, #0
   20410:	9309      	str	r3, [sp, #36]	; 0x24
   20412:	9b08      	ldr	r3, [sp, #32]
   20414:	2b09      	cmp	r3, #9
   20416:	f200 808d 	bhi.w	20534 <_dtoa_r+0x2e4>
   2041a:	2b05      	cmp	r3, #5
   2041c:	bfc5      	ittet	gt
   2041e:	3b04      	subgt	r3, #4
   20420:	2400      	movgt	r4, #0
   20422:	2401      	movle	r4, #1
   20424:	9308      	strgt	r3, [sp, #32]
   20426:	9b08      	ldr	r3, [sp, #32]
   20428:	3b02      	subs	r3, #2
   2042a:	2b03      	cmp	r3, #3
   2042c:	f200 808d 	bhi.w	2054a <_dtoa_r+0x2fa>
   20430:	e8df f003 	tbb	[pc, r3]
   20434:	7e3a3c2f 	.word	0x7e3a3c2f
   20438:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   2043c:	441e      	add	r6, r3
   2043e:	f206 4032 	addw	r0, r6, #1074	; 0x432
   20442:	2820      	cmp	r0, #32
   20444:	dd11      	ble.n	2046a <_dtoa_r+0x21a>
   20446:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   2044a:	9b00      	ldr	r3, [sp, #0]
   2044c:	4084      	lsls	r4, r0
   2044e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   20452:	fa23 f000 	lsr.w	r0, r3, r0
   20456:	4320      	orrs	r0, r4
   20458:	f7fc f934 	bl	1c6c4 <__aeabi_ui2d>
   2045c:	2301      	movs	r3, #1
   2045e:	4604      	mov	r4, r0
   20460:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   20464:	3e01      	subs	r6, #1
   20466:	9315      	str	r3, [sp, #84]	; 0x54
   20468:	e774      	b.n	20354 <_dtoa_r+0x104>
   2046a:	f1c0 0020 	rsb	r0, r0, #32
   2046e:	9b00      	ldr	r3, [sp, #0]
   20470:	fa03 f000 	lsl.w	r0, r3, r0
   20474:	e7f0      	b.n	20458 <_dtoa_r+0x208>
   20476:	2301      	movs	r3, #1
   20478:	e7b3      	b.n	203e2 <_dtoa_r+0x192>
   2047a:	9011      	str	r0, [sp, #68]	; 0x44
   2047c:	e7b2      	b.n	203e4 <_dtoa_r+0x194>
   2047e:	9b06      	ldr	r3, [sp, #24]
   20480:	eba3 030a 	sub.w	r3, r3, sl
   20484:	9306      	str	r3, [sp, #24]
   20486:	f1ca 0300 	rsb	r3, sl, #0
   2048a:	9309      	str	r3, [sp, #36]	; 0x24
   2048c:	2300      	movs	r3, #0
   2048e:	9310      	str	r3, [sp, #64]	; 0x40
   20490:	e7bf      	b.n	20412 <_dtoa_r+0x1c2>
   20492:	2300      	movs	r3, #0
   20494:	930c      	str	r3, [sp, #48]	; 0x30
   20496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20498:	2b00      	cmp	r3, #0
   2049a:	dc59      	bgt.n	20550 <_dtoa_r+0x300>
   2049c:	2301      	movs	r3, #1
   2049e:	4699      	mov	r9, r3
   204a0:	461a      	mov	r2, r3
   204a2:	9304      	str	r3, [sp, #16]
   204a4:	920d      	str	r2, [sp, #52]	; 0x34
   204a6:	e00c      	b.n	204c2 <_dtoa_r+0x272>
   204a8:	2301      	movs	r3, #1
   204aa:	e7f3      	b.n	20494 <_dtoa_r+0x244>
   204ac:	2300      	movs	r3, #0
   204ae:	930c      	str	r3, [sp, #48]	; 0x30
   204b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   204b2:	4453      	add	r3, sl
   204b4:	f103 0901 	add.w	r9, r3, #1
   204b8:	9304      	str	r3, [sp, #16]
   204ba:	464b      	mov	r3, r9
   204bc:	2b01      	cmp	r3, #1
   204be:	bfb8      	it	lt
   204c0:	2301      	movlt	r3, #1
   204c2:	2200      	movs	r2, #0
   204c4:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   204c8:	606a      	str	r2, [r5, #4]
   204ca:	2204      	movs	r2, #4
   204cc:	f102 0014 	add.w	r0, r2, #20
   204d0:	6869      	ldr	r1, [r5, #4]
   204d2:	4298      	cmp	r0, r3
   204d4:	d940      	bls.n	20558 <_dtoa_r+0x308>
   204d6:	4658      	mov	r0, fp
   204d8:	f025 fb80 	bl	45bdc <_Balloc>
   204dc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   204e0:	6028      	str	r0, [r5, #0]
   204e2:	f1b9 0f0e 	cmp.w	r9, #14
   204e6:	681b      	ldr	r3, [r3, #0]
   204e8:	9303      	str	r3, [sp, #12]
   204ea:	f200 80d4 	bhi.w	20696 <_dtoa_r+0x446>
   204ee:	2c00      	cmp	r4, #0
   204f0:	f000 80d1 	beq.w	20696 <_dtoa_r+0x446>
   204f4:	f1ba 0f00 	cmp.w	sl, #0
   204f8:	dd66      	ble.n	205c8 <_dtoa_r+0x378>
   204fa:	4a24      	ldr	r2, [pc, #144]	; (2058c <_dtoa_r+0x33c>)
   204fc:	f00a 030f 	and.w	r3, sl, #15
   20500:	ea4f 142a 	mov.w	r4, sl, asr #4
   20504:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20508:	06e2      	lsls	r2, r4, #27
   2050a:	ed93 7b00 	vldr	d7, [r3]
   2050e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   20512:	d557      	bpl.n	205c4 <_dtoa_r+0x374>
   20514:	4b1e      	ldr	r3, [pc, #120]	; (20590 <_dtoa_r+0x340>)
   20516:	f004 040f 	and.w	r4, r4, #15
   2051a:	2603      	movs	r6, #3
   2051c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20520:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20524:	f7fc fa72 	bl	1ca0c <__aeabi_ddiv>
   20528:	e9cd 0100 	strd	r0, r1, [sp]
   2052c:	4d18      	ldr	r5, [pc, #96]	; (20590 <_dtoa_r+0x340>)
   2052e:	e03e      	b.n	205ae <_dtoa_r+0x35e>
   20530:	2301      	movs	r3, #1
   20532:	e7bc      	b.n	204ae <_dtoa_r+0x25e>
   20534:	2401      	movs	r4, #1
   20536:	2300      	movs	r3, #0
   20538:	940c      	str	r4, [sp, #48]	; 0x30
   2053a:	9308      	str	r3, [sp, #32]
   2053c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20540:	2200      	movs	r2, #0
   20542:	9304      	str	r3, [sp, #16]
   20544:	4699      	mov	r9, r3
   20546:	2312      	movs	r3, #18
   20548:	e7ac      	b.n	204a4 <_dtoa_r+0x254>
   2054a:	2301      	movs	r3, #1
   2054c:	930c      	str	r3, [sp, #48]	; 0x30
   2054e:	e7f5      	b.n	2053c <_dtoa_r+0x2ec>
   20550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20552:	9304      	str	r3, [sp, #16]
   20554:	4699      	mov	r9, r3
   20556:	e7b4      	b.n	204c2 <_dtoa_r+0x272>
   20558:	3101      	adds	r1, #1
   2055a:	0052      	lsls	r2, r2, #1
   2055c:	6069      	str	r1, [r5, #4]
   2055e:	e7b5      	b.n	204cc <_dtoa_r+0x27c>
   20560:	636f4361 	.word	0x636f4361
   20564:	3fd287a7 	.word	0x3fd287a7
   20568:	8b60c8b3 	.word	0x8b60c8b3
   2056c:	3fc68a28 	.word	0x3fc68a28
   20570:	509f79fb 	.word	0x509f79fb
   20574:	3fd34413 	.word	0x3fd34413
   20578:	7ff00000 	.word	0x7ff00000
   2057c:	0004f346 	.word	0x0004f346
   20580:	0004f33d 	.word	0x0004f33d
   20584:	0004edb3 	.word	0x0004edb3
   20588:	3ff80000 	.word	0x3ff80000
   2058c:	00046ae8 	.word	0x00046ae8
   20590:	00046ac0 	.word	0x00046ac0
   20594:	07e3      	lsls	r3, r4, #31
   20596:	d508      	bpl.n	205aa <_dtoa_r+0x35a>
   20598:	3601      	adds	r6, #1
   2059a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2059e:	e9d5 2300 	ldrd	r2, r3, [r5]
   205a2:	f7fc f909 	bl	1c7b8 <__aeabi_dmul>
   205a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   205aa:	1064      	asrs	r4, r4, #1
   205ac:	3508      	adds	r5, #8
   205ae:	2c00      	cmp	r4, #0
   205b0:	d1f0      	bne.n	20594 <_dtoa_r+0x344>
   205b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   205b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   205ba:	f7fc fa27 	bl	1ca0c <__aeabi_ddiv>
   205be:	e9cd 0100 	strd	r0, r1, [sp]
   205c2:	e01a      	b.n	205fa <_dtoa_r+0x3aa>
   205c4:	2602      	movs	r6, #2
   205c6:	e7b1      	b.n	2052c <_dtoa_r+0x2dc>
   205c8:	f000 809f 	beq.w	2070a <_dtoa_r+0x4ba>
   205cc:	f1ca 0400 	rsb	r4, sl, #0
   205d0:	4b9e      	ldr	r3, [pc, #632]	; (2084c <_dtoa_r+0x5fc>)
   205d2:	4d9f      	ldr	r5, [pc, #636]	; (20850 <_dtoa_r+0x600>)
   205d4:	2602      	movs	r6, #2
   205d6:	f004 020f 	and.w	r2, r4, #15
   205da:	1124      	asrs	r4, r4, #4
   205dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   205e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   205e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   205e8:	f7fc f8e6 	bl	1c7b8 <__aeabi_dmul>
   205ec:	2300      	movs	r3, #0
   205ee:	e9cd 0100 	strd	r0, r1, [sp]
   205f2:	2c00      	cmp	r4, #0
   205f4:	d17e      	bne.n	206f4 <_dtoa_r+0x4a4>
   205f6:	2b00      	cmp	r3, #0
   205f8:	d1e1      	bne.n	205be <_dtoa_r+0x36e>
   205fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   205fc:	2b00      	cmp	r3, #0
   205fe:	f000 8086 	beq.w	2070e <_dtoa_r+0x4be>
   20602:	2200      	movs	r2, #0
   20604:	4b93      	ldr	r3, [pc, #588]	; (20854 <_dtoa_r+0x604>)
   20606:	e9dd 4500 	ldrd	r4, r5, [sp]
   2060a:	4620      	mov	r0, r4
   2060c:	4629      	mov	r1, r5
   2060e:	f7fc fb45 	bl	1cc9c <__aeabi_dcmplt>
   20612:	2800      	cmp	r0, #0
   20614:	d07b      	beq.n	2070e <_dtoa_r+0x4be>
   20616:	f1b9 0f00 	cmp.w	r9, #0
   2061a:	d078      	beq.n	2070e <_dtoa_r+0x4be>
   2061c:	9b04      	ldr	r3, [sp, #16]
   2061e:	2b00      	cmp	r3, #0
   20620:	dd35      	ble.n	2068e <_dtoa_r+0x43e>
   20622:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   20626:	4620      	mov	r0, r4
   20628:	2200      	movs	r2, #0
   2062a:	4629      	mov	r1, r5
   2062c:	930a      	str	r3, [sp, #40]	; 0x28
   2062e:	3601      	adds	r6, #1
   20630:	4b89      	ldr	r3, [pc, #548]	; (20858 <_dtoa_r+0x608>)
   20632:	f7fc f8c1 	bl	1c7b8 <__aeabi_dmul>
   20636:	9c04      	ldr	r4, [sp, #16]
   20638:	e9cd 0100 	strd	r0, r1, [sp]
   2063c:	4630      	mov	r0, r6
   2063e:	f7fc f851 	bl	1c6e4 <__aeabi_i2d>
   20642:	e9dd 2300 	ldrd	r2, r3, [sp]
   20646:	f7fc f8b7 	bl	1c7b8 <__aeabi_dmul>
   2064a:	2200      	movs	r2, #0
   2064c:	4b83      	ldr	r3, [pc, #524]	; (2085c <_dtoa_r+0x60c>)
   2064e:	f7fb fefd 	bl	1c44c <__adddf3>
   20652:	4606      	mov	r6, r0
   20654:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   20658:	2c00      	cmp	r4, #0
   2065a:	d15c      	bne.n	20716 <_dtoa_r+0x4c6>
   2065c:	2200      	movs	r2, #0
   2065e:	4b80      	ldr	r3, [pc, #512]	; (20860 <_dtoa_r+0x610>)
   20660:	e9dd 0100 	ldrd	r0, r1, [sp]
   20664:	f7fb fef0 	bl	1c448 <__aeabi_dsub>
   20668:	4632      	mov	r2, r6
   2066a:	463b      	mov	r3, r7
   2066c:	e9cd 0100 	strd	r0, r1, [sp]
   20670:	f7fc fb32 	bl	1ccd8 <__aeabi_dcmpgt>
   20674:	2800      	cmp	r0, #0
   20676:	f040 8289 	bne.w	20b8c <_dtoa_r+0x93c>
   2067a:	4632      	mov	r2, r6
   2067c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   20680:	e9dd 0100 	ldrd	r0, r1, [sp]
   20684:	f7fc fb0a 	bl	1cc9c <__aeabi_dcmplt>
   20688:	2800      	cmp	r0, #0
   2068a:	f040 827d 	bne.w	20b88 <_dtoa_r+0x938>
   2068e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   20692:	e9cd 3400 	strd	r3, r4, [sp]
   20696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20698:	2b00      	cmp	r3, #0
   2069a:	f2c0 814c 	blt.w	20936 <_dtoa_r+0x6e6>
   2069e:	f1ba 0f0e 	cmp.w	sl, #14
   206a2:	f300 8148 	bgt.w	20936 <_dtoa_r+0x6e6>
   206a6:	4b69      	ldr	r3, [pc, #420]	; (2084c <_dtoa_r+0x5fc>)
   206a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   206ac:	ed93 7b00 	vldr	d7, [r3]
   206b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   206b2:	2b00      	cmp	r3, #0
   206b4:	ed8d 7b04 	vstr	d7, [sp, #16]
   206b8:	f280 80d6 	bge.w	20868 <_dtoa_r+0x618>
   206bc:	f1b9 0f00 	cmp.w	r9, #0
   206c0:	f300 80d2 	bgt.w	20868 <_dtoa_r+0x618>
   206c4:	f040 825f 	bne.w	20b86 <_dtoa_r+0x936>
   206c8:	2200      	movs	r2, #0
   206ca:	4b65      	ldr	r3, [pc, #404]	; (20860 <_dtoa_r+0x610>)
   206cc:	464c      	mov	r4, r9
   206ce:	464e      	mov	r6, r9
   206d0:	ec51 0b17 	vmov	r0, r1, d7
   206d4:	f7fc f870 	bl	1c7b8 <__aeabi_dmul>
   206d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   206dc:	f7fc faf2 	bl	1ccc4 <__aeabi_dcmpge>
   206e0:	2800      	cmp	r0, #0
   206e2:	f040 8238 	bne.w	20b56 <_dtoa_r+0x906>
   206e6:	9d03      	ldr	r5, [sp, #12]
   206e8:	2331      	movs	r3, #49	; 0x31
   206ea:	f10a 0a01 	add.w	sl, sl, #1
   206ee:	f805 3b01 	strb.w	r3, [r5], #1
   206f2:	e234      	b.n	20b5e <_dtoa_r+0x90e>
   206f4:	07e7      	lsls	r7, r4, #31
   206f6:	d505      	bpl.n	20704 <_dtoa_r+0x4b4>
   206f8:	3601      	adds	r6, #1
   206fa:	e9d5 2300 	ldrd	r2, r3, [r5]
   206fe:	f7fc f85b 	bl	1c7b8 <__aeabi_dmul>
   20702:	2301      	movs	r3, #1
   20704:	1064      	asrs	r4, r4, #1
   20706:	3508      	adds	r5, #8
   20708:	e773      	b.n	205f2 <_dtoa_r+0x3a2>
   2070a:	2602      	movs	r6, #2
   2070c:	e775      	b.n	205fa <_dtoa_r+0x3aa>
   2070e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20712:	464c      	mov	r4, r9
   20714:	e792      	b.n	2063c <_dtoa_r+0x3ec>
   20716:	4b4d      	ldr	r3, [pc, #308]	; (2084c <_dtoa_r+0x5fc>)
   20718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2071c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   20720:	9b03      	ldr	r3, [sp, #12]
   20722:	441c      	add	r4, r3
   20724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20726:	2b00      	cmp	r3, #0
   20728:	d046      	beq.n	207b8 <_dtoa_r+0x568>
   2072a:	4602      	mov	r2, r0
   2072c:	460b      	mov	r3, r1
   2072e:	2000      	movs	r0, #0
   20730:	494c      	ldr	r1, [pc, #304]	; (20864 <_dtoa_r+0x614>)
   20732:	f7fc f96b 	bl	1ca0c <__aeabi_ddiv>
   20736:	4632      	mov	r2, r6
   20738:	463b      	mov	r3, r7
   2073a:	f7fb fe85 	bl	1c448 <__aeabi_dsub>
   2073e:	9d03      	ldr	r5, [sp, #12]
   20740:	4606      	mov	r6, r0
   20742:	460f      	mov	r7, r1
   20744:	e9dd 0100 	ldrd	r0, r1, [sp]
   20748:	f7fc fad0 	bl	1ccec <__aeabi_d2iz>
   2074c:	9012      	str	r0, [sp, #72]	; 0x48
   2074e:	f7fb ffc9 	bl	1c6e4 <__aeabi_i2d>
   20752:	4602      	mov	r2, r0
   20754:	460b      	mov	r3, r1
   20756:	e9dd 0100 	ldrd	r0, r1, [sp]
   2075a:	f7fb fe75 	bl	1c448 <__aeabi_dsub>
   2075e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20760:	4632      	mov	r2, r6
   20762:	3330      	adds	r3, #48	; 0x30
   20764:	f805 3b01 	strb.w	r3, [r5], #1
   20768:	463b      	mov	r3, r7
   2076a:	e9cd 0100 	strd	r0, r1, [sp]
   2076e:	f7fc fa95 	bl	1cc9c <__aeabi_dcmplt>
   20772:	2800      	cmp	r0, #0
   20774:	d15f      	bne.n	20836 <_dtoa_r+0x5e6>
   20776:	2000      	movs	r0, #0
   20778:	4936      	ldr	r1, [pc, #216]	; (20854 <_dtoa_r+0x604>)
   2077a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2077e:	f7fb fe63 	bl	1c448 <__aeabi_dsub>
   20782:	4632      	mov	r2, r6
   20784:	463b      	mov	r3, r7
   20786:	f7fc fa89 	bl	1cc9c <__aeabi_dcmplt>
   2078a:	2800      	cmp	r0, #0
   2078c:	f040 80b2 	bne.w	208f4 <_dtoa_r+0x6a4>
   20790:	42a5      	cmp	r5, r4
   20792:	f43f af7c 	beq.w	2068e <_dtoa_r+0x43e>
   20796:	2200      	movs	r2, #0
   20798:	4b2f      	ldr	r3, [pc, #188]	; (20858 <_dtoa_r+0x608>)
   2079a:	4630      	mov	r0, r6
   2079c:	4639      	mov	r1, r7
   2079e:	f7fc f80b 	bl	1c7b8 <__aeabi_dmul>
   207a2:	2200      	movs	r2, #0
   207a4:	4606      	mov	r6, r0
   207a6:	460f      	mov	r7, r1
   207a8:	4b2b      	ldr	r3, [pc, #172]	; (20858 <_dtoa_r+0x608>)
   207aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   207ae:	f7fc f803 	bl	1c7b8 <__aeabi_dmul>
   207b2:	e9cd 0100 	strd	r0, r1, [sp]
   207b6:	e7c5      	b.n	20744 <_dtoa_r+0x4f4>
   207b8:	4632      	mov	r2, r6
   207ba:	463b      	mov	r3, r7
   207bc:	f7fb fffc 	bl	1c7b8 <__aeabi_dmul>
   207c0:	4625      	mov	r5, r4
   207c2:	9e03      	ldr	r6, [sp, #12]
   207c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   207c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   207cc:	f7fc fa8e 	bl	1ccec <__aeabi_d2iz>
   207d0:	4607      	mov	r7, r0
   207d2:	f7fb ff87 	bl	1c6e4 <__aeabi_i2d>
   207d6:	4602      	mov	r2, r0
   207d8:	3730      	adds	r7, #48	; 0x30
   207da:	460b      	mov	r3, r1
   207dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   207e0:	f7fb fe32 	bl	1c448 <__aeabi_dsub>
   207e4:	f806 7b01 	strb.w	r7, [r6], #1
   207e8:	42a6      	cmp	r6, r4
   207ea:	f04f 0200 	mov.w	r2, #0
   207ee:	e9cd 0100 	strd	r0, r1, [sp]
   207f2:	d125      	bne.n	20840 <_dtoa_r+0x5f0>
   207f4:	4b1b      	ldr	r3, [pc, #108]	; (20864 <_dtoa_r+0x614>)
   207f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   207fa:	f7fb fe27 	bl	1c44c <__adddf3>
   207fe:	4602      	mov	r2, r0
   20800:	460b      	mov	r3, r1
   20802:	e9dd 0100 	ldrd	r0, r1, [sp]
   20806:	f7fc fa67 	bl	1ccd8 <__aeabi_dcmpgt>
   2080a:	2800      	cmp	r0, #0
   2080c:	d172      	bne.n	208f4 <_dtoa_r+0x6a4>
   2080e:	2000      	movs	r0, #0
   20810:	4914      	ldr	r1, [pc, #80]	; (20864 <_dtoa_r+0x614>)
   20812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   20816:	f7fb fe17 	bl	1c448 <__aeabi_dsub>
   2081a:	4602      	mov	r2, r0
   2081c:	460b      	mov	r3, r1
   2081e:	e9dd 0100 	ldrd	r0, r1, [sp]
   20822:	f7fc fa3b 	bl	1cc9c <__aeabi_dcmplt>
   20826:	2800      	cmp	r0, #0
   20828:	f43f af31 	beq.w	2068e <_dtoa_r+0x43e>
   2082c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20830:	1e6a      	subs	r2, r5, #1
   20832:	2b30      	cmp	r3, #48	; 0x30
   20834:	d002      	beq.n	2083c <_dtoa_r+0x5ec>
   20836:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   2083a:	e049      	b.n	208d0 <_dtoa_r+0x680>
   2083c:	4615      	mov	r5, r2
   2083e:	e7f5      	b.n	2082c <_dtoa_r+0x5dc>
   20840:	4b05      	ldr	r3, [pc, #20]	; (20858 <_dtoa_r+0x608>)
   20842:	f7fb ffb9 	bl	1c7b8 <__aeabi_dmul>
   20846:	e9cd 0100 	strd	r0, r1, [sp]
   2084a:	e7bd      	b.n	207c8 <_dtoa_r+0x578>
   2084c:	00046ae8 	.word	0x00046ae8
   20850:	00046ac0 	.word	0x00046ac0
   20854:	3ff00000 	.word	0x3ff00000
   20858:	40240000 	.word	0x40240000
   2085c:	401c0000 	.word	0x401c0000
   20860:	40140000 	.word	0x40140000
   20864:	3fe00000 	.word	0x3fe00000
   20868:	e9dd 6700 	ldrd	r6, r7, [sp]
   2086c:	9d03      	ldr	r5, [sp, #12]
   2086e:	4630      	mov	r0, r6
   20870:	4639      	mov	r1, r7
   20872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20876:	f7fc f8c9 	bl	1ca0c <__aeabi_ddiv>
   2087a:	f7fc fa37 	bl	1ccec <__aeabi_d2iz>
   2087e:	4604      	mov	r4, r0
   20880:	f7fb ff30 	bl	1c6e4 <__aeabi_i2d>
   20884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20888:	f7fb ff96 	bl	1c7b8 <__aeabi_dmul>
   2088c:	4602      	mov	r2, r0
   2088e:	4630      	mov	r0, r6
   20890:	f104 0630 	add.w	r6, r4, #48	; 0x30
   20894:	460b      	mov	r3, r1
   20896:	4639      	mov	r1, r7
   20898:	f7fb fdd6 	bl	1c448 <__aeabi_dsub>
   2089c:	f805 6b01 	strb.w	r6, [r5], #1
   208a0:	9e03      	ldr	r6, [sp, #12]
   208a2:	4602      	mov	r2, r0
   208a4:	460b      	mov	r3, r1
   208a6:	1bae      	subs	r6, r5, r6
   208a8:	45b1      	cmp	r9, r6
   208aa:	d137      	bne.n	2091c <_dtoa_r+0x6cc>
   208ac:	f7fb fdce 	bl	1c44c <__adddf3>
   208b0:	4606      	mov	r6, r0
   208b2:	460f      	mov	r7, r1
   208b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   208b8:	f7fc fa0e 	bl	1ccd8 <__aeabi_dcmpgt>
   208bc:	b9c0      	cbnz	r0, 208f0 <_dtoa_r+0x6a0>
   208be:	4630      	mov	r0, r6
   208c0:	4639      	mov	r1, r7
   208c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   208c6:	f7fc f9df 	bl	1cc88 <__aeabi_dcmpeq>
   208ca:	b108      	cbz	r0, 208d0 <_dtoa_r+0x680>
   208cc:	07e1      	lsls	r1, r4, #31
   208ce:	d40f      	bmi.n	208f0 <_dtoa_r+0x6a0>
   208d0:	4641      	mov	r1, r8
   208d2:	4658      	mov	r0, fp
   208d4:	f025 f9b6 	bl	45c44 <_Bfree>
   208d8:	2300      	movs	r3, #0
   208da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   208dc:	702b      	strb	r3, [r5, #0]
   208de:	f10a 0301 	add.w	r3, sl, #1
   208e2:	6013      	str	r3, [r2, #0]
   208e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   208e6:	2b00      	cmp	r3, #0
   208e8:	f43f acfb 	beq.w	202e2 <_dtoa_r+0x92>
   208ec:	601d      	str	r5, [r3, #0]
   208ee:	e4f8      	b.n	202e2 <_dtoa_r+0x92>
   208f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   208f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   208f8:	1e6b      	subs	r3, r5, #1
   208fa:	2a39      	cmp	r2, #57	; 0x39
   208fc:	d108      	bne.n	20910 <_dtoa_r+0x6c0>
   208fe:	9a03      	ldr	r2, [sp, #12]
   20900:	429a      	cmp	r2, r3
   20902:	d109      	bne.n	20918 <_dtoa_r+0x6c8>
   20904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20906:	9903      	ldr	r1, [sp, #12]
   20908:	3201      	adds	r2, #1
   2090a:	920a      	str	r2, [sp, #40]	; 0x28
   2090c:	2230      	movs	r2, #48	; 0x30
   2090e:	700a      	strb	r2, [r1, #0]
   20910:	781a      	ldrb	r2, [r3, #0]
   20912:	3201      	adds	r2, #1
   20914:	701a      	strb	r2, [r3, #0]
   20916:	e78e      	b.n	20836 <_dtoa_r+0x5e6>
   20918:	461d      	mov	r5, r3
   2091a:	e7eb      	b.n	208f4 <_dtoa_r+0x6a4>
   2091c:	2200      	movs	r2, #0
   2091e:	4b9d      	ldr	r3, [pc, #628]	; (20b94 <_dtoa_r+0x944>)
   20920:	f7fb ff4a 	bl	1c7b8 <__aeabi_dmul>
   20924:	2200      	movs	r2, #0
   20926:	2300      	movs	r3, #0
   20928:	4606      	mov	r6, r0
   2092a:	460f      	mov	r7, r1
   2092c:	f7fc f9ac 	bl	1cc88 <__aeabi_dcmpeq>
   20930:	2800      	cmp	r0, #0
   20932:	d09c      	beq.n	2086e <_dtoa_r+0x61e>
   20934:	e7cc      	b.n	208d0 <_dtoa_r+0x680>
   20936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20938:	2a00      	cmp	r2, #0
   2093a:	f000 80cb 	beq.w	20ad4 <_dtoa_r+0x884>
   2093e:	9a08      	ldr	r2, [sp, #32]
   20940:	2a01      	cmp	r2, #1
   20942:	f300 80ae 	bgt.w	20aa2 <_dtoa_r+0x852>
   20946:	9a15      	ldr	r2, [sp, #84]	; 0x54
   20948:	2a00      	cmp	r2, #0
   2094a:	f000 80a6 	beq.w	20a9a <_dtoa_r+0x84a>
   2094e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   20952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20954:	9d06      	ldr	r5, [sp, #24]
   20956:	9a06      	ldr	r2, [sp, #24]
   20958:	2101      	movs	r1, #1
   2095a:	4658      	mov	r0, fp
   2095c:	441a      	add	r2, r3
   2095e:	9206      	str	r2, [sp, #24]
   20960:	9a07      	ldr	r2, [sp, #28]
   20962:	441a      	add	r2, r3
   20964:	9207      	str	r2, [sp, #28]
   20966:	f025 fa4f 	bl	45e08 <__i2b>
   2096a:	4606      	mov	r6, r0
   2096c:	2d00      	cmp	r5, #0
   2096e:	dd0c      	ble.n	2098a <_dtoa_r+0x73a>
   20970:	9b07      	ldr	r3, [sp, #28]
   20972:	2b00      	cmp	r3, #0
   20974:	dd09      	ble.n	2098a <_dtoa_r+0x73a>
   20976:	42ab      	cmp	r3, r5
   20978:	9a06      	ldr	r2, [sp, #24]
   2097a:	bfa8      	it	ge
   2097c:	462b      	movge	r3, r5
   2097e:	1ad2      	subs	r2, r2, r3
   20980:	1aed      	subs	r5, r5, r3
   20982:	9206      	str	r2, [sp, #24]
   20984:	9a07      	ldr	r2, [sp, #28]
   20986:	1ad3      	subs	r3, r2, r3
   20988:	9307      	str	r3, [sp, #28]
   2098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2098c:	b1f3      	cbz	r3, 209cc <_dtoa_r+0x77c>
   2098e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20990:	2b00      	cmp	r3, #0
   20992:	f000 80a3 	beq.w	20adc <_dtoa_r+0x88c>
   20996:	2c00      	cmp	r4, #0
   20998:	dd10      	ble.n	209bc <_dtoa_r+0x76c>
   2099a:	4631      	mov	r1, r6
   2099c:	4622      	mov	r2, r4
   2099e:	4658      	mov	r0, fp
   209a0:	f020 faca 	bl	40f38 <__pow5mult>
   209a4:	4642      	mov	r2, r8
   209a6:	4601      	mov	r1, r0
   209a8:	4606      	mov	r6, r0
   209aa:	4658      	mov	r0, fp
   209ac:	f025 fa35 	bl	45e1a <__multiply>
   209b0:	4607      	mov	r7, r0
   209b2:	4641      	mov	r1, r8
   209b4:	4658      	mov	r0, fp
   209b6:	46b8      	mov	r8, r7
   209b8:	f025 f944 	bl	45c44 <_Bfree>
   209bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   209be:	1b1a      	subs	r2, r3, r4
   209c0:	d004      	beq.n	209cc <_dtoa_r+0x77c>
   209c2:	4641      	mov	r1, r8
   209c4:	4658      	mov	r0, fp
   209c6:	f020 fab7 	bl	40f38 <__pow5mult>
   209ca:	4680      	mov	r8, r0
   209cc:	2101      	movs	r1, #1
   209ce:	4658      	mov	r0, fp
   209d0:	f025 fa1a 	bl	45e08 <__i2b>
   209d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   209d6:	4604      	mov	r4, r0
   209d8:	2b00      	cmp	r3, #0
   209da:	f340 8081 	ble.w	20ae0 <_dtoa_r+0x890>
   209de:	461a      	mov	r2, r3
   209e0:	4601      	mov	r1, r0
   209e2:	4658      	mov	r0, fp
   209e4:	f020 faa8 	bl	40f38 <__pow5mult>
   209e8:	9b08      	ldr	r3, [sp, #32]
   209ea:	4604      	mov	r4, r0
   209ec:	2b01      	cmp	r3, #1
   209ee:	dd7a      	ble.n	20ae6 <_dtoa_r+0x896>
   209f0:	2700      	movs	r7, #0
   209f2:	6923      	ldr	r3, [r4, #16]
   209f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   209f8:	6918      	ldr	r0, [r3, #16]
   209fa:	f025 f9b5 	bl	45d68 <__hi0bits>
   209fe:	f1c0 0020 	rsb	r0, r0, #32
   20a02:	9b07      	ldr	r3, [sp, #28]
   20a04:	4418      	add	r0, r3
   20a06:	f010 001f 	ands.w	r0, r0, #31
   20a0a:	f000 808b 	beq.w	20b24 <_dtoa_r+0x8d4>
   20a0e:	f1c0 0320 	rsb	r3, r0, #32
   20a12:	2b04      	cmp	r3, #4
   20a14:	f340 8084 	ble.w	20b20 <_dtoa_r+0x8d0>
   20a18:	f1c0 001c 	rsb	r0, r0, #28
   20a1c:	9b06      	ldr	r3, [sp, #24]
   20a1e:	4405      	add	r5, r0
   20a20:	4403      	add	r3, r0
   20a22:	9306      	str	r3, [sp, #24]
   20a24:	9b07      	ldr	r3, [sp, #28]
   20a26:	4403      	add	r3, r0
   20a28:	9307      	str	r3, [sp, #28]
   20a2a:	9b06      	ldr	r3, [sp, #24]
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	dd05      	ble.n	20a3c <_dtoa_r+0x7ec>
   20a30:	4641      	mov	r1, r8
   20a32:	461a      	mov	r2, r3
   20a34:	4658      	mov	r0, fp
   20a36:	f025 fa7f 	bl	45f38 <__lshift>
   20a3a:	4680      	mov	r8, r0
   20a3c:	9b07      	ldr	r3, [sp, #28]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	dd05      	ble.n	20a4e <_dtoa_r+0x7fe>
   20a42:	4621      	mov	r1, r4
   20a44:	461a      	mov	r2, r3
   20a46:	4658      	mov	r0, fp
   20a48:	f025 fa76 	bl	45f38 <__lshift>
   20a4c:	4604      	mov	r4, r0
   20a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20a50:	2b00      	cmp	r3, #0
   20a52:	d069      	beq.n	20b28 <_dtoa_r+0x8d8>
   20a54:	4621      	mov	r1, r4
   20a56:	4640      	mov	r0, r8
   20a58:	f025 fac1 	bl	45fde <__mcmp>
   20a5c:	2800      	cmp	r0, #0
   20a5e:	da63      	bge.n	20b28 <_dtoa_r+0x8d8>
   20a60:	2300      	movs	r3, #0
   20a62:	4641      	mov	r1, r8
   20a64:	220a      	movs	r2, #10
   20a66:	4658      	mov	r0, fp
   20a68:	f025 f903 	bl	45c72 <__multadd>
   20a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20a6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   20a72:	4680      	mov	r8, r0
   20a74:	2b00      	cmp	r3, #0
   20a76:	f000 8179 	beq.w	20d6c <_dtoa_r+0xb1c>
   20a7a:	2300      	movs	r3, #0
   20a7c:	4631      	mov	r1, r6
   20a7e:	220a      	movs	r2, #10
   20a80:	4658      	mov	r0, fp
   20a82:	f025 f8f6 	bl	45c72 <__multadd>
   20a86:	9b04      	ldr	r3, [sp, #16]
   20a88:	4606      	mov	r6, r0
   20a8a:	2b00      	cmp	r3, #0
   20a8c:	f300 808a 	bgt.w	20ba4 <_dtoa_r+0x954>
   20a90:	9b08      	ldr	r3, [sp, #32]
   20a92:	2b02      	cmp	r3, #2
   20a94:	f340 8086 	ble.w	20ba4 <_dtoa_r+0x954>
   20a98:	e04e      	b.n	20b38 <_dtoa_r+0x8e8>
   20a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20a9c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   20aa0:	e757      	b.n	20952 <_dtoa_r+0x702>
   20aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20aa4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   20aa8:	42a3      	cmp	r3, r4
   20aaa:	bfb7      	itett	lt
   20aac:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   20aae:	1b1c      	subge	r4, r3, r4
   20ab0:	9409      	strlt	r4, [sp, #36]	; 0x24
   20ab2:	1ae2      	sublt	r2, r4, r3
   20ab4:	bfbf      	itttt	lt
   20ab6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   20ab8:	2400      	movlt	r4, #0
   20aba:	189b      	addlt	r3, r3, r2
   20abc:	9310      	strlt	r3, [sp, #64]	; 0x40
   20abe:	f1b9 0f00 	cmp.w	r9, #0
   20ac2:	bfb3      	iteet	lt
   20ac4:	9b06      	ldrlt	r3, [sp, #24]
   20ac6:	464b      	movge	r3, r9
   20ac8:	9d06      	ldrge	r5, [sp, #24]
   20aca:	eba3 0509 	sublt.w	r5, r3, r9
   20ace:	bfb8      	it	lt
   20ad0:	2300      	movlt	r3, #0
   20ad2:	e740      	b.n	20956 <_dtoa_r+0x706>
   20ad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20ad6:	9d06      	ldr	r5, [sp, #24]
   20ad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20ada:	e747      	b.n	2096c <_dtoa_r+0x71c>
   20adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ade:	e770      	b.n	209c2 <_dtoa_r+0x772>
   20ae0:	9b08      	ldr	r3, [sp, #32]
   20ae2:	2b01      	cmp	r3, #1
   20ae4:	dc18      	bgt.n	20b18 <_dtoa_r+0x8c8>
   20ae6:	9b00      	ldr	r3, [sp, #0]
   20ae8:	b9b3      	cbnz	r3, 20b18 <_dtoa_r+0x8c8>
   20aea:	9b01      	ldr	r3, [sp, #4]
   20aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20af0:	b9a3      	cbnz	r3, 20b1c <_dtoa_r+0x8cc>
   20af2:	9b01      	ldr	r3, [sp, #4]
   20af4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   20af8:	0d3f      	lsrs	r7, r7, #20
   20afa:	053f      	lsls	r7, r7, #20
   20afc:	b137      	cbz	r7, 20b0c <_dtoa_r+0x8bc>
   20afe:	9b06      	ldr	r3, [sp, #24]
   20b00:	2701      	movs	r7, #1
   20b02:	3301      	adds	r3, #1
   20b04:	9306      	str	r3, [sp, #24]
   20b06:	9b07      	ldr	r3, [sp, #28]
   20b08:	3301      	adds	r3, #1
   20b0a:	9307      	str	r3, [sp, #28]
   20b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20b0e:	2b00      	cmp	r3, #0
   20b10:	f47f af6f 	bne.w	209f2 <_dtoa_r+0x7a2>
   20b14:	2001      	movs	r0, #1
   20b16:	e774      	b.n	20a02 <_dtoa_r+0x7b2>
   20b18:	2700      	movs	r7, #0
   20b1a:	e7f7      	b.n	20b0c <_dtoa_r+0x8bc>
   20b1c:	9f00      	ldr	r7, [sp, #0]
   20b1e:	e7f5      	b.n	20b0c <_dtoa_r+0x8bc>
   20b20:	d083      	beq.n	20a2a <_dtoa_r+0x7da>
   20b22:	4618      	mov	r0, r3
   20b24:	301c      	adds	r0, #28
   20b26:	e779      	b.n	20a1c <_dtoa_r+0x7cc>
   20b28:	f1b9 0f00 	cmp.w	r9, #0
   20b2c:	dc34      	bgt.n	20b98 <_dtoa_r+0x948>
   20b2e:	9b08      	ldr	r3, [sp, #32]
   20b30:	2b02      	cmp	r3, #2
   20b32:	dd31      	ble.n	20b98 <_dtoa_r+0x948>
   20b34:	f8cd 9010 	str.w	r9, [sp, #16]
   20b38:	9b04      	ldr	r3, [sp, #16]
   20b3a:	b963      	cbnz	r3, 20b56 <_dtoa_r+0x906>
   20b3c:	4621      	mov	r1, r4
   20b3e:	2205      	movs	r2, #5
   20b40:	4658      	mov	r0, fp
   20b42:	f025 f896 	bl	45c72 <__multadd>
   20b46:	4601      	mov	r1, r0
   20b48:	4604      	mov	r4, r0
   20b4a:	4640      	mov	r0, r8
   20b4c:	f025 fa47 	bl	45fde <__mcmp>
   20b50:	2800      	cmp	r0, #0
   20b52:	f73f adc8 	bgt.w	206e6 <_dtoa_r+0x496>
   20b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b58:	9d03      	ldr	r5, [sp, #12]
   20b5a:	ea6f 0a03 	mvn.w	sl, r3
   20b5e:	2700      	movs	r7, #0
   20b60:	4621      	mov	r1, r4
   20b62:	4658      	mov	r0, fp
   20b64:	f025 f86e 	bl	45c44 <_Bfree>
   20b68:	2e00      	cmp	r6, #0
   20b6a:	f43f aeb1 	beq.w	208d0 <_dtoa_r+0x680>
   20b6e:	b12f      	cbz	r7, 20b7c <_dtoa_r+0x92c>
   20b70:	42b7      	cmp	r7, r6
   20b72:	d003      	beq.n	20b7c <_dtoa_r+0x92c>
   20b74:	4639      	mov	r1, r7
   20b76:	4658      	mov	r0, fp
   20b78:	f025 f864 	bl	45c44 <_Bfree>
   20b7c:	4631      	mov	r1, r6
   20b7e:	4658      	mov	r0, fp
   20b80:	f025 f860 	bl	45c44 <_Bfree>
   20b84:	e6a4      	b.n	208d0 <_dtoa_r+0x680>
   20b86:	2400      	movs	r4, #0
   20b88:	4626      	mov	r6, r4
   20b8a:	e7e4      	b.n	20b56 <_dtoa_r+0x906>
   20b8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   20b90:	4626      	mov	r6, r4
   20b92:	e5a8      	b.n	206e6 <_dtoa_r+0x496>
   20b94:	40240000 	.word	0x40240000
   20b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20b9a:	f8cd 9010 	str.w	r9, [sp, #16]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	f000 80eb 	beq.w	20d7a <_dtoa_r+0xb2a>
   20ba4:	2d00      	cmp	r5, #0
   20ba6:	dd05      	ble.n	20bb4 <_dtoa_r+0x964>
   20ba8:	4631      	mov	r1, r6
   20baa:	462a      	mov	r2, r5
   20bac:	4658      	mov	r0, fp
   20bae:	f025 f9c3 	bl	45f38 <__lshift>
   20bb2:	4606      	mov	r6, r0
   20bb4:	2f00      	cmp	r7, #0
   20bb6:	d056      	beq.n	20c66 <_dtoa_r+0xa16>
   20bb8:	6871      	ldr	r1, [r6, #4]
   20bba:	4658      	mov	r0, fp
   20bbc:	f025 f80e 	bl	45bdc <_Balloc>
   20bc0:	6932      	ldr	r2, [r6, #16]
   20bc2:	4605      	mov	r5, r0
   20bc4:	f106 010c 	add.w	r1, r6, #12
   20bc8:	3202      	adds	r2, #2
   20bca:	300c      	adds	r0, #12
   20bcc:	0092      	lsls	r2, r2, #2
   20bce:	f024 fb2b 	bl	45228 <memcpy>
   20bd2:	2201      	movs	r2, #1
   20bd4:	4629      	mov	r1, r5
   20bd6:	4658      	mov	r0, fp
   20bd8:	f025 f9ae 	bl	45f38 <__lshift>
   20bdc:	9b03      	ldr	r3, [sp, #12]
   20bde:	4637      	mov	r7, r6
   20be0:	4606      	mov	r6, r0
   20be2:	f103 0901 	add.w	r9, r3, #1
   20be6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   20bea:	4413      	add	r3, r2
   20bec:	9309      	str	r3, [sp, #36]	; 0x24
   20bee:	9b00      	ldr	r3, [sp, #0]
   20bf0:	f003 0301 	and.w	r3, r3, #1
   20bf4:	9307      	str	r3, [sp, #28]
   20bf6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   20bfa:	4621      	mov	r1, r4
   20bfc:	4640      	mov	r0, r8
   20bfe:	9300      	str	r3, [sp, #0]
   20c00:	f024 fdd2 	bl	457a8 <quorem>
   20c04:	4603      	mov	r3, r0
   20c06:	9004      	str	r0, [sp, #16]
   20c08:	4639      	mov	r1, r7
   20c0a:	4640      	mov	r0, r8
   20c0c:	3330      	adds	r3, #48	; 0x30
   20c0e:	930a      	str	r3, [sp, #40]	; 0x28
   20c10:	f025 f9e5 	bl	45fde <__mcmp>
   20c14:	4632      	mov	r2, r6
   20c16:	9006      	str	r0, [sp, #24]
   20c18:	4621      	mov	r1, r4
   20c1a:	4658      	mov	r0, fp
   20c1c:	f025 f9f9 	bl	46012 <__mdiff>
   20c20:	68c2      	ldr	r2, [r0, #12]
   20c22:	4605      	mov	r5, r0
   20c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c26:	bb02      	cbnz	r2, 20c6a <_dtoa_r+0xa1a>
   20c28:	4601      	mov	r1, r0
   20c2a:	4640      	mov	r0, r8
   20c2c:	f025 f9d7 	bl	45fde <__mcmp>
   20c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c32:	4602      	mov	r2, r0
   20c34:	4629      	mov	r1, r5
   20c36:	4658      	mov	r0, fp
   20c38:	920c      	str	r2, [sp, #48]	; 0x30
   20c3a:	464d      	mov	r5, r9
   20c3c:	930a      	str	r3, [sp, #40]	; 0x28
   20c3e:	f025 f801 	bl	45c44 <_Bfree>
   20c42:	9b08      	ldr	r3, [sp, #32]
   20c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20c46:	ea43 0102 	orr.w	r1, r3, r2
   20c4a:	9b07      	ldr	r3, [sp, #28]
   20c4c:	430b      	orrs	r3, r1
   20c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c50:	d10d      	bne.n	20c6e <_dtoa_r+0xa1e>
   20c52:	2b39      	cmp	r3, #57	; 0x39
   20c54:	d027      	beq.n	20ca6 <_dtoa_r+0xa56>
   20c56:	9a06      	ldr	r2, [sp, #24]
   20c58:	2a00      	cmp	r2, #0
   20c5a:	dd01      	ble.n	20c60 <_dtoa_r+0xa10>
   20c5c:	9b04      	ldr	r3, [sp, #16]
   20c5e:	3331      	adds	r3, #49	; 0x31
   20c60:	9a00      	ldr	r2, [sp, #0]
   20c62:	7013      	strb	r3, [r2, #0]
   20c64:	e77c      	b.n	20b60 <_dtoa_r+0x910>
   20c66:	4630      	mov	r0, r6
   20c68:	e7b8      	b.n	20bdc <_dtoa_r+0x98c>
   20c6a:	2201      	movs	r2, #1
   20c6c:	e7e2      	b.n	20c34 <_dtoa_r+0x9e4>
   20c6e:	9906      	ldr	r1, [sp, #24]
   20c70:	2900      	cmp	r1, #0
   20c72:	db04      	blt.n	20c7e <_dtoa_r+0xa2e>
   20c74:	9808      	ldr	r0, [sp, #32]
   20c76:	4301      	orrs	r1, r0
   20c78:	9807      	ldr	r0, [sp, #28]
   20c7a:	4301      	orrs	r1, r0
   20c7c:	d11d      	bne.n	20cba <_dtoa_r+0xa6a>
   20c7e:	2a00      	cmp	r2, #0
   20c80:	ddee      	ble.n	20c60 <_dtoa_r+0xa10>
   20c82:	4641      	mov	r1, r8
   20c84:	2201      	movs	r2, #1
   20c86:	4658      	mov	r0, fp
   20c88:	9306      	str	r3, [sp, #24]
   20c8a:	f025 f955 	bl	45f38 <__lshift>
   20c8e:	4621      	mov	r1, r4
   20c90:	4680      	mov	r8, r0
   20c92:	f025 f9a4 	bl	45fde <__mcmp>
   20c96:	2800      	cmp	r0, #0
   20c98:	9b06      	ldr	r3, [sp, #24]
   20c9a:	dc02      	bgt.n	20ca2 <_dtoa_r+0xa52>
   20c9c:	d1e0      	bne.n	20c60 <_dtoa_r+0xa10>
   20c9e:	07da      	lsls	r2, r3, #31
   20ca0:	d5de      	bpl.n	20c60 <_dtoa_r+0xa10>
   20ca2:	2b39      	cmp	r3, #57	; 0x39
   20ca4:	d1da      	bne.n	20c5c <_dtoa_r+0xa0c>
   20ca6:	2339      	movs	r3, #57	; 0x39
   20ca8:	9a00      	ldr	r2, [sp, #0]
   20caa:	7013      	strb	r3, [r2, #0]
   20cac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20cb0:	1e6a      	subs	r2, r5, #1
   20cb2:	2b39      	cmp	r3, #57	; 0x39
   20cb4:	d046      	beq.n	20d44 <_dtoa_r+0xaf4>
   20cb6:	3301      	adds	r3, #1
   20cb8:	e7d3      	b.n	20c62 <_dtoa_r+0xa12>
   20cba:	2a00      	cmp	r2, #0
   20cbc:	dd03      	ble.n	20cc6 <_dtoa_r+0xa76>
   20cbe:	2b39      	cmp	r3, #57	; 0x39
   20cc0:	d0f1      	beq.n	20ca6 <_dtoa_r+0xa56>
   20cc2:	3301      	adds	r3, #1
   20cc4:	e7cc      	b.n	20c60 <_dtoa_r+0xa10>
   20cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20cc8:	f809 3c01 	strb.w	r3, [r9, #-1]
   20ccc:	4591      	cmp	r9, r2
   20cce:	d021      	beq.n	20d14 <_dtoa_r+0xac4>
   20cd0:	4641      	mov	r1, r8
   20cd2:	2300      	movs	r3, #0
   20cd4:	220a      	movs	r2, #10
   20cd6:	4658      	mov	r0, fp
   20cd8:	f024 ffcb 	bl	45c72 <__multadd>
   20cdc:	42b7      	cmp	r7, r6
   20cde:	4680      	mov	r8, r0
   20ce0:	f04f 0300 	mov.w	r3, #0
   20ce4:	f04f 020a 	mov.w	r2, #10
   20ce8:	4639      	mov	r1, r7
   20cea:	4658      	mov	r0, fp
   20cec:	d106      	bne.n	20cfc <_dtoa_r+0xaac>
   20cee:	f024 ffc0 	bl	45c72 <__multadd>
   20cf2:	4607      	mov	r7, r0
   20cf4:	4606      	mov	r6, r0
   20cf6:	f109 0901 	add.w	r9, r9, #1
   20cfa:	e77c      	b.n	20bf6 <_dtoa_r+0x9a6>
   20cfc:	f024 ffb9 	bl	45c72 <__multadd>
   20d00:	4631      	mov	r1, r6
   20d02:	4607      	mov	r7, r0
   20d04:	2300      	movs	r3, #0
   20d06:	220a      	movs	r2, #10
   20d08:	4658      	mov	r0, fp
   20d0a:	f024 ffb2 	bl	45c72 <__multadd>
   20d0e:	4606      	mov	r6, r0
   20d10:	e7f1      	b.n	20cf6 <_dtoa_r+0xaa6>
   20d12:	2700      	movs	r7, #0
   20d14:	4641      	mov	r1, r8
   20d16:	2201      	movs	r2, #1
   20d18:	4658      	mov	r0, fp
   20d1a:	9300      	str	r3, [sp, #0]
   20d1c:	f025 f90c 	bl	45f38 <__lshift>
   20d20:	4621      	mov	r1, r4
   20d22:	4680      	mov	r8, r0
   20d24:	f025 f95b 	bl	45fde <__mcmp>
   20d28:	2800      	cmp	r0, #0
   20d2a:	dcbf      	bgt.n	20cac <_dtoa_r+0xa5c>
   20d2c:	d102      	bne.n	20d34 <_dtoa_r+0xae4>
   20d2e:	9b00      	ldr	r3, [sp, #0]
   20d30:	07db      	lsls	r3, r3, #31
   20d32:	d4bb      	bmi.n	20cac <_dtoa_r+0xa5c>
   20d34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20d38:	1e6a      	subs	r2, r5, #1
   20d3a:	2b30      	cmp	r3, #48	; 0x30
   20d3c:	f47f af10 	bne.w	20b60 <_dtoa_r+0x910>
   20d40:	4615      	mov	r5, r2
   20d42:	e7f7      	b.n	20d34 <_dtoa_r+0xae4>
   20d44:	9b03      	ldr	r3, [sp, #12]
   20d46:	4293      	cmp	r3, r2
   20d48:	d104      	bne.n	20d54 <_dtoa_r+0xb04>
   20d4a:	f10a 0a01 	add.w	sl, sl, #1
   20d4e:	2331      	movs	r3, #49	; 0x31
   20d50:	9a03      	ldr	r2, [sp, #12]
   20d52:	e786      	b.n	20c62 <_dtoa_r+0xa12>
   20d54:	4615      	mov	r5, r2
   20d56:	e7a9      	b.n	20cac <_dtoa_r+0xa5c>
   20d58:	4b13      	ldr	r3, [pc, #76]	; (20da8 <_dtoa_r+0xb58>)
   20d5a:	f7ff bae1 	b.w	20320 <_dtoa_r+0xd0>
   20d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20d60:	2b00      	cmp	r3, #0
   20d62:	f47f aab9 	bne.w	202d8 <_dtoa_r+0x88>
   20d66:	4b11      	ldr	r3, [pc, #68]	; (20dac <_dtoa_r+0xb5c>)
   20d68:	f7ff bada 	b.w	20320 <_dtoa_r+0xd0>
   20d6c:	9b04      	ldr	r3, [sp, #16]
   20d6e:	2b00      	cmp	r3, #0
   20d70:	dc03      	bgt.n	20d7a <_dtoa_r+0xb2a>
   20d72:	9b08      	ldr	r3, [sp, #32]
   20d74:	2b02      	cmp	r3, #2
   20d76:	f73f aedf 	bgt.w	20b38 <_dtoa_r+0x8e8>
   20d7a:	9d03      	ldr	r5, [sp, #12]
   20d7c:	4621      	mov	r1, r4
   20d7e:	4640      	mov	r0, r8
   20d80:	f024 fd12 	bl	457a8 <quorem>
   20d84:	9a03      	ldr	r2, [sp, #12]
   20d86:	f100 0330 	add.w	r3, r0, #48	; 0x30
   20d8a:	9904      	ldr	r1, [sp, #16]
   20d8c:	f805 3b01 	strb.w	r3, [r5], #1
   20d90:	1aaa      	subs	r2, r5, r2
   20d92:	4291      	cmp	r1, r2
   20d94:	ddbd      	ble.n	20d12 <_dtoa_r+0xac2>
   20d96:	4641      	mov	r1, r8
   20d98:	2300      	movs	r3, #0
   20d9a:	220a      	movs	r2, #10
   20d9c:	4658      	mov	r0, fp
   20d9e:	f024 ff68 	bl	45c72 <__multadd>
   20da2:	4680      	mov	r8, r0
   20da4:	e7ea      	b.n	20d7c <_dtoa_r+0xb2c>
   20da6:	bf00      	nop
   20da8:	0004edb2 	.word	0x0004edb2
   20dac:	0004f33d 	.word	0x0004f33d

00020db0 <nan>:
   20db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 20db8 <nan+0x8>
   20db4:	4770      	bx	lr
   20db6:	bf00      	nop
   20db8:	00000000 	.word	0x00000000
   20dbc:	7ff80000 	.word	0x7ff80000

00020dc0 <shutdown_modem>:
	LOG_ERR("LTE link disconnect");
   20dc0:	2301      	movs	r3, #1
   20dc2:	f04f 0000 	mov.w	r0, #0
{
   20dc6:	b510      	push	{r4, lr}
	LOG_ERR("LTE link disconnect");
   20dc8:	f363 0007 	bfi	r0, r3, #0, #8
   20dcc:	4c12      	ldr	r4, [pc, #72]	; (20e18 <shutdown_modem+0x58>)
   20dce:	4b13      	ldr	r3, [pc, #76]	; (20e1c <shutdown_modem+0x5c>)
   20dd0:	4913      	ldr	r1, [pc, #76]	; (20e20 <shutdown_modem+0x60>)
   20dd2:	1ae4      	subs	r4, r4, r3
   20dd4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20dd8:	f364 108f 	bfi	r0, r4, #6, #10
   20ddc:	f021 f92f 	bl	4203e <log_string_sync>
	int err = lte_lc_power_off();
   20de0:	f00a fdc4 	bl	2b96c <lte_lc_power_off>
	if (err) {
   20de4:	4602      	mov	r2, r0
   20de6:	b148      	cbz	r0, 20dfc <shutdown_modem+0x3c>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   20de8:	2101      	movs	r1, #1
   20dea:	f04f 0000 	mov.w	r0, #0
   20dee:	f361 0007 	bfi	r0, r1, #0, #8
   20df2:	f364 108f 	bfi	r0, r4, #6, #10
   20df6:	490b      	ldr	r1, [pc, #44]	; (20e24 <shutdown_modem+0x64>)
   20df8:	f021 f921 	bl	4203e <log_string_sync>
	LOG_ERR("Shutdown modem");
   20dfc:	2301      	movs	r3, #1
   20dfe:	f04f 0000 	mov.w	r0, #0
   20e02:	f363 0007 	bfi	r0, r3, #0, #8
   20e06:	f364 108f 	bfi	r0, r4, #6, #10
   20e0a:	4907      	ldr	r1, [pc, #28]	; (20e28 <shutdown_modem+0x68>)
   20e0c:	f021 f917 	bl	4203e <log_string_sync>
}
   20e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bsdlib_shutdown();
   20e14:	f023 b955 	b.w	440c2 <bsdlib_shutdown>
   20e18:	00046888 	.word	0x00046888
   20e1c:	00046878 	.word	0x00046878
   20e20:	00048692 	.word	0x00048692
   20e24:	000486a6 	.word	0x000486a6
   20e28:	000486c2 	.word	0x000486c2

00020e2c <cycle_cloud_connection>:

static void cycle_cloud_connection(struct k_work *work)
{
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;

	LOG_INF("Disconnecting from cloud...");
   20e2c:	2303      	movs	r3, #3
   20e2e:	f04f 0000 	mov.w	r0, #0
{
   20e32:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Disconnecting from cloud...");
   20e34:	f363 0007 	bfi	r0, r3, #0, #8
   20e38:	4c1d      	ldr	r4, [pc, #116]	; (20eb0 <cycle_cloud_connection+0x84>)
   20e3a:	4b1e      	ldr	r3, [pc, #120]	; (20eb4 <cycle_cloud_connection+0x88>)
   20e3c:	491e      	ldr	r1, [pc, #120]	; (20eb8 <cycle_cloud_connection+0x8c>)
   20e3e:	1ae4      	subs	r4, r4, r3
   20e40:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20e44:	f364 108f 	bfi	r0, r4, #6, #10
   20e48:	f021 f8f9 	bl	4203e <log_string_sync>

	if (cloud_disconnect(cloud_backend) != 0) {
   20e4c:	4b1b      	ldr	r3, [pc, #108]	; (20ebc <cycle_cloud_connection+0x90>)
   20e4e:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   20e50:	bb10      	cbnz	r0, 20e98 <cycle_cloud_connection+0x6c>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   20e52:	2303      	movs	r3, #3
   20e54:	f04f 0000 	mov.w	r0, #0
   20e58:	f363 0007 	bfi	r0, r3, #0, #8
   20e5c:	4918      	ldr	r1, [pc, #96]	; (20ec0 <cycle_cloud_connection+0x94>)
   20e5e:	f364 108f 	bfi	r0, r4, #6, #10
   20e62:	2205      	movs	r2, #5
   20e64:	f021 f8eb 	bl	4203e <log_string_sync>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
   20e68:	f241 3188 	movw	r1, #5000	; 0x1388
   20e6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20e70:	f240 34e7 	movw	r4, #999	; 0x3e7
   20e74:	2500      	movs	r5, #0
   20e76:	fbc0 4501 	smlal	r4, r5, r0, r1
   20e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e7e:	2300      	movs	r3, #0
   20e80:	4620      	mov	r0, r4
   20e82:	4629      	mov	r1, r5
   20e84:	f7fc f81a 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Reboot fail-safe on disconnect */
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
				       K_MSEC(reboot_wait_ms));
}
   20e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   20e8c:	4602      	mov	r2, r0
   20e8e:	460b      	mov	r3, r1
   20e90:	480c      	ldr	r0, [pc, #48]	; (20ec4 <cycle_cloud_connection+0x98>)
   20e92:	490d      	ldr	r1, [pc, #52]	; (20ec8 <cycle_cloud_connection+0x9c>)
   20e94:	f01d bc22 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   20e98:	6803      	ldr	r3, [r0, #0]
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d0d9      	beq.n	20e52 <cycle_cloud_connection+0x26>
	    backend->api->disconnect == NULL) {
   20e9e:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   20ea0:	2b00      	cmp	r3, #0
   20ea2:	d0d6      	beq.n	20e52 <cycle_cloud_connection+0x26>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   20ea4:	4798      	blx	r3
	if (cloud_disconnect(cloud_backend) != 0) {
   20ea6:	2800      	cmp	r0, #0
   20ea8:	d1d3      	bne.n	20e52 <cycle_cloud_connection+0x26>
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   20eaa:	f643 2198 	movw	r1, #15000	; 0x3a98
   20eae:	e7dd      	b.n	20e6c <cycle_cloud_connection+0x40>
   20eb0:	00046888 	.word	0x00046888
   20eb4:	00046878 	.word	0x00046878
   20eb8:	00047e91 	.word	0x00047e91
   20ebc:	200245ac 	.word	0x200245ac
   20ec0:	00047ead 	.word	0x00047ead
   20ec4:	20020c80 	.word	0x20020c80
   20ec8:	20020d98 	.word	0x20020d98

00020ecc <data_send_enabled>:
{
   20ecc:	b508      	push	{r3, lr}
	return (atomic_get(&cloud_association) ==
   20ece:	4803      	ldr	r0, [pc, #12]	; (20edc <data_send_enabled+0x10>)
   20ed0:	f020 fcdf 	bl	41892 <atomic_get>
}
   20ed4:	1f03      	subs	r3, r0, #4
   20ed6:	4258      	negs	r0, r3
   20ed8:	4158      	adcs	r0, r3
   20eda:	bd08      	pop	{r3, pc}
   20edc:	200245a8 	.word	0x200245a8

00020ee0 <set_gps_enable>:
		connect_to_cloud(connect_wait_s);
	}
}

static void set_gps_enable(const bool enable)
{
   20ee0:	b570      	push	{r4, r5, r6, lr}
   20ee2:	4604      	mov	r4, r0
	int32_t delay_ms = 0;
	bool changing = (enable != gps_control_is_enabled());
   20ee4:	f002 fc14 	bl	23710 <gps_control_is_enabled>
   20ee8:	4605      	mov	r5, r0

	/* Exit early if the link is not ready or if the cloud
	 * state is defined and the local state is not changing.
	 */
	if (!data_send_enabled() ||
   20eea:	f7ff ffef 	bl	20ecc <data_send_enabled>
   20eee:	2800      	cmp	r0, #0
   20ef0:	d03c      	beq.n	20f6c <set_gps_enable+0x8c>
	    ((cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS) !=
   20ef2:	2000      	movs	r0, #0
   20ef4:	f002 faaa 	bl	2344c <cloud_get_channel_enable_state>
	if (!data_send_enabled() ||
   20ef8:	3001      	adds	r0, #1
   20efa:	d001      	beq.n	20f00 <set_gps_enable+0x20>
	    CLOUD_CMD_STATE_UNDEFINED) && !changing)) {
   20efc:	42a5      	cmp	r5, r4
   20efe:	d035      	beq.n	20f6c <set_gps_enable+0x8c>
		return;
	}

	cloud_set_channel_enable_state(CLOUD_CHANNEL_GPS,
   20f00:	b261      	sxtb	r1, r4
   20f02:	2000      	movs	r0, #0
   20f04:	f002 fb44 	bl	23590 <cloud_set_channel_enable_state>
		enable ? CLOUD_CMD_STATE_TRUE : CLOUD_CMD_STATE_FALSE);

	if (changing) {
   20f08:	42a5      	cmp	r5, r4
   20f0a:	d00f      	beq.n	20f2c <set_gps_enable+0x4c>
		if (enable) {
   20f0c:	4a18      	ldr	r2, [pc, #96]	; (20f70 <set_gps_enable+0x90>)
   20f0e:	4b19      	ldr	r3, [pc, #100]	; (20f74 <set_gps_enable+0x94>)
			LOG_INF("Starting GPS");
   20f10:	f04f 0000 	mov.w	r0, #0
   20f14:	1a9b      	subs	r3, r3, r2
   20f16:	2203      	movs	r2, #3
   20f18:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   20f1c:	f362 0007 	bfi	r0, r2, #0, #8
   20f20:	f363 108f 	bfi	r0, r3, #6, #10
		if (enable) {
   20f24:	b124      	cbz	r4, 20f30 <set_gps_enable+0x50>
			LOG_INF("Starting GPS");
   20f26:	4914      	ldr	r1, [pc, #80]	; (20f78 <set_gps_enable+0x98>)
   20f28:	f021 f889 	bl	4203e <log_string_sync>
	int32_t delay_ms = 0;
   20f2c:	2100      	movs	r1, #0
   20f2e:	e007      	b.n	20f40 <set_gps_enable+0x60>
			/* GPS will be started from the device config work
			 * handler AFTER the config has been sent to the cloud
			 */
		} else {
			LOG_INF("Stopping GPS");
   20f30:	4912      	ldr	r1, [pc, #72]	; (20f7c <set_gps_enable+0x9c>)
   20f32:	f021 f884 	bl	4203e <log_string_sync>
			gps_control_stop(0);
   20f36:	4620      	mov	r0, r4
   20f38:	f002 fd2a 	bl	23990 <gps_control_stop>
			/* Allow time for the gps to be stopped before
			 * attemping to send the config update
			 */
			delay_ms = 5 * MSEC_PER_SEC;
   20f3c:	f241 3188 	movw	r1, #5000	; 0x1388
   20f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20f44:	f240 34e7 	movw	r4, #999	; 0x3e7
   20f48:	2500      	movs	r5, #0
   20f4a:	fbc0 4501 	smlal	r4, r5, r0, r1
   20f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20f52:	2300      	movs	r3, #0
   20f54:	4620      	mov	r0, r4
   20f56:	4629      	mov	r1, r5
   20f58:	f7fb ffb0 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Update config state in cloud */
	k_delayed_work_submit_to_queue(&application_work_q,
			&device_config_work, K_MSEC(delay_ms));
}
   20f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q,
   20f60:	4602      	mov	r2, r0
   20f62:	460b      	mov	r3, r1
   20f64:	4806      	ldr	r0, [pc, #24]	; (20f80 <set_gps_enable+0xa0>)
   20f66:	4907      	ldr	r1, [pc, #28]	; (20f84 <set_gps_enable+0xa4>)
   20f68:	f01d bbb8 	b.w	3e6dc <k_delayed_work_submit_to_queue>
}
   20f6c:	bd70      	pop	{r4, r5, r6, pc}
   20f6e:	bf00      	nop
   20f70:	00046878 	.word	0x00046878
   20f74:	00046888 	.word	0x00046888
   20f78:	00048685 	.word	0x00048685
   20f7c:	0004e7e5 	.word	0x0004e7e5
   20f80:	20020c80 	.word	0x20020c80
   20f84:	20020df8 	.word	0x20020df8

00020f88 <sensor_data_send>:
{
   20f88:	b510      	push	{r4, lr}
   20f8a:	b086      	sub	sp, #24
   20f8c:	4604      	mov	r4, r0
	struct cloud_msg msg = {
   20f8e:	2218      	movs	r2, #24
   20f90:	2100      	movs	r1, #0
   20f92:	4668      	mov	r0, sp
   20f94:	f024 f968 	bl	45268 <memset>
	if (!data_send_enabled() || gps_control_is_active()) {
   20f98:	f7ff ff98 	bl	20ecc <data_send_enabled>
   20f9c:	b1b8      	cbz	r0, 20fce <sensor_data_send+0x46>
   20f9e:	f002 fbc1 	bl	23724 <gps_control_is_active>
   20fa2:	b9a0      	cbnz	r0, 20fce <sensor_data_send+0x46>
	err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   20fa4:	466a      	mov	r2, sp
   20fa6:	2106      	movs	r1, #6
   20fa8:	4620      	mov	r0, r4
   20faa:	f001 fe91 	bl	22cd0 <cloud_encode_data>
	if (err) {
   20fae:	4602      	mov	r2, r0
   20fb0:	b178      	cbz	r0, 20fd2 <sensor_data_send+0x4a>
		LOG_ERR("Unable to encode cloud data: %d", err);
   20fb2:	2301      	movs	r3, #1
   20fb4:	f04f 0000 	mov.w	r0, #0
   20fb8:	4914      	ldr	r1, [pc, #80]	; (2100c <sensor_data_send+0x84>)
   20fba:	f363 0007 	bfi	r0, r3, #0, #8
   20fbe:	4b14      	ldr	r3, [pc, #80]	; (21010 <sensor_data_send+0x88>)
   20fc0:	1a5b      	subs	r3, r3, r1
   20fc2:	08db      	lsrs	r3, r3, #3
   20fc4:	f363 108f 	bfi	r0, r3, #6, #10
   20fc8:	4912      	ldr	r1, [pc, #72]	; (21014 <sensor_data_send+0x8c>)
   20fca:	f021 f838 	bl	4203e <log_string_sync>
}
   20fce:	b006      	add	sp, #24
   20fd0:	bd10      	pop	{r4, pc}
		err = cloud_send(cloud_backend, &msg);
   20fd2:	4b11      	ldr	r3, [pc, #68]	; (21018 <sensor_data_send+0x90>)
   20fd4:	4669      	mov	r1, sp
   20fd6:	6818      	ldr	r0, [r3, #0]
   20fd8:	f020 fc4a 	bl	41870 <cloud_send>
   20fdc:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   20fde:	9800      	ldr	r0, [sp, #0]
   20fe0:	f024 f8e7 	bl	451b2 <k_free>
		if (err) {
   20fe4:	2c00      	cmp	r4, #0
   20fe6:	d0f2      	beq.n	20fce <sensor_data_send+0x46>
			LOG_ERR("%s failed, data was not sent: %d", __func__,
   20fe8:	2301      	movs	r3, #1
   20fea:	f04f 0000 	mov.w	r0, #0
   20fee:	4a08      	ldr	r2, [pc, #32]	; (21010 <sensor_data_send+0x88>)
   20ff0:	f363 0007 	bfi	r0, r3, #0, #8
   20ff4:	4b05      	ldr	r3, [pc, #20]	; (2100c <sensor_data_send+0x84>)
   20ff6:	4909      	ldr	r1, [pc, #36]	; (2101c <sensor_data_send+0x94>)
   20ff8:	1ad2      	subs	r2, r2, r3
   20ffa:	08d2      	lsrs	r2, r2, #3
   20ffc:	f362 108f 	bfi	r0, r2, #6, #10
   21000:	4623      	mov	r3, r4
   21002:	4a07      	ldr	r2, [pc, #28]	; (21020 <sensor_data_send+0x98>)
   21004:	f021 f81b 	bl	4203e <log_string_sync>
   21008:	e7e1      	b.n	20fce <sensor_data_send+0x46>
   2100a:	bf00      	nop
   2100c:	00046878 	.word	0x00046878
   21010:	00046888 	.word	0x00046888
   21014:	000485ad 	.word	0x000485ad
   21018:	200245ac 	.word	0x200245ac
   2101c:	000485cd 	.word	0x000485cd
   21020:	000479b3 	.word	0x000479b3

00021024 <modem_rsrp_data_send>:
{
   21024:	b530      	push	{r4, r5, lr}
   21026:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   21028:	2280      	movs	r2, #128	; 0x80
   2102a:	2100      	movs	r1, #0
   2102c:	4668      	mov	r0, sp
   2102e:	f024 f91b 	bl	45268 <memset>
	if (!data_send_enabled()) {
   21032:	f7ff ff4b 	bl	20ecc <data_send_enabled>
   21036:	b308      	cbz	r0, 2107c <modem_rsrp_data_send+0x58>
	rsrp_current = rsrp.value - rsrp.offset;
   21038:	4b11      	ldr	r3, [pc, #68]	; (21080 <modem_rsrp_data_send+0x5c>)
	if (rsrp_current == rsrp_prev) {
   2103a:	4d12      	ldr	r5, [pc, #72]	; (21084 <modem_rsrp_data_send+0x60>)
	rsrp_current = rsrp.value - rsrp.offset;
   2103c:	881c      	ldrh	r4, [r3, #0]
   2103e:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   21040:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   21042:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   21044:	42a2      	cmp	r2, r4
   21046:	d019      	beq.n	2107c <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   21048:	2180      	movs	r1, #128	; 0x80
   2104a:	4623      	mov	r3, r4
   2104c:	4a0e      	ldr	r2, [pc, #56]	; (21088 <modem_rsrp_data_send+0x64>)
   2104e:	4668      	mov	r0, sp
   21050:	f01f f8f4 	bl	4023c <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   21054:	4b0d      	ldr	r3, [pc, #52]	; (2108c <modem_rsrp_data_send+0x68>)
	signal_strength_cloud_data.tag += 1;
   21056:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   21058:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   2105a:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   2105c:	bf08      	it	eq
   2105e:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   21060:	480a      	ldr	r0, [pc, #40]	; (2108c <modem_rsrp_data_send+0x68>)
		signal_strength_cloud_data.tag = 0x1;
   21062:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   21064:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   21068:	f7ff ff8e 	bl	20f88 <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   2106c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   21070:	2300      	movs	r3, #0
   21072:	4907      	ldr	r1, [pc, #28]	; (21090 <modem_rsrp_data_send+0x6c>)
   21074:	4807      	ldr	r0, [pc, #28]	; (21094 <modem_rsrp_data_send+0x70>)
	rsrp_prev = rsrp_current;
   21076:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   21078:	f01d fb30 	bl	3e6dc <k_delayed_work_submit_to_queue>
}
   2107c:	b021      	add	sp, #132	; 0x84
   2107e:	bd30      	pop	{r4, r5, pc}
   21080:	20020954 	.word	0x20020954
   21084:	200245d8 	.word	0x200245d8
   21088:	0004c835 	.word	0x0004c835
   2108c:	200217d8 	.word	0x200217d8
   21090:	20021778 	.word	0x20021778
   21094:	20020c80 	.word	0x20020c80

00021098 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   21098:	4801      	ldr	r0, [pc, #4]	; (210a0 <send_gps_data_work_fn+0x8>)
   2109a:	f7ff bf75 	b.w	20f88 <sensor_data_send>
   2109e:	bf00      	nop
   210a0:	20020000 	.word	0x20020000

000210a4 <no_sim_go_offline>:
	}
#endif /* CONFIG_BSD_LIBRARY */
}

static void no_sim_go_offline(struct k_work *work)
{
   210a4:	b510      	push	{r4, lr}
#if defined(CONFIG_BSD_LIBRARY)
	lte_lc_offline();
   210a6:	f00a fc53 	bl	2b950 <lte_lc_offline>
   210aa:	2100      	movs	r1, #0
   210ac:	f640 40cd 	movw	r0, #3277	; 0xccd
   210b0:	f01d f86c 	bl	3e18c <z_impl_k_sleep>
	/* Wait for lte_lc events to be processed before printing info message */
	k_sleep(K_MSEC(100));
	LOG_INF("No SIM card detected.");
   210b4:	2303      	movs	r3, #3
   210b6:	f04f 0000 	mov.w	r0, #0
   210ba:	4c0e      	ldr	r4, [pc, #56]	; (210f4 <no_sim_go_offline+0x50>)
   210bc:	f363 0007 	bfi	r0, r3, #0, #8
   210c0:	4b0d      	ldr	r3, [pc, #52]	; (210f8 <no_sim_go_offline+0x54>)
   210c2:	490e      	ldr	r1, [pc, #56]	; (210fc <no_sim_go_offline+0x58>)
   210c4:	1ae4      	subs	r4, r4, r3
   210c6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   210ca:	f364 108f 	bfi	r0, r4, #6, #10
   210ce:	f020 ffb6 	bl	4203e <log_string_sync>
	LOG_INF("Insert SIM and reset device to run the asset tracker.");
   210d2:	2303      	movs	r3, #3
   210d4:	f04f 0000 	mov.w	r0, #0
   210d8:	f363 0007 	bfi	r0, r3, #0, #8
   210dc:	f364 108f 	bfi	r0, r4, #6, #10
   210e0:	4907      	ldr	r1, [pc, #28]	; (21100 <no_sim_go_offline+0x5c>)
   210e2:	f020 ffac 	bl	4203e <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
#endif /* CONFIG_BSD_LIBRARY */
}
   210e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
   210ea:	f44f 7040 	mov.w	r0, #768	; 0x300
   210ee:	f001 bc71 	b.w	229d4 <ui_led_set_pattern>
   210f2:	bf00      	nop
   210f4:	00046888 	.word	0x00046888
   210f8:	00046878 	.word	0x00046878
   210fc:	000483ee 	.word	0x000483ee
   21100:	00048404 	.word	0x00048404

00021104 <long_press_handler>:
{
   21104:	b508      	push	{r3, lr}
	if (!data_send_enabled()) {
   21106:	f7ff fee1 	bl	20ecc <data_send_enabled>
   2110a:	b968      	cbnz	r0, 21128 <long_press_handler+0x24>
		LOG_INF("Link not ready, long press disregarded");
   2110c:	2303      	movs	r3, #3
   2110e:	4a0b      	ldr	r2, [pc, #44]	; (2113c <long_press_handler+0x38>)
   21110:	f363 0007 	bfi	r0, r3, #0, #8
   21114:	4b0a      	ldr	r3, [pc, #40]	; (21140 <long_press_handler+0x3c>)
   21116:	490b      	ldr	r1, [pc, #44]	; (21144 <long_press_handler+0x40>)
   21118:	1a9b      	subs	r3, r3, r2
   2111a:	08db      	lsrs	r3, r3, #3
   2111c:	f363 108f 	bfi	r0, r3, #6, #10
}
   21120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   21124:	f020 bf8b 	b.w	4203e <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   21128:	f002 faf2 	bl	23710 <gps_control_is_enabled>
}
   2112c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   21130:	f080 0001 	eor.w	r0, r0, #1
   21134:	b2c0      	uxtb	r0, r0
   21136:	f7ff bed3 	b.w	20ee0 <set_gps_enable>
   2113a:	bf00      	nop
   2113c:	00046878 	.word	0x00046878
   21140:	00046888 	.word	0x00046888
   21144:	000480c9 	.word	0x000480c9

00021148 <ui_evt_handler>:
{
   21148:	b507      	push	{r0, r1, r2, lr}
   2114a:	ab02      	add	r3, sp, #8
   2114c:	e903 0003 	stmdb	r3, {r0, r1}
   21150:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   21152:	2b03      	cmp	r3, #3
   21154:	d107      	bne.n	21166 <ui_evt_handler+0x1e>
	    data_send_enabled()) {
   21156:	f7ff feb9 	bl	20ecc <data_send_enabled>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   2115a:	b1c8      	cbz	r0, 21190 <ui_evt_handler+0x48>
}
   2115c:	b003      	add	sp, #12
   2115e:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   21162:	f020 bbb9 	b.w	418d8 <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   21166:	2b01      	cmp	r3, #1
   21168:	d112      	bne.n	21190 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   2116a:	f89d 3000 	ldrb.w	r3, [sp]
   2116e:	b94b      	cbnz	r3, 21184 <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   21170:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21174:	2300      	movs	r3, #0
   21176:	4908      	ldr	r1, [pc, #32]	; (21198 <ui_evt_handler+0x50>)
   21178:	4808      	ldr	r0, [pc, #32]	; (2119c <ui_evt_handler+0x54>)
}
   2117a:	b003      	add	sp, #12
   2117c:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   21180:	f01d baac 	b.w	3e6dc <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   21184:	4804      	ldr	r0, [pc, #16]	; (21198 <ui_evt_handler+0x50>)
}
   21186:	b003      	add	sp, #12
   21188:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   2118c:	f01d bb2e 	b.w	3e7ec <k_delayed_work_cancel>
}
   21190:	b003      	add	sp, #12
   21192:	f85d fb04 	ldr.w	pc, [sp], #4
   21196:	bf00      	nop
   21198:	20020e60 	.word	0x20020e60
   2119c:	20020c80 	.word	0x20020c80

000211a0 <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   211a0:	2861      	cmp	r0, #97	; 0x61
{
   211a2:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
   211a4:	d814      	bhi.n	211d0 <modem_rsrp_handler+0x30>
	rsrp.value = rsrp_value;
   211a6:	4b0b      	ldr	r3, [pc, #44]	; (211d4 <modem_rsrp_handler+0x34>)
   211a8:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   211aa:	480b      	ldr	r0, [pc, #44]	; (211d8 <modem_rsrp_handler+0x38>)
   211ac:	f01d fd06 	bl	3ebbc <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   211b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   211b4:	fba0 0103 	umull	r0, r1, r0, r3
   211b8:	0bc3      	lsrs	r3, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   211ba:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   211be:	d107      	bne.n	211d0 <modem_rsrp_handler+0x30>
}
   211c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   211c4:	2200      	movs	r2, #0
   211c6:	2300      	movs	r3, #0
   211c8:	4904      	ldr	r1, [pc, #16]	; (211dc <modem_rsrp_handler+0x3c>)
   211ca:	4805      	ldr	r0, [pc, #20]	; (211e0 <modem_rsrp_handler+0x40>)
   211cc:	f01d ba86 	b.w	3e6dc <k_delayed_work_submit_to_queue>
}
   211d0:	bd10      	pop	{r4, pc}
   211d2:	bf00      	nop
   211d4:	20020954 	.word	0x20020954
   211d8:	20021788 	.word	0x20021788
   211dc:	20021778 	.word	0x20021778
   211e0:	20020c80 	.word	0x20020c80

000211e4 <k_work_submit_to_queue.constprop.14>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   211e4:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   211e6:	f100 0308 	add.w	r3, r0, #8
   211ea:	e8d3 2fef 	ldaex	r2, [r3]
   211ee:	f042 0001 	orr.w	r0, r2, #1
   211f2:	e8c3 0fec 	stlex	ip, r0, [r3]
   211f6:	f1bc 0f00 	cmp.w	ip, #0
   211fa:	d1f6      	bne.n	211ea <k_work_submit_to_queue.constprop.14+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   211fc:	07d3      	lsls	r3, r2, #31
   211fe:	d402      	bmi.n	21206 <k_work_submit_to_queue.constprop.14+0x22>
		k_queue_append(&work_q->queue, work);
   21200:	4801      	ldr	r0, [pc, #4]	; (21208 <k_work_submit_to_queue.constprop.14+0x24>)
   21202:	f023 be6e 	b.w	44ee2 <k_queue_append>
}
   21206:	4770      	bx	lr
   21208:	20020c80 	.word	0x20020c80

0002120c <lte_handler>:

#if defined(CONFIG_LTE_LINK_CONTROL)
static void lte_handler(const struct lte_lc_evt *const evt)
{
   2120c:	b510      	push	{r4, lr}
	switch (evt->type) {
   2120e:	7803      	ldrb	r3, [r0, #0]
{
   21210:	b094      	sub	sp, #80	; 0x50
   21212:	4604      	mov	r4, r0
	switch (evt->type) {
   21214:	2b04      	cmp	r3, #4
   21216:	d80a      	bhi.n	2122e <lte_handler+0x22>
   21218:	e8df f003 	tbb	[pc, r3]
   2121c:	58342303 	.word	0x58342303
   21220:	6b          	.byte	0x6b
   21221:	00          	.byte	0x00
	case LTE_LC_EVT_NW_REG_STATUS:

		if (evt->nw_reg_status == LTE_LC_NW_REG_UICC_FAIL) {
   21222:	7901      	ldrb	r1, [r0, #4]
   21224:	295a      	cmp	r1, #90	; 0x5a
   21226:	d104      	bne.n	21232 <lte_handler+0x26>
			k_work_submit_to_queue(&application_work_q,
   21228:	4839      	ldr	r0, [pc, #228]	; (21310 <lte_handler+0x104>)
   2122a:	f7ff ffdb 	bl	211e4 <k_work_submit_to_queue.constprop.14>
			evt->cell.id, evt->cell.tac);
		break;
	default:
		break;
	}
}
   2122e:	b014      	add	sp, #80	; 0x50
   21230:	bd10      	pop	{r4, pc}
		} else if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   21232:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   21236:	2b01      	cmp	r3, #1
   21238:	d1f9      	bne.n	2122e <lte_handler+0x22>
			LOG_INF("Network registration status: %s",
   2123a:	2303      	movs	r3, #3
   2123c:	f04f 0000 	mov.w	r0, #0
   21240:	4a34      	ldr	r2, [pc, #208]	; (21314 <lte_handler+0x108>)
   21242:	f363 0007 	bfi	r0, r3, #0, #8
   21246:	4b34      	ldr	r3, [pc, #208]	; (21318 <lte_handler+0x10c>)
   21248:	1a9b      	subs	r3, r3, r2
   2124a:	08db      	lsrs	r3, r3, #3
   2124c:	f363 108f 	bfi	r0, r3, #6, #10
   21250:	4a32      	ldr	r2, [pc, #200]	; (2131c <lte_handler+0x110>)
   21252:	4b33      	ldr	r3, [pc, #204]	; (21320 <lte_handler+0x114>)
   21254:	2901      	cmp	r1, #1
   21256:	bf18      	it	ne
   21258:	461a      	movne	r2, r3
   2125a:	4932      	ldr	r1, [pc, #200]	; (21324 <lte_handler+0x118>)
		LOG_INF("RRC mode: %s",
   2125c:	f020 feef 	bl	4203e <log_string_sync>
   21260:	e7e5      	b.n	2122e <lte_handler+0x22>
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   21262:	2303      	movs	r3, #3
   21264:	f04f 0000 	mov.w	r0, #0
   21268:	4a2a      	ldr	r2, [pc, #168]	; (21314 <lte_handler+0x108>)
   2126a:	f363 0007 	bfi	r0, r3, #0, #8
   2126e:	4b2a      	ldr	r3, [pc, #168]	; (21318 <lte_handler+0x10c>)
   21270:	492d      	ldr	r1, [pc, #180]	; (21328 <lte_handler+0x11c>)
   21272:	1a9b      	subs	r3, r3, r2
   21274:	08db      	lsrs	r3, r3, #3
   21276:	f363 108f 	bfi	r0, r3, #6, #10
   2127a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   2127e:	f020 fede 	bl	4203e <log_string_sync>
}
   21282:	e7d4      	b.n	2122e <lte_handler+0x22>
		len = snprintf(log_buf, sizeof(log_buf),
   21284:	6880      	ldr	r0, [r0, #8]
   21286:	f7fb fa3f 	bl	1c708 <__aeabi_f2d>
   2128a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2128e:	6860      	ldr	r0, [r4, #4]
   21290:	f7fb fa3a 	bl	1c708 <__aeabi_f2d>
   21294:	4a25      	ldr	r2, [pc, #148]	; (2132c <lte_handler+0x120>)
   21296:	e9cd 0100 	strd	r0, r1, [sp]
   2129a:	213c      	movs	r1, #60	; 0x3c
   2129c:	a805      	add	r0, sp, #20
   2129e:	f01e ffcd 	bl	4023c <sniprintf>
		if ((len > 0) && (len < sizeof(log_buf))) {
   212a2:	3801      	subs	r0, #1
   212a4:	283a      	cmp	r0, #58	; 0x3a
   212a6:	dcc2      	bgt.n	2122e <lte_handler+0x22>
			LOG_INF("%s", log_strdup(log_buf));
   212a8:	2303      	movs	r3, #3
   212aa:	f04f 0400 	mov.w	r4, #0
   212ae:	4a19      	ldr	r2, [pc, #100]	; (21314 <lte_handler+0x108>)
   212b0:	f363 0407 	bfi	r4, r3, #0, #8
   212b4:	4b18      	ldr	r3, [pc, #96]	; (21318 <lte_handler+0x10c>)
   212b6:	a805      	add	r0, sp, #20
   212b8:	1a9b      	subs	r3, r3, r2
   212ba:	08db      	lsrs	r3, r3, #3
   212bc:	f363 148f 	bfi	r4, r3, #6, #10
   212c0:	f020 fed0 	bl	42064 <log_strdup>
   212c4:	491a      	ldr	r1, [pc, #104]	; (21330 <lte_handler+0x124>)
   212c6:	4602      	mov	r2, r0
   212c8:	4620      	mov	r0, r4
   212ca:	e7c7      	b.n	2125c <lte_handler+0x50>
		LOG_INF("RRC mode: %s",
   212cc:	2303      	movs	r3, #3
   212ce:	f04f 0000 	mov.w	r0, #0
   212d2:	4a10      	ldr	r2, [pc, #64]	; (21314 <lte_handler+0x108>)
   212d4:	f363 0007 	bfi	r0, r3, #0, #8
   212d8:	4b0f      	ldr	r3, [pc, #60]	; (21318 <lte_handler+0x10c>)
   212da:	7921      	ldrb	r1, [r4, #4]
   212dc:	1a9b      	subs	r3, r3, r2
   212de:	08db      	lsrs	r3, r3, #3
   212e0:	f363 108f 	bfi	r0, r3, #6, #10
   212e4:	4a13      	ldr	r2, [pc, #76]	; (21334 <lte_handler+0x128>)
   212e6:	4b14      	ldr	r3, [pc, #80]	; (21338 <lte_handler+0x12c>)
   212e8:	2901      	cmp	r1, #1
   212ea:	bf18      	it	ne
   212ec:	461a      	movne	r2, r3
   212ee:	4913      	ldr	r1, [pc, #76]	; (2133c <lte_handler+0x130>)
   212f0:	e7b4      	b.n	2125c <lte_handler+0x50>
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   212f2:	2303      	movs	r3, #3
   212f4:	f04f 0000 	mov.w	r0, #0
   212f8:	4a06      	ldr	r2, [pc, #24]	; (21314 <lte_handler+0x108>)
   212fa:	f363 0007 	bfi	r0, r3, #0, #8
   212fe:	4b06      	ldr	r3, [pc, #24]	; (21318 <lte_handler+0x10c>)
   21300:	490f      	ldr	r1, [pc, #60]	; (21340 <lte_handler+0x134>)
   21302:	1a9b      	subs	r3, r3, r2
   21304:	08db      	lsrs	r3, r3, #3
   21306:	f363 108f 	bfi	r0, r3, #6, #10
   2130a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2130e:	e7b6      	b.n	2127e <lte_handler+0x72>
   21310:	200245cc 	.word	0x200245cc
   21314:	00046878 	.word	0x00046878
   21318:	00046888 	.word	0x00046888
   2131c:	000480f0 	.word	0x000480f0
   21320:	00048109 	.word	0x00048109
   21324:	0004812c 	.word	0x0004812c
   21328:	0004814c 	.word	0x0004814c
   2132c:	0004817b 	.word	0x0004817b
   21330:	0004e37f 	.word	0x0004e37f
   21334:	0004811d 	.word	0x0004811d
   21338:	00048127 	.word	0x00048127
   2133c:	000481aa 	.word	0x000481aa
   21340:	000481b7 	.word	0x000481b7

00021344 <motion_handler>:
{
   21344:	b084      	sub	sp, #16
   21346:	b430      	push	{r4, r5}
   21348:	ac02      	add	r4, sp, #8
   2134a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (motion_data.orientation != last_motion_data.orientation) {
   2134e:	4c0b      	ldr	r4, [pc, #44]	; (2137c <motion_handler+0x38>)
   21350:	f89d 2008 	ldrb.w	r2, [sp, #8]
   21354:	7823      	ldrb	r3, [r4, #0]
   21356:	429a      	cmp	r2, r3
   21358:	d00d      	beq.n	21376 <motion_handler+0x32>
		last_motion_data = motion_data;
   2135a:	ad02      	add	r5, sp, #8
   2135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21364:	e895 0003 	ldmia.w	r5, {r0, r1}
   21368:	e884 0003 	stmia.w	r4, {r0, r1}
}
   2136c:	bc30      	pop	{r4, r5}
		k_work_submit_to_queue(&application_work_q,
   2136e:	4804      	ldr	r0, [pc, #16]	; (21380 <motion_handler+0x3c>)
}
   21370:	b004      	add	sp, #16
		k_work_submit_to_queue(&application_work_q,
   21372:	f7ff bf37 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
}
   21376:	bc30      	pop	{r4, r5}
   21378:	b004      	add	sp, #16
   2137a:	4770      	bx	lr
   2137c:	20020e30 	.word	0x20020e30
   21380:	200245c0 	.word	0x200245c0

00021384 <gps_handler>:
{
   21384:	b5f0      	push	{r4, r5, r6, r7, lr}
   21386:	460c      	mov	r4, r1
   21388:	b08b      	sub	sp, #44	; 0x2c
	gps_last_active_time = k_uptime_get();
   2138a:	f020 fa85 	bl	41898 <k_uptime_get>
	switch (evt->type) {
   2138e:	7823      	ldrb	r3, [r4, #0]
   21390:	2b0a      	cmp	r3, #10
   21392:	d825      	bhi.n	213e0 <gps_handler+0x5c>
   21394:	e8df f013 	tbh	[pc, r3, lsl #1]
   21398:	0026000b 	.word	0x0026000b
   2139c:	0024003b 	.word	0x0024003b
   213a0:	0024005c 	.word	0x0024005c
   213a4:	00de0086 	.word	0x00de0086
   213a8:	00fa00ed 	.word	0x00fa00ed
   213ac:	0117      	.short	0x0117
		LOG_INF("GPS_EVT_SEARCH_STARTED");
   213ae:	2303      	movs	r3, #3
   213b0:	f04f 0000 	mov.w	r0, #0
   213b4:	4a8b      	ldr	r2, [pc, #556]	; (215e4 <gps_handler+0x260>)
   213b6:	f363 0007 	bfi	r0, r3, #0, #8
   213ba:	4b8b      	ldr	r3, [pc, #556]	; (215e8 <gps_handler+0x264>)
   213bc:	498b      	ldr	r1, [pc, #556]	; (215ec <gps_handler+0x268>)
   213be:	1a9b      	subs	r3, r3, r2
   213c0:	08db      	lsrs	r3, r3, #3
   213c2:	f363 108f 	bfi	r0, r3, #6, #10
   213c6:	f020 fe3a 	bl	4203e <log_string_sync>
		gps_control_set_active(true);
   213ca:	2001      	movs	r0, #1
   213cc:	f002 f9b4 	bl	23738 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   213d0:	2008      	movs	r0, #8
   213d2:	f001 faff 	bl	229d4 <ui_led_set_pattern>
		gps_last_search_start_time = k_uptime_get();
   213d6:	f020 fa5f 	bl	41898 <k_uptime_get>
   213da:	4b85      	ldr	r3, [pc, #532]	; (215f0 <gps_handler+0x26c>)
   213dc:	e9c3 0100 	strd	r0, r1, [r3]
}
   213e0:	b00b      	add	sp, #44	; 0x2c
   213e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
   213e4:	2303      	movs	r3, #3
   213e6:	f04f 0000 	mov.w	r0, #0
   213ea:	4a7e      	ldr	r2, [pc, #504]	; (215e4 <gps_handler+0x260>)
   213ec:	f363 0007 	bfi	r0, r3, #0, #8
   213f0:	4b7d      	ldr	r3, [pc, #500]	; (215e8 <gps_handler+0x264>)
   213f2:	4980      	ldr	r1, [pc, #512]	; (215f4 <gps_handler+0x270>)
   213f4:	1a9b      	subs	r3, r3, r2
   213f6:	08db      	lsrs	r3, r3, #3
   213f8:	f363 108f 	bfi	r0, r3, #6, #10
   213fc:	f020 fe1f 	bl	4203e <log_string_sync>
		gps_control_set_active(false);
   21400:	2000      	movs	r0, #0
   21402:	f002 f999 	bl	23738 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   21406:	2008      	movs	r0, #8
   21408:	f001 fae4 	bl	229d4 <ui_led_set_pattern>
		break;
   2140c:	e7e8      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
   2140e:	2303      	movs	r3, #3
   21410:	f04f 0000 	mov.w	r0, #0
   21414:	4c74      	ldr	r4, [pc, #464]	; (215e8 <gps_handler+0x264>)
   21416:	f363 0007 	bfi	r0, r3, #0, #8
   2141a:	4b72      	ldr	r3, [pc, #456]	; (215e4 <gps_handler+0x260>)
   2141c:	4976      	ldr	r1, [pc, #472]	; (215f8 <gps_handler+0x274>)
   2141e:	1ae4      	subs	r4, r4, r3
   21420:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21424:	f364 108f 	bfi	r0, r4, #6, #10
   21428:	f020 fe09 	bl	4203e <log_string_sync>
		gps_control_set_active(false);
   2142c:	2000      	movs	r0, #0
   2142e:	f002 f983 	bl	23738 <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
   21432:	f04f 0500 	mov.w	r5, #0
   21436:	2303      	movs	r3, #3
   21438:	f363 0507 	bfi	r5, r3, #0, #8
   2143c:	f002 fac6 	bl	239cc <gps_control_get_gps_reporting_interval>
   21440:	f364 158f 	bfi	r5, r4, #6, #10
   21444:	4602      	mov	r2, r0
   21446:	496d      	ldr	r1, [pc, #436]	; (215fc <gps_handler+0x278>)
   21448:	4628      	mov	r0, r5
   2144a:	f020 fdf8 	bl	4203e <log_string_sync>
   2144e:	e7c7      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_PVT_FIX");
   21450:	2303      	movs	r3, #3
   21452:	f04f 0000 	mov.w	r0, #0
   21456:	4a63      	ldr	r2, [pc, #396]	; (215e4 <gps_handler+0x260>)
   21458:	f363 0007 	bfi	r0, r3, #0, #8
   2145c:	4b62      	ldr	r3, [pc, #392]	; (215e8 <gps_handler+0x264>)
   2145e:	4968      	ldr	r1, [pc, #416]	; (21600 <gps_handler+0x27c>)
   21460:	1a9b      	subs	r3, r3, r2
   21462:	08db      	lsrs	r3, r3, #3
   21464:	f363 108f 	bfi	r0, r3, #6, #10
   21468:	f020 fde9 	bl	4203e <log_string_sync>
	struct tm gps_time = {
   2146c:	2300      	movs	r3, #0
   2146e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21472:	9309      	str	r3, [sp, #36]	; 0x24
		.tm_sec = gps_data->datetime.seconds,
   21474:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	date_time_set(&gps_time);
   21478:	a801      	add	r0, sp, #4
		.tm_sec = gps_data->datetime.seconds,
   2147a:	9301      	str	r3, [sp, #4]
		.tm_min = gps_data->datetime.minute,
   2147c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21480:	9302      	str	r3, [sp, #8]
		.tm_hour = gps_data->datetime.hour,
   21482:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21486:	9303      	str	r3, [sp, #12]
		.tm_mday = gps_data->datetime.day,
   21488:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   2148c:	9304      	str	r3, [sp, #16]
		.tm_mon = gps_data->datetime.month - 1,
   2148e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   21492:	3b01      	subs	r3, #1
	struct tm gps_time = {
   21494:	9305      	str	r3, [sp, #20]
		.tm_year = gps_data->datetime.year - 1900,
   21496:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   21498:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
	struct tm gps_time = {
   2149c:	9306      	str	r3, [sp, #24]
	date_time_set(&gps_time);
   2149e:	f00b fbc9 	bl	2cc34 <date_time_set>
   214a2:	e79d      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("Position fix with NMEA data");
   214a4:	2303      	movs	r3, #3
   214a6:	f04f 0000 	mov.w	r0, #0
   214aa:	4d4f      	ldr	r5, [pc, #316]	; (215e8 <gps_handler+0x264>)
   214ac:	f363 0007 	bfi	r0, r3, #0, #8
   214b0:	4b4c      	ldr	r3, [pc, #304]	; (215e4 <gps_handler+0x260>)
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   214b2:	4e54      	ldr	r6, [pc, #336]	; (21604 <gps_handler+0x280>)
		LOG_INF("Position fix with NMEA data");
   214b4:	1aed      	subs	r5, r5, r3
   214b6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   214ba:	f365 108f 	bfi	r0, r5, #6, #10
   214be:	4952      	ldr	r1, [pc, #328]	; (21608 <gps_handler+0x284>)
   214c0:	f020 fdbd 	bl	4203e <log_string_sync>
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   214c4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
   214c8:	f104 0108 	add.w	r1, r4, #8
   214cc:	2354      	movs	r3, #84	; 0x54
   214ce:	4630      	mov	r0, r6
   214d0:	f023 feb7 	bl	45242 <__memcpy_chk>
		gps_data.len = evt->nmea.len;
   214d4:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
		gps_cloud_data.data.buf = gps_data.buf;
   214d8:	4c4c      	ldr	r4, [pc, #304]	; (2160c <gps_handler+0x288>)
		gps_data.len = evt->nmea.len;
   214da:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		gps_cloud_data.data.len = gps_data.len;
   214de:	e9c4 6301 	strd	r6, r3, [r4, #4]
		gps_cloud_data.ts = k_uptime_get();
   214e2:	f020 f9d9 	bl	41898 <k_uptime_get>
		gps_cloud_data.tag += 1;
   214e6:	68e3      	ldr	r3, [r4, #12]
		gps_cloud_data.ts = k_uptime_get();
   214e8:	e9c4 0104 	strd	r0, r1, [r4, #16]
		if (gps_cloud_data.tag == 0) {
   214ec:	3301      	adds	r3, #1
			gps_cloud_data.tag = 0x1;
   214ee:	bf08      	it	eq
   214f0:	2301      	moveq	r3, #1
   214f2:	60e3      	str	r3, [r4, #12]
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   214f4:	f020 f9d0 	bl	41898 <k_uptime_get>
   214f8:	4b3d      	ldr	r3, [pc, #244]	; (215f0 <gps_handler+0x26c>)
   214fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   214fe:	e9d3 4600 	ldrd	r4, r6, [r3]
   21502:	1b00      	subs	r0, r0, r4
   21504:	eb61 0106 	sbc.w	r1, r1, r6
   21508:	2300      	movs	r3, #0
   2150a:	f7fb fc87 	bl	1ce1c <__aeabi_ldivmod>
   2150e:	4606      	mov	r6, r0
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21510:	2008      	movs	r0, #8
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   21512:	460f      	mov	r7, r1
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21514:	f001 fa5e 	bl	229d4 <ui_led_set_pattern>
		gps_control_set_active(false);
   21518:	2000      	movs	r0, #0
   2151a:	f002 f90d 	bl	23738 <gps_control_set_active>
		LOG_INF("GPS will be started in %lld seconds",
   2151e:	f04f 0400 	mov.w	r4, #0
   21522:	2303      	movs	r3, #3
   21524:	f363 0407 	bfi	r4, r3, #0, #8
   21528:	f002 fa50 	bl	239cc <gps_control_get_gps_reporting_interval>
   2152c:	17c1      	asrs	r1, r0, #31
   2152e:	f510 72b4 	adds.w	r2, r0, #360	; 0x168
   21532:	f141 0300 	adc.w	r3, r1, #0
   21536:	f365 148f 	bfi	r4, r5, #6, #10
   2153a:	1b92      	subs	r2, r2, r6
   2153c:	eb63 0307 	sbc.w	r3, r3, r7
   21540:	4933      	ldr	r1, [pc, #204]	; (21610 <gps_handler+0x28c>)
   21542:	4620      	mov	r0, r4
   21544:	f020 fd7b 	bl	4203e <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   21548:	4832      	ldr	r0, [pc, #200]	; (21614 <gps_handler+0x290>)
   2154a:	f7ff fe4b 	bl	211e4 <k_work_submit_to_queue.constprop.14>
		env_sensors_poll();
   2154e:	f002 fadd 	bl	23b0c <env_sensors_poll>
		break;
   21552:	e745      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
   21554:	2303      	movs	r3, #3
   21556:	f04f 0000 	mov.w	r0, #0
   2155a:	4a22      	ldr	r2, [pc, #136]	; (215e4 <gps_handler+0x260>)
   2155c:	f363 0007 	bfi	r0, r3, #0, #8
   21560:	4b21      	ldr	r3, [pc, #132]	; (215e8 <gps_handler+0x264>)
   21562:	492d      	ldr	r1, [pc, #180]	; (21618 <gps_handler+0x294>)
   21564:	1a9b      	subs	r3, r3, r2
   21566:	08db      	lsrs	r3, r3, #3
   21568:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
   2156c:	f020 fd67 	bl	4203e <log_string_sync>
   21570:	e749      	b.n	21406 <gps_handler+0x82>
   21572:	2303      	movs	r3, #3
   21574:	f04f 0000 	mov.w	r0, #0
   21578:	4a1a      	ldr	r2, [pc, #104]	; (215e4 <gps_handler+0x260>)
   2157a:	f363 0007 	bfi	r0, r3, #0, #8
   2157e:	4b1a      	ldr	r3, [pc, #104]	; (215e8 <gps_handler+0x264>)
   21580:	4926      	ldr	r1, [pc, #152]	; (2161c <gps_handler+0x298>)
   21582:	1a9b      	subs	r3, r3, r2
   21584:	08db      	lsrs	r3, r3, #3
   21586:	f363 108f 	bfi	r0, r3, #6, #10
   2158a:	e7ef      	b.n	2156c <gps_handler+0x1e8>
		LOG_INF("GPS_EVT_AGPS_DATA_NEEDED");
   2158c:	2303      	movs	r3, #3
   2158e:	f04f 0000 	mov.w	r0, #0
   21592:	4a14      	ldr	r2, [pc, #80]	; (215e4 <gps_handler+0x260>)
   21594:	f363 0007 	bfi	r0, r3, #0, #8
   21598:	4b13      	ldr	r3, [pc, #76]	; (215e8 <gps_handler+0x264>)
   2159a:	4921      	ldr	r1, [pc, #132]	; (21620 <gps_handler+0x29c>)
   2159c:	1a9b      	subs	r3, r3, r2
   2159e:	08db      	lsrs	r3, r3, #3
   215a0:	f363 108f 	bfi	r0, r3, #6, #10
   215a4:	f020 fd4b 	bl	4203e <log_string_sync>
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215a8:	f854 0f08 	ldr.w	r0, [r4, #8]!
   215ac:	4b1d      	ldr	r3, [pc, #116]	; (21624 <gps_handler+0x2a0>)
   215ae:	6861      	ldr	r1, [r4, #4]
		k_delayed_work_submit_to_queue(&application_work_q,
   215b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215b4:	c303      	stmia	r3!, {r0, r1}
   215b6:	68a0      	ldr	r0, [r4, #8]
		k_delayed_work_submit_to_queue(&application_work_q,
   215b8:	491b      	ldr	r1, [pc, #108]	; (21628 <gps_handler+0x2a4>)
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215ba:	6018      	str	r0, [r3, #0]
		k_delayed_work_submit_to_queue(&application_work_q,
   215bc:	2300      	movs	r3, #0
   215be:	481b      	ldr	r0, [pc, #108]	; (2162c <gps_handler+0x2a8>)
   215c0:	f01d f88c 	bl	3e6dc <k_delayed_work_submit_to_queue>
		break;
   215c4:	e70c      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_ERROR\n");
   215c6:	2303      	movs	r3, #3
   215c8:	f04f 0000 	mov.w	r0, #0
   215cc:	4a05      	ldr	r2, [pc, #20]	; (215e4 <gps_handler+0x260>)
   215ce:	f363 0007 	bfi	r0, r3, #0, #8
   215d2:	4b05      	ldr	r3, [pc, #20]	; (215e8 <gps_handler+0x264>)
   215d4:	4916      	ldr	r1, [pc, #88]	; (21630 <gps_handler+0x2ac>)
   215d6:	1a9b      	subs	r3, r3, r2
   215d8:	08db      	lsrs	r3, r3, #3
   215da:	f363 108f 	bfi	r0, r3, #6, #10
   215de:	f020 fd2e 	bl	4203e <log_string_sync>
}
   215e2:	e6fd      	b.n	213e0 <gps_handler+0x5c>
   215e4:	00046878 	.word	0x00046878
   215e8:	00046888 	.word	0x00046888
   215ec:	00047f8f 	.word	0x00047f8f
   215f0:	20020e28 	.word	0x20020e28
   215f4:	00047fa6 	.word	0x00047fa6
   215f8:	00047fbd 	.word	0x00047fbd
   215fc:	00047fd4 	.word	0x00047fd4
   21600:	00047ffe 	.word	0x00047ffe
   21604:	2002a39a 	.word	0x2002a39a
   21608:	0004800e 	.word	0x0004800e
   2160c:	20020000 	.word	0x20020000
   21610:	0004802a 	.word	0x0004802a
   21614:	200245dc 	.word	0x200245dc
   21618:	0004804e 	.word	0x0004804e
   2161c:	00048068 	.word	0x00048068
   21620:	00048084 	.word	0x00048084
   21624:	20024598 	.word	0x20024598
   21628:	200217a8 	.word	0x200217a8
   2162c:	20020c80 	.word	0x20020c80
   21630:	0004809d 	.word	0x0004809d

00021634 <date_time_event_handler>:
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

static void date_time_event_handler(const struct date_time_evt *evt)
{
   21634:	b508      	push	{r3, lr}
	switch (evt->type) {
   21636:	7803      	ldrb	r3, [r0, #0]
   21638:	2b03      	cmp	r3, #3
   2163a:	d811      	bhi.n	21660 <date_time_event_handler+0x2c>
   2163c:	e8df f003 	tbb	[pc, r3]
   21640:	2f221502 	.word	0x2f221502
	case DATE_TIME_OBTAINED_MODEM:
		LOG_INF("DATE_TIME_OBTAINED_MODEM");
   21644:	2303      	movs	r3, #3
   21646:	f04f 0000 	mov.w	r0, #0
   2164a:	4a1b      	ldr	r2, [pc, #108]	; (216b8 <date_time_event_handler+0x84>)
   2164c:	f363 0007 	bfi	r0, r3, #0, #8
   21650:	4b1a      	ldr	r3, [pc, #104]	; (216bc <date_time_event_handler+0x88>)
   21652:	491b      	ldr	r1, [pc, #108]	; (216c0 <date_time_event_handler+0x8c>)
   21654:	1a9b      	subs	r3, r3, r2
   21656:	08db      	lsrs	r3, r3, #3
   21658:	f363 108f 	bfi	r0, r3, #6, #10
		break;
	case DATE_TIME_OBTAINED_EXT:
		LOG_INF("DATE_TIME_OBTAINED_EXT");
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   2165c:	f020 fcef 	bl	4203e <log_string_sync>

	/* Do not depend on obtained time, continue upon any event from the
	 * date time library.
	 */
	k_sem_give(&date_time_obtained);
}
   21660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   21664:	4817      	ldr	r0, [pc, #92]	; (216c4 <date_time_event_handler+0x90>)
   21666:	f01c bdcd 	b.w	3e204 <z_impl_k_sem_give>
		LOG_INF("DATE_TIME_OBTAINED_NTP");
   2166a:	2303      	movs	r3, #3
   2166c:	f04f 0000 	mov.w	r0, #0
   21670:	4a11      	ldr	r2, [pc, #68]	; (216b8 <date_time_event_handler+0x84>)
   21672:	f363 0007 	bfi	r0, r3, #0, #8
   21676:	4b11      	ldr	r3, [pc, #68]	; (216bc <date_time_event_handler+0x88>)
   21678:	4913      	ldr	r1, [pc, #76]	; (216c8 <date_time_event_handler+0x94>)
   2167a:	1a9b      	subs	r3, r3, r2
   2167c:	08db      	lsrs	r3, r3, #3
   2167e:	f363 108f 	bfi	r0, r3, #6, #10
   21682:	e7eb      	b.n	2165c <date_time_event_handler+0x28>
		LOG_INF("DATE_TIME_OBTAINED_EXT");
   21684:	2303      	movs	r3, #3
   21686:	f04f 0000 	mov.w	r0, #0
   2168a:	4a0b      	ldr	r2, [pc, #44]	; (216b8 <date_time_event_handler+0x84>)
   2168c:	f363 0007 	bfi	r0, r3, #0, #8
   21690:	4b0a      	ldr	r3, [pc, #40]	; (216bc <date_time_event_handler+0x88>)
   21692:	490e      	ldr	r1, [pc, #56]	; (216cc <date_time_event_handler+0x98>)
   21694:	1a9b      	subs	r3, r3, r2
   21696:	08db      	lsrs	r3, r3, #3
   21698:	f363 108f 	bfi	r0, r3, #6, #10
   2169c:	e7de      	b.n	2165c <date_time_event_handler+0x28>
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   2169e:	2303      	movs	r3, #3
   216a0:	f04f 0000 	mov.w	r0, #0
   216a4:	4a04      	ldr	r2, [pc, #16]	; (216b8 <date_time_event_handler+0x84>)
   216a6:	f363 0007 	bfi	r0, r3, #0, #8
   216aa:	4b04      	ldr	r3, [pc, #16]	; (216bc <date_time_event_handler+0x88>)
   216ac:	4908      	ldr	r1, [pc, #32]	; (216d0 <date_time_event_handler+0x9c>)
   216ae:	1a9b      	subs	r3, r3, r2
   216b0:	08db      	lsrs	r3, r3, #3
   216b2:	f363 108f 	bfi	r0, r3, #6, #10
   216b6:	e7d1      	b.n	2165c <date_time_event_handler+0x28>
   216b8:	00046878 	.word	0x00046878
   216bc:	00046888 	.word	0x00046888
   216c0:	00047ee1 	.word	0x00047ee1
   216c4:	20020be8 	.word	0x20020be8
   216c8:	00047efa 	.word	0x00047efa
   216cc:	00047f11 	.word	0x00047f11
   216d0:	00047f28 	.word	0x00047f28

000216d4 <cloud_cmd_handler>:
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   216d4:	6803      	ldr	r3, [r0, #0]
{
   216d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   216d8:	4958      	ldr	r1, [pc, #352]	; (2183c <cloud_cmd_handler+0x168>)
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   216da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   216de:	428a      	cmp	r2, r1
   216e0:	d109      	bne.n	216f6 <cloud_cmd_handler+0x22>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   216e2:	f990 0010 	ldrsb.w	r0, [r0, #16]
   216e6:	1e43      	subs	r3, r0, #1
   216e8:	4258      	negs	r0, r3
   216ea:	4158      	adcs	r0, r3
}
   216ec:	b003      	add	sp, #12
   216ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   216f2:	f7ff bbf5 	b.w	20ee0 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   216f6:	4952      	ldr	r1, [pc, #328]	; (21840 <cloud_cmd_handler+0x16c>)
   216f8:	428a      	cmp	r2, r1
   216fa:	d149      	bne.n	21790 <cloud_cmd_handler+0xbc>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   216fc:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   216fe:	2c00      	cmp	r4, #0
   21700:	f000 8099 	beq.w	21836 <cloud_cmd_handler+0x162>
	return z_impl_k_sem_take(sem, timeout);
   21704:	f44f 7224 	mov.w	r2, #656	; 0x290
   21708:	2300      	movs	r3, #0
   2170a:	484e      	ldr	r0, [pc, #312]	; (21844 <cloud_cmd_handler+0x170>)
   2170c:	f01c fdbe 	bl	3e28c <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   21710:	4605      	mov	r5, r0
   21712:	b198      	cbz	r0, 2173c <cloud_cmd_handler+0x68>
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   21714:	2301      	movs	r3, #1
   21716:	f04f 0000 	mov.w	r0, #0
   2171a:	4a4b      	ldr	r2, [pc, #300]	; (21848 <cloud_cmd_handler+0x174>)
   2171c:	f363 0007 	bfi	r0, r3, #0, #8
   21720:	4b4a      	ldr	r3, [pc, #296]	; (2184c <cloud_cmd_handler+0x178>)
   21722:	494b      	ldr	r1, [pc, #300]	; (21850 <cloud_cmd_handler+0x17c>)
   21724:	1a9b      	subs	r3, r3, r2
   21726:	08db      	lsrs	r3, r3, #3
   21728:	f363 108f 	bfi	r0, r3, #6, #10
   2172c:	f44f 735d 	mov.w	r3, #884	; 0x374
   21730:	4a48      	ldr	r2, [pc, #288]	; (21854 <cloud_cmd_handler+0x180>)
}
   21732:	b003      	add	sp, #12
   21734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   21738:	f020 bc81 	b.w	4203e <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   2173c:	f640 218d 	movw	r1, #2701	; 0xa8d
   21740:	4620      	mov	r0, r4
   21742:	f023 ff8f 	bl	45664 <strnlen>
   21746:	f640 228d 	movw	r2, #2701	; 0xa8d
   2174a:	4290      	cmp	r0, r2
   2174c:	d11b      	bne.n	21786 <cloud_cmd_handler+0xb2>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   2174e:	2301      	movs	r3, #1
   21750:	f04f 0000 	mov.w	r0, #0
   21754:	4a3c      	ldr	r2, [pc, #240]	; (21848 <cloud_cmd_handler+0x174>)
   21756:	f363 0007 	bfi	r0, r3, #0, #8
   2175a:	4b3c      	ldr	r3, [pc, #240]	; (2184c <cloud_cmd_handler+0x178>)
   2175c:	493e      	ldr	r1, [pc, #248]	; (21858 <cloud_cmd_handler+0x184>)
   2175e:	1a9b      	subs	r3, r3, r2
   21760:	08db      	lsrs	r3, r3, #3
   21762:	f363 108f 	bfi	r0, r3, #6, #10
   21766:	f640 238c 	movw	r3, #2700	; 0xa8c
   2176a:	4a3a      	ldr	r2, [pc, #232]	; (21854 <cloud_cmd_handler+0x180>)
   2176c:	9300      	str	r3, [sp, #0]
   2176e:	f240 337d 	movw	r3, #893	; 0x37d
   21772:	f020 fc64 	bl	4203e <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   21776:	4b39      	ldr	r3, [pc, #228]	; (2185c <cloud_cmd_handler+0x188>)
   21778:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   2177a:	4839      	ldr	r0, [pc, #228]	; (21860 <cloud_cmd_handler+0x18c>)
}
   2177c:	b003      	add	sp, #12
   2177e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_work_submit_to_queue(&application_work_q,
   21782:	f7ff bd2f 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
		strcpy(modem_at_cmd_buff, at_cmd);
   21786:	4621      	mov	r1, r4
   21788:	4834      	ldr	r0, [pc, #208]	; (2185c <cloud_cmd_handler+0x188>)
   2178a:	f023 ff2a 	bl	455e2 <__strcpy_chk>
   2178e:	e7f4      	b.n	2177a <cloud_cmd_handler+0xa6>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   21790:	4934      	ldr	r1, [pc, #208]	; (21864 <cloud_cmd_handler+0x190>)
   21792:	428a      	cmp	r2, r1
   21794:	d10d      	bne.n	217b2 <cloud_cmd_handler+0xde>
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   21796:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2179a:	f7fb facf 	bl	1cd3c <__aeabi_d2uiz>
   2179e:	b2c2      	uxtb	r2, r0
   217a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
   217a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   217a8:	b003      	add	sp, #12
   217aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   217ae:	f020 b895 	b.w	418dc <ui_led_set_color>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   217b2:	4a2d      	ldr	r2, [pc, #180]	; (21868 <cloud_cmd_handler+0x194>)
   217b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   217b8:	4293      	cmp	r3, r2
   217ba:	d11f      	bne.n	217fc <cloud_cmd_handler+0x128>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   217bc:	7842      	ldrb	r2, [r0, #1]
   217be:	2a0e      	cmp	r2, #14
   217c0:	d039      	beq.n	21836 <cloud_cmd_handler+0x162>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   217c2:	2a07      	cmp	r2, #7
   217c4:	d108      	bne.n	217d8 <cloud_cmd_handler+0x104>
			env_sensors_set_send_interval(
   217c6:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   217ca:	f7fb fab7 	bl	1cd3c <__aeabi_d2uiz>
}
   217ce:	b003      	add	sp, #12
   217d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   217d4:	f002 bb12 	b.w	23dfc <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   217d8:	b36a      	cbz	r2, 21836 <cloud_cmd_handler+0x162>
			LOG_ERR("Interval command not valid for channel %d",
   217da:	2301      	movs	r3, #1
   217dc:	f04f 0000 	mov.w	r0, #0
   217e0:	4919      	ldr	r1, [pc, #100]	; (21848 <cloud_cmd_handler+0x174>)
   217e2:	f363 0007 	bfi	r0, r3, #0, #8
   217e6:	4b19      	ldr	r3, [pc, #100]	; (2184c <cloud_cmd_handler+0x178>)
   217e8:	1a5b      	subs	r3, r3, r1
   217ea:	08db      	lsrs	r3, r3, #3
   217ec:	491f      	ldr	r1, [pc, #124]	; (2186c <cloud_cmd_handler+0x198>)
   217ee:	f363 108f 	bfi	r0, r3, #6, #10
}
   217f2:	b003      	add	sp, #12
   217f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   217f8:	f020 bc21 	b.w	4203e <log_string_sync>
	} else if ((cmd->group == CLOUD_CMD_GROUP_GET) &&
   217fc:	2b04      	cmp	r3, #4
   217fe:	d11a      	bne.n	21836 <cloud_cmd_handler+0x162>
		if (cmd->channel == CLOUD_CHANNEL_FLIP) {
   21800:	7843      	ldrb	r3, [r0, #1]
   21802:	2b01      	cmp	r3, #1
   21804:	d101      	bne.n	2180a <cloud_cmd_handler+0x136>
			k_work_submit_to_queue(&application_work_q,
   21806:	481a      	ldr	r0, [pc, #104]	; (21870 <cloud_cmd_handler+0x19c>)
   21808:	e7b8      	b.n	2177c <cloud_cmd_handler+0xa8>
		} else if (cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) {
   2180a:	2b0d      	cmp	r3, #13
   2180c:	d101      	bne.n	21812 <cloud_cmd_handler+0x13e>
			k_work_submit_to_queue(&application_work_q,
   2180e:	4819      	ldr	r0, [pc, #100]	; (21874 <cloud_cmd_handler+0x1a0>)
   21810:	e7b4      	b.n	2177c <cloud_cmd_handler+0xa8>
		} else if (cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) {
   21812:	2b0c      	cmp	r3, #12
   21814:	d108      	bne.n	21828 <cloud_cmd_handler+0x154>
			k_delayed_work_submit_to_queue(&application_work_q,
   21816:	2200      	movs	r2, #0
   21818:	2300      	movs	r3, #0
   2181a:	4917      	ldr	r1, [pc, #92]	; (21878 <cloud_cmd_handler+0x1a4>)
   2181c:	4817      	ldr	r0, [pc, #92]	; (2187c <cloud_cmd_handler+0x1a8>)
}
   2181e:	b003      	add	sp, #12
   21820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_delayed_work_submit_to_queue(&application_work_q,
   21824:	f01c bf5a 	b.w	3e6dc <k_delayed_work_submit_to_queue>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   21828:	2b07      	cmp	r3, #7
   2182a:	d104      	bne.n	21836 <cloud_cmd_handler+0x162>
}
   2182c:	b003      	add	sp, #12
   2182e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_poll();
   21832:	f002 b96b 	b.w	23b0c <env_sensors_poll>
}
   21836:	b003      	add	sp, #12
   21838:	bd30      	pop	{r4, r5, pc}
   2183a:	bf00      	nop
   2183c:	00010008 	.word	0x00010008
   21840:	0007140a 	.word	0x0007140a
   21844:	20020c30 	.word	0x20020c30
   21848:	00046878 	.word	0x00046878
   2184c:	00046888 	.word	0x00046888
   21850:	000479c4 	.word	0x000479c4
   21854:	00047982 	.word	0x00047982
   21858:	000479e6 	.word	0x000479e6
   2185c:	2002a3ee 	.word	0x2002a3ee
   21860:	200245e8 	.word	0x200245e8
   21864:	00050508 	.word	0x00050508
   21868:	00040008 	.word	0x00040008
   2186c:	00047a14 	.word	0x00047a14
   21870:	200245c0 	.word	0x200245c0
   21874:	200245b4 	.word	0x200245b4
   21878:	20021778 	.word	0x20021778
   2187c:	20020c80 	.word	0x20020c80

00021880 <send_modem_at_cmd_work_fn>:
{
   21880:	b530      	push	{r4, r5, lr}
   21882:	b091      	sub	sp, #68	; 0x44
	struct cloud_channel_data modem_data = {
   21884:	2218      	movs	r2, #24
   21886:	2100      	movs	r1, #0
   21888:	a804      	add	r0, sp, #16
   2188a:	f023 fced 	bl	45268 <memset>
   2188e:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   21890:	2218      	movs	r2, #24
   21892:	2100      	movs	r1, #0
   21894:	a80a      	add	r0, sp, #40	; 0x28
	struct cloud_channel_data modem_data = {
   21896:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   2189a:	f023 fce5 	bl	45268 <memset>
	size_t len = strlen(modem_at_cmd_buff);
   2189e:	4837      	ldr	r0, [pc, #220]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218a0:	f7fb fce0 	bl	1d264 <strlen>
	if (len == 0) {
   218a4:	4c35      	ldr	r4, [pc, #212]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218a6:	bb90      	cbnz	r0, 2190e <send_modem_at_cmd_work_fn+0x8e>
		state = AT_CMD_ERROR;
   218a8:	2301      	movs	r3, #1
		err = -ENOBUFS;
   218aa:	f06f 0568 	mvn.w	r5, #104	; 0x68
		state = AT_CMD_ERROR;
   218ae:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   218b2:	4832      	ldr	r0, [pc, #200]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218b4:	f7fb fcd6 	bl	1d264 <strlen>
	if (err) {
   218b8:	b39d      	cbz	r5, 21922 <send_modem_at_cmd_work_fn+0xa2>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   218ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   218be:	4a30      	ldr	r2, [pc, #192]	; (21980 <send_modem_at_cmd_work_fn+0x100>)
   218c0:	9300      	str	r3, [sp, #0]
   218c2:	f640 218d 	movw	r1, #2701	; 0xa8d
   218c6:	462b      	mov	r3, r5
   218c8:	482c      	ldr	r0, [pc, #176]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218ca:	f01e fcb7 	bl	4023c <sniprintf>
	modem_data.data.len = len;
   218ce:	e9cd 4005 	strd	r4, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   218d2:	aa0a      	add	r2, sp, #40	; 0x28
   218d4:	210a      	movs	r1, #10
   218d6:	a804      	add	r0, sp, #16
   218d8:	f001 f9fa 	bl	22cd0 <cloud_encode_data>
	if (err) {
   218dc:	4602      	mov	r2, r0
   218de:	b380      	cbz	r0, 21942 <send_modem_at_cmd_work_fn+0xc2>
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   218e0:	2301      	movs	r3, #1
   218e2:	f04f 0000 	mov.w	r0, #0
   218e6:	4927      	ldr	r1, [pc, #156]	; (21984 <send_modem_at_cmd_work_fn+0x104>)
   218e8:	f363 0007 	bfi	r0, r3, #0, #8
   218ec:	4b26      	ldr	r3, [pc, #152]	; (21988 <send_modem_at_cmd_work_fn+0x108>)
   218ee:	9200      	str	r2, [sp, #0]
   218f0:	1a5b      	subs	r3, r3, r1
   218f2:	08db      	lsrs	r3, r3, #3
   218f4:	f363 108f 	bfi	r0, r3, #6, #10
   218f8:	f44f 731b 	mov.w	r3, #620	; 0x26c
   218fc:	4a23      	ldr	r2, [pc, #140]	; (2198c <send_modem_at_cmd_work_fn+0x10c>)
   218fe:	4924      	ldr	r1, [pc, #144]	; (21990 <send_modem_at_cmd_work_fn+0x110>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   21900:	f020 fb9d 	bl	4203e <log_string_sync>
	z_impl_k_sem_give(sem);
   21904:	4823      	ldr	r0, [pc, #140]	; (21994 <send_modem_at_cmd_work_fn+0x114>)
   21906:	f01c fc7d 	bl	3e204 <z_impl_k_sem_give>
}
   2190a:	b011      	add	sp, #68	; 0x44
   2190c:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   2190e:	f10d 030f 	add.w	r3, sp, #15
   21912:	f640 228d 	movw	r2, #2701	; 0xa8d
   21916:	4621      	mov	r1, r4
   21918:	4620      	mov	r0, r4
   2191a:	f009 f8d1 	bl	2aac0 <at_cmd_write>
   2191e:	4605      	mov	r5, r0
   21920:	e7c7      	b.n	218b2 <send_modem_at_cmd_work_fn+0x32>
	} else if (len == 0) {
   21922:	b928      	cbnz	r0, 21930 <send_modem_at_cmd_work_fn+0xb0>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   21924:	491c      	ldr	r1, [pc, #112]	; (21998 <send_modem_at_cmd_work_fn+0x118>)
   21926:	4815      	ldr	r0, [pc, #84]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   21928:	f023 fe53 	bl	455d2 <strcpy>
   2192c:	2004      	movs	r0, #4
   2192e:	e7ce      	b.n	218ce <send_modem_at_cmd_work_fn+0x4e>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   21930:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   21934:	d9cb      	bls.n	218ce <send_modem_at_cmd_work_fn+0x4e>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   21936:	4919      	ldr	r1, [pc, #100]	; (2199c <send_modem_at_cmd_work_fn+0x11c>)
   21938:	4810      	ldr	r0, [pc, #64]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   2193a:	f023 fe4a 	bl	455d2 <strcpy>
   2193e:	2032      	movs	r0, #50	; 0x32
   21940:	e7c5      	b.n	218ce <send_modem_at_cmd_work_fn+0x4e>
		err = cloud_send(cloud_backend, &msg);
   21942:	4b17      	ldr	r3, [pc, #92]	; (219a0 <send_modem_at_cmd_work_fn+0x120>)
   21944:	a90a      	add	r1, sp, #40	; 0x28
   21946:	6818      	ldr	r0, [r3, #0]
   21948:	f01f ff92 	bl	41870 <cloud_send>
   2194c:	4604      	mov	r4, r0
   2194e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21950:	f023 fc2f 	bl	451b2 <k_free>
		if (err) {
   21954:	2c00      	cmp	r4, #0
   21956:	d0d5      	beq.n	21904 <send_modem_at_cmd_work_fn+0x84>
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   21958:	2301      	movs	r3, #1
   2195a:	f04f 0000 	mov.w	r0, #0
   2195e:	4a09      	ldr	r2, [pc, #36]	; (21984 <send_modem_at_cmd_work_fn+0x104>)
   21960:	f363 0007 	bfi	r0, r3, #0, #8
   21964:	4b08      	ldr	r3, [pc, #32]	; (21988 <send_modem_at_cmd_work_fn+0x108>)
   21966:	9400      	str	r4, [sp, #0]
   21968:	1a9b      	subs	r3, r3, r2
   2196a:	08db      	lsrs	r3, r3, #3
   2196c:	f363 108f 	bfi	r0, r3, #6, #10
   21970:	4a06      	ldr	r2, [pc, #24]	; (2198c <send_modem_at_cmd_work_fn+0x10c>)
   21972:	f240 2372 	movw	r3, #626	; 0x272
   21976:	490b      	ldr	r1, [pc, #44]	; (219a4 <send_modem_at_cmd_work_fn+0x124>)
   21978:	e7c2      	b.n	21900 <send_modem_at_cmd_work_fn+0x80>
   2197a:	bf00      	nop
   2197c:	2002a3ee 	.word	0x2002a3ee
   21980:	00048503 	.word	0x00048503
   21984:	00046878 	.word	0x00046878
   21988:	00046888 	.word	0x00046888
   2198c:	00047968 	.word	0x00047968
   21990:	00048556 	.word	0x00048556
   21994:	20020c30 	.word	0x20020c30
   21998:	0004851e 	.word	0x0004851e
   2199c:	00048523 	.word	0x00048523
   219a0:	200245ac 	.word	0x200245ac
   219a4:	00048585 	.word	0x00048585

000219a8 <error_handler>:
{
   219a8:	b510      	push	{r4, lr}
   219aa:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   219ac:	2100      	movs	r1, #0
   219ae:	4806      	ldr	r0, [pc, #24]	; (219c8 <error_handler+0x20>)
   219b0:	f01f ff67 	bl	41882 <atomic_set>
	if (err_type == ERROR_CLOUD) {
   219b4:	b90c      	cbnz	r4, 219ba <error_handler+0x12>
		shutdown_modem();
   219b6:	f7ff fa03 	bl	20dc0 <shutdown_modem>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   219ba:	f003 fa31 	bl	24e20 <z_impl_log_panic>
}
   219be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   219c2:	2000      	movs	r0, #0
   219c4:	f004 bbfe 	b.w	261c4 <sys_reboot>
   219c8:	200245a8 	.word	0x200245a8

000219cc <k_sys_fatal_error_handler>:
{
   219cc:	b510      	push	{r4, lr}
   219ce:	4604      	mov	r4, r0
   219d0:	f003 fa26 	bl	24e20 <z_impl_log_panic>
	LOG_ERR("Running main.c error handler");
   219d4:	2301      	movs	r3, #1
   219d6:	f04f 0000 	mov.w	r0, #0
   219da:	4a07      	ldr	r2, [pc, #28]	; (219f8 <k_sys_fatal_error_handler+0x2c>)
   219dc:	f363 0007 	bfi	r0, r3, #0, #8
   219e0:	4b06      	ldr	r3, [pc, #24]	; (219fc <k_sys_fatal_error_handler+0x30>)
   219e2:	4907      	ldr	r1, [pc, #28]	; (21a00 <k_sys_fatal_error_handler+0x34>)
   219e4:	1a9b      	subs	r3, r3, r2
   219e6:	08db      	lsrs	r3, r3, #3
   219e8:	f363 108f 	bfi	r0, r3, #6, #10
   219ec:	f020 fb27 	bl	4203e <log_string_sync>
	error_handler(ERROR_SYSTEM_FAULT, reason);
   219f0:	4621      	mov	r1, r4
   219f2:	2003      	movs	r0, #3
   219f4:	f7ff ffd8 	bl	219a8 <error_handler>
	CODE_UNREACHABLE;
   219f8:	00046878 	.word	0x00046878
   219fc:	00046888 	.word	0x00046888
   21a00:	000480ac 	.word	0x000480ac

00021a04 <env_data_send>:
	struct cloud_msg msg = {
   21a04:	2218      	movs	r2, #24
{
   21a06:	b510      	push	{r4, lr}
   21a08:	b08c      	sub	sp, #48	; 0x30
	struct cloud_msg msg = {
   21a0a:	2100      	movs	r1, #0
   21a0c:	eb0d 0002 	add.w	r0, sp, r2
   21a10:	f023 fc2a 	bl	45268 <memset>
	if (!data_send_enabled()) {
   21a14:	f7ff fa5a 	bl	20ecc <data_send_enabled>
   21a18:	b128      	cbz	r0, 21a26 <env_data_send+0x22>
	if (gps_control_is_active()) {
   21a1a:	f001 fe83 	bl	23724 <gps_control_is_active>
   21a1e:	b120      	cbz	r0, 21a2a <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   21a20:	2001      	movs	r0, #1
   21a22:	f002 fa19 	bl	23e58 <env_sensors_set_backoff_enable>
}
   21a26:	b00c      	add	sp, #48	; 0x30
   21a28:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   21a2a:	f002 fa15 	bl	23e58 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   21a2e:	4668      	mov	r0, sp
   21a30:	f002 f8d6 	bl	23be0 <env_sensors_get_temperature>
   21a34:	b338      	cbz	r0, 21a86 <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   21a36:	4668      	mov	r0, sp
   21a38:	f002 f92c 	bl	23c94 <env_sensors_get_humidity>
   21a3c:	2800      	cmp	r0, #0
   21a3e:	d04d      	beq.n	21adc <env_data_send+0xd8>
	if (env_sensors_get_pressure(&env_data) == 0) {
   21a40:	4668      	mov	r0, sp
   21a42:	f002 f981 	bl	23d48 <env_sensors_get_pressure>
   21a46:	2800      	cmp	r0, #0
   21a48:	d061      	beq.n	21b0e <env_data_send+0x10a>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   21a4a:	4668      	mov	r0, sp
   21a4c:	f01f ff8c 	bl	41968 <env_sensors_get_air_quality>
   21a50:	2800      	cmp	r0, #0
   21a52:	d1e8      	bne.n	21a26 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   21a54:	ed9d 0b02 	vldr	d0, [sp, #8]
   21a58:	200b      	movs	r0, #11
   21a5a:	f001 fdaf 	bl	235bc <cloud_is_send_allowed>
   21a5e:	2800      	cmp	r0, #0
   21a60:	d0e1      	beq.n	21a26 <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21a62:	a906      	add	r1, sp, #24
   21a64:	4668      	mov	r0, sp
   21a66:	f001 f9dd 	bl	22e24 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21a6a:	2800      	cmp	r0, #0
   21a6c:	d1db      	bne.n	21a26 <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   21a6e:	4b34      	ldr	r3, [pc, #208]	; (21b40 <env_data_send+0x13c>)
   21a70:	a906      	add	r1, sp, #24
   21a72:	6818      	ldr	r0, [r3, #0]
   21a74:	f01f fefc 	bl	41870 <cloud_send>
   21a78:	4604      	mov	r4, r0
   21a7a:	9806      	ldr	r0, [sp, #24]
   21a7c:	f023 fb99 	bl	451b2 <k_free>
			if (err) {
   21a80:	2c00      	cmp	r4, #0
   21a82:	d0d0      	beq.n	21a26 <env_data_send+0x22>
   21a84:	e017      	b.n	21ab6 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   21a86:	ed9d 0b02 	vldr	d0, [sp, #8]
   21a8a:	2008      	movs	r0, #8
   21a8c:	f001 fd96 	bl	235bc <cloud_is_send_allowed>
   21a90:	2800      	cmp	r0, #0
   21a92:	d0d0      	beq.n	21a36 <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21a94:	a906      	add	r1, sp, #24
   21a96:	4668      	mov	r0, sp
   21a98:	f001 f9c4 	bl	22e24 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   21a9c:	2800      	cmp	r0, #0
   21a9e:	d1ca      	bne.n	21a36 <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   21aa0:	4b27      	ldr	r3, [pc, #156]	; (21b40 <env_data_send+0x13c>)
   21aa2:	a906      	add	r1, sp, #24
   21aa4:	6818      	ldr	r0, [r3, #0]
   21aa6:	f01f fee3 	bl	41870 <cloud_send>
   21aaa:	4604      	mov	r4, r0
   21aac:	9806      	ldr	r0, [sp, #24]
   21aae:	f023 fb80 	bl	451b2 <k_free>
			if (err) {
   21ab2:	2c00      	cmp	r4, #0
   21ab4:	d0bf      	beq.n	21a36 <env_data_send+0x32>
	LOG_ERR("sensor_data_send failed: %d", err);
   21ab6:	2301      	movs	r3, #1
   21ab8:	f04f 0000 	mov.w	r0, #0
   21abc:	4a21      	ldr	r2, [pc, #132]	; (21b44 <env_data_send+0x140>)
   21abe:	f363 0007 	bfi	r0, r3, #0, #8
   21ac2:	4b21      	ldr	r3, [pc, #132]	; (21b48 <env_data_send+0x144>)
   21ac4:	4921      	ldr	r1, [pc, #132]	; (21b4c <env_data_send+0x148>)
   21ac6:	1a9b      	subs	r3, r3, r2
   21ac8:	08db      	lsrs	r3, r3, #3
   21aca:	f363 108f 	bfi	r0, r3, #6, #10
   21ace:	4622      	mov	r2, r4
   21ad0:	f020 fab5 	bl	4203e <log_string_sync>
	cloud_error_handler(err);
   21ad4:	4620      	mov	r0, r4
   21ad6:	f01f fef2 	bl	418be <cloud_error_handler>
   21ada:	e7a4      	b.n	21a26 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   21adc:	ed9d 0b02 	vldr	d0, [sp, #8]
   21ae0:	2009      	movs	r0, #9
   21ae2:	f001 fd6b 	bl	235bc <cloud_is_send_allowed>
   21ae6:	2800      	cmp	r0, #0
   21ae8:	d0aa      	beq.n	21a40 <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21aea:	a906      	add	r1, sp, #24
   21aec:	4668      	mov	r0, sp
   21aee:	f001 f999 	bl	22e24 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21af2:	2800      	cmp	r0, #0
   21af4:	d1a4      	bne.n	21a40 <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   21af6:	4b12      	ldr	r3, [pc, #72]	; (21b40 <env_data_send+0x13c>)
   21af8:	a906      	add	r1, sp, #24
   21afa:	6818      	ldr	r0, [r3, #0]
   21afc:	f01f feb8 	bl	41870 <cloud_send>
   21b00:	4604      	mov	r4, r0
   21b02:	9806      	ldr	r0, [sp, #24]
   21b04:	f023 fb55 	bl	451b2 <k_free>
			if (err) {
   21b08:	2c00      	cmp	r4, #0
   21b0a:	d099      	beq.n	21a40 <env_data_send+0x3c>
   21b0c:	e7d3      	b.n	21ab6 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   21b0e:	ed9d 0b02 	vldr	d0, [sp, #8]
   21b12:	200a      	movs	r0, #10
   21b14:	f001 fd52 	bl	235bc <cloud_is_send_allowed>
   21b18:	2800      	cmp	r0, #0
   21b1a:	d096      	beq.n	21a4a <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21b1c:	a906      	add	r1, sp, #24
   21b1e:	4668      	mov	r0, sp
   21b20:	f001 f980 	bl	22e24 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21b24:	2800      	cmp	r0, #0
   21b26:	d190      	bne.n	21a4a <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   21b28:	4b05      	ldr	r3, [pc, #20]	; (21b40 <env_data_send+0x13c>)
   21b2a:	a906      	add	r1, sp, #24
   21b2c:	6818      	ldr	r0, [r3, #0]
   21b2e:	f01f fe9f 	bl	41870 <cloud_send>
   21b32:	4604      	mov	r4, r0
   21b34:	9806      	ldr	r0, [sp, #24]
   21b36:	f023 fb3c 	bl	451b2 <k_free>
			if (err) {
   21b3a:	2c00      	cmp	r4, #0
   21b3c:	d085      	beq.n	21a4a <env_data_send+0x46>
   21b3e:	e7ba      	b.n	21ab6 <env_data_send+0xb2>
   21b40:	200245ac 	.word	0x200245ac
   21b44:	00046878 	.word	0x00046878
   21b48:	00046888 	.word	0x00046888
   21b4c:	00047f73 	.word	0x00047f73

00021b50 <motion_data_send>:
{
   21b50:	b510      	push	{r4, lr}
   21b52:	b086      	sub	sp, #24
	if (!flip_mode_enabled || !data_send_enabled() ||
   21b54:	f7ff f9ba 	bl	20ecc <data_send_enabled>
   21b58:	b340      	cbz	r0, 21bac <motion_data_send+0x5c>
	    gps_control_is_active()) {
   21b5a:	f001 fde3 	bl	23724 <gps_control_is_active>
	if (!flip_mode_enabled || !data_send_enabled() ||
   21b5e:	4601      	mov	r1, r0
   21b60:	bb20      	cbnz	r0, 21bac <motion_data_send+0x5c>
	struct cloud_msg msg = {
   21b62:	2218      	movs	r2, #24
   21b64:	4668      	mov	r0, sp
   21b66:	f023 fb7f 	bl	45268 <memset>
	if (cloud_encode_motion_data(&last_motion_data, &msg) == 0) {
   21b6a:	4669      	mov	r1, sp
   21b6c:	4810      	ldr	r0, [pc, #64]	; (21bb0 <motion_data_send+0x60>)
   21b6e:	f001 f9b3 	bl	22ed8 <cloud_encode_motion_data>
   21b72:	b9d8      	cbnz	r0, 21bac <motion_data_send+0x5c>
		err = cloud_send(cloud_backend, &msg);
   21b74:	4b0f      	ldr	r3, [pc, #60]	; (21bb4 <motion_data_send+0x64>)
   21b76:	4669      	mov	r1, sp
   21b78:	6818      	ldr	r0, [r3, #0]
   21b7a:	f01f fe79 	bl	41870 <cloud_send>
   21b7e:	4604      	mov	r4, r0
   21b80:	9800      	ldr	r0, [sp, #0]
   21b82:	f023 fb16 	bl	451b2 <k_free>
		if (err) {
   21b86:	b18c      	cbz	r4, 21bac <motion_data_send+0x5c>
			LOG_ERR("Transmisison of motion data failed: %d", err);
   21b88:	2301      	movs	r3, #1
   21b8a:	f04f 0000 	mov.w	r0, #0
   21b8e:	4a0a      	ldr	r2, [pc, #40]	; (21bb8 <motion_data_send+0x68>)
   21b90:	f363 0007 	bfi	r0, r3, #0, #8
   21b94:	4b09      	ldr	r3, [pc, #36]	; (21bbc <motion_data_send+0x6c>)
   21b96:	490a      	ldr	r1, [pc, #40]	; (21bc0 <motion_data_send+0x70>)
   21b98:	1a9b      	subs	r3, r3, r2
   21b9a:	08db      	lsrs	r3, r3, #3
   21b9c:	f363 108f 	bfi	r0, r3, #6, #10
   21ba0:	4622      	mov	r2, r4
   21ba2:	f020 fa4c 	bl	4203e <log_string_sync>
			cloud_error_handler(err);
   21ba6:	4620      	mov	r0, r4
   21ba8:	f01f fe89 	bl	418be <cloud_error_handler>
}
   21bac:	b006      	add	sp, #24
   21bae:	bd10      	pop	{r4, pc}
   21bb0:	20020e30 	.word	0x20020e30
   21bb4:	200245ac 	.word	0x200245ac
   21bb8:	00046878 	.word	0x00046878
   21bbc:	00046888 	.word	0x00046888
   21bc0:	000483c7 	.word	0x000483c7

00021bc4 <device_status_send>:
{
   21bc4:	b570      	push	{r4, r5, r6, lr}
   21bc6:	b092      	sub	sp, #72	; 0x48
	if (!data_send_enabled() || gps_control_is_active()) {
   21bc8:	f7ff f980 	bl	20ecc <data_send_enabled>
   21bcc:	2800      	cmp	r0, #0
   21bce:	d044      	beq.n	21c5a <device_status_send+0x96>
   21bd0:	f001 fda8 	bl	23724 <gps_control_is_active>
   21bd4:	4606      	mov	r6, r0
   21bd6:	2800      	cmp	r0, #0
   21bd8:	d13f      	bne.n	21c5a <device_status_send+0x96>
	ret = modem_info_params_get(&modem_param);
   21bda:	4831      	ldr	r0, [pc, #196]	; (21ca0 <device_status_send+0xdc>)
   21bdc:	f00a fcf4 	bl	2c5c8 <modem_info_params_get>
	if (ret < 0) {
   21be0:	1e02      	subs	r2, r0, #0
   21be2:	da3c      	bge.n	21c5e <device_status_send+0x9a>
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   21be4:	2301      	movs	r3, #1
   21be6:	f04f 0000 	mov.w	r0, #0
   21bea:	492e      	ldr	r1, [pc, #184]	; (21ca4 <device_status_send+0xe0>)
   21bec:	f363 0007 	bfi	r0, r3, #0, #8
   21bf0:	4b2d      	ldr	r3, [pc, #180]	; (21ca8 <device_status_send+0xe4>)
   21bf2:	1a5b      	subs	r3, r3, r1
   21bf4:	08db      	lsrs	r3, r3, #3
   21bf6:	f363 108f 	bfi	r0, r3, #6, #10
   21bfa:	492c      	ldr	r1, [pc, #176]	; (21cac <device_status_send+0xe8>)
   21bfc:	f020 fa1f 	bl	4203e <log_string_sync>
	const char *const ui[] = {
   21c00:	4d2b      	ldr	r5, [pc, #172]	; (21cb0 <device_status_send+0xec>)
   21c02:	ac06      	add	r4, sp, #24
   21c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21c08:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   21c0c:	4b29      	ldr	r3, [pc, #164]	; (21cb4 <device_status_send+0xf0>)
	const char *const ui[] = {
   21c0e:	e884 0003 	stmia.w	r4, {r0, r1}
	struct cloud_msg msg = {
   21c12:	ac0c      	add	r4, sp, #48	; 0x30
   21c14:	2218      	movs	r2, #24
   21c16:	2100      	movs	r1, #0
   21c18:	4620      	mov	r0, r4
	const char *const fota[] = {
   21c1a:	9305      	str	r3, [sp, #20]
	struct cloud_msg msg = {
   21c1c:	f023 fb24 	bl	45268 <memset>
   21c20:	2301      	movs	r3, #1
	ret = cloud_encode_device_status_data(modem_ptr,
   21c22:	2202      	movs	r2, #2
	struct cloud_msg msg = {
   21c24:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	ret = cloud_encode_device_status_data(modem_ptr,
   21c28:	e9cd 3200 	strd	r3, r2, [sp]
   21c2c:	9402      	str	r4, [sp, #8]
   21c2e:	2206      	movs	r2, #6
   21c30:	ab05      	add	r3, sp, #20
   21c32:	a906      	add	r1, sp, #24
   21c34:	4630      	mov	r0, r6
   21c36:	f001 f99b 	bl	22f70 <cloud_encode_device_status_data>
	if (ret) {
   21c3a:	4602      	mov	r2, r0
   21c3c:	b188      	cbz	r0, 21c62 <device_status_send+0x9e>
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21c3e:	2301      	movs	r3, #1
   21c40:	f04f 0000 	mov.w	r0, #0
   21c44:	4917      	ldr	r1, [pc, #92]	; (21ca4 <device_status_send+0xe0>)
   21c46:	f363 0007 	bfi	r0, r3, #0, #8
   21c4a:	4b17      	ldr	r3, [pc, #92]	; (21ca8 <device_status_send+0xe4>)
   21c4c:	1a5b      	subs	r3, r3, r1
   21c4e:	08db      	lsrs	r3, r3, #3
   21c50:	f363 108f 	bfi	r0, r3, #6, #10
   21c54:	4918      	ldr	r1, [pc, #96]	; (21cb8 <device_status_send+0xf4>)
   21c56:	f020 f9f2 	bl	4203e <log_string_sync>
}
   21c5a:	b012      	add	sp, #72	; 0x48
   21c5c:	bd70      	pop	{r4, r5, r6, pc}
		modem_ptr = &modem_param;
   21c5e:	4e10      	ldr	r6, [pc, #64]	; (21ca0 <device_status_send+0xdc>)
   21c60:	e7ce      	b.n	21c00 <device_status_send+0x3c>
		ret = cloud_send(cloud_backend, &msg);
   21c62:	4b16      	ldr	r3, [pc, #88]	; (21cbc <device_status_send+0xf8>)
   21c64:	4621      	mov	r1, r4
   21c66:	6818      	ldr	r0, [r3, #0]
   21c68:	f01f fe02 	bl	41870 <cloud_send>
   21c6c:	4604      	mov	r4, r0
   21c6e:	980c      	ldr	r0, [sp, #48]	; 0x30
   21c70:	f023 fa9f 	bl	451b2 <k_free>
		if (ret) {
   21c74:	2c00      	cmp	r4, #0
   21c76:	d0f0      	beq.n	21c5a <device_status_send+0x96>
			LOG_ERR("sensor_data_send failed: %d", ret);
   21c78:	2301      	movs	r3, #1
   21c7a:	f04f 0000 	mov.w	r0, #0
   21c7e:	4a09      	ldr	r2, [pc, #36]	; (21ca4 <device_status_send+0xe0>)
   21c80:	f363 0007 	bfi	r0, r3, #0, #8
   21c84:	4b08      	ldr	r3, [pc, #32]	; (21ca8 <device_status_send+0xe4>)
   21c86:	490e      	ldr	r1, [pc, #56]	; (21cc0 <device_status_send+0xfc>)
   21c88:	1a9b      	subs	r3, r3, r2
   21c8a:	08db      	lsrs	r3, r3, #3
   21c8c:	f363 108f 	bfi	r0, r3, #6, #10
   21c90:	4622      	mov	r2, r4
   21c92:	f020 f9d4 	bl	4203e <log_string_sync>
			cloud_error_handler(ret);
   21c96:	4620      	mov	r0, r4
   21c98:	f01f fe11 	bl	418be <cloud_error_handler>
   21c9c:	e7dd      	b.n	21c5a <device_status_send+0x96>
   21c9e:	bf00      	nop
   21ca0:	20020e90 	.word	0x20020e90
   21ca4:	00046878 	.word	0x00046878
   21ca8:	00046888 	.word	0x00046888
   21cac:	00047f4d 	.word	0x00047f4d
   21cb0:	000469d0 	.word	0x000469d0
   21cb4:	00047ef4 	.word	0x00047ef4
   21cb8:	000485ad 	.word	0x000485ad
   21cbc:	200245ac 	.word	0x200245ac
   21cc0:	00047f73 	.word	0x00047f73

00021cc4 <device_config_send>:
{
   21cc4:	b530      	push	{r4, r5, lr}
   21cc6:	b087      	sub	sp, #28
	struct cloud_msg msg = {
   21cc8:	2218      	movs	r2, #24
   21cca:	2100      	movs	r1, #0
   21ccc:	4668      	mov	r0, sp
   21cce:	f023 facb 	bl	45268 <memset>
   21cd2:	2301      	movs	r3, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21cd4:	2000      	movs	r0, #0
	struct cloud_msg msg = {
   21cd6:	f8ad 300c 	strh.w	r3, [sp, #12]
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21cda:	f001 fbb7 	bl	2344c <cloud_get_channel_enable_state>
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21cde:	1c43      	adds	r3, r0, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21ce0:	4604      	mov	r4, r0
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21ce2:	d00a      	beq.n	21cfa <device_config_send+0x36>
	if (gps_control_is_active() && gps_cfg_state == CLOUD_CMD_STATE_FALSE) {
   21ce4:	f001 fd1e 	bl	23724 <gps_control_is_active>
   21ce8:	b148      	cbz	r0, 21cfe <device_config_send+0x3a>
   21cea:	b944      	cbnz	r4, 21cfe <device_config_send+0x3a>
		k_delayed_work_submit_to_queue(&application_work_q,
   21cec:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21cf0:	2300      	movs	r3, #0
   21cf2:	4922      	ldr	r1, [pc, #136]	; (21d7c <device_config_send+0xb8>)
   21cf4:	4822      	ldr	r0, [pc, #136]	; (21d80 <device_config_send+0xbc>)
   21cf6:	f01c fcf1 	bl	3e6dc <k_delayed_work_submit_to_queue>
}
   21cfa:	b007      	add	sp, #28
   21cfc:	bd30      	pop	{r4, r5, pc}
	ret = cloud_encode_config_data(&msg);
   21cfe:	4668      	mov	r0, sp
   21d00:	f001 fbbc 	bl	2347c <cloud_encode_config_data>
	if (ret) {
   21d04:	4602      	mov	r2, r0
   21d06:	b198      	cbz	r0, 21d30 <device_config_send+0x6c>
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21d08:	2301      	movs	r3, #1
   21d0a:	f04f 0000 	mov.w	r0, #0
   21d0e:	491d      	ldr	r1, [pc, #116]	; (21d84 <device_config_send+0xc0>)
   21d10:	f363 0007 	bfi	r0, r3, #0, #8
   21d14:	4b1c      	ldr	r3, [pc, #112]	; (21d88 <device_config_send+0xc4>)
   21d16:	1a5b      	subs	r3, r3, r1
   21d18:	08db      	lsrs	r3, r3, #3
   21d1a:	f363 108f 	bfi	r0, r3, #6, #10
   21d1e:	491b      	ldr	r1, [pc, #108]	; (21d8c <device_config_send+0xc8>)
   21d20:	f020 f98d 	bl	4203e <log_string_sync>
	if (gps_cfg_state == CLOUD_CMD_STATE_TRUE) {
   21d24:	2c01      	cmp	r4, #1
   21d26:	d1e8      	bne.n	21cfa <device_config_send+0x36>
		gps_control_start(0);
   21d28:	2000      	movs	r0, #0
   21d2a:	f001 fe13 	bl	23954 <gps_control_start>
   21d2e:	e7e4      	b.n	21cfa <device_config_send+0x36>
	} else if (msg.len && msg.buf) {
   21d30:	9b01      	ldr	r3, [sp, #4]
   21d32:	2b00      	cmp	r3, #0
   21d34:	d0f6      	beq.n	21d24 <device_config_send+0x60>
   21d36:	9b00      	ldr	r3, [sp, #0]
   21d38:	2b00      	cmp	r3, #0
   21d3a:	d0f3      	beq.n	21d24 <device_config_send+0x60>
		ret = cloud_send(cloud_backend, &msg);
   21d3c:	4b14      	ldr	r3, [pc, #80]	; (21d90 <device_config_send+0xcc>)
   21d3e:	4669      	mov	r1, sp
   21d40:	6818      	ldr	r0, [r3, #0]
   21d42:	f01f fd95 	bl	41870 <cloud_send>
   21d46:	4605      	mov	r5, r0
   21d48:	9800      	ldr	r0, [sp, #0]
   21d4a:	f023 fa32 	bl	451b2 <k_free>
		if (ret) {
   21d4e:	2d00      	cmp	r5, #0
   21d50:	d0e8      	beq.n	21d24 <device_config_send+0x60>
			LOG_ERR("%s failed: %d", __func__, ret);
   21d52:	2301      	movs	r3, #1
   21d54:	f04f 0000 	mov.w	r0, #0
   21d58:	4a0a      	ldr	r2, [pc, #40]	; (21d84 <device_config_send+0xc0>)
   21d5a:	f363 0007 	bfi	r0, r3, #0, #8
   21d5e:	4b0a      	ldr	r3, [pc, #40]	; (21d88 <device_config_send+0xc4>)
   21d60:	490c      	ldr	r1, [pc, #48]	; (21d94 <device_config_send+0xd0>)
   21d62:	1a9b      	subs	r3, r3, r2
   21d64:	08db      	lsrs	r3, r3, #3
   21d66:	f363 108f 	bfi	r0, r3, #6, #10
   21d6a:	4a0b      	ldr	r2, [pc, #44]	; (21d98 <device_config_send+0xd4>)
   21d6c:	462b      	mov	r3, r5
   21d6e:	f020 f966 	bl	4203e <log_string_sync>
			cloud_error_handler(ret);
   21d72:	4628      	mov	r0, r5
   21d74:	f01f fda3 	bl	418be <cloud_error_handler>
   21d78:	e7d4      	b.n	21d24 <device_config_send+0x60>
   21d7a:	bf00      	nop
   21d7c:	20020df8 	.word	0x20020df8
   21d80:	20020c80 	.word	0x20020c80
   21d84:	00046878 	.word	0x00046878
   21d88:	00046888 	.word	0x00046888
   21d8c:	000485ad 	.word	0x000485ad
   21d90:	200245ac 	.word	0x200245ac
   21d94:	00047f3f 	.word	0x00047f3f
   21d98:	000479a0 	.word	0x000479a0

00021d9c <cloud_connect_error_handler>:
{
   21d9c:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   21d9e:	4605      	mov	r5, r0
   21da0:	2800      	cmp	r0, #0
   21da2:	f000 809c 	beq.w	21ede <cloud_connect_error_handler+0x142>
	LOG_ERR("Failed to connect to cloud, error %d", err);
   21da6:	2301      	movs	r3, #1
   21da8:	f04f 0000 	mov.w	r0, #0
   21dac:	4c4c      	ldr	r4, [pc, #304]	; (21ee0 <cloud_connect_error_handler+0x144>)
   21dae:	f363 0007 	bfi	r0, r3, #0, #8
   21db2:	4b4c      	ldr	r3, [pc, #304]	; (21ee4 <cloud_connect_error_handler+0x148>)
   21db4:	462a      	mov	r2, r5
   21db6:	1ae4      	subs	r4, r4, r3
   21db8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21dbc:	f364 108f 	bfi	r0, r4, #6, #10
   21dc0:	4949      	ldr	r1, [pc, #292]	; (21ee8 <cloud_connect_error_handler+0x14c>)
	switch (err) {
   21dc2:	350b      	adds	r5, #11
	LOG_ERR("Failed to connect to cloud, error %d", err);
   21dc4:	f020 f93b 	bl	4203e <log_string_sync>
	switch (err) {
   21dc8:	2d0a      	cmp	r5, #10
   21dca:	d87f      	bhi.n	21ecc <cloud_connect_error_handler+0x130>
   21dcc:	e8df f005 	tbb	[pc, r5]
   21dd0:	5a636c75 	.word	0x5a636c75
   21dd4:	273b7e51 	.word	0x273b7e51
   21dd8:	7e1c      	.short	0x7e1c
   21dda:	06          	.byte	0x06
   21ddb:	00          	.byte	0x00
		LOG_ERR("Cloud back-end has not been initialized");
   21ddc:	f04f 0000 	mov.w	r0, #0
   21de0:	2301      	movs	r3, #1
   21de2:	f363 0007 	bfi	r0, r3, #0, #8
   21de6:	f364 108f 	bfi	r0, r4, #6, #10
   21dea:	4940      	ldr	r1, [pc, #256]	; (21eec <cloud_connect_error_handler+0x150>)
   21dec:	f020 f927 	bl	4203e <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   21df0:	f44f 6010 	mov.w	r0, #2304	; 0x900
   21df4:	f000 fdee 	bl	229d4 <ui_led_set_pattern>
	shutdown_modem();
   21df8:	f7fe ffe2 	bl	20dc0 <shutdown_modem>
	return z_impl_k_current_get();
   21dfc:	f01c f9fc 	bl	3e1f8 <z_impl_k_current_get>
}
   21e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   21e04:	f01b bd56 	b.w	3d8b4 <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   21e08:	f04f 0000 	mov.w	r0, #0
   21e0c:	2301      	movs	r3, #1
   21e0e:	4938      	ldr	r1, [pc, #224]	; (21ef0 <cloud_connect_error_handler+0x154>)
   21e10:	f363 0007 	bfi	r0, r3, #0, #8
   21e14:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Unhandled connect error");
   21e18:	f020 f911 	bl	4203e <log_string_sync>
	if (reboot) {
   21e1c:	e013      	b.n	21e46 <cloud_connect_error_handler+0xaa>
		if (cloud_backend && cloud_backend->config &&
   21e1e:	4b35      	ldr	r3, [pc, #212]	; (21ef4 <cloud_connect_error_handler+0x158>)
   21e20:	681b      	ldr	r3, [r3, #0]
   21e22:	b323      	cbz	r3, 21e6e <cloud_connect_error_handler+0xd2>
   21e24:	685b      	ldr	r3, [r3, #4]
   21e26:	b313      	cbz	r3, 21e6e <cloud_connect_error_handler+0xd2>
		    cloud_backend->config->name) {
   21e28:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   21e2a:	4b33      	ldr	r3, [pc, #204]	; (21ef8 <cloud_connect_error_handler+0x15c>)
   21e2c:	2a00      	cmp	r2, #0
   21e2e:	bf08      	it	eq
   21e30:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   21e32:	f04f 0000 	mov.w	r0, #0
   21e36:	2301      	movs	r3, #1
   21e38:	f363 0007 	bfi	r0, r3, #0, #8
   21e3c:	f364 108f 	bfi	r0, r4, #6, #10
   21e40:	492e      	ldr	r1, [pc, #184]	; (21efc <cloud_connect_error_handler+0x160>)
   21e42:	f020 f8fc 	bl	4203e <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   21e46:	2301      	movs	r3, #1
   21e48:	f04f 0000 	mov.w	r0, #0
   21e4c:	f363 0007 	bfi	r0, r3, #0, #8
   21e50:	f364 108f 	bfi	r0, r4, #6, #10
   21e54:	f44f 7296 	mov.w	r2, #300	; 0x12c
   21e58:	4929      	ldr	r1, [pc, #164]	; (21f00 <cloud_connect_error_handler+0x164>)
   21e5a:	f020 f8f0 	bl	4203e <log_string_sync>
		k_delayed_work_submit_to_queue(
   21e5e:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   21e62:	2300      	movs	r3, #0
   21e64:	4927      	ldr	r1, [pc, #156]	; (21f04 <cloud_connect_error_handler+0x168>)
   21e66:	4828      	ldr	r0, [pc, #160]	; (21f08 <cloud_connect_error_handler+0x16c>)
   21e68:	f01c fc38 	bl	3e6dc <k_delayed_work_submit_to_queue>
   21e6c:	e7c0      	b.n	21df0 <cloud_connect_error_handler+0x54>
	char *backend_name = "invalid";
   21e6e:	4a22      	ldr	r2, [pc, #136]	; (21ef8 <cloud_connect_error_handler+0x15c>)
   21e70:	e7df      	b.n	21e32 <cloud_connect_error_handler+0x96>
		LOG_ERR("Ensure device has a valid private key");
   21e72:	f04f 0000 	mov.w	r0, #0
   21e76:	2301      	movs	r3, #1
   21e78:	f363 0007 	bfi	r0, r3, #0, #8
   21e7c:	f364 108f 	bfi	r0, r4, #6, #10
   21e80:	4922      	ldr	r1, [pc, #136]	; (21f0c <cloud_connect_error_handler+0x170>)
   21e82:	e7c9      	b.n	21e18 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   21e84:	f04f 0000 	mov.w	r0, #0
   21e88:	2301      	movs	r3, #1
   21e8a:	f363 0007 	bfi	r0, r3, #0, #8
   21e8e:	f364 108f 	bfi	r0, r4, #6, #10
   21e92:	491f      	ldr	r1, [pc, #124]	; (21f10 <cloud_connect_error_handler+0x174>)
   21e94:	e7c0      	b.n	21e18 <cloud_connect_error_handler+0x7c>
		LOG_ERR("A certificate/authorization error has occurred");
   21e96:	f04f 0000 	mov.w	r0, #0
   21e9a:	2301      	movs	r3, #1
   21e9c:	f363 0007 	bfi	r0, r3, #0, #8
   21ea0:	f364 108f 	bfi	r0, r4, #6, #10
   21ea4:	491b      	ldr	r1, [pc, #108]	; (21f14 <cloud_connect_error_handler+0x178>)
   21ea6:	e7b7      	b.n	21e18 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   21ea8:	f04f 0000 	mov.w	r0, #0
   21eac:	2301      	movs	r3, #1
   21eae:	f363 0007 	bfi	r0, r3, #0, #8
   21eb2:	f364 108f 	bfi	r0, r4, #6, #10
   21eb6:	4918      	ldr	r1, [pc, #96]	; (21f18 <cloud_connect_error_handler+0x17c>)
   21eb8:	e7ae      	b.n	21e18 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Connection already exists.");
   21eba:	f04f 0000 	mov.w	r0, #0
   21ebe:	2301      	movs	r3, #1
   21ec0:	f363 0007 	bfi	r0, r3, #0, #8
   21ec4:	f364 108f 	bfi	r0, r4, #6, #10
   21ec8:	4914      	ldr	r1, [pc, #80]	; (21f1c <cloud_connect_error_handler+0x180>)
   21eca:	e7a5      	b.n	21e18 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Unhandled connect error");
   21ecc:	f04f 0000 	mov.w	r0, #0
   21ed0:	2301      	movs	r3, #1
   21ed2:	f363 0007 	bfi	r0, r3, #0, #8
   21ed6:	f364 108f 	bfi	r0, r4, #6, #10
   21eda:	4911      	ldr	r1, [pc, #68]	; (21f20 <cloud_connect_error_handler+0x184>)
   21edc:	e79c      	b.n	21e18 <cloud_connect_error_handler+0x7c>
}
   21ede:	bd38      	pop	{r3, r4, r5, pc}
   21ee0:	00046888 	.word	0x00046888
   21ee4:	00046878 	.word	0x00046878
   21ee8:	00047a46 	.word	0x00047a46
   21eec:	00047a6b 	.word	0x00047a6b
   21ef0:	00047a93 	.word	0x00047a93
   21ef4:	200245ac 	.word	0x200245ac
   21ef8:	00047a3e 	.word	0x00047a3e
   21efc:	00047abc 	.word	0x00047abc
   21f00:	00047ec0 	.word	0x00047ec0
   21f04:	20020d98 	.word	0x20020d98
   21f08:	20020c80 	.word	0x20020c80
   21f0c:	00047af1 	.word	0x00047af1
   21f10:	00047b17 	.word	0x00047b17
   21f14:	00047b4b 	.word	0x00047b4b
   21f18:	00047b7a 	.word	0x00047b7a
   21f1c:	00047ba7 	.word	0x00047ba7
   21f20:	00047bc2 	.word	0x00047bc2

00021f24 <cloud_connect_work_fn>:
{
   21f24:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Connecting to cloud, attempt %d of %d",
   21f26:	2303      	movs	r3, #3
   21f28:	f04f 0500 	mov.w	r5, #0
   21f2c:	4c27      	ldr	r4, [pc, #156]	; (21fcc <cloud_connect_work_fn+0xa8>)
   21f2e:	f363 0507 	bfi	r5, r3, #0, #8
   21f32:	4b27      	ldr	r3, [pc, #156]	; (21fd0 <cloud_connect_work_fn+0xac>)
   21f34:	4827      	ldr	r0, [pc, #156]	; (21fd4 <cloud_connect_work_fn+0xb0>)
   21f36:	1ae4      	subs	r4, r4, r3
   21f38:	f01f fcab 	bl	41892 <atomic_get>
   21f3c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21f40:	f364 158f 	bfi	r5, r4, #6, #10
   21f44:	4602      	mov	r2, r0
   21f46:	2308      	movs	r3, #8
   21f48:	4923      	ldr	r1, [pc, #140]	; (21fd8 <cloud_connect_work_fn+0xb4>)
   21f4a:	4628      	mov	r0, r5
   21f4c:	f020 f877 	bl	4203e <log_string_sync>
	k_delayed_work_submit_to_queue(&application_work_q,
   21f50:	2300      	movs	r3, #0
   21f52:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21f56:	4921      	ldr	r1, [pc, #132]	; (21fdc <cloud_connect_work_fn+0xb8>)
   21f58:	4821      	ldr	r0, [pc, #132]	; (21fe0 <cloud_connect_work_fn+0xbc>)
   21f5a:	f01c fbbf 	bl	3e6dc <k_delayed_work_submit_to_queue>
	ui_led_set_pattern(UI_CLOUD_CONNECTING);
   21f5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21f62:	f000 fd37 	bl	229d4 <ui_led_set_pattern>
	ret = cloud_connect(cloud_backend);
   21f66:	4b1f      	ldr	r3, [pc, #124]	; (21fe4 <cloud_connect_work_fn+0xc0>)
   21f68:	6818      	ldr	r0, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   21f6a:	b170      	cbz	r0, 21f8a <cloud_connect_work_fn+0x66>
   21f6c:	6803      	ldr	r3, [r0, #0]
   21f6e:	b163      	cbz	r3, 21f8a <cloud_connect_work_fn+0x66>
	    backend->api->connect == NULL) {
   21f70:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   21f72:	b153      	cbz	r3, 21f8a <cloud_connect_work_fn+0x66>
	return backend->api->connect(backend);
   21f74:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   21f76:	4605      	mov	r5, r0
   21f78:	b150      	cbz	r0, 21f90 <cloud_connect_work_fn+0x6c>
		k_delayed_work_cancel(&cloud_reboot_work);
   21f7a:	4818      	ldr	r0, [pc, #96]	; (21fdc <cloud_connect_work_fn+0xb8>)
   21f7c:	f01c fc36 	bl	3e7ec <k_delayed_work_cancel>
		cloud_connect_error_handler(ret);
   21f80:	b268      	sxtb	r0, r5
}
   21f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_connect_error_handler(ret);
   21f86:	f7ff bf09 	b.w	21d9c <cloud_connect_error_handler>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   21f8a:	f06f 0501 	mvn.w	r5, #1
   21f8e:	e7f4      	b.n	21f7a <cloud_connect_work_fn+0x56>
		LOG_INF("Cloud connection request sent.");
   21f90:	2303      	movs	r3, #3
   21f92:	f04f 0000 	mov.w	r0, #0
   21f96:	f363 0007 	bfi	r0, r3, #0, #8
   21f9a:	f364 108f 	bfi	r0, r4, #6, #10
   21f9e:	4912      	ldr	r1, [pc, #72]	; (21fe8 <cloud_connect_work_fn+0xc4>)
   21fa0:	f020 f84d 	bl	4203e <log_string_sync>
		LOG_INF("Connection response timeout is set to %d seconds.",
   21fa4:	2303      	movs	r3, #3
   21fa6:	f04f 0000 	mov.w	r0, #0
   21faa:	f363 0007 	bfi	r0, r3, #0, #8
   21fae:	f364 108f 	bfi	r0, r4, #6, #10
   21fb2:	221e      	movs	r2, #30
   21fb4:	490d      	ldr	r1, [pc, #52]	; (21fec <cloud_connect_work_fn+0xc8>)
   21fb6:	f020 f842 	bl	4203e <log_string_sync>
}
   21fba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   21fbe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21fc2:	2300      	movs	r3, #0
   21fc4:	4905      	ldr	r1, [pc, #20]	; (21fdc <cloud_connect_work_fn+0xb8>)
   21fc6:	4806      	ldr	r0, [pc, #24]	; (21fe0 <cloud_connect_work_fn+0xbc>)
   21fc8:	f01c bb88 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   21fcc:	00046888 	.word	0x00046888
   21fd0:	00046878 	.word	0x00046878
   21fd4:	200245b0 	.word	0x200245b0
   21fd8:	00047bda 	.word	0x00047bda
   21fdc:	20020d98 	.word	0x20020d98
   21fe0:	20020c80 	.word	0x20020c80
   21fe4:	200245ac 	.word	0x200245ac
   21fe8:	0004bc83 	.word	0x0004bc83
   21fec:	00047c00 	.word	0x00047c00

00021ff0 <connect_to_cloud>:
{
   21ff0:	b570      	push	{r4, r5, r6, lr}
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21ff2:	2100      	movs	r1, #0
{
   21ff4:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21ff6:	482c      	ldr	r0, [pc, #176]	; (220a8 <connect_to_cloud+0xb8>)
   21ff8:	f01f fc43 	bl	41882 <atomic_set>
	if (atomic_get(&carrier_requested_disconnect)) {
   21ffc:	482b      	ldr	r0, [pc, #172]	; (220ac <connect_to_cloud+0xbc>)
   21ffe:	f01f fc48 	bl	41892 <atomic_get>
   22002:	2800      	cmp	r0, #0
   22004:	d14e      	bne.n	220a4 <connect_to_cloud+0xb4>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22006:	482a      	ldr	r0, [pc, #168]	; (220b0 <connect_to_cloud+0xc0>)
   22008:	e8d0 3fef 	ldaex	r3, [r0]
   2200c:	3301      	adds	r3, #1
   2200e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   22012:	2a00      	cmp	r2, #0
   22014:	d1f8      	bne.n	22008 <connect_to_cloud+0x18>
	if (atomic_get(&cloud_connect_attempts) >
   22016:	f01f fc3c 	bl	41892 <atomic_get>
   2201a:	2808      	cmp	r0, #8
   2201c:	dd11      	ble.n	22042 <connect_to_cloud+0x52>
		LOG_ERR("The max cloud connection attempt count exceeded.");
   2201e:	2301      	movs	r3, #1
   22020:	f04f 0000 	mov.w	r0, #0
   22024:	4a23      	ldr	r2, [pc, #140]	; (220b4 <connect_to_cloud+0xc4>)
   22026:	f363 0007 	bfi	r0, r3, #0, #8
   2202a:	4b23      	ldr	r3, [pc, #140]	; (220b8 <connect_to_cloud+0xc8>)
   2202c:	4923      	ldr	r1, [pc, #140]	; (220bc <connect_to_cloud+0xcc>)
   2202e:	1a9b      	subs	r3, r3, r2
   22030:	08db      	lsrs	r3, r3, #3
   22032:	f363 108f 	bfi	r0, r3, #6, #10
   22036:	f020 f802 	bl	4203e <log_string_sync>
		cloud_error_handler(-ETIMEDOUT);
   2203a:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2203e:	f01f fc3e 	bl	418be <cloud_error_handler>
	if (!initial_connect) {
   22042:	4b1f      	ldr	r3, [pc, #124]	; (220c0 <connect_to_cloud+0xd0>)
   22044:	781a      	ldrb	r2, [r3, #0]
   22046:	bb52      	cbnz	r2, 2209e <connect_to_cloud+0xae>
		LOG_INF("Attempting reconnect in %d seconds...",
   22048:	2303      	movs	r3, #3
   2204a:	f04f 0000 	mov.w	r0, #0
   2204e:	4a19      	ldr	r2, [pc, #100]	; (220b4 <connect_to_cloud+0xc4>)
   22050:	f363 0007 	bfi	r0, r3, #0, #8
   22054:	4b18      	ldr	r3, [pc, #96]	; (220b8 <connect_to_cloud+0xc8>)
   22056:	491b      	ldr	r1, [pc, #108]	; (220c4 <connect_to_cloud+0xd4>)
   22058:	1a9b      	subs	r3, r3, r2
   2205a:	08db      	lsrs	r3, r3, #3
   2205c:	f363 108f 	bfi	r0, r3, #6, #10
   22060:	4622      	mov	r2, r4
   22062:	f01f ffec 	bl	4203e <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   22066:	4818      	ldr	r0, [pc, #96]	; (220c8 <connect_to_cloud+0xd8>)
   22068:	f01c fbc0 	bl	3e7ec <k_delayed_work_cancel>
				       K_SECONDS(connect_delay_s));
   2206c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			return (t * to_hz + off) / from_hz;
   22070:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22074:	4361      	muls	r1, r4
   22076:	2500      	movs	r5, #0
   22078:	f240 34e7 	movw	r4, #999	; 0x3e7
   2207c:	fbe0 4501 	umlal	r4, r5, r0, r1
   22080:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22084:	2300      	movs	r3, #0
   22086:	4620      	mov	r0, r4
   22088:	4629      	mov	r1, r5
   2208a:	f7fa ff17 	bl	1cebc <__aeabi_uldivmod>
}
   2208e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q,
   22092:	4602      	mov	r2, r0
   22094:	460b      	mov	r3, r1
   22096:	480d      	ldr	r0, [pc, #52]	; (220cc <connect_to_cloud+0xdc>)
   22098:	490d      	ldr	r1, [pc, #52]	; (220d0 <connect_to_cloud+0xe0>)
   2209a:	f01c bb1f 	b.w	3e6dc <k_delayed_work_submit_to_queue>
		initial_connect = false;
   2209e:	2200      	movs	r2, #0
   220a0:	701a      	strb	r2, [r3, #0]
   220a2:	e7e3      	b.n	2206c <connect_to_cloud+0x7c>
}
   220a4:	bd70      	pop	{r4, r5, r6, pc}
   220a6:	bf00      	nop
   220a8:	200245a8 	.word	0x200245a8
   220ac:	200245a4 	.word	0x200245a4
   220b0:	200245b0 	.word	0x200245b0
   220b4:	00046878 	.word	0x00046878
   220b8:	00046888 	.word	0x00046888
   220bc:	00047e3a 	.word	0x00047e3a
   220c0:	20020958 	.word	0x20020958
   220c4:	00047e6b 	.word	0x00047e6b
   220c8:	20020d98 	.word	0x20020d98
   220cc:	20020c80 	.word	0x20020c80
   220d0:	20020d68 	.word	0x20020d68

000220d4 <sensors_start>:
{
   220d4:	b510      	push	{r4, lr}
	if (!started) {
   220d6:	4c35      	ldr	r4, [pc, #212]	; (221ac <sensors_start+0xd8>)
   220d8:	7823      	ldrb	r3, [r4, #0]
   220da:	2b00      	cmp	r3, #0
   220dc:	d159      	bne.n	22192 <sensors_start+0xbe>
	err = motion_init_and_start(&application_work_q, motion_handler);
   220de:	4934      	ldr	r1, [pc, #208]	; (221b0 <sensors_start+0xdc>)
   220e0:	4834      	ldr	r0, [pc, #208]	; (221b4 <sensors_start+0xe0>)
   220e2:	f000 fbdb 	bl	2289c <motion_init_and_start>
	if (err) {
   220e6:	4602      	mov	r2, r0
   220e8:	b168      	cbz	r0, 22106 <sensors_start+0x32>
		LOG_ERR("motion module init failed, error: %d", err);
   220ea:	2301      	movs	r3, #1
   220ec:	f04f 0000 	mov.w	r0, #0
   220f0:	4931      	ldr	r1, [pc, #196]	; (221b8 <sensors_start+0xe4>)
   220f2:	f363 0007 	bfi	r0, r3, #0, #8
   220f6:	4b31      	ldr	r3, [pc, #196]	; (221bc <sensors_start+0xe8>)
   220f8:	1a5b      	subs	r3, r3, r1
   220fa:	08db      	lsrs	r3, r3, #3
   220fc:	f363 108f 	bfi	r0, r3, #6, #10
   22100:	492f      	ldr	r1, [pc, #188]	; (221c0 <sensors_start+0xec>)
   22102:	f01f ff9c 	bl	4203e <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   22106:	492f      	ldr	r1, [pc, #188]	; (221c4 <sensors_start+0xf0>)
   22108:	482a      	ldr	r0, [pc, #168]	; (221b4 <sensors_start+0xe0>)
   2210a:	f001 fd0b 	bl	23b24 <env_sensors_init_and_start>
	if (err) {
   2210e:	4602      	mov	r2, r0
   22110:	b168      	cbz	r0, 2212e <sensors_start+0x5a>
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   22112:	2301      	movs	r3, #1
   22114:	f04f 0000 	mov.w	r0, #0
   22118:	4927      	ldr	r1, [pc, #156]	; (221b8 <sensors_start+0xe4>)
   2211a:	f363 0007 	bfi	r0, r3, #0, #8
   2211e:	4b27      	ldr	r3, [pc, #156]	; (221bc <sensors_start+0xe8>)
   22120:	1a5b      	subs	r3, r3, r1
   22122:	08db      	lsrs	r3, r3, #3
   22124:	f363 108f 	bfi	r0, r3, #6, #10
   22128:	4927      	ldr	r1, [pc, #156]	; (221c8 <sensors_start+0xf4>)
   2212a:	f01f ff88 	bl	4203e <log_string_sync>
	err = modem_info_init();
   2212e:	f00a f9ad 	bl	2c48c <modem_info_init>
	if (err) {
   22132:	4602      	mov	r2, r0
   22134:	b370      	cbz	r0, 22194 <sensors_start+0xc0>
		LOG_ERR("Modem info could not be established: %d", err);
   22136:	2301      	movs	r3, #1
   22138:	f04f 0000 	mov.w	r0, #0
   2213c:	491e      	ldr	r1, [pc, #120]	; (221b8 <sensors_start+0xe4>)
   2213e:	f363 0007 	bfi	r0, r3, #0, #8
   22142:	4b1e      	ldr	r3, [pc, #120]	; (221bc <sensors_start+0xe8>)
   22144:	1a5b      	subs	r3, r3, r1
   22146:	08db      	lsrs	r3, r3, #3
   22148:	f363 108f 	bfi	r0, r3, #6, #10
   2214c:	491f      	ldr	r1, [pc, #124]	; (221cc <sensors_start+0xf8>)
   2214e:	f01f ff76 	bl	4203e <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   22152:	481f      	ldr	r0, [pc, #124]	; (221d0 <sensors_start+0xfc>)
   22154:	f7ff f846 	bl	211e4 <k_work_submit_to_queue.constprop.14>
	err = gps_control_init(&application_work_q, gps_handler);
   22158:	491e      	ldr	r1, [pc, #120]	; (221d4 <sensors_start+0x100>)
   2215a:	4816      	ldr	r0, [pc, #88]	; (221b4 <sensors_start+0xe0>)
   2215c:	f001 fc3c 	bl	239d8 <gps_control_init>
	if (err) {
   22160:	b168      	cbz	r0, 2217e <sensors_start+0xaa>
		LOG_ERR("GPS could not be initialized");
   22162:	2301      	movs	r3, #1
   22164:	f04f 0000 	mov.w	r0, #0
   22168:	4a13      	ldr	r2, [pc, #76]	; (221b8 <sensors_start+0xe4>)
   2216a:	f363 0007 	bfi	r0, r3, #0, #8
   2216e:	4b13      	ldr	r3, [pc, #76]	; (221bc <sensors_start+0xe8>)
   22170:	4919      	ldr	r1, [pc, #100]	; (221d8 <sensors_start+0x104>)
   22172:	1a9b      	subs	r3, r3, r2
   22174:	08db      	lsrs	r3, r3, #3
   22176:	f363 108f 	bfi	r0, r3, #6, #10
   2217a:	f01f ff60 	bl	4203e <log_string_sync>
		switch (cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS)) {
   2217e:	2000      	movs	r0, #0
   22180:	f001 f964 	bl	2344c <cloud_get_channel_enable_state>
		set_gps_enable(start_gps);
   22184:	1e43      	subs	r3, r0, #1
   22186:	4258      	negs	r0, r3
   22188:	4158      	adcs	r0, r3
   2218a:	f7fe fea9 	bl	20ee0 <set_gps_enable>
		started = true;
   2218e:	2301      	movs	r3, #1
   22190:	7023      	strb	r3, [r4, #0]
}
   22192:	bd10      	pop	{r4, pc}
	modem_info_params_init(&modem_param);
   22194:	4811      	ldr	r0, [pc, #68]	; (221dc <sensors_start+0x108>)
   22196:	f00a f9c5 	bl	2c524 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   2219a:	220c      	movs	r2, #12
   2219c:	4b10      	ldr	r3, [pc, #64]	; (221e0 <sensors_start+0x10c>)
	modem_info_rsrp_register(modem_rsrp_handler);
   2219e:	4811      	ldr	r0, [pc, #68]	; (221e4 <sensors_start+0x110>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   221a0:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   221a2:	2201      	movs	r2, #1
   221a4:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   221a6:	f00a f93f 	bl	2c428 <modem_info_rsrp_register>
   221aa:	e7d2      	b.n	22152 <sensors_start+0x7e>
   221ac:	2002ae7b 	.word	0x2002ae7b
   221b0:	00021345 	.word	0x00021345
   221b4:	20020c80 	.word	0x20020c80
   221b8:	00046878 	.word	0x00046878
   221bc:	00046888 	.word	0x00046888
   221c0:	000485ee 	.word	0x000485ee
   221c4:	00021a05 	.word	0x00021a05
   221c8:	00048613 	.word	0x00048613
   221cc:	00048640 	.word	0x00048640
   221d0:	200245b4 	.word	0x200245b4
   221d4:	00021385 	.word	0x00021385
   221d8:	00048668 	.word	0x00048668
   221dc:	20020e90 	.word	0x20020e90
   221e0:	200217d8 	.word	0x200217d8
   221e4:	000211a1 	.word	0x000211a1

000221e8 <on_pairing_done>:
{
   221e8:	b510      	push	{r4, lr}
	if (atomic_get(&cloud_association) ==
   221ea:	4819      	ldr	r0, [pc, #100]	; (22250 <on_pairing_done+0x68>)
   221ec:	f01f fb51 	bl	41892 <atomic_get>
   221f0:	2801      	cmp	r0, #1
   221f2:	d127      	bne.n	22244 <on_pairing_done+0x5c>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   221f4:	4817      	ldr	r0, [pc, #92]	; (22254 <on_pairing_done+0x6c>)
   221f6:	f01c faf9 	bl	3e7ec <k_delayed_work_cancel>
		LOG_INF("Device associated with cloud.");
   221fa:	2303      	movs	r3, #3
   221fc:	f04f 0000 	mov.w	r0, #0
   22200:	4c15      	ldr	r4, [pc, #84]	; (22258 <on_pairing_done+0x70>)
   22202:	f363 0007 	bfi	r0, r3, #0, #8
   22206:	4b15      	ldr	r3, [pc, #84]	; (2225c <on_pairing_done+0x74>)
   22208:	4915      	ldr	r1, [pc, #84]	; (22260 <on_pairing_done+0x78>)
   2220a:	1ae4      	subs	r4, r4, r3
   2220c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22210:	f364 108f 	bfi	r0, r4, #6, #10
   22214:	f01f ff13 	bl	4203e <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   22218:	2303      	movs	r3, #3
   2221a:	f04f 0000 	mov.w	r0, #0
   2221e:	f363 0007 	bfi	r0, r3, #0, #8
   22222:	f364 108f 	bfi	r0, r4, #6, #10
   22226:	490f      	ldr	r1, [pc, #60]	; (22264 <on_pairing_done+0x7c>)
   22228:	f01f ff09 	bl	4203e <log_string_sync>
		atomic_set(&cloud_association,
   2222c:	2103      	movs	r1, #3
   2222e:	4808      	ldr	r0, [pc, #32]	; (22250 <on_pairing_done+0x68>)
   22230:	f01f fb27 	bl	41882 <atomic_set>
}
   22234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   22238:	2200      	movs	r2, #0
   2223a:	2300      	movs	r3, #0
   2223c:	4905      	ldr	r1, [pc, #20]	; (22254 <on_pairing_done+0x6c>)
   2223e:	480a      	ldr	r0, [pc, #40]	; (22268 <on_pairing_done+0x80>)
   22240:	f01c ba4c 	b.w	3e6dc <k_delayed_work_submit_to_queue>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   22244:	2102      	movs	r1, #2
}
   22246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   2224a:	4801      	ldr	r0, [pc, #4]	; (22250 <on_pairing_done+0x68>)
   2224c:	f01f bb19 	b.w	41882 <atomic_set>
   22250:	200245a8 	.word	0x200245a8
   22254:	20020dc8 	.word	0x20020dc8
   22258:	00046888 	.word	0x00046888
   2225c:	00046878 	.word	0x00046878
   22260:	0004843a 	.word	0x0004843a
   22264:	00048458 	.word	0x00048458
   22268:	20020c80 	.word	0x20020c80

0002226c <cloud_event_handler>:
{
   2226c:	b570      	push	{r4, r5, r6, lr}
   2226e:	4ba3      	ldr	r3, [pc, #652]	; (224fc <cloud_event_handler+0x290>)
   22270:	4ca3      	ldr	r4, [pc, #652]	; (22500 <cloud_event_handler+0x294>)
	switch (evt->type) {
   22272:	780a      	ldrb	r2, [r1, #0]
   22274:	1ae4      	subs	r4, r4, r3
{
   22276:	460d      	mov	r5, r1
   22278:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   2227c:	f04f 0000 	mov.w	r0, #0
	switch (evt->type) {
   22280:	2a0a      	cmp	r2, #10
   22282:	f200 8133 	bhi.w	224ec <cloud_event_handler+0x280>
   22286:	e8df f012 	tbh	[pc, r2, lsl #1]
   2228a:	000b      	.short	0x000b
   2228c:	000b000b 	.word	0x000b000b
   22290:	00b0009a 	.word	0x00b0009a
   22294:	00c100ba 	.word	0x00c100ba
   22298:	011600e4 	.word	0x011600e4
   2229c:	01220131 	.word	0x01220131
		LOG_INF("CLOUD_EVT_CONNECTING");
   222a0:	2303      	movs	r3, #3
   222a2:	f363 0007 	bfi	r0, r3, #0, #8
   222a6:	f364 108f 	bfi	r0, r4, #6, #10
	if (evt->type == CLOUD_EVT_CONNECTING) {
   222aa:	b992      	cbnz	r2, 222d2 <cloud_event_handler+0x66>
		LOG_INF("CLOUD_EVT_CONNECTING");
   222ac:	4995      	ldr	r1, [pc, #596]	; (22504 <cloud_event_handler+0x298>)
   222ae:	f01f fec6 	bl	4203e <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTING);
   222b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   222b6:	f000 fb8d 	bl	229d4 <ui_led_set_pattern>
		k_delayed_work_cancel(&cloud_reboot_work);
   222ba:	4893      	ldr	r0, [pc, #588]	; (22508 <cloud_event_handler+0x29c>)
   222bc:	f01c fa96 	bl	3e7ec <k_delayed_work_cancel>
		if (evt->data.err != CLOUD_CONNECT_RES_SUCCESS) {
   222c0:	6868      	ldr	r0, [r5, #4]
   222c2:	2800      	cmp	r0, #0
   222c4:	f000 8119 	beq.w	224fa <cloud_event_handler+0x28e>
}
   222c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			cloud_connect_error_handler(evt->data.err);
   222cc:	b240      	sxtb	r0, r0
   222ce:	f7ff bd65 	b.w	21d9c <cloud_connect_error_handler>
	} else if (evt->type == CLOUD_EVT_CONNECTED) {
   222d2:	2a01      	cmp	r2, #1
   222d4:	d11b      	bne.n	2230e <cloud_event_handler+0xa2>
		LOG_INF("CLOUD_EVT_CONNECTED");
   222d6:	498d      	ldr	r1, [pc, #564]	; (2250c <cloud_event_handler+0x2a0>)
   222d8:	f01f feb1 	bl	4203e <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   222dc:	488a      	ldr	r0, [pc, #552]	; (22508 <cloud_event_handler+0x29c>)
   222de:	f01c fa85 	bl	3e7ec <k_delayed_work_cancel>
	return z_impl_k_sem_take(sem, timeout);
   222e2:	2200      	movs	r2, #0
   222e4:	2300      	movs	r3, #0
   222e6:	488a      	ldr	r0, [pc, #552]	; (22510 <cloud_event_handler+0x2a4>)
   222e8:	f01b ffd0 	bl	3e28c <z_impl_k_sem_take>
		atomic_set(&cloud_connect_attempts, 0);
   222ec:	2100      	movs	r1, #0
   222ee:	4889      	ldr	r0, [pc, #548]	; (22514 <cloud_event_handler+0x2a8>)
   222f0:	f01f fac7 	bl	41882 <atomic_set>
		LOG_INF("Persistent Sessions = %u",
   222f4:	f04f 0000 	mov.w	r0, #0
   222f8:	2303      	movs	r3, #3
   222fa:	792a      	ldrb	r2, [r5, #4]
   222fc:	f363 0007 	bfi	r0, r3, #0, #8
   22300:	4985      	ldr	r1, [pc, #532]	; (22518 <cloud_event_handler+0x2ac>)
   22302:	f364 108f 	bfi	r0, r4, #6, #10
}
   22306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   2230a:	f01f be98 	b.w	4203e <log_string_sync>
		LOG_INF("CLOUD_EVT_DISCONNECTED: %d", evt->data.err);
   2230e:	684a      	ldr	r2, [r1, #4]
   22310:	4982      	ldr	r1, [pc, #520]	; (2251c <cloud_event_handler+0x2b0>)
   22312:	f01f fe94 	bl	4203e <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   22316:	2004      	movs	r0, #4
   22318:	f000 fb5c 	bl	229d4 <ui_led_set_pattern>
		switch (evt->data.err) {
   2231c:	686b      	ldr	r3, [r5, #4]
   2231e:	2b01      	cmp	r3, #1
   22320:	d044      	beq.n	223ac <cloud_event_handler+0x140>
   22322:	2b02      	cmp	r3, #2
   22324:	d003      	beq.n	2232e <cloud_event_handler+0xc2>
   22326:	b38b      	cbz	r3, 2238c <cloud_event_handler+0x120>
		int32_t connect_wait_s = CONFIG_CLOUD_CONNECT_RETRY_DELAY;
   22328:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
   2232c:	e01b      	b.n	22366 <cloud_event_handler+0xfa>
			LOG_INF("Cloud connection closed.");
   2232e:	2303      	movs	r3, #3
   22330:	f04f 0000 	mov.w	r0, #0
   22334:	f363 0007 	bfi	r0, r3, #0, #8
   22338:	f364 108f 	bfi	r0, r4, #6, #10
   2233c:	4978      	ldr	r1, [pc, #480]	; (22520 <cloud_event_handler+0x2b4>)
   2233e:	f01f fe7e 	bl	4203e <log_string_sync>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   22342:	4874      	ldr	r0, [pc, #464]	; (22514 <cloud_event_handler+0x2a8>)
   22344:	f01f faa5 	bl	41892 <atomic_get>
   22348:	2801      	cmp	r0, #1
   2234a:	d114      	bne.n	22376 <cloud_event_handler+0x10a>
			    (atomic_get(&cloud_association) ==
   2234c:	4875      	ldr	r0, [pc, #468]	; (22524 <cloud_event_handler+0x2b8>)
   2234e:	f01f faa0 	bl	41892 <atomic_get>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   22352:	b980      	cbnz	r0, 22376 <cloud_event_handler+0x10a>
				LOG_INF("This can occur during initial nRF Cloud provisioning.");
   22354:	2303      	movs	r3, #3
   22356:	f363 0007 	bfi	r0, r3, #0, #8
   2235a:	f364 108f 	bfi	r0, r4, #6, #10
   2235e:	4972      	ldr	r1, [pc, #456]	; (22528 <cloud_event_handler+0x2bc>)
   22360:	f01f fe6d 	bl	4203e <log_string_sync>
				connect_wait_s = 10;
   22364:	240a      	movs	r4, #10
	z_impl_k_sem_give(sem);
   22366:	486a      	ldr	r0, [pc, #424]	; (22510 <cloud_event_handler+0x2a4>)
   22368:	f01b ff4c 	bl	3e204 <z_impl_k_sem_give>
		connect_to_cloud(connect_wait_s);
   2236c:	4620      	mov	r0, r4
}
   2236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		connect_to_cloud(connect_wait_s);
   22372:	f7ff be3d 	b.w	21ff0 <connect_to_cloud>
				LOG_INF("This can occur if the device has the wrong nRF Cloud certificates.");
   22376:	f04f 0000 	mov.w	r0, #0
   2237a:	2303      	movs	r3, #3
   2237c:	496b      	ldr	r1, [pc, #428]	; (2252c <cloud_event_handler+0x2c0>)
   2237e:	f363 0007 	bfi	r0, r3, #0, #8
   22382:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_INF("Disconnected by the cloud.");
   22386:	f01f fe5a 	bl	4203e <log_string_sync>
   2238a:	e7cd      	b.n	22328 <cloud_event_handler+0xbc>
			if (atomic_get(&cloud_association) ==
   2238c:	4865      	ldr	r0, [pc, #404]	; (22524 <cloud_event_handler+0x2b8>)
   2238e:	f01f fa80 	bl	41892 <atomic_get>
   22392:	2803      	cmp	r0, #3
   22394:	d0e6      	beq.n	22364 <cloud_event_handler+0xf8>
			    atomic_get(&cloud_association) ==
   22396:	4863      	ldr	r0, [pc, #396]	; (22524 <cloud_event_handler+0x2b8>)
   22398:	f01f fa7b 	bl	41892 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_RECONNECT ||
   2239c:	2801      	cmp	r0, #1
   2239e:	d0e1      	beq.n	22364 <cloud_event_handler+0xf8>
			    (atomic_get(&carrier_requested_disconnect))) {
   223a0:	4863      	ldr	r0, [pc, #396]	; (22530 <cloud_event_handler+0x2c4>)
   223a2:	f01f fa76 	bl	41892 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_REQUESTED ||
   223a6:	2800      	cmp	r0, #0
   223a8:	d1dc      	bne.n	22364 <cloud_event_handler+0xf8>
   223aa:	e7bd      	b.n	22328 <cloud_event_handler+0xbc>
			LOG_INF("Disconnected by the cloud.");
   223ac:	f04f 0000 	mov.w	r0, #0
   223b0:	2303      	movs	r3, #3
   223b2:	f363 0007 	bfi	r0, r3, #0, #8
   223b6:	f364 108f 	bfi	r0, r4, #6, #10
   223ba:	495e      	ldr	r1, [pc, #376]	; (22534 <cloud_event_handler+0x2c8>)
   223bc:	e7e3      	b.n	22386 <cloud_event_handler+0x11a>
		LOG_INF("CLOUD_EVT_READY");
   223be:	2303      	movs	r3, #3
   223c0:	f363 0007 	bfi	r0, r3, #0, #8
   223c4:	495c      	ldr	r1, [pc, #368]	; (22538 <cloud_event_handler+0x2cc>)
   223c6:	f364 108f 	bfi	r0, r4, #6, #10
   223ca:	f01f fe38 	bl	4203e <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   223ce:	2008      	movs	r0, #8
   223d0:	f000 fb00 	bl	229d4 <ui_led_set_pattern>
		boot_write_img_confirmed();
   223d4:	f020 f94c 	bl	42670 <boot_write_img_confirmed>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_READY);
   223d8:	2104      	movs	r1, #4
   223da:	4852      	ldr	r0, [pc, #328]	; (22524 <cloud_event_handler+0x2b8>)
   223dc:	f01f fa51 	bl	41882 <atomic_set>
}
   223e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&application_work_q, &sensors_start_work);
   223e4:	4855      	ldr	r0, [pc, #340]	; (2253c <cloud_event_handler+0x2d0>)
   223e6:	f7fe befd 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
		LOG_INF("CLOUD_EVT_ERROR");
   223ea:	2303      	movs	r3, #3
   223ec:	4954      	ldr	r1, [pc, #336]	; (22540 <cloud_event_handler+0x2d4>)
   223ee:	f363 0007 	bfi	r0, r3, #0, #8
   223f2:	f364 108f 	bfi	r0, r4, #6, #10
}
   223f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   223fa:	f01f be20 	b.w	4203e <log_string_sync>
   223fe:	2303      	movs	r3, #3
   22400:	f363 0007 	bfi	r0, r3, #0, #8
   22404:	f364 108f 	bfi	r0, r4, #6, #10
   22408:	494e      	ldr	r1, [pc, #312]	; (22544 <cloud_event_handler+0x2d8>)
   2240a:	e7f4      	b.n	223f6 <cloud_event_handler+0x18a>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   2240c:	2303      	movs	r3, #3
   2240e:	f363 0007 	bfi	r0, r3, #0, #8
   22412:	f364 108f 	bfi	r0, r4, #6, #10
   22416:	494c      	ldr	r1, [pc, #304]	; (22548 <cloud_event_handler+0x2dc>)
   22418:	f01f fe11 	bl	4203e <log_string_sync>
		err = cloud_decode_command(evt->data.msg.buf);
   2241c:	6868      	ldr	r0, [r5, #4]
   2241e:	f000 fe77 	bl	23110 <cloud_decode_command>
		if (err == 0) {
   22422:	2800      	cmp	r0, #0
   22424:	d069      	beq.n	224fa <cloud_event_handler+0x28e>
		err = gps_process_agps_data(evt->data.msg.buf,
   22426:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2242a:	f004 fb2d 	bl	26a88 <gps_process_agps_data>
		if (err) {
   2242e:	4602      	mov	r2, r0
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   22430:	f04f 0000 	mov.w	r0, #0
		if (err) {
   22434:	b132      	cbz	r2, 22444 <cloud_event_handler+0x1d8>
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   22436:	2102      	movs	r1, #2
   22438:	f361 0007 	bfi	r0, r1, #0, #8
   2243c:	f364 108f 	bfi	r0, r4, #6, #10
   22440:	4942      	ldr	r1, [pc, #264]	; (2254c <cloud_event_handler+0x2e0>)
   22442:	e760      	b.n	22306 <cloud_event_handler+0x9a>
		LOG_INF("A-GPS data processed");
   22444:	2303      	movs	r3, #3
   22446:	f363 0007 	bfi	r0, r3, #0, #8
   2244a:	f364 108f 	bfi	r0, r4, #6, #10
   2244e:	4940      	ldr	r1, [pc, #256]	; (22550 <cloud_event_handler+0x2e4>)
   22450:	e7d1      	b.n	223f6 <cloud_event_handler+0x18a>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   22452:	2303      	movs	r3, #3
   22454:	f363 0007 	bfi	r0, r3, #0, #8
   22458:	f364 108f 	bfi	r0, r4, #6, #10
   2245c:	493d      	ldr	r1, [pc, #244]	; (22554 <cloud_event_handler+0x2e8>)
   2245e:	f01f fdee 	bl	4203e <log_string_sync>
	if (atomic_get(&cloud_association) !=
   22462:	4830      	ldr	r0, [pc, #192]	; (22524 <cloud_event_handler+0x2b8>)
   22464:	f01f fa15 	bl	41892 <atomic_get>
   22468:	2801      	cmp	r0, #1
   2246a:	d046      	beq.n	224fa <cloud_event_handler+0x28e>
		atomic_set(&cloud_association,
   2246c:	2101      	movs	r1, #1
   2246e:	482d      	ldr	r0, [pc, #180]	; (22524 <cloud_event_handler+0x2b8>)
   22470:	f01f fa07 	bl	41882 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   22474:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   22478:	f000 faac 	bl	229d4 <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   2247c:	2303      	movs	r3, #3
   2247e:	f04f 0000 	mov.w	r0, #0
   22482:	f363 0007 	bfi	r0, r3, #0, #8
   22486:	f364 108f 	bfi	r0, r4, #6, #10
   2248a:	4933      	ldr	r1, [pc, #204]	; (22558 <cloud_event_handler+0x2ec>)
   2248c:	f01f fdd7 	bl	4203e <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   22490:	2303      	movs	r3, #3
   22492:	f04f 0000 	mov.w	r0, #0
   22496:	f363 0007 	bfi	r0, r3, #0, #8
   2249a:	f364 108f 	bfi	r0, r4, #6, #10
   2249e:	492f      	ldr	r1, [pc, #188]	; (2255c <cloud_event_handler+0x2f0>)
   224a0:	f01f fdcd 	bl	4203e <log_string_sync>
}
   224a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   224a8:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   224ac:	2300      	movs	r3, #0
   224ae:	492c      	ldr	r1, [pc, #176]	; (22560 <cloud_event_handler+0x2f4>)
   224b0:	482c      	ldr	r0, [pc, #176]	; (22564 <cloud_event_handler+0x2f8>)
   224b2:	f01c b913 	b.w	3e6dc <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   224b6:	2303      	movs	r3, #3
   224b8:	f363 0007 	bfi	r0, r3, #0, #8
   224bc:	f364 108f 	bfi	r0, r4, #6, #10
   224c0:	4929      	ldr	r1, [pc, #164]	; (22568 <cloud_event_handler+0x2fc>)
   224c2:	f01f fdbc 	bl	4203e <log_string_sync>
}
   224c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		on_pairing_done();
   224ca:	f7ff be8d 	b.w	221e8 <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   224ce:	2303      	movs	r3, #3
   224d0:	f363 0007 	bfi	r0, r3, #0, #8
   224d4:	f364 108f 	bfi	r0, r4, #6, #10
   224d8:	4924      	ldr	r1, [pc, #144]	; (2256c <cloud_event_handler+0x300>)
   224da:	f01f fdb0 	bl	4203e <log_string_sync>
		lte_lc_power_off();
   224de:	f009 fa45 	bl	2b96c <lte_lc_power_off>
}
   224e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   224e6:	2001      	movs	r0, #1
   224e8:	f003 be6c 	b.w	261c4 <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   224ec:	2302      	movs	r3, #2
   224ee:	f363 0007 	bfi	r0, r3, #0, #8
   224f2:	f364 108f 	bfi	r0, r4, #6, #10
   224f6:	491e      	ldr	r1, [pc, #120]	; (22570 <cloud_event_handler+0x304>)
   224f8:	e705      	b.n	22306 <cloud_event_handler+0x9a>
}
   224fa:	bd70      	pop	{r4, r5, r6, pc}
   224fc:	00046878 	.word	0x00046878
   22500:	00046888 	.word	0x00046888
   22504:	00047c32 	.word	0x00047c32
   22508:	20020d98 	.word	0x20020d98
   2250c:	00047c47 	.word	0x00047c47
   22510:	20020bb8 	.word	0x20020bb8
   22514:	200245b0 	.word	0x200245b0
   22518:	00047c5b 	.word	0x00047c5b
   2251c:	00047c74 	.word	0x00047c74
   22520:	00047c8f 	.word	0x00047c8f
   22524:	200245a8 	.word	0x200245a8
   22528:	00047ca8 	.word	0x00047ca8
   2252c:	00047cde 	.word	0x00047cde
   22530:	200245a4 	.word	0x200245a4
   22534:	00047d21 	.word	0x00047d21
   22538:	0004bb0f 	.word	0x0004bb0f
   2253c:	200245f4 	.word	0x200245f4
   22540:	00047d3c 	.word	0x00047d3c
   22544:	00047d4c 	.word	0x00047d4c
   22548:	00047d60 	.word	0x00047d60
   2254c:	00047d78 	.word	0x00047d78
   22550:	00047d9f 	.word	0x00047d9f
   22554:	00047db4 	.word	0x00047db4
   22558:	00047dcb 	.word	0x00047dcb
   2255c:	00047de8 	.word	0x00047de8
   22560:	20020dc8 	.word	0x20020dc8
   22564:	20020c80 	.word	0x20020c80
   22568:	00047e09 	.word	0x00047e09
   2256c:	0004bbca 	.word	0x0004bbca
   22570:	00047e1d 	.word	0x00047e1d

00022574 <main>:

void main(void)
{
   22574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;

	LOG_INF("Asset tracker started");
   22578:	f04f 0000 	mov.w	r0, #0
   2257c:	2303      	movs	r3, #3
   2257e:	4c8d      	ldr	r4, [pc, #564]	; (227b4 <main+0x240>)
   22580:	f363 0007 	bfi	r0, r3, #0, #8
   22584:	4b8c      	ldr	r3, [pc, #560]	; (227b8 <main+0x244>)
   22586:	498d      	ldr	r1, [pc, #564]	; (227bc <main+0x248>)
   22588:	1ae4      	subs	r4, r4, r3
   2258a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2258e:	f364 108f 	bfi	r0, r4, #6, #10
   22592:	f01f fd54 	bl	4203e <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   22596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2259a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2259e:	4988      	ldr	r1, [pc, #544]	; (227c0 <main+0x24c>)
   225a0:	4888      	ldr	r0, [pc, #544]	; (227c4 <main+0x250>)
   225a2:	f01c f875 	bl	3e690 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
   225a6:	4887      	ldr	r0, [pc, #540]	; (227c4 <main+0x250>)
   225a8:	f001 fca0 	bl	23eec <watchdog_init_and_start>
	cloud_backend = cloud_get_binding("NRF_CLOUD");
   225ac:	4886      	ldr	r0, [pc, #536]	; (227c8 <main+0x254>)
   225ae:	f00a fc93 	bl	2ced8 <cloud_get_binding>
   225b2:	4b86      	ldr	r3, [pc, #536]	; (227cc <main+0x258>)
   225b4:	6018      	str	r0, [r3, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   225b6:	469a      	mov	sl, r3
   225b8:	b970      	cbnz	r0, 225d8 <main+0x64>
   225ba:	4985      	ldr	r1, [pc, #532]	; (227d0 <main+0x25c>)
   225bc:	f240 633f 	movw	r3, #1599	; 0x63f
   225c0:	4a84      	ldr	r2, [pc, #528]	; (227d4 <main+0x260>)
   225c2:	4885      	ldr	r0, [pc, #532]	; (227d8 <main+0x264>)
   225c4:	f01f fb10 	bl	41be8 <printk>
   225c8:	4884      	ldr	r0, [pc, #528]	; (227dc <main+0x268>)
   225ca:	f01f fb0d 	bl	41be8 <printk>
   225ce:	f240 613f 	movw	r1, #1599	; 0x63f
   225d2:	4880      	ldr	r0, [pc, #512]	; (227d4 <main+0x260>)
   225d4:	f01f fd22 	bl	4201c <assert_post_action>
	ret = cloud_init(cloud_backend, cloud_event_handler);
   225d8:	f8da 0000 	ldr.w	r0, [sl]
	if (backend == NULL || backend->api == NULL ||
   225dc:	2800      	cmp	r0, #0
   225de:	f000 80be 	beq.w	2275e <main+0x1ea>
   225e2:	6803      	ldr	r3, [r0, #0]
   225e4:	2b00      	cmp	r3, #0
   225e6:	f000 80ba 	beq.w	2275e <main+0x1ea>
	    backend->api->init == NULL) {
   225ea:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   225ec:	2b00      	cmp	r3, #0
   225ee:	f000 80b6 	beq.w	2275e <main+0x1ea>
	return backend->api->init(backend, handler);
   225f2:	497b      	ldr	r1, [pc, #492]	; (227e0 <main+0x26c>)
   225f4:	4798      	blx	r3
	if (ret) {
   225f6:	4682      	mov	sl, r0
   225f8:	b168      	cbz	r0, 22616 <main+0xa2>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   225fa:	2301      	movs	r3, #1
   225fc:	f04f 0000 	mov.w	r0, #0
   22600:	f363 0007 	bfi	r0, r3, #0, #8
   22604:	f364 108f 	bfi	r0, r4, #6, #10
   22608:	4652      	mov	r2, sl
   2260a:	4976      	ldr	r1, [pc, #472]	; (227e4 <main+0x270>)
   2260c:	f01f fd17 	bl	4203e <log_string_sync>
		cloud_error_handler(ret);
   22610:	4650      	mov	r0, sl
   22612:	f01f f954 	bl	418be <cloud_error_handler>
	ret = cloud_decode_init(cloud_cmd_handler);
   22616:	4874      	ldr	r0, [pc, #464]	; (227e8 <main+0x274>)
   22618:	f000 fefa 	bl	23410 <cloud_decode_init>
	if (ret) {
   2261c:	4682      	mov	sl, r0
   2261e:	b168      	cbz	r0, 2263c <main+0xc8>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d",
   22620:	2301      	movs	r3, #1
   22622:	f04f 0000 	mov.w	r0, #0
   22626:	f363 0007 	bfi	r0, r3, #0, #8
   2262a:	f364 108f 	bfi	r0, r4, #6, #10
   2262e:	4652      	mov	r2, sl
   22630:	496e      	ldr	r1, [pc, #440]	; (227ec <main+0x278>)
   22632:	f01f fd04 	bl	4203e <log_string_sync>
		cloud_error_handler(ret);
   22636:	4650      	mov	r0, sl
   22638:	f01f f941 	bl	418be <cloud_error_handler>
#endif

	cloud_api_init();

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   2263c:	486c      	ldr	r0, [pc, #432]	; (227f0 <main+0x27c>)
   2263e:	f000 f9cf 	bl	229e0 <ui_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22642:	2300      	movs	r3, #0
   22644:	4a6b      	ldr	r2, [pc, #428]	; (227f4 <main+0x280>)
   22646:	496c      	ldr	r1, [pc, #432]	; (227f8 <main+0x284>)
   22648:	6013      	str	r3, [r2, #0]
   2264a:	e9c2 1301 	strd	r1, r3, [r2, #4]
   2264e:	4a6b      	ldr	r2, [pc, #428]	; (227fc <main+0x288>)
   22650:	496b      	ldr	r1, [pc, #428]	; (22800 <main+0x28c>)
   22652:	6013      	str	r3, [r2, #0]
   22654:	e9c2 1301 	strd	r1, r3, [r2, #4]
   22658:	4a6a      	ldr	r2, [pc, #424]	; (22804 <main+0x290>)
   2265a:	496b      	ldr	r1, [pc, #428]	; (22808 <main+0x294>)
	k_delayed_work_init(&send_agps_request_work, send_agps_request);
   2265c:	486b      	ldr	r0, [pc, #428]	; (2280c <main+0x298>)
   2265e:	e9c2 1301 	strd	r1, r3, [r2, #4]
   22662:	496b      	ldr	r1, [pc, #428]	; (22810 <main+0x29c>)
   22664:	6013      	str	r3, [r2, #0]
   22666:	f022 fcfe 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   2266a:	496a      	ldr	r1, [pc, #424]	; (22814 <main+0x2a0>)
   2266c:	486a      	ldr	r0, [pc, #424]	; (22818 <main+0x2a4>)
   2266e:	f022 fcfa 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   22672:	496a      	ldr	r1, [pc, #424]	; (2281c <main+0x2a8>)
   22674:	486a      	ldr	r0, [pc, #424]	; (22820 <main+0x2ac>)
   22676:	f022 fcf6 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   2267a:	496a      	ldr	r1, [pc, #424]	; (22824 <main+0x2b0>)
   2267c:	486a      	ldr	r0, [pc, #424]	; (22828 <main+0x2b4>)
   2267e:	f022 fcf2 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&device_config_work, device_config_send);
   22682:	496a      	ldr	r1, [pc, #424]	; (2282c <main+0x2b8>)
   22684:	486a      	ldr	r0, [pc, #424]	; (22830 <main+0x2bc>)
   22686:	f022 fcee 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&cloud_connect_work, cloud_connect_work_fn);
   2268a:	496a      	ldr	r1, [pc, #424]	; (22834 <main+0x2c0>)
   2268c:	486a      	ldr	r0, [pc, #424]	; (22838 <main+0x2c4>)
   2268e:	f022 fcea 	bl	45066 <k_delayed_work_init>
   22692:	2300      	movs	r3, #0
   22694:	4a69      	ldr	r2, [pc, #420]	; (2283c <main+0x2c8>)
   22696:	496a      	ldr	r1, [pc, #424]	; (22840 <main+0x2cc>)
   22698:	6013      	str	r3, [r2, #0]
   2269a:	e9c2 1301 	strd	r1, r3, [r2, #4]
   2269e:	4a69      	ldr	r2, [pc, #420]	; (22844 <main+0x2d0>)
   226a0:	4969      	ldr	r1, [pc, #420]	; (22848 <main+0x2d4>)
   226a2:	6013      	str	r3, [r2, #0]
   226a4:	e9c2 1301 	strd	r1, r3, [r2, #4]
   226a8:	4a68      	ldr	r2, [pc, #416]	; (2284c <main+0x2d8>)
   226aa:	4969      	ldr	r1, [pc, #420]	; (22850 <main+0x2dc>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   226ac:	4869      	ldr	r0, [pc, #420]	; (22854 <main+0x2e0>)
   226ae:	e9c2 1301 	strd	r1, r3, [r2, #4]
   226b2:	4969      	ldr	r1, [pc, #420]	; (22858 <main+0x2e4>)
   226b4:	6013      	str	r3, [r2, #0]
   226b6:	f022 fcd6 	bl	45066 <k_delayed_work_init>
#endif
	work_init();
#if defined(CONFIG_LTE_LINK_CONTROL)
	lte_lc_register_handler(lte_handler);
   226ba:	4868      	ldr	r0, [pc, #416]	; (2285c <main+0x2e8>)
   226bc:	f009 f914 	bl	2b8e8 <lte_lc_register_handler>
	LOG_INF("Connecting to LTE network.");
   226c0:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 2287c <main+0x308>
	LOG_INF("This may take several minutes.");
   226c4:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 22880 <main+0x30c>
	ui_led_set_pattern(UI_LTE_CONNECTING);
   226c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   226cc:	f000 f982 	bl	229d4 <ui_led_set_pattern>
	LOG_INF("Connecting to LTE network.");
   226d0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   226d4:	f043 0303 	orr.w	r3, r3, #3
   226d8:	f363 0807 	bfi	r8, r3, #0, #8
   226dc:	f364 188f 	bfi	r8, r4, #6, #10
   226e0:	4651      	mov	r1, sl
   226e2:	4640      	mov	r0, r8
   226e4:	f01f fcab 	bl	4203e <log_string_sync>
	LOG_INF("This may take several minutes.");
   226e8:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   226ec:	f043 0303 	orr.w	r3, r3, #3
   226f0:	f363 0907 	bfi	r9, r3, #0, #8
   226f4:	f364 198f 	bfi	r9, r4, #6, #10
   226f8:	4659      	mov	r1, fp
   226fa:	4648      	mov	r0, r9
   226fc:	f01f fc9f 	bl	4203e <log_string_sync>
	int err = lte_lc_init_and_connect();
   22700:	f022 f998 	bl	44a34 <lte_lc_init_and_connect>
	if (err) {
   22704:	b370      	cbz	r0, 22764 <main+0x1f0>
		LOG_ERR("LTE link could not be established.");
   22706:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2270a:	f043 0301 	orr.w	r3, r3, #1
   2270e:	f363 0707 	bfi	r7, r3, #0, #8
   22712:	f364 178f 	bfi	r7, r4, #6, #10
   22716:	4638      	mov	r0, r7
   22718:	4951      	ldr	r1, [pc, #324]	; (22860 <main+0x2ec>)
   2271a:	f01f fc90 	bl	4203e <log_string_sync>
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
	while (modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   2271e:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   22722:	f043 0302 	orr.w	r3, r3, #2
   22726:	f363 0607 	bfi	r6, r3, #0, #8
   2272a:	f364 168f 	bfi	r6, r4, #6, #10
   2272e:	4630      	mov	r0, r6
   22730:	494c      	ldr	r1, [pc, #304]	; (22864 <main+0x2f0>)
   22732:	f01f fc84 	bl	4203e <log_string_sync>
		LOG_WRN("Will retry in %d seconds.",
   22736:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2273a:	f043 0302 	orr.w	r3, r3, #2
   2273e:	f363 0507 	bfi	r5, r3, #0, #8
   22742:	f364 158f 	bfi	r5, r4, #6, #10
   22746:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   2274a:	4947      	ldr	r1, [pc, #284]	; (22868 <main+0x2f4>)
   2274c:	4628      	mov	r0, r5
   2274e:	f01f fc76 	bl	4203e <log_string_sync>
	return z_impl_k_sleep(timeout);
   22752:	2100      	movs	r1, #0
   22754:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
   22758:	f01b fd18 	bl	3e18c <z_impl_k_sleep>
   2275c:	e7b4      	b.n	226c8 <main+0x154>
		return -ENOTSUP;
   2275e:	f06f 0a85 	mvn.w	sl, #133	; 0x85
   22762:	e74a      	b.n	225fa <main+0x86>
	LOG_INF("Connected to LTE network.");
   22764:	2303      	movs	r3, #3
   22766:	f04f 0000 	mov.w	r0, #0
   2276a:	f363 0007 	bfi	r0, r3, #0, #8
   2276e:	493f      	ldr	r1, [pc, #252]	; (2286c <main+0x2f8>)
   22770:	f364 108f 	bfi	r0, r4, #6, #10
   22774:	f01f fc63 	bl	4203e <log_string_sync>
	ui_led_set_pattern(UI_LTE_CONNECTED);
   22778:	2004      	movs	r0, #4
   2277a:	f000 f92b 	bl	229d4 <ui_led_set_pattern>
#if defined(CONFIG_LWM2M_CARRIER)
	LOG_INF("Waiting for LWM2M carrier to complete initialization...");
	k_sem_take(&cloud_ready_to_connect, K_FOREVER);
#endif

	date_time_update_async(date_time_event_handler);
   2277e:	483c      	ldr	r0, [pc, #240]	; (22870 <main+0x2fc>)
   22780:	f00a fb9c 	bl	2cebc <date_time_update_async>
	return z_impl_k_sem_take(sem, timeout);
   22784:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   22788:	2300      	movs	r3, #0
   2278a:	483a      	ldr	r0, [pc, #232]	; (22874 <main+0x300>)
   2278c:	f01b fd7e 	bl	3e28c <z_impl_k_sem_take>

	ret = k_sem_take(&date_time_obtained, K_SECONDS(DATE_TIME_TIMEOUT_S));
	if (ret) {
   22790:	b150      	cbz	r0, 227a8 <main+0x234>
		LOG_WRN("Date time, no callback event within %d seconds",
   22792:	f04f 0000 	mov.w	r0, #0
   22796:	2302      	movs	r3, #2
   22798:	f363 0007 	bfi	r0, r3, #0, #8
   2279c:	f364 108f 	bfi	r0, r4, #6, #10
   227a0:	220f      	movs	r2, #15
   227a2:	4935      	ldr	r1, [pc, #212]	; (22878 <main+0x304>)
   227a4:	f01f fc4b 	bl	4203e <log_string_sync>
			DATE_TIME_TIMEOUT_S);
	}

	connect_to_cloud(0);
}
   227a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	connect_to_cloud(0);
   227ac:	2000      	movs	r0, #0
   227ae:	f7ff bc1f 	b.w	21ff0 <connect_to_cloud>
   227b2:	bf00      	nop
   227b4:	00046888 	.word	0x00046888
   227b8:	00046878 	.word	0x00046878
   227bc:	000481e8 	.word	0x000481e8
   227c0:	2002cc90 	.word	0x2002cc90
   227c4:	20020c80 	.word	0x20020c80
   227c8:	000481fe 	.word	0x000481fe
   227cc:	200245ac 	.word	0x200245ac
   227d0:	0004823e 	.word	0x0004823e
   227d4:	00048208 	.word	0x00048208
   227d8:	0004825b 	.word	0x0004825b
   227dc:	00048278 	.word	0x00048278
   227e0:	0002226d 	.word	0x0002226d
   227e4:	00048296 	.word	0x00048296
   227e8:	000216d5 	.word	0x000216d5
   227ec:	000482c8 	.word	0x000482c8
   227f0:	00021149 	.word	0x00021149
   227f4:	200245f4 	.word	0x200245f4
   227f8:	000418cf 	.word	0x000418cf
   227fc:	200245dc 	.word	0x200245dc
   22800:	00021099 	.word	0x00021099
   22804:	200245e8 	.word	0x200245e8
   22808:	00021881 	.word	0x00021881
   2280c:	200217a8 	.word	0x200217a8
   22810:	0001d279 	.word	0x0001d279
   22814:	00021105 	.word	0x00021105
   22818:	20020e60 	.word	0x20020e60
   2281c:	000418b5 	.word	0x000418b5
   22820:	20020d98 	.word	0x20020d98
   22824:	00020e2d 	.word	0x00020e2d
   22828:	20020dc8 	.word	0x20020dc8
   2282c:	00021cc5 	.word	0x00021cc5
   22830:	20020df8 	.word	0x20020df8
   22834:	00021f25 	.word	0x00021f25
   22838:	20020d68 	.word	0x20020d68
   2283c:	200245b4 	.word	0x200245b4
   22840:	00021bc5 	.word	0x00021bc5
   22844:	200245c0 	.word	0x200245c0
   22848:	00021b51 	.word	0x00021b51
   2284c:	200245cc 	.word	0x200245cc
   22850:	000210a5 	.word	0x000210a5
   22854:	20021778 	.word	0x20021778
   22858:	00021025 	.word	0x00021025
   2285c:	0002120d 	.word	0x0002120d
   22860:	0004831d 	.word	0x0004831d
   22864:	00048340 	.word	0x00048340
   22868:	00048364 	.word	0x00048364
   2286c:	0004837e 	.word	0x0004837e
   22870:	00021635 	.word	0x00021635
   22874:	20020be8 	.word	0x20020be8
   22878:	00048398 	.word	0x00048398
   2287c:	00048302 	.word	0x00048302
   22880:	00048be2 	.word	0x00048be2

00022884 <sensor_trigger_handler.isra.0>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   22884:	4803      	ldr	r0, [pc, #12]	; (22894 <sensor_trigger_handler.isra.0+0x10>)
   22886:	2200      	movs	r2, #0
   22888:	2300      	movs	r3, #0
   2288a:	4903      	ldr	r1, [pc, #12]	; (22898 <sensor_trigger_handler.isra.0+0x14>)
   2288c:	6800      	ldr	r0, [r0, #0]
   2288e:	f01b bf25 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   22892:	bf00      	nop
   22894:	20024608 	.word	0x20024608
   22898:	200217f0 	.word	0x200217f0

0002289c <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   2289c:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   2289e:	b340      	cbz	r0, 228f2 <motion_init_and_start+0x56>
   228a0:	b339      	cbz	r1, 228f2 <motion_init_and_start+0x56>
		return -EINVAL;
	}

	int err;

	motion_work_q = work_q;
   228a2:	4b15      	ldr	r3, [pc, #84]	; (228f8 <motion_init_and_start+0x5c>)
   228a4:	6018      	str	r0, [r3, #0]
	handler = motion_handler;
   228a6:	4b15      	ldr	r3, [pc, #84]	; (228fc <motion_init_and_start+0x60>)

	k_delayed_work_init(&motion_work, motion_work_q_handler);
   228a8:	4815      	ldr	r0, [pc, #84]	; (22900 <motion_init_and_start+0x64>)
	handler = motion_handler;
   228aa:	6019      	str	r1, [r3, #0]
	k_delayed_work_init(&motion_work, motion_work_q_handler);
   228ac:	4915      	ldr	r1, [pc, #84]	; (22904 <motion_init_and_start+0x68>)
   228ae:	f022 fbda 	bl	45066 <k_delayed_work_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   228b2:	4815      	ldr	r0, [pc, #84]	; (22908 <motion_init_and_start+0x6c>)
   228b4:	f019 fc46 	bl	3c144 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   228b8:	4b14      	ldr	r3, [pc, #80]	; (2290c <motion_init_and_start+0x70>)
   228ba:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   228bc:	b118      	cbz	r0, 228c6 <motion_init_and_start+0x2a>

	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
   228be:	f7ff ffe1 	bl	22884 <sensor_trigger_handler.isra.0>
	return 0;
   228c2:	2000      	movs	r0, #0
}
   228c4:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not get %s device",
   228c6:	2301      	movs	r3, #1
   228c8:	f04f 0400 	mov.w	r4, #0
   228cc:	4a10      	ldr	r2, [pc, #64]	; (22910 <motion_init_and_start+0x74>)
   228ce:	f363 0407 	bfi	r4, r3, #0, #8
   228d2:	4b10      	ldr	r3, [pc, #64]	; (22914 <motion_init_and_start+0x78>)
   228d4:	480c      	ldr	r0, [pc, #48]	; (22908 <motion_init_and_start+0x6c>)
   228d6:	1a9b      	subs	r3, r3, r2
   228d8:	08db      	lsrs	r3, r3, #3
   228da:	f363 148f 	bfi	r4, r3, #6, #10
   228de:	f01f fbc1 	bl	42064 <log_strdup>
   228e2:	490d      	ldr	r1, [pc, #52]	; (22918 <motion_init_and_start+0x7c>)
   228e4:	4602      	mov	r2, r0
   228e6:	4620      	mov	r0, r4
   228e8:	f01f fba9 	bl	4203e <log_string_sync>
		return -ENODEV;
   228ec:	f06f 0012 	mvn.w	r0, #18
   228f0:	e7e8      	b.n	228c4 <motion_init_and_start+0x28>
		return -EINVAL;
   228f2:	f06f 0015 	mvn.w	r0, #21
   228f6:	e7e5      	b.n	228c4 <motion_init_and_start+0x28>
   228f8:	20024608 	.word	0x20024608
   228fc:	20024604 	.word	0x20024604
   22900:	200217f0 	.word	0x200217f0
   22904:	0001d341 	.word	0x0001d341
   22908:	000486fe 	.word	0x000486fe
   2290c:	20024600 	.word	0x20024600
   22910:	00046878 	.word	0x00046878
   22914:	00046928 	.word	0x00046928
   22918:	00048709 	.word	0x00048709

0002291c <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   2291c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2291e:	4605      	mov	r5, r0
   22920:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   22922:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   22924:	4f11      	ldr	r7, [pc, #68]	; (2296c <button_handler+0x50>)
	while (has_changed) {
   22926:	b90c      	cbnz	r4, 2292c <button_handler+0x10>
	}
}
   22928:	b003      	add	sp, #12
   2292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2292c:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   2292e:	1c59      	adds	r1, r3, #1
   22930:	fa24 f303 	lsr.w	r3, r4, r3
   22934:	f013 0001 	ands.w	r0, r3, #1
   22938:	b2ca      	uxtb	r2, r1
   2293a:	d103      	bne.n	22944 <button_handler+0x28>
		for (uint8_t i = 0; i < 32; i++) {
   2293c:	2920      	cmp	r1, #32
   2293e:	460b      	mov	r3, r1
   22940:	d1f5      	bne.n	2292e <button_handler+0x12>
		btn_num = 0;
   22942:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   22944:	1e53      	subs	r3, r2, #1
   22946:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   2294a:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   2294e:	43db      	mvns	r3, r3
   22950:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   22954:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   22956:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   2295a:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   2295c:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   22960:	683b      	ldr	r3, [r7, #0]
   22962:	e912 0003 	ldmdb	r2, {r0, r1}
   22966:	4798      	blx	r3
   22968:	e7dd      	b.n	22926 <button_handler+0xa>
   2296a:	bf00      	nop
   2296c:	2002460c 	.word	0x2002460c

00022970 <leds_update>:
{
   22970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	led_on = !led_on;
   22974:	4d12      	ldr	r5, [pc, #72]	; (229c0 <leds_update+0x50>)
	led_on_mask = UI_LED_GET_ON(current_led_state);
   22976:	4b13      	ldr	r3, [pc, #76]	; (229c4 <leds_update+0x54>)
	led_on = !led_on;
   22978:	782a      	ldrb	r2, [r5, #0]
	led_on_mask = UI_LED_GET_ON(current_led_state);
   2297a:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   2297c:	f082 0201 	eor.w	r2, r2, #1
   22980:	f344 2107 	sbfx	r1, r4, #8, #8
{
   22984:	4607      	mov	r7, r0
	led_on = !led_on;
   22986:	702a      	strb	r2, [r5, #0]
	if (led_on) {
   22988:	b264      	sxtb	r4, r4
   2298a:	b19a      	cbz	r2, 229b4 <leds_update+0x44>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   2298c:	430c      	orrs	r4, r1
	if (led_on_mask != current_led_on_mask) {
   2298e:	4e0e      	ldr	r6, [pc, #56]	; (229c8 <leds_update+0x58>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   22990:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   22992:	7833      	ldrb	r3, [r6, #0]
   22994:	42a3      	cmp	r3, r4
   22996:	d003      	beq.n	229a0 <leds_update+0x30>
		dk_set_leds(led_on_mask);
   22998:	4620      	mov	r0, r4
   2299a:	f021 fefc 	bl	44796 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   2299e:	7034      	strb	r4, [r6, #0]
	if (work) {
   229a0:	b15f      	cbz	r7, 229ba <leds_update+0x4a>
}
   229a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   229a6:	f240 6267 	movw	r2, #1639	; 0x667
   229aa:	2300      	movs	r3, #0
   229ac:	4907      	ldr	r1, [pc, #28]	; (229cc <leds_update+0x5c>)
   229ae:	4808      	ldr	r0, [pc, #32]	; (229d0 <leds_update+0x60>)
   229b0:	f01b be94 	b.w	3e6dc <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   229b4:	ea24 0401 	bic.w	r4, r4, r1
   229b8:	e7e9      	b.n	2298e <leds_update+0x1e>
}
   229ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229be:	bf00      	nop
   229c0:	2002ae7d 	.word	0x2002ae7d
   229c4:	2002a38c 	.word	0x2002a38c
   229c8:	2002ae7c 	.word	0x2002ae7c
   229cc:	20021820 	.word	0x20021820
   229d0:	200244a8 	.word	0x200244a8

000229d4 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   229d4:	4b01      	ldr	r3, [pc, #4]	; (229dc <ui_led_set_pattern+0x8>)
   229d6:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   229d8:	4770      	bx	lr
   229da:	bf00      	nop
   229dc:	2002a38c 	.word	0x2002a38c

000229e0 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   229e0:	b538      	push	{r3, r4, r5, lr}
   229e2:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   229e4:	f007 fcd8 	bl	2a398 <dk_leds_init>
	if (err) {
   229e8:	4604      	mov	r4, r0
   229ea:	b180      	cbz	r0, 22a0e <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   229ec:	2301      	movs	r3, #1
   229ee:	f04f 0000 	mov.w	r0, #0
   229f2:	4a21      	ldr	r2, [pc, #132]	; (22a78 <ui_init+0x98>)
   229f4:	f363 0007 	bfi	r0, r3, #0, #8
   229f8:	4b20      	ldr	r3, [pc, #128]	; (22a7c <ui_init+0x9c>)
   229fa:	4921      	ldr	r1, [pc, #132]	; (22a80 <ui_init+0xa0>)
   229fc:	1a9b      	subs	r3, r3, r2
   229fe:	4622      	mov	r2, r4
   22a00:	08db      	lsrs	r3, r3, #3
   22a02:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   22a06:	f01f fb1a 	bl	4203e <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   22a0a:	4620      	mov	r0, r4
   22a0c:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   22a0e:	210f      	movs	r1, #15
   22a10:	f021 feb7 	bl	44782 <dk_set_leds_state>
	if (err) {
   22a14:	4604      	mov	r4, r0
   22a16:	b168      	cbz	r0, 22a34 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   22a18:	2301      	movs	r3, #1
   22a1a:	f04f 0000 	mov.w	r0, #0
   22a1e:	4a16      	ldr	r2, [pc, #88]	; (22a78 <ui_init+0x98>)
   22a20:	f363 0007 	bfi	r0, r3, #0, #8
   22a24:	4b15      	ldr	r3, [pc, #84]	; (22a7c <ui_init+0x9c>)
   22a26:	4917      	ldr	r1, [pc, #92]	; (22a84 <ui_init+0xa4>)
   22a28:	1a9b      	subs	r3, r3, r2
   22a2a:	08db      	lsrs	r3, r3, #3
   22a2c:	f363 108f 	bfi	r0, r3, #6, #10
   22a30:	4622      	mov	r2, r4
   22a32:	e7e8      	b.n	22a06 <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   22a34:	4914      	ldr	r1, [pc, #80]	; (22a88 <ui_init+0xa8>)
   22a36:	4815      	ldr	r0, [pc, #84]	; (22a8c <ui_init+0xac>)
   22a38:	f022 fb15 	bl	45066 <k_delayed_work_init>
   22a3c:	2200      	movs	r2, #0
   22a3e:	2300      	movs	r3, #0
   22a40:	4912      	ldr	r1, [pc, #72]	; (22a8c <ui_init+0xac>)
   22a42:	4813      	ldr	r0, [pc, #76]	; (22a90 <ui_init+0xb0>)
   22a44:	f01b fe4a 	bl	3e6dc <k_delayed_work_submit_to_queue>
	if (cb) {
   22a48:	2d00      	cmp	r5, #0
   22a4a:	d0de      	beq.n	22a0a <ui_init+0x2a>
		callback  = cb;
   22a4c:	4b11      	ldr	r3, [pc, #68]	; (22a94 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   22a4e:	4812      	ldr	r0, [pc, #72]	; (22a98 <ui_init+0xb8>)
		callback  = cb;
   22a50:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   22a52:	f007 fcf9 	bl	2a448 <dk_buttons_init>
		if (err) {
   22a56:	4604      	mov	r4, r0
   22a58:	2800      	cmp	r0, #0
   22a5a:	d0d6      	beq.n	22a0a <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   22a5c:	2301      	movs	r3, #1
   22a5e:	f04f 0000 	mov.w	r0, #0
   22a62:	4a05      	ldr	r2, [pc, #20]	; (22a78 <ui_init+0x98>)
   22a64:	f363 0007 	bfi	r0, r3, #0, #8
   22a68:	4b04      	ldr	r3, [pc, #16]	; (22a7c <ui_init+0x9c>)
   22a6a:	490c      	ldr	r1, [pc, #48]	; (22a9c <ui_init+0xbc>)
   22a6c:	1a9b      	subs	r3, r3, r2
   22a6e:	08db      	lsrs	r3, r3, #3
   22a70:	f363 108f 	bfi	r0, r3, #6, #10
   22a74:	4622      	mov	r2, r4
   22a76:	e7c6      	b.n	22a06 <ui_init+0x26>
   22a78:	00046878 	.word	0x00046878
   22a7c:	000469a8 	.word	0x000469a8
   22a80:	00048760 	.word	0x00048760
   22a84:	00048789 	.word	0x00048789
   22a88:	00022971 	.word	0x00022971
   22a8c:	20021820 	.word	0x20021820
   22a90:	200244a8 	.word	0x200244a8
   22a94:	2002460c 	.word	0x2002460c
   22a98:	0002291d 	.word	0x0002291d
   22a9c:	000487b1 	.word	0x000487b1

00022aa0 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   22aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22aa2:	4616      	mov	r6, r2
   22aa4:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   22aa6:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22aa8:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   22aaa:	4c0a      	ldr	r4, [pc, #40]	; (22ad4 <cloud_set_chan_cfg_item+0x34>)
   22aac:	fb02 f503 	mul.w	r5, r2, r3
   22ab0:	5d2d      	ldrb	r5, [r5, r4]
   22ab2:	4285      	cmp	r5, r0
   22ab4:	d108      	bne.n	22ac8 <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   22ab6:	2206      	movs	r2, #6
	return 0;
   22ab8:	2000      	movs	r0, #0
	cfg->value[type] = value;
   22aba:	fb02 1303 	mla	r3, r2, r3, r1
   22abe:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   22ac2:	e9c3 6702 	strd	r6, r7, [r3, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   22ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22ac8:	3301      	adds	r3, #1
   22aca:	2b0a      	cmp	r3, #10
   22acc:	d1ee      	bne.n	22aac <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   22ace:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22ad2:	e7f8      	b.n	22ac6 <cloud_set_chan_cfg_item+0x26>
   22ad4:	20020018 	.word	0x20020018

00022ad8 <cloud_cmd_handle_sensor_set_chan_cfg>:

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22ad8:	7803      	ldrb	r3, [r0, #0]
{
   22ada:	b570      	push	{r4, r5, r6, lr}
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22adc:	2b08      	cmp	r3, #8
{
   22ade:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22ae0:	d143      	bne.n	22b6a <cloud_cmd_handle_sensor_set_chan_cfg+0x92>
		return -EINVAL;
	}

	switch (cmd->type) {
   22ae2:	7883      	ldrb	r3, [r0, #2]
   22ae4:	2b02      	cmp	r3, #2
   22ae6:	d00f      	beq.n	22b08 <cloud_cmd_handle_sensor_set_chan_cfg+0x30>
   22ae8:	2b03      	cmp	r3, #3
   22aea:	d028      	beq.n	22b3e <cloud_cmd_handle_sensor_set_chan_cfg+0x66>
   22aec:	2b01      	cmp	r3, #1
   22aee:	d13f      	bne.n	22b70 <cloud_cmd_handle_sensor_set_chan_cfg+0x98>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   22af0:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22af4:	f7f9 fdf6 	bl	1c6e4 <__aeabi_i2d>
   22af8:	460b      	mov	r3, r1
   22afa:	2100      	movs	r1, #0
   22afc:	4602      	mov	r2, r0
   22afe:	7860      	ldrb	r0, [r4, #1]
	default:
		break;
	}

	return err;
}
   22b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   22b04:	f7ff bfcc 	b.w	22aa0 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   22b08:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22b0c:	7865      	ldrb	r5, [r4, #1]
   22b0e:	1c42      	adds	r2, r0, #1
   22b10:	d10e      	bne.n	22b30 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
			err = cloud_set_chan_cfg_item(
   22b12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22b16:	2103      	movs	r1, #3
   22b18:	4628      	mov	r0, r5
   22b1a:	f7ff ffc1 	bl	22aa0 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   22b1e:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   22b20:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   22b22:	2104      	movs	r1, #4
   22b24:	4b14      	ldr	r3, [pc, #80]	; (22b78 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
			cloud_set_chan_cfg_item(
   22b26:	7860      	ldrb	r0, [r4, #1]
   22b28:	f7ff ffba 	bl	22aa0 <cloud_set_chan_cfg_item>
}
   22b2c:	4628      	mov	r0, r5
   22b2e:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   22b30:	f7f9 fdd8 	bl	1c6e4 <__aeabi_i2d>
   22b34:	460b      	mov	r3, r1
   22b36:	4602      	mov	r2, r0
   22b38:	2104      	movs	r1, #4
			err = cloud_set_chan_cfg_item(
   22b3a:	4628      	mov	r0, r5
   22b3c:	e7e0      	b.n	22b00 <cloud_cmd_handle_sensor_set_chan_cfg+0x28>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   22b3e:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22b42:	7865      	ldrb	r5, [r4, #1]
   22b44:	1c43      	adds	r3, r0, #1
   22b46:	d10a      	bne.n	22b5e <cloud_cmd_handle_sensor_set_chan_cfg+0x86>
			err = cloud_set_chan_cfg_item(
   22b48:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22b4c:	2101      	movs	r1, #1
   22b4e:	4628      	mov	r0, r5
   22b50:	f7ff ffa6 	bl	22aa0 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   22b54:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   22b56:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   22b58:	4b07      	ldr	r3, [pc, #28]	; (22b78 <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
   22b5a:	2102      	movs	r1, #2
   22b5c:	e7e3      	b.n	22b26 <cloud_cmd_handle_sensor_set_chan_cfg+0x4e>
			err = cloud_set_chan_cfg_item(
   22b5e:	f7f9 fdc1 	bl	1c6e4 <__aeabi_i2d>
   22b62:	460b      	mov	r3, r1
   22b64:	4602      	mov	r2, r0
   22b66:	2102      	movs	r1, #2
   22b68:	e7e7      	b.n	22b3a <cloud_cmd_handle_sensor_set_chan_cfg+0x62>
		return -EINVAL;
   22b6a:	f06f 0515 	mvn.w	r5, #21
   22b6e:	e7dd      	b.n	22b2c <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
	int err = -ENOTSUP;
   22b70:	f06f 0585 	mvn.w	r5, #133	; 0x85
   22b74:	e7da      	b.n	22b2c <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
   22b76:	bf00      	nop
   22b78:	3ff00000 	.word	0x3ff00000

00022b7c <cloud_cmd_parse_type>:
{
   22b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22b80:	460f      	mov	r7, r1
   22b82:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   22b84:	4606      	mov	r6, r0
   22b86:	2800      	cmp	r0, #0
   22b88:	f000 8084 	beq.w	22c94 <cloud_cmd_parse_type+0x118>
	if (type_obj != NULL) {
   22b8c:	7903      	ldrb	r3, [r0, #4]
   22b8e:	2900      	cmp	r1, #0
   22b90:	d07e      	beq.n	22c90 <cloud_cmd_parse_type+0x114>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   22b92:	2b07      	cmp	r3, #7
   22b94:	d077      	beq.n	22c86 <cloud_cmd_parse_type+0x10a>
			decoded_obj = json_object_decode(type_obj,
   22b96:	4a4a      	ldr	r2, [pc, #296]	; (22cc0 <cloud_cmd_parse_type+0x144>)
   22b98:	4638      	mov	r0, r7
   22b9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   22b9e:	f01e feaf 	bl	41900 <json_object_decode>
			if (!decoded_obj) {
   22ba2:	4605      	mov	r5, r0
   22ba4:	2800      	cmp	r0, #0
   22ba6:	f000 8085 	beq.w	22cb4 <cloud_cmd_parse_type+0x138>
		switch (type_cmd->type) {
   22baa:	7933      	ldrb	r3, [r6, #4]
   22bac:	3b01      	subs	r3, #1
   22bae:	2b06      	cmp	r3, #6
   22bb0:	f200 8083 	bhi.w	22cba <cloud_cmd_parse_type+0x13e>
   22bb4:	e8df f003 	tbb	[pc, r3]
   22bb8:	2f2f2f04 	.word	0x2f2f2f04
   22bbc:	4f3f      	.short	0x4f3f
   22bbe:	67          	.byte	0x67
   22bbf:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   22bc0:	f021 fa59 	bl	44076 <cJSON_IsNull>
   22bc4:	b1b8      	cbz	r0, 22bf6 <cloud_cmd_parse_type+0x7a>
				parsed_cmd->data.sv.state =
   22bc6:	2300      	movs	r3, #0
   22bc8:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   22bca:	7935      	ldrb	r5, [r6, #4]
   22bcc:	2d04      	cmp	r5, #4
   22bce:	d10f      	bne.n	22bf0 <cloud_cmd_parse_type+0x74>
   22bd0:	f994 3010 	ldrsb.w	r3, [r4, #16]
   22bd4:	3301      	adds	r3, #1
   22bd6:	d10b      	bne.n	22bf0 <cloud_cmd_parse_type+0x74>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   22bd8:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   22bdc:	2200      	movs	r2, #0
   22bde:	2300      	movs	r3, #0
   22be0:	4640      	mov	r0, r8
   22be2:	4649      	mov	r1, r9
   22be4:	f7fa f850 	bl	1cc88 <__aeabi_dcmpeq>
   22be8:	2800      	cmp	r0, #0
   22bea:	d056      	beq.n	22c9a <cloud_cmd_parse_type+0x11e>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   22bec:	2300      	movs	r3, #0
   22bee:	7423      	strb	r3, [r4, #16]
	parsed_cmd->type = type_cmd->type;
   22bf0:	70a5      	strb	r5, [r4, #2]
	return 0;
   22bf2:	2000      	movs	r0, #0
   22bf4:	e005      	b.n	22c02 <cloud_cmd_parse_type+0x86>
			} else if (cJSON_IsBool(decoded_obj)) {
   22bf6:	4628      	mov	r0, r5
   22bf8:	f021 fa36 	bl	44068 <cJSON_IsBool>
   22bfc:	b918      	cbnz	r0, 22c06 <cloud_cmd_parse_type+0x8a>
				return -ESRCH;
   22bfe:	f06f 0002 	mvn.w	r0, #2
}
   22c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					cJSON_IsTrue(decoded_obj) ?
   22c06:	4628      	mov	r0, r5
   22c08:	f021 fa28 	bl	4405c <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   22c0c:	3000      	adds	r0, #0
   22c0e:	bf18      	it	ne
   22c10:	2001      	movne	r0, #1
   22c12:	7420      	strb	r0, [r4, #16]
   22c14:	e7d9      	b.n	22bca <cloud_cmd_parse_type+0x4e>
			if (cJSON_IsNull(decoded_obj)) {
   22c16:	f021 fa2e 	bl	44076 <cJSON_IsNull>
   22c1a:	2800      	cmp	r0, #0
   22c1c:	d1d3      	bne.n	22bc6 <cloud_cmd_parse_type+0x4a>
			} else if (cJSON_IsNumber(decoded_obj)) {
   22c1e:	4628      	mov	r0, r5
   22c20:	f021 fa2f 	bl	44082 <cJSON_IsNumber>
   22c24:	2800      	cmp	r0, #0
   22c26:	d0ea      	beq.n	22bfe <cloud_cmd_parse_type+0x82>
				parsed_cmd->data.sv.state =
   22c28:	23ff      	movs	r3, #255	; 0xff
   22c2a:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   22c2c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   22c30:	e9c4 2302 	strd	r2, r3, [r4, #8]
   22c34:	e7c9      	b.n	22bca <cloud_cmd_parse_type+0x4e>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   22c36:	f021 fa32 	bl	4409e <cJSON_GetStringValue>
   22c3a:	2800      	cmp	r0, #0
   22c3c:	d0df      	beq.n	22bfe <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   22c3e:	4628      	mov	r0, r5
   22c40:	f021 fa2d 	bl	4409e <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   22c44:	2210      	movs	r2, #16
   22c46:	2100      	movs	r1, #0
   22c48:	f01d fbda 	bl	40400 <strtol>
   22c4c:	f7f9 fd4a 	bl	1c6e4 <__aeabi_i2d>
   22c50:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   22c54:	e7b9      	b.n	22bca <cloud_cmd_parse_type+0x4e>
	if (!cJSON_IsObject(data_obj)) {
   22c56:	f021 fa29 	bl	440ac <cJSON_IsObject>
   22c5a:	2800      	cmp	r0, #0
   22c5c:	d0cf      	beq.n	22bfe <cloud_cmd_parse_type+0x82>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   22c5e:	4919      	ldr	r1, [pc, #100]	; (22cc4 <cloud_cmd_parse_type+0x148>)
   22c60:	4628      	mov	r0, r5
   22c62:	f01e fe4d 	bl	41900 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   22c66:	f021 fa1a 	bl	4409e <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   22c6a:	4917      	ldr	r1, [pc, #92]	; (22cc8 <cloud_cmd_parse_type+0x14c>)
	params->blob = cJSON_GetStringValue(blob);
   22c6c:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   22c6e:	4628      	mov	r0, r5
   22c70:	f01e fe46 	bl	41900 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   22c74:	f021 fa13 	bl	4409e <cJSON_GetStringValue>
			-ESRCH : 0);
   22c78:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   22c7a:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   22c7c:	2b00      	cmp	r3, #0
   22c7e:	d0be      	beq.n	22bfe <cloud_cmd_parse_type+0x82>
			if (parsed_cmd->data.data_string == NULL) {
   22c80:	2800      	cmp	r0, #0
   22c82:	d1a2      	bne.n	22bca <cloud_cmd_parse_type+0x4e>
   22c84:	e7bb      	b.n	22bfe <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(type_obj);
   22c86:	4638      	mov	r0, r7
   22c88:	f021 fa09 	bl	4409e <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   22c8c:	60a0      	str	r0, [r4, #8]
   22c8e:	e7f7      	b.n	22c80 <cloud_cmd_parse_type+0x104>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   22c90:	2b00      	cmp	r3, #0
   22c92:	d09a      	beq.n	22bca <cloud_cmd_parse_type+0x4e>
		return -EINVAL;
   22c94:	f06f 0015 	mvn.w	r0, #21
   22c98:	e7b3      	b.n	22c02 <cloud_cmd_parse_type+0x86>
		} else if (parsed_cmd->data.sv.value <
   22c9a:	2600      	movs	r6, #0
   22c9c:	4f0b      	ldr	r7, [pc, #44]	; (22ccc <cloud_cmd_parse_type+0x150>)
   22c9e:	4632      	mov	r2, r6
   22ca0:	463b      	mov	r3, r7
   22ca2:	4640      	mov	r0, r8
   22ca4:	4649      	mov	r1, r9
   22ca6:	f7f9 fff9 	bl	1cc9c <__aeabi_dcmplt>
   22caa:	2800      	cmp	r0, #0
   22cac:	d0a0      	beq.n	22bf0 <cloud_cmd_parse_type+0x74>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   22cae:	e9c4 6702 	strd	r6, r7, [r4, #8]
   22cb2:	e79d      	b.n	22bf0 <cloud_cmd_parse_type+0x74>
				return -ENOENT; /* Command not found */
   22cb4:	f06f 0001 	mvn.w	r0, #1
   22cb8:	e7a3      	b.n	22c02 <cloud_cmd_parse_type+0x86>
			return -ENOTSUP;
   22cba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22cbe:	e7a0      	b.n	22c02 <cloud_cmd_parse_type+0x86>
   22cc0:	00046c30 	.word	0x00046c30
   22cc4:	00048802 	.word	0x00048802
   22cc8:	00048807 	.word	0x00048807
   22ccc:	40140000 	.word	0x40140000

00022cd0 <cloud_encode_data>:
{
   22cd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22cd4:	4616      	mov	r6, r2
	int64_t data_ts = channel->ts;
   22cd6:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   22cda:	e9cd 2300 	strd	r2, r3, [sp]
	if (channel == NULL || channel->data.buf == NULL ||
   22cde:	6843      	ldr	r3, [r0, #4]
{
   22ce0:	4680      	mov	r8, r0
   22ce2:	460f      	mov	r7, r1
	if (channel == NULL || channel->data.buf == NULL ||
   22ce4:	2b00      	cmp	r3, #0
   22ce6:	f000 8085 	beq.w	22df4 <cloud_encode_data+0x124>
   22cea:	6883      	ldr	r3, [r0, #8]
   22cec:	2b00      	cmp	r3, #0
   22cee:	f000 8081 	beq.w	22df4 <cloud_encode_data+0x124>
	    channel->data.len == 0 || output == NULL ||
   22cf2:	2e00      	cmp	r6, #0
   22cf4:	d07e      	beq.n	22df4 <cloud_encode_data+0x124>
   22cf6:	290a      	cmp	r1, #10
   22cf8:	d87c      	bhi.n	22df4 <cloud_encode_data+0x124>
	cJSON *root_obj = cJSON_CreateObject();
   22cfa:	f006 fb5f 	bl	293bc <cJSON_CreateObject>
	if (root_obj == NULL) {
   22cfe:	4605      	mov	r5, r0
   22d00:	b938      	cbnz	r0, 22d12 <cloud_encode_data+0x42>
		cJSON_Delete(root_obj);
   22d02:	f006 fa87 	bl	29214 <cJSON_Delete>
		return -ENOMEM;
   22d06:	f06f 040b 	mvn.w	r4, #11
}
   22d0a:	4620      	mov	r0, r4
   22d0c:	b003      	add	sp, #12
   22d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = date_time_uptime_to_unix_time_ms(&data_ts);
   22d12:	4668      	mov	r0, sp
   22d14:	f00a f866 	bl	2cde4 <date_time_uptime_to_unix_time_ms>
	if (ret) {
   22d18:	4602      	mov	r2, r0
   22d1a:	b1d8      	cbz	r0, 22d54 <cloud_encode_data+0x84>
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", ret);
   22d1c:	2102      	movs	r1, #2
   22d1e:	f04f 0000 	mov.w	r0, #0
   22d22:	4c36      	ldr	r4, [pc, #216]	; (22dfc <cloud_encode_data+0x12c>)
   22d24:	f361 0007 	bfi	r0, r1, #0, #8
   22d28:	4935      	ldr	r1, [pc, #212]	; (22e00 <cloud_encode_data+0x130>)
   22d2a:	1a64      	subs	r4, r4, r1
   22d2c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22d30:	f364 108f 	bfi	r0, r4, #6, #10
   22d34:	4933      	ldr	r1, [pc, #204]	; (22e04 <cloud_encode_data+0x134>)
   22d36:	f01f f982 	bl	4203e <log_string_sync>
		LOG_WRN("Clearing timestamp");
   22d3a:	2302      	movs	r3, #2
   22d3c:	f04f 0000 	mov.w	r0, #0
   22d40:	f363 0007 	bfi	r0, r3, #0, #8
   22d44:	f364 108f 	bfi	r0, r4, #6, #10
   22d48:	492f      	ldr	r1, [pc, #188]	; (22e08 <cloud_encode_data+0x138>)
   22d4a:	f01f f978 	bl	4203e <log_string_sync>
		date_time_timestamp_clear(&data_ts);
   22d4e:	4668      	mov	r0, sp
   22d50:	f021 fefa 	bl	44b48 <date_time_timestamp_clear>
			   channel_type_str[channel->type]);
   22d54:	f898 2000 	ldrb.w	r2, [r8]
	json_str = cJSON_CreateString(item);
   22d58:	4b2c      	ldr	r3, [pc, #176]	; (22e0c <cloud_encode_data+0x13c>)
   22d5a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   22d5e:	f006 fb09 	bl	29374 <cJSON_CreateString>
	if (json_str == NULL) {
   22d62:	4602      	mov	r2, r0
   22d64:	b350      	cbz	r0, 22dbc <cloud_encode_data+0xec>
	cJSON_AddItemToObject(parent, str, item);
   22d66:	492a      	ldr	r1, [pc, #168]	; (22e10 <cloud_encode_data+0x140>)
   22d68:	4628      	mov	r0, r5
   22d6a:	f021 f942 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22d6e:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   22d72:	f8d8 0004 	ldr.w	r0, [r8, #4]
   22d76:	f006 fafd 	bl	29374 <cJSON_CreateString>
	if (json_str == NULL) {
   22d7a:	4602      	mov	r2, r0
   22d7c:	b308      	cbz	r0, 22dc2 <cloud_encode_data+0xf2>
	cJSON_AddItemToObject(parent, str, item);
   22d7e:	4925      	ldr	r1, [pc, #148]	; (22e14 <cloud_encode_data+0x144>)
   22d80:	4628      	mov	r0, r5
   22d82:	f021 f936 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22d86:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22d88:	4b23      	ldr	r3, [pc, #140]	; (22e18 <cloud_encode_data+0x148>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   22d8a:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   22d8c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   22d90:	f006 faf0 	bl	29374 <cJSON_CreateString>
	if (json_str == NULL) {
   22d94:	4602      	mov	r2, r0
   22d96:	b1b8      	cbz	r0, 22dc8 <cloud_encode_data+0xf8>
	cJSON_AddItemToObject(parent, str, item);
   22d98:	4920      	ldr	r1, [pc, #128]	; (22e1c <cloud_encode_data+0x14c>)
   22d9a:	4628      	mov	r0, r5
   22d9c:	f021 f929 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22da0:	2300      	movs	r3, #0
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22da2:	e9dd 0100 	ldrd	r0, r1, [sp]
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22da6:	441c      	add	r4, r3
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22da8:	f7f9 fcd8 	bl	1c75c <__aeabi_l2d>
	json_num = cJSON_CreateNumber(item);
   22dac:	ec41 0b10 	vmov	d0, r0, r1
   22db0:	f7fa fe9a 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   22db4:	4602      	mov	r2, r0
   22db6:	b950      	cbnz	r0, 22dce <cloud_encode_data+0xfe>
		cJSON_Delete(root_obj);
   22db8:	4628      	mov	r0, r5
   22dba:	e7a2      	b.n	22d02 <cloud_encode_data+0x32>
		return -ENOMEM;
   22dbc:	f06f 090b 	mvn.w	r9, #11
   22dc0:	e7d7      	b.n	22d72 <cloud_encode_data+0xa2>
   22dc2:	f06f 040b 	mvn.w	r4, #11
   22dc6:	e7df      	b.n	22d88 <cloud_encode_data+0xb8>
   22dc8:	f06f 030b 	mvn.w	r3, #11
   22dcc:	e7e9      	b.n	22da2 <cloud_encode_data+0xd2>
	cJSON_AddItemToObject(parent, str, item);
   22dce:	4914      	ldr	r1, [pc, #80]	; (22e20 <cloud_encode_data+0x150>)
   22dd0:	4628      	mov	r0, r5
   22dd2:	f021 f90e 	bl	43ff2 <cJSON_AddItemToObject>
	if (ret != 0) {
   22dd6:	2c00      	cmp	r4, #0
   22dd8:	d1ee      	bne.n	22db8 <cloud_encode_data+0xe8>
	buffer = cJSON_PrintUnformatted(root_obj);
   22dda:	4628      	mov	r0, r5
   22ddc:	f021 f8f2 	bl	43fc4 <cJSON_PrintUnformatted>
   22de0:	4607      	mov	r7, r0
	cJSON_Delete(root_obj);
   22de2:	4628      	mov	r0, r5
   22de4:	f006 fa16 	bl	29214 <cJSON_Delete>
	output->buf = buffer;
   22de8:	6037      	str	r7, [r6, #0]
	output->len = strlen(buffer);
   22dea:	4638      	mov	r0, r7
   22dec:	f7fa fa3a 	bl	1d264 <strlen>
   22df0:	6070      	str	r0, [r6, #4]
	return 0;
   22df2:	e78a      	b.n	22d0a <cloud_encode_data+0x3a>
		return -EINVAL;
   22df4:	f06f 0415 	mvn.w	r4, #21
   22df8:	e787      	b.n	22d0a <cloud_encode_data+0x3a>
   22dfa:	bf00      	nop
   22dfc:	000468b8 	.word	0x000468b8
   22e00:	00046878 	.word	0x00046878
   22e04:	000488b4 	.word	0x000488b4
   22e08:	000488e0 	.word	0x000488e0
   22e0c:	00046bb0 	.word	0x00046bb0
   22e10:	000488f3 	.word	0x000488f3
   22e14:	00048025 	.word	0x00048025
   22e18:	00046c04 	.word	0x00046c04
   22e1c:	000488f9 	.word	0x000488f9
   22e20:	00048905 	.word	0x00048905

00022e24 <cloud_encode_env_sensors_data>:
{
   22e24:	b570      	push	{r4, r5, r6, lr}
   22e26:	460d      	mov	r5, r1
   22e28:	b08a      	sub	sp, #40	; 0x28
	__ASSERT_NO_MSG(sensor_data != NULL);
   22e2a:	4604      	mov	r4, r0
   22e2c:	b958      	cbnz	r0, 22e46 <cloud_encode_env_sensors_data+0x22>
   22e2e:	4925      	ldr	r1, [pc, #148]	; (22ec4 <cloud_encode_env_sensors_data+0xa0>)
   22e30:	4825      	ldr	r0, [pc, #148]	; (22ec8 <cloud_encode_env_sensors_data+0xa4>)
   22e32:	f240 1387 	movw	r3, #391	; 0x187
   22e36:	4a25      	ldr	r2, [pc, #148]	; (22ecc <cloud_encode_env_sensors_data+0xa8>)
   22e38:	f01e fed6 	bl	41be8 <printk>
   22e3c:	f240 1187 	movw	r1, #391	; 0x187
   22e40:	4822      	ldr	r0, [pc, #136]	; (22ecc <cloud_encode_env_sensors_data+0xa8>)
   22e42:	f01f f8eb 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22e46:	b95d      	cbnz	r5, 22e60 <cloud_encode_env_sensors_data+0x3c>
   22e48:	4921      	ldr	r1, [pc, #132]	; (22ed0 <cloud_encode_env_sensors_data+0xac>)
   22e4a:	481f      	ldr	r0, [pc, #124]	; (22ec8 <cloud_encode_env_sensors_data+0xa4>)
   22e4c:	f44f 73c4 	mov.w	r3, #392	; 0x188
   22e50:	4a1e      	ldr	r2, [pc, #120]	; (22ecc <cloud_encode_env_sensors_data+0xa8>)
   22e52:	f01e fec9 	bl	41be8 <printk>
   22e56:	f44f 71c4 	mov.w	r1, #392	; 0x188
   22e5a:	481c      	ldr	r0, [pc, #112]	; (22ecc <cloud_encode_env_sensors_data+0xa8>)
   22e5c:	f01f f8de 	bl	4201c <assert_post_action>
	struct cloud_channel_data cloud_sensor = { .ts = sensor_data->ts };
   22e60:	2210      	movs	r2, #16
   22e62:	2100      	movs	r1, #0
   22e64:	eb0d 0002 	add.w	r0, sp, r2
   22e68:	f022 f9fe 	bl	45268 <memset>
   22e6c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22e70:	e9cd 2308 	strd	r2, r3, [sp, #32]
	switch (sensor_data->type) {
   22e74:	7823      	ldrb	r3, [r4, #0]
   22e76:	2b03      	cmp	r3, #3
   22e78:	d820      	bhi.n	22ebc <cloud_encode_env_sensors_data+0x98>
   22e7a:	e8df f003 	tbb	[pc, r3]
   22e7e:	1902      	.short	0x1902
   22e80:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   22e82:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   22e84:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22e86:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   22e8a:	2106      	movs	r1, #6
   22e8c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22e90:	4630      	mov	r0, r6
   22e92:	e9cd 2300 	strd	r2, r3, [sp]
   22e96:	4a0f      	ldr	r2, [pc, #60]	; (22ed4 <cloud_encode_env_sensors_data+0xb0>)
   22e98:	f01d f9d0 	bl	4023c <sniprintf>
	cloud_sensor.data.len = len;
   22e9c:	b2c0      	uxtb	r0, r0
   22e9e:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22ea0:	462a      	mov	r2, r5
   22ea2:	2106      	movs	r1, #6
   22ea4:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   22ea6:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22ea8:	f7ff ff12 	bl	22cd0 <cloud_encode_data>
}
   22eac:	b00a      	add	sp, #40	; 0x28
   22eae:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   22eb0:	2309      	movs	r3, #9
   22eb2:	e7e7      	b.n	22e84 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   22eb4:	230a      	movs	r3, #10
   22eb6:	e7e5      	b.n	22e84 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22eb8:	230b      	movs	r3, #11
   22eba:	e7e3      	b.n	22e84 <cloud_encode_env_sensors_data+0x60>
		return -1;
   22ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22ec0:	e7f4      	b.n	22eac <cloud_encode_env_sensors_data+0x88>
   22ec2:	bf00      	nop
   22ec4:	000489a7 	.word	0x000489a7
   22ec8:	0004825b 	.word	0x0004825b
   22ecc:	0004895e 	.word	0x0004895e
   22ed0:	000489c2 	.word	0x000489c2
   22ed4:	000489d8 	.word	0x000489d8

00022ed8 <cloud_encode_motion_data>:
{
   22ed8:	b530      	push	{r4, r5, lr}
   22eda:	460d      	mov	r5, r1
   22edc:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(motion_data != NULL);
   22ede:	4604      	mov	r4, r0
   22ee0:	b958      	cbnz	r0, 22efa <cloud_encode_motion_data+0x22>
   22ee2:	491d      	ldr	r1, [pc, #116]	; (22f58 <cloud_encode_motion_data+0x80>)
   22ee4:	481d      	ldr	r0, [pc, #116]	; (22f5c <cloud_encode_motion_data+0x84>)
   22ee6:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   22eea:	4a1d      	ldr	r2, [pc, #116]	; (22f60 <cloud_encode_motion_data+0x88>)
   22eec:	f01e fe7c 	bl	41be8 <printk>
   22ef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   22ef4:	481a      	ldr	r0, [pc, #104]	; (22f60 <cloud_encode_motion_data+0x88>)
   22ef6:	f01f f891 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22efa:	b95d      	cbnz	r5, 22f14 <cloud_encode_motion_data+0x3c>
   22efc:	4919      	ldr	r1, [pc, #100]	; (22f64 <cloud_encode_motion_data+0x8c>)
   22efe:	4817      	ldr	r0, [pc, #92]	; (22f5c <cloud_encode_motion_data+0x84>)
   22f00:	f240 13af 	movw	r3, #431	; 0x1af
   22f04:	4a16      	ldr	r2, [pc, #88]	; (22f60 <cloud_encode_motion_data+0x88>)
   22f06:	f01e fe6f 	bl	41be8 <printk>
   22f0a:	f240 11af 	movw	r1, #431	; 0x1af
   22f0e:	4814      	ldr	r0, [pc, #80]	; (22f60 <cloud_encode_motion_data+0x88>)
   22f10:	f01f f884 	bl	4201c <assert_post_action>
	struct cloud_channel_data cloud_sensor = {
   22f14:	2210      	movs	r2, #16
   22f16:	2100      	movs	r1, #0
   22f18:	4668      	mov	r0, sp
   22f1a:	f022 f9a5 	bl	45268 <memset>
   22f1e:	2301      	movs	r3, #1
   22f20:	f88d 3000 	strb.w	r3, [sp]
   22f24:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   22f28:	e9cd 2304 	strd	r2, r3, [sp, #16]
	switch (motion_data->orientation) {
   22f2c:	7823      	ldrb	r3, [r4, #0]
   22f2e:	2b01      	cmp	r3, #1
   22f30:	d005      	beq.n	22f3e <cloud_encode_motion_data+0x66>
   22f32:	2b02      	cmp	r3, #2
   22f34:	d00d      	beq.n	22f52 <cloud_encode_motion_data+0x7a>
		return -1;
   22f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22f3a:	b007      	add	sp, #28
   22f3c:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   22f3e:	4b0a      	ldr	r3, [pc, #40]	; (22f68 <cloud_encode_motion_data+0x90>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22f40:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22f42:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22f44:	462a      	mov	r2, r5
   22f46:	2106      	movs	r1, #6
   22f48:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22f4a:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22f4c:	f7ff fec0 	bl	22cd0 <cloud_encode_data>
   22f50:	e7f3      	b.n	22f3a <cloud_encode_motion_data+0x62>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22f52:	4b06      	ldr	r3, [pc, #24]	; (22f6c <cloud_encode_motion_data+0x94>)
   22f54:	e7f4      	b.n	22f40 <cloud_encode_motion_data+0x68>
   22f56:	bf00      	nop
   22f58:	000489dd 	.word	0x000489dd
   22f5c:	0004825b 	.word	0x0004825b
   22f60:	0004895e 	.word	0x0004895e
   22f64:	000489c2 	.word	0x000489c2
   22f68:	000489f8 	.word	0x000489f8
   22f6c:	000489ff 	.word	0x000489ff

00022f70 <cloud_encode_device_status_data>:
{
   22f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f74:	4680      	mov	r8, r0
   22f76:	b085      	sub	sp, #20
   22f78:	4692      	mov	sl, r2
   22f7a:	469b      	mov	fp, r3
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   22f7c:	4689      	mov	r9, r1
   22f7e:	b961      	cbnz	r1, 22f9a <cloud_encode_device_status_data+0x2a>
   22f80:	b15a      	cbz	r2, 22f9a <cloud_encode_device_status_data+0x2a>
   22f82:	495a      	ldr	r1, [pc, #360]	; (230ec <cloud_encode_device_status_data+0x17c>)
   22f84:	485a      	ldr	r0, [pc, #360]	; (230f0 <cloud_encode_device_status_data+0x180>)
   22f86:	f44f 7311 	mov.w	r3, #580	; 0x244
   22f8a:	4a5a      	ldr	r2, [pc, #360]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22f8c:	f01e fe2c 	bl	41be8 <printk>
   22f90:	f44f 7111 	mov.w	r1, #580	; 0x244
   22f94:	4857      	ldr	r0, [pc, #348]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22f96:	f01f f841 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG((fota != NULL) || !fota_count);
   22f9a:	f1bb 0f00 	cmp.w	fp, #0
   22f9e:	d10d      	bne.n	22fbc <cloud_encode_device_status_data+0x4c>
   22fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22fa2:	b15b      	cbz	r3, 22fbc <cloud_encode_device_status_data+0x4c>
   22fa4:	4954      	ldr	r1, [pc, #336]	; (230f8 <cloud_encode_device_status_data+0x188>)
   22fa6:	4852      	ldr	r0, [pc, #328]	; (230f0 <cloud_encode_device_status_data+0x180>)
   22fa8:	f240 2345 	movw	r3, #581	; 0x245
   22fac:	4a51      	ldr	r2, [pc, #324]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22fae:	f01e fe1b 	bl	41be8 <printk>
   22fb2:	f240 2145 	movw	r1, #581	; 0x245
   22fb6:	484f      	ldr	r0, [pc, #316]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22fb8:	f01f f830 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22fbe:	b95b      	cbnz	r3, 22fd8 <cloud_encode_device_status_data+0x68>
   22fc0:	494e      	ldr	r1, [pc, #312]	; (230fc <cloud_encode_device_status_data+0x18c>)
   22fc2:	484b      	ldr	r0, [pc, #300]	; (230f0 <cloud_encode_device_status_data+0x180>)
   22fc4:	f240 2346 	movw	r3, #582	; 0x246
   22fc8:	4a4a      	ldr	r2, [pc, #296]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22fca:	f01e fe0d 	bl	41be8 <printk>
   22fce:	f240 2146 	movw	r1, #582	; 0x246
   22fd2:	4848      	ldr	r0, [pc, #288]	; (230f4 <cloud_encode_device_status_data+0x184>)
   22fd4:	f01f f822 	bl	4201c <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   22fd8:	f006 f9f0 	bl	293bc <cJSON_CreateObject>
   22fdc:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   22fde:	f006 f9ed 	bl	293bc <cJSON_CreateObject>
   22fe2:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   22fe4:	f006 f9ea 	bl	293bc <cJSON_CreateObject>
   22fe8:	4605      	mov	r5, r0
	cJSON *device_obj = cJSON_CreateObject();
   22fea:	f006 f9e7 	bl	293bc <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22fee:	4b44      	ldr	r3, [pc, #272]	; (23100 <cloud_encode_device_status_data+0x190>)
	cJSON *device_obj = cJSON_CreateObject();
   22ff0:	4604      	mov	r4, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22ff2:	889a      	ldrh	r2, [r3, #4]
   22ff4:	6818      	ldr	r0, [r3, #0]
   22ff6:	799b      	ldrb	r3, [r3, #6]
   22ff8:	9002      	str	r0, [sp, #8]
   22ffa:	f8ad 200c 	strh.w	r2, [sp, #12]
   22ffe:	f88d 300e 	strb.w	r3, [sp, #14]
	if (root_obj == NULL || state_obj == NULL ||
   23002:	b116      	cbz	r6, 2300a <cloud_encode_device_status_data+0x9a>
   23004:	b10f      	cbz	r7, 2300a <cloud_encode_device_status_data+0x9a>
   23006:	b105      	cbz	r5, 2300a <cloud_encode_device_status_data+0x9a>
	    reported_obj == NULL || device_obj == NULL) {
   23008:	b984      	cbnz	r4, 2302c <cloud_encode_device_status_data+0xbc>
		cJSON_Delete(root_obj);
   2300a:	4630      	mov	r0, r6
   2300c:	f006 f902 	bl	29214 <cJSON_Delete>
		cJSON_Delete(state_obj);
   23010:	4638      	mov	r0, r7
   23012:	f006 f8ff 	bl	29214 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   23016:	4628      	mov	r0, r5
   23018:	f006 f8fc 	bl	29214 <cJSON_Delete>
		cJSON_Delete(device_obj);
   2301c:	4620      	mov	r0, r4
   2301e:	f006 f8f9 	bl	29214 <cJSON_Delete>
		return -ENOMEM;
   23022:	f06f 000b 	mvn.w	r0, #11
}
   23026:	b005      	add	sp, #20
   23028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *dummy_obj = cJSON_CreateNull();
   2302c:	f006 f986 	bl	2933c <cJSON_CreateNull>
	if (dummy_obj == NULL) {
   23030:	4602      	mov	r2, r0
   23032:	b118      	cbz	r0, 2303c <cloud_encode_device_status_data+0xcc>
	cJSON_AddItemToObject(parent, str, item);
   23034:	a902      	add	r1, sp, #8
   23036:	4628      	mov	r0, r5
   23038:	f020 ffdb 	bl	43ff2 <cJSON_AddItemToObject>
		dev_str[i] = tolower(dev_str[i]);
   2303c:	4831      	ldr	r0, [pc, #196]	; (23104 <cloud_encode_device_status_data+0x194>)
   2303e:	aa02      	add	r2, sp, #8
	for (int i = 0; dev_str[i]; ++i) {
   23040:	f812 3b01 	ldrb.w	r3, [r2], #1
   23044:	bb8b      	cbnz	r3, 230aa <cloud_encode_device_status_data+0x13a>
	if (modem_param) {
   23046:	f1b8 0f00 	cmp.w	r8, #0
   2304a:	d137      	bne.n	230bc <cloud_encode_device_status_data+0x14c>
	size_t item_cnt = 0;
   2304c:	f04f 0800 	mov.w	r8, #0
	if (service_info_json_object_encode(ui, ui_count,
   23050:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   23054:	9401      	str	r4, [sp, #4]
   23056:	9300      	str	r3, [sp, #0]
   23058:	465a      	mov	r2, fp
   2305a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2305c:	4651      	mov	r1, sl
   2305e:	4648      	mov	r0, r9
   23060:	f000 fafa 	bl	23658 <service_info_json_object_encode>
   23064:	b110      	cbz	r0, 2306c <cloud_encode_device_status_data+0xfc>
	if (item_cnt != 0) {
   23066:	f1b8 0f00 	cmp.w	r8, #0
   2306a:	d02f      	beq.n	230cc <cloud_encode_device_status_data+0x15c>
	cJSON_AddItemToObject(parent, str, item);
   2306c:	4622      	mov	r2, r4
   2306e:	a902      	add	r1, sp, #8
   23070:	4628      	mov	r0, r5
   23072:	f020 ffbe 	bl	43ff2 <cJSON_AddItemToObject>
   23076:	462a      	mov	r2, r5
   23078:	4923      	ldr	r1, [pc, #140]	; (23108 <cloud_encode_device_status_data+0x198>)
   2307a:	4638      	mov	r0, r7
   2307c:	f020 ffb9 	bl	43ff2 <cJSON_AddItemToObject>
   23080:	463a      	mov	r2, r7
   23082:	4922      	ldr	r1, [pc, #136]	; (2310c <cloud_encode_device_status_data+0x19c>)
   23084:	4630      	mov	r0, r6
   23086:	f020 ffb4 	bl	43ff2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   2308a:	4630      	mov	r0, r6
   2308c:	f020 ff9a 	bl	43fc4 <cJSON_PrintUnformatted>
   23090:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   23092:	4630      	mov	r0, r6
   23094:	f006 f8be 	bl	29214 <cJSON_Delete>
	output->buf = buffer;
   23098:	9b10      	ldr	r3, [sp, #64]	; 0x40
	output->len = strlen(buffer);
   2309a:	4620      	mov	r0, r4
	output->buf = buffer;
   2309c:	601c      	str	r4, [r3, #0]
	output->len = strlen(buffer);
   2309e:	f7fa f8e1 	bl	1d264 <strlen>
   230a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   230a4:	6058      	str	r0, [r3, #4]
	return 0;
   230a6:	2000      	movs	r0, #0
   230a8:	e7bd      	b.n	23026 <cloud_encode_device_status_data+0xb6>
		dev_str[i] = tolower(dev_str[i]);
   230aa:	5cc1      	ldrb	r1, [r0, r3]
   230ac:	f001 0103 	and.w	r1, r1, #3
   230b0:	2901      	cmp	r1, #1
   230b2:	bf08      	it	eq
   230b4:	3320      	addeq	r3, #32
   230b6:	f802 3c01 	strb.w	r3, [r2, #-1]
   230ba:	e7c1      	b.n	23040 <cloud_encode_device_status_data+0xd0>
		val = modem_info_json_object_encode((struct modem_param_info *)
   230bc:	4640      	mov	r0, r8
   230be:	4621      	mov	r1, r4
   230c0:	f009 fc00 	bl	2c8c4 <modem_info_json_object_encode>
		if (val > 0) {
   230c4:	f1b0 0800 	subs.w	r8, r0, #0
   230c8:	dcc2      	bgt.n	23050 <cloud_encode_device_status_data+0xe0>
   230ca:	e7bf      	b.n	2304c <cloud_encode_device_status_data+0xdc>
		cJSON_Delete(root_obj);
   230cc:	4630      	mov	r0, r6
   230ce:	f006 f8a1 	bl	29214 <cJSON_Delete>
		cJSON_Delete(state_obj);
   230d2:	4638      	mov	r0, r7
   230d4:	f006 f89e 	bl	29214 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   230d8:	4628      	mov	r0, r5
   230da:	f006 f89b 	bl	29214 <cJSON_Delete>
		cJSON_Delete(device_obj);
   230de:	4620      	mov	r0, r4
   230e0:	f006 f898 	bl	29214 <cJSON_Delete>
		return -EAGAIN;
   230e4:	f06f 000a 	mvn.w	r0, #10
   230e8:	e79d      	b.n	23026 <cloud_encode_device_status_data+0xb6>
   230ea:	bf00      	nop
   230ec:	00048908 	.word	0x00048908
   230f0:	0004825b 	.word	0x0004825b
   230f4:	0004895e 	.word	0x0004895e
   230f8:	00048929 	.word	0x00048929
   230fc:	000489c2 	.word	0x000489c2
   23100:	00048957 	.word	0x00048957
   23104:	0004f20f 	.word	0x0004f20f
   23108:	0004894e 	.word	0x0004894e
   2310c:	0004e2e6 	.word	0x0004e2e6

00023110 <cloud_decode_command>:
{
   23110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23114:	b08f      	sub	sp, #60	; 0x3c
	if (input == NULL) {
   23116:	2800      	cmp	r0, #0
   23118:	f000 8151 	beq.w	233be <cloud_decode_command+0x2ae>
	root_obj = cJSON_Parse(input);
   2311c:	f020 ff4e 	bl	43fbc <cJSON_Parse>
	if (root_obj == NULL) {
   23120:	9004      	str	r0, [sp, #16]
   23122:	2800      	cmp	r0, #0
   23124:	f000 814e 	beq.w	233c4 <cloud_decode_command+0x2b4>
   23128:	4ea8      	ldr	r6, [pc, #672]	; (233cc <cloud_decode_command+0x2bc>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   2312a:	2400      	movs	r4, #0
   2312c:	4635      	mov	r5, r6
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   2312e:	f856 3b04 	ldr.w	r3, [r6], #4
   23132:	9804      	ldr	r0, [sp, #16]
   23134:	6819      	ldr	r1, [r3, #0]
   23136:	f01e fbe3 	bl	41900 <json_object_decode>
		if ((group_obj != NULL) &&
   2313a:	b308      	cbz	r0, 23180 <cloud_decode_command+0x70>
					cmd_group_str[cmd_groups[i]->group]))) {
   2313c:	f856 3c04 	ldr.w	r3, [r6, #-4]
			(json_value_string_compare(group_obj,
   23140:	4aa3      	ldr	r2, [pc, #652]	; (233d0 <cloud_decode_command+0x2c0>)
					cmd_group_str[cmd_groups[i]->group]))) {
   23142:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   23144:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   23148:	f01e fbcb 	bl	418e2 <json_value_string_compare>
		if ((group_obj != NULL) &&
   2314c:	b1c0      	cbz	r0, 23180 <cloud_decode_command+0x70>
			group = cmd_groups[i];
   2314e:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
	if (group == NULL) {
   23152:	b9cd      	cbnz	r5, 23188 <cloud_decode_command+0x78>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   23154:	499f      	ldr	r1, [pc, #636]	; (233d4 <cloud_decode_command+0x2c4>)
   23156:	9804      	ldr	r0, [sp, #16]
   23158:	f020 ff3f 	bl	43fda <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   2315c:	9b04      	ldr	r3, [sp, #16]
   2315e:	499e      	ldr	r1, [pc, #632]	; (233d8 <cloud_decode_command+0x2c8>)
   23160:	2800      	cmp	r0, #0
   23162:	bf08      	it	eq
   23164:	4618      	moveq	r0, r3
   23166:	f020 ff5b 	bl	44020 <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   2316a:	4607      	mov	r7, r0
   2316c:	2800      	cmp	r0, #0
   2316e:	f040 80a3 	bne.w	232b8 <cloud_decode_command+0x1a8>
	cJSON_Delete(root_obj);
   23172:	9804      	ldr	r0, [sp, #16]
   23174:	f006 f84e 	bl	29214 <cJSON_Delete>
	return 0;
   23178:	2000      	movs	r0, #0
}
   2317a:	b00f      	add	sp, #60	; 0x3c
   2317c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   23180:	3401      	adds	r4, #1
   23182:	2c04      	cmp	r4, #4
   23184:	d1d3      	bne.n	2312e <cloud_decode_command+0x1e>
   23186:	e7e5      	b.n	23154 <cloud_decode_command+0x44>
	cmd_parsed.group = group->group;
   23188:	4b94      	ldr	r3, [pc, #592]	; (233dc <cloud_decode_command+0x2cc>)
	for (size_t j = 0; j < group->num_children; ++j) {
   2318a:	2600      	movs	r6, #0
   2318c:	4699      	mov	r9, r3
	cmd_parsed.group = group->group;
   2318e:	792a      	ldrb	r2, [r5, #4]
   23190:	701a      	strb	r2, [r3, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   23192:	68eb      	ldr	r3, [r5, #12]
   23194:	429e      	cmp	r6, r3
   23196:	d2dd      	bcs.n	23154 <cloud_decode_command+0x44>
			json_object_decode(root_obj, group->children[j].key);
   23198:	68ab      	ldr	r3, [r5, #8]
   2319a:	0134      	lsls	r4, r6, #4
   2319c:	5919      	ldr	r1, [r3, r4]
   2319e:	9804      	ldr	r0, [sp, #16]
   231a0:	f01e fbae 	bl	41900 <json_object_decode>
		if ((channel_obj != NULL) &&
   231a4:	2800      	cmp	r0, #0
   231a6:	d04f      	beq.n	23248 <cloud_decode_command+0x138>
			    channel_type_str[group->children[j].channel]))) {
   231a8:	68ab      	ldr	r3, [r5, #8]
		    (json_value_string_compare(
   231aa:	4a8d      	ldr	r2, [pc, #564]	; (233e0 <cloud_decode_command+0x2d0>)
			    channel_type_str[group->children[j].channel]))) {
   231ac:	4423      	add	r3, r4
   231ae:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   231b0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   231b4:	f01e fb95 	bl	418e2 <json_value_string_compare>
		if ((channel_obj != NULL) &&
   231b8:	2800      	cmp	r0, #0
   231ba:	d045      	beq.n	23248 <cloud_decode_command+0x138>
			chan = &group->children[j];
   231bc:	68ab      	ldr	r3, [r5, #8]
	if (chan == NULL) {
   231be:	191c      	adds	r4, r3, r4
   231c0:	d0c8      	beq.n	23154 <cloud_decode_command+0x44>
	for (size_t k = 0; k < chan->num_children; ++k) {
   231c2:	2600      	movs	r6, #0
	cmd_parsed.channel = chan->channel;
   231c4:	7923      	ldrb	r3, [r4, #4]
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   231c6:	4a87      	ldr	r2, [pc, #540]	; (233e4 <cloud_decode_command+0x2d4>)
	cmd_parsed.channel = chan->channel;
   231c8:	f889 3001 	strb.w	r3, [r9, #1]
   231cc:	4b86      	ldr	r3, [pc, #536]	; (233e8 <cloud_decode_command+0x2d8>)
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   231ce:	1a9b      	subs	r3, r3, r2
   231d0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   231d4:	9305      	str	r3, [sp, #20]
	for (size_t k = 0; k < chan->num_children; ++k) {
   231d6:	68e3      	ldr	r3, [r4, #12]
   231d8:	429e      	cmp	r6, r3
   231da:	d2bb      	bcs.n	23154 <cloud_decode_command+0x44>
		type = &chan->children[k];
   231dc:	68a1      	ldr	r1, [r4, #8]
   231de:	0132      	lsls	r2, r6, #4
   231e0:	188b      	adds	r3, r1, r2
		type_obj = json_object_decode(root_obj, type->key);
   231e2:	9804      	ldr	r0, [sp, #16]
   231e4:	5889      	ldr	r1, [r1, r2]
		type = &chan->children[k];
   231e6:	9306      	str	r3, [sp, #24]
		type_obj = json_object_decode(root_obj, type->key);
   231e8:	f01e fb8a 	bl	41900 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   231ec:	9b06      	ldr	r3, [sp, #24]
   231ee:	4601      	mov	r1, r0
   231f0:	4a7a      	ldr	r2, [pc, #488]	; (233dc <cloud_decode_command+0x2cc>)
   231f2:	4618      	mov	r0, r3
   231f4:	f7ff fcc2 	bl	22b7c <cloud_cmd_parse_type>
		if (ret != 0) {
   231f8:	b340      	cbz	r0, 2324c <cloud_decode_command+0x13c>
			if (ret != -ENOENT) {
   231fa:	1c81      	adds	r1, r0, #2
   231fc:	9007      	str	r0, [sp, #28]
   231fe:	d021      	beq.n	23244 <cloud_decode_command+0x134>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   23200:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   23204:	9b05      	ldr	r3, [sp, #20]
   23206:	f042 0201 	orr.w	r2, r2, #1
   2320a:	f362 0707 	bfi	r7, r2, #0, #8
   2320e:	f363 178f 	bfi	r7, r3, #6, #10
   23212:	792a      	ldrb	r2, [r5, #4]
   23214:	4b6e      	ldr	r3, [pc, #440]	; (233d0 <cloud_decode_command+0x2c0>)
   23216:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2321a:	f01e ff23 	bl	42064 <log_strdup>
   2321e:	7921      	ldrb	r1, [r4, #4]
   23220:	4b6f      	ldr	r3, [pc, #444]	; (233e0 <cloud_decode_command+0x2d0>)
   23222:	9006      	str	r0, [sp, #24]
   23224:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   23228:	f01e ff1c 	bl	42064 <log_strdup>
   2322c:	9b07      	ldr	r3, [sp, #28]
   2322e:	9a06      	ldr	r2, [sp, #24]
   23230:	e9cd 0301 	strd	r0, r3, [sp, #4]
   23234:	9200      	str	r2, [sp, #0]
   23236:	f240 3363 	movw	r3, #867	; 0x363
   2323a:	4a6c      	ldr	r2, [pc, #432]	; (233ec <cloud_decode_command+0x2dc>)
   2323c:	496c      	ldr	r1, [pc, #432]	; (233f0 <cloud_decode_command+0x2e0>)
   2323e:	4638      	mov	r0, r7
   23240:	f01e fefd 	bl	4203e <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   23244:	3601      	adds	r6, #1
   23246:	e7c6      	b.n	231d6 <cloud_decode_command+0xc6>
	for (size_t j = 0; j < group->num_children; ++j) {
   23248:	3601      	adds	r6, #1
   2324a:	e7a2      	b.n	23192 <cloud_decode_command+0x82>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   2324c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   23250:	f043 0303 	orr.w	r3, r3, #3
   23254:	f363 0807 	bfi	r8, r3, #0, #8
   23258:	9b05      	ldr	r3, [sp, #20]
   2325a:	4a5d      	ldr	r2, [pc, #372]	; (233d0 <cloud_decode_command+0x2c0>)
   2325c:	f363 188f 	bfi	r8, r3, #6, #10
   23260:	f899 3000 	ldrb.w	r3, [r9]
   23264:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   23268:	f01e fefc 	bl	42064 <log_strdup>
   2326c:	f899 2001 	ldrb.w	r2, [r9, #1]
   23270:	4b5b      	ldr	r3, [pc, #364]	; (233e0 <cloud_decode_command+0x2d0>)
   23272:	9007      	str	r0, [sp, #28]
   23274:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   23278:	f01e fef4 	bl	42064 <log_strdup>
   2327c:	f899 1002 	ldrb.w	r1, [r9, #2]
   23280:	4b5c      	ldr	r3, [pc, #368]	; (233f4 <cloud_decode_command+0x2e4>)
   23282:	9006      	str	r0, [sp, #24]
   23284:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   23288:	f01e feec 	bl	42064 <log_strdup>
   2328c:	9a06      	ldr	r2, [sp, #24]
   2328e:	9b07      	ldr	r3, [sp, #28]
   23290:	9002      	str	r0, [sp, #8]
   23292:	9201      	str	r2, [sp, #4]
   23294:	9300      	str	r3, [sp, #0]
   23296:	4a55      	ldr	r2, [pc, #340]	; (233ec <cloud_decode_command+0x2dc>)
   23298:	f240 336b 	movw	r3, #875	; 0x36b
   2329c:	4956      	ldr	r1, [pc, #344]	; (233f8 <cloud_decode_command+0x2e8>)
   2329e:	4640      	mov	r0, r8
   232a0:	f01e fecd 	bl	4203e <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   232a4:	484d      	ldr	r0, [pc, #308]	; (233dc <cloud_decode_command+0x2cc>)
   232a6:	f7ff fc17 	bl	22ad8 <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   232aa:	4b54      	ldr	r3, [pc, #336]	; (233fc <cloud_decode_command+0x2ec>)
   232ac:	681b      	ldr	r3, [r3, #0]
   232ae:	2b00      	cmp	r3, #0
   232b0:	d0c8      	beq.n	23244 <cloud_decode_command+0x134>
			cloud_command_cb(&cmd_parsed);
   232b2:	484a      	ldr	r0, [pc, #296]	; (233dc <cloud_decode_command+0x2cc>)
   232b4:	4798      	blx	r3
   232b6:	e7c5      	b.n	23244 <cloud_decode_command+0x134>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232b8:	2500      	movs	r5, #0
   232ba:	4b4b      	ldr	r3, [pc, #300]	; (233e8 <cloud_decode_command+0x2d8>)
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232bc:	4a49      	ldr	r2, [pc, #292]	; (233e4 <cloud_decode_command+0x2d4>)
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232be:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2340c <cloud_decode_command+0x2fc>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232c2:	1a9b      	subs	r3, r3, r2
   232c4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		cJSON *channel_obj = json_object_decode(
   232c8:	f8df 9114 	ldr.w	r9, [pc, #276]	; 233e0 <cloud_decode_command+0x2d0>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232cc:	9306      	str	r3, [sp, #24]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
   232d2:	429d      	cmp	r5, r3
   232d4:	d303      	bcc.n	232de <cloud_decode_command+0x1ce>
	cJSON_Delete(config_obj);
   232d6:	4638      	mov	r0, r7
   232d8:	f005 ff9c 	bl	29214 <cJSON_Delete>
	return 0;
   232dc:	e749      	b.n	23172 <cloud_decode_command+0x62>
		struct cloud_command found_config_item = {
   232de:	2218      	movs	r2, #24
   232e0:	2100      	movs	r1, #0
   232e2:	a808      	add	r0, sp, #32
   232e4:	f021 ffc0 	bl	45268 <memset>
   232e8:	2308      	movs	r3, #8
   232ea:	f88d 3020 	strb.w	r3, [sp, #32]
			channel_type_str[group->children[ch].channel]);
   232ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   232f2:	012c      	lsls	r4, r5, #4
   232f4:	4423      	add	r3, r4
   232f6:	791b      	ldrb	r3, [r3, #4]
		cJSON *channel_obj = json_object_decode(
   232f8:	4638      	mov	r0, r7
   232fa:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
   232fe:	f01e faff 	bl	41900 <json_object_decode>
		if (channel_obj == NULL) {
   23302:	9005      	str	r0, [sp, #20]
   23304:	b908      	cbnz	r0, 2330a <cloud_decode_command+0x1fa>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   23306:	3501      	adds	r5, #1
   23308:	e7e1      	b.n	232ce <cloud_decode_command+0x1be>
		for (size_t type = 0; type < chan->num_children; ++type) {
   2330a:	2600      	movs	r6, #0
		struct cmd *chan = &group->children[ch];
   2330c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23310:	441c      	add	r4, r3
		found_config_item.channel = chan->channel;
   23312:	7923      	ldrb	r3, [r4, #4]
   23314:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		for (size_t type = 0; type < chan->num_children; ++type) {
   23318:	68e3      	ldr	r3, [r4, #12]
   2331a:	429e      	cmp	r6, r3
   2331c:	d2f3      	bcs.n	23306 <cloud_decode_command+0x1f6>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   2331e:	68a0      	ldr	r0, [r4, #8]
   23320:	aa08      	add	r2, sp, #32
   23322:	9905      	ldr	r1, [sp, #20]
   23324:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   23328:	f7ff fc28 	bl	22b7c <cloud_cmd_parse_type>
			if (ret != 0) {
   2332c:	b1e0      	cbz	r0, 23368 <cloud_decode_command+0x258>
				if (ret != -ENOENT) {
   2332e:	1c82      	adds	r2, r0, #2
   23330:	9007      	str	r0, [sp, #28]
   23332:	d017      	beq.n	23364 <cloud_decode_command+0x254>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   23334:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   23338:	f042 0201 	orr.w	r2, r2, #1
   2333c:	f362 0b07 	bfi	fp, r2, #0, #8
   23340:	7922      	ldrb	r2, [r4, #4]
   23342:	9b06      	ldr	r3, [sp, #24]
   23344:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   23348:	f363 1b8f 	bfi	fp, r3, #6, #10
   2334c:	f01e fe8a 	bl	42064 <log_strdup>
   23350:	9b07      	ldr	r3, [sp, #28]
   23352:	4a2b      	ldr	r2, [pc, #172]	; (23400 <cloud_decode_command+0x2f0>)
   23354:	e9cd 0300 	strd	r0, r3, [sp]
   23358:	492a      	ldr	r1, [pc, #168]	; (23404 <cloud_decode_command+0x2f4>)
   2335a:	f240 33a7 	movw	r3, #935	; 0x3a7
   2335e:	4658      	mov	r0, fp
   23360:	f01e fe6d 	bl	4203e <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   23364:	3601      	adds	r6, #1
   23366:	e7d7      	b.n	23318 <cloud_decode_command+0x208>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   23368:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2336c:	f043 0303 	orr.w	r3, r3, #3
   23370:	f363 0a07 	bfi	sl, r3, #0, #8
   23374:	9b06      	ldr	r3, [sp, #24]
   23376:	f363 1a8f 	bfi	sl, r3, #6, #10
   2337a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   2337e:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
   23382:	f01e fe6f 	bl	42064 <log_strdup>
   23386:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   2338a:	4b1a      	ldr	r3, [pc, #104]	; (233f4 <cloud_decode_command+0x2e4>)
   2338c:	9007      	str	r0, [sp, #28]
   2338e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   23392:	f01e fe67 	bl	42064 <log_strdup>
   23396:	9b07      	ldr	r3, [sp, #28]
   23398:	9001      	str	r0, [sp, #4]
   2339a:	9300      	str	r3, [sp, #0]
   2339c:	4a18      	ldr	r2, [pc, #96]	; (23400 <cloud_decode_command+0x2f0>)
   2339e:	f240 33af 	movw	r3, #943	; 0x3af
   233a2:	4919      	ldr	r1, [pc, #100]	; (23408 <cloud_decode_command+0x2f8>)
   233a4:	4650      	mov	r0, sl
   233a6:	f01e fe4a 	bl	4203e <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   233aa:	a808      	add	r0, sp, #32
   233ac:	f7ff fb94 	bl	22ad8 <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   233b0:	4b12      	ldr	r3, [pc, #72]	; (233fc <cloud_decode_command+0x2ec>)
   233b2:	681b      	ldr	r3, [r3, #0]
   233b4:	2b00      	cmp	r3, #0
   233b6:	d0d5      	beq.n	23364 <cloud_decode_command+0x254>
				cloud_command_cb(&found_config_item);
   233b8:	a808      	add	r0, sp, #32
   233ba:	4798      	blx	r3
   233bc:	e7d2      	b.n	23364 <cloud_decode_command+0x254>
		return -EINVAL;
   233be:	f06f 0015 	mvn.w	r0, #21
   233c2:	e6da      	b.n	2317a <cloud_decode_command+0x6a>
		return -ENOENT;
   233c4:	f06f 0001 	mvn.w	r0, #1
   233c8:	e6d7      	b.n	2317a <cloud_decode_command+0x6a>
   233ca:	bf00      	nop
   233cc:	200205f0 	.word	0x200205f0
   233d0:	00046c04 	.word	0x00046c04
   233d4:	0004e2e6 	.word	0x0004e2e6
   233d8:	0004ea34 	.word	0x0004ea34
   233dc:	20021850 	.word	0x20021850
   233e0:	00046bb0 	.word	0x00046bb0
   233e4:	00046878 	.word	0x00046878
   233e8:	000468b8 	.word	0x000468b8
   233ec:	000487dd 	.word	0x000487dd
   233f0:	00048810 	.word	0x00048810
   233f4:	00046c30 	.word	0x00046c30
   233f8:	00048842 	.word	0x00048842
   233fc:	20024610 	.word	0x20024610
   23400:	000487ee 	.word	0x000487ee
   23404:	00048860 	.word	0x00048860
   23408:	0004888e 	.word	0x0004888e
   2340c:	20020600 	.word	0x20020600

00023410 <cloud_decode_init>:
{
   23410:	b510      	push	{r4, lr}
   23412:	4604      	mov	r4, r0
	cJSON_Init();
   23414:	f005 ffde 	bl	293d4 <cJSON_Init>
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23418:	2200      	movs	r2, #0
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   2341a:	2000      	movs	r0, #0
	cloud_command_cb = cb;
   2341c:	4b08      	ldr	r3, [pc, #32]	; (23440 <cloud_decode_init+0x30>)
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   2341e:	4909      	ldr	r1, [pc, #36]	; (23444 <cloud_decode_init+0x34>)
	cloud_command_cb = cb;
   23420:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23422:	4b09      	ldr	r3, [pc, #36]	; (23448 <cloud_decode_init+0x38>)
   23424:	3201      	adds	r2, #1
   23426:	2a0a      	cmp	r2, #10
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   23428:	e9c3 0102 	strd	r0, r1, [r3, #8]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] =
   2342c:	e9c3 0106 	strd	r0, r1, [r3, #24]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] =
   23430:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
   23434:	f103 0330 	add.w	r3, r3, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23438:	d1f4      	bne.n	23424 <cloud_decode_init+0x14>
}
   2343a:	2000      	movs	r0, #0
   2343c:	bd10      	pop	{r4, pc}
   2343e:	bf00      	nop
   23440:	20024610 	.word	0x20024610
   23444:	bff00000 	.word	0xbff00000
   23448:	20020018 	.word	0x20020018

0002344c <cloud_get_channel_enable_state>:
{
   2344c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2344e:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   23450:	2430      	movs	r4, #48	; 0x30
   23452:	4a09      	ldr	r2, [pc, #36]	; (23478 <cloud_get_channel_enable_state+0x2c>)
   23454:	fb04 f103 	mul.w	r1, r4, r3
   23458:	5c8d      	ldrb	r5, [r1, r2]
   2345a:	4285      	cmp	r5, r0
   2345c:	d106      	bne.n	2346c <cloud_get_channel_enable_state+0x20>
				   [SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE];
   2345e:	440a      	add	r2, r1
   23460:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   23464:	f7f9 fc42 	bl	1ccec <__aeabi_d2iz>
   23468:	b240      	sxtb	r0, r0
}
   2346a:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2346c:	3301      	adds	r3, #1
   2346e:	2b0a      	cmp	r3, #10
   23470:	d1f0      	bne.n	23454 <cloud_get_channel_enable_state+0x8>
	return CLOUD_CMD_STATE_UNDEFINED;
   23472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23476:	e7f8      	b.n	2346a <cloud_get_channel_enable_state+0x1e>
   23478:	20020018 	.word	0x20020018

0002347c <cloud_encode_config_data>:
{
   2347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(output != NULL);
   23480:	4606      	mov	r6, r0
   23482:	b958      	cbnz	r0, 2349c <cloud_encode_config_data+0x20>
   23484:	493a      	ldr	r1, [pc, #232]	; (23570 <cloud_encode_config_data+0xf4>)
   23486:	483b      	ldr	r0, [pc, #236]	; (23574 <cloud_encode_config_data+0xf8>)
   23488:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   2348c:	4a3a      	ldr	r2, [pc, #232]	; (23578 <cloud_encode_config_data+0xfc>)
   2348e:	f01e fbab 	bl	41be8 <printk>
   23492:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   23496:	4838      	ldr	r0, [pc, #224]	; (23578 <cloud_encode_config_data+0xfc>)
   23498:	f01e fdc0 	bl	4201c <assert_post_action>
	cJSON *chan_obj = cJSON_CreateObject();
   2349c:	f005 ff8e 	bl	293bc <cJSON_CreateObject>
   234a0:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   234a2:	f005 ff8b 	bl	293bc <cJSON_CreateObject>
   234a6:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   234a8:	f005 ff88 	bl	293bc <cJSON_CreateObject>
   234ac:	4681      	mov	r9, r0
	cJSON *config_obj = cJSON_CreateObject();
   234ae:	f005 ff85 	bl	293bc <cJSON_CreateObject>
   234b2:	4680      	mov	r8, r0
	cJSON *root_obj = cJSON_CreateObject();
   234b4:	f005 ff82 	bl	293bc <cJSON_CreateObject>
   234b8:	4604      	mov	r4, r0
	if (chan_obj == NULL || state_obj == NULL ||
   234ba:	2d00      	cmp	r5, #0
   234bc:	d043      	beq.n	23546 <cloud_encode_config_data+0xca>
   234be:	f1ba 0f00 	cmp.w	sl, #0
   234c2:	d040      	beq.n	23546 <cloud_encode_config_data+0xca>
   234c4:	f1b9 0f00 	cmp.w	r9, #0
   234c8:	d03d      	beq.n	23546 <cloud_encode_config_data+0xca>
	    reported_obj == NULL || config_obj == NULL ||
   234ca:	f1b8 0f00 	cmp.w	r8, #0
   234ce:	d03a      	beq.n	23546 <cloud_encode_config_data+0xca>
   234d0:	2800      	cmp	r0, #0
   234d2:	d038      	beq.n	23546 <cloud_encode_config_data+0xca>
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   234d4:	2000      	movs	r0, #0
   234d6:	f7ff ffb9 	bl	2344c <cloud_get_channel_enable_state>
	if (gps_state != CLOUD_CMD_STATE_UNDEFINED) {
   234da:	1c42      	adds	r2, r0, #1
   234dc:	d00a      	beq.n	234f4 <cloud_encode_config_data+0x78>
	json_bool = cJSON_CreateBool(value);
   234de:	1e43      	subs	r3, r0, #1
   234e0:	4258      	negs	r0, r3
   234e2:	4158      	adcs	r0, r3
   234e4:	f005 ff36 	bl	29354 <cJSON_CreateBool>
	if (json_bool == NULL) {
   234e8:	4602      	mov	r2, r0
   234ea:	b360      	cbz	r0, 23546 <cloud_encode_config_data+0xca>
	cJSON_AddItemToObject(parent, str, item);
   234ec:	4923      	ldr	r1, [pc, #140]	; (2357c <cloud_encode_config_data+0x100>)
   234ee:	4628      	mov	r0, r5
   234f0:	f020 fd7f 	bl	43ff2 <cJSON_AddItemToObject>
	if (cJSON_GetArraySize(chan_obj) == 0) {
   234f4:	4628      	mov	r0, r5
   234f6:	f020 fd68 	bl	43fca <cJSON_GetArraySize>
   234fa:	4607      	mov	r7, r0
   234fc:	b328      	cbz	r0, 2354a <cloud_encode_config_data+0xce>
	cJSON_AddItemToObject(config_obj, channel_type_str[CLOUD_CHANNEL_GPS],
   234fe:	462a      	mov	r2, r5
   23500:	491f      	ldr	r1, [pc, #124]	; (23580 <cloud_encode_config_data+0x104>)
   23502:	4640      	mov	r0, r8
   23504:	f020 fd75 	bl	43ff2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(reported_obj, "config", config_obj);
   23508:	4642      	mov	r2, r8
   2350a:	491e      	ldr	r1, [pc, #120]	; (23584 <cloud_encode_config_data+0x108>)
   2350c:	4648      	mov	r0, r9
   2350e:	f020 fd70 	bl	43ff2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(state_obj, "reported", reported_obj);
   23512:	464a      	mov	r2, r9
   23514:	491c      	ldr	r1, [pc, #112]	; (23588 <cloud_encode_config_data+0x10c>)
   23516:	4650      	mov	r0, sl
   23518:	f020 fd6b 	bl	43ff2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root_obj, "state", state_obj);
   2351c:	4652      	mov	r2, sl
   2351e:	491b      	ldr	r1, [pc, #108]	; (2358c <cloud_encode_config_data+0x110>)
   23520:	4620      	mov	r0, r4
   23522:	f020 fd66 	bl	43ff2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   23526:	4620      	mov	r0, r4
   23528:	f020 fd4c 	bl	43fc4 <cJSON_PrintUnformatted>
   2352c:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2352e:	4620      	mov	r0, r4
   23530:	f005 fe70 	bl	29214 <cJSON_Delete>
	output->buf = buffer;
   23534:	6035      	str	r5, [r6, #0]
	output->len = strlen(buffer);
   23536:	4628      	mov	r0, r5
   23538:	f7f9 fe94 	bl	1d264 <strlen>
	return 0;
   2353c:	2700      	movs	r7, #0
	output->len = strlen(buffer);
   2353e:	6070      	str	r0, [r6, #4]
}
   23540:	4638      	mov	r0, r7
   23542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = -ENOMEM;
   23546:	f06f 070b 	mvn.w	r7, #11
	output->buf = NULL;
   2354a:	2300      	movs	r3, #0
	cJSON_Delete(chan_obj);
   2354c:	4628      	mov	r0, r5
	output->len = 0;
   2354e:	e9c6 3300 	strd	r3, r3, [r6]
	cJSON_Delete(chan_obj);
   23552:	f005 fe5f 	bl	29214 <cJSON_Delete>
	cJSON_Delete(state_obj);
   23556:	4650      	mov	r0, sl
   23558:	f005 fe5c 	bl	29214 <cJSON_Delete>
	cJSON_Delete(reported_obj);
   2355c:	4648      	mov	r0, r9
   2355e:	f005 fe59 	bl	29214 <cJSON_Delete>
	cJSON_Delete(config_obj);
   23562:	4640      	mov	r0, r8
   23564:	f005 fe56 	bl	29214 <cJSON_Delete>
	cJSON_Delete(root_obj);
   23568:	4620      	mov	r0, r4
   2356a:	f005 fe53 	bl	29214 <cJSON_Delete>
	return ret;
   2356e:	e7e7      	b.n	23540 <cloud_encode_config_data+0xc4>
   23570:	000489c2 	.word	0x000489c2
   23574:	0004825b 	.word	0x0004825b
   23578:	0004895e 	.word	0x0004895e
   2357c:	000488ad 	.word	0x000488ad
   23580:	0004e6f0 	.word	0x0004e6f0
   23584:	0004ea34 	.word	0x0004ea34
   23588:	0004894e 	.word	0x0004894e
   2358c:	0004e2e6 	.word	0x0004e2e6

00023590 <cloud_set_channel_enable_state>:
{
   23590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23592:	4606      	mov	r6, r0
   23594:	460f      	mov	r7, r1
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23596:	2500      	movs	r5, #0
   23598:	4c07      	ldr	r4, [pc, #28]	; (235b8 <cloud_set_channel_enable_state+0x28>)
		if (sensor_cfg[i].chan == channel) {
   2359a:	7823      	ldrb	r3, [r4, #0]
   2359c:	42b3      	cmp	r3, r6
   2359e:	d104      	bne.n	235aa <cloud_set_channel_enable_state+0x1a>
				[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] = state;
   235a0:	4638      	mov	r0, r7
   235a2:	f7f9 f89f 	bl	1c6e4 <__aeabi_i2d>
   235a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   235aa:	3501      	adds	r5, #1
   235ac:	2d0a      	cmp	r5, #10
   235ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   235b2:	d1f2      	bne.n	2359a <cloud_set_channel_enable_state+0xa>
}
   235b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235b6:	bf00      	nop
   235b8:	20020018 	.word	0x20020018

000235bc <cloud_is_send_allowed>:
{
   235bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   235c0:	4c23      	ldr	r4, [pc, #140]	; (23650 <cloud_is_send_allowed+0x94>)
{
   235c2:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   235c6:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   235c8:	2230      	movs	r2, #48	; 0x30
   235ca:	46a2      	mov	sl, r4
   235cc:	fb02 f305 	mul.w	r3, r2, r5
   235d0:	5d19      	ldrb	r1, [r3, r4]
   235d2:	4281      	cmp	r1, r0
   235d4:	d12a      	bne.n	2362c <cloud_is_send_allowed+0x70>
	    (cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] ==
   235d6:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   235d8:	2200      	movs	r2, #0
   235da:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   235de:	2300      	movs	r3, #0
   235e0:	f7f9 fb52 	bl	1cc88 <__aeabi_dcmpeq>
   235e4:	bb28      	cbnz	r0, 23632 <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] ==
   235e6:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   235ea:	2200      	movs	r2, #0
   235ec:	4b19      	ldr	r3, [pc, #100]	; (23654 <cloud_is_send_allowed+0x98>)
   235ee:	4640      	mov	r0, r8
   235f0:	4649      	mov	r1, r9
   235f2:	f7f9 fb49 	bl	1cc88 <__aeabi_dcmpeq>
   235f6:	b130      	cbz	r0, 23606 <cloud_is_send_allowed+0x4a>
		CLOUD_CMD_STATE_TRUE) &&
   235f8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   235fc:	4630      	mov	r0, r6
   235fe:	4639      	mov	r1, r7
   23600:	f7f9 fb4c 	bl	1cc9c <__aeabi_dcmplt>
   23604:	b9b8      	cbnz	r0, 23636 <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] ==
   23606:	2330      	movs	r3, #48	; 0x30
   23608:	fb03 a505 	mla	r5, r3, r5, sl
   2360c:	2200      	movs	r2, #0
   2360e:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   23612:	4b10      	ldr	r3, [pc, #64]	; (23654 <cloud_is_send_allowed+0x98>)
   23614:	f7f9 fb38 	bl	1cc88 <__aeabi_dcmpeq>
   23618:	b178      	cbz	r0, 2363a <cloud_is_send_allowed+0x7e>
		CLOUD_CMD_STATE_TRUE) &&
   2361a:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   2361e:	4630      	mov	r0, r6
   23620:	4639      	mov	r1, r7
   23622:	f7f9 fb59 	bl	1ccd8 <__aeabi_dcmpgt>
   23626:	b930      	cbnz	r0, 23636 <cloud_is_send_allowed+0x7a>
}
   23628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2362c:	3501      	adds	r5, #1
   2362e:	2d0a      	cmp	r5, #10
   23630:	d1cc      	bne.n	235cc <cloud_is_send_allowed+0x10>
		return false;
   23632:	2000      	movs	r0, #0
   23634:	e7f8      	b.n	23628 <cloud_is_send_allowed+0x6c>
		return true;
   23636:	2001      	movs	r0, #1
   23638:	e7f6      	b.n	23628 <cloud_is_send_allowed+0x6c>
			!= CLOUD_CMD_STATE_TRUE) &&
   2363a:	2200      	movs	r2, #0
   2363c:	4b05      	ldr	r3, [pc, #20]	; (23654 <cloud_is_send_allowed+0x98>)
   2363e:	4640      	mov	r0, r8
   23640:	4649      	mov	r1, r9
   23642:	f7f9 fb21 	bl	1cc88 <__aeabi_dcmpeq>
   23646:	fab0 f080 	clz	r0, r0
   2364a:	0940      	lsrs	r0, r0, #5
   2364c:	e7ec      	b.n	23628 <cloud_is_send_allowed+0x6c>
   2364e:	bf00      	nop
   23650:	20020018 	.word	0x20020018
   23654:	3ff00000 	.word	0x3ff00000

00023658 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const uint32_t ui_count, const char * const fota[],
	const uint32_t fota_count, const uint16_t fota_version, cJSON * const obj_out)
{
   23658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2365c:	b086      	sub	sp, #24
   2365e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   23660:	4604      	mov	r4, r0
   23662:	468a      	mov	sl, r1
   23664:	4690      	mov	r8, r2
   23666:	4699      	mov	r9, r3
   23668:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   2366c:	2f00      	cmp	r7, #0
   2366e:	d041      	beq.n	236f4 <service_info_json_object_encode+0x9c>
   23670:	b908      	cbnz	r0, 23676 <service_info_json_object_encode+0x1e>
   23672:	2900      	cmp	r1, #0
   23674:	d13e      	bne.n	236f4 <service_info_json_object_encode+0x9c>
   23676:	f1b8 0f00 	cmp.w	r8, #0
   2367a:	d102      	bne.n	23682 <service_info_json_object_encode+0x2a>
	    ((fota == NULL) && fota_count)) {
   2367c:	f1b9 0f00 	cmp.w	r9, #0
   23680:	d138      	bne.n	236f4 <service_info_json_object_encode+0x9c>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   23682:	f005 fe9b 	bl	293bc <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   23686:	4605      	mov	r5, r0
   23688:	2800      	cmp	r0, #0
   2368a:	d036      	beq.n	236fa <service_info_json_object_encode+0xa2>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   2368c:	4603      	mov	r3, r0
   2368e:	4a1c      	ldr	r2, [pc, #112]	; (23700 <service_info_json_object_encode+0xa8>)
   23690:	4620      	mov	r0, r4
   23692:	4651      	mov	r1, sl
   23694:	f01e f938 	bl	41908 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   23698:	4604      	mov	r4, r0
   2369a:	bb38      	cbnz	r0, 236ec <service_info_json_object_encode+0x94>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   2369c:	210c      	movs	r1, #12
   2369e:	4b19      	ldr	r3, [pc, #100]	; (23704 <service_info_json_object_encode+0xac>)
   236a0:	4a19      	ldr	r2, [pc, #100]	; (23708 <service_info_json_object_encode+0xb0>)
   236a2:	eb0d 0001 	add.w	r0, sp, r1
   236a6:	9600      	str	r6, [sp, #0]
   236a8:	f01c fdc8 	bl	4023c <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   236ac:	462b      	mov	r3, r5
   236ae:	aa03      	add	r2, sp, #12
   236b0:	4649      	mov	r1, r9
   236b2:	4640      	mov	r0, r8
   236b4:	f01e f928 	bl	41908 <add_array_obj>
				    service_info_obj);
		if (fota_version > 1) {
   236b8:	2e01      	cmp	r6, #1
		err = add_array_obj(fota, fota_count, fota_name,
   236ba:	4604      	mov	r4, r0
		if (fota_version > 1) {
   236bc:	d90c      	bls.n	236d8 <service_info_json_object_encode+0x80>
			/* Clear previous fota version in the shadow */
			snprintf(fota_name, sizeof(fota_name), "%s%hu",
   236be:	210c      	movs	r1, #12
   236c0:	3e01      	subs	r6, #1
   236c2:	eb0d 0001 	add.w	r0, sp, r1
   236c6:	9600      	str	r6, [sp, #0]
   236c8:	4b0e      	ldr	r3, [pc, #56]	; (23704 <service_info_json_object_encode+0xac>)
   236ca:	4a0f      	ldr	r2, [pc, #60]	; (23708 <service_info_json_object_encode+0xb0>)
   236cc:	f01c fdb6 	bl	4023c <sniprintf>
				 FOTAS_JSON_NAME, fota_version-1);
			cJSON_AddNullToObject(service_info_obj,fota_name);
   236d0:	a903      	add	r1, sp, #12
   236d2:	4628      	mov	r0, r5
   236d4:	f020 fcae 	bl	44034 <cJSON_AddNullToObject>
		}
	}

	if (!err) {
   236d8:	b944      	cbnz	r4, 236ec <service_info_json_object_encode+0x94>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   236da:	462a      	mov	r2, r5
   236dc:	490b      	ldr	r1, [pc, #44]	; (2370c <service_info_json_object_encode+0xb4>)
   236de:	4638      	mov	r0, r7
   236e0:	f020 fc87 	bl	43ff2 <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   236e4:	4620      	mov	r0, r4
   236e6:	b006      	add	sp, #24
   236e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cJSON_Delete(service_info_obj);
   236ec:	4628      	mov	r0, r5
   236ee:	f005 fd91 	bl	29214 <cJSON_Delete>
   236f2:	e7f7      	b.n	236e4 <service_info_json_object_encode+0x8c>
		return -EINVAL;
   236f4:	f06f 0415 	mvn.w	r4, #21
   236f8:	e7f4      	b.n	236e4 <service_info_json_object_encode+0x8c>
		return -ENOMEM;
   236fa:	f06f 040b 	mvn.w	r4, #11
   236fe:	e7f1      	b.n	236e4 <service_info_json_object_encode+0x8c>
   23700:	0004875d 	.word	0x0004875d
   23704:	00048abe 	.word	0x00048abe
   23708:	00048ac5 	.word	0x00048ac5
   2370c:	00048acb 	.word	0x00048acb

00023710 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23710:	4b03      	ldr	r3, [pc, #12]	; (23720 <gps_control_is_enabled+0x10>)
   23712:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
   23716:	3000      	adds	r0, #0
   23718:	bf18      	it	ne
   2371a:	2001      	movne	r0, #1
   2371c:	4770      	bx	lr
   2371e:	bf00      	nop
   23720:	20024620 	.word	0x20024620

00023724 <gps_control_is_active>:
   23724:	4b03      	ldr	r3, [pc, #12]	; (23734 <gps_control_is_active+0x10>)
   23726:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
   2372a:	3000      	adds	r0, #0
   2372c:	bf18      	it	ne
   2372e:	2001      	movne	r0, #1
   23730:	4770      	bx	lr
   23732:	bf00      	nop
   23734:	2002461c 	.word	0x2002461c

00023738 <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23738:	4b05      	ldr	r3, [pc, #20]	; (23750 <gps_control_set_active+0x18>)
   2373a:	e8d3 2fef 	ldaex	r2, [r3]
   2373e:	e8c3 0fe1 	stlex	r1, r0, [r3]
   23742:	2900      	cmp	r1, #0
   23744:	d1f9      	bne.n	2373a <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
   23746:	1c10      	adds	r0, r2, #0
   23748:	bf18      	it	ne
   2374a:	2001      	movne	r0, #1
   2374c:	4770      	bx	lr
   2374e:	bf00      	nop
   23750:	2002461c 	.word	0x2002461c

00023754 <stop>:
	if (gps_dev == NULL) {
   23754:	4b1d      	ldr	r3, [pc, #116]	; (237cc <stop+0x78>)
{
   23756:	b510      	push	{r4, lr}
	if (gps_dev == NULL) {
   23758:	6818      	ldr	r0, [r3, #0]
   2375a:	4c1d      	ldr	r4, [pc, #116]	; (237d0 <stop+0x7c>)
   2375c:	4b1d      	ldr	r3, [pc, #116]	; (237d4 <stop+0x80>)
   2375e:	1ae4      	subs	r4, r4, r3
   23760:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   23764:	b948      	cbnz	r0, 2377a <stop+0x26>
		LOG_ERR("GPS controller is not initialized");
   23766:	2301      	movs	r3, #1
   23768:	491b      	ldr	r1, [pc, #108]	; (237d8 <stop+0x84>)
   2376a:	f363 0007 	bfi	r0, r3, #0, #8
   2376e:	f364 108f 	bfi	r0, r4, #6, #10
}
   23772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	LOG_INF("GPS operation was stopped");
   23776:	f01e bc62 	b.w	4203e <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->stop == NULL) {
   2377a:	6883      	ldr	r3, [r0, #8]
   2377c:	685b      	ldr	r3, [r3, #4]
   2377e:	b173      	cbz	r3, 2379e <stop+0x4a>
		return -ENOTSUP;
	}

	return api->stop(dev);
   23780:	4798      	blx	r3
	if (err) {
   23782:	4602      	mov	r2, r0
   23784:	b170      	cbz	r0, 237a4 <stop+0x50>
		LOG_ERR("Failed to disable GPS, error: %d", err);
   23786:	f04f 0000 	mov.w	r0, #0
   2378a:	2301      	movs	r3, #1
   2378c:	f363 0007 	bfi	r0, r3, #0, #8
   23790:	f364 108f 	bfi	r0, r4, #6, #10
   23794:	4911      	ldr	r1, [pc, #68]	; (237dc <stop+0x88>)
}
   23796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
   2379a:	f01e bc50 	b.w	4203e <log_string_sync>
		return -ENOTSUP;
   2379e:	f06f 0285 	mvn.w	r2, #133	; 0x85
   237a2:	e7f0      	b.n	23786 <stop+0x32>
   237a4:	4b0e      	ldr	r3, [pc, #56]	; (237e0 <stop+0x8c>)
   237a6:	e8d3 1fef 	ldaex	r1, [r3]
   237aa:	e8c3 2fec 	stlex	ip, r2, [r3]
   237ae:	f1bc 0f00 	cmp.w	ip, #0
   237b2:	d1f8      	bne.n	237a6 <stop+0x52>
	gps_control_set_active(false);
   237b4:	f7ff ffc0 	bl	23738 <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
   237b8:	f04f 0000 	mov.w	r0, #0
   237bc:	2303      	movs	r3, #3
   237be:	f363 0007 	bfi	r0, r3, #0, #8
   237c2:	f364 108f 	bfi	r0, r4, #6, #10
   237c6:	4907      	ldr	r1, [pc, #28]	; (237e4 <stop+0x90>)
   237c8:	e7d3      	b.n	23772 <stop+0x1e>
   237ca:	bf00      	nop
   237cc:	20024618 	.word	0x20024618
   237d0:	000468f8 	.word	0x000468f8
   237d4:	00046878 	.word	0x00046878
   237d8:	00048c72 	.word	0x00048c72
   237dc:	00048c94 	.word	0x00048c94
   237e0:	20024620 	.word	0x20024620
   237e4:	00048cb5 	.word	0x00048cb5

000237e8 <start>:
{
   237e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   237ea:	b085      	sub	sp, #20
	struct gps_config gps_cfg = {
   237ec:	2210      	movs	r2, #16
   237ee:	2100      	movs	r1, #0
   237f0:	4668      	mov	r0, sp
   237f2:	f021 fd39 	bl	45268 <memset>
   237f6:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   237f8:	4d48      	ldr	r5, [pc, #288]	; (2391c <start+0x134>)
	struct gps_config gps_cfg = {
   237fa:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   237fe:	682b      	ldr	r3, [r5, #0]
	struct gps_config gps_cfg = {
   23800:	2601      	movs	r6, #1
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   23802:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
   23806:	9301      	str	r3, [sp, #4]
   23808:	f44f 73b4 	mov.w	r3, #360	; 0x168
	if (gps_dev == NULL) {
   2380c:	4f44      	ldr	r7, [pc, #272]	; (23920 <start+0x138>)
	struct gps_config gps_cfg = {
   2380e:	9302      	str	r3, [sp, #8]
   23810:	4c44      	ldr	r4, [pc, #272]	; (23924 <start+0x13c>)
   23812:	4b45      	ldr	r3, [pc, #276]	; (23928 <start+0x140>)
	if (gps_dev == NULL) {
   23814:	683a      	ldr	r2, [r7, #0]
   23816:	1ae4      	subs	r4, r4, r3
	struct gps_config gps_cfg = {
   23818:	f88d 600d 	strb.w	r6, [sp, #13]
	if (gps_dev == NULL) {
   2381c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_ERR("GPS controller is not initialized properly");
   23820:	f04f 0000 	mov.w	r0, #0
	if (gps_dev == NULL) {
   23824:	b942      	cbnz	r2, 23838 <start+0x50>
		LOG_ERR("GPS controller is not initialized properly");
   23826:	f366 0007 	bfi	r0, r6, #0, #8
   2382a:	f364 108f 	bfi	r0, r4, #6, #10
   2382e:	493f      	ldr	r1, [pc, #252]	; (2392c <start+0x144>)
   23830:	f01e fc05 	bl	4203e <log_string_sync>
}
   23834:	b005      	add	sp, #20
   23836:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Enabling PSM");
   23838:	2303      	movs	r3, #3
   2383a:	f363 0007 	bfi	r0, r3, #0, #8
   2383e:	f364 108f 	bfi	r0, r4, #6, #10
   23842:	493b      	ldr	r1, [pc, #236]	; (23930 <start+0x148>)
   23844:	f01e fbfb 	bl	4203e <log_string_sync>
	err = lte_lc_psm_req(true);
   23848:	4630      	mov	r0, r6
   2384a:	f008 f8bd 	bl	2b9c8 <lte_lc_psm_req>
	if (err) {
   2384e:	4602      	mov	r2, r0
		LOG_ERR("PSM request failed, error: %d", err);
   23850:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23854:	b1da      	cbz	r2, 2388e <start+0xa6>
		LOG_ERR("PSM request failed, error: %d", err);
   23856:	2101      	movs	r1, #1
   23858:	f361 0007 	bfi	r0, r1, #0, #8
   2385c:	f364 108f 	bfi	r0, r4, #6, #10
   23860:	4934      	ldr	r1, [pc, #208]	; (23934 <start+0x14c>)
   23862:	f01e fbec 	bl	4203e <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
   23866:	6838      	ldr	r0, [r7, #0]
	if ((dev == NULL) || (cfg == NULL)) {
   23868:	b1d0      	cbz	r0, 238a0 <start+0xb8>
	if (api->start == NULL) {
   2386a:	6883      	ldr	r3, [r0, #8]
   2386c:	681b      	ldr	r3, [r3, #0]
   2386e:	b1d3      	cbz	r3, 238a6 <start+0xbe>
	return api->start(dev, cfg);
   23870:	4669      	mov	r1, sp
   23872:	4798      	blx	r3
	if (err) {
   23874:	4602      	mov	r2, r0
   23876:	b1c8      	cbz	r0, 238ac <start+0xc4>
		LOG_ERR("Failed to enable GPS, error: %d", err);
   23878:	f04f 0000 	mov.w	r0, #0
   2387c:	2301      	movs	r3, #1
   2387e:	492e      	ldr	r1, [pc, #184]	; (23938 <start+0x150>)
   23880:	f363 0007 	bfi	r0, r3, #0, #8
   23884:	f364 108f 	bfi	r0, r4, #6, #10
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   23888:	f01e fbd9 	bl	4203e <log_string_sync>
   2388c:	e7d2      	b.n	23834 <start+0x4c>
		LOG_INF("PSM enabled");
   2388e:	2303      	movs	r3, #3
   23890:	f363 0007 	bfi	r0, r3, #0, #8
   23894:	f364 108f 	bfi	r0, r4, #6, #10
   23898:	4928      	ldr	r1, [pc, #160]	; (2393c <start+0x154>)
   2389a:	f01e fbd0 	bl	4203e <log_string_sync>
   2389e:	e7e2      	b.n	23866 <start+0x7e>
		return -EINVAL;
   238a0:	f06f 0215 	mvn.w	r2, #21
   238a4:	e7e8      	b.n	23878 <start+0x90>
		return -ENOTSUP;
   238a6:	f06f 0285 	mvn.w	r2, #133	; 0x85
   238aa:	e7e5      	b.n	23878 <start+0x90>
   238ac:	2001      	movs	r0, #1
   238ae:	4b24      	ldr	r3, [pc, #144]	; (23940 <start+0x158>)
   238b0:	e8d3 2fef 	ldaex	r2, [r3]
   238b4:	e8c3 0fe1 	stlex	r1, r0, [r3]
   238b8:	2900      	cmp	r1, #0
   238ba:	d1f9      	bne.n	238b0 <start+0xc8>
	gps_control_set_active(true);
   238bc:	f7ff ff3c 	bl	23738 <gps_control_set_active>
	ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   238c0:	2008      	movs	r0, #8
   238c2:	f7ff f887 	bl	229d4 <ui_led_set_pattern>
	LOG_INF("GPS started successfully. Searching for satellites ");
   238c6:	2303      	movs	r3, #3
   238c8:	f04f 0000 	mov.w	r0, #0
   238cc:	f363 0007 	bfi	r0, r3, #0, #8
   238d0:	f364 108f 	bfi	r0, r4, #6, #10
   238d4:	491b      	ldr	r1, [pc, #108]	; (23944 <start+0x15c>)
   238d6:	f01e fbb2 	bl	4203e <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   238da:	2303      	movs	r3, #3
   238dc:	f04f 0000 	mov.w	r0, #0
   238e0:	f363 0007 	bfi	r0, r3, #0, #8
   238e4:	f364 108f 	bfi	r0, r4, #6, #10
   238e8:	4917      	ldr	r1, [pc, #92]	; (23948 <start+0x160>)
   238ea:	f01e fba8 	bl	4203e <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   238ee:	2303      	movs	r3, #3
   238f0:	f04f 0000 	mov.w	r0, #0
   238f4:	f363 0007 	bfi	r0, r3, #0, #8
   238f8:	f364 108f 	bfi	r0, r4, #6, #10
   238fc:	f44f 72b4 	mov.w	r2, #360	; 0x168
   23900:	4912      	ldr	r1, [pc, #72]	; (2394c <start+0x164>)
   23902:	f01e fb9c 	bl	4203e <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   23906:	f04f 0000 	mov.w	r0, #0
   2390a:	2303      	movs	r3, #3
   2390c:	f363 0007 	bfi	r0, r3, #0, #8
   23910:	f364 108f 	bfi	r0, r4, #6, #10
   23914:	682a      	ldr	r2, [r5, #0]
   23916:	490e      	ldr	r1, [pc, #56]	; (23950 <start+0x168>)
   23918:	e7b6      	b.n	23888 <start+0xa0>
   2391a:	bf00      	nop
   2391c:	20024624 	.word	0x20024624
   23920:	20024618 	.word	0x20024618
   23924:	000468f8 	.word	0x000468f8
   23928:	00046878 	.word	0x00046878
   2392c:	00048b17 	.word	0x00048b17
   23930:	00048b42 	.word	0x00048b42
   23934:	00048b4f 	.word	0x00048b4f
   23938:	00048b79 	.word	0x00048b79
   2393c:	00048b6d 	.word	0x00048b6d
   23940:	20024620 	.word	0x20024620
   23944:	00048b99 	.word	0x00048b99
   23948:	00048bcd 	.word	0x00048bcd
   2394c:	00048c01 	.word	0x00048c01
   23950:	00048c37 	.word	0x00048c37

00023954 <gps_control_start>:

void gps_control_start(uint32_t delay_ms)
{
   23954:	b5d0      	push	{r4, r6, r7, lr}
   23956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2395a:	f240 36e7 	movw	r6, #999	; 0x3e7
   2395e:	2700      	movs	r7, #0
   23960:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   23964:	4b08      	ldr	r3, [pc, #32]	; (23988 <gps_control_start+0x34>)
   23966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2396a:	681c      	ldr	r4, [r3, #0]
   2396c:	4630      	mov	r0, r6
   2396e:	2300      	movs	r3, #0
   23970:	4639      	mov	r1, r7
   23972:	f7f9 faa3 	bl	1cebc <__aeabi_uldivmod>
   23976:	4602      	mov	r2, r0
   23978:	460b      	mov	r3, r1
   2397a:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   2397c:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   23980:	4902      	ldr	r1, [pc, #8]	; (2398c <gps_control_start+0x38>)
   23982:	f01a beab 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   23986:	bf00      	nop
   23988:	20024614 	.word	0x20024614
   2398c:	20021868 	.word	0x20021868

00023990 <gps_control_stop>:

void gps_control_stop(uint32_t delay_ms)
{
   23990:	b5d0      	push	{r4, r6, r7, lr}
   23992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   23996:	f240 36e7 	movw	r6, #999	; 0x3e7
   2399a:	2700      	movs	r7, #0
   2399c:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   239a0:	4b08      	ldr	r3, [pc, #32]	; (239c4 <gps_control_stop+0x34>)
   239a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   239a6:	681c      	ldr	r4, [r3, #0]
   239a8:	4630      	mov	r0, r6
   239aa:	2300      	movs	r3, #0
   239ac:	4639      	mov	r1, r7
   239ae:	f7f9 fa85 	bl	1cebc <__aeabi_uldivmod>
   239b2:	4602      	mov	r2, r0
   239b4:	460b      	mov	r3, r1
   239b6:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   239b8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   239bc:	4902      	ldr	r1, [pc, #8]	; (239c8 <gps_control_stop+0x38>)
   239be:	f01a be8d 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   239c2:	bf00      	nop
   239c4:	20024614 	.word	0x20024614
   239c8:	20021898 	.word	0x20021898

000239cc <gps_control_get_gps_reporting_interval>:

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
   239cc:	4b01      	ldr	r3, [pc, #4]	; (239d4 <gps_control_get_gps_reporting_interval+0x8>)
   239ce:	6818      	ldr	r0, [r3, #0]
   239d0:	4770      	bx	lr
   239d2:	bf00      	nop
   239d4:	20024624 	.word	0x20024624

000239d8 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
   239d8:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
   239da:	4e2e      	ldr	r6, [pc, #184]	; (23a94 <gps_control_init+0xbc>)
{
   239dc:	460c      	mov	r4, r1
	if (is_init) {
   239de:	7833      	ldrb	r3, [r6, #0]
   239e0:	2b00      	cmp	r3, #0
   239e2:	d151      	bne.n	23a88 <gps_control_init+0xb0>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
   239e4:	2800      	cmp	r0, #0
   239e6:	d052      	beq.n	23a8e <gps_control_init+0xb6>
   239e8:	2900      	cmp	r1, #0
   239ea:	d050      	beq.n	23a8e <gps_control_init+0xb6>
		return -EINVAL;
	}

	app_work_q = work_q;
   239ec:	4b2a      	ldr	r3, [pc, #168]	; (23a98 <gps_control_init+0xc0>)
   239ee:	6018      	str	r0, [r3, #0]
   239f0:	482a      	ldr	r0, [pc, #168]	; (23a9c <gps_control_init+0xc4>)
   239f2:	f018 fba7 	bl	3c144 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   239f6:	4a2a      	ldr	r2, [pc, #168]	; (23aa0 <gps_control_init+0xc8>)
   239f8:	4d2a      	ldr	r5, [pc, #168]	; (23aa4 <gps_control_init+0xcc>)
   239fa:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
   239fc:	4a2a      	ldr	r2, [pc, #168]	; (23aa8 <gps_control_init+0xd0>)
   239fe:	1aad      	subs	r5, r5, r2
   23a00:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   23a04:	b990      	cbnz	r0, 23a2c <gps_control_init+0x54>
		LOG_ERR("Could not get %s device",
   23a06:	2301      	movs	r3, #1
   23a08:	f04f 0400 	mov.w	r4, #0
   23a0c:	4823      	ldr	r0, [pc, #140]	; (23a9c <gps_control_init+0xc4>)
   23a0e:	f363 0407 	bfi	r4, r3, #0, #8
   23a12:	f01e fb27 	bl	42064 <log_strdup>
   23a16:	f365 148f 	bfi	r4, r5, #6, #10
   23a1a:	4602      	mov	r2, r0
   23a1c:	4923      	ldr	r1, [pc, #140]	; (23aac <gps_control_init+0xd4>)
   23a1e:	4620      	mov	r0, r4
   23a20:	f01e fb0d 	bl	4203e <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   23a24:	f06f 0412 	mvn.w	r4, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
   23a28:	4620      	mov	r0, r4
   23a2a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->init == NULL) {
   23a2c:	6883      	ldr	r3, [r0, #8]
   23a2e:	68db      	ldr	r3, [r3, #12]
   23a30:	b17b      	cbz	r3, 23a52 <gps_control_init+0x7a>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   23a32:	4621      	mov	r1, r4
   23a34:	4798      	blx	r3
	if (err) {
   23a36:	4604      	mov	r4, r0
   23a38:	b170      	cbz	r0, 23a58 <gps_control_init+0x80>
		LOG_ERR("Could not initialize GPS, error: %d", err);
   23a3a:	2301      	movs	r3, #1
   23a3c:	f04f 0000 	mov.w	r0, #0
   23a40:	f363 0007 	bfi	r0, r3, #0, #8
   23a44:	f365 108f 	bfi	r0, r5, #6, #10
   23a48:	4622      	mov	r2, r4
   23a4a:	4919      	ldr	r1, [pc, #100]	; (23ab0 <gps_control_init+0xd8>)
   23a4c:	f01e faf7 	bl	4203e <log_string_sync>
		return err;
   23a50:	e7ea      	b.n	23a28 <gps_control_init+0x50>
		return -ENOTSUP;
   23a52:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23a56:	e7f0      	b.n	23a3a <gps_control_init+0x62>
	k_delayed_work_init(&start_work, start);
   23a58:	4916      	ldr	r1, [pc, #88]	; (23ab4 <gps_control_init+0xdc>)
   23a5a:	4817      	ldr	r0, [pc, #92]	; (23ab8 <gps_control_init+0xe0>)
   23a5c:	f021 fb03 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
   23a60:	4916      	ldr	r1, [pc, #88]	; (23abc <gps_control_init+0xe4>)
   23a62:	4817      	ldr	r0, [pc, #92]	; (23ac0 <gps_control_init+0xe8>)
   23a64:	f021 faff 	bl	45066 <k_delayed_work_init>
	gps_reporting_interval_seconds =
   23a68:	221e      	movs	r2, #30
   23a6a:	4b16      	ldr	r3, [pc, #88]	; (23ac4 <gps_control_init+0xec>)
	LOG_INF("GPS initialized");
   23a6c:	f04f 0000 	mov.w	r0, #0
	gps_reporting_interval_seconds =
   23a70:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
   23a72:	2303      	movs	r3, #3
   23a74:	f363 0007 	bfi	r0, r3, #0, #8
   23a78:	f365 108f 	bfi	r0, r5, #6, #10
   23a7c:	4912      	ldr	r1, [pc, #72]	; (23ac8 <gps_control_init+0xf0>)
   23a7e:	f01e fade 	bl	4203e <log_string_sync>
	is_init = true;
   23a82:	2301      	movs	r3, #1
   23a84:	7033      	strb	r3, [r6, #0]
	return err;
   23a86:	e7cf      	b.n	23a28 <gps_control_init+0x50>
		return -EALREADY;
   23a88:	f06f 0477 	mvn.w	r4, #119	; 0x77
   23a8c:	e7cc      	b.n	23a28 <gps_control_init+0x50>
		return -EINVAL;
   23a8e:	f06f 0415 	mvn.w	r4, #21
   23a92:	e7c9      	b.n	23a28 <gps_control_init+0x50>
   23a94:	2002ae7e 	.word	0x2002ae7e
   23a98:	20024614 	.word	0x20024614
   23a9c:	00048ad7 	.word	0x00048ad7
   23aa0:	20024618 	.word	0x20024618
   23aa4:	000468f8 	.word	0x000468f8
   23aa8:	00046878 	.word	0x00046878
   23aac:	00048709 	.word	0x00048709
   23ab0:	00048ae3 	.word	0x00048ae3
   23ab4:	000237e9 	.word	0x000237e9
   23ab8:	20021868 	.word	0x20021868
   23abc:	00023755 	.word	0x00023755
   23ac0:	20021898 	.word	0x20021898
   23ac4:	20024624 	.word	0x20024624
   23ac8:	00048b07 	.word	0x00048b07

00023acc <submit_poll_work>:
					      K_SECONDS((uint32_t)delay_s));
   23acc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
   23ad0:	b5d0      	push	{r4, r6, r7, lr}
					      K_SECONDS((uint32_t)delay_s));
   23ad2:	4341      	muls	r1, r0
   23ad4:	f240 36e7 	movw	r6, #999	; 0x3e7
   23ad8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   23adc:	2700      	movs	r7, #0
   23ade:	fbe0 6701 	umlal	r6, r7, r0, r1
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   23ae2:	4b08      	ldr	r3, [pc, #32]	; (23b04 <submit_poll_work+0x38>)
   23ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23ae8:	681c      	ldr	r4, [r3, #0]
   23aea:	4630      	mov	r0, r6
   23aec:	2300      	movs	r3, #0
   23aee:	4639      	mov	r1, r7
   23af0:	f7f9 f9e4 	bl	1cebc <__aeabi_uldivmod>
   23af4:	4602      	mov	r2, r0
   23af6:	460b      	mov	r3, r1
   23af8:	4620      	mov	r0, r4
}
   23afa:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   23afe:	4902      	ldr	r1, [pc, #8]	; (23b08 <submit_poll_work+0x3c>)
   23b00:	f01a bdec 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   23b04:	2002462c 	.word	0x2002462c
   23b08:	200218c8 	.word	0x200218c8

00023b0c <env_sensors_poll>:
	return initialized ? submit_poll_work(0) : -ENXIO;
   23b0c:	4b04      	ldr	r3, [pc, #16]	; (23b20 <env_sensors_poll+0x14>)
   23b0e:	781b      	ldrb	r3, [r3, #0]
   23b10:	b113      	cbz	r3, 23b18 <env_sensors_poll+0xc>
   23b12:	2000      	movs	r0, #0
   23b14:	f7ff bfda 	b.w	23acc <submit_poll_work>
}
   23b18:	f06f 0005 	mvn.w	r0, #5
   23b1c:	4770      	bx	lr
   23b1e:	bf00      	nop
   23b20:	2002ae80 	.word	0x2002ae80

00023b24 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   23b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b28:	460e      	mov	r6, r1
	if ((work_q == NULL) || (cb == NULL)) {
   23b2a:	4607      	mov	r7, r0
   23b2c:	2800      	cmp	r0, #0
   23b2e:	d03a      	beq.n	23ba6 <env_sensors_init_and_start+0x82>
   23b30:	2900      	cmp	r1, #0
   23b32:	d038      	beq.n	23ba6 <env_sensors_init_and_start+0x82>
   23b34:	2403      	movs	r4, #3
   23b36:	4d1f      	ldr	r5, [pc, #124]	; (23bb4 <env_sensors_init_and_start+0x90>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23b38:	f8df 8098 	ldr.w	r8, [pc, #152]	; 23bd4 <env_sensors_init_and_start+0xb0>
   23b3c:	f8df a098 	ldr.w	sl, [pc, #152]	; 23bd8 <env_sensors_init_and_start+0xb4>
   23b40:	f8df b098 	ldr.w	fp, [pc, #152]	; 23bdc <env_sensors_init_and_start+0xb8>
			device_get_binding(env_sensors[i]->dev_name);
   23b44:	f8d5 9000 	ldr.w	r9, [r5]
   23b48:	f8d9 001c 	ldr.w	r0, [r9, #28]
   23b4c:	f018 fafa 	bl	3c144 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   23b50:	f8c9 0020 	str.w	r0, [r9, #32]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23b54:	f855 9b04 	ldr.w	r9, [r5], #4
   23b58:	f8d9 3020 	ldr.w	r3, [r9, #32]
   23b5c:	b973      	cbnz	r3, 23b7c <env_sensors_init_and_start+0x58>
   23b5e:	2390      	movs	r3, #144	; 0x90
   23b60:	4642      	mov	r2, r8
   23b62:	4651      	mov	r1, sl
   23b64:	4658      	mov	r0, fp
   23b66:	f01e f83f 	bl	41be8 <printk>
   23b6a:	f8d9 101c 	ldr.w	r1, [r9, #28]
   23b6e:	4812      	ldr	r0, [pc, #72]	; (23bb8 <env_sensors_init_and_start+0x94>)
   23b70:	f01e f83a 	bl	41be8 <printk>
   23b74:	2190      	movs	r1, #144	; 0x90
   23b76:	4640      	mov	r0, r8
   23b78:	f01e fa50 	bl	4201c <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   23b7c:	3c01      	subs	r4, #1
   23b7e:	d1e1      	bne.n	23b44 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   23b80:	4b0e      	ldr	r3, [pc, #56]	; (23bbc <env_sensors_init_and_start+0x98>)

	data_ready_cb = cb;

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b82:	490f      	ldr	r1, [pc, #60]	; (23bc0 <env_sensors_init_and_start+0x9c>)
	env_sensors_work_q = work_q;
   23b84:	601f      	str	r7, [r3, #0]
	data_ready_cb = cb;
   23b86:	4b0f      	ldr	r3, [pc, #60]	; (23bc4 <env_sensors_init_and_start+0xa0>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b88:	480f      	ldr	r0, [pc, #60]	; (23bc8 <env_sensors_init_and_start+0xa4>)
	data_ready_cb = cb;
   23b8a:	601e      	str	r6, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b8c:	f021 fa6b 	bl	45066 <k_delayed_work_init>

	initialized = true;
   23b90:	2201      	movs	r2, #1
   23b92:	4b0e      	ldr	r3, [pc, #56]	; (23bcc <env_sensors_init_and_start+0xa8>)
   23b94:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   23b96:	4b0e      	ldr	r3, [pc, #56]	; (23bd0 <env_sensors_init_and_start+0xac>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23b98:	681b      	ldr	r3, [r3, #0]
   23b9a:	b143      	cbz	r3, 23bae <env_sensors_init_and_start+0x8a>
}
   23b9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23ba0:	2005      	movs	r0, #5
   23ba2:	f7ff bf93 	b.w	23acc <submit_poll_work>
		return -EINVAL;
   23ba6:	f06f 0015 	mvn.w	r0, #21
}
   23baa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23bae:	4620      	mov	r0, r4
   23bb0:	e7fb      	b.n	23baa <env_sensors_init_and_start+0x86>
   23bb2:	bf00      	nop
   23bb4:	00046c50 	.word	0x00046c50
   23bb8:	00048d38 	.word	0x00048d38
   23bbc:	2002462c 	.word	0x2002462c
   23bc0:	0001d4c1 	.word	0x0001d4c1
   23bc4:	20024628 	.word	0x20024628
   23bc8:	200218c8 	.word	0x200218c8
   23bcc:	2002ae80 	.word	0x2002ae80
   23bd0:	20020640 	.word	0x20020640
   23bd4:	00048cdb 	.word	0x00048cdb
   23bd8:	00048d24 	.word	0x00048d24
   23bdc:	0004825b 	.word	0x0004825b

00023be0 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   23be0:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23be2:	4604      	mov	r4, r0
   23be4:	2800      	cmp	r0, #0
   23be6:	d041      	beq.n	23c6c <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   23be8:	f04f 0320 	mov.w	r3, #32
   23bec:	f3ef 8611 	mrs	r6, BASEPRI
   23bf0:	f383 8811 	msr	BASEPRI, r3
   23bf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23bf8:	481e      	ldr	r0, [pc, #120]	; (23c74 <env_sensors_get_temperature+0x94>)
   23bfa:	f01a fd23 	bl	3e644 <z_spin_lock_valid>
   23bfe:	b968      	cbnz	r0, 23c1c <env_sensors_get_temperature+0x3c>
   23c00:	235c      	movs	r3, #92	; 0x5c
   23c02:	4a1d      	ldr	r2, [pc, #116]	; (23c78 <env_sensors_get_temperature+0x98>)
   23c04:	491d      	ldr	r1, [pc, #116]	; (23c7c <env_sensors_get_temperature+0x9c>)
   23c06:	481e      	ldr	r0, [pc, #120]	; (23c80 <env_sensors_get_temperature+0xa0>)
   23c08:	f01d ffee 	bl	41be8 <printk>
   23c0c:	4919      	ldr	r1, [pc, #100]	; (23c74 <env_sensors_get_temperature+0x94>)
   23c0e:	481d      	ldr	r0, [pc, #116]	; (23c84 <env_sensors_get_temperature+0xa4>)
   23c10:	f01d ffea 	bl	41be8 <printk>
   23c14:	215c      	movs	r1, #92	; 0x5c
   23c16:	4818      	ldr	r0, [pc, #96]	; (23c78 <env_sensors_get_temperature+0x98>)
   23c18:	f01e fa00 	bl	4201c <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23c1c:	4d1a      	ldr	r5, [pc, #104]	; (23c88 <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   23c1e:	4815      	ldr	r0, [pc, #84]	; (23c74 <env_sensors_get_temperature+0x94>)
   23c20:	f01a fd2e 	bl	3e680 <z_spin_lock_set_owner>
   23c24:	4623      	mov	r3, r4
   23c26:	f105 0418 	add.w	r4, r5, #24
   23c2a:	462a      	mov	r2, r5
   23c2c:	ca03      	ldmia	r2!, {r0, r1}
   23c2e:	42a2      	cmp	r2, r4
   23c30:	6018      	str	r0, [r3, #0]
   23c32:	6059      	str	r1, [r3, #4]
   23c34:	4615      	mov	r5, r2
   23c36:	f103 0308 	add.w	r3, r3, #8
   23c3a:	d1f6      	bne.n	23c2a <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c3c:	480d      	ldr	r0, [pc, #52]	; (23c74 <env_sensors_get_temperature+0x94>)
   23c3e:	f01a fd0f 	bl	3e660 <z_spin_unlock_valid>
   23c42:	b968      	cbnz	r0, 23c60 <env_sensors_get_temperature+0x80>
   23c44:	2384      	movs	r3, #132	; 0x84
   23c46:	4a0c      	ldr	r2, [pc, #48]	; (23c78 <env_sensors_get_temperature+0x98>)
   23c48:	4910      	ldr	r1, [pc, #64]	; (23c8c <env_sensors_get_temperature+0xac>)
   23c4a:	480d      	ldr	r0, [pc, #52]	; (23c80 <env_sensors_get_temperature+0xa0>)
   23c4c:	f01d ffcc 	bl	41be8 <printk>
   23c50:	4908      	ldr	r1, [pc, #32]	; (23c74 <env_sensors_get_temperature+0x94>)
   23c52:	480f      	ldr	r0, [pc, #60]	; (23c90 <env_sensors_get_temperature+0xb0>)
   23c54:	f01d ffc8 	bl	41be8 <printk>
   23c58:	2184      	movs	r1, #132	; 0x84
   23c5a:	4807      	ldr	r0, [pc, #28]	; (23c78 <env_sensors_get_temperature+0x98>)
   23c5c:	f01e f9de 	bl	4201c <assert_post_action>
	__asm__ volatile(
   23c60:	f386 8811 	msr	BASEPRI, r6
   23c64:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   23c68:	2000      	movs	r0, #0
}
   23c6a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c70:	e7fb      	b.n	23c6a <env_sensors_get_temperature+0x8a>
   23c72:	bf00      	nop
   23c74:	2002026c 	.word	0x2002026c
   23c78:	00048d7b 	.word	0x00048d7b
   23c7c:	00048da1 	.word	0x00048da1
   23c80:	0004825b 	.word	0x0004825b
   23c84:	00048db6 	.word	0x00048db6
   23c88:	20020248 	.word	0x20020248
   23c8c:	00048dce 	.word	0x00048dce
   23c90:	00048de5 	.word	0x00048de5

00023c94 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   23c94:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23c96:	4604      	mov	r4, r0
   23c98:	2800      	cmp	r0, #0
   23c9a:	d041      	beq.n	23d20 <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   23c9c:	f04f 0320 	mov.w	r3, #32
   23ca0:	f3ef 8611 	mrs	r6, BASEPRI
   23ca4:	f383 8811 	msr	BASEPRI, r3
   23ca8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cac:	481e      	ldr	r0, [pc, #120]	; (23d28 <env_sensors_get_humidity+0x94>)
   23cae:	f01a fcc9 	bl	3e644 <z_spin_lock_valid>
   23cb2:	b968      	cbnz	r0, 23cd0 <env_sensors_get_humidity+0x3c>
   23cb4:	235c      	movs	r3, #92	; 0x5c
   23cb6:	4a1d      	ldr	r2, [pc, #116]	; (23d2c <env_sensors_get_humidity+0x98>)
   23cb8:	491d      	ldr	r1, [pc, #116]	; (23d30 <env_sensors_get_humidity+0x9c>)
   23cba:	481e      	ldr	r0, [pc, #120]	; (23d34 <env_sensors_get_humidity+0xa0>)
   23cbc:	f01d ff94 	bl	41be8 <printk>
   23cc0:	4919      	ldr	r1, [pc, #100]	; (23d28 <env_sensors_get_humidity+0x94>)
   23cc2:	481d      	ldr	r0, [pc, #116]	; (23d38 <env_sensors_get_humidity+0xa4>)
   23cc4:	f01d ff90 	bl	41be8 <printk>
   23cc8:	215c      	movs	r1, #92	; 0x5c
   23cca:	4818      	ldr	r0, [pc, #96]	; (23d2c <env_sensors_get_humidity+0x98>)
   23ccc:	f01e f9a6 	bl	4201c <assert_post_action>
   23cd0:	4d1a      	ldr	r5, [pc, #104]	; (23d3c <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   23cd2:	4815      	ldr	r0, [pc, #84]	; (23d28 <env_sensors_get_humidity+0x94>)
   23cd4:	f01a fcd4 	bl	3e680 <z_spin_lock_set_owner>
   23cd8:	4623      	mov	r3, r4
   23cda:	f105 0418 	add.w	r4, r5, #24
   23cde:	462a      	mov	r2, r5
   23ce0:	ca03      	ldmia	r2!, {r0, r1}
   23ce2:	42a2      	cmp	r2, r4
   23ce4:	6018      	str	r0, [r3, #0]
   23ce6:	6059      	str	r1, [r3, #4]
   23ce8:	4615      	mov	r5, r2
   23cea:	f103 0308 	add.w	r3, r3, #8
   23cee:	d1f6      	bne.n	23cde <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cf0:	480d      	ldr	r0, [pc, #52]	; (23d28 <env_sensors_get_humidity+0x94>)
   23cf2:	f01a fcb5 	bl	3e660 <z_spin_unlock_valid>
   23cf6:	b968      	cbnz	r0, 23d14 <env_sensors_get_humidity+0x80>
   23cf8:	2384      	movs	r3, #132	; 0x84
   23cfa:	4a0c      	ldr	r2, [pc, #48]	; (23d2c <env_sensors_get_humidity+0x98>)
   23cfc:	4910      	ldr	r1, [pc, #64]	; (23d40 <env_sensors_get_humidity+0xac>)
   23cfe:	480d      	ldr	r0, [pc, #52]	; (23d34 <env_sensors_get_humidity+0xa0>)
   23d00:	f01d ff72 	bl	41be8 <printk>
   23d04:	4908      	ldr	r1, [pc, #32]	; (23d28 <env_sensors_get_humidity+0x94>)
   23d06:	480f      	ldr	r0, [pc, #60]	; (23d44 <env_sensors_get_humidity+0xb0>)
   23d08:	f01d ff6e 	bl	41be8 <printk>
   23d0c:	2184      	movs	r1, #132	; 0x84
   23d0e:	4807      	ldr	r0, [pc, #28]	; (23d2c <env_sensors_get_humidity+0x98>)
   23d10:	f01e f984 	bl	4201c <assert_post_action>
	__asm__ volatile(
   23d14:	f386 8811 	msr	BASEPRI, r6
   23d18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   23d1c:	2000      	movs	r0, #0
}
   23d1e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d24:	e7fb      	b.n	23d1e <env_sensors_get_humidity+0x8a>
   23d26:	bf00      	nop
   23d28:	2002021c 	.word	0x2002021c
   23d2c:	00048d7b 	.word	0x00048d7b
   23d30:	00048da1 	.word	0x00048da1
   23d34:	0004825b 	.word	0x0004825b
   23d38:	00048db6 	.word	0x00048db6
   23d3c:	200201f8 	.word	0x200201f8
   23d40:	00048dce 	.word	0x00048dce
   23d44:	00048de5 	.word	0x00048de5

00023d48 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   23d48:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23d4a:	4604      	mov	r4, r0
   23d4c:	2800      	cmp	r0, #0
   23d4e:	d041      	beq.n	23dd4 <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   23d50:	f04f 0320 	mov.w	r3, #32
   23d54:	f3ef 8611 	mrs	r6, BASEPRI
   23d58:	f383 8811 	msr	BASEPRI, r3
   23d5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d60:	481e      	ldr	r0, [pc, #120]	; (23ddc <env_sensors_get_pressure+0x94>)
   23d62:	f01a fc6f 	bl	3e644 <z_spin_lock_valid>
   23d66:	b968      	cbnz	r0, 23d84 <env_sensors_get_pressure+0x3c>
   23d68:	235c      	movs	r3, #92	; 0x5c
   23d6a:	4a1d      	ldr	r2, [pc, #116]	; (23de0 <env_sensors_get_pressure+0x98>)
   23d6c:	491d      	ldr	r1, [pc, #116]	; (23de4 <env_sensors_get_pressure+0x9c>)
   23d6e:	481e      	ldr	r0, [pc, #120]	; (23de8 <env_sensors_get_pressure+0xa0>)
   23d70:	f01d ff3a 	bl	41be8 <printk>
   23d74:	4919      	ldr	r1, [pc, #100]	; (23ddc <env_sensors_get_pressure+0x94>)
   23d76:	481d      	ldr	r0, [pc, #116]	; (23dec <env_sensors_get_pressure+0xa4>)
   23d78:	f01d ff36 	bl	41be8 <printk>
   23d7c:	215c      	movs	r1, #92	; 0x5c
   23d7e:	4818      	ldr	r0, [pc, #96]	; (23de0 <env_sensors_get_pressure+0x98>)
   23d80:	f01e f94c 	bl	4201c <assert_post_action>
   23d84:	4d1a      	ldr	r5, [pc, #104]	; (23df0 <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   23d86:	4815      	ldr	r0, [pc, #84]	; (23ddc <env_sensors_get_pressure+0x94>)
   23d88:	f01a fc7a 	bl	3e680 <z_spin_lock_set_owner>
   23d8c:	4623      	mov	r3, r4
   23d8e:	f105 0418 	add.w	r4, r5, #24
   23d92:	462a      	mov	r2, r5
   23d94:	ca03      	ldmia	r2!, {r0, r1}
   23d96:	42a2      	cmp	r2, r4
   23d98:	6018      	str	r0, [r3, #0]
   23d9a:	6059      	str	r1, [r3, #4]
   23d9c:	4615      	mov	r5, r2
   23d9e:	f103 0308 	add.w	r3, r3, #8
   23da2:	d1f6      	bne.n	23d92 <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23da4:	480d      	ldr	r0, [pc, #52]	; (23ddc <env_sensors_get_pressure+0x94>)
   23da6:	f01a fc5b 	bl	3e660 <z_spin_unlock_valid>
   23daa:	b968      	cbnz	r0, 23dc8 <env_sensors_get_pressure+0x80>
   23dac:	2384      	movs	r3, #132	; 0x84
   23dae:	4a0c      	ldr	r2, [pc, #48]	; (23de0 <env_sensors_get_pressure+0x98>)
   23db0:	4910      	ldr	r1, [pc, #64]	; (23df4 <env_sensors_get_pressure+0xac>)
   23db2:	480d      	ldr	r0, [pc, #52]	; (23de8 <env_sensors_get_pressure+0xa0>)
   23db4:	f01d ff18 	bl	41be8 <printk>
   23db8:	4908      	ldr	r1, [pc, #32]	; (23ddc <env_sensors_get_pressure+0x94>)
   23dba:	480f      	ldr	r0, [pc, #60]	; (23df8 <env_sensors_get_pressure+0xb0>)
   23dbc:	f01d ff14 	bl	41be8 <printk>
   23dc0:	2184      	movs	r1, #132	; 0x84
   23dc2:	4807      	ldr	r0, [pc, #28]	; (23de0 <env_sensors_get_pressure+0x98>)
   23dc4:	f01e f92a 	bl	4201c <assert_post_action>
	__asm__ volatile(
   23dc8:	f386 8811 	msr	BASEPRI, r6
   23dcc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   23dd0:	2000      	movs	r0, #0
}
   23dd2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23dd8:	e7fb      	b.n	23dd2 <env_sensors_get_pressure+0x8a>
   23dda:	bf00      	nop
   23ddc:	20020244 	.word	0x20020244
   23de0:	00048d7b 	.word	0x00048d7b
   23de4:	00048da1 	.word	0x00048da1
   23de8:	0004825b 	.word	0x0004825b
   23dec:	00048db6 	.word	0x00048db6
   23df0:	20020220 	.word	0x20020220
   23df4:	00048dce 	.word	0x00048dce
   23df8:	00048de5 	.word	0x00048de5

00023dfc <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const uint32_t interval_s)
{
   23dfc:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   23dfe:	4b11      	ldr	r3, [pc, #68]	; (23e44 <env_sensors_set_send_interval+0x48>)
   23e00:	681a      	ldr	r2, [r3, #0]
   23e02:	4282      	cmp	r2, r0
   23e04:	d01c      	beq.n	23e40 <env_sensors_set_send_interval+0x44>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   23e06:	4a10      	ldr	r2, [pc, #64]	; (23e48 <env_sensors_set_send_interval+0x4c>)
   23e08:	4290      	cmp	r0, r2
   23e0a:	bf94      	ite	ls
   23e0c:	6018      	strls	r0, [r3, #0]
   23e0e:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   23e10:	4b0e      	ldr	r3, [pc, #56]	; (23e4c <env_sensors_set_send_interval+0x50>)
   23e12:	781b      	ldrb	r3, [r3, #0]
   23e14:	b1a3      	cbz	r3, 23e40 <env_sensors_set_send_interval+0x44>
		return;
	}

	if (data_send_interval_s) {
   23e16:	b118      	cbz	r0, 23e20 <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   23e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   23e1c:	f7ff be76 	b.w	23b0c <env_sensors_poll>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   23e20:	480b      	ldr	r0, [pc, #44]	; (23e50 <env_sensors_set_send_interval+0x54>)
   23e22:	f01a fecb 	bl	3ebbc <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23e2a:	fba0 0103 	umull	r0, r1, r0, r3
   23e2e:	0bc3      	lsrs	r3, r0, #15
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   23e30:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   23e34:	d004      	beq.n	23e40 <env_sensors_set_send_interval+0x44>
}
   23e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   23e3a:	4806      	ldr	r0, [pc, #24]	; (23e54 <env_sensors_set_send_interval+0x58>)
   23e3c:	f01a bcd6 	b.w	3e7ec <k_delayed_work_cancel>
}
   23e40:	bd08      	pop	{r3, pc}
   23e42:	bf00      	nop
   23e44:	20020640 	.word	0x20020640
   23e48:	0020c49b 	.word	0x0020c49b
   23e4c:	2002ae80 	.word	0x2002ae80
   23e50:	200218d8 	.word	0x200218d8
   23e54:	200218c8 	.word	0x200218c8

00023e58 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   23e58:	4b01      	ldr	r3, [pc, #4]	; (23e60 <env_sensors_set_backoff_enable+0x8>)
   23e5a:	7018      	strb	r0, [r3, #0]
}
   23e5c:	4770      	bx	lr
   23e5e:	bf00      	nop
   23e60:	2002ae7f 	.word	0x2002ae7f

00023e64 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   23e64:	4b08      	ldr	r3, [pc, #32]	; (23e88 <primary_feed_worker+0x24>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23e66:	4909      	ldr	r1, [pc, #36]	; (23e8c <primary_feed_worker+0x28>)
   23e68:	6818      	ldr	r0, [r3, #0]
   23e6a:	e8d1 3fef 	ldaex	r3, [r1]
   23e6e:	f043 0201 	orr.w	r2, r3, #1
   23e72:	e8c1 2fec 	stlex	ip, r2, [r1]
   23e76:	f1bc 0f00 	cmp.w	ip, #0
   23e7a:	d1f6      	bne.n	23e6a <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   23e7c:	07db      	lsls	r3, r3, #31
   23e7e:	d402      	bmi.n	23e86 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   23e80:	3908      	subs	r1, #8
   23e82:	f021 b82e 	b.w	44ee2 <k_queue_append>
}
   23e86:	4770      	bx	lr
   23e88:	20024630 	.word	0x20024630
   23e8c:	20021938 	.word	0x20021938

00023e90 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   23e90:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   23e92:	4c11      	ldr	r4, [pc, #68]	; (23ed8 <secondary_feed_worker+0x48>)
   23e94:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   23e98:	6883      	ldr	r3, [r0, #8]
   23e9a:	68db      	ldr	r3, [r3, #12]
   23e9c:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   23e9e:	4602      	mov	r2, r0
   23ea0:	b178      	cbz	r0, 23ec2 <secondary_feed_worker+0x32>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   23ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23ea6:	2301      	movs	r3, #1
   23ea8:	f04f 0000 	mov.w	r0, #0
   23eac:	490b      	ldr	r1, [pc, #44]	; (23edc <secondary_feed_worker+0x4c>)
   23eae:	f363 0007 	bfi	r0, r3, #0, #8
   23eb2:	4b0b      	ldr	r3, [pc, #44]	; (23ee0 <secondary_feed_worker+0x50>)
   23eb4:	1a5b      	subs	r3, r3, r1
   23eb6:	08db      	lsrs	r3, r3, #3
   23eb8:	f363 108f 	bfi	r0, r3, #6, #10
   23ebc:	4909      	ldr	r1, [pc, #36]	; (23ee4 <secondary_feed_worker+0x54>)
   23ebe:	f01e b8be 	b.w	4203e <log_string_sync>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23ec2:	f104 0108 	add.w	r1, r4, #8
   23ec6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
}
   23eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ece:	2300      	movs	r3, #0
   23ed0:	4805      	ldr	r0, [pc, #20]	; (23ee8 <secondary_feed_worker+0x58>)
   23ed2:	f01a bc03 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   23ed6:	bf00      	nop
   23ed8:	200218f8 	.word	0x200218f8
   23edc:	00046878 	.word	0x00046878
   23ee0:	000469b0 	.word	0x000469b0
   23ee4:	00048e06 	.word	0x00048e06
   23ee8:	200244a8 	.word	0x200244a8

00023eec <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   23eec:	b570      	push	{r4, r5, r6, lr}
	if (work_q == NULL) {
   23eee:	2800      	cmp	r0, #0
   23ef0:	f000 808c 	beq.w	2400c <watchdog_init_and_start+0x120>
		return -EINVAL;
	}
	second_work_q = work_q;
   23ef4:	4b47      	ldr	r3, [pc, #284]	; (24014 <watchdog_init_and_start+0x128>)
   23ef6:	6018      	str	r0, [r3, #0]
   23ef8:	4847      	ldr	r0, [pc, #284]	; (24018 <watchdog_init_and_start+0x12c>)
   23efa:	f018 f923 	bl	3c144 <z_impl_device_get_binding>
   23efe:	4d47      	ldr	r5, [pc, #284]	; (2401c <watchdog_init_and_start+0x130>)
   23f00:	4a47      	ldr	r2, [pc, #284]	; (24020 <watchdog_init_and_start+0x134>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   23f02:	4e48      	ldr	r6, [pc, #288]	; (24024 <watchdog_init_and_start+0x138>)
   23f04:	1aad      	subs	r5, r5, r2
   23f06:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
   23f08:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   23f0c:	b968      	cbnz	r0, 23f2a <watchdog_init_and_start+0x3e>
		LOG_ERR("Cannot bind watchdog driver");
   23f0e:	2301      	movs	r3, #1
   23f10:	f04f 0000 	mov.w	r0, #0
   23f14:	f363 0007 	bfi	r0, r3, #0, #8
   23f18:	f365 108f 	bfi	r0, r5, #6, #10
   23f1c:	4942      	ldr	r1, [pc, #264]	; (24028 <watchdog_init_and_start+0x13c>)
   23f1e:	f01e f88e 	bl	4203e <log_string_sync>
		return err;
   23f22:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
   23f26:	4620      	mov	r0, r4
   23f28:	bd70      	pop	{r4, r5, r6, pc}
	return api->install_timeout(dev, cfg);
   23f2a:	6883      	ldr	r3, [r0, #8]
   23f2c:	493f      	ldr	r1, [pc, #252]	; (2402c <watchdog_init_and_start+0x140>)
   23f2e:	689b      	ldr	r3, [r3, #8]
   23f30:	4798      	blx	r3
   23f32:	4602      	mov	r2, r0
	if (data->wdt_channel_id < 0) {
   23f34:	2a00      	cmp	r2, #0
	data->wdt_channel_id = wdt_install_timeout(
   23f36:	6070      	str	r0, [r6, #4]
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   23f38:	f04f 0000 	mov.w	r0, #0
	if (data->wdt_channel_id < 0) {
   23f3c:	da0a      	bge.n	23f54 <watchdog_init_and_start+0x68>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   23f3e:	2101      	movs	r1, #1
   23f40:	f361 0007 	bfi	r0, r1, #0, #8
   23f44:	f365 108f 	bfi	r0, r5, #6, #10
   23f48:	4939      	ldr	r1, [pc, #228]	; (24030 <watchdog_init_and_start+0x144>)
   23f4a:	f01e f878 	bl	4203e <log_string_sync>
		return -EFAULT;
   23f4e:	f06f 040d 	mvn.w	r4, #13
   23f52:	e7e8      	b.n	23f26 <watchdog_init_and_start+0x3a>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
   23f54:	2303      	movs	r3, #3
   23f56:	f363 0007 	bfi	r0, r3, #0, #8
   23f5a:	f365 108f 	bfi	r0, r5, #6, #10
   23f5e:	f64e 2260 	movw	r2, #60000	; 0xea60
   23f62:	4934      	ldr	r1, [pc, #208]	; (24034 <watchdog_init_and_start+0x148>)
   23f64:	f01e f86b 	bl	4203e <log_string_sync>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   23f68:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
   23f6a:	6883      	ldr	r3, [r0, #8]
   23f6c:	2102      	movs	r1, #2
   23f6e:	681b      	ldr	r3, [r3, #0]
   23f70:	4798      	blx	r3
	if (err) {
   23f72:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   23f74:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23f78:	b14c      	cbz	r4, 23f8e <watchdog_init_and_start+0xa2>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   23f7a:	2301      	movs	r3, #1
   23f7c:	4622      	mov	r2, r4
   23f7e:	f363 0007 	bfi	r0, r3, #0, #8
   23f82:	492d      	ldr	r1, [pc, #180]	; (24038 <watchdog_init_and_start+0x14c>)
   23f84:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   23f88:	f01e f859 	bl	4203e <log_string_sync>
	if (err) {
   23f8c:	e7cb      	b.n	23f26 <watchdog_init_and_start+0x3a>
		LOG_INF("Watchdog started");
   23f8e:	2303      	movs	r3, #3
   23f90:	f363 0007 	bfi	r0, r3, #0, #8
   23f94:	f365 108f 	bfi	r0, r5, #6, #10
   23f98:	4928      	ldr	r1, [pc, #160]	; (2403c <watchdog_init_and_start+0x150>)
   23f9a:	f01e f850 	bl	4203e <log_string_sync>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   23f9e:	f106 0008 	add.w	r0, r6, #8
   23fa2:	4927      	ldr	r1, [pc, #156]	; (24040 <watchdog_init_and_start+0x154>)
   23fa4:	f021 f85f 	bl	45066 <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   23fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23fac:	4b25      	ldr	r3, [pc, #148]	; (24044 <watchdog_init_and_start+0x158>)
   23fae:	63b4      	str	r4, [r6, #56]	; 0x38
   23fb0:	e9c6 340f 	strd	r3, r4, [r6, #60]	; 0x3c
	return api->feed(dev, channel_id);
   23fb4:	6883      	ldr	r3, [r0, #8]
   23fb6:	68db      	ldr	r3, [r3, #12]
   23fb8:	4798      	blx	r3
	if (err) {
   23fba:	4604      	mov	r4, r0
   23fbc:	b148      	cbz	r0, 23fd2 <watchdog_init_and_start+0xe6>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23fbe:	f04f 0000 	mov.w	r0, #0
   23fc2:	2301      	movs	r3, #1
   23fc4:	f363 0007 	bfi	r0, r3, #0, #8
   23fc8:	f365 108f 	bfi	r0, r5, #6, #10
   23fcc:	4622      	mov	r2, r4
   23fce:	491e      	ldr	r1, [pc, #120]	; (24048 <watchdog_init_and_start+0x15c>)
   23fd0:	e7da      	b.n	23f88 <watchdog_init_and_start+0x9c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23fd2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23fd6:	2300      	movs	r3, #0
   23fd8:	f106 0108 	add.w	r1, r6, #8
   23fdc:	481b      	ldr	r0, [pc, #108]	; (2404c <watchdog_init_and_start+0x160>)
   23fde:	f01a fb7d 	bl	3e6dc <k_delayed_work_submit_to_queue>
	if (err) {
   23fe2:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog feed worker!"
   23fe4:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23fe8:	b13c      	cbz	r4, 23ffa <watchdog_init_and_start+0x10e>
		LOG_ERR("Cannot start watchdog feed worker!"
   23fea:	2301      	movs	r3, #1
   23fec:	f363 0007 	bfi	r0, r3, #0, #8
   23ff0:	f365 108f 	bfi	r0, r5, #6, #10
   23ff4:	4622      	mov	r2, r4
   23ff6:	4916      	ldr	r1, [pc, #88]	; (24050 <watchdog_init_and_start+0x164>)
   23ff8:	e7c6      	b.n	23f88 <watchdog_init_and_start+0x9c>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   23ffa:	2303      	movs	r3, #3
   23ffc:	f363 0007 	bfi	r0, r3, #0, #8
   24000:	f365 108f 	bfi	r0, r5, #6, #10
   24004:	f247 5230 	movw	r2, #30000	; 0x7530
   24008:	4912      	ldr	r1, [pc, #72]	; (24054 <watchdog_init_and_start+0x168>)
   2400a:	e7bd      	b.n	23f88 <watchdog_init_and_start+0x9c>
		return -EINVAL;
   2400c:	f06f 0415 	mvn.w	r4, #21
   24010:	e789      	b.n	23f26 <watchdog_init_and_start+0x3a>
   24012:	bf00      	nop
   24014:	20024630 	.word	0x20024630
   24018:	00048e34 	.word	0x00048e34
   2401c:	000469b0 	.word	0x000469b0
   24020:	00046878 	.word	0x00046878
   24024:	200218f8 	.word	0x200218f8
   24028:	00048e38 	.word	0x00048e38
   2402c:	00046c5c 	.word	0x00046c5c
   24030:	00048e54 	.word	0x00048e54
   24034:	00048e82 	.word	0x00048e82
   24038:	00048eaa 	.word	0x00048eaa
   2403c:	00048ed0 	.word	0x00048ed0
   24040:	00023e65 	.word	0x00023e65
   24044:	00023e91 	.word	0x00023e91
   24048:	00048e06 	.word	0x00048e06
   2404c:	200244a8 	.word	0x200244a8
   24050:	00048ee1 	.word	0x00048ee1
   24054:	00048f13 	.word	0x00048f13

00024058 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   24058:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2405a:	4c09      	ldr	r4, [pc, #36]	; (24080 <crc8_ccitt+0x28>)
   2405c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2405e:	4291      	cmp	r1, r2
   24060:	d100      	bne.n	24064 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   24062:	bd10      	pop	{r4, pc}
		val ^= p[i];
   24064:	f811 3b01 	ldrb.w	r3, [r1], #1
   24068:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2406a:	0918      	lsrs	r0, r3, #4
   2406c:	5c20      	ldrb	r0, [r4, r0]
   2406e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   24072:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   24074:	0918      	lsrs	r0, r3, #4
   24076:	5c20      	ldrb	r0, [r4, r0]
   24078:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2407c:	b2c0      	uxtb	r0, r0
   2407e:	e7ee      	b.n	2405e <crc8_ccitt+0x6>
   24080:	00048f36 	.word	0x00048f36

00024084 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   24084:	2803      	cmp	r0, #3
{
   24086:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   24088:	d906      	bls.n	24098 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   2408a:	f01e fe46 	bl	42d1a <__errno>
   2408e:	2309      	movs	r3, #9
   24090:	6003      	str	r3, [r0, #0]
   24092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   24096:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24098:	220c      	movs	r2, #12
   2409a:	4b05      	ldr	r3, [pc, #20]	; (240b0 <_check_fd+0x2c>)
   2409c:	fb02 3000 	mla	r0, r2, r0, r3
   240a0:	3008      	adds	r0, #8
   240a2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   240a6:	2b00      	cmp	r3, #0
   240a8:	d0ef      	beq.n	2408a <_check_fd+0x6>
	return 0;
   240aa:	2000      	movs	r0, #0
   240ac:	e7f3      	b.n	24096 <_check_fd+0x12>
   240ae:	bf00      	nop
   240b0:	20024634 	.word	0x20024634

000240b4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   240b4:	b570      	push	{r4, r5, r6, lr}
   240b6:	4604      	mov	r4, r0
   240b8:	460d      	mov	r5, r1
   240ba:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   240bc:	f7ff ffe2 	bl	24084 <_check_fd>
   240c0:	2800      	cmp	r0, #0
   240c2:	db0a      	blt.n	240da <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   240c4:	4a08      	ldr	r2, [pc, #32]	; (240e8 <z_get_fd_obj+0x34>)
   240c6:	b155      	cbz	r5, 240de <z_get_fd_obj+0x2a>
   240c8:	230c      	movs	r3, #12
   240ca:	fb03 2304 	mla	r3, r3, r4, r2
   240ce:	685b      	ldr	r3, [r3, #4]
   240d0:	42ab      	cmp	r3, r5
   240d2:	d004      	beq.n	240de <z_get_fd_obj+0x2a>
		errno = err;
   240d4:	f01e fe21 	bl	42d1a <__errno>
   240d8:	6006      	str	r6, [r0, #0]
		return NULL;
   240da:	2000      	movs	r0, #0
   240dc:	e002      	b.n	240e4 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   240de:	200c      	movs	r0, #12
   240e0:	4360      	muls	r0, r4
   240e2:	5810      	ldr	r0, [r2, r0]
}
   240e4:	bd70      	pop	{r4, r5, r6, pc}
   240e6:	bf00      	nop
   240e8:	20024634 	.word	0x20024634

000240ec <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   240ec:	b538      	push	{r3, r4, r5, lr}
   240ee:	4605      	mov	r5, r0
   240f0:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   240f2:	f7ff ffc7 	bl	24084 <_check_fd>
   240f6:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   240f8:	bfa3      	ittte	ge
   240fa:	200c      	movge	r0, #12
   240fc:	4368      	mulge	r0, r5
   240fe:	4b04      	ldrge	r3, [pc, #16]	; (24110 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   24100:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   24102:	bfa1      	itttt	ge
   24104:	181a      	addge	r2, r3, r0
   24106:	6852      	ldrge	r2, [r2, #4]
   24108:	6022      	strge	r2, [r4, #0]

	return fd_entry->obj;
   2410a:	5818      	ldrge	r0, [r3, r0]
}
   2410c:	bd38      	pop	{r3, r4, r5, pc}
   2410e:	bf00      	nop
   24110:	20024634 	.word	0x20024634

00024114 <z_reserve_fd>:

int z_reserve_fd(void)
{
   24114:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   24116:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   24118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2411c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24120:	4812      	ldr	r0, [pc, #72]	; (2416c <z_reserve_fd+0x58>)
   24122:	f018 fc5f 	bl	3c9e4 <z_impl_k_mutex_lock>
static int _find_fd_entry(void)
   24126:	4b12      	ldr	r3, [pc, #72]	; (24170 <z_reserve_fd+0x5c>)
   24128:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   2412c:	b17a      	cbz	r2, 2414e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   2412e:	3401      	adds	r4, #1
   24130:	2c04      	cmp	r4, #4
   24132:	f103 030c 	add.w	r3, r3, #12
   24136:	d1f7      	bne.n	24128 <z_reserve_fd+0x14>
	errno = ENFILE;
   24138:	f01e fdef 	bl	42d1a <__errno>
   2413c:	2317      	movs	r3, #23
	return -1;
   2413e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   24142:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   24144:	4809      	ldr	r0, [pc, #36]	; (2416c <z_reserve_fd+0x58>)
   24146:	f018 fd4b 	bl	3cbe0 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   2414a:	4620      	mov	r0, r4
   2414c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2414e:	e8d3 1fef 	ldaex	r1, [r3]
   24152:	3101      	adds	r1, #1
   24154:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24158:	2800      	cmp	r0, #0
   2415a:	d1f8      	bne.n	2414e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   2415c:	230c      	movs	r3, #12
   2415e:	4363      	muls	r3, r4
   24160:	4904      	ldr	r1, [pc, #16]	; (24174 <z_reserve_fd+0x60>)
   24162:	18c8      	adds	r0, r1, r3
   24164:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   24166:	6042      	str	r2, [r0, #4]
   24168:	e7ec      	b.n	24144 <z_reserve_fd+0x30>
   2416a:	bf00      	nop
   2416c:	20020ae8 	.word	0x20020ae8
   24170:	2002463c 	.word	0x2002463c
   24174:	20024634 	.word	0x20024634

00024178 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   24178:	230c      	movs	r3, #12
{
   2417a:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   2417c:	4358      	muls	r0, r3
   2417e:	4c02      	ldr	r4, [pc, #8]	; (24188 <z_finalize_fd+0x10>)
   24180:	1823      	adds	r3, r4, r0
   24182:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   24184:	605a      	str	r2, [r3, #4]
}
   24186:	bd10      	pop	{r4, pc}
   24188:	20024634 	.word	0x20024634

0002418c <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   2418c:	230c      	movs	r3, #12
   2418e:	4a0e      	ldr	r2, [pc, #56]	; (241c8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   24190:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   24192:	fb03 2300 	mla	r3, r3, r0, r2
   24196:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24198:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   2419c:	b191      	cbz	r1, 241c4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   2419e:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   241a0:	e8d3 5fef 	ldaex	r5, [r3]
   241a4:	428d      	cmp	r5, r1
   241a6:	d104      	bne.n	241b2 <z_free_fd+0x26>
   241a8:	e8c3 4fec 	stlex	ip, r4, [r3]
   241ac:	f1bc 0f00 	cmp.w	ip, #0
   241b0:	d1f6      	bne.n	241a0 <z_free_fd+0x14>
   241b2:	d1f1      	bne.n	24198 <z_free_fd+0xc>
	if (old_rc != 1) {
   241b4:	2901      	cmp	r1, #1
   241b6:	d105      	bne.n	241c4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   241b8:	230c      	movs	r3, #12
   241ba:	4358      	muls	r0, r3
   241bc:	2300      	movs	r3, #0
   241be:	1811      	adds	r1, r2, r0
   241c0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   241c2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   241c4:	bd30      	pop	{r4, r5, pc}
   241c6:	bf00      	nop
   241c8:	20024634 	.word	0x20024634

000241cc <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   241cc:	b570      	push	{r4, r5, r6, lr}
   241ce:	4605      	mov	r5, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   241d0:	6843      	ldr	r3, [r0, #4]
   241d2:	460e      	mov	r6, r1

	return method & SYS_NOTIFY_METHOD_MASK;
   241d4:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   241d8:	2b02      	cmp	r3, #2
	notify->result = res;
   241da:	60a9      	str	r1, [r5, #8]
	switch (method) {
   241dc:	d010      	beq.n	24200 <sys_notify_finalize+0x34>
   241de:	2b03      	cmp	r3, #3
   241e0:	d004      	beq.n	241ec <sys_notify_finalize+0x20>
   241e2:	2b01      	cmp	r3, #1
   241e4:	d10f      	bne.n	24206 <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
   241e6:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
   241e8:	4620      	mov	r0, r4
   241ea:	e001      	b.n	241f0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   241ec:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   241ee:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   241f0:	2300      	movs	r3, #0
   241f2:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   241f4:	b110      	cbz	r0, 241fc <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   241f6:	4631      	mov	r1, r6
   241f8:	f01b f9e0 	bl	3f5bc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   241fc:	4620      	mov	r0, r4
   241fe:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   24200:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   24202:	2400      	movs	r4, #0
		break;
   24204:	e7f4      	b.n	241f0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   24206:	2345      	movs	r3, #69	; 0x45
   24208:	4a05      	ldr	r2, [pc, #20]	; (24220 <sys_notify_finalize+0x54>)
   2420a:	4906      	ldr	r1, [pc, #24]	; (24224 <sys_notify_finalize+0x58>)
   2420c:	4806      	ldr	r0, [pc, #24]	; (24228 <sys_notify_finalize+0x5c>)
   2420e:	f01d fceb 	bl	41be8 <printk>
   24212:	2145      	movs	r1, #69	; 0x45
   24214:	4802      	ldr	r0, [pc, #8]	; (24220 <sys_notify_finalize+0x54>)
   24216:	f01d ff01 	bl	4201c <assert_post_action>
	sys_notify_generic_callback rv = 0;
   2421a:	2400      	movs	r4, #0
   2421c:	e7e7      	b.n	241ee <sys_notify_finalize+0x22>
   2421e:	bf00      	nop
   24220:	00048f46 	.word	0x00048f46
   24224:	0004edb2 	.word	0x0004edb2
   24228:	0004825b 	.word	0x0004825b

0002422c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2422c:	680b      	ldr	r3, [r1, #0]
   2422e:	3301      	adds	r3, #1
   24230:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   24232:	4b01      	ldr	r3, [pc, #4]	; (24238 <char_out+0xc>)
   24234:	681b      	ldr	r3, [r3, #0]
   24236:	4718      	bx	r3
   24238:	20020644 	.word	0x20020644

0002423c <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   2423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24240:	b087      	sub	sp, #28
   24242:	460f      	mov	r7, r1
   24244:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
   24246:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   24248:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   2424a:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   2424c:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   2424e:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   24250:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   24254:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   24258:	4c1c      	ldr	r4, [pc, #112]	; (242cc <print_digits.part.0+0x90>)
   2425a:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   2425e:	ea50 0301 	orrs.w	r3, r0, r1
   24262:	d11a      	bne.n	2429a <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
   24264:	2d14      	cmp	r5, #20
		buf[i] = '0';
   24266:	bf08      	it	eq
   24268:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   2426a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   2426c:	bf18      	it	ne
   2426e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   24270:	442c      	add	r4, r5
		buf[i] = '0';
   24272:	bf08      	it	eq
   24274:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   24278:	2c15      	cmp	r4, #21
   2427a:	d017      	beq.n	242ac <print_digits.part.0+0x70>
   2427c:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
   2427e:	2c00      	cmp	r4, #0
   24280:	dc16      	bgt.n	242b0 <print_digits.part.0+0x74>
		out(buf[i], ctx);
   24282:	f81d 0005 	ldrb.w	r0, [sp, r5]
   24286:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   24288:	3501      	adds	r5, #1
		out(buf[i], ctx);
   2428a:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   2428c:	2d15      	cmp	r5, #21
   2428e:	d1f8      	bne.n	24282 <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
   24290:	2c00      	cmp	r4, #0
   24292:	dc15      	bgt.n	242c0 <print_digits.part.0+0x84>
}
   24294:	b007      	add	sp, #28
   24296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   2429a:	4642      	mov	r2, r8
   2429c:	464b      	mov	r3, r9
   2429e:	f7f8 fe0d 	bl	1cebc <__aeabi_uldivmod>
   242a2:	5ca3      	ldrb	r3, [r4, r2]
   242a4:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   242a8:	3d01      	subs	r5, #1
   242aa:	e7d8      	b.n	2425e <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   242ac:	2400      	movs	r4, #0
   242ae:	e7e8      	b.n	24282 <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   242b0:	f1bb 0f00 	cmp.w	fp, #0
   242b4:	d0e5      	beq.n	24282 <print_digits.part.0+0x46>
		out(pad_char, ctx);
   242b6:	4639      	mov	r1, r7
   242b8:	4650      	mov	r0, sl
   242ba:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   242bc:	3c01      	subs	r4, #1
   242be:	e7de      	b.n	2427e <print_digits.part.0+0x42>
		out(pad_char, ctx);
   242c0:	4639      	mov	r1, r7
   242c2:	4650      	mov	r0, sl
   242c4:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   242c6:	3c01      	subs	r4, #1
   242c8:	e7e2      	b.n	24290 <print_digits.part.0+0x54>
   242ca:	bf00      	nop
   242cc:	00048f69 	.word	0x00048f69

000242d0 <__printk_hook_install>:
	_char_out = fn;
   242d0:	4b01      	ldr	r3, [pc, #4]	; (242d8 <__printk_hook_install+0x8>)
   242d2:	6018      	str	r0, [r3, #0]
}
   242d4:	4770      	bx	lr
   242d6:	bf00      	nop
   242d8:	20020644 	.word	0x20020644

000242dc <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
   242dc:	2300      	movs	r3, #0
{
   242de:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   242e0:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   242e2:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   242e4:	4803      	ldr	r0, [pc, #12]	; (242f4 <vprintk+0x18>)
   242e6:	460b      	mov	r3, r1
   242e8:	a901      	add	r1, sp, #4
   242ea:	f01d fb69 	bl	419c0 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   242ee:	b003      	add	sp, #12
   242f0:	f85d fb04 	ldr.w	pc, [sp], #4
   242f4:	0002422d 	.word	0x0002422d

000242f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   242f8:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   242fa:	2500      	movs	r5, #0
{
   242fc:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   242fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   24302:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   24304:	a901      	add	r1, sp, #4
   24306:	4805      	ldr	r0, [pc, #20]	; (2431c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   24308:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   2430a:	f01d fb59 	bl	419c0 <z_vprintk>

	if (ctx.count < ctx.max) {
   2430e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   24312:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   24314:	bfb8      	it	lt
   24316:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   24318:	b005      	add	sp, #20
   2431a:	bd30      	pop	{r4, r5, pc}
   2431c:	0004199b 	.word	0x0004199b

00024320 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   24320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24324:	f8b0 b01c 	ldrh.w	fp, [r0, #28]
{
   24328:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2432a:	f01b 0f08 	tst.w	fp, #8
{
   2432e:	4692      	mov	sl, r2
	if (processing) {
   24330:	d021      	beq.n	24376 <process_event+0x56>
		if (evt == EVT_COMPLETE) {
   24332:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   24334:	bf0c      	ite	eq
   24336:	f04b 0b10 	orreq.w	fp, fp, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2433a:	f04b 0b20 	orrne.w	fp, fp, #32
   2433e:	f8a0 b01c 	strh.w	fp, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   24342:	3414      	adds	r4, #20
   24344:	4620      	mov	r0, r4
   24346:	f01a f98b 	bl	3e660 <z_spin_unlock_valid>
   2434a:	b968      	cbnz	r0, 24368 <process_event+0x48>
   2434c:	2384      	movs	r3, #132	; 0x84
   2434e:	4aa7      	ldr	r2, [pc, #668]	; (245ec <process_event+0x2cc>)
   24350:	49a7      	ldr	r1, [pc, #668]	; (245f0 <process_event+0x2d0>)
   24352:	48a8      	ldr	r0, [pc, #672]	; (245f4 <process_event+0x2d4>)
   24354:	f01d fc48 	bl	41be8 <printk>
   24358:	4621      	mov	r1, r4
   2435a:	48a7      	ldr	r0, [pc, #668]	; (245f8 <process_event+0x2d8>)
   2435c:	f01d fc44 	bl	41be8 <printk>
   24360:	2184      	movs	r1, #132	; 0x84
   24362:	48a2      	ldr	r0, [pc, #648]	; (245ec <process_event+0x2cc>)
   24364:	f01d fe5a 	bl	4201c <assert_post_action>
   24368:	f38a 8811 	msr	BASEPRI, sl
   2436c:	f3bf 8f6f 	isb	sy
}
   24370:	b003      	add	sp, #12
   24372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   24376:	4ea1      	ldr	r6, [pc, #644]	; (245fc <process_event+0x2dc>)
   24378:	f8df 8278 	ldr.w	r8, [pc, #632]	; 245f4 <process_event+0x2d4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2437c:	f00b 0b07 	and.w	fp, fp, #7
		if (evt == EVT_RECHECK) {
   24380:	2902      	cmp	r1, #2
   24382:	d107      	bne.n	24394 <process_event+0x74>
			evt = process_recheck(mgr);
   24384:	4620      	mov	r0, r4
   24386:	f01d fc49 	bl	41c1c <process_recheck>
		if (evt == EVT_NOP) {
   2438a:	2800      	cmp	r0, #0
   2438c:	d0d9      	beq.n	24342 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   2438e:	2801      	cmp	r0, #1
   24390:	f040 80be 	bne.w	24510 <process_event+0x1f0>
			res = mgr->last_res;
   24394:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24398:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   2439a:	f1b9 0f00 	cmp.w	r9, #0
   2439e:	da71      	bge.n	24484 <process_event+0x164>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   243a0:	2700      	movs	r7, #0
		*clients = mgr->clients;
   243a2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   243a4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   243a8:	e9c4 7700 	strd	r7, r7, [r4]
   243ac:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   243b0:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   243b2:	9700      	str	r7, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   243b4:	8ba3      	ldrh	r3, [r4, #28]
   243b6:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   243ba:	455a      	cmp	r2, fp
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   243bc:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
   243be:	d003      	beq.n	243c8 <process_event+0xa8>
		if (do_monitors
   243c0:	68a2      	ldr	r2, [r4, #8]
   243c2:	2a00      	cmp	r2, #0
   243c4:	f040 8176 	bne.w	246b4 <process_event+0x394>
		    || !sys_slist_is_empty(&clients)
   243c8:	2d00      	cmp	r5, #0
   243ca:	f040 8176 	bne.w	246ba <process_event+0x39a>
		    || (transit != NULL)) {
   243ce:	9a00      	ldr	r2, [sp, #0]
   243d0:	2a00      	cmp	r2, #0
   243d2:	d047      	beq.n	24464 <process_event+0x144>
   243d4:	462f      	mov	r7, r5
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   243d6:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   243da:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   243de:	83a3      	strh	r3, [r4, #28]
   243e0:	4658      	mov	r0, fp
   243e2:	f01a f93d 	bl	3e660 <z_spin_unlock_valid>
   243e6:	b968      	cbnz	r0, 24404 <process_event+0xe4>
   243e8:	2384      	movs	r3, #132	; 0x84
   243ea:	4a80      	ldr	r2, [pc, #512]	; (245ec <process_event+0x2cc>)
   243ec:	4980      	ldr	r1, [pc, #512]	; (245f0 <process_event+0x2d0>)
   243ee:	4640      	mov	r0, r8
   243f0:	f01d fbfa 	bl	41be8 <printk>
   243f4:	4659      	mov	r1, fp
   243f6:	4880      	ldr	r0, [pc, #512]	; (245f8 <process_event+0x2d8>)
   243f8:	f01d fbf6 	bl	41be8 <printk>
   243fc:	2184      	movs	r1, #132	; 0x84
   243fe:	487b      	ldr	r0, [pc, #492]	; (245ec <process_event+0x2cc>)
   24400:	f01d fe0c 	bl	4201c <assert_post_action>
   24404:	f38a 8811 	msr	BASEPRI, sl
   24408:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2440c:	2f00      	cmp	r7, #0
   2440e:	f040 8156 	bne.w	246be <process_event+0x39e>
	while (!sys_slist_is_empty(list)) {
   24412:	2d00      	cmp	r5, #0
   24414:	f040 8167 	bne.w	246e6 <process_event+0x3c6>
			if (transit != NULL) {
   24418:	9b00      	ldr	r3, [sp, #0]
   2441a:	b113      	cbz	r3, 24422 <process_event+0x102>
				transit(mgr, transition_complete);
   2441c:	4978      	ldr	r1, [pc, #480]	; (24600 <process_event+0x2e0>)
   2441e:	4620      	mov	r0, r4
   24420:	4798      	blx	r3
	__asm__ volatile(
   24422:	f04f 0320 	mov.w	r3, #32
   24426:	f3ef 8a11 	mrs	sl, BASEPRI
   2442a:	f383 8811 	msr	BASEPRI, r3
   2442e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24432:	4658      	mov	r0, fp
   24434:	f01a f906 	bl	3e644 <z_spin_lock_valid>
   24438:	b968      	cbnz	r0, 24456 <process_event+0x136>
   2443a:	235c      	movs	r3, #92	; 0x5c
   2443c:	4a6b      	ldr	r2, [pc, #428]	; (245ec <process_event+0x2cc>)
   2443e:	4971      	ldr	r1, [pc, #452]	; (24604 <process_event+0x2e4>)
   24440:	4640      	mov	r0, r8
   24442:	f01d fbd1 	bl	41be8 <printk>
   24446:	4659      	mov	r1, fp
   24448:	486f      	ldr	r0, [pc, #444]	; (24608 <process_event+0x2e8>)
   2444a:	f01d fbcd 	bl	41be8 <printk>
   2444e:	215c      	movs	r1, #92	; 0x5c
   24450:	4866      	ldr	r0, [pc, #408]	; (245ec <process_event+0x2cc>)
   24452:	f01d fde3 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   24456:	4658      	mov	r0, fp
   24458:	f01a f912 	bl	3e680 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2445c:	8ba3      	ldrh	r3, [r4, #28]
   2445e:	f023 0308 	bic.w	r3, r3, #8
   24462:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   24464:	8ba3      	ldrh	r3, [r4, #28]
   24466:	06da      	lsls	r2, r3, #27
   24468:	f140 8147 	bpl.w	246fa <process_event+0x3da>
			evt = EVT_COMPLETE;
   2446c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2446e:	f023 0310 	bic.w	r3, r3, #16
   24472:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   24474:	f8b4 b01c 	ldrh.w	fp, [r4, #28]
   24478:	f00b 0b07 	and.w	fp, fp, #7
	} while (evt != EVT_NOP);
   2447c:	2900      	cmp	r1, #0
   2447e:	f47f af7f 	bne.w	24380 <process_event+0x60>
out:
   24482:	e75e      	b.n	24342 <process_event+0x22>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24484:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   24488:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2448a:	2901      	cmp	r1, #1
   2448c:	d821      	bhi.n	244d2 <process_event+0x1b2>
	list->head = NULL;
   2448e:	2100      	movs	r1, #0
   24490:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   24494:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   24496:	6825      	ldr	r5, [r4, #0]
   24498:	b29b      	uxth	r3, r3
	list->tail = NULL;
   2449a:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   2449e:	d10a      	bne.n	244b6 <process_event+0x196>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   244a0:	b13d      	cbz	r5, 244b2 <process_event+0x192>
   244a2:	4629      	mov	r1, r5
   244a4:	8be2      	ldrh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   244a6:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   244a8:	3201      	adds	r2, #1
   244aa:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   244ac:	2900      	cmp	r1, #0
   244ae:	d1fa      	bne.n	244a6 <process_event+0x186>
   244b0:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   244b2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   244b6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   244b8:	4620      	mov	r0, r4
   244ba:	f01d fbaf 	bl	41c1c <process_recheck>
   244be:	2800      	cmp	r0, #0
   244c0:	f000 80f4 	beq.w	246ac <process_event+0x38c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   244c4:	8ba3      	ldrh	r3, [r4, #28]
   244c6:	f043 0320 	orr.w	r3, r3, #32
   244ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   244cc:	2300      	movs	r3, #0
   244ce:	9300      	str	r3, [sp, #0]
   244d0:	e770      	b.n	243b4 <process_event+0x94>
	} else if (state == ONOFF_STATE_TO_OFF) {
   244d2:	2a04      	cmp	r2, #4
   244d4:	d10f      	bne.n	244f6 <process_event+0x1d6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   244d6:	f023 0307 	bic.w	r3, r3, #7
   244da:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   244dc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   244de:	4620      	mov	r0, r4
   244e0:	f01d fb9c 	bl	41c1c <process_recheck>
   244e4:	2800      	cmp	r0, #0
   244e6:	f000 80e3 	beq.w	246b0 <process_event+0x390>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   244ea:	f042 0220 	orr.w	r2, r2, #32
   244ee:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   244f0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   244f2:	9500      	str	r5, [sp, #0]
   244f4:	e75e      	b.n	243b4 <process_event+0x94>
		__ASSERT_NO_MSG(false);
   244f6:	4640      	mov	r0, r8
   244f8:	f240 1319 	movw	r3, #281	; 0x119
   244fc:	4632      	mov	r2, r6
   244fe:	4943      	ldr	r1, [pc, #268]	; (2460c <process_event+0x2ec>)
   24500:	f01d fb72 	bl	41be8 <printk>
   24504:	f240 1119 	movw	r1, #281	; 0x119
   24508:	4630      	mov	r0, r6
   2450a:	f01d fd87 	bl	4201c <assert_post_action>
   2450e:	e7ef      	b.n	244f0 <process_event+0x1d0>
		} else if (evt == EVT_START) {
   24510:	2803      	cmp	r0, #3
   24512:	d135      	bne.n	24580 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   24514:	f1bb 0f00 	cmp.w	fp, #0
   24518:	d00b      	beq.n	24532 <process_event+0x212>
   2451a:	493d      	ldr	r1, [pc, #244]	; (24610 <process_event+0x2f0>)
   2451c:	4640      	mov	r0, r8
   2451e:	f44f 73aa 	mov.w	r3, #340	; 0x154
   24522:	4632      	mov	r2, r6
   24524:	f01d fb60 	bl	41be8 <printk>
   24528:	f44f 71aa 	mov.w	r1, #340	; 0x154
   2452c:	4630      	mov	r0, r6
   2452e:	f01d fd75 	bl	4201c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24532:	6823      	ldr	r3, [r4, #0]
   24534:	b95b      	cbnz	r3, 2454e <process_event+0x22e>
   24536:	4937      	ldr	r1, [pc, #220]	; (24614 <process_event+0x2f4>)
   24538:	4640      	mov	r0, r8
   2453a:	f240 1355 	movw	r3, #341	; 0x155
   2453e:	4632      	mov	r2, r6
   24540:	f01d fb52 	bl	41be8 <printk>
   24544:	f240 1155 	movw	r1, #341	; 0x155
   24548:	4630      	mov	r0, r6
   2454a:	f01d fd67 	bl	4201c <assert_post_action>
			transit = mgr->transitions->start;
   2454e:	6923      	ldr	r3, [r4, #16]
   24550:	681b      	ldr	r3, [r3, #0]
   24552:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24554:	b95b      	cbnz	r3, 2456e <process_event+0x24e>
   24556:	4930      	ldr	r1, [pc, #192]	; (24618 <process_event+0x2f8>)
   24558:	4640      	mov	r0, r8
   2455a:	f44f 73ac 	mov.w	r3, #344	; 0x158
   2455e:	4632      	mov	r2, r6
   24560:	f01d fb42 	bl	41be8 <printk>
   24564:	f44f 71ac 	mov.w	r1, #344	; 0x158
   24568:	4630      	mov	r0, r6
   2456a:	f01d fd57 	bl	4201c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2456e:	8ba3      	ldrh	r3, [r4, #28]
   24570:	f023 0307 	bic.w	r3, r3, #7
   24574:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   24578:	2500      	movs	r5, #0
   2457a:	83a3      	strh	r3, [r4, #28]
		res = 0;
   2457c:	46a9      	mov	r9, r5
   2457e:	e719      	b.n	243b4 <process_event+0x94>
		} else if (evt == EVT_STOP) {
   24580:	2804      	cmp	r0, #4
   24582:	d14f      	bne.n	24624 <process_event+0x304>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   24584:	f1bb 0f02 	cmp.w	fp, #2
   24588:	d00b      	beq.n	245a2 <process_event+0x282>
   2458a:	4924      	ldr	r1, [pc, #144]	; (2461c <process_event+0x2fc>)
   2458c:	4640      	mov	r0, r8
   2458e:	f240 135b 	movw	r3, #347	; 0x15b
   24592:	4632      	mov	r2, r6
   24594:	f01d fb28 	bl	41be8 <printk>
   24598:	f240 115b 	movw	r1, #347	; 0x15b
   2459c:	4630      	mov	r0, r6
   2459e:	f01d fd3d 	bl	4201c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   245a2:	8be3      	ldrh	r3, [r4, #30]
   245a4:	b15b      	cbz	r3, 245be <process_event+0x29e>
   245a6:	491e      	ldr	r1, [pc, #120]	; (24620 <process_event+0x300>)
   245a8:	4640      	mov	r0, r8
   245aa:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   245ae:	4632      	mov	r2, r6
   245b0:	f01d fb1a 	bl	41be8 <printk>
   245b4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   245b8:	4630      	mov	r0, r6
   245ba:	f01d fd2f 	bl	4201c <assert_post_action>
			transit = mgr->transitions->stop;
   245be:	6923      	ldr	r3, [r4, #16]
   245c0:	685b      	ldr	r3, [r3, #4]
   245c2:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   245c4:	b95b      	cbnz	r3, 245de <process_event+0x2be>
   245c6:	4914      	ldr	r1, [pc, #80]	; (24618 <process_event+0x2f8>)
   245c8:	4640      	mov	r0, r8
   245ca:	f240 135f 	movw	r3, #351	; 0x15f
   245ce:	4632      	mov	r2, r6
   245d0:	f01d fb0a 	bl	41be8 <printk>
   245d4:	f240 115f 	movw	r1, #351	; 0x15f
   245d8:	4630      	mov	r0, r6
   245da:	f01d fd1f 	bl	4201c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   245de:	8ba3      	ldrh	r3, [r4, #28]
   245e0:	f023 0307 	bic.w	r3, r3, #7
   245e4:	f043 0304 	orr.w	r3, r3, #4
   245e8:	e7c6      	b.n	24578 <process_event+0x258>
   245ea:	bf00      	nop
   245ec:	00048d7b 	.word	0x00048d7b
   245f0:	00048dce 	.word	0x00048dce
   245f4:	0004825b 	.word	0x0004825b
   245f8:	00048de5 	.word	0x00048de5
   245fc:	00048f7a 	.word	0x00048f7a
   24600:	0002471d 	.word	0x0002471d
   24604:	00048da1 	.word	0x00048da1
   24608:	00048db6 	.word	0x00048db6
   2460c:	0004edb2 	.word	0x0004edb2
   24610:	00048f9c 	.word	0x00048f9c
   24614:	00048fa7 	.word	0x00048fa7
   24618:	00048fca 	.word	0x00048fca
   2461c:	00048fe1 	.word	0x00048fe1
   24620:	00048ff7 	.word	0x00048ff7
		} else if (evt == EVT_RESET) {
   24624:	2805      	cmp	r0, #5
   24626:	d132      	bne.n	2468e <process_event+0x36e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24628:	f1bb 0f01 	cmp.w	fp, #1
   2462c:	d00b      	beq.n	24646 <process_event+0x326>
   2462e:	4937      	ldr	r1, [pc, #220]	; (2470c <process_event+0x3ec>)
   24630:	4640      	mov	r0, r8
   24632:	f44f 73b1 	mov.w	r3, #354	; 0x162
   24636:	4632      	mov	r2, r6
   24638:	f01d fad6 	bl	41be8 <printk>
   2463c:	f44f 71b1 	mov.w	r1, #354	; 0x162
   24640:	4630      	mov	r0, r6
   24642:	f01d fceb 	bl	4201c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24646:	6823      	ldr	r3, [r4, #0]
   24648:	b95b      	cbnz	r3, 24662 <process_event+0x342>
   2464a:	4931      	ldr	r1, [pc, #196]	; (24710 <process_event+0x3f0>)
   2464c:	4640      	mov	r0, r8
   2464e:	f240 1363 	movw	r3, #355	; 0x163
   24652:	4632      	mov	r2, r6
   24654:	f01d fac8 	bl	41be8 <printk>
   24658:	f240 1163 	movw	r1, #355	; 0x163
   2465c:	4630      	mov	r0, r6
   2465e:	f01d fcdd 	bl	4201c <assert_post_action>
			transit = mgr->transitions->reset;
   24662:	6923      	ldr	r3, [r4, #16]
   24664:	689b      	ldr	r3, [r3, #8]
   24666:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24668:	b95b      	cbnz	r3, 24682 <process_event+0x362>
   2466a:	492a      	ldr	r1, [pc, #168]	; (24714 <process_event+0x3f4>)
   2466c:	4640      	mov	r0, r8
   2466e:	f44f 73b3 	mov.w	r3, #358	; 0x166
   24672:	4632      	mov	r2, r6
   24674:	f01d fab8 	bl	41be8 <printk>
   24678:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2467c:	4630      	mov	r0, r6
   2467e:	f01d fccd 	bl	4201c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24682:	8ba3      	ldrh	r3, [r4, #28]
   24684:	f023 0307 	bic.w	r3, r3, #7
   24688:	f043 0305 	orr.w	r3, r3, #5
   2468c:	e774      	b.n	24578 <process_event+0x258>
			__ASSERT_NO_MSG(false);
   2468e:	2500      	movs	r5, #0
   24690:	f240 1369 	movw	r3, #361	; 0x169
   24694:	4632      	mov	r2, r6
   24696:	4920      	ldr	r1, [pc, #128]	; (24718 <process_event+0x3f8>)
   24698:	4640      	mov	r0, r8
   2469a:	f01d faa5 	bl	41be8 <printk>
   2469e:	f240 1169 	movw	r1, #361	; 0x169
   246a2:	4630      	mov	r0, r6
   246a4:	f01d fcba 	bl	4201c <assert_post_action>
		onoff_transition_fn transit = NULL;
   246a8:	9500      	str	r5, [sp, #0]
   246aa:	e767      	b.n	2457c <process_event+0x25c>
   246ac:	9000      	str	r0, [sp, #0]
   246ae:	e681      	b.n	243b4 <process_event+0x94>
		if (process_recheck(mgr) != EVT_NOP) {
   246b0:	4605      	mov	r5, r0
   246b2:	e71e      	b.n	244f2 <process_event+0x1d2>
				   && !sys_slist_is_empty(&mgr->monitors);
   246b4:	2201      	movs	r2, #1
   246b6:	4617      	mov	r7, r2
   246b8:	e68d      	b.n	243d6 <process_event+0xb6>
   246ba:	2200      	movs	r2, #0
   246bc:	e7fb      	b.n	246b6 <process_event+0x396>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   246be:	68a1      	ldr	r1, [r4, #8]
   246c0:	2900      	cmp	r1, #0
   246c2:	f43f aea6 	beq.w	24412 <process_event+0xf2>
   246c6:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   246ca:	684b      	ldr	r3, [r1, #4]
   246cc:	9a01      	ldr	r2, [sp, #4]
   246ce:	461f      	mov	r7, r3
   246d0:	4620      	mov	r0, r4
   246d2:	464b      	mov	r3, r9
   246d4:	47b8      	blx	r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   246d6:	f1ba 0f00 	cmp.w	sl, #0
   246da:	f43f ae9a 	beq.w	24412 <process_event+0xf2>
   246de:	4651      	mov	r1, sl
   246e0:	f8da a000 	ldr.w	sl, [sl]
   246e4:	e7f1      	b.n	246ca <process_event+0x3aa>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   246e6:	f8d5 a000 	ldr.w	sl, [r5]
		notify_one(mgr, cli, state, res);
   246ea:	4629      	mov	r1, r5
   246ec:	464b      	mov	r3, r9
   246ee:	9a01      	ldr	r2, [sp, #4]
   246f0:	4620      	mov	r0, r4
   246f2:	f01d faaf 	bl	41c54 <notify_one>
	while (!sys_slist_is_empty(list)) {
   246f6:	4655      	mov	r5, sl
   246f8:	e68b      	b.n	24412 <process_event+0xf2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   246fa:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   246fe:	bf1e      	ittt	ne
   24700:	f023 0320 	bicne.w	r3, r3, #32
   24704:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   24706:	2102      	movne	r1, #2
   24708:	e6b4      	b.n	24474 <process_event+0x154>
   2470a:	bf00      	nop
   2470c:	00049006 	.word	0x00049006
   24710:	00048fa7 	.word	0x00048fa7
   24714:	00048fca 	.word	0x00048fca
   24718:	0004edb2 	.word	0x0004edb2

0002471c <transition_complete>:
{
   2471c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2471e:	4604      	mov	r4, r0
   24720:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24722:	f100 0514 	add.w	r5, r0, #20
   24726:	f04f 0320 	mov.w	r3, #32
   2472a:	f3ef 8611 	mrs	r6, BASEPRI
   2472e:	f383 8811 	msr	BASEPRI, r3
   24732:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24736:	4628      	mov	r0, r5
   24738:	f019 ff84 	bl	3e644 <z_spin_lock_valid>
   2473c:	b968      	cbnz	r0, 2475a <transition_complete+0x3e>
   2473e:	235c      	movs	r3, #92	; 0x5c
   24740:	4a0b      	ldr	r2, [pc, #44]	; (24770 <transition_complete+0x54>)
   24742:	490c      	ldr	r1, [pc, #48]	; (24774 <transition_complete+0x58>)
   24744:	480c      	ldr	r0, [pc, #48]	; (24778 <transition_complete+0x5c>)
   24746:	f01d fa4f 	bl	41be8 <printk>
   2474a:	4629      	mov	r1, r5
   2474c:	480b      	ldr	r0, [pc, #44]	; (2477c <transition_complete+0x60>)
   2474e:	f01d fa4b 	bl	41be8 <printk>
   24752:	215c      	movs	r1, #92	; 0x5c
   24754:	4806      	ldr	r0, [pc, #24]	; (24770 <transition_complete+0x54>)
   24756:	f01d fc61 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   2475a:	4628      	mov	r0, r5
   2475c:	f019 ff90 	bl	3e680 <z_spin_lock_set_owner>
	mgr->last_res = res;
   24760:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   24762:	4632      	mov	r2, r6
   24764:	4620      	mov	r0, r4
}
   24766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   2476a:	2101      	movs	r1, #1
   2476c:	f7ff bdd8 	b.w	24320 <process_event>
   24770:	00048d7b 	.word	0x00048d7b
   24774:	00048da1 	.word	0x00048da1
   24778:	0004825b 	.word	0x0004825b
   2477c:	00048db6 	.word	0x00048db6

00024780 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24784:	4604      	mov	r4, r0
   24786:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   24788:	f01d fa7a 	bl	41c80 <validate_args>

	if (rv < 0) {
   2478c:	1e06      	subs	r6, r0, #0
   2478e:	db5c      	blt.n	2484a <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24790:	f104 0914 	add.w	r9, r4, #20
   24794:	f04f 0320 	mov.w	r3, #32
   24798:	f3ef 8a11 	mrs	sl, BASEPRI
   2479c:	f383 8811 	msr	BASEPRI, r3
   247a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247a4:	4648      	mov	r0, r9
   247a6:	f019 ff4d 	bl	3e644 <z_spin_lock_valid>
   247aa:	b968      	cbnz	r0, 247c8 <onoff_request+0x48>
   247ac:	235c      	movs	r3, #92	; 0x5c
   247ae:	4a38      	ldr	r2, [pc, #224]	; (24890 <onoff_request+0x110>)
   247b0:	4938      	ldr	r1, [pc, #224]	; (24894 <onoff_request+0x114>)
   247b2:	4839      	ldr	r0, [pc, #228]	; (24898 <onoff_request+0x118>)
   247b4:	f01d fa18 	bl	41be8 <printk>
   247b8:	4649      	mov	r1, r9
   247ba:	4838      	ldr	r0, [pc, #224]	; (2489c <onoff_request+0x11c>)
   247bc:	f01d fa14 	bl	41be8 <printk>
   247c0:	215c      	movs	r1, #92	; 0x5c
   247c2:	4833      	ldr	r0, [pc, #204]	; (24890 <onoff_request+0x110>)
   247c4:	f01d fc2a 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   247c8:	4648      	mov	r0, r9
   247ca:	f019 ff59 	bl	3e680 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   247ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   247d2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   247d4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   247d6:	428b      	cmp	r3, r1
   247d8:	f002 0507 	and.w	r5, r2, #7
   247dc:	d050      	beq.n	24880 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   247de:	2d02      	cmp	r5, #2
   247e0:	d121      	bne.n	24826 <onoff_request+0xa6>
	rv = state;
   247e2:	462e      	mov	r6, r5
		/* Increment reference count, notify in exit */
		notify = true;
   247e4:	2701      	movs	r7, #1
		mgr->refs += 1U;
   247e6:	3301      	adds	r3, #1
   247e8:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247ea:	4648      	mov	r0, r9
   247ec:	f019 ff38 	bl	3e660 <z_spin_unlock_valid>
   247f0:	b968      	cbnz	r0, 2480e <onoff_request+0x8e>
   247f2:	2384      	movs	r3, #132	; 0x84
   247f4:	4a26      	ldr	r2, [pc, #152]	; (24890 <onoff_request+0x110>)
   247f6:	492a      	ldr	r1, [pc, #168]	; (248a0 <onoff_request+0x120>)
   247f8:	4827      	ldr	r0, [pc, #156]	; (24898 <onoff_request+0x118>)
   247fa:	f01d f9f5 	bl	41be8 <printk>
   247fe:	4649      	mov	r1, r9
   24800:	4828      	ldr	r0, [pc, #160]	; (248a4 <onoff_request+0x124>)
   24802:	f01d f9f1 	bl	41be8 <printk>
   24806:	2184      	movs	r1, #132	; 0x84
   24808:	4821      	ldr	r0, [pc, #132]	; (24890 <onoff_request+0x110>)
   2480a:	f01d fc07 	bl	4201c <assert_post_action>
	__asm__ volatile(
   2480e:	f38a 8811 	msr	BASEPRI, sl
   24812:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24816:	b1c7      	cbz	r7, 2484a <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   24818:	2300      	movs	r3, #0
   2481a:	462a      	mov	r2, r5
   2481c:	4641      	mov	r1, r8
   2481e:	4620      	mov	r0, r4
   24820:	f01d fa18 	bl	41c54 <notify_one>
   24824:	e011      	b.n	2484a <onoff_request+0xca>
	} else if ((state == ONOFF_STATE_OFF)
   24826:	0793      	lsls	r3, r2, #30
   24828:	d001      	beq.n	2482e <onoff_request+0xae>
		   || (state == ONOFF_STATE_TO_ON)) {
   2482a:	2d06      	cmp	r5, #6
   2482c:	d110      	bne.n	24850 <onoff_request+0xd0>
	parent->next = child;
   2482e:	2300      	movs	r3, #0
   24830:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
   24834:	6863      	ldr	r3, [r4, #4]
   24836:	b9f3      	cbnz	r3, 24876 <onoff_request+0xf6>
	list->head = node;
   24838:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
   2483c:	462e      	mov	r6, r5
   2483e:	bb0d      	cbnz	r5, 24884 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   24840:	4652      	mov	r2, sl
   24842:	2102      	movs	r1, #2
   24844:	4620      	mov	r0, r4
   24846:	f7ff fd6b 	bl	24320 <process_event>
		}
	}

	return rv;
}
   2484a:	4630      	mov	r0, r6
   2484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   24850:	2d05      	cmp	r5, #5
   24852:	d019      	beq.n	24888 <onoff_request+0x108>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24854:	2d01      	cmp	r5, #1
   24856:	d00b      	beq.n	24870 <onoff_request+0xf0>
   24858:	4913      	ldr	r1, [pc, #76]	; (248a8 <onoff_request+0x128>)
   2485a:	480f      	ldr	r0, [pc, #60]	; (24898 <onoff_request+0x118>)
   2485c:	f240 13c5 	movw	r3, #453	; 0x1c5
   24860:	4a12      	ldr	r2, [pc, #72]	; (248ac <onoff_request+0x12c>)
   24862:	f01d f9c1 	bl	41be8 <printk>
   24866:	f240 11c5 	movw	r1, #453	; 0x1c5
   2486a:	4810      	ldr	r0, [pc, #64]	; (248ac <onoff_request+0x12c>)
   2486c:	f01d fbd6 	bl	4201c <assert_post_action>
		rv = -EIO;
   24870:	f06f 0604 	mvn.w	r6, #4
   24874:	e006      	b.n	24884 <onoff_request+0x104>
	parent->next = child;
   24876:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   2487a:	f8c4 8004 	str.w	r8, [r4, #4]
   2487e:	e7dd      	b.n	2483c <onoff_request+0xbc>
		rv = -EAGAIN;
   24880:	f06f 060a 	mvn.w	r6, #10
   24884:	2700      	movs	r7, #0
   24886:	e7b0      	b.n	247ea <onoff_request+0x6a>
		rv = -ENOTSUP;
   24888:	f06f 0685 	mvn.w	r6, #133	; 0x85
   2488c:	e7fa      	b.n	24884 <onoff_request+0x104>
   2488e:	bf00      	nop
   24890:	00048d7b 	.word	0x00048d7b
   24894:	00048da1 	.word	0x00048da1
   24898:	0004825b 	.word	0x0004825b
   2489c:	00048db6 	.word	0x00048db6
   248a0:	00048dce 	.word	0x00048dce
   248a4:	00048de5 	.word	0x00048de5
   248a8:	00049006 	.word	0x00049006
   248ac:	00048f7a 	.word	0x00048f7a

000248b0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   248b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   248b4:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   248b6:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   248b8:	f103 0801 	add.w	r8, r3, #1
	unsigned int d = tm->tm_mday - 1;
   248bc:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248be:	f240 746c 	movw	r4, #1900	; 0x76c
   248c2:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   248c4:	461e      	mov	r6, r3
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248c6:	6943      	ldr	r3, [r0, #20]
{
   248c8:	4681      	mov	r9, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248ca:	18e1      	adds	r1, r4, r3
   248cc:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
	y -= m <= 2;
   248d0:	f1b8 0f02 	cmp.w	r8, #2
   248d4:	bf8c      	ite	hi
   248d6:	2300      	movhi	r3, #0
   248d8:	2301      	movls	r3, #1
   248da:	1acc      	subs	r4, r1, r3
   248dc:	f162 0500 	sbc.w	r5, r2, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   248e0:	2c00      	cmp	r4, #0
   248e2:	f175 0300 	sbcs.w	r3, r5, #0
   248e6:	da5c      	bge.n	249a2 <timeutil_timegm64+0xf2>
   248e8:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   248ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
   248f0:	2300      	movs	r3, #0
   248f2:	1820      	adds	r0, r4, r0
   248f4:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   248f8:	f7f8 fa90 	bl	1ce1c <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   248fc:	4b2c      	ldr	r3, [pc, #176]	; (249b0 <timeutil_timegm64+0x100>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   248fe:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   24902:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   24906:	e9d9 5300 	ldrd	r5, r3, [r9]
   2490a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2490c:	f1b8 0f02 	cmp.w	r8, #2
   24910:	bf8c      	ite	hi
   24912:	f06f 0e02 	mvnhi.w	lr, #2
   24916:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2491a:	ea4f 7be3 	mov.w	fp, r3, asr #31
   2491e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24922:	44f0      	add	r8, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   24924:	fbcc ab03 	smlal	sl, fp, ip, r3
   24928:	fbaa 230c 	umull	r2, r3, sl, ip
   2492c:	fb0c 330b 	mla	r3, ip, fp, r3
   24930:	eb12 0905 	adds.w	r9, r2, r5
   24934:	eb43 7ae5 	adc.w	sl, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24938:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2493c:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24940:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   24944:	fb05 c504 	mla	r5, r5, r4, ip
   24948:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2494c:	fb0e fe08 	mul.w	lr, lr, r8
   24950:	f04f 0805 	mov.w	r8, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24954:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24958:	f10e 0e02 	add.w	lr, lr, #2
   2495c:	fbbe fef8 	udiv	lr, lr, r8
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24960:	4435      	add	r5, r6
	return era * 146097 + (time_t)doe - 719468;
   24962:	f8df c058 	ldr.w	ip, [pc, #88]	; 249bc <timeutil_timegm64+0x10c>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24966:	1b2c      	subs	r4, r5, r4
   24968:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   2496a:	fba0 450c 	umull	r4, r5, r0, ip
   2496e:	fb0c 5501 	mla	r5, ip, r1, r5
   24972:	4910      	ldr	r1, [pc, #64]	; (249b4 <timeutil_timegm64+0x104>)
   24974:	1863      	adds	r3, r4, r1
   24976:	9300      	str	r3, [sp, #0]
   24978:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
	time += 86400LL * ndays;
   2497c:	490e      	ldr	r1, [pc, #56]	; (249b8 <timeutil_timegm64+0x108>)
	return era * 146097 + (time_t)doe - 719468;
   2497e:	9301      	str	r3, [sp, #4]
   24980:	e9dd 6700 	ldrd	r6, r7, [sp]
   24984:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   24988:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   2498c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   24990:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   24994:	eb14 0009 	adds.w	r0, r4, r9
   24998:	eb45 010a 	adc.w	r1, r5, sl
   2499c:	b003      	add	sp, #12
   2499e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   249a2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   249a6:	2300      	movs	r3, #0
   249a8:	4620      	mov	r0, r4
   249aa:	4629      	mov	r1, r5
   249ac:	e7a4      	b.n	248f8 <timeutil_timegm64+0x48>
   249ae:	bf00      	nop
   249b0:	fffffe70 	.word	0xfffffe70
   249b4:	fff50594 	.word	0xfff50594
   249b8:	00015180 	.word	0x00015180
   249bc:	00023ab1 	.word	0x00023ab1

000249c0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   249c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249c4:	4607      	mov	r7, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   249c6:	4d16      	ldr	r5, [pc, #88]	; (24a20 <z_work_q_main+0x60>)
   249c8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 24a2c <z_work_q_main+0x6c>
	return z_impl_k_queue_get(queue, timeout);
   249cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   249d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   249d4:	4638      	mov	r0, r7
   249d6:	f018 fa63 	bl	3cea0 <z_impl_k_queue_get>
		if (work == NULL) {
   249da:	4604      	mov	r4, r0
   249dc:	2800      	cmp	r0, #0
   249de:	d0f5      	beq.n	249cc <z_work_q_main+0xc>
		handler = work->handler;
   249e0:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   249e2:	b966      	cbnz	r6, 249fe <z_work_q_main+0x3e>
   249e4:	4641      	mov	r1, r8
   249e6:	231c      	movs	r3, #28
   249e8:	462a      	mov	r2, r5
   249ea:	480e      	ldr	r0, [pc, #56]	; (24a24 <z_work_q_main+0x64>)
   249ec:	f01d f8fc 	bl	41be8 <printk>
   249f0:	480d      	ldr	r0, [pc, #52]	; (24a28 <z_work_q_main+0x68>)
   249f2:	f01d f8f9 	bl	41be8 <printk>
   249f6:	211c      	movs	r1, #28
   249f8:	4628      	mov	r0, r5
   249fa:	f01d fb0f 	bl	4201c <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   249fe:	f104 0308 	add.w	r3, r4, #8
   24a02:	e8d3 2fef 	ldaex	r2, [r3]
   24a06:	f022 0101 	bic.w	r1, r2, #1
   24a0a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24a0e:	2800      	cmp	r0, #0
   24a10:	d1f7      	bne.n	24a02 <z_work_q_main+0x42>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   24a12:	07d3      	lsls	r3, r2, #31
   24a14:	d501      	bpl.n	24a1a <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   24a16:	4620      	mov	r0, r4
   24a18:	47b0      	blx	r6
	z_impl_k_yield();
   24a1a:	f019 fa71 	bl	3df00 <z_impl_k_yield>
   24a1e:	e7d5      	b.n	249cc <z_work_q_main+0xc>
   24a20:	0004901c 	.word	0x0004901c
   24a24:	0004825b 	.word	0x0004825b
   24a28:	00049056 	.word	0x00049056
   24a2c:	0004903f 	.word	0x0004903f

00024a30 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   24a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   24a32:	460e      	mov	r6, r1
   24a34:	2900      	cmp	r1, #0
   24a36:	f000 8081 	beq.w	24b3c <sys_heap_free+0x10c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   24a3a:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a3c:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   24a3e:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a40:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   24a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24a46:	bf2c      	ite	cs
   24a48:	2408      	movcs	r4, #8
   24a4a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24a4c:	1b0c      	subs	r4, r1, r4
   24a4e:	1b64      	subs	r4, r4, r5
   24a50:	bf48      	it	mi
   24a52:	3407      	addmi	r4, #7
   24a54:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a56:	4621      	mov	r1, r4
   24a58:	f01d f952 	bl	41d00 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   24a5c:	07c2      	lsls	r2, r0, #31
   24a5e:	d40d      	bmi.n	24a7c <sys_heap_free+0x4c>
   24a60:	239a      	movs	r3, #154	; 0x9a
   24a62:	4a37      	ldr	r2, [pc, #220]	; (24b40 <sys_heap_free+0x110>)
   24a64:	4937      	ldr	r1, [pc, #220]	; (24b44 <sys_heap_free+0x114>)
   24a66:	4838      	ldr	r0, [pc, #224]	; (24b48 <sys_heap_free+0x118>)
   24a68:	f01d f8be 	bl	41be8 <printk>
   24a6c:	4631      	mov	r1, r6
   24a6e:	4837      	ldr	r0, [pc, #220]	; (24b4c <sys_heap_free+0x11c>)
   24a70:	f01d f8ba 	bl	41be8 <printk>
   24a74:	219a      	movs	r1, #154	; 0x9a
   24a76:	4832      	ldr	r0, [pc, #200]	; (24b40 <sys_heap_free+0x110>)
   24a78:	f01d fad0 	bl	4201c <assert_post_action>
	return c + chunk_size(h, c);
   24a7c:	4621      	mov	r1, r4
   24a7e:	4628      	mov	r0, r5
   24a80:	f01d f954 	bl	41d2c <chunk_size>
   24a84:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   24a86:	2200      	movs	r2, #0
   24a88:	4639      	mov	r1, r7
   24a8a:	4628      	mov	r0, r5
   24a8c:	f01d f938 	bl	41d00 <chunk_field>
   24a90:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   24a92:	4284      	cmp	r4, r0
   24a94:	d00d      	beq.n	24ab2 <sys_heap_free+0x82>
   24a96:	23a3      	movs	r3, #163	; 0xa3
   24a98:	4a29      	ldr	r2, [pc, #164]	; (24b40 <sys_heap_free+0x110>)
   24a9a:	492d      	ldr	r1, [pc, #180]	; (24b50 <sys_heap_free+0x120>)
   24a9c:	482a      	ldr	r0, [pc, #168]	; (24b48 <sys_heap_free+0x118>)
   24a9e:	f01d f8a3 	bl	41be8 <printk>
   24aa2:	4631      	mov	r1, r6
   24aa4:	482b      	ldr	r0, [pc, #172]	; (24b54 <sys_heap_free+0x124>)
   24aa6:	f01d f89f 	bl	41be8 <printk>
   24aaa:	21a3      	movs	r1, #163	; 0xa3
   24aac:	4824      	ldr	r0, [pc, #144]	; (24b40 <sys_heap_free+0x110>)
   24aae:	f01d fab5 	bl	4201c <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   24ab2:	2200      	movs	r2, #0
   24ab4:	4621      	mov	r1, r4
   24ab6:	4628      	mov	r0, r5
   24ab8:	f01d f93e 	bl	41d38 <set_chunk_used>
	return c + chunk_size(h, c);
   24abc:	4621      	mov	r1, r4
   24abe:	f01d f935 	bl	41d2c <chunk_size>
   24ac2:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24ac4:	2201      	movs	r2, #1
   24ac6:	4631      	mov	r1, r6
   24ac8:	4628      	mov	r0, r5
   24aca:	f01d f919 	bl	41d00 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   24ace:	07c3      	lsls	r3, r0, #31
   24ad0:	d40c      	bmi.n	24aec <sys_heap_free+0xbc>
		free_list_remove(h, right_chunk(h, c));
   24ad2:	4631      	mov	r1, r6
   24ad4:	4628      	mov	r0, r5
   24ad6:	f01d f9d5 	bl	41e84 <free_list_remove>
	return c + chunk_size(h, c);
   24ada:	4621      	mov	r1, r4
   24adc:	4628      	mov	r0, r5
   24ade:	f01d f925 	bl	41d2c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24ae2:	4621      	mov	r1, r4
   24ae4:	1822      	adds	r2, r4, r0
   24ae6:	4628      	mov	r0, r5
   24ae8:	f01d f958 	bl	41d9c <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24aec:	2200      	movs	r2, #0
   24aee:	4621      	mov	r1, r4
   24af0:	4628      	mov	r0, r5
   24af2:	f01d f905 	bl	41d00 <chunk_field>
   24af6:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24af8:	2201      	movs	r2, #1
   24afa:	4639      	mov	r1, r7
   24afc:	4628      	mov	r0, r5
   24afe:	f01d f8ff 	bl	41d00 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   24b02:	f010 0601 	ands.w	r6, r0, #1
   24b06:	d113      	bne.n	24b30 <sys_heap_free+0x100>
		free_list_remove(h, left_chunk(h, c));
   24b08:	4639      	mov	r1, r7
   24b0a:	4628      	mov	r0, r5
   24b0c:	f01d f9ba 	bl	41e84 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   24b10:	4621      	mov	r1, r4
   24b12:	4632      	mov	r2, r6
   24b14:	4628      	mov	r0, r5
   24b16:	f01d f8f3 	bl	41d00 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   24b1a:	4622      	mov	r2, r4
   24b1c:	1a21      	subs	r1, r4, r0
   24b1e:	4628      	mov	r0, r5
   24b20:	f01d f93c 	bl	41d9c <merge_chunks>
   24b24:	4621      	mov	r1, r4
   24b26:	4632      	mov	r2, r6
   24b28:	4628      	mov	r0, r5
   24b2a:	f01d f8e9 	bl	41d00 <chunk_field>
   24b2e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   24b30:	4621      	mov	r1, r4
   24b32:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   24b34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   24b38:	f01d b9fc 	b.w	41f34 <free_list_add>
}
   24b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b3e:	bf00      	nop
   24b40:	00049071 	.word	0x00049071
   24b44:	00049092 	.word	0x00049092
   24b48:	0004825b 	.word	0x0004825b
   24b4c:	000490a3 	.word	0x000490a3
   24b50:	000490db 	.word	0x000490db
   24b54:	00049101 	.word	0x00049101

00024b58 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   24b58:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b5e:	4607      	mov	r7, r0
   24b60:	460d      	mov	r5, r1
   24b62:	4616      	mov	r6, r2
   24b64:	d212      	bcs.n	24b8c <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   24b66:	2a04      	cmp	r2, #4
   24b68:	d80e      	bhi.n	24b88 <sys_heap_init+0x30>
   24b6a:	4943      	ldr	r1, [pc, #268]	; (24c78 <sys_heap_init+0x120>)
   24b6c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   24b70:	4a42      	ldr	r2, [pc, #264]	; (24c7c <sys_heap_init+0x124>)
   24b72:	4843      	ldr	r0, [pc, #268]	; (24c80 <sys_heap_init+0x128>)
   24b74:	f01d f838 	bl	41be8 <printk>
   24b78:	4842      	ldr	r0, [pc, #264]	; (24c84 <sys_heap_init+0x12c>)
   24b7a:	f01d f835 	bl	41be8 <printk>
   24b7e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   24b82:	483e      	ldr	r0, [pc, #248]	; (24c7c <sys_heap_init+0x124>)
   24b84:	f01d fa4a 	bl	4201c <assert_post_action>
   24b88:	2304      	movs	r3, #4
   24b8a:	e000      	b.n	24b8e <sys_heap_init+0x36>
   24b8c:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
   24b8e:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24b90:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24b92:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24b94:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24b98:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24b9c:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24b9e:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24ba0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24ba4:	d80e      	bhi.n	24bc4 <sys_heap_init+0x6c>
   24ba6:	4938      	ldr	r1, [pc, #224]	; (24c88 <sys_heap_init+0x130>)
   24ba8:	f240 1337 	movw	r3, #311	; 0x137
   24bac:	4a33      	ldr	r2, [pc, #204]	; (24c7c <sys_heap_init+0x124>)
   24bae:	4834      	ldr	r0, [pc, #208]	; (24c80 <sys_heap_init+0x128>)
   24bb0:	f01d f81a 	bl	41be8 <printk>
   24bb4:	4833      	ldr	r0, [pc, #204]	; (24c84 <sys_heap_init+0x12c>)
   24bb6:	f01d f817 	bl	41be8 <printk>
   24bba:	f240 1137 	movw	r1, #311	; 0x137
   24bbe:	482f      	ldr	r0, [pc, #188]	; (24c7c <sys_heap_init+0x124>)
   24bc0:	f01d fa2c 	bl	4201c <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   24bc4:	2200      	movs	r2, #0
   24bc6:	2300      	movs	r3, #0
	heap->heap = h;
   24bc8:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   24bca:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   24bce:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24bd0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   24bd2:	60e3      	str	r3, [r4, #12]
	h->len = buf_sz;
   24bd4:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24bd6:	4620      	mov	r0, r4
   24bd8:	f01d f8d4 	bl	41d84 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   24bdc:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   24bde:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24be0:	1c47      	adds	r7, r0, #1
   24be2:	4620      	mov	r0, r4
   24be4:	f01d f8c4 	bl	41d70 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   24be8:	351b      	adds	r5, #27
   24bea:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   24bec:	4428      	add	r0, r5
   24bee:	42b0      	cmp	r0, r6
   24bf0:	d30e      	bcc.n	24c10 <sys_heap_init+0xb8>
   24bf2:	4926      	ldr	r1, [pc, #152]	; (24c8c <sys_heap_init+0x134>)
   24bf4:	f240 1343 	movw	r3, #323	; 0x143
   24bf8:	4a20      	ldr	r2, [pc, #128]	; (24c7c <sys_heap_init+0x124>)
   24bfa:	4821      	ldr	r0, [pc, #132]	; (24c80 <sys_heap_init+0x128>)
   24bfc:	f01c fff4 	bl	41be8 <printk>
   24c00:	4820      	ldr	r0, [pc, #128]	; (24c84 <sys_heap_init+0x12c>)
   24c02:	f01c fff1 	bl	41be8 <printk>
   24c06:	f240 1143 	movw	r1, #323	; 0x143
   24c0a:	481c      	ldr	r0, [pc, #112]	; (24c7c <sys_heap_init+0x124>)
   24c0c:	f01d fa06 	bl	4201c <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   24c10:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   24c12:	4619      	mov	r1, r3
   24c14:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   24c18:	42bb      	cmp	r3, r7
   24c1a:	db29      	blt.n	24c70 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   24c1c:	462a      	mov	r2, r5
   24c1e:	4620      	mov	r0, r4
   24c20:	2100      	movs	r1, #0
   24c22:	f01d f8a1 	bl	41d68 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24c26:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   24c28:	4620      	mov	r0, r4
   24c2a:	2201      	movs	r2, #1
   24c2c:	2100      	movs	r1, #0
   24c2e:	f01d f883 	bl	41d38 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24c32:	463a      	mov	r2, r7
   24c34:	4629      	mov	r1, r5
   24c36:	f01d f897 	bl	41d68 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24c3a:	462b      	mov	r3, r5
   24c3c:	4629      	mov	r1, r5
   24c3e:	4620      	mov	r0, r4
   24c40:	2200      	movs	r2, #0
   24c42:	f01d f868 	bl	41d16 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   24c46:	4631      	mov	r1, r6
   24c48:	4620      	mov	r0, r4
   24c4a:	2200      	movs	r2, #0
   24c4c:	f01d f88c 	bl	41d68 <set_chunk_size>
   24c50:	463b      	mov	r3, r7
   24c52:	4631      	mov	r1, r6
   24c54:	4620      	mov	r0, r4
   24c56:	2200      	movs	r2, #0
   24c58:	f01d f85d 	bl	41d16 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   24c5c:	4631      	mov	r1, r6
   24c5e:	4620      	mov	r0, r4
   24c60:	2201      	movs	r2, #1
   24c62:	f01d f869 	bl	41d38 <set_chunk_used>

	free_list_add(h, chunk0_size);
   24c66:	4629      	mov	r1, r5
}
   24c68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   24c6c:	f01d b962 	b.w	41f34 <free_list_add>
		h->buckets[i].next = 0;
   24c70:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   24c74:	3301      	adds	r3, #1
   24c76:	e7cf      	b.n	24c18 <sys_heap_init+0xc0>
   24c78:	0004913d 	.word	0x0004913d
   24c7c:	00049071 	.word	0x00049071
   24c80:	0004825b 	.word	0x0004825b
   24c84:	0004915e 	.word	0x0004915e
   24c88:	00049177 	.word	0x00049177
   24c8c:	0004919f 	.word	0x0004919f

00024c90 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   24c90:	f04f 0220 	mov.w	r2, #32
   24c94:	f3ef 8311 	mrs	r3, BASEPRI
   24c98:	f382 8811 	msr	BASEPRI, r2
   24c9c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   24ca0:	2101      	movs	r1, #1
   24ca2:	4a04      	ldr	r2, [pc, #16]	; (24cb4 <nordicsemi_nrf91_init+0x24>)
   24ca4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   24ca8:	f383 8811 	msr	BASEPRI, r3
   24cac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   24cb0:	2000      	movs	r0, #0
   24cb2:	4770      	bx	lr
   24cb4:	40039000 	.word	0x40039000

00024cb8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   24cb8:	b120      	cbz	r0, 24cc4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   24cba:	4b03      	ldr	r3, [pc, #12]	; (24cc8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   24cbc:	0180      	lsls	r0, r0, #6
   24cbe:	f043 0301 	orr.w	r3, r3, #1
   24cc2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   24cc4:	4770      	bx	lr
   24cc6:	bf00      	nop
   24cc8:	00046a50 	.word	0x00046a50

00024ccc <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   24ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   24cd0:	4b12      	ldr	r3, [pc, #72]	; (24d1c <log_generic+0x50>)
{
   24cd2:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   24cd4:	681b      	ldr	r3, [r3, #0]
{
   24cd6:	4681      	mov	r9, r0
   24cd8:	468a      	mov	sl, r1
   24cda:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   24cdc:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   24cde:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   24ce0:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   24ce2:	4c0f      	ldr	r4, [pc, #60]	; (24d20 <log_generic+0x54>)
   24ce4:	4d0f      	ldr	r5, [pc, #60]	; (24d24 <log_generic+0x58>)
   24ce6:	1b2d      	subs	r5, r5, r4
   24ce8:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   24cea:	42ae      	cmp	r6, r5
   24cec:	db02      	blt.n	24cf4 <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   24cee:	b005      	add	sp, #20
   24cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   24cf4:	4620      	mov	r0, r4
   24cf6:	f01d f99b 	bl	42030 <log_backend_is_active>
   24cfa:	b160      	cbz	r0, 24d16 <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   24cfc:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   24cfe:	9703      	str	r7, [sp, #12]
   24d00:	f8d3 b004 	ldr.w	fp, [r3, #4]
   24d04:	f1bb 0f00 	cmp.w	fp, #0
   24d08:	d005      	beq.n	24d16 <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   24d0a:	9700      	str	r7, [sp, #0]
   24d0c:	4653      	mov	r3, sl
   24d0e:	4642      	mov	r2, r8
   24d10:	4649      	mov	r1, r9
   24d12:	4620      	mov	r0, r4
   24d14:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   24d16:	3601      	adds	r6, #1
   24d18:	3410      	adds	r4, #16
   24d1a:	e7e6      	b.n	24cea <log_generic+0x1e>
   24d1c:	20020648 	.word	0x20020648
   24d20:	000469c0 	.word	0x000469c0
   24d24:	000469d0 	.word	0x000469d0

00024d28 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   24d28:	4b03      	ldr	r3, [pc, #12]	; (24d38 <log_core_init+0x10>)
   24d2a:	4a04      	ldr	r2, [pc, #16]	; (24d3c <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   24d2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   24d30:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   24d32:	f000 ba35 	b.w	251a0 <log_output_timestamp_freq_set>
   24d36:	bf00      	nop
   24d38:	20020648 	.word	0x20020648
   24d3c:	00042037 	.word	0x00042037

00024d40 <log_source_name_get>:
   24d40:	4a04      	ldr	r2, [pc, #16]	; (24d54 <log_source_name_get+0x14>)
   24d42:	4b05      	ldr	r3, [pc, #20]	; (24d58 <log_source_name_get+0x18>)
   24d44:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   24d46:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   24d4a:	bf34      	ite	cc
   24d4c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   24d50:	2000      	movcs	r0, #0
}
   24d52:	4770      	bx	lr
   24d54:	00046878 	.word	0x00046878
   24d58:	000469c0 	.word	0x000469c0

00024d5c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   24d5c:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   24d5e:	4c10      	ldr	r4, [pc, #64]	; (24da0 <log_backend_enable+0x44>)
{
   24d60:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   24d62:	1b04      	subs	r4, r0, r4
   24d64:	1124      	asrs	r4, r4, #4
   24d66:	3401      	adds	r4, #1
{
   24d68:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   24d6a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   24d6c:	b948      	cbnz	r0, 24d82 <log_backend_enable+0x26>
   24d6e:	490d      	ldr	r1, [pc, #52]	; (24da4 <log_backend_enable+0x48>)
   24d70:	480d      	ldr	r0, [pc, #52]	; (24da8 <log_backend_enable+0x4c>)
   24d72:	23c0      	movs	r3, #192	; 0xc0
   24d74:	4a0d      	ldr	r2, [pc, #52]	; (24dac <log_backend_enable+0x50>)
   24d76:	f01c ff37 	bl	41be8 <printk>
   24d7a:	21c0      	movs	r1, #192	; 0xc0
   24d7c:	480b      	ldr	r0, [pc, #44]	; (24dac <log_backend_enable+0x50>)
   24d7e:	f01d f94d 	bl	4201c <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   24d82:	2201      	movs	r2, #1
	backend->cb->id = id;
   24d84:	686b      	ldr	r3, [r5, #4]
   24d86:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   24d88:	4c09      	ldr	r4, [pc, #36]	; (24db0 <log_backend_enable+0x54>)
	backend->cb->active = true;
   24d8a:	715a      	strb	r2, [r3, #5]
   24d8c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   24d8e:	601e      	str	r6, [r3, #0]
   24d90:	b912      	cbnz	r2, 24d98 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   24d92:	4808      	ldr	r0, [pc, #32]	; (24db4 <log_backend_enable+0x58>)
   24d94:	f019 fa36 	bl	3e204 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   24d98:	2301      	movs	r3, #1
   24d9a:	7023      	strb	r3, [r4, #0]
}
   24d9c:	bd70      	pop	{r4, r5, r6, pc}
   24d9e:	bf00      	nop
   24da0:	000469c0 	.word	0x000469c0
   24da4:	00048244 	.word	0x00048244
   24da8:	0004825b 	.word	0x0004825b
   24dac:	000491d5 	.word	0x000491d5
   24db0:	2002ae81 	.word	0x2002ae81
   24db4:	20020c18 	.word	0x20020c18

00024db8 <log_init>:
{
   24db8:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   24dba:	4c13      	ldr	r4, [pc, #76]	; (24e08 <log_init+0x50>)
   24dbc:	4d13      	ldr	r5, [pc, #76]	; (24e0c <log_init+0x54>)
   24dbe:	1b2d      	subs	r5, r5, r4
   24dc0:	112d      	asrs	r5, r5, #4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   24dc2:	2d09      	cmp	r5, #9
   24dc4:	d906      	bls.n	24dd4 <log_init+0x1c>
   24dc6:	4b12      	ldr	r3, [pc, #72]	; (24e10 <log_init+0x58>)
   24dc8:	4a12      	ldr	r2, [pc, #72]	; (24e14 <log_init+0x5c>)
   24dca:	f240 210b 	movw	r1, #523	; 0x20b
   24dce:	4812      	ldr	r0, [pc, #72]	; (24e18 <log_init+0x60>)
   24dd0:	f01a fc76 	bl	3f6c0 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24dd4:	4b11      	ldr	r3, [pc, #68]	; (24e1c <log_init+0x64>)
   24dd6:	e8d3 6fef 	ldaex	r6, [r3]
   24dda:	1c72      	adds	r2, r6, #1
   24ddc:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24de0:	2900      	cmp	r1, #0
   24de2:	d1f8      	bne.n	24dd6 <log_init+0x1e>
	if (atomic_inc(&initialized) != 0) {
   24de4:	b90e      	cbnz	r6, 24dea <log_init+0x32>
	for (i = 0; i < log_backend_count_get(); i++) {
   24de6:	42ae      	cmp	r6, r5
   24de8:	d100      	bne.n	24dec <log_init+0x34>
}
   24dea:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   24dec:	7b23      	ldrb	r3, [r4, #12]
   24dee:	b143      	cbz	r3, 24e02 <log_init+0x4a>
			if (backend->api->init != NULL) {
   24df0:	6823      	ldr	r3, [r4, #0]
   24df2:	695b      	ldr	r3, [r3, #20]
   24df4:	b103      	cbz	r3, 24df8 <log_init+0x40>
				backend->api->init();
   24df6:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   24df8:	2204      	movs	r2, #4
   24dfa:	2100      	movs	r1, #0
   24dfc:	4620      	mov	r0, r4
   24dfe:	f7ff ffad 	bl	24d5c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   24e02:	3601      	adds	r6, #1
   24e04:	3410      	adds	r4, #16
   24e06:	e7ee      	b.n	24de6 <log_init+0x2e>
   24e08:	000469c0 	.word	0x000469c0
   24e0c:	000469d0 	.word	0x000469d0
   24e10:	00049206 	.word	0x00049206
   24e14:	000491cc 	.word	0x000491cc
   24e18:	0004923d 	.word	0x0004923d
   24e1c:	20024664 	.word	0x20024664

00024e20 <z_impl_log_panic>:
{
   24e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   24e22:	4f0c      	ldr	r7, [pc, #48]	; (24e54 <z_impl_log_panic+0x34>)
   24e24:	783d      	ldrb	r5, [r7, #0]
   24e26:	b94d      	cbnz	r5, 24e3c <z_impl_log_panic+0x1c>
	log_init();
   24e28:	f7ff ffc6 	bl	24db8 <log_init>
   24e2c:	4c0a      	ldr	r4, [pc, #40]	; (24e58 <z_impl_log_panic+0x38>)
   24e2e:	4e0b      	ldr	r6, [pc, #44]	; (24e5c <z_impl_log_panic+0x3c>)
   24e30:	1b36      	subs	r6, r6, r4
   24e32:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   24e34:	42b5      	cmp	r5, r6
   24e36:	db02      	blt.n	24e3e <z_impl_log_panic+0x1e>
	panic_mode = true;
   24e38:	2301      	movs	r3, #1
   24e3a:	703b      	strb	r3, [r7, #0]
}
   24e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   24e3e:	4620      	mov	r0, r4
   24e40:	f01d f8f6 	bl	42030 <log_backend_is_active>
   24e44:	b118      	cbz	r0, 24e4e <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   24e46:	6823      	ldr	r3, [r4, #0]
   24e48:	4620      	mov	r0, r4
   24e4a:	691b      	ldr	r3, [r3, #16]
   24e4c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24e4e:	3501      	adds	r5, #1
   24e50:	3410      	adds	r4, #16
   24e52:	e7ef      	b.n	24e34 <z_impl_log_panic+0x14>
   24e54:	2002ae82 	.word	0x2002ae82
   24e58:	000469c0 	.word	0x000469c0
   24e5c:	000469d0 	.word	0x000469d0

00024e60 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   24e60:	b40e      	push	{r1, r2, r3}
   24e62:	b503      	push	{r0, r1, lr}
   24e64:	ab03      	add	r3, sp, #12
   24e66:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24e6a:	4601      	mov	r1, r0
   24e6c:	4804      	ldr	r0, [pc, #16]	; (24e80 <print_formatted+0x20>)
	va_start(args, fmt);
   24e6e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24e70:	f01c fda6 	bl	419c0 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   24e74:	2000      	movs	r0, #0
   24e76:	b002      	add	sp, #8
   24e78:	f85d eb04 	ldr.w	lr, [sp], #4
   24e7c:	b003      	add	sp, #12
   24e7e:	4770      	bx	lr
   24e80:	00042067 	.word	0x00042067

00024e84 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   24e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   24e88:	f011 0402 	ands.w	r4, r1, #2
{
   24e8c:	b085      	sub	sp, #20
   24e8e:	4606      	mov	r6, r0
   24e90:	4690      	mov	r8, r2
   24e92:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   24e96:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   24e9a:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   24e9e:	d007      	beq.n	24eb0 <prefix_print+0x2c>
	if (!format) {
   24ea0:	f011 0f44 	tst.w	r1, #68	; 0x44
   24ea4:	d137      	bne.n	24f16 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   24ea6:	461a      	mov	r2, r3
   24ea8:	4932      	ldr	r1, [pc, #200]	; (24f74 <prefix_print+0xf0>)
   24eaa:	f7ff ffd9 	bl	24e60 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   24eae:	4604      	mov	r4, r0
	if (color) {
   24eb0:	f1b9 0f00 	cmp.w	r9, #0
   24eb4:	d00a      	beq.n	24ecc <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   24eb6:	4b30      	ldr	r3, [pc, #192]	; (24f78 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   24eb8:	4930      	ldr	r1, [pc, #192]	; (24f7c <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
   24eba:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   24ebe:	4b30      	ldr	r3, [pc, #192]	; (24f80 <prefix_print+0xfc>)
   24ec0:	4630      	mov	r0, r6
   24ec2:	2a00      	cmp	r2, #0
   24ec4:	bf08      	it	eq
   24ec6:	461a      	moveq	r2, r3
   24ec8:	f7ff ffca 	bl	24e60 <print_formatted>
	if (level_on) {
   24ecc:	b13d      	cbz	r5, 24ede <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   24ece:	4b2d      	ldr	r3, [pc, #180]	; (24f84 <prefix_print+0x100>)
   24ed0:	492d      	ldr	r1, [pc, #180]	; (24f88 <prefix_print+0x104>)
   24ed2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   24ed6:	4630      	mov	r0, r6
   24ed8:	f7ff ffc2 	bl	24e60 <print_formatted>
   24edc:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   24ede:	f1b8 0f00 	cmp.w	r8, #0
   24ee2:	d044      	beq.n	24f6e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   24ee4:	2301      	movs	r3, #1
   24ee6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   24eea:	4b28      	ldr	r3, [pc, #160]	; (24f8c <prefix_print+0x108>)
   24eec:	f017 0f10 	tst.w	r7, #16
   24ef0:	4f27      	ldr	r7, [pc, #156]	; (24f90 <prefix_print+0x10c>)
   24ef2:	bf18      	it	ne
   24ef4:	461f      	movne	r7, r3
   24ef6:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   24efa:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   24efe:	f7ff ff1f 	bl	24d40 <log_source_name_get>
   24f02:	4639      	mov	r1, r7
   24f04:	4602      	mov	r2, r0
   24f06:	4630      	mov	r0, r6
   24f08:	f7ff ffaa 	bl	24e60 <print_formatted>
   24f0c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   24f0e:	4420      	add	r0, r4
   24f10:	b005      	add	sp, #20
   24f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   24f16:	4a1f      	ldr	r2, [pc, #124]	; (24f94 <prefix_print+0x110>)
   24f18:	6811      	ldr	r1, [r2, #0]
   24f1a:	b331      	cbz	r1, 24f6a <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24f1c:	4a1e      	ldr	r2, [pc, #120]	; (24f98 <prefix_print+0x114>)
   24f1e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   24f22:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   24f24:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24f28:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   24f2c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   24f30:	fbb4 f2fe 	udiv	r2, r4, lr
   24f34:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   24f38:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   24f3c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f40:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   24f44:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f48:	fb01 441b 	mls	r4, r1, fp, r4
   24f4c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   24f50:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f54:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   24f58:	e9cd b101 	strd	fp, r1, [sp, #4]
   24f5c:	fb0a e113 	mls	r1, sl, r3, lr
   24f60:	9100      	str	r1, [sp, #0]
   24f62:	490e      	ldr	r1, [pc, #56]	; (24f9c <prefix_print+0x118>)
   24f64:	f7ff ff7c 	bl	24e60 <print_formatted>
   24f68:	e7a1      	b.n	24eae <prefix_print+0x2a>
		length = 0;
   24f6a:	4608      	mov	r0, r1
   24f6c:	e79f      	b.n	24eae <prefix_print+0x2a>
	total += print_formatted(log_output,
   24f6e:	4f08      	ldr	r7, [pc, #32]	; (24f90 <prefix_print+0x10c>)
   24f70:	e7c1      	b.n	24ef6 <prefix_print+0x72>
   24f72:	bf00      	nop
   24f74:	000492e1 	.word	0x000492e1
   24f78:	00046c6c 	.word	0x00046c6c
   24f7c:	0004e37f 	.word	0x0004e37f
   24f80:	000492d3 	.word	0x000492d3
   24f84:	00046c80 	.word	0x00046c80
   24f88:	00049306 	.word	0x00049306
   24f8c:	000492dd 	.word	0x000492dd
   24f90:	000492d8 	.word	0x000492d8
   24f94:	20024668 	.word	0x20024668
   24f98:	2002466c 	.word	0x2002466c
   24f9c:	000492ea 	.word	0x000492ea

00024fa0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   24fa0:	b538      	push	{r3, r4, r5, lr}
   24fa2:	460c      	mov	r4, r1
	if (color) {
   24fa4:	07e1      	lsls	r1, r4, #31
{
   24fa6:	4605      	mov	r5, r0
	if (color) {
   24fa8:	d503      	bpl.n	24fb2 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   24faa:	4a08      	ldr	r2, [pc, #32]	; (24fcc <postfix_print+0x2c>)
   24fac:	4908      	ldr	r1, [pc, #32]	; (24fd0 <postfix_print+0x30>)
   24fae:	f7ff ff57 	bl	24e60 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24fb2:	06e2      	lsls	r2, r4, #27
   24fb4:	d408      	bmi.n	24fc8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24fb6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   24fb8:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   24fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   24fbe:	bf4c      	ite	mi
   24fc0:	4904      	ldrmi	r1, [pc, #16]	; (24fd4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   24fc2:	4905      	ldrpl	r1, [pc, #20]	; (24fd8 <postfix_print+0x38>)
   24fc4:	f7ff bf4c 	b.w	24e60 <print_formatted>
}
   24fc8:	bd38      	pop	{r3, r4, r5, pc}
   24fca:	bf00      	nop
   24fcc:	000492d3 	.word	0x000492d3
   24fd0:	0004e37f 	.word	0x0004e37f
   24fd4:	00049478 	.word	0x00049478
   24fd8:	0004da6f 	.word	0x0004da6f

00024fdc <hexdump_line_print>:
{
   24fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24fe0:	4698      	mov	r8, r3
   24fe2:	9b08      	ldr	r3, [sp, #32]
   24fe4:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24fe6:	06dd      	lsls	r5, r3, #27
{
   24fe8:	460e      	mov	r6, r1
   24fea:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24fec:	d405      	bmi.n	24ffa <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24fee:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   24ff0:	bf4c      	ite	mi
   24ff2:	492a      	ldrmi	r1, [pc, #168]	; (2509c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   24ff4:	492a      	ldrpl	r1, [pc, #168]	; (250a0 <hexdump_line_print+0xc4>)
   24ff6:	f7ff ff33 	bl	24e60 <print_formatted>
{
   24ffa:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   24ffc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 250a8 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   25000:	4545      	cmp	r5, r8
   25002:	db2d      	blt.n	25060 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25004:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   25006:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 250ac <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   2500a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 250b0 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   2500e:	f8df a098 	ldr.w	sl, [pc, #152]	; 250a8 <hexdump_line_print+0xcc>
		if (i < length) {
   25012:	42bd      	cmp	r5, r7
   25014:	d231      	bcs.n	2507a <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   25016:	5d72      	ldrb	r2, [r6, r5]
   25018:	4649      	mov	r1, r9
   2501a:	4620      	mov	r0, r4
   2501c:	f7ff ff20 	bl	24e60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25020:	3501      	adds	r5, #1
   25022:	2d10      	cmp	r5, #16
   25024:	d122      	bne.n	2506c <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   25026:	491f      	ldr	r1, [pc, #124]	; (250a4 <hexdump_line_print+0xc8>)
   25028:	4620      	mov	r0, r4
   2502a:	f7ff ff19 	bl	24e60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2502e:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   25030:	f8df 8074 	ldr.w	r8, [pc, #116]	; 250a8 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   25034:	f8df 907c 	ldr.w	r9, [pc, #124]	; 250b4 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   25038:	f8df a07c 	ldr.w	sl, [pc, #124]	; 250b8 <hexdump_line_print+0xdc>
		if (i < length) {
   2503c:	42af      	cmp	r7, r5
   2503e:	d928      	bls.n	25092 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   25040:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   25042:	4651      	mov	r1, sl
   25044:	f812 3009 	ldrb.w	r3, [r2, r9]
   25048:	4620      	mov	r0, r4
   2504a:	f013 0f97 	tst.w	r3, #151	; 0x97
   2504e:	bf08      	it	eq
   25050:	222e      	moveq	r2, #46	; 0x2e
   25052:	f7ff ff05 	bl	24e60 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25056:	3501      	adds	r5, #1
   25058:	2d10      	cmp	r5, #16
   2505a:	d113      	bne.n	25084 <hexdump_line_print+0xa8>
}
   2505c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   25060:	4649      	mov	r1, r9
   25062:	4620      	mov	r0, r4
   25064:	f7ff fefc 	bl	24e60 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   25068:	3501      	adds	r5, #1
   2506a:	e7c9      	b.n	25000 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   2506c:	076a      	lsls	r2, r5, #29
   2506e:	d1d0      	bne.n	25012 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   25070:	4651      	mov	r1, sl
   25072:	4620      	mov	r0, r4
   25074:	f7ff fef4 	bl	24e60 <print_formatted>
   25078:	e7cb      	b.n	25012 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   2507a:	4641      	mov	r1, r8
   2507c:	4620      	mov	r0, r4
   2507e:	f7ff feef 	bl	24e60 <print_formatted>
   25082:	e7cd      	b.n	25020 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   25084:	076b      	lsls	r3, r5, #29
   25086:	d1d9      	bne.n	2503c <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   25088:	4641      	mov	r1, r8
   2508a:	4620      	mov	r0, r4
   2508c:	f7ff fee8 	bl	24e60 <print_formatted>
   25090:	e7d4      	b.n	2503c <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   25092:	4641      	mov	r1, r8
   25094:	4620      	mov	r0, r4
   25096:	f7ff fee3 	bl	24e60 <print_formatted>
   2509a:	e7dc      	b.n	25056 <hexdump_line_print+0x7a>
   2509c:	00049478 	.word	0x00049478
   250a0:	0004da6f 	.word	0x0004da6f
   250a4:	0004928c 	.word	0x0004928c
   250a8:	0004928a 	.word	0x0004928a
   250ac:	00049288 	.word	0x00049288
   250b0:	00049282 	.word	0x00049282
   250b4:	0004f20f 	.word	0x0004f20f
   250b8:	0004928e 	.word	0x0004928e

000250bc <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   250bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   250c0:	f011 0407 	ands.w	r4, r1, #7
{
   250c4:	4606      	mov	r6, r0
   250c6:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   250ca:	461d      	mov	r5, r3
	if (!raw_string) {
   250cc:	d00b      	beq.n	250e6 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   250ce:	f3c1 1389 	ubfx	r3, r1, #6, #10
   250d2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   250d6:	9302      	str	r3, [sp, #8]
   250d8:	e9cd 4100 	strd	r4, r1, [sp]
   250dc:	4613      	mov	r3, r2
   250de:	4639      	mov	r1, r7
   250e0:	2201      	movs	r2, #1
   250e2:	f7ff fecf 	bl	24e84 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   250e6:	4643      	mov	r3, r8
   250e8:	462a      	mov	r2, r5
   250ea:	4631      	mov	r1, r6
   250ec:	480d      	ldr	r0, [pc, #52]	; (25124 <log_output_string+0x68>)
   250ee:	f01c fc67 	bl	419c0 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   250f2:	b98c      	cbnz	r4, 25118 <log_output_string+0x5c>
   250f4:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   250f6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   250fa:	b95b      	cbnz	r3, 25114 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   250fc:	2c0a      	cmp	r4, #10
   250fe:	d103      	bne.n	25108 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   25100:	4909      	ldr	r1, [pc, #36]	; (25128 <log_output_string+0x6c>)
   25102:	4630      	mov	r0, r6
   25104:	f7ff feac 	bl	24e60 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   25108:	4630      	mov	r0, r6
}
   2510a:	b004      	add	sp, #16
   2510c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   25110:	f01c bfc2 	b.w	42098 <log_output_flush>
	while (*fmt != '\0') {
   25114:	461c      	mov	r4, r3
   25116:	e7ee      	b.n	250f6 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   25118:	4622      	mov	r2, r4
   2511a:	4639      	mov	r1, r7
   2511c:	4630      	mov	r0, r6
   2511e:	f7ff ff3f 	bl	24fa0 <postfix_print>
   25122:	e7f1      	b.n	25108 <log_output_string+0x4c>
   25124:	00042067 	.word	0x00042067
   25128:	000492d1 	.word	0x000492d1

0002512c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   2512c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25130:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   25132:	4698      	mov	r8, r3
   25134:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25138:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   2513c:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25140:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   25144:	9302      	str	r3, [sp, #8]
   25146:	e9cd 9100 	strd	r9, r1, [sp]
   2514a:	4613      	mov	r3, r2
   2514c:	4631      	mov	r1, r6
   2514e:	2201      	movs	r2, #1
{
   25150:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25152:	f7ff fe97 	bl	24e84 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   25156:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25158:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   2515a:	4910      	ldr	r1, [pc, #64]	; (2519c <log_output_hexdump+0x70>)
   2515c:	4620      	mov	r0, r4
   2515e:	f7ff fe7f 	bl	24e60 <print_formatted>

	while (length) {
   25162:	b955      	cbnz	r5, 2517a <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   25164:	4620      	mov	r0, r4
   25166:	464a      	mov	r2, r9
   25168:	4631      	mov	r1, r6
   2516a:	f7ff ff19 	bl	24fa0 <postfix_print>
	log_output_flush(log_output);
   2516e:	4620      	mov	r0, r4
}
   25170:	b004      	add	sp, #16
   25172:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   25176:	f01c bf8f 	b.w	42098 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   2517a:	2d10      	cmp	r5, #16
   2517c:	46a8      	mov	r8, r5
   2517e:	bf28      	it	cs
   25180:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   25184:	4639      	mov	r1, r7
   25186:	9600      	str	r6, [sp, #0]
   25188:	4653      	mov	r3, sl
   2518a:	4642      	mov	r2, r8
   2518c:	4620      	mov	r0, r4
   2518e:	f7ff ff25 	bl	24fdc <hexdump_line_print>
		data += part_len;
   25192:	4447      	add	r7, r8
		length -= part_len;
   25194:	eba5 0508 	sub.w	r5, r5, r8
   25198:	e7e3      	b.n	25162 <log_output_hexdump+0x36>
   2519a:	bf00      	nop
   2519c:	0004e37f 	.word	0x0004e37f

000251a0 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   251a0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   251a2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   251a4:	4a07      	ldr	r2, [pc, #28]	; (251c4 <log_output_timestamp_freq_set+0x24>)
{
   251a6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   251a8:	4c07      	ldr	r4, [pc, #28]	; (251c8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   251aa:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   251ac:	42a0      	cmp	r0, r4
   251ae:	d804      	bhi.n	251ba <log_output_timestamp_freq_set+0x1a>
   251b0:	b101      	cbz	r1, 251b4 <log_output_timestamp_freq_set+0x14>
   251b2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   251b4:	4b05      	ldr	r3, [pc, #20]	; (251cc <log_output_timestamp_freq_set+0x2c>)
   251b6:	6018      	str	r0, [r3, #0]
}
   251b8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   251ba:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   251bc:	005b      	lsls	r3, r3, #1
   251be:	2101      	movs	r1, #1
   251c0:	e7f4      	b.n	251ac <log_output_timestamp_freq_set+0xc>
   251c2:	bf00      	nop
   251c4:	2002466c 	.word	0x2002466c
   251c8:	000f4240 	.word	0x000f4240
   251cc:	20024668 	.word	0x20024668

000251d0 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   251d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251d2:	460d      	mov	r5, r1
   251d4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   251d6:	4f06      	ldr	r7, [pc, #24]	; (251f0 <char_out+0x20>)
   251d8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   251da:	42b4      	cmp	r4, r6
   251dc:	d101      	bne.n	251e2 <char_out+0x12>
	}

	return length;
}
   251de:	4628      	mov	r0, r5
   251e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   251e2:	6838      	ldr	r0, [r7, #0]
   251e4:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   251e8:	6883      	ldr	r3, [r0, #8]
   251ea:	685b      	ldr	r3, [r3, #4]
   251ec:	4798      	blx	r3
   251ee:	e7f4      	b.n	251da <char_out+0xa>
   251f0:	20024684 	.word	0x20024684

000251f4 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   251f4:	4801      	ldr	r0, [pc, #4]	; (251fc <panic+0x8>)
   251f6:	f01c bf4f 	b.w	42098 <log_output_flush>
   251fa:	bf00      	nop
   251fc:	00046cac 	.word	0x00046cac

00025200 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   25200:	b508      	push	{r3, lr}
   25202:	4806      	ldr	r0, [pc, #24]	; (2521c <log_backend_uart_init+0x1c>)
   25204:	f016 ff9e 	bl	3c144 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25208:	4b05      	ldr	r3, [pc, #20]	; (25220 <log_backend_uart_init+0x20>)
   2520a:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   2520c:	b928      	cbnz	r0, 2521a <log_backend_uart_init+0x1a>
   2520e:	4b05      	ldr	r3, [pc, #20]	; (25224 <log_backend_uart_init+0x24>)
   25210:	4a05      	ldr	r2, [pc, #20]	; (25228 <log_backend_uart_init+0x28>)
   25212:	212d      	movs	r1, #45	; 0x2d
   25214:	4805      	ldr	r0, [pc, #20]	; (2522c <log_backend_uart_init+0x2c>)
   25216:	f01a fa53 	bl	3f6c0 <__assert_func>
}
   2521a:	bd08      	pop	{r3, pc}
   2521c:	00049342 	.word	0x00049342
   25220:	20024684 	.word	0x20024684
   25224:	00049349 	.word	0x00049349
   25228:	0004932c 	.word	0x0004932c
   2522c:	0004935a 	.word	0x0004935a

00025230 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   25230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   25232:	200f      	movs	r0, #15
   25234:	9002      	str	r0, [sp, #8]
   25236:	9807      	ldr	r0, [sp, #28]
   25238:	9001      	str	r0, [sp, #4]
   2523a:	9806      	ldr	r0, [sp, #24]
   2523c:	9000      	str	r0, [sp, #0]
   2523e:	4803      	ldr	r0, [pc, #12]	; (2524c <sync_hexdump+0x1c>)
   25240:	f7ff ff74 	bl	2512c <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   25244:	b005      	add	sp, #20
   25246:	f85d fb04 	ldr.w	pc, [sp], #4
   2524a:	bf00      	nop
   2524c:	00046cac 	.word	0x00046cac

00025250 <sync_string>:
{
   25250:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   25252:	200f      	movs	r0, #15
   25254:	9001      	str	r0, [sp, #4]
   25256:	9804      	ldr	r0, [sp, #16]
   25258:	9000      	str	r0, [sp, #0]
   2525a:	4803      	ldr	r0, [pc, #12]	; (25268 <sync_string+0x18>)
   2525c:	f7ff ff2e 	bl	250bc <log_output_string>
}
   25260:	b003      	add	sp, #12
   25262:	f85d fb04 	ldr.w	pc, [sp], #4
   25266:	bf00      	nop
   25268:	00046cac 	.word	0x00046cac

0002526c <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25270:	b085      	sub	sp, #20
   25272:	4604      	mov	r4, r0
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(tmp_str, len);
   25274:	a802      	add	r0, sp, #8
{
   25276:	460d      	mov	r5, r1
   25278:	4617      	mov	r7, r2
	cnt = fcb_put_len(tmp_str, len);
   2527a:	f01c ffb3 	bl	421e4 <fcb_put_len>
	if (cnt < 0) {
   2527e:	f1b0 0800 	subs.w	r8, r0, #0
   25282:	db74      	blt.n	2536e <fcb_append+0x102>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   25284:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(uint8_t *buf, uint16_t len);
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   25288:	fa1f f688 	uxth.w	r6, r8
   2528c:	2b01      	cmp	r3, #1
   2528e:	d906      	bls.n	2529e <fcb_append+0x32>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   25290:	1e59      	subs	r1, r3, #1
   25292:	441d      	add	r5, r3
   25294:	425a      	negs	r2, r3
   25296:	440e      	add	r6, r1
   25298:	3d01      	subs	r5, #1
   2529a:	4016      	ands	r6, r2
   2529c:	4015      	ands	r5, r2
	if (fcb->f_align <= 1U) {
   2529e:	2b01      	cmp	r3, #1
		return len;
   252a0:	bf92      	itee	ls
   252a2:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   252a4:	425a      	neghi	r2, r3
   252a6:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   252a8:	b22d      	sxth	r5, r5
   252aa:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   252ac:	2e08      	cmp	r6, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   252ae:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   252b0:	dd09      	ble.n	252c6 <fcb_append+0x5a>
   252b2:	4936      	ldr	r1, [pc, #216]	; (2538c <fcb_append+0x120>)
   252b4:	4836      	ldr	r0, [pc, #216]	; (25390 <fcb_append+0x124>)
   252b6:	234b      	movs	r3, #75	; 0x4b
   252b8:	4a36      	ldr	r2, [pc, #216]	; (25394 <fcb_append+0x128>)
   252ba:	f01c fc95 	bl	41be8 <printk>
   252be:	214b      	movs	r1, #75	; 0x4b
   252c0:	4834      	ldr	r0, [pc, #208]	; (25394 <fcb_append+0x128>)
   252c2:	f01c feab 	bl	4201c <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   252c6:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   252ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   252ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   252d2:	4650      	mov	r0, sl
   252d4:	f017 fb86 	bl	3c9e4 <z_impl_k_mutex_lock>
	if (rc) {
   252d8:	4680      	mov	r8, r0
   252da:	2800      	cmp	r0, #0
   252dc:	d153      	bne.n	25386 <fcb_append+0x11a>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   252de:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   252e2:	4433      	add	r3, r6
   252e4:	684a      	ldr	r2, [r1, #4]
   252e6:	442b      	add	r3, r5
   252e8:	4293      	cmp	r3, r2
   252ea:	d92b      	bls.n	25344 <fcb_append+0xd8>
	prev = NULL;
   252ec:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   252ee:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   252f2:	4620      	mov	r0, r4
   252f4:	f01d f8f1 	bl	424da <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   252f8:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   252fa:	f1b9 0f00 	cmp.w	r9, #0
   252fe:	bf08      	it	eq
   25300:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   25302:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   25304:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   25306:	d038      	beq.n	2537a <fcb_append+0x10e>
	} while (i++ < cnt);
   25308:	45c3      	cmp	fp, r8
   2530a:	f108 0301 	add.w	r3, r8, #1
   2530e:	dc32      	bgt.n	25376 <fcb_append+0x10a>
		if (!sector || (sector->fs_size <
   25310:	f1b9 0f00 	cmp.w	r9, #0
   25314:	d031      	beq.n	2537a <fcb_append+0x10e>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   25316:	f106 0308 	add.w	r3, r6, #8
		if (!sector || (sector->fs_size <
   2531a:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   2531e:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   25320:	429a      	cmp	r2, r3
   25322:	d32a      	bcc.n	2537a <fcb_append+0x10e>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   25324:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   25326:	4649      	mov	r1, r9
   25328:	3201      	adds	r2, #1
   2532a:	b292      	uxth	r2, r2
   2532c:	4620      	mov	r0, r4
   2532e:	f01c ff81 	bl	42234 <fcb_sector_hdr_init>
		if (rc) {
   25332:	4680      	mov	r8, r0
   25334:	b9c0      	cbnz	r0, 25368 <fcb_append+0xfc>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   25336:	2308      	movs	r3, #8
   25338:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   2533a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   2533c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   25340:	3301      	adds	r3, #1
   25342:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   25344:	9600      	str	r6, [sp, #0]
   25346:	ab02      	add	r3, sp, #8
   25348:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   2534c:	4620      	mov	r0, r4
   2534e:	f01c ff17 	bl	42180 <fcb_flash_write>
	if (rc) {
   25352:	4680      	mov	r8, r0
   25354:	b9a0      	cbnz	r0, 25380 <fcb_append+0x114>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   25356:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25358:	603b      	str	r3, [r7, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   2535a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2535c:	607b      	str	r3, [r7, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2535e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25360:	441e      	add	r6, r3
   25362:	60be      	str	r6, [r7, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   25364:	442e      	add	r6, r5
   25366:	62a6      	str	r6, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   25368:	4650      	mov	r0, sl
   2536a:	f017 fc39 	bl	3cbe0 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   2536e:	4640      	mov	r0, r8
   25370:	b005      	add	sp, #20
   25372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   25376:	4698      	mov	r8, r3
   25378:	e7bb      	b.n	252f2 <fcb_append+0x86>
			rc = -ENOSPC;
   2537a:	f06f 081b 	mvn.w	r8, #27
   2537e:	e7f3      	b.n	25368 <fcb_append+0xfc>
		rc = -EIO;
   25380:	f06f 0804 	mvn.w	r8, #4
   25384:	e7f0      	b.n	25368 <fcb_append+0xfc>
		return -EINVAL;
   25386:	f06f 0815 	mvn.w	r8, #21
   2538a:	e7f0      	b.n	2536e <fcb_append+0x102>
   2538c:	000493ce 	.word	0x000493ce
   25390:	0004825b 	.word	0x0004825b
   25394:	000493a0 	.word	0x000493a0

00025398 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, uint32_t off,
				   uint8_t val)
{
   25398:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2539a:	4604      	mov	r4, r0
   2539c:	460d      	mov	r5, r1
   2539e:	4616      	mov	r6, r2
	uint8_t buf[BOOT_MAX_ALIGN];
	uint8_t align;
	uint8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   253a0:	f01d fb1a 	bl	429d8 <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   253a4:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   253a6:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   253a8:	d906      	bls.n	253b8 <boot_write_trailer_byte+0x20>
   253aa:	4b0c      	ldr	r3, [pc, #48]	; (253dc <boot_write_trailer_byte+0x44>)
   253ac:	4a0c      	ldr	r2, [pc, #48]	; (253e0 <boot_write_trailer_byte+0x48>)
   253ae:	f240 112d 	movw	r1, #301	; 0x12d
   253b2:	480c      	ldr	r0, [pc, #48]	; (253e4 <boot_write_trailer_byte+0x4c>)
   253b4:	f01a f984 	bl	3f6c0 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   253b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   253bc:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   253be:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   253c2:	4629      	mov	r1, r5
   253c4:	4620      	mov	r0, r4
	buf[0] = val;
   253c6:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   253ca:	f01d fab6 	bl	4293a <flash_area_write>
	if (rc != 0) {
   253ce:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   253d0:	bf18      	it	ne
   253d2:	f06f 0004 	mvnne.w	r0, #4
   253d6:	b002      	add	sp, #8
   253d8:	bd70      	pop	{r4, r5, r6, pc}
   253da:	bf00      	nop
   253dc:	000493fd 	.word	0x000493fd
   253e0:	000493e5 	.word	0x000493e5
   253e4:	00049415 	.word	0x00049415

000253e8 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   253e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   253ec:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 25490 <z_impl_zsock_socket+0xa8>
{
   253f0:	4606      	mov	r6, r0
   253f2:	460f      	mov	r7, r1
   253f4:	4690      	mov	r8, r2
   253f6:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   253f8:	4c1e      	ldr	r4, [pc, #120]	; (25474 <z_impl_zsock_socket+0x8c>)
   253fa:	4d1f      	ldr	r5, [pc, #124]	; (25478 <z_impl_zsock_socket+0x90>)
   253fc:	454c      	cmp	r4, r9
   253fe:	d90c      	bls.n	2541a <z_impl_zsock_socket+0x32>
   25400:	491e      	ldr	r1, [pc, #120]	; (2547c <z_impl_zsock_socket+0x94>)
   25402:	23c0      	movs	r3, #192	; 0xc0
   25404:	462a      	mov	r2, r5
   25406:	481e      	ldr	r0, [pc, #120]	; (25480 <z_impl_zsock_socket+0x98>)
   25408:	f01c fbee 	bl	41be8 <printk>
   2540c:	481d      	ldr	r0, [pc, #116]	; (25484 <z_impl_zsock_socket+0x9c>)
   2540e:	f01c fbeb 	bl	41be8 <printk>
   25412:	21c0      	movs	r1, #192	; 0xc0
   25414:	4628      	mov	r0, r5
   25416:	f01c fe01 	bl	4201c <assert_post_action>
   2541a:	4554      	cmp	r4, sl
   2541c:	d307      	bcc.n	2542e <z_impl_zsock_socket+0x46>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   2541e:	f01d fc7c 	bl	42d1a <__errno>
   25422:	236a      	movs	r3, #106	; 0x6a
   25424:	6003      	str	r3, [r0, #0]
	return -1;
}
   25426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   2542e:	6823      	ldr	r3, [r4, #0]
   25430:	42b3      	cmp	r3, r6
   25432:	d000      	beq.n	25436 <z_impl_zsock_socket+0x4e>
   25434:	b9db      	cbnz	r3, 2546e <z_impl_zsock_socket+0x86>
		NET_ASSERT(sock_family->is_supported);
   25436:	6863      	ldr	r3, [r4, #4]
   25438:	b963      	cbnz	r3, 25454 <z_impl_zsock_socket+0x6c>
   2543a:	4913      	ldr	r1, [pc, #76]	; (25488 <z_impl_zsock_socket+0xa0>)
   2543c:	23c6      	movs	r3, #198	; 0xc6
   2543e:	462a      	mov	r2, r5
   25440:	480f      	ldr	r0, [pc, #60]	; (25480 <z_impl_zsock_socket+0x98>)
   25442:	f01c fbd1 	bl	41be8 <printk>
   25446:	4811      	ldr	r0, [pc, #68]	; (2548c <z_impl_zsock_socket+0xa4>)
   25448:	f01c fbce 	bl	41be8 <printk>
   2544c:	21c6      	movs	r1, #198	; 0xc6
   2544e:	4628      	mov	r0, r5
   25450:	f01c fde4 	bl	4201c <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   25454:	6863      	ldr	r3, [r4, #4]
   25456:	4642      	mov	r2, r8
   25458:	4639      	mov	r1, r7
   2545a:	4630      	mov	r0, r6
   2545c:	4798      	blx	r3
   2545e:	b130      	cbz	r0, 2546e <z_impl_zsock_socket+0x86>
		return sock_family->handler(family, type, proto);
   25460:	68a3      	ldr	r3, [r4, #8]
   25462:	4642      	mov	r2, r8
   25464:	4639      	mov	r1, r7
   25466:	4630      	mov	r0, r6
}
   25468:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   2546c:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   2546e:	340c      	adds	r4, #12
   25470:	e7c4      	b.n	253fc <z_impl_zsock_socket+0x14>
   25472:	bf00      	nop
   25474:	00046844 	.word	0x00046844
   25478:	0004947a 	.word	0x0004947a
   2547c:	000494c8 	.word	0x000494c8
   25480:	0004825b 	.word	0x0004825b
   25484:	000494f5 	.word	0x000494f5
   25488:	000494ae 	.word	0x000494ae
   2548c:	00049477 	.word	0x00049477
   25490:	00046850 	.word	0x00046850

00025494 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   25494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   25498:	f1b2 0800 	subs.w	r8, r2, #0
{
   2549c:	b09b      	sub	sp, #108	; 0x6c
   2549e:	9005      	str	r0, [sp, #20]
   254a0:	460f      	mov	r7, r1
	if (poll_timeout < 0) {
   254a2:	db2d      	blt.n	25500 <z_impl_zsock_poll+0x6c>
			return (t * to_hz + off) / from_hz;
   254a4:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   254a8:	f240 30e7 	movw	r0, #999	; 0x3e7
   254ac:	2100      	movs	r1, #0
   254ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   254b2:	2300      	movs	r3, #0
   254b4:	fbc4 0108 	smlal	r0, r1, r4, r8
   254b8:	f7f7 fd00 	bl	1cebc <__aeabi_uldivmod>
   254bc:	4682      	mov	sl, r0
   254be:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   254c0:	2400      	movs	r4, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   254c2:	4650      	mov	r0, sl
   254c4:	4659      	mov	r1, fp
   254c6:	f01f fddc 	bl	45082 <z_timeout_end_calc>
	const struct fd_op_vtable *offl_vtable = NULL;
   254ca:	4626      	mov	r6, r4
	bool offload = false;
   254cc:	46a1      	mov	r9, r4
	end = z_timeout_end_calc(timeout);
   254ce:	e9cd 0106 	strd	r0, r1, [sp, #24]

	pev = poll_events;
   254d2:	ab0b      	add	r3, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   254d4:	9d05      	ldr	r5, [sp, #20]
	pev = poll_events;
   254d6:	9309      	str	r3, [sp, #36]	; 0x24
	for (pfd = fds, i = nfds; i--; pfd++) {
   254d8:	9703      	str	r7, [sp, #12]
   254da:	9b03      	ldr	r3, [sp, #12]
   254dc:	b9bb      	cbnz	r3, 2550e <z_impl_zsock_poll+0x7a>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   254de:	f1b9 0f00 	cmp.w	r9, #0
   254e2:	d045      	beq.n	25570 <z_impl_zsock_poll+0xdc>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   254e4:	4621      	mov	r1, r4
   254e6:	e9cd 7800 	strd	r7, r8, [sp]
   254ea:	9b05      	ldr	r3, [sp, #20]
   254ec:	f44f 7282 	mov.w	r2, #260	; 0x104
   254f0:	4630      	mov	r0, r6
   254f2:	f01d f90b 	bl	4270c <z_fdtable_call_ioctl>
   254f6:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   254f8:	4620      	mov	r0, r4
   254fa:	b01b      	add	sp, #108	; 0x6c
   254fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   25500:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   25504:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
		poll_timeout = SYS_FOREVER_MS;
   25508:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2550c:	e7d8      	b.n	254c0 <z_impl_zsock_poll+0x2c>
		if (pfd->fd < 0) {
   2550e:	6828      	ldr	r0, [r5, #0]
   25510:	2800      	cmp	r0, #0
   25512:	db28      	blt.n	25566 <z_impl_zsock_poll+0xd2>
	ctx = z_get_fd_obj_and_vtable(sock,
   25514:	a90a      	add	r1, sp, #40	; 0x28
   25516:	f7fe fde9 	bl	240ec <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   2551a:	9004      	str	r0, [sp, #16]
   2551c:	b318      	cbz	r0, 25566 <z_impl_zsock_poll+0xd2>
		result = z_fdtable_call_ioctl(vtable, ctx,
   2551e:	ab1a      	add	r3, sp, #104	; 0x68
   25520:	9301      	str	r3, [sp, #4]
   25522:	ab09      	add	r3, sp, #36	; 0x24
   25524:	9300      	str	r3, [sp, #0]
   25526:	4601      	mov	r1, r0
   25528:	462b      	mov	r3, r5
   2552a:	f44f 7281 	mov.w	r2, #258	; 0x102
   2552e:	980a      	ldr	r0, [sp, #40]	; 0x28
   25530:	f01d f8ec 	bl	4270c <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   25534:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   25538:	4603      	mov	r3, r0
		if (result == -EALREADY) {
   2553a:	d010      	beq.n	2555e <z_impl_zsock_poll+0xca>
		} else if (result == -EXDEV) {
   2553c:	f110 0f12 	cmn.w	r0, #18
   25540:	d105      	bne.n	2554e <z_impl_zsock_poll+0xba>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   25542:	b90e      	cbnz	r6, 25548 <z_impl_zsock_poll+0xb4>
				offl_vtable = vtable;
   25544:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   25546:	9c04      	ldr	r4, [sp, #16]
			offload = true;
   25548:	f04f 0901 	mov.w	r9, #1
   2554c:	e00b      	b.n	25566 <z_impl_zsock_poll+0xd2>
		} else if (result != 0) {
   2554e:	b150      	cbz	r0, 25566 <z_impl_zsock_poll+0xd2>
   25550:	9303      	str	r3, [sp, #12]
				errno = -result;
   25552:	f01d fbe2 	bl	42d1a <__errno>
   25556:	9b03      	ldr	r3, [sp, #12]
   25558:	425b      	negs	r3, r3
   2555a:	6003      	str	r3, [r0, #0]
				return -1;
   2555c:	e03f      	b.n	255de <z_impl_zsock_poll+0x14a>
			timeout = K_NO_WAIT;
   2555e:	f04f 0a00 	mov.w	sl, #0
   25562:	f04f 0b00 	mov.w	fp, #0
   25566:	9b03      	ldr	r3, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   25568:	3508      	adds	r5, #8
   2556a:	3b01      	subs	r3, #1
   2556c:	9303      	str	r3, [sp, #12]
   2556e:	e7b4      	b.n	254da <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25570:	ea5a 030b 	orrs.w	r3, sl, fp
   25574:	d016      	beq.n	255a4 <z_impl_zsock_poll+0x110>
   25576:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2557a:	bf08      	it	eq
   2557c:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   25580:	d010      	beq.n	255a4 <z_impl_zsock_poll+0x110>
		int64_t remaining = end - z_tick_get();
   25582:	f019 fcc7 	bl	3ef14 <z_tick_get>
   25586:	9b06      	ldr	r3, [sp, #24]
   25588:	ebb3 0a00 	subs.w	sl, r3, r0
   2558c:	9b07      	ldr	r3, [sp, #28]
   2558e:	eb63 0b01 	sbc.w	fp, r3, r1
   25592:	f1ba 0f00 	cmp.w	sl, #0
   25596:	f17b 0300 	sbcs.w	r3, fp, #0
   2559a:	bfbc      	itt	lt
   2559c:	f04f 0a00 	movlt.w	sl, #0
   255a0:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   255a4:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   255a8:	9909      	ldr	r1, [sp, #36]	; 0x24
   255aa:	ac0b      	add	r4, sp, #44	; 0x2c
   255ac:	1b09      	subs	r1, r1, r4
   255ae:	4b33      	ldr	r3, [pc, #204]	; (2567c <z_impl_zsock_poll+0x1e8>)
   255b0:	1089      	asrs	r1, r1, #2
   255b2:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   255b4:	465b      	mov	r3, fp
   255b6:	4652      	mov	r2, sl
   255b8:	4620      	mov	r0, r4
   255ba:	f019 fef1 	bl	3f3a0 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   255be:	f100 030b 	add.w	r3, r0, #11
   255c2:	2b0b      	cmp	r3, #11
   255c4:	4606      	mov	r6, r0
   255c6:	d806      	bhi.n	255d6 <z_impl_zsock_poll+0x142>
   255c8:	f640 0581 	movw	r5, #2177	; 0x881
   255cc:	40dd      	lsrs	r5, r3
   255ce:	43ed      	mvns	r5, r5
   255d0:	f015 0501 	ands.w	r5, r5, #1
   255d4:	d006      	beq.n	255e4 <z_impl_zsock_poll+0x150>
			errno = -ret;
   255d6:	f01d fba0 	bl	42d1a <__errno>
   255da:	4276      	negs	r6, r6
   255dc:	6006      	str	r6, [r0, #0]
			return -1;
   255de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   255e2:	e789      	b.n	254f8 <z_impl_zsock_poll+0x64>
		pev = poll_events;
   255e4:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   255e6:	46b8      	mov	r8, r7
		ret = 0;
   255e8:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   255ea:	9e05      	ldr	r6, [sp, #20]
   255ec:	f1b8 0f00 	cmp.w	r8, #0
   255f0:	d11c      	bne.n	2562c <z_impl_zsock_poll+0x198>
		if (retry) {
   255f2:	2d00      	cmp	r5, #0
   255f4:	d080      	beq.n	254f8 <z_impl_zsock_poll+0x64>
			if (ret > 0) {
   255f6:	2c00      	cmp	r4, #0
   255f8:	f73f af7e 	bgt.w	254f8 <z_impl_zsock_poll+0x64>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   255fc:	ea5a 030b 	orrs.w	r3, sl, fp
   25600:	f43f af7a 	beq.w	254f8 <z_impl_zsock_poll+0x64>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25604:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   25608:	bf08      	it	eq
   2560a:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   2560e:	d0cb      	beq.n	255a8 <z_impl_zsock_poll+0x114>
				int64_t remaining = end - z_tick_get();
   25610:	f019 fc80 	bl	3ef14 <z_tick_get>
   25614:	9b06      	ldr	r3, [sp, #24]
   25616:	ebb3 0a00 	subs.w	sl, r3, r0
   2561a:	9b07      	ldr	r3, [sp, #28]
   2561c:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   25620:	f1ba 0f01 	cmp.w	sl, #1
   25624:	f17b 0300 	sbcs.w	r3, fp, #0
   25628:	dabe      	bge.n	255a8 <z_impl_zsock_poll+0x114>
   2562a:	e765      	b.n	254f8 <z_impl_zsock_poll+0x64>
			if (pfd->fd < 0) {
   2562c:	6830      	ldr	r0, [r6, #0]
			pfd->revents = 0;
   2562e:	f8a6 9006 	strh.w	r9, [r6, #6]
			if (pfd->fd < 0) {
   25632:	2800      	cmp	r0, #0
   25634:	db1b      	blt.n	2566e <z_impl_zsock_poll+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
   25636:	a90a      	add	r1, sp, #40	; 0x28
   25638:	f7fe fd58 	bl	240ec <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   2563c:	4601      	mov	r1, r0
   2563e:	b918      	cbnz	r0, 25648 <z_impl_zsock_poll+0x1b4>
				pfd->revents = ZSOCK_POLLNVAL;
   25640:	2320      	movs	r3, #32
   25642:	80f3      	strh	r3, [r6, #6]
				ret++;
   25644:	3401      	adds	r4, #1
   25646:	e012      	b.n	2566e <z_impl_zsock_poll+0x1da>
			result = z_fdtable_call_ioctl(vtable, ctx,
   25648:	ab09      	add	r3, sp, #36	; 0x24
   2564a:	9300      	str	r3, [sp, #0]
   2564c:	f240 1203 	movw	r2, #259	; 0x103
   25650:	4633      	mov	r3, r6
   25652:	980a      	ldr	r0, [sp, #40]	; 0x28
   25654:	f01d f85a 	bl	4270c <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   25658:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   2565c:	4603      	mov	r3, r0
			if (result == -EAGAIN) {
   2565e:	d00a      	beq.n	25676 <z_impl_zsock_poll+0x1e2>
			} else if (result != 0) {
   25660:	2800      	cmp	r0, #0
   25662:	f47f af75 	bne.w	25550 <z_impl_zsock_poll+0xbc>
			if (pfd->revents != 0) {
   25666:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   2566a:	2b00      	cmp	r3, #0
   2566c:	d1ea      	bne.n	25644 <z_impl_zsock_poll+0x1b0>
		for (pfd = fds, i = nfds; i--; pfd++) {
   2566e:	3608      	adds	r6, #8
   25670:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   25674:	e7ba      	b.n	255ec <z_impl_zsock_poll+0x158>
				retry = true;
   25676:	2501      	movs	r5, #1
   25678:	e7f9      	b.n	2566e <z_impl_zsock_poll+0x1da>
   2567a:	bf00      	nop
   2567c:	cccccccd 	.word	0xcccccccd

00025680 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   25680:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   25682:	4605      	mov	r5, r0
   25684:	b948      	cbnz	r0, 2569a <socket_offload_dns_register+0x1a>
   25686:	490c      	ldr	r1, [pc, #48]	; (256b8 <socket_offload_dns_register+0x38>)
   25688:	480c      	ldr	r0, [pc, #48]	; (256bc <socket_offload_dns_register+0x3c>)
   2568a:	2313      	movs	r3, #19
   2568c:	4a0c      	ldr	r2, [pc, #48]	; (256c0 <socket_offload_dns_register+0x40>)
   2568e:	f01c faab 	bl	41be8 <printk>
   25692:	2113      	movs	r1, #19
   25694:	480a      	ldr	r0, [pc, #40]	; (256c0 <socket_offload_dns_register+0x40>)
   25696:	f01c fcc1 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   2569a:	4c0a      	ldr	r4, [pc, #40]	; (256c4 <socket_offload_dns_register+0x44>)
   2569c:	6822      	ldr	r2, [r4, #0]
   2569e:	b14a      	cbz	r2, 256b4 <socket_offload_dns_register+0x34>
   256a0:	4909      	ldr	r1, [pc, #36]	; (256c8 <socket_offload_dns_register+0x48>)
   256a2:	4806      	ldr	r0, [pc, #24]	; (256bc <socket_offload_dns_register+0x3c>)
   256a4:	2314      	movs	r3, #20
   256a6:	4a06      	ldr	r2, [pc, #24]	; (256c0 <socket_offload_dns_register+0x40>)
   256a8:	f01c fa9e 	bl	41be8 <printk>
   256ac:	2114      	movs	r1, #20
   256ae:	4804      	ldr	r0, [pc, #16]	; (256c0 <socket_offload_dns_register+0x40>)
   256b0:	f01c fcb4 	bl	4201c <assert_post_action>

	dns_offload = ops;
   256b4:	6025      	str	r5, [r4, #0]
}
   256b6:	bd38      	pop	{r3, r4, r5, pc}
   256b8:	0004ea8a 	.word	0x0004ea8a
   256bc:	0004825b 	.word	0x0004825b
   256c0:	00049514 	.word	0x00049514
   256c4:	20024688 	.word	0x20024688
   256c8:	0004954f 	.word	0x0004954f

000256cc <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   256cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   256d0:	4c13      	ldr	r4, [pc, #76]	; (25720 <socket_offload_getaddrinfo+0x54>)
{
   256d2:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   256d4:	6823      	ldr	r3, [r4, #0]
{
   256d6:	4605      	mov	r5, r0
   256d8:	460e      	mov	r6, r1
   256da:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   256dc:	b94b      	cbnz	r3, 256f2 <socket_offload_getaddrinfo+0x26>
   256de:	4911      	ldr	r1, [pc, #68]	; (25724 <socket_offload_getaddrinfo+0x58>)
   256e0:	4811      	ldr	r0, [pc, #68]	; (25728 <socket_offload_getaddrinfo+0x5c>)
   256e2:	231d      	movs	r3, #29
   256e4:	4a11      	ldr	r2, [pc, #68]	; (2572c <socket_offload_getaddrinfo+0x60>)
   256e6:	f01c fa7f 	bl	41be8 <printk>
   256ea:	211d      	movs	r1, #29
   256ec:	480f      	ldr	r0, [pc, #60]	; (2572c <socket_offload_getaddrinfo+0x60>)
   256ee:	f01c fc95 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   256f2:	6823      	ldr	r3, [r4, #0]
   256f4:	681b      	ldr	r3, [r3, #0]
   256f6:	b94b      	cbnz	r3, 2570c <socket_offload_getaddrinfo+0x40>
   256f8:	490d      	ldr	r1, [pc, #52]	; (25730 <socket_offload_getaddrinfo+0x64>)
   256fa:	480b      	ldr	r0, [pc, #44]	; (25728 <socket_offload_getaddrinfo+0x5c>)
   256fc:	231e      	movs	r3, #30
   256fe:	4a0b      	ldr	r2, [pc, #44]	; (2572c <socket_offload_getaddrinfo+0x60>)
   25700:	f01c fa72 	bl	41be8 <printk>
   25704:	211e      	movs	r1, #30
   25706:	4809      	ldr	r0, [pc, #36]	; (2572c <socket_offload_getaddrinfo+0x60>)
   25708:	f01c fc88 	bl	4201c <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   2570c:	6823      	ldr	r3, [r4, #0]
   2570e:	463a      	mov	r2, r7
   25710:	681c      	ldr	r4, [r3, #0]
   25712:	4631      	mov	r1, r6
   25714:	4643      	mov	r3, r8
   25716:	4628      	mov	r0, r5
   25718:	46a4      	mov	ip, r4
}
   2571a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   2571e:	4760      	bx	ip
   25720:	20024688 	.word	0x20024688
   25724:	00049584 	.word	0x00049584
   25728:	0004825b 	.word	0x0004825b
   2572c:	00049514 	.word	0x00049514
   25730:	00049590 	.word	0x00049590

00025734 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   25734:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   25736:	4c10      	ldr	r4, [pc, #64]	; (25778 <socket_offload_freeaddrinfo+0x44>)
{
   25738:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   2573a:	6823      	ldr	r3, [r4, #0]
   2573c:	b94b      	cbnz	r3, 25752 <socket_offload_freeaddrinfo+0x1e>
   2573e:	490f      	ldr	r1, [pc, #60]	; (2577c <socket_offload_freeaddrinfo+0x48>)
   25740:	480f      	ldr	r0, [pc, #60]	; (25780 <socket_offload_freeaddrinfo+0x4c>)
   25742:	2325      	movs	r3, #37	; 0x25
   25744:	4a0f      	ldr	r2, [pc, #60]	; (25784 <socket_offload_freeaddrinfo+0x50>)
   25746:	f01c fa4f 	bl	41be8 <printk>
   2574a:	2125      	movs	r1, #37	; 0x25
   2574c:	480d      	ldr	r0, [pc, #52]	; (25784 <socket_offload_freeaddrinfo+0x50>)
   2574e:	f01c fc65 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   25752:	6823      	ldr	r3, [r4, #0]
   25754:	685b      	ldr	r3, [r3, #4]
   25756:	b94b      	cbnz	r3, 2576c <socket_offload_freeaddrinfo+0x38>
   25758:	490b      	ldr	r1, [pc, #44]	; (25788 <socket_offload_freeaddrinfo+0x54>)
   2575a:	4809      	ldr	r0, [pc, #36]	; (25780 <socket_offload_freeaddrinfo+0x4c>)
   2575c:	2326      	movs	r3, #38	; 0x26
   2575e:	4a09      	ldr	r2, [pc, #36]	; (25784 <socket_offload_freeaddrinfo+0x50>)
   25760:	f01c fa42 	bl	41be8 <printk>
   25764:	2126      	movs	r1, #38	; 0x26
   25766:	4807      	ldr	r0, [pc, #28]	; (25784 <socket_offload_freeaddrinfo+0x50>)
   25768:	f01c fc58 	bl	4201c <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   2576c:	6823      	ldr	r3, [r4, #0]
   2576e:	4628      	mov	r0, r5
}
   25770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   25774:	685b      	ldr	r3, [r3, #4]
   25776:	4718      	bx	r3
   25778:	20024688 	.word	0x20024688
   2577c:	00049584 	.word	0x00049584
   25780:	0004825b 	.word	0x0004825b
   25784:	00049514 	.word	0x00049514
   25788:	0004956a 	.word	0x0004956a

0002578c <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   2578c:	4b08      	ldr	r3, [pc, #32]	; (257b0 <get_flash_area_from_id+0x24>)
{
   2578e:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   25790:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   25792:	4b08      	ldr	r3, [pc, #32]	; (257b4 <get_flash_area_from_id+0x28>)
   25794:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   25796:	2300      	movs	r3, #0
   25798:	429d      	cmp	r5, r3
   2579a:	dc02      	bgt.n	257a2 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   2579c:	2200      	movs	r2, #0
}
   2579e:	4610      	mov	r0, r2
   257a0:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   257a2:	011c      	lsls	r4, r3, #4
   257a4:	190a      	adds	r2, r1, r4
   257a6:	5d0c      	ldrb	r4, [r1, r4]
   257a8:	4284      	cmp	r4, r0
   257aa:	d0f8      	beq.n	2579e <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   257ac:	3301      	adds	r3, #1
   257ae:	e7f3      	b.n	25798 <get_flash_area_from_id+0xc>
   257b0:	00046d4c 	.word	0x00046d4c
   257b4:	2002064c 	.word	0x2002064c

000257b8 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   257b8:	4b08      	ldr	r3, [pc, #32]	; (257dc <flash_area_open+0x24>)
{
   257ba:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   257bc:	681b      	ldr	r3, [r3, #0]
{
   257be:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   257c0:	b12b      	cbz	r3, 257ce <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   257c2:	f7ff ffe3 	bl	2578c <get_flash_area_from_id>
	if (area == NULL) {
   257c6:	b128      	cbz	r0, 257d4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   257c8:	6020      	str	r0, [r4, #0]
	return 0;
   257ca:	2000      	movs	r0, #0
}
   257cc:	bd10      	pop	{r4, pc}
		return -EACCES;
   257ce:	f06f 000c 	mvn.w	r0, #12
   257d2:	e7fb      	b.n	257cc <flash_area_open+0x14>
		return -ENOENT;
   257d4:	f06f 0001 	mvn.w	r0, #1
   257d8:	e7f8      	b.n	257cc <flash_area_open+0x14>
   257da:	bf00      	nop
   257dc:	2002064c 	.word	0x2002064c

000257e0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   257e0:	b530      	push	{r4, r5, lr}
   257e2:	b089      	sub	sp, #36	; 0x24
   257e4:	460c      	mov	r4, r1
   257e6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   257e8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   257ea:	f7ff ffcf 	bl	2578c <get_flash_area_from_id>
	if (fa == NULL) {
   257ee:	b1b8      	cbz	r0, 25820 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   257f0:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   257f2:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   257f4:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   257f6:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   257f8:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   257fa:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   257fe:	2300      	movs	r3, #0
   25800:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
   25802:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25806:	f016 fc9d 	bl	3c144 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   2580a:	b160      	cbz	r0, 25826 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   2580c:	aa01      	add	r2, sp, #4
   2580e:	4907      	ldr	r1, [pc, #28]	; (2582c <flash_area_get_sectors+0x4c>)
   25810:	f01e f96f 	bl	43af2 <flash_page_foreach>
	if (cb_data->status == 0) {
   25814:	9807      	ldr	r0, [sp, #28]
   25816:	b908      	cbnz	r0, 2581c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   25818:	9b05      	ldr	r3, [sp, #20]
   2581a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   2581c:	b009      	add	sp, #36	; 0x24
   2581e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25820:	f06f 0015 	mvn.w	r0, #21
   25824:	e7fa      	b.n	2581c <flash_area_get_sectors+0x3c>
		return -ENODEV;
   25826:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2582a:	e7f7      	b.n	2581c <flash_area_get_sectors+0x3c>
   2582c:	000428c3 	.word	0x000428c3

00025830 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   25830:	4b0f      	ldr	r3, [pc, #60]	; (25870 <settings_save_one+0x40>)
{
   25832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   25836:	681c      	ldr	r4, [r3, #0]
{
   25838:	4606      	mov	r6, r0
   2583a:	460f      	mov	r7, r1
   2583c:	4690      	mov	r8, r2
	if (!cs) {
   2583e:	b1a4      	cbz	r4, 2586a <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
   25840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25848:	480a      	ldr	r0, [pc, #40]	; (25874 <settings_save_one+0x44>)
   2584a:	f017 f8cb 	bl	3c9e4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   2584e:	6863      	ldr	r3, [r4, #4]
   25850:	463a      	mov	r2, r7
   25852:	689d      	ldr	r5, [r3, #8]
   25854:	4631      	mov	r1, r6
   25856:	4643      	mov	r3, r8
   25858:	4620      	mov	r0, r4
   2585a:	47a8      	blx	r5
   2585c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   2585e:	4805      	ldr	r0, [pc, #20]	; (25874 <settings_save_one+0x44>)
   25860:	f017 f9be 	bl	3cbe0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   25864:	4620      	mov	r0, r4
   25866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   2586a:	f06f 0401 	mvn.w	r4, #1
   2586e:	e7f9      	b.n	25864 <settings_save_one+0x34>
   25870:	20024694 	.word	0x20024694
   25874:	20020b38 	.word	0x20020b38

00025878 <settings_src_register>:
	parent->next = child;
   25878:	2300      	movs	r3, #0
   2587a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   2587c:	4b04      	ldr	r3, [pc, #16]	; (25890 <settings_src_register+0x18>)
   2587e:	685a      	ldr	r2, [r3, #4]
   25880:	b912      	cbnz	r2, 25888 <settings_src_register+0x10>
	list->head = node;
   25882:	e9c3 0000 	strd	r0, r0, [r3]
   25886:	4770      	bx	lr
	parent->next = child;
   25888:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2588a:	6058      	str	r0, [r3, #4]
}
   2588c:	4770      	bx	lr
   2588e:	bf00      	nop
   25890:	2002468c 	.word	0x2002468c

00025894 <settings_dst_register>:
	settings_save_dst = cs;
   25894:	4b01      	ldr	r3, [pc, #4]	; (2589c <settings_dst_register+0x8>)
   25896:	6018      	str	r0, [r3, #0]
}
   25898:	4770      	bx	lr
   2589a:	bf00      	nop
   2589c:	20024694 	.word	0x20024694

000258a0 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   258a0:	2300      	movs	r3, #0
{
   258a2:	b530      	push	{r4, r5, lr}
   258a4:	b085      	sub	sp, #20
   258a6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   258a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   258ac:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   258ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   258b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   258b6:	480b      	ldr	r0, [pc, #44]	; (258e4 <settings_load_subtree+0x44>)
   258b8:	f017 f894 	bl	3c9e4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   258bc:	4b0a      	ldr	r3, [pc, #40]	; (258e8 <settings_load_subtree+0x48>)
   258be:	681c      	ldr	r4, [r3, #0]
   258c0:	b134      	cbz	r4, 258d0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   258c2:	6863      	ldr	r3, [r4, #4]
   258c4:	4620      	mov	r0, r4
   258c6:	681b      	ldr	r3, [r3, #0]
   258c8:	a901      	add	r1, sp, #4
   258ca:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   258cc:	6824      	ldr	r4, [r4, #0]
	return node->next;
   258ce:	e7f7      	b.n	258c0 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   258d0:	4628      	mov	r0, r5
   258d2:	f000 f905 	bl	25ae0 <settings_commit_subtree>
   258d6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   258d8:	4802      	ldr	r0, [pc, #8]	; (258e4 <settings_load_subtree+0x44>)
   258da:	f017 f981 	bl	3cbe0 <z_impl_k_mutex_unlock>
}
   258de:	4620      	mov	r0, r4
   258e0:	b005      	add	sp, #20
   258e2:	bd30      	pop	{r4, r5, pc}
   258e4:	20020b38 	.word	0x20020b38
   258e8:	2002468c 	.word	0x2002468c

000258ec <settings_store_init>:
	list->head = NULL;
   258ec:	2200      	movs	r2, #0
   258ee:	4b02      	ldr	r3, [pc, #8]	; (258f8 <settings_store_init+0xc>)
	list->tail = NULL;
   258f0:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   258f4:	4770      	bx	lr
   258f6:	bf00      	nop
   258f8:	2002468c 	.word	0x2002468c

000258fc <settings_init>:
	list->head = NULL;
   258fc:	2200      	movs	r2, #0
   258fe:	4b02      	ldr	r3, [pc, #8]	; (25908 <settings_init+0xc>)
	list->tail = NULL;
   25900:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   25904:	f7ff bff2 	b.w	258ec <settings_store_init>
   25908:	20024698 	.word	0x20024698

0002590c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   2590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25910:	4681      	mov	r9, r0
   25912:	b085      	sub	sp, #20
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   25914:	460e      	mov	r6, r1
   25916:	b109      	cbz	r1, 2591c <settings_parse_and_lookup+0x10>
		*next = NULL;
   25918:	2300      	movs	r3, #0
   2591a:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
		if (ch->name) {
			LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(ch->name));
   2591c:	2400      	movs	r4, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   2591e:	4f33      	ldr	r7, [pc, #204]	; (259ec <settings_parse_and_lookup+0xe0>)
   25920:	4b33      	ldr	r3, [pc, #204]	; (259f0 <settings_parse_and_lookup+0xe4>)
   25922:	4d34      	ldr	r5, [pc, #208]	; (259f4 <settings_parse_and_lookup+0xe8>)
   25924:	1aff      	subs	r7, r7, r3
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25926:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 25a04 <settings_parse_and_lookup+0xf8>
   2592a:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 25a14 <settings_parse_and_lookup+0x108>
			LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(ch->name));
   2592e:	f3c7 07c9 	ubfx	r7, r7, #3, #10
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25932:	4555      	cmp	r5, sl
   25934:	d90c      	bls.n	25950 <settings_parse_and_lookup+0x44>
   25936:	4930      	ldr	r1, [pc, #192]	; (259f8 <settings_parse_and_lookup+0xec>)
   25938:	2394      	movs	r3, #148	; 0x94
   2593a:	465a      	mov	r2, fp
   2593c:	482f      	ldr	r0, [pc, #188]	; (259fc <settings_parse_and_lookup+0xf0>)
   2593e:	f01c f953 	bl	41be8 <printk>
   25942:	482f      	ldr	r0, [pc, #188]	; (25a00 <settings_parse_and_lookup+0xf4>)
   25944:	f01c f950 	bl	41be8 <printk>
   25948:	2194      	movs	r1, #148	; 0x94
   2594a:	4658      	mov	r0, fp
   2594c:	f01c fb66 	bl	4201c <assert_post_action>
   25950:	4b2c      	ldr	r3, [pc, #176]	; (25a04 <settings_parse_and_lookup+0xf8>)
   25952:	429d      	cmp	r5, r3
   25954:	d308      	bcc.n	25968 <settings_parse_and_lookup+0x5c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25956:	4b2c      	ldr	r3, [pc, #176]	; (25a08 <settings_parse_and_lookup+0xfc>)
   25958:	681d      	ldr	r5, [r3, #0]
   2595a:	b10d      	cbz	r5, 25960 <settings_parse_and_lookup+0x54>
   2595c:	3d14      	subs	r5, #20
   2595e:	bb7d      	cbnz	r5, 259c0 <settings_parse_and_lookup+0xb4>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   25960:	4620      	mov	r0, r4
   25962:	b005      	add	sp, #20
   25964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ch->name) {
   25968:	682b      	ldr	r3, [r5, #0]
   2596a:	b1a3      	cbz	r3, 25996 <settings_parse_and_lookup+0x8a>
			LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(ch->name));
   2596c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   25970:	f043 0303 	orr.w	r3, r3, #3
   25974:	4825      	ldr	r0, [pc, #148]	; (25a0c <settings_parse_and_lookup+0x100>)
   25976:	f363 0807 	bfi	r8, r3, #0, #8
   2597a:	f01c fb73 	bl	42064 <log_strdup>
   2597e:	9001      	str	r0, [sp, #4]
   25980:	6828      	ldr	r0, [r5, #0]
   25982:	f01c fb6f 	bl	42064 <log_strdup>
   25986:	f367 188f 	bfi	r8, r7, #6, #10
   2598a:	4603      	mov	r3, r0
   2598c:	9a01      	ldr	r2, [sp, #4]
   2598e:	4920      	ldr	r1, [pc, #128]	; (25a10 <settings_parse_and_lookup+0x104>)
   25990:	4640      	mov	r0, r8
   25992:	f01c fb54 	bl	4203e <log_string_sync>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25996:	aa03      	add	r2, sp, #12
   25998:	6829      	ldr	r1, [r5, #0]
   2599a:	4648      	mov	r0, r9
   2599c:	f01d f825 	bl	429ea <settings_name_steq>
   259a0:	b160      	cbz	r0, 259bc <settings_parse_and_lookup+0xb0>
		if (!bestmatch) {
   259a2:	b924      	cbnz	r4, 259ae <settings_parse_and_lookup+0xa2>
			if (next) {
   259a4:	b10e      	cbz	r6, 259aa <settings_parse_and_lookup+0x9e>
				*next = tmpnext;
   259a6:	9b03      	ldr	r3, [sp, #12]
   259a8:	6033      	str	r3, [r6, #0]
   259aa:	462c      	mov	r4, r5
   259ac:	e006      	b.n	259bc <settings_parse_and_lookup+0xb0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   259ae:	2200      	movs	r2, #0
   259b0:	6821      	ldr	r1, [r4, #0]
   259b2:	6828      	ldr	r0, [r5, #0]
   259b4:	f01d f819 	bl	429ea <settings_name_steq>
   259b8:	2800      	cmp	r0, #0
   259ba:	d1f3      	bne.n	259a4 <settings_parse_and_lookup+0x98>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   259bc:	3514      	adds	r5, #20
   259be:	e7b8      	b.n	25932 <settings_parse_and_lookup+0x26>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   259c0:	aa03      	add	r2, sp, #12
   259c2:	6829      	ldr	r1, [r5, #0]
   259c4:	4648      	mov	r0, r9
   259c6:	f01d f810 	bl	429ea <settings_name_steq>
   259ca:	b160      	cbz	r0, 259e6 <settings_parse_and_lookup+0xda>
		if (!bestmatch) {
   259cc:	b924      	cbnz	r4, 259d8 <settings_parse_and_lookup+0xcc>
			if (next) {
   259ce:	b10e      	cbz	r6, 259d4 <settings_parse_and_lookup+0xc8>
				*next = tmpnext;
   259d0:	9b03      	ldr	r3, [sp, #12]
   259d2:	6033      	str	r3, [r6, #0]
   259d4:	462c      	mov	r4, r5
   259d6:	e006      	b.n	259e6 <settings_parse_and_lookup+0xda>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   259d8:	2200      	movs	r2, #0
   259da:	6821      	ldr	r1, [r4, #0]
   259dc:	6828      	ldr	r0, [r5, #0]
   259de:	f01d f804 	bl	429ea <settings_name_steq>
   259e2:	2800      	cmp	r0, #0
   259e4:	d1f3      	bne.n	259ce <settings_parse_and_lookup+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   259e6:	696d      	ldr	r5, [r5, #20]
   259e8:	e7b7      	b.n	2595a <settings_parse_and_lookup+0x4e>
   259ea:	bf00      	nop
   259ec:	00046990 	.word	0x00046990
   259f0:	00046878 	.word	0x00046878
   259f4:	00046850 	.word	0x00046850
   259f8:	00049664 	.word	0x00049664
   259fc:	0004825b 	.word	0x0004825b
   25a00:	000494f5 	.word	0x000494f5
   25a04:	00046878 	.word	0x00046878
   25a08:	20024698 	.word	0x20024698
   25a0c:	000495c9 	.word	0x000495c9
   25a10:	00049622 	.word	0x00049622
   25a14:	00049632 	.word	0x00049632

00025a18 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   25a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a1c:	469a      	mov	sl, r3
	int rc;
	const char *name_key = name;

	LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(name));
   25a1e:	f04f 0700 	mov.w	r7, #0
   25a22:	2303      	movs	r3, #3
{
   25a24:	b085      	sub	sp, #20
	LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(name));
   25a26:	f363 0707 	bfi	r7, r3, #0, #8
   25a2a:	4c28      	ldr	r4, [pc, #160]	; (25acc <settings_call_set_handler+0xb4>)
   25a2c:	4b28      	ldr	r3, [pc, #160]	; (25ad0 <settings_call_set_handler+0xb8>)
{
   25a2e:	4606      	mov	r6, r0
	const char *name_key = name;
   25a30:	9003      	str	r0, [sp, #12]
	LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(name));
   25a32:	4828      	ldr	r0, [pc, #160]	; (25ad4 <settings_call_set_handler+0xbc>)
   25a34:	1ae4      	subs	r4, r4, r3
{
   25a36:	4688      	mov	r8, r1
   25a38:	4691      	mov	r9, r2
   25a3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	LOG_INF("%s() - name: %s", log_strdup(__func__), log_strdup(name));
   25a3c:	f01c fb12 	bl	42064 <log_strdup>
   25a40:	4683      	mov	fp, r0
   25a42:	4630      	mov	r0, r6
   25a44:	f01c fb0e 	bl	42064 <log_strdup>
   25a48:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   25a4c:	f364 178f 	bfi	r7, r4, #6, #10
   25a50:	4603      	mov	r3, r0
   25a52:	465a      	mov	r2, fp
   25a54:	4920      	ldr	r1, [pc, #128]	; (25ad8 <settings_call_set_handler+0xc0>)
   25a56:	4638      	mov	r0, r7
   25a58:	f01c faf1 	bl	4203e <log_string_sync>
	if (load_arg && load_arg->subtree &&
   25a5c:	b1ad      	cbz	r5, 25a8a <settings_call_set_handler+0x72>
   25a5e:	6829      	ldr	r1, [r5, #0]
   25a60:	b181      	cbz	r1, 25a84 <settings_call_set_handler+0x6c>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25a62:	aa03      	add	r2, sp, #12
   25a64:	4630      	mov	r0, r6
   25a66:	f01c ffc0 	bl	429ea <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   25a6a:	b958      	cbnz	r0, 25a84 <settings_call_set_handler+0x6c>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   25a6c:	2000      	movs	r0, #0
   25a6e:	e006      	b.n	25a7e <settings_call_set_handler+0x66>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25a70:	68ab      	ldr	r3, [r5, #8]
   25a72:	464a      	mov	r2, r9
   25a74:	9300      	str	r3, [sp, #0]
   25a76:	4641      	mov	r1, r8
   25a78:	4653      	mov	r3, sl
   25a7a:	9803      	ldr	r0, [sp, #12]
   25a7c:	47b8      	blx	r7
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   25a7e:	b005      	add	sp, #20
   25a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (load_arg && load_arg->cb) {
   25a84:	686f      	ldr	r7, [r5, #4]
   25a86:	2f00      	cmp	r7, #0
   25a88:	d1f2      	bne.n	25a70 <settings_call_set_handler+0x58>
		ch = settings_parse_and_lookup(name, &name_key);
   25a8a:	a903      	add	r1, sp, #12
   25a8c:	4630      	mov	r0, r6
   25a8e:	f7ff ff3d 	bl	2590c <settings_parse_and_lookup>
		if (!ch) {
   25a92:	2800      	cmp	r0, #0
   25a94:	d0ea      	beq.n	25a6c <settings_call_set_handler+0x54>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   25a96:	6885      	ldr	r5, [r0, #8]
   25a98:	4653      	mov	r3, sl
   25a9a:	464a      	mov	r2, r9
   25a9c:	4641      	mov	r1, r8
   25a9e:	9803      	ldr	r0, [sp, #12]
   25aa0:	47a8      	blx	r5
		if (rc != 0) {
   25aa2:	4607      	mov	r7, r0
   25aa4:	2800      	cmp	r0, #0
   25aa6:	d0e1      	beq.n	25a6c <settings_call_set_handler+0x54>
			LOG_ERR("set-value failure. key: %s error(%d)",
   25aa8:	2301      	movs	r3, #1
   25aaa:	f04f 0500 	mov.w	r5, #0
   25aae:	4630      	mov	r0, r6
   25ab0:	f363 0507 	bfi	r5, r3, #0, #8
   25ab4:	f01c fad6 	bl	42064 <log_strdup>
   25ab8:	f364 158f 	bfi	r5, r4, #6, #10
   25abc:	4602      	mov	r2, r0
   25abe:	463b      	mov	r3, r7
   25ac0:	4906      	ldr	r1, [pc, #24]	; (25adc <settings_call_set_handler+0xc4>)
   25ac2:	4628      	mov	r0, r5
   25ac4:	f01c fabb 	bl	4203e <log_string_sync>
   25ac8:	e7d0      	b.n	25a6c <settings_call_set_handler+0x54>
   25aca:	bf00      	nop
   25acc:	00046990 	.word	0x00046990
   25ad0:	00046878 	.word	0x00046878
   25ad4:	000495e3 	.word	0x000495e3
   25ad8:	00049622 	.word	0x00049622
   25adc:	000495fd 	.word	0x000495fd

00025ae0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   25ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25ae4:	4f21      	ldr	r7, [pc, #132]	; (25b6c <settings_commit_subtree+0x8c>)
{
   25ae6:	4606      	mov	r6, r0
	rc = 0;
   25ae8:	2500      	movs	r5, #0
   25aea:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25aec:	4c20      	ldr	r4, [pc, #128]	; (25b70 <settings_commit_subtree+0x90>)
   25aee:	f8df 8094 	ldr.w	r8, [pc, #148]	; 25b84 <settings_commit_subtree+0xa4>
   25af2:	42bc      	cmp	r4, r7
   25af4:	d90c      	bls.n	25b10 <settings_commit_subtree+0x30>
   25af6:	491f      	ldr	r1, [pc, #124]	; (25b74 <settings_commit_subtree+0x94>)
   25af8:	23f8      	movs	r3, #248	; 0xf8
   25afa:	4642      	mov	r2, r8
   25afc:	481e      	ldr	r0, [pc, #120]	; (25b78 <settings_commit_subtree+0x98>)
   25afe:	f01c f873 	bl	41be8 <printk>
   25b02:	481e      	ldr	r0, [pc, #120]	; (25b7c <settings_commit_subtree+0x9c>)
   25b04:	f01c f870 	bl	41be8 <printk>
   25b08:	21f8      	movs	r1, #248	; 0xf8
   25b0a:	4640      	mov	r0, r8
   25b0c:	f01c fa86 	bl	4201c <assert_post_action>
   25b10:	454c      	cmp	r4, r9
   25b12:	d307      	bcc.n	25b24 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25b14:	4b1a      	ldr	r3, [pc, #104]	; (25b80 <settings_commit_subtree+0xa0>)
   25b16:	681c      	ldr	r4, [r3, #0]
   25b18:	b10c      	cbz	r4, 25b1e <settings_commit_subtree+0x3e>
   25b1a:	3c14      	subs	r4, #20
   25b1c:	b9a4      	cbnz	r4, 25b48 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   25b1e:	4628      	mov	r0, r5
   25b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25b24:	b91e      	cbnz	r6, 25b2e <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   25b26:	68e3      	ldr	r3, [r4, #12]
   25b28:	b94b      	cbnz	r3, 25b3e <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25b2a:	3414      	adds	r4, #20
   25b2c:	e7e1      	b.n	25af2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25b2e:	2200      	movs	r2, #0
   25b30:	4631      	mov	r1, r6
   25b32:	6820      	ldr	r0, [r4, #0]
   25b34:	f01c ff59 	bl	429ea <settings_name_steq>
   25b38:	2800      	cmp	r0, #0
   25b3a:	d1f4      	bne.n	25b26 <settings_commit_subtree+0x46>
   25b3c:	e7f5      	b.n	25b2a <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   25b3e:	4798      	blx	r3
				rc = rc2;
   25b40:	2d00      	cmp	r5, #0
   25b42:	bf08      	it	eq
   25b44:	4605      	moveq	r5, r0
   25b46:	e7f0      	b.n	25b2a <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25b48:	b91e      	cbnz	r6, 25b52 <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   25b4a:	68e3      	ldr	r3, [r4, #12]
   25b4c:	b94b      	cbnz	r3, 25b62 <settings_commit_subtree+0x82>
   25b4e:	6964      	ldr	r4, [r4, #20]
   25b50:	e7e2      	b.n	25b18 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25b52:	2200      	movs	r2, #0
   25b54:	4631      	mov	r1, r6
   25b56:	6820      	ldr	r0, [r4, #0]
   25b58:	f01c ff47 	bl	429ea <settings_name_steq>
   25b5c:	2800      	cmp	r0, #0
   25b5e:	d1f4      	bne.n	25b4a <settings_commit_subtree+0x6a>
   25b60:	e7f5      	b.n	25b4e <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   25b62:	4798      	blx	r3
				rc = rc2;
   25b64:	2d00      	cmp	r5, #0
   25b66:	bf08      	it	eq
   25b68:	4605      	moveq	r5, r0
   25b6a:	e7f0      	b.n	25b4e <settings_commit_subtree+0x6e>
   25b6c:	00046878 	.word	0x00046878
   25b70:	00046850 	.word	0x00046850
   25b74:	00049664 	.word	0x00049664
   25b78:	0004825b 	.word	0x0004825b
   25b7c:	000494f5 	.word	0x000494f5
   25b80:	20024698 	.word	0x20024698
   25b84:	00049632 	.word	0x00049632

00025b88 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   25b88:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   25b8a:	4c06      	ldr	r4, [pc, #24]	; (25ba4 <settings_subsys_init+0x1c>)
   25b8c:	7823      	ldrb	r3, [r4, #0]
   25b8e:	b93b      	cbnz	r3, 25ba0 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   25b90:	f7ff feb4 	bl	258fc <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   25b94:	f000 fac8 	bl	26128 <settings_backend_init>

	if (!err) {
   25b98:	b908      	cbnz	r0, 25b9e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   25b9a:	2301      	movs	r3, #1
   25b9c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   25b9e:	bd10      	pop	{r4, pc}
		return 0;
   25ba0:	2000      	movs	r0, #0
   25ba2:	e7fc      	b.n	25b9e <settings_subsys_init+0x16>
   25ba4:	2002ae84 	.word	0x2002ae84

00025ba8 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   25ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bac:	b08b      	sub	sp, #44	; 0x2c
   25bae:	9302      	str	r3, [sp, #8]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   25bb0:	4b29      	ldr	r3, [pc, #164]	; (25c58 <settings_line_raw_read_until+0xb0>)
{
   25bb2:	468a      	mov	sl, r1
	uint8_t rbs = settings_io_cb.rwbs;
   25bb4:	7b19      	ldrb	r1, [r3, #12]
{
   25bb6:	4680      	mov	r8, r0
	uint8_t rbs = settings_io_cb.rwbs;
   25bb8:	9101      	str	r1, [sp, #4]
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   25bba:	4615      	mov	r5, r2
   25bbc:	2a00      	cmp	r2, #0
   25bbe:	d045      	beq.n	25c4c <settings_line_raw_read_until+0xa4>
   25bc0:	4616      	mov	r6, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25bc2:	4699      	mov	r9, r3
		read_size = sizeof(temp_buf);
   25bc4:	2310      	movs	r3, #16
   25bc6:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   25bc8:	9b01      	ldr	r3, [sp, #4]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25bca:	f8d9 7000 	ldr.w	r7, [r9]
		off = seek / rbs * rbs;
   25bce:	fb98 f4f3 	sdiv	r4, r8, r3
   25bd2:	435c      	muls	r4, r3
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25bd4:	aa06      	add	r2, sp, #24
   25bd6:	ab05      	add	r3, sp, #20
   25bd8:	4621      	mov	r1, r4
   25bda:	9815      	ldr	r0, [sp, #84]	; 0x54
   25bdc:	47b8      	blx	r7
		if (rc) {
   25bde:	4607      	mov	r7, r0
   25be0:	2800      	cmp	r0, #0
   25be2:	d136      	bne.n	25c52 <settings_line_raw_read_until+0xaa>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   25be4:	eba8 0b04 	sub.w	fp, r8, r4
   25be8:	9c05      	ldr	r4, [sp, #20]
   25bea:	ab06      	add	r3, sp, #24
   25bec:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
   25bf0:	449b      	add	fp, r3

		if (until_char != NULL) {
   25bf2:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   25bf4:	42b4      	cmp	r4, r6
   25bf6:	bf28      	it	cs
   25bf8:	4634      	movcs	r4, r6
		if (until_char != NULL) {
   25bfa:	b31b      	cbz	r3, 25c44 <settings_line_raw_read_until+0x9c>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   25bfc:	4622      	mov	r2, r4
   25bfe:	7819      	ldrb	r1, [r3, #0]
   25c00:	4658      	mov	r0, fp
   25c02:	f01f faf5 	bl	451f0 <memchr>
			if (pend != NULL) {
   25c06:	b1f8      	cbz	r0, 25c48 <settings_line_raw_read_until+0xa0>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   25c08:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   25c0a:	eba0 040b 	sub.w	r4, r0, fp
   25c0e:	4622      	mov	r2, r4
   25c10:	4659      	mov	r1, fp
   25c12:	4650      	mov	r0, sl
   25c14:	9303      	str	r3, [sp, #12]
   25c16:	f01f fb07 	bl	45228 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   25c1a:	9a05      	ldr	r2, [sp, #20]
		rem_size -= len;
   25c1c:	1b36      	subs	r6, r6, r4
		if (exp_size > read_size || rc) {
   25c1e:	2a0f      	cmp	r2, #15
   25c20:	9b03      	ldr	r3, [sp, #12]
   25c22:	d904      	bls.n	25c2e <settings_line_raw_read_until+0x86>
   25c24:	b91b      	cbnz	r3, 25c2e <settings_line_raw_read_until+0x86>
			break;
		}

		out += len;
   25c26:	44a2      	add	sl, r4
		seek += len;
   25c28:	44a0      	add	r8, r4
	while (rem_size) {
   25c2a:	2e00      	cmp	r6, #0
   25c2c:	d1ca      	bne.n	25bc4 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   25c2e:	9a02      	ldr	r2, [sp, #8]
   25c30:	1bad      	subs	r5, r5, r6
   25c32:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   25c34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25c36:	b10a      	cbz	r2, 25c3c <settings_line_raw_read_until+0x94>
		return (rc) ? 0 : 1;
   25c38:	f083 0701 	eor.w	r7, r3, #1
	}

	return 0;
}
   25c3c:	4638      	mov	r0, r7
   25c3e:	b00b      	add	sp, #44	; 0x2c
   25c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25c46:	e7e2      	b.n	25c0e <settings_line_raw_read_until+0x66>
   25c48:	463b      	mov	r3, r7
   25c4a:	e7e0      	b.n	25c0e <settings_line_raw_read_until+0x66>
		return -EINVAL;
   25c4c:	f06f 0715 	mvn.w	r7, #21
   25c50:	e7f4      	b.n	25c3c <settings_line_raw_read_until+0x94>
			return -EIO;
   25c52:	f06f 0704 	mvn.w	r7, #4
   25c56:	e7f1      	b.n	25c3c <settings_line_raw_read_until+0x94>
   25c58:	200246a0 	.word	0x200246a0

00025c5c <settings_line_write>:
{
   25c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   25c60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 25d20 <settings_line_write+0xc4>
{
   25c64:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   25c66:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
   25c6a:	4683      	mov	fp, r0
   25c6c:	4689      	mov	r9, r1
   25c6e:	4690      	mov	r8, r2
   25c70:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   25c72:	f7f7 faf7 	bl	1d264 <strlen>
	w_size = rem - rem % wbs;
   25c76:	fbb0 f4f7 	udiv	r4, r0, r7
   25c7a:	fb07 0414 	mls	r4, r7, r4, r0
   25c7e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   25c80:	462b      	mov	r3, r5
   25c82:	465a      	mov	r2, fp
   25c84:	9901      	ldr	r1, [sp, #4]
   25c86:	9810      	ldr	r0, [sp, #64]	; 0x40
   25c88:	f8da 6004 	ldr.w	r6, [sl, #4]
   25c8c:	47b0      	blx	r6
	w_loc += w_size;
   25c8e:	9b01      	ldr	r3, [sp, #4]
   25c90:	442b      	add	r3, r5
   25c92:	9301      	str	r3, [sp, #4]
	if (rem) {
   25c94:	b134      	cbz	r4, 25ca4 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   25c96:	2310      	movs	r3, #16
   25c98:	4622      	mov	r2, r4
   25c9a:	eb0b 0105 	add.w	r1, fp, r5
   25c9e:	a802      	add	r0, sp, #8
   25ca0:	f01f facf 	bl	45242 <__memcpy_chk>
	w_buf[rem] = '=';
   25ca4:	223d      	movs	r2, #61	; 0x3d
   25ca6:	ab06      	add	r3, sp, #24
   25ca8:	4423      	add	r3, r4
   25caa:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   25cae:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
   25cb0:	2c0f      	cmp	r4, #15
   25cb2:	d90d      	bls.n	25cd0 <settings_line_write+0x74>
   25cb4:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   25cb6:	4623      	mov	r3, r4
   25cb8:	aa02      	add	r2, sp, #8
   25cba:	9901      	ldr	r1, [sp, #4]
   25cbc:	9810      	ldr	r0, [sp, #64]	; 0x40
   25cbe:	f8da 6004 	ldr.w	r6, [sl, #4]
   25cc2:	47b0      	blx	r6
		if (rc) {
   25cc4:	bb30      	cbnz	r0, 25d14 <settings_line_write+0xb8>
		if (done) {
   25cc6:	bb3d      	cbnz	r5, 25d18 <settings_line_write+0xbc>
		w_loc += w_size;
   25cc8:	9b01      	ldr	r3, [sp, #4]
   25cca:	4423      	add	r3, r4
		w_size = 0;
   25ccc:	462c      	mov	r4, r5
		w_loc += w_size;
   25cce:	9301      	str	r3, [sp, #4]
				if (rem) {
   25cd0:	f1b8 0f00 	cmp.w	r8, #0
   25cd4:	d00f      	beq.n	25cf6 <settings_line_write+0x9a>
					add = MIN(rem, sizeof(w_buf) - w_size);
   25cd6:	f1c4 0510 	rsb	r5, r4, #16
   25cda:	4545      	cmp	r5, r8
   25cdc:	bf28      	it	cs
   25cde:	4645      	movcs	r5, r8
   25ce0:	ab02      	add	r3, sp, #8
   25ce2:	4649      	mov	r1, r9
   25ce4:	1918      	adds	r0, r3, r4
   25ce6:	462a      	mov	r2, r5
   25ce8:	f01f fa9e 	bl	45228 <memcpy>
					value += add;
   25cec:	44a9      	add	r9, r5
					rem -= add;
   25cee:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
   25cf2:	442c      	add	r4, r5
   25cf4:	e7dc      	b.n	25cb0 <settings_line_write+0x54>
					add = (w_size) % wbs;
   25cf6:	fbb4 f5f7 	udiv	r5, r4, r7
   25cfa:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
   25cfe:	b13d      	cbz	r5, 25d10 <settings_line_write+0xb4>
						add = wbs - add;
   25d00:	1b7d      	subs	r5, r7, r5
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   25d02:	ab02      	add	r3, sp, #8
   25d04:	1918      	adds	r0, r3, r4
   25d06:	462a      	mov	r2, r5
   25d08:	4641      	mov	r1, r8
   25d0a:	f01f faad 	bl	45268 <memset>
						w_size += add;
   25d0e:	442c      	add	r4, r5
					done = true;
   25d10:	2501      	movs	r5, #1
   25d12:	e7d0      	b.n	25cb6 <settings_line_write+0x5a>
			return -EIO;
   25d14:	f06f 0004 	mvn.w	r0, #4
}
   25d18:	b007      	add	sp, #28
   25d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d1e:	bf00      	nop
   25d20:	200246a0 	.word	0x200246a0

00025d24 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25d24:	4b03      	ldr	r3, [pc, #12]	; (25d34 <settings_line_val_get_len+0x10>)
{
   25d26:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25d28:	689b      	ldr	r3, [r3, #8]
{
   25d2a:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25d2c:	4608      	mov	r0, r1
   25d2e:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
   25d30:	1b00      	subs	r0, r0, r4
   25d32:	bd10      	pop	{r4, pc}
   25d34:	200246a0 	.word	0x200246a0

00025d38 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   25d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25d3c:	4681      	mov	r9, r0
   25d3e:	460d      	mov	r5, r1
   25d40:	4692      	mov	sl, r2
   25d42:	461e      	mov	r6, r3
	int rc = -EINVAL;
   25d44:	f06f 0015 	mvn.w	r0, #21
{
   25d48:	b086      	sub	sp, #24
   25d4a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25d4e:	4f11      	ldr	r7, [pc, #68]	; (25d94 <settings_line_entry_copy+0x5c>)
	while (len) {
   25d50:	f1b8 0f00 	cmp.w	r8, #0
   25d54:	d102      	bne.n	25d5c <settings_line_entry_copy+0x24>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   25d56:	b006      	add	sp, #24
   25d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   25d5c:	4643      	mov	r3, r8
   25d5e:	2b10      	cmp	r3, #16
   25d60:	bf28      	it	cs
   25d62:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25d64:	aa02      	add	r2, sp, #8
		chunk_size = MIN(len, sizeof(buf));
   25d66:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25d68:	4631      	mov	r1, r6
   25d6a:	ab01      	add	r3, sp, #4
   25d6c:	4650      	mov	r0, sl
   25d6e:	683c      	ldr	r4, [r7, #0]
   25d70:	47a0      	blx	r4
		if (rc) {
   25d72:	2800      	cmp	r0, #0
   25d74:	d1ef      	bne.n	25d56 <settings_line_entry_copy+0x1e>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
   25d76:	9b01      	ldr	r3, [sp, #4]
   25d78:	aa02      	add	r2, sp, #8
   25d7a:	4629      	mov	r1, r5
   25d7c:	4648      	mov	r0, r9
   25d7e:	687c      	ldr	r4, [r7, #4]
   25d80:	47a0      	blx	r4
		if (rc) {
   25d82:	2800      	cmp	r0, #0
   25d84:	d1e7      	bne.n	25d56 <settings_line_entry_copy+0x1e>
		src_off += chunk_size;
   25d86:	9b01      	ldr	r3, [sp, #4]
   25d88:	441e      	add	r6, r3
		dst_off += chunk_size;
   25d8a:	441d      	add	r5, r3
		len -= chunk_size;
   25d8c:	eba8 0803 	sub.w	r8, r8, r3
   25d90:	e7de      	b.n	25d50 <settings_line_entry_copy+0x18>
   25d92:	bf00      	nop
   25d94:	200246a0 	.word	0x200246a0

00025d98 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   25d98:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   25d9a:	4c03      	ldr	r4, [pc, #12]	; (25da8 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   25d9c:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   25da0:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   25da2:	7323      	strb	r3, [r4, #12]
}
   25da4:	bd10      	pop	{r4, pc}
   25da6:	bf00      	nop
   25da8:	200246a0 	.word	0x200246a0

00025dac <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   25dac:	b530      	push	{r4, r5, lr}
   25dae:	4604      	mov	r4, r0
   25db0:	b085      	sub	sp, #20
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   25db2:	4610      	mov	r0, r2
{
   25db4:	461d      	mov	r5, r3
	value_ctx.off = off;
   25db6:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   25dba:	f7ff ffb3 	bl	25d24 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   25dbe:	9500      	str	r5, [sp, #0]
   25dc0:	4601      	mov	r1, r0
   25dc2:	ab02      	add	r3, sp, #8
   25dc4:	4a02      	ldr	r2, [pc, #8]	; (25dd0 <settings_line_load_cb+0x24>)
   25dc6:	4620      	mov	r0, r4
   25dc8:	f7ff fe26 	bl	25a18 <settings_call_set_handler>
					 &value_ctx, arg);
}
   25dcc:	b005      	add	sp, #20
   25dce:	bd30      	pop	{r4, r5, pc}
   25dd0:	00042a4b 	.word	0x00042a4b

00025dd4 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   25dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25dd8:	4680      	mov	r8, r0
   25dda:	b0b3      	sub	sp, #204	; 0xcc
   25ddc:	4689      	mov	r9, r1
   25dde:	4692      	mov	sl, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   25de0:	2100      	movs	r1, #0
   25de2:	2210      	movs	r2, #16
   25de4:	a802      	add	r0, sp, #8
{
   25de6:	469b      	mov	fp, r3
	struct fcb_entry_ctx entry_ctx = {
   25de8:	f01f fa3e 	bl	45268 <memset>
   25dec:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
			LOG_ERR("failed to load line");
   25df0:	4c35      	ldr	r4, [pc, #212]	; (25ec8 <settings_fcb_load_priv+0xf4>)
	struct fcb_entry_ctx entry_ctx = {
   25df2:	9306      	str	r3, [sp, #24]
			LOG_ERR("failed to load line");
   25df4:	4b35      	ldr	r3, [pc, #212]	; (25ecc <settings_fcb_load_priv+0xf8>)
   25df6:	1ae4      	subs	r4, r4, r3
   25df8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   25dfc:	f108 0708 	add.w	r7, r8, #8
   25e00:	a902      	add	r1, sp, #8
   25e02:	4638      	mov	r0, r7
   25e04:	f01c fbb3 	bl	4256e <fcb_getnext>
   25e08:	b118      	cbz	r0, 25e12 <settings_fcb_load_priv+0x3e>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   25e0a:	2000      	movs	r0, #0
   25e0c:	b033      	add	sp, #204	; 0xcc
   25e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   25e12:	466a      	mov	r2, sp
   25e14:	ab02      	add	r3, sp, #8
   25e16:	214a      	movs	r1, #74	; 0x4a
   25e18:	a80c      	add	r0, sp, #48	; 0x30
   25e1a:	f01c fe25 	bl	42a68 <settings_line_name_read>
		if (rc) {
   25e1e:	4602      	mov	r2, r0
   25e20:	b160      	cbz	r0, 25e3c <settings_fcb_load_priv+0x68>
			LOG_ERR("Failed to load line name: %d", rc);
   25e22:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   25e26:	f043 0301 	orr.w	r3, r3, #1
   25e2a:	f363 0607 	bfi	r6, r3, #0, #8
   25e2e:	f364 168f 	bfi	r6, r4, #6, #10
   25e32:	4927      	ldr	r1, [pc, #156]	; (25ed0 <settings_fcb_load_priv+0xfc>)
   25e34:	4630      	mov	r0, r6
   25e36:	f01c f902 	bl	4203e <log_string_sync>
			continue;
   25e3a:	e7df      	b.n	25dfc <settings_fcb_load_priv+0x28>
		name[name_len] = '\0';
   25e3c:	9b00      	ldr	r3, [sp, #0]
   25e3e:	a932      	add	r1, sp, #200	; 0xc8
   25e40:	4419      	add	r1, r3
   25e42:	f801 0c98 	strb.w	r0, [r1, #-152]
		if (filter_duplicates &&
   25e46:	f1bb 0f00 	cmp.w	fp, #0
   25e4a:	d015      	beq.n	25e78 <settings_fcb_load_priv+0xa4>
	if (off >= entry_ctx->loc.fe_data_len) {
   25e4c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   25e50:	3301      	adds	r3, #1
   25e52:	4293      	cmp	r3, r2
   25e54:	dad2      	bge.n	25dfc <settings_fcb_load_priv+0x28>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   25e56:	f10d 0c1c 	add.w	ip, sp, #28
   25e5a:	f10d 0e08 	add.w	lr, sp, #8
   25e5e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25e62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   25e66:	f8de 3000 	ldr.w	r3, [lr]
   25e6a:	f8cc 3000 	str.w	r3, [ip]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   25e6e:	a907      	add	r1, sp, #28
   25e70:	4638      	mov	r0, r7
   25e72:	f01c fb7c 	bl	4256e <fcb_getnext>
   25e76:	b130      	cbz	r0, 25e86 <settings_fcb_load_priv+0xb2>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   25e78:	9a00      	ldr	r2, [sp, #0]
   25e7a:	4653      	mov	r3, sl
   25e7c:	3201      	adds	r2, #1
   25e7e:	a902      	add	r1, sp, #8
   25e80:	a80c      	add	r0, sp, #48	; 0x30
   25e82:	47c8      	blx	r9
   25e84:	e7ba      	b.n	25dfc <settings_fcb_load_priv+0x28>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   25e86:	ab07      	add	r3, sp, #28
   25e88:	aa01      	add	r2, sp, #4
   25e8a:	214a      	movs	r1, #74	; 0x4a
   25e8c:	a81f      	add	r0, sp, #124	; 0x7c
   25e8e:	f01c fdeb 	bl	42a68 <settings_line_name_read>
   25e92:	b160      	cbz	r0, 25eae <settings_fcb_load_priv+0xda>
			LOG_ERR("failed to load line");
   25e94:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   25e98:	f043 0301 	orr.w	r3, r3, #1
   25e9c:	f363 0507 	bfi	r5, r3, #0, #8
   25ea0:	f364 158f 	bfi	r5, r4, #6, #10
   25ea4:	490b      	ldr	r1, [pc, #44]	; (25ed4 <settings_fcb_load_priv+0x100>)
   25ea6:	4628      	mov	r0, r5
   25ea8:	f01c f8c9 	bl	4203e <log_string_sync>
			continue;
   25eac:	e7df      	b.n	25e6e <settings_fcb_load_priv+0x9a>
		name2[name2_len] = '\0';
   25eae:	9b01      	ldr	r3, [sp, #4]
   25eb0:	aa32      	add	r2, sp, #200	; 0xc8
   25eb2:	4413      	add	r3, r2
   25eb4:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   25eb8:	a91f      	add	r1, sp, #124	; 0x7c
   25eba:	a80c      	add	r0, sp, #48	; 0x30
   25ebc:	f7f7 f9c8 	bl	1d250 <strcmp>
   25ec0:	2800      	cmp	r0, #0
   25ec2:	d1d4      	bne.n	25e6e <settings_fcb_load_priv+0x9a>
   25ec4:	e79a      	b.n	25dfc <settings_fcb_load_priv+0x28>
   25ec6:	bf00      	nop
   25ec8:	00046990 	.word	0x00046990
   25ecc:	00046878 	.word	0x00046878
   25ed0:	00049695 	.word	0x00049695
   25ed4:	000496b2 	.word	0x000496b2

00025ed8 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
	return settings_fcb_load_priv(
   25ed8:	460a      	mov	r2, r1
   25eda:	2301      	movs	r3, #1
   25edc:	4901      	ldr	r1, [pc, #4]	; (25ee4 <settings_fcb_load+0xc>)
   25ede:	f7ff bf79 	b.w	25dd4 <settings_fcb_load_priv>
   25ee2:	bf00      	nop
   25ee4:	00025dad 	.word	0x00025dad

00025ee8 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   25ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25eec:	b0c3      	sub	sp, #268	; 0x10c
   25eee:	4606      	mov	r6, r0
   25ef0:	460f      	mov	r7, r1
   25ef2:	9203      	str	r2, [sp, #12]
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   25ef4:	4698      	mov	r8, r3
   25ef6:	b103      	cbz	r3, 25efa <settings_fcb_save+0x12>
   25ef8:	b182      	cbz	r2, 25f1c <settings_fcb_save+0x34>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   25efa:	2400      	movs	r4, #0
	cdca.val = (char *)value;
   25efc:	9b03      	ldr	r3, [sp, #12]
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25efe:	aa09      	add	r2, sp, #36	; 0x24
	cdca.val = (char *)value;
   25f00:	930a      	str	r3, [sp, #40]	; 0x28
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25f02:	4968      	ldr	r1, [pc, #416]	; (260a4 <settings_fcb_save+0x1bc>)
   25f04:	4623      	mov	r3, r4
   25f06:	4630      	mov	r0, r6
	cdca.name = name;
   25f08:	9709      	str	r7, [sp, #36]	; 0x24
	cdca.val_len = val_len;
   25f0a:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25f0e:	f7ff ff61 	bl	25dd4 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   25f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25f14:	2b01      	cmp	r3, #1
   25f16:	f000 80c0 	beq.w	2609a <settings_fcb_save+0x1b2>
	if (!name) {
   25f1a:	b917      	cbnz	r7, 25f22 <settings_fcb_save+0x3a>
		return -EINVAL;
   25f1c:	f06f 0415 	mvn.w	r4, #21
   25f20:	e0bb      	b.n	2609a <settings_fcb_save+0x1b2>
	len = settings_line_len_calc(name, val_len);
   25f22:	4641      	mov	r1, r8
   25f24:	4638      	mov	r0, r7
   25f26:	f01c fd80 	bl	42a2a <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25f2a:	4b5f      	ldr	r3, [pc, #380]	; (260a8 <settings_fcb_save+0x1c0>)
   25f2c:	4a5f      	ldr	r2, [pc, #380]	; (260ac <settings_fcb_save+0x1c4>)
	len = settings_line_len_calc(name, val_len);
   25f2e:	9005      	str	r0, [sp, #20]
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25f30:	1a9b      	subs	r3, r3, r2
   25f32:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   25f36:	9304      	str	r3, [sp, #16]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   25f38:	7b73      	ldrb	r3, [r6, #13]
   25f3a:	429c      	cmp	r4, r3
   25f3c:	daee      	bge.n	25f1c <settings_fcb_save+0x34>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25f3e:	f106 0508 	add.w	r5, r6, #8
   25f42:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   25f46:	464a      	mov	r2, r9
   25f48:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   25f4c:	4628      	mov	r0, r5
   25f4e:	f7ff f98d 	bl	2526c <fcb_append>
		if (rc != -ENOSPC) {
   25f52:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25f56:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   25f58:	f040 8089 	bne.w	2606e <settings_fcb_save+0x186>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   25f5c:	7b73      	ldrb	r3, [r6, #13]
   25f5e:	3b01      	subs	r3, #1
   25f60:	42a3      	cmp	r3, r4
   25f62:	dd24      	ble.n	25fae <settings_fcb_save+0xc6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   25f64:	4628      	mov	r0, r5
   25f66:	f01c f8a4 	bl	420b2 <fcb_append_to_scratch>
	if (rc) {
   25f6a:	4681      	mov	r9, r0
   25f6c:	b9f8      	cbnz	r0, 25fae <settings_fcb_save+0xc6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   25f6e:	6c30      	ldr	r0, [r6, #64]	; 0x40
   25f70:	f01c fd32 	bl	429d8 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   25f74:	6c33      	ldr	r3, [r6, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   25f76:	e9cd 9912 	strd	r9, r9, [sp, #72]	; 0x48
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25f7a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 260b4 <settings_fcb_save+0x1cc>
	loc1.fap = cf->cf_fcb.fap;
   25f7e:	9316      	str	r3, [sp, #88]	; 0x58
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   25f80:	a912      	add	r1, sp, #72	; 0x48
   25f82:	4628      	mov	r0, r5
   25f84:	f01c faf3 	bl	4256e <fcb_getnext>
   25f88:	b198      	cbz	r0, 25fb2 <settings_fcb_save+0xca>
	rc = fcb_rotate(&cf->cf_fcb);
   25f8a:	4628      	mov	r0, r5
   25f8c:	f01c fb09 	bl	425a2 <fcb_rotate>
	if (rc != 0) {
   25f90:	4602      	mov	r2, r0
   25f92:	b160      	cbz	r0, 25fae <settings_fcb_save+0xc6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   25f94:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   25f98:	f043 0301 	orr.w	r3, r3, #1
   25f9c:	f363 0b07 	bfi	fp, r3, #0, #8
   25fa0:	9b04      	ldr	r3, [sp, #16]
   25fa2:	4943      	ldr	r1, [pc, #268]	; (260b0 <settings_fcb_save+0x1c8>)
   25fa4:	f363 1b8f 	bfi	fp, r3, #6, #10
   25fa8:	4658      	mov	r0, fp
   25faa:	f01c f848 	bl	4203e <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   25fae:	3401      	adds	r4, #1
   25fb0:	e7c2      	b.n	25f38 <settings_fcb_save+0x50>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   25fb2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   25fb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   25fb6:	429a      	cmp	r2, r3
   25fb8:	d1e7      	bne.n	25f8a <settings_fcb_save+0xa2>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   25fba:	ab12      	add	r3, sp, #72	; 0x48
   25fbc:	aa07      	add	r2, sp, #28
   25fbe:	2149      	movs	r1, #73	; 0x49
   25fc0:	a81c      	add	r0, sp, #112	; 0x70
   25fc2:	f01c fd51 	bl	42a68 <settings_line_name_read>
		if (rc) {
   25fc6:	2800      	cmp	r0, #0
   25fc8:	d1da      	bne.n	25f80 <settings_fcb_save+0x98>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   25fca:	9b07      	ldr	r3, [sp, #28]
   25fcc:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   25fd0:	3301      	adds	r3, #1
   25fd2:	4293      	cmp	r3, r2
   25fd4:	d0d4      	beq.n	25f80 <settings_fcb_save+0x98>
		loc2 = loc1;
   25fd6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   25fda:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   25fde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   25fe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   25fe6:	f8de 3000 	ldr.w	r3, [lr]
   25fea:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   25fee:	a917      	add	r1, sp, #92	; 0x5c
   25ff0:	4628      	mov	r0, r5
   25ff2:	f01c fabc 	bl	4256e <fcb_getnext>
   25ff6:	b338      	cbz	r0, 26048 <settings_fcb_save+0x160>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   25ff8:	aa17      	add	r2, sp, #92	; 0x5c
   25ffa:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
   25ffe:	4628      	mov	r0, r5
   26000:	f7ff f934 	bl	2526c <fcb_append>
		if (rc) {
   26004:	4603      	mov	r3, r0
   26006:	2800      	cmp	r0, #0
   26008:	d1ba      	bne.n	25f80 <settings_fcb_save+0x98>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   2600a:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   2600e:	4601      	mov	r1, r0
   26010:	9200      	str	r2, [sp, #0]
   26012:	a817      	add	r0, sp, #92	; 0x5c
   26014:	aa12      	add	r2, sp, #72	; 0x48
   26016:	f7ff fe8f 	bl	25d38 <settings_line_entry_copy>
		if (rc) {
   2601a:	2800      	cmp	r0, #0
   2601c:	d1b0      	bne.n	25f80 <settings_fcb_save+0x98>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   2601e:	a917      	add	r1, sp, #92	; 0x5c
   26020:	4628      	mov	r0, r5
   26022:	f01c f862 	bl	420ea <fcb_append_finish>
		if (rc != 0) {
   26026:	4602      	mov	r2, r0
   26028:	2800      	cmp	r0, #0
   2602a:	d0a9      	beq.n	25f80 <settings_fcb_save+0x98>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2602c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26030:	f043 0301 	orr.w	r3, r3, #1
   26034:	f363 0a07 	bfi	sl, r3, #0, #8
   26038:	9b04      	ldr	r3, [sp, #16]
   2603a:	4649      	mov	r1, r9
   2603c:	f363 1a8f 	bfi	sl, r3, #6, #10
   26040:	4650      	mov	r0, sl
   26042:	f01b fffc 	bl	4203e <log_string_sync>
   26046:	e79b      	b.n	25f80 <settings_fcb_save+0x98>
			rc = settings_line_name_read(name2, sizeof(name2),
   26048:	ab17      	add	r3, sp, #92	; 0x5c
   2604a:	aa08      	add	r2, sp, #32
   2604c:	2149      	movs	r1, #73	; 0x49
   2604e:	a82f      	add	r0, sp, #188	; 0xbc
   26050:	f01c fd0a 	bl	42a68 <settings_line_name_read>
			if (rc) {
   26054:	2800      	cmp	r0, #0
   26056:	d1ca      	bne.n	25fee <settings_fcb_save+0x106>
			if ((val1_off == val2_off) &&
   26058:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   2605c:	429a      	cmp	r2, r3
   2605e:	d1c6      	bne.n	25fee <settings_fcb_save+0x106>
			    !memcmp(name1, name2, val1_off)) {
   26060:	a92f      	add	r1, sp, #188	; 0xbc
   26062:	a81c      	add	r0, sp, #112	; 0x70
   26064:	f01f f8d2 	bl	4520c <memcmp>
			if ((val1_off == val2_off) &&
   26068:	2800      	cmp	r0, #0
   2606a:	d1c0      	bne.n	25fee <settings_fcb_save+0x106>
   2606c:	e788      	b.n	25f80 <settings_fcb_save+0x98>
	if (rc) {
   2606e:	2800      	cmp	r0, #0
   26070:	f47f af54 	bne.w	25f1c <settings_fcb_save+0x34>
	loc.fap = cf->cf_fcb.fap;
   26074:	6c32      	ldr	r2, [r6, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   26076:	f8cd 9000 	str.w	r9, [sp]
	loc.fap = cf->cf_fcb.fap;
   2607a:	9211      	str	r2, [sp, #68]	; 0x44
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2607c:	9903      	ldr	r1, [sp, #12]
   2607e:	4642      	mov	r2, r8
   26080:	4638      	mov	r0, r7
   26082:	f7ff fdeb 	bl	25c5c <settings_line_write>
	if (rc != -EIO) {
   26086:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   26088:	4604      	mov	r4, r0
	if (rc != -EIO) {
   2608a:	d006      	beq.n	2609a <settings_fcb_save+0x1b2>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   2608c:	4649      	mov	r1, r9
   2608e:	4628      	mov	r0, r5
   26090:	f01c f82b 	bl	420ea <fcb_append_finish>
			rc = i;
   26094:	2c00      	cmp	r4, #0
   26096:	bf08      	it	eq
   26098:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   2609a:	4620      	mov	r0, r4
   2609c:	b043      	add	sp, #268	; 0x10c
   2609e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260a2:	bf00      	nop
   260a4:	00042a89 	.word	0x00042a89
   260a8:	00046990 	.word	0x00046990
   260ac:	00046878 	.word	0x00046878
   260b0:	000496e7 	.word	0x000496e7
   260b4:	000496c6 	.word	0x000496c6

000260b8 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   260b8:	2301      	movs	r3, #1
{
   260ba:	b570      	push	{r4, r5, r6, lr}
   260bc:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   260be:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   260c0:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   260c2:	f100 0608 	add.w	r6, r0, #8
   260c6:	4631      	mov	r1, r6
   260c8:	2008      	movs	r0, #8
   260ca:	f01c f8e6 	bl	4229a <fcb_init>
		if (rc) {
   260ce:	4605      	mov	r5, r0
   260d0:	b9b0      	cbnz	r0, 26100 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   260d2:	4630      	mov	r0, r6
   260d4:	f01c f874 	bl	421c0 <fcb_free_sector_cnt>
   260d8:	2800      	cmp	r0, #0
   260da:	dc0a      	bgt.n	260f2 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   260dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   260de:	6c20      	ldr	r0, [r4, #64]	; 0x40
   260e0:	e9d3 1200 	ldrd	r1, r2, [r3]
   260e4:	f01c fc52 	bl	4298c <flash_area_erase>
			if (rc) {
   260e8:	2800      	cmp	r0, #0
   260ea:	d0ec      	beq.n	260c6 <settings_fcb_src+0xe>
				return -EIO;
   260ec:	f06f 0504 	mvn.w	r5, #4
   260f0:	e004      	b.n	260fc <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   260f2:	4b05      	ldr	r3, [pc, #20]	; (26108 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   260f4:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   260f6:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   260f8:	f7ff fbbe 	bl	25878 <settings_src_register>
}
   260fc:	4628      	mov	r0, r5
   260fe:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   26100:	f06f 0515 	mvn.w	r5, #21
   26104:	e7fa      	b.n	260fc <settings_fcb_src+0x44>
   26106:	bf00      	nop
   26108:	00046d50 	.word	0x00046d50

0002610c <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   2610c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   26110:	4a02      	ldr	r2, [pc, #8]	; (2611c <settings_mount_fcb_backend+0x10>)
   26112:	4903      	ldr	r1, [pc, #12]	; (26120 <settings_mount_fcb_backend+0x14>)
   26114:	4803      	ldr	r0, [pc, #12]	; (26124 <settings_mount_fcb_backend+0x18>)
   26116:	f7ff be3f 	b.w	25d98 <settings_line_io_init>
   2611a:	bf00      	nop
   2611c:	00042b05 	.word	0x00042b05
   26120:	00042b09 	.word	0x00042b09
   26124:	00042b1d 	.word	0x00042b1d

00026128 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   26128:	2309      	movs	r3, #9
{
   2612a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   2612c:	4a22      	ldr	r2, [pc, #136]	; (261b8 <settings_backend_init+0x90>)
   2612e:	4669      	mov	r1, sp
   26130:	2008      	movs	r0, #8
	uint32_t cnt = sizeof(settings_fcb_area) /
   26132:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   26134:	f7ff fb54 	bl	257e0 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   26138:	f110 0f13 	cmn.w	r0, #19
   2613c:	d03a      	beq.n	261b4 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2613e:	b138      	cbz	r0, 26150 <settings_backend_init+0x28>
   26140:	300c      	adds	r0, #12
   26142:	d005      	beq.n	26150 <settings_backend_init+0x28>
		k_panic();
   26144:	4040      	eors	r0, r0
   26146:	f380 8811 	msr	BASEPRI, r0
   2614a:	f04f 0004 	mov.w	r0, #4
   2614e:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   26150:	4c1a      	ldr	r4, [pc, #104]	; (261bc <settings_backend_init+0x94>)
   26152:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   26154:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   26156:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   26158:	f7ff ffae 	bl	260b8 <settings_fcb_src>

	if (rc != 0) {
   2615c:	b308      	cbz	r0, 261a2 <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   2615e:	a901      	add	r1, sp, #4
   26160:	2008      	movs	r0, #8
   26162:	f7ff fb29 	bl	257b8 <flash_area_open>

		if (rc == 0) {
   26166:	4601      	mov	r1, r0
   26168:	b160      	cbz	r0, 26184 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   2616a:	4040      	eors	r0, r0
   2616c:	f380 8811 	msr	BASEPRI, r0
   26170:	f04f 0004 	mov.w	r0, #4
   26174:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   26176:	4040      	eors	r0, r0
   26178:	f380 8811 	msr	BASEPRI, r0
   2617c:	f04f 0004 	mov.w	r0, #4
   26180:	df02      	svc	2
   26182:	e00e      	b.n	261a2 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   26184:	9801      	ldr	r0, [sp, #4]
   26186:	6882      	ldr	r2, [r0, #8]
   26188:	f01c fc00 	bl	4298c <flash_area_erase>
   2618c:	4605      	mov	r5, r0
			flash_area_close(fap);
   2618e:	9801      	ldr	r0, [sp, #4]
   26190:	f01c fbb5 	bl	428fe <flash_area_close>
		if (rc != 0) {
   26194:	2d00      	cmp	r5, #0
   26196:	d1e8      	bne.n	2616a <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   26198:	4620      	mov	r0, r4
   2619a:	f7ff ff8d 	bl	260b8 <settings_fcb_src>
	if (rc != 0) {
   2619e:	2800      	cmp	r0, #0
   261a0:	d1e9      	bne.n	26176 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   261a2:	4b07      	ldr	r3, [pc, #28]	; (261c0 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   261a4:	4805      	ldr	r0, [pc, #20]	; (261bc <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   261a6:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   261a8:	f7ff fb74 	bl	25894 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   261ac:	4803      	ldr	r0, [pc, #12]	; (261bc <settings_backend_init+0x94>)
   261ae:	f7ff ffad 	bl	2610c <settings_mount_fcb_backend>

	return rc;
   261b2:	2000      	movs	r0, #0
}
   261b4:	b003      	add	sp, #12
   261b6:	bd30      	pop	{r4, r5, pc}
   261b8:	200246b0 	.word	0x200246b0
   261bc:	20020650 	.word	0x20020650
   261c0:	00046d50 	.word	0x00046d50

000261c4 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   261c4:	b508      	push	{r3, lr}
   261c6:	4604      	mov	r4, r0
	__asm__ volatile(
   261c8:	f04f 0220 	mov.w	r2, #32
   261cc:	f3ef 8311 	mrs	r3, BASEPRI
   261d0:	f382 8811 	msr	BASEPRI, r2
   261d4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   261d8:	f01c fd4a 	bl	42c70 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   261dc:	4620      	mov	r0, r4
   261de:	f001 f9b5 	bl	2754c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   261e2:	4803      	ldr	r0, [pc, #12]	; (261f0 <sys_reboot+0x2c>)
   261e4:	f01b fd00 	bl	41be8 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   261e8:	f000 fda2 	bl	26d30 <arch_cpu_idle>
   261ec:	e7fc      	b.n	261e8 <sys_reboot+0x24>
   261ee:	bf00      	nop
   261f0:	00049707 	.word	0x00049707

000261f4 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   261f4:	4b0a      	ldr	r3, [pc, #40]	; (26220 <console_out+0x2c>)
{
   261f6:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   261f8:	b2c6      	uxtb	r6, r0
{
   261fa:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   261fc:	681b      	ldr	r3, [r3, #0]
   261fe:	4630      	mov	r0, r6
   26200:	4798      	blx	r3

	if (handled_by_debug_server) {
   26202:	2801      	cmp	r0, #1
   26204:	d00a      	beq.n	2621c <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   26206:	2c0a      	cmp	r4, #10
   26208:	4d06      	ldr	r5, [pc, #24]	; (26224 <console_out+0x30>)
   2620a:	d103      	bne.n	26214 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   2620c:	210d      	movs	r1, #13
   2620e:	6828      	ldr	r0, [r5, #0]
   26210:	f01c fc9c 	bl	42b4c <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   26214:	4631      	mov	r1, r6
   26216:	6828      	ldr	r0, [r5, #0]
   26218:	f01c fc98 	bl	42b4c <uart_poll_out>

	return c;
}
   2621c:	4620      	mov	r0, r4
   2621e:	bd70      	pop	{r4, r5, r6, pc}
   26220:	20020694 	.word	0x20020694
   26224:	200246f8 	.word	0x200246f8

00026228 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   26228:	b510      	push	{r4, lr}
   2622a:	4807      	ldr	r0, [pc, #28]	; (26248 <uart_console_init+0x20>)
   2622c:	f015 ff8a 	bl	3c144 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   26230:	4c06      	ldr	r4, [pc, #24]	; (2624c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   26232:	4b07      	ldr	r3, [pc, #28]	; (26250 <uart_console_init+0x28>)
   26234:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   26236:	4620      	mov	r0, r4
   26238:	f001 fbf4 	bl	27a24 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2623c:	4620      	mov	r0, r4
   2623e:	f7fe f847 	bl	242d0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   26242:	2000      	movs	r0, #0
   26244:	bd10      	pop	{r4, pc}
   26246:	bf00      	nop
   26248:	00049342 	.word	0x00049342
   2624c:	000261f5 	.word	0x000261f5
   26250:	200246f8 	.word	0x200246f8

00026254 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   26254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   26258:	4c0e      	ldr	r4, [pc, #56]	; (26294 <onoff_start+0x40>)
{
   2625a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   2625c:	1b05      	subs	r5, r0, r4
   2625e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   26262:	250c      	movs	r5, #12
   26264:	435d      	muls	r5, r3
   26266:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   2626a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   2626c:	4420      	add	r0, r4
   2626e:	2140      	movs	r1, #64	; 0x40
   26270:	f01c fc71 	bl	42b56 <set_starting_state>
	if (err < 0) {
   26274:	1e01      	subs	r1, r0, #0
   26276:	db08      	blt.n	2628a <onoff_start+0x36>
	subdata->cb = data->cb;
   26278:	4b07      	ldr	r3, [pc, #28]	; (26298 <onoff_start+0x44>)
   2627a:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   2627c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   26280:	4b06      	ldr	r3, [pc, #24]	; (2629c <onoff_start+0x48>)
   26282:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   26284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   26288:	4718      	bx	r3
		notify(mgr, err);
   2628a:	4638      	mov	r0, r7
   2628c:	4633      	mov	r3, r6
}
   2628e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   26292:	4718      	bx	r3
   26294:	2002470c 	.word	0x2002470c
   26298:	00042bb9 	.word	0x00042bb9
   2629c:	00046d74 	.word	0x00046d74

000262a0 <get_status>:
{
   262a0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   262a2:	b2cc      	uxtb	r4, r1
   262a4:	2c01      	cmp	r4, #1
{
   262a6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   262a8:	d909      	bls.n	262be <get_status+0x1e>
   262aa:	4909      	ldr	r1, [pc, #36]	; (262d0 <get_status+0x30>)
   262ac:	4809      	ldr	r0, [pc, #36]	; (262d4 <get_status+0x34>)
   262ae:	237d      	movs	r3, #125	; 0x7d
   262b0:	4a09      	ldr	r2, [pc, #36]	; (262d8 <get_status+0x38>)
   262b2:	f01b fc99 	bl	41be8 <printk>
   262b6:	217d      	movs	r1, #125	; 0x7d
   262b8:	4807      	ldr	r0, [pc, #28]	; (262d8 <get_status+0x38>)
   262ba:	f01b feaf 	bl	4201c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   262be:	210c      	movs	r1, #12
   262c0:	68eb      	ldr	r3, [r5, #12]
   262c2:	fb04 3101 	mla	r1, r4, r1, r3
   262c6:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
   262c8:	f000 0007 	and.w	r0, r0, #7
   262cc:	bd38      	pop	{r3, r4, r5, pc}
   262ce:	bf00      	nop
   262d0:	0004976d 	.word	0x0004976d
   262d4:	0004825b 	.word	0x0004825b
   262d8:	00049730 	.word	0x00049730

000262dc <stop>:
{
   262dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262de:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   262e0:	2c01      	cmp	r4, #1
{
   262e2:	4605      	mov	r5, r0
   262e4:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   262e6:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   262e8:	d90b      	bls.n	26302 <stop+0x26>
   262ea:	4919      	ldr	r1, [pc, #100]	; (26350 <stop+0x74>)
   262ec:	4819      	ldr	r0, [pc, #100]	; (26354 <stop+0x78>)
   262ee:	f240 1345 	movw	r3, #325	; 0x145
   262f2:	4a19      	ldr	r2, [pc, #100]	; (26358 <stop+0x7c>)
   262f4:	f01b fc78 	bl	41be8 <printk>
   262f8:	f240 1145 	movw	r1, #325	; 0x145
   262fc:	4816      	ldr	r0, [pc, #88]	; (26358 <stop+0x7c>)
   262fe:	f01b fe8d 	bl	4201c <assert_post_action>
   26302:	f04f 0320 	mov.w	r3, #32
   26306:	f3ef 8111 	mrs	r1, BASEPRI
   2630a:	f383 8811 	msr	BASEPRI, r3
   2630e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26312:	230c      	movs	r3, #12
   26314:	fb03 6204 	mla	r2, r3, r4, r6
   26318:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2631a:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
   2631e:	d001      	beq.n	26324 <stop+0x48>
   26320:	4297      	cmp	r7, r2
   26322:	d111      	bne.n	26348 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26324:	2201      	movs	r2, #1
	int err = 0;
   26326:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   26328:	fb03 6304 	mla	r3, r3, r4, r6
   2632c:	649a      	str	r2, [r3, #72]	; 0x48
	__asm__ volatile(
   2632e:	f381 8811 	msr	BASEPRI, r1
   26332:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   26336:	b930      	cbnz	r0, 26346 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   26338:	220c      	movs	r2, #12
   2633a:	686b      	ldr	r3, [r5, #4]
   2633c:	fb02 3404 	mla	r4, r2, r4, r3
   26340:	6863      	ldr	r3, [r4, #4]
   26342:	4798      	blx	r3
	return 0;
   26344:	2000      	movs	r0, #0
}
   26346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   26348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2634c:	e7ef      	b.n	2632e <stop+0x52>
   2634e:	bf00      	nop
   26350:	0004976d 	.word	0x0004976d
   26354:	0004825b 	.word	0x0004825b
   26358:	00049730 	.word	0x00049730

0002635c <onoff_stop>:
{
   2635c:	b570      	push	{r4, r5, r6, lr}
   2635e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   26360:	4906      	ldr	r1, [pc, #24]	; (2637c <onoff_stop+0x20>)
{
   26362:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   26364:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   26366:	1149      	asrs	r1, r1, #5
   26368:	2240      	movs	r2, #64	; 0x40
   2636a:	4805      	ldr	r0, [pc, #20]	; (26380 <onoff_stop+0x24>)
   2636c:	f7ff ffb6 	bl	262dc <stop>
	notify(mgr, res);
   26370:	462b      	mov	r3, r5
   26372:	4601      	mov	r1, r0
   26374:	4620      	mov	r0, r4
}
   26376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2637a:	4718      	bx	r3
   2637c:	2002470c 	.word	0x2002470c
   26380:	20020998 	.word	0x20020998

00026384 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   26384:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   26386:	2200      	movs	r2, #0
   26388:	2101      	movs	r1, #1
{
   2638a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2638c:	2005      	movs	r0, #5
   2638e:	f000 fc45 	bl	26c1c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   26392:	2005      	movs	r0, #5
   26394:	f000 fc24 	bl	26be0 <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   26398:	480f      	ldr	r0, [pc, #60]	; (263d8 <clk_init+0x54>)
   2639a:	f015 fbdd 	bl	3bb58 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2639e:	4b0f      	ldr	r3, [pc, #60]	; (263dc <clk_init+0x58>)
   263a0:	4298      	cmp	r0, r3
   263a2:	d115      	bne.n	263d0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   263a4:	f015 fbfc 	bl	3bba0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   263a8:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   263aa:	490d      	ldr	r1, [pc, #52]	; (263e0 <clk_init+0x5c>)
   263ac:	4630      	mov	r0, r6
   263ae:	f01b fc76 	bl	41c9e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   263b2:	2800      	cmp	r0, #0
   263b4:	db0b      	blt.n	263ce <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   263b6:	2501      	movs	r5, #1
   263b8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   263ba:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   263bc:	4908      	ldr	r1, [pc, #32]	; (263e0 <clk_init+0x5c>)
   263be:	f104 0020 	add.w	r0, r4, #32
   263c2:	f01b fc6c 	bl	41c9e <onoff_manager_init>
		if (err < 0) {
   263c6:	2800      	cmp	r0, #0
   263c8:	db01      	blt.n	263ce <clk_init+0x4a>
	}

	return 0;
   263ca:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   263cc:	6565      	str	r5, [r4, #84]	; 0x54
}
   263ce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   263d0:	f06f 0004 	mvn.w	r0, #4
   263d4:	e7fb      	b.n	263ce <clk_init+0x4a>
   263d6:	bf00      	nop
   263d8:	0002647d 	.word	0x0002647d
   263dc:	0bad0000 	.word	0x0bad0000
   263e0:	00046d8c 	.word	0x00046d8c

000263e4 <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
   263e4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   263e6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   263e8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   263ea:	434b      	muls	r3, r1
   263ec:	4808      	ldr	r0, [pc, #32]	; (26410 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
   263ee:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   263f0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   263f2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   263f4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   263f8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   263fa:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   263fc:	f01c fbc9 	bl	42b92 <set_on_state>
	if (callback) {
   26400:	b12d      	cbz	r5, 2640e <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   26402:	4632      	mov	r2, r6
   26404:	462b      	mov	r3, r5
}
   26406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   2640a:	4802      	ldr	r0, [pc, #8]	; (26414 <clkstarted_handle.constprop.10+0x30>)
   2640c:	4718      	bx	r3
}
   2640e:	bd70      	pop	{r4, r5, r6, pc}
   26410:	2002470c 	.word	0x2002470c
   26414:	20020998 	.word	0x20020998

00026418 <generic_hfclk_start>:
{
   26418:	b508      	push	{r3, lr}
	__asm__ volatile(
   2641a:	f04f 0320 	mov.w	r3, #32
   2641e:	f3ef 8111 	mrs	r1, BASEPRI
   26422:	f383 8811 	msr	BASEPRI, r3
   26426:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   2642a:	4a11      	ldr	r2, [pc, #68]	; (26470 <generic_hfclk_start+0x58>)
   2642c:	6813      	ldr	r3, [r2, #0]
   2642e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   26432:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   26436:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   26438:	d00b      	beq.n	26452 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2643a:	4a0e      	ldr	r2, [pc, #56]	; (26474 <generic_hfclk_start+0x5c>)
   2643c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   26440:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   26444:	f013 0301 	ands.w	r3, r3, #1
   26448:	d003      	beq.n	26452 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2644a:	480b      	ldr	r0, [pc, #44]	; (26478 <generic_hfclk_start+0x60>)
   2644c:	f01c fba1 	bl	42b92 <set_on_state>
			already_started = true;
   26450:	2301      	movs	r3, #1
	__asm__ volatile(
   26452:	f381 8811 	msr	BASEPRI, r1
   26456:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2645a:	b123      	cbz	r3, 26466 <generic_hfclk_start+0x4e>
}
   2645c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   26460:	2000      	movs	r0, #0
   26462:	f7ff bfbf 	b.w	263e4 <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   26466:	2001      	movs	r0, #1
}
   26468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2646c:	f015 bbb8 	b.w	3bbe0 <nrfx_clock_start>
   26470:	20024764 	.word	0x20024764
   26474:	40005000 	.word	0x40005000
   26478:	20024754 	.word	0x20024754

0002647c <clock_event_handler>:
	switch (event) {
   2647c:	2801      	cmp	r0, #1
{
   2647e:	b508      	push	{r3, lr}
	switch (event) {
   26480:	d011      	beq.n	264a6 <clock_event_handler+0x2a>
   26482:	b158      	cbz	r0, 2649c <clock_event_handler+0x20>
   26484:	2803      	cmp	r0, #3
   26486:	d012      	beq.n	264ae <clock_event_handler+0x32>
		__ASSERT_NO_MSG(0);
   26488:	4910      	ldr	r1, [pc, #64]	; (264cc <clock_event_handler+0x50>)
   2648a:	f240 235a 	movw	r3, #602	; 0x25a
   2648e:	4a10      	ldr	r2, [pc, #64]	; (264d0 <clock_event_handler+0x54>)
   26490:	4810      	ldr	r0, [pc, #64]	; (264d4 <clock_event_handler+0x58>)
   26492:	f01b fba9 	bl	41be8 <printk>
   26496:	f240 215a 	movw	r1, #602	; 0x25a
   2649a:	e011      	b.n	264c0 <clock_event_handler+0x44>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2649c:	4b0e      	ldr	r3, [pc, #56]	; (264d8 <clock_event_handler+0x5c>)
   2649e:	6c98      	ldr	r0, [r3, #72]	; 0x48
   264a0:	f010 0007 	ands.w	r0, r0, #7
   264a4:	d111      	bne.n	264ca <clock_event_handler+0x4e>
}
   264a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   264aa:	f7ff bf9b 	b.w	263e4 <clkstarted_handle.constprop.10>
			__ASSERT_NO_MSG(false);
   264ae:	4907      	ldr	r1, [pc, #28]	; (264cc <clock_event_handler+0x50>)
   264b0:	f240 2356 	movw	r3, #598	; 0x256
   264b4:	4a06      	ldr	r2, [pc, #24]	; (264d0 <clock_event_handler+0x54>)
   264b6:	4807      	ldr	r0, [pc, #28]	; (264d4 <clock_event_handler+0x58>)
   264b8:	f01b fb96 	bl	41be8 <printk>
   264bc:	f240 2156 	movw	r1, #598	; 0x256
}
   264c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   264c4:	4802      	ldr	r0, [pc, #8]	; (264d0 <clock_event_handler+0x54>)
   264c6:	f01b bda9 	b.w	4201c <assert_post_action>
}
   264ca:	bd08      	pop	{r3, pc}
   264cc:	0004edb2 	.word	0x0004edb2
   264d0:	00049730 	.word	0x00049730
   264d4:	0004825b 	.word	0x0004825b
   264d8:	2002470c 	.word	0x2002470c

000264dc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   264dc:	4b07      	ldr	r3, [pc, #28]	; (264fc <generic_hfclk_stop+0x20>)
   264de:	e8d3 2fef 	ldaex	r2, [r3]
   264e2:	f022 0102 	bic.w	r1, r2, #2
   264e6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   264ea:	2800      	cmp	r0, #0
   264ec:	d1f7      	bne.n	264de <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   264ee:	07d3      	lsls	r3, r2, #31
   264f0:	d402      	bmi.n	264f8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   264f2:	2001      	movs	r0, #1
   264f4:	f015 bbca 	b.w	3bc8c <nrfx_clock_stop>
}
   264f8:	4770      	bx	lr
   264fa:	bf00      	nop
   264fc:	20024764 	.word	0x20024764

00026500 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26500:	2300      	movs	r3, #0
   26502:	2201      	movs	r2, #1
{
   26504:	b510      	push	{r4, lr}
   26506:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26508:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   2650c:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2650e:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   26510:	4b0a      	ldr	r3, [pc, #40]	; (2653c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   26512:	ac04      	add	r4, sp, #16
   26514:	e9cd 2208 	strd	r2, r2, [sp, #32]
	err = api_start(dev, subsys, &data);
   26518:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2651a:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   2651e:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   26522:	f01c fb5b 	bl	42bdc <api_start>
	if (err < 0) {
   26526:	2800      	cmp	r0, #0
   26528:	db05      	blt.n	26536 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   2652a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2652e:	2300      	movs	r3, #0
   26530:	4620      	mov	r0, r4
   26532:	f017 feab 	bl	3e28c <z_impl_k_sem_take>
}
   26536:	b00a      	add	sp, #40	; 0x28
   26538:	bd10      	pop	{r4, pc}
   2653a:	bf00      	nop
   2653c:	00042bcb 	.word	0x00042bcb

00026540 <z_nrf_clock_control_lf_on>:
{
   26540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26544:	2201      	movs	r2, #1
   26546:	4606      	mov	r6, r0
   26548:	4942      	ldr	r1, [pc, #264]	; (26654 <z_nrf_clock_control_lf_on+0x114>)
   2654a:	e8d1 3fef 	ldaex	r3, [r1]
   2654e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   26552:	2800      	cmp	r0, #0
   26554:	d1f9      	bne.n	2654a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   26556:	b9a3      	cbnz	r3, 26582 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   26558:	493f      	ldr	r1, [pc, #252]	; (26658 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   2655a:	4840      	ldr	r0, [pc, #256]	; (2665c <z_nrf_clock_control_lf_on+0x11c>)
   2655c:	604b      	str	r3, [r1, #4]
   2655e:	60cb      	str	r3, [r1, #12]
   26560:	608a      	str	r2, [r1, #8]
   26562:	f7fe f90d 	bl	24780 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   26566:	2800      	cmp	r0, #0
   26568:	da0b      	bge.n	26582 <z_nrf_clock_control_lf_on+0x42>
   2656a:	493d      	ldr	r1, [pc, #244]	; (26660 <z_nrf_clock_control_lf_on+0x120>)
   2656c:	483d      	ldr	r0, [pc, #244]	; (26664 <z_nrf_clock_control_lf_on+0x124>)
   2656e:	f240 2321 	movw	r3, #545	; 0x221
   26572:	4a3d      	ldr	r2, [pc, #244]	; (26668 <z_nrf_clock_control_lf_on+0x128>)
   26574:	f01b fb38 	bl	41be8 <printk>
   26578:	f240 2121 	movw	r1, #545	; 0x221
   2657c:	483a      	ldr	r0, [pc, #232]	; (26668 <z_nrf_clock_control_lf_on+0x128>)
   2657e:	f01b fd4d 	bl	4201c <assert_post_action>
	switch (start_mode) {
   26582:	b376      	cbz	r6, 265e2 <z_nrf_clock_control_lf_on+0xa2>
   26584:	2e02      	cmp	r6, #2
   26586:	d850      	bhi.n	2662a <z_nrf_clock_control_lf_on+0xea>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   26588:	2e01      	cmp	r6, #1
   2658a:	d106      	bne.n	2659a <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2658c:	4b37      	ldr	r3, [pc, #220]	; (2666c <z_nrf_clock_control_lf_on+0x12c>)
   2658e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   26592:	f003 0303 	and.w	r3, r3, #3
   26596:	2b02      	cmp	r3, #2
   26598:	d023      	beq.n	265e2 <z_nrf_clock_control_lf_on+0xa2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2659a:	f01e fcfb 	bl	44f94 <k_is_in_isr>
   2659e:	b918      	cbnz	r0, 265a8 <z_nrf_clock_control_lf_on+0x68>
	return !z_sys_post_kernel;
   265a0:	4b33      	ldr	r3, [pc, #204]	; (26670 <z_nrf_clock_control_lf_on+0x130>)
	int key = isr_mode ? irq_lock() : 0;
   265a2:	781b      	ldrb	r3, [r3, #0]
   265a4:	2b00      	cmp	r3, #0
   265a6:	d14e      	bne.n	26646 <z_nrf_clock_control_lf_on+0x106>
	__asm__ volatile(
   265a8:	f04f 0320 	mov.w	r3, #32
   265ac:	f3ef 8911 	mrs	r9, BASEPRI
   265b0:	f383 8811 	msr	BASEPRI, r3
   265b4:	f3bf 8f6f 	isb	sy
   265b8:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   265ba:	4d2c      	ldr	r5, [pc, #176]	; (2666c <z_nrf_clock_control_lf_on+0x12c>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   265bc:	4f2d      	ldr	r7, [pc, #180]	; (26674 <z_nrf_clock_control_lf_on+0x134>)
   265be:	46a8      	mov	r8, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   265c0:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   265c4:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   265c8:	03d2      	lsls	r2, r2, #15
   265ca:	d50c      	bpl.n	265e6 <z_nrf_clock_control_lf_on+0xa6>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   265cc:	f003 0303 	and.w	r3, r3, #3
   265d0:	2b02      	cmp	r3, #2
   265d2:	d001      	beq.n	265d8 <z_nrf_clock_control_lf_on+0x98>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   265d4:	2e01      	cmp	r6, #1
   265d6:	d106      	bne.n	265e6 <z_nrf_clock_control_lf_on+0xa6>
	if (isr_mode) {
   265d8:	b31c      	cbz	r4, 26622 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   265da:	f389 8811 	msr	BASEPRI, r9
   265de:	f3bf 8f6f 	isb	sy
}
   265e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   265e6:	b1bc      	cbz	r4, 26618 <z_nrf_clock_control_lf_on+0xd8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   265e8:	4648      	mov	r0, r9
   265ea:	f000 fbaf 	bl	26d4c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   265ee:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   265f2:	b2db      	uxtb	r3, r3
   265f4:	2b01      	cmp	r3, #1
   265f6:	d1e3      	bne.n	265c0 <z_nrf_clock_control_lf_on+0x80>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   265f8:	683a      	ldr	r2, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   265fa:	2a00      	cmp	r2, #0
   265fc:	d0e0      	beq.n	265c0 <z_nrf_clock_control_lf_on+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   265fe:	2200      	movs	r2, #0
   26600:	603a      	str	r2, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   26602:	683a      	ldr	r2, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   26604:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26606:	2120      	movs	r1, #32
   26608:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   2660c:	4a1a      	ldr	r2, [pc, #104]	; (26678 <z_nrf_clock_control_lf_on+0x138>)
   2660e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26612:	4a1a      	ldr	r2, [pc, #104]	; (2667c <z_nrf_clock_control_lf_on+0x13c>)
   26614:	6013      	str	r3, [r2, #0]
   26616:	e7d3      	b.n	265c0 <z_nrf_clock_control_lf_on+0x80>
	return z_impl_k_sleep(timeout);
   26618:	2100      	movs	r1, #0
   2661a:	2021      	movs	r0, #33	; 0x21
   2661c:	f017 fdb6 	bl	3e18c <z_impl_k_sleep>
   26620:	e7e5      	b.n	265ee <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENSET = mask;
   26622:	2302      	movs	r3, #2
   26624:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
   26628:	e7db      	b.n	265e2 <z_nrf_clock_control_lf_on+0xa2>
		__ASSERT_NO_MSG(false);
   2662a:	f240 2333 	movw	r3, #563	; 0x233
   2662e:	4914      	ldr	r1, [pc, #80]	; (26680 <z_nrf_clock_control_lf_on+0x140>)
   26630:	480c      	ldr	r0, [pc, #48]	; (26664 <z_nrf_clock_control_lf_on+0x124>)
   26632:	4a0d      	ldr	r2, [pc, #52]	; (26668 <z_nrf_clock_control_lf_on+0x128>)
   26634:	f01b fad8 	bl	41be8 <printk>
}
   26638:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   2663c:	f240 2133 	movw	r1, #563	; 0x233
   26640:	4809      	ldr	r0, [pc, #36]	; (26668 <z_nrf_clock_control_lf_on+0x128>)
   26642:	f01b bceb 	b.w	4201c <assert_post_action>
    p_reg->INTENCLR = mask;
   26646:	2202      	movs	r2, #2
   26648:	4b08      	ldr	r3, [pc, #32]	; (2666c <z_nrf_clock_control_lf_on+0x12c>)
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2664a:	4604      	mov	r4, r0
   2664c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   26650:	4681      	mov	r9, r0
   26652:	e7b2      	b.n	265ba <z_nrf_clock_control_lf_on+0x7a>
   26654:	20024768 	.word	0x20024768
   26658:	200246fc 	.word	0x200246fc
   2665c:	2002472c 	.word	0x2002472c
   26660:	000497b1 	.word	0x000497b1
   26664:	0004825b 	.word	0x0004825b
   26668:	00049730 	.word	0x00049730
   2666c:	40005000 	.word	0x40005000
   26670:	2002cb17 	.word	0x2002cb17
   26674:	40005104 	.word	0x40005104
   26678:	e000e100 	.word	0xe000e100
   2667c:	40005008 	.word	0x40005008
   26680:	0004edb2 	.word	0x0004edb2

00026684 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   26684:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   26686:	7b0b      	ldrb	r3, [r1, #12]
{
   26688:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2668a:	2b02      	cmp	r3, #2
{
   2668c:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2668e:	d128      	bne.n	266e2 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   26690:	680b      	ldr	r3, [r1, #0]
   26692:	bb1b      	cbnz	r3, 266dc <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26694:	68c2      	ldr	r2, [r0, #12]
	return dev->data;
   26696:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26698:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   2669c:	b9d9      	cbnz	r1, 266d6 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   2669e:	4914      	ldr	r1, [pc, #80]	; (266f0 <wdt_nrf_install_timeout+0x6c>)
   266a0:	1e58      	subs	r0, r3, #1
   266a2:	4288      	cmp	r0, r1
   266a4:	d81a      	bhi.n	266dc <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   266a6:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   266a8:	f10d 0107 	add.w	r1, sp, #7
   266ac:	6860      	ldr	r0, [r4, #4]
   266ae:	f015 fc8b 	bl	3bfc8 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   266b2:	4b10      	ldr	r3, [pc, #64]	; (266f4 <wdt_nrf_install_timeout+0x70>)
   266b4:	4298      	cmp	r0, r3
   266b6:	d017      	beq.n	266e8 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   266b8:	68ab      	ldr	r3, [r5, #8]
   266ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
   266be:	b113      	cbz	r3, 266c6 <wdt_nrf_install_timeout+0x42>
   266c0:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   266c2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   266c6:	68e2      	ldr	r2, [r4, #12]
   266c8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   266cc:	3301      	adds	r3, #1
   266ce:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   266d2:	b003      	add	sp, #12
   266d4:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   266d6:	6a12      	ldr	r2, [r2, #32]
   266d8:	429a      	cmp	r2, r3
   266da:	d0e5      	beq.n	266a8 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   266dc:	f06f 0015 	mvn.w	r0, #21
   266e0:	e7f7      	b.n	266d2 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   266e2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   266e6:	e7f4      	b.n	266d2 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   266e8:	f06f 000b 	mvn.w	r0, #11
   266ec:	e7f1      	b.n	266d2 <wdt_nrf_install_timeout+0x4e>
   266ee:	bf00      	nop
   266f0:	07cffffe 	.word	0x07cffffe
   266f4:	0bad0002 	.word	0x0bad0002

000266f8 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   266f8:	b510      	push	{r4, lr}
   266fa:	4604      	mov	r4, r0
   266fc:	2200      	movs	r2, #0
   266fe:	2101      	movs	r1, #1
   26700:	2018      	movs	r0, #24
   26702:	f000 fa8b 	bl	26c1c <z_arm_irq_priority_set>
   26706:	6860      	ldr	r0, [r4, #4]
   26708:	4a05      	ldr	r2, [pc, #20]	; (26720 <wdt_0_init+0x28>)
   2670a:	f100 0108 	add.w	r1, r0, #8
   2670e:	f015 fbd1 	bl	3beb4 <nrfx_wdt_init>
   26712:	4b04      	ldr	r3, [pc, #16]	; (26724 <wdt_0_init+0x2c>)
   26714:	4298      	cmp	r0, r3
   26716:	bf14      	ite	ne
   26718:	f06f 000f 	mvnne.w	r0, #15
   2671c:	2000      	moveq	r0, #0
   2671e:	bd10      	pop	{r4, pc}
   26720:	00026729 	.word	0x00026729
   26724:	0bad0000 	.word	0x0bad0000

00026728 <wdt_0_event_handler>:
   26728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   2672a:	2400      	movs	r4, #0
   2672c:	4d0a      	ldr	r5, [pc, #40]	; (26758 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   2672e:	4e0b      	ldr	r6, [pc, #44]	; (2675c <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   26730:	4f0b      	ldr	r7, [pc, #44]	; (26760 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26732:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   26736:	429c      	cmp	r4, r3
   26738:	db00      	blt.n	2673c <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   2673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2673c:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   26740:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   26742:	07db      	lsls	r3, r3, #31
   26744:	d505      	bpl.n	26752 <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   26746:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2674a:	b113      	cbz	r3, 26752 <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   2674c:	4621      	mov	r1, r4
   2674e:	4638      	mov	r0, r7
   26750:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26752:	3401      	adds	r4, #1
   26754:	e7ed      	b.n	26732 <wdt_0_event_handler+0xa>
   26756:	bf00      	nop
   26758:	2002476c 	.word	0x2002476c
   2675c:	40018000 	.word	0x40018000
   26760:	200209a8 	.word	0x200209a8

00026764 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   26764:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   26766:	4c06      	ldr	r4, [pc, #24]	; (26780 <z_clock_isr+0x1c>)
   26768:	4906      	ldr	r1, [pc, #24]	; (26784 <z_clock_isr+0x20>)
   2676a:	4622      	mov	r2, r4
   2676c:	4806      	ldr	r0, [pc, #24]	; (26788 <z_clock_isr+0x24>)
   2676e:	2317      	movs	r3, #23
   26770:	f01b fa3a 	bl	41be8 <printk>
   26774:	4620      	mov	r0, r4
}
   26776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   2677a:	2117      	movs	r1, #23
   2677c:	f01b bc4e 	b.w	4201c <assert_post_action>
   26780:	000497cd 	.word	0x000497cd
   26784:	0004edb2 	.word	0x0004edb2
   26788:	0004825b 	.word	0x0004825b

0002678c <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   2678c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   2678e:	4b08      	ldr	r3, [pc, #32]	; (267b0 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   26790:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   26794:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   26798:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   2679c:	4290      	cmp	r0, r2
   2679e:	d100      	bne.n	267a2 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   267a0:	4770      	bx	lr
   267a2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   267a6:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   267a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   267ac:	e7f2      	b.n	26794 <handle_next_cycle_case+0x8>
   267ae:	bf00      	nop
   267b0:	40015000 	.word	0x40015000

000267b4 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   267b4:	2200      	movs	r2, #0
   267b6:	4b07      	ldr	r3, [pc, #28]	; (267d4 <rtc_nrf_isr+0x20>)
   267b8:	601a      	str	r2, [r3, #0]
   267ba:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   267bc:	4a06      	ldr	r2, [pc, #24]	; (267d8 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   267be:	4b07      	ldr	r3, [pc, #28]	; (267dc <rtc_nrf_isr+0x28>)
   267c0:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   267c4:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   267c6:	1ac0      	subs	r0, r0, r3
   267c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   267cc:	4403      	add	r3, r0
   267ce:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   267d0:	f018 bad8 	b.w	3ed84 <z_clock_announce>
   267d4:	40015140 	.word	0x40015140
   267d8:	20024794 	.word	0x20024794
   267dc:	40015000 	.word	0x40015000

000267e0 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   267e0:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   267e2:	2400      	movs	r4, #0
   267e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   267e8:	4d0e      	ldr	r5, [pc, #56]	; (26824 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   267ea:	4b0f      	ldr	r3, [pc, #60]	; (26828 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   267ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   267f0:	601c      	str	r4, [r3, #0]
   267f2:	681b      	ldr	r3, [r3, #0]
   267f4:	4b0d      	ldr	r3, [pc, #52]	; (2682c <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   267f6:	2101      	movs	r1, #1
   267f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   267fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26800:	4622      	mov	r2, r4
   26802:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   26806:	2015      	movs	r0, #21
   26808:	f000 fa08 	bl	26c1c <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   2680c:	2015      	movs	r0, #21
   2680e:	f000 f9e7 	bl	26be0 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   26812:	2301      	movs	r3, #1
   26814:	4a06      	ldr	r2, [pc, #24]	; (26830 <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   26816:	2002      	movs	r0, #2
   26818:	6013      	str	r3, [r2, #0]
   2681a:	602b      	str	r3, [r5, #0]
   2681c:	f7ff fe90 	bl	26540 <z_nrf_clock_control_lf_on>

	return 0;
}
   26820:	4620      	mov	r0, r4
   26822:	bd38      	pop	{r3, r4, r5, pc}
   26824:	40015000 	.word	0x40015000
   26828:	40015140 	.word	0x40015140
   2682c:	e000e100 	.word	0xe000e100
   26830:	40015008 	.word	0x40015008

00026834 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   26834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   26836:	4b2d      	ldr	r3, [pc, #180]	; (268ec <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   26838:	4c2d      	ldr	r4, [pc, #180]	; (268f0 <z_clock_set_timeout+0xbc>)
   2683a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   2683e:	4b2d      	ldr	r3, [pc, #180]	; (268f4 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   26840:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26844:	bf08      	it	eq
   26846:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   26848:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   2684a:	1a52      	subs	r2, r2, r1
   2684c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   26850:	0212      	lsls	r2, r2, #8
   26852:	d438      	bmi.n	268c6 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   26854:	3801      	subs	r0, #1
   26856:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2685a:	42a0      	cmp	r0, r4
   2685c:	bfa8      	it	ge
   2685e:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   26860:	3301      	adds	r3, #1
   26862:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   26864:	42a0      	cmp	r0, r4
   26866:	bf94      	ite	ls
   26868:	180c      	addls	r4, r1, r0
   2686a:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   2686c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26870:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   26872:	4a1e      	ldr	r2, [pc, #120]	; (268ec <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26874:	4d20      	ldr	r5, [pc, #128]	; (268f8 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   26876:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   2687a:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   2687e:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26882:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   26884:	1a5b      	subs	r3, r3, r1
   26886:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2688a:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   2688c:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2688e:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   26892:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   26896:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   2689a:	d104      	bne.n	268a6 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   2689c:	200f      	movs	r0, #15
   2689e:	f01e fb7f 	bl	44fa0 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   268a2:	602e      	str	r6, [r5, #0]
   268a4:	682b      	ldr	r3, [r5, #0]
   268a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   268aa:	4b14      	ldr	r3, [pc, #80]	; (268fc <z_clock_set_timeout+0xc8>)
   268ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   268b0:	4b0e      	ldr	r3, [pc, #56]	; (268ec <z_clock_set_timeout+0xb8>)
   268b2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   268b6:	1a22      	subs	r2, r4, r0
   268b8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   268bc:	2a01      	cmp	r2, #1
   268be:	d104      	bne.n	268ca <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   268c0:	f7ff ff64 	bl	2678c <handle_next_cycle_case>
   268c4:	e00b      	b.n	268de <z_clock_set_timeout+0xaa>
		ticks = 0;
   268c6:	2000      	movs	r0, #0
   268c8:	e7ca      	b.n	26860 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   268ca:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   268ce:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   268d2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   268d6:	1a24      	subs	r4, r4, r0
   268d8:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   268da:	0223      	lsls	r3, r4, #8
   268dc:	d4f0      	bmi.n	268c0 <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   268de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   268e2:	4b02      	ldr	r3, [pc, #8]	; (268ec <z_clock_set_timeout+0xb8>)
   268e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   268e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   268ea:	bf00      	nop
   268ec:	40015000 	.word	0x40015000
   268f0:	007fffff 	.word	0x007fffff
   268f4:	20024794 	.word	0x20024794
   268f8:	40015140 	.word	0x40015140
   268fc:	e000e100 	.word	0xe000e100

00026900 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   26900:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26902:	f04f 0320 	mov.w	r3, #32
   26906:	f3ef 8511 	mrs	r5, BASEPRI
   2690a:	f383 8811 	msr	BASEPRI, r3
   2690e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26912:	481a      	ldr	r0, [pc, #104]	; (2697c <z_clock_elapsed+0x7c>)
   26914:	f017 fe96 	bl	3e644 <z_spin_lock_valid>
   26918:	b968      	cbnz	r0, 26936 <z_clock_elapsed+0x36>
   2691a:	235c      	movs	r3, #92	; 0x5c
   2691c:	4a18      	ldr	r2, [pc, #96]	; (26980 <z_clock_elapsed+0x80>)
   2691e:	4919      	ldr	r1, [pc, #100]	; (26984 <z_clock_elapsed+0x84>)
   26920:	4819      	ldr	r0, [pc, #100]	; (26988 <z_clock_elapsed+0x88>)
   26922:	f01b f961 	bl	41be8 <printk>
   26926:	4915      	ldr	r1, [pc, #84]	; (2697c <z_clock_elapsed+0x7c>)
   26928:	4818      	ldr	r0, [pc, #96]	; (2698c <z_clock_elapsed+0x8c>)
   2692a:	f01b f95d 	bl	41be8 <printk>
   2692e:	215c      	movs	r1, #92	; 0x5c
   26930:	4813      	ldr	r0, [pc, #76]	; (26980 <z_clock_elapsed+0x80>)
   26932:	f01b fb73 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   26936:	4811      	ldr	r0, [pc, #68]	; (2697c <z_clock_elapsed+0x7c>)
   26938:	f017 fea2 	bl	3e680 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   2693c:	4b14      	ldr	r3, [pc, #80]	; (26990 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2693e:	480f      	ldr	r0, [pc, #60]	; (2697c <z_clock_elapsed+0x7c>)
   26940:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   26944:	4b13      	ldr	r3, [pc, #76]	; (26994 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   26946:	681b      	ldr	r3, [r3, #0]
   26948:	1ae4      	subs	r4, r4, r3
   2694a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   2694e:	f017 fe87 	bl	3e660 <z_spin_unlock_valid>
   26952:	b968      	cbnz	r0, 26970 <z_clock_elapsed+0x70>
   26954:	2384      	movs	r3, #132	; 0x84
   26956:	4a0a      	ldr	r2, [pc, #40]	; (26980 <z_clock_elapsed+0x80>)
   26958:	490f      	ldr	r1, [pc, #60]	; (26998 <z_clock_elapsed+0x98>)
   2695a:	480b      	ldr	r0, [pc, #44]	; (26988 <z_clock_elapsed+0x88>)
   2695c:	f01b f944 	bl	41be8 <printk>
   26960:	4906      	ldr	r1, [pc, #24]	; (2697c <z_clock_elapsed+0x7c>)
   26962:	480e      	ldr	r0, [pc, #56]	; (2699c <z_clock_elapsed+0x9c>)
   26964:	f01b f940 	bl	41be8 <printk>
   26968:	2184      	movs	r1, #132	; 0x84
   2696a:	4805      	ldr	r0, [pc, #20]	; (26980 <z_clock_elapsed+0x80>)
   2696c:	f01b fb56 	bl	4201c <assert_post_action>
	__asm__ volatile(
   26970:	f385 8811 	msr	BASEPRI, r5
   26974:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   26978:	4620      	mov	r0, r4
   2697a:	bd38      	pop	{r3, r4, r5, pc}
   2697c:	20024798 	.word	0x20024798
   26980:	00048d7b 	.word	0x00048d7b
   26984:	00048da1 	.word	0x00048da1
   26988:	0004825b 	.word	0x0004825b
   2698c:	00048db6 	.word	0x00048db6
   26990:	40015000 	.word	0x40015000
   26994:	20024794 	.word	0x20024794
   26998:	00048dce 	.word	0x00048dce
   2699c:	00048de5 	.word	0x00048de5

000269a0 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   269a0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   269a2:	f04f 0320 	mov.w	r3, #32
   269a6:	f3ef 8511 	mrs	r5, BASEPRI
   269aa:	f383 8811 	msr	BASEPRI, r3
   269ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   269b2:	481b      	ldr	r0, [pc, #108]	; (26a20 <z_timer_cycle_get_32+0x80>)
   269b4:	f017 fe46 	bl	3e644 <z_spin_lock_valid>
   269b8:	b968      	cbnz	r0, 269d6 <z_timer_cycle_get_32+0x36>
   269ba:	235c      	movs	r3, #92	; 0x5c
   269bc:	4a19      	ldr	r2, [pc, #100]	; (26a24 <z_timer_cycle_get_32+0x84>)
   269be:	491a      	ldr	r1, [pc, #104]	; (26a28 <z_timer_cycle_get_32+0x88>)
   269c0:	481a      	ldr	r0, [pc, #104]	; (26a2c <z_timer_cycle_get_32+0x8c>)
   269c2:	f01b f911 	bl	41be8 <printk>
   269c6:	4916      	ldr	r1, [pc, #88]	; (26a20 <z_timer_cycle_get_32+0x80>)
   269c8:	4819      	ldr	r0, [pc, #100]	; (26a30 <z_timer_cycle_get_32+0x90>)
   269ca:	f01b f90d 	bl	41be8 <printk>
   269ce:	215c      	movs	r1, #92	; 0x5c
   269d0:	4814      	ldr	r0, [pc, #80]	; (26a24 <z_timer_cycle_get_32+0x84>)
   269d2:	f01b fb23 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   269d6:	4812      	ldr	r0, [pc, #72]	; (26a20 <z_timer_cycle_get_32+0x80>)
   269d8:	f017 fe52 	bl	3e680 <z_spin_lock_set_owner>
   269dc:	4b15      	ldr	r3, [pc, #84]	; (26a34 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269de:	4810      	ldr	r0, [pc, #64]	; (26a20 <z_timer_cycle_get_32+0x80>)
   269e0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   269e4:	4b14      	ldr	r3, [pc, #80]	; (26a38 <z_timer_cycle_get_32+0x98>)
   269e6:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   269e8:	1ae4      	subs	r4, r4, r3
   269ea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   269ee:	441c      	add	r4, r3
   269f0:	f017 fe36 	bl	3e660 <z_spin_unlock_valid>
   269f4:	b968      	cbnz	r0, 26a12 <z_timer_cycle_get_32+0x72>
   269f6:	2384      	movs	r3, #132	; 0x84
   269f8:	4a0a      	ldr	r2, [pc, #40]	; (26a24 <z_timer_cycle_get_32+0x84>)
   269fa:	4910      	ldr	r1, [pc, #64]	; (26a3c <z_timer_cycle_get_32+0x9c>)
   269fc:	480b      	ldr	r0, [pc, #44]	; (26a2c <z_timer_cycle_get_32+0x8c>)
   269fe:	f01b f8f3 	bl	41be8 <printk>
   26a02:	4907      	ldr	r1, [pc, #28]	; (26a20 <z_timer_cycle_get_32+0x80>)
   26a04:	480e      	ldr	r0, [pc, #56]	; (26a40 <z_timer_cycle_get_32+0xa0>)
   26a06:	f01b f8ef 	bl	41be8 <printk>
   26a0a:	2184      	movs	r1, #132	; 0x84
   26a0c:	4805      	ldr	r0, [pc, #20]	; (26a24 <z_timer_cycle_get_32+0x84>)
   26a0e:	f01b fb05 	bl	4201c <assert_post_action>
	__asm__ volatile(
   26a12:	f385 8811 	msr	BASEPRI, r5
   26a16:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   26a1a:	4620      	mov	r0, r4
   26a1c:	bd38      	pop	{r3, r4, r5, pc}
   26a1e:	bf00      	nop
   26a20:	20024798 	.word	0x20024798
   26a24:	00048d7b 	.word	0x00048d7b
   26a28:	00048da1 	.word	0x00048da1
   26a2c:	0004825b 	.word	0x0004825b
   26a30:	00048db6 	.word	0x00048db6
   26a34:	40015000 	.word	0x40015000
   26a38:	20024794 	.word	0x20024794
   26a3c:	00048dce 	.word	0x00048dce
   26a40:	00048de5 	.word	0x00048de5

00026a44 <gps_agps_request>:
}

#endif /* CONFIG_AGPS_SRC_SUPL */

int gps_agps_request(struct gps_agps_request request, int socket)
{
   26a44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   26a46:	ab01      	add	r3, sp, #4
   26a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LOG_ERR("SUPL request failed, error: %d", err);
		return err;
	}

#elif defined(CONFIG_AGPS_SRC_NRF_CLOUD)
	err = nrf_cloud_agps_request(request);
   26a4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26a50:	f008 fc0c 	bl	2f26c <nrf_cloud_agps_request>
	if (err) {
   26a54:	4604      	mov	r4, r0
   26a56:	b170      	cbz	r0, 26a76 <gps_agps_request+0x32>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   26a58:	2301      	movs	r3, #1
   26a5a:	f04f 0000 	mov.w	r0, #0
   26a5e:	4a07      	ldr	r2, [pc, #28]	; (26a7c <gps_agps_request+0x38>)
   26a60:	f363 0007 	bfi	r0, r3, #0, #8
   26a64:	4b06      	ldr	r3, [pc, #24]	; (26a80 <gps_agps_request+0x3c>)
   26a66:	4907      	ldr	r1, [pc, #28]	; (26a84 <gps_agps_request+0x40>)
   26a68:	1a9b      	subs	r3, r3, r2
   26a6a:	08db      	lsrs	r3, r3, #3
   26a6c:	f363 108f 	bfi	r0, r3, #6, #10
   26a70:	4622      	mov	r2, r4
   26a72:	f01b fae4 	bl	4203e <log_string_sync>
		return err;
	}
#endif /* CONFIG_AGPS_SRC_SUPL */

	return 0;
}
   26a76:	4620      	mov	r0, r4
   26a78:	b004      	add	sp, #16
   26a7a:	bd10      	pop	{r4, pc}
   26a7c:	00046878 	.word	0x00046878
   26a80:	00046880 	.word	0x00046880
   26a84:	000497ff 	.word	0x000497ff

00026a88 <gps_process_agps_data>:

int gps_process_agps_data(const uint8_t *buf, size_t len)
{
   26a88:	b510      	push	{r4, lr}
	int err = 0;

#if defined(CONFIG_AGPS_SRC_NRF_CLOUD) && defined(CONFIG_NRF_CLOUD_AGPS)

	err = nrf_cloud_agps_process(buf, len, NULL);
   26a8a:	2200      	movs	r2, #0
   26a8c:	f008 fd08 	bl	2f4a0 <nrf_cloud_agps_process>
	if (err) {
   26a90:	4604      	mov	r4, r0
   26a92:	4b0e      	ldr	r3, [pc, #56]	; (26acc <gps_process_agps_data+0x44>)
   26a94:	4a0e      	ldr	r2, [pc, #56]	; (26ad0 <gps_process_agps_data+0x48>)
		LOG_ERR("A-GPS failed, error: %d", err);
   26a96:	f04f 0000 	mov.w	r0, #0
   26a9a:	1a9b      	subs	r3, r3, r2
   26a9c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	if (err) {
   26aa0:	b154      	cbz	r4, 26ab8 <gps_process_agps_data+0x30>
		LOG_ERR("A-GPS failed, error: %d", err);
   26aa2:	2201      	movs	r2, #1
   26aa4:	f362 0007 	bfi	r0, r2, #0, #8
   26aa8:	f363 108f 	bfi	r0, r3, #6, #10
   26aac:	4622      	mov	r2, r4
   26aae:	4909      	ldr	r1, [pc, #36]	; (26ad4 <gps_process_agps_data+0x4c>)
   26ab0:	f01b fac5 	bl	4203e <log_string_sync>
		LOG_INF("A-GPS data successfully processed");
	}
#endif /* CONFIG_AGPS_SRC_NRF_CLOUD && CONFIG_NRF_CLOUD_AGPS */

	return err;
}
   26ab4:	4620      	mov	r0, r4
   26ab6:	bd10      	pop	{r4, pc}
		LOG_INF("A-GPS data successfully processed");
   26ab8:	2203      	movs	r2, #3
   26aba:	f362 0007 	bfi	r0, r2, #0, #8
   26abe:	f363 108f 	bfi	r0, r3, #6, #10
   26ac2:	4905      	ldr	r1, [pc, #20]	; (26ad8 <gps_process_agps_data+0x50>)
   26ac4:	f01b fabb 	bl	4203e <log_string_sync>
	return err;
   26ac8:	e7f4      	b.n	26ab4 <gps_process_agps_data+0x2c>
   26aca:	bf00      	nop
   26acc:	00046880 	.word	0x00046880
   26ad0:	00046878 	.word	0x00046878
   26ad4:	00049829 	.word	0x00049829
   26ad8:	00049841 	.word	0x00049841

00026adc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   26adc:	4a09      	ldr	r2, [pc, #36]	; (26b04 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   26ade:	490a      	ldr	r1, [pc, #40]	; (26b08 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   26ae0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   26ae2:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   26ae4:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   26ae6:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26ae8:	4908      	ldr	r1, [pc, #32]	; (26b0c <arch_swap+0x30>)
   26aea:	684b      	ldr	r3, [r1, #4]
   26aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   26af0:	604b      	str	r3, [r1, #4]
   26af2:	2300      	movs	r3, #0
   26af4:	f383 8811 	msr	BASEPRI, r3
   26af8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   26afc:	6893      	ldr	r3, [r2, #8]
}
   26afe:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   26b00:	4770      	bx	lr
   26b02:	bf00      	nop
   26b04:	20025af0 	.word	0x20025af0
   26b08:	000476c0 	.word	0x000476c0
   26b0c:	e000ed00 	.word	0xe000ed00

00026b10 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26b10:	4929      	ldr	r1, [pc, #164]	; (26bb8 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26b12:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26b14:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   26b18:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   26b1a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   26b1e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   26b22:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   26b26:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   26b2a:	d004      	beq.n	26b36 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   26b2c:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   26b30:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   26b34:	e007      	b.n	26b46 <out_fp_endif>

00026b36 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   26b36:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   26b3a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   26b3e:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   26b42:	f050 0004 	orrs.w	r0, r0, #4

00026b46 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   26b46:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26b4a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26b4c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   26b50:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   26b54:	4f19      	ldr	r7, [pc, #100]	; (26bbc <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26b56:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   26b5a:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   26b5c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   26b5e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   26b60:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   26b62:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26b64:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26b66:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   26b6a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   26b6e:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   26b72:	d105      	bne.n	26b80 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   26b74:	2300      	movs	r3, #0
    vmsr fpscr, r3
   26b76:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   26b7a:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   26b7e:	e005      	b.n	26b8c <in_fp_endif>

00026b80 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   26b80:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   26b84:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   26b88:	ec90 8a10 	vldmia	r0, {s16-s31}

00026b8c <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   26b8c:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   26b90:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   26b94:	f383 8814 	msr	CONTROL, r3
    isb
   26b98:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26b9c:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   26ba0:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   26ba4:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   26ba8:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   26bac:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   26bae:	f01c f864 	bl	42c7a <configure_builtin_stack_guard>
    pop {r2, lr}
   26bb2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   26bb6:	4770      	bx	lr
    ldr r1, =_kernel
   26bb8:	20025af0 	.word	0x20025af0
    ldr v4, =_SCS_ICSR
   26bbc:	e000ed04 	.word	0xe000ed04

00026bc0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   26bc0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26bc4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26bc6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26bca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26bce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   26bd0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   26bd4:	2902      	cmp	r1, #2
    beq _oops
   26bd6:	d0ff      	beq.n	26bd8 <_oops>

00026bd8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   26bd8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   26bda:	f01c f852 	bl	42c82 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   26bde:	bd01      	pop	{r0, pc}

00026be0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26be0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   26be2:	2b00      	cmp	r3, #0
   26be4:	db08      	blt.n	26bf8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26be6:	2201      	movs	r2, #1
   26be8:	f000 001f 	and.w	r0, r0, #31
   26bec:	fa02 f000 	lsl.w	r0, r2, r0
   26bf0:	4a02      	ldr	r2, [pc, #8]	; (26bfc <arch_irq_enable+0x1c>)
   26bf2:	095b      	lsrs	r3, r3, #5
   26bf4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   26bf8:	4770      	bx	lr
   26bfa:	bf00      	nop
   26bfc:	e000e100 	.word	0xe000e100

00026c00 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   26c00:	4b05      	ldr	r3, [pc, #20]	; (26c18 <arch_irq_is_enabled+0x18>)
   26c02:	0942      	lsrs	r2, r0, #5
   26c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   26c08:	2301      	movs	r3, #1
   26c0a:	f000 001f 	and.w	r0, r0, #31
   26c0e:	fa03 f000 	lsl.w	r0, r3, r0
}
   26c12:	4010      	ands	r0, r2
   26c14:	4770      	bx	lr
   26c16:	bf00      	nop
   26c18:	e000e100 	.word	0xe000e100

00026c1c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   26c1c:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26c1e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26c20:	2c07      	cmp	r4, #7
{
   26c22:	4605      	mov	r5, r0
   26c24:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26c26:	d90e      	bls.n	26c46 <z_arm_irq_priority_set+0x2a>
   26c28:	235e      	movs	r3, #94	; 0x5e
   26c2a:	4a10      	ldr	r2, [pc, #64]	; (26c6c <z_arm_irq_priority_set+0x50>)
   26c2c:	4910      	ldr	r1, [pc, #64]	; (26c70 <z_arm_irq_priority_set+0x54>)
   26c2e:	4811      	ldr	r0, [pc, #68]	; (26c74 <z_arm_irq_priority_set+0x58>)
   26c30:	f01a ffda 	bl	41be8 <printk>
   26c34:	4631      	mov	r1, r6
   26c36:	4810      	ldr	r0, [pc, #64]	; (26c78 <z_arm_irq_priority_set+0x5c>)
   26c38:	2207      	movs	r2, #7
   26c3a:	f01a ffd5 	bl	41be8 <printk>
   26c3e:	215e      	movs	r1, #94	; 0x5e
   26c40:	480a      	ldr	r0, [pc, #40]	; (26c6c <z_arm_irq_priority_set+0x50>)
   26c42:	f01b f9eb 	bl	4201c <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   26c46:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   26c48:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c4a:	bfa8      	it	ge
   26c4c:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   26c50:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c54:	bfb8      	it	lt
   26c56:	4b09      	ldrlt	r3, [pc, #36]	; (26c7c <z_arm_irq_priority_set+0x60>)
   26c58:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c5a:	bfab      	itete	ge
   26c5c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c60:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c64:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26c68:	555c      	strblt	r4, [r3, r5]
}
   26c6a:	bd70      	pop	{r4, r5, r6, pc}
   26c6c:	00049863 	.word	0x00049863
   26c70:	00049899 	.word	0x00049899
   26c74:	0004825b 	.word	0x0004825b
   26c78:	000498b4 	.word	0x000498b4
   26c7c:	e000ed14 	.word	0xe000ed14

00026c80 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   26c80:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   26c82:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   26c84:	4b04      	ldr	r3, [pc, #16]	; (26c98 <_arch_isr_direct_pm+0x18>)
   26c86:	6a18      	ldr	r0, [r3, #32]
   26c88:	b118      	cbz	r0, 26c92 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   26c8a:	2200      	movs	r2, #0
   26c8c:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   26c8e:	f01e f8e0 	bl	44e52 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   26c92:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   26c94:	bd08      	pop	{r3, pc}
   26c96:	bf00      	nop
   26c98:	20025af0 	.word	0x20025af0

00026c9c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   26c9c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   26ca0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   26ca2:	490c      	ldr	r1, [pc, #48]	; (26cd4 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   26ca4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   26ca8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   26caa:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   26cae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   26cb2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   26cb4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   26cb8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   26cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   26cc0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   26cc4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   26cc6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   26cc8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   26cca:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   26ccc:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   26cd0:	4770      	bx	lr
   26cd2:	bf00      	nop
   26cd4:	00041ced 	.word	0x00041ced

00026cd8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   26cd8:	b508      	push	{r3, lr}
   26cda:	4604      	mov	r4, r0
   26cdc:	460e      	mov	r6, r1
   26cde:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   26ce0:	2300      	movs	r3, #0
   26ce2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   26ce6:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   26cea:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   26cee:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   26cf2:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   26cf6:	f000 fc73 	bl	275e0 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   26cfa:	4b09      	ldr	r3, [pc, #36]	; (26d20 <arch_switch_to_main_thread+0x48>)
   26cfc:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   26cfe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   26d00:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   26d04:	4628      	mov	r0, r5
   26d06:	f386 8809 	msr	PSP, r6
   26d0a:	2100      	movs	r1, #0
   26d0c:	b663      	cpsie	if
   26d0e:	f381 8811 	msr	BASEPRI, r1
   26d12:	f3bf 8f6f 	isb	sy
   26d16:	2200      	movs	r2, #0
   26d18:	2300      	movs	r3, #0
   26d1a:	f01a ffe7 	bl	41cec <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   26d1e:	bf00      	nop
   26d20:	20025af0 	.word	0x20025af0

00026d24 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   26d24:	4901      	ldr	r1, [pc, #4]	; (26d2c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   26d26:	2210      	movs	r2, #16
	str	r2, [r1]
   26d28:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   26d2a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   26d2c:	e000ed10 	.word	0xe000ed10

00026d30 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   26d30:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   26d32:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   26d34:	f380 8811 	msr	BASEPRI, r0
	isb
   26d38:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   26d3c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   26d40:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   26d42:	b662      	cpsie	i
	isb
   26d44:	f3bf 8f6f 	isb	sy

	bx	lr
   26d48:	4770      	bx	lr
   26d4a:	bf00      	nop

00026d4c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   26d4c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   26d4e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   26d50:	f381 8811 	msr	BASEPRI, r1

	wfe
   26d54:	bf20      	wfe

	msr	BASEPRI, r0
   26d56:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   26d5a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   26d5c:	4770      	bx	lr
   26d5e:	bf00      	nop

00026d60 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26d64:	4681      	mov	r9, r0
   26d66:	b086      	sub	sp, #24

	if (esf != NULL) {
   26d68:	460c      	mov	r4, r1
   26d6a:	2900      	cmp	r1, #0
   26d6c:	d075      	beq.n	26e5a <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   26d6e:	2301      	movs	r3, #1
   26d70:	f04f 0000 	mov.w	r0, #0
   26d74:	4d3c      	ldr	r5, [pc, #240]	; (26e68 <z_arm_fatal_error+0x108>)
   26d76:	f363 0007 	bfi	r0, r3, #0, #8
   26d7a:	4b3c      	ldr	r3, [pc, #240]	; (26e6c <z_arm_fatal_error+0x10c>)
   26d7c:	4627      	mov	r7, r4
   26d7e:	1aed      	subs	r5, r5, r3
   26d80:	688b      	ldr	r3, [r1, #8]
   26d82:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   26d86:	9300      	str	r3, [sp, #0]
   26d88:	e9d1 2300 	ldrd	r2, r3, [r1]
   26d8c:	f365 108f 	bfi	r0, r5, #6, #10
   26d90:	4937      	ldr	r1, [pc, #220]	; (26e70 <z_arm_fatal_error+0x110>)
   26d92:	f01b f954 	bl	4203e <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   26d96:	2301      	movs	r3, #1
   26d98:	f04f 0000 	mov.w	r0, #0
   26d9c:	f363 0007 	bfi	r0, r3, #0, #8
   26da0:	6963      	ldr	r3, [r4, #20]
   26da2:	f365 108f 	bfi	r0, r5, #6, #10
   26da6:	9300      	str	r3, [sp, #0]
   26da8:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   26dac:	4931      	ldr	r1, [pc, #196]	; (26e74 <z_arm_fatal_error+0x114>)
   26dae:	f01b f946 	bl	4203e <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   26db2:	2301      	movs	r3, #1
   26db4:	f04f 0000 	mov.w	r0, #0
   26db8:	f363 0007 	bfi	r0, r3, #0, #8
   26dbc:	f365 108f 	bfi	r0, r5, #6, #10
   26dc0:	69e2      	ldr	r2, [r4, #28]
   26dc2:	492d      	ldr	r1, [pc, #180]	; (26e78 <z_arm_fatal_error+0x118>)
   26dc4:	f01b f93b 	bl	4203e <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   26dc8:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   26dca:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 26e84 <z_arm_fatal_error+0x124>
   26dce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   26dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26dd6:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   26dda:	f043 0301 	orr.w	r3, r3, #1
   26dde:	f363 0807 	bfi	r8, r3, #0, #8
   26de2:	1cf3      	adds	r3, r6, #3
   26de4:	ed97 7a08 	vldr	s14, [r7, #32]
   26de8:	9304      	str	r3, [sp, #16]
   26dea:	edcd 7a05 	vstr	s15, [sp, #20]
   26dee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   26df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26df6:	1cb3      	adds	r3, r6, #2
   26df8:	9302      	str	r3, [sp, #8]
   26dfa:	edcd 7a03 	vstr	s15, [sp, #12]
   26dfe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   26e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   26e06:	edcd 7a01 	vstr	s15, [sp, #4]
   26e0a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   26e0e:	1c73      	adds	r3, r6, #1
   26e10:	f365 188f 	bfi	r8, r5, #6, #10
   26e14:	9300      	str	r3, [sp, #0]
   26e16:	4632      	mov	r2, r6
   26e18:	ee17 3a90 	vmov	r3, s15
   26e1c:	4651      	mov	r1, sl
   26e1e:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   26e20:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   26e22:	f01b f90c 	bl	4203e <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   26e26:	2e10      	cmp	r6, #16
   26e28:	f107 0710 	add.w	r7, r7, #16
   26e2c:	d1cf      	bne.n	26dce <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   26e2e:	2301      	movs	r3, #1
   26e30:	f04f 0000 	mov.w	r0, #0
   26e34:	f363 0007 	bfi	r0, r3, #0, #8
   26e38:	f365 108f 	bfi	r0, r5, #6, #10
   26e3c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   26e3e:	490f      	ldr	r1, [pc, #60]	; (26e7c <z_arm_fatal_error+0x11c>)
   26e40:	f01b f8fd 	bl	4203e <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   26e44:	f04f 0000 	mov.w	r0, #0
   26e48:	2301      	movs	r3, #1
   26e4a:	f363 0007 	bfi	r0, r3, #0, #8
   26e4e:	f365 108f 	bfi	r0, r5, #6, #10
   26e52:	69a2      	ldr	r2, [r4, #24]
   26e54:	490a      	ldr	r1, [pc, #40]	; (26e80 <z_arm_fatal_error+0x120>)
   26e56:	f01b f8f2 	bl	4203e <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   26e5a:	4621      	mov	r1, r4
   26e5c:	4648      	mov	r0, r9
}
   26e5e:	b006      	add	sp, #24
   26e60:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   26e64:	f015 b99c 	b.w	3c1a0 <z_fatal_error>
   26e68:	00046978 	.word	0x00046978
   26e6c:	00046878 	.word	0x00046878
   26e70:	000498e9 	.word	0x000498e9
   26e74:	00049918 	.word	0x00049918
   26e78:	00049947 	.word	0x00049947
   26e7c:	00049999 	.word	0x00049999
   26e80:	000499a8 	.word	0x000499a8
   26e84:	00049956 	.word	0x00049956

00026e88 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   26e88:	bf30      	wfi
    b z_SysNmiOnReset
   26e8a:	f7ff bffd 	b.w	26e88 <z_SysNmiOnReset>
   26e8e:	bf00      	nop

00026e90 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26e90:	4a14      	ldr	r2, [pc, #80]	; (26ee4 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   26e92:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26e94:	4b14      	ldr	r3, [pc, #80]	; (26ee8 <z_arm_prep_c+0x58>)
   26e96:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   26e9a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   26e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26ea0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   26ea4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26ea8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   26eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   26eb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26eb4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   26eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   26ebc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   26ec0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   26ec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26ec8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   26ecc:	2300      	movs	r3, #0
   26ece:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   26ed2:	f015 fa07 	bl	3c2e4 <z_bss_zero>
	z_data_copy();
   26ed6:	f015 fa0f 	bl	3c2f8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   26eda:	f000 fb49 	bl	27570 <z_arm_interrupt_init>
	z_cstart();
   26ede:	f015 fa49 	bl	3c374 <z_cstart>
   26ee2:	bf00      	nop
   26ee4:	0001c200 	.word	0x0001c200
   26ee8:	e000ed00 	.word	0xe000ed00

00026eec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   26eec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   26eee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   26ef0:	4a0b      	ldr	r2, [pc, #44]	; (26f20 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   26ef2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   26ef4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   26ef6:	bf1e      	ittt	ne
	movne	r1, #0
   26ef8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   26efa:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   26efc:	f01d ffa9 	blne	44e52 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   26f00:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   26f02:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   26f06:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   26f0a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   26f0e:	4905      	ldr	r1, [pc, #20]	; (26f24 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   26f10:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   26f12:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   26f14:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   26f16:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   26f1a:	4903      	ldr	r1, [pc, #12]	; (26f28 <_isr_wrapper+0x3c>)
	bx r1
   26f1c:	4708      	bx	r1
   26f1e:	0000      	.short	0x0000
	ldr r2, =_kernel
   26f20:	20025af0 	.word	0x20025af0
	ldr r1, =_sw_isr_table
   26f24:	0004663c 	.word	0x0004663c
	ldr r1, =z_arm_int_exit
   26f28:	00027531 	.word	0x00027531

00026f2c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   26f2c:	f01b f87e 	bl	4202c <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26f30:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26f32:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   26f36:	4808      	ldr	r0, [pc, #32]	; (26f58 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   26f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   26f3c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   26f3e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   26f42:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   26f46:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   26f48:	4308      	orrs	r0, r1
    msr CONTROL, r0
   26f4a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   26f4e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   26f52:	f7ff ff9d 	bl	26e90 <z_arm_prep_c>
   26f56:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   26f58:	200313d0 	.word	0x200313d0

00026f5c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   26f5c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   26f60:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   26f64:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   26f66:	4672      	mov	r2, lr
	bl z_arm_fault
   26f68:	f000 f9ce 	bl	27308 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   26f6c:	bd01      	pop	{r0, pc}
   26f6e:	bf00      	nop

00026f70 <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   26f72:	2301      	movs	r3, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26f74:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   26f76:	f04f 0000 	mov.w	r0, #0
   26f7a:	4c40      	ldr	r4, [pc, #256]	; (2707c <mem_manage_fault.isra.2+0x10c>)
   26f7c:	f363 0007 	bfi	r0, r3, #0, #8
   26f80:	4b3f      	ldr	r3, [pc, #252]	; (27080 <mem_manage_fault.isra.2+0x110>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26f82:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   26f84:	1ae4      	subs	r4, r4, r3
   26f86:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   26f8a:	493e      	ldr	r1, [pc, #248]	; (27084 <mem_manage_fault.isra.2+0x114>)
   26f8c:	f364 108f 	bfi	r0, r4, #6, #10
   26f90:	f01b f855 	bl	4203e <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26f94:	4b3c      	ldr	r3, [pc, #240]	; (27088 <mem_manage_fault.isra.2+0x118>)
   26f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f98:	06d9      	lsls	r1, r3, #27
   26f9a:	d509      	bpl.n	26fb0 <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   26f9c:	f04f 0000 	mov.w	r0, #0
   26fa0:	2301      	movs	r3, #1
   26fa2:	f363 0007 	bfi	r0, r3, #0, #8
   26fa6:	f364 108f 	bfi	r0, r4, #6, #10
   26faa:	4938      	ldr	r1, [pc, #224]	; (2708c <mem_manage_fault.isra.2+0x11c>)
   26fac:	f01b f847 	bl	4203e <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   26fb0:	4b35      	ldr	r3, [pc, #212]	; (27088 <mem_manage_fault.isra.2+0x118>)
   26fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26fb4:	071a      	lsls	r2, r3, #28
   26fb6:	d509      	bpl.n	26fcc <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   26fb8:	f04f 0000 	mov.w	r0, #0
   26fbc:	2301      	movs	r3, #1
   26fbe:	f363 0007 	bfi	r0, r3, #0, #8
   26fc2:	f364 108f 	bfi	r0, r4, #6, #10
   26fc6:	4932      	ldr	r1, [pc, #200]	; (27090 <mem_manage_fault.isra.2+0x120>)
   26fc8:	f01b f839 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   26fcc:	4d2e      	ldr	r5, [pc, #184]	; (27088 <mem_manage_fault.isra.2+0x118>)
   26fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26fd0:	079b      	lsls	r3, r3, #30
   26fd2:	d51c      	bpl.n	2700e <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   26fd4:	2301      	movs	r3, #1
   26fd6:	f04f 0000 	mov.w	r0, #0
   26fda:	f363 0007 	bfi	r0, r3, #0, #8
   26fde:	f364 108f 	bfi	r0, r4, #6, #10
   26fe2:	492c      	ldr	r1, [pc, #176]	; (27094 <mem_manage_fault.isra.2+0x124>)
   26fe4:	f01b f82b 	bl	4203e <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   26fe8:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   26fea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26fec:	0618      	lsls	r0, r3, #24
   26fee:	d50e      	bpl.n	2700e <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   26ff0:	f04f 0000 	mov.w	r0, #0
   26ff4:	2301      	movs	r3, #1
   26ff6:	f363 0007 	bfi	r0, r3, #0, #8
   26ffa:	f364 108f 	bfi	r0, r4, #6, #10
   26ffe:	4926      	ldr	r1, [pc, #152]	; (27098 <mem_manage_fault.isra.2+0x128>)
   27000:	f01b f81d 	bl	4203e <log_string_sync>
			if (from_hard_fault) {
   27004:	b11f      	cbz	r7, 2700e <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   27006:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2700c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   2700e:	4b1e      	ldr	r3, [pc, #120]	; (27088 <mem_manage_fault.isra.2+0x118>)
   27010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27012:	07d9      	lsls	r1, r3, #31
   27014:	d509      	bpl.n	2702a <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   27016:	f04f 0000 	mov.w	r0, #0
   2701a:	2301      	movs	r3, #1
   2701c:	f363 0007 	bfi	r0, r3, #0, #8
   27020:	f364 108f 	bfi	r0, r4, #6, #10
   27024:	491d      	ldr	r1, [pc, #116]	; (2709c <mem_manage_fault.isra.2+0x12c>)
   27026:	f01b f80a 	bl	4203e <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   2702a:	4b17      	ldr	r3, [pc, #92]	; (27088 <mem_manage_fault.isra.2+0x118>)
   2702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2702e:	069a      	lsls	r2, r3, #26
   27030:	d509      	bpl.n	27046 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   27032:	f04f 0000 	mov.w	r0, #0
   27036:	2301      	movs	r3, #1
   27038:	f363 0007 	bfi	r0, r3, #0, #8
   2703c:	f364 108f 	bfi	r0, r4, #6, #10
   27040:	4917      	ldr	r1, [pc, #92]	; (270a0 <mem_manage_fault.isra.2+0x130>)
   27042:	f01a fffc 	bl	4203e <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   27046:	4b10      	ldr	r3, [pc, #64]	; (27088 <mem_manage_fault.isra.2+0x118>)
   27048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2704a:	06db      	lsls	r3, r3, #27
   2704c:	d50e      	bpl.n	2706c <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   2704e:	4915      	ldr	r1, [pc, #84]	; (270a4 <mem_manage_fault.isra.2+0x134>)
   27050:	f240 133f 	movw	r3, #319	; 0x13f
   27054:	4a14      	ldr	r2, [pc, #80]	; (270a8 <mem_manage_fault.isra.2+0x138>)
   27056:	4815      	ldr	r0, [pc, #84]	; (270ac <mem_manage_fault.isra.2+0x13c>)
   27058:	f01a fdc6 	bl	41be8 <printk>
   2705c:	4814      	ldr	r0, [pc, #80]	; (270b0 <mem_manage_fault.isra.2+0x140>)
   2705e:	f01a fdc3 	bl	41be8 <printk>
   27062:	f240 113f 	movw	r1, #319	; 0x13f
   27066:	4810      	ldr	r0, [pc, #64]	; (270a8 <mem_manage_fault.isra.2+0x138>)
   27068:	f01a ffd8 	bl	4201c <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   2706c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   2706e:	4a06      	ldr	r2, [pc, #24]	; (27088 <mem_manage_fault.isra.2+0x118>)
   27070:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27072:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   27076:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27078:	7030      	strb	r0, [r6, #0]

	return reason;
}
   2707a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2707c:	00046978 	.word	0x00046978
   27080:	00046878 	.word	0x00046878
   27084:	00049a5e 	.word	0x00049a5e
   27088:	e000ed00 	.word	0xe000ed00
   2708c:	00049a74 	.word	0x00049a74
   27090:	00049aa7 	.word	0x00049aa7
   27094:	00049aba 	.word	0x00049aba
   27098:	00049ad2 	.word	0x00049ad2
   2709c:	00049ae8 	.word	0x00049ae8
   270a0:	00049b07 	.word	0x00049b07
   270a4:	0004edb2 	.word	0x0004edb2
   270a8:	00049b36 	.word	0x00049b36
   270ac:	0004825b 	.word	0x0004825b
   270b0:	00049b70 	.word	0x00049b70

000270b4 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   270b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   270b6:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   270b8:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   270ba:	f04f 0000 	mov.w	r0, #0
   270be:	4c3d      	ldr	r4, [pc, #244]	; (271b4 <bus_fault.isra.3+0x100>)
   270c0:	f363 0007 	bfi	r0, r3, #0, #8
   270c4:	4b3c      	ldr	r3, [pc, #240]	; (271b8 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   270c6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   270c8:	1ae4      	subs	r4, r4, r3
   270ca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   270ce:	493b      	ldr	r1, [pc, #236]	; (271bc <bus_fault.isra.3+0x108>)
   270d0:	f364 108f 	bfi	r0, r4, #6, #10
   270d4:	f01a ffb3 	bl	4203e <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   270d8:	4b39      	ldr	r3, [pc, #228]	; (271c0 <bus_fault.isra.3+0x10c>)
   270da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   270dc:	04d9      	lsls	r1, r3, #19
   270de:	d509      	bpl.n	270f4 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   270e0:	f04f 0000 	mov.w	r0, #0
   270e4:	2301      	movs	r3, #1
   270e6:	f363 0007 	bfi	r0, r3, #0, #8
   270ea:	f364 108f 	bfi	r0, r4, #6, #10
   270ee:	4935      	ldr	r1, [pc, #212]	; (271c4 <bus_fault.isra.3+0x110>)
   270f0:	f01a ffa5 	bl	4203e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   270f4:	4b32      	ldr	r3, [pc, #200]	; (271c0 <bus_fault.isra.3+0x10c>)
   270f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   270f8:	051a      	lsls	r2, r3, #20
   270fa:	d509      	bpl.n	27110 <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   270fc:	f04f 0000 	mov.w	r0, #0
   27100:	2301      	movs	r3, #1
   27102:	f363 0007 	bfi	r0, r3, #0, #8
   27106:	f364 108f 	bfi	r0, r4, #6, #10
   2710a:	492f      	ldr	r1, [pc, #188]	; (271c8 <bus_fault.isra.3+0x114>)
   2710c:	f01a ff97 	bl	4203e <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   27110:	4d2b      	ldr	r5, [pc, #172]	; (271c0 <bus_fault.isra.3+0x10c>)
   27112:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27114:	059b      	lsls	r3, r3, #22
   27116:	d51c      	bpl.n	27152 <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   27118:	2301      	movs	r3, #1
   2711a:	f04f 0000 	mov.w	r0, #0
   2711e:	f363 0007 	bfi	r0, r3, #0, #8
   27122:	f364 108f 	bfi	r0, r4, #6, #10
   27126:	4929      	ldr	r1, [pc, #164]	; (271cc <bus_fault.isra.3+0x118>)
   27128:	f01a ff89 	bl	4203e <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   2712c:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   2712e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27130:	0418      	lsls	r0, r3, #16
   27132:	d50e      	bpl.n	27152 <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   27134:	f04f 0000 	mov.w	r0, #0
   27138:	2301      	movs	r3, #1
   2713a:	f363 0007 	bfi	r0, r3, #0, #8
   2713e:	f364 108f 	bfi	r0, r4, #6, #10
   27142:	4923      	ldr	r1, [pc, #140]	; (271d0 <bus_fault.isra.3+0x11c>)
   27144:	f01a ff7b 	bl	4203e <log_string_sync>
			if (from_hard_fault) {
   27148:	b11f      	cbz	r7, 27152 <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   2714a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2714c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27150:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   27152:	4b1b      	ldr	r3, [pc, #108]	; (271c0 <bus_fault.isra.3+0x10c>)
   27154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27156:	0559      	lsls	r1, r3, #21
   27158:	d509      	bpl.n	2716e <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   2715a:	f04f 0000 	mov.w	r0, #0
   2715e:	2301      	movs	r3, #1
   27160:	f363 0007 	bfi	r0, r3, #0, #8
   27164:	f364 108f 	bfi	r0, r4, #6, #10
   27168:	491a      	ldr	r1, [pc, #104]	; (271d4 <bus_fault.isra.3+0x120>)
   2716a:	f01a ff68 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   2716e:	4b14      	ldr	r3, [pc, #80]	; (271c0 <bus_fault.isra.3+0x10c>)
   27170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27172:	05d2      	lsls	r2, r2, #23
   27174:	d511      	bpl.n	2719a <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   27176:	f04f 0000 	mov.w	r0, #0
   2717a:	2301      	movs	r3, #1
   2717c:	4916      	ldr	r1, [pc, #88]	; (271d8 <bus_fault.isra.3+0x124>)
   2717e:	f363 0007 	bfi	r0, r3, #0, #8
   27182:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27186:	f01a ff5a 	bl	4203e <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   2718a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   2718c:	4a0c      	ldr	r2, [pc, #48]	; (271c0 <bus_fault.isra.3+0x10c>)
   2718e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27190:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   27194:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27196:	7030      	strb	r0, [r6, #0]

	return reason;
}
   27198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   2719a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2719c:	049b      	lsls	r3, r3, #18
   2719e:	d5f4      	bpl.n	2718a <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   271a0:	f04f 0000 	mov.w	r0, #0
   271a4:	2301      	movs	r3, #1
   271a6:	f363 0007 	bfi	r0, r3, #0, #8
   271aa:	f364 108f 	bfi	r0, r4, #6, #10
   271ae:	490b      	ldr	r1, [pc, #44]	; (271dc <bus_fault.isra.3+0x128>)
   271b0:	e7e9      	b.n	27186 <bus_fault.isra.3+0xd2>
   271b2:	bf00      	nop
   271b4:	00046978 	.word	0x00046978
   271b8:	00046878 	.word	0x00046878
   271bc:	000499d6 	.word	0x000499d6
   271c0:	e000ed00 	.word	0xe000ed00
   271c4:	000499ec 	.word	0x000499ec
   271c8:	00049aa7 	.word	0x00049aa7
   271cc:	000499fd 	.word	0x000499fd
   271d0:	00049a16 	.word	0x00049a16
   271d4:	00049a2b 	.word	0x00049a2b
   271d8:	00049a46 	.word	0x00049a46
   271dc:	00049b07 	.word	0x00049b07

000271e0 <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   271e0:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   271e2:	f04f 0000 	mov.w	r0, #0
   271e6:	2301      	movs	r3, #1
   271e8:	4c3c      	ldr	r4, [pc, #240]	; (272dc <usage_fault.isra.4+0xfc>)
   271ea:	f363 0007 	bfi	r0, r3, #0, #8
   271ee:	4b3c      	ldr	r3, [pc, #240]	; (272e0 <usage_fault.isra.4+0x100>)
   271f0:	493c      	ldr	r1, [pc, #240]	; (272e4 <usage_fault.isra.4+0x104>)
   271f2:	1ae4      	subs	r4, r4, r3
   271f4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   271f8:	f364 108f 	bfi	r0, r4, #6, #10
   271fc:	f01a ff1f 	bl	4203e <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   27200:	4b39      	ldr	r3, [pc, #228]	; (272e8 <usage_fault.isra.4+0x108>)
   27202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27204:	019b      	lsls	r3, r3, #6
   27206:	d509      	bpl.n	2721c <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   27208:	f04f 0000 	mov.w	r0, #0
   2720c:	2301      	movs	r3, #1
   2720e:	f363 0007 	bfi	r0, r3, #0, #8
   27212:	f364 108f 	bfi	r0, r4, #6, #10
   27216:	4935      	ldr	r1, [pc, #212]	; (272ec <usage_fault.isra.4+0x10c>)
   27218:	f01a ff11 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2721c:	4b32      	ldr	r3, [pc, #200]	; (272e8 <usage_fault.isra.4+0x108>)
   2721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27220:	01dd      	lsls	r5, r3, #7
   27222:	d509      	bpl.n	27238 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   27224:	f04f 0000 	mov.w	r0, #0
   27228:	2301      	movs	r3, #1
   2722a:	f363 0007 	bfi	r0, r3, #0, #8
   2722e:	f364 108f 	bfi	r0, r4, #6, #10
   27232:	492f      	ldr	r1, [pc, #188]	; (272f0 <usage_fault.isra.4+0x110>)
   27234:	f01a ff03 	bl	4203e <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   27238:	4b2b      	ldr	r3, [pc, #172]	; (272e8 <usage_fault.isra.4+0x108>)
   2723a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   2723c:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   27240:	d00a      	beq.n	27258 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   27242:	2301      	movs	r3, #1
   27244:	f04f 0000 	mov.w	r0, #0
   27248:	f363 0007 	bfi	r0, r3, #0, #8
   2724c:	f364 108f 	bfi	r0, r4, #6, #10
   27250:	4928      	ldr	r1, [pc, #160]	; (272f4 <usage_fault.isra.4+0x114>)
   27252:	f01a fef4 	bl	4203e <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   27256:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   27258:	4b23      	ldr	r3, [pc, #140]	; (272e8 <usage_fault.isra.4+0x108>)
   2725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2725c:	0318      	lsls	r0, r3, #12
   2725e:	d509      	bpl.n	27274 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   27260:	f04f 0000 	mov.w	r0, #0
   27264:	2301      	movs	r3, #1
   27266:	f363 0007 	bfi	r0, r3, #0, #8
   2726a:	f364 108f 	bfi	r0, r4, #6, #10
   2726e:	4922      	ldr	r1, [pc, #136]	; (272f8 <usage_fault.isra.4+0x118>)
   27270:	f01a fee5 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   27274:	4b1c      	ldr	r3, [pc, #112]	; (272e8 <usage_fault.isra.4+0x108>)
   27276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27278:	0359      	lsls	r1, r3, #13
   2727a:	d509      	bpl.n	27290 <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   2727c:	f04f 0000 	mov.w	r0, #0
   27280:	2301      	movs	r3, #1
   27282:	f363 0007 	bfi	r0, r3, #0, #8
   27286:	f364 108f 	bfi	r0, r4, #6, #10
   2728a:	491c      	ldr	r1, [pc, #112]	; (272fc <usage_fault.isra.4+0x11c>)
   2728c:	f01a fed7 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   27290:	4b15      	ldr	r3, [pc, #84]	; (272e8 <usage_fault.isra.4+0x108>)
   27292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27294:	039a      	lsls	r2, r3, #14
   27296:	d509      	bpl.n	272ac <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   27298:	f04f 0000 	mov.w	r0, #0
   2729c:	2301      	movs	r3, #1
   2729e:	f363 0007 	bfi	r0, r3, #0, #8
   272a2:	f364 108f 	bfi	r0, r4, #6, #10
   272a6:	4916      	ldr	r1, [pc, #88]	; (27300 <usage_fault.isra.4+0x120>)
   272a8:	f01a fec9 	bl	4203e <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   272ac:	4b0e      	ldr	r3, [pc, #56]	; (272e8 <usage_fault.isra.4+0x108>)
   272ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   272b0:	03db      	lsls	r3, r3, #15
   272b2:	d509      	bpl.n	272c8 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   272b4:	f04f 0000 	mov.w	r0, #0
   272b8:	2301      	movs	r3, #1
   272ba:	f363 0007 	bfi	r0, r3, #0, #8
   272be:	f364 108f 	bfi	r0, r4, #6, #10
   272c2:	4910      	ldr	r1, [pc, #64]	; (27304 <usage_fault.isra.4+0x124>)
   272c4:	f01a febb 	bl	4203e <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   272c8:	4a07      	ldr	r2, [pc, #28]	; (272e8 <usage_fault.isra.4+0x108>)

	return reason;
}
   272ca:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   272cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
   272ce:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   272d2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   272d6:	6293      	str	r3, [r2, #40]	; 0x28
}
   272d8:	bd38      	pop	{r3, r4, r5, pc}
   272da:	bf00      	nop
   272dc:	00046978 	.word	0x00046978
   272e0:	00046878 	.word	0x00046878
   272e4:	00049baa 	.word	0x00049baa
   272e8:	e000ed00 	.word	0xe000ed00
   272ec:	00049bc2 	.word	0x00049bc2
   272f0:	00049bd5 	.word	0x00049bd5
   272f4:	00049bef 	.word	0x00049bef
   272f8:	00049c19 	.word	0x00049c19
   272fc:	00049c37 	.word	0x00049c37
   27300:	00049c5c 	.word	0x00049c5c
   27304:	00049c76 	.word	0x00049c76

00027308 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   27308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2730c:	4b70      	ldr	r3, [pc, #448]	; (274d0 <z_arm_fault+0x1c8>)
{
   2730e:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27310:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   27314:	4606      	mov	r6, r0
   27316:	4689      	mov	r9, r1
   27318:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2731a:	f3c8 0708 	ubfx	r7, r8, #0, #9
   2731e:	2500      	movs	r5, #0
   27320:	f385 8811 	msr	BASEPRI, r5
   27324:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   27328:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   2732c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   27330:	d11b      	bne.n	2736a <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   27332:	07d0      	lsls	r0, r2, #31
   27334:	d419      	bmi.n	2736a <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   27336:	0651      	lsls	r1, r2, #25
   27338:	d403      	bmi.n	27342 <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2733a:	0722      	lsls	r2, r4, #28
   2733c:	d412      	bmi.n	27364 <z_arm_fault+0x5c>
			*nested_exc = true;
   2733e:	2501      	movs	r5, #1
   27340:	e012      	b.n	27368 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   27342:	2301      	movs	r3, #1
   27344:	f04f 0000 	mov.w	r0, #0
   27348:	4a62      	ldr	r2, [pc, #392]	; (274d4 <z_arm_fault+0x1cc>)
   2734a:	f363 0007 	bfi	r0, r3, #0, #8
   2734e:	4b62      	ldr	r3, [pc, #392]	; (274d8 <z_arm_fault+0x1d0>)
   27350:	4962      	ldr	r1, [pc, #392]	; (274dc <z_arm_fault+0x1d4>)
   27352:	1a9b      	subs	r3, r3, r2
   27354:	08db      	lsrs	r3, r3, #3
   27356:	f363 108f 	bfi	r0, r3, #6, #10
   2735a:	f01a fe70 	bl	4203e <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   2735e:	f014 0504 	ands.w	r5, r4, #4
   27362:	d001      	beq.n	27368 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   27364:	464e      	mov	r6, r9
	*nested_exc = false;
   27366:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   27368:	b97e      	cbnz	r6, 2738a <z_arm_fault+0x82>
   2736a:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   2736e:	4a5c      	ldr	r2, [pc, #368]	; (274e0 <z_arm_fault+0x1d8>)
   27370:	495c      	ldr	r1, [pc, #368]	; (274e4 <z_arm_fault+0x1dc>)
   27372:	485d      	ldr	r0, [pc, #372]	; (274e8 <z_arm_fault+0x1e0>)
   27374:	f01a fc38 	bl	41be8 <printk>
   27378:	485c      	ldr	r0, [pc, #368]	; (274ec <z_arm_fault+0x1e4>)
   2737a:	f01a fc35 	bl	41be8 <printk>
   2737e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   27382:	4857      	ldr	r0, [pc, #348]	; (274e0 <z_arm_fault+0x1d8>)
   27384:	f01a fe4a 	bl	4201c <assert_post_action>
   27388:	2600      	movs	r6, #0
	*recoverable = false;
   2738a:	2300      	movs	r3, #0
   2738c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   27390:	1efb      	subs	r3, r7, #3
   27392:	2b09      	cmp	r3, #9
   27394:	d87f      	bhi.n	27496 <z_arm_fault+0x18e>
   27396:	e8df f003 	tbb	[pc, r3]
   2739a:	6905      	.short	0x6905
   2739c:	7e7e4c6d 	.word	0x7e7e4c6d
   273a0:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   273a4:	2301      	movs	r3, #1
   273a6:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   273aa:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   273ae:	f363 0007 	bfi	r0, r3, #0, #8
   273b2:	4f49      	ldr	r7, [pc, #292]	; (274d8 <z_arm_fault+0x1d0>)
   273b4:	4b47      	ldr	r3, [pc, #284]	; (274d4 <z_arm_fault+0x1cc>)
   273b6:	494e      	ldr	r1, [pc, #312]	; (274f0 <z_arm_fault+0x1e8>)
   273b8:	1aff      	subs	r7, r7, r3
   273ba:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   273be:	f367 108f 	bfi	r0, r7, #6, #10
   273c2:	f01a fe3c 	bl	4203e <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   273c6:	4b42      	ldr	r3, [pc, #264]	; (274d0 <z_arm_fault+0x1c8>)
	*recoverable = false;
   273c8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   273cc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   273ce:	f014 0402 	ands.w	r4, r4, #2
   273d2:	d00b      	beq.n	273ec <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   273d4:	f04f 0000 	mov.w	r0, #0
   273d8:	2301      	movs	r3, #1
   273da:	4946      	ldr	r1, [pc, #280]	; (274f4 <z_arm_fault+0x1ec>)
   273dc:	f363 0007 	bfi	r0, r3, #0, #8
   273e0:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   273e4:	f01a fe2b 	bl	4203e <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   273e8:	2400      	movs	r4, #0
   273ea:	e025      	b.n	27438 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   273ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   273ee:	005b      	lsls	r3, r3, #1
   273f0:	d522      	bpl.n	27438 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   273f2:	2301      	movs	r3, #1
   273f4:	f04f 0000 	mov.w	r0, #0
   273f8:	f363 0007 	bfi	r0, r3, #0, #8
   273fc:	f367 108f 	bfi	r0, r7, #6, #10
   27400:	493d      	ldr	r1, [pc, #244]	; (274f8 <z_arm_fault+0x1f0>)
   27402:	f01a fe1c 	bl	4203e <log_string_sync>
		if (SCB_MMFSR != 0) {
   27406:	4b3d      	ldr	r3, [pc, #244]	; (274fc <z_arm_fault+0x1f4>)
   27408:	781b      	ldrb	r3, [r3, #0]
   2740a:	b12b      	cbz	r3, 27418 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   2740c:	2001      	movs	r0, #1
   2740e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   27412:	f7ff fdad 	bl	26f70 <mem_manage_fault.isra.2>
   27416:	e00e      	b.n	27436 <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   27418:	4b39      	ldr	r3, [pc, #228]	; (27500 <z_arm_fault+0x1f8>)
   2741a:	781b      	ldrb	r3, [r3, #0]
   2741c:	b12b      	cbz	r3, 2742a <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   2741e:	2001      	movs	r0, #1
   27420:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   27424:	f7ff fe46 	bl	270b4 <bus_fault.isra.3>
   27428:	e005      	b.n	27436 <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   2742a:	4b36      	ldr	r3, [pc, #216]	; (27504 <z_arm_fault+0x1fc>)
   2742c:	881b      	ldrh	r3, [r3, #0]
   2742e:	b29b      	uxth	r3, r3
   27430:	b113      	cbz	r3, 27438 <z_arm_fault+0x130>
			reason = usage_fault(esf);
   27432:	f7ff fed5 	bl	271e0 <usage_fault.isra.4>
   27436:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   27438:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2743c:	b99b      	cbnz	r3, 27466 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   2743e:	2268      	movs	r2, #104	; 0x68
   27440:	4631      	mov	r1, r6
   27442:	a802      	add	r0, sp, #8
   27444:	f01d fef0 	bl	45228 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   27448:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2744a:	2d00      	cmp	r5, #0
   2744c:	d03a      	beq.n	274c4 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   2744e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   27452:	b922      	cbnz	r2, 2745e <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   27454:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   27458:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   2745c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   2745e:	a902      	add	r1, sp, #8
   27460:	4620      	mov	r0, r4
   27462:	f7ff fc7d 	bl	26d60 <z_arm_fatal_error>
}
   27466:	b01d      	add	sp, #116	; 0x74
   27468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   2746c:	f10d 0107 	add.w	r1, sp, #7
   27470:	2000      	movs	r0, #0
   27472:	e7ce      	b.n	27412 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   27474:	f10d 0107 	add.w	r1, sp, #7
   27478:	2000      	movs	r0, #0
   2747a:	e7d3      	b.n	27424 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   2747c:	2301      	movs	r3, #1
   2747e:	f04f 0000 	mov.w	r0, #0
   27482:	4a14      	ldr	r2, [pc, #80]	; (274d4 <z_arm_fault+0x1cc>)
   27484:	f363 0007 	bfi	r0, r3, #0, #8
   27488:	4b13      	ldr	r3, [pc, #76]	; (274d8 <z_arm_fault+0x1d0>)
   2748a:	491f      	ldr	r1, [pc, #124]	; (27508 <z_arm_fault+0x200>)
   2748c:	1a9b      	subs	r3, r3, r2
   2748e:	08db      	lsrs	r3, r3, #3
   27490:	f363 108f 	bfi	r0, r3, #6, #10
   27494:	e7a6      	b.n	273e4 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   27496:	2301      	movs	r3, #1
   27498:	f04f 0000 	mov.w	r0, #0
   2749c:	4a0d      	ldr	r2, [pc, #52]	; (274d4 <z_arm_fault+0x1cc>)
   2749e:	f363 0007 	bfi	r0, r3, #0, #8
   274a2:	4b0d      	ldr	r3, [pc, #52]	; (274d8 <z_arm_fault+0x1d0>)
   274a4:	4919      	ldr	r1, [pc, #100]	; (2750c <z_arm_fault+0x204>)
   274a6:	1a9b      	subs	r3, r3, r2
   274a8:	08db      	lsrs	r3, r3, #3
   274aa:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   274ae:	f363 108f 	bfi	r0, r3, #6, #10
   274b2:	4a17      	ldr	r2, [pc, #92]	; (27510 <z_arm_fault+0x208>)
   274b4:	f1a7 0310 	sub.w	r3, r7, #16
   274b8:	bf08      	it	eq
   274ba:	460a      	moveq	r2, r1
   274bc:	4915      	ldr	r1, [pc, #84]	; (27514 <z_arm_fault+0x20c>)
   274be:	f01a fdbe 	bl	4203e <log_string_sync>
   274c2:	e791      	b.n	273e8 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   274c4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   274c8:	f023 0301 	bic.w	r3, r3, #1
   274cc:	e7c6      	b.n	2745c <z_arm_fault+0x154>
   274ce:	bf00      	nop
   274d0:	e000ed00 	.word	0xe000ed00
   274d4:	00046878 	.word	0x00046878
   274d8:	00046978 	.word	0x00046978
   274dc:	00049ccf 	.word	0x00049ccf
   274e0:	00049b36 	.word	0x00049b36
   274e4:	00049cf2 	.word	0x00049cf2
   274e8:	0004825b 	.word	0x0004825b
   274ec:	00049d05 	.word	0x00049d05
   274f0:	00049d43 	.word	0x00049d43
   274f4:	00049d5a 	.word	0x00049d5a
   274f8:	00049d7b 	.word	0x00049d7b
   274fc:	e000ed28 	.word	0xe000ed28
   27500:	e000ed29 	.word	0xe000ed29
   27504:	e000ed2a 	.word	0xe000ed2a
   27508:	00049d9a 	.word	0x00049d9a
   2750c:	00049ca1 	.word	0x00049ca1
   27510:	00049cb6 	.word	0x00049cb6
   27514:	00049dd0 	.word	0x00049dd0

00027518 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   27518:	4b04      	ldr	r3, [pc, #16]	; (2752c <z_arm_fault_init+0x14>)
   2751a:	695a      	ldr	r2, [r3, #20]
   2751c:	f042 0210 	orr.w	r2, r2, #16
   27520:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   27522:	695a      	ldr	r2, [r3, #20]
   27524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   27528:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   2752a:	4770      	bx	lr
   2752c:	e000ed00 	.word	0xe000ed00

00027530 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   27530:	4b04      	ldr	r3, [pc, #16]	; (27544 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   27532:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   27534:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   27536:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   27538:	d003      	beq.n	27542 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   2753a:	4903      	ldr	r1, [pc, #12]	; (27548 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   2753c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   27540:	600a      	str	r2, [r1, #0]

00027542 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   27542:	4770      	bx	lr
	ldr r3, =_kernel
   27544:	20025af0 	.word	0x20025af0
	ldr r1, =_SCS_ICSR
   27548:	e000ed04 	.word	0xe000ed04

0002754c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   2754c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27550:	4905      	ldr	r1, [pc, #20]	; (27568 <sys_arch_reboot+0x1c>)
   27552:	4b06      	ldr	r3, [pc, #24]	; (2756c <sys_arch_reboot+0x20>)
   27554:	68ca      	ldr	r2, [r1, #12]
   27556:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2755a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   2755c:	60cb      	str	r3, [r1, #12]
   2755e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   27562:	bf00      	nop
   27564:	e7fd      	b.n	27562 <sys_arch_reboot+0x16>
   27566:	bf00      	nop
   27568:	e000ed00 	.word	0xe000ed00
   2756c:	05fa0004 	.word	0x05fa0004

00027570 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   27570:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27572:	2120      	movs	r1, #32
   27574:	4803      	ldr	r0, [pc, #12]	; (27584 <z_arm_interrupt_init+0x14>)
   27576:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   27578:	3301      	adds	r3, #1
   2757a:	2b41      	cmp	r3, #65	; 0x41
   2757c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   27580:	d1f9      	bne.n	27576 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   27582:	4770      	bx	lr
   27584:	e000e100 	.word	0xe000e100

00027588 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   27588:	b510      	push	{r4, lr}
   2758a:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   2758c:	f016 f9fc 	bl	3d988 <z_thread_single_abort>

	if (_current == thread) {
   27590:	4b11      	ldr	r3, [pc, #68]	; (275d8 <z_impl_k_thread_abort+0x50>)
   27592:	689b      	ldr	r3, [r3, #8]
   27594:	42a3      	cmp	r3, r4
   27596:	d107      	bne.n	275a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27598:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   2759c:	b183      	cbz	r3, 275c0 <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2759e:	4a0f      	ldr	r2, [pc, #60]	; (275dc <z_impl_k_thread_abort+0x54>)
   275a0:	6853      	ldr	r3, [r2, #4]
   275a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   275a6:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   275a8:	f04f 0320 	mov.w	r3, #32
   275ac:	f3ef 8011 	mrs	r0, BASEPRI
   275b0:	f383 8811 	msr	BASEPRI, r3
   275b4:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   275b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   275bc:	f01d bc9f 	b.w	44efe <z_reschedule_irqlock>
   275c0:	f04f 0320 	mov.w	r3, #32
   275c4:	f3ef 8011 	mrs	r0, BASEPRI
   275c8:	f383 8811 	msr	BASEPRI, r3
   275cc:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   275d0:	f7ff fa84 	bl	26adc <arch_swap>
	return ret;
   275d4:	e7e8      	b.n	275a8 <z_impl_k_thread_abort+0x20>
   275d6:	bf00      	nop
   275d8:	20025af0 	.word	0x20025af0
   275dc:	e000ed00 	.word	0xe000ed00

000275e0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   275e0:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   275e2:	4b0e      	ldr	r3, [pc, #56]	; (2761c <z_arm_configure_static_mpu_regions+0x3c>)
{
   275e4:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   275e6:	9302      	str	r3, [sp, #8]
   275e8:	4b0d      	ldr	r3, [pc, #52]	; (27620 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   275ea:	4c0e      	ldr	r4, [pc, #56]	; (27624 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   275ec:	9303      	str	r3, [sp, #12]
   275ee:	4b0e      	ldr	r3, [pc, #56]	; (27628 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   275f0:	4a0e      	ldr	r2, [pc, #56]	; (2762c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   275f2:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   275f4:	ab02      	add	r3, sp, #8
   275f6:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   275f8:	a801      	add	r0, sp, #4
   275fa:	4623      	mov	r3, r4
   275fc:	2101      	movs	r1, #1
   275fe:	f000 f97d 	bl	278fc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   27602:	2300      	movs	r3, #0
   27604:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   27606:	4b0a      	ldr	r3, [pc, #40]	; (27630 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   27608:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2760a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2760c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   2760e:	9305      	str	r3, [sp, #20]
   27610:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   27612:	f000 f999 	bl	27948 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   27616:	b008      	add	sp, #32
   27618:	bd10      	pop	{r4, pc}
   2761a:	bf00      	nop
   2761c:	20020000 	.word	0x20020000
   27620:	00000000 	.word	0x00000000
   27624:	20040000 	.word	0x20040000
   27628:	00010006 	.word	0x00010006
   2762c:	20020000 	.word	0x20020000
   27630:	20020c80 	.word	0x20020c80

00027634 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   27634:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   27636:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   27638:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   2763a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   2763e:	f004 031f 	and.w	r3, r4, #31
   27642:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   27644:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   27646:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   27648:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   2764c:	4904      	ldr	r1, [pc, #16]	; (27660 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2764e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   27652:	f043 0301 	orr.w	r3, r3, #1
   27656:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   27658:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   2765a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   2765c:	bd10      	pop	{r4, pc}
   2765e:	bf00      	nop
   27660:	e000ed90 	.word	0xe000ed90

00027664 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   27664:	280f      	cmp	r0, #15
{
   27666:	b510      	push	{r4, lr}
   27668:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   2766a:	d912      	bls.n	27692 <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   2766c:	2301      	movs	r3, #1
   2766e:	f04f 0000 	mov.w	r0, #0
   27672:	4a09      	ldr	r2, [pc, #36]	; (27698 <region_allocate_and_init+0x34>)
   27674:	f363 0007 	bfi	r0, r3, #0, #8
   27678:	4b08      	ldr	r3, [pc, #32]	; (2769c <region_allocate_and_init+0x38>)
   2767a:	4909      	ldr	r1, [pc, #36]	; (276a0 <region_allocate_and_init+0x3c>)
   2767c:	1a9b      	subs	r3, r3, r2
   2767e:	08db      	lsrs	r3, r3, #3
   27680:	4622      	mov	r2, r4
   27682:	f363 108f 	bfi	r0, r3, #6, #10
   27686:	f01a fcda 	bl	4203e <log_string_sync>
		return -EINVAL;
   2768a:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2768e:	4620      	mov	r0, r4
   27690:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   27692:	f7ff ffcf 	bl	27634 <region_init>
	return index;
   27696:	e7fa      	b.n	2768e <region_allocate_and_init+0x2a>
   27698:	00046878 	.word	0x00046878
   2769c:	00046930 	.word	0x00046930
   276a0:	00049f6e 	.word	0x00049f6e

000276a4 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   276a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   276a8:	4607      	mov	r7, r0
   276aa:	4688      	mov	r8, r1
   276ac:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   276ae:	2600      	movs	r6, #0
	MPU->RNR = index;
   276b0:	4d58      	ldr	r5, [pc, #352]	; (27814 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   276b2:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   276b4:	4546      	cmp	r6, r8
   276b6:	da3d      	bge.n	27734 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   276b8:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   276bc:	f8d3 9004 	ldr.w	r9, [r3, #4]
   276c0:	f1b9 0f00 	cmp.w	r9, #0
   276c4:	d059      	beq.n	2777a <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   276c6:	f1b9 0f1f 	cmp.w	r9, #31
   276ca:	d922      	bls.n	27712 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   276cc:	f019 0f1f 	tst.w	r9, #31
   276d0:	d11f      	bne.n	27712 <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   276d2:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   276d6:	f01a 0f1f 	tst.w	sl, #31
   276da:	d11a      	bne.n	27712 <mpu_configure_regions_and_partition.constprop.2+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   276dc:	4650      	mov	r0, sl
   276de:	f01b faf6 	bl	42cce <arm_cmse_mpu_region_get>
   276e2:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   276e4:	eb09 000a 	add.w	r0, r9, sl
   276e8:	3801      	subs	r0, #1
   276ea:	f01b faf0 	bl	42cce <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   276ee:	4583      	cmp	fp, r0
   276f0:	d024      	beq.n	2773c <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   276f2:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   276f6:	2301      	movs	r3, #1
   276f8:	f04f 0000 	mov.w	r0, #0
   276fc:	4a46      	ldr	r2, [pc, #280]	; (27818 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   276fe:	f363 0007 	bfi	r0, r3, #0, #8
   27702:	4b46      	ldr	r3, [pc, #280]	; (2781c <mpu_configure_regions_and_partition.constprop.2+0x178>)
   27704:	4946      	ldr	r1, [pc, #280]	; (27820 <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   27706:	1a9b      	subs	r3, r3, r2
   27708:	08db      	lsrs	r3, r3, #3
   2770a:	f363 108f 	bfi	r0, r3, #6, #10
   2770e:	465a      	mov	r2, fp
   27710:	e00c      	b.n	2772c <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   27712:	2301      	movs	r3, #1
   27714:	f04f 0000 	mov.w	r0, #0
   27718:	4a3f      	ldr	r2, [pc, #252]	; (27818 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   2771a:	f363 0007 	bfi	r0, r3, #0, #8
   2771e:	4b3f      	ldr	r3, [pc, #252]	; (2781c <mpu_configure_regions_and_partition.constprop.2+0x178>)
   27720:	4940      	ldr	r1, [pc, #256]	; (27824 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   27722:	1a9b      	subs	r3, r3, r2
   27724:	4632      	mov	r2, r6
   27726:	08db      	lsrs	r3, r3, #3
   27728:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   2772c:	f01a fc87 	bl	4203e <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   27730:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   27734:	4620      	mov	r0, r4
   27736:	b005      	add	sp, #20
   27738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   2773c:	f11b 0f16 	cmn.w	fp, #22
   27740:	d0d9      	beq.n	276f6 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   27742:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   27744:	455b      	cmp	r3, fp
   27746:	dbd6      	blt.n	276f6 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   27748:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   2774c:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   2774e:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   27752:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   27754:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   27758:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2775c:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   27760:	e9d1 3200 	ldrd	r3, r2, [r1]
   27764:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   27766:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   27768:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   2776c:	d118      	bne.n	277a0 <mpu_configure_regions_and_partition.constprop.2+0xfc>
   2776e:	45ca      	cmp	sl, r9
   27770:	d105      	bne.n	2777e <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   27772:	fa5f f08b 	uxtb.w	r0, fp
   27776:	f01b fa8f 	bl	42c98 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   2777a:	3601      	adds	r6, #1
   2777c:	e79a      	b.n	276b4 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   2777e:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   27782:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   27784:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   27788:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   2778c:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2778e:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   27790:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   27792:	f01b fa81 	bl	42c98 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   27796:	f110 0f16 	cmn.w	r0, #22
   2779a:	d0c9      	beq.n	27730 <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   2779c:	1c44      	adds	r4, r0, #1
   2779e:	e7ec      	b.n	2777a <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   277a0:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   277a4:	692a      	ldr	r2, [r5, #16]
   277a6:	3b01      	subs	r3, #1
   277a8:	f023 031f 	bic.w	r3, r3, #31
   277ac:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   277b0:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   277b2:	45ca      	cmp	sl, r9
   277b4:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   277b6:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   277b8:	d0eb      	beq.n	27792 <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   277ba:	f01b fa6d 	bl	42c98 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   277be:	f110 0f16 	cmn.w	r0, #22
   277c2:	d0b5      	beq.n	27730 <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   277c4:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   277c8:	68ea      	ldr	r2, [r5, #12]
   277ca:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   277ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   277d2:	f362 0304 	bfi	r3, r2, #0, #5
   277d6:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   277da:	692b      	ldr	r3, [r5, #16]
   277dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
   277e0:	085b      	lsrs	r3, r3, #1
   277e2:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   277e6:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   277ea:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   277ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   277f2:	4413      	add	r3, r2
   277f4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   277f6:	f023 031f 	bic.w	r3, r3, #31
   277fa:	4453      	add	r3, sl
   277fc:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   27800:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   27802:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   27806:	4669      	mov	r1, sp
   27808:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   2780a:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   2780c:	f7ff ff2a 	bl	27664 <region_allocate_and_init>
   27810:	e7c1      	b.n	27796 <mpu_configure_regions_and_partition.constprop.2+0xf2>
   27812:	bf00      	nop
   27814:	e000ed90 	.word	0xe000ed90
   27818:	00046878 	.word	0x00046878
   2781c:	00046930 	.word	0x00046930
   27820:	00049f4b 	.word	0x00049f4b
   27824:	00049f28 	.word	0x00049f28

00027828 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   27828:	2205      	movs	r2, #5
   2782a:	4b03      	ldr	r3, [pc, #12]	; (27838 <arm_core_mpu_enable+0x10>)
   2782c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   2782e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27832:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   27836:	4770      	bx	lr
   27838:	e000ed90 	.word	0xe000ed90

0002783c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   2783c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   27840:	2200      	movs	r2, #0
   27842:	4b01      	ldr	r3, [pc, #4]	; (27848 <arm_core_mpu_disable+0xc>)
   27844:	605a      	str	r2, [r3, #4]
}
   27846:	4770      	bx	lr
   27848:	e000ed90 	.word	0xe000ed90

0002784c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   2784c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2784e:	4f21      	ldr	r7, [pc, #132]	; (278d4 <arm_mpu_init+0x88>)
   27850:	683e      	ldr	r6, [r7, #0]
   27852:	2e10      	cmp	r6, #16
   27854:	d913      	bls.n	2787e <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   27856:	f44f 739f 	mov.w	r3, #318	; 0x13e
   2785a:	4a1f      	ldr	r2, [pc, #124]	; (278d8 <arm_mpu_init+0x8c>)
   2785c:	491f      	ldr	r1, [pc, #124]	; (278dc <arm_mpu_init+0x90>)
   2785e:	4820      	ldr	r0, [pc, #128]	; (278e0 <arm_mpu_init+0x94>)
   27860:	f01a f9c2 	bl	41be8 <printk>
   27864:	2210      	movs	r2, #16
   27866:	4631      	mov	r1, r6
   27868:	481e      	ldr	r0, [pc, #120]	; (278e4 <arm_mpu_init+0x98>)
   2786a:	f01a f9bd 	bl	41be8 <printk>
   2786e:	481a      	ldr	r0, [pc, #104]	; (278d8 <arm_mpu_init+0x8c>)
   27870:	f44f 719f 	mov.w	r1, #318	; 0x13e
   27874:	f01a fbd2 	bl	4201c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   27878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   2787c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2787e:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   27880:	f7ff ffdc 	bl	2783c <arm_core_mpu_disable>
	MPU->MAIR0 =
   27884:	4d18      	ldr	r5, [pc, #96]	; (278e8 <arm_mpu_init+0x9c>)
   27886:	4a19      	ldr	r2, [pc, #100]	; (278ec <arm_mpu_init+0xa0>)
   27888:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2788a:	42a6      	cmp	r6, r4
   2788c:	d119      	bne.n	278c2 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   2788e:	4b18      	ldr	r3, [pc, #96]	; (278f0 <arm_mpu_init+0xa4>)
   27890:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   27892:	f7ff ffc9 	bl	27828 <arm_core_mpu_enable>
	__ASSERT(
   27896:	682b      	ldr	r3, [r5, #0]
   27898:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2789c:	2b10      	cmp	r3, #16
   2789e:	d00e      	beq.n	278be <arm_mpu_init+0x72>
   278a0:	4914      	ldr	r1, [pc, #80]	; (278f4 <arm_mpu_init+0xa8>)
   278a2:	f240 1363 	movw	r3, #355	; 0x163
   278a6:	4a0c      	ldr	r2, [pc, #48]	; (278d8 <arm_mpu_init+0x8c>)
   278a8:	480d      	ldr	r0, [pc, #52]	; (278e0 <arm_mpu_init+0x94>)
   278aa:	f01a f99d 	bl	41be8 <printk>
   278ae:	4812      	ldr	r0, [pc, #72]	; (278f8 <arm_mpu_init+0xac>)
   278b0:	f01a f99a 	bl	41be8 <printk>
   278b4:	f240 1163 	movw	r1, #355	; 0x163
   278b8:	4807      	ldr	r0, [pc, #28]	; (278d8 <arm_mpu_init+0x8c>)
   278ba:	f01a fbaf 	bl	4201c <assert_post_action>
	return 0;
   278be:	2000      	movs	r0, #0
   278c0:	e7dc      	b.n	2787c <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   278c2:	6879      	ldr	r1, [r7, #4]
   278c4:	4620      	mov	r0, r4
   278c6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   278ca:	f7ff feb3 	bl	27634 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   278ce:	3401      	adds	r4, #1
   278d0:	e7db      	b.n	2788a <arm_mpu_init+0x3e>
   278d2:	bf00      	nop
   278d4:	00046dbc 	.word	0x00046dbc
   278d8:	00049e42 	.word	0x00049e42
   278dc:	0004edb2 	.word	0x0004edb2
   278e0:	0004825b 	.word	0x0004825b
   278e4:	00049e82 	.word	0x00049e82
   278e8:	e000ed90 	.word	0xe000ed90
   278ec:	0044ffaa 	.word	0x0044ffaa
   278f0:	2002ae85 	.word	0x2002ae85
   278f4:	00049eb6 	.word	0x00049eb6
   278f8:	00049f07 	.word	0x00049f07

000278fc <arm_core_mpu_configure_static_mpu_regions>:
{
   278fc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   278fe:	4c0d      	ldr	r4, [pc, #52]	; (27934 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   27900:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   27902:	7822      	ldrb	r2, [r4, #0]
   27904:	f7ff fece 	bl	276a4 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   27908:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2790a:	3016      	adds	r0, #22
   2790c:	d111      	bne.n	27932 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2790e:	f44f 7382 	mov.w	r3, #260	; 0x104
   27912:	4a09      	ldr	r2, [pc, #36]	; (27938 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   27914:	4909      	ldr	r1, [pc, #36]	; (2793c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   27916:	480a      	ldr	r0, [pc, #40]	; (27940 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   27918:	f01a f966 	bl	41be8 <printk>
   2791c:	4629      	mov	r1, r5
   2791e:	4809      	ldr	r0, [pc, #36]	; (27944 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   27920:	f01a f962 	bl	41be8 <printk>
}
   27924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   27928:	f44f 7182 	mov.w	r1, #260	; 0x104
   2792c:	4802      	ldr	r0, [pc, #8]	; (27938 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   2792e:	f01a bb75 	b.w	4201c <assert_post_action>
}
   27932:	bd38      	pop	{r3, r4, r5, pc}
   27934:	2002ae85 	.word	0x2002ae85
   27938:	00049e42 	.word	0x00049e42
   2793c:	0004edb2 	.word	0x0004edb2
   27940:	0004825b 	.word	0x0004825b
   27944:	00049de7 	.word	0x00049de7

00027948 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   27948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2794c:	4c2e      	ldr	r4, [pc, #184]	; (27a08 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   2794e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   27950:	4680      	mov	r8, r0
   27952:	2700      	movs	r7, #0
   27954:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   27956:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   2795a:	4d2c      	ldr	r5, [pc, #176]	; (27a0c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2795c:	454f      	cmp	r7, r9
   2795e:	db02      	blt.n	27966 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   27960:	b003      	add	sp, #12
   27962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   27966:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2796a:	9301      	str	r3, [sp, #4]
   2796c:	2b00      	cmp	r3, #0
   2796e:	d046      	beq.n	279fe <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   27970:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   27974:	4608      	mov	r0, r1
   27976:	9100      	str	r1, [sp, #0]
   27978:	f01b f9a9 	bl	42cce <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2797c:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   27980:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   27982:	1858      	adds	r0, r3, r1
   27984:	3801      	subs	r0, #1
   27986:	f01b f9a2 	bl	42cce <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   2798a:	4286      	cmp	r6, r0
   2798c:	4a20      	ldr	r2, [pc, #128]	; (27a10 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   2798e:	d018      	beq.n	279c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   27990:	2314      	movs	r3, #20
   27992:	435f      	muls	r7, r3
   27994:	f06f 0315 	mvn.w	r3, #21
   27998:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   2799c:	f44f 738a 	mov.w	r3, #276	; 0x114
   279a0:	4a1c      	ldr	r2, [pc, #112]	; (27a14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   279a2:	491d      	ldr	r1, [pc, #116]	; (27a18 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   279a4:	481d      	ldr	r0, [pc, #116]	; (27a1c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   279a6:	f01a f91f 	bl	41be8 <printk>
   279aa:	4649      	mov	r1, r9
   279ac:	481c      	ldr	r0, [pc, #112]	; (27a20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   279ae:	f01a f91b 	bl	41be8 <printk>
   279b2:	f44f 718a 	mov.w	r1, #276	; 0x114
   279b6:	4817      	ldr	r0, [pc, #92]	; (27a14 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   279b8:	b003      	add	sp, #12
   279ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   279be:	f01a bb2d 	b.w	4201c <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   279c2:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   279c6:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   279c8:	d0e8      	beq.n	2799c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   279ca:	7813      	ldrb	r3, [r2, #0]
   279cc:	42b3      	cmp	r3, r6
   279ce:	dde5      	ble.n	2799c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   279d0:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   279d4:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   279d6:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   279d8:	68e8      	ldr	r0, [r5, #12]
   279da:	7b19      	ldrb	r1, [r3, #12]
   279dc:	f360 0104 	bfi	r1, r0, #0, #5
   279e0:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   279e2:	6929      	ldr	r1, [r5, #16]
   279e4:	7b18      	ldrb	r0, [r3, #12]
   279e6:	0849      	lsrs	r1, r1, #1
   279e8:	f361 1047 	bfi	r0, r1, #5, #3
   279ec:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   279ee:	68eb      	ldr	r3, [r5, #12]
   279f0:	f023 031f 	bic.w	r3, r3, #31
   279f4:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   279f6:	692b      	ldr	r3, [r5, #16]
   279f8:	f023 031f 	bic.w	r3, r3, #31
   279fc:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   279fe:	3701      	adds	r7, #1
   27a00:	3414      	adds	r4, #20
   27a02:	f108 080c 	add.w	r8, r8, #12
   27a06:	e7a9      	b.n	2795c <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   27a08:	2002479c 	.word	0x2002479c
   27a0c:	e000ed90 	.word	0xe000ed90
   27a10:	2002ae85 	.word	0x2002ae85
   27a14:	00049e42 	.word	0x00049e42
   27a18:	0004edb2 	.word	0x0004edb2
   27a1c:	0004825b 	.word	0x0004825b
   27a20:	00049e13 	.word	0x00049e13

00027a24 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   27a24:	4b01      	ldr	r3, [pc, #4]	; (27a2c <__stdout_hook_install+0x8>)
   27a26:	6018      	str	r0, [r3, #0]
}
   27a28:	4770      	bx	lr
   27a2a:	bf00      	nop
   27a2c:	2002069c 	.word	0x2002069c

00027a30 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   27a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a32:	4606      	mov	r6, r0
   27a34:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   27a36:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   27a38:	4f06      	ldr	r7, [pc, #24]	; (27a54 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   27a3a:	42ac      	cmp	r4, r5
   27a3c:	da08      	bge.n	27a50 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   27a3e:	683b      	ldr	r3, [r7, #0]
   27a40:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   27a42:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   27a44:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   27a46:	f104 0401 	add.w	r4, r4, #1
   27a4a:	d001      	beq.n	27a50 <z_impl_zephyr_read_stdin+0x20>
   27a4c:	280d      	cmp	r0, #13
   27a4e:	d1f4      	bne.n	27a3a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   27a50:	4620      	mov	r0, r4
   27a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27a54:	20020698 	.word	0x20020698

00027a58 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   27a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27a5a:	460e      	mov	r6, r1
   27a5c:	4f09      	ldr	r7, [pc, #36]	; (27a84 <z_impl_zephyr_write_stdout+0x2c>)
   27a5e:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   27a60:	f1c0 0501 	rsb	r5, r0, #1
   27a64:	192b      	adds	r3, r5, r4
   27a66:	429e      	cmp	r6, r3
   27a68:	dc01      	bgt.n	27a6e <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   27a6a:	4630      	mov	r0, r6
   27a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   27a6e:	7863      	ldrb	r3, [r4, #1]
   27a70:	2b0a      	cmp	r3, #10
   27a72:	d102      	bne.n	27a7a <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   27a74:	683b      	ldr	r3, [r7, #0]
   27a76:	200d      	movs	r0, #13
   27a78:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   27a7a:	683b      	ldr	r3, [r7, #0]
   27a7c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   27a80:	4798      	blx	r3
   27a82:	e7ef      	b.n	27a64 <z_impl_zephyr_write_stdout+0xc>
   27a84:	2002069c 	.word	0x2002069c

00027a88 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   27a88:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   27a8a:	2105      	movs	r1, #5
   27a8c:	4801      	ldr	r0, [pc, #4]	; (27a94 <_exit+0xc>)
   27a8e:	f7ff ffe3 	bl	27a58 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   27a92:	e7fe      	b.n	27a92 <_exit+0xa>
   27a94:	00049f94 	.word	0x00049f94

00027a98 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   27a98:	b538      	push	{r3, r4, r5, lr}
   27a9a:	4605      	mov	r5, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   27a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27aa4:	480b      	ldr	r0, [pc, #44]	; (27ad4 <_sbrk+0x3c>)
   27aa6:	f01a f912 	bl	41cce <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   27aaa:	4a0b      	ldr	r2, [pc, #44]	; (27ad8 <_sbrk+0x40>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   27aac:	490b      	ldr	r1, [pc, #44]	; (27adc <_sbrk+0x44>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   27aae:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   27ab0:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   27ab4:	4425      	add	r5, r4
   27ab6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   27aba:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   27abc:	bf2c      	ite	cs
   27abe:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   27ac2:	1864      	addcc	r4, r4, r1
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   27ac4:	4803      	ldr	r0, [pc, #12]	; (27ad4 <_sbrk+0x3c>)
		heap_sz += count;
   27ac6:	bf38      	it	cc
   27ac8:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   27aca:	f01a f8fb 	bl	41cc4 <sys_sem_give>

	return ret;
}
   27ace:	4620      	mov	r0, r4
   27ad0:	bd38      	pop	{r3, r4, r5, pc}
   27ad2:	bf00      	nop
   27ad4:	20020c00 	.word	0x20020c00
   27ad8:	200247b0 	.word	0x200247b0
   27adc:	20032518 	.word	0x20032518

00027ae0 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   27ae0:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   27ae2:	211d      	movs	r1, #29
   27ae4:	4804      	ldr	r0, [pc, #16]	; (27af8 <__chk_fail+0x18>)
   27ae6:	f7ff ffb7 	bl	27a58 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   27aea:	4040      	eors	r0, r0
   27aec:	f380 8811 	msr	BASEPRI, r0
   27af0:	f04f 0003 	mov.w	r0, #3
   27af4:	df02      	svc	2
	CODE_UNREACHABLE;
   27af6:	bf00      	nop
   27af8:	00049f9a 	.word	0x00049f9a

00027afc <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   27afc:	b538      	push	{r3, r4, r5, lr}
   27afe:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   27b00:	4604      	mov	r4, r0
   27b02:	b970      	cbnz	r0, 27b22 <net_if_flag_is_set+0x26>
   27b04:	490b      	ldr	r1, [pc, #44]	; (27b34 <net_if_flag_is_set+0x38>)
   27b06:	f240 2312 	movw	r3, #530	; 0x212
   27b0a:	4a0b      	ldr	r2, [pc, #44]	; (27b38 <net_if_flag_is_set+0x3c>)
   27b0c:	480b      	ldr	r0, [pc, #44]	; (27b3c <net_if_flag_is_set+0x40>)
   27b0e:	f01a f86b 	bl	41be8 <printk>
   27b12:	480b      	ldr	r0, [pc, #44]	; (27b40 <net_if_flag_is_set+0x44>)
   27b14:	f01a f868 	bl	41be8 <printk>
   27b18:	f240 2112 	movw	r1, #530	; 0x212
   27b1c:	4806      	ldr	r0, [pc, #24]	; (27b38 <net_if_flag_is_set+0x3c>)
   27b1e:	f01a fa7d 	bl	4201c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27b22:	6823      	ldr	r3, [r4, #0]
   27b24:	330c      	adds	r3, #12
   27b26:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   27b2a:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   27b2c:	f000 0001 	and.w	r0, r0, #1
   27b30:	bd38      	pop	{r3, r4, r5, pc}
   27b32:	bf00      	nop
   27b34:	00049ff7 	.word	0x00049ff7
   27b38:	00049fcf 	.word	0x00049fcf
   27b3c:	0004825b 	.word	0x0004825b
   27b40:	00049477 	.word	0x00049477

00027b44 <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
   27b44:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   27b46:	4604      	mov	r4, r0
   27b48:	b970      	cbnz	r0, 27b68 <net_if_flag_set.constprop.24+0x24>
   27b4a:	490d      	ldr	r1, [pc, #52]	; (27b80 <net_if_flag_set.constprop.24+0x3c>)
   27b4c:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   27b50:	4a0c      	ldr	r2, [pc, #48]	; (27b84 <net_if_flag_set.constprop.24+0x40>)
   27b52:	480d      	ldr	r0, [pc, #52]	; (27b88 <net_if_flag_set.constprop.24+0x44>)
   27b54:	f01a f848 	bl	41be8 <printk>
   27b58:	480c      	ldr	r0, [pc, #48]	; (27b8c <net_if_flag_set.constprop.24+0x48>)
   27b5a:	f01a f845 	bl	41be8 <printk>
   27b5e:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   27b62:	4808      	ldr	r0, [pc, #32]	; (27b84 <net_if_flag_set.constprop.24+0x40>)
   27b64:	f01a fa5a 	bl	4201c <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27b68:	6823      	ldr	r3, [r4, #0]
   27b6a:	330c      	adds	r3, #12
   27b6c:	e8d3 2fef 	ldaex	r2, [r3]
   27b70:	f042 0201 	orr.w	r2, r2, #1
   27b74:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27b78:	2900      	cmp	r1, #0
   27b7a:	d1f7      	bne.n	27b6c <net_if_flag_set.constprop.24+0x28>
}
   27b7c:	bd10      	pop	{r4, pc}
   27b7e:	bf00      	nop
   27b80:	00049ff7 	.word	0x00049ff7
   27b84:	00049fcf 	.word	0x00049fcf
   27b88:	0004825b 	.word	0x0004825b
   27b8c:	00049477 	.word	0x00049477

00027b90 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   27b90:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27b92:	2100      	movs	r1, #0
{
   27b94:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   27b96:	f7ff ffb1 	bl	27afc <net_if_flag_is_set>
   27b9a:	b928      	cbnz	r0, 27ba8 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   27b9c:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   27b9e:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   27ba0:	7e9b      	ldrb	r3, [r3, #26]
   27ba2:	b11b      	cbz	r3, 27bac <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   27ba4:	f7ff ffce 	bl	27b44 <net_if_flag_set.constprop.24>
		return 0;
   27ba8:	2000      	movs	r0, #0
   27baa:	e023      	b.n	27bf4 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27bac:	f01b f8be 	bl	42d2c <net_if_l2>
   27bb0:	b9c0      	cbnz	r0, 27be4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   27bb2:	682b      	ldr	r3, [r5, #0]
   27bb4:	691b      	ldr	r3, [r3, #16]
   27bb6:	b973      	cbnz	r3, 27bd6 <net_if_up+0x46>
   27bb8:	490f      	ldr	r1, [pc, #60]	; (27bf8 <net_if_up+0x68>)
   27bba:	f640 53fd 	movw	r3, #3581	; 0xdfd
   27bbe:	4a0f      	ldr	r2, [pc, #60]	; (27bfc <net_if_up+0x6c>)
   27bc0:	480f      	ldr	r0, [pc, #60]	; (27c00 <net_if_up+0x70>)
   27bc2:	f01a f811 	bl	41be8 <printk>
   27bc6:	480f      	ldr	r0, [pc, #60]	; (27c04 <net_if_up+0x74>)
   27bc8:	f01a f80e 	bl	41be8 <printk>
   27bcc:	f640 51fd 	movw	r1, #3581	; 0xdfd
   27bd0:	480a      	ldr	r0, [pc, #40]	; (27bfc <net_if_up+0x6c>)
   27bd2:	f01a fa23 	bl	4201c <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   27bd6:	4628      	mov	r0, r5
   27bd8:	f7ff ffb4 	bl	27b44 <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   27bdc:	4628      	mov	r0, r5
   27bde:	f01b f8aa 	bl	42d36 <l2_flags_get>
   27be2:	e7e1      	b.n	27ba8 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   27be4:	6883      	ldr	r3, [r0, #8]
   27be6:	2b00      	cmp	r3, #0
   27be8:	d0e3      	beq.n	27bb2 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   27bea:	2101      	movs	r1, #1
   27bec:	4628      	mov	r0, r5
   27bee:	4798      	blx	r3
	if (status < 0) {
   27bf0:	2800      	cmp	r0, #0
   27bf2:	dade      	bge.n	27bb2 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   27bf4:	bd38      	pop	{r3, r4, r5, pc}
   27bf6:	bf00      	nop
   27bf8:	0004a017 	.word	0x0004a017
   27bfc:	0004a048 	.word	0x0004a048
   27c00:	0004825b 	.word	0x0004825b
   27c04:	00049477 	.word	0x00049477

00027c08 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   27c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27c0c:	4e12      	ldr	r6, [pc, #72]	; (27c58 <net_if_init+0x50>)
   27c0e:	4c13      	ldr	r4, [pc, #76]	; (27c5c <net_if_init+0x54>)
   27c10:	46b0      	mov	r8, r6
   27c12:	4f13      	ldr	r7, [pc, #76]	; (27c60 <net_if_init+0x58>)
   27c14:	42b4      	cmp	r4, r6
   27c16:	4625      	mov	r5, r4
   27c18:	d90e      	bls.n	27c38 <net_if_init+0x30>
   27c1a:	4912      	ldr	r1, [pc, #72]	; (27c64 <net_if_init+0x5c>)
   27c1c:	f640 63dc 	movw	r3, #3804	; 0xedc
   27c20:	463a      	mov	r2, r7
   27c22:	4811      	ldr	r0, [pc, #68]	; (27c68 <net_if_init+0x60>)
   27c24:	f019 ffe0 	bl	41be8 <printk>
   27c28:	4810      	ldr	r0, [pc, #64]	; (27c6c <net_if_init+0x64>)
   27c2a:	f019 ffdd 	bl	41be8 <printk>
   27c2e:	f640 61dc 	movw	r1, #3804	; 0xedc
   27c32:	4638      	mov	r0, r7
   27c34:	f01a f9f2 	bl	4201c <assert_post_action>
   27c38:	4544      	cmp	r4, r8
   27c3a:	d301      	bcc.n	27c40 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   27c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   27c40:	682b      	ldr	r3, [r5, #0]
   27c42:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   27c44:	681b      	ldr	r3, [r3, #0]
   27c46:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   27c48:	2b00      	cmp	r3, #0
   27c4a:	d0e3      	beq.n	27c14 <net_if_init+0xc>
   27c4c:	681b      	ldr	r3, [r3, #0]
   27c4e:	2b00      	cmp	r3, #0
   27c50:	d0e0      	beq.n	27c14 <net_if_init+0xc>
	api->init(iface);
   27c52:	4628      	mov	r0, r5
   27c54:	4798      	blx	r3
		if_count++;
   27c56:	e7dd      	b.n	27c14 <net_if_init+0xc>
   27c58:	20020c64 	.word	0x20020c64
   27c5c:	20020c60 	.word	0x20020c60
   27c60:	0004a048 	.word	0x0004a048
   27c64:	00049ffd 	.word	0x00049ffd
   27c68:	0004825b 	.word	0x0004825b
   27c6c:	000494f5 	.word	0x000494f5

00027c70 <net_if_post_init>:

void net_if_post_init(void)
{
   27c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27c72:	4d11      	ldr	r5, [pc, #68]	; (27cb8 <net_if_post_init+0x48>)
   27c74:	4c11      	ldr	r4, [pc, #68]	; (27cbc <net_if_post_init+0x4c>)
   27c76:	462f      	mov	r7, r5
   27c78:	4e11      	ldr	r6, [pc, #68]	; (27cc0 <net_if_post_init+0x50>)
   27c7a:	42ac      	cmp	r4, r5
   27c7c:	d90e      	bls.n	27c9c <net_if_post_init+0x2c>
   27c7e:	4911      	ldr	r1, [pc, #68]	; (27cc4 <net_if_post_init+0x54>)
   27c80:	f640 730b 	movw	r3, #3851	; 0xf0b
   27c84:	4632      	mov	r2, r6
   27c86:	4810      	ldr	r0, [pc, #64]	; (27cc8 <net_if_post_init+0x58>)
   27c88:	f019 ffae 	bl	41be8 <printk>
   27c8c:	480f      	ldr	r0, [pc, #60]	; (27ccc <net_if_post_init+0x5c>)
   27c8e:	f019 ffab 	bl	41be8 <printk>
   27c92:	f640 710b 	movw	r1, #3851	; 0xf0b
   27c96:	4630      	mov	r0, r6
   27c98:	f01a f9c0 	bl	4201c <assert_post_action>
   27c9c:	42bc      	cmp	r4, r7
   27c9e:	d300      	bcc.n	27ca2 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   27ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   27ca2:	2103      	movs	r1, #3
   27ca4:	4620      	mov	r0, r4
   27ca6:	f7ff ff29 	bl	27afc <net_if_flag_is_set>
   27caa:	b910      	cbnz	r0, 27cb2 <net_if_post_init+0x42>
			net_if_up(iface);
   27cac:	4620      	mov	r0, r4
   27cae:	f7ff ff6f 	bl	27b90 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27cb2:	3404      	adds	r4, #4
   27cb4:	e7e1      	b.n	27c7a <net_if_post_init+0xa>
   27cb6:	bf00      	nop
   27cb8:	20020c64 	.word	0x20020c64
   27cbc:	20020c60 	.word	0x20020c60
   27cc0:	0004a048 	.word	0x0004a048
   27cc4:	00049ffd 	.word	0x00049ffd
   27cc8:	0004825b 	.word	0x0004825b
   27ccc:	000494f5 	.word	0x000494f5

00027cd0 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   27cd0:	2300      	movs	r3, #0
{
   27cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   27cd6:	2802      	cmp	r0, #2
{
   27cd8:	b089      	sub	sp, #36	; 0x24
   27cda:	4681      	mov	r9, r0
   27cdc:	468a      	mov	sl, r1
   27cde:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   27ce0:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   27ce4:	d13c      	bne.n	27d60 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   27ce6:	aa06      	add	r2, sp, #24
   27ce8:	4610      	mov	r0, r2
   27cea:	9104      	str	r1, [sp, #16]
{
   27cec:	4619      	mov	r1, r3
   27cee:	e006      	b.n	27cfe <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   27cf0:	7804      	ldrb	r4, [r0, #0]
   27cf2:	3101      	adds	r1, #1
   27cf4:	3401      	adds	r4, #1
   27cf6:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   27cf8:	b2cc      	uxtb	r4, r1
   27cfa:	2c07      	cmp	r4, #7
   27cfc:	d803      	bhi.n	27d06 <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   27cfe:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   27d02:	2c00      	cmp	r4, #0
   27d04:	d0f4      	beq.n	27cf0 <z_impl_net_addr_ntop+0x20>
   27d06:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   27d08:	2b08      	cmp	r3, #8
   27d0a:	f100 0001 	add.w	r0, r0, #1
   27d0e:	d1ed      	bne.n	27cec <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   27d10:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   27d14:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   27d16:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   27d18:	f812 1b01 	ldrb.w	r1, [r2], #1
   27d1c:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   27d1e:	bf88      	it	hi
   27d20:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   27d22:	f103 0301 	add.w	r3, r3, #1
   27d26:	b2db      	uxtb	r3, r3
				pos = i;
   27d28:	bf88      	it	hi
   27d2a:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   27d2c:	2b08      	cmp	r3, #8
   27d2e:	d1f3      	bne.n	27d18 <z_impl_net_addr_ntop+0x48>
		len = 8;
   27d30:	9303      	str	r3, [sp, #12]
   27d32:	2f01      	cmp	r7, #1
   27d34:	f04f 033a 	mov.w	r3, #58	; 0x3a
   27d38:	bf08      	it	eq
   27d3a:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   27d3e:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   27d40:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   27d42:	4644      	mov	r4, r8
   27d44:	4615      	mov	r5, r2
   27d46:	9b03      	ldr	r3, [sp, #12]
   27d48:	429d      	cmp	r5, r3
   27d4a:	db19      	blt.n	27d80 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   27d4c:	4544      	cmp	r4, r8
   27d4e:	d009      	beq.n	27d64 <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   27d50:	2300      	movs	r3, #0
   27d52:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   27d56:	bf0c      	ite	eq
   27d58:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   27d5c:	7023      	strbne	r3, [r4, #0]
   27d5e:	e003      	b.n	27d68 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   27d60:	2801      	cmp	r0, #1
   27d62:	d005      	beq.n	27d70 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   27d64:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   27d68:	4640      	mov	r0, r8
   27d6a:	b009      	add	sp, #36	; 0x24
   27d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   27d70:	232e      	movs	r3, #46	; 0x2e
   27d72:	2204      	movs	r2, #4
	int8_t pos = -1;
   27d74:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   27d78:	e9cd 3202 	strd	r3, r2, [sp, #8]
	uint8_t i, bl, bh, longest = 1U;
   27d7c:	4607      	mov	r7, r0
   27d7e:	e7df      	b.n	27d40 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   27d80:	9b03      	ldr	r3, [sp, #12]
   27d82:	2b04      	cmp	r3, #4
   27d84:	d134      	bne.n	27df0 <z_impl_net_addr_ntop+0x120>
			value = (uint32_t)addr->s4_addr[i];
   27d86:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   27d8a:	b949      	cbnz	r1, 27da0 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   27d8c:	2330      	movs	r3, #48	; 0x30
   27d8e:	4620      	mov	r0, r4
   27d90:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   27d94:	9b02      	ldr	r3, [sp, #8]
   27d96:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   27d98:	3501      	adds	r5, #1
   27d9a:	b2ed      	uxtb	r5, r5
   27d9c:	4604      	mov	r4, r0
   27d9e:	e7d2      	b.n	27d46 <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   27da0:	2009      	movs	r0, #9
   27da2:	f04f 0b00 	mov.w	fp, #0
   27da6:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 27e80 <z_impl_net_addr_ntop+0x1b0>
   27daa:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   27dac:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   27db0:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   27db4:	4583      	cmp	fp, r0
		value = value % divisor;
   27db6:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   27db8:	dc01      	bgt.n	27dbe <z_impl_net_addr_ntop+0xee>
   27dba:	4561      	cmp	r1, ip
   27dbc:	d306      	bcc.n	27dcc <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   27dbe:	4683      	mov	fp, r0
   27dc0:	9b01      	ldr	r3, [sp, #4]
   27dc2:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   27dc6:	f803 eb01 	strb.w	lr, [r3], #1
   27dca:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   27dcc:	230a      	movs	r3, #10
   27dce:	3801      	subs	r0, #1
   27dd0:	fbbc fcf3 	udiv	ip, ip, r3
   27dd4:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   27dd6:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   27dd8:	d1e8      	bne.n	27dac <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   27dda:	f04f 0300 	mov.w	r3, #0
   27dde:	9901      	ldr	r1, [sp, #4]
   27de0:	700b      	strb	r3, [r1, #0]
	return buf - start;
   27de2:	1b0b      	subs	r3, r1, r4
			ptr += l;
   27de4:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   27de6:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   27de8:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   27dea:	3001      	adds	r0, #1
   27dec:	54e1      	strb	r1, [r4, r3]
			continue;
   27dee:	e7d3      	b.n	27d98 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   27df0:	42ae      	cmp	r6, r5
   27df2:	d10d      	bne.n	27e10 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   27df4:	b902      	cbnz	r2, 27df8 <z_impl_net_addr_ntop+0x128>
   27df6:	b916      	cbnz	r6, 27dfe <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   27df8:	233a      	movs	r3, #58	; 0x3a
   27dfa:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   27dfe:	233a      	movs	r3, #58	; 0x3a
   27e00:	4620      	mov	r0, r4
   27e02:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   27e06:	1e7b      	subs	r3, r7, #1
   27e08:	441d      	add	r5, r3
   27e0a:	b2ed      	uxtb	r5, r5
			needcolon = false;
   27e0c:	2200      	movs	r2, #0
			continue;
   27e0e:	e7c3      	b.n	27d98 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   27e10:	b112      	cbz	r2, 27e18 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   27e12:	233a      	movs	r3, #58	; 0x3a
   27e14:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   27e18:	9b04      	ldr	r3, [sp, #16]
   27e1a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   27e1e:	021a      	lsls	r2, r3, #8
   27e20:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   27e24:	b212      	sxth	r2, r2
		bh = value >> 8;
   27e26:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   27e2a:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   27e2e:	b1b3      	cbz	r3, 27e5e <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   27e30:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   27e32:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   27e34:	d90b      	bls.n	27e4e <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   27e36:	2300      	movs	r3, #0
   27e38:	2261      	movs	r2, #97	; 0x61
   27e3a:	4620      	mov	r0, r4
   27e3c:	f01a ff88 	bl	42d50 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   27e40:	2301      	movs	r3, #1
   27e42:	2261      	movs	r2, #97	; 0x61
   27e44:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   27e46:	f01a ff83 	bl	42d50 <net_byte_to_hex>
		needcolon = true;
   27e4a:	2201      	movs	r2, #1
   27e4c:	e7a4      	b.n	27d98 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   27e4e:	b25b      	sxtb	r3, r3
   27e50:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   27e52:	bf94      	ite	ls
   27e54:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   27e56:	3357      	addhi	r3, #87	; 0x57
   27e58:	1c60      	adds	r0, r4, #1
   27e5a:	7023      	strb	r3, [r4, #0]
   27e5c:	e7f0      	b.n	27e40 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   27e5e:	f1bb 0f0f 	cmp.w	fp, #15
   27e62:	d903      	bls.n	27e6c <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   27e64:	2261      	movs	r2, #97	; 0x61
   27e66:	4659      	mov	r1, fp
   27e68:	4620      	mov	r0, r4
   27e6a:	e7ec      	b.n	27e46 <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   27e6c:	b252      	sxtb	r2, r2
   27e6e:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   27e72:	bf94      	ite	ls
   27e74:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   27e76:	3257      	addhi	r2, #87	; 0x57
   27e78:	1c60      	adds	r0, r4, #1
   27e7a:	7022      	strb	r2, [r4, #0]
   27e7c:	e7e5      	b.n	27e4a <z_impl_net_addr_ntop+0x17a>
   27e7e:	bf00      	nop
   27e80:	3b9aca00 	.word	0x3b9aca00

00027e84 <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   27e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27e88:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   27e8a:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27e8e:	4b3b      	ldr	r3, [pc, #236]	; (27f7c <connect_request_encode+0xf8>)
   27e90:	4a3b      	ldr	r2, [pc, #236]	; (27f80 <connect_request_encode+0xfc>)
{
   27e92:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   27e94:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27e98:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27e9a:	2804      	cmp	r0, #4
   27e9c:	bf0c      	ite	eq
   27e9e:	4610      	moveq	r0, r2
   27ea0:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   27ea2:	600f      	str	r7, [r1, #0]
{
   27ea4:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   27ea6:	f01b f837 	bl	42f18 <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   27eaa:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   27eae:	4603      	mov	r3, r0
   27eb0:	b938      	cbnz	r0, 27ec2 <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27eb2:	e9d4 2000 	ldrd	r2, r0, [r4]
   27eb6:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   27eb8:	f896 107a 	ldrb.w	r1, [r6, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27ebc:	d104      	bne.n	27ec8 <connect_request_encode+0x44>
		return -ENOMEM;
   27ebe:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   27ec2:	4618      	mov	r0, r3
   27ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   27ec8:	1c50      	adds	r0, r2, #1
   27eca:	6020      	str	r0, [r4, #0]
   27ecc:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   27ece:	e9d4 8200 	ldrd	r8, r2, [r4]
   27ed2:	4590      	cmp	r8, r2
   27ed4:	d0f3      	beq.n	27ebe <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   27ed6:	f108 0201 	add.w	r2, r8, #1
   27eda:	6022      	str	r2, [r4, #0]
   27edc:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   27ee0:	4621      	mov	r1, r4
   27ee2:	f8b6 0078 	ldrh.w	r0, [r6, #120]	; 0x78
   27ee6:	f01b f805 	bl	42ef4 <pack_uint16>
	if (err_code != 0) {
   27eea:	4603      	mov	r3, r0
   27eec:	2800      	cmp	r0, #0
   27eee:	d1e8      	bne.n	27ec2 <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   27ef0:	f106 0048 	add.w	r0, r6, #72	; 0x48
   27ef4:	f01b f810 	bl	42f18 <pack_utf8_str>
	if (err_code != 0) {
   27ef8:	4603      	mov	r3, r0
   27efa:	2800      	cmp	r0, #0
   27efc:	d1e1      	bne.n	27ec2 <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   27efe:	6df0      	ldr	r0, [r6, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   27f00:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   27f02:	b1d8      	cbz	r0, 27f3c <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   27f04:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   27f08:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   27f0c:	f003 0301 	and.w	r3, r3, #1
   27f10:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   27f14:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   27f16:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   27f18:	00db      	lsls	r3, r3, #3
   27f1a:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   27f1e:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   27f20:	f01a fffa 	bl	42f18 <pack_utf8_str>
		if (err_code != 0) {
   27f24:	4603      	mov	r3, r0
   27f26:	2800      	cmp	r0, #0
   27f28:	d1cb      	bne.n	27ec2 <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   27f2a:	6e33      	ldr	r3, [r6, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   27f2c:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   27f2e:	b313      	cbz	r3, 27f76 <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   27f30:	4618      	mov	r0, r3
   27f32:	f01a fff1 	bl	42f18 <pack_utf8_str>
			if (err_code != 0) {
   27f36:	4603      	mov	r3, r0
   27f38:	2800      	cmp	r0, #0
   27f3a:	d1c2      	bne.n	27ec2 <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   27f3c:	6d70      	ldr	r0, [r6, #84]	; 0x54
   27f3e:	b138      	cbz	r0, 27f50 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   27f40:	4621      	mov	r1, r4
   27f42:	f01a ffe9 	bl	42f18 <pack_utf8_str>
		if (err_code != 0) {
   27f46:	4603      	mov	r3, r0
   27f48:	2800      	cmp	r0, #0
   27f4a:	d1ba      	bne.n	27ec2 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   27f4c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   27f50:	6db0      	ldr	r0, [r6, #88]	; 0x58
   27f52:	b138      	cbz	r0, 27f64 <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   27f54:	4621      	mov	r1, r4
   27f56:	f01a ffdf 	bl	42f18 <pack_utf8_str>
		if (err_code != 0) {
   27f5a:	4603      	mov	r3, r0
   27f5c:	2800      	cmp	r0, #0
   27f5e:	d1b0      	bne.n	27ec2 <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   27f60:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   27f64:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   27f68:	4622      	mov	r2, r4
   27f6a:	4639      	mov	r1, r7
}
   27f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   27f70:	2010      	movs	r0, #16
   27f72:	f01a bfec 	b.w	42f4e <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   27f76:	f01a ffbd 	bl	42ef4 <pack_uint16>
   27f7a:	e7dc      	b.n	27f36 <connect_request_encode+0xb2>
   27f7c:	00046de4 	.word	0x00046de4
   27f80:	00046dec 	.word	0x00046dec

00027f84 <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   27f84:	e9d0 2300 	ldrd	r2, r3, [r0]
   27f88:	1a9b      	subs	r3, r3, r2
   27f8a:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27f8c:	bf81      	itttt	hi
   27f8e:	4b05      	ldrhi	r3, [pc, #20]	; (27fa4 <disconnect_encode+0x20>)
   27f90:	881b      	ldrhhi	r3, [r3, #0]
   27f92:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   27f94:	6803      	ldrhi	r3, [r0, #0]
   27f96:	bf83      	ittte	hi
   27f98:	3302      	addhi	r3, #2
   27f9a:	6043      	strhi	r3, [r0, #4]

	return 0;
   27f9c:	2000      	movhi	r0, #0
		return -ENOMEM;
   27f9e:	f06f 000b 	mvnls.w	r0, #11
}
   27fa2:	4770      	bx	lr
   27fa4:	0004a072 	.word	0x0004a072

00027fa8 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   27fa8:	e9d0 2300 	ldrd	r2, r3, [r0]
   27fac:	1a9b      	subs	r3, r3, r2
   27fae:	2b01      	cmp	r3, #1
   27fb0:	bf81      	itttt	hi
   27fb2:	4b05      	ldrhi	r3, [pc, #20]	; (27fc8 <ping_request_encode+0x20>)
   27fb4:	881b      	ldrhhi	r3, [r3, #0]
   27fb6:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   27fb8:	6803      	ldrhi	r3, [r0, #0]
   27fba:	bf83      	ittte	hi
   27fbc:	3302      	addhi	r3, #2
   27fbe:	6043      	strhi	r3, [r0, #4]

	return 0;
   27fc0:	2000      	movhi	r0, #0
		return -ENOMEM;
   27fc2:	f06f 000b 	mvnls.w	r0, #11
}
   27fc6:	4770      	bx	lr
   27fc8:	0004a074 	.word	0x0004a074

00027fcc <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   27fcc:	2314      	movs	r3, #20
   27fce:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   27fd2:	4353      	muls	r3, r2
   27fd4:	4a01      	ldr	r2, [pc, #4]	; (27fdc <mqtt_transport_connect+0x10>)
   27fd6:	58d3      	ldr	r3, [r2, r3]
   27fd8:	4718      	bx	r3
   27fda:	bf00      	nop
   27fdc:	00046df4 	.word	0x00046df4

00027fe0 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   27fe0:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   27fe2:	2514      	movs	r5, #20
   27fe4:	4c03      	ldr	r4, [pc, #12]	; (27ff4 <mqtt_transport_write+0x14>)
   27fe6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27fea:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   27fee:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   27ff0:	685b      	ldr	r3, [r3, #4]
   27ff2:	4718      	bx	r3
   27ff4:	00046df4 	.word	0x00046df4

00027ff8 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   27ff8:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   27ffa:	2414      	movs	r4, #20
   27ffc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   28000:	4a03      	ldr	r2, [pc, #12]	; (28010 <mqtt_transport_write_msg+0x18>)
   28002:	fb04 2303 	mla	r3, r4, r3, r2
}
   28006:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   2800a:	689b      	ldr	r3, [r3, #8]
   2800c:	4718      	bx	r3
   2800e:	bf00      	nop
   28010:	00046df4 	.word	0x00046df4

00028014 <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   28014:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   28016:	2614      	movs	r6, #20
   28018:	4d04      	ldr	r5, [pc, #16]	; (2802c <mqtt_transport_read+0x18>)
   2801a:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   2801e:	fb06 5404 	mla	r4, r6, r4, r5
   28022:	68e4      	ldr	r4, [r4, #12]
   28024:	46a4      	mov	ip, r4
							 shall_block);
}
   28026:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   28028:	4760      	bx	ip
   2802a:	bf00      	nop
   2802c:	00046df4 	.word	0x00046df4

00028030 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   28030:	2114      	movs	r1, #20
   28032:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   28036:	4a02      	ldr	r2, [pc, #8]	; (28040 <mqtt_transport_disconnect+0x10>)
   28038:	fb01 2303 	mla	r3, r1, r3, r2
   2803c:	691b      	ldr	r3, [r3, #16]
   2803e:	4718      	bx	r3
   28040:	00046df4 	.word	0x00046df4

00028044 <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   28044:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   28046:	b510      	push	{r4, lr}
   28048:	b142      	cbz	r2, 2805c <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   2804a:	4b0f      	ldr	r3, [pc, #60]	; (28088 <mqtt_mutex_unlock+0x44>)
   2804c:	6882      	ldr	r2, [r0, #8]
   2804e:	689b      	ldr	r3, [r3, #8]
   28050:	429a      	cmp	r2, r3
   28052:	d115      	bne.n	28080 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   28054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   28058:	f014 bdc2 	b.w	3cbe0 <z_impl_k_mutex_unlock>
		return -EINVAL;
   2805c:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   28060:	2343      	movs	r3, #67	; 0x43
   28062:	4a0a      	ldr	r2, [pc, #40]	; (2808c <mqtt_mutex_unlock+0x48>)
   28064:	490a      	ldr	r1, [pc, #40]	; (28090 <mqtt_mutex_unlock+0x4c>)
   28066:	480b      	ldr	r0, [pc, #44]	; (28094 <mqtt_mutex_unlock+0x50>)
   28068:	f019 fdbe 	bl	41be8 <printk>
   2806c:	4621      	mov	r1, r4
   2806e:	480a      	ldr	r0, [pc, #40]	; (28098 <mqtt_mutex_unlock+0x54>)
   28070:	f019 fdba 	bl	41be8 <printk>
}
   28074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   28078:	2143      	movs	r1, #67	; 0x43
   2807a:	4804      	ldr	r0, [pc, #16]	; (2808c <mqtt_mutex_unlock+0x48>)
   2807c:	f019 bfce 	b.w	4201c <assert_post_action>
		return -EPERM;
   28080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   28084:	e7ec      	b.n	28060 <mqtt_mutex_unlock+0x1c>
   28086:	bf00      	nop
   28088:	20025af0 	.word	0x20025af0
   2808c:	0004a0a2 	.word	0x0004a0a2
   28090:	0004a0d3 	.word	0x0004a0d3
   28094:	0004825b 	.word	0x0004825b
   28098:	0004a0dc 	.word	0x0004a0dc

0002809c <mqtt_mutex_lock>:
{
   2809c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2809e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   280a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   280a6:	f014 fc9d 	bl	3c9e4 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   280aa:	4604      	mov	r4, r0
   280ac:	b178      	cbz	r0, 280ce <mqtt_mutex_lock+0x32>
   280ae:	2339      	movs	r3, #57	; 0x39
   280b0:	4a07      	ldr	r2, [pc, #28]	; (280d0 <mqtt_mutex_lock+0x34>)
   280b2:	4908      	ldr	r1, [pc, #32]	; (280d4 <mqtt_mutex_lock+0x38>)
   280b4:	4808      	ldr	r0, [pc, #32]	; (280d8 <mqtt_mutex_lock+0x3c>)
   280b6:	f019 fd97 	bl	41be8 <printk>
   280ba:	4621      	mov	r1, r4
   280bc:	4807      	ldr	r0, [pc, #28]	; (280dc <mqtt_mutex_lock+0x40>)
   280be:	f019 fd93 	bl	41be8 <printk>
}
   280c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   280c6:	2139      	movs	r1, #57	; 0x39
   280c8:	4801      	ldr	r0, [pc, #4]	; (280d0 <mqtt_mutex_lock+0x34>)
   280ca:	f019 bfa7 	b.w	4201c <assert_post_action>
}
   280ce:	bd10      	pop	{r4, pc}
   280d0:	0004a0a2 	.word	0x0004a0a2
   280d4:	0004a0d3 	.word	0x0004a0d3
   280d8:	0004825b 	.word	0x0004825b
   280dc:	0004a082 	.word	0x0004a082

000280e0 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   280e0:	b570      	push	{r4, r5, r6, lr}
   280e2:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   280e4:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   280e6:	460d      	mov	r5, r1
   280e8:	b961      	cbnz	r1, 28104 <gpio_nrfx_manage_callback+0x24>
   280ea:	4922      	ldr	r1, [pc, #136]	; (28174 <gpio_nrfx_manage_callback+0x94>)
   280ec:	2324      	movs	r3, #36	; 0x24
   280ee:	4a22      	ldr	r2, [pc, #136]	; (28178 <gpio_nrfx_manage_callback+0x98>)
   280f0:	4822      	ldr	r0, [pc, #136]	; (2817c <gpio_nrfx_manage_callback+0x9c>)
   280f2:	f019 fd79 	bl	41be8 <printk>
   280f6:	4822      	ldr	r0, [pc, #136]	; (28180 <gpio_nrfx_manage_callback+0xa0>)
   280f8:	f019 fd76 	bl	41be8 <printk>
   280fc:	2124      	movs	r1, #36	; 0x24
   280fe:	481e      	ldr	r0, [pc, #120]	; (28178 <gpio_nrfx_manage_callback+0x98>)
   28100:	f019 ff8c 	bl	4201c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   28104:	686b      	ldr	r3, [r5, #4]
   28106:	b963      	cbnz	r3, 28122 <gpio_nrfx_manage_callback+0x42>
   28108:	491e      	ldr	r1, [pc, #120]	; (28184 <gpio_nrfx_manage_callback+0xa4>)
   2810a:	2325      	movs	r3, #37	; 0x25
   2810c:	4a1a      	ldr	r2, [pc, #104]	; (28178 <gpio_nrfx_manage_callback+0x98>)
   2810e:	481b      	ldr	r0, [pc, #108]	; (2817c <gpio_nrfx_manage_callback+0x9c>)
   28110:	f019 fd6a 	bl	41be8 <printk>
   28114:	481c      	ldr	r0, [pc, #112]	; (28188 <gpio_nrfx_manage_callback+0xa8>)
   28116:	f019 fd67 	bl	41be8 <printk>
   2811a:	2125      	movs	r1, #37	; 0x25
   2811c:	4816      	ldr	r0, [pc, #88]	; (28178 <gpio_nrfx_manage_callback+0x98>)
   2811e:	f019 ff7d 	bl	4201c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   28122:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   28124:	b15b      	cbz	r3, 2813e <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28126:	2200      	movs	r2, #0
   28128:	429d      	cmp	r5, r3
   2812a:	d113      	bne.n	28154 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   2812c:	682b      	ldr	r3, [r5, #0]
   2812e:	b95a      	cbnz	r2, 28148 <gpio_nrfx_manage_callback+0x68>
   28130:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   28132:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   28134:	4295      	cmp	r5, r2
   28136:	d100      	bne.n	2813a <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   28138:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   2813a:	2300      	movs	r3, #0
   2813c:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2813e:	b976      	cbnz	r6, 2815e <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   28140:	2000      	movs	r0, #0
				     callback, set);
}
   28142:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28144:	460b      	mov	r3, r1
   28146:	e7ef      	b.n	28128 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   28148:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2814a:	68a3      	ldr	r3, [r4, #8]
   2814c:	429d      	cmp	r5, r3
	list->tail = node;
   2814e:	bf08      	it	eq
   28150:	60a2      	streq	r2, [r4, #8]
   28152:	e7f2      	b.n	2813a <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28154:	6819      	ldr	r1, [r3, #0]
	return node->next;
   28156:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28158:	2900      	cmp	r1, #0
   2815a:	d1f3      	bne.n	28144 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   2815c:	b13e      	cbz	r6, 2816e <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   2815e:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   28160:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   28162:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   28164:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   28166:	2800      	cmp	r0, #0
   28168:	d1ea      	bne.n	28140 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2816a:	60a5      	str	r5, [r4, #8]
   2816c:	e7e9      	b.n	28142 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   2816e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   28172:	e7e6      	b.n	28142 <gpio_nrfx_manage_callback+0x62>
   28174:	0004a3e1 	.word	0x0004a3e1
   28178:	0004a0fe 	.word	0x0004a0fe
   2817c:	0004825b 	.word	0x0004825b
   28180:	0004a12b 	.word	0x0004a12b
   28184:	0004a13a 	.word	0x0004a13a
   28188:	0004a14c 	.word	0x0004a14c

0002818c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2818c:	6803      	ldr	r3, [r0, #0]
{
   2818e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   28190:	095a      	lsrs	r2, r3, #5
   28192:	bf0c      	ite	eq
   28194:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   28198:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   2819a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   2819e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   281a2:	07db      	lsls	r3, r3, #31
{
   281a4:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   281a6:	d40b      	bmi.n	281c0 <nrf_gpio_pin_port_decode+0x34>
   281a8:	490f      	ldr	r1, [pc, #60]	; (281e8 <nrf_gpio_pin_port_decode+0x5c>)
   281aa:	4810      	ldr	r0, [pc, #64]	; (281ec <nrf_gpio_pin_port_decode+0x60>)
   281ac:	f240 231a 	movw	r3, #538	; 0x21a
   281b0:	4a0f      	ldr	r2, [pc, #60]	; (281f0 <nrf_gpio_pin_port_decode+0x64>)
   281b2:	f019 fd19 	bl	41be8 <printk>
   281b6:	f240 211a 	movw	r1, #538	; 0x21a
   281ba:	480d      	ldr	r0, [pc, #52]	; (281f0 <nrf_gpio_pin_port_decode+0x64>)
   281bc:	f019 ff2e 	bl	4201c <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   281c0:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   281c2:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   281c6:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   281c8:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   281ca:	d00b      	beq.n	281e4 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   281cc:	4909      	ldr	r1, [pc, #36]	; (281f4 <nrf_gpio_pin_port_decode+0x68>)
   281ce:	4807      	ldr	r0, [pc, #28]	; (281ec <nrf_gpio_pin_port_decode+0x60>)
   281d0:	f240 231f 	movw	r3, #543	; 0x21f
   281d4:	4a06      	ldr	r2, [pc, #24]	; (281f0 <nrf_gpio_pin_port_decode+0x64>)
   281d6:	f019 fd07 	bl	41be8 <printk>
   281da:	f240 211f 	movw	r1, #543	; 0x21f
   281de:	4804      	ldr	r0, [pc, #16]	; (281f0 <nrf_gpio_pin_port_decode+0x64>)
   281e0:	f019 ff1c 	bl	4201c <assert_post_action>
}
   281e4:	4804      	ldr	r0, [pc, #16]	; (281f8 <nrf_gpio_pin_port_decode+0x6c>)
   281e6:	bd10      	pop	{r4, pc}
   281e8:	0004a1a2 	.word	0x0004a1a2
   281ec:	0004825b 	.word	0x0004825b
   281f0:	0004a16f 	.word	0x0004a16f
   281f4:	0004edb2 	.word	0x0004edb2
   281f8:	40842500 	.word	0x40842500

000281fc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   281fc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   281fe:	4b09      	ldr	r3, [pc, #36]	; (28224 <gpio_nrfx_init+0x28>)
   28200:	781a      	ldrb	r2, [r3, #0]
   28202:	b96a      	cbnz	r2, 28220 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   28204:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   28206:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   28208:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2820a:	2105      	movs	r1, #5
   2820c:	f7fe fd06 	bl	26c1c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   28210:	2031      	movs	r0, #49	; 0x31
   28212:	f7fe fce5 	bl	26be0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   28216:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2821a:	4b03      	ldr	r3, [pc, #12]	; (28228 <gpio_nrfx_init+0x2c>)
   2821c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   28220:	2000      	movs	r0, #0
   28222:	bd08      	pop	{r3, pc}
   28224:	2002ae86 	.word	0x2002ae86
   28228:	40031000 	.word	0x40031000

0002822c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2822c:	4b2e      	ldr	r3, [pc, #184]	; (282e8 <gpio_nrfx_config+0xbc>)
{
   2822e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   28230:	4013      	ands	r3, r2
   28232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28236:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   28238:	d044      	beq.n	282c4 <gpio_nrfx_config+0x98>
   2823a:	d808      	bhi.n	2824e <gpio_nrfx_config+0x22>
   2823c:	2b02      	cmp	r3, #2
   2823e:	d043      	beq.n	282c8 <gpio_nrfx_config+0x9c>
   28240:	2b06      	cmp	r3, #6
   28242:	d043      	beq.n	282cc <gpio_nrfx_config+0xa0>
   28244:	2b00      	cmp	r3, #0
   28246:	d041      	beq.n	282cc <gpio_nrfx_config+0xa0>
		return -EINVAL;
   28248:	f06f 0015 	mvn.w	r0, #21
   2824c:	e038      	b.n	282c0 <gpio_nrfx_config+0x94>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2824e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   28252:	d03d      	beq.n	282d0 <gpio_nrfx_config+0xa4>
   28254:	d804      	bhi.n	28260 <gpio_nrfx_config+0x34>
   28256:	4c25      	ldr	r4, [pc, #148]	; (282ec <gpio_nrfx_config+0xc0>)
   28258:	42a3      	cmp	r3, r4
   2825a:	d1f5      	bne.n	28248 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   2825c:	2407      	movs	r4, #7
   2825e:	e006      	b.n	2826e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   28260:	4c23      	ldr	r4, [pc, #140]	; (282f0 <gpio_nrfx_config+0xc4>)
   28262:	42a3      	cmp	r3, r4
   28264:	d036      	beq.n	282d4 <gpio_nrfx_config+0xa8>
   28266:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2826a:	d1ed      	bne.n	28248 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   2826c:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   2826e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   28270:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   28274:	bf54      	ite	pl
   28276:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   2827a:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2827c:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   28280:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   28282:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   28286:	d507      	bpl.n	28298 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   28288:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2828a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2828e:	d523      	bpl.n	282d8 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   28290:	2301      	movs	r3, #1
   28292:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   28294:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   28298:	7a03      	ldrb	r3, [r0, #8]
   2829a:	f001 011f 	and.w	r1, r1, #31
   2829e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   282a2:	a801      	add	r0, sp, #4
   282a4:	9101      	str	r1, [sp, #4]
   282a6:	f7ff ff71 	bl	2818c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   282aa:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   282ac:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   282b0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   282b4:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   282b8:	3280      	adds	r2, #128	; 0x80
   282ba:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   282be:	2000      	movs	r0, #0
}
   282c0:	b003      	add	sp, #12
   282c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   282c4:	2401      	movs	r4, #1
   282c6:	e7d2      	b.n	2826e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   282c8:	2404      	movs	r4, #4
   282ca:	e7d0      	b.n	2826e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   282cc:	461c      	mov	r4, r3
   282ce:	e7ce      	b.n	2826e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   282d0:	2402      	movs	r4, #2
   282d2:	e7cc      	b.n	2826e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   282d4:	2405      	movs	r4, #5
   282d6:	e7ca      	b.n	2826e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   282d8:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   282da:	bf42      	ittt	mi
   282dc:	2201      	movmi	r2, #1
   282de:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   282e0:	f8cc 200c 	strmi.w	r2, [ip, #12]
   282e4:	e7d8      	b.n	28298 <gpio_nrfx_config+0x6c>
   282e6:	bf00      	nop
   282e8:	00f00006 	.word	0x00f00006
   282ec:	00100006 	.word	0x00100006
   282f0:	00400002 	.word	0x00400002

000282f4 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   282f4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   282f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   282fc:	4607      	mov	r7, r0
   282fe:	460e      	mov	r6, r1
   28300:	4690      	mov	r8, r2
   28302:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   28304:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   28306:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   2830a:	f040 80b8 	bne.w	2847e <gpio_nrfx_pin_interrupt_configure+0x18a>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2830e:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28310:	a801      	add	r0, sp, #4
   28312:	7a1b      	ldrb	r3, [r3, #8]
   28314:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   28318:	9301      	str	r3, [sp, #4]
   2831a:	f7ff ff37 	bl	2818c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2831e:	9b01      	ldr	r3, [sp, #4]
   28320:	3380      	adds	r3, #128	; 0x80
   28322:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   28326:	07d8      	lsls	r0, r3, #31
   28328:	f100 80cf 	bmi.w	284ca <gpio_nrfx_pin_interrupt_configure+0x1d6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2832c:	2101      	movs	r1, #1
   2832e:	68e3      	ldr	r3, [r4, #12]
   28330:	40b1      	lsls	r1, r6
   28332:	4319      	orrs	r1, r3
   28334:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   28336:	2101      	movs	r1, #1
   28338:	6963      	ldr	r3, [r4, #20]
   2833a:	40b1      	lsls	r1, r6
   2833c:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   28340:	bf0c      	ite	eq
   28342:	430b      	orreq	r3, r1
   28344:	438b      	bicne	r3, r1
   28346:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   28348:	69a3      	ldr	r3, [r4, #24]
   2834a:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   2834e:	bf0c      	ite	eq
   28350:	430b      	orreq	r3, r1
   28352:	438b      	bicne	r3, r1
   28354:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   28356:	6923      	ldr	r3, [r4, #16]
   28358:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   2835c:	bf0c      	ite	eq
   2835e:	4319      	orreq	r1, r3
   28360:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28364:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   28366:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   28368:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   2836a:	f8d7 800c 	ldr.w	r8, [r7, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2836e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28372:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   28374:	4f56      	ldr	r7, [pc, #344]	; (284d0 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   28376:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
   2837a:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2837c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   28380:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   28384:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   28388:	428d      	cmp	r5, r1
   2838a:	f040 8083 	bne.w	28494 <gpio_nrfx_pin_interrupt_configure+0x1a0>
		    && (intenset & BIT(i))) {
   2838e:	fa22 f103 	lsr.w	r1, r2, r3
   28392:	07c9      	lsls	r1, r1, #31
   28394:	d57e      	bpl.n	28494 <gpio_nrfx_pin_interrupt_configure+0x1a0>
			(void)atomic_and(mask, ~BIT(i));
   28396:	2201      	movs	r2, #1
   28398:	409a      	lsls	r2, r3
   2839a:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2839c:	494d      	ldr	r1, [pc, #308]	; (284d4 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   2839e:	e8d1 4fef 	ldaex	r4, [r1]
   283a2:	4004      	ands	r4, r0
   283a4:	e8c1 4fec 	stlex	ip, r4, [r1]
   283a8:	f1bc 0f00 	cmp.w	ip, #0
   283ac:	d1f7      	bne.n	2839e <gpio_nrfx_pin_interrupt_configure+0xaa>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   283ae:	009b      	lsls	r3, r3, #2
   283b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   283b4:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   283b8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   283bc:	f021 0101 	bic.w	r1, r1, #1
   283c0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   283c4:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   283c8:	4628      	mov	r0, r5
   283ca:	2100      	movs	r1, #0
   283cc:	f01b fb4c 	bl	43a68 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   283d0:	f8d8 000c 	ldr.w	r0, [r8, #12]
   283d4:	40f0      	lsrs	r0, r6
   283d6:	f010 0001 	ands.w	r0, r0, #1
   283da:	d04d      	beq.n	28478 <gpio_nrfx_pin_interrupt_configure+0x184>
		if (data->trig_edge & BIT(pin)) {
   283dc:	f8d8 0014 	ldr.w	r0, [r8, #20]
   283e0:	40f0      	lsrs	r0, r6
   283e2:	f010 0401 	ands.w	r4, r0, #1
   283e6:	d062      	beq.n	284ae <gpio_nrfx_pin_interrupt_configure+0x1ba>
			if (data->double_edge & BIT(pin)) {
   283e8:	f8d8 3018 	ldr.w	r3, [r8, #24]
   283ec:	40f3      	lsrs	r3, r6
   283ee:	07db      	lsls	r3, r3, #31
   283f0:	d455      	bmi.n	2849e <gpio_nrfx_pin_interrupt_configure+0x1aa>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   283f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
   283f6:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   283fa:	f016 0f01 	tst.w	r6, #1
   283fe:	bf14      	ite	ne
   28400:	2601      	movne	r6, #1
   28402:	2602      	moveq	r6, #2
   28404:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   28406:	2401      	movs	r4, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28408:	4a32      	ldr	r2, [pc, #200]	; (284d4 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   2840a:	fa04 f103 	lsl.w	r1, r4, r3
   2840e:	e8d2 0fef 	ldaex	r0, [r2]
   28412:	ea40 0c01 	orr.w	ip, r0, r1
   28416:	e8c2 cfee 	stlex	lr, ip, [r2]
   2841a:	f1be 0f00 	cmp.w	lr, #0
   2841e:	d1f6      	bne.n	2840e <gpio_nrfx_pin_interrupt_configure+0x11a>
		if ((prev & BIT(channel)) == 0) {
   28420:	40d8      	lsrs	r0, r3
   28422:	f010 0001 	ands.w	r0, r0, #1
   28426:	d13c      	bne.n	284a2 <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   28428:	009a      	lsls	r2, r3, #2
   2842a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2842e:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   28432:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   28436:	3340      	adds	r3, #64	; 0x40
   28438:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   2843c:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   28440:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   28444:	022d      	lsls	r5, r5, #8
   28446:	009b      	lsls	r3, r3, #2
   28448:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
   2844c:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   28450:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   28452:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    return ((uint32_t)p_reg + event);
   28456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2845a:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2845e:	4325      	orrs	r5, r4
   28460:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   28464:	6018      	str	r0, [r3, #0]
   28466:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   28468:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   2846c:	f043 0301 	orr.w	r3, r3, #1
   28470:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
   28474:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
   28478:	b003      	add	sp, #12
   2847a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2847e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   28482:	f47f af53 	bne.w	2832c <gpio_nrfx_pin_interrupt_configure+0x38>
   28486:	2101      	movs	r1, #1
   28488:	fa01 f306 	lsl.w	r3, r1, r6
   2848c:	68e1      	ldr	r1, [r4, #12]
   2848e:	ea21 0103 	bic.w	r1, r1, r3
   28492:	e74f      	b.n	28334 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28494:	3301      	adds	r3, #1
   28496:	2b08      	cmp	r3, #8
   28498:	f47f af70 	bne.w	2837c <gpio_nrfx_pin_interrupt_configure+0x88>
   2849c:	e794      	b.n	283c8 <gpio_nrfx_pin_interrupt_configure+0xd4>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2849e:	2603      	movs	r6, #3
   284a0:	e7b0      	b.n	28404 <gpio_nrfx_pin_interrupt_configure+0x110>
   284a2:	3301      	adds	r3, #1
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   284a4:	2b08      	cmp	r3, #8
   284a6:	d1b0      	bne.n	2840a <gpio_nrfx_pin_interrupt_configure+0x116>
	return -ENODEV;
   284a8:	f06f 0012 	mvn.w	r0, #18
   284ac:	e7e4      	b.n	28478 <gpio_nrfx_pin_interrupt_configure+0x184>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   284ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   284b2:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   284b4:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   284b8:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   284bc:	bf0c      	ite	eq
   284be:	2103      	moveq	r1, #3
   284c0:	2102      	movne	r1, #2
   284c2:	f01b fad1 	bl	43a68 <nrf_gpio_cfg_sense_set>
	int res = 0;
   284c6:	4620      	mov	r0, r4
   284c8:	e7d6      	b.n	28478 <gpio_nrfx_pin_interrupt_configure+0x184>
		return -ENOTSUP;
   284ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
   284ce:	e7d3      	b.n	28478 <gpio_nrfx_pin_interrupt_configure+0x184>
   284d0:	40031000 	.word	0x40031000
   284d4:	200247d0 	.word	0x200247d0

000284d8 <gpiote_event_handler>:
{
   284d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   284dc:	4f48      	ldr	r7, [pc, #288]	; (28600 <gpiote_event_handler+0x128>)
   284de:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   284e0:	2e00      	cmp	r6, #0
   284e2:	d050      	beq.n	28586 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   284e4:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   284e8:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   284ec:	4b45      	ldr	r3, [pc, #276]	; (28604 <gpiote_event_handler+0x12c>)
   284ee:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   284f0:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   284f4:	430a      	orrs	r2, r1
   284f6:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   284fa:	4a43      	ldr	r2, [pc, #268]	; (28608 <gpiote_event_handler+0x130>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   284fc:	691b      	ldr	r3, [r3, #16]
   284fe:	6914      	ldr	r4, [r2, #16]
   28500:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   28502:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   28506:	bb7d      	cbnz	r5, 28568 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   28508:	603d      	str	r5, [r7, #0]
   2850a:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   2850c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   2850e:	2501      	movs	r5, #1
   28510:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   28512:	483e      	ldr	r0, [pc, #248]	; (2860c <gpiote_event_handler+0x134>)
   28514:	493e      	ldr	r1, [pc, #248]	; (28610 <gpiote_event_handler+0x138>)
   28516:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   2851a:	fa05 fc03 	lsl.w	ip, r5, r3
   2851e:	ea1c 0f02 	tst.w	ip, r2
   28522:	d00f      	beq.n	28544 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   28524:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   28528:	b162      	cbz	r2, 28544 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2852a:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   2852e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   28532:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   28536:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   2853a:	fa05 f202 	lsl.w	r2, r5, r2
   2853e:	4314      	orrs	r4, r2
   28540:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   28544:	3301      	adds	r3, #1
   28546:	2b08      	cmp	r3, #8
   28548:	d1e5      	bne.n	28516 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   2854a:	b9f4      	cbnz	r4, 2858a <gpiote_event_handler+0xb2>
	if (port_event) {
   2854c:	b156      	cbz	r6, 28564 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   2854e:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   28550:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   28552:	4d2c      	ldr	r5, [pc, #176]	; (28604 <gpiote_event_handler+0x12c>)
   28554:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   28556:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   2855a:	430a      	orrs	r2, r1
   2855c:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   28560:	2c00      	cmp	r4, #0
   28562:	d13a      	bne.n	285da <gpiote_event_handler+0x102>
}
   28564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   28568:	ea15 0f08 	tst.w	r5, r8
   2856c:	d006      	beq.n	2857c <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2856e:	2100      	movs	r1, #0
   28570:	f009 001f 	and.w	r0, r9, #31
   28574:	f01b fa78 	bl	43a68 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   28578:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   2857c:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   28580:	ea4f 0848 	mov.w	r8, r8, lsl #1
   28584:	e7bf      	b.n	28506 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   28586:	4634      	mov	r4, r6
   28588:	e7c0      	b.n	2850c <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2858a:	4b1e      	ldr	r3, [pc, #120]	; (28604 <gpiote_event_handler+0x12c>)
   2858c:	685d      	ldr	r5, [r3, #4]
   2858e:	2d00      	cmp	r5, #0
   28590:	d0dc      	beq.n	2854c <gpiote_event_handler+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28592:	682f      	ldr	r7, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   28594:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2861c <gpiote_event_handler+0x144>
			__ASSERT(cb->handler, "No callback handler!");
   28598:	f8df 8084 	ldr.w	r8, [pc, #132]	; 28620 <gpiote_event_handler+0x148>
   2859c:	f8df a084 	ldr.w	sl, [pc, #132]	; 28624 <gpiote_event_handler+0x14c>
		if (cb->pin_mask & pins) {
   285a0:	68ab      	ldr	r3, [r5, #8]
   285a2:	421c      	tst	r4, r3
   285a4:	d014      	beq.n	285d0 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
   285a6:	686b      	ldr	r3, [r5, #4]
   285a8:	b963      	cbnz	r3, 285c4 <gpiote_event_handler+0xec>
   285aa:	4651      	mov	r1, sl
   285ac:	2345      	movs	r3, #69	; 0x45
   285ae:	4642      	mov	r2, r8
   285b0:	4818      	ldr	r0, [pc, #96]	; (28614 <gpiote_event_handler+0x13c>)
   285b2:	f019 fb19 	bl	41be8 <printk>
   285b6:	4818      	ldr	r0, [pc, #96]	; (28618 <gpiote_event_handler+0x140>)
   285b8:	f019 fb16 	bl	41be8 <printk>
   285bc:	2145      	movs	r1, #69	; 0x45
   285be:	4640      	mov	r0, r8
   285c0:	f019 fd2c 	bl	4201c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   285c4:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   285c8:	4629      	mov	r1, r5
   285ca:	4022      	ands	r2, r4
   285cc:	4648      	mov	r0, r9
   285ce:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   285d0:	2f00      	cmp	r7, #0
   285d2:	d0bb      	beq.n	2854c <gpiote_event_handler+0x74>
   285d4:	463d      	mov	r5, r7
   285d6:	683f      	ldr	r7, [r7, #0]
   285d8:	e7e2      	b.n	285a0 <gpiote_event_handler+0xc8>
		if (level_pins & bit) {
   285da:	4226      	tst	r6, r4
   285dc:	d00c      	beq.n	285f8 <gpiote_event_handler+0x120>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   285de:	692b      	ldr	r3, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   285e0:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   285e4:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   285e6:	f013 0f01 	tst.w	r3, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   285ea:	bf0c      	ite	eq
   285ec:	2103      	moveq	r1, #3
   285ee:	2102      	movne	r1, #2
   285f0:	f01b fa3a 	bl	43a68 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   285f4:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   285f8:	3701      	adds	r7, #1
		bit <<= 1;
   285fa:	0076      	lsls	r6, r6, #1
   285fc:	e7b0      	b.n	28560 <gpiote_event_handler+0x88>
   285fe:	bf00      	nop
   28600:	4003117c 	.word	0x4003117c
   28604:	200247b4 	.word	0x200247b4
   28608:	40842500 	.word	0x40842500
   2860c:	40031000 	.word	0x40031000
   28610:	40031100 	.word	0x40031100
   28614:	0004825b 	.word	0x0004825b
   28618:	0004a14c 	.word	0x0004a14c
   2861c:	200209f8 	.word	0x200209f8
   28620:	0004a0fe 	.word	0x0004a0fe
   28624:	0004a163 	.word	0x0004a163

00028628 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   28628:	4b02      	ldr	r3, [pc, #8]	; (28634 <flash_nrf_pages_layout+0xc>)
   2862a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2862c:	2301      	movs	r3, #1
   2862e:	6013      	str	r3, [r2, #0]
}
   28630:	4770      	bx	lr
   28632:	bf00      	nop
   28634:	200247d4 	.word	0x200247d4

00028638 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   28638:	4800      	ldr	r0, [pc, #0]	; (2863c <flash_nrf_get_parameters+0x4>)
   2863a:	4770      	bx	lr
   2863c:	00046e64 	.word	0x00046e64

00028640 <flash_nrf_erase>:
{
   28640:	b570      	push	{r4, r5, r6, lr}
   28642:	460d      	mov	r5, r1
   28644:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   28646:	f01c fbfe 	bl	44e46 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2864a:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2864c:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   2864e:	4628      	mov	r0, r5
   28650:	f01b fa1f 	bl	43a92 <is_regular_addr_valid>
   28654:	b300      	cbz	r0, 28698 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   28656:	fbb5 f3f6 	udiv	r3, r5, r6
   2865a:	fb06 5313 	mls	r3, r6, r3, r5
   2865e:	b9db      	cbnz	r3, 28698 <flash_nrf_erase+0x58>
   28660:	fbb4 f0f6 	udiv	r0, r4, r6
   28664:	fb06 4010 	mls	r0, r6, r0, r4
   28668:	b9b0      	cbnz	r0, 28698 <flash_nrf_erase+0x58>
		if (!n_pages) {
   2866a:	42a6      	cmp	r6, r4
   2866c:	d813      	bhi.n	28696 <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
   2866e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28676:	480a      	ldr	r0, [pc, #40]	; (286a0 <flash_nrf_erase+0x60>)
   28678:	f015 fe08 	bl	3e28c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2867c:	f01c fbe3 	bl	44e46 <nrfx_nvmc_flash_page_size_get>
   28680:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   28682:	4628      	mov	r0, r5
   28684:	f013 fbae 	bl	3bde4 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   28688:	1ba4      	subs	r4, r4, r6
   2868a:	4435      	add	r5, r6
   2868c:	d1f9      	bne.n	28682 <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   2868e:	4804      	ldr	r0, [pc, #16]	; (286a0 <flash_nrf_erase+0x60>)
   28690:	f015 fdb8 	bl	3e204 <z_impl_k_sem_give>
	return ret;
   28694:	4620      	mov	r0, r4
}
   28696:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28698:	f06f 0015 	mvn.w	r0, #21
   2869c:	e7fb      	b.n	28696 <flash_nrf_erase+0x56>
   2869e:	bf00      	nop
   286a0:	200247dc 	.word	0x200247dc

000286a4 <nrf_flash_init>:
{
   286a4:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   286a6:	2201      	movs	r2, #1
   286a8:	4806      	ldr	r0, [pc, #24]	; (286c4 <nrf_flash_init+0x20>)
   286aa:	4611      	mov	r1, r2
   286ac:	f01c fc62 	bl	44f74 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   286b0:	f01c fbcc 	bl	44e4c <nrfx_nvmc_flash_page_count_get>
   286b4:	4c04      	ldr	r4, [pc, #16]	; (286c8 <nrf_flash_init+0x24>)
   286b6:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   286b8:	f01c fbc5 	bl	44e46 <nrfx_nvmc_flash_page_size_get>
   286bc:	6060      	str	r0, [r4, #4]
}
   286be:	2000      	movs	r0, #0
   286c0:	bd10      	pop	{r4, pc}
   286c2:	bf00      	nop
   286c4:	200247dc 	.word	0x200247dc
   286c8:	200247d4 	.word	0x200247d4

000286cc <flash_nrf_write>:
{
   286cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286ce:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   286d0:	4619      	mov	r1, r3
   286d2:	4630      	mov	r0, r6
{
   286d4:	4617      	mov	r7, r2
   286d6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   286d8:	f01b f9db 	bl	43a92 <is_regular_addr_valid>
   286dc:	b308      	cbz	r0, 28722 <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
   286de:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   286e2:	f015 0503 	ands.w	r5, r5, #3
   286e6:	d11c      	bne.n	28722 <flash_nrf_write+0x56>
	if (!len) {
   286e8:	b1f4      	cbz	r4, 28728 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   286ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   286ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   286f2:	480e      	ldr	r0, [pc, #56]	; (2872c <flash_nrf_write+0x60>)
   286f4:	f015 fdca 	bl	3e28c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   286f8:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   286fc:	42a5      	cmp	r5, r4
   286fe:	eb06 0005 	add.w	r0, r6, r5
   28702:	d109      	bne.n	28718 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   28704:	4a0a      	ldr	r2, [pc, #40]	; (28730 <flash_nrf_write+0x64>)
   28706:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2870a:	07db      	lsls	r3, r3, #31
   2870c:	d5fb      	bpl.n	28706 <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
   2870e:	4807      	ldr	r0, [pc, #28]	; (2872c <flash_nrf_write+0x60>)
   28710:	f015 fd78 	bl	3e204 <z_impl_k_sem_give>
   28714:	2000      	movs	r0, #0
}
   28716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   28718:	5979      	ldr	r1, [r7, r5]
   2871a:	f013 fb95 	bl	3be48 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2871e:	3504      	adds	r5, #4
   28720:	e7ec      	b.n	286fc <flash_nrf_write+0x30>
		return -EINVAL;
   28722:	f06f 0015 	mvn.w	r0, #21
   28726:	e7f6      	b.n	28716 <flash_nrf_write+0x4a>
		return 0;
   28728:	4620      	mov	r0, r4
   2872a:	e7f4      	b.n	28716 <flash_nrf_write+0x4a>
   2872c:	200247dc 	.word	0x200247dc
   28730:	40039000 	.word	0x40039000

00028734 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   28734:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   28736:	794b      	ldrb	r3, [r1, #5]
   28738:	2b01      	cmp	r3, #1
   2873a:	d027      	beq.n	2878c <uarte_nrfx_configure+0x58>
   2873c:	2b03      	cmp	r3, #3
   2873e:	d122      	bne.n	28786 <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28740:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   28742:	798b      	ldrb	r3, [r1, #6]
   28744:	2b03      	cmp	r3, #3
   28746:	d11e      	bne.n	28786 <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   28748:	79cc      	ldrb	r4, [r1, #7]
   2874a:	b124      	cbz	r4, 28756 <uarte_nrfx_configure+0x22>
   2874c:	2c01      	cmp	r4, #1
   2874e:	d11a      	bne.n	28786 <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   28750:	6843      	ldr	r3, [r0, #4]
   28752:	791b      	ldrb	r3, [r3, #4]
   28754:	b1bb      	cbz	r3, 28786 <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   28756:	790a      	ldrb	r2, [r1, #4]
   28758:	b112      	cbz	r2, 28760 <uarte_nrfx_configure+0x2c>
   2875a:	2a02      	cmp	r2, #2
   2875c:	d113      	bne.n	28786 <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2875e:	220e      	movs	r2, #14
	switch (baudrate) {
   28760:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28764:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   28766:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   28768:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   2876a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2876c:	d063      	beq.n	28836 <uarte_nrfx_configure+0x102>
   2876e:	d829      	bhi.n	287c4 <uarte_nrfx_configure+0x90>
   28770:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   28774:	d062      	beq.n	2883c <uarte_nrfx_configure+0x108>
   28776:	d814      	bhi.n	287a2 <uarte_nrfx_configure+0x6e>
   28778:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2877c:	d060      	beq.n	28840 <uarte_nrfx_configure+0x10c>
   2877e:	d807      	bhi.n	28790 <uarte_nrfx_configure+0x5c>
   28780:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28784:	d05f      	beq.n	28846 <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
   28786:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2878a:	e053      	b.n	28834 <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2878c:	2600      	movs	r6, #0
   2878e:	e7d8      	b.n	28742 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   28790:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   28794:	d05a      	beq.n	2884c <uarte_nrfx_configure+0x118>
   28796:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2879a:	d1f4      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2879c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   287a0:	e03c      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   287a2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   287a6:	d054      	beq.n	28852 <uarte_nrfx_configure+0x11e>
   287a8:	d804      	bhi.n	287b4 <uarte_nrfx_configure+0x80>
   287aa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   287ae:	d1ea      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   287b0:	4b33      	ldr	r3, [pc, #204]	; (28880 <uarte_nrfx_configure+0x14c>)
   287b2:	e033      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   287b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   287b8:	d04d      	beq.n	28856 <uarte_nrfx_configure+0x122>
   287ba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   287be:	d1e2      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   287c0:	4b30      	ldr	r3, [pc, #192]	; (28884 <uarte_nrfx_configure+0x150>)
   287c2:	e02b      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   287c4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   287c8:	d047      	beq.n	2885a <uarte_nrfx_configure+0x126>
   287ca:	d812      	bhi.n	287f2 <uarte_nrfx_configure+0xbe>
   287cc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   287d0:	42bb      	cmp	r3, r7
   287d2:	d045      	beq.n	28860 <uarte_nrfx_configure+0x12c>
   287d4:	d805      	bhi.n	287e2 <uarte_nrfx_configure+0xae>
   287d6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   287da:	d1d4      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   287dc:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   287e0:	e01c      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   287e2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   287e6:	d03e      	beq.n	28866 <uarte_nrfx_configure+0x132>
   287e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   287ec:	d1cb      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   287ee:	4b26      	ldr	r3, [pc, #152]	; (28888 <uarte_nrfx_configure+0x154>)
   287f0:	e014      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   287f2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   287f6:	d039      	beq.n	2886c <uarte_nrfx_configure+0x138>
   287f8:	d808      	bhi.n	2880c <uarte_nrfx_configure+0xd8>
   287fa:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   287fe:	d038      	beq.n	28872 <uarte_nrfx_configure+0x13e>
   28800:	4f22      	ldr	r7, [pc, #136]	; (2888c <uarte_nrfx_configure+0x158>)
   28802:	42bb      	cmp	r3, r7
   28804:	d1bf      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   28806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2880a:	e007      	b.n	2881c <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2880c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   28810:	d032      	beq.n	28878 <uarte_nrfx_configure+0x144>
   28812:	4f1f      	ldr	r7, [pc, #124]	; (28890 <uarte_nrfx_configure+0x15c>)
   28814:	42bb      	cmp	r3, r7
   28816:	d1b6      	bne.n	28786 <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   28818:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2881c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   28820:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   28822:	4334      	orrs	r4, r6
   28824:	4322      	orrs	r2, r4
   28826:	3304      	adds	r3, #4
   28828:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2882a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   2882e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   28832:	2000      	movs	r0, #0
}
   28834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   28836:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2883a:	e7ef      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2883c:	4b15      	ldr	r3, [pc, #84]	; (28894 <uarte_nrfx_configure+0x160>)
   2883e:	e7ed      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   28840:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   28844:	e7ea      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   28846:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2884a:	e7e7      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2884c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   28850:	e7e4      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   28852:	4b11      	ldr	r3, [pc, #68]	; (28898 <uarte_nrfx_configure+0x164>)
   28854:	e7e2      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   28856:	4b11      	ldr	r3, [pc, #68]	; (2889c <uarte_nrfx_configure+0x168>)
   28858:	e7e0      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2885a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2885e:	e7dd      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   28860:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28864:	e7da      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   28866:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2886a:	e7d7      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2886c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   28870:	e7d4      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   28872:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   28876:	e7d1      	b.n	2881c <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   28878:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2887c:	e7ce      	b.n	2881c <uarte_nrfx_configure+0xe8>
   2887e:	bf00      	nop
   28880:	00275000 	.word	0x00275000
   28884:	0075c000 	.word	0x0075c000
   28888:	013a9000 	.word	0x013a9000
   2888c:	0003d090 	.word	0x0003d090
   28890:	000f4240 	.word	0x000f4240
   28894:	0013b000 	.word	0x0013b000
   28898:	003af000 	.word	0x003af000
   2889c:	004ea000 	.word	0x004ea000

000288a0 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   288a0:	6803      	ldr	r3, [r0, #0]
{
   288a2:	b510      	push	{r4, lr}
    switch (port)
   288a4:	095a      	lsrs	r2, r3, #5
   288a6:	bf0c      	ite	eq
   288a8:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   288ac:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   288ae:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   288b2:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   288b6:	07db      	lsls	r3, r3, #31
{
   288b8:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   288ba:	d40b      	bmi.n	288d4 <nrf_gpio_pin_port_decode+0x34>
   288bc:	490f      	ldr	r1, [pc, #60]	; (288fc <nrf_gpio_pin_port_decode+0x5c>)
   288be:	4810      	ldr	r0, [pc, #64]	; (28900 <nrf_gpio_pin_port_decode+0x60>)
   288c0:	f240 231a 	movw	r3, #538	; 0x21a
   288c4:	4a0f      	ldr	r2, [pc, #60]	; (28904 <nrf_gpio_pin_port_decode+0x64>)
   288c6:	f019 f98f 	bl	41be8 <printk>
   288ca:	f240 211a 	movw	r1, #538	; 0x21a
   288ce:	480d      	ldr	r0, [pc, #52]	; (28904 <nrf_gpio_pin_port_decode+0x64>)
   288d0:	f019 fba4 	bl	4201c <assert_post_action>
    uint32_t pin_number = *p_pin;
   288d4:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   288d6:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   288da:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   288dc:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   288de:	d00b      	beq.n	288f8 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   288e0:	4909      	ldr	r1, [pc, #36]	; (28908 <nrf_gpio_pin_port_decode+0x68>)
   288e2:	4807      	ldr	r0, [pc, #28]	; (28900 <nrf_gpio_pin_port_decode+0x60>)
   288e4:	f240 231f 	movw	r3, #543	; 0x21f
   288e8:	4a06      	ldr	r2, [pc, #24]	; (28904 <nrf_gpio_pin_port_decode+0x64>)
   288ea:	f019 f97d 	bl	41be8 <printk>
   288ee:	f240 211f 	movw	r1, #543	; 0x21f
   288f2:	4804      	ldr	r0, [pc, #16]	; (28904 <nrf_gpio_pin_port_decode+0x64>)
   288f4:	f019 fb92 	bl	4201c <assert_post_action>
}
   288f8:	4804      	ldr	r0, [pc, #16]	; (2890c <nrf_gpio_pin_port_decode+0x6c>)
   288fa:	bd10      	pop	{r4, pc}
   288fc:	0004a1a2 	.word	0x0004a1a2
   28900:	0004825b 	.word	0x0004825b
   28904:	0004a16f 	.word	0x0004a16f
   28908:	0004edb2 	.word	0x0004edb2
   2890c:	40842500 	.word	0x40842500

00028910 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   28910:	b530      	push	{r4, r5, lr}
   28912:	b085      	sub	sp, #20
   28914:	466c      	mov	r4, sp
   28916:	4605      	mov	r5, r0
   28918:	4b08      	ldr	r3, [pc, #32]	; (2893c <uarte_1_init+0x2c>)
   2891a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2891c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28920:	2200      	movs	r2, #0
   28922:	2101      	movs	r1, #1
   28924:	2009      	movs	r0, #9
   28926:	f7fe f979 	bl	26c1c <z_arm_irq_priority_set>
   2892a:	2009      	movs	r0, #9
   2892c:	f7fe f958 	bl	26be0 <arch_irq_enable>
   28930:	4621      	mov	r1, r4
   28932:	4628      	mov	r0, r5
   28934:	f01b fa24 	bl	43d80 <uarte_instance_init.constprop.4>
   28938:	b005      	add	sp, #20
   2893a:	bd30      	pop	{r4, r5, pc}
   2893c:	000469e8 	.word	0x000469e8

00028940 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   28940:	b530      	push	{r4, r5, lr}
   28942:	b085      	sub	sp, #20
   28944:	466c      	mov	r4, sp
   28946:	4605      	mov	r5, r0
   28948:	4b08      	ldr	r3, [pc, #32]	; (2896c <uarte_0_init+0x2c>)
   2894a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2894c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28950:	2200      	movs	r2, #0
   28952:	2101      	movs	r1, #1
   28954:	2008      	movs	r0, #8
   28956:	f7fe f961 	bl	26c1c <z_arm_irq_priority_set>
   2895a:	2008      	movs	r0, #8
   2895c:	f7fe f940 	bl	26be0 <arch_irq_enable>
   28960:	4621      	mov	r1, r4
   28962:	4628      	mov	r0, r5
   28964:	f01b fa0c 	bl	43d80 <uarte_instance_init.constprop.4>
   28968:	b005      	add	sp, #20
   2896a:	bd30      	pop	{r4, r5, pc}
   2896c:	000469f8 	.word	0x000469f8

00028970 <entropy_cc310_rng_get_entropy>:
#include "nrf_cc310_platform_entropy.h"
#endif

static int entropy_cc310_rng_get_entropy(const struct device *dev, uint8_t *buffer,
					 uint16_t length)
{
   28970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28974:	4688      	mov	r8, r1
   28976:	b0a6      	sub	sp, #152	; 0x98
   28978:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   2897a:	b948      	cbnz	r0, 28990 <entropy_cc310_rng_get_entropy+0x20>
   2897c:	491c      	ldr	r1, [pc, #112]	; (289f0 <entropy_cc310_rng_get_entropy+0x80>)
   2897e:	481d      	ldr	r0, [pc, #116]	; (289f4 <entropy_cc310_rng_get_entropy+0x84>)
   28980:	231d      	movs	r3, #29
   28982:	4a1d      	ldr	r2, [pc, #116]	; (289f8 <entropy_cc310_rng_get_entropy+0x88>)
   28984:	f019 f930 	bl	41be8 <printk>
   28988:	211d      	movs	r1, #29
   2898a:	481b      	ldr	r0, [pc, #108]	; (289f8 <entropy_cc310_rng_get_entropy+0x88>)
   2898c:	f019 fb46 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   28990:	f1b8 0f00 	cmp.w	r8, #0
   28994:	d109      	bne.n	289aa <entropy_cc310_rng_get_entropy+0x3a>
   28996:	4919      	ldr	r1, [pc, #100]	; (289fc <entropy_cc310_rng_get_entropy+0x8c>)
   28998:	4816      	ldr	r0, [pc, #88]	; (289f4 <entropy_cc310_rng_get_entropy+0x84>)
   2899a:	231e      	movs	r3, #30
   2899c:	4a16      	ldr	r2, [pc, #88]	; (289f8 <entropy_cc310_rng_get_entropy+0x88>)
   2899e:	f019 f923 	bl	41be8 <printk>
   289a2:	211e      	movs	r1, #30
   289a4:	4814      	ldr	r0, [pc, #80]	; (289f8 <entropy_cc310_rng_get_entropy+0x88>)
   289a6:	f019 fb39 	bl	4201c <assert_post_action>
{
   289aa:	2600      	movs	r6, #0
   289ac:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   289b0:	b91c      	cbnz	r4, 289ba <entropy_cc310_rng_get_entropy+0x4a>
		return -EINVAL;
	}
#endif

	return res;
}
   289b2:	4628      	mov	r0, r5
   289b4:	b026      	add	sp, #152	; 0x98
   289b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   289ba:	aa01      	add	r2, sp, #4
   289bc:	2190      	movs	r1, #144	; 0x90
   289be:	a802      	add	r0, sp, #8
   289c0:	f7ef fb16 	bl	17ff0 <spm_request_random_number>
		if (res < 0) {
   289c4:	1e05      	subs	r5, r0, #0
   289c6:	dbf4      	blt.n	289b2 <entropy_cc310_rng_get_entropy+0x42>
		if (olen != sizeof(spm_buf)) {
   289c8:	9b01      	ldr	r3, [sp, #4]
   289ca:	2b90      	cmp	r3, #144	; 0x90
   289cc:	d10d      	bne.n	289ea <entropy_cc310_rng_get_entropy+0x7a>
		to_copy = MIN(length, sizeof(spm_buf));
   289ce:	2c90      	cmp	r4, #144	; 0x90
   289d0:	4627      	mov	r7, r4
   289d2:	bf28      	it	cs
   289d4:	2790      	movcs	r7, #144	; 0x90
   289d6:	eb08 0006 	add.w	r0, r8, r6
   289da:	463a      	mov	r2, r7
   289dc:	a902      	add	r1, sp, #8
		length -= to_copy;
   289de:	1be4      	subs	r4, r4, r7
   289e0:	f01c fc22 	bl	45228 <memcpy>
   289e4:	b2a4      	uxth	r4, r4
		offset += to_copy;
   289e6:	443e      	add	r6, r7
   289e8:	e7e2      	b.n	289b0 <entropy_cc310_rng_get_entropy+0x40>
			return -EINVAL;
   289ea:	f06f 0515 	mvn.w	r5, #21
   289ee:	e7e0      	b.n	289b2 <entropy_cc310_rng_get_entropy+0x42>
   289f0:	0004a213 	.word	0x0004a213
   289f4:	0004825b 	.word	0x0004825b
   289f8:	0004a1e3 	.word	0x0004a1e3
   289fc:	0004a226 	.word	0x0004a226

00028a00 <parse_string>:
{
   28a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28a04:	680a      	ldr	r2, [r1, #0]
   28a06:	688b      	ldr	r3, [r1, #8]
{
   28a08:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28a0a:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   28a0c:	18d0      	adds	r0, r2, r3
   28a0e:	5cd3      	ldrb	r3, [r2, r3]
{
   28a10:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   28a12:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28a14:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   28a16:	f040 80d6 	bne.w	28bc6 <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28a1a:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   28a1c:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   28a1e:	684c      	ldr	r4, [r1, #4]
   28a20:	1ab9      	subs	r1, r7, r2
   28a22:	42a1      	cmp	r1, r4
   28a24:	f080 80cf 	bcs.w	28bc6 <parse_string+0x1c6>
   28a28:	7839      	ldrb	r1, [r7, #0]
   28a2a:	2922      	cmp	r1, #34	; 0x22
   28a2c:	d10e      	bne.n	28a4c <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   28a2e:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   28a32:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   28a34:	f8da 2010 	ldr.w	r2, [sl, #16]
   28a38:	4418      	add	r0, r3
   28a3a:	4790      	blx	r2
        if (output == NULL)
   28a3c:	4683      	mov	fp, r0
   28a3e:	2800      	cmp	r0, #0
   28a40:	f000 80c1 	beq.w	28bc6 <parse_string+0x1c6>
   28a44:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   28a46:	f04f 090c 	mov.w	r9, #12
   28a4a:	e00f      	b.n	28a6c <parse_string+0x6c>
            if (input_end[0] == '\\')
   28a4c:	295c      	cmp	r1, #92	; 0x5c
   28a4e:	d105      	bne.n	28a5c <parse_string+0x5c>
   28a50:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   28a52:	1ab9      	subs	r1, r7, r2
   28a54:	428c      	cmp	r4, r1
   28a56:	f240 80b6 	bls.w	28bc6 <parse_string+0x1c6>
                skipped_bytes++;
   28a5a:	3301      	adds	r3, #1
            input_end++;
   28a5c:	3701      	adds	r7, #1
   28a5e:	e7df      	b.n	28a20 <parse_string+0x20>
        if (*input_pointer != '\\')
   28a60:	782b      	ldrb	r3, [r5, #0]
   28a62:	2b5c      	cmp	r3, #92	; 0x5c
   28a64:	d012      	beq.n	28a8c <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   28a66:	3501      	adds	r5, #1
   28a68:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   28a6c:	42bd      	cmp	r5, r7
   28a6e:	d3f7      	bcc.n	28a60 <parse_string+0x60>
    *output_pointer = '\0';
   28a70:	2300      	movs	r3, #0
   28a72:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   28a74:	2310      	movs	r3, #16
    return true;
   28a76:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   28a78:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   28a7c:	f8da 3000 	ldr.w	r3, [sl]
   28a80:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   28a82:	3701      	adds	r7, #1
   28a84:	f8ca 7008 	str.w	r7, [sl, #8]
}
   28a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   28a8c:	1b7a      	subs	r2, r7, r5
   28a8e:	2a00      	cmp	r2, #0
   28a90:	dd08      	ble.n	28aa4 <parse_string+0xa4>
            switch (input_pointer[1])
   28a92:	786b      	ldrb	r3, [r5, #1]
   28a94:	2b66      	cmp	r3, #102	; 0x66
   28a96:	d063      	beq.n	28b60 <parse_string+0x160>
   28a98:	d816      	bhi.n	28ac8 <parse_string+0xc8>
   28a9a:	2b2f      	cmp	r3, #47	; 0x2f
   28a9c:	d011      	beq.n	28ac2 <parse_string+0xc2>
   28a9e:	d80b      	bhi.n	28ab8 <parse_string+0xb8>
   28aa0:	2b22      	cmp	r3, #34	; 0x22
   28aa2:	d00e      	beq.n	28ac2 <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   28aa4:	f8da 3014 	ldr.w	r3, [sl, #20]
   28aa8:	4658      	mov	r0, fp
   28aaa:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   28aac:	f8da 0000 	ldr.w	r0, [sl]
   28ab0:	1a28      	subs	r0, r5, r0
   28ab2:	f8ca 0008 	str.w	r0, [sl, #8]
   28ab6:	e089      	b.n	28bcc <parse_string+0x1cc>
            switch (input_pointer[1])
   28ab8:	2b5c      	cmp	r3, #92	; 0x5c
   28aba:	d002      	beq.n	28ac2 <parse_string+0xc2>
   28abc:	2b62      	cmp	r3, #98	; 0x62
   28abe:	d1f1      	bne.n	28aa4 <parse_string+0xa4>
                    *output_pointer++ = '\b';
   28ac0:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   28ac2:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   28ac6:	e04d      	b.n	28b64 <parse_string+0x164>
            switch (input_pointer[1])
   28ac8:	2b72      	cmp	r3, #114	; 0x72
   28aca:	d04e      	beq.n	28b6a <parse_string+0x16a>
   28acc:	d803      	bhi.n	28ad6 <parse_string+0xd6>
   28ace:	2b6e      	cmp	r3, #110	; 0x6e
   28ad0:	d1e8      	bne.n	28aa4 <parse_string+0xa4>
                    *output_pointer++ = '\n';
   28ad2:	230a      	movs	r3, #10
   28ad4:	e7f5      	b.n	28ac2 <parse_string+0xc2>
            switch (input_pointer[1])
   28ad6:	2b74      	cmp	r3, #116	; 0x74
   28ad8:	d04a      	beq.n	28b70 <parse_string+0x170>
   28ada:	2b75      	cmp	r3, #117	; 0x75
   28adc:	d1e2      	bne.n	28aa4 <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   28ade:	2a05      	cmp	r2, #5
   28ae0:	dde0      	ble.n	28aa4 <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   28ae2:	1ca8      	adds	r0, r5, #2
   28ae4:	f01b f9ca 	bl	43e7c <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   28ae8:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   28aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   28af0:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   28af2:	d3d7      	bcc.n	28aa4 <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   28af4:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   28af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28afc:	d23b      	bcs.n	28b76 <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   28afe:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   28b00:	1afb      	subs	r3, r7, r3
   28b02:	2b05      	cmp	r3, #5
   28b04:	ddce      	ble.n	28aa4 <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   28b06:	79ab      	ldrb	r3, [r5, #6]
   28b08:	2b5c      	cmp	r3, #92	; 0x5c
   28b0a:	d1cb      	bne.n	28aa4 <parse_string+0xa4>
   28b0c:	79eb      	ldrb	r3, [r5, #7]
   28b0e:	2b75      	cmp	r3, #117	; 0x75
   28b10:	d1c8      	bne.n	28aa4 <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   28b12:	f105 0008 	add.w	r0, r5, #8
   28b16:	f01b f9b1 	bl	43e7c <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   28b1a:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   28b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28b22:	d2bf      	bcs.n	28aa4 <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   28b24:	4b2a      	ldr	r3, [pc, #168]	; (28bd0 <parse_string+0x1d0>)
   28b26:	f3c0 0009 	ubfx	r0, r0, #0, #10
   28b2a:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   28b2e:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   28b30:	4306      	orrs	r6, r0
   28b32:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   28b36:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   28b3a:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28b3c:	1e48      	subs	r0, r1, #1
   28b3e:	b240      	sxtb	r0, r0
   28b40:	fa5f fe80 	uxtb.w	lr, r0
   28b44:	4420      	add	r0, r4
   28b46:	b2f2      	uxtb	r2, r6
   28b48:	f1be 0f00 	cmp.w	lr, #0
   28b4c:	d12f      	bne.n	28bae <parse_string+0x1ae>
    if (utf8_length > 1)
   28b4e:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   28b50:	bf14      	ite	ne
   28b52:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   28b56:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   28b5a:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   28b5c:	440c      	add	r4, r1
                    if (sequence_length == 0)
   28b5e:	e002      	b.n	28b66 <parse_string+0x166>
                    *output_pointer++ = '\f';
   28b60:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   28b64:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   28b66:	441d      	add	r5, r3
   28b68:	e780      	b.n	28a6c <parse_string+0x6c>
                    *output_pointer++ = '\r';
   28b6a:	f04f 030d 	mov.w	r3, #13
   28b6e:	e7a8      	b.n	28ac2 <parse_string+0xc2>
                    *output_pointer++ = '\t';
   28b70:	f04f 0309 	mov.w	r3, #9
   28b74:	e7a5      	b.n	28ac2 <parse_string+0xc2>
    if (codepoint < 0x80)
   28b76:	287f      	cmp	r0, #127	; 0x7f
   28b78:	d90a      	bls.n	28b90 <parse_string+0x190>
    else if (codepoint < 0x800)
   28b7a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   28b7e:	d30c      	bcc.n	28b9a <parse_string+0x19a>
    else if (codepoint < 0x10000)
   28b80:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   28b84:	d30e      	bcc.n	28ba4 <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   28b86:	4b13      	ldr	r3, [pc, #76]	; (28bd4 <parse_string+0x1d4>)
   28b88:	4298      	cmp	r0, r3
   28b8a:	d88b      	bhi.n	28aa4 <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   28b8c:	2306      	movs	r3, #6
   28b8e:	e7d2      	b.n	28b36 <parse_string+0x136>
   28b90:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   28b92:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   28b96:	2101      	movs	r1, #1
   28b98:	e7d0      	b.n	28b3c <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   28b9a:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   28b9c:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   28ba0:	2102      	movs	r1, #2
   28ba2:	e7cb      	b.n	28b3c <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   28ba4:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   28ba6:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   28baa:	2103      	movs	r1, #3
   28bac:	e7c6      	b.n	28b3c <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   28bae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   28bb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28bb6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   28bba:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   28bbe:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28bc0:	fa5f fe8e 	uxtb.w	lr, lr
   28bc4:	e7bf      	b.n	28b46 <parse_string+0x146>
    if (input_pointer != NULL)
   28bc6:	2d00      	cmp	r5, #0
   28bc8:	f47f af70 	bne.w	28aac <parse_string+0xac>
    return false;
   28bcc:	2000      	movs	r0, #0
   28bce:	e75b      	b.n	28a88 <parse_string+0x88>
   28bd0:	000ffc00 	.word	0x000ffc00
   28bd4:	0010ffff 	.word	0x0010ffff

00028bd8 <get_object_item>:
{
   28bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28bda:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   28bdc:	b360      	cbz	r0, 28c38 <get_object_item+0x60>
   28bde:	b359      	cbz	r1, 28c38 <get_object_item+0x60>
    current_element = object->child;
   28be0:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   28be2:	b9fa      	cbnz	r2, 28c24 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28be4:	4e17      	ldr	r6, [pc, #92]	; (28c44 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   28be6:	b33c      	cbz	r4, 28c38 <get_object_item+0x60>
   28be8:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   28bea:	b1c3      	cbz	r3, 28c1e <get_object_item+0x46>
    if (string1 == string2)
   28bec:	42ab      	cmp	r3, r5
   28bee:	d021      	beq.n	28c34 <get_object_item+0x5c>
   28bf0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   28bf4:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28bf6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   28bfa:	460f      	mov	r7, r1
   28bfc:	5d8a      	ldrb	r2, [r1, r6]
   28bfe:	f002 0203 	and.w	r2, r2, #3
   28c02:	2a01      	cmp	r2, #1
   28c04:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28c08:	bf08      	it	eq
   28c0a:	f101 0720 	addeq.w	r7, r1, #32
   28c0e:	5cb0      	ldrb	r0, [r6, r2]
   28c10:	f000 0003 	and.w	r0, r0, #3
   28c14:	2801      	cmp	r0, #1
   28c16:	bf08      	it	eq
   28c18:	3220      	addeq	r2, #32
   28c1a:	4297      	cmp	r7, r2
   28c1c:	d00f      	beq.n	28c3e <get_object_item+0x66>
            current_element = current_element->next;
   28c1e:	6824      	ldr	r4, [r4, #0]
   28c20:	e7e1      	b.n	28be6 <get_object_item+0xe>
            current_element = current_element->next;
   28c22:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   28c24:	b144      	cbz	r4, 28c38 <get_object_item+0x60>
   28c26:	6a21      	ldr	r1, [r4, #32]
   28c28:	b121      	cbz	r1, 28c34 <get_object_item+0x5c>
   28c2a:	4628      	mov	r0, r5
   28c2c:	f7f4 fb10 	bl	1d250 <strcmp>
   28c30:	2800      	cmp	r0, #0
   28c32:	d1f6      	bne.n	28c22 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   28c34:	6a23      	ldr	r3, [r4, #32]
   28c36:	b903      	cbnz	r3, 28c3a <get_object_item+0x62>
        return NULL;
   28c38:	2400      	movs	r4, #0
}
   28c3a:	4620      	mov	r0, r4
   28c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   28c3e:	2900      	cmp	r1, #0
   28c40:	d1d9      	bne.n	28bf6 <get_object_item+0x1e>
   28c42:	e7f7      	b.n	28c34 <get_object_item+0x5c>
   28c44:	0004f20f 	.word	0x0004f20f

00028c48 <print_string_ptr>:
{
   28c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28c4c:	4683      	mov	fp, r0
   28c4e:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   28c50:	460f      	mov	r7, r1
   28c52:	b919      	cbnz	r1, 28c5c <print_string_ptr+0x14>
        return false;
   28c54:	2000      	movs	r0, #0
}
   28c56:	b005      	add	sp, #20
   28c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   28c5c:	4b48      	ldr	r3, [pc, #288]	; (28d80 <print_string_ptr+0x138>)
   28c5e:	881a      	ldrh	r2, [r3, #0]
   28c60:	789b      	ldrb	r3, [r3, #2]
   28c62:	f8ad 200c 	strh.w	r2, [sp, #12]
   28c66:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   28c6a:	b318      	cbz	r0, 28cb4 <print_string_ptr+0x6c>
   28c6c:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   28c6e:	2500      	movs	r5, #0
   28c70:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   28c72:	f812 3b01 	ldrb.w	r3, [r2], #1
   28c76:	bb5b      	cbnz	r3, 28cd0 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   28c78:	ebaa 0a0b 	sub.w	sl, sl, fp
   28c7c:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   28c7e:	f10a 0103 	add.w	r1, sl, #3
   28c82:	4638      	mov	r0, r7
   28c84:	f01b f959 	bl	43f3a <ensure>
    if (output == NULL)
   28c88:	4606      	mov	r6, r0
   28c8a:	2800      	cmp	r0, #0
   28c8c:	d0e2      	beq.n	28c54 <print_string_ptr+0xc>
    if (escape_characters == 0)
   28c8e:	2322      	movs	r3, #34	; 0x22
   28c90:	1c44      	adds	r4, r0, #1
   28c92:	f10a 0901 	add.w	r9, sl, #1
   28c96:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   28c9a:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   28c9c:	bb55      	cbnz	r5, 28cf4 <print_string_ptr+0xac>
   28c9e:	4652      	mov	r2, sl
   28ca0:	4659      	mov	r1, fp
   28ca2:	4620      	mov	r0, r4
   28ca4:	f01c fac0 	bl	45228 <memcpy>
        output[output_length + 1] = '\"';
   28ca8:	2322      	movs	r3, #34	; 0x22
   28caa:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   28cae:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   28cb2:	e00b      	b.n	28ccc <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   28cb4:	2103      	movs	r1, #3
   28cb6:	4638      	mov	r0, r7
   28cb8:	f01b f93f 	bl	43f3a <ensure>
        if (output == NULL)
   28cbc:	2800      	cmp	r0, #0
   28cbe:	d0c9      	beq.n	28c54 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   28cc0:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   28cc4:	a903      	add	r1, sp, #12
   28cc6:	1ad2      	subs	r2, r2, r3
   28cc8:	f01c fcb9 	bl	4563e <strncpy>
    return true;
   28ccc:	2001      	movs	r0, #1
   28cce:	e7c2      	b.n	28c56 <print_string_ptr+0xe>
        switch (*input_pointer)
   28cd0:	2b0d      	cmp	r3, #13
   28cd2:	d807      	bhi.n	28ce4 <print_string_ptr+0x9c>
   28cd4:	2b0c      	cmp	r3, #12
   28cd6:	d203      	bcs.n	28ce0 <print_string_ptr+0x98>
   28cd8:	f1a3 0108 	sub.w	r1, r3, #8
   28cdc:	2902      	cmp	r1, #2
   28cde:	d805      	bhi.n	28cec <print_string_ptr+0xa4>
                escape_characters++;
   28ce0:	3501      	adds	r5, #1
                break;
   28ce2:	e7c5      	b.n	28c70 <print_string_ptr+0x28>
        switch (*input_pointer)
   28ce4:	2b22      	cmp	r3, #34	; 0x22
   28ce6:	d0fb      	beq.n	28ce0 <print_string_ptr+0x98>
   28ce8:	2b5c      	cmp	r3, #92	; 0x5c
   28cea:	d0f9      	beq.n	28ce0 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   28cec:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   28cee:	bf98      	it	ls
   28cf0:	3505      	addls	r5, #5
   28cf2:	e7bd      	b.n	28c70 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28cf4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
                    *output_pointer = 'f';
   28cf8:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   28cfc:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   28d00:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28d02:	9a01      	ldr	r2, [sp, #4]
   28d04:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   28d08:	9201      	str	r2, [sp, #4]
   28d0a:	b92b      	cbnz	r3, 28d18 <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   28d0c:	2222      	movs	r2, #34	; 0x22
   28d0e:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   28d12:	f806 3008 	strb.w	r3, [r6, r8]
   28d16:	e7d9      	b.n	28ccc <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   28d18:	2b1f      	cmp	r3, #31
   28d1a:	d907      	bls.n	28d2c <print_string_ptr+0xe4>
   28d1c:	2b22      	cmp	r3, #34	; 0x22
   28d1e:	d005      	beq.n	28d2c <print_string_ptr+0xe4>
   28d20:	2b5c      	cmp	r3, #92	; 0x5c
   28d22:	d003      	beq.n	28d2c <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   28d24:	4620      	mov	r0, r4
   28d26:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28d28:	1c44      	adds	r4, r0, #1
   28d2a:	e7ea      	b.n	28d02 <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   28d2c:	4620      	mov	r0, r4
            switch (*input_pointer)
   28d2e:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   28d30:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   28d34:	781b      	ldrb	r3, [r3, #0]
   28d36:	2b0c      	cmp	r3, #12
   28d38:	d011      	beq.n	28d5e <print_string_ptr+0x116>
   28d3a:	d808      	bhi.n	28d4e <print_string_ptr+0x106>
   28d3c:	2b09      	cmp	r3, #9
   28d3e:	d013      	beq.n	28d68 <print_string_ptr+0x120>
   28d40:	2b0a      	cmp	r3, #10
   28d42:	d00f      	beq.n	28d64 <print_string_ptr+0x11c>
   28d44:	2b08      	cmp	r3, #8
   28d46:	d111      	bne.n	28d6c <print_string_ptr+0x124>
                    *output_pointer = 'b';
   28d48:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   28d4a:	7063      	strb	r3, [r4, #1]
                    break;
   28d4c:	e7ec      	b.n	28d28 <print_string_ptr+0xe0>
            switch (*input_pointer)
   28d4e:	2b22      	cmp	r3, #34	; 0x22
   28d50:	d0fb      	beq.n	28d4a <print_string_ptr+0x102>
   28d52:	2b5c      	cmp	r3, #92	; 0x5c
   28d54:	d0f9      	beq.n	28d4a <print_string_ptr+0x102>
   28d56:	2b0d      	cmp	r3, #13
   28d58:	d108      	bne.n	28d6c <print_string_ptr+0x124>
                    *output_pointer = 'r';
   28d5a:	2372      	movs	r3, #114	; 0x72
   28d5c:	e7f5      	b.n	28d4a <print_string_ptr+0x102>
                    *output_pointer = 'f';
   28d5e:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   28d62:	e7e1      	b.n	28d28 <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   28d64:	236e      	movs	r3, #110	; 0x6e
   28d66:	e7f0      	b.n	28d4a <print_string_ptr+0x102>
                    *output_pointer = 't';
   28d68:	2374      	movs	r3, #116	; 0x74
   28d6a:	e7ee      	b.n	28d4a <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28d6c:	6839      	ldr	r1, [r7, #0]
   28d6e:	687d      	ldr	r5, [r7, #4]
   28d70:	1a41      	subs	r1, r0, r1
   28d72:	4a04      	ldr	r2, [pc, #16]	; (28d84 <print_string_ptr+0x13c>)
   28d74:	1a69      	subs	r1, r5, r1
   28d76:	f017 fa61 	bl	4023c <sniprintf>
                    output_pointer += 4;
   28d7a:	1d60      	adds	r0, r4, #5
                    break;
   28d7c:	e7d4      	b.n	28d28 <print_string_ptr+0xe0>
   28d7e:	bf00      	nop
   28d80:	0004a254 	.word	0x0004a254
   28d84:	0004a24e 	.word	0x0004a24e

00028d88 <print_value>:
{
   28d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28d8c:	460c      	mov	r4, r1
   28d8e:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   28d90:	4606      	mov	r6, r0
   28d92:	b908      	cbnz	r0, 28d98 <print_value+0x10>
        return false;
   28d94:	2500      	movs	r5, #0
   28d96:	e01d      	b.n	28dd4 <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   28d98:	2900      	cmp	r1, #0
   28d9a:	d0fb      	beq.n	28d94 <print_value+0xc>
    switch ((item->type) & 0xFF)
   28d9c:	7b05      	ldrb	r5, [r0, #12]
   28d9e:	2d08      	cmp	r5, #8
   28da0:	d053      	beq.n	28e4a <print_value+0xc2>
   28da2:	dc1b      	bgt.n	28ddc <print_value+0x54>
   28da4:	2d02      	cmp	r5, #2
   28da6:	d04e      	beq.n	28e46 <print_value+0xbe>
   28da8:	2d04      	cmp	r5, #4
   28daa:	d037      	beq.n	28e1c <print_value+0x94>
   28dac:	2d01      	cmp	r5, #1
   28dae:	d1f1      	bne.n	28d94 <print_value+0xc>
            const char buff[] = "false";
   28db0:	4b87      	ldr	r3, [pc, #540]	; (28fd0 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   28db2:	2106      	movs	r1, #6
            const char buff[] = "false";
   28db4:	6818      	ldr	r0, [r3, #0]
   28db6:	889b      	ldrh	r3, [r3, #4]
   28db8:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   28dba:	4620      	mov	r0, r4
            const char buff[] = "false";
   28dbc:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   28dc0:	f01b f8bb 	bl	43f3a <ensure>
            if (output == NULL)
   28dc4:	2800      	cmp	r0, #0
   28dc6:	d0e5      	beq.n	28d94 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28dc8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28dcc:	a905      	add	r1, sp, #20
   28dce:	1ad2      	subs	r2, r2, r3
   28dd0:	f01c fc35 	bl	4563e <strncpy>
}
   28dd4:	4628      	mov	r0, r5
   28dd6:	b00d      	add	sp, #52	; 0x34
   28dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   28ddc:	2d20      	cmp	r5, #32
   28dde:	d07b      	beq.n	28ed8 <print_value+0x150>
   28de0:	dc06      	bgt.n	28df0 <print_value+0x68>
   28de2:	2d10      	cmp	r5, #16
   28de4:	d1d6      	bne.n	28d94 <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   28de6:	6900      	ldr	r0, [r0, #16]
   28de8:	f7ff ff2e 	bl	28c48 <print_string_ptr>
   28dec:	4605      	mov	r5, r0
   28dee:	e7f1      	b.n	28dd4 <print_value+0x4c>
    switch ((item->type) & 0xFF)
   28df0:	2d40      	cmp	r5, #64	; 0x40
   28df2:	f000 80bc 	beq.w	28f6e <print_value+0x1e6>
   28df6:	2d80      	cmp	r5, #128	; 0x80
   28df8:	d1cc      	bne.n	28d94 <print_value+0xc>
            if (item->valuestring == NULL)
   28dfa:	6900      	ldr	r0, [r0, #16]
   28dfc:	2800      	cmp	r0, #0
   28dfe:	d0c9      	beq.n	28d94 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   28e00:	f7f4 fa30 	bl	1d264 <strlen>
   28e04:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   28e06:	4629      	mov	r1, r5
   28e08:	4620      	mov	r0, r4
   28e0a:	f01b f896 	bl	43f3a <ensure>
            if (output == NULL)
   28e0e:	2800      	cmp	r0, #0
   28e10:	d0c0      	beq.n	28d94 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28e12:	462a      	mov	r2, r5
   28e14:	6931      	ldr	r1, [r6, #16]
   28e16:	f01c fa07 	bl	45228 <memcpy>
   28e1a:	e012      	b.n	28e42 <print_value+0xba>
            const char buff[] = "null";
   28e1c:	4b6d      	ldr	r3, [pc, #436]	; (28fd4 <print_value+0x24c>)
            const char buff[] = "true";
   28e1e:	6818      	ldr	r0, [r3, #0]
   28e20:	791b      	ldrb	r3, [r3, #4]
   28e22:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   28e24:	2105      	movs	r1, #5
   28e26:	4620      	mov	r0, r4
            const char buff[] = "true";
   28e28:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   28e2c:	f01b f885 	bl	43f3a <ensure>
            if (output == NULL)
   28e30:	4605      	mov	r5, r0
   28e32:	2800      	cmp	r0, #0
   28e34:	d0ce      	beq.n	28dd4 <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28e36:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   28e3a:	a905      	add	r1, sp, #20
   28e3c:	1ad2      	subs	r2, r2, r3
   28e3e:	f01c fbfe 	bl	4563e <strncpy>
    return true;
   28e42:	2501      	movs	r5, #1
   28e44:	e7c6      	b.n	28dd4 <print_value+0x4c>
            const char buff[] = "true";
   28e46:	4b64      	ldr	r3, [pc, #400]	; (28fd8 <print_value+0x250>)
   28e48:	e7e9      	b.n	28e1e <print_value+0x96>
    double d = item->valuedouble;
   28e4a:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   28e4e:	2200      	movs	r2, #0
   28e50:	2300      	movs	r3, #0
   28e52:	4640      	mov	r0, r8
   28e54:	4649      	mov	r1, r9
   28e56:	f7f3 fcaf 	bl	1c7b8 <__aeabi_dmul>
   28e5a:	2200      	movs	r2, #0
   28e5c:	2300      	movs	r3, #0
   28e5e:	f7f3 ff13 	bl	1cc88 <__aeabi_dcmpeq>
   28e62:	ae05      	add	r6, sp, #20
   28e64:	b9b0      	cbnz	r0, 28e94 <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   28e66:	495b      	ldr	r1, [pc, #364]	; (28fd4 <print_value+0x24c>)
   28e68:	4630      	mov	r0, r6
   28e6a:	f01c fbb2 	bl	455d2 <strcpy>
   28e6e:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   28e70:	1c69      	adds	r1, r5, #1
   28e72:	4620      	mov	r0, r4
   28e74:	f01b f861 	bl	43f3a <ensure>
    if (output_pointer == NULL)
   28e78:	2800      	cmp	r0, #0
   28e7a:	d08b      	beq.n	28d94 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   28e7c:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   28e7e:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   28e80:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   28e82:	3301      	adds	r3, #1
   28e84:	429d      	cmp	r5, r3
   28e86:	d1fa      	bne.n	28e7e <print_value+0xf6>
    output_pointer[i] = '\0';
   28e88:	2300      	movs	r3, #0
   28e8a:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   28e8c:	68a3      	ldr	r3, [r4, #8]
   28e8e:	441d      	add	r5, r3
   28e90:	60a5      	str	r5, [r4, #8]
    return true;
   28e92:	e7d6      	b.n	28e42 <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28e94:	4a51      	ldr	r2, [pc, #324]	; (28fdc <print_value+0x254>)
   28e96:	211a      	movs	r1, #26
   28e98:	e9cd 8900 	strd	r8, r9, [sp]
   28e9c:	4630      	mov	r0, r6
   28e9e:	f017 f9cd 	bl	4023c <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28ea2:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28ea4:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28ea6:	494e      	ldr	r1, [pc, #312]	; (28fe0 <print_value+0x258>)
   28ea8:	4630      	mov	r0, r6
   28eaa:	f017 f9fb 	bl	402a4 <siscanf>
   28eae:	2801      	cmp	r0, #1
   28eb0:	d106      	bne.n	28ec0 <print_value+0x138>
   28eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   28eb6:	4640      	mov	r0, r8
   28eb8:	4649      	mov	r1, r9
   28eba:	f7f3 fee5 	bl	1cc88 <__aeabi_dcmpeq>
   28ebe:	b938      	cbnz	r0, 28ed0 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   28ec0:	e9cd 8900 	strd	r8, r9, [sp]
   28ec4:	4a47      	ldr	r2, [pc, #284]	; (28fe4 <print_value+0x25c>)
   28ec6:	211a      	movs	r1, #26
   28ec8:	4630      	mov	r0, r6
   28eca:	f017 f9b7 	bl	4023c <sniprintf>
   28ece:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   28ed0:	2d19      	cmp	r5, #25
   28ed2:	f73f af5f 	bgt.w	28d94 <print_value+0xc>
   28ed6:	e7cb      	b.n	28e70 <print_value+0xe8>
            return print_array(item, output_buffer);
   28ed8:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   28eda:	2101      	movs	r1, #1
   28edc:	4620      	mov	r0, r4
   28ede:	f01b f82c 	bl	43f3a <ensure>
    if (output_pointer == NULL)
   28ee2:	2800      	cmp	r0, #0
   28ee4:	f43f af56 	beq.w	28d94 <print_value+0xc>
    *output_pointer = '[';
   28ee8:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   28eea:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   28eec:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   28ef0:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   28ef2:	68a3      	ldr	r3, [r4, #8]
   28ef4:	3301      	adds	r3, #1
   28ef6:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   28ef8:	68e3      	ldr	r3, [r4, #12]
   28efa:	3301      	adds	r3, #1
   28efc:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   28efe:	b96e      	cbnz	r6, 28f1c <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   28f00:	2102      	movs	r1, #2
   28f02:	4620      	mov	r0, r4
   28f04:	f01b f819 	bl	43f3a <ensure>
    if (output_pointer == NULL)
   28f08:	2800      	cmp	r0, #0
   28f0a:	f43f af43 	beq.w	28d94 <print_value+0xc>
    *output_pointer++ = ']';
   28f0e:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   28f10:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   28f12:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   28f14:	68e3      	ldr	r3, [r4, #12]
   28f16:	3b01      	subs	r3, #1
   28f18:	60e3      	str	r3, [r4, #12]
   28f1a:	e792      	b.n	28e42 <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   28f1c:	4621      	mov	r1, r4
   28f1e:	4630      	mov	r0, r6
   28f20:	f7ff ff32 	bl	28d88 <print_value>
   28f24:	2800      	cmp	r0, #0
   28f26:	f43f af35 	beq.w	28d94 <print_value+0xc>
        update_offset(output_buffer);
   28f2a:	4620      	mov	r0, r4
   28f2c:	f01a ffdc 	bl	43ee8 <update_offset>
        if (current_element->next)
   28f30:	6833      	ldr	r3, [r6, #0]
   28f32:	b1bb      	cbz	r3, 28f64 <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   28f34:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   28f36:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   28f38:	2b00      	cmp	r3, #0
   28f3a:	bf14      	ite	ne
   28f3c:	f04f 0902 	movne.w	r9, #2
   28f40:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   28f44:	f109 0101 	add.w	r1, r9, #1
   28f48:	f01a fff7 	bl	43f3a <ensure>
            if (output_pointer == NULL)
   28f4c:	2800      	cmp	r0, #0
   28f4e:	f43f af21 	beq.w	28d94 <print_value+0xc>
            *output_pointer++ = ',';
   28f52:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   28f54:	6963      	ldr	r3, [r4, #20]
   28f56:	b93b      	cbnz	r3, 28f68 <print_value+0x1e0>
            *output_pointer++ = ',';
   28f58:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   28f5a:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   28f5e:	68a3      	ldr	r3, [r4, #8]
   28f60:	444b      	add	r3, r9
   28f62:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   28f64:	6836      	ldr	r6, [r6, #0]
   28f66:	e7ca      	b.n	28efe <print_value+0x176>
                *output_pointer++ = ' ';
   28f68:	1c83      	adds	r3, r0, #2
   28f6a:	7045      	strb	r5, [r0, #1]
   28f6c:	e7f5      	b.n	28f5a <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28f6e:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   28f70:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28f72:	2b00      	cmp	r3, #0
   28f74:	bf14      	ite	ne
   28f76:	2702      	movne	r7, #2
   28f78:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   28f7a:	4620      	mov	r0, r4
   28f7c:	1c79      	adds	r1, r7, #1
   28f7e:	f01a ffdc 	bl	43f3a <ensure>
    if (output_pointer == NULL)
   28f82:	2800      	cmp	r0, #0
   28f84:	f43f af06 	beq.w	28d94 <print_value+0xc>
    *output_pointer++ = '{';
   28f88:	237b      	movs	r3, #123	; 0x7b
   28f8a:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   28f8c:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   28f8e:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   28f90:	3201      	adds	r2, #1
   28f92:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   28f94:	b10b      	cbz	r3, 28f9a <print_value+0x212>
        *output_pointer++ = '\n';
   28f96:	230a      	movs	r3, #10
   28f98:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   28f9a:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   28f9c:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   28fa0:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   28fa2:	2709      	movs	r7, #9
    output_buffer->offset += length;
   28fa4:	60a3      	str	r3, [r4, #8]
    while (current_item)
   28fa6:	6963      	ldr	r3, [r4, #20]
   28fa8:	b9f5      	cbnz	r5, 28fe8 <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   28faa:	2b00      	cmp	r3, #0
   28fac:	d077      	beq.n	2909e <print_value+0x316>
   28fae:	68e1      	ldr	r1, [r4, #12]
   28fb0:	3101      	adds	r1, #1
   28fb2:	4620      	mov	r0, r4
   28fb4:	f01a ffc1 	bl	43f3a <ensure>
    if (output_pointer == NULL)
   28fb8:	2800      	cmp	r0, #0
   28fba:	f43f aeeb 	beq.w	28d94 <print_value+0xc>
    if (output_buffer->format)
   28fbe:	6963      	ldr	r3, [r4, #20]
   28fc0:	2b00      	cmp	r3, #0
   28fc2:	d176      	bne.n	290b2 <print_value+0x32a>
   28fc4:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   28fc6:	227d      	movs	r2, #125	; 0x7d
   28fc8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   28fca:	2200      	movs	r2, #0
   28fcc:	705a      	strb	r2, [r3, #1]
   28fce:	e7a1      	b.n	28f14 <print_value+0x18c>
   28fd0:	0004a26e 	.word	0x0004a26e
   28fd4:	0004a257 	.word	0x0004a257
   28fd8:	0004a274 	.word	0x0004a274
   28fdc:	0004a25c 	.word	0x0004a25c
   28fe0:	0004a263 	.word	0x0004a263
   28fe4:	0004a267 	.word	0x0004a267
        if (output_buffer->format)
   28fe8:	b173      	cbz	r3, 29008 <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   28fea:	68e1      	ldr	r1, [r4, #12]
   28fec:	4620      	mov	r0, r4
   28fee:	f01a ffa4 	bl	43f3a <ensure>
            if (output_pointer == NULL)
   28ff2:	2800      	cmp	r0, #0
   28ff4:	f43f aece 	beq.w	28d94 <print_value+0xc>
   28ff8:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   28ffa:	68e1      	ldr	r1, [r4, #12]
   28ffc:	1a13      	subs	r3, r2, r0
   28ffe:	428b      	cmp	r3, r1
   29000:	d34a      	bcc.n	29098 <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   29002:	68a3      	ldr	r3, [r4, #8]
   29004:	440b      	add	r3, r1
   29006:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   29008:	4621      	mov	r1, r4
   2900a:	6a28      	ldr	r0, [r5, #32]
   2900c:	f7ff fe1c 	bl	28c48 <print_string_ptr>
   29010:	2800      	cmp	r0, #0
   29012:	f43f aebf 	beq.w	28d94 <print_value+0xc>
        update_offset(output_buffer);
   29016:	4620      	mov	r0, r4
   29018:	f01a ff66 	bl	43ee8 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   2901c:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   2901e:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   29020:	2b00      	cmp	r3, #0
   29022:	bf14      	ite	ne
   29024:	2602      	movne	r6, #2
   29026:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   29028:	4631      	mov	r1, r6
   2902a:	f01a ff86 	bl	43f3a <ensure>
        if (output_pointer == NULL)
   2902e:	2800      	cmp	r0, #0
   29030:	f43f aeb0 	beq.w	28d94 <print_value+0xc>
        *output_pointer++ = ':';
   29034:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   29038:	6963      	ldr	r3, [r4, #20]
   2903a:	b103      	cbz	r3, 2903e <print_value+0x2b6>
            *output_pointer++ = '\t';
   2903c:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   2903e:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   29040:	4628      	mov	r0, r5
        output_buffer->offset += length;
   29042:	4431      	add	r1, r6
   29044:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   29046:	4621      	mov	r1, r4
   29048:	f7ff fe9e 	bl	28d88 <print_value>
   2904c:	2800      	cmp	r0, #0
   2904e:	f43f aea1 	beq.w	28d94 <print_value+0xc>
        update_offset(output_buffer);
   29052:	4620      	mov	r0, r4
   29054:	f01a ff48 	bl	43ee8 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   29058:	682e      	ldr	r6, [r5, #0]
   2905a:	6963      	ldr	r3, [r4, #20]
   2905c:	3600      	adds	r6, #0
   2905e:	bf18      	it	ne
   29060:	2601      	movne	r6, #1
   29062:	2b00      	cmp	r3, #0
   29064:	bf18      	it	ne
   29066:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   29068:	4620      	mov	r0, r4
   2906a:	1c71      	adds	r1, r6, #1
   2906c:	f01a ff65 	bl	43f3a <ensure>
        if (output_pointer == NULL)
   29070:	2800      	cmp	r0, #0
   29072:	f43f ae8f 	beq.w	28d94 <print_value+0xc>
        if (current_item->next)
   29076:	682b      	ldr	r3, [r5, #0]
   29078:	b113      	cbz	r3, 29080 <print_value+0x2f8>
            *output_pointer++ = ',';
   2907a:	232c      	movs	r3, #44	; 0x2c
   2907c:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   29080:	6963      	ldr	r3, [r4, #20]
   29082:	b113      	cbz	r3, 2908a <print_value+0x302>
            *output_pointer++ = '\n';
   29084:	230a      	movs	r3, #10
   29086:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   2908a:	2300      	movs	r3, #0
   2908c:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   2908e:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   29090:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   29092:	441e      	add	r6, r3
   29094:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   29096:	e786      	b.n	28fa6 <print_value+0x21e>
                *output_pointer++ = '\t';
   29098:	f802 7b01 	strb.w	r7, [r2], #1
   2909c:	e7ad      	b.n	28ffa <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2909e:	2102      	movs	r1, #2
   290a0:	e787      	b.n	28fb2 <print_value+0x22a>
            *output_pointer++ = '\t';
   290a2:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   290a6:	68e2      	ldr	r2, [r4, #12]
   290a8:	1a19      	subs	r1, r3, r0
   290aa:	3a01      	subs	r2, #1
   290ac:	4291      	cmp	r1, r2
   290ae:	d3f8      	bcc.n	290a2 <print_value+0x31a>
   290b0:	e789      	b.n	28fc6 <print_value+0x23e>
    if (output_buffer->format)
   290b2:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   290b4:	2509      	movs	r5, #9
   290b6:	e7f6      	b.n	290a6 <print_value+0x31e>

000290b8 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   290b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   290ba:	4d24      	ldr	r5, [pc, #144]	; (2914c <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   290bc:	b08b      	sub	sp, #44	; 0x2c
   290be:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   290c0:	2224      	movs	r2, #36	; 0x24
   290c2:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   290c4:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   290c6:	a801      	add	r0, sp, #4
   290c8:	f01c f8ce 	bl	45268 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   290cc:	682b      	ldr	r3, [r5, #0]
   290ce:	f44f 7080 	mov.w	r0, #256	; 0x100
   290d2:	4798      	blx	r3
    buffer->length = default_buffer_size;
   290d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   290d8:	4603      	mov	r3, r0
    buffer->format = format;
   290da:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   290dc:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   290de:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   290e0:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   290e2:	462f      	mov	r7, r5
   290e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   290e8:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   290ec:	b17b      	cbz	r3, 2910e <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   290ee:	a901      	add	r1, sp, #4
   290f0:	4620      	mov	r0, r4
   290f2:	f7ff fe49 	bl	28d88 <print_value>
   290f6:	b150      	cbz	r0, 2910e <print.constprop.14+0x56>
    update_offset(buffer);
   290f8:	a801      	add	r0, sp, #4
   290fa:	f01a fef5 	bl	43ee8 <update_offset>
    if (hooks->reallocate != NULL)
   290fe:	68ae      	ldr	r6, [r5, #8]
   29100:	9903      	ldr	r1, [sp, #12]
   29102:	b15e      	cbz	r6, 2911c <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   29104:	3101      	adds	r1, #1
   29106:	9801      	ldr	r0, [sp, #4]
   29108:	47b0      	blx	r6
        if (printed == NULL) {
   2910a:	4604      	mov	r4, r0
   2910c:	b9d0      	cbnz	r0, 29144 <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   2910e:	9c01      	ldr	r4, [sp, #4]
   29110:	b1c4      	cbz	r4, 29144 <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   29112:	4620      	mov	r0, r4
   29114:	687b      	ldr	r3, [r7, #4]
   29116:	4798      	blx	r3
    return NULL;
   29118:	2400      	movs	r4, #0
   2911a:	e013      	b.n	29144 <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   2911c:	682b      	ldr	r3, [r5, #0]
   2911e:	1c48      	adds	r0, r1, #1
   29120:	4798      	blx	r3
        if (printed == NULL)
   29122:	4604      	mov	r4, r0
   29124:	2800      	cmp	r0, #0
   29126:	d0f2      	beq.n	2910e <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   29128:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2912a:	9b02      	ldr	r3, [sp, #8]
   2912c:	3201      	adds	r2, #1
   2912e:	429a      	cmp	r2, r3
   29130:	bf28      	it	cs
   29132:	461a      	movcs	r2, r3
   29134:	9901      	ldr	r1, [sp, #4]
   29136:	f01c f877 	bl	45228 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   2913a:	9b03      	ldr	r3, [sp, #12]
   2913c:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2913e:	686b      	ldr	r3, [r5, #4]
   29140:	9801      	ldr	r0, [sp, #4]
   29142:	4798      	blx	r3
}
   29144:	4620      	mov	r0, r4
   29146:	b00b      	add	sp, #44	; 0x2c
   29148:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2914a:	bf00      	nop
   2914c:	200206f0 	.word	0x200206f0

00029150 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   29150:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   29152:	4605      	mov	r5, r0
   29154:	b170      	cbz	r0, 29174 <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   29156:	f7f4 f885 	bl	1d264 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   2915a:	4b07      	ldr	r3, [pc, #28]	; (29178 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   2915c:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2915e:	681b      	ldr	r3, [r3, #0]
   29160:	4630      	mov	r0, r6
   29162:	4798      	blx	r3
    if (copy == NULL)
   29164:	4604      	mov	r4, r0
   29166:	b118      	cbz	r0, 29170 <cJSON_strdup.isra.2.constprop.16+0x20>
   29168:	4632      	mov	r2, r6
   2916a:	4629      	mov	r1, r5
   2916c:	f01c f85c 	bl	45228 <memcpy>
}
   29170:	4620      	mov	r0, r4
   29172:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   29174:	4604      	mov	r4, r0
   29176:	e7fb      	b.n	29170 <cJSON_strdup.isra.2.constprop.16+0x20>
   29178:	200206f0 	.word	0x200206f0

0002917c <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   2917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2917e:	460e      	mov	r6, r1
   29180:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   29182:	4607      	mov	r7, r0
   29184:	b1f0      	cbz	r0, 291c4 <add_item_to_object.constprop.12+0x48>
   29186:	b1e9      	cbz	r1, 291c4 <add_item_to_object.constprop.12+0x48>
   29188:	b1e2      	cbz	r2, 291c4 <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   2918a:	b193      	cbz	r3, 291b2 <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   2918c:	68d5      	ldr	r5, [r2, #12]
   2918e:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   29192:	68e3      	ldr	r3, [r4, #12]
   29194:	059b      	lsls	r3, r3, #22
   29196:	d404      	bmi.n	291a2 <add_item_to_object.constprop.12+0x26>
   29198:	6a20      	ldr	r0, [r4, #32]
   2919a:	b110      	cbz	r0, 291a2 <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   2919c:	4b0a      	ldr	r3, [pc, #40]	; (291c8 <add_item_to_object.constprop.12+0x4c>)
   2919e:	685b      	ldr	r3, [r3, #4]
   291a0:	4798      	blx	r3
    item->string = new_key;
   291a2:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   291a4:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   291a6:	4621      	mov	r1, r4
   291a8:	4638      	mov	r0, r7
}
   291aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   291ae:	f01a bea8 	b.w	43f02 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   291b2:	4608      	mov	r0, r1
   291b4:	f7ff ffcc 	bl	29150 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   291b8:	4606      	mov	r6, r0
   291ba:	b118      	cbz	r0, 291c4 <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   291bc:	68e5      	ldr	r5, [r4, #12]
   291be:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   291c2:	e7e6      	b.n	29192 <add_item_to_object.constprop.12+0x16>
}
   291c4:	2000      	movs	r0, #0
   291c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   291c8:	200206f0 	.word	0x200206f0

000291cc <cJSON_InitHooks>:
{
   291cc:	b530      	push	{r4, r5, lr}
   291ce:	4b0d      	ldr	r3, [pc, #52]	; (29204 <cJSON_InitHooks+0x38>)
   291d0:	4d0d      	ldr	r5, [pc, #52]	; (29208 <cJSON_InitHooks+0x3c>)
   291d2:	4c0e      	ldr	r4, [pc, #56]	; (2920c <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   291d4:	b920      	cbnz	r0, 291e0 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   291d6:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   291da:	4a0d      	ldr	r2, [pc, #52]	; (29210 <cJSON_InitHooks+0x44>)
   291dc:	609a      	str	r2, [r3, #8]
   291de:	e00f      	b.n	29200 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   291e0:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   291e2:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   291e4:	2900      	cmp	r1, #0
   291e6:	bf08      	it	eq
   291e8:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   291ea:	2a00      	cmp	r2, #0
   291ec:	bf08      	it	eq
   291ee:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   291f0:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   291f2:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   291f4:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   291f6:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   291f8:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   291fa:	d101      	bne.n	29200 <cJSON_InitHooks+0x34>
   291fc:	42a2      	cmp	r2, r4
   291fe:	d0ec      	beq.n	291da <cJSON_InitHooks+0xe>
}
   29200:	bd30      	pop	{r4, r5, pc}
   29202:	bf00      	nop
   29204:	200206f0 	.word	0x200206f0
   29208:	0003f721 	.word	0x0003f721
   2920c:	0003f731 	.word	0x0003f731
   29210:	0004020d 	.word	0x0004020d

00029214 <cJSON_Delete>:
{
   29214:	b570      	push	{r4, r5, r6, lr}
   29216:	4604      	mov	r4, r0
   29218:	4d0f      	ldr	r5, [pc, #60]	; (29258 <cJSON_Delete+0x44>)
    while (item != NULL)
   2921a:	b904      	cbnz	r4, 2921e <cJSON_Delete+0xa>
}
   2921c:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2921e:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   29220:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   29222:	05d9      	lsls	r1, r3, #23
   29224:	d403      	bmi.n	2922e <cJSON_Delete+0x1a>
   29226:	68a0      	ldr	r0, [r4, #8]
   29228:	b968      	cbnz	r0, 29246 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2922a:	6920      	ldr	r0, [r4, #16]
   2922c:	b988      	cbnz	r0, 29252 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2922e:	68e3      	ldr	r3, [r4, #12]
   29230:	059b      	lsls	r3, r3, #22
   29232:	d403      	bmi.n	2923c <cJSON_Delete+0x28>
   29234:	6a20      	ldr	r0, [r4, #32]
   29236:	b108      	cbz	r0, 2923c <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   29238:	686b      	ldr	r3, [r5, #4]
   2923a:	4798      	blx	r3
        global_hooks.deallocate(item);
   2923c:	4620      	mov	r0, r4
   2923e:	686b      	ldr	r3, [r5, #4]
   29240:	4798      	blx	r3
        item = next;
   29242:	4634      	mov	r4, r6
   29244:	e7e9      	b.n	2921a <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   29246:	f7ff ffe5 	bl	29214 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2924a:	68e3      	ldr	r3, [r4, #12]
   2924c:	05da      	lsls	r2, r3, #23
   2924e:	d5ec      	bpl.n	2922a <cJSON_Delete+0x16>
   29250:	e7ed      	b.n	2922e <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   29252:	686b      	ldr	r3, [r5, #4]
   29254:	4798      	blx	r3
   29256:	e7ea      	b.n	2922e <cJSON_Delete+0x1a>
   29258:	200206f0 	.word	0x200206f0

0002925c <cJSON_ParseWithOpts>:
{
   2925c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29260:	4605      	mov	r5, r0
    global_error.json = NULL;
   29262:	f04f 0800 	mov.w	r8, #0
{
   29266:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   29268:	4e31      	ldr	r6, [pc, #196]	; (29330 <cJSON_ParseWithOpts+0xd4>)
{
   2926a:	460f      	mov	r7, r1
   2926c:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   2926e:	2100      	movs	r1, #0
   29270:	221c      	movs	r2, #28
   29272:	a801      	add	r0, sp, #4
   29274:	f01b fff8 	bl	45268 <memset>
    global_error.position = 0;
   29278:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   2927c:	2d00      	cmp	r5, #0
   2927e:	d04d      	beq.n	2931c <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   29280:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   29282:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   29284:	f7f3 ffee 	bl	1d264 <strlen>
    buffer.hooks = global_hooks;
   29288:	4b2a      	ldr	r3, [pc, #168]	; (29334 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   2928a:	3001      	adds	r0, #1
    buffer.offset = 0;
   2928c:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   29290:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   29294:	ab08      	add	r3, sp, #32
   29296:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   2929a:	f01a fe42 	bl	43f22 <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   2929e:	4604      	mov	r4, r0
   292a0:	2800      	cmp	r0, #0
   292a2:	d030      	beq.n	29306 <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   292a4:	9801      	ldr	r0, [sp, #4]
   292a6:	b128      	cbz	r0, 292b4 <cJSON_ParseWithOpts+0x58>
   292a8:	9b03      	ldr	r3, [sp, #12]
   292aa:	b9e3      	cbnz	r3, 292e6 <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   292ac:	9b02      	ldr	r3, [sp, #8]
   292ae:	2b04      	cmp	r3, #4
   292b0:	d80f      	bhi.n	292d2 <cJSON_ParseWithOpts+0x76>
    return buffer;
   292b2:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   292b4:	f01a fe03 	bl	43ebe <buffer_skip_whitespace>
   292b8:	4601      	mov	r1, r0
   292ba:	4620      	mov	r0, r4
   292bc:	f7f4 fa98 	bl	1d7f0 <parse_value>
   292c0:	b1f0      	cbz	r0, 29300 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   292c2:	f1b9 0f00 	cmp.w	r9, #0
   292c6:	d110      	bne.n	292ea <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   292c8:	bb57      	cbnz	r7, 29320 <cJSON_ParseWithOpts+0xc4>
}
   292ca:	4620      	mov	r0, r4
   292cc:	b009      	add	sp, #36	; 0x24
   292ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   292d2:	2203      	movs	r2, #3
   292d4:	4918      	ldr	r1, [pc, #96]	; (29338 <cJSON_ParseWithOpts+0xdc>)
   292d6:	f01c f9a0 	bl	4561a <strncmp>
   292da:	2800      	cmp	r0, #0
   292dc:	d1e9      	bne.n	292b2 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   292de:	9b03      	ldr	r3, [sp, #12]
   292e0:	3303      	adds	r3, #3
   292e2:	9303      	str	r3, [sp, #12]
   292e4:	e7e5      	b.n	292b2 <cJSON_ParseWithOpts+0x56>
        return NULL;
   292e6:	4640      	mov	r0, r8
   292e8:	e7e4      	b.n	292b4 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   292ea:	a801      	add	r0, sp, #4
   292ec:	f01a fde7 	bl	43ebe <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   292f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   292f4:	4293      	cmp	r3, r2
   292f6:	d203      	bcs.n	29300 <cJSON_ParseWithOpts+0xa4>
   292f8:	9a01      	ldr	r2, [sp, #4]
   292fa:	5cd3      	ldrb	r3, [r2, r3]
   292fc:	2b00      	cmp	r3, #0
   292fe:	d0e3      	beq.n	292c8 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   29300:	4620      	mov	r0, r4
   29302:	f7ff ff87 	bl	29214 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   29306:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2930a:	429a      	cmp	r2, r3
   2930c:	d30d      	bcc.n	2932a <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   2930e:	b103      	cbz	r3, 29312 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   29310:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   29312:	b10f      	cbz	r7, 29318 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   29314:	18ea      	adds	r2, r5, r3
   29316:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   29318:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   2931c:	2400      	movs	r4, #0
   2931e:	e7d4      	b.n	292ca <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   29320:	9b01      	ldr	r3, [sp, #4]
   29322:	9a03      	ldr	r2, [sp, #12]
   29324:	4413      	add	r3, r2
   29326:	603b      	str	r3, [r7, #0]
   29328:	e7cf      	b.n	292ca <cJSON_ParseWithOpts+0x6e>
   2932a:	4613      	mov	r3, r2
   2932c:	e7f1      	b.n	29312 <cJSON_ParseWithOpts+0xb6>
   2932e:	bf00      	nop
   29330:	200247f4 	.word	0x200247f4
   29334:	200206f0 	.word	0x200206f0
   29338:	0004a24a 	.word	0x0004a24a

0002933c <cJSON_CreateNull>:
{
   2933c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2933e:	4b04      	ldr	r3, [pc, #16]	; (29350 <cJSON_CreateNull+0x14>)
   29340:	6818      	ldr	r0, [r3, #0]
   29342:	f01a fdee 	bl	43f22 <cJSON_New_Item.isra.1>
    if(item)
   29346:	b108      	cbz	r0, 2934c <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   29348:	2304      	movs	r3, #4
   2934a:	60c3      	str	r3, [r0, #12]
}
   2934c:	bd08      	pop	{r3, pc}
   2934e:	bf00      	nop
   29350:	200206f0 	.word	0x200206f0

00029354 <cJSON_CreateBool>:
    cJSON *item = cJSON_New_Item(&global_hooks);
   29354:	4b06      	ldr	r3, [pc, #24]	; (29370 <cJSON_CreateBool+0x1c>)
{
   29356:	b510      	push	{r4, lr}
   29358:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2935a:	6818      	ldr	r0, [r3, #0]
   2935c:	f01a fde1 	bl	43f22 <cJSON_New_Item.isra.1>
    if(item)
   29360:	b120      	cbz	r0, 2936c <cJSON_CreateBool+0x18>
        item->type = b ? cJSON_True : cJSON_False;
   29362:	2c00      	cmp	r4, #0
   29364:	bf14      	ite	ne
   29366:	2302      	movne	r3, #2
   29368:	2301      	moveq	r3, #1
   2936a:	60c3      	str	r3, [r0, #12]
}
   2936c:	bd10      	pop	{r4, pc}
   2936e:	bf00      	nop
   29370:	200206f0 	.word	0x200206f0

00029374 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   29374:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   29376:	4b0a      	ldr	r3, [pc, #40]	; (293a0 <cJSON_CreateString+0x2c>)
{
   29378:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2937a:	6818      	ldr	r0, [r3, #0]
   2937c:	f01a fdd1 	bl	43f22 <cJSON_New_Item.isra.1>
    if(item)
   29380:	4604      	mov	r4, r0
   29382:	b158      	cbz	r0, 2939c <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   29384:	2310      	movs	r3, #16
   29386:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   29388:	4628      	mov	r0, r5
   2938a:	f7ff fee1 	bl	29150 <cJSON_strdup.isra.2.constprop.16>
   2938e:	4605      	mov	r5, r0
   29390:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   29392:	b918      	cbnz	r0, 2939c <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   29394:	4620      	mov	r0, r4
   29396:	f7ff ff3d 	bl	29214 <cJSON_Delete>
            return NULL;
   2939a:	462c      	mov	r4, r5
        }
    }

    return item;
}
   2939c:	4620      	mov	r0, r4
   2939e:	bd38      	pop	{r3, r4, r5, pc}
   293a0:	200206f0 	.word	0x200206f0

000293a4 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   293a4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   293a6:	4b04      	ldr	r3, [pc, #16]	; (293b8 <cJSON_CreateArray+0x14>)
   293a8:	6818      	ldr	r0, [r3, #0]
   293aa:	f01a fdba 	bl	43f22 <cJSON_New_Item.isra.1>
    if(item)
   293ae:	b108      	cbz	r0, 293b4 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   293b0:	2320      	movs	r3, #32
   293b2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   293b4:	bd08      	pop	{r3, pc}
   293b6:	bf00      	nop
   293b8:	200206f0 	.word	0x200206f0

000293bc <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   293bc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   293be:	4b04      	ldr	r3, [pc, #16]	; (293d0 <cJSON_CreateObject+0x14>)
   293c0:	6818      	ldr	r0, [r3, #0]
   293c2:	f01a fdae 	bl	43f22 <cJSON_New_Item.isra.1>
    if (item)
   293c6:	b108      	cbz	r0, 293cc <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   293c8:	2340      	movs	r3, #64	; 0x40
   293ca:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   293cc:	bd08      	pop	{r3, pc}
   293ce:	bf00      	nop
   293d0:	200206f0 	.word	0x200206f0

000293d4 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   293d4:	4803      	ldr	r0, [pc, #12]	; (293e4 <cJSON_Init+0x10>)
   293d6:	4b04      	ldr	r3, [pc, #16]	; (293e8 <cJSON_Init+0x14>)
   293d8:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   293da:	4b04      	ldr	r3, [pc, #16]	; (293ec <cJSON_Init+0x18>)
   293dc:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   293de:	f7ff bef5 	b.w	291cc <cJSON_InitHooks>
   293e2:	bf00      	nop
   293e4:	200247fc 	.word	0x200247fc
   293e8:	000440bf 	.word	0x000440bf
   293ec:	000440bb 	.word	0x000440bb

000293f0 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   293f0:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   293f2:	4d19      	ldr	r5, [pc, #100]	; (29458 <_bsdlib_init+0x68>)
{
   293f4:	b085      	sub	sp, #20
	if (!first_time_init) {
   293f6:	782b      	ldrb	r3, [r5, #0]
   293f8:	4c18      	ldr	r4, [pc, #96]	; (2945c <_bsdlib_init+0x6c>)
   293fa:	b933      	cbnz	r3, 2940a <_bsdlib_init+0x1a>
	list->tail = NULL;
   293fc:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   29400:	4817      	ldr	r0, [pc, #92]	; (29460 <_bsdlib_init+0x70>)
   29402:	f01b fd4e 	bl	44ea2 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   29406:	2301      	movs	r3, #1
   29408:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2940a:	2200      	movs	r2, #0
   2940c:	202a      	movs	r0, #42	; 0x2a
   2940e:	4611      	mov	r1, r2
   29410:	f7fd fc04 	bl	26c1c <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   29414:	4a13      	ldr	r2, [pc, #76]	; (29464 <_bsdlib_init+0x74>)
   29416:	ab01      	add	r3, sp, #4
   29418:	ca07      	ldmia	r2, {r0, r1, r2}
   2941a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   2941e:	4618      	mov	r0, r3
   29420:	f010 fa1a 	bl	39858 <bsd_init>
   29424:	4b10      	ldr	r3, [pc, #64]	; (29468 <_bsdlib_init+0x78>)
   29426:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   29428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2942c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29430:	480b      	ldr	r0, [pc, #44]	; (29460 <_bsdlib_init+0x70>)
   29432:	f013 fad7 	bl	3c9e4 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   29436:	6820      	ldr	r0, [r4, #0]
   29438:	b138      	cbz	r0, 2944a <_bsdlib_init+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2943a:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   2943c:	3004      	adds	r0, #4
   2943e:	f014 fee1 	bl	3e204 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   29442:	b114      	cbz	r4, 2944a <_bsdlib_init+0x5a>
   29444:	4620      	mov	r0, r4
   29446:	6824      	ldr	r4, [r4, #0]
   29448:	e7f8      	b.n	2943c <_bsdlib_init+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   2944a:	4805      	ldr	r0, [pc, #20]	; (29460 <_bsdlib_init+0x70>)
   2944c:	f013 fbc8 	bl	3cbe0 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   29450:	2000      	movs	r0, #0
   29452:	b005      	add	sp, #20
   29454:	bd30      	pop	{r4, r5, pc}
   29456:	bf00      	nop
   29458:	2002aec7 	.word	0x2002aec7
   2945c:	20024808 	.word	0x20024808
   29460:	20024810 	.word	0x20024810
   29464:	00046a08 	.word	0x00046a08
   29468:	20024804 	.word	0x20024804

0002946c <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   2946c:	b530      	push	{r4, r5, lr}
   2946e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   29470:	2201      	movs	r2, #1
   29472:	2100      	movs	r1, #0
   29474:	a802      	add	r0, sp, #8
   29476:	ad01      	add	r5, sp, #4
   29478:	f01b fd7c 	bl	44f74 <z_impl_k_sem_init>
	return z_impl_k_mutex_lock(mutex, timeout);
   2947c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29484:	481c      	ldr	r0, [pc, #112]	; (294f8 <bsdlib_shutdown_wait+0x8c>)
   29486:	f013 faad 	bl	3c9e4 <z_impl_k_mutex_lock>
	parent->next = child;
   2948a:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   2948c:	4c1b      	ldr	r4, [pc, #108]	; (294fc <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   2948e:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   29490:	6863      	ldr	r3, [r4, #4]
   29492:	bb2b      	cbnz	r3, 294e0 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   29494:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   29498:	4817      	ldr	r0, [pc, #92]	; (294f8 <bsdlib_shutdown_wait+0x8c>)
   2949a:	f013 fba1 	bl	3cbe0 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2949e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   294a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294a6:	a802      	add	r0, sp, #8
   294a8:	f014 fef0 	bl	3e28c <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   294ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   294b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   294b4:	4810      	ldr	r0, [pc, #64]	; (294f8 <bsdlib_shutdown_wait+0x8c>)
   294b6:	f013 fa95 	bl	3c9e4 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   294ba:	2200      	movs	r2, #0
   294bc:	6823      	ldr	r3, [r4, #0]
   294be:	b153      	cbz	r3, 294d6 <bsdlib_shutdown_wait+0x6a>
   294c0:	42ab      	cmp	r3, r5
   294c2:	d116      	bne.n	294f2 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   294c4:	9901      	ldr	r1, [sp, #4]
   294c6:	b972      	cbnz	r2, 294e6 <bsdlib_shutdown_wait+0x7a>
   294c8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   294ca:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   294cc:	429a      	cmp	r2, r3
   294ce:	d100      	bne.n	294d2 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   294d0:	6061      	str	r1, [r4, #4]
	parent->next = child;
   294d2:	2300      	movs	r3, #0
   294d4:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   294d6:	4808      	ldr	r0, [pc, #32]	; (294f8 <bsdlib_shutdown_wait+0x8c>)
   294d8:	f013 fb82 	bl	3cbe0 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   294dc:	b009      	add	sp, #36	; 0x24
   294de:	bd30      	pop	{r4, r5, pc}
   294e0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   294e2:	6065      	str	r5, [r4, #4]
   294e4:	e7d8      	b.n	29498 <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   294e6:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   294e8:	6861      	ldr	r1, [r4, #4]
   294ea:	4299      	cmp	r1, r3
	list->tail = node;
   294ec:	bf08      	it	eq
   294ee:	6062      	streq	r2, [r4, #4]
   294f0:	e7ef      	b.n	294d2 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   294f2:	461a      	mov	r2, r3
   294f4:	681b      	ldr	r3, [r3, #0]
   294f6:	e7e2      	b.n	294be <bsdlib_shutdown_wait+0x52>
   294f8:	20024810 	.word	0x20024810
   294fc:	20024808 	.word	0x20024808

00029500 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   29500:	4b01      	ldr	r3, [pc, #4]	; (29508 <bsdlib_get_init_ret+0x8>)
   29502:	6818      	ldr	r0, [r3, #0]
   29504:	4770      	bx	lr
   29506:	bf00      	nop
   29508:	20024804 	.word	0x20024804

0002950c <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2950c:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2950e:	4b0d      	ldr	r3, [pc, #52]	; (29544 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   29510:	4c0d      	ldr	r4, [pc, #52]	; (29548 <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   29512:	681a      	ldr	r2, [r3, #0]
   29514:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   29516:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   29518:	4623      	mov	r3, r4
		if (entry->id == id) {
   2951a:	6819      	ldr	r1, [r3, #0]
   2951c:	4281      	cmp	r1, r0
   2951e:	d00e      	beq.n	2953e <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   29520:	b151      	cbz	r1, 29538 <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   29522:	6859      	ldr	r1, [r3, #4]
   29524:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   29526:	42b1      	cmp	r1, r6
   29528:	bfc4      	itt	gt
   2952a:	461c      	movgt	r4, r3
   2952c:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2952e:	3d01      	subs	r5, #1
   29530:	f103 0308 	add.w	r3, r3, #8
   29534:	d1f1      	bne.n	2951a <thread_monitor_entry_get+0xe>
   29536:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   29538:	3a01      	subs	r2, #1
	new_entry->id = id;
   2953a:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2953c:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   2953e:	4618      	mov	r0, r3
   29540:	bd70      	pop	{r4, r5, r6, pc}
   29542:	bf00      	nop
   29544:	20024824 	.word	0x20024824
   29548:	20024830 	.word	0x20024830

0002954c <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2954c:	4668      	mov	r0, sp
   2954e:	f020 0107 	bic.w	r1, r0, #7
   29552:	468d      	mov	sp, r1
   29554:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29556:	4b0d      	ldr	r3, [pc, #52]	; (2958c <rpc_proxy_irq_handler+0x40>)
   29558:	e8d3 2fef 	ldaex	r2, [r3]
   2955c:	3201      	adds	r2, #1
   2955e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   29562:	2900      	cmp	r1, #0
   29564:	d1f8      	bne.n	29558 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   29566:	f00a fd63 	bl	34030 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2956a:	4b09      	ldr	r3, [pc, #36]	; (29590 <rpc_proxy_irq_handler+0x44>)
   2956c:	681c      	ldr	r4, [r3, #0]
   2956e:	b93c      	cbnz	r4, 29580 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   29570:	f7fd fb86 	bl	26c80 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   29574:	f7fd ffdc 	bl	27530 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   29578:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2957c:	4685      	mov	sp, r0
   2957e:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   29580:	1d20      	adds	r0, r4, #4
   29582:	f014 fe3f 	bl	3e204 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29586:	6824      	ldr	r4, [r4, #0]
	return node->next;
   29588:	e7f1      	b.n	2956e <rpc_proxy_irq_handler+0x22>
   2958a:	bf00      	nop
   2958c:	20024824 	.word	0x20024824
   29590:	20024828 	.word	0x20024828

00029594 <bsd_os_timedwait>:
{
   29594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29598:	4688      	mov	r8, r1
   2959a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   2959c:	f01b fd6f 	bl	4507e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   295a0:	f8d8 3000 	ldr.w	r3, [r8]
   295a4:	4606      	mov	r6, r0
   295a6:	2b00      	cmp	r3, #0
   295a8:	4689      	mov	r9, r1
   295aa:	d103      	bne.n	295b4 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   295ac:	f014 fca8 	bl	3df00 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   295b0:	203c      	movs	r0, #60	; 0x3c
   295b2:	e096      	b.n	296e2 <bsd_os_timedwait+0x14e>
		*timeout = SYS_FOREVER_MS;
   295b4:	bfbc      	itt	lt
   295b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   295ba:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   295be:	2201      	movs	r2, #1
   295c0:	2100      	movs	r1, #0
   295c2:	a802      	add	r0, sp, #8
   295c4:	f01b fcd6 	bl	44f74 <z_impl_k_sem_init>
   295c8:	af01      	add	r7, sp, #4
   295ca:	f04f 0320 	mov.w	r3, #32
   295ce:	f3ef 8b11 	mrs	fp, BASEPRI
   295d2:	f383 8811 	msr	BASEPRI, r3
   295d6:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   295da:	f014 fe0d 	bl	3e1f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   295de:	f7ff ff95 	bl	2950c <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   295e2:	494a      	ldr	r1, [pc, #296]	; (2970c <bsd_os_timedwait+0x178>)
   295e4:	6843      	ldr	r3, [r0, #4]
   295e6:	680a      	ldr	r2, [r1, #0]
   295e8:	468a      	mov	sl, r1
   295ea:	4293      	cmp	r3, r2
   295ec:	f04f 0300 	mov.w	r3, #0
   295f0:	d108      	bne.n	29604 <bsd_os_timedwait+0x70>
	parent->next = child;
   295f2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   295f4:	4b46      	ldr	r3, [pc, #280]	; (29710 <bsd_os_timedwait+0x17c>)
   295f6:	685a      	ldr	r2, [r3, #4]
   295f8:	2a00      	cmp	r2, #0
   295fa:	d175      	bne.n	296e8 <bsd_os_timedwait+0x154>
	list->head = node;
   295fc:	e9c3 7700 	strd	r7, r7, [r3]
		allow_to_sleep = true;
   29600:	2301      	movs	r3, #1
   29602:	e000      	b.n	29606 <bsd_os_timedwait+0x72>
	entry->cnt = rpc_event_cnt;
   29604:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   29606:	f38b 8811 	msr	BASEPRI, fp
   2960a:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   2960e:	2b00      	cmp	r3, #0
   29610:	d066      	beq.n	296e0 <bsd_os_timedwait+0x14c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   29612:	f8d8 3000 	ldr.w	r3, [r8]
   29616:	1c5a      	adds	r2, r3, #1
   29618:	d069      	beq.n	296ee <bsd_os_timedwait+0x15a>
   2961a:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2961e:	f240 30e7 	movw	r0, #999	; 0x3e7
   29622:	2100      	movs	r1, #0
   29624:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   29628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2962c:	2300      	movs	r3, #0
   2962e:	fbce 010c 	smlal	r0, r1, lr, ip
   29632:	f7f3 fc43 	bl	1cebc <__aeabi_uldivmod>
   29636:	4602      	mov	r2, r0
   29638:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2963a:	a802      	add	r0, sp, #8
   2963c:	f014 fe26 	bl	3e28c <z_impl_k_sem_take>
	__asm__ volatile(
   29640:	f04f 0320 	mov.w	r3, #32
   29644:	f3ef 8b11 	mrs	fp, BASEPRI
   29648:	f383 8811 	msr	BASEPRI, r3
   2964c:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29650:	2000      	movs	r0, #0
   29652:	4b2f      	ldr	r3, [pc, #188]	; (29710 <bsd_os_timedwait+0x17c>)
   29654:	681a      	ldr	r2, [r3, #0]
   29656:	b15a      	cbz	r2, 29670 <bsd_os_timedwait+0xdc>
   29658:	42ba      	cmp	r2, r7
   2965a:	d153      	bne.n	29704 <bsd_os_timedwait+0x170>
Z_GENLIST_REMOVE(slist, snode)
   2965c:	9f01      	ldr	r7, [sp, #4]
   2965e:	2800      	cmp	r0, #0
   29660:	d14a      	bne.n	296f8 <bsd_os_timedwait+0x164>
   29662:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   29664:	601f      	str	r7, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   29666:	4291      	cmp	r1, r2
   29668:	d100      	bne.n	2966c <bsd_os_timedwait+0xd8>
	list->tail = node;
   2966a:	605f      	str	r7, [r3, #4]
	parent->next = child;
   2966c:	2300      	movs	r3, #0
   2966e:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   29670:	f014 fdc2 	bl	3e1f8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   29674:	f7ff ff4a 	bl	2950c <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   29678:	f8da 3000 	ldr.w	r3, [sl]
   2967c:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2967e:	f38b 8811 	msr	BASEPRI, fp
   29682:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   29686:	f8d8 a000 	ldr.w	sl, [r8]
   2968a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   2968e:	d027      	beq.n	296e0 <bsd_os_timedwait+0x14c>
	return z_impl_k_uptime_ticks();
   29690:	f01b fcf5 	bl	4507e <z_impl_k_uptime_ticks>
   29694:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   29698:	fba6 670c 	umull	r6, r7, r6, ip
   2969c:	fb0c 7709 	mla	r7, ip, r9, r7
   296a0:	0bf2      	lsrs	r2, r6, #15
   296a2:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   296a6:	eb12 060a 	adds.w	r6, r2, sl
   296aa:	ea4f 33d7 	mov.w	r3, r7, lsr #15
   296ae:	eb43 77ea 	adc.w	r7, r3, sl, asr #31
   296b2:	fba0 ab0c 	umull	sl, fp, r0, ip
   296b6:	fb0c bb01 	mla	fp, ip, r1, fp
   296ba:	ea4f 33da 	mov.w	r3, sl, lsr #15
   296be:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   296c2:	1af4      	subs	r4, r6, r3
   296c4:	ea4f 32db 	mov.w	r2, fp, lsr #15
   296c8:	eb67 0502 	sbc.w	r5, r7, r2
	*timeout = remaining > 0 ? remaining : 0;
   296cc:	2c00      	cmp	r4, #0
   296ce:	f175 0300 	sbcs.w	r3, r5, #0
   296d2:	bfb8      	it	lt
   296d4:	2400      	movlt	r4, #0
   296d6:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   296da:	2c00      	cmp	r4, #0
   296dc:	f43f af68 	beq.w	295b0 <bsd_os_timedwait+0x1c>
	return 0;
   296e0:	2000      	movs	r0, #0
}
   296e2:	b009      	add	sp, #36	; 0x24
   296e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296e8:	6017      	str	r7, [r2, #0]
	list->tail = node;
   296ea:	605f      	str	r7, [r3, #4]
   296ec:	e788      	b.n	29600 <bsd_os_timedwait+0x6c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   296ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   296f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296f6:	e7a0      	b.n	2963a <bsd_os_timedwait+0xa6>
	parent->next = child;
   296f8:	6007      	str	r7, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   296fa:	6859      	ldr	r1, [r3, #4]
   296fc:	4291      	cmp	r1, r2
	list->tail = node;
   296fe:	bf08      	it	eq
   29700:	6058      	streq	r0, [r3, #4]
   29702:	e7b3      	b.n	2966c <bsd_os_timedwait+0xd8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29704:	4610      	mov	r0, r2
   29706:	6812      	ldr	r2, [r2, #0]
   29708:	e7a5      	b.n	29656 <bsd_os_timedwait+0xc2>
   2970a:	bf00      	nop
   2970c:	20024824 	.word	0x20024824
   29710:	20024828 	.word	0x20024828

00029714 <bsd_os_errno_set>:
	switch (err_code) {
   29714:	282d      	cmp	r0, #45	; 0x2d
{
   29716:	b510      	push	{r4, lr}
   29718:	4604      	mov	r4, r0
	switch (err_code) {
   2971a:	f000 80a8 	beq.w	2986e <bsd_os_errno_set+0x15a>
   2971e:	dc50      	bgt.n	297c2 <bsd_os_errno_set+0xae>
   29720:	2816      	cmp	r0, #22
   29722:	d009      	beq.n	29738 <bsd_os_errno_set+0x24>
   29724:	dc38      	bgt.n	29798 <bsd_os_errno_set+0x84>
   29726:	2808      	cmp	r0, #8
   29728:	d006      	beq.n	29738 <bsd_os_errno_set+0x24>
   2972a:	dc09      	bgt.n	29740 <bsd_os_errno_set+0x2c>
   2972c:	2802      	cmp	r0, #2
   2972e:	d003      	beq.n	29738 <bsd_os_errno_set+0x24>
   29730:	2805      	cmp	r0, #5
   29732:	d001      	beq.n	29738 <bsd_os_errno_set+0x24>
   29734:	2801      	cmp	r0, #1
   29736:	d10c      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   29738:	f019 faef 	bl	42d1a <__errno>
   2973c:	6004      	str	r4, [r0, #0]
}
   2973e:	bd10      	pop	{r4, pc}
	switch (err_code) {
   29740:	280c      	cmp	r0, #12
   29742:	d0f9      	beq.n	29738 <bsd_os_errno_set+0x24>
   29744:	dc01      	bgt.n	2974a <bsd_os_errno_set+0x36>
   29746:	2809      	cmp	r0, #9
   29748:	e7f5      	b.n	29736 <bsd_os_errno_set+0x22>
   2974a:	280d      	cmp	r0, #13
   2974c:	d0f4      	beq.n	29738 <bsd_os_errno_set+0x24>
   2974e:	280e      	cmp	r0, #14
   29750:	d074      	beq.n	2983c <bsd_os_errno_set+0x128>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   29752:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   29756:	4a63      	ldr	r2, [pc, #396]	; (298e4 <bsd_os_errno_set+0x1d0>)
   29758:	4963      	ldr	r1, [pc, #396]	; (298e8 <bsd_os_errno_set+0x1d4>)
   2975a:	4864      	ldr	r0, [pc, #400]	; (298ec <bsd_os_errno_set+0x1d8>)
   2975c:	f018 fa44 	bl	41be8 <printk>
   29760:	4621      	mov	r1, r4
   29762:	4863      	ldr	r0, [pc, #396]	; (298f0 <bsd_os_errno_set+0x1dc>)
   29764:	f018 fa40 	bl	41be8 <printk>
   29768:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   2976c:	485d      	ldr	r0, [pc, #372]	; (298e4 <bsd_os_errno_set+0x1d0>)
   2976e:	f018 fc55 	bl	4201c <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   29772:	2301      	movs	r3, #1
   29774:	f04f 0000 	mov.w	r0, #0
   29778:	4a5e      	ldr	r2, [pc, #376]	; (298f4 <bsd_os_errno_set+0x1e0>)
   2977a:	f363 0007 	bfi	r0, r3, #0, #8
   2977e:	4b5e      	ldr	r3, [pc, #376]	; (298f8 <bsd_os_errno_set+0x1e4>)
   29780:	495e      	ldr	r1, [pc, #376]	; (298fc <bsd_os_errno_set+0x1e8>)
   29782:	1a9b      	subs	r3, r3, r2
   29784:	08db      	lsrs	r3, r3, #3
   29786:	f363 108f 	bfi	r0, r3, #6, #10
   2978a:	4622      	mov	r2, r4
   2978c:	f018 fc57 	bl	4203e <log_string_sync>
		errno = 0xBAADBAAD;
   29790:	f019 fac3 	bl	42d1a <__errno>
   29794:	4b5a      	ldr	r3, [pc, #360]	; (29900 <bsd_os_errno_set+0x1ec>)
   29796:	e054      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   29798:	2828      	cmp	r0, #40	; 0x28
   2979a:	f000 809f 	beq.w	298dc <bsd_os_errno_set+0x1c8>
   2979e:	dc05      	bgt.n	297ac <bsd_os_errno_set+0x98>
   297a0:	2823      	cmp	r0, #35	; 0x23
   297a2:	d050      	beq.n	29846 <bsd_os_errno_set+0x132>
   297a4:	2825      	cmp	r0, #37	; 0x25
   297a6:	d052      	beq.n	2984e <bsd_os_errno_set+0x13a>
   297a8:	2818      	cmp	r0, #24
   297aa:	e7c4      	b.n	29736 <bsd_os_errno_set+0x22>
   297ac:	282a      	cmp	r0, #42	; 0x2a
   297ae:	d056      	beq.n	2985e <bsd_os_errno_set+0x14a>
   297b0:	db51      	blt.n	29856 <bsd_os_errno_set+0x142>
   297b2:	282b      	cmp	r0, #43	; 0x2b
   297b4:	d057      	beq.n	29866 <bsd_os_errno_set+0x152>
   297b6:	282c      	cmp	r0, #44	; 0x2c
   297b8:	d1cb      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = ESOCKTNOSUPPORT;
   297ba:	f019 faae 	bl	42d1a <__errno>
   297be:	237c      	movs	r3, #124	; 0x7c
   297c0:	e03f      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   297c2:	283c      	cmp	r0, #60	; 0x3c
   297c4:	d06b      	beq.n	2989e <bsd_os_errno_set+0x18a>
   297c6:	dc1d      	bgt.n	29804 <bsd_os_errno_set+0xf0>
   297c8:	2833      	cmp	r0, #51	; 0x33
   297ca:	d05c      	beq.n	29886 <bsd_os_errno_set+0x172>
   297cc:	dc09      	bgt.n	297e2 <bsd_os_errno_set+0xce>
   297ce:	2830      	cmp	r0, #48	; 0x30
   297d0:	d051      	beq.n	29876 <bsd_os_errno_set+0x162>
   297d2:	2832      	cmp	r0, #50	; 0x32
   297d4:	d053      	beq.n	2987e <bsd_os_errno_set+0x16a>
   297d6:	282f      	cmp	r0, #47	; 0x2f
   297d8:	d1bb      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = EAFNOSUPPORT;
   297da:	f019 fa9e 	bl	42d1a <__errno>
   297de:	236a      	movs	r3, #106	; 0x6a
   297e0:	e02f      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   297e2:	2836      	cmp	r0, #54	; 0x36
   297e4:	d053      	beq.n	2988e <bsd_os_errno_set+0x17a>
   297e6:	dc05      	bgt.n	297f4 <bsd_os_errno_set+0xe0>
   297e8:	2834      	cmp	r0, #52	; 0x34
   297ea:	d1b2      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = ENETRESET;
   297ec:	f019 fa95 	bl	42d1a <__errno>
   297f0:	237e      	movs	r3, #126	; 0x7e
   297f2:	e026      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   297f4:	2838      	cmp	r0, #56	; 0x38
   297f6:	d04e      	beq.n	29896 <bsd_os_errno_set+0x182>
   297f8:	2839      	cmp	r0, #57	; 0x39
   297fa:	d1aa      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   297fc:	f019 fa8d 	bl	42d1a <__errno>
   29800:	2380      	movs	r3, #128	; 0x80
   29802:	e01e      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   29804:	287d      	cmp	r0, #125	; 0x7d
   29806:	d056      	beq.n	298b6 <bsd_os_errno_set+0x1a2>
   29808:	dc0c      	bgt.n	29824 <bsd_os_errno_set+0x110>
   2980a:	2870      	cmp	r0, #112	; 0x70
   2980c:	d04b      	beq.n	298a6 <bsd_os_errno_set+0x192>
   2980e:	dc01      	bgt.n	29814 <bsd_os_errno_set+0x100>
   29810:	2869      	cmp	r0, #105	; 0x69
   29812:	e790      	b.n	29736 <bsd_os_errno_set+0x22>
   29814:	2872      	cmp	r0, #114	; 0x72
   29816:	d04a      	beq.n	298ae <bsd_os_errno_set+0x19a>
   29818:	2873      	cmp	r0, #115	; 0x73
   2981a:	d19a      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   2981c:	f019 fa7d 	bl	42d1a <__errno>
   29820:	2377      	movs	r3, #119	; 0x77
   29822:	e00e      	b.n	29842 <bsd_os_errno_set+0x12e>
	switch (err_code) {
   29824:	287f      	cmp	r0, #127	; 0x7f
   29826:	d04f      	beq.n	298c8 <bsd_os_errno_set+0x1b4>
   29828:	db49      	blt.n	298be <bsd_os_errno_set+0x1aa>
   2982a:	2880      	cmp	r0, #128	; 0x80
   2982c:	d051      	beq.n	298d2 <bsd_os_errno_set+0x1be>
   2982e:	2881      	cmp	r0, #129	; 0x81
   29830:	d18f      	bne.n	29752 <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   29832:	f019 fa72 	bl	42d1a <__errno>
   29836:	f240 73d4 	movw	r3, #2004	; 0x7d4
   2983a:	e002      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EFAULT;
   2983c:	f019 fa6d 	bl	42d1a <__errno>
   29840:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   29842:	6003      	str	r3, [r0, #0]
}
   29844:	e77b      	b.n	2973e <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   29846:	f019 fa68 	bl	42d1a <__errno>
   2984a:	230b      	movs	r3, #11
   2984c:	e7f9      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EDOM;
   2984e:	f019 fa64 	bl	42d1a <__errno>
   29852:	2321      	movs	r3, #33	; 0x21
   29854:	e7f5      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EPROTOTYPE;
   29856:	f019 fa60 	bl	42d1a <__errno>
   2985a:	236b      	movs	r3, #107	; 0x6b
   2985c:	e7f1      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ENOPROTOOPT;
   2985e:	f019 fa5c 	bl	42d1a <__errno>
   29862:	236d      	movs	r3, #109	; 0x6d
   29864:	e7ed      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EPROTONOSUPPORT;
   29866:	f019 fa58 	bl	42d1a <__errno>
   2986a:	237b      	movs	r3, #123	; 0x7b
   2986c:	e7e9      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EOPNOTSUPP;
   2986e:	f019 fa54 	bl	42d1a <__errno>
   29872:	235f      	movs	r3, #95	; 0x5f
   29874:	e7e5      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EADDRINUSE;
   29876:	f019 fa50 	bl	42d1a <__errno>
   2987a:	2370      	movs	r3, #112	; 0x70
   2987c:	e7e1      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ENETDOWN;
   2987e:	f019 fa4c 	bl	42d1a <__errno>
   29882:	2373      	movs	r3, #115	; 0x73
   29884:	e7dd      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ENETUNREACH;
   29886:	f019 fa48 	bl	42d1a <__errno>
   2988a:	2372      	movs	r3, #114	; 0x72
   2988c:	e7d9      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ECONNRESET;
   2988e:	f019 fa44 	bl	42d1a <__errno>
   29892:	2368      	movs	r3, #104	; 0x68
   29894:	e7d5      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EISCONN;
   29896:	f019 fa40 	bl	42d1a <__errno>
   2989a:	237f      	movs	r3, #127	; 0x7f
   2989c:	e7d1      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ETIMEDOUT;
   2989e:	f019 fa3c 	bl	42d1a <__errno>
   298a2:	2374      	movs	r3, #116	; 0x74
   298a4:	e7cd      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EHOSTDOWN;
   298a6:	f019 fa38 	bl	42d1a <__errno>
   298aa:	2375      	movs	r3, #117	; 0x75
   298ac:	e7c9      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EALREADY;
   298ae:	f019 fa34 	bl	42d1a <__errno>
   298b2:	2378      	movs	r3, #120	; 0x78
   298b4:	e7c5      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ECANCELED;
   298b6:	f019 fa30 	bl	42d1a <__errno>
   298ba:	238c      	movs	r3, #140	; 0x8c
   298bc:	e7c1      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = ENOKEY;
   298be:	f019 fa2c 	bl	42d1a <__errno>
   298c2:	f240 73d1 	movw	r3, #2001	; 0x7d1
   298c6:	e7bc      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EKEYEXPIRED;
   298c8:	f019 fa27 	bl	42d1a <__errno>
   298cc:	f240 73d2 	movw	r3, #2002	; 0x7d2
   298d0:	e7b7      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EKEYREVOKED;
   298d2:	f019 fa22 	bl	42d1a <__errno>
   298d6:	f240 73d3 	movw	r3, #2003	; 0x7d3
   298da:	e7b2      	b.n	29842 <bsd_os_errno_set+0x12e>
		errno = EMSGSIZE;
   298dc:	f019 fa1d 	bl	42d1a <__errno>
   298e0:	237a      	movs	r3, #122	; 0x7a
   298e2:	e7ae      	b.n	29842 <bsd_os_errno_set+0x12e>
   298e4:	0004a279 	.word	0x0004a279
   298e8:	0004edb2 	.word	0x0004edb2
   298ec:	0004825b 	.word	0x0004825b
   298f0:	0004a29d 	.word	0x0004a29d
   298f4:	00046878 	.word	0x00046878
   298f8:	000468a8 	.word	0x000468a8
   298fc:	0004a2c4 	.word	0x0004a2c4
   29900:	baadbaad 	.word	0xbaadbaad

00029904 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29908:	4b01      	ldr	r3, [pc, #4]	; (29910 <bsd_os_application_irq_set+0xc>)
   2990a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2990e:	4770      	bx	lr
   29910:	e000e100 	.word	0xe000e100

00029914 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   29918:	4b01      	ldr	r3, [pc, #4]	; (29920 <bsd_os_application_irq_clear+0xc>)
   2991a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2991e:	4770      	bx	lr
   29920:	e000e100 	.word	0xe000e100

00029924 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29924:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29928:	4b01      	ldr	r3, [pc, #4]	; (29930 <bsd_os_trace_irq_set+0xc>)
   2992a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2992e:	4770      	bx	lr
   29930:	e000e100 	.word	0xe000e100

00029934 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29934:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29938:	4b01      	ldr	r3, [pc, #4]	; (29940 <bsd_os_trace_irq_clear+0xc>)
   2993a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2993e:	4770      	bx	lr
   29940:	e000e100 	.word	0xe000e100

00029944 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   29944:	b508      	push	{r3, lr}
	list->head = NULL;
   29946:	2300      	movs	r3, #0
   29948:	4a07      	ldr	r2, [pc, #28]	; (29968 <bsd_os_init+0x24>)
	list->tail = NULL;
   2994a:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2994e:	4a07      	ldr	r2, [pc, #28]	; (2996c <bsd_os_init+0x28>)
   29950:	e8d2 1fef 	ldaex	r1, [r2]
   29954:	e8c2 3fe0 	stlex	r0, r3, [r2]
   29958:	2800      	cmp	r0, #0
   2995a:	d1f9      	bne.n	29950 <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   2995c:	f01a fbe1 	bl	44122 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   29960:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   29964:	f01a bbd2 	b.w	4410c <trace_task_create>
   29968:	20024828 	.word	0x20024828
   2996c:	20024824 	.word	0x20024824

00029970 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   29970:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   29974:	d03c      	beq.n	299f0 <z_to_nrf_optname+0x80>
   29976:	dc04      	bgt.n	29982 <z_to_nrf_optname+0x12>
   29978:	2801      	cmp	r0, #1
   2997a:	d042      	beq.n	29a02 <z_to_nrf_optname+0x92>
			break;
		}
		break;

	default:
		retval = -1;
   2997c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   29980:	4770      	bx	lr
	switch (z_in_level) {
   29982:	f240 2302 	movw	r3, #514	; 0x202
   29986:	4298      	cmp	r0, r3
   29988:	d060      	beq.n	29a4c <z_to_nrf_optname+0xdc>
   2998a:	f240 2303 	movw	r3, #515	; 0x203
   2998e:	4298      	cmp	r0, r3
   29990:	d1f4      	bne.n	2997c <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   29992:	3901      	subs	r1, #1
   29994:	2913      	cmp	r1, #19
   29996:	d8f1      	bhi.n	2997c <z_to_nrf_optname+0xc>
   29998:	a301      	add	r3, pc, #4	; (adr r3, 299a0 <z_to_nrf_optname+0x30>)
   2999a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2999e:	bf00      	nop
   299a0:	00029a59 	.word	0x00029a59
   299a4:	00029a31 	.word	0x00029a31
   299a8:	00029a35 	.word	0x00029a35
   299ac:	00029a39 	.word	0x00029a39
   299b0:	00029a3d 	.word	0x00029a3d
   299b4:	00029a41 	.word	0x00029a41
   299b8:	00029a45 	.word	0x00029a45
   299bc:	0002997d 	.word	0x0002997d
   299c0:	0002997d 	.word	0x0002997d
   299c4:	0002997d 	.word	0x0002997d
   299c8:	0002997d 	.word	0x0002997d
   299cc:	0002997d 	.word	0x0002997d
   299d0:	0002997d 	.word	0x0002997d
   299d4:	0002997d 	.word	0x0002997d
   299d8:	0002997d 	.word	0x0002997d
   299dc:	0002997d 	.word	0x0002997d
   299e0:	0002997d 	.word	0x0002997d
   299e4:	0002997d 	.word	0x0002997d
   299e8:	0002997d 	.word	0x0002997d
   299ec:	00029a49 	.word	0x00029a49
		switch (z_in_optname) {
   299f0:	3901      	subs	r1, #1
   299f2:	2906      	cmp	r1, #6
   299f4:	d8c2      	bhi.n	2997c <z_to_nrf_optname+0xc>
   299f6:	e8df f001 	tbb	[pc, r1]
   299fa:	211b      	.short	0x211b
   299fc:	2f1f2523 	.word	0x2f1f2523
   29a00:	1d          	.byte	0x1d
   29a01:	00          	.byte	0x00
		switch (z_in_optname) {
   29a02:	2915      	cmp	r1, #21
   29a04:	d00d      	beq.n	29a22 <z_to_nrf_optname+0xb2>
   29a06:	dc07      	bgt.n	29a18 <z_to_nrf_optname+0xa8>
   29a08:	2904      	cmp	r1, #4
   29a0a:	d015      	beq.n	29a38 <z_to_nrf_optname+0xc8>
   29a0c:	2914      	cmp	r1, #20
   29a0e:	d008      	beq.n	29a22 <z_to_nrf_optname+0xb2>
   29a10:	2902      	cmp	r1, #2
   29a12:	d1b3      	bne.n	2997c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   29a14:	2328      	movs	r3, #40	; 0x28
   29a16:	e020      	b.n	29a5a <z_to_nrf_optname+0xea>
   29a18:	291e      	cmp	r1, #30
   29a1a:	d002      	beq.n	29a22 <z_to_nrf_optname+0xb2>
   29a1c:	dc04      	bgt.n	29a28 <z_to_nrf_optname+0xb8>
   29a1e:	2919      	cmp	r1, #25
   29a20:	d1ac      	bne.n	2997c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   29a22:	6011      	str	r1, [r2, #0]
	int retval = 0;
   29a24:	2000      	movs	r0, #0
			break;
   29a26:	4770      	bx	lr
   29a28:	291f      	cmp	r1, #31
   29a2a:	d0fa      	beq.n	29a22 <z_to_nrf_optname+0xb2>
   29a2c:	2920      	cmp	r1, #32
   29a2e:	e7f7      	b.n	29a20 <z_to_nrf_optname+0xb0>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   29a30:	2302      	movs	r3, #2
   29a32:	e012      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   29a34:	2303      	movs	r3, #3
   29a36:	e010      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   29a38:	2304      	movs	r3, #4
   29a3a:	e00e      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   29a3c:	2305      	movs	r3, #5
   29a3e:	e00c      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   29a40:	2306      	movs	r3, #6
   29a42:	e00a      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   29a44:	2307      	movs	r3, #7
   29a46:	e008      	b.n	29a5a <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29a48:	2314      	movs	r3, #20
   29a4a:	e006      	b.n	29a5a <z_to_nrf_optname+0xea>
		switch (z_in_optname) {
   29a4c:	2902      	cmp	r1, #2
   29a4e:	d0ef      	beq.n	29a30 <z_to_nrf_optname+0xc0>
   29a50:	2903      	cmp	r1, #3
   29a52:	d0ef      	beq.n	29a34 <z_to_nrf_optname+0xc4>
   29a54:	2901      	cmp	r1, #1
   29a56:	d191      	bne.n	2997c <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   29a58:	2301      	movs	r3, #1
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   29a5a:	6013      	str	r3, [r2, #0]
   29a5c:	e7e2      	b.n	29a24 <z_to_nrf_optname+0xb4>
   29a5e:	bf00      	nop

00029a60 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   29a60:	f240 1303 	movw	r3, #259	; 0x103
{
   29a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   29a68:	4299      	cmp	r1, r3
{
   29a6a:	b093      	sub	sp, #76	; 0x4c
	switch (request) {
   29a6c:	f000 8098 	beq.w	29ba0 <nrf91_socket_offload_ioctl+0x140>
   29a70:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   29a74:	d005      	beq.n	29a82 <nrf91_socket_offload_ioctl+0x22>
   29a76:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   29a7a:	d172      	bne.n	29b62 <nrf91_socket_offload_ioctl+0x102>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   29a7c:	f06f 0411 	mvn.w	r4, #17
   29a80:	e01c      	b.n	29abc <nrf91_socket_offload_ioctl+0x5c>
	for (int i = 0; i < nfds; i++) {
   29a82:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   29a86:	e9d2 a900 	ldrd	sl, r9, [r2]
		timeout = va_arg(args, int);
   29a8a:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29a8c:	2100      	movs	r1, #0
   29a8e:	2240      	movs	r2, #64	; 0x40
   29a90:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   29a92:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   29a94:	4655      	mov	r5, sl
   29a96:	f01b fbe7 	bl	45268 <memset>
   29a9a:	4657      	mov	r7, sl
	int retval = 0;
   29a9c:	4644      	mov	r4, r8
		tmp[i].events = 0;
   29a9e:	46c3      	mov	fp, r8
   29aa0:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   29aa2:	45c1      	cmp	r9, r8
   29aa4:	dc0e      	bgt.n	29ac4 <nrf91_socket_offload_ioctl+0x64>
	if (retval > 0) {
   29aa6:	2c00      	cmp	r4, #0
   29aa8:	dc08      	bgt.n	29abc <nrf91_socket_offload_ioctl+0x5c>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29aaa:	9a01      	ldr	r2, [sp, #4]
   29aac:	4649      	mov	r1, r9
   29aae:	a802      	add	r0, sp, #8
   29ab0:	f010 faa8 	bl	3a004 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   29ab4:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29ab6:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   29ab8:	4599      	cmp	r9, r3
   29aba:	dc29      	bgt.n	29b10 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   29abc:	4620      	mov	r0, r4
   29abe:	b013      	add	sp, #76	; 0x4c
   29ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   29ac4:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   29ac6:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   29aca:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   29acc:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   29ad0:	da05      	bge.n	29ade <nrf91_socket_offload_ioctl+0x7e>
			tmp[i].fd = fds[i].fd;
   29ad2:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   29ad4:	f108 0801 	add.w	r8, r8, #1
   29ad8:	3608      	adds	r6, #8
   29ada:	3708      	adds	r7, #8
   29adc:	e7e1      	b.n	29aa2 <nrf91_socket_offload_ioctl+0x42>
			obj = z_get_fd_obj(fds[i].fd,
   29ade:	2286      	movs	r2, #134	; 0x86
   29ae0:	4931      	ldr	r1, [pc, #196]	; (29ba8 <nrf91_socket_offload_ioctl+0x148>)
   29ae2:	f7fa fae7 	bl	240b4 <z_get_fd_obj>
			if (obj != NULL) {
   29ae6:	b178      	cbz	r0, 29b08 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   29ae8:	3801      	subs	r0, #1
   29aea:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   29aec:	88b9      	ldrh	r1, [r7, #4]
   29aee:	07ca      	lsls	r2, r1, #31
			tmp[i].events |= NRF_POLLIN;
   29af0:	bf42      	ittt	mi
   29af2:	88b2      	ldrhmi	r2, [r6, #4]
   29af4:	f042 0201 	orrmi.w	r2, r2, #1
   29af8:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   29afa:	074b      	lsls	r3, r1, #29
			tmp[i].events |= NRF_POLLOUT;
   29afc:	bf42      	ittt	mi
   29afe:	88b2      	ldrhmi	r2, [r6, #4]
   29b00:	f042 0202 	orrmi.w	r2, r2, #2
   29b04:	80b2      	strhmi	r2, [r6, #4]
   29b06:	e7e5      	b.n	29ad4 <nrf91_socket_offload_ioctl+0x74>
				fds[i].revents = POLLNVAL;
   29b08:	2220      	movs	r2, #32
				retval++;
   29b0a:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   29b0c:	80fa      	strh	r2, [r7, #6]
				retval++;
   29b0e:	e7ed      	b.n	29aec <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   29b10:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   29b14:	2a00      	cmp	r2, #0
   29b16:	db21      	blt.n	29b5c <nrf91_socket_offload_ioctl+0xfc>
		if (tmp[i].revents & NRF_POLLIN) {
   29b18:	aa02      	add	r2, sp, #8
   29b1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   29b1e:	88d2      	ldrh	r2, [r2, #6]
   29b20:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   29b22:	bf42      	ittt	mi
   29b24:	88e9      	ldrhmi	r1, [r5, #6]
   29b26:	f041 0101 	orrmi.w	r1, r1, #1
   29b2a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   29b2c:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   29b2e:	bf42      	ittt	mi
   29b30:	88e9      	ldrhmi	r1, [r5, #6]
   29b32:	f041 0104 	orrmi.w	r1, r1, #4
   29b36:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   29b38:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   29b3a:	bf42      	ittt	mi
   29b3c:	88e9      	ldrhmi	r1, [r5, #6]
   29b3e:	f041 0108 	orrmi.w	r1, r1, #8
   29b42:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   29b44:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   29b46:	bf42      	ittt	mi
   29b48:	88e9      	ldrhmi	r1, [r5, #6]
   29b4a:	f041 0120 	orrmi.w	r1, r1, #32
   29b4e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   29b50:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   29b52:	bf42      	ittt	mi
   29b54:	88ea      	ldrhmi	r2, [r5, #6]
   29b56:	f042 0210 	orrmi.w	r2, r2, #16
   29b5a:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   29b5c:	3301      	adds	r3, #1
   29b5e:	3508      	adds	r5, #8
   29b60:	e7aa      	b.n	29ab8 <nrf91_socket_offload_ioctl+0x58>
	switch (cmd) {
   29b62:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   29b64:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	switch (cmd) {
   29b68:	d00b      	beq.n	29b82 <nrf91_socket_offload_ioctl+0x122>
   29b6a:	2904      	cmp	r1, #4
   29b6c:	d111      	bne.n	29b92 <nrf91_socket_offload_ioctl+0x132>
		flags = va_arg(args, int);
   29b6e:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   29b70:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   29b74:	d10d      	bne.n	29b92 <nrf91_socket_offload_ioctl+0x132>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   29b76:	1392      	asrs	r2, r2, #14
   29b78:	2101      	movs	r1, #1
   29b7a:	f010 fa45 	bl	3a008 <nrf_fcntl>
   29b7e:	4604      	mov	r4, r0
		break;
   29b80:	e79c      	b.n	29abc <nrf91_socket_offload_ioctl+0x5c>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   29b82:	2200      	movs	r2, #0
   29b84:	2102      	movs	r1, #2
   29b86:	f010 fa3f 	bl	3a008 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   29b8a:	0380      	lsls	r0, r0, #14
   29b8c:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   29b90:	e794      	b.n	29abc <nrf91_socket_offload_ioctl+0x5c>
	errno = EINVAL;
   29b92:	f019 f8c2 	bl	42d1a <__errno>
   29b96:	2316      	movs	r3, #22
	return retval;
   29b98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   29b9c:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   29b9e:	e78d      	b.n	29abc <nrf91_socket_offload_ioctl+0x5c>
		return -EOPNOTSUPP;
   29ba0:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   29ba4:	e78a      	b.n	29abc <nrf91_socket_offload_ioctl+0x5c>
   29ba6:	bf00      	nop
   29ba8:	00046ed8 	.word	0x00046ed8

00029bac <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   29bac:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   29bae:	4b03      	ldr	r3, [pc, #12]	; (29bbc <nrf91_socket_iface_init+0x10>)
   29bb0:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   29bb2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29bb4:	4802      	ldr	r0, [pc, #8]	; (29bc0 <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   29bb6:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29bb8:	f7fb bd62 	b.w	25680 <socket_offload_dns_register>
   29bbc:	20024880 	.word	0x20024880
   29bc0:	00046ed0 	.word	0x00046ed0

00029bc4 <nrf91_socket_offload_accept>:
{
   29bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29bc8:	b08a      	sub	sp, #40	; 0x28
   29bca:	4605      	mov	r5, r0
   29bcc:	460c      	mov	r4, r1
   29bce:	4616      	mov	r6, r2
	int fd = z_reserve_fd();
   29bd0:	f7fa faa0 	bl	24114 <z_reserve_fd>
	if (fd < 0) {
   29bd4:	1e07      	subs	r7, r0, #0
	int sd = OBJ_TO_SD(obj);
   29bd6:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
	if (fd < 0) {
   29bda:	da05      	bge.n	29be8 <nrf91_socket_offload_accept+0x24>
	return -1;
   29bdc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
}
   29be0:	4638      	mov	r0, r7
   29be2:	b00a      	add	sp, #40	; 0x28
   29be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   29be8:	b324      	cbz	r4, 29c34 <nrf91_socket_offload_accept+0x70>
   29bea:	b336      	cbz	r6, 29c3a <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29bec:	6832      	ldr	r2, [r6, #0]
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   29bee:	ad01      	add	r5, sp, #4
		if (*addrlen == sizeof(struct sockaddr_in)) {
   29bf0:	2a08      	cmp	r2, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   29bf2:	bf0c      	ite	eq
   29bf4:	2210      	moveq	r2, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   29bf6:	2224      	movne	r2, #36	; 0x24
   29bf8:	9200      	str	r2, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   29bfa:	466a      	mov	r2, sp
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   29bfc:	4629      	mov	r1, r5
   29bfe:	4618      	mov	r0, r3
   29c00:	f010 f99c 	bl	39f3c <nrf_accept>
	if (new_sd < 0) {
   29c04:	f1b0 0800 	subs.w	r8, r0, #0
   29c08:	dbe8      	blt.n	29bdc <nrf91_socket_offload_accept+0x18>
	if ((addr != NULL) && (addrlen != NULL)) {
   29c0a:	b164      	cbz	r4, 29c26 <nrf91_socket_offload_accept+0x62>
   29c0c:	b15e      	cbz	r6, 29c26 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   29c0e:	686b      	ldr	r3, [r5, #4]
   29c10:	2b02      	cmp	r3, #2
   29c12:	d115      	bne.n	29c40 <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   29c14:	2308      	movs	r3, #8
   29c16:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   29c18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   29c1c:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   29c1e:	2301      	movs	r3, #1
   29c20:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29c22:	9b04      	ldr	r3, [sp, #16]
   29c24:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   29c26:	4a0d      	ldr	r2, [pc, #52]	; (29c5c <nrf91_socket_offload_accept+0x98>)
   29c28:	f108 0101 	add.w	r1, r8, #1
   29c2c:	4638      	mov	r0, r7
   29c2e:	f7fa faa3 	bl	24178 <z_finalize_fd>
	return fd;
   29c32:	e7d5      	b.n	29be0 <nrf91_socket_offload_accept+0x1c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29c34:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29c36:	4625      	mov	r5, r4
   29c38:	e7e0      	b.n	29bfc <nrf91_socket_offload_accept+0x38>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   29c3a:	4632      	mov	r2, r6
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   29c3c:	4635      	mov	r5, r6
   29c3e:	e7dd      	b.n	29bfc <nrf91_socket_offload_accept+0x38>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   29c40:	2b0a      	cmp	r3, #10
   29c42:	d106      	bne.n	29c52 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   29c44:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   29c46:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   29c48:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   29c4a:	4620      	mov	r0, r4
   29c4c:	f01a fb5e 	bl	4430c <nrf_to_z_ipv6>
   29c50:	e7e9      	b.n	29c26 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   29c52:	4638      	mov	r0, r7
   29c54:	f7fa fa9a 	bl	2418c <z_free_fd>
   29c58:	e7c0      	b.n	29bdc <nrf91_socket_offload_accept+0x18>
   29c5a:	bf00      	nop
   29c5c:	00046ed8 	.word	0x00046ed8

00029c60 <nrf91_socket_offload_sendmsg>:
{
   29c60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29c64:	4607      	mov	r7, r0
   29c66:	4690      	mov	r8, r2
	if (msg == NULL) {
   29c68:	460c      	mov	r4, r1
   29c6a:	b319      	cbz	r1, 29cb4 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29c6c:	2300      	movs	r3, #0
	ssize_t len = 0;
   29c6e:	461a      	mov	r2, r3
   29c70:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29c72:	4298      	cmp	r0, r3
   29c74:	d128      	bne.n	29cc8 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   29c76:	2a80      	cmp	r2, #128	; 0x80
   29c78:	d857      	bhi.n	29d2a <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29c7a:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   29c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c84:	482a      	ldr	r0, [pc, #168]	; (29d30 <nrf91_socket_offload_sendmsg+0xd0>)
   29c86:	f012 fead 	bl	3c9e4 <z_impl_k_mutex_lock>
		len = 0;
   29c8a:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29c8c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 29d34 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29c90:	68e3      	ldr	r3, [r4, #12]
   29c92:	42ab      	cmp	r3, r5
   29c94:	d81f      	bhi.n	29cd6 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   29c96:	6863      	ldr	r3, [r4, #4]
   29c98:	4632      	mov	r2, r6
   29c9a:	9301      	str	r3, [sp, #4]
   29c9c:	6823      	ldr	r3, [r4, #0]
   29c9e:	4925      	ldr	r1, [pc, #148]	; (29d34 <nrf91_socket_offload_sendmsg+0xd4>)
   29ca0:	9300      	str	r3, [sp, #0]
   29ca2:	4638      	mov	r0, r7
   29ca4:	4643      	mov	r3, r8
   29ca6:	f01a fc8d 	bl	445c4 <nrf91_socket_offload_sendto>
   29caa:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   29cac:	4820      	ldr	r0, [pc, #128]	; (29d30 <nrf91_socket_offload_sendmsg+0xd0>)
   29cae:	f012 ff97 	bl	3cbe0 <z_impl_k_mutex_unlock>
		return ret;
   29cb2:	e005      	b.n	29cc0 <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   29cb4:	f019 f831 	bl	42d1a <__errno>
   29cb8:	2316      	movs	r3, #22
		return -1;
   29cba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = EINVAL;
   29cbe:	6003      	str	r3, [r0, #0]
}
   29cc0:	4630      	mov	r0, r6
   29cc2:	b002      	add	sp, #8
   29cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   29cc8:	68a1      	ldr	r1, [r4, #8]
   29cca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   29cce:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29cd0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   29cd2:	440a      	add	r2, r1
   29cd4:	e7cd      	b.n	29c72 <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29cd6:	68a3      	ldr	r3, [r4, #8]
   29cd8:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   29cdc:	eb03 0209 	add.w	r2, r3, r9
   29ce0:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   29ce4:	eb0a 0006 	add.w	r0, sl, r6
   29ce8:	6852      	ldr	r2, [r2, #4]
   29cea:	f01b fa9d 	bl	45228 <memcpy>
			len += msg->msg_iov[i].iov_len;
   29cee:	68a3      	ldr	r3, [r4, #8]
		for (i = 0; i < msg->msg_iovlen; i++) {
   29cf0:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   29cf2:	444b      	add	r3, r9
   29cf4:	685b      	ldr	r3, [r3, #4]
   29cf6:	441e      	add	r6, r3
   29cf8:	e7ca      	b.n	29c90 <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   29cfa:	68a1      	ldr	r1, [r4, #8]
   29cfc:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   29d00:	685a      	ldr	r2, [r3, #4]
   29d02:	b162      	cbz	r2, 29d1e <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   29d04:	6863      	ldr	r3, [r4, #4]
   29d06:	4638      	mov	r0, r7
   29d08:	9301      	str	r3, [sp, #4]
   29d0a:	6823      	ldr	r3, [r4, #0]
   29d0c:	9300      	str	r3, [sp, #0]
   29d0e:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   29d12:	4643      	mov	r3, r8
   29d14:	f01a fc56 	bl	445c4 <nrf91_socket_offload_sendto>
		if (ret < 0) {
   29d18:	1e06      	subs	r6, r0, #0
   29d1a:	dbd1      	blt.n	29cc0 <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   29d1c:	44b1      	add	r9, r6
	for (i = 0; i < msg->msg_iovlen; i++) {
   29d1e:	3501      	adds	r5, #1
   29d20:	68e3      	ldr	r3, [r4, #12]
   29d22:	42ab      	cmp	r3, r5
   29d24:	d8e9      	bhi.n	29cfa <nrf91_socket_offload_sendmsg+0x9a>
   29d26:	464e      	mov	r6, r9
   29d28:	e7ca      	b.n	29cc0 <nrf91_socket_offload_sendmsg+0x60>
   29d2a:	2500      	movs	r5, #0
	len = 0;
   29d2c:	46a9      	mov	r9, r5
   29d2e:	e7f7      	b.n	29d20 <nrf91_socket_offload_sendmsg+0xc0>
   29d30:	20020b24 	.word	0x20020b24
   29d34:	2002aec8 	.word	0x2002aec8

00029d38 <nrf91_socket_create>:
{
   29d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d3a:	4606      	mov	r6, r0
   29d3c:	460d      	mov	r5, r1
   29d3e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   29d40:	f7fa f9e8 	bl	24114 <z_reserve_fd>
	if (fd < 0) {
   29d44:	1e04      	subs	r4, r0, #0
   29d46:	db0d      	blt.n	29d64 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   29d48:	b2b0      	uxth	r0, r6
   29d4a:	f01a fa05 	bl	44158 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   29d4e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   29d52:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   29d54:	d109      	bne.n	29d6a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   29d56:	f018 ffe0 	bl	42d1a <__errno>
   29d5a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   29d5c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   29d5e:	4620      	mov	r0, r4
   29d60:	f7fa fa14 	bl	2418c <z_free_fd>
		return -1;
   29d64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29d68:	e01b      	b.n	29da2 <nrf91_socket_create+0x6a>
	switch (socktype) {
   29d6a:	2d03      	cmp	r5, #3
   29d6c:	d003      	beq.n	29d76 <nrf91_socket_create+0x3e>
		return NRF_SOCK_MGMT;
   29d6e:	2d04      	cmp	r5, #4
   29d70:	bf08      	it	eq
   29d72:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   29d76:	4638      	mov	r0, r7
   29d78:	f01a fa06 	bl	44188 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   29d7c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   29d80:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   29d82:	d103      	bne.n	29d8c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   29d84:	f018 ffc9 	bl	42d1a <__errno>
   29d88:	237b      	movs	r3, #123	; 0x7b
   29d8a:	e7e7      	b.n	29d5c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   29d8c:	4629      	mov	r1, r5
   29d8e:	4630      	mov	r0, r6
   29d90:	f010 f814 	bl	39dbc <nrf_socket>
	if (sd < 0) {
   29d94:	1e01      	subs	r1, r0, #0
   29d96:	dbe2      	blt.n	29d5e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   29d98:	4a03      	ldr	r2, [pc, #12]	; (29da8 <nrf91_socket_create+0x70>)
   29d9a:	3101      	adds	r1, #1
   29d9c:	4620      	mov	r0, r4
   29d9e:	f7fa f9eb 	bl	24178 <z_finalize_fd>
}
   29da2:	4620      	mov	r0, r4
   29da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29da6:	bf00      	nop
   29da8:	00046ed8 	.word	0x00046ed8

00029dac <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29dac:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   29db0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   29db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   29db8:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   29dbc:	4605      	mov	r5, r0
   29dbe:	460f      	mov	r7, r1
   29dc0:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   29dc2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29dc6:	d15f      	bne.n	29e88 <z_impl_gpio_pin_interrupt_configure+0xdc>
   29dc8:	4937      	ldr	r1, [pc, #220]	; (29ea8 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   29dca:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   29dce:	4a37      	ldr	r2, [pc, #220]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29dd0:	4837      	ldr	r0, [pc, #220]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29dd2:	f017 ff09 	bl	41be8 <printk>
   29dd6:	4837      	ldr	r0, [pc, #220]	; (29eb4 <z_impl_gpio_pin_interrupt_configure+0x108>)
   29dd8:	f017 ff06 	bl	41be8 <printk>
   29ddc:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29de0:	4832      	ldr	r0, [pc, #200]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29de2:	f018 f91b 	bl	4201c <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29de6:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   29dea:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   29dee:	d10e      	bne.n	29e0e <z_impl_gpio_pin_interrupt_configure+0x62>
   29df0:	4931      	ldr	r1, [pc, #196]	; (29eb8 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   29df2:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   29df6:	4a2d      	ldr	r2, [pc, #180]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29df8:	482d      	ldr	r0, [pc, #180]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29dfa:	f017 fef5 	bl	41be8 <printk>
   29dfe:	482f      	ldr	r0, [pc, #188]	; (29ebc <z_impl_gpio_pin_interrupt_configure+0x110>)
   29e00:	f017 fef2 	bl	41be8 <printk>
   29e04:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   29e08:	4828      	ldr	r0, [pc, #160]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e0a:	f018 f907 	bl	4201c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29e0e:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   29e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   29e16:	d10e      	bne.n	29e36 <z_impl_gpio_pin_interrupt_configure+0x8a>
   29e18:	4929      	ldr	r1, [pc, #164]	; (29ec0 <z_impl_gpio_pin_interrupt_configure+0x114>)
   29e1a:	f240 13fb 	movw	r3, #507	; 0x1fb
   29e1e:	4a23      	ldr	r2, [pc, #140]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e20:	4823      	ldr	r0, [pc, #140]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e22:	f017 fee1 	bl	41be8 <printk>
   29e26:	4827      	ldr	r0, [pc, #156]	; (29ec4 <z_impl_gpio_pin_interrupt_configure+0x118>)
   29e28:	f017 fede 	bl	41be8 <printk>
   29e2c:	f240 11fb 	movw	r1, #507	; 0x1fb
   29e30:	481e      	ldr	r0, [pc, #120]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e32:	f018 f8f3 	bl	4201c <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29e36:	2601      	movs	r6, #1
   29e38:	f8da 3000 	ldr.w	r3, [sl]
   29e3c:	40be      	lsls	r6, r7
   29e3e:	421e      	tst	r6, r3
   29e40:	d10e      	bne.n	29e60 <z_impl_gpio_pin_interrupt_configure+0xb4>
   29e42:	4921      	ldr	r1, [pc, #132]	; (29ec8 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   29e44:	f240 13ff 	movw	r3, #511	; 0x1ff
   29e48:	4a18      	ldr	r2, [pc, #96]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e4a:	4819      	ldr	r0, [pc, #100]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e4c:	f017 fecc 	bl	41be8 <printk>
   29e50:	481e      	ldr	r0, [pc, #120]	; (29ecc <z_impl_gpio_pin_interrupt_configure+0x120>)
   29e52:	f017 fec9 	bl	41be8 <printk>
   29e56:	f240 11ff 	movw	r1, #511	; 0x1ff
   29e5a:	4814      	ldr	r0, [pc, #80]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e5c:	f018 f8de 	bl	4201c <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29e60:	0423      	lsls	r3, r4, #16
   29e62:	d505      	bpl.n	29e70 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29e64:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29e68:	421e      	tst	r6, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29e6a:	bf18      	it	ne
   29e6c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e70:	f8d8 6018 	ldr.w	r6, [r8, #24]
   29e74:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   29e78:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   29e7c:	4639      	mov	r1, r7
   29e7e:	4628      	mov	r0, r5
   29e80:	46b4      	mov	ip, r6
}
   29e82:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e86:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29e88:	2b00      	cmp	r3, #0
   29e8a:	d1ac      	bne.n	29de6 <z_impl_gpio_pin_interrupt_configure+0x3a>
   29e8c:	4910      	ldr	r1, [pc, #64]	; (29ed0 <z_impl_gpio_pin_interrupt_configure+0x124>)
   29e8e:	f240 13ef 	movw	r3, #495	; 0x1ef
   29e92:	4a06      	ldr	r2, [pc, #24]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e94:	4806      	ldr	r0, [pc, #24]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e96:	f017 fea7 	bl	41be8 <printk>
   29e9a:	480e      	ldr	r0, [pc, #56]	; (29ed4 <z_impl_gpio_pin_interrupt_configure+0x128>)
   29e9c:	f017 fea4 	bl	41be8 <printk>
   29ea0:	f240 11ef 	movw	r1, #495	; 0x1ef
   29ea4:	e79c      	b.n	29de0 <z_impl_gpio_pin_interrupt_configure+0x34>
   29ea6:	bf00      	nop
   29ea8:	0004a470 	.word	0x0004a470
   29eac:	0004a446 	.word	0x0004a446
   29eb0:	0004825b 	.word	0x0004825b
   29eb4:	0004a4b1 	.word	0x0004a4b1
   29eb8:	0004a532 	.word	0x0004a532
   29ebc:	0004a5b3 	.word	0x0004a5b3
   29ec0:	0004a607 	.word	0x0004a607
   29ec4:	0004a651 	.word	0x0004a651
   29ec8:	0004a696 	.word	0x0004a696
   29ecc:	0004a6d4 	.word	0x0004a6d4
   29ed0:	0004a4dd 	.word	0x0004a4dd
   29ed4:	0004a507 	.word	0x0004a507

00029ed8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   29ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29edc:	2401      	movs	r4, #1
   29ede:	6843      	ldr	r3, [r0, #4]
   29ee0:	408c      	lsls	r4, r1
   29ee2:	681b      	ldr	r3, [r3, #0]
{
   29ee4:	4605      	mov	r5, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ee6:	421c      	tst	r4, r3
{
   29ee8:	460f      	mov	r7, r1
   29eea:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   29eec:	68c6      	ldr	r6, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29eee:	d10e      	bne.n	29f0e <gpio_pin_configure+0x36>
   29ef0:	490d      	ldr	r1, [pc, #52]	; (29f28 <gpio_pin_configure+0x50>)
   29ef2:	f240 2345 	movw	r3, #581	; 0x245
   29ef6:	4a0d      	ldr	r2, [pc, #52]	; (29f2c <gpio_pin_configure+0x54>)
   29ef8:	480d      	ldr	r0, [pc, #52]	; (29f30 <gpio_pin_configure+0x58>)
   29efa:	f017 fe75 	bl	41be8 <printk>
   29efe:	480d      	ldr	r0, [pc, #52]	; (29f34 <gpio_pin_configure+0x5c>)
   29f00:	f017 fe72 	bl	41be8 <printk>
   29f04:	f240 2145 	movw	r1, #581	; 0x245
   29f08:	4808      	ldr	r0, [pc, #32]	; (29f2c <gpio_pin_configure+0x54>)
   29f0a:	f018 f887 	bl	4201c <assert_post_action>
	return api->pin_configure(port, pin, flags);
   29f0e:	68ab      	ldr	r3, [r5, #8]
   29f10:	4642      	mov	r2, r8
   29f12:	681b      	ldr	r3, [r3, #0]
   29f14:	4639      	mov	r1, r7
   29f16:	4628      	mov	r0, r5
   29f18:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   29f1a:	b918      	cbnz	r0, 29f24 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   29f1c:	6833      	ldr	r3, [r6, #0]
   29f1e:	ea23 0404 	bic.w	r4, r3, r4
   29f22:	6034      	str	r4, [r6, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   29f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29f28:	0004a696 	.word	0x0004a696
   29f2c:	0004a446 	.word	0x0004a446
   29f30:	0004825b 	.word	0x0004825b
   29f34:	0004a6d4 	.word	0x0004a6d4

00029f38 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   29f38:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f3a:	2501      	movs	r5, #1
   29f3c:	6843      	ldr	r3, [r0, #4]
   29f3e:	408d      	lsls	r5, r1
   29f40:	681b      	ldr	r3, [r3, #0]
{
   29f42:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f44:	421d      	tst	r5, r3
{
   29f46:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f48:	d10e      	bne.n	29f68 <gpio_pin_set_raw+0x30>
   29f4a:	490d      	ldr	r1, [pc, #52]	; (29f80 <gpio_pin_set_raw+0x48>)
   29f4c:	f240 33c1 	movw	r3, #961	; 0x3c1
   29f50:	4a0c      	ldr	r2, [pc, #48]	; (29f84 <gpio_pin_set_raw+0x4c>)
   29f52:	480d      	ldr	r0, [pc, #52]	; (29f88 <gpio_pin_set_raw+0x50>)
   29f54:	f017 fe48 	bl	41be8 <printk>
   29f58:	480c      	ldr	r0, [pc, #48]	; (29f8c <gpio_pin_set_raw+0x54>)
   29f5a:	f017 fe45 	bl	41be8 <printk>
   29f5e:	f240 31c1 	movw	r1, #961	; 0x3c1
   29f62:	4808      	ldr	r0, [pc, #32]	; (29f84 <gpio_pin_set_raw+0x4c>)
   29f64:	f018 f85a 	bl	4201c <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   29f68:	b136      	cbz	r6, 29f78 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   29f6a:	68a3      	ldr	r3, [r4, #8]
   29f6c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29f6e:	4629      	mov	r1, r5
   29f70:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   29f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   29f76:	4718      	bx	r3
   29f78:	68a3      	ldr	r3, [r4, #8]
   29f7a:	691b      	ldr	r3, [r3, #16]
   29f7c:	e7f7      	b.n	29f6e <gpio_pin_set_raw+0x36>
   29f7e:	bf00      	nop
   29f80:	0004a696 	.word	0x0004a696
   29f84:	0004a446 	.word	0x0004a446
   29f88:	0004825b 	.word	0x0004825b
   29f8c:	0004a6d4 	.word	0x0004a6d4

00029f90 <dk_set_leds_state.part.6>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   29f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29f94:	4606      	mov	r6, r0
   29f96:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   29f98:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   29f9a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2a000 <dk_set_leds_state.part.6+0x70>
   29f9e:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2a004 <dk_set_leds_state.part.6+0x74>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   29fa2:	fa26 f204 	lsr.w	r2, r6, r4
   29fa6:	fa27 f304 	lsr.w	r3, r7, r4
   29faa:	4313      	orrs	r3, r2
   29fac:	07db      	lsls	r3, r3, #31
   29fae:	d51b      	bpl.n	29fe8 <dk_set_leds_state.part.6+0x58>
			int err = gpio_pin_set_raw(led_devs[i],
   29fb0:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   29fb4:	f002 0201 	and.w	r2, r2, #1
   29fb8:	7919      	ldrb	r1, [r3, #4]
   29fba:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   29fbe:	f7ff ffbb 	bl	29f38 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   29fc2:	4605      	mov	r5, r0
   29fc4:	b180      	cbz	r0, 29fe8 <dk_set_leds_state.part.6+0x58>
				LOG_ERR("Cannot write LED gpio");
   29fc6:	2301      	movs	r3, #1
   29fc8:	f04f 0000 	mov.w	r0, #0
   29fcc:	4a09      	ldr	r2, [pc, #36]	; (29ff4 <dk_set_leds_state.part.6+0x64>)
   29fce:	f363 0007 	bfi	r0, r3, #0, #8
   29fd2:	4b09      	ldr	r3, [pc, #36]	; (29ff8 <dk_set_leds_state.part.6+0x68>)
   29fd4:	4909      	ldr	r1, [pc, #36]	; (29ffc <dk_set_leds_state.part.6+0x6c>)
   29fd6:	1a9b      	subs	r3, r3, r2
   29fd8:	08db      	lsrs	r3, r3, #3
   29fda:	f363 108f 	bfi	r0, r3, #6, #10
   29fde:	f018 f82e 	bl	4203e <log_string_sync>
			}
		}
	}

	return 0;
}
   29fe2:	4628      	mov	r0, r5
   29fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   29fe8:	3401      	adds	r4, #1
   29fea:	2c04      	cmp	r4, #4
   29fec:	d1d9      	bne.n	29fa2 <dk_set_leds_state.part.6+0x12>
	return 0;
   29fee:	2500      	movs	r5, #0
   29ff0:	e7f7      	b.n	29fe2 <dk_set_leds_state.part.6+0x52>
   29ff2:	bf00      	nop
   29ff4:	00046878 	.word	0x00046878
   29ff8:	000468d8 	.word	0x000468d8
   29ffc:	0004a41c 	.word	0x0004a41c
   2a000:	00046f30 	.word	0x00046f30
   2a004:	200248c8 	.word	0x200248c8

0002a008 <button_pressed>:
{
   2a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2a00a:	f04f 0320 	mov.w	r3, #32
   2a00e:	f3ef 8511 	mrs	r5, BASEPRI
   2a012:	f383 8811 	msr	BASEPRI, r3
   2a016:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a01a:	4832      	ldr	r0, [pc, #200]	; (2a0e4 <button_pressed+0xdc>)
   2a01c:	f014 fb12 	bl	3e644 <z_spin_lock_valid>
   2a020:	b968      	cbnz	r0, 2a03e <button_pressed+0x36>
   2a022:	235c      	movs	r3, #92	; 0x5c
   2a024:	4a30      	ldr	r2, [pc, #192]	; (2a0e8 <button_pressed+0xe0>)
   2a026:	4931      	ldr	r1, [pc, #196]	; (2a0ec <button_pressed+0xe4>)
   2a028:	4831      	ldr	r0, [pc, #196]	; (2a0f0 <button_pressed+0xe8>)
   2a02a:	f017 fddd 	bl	41be8 <printk>
   2a02e:	492d      	ldr	r1, [pc, #180]	; (2a0e4 <button_pressed+0xdc>)
   2a030:	4830      	ldr	r0, [pc, #192]	; (2a0f4 <button_pressed+0xec>)
   2a032:	f017 fdd9 	bl	41be8 <printk>
   2a036:	215c      	movs	r1, #92	; 0x5c
   2a038:	482b      	ldr	r0, [pc, #172]	; (2a0e8 <button_pressed+0xe0>)
   2a03a:	f017 ffef 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a03e:	4829      	ldr	r0, [pc, #164]	; (2a0e4 <button_pressed+0xdc>)
   2a040:	f014 fb1e 	bl	3e680 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a044:	2400      	movs	r4, #0
   2a046:	4e2c      	ldr	r6, [pc, #176]	; (2a0f8 <button_pressed+0xf0>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a048:	4f2c      	ldr	r7, [pc, #176]	; (2a0fc <button_pressed+0xf4>)
   2a04a:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2a04e:	f856 0b04 	ldr.w	r0, [r6], #4
   2a052:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2a054:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a058:	3401      	adds	r4, #1
   2a05a:	f7ff fea7 	bl	29dac <z_impl_gpio_pin_interrupt_configure>
   2a05e:	2c04      	cmp	r4, #4
   2a060:	d010      	beq.n	2a084 <button_pressed+0x7c>
   2a062:	2800      	cmp	r0, #0
   2a064:	d0f1      	beq.n	2a04a <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   2a066:	2301      	movs	r3, #1
   2a068:	f04f 0000 	mov.w	r0, #0
   2a06c:	4a24      	ldr	r2, [pc, #144]	; (2a100 <button_pressed+0xf8>)
   2a06e:	f363 0007 	bfi	r0, r3, #0, #8
   2a072:	4b24      	ldr	r3, [pc, #144]	; (2a104 <button_pressed+0xfc>)
   2a074:	4924      	ldr	r1, [pc, #144]	; (2a108 <button_pressed+0x100>)
   2a076:	1a9b      	subs	r3, r3, r2
   2a078:	08db      	lsrs	r3, r3, #3
   2a07a:	f363 108f 	bfi	r0, r3, #6, #10
   2a07e:	f017 ffde 	bl	4203e <log_string_sync>
   2a082:	e001      	b.n	2a088 <button_pressed+0x80>
	if (err) {
   2a084:	2800      	cmp	r0, #0
   2a086:	d1ee      	bne.n	2a066 <button_pressed+0x5e>
	switch (state) {
   2a088:	4b20      	ldr	r3, [pc, #128]	; (2a10c <button_pressed+0x104>)
   2a08a:	781a      	ldrb	r2, [r3, #0]
   2a08c:	b9f2      	cbnz	r2, 2a0cc <button_pressed+0xc4>
		state = STATE_SCANNING;
   2a08e:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a090:	491f      	ldr	r1, [pc, #124]	; (2a110 <button_pressed+0x108>)
   2a092:	701a      	strb	r2, [r3, #0]
   2a094:	481f      	ldr	r0, [pc, #124]	; (2a114 <button_pressed+0x10c>)
   2a096:	2221      	movs	r2, #33	; 0x21
   2a098:	2300      	movs	r3, #0
   2a09a:	f014 fb1f 	bl	3e6dc <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a09e:	4811      	ldr	r0, [pc, #68]	; (2a0e4 <button_pressed+0xdc>)
   2a0a0:	f014 fade 	bl	3e660 <z_spin_unlock_valid>
   2a0a4:	b968      	cbnz	r0, 2a0c2 <button_pressed+0xba>
   2a0a6:	2384      	movs	r3, #132	; 0x84
   2a0a8:	4a0f      	ldr	r2, [pc, #60]	; (2a0e8 <button_pressed+0xe0>)
   2a0aa:	491b      	ldr	r1, [pc, #108]	; (2a118 <button_pressed+0x110>)
   2a0ac:	4810      	ldr	r0, [pc, #64]	; (2a0f0 <button_pressed+0xe8>)
   2a0ae:	f017 fd9b 	bl	41be8 <printk>
   2a0b2:	490c      	ldr	r1, [pc, #48]	; (2a0e4 <button_pressed+0xdc>)
   2a0b4:	4819      	ldr	r0, [pc, #100]	; (2a11c <button_pressed+0x114>)
   2a0b6:	f017 fd97 	bl	41be8 <printk>
   2a0ba:	2184      	movs	r1, #132	; 0x84
   2a0bc:	480a      	ldr	r0, [pc, #40]	; (2a0e8 <button_pressed+0xe0>)
   2a0be:	f017 ffad 	bl	4201c <assert_post_action>
	__asm__ volatile(
   2a0c2:	f385 8811 	msr	BASEPRI, r5
   2a0c6:	f3bf 8f6f 	isb	sy
}
   2a0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   2a0cc:	23eb      	movs	r3, #235	; 0xeb
   2a0ce:	4a14      	ldr	r2, [pc, #80]	; (2a120 <button_pressed+0x118>)
   2a0d0:	4914      	ldr	r1, [pc, #80]	; (2a124 <button_pressed+0x11c>)
   2a0d2:	4807      	ldr	r0, [pc, #28]	; (2a0f0 <button_pressed+0xe8>)
   2a0d4:	f017 fd88 	bl	41be8 <printk>
   2a0d8:	21eb      	movs	r1, #235	; 0xeb
   2a0da:	4811      	ldr	r0, [pc, #68]	; (2a120 <button_pressed+0x118>)
   2a0dc:	f017 ff9e 	bl	4201c <assert_post_action>
		break;
   2a0e0:	e7dd      	b.n	2a09e <button_pressed+0x96>
   2a0e2:	bf00      	nop
   2a0e4:	200248d8 	.word	0x200248d8
   2a0e8:	00048d7b 	.word	0x00048d7b
   2a0ec:	00048da1 	.word	0x00048da1
   2a0f0:	0004825b 	.word	0x0004825b
   2a0f4:	00048db6 	.word	0x00048db6
   2a0f8:	20024884 	.word	0x20024884
   2a0fc:	00046f10 	.word	0x00046f10
   2a100:	00046878 	.word	0x00046878
   2a104:	000468d8 	.word	0x000468d8
   2a108:	0004a2fd 	.word	0x0004a2fd
   2a10c:	2002af48 	.word	0x2002af48
   2a110:	20021940 	.word	0x20021940
   2a114:	200244a8 	.word	0x200244a8
   2a118:	00048dce 	.word	0x00048dce
   2a11c:	00048de5 	.word	0x00048de5
   2a120:	0004a316 	.word	0x0004a316
   2a124:	0004edb2 	.word	0x0004edb2

0002a128 <buttons_scan_fn>:
{
   2a128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   2a12c:	2400      	movs	r4, #0
   2a12e:	4f7e      	ldr	r7, [pc, #504]	; (2a328 <buttons_scan_fn+0x200>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a130:	4625      	mov	r5, r4
{
   2a132:	46b9      	mov	r9, r7
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2a134:	f8df a214 	ldr.w	sl, [pc, #532]	; 2a34c <buttons_scan_fn+0x224>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a138:	f8df b254 	ldr.w	fp, [pc, #596]	; 2a390 <buttons_scan_fn+0x268>
   2a13c:	2601      	movs	r6, #1
   2a13e:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
   2a142:	791b      	ldrb	r3, [r3, #4]
   2a144:	f859 8b04 	ldr.w	r8, [r9], #4
   2a148:	409e      	lsls	r6, r3
   2a14a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2a14e:	681b      	ldr	r3, [r3, #0]
   2a150:	421e      	tst	r6, r3
   2a152:	d10e      	bne.n	2a172 <buttons_scan_fn+0x4a>
   2a154:	4975      	ldr	r1, [pc, #468]	; (2a32c <buttons_scan_fn+0x204>)
   2a156:	f240 3379 	movw	r3, #889	; 0x379
   2a15a:	465a      	mov	r2, fp
   2a15c:	4874      	ldr	r0, [pc, #464]	; (2a330 <buttons_scan_fn+0x208>)
   2a15e:	f017 fd43 	bl	41be8 <printk>
   2a162:	4874      	ldr	r0, [pc, #464]	; (2a334 <buttons_scan_fn+0x20c>)
   2a164:	f017 fd40 	bl	41be8 <printk>
   2a168:	f240 3179 	movw	r1, #889	; 0x379
   2a16c:	4658      	mov	r0, fp
   2a16e:	f017 ff55 	bl	4201c <assert_post_action>
	return api->port_get_raw(port, value);
   2a172:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2a176:	a901      	add	r1, sp, #4
   2a178:	685b      	ldr	r3, [r3, #4]
   2a17a:	4640      	mov	r0, r8
   2a17c:	4798      	blx	r3
	if (ret == 0) {
   2a17e:	2800      	cmp	r0, #0
   2a180:	d17b      	bne.n	2a27a <buttons_scan_fn+0x152>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2a182:	9b01      	ldr	r3, [sp, #4]
   2a184:	421e      	tst	r6, r3
   2a186:	d003      	beq.n	2a190 <buttons_scan_fn+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a188:	3501      	adds	r5, #1
   2a18a:	2d04      	cmp	r5, #4
   2a18c:	d1d6      	bne.n	2a13c <buttons_scan_fn+0x14>
   2a18e:	e084      	b.n	2a29a <buttons_scan_fn+0x172>
			ret |= 1U << i;
   2a190:	2301      	movs	r3, #1
   2a192:	40ab      	lsls	r3, r5
   2a194:	431c      	orrs	r4, r3
   2a196:	e7f7      	b.n	2a188 <buttons_scan_fn+0x60>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a198:	3d04      	subs	r5, #4
   2a19a:	2d00      	cmp	r5, #0
   2a19c:	f000 80a2 	beq.w	2a2e4 <buttons_scan_fn+0x1bc>
			handler->cb(button_state, has_changed);
   2a1a0:	682b      	ldr	r3, [r5, #0]
   2a1a2:	4631      	mov	r1, r6
   2a1a4:	4620      	mov	r0, r4
   2a1a6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a1a8:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2a1aa:	e098      	b.n	2a2de <buttons_scan_fn+0x1b6>
		initial_run = false;
   2a1ac:	2200      	movs	r2, #0
   2a1ae:	701a      	strb	r2, [r3, #0]
   2a1b0:	e09b      	b.n	2a2ea <buttons_scan_fn+0x1c2>
	__asm__ volatile(
   2a1b2:	f04f 0320 	mov.w	r3, #32
   2a1b6:	f3ef 8611 	mrs	r6, BASEPRI
   2a1ba:	f383 8811 	msr	BASEPRI, r3
   2a1be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1c2:	485d      	ldr	r0, [pc, #372]	; (2a338 <buttons_scan_fn+0x210>)
   2a1c4:	f014 fa3e 	bl	3e644 <z_spin_lock_valid>
   2a1c8:	b968      	cbnz	r0, 2a1e6 <buttons_scan_fn+0xbe>
   2a1ca:	235c      	movs	r3, #92	; 0x5c
   2a1cc:	4a5b      	ldr	r2, [pc, #364]	; (2a33c <buttons_scan_fn+0x214>)
   2a1ce:	495c      	ldr	r1, [pc, #368]	; (2a340 <buttons_scan_fn+0x218>)
   2a1d0:	4857      	ldr	r0, [pc, #348]	; (2a330 <buttons_scan_fn+0x208>)
   2a1d2:	f017 fd09 	bl	41be8 <printk>
   2a1d6:	4958      	ldr	r1, [pc, #352]	; (2a338 <buttons_scan_fn+0x210>)
   2a1d8:	485a      	ldr	r0, [pc, #360]	; (2a344 <buttons_scan_fn+0x21c>)
   2a1da:	f017 fd05 	bl	41be8 <printk>
   2a1de:	215c      	movs	r1, #92	; 0x5c
   2a1e0:	4856      	ldr	r0, [pc, #344]	; (2a33c <buttons_scan_fn+0x214>)
   2a1e2:	f017 ff1b 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   2a1e6:	4854      	ldr	r0, [pc, #336]	; (2a338 <buttons_scan_fn+0x210>)
   2a1e8:	f014 fa4a 	bl	3e680 <z_spin_lock_set_owner>
		switch (state) {
   2a1ec:	4b56      	ldr	r3, [pc, #344]	; (2a348 <buttons_scan_fn+0x220>)
   2a1ee:	781a      	ldrb	r2, [r3, #0]
   2a1f0:	2a01      	cmp	r2, #1
   2a1f2:	d136      	bne.n	2a262 <buttons_scan_fn+0x13a>
			state = STATE_WAITING;
   2a1f4:	2200      	movs	r2, #0
   2a1f6:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a1f8:	4b54      	ldr	r3, [pc, #336]	; (2a34c <buttons_scan_fn+0x224>)
   2a1fa:	f857 0b04 	ldr.w	r0, [r7], #4
   2a1fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a202:	7919      	ldrb	r1, [r3, #4]
   2a204:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   2a208:	f7ff fdd0 	bl	29dac <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a20c:	3401      	adds	r4, #1
   2a20e:	2c04      	cmp	r4, #4
   2a210:	4605      	mov	r5, r0
   2a212:	d001      	beq.n	2a218 <buttons_scan_fn+0xf0>
   2a214:	2800      	cmp	r0, #0
   2a216:	d0ef      	beq.n	2a1f8 <buttons_scan_fn+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a218:	4847      	ldr	r0, [pc, #284]	; (2a338 <buttons_scan_fn+0x210>)
   2a21a:	f014 fa21 	bl	3e660 <z_spin_unlock_valid>
   2a21e:	b968      	cbnz	r0, 2a23c <buttons_scan_fn+0x114>
   2a220:	2384      	movs	r3, #132	; 0x84
   2a222:	4a46      	ldr	r2, [pc, #280]	; (2a33c <buttons_scan_fn+0x214>)
   2a224:	494a      	ldr	r1, [pc, #296]	; (2a350 <buttons_scan_fn+0x228>)
   2a226:	4842      	ldr	r0, [pc, #264]	; (2a330 <buttons_scan_fn+0x208>)
   2a228:	f017 fcde 	bl	41be8 <printk>
   2a22c:	4942      	ldr	r1, [pc, #264]	; (2a338 <buttons_scan_fn+0x210>)
   2a22e:	4849      	ldr	r0, [pc, #292]	; (2a354 <buttons_scan_fn+0x22c>)
   2a230:	f017 fcda 	bl	41be8 <printk>
   2a234:	2184      	movs	r1, #132	; 0x84
   2a236:	4841      	ldr	r0, [pc, #260]	; (2a33c <buttons_scan_fn+0x214>)
   2a238:	f017 fef0 	bl	4201c <assert_post_action>
	__asm__ volatile(
   2a23c:	f386 8811 	msr	BASEPRI, r6
   2a240:	f3bf 8f6f 	isb	sy
		if (err) {
   2a244:	2d00      	cmp	r5, #0
   2a246:	d06b      	beq.n	2a320 <buttons_scan_fn+0x1f8>
			LOG_ERR("Cannot enable callbacks");
   2a248:	2301      	movs	r3, #1
   2a24a:	f04f 0000 	mov.w	r0, #0
   2a24e:	4a42      	ldr	r2, [pc, #264]	; (2a358 <buttons_scan_fn+0x230>)
   2a250:	f363 0007 	bfi	r0, r3, #0, #8
   2a254:	4b41      	ldr	r3, [pc, #260]	; (2a35c <buttons_scan_fn+0x234>)
   2a256:	4942      	ldr	r1, [pc, #264]	; (2a360 <buttons_scan_fn+0x238>)
   2a258:	1a9b      	subs	r3, r3, r2
   2a25a:	08db      	lsrs	r3, r3, #3
   2a25c:	f363 108f 	bfi	r0, r3, #6, #10
   2a260:	e05c      	b.n	2a31c <buttons_scan_fn+0x1f4>
			__ASSERT_NO_MSG(false);
   2a262:	23b4      	movs	r3, #180	; 0xb4
   2a264:	4a3f      	ldr	r2, [pc, #252]	; (2a364 <buttons_scan_fn+0x23c>)
   2a266:	4940      	ldr	r1, [pc, #256]	; (2a368 <buttons_scan_fn+0x240>)
   2a268:	4831      	ldr	r0, [pc, #196]	; (2a330 <buttons_scan_fn+0x208>)
   2a26a:	f017 fcbd 	bl	41be8 <printk>
   2a26e:	21b4      	movs	r1, #180	; 0xb4
   2a270:	483c      	ldr	r0, [pc, #240]	; (2a364 <buttons_scan_fn+0x23c>)
   2a272:	f017 fed3 	bl	4201c <assert_post_action>
		int err = 0;
   2a276:	2500      	movs	r5, #0
			break;
   2a278:	e7ce      	b.n	2a218 <buttons_scan_fn+0xf0>
		if (val < 0) {
   2a27a:	da85      	bge.n	2a188 <buttons_scan_fn+0x60>
			LOG_ERR("Cannot read gpio pin");
   2a27c:	2301      	movs	r3, #1
   2a27e:	f04f 0000 	mov.w	r0, #0
   2a282:	4a35      	ldr	r2, [pc, #212]	; (2a358 <buttons_scan_fn+0x230>)
   2a284:	f363 0007 	bfi	r0, r3, #0, #8
   2a288:	4b34      	ldr	r3, [pc, #208]	; (2a35c <buttons_scan_fn+0x234>)
   2a28a:	4938      	ldr	r1, [pc, #224]	; (2a36c <buttons_scan_fn+0x244>)
   2a28c:	1a9b      	subs	r3, r3, r2
   2a28e:	08db      	lsrs	r3, r3, #3
   2a290:	f363 108f 	bfi	r0, r3, #6, #10
   2a294:	f017 fed3 	bl	4203e <log_string_sync>
			return 0;
   2a298:	2400      	movs	r4, #0
   2a29a:	4b35      	ldr	r3, [pc, #212]	; (2a370 <buttons_scan_fn+0x248>)
   2a29c:	e8d3 2fef 	ldaex	r2, [r3]
   2a2a0:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2a2a4:	2900      	cmp	r1, #0
   2a2a6:	d1f9      	bne.n	2a29c <buttons_scan_fn+0x174>
	if (!initial_run) {
   2a2a8:	4b32      	ldr	r3, [pc, #200]	; (2a374 <buttons_scan_fn+0x24c>)
   2a2aa:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2a394 <buttons_scan_fn+0x26c>
   2a2ae:	781a      	ldrb	r2, [r3, #0]
   2a2b0:	2a00      	cmp	r2, #0
   2a2b2:	f47f af7b 	bne.w	2a1ac <buttons_scan_fn+0x84>
		if (button_scan != last_button_scan) {
   2a2b6:	f8d8 6000 	ldr.w	r6, [r8]
   2a2ba:	42a6      	cmp	r6, r4
   2a2bc:	d015      	beq.n	2a2ea <buttons_scan_fn+0x1c2>
	if (button_handler_cb != NULL) {
   2a2be:	4b2e      	ldr	r3, [pc, #184]	; (2a378 <buttons_scan_fn+0x250>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2a2c0:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   2a2c2:	681b      	ldr	r3, [r3, #0]
   2a2c4:	b113      	cbz	r3, 2a2cc <buttons_scan_fn+0x1a4>
		button_handler_cb(button_state, has_changed);
   2a2c6:	4631      	mov	r1, r6
   2a2c8:	4620      	mov	r0, r4
   2a2ca:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2a2cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a2d4:	4829      	ldr	r0, [pc, #164]	; (2a37c <buttons_scan_fn+0x254>)
   2a2d6:	f012 fb85 	bl	3c9e4 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a2da:	4b29      	ldr	r3, [pc, #164]	; (2a380 <buttons_scan_fn+0x258>)
   2a2dc:	681d      	ldr	r5, [r3, #0]
   2a2de:	2d00      	cmp	r5, #0
   2a2e0:	f47f af5a 	bne.w	2a198 <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
   2a2e4:	4825      	ldr	r0, [pc, #148]	; (2a37c <buttons_scan_fn+0x254>)
   2a2e6:	f012 fc7b 	bl	3cbe0 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2a2ea:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   2a2ee:	2c00      	cmp	r4, #0
   2a2f0:	f43f af5f 	beq.w	2a1b2 <buttons_scan_fn+0x8a>
   2a2f4:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2a2f8:	2300      	movs	r3, #0
   2a2fa:	4922      	ldr	r1, [pc, #136]	; (2a384 <buttons_scan_fn+0x25c>)
   2a2fc:	4822      	ldr	r0, [pc, #136]	; (2a388 <buttons_scan_fn+0x260>)
   2a2fe:	f014 f9ed 	bl	3e6dc <k_delayed_work_submit_to_queue>
		if (err) {
   2a302:	b168      	cbz	r0, 2a320 <buttons_scan_fn+0x1f8>
			LOG_ERR("Cannot add work to workqueue");
   2a304:	2301      	movs	r3, #1
   2a306:	f04f 0000 	mov.w	r0, #0
   2a30a:	4a13      	ldr	r2, [pc, #76]	; (2a358 <buttons_scan_fn+0x230>)
   2a30c:	f363 0007 	bfi	r0, r3, #0, #8
   2a310:	4b12      	ldr	r3, [pc, #72]	; (2a35c <buttons_scan_fn+0x234>)
   2a312:	491e      	ldr	r1, [pc, #120]	; (2a38c <buttons_scan_fn+0x264>)
   2a314:	1a9b      	subs	r3, r3, r2
   2a316:	08db      	lsrs	r3, r3, #3
   2a318:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   2a31c:	f017 fe8f 	bl	4203e <log_string_sync>
}
   2a320:	b003      	add	sp, #12
   2a322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a326:	bf00      	nop
   2a328:	20024884 	.word	0x20024884
   2a32c:	0004a696 	.word	0x0004a696
   2a330:	0004825b 	.word	0x0004825b
   2a334:	0004a6d4 	.word	0x0004a6d4
   2a338:	200248d8 	.word	0x200248d8
   2a33c:	00048d7b 	.word	0x00048d7b
   2a340:	00048da1 	.word	0x00048da1
   2a344:	00048db6 	.word	0x00048db6
   2a348:	2002af48 	.word	0x2002af48
   2a34c:	00046f10 	.word	0x00046f10
   2a350:	00048dce 	.word	0x00048dce
   2a354:	00048de5 	.word	0x00048de5
   2a358:	00046878 	.word	0x00046878
   2a35c:	000468d8 	.word	0x000468d8
   2a360:	0004a386 	.word	0x0004a386
   2a364:	0004a316 	.word	0x0004a316
   2a368:	0004edb2 	.word	0x0004edb2
   2a36c:	0004a354 	.word	0x0004a354
   2a370:	200248dc 	.word	0x200248dc
   2a374:	20020959 	.word	0x20020959
   2a378:	20024894 	.word	0x20024894
   2a37c:	20024898 	.word	0x20024898
   2a380:	200248ac 	.word	0x200248ac
   2a384:	20021940 	.word	0x20021940
   2a388:	200244a8 	.word	0x200244a8
   2a38c:	0004a369 	.word	0x0004a369
   2a390:	0004a446 	.word	0x0004a446
   2a394:	200248c0 	.word	0x200248c0

0002a398 <dk_leds_init>:
{
   2a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a39a:	2500      	movs	r5, #0
   2a39c:	4c1c      	ldr	r4, [pc, #112]	; (2a410 <dk_leds_init+0x78>)
   2a39e:	4f1d      	ldr	r7, [pc, #116]	; (2a414 <dk_leds_init+0x7c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   2a3a0:	6820      	ldr	r0, [r4, #0]
   2a3a2:	f011 fecf 	bl	3c144 <z_impl_device_get_binding>
   2a3a6:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2a3aa:	b988      	cbnz	r0, 2a3d0 <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   2a3ac:	2301      	movs	r3, #1
   2a3ae:	f04f 0000 	mov.w	r0, #0
   2a3b2:	4a19      	ldr	r2, [pc, #100]	; (2a418 <dk_leds_init+0x80>)
   2a3b4:	f363 0007 	bfi	r0, r3, #0, #8
   2a3b8:	4b18      	ldr	r3, [pc, #96]	; (2a41c <dk_leds_init+0x84>)
   2a3ba:	4919      	ldr	r1, [pc, #100]	; (2a420 <dk_leds_init+0x88>)
   2a3bc:	1a9b      	subs	r3, r3, r2
   2a3be:	08db      	lsrs	r3, r3, #3
   2a3c0:	f363 108f 	bfi	r0, r3, #6, #10
   2a3c4:	f017 fe3b 	bl	4203e <log_string_sync>
			return -ENODEV;
   2a3c8:	f06f 0612 	mvn.w	r6, #18
}
   2a3cc:	4630      	mov	r0, r6
   2a3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2a3d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a3d4:	7921      	ldrb	r1, [r4, #4]
   2a3d6:	f7ff fd7f 	bl	29ed8 <gpio_pin_configure>
		if (err) {
   2a3da:	4606      	mov	r6, r0
   2a3dc:	b170      	cbz	r0, 2a3fc <dk_leds_init+0x64>
			LOG_ERR("Cannot configure LED gpio");
   2a3de:	2301      	movs	r3, #1
   2a3e0:	f04f 0000 	mov.w	r0, #0
   2a3e4:	4a0c      	ldr	r2, [pc, #48]	; (2a418 <dk_leds_init+0x80>)
   2a3e6:	f363 0007 	bfi	r0, r3, #0, #8
   2a3ea:	4b0c      	ldr	r3, [pc, #48]	; (2a41c <dk_leds_init+0x84>)
   2a3ec:	490d      	ldr	r1, [pc, #52]	; (2a424 <dk_leds_init+0x8c>)
   2a3ee:	1a9b      	subs	r3, r3, r2
   2a3f0:	08db      	lsrs	r3, r3, #3
   2a3f2:	f363 108f 	bfi	r0, r3, #6, #10
   2a3f6:	f017 fe22 	bl	4203e <log_string_sync>
			return err;
   2a3fa:	e7e7      	b.n	2a3cc <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a3fc:	3501      	adds	r5, #1
   2a3fe:	2d04      	cmp	r5, #4
   2a400:	f104 0408 	add.w	r4, r4, #8
   2a404:	d1cc      	bne.n	2a3a0 <dk_leds_init+0x8>
}
   2a406:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a40a:	210f      	movs	r1, #15
   2a40c:	f7ff bdc0 	b.w	29f90 <dk_set_leds_state.part.6>
   2a410:	00046f30 	.word	0x00046f30
   2a414:	200248c8 	.word	0x200248c8
   2a418:	00046878 	.word	0x00046878
   2a41c:	000468d8 	.word	0x000468d8
   2a420:	0004a3ea 	.word	0x0004a3ea
   2a424:	0004a402 	.word	0x0004a402

0002a428 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a428:	4b05      	ldr	r3, [pc, #20]	; (2a440 <dk_read_buttons+0x18>)
   2a42a:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2a42e:	b100      	cbz	r0, 2a432 <dk_read_buttons+0xa>
		*button_state = current_state;
   2a430:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   2a432:	4804      	ldr	r0, [pc, #16]	; (2a444 <dk_read_buttons+0x1c>)
   2a434:	b111      	cbz	r1, 2a43c <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2a436:	6802      	ldr	r2, [r0, #0]
   2a438:	405a      	eors	r2, r3
   2a43a:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2a43c:	6003      	str	r3, [r0, #0]
}
   2a43e:	4770      	bx	lr
   2a440:	200248dc 	.word	0x200248dc
   2a444:	200248c4 	.word	0x200248c4

0002a448 <dk_buttons_init>:
{
   2a448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   2a44c:	4b52      	ldr	r3, [pc, #328]	; (2a598 <dk_buttons_init+0x150>)
   2a44e:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2a450:	4d52      	ldr	r5, [pc, #328]	; (2a59c <dk_buttons_init+0x154>)
   2a452:	4f53      	ldr	r7, [pc, #332]	; (2a5a0 <dk_buttons_init+0x158>)
   2a454:	4853      	ldr	r0, [pc, #332]	; (2a5a4 <dk_buttons_init+0x15c>)
   2a456:	f01a fd24 	bl	44ea2 <z_impl_k_mutex_init>
   2a45a:	46b8      	mov	r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a45c:	2600      	movs	r6, #0
   2a45e:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   2a460:	6828      	ldr	r0, [r5, #0]
   2a462:	f011 fe6f 	bl	3c144 <z_impl_device_get_binding>
   2a466:	f848 0b04 	str.w	r0, [r8], #4
		if (!button_devs[i]) {
   2a46a:	b990      	cbnz	r0, 2a492 <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   2a46c:	2301      	movs	r3, #1
   2a46e:	f04f 0000 	mov.w	r0, #0
   2a472:	4a4d      	ldr	r2, [pc, #308]	; (2a5a8 <dk_buttons_init+0x160>)
   2a474:	f363 0007 	bfi	r0, r3, #0, #8
   2a478:	4b4c      	ldr	r3, [pc, #304]	; (2a5ac <dk_buttons_init+0x164>)
   2a47a:	494d      	ldr	r1, [pc, #308]	; (2a5b0 <dk_buttons_init+0x168>)
   2a47c:	1a9b      	subs	r3, r3, r2
   2a47e:	08db      	lsrs	r3, r3, #3
   2a480:	f363 108f 	bfi	r0, r3, #6, #10
   2a484:	f017 fddb 	bl	4203e <log_string_sync>
			return -ENODEV;
   2a488:	f06f 0412 	mvn.w	r4, #18
}
   2a48c:	4620      	mov	r0, r4
   2a48e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2a492:	f44f 7288 	mov.w	r2, #272	; 0x110
   2a496:	7929      	ldrb	r1, [r5, #4]
   2a498:	f7ff fd1e 	bl	29ed8 <gpio_pin_configure>
		if (err) {
   2a49c:	4604      	mov	r4, r0
   2a49e:	b170      	cbz	r0, 2a4be <dk_buttons_init+0x76>
			LOG_ERR("Cannot configure button gpio");
   2a4a0:	2301      	movs	r3, #1
   2a4a2:	f04f 0000 	mov.w	r0, #0
   2a4a6:	4a40      	ldr	r2, [pc, #256]	; (2a5a8 <dk_buttons_init+0x160>)
   2a4a8:	f363 0007 	bfi	r0, r3, #0, #8
   2a4ac:	4b3f      	ldr	r3, [pc, #252]	; (2a5ac <dk_buttons_init+0x164>)
   2a4ae:	4941      	ldr	r1, [pc, #260]	; (2a5b4 <dk_buttons_init+0x16c>)
   2a4b0:	1a9b      	subs	r3, r3, r2
   2a4b2:	08db      	lsrs	r3, r3, #3
   2a4b4:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   2a4b8:	f017 fdc1 	bl	4203e <log_string_sync>
		return err;
   2a4bc:	e7e6      	b.n	2a48c <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4be:	3601      	adds	r6, #1
   2a4c0:	2e04      	cmp	r6, #4
   2a4c2:	f105 0508 	add.w	r5, r5, #8
   2a4c6:	d1cb      	bne.n	2a460 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4c8:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   2a4ca:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   2a4cc:	f04f 0b01 	mov.w	fp, #1
   2a4d0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2a5a0 <dk_buttons_init+0x158>
		err = gpio_pin_interrupt_configure(button_devs[i],
   2a4d4:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   2a4d8:	f85a 0b04 	ldr.w	r0, [sl], #4
   2a4dc:	791e      	ldrb	r6, [r3, #4]
   2a4de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2a4e2:	4631      	mov	r1, r6
   2a4e4:	f7ff fc62 	bl	29dac <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2a4e8:	4604      	mov	r4, r0
   2a4ea:	b160      	cbz	r0, 2a506 <dk_buttons_init+0xbe>
			LOG_ERR("Cannot disable callbacks()");
   2a4ec:	2301      	movs	r3, #1
   2a4ee:	f04f 0000 	mov.w	r0, #0
   2a4f2:	4a2d      	ldr	r2, [pc, #180]	; (2a5a8 <dk_buttons_init+0x160>)
   2a4f4:	f363 0007 	bfi	r0, r3, #0, #8
   2a4f8:	4b2c      	ldr	r3, [pc, #176]	; (2a5ac <dk_buttons_init+0x164>)
   2a4fa:	492f      	ldr	r1, [pc, #188]	; (2a5b8 <dk_buttons_init+0x170>)
   2a4fc:	1a9b      	subs	r3, r3, r2
   2a4fe:	08db      	lsrs	r3, r3, #3
   2a500:	f363 108f 	bfi	r0, r3, #6, #10
   2a504:	e7d8      	b.n	2a4b8 <dk_buttons_init+0x70>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a506:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   2a508:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a50c:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   2a50e:	ea48 0806 	orr.w	r8, r8, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a512:	d1df      	bne.n	2a4d4 <dk_buttons_init+0x8c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a514:	4606      	mov	r6, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2a516:	4d29      	ldr	r5, [pc, #164]	; (2a5bc <dk_buttons_init+0x174>)
   2a518:	4b29      	ldr	r3, [pc, #164]	; (2a5c0 <dk_buttons_init+0x178>)
	callback->pin_mask = pin_mask;
   2a51a:	e9c5 3801 	strd	r3, r8, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2a51e:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2a522:	6883      	ldr	r3, [r0, #8]
   2a524:	69db      	ldr	r3, [r3, #28]
   2a526:	b18b      	cbz	r3, 2a54c <dk_buttons_init+0x104>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2a528:	2201      	movs	r2, #1
   2a52a:	4629      	mov	r1, r5
   2a52c:	4798      	blx	r3
		if (err) {
   2a52e:	4604      	mov	r4, r0
   2a530:	b178      	cbz	r0, 2a552 <dk_buttons_init+0x10a>
			LOG_ERR("Cannot add callback");
   2a532:	2301      	movs	r3, #1
   2a534:	f04f 0000 	mov.w	r0, #0
   2a538:	4a1b      	ldr	r2, [pc, #108]	; (2a5a8 <dk_buttons_init+0x160>)
   2a53a:	f363 0007 	bfi	r0, r3, #0, #8
   2a53e:	4b1b      	ldr	r3, [pc, #108]	; (2a5ac <dk_buttons_init+0x164>)
   2a540:	4920      	ldr	r1, [pc, #128]	; (2a5c4 <dk_buttons_init+0x17c>)
   2a542:	1a9b      	subs	r3, r3, r2
   2a544:	08db      	lsrs	r3, r3, #3
   2a546:	f363 108f 	bfi	r0, r3, #6, #10
   2a54a:	e7b5      	b.n	2a4b8 <dk_buttons_init+0x70>
		return -ENOTSUP;
   2a54c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a550:	e7ef      	b.n	2a532 <dk_buttons_init+0xea>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a552:	3601      	adds	r6, #1
   2a554:	2e04      	cmp	r6, #4
   2a556:	d1e2      	bne.n	2a51e <dk_buttons_init+0xd6>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   2a558:	491b      	ldr	r1, [pc, #108]	; (2a5c8 <dk_buttons_init+0x180>)
   2a55a:	481c      	ldr	r0, [pc, #112]	; (2a5cc <dk_buttons_init+0x184>)
   2a55c:	f01a fd83 	bl	45066 <k_delayed_work_init>
	state = STATE_SCANNING;
   2a560:	2201      	movs	r2, #1
   2a562:	4b1b      	ldr	r3, [pc, #108]	; (2a5d0 <dk_buttons_init+0x188>)
   2a564:	4919      	ldr	r1, [pc, #100]	; (2a5cc <dk_buttons_init+0x184>)
   2a566:	701a      	strb	r2, [r3, #0]
   2a568:	481a      	ldr	r0, [pc, #104]	; (2a5d4 <dk_buttons_init+0x18c>)
   2a56a:	2200      	movs	r2, #0
   2a56c:	2300      	movs	r3, #0
   2a56e:	f014 f8b5 	bl	3e6dc <k_delayed_work_submit_to_queue>
	if (err) {
   2a572:	4604      	mov	r4, r0
   2a574:	b160      	cbz	r0, 2a590 <dk_buttons_init+0x148>
		LOG_ERR("Cannot add work to workqueue");
   2a576:	2301      	movs	r3, #1
   2a578:	f04f 0000 	mov.w	r0, #0
   2a57c:	4a0a      	ldr	r2, [pc, #40]	; (2a5a8 <dk_buttons_init+0x160>)
   2a57e:	f363 0007 	bfi	r0, r3, #0, #8
   2a582:	4b0a      	ldr	r3, [pc, #40]	; (2a5ac <dk_buttons_init+0x164>)
   2a584:	4914      	ldr	r1, [pc, #80]	; (2a5d8 <dk_buttons_init+0x190>)
   2a586:	1a9b      	subs	r3, r3, r2
   2a588:	08db      	lsrs	r3, r3, #3
   2a58a:	f363 108f 	bfi	r0, r3, #6, #10
   2a58e:	e793      	b.n	2a4b8 <dk_buttons_init+0x70>
	dk_read_buttons(NULL, NULL);
   2a590:	4601      	mov	r1, r0
   2a592:	f7ff ff49 	bl	2a428 <dk_read_buttons>
	return 0;
   2a596:	e779      	b.n	2a48c <dk_buttons_init+0x44>
   2a598:	20024894 	.word	0x20024894
   2a59c:	00046f10 	.word	0x00046f10
   2a5a0:	20024884 	.word	0x20024884
   2a5a4:	20024898 	.word	0x20024898
   2a5a8:	00046878 	.word	0x00046878
   2a5ac:	000468d8 	.word	0x000468d8
   2a5b0:	0004a3ea 	.word	0x0004a3ea
   2a5b4:	0004a39e 	.word	0x0004a39e
   2a5b8:	0004a3bb 	.word	0x0004a3bb
   2a5bc:	200248b4 	.word	0x200248b4
   2a5c0:	0002a009 	.word	0x0002a009
   2a5c4:	0004a3d6 	.word	0x0004a3d6
   2a5c8:	0002a129 	.word	0x0002a129
   2a5cc:	20021940 	.word	0x20021940
   2a5d0:	2002af48 	.word	0x2002af48
   2a5d4:	200244a8 	.word	0x200244a8
   2a5d8:	0004a369 	.word	0x0004a369

0002a5dc <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   2a5dc:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   2a5de:	f240 2201 	movw	r2, #513	; 0x201
   2a5e2:	2102      	movs	r1, #2
   2a5e4:	2066      	movs	r0, #102	; 0x66
   2a5e6:	f7fa feff 	bl	253e8 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2a5ea:	4b05      	ldr	r3, [pc, #20]	; (2a600 <open_socket+0x24>)
   2a5ec:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   2a5ee:	3001      	adds	r0, #1
   2a5f0:	d104      	bne.n	2a5fc <open_socket+0x20>
		return -errno;
   2a5f2:	f018 fb92 	bl	42d1a <__errno>
   2a5f6:	6800      	ldr	r0, [r0, #0]
   2a5f8:	4240      	negs	r0, r0
	}

	return 0;
}
   2a5fa:	bd08      	pop	{r3, pc}
	return 0;
   2a5fc:	2000      	movs	r0, #0
   2a5fe:	e7fc      	b.n	2a5fa <open_socket+0x1e>
   2a600:	200248e4 	.word	0x200248e4

0002a604 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   2a604:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   2a606:	4d1a      	ldr	r5, [pc, #104]	; (2a670 <at_cmd_driver_init+0x6c>)
{
   2a608:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   2a60a:	782b      	ldrb	r3, [r5, #0]
   2a60c:	bb73      	cbnz	r3, 2a66c <at_cmd_driver_init+0x68>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2a60e:	f7ff ffe5 	bl	2a5dc <open_socket>
	if (err) {
   2a612:	4604      	mov	r4, r0
   2a614:	b188      	cbz	r0, 2a63a <at_cmd_driver_init+0x36>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2a616:	2301      	movs	r3, #1
   2a618:	f04f 0000 	mov.w	r0, #0
   2a61c:	4a15      	ldr	r2, [pc, #84]	; (2a674 <at_cmd_driver_init+0x70>)
   2a61e:	f363 0007 	bfi	r0, r3, #0, #8
   2a622:	4b15      	ldr	r3, [pc, #84]	; (2a678 <at_cmd_driver_init+0x74>)
   2a624:	4915      	ldr	r1, [pc, #84]	; (2a67c <at_cmd_driver_init+0x78>)
   2a626:	1a9b      	subs	r3, r3, r2
   2a628:	08db      	lsrs	r3, r3, #3
   2a62a:	f363 108f 	bfi	r0, r3, #6, #10
   2a62e:	4622      	mov	r2, r4
   2a630:	f017 fd05 	bl	4203e <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2a634:	4620      	mov	r0, r4
   2a636:	b009      	add	sp, #36	; 0x24
   2a638:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a63a:	2200      	movs	r2, #0
   2a63c:	2300      	movs	r3, #0
   2a63e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a642:	230a      	movs	r3, #10
   2a644:	9004      	str	r0, [sp, #16]
   2a646:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2a64a:	e9cd 0000 	strd	r0, r0, [sp]
   2a64e:	4b0c      	ldr	r3, [pc, #48]	; (2a680 <at_cmd_driver_init+0x7c>)
   2a650:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a654:	490b      	ldr	r1, [pc, #44]	; (2a684 <at_cmd_driver_init+0x80>)
   2a656:	480c      	ldr	r0, [pc, #48]	; (2a688 <at_cmd_driver_init+0x84>)
   2a658:	f013 ff16 	bl	3e488 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   2a65c:	4b0b      	ldr	r3, [pc, #44]	; (2a68c <at_cmd_driver_init+0x88>)
   2a65e:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   2a660:	490b      	ldr	r1, [pc, #44]	; (2a690 <at_cmd_driver_init+0x8c>)
   2a662:	f01a fc9f 	bl	44fa4 <z_impl_k_thread_name_set>
	initialized = true;
   2a666:	2301      	movs	r3, #1
   2a668:	702b      	strb	r3, [r5, #0]
	return 0;
   2a66a:	e7e3      	b.n	2a634 <at_cmd_driver_init+0x30>
		return 0;
   2a66c:	2400      	movs	r4, #0
   2a66e:	e7e1      	b.n	2a634 <at_cmd_driver_init+0x30>
   2a670:	2002b9d5 	.word	0x2002b9d5
   2a674:	00046878 	.word	0x00046878
   2a678:	00046890 	.word	0x00046890
   2a67c:	0004a6e6 	.word	0x0004a6e6
   2a680:	0002a7d1 	.word	0x0002a7d1
   2a684:	2002dc90 	.word	0x2002dc90
   2a688:	20021970 	.word	0x20021970
   2a68c:	2002490c 	.word	0x2002490c
   2a690:	0004a708 	.word	0x0004a708

0002a694 <complete_cmd>:
{
   2a694:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2a696:	4c08      	ldr	r4, [pc, #32]	; (2a6b8 <complete_cmd+0x24>)
   2a698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a69c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a6a0:	4620      	mov	r0, r4
   2a6a2:	f012 f99f 	bl	3c9e4 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2a6a6:	2200      	movs	r2, #0
   2a6a8:	4b04      	ldr	r3, [pc, #16]	; (2a6bc <complete_cmd+0x28>)
   2a6aa:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2a6ac:	4620      	mov	r0, r4
}
   2a6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a6b2:	f012 ba95 	b.w	3cbe0 <z_impl_k_mutex_unlock>
   2a6b6:	bf00      	nop
   2a6b8:	20020ad4 	.word	0x20020ad4
   2a6bc:	200248e8 	.word	0x200248e8

0002a6c0 <load_cmd_and_write>:
{
   2a6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6c4:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   2a6c6:	4e39      	ldr	r6, [pc, #228]	; (2a7ac <load_cmd_and_write+0xec>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2a6c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a6cc:	46b1      	mov	r9, r6
   2a6ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a6d2:	4837      	ldr	r0, [pc, #220]	; (2a7b0 <load_cmd_and_write+0xf0>)
   2a6d4:	f012 f986 	bl	3c9e4 <z_impl_k_mutex_lock>
   2a6d8:	4d36      	ldr	r5, [pc, #216]	; (2a7b4 <load_cmd_and_write+0xf4>)
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a6da:	4b37      	ldr	r3, [pc, #220]	; (2a7b8 <load_cmd_and_write+0xf8>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a6dc:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 2a7cc <load_cmd_and_write+0x10c>
   2a6e0:	1aed      	subs	r5, r5, r3
   2a6e2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (current_cmd.cmd != NULL ||
   2a6e6:	6833      	ldr	r3, [r6, #0]
   2a6e8:	2b00      	cmp	r3, #0
   2a6ea:	d159      	bne.n	2a7a0 <load_cmd_and_write+0xe0>
   2a6ec:	2200      	movs	r2, #0
   2a6ee:	2300      	movs	r3, #0
   2a6f0:	4631      	mov	r1, r6
   2a6f2:	4658      	mov	r0, fp
   2a6f4:	f012 f8c8 	bl	3c888 <z_impl_k_msgq_get>
   2a6f8:	4604      	mov	r4, r0
   2a6fa:	2800      	cmp	r0, #0
   2a6fc:	d150      	bne.n	2a7a0 <load_cmd_and_write+0xe0>
		ret = at_write(current_cmd.cmd);
   2a6fe:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   2a700:	4608      	mov	r0, r1
   2a702:	9103      	str	r1, [sp, #12]
   2a704:	f7f2 fdae 	bl	1d264 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a708:	4b2c      	ldr	r3, [pc, #176]	; (2a7bc <load_cmd_and_write+0xfc>)
	int bytes_to_send = strlen(cmd);
   2a70a:	4682      	mov	sl, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a70c:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a70e:	4652      	mov	r2, sl
   2a710:	9903      	ldr	r1, [sp, #12]
   2a712:	e9cd 4400 	strd	r4, r4, [sp]
   2a716:	4623      	mov	r3, r4
   2a718:	f018 f834 	bl	42784 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   2a71c:	1c41      	adds	r1, r0, #1
   2a71e:	4602      	mov	r2, r0
   2a720:	d12e      	bne.n	2a780 <load_cmd_and_write+0xc0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2a722:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2a726:	f043 0301 	orr.w	r3, r3, #1
   2a72a:	f363 0707 	bfi	r7, r3, #0, #8
   2a72e:	f018 faf4 	bl	42d1a <__errno>
   2a732:	f365 178f 	bfi	r7, r5, #6, #10
   2a736:	6802      	ldr	r2, [r0, #0]
   2a738:	4921      	ldr	r1, [pc, #132]	; (2a7c0 <load_cmd_and_write+0x100>)
   2a73a:	4638      	mov	r0, r7
   2a73c:	f017 fc7f 	bl	4203e <log_string_sync>
		return -errno;
   2a740:	f018 faeb 	bl	42d1a <__errno>
   2a744:	6804      	ldr	r4, [r0, #0]
   2a746:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a748:	f899 3010 	ldrb.w	r3, [r9, #16]
   2a74c:	07da      	lsls	r2, r3, #31
   2a74e:	d503      	bpl.n	2a758 <load_cmd_and_write+0x98>
			k_free(current_cmd.cmd);
   2a750:	f8d9 0000 	ldr.w	r0, [r9]
   2a754:	f01a fd2d 	bl	451b2 <k_free>
		if (ret != 0) {
   2a758:	b314      	cbz	r4, 2a7a0 <load_cmd_and_write+0xe0>
			resp.state = AT_CMD_ERROR_WRITE;
   2a75a:	2305      	movs	r3, #5
   2a75c:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a760:	f899 3010 	ldrb.w	r3, [r9, #16]
			resp.code = ret;
   2a764:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a766:	079b      	lsls	r3, r3, #30
   2a768:	d507      	bpl.n	2a77a <load_cmd_and_write+0xba>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a76a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a76e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a772:	a904      	add	r1, sp, #16
   2a774:	4813      	ldr	r0, [pc, #76]	; (2a7c4 <load_cmd_and_write+0x104>)
   2a776:	f011 ffe5 	bl	3c744 <z_impl_k_msgq_put>
			complete_cmd();
   2a77a:	f7ff ff8b 	bl	2a694 <complete_cmd>
   2a77e:	e7b2      	b.n	2a6e6 <load_cmd_and_write+0x26>
	if (bytes_sent != bytes_to_send) {
   2a780:	4582      	cmp	sl, r0
   2a782:	d0e1      	beq.n	2a748 <load_cmd_and_write+0x88>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a784:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2a788:	f043 0302 	orr.w	r3, r3, #2
   2a78c:	f363 0807 	bfi	r8, r3, #0, #8
   2a790:	f365 188f 	bfi	r8, r5, #6, #10
   2a794:	4653      	mov	r3, sl
   2a796:	490c      	ldr	r1, [pc, #48]	; (2a7c8 <load_cmd_and_write+0x108>)
   2a798:	4640      	mov	r0, r8
   2a79a:	f017 fc50 	bl	4203e <log_string_sync>
   2a79e:	e7d3      	b.n	2a748 <load_cmd_and_write+0x88>
	return z_impl_k_mutex_unlock(mutex);
   2a7a0:	4803      	ldr	r0, [pc, #12]	; (2a7b0 <load_cmd_and_write+0xf0>)
   2a7a2:	f012 fa1d 	bl	3cbe0 <z_impl_k_mutex_unlock>
}
   2a7a6:	b007      	add	sp, #28
   2a7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7ac:	200248e8 	.word	0x200248e8
   2a7b0:	20020ad4 	.word	0x20020ad4
   2a7b4:	00046890 	.word	0x00046890
   2a7b8:	00046878 	.word	0x00046878
   2a7bc:	200248e4 	.word	0x200248e4
   2a7c0:	0004a7f4 	.word	0x0004a7f4
   2a7c4:	20020b8c 	.word	0x20020b8c
   2a7c8:	0004a817 	.word	0x0004a817
   2a7cc:	20020b60 	.word	0x20020b60

0002a7d0 <socket_thread_fn>:
{
   2a7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7d4:	4ba4      	ldr	r3, [pc, #656]	; (2aa68 <socket_thread_fn+0x298>)
				LOG_ERR("Response buffer not large enough");
   2a7d6:	4aa5      	ldr	r2, [pc, #660]	; (2aa6c <socket_thread_fn+0x29c>)
{
   2a7d8:	b087      	sub	sp, #28
				LOG_ERR("Response buffer not large enough");
   2a7da:	1a9b      	subs	r3, r3, r2
   2a7dc:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2a7e0:	4ea3      	ldr	r6, [pc, #652]	; (2aa70 <socket_thread_fn+0x2a0>)
   2a7e2:	9303      	str	r3, [sp, #12]
		load_cmd_and_write();
   2a7e4:	f7ff ff6c 	bl	2a6c0 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a7e8:	4ba2      	ldr	r3, [pc, #648]	; (2aa74 <socket_thread_fn+0x2a4>)
   2a7ea:	6818      	ldr	r0, [r3, #0]
   2a7ec:	2500      	movs	r5, #0
   2a7ee:	f640 228c 	movw	r2, #2700	; 0xa8c
   2a7f2:	e9cd 5500 	strd	r5, r5, [sp]
   2a7f6:	462b      	mov	r3, r5
   2a7f8:	499d      	ldr	r1, [pc, #628]	; (2aa70 <socket_thread_fn+0x2a0>)
   2a7fa:	f017 fff6 	bl	427ea <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2a7fe:	4c9e      	ldr	r4, [pc, #632]	; (2aa78 <socket_thread_fn+0x2a8>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a800:	4a9e      	ldr	r2, [pc, #632]	; (2aa7c <socket_thread_fn+0x2ac>)
		if (bytes_read < 0) {
   2a802:	42a8      	cmp	r0, r5
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a804:	6010      	str	r0, [r2, #0]
		ret.code  = 0;
   2a806:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2a808:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2a80a:	f280 8091 	bge.w	2a930 <socket_thread_fn+0x160>
			if (errno == EHOSTDOWN) {
   2a80e:	f018 fa84 	bl	42d1a <__errno>
   2a812:	6803      	ldr	r3, [r0, #0]
   2a814:	4a99      	ldr	r2, [pc, #612]	; (2aa7c <socket_thread_fn+0x2ac>)
   2a816:	2b75      	cmp	r3, #117	; 0x75
   2a818:	d130      	bne.n	2a87c <socket_thread_fn+0xac>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a81a:	2301      	movs	r3, #1
   2a81c:	4c98      	ldr	r4, [pc, #608]	; (2aa80 <socket_thread_fn+0x2b0>)
   2a81e:	e8d4 2fef 	ldaex	r2, [r4]
   2a822:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2a826:	2900      	cmp	r1, #0
   2a828:	d1f9      	bne.n	2a81e <socket_thread_fn+0x4e>
				close(common_socket_fd);
   2a82a:	4b92      	ldr	r3, [pc, #584]	; (2aa74 <socket_thread_fn+0x2a4>)
   2a82c:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   2a82e:	f017 ff7c 	bl	4272a <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   2a832:	f7fe fe1b 	bl	2946c <bsdlib_shutdown_wait>
   2a836:	e8d4 3fef 	ldaex	r3, [r4]
   2a83a:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a83e:	2a00      	cmp	r2, #0
   2a840:	d1f9      	bne.n	2a836 <socket_thread_fn+0x66>
				if (open_socket() != 0) {
   2a842:	f7ff fecb 	bl	2a5dc <open_socket>
   2a846:	2800      	cmp	r0, #0
   2a848:	d0cc      	beq.n	2a7e4 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   2a84a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2a84e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2a852:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2a856:	f043 0301 	orr.w	r3, r3, #1
   2a85a:	f363 0207 	bfi	r2, r3, #0, #8
   2a85e:	b293      	uxth	r3, r2
   2a860:	9a03      	ldr	r2, [sp, #12]
   2a862:	f362 138f 	bfi	r3, r2, #6, #10
   2a866:	f8ad 3010 	strh.w	r3, [sp, #16]
   2a86a:	f018 fa56 	bl	42d1a <__errno>
   2a86e:	4985      	ldr	r1, [pc, #532]	; (2aa84 <socket_thread_fn+0x2b4>)
   2a870:	6802      	ldr	r2, [r0, #0]
   2a872:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   2a876:	f017 fbe2 	bl	4203e <log_string_sync>
   2a87a:	e7b3      	b.n	2a7e4 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   2a87c:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2a880:	f043 0301 	orr.w	r3, r3, #1
   2a884:	f363 0707 	bfi	r7, r3, #0, #8
   2a888:	9b03      	ldr	r3, [sp, #12]
   2a88a:	6812      	ldr	r2, [r2, #0]
   2a88c:	f363 178f 	bfi	r7, r3, #6, #10
   2a890:	4638      	mov	r0, r7
   2a892:	497d      	ldr	r1, [pc, #500]	; (2aa88 <socket_thread_fn+0x2b8>)
   2a894:	f017 fbd3 	bl	4203e <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2a898:	4b76      	ldr	r3, [pc, #472]	; (2aa74 <socket_thread_fn+0x2a4>)
   2a89a:	6818      	ldr	r0, [r3, #0]
   2a89c:	f017 ff45 	bl	4272a <z_impl_zsock_close>
   2a8a0:	bb80      	cbnz	r0, 2a904 <socket_thread_fn+0x134>
			    (open_socket() == 0)) {
   2a8a2:	f7ff fe9b 	bl	2a5dc <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2a8a6:	bb68      	cbnz	r0, 2a904 <socket_thread_fn+0x134>
				LOG_INF("AT socket recovered");
   2a8a8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2a8ac:	f043 0303 	orr.w	r3, r3, #3
   2a8b0:	f363 0807 	bfi	r8, r3, #0, #8
   2a8b4:	9b03      	ldr	r3, [sp, #12]
   2a8b6:	4975      	ldr	r1, [pc, #468]	; (2aa8c <socket_thread_fn+0x2bc>)
   2a8b8:	f363 188f 	bfi	r8, r3, #6, #10
   2a8bc:	4640      	mov	r0, r8
   2a8be:	f017 fbbe 	bl	4203e <log_string_sync>
				ret.state = AT_CMD_ERROR_READ;
   2a8c2:	2306      	movs	r3, #6
   2a8c4:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2a8c6:	f018 fa28 	bl	42d1a <__errno>
   2a8ca:	6803      	ldr	r3, [r0, #0]
   2a8cc:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2a8ce:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2a8d0:	4b6f      	ldr	r3, [pc, #444]	; (2aa90 <socket_thread_fn+0x2c0>)
   2a8d2:	4c69      	ldr	r4, [pc, #420]	; (2aa78 <socket_thread_fn+0x2a8>)
   2a8d4:	681a      	ldr	r2, [r3, #0]
   2a8d6:	b172      	cbz	r2, 2a8f6 <socket_thread_fn+0x126>
   2a8d8:	7c1b      	ldrb	r3, [r3, #16]
   2a8da:	079b      	lsls	r3, r3, #30
   2a8dc:	d50b      	bpl.n	2a8f6 <socket_thread_fn+0x126>
		    current_cmd.flags & AT_CMD_SYNC &&
   2a8de:	7923      	ldrb	r3, [r4, #4]
   2a8e0:	2b07      	cmp	r3, #7
   2a8e2:	f43f af7f 	beq.w	2a7e4 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a8e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a8ee:	4621      	mov	r1, r4
   2a8f0:	4868      	ldr	r0, [pc, #416]	; (2aa94 <socket_thread_fn+0x2c4>)
   2a8f2:	f011 ff27 	bl	3c744 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2a8f6:	7923      	ldrb	r3, [r4, #4]
   2a8f8:	2b07      	cmp	r3, #7
   2a8fa:	f43f af73 	beq.w	2a7e4 <socket_thread_fn+0x14>
			complete_cmd();
   2a8fe:	f7ff fec9 	bl	2a694 <complete_cmd>
   2a902:	e76f      	b.n	2a7e4 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2a904:	2301      	movs	r3, #1
   2a906:	f04f 0400 	mov.w	r4, #0
   2a90a:	f363 0407 	bfi	r4, r3, #0, #8
   2a90e:	9b03      	ldr	r3, [sp, #12]
   2a910:	f363 148f 	bfi	r4, r3, #6, #10
   2a914:	f018 fa01 	bl	42d1a <__errno>
   2a918:	495f      	ldr	r1, [pc, #380]	; (2aa98 <socket_thread_fn+0x2c8>)
   2a91a:	6802      	ldr	r2, [r0, #0]
   2a91c:	4620      	mov	r0, r4
   2a91e:	f017 fb8e 	bl	4203e <log_string_sync>
			close(common_socket_fd);
   2a922:	4b54      	ldr	r3, [pc, #336]	; (2aa74 <socket_thread_fn+0x2a4>)
   2a924:	6818      	ldr	r0, [r3, #0]
}
   2a926:	b007      	add	sp, #28
   2a928:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a92c:	f017 befd 	b.w	4272a <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2a930:	d111      	bne.n	2a956 <socket_thread_fn+0x186>
			LOG_ERR("AT message empty");
   2a932:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2a936:	f043 0301 	orr.w	r3, r3, #1
   2a93a:	f363 0907 	bfi	r9, r3, #0, #8
   2a93e:	9b03      	ldr	r3, [sp, #12]
   2a940:	4956      	ldr	r1, [pc, #344]	; (2aa9c <socket_thread_fn+0x2cc>)
   2a942:	f363 198f 	bfi	r9, r3, #6, #10
   2a946:	4648      	mov	r0, r9
   2a948:	f017 fb79 	bl	4203e <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a94c:	2306      	movs	r3, #6
   2a94e:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2a950:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2a954:	e7bb      	b.n	2a8ce <socket_thread_fn+0xfe>
		} else if (buf[bytes_read - 1] != '\0') {
   2a956:	1832      	adds	r2, r6, r0
   2a958:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2a95c:	b18a      	cbz	r2, 2a982 <socket_thread_fn+0x1b2>
			LOG_ERR("AT message too large for reception buffer or "
   2a95e:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2a962:	f043 0301 	orr.w	r3, r3, #1
   2a966:	f363 0a07 	bfi	sl, r3, #0, #8
   2a96a:	9b03      	ldr	r3, [sp, #12]
   2a96c:	494c      	ldr	r1, [pc, #304]	; (2aaa0 <socket_thread_fn+0x2d0>)
   2a96e:	f363 1a8f 	bfi	sl, r3, #6, #10
   2a972:	4650      	mov	r0, sl
   2a974:	f017 fb63 	bl	4203e <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a978:	2306      	movs	r3, #6
   2a97a:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2a97c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2a980:	e7a5      	b.n	2a8ce <socket_thread_fn+0xfe>
	ret->state = AT_CMD_NOTIFICATION;
   2a982:	2207      	movs	r2, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a984:	1f45      	subs	r5, r0, #5
   2a986:	9005      	str	r0, [sp, #20]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a988:	4846      	ldr	r0, [pc, #280]	; (2aaa4 <socket_thread_fn+0x2d4>)
	ret->state = AT_CMD_NOTIFICATION;
   2a98a:	7122      	strb	r2, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a98c:	f7f2 fc6a 	bl	1d264 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a990:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a992:	4602      	mov	r2, r0
   2a994:	4943      	ldr	r1, [pc, #268]	; (2aaa4 <socket_thread_fn+0x2d4>)
   2a996:	4628      	mov	r0, r5
   2a998:	f01a fe3f 	bl	4561a <strncmp>
		if (match) {
   2a99c:	9b05      	ldr	r3, [sp, #20]
   2a99e:	b9c8      	cbnz	r0, 2a9d4 <socket_thread_fn+0x204>
			ret->state = AT_CMD_OK;
   2a9a0:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a9a2:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2a9a4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2a9a6:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   2a9a8:	3201      	adds	r2, #1
   2a9aa:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   2a9ac:	4c38      	ldr	r4, [pc, #224]	; (2aa90 <socket_thread_fn+0x2c0>)
   2a9ae:	4d32      	ldr	r5, [pc, #200]	; (2aa78 <socket_thread_fn+0x2a8>)
   2a9b0:	6823      	ldr	r3, [r4, #0]
   2a9b2:	2b00      	cmp	r3, #0
   2a9b4:	d04f      	beq.n	2aa56 <socket_thread_fn+0x286>
		    current_cmd.resp != NULL &&
   2a9b6:	6860      	ldr	r0, [r4, #4]
		if (current_cmd.cmd != NULL &&
   2a9b8:	2800      	cmp	r0, #0
   2a9ba:	d04c      	beq.n	2aa56 <socket_thread_fn+0x286>
		    current_cmd.resp != NULL &&
   2a9bc:	792b      	ldrb	r3, [r5, #4]
   2a9be:	2b07      	cmp	r3, #7
   2a9c0:	d132      	bne.n	2aa28 <socket_thread_fn+0x258>
		    notification_handler != NULL) {
   2a9c2:	4b39      	ldr	r3, [pc, #228]	; (2aaa8 <socket_thread_fn+0x2d8>)
   2a9c4:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a9c6:	b913      	cbnz	r3, 2a9ce <socket_thread_fn+0x1fe>
		} else if (current_cmd.callback != NULL) {
   2a9c8:	68a3      	ldr	r3, [r4, #8]
   2a9ca:	2b00      	cmp	r3, #0
   2a9cc:	d080      	beq.n	2a8d0 <socket_thread_fn+0x100>
			current_cmd.callback(buf);
   2a9ce:	4630      	mov	r0, r6
   2a9d0:	4798      	blx	r3
   2a9d2:	e77d      	b.n	2a8d0 <socket_thread_fn+0x100>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2a9d4:	4935      	ldr	r1, [pc, #212]	; (2aaac <socket_thread_fn+0x2dc>)
   2a9d6:	4630      	mov	r0, r6
   2a9d8:	9305      	str	r3, [sp, #20]
   2a9da:	f01a fe4f 	bl	4567c <strstr>
		if (tmpstr) {
   2a9de:	9b05      	ldr	r3, [sp, #20]
   2a9e0:	4605      	mov	r5, r0
   2a9e2:	b128      	cbz	r0, 2a9f0 <socket_thread_fn+0x220>
			ret->state = AT_CMD_ERROR_CMS;
   2a9e4:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a9e6:	4832      	ldr	r0, [pc, #200]	; (2aab0 <socket_thread_fn+0x2e0>)
			ret->state = AT_CMD_ERROR_CMS;
   2a9e8:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a9ea:	f01a fbfd 	bl	451e8 <atoi>
   2a9ee:	e7d8      	b.n	2a9a2 <socket_thread_fn+0x1d2>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2a9f0:	4930      	ldr	r1, [pc, #192]	; (2aab4 <socket_thread_fn+0x2e4>)
   2a9f2:	4630      	mov	r0, r6
   2a9f4:	9305      	str	r3, [sp, #20]
   2a9f6:	f01a fe41 	bl	4567c <strstr>
		if (tmpstr) {
   2a9fa:	9b05      	ldr	r3, [sp, #20]
   2a9fc:	4605      	mov	r5, r0
   2a9fe:	b108      	cbz	r0, 2aa04 <socket_thread_fn+0x234>
			ret->state = AT_CMD_ERROR_CME;
   2aa00:	2303      	movs	r3, #3
   2aa02:	e7f0      	b.n	2a9e6 <socket_thread_fn+0x216>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2aa04:	482c      	ldr	r0, [pc, #176]	; (2aab8 <socket_thread_fn+0x2e8>)
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2aa06:	f1a3 0508 	sub.w	r5, r3, #8
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2aa0a:	f7f2 fc2b 	bl	1d264 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2aa0e:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2aa10:	4602      	mov	r2, r0
   2aa12:	4929      	ldr	r1, [pc, #164]	; (2aab8 <socket_thread_fn+0x2e8>)
   2aa14:	4628      	mov	r0, r5
   2aa16:	f01a fe00 	bl	4561a <strncmp>
		if (match) {
   2aa1a:	bb00      	cbnz	r0, 2aa5e <socket_thread_fn+0x28e>
			ret->state = AT_CMD_ERROR;
   2aa1c:	2301      	movs	r3, #1
   2aa1e:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   2aa20:	f06f 0307 	mvn.w	r3, #7
   2aa24:	6023      	str	r3, [r4, #0]
			break;
   2aa26:	e7bd      	b.n	2a9a4 <socket_thread_fn+0x1d4>
			if (current_cmd.resp_size < payload_len) {
   2aa28:	68e3      	ldr	r3, [r4, #12]
   2aa2a:	429a      	cmp	r2, r3
   2aa2c:	d910      	bls.n	2aa50 <socket_thread_fn+0x280>
				LOG_ERR("Response buffer not large enough");
   2aa2e:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   2aa32:	f043 0301 	orr.w	r3, r3, #1
   2aa36:	f363 0b07 	bfi	fp, r3, #0, #8
   2aa3a:	9b03      	ldr	r3, [sp, #12]
   2aa3c:	491f      	ldr	r1, [pc, #124]	; (2aabc <socket_thread_fn+0x2ec>)
   2aa3e:	f363 1b8f 	bfi	fp, r3, #6, #10
   2aa42:	4658      	mov	r0, fp
   2aa44:	f017 fafb 	bl	4203e <log_string_sync>
				ret.code  = -EMSGSIZE;
   2aa48:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2aa4c:	602b      	str	r3, [r5, #0]
				goto next;
   2aa4e:	e73f      	b.n	2a8d0 <socket_thread_fn+0x100>
   2aa50:	4631      	mov	r1, r6
   2aa52:	f01a fbe9 	bl	45228 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2aa56:	792b      	ldrb	r3, [r5, #4]
   2aa58:	2b07      	cmp	r3, #7
   2aa5a:	d1b5      	bne.n	2a9c8 <socket_thread_fn+0x1f8>
   2aa5c:	e7b1      	b.n	2a9c2 <socket_thread_fn+0x1f2>
		new_len = strlen(buf) + 1;
   2aa5e:	4630      	mov	r0, r6
   2aa60:	f7f2 fc00 	bl	1d264 <strlen>
   2aa64:	1c42      	adds	r2, r0, #1
   2aa66:	e7a1      	b.n	2a9ac <socket_thread_fn+0x1dc>
   2aa68:	00046890 	.word	0x00046890
   2aa6c:	00046878 	.word	0x00046878
   2aa70:	2002af49 	.word	0x2002af49
   2aa74:	200248e4 	.word	0x200248e4
   2aa78:	20024900 	.word	0x20024900
   2aa7c:	200248e0 	.word	0x200248e0
   2aa80:	20024908 	.word	0x20024908
   2aa84:	0004a849 	.word	0x0004a849
   2aa88:	0004a87d 	.word	0x0004a87d
   2aa8c:	0004a89f 	.word	0x0004a89f
   2aa90:	200248e8 	.word	0x200248e8
   2aa94:	20020b8c 	.word	0x20020b8c
   2aa98:	0004a8b3 	.word	0x0004a8b3
   2aa9c:	0004a8ea 	.word	0x0004a8ea
   2aaa0:	0004a8fb 	.word	0x0004a8fb
   2aaa4:	0004851e 	.word	0x0004851e
   2aaa8:	200248fc 	.word	0x200248fc
   2aaac:	0004a946 	.word	0x0004a946
   2aab0:	2002af54 	.word	0x2002af54
   2aab4:	0004a952 	.word	0x0004a952
   2aab8:	0004a95e 	.word	0x0004a95e
   2aabc:	0004a966 	.word	0x0004a966

0002aac0 <at_cmd_write>:
{
   2aac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aac2:	4605      	mov	r5, r0
   2aac4:	b089      	sub	sp, #36	; 0x24
   2aac6:	460f      	mov	r7, r1
   2aac8:	4616      	mov	r6, r2
   2aaca:	461c      	mov	r4, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2aacc:	4b42      	ldr	r3, [pc, #264]	; (2abd8 <at_cmd_write+0x118>)
   2aace:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2aad2:	2b01      	cmp	r3, #1
   2aad4:	d07d      	beq.n	2abd2 <at_cmd_write+0x112>
	return z_impl_k_current_get();
   2aad6:	f013 fb8f 	bl	3e1f8 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   2aada:	4b40      	ldr	r3, [pc, #256]	; (2abdc <at_cmd_write+0x11c>)
   2aadc:	681b      	ldr	r3, [r3, #0]
   2aade:	4283      	cmp	r3, r0
   2aae0:	d10e      	bne.n	2ab00 <at_cmd_write+0x40>
   2aae2:	493f      	ldr	r1, [pc, #252]	; (2abe0 <at_cmd_write+0x120>)
   2aae4:	f240 1383 	movw	r3, #387	; 0x183
   2aae8:	4a3e      	ldr	r2, [pc, #248]	; (2abe4 <at_cmd_write+0x124>)
   2aaea:	483f      	ldr	r0, [pc, #252]	; (2abe8 <at_cmd_write+0x128>)
   2aaec:	f017 f87c 	bl	41be8 <printk>
   2aaf0:	483e      	ldr	r0, [pc, #248]	; (2abec <at_cmd_write+0x12c>)
   2aaf2:	f017 f879 	bl	41be8 <printk>
   2aaf6:	f240 1183 	movw	r1, #387	; 0x183
   2aafa:	483a      	ldr	r0, [pc, #232]	; (2abe4 <at_cmd_write+0x124>)
   2aafc:	f017 fa8e 	bl	4201c <assert_post_action>
	if (cmd == NULL) {
   2ab00:	b185      	cbz	r5, 2ab24 <at_cmd_write+0x64>
   2ab02:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2ab04:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2ab08:	bb13      	cbnz	r3, 2ab50 <at_cmd_write+0x90>
		LOG_ERR("Invalid command");
   2ab0a:	2301      	movs	r3, #1
   2ab0c:	f04f 0000 	mov.w	r0, #0
   2ab10:	4a37      	ldr	r2, [pc, #220]	; (2abf0 <at_cmd_write+0x130>)
   2ab12:	f363 0007 	bfi	r0, r3, #0, #8
   2ab16:	4b37      	ldr	r3, [pc, #220]	; (2abf4 <at_cmd_write+0x134>)
   2ab18:	4937      	ldr	r1, [pc, #220]	; (2abf8 <at_cmd_write+0x138>)
   2ab1a:	1a9b      	subs	r3, r3, r2
   2ab1c:	08db      	lsrs	r3, r3, #3
   2ab1e:	f363 108f 	bfi	r0, r3, #6, #10
   2ab22:	e00b      	b.n	2ab3c <at_cmd_write+0x7c>
		LOG_ERR("cmd is NULL");
   2ab24:	2301      	movs	r3, #1
   2ab26:	f04f 0000 	mov.w	r0, #0
   2ab2a:	4a31      	ldr	r2, [pc, #196]	; (2abf0 <at_cmd_write+0x130>)
   2ab2c:	f363 0007 	bfi	r0, r3, #0, #8
   2ab30:	4b30      	ldr	r3, [pc, #192]	; (2abf4 <at_cmd_write+0x134>)
   2ab32:	4932      	ldr	r1, [pc, #200]	; (2abfc <at_cmd_write+0x13c>)
   2ab34:	1a9b      	subs	r3, r3, r2
   2ab36:	08db      	lsrs	r3, r3, #3
   2ab38:	f363 108f 	bfi	r0, r3, #6, #10
   2ab3c:	f017 fa7f 	bl	4203e <log_string_sync>
		if (state) {
   2ab40:	b91c      	cbnz	r4, 2ab4a <at_cmd_write+0x8a>
		return -EINVAL;
   2ab42:	f06f 0015 	mvn.w	r0, #21
}
   2ab46:	b009      	add	sp, #36	; 0x24
   2ab48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2ab4a:	2304      	movs	r3, #4
   2ab4c:	7023      	strb	r3, [r4, #0]
   2ab4e:	e7f8      	b.n	2ab42 <at_cmd_write+0x82>
		if (*c > ' ') {
   2ab50:	2b20      	cmp	r3, #32
   2ab52:	d9d7      	bls.n	2ab04 <at_cmd_write+0x44>
	command.callback = NULL;
   2ab54:	2300      	movs	r3, #0
   2ab56:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2ab58:	2302      	movs	r3, #2
	command.resp = buf;
   2ab5a:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   2ab5e:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2ab60:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2ab64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ab68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ab6c:	4824      	ldr	r0, [pc, #144]	; (2ac00 <at_cmd_write+0x140>)
   2ab6e:	f011 ff39 	bl	3c9e4 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2ab72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ab76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ab7a:	a903      	add	r1, sp, #12
   2ab7c:	4821      	ldr	r0, [pc, #132]	; (2ac04 <at_cmd_write+0x144>)
   2ab7e:	f011 fde1 	bl	3c744 <z_impl_k_msgq_put>
   2ab82:	4602      	mov	r2, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2ab84:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2ab86:	b190      	cbz	r0, 2abae <at_cmd_write+0xee>
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2ab88:	2301      	movs	r3, #1
   2ab8a:	f04f 0000 	mov.w	r0, #0
   2ab8e:	4918      	ldr	r1, [pc, #96]	; (2abf0 <at_cmd_write+0x130>)
   2ab90:	f363 0007 	bfi	r0, r3, #0, #8
   2ab94:	4b17      	ldr	r3, [pc, #92]	; (2abf4 <at_cmd_write+0x134>)
   2ab96:	1a5b      	subs	r3, r3, r1
   2ab98:	08db      	lsrs	r3, r3, #3
   2ab9a:	f363 108f 	bfi	r0, r3, #6, #10
   2ab9e:	491a      	ldr	r1, [pc, #104]	; (2ac08 <at_cmd_write+0x148>)
   2aba0:	f017 fa4d 	bl	4203e <log_string_sync>
		if (state) {
   2aba4:	b10c      	cbz	r4, 2abaa <at_cmd_write+0xea>
			*state = AT_CMD_ERROR_QUEUE;
   2aba6:	2304      	movs	r3, #4
		*state = ret.state;
   2aba8:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2abaa:	9801      	ldr	r0, [sp, #4]
   2abac:	e7cb      	b.n	2ab46 <at_cmd_write+0x86>
	load_cmd_and_write();
   2abae:	f7ff fd87 	bl	2a6c0 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2abb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2abb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2abba:	a901      	add	r1, sp, #4
   2abbc:	4813      	ldr	r0, [pc, #76]	; (2ac0c <at_cmd_write+0x14c>)
   2abbe:	f011 fe63 	bl	3c888 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   2abc2:	480f      	ldr	r0, [pc, #60]	; (2ac00 <at_cmd_write+0x140>)
   2abc4:	f012 f80c 	bl	3cbe0 <z_impl_k_mutex_unlock>
	if (state) {
   2abc8:	2c00      	cmp	r4, #0
   2abca:	d0ee      	beq.n	2abaa <at_cmd_write+0xea>
		*state = ret.state;
   2abcc:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2abd0:	e7ea      	b.n	2aba8 <at_cmd_write+0xe8>
		return -EHOSTDOWN;
   2abd2:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2abd6:	e7b6      	b.n	2ab46 <at_cmd_write+0x86>
   2abd8:	20024908 	.word	0x20024908
   2abdc:	2002490c 	.word	0x2002490c
   2abe0:	0004a76a 	.word	0x0004a76a
   2abe4:	0004a746 	.word	0x0004a746
   2abe8:	0004825b 	.word	0x0004825b
   2abec:	0004a788 	.word	0x0004a788
   2abf0:	00046878 	.word	0x00046878
   2abf4:	00046890 	.word	0x00046890
   2abf8:	0004a7e4 	.word	0x0004a7e4
   2abfc:	0004a7d8 	.word	0x0004a7d8
   2ac00:	20020b10 	.word	0x20020b10
   2ac04:	20020b60 	.word	0x20020b60
   2ac08:	0004a7b8 	.word	0x0004a7b8
   2ac0c:	20020b8c 	.word	0x20020b8c

0002ac10 <at_cmd_set_notification_handler>:
{
   2ac10:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2ac12:	4c0b      	ldr	r4, [pc, #44]	; (2ac40 <at_cmd_set_notification_handler+0x30>)
{
   2ac14:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2ac16:	6822      	ldr	r2, [r4, #0]
   2ac18:	b17a      	cbz	r2, 2ac3a <at_cmd_set_notification_handler+0x2a>
   2ac1a:	4282      	cmp	r2, r0
   2ac1c:	d00d      	beq.n	2ac3a <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   2ac1e:	2302      	movs	r3, #2
   2ac20:	f04f 0000 	mov.w	r0, #0
   2ac24:	4907      	ldr	r1, [pc, #28]	; (2ac44 <at_cmd_set_notification_handler+0x34>)
   2ac26:	f363 0007 	bfi	r0, r3, #0, #8
   2ac2a:	4b07      	ldr	r3, [pc, #28]	; (2ac48 <at_cmd_set_notification_handler+0x38>)
   2ac2c:	1a5b      	subs	r3, r3, r1
   2ac2e:	08db      	lsrs	r3, r3, #3
   2ac30:	f363 108f 	bfi	r0, r3, #6, #10
   2ac34:	4905      	ldr	r1, [pc, #20]	; (2ac4c <at_cmd_set_notification_handler+0x3c>)
   2ac36:	f017 fa02 	bl	4203e <log_string_sync>
	notification_handler = handler;
   2ac3a:	6025      	str	r5, [r4, #0]
}
   2ac3c:	bd38      	pop	{r3, r4, r5, pc}
   2ac3e:	bf00      	nop
   2ac40:	200248fc 	.word	0x200248fc
   2ac44:	00046878 	.word	0x00046878
   2ac48:	00046890 	.word	0x00046890
   2ac4c:	0004a71d 	.word	0x0004a71d

0002ac50 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ac50:	4b0b      	ldr	r3, [pc, #44]	; (2ac80 <find_node+0x30>)
{
   2ac52:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ac54:	681b      	ldr	r3, [r3, #0]
   2ac56:	b153      	cbz	r3, 2ac6e <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ac58:	2500      	movs	r5, #0
   2ac5a:	461c      	mov	r4, r3
   2ac5c:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   2ac5e:	6866      	ldr	r6, [r4, #4]
   2ac60:	428e      	cmp	r6, r1
   2ac62:	d106      	bne.n	2ac72 <find_node+0x22>
   2ac64:	68a6      	ldr	r6, [r4, #8]
   2ac66:	4296      	cmp	r6, r2
   2ac68:	d103      	bne.n	2ac72 <find_node+0x22>
			*prev_out = prev;
			return curr;
   2ac6a:	4623      	mov	r3, r4
			*prev_out = prev;
   2ac6c:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2ac6e:	4618      	mov	r0, r3
   2ac70:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ac72:	2b00      	cmp	r3, #0
   2ac74:	d0fb      	beq.n	2ac6e <find_node+0x1e>
   2ac76:	4625      	mov	r5, r4
   2ac78:	461c      	mov	r4, r3
   2ac7a:	681b      	ldr	r3, [r3, #0]
   2ac7c:	e7ef      	b.n	2ac5e <find_node+0xe>
   2ac7e:	bf00      	nop
   2ac80:	20024910 	.word	0x20024910

0002ac84 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2ac84:	4a0e      	ldr	r2, [pc, #56]	; (2acc0 <module_init+0x3c>)
{
   2ac86:	b508      	push	{r3, lr}
	if (initialized) {
   2ac88:	7813      	ldrb	r3, [r2, #0]
   2ac8a:	b17b      	cbz	r3, 2acac <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   2ac8c:	2302      	movs	r3, #2
   2ac8e:	f04f 0000 	mov.w	r0, #0
   2ac92:	4a0c      	ldr	r2, [pc, #48]	; (2acc4 <module_init+0x40>)
   2ac94:	f363 0007 	bfi	r0, r3, #0, #8
   2ac98:	4b0b      	ldr	r3, [pc, #44]	; (2acc8 <module_init+0x44>)
   2ac9a:	490c      	ldr	r1, [pc, #48]	; (2accc <module_init+0x48>)
   2ac9c:	1a9b      	subs	r3, r3, r2
   2ac9e:	08db      	lsrs	r3, r3, #3
   2aca0:	f363 108f 	bfi	r0, r3, #6, #10
   2aca4:	f017 f9cb 	bl	4203e <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2aca8:	2000      	movs	r0, #0
   2acaa:	bd08      	pop	{r3, pc}
	initialized = true;
   2acac:	2101      	movs	r1, #1
   2acae:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2acb0:	4a07      	ldr	r2, [pc, #28]	; (2acd0 <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   2acb2:	4808      	ldr	r0, [pc, #32]	; (2acd4 <module_init+0x50>)
	list->tail = NULL;
   2acb4:	e9c2 3300 	strd	r3, r3, [r2]
   2acb8:	f7ff ffaa 	bl	2ac10 <at_cmd_set_notification_handler>
	return 0;
   2acbc:	e7f4      	b.n	2aca8 <module_init+0x24>
   2acbe:	bf00      	nop
   2acc0:	2002b9d6 	.word	0x2002b9d6
   2acc4:	00046878 	.word	0x00046878
   2acc8:	000468a0 	.word	0x000468a0
   2accc:	0004a9e5 	.word	0x0004a9e5
   2acd0:	20024910 	.word	0x20024910
   2acd4:	0002ace5 	.word	0x0002ace5

0002acd8 <k_mutex_unlock.constprop.7>:
   2acd8:	4801      	ldr	r0, [pc, #4]	; (2ace0 <k_mutex_unlock.constprop.7+0x8>)
   2acda:	f011 bf81 	b.w	3cbe0 <z_impl_k_mutex_unlock>
   2acde:	bf00      	nop
   2ace0:	20020afc 	.word	0x20020afc

0002ace4 <notif_dispatch>:
{
   2ace4:	b538      	push	{r3, r4, r5, lr}
   2ace6:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2ace8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2acec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2acf0:	4809      	ldr	r0, [pc, #36]	; (2ad18 <notif_dispatch+0x34>)
   2acf2:	f011 fe77 	bl	3c9e4 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2acf6:	4b09      	ldr	r3, [pc, #36]	; (2ad1c <notif_dispatch+0x38>)
   2acf8:	681b      	ldr	r3, [r3, #0]
   2acfa:	b91b      	cbnz	r3, 2ad04 <notif_dispatch+0x20>
}
   2acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2ad00:	f7ff bfea 	b.w	2acd8 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ad04:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   2ad06:	689a      	ldr	r2, [r3, #8]
   2ad08:	4629      	mov	r1, r5
   2ad0a:	6858      	ldr	r0, [r3, #4]
   2ad0c:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ad0e:	2c00      	cmp	r4, #0
   2ad10:	d0f4      	beq.n	2acfc <notif_dispatch+0x18>
   2ad12:	4623      	mov	r3, r4
   2ad14:	6824      	ldr	r4, [r4, #0]
   2ad16:	e7f6      	b.n	2ad06 <notif_dispatch+0x22>
   2ad18:	20020afc 	.word	0x20020afc
   2ad1c:	20024910 	.word	0x20024910

0002ad20 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   2ad20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ad22:	4606      	mov	r6, r0
	if (handler == NULL) {
   2ad24:	460d      	mov	r5, r1
   2ad26:	b999      	cbnz	r1, 2ad50 <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2ad28:	2301      	movs	r3, #1
   2ad2a:	f04f 0000 	mov.w	r0, #0
   2ad2e:	4a1e      	ldr	r2, [pc, #120]	; (2ada8 <at_notif_register_handler+0x88>)
   2ad30:	f363 0007 	bfi	r0, r3, #0, #8
   2ad34:	4b1d      	ldr	r3, [pc, #116]	; (2adac <at_notif_register_handler+0x8c>)
   2ad36:	1a9b      	subs	r3, r3, r2
   2ad38:	08db      	lsrs	r3, r3, #3
   2ad3a:	f363 108f 	bfi	r0, r3, #6, #10
   2ad3e:	4632      	mov	r2, r6
   2ad40:	460b      	mov	r3, r1
   2ad42:	491b      	ldr	r1, [pc, #108]	; (2adb0 <at_notif_register_handler+0x90>)
   2ad44:	f017 f97b 	bl	4203e <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2ad48:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2ad4c:	b002      	add	sp, #8
   2ad4e:	bd70      	pop	{r4, r5, r6, pc}
   2ad50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ad54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ad58:	4816      	ldr	r0, [pc, #88]	; (2adb4 <at_notif_register_handler+0x94>)
   2ad5a:	f011 fe43 	bl	3c9e4 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2ad5e:	462a      	mov	r2, r5
   2ad60:	4631      	mov	r1, r6
   2ad62:	a801      	add	r0, sp, #4
   2ad64:	f7ff ff74 	bl	2ac50 <find_node>
   2ad68:	4604      	mov	r4, r0
   2ad6a:	b118      	cbz	r0, 2ad74 <at_notif_register_handler+0x54>
		k_mutex_unlock(&list_mtx);
   2ad6c:	f7ff ffb4 	bl	2acd8 <k_mutex_unlock.constprop.7>
		return 0;
   2ad70:	2000      	movs	r0, #0
   2ad72:	e7eb      	b.n	2ad4c <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2ad74:	200c      	movs	r0, #12
   2ad76:	f014 fc7d 	bl	3f674 <k_malloc>
   2ad7a:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2ad7c:	b920      	cbnz	r0, 2ad88 <at_notif_register_handler+0x68>
		k_mutex_unlock(&list_mtx);
   2ad7e:	f7ff ffab 	bl	2acd8 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   2ad82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad86:	e7e1      	b.n	2ad4c <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   2ad88:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2ad8a:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2ad8c:	4a0a      	ldr	r2, [pc, #40]	; (2adb8 <at_notif_register_handler+0x98>)
   2ad8e:	6044      	str	r4, [r0, #4]
   2ad90:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2ad92:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2ad94:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2ad96:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2ad9a:	b911      	cbnz	r1, 2ada2 <at_notif_register_handler+0x82>
	list->head = node;
   2ad9c:	e9c2 3300 	strd	r3, r3, [r2]
   2ada0:	e7e4      	b.n	2ad6c <at_notif_register_handler+0x4c>
	parent->next = child;
   2ada2:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2ada4:	6053      	str	r3, [r2, #4]
   2ada6:	e7e1      	b.n	2ad6c <at_notif_register_handler+0x4c>
   2ada8:	00046878 	.word	0x00046878
   2adac:	000468a0 	.word	0x000468a0
   2adb0:	0004a9b4 	.word	0x0004a9b4
   2adb4:	20020afc 	.word	0x20020afc
   2adb8:	20024910 	.word	0x20024910

0002adbc <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2adbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2adbe:	4605      	mov	r5, r0
	if (handler == NULL) {
   2adc0:	460c      	mov	r4, r1
   2adc2:	b999      	cbnz	r1, 2adec <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2adc4:	2301      	movs	r3, #1
   2adc6:	f04f 0000 	mov.w	r0, #0
   2adca:	4a22      	ldr	r2, [pc, #136]	; (2ae54 <at_notif_deregister_handler+0x98>)
   2adcc:	f363 0007 	bfi	r0, r3, #0, #8
   2add0:	4b21      	ldr	r3, [pc, #132]	; (2ae58 <at_notif_deregister_handler+0x9c>)
   2add2:	1a9b      	subs	r3, r3, r2
   2add4:	08db      	lsrs	r3, r3, #3
   2add6:	f363 108f 	bfi	r0, r3, #6, #10
   2adda:	462a      	mov	r2, r5
   2addc:	460b      	mov	r3, r1
   2adde:	491f      	ldr	r1, [pc, #124]	; (2ae5c <at_notif_deregister_handler+0xa0>)
   2ade0:	f017 f92d 	bl	4203e <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2ade4:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   2ade8:	b003      	add	sp, #12
   2adea:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   2adec:	2300      	movs	r3, #0
   2adee:	9301      	str	r3, [sp, #4]
   2adf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2adf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2adf8:	4819      	ldr	r0, [pc, #100]	; (2ae60 <at_notif_deregister_handler+0xa4>)
   2adfa:	f011 fdf3 	bl	3c9e4 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2adfe:	4622      	mov	r2, r4
   2ae00:	4629      	mov	r1, r5
   2ae02:	a801      	add	r0, sp, #4
   2ae04:	f7ff ff24 	bl	2ac50 <find_node>
	if (curr == NULL) {
   2ae08:	b978      	cbnz	r0, 2ae2a <at_notif_deregister_handler+0x6e>
		LOG_WRN("Handler not registered. Nothing to do");
   2ae0a:	2302      	movs	r3, #2
   2ae0c:	4a11      	ldr	r2, [pc, #68]	; (2ae54 <at_notif_deregister_handler+0x98>)
   2ae0e:	f363 0007 	bfi	r0, r3, #0, #8
   2ae12:	4b11      	ldr	r3, [pc, #68]	; (2ae58 <at_notif_deregister_handler+0x9c>)
   2ae14:	4913      	ldr	r1, [pc, #76]	; (2ae64 <at_notif_deregister_handler+0xa8>)
   2ae16:	1a9b      	subs	r3, r3, r2
   2ae18:	08db      	lsrs	r3, r3, #3
   2ae1a:	f363 108f 	bfi	r0, r3, #6, #10
   2ae1e:	f017 f90e 	bl	4203e <log_string_sync>
	k_mutex_unlock(&list_mtx);
   2ae22:	f7ff ff59 	bl	2acd8 <k_mutex_unlock.constprop.7>
	return remove_notif_handler(context, handler);
   2ae26:	2000      	movs	r0, #0
   2ae28:	e7de      	b.n	2ade8 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2ae2a:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ae2c:	6801      	ldr	r1, [r0, #0]
   2ae2e:	4b0e      	ldr	r3, [pc, #56]	; (2ae68 <at_notif_deregister_handler+0xac>)
   2ae30:	b94a      	cbnz	r2, 2ae46 <at_notif_deregister_handler+0x8a>
   2ae32:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2ae34:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ae36:	4290      	cmp	r0, r2
   2ae38:	d100      	bne.n	2ae3c <at_notif_deregister_handler+0x80>
	list->tail = node;
   2ae3a:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2ae3c:	2300      	movs	r3, #0
   2ae3e:	6003      	str	r3, [r0, #0]
	k_free(curr);
   2ae40:	f01a f9b7 	bl	451b2 <k_free>
   2ae44:	e7ed      	b.n	2ae22 <at_notif_deregister_handler+0x66>
   2ae46:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ae48:	6859      	ldr	r1, [r3, #4]
   2ae4a:	4288      	cmp	r0, r1
	list->tail = node;
   2ae4c:	bf08      	it	eq
   2ae4e:	605a      	streq	r2, [r3, #4]
   2ae50:	e7f4      	b.n	2ae3c <at_notif_deregister_handler+0x80>
   2ae52:	bf00      	nop
   2ae54:	00046878 	.word	0x00046878
   2ae58:	000468a0 	.word	0x000468a0
   2ae5c:	0004a9b4 	.word	0x0004a9b4
   2ae60:	20020afc 	.word	0x20020afc
   2ae64:	0004a98e 	.word	0x0004a98e
   2ae68:	20024910 	.word	0x20024910

0002ae6c <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   2ae6c:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2ae6e:	4d05      	ldr	r5, [pc, #20]	; (2ae84 <write_uart_string+0x18>)
   2ae70:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2ae72:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2ae76:	b901      	cbnz	r1, 2ae7a <write_uart_string+0xe>
	}
}
   2ae78:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2ae7a:	6828      	ldr	r0, [r5, #0]
   2ae7c:	6883      	ldr	r3, [r0, #8]
   2ae7e:	685b      	ldr	r3, [r3, #4]
   2ae80:	4798      	blx	r3
   2ae82:	e7f6      	b.n	2ae72 <write_uart_string+0x6>
   2ae84:	20024928 	.word	0x20024928

0002ae88 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   2ae88:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   2ae8a:	4923      	ldr	r1, [pc, #140]	; (2af18 <cmd_send+0x90>)
{
   2ae8c:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   2ae8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2ae92:	f10d 030b 	add.w	r3, sp, #11
   2ae96:	4608      	mov	r0, r1
   2ae98:	f7ff fe12 	bl	2aac0 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   2ae9c:	1e02      	subs	r2, r0, #0
   2ae9e:	da12      	bge.n	2aec6 <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   2aea0:	2301      	movs	r3, #1
   2aea2:	f04f 0000 	mov.w	r0, #0
   2aea6:	491d      	ldr	r1, [pc, #116]	; (2af1c <cmd_send+0x94>)
   2aea8:	f363 0007 	bfi	r0, r3, #0, #8
   2aeac:	4b1c      	ldr	r3, [pc, #112]	; (2af20 <cmd_send+0x98>)
   2aeae:	1a5b      	subs	r3, r3, r1
   2aeb0:	08db      	lsrs	r3, r3, #3
   2aeb2:	f363 108f 	bfi	r0, r3, #6, #10
   2aeb6:	491b      	ldr	r1, [pc, #108]	; (2af24 <cmd_send+0x9c>)
   2aeb8:	f017 f8c1 	bl	4203e <log_string_sync>
		state = AT_CMD_ERROR;
   2aebc:	2301      	movs	r3, #1
   2aebe:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   2aec2:	4819      	ldr	r0, [pc, #100]	; (2af28 <cmd_send+0xa0>)
   2aec4:	e012      	b.n	2aeec <cmd_send+0x64>
	switch (state) {
   2aec6:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2aeca:	2b03      	cmp	r3, #3
   2aecc:	d810      	bhi.n	2aef0 <cmd_send+0x68>
   2aece:	a101      	add	r1, pc, #4	; (adr r1, 2aed4 <cmd_send+0x4c>)
   2aed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2aed4:	0002aee5 	.word	0x0002aee5
   2aed8:	0002aec3 	.word	0x0002aec3
   2aedc:	0002aeff 	.word	0x0002aeff
   2aee0:	0002af11 	.word	0x0002af11
		write_uart_string(at_buf);
   2aee4:	480c      	ldr	r0, [pc, #48]	; (2af18 <cmd_send+0x90>)
   2aee6:	f7ff ffc1 	bl	2ae6c <write_uart_string>
		write_uart_string(OK_STR);
   2aeea:	4810      	ldr	r0, [pc, #64]	; (2af2c <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   2aeec:	f7ff ffbe 	bl	2ae6c <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   2aef0:	4b0f      	ldr	r3, [pc, #60]	; (2af30 <cmd_send+0xa8>)
   2aef2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   2aef4:	f019 fc52 	bl	4479c <z_impl_uart_irq_rx_enable>
}
   2aef8:	b00b      	add	sp, #44	; 0x2c
   2aefa:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2aefe:	4b0d      	ldr	r3, [pc, #52]	; (2af34 <cmd_send+0xac>)
   2af00:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2af02:	2219      	movs	r2, #25
   2af04:	2100      	movs	r1, #0
   2af06:	a803      	add	r0, sp, #12
   2af08:	f01a fae7 	bl	454da <__sprintf_chk>
		write_uart_string(str);
   2af0c:	a803      	add	r0, sp, #12
   2af0e:	e7ed      	b.n	2aeec <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2af10:	9200      	str	r2, [sp, #0]
   2af12:	4b09      	ldr	r3, [pc, #36]	; (2af38 <cmd_send+0xb0>)
   2af14:	e7f5      	b.n	2af02 <cmd_send+0x7a>
   2af16:	bf00      	nop
   2af18:	2002b9d7 	.word	0x2002b9d7
   2af1c:	00046878 	.word	0x00046878
   2af20:	00046898 	.word	0x00046898
   2af24:	0004aacc 	.word	0x0004aacc
   2af28:	0004a95e 	.word	0x0004a95e
   2af2c:	0004851e 	.word	0x0004851e
   2af30:	20024928 	.word	0x20024928
   2af34:	0004aaf2 	.word	0x0004aaf2
   2af38:	0004ab03 	.word	0x0004ab03

0002af3c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   2af3c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2af40:	4606      	mov	r6, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   2af42:	6883      	ldr	r3, [r0, #8]
   2af44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2af46:	b103      	cbz	r3, 2af4a <isr+0xe>
		return api->irq_update(dev);
   2af48:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2af4a:	68b3      	ldr	r3, [r6, #8]
   2af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2af4e:	b1c3      	cbz	r3, 2af82 <isr+0x46>
		return api->irq_rx_ready(dev);
   2af50:	4630      	mov	r0, r6
   2af52:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   2af54:	b1a8      	cbz	r0, 2af82 <isr+0x46>
   2af56:	f8df a15c 	ldr.w	sl, [pc, #348]	; 2b0b4 <isr+0x178>
   2af5a:	4d4b      	ldr	r5, [pc, #300]	; (2b088 <isr+0x14c>)
   2af5c:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   2af5e:	4b4b      	ldr	r3, [pc, #300]	; (2b08c <isr+0x150>)
		if (at_cmd_len > 0) {
   2af60:	4c4b      	ldr	r4, [pc, #300]	; (2b090 <isr+0x154>)
			LOG_WRN("Ignored null; would terminate string early.");
   2af62:	1aed      	subs	r5, r5, r3
   2af64:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2af68:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   2af6c:	07db      	lsls	r3, r3, #31
   2af6e:	d408      	bmi.n	2af82 <isr+0x46>
	if (api->fifo_read) {
   2af70:	68b3      	ldr	r3, [r6, #8]
   2af72:	699b      	ldr	r3, [r3, #24]
   2af74:	b12b      	cbz	r3, 2af82 <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   2af76:	2201      	movs	r2, #1
   2af78:	f10d 0107 	add.w	r1, sp, #7
   2af7c:	4630      	mov	r0, r6
   2af7e:	4798      	blx	r3
   2af80:	b910      	cbnz	r0, 2af88 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2af82:	b002      	add	sp, #8
   2af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   2af88:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   2af8c:	2a08      	cmp	r2, #8
   2af8e:	d001      	beq.n	2af94 <isr+0x58>
   2af90:	2a7f      	cmp	r2, #127	; 0x7f
   2af92:	d105      	bne.n	2afa0 <isr+0x64>
		if (at_cmd_len > 0) {
   2af94:	6823      	ldr	r3, [r4, #0]
   2af96:	2b00      	cmp	r3, #0
   2af98:	d0e6      	beq.n	2af68 <isr+0x2c>
			at_cmd_len--;
   2af9a:	3b01      	subs	r3, #1
   2af9c:	6023      	str	r3, [r4, #0]
   2af9e:	e7e3      	b.n	2af68 <isr+0x2c>
	if (!inside_quotes) {
   2afa0:	493c      	ldr	r1, [pc, #240]	; (2b094 <isr+0x158>)
   2afa2:	780b      	ldrb	r3, [r1, #0]
   2afa4:	b9cb      	cbnz	r3, 2afda <isr+0x9e>
		switch (character) {
   2afa6:	2a0a      	cmp	r2, #10
   2afa8:	d02b      	beq.n	2b002 <isr+0xc6>
   2afaa:	2a0d      	cmp	r2, #13
   2afac:	d011      	beq.n	2afd2 <isr+0x96>
   2afae:	b9a2      	cbnz	r2, 2afda <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   2afb0:	4b39      	ldr	r3, [pc, #228]	; (2b098 <isr+0x15c>)
   2afb2:	781b      	ldrb	r3, [r3, #0]
   2afb4:	2b00      	cmp	r3, #0
   2afb6:	d040      	beq.n	2b03a <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   2afb8:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2afbc:	f043 0302 	orr.w	r3, r3, #2
   2afc0:	f363 0707 	bfi	r7, r3, #0, #8
   2afc4:	f365 178f 	bfi	r7, r5, #6, #10
   2afc8:	4934      	ldr	r1, [pc, #208]	; (2b09c <isr+0x160>)
   2afca:	4638      	mov	r0, r7
   2afcc:	f017 f837 	bl	4203e <log_string_sync>
			return;
   2afd0:	e7ca      	b.n	2af68 <isr+0x2c>
			if (term_mode == MODE_CR) {
   2afd2:	4831      	ldr	r0, [pc, #196]	; (2b098 <isr+0x15c>)
   2afd4:	7800      	ldrb	r0, [r0, #0]
   2afd6:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2afd8:	d02f      	beq.n	2b03a <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2afda:	f8d4 c000 	ldr.w	ip, [r4]
   2afde:	f10c 0001 	add.w	r0, ip, #1
   2afe2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2afe6:	d31d      	bcc.n	2b024 <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2afe8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2afec:	f043 0301 	orr.w	r3, r3, #1
   2aff0:	f363 0807 	bfi	r8, r3, #0, #8
   2aff4:	f365 188f 	bfi	r8, r5, #6, #10
   2aff8:	4929      	ldr	r1, [pc, #164]	; (2b0a0 <isr+0x164>)
   2affa:	4640      	mov	r0, r8
   2affc:	f017 f81f 	bl	4203e <log_string_sync>
		return;
   2b000:	e7b2      	b.n	2af68 <isr+0x2c>
			if (term_mode == MODE_LF) {
   2b002:	4825      	ldr	r0, [pc, #148]	; (2b098 <isr+0x15c>)
   2b004:	7800      	ldrb	r0, [r0, #0]
   2b006:	2802      	cmp	r0, #2
   2b008:	d017      	beq.n	2b03a <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   2b00a:	2803      	cmp	r0, #3
   2b00c:	d1e5      	bne.n	2afda <isr+0x9e>
   2b00e:	f8d4 c000 	ldr.w	ip, [r4]
   2b012:	f1bc 0f00 	cmp.w	ip, #0
   2b016:	d0e0      	beq.n	2afda <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   2b018:	4822      	ldr	r0, [pc, #136]	; (2b0a4 <isr+0x168>)
   2b01a:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   2b01c:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2b020:	280d      	cmp	r0, #13
   2b022:	e7d9      	b.n	2afd8 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   2b024:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2b0a4 <isr+0x168>
	if (character == '"') {
   2b028:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   2b02a:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   2b02e:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   2b030:	d19a      	bne.n	2af68 <isr+0x2c>
	if (!inside_quotes) {
   2b032:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2b036:	700b      	strb	r3, [r1, #0]
   2b038:	e796      	b.n	2af68 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2b03a:	2200      	movs	r2, #0
   2b03c:	4b19      	ldr	r3, [pc, #100]	; (2b0a4 <isr+0x168>)
	inside_quotes = false;
   2b03e:	700a      	strb	r2, [r1, #0]
   2b040:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2b042:	6820      	ldr	r0, [r4, #0]
	at_cmd_len = 0;
   2b044:	6022      	str	r2, [r4, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2b046:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   2b048:	f813 2b01 	ldrb.w	r2, [r3], #1
   2b04c:	2a20      	cmp	r2, #32
   2b04e:	d802      	bhi.n	2b056 <isr+0x11a>
		} else if (*c == '\0') {
   2b050:	2a00      	cmp	r2, #0
   2b052:	d1f9      	bne.n	2b048 <isr+0x10c>
   2b054:	e788      	b.n	2af68 <isr+0x2c>
	if (at_buf[0]) {
   2b056:	780b      	ldrb	r3, [r1, #0]
   2b058:	2b00      	cmp	r3, #0
   2b05a:	d085      	beq.n	2af68 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   2b05c:	4b12      	ldr	r3, [pc, #72]	; (2b0a8 <isr+0x16c>)
   2b05e:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   2b060:	6883      	ldr	r3, [r0, #8]
   2b062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2b064:	b103      	cbz	r3, 2b068 <isr+0x12c>
		api->irq_rx_disable(dev);
   2b066:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b068:	e8d9 3fef 	ldaex	r3, [r9]
   2b06c:	f043 0201 	orr.w	r2, r3, #1
   2b070:	e8c9 2fe1 	stlex	r1, r2, [r9]
   2b074:	2900      	cmp	r1, #0
   2b076:	d1f7      	bne.n	2b068 <isr+0x12c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b078:	07da      	lsls	r2, r3, #31
   2b07a:	f53f af75 	bmi.w	2af68 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   2b07e:	490b      	ldr	r1, [pc, #44]	; (2b0ac <isr+0x170>)
   2b080:	480b      	ldr	r0, [pc, #44]	; (2b0b0 <isr+0x174>)
   2b082:	f019 ff2e 	bl	44ee2 <k_queue_append>
   2b086:	e76f      	b.n	2af68 <isr+0x2c>
   2b088:	00046898 	.word	0x00046898
   2b08c:	00046878 	.word	0x00046878
   2b090:	20024918 	.word	0x20024918
   2b094:	2002c9d7 	.word	0x2002c9d7
   2b098:	2002c9d8 	.word	0x2002c9d8
   2b09c:	0004ab14 	.word	0x0004ab14
   2b0a0:	0004ab40 	.word	0x0004ab40
   2b0a4:	2002b9d7 	.word	0x2002b9d7
   2b0a8:	20024928 	.word	0x20024928
   2b0ac:	2002491c 	.word	0x2002491c
   2b0b0:	20021a38 	.word	0x20021a38
   2b0b4:	20024924 	.word	0x20024924

0002b0b8 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   2b0b8:	2201      	movs	r2, #1
{
   2b0ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		term_mode = mode;
   2b0be:	4b52      	ldr	r3, [pc, #328]	; (2b208 <at_host_init+0x150>)
{
   2b0c0:	b085      	sub	sp, #20
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2b0c2:	4952      	ldr	r1, [pc, #328]	; (2b20c <at_host_init+0x154>)
   2b0c4:	2000      	movs	r0, #0
		term_mode = mode;
   2b0c6:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   2b0c8:	f7ff fe2a 	bl	2ad20 <at_notif_register_handler>
	if (err != 0) {
   2b0cc:	4c50      	ldr	r4, [pc, #320]	; (2b210 <at_host_init+0x158>)
   2b0ce:	4b51      	ldr	r3, [pc, #324]	; (2b214 <at_host_init+0x15c>)
   2b0d0:	4606      	mov	r6, r0
   2b0d2:	1ae4      	subs	r4, r4, r3
   2b0d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2b0d8:	b170      	cbz	r0, 2b0f8 <at_host_init+0x40>
		LOG_ERR("Can't register handler err=%d", err);
   2b0da:	f04f 0000 	mov.w	r0, #0
   2b0de:	2301      	movs	r3, #1
   2b0e0:	f363 0007 	bfi	r0, r3, #0, #8
   2b0e4:	f364 108f 	bfi	r0, r4, #6, #10
   2b0e8:	4632      	mov	r2, r6
   2b0ea:	494b      	ldr	r1, [pc, #300]	; (2b218 <at_host_init+0x160>)
   2b0ec:	f016 ffa7 	bl	4203e <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2b0f0:	4630      	mov	r0, r6
   2b0f2:	b005      	add	sp, #20
   2b0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0f8:	4848      	ldr	r0, [pc, #288]	; (2b21c <at_host_init+0x164>)
   2b0fa:	f011 f823 	bl	3c144 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   2b0fe:	4d48      	ldr	r5, [pc, #288]	; (2b220 <at_host_init+0x168>)
   2b100:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   2b102:	b9b8      	cbnz	r0, 2b134 <at_host_init+0x7c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   2b104:	2301      	movs	r3, #1
   2b106:	f363 0007 	bfi	r0, r3, #0, #8
   2b10a:	4a44      	ldr	r2, [pc, #272]	; (2b21c <at_host_init+0x164>)
   2b10c:	f364 108f 	bfi	r0, r4, #6, #10
   2b110:	4944      	ldr	r1, [pc, #272]	; (2b224 <at_host_init+0x16c>)
   2b112:	f016 ff94 	bl	4203e <log_string_sync>
		return -EINVAL;
   2b116:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   2b11a:	2301      	movs	r3, #1
   2b11c:	f04f 0000 	mov.w	r0, #0
   2b120:	f363 0007 	bfi	r0, r3, #0, #8
   2b124:	f364 108f 	bfi	r0, r4, #6, #10
   2b128:	493f      	ldr	r1, [pc, #252]	; (2b228 <at_host_init+0x170>)
   2b12a:	f016 ff88 	bl	4203e <log_string_sync>
		return -EFAULT;
   2b12e:	f06f 060d 	mvn.w	r6, #13
   2b132:	e7dd      	b.n	2b0f0 <at_host_init+0x38>
	return z_impl_k_uptime_ticks();
   2b134:	f019 ffa3 	bl	4507e <z_impl_k_uptime_ticks>
   2b138:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   2b13c:	fba0 2307 	umull	r2, r3, r0, r7
   2b140:	fb07 3301 	mla	r3, r7, r1, r3
			LOG_INF("UART check failed: %d. "
   2b144:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2b244 <at_host_init+0x18c>
   2b148:	0bd7      	lsrs	r7, r2, #15
   2b14a:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
		err = uart_err_check(uart_dev);
   2b14e:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   2b150:	6883      	ldr	r3, [r0, #8]
   2b152:	689b      	ldr	r3, [r3, #8]
   2b154:	2b00      	cmp	r3, #0
   2b156:	d03e      	beq.n	2b1d6 <at_host_init+0x11e>
		return api->err_check(dev);
   2b158:	4798      	blx	r3
		if (err) {
   2b15a:	9001      	str	r0, [sp, #4]
   2b15c:	2800      	cmp	r0, #0
   2b15e:	d03a      	beq.n	2b1d6 <at_host_init+0x11e>
   2b160:	f019 ff8d 	bl	4507e <z_impl_k_uptime_ticks>
   2b164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2b168:	fba0 ab03 	umull	sl, fp, r0, r3
   2b16c:	fb03 bb01 	mla	fp, r3, r1, fp
   2b170:	ea4f 33da 	mov.w	r3, sl, lsr #15
   2b174:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
			if (k_uptime_get_32() - start_time >
   2b178:	1bdb      	subs	r3, r3, r7
   2b17a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2b17e:	9a01      	ldr	r2, [sp, #4]
   2b180:	d90c      	bls.n	2b19c <at_host_init+0xe4>
				LOG_ERR("UART check failed: %d. "
   2b182:	2301      	movs	r3, #1
   2b184:	f04f 0000 	mov.w	r0, #0
   2b188:	f363 0007 	bfi	r0, r3, #0, #8
   2b18c:	f364 108f 	bfi	r0, r4, #6, #10
   2b190:	4926      	ldr	r1, [pc, #152]	; (2b22c <at_host_init+0x174>)
   2b192:	f016 ff54 	bl	4203e <log_string_sync>
				return -EIO;
   2b196:	f06f 0204 	mvn.w	r2, #4
   2b19a:	e7be      	b.n	2b11a <at_host_init+0x62>
			LOG_INF("UART check failed: %d. "
   2b19c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2b1a0:	f043 0303 	orr.w	r3, r3, #3
   2b1a4:	f363 0807 	bfi	r8, r3, #0, #8
   2b1a8:	f364 188f 	bfi	r8, r4, #6, #10
   2b1ac:	4649      	mov	r1, r9
   2b1ae:	4640      	mov	r0, r8
   2b1b0:	f016 ff45 	bl	4203e <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2b1b4:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   2b1b6:	6883      	ldr	r3, [r0, #8]
   2b1b8:	699b      	ldr	r3, [r3, #24]
   2b1ba:	b92b      	cbnz	r3, 2b1c8 <at_host_init+0x110>
	return z_impl_k_sleep(timeout);
   2b1bc:	2100      	movs	r1, #0
   2b1be:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2b1c2:	f012 ffe3 	bl	3e18c <z_impl_k_sleep>
   2b1c6:	e7c2      	b.n	2b14e <at_host_init+0x96>
		return api->fifo_read(dev, rx_data, size);
   2b1c8:	2201      	movs	r2, #1
   2b1ca:	f10d 010f 	add.w	r1, sp, #15
   2b1ce:	4798      	blx	r3
   2b1d0:	2800      	cmp	r0, #0
   2b1d2:	d1ef      	bne.n	2b1b4 <at_host_init+0xfc>
   2b1d4:	e7f2      	b.n	2b1bc <at_host_init+0x104>
	uart_irq_callback_set(uart_dev, isr);
   2b1d6:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   2b1d8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2b1da:	b123      	cbz	r3, 2b1e6 <at_host_init+0x12e>
   2b1dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2b1de:	b113      	cbz	r3, 2b1e6 <at_host_init+0x12e>
		api->irq_callback_set(dev, cb, user_data);
   2b1e0:	2200      	movs	r2, #0
   2b1e2:	4913      	ldr	r1, [pc, #76]	; (2b230 <at_host_init+0x178>)
   2b1e4:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b1e6:	2200      	movs	r2, #0
   2b1e8:	4b12      	ldr	r3, [pc, #72]	; (2b234 <at_host_init+0x17c>)
   2b1ea:	4913      	ldr	r1, [pc, #76]	; (2b238 <at_host_init+0x180>)
   2b1ec:	601a      	str	r2, [r3, #0]
   2b1ee:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   2b1f2:	4812      	ldr	r0, [pc, #72]	; (2b23c <at_host_init+0x184>)
   2b1f4:	230a      	movs	r3, #10
   2b1f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2b1fa:	4911      	ldr	r1, [pc, #68]	; (2b240 <at_host_init+0x188>)
   2b1fc:	f013 fa48 	bl	3e690 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   2b200:	6828      	ldr	r0, [r5, #0]
   2b202:	f019 facb 	bl	4479c <z_impl_uart_irq_rx_enable>
	return err;
   2b206:	e773      	b.n	2b0f0 <at_host_init+0x38>
   2b208:	2002c9d8 	.word	0x2002c9d8
   2b20c:	000447a7 	.word	0x000447a7
   2b210:	00046898 	.word	0x00046898
   2b214:	00046878 	.word	0x00046878
   2b218:	0004aa11 	.word	0x0004aa11
   2b21c:	00049342 	.word	0x00049342
   2b220:	20024928 	.word	0x20024928
   2b224:	0004aa2f 	.word	0x0004aa2f
   2b228:	0004aaaa 	.word	0x0004aaaa
   2b22c:	0004aa3f 	.word	0x0004aa3f
   2b230:	0002af3d 	.word	0x0002af3d
   2b234:	2002491c 	.word	0x2002491c
   2b238:	0002ae89 	.word	0x0002ae89
   2b23c:	20021a38 	.word	0x20021a38
   2b240:	2002e090 	.word	0x2002e090
   2b244:	0004aa75 	.word	0x0004aa75

0002b248 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2b248:	4b06      	ldr	r3, [pc, #24]	; (2b264 <is_valid_notification_char+0x1c>)
   2b24a:	5cc3      	ldrb	r3, [r0, r3]
   2b24c:	f003 0303 	and.w	r3, r3, #3
   2b250:	2b02      	cmp	r3, #2
   2b252:	bf08      	it	eq
   2b254:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2b256:	3841      	subs	r0, #65	; 0x41
   2b258:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2b25a:	2819      	cmp	r0, #25
   2b25c:	bf8c      	ite	hi
   2b25e:	2000      	movhi	r0, #0
   2b260:	2001      	movls	r0, #1
   2b262:	4770      	bx	lr
   2b264:	0004f20f 	.word	0x0004f20f

0002b268 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2b268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2b26c:	6805      	ldr	r5, [r0, #0]
{
   2b26e:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2b270:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b272:	782b      	ldrb	r3, [r5, #0]
{
   2b274:	4680      	mov	r8, r0
   2b276:	460f      	mov	r7, r1
   2b278:	4616      	mov	r6, r2
   2b27a:	2b00      	cmp	r3, #0
   2b27c:	f000 80c8 	beq.w	2b410 <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2b280:	4b65      	ldr	r3, [pc, #404]	; (2b418 <at_parse_process_element+0x1b0>)
   2b282:	781c      	ldrb	r4, [r3, #0]
   2b284:	2c06      	cmp	r4, #6
   2b286:	d110      	bne.n	2b2aa <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   2b288:	1c6b      	adds	r3, r5, #1
   2b28a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2b28c:	9a00      	ldr	r2, [sp, #0]
   2b28e:	7810      	ldrb	r0, [r2, #0]
   2b290:	f7ff ffda 	bl	2b248 <is_valid_notification_char>
   2b294:	b930      	cbnz	r0, 2b2a4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b296:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b298:	462a      	mov	r2, r5
   2b29a:	4639      	mov	r1, r7
   2b29c:	4630      	mov	r0, r6
   2b29e:	f019 fafe 	bl	4489e <at_params_string_put>
   2b2a2:	e01b      	b.n	2b2dc <at_parse_process_element+0x74>
			tmpstr++;
   2b2a4:	3201      	adds	r2, #1
   2b2a6:	9200      	str	r2, [sp, #0]
   2b2a8:	e7f0      	b.n	2b28c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   2b2aa:	2c07      	cmp	r4, #7
   2b2ac:	d124      	bne.n	2b2f8 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2b2ae:	4668      	mov	r0, sp
   2b2b0:	f019 fa85 	bl	447be <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   2b2b4:	9a00      	ldr	r2, [sp, #0]
   2b2b6:	7810      	ldrb	r0, [r2, #0]
   2b2b8:	f7ff ffc6 	bl	2b248 <is_valid_notification_char>
   2b2bc:	b9a8      	cbnz	r0, 2b2ea <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2b2be:	1b53      	subs	r3, r2, r5
   2b2c0:	4639      	mov	r1, r7
   2b2c2:	462a      	mov	r2, r5
   2b2c4:	4630      	mov	r0, r6
   2b2c6:	f019 faea 	bl	4489e <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2b2ca:	9b00      	ldr	r3, [sp, #0]
   2b2cc:	781a      	ldrb	r2, [r3, #0]
   2b2ce:	2a3d      	cmp	r2, #61	; 0x3d
   2b2d0:	d10e      	bne.n	2b2f0 <at_parse_process_element+0x88>
   2b2d2:	785a      	ldrb	r2, [r3, #1]
   2b2d4:	2a3f      	cmp	r2, #63	; 0x3f
   2b2d6:	d101      	bne.n	2b2dc <at_parse_process_element+0x74>
			tmpstr += 2;
   2b2d8:	3302      	adds	r3, #2
			tmpstr++;
   2b2da:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2b2dc:	2000      	movs	r0, #0
	*str = tmpstr;
   2b2de:	9b00      	ldr	r3, [sp, #0]
   2b2e0:	f8c8 3000 	str.w	r3, [r8]
}
   2b2e4:	b023      	add	sp, #140	; 0x8c
   2b2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2b2ea:	3201      	adds	r2, #1
   2b2ec:	9200      	str	r2, [sp, #0]
   2b2ee:	e7e1      	b.n	2b2b4 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2b2f0:	2a3f      	cmp	r2, #63	; 0x3f
   2b2f2:	d1f3      	bne.n	2b2dc <at_parse_process_element+0x74>
			tmpstr++;
   2b2f4:	3301      	adds	r3, #1
   2b2f6:	e7f0      	b.n	2b2da <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2b2f8:	2c08      	cmp	r4, #8
   2b2fa:	d103      	bne.n	2b304 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2b2fc:	4610      	mov	r0, r2
   2b2fe:	f019 faa5 	bl	4484c <at_params_empty_put>
   2b302:	e7eb      	b.n	2b2dc <at_parse_process_element+0x74>
	} else if (state == STRING) {
   2b304:	2c02      	cmp	r4, #2
   2b306:	d111      	bne.n	2b32c <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2b308:	9a00      	ldr	r2, [sp, #0]
   2b30a:	7811      	ldrb	r1, [r2, #0]
   2b30c:	4608      	mov	r0, r1
   2b30e:	f019 fa4d 	bl	447ac <is_lfcr>
   2b312:	b918      	cbnz	r0, 2b31c <at_parse_process_element+0xb4>
   2b314:	b111      	cbz	r1, 2b31c <at_parse_process_element+0xb4>
			tmpstr++;
   2b316:	3201      	adds	r2, #1
   2b318:	9200      	str	r2, [sp, #0]
   2b31a:	e7f5      	b.n	2b308 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   2b31c:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2b31e:	462a      	mov	r2, r5
   2b320:	4639      	mov	r1, r7
   2b322:	4630      	mov	r0, r6
   2b324:	f019 fabb 	bl	4489e <at_params_string_put>
		tmpstr++;
   2b328:	9b00      	ldr	r3, [sp, #0]
   2b32a:	e7e3      	b.n	2b2f4 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   2b32c:	2c03      	cmp	r4, #3
   2b32e:	d109      	bne.n	2b344 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2b330:	9b00      	ldr	r3, [sp, #0]
   2b332:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2b334:	2a22      	cmp	r2, #34	; 0x22
   2b336:	d003      	beq.n	2b340 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b338:	b112      	cbz	r2, 2b340 <at_parse_process_element+0xd8>
			tmpstr++;
   2b33a:	3301      	adds	r3, #1
   2b33c:	9300      	str	r3, [sp, #0]
   2b33e:	e7f7      	b.n	2b330 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   2b340:	1b5b      	subs	r3, r3, r5
   2b342:	e7ec      	b.n	2b31e <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2b344:	2c01      	cmp	r4, #1
   2b346:	d13c      	bne.n	2b3c2 <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b348:	4628      	mov	r0, r5
   2b34a:	220a      	movs	r2, #10
   2b34c:	a901      	add	r1, sp, #4
   2b34e:	f015 f8d5 	bl	404fc <strtoul>
		tmpstr = next;
   2b352:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b354:	4d31      	ldr	r5, [pc, #196]	; (2b41c <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b356:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2b358:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2b35a:	9800      	ldr	r0, [sp, #0]
   2b35c:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2b35e:	2b29      	cmp	r3, #41	; 0x29
   2b360:	d028      	beq.n	2b3b4 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b362:	b33b      	cbz	r3, 2b3b4 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b364:	3b2c      	subs	r3, #44	; 0x2c
   2b366:	b2db      	uxtb	r3, r3
   2b368:	3001      	adds	r0, #1
   2b36a:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2b36c:	9000      	str	r0, [sp, #0]
   2b36e:	d803      	bhi.n	2b378 <at_parse_process_element+0x110>
   2b370:	fa25 f303 	lsr.w	r3, r5, r3
   2b374:	07db      	lsls	r3, r3, #31
   2b376:	d408      	bmi.n	2b38a <at_parse_process_element+0x122>
				tmpstr++;
   2b378:	46a1      	mov	r9, r4
   2b37a:	e004      	b.n	2b386 <at_parse_process_element+0x11e>
					tmpstr = next;
   2b37c:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b37e:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2b382:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b384:	d015      	beq.n	2b3b2 <at_parse_process_element+0x14a>
				tmpstr++;
   2b386:	464c      	mov	r4, r9
   2b388:	e7e7      	b.n	2b35a <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2b38a:	220a      	movs	r2, #10
   2b38c:	a901      	add	r1, sp, #4
   2b38e:	f015 f8b5 	bl	404fc <strtoul>
				tmparray[i++] =
   2b392:	ab22      	add	r3, sp, #136	; 0x88
   2b394:	f104 0901 	add.w	r9, r4, #1
   2b398:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2b39c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2b3a0:	9800      	ldr	r0, [sp, #0]
   2b3a2:	f7f1 ff5f 	bl	1d264 <strlen>
   2b3a6:	4604      	mov	r4, r0
   2b3a8:	9801      	ldr	r0, [sp, #4]
   2b3aa:	f7f1 ff5b 	bl	1d264 <strlen>
   2b3ae:	4284      	cmp	r4, r0
   2b3b0:	d1e4      	bne.n	2b37c <at_parse_process_element+0x114>
   2b3b2:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2b3b4:	00a3      	lsls	r3, r4, #2
   2b3b6:	aa02      	add	r2, sp, #8
   2b3b8:	4639      	mov	r1, r7
   2b3ba:	4630      	mov	r0, r6
   2b3bc:	f019 fa95 	bl	448ea <at_params_array_put>
   2b3c0:	e7b2      	b.n	2b328 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   2b3c2:	2c04      	cmp	r4, #4
   2b3c4:	d115      	bne.n	2b3f2 <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2b3c6:	220a      	movs	r2, #10
   2b3c8:	a902      	add	r1, sp, #8
   2b3ca:	4628      	mov	r0, r5
   2b3cc:	f015 f896 	bl	404fc <strtoul>
		tmpstr = next;
   2b3d0:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   2b3d2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2b3d6:	4602      	mov	r2, r0
		tmpstr = next;
   2b3d8:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   2b3da:	da05      	bge.n	2b3e8 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   2b3dc:	b282      	uxth	r2, r0
   2b3de:	4639      	mov	r1, r7
   2b3e0:	4630      	mov	r0, r6
   2b3e2:	f019 fa1e 	bl	44822 <at_params_short_put>
   2b3e6:	e779      	b.n	2b2dc <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   2b3e8:	4639      	mov	r1, r7
   2b3ea:	4630      	mov	r0, r6
   2b3ec:	f019 fa42 	bl	44874 <at_params_int_put>
   2b3f0:	e774      	b.n	2b2dc <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2b3f2:	2c05      	cmp	r4, #5
   2b3f4:	f47f af72 	bne.w	2b2dc <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   2b3f8:	4909      	ldr	r1, [pc, #36]	; (2b420 <at_parse_process_element+0x1b8>)
   2b3fa:	9b00      	ldr	r3, [sp, #0]
   2b3fc:	781a      	ldrb	r2, [r3, #0]
   2b3fe:	5c52      	ldrb	r2, [r2, r1]
   2b400:	f012 0f44 	tst.w	r2, #68	; 0x44
   2b404:	d101      	bne.n	2b40a <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   2b406:	1b5b      	subs	r3, r3, r5
   2b408:	e746      	b.n	2b298 <at_parse_process_element+0x30>
			tmpstr++;
   2b40a:	3301      	adds	r3, #1
   2b40c:	9300      	str	r3, [sp, #0]
   2b40e:	e7f4      	b.n	2b3fa <at_parse_process_element+0x192>
		return -1;
   2b410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b414:	e766      	b.n	2b2e4 <at_parse_process_element+0x7c>
   2b416:	bf00      	nop
   2b418:	2002c9d9 	.word	0x2002c9d9
   2b41c:	00024001 	.word	0x00024001
   2b420:	0004f20f 	.word	0x0004f20f

0002b424 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2b424:	b510      	push	{r4, lr}
   2b426:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2b428:	f7f1 ff1c 	bl	1d264 <strlen>
   2b42c:	2801      	cmp	r0, #1
   2b42e:	d922      	bls.n	2b476 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2b430:	7821      	ldrb	r1, [r4, #0]
   2b432:	4b13      	ldr	r3, [pc, #76]	; (2b480 <is_command+0x5c>)
   2b434:	5cca      	ldrb	r2, [r1, r3]
   2b436:	f002 0203 	and.w	r2, r2, #3
   2b43a:	2a02      	cmp	r2, #2
   2b43c:	bf08      	it	eq
   2b43e:	3920      	subeq	r1, #32
   2b440:	2941      	cmp	r1, #65	; 0x41
   2b442:	461a      	mov	r2, r3
   2b444:	d117      	bne.n	2b476 <is_command+0x52>
   2b446:	7863      	ldrb	r3, [r4, #1]
   2b448:	5cd2      	ldrb	r2, [r2, r3]
   2b44a:	f002 0203 	and.w	r2, r2, #3
   2b44e:	2a02      	cmp	r2, #2
   2b450:	bf08      	it	eq
   2b452:	3b20      	subeq	r3, #32
   2b454:	2b54      	cmp	r3, #84	; 0x54
   2b456:	d10e      	bne.n	2b476 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b458:	78a2      	ldrb	r2, [r4, #2]
   2b45a:	2a25      	cmp	r2, #37	; 0x25
   2b45c:	d00d      	beq.n	2b47a <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2b45e:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2b462:	2b23      	cmp	r3, #35	; 0x23
   2b464:	d009      	beq.n	2b47a <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2b466:	4610      	mov	r0, r2
   2b468:	f019 f9a0 	bl	447ac <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2b46c:	b910      	cbnz	r0, 2b474 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b46e:	fab2 f082 	clz	r0, r2
   2b472:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2b474:	bd10      	pop	{r4, pc}
		return false;
   2b476:	2000      	movs	r0, #0
   2b478:	e7fc      	b.n	2b474 <is_command+0x50>
		return true;
   2b47a:	2001      	movs	r0, #1
   2b47c:	e7fa      	b.n	2b474 <is_command+0x50>
   2b47e:	bf00      	nop
   2b480:	0004f20f 	.word	0x0004f20f

0002b484 <at_parse_detect_type>:
{
   2b484:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2b486:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2b488:	2900      	cmp	r1, #0
{
   2b48a:	4606      	mov	r6, r0
   2b48c:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2b48e:	d141      	bne.n	2b514 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b490:	2a2b      	cmp	r2, #43	; 0x2b
   2b492:	4d29      	ldr	r5, [pc, #164]	; (2b538 <at_parse_detect_type+0xb4>)
   2b494:	d001      	beq.n	2b49a <at_parse_detect_type+0x16>
   2b496:	2a25      	cmp	r2, #37	; 0x25
   2b498:	d104      	bne.n	2b4a4 <at_parse_detect_type+0x20>
	state = new_state;
   2b49a:	2306      	movs	r3, #6
   2b49c:	702b      	strb	r3, [r5, #0]
	return 0;
   2b49e:	2000      	movs	r0, #0
	*str = tmpstr;
   2b4a0:	6034      	str	r4, [r6, #0]
}
   2b4a2:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   2b4a4:	4620      	mov	r0, r4
   2b4a6:	f7ff ffbd 	bl	2b424 <is_command>
   2b4aa:	b388      	cbz	r0, 2b510 <at_parse_detect_type+0x8c>
	state = new_state;
   2b4ac:	2307      	movs	r3, #7
   2b4ae:	e7f5      	b.n	2b49c <at_parse_detect_type+0x18>
	if (chr == '"') {
   2b4b0:	2a22      	cmp	r2, #34	; 0x22
   2b4b2:	d006      	beq.n	2b4c2 <at_parse_detect_type+0x3e>
	if (chr == '(') {
   2b4b4:	2a28      	cmp	r2, #40	; 0x28
   2b4b6:	d109      	bne.n	2b4cc <at_parse_detect_type+0x48>
   2b4b8:	2201      	movs	r2, #1
   2b4ba:	4b1f      	ldr	r3, [pc, #124]	; (2b538 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2b4bc:	4414      	add	r4, r2
	state = new_state;
   2b4be:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b4c0:	e7ed      	b.n	2b49e <at_parse_detect_type+0x1a>
	state = new_state;
   2b4c2:	2203      	movs	r2, #3
   2b4c4:	4b1c      	ldr	r3, [pc, #112]	; (2b538 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2b4c6:	3401      	adds	r4, #1
	state = new_state;
   2b4c8:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b4ca:	e7e8      	b.n	2b49e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2b4cc:	4610      	mov	r0, r2
   2b4ce:	f019 f96d 	bl	447ac <is_lfcr>
   2b4d2:	b170      	cbz	r0, 2b4f2 <at_parse_detect_type+0x6e>
   2b4d4:	4918      	ldr	r1, [pc, #96]	; (2b538 <at_parse_detect_type+0xb4>)
   2b4d6:	7808      	ldrb	r0, [r1, #0]
   2b4d8:	2804      	cmp	r0, #4
   2b4da:	d108      	bne.n	2b4ee <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   2b4dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2b4e0:	f019 f964 	bl	447ac <is_lfcr>
   2b4e4:	2800      	cmp	r0, #0
   2b4e6:	d1f9      	bne.n	2b4dc <at_parse_detect_type+0x58>
	state = new_state;
   2b4e8:	2305      	movs	r3, #5
   2b4ea:	700b      	strb	r3, [r1, #0]
   2b4ec:	e7d7      	b.n	2b49e <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2b4ee:	2808      	cmp	r0, #8
   2b4f0:	d0d5      	beq.n	2b49e <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b4f2:	3a2c      	subs	r2, #44	; 0x2c
   2b4f4:	b2d2      	uxtb	r2, r2
   2b4f6:	2a11      	cmp	r2, #17
   2b4f8:	d807      	bhi.n	2b50a <at_parse_detect_type+0x86>
   2b4fa:	4b10      	ldr	r3, [pc, #64]	; (2b53c <at_parse_detect_type+0xb8>)
   2b4fc:	fa23 f202 	lsr.w	r2, r3, r2
   2b500:	07d3      	lsls	r3, r2, #31
   2b502:	d502      	bpl.n	2b50a <at_parse_detect_type+0x86>
	state = new_state;
   2b504:	4b0c      	ldr	r3, [pc, #48]	; (2b538 <at_parse_detect_type+0xb4>)
   2b506:	2208      	movs	r2, #8
   2b508:	e013      	b.n	2b532 <at_parse_detect_type+0xae>
		return -1;
   2b50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b50e:	e7c8      	b.n	2b4a2 <at_parse_detect_type+0x1e>
	state = new_state;
   2b510:	2302      	movs	r3, #2
   2b512:	e7c3      	b.n	2b49c <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2b514:	dd03      	ble.n	2b51e <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b516:	2a2b      	cmp	r2, #43	; 0x2b
   2b518:	d0f7      	beq.n	2b50a <at_parse_detect_type+0x86>
   2b51a:	2a25      	cmp	r2, #37	; 0x25
   2b51c:	d0f5      	beq.n	2b50a <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2b51e:	4b08      	ldr	r3, [pc, #32]	; (2b540 <at_parse_detect_type+0xbc>)
   2b520:	5cd3      	ldrb	r3, [r2, r3]
   2b522:	0759      	lsls	r1, r3, #29
   2b524:	d403      	bmi.n	2b52e <at_parse_detect_type+0xaa>
   2b526:	2a2d      	cmp	r2, #45	; 0x2d
   2b528:	d001      	beq.n	2b52e <at_parse_detect_type+0xaa>
   2b52a:	2a2b      	cmp	r2, #43	; 0x2b
   2b52c:	d1c0      	bne.n	2b4b0 <at_parse_detect_type+0x2c>
	state = new_state;
   2b52e:	2204      	movs	r2, #4
   2b530:	4b01      	ldr	r3, [pc, #4]	; (2b538 <at_parse_detect_type+0xb4>)
   2b532:	701a      	strb	r2, [r3, #0]
   2b534:	e7b3      	b.n	2b49e <at_parse_detect_type+0x1a>
   2b536:	bf00      	nop
   2b538:	2002c9d9 	.word	0x2002c9d9
   2b53c:	00024001 	.word	0x00024001
   2b540:	0004f20f 	.word	0x0004f20f

0002b544 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2b544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b548:	4688      	mov	r8, r1
   2b54a:	4616      	mov	r6, r2
   2b54c:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2b54e:	4604      	mov	r4, r0
   2b550:	2800      	cmp	r0, #0
   2b552:	d07e      	beq.n	2b652 <at_parser_max_params_from_str+0x10e>
   2b554:	2a00      	cmp	r2, #0
   2b556:	d07c      	beq.n	2b652 <at_parser_max_params_from_str+0x10e>
   2b558:	6853      	ldr	r3, [r2, #4]
   2b55a:	2b00      	cmp	r3, #0
   2b55c:	d079      	beq.n	2b652 <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   2b55e:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2b560:	4610      	mov	r0, r2
   2b562:	f000 f8eb 	bl	2b73c <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2b566:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   2b568:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   2b56a:	4297      	cmp	r7, r2
   2b56c:	bf28      	it	cs
   2b56e:	4617      	movcs	r7, r2
	int index = 0;
   2b570:	462c      	mov	r4, r5
	state = IDLE;
   2b572:	4b39      	ldr	r3, [pc, #228]	; (2b658 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   2b574:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2b65c <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b578:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2b660 <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   2b57c:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2b57e:	9b01      	ldr	r3, [sp, #4]
   2b580:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b582:	2a00      	cmp	r2, #0
   2b584:	d04b      	beq.n	2b61e <at_parser_max_params_from_str+0xda>
   2b586:	42a7      	cmp	r7, r4
   2b588:	d949      	bls.n	2b61e <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   2b58a:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2b58e:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   2b590:	0711      	lsls	r1, r2, #28
			str++;
   2b592:	bf48      	it	mi
   2b594:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   2b596:	4621      	mov	r1, r4
			str++;
   2b598:	bf48      	it	mi
   2b59a:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2b59c:	f7ff ff72 	bl	2b484 <at_parse_detect_type>
   2b5a0:	1c42      	adds	r2, r0, #1
   2b5a2:	d03c      	beq.n	2b61e <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   2b5a4:	4632      	mov	r2, r6
   2b5a6:	4621      	mov	r1, r4
   2b5a8:	a801      	add	r0, sp, #4
   2b5aa:	f7ff fe5d 	bl	2b268 <at_parse_process_element>
   2b5ae:	1c43      	adds	r3, r0, #1
   2b5b0:	d035      	beq.n	2b61e <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   2b5b2:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b5b4:	781a      	ldrb	r2, [r3, #0]
   2b5b6:	3a2c      	subs	r2, #44	; 0x2c
   2b5b8:	b2d2      	uxtb	r2, r2
   2b5ba:	2a11      	cmp	r2, #17
   2b5bc:	d81a      	bhi.n	2b5f4 <at_parser_max_params_from_str+0xb0>
   2b5be:	fa2a f202 	lsr.w	r2, sl, r2
   2b5c2:	07d1      	lsls	r1, r2, #31
   2b5c4:	d516      	bpl.n	2b5f4 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   2b5c6:	7858      	ldrb	r0, [r3, #1]
   2b5c8:	f019 f8f0 	bl	447ac <is_lfcr>
   2b5cc:	b178      	cbz	r0, 2b5ee <at_parser_max_params_from_str+0xaa>
				index++;
   2b5ce:	3401      	adds	r4, #1
				if (index == max_params) {
   2b5d0:	42bc      	cmp	r4, r7
   2b5d2:	d039      	beq.n	2b648 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   2b5d4:	4621      	mov	r1, r4
   2b5d6:	a801      	add	r0, sp, #4
   2b5d8:	f7ff ff54 	bl	2b484 <at_parse_detect_type>
   2b5dc:	1c42      	adds	r2, r0, #1
   2b5de:	d01e      	beq.n	2b61e <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   2b5e0:	4632      	mov	r2, r6
   2b5e2:	4621      	mov	r1, r4
   2b5e4:	a801      	add	r0, sp, #4
   2b5e6:	f7ff fe3f 	bl	2b268 <at_parse_process_element>
   2b5ea:	1c43      	adds	r3, r0, #1
   2b5ec:	d017      	beq.n	2b61e <at_parser_max_params_from_str+0xda>
			str++;
   2b5ee:	9b01      	ldr	r3, [sp, #4]
   2b5f0:	3301      	adds	r3, #1
   2b5f2:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2b5f4:	9a01      	ldr	r2, [sp, #4]
   2b5f6:	7810      	ldrb	r0, [r2, #0]
   2b5f8:	f019 f8d8 	bl	447ac <is_lfcr>
   2b5fc:	b1f8      	cbz	r0, 2b63e <at_parser_max_params_from_str+0xfa>
   2b5fe:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2b600:	7811      	ldrb	r1, [r2, #0]
   2b602:	4693      	mov	fp, r2
   2b604:	4608      	mov	r0, r1
   2b606:	3201      	adds	r2, #1
   2b608:	f019 f8d0 	bl	447ac <is_lfcr>
   2b60c:	2800      	cmp	r0, #0
   2b60e:	d1f7      	bne.n	2b600 <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b610:	b119      	cbz	r1, 2b61a <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b612:	292b      	cmp	r1, #43	; 0x2b
   2b614:	d001      	beq.n	2b61a <at_parser_max_params_from_str+0xd6>
   2b616:	2925      	cmp	r1, #37	; 0x25
   2b618:	d111      	bne.n	2b63e <at_parser_max_params_from_str+0xfa>
				str += i;
   2b61a:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2b61e:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2b620:	b9a5      	cbnz	r5, 2b64c <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b622:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2b624:	2a00      	cmp	r2, #0
   2b626:	bf0c      	ite	eq
   2b628:	2000      	moveq	r0, #0
   2b62a:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2b62e:	f1b8 0f00 	cmp.w	r8, #0
   2b632:	d001      	beq.n	2b638 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2b634:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   2b638:	b003      	add	sp, #12
   2b63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2b63e:	3401      	adds	r4, #1
			oversized = true;
   2b640:	42bc      	cmp	r4, r7
   2b642:	bf08      	it	eq
   2b644:	2501      	moveq	r5, #1
   2b646:	e79a      	b.n	2b57e <at_parser_max_params_from_str+0x3a>
					oversized = true;
   2b648:	4605      	mov	r5, r0
   2b64a:	e7e8      	b.n	2b61e <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   2b64c:	f06f 0006 	mvn.w	r0, #6
   2b650:	e7ed      	b.n	2b62e <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2b652:	f06f 0015 	mvn.w	r0, #21
   2b656:	e7ef      	b.n	2b638 <at_parser_max_params_from_str+0xf4>
   2b658:	2002c9d9 	.word	0x2002c9d9
   2b65c:	0004f20f 	.word	0x0004f20f
   2b660:	00024001 	.word	0x00024001

0002b664 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2b664:	b538      	push	{r3, r4, r5, lr}
   2b666:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2b668:	4605      	mov	r5, r0
   2b66a:	b960      	cbnz	r0, 2b686 <at_params_get+0x22>
   2b66c:	490a      	ldr	r1, [pc, #40]	; (2b698 <at_params_get+0x34>)
   2b66e:	232b      	movs	r3, #43	; 0x2b
   2b670:	4a0a      	ldr	r2, [pc, #40]	; (2b69c <at_params_get+0x38>)
   2b672:	480b      	ldr	r0, [pc, #44]	; (2b6a0 <at_params_get+0x3c>)
   2b674:	f016 fab8 	bl	41be8 <printk>
   2b678:	480a      	ldr	r0, [pc, #40]	; (2b6a4 <at_params_get+0x40>)
   2b67a:	f016 fab5 	bl	41be8 <printk>
   2b67e:	212b      	movs	r1, #43	; 0x2b
   2b680:	4806      	ldr	r0, [pc, #24]	; (2b69c <at_params_get+0x38>)
   2b682:	f016 fccb 	bl	4201c <assert_post_action>

	if (index >= list->param_count) {
   2b686:	682b      	ldr	r3, [r5, #0]
   2b688:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2b68a:	bf85      	ittet	hi
   2b68c:	230c      	movhi	r3, #12
   2b68e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   2b690:	2000      	movls	r0, #0
	return &param[index];
   2b692:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   2b696:	bd38      	pop	{r3, r4, r5, pc}
   2b698:	0004abc7 	.word	0x0004abc7
   2b69c:	0004ab99 	.word	0x0004ab99
   2b6a0:	0004825b 	.word	0x0004825b
   2b6a4:	0004abdb 	.word	0x0004abdb

0002b6a8 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2b6a8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b6aa:	4604      	mov	r4, r0
   2b6ac:	b960      	cbnz	r0, 2b6c8 <at_param_size+0x20>
   2b6ae:	490e      	ldr	r1, [pc, #56]	; (2b6e8 <at_param_size+0x40>)
   2b6b0:	2339      	movs	r3, #57	; 0x39
   2b6b2:	4a0e      	ldr	r2, [pc, #56]	; (2b6ec <at_param_size+0x44>)
   2b6b4:	480e      	ldr	r0, [pc, #56]	; (2b6f0 <at_param_size+0x48>)
   2b6b6:	f016 fa97 	bl	41be8 <printk>
   2b6ba:	480e      	ldr	r0, [pc, #56]	; (2b6f4 <at_param_size+0x4c>)
   2b6bc:	f016 fa94 	bl	41be8 <printk>
   2b6c0:	2139      	movs	r1, #57	; 0x39
   2b6c2:	480a      	ldr	r0, [pc, #40]	; (2b6ec <at_param_size+0x44>)
   2b6c4:	f016 fcaa 	bl	4201c <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   2b6c8:	7823      	ldrb	r3, [r4, #0]
   2b6ca:	2b01      	cmp	r3, #1
   2b6cc:	d006      	beq.n	2b6dc <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2b6ce:	2b02      	cmp	r3, #2
   2b6d0:	d006      	beq.n	2b6e0 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b6d2:	3b03      	subs	r3, #3
   2b6d4:	2b01      	cmp	r3, #1
   2b6d6:	d805      	bhi.n	2b6e4 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2b6d8:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2b6da:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   2b6dc:	2002      	movs	r0, #2
   2b6de:	e7fc      	b.n	2b6da <at_param_size+0x32>
		return sizeof(uint32_t);
   2b6e0:	2004      	movs	r0, #4
   2b6e2:	e7fa      	b.n	2b6da <at_param_size+0x32>
	return 0;
   2b6e4:	2000      	movs	r0, #0
   2b6e6:	e7f8      	b.n	2b6da <at_param_size+0x32>
   2b6e8:	0004ab68 	.word	0x0004ab68
   2b6ec:	0004ab99 	.word	0x0004ab99
   2b6f0:	0004825b 	.word	0x0004825b
   2b6f4:	0004ab7d 	.word	0x0004ab7d

0002b6f8 <at_param_clear>:
{
   2b6f8:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b6fa:	4604      	mov	r4, r0
   2b6fc:	b960      	cbnz	r0, 2b718 <at_param_clear+0x20>
   2b6fe:	490b      	ldr	r1, [pc, #44]	; (2b72c <at_param_clear+0x34>)
   2b700:	231d      	movs	r3, #29
   2b702:	4a0b      	ldr	r2, [pc, #44]	; (2b730 <at_param_clear+0x38>)
   2b704:	480b      	ldr	r0, [pc, #44]	; (2b734 <at_param_clear+0x3c>)
   2b706:	f016 fa6f 	bl	41be8 <printk>
   2b70a:	480b      	ldr	r0, [pc, #44]	; (2b738 <at_param_clear+0x40>)
   2b70c:	f016 fa6c 	bl	41be8 <printk>
   2b710:	211d      	movs	r1, #29
   2b712:	4807      	ldr	r0, [pc, #28]	; (2b730 <at_param_clear+0x38>)
   2b714:	f016 fc82 	bl	4201c <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b718:	7823      	ldrb	r3, [r4, #0]
   2b71a:	3b03      	subs	r3, #3
   2b71c:	2b01      	cmp	r3, #1
   2b71e:	d802      	bhi.n	2b726 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2b720:	68a0      	ldr	r0, [r4, #8]
   2b722:	f019 fd46 	bl	451b2 <k_free>
	param->value.int_val = 0;
   2b726:	2300      	movs	r3, #0
   2b728:	60a3      	str	r3, [r4, #8]
}
   2b72a:	bd10      	pop	{r4, pc}
   2b72c:	0004ab68 	.word	0x0004ab68
   2b730:	0004ab99 	.word	0x0004ab99
   2b734:	0004825b 	.word	0x0004825b
   2b738:	0004ab7d 	.word	0x0004ab7d

0002b73c <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2b73c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   2b740:	4605      	mov	r5, r0
   2b742:	b158      	cbz	r0, 2b75c <at_params_list_clear+0x20>
   2b744:	6843      	ldr	r3, [r0, #4]
   2b746:	b14b      	cbz	r3, 2b75c <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2b748:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b74a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2b7a0 <at_params_list_clear+0x64>
   2b74e:	f8df a054 	ldr.w	sl, [pc, #84]	; 2b7a4 <at_params_list_clear+0x68>
   2b752:	f8df b054 	ldr.w	fp, [pc, #84]	; 2b7a8 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2b756:	682b      	ldr	r3, [r5, #0]
   2b758:	429c      	cmp	r4, r3
   2b75a:	d301      	bcc.n	2b760 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2b75c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   2b760:	270c      	movs	r7, #12
   2b762:	4367      	muls	r7, r4
   2b764:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2b768:	eb09 0607 	add.w	r6, r9, r7
   2b76c:	4630      	mov	r0, r6
   2b76e:	f7ff ffc3 	bl	2b6f8 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b772:	b966      	cbnz	r6, 2b78e <at_params_list_clear+0x52>
   2b774:	4651      	mov	r1, sl
   2b776:	2314      	movs	r3, #20
   2b778:	4642      	mov	r2, r8
   2b77a:	4658      	mov	r0, fp
   2b77c:	f016 fa34 	bl	41be8 <printk>
   2b780:	4806      	ldr	r0, [pc, #24]	; (2b79c <at_params_list_clear+0x60>)
   2b782:	f016 fa31 	bl	41be8 <printk>
   2b786:	2114      	movs	r1, #20
   2b788:	4640      	mov	r0, r8
   2b78a:	f016 fc47 	bl	4201c <assert_post_action>
   2b78e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   2b790:	3401      	adds	r4, #1
   2b792:	f849 3007 	str.w	r3, [r9, r7]
   2b796:	6073      	str	r3, [r6, #4]
   2b798:	60b3      	str	r3, [r6, #8]
   2b79a:	e7dc      	b.n	2b756 <at_params_list_clear+0x1a>
   2b79c:	0004ab7d 	.word	0x0004ab7d
   2b7a0:	0004ab99 	.word	0x0004ab99
   2b7a4:	0004ab68 	.word	0x0004ab68
   2b7a8:	0004825b 	.word	0x0004825b

0002b7ac <parse_psm_cfg>:
	char timer_str[9] = {0};
   2b7ac:	2300      	movs	r3, #0
{
   2b7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b7b2:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   2b7b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b7b8:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   2b7bc:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b7be:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b7c0:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b7c2:	9302      	str	r3, [sp, #8]
{
   2b7c4:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   2b7c6:	446b      	add	r3, sp
   2b7c8:	aa03      	add	r2, sp, #12
   2b7ca:	bf14      	ite	ne
   2b7cc:	2108      	movne	r1, #8
   2b7ce:	2109      	moveq	r1, #9
{
   2b7d0:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b7d2:	bf14      	ite	ne
   2b7d4:	2707      	movne	r7, #7
   2b7d6:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   2b7d8:	f019 f8da 	bl	44990 <at_params_string_get>
	if (err) {
   2b7dc:	4604      	mov	r4, r0
   2b7de:	b190      	cbz	r0, 2b806 <parse_psm_cfg+0x5a>
		LOG_ERR("Could not get TAU, error: %d", err);
   2b7e0:	2301      	movs	r3, #1
   2b7e2:	f04f 0000 	mov.w	r0, #0
   2b7e6:	4a39      	ldr	r2, [pc, #228]	; (2b8cc <parse_psm_cfg+0x120>)
   2b7e8:	f363 0007 	bfi	r0, r3, #0, #8
   2b7ec:	4b38      	ldr	r3, [pc, #224]	; (2b8d0 <parse_psm_cfg+0x124>)
   2b7ee:	4939      	ldr	r1, [pc, #228]	; (2b8d4 <parse_psm_cfg+0x128>)
   2b7f0:	1a9b      	subs	r3, r3, r2
   2b7f2:	08db      	lsrs	r3, r3, #3
   2b7f4:	f363 108f 	bfi	r0, r3, #6, #10
   2b7f8:	4622      	mov	r2, r4
   2b7fa:	f016 fc20 	bl	4203e <log_string_sync>
}
   2b7fe:	4620      	mov	r0, r4
   2b800:	b006      	add	sp, #24
   2b802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2b806:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b808:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b80a:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b80e:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b810:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b812:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b814:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b818:	f014 fe70 	bl	404fc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2b81c:	2807      	cmp	r0, #7
   2b81e:	d910      	bls.n	2b842 <parse_psm_cfg+0x96>
		LOG_ERR("Unable to parse periodic TAU string");
   2b820:	2301      	movs	r3, #1
   2b822:	f04f 0000 	mov.w	r0, #0
   2b826:	4a29      	ldr	r2, [pc, #164]	; (2b8cc <parse_psm_cfg+0x120>)
   2b828:	f363 0007 	bfi	r0, r3, #0, #8
   2b82c:	4b28      	ldr	r3, [pc, #160]	; (2b8d0 <parse_psm_cfg+0x124>)
   2b82e:	492a      	ldr	r1, [pc, #168]	; (2b8d8 <parse_psm_cfg+0x12c>)
   2b830:	1a9b      	subs	r3, r3, r2
   2b832:	08db      	lsrs	r3, r3, #3
   2b834:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Unable to parse active time string");
   2b838:	f016 fc01 	bl	4203e <log_string_sync>
		return err;
   2b83c:	f06f 0415 	mvn.w	r4, #21
   2b840:	e7dd      	b.n	2b7fe <parse_psm_cfg+0x52>
	timer_unit = t3412_lookup[lut_idx];
   2b842:	4b26      	ldr	r3, [pc, #152]	; (2b8dc <parse_psm_cfg+0x130>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b844:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   2b846:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b84a:	4621      	mov	r1, r4
   2b84c:	f10d 000f 	add.w	r0, sp, #15
   2b850:	f014 fe54 	bl	404fc <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b854:	f1b8 0f00 	cmp.w	r8, #0
   2b858:	d025      	beq.n	2b8a6 <parse_psm_cfg+0xfa>
   2b85a:	fb00 f008 	mul.w	r0, r0, r8
   2b85e:	6028      	str	r0, [r5, #0]
	err = at_params_string_get(at_params,
   2b860:	ab02      	add	r3, sp, #8
   2b862:	aa03      	add	r2, sp, #12
   2b864:	4639      	mov	r1, r7
   2b866:	4630      	mov	r0, r6
   2b868:	f019 f892 	bl	44990 <at_params_string_get>
	if (err) {
   2b86c:	4604      	mov	r4, r0
   2b86e:	2800      	cmp	r0, #0
   2b870:	d1b6      	bne.n	2b7e0 <parse_psm_cfg+0x34>
	memcpy(unit_str, timer_str, unit_str_len);
   2b872:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b874:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b876:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b87a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b87c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b87e:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b880:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b884:	f014 fe3a 	bl	404fc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2b888:	2807      	cmp	r0, #7
   2b88a:	d90f      	bls.n	2b8ac <parse_psm_cfg+0x100>
		LOG_ERR("Unable to parse active time string");
   2b88c:	2301      	movs	r3, #1
   2b88e:	f04f 0000 	mov.w	r0, #0
   2b892:	4a0e      	ldr	r2, [pc, #56]	; (2b8cc <parse_psm_cfg+0x120>)
   2b894:	f363 0007 	bfi	r0, r3, #0, #8
   2b898:	4b0d      	ldr	r3, [pc, #52]	; (2b8d0 <parse_psm_cfg+0x124>)
   2b89a:	4911      	ldr	r1, [pc, #68]	; (2b8e0 <parse_psm_cfg+0x134>)
   2b89c:	1a9b      	subs	r3, r3, r2
   2b89e:	08db      	lsrs	r3, r3, #3
   2b8a0:	f363 108f 	bfi	r0, r3, #6, #10
   2b8a4:	e7c8      	b.n	2b838 <parse_psm_cfg+0x8c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b8a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b8aa:	e7d8      	b.n	2b85e <parse_psm_cfg+0xb2>
	timer_unit = t3324_lookup[lut_idx];
   2b8ac:	4b0d      	ldr	r3, [pc, #52]	; (2b8e4 <parse_psm_cfg+0x138>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b8ae:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   2b8b0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b8b4:	4621      	mov	r1, r4
   2b8b6:	f10d 000f 	add.w	r0, sp, #15
   2b8ba:	f014 fe1f 	bl	404fc <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b8be:	b116      	cbz	r6, 2b8c6 <parse_psm_cfg+0x11a>
   2b8c0:	4370      	muls	r0, r6
   2b8c2:	6068      	str	r0, [r5, #4]
	return 0;
   2b8c4:	e79b      	b.n	2b7fe <parse_psm_cfg+0x52>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b8c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b8ca:	e7fa      	b.n	2b8c2 <parse_psm_cfg+0x116>
   2b8cc:	00046878 	.word	0x00046878
   2b8d0:	00046908 	.word	0x00046908
   2b8d4:	0004b1d5 	.word	0x0004b1d5
   2b8d8:	0004b1f2 	.word	0x0004b1f2
   2b8dc:	00046f94 	.word	0x00046f94
   2b8e0:	0004b216 	.word	0x0004b216
   2b8e4:	00046f74 	.word	0x00046f74

0002b8e8 <lte_lc_register_handler>:
{
   2b8e8:	b538      	push	{r3, r4, r5, lr}
	if (handler == NULL) {
   2b8ea:	4604      	mov	r4, r0
   2b8ec:	4d13      	ldr	r5, [pc, #76]	; (2b93c <lte_lc_register_handler+0x54>)
   2b8ee:	b988      	cbnz	r0, 2b914 <lte_lc_register_handler+0x2c>
		evt_handler = NULL;
   2b8f0:	6028      	str	r0, [r5, #0]
		LOG_INF("Previously registered handler (%p) deregistered",
   2b8f2:	2303      	movs	r3, #3
   2b8f4:	f04f 0000 	mov.w	r0, #0
   2b8f8:	4a11      	ldr	r2, [pc, #68]	; (2b940 <lte_lc_register_handler+0x58>)
   2b8fa:	f363 0007 	bfi	r0, r3, #0, #8
   2b8fe:	4b11      	ldr	r3, [pc, #68]	; (2b944 <lte_lc_register_handler+0x5c>)
   2b900:	4911      	ldr	r1, [pc, #68]	; (2b948 <lte_lc_register_handler+0x60>)
   2b902:	1a9b      	subs	r3, r3, r2
   2b904:	08db      	lsrs	r3, r3, #3
   2b906:	f363 108f 	bfi	r0, r3, #6, #10
   2b90a:	4622      	mov	r2, r4
}
   2b90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("Previously registered handler (%p) deregistered",
   2b910:	f016 bb95 	b.w	4203e <log_string_sync>
	if (evt_handler) {
   2b914:	682a      	ldr	r2, [r5, #0]
   2b916:	b172      	cbz	r2, 2b936 <lte_lc_register_handler+0x4e>
		LOG_WRN("Replacing previously registered handler (%p) with %p",
   2b918:	2302      	movs	r3, #2
   2b91a:	f04f 0000 	mov.w	r0, #0
   2b91e:	4908      	ldr	r1, [pc, #32]	; (2b940 <lte_lc_register_handler+0x58>)
   2b920:	f363 0007 	bfi	r0, r3, #0, #8
   2b924:	4b07      	ldr	r3, [pc, #28]	; (2b944 <lte_lc_register_handler+0x5c>)
   2b926:	1a5b      	subs	r3, r3, r1
   2b928:	08db      	lsrs	r3, r3, #3
   2b92a:	f363 108f 	bfi	r0, r3, #6, #10
   2b92e:	4907      	ldr	r1, [pc, #28]	; (2b94c <lte_lc_register_handler+0x64>)
   2b930:	4623      	mov	r3, r4
   2b932:	f016 fb84 	bl	4203e <log_string_sync>
	evt_handler = handler;
   2b936:	602c      	str	r4, [r5, #0]
}
   2b938:	bd38      	pop	{r3, r4, r5, pc}
   2b93a:	bf00      	nop
   2b93c:	2002492c 	.word	0x2002492c
   2b940:	00046878 	.word	0x00046878
   2b944:	00046908 	.word	0x00046908
   2b948:	0004afea 	.word	0x0004afea
   2b94c:	0004b01a 	.word	0x0004b01a

0002b950 <lte_lc_offline>:
{
   2b950:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2b952:	2300      	movs	r3, #0
   2b954:	4804      	ldr	r0, [pc, #16]	; (2b968 <lte_lc_offline+0x18>)
   2b956:	461a      	mov	r2, r3
   2b958:	4619      	mov	r1, r3
   2b95a:	f7ff f8b1 	bl	2aac0 <at_cmd_write>
   2b95e:	2800      	cmp	r0, #0
}
   2b960:	bf18      	it	ne
   2b962:	f06f 0004 	mvnne.w	r0, #4
   2b966:	bd08      	pop	{r3, pc}
   2b968:	0004b1cb 	.word	0x0004b1cb

0002b96c <lte_lc_power_off>:
{
   2b96c:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2b96e:	2300      	movs	r3, #0
   2b970:	4804      	ldr	r0, [pc, #16]	; (2b984 <lte_lc_power_off+0x18>)
   2b972:	461a      	mov	r2, r3
   2b974:	4619      	mov	r1, r3
   2b976:	f7ff f8a3 	bl	2aac0 <at_cmd_write>
   2b97a:	2800      	cmp	r0, #0
}
   2b97c:	bf18      	it	ne
   2b97e:	f06f 0004 	mvnne.w	r0, #4
   2b982:	bd08      	pop	{r3, pc}
   2b984:	0004b239 	.word	0x0004b239

0002b988 <lte_lc_deinit>:
{
   2b988:	b508      	push	{r3, lr}
	if (is_initialized) {
   2b98a:	4b06      	ldr	r3, [pc, #24]	; (2b9a4 <lte_lc_deinit+0x1c>)
   2b98c:	7818      	ldrb	r0, [r3, #0]
   2b98e:	b140      	cbz	r0, 2b9a2 <lte_lc_deinit+0x1a>
		is_initialized = false;
   2b990:	2000      	movs	r0, #0
		at_notif_deregister_handler(NULL, at_handler);
   2b992:	4905      	ldr	r1, [pc, #20]	; (2b9a8 <lte_lc_deinit+0x20>)
		is_initialized = false;
   2b994:	7018      	strb	r0, [r3, #0]
		at_notif_deregister_handler(NULL, at_handler);
   2b996:	f7ff fa11 	bl	2adbc <at_notif_deregister_handler>
}
   2b99a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return lte_lc_power_off();
   2b99e:	f7ff bfe5 	b.w	2b96c <lte_lc_power_off>
}
   2b9a2:	bd08      	pop	{r3, pc}
   2b9a4:	2002c9da 	.word	0x2002c9da
   2b9a8:	0001db51 	.word	0x0001db51

0002b9ac <lte_lc_normal>:
{
   2b9ac:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2b9ae:	2300      	movs	r3, #0
   2b9b0:	4804      	ldr	r0, [pc, #16]	; (2b9c4 <lte_lc_normal+0x18>)
   2b9b2:	461a      	mov	r2, r3
   2b9b4:	4619      	mov	r1, r3
   2b9b6:	f7ff f883 	bl	2aac0 <at_cmd_write>
   2b9ba:	2800      	cmp	r0, #0
}
   2b9bc:	bf18      	it	ne
   2b9be:	f06f 0004 	mvnne.w	r0, #4
   2b9c2:	bd08      	pop	{r3, pc}
   2b9c4:	0004b1c1 	.word	0x0004b1c1

0002b9c8 <lte_lc_psm_req>:
{
   2b9c8:	b500      	push	{lr}
	if (enable) {
   2b9ca:	4603      	mov	r3, r0
{
   2b9cc:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   2b9ce:	b1a0      	cbz	r0, 2b9fa <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   2b9d0:	4b0c      	ldr	r3, [pc, #48]	; (2ba04 <lte_lc_psm_req+0x3c>)
   2b9d2:	4a0d      	ldr	r2, [pc, #52]	; (2ba08 <lte_lc_psm_req+0x40>)
   2b9d4:	9300      	str	r3, [sp, #0]
   2b9d6:	2128      	movs	r1, #40	; 0x28
   2b9d8:	4b0c      	ldr	r3, [pc, #48]	; (2ba0c <lte_lc_psm_req+0x44>)
   2b9da:	a802      	add	r0, sp, #8
   2b9dc:	f014 fc2e 	bl	4023c <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   2b9e0:	2300      	movs	r3, #0
   2b9e2:	461a      	mov	r2, r3
   2b9e4:	4619      	mov	r1, r3
   2b9e6:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b9e8:	f7ff f86a 	bl	2aac0 <at_cmd_write>
		return -EIO;
   2b9ec:	2800      	cmp	r0, #0
}
   2b9ee:	bf18      	it	ne
   2b9f0:	f06f 0004 	mvnne.w	r0, #4
   2b9f4:	b00d      	add	sp, #52	; 0x34
   2b9f6:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b9fa:	4602      	mov	r2, r0
   2b9fc:	4601      	mov	r1, r0
   2b9fe:	4804      	ldr	r0, [pc, #16]	; (2ba10 <lte_lc_psm_req+0x48>)
   2ba00:	e7f2      	b.n	2b9e8 <lte_lc_psm_req+0x20>
   2ba02:	bf00      	nop
   2ba04:	2002095a 	.word	0x2002095a
   2ba08:	0004afd3 	.word	0x0004afd3
   2ba0c:	20020963 	.word	0x20020963
   2ba10:	0004b243 	.word	0x0004b243

0002ba14 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   2ba14:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   2ba16:	4605      	mov	r5, r0
{
   2ba18:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   2ba1a:	2800      	cmp	r0, #0
   2ba1c:	d04b      	beq.n	2bab6 <lte_lc_system_mode_set+0xa2>
   2ba1e:	2805      	cmp	r0, #5
   2ba20:	d912      	bls.n	2ba48 <lte_lc_system_mode_set+0x34>
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   2ba22:	2301      	movs	r3, #1
   2ba24:	f04f 0000 	mov.w	r0, #0
   2ba28:	4a24      	ldr	r2, [pc, #144]	; (2babc <lte_lc_system_mode_set+0xa8>)
   2ba2a:	f363 0007 	bfi	r0, r3, #0, #8
   2ba2e:	4b24      	ldr	r3, [pc, #144]	; (2bac0 <lte_lc_system_mode_set+0xac>)
   2ba30:	4924      	ldr	r1, [pc, #144]	; (2bac4 <lte_lc_system_mode_set+0xb0>)
   2ba32:	1a9b      	subs	r3, r3, r2
   2ba34:	08db      	lsrs	r3, r3, #3
   2ba36:	f363 108f 	bfi	r0, r3, #6, #10
   2ba3a:	f016 fb00 	bl	4203e <log_string_sync>
		return -EINVAL;
   2ba3e:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   2ba42:	4620      	mov	r0, r4
   2ba44:	b00f      	add	sp, #60	; 0x3c
   2ba46:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   2ba48:	4b1f      	ldr	r3, [pc, #124]	; (2bac8 <lte_lc_system_mode_set+0xb4>)
   2ba4a:	4a20      	ldr	r2, [pc, #128]	; (2bacc <lte_lc_system_mode_set+0xb8>)
   2ba4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2ba50:	2132      	movs	r1, #50	; 0x32
   2ba52:	a801      	add	r0, sp, #4
   2ba54:	f016 f8d5 	bl	41c02 <snprintk>
	if (len < 0) {
   2ba58:	2800      	cmp	r0, #0
   2ba5a:	da10      	bge.n	2ba7e <lte_lc_system_mode_set+0x6a>
		LOG_ERR("Could not construct system mode command");
   2ba5c:	2301      	movs	r3, #1
   2ba5e:	f04f 0000 	mov.w	r0, #0
   2ba62:	4a16      	ldr	r2, [pc, #88]	; (2babc <lte_lc_system_mode_set+0xa8>)
   2ba64:	f363 0007 	bfi	r0, r3, #0, #8
   2ba68:	4b15      	ldr	r3, [pc, #84]	; (2bac0 <lte_lc_system_mode_set+0xac>)
   2ba6a:	4919      	ldr	r1, [pc, #100]	; (2bad0 <lte_lc_system_mode_set+0xbc>)
   2ba6c:	1a9b      	subs	r3, r3, r2
   2ba6e:	08db      	lsrs	r3, r3, #3
   2ba70:	f363 108f 	bfi	r0, r3, #6, #10
   2ba74:	f016 fae3 	bl	4203e <log_string_sync>
		return -EFAULT;
   2ba78:	f06f 040d 	mvn.w	r4, #13
   2ba7c:	e7e1      	b.n	2ba42 <lte_lc_system_mode_set+0x2e>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   2ba7e:	2300      	movs	r3, #0
   2ba80:	a801      	add	r0, sp, #4
   2ba82:	461a      	mov	r2, r3
   2ba84:	4619      	mov	r1, r3
   2ba86:	f7ff f81b 	bl	2aac0 <at_cmd_write>
	if (err) {
   2ba8a:	4604      	mov	r4, r0
   2ba8c:	b170      	cbz	r0, 2baac <lte_lc_system_mode_set+0x98>
		LOG_ERR("Could not send AT command, error: %d", err);
   2ba8e:	2301      	movs	r3, #1
   2ba90:	f04f 0000 	mov.w	r0, #0
   2ba94:	4a09      	ldr	r2, [pc, #36]	; (2babc <lte_lc_system_mode_set+0xa8>)
   2ba96:	f363 0007 	bfi	r0, r3, #0, #8
   2ba9a:	4b09      	ldr	r3, [pc, #36]	; (2bac0 <lte_lc_system_mode_set+0xac>)
   2ba9c:	490d      	ldr	r1, [pc, #52]	; (2bad4 <lte_lc_system_mode_set+0xc0>)
   2ba9e:	1a9b      	subs	r3, r3, r2
   2baa0:	08db      	lsrs	r3, r3, #3
   2baa2:	f363 108f 	bfi	r0, r3, #6, #10
   2baa6:	4622      	mov	r2, r4
   2baa8:	f016 fac9 	bl	4203e <log_string_sync>
	sys_mode_current = mode;
   2baac:	4b0a      	ldr	r3, [pc, #40]	; (2bad8 <lte_lc_system_mode_set+0xc4>)
   2baae:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   2bab0:	4b0a      	ldr	r3, [pc, #40]	; (2badc <lte_lc_system_mode_set+0xc8>)
   2bab2:	701d      	strb	r5, [r3, #0]
	return err;
   2bab4:	e7c5      	b.n	2ba42 <lte_lc_system_mode_set+0x2e>
		return 0;
   2bab6:	4604      	mov	r4, r0
   2bab8:	e7c3      	b.n	2ba42 <lte_lc_system_mode_set+0x2e>
   2baba:	bf00      	nop
   2babc:	00046878 	.word	0x00046878
   2bac0:	00046908 	.word	0x00046908
   2bac4:	0004b143 	.word	0x0004b143
   2bac8:	00046f5c 	.word	0x00046f5c
   2bacc:	0004b161 	.word	0x0004b161
   2bad0:	0004b174 	.word	0x0004b174
   2bad4:	0004b19c 	.word	0x0004b19c
   2bad8:	2002c9dc 	.word	0x2002c9dc
   2badc:	2002096c 	.word	0x2002096c

0002bae0 <w_lte_lc_connect>:
{
   2bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bae4:	4b2d      	ldr	r3, [pc, #180]	; (2bb9c <w_lte_lc_connect+0xbc>)
   2bae6:	4c2e      	ldr	r4, [pc, #184]	; (2bba0 <w_lte_lc_connect+0xc0>)
   2bae8:	4680      	mov	r8, r0
   2baea:	1ae4      	subs	r4, r4, r3
	if (!is_initialized) {
   2baec:	4b2d      	ldr	r3, [pc, #180]	; (2bba4 <w_lte_lc_connect+0xc4>)
   2baee:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2baf2:	781b      	ldrb	r3, [r3, #0]
   2baf4:	b96b      	cbnz	r3, 2bb12 <w_lte_lc_connect+0x32>
		LOG_ERR("The LTE link controller is not initialized");
   2baf6:	2301      	movs	r3, #1
   2baf8:	f04f 0000 	mov.w	r0, #0
   2bafc:	f363 0007 	bfi	r0, r3, #0, #8
   2bb00:	f364 108f 	bfi	r0, r4, #6, #10
   2bb04:	4928      	ldr	r1, [pc, #160]	; (2bba8 <w_lte_lc_connect+0xc8>)
   2bb06:	f016 fa9a 	bl	4203e <log_string_sync>
		return -EPERM;
   2bb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2bb0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2bb12:	2201      	movs	r2, #1
   2bb14:	2100      	movs	r1, #0
   2bb16:	4825      	ldr	r0, [pc, #148]	; (2bbac <w_lte_lc_connect+0xcc>)
   2bb18:	f019 fa2c 	bl	44f74 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   2bb1c:	4f24      	ldr	r7, [pc, #144]	; (2bbb0 <w_lte_lc_connect+0xd0>)
	return z_impl_k_sem_take(sem, timeout);
   2bb1e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2bbac <w_lte_lc_connect+0xcc>
			LOG_INF("Network connection attempt timed out");
   2bb22:	f8df a094 	ldr.w	sl, [pc, #148]	; 2bbb8 <w_lte_lc_connect+0xd8>
		err = lte_lc_system_mode_set(sys_mode_target);
   2bb26:	7838      	ldrb	r0, [r7, #0]
   2bb28:	f7ff ff74 	bl	2ba14 <lte_lc_system_mode_set>
		if (err) {
   2bb2c:	2800      	cmp	r0, #0
   2bb2e:	d1ee      	bne.n	2bb0e <w_lte_lc_connect+0x2e>
		err = lte_lc_normal();
   2bb30:	f7ff ff3c 	bl	2b9ac <lte_lc_normal>
		if (err || !blocking) {
   2bb34:	2800      	cmp	r0, #0
   2bb36:	d1ea      	bne.n	2bb0e <w_lte_lc_connect+0x2e>
   2bb38:	f1b8 0f00 	cmp.w	r8, #0
   2bb3c:	d0e7      	beq.n	2bb0e <w_lte_lc_connect+0x2e>
   2bb3e:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2bb42:	2300      	movs	r3, #0
   2bb44:	4648      	mov	r0, r9
   2bb46:	f012 fba1 	bl	3e28c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2bb4a:	f110 0f0b 	cmn.w	r0, #11
   2bb4e:	d1de      	bne.n	2bb0e <w_lte_lc_connect+0x2e>
			LOG_INF("Network connection attempt timed out");
   2bb50:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2bb54:	f043 0303 	orr.w	r3, r3, #3
   2bb58:	f363 0607 	bfi	r6, r3, #0, #8
   2bb5c:	f364 168f 	bfi	r6, r4, #6, #10
   2bb60:	4651      	mov	r1, sl
   2bb62:	4630      	mov	r0, r6
   2bb64:	f016 fa6b 	bl	4203e <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2bb68:	783b      	ldrb	r3, [r7, #0]
   2bb6a:	2b04      	cmp	r3, #4
   2bb6c:	d112      	bne.n	2bb94 <w_lte_lc_connect+0xb4>
				sys_mode_target = sys_mode_fallback;
   2bb6e:	2305      	movs	r3, #5
   2bb70:	703b      	strb	r3, [r7, #0]
				err = lte_lc_offline();
   2bb72:	f7ff feed 	bl	2b950 <lte_lc_offline>
				if (err) {
   2bb76:	2800      	cmp	r0, #0
   2bb78:	d1c9      	bne.n	2bb0e <w_lte_lc_connect+0x2e>
				LOG_INF("Using fallback network mode");
   2bb7a:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2bb7e:	f043 0303 	orr.w	r3, r3, #3
   2bb82:	f363 0507 	bfi	r5, r3, #0, #8
   2bb86:	f364 158f 	bfi	r5, r4, #6, #10
   2bb8a:	490a      	ldr	r1, [pc, #40]	; (2bbb4 <w_lte_lc_connect+0xd4>)
   2bb8c:	4628      	mov	r0, r5
   2bb8e:	f016 fa56 	bl	4203e <log_string_sync>
   2bb92:	e7c8      	b.n	2bb26 <w_lte_lc_connect+0x46>
				err = -ETIMEDOUT;
   2bb94:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2bb98:	e7b9      	b.n	2bb0e <w_lte_lc_connect+0x2e>
   2bb9a:	bf00      	nop
   2bb9c:	00046878 	.word	0x00046878
   2bba0:	00046908 	.word	0x00046908
   2bba4:	2002c9da 	.word	0x2002c9da
   2bba8:	0004b28b 	.word	0x0004b28b
   2bbac:	20024930 	.word	0x20024930
   2bbb0:	2002096c 	.word	0x2002096c
   2bbb4:	0004b2db 	.word	0x0004b2db
   2bbb8:	0004b2b6 	.word	0x0004b2b6

0002bbbc <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   2bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   2bbc0:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2bbc2:	260d      	movs	r6, #13
{
   2bbc4:	4605      	mov	r5, r0
   2bbc6:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2bbc8:	221e      	movs	r2, #30
   2bbca:	4621      	mov	r1, r4
   2bbcc:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   2bbce:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2bbd2:	f019 fb49 	bl	45268 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2bbd6:	4632      	mov	r2, r6
   2bbd8:	4621      	mov	r1, r4
   2bbda:	a804      	add	r0, sp, #16
   2bbdc:	f019 fb44 	bl	45268 <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   2bbe0:	9600      	str	r6, [sp, #0]

	if (mode == NULL) {
   2bbe2:	2d00      	cmp	r5, #0
   2bbe4:	f000 80c7 	beq.w	2bd76 <lte_lc_system_mode_get+0x1ba>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   2bbe8:	4623      	mov	r3, r4
   2bbea:	221e      	movs	r2, #30
   2bbec:	a908      	add	r1, sp, #32
   2bbee:	4863      	ldr	r0, [pc, #396]	; (2bd7c <lte_lc_system_mode_get+0x1c0>)
   2bbf0:	f7fe ff66 	bl	2aac0 <at_cmd_write>
			   NULL);
	if (err) {
   2bbf4:	4604      	mov	r4, r0
   2bbf6:	b188      	cbz	r0, 2bc1c <lte_lc_system_mode_get+0x60>
		LOG_ERR("Could not send AT command");
   2bbf8:	2301      	movs	r3, #1
   2bbfa:	f04f 0000 	mov.w	r0, #0
   2bbfe:	4a60      	ldr	r2, [pc, #384]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bc00:	f363 0007 	bfi	r0, r3, #0, #8
   2bc04:	4b5f      	ldr	r3, [pc, #380]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bc06:	4960      	ldr	r1, [pc, #384]	; (2bd88 <lte_lc_system_mode_get+0x1cc>)
   2bc08:	1a9b      	subs	r3, r3, r2
   2bc0a:	08db      	lsrs	r3, r3, #3
   2bc0c:	f363 108f 	bfi	r0, r3, #6, #10
   2bc10:	f016 fa15 	bl	4203e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bc14:	4620      	mov	r0, r4
   2bc16:	b010      	add	sp, #64	; 0x40
   2bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2bc1c:	2105      	movs	r1, #5
   2bc1e:	a802      	add	r0, sp, #8
   2bc20:	f018 fdde 	bl	447e0 <at_params_list_init>
	if (err) {
   2bc24:	4604      	mov	r4, r0
   2bc26:	b178      	cbz	r0, 2bc48 <lte_lc_system_mode_get+0x8c>
		LOG_ERR("Could init AT params list, error: %d", err);
   2bc28:	2301      	movs	r3, #1
   2bc2a:	f04f 0000 	mov.w	r0, #0
   2bc2e:	4a54      	ldr	r2, [pc, #336]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bc30:	f363 0007 	bfi	r0, r3, #0, #8
   2bc34:	4b53      	ldr	r3, [pc, #332]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bc36:	4955      	ldr	r1, [pc, #340]	; (2bd8c <lte_lc_system_mode_get+0x1d0>)
   2bc38:	1a9b      	subs	r3, r3, r2
   2bc3a:	08db      	lsrs	r3, r3, #3
   2bc3c:	f363 108f 	bfi	r0, r3, #6, #10
   2bc40:	4622      	mov	r2, r4
   2bc42:	f016 f9fc 	bl	4203e <log_string_sync>
		return err;
   2bc46:	e7e5      	b.n	2bc14 <lte_lc_system_mode_get+0x58>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2bc48:	4601      	mov	r1, r0
   2bc4a:	2305      	movs	r3, #5
   2bc4c:	aa02      	add	r2, sp, #8
   2bc4e:	a808      	add	r0, sp, #32
   2bc50:	f7ff fc78 	bl	2b544 <at_parser_max_params_from_str>
	if (err) {
   2bc54:	4604      	mov	r4, r0
   2bc56:	b178      	cbz	r0, 2bc78 <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bc58:	2301      	movs	r3, #1
   2bc5a:	f04f 0000 	mov.w	r0, #0
   2bc5e:	4a48      	ldr	r2, [pc, #288]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bc60:	f363 0007 	bfi	r0, r3, #0, #8
   2bc64:	4b47      	ldr	r3, [pc, #284]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bc66:	494a      	ldr	r1, [pc, #296]	; (2bd90 <lte_lc_system_mode_get+0x1d4>)
   2bc68:	1a9b      	subs	r3, r3, r2
   2bc6a:	4622      	mov	r2, r4
   2bc6c:	08db      	lsrs	r3, r3, #3
   2bc6e:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bc72:	f016 f9e4 	bl	4203e <log_string_sync>
			goto clean_exit;
   2bc76:	e017      	b.n	2bca8 <lte_lc_system_mode_get+0xec>
	err = at_params_string_get(&resp_list,
   2bc78:	4601      	mov	r1, r0
   2bc7a:	466b      	mov	r3, sp
   2bc7c:	aa04      	add	r2, sp, #16
   2bc7e:	a802      	add	r0, sp, #8
   2bc80:	f018 fe86 	bl	44990 <at_params_string_get>
	if (err) {
   2bc84:	4606      	mov	r6, r0
   2bc86:	b198      	cbz	r0, 2bcb0 <lte_lc_system_mode_get+0xf4>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bc88:	2301      	movs	r3, #1
   2bc8a:	f04f 0000 	mov.w	r0, #0
   2bc8e:	4a3c      	ldr	r2, [pc, #240]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bc90:	f363 0007 	bfi	r0, r3, #0, #8
   2bc94:	4b3b      	ldr	r3, [pc, #236]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bc96:	493f      	ldr	r1, [pc, #252]	; (2bd94 <lte_lc_system_mode_get+0x1d8>)
   2bc98:	1a9b      	subs	r3, r3, r2
   2bc9a:	08db      	lsrs	r3, r3, #3
   2bc9c:	f363 108f 	bfi	r0, r3, #6, #10
   2bca0:	4632      	mov	r2, r6
   2bca2:	f016 f9cc 	bl	4203e <log_string_sync>
		goto clean_exit;
   2bca6:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   2bca8:	a802      	add	r0, sp, #8
   2bcaa:	f018 fdac 	bl	44806 <at_params_list_free>
	return err;
   2bcae:	e7b1      	b.n	2bc14 <lte_lc_system_mode_get+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bcb0:	4a39      	ldr	r2, [pc, #228]	; (2bd98 <lte_lc_system_mode_get+0x1dc>)
   2bcb2:	9900      	ldr	r1, [sp, #0]
   2bcb4:	a804      	add	r0, sp, #16
   2bcb6:	f018 fea9 	bl	44a0c <response_is_valid>
   2bcba:	b970      	cbnz	r0, 2bcda <lte_lc_system_mode_get+0x11e>
		LOG_ERR("Invalid XSYSTEMMODE response");
   2bcbc:	2301      	movs	r3, #1
   2bcbe:	4a30      	ldr	r2, [pc, #192]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bcc0:	f363 0007 	bfi	r0, r3, #0, #8
   2bcc4:	4b2f      	ldr	r3, [pc, #188]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bcc6:	4935      	ldr	r1, [pc, #212]	; (2bd9c <lte_lc_system_mode_get+0x1e0>)
   2bcc8:	1a9b      	subs	r3, r3, r2
   2bcca:	08db      	lsrs	r3, r3, #3
   2bccc:	f363 108f 	bfi	r0, r3, #6, #10
   2bcd0:	f016 f9b5 	bl	4203e <log_string_sync>
		err = -EIO;
   2bcd4:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2bcd8:	e7e6      	b.n	2bca8 <lte_lc_system_mode_get+0xec>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2bcda:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bcdc:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   2bcde:	aa01      	add	r2, sp, #4
   2bce0:	4639      	mov	r1, r7
   2bce2:	a802      	add	r0, sp, #8
   2bce4:	f018 fe3d 	bl	44962 <at_params_int_get>
		if (err) {
   2bce8:	4604      	mov	r4, r0
   2bcea:	b168      	cbz	r0, 2bd08 <lte_lc_system_mode_get+0x14c>
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bcec:	2301      	movs	r3, #1
   2bcee:	f04f 0000 	mov.w	r0, #0
   2bcf2:	4a23      	ldr	r2, [pc, #140]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bcf4:	f363 0007 	bfi	r0, r3, #0, #8
   2bcf8:	4b22      	ldr	r3, [pc, #136]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bcfa:	4929      	ldr	r1, [pc, #164]	; (2bda0 <lte_lc_system_mode_get+0x1e4>)
   2bcfc:	1a9b      	subs	r3, r3, r2
   2bcfe:	08db      	lsrs	r3, r3, #3
   2bd00:	f363 108f 	bfi	r0, r3, #6, #10
   2bd04:	4622      	mov	r2, r4
   2bd06:	e7b4      	b.n	2bc72 <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bd08:	9b01      	ldr	r3, [sp, #4]
   2bd0a:	b113      	cbz	r3, 2bd12 <lte_lc_system_mode_get+0x156>
   2bd0c:	fa08 f307 	lsl.w	r3, r8, r7
   2bd10:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2bd12:	3701      	adds	r7, #1
   2bd14:	2f05      	cmp	r7, #5
   2bd16:	d1e2      	bne.n	2bcde <lte_lc_system_mode_get+0x122>
	switch (bitmask) {
   2bd18:	2e0c      	cmp	r6, #12
   2bd1a:	d81b      	bhi.n	2bd54 <lte_lc_system_mode_get+0x198>
   2bd1c:	e8df f006 	tbb	[pc, r6]
   2bd20:	1a101a07 	.word	0x1a101a07
   2bd24:	1a1a1a12 	.word	0x1a1a1a12
   2bd28:	1a161a14 	.word	0x1a161a14
   2bd2c:	18          	.byte	0x18
   2bd2d:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2bd2e:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bd30:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   2bd32:	4b1c      	ldr	r3, [pc, #112]	; (2bda4 <lte_lc_system_mode_get+0x1e8>)
   2bd34:	782a      	ldrb	r2, [r5, #0]
   2bd36:	7819      	ldrb	r1, [r3, #0]
   2bd38:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   2bd3a:	bf18      	it	ne
   2bd3c:	701a      	strbne	r2, [r3, #0]
   2bd3e:	e7b3      	b.n	2bca8 <lte_lc_system_mode_get+0xec>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2bd40:	2301      	movs	r3, #1
   2bd42:	e7f5      	b.n	2bd30 <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2bd44:	2302      	movs	r3, #2
   2bd46:	e7f3      	b.n	2bd30 <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2bd48:	2303      	movs	r3, #3
   2bd4a:	e7f1      	b.n	2bd30 <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2bd4c:	2304      	movs	r3, #4
   2bd4e:	e7ef      	b.n	2bd30 <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bd50:	2305      	movs	r3, #5
   2bd52:	e7ed      	b.n	2bd30 <lte_lc_system_mode_get+0x174>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2bd54:	2301      	movs	r3, #1
   2bd56:	f04f 0000 	mov.w	r0, #0
   2bd5a:	4a09      	ldr	r2, [pc, #36]	; (2bd80 <lte_lc_system_mode_get+0x1c4>)
   2bd5c:	f363 0007 	bfi	r0, r3, #0, #8
   2bd60:	4b08      	ldr	r3, [pc, #32]	; (2bd84 <lte_lc_system_mode_get+0x1c8>)
   2bd62:	4911      	ldr	r1, [pc, #68]	; (2bda8 <lte_lc_system_mode_get+0x1ec>)
   2bd64:	1a9b      	subs	r3, r3, r2
   2bd66:	08db      	lsrs	r3, r3, #3
   2bd68:	f363 108f 	bfi	r0, r3, #6, #10
   2bd6c:	f016 f967 	bl	4203e <log_string_sync>
		err = -EFAULT;
   2bd70:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   2bd74:	e798      	b.n	2bca8 <lte_lc_system_mode_get+0xec>
		return -EINVAL;
   2bd76:	f06f 0415 	mvn.w	r4, #21
   2bd7a:	e74b      	b.n	2bc14 <lte_lc_system_mode_get+0x58>
   2bd7c:	0004b04f 	.word	0x0004b04f
   2bd80:	00046878 	.word	0x00046878
   2bd84:	00046908 	.word	0x00046908
   2bd88:	0004b05f 	.word	0x0004b05f
   2bd8c:	0004b079 	.word	0x0004b079
   2bd90:	0004b09e 	.word	0x0004b09e
   2bd94:	0004af4e 	.word	0x0004af4e
   2bd98:	0004b0c5 	.word	0x0004b0c5
   2bd9c:	0004b0d2 	.word	0x0004b0d2
   2bda0:	0004b0ef 	.word	0x0004b0ef
   2bda4:	2002c9dc 	.word	0x2002c9dc
   2bda8:	0004b117 	.word	0x0004b117

0002bdac <w_lte_lc_init>:
{
   2bdac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (is_initialized) {
   2bdae:	4f49      	ldr	r7, [pc, #292]	; (2bed4 <w_lte_lc_init+0x128>)
{
   2bdb0:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   2bdb2:	783b      	ldrb	r3, [r7, #0]
   2bdb4:	2b00      	cmp	r3, #0
   2bdb6:	f040 8087 	bne.w	2bec8 <w_lte_lc_init+0x11c>
	err = lte_lc_system_mode_get(&sys_mode_current);
   2bdba:	4d47      	ldr	r5, [pc, #284]	; (2bed8 <w_lte_lc_init+0x12c>)
   2bdbc:	4628      	mov	r0, r5
   2bdbe:	f7ff fefd 	bl	2bbbc <lte_lc_system_mode_get>
	if (err) {
   2bdc2:	4604      	mov	r4, r0
   2bdc4:	b188      	cbz	r0, 2bdea <w_lte_lc_init+0x3e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   2bdc6:	2301      	movs	r3, #1
   2bdc8:	f04f 0000 	mov.w	r0, #0
   2bdcc:	4a43      	ldr	r2, [pc, #268]	; (2bedc <w_lte_lc_init+0x130>)
   2bdce:	f363 0007 	bfi	r0, r3, #0, #8
   2bdd2:	4b43      	ldr	r3, [pc, #268]	; (2bee0 <w_lte_lc_init+0x134>)
   2bdd4:	4943      	ldr	r1, [pc, #268]	; (2bee4 <w_lte_lc_init+0x138>)
   2bdd6:	1a9b      	subs	r3, r3, r2
   2bdd8:	4622      	mov	r2, r4
   2bdda:	08db      	lsrs	r3, r3, #3
   2bddc:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bde0:	f016 f92d 	bl	4203e <log_string_sync>
}
   2bde4:	4620      	mov	r0, r4
   2bde6:	b00f      	add	sp, #60	; 0x3c
   2bde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_notif_register_handler(NULL, at_handler);
   2bdea:	493f      	ldr	r1, [pc, #252]	; (2bee8 <w_lte_lc_init+0x13c>)
   2bdec:	f7fe ff98 	bl	2ad20 <at_notif_register_handler>
	if (err) {
   2bdf0:	4604      	mov	r4, r0
   2bdf2:	b168      	cbz	r0, 2be10 <w_lte_lc_init+0x64>
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bdf4:	2301      	movs	r3, #1
   2bdf6:	f04f 0000 	mov.w	r0, #0
   2bdfa:	4a38      	ldr	r2, [pc, #224]	; (2bedc <w_lte_lc_init+0x130>)
   2bdfc:	f363 0007 	bfi	r0, r3, #0, #8
   2be00:	4b37      	ldr	r3, [pc, #220]	; (2bee0 <w_lte_lc_init+0x134>)
   2be02:	493a      	ldr	r1, [pc, #232]	; (2beec <w_lte_lc_init+0x140>)
   2be04:	1a9b      	subs	r3, r3, r2
   2be06:	08db      	lsrs	r3, r3, #3
   2be08:	f363 108f 	bfi	r0, r3, #6, #10
   2be0c:	4622      	mov	r2, r4
   2be0e:	e7e7      	b.n	2bde0 <w_lte_lc_init+0x34>
	if (sys_mode_current != sys_mode_target) {
   2be10:	4b37      	ldr	r3, [pc, #220]	; (2bef0 <w_lte_lc_init+0x144>)
   2be12:	7818      	ldrb	r0, [r3, #0]
   2be14:	782b      	ldrb	r3, [r5, #0]
   2be16:	4283      	cmp	r3, r0
   2be18:	d011      	beq.n	2be3e <w_lte_lc_init+0x92>
		err = lte_lc_system_mode_set(sys_mode_target);
   2be1a:	f7ff fdfb 	bl	2ba14 <lte_lc_system_mode_set>
		if (err) {
   2be1e:	4604      	mov	r4, r0
   2be20:	b168      	cbz	r0, 2be3e <w_lte_lc_init+0x92>
			LOG_ERR("Could not set system mode, error: %d", err);
   2be22:	2301      	movs	r3, #1
   2be24:	f04f 0000 	mov.w	r0, #0
   2be28:	4a2c      	ldr	r2, [pc, #176]	; (2bedc <w_lte_lc_init+0x130>)
   2be2a:	f363 0007 	bfi	r0, r3, #0, #8
   2be2e:	4b2c      	ldr	r3, [pc, #176]	; (2bee0 <w_lte_lc_init+0x134>)
   2be30:	4930      	ldr	r1, [pc, #192]	; (2bef4 <w_lte_lc_init+0x148>)
   2be32:	1a9b      	subs	r3, r3, r2
   2be34:	08db      	lsrs	r3, r3, #3
   2be36:	f363 108f 	bfi	r0, r3, #6, #10
   2be3a:	4622      	mov	r2, r4
   2be3c:	e7d0      	b.n	2bde0 <w_lte_lc_init+0x34>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2be3e:	2300      	movs	r3, #0
   2be40:	482d      	ldr	r0, [pc, #180]	; (2bef8 <w_lte_lc_init+0x14c>)
   2be42:	461a      	mov	r2, r3
   2be44:	4619      	mov	r1, r3
   2be46:	f7fe fe3b 	bl	2aac0 <at_cmd_write>
   2be4a:	4604      	mov	r4, r0
   2be4c:	2800      	cmp	r0, #0
   2be4e:	d13e      	bne.n	2bece <w_lte_lc_init+0x122>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   2be50:	4603      	mov	r3, r0
   2be52:	4602      	mov	r2, r0
   2be54:	4601      	mov	r1, r0
   2be56:	4829      	ldr	r0, [pc, #164]	; (2befc <w_lte_lc_init+0x150>)
   2be58:	f7fe fe32 	bl	2aac0 <at_cmd_write>
	if (err) {
   2be5c:	4603      	mov	r3, r0
   2be5e:	b380      	cbz	r0, 2bec2 <w_lte_lc_init+0x116>
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   2be60:	2202      	movs	r2, #2
   2be62:	f04f 0000 	mov.w	r0, #0
   2be66:	4d1e      	ldr	r5, [pc, #120]	; (2bee0 <w_lte_lc_init+0x134>)
   2be68:	f362 0007 	bfi	r0, r2, #0, #8
   2be6c:	4a1b      	ldr	r2, [pc, #108]	; (2bedc <w_lte_lc_init+0x130>)
   2be6e:	4924      	ldr	r1, [pc, #144]	; (2bf00 <w_lte_lc_init+0x154>)
   2be70:	1aad      	subs	r5, r5, r2
   2be72:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2be76:	f365 108f 	bfi	r0, r5, #6, #10
   2be7a:	4a20      	ldr	r2, [pc, #128]	; (2befc <w_lte_lc_init+0x150>)
   2be7c:	f016 f8df 	bl	4203e <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   2be80:	2302      	movs	r3, #2
   2be82:	f04f 0000 	mov.w	r0, #0
   2be86:	f363 0007 	bfi	r0, r3, #0, #8
   2be8a:	f365 108f 	bfi	r0, r5, #6, #10
   2be8e:	4a1b      	ldr	r2, [pc, #108]	; (2befc <w_lte_lc_init+0x150>)
   2be90:	491c      	ldr	r1, [pc, #112]	; (2bf04 <w_lte_lc_init+0x158>)
   2be92:	f016 f8d4 	bl	4203e <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   2be96:	4623      	mov	r3, r4
   2be98:	2232      	movs	r2, #50	; 0x32
   2be9a:	a901      	add	r1, sp, #4
   2be9c:	481a      	ldr	r0, [pc, #104]	; (2bf08 <w_lte_lc_init+0x15c>)
   2be9e:	f7fe fe0f 	bl	2aac0 <at_cmd_write>
		if (err == 0) {
   2bea2:	b970      	cbnz	r0, 2bec2 <w_lte_lc_init+0x116>
			LOG_WRN("Current modem firmware version: %s",
   2bea4:	2302      	movs	r3, #2
   2bea6:	f04f 0600 	mov.w	r6, #0
   2beaa:	a801      	add	r0, sp, #4
   2beac:	f363 0607 	bfi	r6, r3, #0, #8
   2beb0:	f016 f8d8 	bl	42064 <log_strdup>
   2beb4:	f365 168f 	bfi	r6, r5, #6, #10
   2beb8:	4602      	mov	r2, r0
   2beba:	4914      	ldr	r1, [pc, #80]	; (2bf0c <w_lte_lc_init+0x160>)
   2bebc:	4630      	mov	r0, r6
   2bebe:	f016 f8be 	bl	4203e <log_string_sync>
	is_initialized = true;
   2bec2:	2301      	movs	r3, #1
   2bec4:	703b      	strb	r3, [r7, #0]
	return 0;
   2bec6:	e78d      	b.n	2bde4 <w_lte_lc_init+0x38>
		return -EALREADY;
   2bec8:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2becc:	e78a      	b.n	2bde4 <w_lte_lc_init+0x38>
		return -EIO;
   2bece:	f06f 0404 	mvn.w	r4, #4
   2bed2:	e787      	b.n	2bde4 <w_lte_lc_init+0x38>
   2bed4:	2002c9da 	.word	0x2002c9da
   2bed8:	2002c9dc 	.word	0x2002c9dc
   2bedc:	00046878 	.word	0x00046878
   2bee0:	00046908 	.word	0x00046908
   2bee4:	0004b2f7 	.word	0x0004b2f7
   2bee8:	0001db51 	.word	0x0001db51
   2beec:	0004b324 	.word	0x0004b324
   2bef0:	2002096c 	.word	0x2002096c
   2bef4:	0004b349 	.word	0x0004b349
   2bef8:	0004aeec 	.word	0x0004aeec
   2befc:	0004aef7 	.word	0x0004aef7
   2bf00:	0004b36e 	.word	0x0004b36e
   2bf04:	0004b3a0 	.word	0x0004b3a0
   2bf08:	0004b3cb 	.word	0x0004b3cb
   2bf0c:	0004b3d3 	.word	0x0004b3d3

0002bf10 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   2bf10:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   2bf12:	2400      	movs	r4, #0
{
   2bf14:	b08d      	sub	sp, #52	; 0x34
   2bf16:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2bf18:	2214      	movs	r2, #20
   2bf1a:	4621      	mov	r1, r4
   2bf1c:	a807      	add	r0, sp, #28
	struct at_param_list resp_list = {0};
   2bf1e:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2bf22:	f019 f9a1 	bl	45268 <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2bf26:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   2bf28:	9403      	str	r4, [sp, #12]
   2bf2a:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   2bf2e:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   2bf30:	2d00      	cmp	r5, #0
   2bf32:	f000 808d 	beq.w	2c050 <lte_lc_func_mode_get+0x140>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   2bf36:	4623      	mov	r3, r4
   2bf38:	2214      	movs	r2, #20
   2bf3a:	a907      	add	r1, sp, #28
   2bf3c:	4846      	ldr	r0, [pc, #280]	; (2c058 <lte_lc_func_mode_get+0x148>)
   2bf3e:	f7fe fdbf 	bl	2aac0 <at_cmd_write>
	if (err) {
   2bf42:	4604      	mov	r4, r0
   2bf44:	b180      	cbz	r0, 2bf68 <lte_lc_func_mode_get+0x58>
		LOG_ERR("Could not send AT command");
   2bf46:	2301      	movs	r3, #1
   2bf48:	f04f 0000 	mov.w	r0, #0
   2bf4c:	4a43      	ldr	r2, [pc, #268]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2bf4e:	f363 0007 	bfi	r0, r3, #0, #8
   2bf52:	4b43      	ldr	r3, [pc, #268]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2bf54:	4943      	ldr	r1, [pc, #268]	; (2c064 <lte_lc_func_mode_get+0x154>)
   2bf56:	1a9b      	subs	r3, r3, r2
   2bf58:	08db      	lsrs	r3, r3, #3
   2bf5a:	f363 108f 	bfi	r0, r3, #6, #10
   2bf5e:	f016 f86e 	bl	4203e <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bf62:	4620      	mov	r0, r4
   2bf64:	b00d      	add	sp, #52	; 0x34
   2bf66:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   2bf68:	2102      	movs	r1, #2
   2bf6a:	a805      	add	r0, sp, #20
   2bf6c:	f018 fc38 	bl	447e0 <at_params_list_init>
	if (err) {
   2bf70:	4604      	mov	r4, r0
   2bf72:	b178      	cbz	r0, 2bf94 <lte_lc_func_mode_get+0x84>
		LOG_ERR("Could init AT params list, error: %d", err);
   2bf74:	2301      	movs	r3, #1
   2bf76:	f04f 0000 	mov.w	r0, #0
   2bf7a:	4a38      	ldr	r2, [pc, #224]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2bf7c:	f363 0007 	bfi	r0, r3, #0, #8
   2bf80:	4b37      	ldr	r3, [pc, #220]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2bf82:	4939      	ldr	r1, [pc, #228]	; (2c068 <lte_lc_func_mode_get+0x158>)
   2bf84:	1a9b      	subs	r3, r3, r2
   2bf86:	08db      	lsrs	r3, r3, #3
   2bf88:	f363 108f 	bfi	r0, r3, #6, #10
   2bf8c:	4622      	mov	r2, r4
   2bf8e:	f016 f856 	bl	4203e <log_string_sync>
		return err;
   2bf92:	e7e6      	b.n	2bf62 <lte_lc_func_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2bf94:	4601      	mov	r1, r0
   2bf96:	2302      	movs	r3, #2
   2bf98:	aa05      	add	r2, sp, #20
   2bf9a:	a807      	add	r0, sp, #28
   2bf9c:	f7ff fad2 	bl	2b544 <at_parser_max_params_from_str>
	if (err) {
   2bfa0:	4604      	mov	r4, r0
   2bfa2:	b190      	cbz	r0, 2bfca <lte_lc_func_mode_get+0xba>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bfa4:	2301      	movs	r3, #1
   2bfa6:	f04f 0000 	mov.w	r0, #0
   2bfaa:	4a2c      	ldr	r2, [pc, #176]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2bfac:	f363 0007 	bfi	r0, r3, #0, #8
   2bfb0:	4b2b      	ldr	r3, [pc, #172]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2bfb2:	492e      	ldr	r1, [pc, #184]	; (2c06c <lte_lc_func_mode_get+0x15c>)
   2bfb4:	1a9b      	subs	r3, r3, r2
   2bfb6:	4622      	mov	r2, r4
   2bfb8:	08db      	lsrs	r3, r3, #3
   2bfba:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bfbe:	f016 f83e 	bl	4203e <log_string_sync>
	at_params_list_free(&resp_list);
   2bfc2:	a805      	add	r0, sp, #20
   2bfc4:	f018 fc1f 	bl	44806 <at_params_list_free>
	return err;
   2bfc8:	e7cb      	b.n	2bf62 <lte_lc_func_mode_get+0x52>
	err = at_params_string_get(&resp_list,
   2bfca:	4601      	mov	r1, r0
   2bfcc:	ab02      	add	r3, sp, #8
   2bfce:	aa03      	add	r2, sp, #12
   2bfd0:	a805      	add	r0, sp, #20
   2bfd2:	f018 fcdd 	bl	44990 <at_params_string_get>
	if (err) {
   2bfd6:	4604      	mov	r4, r0
   2bfd8:	b168      	cbz	r0, 2bff6 <lte_lc_func_mode_get+0xe6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bfda:	2301      	movs	r3, #1
   2bfdc:	f04f 0000 	mov.w	r0, #0
   2bfe0:	4a1e      	ldr	r2, [pc, #120]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2bfe2:	f363 0007 	bfi	r0, r3, #0, #8
   2bfe6:	4b1e      	ldr	r3, [pc, #120]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2bfe8:	4921      	ldr	r1, [pc, #132]	; (2c070 <lte_lc_func_mode_get+0x160>)
   2bfea:	1a9b      	subs	r3, r3, r2
   2bfec:	08db      	lsrs	r3, r3, #3
   2bfee:	f363 108f 	bfi	r0, r3, #6, #10
   2bff2:	4622      	mov	r2, r4
   2bff4:	e7e3      	b.n	2bfbe <lte_lc_func_mode_get+0xae>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bff6:	4a1f      	ldr	r2, [pc, #124]	; (2c074 <lte_lc_func_mode_get+0x164>)
   2bff8:	9902      	ldr	r1, [sp, #8]
   2bffa:	a803      	add	r0, sp, #12
   2bffc:	f018 fd06 	bl	44a0c <response_is_valid>
   2c000:	b970      	cbnz	r0, 2c020 <lte_lc_func_mode_get+0x110>
		LOG_ERR("Invalid CFUN response");
   2c002:	2301      	movs	r3, #1
   2c004:	4a15      	ldr	r2, [pc, #84]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2c006:	f363 0007 	bfi	r0, r3, #0, #8
   2c00a:	4b15      	ldr	r3, [pc, #84]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2c00c:	491a      	ldr	r1, [pc, #104]	; (2c078 <lte_lc_func_mode_get+0x168>)
   2c00e:	1a9b      	subs	r3, r3, r2
   2c010:	08db      	lsrs	r3, r3, #3
   2c012:	f363 108f 	bfi	r0, r3, #6, #10
   2c016:	f016 f812 	bl	4203e <log_string_sync>
		err = -EIO;
   2c01a:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2c01e:	e7d0      	b.n	2bfc2 <lte_lc_func_mode_get+0xb2>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   2c020:	aa01      	add	r2, sp, #4
   2c022:	2101      	movs	r1, #1
   2c024:	a805      	add	r0, sp, #20
   2c026:	f018 fc9c 	bl	44962 <at_params_int_get>
	if (err) {
   2c02a:	4604      	mov	r4, r0
   2c02c:	b168      	cbz	r0, 2c04a <lte_lc_func_mode_get+0x13a>
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   2c02e:	2301      	movs	r3, #1
   2c030:	f04f 0000 	mov.w	r0, #0
   2c034:	4a09      	ldr	r2, [pc, #36]	; (2c05c <lte_lc_func_mode_get+0x14c>)
   2c036:	f363 0007 	bfi	r0, r3, #0, #8
   2c03a:	4b09      	ldr	r3, [pc, #36]	; (2c060 <lte_lc_func_mode_get+0x150>)
   2c03c:	490f      	ldr	r1, [pc, #60]	; (2c07c <lte_lc_func_mode_get+0x16c>)
   2c03e:	1a9b      	subs	r3, r3, r2
   2c040:	08db      	lsrs	r3, r3, #3
   2c042:	f363 108f 	bfi	r0, r3, #6, #10
   2c046:	4622      	mov	r2, r4
   2c048:	e7b9      	b.n	2bfbe <lte_lc_func_mode_get+0xae>
	*mode = resp_mode;
   2c04a:	9b01      	ldr	r3, [sp, #4]
   2c04c:	702b      	strb	r3, [r5, #0]
   2c04e:	e7b8      	b.n	2bfc2 <lte_lc_func_mode_get+0xb2>
		return -EINVAL;
   2c050:	f06f 0415 	mvn.w	r4, #21
   2c054:	e785      	b.n	2bf62 <lte_lc_func_mode_get+0x52>
   2c056:	bf00      	nop
   2c058:	0004af02 	.word	0x0004af02
   2c05c:	00046878 	.word	0x00046878
   2c060:	00046908 	.word	0x00046908
   2c064:	0004b05f 	.word	0x0004b05f
   2c068:	0004b079 	.word	0x0004b079
   2c06c:	0004b09e 	.word	0x0004b09e
   2c070:	0004af4e 	.word	0x0004af4e
   2c074:	0004af0b 	.word	0x0004af0b
   2c078:	0004af11 	.word	0x0004af11
   2c07c:	0004b0ef 	.word	0x0004b0ef

0002c080 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2c080:	b510      	push	{r4, lr}
   2c082:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2c084:	4a09      	ldr	r2, [pc, #36]	; (2c0ac <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   2c086:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2c088:	7823      	ldrb	r3, [r4, #0]
   2c08a:	2100      	movs	r1, #0
   2c08c:	f7ff fa5a 	bl	2b544 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2c090:	f110 0f0b 	cmn.w	r0, #11
   2c094:	d000      	beq.n	2c098 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2c096:	b940      	cbnz	r0, 2c0aa <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2c098:	4804      	ldr	r0, [pc, #16]	; (2c0ac <modem_info_parse.isra.0+0x2c>)
   2c09a:	f018 fca0 	bl	449de <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2c09e:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   2c0a0:	4298      	cmp	r0, r3
   2c0a2:	bf94      	ite	ls
   2c0a4:	2000      	movls	r0, #0
   2c0a6:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2c0aa:	bd10      	pop	{r4, pc}
   2c0ac:	20024958 	.word	0x20024958

0002c0b0 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   2c0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2c0b2:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	uint16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   2c0b4:	4608      	mov	r0, r1
   2c0b6:	f7f1 f8d5 	bl	1d264 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   2c0ba:	491f      	ldr	r1, [pc, #124]	; (2c138 <modem_info_rsrp_subscribe_handler+0x88>)
   2c0bc:	4620      	mov	r0, r4
   2c0be:	f019 fadd 	bl	4567c <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   2c0c2:	b1d0      	cbz	r0, 2c0fa <modem_info_rsrp_subscribe_handler+0x4a>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   2c0c4:	4b1d      	ldr	r3, [pc, #116]	; (2c13c <modem_info_rsrp_subscribe_handler+0x8c>)
   2c0c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2c0ca:	ab04      	add	r3, sp, #16
   2c0cc:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   2c0d0:	4621      	mov	r1, r4
   2c0d2:	f10d 000d 	add.w	r0, sp, #13
   2c0d6:	f7ff ffd3 	bl	2c080 <modem_info_parse.isra.0>
	if (err != 0) {
   2c0da:	4602      	mov	r2, r0
   2c0dc:	b178      	cbz	r0, 2c0fe <modem_info_rsrp_subscribe_handler+0x4e>
		LOG_ERR("modem_info_parse failed to parse "
   2c0de:	2301      	movs	r3, #1
   2c0e0:	f04f 0000 	mov.w	r0, #0
   2c0e4:	4916      	ldr	r1, [pc, #88]	; (2c140 <modem_info_rsrp_subscribe_handler+0x90>)
   2c0e6:	f363 0007 	bfi	r0, r3, #0, #8
   2c0ea:	4b16      	ldr	r3, [pc, #88]	; (2c144 <modem_info_rsrp_subscribe_handler+0x94>)
   2c0ec:	1a5b      	subs	r3, r3, r1
   2c0ee:	08db      	lsrs	r3, r3, #3
   2c0f0:	4915      	ldr	r1, [pc, #84]	; (2c148 <modem_info_rsrp_subscribe_handler+0x98>)
   2c0f2:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2c0f6:	f015 ffa2 	bl	4203e <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2c0fa:	b004      	add	sp, #16
   2c0fc:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2c0fe:	f10d 0202 	add.w	r2, sp, #2
   2c102:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2c106:	4811      	ldr	r0, [pc, #68]	; (2c14c <modem_info_rsrp_subscribe_handler+0x9c>)
   2c108:	f018 fc15 	bl	44936 <at_params_short_get>
	if (err != 0) {
   2c10c:	4602      	mov	r2, r0
   2c10e:	b160      	cbz	r0, 2c12a <modem_info_rsrp_subscribe_handler+0x7a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2c110:	2301      	movs	r3, #1
   2c112:	f04f 0000 	mov.w	r0, #0
   2c116:	490a      	ldr	r1, [pc, #40]	; (2c140 <modem_info_rsrp_subscribe_handler+0x90>)
   2c118:	f363 0007 	bfi	r0, r3, #0, #8
   2c11c:	4b09      	ldr	r3, [pc, #36]	; (2c144 <modem_info_rsrp_subscribe_handler+0x94>)
   2c11e:	1a5b      	subs	r3, r3, r1
   2c120:	08db      	lsrs	r3, r3, #3
   2c122:	f363 108f 	bfi	r0, r3, #6, #10
   2c126:	490a      	ldr	r1, [pc, #40]	; (2c150 <modem_info_rsrp_subscribe_handler+0xa0>)
   2c128:	e7e5      	b.n	2c0f6 <modem_info_rsrp_subscribe_handler+0x46>
	modem_info_rsrp_cb(param_value);
   2c12a:	4b0a      	ldr	r3, [pc, #40]	; (2c154 <modem_info_rsrp_subscribe_handler+0xa4>)
   2c12c:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2c130:	681b      	ldr	r3, [r3, #0]
   2c132:	4798      	blx	r3
   2c134:	e7e1      	b.n	2c0fa <modem_info_rsrp_subscribe_handler+0x4a>
   2c136:	bf00      	nop
   2c138:	0004b41d 	.word	0x0004b41d
   2c13c:	00046a14 	.word	0x00046a14
   2c140:	00046878 	.word	0x00046878
   2c144:	00046910 	.word	0x00046910
   2c148:	0004b423 	.word	0x0004b423
   2c14c:	20024958 	.word	0x20024958
   2c150:	0004b45a 	.word	0x0004b45a
   2c154:	20024960 	.word	0x20024960

0002c158 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   2c158:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   2c15a:	bf9d      	ittte	ls
   2c15c:	4b02      	ldrls	r3, [pc, #8]	; (2c168 <modem_info_type_get+0x10>)
   2c15e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2c162:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   2c164:	20ea      	movhi	r0, #234	; 0xea
}
   2c166:	4770      	bx	lr
   2c168:	00047080 	.word	0x00047080

0002c16c <modem_info_name_get>:
{
   2c16c:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2c16e:	460d      	mov	r5, r1
   2c170:	b919      	cbnz	r1, 2c17a <modem_info_name_get+0xe>
		return -EINVAL;
   2c172:	f06f 0415 	mvn.w	r4, #21
}
   2c176:	4620      	mov	r0, r4
   2c178:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   2c17a:	4b07      	ldr	r3, [pc, #28]	; (2c198 <modem_info_name_get+0x2c>)
   2c17c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2c180:	6870      	ldr	r0, [r6, #4]
   2c182:	f7f1 f86f 	bl	1d264 <strlen>
	if (len <= 0) {
   2c186:	1e04      	subs	r4, r0, #0
   2c188:	ddf3      	ble.n	2c172 <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c18a:	4622      	mov	r2, r4
   2c18c:	6871      	ldr	r1, [r6, #4]
   2c18e:	4628      	mov	r0, r5
   2c190:	f019 f84a 	bl	45228 <memcpy>
   2c194:	e7ef      	b.n	2c176 <modem_info_name_get+0xa>
   2c196:	bf00      	nop
   2c198:	00047080 	.word	0x00047080

0002c19c <modem_info_short_get>:
{
   2c19c:	b530      	push	{r4, r5, lr}
   2c19e:	460d      	mov	r5, r1
   2c1a0:	b0a1      	sub	sp, #132	; 0x84
   2c1a2:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c1a4:	2280      	movs	r2, #128	; 0x80
   2c1a6:	2100      	movs	r1, #0
   2c1a8:	4668      	mov	r0, sp
   2c1aa:	f019 f85d 	bl	45268 <memset>
	if (buf == NULL) {
   2c1ae:	b1e5      	cbz	r5, 2c1ea <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c1b0:	4b11      	ldr	r3, [pc, #68]	; (2c1f8 <modem_info_short_get+0x5c>)
   2c1b2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   2c1b6:	7aa3      	ldrb	r3, [r4, #10]
   2c1b8:	2b03      	cmp	r3, #3
   2c1ba:	d016      	beq.n	2c1ea <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   2c1bc:	2300      	movs	r3, #0
   2c1be:	2280      	movs	r2, #128	; 0x80
   2c1c0:	4669      	mov	r1, sp
   2c1c2:	6820      	ldr	r0, [r4, #0]
   2c1c4:	f7fe fc7c 	bl	2aac0 <at_cmd_write>
	if (err != 0) {
   2c1c8:	b990      	cbnz	r0, 2c1f0 <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2c1ca:	4669      	mov	r1, sp
   2c1cc:	f104 0009 	add.w	r0, r4, #9
   2c1d0:	f7ff ff56 	bl	2c080 <modem_info_parse.isra.0>
	if (err) {
   2c1d4:	b938      	cbnz	r0, 2c1e6 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   2c1d6:	462a      	mov	r2, r5
   2c1d8:	7a21      	ldrb	r1, [r4, #8]
   2c1da:	4808      	ldr	r0, [pc, #32]	; (2c1fc <modem_info_short_get+0x60>)
   2c1dc:	f018 fbab 	bl	44936 <at_params_short_get>
	return sizeof(uint16_t);
   2c1e0:	2800      	cmp	r0, #0
   2c1e2:	bf08      	it	eq
   2c1e4:	2002      	moveq	r0, #2
}
   2c1e6:	b021      	add	sp, #132	; 0x84
   2c1e8:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c1ea:	f06f 0015 	mvn.w	r0, #21
   2c1ee:	e7fa      	b.n	2c1e6 <modem_info_short_get+0x4a>
		return -EIO;
   2c1f0:	f06f 0004 	mvn.w	r0, #4
   2c1f4:	e7f7      	b.n	2c1e6 <modem_info_short_get+0x4a>
   2c1f6:	bf00      	nop
   2c1f8:	00047080 	.word	0x00047080
   2c1fc:	20024958 	.word	0x20024958

0002c200 <modem_info_string_get>:
{
   2c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c204:	460e      	mov	r6, r1
	size_t len = 0;
   2c206:	2500      	movs	r5, #0
{
   2c208:	b0a5      	sub	sp, #148	; 0x94
   2c20a:	4680      	mov	r8, r0
   2c20c:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c20e:	2100      	movs	r1, #0
   2c210:	2280      	movs	r2, #128	; 0x80
   2c212:	a804      	add	r0, sp, #16
   2c214:	f019 f828 	bl	45268 <memset>
	size_t len = 0;
   2c218:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   2c21a:	2e00      	cmp	r6, #0
   2c21c:	f000 80e7 	beq.w	2c3ee <modem_info_string_get+0x1ee>
   2c220:	f1b9 0f00 	cmp.w	r9, #0
   2c224:	f000 80e3 	beq.w	2c3ee <modem_info_string_get+0x1ee>
	err = at_cmd_write(modem_data[info]->cmd,
   2c228:	4b75      	ldr	r3, [pc, #468]	; (2c400 <modem_info_string_get+0x200>)
   2c22a:	2280      	movs	r2, #128	; 0x80
   2c22c:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2c230:	a904      	add	r1, sp, #16
   2c232:	462b      	mov	r3, r5
   2c234:	f8da 0000 	ldr.w	r0, [sl]
   2c238:	f7fe fc42 	bl	2aac0 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   2c23c:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   2c240:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   2c242:	d10c      	bne.n	2c25e <modem_info_string_get+0x5e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2c244:	f10d 0119 	add.w	r1, sp, #25
   2c248:	4630      	mov	r0, r6
   2c24a:	f019 f9c2 	bl	455d2 <strcpy>
		return strlen(buf);
   2c24e:	4630      	mov	r0, r6
   2c250:	f7f1 f808 	bl	1d264 <strlen>
   2c254:	4683      	mov	fp, r0
}
   2c256:	4658      	mov	r0, fp
   2c258:	b025      	add	sp, #148	; 0x94
   2c25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c25e:	f1b8 0f09 	cmp.w	r8, #9
   2c262:	d039      	beq.n	2c2d8 <modem_info_string_get+0xd8>
	if (err != 0) {
   2c264:	2c00      	cmp	r4, #0
   2c266:	f040 80c5 	bne.w	2c3f4 <modem_info_string_get+0x1f4>
	size_t ip_str_len = 0;
   2c26a:	4627      	mov	r7, r4
	size_t cmd_rsp_idx = 0;
   2c26c:	9401      	str	r4, [sp, #4]
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c26e:	9b01      	ldr	r3, [sp, #4]
   2c270:	aa04      	add	r2, sp, #16
   2c272:	f1b8 0f09 	cmp.w	r8, #9
   2c276:	eb02 0b03 	add.w	fp, r2, r3
   2c27a:	d10e      	bne.n	2c29a <modem_info_string_get+0x9a>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   2c27c:	4961      	ldr	r1, [pc, #388]	; (2c404 <modem_info_string_get+0x204>)
   2c27e:	4658      	mov	r0, fp
   2c280:	f019 f9fc 	bl	4567c <strstr>
		if (ip_str_end == NULL) {
   2c284:	2800      	cmp	r0, #0
   2c286:	f000 80b8 	beq.w	2c3fa <modem_info_string_get+0x1fa>
		recv_buf[++ip_str_len] = 0;
   2c28a:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2c28c:	eba0 000b 	sub.w	r0, r0, fp
		recv_buf[++ip_str_len] = 0;
   2c290:	1c47      	adds	r7, r0, #1
   2c292:	ab24      	add	r3, sp, #144	; 0x90
   2c294:	19da      	adds	r2, r3, r7
   2c296:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   2c29a:	4659      	mov	r1, fp
   2c29c:	f10a 0009 	add.w	r0, sl, #9
   2c2a0:	f7ff feee 	bl	2c080 <modem_info_parse.isra.0>
	if (err) {
   2c2a4:	4683      	mov	fp, r0
   2c2a6:	b1d0      	cbz	r0, 2c2de <modem_info_string_get+0xde>
		LOG_ERR("Unable to parse data: %d", err);
   2c2a8:	2201      	movs	r2, #1
   2c2aa:	f04f 0000 	mov.w	r0, #0
   2c2ae:	4956      	ldr	r1, [pc, #344]	; (2c408 <modem_info_string_get+0x208>)
   2c2b0:	f362 0007 	bfi	r0, r2, #0, #8
   2c2b4:	4a55      	ldr	r2, [pc, #340]	; (2c40c <modem_info_string_get+0x20c>)
   2c2b6:	1a52      	subs	r2, r2, r1
   2c2b8:	08d2      	lsrs	r2, r2, #3
   2c2ba:	f362 108f 	bfi	r0, r2, #6, #10
   2c2be:	465a      	mov	r2, fp
   2c2c0:	4953      	ldr	r1, [pc, #332]	; (2c410 <modem_info_string_get+0x210>)
			LOG_ERR("Unable to obtain short: %d", err);
   2c2c2:	f015 febc 	bl	4203e <log_string_sync>
			return err;
   2c2c6:	e7c6      	b.n	2c256 <modem_info_string_get+0x56>
			++ip_str_end;
   2c2c8:	3001      	adds	r0, #1
			++ip_cnt;
   2c2ca:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2c2cc:	4639      	mov	r1, r7
   2c2ce:	f019 f9d5 	bl	4567c <strstr>
   2c2d2:	2800      	cmp	r0, #0
   2c2d4:	d1f8      	bne.n	2c2c8 <modem_info_string_get+0xc8>
   2c2d6:	e7c5      	b.n	2c264 <modem_info_string_get+0x64>
	char *ip_str_end = recv_buf;
   2c2d8:	a804      	add	r0, sp, #16
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2c2da:	4f4a      	ldr	r7, [pc, #296]	; (2c404 <modem_info_string_get+0x204>)
   2c2dc:	e7f6      	b.n	2c2cc <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c2de:	f89a 300a 	ldrb.w	r3, [sl, #10]
   2c2e2:	2b01      	cmp	r3, #1
   2c2e4:	d122      	bne.n	2c32c <modem_info_string_get+0x12c>
		err = at_params_short_get(&m_param_list,
   2c2e6:	f10d 020a 	add.w	r2, sp, #10
   2c2ea:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c2ee:	4849      	ldr	r0, [pc, #292]	; (2c414 <modem_info_string_get+0x214>)
   2c2f0:	f018 fb21 	bl	44936 <at_params_short_get>
		if (err) {
   2c2f4:	4683      	mov	fp, r0
   2c2f6:	b168      	cbz	r0, 2c314 <modem_info_string_get+0x114>
			LOG_ERR("Unable to obtain short: %d", err);
   2c2f8:	2201      	movs	r2, #1
   2c2fa:	f04f 0000 	mov.w	r0, #0
   2c2fe:	4942      	ldr	r1, [pc, #264]	; (2c408 <modem_info_string_get+0x208>)
   2c300:	f362 0007 	bfi	r0, r2, #0, #8
   2c304:	4a41      	ldr	r2, [pc, #260]	; (2c40c <modem_info_string_get+0x20c>)
   2c306:	1a52      	subs	r2, r2, r1
   2c308:	08d2      	lsrs	r2, r2, #3
   2c30a:	f362 108f 	bfi	r0, r2, #6, #10
   2c30e:	4942      	ldr	r1, [pc, #264]	; (2c418 <modem_info_string_get+0x218>)
   2c310:	465a      	mov	r2, fp
   2c312:	e7d6      	b.n	2c2c2 <modem_info_string_get+0xc2>
		err = snprintf(buf, buf_size, "%d", param_value);
   2c314:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2c318:	4a40      	ldr	r2, [pc, #256]	; (2c41c <modem_info_string_get+0x21c>)
   2c31a:	4649      	mov	r1, r9
   2c31c:	4630      	mov	r0, r6
   2c31e:	f013 ff8d 	bl	4023c <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   2c322:	4548      	cmp	r0, r9
   2c324:	d915      	bls.n	2c352 <modem_info_string_get+0x152>
			return -EMSGSIZE;
   2c326:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   2c32a:	e794      	b.n	2c256 <modem_info_string_get+0x56>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c32c:	2b03      	cmp	r3, #3
   2c32e:	d110      	bne.n	2c352 <modem_info_string_get+0x152>
		len = buf_size - out_buf_len;
   2c330:	eba9 0304 	sub.w	r3, r9, r4
   2c334:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   2c336:	1932      	adds	r2, r6, r4
   2c338:	ab03      	add	r3, sp, #12
   2c33a:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c33e:	4835      	ldr	r0, [pc, #212]	; (2c414 <modem_info_string_get+0x214>)
   2c340:	f018 fb26 	bl	44990 <at_params_string_get>
		if (err != 0) {
   2c344:	4683      	mov	fp, r0
   2c346:	2800      	cmp	r0, #0
   2c348:	d185      	bne.n	2c256 <modem_info_string_get+0x56>
		} else if (len >= buf_size) {
   2c34a:	9a03      	ldr	r2, [sp, #12]
   2c34c:	454a      	cmp	r2, r9
   2c34e:	d2ea      	bcs.n	2c326 <modem_info_string_get+0x126>
		buf[len] = 0;
   2c350:	54b0      	strb	r0, [r6, r2]
	if (info == MODEM_INFO_ICCID) {
   2c352:	f1b8 0f0e 	cmp.w	r8, #14
   2c356:	d122      	bne.n	2c39e <modem_info_string_get+0x19e>
   2c358:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2c35a:	4630      	mov	r0, r6
   2c35c:	f7f0 ff82 	bl	1d264 <strlen>
   2c360:	1ca3      	adds	r3, r4, #2
   2c362:	1ba4      	subs	r4, r4, r6
   2c364:	42a0      	cmp	r0, r4
   2c366:	d810      	bhi.n	2c38a <modem_info_string_get+0x18a>
		if ((len == ICCID_LEN) &&
   2c368:	9b03      	ldr	r3, [sp, #12]
   2c36a:	2b14      	cmp	r3, #20
   2c36c:	d106      	bne.n	2c37c <modem_info_string_get+0x17c>
   2c36e:	7cf3      	ldrb	r3, [r6, #19]
   2c370:	2b46      	cmp	r3, #70	; 0x46
   2c372:	d103      	bne.n	2c37c <modem_info_string_get+0x17c>
			buf[len - 1] = '\0';
   2c374:	2300      	movs	r3, #0
   2c376:	74f3      	strb	r3, [r6, #19]
			--len;
   2c378:	2313      	movs	r3, #19
   2c37a:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   2c37c:	9b03      	ldr	r3, [sp, #12]
   2c37e:	2b00      	cmp	r3, #0
   2c380:	bf14      	ite	ne
   2c382:	469b      	movne	fp, r3
   2c384:	f06f 0b85 	mvneq.w	fp, #133	; 0x85
   2c388:	e765      	b.n	2c256 <modem_info_string_get+0x56>
		current_char = buf[i];
   2c38a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   2c38e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   2c392:	461c      	mov	r4, r3
		buf[i] = next_char;
   2c394:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2c398:	f803 2c01 	strb.w	r2, [r3, #-1]
   2c39c:	e7dd      	b.n	2c35a <modem_info_string_get+0x15a>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   2c39e:	f1b8 0f09 	cmp.w	r8, #9
   2c3a2:	d1eb      	bne.n	2c37c <modem_info_string_get+0x17c>
   2c3a4:	2d00      	cmp	r5, #0
   2c3a6:	dde9      	ble.n	2c37c <modem_info_string_get+0x17c>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   2c3a8:	eb06 0b04 	add.w	fp, r6, r4
   2c3ac:	491c      	ldr	r1, [pc, #112]	; (2c420 <modem_info_string_get+0x220>)
   2c3ae:	4658      	mov	r0, fp
   2c3b0:	f019 f964 	bl	4567c <strstr>
		if (ip_v6_str) {
   2c3b4:	b128      	cbz	r0, 2c3c2 <modem_info_string_get+0x1c2>
			*ip_v6_str = 0;
   2c3b6:	2200      	movs	r2, #0
   2c3b8:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   2c3ba:	4658      	mov	r0, fp
   2c3bc:	f7f0 ff52 	bl	1d264 <strlen>
   2c3c0:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   2c3c2:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   2c3c4:	2d01      	cmp	r5, #1
		out_buf_len += len;
   2c3c6:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   2c3c8:	d00c      	beq.n	2c3e4 <modem_info_string_get+0x1e4>
			err = snprintf(&buf[out_buf_len],
   2c3ca:	eba9 0b04 	sub.w	fp, r9, r4
   2c3ce:	4a15      	ldr	r2, [pc, #84]	; (2c424 <modem_info_string_get+0x224>)
   2c3d0:	4659      	mov	r1, fp
   2c3d2:	1930      	adds	r0, r6, r4
   2c3d4:	f013 ff32 	bl	4023c <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   2c3d8:	f1bb 0f01 	cmp.w	fp, #1
   2c3dc:	d9a3      	bls.n	2c326 <modem_info_string_get+0x126>
			cmd_rsp_idx = ip_str_len + 1;
   2c3de:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   2c3e0:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   2c3e2:	9301      	str	r3, [sp, #4]
		if (--ip_cnt) {
   2c3e4:	3d01      	subs	r5, #1
   2c3e6:	f47f af42 	bne.w	2c26e <modem_info_string_get+0x6e>
			len = out_buf_len;
   2c3ea:	9403      	str	r4, [sp, #12]
   2c3ec:	e7c6      	b.n	2c37c <modem_info_string_get+0x17c>
		return -EINVAL;
   2c3ee:	f06f 0b15 	mvn.w	fp, #21
   2c3f2:	e730      	b.n	2c256 <modem_info_string_get+0x56>
		return -EIO;
   2c3f4:	f06f 0b04 	mvn.w	fp, #4
   2c3f8:	e72d      	b.n	2c256 <modem_info_string_get+0x56>
			return -EFAULT;
   2c3fa:	f06f 0b0d 	mvn.w	fp, #13
   2c3fe:	e72a      	b.n	2c256 <modem_info_string_get+0x56>
   2c400:	00047080 	.word	0x00047080
   2c404:	0004da6f 	.word	0x0004da6f
   2c408:	00046878 	.word	0x00046878
   2c40c:	00046910 	.word	0x00046910
   2c410:	0004b47a 	.word	0x0004b47a
   2c414:	20024958 	.word	0x20024958
   2c418:	0004b493 	.word	0x0004b493
   2c41c:	0004c835 	.word	0x0004c835
   2c420:	0004928a 	.word	0x0004928a
   2c424:	00048c34 	.word	0x00048c34

0002c428 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   2c428:	4b12      	ldr	r3, [pc, #72]	; (2c474 <modem_info_rsrp_register+0x4c>)
{
   2c42a:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   2c42c:	4912      	ldr	r1, [pc, #72]	; (2c478 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   2c42e:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   2c430:	2000      	movs	r0, #0
   2c432:	f7fe fc75 	bl	2ad20 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   2c436:	4604      	mov	r4, r0
   2c438:	b180      	cbz	r0, 2c45c <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   2c43a:	2301      	movs	r3, #1
   2c43c:	f04f 0000 	mov.w	r0, #0
   2c440:	4a0e      	ldr	r2, [pc, #56]	; (2c47c <modem_info_rsrp_register+0x54>)
   2c442:	f363 0007 	bfi	r0, r3, #0, #8
   2c446:	4b0e      	ldr	r3, [pc, #56]	; (2c480 <modem_info_rsrp_register+0x58>)
   2c448:	490e      	ldr	r1, [pc, #56]	; (2c484 <modem_info_rsrp_register+0x5c>)
   2c44a:	1a9b      	subs	r3, r3, r2
   2c44c:	08db      	lsrs	r3, r3, #3
   2c44e:	f363 108f 	bfi	r0, r3, #6, #10
   2c452:	4622      	mov	r2, r4
   2c454:	f015 fdf3 	bl	4203e <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   2c458:	4620      	mov	r0, r4
   2c45a:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   2c45c:	4603      	mov	r3, r0
   2c45e:	4602      	mov	r2, r0
   2c460:	4601      	mov	r1, r0
   2c462:	4809      	ldr	r0, [pc, #36]	; (2c488 <modem_info_rsrp_register+0x60>)
   2c464:	f7fe fb2c 	bl	2aac0 <at_cmd_write>
   2c468:	1e04      	subs	r4, r0, #0
		return -EIO;
   2c46a:	bf18      	it	ne
   2c46c:	f06f 0404 	mvnne.w	r4, #4
   2c470:	e7f2      	b.n	2c458 <modem_info_rsrp_register+0x30>
   2c472:	bf00      	nop
   2c474:	20024960 	.word	0x20024960
   2c478:	0002c0b1 	.word	0x0002c0b1
   2c47c:	00046878 	.word	0x00046878
   2c480:	00046910 	.word	0x00046910
   2c484:	0004b3f6 	.word	0x0004b3f6
   2c488:	0004b413 	.word	0x0004b413

0002c48c <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2c48c:	210a      	movs	r1, #10
   2c48e:	4801      	ldr	r0, [pc, #4]	; (2c494 <modem_info_init+0x8>)
   2c490:	f018 b9a6 	b.w	447e0 <at_params_list_init>
   2c494:	20024958 	.word	0x20024958

0002c498 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2c498:	b538      	push	{r3, r4, r5, lr}
   2c49a:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2c49c:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   2c4a0:	f7ff fe5a 	bl	2c158 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2c4a4:	2803      	cmp	r0, #3
   2c4a6:	d11c      	bne.n	2c4e2 <modem_data_get+0x4a>
		ret = modem_info_string_get(param->type,
   2c4a8:	2264      	movs	r2, #100	; 0x64
   2c4aa:	1ca9      	adds	r1, r5, #2
   2c4ac:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c4b0:	f7ff fea6 	bl	2c200 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2c4b4:	1e04      	subs	r4, r0, #0
   2c4b6:	db02      	blt.n	2c4be <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2c4b8:	2400      	movs	r4, #0
}
   2c4ba:	4620      	mov	r0, r4
   2c4bc:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2c4be:	2301      	movs	r3, #1
   2c4c0:	f04f 0000 	mov.w	r0, #0
   2c4c4:	4a13      	ldr	r2, [pc, #76]	; (2c514 <modem_data_get+0x7c>)
   2c4c6:	f363 0007 	bfi	r0, r3, #0, #8
   2c4ca:	4b13      	ldr	r3, [pc, #76]	; (2c518 <modem_data_get+0x80>)
   2c4cc:	4913      	ldr	r1, [pc, #76]	; (2c51c <modem_data_get+0x84>)
   2c4ce:	1a9b      	subs	r3, r3, r2
   2c4d0:	08db      	lsrs	r3, r3, #3
   2c4d2:	f363 108f 	bfi	r0, r3, #6, #10
   2c4d6:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   2c4da:	4623      	mov	r3, r4
   2c4dc:	f015 fdaf 	bl	4203e <log_string_sync>
			return ret;
   2c4e0:	e7eb      	b.n	2c4ba <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c4e2:	2801      	cmp	r0, #1
   2c4e4:	d1e8      	bne.n	2c4b8 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2c4e6:	4629      	mov	r1, r5
   2c4e8:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c4ec:	f7ff fe56 	bl	2c19c <modem_info_short_get>
		if (ret < 0) {
   2c4f0:	1e04      	subs	r4, r0, #0
   2c4f2:	dae1      	bge.n	2c4b8 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   2c4f4:	2301      	movs	r3, #1
   2c4f6:	f04f 0000 	mov.w	r0, #0
   2c4fa:	4a06      	ldr	r2, [pc, #24]	; (2c514 <modem_data_get+0x7c>)
   2c4fc:	f363 0007 	bfi	r0, r3, #0, #8
   2c500:	4b05      	ldr	r3, [pc, #20]	; (2c518 <modem_data_get+0x80>)
   2c502:	4907      	ldr	r1, [pc, #28]	; (2c520 <modem_data_get+0x88>)
   2c504:	1a9b      	subs	r3, r3, r2
   2c506:	08db      	lsrs	r3, r3, #3
   2c508:	f363 108f 	bfi	r0, r3, #6, #10
   2c50c:	4622      	mov	r2, r4
   2c50e:	f015 fd96 	bl	4203e <log_string_sync>
			return ret;
   2c512:	e7d2      	b.n	2c4ba <modem_data_get+0x22>
   2c514:	00046878 	.word	0x00046878
   2c518:	00046920 	.word	0x00046920
   2c51c:	0004b604 	.word	0x0004b604
   2c520:	0004b622 	.word	0x0004b622

0002c524 <modem_info_params_init>:
	if (modem == NULL) {
   2c524:	2800      	cmp	r0, #0
   2c526:	d046      	beq.n	2c5b6 <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   2c528:	2301      	movs	r3, #1
   2c52a:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2c52e:	2302      	movs	r3, #2
   2c530:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2c534:	2303      	movs	r3, #3
   2c536:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2c53a:	2305      	movs	r3, #5
   2c53c:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   2c540:	2306      	movs	r3, #6
   2c542:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2c546:	2307      	movs	r3, #7
   2c548:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2c54c:	2308      	movs	r3, #8
   2c54e:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2c552:	2309      	movs	r3, #9
   2c554:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2c558:	2304      	movs	r3, #4
   2c55a:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   2c55e:	230f      	movs	r3, #15
   2c560:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2c564:	2310      	movs	r3, #16
   2c566:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   2c56a:	2311      	movs	r3, #17
   2c56c:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   2c570:	2314      	movs	r3, #20
   2c572:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   2c576:	2315      	movs	r3, #21
   2c578:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2c57c:	230a      	movs	r3, #10
   2c57e:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2c582:	230e      	movs	r3, #14
   2c584:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2c588:	2312      	movs	r3, #18
   2c58a:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   2c58e:	230d      	movs	r3, #13
   2c590:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   2c594:	230b      	movs	r3, #11
   2c596:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2c59a:	2313      	movs	r3, #19
   2c59c:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   2c5a0:	4b06      	ldr	r3, [pc, #24]	; (2c5bc <modem_info_params_init+0x98>)
   2c5a2:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2c5a6:	4b06      	ldr	r3, [pc, #24]	; (2c5c0 <modem_info_params_init+0x9c>)
   2c5a8:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2c5ac:	4b05      	ldr	r3, [pc, #20]	; (2c5c4 <modem_info_params_init+0xa0>)
   2c5ae:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   2c5b2:	2000      	movs	r0, #0
   2c5b4:	4770      	bx	lr
		return -EINVAL;
   2c5b6:	f06f 0015 	mvn.w	r0, #21
}
   2c5ba:	4770      	bx	lr
   2c5bc:	0004b692 	.word	0x0004b692
   2c5c0:	0004b6a4 	.word	0x0004b6a4
   2c5c4:	000486f0 	.word	0x000486f0

0002c5c8 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2c5c8:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   2c5ca:	4604      	mov	r4, r0
   2c5cc:	2800      	cmp	r0, #0
   2c5ce:	f000 80be 	beq.w	2c74e <modem_info_params_get+0x186>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2c5d2:	f7ff ff61 	bl	2c498 <modem_data_get>
   2c5d6:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   2c5d8:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2c5dc:	f7ff ff5c 	bl	2c498 <modem_data_get>
   2c5e0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2c5e2:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2c5e6:	f7ff ff57 	bl	2c498 <modem_data_get>
   2c5ea:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   2c5ec:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2c5f0:	f7ff ff52 	bl	2c498 <modem_data_get>
   2c5f4:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2c5f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2c5fa:	f7ff ff4d 	bl	2c498 <modem_data_get>
   2c5fe:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2c600:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2c604:	f7ff ff48 	bl	2c498 <modem_data_get>
   2c608:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2c60a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2c60e:	f7ff ff43 	bl	2c498 <modem_data_get>
   2c612:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2c614:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2c618:	f7ff ff3e 	bl	2c498 <modem_data_get>
   2c61c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2c61e:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2c622:	f7ff ff39 	bl	2c498 <modem_data_get>
   2c626:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2c628:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2c62c:	f7ff ff34 	bl	2c498 <modem_data_get>
   2c630:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2c632:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2c636:	f7ff ff2f 	bl	2c498 <modem_data_get>
   2c63a:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   2c63c:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2c640:	f7ff ff2a 	bl	2c498 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c644:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   2c648:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2c64c:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2c64e:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2c652:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   2c656:	7083      	strb	r3, [r0, #2]
   2c658:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   2c65c:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   2c660:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   2c664:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c668:	2100      	movs	r1, #0
   2c66a:	220a      	movs	r2, #10
   2c66c:	f013 fec8 	bl	40400 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2c670:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c674:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c678:	220a      	movs	r2, #10
   2c67a:	2100      	movs	r1, #0
   2c67c:	4630      	mov	r0, r6
   2c67e:	f013 febf 	bl	40400 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c682:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c684:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c688:	2100      	movs	r1, #0
   2c68a:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   2c68e:	f013 feb7 	bl	40400 <strtol>
   2c692:	f7f0 f827 	bl	1c6e4 <__aeabi_i2d>
   2c696:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   2c69a:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   2c69e:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c6a0:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   2c6a2:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c6a6:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2c6aa:	f013 fea9 	bl	40400 <strtol>
   2c6ae:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2c6b2:	b195      	cbz	r5, 2c6da <modem_info_params_get+0x112>
			LOG_ERR("Network data not obtained: %d", ret);
   2c6b4:	2301      	movs	r3, #1
   2c6b6:	f04f 0000 	mov.w	r0, #0
   2c6ba:	4a26      	ldr	r2, [pc, #152]	; (2c754 <modem_info_params_get+0x18c>)
   2c6bc:	f363 0007 	bfi	r0, r3, #0, #8
   2c6c0:	4b25      	ldr	r3, [pc, #148]	; (2c758 <modem_info_params_get+0x190>)
   2c6c2:	4926      	ldr	r1, [pc, #152]	; (2c75c <modem_info_params_get+0x194>)
   2c6c4:	1a9b      	subs	r3, r3, r2
   2c6c6:	462a      	mov	r2, r5
   2c6c8:	08db      	lsrs	r3, r3, #3
   2c6ca:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2c6ce:	f015 fcb6 	bl	4203e <log_string_sync>
			return -EAGAIN;
   2c6d2:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   2c6d6:	4610      	mov	r0, r2
   2c6d8:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   2c6da:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2c6de:	f7ff fedb 	bl	2c498 <modem_data_get>
   2c6e2:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   2c6e4:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2c6e8:	f7ff fed6 	bl	2c498 <modem_data_get>
   2c6ec:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2c6ee:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2c6f2:	f7ff fed1 	bl	2c498 <modem_data_get>
		if (ret) {
   2c6f6:	182a      	adds	r2, r5, r0
   2c6f8:	d00c      	beq.n	2c714 <modem_info_params_get+0x14c>
			LOG_ERR("Sim data not obtained: %d", ret);
   2c6fa:	2301      	movs	r3, #1
   2c6fc:	f04f 0000 	mov.w	r0, #0
   2c700:	4914      	ldr	r1, [pc, #80]	; (2c754 <modem_info_params_get+0x18c>)
   2c702:	f363 0007 	bfi	r0, r3, #0, #8
   2c706:	4b14      	ldr	r3, [pc, #80]	; (2c758 <modem_info_params_get+0x190>)
   2c708:	1a5b      	subs	r3, r3, r1
   2c70a:	08db      	lsrs	r3, r3, #3
   2c70c:	f363 108f 	bfi	r0, r3, #6, #10
   2c710:	4913      	ldr	r1, [pc, #76]	; (2c760 <modem_info_params_get+0x198>)
   2c712:	e7dc      	b.n	2c6ce <modem_info_params_get+0x106>
		ret = modem_data_get(&modem->device.modem_fw);
   2c714:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2c718:	f7ff febe 	bl	2c498 <modem_data_get>
   2c71c:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2c71e:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2c722:	f7ff feb9 	bl	2c498 <modem_data_get>
   2c726:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2c728:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2c72c:	f7ff feb4 	bl	2c498 <modem_data_get>
		if (ret) {
   2c730:	182a      	adds	r2, r5, r0
   2c732:	d0d0      	beq.n	2c6d6 <modem_info_params_get+0x10e>
			LOG_ERR("Device data not obtained: %d", ret);
   2c734:	2301      	movs	r3, #1
   2c736:	f04f 0000 	mov.w	r0, #0
   2c73a:	4906      	ldr	r1, [pc, #24]	; (2c754 <modem_info_params_get+0x18c>)
   2c73c:	f363 0007 	bfi	r0, r3, #0, #8
   2c740:	4b05      	ldr	r3, [pc, #20]	; (2c758 <modem_info_params_get+0x190>)
   2c742:	1a5b      	subs	r3, r3, r1
   2c744:	08db      	lsrs	r3, r3, #3
   2c746:	f363 108f 	bfi	r0, r3, #6, #10
   2c74a:	4906      	ldr	r1, [pc, #24]	; (2c764 <modem_info_params_get+0x19c>)
   2c74c:	e7bf      	b.n	2c6ce <modem_info_params_get+0x106>
		return -EINVAL;
   2c74e:	f06f 0215 	mvn.w	r2, #21
   2c752:	e7c0      	b.n	2c6d6 <modem_info_params_get+0x10e>
   2c754:	00046878 	.word	0x00046878
   2c758:	00046920 	.word	0x00046920
   2c75c:	0004b63d 	.word	0x0004b63d
   2c760:	0004b65b 	.word	0x0004b65b
   2c764:	0004b675 	.word	0x0004b675

0002c768 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   2c768:	b570      	push	{r4, r5, r6, lr}
   2c76a:	460e      	mov	r6, r1
   2c76c:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2c76e:	4605      	mov	r5, r0
   2c770:	2800      	cmp	r0, #0
   2c772:	d065      	beq.n	2c840 <network_data_add+0xd8>
   2c774:	2900      	cmp	r1, #0
   2c776:	d063      	beq.n	2c840 <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   2c778:	f018 f97c 	bl	44a74 <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   2c77c:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   2c77e:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2c780:	f105 0070 	add.w	r0, r5, #112	; 0x70
   2c784:	f018 f976 	bl	44a74 <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   2c788:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   2c78a:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   2c78c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   2c790:	f018 f970 	bl	44a74 <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   2c794:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   2c796:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   2c798:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   2c79c:	f018 f96a 	bl	44a74 <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2c7a0:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   2c7a2:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   2c7a4:	f505 7044 	add.w	r0, r5, #784	; 0x310
   2c7a8:	f018 f964 	bl	44a74 <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c7ac:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   2c7ae:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c7b0:	f505 7060 	add.w	r0, r5, #896	; 0x380
   2c7b4:	f018 f95e 	bl	44a74 <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c7b8:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c7ba:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c7bc:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   2c7c0:	f7ff fcd4 	bl	2c16c <modem_info_name_get>
	data_name[len] =  '\0';
   2c7c4:	ab1a      	add	r3, sp, #104	; 0x68
   2c7c6:	4418      	add	r0, r3
   2c7c8:	2300      	movs	r3, #0
   2c7ca:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   2c7ce:	f505 63c4 	add.w	r3, r5, #1568	; 0x620
	json_num = cJSON_CreateNumber(num);
   2c7d2:	ed93 0b00 	vldr	d0, [r3]
   2c7d6:	f7f1 f987 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2c7da:	4602      	mov	r2, r0
   2c7dc:	b120      	cbz	r0, 2c7e8 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   2c7de:	a901      	add	r1, sp, #4
   2c7e0:	4630      	mov	r0, r6
   2c7e2:	f017 fc06 	bl	43ff2 <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   2c7e6:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   2c7e8:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   2c7ec:	f505 62c5 	add.w	r2, r5, #1576	; 0x628
   2c7f0:	2b01      	cmp	r3, #1
   2c7f2:	d11a      	bne.n	2c82a <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2c7f4:	4610      	mov	r0, r2
   2c7f6:	4914      	ldr	r1, [pc, #80]	; (2c848 <network_data_add+0xe0>)
   2c7f8:	f018 fece 	bl	45598 <strcat>
   2c7fc:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   2c7fe:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   2c800:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   2c804:	2b01      	cmp	r3, #1
   2c806:	d105      	bne.n	2c814 <network_data_add+0xac>
   2c808:	4610      	mov	r0, r2
   2c80a:	4910      	ldr	r1, [pc, #64]	; (2c84c <network_data_add+0xe4>)
   2c80c:	f018 fec4 	bl	45598 <strcat>
   2c810:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   2c812:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2c814:	490e      	ldr	r1, [pc, #56]	; (2c850 <network_data_add+0xe8>)
   2c816:	4630      	mov	r0, r6
   2c818:	f018 f916 	bl	44a48 <json_add_str>

	if (ret) {
   2c81c:	b110      	cbz	r0, 2c824 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   2c81e:	480d      	ldr	r0, [pc, #52]	; (2c854 <network_data_add+0xec>)
   2c820:	f015 f9e2 	bl	41be8 <printk>
	}

	return total_len;
}
   2c824:	4620      	mov	r0, r4
   2c826:	b01a      	add	sp, #104	; 0x68
   2c828:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   2c82a:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   2c82e:	2b01      	cmp	r3, #1
   2c830:	d1e6      	bne.n	2c800 <network_data_add+0x98>
   2c832:	4610      	mov	r0, r2
   2c834:	4908      	ldr	r1, [pc, #32]	; (2c858 <network_data_add+0xf0>)
   2c836:	f018 feaf 	bl	45598 <strcat>
		total_len += sizeof(nbiot_string);
   2c83a:	3407      	adds	r4, #7
   2c83c:	4602      	mov	r2, r0
   2c83e:	e7df      	b.n	2c800 <network_data_add+0x98>
		return -EINVAL;
   2c840:	f06f 0415 	mvn.w	r4, #21
   2c844:	e7ee      	b.n	2c824 <network_data_add+0xbc>
   2c846:	bf00      	nop
   2c848:	0004b6ed 	.word	0x0004b6ed
   2c84c:	0004b6e8 	.word	0x0004b6e8
   2c850:	0004b719 	.word	0x0004b719
   2c854:	0004b725 	.word	0x0004b725
   2c858:	0004b712 	.word	0x0004b712

0002c85c <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   2c85c:	b570      	push	{r4, r5, r6, lr}
   2c85e:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2c860:	4606      	mov	r6, r0
   2c862:	b328      	cbz	r0, 2c8b0 <device_data_add+0x54>
   2c864:	b321      	cbz	r1, 2c8b0 <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2c866:	f018 f905 	bl	44a74 <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2c86a:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   2c86c:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   2c86e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2c872:	f018 f8ff 	bl	44a74 <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2c876:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   2c878:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   2c87a:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   2c87e:	f018 f8f9 	bl	44a74 <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2c882:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   2c886:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2c888:	490b      	ldr	r1, [pc, #44]	; (2c8b8 <device_data_add+0x5c>)
   2c88a:	4628      	mov	r0, r5
   2c88c:	f018 f8dc 	bl	44a48 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c890:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   2c894:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c896:	4909      	ldr	r1, [pc, #36]	; (2c8bc <device_data_add+0x60>)
   2c898:	4628      	mov	r0, r5
   2c89a:	f018 f8d5 	bl	44a48 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c89e:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c8a2:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c8a4:	4906      	ldr	r1, [pc, #24]	; (2c8c0 <device_data_add+0x64>)
   2c8a6:	4628      	mov	r0, r5
   2c8a8:	f018 f8ce 	bl	44a48 <json_add_str>
   2c8ac:	4420      	add	r0, r4

	return total_len;
}
   2c8ae:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c8b0:	f06f 0015 	mvn.w	r0, #21
   2c8b4:	e7fb      	b.n	2c8ae <device_data_add+0x52>
   2c8b6:	bf00      	nop
   2c8b8:	0004b6cf 	.word	0x0004b6cf
   2c8bc:	0004b6d5 	.word	0x0004b6d5
   2c8c0:	0004b6e0 	.word	0x0004b6e0

0002c8c4 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   2c8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c8c8:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   2c8ca:	460d      	mov	r5, r1
   2c8cc:	2900      	cmp	r1, #0
   2c8ce:	d04f      	beq.n	2c970 <modem_info_json_object_encode+0xac>
   2c8d0:	2800      	cmp	r0, #0
   2c8d2:	d04d      	beq.n	2c970 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   2c8d4:	4608      	mov	r0, r1
   2c8d6:	f017 fb78 	bl	43fca <cJSON_GetArraySize>
   2c8da:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   2c8dc:	f7fc fd6e 	bl	293bc <cJSON_CreateObject>
   2c8e0:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   2c8e2:	f7fc fd6b 	bl	293bc <cJSON_CreateObject>
   2c8e6:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   2c8e8:	f7fc fd68 	bl	293bc <cJSON_CreateObject>
   2c8ec:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   2c8ee:	f1b8 0f00 	cmp.w	r8, #0
   2c8f2:	d03a      	beq.n	2c96a <modem_info_json_object_encode+0xa6>
   2c8f4:	b3cf      	cbz	r7, 2c96a <modem_info_json_object_encode+0xa6>
   2c8f6:	b3c0      	cbz	r0, 2c96a <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   2c8f8:	4641      	mov	r1, r8
   2c8fa:	4648      	mov	r0, r9
   2c8fc:	f7ff ff34 	bl	2c768 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   2c900:	2800      	cmp	r0, #0
   2c902:	dd06      	ble.n	2c912 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   2c904:	4642      	mov	r2, r8
   2c906:	491c      	ldr	r1, [pc, #112]	; (2c978 <modem_info_json_object_encode+0xb4>)
   2c908:	4628      	mov	r0, r5
   2c90a:	f017 fb72 	bl	43ff2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   2c90e:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   2c912:	4639      	mov	r1, r7
   2c914:	f509 60c7 	add.w	r0, r9, #1592	; 0x638
   2c918:	f018 f8f0 	bl	44afc <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   2c91c:	2800      	cmp	r0, #0
   2c91e:	dd05      	ble.n	2c92c <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   2c920:	463a      	mov	r2, r7
   2c922:	4916      	ldr	r1, [pc, #88]	; (2c97c <modem_info_json_object_encode+0xb8>)
   2c924:	4628      	mov	r0, r5
   2c926:	f017 fb64 	bl	43ff2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   2c92a:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   2c92c:	4631      	mov	r1, r6
   2c92e:	f509 60f1 	add.w	r0, r9, #1928	; 0x788
   2c932:	f7ff ff93 	bl	2c85c <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2c936:	2800      	cmp	r0, #0
   2c938:	dd05      	ble.n	2c946 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2c93a:	4632      	mov	r2, r6
   2c93c:	4910      	ldr	r1, [pc, #64]	; (2c980 <modem_info_json_object_encode+0xbc>)
   2c93e:	4628      	mov	r0, r5
   2c940:	f017 fb57 	bl	43ff2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   2c944:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2c946:	4640      	mov	r0, r8
   2c948:	f7fc fc64 	bl	29214 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   2c94c:	4638      	mov	r0, r7
   2c94e:	f7fc fc61 	bl	29214 <cJSON_Delete>
	cJSON_Delete(device_obj);
   2c952:	4630      	mov	r0, r6
   2c954:	f7fc fc5e 	bl	29214 <cJSON_Delete>

	if (obj_count >= 0) {
   2c958:	2c00      	cmp	r4, #0
   2c95a:	db03      	blt.n	2c964 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   2c95c:	4628      	mov	r0, r5
   2c95e:	f017 fb34 	bl	43fca <cJSON_GetArraySize>
   2c962:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   2c964:	4620      	mov	r0, r4
   2c966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2c96a:	f06f 040b 	mvn.w	r4, #11
   2c96e:	e7ea      	b.n	2c946 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2c970:	f06f 0415 	mvn.w	r4, #21
   2c974:	e7f6      	b.n	2c964 <modem_info_json_object_encode+0xa0>
   2c976:	bf00      	nop
   2c978:	0004b6f3 	.word	0x0004b6f3
   2c97c:	0004b6ff 	.word	0x0004b6ff
   2c980:	0004b707 	.word	0x0004b707

0002c984 <date_time_notify_event.constprop.1>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   2c984:	4b02      	ldr	r3, [pc, #8]	; (2c990 <date_time_notify_event.constprop.1+0xc>)
   2c986:	681b      	ldr	r3, [r3, #0]
   2c988:	b10b      	cbz	r3, 2c98e <date_time_notify_event.constprop.1+0xa>
		app_evt_handler(evt);
   2c98a:	4802      	ldr	r0, [pc, #8]	; (2c994 <date_time_notify_event.constprop.1+0x10>)
   2c98c:	4718      	bx	r3
	}
}
   2c98e:	4770      	bx	lr
   2c990:	20024964 	.word	0x20024964
   2c994:	2002c9dd 	.word	0x2002c9dd

0002c998 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   2c998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c99c:	4b80      	ldr	r3, [pc, #512]	; (2cba0 <new_date_time_get+0x208>)
		LOG_WRN("sntp_query, error: %d", err);
   2c99e:	4a81      	ldr	r2, [pc, #516]	; (2cba4 <new_date_time_get+0x20c>)
{
   2c9a0:	b097      	sub	sp, #92	; 0x5c
		LOG_WRN("sntp_query, error: %d", err);
   2c9a2:	1a9b      	subs	r3, r3, r2
   2c9a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	if (time_aux.last_date_time_update == 0 ||
   2c9a8:	4d7f      	ldr	r5, [pc, #508]	; (2cba8 <new_date_time_get+0x210>)
		LOG_WRN("sntp_query, error: %d", err);
   2c9aa:	9300      	str	r3, [sp, #0]
   2c9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c9b4:	487d      	ldr	r0, [pc, #500]	; (2cbac <new_date_time_get+0x214>)
   2c9b6:	f011 fc69 	bl	3e28c <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   2c9ba:	68ab      	ldr	r3, [r5, #8]
   2c9bc:	b19b      	cbz	r3, 2c9e6 <new_date_time_get+0x4e>
   2c9be:	e9d5 2300 	ldrd	r2, r3, [r5]
   2c9c2:	4313      	orrs	r3, r2
   2c9c4:	d00f      	beq.n	2c9e6 <new_date_time_get+0x4e>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2c9c6:	f018 f8b1 	bl	44b2c <k_uptime_get>
   2c9ca:	2400      	movs	r4, #0
   2c9cc:	68ab      	ldr	r3, [r5, #8]
   2c9ce:	1ac6      	subs	r6, r0, r3
   2c9d0:	eb61 77e3 	sbc.w	r7, r1, r3, asr #31
   2c9d4:	4b76      	ldr	r3, [pc, #472]	; (2cbb0 <new_date_time_get+0x218>)
   2c9d6:	42b3      	cmp	r3, r6
   2c9d8:	eb74 0307 	sbcs.w	r3, r4, r7
   2c9dc:	db03      	blt.n	2c9e6 <new_date_time_get+0x4e>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   2c9de:	2201      	movs	r2, #1
   2c9e0:	4b74      	ldr	r3, [pc, #464]	; (2cbb4 <new_date_time_get+0x21c>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   2c9e2:	701a      	strb	r2, [r3, #0]
   2c9e4:	e05b      	b.n	2ca9e <new_date_time_get+0x106>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   2c9e6:	2300      	movs	r3, #0
   2c9e8:	2221      	movs	r2, #33	; 0x21
   2c9ea:	a904      	add	r1, sp, #16
   2c9ec:	4872      	ldr	r0, [pc, #456]	; (2cbb8 <new_date_time_get+0x220>)
   2c9ee:	f7fe f867 	bl	2aac0 <at_cmd_write>
	if (err) {
   2c9f2:	2800      	cmp	r0, #0
   2c9f4:	d156      	bne.n	2caa4 <new_date_time_get+0x10c>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   2c9f6:	2420      	movs	r4, #32
   2c9f8:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2c9fc:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   2ca00:	4620      	mov	r0, r4
   2ca02:	aa04      	add	r2, sp, #16
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2ca04:	f812 3b01 	ldrb.w	r3, [r2], #1
   2ca08:	3b2c      	subs	r3, #44	; 0x2c
   2ca0a:	b2db      	uxtb	r3, r3
   2ca0c:	2b0e      	cmp	r3, #14
   2ca0e:	d805      	bhi.n	2ca1c <new_date_time_get+0x84>
   2ca10:	fa21 f303 	lsr.w	r3, r1, r3
   2ca14:	07de      	lsls	r6, r3, #31
			buf[i] = ' ';
   2ca16:	bf48      	it	mi
   2ca18:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2ca1c:	3c01      	subs	r4, #1
   2ca1e:	d1f1      	bne.n	2ca04 <new_date_time_get+0x6c>
	char *ptr_index = &buf[8];
   2ca20:	a806      	add	r0, sp, #24
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2ca22:	220a      	movs	r2, #10
   2ca24:	a903      	add	r1, sp, #12
	char *ptr_index = &buf[8];
   2ca26:	9003      	str	r0, [sp, #12]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2ca28:	f013 fcea 	bl	40400 <strtol>
   2ca2c:	3064      	adds	r0, #100	; 0x64
   2ca2e:	9012      	str	r0, [sp, #72]	; 0x48
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2ca30:	220a      	movs	r2, #10
   2ca32:	a903      	add	r1, sp, #12
   2ca34:	9803      	ldr	r0, [sp, #12]
   2ca36:	f013 fce3 	bl	40400 <strtol>
   2ca3a:	3801      	subs	r0, #1
   2ca3c:	9011      	str	r0, [sp, #68]	; 0x44
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2ca3e:	220a      	movs	r2, #10
   2ca40:	a903      	add	r1, sp, #12
   2ca42:	9803      	ldr	r0, [sp, #12]
   2ca44:	f013 fcdc 	bl	40400 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2ca48:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2ca4a:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2ca4c:	a903      	add	r1, sp, #12
   2ca4e:	9803      	ldr	r0, [sp, #12]
   2ca50:	f013 fcd6 	bl	40400 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2ca54:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2ca56:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2ca58:	a903      	add	r1, sp, #12
   2ca5a:	9803      	ldr	r0, [sp, #12]
   2ca5c:	f013 fcd0 	bl	40400 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2ca60:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2ca62:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2ca64:	a903      	add	r1, sp, #12
   2ca66:	9803      	ldr	r0, [sp, #12]
   2ca68:	f013 fcca 	bl	40400 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2ca6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2ca6e:	900d      	str	r0, [sp, #52]	; 0x34
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2ca70:	2b73      	cmp	r3, #115	; 0x73
   2ca72:	d017      	beq.n	2caa4 <new_date_time_get+0x10c>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2ca74:	a80d      	add	r0, sp, #52	; 0x34
   2ca76:	f7f7 ff1b 	bl	248b0 <timeutil_timegm64>
   2ca7a:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   2ca7e:	fba0 2307 	umull	r2, r3, r0, r7
   2ca82:	fb07 3301 	mla	r3, r7, r1, r3
   2ca86:	4948      	ldr	r1, [pc, #288]	; (2cba8 <new_date_time_get+0x210>)
   2ca88:	e9c1 2300 	strd	r2, r3, [r1]
   2ca8c:	460e      	mov	r6, r1
	time_aux.last_date_time_update = k_uptime_get();
   2ca8e:	f018 f84d 	bl	44b2c <k_uptime_get>
			initial_valid_time = true;
   2ca92:	2201      	movs	r2, #1
   2ca94:	4b47      	ldr	r3, [pc, #284]	; (2cbb4 <new_date_time_get+0x21c>)
	time_aux.last_date_time_update = k_uptime_get();
   2ca96:	60b0      	str	r0, [r6, #8]
			initial_valid_time = true;
   2ca98:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2ca9a:	4b48      	ldr	r3, [pc, #288]	; (2cbbc <new_date_time_get+0x224>)
   2ca9c:	701c      	strb	r4, [r3, #0]
		date_time_notify_event(&evt);
   2ca9e:	f7ff ff71 	bl	2c984 <date_time_notify_event.constprop.1>
   2caa2:	e783      	b.n	2c9ac <new_date_time_get+0x14>
		if (err == 0) {
   2caa4:	2300      	movs	r3, #0
   2caa6:	4c46      	ldr	r4, [pc, #280]	; (2cbc0 <new_date_time_get+0x228>)
	hints.ai_family = AF_INET;
   2caa8:	4f46      	ldr	r7, [pc, #280]	; (2cbc4 <new_date_time_get+0x22c>)
   2caaa:	9301      	str	r3, [sp, #4]
	hints.ai_socktype = SOCK_DGRAM;
   2caac:	2302      	movs	r3, #2
   2caae:	2201      	movs	r2, #1
   2cab0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	hints.ai_protocol = 0;
   2cab4:	2300      	movs	r3, #0
   2cab6:	613b      	str	r3, [r7, #16]
	if (server->addr == NULL) {
   2cab8:	6863      	ldr	r3, [r4, #4]
   2caba:	bb53      	cbnz	r3, 2cb12 <new_date_time_get+0x17a>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2cabc:	463a      	mov	r2, r7
   2cabe:	1d23      	adds	r3, r4, #4
   2cac0:	4941      	ldr	r1, [pc, #260]	; (2cbc8 <new_date_time_get+0x230>)
   2cac2:	6820      	ldr	r0, [r4, #0]
   2cac4:	f015 fe1e 	bl	42704 <zsock_getaddrinfo>
		if (err) {
   2cac8:	4602      	mov	r2, r0
   2caca:	b310      	cbz	r0, 2cb12 <new_date_time_get+0x17a>
			LOG_WRN("getaddrinfo, error: %d", err);
   2cacc:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2cad0:	f043 0302 	orr.w	r3, r3, #2
   2cad4:	f363 0907 	bfi	r9, r3, #0, #8
   2cad8:	9b00      	ldr	r3, [sp, #0]
   2cada:	493c      	ldr	r1, [pc, #240]	; (2cbcc <new_date_time_get+0x234>)
   2cadc:	f363 198f 	bfi	r9, r3, #6, #10
   2cae0:	4648      	mov	r0, r9
   2cae2:	f015 faac 	bl	4203e <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2cae6:	9b01      	ldr	r3, [sp, #4]
   2cae8:	3408      	adds	r4, #8
   2caea:	3301      	adds	r3, #1
   2caec:	2b05      	cmp	r3, #5
   2caee:	9301      	str	r3, [sp, #4]
   2caf0:	d1dc      	bne.n	2caac <new_date_time_get+0x114>
	LOG_WRN("Not getting time from any NTP server");
   2caf2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2caf6:	f043 0302 	orr.w	r3, r3, #2
   2cafa:	f363 0807 	bfi	r8, r3, #0, #8
   2cafe:	9b00      	ldr	r3, [sp, #0]
   2cb00:	4933      	ldr	r1, [pc, #204]	; (2cbd0 <new_date_time_get+0x238>)
   2cb02:	f363 188f 	bfi	r8, r3, #6, #10
   2cb06:	4640      	mov	r0, r8
   2cb08:	f015 fa99 	bl	4203e <log_string_sync>
		evt.type = DATE_TIME_NOT_OBTAINED;
   2cb0c:	4b2b      	ldr	r3, [pc, #172]	; (2cbbc <new_date_time_get+0x224>)
   2cb0e:	2203      	movs	r2, #3
   2cb10:	e767      	b.n	2c9e2 <new_date_time_get+0x4a>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   2cb12:	6863      	ldr	r3, [r4, #4]
   2cb14:	a80d      	add	r0, sp, #52	; 0x34
   2cb16:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2cb1a:	f015 fdbf 	bl	4269c <sntp_init>
	if (err) {
   2cb1e:	4606      	mov	r6, r0
   2cb20:	b340      	cbz	r0, 2cb74 <new_date_time_get+0x1dc>
		LOG_WRN("sntp_init, error: %d", err);
   2cb22:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   2cb26:	f042 0202 	orr.w	r2, r2, #2
   2cb2a:	9b00      	ldr	r3, [sp, #0]
   2cb2c:	f362 0a07 	bfi	sl, r2, #0, #8
   2cb30:	f363 1a8f 	bfi	sl, r3, #6, #10
   2cb34:	4602      	mov	r2, r0
   2cb36:	4650      	mov	r0, sl
   2cb38:	4926      	ldr	r1, [pc, #152]	; (2cbd4 <new_date_time_get+0x23c>)
		LOG_WRN("sntp_query, error: %d", err);
   2cb3a:	f015 fa80 	bl	4203e <log_string_sync>
	sntp_close(&sntp_ctx);
   2cb3e:	a80d      	add	r0, sp, #52	; 0x34
   2cb40:	f015 fddb 	bl	426fa <sntp_close>
		if (err) {
   2cb44:	2e00      	cmp	r6, #0
   2cb46:	d1ce      	bne.n	2cae6 <new_date_time_get+0x14e>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2cb48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2cb4c:	4b22      	ldr	r3, [pc, #136]	; (2cbd8 <new_date_time_get+0x240>)
   2cb4e:	681a      	ldr	r2, [r3, #0]
   2cb50:	6858      	ldr	r0, [r3, #4]
   2cb52:	fba2 2301 	umull	r2, r3, r2, r1
   2cb56:	fb01 3300 	mla	r3, r1, r0, r3
   2cb5a:	4913      	ldr	r1, [pc, #76]	; (2cba8 <new_date_time_get+0x210>)
   2cb5c:	e9c1 2300 	strd	r2, r3, [r1]
   2cb60:	460c      	mov	r4, r1
		time_aux.last_date_time_update = k_uptime_get();
   2cb62:	f017 ffe3 	bl	44b2c <k_uptime_get>
			initial_valid_time = true;
   2cb66:	2301      	movs	r3, #1
   2cb68:	4a12      	ldr	r2, [pc, #72]	; (2cbb4 <new_date_time_get+0x21c>)
		time_aux.last_date_time_update = k_uptime_get();
   2cb6a:	60a0      	str	r0, [r4, #8]
			initial_valid_time = true;
   2cb6c:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   2cb6e:	4a13      	ldr	r2, [pc, #76]	; (2cbbc <new_date_time_get+0x224>)
   2cb70:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   2cb72:	e794      	b.n	2ca9e <new_date_time_get+0x106>
	err = sntp_query(&sntp_ctx, timeout, time);
   2cb74:	4a18      	ldr	r2, [pc, #96]	; (2cbd8 <new_date_time_get+0x240>)
   2cb76:	f241 3188 	movw	r1, #5000	; 0x1388
   2cb7a:	a80d      	add	r0, sp, #52	; 0x34
   2cb7c:	f7f0 fd94 	bl	1d6a8 <sntp_query>
	if (err) {
   2cb80:	4606      	mov	r6, r0
   2cb82:	2800      	cmp	r0, #0
   2cb84:	d0db      	beq.n	2cb3e <new_date_time_get+0x1a6>
		LOG_WRN("sntp_query, error: %d", err);
   2cb86:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   2cb8a:	f042 0202 	orr.w	r2, r2, #2
   2cb8e:	9b00      	ldr	r3, [sp, #0]
   2cb90:	f362 0b07 	bfi	fp, r2, #0, #8
   2cb94:	f363 1b8f 	bfi	fp, r3, #6, #10
   2cb98:	4602      	mov	r2, r0
   2cb9a:	4910      	ldr	r1, [pc, #64]	; (2cbdc <new_date_time_get+0x244>)
   2cb9c:	4658      	mov	r0, fp
   2cb9e:	e7cc      	b.n	2cb3a <new_date_time_get+0x1a2>
   2cba0:	000468c0 	.word	0x000468c0
   2cba4:	00046878 	.word	0x00046878
   2cba8:	20021bf8 	.word	0x20021bf8
   2cbac:	20020c48 	.word	0x20020c48
   2cbb0:	0036ee80 	.word	0x0036ee80
   2cbb4:	2002c9de 	.word	0x2002c9de
   2cbb8:	0004b4cb 	.word	0x0004b4cb
   2cbbc:	2002c9dd 	.word	0x2002c9dd
   2cbc0:	20020700 	.word	0x20020700
   2cbc4:	20024968 	.word	0x20024968
   2cbc8:	0004b939 	.word	0x0004b939
   2cbcc:	0004b93d 	.word	0x0004b93d
   2cbd0:	0004b97f 	.word	0x0004b97f
   2cbd4:	0004b954 	.word	0x0004b954
   2cbd8:	20021be8 	.word	0x20021be8
   2cbdc:	0004b969 	.word	0x0004b969

0002cbe0 <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   2cbe0:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   2cbe2:	4c07      	ldr	r4, [pc, #28]	; (2cc00 <date_time_init+0x20>)
   2cbe4:	4907      	ldr	r1, [pc, #28]	; (2cc04 <date_time_init+0x24>)
   2cbe6:	4620      	mov	r0, r4
   2cbe8:	f018 fa3d 	bl	45066 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2cbec:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2cbf0:	2300      	movs	r3, #0
   2cbf2:	4621      	mov	r1, r4
   2cbf4:	4804      	ldr	r0, [pc, #16]	; (2cc08 <date_time_init+0x28>)
   2cbf6:	f011 fd71 	bl	3e6dc <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   2cbfa:	2000      	movs	r0, #0
   2cbfc:	bd10      	pop	{r4, pc}
   2cbfe:	bf00      	nop
   2cc00:	20021c08 	.word	0x20021c08
   2cc04:	0002cc0d 	.word	0x0002cc0d
   2cc08:	200244a8 	.word	0x200244a8

0002cc0c <date_time_handler>:
{
   2cc0c:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   2cc0e:	4806      	ldr	r0, [pc, #24]	; (2cc28 <date_time_handler+0x1c>)
   2cc10:	f011 faf8 	bl	3e204 <z_impl_k_sem_give>
}
   2cc14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cc18:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2cc1c:	2300      	movs	r3, #0
   2cc1e:	4903      	ldr	r1, [pc, #12]	; (2cc2c <date_time_handler+0x20>)
   2cc20:	4803      	ldr	r0, [pc, #12]	; (2cc30 <date_time_handler+0x24>)
   2cc22:	f011 bd5b 	b.w	3e6dc <k_delayed_work_submit_to_queue>
   2cc26:	bf00      	nop
   2cc28:	20020c48 	.word	0x20020c48
   2cc2c:	20021c08 	.word	0x20021c08
   2cc30:	200244a8 	.word	0x200244a8

0002cc34 <date_time_set>:

	/** Seconds after the minute. tm_sec is generally 0-59.
	 *  The extra range is to accommodate for leap seconds
	 *  in certain systems.
	 */
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cc34:	6803      	ldr	r3, [r0, #0]
{
   2cc36:	b570      	push	{r4, r5, r6, lr}
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cc38:	2b3d      	cmp	r3, #61	; 0x3d
{
   2cc3a:	4605      	mov	r5, r0
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cc3c:	f240 809c 	bls.w	2cd78 <date_time_set+0x144>
		LOG_ERR("Seconds in time structure not in correct format");
   2cc40:	2301      	movs	r3, #1
   2cc42:	f04f 0000 	mov.w	r0, #0
   2cc46:	4a5a      	ldr	r2, [pc, #360]	; (2cdb0 <date_time_set+0x17c>)
   2cc48:	f363 0007 	bfi	r0, r3, #0, #8
   2cc4c:	4b59      	ldr	r3, [pc, #356]	; (2cdb4 <date_time_set+0x180>)
   2cc4e:	495a      	ldr	r1, [pc, #360]	; (2cdb8 <date_time_set+0x184>)
   2cc50:	1a9b      	subs	r3, r3, r2
   2cc52:	08db      	lsrs	r3, r3, #3
   2cc54:	f363 108f 	bfi	r0, r3, #6, #10
   2cc58:	f015 f9f1 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cc5c:	f06f 0415 	mvn.w	r4, #21
	}

	/** Minutes after the hour. */
	if (new_date_time->tm_min < 0 || new_date_time->tm_min > 59) {
   2cc60:	686b      	ldr	r3, [r5, #4]
   2cc62:	2b3b      	cmp	r3, #59	; 0x3b
   2cc64:	d90f      	bls.n	2cc86 <date_time_set+0x52>
		LOG_ERR("Minutes in time structure not in correct format");
   2cc66:	2301      	movs	r3, #1
   2cc68:	f04f 0000 	mov.w	r0, #0
   2cc6c:	4a50      	ldr	r2, [pc, #320]	; (2cdb0 <date_time_set+0x17c>)
   2cc6e:	f363 0007 	bfi	r0, r3, #0, #8
   2cc72:	4b50      	ldr	r3, [pc, #320]	; (2cdb4 <date_time_set+0x180>)
   2cc74:	4951      	ldr	r1, [pc, #324]	; (2cdbc <date_time_set+0x188>)
   2cc76:	1a9b      	subs	r3, r3, r2
   2cc78:	08db      	lsrs	r3, r3, #3
   2cc7a:	f363 108f 	bfi	r0, r3, #6, #10
   2cc7e:	f015 f9de 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cc82:	f06f 0415 	mvn.w	r4, #21
	}

	/** Hours since midnight. */
	if (new_date_time->tm_hour < 0 || new_date_time->tm_hour > 23) {
   2cc86:	68ab      	ldr	r3, [r5, #8]
   2cc88:	2b17      	cmp	r3, #23
   2cc8a:	d90f      	bls.n	2ccac <date_time_set+0x78>
		LOG_ERR("Hours in time structure not in correct format");
   2cc8c:	2301      	movs	r3, #1
   2cc8e:	f04f 0000 	mov.w	r0, #0
   2cc92:	4a47      	ldr	r2, [pc, #284]	; (2cdb0 <date_time_set+0x17c>)
   2cc94:	f363 0007 	bfi	r0, r3, #0, #8
   2cc98:	4b46      	ldr	r3, [pc, #280]	; (2cdb4 <date_time_set+0x180>)
   2cc9a:	4949      	ldr	r1, [pc, #292]	; (2cdc0 <date_time_set+0x18c>)
   2cc9c:	1a9b      	subs	r3, r3, r2
   2cc9e:	08db      	lsrs	r3, r3, #3
   2cca0:	f363 108f 	bfi	r0, r3, #6, #10
   2cca4:	f015 f9cb 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cca8:	f06f 0415 	mvn.w	r4, #21
	}

	/** Day of the month. */
	if (new_date_time->tm_mday < 1 || new_date_time->tm_mday > 31) {
   2ccac:	68eb      	ldr	r3, [r5, #12]
   2ccae:	3b01      	subs	r3, #1
   2ccb0:	2b1e      	cmp	r3, #30
   2ccb2:	d90f      	bls.n	2ccd4 <date_time_set+0xa0>
		LOG_ERR("Day in time structure not in correct format");
   2ccb4:	2301      	movs	r3, #1
   2ccb6:	f04f 0000 	mov.w	r0, #0
   2ccba:	4a3d      	ldr	r2, [pc, #244]	; (2cdb0 <date_time_set+0x17c>)
   2ccbc:	f363 0007 	bfi	r0, r3, #0, #8
   2ccc0:	4b3c      	ldr	r3, [pc, #240]	; (2cdb4 <date_time_set+0x180>)
   2ccc2:	4940      	ldr	r1, [pc, #256]	; (2cdc4 <date_time_set+0x190>)
   2ccc4:	1a9b      	subs	r3, r3, r2
   2ccc6:	08db      	lsrs	r3, r3, #3
   2ccc8:	f363 108f 	bfi	r0, r3, #6, #10
   2cccc:	f015 f9b7 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2ccd0:	f06f 0415 	mvn.w	r4, #21
	}

	/** Months since January. */
	if (new_date_time->tm_mon < 0 || new_date_time->tm_mon > 11) {
   2ccd4:	692b      	ldr	r3, [r5, #16]
   2ccd6:	2b0b      	cmp	r3, #11
   2ccd8:	d90f      	bls.n	2ccfa <date_time_set+0xc6>
		LOG_ERR("Month in time structure not in correct format");
   2ccda:	2301      	movs	r3, #1
   2ccdc:	f04f 0000 	mov.w	r0, #0
   2cce0:	4a33      	ldr	r2, [pc, #204]	; (2cdb0 <date_time_set+0x17c>)
   2cce2:	f363 0007 	bfi	r0, r3, #0, #8
   2cce6:	4b33      	ldr	r3, [pc, #204]	; (2cdb4 <date_time_set+0x180>)
   2cce8:	4937      	ldr	r1, [pc, #220]	; (2cdc8 <date_time_set+0x194>)
   2ccea:	1a9b      	subs	r3, r3, r2
   2ccec:	08db      	lsrs	r3, r3, #3
   2ccee:	f363 108f 	bfi	r0, r3, #6, #10
   2ccf2:	f015 f9a4 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2ccf6:	f06f 0415 	mvn.w	r4, #21
	}

	/** Years since 1900. 115 corresponds to the year 2015. */
	if (new_date_time->tm_year < 115 || new_date_time->tm_year > 1900) {
   2ccfa:	f240 62f9 	movw	r2, #1785	; 0x6f9
   2ccfe:	696b      	ldr	r3, [r5, #20]
   2cd00:	3b73      	subs	r3, #115	; 0x73
   2cd02:	4293      	cmp	r3, r2
   2cd04:	d90f      	bls.n	2cd26 <date_time_set+0xf2>
		LOG_ERR("Year in time structure not in correct format");
   2cd06:	2301      	movs	r3, #1
   2cd08:	f04f 0000 	mov.w	r0, #0
   2cd0c:	4a28      	ldr	r2, [pc, #160]	; (2cdb0 <date_time_set+0x17c>)
   2cd0e:	f363 0007 	bfi	r0, r3, #0, #8
   2cd12:	4b28      	ldr	r3, [pc, #160]	; (2cdb4 <date_time_set+0x180>)
   2cd14:	492d      	ldr	r1, [pc, #180]	; (2cdcc <date_time_set+0x198>)
   2cd16:	1a9b      	subs	r3, r3, r2
   2cd18:	08db      	lsrs	r3, r3, #3
   2cd1a:	f363 108f 	bfi	r0, r3, #6, #10
   2cd1e:	f015 f98e 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cd22:	f06f 0415 	mvn.w	r4, #21
	}

	/** Days since Sunday. */
	if (new_date_time->tm_wday < 0 || new_date_time->tm_wday > 6) {
   2cd26:	69ab      	ldr	r3, [r5, #24]
   2cd28:	2b06      	cmp	r3, #6
   2cd2a:	d90f      	bls.n	2cd4c <date_time_set+0x118>
		LOG_ERR("Week day in time structure not in correct format");
   2cd2c:	2301      	movs	r3, #1
   2cd2e:	f04f 0000 	mov.w	r0, #0
   2cd32:	4a1f      	ldr	r2, [pc, #124]	; (2cdb0 <date_time_set+0x17c>)
   2cd34:	f363 0007 	bfi	r0, r3, #0, #8
   2cd38:	4b1e      	ldr	r3, [pc, #120]	; (2cdb4 <date_time_set+0x180>)
   2cd3a:	4925      	ldr	r1, [pc, #148]	; (2cdd0 <date_time_set+0x19c>)
   2cd3c:	1a9b      	subs	r3, r3, r2
   2cd3e:	08db      	lsrs	r3, r3, #3
   2cd40:	f363 108f 	bfi	r0, r3, #6, #10
   2cd44:	f015 f97b 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cd48:	f06f 0415 	mvn.w	r4, #21
	}

	/** Days since January 1. */
	if (new_date_time->tm_yday < 0 || new_date_time->tm_yday > 365) {
   2cd4c:	69eb      	ldr	r3, [r5, #28]
   2cd4e:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
   2cd52:	d313      	bcc.n	2cd7c <date_time_set+0x148>
		LOG_ERR("Year day in time structure not in correct format");
   2cd54:	2301      	movs	r3, #1
   2cd56:	f04f 0000 	mov.w	r0, #0
   2cd5a:	4a15      	ldr	r2, [pc, #84]	; (2cdb0 <date_time_set+0x17c>)
   2cd5c:	f363 0007 	bfi	r0, r3, #0, #8
   2cd60:	4b14      	ldr	r3, [pc, #80]	; (2cdb4 <date_time_set+0x180>)
   2cd62:	491c      	ldr	r1, [pc, #112]	; (2cdd4 <date_time_set+0x1a0>)
   2cd64:	1a9b      	subs	r3, r3, r2
   2cd66:	08db      	lsrs	r3, r3, #3
   2cd68:	f363 108f 	bfi	r0, r3, #6, #10
   2cd6c:	f015 f967 	bl	4203e <log_string_sync>
		err = -EINVAL;
   2cd70:	f06f 0415 	mvn.w	r4, #21

	evt.type = DATE_TIME_OBTAINED_EXT;
	date_time_notify_event(&evt);

	return 0;
}
   2cd74:	4620      	mov	r0, r4
   2cd76:	bd70      	pop	{r4, r5, r6, pc}
	int err = 0;
   2cd78:	2400      	movs	r4, #0
   2cd7a:	e771      	b.n	2cc60 <date_time_set+0x2c>
	if (err) {
   2cd7c:	2c00      	cmp	r4, #0
   2cd7e:	d1f9      	bne.n	2cd74 <date_time_set+0x140>
	initial_valid_time = true;
   2cd80:	2201      	movs	r2, #1
   2cd82:	4b15      	ldr	r3, [pc, #84]	; (2cdd8 <date_time_set+0x1a4>)
	time_aux.last_date_time_update = k_uptime_get();
   2cd84:	4e15      	ldr	r6, [pc, #84]	; (2cddc <date_time_set+0x1a8>)
	initial_valid_time = true;
   2cd86:	701a      	strb	r2, [r3, #0]
	time_aux.last_date_time_update = k_uptime_get();
   2cd88:	f017 fed0 	bl	44b2c <k_uptime_get>
   2cd8c:	60b0      	str	r0, [r6, #8]
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2cd8e:	4628      	mov	r0, r5
   2cd90:	f7f7 fd8e 	bl	248b0 <timeutil_timegm64>
   2cd94:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2cd98:	fba0 2305 	umull	r2, r3, r0, r5
   2cd9c:	fb05 3301 	mla	r3, r5, r1, r3
   2cda0:	e9c6 2300 	strd	r2, r3, [r6]
	evt.type = DATE_TIME_OBTAINED_EXT;
   2cda4:	2202      	movs	r2, #2
   2cda6:	4b0e      	ldr	r3, [pc, #56]	; (2cde0 <date_time_set+0x1ac>)
   2cda8:	701a      	strb	r2, [r3, #0]
	date_time_notify_event(&evt);
   2cdaa:	f7ff fdeb 	bl	2c984 <date_time_notify_event.constprop.1>
	return 0;
   2cdae:	e7e1      	b.n	2cd74 <date_time_set+0x140>
   2cdb0:	00046878 	.word	0x00046878
   2cdb4:	000468c0 	.word	0x000468c0
   2cdb8:	0004b754 	.word	0x0004b754
   2cdbc:	0004b784 	.word	0x0004b784
   2cdc0:	0004b7b4 	.word	0x0004b7b4
   2cdc4:	0004b7e2 	.word	0x0004b7e2
   2cdc8:	0004b80e 	.word	0x0004b80e
   2cdcc:	0004b83c 	.word	0x0004b83c
   2cdd0:	0004b869 	.word	0x0004b869
   2cdd4:	0004b89a 	.word	0x0004b89a
   2cdd8:	2002c9de 	.word	0x2002c9de
   2cddc:	20021bf8 	.word	0x20021bf8
   2cde0:	2002c9dd 	.word	0x2002c9dd

0002cde4 <date_time_uptime_to_unix_time_ms>:

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   2cde4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   2cde8:	6803      	ldr	r3, [r0, #0]
{
   2cdea:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   2cdec:	9300      	str	r3, [sp, #0]
   2cdee:	6843      	ldr	r3, [r0, #4]
   2cdf0:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   2cdf2:	4b2b      	ldr	r3, [pc, #172]	; (2cea0 <date_time_uptime_to_unix_time_ms+0xbc>)
   2cdf4:	781b      	ldrb	r3, [r3, #0]
   2cdf6:	b993      	cbnz	r3, 2ce1e <date_time_uptime_to_unix_time_ms+0x3a>
		LOG_WRN("Valid time not currently available");
   2cdf8:	2302      	movs	r3, #2
   2cdfa:	f04f 0000 	mov.w	r0, #0
   2cdfe:	4a29      	ldr	r2, [pc, #164]	; (2cea4 <date_time_uptime_to_unix_time_ms+0xc0>)
   2ce00:	f363 0007 	bfi	r0, r3, #0, #8
   2ce04:	4b28      	ldr	r3, [pc, #160]	; (2cea8 <date_time_uptime_to_unix_time_ms+0xc4>)
   2ce06:	4929      	ldr	r1, [pc, #164]	; (2ceac <date_time_uptime_to_unix_time_ms+0xc8>)
   2ce08:	1a9b      	subs	r3, r3, r2
   2ce0a:	08db      	lsrs	r3, r3, #3
   2ce0c:	f363 108f 	bfi	r0, r3, #6, #10
   2ce10:	f015 f915 	bl	4203e <log_string_sync>
		return -ENODATA;
   2ce14:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   2ce18:	b003      	add	sp, #12
   2ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   2ce1e:	4d24      	ldr	r5, [pc, #144]	; (2ceb0 <date_time_uptime_to_unix_time_ms+0xcc>)
   2ce20:	68a9      	ldr	r1, [r5, #8]
   2ce22:	e9d5 2300 	ldrd	r2, r3, [r5]
   2ce26:	4692      	mov	sl, r2
   2ce28:	1a52      	subs	r2, r2, r1
   2ce2a:	469b      	mov	fp, r3
   2ce2c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   2ce30:	9900      	ldr	r1, [sp, #0]
   2ce32:	1856      	adds	r6, r2, r1
   2ce34:	9901      	ldr	r1, [sp, #4]
   2ce36:	eb43 0701 	adc.w	r7, r3, r1
   2ce3a:	e9c0 6700 	strd	r6, r7, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   2ce3e:	f017 fe75 	bl	44b2c <k_uptime_get>
   2ce42:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   2ce44:	ebba 0a03 	subs.w	sl, sl, r3
   2ce48:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
   2ce4c:	eb1a 0800 	adds.w	r8, sl, r0
   2ce50:	eb4b 0901 	adc.w	r9, fp, r1
   2ce54:	45b0      	cmp	r8, r6
   2ce56:	eb79 0307 	sbcs.w	r3, r9, r7
   2ce5a:	da1f      	bge.n	2ce9c <date_time_uptime_to_unix_time_ms+0xb8>
		LOG_WRN("Uptime to large or previously converted");
   2ce5c:	2302      	movs	r3, #2
   2ce5e:	f04f 0000 	mov.w	r0, #0
   2ce62:	4d11      	ldr	r5, [pc, #68]	; (2cea8 <date_time_uptime_to_unix_time_ms+0xc4>)
   2ce64:	f363 0007 	bfi	r0, r3, #0, #8
   2ce68:	4b0e      	ldr	r3, [pc, #56]	; (2cea4 <date_time_uptime_to_unix_time_ms+0xc0>)
   2ce6a:	4912      	ldr	r1, [pc, #72]	; (2ceb4 <date_time_uptime_to_unix_time_ms+0xd0>)
   2ce6c:	1aed      	subs	r5, r5, r3
   2ce6e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2ce72:	f365 108f 	bfi	r0, r5, #6, #10
   2ce76:	f015 f8e2 	bl	4203e <log_string_sync>
		LOG_WRN("Clear variable or set a new uptime");
   2ce7a:	2302      	movs	r3, #2
   2ce7c:	f04f 0000 	mov.w	r0, #0
   2ce80:	f363 0007 	bfi	r0, r3, #0, #8
   2ce84:	f365 108f 	bfi	r0, r5, #6, #10
   2ce88:	490b      	ldr	r1, [pc, #44]	; (2ceb8 <date_time_uptime_to_unix_time_ms+0xd4>)
   2ce8a:	f015 f8d8 	bl	4203e <log_string_sync>
		*uptime = uptime_prev;
   2ce8e:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   2ce90:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   2ce94:	6023      	str	r3, [r4, #0]
   2ce96:	9b01      	ldr	r3, [sp, #4]
   2ce98:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   2ce9a:	e7bd      	b.n	2ce18 <date_time_uptime_to_unix_time_ms+0x34>
	return 0;
   2ce9c:	2000      	movs	r0, #0
   2ce9e:	e7bb      	b.n	2ce18 <date_time_uptime_to_unix_time_ms+0x34>
   2cea0:	2002c9de 	.word	0x2002c9de
   2cea4:	00046878 	.word	0x00046878
   2cea8:	000468c0 	.word	0x000468c0
   2ceac:	0004b8cb 	.word	0x0004b8cb
   2ceb0:	20021bf8 	.word	0x20021bf8
   2ceb4:	0004b8ee 	.word	0x0004b8ee
   2ceb8:	0004b916 	.word	0x0004b916

0002cebc <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   2cebc:	b508      	push	{r3, lr}
	if (evt_handler) {
   2cebe:	b108      	cbz	r0, 2cec4 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   2cec0:	4b03      	ldr	r3, [pc, #12]	; (2ced0 <date_time_update_async+0x14>)
   2cec2:	6018      	str	r0, [r3, #0]
   2cec4:	4803      	ldr	r0, [pc, #12]	; (2ced4 <date_time_update_async+0x18>)
   2cec6:	f011 f99d 	bl	3e204 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2ceca:	2000      	movs	r0, #0
   2cecc:	bd08      	pop	{r3, pc}
   2cece:	bf00      	nop
   2ced0:	20024964 	.word	0x20024964
   2ced4:	20020c48 	.word	0x20020c48

0002ced8 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   2ced8:	b570      	push	{r4, r5, r6, lr}
   2ceda:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   2cedc:	4c09      	ldr	r4, [pc, #36]	; (2cf04 <cloud_get_binding+0x2c>)
   2cede:	4d0a      	ldr	r5, [pc, #40]	; (2cf08 <cloud_get_binding+0x30>)
   2cee0:	42ac      	cmp	r4, r5
   2cee2:	d101      	bne.n	2cee8 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2cee4:	2400      	movs	r4, #0
   2cee6:	e00a      	b.n	2cefe <cloud_get_binding+0x26>
		if (info->api == NULL) {
   2cee8:	6823      	ldr	r3, [r4, #0]
   2ceea:	b90b      	cbnz	r3, 2cef0 <cloud_get_binding+0x18>
	     info++) {
   2ceec:	3408      	adds	r4, #8
   2ceee:	e7f7      	b.n	2cee0 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   2cef0:	6863      	ldr	r3, [r4, #4]
   2cef2:	4630      	mov	r0, r6
   2cef4:	6819      	ldr	r1, [r3, #0]
   2cef6:	f7f0 f9ab 	bl	1d250 <strcmp>
   2cefa:	2800      	cmp	r0, #0
   2cefc:	d1f6      	bne.n	2ceec <cloud_get_binding+0x14>
}
   2cefe:	4620      	mov	r0, r4
   2cf00:	bd70      	pop	{r4, r5, r6, pc}
   2cf02:	bf00      	nop
   2cf04:	0004ffec 	.word	0x0004ffec
   2cf08:	0004fff4 	.word	0x0004fff4

0002cf0c <api_uninit>:

	return nrf_cloud_init(&params);
}

static int api_uninit(const struct cloud_backend *const backend)
{
   2cf0c:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   2cf0e:	f04f 0000 	mov.w	r0, #0
   2cf12:	2303      	movs	r3, #3
   2cf14:	4a06      	ldr	r2, [pc, #24]	; (2cf30 <api_uninit+0x24>)
   2cf16:	f363 0007 	bfi	r0, r3, #0, #8
   2cf1a:	4b06      	ldr	r3, [pc, #24]	; (2cf34 <api_uninit+0x28>)
   2cf1c:	4906      	ldr	r1, [pc, #24]	; (2cf38 <api_uninit+0x2c>)
   2cf1e:	1a9b      	subs	r3, r3, r2
   2cf20:	08db      	lsrs	r3, r3, #3
   2cf22:	f363 108f 	bfi	r0, r3, #6, #10
   2cf26:	f015 f88a 	bl	4203e <log_string_sync>

	return 0;
}
   2cf2a:	2000      	movs	r0, #0
   2cf2c:	bd08      	pop	{r3, pc}
   2cf2e:	bf00      	nop
   2cf30:	00046878 	.word	0x00046878
   2cf34:	00046948 	.word	0x00046948
   2cf38:	0004bc55 	.word	0x0004bc55

0002cf3c <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   2cf3c:	b570      	push	{r4, r5, r6, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   2cf3e:	694c      	ldr	r4, [r1, #20]
{
   2cf40:	b086      	sub	sp, #24
   2cf42:	460e      	mov	r6, r1
	if (msg->endpoint.len != 0) {
   2cf44:	2c00      	cmp	r4, #0
   2cf46:	d15c      	bne.n	2d002 <api_send+0xc6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   2cf48:	898d      	ldrh	r5, [r1, #12]
   2cf4a:	b195      	cbz	r5, 2cf72 <api_send+0x36>
   2cf4c:	2d01      	cmp	r5, #1
   2cf4e:	d037      	beq.n	2cfc0 <api_send+0x84>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   2cf50:	2304      	movs	r3, #4
   2cf52:	f04f 0000 	mov.w	r0, #0
   2cf56:	4a2c      	ldr	r2, [pc, #176]	; (2d008 <api_send+0xcc>)
   2cf58:	f363 0007 	bfi	r0, r3, #0, #8
   2cf5c:	4b2b      	ldr	r3, [pc, #172]	; (2d00c <api_send+0xd0>)
   2cf5e:	492c      	ldr	r1, [pc, #176]	; (2d010 <api_send+0xd4>)
   2cf60:	1a9b      	subs	r3, r3, r2
   2cf62:	08db      	lsrs	r3, r3, #3
   2cf64:	f363 108f 	bfi	r0, r3, #6, #10
   2cf68:	4a2a      	ldr	r2, [pc, #168]	; (2d014 <api_send+0xd8>)
   2cf6a:	462b      	mov	r3, r5
   2cf6c:	f015 f867 	bl	4203e <log_string_sync>
		break;
	}

	if (err) {
   2cf70:	e00c      	b.n	2cf8c <api_send+0x50>
		const struct nct_dc_data buf = {
   2cf72:	684b      	ldr	r3, [r1, #4]
   2cf74:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2cf78:	9300      	str	r3, [sp, #0]
   2cf7a:	680b      	ldr	r3, [r1, #0]
   2cf7c:	9504      	str	r5, [sp, #16]
   2cf7e:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   2cf80:	7a0b      	ldrb	r3, [r1, #8]
   2cf82:	b933      	cbnz	r3, 2cf92 <api_send+0x56>
			err = nct_dc_stream(&buf);
   2cf84:	4668      	mov	r0, sp
   2cf86:	f017 fea5 	bl	44cd4 <nct_dc_stream>
			err = nct_dc_send(&buf);
   2cf8a:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   2cf8c:	4620      	mov	r0, r4
   2cf8e:	b006      	add	sp, #24
   2cf90:	bd70      	pop	{r4, r5, r6, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   2cf92:	2b01      	cmp	r3, #1
   2cf94:	d103      	bne.n	2cf9e <api_send+0x62>
			err = nct_dc_send(&buf);
   2cf96:	4668      	mov	r0, sp
   2cf98:	f017 fe99 	bl	44cce <nct_dc_send>
   2cf9c:	e7f5      	b.n	2cf8a <api_send+0x4e>
			LOG_ERR("Unsupported QoS setting.");
   2cf9e:	2301      	movs	r3, #1
   2cfa0:	f04f 0000 	mov.w	r0, #0
   2cfa4:	4a18      	ldr	r2, [pc, #96]	; (2d008 <api_send+0xcc>)
   2cfa6:	f363 0007 	bfi	r0, r3, #0, #8
   2cfaa:	4b18      	ldr	r3, [pc, #96]	; (2d00c <api_send+0xd0>)
   2cfac:	491a      	ldr	r1, [pc, #104]	; (2d018 <api_send+0xdc>)
   2cfae:	1a9b      	subs	r3, r3, r2
   2cfb0:	08db      	lsrs	r3, r3, #3
   2cfb2:	f363 108f 	bfi	r0, r3, #6, #10
   2cfb6:	f015 f842 	bl	4203e <log_string_sync>
			return err;
   2cfba:	f06f 0415 	mvn.w	r4, #21
   2cfbe:	e7e5      	b.n	2cf8c <api_send+0x50>
		struct nct_cc_data shadow_data = {
   2cfc0:	4621      	mov	r1, r4
   2cfc2:	2210      	movs	r2, #16
   2cfc4:	a802      	add	r0, sp, #8
   2cfc6:	f018 f94f 	bl	45268 <memset>
   2cfca:	6873      	ldr	r3, [r6, #4]
		err = nct_cc_send(&shadow_data);
   2cfcc:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2cfce:	9300      	str	r3, [sp, #0]
   2cfd0:	6833      	ldr	r3, [r6, #0]
   2cfd2:	f88d 5014 	strb.w	r5, [sp, #20]
   2cfd6:	9301      	str	r3, [sp, #4]
		err = nct_cc_send(&shadow_data);
   2cfd8:	f001 ff44 	bl	2ee64 <nct_cc_send>
		if (err) {
   2cfdc:	4604      	mov	r4, r0
   2cfde:	2800      	cmp	r0, #0
   2cfe0:	d0d4      	beq.n	2cf8c <api_send+0x50>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2cfe2:	2301      	movs	r3, #1
   2cfe4:	f04f 0000 	mov.w	r0, #0
   2cfe8:	4a07      	ldr	r2, [pc, #28]	; (2d008 <api_send+0xcc>)
   2cfea:	f363 0007 	bfi	r0, r3, #0, #8
   2cfee:	4b07      	ldr	r3, [pc, #28]	; (2d00c <api_send+0xd0>)
   2cff0:	490a      	ldr	r1, [pc, #40]	; (2d01c <api_send+0xe0>)
   2cff2:	1a9b      	subs	r3, r3, r2
   2cff4:	08db      	lsrs	r3, r3, #3
   2cff6:	f363 108f 	bfi	r0, r3, #6, #10
   2cffa:	4622      	mov	r2, r4
   2cffc:	f015 f81f 	bl	4203e <log_string_sync>
			return err;
   2d000:	e7c4      	b.n	2cf8c <api_send+0x50>
		return -ENOTSUP;
   2d002:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2d006:	e7c1      	b.n	2cf8c <api_send+0x50>
   2d008:	00046878 	.word	0x00046878
   2d00c:	00046948 	.word	0x00046948
   2d010:	0004bc31 	.word	0x0004bc31
   2d014:	0004ba5d 	.word	0x0004ba5d
   2d018:	0004bbf9 	.word	0x0004bbf9
   2d01c:	0004bc12 	.word	0x0004bc12

0002d020 <translate_connect_error>:
	switch (err) {
   2d020:	f110 0f16 	cmn.w	r0, #22
{
   2d024:	b508      	push	{r3, lr}
   2d026:	4602      	mov	r2, r0
	switch (err) {
   2d028:	d035      	beq.n	2d096 <translate_connect_error+0x76>
   2d02a:	dc20      	bgt.n	2d06e <translate_connect_error+0x4e>
   2d02c:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2d030:	d034      	beq.n	2d09c <translate_connect_error+0x7c>
   2d032:	dc13      	bgt.n	2d05c <translate_connect_error+0x3c>
   2d034:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2d038:	d033      	beq.n	2d0a2 <translate_connect_error+0x82>
		LOG_ERR("nRF cloud connect failed %d", err);
   2d03a:	2301      	movs	r3, #1
   2d03c:	f04f 0000 	mov.w	r0, #0
   2d040:	491f      	ldr	r1, [pc, #124]	; (2d0c0 <translate_connect_error+0xa0>)
   2d042:	f363 0007 	bfi	r0, r3, #0, #8
   2d046:	4b1f      	ldr	r3, [pc, #124]	; (2d0c4 <translate_connect_error+0xa4>)
   2d048:	1a5b      	subs	r3, r3, r1
   2d04a:	08db      	lsrs	r3, r3, #3
   2d04c:	f363 108f 	bfi	r0, r3, #6, #10
   2d050:	491d      	ldr	r1, [pc, #116]	; (2d0c8 <translate_connect_error+0xa8>)
   2d052:	f014 fff4 	bl	4203e <log_string_sync>
		return CLOUD_CONNECT_RES_ERR_MISC;
   2d056:	f06f 0204 	mvn.w	r2, #4
   2d05a:	e01a      	b.n	2d092 <translate_connect_error+0x72>
	switch (err) {
   2d05c:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2d060:	d022      	beq.n	2d0a8 <translate_connect_error+0x88>
   2d062:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2d066:	d1e8      	bne.n	2d03a <translate_connect_error+0x1a>
		return CLOUD_CONNECT_RES_ERR_CERT;
   2d068:	f06f 0207 	mvn.w	r2, #7
   2d06c:	e011      	b.n	2d092 <translate_connect_error+0x72>
	switch (err) {
   2d06e:	f110 0f0a 	cmn.w	r0, #10
   2d072:	d01c      	beq.n	2d0ae <translate_connect_error+0x8e>
   2d074:	dc08      	bgt.n	2d088 <translate_connect_error+0x68>
   2d076:	f110 0f0d 	cmn.w	r0, #13
   2d07a:	d01b      	beq.n	2d0b4 <translate_connect_error+0x94>
   2d07c:	f110 0f0c 	cmn.w	r0, #12
   2d080:	d1db      	bne.n	2d03a <translate_connect_error+0x1a>
		return CLOUD_CONNECT_RES_ERR_NO_MEM;
   2d082:	f06f 0205 	mvn.w	r2, #5
   2d086:	e004      	b.n	2d092 <translate_connect_error+0x72>
	switch (err) {
   2d088:	f110 0f08 	cmn.w	r0, #8
   2d08c:	d015      	beq.n	2d0ba <translate_connect_error+0x9a>
   2d08e:	2800      	cmp	r0, #0
   2d090:	d1d3      	bne.n	2d03a <translate_connect_error+0x1a>
}
   2d092:	4610      	mov	r0, r2
   2d094:	bd08      	pop	{r3, pc}
		return CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2d096:	f06f 0206 	mvn.w	r2, #6
   2d09a:	e7fa      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2d09c:	f06f 0209 	mvn.w	r2, #9
   2d0a0:	e7f7      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2d0a2:	f06f 020a 	mvn.w	r2, #10
   2d0a6:	e7f4      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2d0a8:	f06f 0208 	mvn.w	r2, #8
   2d0ac:	e7f1      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_NETWORK;
   2d0ae:	f06f 0202 	mvn.w	r2, #2
   2d0b2:	e7ee      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2d0b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d0b8:	e7eb      	b.n	2d092 <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_BACKEND;
   2d0ba:	f06f 0203 	mvn.w	r2, #3
   2d0be:	e7e8      	b.n	2d092 <translate_connect_error+0x72>
   2d0c0:	00046878 	.word	0x00046878
   2d0c4:	00046948 	.word	0x00046948
   2d0c8:	0004be0f 	.word	0x0004be0f

0002d0cc <api_connect>:
	if (current_state == STATE_IDLE) {
   2d0cc:	4b14      	ldr	r3, [pc, #80]	; (2d120 <api_connect+0x54>)
{
   2d0ce:	b510      	push	{r4, lr}
	if (current_state == STATE_IDLE) {
   2d0d0:	781b      	ldrb	r3, [r3, #0]
   2d0d2:	b30b      	cbz	r3, 2d118 <api_connect+0x4c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d0d4:	4b13      	ldr	r3, [pc, #76]	; (2d124 <api_connect+0x58>)
   2d0d6:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   2d0da:	b1a4      	cbz	r4, 2d106 <api_connect+0x3a>
		LOG_DBG("Connection poll in progress");
   2d0dc:	2304      	movs	r3, #4
   2d0de:	f04f 0000 	mov.w	r0, #0
   2d0e2:	4a11      	ldr	r2, [pc, #68]	; (2d128 <api_connect+0x5c>)
   2d0e4:	f363 0007 	bfi	r0, r3, #0, #8
   2d0e8:	4b10      	ldr	r3, [pc, #64]	; (2d12c <api_connect+0x60>)
   2d0ea:	4911      	ldr	r1, [pc, #68]	; (2d130 <api_connect+0x64>)
   2d0ec:	1a9b      	subs	r3, r3, r2
   2d0ee:	08db      	lsrs	r3, r3, #3
   2d0f0:	f363 108f 	bfi	r0, r3, #6, #10
   2d0f4:	4a0f      	ldr	r2, [pc, #60]	; (2d134 <api_connect+0x68>)
   2d0f6:	f014 ffa2 	bl	4203e <log_string_sync>
		return -EINPROGRESS;
   2d0fa:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   2d0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return translate_connect_error(err);
   2d102:	f7ff bf8d 	b.w	2d020 <translate_connect_error>
	atomic_set(&disconnect_requested, 0);
   2d106:	4621      	mov	r1, r4
   2d108:	480b      	ldr	r0, [pc, #44]	; (2d138 <api_connect+0x6c>)
   2d10a:	f017 fd30 	bl	44b6e <atomic_set>
   2d10e:	480b      	ldr	r0, [pc, #44]	; (2d13c <api_connect+0x70>)
   2d110:	f011 f878 	bl	3e204 <z_impl_k_sem_give>
	return CLOUD_CONNECT_RES_SUCCESS;
   2d114:	4620      	mov	r0, r4
   2d116:	e7f2      	b.n	2d0fe <api_connect+0x32>
		return -EACCES;
   2d118:	f06f 000c 	mvn.w	r0, #12
   2d11c:	e7ef      	b.n	2d0fe <api_connect+0x32>
   2d11e:	bf00      	nop
   2d120:	2002c9df 	.word	0x2002c9df
   2d124:	200249bc 	.word	0x200249bc
   2d128:	00046878 	.word	0x00046878
   2d12c:	00046948 	.word	0x00046948
   2d130:	0004ba74 	.word	0x0004ba74
   2d134:	0004ba47 	.word	0x0004ba47
   2d138:	200249c0 	.word	0x200249c0
   2d13c:	20020bd0 	.word	0x20020bd0

0002d140 <api_event_handler>:
{
   2d140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d144:	4607      	mov	r7, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2d146:	4c78      	ldr	r4, [pc, #480]	; (2d328 <api_event_handler+0x1e8>)
{
   2d148:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2d14a:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   2d14c:	221c      	movs	r2, #28
   2d14e:	2100      	movs	r1, #0
   2d150:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2d152:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   2d154:	f018 f888 	bl	45268 <memset>
	switch (nrf_cloud_evt->type) {
   2d158:	783e      	ldrb	r6, [r7, #0]
   2d15a:	4a74      	ldr	r2, [pc, #464]	; (2d32c <api_event_handler+0x1ec>)
   2d15c:	4b74      	ldr	r3, [pc, #464]	; (2d330 <api_event_handler+0x1f0>)
   2d15e:	2e05      	cmp	r6, #5
   2d160:	eba2 0203 	sub.w	r2, r2, r3
   2d164:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2d168:	46a0      	mov	r8, r4
   2d16a:	f000 8084 	beq.w	2d276 <api_event_handler+0x136>
   2d16e:	d822      	bhi.n	2d1b6 <api_event_handler+0x76>
   2d170:	2e02      	cmp	r6, #2
   2d172:	d064      	beq.n	2d23e <api_event_handler+0xfe>
   2d174:	d80e      	bhi.n	2d194 <api_event_handler+0x54>
   2d176:	2e01      	cmp	r6, #1
   2d178:	d04b      	beq.n	2d212 <api_event_handler+0xd2>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   2d17a:	2304      	movs	r3, #4
   2d17c:	f04f 0000 	mov.w	r0, #0
   2d180:	f363 0007 	bfi	r0, r3, #0, #8
   2d184:	f362 108f 	bfi	r0, r2, #6, #10
   2d188:	4633      	mov	r3, r6
   2d18a:	4a6a      	ldr	r2, [pc, #424]	; (2d334 <api_event_handler+0x1f4>)
   2d18c:	496a      	ldr	r1, [pc, #424]	; (2d338 <api_event_handler+0x1f8>)
   2d18e:	f014 ff56 	bl	4203e <log_string_sync>
}
   2d192:	e07b      	b.n	2d28c <api_event_handler+0x14c>
	switch (nrf_cloud_evt->type) {
   2d194:	2e03      	cmp	r6, #3
   2d196:	d061      	beq.n	2d25c <api_event_handler+0x11c>
   2d198:	2e04      	cmp	r6, #4
   2d19a:	d1ee      	bne.n	2d17a <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   2d19c:	2304      	movs	r3, #4
   2d19e:	f04f 0000 	mov.w	r0, #0
   2d1a2:	f363 0007 	bfi	r0, r3, #0, #8
   2d1a6:	f362 108f 	bfi	r0, r2, #6, #10
   2d1aa:	4964      	ldr	r1, [pc, #400]	; (2d33c <api_event_handler+0x1fc>)
   2d1ac:	4a61      	ldr	r2, [pc, #388]	; (2d334 <api_event_handler+0x1f4>)
   2d1ae:	f014 ff46 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2d1b2:	2303      	movs	r3, #3
   2d1b4:	e04f      	b.n	2d256 <api_event_handler+0x116>
	switch (nrf_cloud_evt->type) {
   2d1b6:	2e08      	cmp	r6, #8
   2d1b8:	d06b      	beq.n	2d292 <api_event_handler+0x152>
   2d1ba:	d811      	bhi.n	2d1e0 <api_event_handler+0xa0>
   2d1bc:	2e06      	cmp	r6, #6
   2d1be:	f000 808d 	beq.w	2d2dc <api_event_handler+0x19c>
   2d1c2:	2e07      	cmp	r6, #7
   2d1c4:	d1d9      	bne.n	2d17a <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   2d1c6:	2304      	movs	r3, #4
   2d1c8:	f04f 0000 	mov.w	r0, #0
   2d1cc:	f363 0007 	bfi	r0, r3, #0, #8
   2d1d0:	f362 108f 	bfi	r0, r2, #6, #10
   2d1d4:	495a      	ldr	r1, [pc, #360]	; (2d340 <api_event_handler+0x200>)
   2d1d6:	4a57      	ldr	r2, [pc, #348]	; (2d334 <api_event_handler+0x1f4>)
   2d1d8:	f014 ff31 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2d1dc:	2305      	movs	r3, #5
   2d1de:	e03a      	b.n	2d256 <api_event_handler+0x116>
	switch (nrf_cloud_evt->type) {
   2d1e0:	2e09      	cmp	r6, #9
   2d1e2:	f000 8094 	beq.w	2d30e <api_event_handler+0x1ce>
   2d1e6:	2eff      	cmp	r6, #255	; 0xff
   2d1e8:	d1c7      	bne.n	2d17a <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   2d1ea:	2304      	movs	r3, #4
   2d1ec:	f04f 0000 	mov.w	r0, #0
   2d1f0:	f363 0007 	bfi	r0, r3, #0, #8
   2d1f4:	f362 108f 	bfi	r0, r2, #6, #10
   2d1f8:	687b      	ldr	r3, [r7, #4]
   2d1fa:	4a4e      	ldr	r2, [pc, #312]	; (2d334 <api_event_handler+0x1f4>)
   2d1fc:	4951      	ldr	r1, [pc, #324]	; (2d344 <api_event_handler+0x204>)
   2d1fe:	f014 ff1e 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   2d202:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d204:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_ERROR;
   2d206:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d20a:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d20e:	6820      	ldr	r0, [r4, #0]
   2d210:	e061      	b.n	2d2d6 <api_event_handler+0x196>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   2d212:	2304      	movs	r3, #4
   2d214:	f04f 0000 	mov.w	r0, #0
   2d218:	f363 0007 	bfi	r0, r3, #0, #8
   2d21c:	f362 108f 	bfi	r0, r2, #6, #10
   2d220:	4949      	ldr	r1, [pc, #292]	; (2d348 <api_event_handler+0x208>)
   2d222:	4a44      	ldr	r2, [pc, #272]	; (2d334 <api_event_handler+0x1f4>)
   2d224:	f014 ff0b 	bl	4203e <log_string_sync>
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2d228:	687b      	ldr	r3, [r7, #4]
		evt.type = CLOUD_EVT_CONNECTED;
   2d22a:	f88d 6004 	strb.w	r6, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2d22e:	3300      	adds	r3, #0
   2d230:	bf18      	it	ne
   2d232:	2301      	movne	r3, #1
   2d234:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d238:	68ea      	ldr	r2, [r5, #12]
   2d23a:	a901      	add	r1, sp, #4
   2d23c:	e7e7      	b.n	2d20e <api_event_handler+0xce>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   2d23e:	2304      	movs	r3, #4
   2d240:	f04f 0000 	mov.w	r0, #0
   2d244:	f363 0007 	bfi	r0, r3, #0, #8
   2d248:	f362 108f 	bfi	r0, r2, #6, #10
   2d24c:	493f      	ldr	r1, [pc, #252]	; (2d34c <api_event_handler+0x20c>)
   2d24e:	4a39      	ldr	r2, [pc, #228]	; (2d334 <api_event_handler+0x1f4>)
   2d250:	f014 fef5 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   2d254:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_FOTA_DONE;
   2d256:	f88d 3004 	strb.w	r3, [sp, #4]
   2d25a:	e7ed      	b.n	2d238 <api_event_handler+0xf8>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   2d25c:	2304      	movs	r3, #4
   2d25e:	f04f 0000 	mov.w	r0, #0
   2d262:	f363 0007 	bfi	r0, r3, #0, #8
   2d266:	f362 108f 	bfi	r0, r2, #6, #10
   2d26a:	4939      	ldr	r1, [pc, #228]	; (2d350 <api_event_handler+0x210>)
   2d26c:	4a31      	ldr	r2, [pc, #196]	; (2d334 <api_event_handler+0x1f4>)
   2d26e:	f014 fee6 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   2d272:	2308      	movs	r3, #8
   2d274:	e7ef      	b.n	2d256 <api_event_handler+0x116>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   2d276:	f04f 0000 	mov.w	r0, #0
   2d27a:	2304      	movs	r3, #4
   2d27c:	f363 0007 	bfi	r0, r3, #0, #8
   2d280:	f362 108f 	bfi	r0, r2, #6, #10
   2d284:	4933      	ldr	r1, [pc, #204]	; (2d354 <api_event_handler+0x214>)
   2d286:	4a2b      	ldr	r2, [pc, #172]	; (2d334 <api_event_handler+0x1f4>)
   2d288:	f014 fed9 	bl	4203e <log_string_sync>
}
   2d28c:	b008      	add	sp, #32
   2d28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   2d292:	2304      	movs	r3, #4
   2d294:	f04f 0000 	mov.w	r0, #0
   2d298:	f363 0007 	bfi	r0, r3, #0, #8
   2d29c:	f362 108f 	bfi	r0, r2, #6, #10
   2d2a0:	492d      	ldr	r1, [pc, #180]	; (2d358 <api_event_handler+0x218>)
   2d2a2:	4a24      	ldr	r2, [pc, #144]	; (2d334 <api_event_handler+0x1f4>)
   2d2a4:	f014 fecb 	bl	4203e <log_string_sync>
		evt.data.err = CLOUD_DISCONNECT_MISC;
   2d2a8:	2303      	movs	r3, #3
   2d2aa:	9302      	str	r3, [sp, #8]
   2d2ac:	4b2b      	ldr	r3, [pc, #172]	; (2d35c <api_event_handler+0x21c>)
   2d2ae:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&disconnect_requested)) {
   2d2b2:	b12b      	cbz	r3, 2d2c0 <api_event_handler+0x180>
   2d2b4:	4b2a      	ldr	r3, [pc, #168]	; (2d360 <api_event_handler+0x220>)
   2d2b6:	e8d3 3faf 	lda	r3, [r3]
			if (atomic_get(&connection_poll_active)) {
   2d2ba:	2b00      	cmp	r3, #0
   2d2bc:	d1e6      	bne.n	2d28c <api_event_handler+0x14c>
			evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2d2be:	9302      	str	r3, [sp, #8]
		atomic_set(&transport_disconnected, 1);
   2d2c0:	2101      	movs	r1, #1
   2d2c2:	4828      	ldr	r0, [pc, #160]	; (2d364 <api_event_handler+0x224>)
   2d2c4:	f017 fc53 	bl	44b6e <atomic_set>
		evt.type = CLOUD_EVT_DISCONNECTED;
   2d2c8:	2302      	movs	r3, #2
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d2ca:	68ea      	ldr	r2, [r5, #12]
   2d2cc:	f8d8 0000 	ldr.w	r0, [r8]
		evt.type = CLOUD_EVT_DISCONNECTED;
   2d2d0:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d2d4:	a901      	add	r1, sp, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d2d6:	f017 fc41 	bl	44b5c <cloud_notify_event>
		break;
   2d2da:	e7d7      	b.n	2d28c <api_event_handler+0x14c>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2d2dc:	2304      	movs	r3, #4
   2d2de:	f04f 0000 	mov.w	r0, #0
   2d2e2:	f363 0007 	bfi	r0, r3, #0, #8
   2d2e6:	f362 108f 	bfi	r0, r2, #6, #10
   2d2ea:	491f      	ldr	r1, [pc, #124]	; (2d368 <api_event_handler+0x228>)
   2d2ec:	4a11      	ldr	r2, [pc, #68]	; (2d334 <api_event_handler+0x1f4>)
   2d2ee:	f014 fea6 	bl	4203e <log_string_sync>
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2d2f2:	68fb      	ldr	r3, [r7, #12]
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   2d2f4:	f88d 6004 	strb.w	r6, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2d2f8:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2d2fa:	68bb      	ldr	r3, [r7, #8]
   2d2fc:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_TOPIC_MSG;
   2d2fe:	2300      	movs	r3, #0
   2d300:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   2d304:	697b      	ldr	r3, [r7, #20]
   2d306:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   2d308:	693b      	ldr	r3, [r7, #16]
   2d30a:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d30c:	e794      	b.n	2d238 <api_event_handler+0xf8>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   2d30e:	2304      	movs	r3, #4
   2d310:	f04f 0000 	mov.w	r0, #0
   2d314:	f363 0007 	bfi	r0, r3, #0, #8
   2d318:	f362 108f 	bfi	r0, r2, #6, #10
   2d31c:	4913      	ldr	r1, [pc, #76]	; (2d36c <api_event_handler+0x22c>)
   2d31e:	4a05      	ldr	r2, [pc, #20]	; (2d334 <api_event_handler+0x1f4>)
   2d320:	f014 fe8d 	bl	4203e <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   2d324:	230a      	movs	r3, #10
   2d326:	e796      	b.n	2d256 <api_event_handler+0x116>
   2d328:	200249c4 	.word	0x200249c4
   2d32c:	00046948 	.word	0x00046948
   2d330:	00046878 	.word	0x00046878
   2d334:	0004ba35 	.word	0x0004ba35
   2d338:	0004bbde 	.word	0x0004bbde
   2d33c:	0004bb07 	.word	0x0004bb07
   2d340:	0004bb41 	.word	0x0004bb41
   2d344:	0004bb8c 	.word	0x0004bb8c
   2d348:	0004ba94 	.word	0x0004ba94
   2d34c:	0004baba 	.word	0x0004baba
   2d350:	0004bae5 	.word	0x0004bae5
   2d354:	0004bb1f 	.word	0x0004bb1f
   2d358:	0004bb63 	.word	0x0004bb63
   2d35c:	200249c0 	.word	0x200249c0
   2d360:	200249bc 	.word	0x200249bc
   2d364:	200249c8 	.word	0x200249c8
   2d368:	0004bba8 	.word	0x0004bba8
   2d36c:	0004bbc2 	.word	0x0004bbc2

0002d370 <nfsm_get_current_state>:
	return current_state;
   2d370:	4b01      	ldr	r3, [pc, #4]	; (2d378 <nfsm_get_current_state+0x8>)
   2d372:	7818      	ldrb	r0, [r3, #0]
}
   2d374:	4770      	bx	lr
   2d376:	bf00      	nop
   2d378:	2002c9df 	.word	0x2002c9df

0002d37c <nfsm_set_current_state_and_notify>:
{
   2d37c:	b538      	push	{r3, r4, r5, lr}
   2d37e:	4605      	mov	r5, r0
   2d380:	460c      	mov	r4, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2d382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d38a:	4810      	ldr	r0, [pc, #64]	; (2d3cc <nfsm_set_current_state_and_notify+0x50>)
   2d38c:	f00f fb2a 	bl	3c9e4 <z_impl_k_mutex_lock>
	LOG_DBG("state: %d", state);
   2d390:	2304      	movs	r3, #4
   2d392:	f04f 0000 	mov.w	r0, #0
   2d396:	4a0e      	ldr	r2, [pc, #56]	; (2d3d0 <nfsm_set_current_state_and_notify+0x54>)
   2d398:	f363 0007 	bfi	r0, r3, #0, #8
   2d39c:	4b0d      	ldr	r3, [pc, #52]	; (2d3d4 <nfsm_set_current_state_and_notify+0x58>)
   2d39e:	490e      	ldr	r1, [pc, #56]	; (2d3d8 <nfsm_set_current_state_and_notify+0x5c>)
   2d3a0:	1a9b      	subs	r3, r3, r2
   2d3a2:	08db      	lsrs	r3, r3, #3
   2d3a4:	f363 108f 	bfi	r0, r3, #6, #10
   2d3a8:	4a0c      	ldr	r2, [pc, #48]	; (2d3dc <nfsm_set_current_state_and_notify+0x60>)
   2d3aa:	462b      	mov	r3, r5
   2d3ac:	f014 fe47 	bl	4203e <log_string_sync>
	current_state = state;
   2d3b0:	4b0b      	ldr	r3, [pc, #44]	; (2d3e0 <nfsm_set_current_state_and_notify+0x64>)
   2d3b2:	701d      	strb	r5, [r3, #0]
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2d3b4:	4b0b      	ldr	r3, [pc, #44]	; (2d3e4 <nfsm_set_current_state_and_notify+0x68>)
   2d3b6:	681b      	ldr	r3, [r3, #0]
   2d3b8:	b113      	cbz	r3, 2d3c0 <nfsm_set_current_state_and_notify+0x44>
   2d3ba:	b10c      	cbz	r4, 2d3c0 <nfsm_set_current_state_and_notify+0x44>
		app_event_handler(evt);
   2d3bc:	4620      	mov	r0, r4
   2d3be:	4798      	blx	r3
}
   2d3c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_mutex_unlock(mutex);
   2d3c4:	4801      	ldr	r0, [pc, #4]	; (2d3cc <nfsm_set_current_state_and_notify+0x50>)
   2d3c6:	f00f bc0b 	b.w	3cbe0 <z_impl_k_mutex_unlock>
   2d3ca:	bf00      	nop
   2d3cc:	20020b4c 	.word	0x20020b4c
   2d3d0:	00046878 	.word	0x00046878
   2d3d4:	00046948 	.word	0x00046948
   2d3d8:	0004bc71 	.word	0x0004bc71
   2d3dc:	0004ba13 	.word	0x0004ba13
   2d3e0:	2002c9df 	.word	0x2002c9df
   2d3e4:	200249b8 	.word	0x200249b8

0002d3e8 <nrf_cloud_init>:
{
   2d3e8:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE) {
   2d3ea:	4c0d      	ldr	r4, [pc, #52]	; (2d420 <nrf_cloud_init+0x38>)
{
   2d3ec:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE) {
   2d3ee:	7823      	ldrb	r3, [r4, #0]
   2d3f0:	b983      	cbnz	r3, 2d414 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   2d3f2:	6803      	ldr	r3, [r0, #0]
   2d3f4:	b18b      	cbz	r3, 2d41a <nrf_cloud_init+0x32>
	err = nfsm_init();
   2d3f6:	f000 fe83 	bl	2e100 <nfsm_init>
	if (err) {
   2d3fa:	b950      	cbnz	r0, 2d412 <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   2d3fc:	f017 fc11 	bl	44c22 <nrf_codec_init>
	if (err) {
   2d400:	b938      	cbnz	r0, 2d412 <nrf_cloud_init+0x2a>
	err = nct_init();
   2d402:	f001 faef 	bl	2e9e4 <nct_init>
	if (err) {
   2d406:	b920      	cbnz	r0, 2d412 <nrf_cloud_init+0x2a>
	app_event_handler = param->event_handler;
   2d408:	4b06      	ldr	r3, [pc, #24]	; (2d424 <nrf_cloud_init+0x3c>)
   2d40a:	682a      	ldr	r2, [r5, #0]
   2d40c:	601a      	str	r2, [r3, #0]
	current_state = STATE_INITIALIZED;
   2d40e:	2301      	movs	r3, #1
   2d410:	7023      	strb	r3, [r4, #0]
}
   2d412:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   2d414:	f06f 000c 	mvn.w	r0, #12
   2d418:	e7fb      	b.n	2d412 <nrf_cloud_init+0x2a>
		return -EINVAL;
   2d41a:	f06f 0015 	mvn.w	r0, #21
   2d41e:	e7f8      	b.n	2d412 <nrf_cloud_init+0x2a>
   2d420:	2002c9df 	.word	0x2002c9df
   2d424:	200249b8 	.word	0x200249b8

0002d428 <api_init>:
{
   2d428:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2d42a:	4b06      	ldr	r3, [pc, #24]	; (2d444 <api_init+0x1c>)
   2d42c:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2d42e:	6843      	ldr	r3, [r0, #4]
   2d430:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2d432:	4b05      	ldr	r3, [pc, #20]	; (2d448 <api_init+0x20>)
   2d434:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   2d436:	a801      	add	r0, sp, #4
   2d438:	f7ff ffd6 	bl	2d3e8 <nrf_cloud_init>
}
   2d43c:	b003      	add	sp, #12
   2d43e:	f85d fb04 	ldr.w	pc, [sp], #4
   2d442:	bf00      	nop
   2d444:	0002d141 	.word	0x0002d141
   2d448:	200249c4 	.word	0x200249c4

0002d44c <nrf_cloud_connect>:
{
   2d44c:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2d44e:	4b07      	ldr	r3, [pc, #28]	; (2d46c <nrf_cloud_connect+0x20>)
   2d450:	781b      	ldrb	r3, [r3, #0]
   2d452:	2b01      	cmp	r3, #1
   2d454:	d807      	bhi.n	2d466 <nrf_cloud_connect+0x1a>
	atomic_set(&disconnect_requested, 0);
   2d456:	2100      	movs	r1, #0
   2d458:	4805      	ldr	r0, [pc, #20]	; (2d470 <nrf_cloud_connect+0x24>)
   2d45a:	f017 fb88 	bl	44b6e <atomic_set>
}
   2d45e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_connect();
   2d462:	f001 bc55 	b.w	2ed10 <nct_connect>
}
   2d466:	f06f 000c 	mvn.w	r0, #12
   2d46a:	bd08      	pop	{r3, pc}
   2d46c:	2002c9df 	.word	0x2002c9df
   2d470:	200249c0 	.word	0x200249c0

0002d474 <nrf_cloud_disconnect>:
{
   2d474:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d476:	4b09      	ldr	r3, [pc, #36]	; (2d49c <nrf_cloud_disconnect+0x28>)
   2d478:	781a      	ldrb	r2, [r3, #0]
   2d47a:	2a09      	cmp	r2, #9
   2d47c:	d902      	bls.n	2d484 <nrf_cloud_disconnect+0x10>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2d47e:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d480:	2b04      	cmp	r3, #4
   2d482:	d807      	bhi.n	2d494 <nrf_cloud_disconnect+0x20>
	atomic_set(&disconnect_requested, 1);
   2d484:	2101      	movs	r1, #1
   2d486:	4806      	ldr	r0, [pc, #24]	; (2d4a0 <nrf_cloud_disconnect+0x2c>)
   2d488:	f017 fb71 	bl	44b6e <atomic_set>
}
   2d48c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2d490:	f001 be56 	b.w	2f140 <nct_disconnect>
}
   2d494:	f06f 000c 	mvn.w	r0, #12
   2d498:	bd08      	pop	{r3, pc}
   2d49a:	bf00      	nop
   2d49c:	2002c9df 	.word	0x2002c9df
   2d4a0:	200249c0 	.word	0x200249c0

0002d4a4 <nrf_cloud_run>:

void nrf_cloud_run(void)
{
	int ret;
	struct pollfd fds[1];
	struct cloud_event cloud_evt = {
   2d4a4:	221c      	movs	r2, #28
{
   2d4a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d4aa:	b08f      	sub	sp, #60	; 0x3c
	struct cloud_event cloud_evt = {
   2d4ac:	eb0d 0002 	add.w	r0, sp, r2
   2d4b0:	2100      	movs	r1, #0
   2d4b2:	f017 fed9 	bl	45268 <memset>
   2d4b6:	2302      	movs	r3, #2
   2d4b8:	f88d 301c 	strb.w	r3, [sp, #28]
   2d4bc:	2303      	movs	r3, #3
		cloud_evt.data.err = ret;
		cloud_evt.type = CLOUD_EVT_CONNECTING;
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
		goto reset;
	} else {
		LOG_DBG("Cloud connection request sent.");
   2d4be:	4a8e      	ldr	r2, [pc, #568]	; (2d6f8 <nrf_cloud_run+0x254>)
	struct cloud_event cloud_evt = {
   2d4c0:	9308      	str	r3, [sp, #32]
   2d4c2:	4b8e      	ldr	r3, [pc, #568]	; (2d6fc <nrf_cloud_run+0x258>)
		LOG_DBG("Cloud connection request sent.");
   2d4c4:	1a9b      	subs	r3, r3, r2
   2d4c6:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	return z_impl_k_sem_take(sem, timeout);
   2d4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d4ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d4d2:	488b      	ldr	r0, [pc, #556]	; (2d700 <nrf_cloud_run+0x25c>)
   2d4d4:	f010 feda 	bl	3e28c <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2d4d8:	2101      	movs	r1, #1
   2d4da:	488a      	ldr	r0, [pc, #552]	; (2d704 <nrf_cloud_run+0x260>)
   2d4dc:	f017 fb47 	bl	44b6e <atomic_set>
	cloud_evt.data.err = CLOUD_CONNECT_RES_SUCCESS;
   2d4e0:	2300      	movs	r3, #0
   2d4e2:	9308      	str	r3, [sp, #32]
	cloud_evt.type = CLOUD_EVT_CONNECTING;
   2d4e4:	f88d 301c 	strb.w	r3, [sp, #28]
	cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d4e8:	4b87      	ldr	r3, [pc, #540]	; (2d708 <nrf_cloud_run+0x264>)
   2d4ea:	2200      	movs	r2, #0
   2d4ec:	6818      	ldr	r0, [r3, #0]
   2d4ee:	a907      	add	r1, sp, #28
   2d4f0:	f017 fb34 	bl	44b5c <cloud_notify_event>
	ret = nrf_cloud_connect(NULL);
   2d4f4:	2000      	movs	r0, #0
   2d4f6:	f7ff ffa9 	bl	2d44c <nrf_cloud_connect>
	ret = translate_connect_error(ret);
   2d4fa:	f7ff fd91 	bl	2d020 <translate_connect_error>
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   2d4fe:	b1a0      	cbz	r0, 2d52a <nrf_cloud_run+0x86>
		cloud_evt.type = CLOUD_EVT_CONNECTING;
   2d500:	f04f 0200 	mov.w	r2, #0
		cloud_evt.data.err = ret;
   2d504:	9008      	str	r0, [sp, #32]
		cloud_evt.type = CLOUD_EVT_CONNECTING;
   2d506:	f88d 201c 	strb.w	r2, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d50a:	4b7f      	ldr	r3, [pc, #508]	; (2d708 <nrf_cloud_run+0x264>)
   2d50c:	2200      	movs	r2, #0
   2d50e:	a907      	add	r1, sp, #28
   2d510:	6818      	ldr	r0, [r3, #0]
   2d512:	f017 fb23 	bl	44b5c <cloud_notify_event>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2d516:	2100      	movs	r1, #0
   2d518:	487a      	ldr	r0, [pc, #488]	; (2d704 <nrf_cloud_run+0x260>)
   2d51a:	f017 fb28 	bl	44b6e <atomic_set>
   2d51e:	2200      	movs	r2, #0
   2d520:	2300      	movs	r3, #0
   2d522:	4877      	ldr	r0, [pc, #476]	; (2d700 <nrf_cloud_run+0x25c>)
   2d524:	f010 feb2 	bl	3e28c <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2d528:	e7cf      	b.n	2d4ca <nrf_cloud_run+0x26>
		LOG_DBG("Cloud connection request sent.");
   2d52a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2d52e:	4977      	ldr	r1, [pc, #476]	; (2d70c <nrf_cloud_run+0x268>)
   2d530:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   2d534:	f042 0204 	orr.w	r2, r2, #4
   2d538:	f362 0307 	bfi	r3, r2, #0, #8
   2d53c:	b29b      	uxth	r3, r3
   2d53e:	f36b 138f 	bfi	r3, fp, #6, #10
   2d542:	4a73      	ldr	r2, [pc, #460]	; (2d710 <nrf_cloud_run+0x26c>)
   2d544:	9003      	str	r0, [sp, #12]
   2d546:	b298      	uxth	r0, r3
   2d548:	f8ad 3004 	strh.w	r3, [sp, #4]
   2d54c:	f014 fd77 	bl	4203e <log_string_sync>
	fds[0].fd = nct_socket_get();
   2d550:	f001 fe2a 	bl	2f1a8 <nct_socket_get>
	fds[0].events = POLLIN;
   2d554:	2201      	movs	r2, #1
   2d556:	f8ad 2018 	strh.w	r2, [sp, #24]
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2d55a:	2202      	movs	r2, #2
	atomic_set(&transport_disconnected, 0);
   2d55c:	9b03      	ldr	r3, [sp, #12]
	fds[0].fd = nct_socket_get();
   2d55e:	9005      	str	r0, [sp, #20]
	atomic_set(&transport_disconnected, 0);
   2d560:	4619      	mov	r1, r3
   2d562:	486c      	ldr	r0, [pc, #432]	; (2d714 <nrf_cloud_run+0x270>)
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2d564:	f88d 201c 	strb.w	r2, [sp, #28]
	atomic_set(&transport_disconnected, 0);
   2d568:	f017 fb01 	bl	44b6e <atomic_set>
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2d56c:	4b66      	ldr	r3, [pc, #408]	; (2d708 <nrf_cloud_run+0x264>)
   2d56e:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_poll(fds, nfds, timeout);
   2d570:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   2d574:	2101      	movs	r1, #1
   2d576:	a805      	add	r0, sp, #20
   2d578:	f7f7 ff8c 	bl	25494 <z_impl_zsock_poll>
		if (ret == 0) {
   2d57c:	4602      	mov	r2, r0
   2d57e:	b9e8      	cbnz	r0, 2d5bc <nrf_cloud_run+0x118>
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2d580:	9b03      	ldr	r3, [sp, #12]
   2d582:	6818      	ldr	r0, [r3, #0]
 * @return Time in milliseconds until next keep alive message is expected to
 *         be sent.
 */
static inline int cloud_keepalive_time_left(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   2d584:	b118      	cbz	r0, 2d58e <nrf_cloud_run+0xea>
   2d586:	6803      	ldr	r3, [r0, #0]
   2d588:	b10b      	cbz	r3, 2d58e <nrf_cloud_run+0xea>
	    backend->api->keepalive_time_left == NULL) {
   2d58a:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   2d58c:	b98b      	cbnz	r3, 2d5b2 <nrf_cloud_run+0x10e>
		__ASSERT(0, "Missing cloud backend functionality");
   2d58e:	4962      	ldr	r1, [pc, #392]	; (2d718 <nrf_cloud_run+0x274>)
   2d590:	f44f 739f 	mov.w	r3, #318	; 0x13e
   2d594:	4a61      	ldr	r2, [pc, #388]	; (2d71c <nrf_cloud_run+0x278>)
   2d596:	4862      	ldr	r0, [pc, #392]	; (2d720 <nrf_cloud_run+0x27c>)
   2d598:	f014 fb26 	bl	41be8 <printk>
   2d59c:	4861      	ldr	r0, [pc, #388]	; (2d724 <nrf_cloud_run+0x280>)
   2d59e:	f014 fb23 	bl	41be8 <printk>
   2d5a2:	f44f 719f 	mov.w	r1, #318	; 0x13e
   2d5a6:	485d      	ldr	r0, [pc, #372]	; (2d71c <nrf_cloud_run+0x278>)
   2d5a8:	f014 fd38 	bl	4201c <assert_post_action>
	nct_process();
   2d5ac:	f001 fdea 	bl	2f184 <nct_process>
	return 0;
   2d5b0:	e7de      	b.n	2d570 <nrf_cloud_run+0xcc>
		return SYS_FOREVER_MS;
	}

	return backend->api->keepalive_time_left(backend);
   2d5b2:	4798      	blx	r3
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2d5b4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   2d5b8:	dada      	bge.n	2d570 <nrf_cloud_run+0xcc>
   2d5ba:	e7f7      	b.n	2d5ac <nrf_cloud_run+0x108>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2d5bc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d5c0:	f013 0301 	ands.w	r3, r3, #1
   2d5c4:	d1f2      	bne.n	2d5ac <nrf_cloud_run+0x108>
		if (ret < 0) {
   2d5c6:	2800      	cmp	r0, #0
   2d5c8:	da14      	bge.n	2d5f4 <nrf_cloud_run+0x150>
			LOG_ERR("poll() returned an error: %d", ret);
   2d5ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2d5ce:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2d5d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2d5d6:	f043 0301 	orr.w	r3, r3, #1
   2d5da:	f363 0107 	bfi	r1, r3, #0, #8
   2d5de:	b28b      	uxth	r3, r1
   2d5e0:	f36b 138f 	bfi	r3, fp, #6, #10
   2d5e4:	4950      	ldr	r1, [pc, #320]	; (2d728 <nrf_cloud_run+0x284>)
   2d5e6:	f8ad 3008 	strh.w	r3, [sp, #8]
   2d5ea:	b298      	uxth	r0, r3
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d5ec:	f014 fd27 	bl	4203e <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2d5f0:	2303      	movs	r3, #3
   2d5f2:	e037      	b.n	2d664 <nrf_cloud_run+0x1c0>
   2d5f4:	4a4d      	ldr	r2, [pc, #308]	; (2d72c <nrf_cloud_run+0x288>)
   2d5f6:	e8d2 2faf 	lda	r2, [r2]
		if (atomic_get(&disconnect_requested)) {
   2d5fa:	b1a2      	cbz	r2, 2d626 <nrf_cloud_run+0x182>
			atomic_set(&disconnect_requested, 0);
   2d5fc:	4619      	mov	r1, r3
   2d5fe:	484b      	ldr	r0, [pc, #300]	; (2d72c <nrf_cloud_run+0x288>)
   2d600:	9303      	str	r3, [sp, #12]
   2d602:	f017 fab4 	bl	44b6e <atomic_set>
			LOG_DBG("Expected disconnect event.");
   2d606:	f024 023f 	bic.w	r2, r4, #63	; 0x3f
   2d60a:	f042 0204 	orr.w	r2, r2, #4
   2d60e:	f362 0407 	bfi	r4, r2, #0, #8
   2d612:	f36b 148f 	bfi	r4, fp, #6, #10
   2d616:	4a3e      	ldr	r2, [pc, #248]	; (2d710 <nrf_cloud_run+0x26c>)
   2d618:	4945      	ldr	r1, [pc, #276]	; (2d730 <nrf_cloud_run+0x28c>)
   2d61a:	4620      	mov	r0, r4
   2d61c:	f014 fd0f 	bl	4203e <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2d620:	9b03      	ldr	r3, [sp, #12]
   2d622:	9308      	str	r3, [sp, #32]
			cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d624:	e771      	b.n	2d50a <nrf_cloud_run+0x66>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2d626:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2d62a:	0699      	lsls	r1, r3, #26
   2d62c:	d529      	bpl.n	2d682 <nrf_cloud_run+0x1de>
			LOG_DBG("Socket error: POLLNVAL");
   2d62e:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2d632:	f043 0304 	orr.w	r3, r3, #4
   2d636:	f363 0507 	bfi	r5, r3, #0, #8
   2d63a:	f36b 158f 	bfi	r5, fp, #6, #10
   2d63e:	4a34      	ldr	r2, [pc, #208]	; (2d710 <nrf_cloud_run+0x26c>)
   2d640:	493c      	ldr	r1, [pc, #240]	; (2d734 <nrf_cloud_run+0x290>)
   2d642:	4628      	mov	r0, r5
   2d644:	f014 fcfb 	bl	4203e <log_string_sync>
			LOG_DBG("The cloud socket was unexpectedly closed.");
   2d648:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2d64c:	f043 0304 	orr.w	r3, r3, #4
   2d650:	f363 0607 	bfi	r6, r3, #0, #8
   2d654:	f36b 168f 	bfi	r6, fp, #6, #10
   2d658:	4a2d      	ldr	r2, [pc, #180]	; (2d710 <nrf_cloud_run+0x26c>)
   2d65a:	4937      	ldr	r1, [pc, #220]	; (2d738 <nrf_cloud_run+0x294>)
   2d65c:	4630      	mov	r0, r6
   2d65e:	f014 fcee 	bl	4203e <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_INVALID_REQUEST;
   2d662:	2302      	movs	r3, #2
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2d664:	9308      	str	r3, [sp, #32]
   2d666:	4b2b      	ldr	r3, [pc, #172]	; (2d714 <nrf_cloud_run+0x270>)
   2d668:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2d66c:	2a00      	cmp	r2, #0
   2d66e:	f47f af52 	bne.w	2d516 <nrf_cloud_run+0x72>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2d672:	4b25      	ldr	r3, [pc, #148]	; (2d708 <nrf_cloud_run+0x264>)
   2d674:	a907      	add	r1, sp, #28
   2d676:	6818      	ldr	r0, [r3, #0]
   2d678:	f017 fa70 	bl	44b5c <cloud_notify_event>
		nrf_cloud_disconnect();
   2d67c:	f7ff fefa 	bl	2d474 <nrf_cloud_disconnect>
   2d680:	e749      	b.n	2d516 <nrf_cloud_run+0x72>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2d682:	06da      	lsls	r2, r3, #27
   2d684:	d51b      	bpl.n	2d6be <nrf_cloud_run+0x21a>
			LOG_DBG("Socket error: POLLHUP");
   2d686:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2d68a:	f043 0304 	orr.w	r3, r3, #4
   2d68e:	f363 0707 	bfi	r7, r3, #0, #8
   2d692:	f36b 178f 	bfi	r7, fp, #6, #10
   2d696:	4a1e      	ldr	r2, [pc, #120]	; (2d710 <nrf_cloud_run+0x26c>)
   2d698:	4928      	ldr	r1, [pc, #160]	; (2d73c <nrf_cloud_run+0x298>)
   2d69a:	4638      	mov	r0, r7
   2d69c:	f014 fccf 	bl	4203e <log_string_sync>
			LOG_DBG("Connection was closed by the cloud.");
   2d6a0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2d6a4:	f043 0304 	orr.w	r3, r3, #4
   2d6a8:	f363 0807 	bfi	r8, r3, #0, #8
   2d6ac:	f36b 188f 	bfi	r8, fp, #6, #10
   2d6b0:	4a17      	ldr	r2, [pc, #92]	; (2d710 <nrf_cloud_run+0x26c>)
   2d6b2:	4923      	ldr	r1, [pc, #140]	; (2d740 <nrf_cloud_run+0x29c>)
   2d6b4:	4640      	mov	r0, r8
   2d6b6:	f014 fcc2 	bl	4203e <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2d6ba:	2301      	movs	r3, #1
   2d6bc:	e7d2      	b.n	2d664 <nrf_cloud_run+0x1c0>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2d6be:	071b      	lsls	r3, r3, #28
   2d6c0:	f57f af56 	bpl.w	2d570 <nrf_cloud_run+0xcc>
			LOG_DBG("Socket error: POLLERR");
   2d6c4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2d6c8:	f043 0304 	orr.w	r3, r3, #4
   2d6cc:	f363 0907 	bfi	r9, r3, #0, #8
   2d6d0:	f36b 198f 	bfi	r9, fp, #6, #10
   2d6d4:	4a0e      	ldr	r2, [pc, #56]	; (2d710 <nrf_cloud_run+0x26c>)
   2d6d6:	491b      	ldr	r1, [pc, #108]	; (2d744 <nrf_cloud_run+0x2a0>)
   2d6d8:	4648      	mov	r0, r9
   2d6da:	f014 fcb0 	bl	4203e <log_string_sync>
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d6de:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2d6e2:	f043 0304 	orr.w	r3, r3, #4
   2d6e6:	f363 0a07 	bfi	sl, r3, #0, #8
   2d6ea:	f36b 1a8f 	bfi	sl, fp, #6, #10
   2d6ee:	4a08      	ldr	r2, [pc, #32]	; (2d710 <nrf_cloud_run+0x26c>)
   2d6f0:	4915      	ldr	r1, [pc, #84]	; (2d748 <nrf_cloud_run+0x2a4>)
   2d6f2:	4650      	mov	r0, sl
   2d6f4:	e77a      	b.n	2d5ec <nrf_cloud_run+0x148>
   2d6f6:	bf00      	nop
   2d6f8:	00046878 	.word	0x00046878
   2d6fc:	00046948 	.word	0x00046948
   2d700:	20020bd0 	.word	0x20020bd0
   2d704:	200249bc 	.word	0x200249bc
   2d708:	200249c4 	.word	0x200249c4
   2d70c:	0004bc7f 	.word	0x0004bc7f
   2d710:	0004ba66 	.word	0x0004ba66
   2d714:	200249c8 	.word	0x200249c8
   2d718:	0004edb2 	.word	0x0004edb2
   2d71c:	0004bca2 	.word	0x0004bca2
   2d720:	0004825b 	.word	0x0004825b
   2d724:	0004bcb9 	.word	0x0004bcb9
   2d728:	0004bcdf 	.word	0x0004bcdf
   2d72c:	200249c0 	.word	0x200249c0
   2d730:	0004bcfc 	.word	0x0004bcfc
   2d734:	0004bd1b 	.word	0x0004bd1b
   2d738:	0004bd36 	.word	0x0004bd36
   2d73c:	0004bd64 	.word	0x0004bd64
   2d740:	0004bd7e 	.word	0x0004bd7e
   2d744:	0004bda6 	.word	0x0004bda6
   2d748:	0004bdc0 	.word	0x0004bdc0

0002d74c <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2d74c:	4b01      	ldr	r3, [pc, #4]	; (2d754 <nct_input+0x8>)
   2d74e:	7819      	ldrb	r1, [r3, #0]
   2d750:	f000 bcdc 	b.w	2e10c <nfsm_handle_incoming_event>
   2d754:	2002c9df 	.word	0x2002c9df

0002d758 <nct_apply_update>:
	app_event_handler(&evt);
   2d758:	4b01      	ldr	r3, [pc, #4]	; (2d760 <nct_apply_update+0x8>)
   2d75a:	4802      	ldr	r0, [pc, #8]	; (2d764 <nct_apply_update+0xc>)
   2d75c:	681b      	ldr	r3, [r3, #0]
   2d75e:	4718      	bx	r3
   2d760:	200249b8 	.word	0x200249b8
   2d764:	00047114 	.word	0x00047114

0002d768 <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   2d768:	b538      	push	{r3, r4, r5, lr}
   2d76a:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2d76c:	4605      	mov	r5, r0
   2d76e:	b140      	cbz	r0, 2d782 <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   2d770:	4904      	ldr	r1, [pc, #16]	; (2d784 <nrf_cloud_decode_desired_obj+0x1c>)
   2d772:	f017 fa23 	bl	44bbc <json_object_decode>
		if (state_obj == NULL) {
   2d776:	b918      	cbnz	r0, 2d780 <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2d778:	4903      	ldr	r1, [pc, #12]	; (2d788 <nrf_cloud_decode_desired_obj+0x20>)
   2d77a:	4628      	mov	r0, r5
   2d77c:	f017 fa1e 	bl	44bbc <json_object_decode>
		} else {
			*desired_obj = state_obj;
   2d780:	6020      	str	r0, [r4, #0]
		}
	}
}
   2d782:	bd38      	pop	{r3, r4, r5, pc}
   2d784:	0004e2e6 	.word	0x0004e2e6
   2d788:	0004be61 	.word	0x0004be61

0002d78c <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   2d78c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2d78e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2d790:	460e      	mov	r6, r1
   2d792:	b949      	cbnz	r1, 2d7a8 <nrf_cloud_decode_requested_state+0x1c>
   2d794:	4959      	ldr	r1, [pc, #356]	; (2d8fc <nrf_cloud_decode_requested_state+0x170>)
   2d796:	485a      	ldr	r0, [pc, #360]	; (2d900 <nrf_cloud_decode_requested_state+0x174>)
   2d798:	23cb      	movs	r3, #203	; 0xcb
   2d79a:	4a5a      	ldr	r2, [pc, #360]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d79c:	f014 fa24 	bl	41be8 <printk>
   2d7a0:	21cb      	movs	r1, #203	; 0xcb
   2d7a2:	4858      	ldr	r0, [pc, #352]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7a4:	f014 fc3a 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d7a8:	b94c      	cbnz	r4, 2d7be <nrf_cloud_decode_requested_state+0x32>
   2d7aa:	4957      	ldr	r1, [pc, #348]	; (2d908 <nrf_cloud_decode_requested_state+0x17c>)
   2d7ac:	4854      	ldr	r0, [pc, #336]	; (2d900 <nrf_cloud_decode_requested_state+0x174>)
   2d7ae:	23cc      	movs	r3, #204	; 0xcc
   2d7b0:	4a54      	ldr	r2, [pc, #336]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7b2:	f014 fa19 	bl	41be8 <printk>
   2d7b6:	21cc      	movs	r1, #204	; 0xcc
   2d7b8:	4852      	ldr	r0, [pc, #328]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7ba:	f014 fc2f 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2d7be:	6863      	ldr	r3, [r4, #4]
   2d7c0:	b94b      	cbnz	r3, 2d7d6 <nrf_cloud_decode_requested_state+0x4a>
   2d7c2:	4952      	ldr	r1, [pc, #328]	; (2d90c <nrf_cloud_decode_requested_state+0x180>)
   2d7c4:	484e      	ldr	r0, [pc, #312]	; (2d900 <nrf_cloud_decode_requested_state+0x174>)
   2d7c6:	23cd      	movs	r3, #205	; 0xcd
   2d7c8:	4a4e      	ldr	r2, [pc, #312]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7ca:	f014 fa0d 	bl	41be8 <printk>
   2d7ce:	21cd      	movs	r1, #205	; 0xcd
   2d7d0:	484c      	ldr	r0, [pc, #304]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7d2:	f014 fc23 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2d7d6:	6823      	ldr	r3, [r4, #0]
   2d7d8:	b94b      	cbnz	r3, 2d7ee <nrf_cloud_decode_requested_state+0x62>
   2d7da:	494d      	ldr	r1, [pc, #308]	; (2d910 <nrf_cloud_decode_requested_state+0x184>)
   2d7dc:	4848      	ldr	r0, [pc, #288]	; (2d900 <nrf_cloud_decode_requested_state+0x174>)
   2d7de:	23ce      	movs	r3, #206	; 0xce
   2d7e0:	4a48      	ldr	r2, [pc, #288]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7e2:	f014 fa01 	bl	41be8 <printk>
   2d7e6:	21ce      	movs	r1, #206	; 0xce
   2d7e8:	4846      	ldr	r0, [pc, #280]	; (2d904 <nrf_cloud_decode_requested_state+0x178>)
   2d7ea:	f014 fc17 	bl	4201c <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   2d7ee:	6860      	ldr	r0, [r4, #4]
   2d7f0:	f016 fbe4 	bl	43fbc <cJSON_Parse>
	if (root_obj == NULL) {
   2d7f4:	4605      	mov	r5, r0
   2d7f6:	b9a8      	cbnz	r0, 2d824 <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   2d7f8:	2301      	movs	r3, #1
   2d7fa:	f04f 0500 	mov.w	r5, #0
   2d7fe:	4a45      	ldr	r2, [pc, #276]	; (2d914 <nrf_cloud_decode_requested_state+0x188>)
   2d800:	f363 0507 	bfi	r5, r3, #0, #8
   2d804:	4b44      	ldr	r3, [pc, #272]	; (2d918 <nrf_cloud_decode_requested_state+0x18c>)
   2d806:	6860      	ldr	r0, [r4, #4]
   2d808:	1a9b      	subs	r3, r3, r2
   2d80a:	08db      	lsrs	r3, r3, #3
   2d80c:	f363 158f 	bfi	r5, r3, #6, #10
   2d810:	f014 fc28 	bl	42064 <log_strdup>
   2d814:	4941      	ldr	r1, [pc, #260]	; (2d91c <nrf_cloud_decode_requested_state+0x190>)
   2d816:	4602      	mov	r2, r0
   2d818:	4628      	mov	r0, r5
   2d81a:	f014 fc10 	bl	4203e <log_string_sync>
			LOG_WRN("Unhandled data received from nRF Cloud.");
			LOG_INF("Ensure device firmware is up to date.");
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
		}
		cJSON_Delete(root_obj);
		return -ENOENT;
   2d81e:	f06f 0401 	mvn.w	r4, #1
   2d822:	e00d      	b.n	2d840 <nrf_cloud_decode_requested_state+0xb4>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2d824:	a901      	add	r1, sp, #4
   2d826:	f7ff ff9f 	bl	2d768 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2d82a:	493d      	ldr	r1, [pc, #244]	; (2d920 <nrf_cloud_decode_requested_state+0x194>)
   2d82c:	9801      	ldr	r0, [sp, #4]
   2d82e:	f017 f9c5 	bl	44bbc <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2d832:	b140      	cbz	r0, 2d846 <nrf_cloud_decode_requested_state+0xba>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d834:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2d836:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d838:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2d83a:	f7fb fceb 	bl	29214 <cJSON_Delete>
		return 0;
   2d83e:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   2d840:	4620      	mov	r0, r4
   2d842:	b002      	add	sp, #8
   2d844:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2d846:	4937      	ldr	r1, [pc, #220]	; (2d924 <nrf_cloud_decode_requested_state+0x198>)
   2d848:	9801      	ldr	r0, [sp, #4]
   2d84a:	f017 f9b7 	bl	44bbc <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d84e:	4936      	ldr	r1, [pc, #216]	; (2d928 <nrf_cloud_decode_requested_state+0x19c>)
   2d850:	f017 f9b4 	bl	44bbc <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2d854:	b110      	cbz	r0, 2d85c <nrf_cloud_decode_requested_state+0xd0>
   2d856:	68c3      	ldr	r3, [r0, #12]
   2d858:	2b10      	cmp	r3, #16
   2d85a:	d029      	beq.n	2d8b0 <nrf_cloud_decode_requested_state+0x124>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   2d85c:	4933      	ldr	r1, [pc, #204]	; (2d92c <nrf_cloud_decode_requested_state+0x1a0>)
   2d85e:	9801      	ldr	r0, [sp, #4]
   2d860:	f016 fbbe 	bl	43fe0 <cJSON_HasObjectItem>
   2d864:	bb00      	cbnz	r0, 2d8a8 <nrf_cloud_decode_requested_state+0x11c>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2d866:	2302      	movs	r3, #2
   2d868:	4c2b      	ldr	r4, [pc, #172]	; (2d918 <nrf_cloud_decode_requested_state+0x18c>)
   2d86a:	f363 0007 	bfi	r0, r3, #0, #8
   2d86e:	4b29      	ldr	r3, [pc, #164]	; (2d914 <nrf_cloud_decode_requested_state+0x188>)
   2d870:	492f      	ldr	r1, [pc, #188]	; (2d930 <nrf_cloud_decode_requested_state+0x1a4>)
   2d872:	1ae4      	subs	r4, r4, r3
   2d874:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d878:	f364 108f 	bfi	r0, r4, #6, #10
   2d87c:	f014 fbdf 	bl	4203e <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   2d880:	2303      	movs	r3, #3
   2d882:	f04f 0000 	mov.w	r0, #0
   2d886:	f363 0007 	bfi	r0, r3, #0, #8
   2d88a:	f364 108f 	bfi	r0, r4, #6, #10
   2d88e:	4929      	ldr	r1, [pc, #164]	; (2d934 <nrf_cloud_decode_requested_state+0x1a8>)
   2d890:	f014 fbd5 	bl	4203e <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2d894:	f04f 0000 	mov.w	r0, #0
   2d898:	2303      	movs	r3, #3
   2d89a:	f363 0007 	bfi	r0, r3, #0, #8
   2d89e:	f364 108f 	bfi	r0, r4, #6, #10
   2d8a2:	4925      	ldr	r1, [pc, #148]	; (2d938 <nrf_cloud_decode_requested_state+0x1ac>)
   2d8a4:	f014 fbcb 	bl	4203e <log_string_sync>
		cJSON_Delete(root_obj);
   2d8a8:	4628      	mov	r0, r5
   2d8aa:	f7fb fcb3 	bl	29214 <cJSON_Delete>
   2d8ae:	e7b6      	b.n	2d81e <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   2d8b0:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2d8b2:	4822      	ldr	r0, [pc, #136]	; (2d93c <nrf_cloud_decode_requested_state+0x1b0>)
   2d8b4:	f7ef fcd6 	bl	1d264 <strlen>
   2d8b8:	4920      	ldr	r1, [pc, #128]	; (2d93c <nrf_cloud_decode_requested_state+0x1b0>)
   2d8ba:	4602      	mov	r2, r0
   2d8bc:	4620      	mov	r0, r4
   2d8be:	f017 feac 	bl	4561a <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2d8c2:	4604      	mov	r4, r0
   2d8c4:	b928      	cbnz	r0, 2d8d2 <nrf_cloud_decode_requested_state+0x146>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d8c6:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2d8c8:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d8ca:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2d8cc:	f7fb fca2 	bl	29214 <cJSON_Delete>
	return 0;
   2d8d0:	e7b6      	b.n	2d840 <nrf_cloud_decode_requested_state+0xb4>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2d8d2:	2301      	movs	r3, #1
   2d8d4:	f04f 0000 	mov.w	r0, #0
   2d8d8:	4a0e      	ldr	r2, [pc, #56]	; (2d914 <nrf_cloud_decode_requested_state+0x188>)
   2d8da:	f363 0007 	bfi	r0, r3, #0, #8
   2d8de:	4b0e      	ldr	r3, [pc, #56]	; (2d918 <nrf_cloud_decode_requested_state+0x18c>)
   2d8e0:	4917      	ldr	r1, [pc, #92]	; (2d940 <nrf_cloud_decode_requested_state+0x1b4>)
   2d8e2:	1a9b      	subs	r3, r3, r2
   2d8e4:	08db      	lsrs	r3, r3, #3
   2d8e6:	f363 108f 	bfi	r0, r3, #6, #10
   2d8ea:	f014 fba8 	bl	4203e <log_string_sync>
		cJSON_Delete(root_obj);
   2d8ee:	4628      	mov	r0, r5
   2d8f0:	f7fb fc90 	bl	29214 <cJSON_Delete>
		return -ENOTSUP;
   2d8f4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2d8f8:	e7a2      	b.n	2d840 <nrf_cloud_decode_requested_state+0xb4>
   2d8fa:	bf00      	nop
   2d8fc:	0004be69 	.word	0x0004be69
   2d900:	0004825b 	.word	0x0004825b
   2d904:	0004bff2 	.word	0x0004bff2
   2d908:	0004be88 	.word	0x0004be88
   2d90c:	0004be9d 	.word	0x0004be9d
   2d910:	0004beb7 	.word	0x0004beb7
   2d914:	00046878 	.word	0x00046878
   2d918:	00046958 	.word	0x00046958
   2d91c:	0004bec7 	.word	0x0004bec7
   2d920:	0004bede 	.word	0x0004bede
   2d924:	0004bef9 	.word	0x0004bef9
   2d928:	0004e2e6 	.word	0x0004e2e6
   2d92c:	0004ea34 	.word	0x0004ea34
   2d930:	0004bf01 	.word	0x0004bf01
   2d934:	0004bf29 	.word	0x0004bf29
   2d938:	0004bf4f 	.word	0x0004bf4f
   2d93c:	0004bf8a 	.word	0x0004bf8a
   2d940:	0004bf99 	.word	0x0004bf99

0002d944 <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   2d944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d948:	4605      	mov	r5, r0
   2d94a:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2d94c:	460c      	mov	r4, r1
   2d94e:	b959      	cbnz	r1, 2d968 <nrf_cloud_encode_config_response+0x24>
   2d950:	494e      	ldr	r1, [pc, #312]	; (2da8c <nrf_cloud_encode_config_response+0x148>)
   2d952:	484f      	ldr	r0, [pc, #316]	; (2da90 <nrf_cloud_encode_config_response+0x14c>)
   2d954:	f240 1307 	movw	r3, #263	; 0x107
   2d958:	4a4e      	ldr	r2, [pc, #312]	; (2da94 <nrf_cloud_encode_config_response+0x150>)
   2d95a:	f014 f945 	bl	41be8 <printk>
   2d95e:	f240 1107 	movw	r1, #263	; 0x107
   2d962:	484c      	ldr	r0, [pc, #304]	; (2da94 <nrf_cloud_encode_config_response+0x150>)
   2d964:	f014 fb5a 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d968:	2d00      	cmp	r5, #0
   2d96a:	d164      	bne.n	2da36 <nrf_cloud_encode_config_response+0xf2>
   2d96c:	494a      	ldr	r1, [pc, #296]	; (2da98 <nrf_cloud_encode_config_response+0x154>)
   2d96e:	4848      	ldr	r0, [pc, #288]	; (2da90 <nrf_cloud_encode_config_response+0x14c>)
   2d970:	f44f 7384 	mov.w	r3, #264	; 0x108
   2d974:	4a47      	ldr	r2, [pc, #284]	; (2da94 <nrf_cloud_encode_config_response+0x150>)
   2d976:	f014 f937 	bl	41be8 <printk>
   2d97a:	f44f 7184 	mov.w	r1, #264	; 0x108
   2d97e:	4845      	ldr	r0, [pc, #276]	; (2da94 <nrf_cloud_encode_config_response+0x150>)
   2d980:	f014 fb4c 	bl	4201c <assert_post_action>
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   2d984:	f06f 0002 	mvn.w	r0, #2
   2d988:	e07d      	b.n	2da86 <nrf_cloud_encode_config_response+0x142>
		output->len = 0;
		return 0;
	}

	/* Prepare JSON response for the delta */
	root_obj = cJSON_CreateObject();
   2d98a:	f7fb fd17 	bl	293bc <cJSON_CreateObject>
   2d98e:	4605      	mov	r5, r0
	desired_obj = cJSON_CreateObject();
   2d990:	f7fb fd14 	bl	293bc <cJSON_CreateObject>
   2d994:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2d996:	f7fb fcd1 	bl	2933c <cJSON_CreateNull>
   2d99a:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   2d99c:	f7fb fd0e 	bl	293bc <cJSON_CreateObject>
   2d9a0:	4682      	mov	sl, r0

	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2d9a2:	b135      	cbz	r5, 2d9b2 <nrf_cloud_encode_config_response+0x6e>
   2d9a4:	f1b8 0f00 	cmp.w	r8, #0
   2d9a8:	d003      	beq.n	2d9b2 <nrf_cloud_encode_config_response+0x6e>
   2d9aa:	f1b9 0f00 	cmp.w	r9, #0
   2d9ae:	d000      	beq.n	2d9b2 <nrf_cloud_encode_config_response+0x6e>
   2d9b0:	b9a0      	cbnz	r0, 2d9dc <nrf_cloud_encode_config_response+0x98>
		(reported_obj == NULL)) {
		cJSON_Delete(root_obj);
   2d9b2:	4628      	mov	r0, r5
   2d9b4:	f7fb fc2e 	bl	29214 <cJSON_Delete>
		cJSON_Delete(desired_obj);
   2d9b8:	4640      	mov	r0, r8
   2d9ba:	f7fb fc2b 	bl	29214 <cJSON_Delete>
		cJSON_Delete(null_obj);
   2d9be:	4648      	mov	r0, r9
   2d9c0:	f7fb fc28 	bl	29214 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2d9c4:	4650      	mov	r0, sl
   2d9c6:	f7fb fc25 	bl	29214 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2d9ca:	4638      	mov	r0, r7
   2d9cc:	f7fb fc22 	bl	29214 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2d9d0:	4630      	mov	r0, r6
   2d9d2:	f7fb fc1f 	bl	29214 <cJSON_Delete>
	(void)json_add_obj(state_obj, "state", root_obj);
	buffer = cJSON_PrintUnformatted(state_obj);
	cJSON_Delete(state_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2d9d6:	f06f 000b 	mvn.w	r0, #11
   2d9da:	e054      	b.n	2da86 <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   2d9dc:	463a      	mov	r2, r7
   2d9de:	492f      	ldr	r1, [pc, #188]	; (2da9c <nrf_cloud_encode_config_response+0x158>)
   2d9e0:	f016 fb07 	bl	43ff2 <cJSON_AddItemToObject>
   2d9e4:	4628      	mov	r0, r5
   2d9e6:	4652      	mov	r2, sl
   2d9e8:	492d      	ldr	r1, [pc, #180]	; (2daa0 <nrf_cloud_encode_config_response+0x15c>)
   2d9ea:	f016 fb02 	bl	43ff2 <cJSON_AddItemToObject>
   2d9ee:	464a      	mov	r2, r9
   2d9f0:	492a      	ldr	r1, [pc, #168]	; (2da9c <nrf_cloud_encode_config_response+0x158>)
   2d9f2:	4640      	mov	r0, r8
   2d9f4:	f016 fafd 	bl	43ff2 <cJSON_AddItemToObject>
   2d9f8:	4642      	mov	r2, r8
   2d9fa:	492a      	ldr	r1, [pc, #168]	; (2daa4 <nrf_cloud_encode_config_response+0x160>)
   2d9fc:	4628      	mov	r0, r5
   2d9fe:	f016 faf8 	bl	43ff2 <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   2da02:	4630      	mov	r0, r6
   2da04:	f7fb fc06 	bl	29214 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2da08:	f7fb fcd8 	bl	293bc <cJSON_CreateObject>
   2da0c:	4606      	mov	r6, r0
	cJSON_AddItemToObject(parent, str, item);
   2da0e:	462a      	mov	r2, r5
   2da10:	4925      	ldr	r1, [pc, #148]	; (2daa8 <nrf_cloud_encode_config_response+0x164>)
   2da12:	f016 faee 	bl	43ff2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   2da16:	4630      	mov	r0, r6
   2da18:	f016 fad4 	bl	43fc4 <cJSON_PrintUnformatted>
   2da1c:	4605      	mov	r5, r0
	cJSON_Delete(state_obj);
   2da1e:	4630      	mov	r0, r6
   2da20:	f7fb fbf8 	bl	29214 <cJSON_Delete>
	if (buffer == NULL) {
   2da24:	2d00      	cmp	r5, #0
   2da26:	d0d6      	beq.n	2d9d6 <nrf_cloud_encode_config_response+0x92>
	}

	output->ptr = buffer;
   2da28:	6065      	str	r5, [r4, #4]
	output->len = strlen(buffer);
   2da2a:	4628      	mov	r0, r5
   2da2c:	f7ef fc1a 	bl	1d264 <strlen>
   2da30:	6020      	str	r0, [r4, #0]

	return 0;
   2da32:	2000      	movs	r0, #0
   2da34:	e027      	b.n	2da86 <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2da36:	6868      	ldr	r0, [r5, #4]
   2da38:	f016 fac0 	bl	43fbc <cJSON_Parse>
	if (input_obj == NULL) {
   2da3c:	4605      	mov	r5, r0
   2da3e:	2800      	cmp	r0, #0
   2da40:	d0a0      	beq.n	2d984 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   2da42:	4919      	ldr	r1, [pc, #100]	; (2daa8 <nrf_cloud_encode_config_response+0x164>)
   2da44:	f016 faec 	bl	44020 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2da48:	1e06      	subs	r6, r0, #0
   2da4a:	bf14      	ite	ne
   2da4c:	4630      	movne	r0, r6
   2da4e:	4628      	moveq	r0, r5
   2da50:	4912      	ldr	r1, [pc, #72]	; (2da9c <nrf_cloud_encode_config_response+0x158>)
   2da52:	f016 fae5 	bl	44020 <cJSON_DetachItemFromObject>
   2da56:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2da58:	4628      	mov	r0, r5
   2da5a:	f7fb fbdb 	bl	29214 <cJSON_Delete>
	if (has_config) {
   2da5e:	f1b8 0f00 	cmp.w	r8, #0
   2da62:	d004      	beq.n	2da6e <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2da64:	1c3b      	adds	r3, r7, #0
   2da66:	bf18      	it	ne
   2da68:	2301      	movne	r3, #1
   2da6a:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2da6e:	b10e      	cbz	r6, 2da74 <nrf_cloud_encode_config_response+0x130>
   2da70:	2f00      	cmp	r7, #0
   2da72:	d18a      	bne.n	2d98a <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2da74:	4630      	mov	r0, r6
   2da76:	f7fb fbcd 	bl	29214 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2da7a:	4638      	mov	r0, r7
   2da7c:	f7fb fbca 	bl	29214 <cJSON_Delete>
		output->ptr = NULL;
   2da80:	2000      	movs	r0, #0
		output->len = 0;
   2da82:	e9c4 0000 	strd	r0, r0, [r4]
}
   2da86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2da8a:	bf00      	nop
   2da8c:	000489c2 	.word	0x000489c2
   2da90:	0004825b 	.word	0x0004825b
   2da94:	0004bff2 	.word	0x0004bff2
   2da98:	0004be88 	.word	0x0004be88
   2da9c:	0004ea34 	.word	0x0004ea34
   2daa0:	0004894e 	.word	0x0004894e
   2daa4:	0004be61 	.word	0x0004be61
   2daa8:	0004e2e6 	.word	0x0004e2e6

0002daac <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   2daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dab0:	4604      	mov	r4, r0
   2dab2:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2dab4:	4689      	mov	r9, r1
   2dab6:	b959      	cbnz	r1, 2dad0 <nrf_cloud_encode_state+0x24>
   2dab8:	495a      	ldr	r1, [pc, #360]	; (2dc24 <nrf_cloud_encode_state+0x178>)
   2daba:	485b      	ldr	r0, [pc, #364]	; (2dc28 <nrf_cloud_encode_state+0x17c>)
   2dabc:	f240 1359 	movw	r3, #345	; 0x159
   2dac0:	4a5a      	ldr	r2, [pc, #360]	; (2dc2c <nrf_cloud_encode_state+0x180>)
   2dac2:	f014 f891 	bl	41be8 <printk>
   2dac6:	f240 1159 	movw	r1, #345	; 0x159
   2daca:	4858      	ldr	r0, [pc, #352]	; (2dc2c <nrf_cloud_encode_state+0x180>)
   2dacc:	f014 faa6 	bl	4201c <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   2dad0:	f7fb fc74 	bl	293bc <cJSON_CreateObject>
   2dad4:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2dad6:	f7fb fc71 	bl	293bc <cJSON_CreateObject>
   2dada:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   2dadc:	f7fb fc6e 	bl	293bc <cJSON_CreateObject>
   2dae0:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2dae2:	f7fb fc6b 	bl	293bc <cJSON_CreateObject>
   2dae6:	4605      	mov	r5, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   2dae8:	b127      	cbz	r7, 2daf4 <nrf_cloud_encode_state+0x48>
   2daea:	f1b8 0f00 	cmp.w	r8, #0
   2daee:	d001      	beq.n	2daf4 <nrf_cloud_encode_state+0x48>
   2daf0:	b106      	cbz	r6, 2daf4 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   2daf2:	b970      	cbnz	r0, 2db12 <nrf_cloud_encode_state+0x66>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   2daf4:	4638      	mov	r0, r7
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2daf6:	f7fb fb8d 	bl	29214 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2dafa:	4640      	mov	r0, r8
   2dafc:	f7fb fb8a 	bl	29214 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2db00:	4630      	mov	r0, r6
   2db02:	f7fb fb87 	bl	29214 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2db06:	4628      	mov	r0, r5
   2db08:	f7fb fb84 	bl	29214 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2db0c:	f06f 040b 	mvn.w	r4, #11
   2db10:	e011      	b.n	2db36 <nrf_cloud_encode_state+0x8a>
	switch (reported_state) {
   2db12:	2c06      	cmp	r4, #6
   2db14:	d013      	beq.n	2db3e <nrf_cloud_encode_state+0x92>
   2db16:	2c07      	cmp	r4, #7
   2db18:	d04c      	beq.n	2dbb4 <nrf_cloud_encode_state+0x108>
		cJSON_Delete(root_obj);
   2db1a:	4638      	mov	r0, r7
   2db1c:	f7fb fb7a 	bl	29214 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2db20:	4640      	mov	r0, r8
   2db22:	f7fb fb77 	bl	29214 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2db26:	4630      	mov	r0, r6
   2db28:	f7fb fb74 	bl	29214 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2db2c:	4628      	mov	r0, r5
   2db2e:	f7fb fb71 	bl	29214 <cJSON_Delete>
		return -ENOTSUP;
   2db32:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   2db36:	4620      	mov	r0, r4
   2db38:	b006      	add	sp, #24
   2db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2db3e:	4a3c      	ldr	r2, [pc, #240]	; (2dc30 <nrf_cloud_encode_state+0x184>)
   2db40:	493c      	ldr	r1, [pc, #240]	; (2dc34 <nrf_cloud_encode_state+0x188>)
   2db42:	f017 f82a 	bl	44b9a <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2db46:	493c      	ldr	r1, [pc, #240]	; (2dc38 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2db48:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2db4a:	4628      	mov	r0, r5
   2db4c:	f017 f83a 	bl	44bc4 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   2db50:	493a      	ldr	r1, [pc, #232]	; (2dc3c <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "topics");
   2db52:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2db54:	4628      	mov	r0, r5
   2db56:	f017 f835 	bl	44bc4 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   2db5a:	4939      	ldr	r1, [pc, #228]	; (2dc40 <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "config");
   2db5c:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   2db5e:	4630      	mov	r0, r6
   2db60:	f017 f830 	bl	44bc4 <json_add_null>
		ret += json_add_null(reported_obj,
   2db64:	4937      	ldr	r1, [pc, #220]	; (2dc44 <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(reported_obj, "stage");
   2db66:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   2db68:	4630      	mov	r0, r6
   2db6a:	f017 f82b 	bl	44bc4 <json_add_null>
   2db6e:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2db70:	462a      	mov	r2, r5
   2db72:	4935      	ldr	r1, [pc, #212]	; (2dc48 <nrf_cloud_encode_state+0x19c>)
   2db74:	4630      	mov	r0, r6
   2db76:	f016 fa3c 	bl	43ff2 <cJSON_AddItemToObject>
   2db7a:	4632      	mov	r2, r6
   2db7c:	4933      	ldr	r1, [pc, #204]	; (2dc4c <nrf_cloud_encode_state+0x1a0>)
   2db7e:	4640      	mov	r0, r8
   2db80:	f016 fa37 	bl	43ff2 <cJSON_AddItemToObject>
   2db84:	4638      	mov	r0, r7
   2db86:	4642      	mov	r2, r8
   2db88:	492a      	ldr	r1, [pc, #168]	; (2dc34 <nrf_cloud_encode_state+0x188>)
   2db8a:	f016 fa32 	bl	43ff2 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   2db8e:	4638      	mov	r0, r7
	if (ret != 0) {
   2db90:	2c00      	cmp	r4, #0
   2db92:	d1b0      	bne.n	2daf6 <nrf_cloud_encode_state+0x4a>
	buffer = cJSON_PrintUnformatted(root_obj);
   2db94:	f016 fa16 	bl	43fc4 <cJSON_PrintUnformatted>
   2db98:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2db9a:	4638      	mov	r0, r7
   2db9c:	f7fb fb3a 	bl	29214 <cJSON_Delete>
	if (buffer == NULL) {
   2dba0:	2d00      	cmp	r5, #0
   2dba2:	d0b3      	beq.n	2db0c <nrf_cloud_encode_state+0x60>
	output->ptr = buffer;
   2dba4:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   2dba8:	4628      	mov	r0, r5
   2dbaa:	f7ef fb5b 	bl	1d264 <strlen>
   2dbae:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   2dbb2:	e7c0      	b.n	2db36 <nrf_cloud_encode_state+0x8a>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   2dbb4:	aa04      	add	r2, sp, #16
   2dbb6:	4669      	mov	r1, sp
   2dbb8:	a802      	add	r0, sp, #8
   2dbba:	f001 fa1f 	bl	2effc <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2dbbe:	9a05      	ldr	r2, [sp, #20]
   2dbc0:	4920      	ldr	r1, [pc, #128]	; (2dc44 <nrf_cloud_encode_state+0x198>)
   2dbc2:	4630      	mov	r0, r6
   2dbc4:	f016 ffe9 	bl	44b9a <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2dbc8:	4a21      	ldr	r2, [pc, #132]	; (2dc50 <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2dbca:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2dbcc:	4919      	ldr	r1, [pc, #100]	; (2dc34 <nrf_cloud_encode_state+0x188>)
   2dbce:	4628      	mov	r0, r5
   2dbd0:	f016 ffe3 	bl	44b9a <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   2dbd4:	4919      	ldr	r1, [pc, #100]	; (2dc3c <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2dbd6:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2dbd8:	4628      	mov	r0, r5
   2dbda:	f016 fff3 	bl	44bc4 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   2dbde:	491d      	ldr	r1, [pc, #116]	; (2dc54 <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_null(pairing_obj, "config");
   2dbe0:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   2dbe2:	4630      	mov	r0, r6
   2dbe4:	f016 ffee 	bl	44bc4 <json_add_null>
   2dbe8:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   2dbea:	f7fb fbe7 	bl	293bc <cJSON_CreateObject>
		if (topics_obj == NULL) {
   2dbee:	4682      	mov	sl, r0
   2dbf0:	2800      	cmp	r0, #0
   2dbf2:	f43f af7f 	beq.w	2daf4 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2dbf6:	9a03      	ldr	r2, [sp, #12]
   2dbf8:	4917      	ldr	r1, [pc, #92]	; (2dc58 <nrf_cloud_encode_state+0x1ac>)
   2dbfa:	f016 ffce 	bl	44b9a <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2dbfe:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2dc00:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2dc02:	4916      	ldr	r1, [pc, #88]	; (2dc5c <nrf_cloud_encode_state+0x1b0>)
   2dc04:	4650      	mov	r0, sl
   2dc06:	f016 ffc8 	bl	44b9a <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2dc0a:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2dc0c:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2dc0e:	490a      	ldr	r1, [pc, #40]	; (2dc38 <nrf_cloud_encode_state+0x18c>)
   2dc10:	4628      	mov	r0, r5
   2dc12:	f016 f9ee 	bl	43ff2 <cJSON_AddItemToObject>
		if (ret != 0) {
   2dc16:	2c00      	cmp	r4, #0
   2dc18:	d0aa      	beq.n	2db70 <nrf_cloud_encode_state+0xc4>
			cJSON_Delete(topics_obj);
   2dc1a:	4650      	mov	r0, sl
   2dc1c:	f7fb fafa 	bl	29214 <cJSON_Delete>
		break;
   2dc20:	e7a6      	b.n	2db70 <nrf_cloud_encode_state+0xc4>
   2dc22:	bf00      	nop
   2dc24:	000489c2 	.word	0x000489c2
   2dc28:	0004825b 	.word	0x0004825b
   2dc2c:	0004bff2 	.word	0x0004bff2
   2dc30:	0004bf8a 	.word	0x0004bf8a
   2dc34:	0004e2e6 	.word	0x0004e2e6
   2dc38:	0004c07d 	.word	0x0004c07d
   2dc3c:	0004ea34 	.word	0x0004ea34
   2dc40:	0004c084 	.word	0x0004c084
   2dc44:	0004bede 	.word	0x0004bede
   2dc48:	0004bef9 	.word	0x0004bef9
   2dc4c:	0004894e 	.word	0x0004894e
   2dc50:	0004c08a 	.word	0x0004c08a
   2dc54:	0004c091 	.word	0x0004c091
   2dc58:	0004c09f 	.word	0x0004c09f
   2dc5c:	0004c0a3 	.word	0x0004c0a3

0002dc60 <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   2dc60:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2dc64:	4689      	mov	r9, r1
   2dc66:	4690      	mov	r8, r2
   2dc68:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2dc6a:	4604      	mov	r4, r0
   2dc6c:	b958      	cbnz	r0, 2dc86 <nrf_cloud_decode_data_endpoint+0x26>
   2dc6e:	4950      	ldr	r1, [pc, #320]	; (2ddb0 <nrf_cloud_decode_data_endpoint+0x150>)
   2dc70:	4850      	ldr	r0, [pc, #320]	; (2ddb4 <nrf_cloud_decode_data_endpoint+0x154>)
   2dc72:	f240 13cb 	movw	r3, #459	; 0x1cb
   2dc76:	4a50      	ldr	r2, [pc, #320]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dc78:	f013 ffb6 	bl	41be8 <printk>
   2dc7c:	f240 11cb 	movw	r1, #459	; 0x1cb
   2dc80:	484d      	ldr	r0, [pc, #308]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dc82:	f014 f9cb 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2dc86:	6863      	ldr	r3, [r4, #4]
   2dc88:	b95b      	cbnz	r3, 2dca2 <nrf_cloud_decode_data_endpoint+0x42>
   2dc8a:	494c      	ldr	r1, [pc, #304]	; (2ddbc <nrf_cloud_decode_data_endpoint+0x15c>)
   2dc8c:	4849      	ldr	r0, [pc, #292]	; (2ddb4 <nrf_cloud_decode_data_endpoint+0x154>)
   2dc8e:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   2dc92:	4a49      	ldr	r2, [pc, #292]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dc94:	f013 ffa8 	bl	41be8 <printk>
   2dc98:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   2dc9c:	4846      	ldr	r0, [pc, #280]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dc9e:	f014 f9bd 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2dca2:	6823      	ldr	r3, [r4, #0]
   2dca4:	b95b      	cbnz	r3, 2dcbe <nrf_cloud_decode_data_endpoint+0x5e>
   2dca6:	4946      	ldr	r1, [pc, #280]	; (2ddc0 <nrf_cloud_decode_data_endpoint+0x160>)
   2dca8:	4842      	ldr	r0, [pc, #264]	; (2ddb4 <nrf_cloud_decode_data_endpoint+0x154>)
   2dcaa:	f240 13cd 	movw	r3, #461	; 0x1cd
   2dcae:	4a42      	ldr	r2, [pc, #264]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcb0:	f013 ff9a 	bl	41be8 <printk>
   2dcb4:	f240 11cd 	movw	r1, #461	; 0x1cd
   2dcb8:	483f      	ldr	r0, [pc, #252]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcba:	f014 f9af 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2dcbe:	f1b9 0f00 	cmp.w	r9, #0
   2dcc2:	d10b      	bne.n	2dcdc <nrf_cloud_decode_data_endpoint+0x7c>
   2dcc4:	493f      	ldr	r1, [pc, #252]	; (2ddc4 <nrf_cloud_decode_data_endpoint+0x164>)
   2dcc6:	483b      	ldr	r0, [pc, #236]	; (2ddb4 <nrf_cloud_decode_data_endpoint+0x154>)
   2dcc8:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2dccc:	4a3a      	ldr	r2, [pc, #232]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcce:	f013 ff8b 	bl	41be8 <printk>
   2dcd2:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2dcd6:	4838      	ldr	r0, [pc, #224]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcd8:	f014 f9a0 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2dcdc:	f1b8 0f00 	cmp.w	r8, #0
   2dce0:	d10b      	bne.n	2dcfa <nrf_cloud_decode_data_endpoint+0x9a>
   2dce2:	4939      	ldr	r1, [pc, #228]	; (2ddc8 <nrf_cloud_decode_data_endpoint+0x168>)
   2dce4:	4833      	ldr	r0, [pc, #204]	; (2ddb4 <nrf_cloud_decode_data_endpoint+0x154>)
   2dce6:	f240 13cf 	movw	r3, #463	; 0x1cf
   2dcea:	4a33      	ldr	r2, [pc, #204]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcec:	f013 ff7c 	bl	41be8 <printk>
   2dcf0:	f240 11cf 	movw	r1, #463	; 0x1cf
   2dcf4:	4830      	ldr	r0, [pc, #192]	; (2ddb8 <nrf_cloud_decode_data_endpoint+0x158>)
   2dcf6:	f014 f991 	bl	4201c <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2dcfa:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   2dcfc:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2dcfe:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   2dd00:	f016 f95c 	bl	43fbc <cJSON_Parse>
	if (root_obj == NULL) {
   2dd04:	4605      	mov	r5, r0
   2dd06:	b308      	cbz	r0, 2dd4c <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2dd08:	a901      	add	r1, sp, #4
   2dd0a:	f7ff fd2d 	bl	2d768 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   2dd0e:	b307      	cbz	r7, 2dd52 <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   2dd10:	492e      	ldr	r1, [pc, #184]	; (2ddcc <nrf_cloud_decode_data_endpoint+0x16c>)
   2dd12:	9801      	ldr	r0, [sp, #4]
   2dd14:	f016 ff52 	bl	44bbc <json_object_decode>
   2dd18:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2dd1a:	492d      	ldr	r1, [pc, #180]	; (2ddd0 <nrf_cloud_decode_data_endpoint+0x170>)
   2dd1c:	9801      	ldr	r0, [sp, #4]
   2dd1e:	f016 ff4d 	bl	44bbc <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2dd22:	492c      	ldr	r1, [pc, #176]	; (2ddd4 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2dd24:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2dd26:	f016 ff49 	bl	44bbc <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2dd2a:	492b      	ldr	r1, [pc, #172]	; (2ddd8 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2dd2c:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2dd2e:	4630      	mov	r0, r6
   2dd30:	f016 ff44 	bl	44bbc <json_object_decode>
   2dd34:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2dd36:	f1ba 0f00 	cmp.w	sl, #0
   2dd3a:	d004      	beq.n	2dd46 <nrf_cloud_decode_data_endpoint+0xe6>
   2dd3c:	b118      	cbz	r0, 2dd46 <nrf_cloud_decode_data_endpoint+0xe6>
   2dd3e:	f8da 300c 	ldr.w	r3, [sl, #12]
   2dd42:	2b10      	cmp	r3, #16
   2dd44:	d007      	beq.n	2dd56 <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2dd46:	4628      	mov	r0, r5
   2dd48:	f7fb fa64 	bl	29214 <cJSON_Delete>
		return -ENOENT;
   2dd4c:	f06f 0401 	mvn.w	r4, #1
   2dd50:	e017      	b.n	2dd82 <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   2dd52:	463c      	mov	r4, r7
   2dd54:	e7e1      	b.n	2dd1a <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   2dd56:	4821      	ldr	r0, [pc, #132]	; (2dddc <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   2dd58:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   2dd5c:	f7ef fa82 	bl	1d264 <strlen>
   2dd60:	491e      	ldr	r1, [pc, #120]	; (2dddc <nrf_cloud_decode_data_endpoint+0x17c>)
   2dd62:	4602      	mov	r2, r0
   2dd64:	4650      	mov	r0, sl
   2dd66:	f017 fc58 	bl	4561a <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2dd6a:	2800      	cmp	r0, #0
   2dd6c:	d1eb      	bne.n	2dd46 <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2dd6e:	b164      	cbz	r4, 2dd8a <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2dd70:	4620      	mov	r0, r4
   2dd72:	4639      	mov	r1, r7
   2dd74:	f016 ff36 	bl	44be4 <json_decode_and_alloc>
		if (err) {
   2dd78:	4604      	mov	r4, r0
   2dd7a:	b130      	cbz	r0, 2dd8a <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   2dd7c:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2dd7e:	f7fb fa49 	bl	29214 <cJSON_Delete>

	return err;
}
   2dd82:	4620      	mov	r0, r4
   2dd84:	b002      	add	sp, #8
   2dd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2dd8a:	4915      	ldr	r1, [pc, #84]	; (2dde0 <nrf_cloud_decode_data_endpoint+0x180>)
   2dd8c:	4630      	mov	r0, r6
   2dd8e:	f016 ff15 	bl	44bbc <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2dd92:	4649      	mov	r1, r9
   2dd94:	f016 ff26 	bl	44be4 <json_decode_and_alloc>
	if (err) {
   2dd98:	4604      	mov	r4, r0
   2dd9a:	2800      	cmp	r0, #0
   2dd9c:	d1ee      	bne.n	2dd7c <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   2dd9e:	4911      	ldr	r1, [pc, #68]	; (2dde4 <nrf_cloud_decode_data_endpoint+0x184>)
   2dda0:	4630      	mov	r0, r6
   2dda2:	f016 ff0b 	bl	44bbc <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2dda6:	4641      	mov	r1, r8
   2dda8:	f016 ff1c 	bl	44be4 <json_decode_and_alloc>
	if (err) {
   2ddac:	4604      	mov	r4, r0
   2ddae:	e7e5      	b.n	2dd7c <nrf_cloud_decode_data_endpoint+0x11c>
   2ddb0:	0004be88 	.word	0x0004be88
   2ddb4:	0004825b 	.word	0x0004825b
   2ddb8:	0004bff2 	.word	0x0004bff2
   2ddbc:	0004be9d 	.word	0x0004be9d
   2ddc0:	0004beb7 	.word	0x0004beb7
   2ddc4:	0004be2b 	.word	0x0004be2b
   2ddc8:	0004be46 	.word	0x0004be46
   2ddcc:	0004bede 	.word	0x0004bede
   2ddd0:	0004bef9 	.word	0x0004bef9
   2ddd4:	0004e2e6 	.word	0x0004e2e6
   2ddd8:	0004c07d 	.word	0x0004c07d
   2dddc:	0004c08a 	.word	0x0004c08a
   2dde0:	0004c09f 	.word	0x0004c09f
   2dde4:	0004c0a3 	.word	0x0004c0a3

0002dde8 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2dde8:	b510      	push	{r4, lr}
   2ddea:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   2ddec:	2218      	movs	r2, #24
   2ddee:	2100      	movs	r1, #0
   2ddf0:	4668      	mov	r0, sp
   2ddf2:	f017 fa39 	bl	45268 <memset>
   2ddf6:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2ddf8:	4669      	mov	r1, sp
   2ddfa:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   2ddfc:	9304      	str	r3, [sp, #16]
   2ddfe:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2de02:	f7ff fe53 	bl	2daac <nrf_cloud_encode_state>
	if (err) {
   2de06:	4604      	mov	r4, r0
   2de08:	b188      	cbz	r0, 2de2e <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2de0a:	2301      	movs	r3, #1
   2de0c:	f04f 0000 	mov.w	r0, #0
   2de10:	4a1b      	ldr	r2, [pc, #108]	; (2de80 <state_ua_pin_wait+0x98>)
   2de12:	f363 0007 	bfi	r0, r3, #0, #8
   2de16:	4b1b      	ldr	r3, [pc, #108]	; (2de84 <state_ua_pin_wait+0x9c>)
   2de18:	491b      	ldr	r1, [pc, #108]	; (2de88 <state_ua_pin_wait+0xa0>)
   2de1a:	1a9b      	subs	r3, r3, r2
   2de1c:	08db      	lsrs	r3, r3, #3
   2de1e:	f363 108f 	bfi	r0, r3, #6, #10
   2de22:	4622      	mov	r2, r4
   2de24:	f014 f90b 	bl	4203e <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   2de28:	4620      	mov	r0, r4
   2de2a:	b00c      	add	sp, #48	; 0x30
   2de2c:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2de2e:	4668      	mov	r0, sp
   2de30:	f001 f818 	bl	2ee64 <nct_cc_send>
	if (err) {
   2de34:	4604      	mov	r4, r0
   2de36:	b190      	cbz	r0, 2de5e <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   2de38:	2301      	movs	r3, #1
   2de3a:	f04f 0000 	mov.w	r0, #0
   2de3e:	4a10      	ldr	r2, [pc, #64]	; (2de80 <state_ua_pin_wait+0x98>)
   2de40:	f363 0007 	bfi	r0, r3, #0, #8
   2de44:	4b0f      	ldr	r3, [pc, #60]	; (2de84 <state_ua_pin_wait+0x9c>)
   2de46:	4911      	ldr	r1, [pc, #68]	; (2de8c <state_ua_pin_wait+0xa4>)
   2de48:	1a9b      	subs	r3, r3, r2
   2de4a:	08db      	lsrs	r3, r3, #3
   2de4c:	f363 108f 	bfi	r0, r3, #6, #10
   2de50:	4622      	mov	r2, r4
   2de52:	f014 f8f4 	bl	4203e <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2de56:	9801      	ldr	r0, [sp, #4]
   2de58:	f017 f9ab 	bl	451b2 <k_free>
		return err;
   2de5c:	e7e4      	b.n	2de28 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   2de5e:	9801      	ldr	r0, [sp, #4]
   2de60:	f017 f9a7 	bl	451b2 <k_free>
	struct nrf_cloud_evt evt = {
   2de64:	2218      	movs	r2, #24
   2de66:	4621      	mov	r1, r4
   2de68:	eb0d 0002 	add.w	r0, sp, r2
   2de6c:	f017 f9fc 	bl	45268 <memset>
   2de70:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2de72:	a906      	add	r1, sp, #24
   2de74:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   2de76:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2de7a:	f7ff fa7f 	bl	2d37c <nfsm_set_current_state_and_notify>
	return 0;
   2de7e:	e7d3      	b.n	2de28 <state_ua_pin_wait+0x40>
   2de80:	00046878 	.word	0x00046878
   2de84:	00046968 	.word	0x00046968
   2de88:	0004c26c 	.word	0x0004c26c
   2de8c:	0004c28d 	.word	0x0004c28d

0002de90 <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   2de90:	b510      	push	{r4, lr}
   2de92:	4604      	mov	r4, r0
   2de94:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   2de96:	2100      	movs	r1, #0
   2de98:	2218      	movs	r2, #24
   2de9a:	4668      	mov	r0, sp
   2de9c:	f017 f9e4 	bl	45268 <memset>
   2dea0:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   2dea2:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2dea4:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2dea8:	b139      	cbz	r1, 2deba <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2deaa:	4669      	mov	r1, sp
   2deac:	200c      	movs	r0, #12
   2deae:	f7ff fa65 	bl	2d37c <nfsm_set_current_state_and_notify>
		return 0;
   2deb2:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   2deb4:	4620      	mov	r0, r4
   2deb6:	b006      	add	sp, #24
   2deb8:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2deba:	2004      	movs	r0, #4
   2debc:	f7ff fa5e 	bl	2d37c <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2dec0:	4806      	ldr	r0, [pc, #24]	; (2dedc <cc_connection_handler+0x4c>)
   2dec2:	f000 ffcf 	bl	2ee64 <nct_cc_send>
	if (err) {
   2dec6:	4604      	mov	r4, r0
   2dec8:	b120      	cbz	r0, 2ded4 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2deca:	4669      	mov	r1, sp
   2decc:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2dece:	f7ff fa55 	bl	2d37c <nfsm_set_current_state_and_notify>
	return 0;
   2ded2:	e7ef      	b.n	2deb4 <cc_connection_handler+0x24>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2ded4:	4601      	mov	r1, r0
   2ded6:	2005      	movs	r0, #5
   2ded8:	e7f9      	b.n	2dece <cc_connection_handler+0x3e>
   2deda:	bf00      	nop
   2dedc:	00047248 	.word	0x00047248

0002dee0 <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   2dee2:	2700      	movs	r7, #0
{
   2dee4:	b095      	sub	sp, #84	; 0x54
   2dee6:	4605      	mov	r5, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2dee8:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   2deea:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2deee:	f7ff fa3f 	bl	2d370 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2def2:	2218      	movs	r2, #24
   2def4:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   2def6:	4606      	mov	r6, r0
	struct nct_cc_data msg = {
   2def8:	a808      	add	r0, sp, #32
   2defa:	f017 f9b5 	bl	45268 <memset>
   2defe:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   2df00:	2218      	movs	r2, #24
   2df02:	4639      	mov	r1, r7
   2df04:	a80e      	add	r0, sp, #56	; 0x38
	struct nct_cc_data msg = {
   2df06:	930c      	str	r3, [sp, #48]	; 0x30
   2df08:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	struct nrf_cloud_evt cloud_evt = {
   2df0c:	f017 f9ac 	bl	45268 <memset>
   2df10:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2df12:	6868      	ldr	r0, [r5, #4]
	struct nrf_cloud_evt cloud_evt = {
   2df14:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (evt->param.cc == NULL) {
   2df18:	b1b0      	cbz	r0, 2df48 <cc_rx_data_handler+0x68>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2df1a:	f10d 0207 	add.w	r2, sp, #7
   2df1e:	a908      	add	r1, sp, #32
   2df20:	f7ff fd10 	bl	2d944 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2df24:	4602      	mov	r2, r0
   2df26:	b370      	cbz	r0, 2df86 <cc_rx_data_handler+0xa6>
   2df28:	1cc3      	adds	r3, r0, #3
   2df2a:	d02c      	beq.n	2df86 <cc_rx_data_handler+0xa6>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2df2c:	2301      	movs	r3, #1
   2df2e:	f04f 0000 	mov.w	r0, #0
   2df32:	496c      	ldr	r1, [pc, #432]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2df34:	f363 0007 	bfi	r0, r3, #0, #8
   2df38:	4b6b      	ldr	r3, [pc, #428]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2df3a:	1a5b      	subs	r3, r3, r1
   2df3c:	08db      	lsrs	r3, r3, #3
   2df3e:	f363 108f 	bfi	r0, r3, #6, #10
   2df42:	496a      	ldr	r1, [pc, #424]	; (2e0ec <cc_rx_data_handler+0x20c>)
   2df44:	f014 f87b 	bl	4203e <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2df48:	4620      	mov	r0, r4
   2df4a:	f10d 0106 	add.w	r1, sp, #6
   2df4e:	f7ff fc1d 	bl	2d78c <nrf_cloud_decode_requested_state>

	if (err) {
   2df52:	4604      	mov	r4, r0
   2df54:	2800      	cmp	r0, #0
   2df56:	d045      	beq.n	2dfe4 <cc_rx_data_handler+0x104>
		if (!config_found) {
   2df58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2df5c:	2b00      	cmp	r3, #0
   2df5e:	f040 80be 	bne.w	2e0de <cc_rx_data_handler+0x1fe>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2df62:	2301      	movs	r3, #1
   2df64:	f04f 0000 	mov.w	r0, #0
   2df68:	4a5e      	ldr	r2, [pc, #376]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2df6a:	f363 0007 	bfi	r0, r3, #0, #8
   2df6e:	4b5e      	ldr	r3, [pc, #376]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2df70:	495f      	ldr	r1, [pc, #380]	; (2e0f0 <cc_rx_data_handler+0x210>)
   2df72:	1a9b      	subs	r3, r3, r2
   2df74:	4622      	mov	r2, r4
   2df76:	08db      	lsrs	r3, r3, #3
   2df78:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2df7c:	f014 f85f 	bl	4203e <log_string_sync>
	default:
		break;
	}

	return 0;
}
   2df80:	4620      	mov	r0, r4
   2df82:	b015      	add	sp, #84	; 0x54
   2df84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*config_found == false) {
   2df86:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2df8a:	2b00      	cmp	r3, #0
   2df8c:	d0dc      	beq.n	2df48 <cc_rx_data_handler+0x68>
	if (msg.data.ptr) {
   2df8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2df90:	b1b3      	cbz	r3, 2dfc0 <cc_rx_data_handler+0xe0>
		err = nct_cc_send(&msg);
   2df92:	a808      	add	r0, sp, #32
   2df94:	f000 ff66 	bl	2ee64 <nct_cc_send>
   2df98:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2df9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2df9c:	f017 f909 	bl	451b2 <k_free>
		if (err) {
   2dfa0:	b177      	cbz	r7, 2dfc0 <cc_rx_data_handler+0xe0>
			LOG_ERR("nct_cc_send failed %d", err);
   2dfa2:	2301      	movs	r3, #1
   2dfa4:	f04f 0000 	mov.w	r0, #0
   2dfa8:	4a4e      	ldr	r2, [pc, #312]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2dfaa:	f363 0007 	bfi	r0, r3, #0, #8
   2dfae:	4b4e      	ldr	r3, [pc, #312]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2dfb0:	4950      	ldr	r1, [pc, #320]	; (2e0f4 <cc_rx_data_handler+0x214>)
   2dfb2:	1a9b      	subs	r3, r3, r2
   2dfb4:	08db      	lsrs	r3, r3, #3
   2dfb6:	f363 108f 	bfi	r0, r3, #6, #10
   2dfba:	463a      	mov	r2, r7
   2dfbc:	f014 f83f 	bl	4203e <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   2dfc0:	686b      	ldr	r3, [r5, #4]
   2dfc2:	aa10      	add	r2, sp, #64	; 0x40
   2dfc4:	e893 0003 	ldmia.w	r3, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2dfc8:	3308      	adds	r3, #8
	cloud_evt.data = evt->param.cc->data;
   2dfca:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2dfce:	e893 0003 	ldmia.w	r3, {r0, r1}
   2dfd2:	ab14      	add	r3, sp, #80	; 0x50
   2dfd4:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2dfd8:	f7ff f9ca 	bl	2d370 <nfsm_get_current_state>
   2dfdc:	a90e      	add	r1, sp, #56	; 0x38
   2dfde:	f7ff f9cd 	bl	2d37c <nfsm_set_current_state_and_notify>
	return err;
   2dfe2:	e7b1      	b.n	2df48 <cc_rx_data_handler+0x68>
	switch (current_state) {
   2dfe4:	3e04      	subs	r6, #4
   2dfe6:	2e05      	cmp	r6, #5
   2dfe8:	d8ca      	bhi.n	2df80 <cc_rx_data_handler+0xa0>
   2dfea:	e8df f006 	tbb	[pc, r6]
   2dfee:	0303      	.short	0x0303
   2dff0:	70700303 	.word	0x70700303
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2dff4:	f89d 6006 	ldrb.w	r6, [sp, #6]
   2dff8:	2e07      	cmp	r6, #7
   2dffa:	d161      	bne.n	2e0c0 <cc_rx_data_handler+0x1e0>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   2dffc:	ab06      	add	r3, sp, #24
   2dffe:	aa02      	add	r2, sp, #8
   2e000:	a904      	add	r1, sp, #16
   2e002:	6868      	ldr	r0, [r5, #4]
   2e004:	f7ff fe2c 	bl	2dc60 <nrf_cloud_decode_data_endpoint>
	if (err) {
   2e008:	4604      	mov	r4, r0
   2e00a:	b168      	cbz	r0, 2e028 <cc_rx_data_handler+0x148>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2e00c:	2301      	movs	r3, #1
   2e00e:	f04f 0000 	mov.w	r0, #0
   2e012:	4a34      	ldr	r2, [pc, #208]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2e014:	f363 0007 	bfi	r0, r3, #0, #8
   2e018:	4b33      	ldr	r3, [pc, #204]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2e01a:	4937      	ldr	r1, [pc, #220]	; (2e0f8 <cc_rx_data_handler+0x218>)
   2e01c:	1a9b      	subs	r3, r3, r2
   2e01e:	08db      	lsrs	r3, r3, #3
   2e020:	f363 108f 	bfi	r0, r3, #6, #10
   2e024:	4622      	mov	r2, r4
   2e026:	e7a9      	b.n	2df7c <cc_rx_data_handler+0x9c>
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   2e028:	aa06      	add	r2, sp, #24
   2e02a:	a902      	add	r1, sp, #8
   2e02c:	a804      	add	r0, sp, #16
   2e02e:	f000 ff97 	bl	2ef60 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2e032:	4621      	mov	r1, r4
   2e034:	2218      	movs	r2, #24
   2e036:	a808      	add	r0, sp, #32
   2e038:	f017 f916 	bl	45268 <memset>
   2e03c:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2e040:	930c      	str	r3, [sp, #48]	; 0x30
   2e042:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2e044:	a908      	add	r1, sp, #32
   2e046:	4630      	mov	r0, r6
	struct nct_cc_data msg = {
   2e048:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2e04c:	f7ff fd2e 	bl	2daac <nrf_cloud_encode_state>
	if (err) {
   2e050:	4604      	mov	r4, r0
   2e052:	b168      	cbz	r0, 2e070 <cc_rx_data_handler+0x190>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2e054:	2301      	movs	r3, #1
   2e056:	f04f 0000 	mov.w	r0, #0
   2e05a:	4a22      	ldr	r2, [pc, #136]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2e05c:	f363 0007 	bfi	r0, r3, #0, #8
   2e060:	4b21      	ldr	r3, [pc, #132]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2e062:	4926      	ldr	r1, [pc, #152]	; (2e0fc <cc_rx_data_handler+0x21c>)
   2e064:	1a9b      	subs	r3, r3, r2
   2e066:	08db      	lsrs	r3, r3, #3
   2e068:	f363 108f 	bfi	r0, r3, #6, #10
   2e06c:	4622      	mov	r2, r4
   2e06e:	e785      	b.n	2df7c <cc_rx_data_handler+0x9c>
	err = nct_cc_send(&msg);
   2e070:	a808      	add	r0, sp, #32
   2e072:	f000 fef7 	bl	2ee64 <nct_cc_send>
	if (err) {
   2e076:	4604      	mov	r4, r0
   2e078:	b190      	cbz	r0, 2e0a0 <cc_rx_data_handler+0x1c0>
		LOG_ERR("nct_cc_send failed %d", err);
   2e07a:	2301      	movs	r3, #1
   2e07c:	f04f 0000 	mov.w	r0, #0
   2e080:	4a18      	ldr	r2, [pc, #96]	; (2e0e4 <cc_rx_data_handler+0x204>)
   2e082:	f363 0007 	bfi	r0, r3, #0, #8
   2e086:	4b18      	ldr	r3, [pc, #96]	; (2e0e8 <cc_rx_data_handler+0x208>)
   2e088:	491a      	ldr	r1, [pc, #104]	; (2e0f4 <cc_rx_data_handler+0x214>)
   2e08a:	1a9b      	subs	r3, r3, r2
   2e08c:	08db      	lsrs	r3, r3, #3
   2e08e:	f363 108f 	bfi	r0, r3, #6, #10
   2e092:	4622      	mov	r2, r4
   2e094:	f013 ffd3 	bl	4203e <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2e098:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e09a:	f017 f88a 	bl	451b2 <k_free>
		return err;
   2e09e:	e76f      	b.n	2df80 <cc_rx_data_handler+0xa0>
	nrf_cloud_free((void *)msg.data.ptr);
   2e0a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   2e0a2:	f017 f886 	bl	451b2 <k_free>
	struct nrf_cloud_evt evt = {
   2e0a6:	4621      	mov	r1, r4
   2e0a8:	2218      	movs	r2, #24
   2e0aa:	a80e      	add	r0, sp, #56	; 0x38
   2e0ac:	f017 f8dc 	bl	45268 <memset>
   2e0b0:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2e0b2:	a90e      	add	r1, sp, #56	; 0x38
   2e0b4:	4630      	mov	r0, r6
	struct nrf_cloud_evt evt = {
   2e0b6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2e0ba:	f7ff f95f 	bl	2d37c <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2e0be:	e75f      	b.n	2df80 <cc_rx_data_handler+0xa0>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2e0c0:	2e06      	cmp	r6, #6
   2e0c2:	f47f af5d 	bne.w	2df80 <cc_rx_data_handler+0xa0>
			return state_ua_pin_wait();
   2e0c6:	f7ff fe8f 	bl	2dde8 <state_ua_pin_wait>
   2e0ca:	4604      	mov	r4, r0
   2e0cc:	e758      	b.n	2df80 <cc_rx_data_handler+0xa0>
		if (new_state == STATE_UA_PIN_WAIT) {
   2e0ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2e0d2:	2b06      	cmp	r3, #6
   2e0d4:	f47f af54 	bne.w	2df80 <cc_rx_data_handler+0xa0>
			(void)nct_dc_disconnect();
   2e0d8:	f000 fff4 	bl	2f0c4 <nct_dc_disconnect>
   2e0dc:	e7f3      	b.n	2e0c6 <cc_rx_data_handler+0x1e6>
		return 0;
   2e0de:	2400      	movs	r4, #0
   2e0e0:	e74e      	b.n	2df80 <cc_rx_data_handler+0xa0>
   2e0e2:	bf00      	nop
   2e0e4:	00046878 	.word	0x00046878
   2e0e8:	00046968 	.word	0x00046968
   2e0ec:	0004c0ef 	.word	0x0004c0ef
   2e0f0:	0004c11a 	.word	0x0004c11a
   2e0f4:	0004c28d 	.word	0x0004c28d
   2e0f8:	0004c145 	.word	0x0004c145
   2e0fc:	0004c26c 	.word	0x0004c26c

0002e100 <nfsm_init>:
	persistent_session = false;
   2e100:	2000      	movs	r0, #0
   2e102:	4b01      	ldr	r3, [pc, #4]	; (2e108 <nfsm_init+0x8>)
   2e104:	7018      	strb	r0, [r3, #0]
}
   2e106:	4770      	bx	lr
   2e108:	2002c9e0 	.word	0x2002c9e0

0002e10c <nfsm_handle_incoming_event>:
{
   2e10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e10e:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2e110:	4607      	mov	r7, r0
   2e112:	b120      	cbz	r0, 2e11e <nfsm_handle_incoming_event+0x12>
   2e114:	7a06      	ldrb	r6, [r0, #8]
   2e116:	2e09      	cmp	r6, #9
   2e118:	d801      	bhi.n	2e11e <nfsm_handle_incoming_event+0x12>
   2e11a:	290c      	cmp	r1, #12
   2e11c:	d90e      	bls.n	2e13c <nfsm_handle_incoming_event+0x30>
		__ASSERT_NO_MSG(false);
   2e11e:	2378      	movs	r3, #120	; 0x78
   2e120:	4a1e      	ldr	r2, [pc, #120]	; (2e19c <nfsm_handle_incoming_event+0x90>)
   2e122:	491f      	ldr	r1, [pc, #124]	; (2e1a0 <nfsm_handle_incoming_event+0x94>)
   2e124:	481f      	ldr	r0, [pc, #124]	; (2e1a4 <nfsm_handle_incoming_event+0x98>)
   2e126:	f013 fd5f 	bl	41be8 <printk>
   2e12a:	2178      	movs	r1, #120	; 0x78
   2e12c:	481b      	ldr	r0, [pc, #108]	; (2e19c <nfsm_handle_incoming_event+0x90>)
   2e12e:	f013 ff75 	bl	4201c <assert_post_action>
   2e132:	f06f 0415 	mvn.w	r4, #21
}
   2e136:	4620      	mov	r0, r4
   2e138:	b003      	add	sp, #12
   2e13a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2e13c:	4b1a      	ldr	r3, [pc, #104]	; (2e1a8 <nfsm_handle_incoming_event+0x9c>)
   2e13e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2e142:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2e146:	b1a4      	cbz	r4, 2e172 <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2e148:	47a0      	blx	r4
		if (err) {
   2e14a:	4604      	mov	r4, r0
   2e14c:	2800      	cmp	r0, #0
   2e14e:	d0f2      	beq.n	2e136 <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2e150:	2301      	movs	r3, #1
   2e152:	f04f 0000 	mov.w	r0, #0
   2e156:	4a15      	ldr	r2, [pc, #84]	; (2e1ac <nfsm_handle_incoming_event+0xa0>)
   2e158:	f363 0007 	bfi	r0, r3, #0, #8
   2e15c:	4b14      	ldr	r3, [pc, #80]	; (2e1b0 <nfsm_handle_incoming_event+0xa4>)
   2e15e:	4915      	ldr	r1, [pc, #84]	; (2e1b4 <nfsm_handle_incoming_event+0xa8>)
   2e160:	1a9b      	subs	r3, r3, r2
   2e162:	08db      	lsrs	r3, r3, #3
   2e164:	f363 108f 	bfi	r0, r3, #6, #10
   2e168:	462a      	mov	r2, r5
   2e16a:	7a3b      	ldrb	r3, [r7, #8]
   2e16c:	f013 ff67 	bl	4203e <log_string_sync>
   2e170:	e7e1      	b.n	2e136 <nfsm_handle_incoming_event+0x2a>
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2e172:	2304      	movs	r3, #4
   2e174:	f04f 0500 	mov.w	r5, #0
   2e178:	4a0d      	ldr	r2, [pc, #52]	; (2e1b0 <nfsm_handle_incoming_event+0xa4>)
   2e17a:	f363 0507 	bfi	r5, r3, #0, #8
   2e17e:	4b0b      	ldr	r3, [pc, #44]	; (2e1ac <nfsm_handle_incoming_event+0xa0>)
   2e180:	1ad2      	subs	r2, r2, r3
   2e182:	08d2      	lsrs	r2, r2, #3
   2e184:	f362 158f 	bfi	r5, r2, #6, #10
   2e188:	f7ff f8f2 	bl	2d370 <nfsm_get_current_state>
   2e18c:	4633      	mov	r3, r6
   2e18e:	9000      	str	r0, [sp, #0]
   2e190:	4a09      	ldr	r2, [pc, #36]	; (2e1b8 <nfsm_handle_incoming_event+0xac>)
   2e192:	490a      	ldr	r1, [pc, #40]	; (2e1bc <nfsm_handle_incoming_event+0xb0>)
   2e194:	4628      	mov	r0, r5
   2e196:	f013 ff52 	bl	4203e <log_string_sync>
	return 0;
   2e19a:	e7cc      	b.n	2e136 <nfsm_handle_incoming_event+0x2a>
   2e19c:	0004c1da 	.word	0x0004c1da
   2e1a0:	0004edb2 	.word	0x0004edb2
   2e1a4:	0004825b 	.word	0x0004825b
   2e1a8:	000472b0 	.word	0x000472b0
   2e1ac:	00046878 	.word	0x00046878
   2e1b0:	00046968 	.word	0x00046968
   2e1b4:	0004c217 	.word	0x0004c217
   2e1b8:	0004c0b7 	.word	0x0004c0b7
   2e1bc:	0004c23b 	.word	0x0004c23b

0002e1c0 <cc_tx_ack_handler>:

static int cc_tx_ack_handler(const struct nct_evt *nct_evt)
{
   2e1c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   2e1c2:	f241 622e 	movw	r2, #5678	; 0x162e
   2e1c6:	6843      	ldr	r3, [r0, #4]
   2e1c8:	4293      	cmp	r3, r2
   2e1ca:	d105      	bne.n	2e1d8 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2e1cc:	2100      	movs	r1, #0
   2e1ce:	2005      	movs	r0, #5
   2e1d0:	f7ff f8d4 	bl	2d37c <nfsm_set_current_state_and_notify>
				" skipping nct_dc_connect()");
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
		}
	}

	return 0;
   2e1d4:	2400      	movs	r4, #0
   2e1d6:	e00e      	b.n	2e1f6 <cc_tx_ack_handler+0x36>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   2e1d8:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   2e1dc:	4293      	cmp	r3, r2
   2e1de:	d1f9      	bne.n	2e1d4 <cc_tx_ack_handler+0x14>
		if (!persistent_session) {
   2e1e0:	4b14      	ldr	r3, [pc, #80]	; (2e234 <cc_tx_ack_handler+0x74>)
   2e1e2:	781b      	ldrb	r3, [r3, #0]
   2e1e4:	b953      	cbnz	r3, 2e1fc <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2e1e6:	f000 ff3b 	bl	2f060 <nct_dc_connect>
			if (err) {
   2e1ea:	4604      	mov	r4, r0
   2e1ec:	b918      	cbnz	r0, 2e1f6 <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2e1ee:	4601      	mov	r1, r0
   2e1f0:	2008      	movs	r0, #8
   2e1f2:	f7ff f8c3 	bl	2d37c <nfsm_set_current_state_and_notify>
}
   2e1f6:	4620      	mov	r0, r4
   2e1f8:	b004      	add	sp, #16
   2e1fa:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2e1fc:	2400      	movs	r4, #0
   2e1fe:	2302      	movs	r3, #2
   2e200:	9403      	str	r4, [sp, #12]
			LOG_DBG("Previous session valid;"
   2e202:	f04f 0000 	mov.w	r0, #0
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2e206:	f88d 300c 	strb.w	r3, [sp, #12]
			LOG_DBG("Previous session valid;"
   2e20a:	2304      	movs	r3, #4
   2e20c:	4a0a      	ldr	r2, [pc, #40]	; (2e238 <cc_tx_ack_handler+0x78>)
   2e20e:	f363 0007 	bfi	r0, r3, #0, #8
   2e212:	4b0a      	ldr	r3, [pc, #40]	; (2e23c <cc_tx_ack_handler+0x7c>)
   2e214:	490a      	ldr	r1, [pc, #40]	; (2e240 <cc_tx_ack_handler+0x80>)
   2e216:	1a9b      	subs	r3, r3, r2
   2e218:	08db      	lsrs	r3, r3, #3
   2e21a:	f363 108f 	bfi	r0, r3, #6, #10
   2e21e:	4a09      	ldr	r2, [pc, #36]	; (2e244 <cc_tx_ack_handler+0x84>)
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2e220:	e9cd 4401 	strd	r4, r4, [sp, #4]
			LOG_DBG("Previous session valid;"
   2e224:	f013 ff0b 	bl	4203e <log_string_sync>
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2e228:	2108      	movs	r1, #8
   2e22a:	a801      	add	r0, sp, #4
   2e22c:	f7ff ff6e 	bl	2e10c <nfsm_handle_incoming_event>
   2e230:	e7e1      	b.n	2e1f6 <cc_tx_ack_handler+0x36>
   2e232:	bf00      	nop
   2e234:	2002c9e0 	.word	0x2002c9e0
   2e238:	00046878 	.word	0x00046878
   2e23c:	00046968 	.word	0x00046968
   2e240:	0004c16e 	.word	0x0004c16e
   2e244:	0004c0dd 	.word	0x0004c0dd

0002e248 <connection_handler>:
{
   2e248:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2e24a:	6804      	ldr	r4, [r0, #0]
{
   2e24c:	b08a      	sub	sp, #40	; 0x28
   2e24e:	4605      	mov	r5, r0
	if (nct_evt->status != 0) {
   2e250:	b164      	cbz	r4, 2e26c <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2e252:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2e254:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2e256:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2e25a:	f7ff f889 	bl	2d370 <nfsm_get_current_state>
   2e25e:	a904      	add	r1, sp, #16
   2e260:	f7ff f88c 	bl	2d37c <nfsm_set_current_state_and_notify>
		return 0;
   2e264:	2400      	movs	r4, #0
}
   2e266:	4620      	mov	r0, r4
   2e268:	b00a      	add	sp, #40	; 0x28
   2e26a:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2e26c:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2e26e:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2e270:	a904      	add	r1, sp, #16
   2e272:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2e274:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2e276:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2e27a:	f7ff f87f 	bl	2d37c <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2e27e:	792b      	ldrb	r3, [r5, #4]
   2e280:	2b00      	cmp	r3, #0
   2e282:	bf14      	ite	ne
   2e284:	4632      	movne	r2, r6
   2e286:	2200      	moveq	r2, #0
   2e288:	4b12      	ldr	r3, [pc, #72]	; (2e2d4 <connection_handler+0x8c>)
   2e28a:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2e28c:	d109      	bne.n	2e2a2 <connection_handler+0x5a>
		err = nct_cc_connect();
   2e28e:	f000 fdbf 	bl	2ee10 <nct_cc_connect>
		if (err) {
   2e292:	4604      	mov	r4, r0
   2e294:	2800      	cmp	r0, #0
   2e296:	d1e6      	bne.n	2e266 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2e298:	4601      	mov	r1, r0
   2e29a:	2003      	movs	r0, #3
   2e29c:	f7ff f86e 	bl	2d37c <nfsm_set_current_state_and_notify>
   2e2a0:	e7e1      	b.n	2e266 <connection_handler+0x1e>
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2e2a2:	2304      	movs	r3, #4
   2e2a4:	f04f 0000 	mov.w	r0, #0
   2e2a8:	4a0b      	ldr	r2, [pc, #44]	; (2e2d8 <connection_handler+0x90>)
   2e2aa:	f363 0007 	bfi	r0, r3, #0, #8
   2e2ae:	4b0b      	ldr	r3, [pc, #44]	; (2e2dc <connection_handler+0x94>)
   2e2b0:	490b      	ldr	r1, [pc, #44]	; (2e2e0 <connection_handler+0x98>)
   2e2b2:	1a9b      	subs	r3, r3, r2
   2e2b4:	08db      	lsrs	r3, r3, #3
   2e2b6:	f363 108f 	bfi	r0, r3, #6, #10
   2e2ba:	4a0a      	ldr	r2, [pc, #40]	; (2e2e4 <connection_handler+0x9c>)
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2e2bc:	9403      	str	r4, [sp, #12]
   2e2be:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2e2c2:	f88d 600c 	strb.w	r6, [sp, #12]
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2e2c6:	f013 feba 	bl	4203e <log_string_sync>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2e2ca:	2103      	movs	r1, #3
   2e2cc:	a801      	add	r0, sp, #4
   2e2ce:	f7ff ff1d 	bl	2e10c <nfsm_handle_incoming_event>
   2e2d2:	e7c8      	b.n	2e266 <connection_handler+0x1e>
   2e2d4:	2002c9e0 	.word	0x2002c9e0
   2e2d8:	00046878 	.word	0x00046878
   2e2dc:	00046968 	.word	0x00046968
   2e2e0:	0004c1a4 	.word	0x0004c1a4
   2e2e4:	0004c0ca 	.word	0x0004c0ca

0002e2e8 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2e2e8:	2200      	movs	r2, #0
   2e2ea:	4b05      	ldr	r3, [pc, #20]	; (2e300 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2e2ec:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2e2f0:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2e2f4:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   2e2f8:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc
}
   2e2fc:	4770      	bx	lr
   2e2fe:	bf00      	nop
   2e300:	200249d0 	.word	0x200249d0

0002e304 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2e304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e308:	460e      	mov	r6, r1
   2e30a:	b085      	sub	sp, #20
   2e30c:	4617      	mov	r7, r2
   2e30e:	4698      	mov	r8, r3
	if (!key) {
   2e310:	4681      	mov	r9, r0
   2e312:	2800      	cmp	r0, #0
   2e314:	d03e      	beq.n	2e394 <nct_settings_set+0x90>
		return -EINVAL;
	}

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2e316:	2304      	movs	r3, #4
   2e318:	f04f 0500 	mov.w	r5, #0
   2e31c:	4c1f      	ldr	r4, [pc, #124]	; (2e39c <nct_settings_set+0x98>)
   2e31e:	f363 0507 	bfi	r5, r3, #0, #8
   2e322:	4b1f      	ldr	r3, [pc, #124]	; (2e3a0 <nct_settings_set+0x9c>)
   2e324:	1ae4      	subs	r4, r4, r3
   2e326:	f013 fe9d 	bl	42064 <log_strdup>
   2e32a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2e32e:	f364 158f 	bfi	r5, r4, #6, #10
   2e332:	4603      	mov	r3, r0
   2e334:	4a1b      	ldr	r2, [pc, #108]	; (2e3a4 <nct_settings_set+0xa0>)
   2e336:	491c      	ldr	r1, [pc, #112]	; (2e3a8 <nct_settings_set+0xa4>)
   2e338:	4628      	mov	r0, r5
   2e33a:	9600      	str	r6, [sp, #0]
   2e33c:	f013 fe7f 	bl	4203e <log_string_sync>

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2e340:	481a      	ldr	r0, [pc, #104]	; (2e3ac <nct_settings_set+0xa8>)
   2e342:	f7ee ff8f 	bl	1d264 <strlen>
   2e346:	4919      	ldr	r1, [pc, #100]	; (2e3ac <nct_settings_set+0xa8>)
   2e348:	4602      	mov	r2, r0
   2e34a:	4648      	mov	r0, r9
   2e34c:	f017 f965 	bl	4561a <strncmp>
   2e350:	4605      	mov	r5, r0
   2e352:	b128      	cbz	r0, 2e360 <nct_settings_set+0x5c>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2e354:	f06f 0585 	mvn.w	r5, #133	; 0x85
}
   2e358:	4628      	mov	r0, r5
   2e35a:	b005      	add	sp, #20
   2e35c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2e360:	2e04      	cmp	r6, #4
   2e362:	d1f7      	bne.n	2e354 <nct_settings_set+0x50>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2e364:	4632      	mov	r2, r6
   2e366:	a903      	add	r1, sp, #12
   2e368:	4640      	mov	r0, r8
   2e36a:	47b8      	blx	r7
   2e36c:	2804      	cmp	r0, #4
   2e36e:	d1f1      	bne.n	2e354 <nct_settings_set+0x50>
			persistent_session = (bool)read_val;
   2e370:	9b03      	ldr	r3, [sp, #12]
   2e372:	4a0f      	ldr	r2, [pc, #60]	; (2e3b0 <nct_settings_set+0xac>)
   2e374:	1c19      	adds	r1, r3, #0
   2e376:	bf18      	it	ne
   2e378:	2101      	movne	r1, #1
			LOG_DBG("Read setting val: %d", read_val);
   2e37a:	f04f 0000 	mov.w	r0, #0
			persistent_session = (bool)read_val;
   2e37e:	7011      	strb	r1, [r2, #0]
			LOG_DBG("Read setting val: %d", read_val);
   2e380:	2204      	movs	r2, #4
   2e382:	f362 0007 	bfi	r0, r2, #0, #8
   2e386:	f364 108f 	bfi	r0, r4, #6, #10
   2e38a:	4a06      	ldr	r2, [pc, #24]	; (2e3a4 <nct_settings_set+0xa0>)
   2e38c:	4909      	ldr	r1, [pc, #36]	; (2e3b4 <nct_settings_set+0xb0>)
   2e38e:	f013 fe56 	bl	4203e <log_string_sync>
			return 0;
   2e392:	e7e1      	b.n	2e358 <nct_settings_set+0x54>
		return -EINVAL;
   2e394:	f06f 0515 	mvn.w	r5, #21
   2e398:	e7de      	b.n	2e358 <nct_settings_set+0x54>
   2e39a:	bf00      	nop
   2e39c:	00046970 	.word	0x00046970
   2e3a0:	00046878 	.word	0x00046878
   2e3a4:	0004c2d7 	.word	0x0004c2d7
   2e3a8:	0004c987 	.word	0x0004c987
   2e3ac:	0004ca6d 	.word	0x0004ca6d
   2e3b0:	2002ca1e 	.word	0x2002ca1e
   2e3b4:	0004c9a6 	.word	0x0004c9a6

0002e3b8 <nrf_cloud_fota_cb_handler>:
	return ret;
}

#if IS_ENABLED(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt * const evt)
{
   2e3b8:	b508      	push	{r3, lr}
	switch (evt->id)
   2e3ba:	7803      	ldrb	r3, [r0, #0]
   2e3bc:	2b04      	cmp	r3, #4
   2e3be:	d854      	bhi.n	2e46a <nrf_cloud_fota_cb_handler+0xb2>
   2e3c0:	e8df f003 	tbb	[pc, r3]
   2e3c4:	37271403 	.word	0x37271403
   2e3c8:	45          	.byte	0x45
   2e3c9:	00          	.byte	0x00
	{
	case NRF_FOTA_EVT_START:
	{
		LOG_DBG("NRF_FOTA_EVT_START");
   2e3ca:	2304      	movs	r3, #4
   2e3cc:	f04f 0000 	mov.w	r0, #0
   2e3d0:	4a26      	ldr	r2, [pc, #152]	; (2e46c <nrf_cloud_fota_cb_handler+0xb4>)
   2e3d2:	f363 0007 	bfi	r0, r3, #0, #8
   2e3d6:	4b26      	ldr	r3, [pc, #152]	; (2e470 <nrf_cloud_fota_cb_handler+0xb8>)
   2e3d8:	4926      	ldr	r1, [pc, #152]	; (2e474 <nrf_cloud_fota_cb_handler+0xbc>)
   2e3da:	1a9b      	subs	r3, r3, r2
   2e3dc:	08db      	lsrs	r3, r3, #3
   2e3de:	4a26      	ldr	r2, [pc, #152]	; (2e478 <nrf_cloud_fota_cb_handler+0xc0>)
   2e3e0:	f363 108f 	bfi	r0, r3, #6, #10
	default:
	{
		break;
	}
	}
}
   2e3e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_DBG("NRF_FOTA_EVT_ERASE_DONE");
   2e3e8:	f013 be29 	b.w	4203e <log_string_sync>
		LOG_DBG("NRF_FOTA_EVT_DONE: rebooting");
   2e3ec:	2304      	movs	r3, #4
   2e3ee:	f04f 0000 	mov.w	r0, #0
   2e3f2:	4a1e      	ldr	r2, [pc, #120]	; (2e46c <nrf_cloud_fota_cb_handler+0xb4>)
   2e3f4:	f363 0007 	bfi	r0, r3, #0, #8
   2e3f8:	4b1d      	ldr	r3, [pc, #116]	; (2e470 <nrf_cloud_fota_cb_handler+0xb8>)
   2e3fa:	4920      	ldr	r1, [pc, #128]	; (2e47c <nrf_cloud_fota_cb_handler+0xc4>)
   2e3fc:	1a9b      	subs	r3, r3, r2
   2e3fe:	08db      	lsrs	r3, r3, #3
   2e400:	f363 108f 	bfi	r0, r3, #6, #10
   2e404:	4a1c      	ldr	r2, [pc, #112]	; (2e478 <nrf_cloud_fota_cb_handler+0xc0>)
   2e406:	f013 fe1a 	bl	4203e <log_string_sync>
}
   2e40a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   2e40e:	f7ff b9a3 	b.w	2d758 <nct_apply_update>
		LOG_ERR("NRF_FOTA_EVT_ERROR");
   2e412:	2301      	movs	r3, #1
   2e414:	f04f 0000 	mov.w	r0, #0
   2e418:	4a14      	ldr	r2, [pc, #80]	; (2e46c <nrf_cloud_fota_cb_handler+0xb4>)
   2e41a:	f363 0007 	bfi	r0, r3, #0, #8
   2e41e:	4b14      	ldr	r3, [pc, #80]	; (2e470 <nrf_cloud_fota_cb_handler+0xb8>)
   2e420:	4917      	ldr	r1, [pc, #92]	; (2e480 <nrf_cloud_fota_cb_handler+0xc8>)
   2e422:	1a9b      	subs	r3, r3, r2
   2e424:	08db      	lsrs	r3, r3, #3
   2e426:	f363 108f 	bfi	r0, r3, #6, #10
}
   2e42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("NRF_FOTA_EVT_ERROR");
   2e42e:	f013 be06 	b.w	4203e <log_string_sync>
		LOG_DBG("NRF_FOTA_EVT_ERASE_PENDING");
   2e432:	2304      	movs	r3, #4
   2e434:	f04f 0000 	mov.w	r0, #0
   2e438:	4a0c      	ldr	r2, [pc, #48]	; (2e46c <nrf_cloud_fota_cb_handler+0xb4>)
   2e43a:	f363 0007 	bfi	r0, r3, #0, #8
   2e43e:	4b0c      	ldr	r3, [pc, #48]	; (2e470 <nrf_cloud_fota_cb_handler+0xb8>)
   2e440:	4910      	ldr	r1, [pc, #64]	; (2e484 <nrf_cloud_fota_cb_handler+0xcc>)
   2e442:	1a9b      	subs	r3, r3, r2
   2e444:	08db      	lsrs	r3, r3, #3
   2e446:	f363 108f 	bfi	r0, r3, #6, #10
   2e44a:	4a0b      	ldr	r2, [pc, #44]	; (2e478 <nrf_cloud_fota_cb_handler+0xc0>)
   2e44c:	e7ca      	b.n	2e3e4 <nrf_cloud_fota_cb_handler+0x2c>
		LOG_DBG("NRF_FOTA_EVT_ERASE_DONE");
   2e44e:	2304      	movs	r3, #4
   2e450:	f04f 0000 	mov.w	r0, #0
   2e454:	4a05      	ldr	r2, [pc, #20]	; (2e46c <nrf_cloud_fota_cb_handler+0xb4>)
   2e456:	f363 0007 	bfi	r0, r3, #0, #8
   2e45a:	4b05      	ldr	r3, [pc, #20]	; (2e470 <nrf_cloud_fota_cb_handler+0xb8>)
   2e45c:	490a      	ldr	r1, [pc, #40]	; (2e488 <nrf_cloud_fota_cb_handler+0xd0>)
   2e45e:	1a9b      	subs	r3, r3, r2
   2e460:	08db      	lsrs	r3, r3, #3
   2e462:	f363 108f 	bfi	r0, r3, #6, #10
   2e466:	4a04      	ldr	r2, [pc, #16]	; (2e478 <nrf_cloud_fota_cb_handler+0xc0>)
   2e468:	e7bc      	b.n	2e3e4 <nrf_cloud_fota_cb_handler+0x2c>
}
   2e46a:	bd08      	pop	{r3, pc}
   2e46c:	00046878 	.word	0x00046878
   2e470:	00046970 	.word	0x00046970
   2e474:	0004c9bf 	.word	0x0004c9bf
   2e478:	0004c2fb 	.word	0x0004c2fb
   2e47c:	0004c9d6 	.word	0x0004c9d6
   2e480:	0004c9f7 	.word	0x0004c9f7
   2e484:	0004ca0a 	.word	0x0004ca0a
   2e488:	0004ca29 	.word	0x0004ca29

0002e48c <dc_send>:
{
   2e48c:	b530      	push	{r4, r5, lr}
   2e48e:	460d      	mov	r5, r1
   2e490:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2e492:	4604      	mov	r4, r0
   2e494:	b368      	cbz	r0, 2e4f2 <dc_send+0x66>
	struct mqtt_publish_param publish = {
   2e496:	2210      	movs	r2, #16
   2e498:	2100      	movs	r1, #0
   2e49a:	a802      	add	r0, sp, #8
   2e49c:	f016 fee4 	bl	45268 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2e4a0:	4b15      	ldr	r3, [pc, #84]	; (2e4f8 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   2e4a2:	f88d 5008 	strb.w	r5, [sp, #8]
   2e4a6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2e4aa:	9200      	str	r2, [sp, #0]
   2e4ac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2e4b0:	9201      	str	r2, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2e4b2:	6822      	ldr	r2, [r4, #0]
   2e4b4:	b11a      	cbz	r2, 2e4be <dc_send+0x32>
   2e4b6:	6861      	ldr	r1, [r4, #4]
   2e4b8:	b109      	cbz	r1, 2e4be <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2e4ba:	e9cd 1203 	strd	r1, r2, [sp, #12]
	if (dc_data->id != 0) {
   2e4be:	6922      	ldr	r2, [r4, #16]
   2e4c0:	b13a      	cbz	r2, 2e4d2 <dc_send+0x46>
		publish.message_id = dc_data->id;
   2e4c2:	f8ad 2014 	strh.w	r2, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2e4c6:	4669      	mov	r1, sp
   2e4c8:	480c      	ldr	r0, [pc, #48]	; (2e4fc <dc_send+0x70>)
   2e4ca:	f015 f86c 	bl	435a6 <mqtt_publish>
}
   2e4ce:	b007      	add	sp, #28
   2e4d0:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   2e4d2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   2e4d6:	1c51      	adds	r1, r2, #1
	if ((uint16_t)nct.message_id == 0) {
   2e4d8:	b288      	uxth	r0, r1
   2e4da:	b130      	cbz	r0, 2e4ea <dc_send+0x5e>
	nct.message_id++;
   2e4dc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		publish.message_id = dc_get_next_message_id();
   2e4e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   2e4e4:	f8ad 3014 	strh.w	r3, [sp, #20]
   2e4e8:	e7ed      	b.n	2e4c6 <dc_send+0x3a>
		nct.message_id++;
   2e4ea:	3202      	adds	r2, #2
   2e4ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   2e4f0:	e7f6      	b.n	2e4e0 <dc_send+0x54>
		return -EINVAL;
   2e4f2:	f06f 0015 	mvn.w	r0, #21
   2e4f6:	e7ea      	b.n	2e4ce <dc_send+0x42>
   2e4f8:	200249d0 	.word	0x200249d0
   2e4fc:	200249ec 	.word	0x200249ec

0002e500 <dc_endpoint_free>:
{
   2e500:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2e502:	4c0d      	ldr	r4, [pc, #52]	; (2e538 <dc_endpoint_free+0x38>)
   2e504:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2e508:	b108      	cbz	r0, 2e50e <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2e50a:	f016 fe52 	bl	451b2 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2e50e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2e512:	b108      	cbz	r0, 2e518 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2e514:	f016 fe4d 	bl	451b2 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2e518:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2e51c:	b108      	cbz	r0, 2e522 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2e51e:	f016 fe48 	bl	451b2 <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   2e522:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2e526:	b108      	cbz	r0, 2e52c <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.job_status_endp.utf8);
   2e528:	f016 fe43 	bl	451b2 <k_free>
	dc_endpoint_reset();
   2e52c:	f7ff fedc 	bl	2e2e8 <dc_endpoint_reset>
}
   2e530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2e534:	f002 b81e 	b.w	30574 <nrf_cloud_fota_endpoint_clear>
   2e538:	200249d0 	.word	0x200249d0

0002e53c <save_session_state>:
{
   2e53c:	b513      	push	{r0, r1, r4, lr}
	LOG_DBG("Setting session state: %d", session_valid);
   2e53e:	2304      	movs	r3, #4
   2e540:	f04f 0400 	mov.w	r4, #0
   2e544:	4a0e      	ldr	r2, [pc, #56]	; (2e580 <save_session_state+0x44>)
   2e546:	f363 0407 	bfi	r4, r3, #0, #8
   2e54a:	4b0e      	ldr	r3, [pc, #56]	; (2e584 <save_session_state+0x48>)
{
   2e54c:	9001      	str	r0, [sp, #4]
   2e54e:	1a9b      	subs	r3, r3, r2
   2e550:	08db      	lsrs	r3, r3, #3
	LOG_DBG("Setting session state: %d", session_valid);
   2e552:	f363 148f 	bfi	r4, r3, #6, #10
   2e556:	4a0c      	ldr	r2, [pc, #48]	; (2e588 <save_session_state+0x4c>)
   2e558:	4603      	mov	r3, r0
   2e55a:	490c      	ldr	r1, [pc, #48]	; (2e58c <save_session_state+0x50>)
   2e55c:	4620      	mov	r0, r4
   2e55e:	f013 fd6e 	bl	4203e <log_string_sync>
	persistent_session = (bool)session_valid;
   2e562:	9b01      	ldr	r3, [sp, #4]
   2e564:	4a0a      	ldr	r2, [pc, #40]	; (2e590 <save_session_state+0x54>)
   2e566:	3300      	adds	r3, #0
   2e568:	bf18      	it	ne
   2e56a:	2301      	movne	r3, #1
   2e56c:	7013      	strb	r3, [r2, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   2e56e:	2204      	movs	r2, #4
   2e570:	4808      	ldr	r0, [pc, #32]	; (2e594 <save_session_state+0x58>)
   2e572:	eb0d 0102 	add.w	r1, sp, r2
   2e576:	f7f7 f95b 	bl	25830 <settings_save_one>
}
   2e57a:	b002      	add	sp, #8
   2e57c:	bd10      	pop	{r4, pc}
   2e57e:	bf00      	nop
   2e580:	00046878 	.word	0x00046878
   2e584:	00046970 	.word	0x00046970
   2e588:	0004c2e8 	.word	0x0004c2e8
   2e58c:	0004ca45 	.word	0x0004ca45
   2e590:	2002ca1e 	.word	0x2002ca1e
   2e594:	0004ca63 	.word	0x0004ca63

0002e598 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e598:	2300      	movs	r3, #0
{
   2e59a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e59c:	b093      	sub	sp, #76	; 0x4c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e59e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2e5a2:	69cb      	ldr	r3, [r1, #28]
{
   2e5a4:	4607      	mov	r7, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if IS_ENABLED(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2e5a6:	4608      	mov	r0, r1
{
   2e5a8:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e5aa:	9304      	str	r3, [sp, #16]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2e5ac:	f002 f85a 	bl	30664 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2e5b0:	1e02      	subs	r2, r0, #0
   2e5b2:	d067      	beq.n	2e684 <nct_mqtt_evt_handler+0xec>
		return;
	} else if (err < 0) {
   2e5b4:	da0d      	bge.n	2e5d2 <nct_mqtt_evt_handler+0x3a>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2e5b6:	2301      	movs	r3, #1
   2e5b8:	f04f 0000 	mov.w	r0, #0
   2e5bc:	499f      	ldr	r1, [pc, #636]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e5be:	f363 0007 	bfi	r0, r3, #0, #8
   2e5c2:	4b9f      	ldr	r3, [pc, #636]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e5c4:	1a5b      	subs	r3, r3, r1
   2e5c6:	08db      	lsrs	r3, r3, #3
   2e5c8:	f363 108f 	bfi	r0, r3, #6, #10
   2e5cc:	499d      	ldr	r1, [pc, #628]	; (2e844 <nct_mqtt_evt_handler+0x2ac>)
   2e5ce:	f013 fd36 	bl	4203e <log_string_sync>
	}
#endif

	switch (_mqtt_evt->type) {
   2e5d2:	7823      	ldrb	r3, [r4, #0]
   2e5d4:	2b08      	cmp	r3, #8
   2e5d6:	d855      	bhi.n	2e684 <nct_mqtt_evt_handler+0xec>
   2e5d8:	e8df f013 	tbh	[pc, r3, lsl #1]
   2e5dc:	00f60009 	.word	0x00f60009
   2e5e0:	00de002a 	.word	0x00de002a
   2e5e4:	00540054 	.word	0x00540054
   2e5e8:	00ad0054 	.word	0x00ad0054
   2e5ec:	00c7      	.short	0x00c7
	case MQTT_EVT_CONNACK: {
		const struct mqtt_connack_param *p = &_mqtt_evt->param.connack;

		LOG_DBG("MQTT_EVT_CONNACK: result %d", _mqtt_evt->result);
   2e5ee:	2304      	movs	r3, #4
   2e5f0:	f04f 0000 	mov.w	r0, #0
   2e5f4:	4a91      	ldr	r2, [pc, #580]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e5f6:	f363 0007 	bfi	r0, r3, #0, #8
   2e5fa:	4b91      	ldr	r3, [pc, #580]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e5fc:	4992      	ldr	r1, [pc, #584]	; (2e848 <nct_mqtt_evt_handler+0x2b0>)
   2e5fe:	1a9b      	subs	r3, r3, r2
   2e600:	08db      	lsrs	r3, r3, #3
   2e602:	f363 108f 	bfi	r0, r3, #6, #10
   2e606:	4a91      	ldr	r2, [pc, #580]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e608:	69e3      	ldr	r3, [r4, #28]
   2e60a:	f013 fd18 	bl	4203e <log_string_sync>

		evt.param.flag = (p->session_present_flag != 0) &&
   2e60e:	7920      	ldrb	r0, [r4, #4]
   2e610:	4b8f      	ldr	r3, [pc, #572]	; (2e850 <nct_mqtt_evt_handler+0x2b8>)
   2e612:	b158      	cbz	r0, 2e62c <nct_mqtt_evt_handler+0x94>
   2e614:	781a      	ldrb	r2, [r3, #0]
				 persistent_session;

		if (persistent_session && (p->session_present_flag == 0)) {
   2e616:	781b      	ldrb	r3, [r3, #0]
		evt.param.flag = (p->session_present_flag != 0) &&
   2e618:	f88d 2014 	strb.w	r2, [sp, #20]
		if (persistent_session && (p->session_present_flag == 0)) {
   2e61c:	b113      	cbz	r3, 2e624 <nct_mqtt_evt_handler+0x8c>
   2e61e:	b908      	cbnz	r0, 2e624 <nct_mqtt_evt_handler+0x8c>
			/* Session not present, clear saved state */
			save_session_state(0);
   2e620:	f7ff ff8c 	bl	2e53c <save_session_state>
		}

		evt.type = NCT_EVT_CONNECTED;
   2e624:	2300      	movs	r3, #0
		break;
	}
	case MQTT_EVT_DISCONNECT: {
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);

		evt.type = NCT_EVT_DISCONNECTED;
   2e626:	f88d 3018 	strb.w	r3, [sp, #24]
	}
	default:
		break;
	}

	if (event_notify) {
   2e62a:	e05b      	b.n	2e6e4 <nct_mqtt_evt_handler+0x14c>
		evt.param.flag = (p->session_present_flag != 0) &&
   2e62c:	4602      	mov	r2, r0
   2e62e:	e7f2      	b.n	2e616 <nct_mqtt_evt_handler+0x7e>
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2e630:	2304      	movs	r3, #4
   2e632:	f04f 0000 	mov.w	r0, #0
   2e636:	4d82      	ldr	r5, [pc, #520]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e638:	f363 0007 	bfi	r0, r3, #0, #8
   2e63c:	4b7f      	ldr	r3, [pc, #508]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e63e:	4a83      	ldr	r2, [pc, #524]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e640:	1aed      	subs	r5, r5, r3
   2e642:	6963      	ldr	r3, [r4, #20]
   2e644:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2e648:	9300      	str	r3, [sp, #0]
   2e64a:	f365 108f 	bfi	r0, r5, #6, #10
   2e64e:	8b23      	ldrh	r3, [r4, #24]
   2e650:	4980      	ldr	r1, [pc, #512]	; (2e854 <nct_mqtt_evt_handler+0x2bc>)
   2e652:	f013 fcf4 	bl	4203e <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2e656:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   2e658:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2e65c:	d814      	bhi.n	2e688 <nct_mqtt_evt_handler+0xf0>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2e65e:	497e      	ldr	r1, [pc, #504]	; (2e858 <nct_mqtt_evt_handler+0x2c0>)
   2e660:	4638      	mov	r0, r7
   2e662:	f015 f910 	bl	43886 <mqtt_readall_publish_payload>
		if (err < 0) {
   2e666:	1e02      	subs	r2, r0, #0
   2e668:	da11      	bge.n	2e68e <nct_mqtt_evt_handler+0xf6>
			LOG_ERR("publish_get_payload: failed %d", err);
   2e66a:	2301      	movs	r3, #1
   2e66c:	f04f 0000 	mov.w	r0, #0
   2e670:	f363 0007 	bfi	r0, r3, #0, #8
   2e674:	f365 108f 	bfi	r0, r5, #6, #10
   2e678:	4978      	ldr	r1, [pc, #480]	; (2e85c <nct_mqtt_evt_handler+0x2c4>)
   2e67a:	f013 fce0 	bl	4203e <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2e67e:	4638      	mov	r0, r7
   2e680:	f014 fffd 	bl	4367e <mqtt_disconnect>

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
		}
	}
}
   2e684:	b013      	add	sp, #76	; 0x4c
   2e686:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2e688:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2e68c:	e7ed      	b.n	2e66a <nct_mqtt_evt_handler+0xd2>
	for (uint32_t index = 0; index < list_size; index++) {
   2e68e:	2500      	movs	r5, #0
   2e690:	4e73      	ldr	r6, [pc, #460]	; (2e860 <nct_mqtt_evt_handler+0x2c8>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2e692:	68a2      	ldr	r2, [r4, #8]
   2e694:	6873      	ldr	r3, [r6, #4]
   2e696:	6831      	ldr	r1, [r6, #0]
   2e698:	429a      	cmp	r2, r3
   2e69a:	bf28      	it	cs
   2e69c:	461a      	movcs	r2, r3
   2e69e:	6860      	ldr	r0, [r4, #4]
   2e6a0:	f016 ffbb 	bl	4561a <strncmp>
		if (strings_compare(
   2e6a4:	2800      	cmp	r0, #0
   2e6a6:	d132      	bne.n	2e70e <nct_mqtt_evt_handler+0x176>
			*opcode = nct_cc_rx_opcode_map[index];
   2e6a8:	4b6e      	ldr	r3, [pc, #440]	; (2e864 <nct_mqtt_evt_handler+0x2cc>)
   2e6aa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2e6ae:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			cc.id = p->message_id;
   2e6b2:	8b23      	ldrh	r3, [r4, #24]
   2e6b4:	9310      	str	r3, [sp, #64]	; 0x40
			cc.data.ptr = nct.payload_buf;
   2e6b6:	4b68      	ldr	r3, [pc, #416]	; (2e858 <nct_mqtt_evt_handler+0x2c0>)
   2e6b8:	930d      	str	r3, [sp, #52]	; 0x34
			cc.data.len = p->message.payload.len;
   2e6ba:	6963      	ldr	r3, [r4, #20]
   2e6bc:	930c      	str	r3, [sp, #48]	; 0x30
			cc.topic.len = p->message.topic.topic.size;
   2e6be:	68a3      	ldr	r3, [r4, #8]
   2e6c0:	930e      	str	r3, [sp, #56]	; 0x38
			cc.topic.ptr = p->message.topic.topic.utf8;
   2e6c2:	6863      	ldr	r3, [r4, #4]
   2e6c4:	930f      	str	r3, [sp, #60]	; 0x3c
			evt.type = NCT_EVT_CC_RX_DATA;
   2e6c6:	2303      	movs	r3, #3
   2e6c8:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   2e6cc:	ab0c      	add	r3, sp, #48	; 0x30
			evt.param.dc = &dc;
   2e6ce:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2e6d0:	7b23      	ldrb	r3, [r4, #12]
   2e6d2:	2b01      	cmp	r3, #1
   2e6d4:	d106      	bne.n	2e6e4 <nct_mqtt_evt_handler+0x14c>
			const struct mqtt_puback_param ack = {
   2e6d6:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e6d8:	a903      	add	r1, sp, #12
   2e6da:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   2e6dc:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e6e0:	f014 ffa6 	bl	43630 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2e6e4:	a804      	add	r0, sp, #16
   2e6e6:	f7ff f831 	bl	2d74c <nct_input>
		if (err != 0) {
   2e6ea:	4602      	mov	r2, r0
   2e6ec:	2800      	cmp	r0, #0
   2e6ee:	d0c9      	beq.n	2e684 <nct_mqtt_evt_handler+0xec>
			LOG_ERR("nct_input: failed %d", err);
   2e6f0:	2301      	movs	r3, #1
   2e6f2:	f04f 0000 	mov.w	r0, #0
   2e6f6:	4951      	ldr	r1, [pc, #324]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e6f8:	f363 0007 	bfi	r0, r3, #0, #8
   2e6fc:	4b50      	ldr	r3, [pc, #320]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e6fe:	1a5b      	subs	r3, r3, r1
   2e700:	08db      	lsrs	r3, r3, #3
   2e702:	f363 108f 	bfi	r0, r3, #6, #10
   2e706:	4958      	ldr	r1, [pc, #352]	; (2e868 <nct_mqtt_evt_handler+0x2d0>)
   2e708:	f013 fc99 	bl	4203e <log_string_sync>
   2e70c:	e7ba      	b.n	2e684 <nct_mqtt_evt_handler+0xec>
	for (uint32_t index = 0; index < list_size; index++) {
   2e70e:	3501      	adds	r5, #1
   2e710:	2d03      	cmp	r5, #3
   2e712:	f106 060c 	add.w	r6, r6, #12
   2e716:	d1bc      	bne.n	2e692 <nct_mqtt_evt_handler+0xfa>
			dc.id = p->message_id;
   2e718:	8b23      	ldrh	r3, [r4, #24]
   2e71a:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.data.ptr = nct.payload_buf;
   2e71c:	4b4e      	ldr	r3, [pc, #312]	; (2e858 <nct_mqtt_evt_handler+0x2c0>)
   2e71e:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   2e720:	6963      	ldr	r3, [r4, #20]
   2e722:	9307      	str	r3, [sp, #28]
			dc.topic.len = p->message.topic.topic.size;
   2e724:	68a3      	ldr	r3, [r4, #8]
   2e726:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.ptr = p->message.topic.topic.utf8;
   2e728:	6863      	ldr	r3, [r4, #4]
   2e72a:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_DC_RX_DATA;
   2e72c:	2305      	movs	r3, #5
   2e72e:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2e732:	ab07      	add	r3, sp, #28
   2e734:	e7cb      	b.n	2e6ce <nct_mqtt_evt_handler+0x136>
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   2e736:	2304      	movs	r3, #4
   2e738:	f04f 0000 	mov.w	r0, #0
   2e73c:	4d40      	ldr	r5, [pc, #256]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e73e:	f363 0007 	bfi	r0, r3, #0, #8
   2e742:	4b3e      	ldr	r3, [pc, #248]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e744:	4a41      	ldr	r2, [pc, #260]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e746:	1aed      	subs	r5, r5, r3
   2e748:	69e3      	ldr	r3, [r4, #28]
   2e74a:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2e74e:	9300      	str	r3, [sp, #0]
   2e750:	f365 108f 	bfi	r0, r5, #6, #10
   2e754:	88a3      	ldrh	r3, [r4, #4]
   2e756:	4945      	ldr	r1, [pc, #276]	; (2e86c <nct_mqtt_evt_handler+0x2d4>)
   2e758:	f013 fc71 	bl	4203e <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e75c:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2e760:	88a3      	ldrh	r3, [r4, #4]
   2e762:	4293      	cmp	r3, r2
   2e764:	d142      	bne.n	2e7ec <nct_mqtt_evt_handler+0x254>
			evt.type = NCT_EVT_CC_CONNECTED;
   2e766:	2301      	movs	r3, #1
   2e768:	e75d      	b.n	2e626 <nct_mqtt_evt_handler+0x8e>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2e76a:	2304      	movs	r3, #4
   2e76c:	f04f 0000 	mov.w	r0, #0
   2e770:	4a32      	ldr	r2, [pc, #200]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e772:	f363 0007 	bfi	r0, r3, #0, #8
   2e776:	4b32      	ldr	r3, [pc, #200]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e778:	493d      	ldr	r1, [pc, #244]	; (2e870 <nct_mqtt_evt_handler+0x2d8>)
   2e77a:	1a9b      	subs	r3, r3, r2
   2e77c:	08db      	lsrs	r3, r3, #3
   2e77e:	f363 108f 	bfi	r0, r3, #6, #10
   2e782:	4a32      	ldr	r2, [pc, #200]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e784:	f013 fc5b 	bl	4203e <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e788:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2e78c:	88a2      	ldrh	r2, [r4, #4]
   2e78e:	429a      	cmp	r2, r3
   2e790:	f47f af78 	bne.w	2e684 <nct_mqtt_evt_handler+0xec>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2e794:	2307      	movs	r3, #7
   2e796:	e746      	b.n	2e626 <nct_mqtt_evt_handler+0x8e>
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   2e798:	2304      	movs	r3, #4
   2e79a:	f04f 0000 	mov.w	r0, #0
   2e79e:	4a27      	ldr	r2, [pc, #156]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e7a0:	f363 0007 	bfi	r0, r3, #0, #8
   2e7a4:	4b26      	ldr	r3, [pc, #152]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e7a6:	4933      	ldr	r1, [pc, #204]	; (2e874 <nct_mqtt_evt_handler+0x2dc>)
   2e7a8:	1a9b      	subs	r3, r3, r2
   2e7aa:	08db      	lsrs	r3, r3, #3
   2e7ac:	f363 108f 	bfi	r0, r3, #6, #10
   2e7b0:	69e3      	ldr	r3, [r4, #28]
   2e7b2:	4a26      	ldr	r2, [pc, #152]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e7b4:	9300      	str	r3, [sp, #0]
   2e7b6:	88a3      	ldrh	r3, [r4, #4]
   2e7b8:	f013 fc41 	bl	4203e <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2e7bc:	2304      	movs	r3, #4
   2e7be:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   2e7c2:	88a3      	ldrh	r3, [r4, #4]
   2e7c4:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   2e7c6:	e78d      	b.n	2e6e4 <nct_mqtt_evt_handler+0x14c>
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   2e7c8:	2304      	movs	r3, #4
   2e7ca:	f04f 0000 	mov.w	r0, #0
   2e7ce:	4a1b      	ldr	r2, [pc, #108]	; (2e83c <nct_mqtt_evt_handler+0x2a4>)
   2e7d0:	f363 0007 	bfi	r0, r3, #0, #8
   2e7d4:	4b1a      	ldr	r3, [pc, #104]	; (2e840 <nct_mqtt_evt_handler+0x2a8>)
   2e7d6:	4928      	ldr	r1, [pc, #160]	; (2e878 <nct_mqtt_evt_handler+0x2e0>)
   2e7d8:	1a9b      	subs	r3, r3, r2
   2e7da:	08db      	lsrs	r3, r3, #3
   2e7dc:	f363 108f 	bfi	r0, r3, #6, #10
   2e7e0:	4a1a      	ldr	r2, [pc, #104]	; (2e84c <nct_mqtt_evt_handler+0x2b4>)
   2e7e2:	69e3      	ldr	r3, [r4, #28]
   2e7e4:	f013 fc2b 	bl	4203e <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   2e7e8:	2309      	movs	r3, #9
   2e7ea:	e71c      	b.n	2e626 <nct_mqtt_evt_handler+0x8e>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   2e7ec:	f242 223d 	movw	r2, #8765	; 0x223d
   2e7f0:	4293      	cmp	r3, r2
   2e7f2:	f47f af47 	bne.w	2e684 <nct_mqtt_evt_handler+0xec>
			evt.type = NCT_EVT_DC_CONNECTED;
   2e7f6:	2302      	movs	r3, #2
			err = save_session_state(1);
   2e7f8:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   2e7fa:	f88d 3018 	strb.w	r3, [sp, #24]
			err = save_session_state(1);
   2e7fe:	f7ff fe9d 	bl	2e53c <save_session_state>
			if (err) {
   2e802:	4602      	mov	r2, r0
   2e804:	b148      	cbz	r0, 2e81a <nct_mqtt_evt_handler+0x282>
				LOG_ERR("Failed to save session state: %d",
   2e806:	2101      	movs	r1, #1
   2e808:	f04f 0000 	mov.w	r0, #0
   2e80c:	f361 0007 	bfi	r0, r1, #0, #8
   2e810:	f365 108f 	bfi	r0, r5, #6, #10
   2e814:	4919      	ldr	r1, [pc, #100]	; (2e87c <nct_mqtt_evt_handler+0x2e4>)
   2e816:	f013 fc12 	bl	4203e <log_string_sync>
			err = nrf_cloud_fota_subscribe();
   2e81a:	f001 feb3 	bl	30584 <nrf_cloud_fota_subscribe>
			if (err){
   2e81e:	4602      	mov	r2, r0
   2e820:	2800      	cmp	r0, #0
   2e822:	f43f af5f 	beq.w	2e6e4 <nct_mqtt_evt_handler+0x14c>
				LOG_ERR("nrf_cloud_fota_subscribe() failed: %d", err);
   2e826:	2101      	movs	r1, #1
   2e828:	f04f 0000 	mov.w	r0, #0
   2e82c:	f361 0007 	bfi	r0, r1, #0, #8
   2e830:	f365 108f 	bfi	r0, r5, #6, #10
   2e834:	4912      	ldr	r1, [pc, #72]	; (2e880 <nct_mqtt_evt_handler+0x2e8>)
   2e836:	f013 fc02 	bl	4203e <log_string_sync>
	if (event_notify) {
   2e83a:	e753      	b.n	2e6e4 <nct_mqtt_evt_handler+0x14c>
   2e83c:	00046878 	.word	0x00046878
   2e840:	00046970 	.word	0x00046970
   2e844:	0004c80c 	.word	0x0004c80c
   2e848:	0004c838 	.word	0x0004c838
   2e84c:	0004c326 	.word	0x0004c326
   2e850:	2002ca1e 	.word	0x2002ca1e
   2e854:	0004c858 	.word	0x0004c858
   2e858:	20024ca8 	.word	0x20024ca8
   2e85c:	0004c87f 	.word	0x0004c87f
   2e860:	0004730c 	.word	0x0004730c
   2e864:	00047330 	.word	0x00047330
   2e868:	0004c972 	.word	0x0004c972
   2e86c:	0004c89e 	.word	0x0004c89e
   2e870:	0004c90e 	.word	0x0004c90e
   2e874:	0004c924 	.word	0x0004c924
   2e878:	0004c94d 	.word	0x0004c94d
   2e87c:	0004c8c7 	.word	0x0004c8c7
   2e880:	0004c8e8 	.word	0x0004c8e8

0002e884 <nct_mqtt_connect>:
{
   2e884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!initialized) {
   2e888:	f8df 8154 	ldr.w	r8, [pc, #340]	; 2e9e0 <nct_mqtt_connect+0x15c>
   2e88c:	4d47      	ldr	r5, [pc, #284]	; (2e9ac <nct_mqtt_connect+0x128>)
   2e88e:	4b48      	ldr	r3, [pc, #288]	; (2e9b0 <nct_mqtt_connect+0x12c>)
   2e890:	f898 6000 	ldrb.w	r6, [r8]
   2e894:	1aed      	subs	r5, r5, r3
   2e896:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2e89a:	4c46      	ldr	r4, [pc, #280]	; (2e9b4 <nct_mqtt_connect+0x130>)
   2e89c:	2e00      	cmp	r6, #0
   2e89e:	d143      	bne.n	2e928 <nct_mqtt_connect+0xa4>
		mqtt_client_init(&nct.client);
   2e8a0:	f104 001c 	add.w	r0, r4, #28
   2e8a4:	f014 fe23 	bl	434ee <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2e8a8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
   2e8ac:	66e3      	str	r3, [r4, #108]	; 0x6c
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e8ae:	4842      	ldr	r0, [pc, #264]	; (2e9b8 <nct_mqtt_connect+0x134>)
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e8b0:	4b42      	ldr	r3, [pc, #264]	; (2e9bc <nct_mqtt_connect+0x138>)
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e8b2:	6660      	str	r0, [r4, #100]	; 0x64
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e8b4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		nct.client.client_id.size = strlen(client_id_buf);
   2e8b8:	f7ee fcd4 	bl	1d264 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2e8bc:	2304      	movs	r3, #4
   2e8be:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e8c2:	4b3f      	ldr	r3, [pc, #252]	; (2e9c0 <nct_mqtt_connect+0x13c>)
   2e8c4:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
   2e8c8:	781b      	ldrb	r3, [r3, #0]
		nct.client.client_id.size = strlen(client_id_buf);
   2e8ca:	66a0      	str	r0, [r4, #104]	; 0x68
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e8cc:	f083 0301 	eor.w	r3, r3, #1
   2e8d0:	f363 0241 	bfi	r2, r3, #1, #1
   2e8d4:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   2e8d8:	f04f 0000 	mov.w	r0, #0
   2e8dc:	2204      	movs	r2, #4
   2e8de:	f362 0007 	bfi	r0, r2, #0, #8
   2e8e2:	f365 108f 	bfi	r0, r5, #6, #10
   2e8e6:	4a37      	ldr	r2, [pc, #220]	; (2e9c4 <nct_mqtt_connect+0x140>)
   2e8e8:	4937      	ldr	r1, [pc, #220]	; (2e9c8 <nct_mqtt_connect+0x144>)
		nct.client.user_name = NULL;
   2e8ea:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
		LOG_DBG("MQTT clean session flag: %u",
   2e8ee:	f013 fba6 	bl	4203e <log_string_sync>
		nct.client.rx_buf = nct.rx_buf;
   2e8f2:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   2e8f6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   2e8fa:	4627      	mov	r7, r4
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e8fc:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e900:	f04f 0c01 	mov.w	ip, #1
		nct.client.tx_buf = nct.tx_buf;
   2e904:	f504 72ec 	add.w	r2, r4, #472	; 0x1d8
   2e908:	f104 0648 	add.w	r6, r4, #72	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e90c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2e910:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
   2e914:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2e916:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2e918:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2e91c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e920:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
		initialized = true;
   2e924:	f888 c000 	strb.w	ip, [r8]
	err = mqtt_connect(&nct.client);
   2e928:	4828      	ldr	r0, [pc, #160]	; (2e9cc <nct_mqtt_connect+0x148>)
   2e92a:	f014 fdf9 	bl	43520 <mqtt_connect>
	if (err != 0) {
   2e92e:	4606      	mov	r6, r0
   2e930:	b170      	cbz	r0, 2e950 <nct_mqtt_connect+0xcc>
		LOG_DBG("mqtt_connect failed %d", err);
   2e932:	2304      	movs	r3, #4
   2e934:	f04f 0000 	mov.w	r0, #0
   2e938:	f363 0007 	bfi	r0, r3, #0, #8
   2e93c:	f365 108f 	bfi	r0, r5, #6, #10
   2e940:	4633      	mov	r3, r6
   2e942:	4a20      	ldr	r2, [pc, #128]	; (2e9c4 <nct_mqtt_connect+0x140>)
   2e944:	4922      	ldr	r1, [pc, #136]	; (2e9d0 <nct_mqtt_connect+0x14c>)
   2e946:	f013 fb7a 	bl	4203e <log_string_sync>
}
   2e94a:	4630      	mov	r0, r6
   2e94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (int)mqtt_keepalive_time_left(&nct.client);
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
   2e950:	6c60      	ldr	r0, [r4, #68]	; 0x44
	return z_impl_zsock_fcntl(sock, cmd, flags);
   2e952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2e956:	2104      	movs	r1, #4
   2e958:	f013 ff64 	bl	42824 <z_impl_zsock_fcntl>
		if (err == -1) {
   2e95c:	1c43      	adds	r3, r0, #1
   2e95e:	4604      	mov	r4, r0
   2e960:	d118      	bne.n	2e994 <nct_mqtt_connect+0x110>
			LOG_ERR("Failed to set socket as non-blocking, err: %d",
   2e962:	2301      	movs	r3, #1
   2e964:	f04f 0400 	mov.w	r4, #0
   2e968:	f363 0407 	bfi	r4, r3, #0, #8
   2e96c:	f014 f9d5 	bl	42d1a <__errno>
   2e970:	f365 148f 	bfi	r4, r5, #6, #10
   2e974:	6802      	ldr	r2, [r0, #0]
   2e976:	4917      	ldr	r1, [pc, #92]	; (2e9d4 <nct_mqtt_connect+0x150>)
   2e978:	4620      	mov	r0, r4
   2e97a:	f013 fb60 	bl	4203e <log_string_sync>
			LOG_WRN("Continuing with blocking socket");
   2e97e:	2302      	movs	r3, #2
   2e980:	f04f 0000 	mov.w	r0, #0
   2e984:	f363 0007 	bfi	r0, r3, #0, #8
   2e988:	f365 108f 	bfi	r0, r5, #6, #10
   2e98c:	4912      	ldr	r1, [pc, #72]	; (2e9d8 <nct_mqtt_connect+0x154>)
   2e98e:	f013 fb56 	bl	4203e <log_string_sync>
			err = 0;
   2e992:	e7da      	b.n	2e94a <nct_mqtt_connect+0xc6>
			LOG_INF("Using non-blocking socket");
   2e994:	2303      	movs	r3, #3
   2e996:	f04f 0000 	mov.w	r0, #0
   2e99a:	f363 0007 	bfi	r0, r3, #0, #8
   2e99e:	f365 108f 	bfi	r0, r5, #6, #10
   2e9a2:	490e      	ldr	r1, [pc, #56]	; (2e9dc <nct_mqtt_connect+0x158>)
   2e9a4:	f013 fb4b 	bl	4203e <log_string_sync>
   2e9a8:	4626      	mov	r6, r4
   2e9aa:	e7ce      	b.n	2e94a <nct_mqtt_connect+0xc6>
   2e9ac:	00046970 	.word	0x00046970
   2e9b0:	00046878 	.word	0x00046878
   2e9b4:	200249d0 	.word	0x200249d0
   2e9b8:	2002ca09 	.word	0x2002ca09
   2e9bc:	0002e599 	.word	0x0002e599
   2e9c0:	2002ca1e 	.word	0x2002ca1e
   2e9c4:	0004c315 	.word	0x0004c315
   2e9c8:	0004c769 	.word	0x0004c769
   2e9cc:	200249ec 	.word	0x200249ec
   2e9d0:	0004c789 	.word	0x0004c789
   2e9d4:	0004c7a4 	.word	0x0004c7a4
   2e9d8:	0004c7d2 	.word	0x0004c7d2
   2e9dc:	0004c7f2 	.word	0x0004c7f2
   2e9e0:	2002ca1d 	.word	0x2002ca1d

0002e9e4 <nct_init>:
{
   2e9e4:	b570      	push	{r4, r5, r6, lr}
   2e9e6:	b086      	sub	sp, #24
	ret = settings_subsys_init();
   2e9e8:	f7f7 f8ce 	bl	25b88 <settings_subsys_init>
	if (ret) {
   2e9ec:	4605      	mov	r5, r0
   2e9ee:	b188      	cbz	r0, 2ea14 <nct_init+0x30>
		LOG_ERR("Settings init failed: %d", ret);
   2e9f0:	2301      	movs	r3, #1
   2e9f2:	f04f 0000 	mov.w	r0, #0
   2e9f6:	4a9e      	ldr	r2, [pc, #632]	; (2ec70 <nct_init+0x28c>)
   2e9f8:	f363 0007 	bfi	r0, r3, #0, #8
   2e9fc:	4b9d      	ldr	r3, [pc, #628]	; (2ec74 <nct_init+0x290>)
   2e9fe:	499e      	ldr	r1, [pc, #632]	; (2ec78 <nct_init+0x294>)
   2ea00:	1a9b      	subs	r3, r3, r2
   2ea02:	462a      	mov	r2, r5
   2ea04:	08db      	lsrs	r3, r3, #3
   2ea06:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot load settings: %d", ret);
   2ea0a:	f013 fb18 	bl	4203e <log_string_sync>
}
   2ea0e:	4628      	mov	r0, r5
   2ea10:	b006      	add	sp, #24
   2ea12:	bd70      	pop	{r4, r5, r6, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   2ea14:	4899      	ldr	r0, [pc, #612]	; (2ec7c <nct_init+0x298>)
   2ea16:	f7f6 ff43 	bl	258a0 <settings_load_subtree>
	if (ret) {
   2ea1a:	4605      	mov	r5, r0
   2ea1c:	2800      	cmp	r0, #0
   2ea1e:	f000 80a8 	beq.w	2eb72 <nct_init+0x18e>
		LOG_ERR("Cannot load settings: %d", ret);
   2ea22:	2301      	movs	r3, #1
   2ea24:	f04f 0000 	mov.w	r0, #0
   2ea28:	4a91      	ldr	r2, [pc, #580]	; (2ec70 <nct_init+0x28c>)
   2ea2a:	f363 0007 	bfi	r0, r3, #0, #8
   2ea2e:	4b91      	ldr	r3, [pc, #580]	; (2ec74 <nct_init+0x290>)
   2ea30:	4993      	ldr	r1, [pc, #588]	; (2ec80 <nct_init+0x29c>)
   2ea32:	1a9b      	subs	r3, r3, r2
   2ea34:	08db      	lsrs	r3, r3, #3
   2ea36:	f363 108f 	bfi	r0, r3, #6, #10
   2ea3a:	462a      	mov	r2, r5
   2ea3c:	e7e5      	b.n	2ea0a <nct_init+0x26>
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   2ea3e:	2304      	movs	r3, #4
   2ea40:	f04f 0600 	mov.w	r6, #0
   2ea44:	488f      	ldr	r0, [pc, #572]	; (2ec84 <nct_init+0x2a0>)
   2ea46:	f363 0607 	bfi	r6, r3, #0, #8
   2ea4a:	f013 fb0b 	bl	42064 <log_strdup>
   2ea4e:	f364 168f 	bfi	r6, r4, #6, #10
   2ea52:	4603      	mov	r3, r0
   2ea54:	4a8c      	ldr	r2, [pc, #560]	; (2ec88 <nct_init+0x2a4>)
   2ea56:	498d      	ldr	r1, [pc, #564]	; (2ec8c <nct_init+0x2a8>)
   2ea58:	4630      	mov	r0, r6
   2ea5a:	f013 faf0 	bl	4203e <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2ea5e:	4b8c      	ldr	r3, [pc, #560]	; (2ec90 <nct_init+0x2ac>)
   2ea60:	4a8c      	ldr	r2, [pc, #560]	; (2ec94 <nct_init+0x2b0>)
   2ea62:	2128      	movs	r1, #40	; 0x28
   2ea64:	488c      	ldr	r0, [pc, #560]	; (2ec98 <nct_init+0x2b4>)
   2ea66:	f011 fbe9 	bl	4023c <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   2ea6a:	2827      	cmp	r0, #39	; 0x27
   2ea6c:	f040 80fd 	bne.w	2ec6a <nct_init+0x286>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2ea70:	2304      	movs	r3, #4
   2ea72:	f04f 0600 	mov.w	r6, #0
   2ea76:	4888      	ldr	r0, [pc, #544]	; (2ec98 <nct_init+0x2b4>)
   2ea78:	f363 0607 	bfi	r6, r3, #0, #8
   2ea7c:	f013 faf2 	bl	42064 <log_strdup>
   2ea80:	f364 168f 	bfi	r6, r4, #6, #10
   2ea84:	4603      	mov	r3, r0
   2ea86:	4a80      	ldr	r2, [pc, #512]	; (2ec88 <nct_init+0x2a4>)
   2ea88:	4984      	ldr	r1, [pc, #528]	; (2ec9c <nct_init+0x2b8>)
   2ea8a:	4630      	mov	r0, r6
   2ea8c:	f013 fad7 	bl	4203e <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2ea90:	4b7f      	ldr	r3, [pc, #508]	; (2ec90 <nct_init+0x2ac>)
   2ea92:	4a83      	ldr	r2, [pc, #524]	; (2eca0 <nct_init+0x2bc>)
   2ea94:	2134      	movs	r1, #52	; 0x34
   2ea96:	4883      	ldr	r0, [pc, #524]	; (2eca4 <nct_init+0x2c0>)
   2ea98:	f011 fbd0 	bl	4023c <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2ea9c:	2833      	cmp	r0, #51	; 0x33
   2ea9e:	f040 80e4 	bne.w	2ec6a <nct_init+0x286>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2eaa2:	2304      	movs	r3, #4
   2eaa4:	f04f 0600 	mov.w	r6, #0
   2eaa8:	487e      	ldr	r0, [pc, #504]	; (2eca4 <nct_init+0x2c0>)
   2eaaa:	f363 0607 	bfi	r6, r3, #0, #8
   2eaae:	f013 fad9 	bl	42064 <log_strdup>
   2eab2:	f364 168f 	bfi	r6, r4, #6, #10
   2eab6:	4603      	mov	r3, r0
   2eab8:	4a73      	ldr	r2, [pc, #460]	; (2ec88 <nct_init+0x2a4>)
   2eaba:	497b      	ldr	r1, [pc, #492]	; (2eca8 <nct_init+0x2c4>)
   2eabc:	4630      	mov	r0, r6
   2eabe:	f013 fabe 	bl	4203e <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   2eac2:	4b73      	ldr	r3, [pc, #460]	; (2ec90 <nct_init+0x2ac>)
   2eac4:	4a79      	ldr	r2, [pc, #484]	; (2ecac <nct_init+0x2c8>)
   2eac6:	2134      	movs	r1, #52	; 0x34
   2eac8:	4879      	ldr	r0, [pc, #484]	; (2ecb0 <nct_init+0x2cc>)
   2eaca:	f011 fbb7 	bl	4023c <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2eace:	2833      	cmp	r0, #51	; 0x33
   2ead0:	f040 80cb 	bne.w	2ec6a <nct_init+0x286>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   2ead4:	2304      	movs	r3, #4
   2ead6:	f04f 0600 	mov.w	r6, #0
   2eada:	4875      	ldr	r0, [pc, #468]	; (2ecb0 <nct_init+0x2cc>)
   2eadc:	f363 0607 	bfi	r6, r3, #0, #8
   2eae0:	f013 fac0 	bl	42064 <log_strdup>
   2eae4:	f364 168f 	bfi	r6, r4, #6, #10
   2eae8:	4603      	mov	r3, r0
   2eaea:	4a67      	ldr	r2, [pc, #412]	; (2ec88 <nct_init+0x2a4>)
   2eaec:	4971      	ldr	r1, [pc, #452]	; (2ecb4 <nct_init+0x2d0>)
   2eaee:	4630      	mov	r0, r6
   2eaf0:	f013 faa5 	bl	4203e <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   2eaf4:	4b66      	ldr	r3, [pc, #408]	; (2ec90 <nct_init+0x2ac>)
   2eaf6:	4a70      	ldr	r2, [pc, #448]	; (2ecb8 <nct_init+0x2d4>)
   2eaf8:	212e      	movs	r1, #46	; 0x2e
   2eafa:	4870      	ldr	r0, [pc, #448]	; (2ecbc <nct_init+0x2d8>)
   2eafc:	f011 fb9e 	bl	4023c <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   2eb00:	282d      	cmp	r0, #45	; 0x2d
   2eb02:	f040 80b2 	bne.w	2ec6a <nct_init+0x286>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2eb06:	2304      	movs	r3, #4
   2eb08:	f04f 0600 	mov.w	r6, #0
   2eb0c:	486b      	ldr	r0, [pc, #428]	; (2ecbc <nct_init+0x2d8>)
   2eb0e:	f363 0607 	bfi	r6, r3, #0, #8
   2eb12:	f013 faa7 	bl	42064 <log_strdup>
   2eb16:	f364 168f 	bfi	r6, r4, #6, #10
   2eb1a:	4603      	mov	r3, r0
   2eb1c:	4a5a      	ldr	r2, [pc, #360]	; (2ec88 <nct_init+0x2a4>)
   2eb1e:	4968      	ldr	r1, [pc, #416]	; (2ecc0 <nct_init+0x2dc>)
   2eb20:	4630      	mov	r0, r6
   2eb22:	f013 fa8c 	bl	4203e <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2eb26:	4b5a      	ldr	r3, [pc, #360]	; (2ec90 <nct_init+0x2ac>)
   2eb28:	4a66      	ldr	r2, [pc, #408]	; (2ecc4 <nct_init+0x2e0>)
   2eb2a:	212b      	movs	r1, #43	; 0x2b
   2eb2c:	4866      	ldr	r0, [pc, #408]	; (2ecc8 <nct_init+0x2e4>)
   2eb2e:	f011 fb85 	bl	4023c <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   2eb32:	282a      	cmp	r0, #42	; 0x2a
   2eb34:	f040 8099 	bne.w	2ec6a <nct_init+0x286>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2eb38:	2304      	movs	r3, #4
   2eb3a:	f04f 0600 	mov.w	r6, #0
   2eb3e:	4862      	ldr	r0, [pc, #392]	; (2ecc8 <nct_init+0x2e4>)
   2eb40:	f363 0607 	bfi	r6, r3, #0, #8
   2eb44:	f013 fa8e 	bl	42064 <log_strdup>
   2eb48:	f364 168f 	bfi	r6, r4, #6, #10
   2eb4c:	4603      	mov	r3, r0
   2eb4e:	4a4e      	ldr	r2, [pc, #312]	; (2ec88 <nct_init+0x2a4>)
   2eb50:	495e      	ldr	r1, [pc, #376]	; (2eccc <nct_init+0x2e8>)
   2eb52:	4630      	mov	r0, r6
   2eb54:	f013 fa73 	bl	4203e <log_string_sync>
	nct.tls_config.cipher_count = 0;
   2eb58:	2200      	movs	r2, #0
   2eb5a:	2102      	movs	r1, #2
	nct.tls_config.peer_verify = 2;
   2eb5c:	4b5c      	ldr	r3, [pc, #368]	; (2ecd0 <nct_init+0x2ec>)
	nct.tls_config.cipher_count = 0;
   2eb5e:	e9c3 1200 	strd	r1, r2, [r3]
	nct.tls_config.cipher_list = NULL;
   2eb62:	609a      	str	r2, [r3, #8]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2eb64:	2201      	movs	r2, #1
   2eb66:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2eb68:	4a5a      	ldr	r2, [pc, #360]	; (2ecd4 <nct_init+0x2f0>)
   2eb6a:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2eb6c:	4a5a      	ldr	r2, [pc, #360]	; (2ecd8 <nct_init+0x2f4>)
   2eb6e:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2eb70:	e74d      	b.n	2ea0e <nct_init+0x2a>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2eb72:	485a      	ldr	r0, [pc, #360]	; (2ecdc <nct_init+0x2f8>)
   2eb74:	f001 fbbc 	bl	302f0 <nrf_cloud_fota_init>
	if (err) {
   2eb78:	4605      	mov	r5, r0
   2eb7a:	2800      	cmp	r0, #0
   2eb7c:	f47f af47 	bne.w	2ea0e <nct_init+0x2a>
	dc_endpoint_reset();
   2eb80:	f7ff fbb2 	bl	2e2e8 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, NRF_SOCK_DGRAM, NRF_PROTO_AT);
   2eb84:	f240 2201 	movw	r2, #513	; 0x201
   2eb88:	2102      	movs	r1, #2
   2eb8a:	2066      	movs	r0, #102	; 0x66
   2eb8c:	f00b f916 	bl	39dbc <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   2eb90:	1e04      	subs	r4, r0, #0
   2eb92:	da0b      	bge.n	2ebac <nct_init+0x1c8>
   2eb94:	4952      	ldr	r1, [pc, #328]	; (2ece0 <nct_init+0x2fc>)
   2eb96:	4853      	ldr	r0, [pc, #332]	; (2ece4 <nct_init+0x300>)
   2eb98:	f44f 739a 	mov.w	r3, #308	; 0x134
   2eb9c:	4a52      	ldr	r2, [pc, #328]	; (2ece8 <nct_init+0x304>)
   2eb9e:	f013 f823 	bl	41be8 <printk>
   2eba2:	f44f 719a 	mov.w	r1, #308	; 0x134
   2eba6:	4850      	ldr	r0, [pc, #320]	; (2ece8 <nct_init+0x304>)
   2eba8:	f013 fa38 	bl	4201c <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   2ebac:	2207      	movs	r2, #7
   2ebae:	494f      	ldr	r1, [pc, #316]	; (2ecec <nct_init+0x308>)
   2ebb0:	4620      	mov	r0, r4
   2ebb2:	f00b f93f 	bl	39e34 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   2ebb6:	2807      	cmp	r0, #7
   2ebb8:	d00b      	beq.n	2ebd2 <nct_init+0x1ee>
   2ebba:	494d      	ldr	r1, [pc, #308]	; (2ecf0 <nct_init+0x30c>)
   2ebbc:	4849      	ldr	r0, [pc, #292]	; (2ece4 <nct_init+0x300>)
   2ebbe:	f240 1337 	movw	r3, #311	; 0x137
   2ebc2:	4a49      	ldr	r2, [pc, #292]	; (2ece8 <nct_init+0x304>)
   2ebc4:	f013 f810 	bl	41be8 <printk>
   2ebc8:	f240 1137 	movw	r1, #311	; 0x137
   2ebcc:	4846      	ldr	r0, [pc, #280]	; (2ece8 <nct_init+0x304>)
   2ebce:	f013 fa25 	bl	4201c <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   2ebd2:	ae02      	add	r6, sp, #8
   2ebd4:	220f      	movs	r2, #15
   2ebd6:	4631      	mov	r1, r6
   2ebd8:	4620      	mov	r0, r4
   2ebda:	f00b f977 	bl	39ecc <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   2ebde:	280f      	cmp	r0, #15
   2ebe0:	d00b      	beq.n	2ebfa <nct_init+0x216>
   2ebe2:	4944      	ldr	r1, [pc, #272]	; (2ecf4 <nct_init+0x310>)
   2ebe4:	483f      	ldr	r0, [pc, #252]	; (2ece4 <nct_init+0x300>)
   2ebe6:	f44f 739d 	mov.w	r3, #314	; 0x13a
   2ebea:	4a3f      	ldr	r2, [pc, #252]	; (2ece8 <nct_init+0x304>)
   2ebec:	f012 fffc 	bl	41be8 <printk>
   2ebf0:	f44f 719d 	mov.w	r1, #314	; 0x13a
   2ebf4:	483c      	ldr	r0, [pc, #240]	; (2ece8 <nct_init+0x304>)
   2ebf6:	f013 fa11 	bl	4201c <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   2ebfa:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   2ebfc:	9600      	str	r6, [sp, #0]
	imei_buf[NRF_IMEI_LEN] = 0;
   2ebfe:	f88d 3017 	strb.w	r3, [sp, #23]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   2ec02:	4a3d      	ldr	r2, [pc, #244]	; (2ecf8 <nct_init+0x314>)
   2ec04:	4b3d      	ldr	r3, [pc, #244]	; (2ecfc <nct_init+0x318>)
   2ec06:	2114      	movs	r1, #20
   2ec08:	4821      	ldr	r0, [pc, #132]	; (2ec90 <nct_init+0x2ac>)
   2ec0a:	f011 fb17 	bl	4023c <sniprintf>
	ret = nrf_close(at_socket_fd);
   2ec0e:	4620      	mov	r0, r4
   2ec10:	f00b f8e6 	bl	39de0 <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   2ec14:	b158      	cbz	r0, 2ec2e <nct_init+0x24a>
   2ec16:	493a      	ldr	r1, [pc, #232]	; (2ed00 <nct_init+0x31c>)
   2ec18:	4832      	ldr	r0, [pc, #200]	; (2ece4 <nct_init+0x300>)
   2ec1a:	f44f 73a0 	mov.w	r3, #320	; 0x140
   2ec1e:	4a32      	ldr	r2, [pc, #200]	; (2ece8 <nct_init+0x304>)
   2ec20:	f012 ffe2 	bl	41be8 <printk>
   2ec24:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2ec28:	482f      	ldr	r0, [pc, #188]	; (2ece8 <nct_init+0x304>)
   2ec2a:	f013 f9f7 	bl	4201c <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   2ec2e:	2304      	movs	r3, #4
   2ec30:	f04f 0600 	mov.w	r6, #0
   2ec34:	4c0f      	ldr	r4, [pc, #60]	; (2ec74 <nct_init+0x290>)
   2ec36:	f363 0607 	bfi	r6, r3, #0, #8
   2ec3a:	4b0d      	ldr	r3, [pc, #52]	; (2ec70 <nct_init+0x28c>)
   2ec3c:	4814      	ldr	r0, [pc, #80]	; (2ec90 <nct_init+0x2ac>)
   2ec3e:	1ae4      	subs	r4, r4, r3
   2ec40:	f013 fa10 	bl	42064 <log_strdup>
   2ec44:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ec48:	f364 168f 	bfi	r6, r4, #6, #10
   2ec4c:	4603      	mov	r3, r0
   2ec4e:	4a2d      	ldr	r2, [pc, #180]	; (2ed04 <nct_init+0x320>)
   2ec50:	492d      	ldr	r1, [pc, #180]	; (2ed08 <nct_init+0x324>)
   2ec52:	4630      	mov	r0, r6
   2ec54:	f013 f9f3 	bl	4203e <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2ec58:	4b0d      	ldr	r3, [pc, #52]	; (2ec90 <nct_init+0x2ac>)
   2ec5a:	4a2c      	ldr	r2, [pc, #176]	; (2ed0c <nct_init+0x328>)
   2ec5c:	2127      	movs	r1, #39	; 0x27
   2ec5e:	4809      	ldr	r0, [pc, #36]	; (2ec84 <nct_init+0x2a0>)
   2ec60:	f011 faec 	bl	4023c <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   2ec64:	2826      	cmp	r0, #38	; 0x26
   2ec66:	f43f aeea 	beq.w	2ea3e <nct_init+0x5a>
		return -ENOMEM;
   2ec6a:	f06f 050b 	mvn.w	r5, #11
   2ec6e:	e6ce      	b.n	2ea0e <nct_init+0x2a>
   2ec70:	00046878 	.word	0x00046878
   2ec74:	00046970 	.word	0x00046970
   2ec78:	0004c53c 	.word	0x0004c53c
   2ec7c:	0004be05 	.word	0x0004be05
   2ec80:	0004c555 	.word	0x0004c555
   2ec84:	2002ca53 	.word	0x2002ca53
   2ec88:	0004c2c3 	.word	0x0004c2c3
   2ec8c:	0004c615 	.word	0x0004c615
   2ec90:	2002ca09 	.word	0x2002ca09
   2ec94:	0004c62f 	.word	0x0004c62f
   2ec98:	2002c9e1 	.word	0x2002c9e1
   2ec9c:	0004c646 	.word	0x0004c646
   2eca0:	0004c65d 	.word	0x0004c65d
   2eca4:	2002ca1f 	.word	0x2002ca1f
   2eca8:	0004c680 	.word	0x0004c680
   2ecac:	0004c697 	.word	0x0004c697
   2ecb0:	2002caa5 	.word	0x2002caa5
   2ecb4:	0004c6ba 	.word	0x0004c6ba
   2ecb8:	0004c6d5 	.word	0x0004c6d5
   2ecbc:	2002cad9 	.word	0x2002cad9
   2ecc0:	0004c6f2 	.word	0x0004c6f2
   2ecc4:	0004c707 	.word	0x0004c707
   2ecc8:	2002ca7a 	.word	0x2002ca7a
   2eccc:	0004c721 	.word	0x0004c721
   2ecd0:	200249d0 	.word	0x200249d0
   2ecd4:	20020740 	.word	0x20020740
   2ecd8:	0004c73a 	.word	0x0004c73a
   2ecdc:	0002e3b9 	.word	0x0002e3b9
   2ece0:	0004c5b1 	.word	0x0004c5b1
   2ece4:	0004825b 	.word	0x0004825b
   2ece8:	0004c56e 	.word	0x0004c56e
   2ecec:	0004b4dd 	.word	0x0004b4dd
   2ecf0:	0004c5c3 	.word	0x0004c5c3
   2ecf4:	0004c5d6 	.word	0x0004c5d6
   2ecf8:	0004d180 	.word	0x0004d180
   2ecfc:	0004c5e7 	.word	0x0004c5e7
   2ed00:	0004a0d3 	.word	0x0004a0d3
   2ed04:	0004c2b1 	.word	0x0004c2b1
   2ed08:	0004c5ec 	.word	0x0004c5ec
   2ed0c:	0004c5ff 	.word	0x0004c5ff

0002ed10 <nct_connect>:
{
   2ed10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ed14:	b09d      	sub	sp, #116	; 0x74
	struct addrinfo hints = {
   2ed16:	2250      	movs	r2, #80	; 0x50
   2ed18:	2100      	movs	r1, #0
   2ed1a:	a808      	add	r0, sp, #32
   2ed1c:	f016 faa4 	bl	45268 <memset>
   2ed20:	2301      	movs	r3, #1
   2ed22:	aa08      	add	r2, sp, #32
   2ed24:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2ed28:	2100      	movs	r1, #0
   2ed2a:	ab03      	add	r3, sp, #12
   2ed2c:	482f      	ldr	r0, [pc, #188]	; (2edec <nct_connect+0xdc>)
   2ed2e:	f013 fce9 	bl	42704 <zsock_getaddrinfo>
	if (err) {
   2ed32:	4c2f      	ldr	r4, [pc, #188]	; (2edf0 <nct_connect+0xe0>)
   2ed34:	4b2f      	ldr	r3, [pc, #188]	; (2edf4 <nct_connect+0xe4>)
   2ed36:	1ae4      	subs	r4, r4, r3
   2ed38:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ed3c:	4603      	mov	r3, r0
   2ed3e:	b180      	cbz	r0, 2ed62 <nct_connect+0x52>
		LOG_DBG("getaddrinfo failed %d", err);
   2ed40:	2204      	movs	r2, #4
   2ed42:	f04f 0000 	mov.w	r0, #0
   2ed46:	f362 0007 	bfi	r0, r2, #0, #8
   2ed4a:	f364 108f 	bfi	r0, r4, #6, #10
   2ed4e:	4a2a      	ldr	r2, [pc, #168]	; (2edf8 <nct_connect+0xe8>)
   2ed50:	492a      	ldr	r1, [pc, #168]	; (2edfc <nct_connect+0xec>)
   2ed52:	f013 f974 	bl	4203e <log_string_sync>
		return -ECHILD;
   2ed56:	f06f 0409 	mvn.w	r4, #9
}
   2ed5a:	4620      	mov	r0, r4
   2ed5c:	b01d      	add	sp, #116	; 0x74
   2ed5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2ed62:	2718      	movs	r7, #24
	addr = result;
   2ed64:	9d03      	ldr	r5, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2ed66:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2edf8 <nct_connect+0xe8>
   2ed6a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2ee0c <nct_connect+0xfc>
	while (addr != NULL) {
   2ed6e:	b915      	cbnz	r5, 2ed76 <nct_connect+0x66>
	err = -ECHILD;
   2ed70:	f06f 0409 	mvn.w	r4, #9
   2ed74:	e024      	b.n	2edc0 <nct_connect+0xb0>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2ed76:	696b      	ldr	r3, [r5, #20]
   2ed78:	2b08      	cmp	r3, #8
   2ed7a:	d125      	bne.n	2edc8 <nct_connect+0xb8>
					->sin_addr.s_addr;
   2ed7c:	69ab      	ldr	r3, [r5, #24]
			broker->sin_addr.s_addr =
   2ed7e:	4920      	ldr	r1, [pc, #128]	; (2ee00 <nct_connect+0xf0>)
					->sin_addr.s_addr;
   2ed80:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2ed82:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
			broker->sin_family = AF_INET;
   2ed86:	4b1f      	ldr	r3, [pc, #124]	; (2ee04 <nct_connect+0xf4>)
   2ed88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2ed8c:	2310      	movs	r3, #16
   2ed8e:	31a0      	adds	r1, #160	; 0xa0
   2ed90:	eb0d 0203 	add.w	r2, sp, r3
   2ed94:	2001      	movs	r0, #1
   2ed96:	f7f8 ff9b 	bl	27cd0 <z_impl_net_addr_ntop>
			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));
   2ed9a:	f04f 0500 	mov.w	r5, #0
   2ed9e:	2304      	movs	r3, #4
   2eda0:	a804      	add	r0, sp, #16
   2eda2:	f363 0507 	bfi	r5, r3, #0, #8
   2eda6:	f013 f95d 	bl	42064 <log_strdup>
   2edaa:	f364 158f 	bfi	r5, r4, #6, #10
   2edae:	4603      	mov	r3, r0
   2edb0:	4a11      	ldr	r2, [pc, #68]	; (2edf8 <nct_connect+0xe8>)
   2edb2:	4915      	ldr	r1, [pc, #84]	; (2ee08 <nct_connect+0xf8>)
   2edb4:	4628      	mov	r0, r5
   2edb6:	f013 f942 	bl	4203e <log_string_sync>
			err = nct_mqtt_connect();
   2edba:	f7ff fd63 	bl	2e884 <nct_mqtt_connect>
   2edbe:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2edc0:	9803      	ldr	r0, [sp, #12]
   2edc2:	f013 fca1 	bl	42708 <zsock_freeaddrinfo>
	return err;
   2edc6:	e7c8      	b.n	2ed5a <nct_connect+0x4a>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2edc8:	f026 023f 	bic.w	r2, r6, #63	; 0x3f
   2edcc:	f042 0204 	orr.w	r2, r2, #4
   2edd0:	f362 0607 	bfi	r6, r2, #0, #8
   2edd4:	2208      	movs	r2, #8
   2edd6:	f364 168f 	bfi	r6, r4, #6, #10
   2edda:	9200      	str	r2, [sp, #0]
   2eddc:	9701      	str	r7, [sp, #4]
   2edde:	4642      	mov	r2, r8
   2ede0:	4649      	mov	r1, r9
   2ede2:	4630      	mov	r0, r6
   2ede4:	f013 f92b 	bl	4203e <log_string_sync>
		addr = addr->ai_next;
   2ede8:	682d      	ldr	r5, [r5, #0]
   2edea:	e7c0      	b.n	2ed6e <nct_connect+0x5e>
   2edec:	0004c73a 	.word	0x0004c73a
   2edf0:	00046970 	.word	0x00046970
   2edf4:	00046878 	.word	0x00046878
   2edf8:	0004c33b 	.word	0x0004c33b
   2edfc:	0004c42f 	.word	0x0004c42f
   2ee00:	200249d0 	.word	0x200249d0
   2ee04:	b3220001 	.word	0xb3220001
   2ee08:	0004c449 	.word	0x0004c449
   2ee0c:	0004c45e 	.word	0x0004c45e

0002ee10 <nct_cc_connect>:
{
   2ee10:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   2ee12:	2304      	movs	r3, #4
   2ee14:	f04f 0000 	mov.w	r0, #0
   2ee18:	4a0b      	ldr	r2, [pc, #44]	; (2ee48 <nct_cc_connect+0x38>)
   2ee1a:	f363 0007 	bfi	r0, r3, #0, #8
   2ee1e:	4b0b      	ldr	r3, [pc, #44]	; (2ee4c <nct_cc_connect+0x3c>)
   2ee20:	490b      	ldr	r1, [pc, #44]	; (2ee50 <nct_cc_connect+0x40>)
   2ee22:	1a9b      	subs	r3, r3, r2
   2ee24:	08db      	lsrs	r3, r3, #3
   2ee26:	f363 108f 	bfi	r0, r3, #6, #10
   2ee2a:	4a0a      	ldr	r2, [pc, #40]	; (2ee54 <nct_cc_connect+0x44>)
   2ee2c:	f013 f907 	bl	4203e <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2ee30:	4b09      	ldr	r3, [pc, #36]	; (2ee58 <nct_cc_connect+0x48>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ee32:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2ee34:	9300      	str	r3, [sp, #0]
   2ee36:	4b09      	ldr	r3, [pc, #36]	; (2ee5c <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ee38:	4809      	ldr	r0, [pc, #36]	; (2ee60 <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   2ee3a:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2ee3c:	f014 fc48 	bl	436d0 <mqtt_subscribe>
}
   2ee40:	b003      	add	sp, #12
   2ee42:	f85d fb04 	ldr.w	pc, [sp], #4
   2ee46:	bf00      	nop
   2ee48:	00046878 	.word	0x00046878
   2ee4c:	00046970 	.word	0x00046970
   2ee50:	0004c3ba 	.word	0x0004c3ba
   2ee54:	0004c347 	.word	0x0004c347
   2ee58:	0004730c 	.word	0x0004730c
   2ee5c:	04d20003 	.word	0x04d20003
   2ee60:	200249ec 	.word	0x200249ec

0002ee64 <nct_cc_send>:
{
   2ee64:	b570      	push	{r4, r5, r6, lr}
   2ee66:	4b34      	ldr	r3, [pc, #208]	; (2ef38 <nct_cc_send+0xd4>)
   2ee68:	4c34      	ldr	r4, [pc, #208]	; (2ef3c <nct_cc_send+0xd8>)
   2ee6a:	b088      	sub	sp, #32
   2ee6c:	1ae4      	subs	r4, r4, r3
   2ee6e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (cc_data == NULL) {
   2ee72:	4605      	mov	r5, r0
   2ee74:	b970      	cbnz	r0, 2ee94 <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   2ee76:	2301      	movs	r3, #1
   2ee78:	f04f 0000 	mov.w	r0, #0
   2ee7c:	f363 0007 	bfi	r0, r3, #0, #8
   2ee80:	f364 108f 	bfi	r0, r4, #6, #10
   2ee84:	492e      	ldr	r1, [pc, #184]	; (2ef40 <nct_cc_send+0xdc>)
   2ee86:	f013 f8da 	bl	4203e <log_string_sync>
		return -EINVAL;
   2ee8a:	f06f 0515 	mvn.w	r5, #21
}
   2ee8e:	4628      	mov	r0, r5
   2ee90:	b008      	add	sp, #32
   2ee92:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2ee94:	7d06      	ldrb	r6, [r0, #20]
   2ee96:	2e01      	cmp	r6, #1
   2ee98:	d90d      	bls.n	2eeb6 <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2ee9a:	2301      	movs	r3, #1
   2ee9c:	f04f 0000 	mov.w	r0, #0
   2eea0:	f363 0007 	bfi	r0, r3, #0, #8
   2eea4:	f364 108f 	bfi	r0, r4, #6, #10
   2eea8:	4632      	mov	r2, r6
   2eeaa:	4926      	ldr	r1, [pc, #152]	; (2ef44 <nct_cc_send+0xe0>)
   2eeac:	f013 f8c7 	bl	4203e <log_string_sync>
		return -ENOTSUP;
   2eeb0:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2eeb4:	e7eb      	b.n	2ee8e <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   2eeb6:	2210      	movs	r2, #16
   2eeb8:	2100      	movs	r1, #0
   2eeba:	eb0d 0002 	add.w	r0, sp, r2
   2eebe:	f016 f9d3 	bl	45268 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2eec2:	230c      	movs	r3, #12
   2eec4:	4373      	muls	r3, r6
   2eec6:	4920      	ldr	r1, [pc, #128]	; (2ef48 <nct_cc_send+0xe4>)
   2eec8:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   2eeca:	58cb      	ldr	r3, [r1, r3]
   2eecc:	9302      	str	r3, [sp, #8]
   2eece:	6853      	ldr	r3, [r2, #4]
   2eed0:	9303      	str	r3, [sp, #12]
   2eed2:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2eed4:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   2eed6:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2eeda:	b11a      	cbz	r2, 2eee4 <nct_cc_send+0x80>
   2eedc:	686b      	ldr	r3, [r5, #4]
   2eede:	b10b      	cbz	r3, 2eee4 <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   2eee0:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2eee4:	692b      	ldr	r3, [r5, #16]
   2eee6:	b313      	cbz	r3, 2ef2e <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2eee8:	2104      	movs	r1, #4
   2eeea:	f04f 0000 	mov.w	r0, #0
   2eeee:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2eef2:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2eef4:	f364 108f 	bfi	r0, r4, #6, #10
   2eef8:	e9cd 6200 	strd	r6, r2, [sp]
   2eefc:	4913      	ldr	r1, [pc, #76]	; (2ef4c <nct_cc_send+0xe8>)
   2eefe:	4a14      	ldr	r2, [pc, #80]	; (2ef50 <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2ef00:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2ef04:	f013 f89b 	bl	4203e <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2ef08:	a902      	add	r1, sp, #8
   2ef0a:	4812      	ldr	r0, [pc, #72]	; (2ef54 <nct_cc_send+0xf0>)
   2ef0c:	f014 fb4b 	bl	435a6 <mqtt_publish>
	if (err) {
   2ef10:	4605      	mov	r5, r0
   2ef12:	2800      	cmp	r0, #0
   2ef14:	d0bb      	beq.n	2ee8e <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   2ef16:	2301      	movs	r3, #1
   2ef18:	f04f 0000 	mov.w	r0, #0
   2ef1c:	f363 0007 	bfi	r0, r3, #0, #8
   2ef20:	f364 108f 	bfi	r0, r4, #6, #10
   2ef24:	462a      	mov	r2, r5
   2ef26:	490c      	ldr	r1, [pc, #48]	; (2ef58 <nct_cc_send+0xf4>)
   2ef28:	f013 f889 	bl	4203e <log_string_sync>
   2ef2c:	e7af      	b.n	2ee8e <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   2ef2e:	490b      	ldr	r1, [pc, #44]	; (2ef5c <nct_cc_send+0xf8>)
   2ef30:	680b      	ldr	r3, [r1, #0]
   2ef32:	3301      	adds	r3, #1
   2ef34:	600b      	str	r3, [r1, #0]
   2ef36:	e7d7      	b.n	2eee8 <nct_cc_send+0x84>
   2ef38:	00046878 	.word	0x00046878
   2ef3c:	00046970 	.word	0x00046970
   2ef40:	0004c3cd 	.word	0x0004c3cd
   2ef44:	0004c3dd 	.word	0x0004c3dd
   2ef48:	0004733c 	.word	0x0004733c
   2ef4c:	0004c3e9 	.word	0x0004c3e9
   2ef50:	0004c356 	.word	0x0004c356
   2ef54:	200249ec 	.word	0x200249ec
   2ef58:	0004c418 	.word	0x0004c418
   2ef5c:	200249cc 	.word	0x200249cc

0002ef60 <nct_dc_endpoint_set>:
{
   2ef60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ef62:	4607      	mov	r7, r0
	LOG_DBG("nct_dc_endpoint_set");
   2ef64:	2304      	movs	r3, #4
   2ef66:	f04f 0000 	mov.w	r0, #0
{
   2ef6a:	460e      	mov	r6, r1
   2ef6c:	4615      	mov	r5, r2
	LOG_DBG("nct_dc_endpoint_set");
   2ef6e:	f363 0007 	bfi	r0, r3, #0, #8
   2ef72:	4c1b      	ldr	r4, [pc, #108]	; (2efe0 <nct_dc_endpoint_set+0x80>)
   2ef74:	4b1b      	ldr	r3, [pc, #108]	; (2efe4 <nct_dc_endpoint_set+0x84>)
   2ef76:	4a1c      	ldr	r2, [pc, #112]	; (2efe8 <nct_dc_endpoint_set+0x88>)
   2ef78:	1ae4      	subs	r4, r4, r3
   2ef7a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ef7e:	f364 108f 	bfi	r0, r4, #6, #10
   2ef82:	491a      	ldr	r1, [pc, #104]	; (2efec <nct_dc_endpoint_set+0x8c>)
   2ef84:	f013 f85b 	bl	4203e <log_string_sync>
	dc_endpoint_free();
   2ef88:	f7ff faba 	bl	2e500 <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2ef8c:	687b      	ldr	r3, [r7, #4]
   2ef8e:	4818      	ldr	r0, [pc, #96]	; (2eff0 <nct_dc_endpoint_set+0x90>)
   2ef90:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	nct.dc_tx_endp.size = tx_endp->len;
   2ef94:	683b      	ldr	r3, [r7, #0]
   2ef96:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2ef9a:	6873      	ldr	r3, [r6, #4]
   2ef9c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	nct.dc_rx_endp.size = rx_endp->len;
   2efa0:	6833      	ldr	r3, [r6, #0]
   2efa2:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (m_endp != NULL) {
   2efa6:	b1cd      	cbz	r5, 2efdc <nct_dc_endpoint_set+0x7c>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2efa8:	686b      	ldr	r3, [r5, #4]
		int ret = nrf_cloud_fota_endpoint_set(&nct.client, client_id_buf,
   2efaa:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2efae:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		nct.dc_m_endp.size = m_endp->len;
   2efb2:	682b      	ldr	r3, [r5, #0]
		int ret = nrf_cloud_fota_endpoint_set(&nct.client, client_id_buf,
   2efb4:	490f      	ldr	r1, [pc, #60]	; (2eff4 <nct_dc_endpoint_set+0x94>)
		nct.dc_m_endp.size = m_endp->len;
   2efb6:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
		int ret = nrf_cloud_fota_endpoint_set(&nct.client, client_id_buf,
   2efba:	301c      	adds	r0, #28
   2efbc:	f001 fa44 	bl	30448 <nrf_cloud_fota_endpoint_set>
		if (ret) {
   2efc0:	4602      	mov	r2, r0
   2efc2:	b158      	cbz	r0, 2efdc <nct_dc_endpoint_set+0x7c>
			LOG_ERR("Failed to set fota endpoint: %d", ret);
   2efc4:	2101      	movs	r1, #1
   2efc6:	f04f 0000 	mov.w	r0, #0
   2efca:	f361 0007 	bfi	r0, r1, #0, #8
   2efce:	f364 108f 	bfi	r0, r4, #6, #10
   2efd2:	4909      	ldr	r1, [pc, #36]	; (2eff8 <nct_dc_endpoint_set+0x98>)
}
   2efd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			LOG_ERR("Failed to set fota endpoint: %d", ret);
   2efd8:	f013 b831 	b.w	4203e <log_string_sync>
}
   2efdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2efde:	bf00      	nop
   2efe0:	00046970 	.word	0x00046970
   2efe4:	00046878 	.word	0x00046878
   2efe8:	0004c362 	.word	0x0004c362
   2efec:	0004c4f1 	.word	0x0004c4f1
   2eff0:	200249d0 	.word	0x200249d0
   2eff4:	2002ca09 	.word	0x2002ca09
   2eff8:	0004c509 	.word	0x0004c509

0002effc <nct_dc_endpoint_get>:
{
   2effc:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   2effe:	2304      	movs	r3, #4
{
   2f000:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   2f002:	f04f 0000 	mov.w	r0, #0
{
   2f006:	460d      	mov	r5, r1
   2f008:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   2f00a:	f363 0007 	bfi	r0, r3, #0, #8
   2f00e:	4a0f      	ldr	r2, [pc, #60]	; (2f04c <nct_dc_endpoint_get+0x50>)
   2f010:	4b0f      	ldr	r3, [pc, #60]	; (2f050 <nct_dc_endpoint_get+0x54>)
   2f012:	4910      	ldr	r1, [pc, #64]	; (2f054 <nct_dc_endpoint_get+0x58>)
   2f014:	1a9b      	subs	r3, r3, r2
   2f016:	08db      	lsrs	r3, r3, #3
   2f018:	f363 108f 	bfi	r0, r3, #6, #10
   2f01c:	4a0e      	ldr	r2, [pc, #56]	; (2f058 <nct_dc_endpoint_get+0x5c>)
   2f01e:	f013 f80e 	bl	4203e <log_string_sync>
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2f022:	4b0e      	ldr	r3, [pc, #56]	; (2f05c <nct_dc_endpoint_get+0x60>)
   2f024:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2f028:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2f02a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2f02e:	6032      	str	r2, [r6, #0]
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2f030:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   2f034:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2f036:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2f03a:	602a      	str	r2, [r5, #0]
	if (m_endp != NULL) {
   2f03c:	b12c      	cbz	r4, 2f04a <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2f03e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		m_endp->len = nct.dc_m_endp.size;
   2f042:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		m_endp->ptr = nct.dc_m_endp.utf8;
   2f046:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2f048:	6023      	str	r3, [r4, #0]
}
   2f04a:	bd70      	pop	{r4, r5, r6, pc}
   2f04c:	00046878 	.word	0x00046878
   2f050:	00046970 	.word	0x00046970
   2f054:	0004c4d9 	.word	0x0004c4d9
   2f058:	0004c376 	.word	0x0004c376
   2f05c:	200249d0 	.word	0x200249d0

0002f060 <nct_dc_connect>:
{
   2f060:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   2f062:	2304      	movs	r3, #4
   2f064:	f04f 0000 	mov.w	r0, #0
   2f068:	4a10      	ldr	r2, [pc, #64]	; (2f0ac <nct_dc_connect+0x4c>)
   2f06a:	f363 0007 	bfi	r0, r3, #0, #8
   2f06e:	4b10      	ldr	r3, [pc, #64]	; (2f0b0 <nct_dc_connect+0x50>)
   2f070:	4910      	ldr	r1, [pc, #64]	; (2f0b4 <nct_dc_connect+0x54>)
   2f072:	1a9b      	subs	r3, r3, r2
   2f074:	08db      	lsrs	r3, r3, #3
   2f076:	f363 108f 	bfi	r0, r3, #6, #10
   2f07a:	4a0f      	ldr	r2, [pc, #60]	; (2f0b8 <nct_dc_connect+0x58>)
   2f07c:	f012 ffdf 	bl	4203e <log_string_sync>
			.utf8 = nct.dc_rx_endp.utf8,
   2f080:	480e      	ldr	r0, [pc, #56]	; (2f0bc <nct_dc_connect+0x5c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2f082:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2f084:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2f088:	301c      	adds	r0, #28
	struct mqtt_topic subscribe_topic = {
   2f08a:	9303      	str	r3, [sp, #12]
   2f08c:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2f090:	9304      	str	r3, [sp, #16]
   2f092:	2301      	movs	r3, #1
   2f094:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2f098:	ab03      	add	r3, sp, #12
   2f09a:	9301      	str	r3, [sp, #4]
   2f09c:	4b08      	ldr	r3, [pc, #32]	; (2f0c0 <nct_dc_connect+0x60>)
   2f09e:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2f0a0:	f014 fb16 	bl	436d0 <mqtt_subscribe>
}
   2f0a4:	b007      	add	sp, #28
   2f0a6:	f85d fb04 	ldr.w	pc, [sp], #4
   2f0aa:	bf00      	nop
   2f0ac:	00046878 	.word	0x00046878
   2f0b0:	00046970 	.word	0x00046970
   2f0b4:	0004c485 	.word	0x0004c485
   2f0b8:	0004c38a 	.word	0x0004c38a
   2f0bc:	200249d0 	.word	0x200249d0
   2f0c0:	223d0001 	.word	0x223d0001

0002f0c4 <nct_dc_disconnect>:
{
   2f0c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("nct_dc_disconnect");
   2f0c6:	2304      	movs	r3, #4
   2f0c8:	f04f 0000 	mov.w	r0, #0
   2f0cc:	4c15      	ldr	r4, [pc, #84]	; (2f124 <nct_dc_disconnect+0x60>)
   2f0ce:	f363 0007 	bfi	r0, r3, #0, #8
   2f0d2:	4b15      	ldr	r3, [pc, #84]	; (2f128 <nct_dc_disconnect+0x64>)
   2f0d4:	4a15      	ldr	r2, [pc, #84]	; (2f12c <nct_dc_disconnect+0x68>)
   2f0d6:	1ae4      	subs	r4, r4, r3
   2f0d8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2f0dc:	f364 108f 	bfi	r0, r4, #6, #10
   2f0e0:	4913      	ldr	r1, [pc, #76]	; (2f130 <nct_dc_disconnect+0x6c>)
   2f0e2:	f012 ffac 	bl	4203e <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2f0e6:	4813      	ldr	r0, [pc, #76]	; (2f134 <nct_dc_disconnect+0x70>)
   2f0e8:	4b13      	ldr	r3, [pc, #76]	; (2f138 <nct_dc_disconnect+0x74>)
   2f0ea:	9000      	str	r0, [sp, #0]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2f0ec:	4669      	mov	r1, sp
   2f0ee:	38a0      	subs	r0, #160	; 0xa0
	const struct mqtt_subscription_list subscription_list = {
   2f0f0:	9301      	str	r3, [sp, #4]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2f0f2:	f014 fb14 	bl	4371e <mqtt_unsubscribe>
   2f0f6:	4605      	mov	r5, r0
	int err = nrf_cloud_fota_unsubscribe();
   2f0f8:	f001 fa72 	bl	305e0 <nrf_cloud_fota_unsubscribe>
	if (err) {
   2f0fc:	4606      	mov	r6, r0
   2f0fe:	b168      	cbz	r0, 2f11c <nct_dc_disconnect+0x58>
		LOG_ERR("Failed to unsubscribe from FOTA topics: %d", err);
   2f100:	2301      	movs	r3, #1
   2f102:	f04f 0000 	mov.w	r0, #0
   2f106:	f363 0007 	bfi	r0, r3, #0, #8
   2f10a:	f364 108f 	bfi	r0, r4, #6, #10
   2f10e:	4632      	mov	r2, r6
   2f110:	490a      	ldr	r1, [pc, #40]	; (2f13c <nct_dc_disconnect+0x78>)
   2f112:	f012 ff94 	bl	4203e <log_string_sync>
		if (ret == 0) {
   2f116:	2d00      	cmp	r5, #0
   2f118:	bf08      	it	eq
   2f11a:	4635      	moveq	r5, r6
}
   2f11c:	4628      	mov	r0, r5
   2f11e:	b002      	add	sp, #8
   2f120:	bd70      	pop	{r4, r5, r6, pc}
   2f122:	bf00      	nop
   2f124:	00046970 	.word	0x00046970
   2f128:	00046878 	.word	0x00046878
   2f12c:	0004c399 	.word	0x0004c399
   2f130:	0004c498 	.word	0x0004c498
   2f134:	20024a8c 	.word	0x20024a8c
   2f138:	223d0001 	.word	0x223d0001
   2f13c:	0004c4ae 	.word	0x0004c4ae

0002f140 <nct_disconnect>:
{
   2f140:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   2f142:	f04f 0000 	mov.w	r0, #0
   2f146:	2304      	movs	r3, #4
   2f148:	4a09      	ldr	r2, [pc, #36]	; (2f170 <nct_disconnect+0x30>)
   2f14a:	f363 0007 	bfi	r0, r3, #0, #8
   2f14e:	4b09      	ldr	r3, [pc, #36]	; (2f174 <nct_disconnect+0x34>)
   2f150:	4909      	ldr	r1, [pc, #36]	; (2f178 <nct_disconnect+0x38>)
   2f152:	1a9b      	subs	r3, r3, r2
   2f154:	08db      	lsrs	r3, r3, #3
   2f156:	f363 108f 	bfi	r0, r3, #6, #10
   2f15a:	4a08      	ldr	r2, [pc, #32]	; (2f17c <nct_disconnect+0x3c>)
   2f15c:	f012 ff6f 	bl	4203e <log_string_sync>
	dc_endpoint_free();
   2f160:	f7ff f9ce 	bl	2e500 <dc_endpoint_free>
}
   2f164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2f168:	4805      	ldr	r0, [pc, #20]	; (2f180 <nct_disconnect+0x40>)
   2f16a:	f014 ba88 	b.w	4367e <mqtt_disconnect>
   2f16e:	bf00      	nop
   2f170:	00046878 	.word	0x00046878
   2f174:	00046970 	.word	0x00046970
   2f178:	0004c529 	.word	0x0004c529
   2f17c:	0004c3ab 	.word	0x0004c3ab
   2f180:	200249ec 	.word	0x200249ec

0002f184 <nct_process>:
{
   2f184:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2f186:	4c04      	ldr	r4, [pc, #16]	; (2f198 <nct_process+0x14>)
   2f188:	4620      	mov	r0, r4
   2f18a:	f014 fb58 	bl	4383e <mqtt_input>
	mqtt_live(&nct.client);
   2f18e:	4620      	mov	r0, r4
}
   2f190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2f194:	f014 bb15 	b.w	437c2 <mqtt_live>
   2f198:	200249ec 	.word	0x200249ec

0002f19c <nct_keepalive_time_left>:
	return (int)mqtt_keepalive_time_left(&nct.client);
   2f19c:	4801      	ldr	r0, [pc, #4]	; (2f1a4 <nct_keepalive_time_left+0x8>)
   2f19e:	f014 bb37 	b.w	43810 <mqtt_keepalive_time_left>
   2f1a2:	bf00      	nop
   2f1a4:	200249ec 	.word	0x200249ec

0002f1a8 <nct_socket_get>:
}
   2f1a8:	4b01      	ldr	r3, [pc, #4]	; (2f1b0 <nct_socket_get+0x8>)
   2f1aa:	6c58      	ldr	r0, [r3, #68]	; 0x44
   2f1ac:	4770      	bx	lr
   2f1ae:	bf00      	nop
   2f1b0:	200249d0 	.word	0x200249d0

0002f1b4 <send_to_modem>:
	return type_lookup_socket2gps[type];
}

static int send_to_modem(void *data, size_t data_len,
			 nrf_gnss_agps_data_type_t type)
{
   2f1b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	/* At this point, GPS driver or app-provided socket is assumed. */
	if (gps_dev) {
   2f1b6:	4b26      	ldr	r3, [pc, #152]	; (2f250 <send_to_modem+0x9c>)
{
   2f1b8:	4605      	mov	r5, r0
	if (gps_dev) {
   2f1ba:	681c      	ldr	r4, [r3, #0]
{
   2f1bc:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (gps_dev) {
   2f1c0:	b18c      	cbz	r4, 2f1e6 <send_to_modem+0x32>
	return type_lookup_socket2gps[type];
   2f1c2:	b293      	uxth	r3, r2
   2f1c4:	4a23      	ldr	r2, [pc, #140]	; (2f254 <send_to_modem+0xa0>)
   2f1c6:	5cd0      	ldrb	r0, [r2, r3]
				 enum gps_agps_type type,
				 void *data, size_t data_len)
{
	struct gps_driver_api *api;

	if ((data == NULL) || (dev == NULL)) {
   2f1c8:	2d00      	cmp	r5, #0
   2f1ca:	d03a      	beq.n	2f242 <send_to_modem+0x8e>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->agps_write == NULL) {
   2f1cc:	68a3      	ldr	r3, [r4, #8]
   2f1ce:	689e      	ldr	r6, [r3, #8]
   2f1d0:	2e00      	cmp	r6, #0
   2f1d2:	d039      	beq.n	2f248 <send_to_modem+0x94>
		return -ENOTSUP;
	}

	return api->agps_write(dev, type, data, data_len);
   2f1d4:	460b      	mov	r3, r1
   2f1d6:	462a      	mov	r2, r5
   2f1d8:	4601      	mov	r1, r0
   2f1da:	4620      	mov	r0, r4
   2f1dc:	47b0      	blx	r6
   2f1de:	4604      	mov	r4, r0
	if (agps_print_enabled) {
		agps_print(type, data);
	}

	return err;
}
   2f1e0:	4620      	mov	r0, r4
   2f1e2:	b004      	add	sp, #16
   2f1e4:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_sendto(fd, data, data_len, 0, &type, sizeof(type));
   2f1e6:	2302      	movs	r3, #2
   2f1e8:	460a      	mov	r2, r1
   2f1ea:	9301      	str	r3, [sp, #4]
   2f1ec:	4601      	mov	r1, r0
   2f1ee:	f10d 030e 	add.w	r3, sp, #14
   2f1f2:	4819      	ldr	r0, [pc, #100]	; (2f258 <send_to_modem+0xa4>)
   2f1f4:	9300      	str	r3, [sp, #0]
   2f1f6:	6800      	ldr	r0, [r0, #0]
   2f1f8:	4623      	mov	r3, r4
   2f1fa:	f00a fdff 	bl	39dfc <nrf_sendto>
	if (err < 0) {
   2f1fe:	2800      	cmp	r0, #0
   2f200:	da15      	bge.n	2f22e <send_to_modem+0x7a>
		LOG_ERR("Failed to send AGPS data to modem, errno: %d", errno);
   2f202:	2301      	movs	r3, #1
   2f204:	f04f 0400 	mov.w	r4, #0
   2f208:	4a14      	ldr	r2, [pc, #80]	; (2f25c <send_to_modem+0xa8>)
   2f20a:	f363 0407 	bfi	r4, r3, #0, #8
   2f20e:	4b14      	ldr	r3, [pc, #80]	; (2f260 <send_to_modem+0xac>)
   2f210:	1a9b      	subs	r3, r3, r2
   2f212:	08db      	lsrs	r3, r3, #3
   2f214:	f363 148f 	bfi	r4, r3, #6, #10
   2f218:	f013 fd7f 	bl	42d1a <__errno>
   2f21c:	4911      	ldr	r1, [pc, #68]	; (2f264 <send_to_modem+0xb0>)
   2f21e:	6802      	ldr	r2, [r0, #0]
   2f220:	4620      	mov	r0, r4
   2f222:	f012 ff0c 	bl	4203e <log_string_sync>
		err = -errno;
   2f226:	f013 fd78 	bl	42d1a <__errno>
   2f22a:	6804      	ldr	r4, [r0, #0]
   2f22c:	4264      	negs	r4, r4
	if (agps_print_enabled) {
   2f22e:	4b0e      	ldr	r3, [pc, #56]	; (2f268 <send_to_modem+0xb4>)
   2f230:	781b      	ldrb	r3, [r3, #0]
   2f232:	2b00      	cmp	r3, #0
   2f234:	d0d4      	beq.n	2f1e0 <send_to_modem+0x2c>
		agps_print(type, data);
   2f236:	4629      	mov	r1, r5
   2f238:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2f23c:	f000 fb5e 	bl	2f8fc <agps_print>
   2f240:	e7ce      	b.n	2f1e0 <send_to_modem+0x2c>
		return -EINVAL;
   2f242:	f06f 0415 	mvn.w	r4, #21
   2f246:	e7cb      	b.n	2f1e0 <send_to_modem+0x2c>
		return -ENOTSUP;
   2f248:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f24c:	e7c8      	b.n	2f1e0 <send_to_modem+0x2c>
   2f24e:	bf00      	nop
   2f250:	200254a8 	.word	0x200254a8
   2f254:	0004cd1c 	.word	0x0004cd1c
   2f258:	20020744 	.word	0x20020744
   2f25c:	00046878 	.word	0x00046878
   2f260:	00046950 	.word	0x00046950
   2f264:	0004cce0 	.word	0x0004cce0
   2f268:	2002cb07 	.word	0x2002cb07

0002f26c <nrf_cloud_agps_request>:
{
   2f26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f270:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
   2f274:	ad05      	add	r5, sp, #20
   2f276:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	struct modem_param_info modem_info = {0};
   2f27a:	f640 02e8 	movw	r2, #2280	; 0x8e8
   2f27e:	2100      	movs	r1, #0
   2f280:	a85c      	add	r0, sp, #368	; 0x170
   2f282:	f015 fff1 	bl	45268 <memset>
	struct nct_dc_data msg = {
   2f286:	2214      	movs	r2, #20
   2f288:	2100      	movs	r1, #0
   2f28a:	a810      	add	r0, sp, #64	; 0x40
   2f28c:	f015 ffec 	bl	45268 <memset>
	if (request.utc) {
   2f290:	7a2b      	ldrb	r3, [r5, #8]
	if (request.sv_mask_ephe) {
   2f292:	682a      	ldr	r2, [r5, #0]
	if (request.utc) {
   2f294:	f013 0401 	ands.w	r4, r3, #1
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2f298:	bf18      	it	ne
   2f29a:	2401      	movne	r4, #1
	struct nct_dc_data msg = {
   2f29c:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   2f2a0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2f2a4:	bf18      	it	ne
   2f2a6:	f88d 4020 	strbne.w	r4, [sp, #32]
	if (request.sv_mask_ephe) {
   2f2aa:	b11a      	cbz	r2, 2f2b4 <nrf_cloud_agps_request+0x48>
		types[type_count] = GPS_AGPS_EPHEMERIDES;
   2f2ac:	2102      	movs	r1, #2
   2f2ae:	aa08      	add	r2, sp, #32
   2f2b0:	5511      	strb	r1, [r2, r4]
		type_count += 1;
   2f2b2:	3401      	adds	r4, #1
	if (request.sv_mask_alm) {
   2f2b4:	686a      	ldr	r2, [r5, #4]
   2f2b6:	b11a      	cbz	r2, 2f2c0 <nrf_cloud_agps_request+0x54>
		types[type_count] = GPS_AGPS_ALMANAC;
   2f2b8:	2103      	movs	r1, #3
   2f2ba:	aa08      	add	r2, sp, #32
   2f2bc:	5511      	strb	r1, [r2, r4]
		type_count += 1;
   2f2be:	3401      	adds	r4, #1
	if (request.klobuchar) {
   2f2c0:	079d      	lsls	r5, r3, #30
		types[type_count] = GPS_AGPS_KLOBUCHAR_CORRECTION;
   2f2c2:	bf41      	itttt	mi
   2f2c4:	2104      	movmi	r1, #4
   2f2c6:	aa08      	addmi	r2, sp, #32
   2f2c8:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   2f2ca:	3401      	addmi	r4, #1
	if (request.nequick) {
   2f2cc:	0758      	lsls	r0, r3, #29
		types[type_count] = GPS_AGPS_NEQUICK_CORRECTION;
   2f2ce:	bf41      	itttt	mi
   2f2d0:	2105      	movmi	r1, #5
   2f2d2:	aa08      	addmi	r2, sp, #32
   2f2d4:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   2f2d6:	3401      	addmi	r4, #1
	if (request.system_time_tow) {
   2f2d8:	0719      	lsls	r1, r3, #28
		types[type_count] = GPS_AGPS_GPS_SYSTEM_CLOCK_AND_TOWS;
   2f2da:	bf41      	itttt	mi
   2f2dc:	2107      	movmi	r1, #7
   2f2de:	aa08      	addmi	r2, sp, #32
   2f2e0:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   2f2e2:	3401      	addmi	r4, #1
	if (request.position) {
   2f2e4:	06da      	lsls	r2, r3, #27
		types[type_count] = GPS_AGPS_LOCATION;
   2f2e6:	bf41      	itttt	mi
   2f2e8:	2108      	movmi	r1, #8
   2f2ea:	aa08      	addmi	r2, sp, #32
   2f2ec:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   2f2ee:	3401      	addmi	r4, #1
	if (request.integrity) {
   2f2f0:	069b      	lsls	r3, r3, #26
   2f2f2:	d516      	bpl.n	2f322 <nrf_cloud_agps_request+0xb6>
		types[type_count] = GPS_AGPS_INTEGRITY;
   2f2f4:	2209      	movs	r2, #9
   2f2f6:	ab08      	add	r3, sp, #32
   2f2f8:	551a      	strb	r2, [r3, r4]
		type_count += 1;
   2f2fa:	3401      	adds	r4, #1
	err = modem_info_init();
   2f2fc:	f7fd f8c6 	bl	2c48c <modem_info_init>
	if (err) {
   2f300:	4605      	mov	r5, r0
   2f302:	b320      	cbz	r0, 2f34e <nrf_cloud_agps_request+0xe2>
		LOG_ERR("Could not initialize modem info module");
   2f304:	2301      	movs	r3, #1
   2f306:	f04f 0000 	mov.w	r0, #0
   2f30a:	4a59      	ldr	r2, [pc, #356]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f30c:	f363 0007 	bfi	r0, r3, #0, #8
   2f310:	4b58      	ldr	r3, [pc, #352]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f312:	4959      	ldr	r1, [pc, #356]	; (2f478 <nrf_cloud_agps_request+0x20c>)
   2f314:	1a9b      	subs	r3, r3, r2
   2f316:	08db      	lsrs	r3, r3, #3
   2f318:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not initialize modem info parameters");
   2f31c:	f012 fe8f 	bl	4203e <log_string_sync>
		return err;
   2f320:	e010      	b.n	2f344 <nrf_cloud_agps_request+0xd8>
	if (type_count == 0) {
   2f322:	2c00      	cmp	r4, #0
   2f324:	d1ea      	bne.n	2f2fc <nrf_cloud_agps_request+0x90>
		LOG_INF("No A-GPS data types requested");
   2f326:	2303      	movs	r3, #3
   2f328:	f04f 0000 	mov.w	r0, #0
   2f32c:	4a50      	ldr	r2, [pc, #320]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f32e:	f363 0007 	bfi	r0, r3, #0, #8
   2f332:	4b50      	ldr	r3, [pc, #320]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f334:	4951      	ldr	r1, [pc, #324]	; (2f47c <nrf_cloud_agps_request+0x210>)
   2f336:	1a9b      	subs	r3, r3, r2
   2f338:	08db      	lsrs	r3, r3, #3
   2f33a:	f363 108f 	bfi	r0, r3, #6, #10
   2f33e:	f012 fe7e 	bl	4203e <log_string_sync>
		return 0;
   2f342:	4625      	mov	r5, r4
}
   2f344:	4628      	mov	r0, r5
   2f346:	f60d 2d58 	addw	sp, sp, #2648	; 0xa58
   2f34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = modem_info_params_init(&modem_info);
   2f34e:	a85c      	add	r0, sp, #368	; 0x170
   2f350:	f7fd f8e8 	bl	2c524 <modem_info_params_init>
	if (err) {
   2f354:	4605      	mov	r5, r0
   2f356:	b160      	cbz	r0, 2f372 <nrf_cloud_agps_request+0x106>
		LOG_ERR("Could not initialize modem info parameters");
   2f358:	2301      	movs	r3, #1
   2f35a:	f04f 0000 	mov.w	r0, #0
   2f35e:	4a44      	ldr	r2, [pc, #272]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f360:	f363 0007 	bfi	r0, r3, #0, #8
   2f364:	4b43      	ldr	r3, [pc, #268]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f366:	4946      	ldr	r1, [pc, #280]	; (2f480 <nrf_cloud_agps_request+0x214>)
   2f368:	1a9b      	subs	r3, r3, r2
   2f36a:	08db      	lsrs	r3, r3, #3
   2f36c:	f363 108f 	bfi	r0, r3, #6, #10
   2f370:	e7d4      	b.n	2f31c <nrf_cloud_agps_request+0xb0>
	err = modem_info_params_get(&modem_info);
   2f372:	a85c      	add	r0, sp, #368	; 0x170
   2f374:	f7fd f928 	bl	2c5c8 <modem_info_params_get>
	if (err) {
   2f378:	4605      	mov	r5, r0
   2f37a:	b160      	cbz	r0, 2f396 <nrf_cloud_agps_request+0x12a>
		LOG_ERR("Could not obtain cell information");
   2f37c:	2301      	movs	r3, #1
   2f37e:	f04f 0000 	mov.w	r0, #0
   2f382:	4a3b      	ldr	r2, [pc, #236]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f384:	f363 0007 	bfi	r0, r3, #0, #8
   2f388:	4b3a      	ldr	r3, [pc, #232]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f38a:	493e      	ldr	r1, [pc, #248]	; (2f484 <nrf_cloud_agps_request+0x218>)
   2f38c:	1a9b      	subs	r3, r3, r2
   2f38e:	08db      	lsrs	r3, r3, #3
   2f390:	f363 108f 	bfi	r0, r3, #6, #10
   2f394:	e7c2      	b.n	2f31c <nrf_cloud_agps_request+0xb0>
	size_t len = 0;
   2f396:	4606      	mov	r6, r0
	for (size_t i = 0; i < type_count; i++) {
   2f398:	4607      	mov	r7, r0
		err = snprintk(&type_array[len], type_array_len,
   2f39a:	f8df a100 	ldr.w	sl, [pc, #256]	; 2f49c <nrf_cloud_agps_request+0x230>
   2f39e:	f10d 0920 	add.w	r9, sp, #32
   2f3a2:	a80b      	add	r0, sp, #44	; 0x2c
   2f3a4:	f819 3b01 	ldrb.w	r3, [r9], #1
   2f3a8:	4652      	mov	r2, sl
   2f3aa:	2114      	movs	r1, #20
   2f3ac:	4430      	add	r0, r6
   2f3ae:	f012 fc28 	bl	41c02 <snprintk>
		if (err < 0) {
   2f3b2:	1e05      	subs	r5, r0, #0
   2f3b4:	db10      	blt.n	2f3d8 <nrf_cloud_agps_request+0x16c>
	for (size_t i = 0; i < type_count; i++) {
   2f3b6:	3701      	adds	r7, #1
   2f3b8:	42a7      	cmp	r7, r4
		len += err;
   2f3ba:	442e      	add	r6, r5
	for (size_t i = 0; i < type_count; i++) {
   2f3bc:	d3f1      	bcc.n	2f3a2 <nrf_cloud_agps_request+0x136>
	type_array[len - 1] = '\0';
   2f3be:	2200      	movs	r2, #0
   2f3c0:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
	err = snprintk(types_array, sizeof(types_array),
   2f3c4:	ac15      	add	r4, sp, #84	; 0x54
	type_array[len - 1] = '\0';
   2f3c6:	559a      	strb	r2, [r3, r6]
	err = snprintk(types_array, sizeof(types_array),
   2f3c8:	211e      	movs	r1, #30
   2f3ca:	ab0b      	add	r3, sp, #44	; 0x2c
   2f3cc:	4a2e      	ldr	r2, [pc, #184]	; (2f488 <nrf_cloud_agps_request+0x21c>)
   2f3ce:	4620      	mov	r0, r4
   2f3d0:	f012 fc17 	bl	41c02 <snprintk>
	if (err < 0) {
   2f3d4:	1e05      	subs	r5, r0, #0
   2f3d6:	da0f      	bge.n	2f3f8 <nrf_cloud_agps_request+0x18c>
		LOG_ERR("Error when creating type array: %d", err);
   2f3d8:	2301      	movs	r3, #1
   2f3da:	f04f 0000 	mov.w	r0, #0
   2f3de:	4a24      	ldr	r2, [pc, #144]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f3e0:	f363 0007 	bfi	r0, r3, #0, #8
   2f3e4:	4b23      	ldr	r3, [pc, #140]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f3e6:	4929      	ldr	r1, [pc, #164]	; (2f48c <nrf_cloud_agps_request+0x220>)
   2f3e8:	1a9b      	subs	r3, r3, r2
   2f3ea:	462a      	mov	r2, r5
   2f3ec:	08db      	lsrs	r3, r3, #3
   2f3ee:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2f3f2:	f012 fe24 	bl	4203e <log_string_sync>
		return err;
   2f3f6:	e7a5      	b.n	2f344 <nrf_cloud_agps_request+0xd8>
		(uint32_t)modem_info.network.cellid_dec,
   2f3f8:	f50d 63f2 	add.w	r3, sp, #1936	; 0x790
	len = snprintk(request_buf, sizeof(request_buf),
   2f3fc:	9403      	str	r4, [sp, #12]
   2f3fe:	e9d3 0100 	ldrd	r0, r1, [r3]
   2f402:	f7ed fc9b 	bl	1cd3c <__aeabi_d2uiz>
   2f406:	f8bd 3250 	ldrh.w	r3, [sp, #592]	; 0x250
   2f40a:	f8bd 5330 	ldrh.w	r5, [sp, #816]	; 0x330
   2f40e:	9301      	str	r3, [sp, #4]
   2f410:	f8bd 33a0 	ldrh.w	r3, [sp, #928]	; 0x3a0
   2f414:	9002      	str	r0, [sp, #8]
   2f416:	9300      	str	r3, [sp, #0]
   2f418:	4a1d      	ldr	r2, [pc, #116]	; (2f490 <nrf_cloud_agps_request+0x224>)
   2f41a:	462b      	mov	r3, r5
   2f41c:	21fa      	movs	r1, #250	; 0xfa
   2f41e:	4640      	mov	r0, r8
   2f420:	f012 fbef 	bl	41c02 <snprintk>
	if (len < 0) {
   2f424:	1e05      	subs	r5, r0, #0
   2f426:	da0d      	bge.n	2f444 <nrf_cloud_agps_request+0x1d8>
		LOG_ERR("Failed to create A-GPS request, error: %d", len);
   2f428:	2301      	movs	r3, #1
   2f42a:	f04f 0000 	mov.w	r0, #0
   2f42e:	4a10      	ldr	r2, [pc, #64]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f430:	f363 0007 	bfi	r0, r3, #0, #8
   2f434:	4b0f      	ldr	r3, [pc, #60]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f436:	4917      	ldr	r1, [pc, #92]	; (2f494 <nrf_cloud_agps_request+0x228>)
   2f438:	1a9b      	subs	r3, r3, r2
   2f43a:	08db      	lsrs	r3, r3, #3
   2f43c:	f363 108f 	bfi	r0, r3, #6, #10
   2f440:	462a      	mov	r2, r5
   2f442:	e7d6      	b.n	2f3f2 <nrf_cloud_agps_request+0x186>
	err = nct_dc_send(&msg);
   2f444:	a810      	add	r0, sp, #64	; 0x40
	msg.data.len = len;
   2f446:	9510      	str	r5, [sp, #64]	; 0x40
	err = nct_dc_send(&msg);
   2f448:	f015 fc41 	bl	44cce <nct_dc_send>
	if (err) {
   2f44c:	4605      	mov	r5, r0
   2f44e:	2800      	cmp	r0, #0
   2f450:	f43f af78 	beq.w	2f344 <nrf_cloud_agps_request+0xd8>
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2f454:	2301      	movs	r3, #1
   2f456:	f04f 0000 	mov.w	r0, #0
   2f45a:	4a05      	ldr	r2, [pc, #20]	; (2f470 <nrf_cloud_agps_request+0x204>)
   2f45c:	f363 0007 	bfi	r0, r3, #0, #8
   2f460:	4b04      	ldr	r3, [pc, #16]	; (2f474 <nrf_cloud_agps_request+0x208>)
   2f462:	490d      	ldr	r1, [pc, #52]	; (2f498 <nrf_cloud_agps_request+0x22c>)
   2f464:	1a9b      	subs	r3, r3, r2
   2f466:	08db      	lsrs	r3, r3, #3
   2f468:	f363 108f 	bfi	r0, r3, #6, #10
   2f46c:	462a      	mov	r2, r5
   2f46e:	e7c0      	b.n	2f3f2 <nrf_cloud_agps_request+0x186>
   2f470:	00046878 	.word	0x00046878
   2f474:	00046950 	.word	0x00046950
   2f478:	0004cb85 	.word	0x0004cb85
   2f47c:	0004cb67 	.word	0x0004cb67
   2f480:	0004cbac 	.word	0x0004cbac
   2f484:	0004cbd7 	.word	0x0004cbd7
   2f488:	0004cbfd 	.word	0x0004cbfd
   2f48c:	0004cc0b 	.word	0x0004cc0b
   2f490:	0004cc2e 	.word	0x0004cc2e
   2f494:	0004cc8e 	.word	0x0004cc8e
   2f498:	0004ccb8 	.word	0x0004ccb8
   2f49c:	0004cbf9 	.word	0x0004cbf9

0002f4a0 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len, const int *socket)
{
   2f4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nrf_cloud_apgs_element element = {};
	struct nrf_cloud_agps_system_time sys_time;
	size_t parsed_len = 0;
	uint8_t version;

	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2f4a4:	7804      	ldrb	r4, [r0, #0]
{
   2f4a6:	b0cb      	sub	sp, #300	; 0x12c
	parsed_len += NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_SIZE;

	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2f4a8:	2c01      	cmp	r4, #1
{
   2f4aa:	4607      	mov	r7, r0
   2f4ac:	468a      	mov	sl, r1
   2f4ae:	4690      	mov	r8, r2
	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2f4b0:	d00f      	beq.n	2f4d2 <nrf_cloud_agps_process+0x32>
   2f4b2:	f240 2326 	movw	r3, #550	; 0x226
   2f4b6:	4ab5      	ldr	r2, [pc, #724]	; (2f78c <nrf_cloud_agps_process+0x2ec>)
   2f4b8:	49b5      	ldr	r1, [pc, #724]	; (2f790 <nrf_cloud_agps_process+0x2f0>)
   2f4ba:	48b6      	ldr	r0, [pc, #728]	; (2f794 <nrf_cloud_agps_process+0x2f4>)
   2f4bc:	f012 fb94 	bl	41be8 <printk>
   2f4c0:	4621      	mov	r1, r4
   2f4c2:	48b5      	ldr	r0, [pc, #724]	; (2f798 <nrf_cloud_agps_process+0x2f8>)
   2f4c4:	f012 fb90 	bl	41be8 <printk>
   2f4c8:	f240 2126 	movw	r1, #550	; 0x226
   2f4cc:	48af      	ldr	r0, [pc, #700]	; (2f78c <nrf_cloud_agps_process+0x2ec>)
   2f4ce:	f012 fda5 	bl	4201c <assert_post_action>
		 "Cannot parse schema version: %d", version);

	LOG_DBG("Receievd AGPS data. Schema version: %d, length: %d",
		version, buf_len);

	if (socket) {
   2f4d2:	4cb2      	ldr	r4, [pc, #712]	; (2f79c <nrf_cloud_agps_process+0x2fc>)
   2f4d4:	4bb2      	ldr	r3, [pc, #712]	; (2f7a0 <nrf_cloud_agps_process+0x300>)
   2f4d6:	4db3      	ldr	r5, [pc, #716]	; (2f7a4 <nrf_cloud_agps_process+0x304>)
   2f4d8:	1ae4      	subs	r4, r4, r3
   2f4da:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2f4de:	f1b8 0f00 	cmp.w	r8, #0
   2f4e2:	d010      	beq.n	2f506 <nrf_cloud_agps_process+0x66>
		LOG_DBG("Using user-provided socket, fd %d", fd);

		gps_dev = NULL;
   2f4e4:	2300      	movs	r3, #0
		fd = *socket;
   2f4e6:	f8d8 2000 	ldr.w	r2, [r8]
		gps_dev = NULL;
   2f4ea:	602b      	str	r3, [r5, #0]
		fd = *socket;
   2f4ec:	4bae      	ldr	r3, [pc, #696]	; (2f7a8 <nrf_cloud_agps_process+0x308>)
   2f4ee:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f4f0:	2501      	movs	r5, #1
	if (elements_left_to_process == 0) {
   2f4f2:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 2f7b8 <nrf_cloud_agps_process+0x318>
   2f4f6:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 2f7bc <nrf_cloud_agps_process+0x31c>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2f4fa:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 2f7c0 <nrf_cloud_agps_process+0x320>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
			return -ENODEV;
		}
	}

	while (parsed_len < buf_len) {
   2f4fe:	4555      	cmp	r5, sl
   2f500:	d318      	bcc.n	2f534 <nrf_cloud_agps_process+0x94>
			LOG_ERR("Failed to send data to modem, error: %d", err);
			return err;
		}
	}

	return 0;
   2f502:	2300      	movs	r3, #0
   2f504:	e012      	b.n	2f52c <nrf_cloud_agps_process+0x8c>
	} else if (gps_dev == NULL) {
   2f506:	682b      	ldr	r3, [r5, #0]
   2f508:	2b00      	cmp	r3, #0
   2f50a:	d1f1      	bne.n	2f4f0 <nrf_cloud_agps_process+0x50>
   2f50c:	48a7      	ldr	r0, [pc, #668]	; (2f7ac <nrf_cloud_agps_process+0x30c>)
   2f50e:	f00c fe19 	bl	3c144 <z_impl_device_get_binding>
		gps_dev = device_get_binding("NRF9160_GPS");
   2f512:	6028      	str	r0, [r5, #0]
		if (gps_dev == NULL) {
   2f514:	2800      	cmp	r0, #0
   2f516:	d1eb      	bne.n	2f4f0 <nrf_cloud_agps_process+0x50>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
   2f518:	2301      	movs	r3, #1
   2f51a:	f363 0007 	bfi	r0, r3, #0, #8
   2f51e:	f364 108f 	bfi	r0, r4, #6, #10
   2f522:	49a3      	ldr	r1, [pc, #652]	; (2f7b0 <nrf_cloud_agps_process+0x310>)
   2f524:	f012 fd8b 	bl	4203e <log_string_sync>
			return -ENODEV;
   2f528:	f06f 0312 	mvn.w	r3, #18
}
   2f52c:	4618      	mov	r0, r3
   2f52e:	b04b      	add	sp, #300	; 0x12c
   2f530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (elements_left_to_process == 0) {
   2f534:	f8b8 1000 	ldrh.w	r1, [r8]
			get_next_agps_element(&element, &buf[parsed_len]);
   2f538:	197b      	adds	r3, r7, r5
	if (elements_left_to_process == 0) {
   2f53a:	bb09      	cbnz	r1, 2f580 <nrf_cloud_agps_process+0xe0>
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2f53c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2f540:	5d7a      	ldrb	r2, [r7, r5]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2f542:	3901      	subs	r1, #1
		elements_left_to_process =
   2f544:	f8a8 1000 	strh.w	r1, [r8]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2f548:	2103      	movs	r1, #3
		element_type = element->type;
   2f54a:	f889 2000 	strb.w	r2, [r9]
	switch (element->type) {
   2f54e:	1e50      	subs	r0, r2, #1
   2f550:	2808      	cmp	r0, #8
   2f552:	d8d6      	bhi.n	2f502 <nrf_cloud_agps_process+0x62>
   2f554:	f20f 0c04 	addw	ip, pc, #4
   2f558:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   2f55c:	0002f58f 	.word	0x0002f58f
   2f560:	0002f5ab 	.word	0x0002f5ab
   2f564:	0002f5b1 	.word	0x0002f5b1
   2f568:	0002f5b7 	.word	0x0002f5b7
   2f56c:	0002f503 	.word	0x0002f503
   2f570:	0002f5c9 	.word	0x0002f5c9
   2f574:	0002f5bd 	.word	0x0002f5bd
   2f578:	0002f5c3 	.word	0x0002f5c3
   2f57c:	0002f5c9 	.word	0x0002f5c9
		elements_left_to_process -= 1;
   2f580:	3901      	subs	r1, #1
   2f582:	f8a8 1000 	strh.w	r1, [r8]
		element->type = element_type;
   2f586:	f899 2000 	ldrb.w	r2, [r9]
	size_t len = 0;
   2f58a:	2100      	movs	r1, #0
   2f58c:	e7df      	b.n	2f54e <nrf_cloud_agps_process+0xae>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2f58e:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_utc);
   2f590:	310e      	adds	r1, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2f592:	2a06      	cmp	r2, #6
		parsed_len += element_size;
   2f594:	440d      	add	r5, r1
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2f596:	d11a      	bne.n	2f5ce <nrf_cloud_agps_process+0x12e>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2f598:	781a      	ldrb	r2, [r3, #0]
   2f59a:	a94a      	add	r1, sp, #296	; 0x128
   2f59c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2f5a0:	681b      	ldr	r3, [r3, #0]
   2f5a2:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
   2f5a6:	6013      	str	r3, [r2, #0]
			continue;
   2f5a8:	e7a9      	b.n	2f4fe <nrf_cloud_agps_process+0x5e>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2f5aa:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2f5ac:	313e      	adds	r1, #62	; 0x3e
		break;
   2f5ae:	e7f0      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2f5b0:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_almanac);
   2f5b2:	311f      	adds	r1, #31
		break;
   2f5b4:	e7ed      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2f5b6:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2f5b8:	3108      	adds	r1, #8
		break;
   2f5ba:	e7ea      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2f5bc:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2f5be:	3110      	adds	r1, #16
		break;
   2f5c0:	e7e7      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2f5c2:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_location);
   2f5c4:	310f      	adds	r1, #15
		break;
   2f5c6:	e7e4      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2f5c8:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_integrity);
   2f5ca:	3104      	adds	r1, #4
		break;
   2f5cc:	e7e1      	b.n	2f592 <nrf_cloud_agps_process+0xf2>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2f5ce:	2a07      	cmp	r2, #7
   2f5d0:	d120      	bne.n	2f614 <nrf_cloud_agps_process+0x174>
			memcpy(&sys_time, element.time_and_tow,
   2f5d2:	6818      	ldr	r0, [r3, #0]
   2f5d4:	6859      	ldr	r1, [r3, #4]
   2f5d6:	aa03      	add	r2, sp, #12
   2f5d8:	c203      	stmia	r2!, {r0, r1}
   2f5da:	6898      	ldr	r0, [r3, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2f5dc:	7859      	ldrb	r1, [r3, #1]
			memcpy(&sys_time, element.time_and_tow,
   2f5de:	6010      	str	r0, [r2, #0]
	dst->date_day		= src->time_and_tow->date_day;
   2f5e0:	781a      	ldrb	r2, [r3, #0]
   2f5e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f5e6:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2f5ea:	f8d3 2002 	ldr.w	r2, [r3, #2]
   2f5ee:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2f5f0:	79d9      	ldrb	r1, [r3, #7]
   2f5f2:	799a      	ldrb	r2, [r3, #6]
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2f5f4:	9029      	str	r0, [sp, #164]	; 0xa4
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2f5f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f5fa:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2f5fe:	4601      	mov	r1, r0
	if (src->time_and_tow->sv_mask == 0U) {
   2f600:	2800      	cmp	r0, #0
   2f602:	f040 8136 	bne.w	2f872 <nrf_cloud_agps_process+0x3d2>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2f606:	2280      	movs	r2, #128	; 0x80
   2f608:	a82a      	add	r0, sp, #168	; 0xa8
   2f60a:	f015 fe2d 	bl	45268 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2f60e:	2206      	movs	r2, #6
   2f610:	2190      	movs	r1, #144	; 0x90
   2f612:	e0a5      	b.n	2f760 <nrf_cloud_agps_process+0x2c0>
	switch (agps_data->type) {
   2f614:	2808      	cmp	r0, #8
   2f616:	f200 8163 	bhi.w	2f8e0 <nrf_cloud_agps_process+0x440>
   2f61a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2f61e:	0009      	.short	0x0009
   2f620:	00d30022 	.word	0x00d30022
   2f624:	0161010f 	.word	0x0161010f
   2f628:	01610161 	.word	0x01610161
   2f62c:	015d013f 	.word	0x015d013f
	dst->a1		= src->utc->a1;
   2f630:	681a      	ldr	r2, [r3, #0]
   2f632:	9226      	str	r2, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   2f634:	685a      	ldr	r2, [r3, #4]
   2f636:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   2f638:	7a1a      	ldrb	r2, [r3, #8]
   2f63a:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   2f63e:	7a5a      	ldrb	r2, [r3, #9]
   2f640:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
	dst->delta_tls	= src->utc->delta_tls;
   2f644:	7a9a      	ldrb	r2, [r3, #10]
   2f646:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->wn_lsf	= src->utc->wn_lsf;
   2f64a:	7ada      	ldrb	r2, [r3, #11]
   2f64c:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   2f650:	7b1a      	ldrb	r2, [r3, #12]
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2f652:	7b5b      	ldrb	r3, [r3, #13]
	dst->dn		= src->utc->dn;
   2f654:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
		return send_to_modem(&utc, sizeof(utc),
   2f658:	2201      	movs	r2, #1
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2f65a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		return send_to_modem(&location, sizeof(location),
   2f65e:	2110      	movs	r1, #16
   2f660:	e07e      	b.n	2f760 <nrf_cloud_agps_process+0x2c0>
	dst->sv_id	= src->ephemeris->sv_id;
   2f662:	781a      	ldrb	r2, [r3, #0]
   2f664:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   2f668:	785a      	ldrb	r2, [r3, #1]
   2f66a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   2f66e:	78d9      	ldrb	r1, [r3, #3]
   2f670:	789a      	ldrb	r2, [r3, #2]
   2f672:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f676:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   2f67a:	7959      	ldrb	r1, [r3, #5]
   2f67c:	791a      	ldrb	r2, [r3, #4]
   2f67e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f682:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   2f686:	799a      	ldrb	r2, [r3, #6]
   2f688:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   2f68c:	7a19      	ldrb	r1, [r3, #8]
   2f68e:	79da      	ldrb	r2, [r3, #7]
   2f690:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f694:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   2f698:	f8d3 2009 	ldr.w	r2, [r3, #9]
   2f69c:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   2f69e:	7b5a      	ldrb	r2, [r3, #13]
   2f6a0:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   2f6a4:	7b9a      	ldrb	r2, [r3, #14]
   2f6a6:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   2f6aa:	7bda      	ldrb	r2, [r3, #15]
   2f6ac:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   2f6b0:	7c59      	ldrb	r1, [r3, #17]
   2f6b2:	7c1a      	ldrb	r2, [r3, #16]
   2f6b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f6b8:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   2f6bc:	f8d3 2012 	ldr.w	r2, [r3, #18]
   2f6c0:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   2f6c2:	7dd9      	ldrb	r1, [r3, #23]
   2f6c4:	7d9a      	ldrb	r2, [r3, #22]
   2f6c6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f6ca:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   2f6ce:	699a      	ldr	r2, [r3, #24]
   2f6d0:	922e      	str	r2, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   2f6d2:	69da      	ldr	r2, [r3, #28]
   2f6d4:	922f      	str	r2, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   2f6d6:	6a1a      	ldr	r2, [r3, #32]
   2f6d8:	9230      	str	r2, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   2f6da:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   2f6de:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2f6e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f6e6:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2f6ea:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   2f6ee:	9232      	str	r2, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   2f6f0:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
   2f6f4:	9233      	str	r2, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   2f6f6:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
   2f6fa:	9234      	str	r2, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   2f6fc:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
   2f700:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   2f704:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f708:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   2f70c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   2f710:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   2f714:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f718:	f8ad 20d6 	strh.w	r2, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   2f71c:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
   2f720:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   2f724:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f728:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   2f72c:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   2f730:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2f734:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f738:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   2f73c:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
   2f740:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   2f744:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f748:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   2f74c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   2f750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2f754:	2148      	movs	r1, #72	; 0x48
	dst->cuc	= src->ephemeris->cuc;
   2f756:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2f75a:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2f75c:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&location, sizeof(location),
   2f760:	a826      	add	r0, sp, #152	; 0x98
		return send_to_modem(agps_data->integrity,
   2f762:	f7ff fd27 	bl	2f1b4 <send_to_modem>
   2f766:	4603      	mov	r3, r0
		if (err) {
   2f768:	2800      	cmp	r0, #0
   2f76a:	f43f aec8 	beq.w	2f4fe <nrf_cloud_agps_process+0x5e>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2f76e:	2201      	movs	r2, #1
   2f770:	f04f 0000 	mov.w	r0, #0
   2f774:	f362 0007 	bfi	r0, r2, #0, #8
   2f778:	f364 108f 	bfi	r0, r4, #6, #10
   2f77c:	461a      	mov	r2, r3
   2f77e:	490d      	ldr	r1, [pc, #52]	; (2f7b4 <nrf_cloud_agps_process+0x314>)
   2f780:	9301      	str	r3, [sp, #4]
   2f782:	f012 fc5c 	bl	4203e <log_string_sync>
			return err;
   2f786:	9b01      	ldr	r3, [sp, #4]
   2f788:	e6d0      	b.n	2f52c <nrf_cloud_agps_process+0x8c>
   2f78a:	bf00      	nop
   2f78c:	0004ca88 	.word	0x0004ca88
   2f790:	0004cac6 	.word	0x0004cac6
   2f794:	0004825b 	.word	0x0004825b
   2f798:	0004cad5 	.word	0x0004cad5
   2f79c:	00046950 	.word	0x00046950
   2f7a0:	00046878 	.word	0x00046878
   2f7a4:	200254a8 	.word	0x200254a8
   2f7a8:	20020744 	.word	0x20020744
   2f7ac:	00048ad7 	.word	0x00048ad7
   2f7b0:	0004caf7 	.word	0x0004caf7
   2f7b4:	0004cb3f 	.word	0x0004cb3f
   2f7b8:	2002a38e 	.word	0x2002a38e
   2f7bc:	2002cb08 	.word	0x2002cb08
   2f7c0:	0004cb24 	.word	0x0004cb24
	dst->sv_id	= src->almanac->sv_id;
   2f7c4:	781a      	ldrb	r2, [r3, #0]
   2f7c6:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->wn		= src->almanac->wn;
   2f7ca:	785a      	ldrb	r2, [r3, #1]
   2f7cc:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   2f7d0:	789a      	ldrb	r2, [r3, #2]
   2f7d2:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   2f7d6:	78da      	ldrb	r2, [r3, #3]
   2f7d8:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   2f7dc:	7959      	ldrb	r1, [r3, #5]
   2f7de:	791a      	ldrb	r2, [r3, #4]
   2f7e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f7e4:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   2f7e8:	79d9      	ldrb	r1, [r3, #7]
   2f7ea:	799a      	ldrb	r2, [r3, #6]
   2f7ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f7f0:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   2f7f4:	7a59      	ldrb	r1, [r3, #9]
   2f7f6:	7a1a      	ldrb	r2, [r3, #8]
   2f7f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f7fc:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   2f800:	7a9a      	ldrb	r2, [r3, #10]
   2f802:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   2f806:	f8d3 200b 	ldr.w	r2, [r3, #11]
   2f80a:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   2f80c:	f8d3 200f 	ldr.w	r2, [r3, #15]
   2f810:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   2f812:	f8d3 2013 	ldr.w	r2, [r3, #19]
   2f816:	922b      	str	r2, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   2f818:	f8d3 2017 	ldr.w	r2, [r3, #23]
   2f81c:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   2f81e:	7f19      	ldrb	r1, [r3, #28]
   2f820:	7eda      	ldrb	r2, [r3, #27]
   2f822:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f826:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   2f82a:	7f5a      	ldrb	r2, [r3, #29]
   2f82c:	7f9b      	ldrb	r3, [r3, #30]
		return send_to_modem(&almanac, sizeof(almanac),
   2f82e:	2120      	movs	r1, #32
	dst->af1	= src->almanac->af1;
   2f830:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2f834:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   2f838:	2203      	movs	r2, #3
   2f83a:	e791      	b.n	2f760 <nrf_cloud_agps_process+0x2c0>
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f83c:	781a      	ldrb	r2, [r3, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f83e:	2108      	movs	r1, #8
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f840:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2f844:	785a      	ldrb	r2, [r3, #1]
   2f846:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2f84a:	789a      	ldrb	r2, [r3, #2]
   2f84c:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2f850:	78da      	ldrb	r2, [r3, #3]
   2f852:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2f856:	791a      	ldrb	r2, [r3, #4]
   2f858:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2f85c:	795a      	ldrb	r2, [r3, #5]
   2f85e:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f862:	799a      	ldrb	r2, [r3, #6]
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f864:	79db      	ldrb	r3, [r3, #7]
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f866:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f86a:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f86e:	2204      	movs	r2, #4
   2f870:	e776      	b.n	2f760 <nrf_cloud_agps_process+0x2c0>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f872:	2200      	movs	r2, #0
   2f874:	a926      	add	r1, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2f876:	f103 0c0f 	add.w	ip, r3, #15
   2f87a:	f81c 0022 	ldrb.w	r0, [ip, r2, lsl #2]
   2f87e:	3104      	adds	r1, #4
   2f880:	7388      	strb	r0, [r1, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f882:	1c90      	adds	r0, r2, #2
   2f884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f888:	f890 e005 	ldrb.w	lr, [r0, #5]
   2f88c:	7980      	ldrb	r0, [r0, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f88e:	3201      	adds	r2, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f890:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f894:	2a20      	cmp	r2, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f896:	8188      	strh	r0, [r1, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f898:	d1ef      	bne.n	2f87a <nrf_cloud_agps_process+0x3da>
   2f89a:	e6b8      	b.n	2f60e <nrf_cloud_agps_process+0x16e>
		nrf_gnss_agps_data_location_t location = {0};
   2f89c:	2200      	movs	r2, #0
   2f89e:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
	dst->latitude		= src->location->latitude;
   2f8a2:	681a      	ldr	r2, [r3, #0]
   2f8a4:	9226      	str	r2, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   2f8a6:	685a      	ldr	r2, [r3, #4]
   2f8a8:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   2f8aa:	7a1a      	ldrb	r2, [r3, #8]
   2f8ac:	7a59      	ldrb	r1, [r3, #9]
   2f8ae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f8b2:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   2f8b6:	7a9a      	ldrb	r2, [r3, #10]
   2f8b8:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   2f8bc:	7ada      	ldrb	r2, [r3, #11]
   2f8be:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   2f8c2:	7b1a      	ldrb	r2, [r3, #12]
   2f8c4:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   2f8c8:	7b5a      	ldrb	r2, [r3, #13]
	dst->confidence		= src->location->confidence;
   2f8ca:	7b9b      	ldrb	r3, [r3, #14]
	dst->unc_altitude	= src->location->unc_altitude;
   2f8cc:	f88d 20a5 	strb.w	r2, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   2f8d0:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		return send_to_modem(&location, sizeof(location),
   2f8d4:	2207      	movs	r2, #7
   2f8d6:	e6c2      	b.n	2f65e <nrf_cloud_agps_process+0x1be>
		return send_to_modem(agps_data->integrity,
   2f8d8:	2208      	movs	r2, #8
   2f8da:	2104      	movs	r1, #4
   2f8dc:	4618      	mov	r0, r3
   2f8de:	e740      	b.n	2f762 <nrf_cloud_agps_process+0x2c2>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2f8e0:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2f8e4:	f043 0302 	orr.w	r3, r3, #2
   2f8e8:	f363 0607 	bfi	r6, r3, #0, #8
   2f8ec:	f364 168f 	bfi	r6, r4, #6, #10
   2f8f0:	4659      	mov	r1, fp
   2f8f2:	4630      	mov	r0, r6
   2f8f4:	f012 fba3 	bl	4203e <log_string_sync>
		if (err) {
   2f8f8:	e601      	b.n	2f4fe <nrf_cloud_agps_process+0x5e>
   2f8fa:	bf00      	nop

0002f8fc <agps_print>:
}

void agps_print(nrf_gnss_agps_data_type_t type, void *data)
{

	switch (type) {
   2f8fc:	3801      	subs	r0, #1
{
   2f8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f902:	460c      	mov	r4, r1
	switch (type) {
   2f904:	2807      	cmp	r0, #7
   2f906:	f200 816b 	bhi.w	2fbe0 <agps_print+0x2e4>
   2f90a:	e8df f010 	tbh	[pc, r0, lsl #1]
   2f90e:	0008      	.short	0x0008
   2f910:	00a50030 	.word	0x00a50030
   2f914:	010d00e3 	.word	0x010d00e3
   2f918:	01400112 	.word	0x01400112
   2f91c:	0163      	.short	0x0163
	printk("utc:\n");
   2f91e:	48b1      	ldr	r0, [pc, #708]	; (2fbe4 <agps_print+0x2e8>)
   2f920:	f012 f962 	bl	41be8 <printk>
	printk("\ta1: %d\n", data->a1);
   2f924:	6821      	ldr	r1, [r4, #0]
   2f926:	48b0      	ldr	r0, [pc, #704]	; (2fbe8 <agps_print+0x2ec>)
   2f928:	f012 f95e 	bl	41be8 <printk>
	printk("\ta0: %d\n", data->a0);
   2f92c:	6861      	ldr	r1, [r4, #4]
   2f92e:	48af      	ldr	r0, [pc, #700]	; (2fbec <agps_print+0x2f0>)
   2f930:	f012 f95a 	bl	41be8 <printk>
	printk("\ttot: %d\n", data->tot);
   2f934:	7a21      	ldrb	r1, [r4, #8]
   2f936:	48ae      	ldr	r0, [pc, #696]	; (2fbf0 <agps_print+0x2f4>)
   2f938:	f012 f956 	bl	41be8 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2f93c:	7a61      	ldrb	r1, [r4, #9]
   2f93e:	48ad      	ldr	r0, [pc, #692]	; (2fbf4 <agps_print+0x2f8>)
   2f940:	f012 f952 	bl	41be8 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2f944:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2f948:	48ab      	ldr	r0, [pc, #684]	; (2fbf8 <agps_print+0x2fc>)
   2f94a:	f012 f94d 	bl	41be8 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2f94e:	7ae1      	ldrb	r1, [r4, #11]
   2f950:	48aa      	ldr	r0, [pc, #680]	; (2fbfc <agps_print+0x300>)
   2f952:	f012 f949 	bl	41be8 <printk>
	printk("\tdn: %d\n", data->dn);
   2f956:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2f95a:	48a9      	ldr	r0, [pc, #676]	; (2fc00 <agps_print+0x304>)
   2f95c:	f012 f944 	bl	41be8 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2f960:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2f964:	48a7      	ldr	r0, [pc, #668]	; (2fc04 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2f966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2f96a:	f012 b93d 	b.w	41be8 <printk>
	printk("ephemeris:\n");
   2f96e:	48a6      	ldr	r0, [pc, #664]	; (2fc08 <agps_print+0x30c>)
   2f970:	f012 f93a 	bl	41be8 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2f974:	7821      	ldrb	r1, [r4, #0]
   2f976:	48a5      	ldr	r0, [pc, #660]	; (2fc0c <agps_print+0x310>)
   2f978:	f012 f936 	bl	41be8 <printk>
	printk("\thealth: %d\n", data->health);
   2f97c:	7861      	ldrb	r1, [r4, #1]
   2f97e:	48a4      	ldr	r0, [pc, #656]	; (2fc10 <agps_print+0x314>)
   2f980:	f012 f932 	bl	41be8 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2f984:	8861      	ldrh	r1, [r4, #2]
   2f986:	48a3      	ldr	r0, [pc, #652]	; (2fc14 <agps_print+0x318>)
   2f988:	f012 f92e 	bl	41be8 <printk>
	printk("\ttoc: %d\n", data->toc);
   2f98c:	88a1      	ldrh	r1, [r4, #4]
   2f98e:	48a2      	ldr	r0, [pc, #648]	; (2fc18 <agps_print+0x31c>)
   2f990:	f012 f92a 	bl	41be8 <printk>
	printk("\taf2: %d\n", data->af2);
   2f994:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2f998:	48a0      	ldr	r0, [pc, #640]	; (2fc1c <agps_print+0x320>)
   2f99a:	f012 f925 	bl	41be8 <printk>
	printk("\taf1: %d\n", data->af1);
   2f99e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f9a2:	489f      	ldr	r0, [pc, #636]	; (2fc20 <agps_print+0x324>)
   2f9a4:	f012 f920 	bl	41be8 <printk>
	printk("\taf0: %d\n", data->af0);
   2f9a8:	68e1      	ldr	r1, [r4, #12]
   2f9aa:	489e      	ldr	r0, [pc, #632]	; (2fc24 <agps_print+0x328>)
   2f9ac:	f012 f91c 	bl	41be8 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2f9b0:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2f9b4:	489c      	ldr	r0, [pc, #624]	; (2fc28 <agps_print+0x32c>)
   2f9b6:	f012 f917 	bl	41be8 <printk>
	printk("\tura: %d\n", data->ura);
   2f9ba:	7c61      	ldrb	r1, [r4, #17]
   2f9bc:	489b      	ldr	r0, [pc, #620]	; (2fc2c <agps_print+0x330>)
   2f9be:	f012 f913 	bl	41be8 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2f9c2:	7ca1      	ldrb	r1, [r4, #18]
   2f9c4:	489a      	ldr	r0, [pc, #616]	; (2fc30 <agps_print+0x334>)
   2f9c6:	f012 f90f 	bl	41be8 <printk>
	printk("\ttoe: %d\n", data->toe);
   2f9ca:	8aa1      	ldrh	r1, [r4, #20]
   2f9cc:	4899      	ldr	r0, [pc, #612]	; (2fc34 <agps_print+0x338>)
   2f9ce:	f012 f90b 	bl	41be8 <printk>
	printk("\tw: %d\n", data->w);
   2f9d2:	69a1      	ldr	r1, [r4, #24]
   2f9d4:	4898      	ldr	r0, [pc, #608]	; (2fc38 <agps_print+0x33c>)
   2f9d6:	f012 f907 	bl	41be8 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2f9da:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2f9de:	4897      	ldr	r0, [pc, #604]	; (2fc3c <agps_print+0x340>)
   2f9e0:	f012 f902 	bl	41be8 <printk>
	printk("\tm0: %d\n", data->m0);
   2f9e4:	6a21      	ldr	r1, [r4, #32]
   2f9e6:	4896      	ldr	r0, [pc, #600]	; (2fc40 <agps_print+0x344>)
   2f9e8:	f012 f8fe 	bl	41be8 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2f9ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2f9ee:	4895      	ldr	r0, [pc, #596]	; (2fc44 <agps_print+0x348>)
   2f9f0:	f012 f8fa 	bl	41be8 <printk>
	printk("\te: %d\n", data->e);
   2f9f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2f9f6:	4894      	ldr	r0, [pc, #592]	; (2fc48 <agps_print+0x34c>)
   2f9f8:	f012 f8f6 	bl	41be8 <printk>
	printk("\tidot: %d\n", data->idot);
   2f9fc:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2fa00:	4892      	ldr	r0, [pc, #584]	; (2fc4c <agps_print+0x350>)
   2fa02:	f012 f8f1 	bl	41be8 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2fa06:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2fa08:	4891      	ldr	r0, [pc, #580]	; (2fc50 <agps_print+0x354>)
   2fa0a:	f012 f8ed 	bl	41be8 <printk>
	printk("\ti0: %d\n", data->i0);
   2fa0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2fa10:	4890      	ldr	r0, [pc, #576]	; (2fc54 <agps_print+0x358>)
   2fa12:	f012 f8e9 	bl	41be8 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2fa16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2fa18:	488f      	ldr	r0, [pc, #572]	; (2fc58 <agps_print+0x35c>)
   2fa1a:	f012 f8e5 	bl	41be8 <printk>
	printk("\tcrs: %d\n", data->crs);
   2fa1e:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2fa22:	488e      	ldr	r0, [pc, #568]	; (2fc5c <agps_print+0x360>)
   2fa24:	f012 f8e0 	bl	41be8 <printk>
	printk("\tcis: %d\n", data->cis);
   2fa28:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2fa2c:	488c      	ldr	r0, [pc, #560]	; (2fc60 <agps_print+0x364>)
   2fa2e:	f012 f8db 	bl	41be8 <printk>
	printk("\tcus: %d\n", data->cus);
   2fa32:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2fa36:	488b      	ldr	r0, [pc, #556]	; (2fc64 <agps_print+0x368>)
   2fa38:	f012 f8d6 	bl	41be8 <printk>
	printk("\tcrc: %d\n", data->crc);
   2fa3c:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2fa40:	4889      	ldr	r0, [pc, #548]	; (2fc68 <agps_print+0x36c>)
   2fa42:	f012 f8d1 	bl	41be8 <printk>
	printk("\tcic: %d\n", data->cic);
   2fa46:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2fa4a:	4888      	ldr	r0, [pc, #544]	; (2fc6c <agps_print+0x370>)
   2fa4c:	f012 f8cc 	bl	41be8 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2fa50:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2fa54:	4886      	ldr	r0, [pc, #536]	; (2fc70 <agps_print+0x374>)
   2fa56:	e786      	b.n	2f966 <agps_print+0x6a>
	printk("almanac\n");
   2fa58:	4886      	ldr	r0, [pc, #536]	; (2fc74 <agps_print+0x378>)
   2fa5a:	f012 f8c5 	bl	41be8 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2fa5e:	7821      	ldrb	r1, [r4, #0]
   2fa60:	486a      	ldr	r0, [pc, #424]	; (2fc0c <agps_print+0x310>)
   2fa62:	f012 f8c1 	bl	41be8 <printk>
	printk("\twn: %d\n", data->wn);
   2fa66:	7861      	ldrb	r1, [r4, #1]
   2fa68:	4883      	ldr	r0, [pc, #524]	; (2fc78 <agps_print+0x37c>)
   2fa6a:	f012 f8bd 	bl	41be8 <printk>
	printk("\ttoa: %d\n", data->toa);
   2fa6e:	78a1      	ldrb	r1, [r4, #2]
   2fa70:	4882      	ldr	r0, [pc, #520]	; (2fc7c <agps_print+0x380>)
   2fa72:	f012 f8b9 	bl	41be8 <printk>
	printk("\tioda: %d\n", data->ioda);
   2fa76:	78e1      	ldrb	r1, [r4, #3]
   2fa78:	4881      	ldr	r0, [pc, #516]	; (2fc80 <agps_print+0x384>)
   2fa7a:	f012 f8b5 	bl	41be8 <printk>
	printk("\te: %d\n", data->e);
   2fa7e:	88a1      	ldrh	r1, [r4, #4]
   2fa80:	4871      	ldr	r0, [pc, #452]	; (2fc48 <agps_print+0x34c>)
   2fa82:	f012 f8b1 	bl	41be8 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2fa86:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2fa8a:	487e      	ldr	r0, [pc, #504]	; (2fc84 <agps_print+0x388>)
   2fa8c:	f012 f8ac 	bl	41be8 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2fa90:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2fa94:	486b      	ldr	r0, [pc, #428]	; (2fc44 <agps_print+0x348>)
   2fa96:	f012 f8a7 	bl	41be8 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2fa9a:	7aa1      	ldrb	r1, [r4, #10]
   2fa9c:	487a      	ldr	r0, [pc, #488]	; (2fc88 <agps_print+0x38c>)
   2fa9e:	f012 f8a3 	bl	41be8 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2faa2:	68e1      	ldr	r1, [r4, #12]
   2faa4:	486a      	ldr	r0, [pc, #424]	; (2fc50 <agps_print+0x354>)
   2faa6:	f012 f89f 	bl	41be8 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2faaa:	6921      	ldr	r1, [r4, #16]
   2faac:	486a      	ldr	r0, [pc, #424]	; (2fc58 <agps_print+0x35c>)
   2faae:	f012 f89b 	bl	41be8 <printk>
	printk("\tw: %d\n", data->w);
   2fab2:	6961      	ldr	r1, [r4, #20]
   2fab4:	4860      	ldr	r0, [pc, #384]	; (2fc38 <agps_print+0x33c>)
   2fab6:	f012 f897 	bl	41be8 <printk>
	printk("\tm0: %d\n", data->m0);
   2faba:	69a1      	ldr	r1, [r4, #24]
   2fabc:	4860      	ldr	r0, [pc, #384]	; (2fc40 <agps_print+0x344>)
   2fabe:	f012 f893 	bl	41be8 <printk>
	printk("\taf0: %d\n", data->af0);
   2fac2:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2fac6:	4857      	ldr	r0, [pc, #348]	; (2fc24 <agps_print+0x328>)
   2fac8:	f012 f88e 	bl	41be8 <printk>
	printk("\taf1: %d\n", data->af1);
   2facc:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2fad0:	4853      	ldr	r0, [pc, #332]	; (2fc20 <agps_print+0x324>)
   2fad2:	e748      	b.n	2f966 <agps_print+0x6a>
	printk("klobuchar\n");
   2fad4:	486d      	ldr	r0, [pc, #436]	; (2fc8c <agps_print+0x390>)
   2fad6:	f012 f887 	bl	41be8 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2fada:	f994 1000 	ldrsb.w	r1, [r4]
   2fade:	486c      	ldr	r0, [pc, #432]	; (2fc90 <agps_print+0x394>)
   2fae0:	f012 f882 	bl	41be8 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2fae4:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2fae8:	486a      	ldr	r0, [pc, #424]	; (2fc94 <agps_print+0x398>)
   2faea:	f012 f87d 	bl	41be8 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2faee:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2faf2:	4869      	ldr	r0, [pc, #420]	; (2fc98 <agps_print+0x39c>)
   2faf4:	f012 f878 	bl	41be8 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2faf8:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2fafc:	4867      	ldr	r0, [pc, #412]	; (2fc9c <agps_print+0x3a0>)
   2fafe:	f012 f873 	bl	41be8 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2fb02:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2fb06:	4866      	ldr	r0, [pc, #408]	; (2fca0 <agps_print+0x3a4>)
   2fb08:	f012 f86e 	bl	41be8 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2fb0c:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2fb10:	4864      	ldr	r0, [pc, #400]	; (2fca4 <agps_print+0x3a8>)
   2fb12:	f012 f869 	bl	41be8 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2fb16:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2fb1a:	4863      	ldr	r0, [pc, #396]	; (2fca8 <agps_print+0x3ac>)
   2fb1c:	f012 f864 	bl	41be8 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2fb20:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2fb24:	4861      	ldr	r0, [pc, #388]	; (2fcac <agps_print+0x3b0>)
   2fb26:	e71e      	b.n	2f966 <agps_print+0x6a>
		printk("nequick unhandled\n");
   2fb28:	4861      	ldr	r0, [pc, #388]	; (2fcb0 <agps_print+0x3b4>)
}
   2fb2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2fb2e:	f012 b85b 	b.w	41be8 <printk>
	printk("clock_and_tows\n");
   2fb32:	4860      	ldr	r0, [pc, #384]	; (2fcb4 <agps_print+0x3b8>)
   2fb34:	f012 f858 	bl	41be8 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2fb38:	8821      	ldrh	r1, [r4, #0]
   2fb3a:	485f      	ldr	r0, [pc, #380]	; (2fcb8 <agps_print+0x3bc>)
   2fb3c:	f012 f854 	bl	41be8 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2fb40:	6861      	ldr	r1, [r4, #4]
   2fb42:	485e      	ldr	r0, [pc, #376]	; (2fcbc <agps_print+0x3c0>)
   2fb44:	f012 f850 	bl	41be8 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2fb48:	8921      	ldrh	r1, [r4, #8]
   2fb4a:	485d      	ldr	r0, [pc, #372]	; (2fcc0 <agps_print+0x3c4>)
   2fb4c:	f012 f84c 	bl	41be8 <printk>
	printk("\tsv_mask: %d\n", data->sv_mask);
   2fb50:	68e1      	ldr	r1, [r4, #12]
   2fb52:	485c      	ldr	r0, [pc, #368]	; (2fcc4 <agps_print+0x3c8>)
   2fb54:	f012 f848 	bl	41be8 <printk>
	printk("\tsv_tow\n");
   2fb58:	485b      	ldr	r0, [pc, #364]	; (2fcc8 <agps_print+0x3cc>)
   2fb5a:	f012 f845 	bl	41be8 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2fb5e:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2fb60:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2fd04 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2fb64:	4f59      	ldr	r7, [pc, #356]	; (2fccc <agps_print+0x3d0>)
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2fb66:	4e5a      	ldr	r6, [pc, #360]	; (2fcd0 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2fb68:	4629      	mov	r1, r5
   2fb6a:	4640      	mov	r0, r8
   2fb6c:	f012 f83c 	bl	41be8 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2fb70:	8a21      	ldrh	r1, [r4, #16]
   2fb72:	4638      	mov	r0, r7
   2fb74:	f012 f838 	bl	41be8 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2fb78:	3501      	adds	r5, #1
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2fb7a:	7ca1      	ldrb	r1, [r4, #18]
   2fb7c:	4630      	mov	r0, r6
   2fb7e:	f012 f833 	bl	41be8 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2fb82:	2d20      	cmp	r5, #32
   2fb84:	f104 0404 	add.w	r4, r4, #4
   2fb88:	d1ee      	bne.n	2fb68 <agps_print+0x26c>
}
   2fb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2fb8e:	4851      	ldr	r0, [pc, #324]	; (2fcd4 <agps_print+0x3d8>)
   2fb90:	f012 f82a 	bl	41be8 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2fb94:	6821      	ldr	r1, [r4, #0]
   2fb96:	4850      	ldr	r0, [pc, #320]	; (2fcd8 <agps_print+0x3dc>)
   2fb98:	f012 f826 	bl	41be8 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2fb9c:	6861      	ldr	r1, [r4, #4]
   2fb9e:	484f      	ldr	r0, [pc, #316]	; (2fcdc <agps_print+0x3e0>)
   2fba0:	f012 f822 	bl	41be8 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2fba4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2fba8:	484d      	ldr	r0, [pc, #308]	; (2fce0 <agps_print+0x3e4>)
   2fbaa:	f012 f81d 	bl	41be8 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2fbae:	7aa1      	ldrb	r1, [r4, #10]
   2fbb0:	484c      	ldr	r0, [pc, #304]	; (2fce4 <agps_print+0x3e8>)
   2fbb2:	f012 f819 	bl	41be8 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2fbb6:	7ae1      	ldrb	r1, [r4, #11]
   2fbb8:	484b      	ldr	r0, [pc, #300]	; (2fce8 <agps_print+0x3ec>)
   2fbba:	f012 f815 	bl	41be8 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2fbbe:	7b21      	ldrb	r1, [r4, #12]
   2fbc0:	484a      	ldr	r0, [pc, #296]	; (2fcec <agps_print+0x3f0>)
   2fbc2:	f012 f811 	bl	41be8 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2fbc6:	7b61      	ldrb	r1, [r4, #13]
   2fbc8:	4849      	ldr	r0, [pc, #292]	; (2fcf0 <agps_print+0x3f4>)
   2fbca:	f012 f80d 	bl	41be8 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2fbce:	7ba1      	ldrb	r1, [r4, #14]
   2fbd0:	4848      	ldr	r0, [pc, #288]	; (2fcf4 <agps_print+0x3f8>)
   2fbd2:	e6c8      	b.n	2f966 <agps_print+0x6a>
	printk("integrity\n");
   2fbd4:	4848      	ldr	r0, [pc, #288]	; (2fcf8 <agps_print+0x3fc>)
   2fbd6:	f012 f807 	bl	41be8 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2fbda:	6821      	ldr	r1, [r4, #0]
   2fbdc:	4847      	ldr	r0, [pc, #284]	; (2fcfc <agps_print+0x400>)
   2fbde:	e6c2      	b.n	2f966 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2fbe0:	4847      	ldr	r0, [pc, #284]	; (2fd00 <agps_print+0x404>)
   2fbe2:	e7a2      	b.n	2fb2a <agps_print+0x22e>
   2fbe4:	0004cd25 	.word	0x0004cd25
   2fbe8:	0004cd2b 	.word	0x0004cd2b
   2fbec:	0004cd34 	.word	0x0004cd34
   2fbf0:	0004cd3d 	.word	0x0004cd3d
   2fbf4:	0004cd47 	.word	0x0004cd47
   2fbf8:	0004cd52 	.word	0x0004cd52
   2fbfc:	0004cd62 	.word	0x0004cd62
   2fc00:	0004cd6f 	.word	0x0004cd6f
   2fc04:	0004cd78 	.word	0x0004cd78
   2fc08:	0004cd89 	.word	0x0004cd89
   2fc0c:	0004cd95 	.word	0x0004cd95
   2fc10:	0004cda1 	.word	0x0004cda1
   2fc14:	0004cdae 	.word	0x0004cdae
   2fc18:	0004cdb9 	.word	0x0004cdb9
   2fc1c:	0004cdc3 	.word	0x0004cdc3
   2fc20:	0004cdcd 	.word	0x0004cdcd
   2fc24:	0004cdd7 	.word	0x0004cdd7
   2fc28:	0004cde1 	.word	0x0004cde1
   2fc2c:	0004cdeb 	.word	0x0004cdeb
   2fc30:	0004cdf5 	.word	0x0004cdf5
   2fc34:	0004ce03 	.word	0x0004ce03
   2fc38:	0004ce0d 	.word	0x0004ce0d
   2fc3c:	0004ce15 	.word	0x0004ce15
   2fc40:	0004ce23 	.word	0x0004ce23
   2fc44:	0004ce2c 	.word	0x0004ce2c
   2fc48:	0004ce3c 	.word	0x0004ce3c
   2fc4c:	0004ce44 	.word	0x0004ce44
   2fc50:	0004ce4f 	.word	0x0004ce4f
   2fc54:	0004ce5c 	.word	0x0004ce5c
   2fc58:	0004ce65 	.word	0x0004ce65
   2fc5c:	0004ce72 	.word	0x0004ce72
   2fc60:	0004ce7c 	.word	0x0004ce7c
   2fc64:	0004ce86 	.word	0x0004ce86
   2fc68:	0004ce90 	.word	0x0004ce90
   2fc6c:	0004ce9a 	.word	0x0004ce9a
   2fc70:	0004cea4 	.word	0x0004cea4
   2fc74:	0004ceae 	.word	0x0004ceae
   2fc78:	0004ceb7 	.word	0x0004ceb7
   2fc7c:	0004cec0 	.word	0x0004cec0
   2fc80:	0004ceca 	.word	0x0004ceca
   2fc84:	0004ced5 	.word	0x0004ced5
   2fc88:	0004cee3 	.word	0x0004cee3
   2fc8c:	0004cef3 	.word	0x0004cef3
   2fc90:	0004cefe 	.word	0x0004cefe
   2fc94:	0004cf0b 	.word	0x0004cf0b
   2fc98:	0004cf18 	.word	0x0004cf18
   2fc9c:	0004cf25 	.word	0x0004cf25
   2fca0:	0004cf32 	.word	0x0004cf32
   2fca4:	0004cf3e 	.word	0x0004cf3e
   2fca8:	0004cf4a 	.word	0x0004cf4a
   2fcac:	0004cf56 	.word	0x0004cf56
   2fcb0:	0004cf62 	.word	0x0004cf62
   2fcb4:	0004cf75 	.word	0x0004cf75
   2fcb8:	0004cf85 	.word	0x0004cf85
   2fcbc:	0004cf94 	.word	0x0004cf94
   2fcc0:	0004cfa6 	.word	0x0004cfa6
   2fcc4:	0004cfb9 	.word	0x0004cfb9
   2fcc8:	0004cfc7 	.word	0x0004cfc7
   2fccc:	0004cfde 	.word	0x0004cfde
   2fcd0:	0004cfea 	.word	0x0004cfea
   2fcd4:	0004950a 	.word	0x0004950a
   2fcd8:	0004cff8 	.word	0x0004cff8
   2fcdc:	0004d007 	.word	0x0004d007
   2fce0:	0004d017 	.word	0x0004d017
   2fce4:	0004d026 	.word	0x0004d026
   2fce8:	0004d03a 	.word	0x0004d03a
   2fcec:	0004d04e 	.word	0x0004d04e
   2fcf0:	0004d066 	.word	0x0004d066
   2fcf4:	0004d079 	.word	0x0004d079
   2fcf8:	0004d08a 	.word	0x0004d08a
   2fcfc:	0004d095 	.word	0x0004d095
   2fd00:	0004d0aa 	.word	0x0004d0aa
   2fd04:	0004cfd0 	.word	0x0004cfd0

0002fd08 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2fd08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2fd0c:	4699      	mov	r9, r3
   2fd0e:	4c29      	ldr	r4, [pc, #164]	; (2fdb4 <fota_settings_set+0xac>)
   2fd10:	4b29      	ldr	r3, [pc, #164]	; (2fdb8 <fota_settings_set+0xb0>)
   2fd12:	460f      	mov	r7, r1
   2fd14:	1ae4      	subs	r4, r4, r3
   2fd16:	4690      	mov	r8, r2
   2fd18:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (!key) {
   2fd1c:	4606      	mov	r6, r0
   2fd1e:	b970      	cbnz	r0, 2fd3e <fota_settings_set+0x36>
		LOG_DBG("Key is NULL");
   2fd20:	2304      	movs	r3, #4
   2fd22:	f363 0007 	bfi	r0, r3, #0, #8
   2fd26:	f364 108f 	bfi	r0, r4, #6, #10
   2fd2a:	4a24      	ldr	r2, [pc, #144]	; (2fdbc <fota_settings_set+0xb4>)
   2fd2c:	4924      	ldr	r1, [pc, #144]	; (2fdc0 <fota_settings_set+0xb8>)
   2fd2e:	f012 f986 	bl	4203e <log_string_sync>
		return -EINVAL;
   2fd32:	f06f 0515 	mvn.w	r5, #21
				saved_job.validate);
			return 0;
		}
	}
	return -ENOTSUP;
}
   2fd36:	4628      	mov	r0, r5
   2fd38:	b003      	add	sp, #12
   2fd3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2fd3e:	2304      	movs	r3, #4
   2fd40:	f04f 0500 	mov.w	r5, #0
   2fd44:	f363 0507 	bfi	r5, r3, #0, #8
   2fd48:	f012 f98c 	bl	42064 <log_strdup>
   2fd4c:	f364 158f 	bfi	r5, r4, #6, #10
   2fd50:	4603      	mov	r3, r0
   2fd52:	4a1a      	ldr	r2, [pc, #104]	; (2fdbc <fota_settings_set+0xb4>)
   2fd54:	491b      	ldr	r1, [pc, #108]	; (2fdc4 <fota_settings_set+0xbc>)
   2fd56:	4628      	mov	r0, r5
   2fd58:	9700      	str	r7, [sp, #0]
   2fd5a:	f012 f970 	bl	4203e <log_string_sync>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2fd5e:	481a      	ldr	r0, [pc, #104]	; (2fdc8 <fota_settings_set+0xc0>)
   2fd60:	f7ed fa80 	bl	1d264 <strlen>
   2fd64:	4918      	ldr	r1, [pc, #96]	; (2fdc8 <fota_settings_set+0xc0>)
   2fd66:	4602      	mov	r2, r0
   2fd68:	4630      	mov	r0, r6
   2fd6a:	f015 fc56 	bl	4561a <strncmp>
   2fd6e:	4605      	mov	r5, r0
   2fd70:	b110      	cbz	r0, 2fd78 <fota_settings_set+0x70>
	return -ENOTSUP;
   2fd72:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2fd76:	e7de      	b.n	2fd36 <fota_settings_set+0x2e>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2fd78:	2f27      	cmp	r7, #39	; 0x27
   2fd7a:	d1fa      	bne.n	2fd72 <fota_settings_set+0x6a>
		if (read_cb(cb_arg, (void *)&saved_job, len_rd) == len_rd) {
   2fd7c:	4e13      	ldr	r6, [pc, #76]	; (2fdcc <fota_settings_set+0xc4>)
   2fd7e:	463a      	mov	r2, r7
   2fd80:	4631      	mov	r1, r6
   2fd82:	4648      	mov	r0, r9
   2fd84:	47c0      	blx	r8
   2fd86:	2827      	cmp	r0, #39	; 0x27
   2fd88:	d1f3      	bne.n	2fd72 <fota_settings_set+0x6a>
			LOG_DBG("Saved job: %s, type: %d, validate: %d",
   2fd8a:	2304      	movs	r3, #4
   2fd8c:	f04f 0700 	mov.w	r7, #0
   2fd90:	1cb0      	adds	r0, r6, #2
   2fd92:	f363 0707 	bfi	r7, r3, #0, #8
   2fd96:	f012 f965 	bl	42064 <log_strdup>
   2fd9a:	7833      	ldrb	r3, [r6, #0]
   2fd9c:	f364 178f 	bfi	r7, r4, #6, #10
   2fda0:	9301      	str	r3, [sp, #4]
   2fda2:	7873      	ldrb	r3, [r6, #1]
   2fda4:	4a05      	ldr	r2, [pc, #20]	; (2fdbc <fota_settings_set+0xb4>)
   2fda6:	9300      	str	r3, [sp, #0]
   2fda8:	4909      	ldr	r1, [pc, #36]	; (2fdd0 <fota_settings_set+0xc8>)
   2fdaa:	4603      	mov	r3, r0
   2fdac:	4638      	mov	r0, r7
   2fdae:	f012 f946 	bl	4203e <log_string_sync>
			return 0;
   2fdb2:	e7c0      	b.n	2fd36 <fota_settings_set+0x2e>
   2fdb4:	00046960 	.word	0x00046960
   2fdb8:	00046878 	.word	0x00046878
   2fdbc:	0004d0c2 	.word	0x0004d0c2
   2fdc0:	0004d19b 	.word	0x0004d19b
   2fdc4:	0004c987 	.word	0x0004c987
   2fdc8:	0004d37c 	.word	0x0004d37c
   2fdcc:	2002096e 	.word	0x2002096e
   2fdd0:	0004d1ab 	.word	0x0004d1ab

0002fdd4 <reset_topics>:
	}
	topic->size = 0;
}

static void reset_topics(void)
{
   2fdd4:	b508      	push	{r3, lr}
	reset_topic(&topic_rcv.topic);
   2fdd6:	4805      	ldr	r0, [pc, #20]	; (2fdec <reset_topics+0x18>)
   2fdd8:	f014 ff7f 	bl	44cda <reset_topic>
	reset_topic(&topic_update.topic);
   2fddc:	4804      	ldr	r0, [pc, #16]	; (2fdf0 <reset_topics+0x1c>)
   2fdde:	f014 ff7c 	bl	44cda <reset_topic>
	reset_topic(&topic_req.topic);
}
   2fde2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2fde6:	4803      	ldr	r0, [pc, #12]	; (2fdf4 <reset_topics+0x20>)
   2fde8:	f014 bf77 	b.w	44cda <reset_topic>
   2fdec:	20020748 	.word	0x20020748
   2fdf0:	20020760 	.word	0x20020760
   2fdf4:	20020754 	.word	0x20020754

0002fdf8 <publish>:
	memset(job,0,sizeof(*job));
	job->type = NRF_FOTA_TYPE__INVALID;
}

static int publish(const struct mqtt_publish_param * const pub)
{
   2fdf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(pub != NULL);

	int ret;
	LOG_DBG("Topic: %s",
   2fdfa:	2304      	movs	r3, #4
   2fdfc:	f04f 0600 	mov.w	r6, #0
   2fe00:	4c1c      	ldr	r4, [pc, #112]	; (2fe74 <publish+0x7c>)
   2fe02:	f363 0607 	bfi	r6, r3, #0, #8
   2fe06:	4b1c      	ldr	r3, [pc, #112]	; (2fe78 <publish+0x80>)
{
   2fe08:	4605      	mov	r5, r0
	LOG_DBG("Topic: %s",
   2fe0a:	6800      	ldr	r0, [r0, #0]
   2fe0c:	1ae4      	subs	r4, r4, r3
   2fe0e:	f012 f929 	bl	42064 <log_strdup>
   2fe12:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2fe16:	f364 168f 	bfi	r6, r4, #6, #10
   2fe1a:	4603      	mov	r3, r0
   2fe1c:	4a17      	ldr	r2, [pc, #92]	; (2fe7c <publish+0x84>)
   2fe1e:	4918      	ldr	r1, [pc, #96]	; (2fe80 <publish+0x88>)
   2fe20:	4630      	mov	r0, r6
   2fe22:	f012 f90c 	bl	4203e <log_string_sync>
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
   2fe26:	e9d5 0703 	ldrd	r0, r7, [r5, #12]
   2fe2a:	2304      	movs	r3, #4
   2fe2c:	f04f 0600 	mov.w	r6, #0
   2fe30:	f363 0607 	bfi	r6, r3, #0, #8
   2fe34:	f012 f916 	bl	42064 <log_strdup>
   2fe38:	f364 168f 	bfi	r6, r4, #6, #10
   2fe3c:	9000      	str	r0, [sp, #0]
   2fe3e:	463b      	mov	r3, r7
   2fe40:	4a0e      	ldr	r2, [pc, #56]	; (2fe7c <publish+0x84>)
   2fe42:	4910      	ldr	r1, [pc, #64]	; (2fe84 <publish+0x8c>)
   2fe44:	4630      	mov	r0, r6
   2fe46:	f012 f8fa 	bl	4203e <log_string_sync>
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2fe4a:	4b0f      	ldr	r3, [pc, #60]	; (2fe88 <publish+0x90>)
   2fe4c:	4629      	mov	r1, r5
   2fe4e:	6818      	ldr	r0, [r3, #0]
   2fe50:	f013 fba9 	bl	435a6 <mqtt_publish>
	if (ret) {
   2fe54:	4605      	mov	r5, r0
   2fe56:	b150      	cbz	r0, 2fe6e <publish+0x76>
		LOG_ERR("Publish failed: %d", ret);
   2fe58:	f04f 0000 	mov.w	r0, #0
   2fe5c:	2301      	movs	r3, #1
   2fe5e:	f363 0007 	bfi	r0, r3, #0, #8
   2fe62:	f364 108f 	bfi	r0, r4, #6, #10
   2fe66:	462a      	mov	r2, r5
   2fe68:	4908      	ldr	r1, [pc, #32]	; (2fe8c <publish+0x94>)
   2fe6a:	f012 f8e8 	bl	4203e <log_string_sync>
	}
	return ret;
}
   2fe6e:	4628      	mov	r0, r5
   2fe70:	b003      	add	sp, #12
   2fe72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fe74:	00046960 	.word	0x00046960
   2fe78:	00046878 	.word	0x00046878
   2fe7c:	0004d156 	.word	0x0004d156
   2fe80:	0004d457 	.word	0x0004d457
   2fe84:	0004d465 	.word	0x0004d465
   2fe88:	200254ac 	.word	0x200254ac
   2fe8c:	0004d480 	.word	0x0004d480

0002fe90 <send_job_update>:

	}
}

static int send_job_update(struct nrf_cloud_fota_job * const job)
{
   2fe90:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(job != NULL);
	__ASSERT_NO_MSG(client_mqtt != NULL);
   2fe92:	4b22      	ldr	r3, [pc, #136]	; (2ff1c <send_job_update+0x8c>)
{
   2fe94:	b0c8      	sub	sp, #288	; 0x120
	__ASSERT_NO_MSG(client_mqtt != NULL);
   2fe96:	681b      	ldr	r3, [r3, #0]
{
   2fe98:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(client_mqtt != NULL);
   2fe9a:	b95b      	cbnz	r3, 2feb4 <send_job_update+0x24>
   2fe9c:	4920      	ldr	r1, [pc, #128]	; (2ff20 <send_job_update+0x90>)
   2fe9e:	4821      	ldr	r0, [pc, #132]	; (2ff24 <send_job_update+0x94>)
   2fea0:	f240 23b6 	movw	r3, #694	; 0x2b6
   2fea4:	4a20      	ldr	r2, [pc, #128]	; (2ff28 <send_job_update+0x98>)
   2fea6:	f011 fe9f 	bl	41be8 <printk>
   2feaa:	f240 21b6 	movw	r1, #694	; 0x2b6
   2feae:	481e      	ldr	r0, [pc, #120]	; (2ff28 <send_job_update+0x98>)
   2feb0:	f012 f8b4 	bl	4201c <assert_post_action>

	int ret;
	char payload[UPDATE_PAYLOAD_SIZE];
	struct mqtt_publish_param param = {
   2feb4:	2300      	movs	r3, #0
   2feb6:	e9cd 3306 	strd	r3, r3, [sp, #24]
   2feba:	f44f 5309 	mov.w	r3, #8768	; 0x2240
   2febe:	ac02      	add	r4, sp, #8
   2fec0:	82a3      	strh	r3, [r4, #20]
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.payload.data = payload;
	param.message.topic = topic_update;
   2fec2:	4b1a      	ldr	r3, [pc, #104]	; (2ff2c <send_job_update+0x9c>)
	param.message.payload.data = payload;
   2fec4:	ae08      	add	r6, sp, #32
	param.message.topic = topic_update;
   2fec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2feca:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if (job->status == NRF_FOTA_DOWNLOADING) {
   2fece:	7a29      	ldrb	r1, [r5, #8]
	param.message.payload.data = payload;
   2fed0:	60e6      	str	r6, [r4, #12]
	if (job->status == NRF_FOTA_DOWNLOADING) {
   2fed2:	2907      	cmp	r1, #7
   2fed4:	68eb      	ldr	r3, [r5, #12]
   2fed6:	d110      	bne.n	2fefa <send_job_update+0x6a>
		ret = snprintf(payload, UPDATE_PAYLOAD_SIZE,
   2fed8:	6a2a      	ldr	r2, [r5, #32]
   2feda:	e9cd 1200 	strd	r1, r2, [sp]
   2fede:	4a14      	ldr	r2, [pc, #80]	; (2ff30 <send_job_update+0xa0>)
			 JOB_UPDATE_PROGRESS_TEMPLATE,
			 job->id, job->status, job->dl_progress);
	} else {
		ret = snprintf(payload, UPDATE_PAYLOAD_SIZE,
   2fee0:	21ff      	movs	r1, #255	; 0xff
   2fee2:	4630      	mov	r0, r6
   2fee4:	f010 f9aa 	bl	4023c <sniprintf>
			 JOB_UPDATE_MSG_TEMPLATE,
			 job->id, job->status, get_error_string(job->error));
	}

	if (ret <= 0 || ret >= UPDATE_PAYLOAD_SIZE) {
   2fee8:	1e43      	subs	r3, r0, #1
   2feea:	2bfd      	cmp	r3, #253	; 0xfd
   2feec:	d812      	bhi.n	2ff14 <send_job_update+0x84>
		return -E2BIG;
	}

	param.message.payload.len = ret;
   2feee:	6120      	str	r0, [r4, #16]

	return publish(&param);
   2fef0:	4620      	mov	r0, r4
   2fef2:	f7ff ff81 	bl	2fdf8 <publish>
}
   2fef6:	b048      	add	sp, #288	; 0x120
   2fef8:	bd70      	pop	{r4, r5, r6, pc}
	switch (err) {
   2fefa:	7f2a      	ldrb	r2, [r5, #28]
   2fefc:	3a01      	subs	r2, #1
   2fefe:	b2d2      	uxtb	r2, r2
   2ff00:	2a02      	cmp	r2, #2
   2ff02:	bf96      	itet	ls
   2ff04:	480b      	ldrls	r0, [pc, #44]	; (2ff34 <send_job_update+0xa4>)
		ret = snprintf(payload, UPDATE_PAYLOAD_SIZE,
   2ff06:	4a0c      	ldrhi	r2, [pc, #48]	; (2ff38 <send_job_update+0xa8>)
   2ff08:	f850 2022 	ldrls.w	r2, [r0, r2, lsl #2]
   2ff0c:	e9cd 1200 	strd	r1, r2, [sp]
   2ff10:	4a0a      	ldr	r2, [pc, #40]	; (2ff3c <send_job_update+0xac>)
   2ff12:	e7e5      	b.n	2fee0 <send_job_update+0x50>
		return -E2BIG;
   2ff14:	f06f 0006 	mvn.w	r0, #6
   2ff18:	e7ed      	b.n	2fef6 <send_job_update+0x66>
   2ff1a:	bf00      	nop
   2ff1c:	200254ac 	.word	0x200254ac
   2ff20:	0004d52d 	.word	0x0004d52d
   2ff24:	0004825b 	.word	0x0004825b
   2ff28:	0004d4ef 	.word	0x0004d4ef
   2ff2c:	20020760 	.word	0x20020760
   2ff30:	0004d548 	.word	0x0004d548
   2ff34:	00047354 	.word	0x00047354
   2ff38:	0004a254 	.word	0x0004a254
   2ff3c:	0004d555 	.word	0x0004d555

0002ff40 <save_validate_status>:
{
   2ff40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ff44:	4688      	mov	r8, r1
   2ff46:	b085      	sub	sp, #20
   2ff48:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2ff4a:	4606      	mov	r6, r0
   2ff4c:	b958      	cbnz	r0, 2ff66 <save_validate_status+0x26>
   2ff4e:	492a      	ldr	r1, [pc, #168]	; (2fff8 <save_validate_status+0xb8>)
   2ff50:	482a      	ldr	r0, [pc, #168]	; (2fffc <save_validate_status+0xbc>)
   2ff52:	f240 1395 	movw	r3, #405	; 0x195
   2ff56:	4a2a      	ldr	r2, [pc, #168]	; (30000 <CONFIG_FLASH_LOAD_SIZE>)
   2ff58:	f011 fe46 	bl	41be8 <printk>
   2ff5c:	f240 1195 	movw	r1, #405	; 0x195
   2ff60:	4827      	ldr	r0, [pc, #156]	; (30000 <CONFIG_FLASH_LOAD_SIZE>)
   2ff62:	f012 f85b 	bl	4201c <assert_post_action>
	LOG_DBG("%s() - %s, %d, %d",
   2ff66:	2304      	movs	r3, #4
   2ff68:	f04f 0500 	mov.w	r5, #0
   2ff6c:	4c25      	ldr	r4, [pc, #148]	; (30004 <CONFIG_FLASH_LOAD_SIZE+0x4>)
   2ff6e:	f363 0507 	bfi	r5, r3, #0, #8
   2ff72:	4b25      	ldr	r3, [pc, #148]	; (30008 <CONFIG_FLASH_LOAD_SIZE+0x8>)
   2ff74:	4825      	ldr	r0, [pc, #148]	; (3000c <CONFIG_FLASH_LOAD_SIZE+0xc>)
   2ff76:	1ae4      	subs	r4, r4, r3
   2ff78:	f012 f874 	bl	42064 <log_strdup>
   2ff7c:	4681      	mov	r9, r0
   2ff7e:	4630      	mov	r0, r6
   2ff80:	f012 f870 	bl	42064 <log_strdup>
   2ff84:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2ff88:	f364 158f 	bfi	r5, r4, #6, #10
   2ff8c:	9000      	str	r0, [sp, #0]
   2ff8e:	e9cd 8701 	strd	r8, r7, [sp, #4]
   2ff92:	4628      	mov	r0, r5
   2ff94:	464b      	mov	r3, r9
   2ff96:	4a1d      	ldr	r2, [pc, #116]	; (3000c <CONFIG_FLASH_LOAD_SIZE+0xc>)
   2ff98:	491d      	ldr	r1, [pc, #116]	; (30010 <CONFIG_FLASH_LOAD_SIZE+0x10>)
   2ff9a:	f012 f850 	bl	4203e <log_string_sync>
	if (validate == NRF_FOTA_VALIDATE_DONE) {
   2ff9e:	2f05      	cmp	r7, #5
   2ffa0:	481c      	ldr	r0, [pc, #112]	; (30014 <CONFIG_FLASH_LOAD_SIZE+0x14>)
   2ffa2:	d11d      	bne.n	2ffe0 <save_validate_status+0xa0>
		saved_job.type = NRF_FOTA_TYPE__INVALID;
   2ffa4:	2303      	movs	r3, #3
		saved_job.validate = NRF_FOTA_VALIDATE_NONE;
   2ffa6:	2100      	movs	r1, #0
		saved_job.type = NRF_FOTA_TYPE__INVALID;
   2ffa8:	7043      	strb	r3, [r0, #1]
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2ffaa:	2225      	movs	r2, #37	; 0x25
		saved_job.validate = NRF_FOTA_VALIDATE_NONE;
   2ffac:	f800 1b02 	strb.w	r1, [r0], #2
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2ffb0:	f015 f95a 	bl	45268 <memset>
	ret = settings_save_one(SETTINGS_FULL_FOTA_JOB, &saved_job,
   2ffb4:	2227      	movs	r2, #39	; 0x27
   2ffb6:	4917      	ldr	r1, [pc, #92]	; (30014 <CONFIG_FLASH_LOAD_SIZE+0x14>)
   2ffb8:	4817      	ldr	r0, [pc, #92]	; (30018 <CONFIG_FLASH_LOAD_SIZE+0x18>)
   2ffba:	f7f5 fc39 	bl	25830 <settings_save_one>
	if (ret) {
   2ffbe:	4605      	mov	r5, r0
   2ffc0:	b150      	cbz	r0, 2ffd8 <save_validate_status+0x98>
		LOG_ERR("settings_save_one failed: %d", ret);
   2ffc2:	f04f 0000 	mov.w	r0, #0
   2ffc6:	2301      	movs	r3, #1
   2ffc8:	f363 0007 	bfi	r0, r3, #0, #8
   2ffcc:	f364 108f 	bfi	r0, r4, #6, #10
   2ffd0:	462a      	mov	r2, r5
   2ffd2:	4912      	ldr	r1, [pc, #72]	; (3001c <CONFIG_FLASH_LOAD_SIZE+0x1c>)
   2ffd4:	f012 f833 	bl	4203e <log_string_sync>
}
   2ffd8:	4628      	mov	r0, r5
   2ffda:	b005      	add	sp, #20
   2ffdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		saved_job.type = job_type;
   2ffe0:	f880 8001 	strb.w	r8, [r0, #1]
		saved_job.validate = validate;
   2ffe4:	f800 7b02 	strb.w	r7, [r0], #2
		if (job_id != saved_job.id) {
   2ffe8:	4286      	cmp	r6, r0
   2ffea:	d0e3      	beq.n	2ffb4 <save_validate_status+0x74>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id));
   2ffec:	2225      	movs	r2, #37	; 0x25
   2ffee:	4631      	mov	r1, r6
   2fff0:	f015 fb25 	bl	4563e <strncpy>
   2fff4:	e7de      	b.n	2ffb4 <save_validate_status+0x74>
   2fff6:	bf00      	nop
   2fff8:	0004d493 	.word	0x0004d493
   2fffc:	0004825b 	.word	0x0004825b
   30000:	0004d4ef 	.word	0x0004d4ef
   30004:	00046960 	.word	0x00046960
   30008:	00046878 	.word	0x00046878
   3000c:	0004d119 	.word	0x0004d119
   30010:	0004d4a9 	.word	0x0004d4a9
   30014:	2002096e 	.word	0x2002096e
   30018:	0004d4bf 	.word	0x0004d4bf
   3001c:	0004d4d2 	.word	0x0004d4d2

00030020 <build_topic>:
{
   30020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   30024:	4690      	mov	r8, r2
	size_t size = endpoint->size + strlen(client_id) +
   30026:	684c      	ldr	r4, [r1, #4]
{
   30028:	460f      	mov	r7, r1
   3002a:	461e      	mov	r6, r3
   3002c:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   3002e:	f7ed f919 	bl	1d264 <strlen>
   30032:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   30034:	4640      	mov	r0, r8
   30036:	f7ed f915 	bl	1d264 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   3003a:	3401      	adds	r4, #1
   3003c:	4454      	add	r4, sl
   3003e:	4404      	add	r4, r0
	buf = nrf_cloud_calloc(size, 1);
   30040:	2101      	movs	r1, #1
   30042:	4620      	mov	r0, r4
   30044:	f015 f8ba 	bl	451bc <k_calloc>
	if (!buf) {
   30048:	4605      	mov	r5, r0
   3004a:	b938      	cbnz	r0, 3005c <build_topic+0x3c>
		reset_topic(topic_out);
   3004c:	4630      	mov	r0, r6
   3004e:	f014 fe44 	bl	44cda <reset_topic>
		return ret;
   30052:	f06f 000b 	mvn.w	r0, #11
}
   30056:	b002      	add	sp, #8
   30058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintf(buf, size, "%s%s%s",
   3005c:	e9cd 9800 	strd	r9, r8, [sp]
   30060:	683b      	ldr	r3, [r7, #0]
   30062:	4a09      	ldr	r2, [pc, #36]	; (30088 <build_topic+0x68>)
   30064:	4621      	mov	r1, r4
   30066:	f010 f8e9 	bl	4023c <sniprintf>
	if (ret <= 0 || ret >= size) {
   3006a:	2800      	cmp	r0, #0
   3006c:	dd01      	ble.n	30072 <build_topic+0x52>
   3006e:	42a0      	cmp	r0, r4
   30070:	d305      	bcc.n	3007e <build_topic+0x5e>
		nrf_cloud_free(buf);
   30072:	4628      	mov	r0, r5
   30074:	f015 f89d 	bl	451b2 <k_free>
		return ret;
   30078:	f06f 0006 	mvn.w	r0, #6
   3007c:	e7eb      	b.n	30056 <build_topic+0x36>
	topic_out->size = ret;
   3007e:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   30082:	2000      	movs	r0, #0
   30084:	e7e7      	b.n	30056 <build_topic+0x36>
   30086:	bf00      	nop
   30088:	0004d17e 	.word	0x0004d17e

0003008c <send_event.constprop.3>:
	struct nrf_cloud_fota_evt evt =
   3008c:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   3008e:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt =
   30090:	f8cd 3002 	str.w	r3, [sp, #2]
   30094:	f8ad 3006 	strh.w	r3, [sp, #6]
		.status =  job->status,
   30098:	4b0a      	ldr	r3, [pc, #40]	; (300c4 <send_event.constprop.3+0x38>)
	switch (id)
   3009a:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt =
   3009c:	7a1a      	ldrb	r2, [r3, #8]
   3009e:	f88d 0000 	strb.w	r0, [sp]
   300a2:	f88d 2001 	strb.w	r2, [sp, #1]
   300a6:	7a5a      	ldrb	r2, [r3, #9]
		evt.evt_data.error = job->error;
   300a8:	bf08      	it	eq
   300aa:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt =
   300ac:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   300b0:	bf08      	it	eq
   300b2:	f88d 3004 	strbeq.w	r3, [sp, #4]
	event_cb(&evt);
   300b6:	4b04      	ldr	r3, [pc, #16]	; (300c8 <send_event.constprop.3+0x3c>)
   300b8:	4668      	mov	r0, sp
   300ba:	681b      	ldr	r3, [r3, #0]
   300bc:	4798      	blx	r3
}
   300be:	b003      	add	sp, #12
   300c0:	f85d fb04 	ldr.w	pc, [sp], #4
   300c4:	200254b0 	.word	0x200254b0
   300c8:	200254d8 	.word	0x200254d8

000300cc <cleanup_job.constprop.4>:
static void cleanup_job(struct nrf_cloud_fota_job * const job)
   300cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("%s() - ID: %s", log_strdup(__func__),
   300ce:	2304      	movs	r3, #4
   300d0:	f04f 0500 	mov.w	r5, #0
   300d4:	4a13      	ldr	r2, [pc, #76]	; (30124 <cleanup_job.constprop.4+0x58>)
   300d6:	f363 0507 	bfi	r5, r3, #0, #8
   300da:	4b13      	ldr	r3, [pc, #76]	; (30128 <cleanup_job.constprop.4+0x5c>)
   300dc:	4813      	ldr	r0, [pc, #76]	; (3012c <cleanup_job.constprop.4+0x60>)
   300de:	1a9b      	subs	r3, r3, r2
   300e0:	08db      	lsrs	r3, r3, #3
   300e2:	f363 158f 	bfi	r5, r3, #6, #10
   300e6:	f011 ffbd 	bl	42064 <log_strdup>
   300ea:	4c11      	ldr	r4, [pc, #68]	; (30130 <cleanup_job.constprop.4+0x64>)
   300ec:	4606      	mov	r6, r0
   300ee:	68e0      	ldr	r0, [r4, #12]
   300f0:	b1a8      	cbz	r0, 3011e <cleanup_job.constprop.4+0x52>
   300f2:	f011 ffb7 	bl	42064 <log_strdup>
   300f6:	9000      	str	r0, [sp, #0]
   300f8:	4633      	mov	r3, r6
   300fa:	4628      	mov	r0, r5
   300fc:	4a0b      	ldr	r2, [pc, #44]	; (3012c <cleanup_job.constprop.4+0x60>)
   300fe:	490d      	ldr	r1, [pc, #52]	; (30134 <cleanup_job.constprop.4+0x68>)
   30100:	f011 ff9d 	bl	4203e <log_string_sync>
	if (job->mqtt_payload) {
   30104:	6820      	ldr	r0, [r4, #0]
   30106:	b108      	cbz	r0, 3010c <cleanup_job.constprop.4+0x40>
		nrf_cloud_free(job->mqtt_payload);
   30108:	f015 f853 	bl	451b2 <k_free>
	memset(job,0,sizeof(*job));
   3010c:	2228      	movs	r2, #40	; 0x28
   3010e:	2100      	movs	r1, #0
   30110:	4807      	ldr	r0, [pc, #28]	; (30130 <cleanup_job.constprop.4+0x64>)
   30112:	f015 f8a9 	bl	45268 <memset>
	job->type = NRF_FOTA_TYPE__INVALID;
   30116:	2303      	movs	r3, #3
   30118:	7263      	strb	r3, [r4, #9]
}
   3011a:	b002      	add	sp, #8
   3011c:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("%s() - ID: %s", log_strdup(__func__),
   3011e:	4806      	ldr	r0, [pc, #24]	; (30138 <cleanup_job.constprop.4+0x6c>)
   30120:	e7e9      	b.n	300f6 <cleanup_job.constprop.4+0x2a>
   30122:	bf00      	nop
   30124:	00046878 	.word	0x00046878
   30128:	00046960 	.word	0x00046960
   3012c:	0004d14a 	.word	0x0004d14a
   30130:	200254b0 	.word	0x200254b0
   30134:	0004d189 	.word	0x0004d189
   30138:	0004d185 	.word	0x0004d185

0003013c <http_fota_handler>:
{
   3013c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   3013e:	4604      	mov	r4, r0
   30140:	b958      	cbnz	r0, 3015a <http_fota_handler+0x1e>
   30142:	493d      	ldr	r1, [pc, #244]	; (30238 <http_fota_handler+0xfc>)
   30144:	483d      	ldr	r0, [pc, #244]	; (3023c <http_fota_handler+0x100>)
   30146:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   3014a:	4a3d      	ldr	r2, [pc, #244]	; (30240 <http_fota_handler+0x104>)
   3014c:	f011 fd4c 	bl	41be8 <printk>
   30150:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   30154:	483a      	ldr	r0, [pc, #232]	; (30240 <http_fota_handler+0x104>)
   30156:	f011 ff61 	bl	4201c <assert_post_action>
	LOG_DBG("%s() - evt %d", log_strdup(__func__), evt->id);
   3015a:	2304      	movs	r3, #4
   3015c:	f04f 0500 	mov.w	r5, #0
   30160:	4a38      	ldr	r2, [pc, #224]	; (30244 <http_fota_handler+0x108>)
   30162:	f363 0507 	bfi	r5, r3, #0, #8
   30166:	4b38      	ldr	r3, [pc, #224]	; (30248 <http_fota_handler+0x10c>)
   30168:	4838      	ldr	r0, [pc, #224]	; (3024c <http_fota_handler+0x110>)
   3016a:	1a9b      	subs	r3, r3, r2
   3016c:	08db      	lsrs	r3, r3, #3
   3016e:	f363 158f 	bfi	r5, r3, #6, #10
   30172:	f011 ff77 	bl	42064 <log_strdup>
   30176:	7823      	ldrb	r3, [r4, #0]
   30178:	4a34      	ldr	r2, [pc, #208]	; (3024c <http_fota_handler+0x110>)
   3017a:	9300      	str	r3, [sp, #0]
   3017c:	4934      	ldr	r1, [pc, #208]	; (30250 <http_fota_handler+0x114>)
   3017e:	4603      	mov	r3, r0
   30180:	4628      	mov	r0, r5
   30182:	f011 ff5c 	bl	4203e <log_string_sync>
	switch (evt->id) {
   30186:	7823      	ldrb	r3, [r4, #0]
   30188:	4e32      	ldr	r6, [pc, #200]	; (30254 <http_fota_handler+0x118>)
   3018a:	2b04      	cmp	r3, #4
   3018c:	d81c      	bhi.n	301c8 <http_fota_handler+0x8c>
   3018e:	e8df f003 	tbb	[pc, r3]
   30192:	0339      	.short	0x0339
   30194:	1f0e      	.short	0x1f0e
   30196:	21          	.byte	0x21
   30197:	00          	.byte	0x00
		current_fota.status = NRF_FOTA_IN_PROGRESS;
   30198:	2201      	movs	r2, #1
   3019a:	4d2f      	ldr	r5, [pc, #188]	; (30258 <http_fota_handler+0x11c>)
		save_validate_status(current_fota.id, current_fota.type,
   3019c:	7a69      	ldrb	r1, [r5, #9]
   3019e:	68e8      	ldr	r0, [r5, #12]
		current_fota.status = NRF_FOTA_IN_PROGRESS;
   301a0:	722a      	strb	r2, [r5, #8]
		save_validate_status(current_fota.id, current_fota.type,
   301a2:	f7ff fecd 	bl	2ff40 <save_validate_status>
		send_job_update(&current_fota);
   301a6:	4628      	mov	r0, r5
		send_job_update(&current_fota);
   301a8:	f7ff fe72 	bl	2fe90 <send_job_update>
		break;
   301ac:	e00c      	b.n	301c8 <http_fota_handler+0x8c>
		current_fota.status = NRF_FOTA_IN_PROGRESS;
   301ae:	2201      	movs	r2, #1
   301b0:	4d29      	ldr	r5, [pc, #164]	; (30258 <http_fota_handler+0x11c>)
		save_validate_status(current_fota.id, current_fota.type,
   301b2:	7a69      	ldrb	r1, [r5, #9]
   301b4:	68e8      	ldr	r0, [r5, #12]
		current_fota.status = NRF_FOTA_IN_PROGRESS;
   301b6:	722a      	strb	r2, [r5, #8]
		save_validate_status(current_fota.id, current_fota.type,
   301b8:	f7ff fec2 	bl	2ff40 <save_validate_status>
		send_job_update(&current_fota);
   301bc:	4628      	mov	r0, r5
   301be:	f7ff fe67 	bl	2fe90 <send_job_update>
		send_event(NRF_FOTA_EVT_ERASE_PENDING,&current_fota);
   301c2:	2003      	movs	r0, #3
		send_event(NRF_FOTA_EVT_ERASE_DONE,&current_fota);
   301c4:	f7ff ff62 	bl	3008c <send_event.constprop.3>
	last_fota_dl_evt = evt->id;
   301c8:	7823      	ldrb	r3, [r4, #0]
   301ca:	7033      	strb	r3, [r6, #0]
}
   301cc:	b002      	add	sp, #8
   301ce:	bd70      	pop	{r4, r5, r6, pc}
		send_event(NRF_FOTA_EVT_ERASE_DONE,&current_fota);
   301d0:	2004      	movs	r0, #4
   301d2:	e7f7      	b.n	301c4 <http_fota_handler+0x88>
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE) {
   301d4:	7833      	ldrb	r3, [r6, #0]
   301d6:	2b03      	cmp	r3, #3
			current_fota.status = NRF_FOTA_FAILED;
   301d8:	bf14      	ite	ne
   301da:	2202      	movne	r2, #2
			current_fota.status = NRF_FOTA_REJECTED;
   301dc:	2206      	moveq	r2, #6
   301de:	4b1e      	ldr	r3, [pc, #120]	; (30258 <http_fota_handler+0x11c>)
   301e0:	bf0e      	itee	eq
   301e2:	721a      	strbeq	r2, [r3, #8]
			current_fota.status = NRF_FOTA_FAILED;
   301e4:	721a      	strbne	r2, [r3, #8]
			current_fota.error = NRF_FOTA_ERROR_DOWNLOAD;
   301e6:	771a      	strbne	r2, [r3, #28]
		save_validate_status(current_fota.id, current_fota.type,
   301e8:	7a59      	ldrb	r1, [r3, #9]
   301ea:	2205      	movs	r2, #5
   301ec:	68d8      	ldr	r0, [r3, #12]
   301ee:	f7ff fea7 	bl	2ff40 <save_validate_status>
		send_job_update(&current_fota);
   301f2:	4819      	ldr	r0, [pc, #100]	; (30258 <http_fota_handler+0x11c>)
   301f4:	f7ff fe4c 	bl	2fe90 <send_job_update>
		send_event(NRF_FOTA_EVT_ERROR,&current_fota);
   301f8:	2002      	movs	r0, #2
   301fa:	f7ff ff47 	bl	3008c <send_event.constprop.3>
		cleanup_job(&current_fota);
   301fe:	f7ff ff65 	bl	300cc <cleanup_job.constprop.4>
		break;
   30202:	e7e1      	b.n	301c8 <http_fota_handler+0x8c>
		current_fota.status = NRF_FOTA_DOWNLOADING;
   30204:	2207      	movs	r2, #7
   30206:	4b14      	ldr	r3, [pc, #80]	; (30258 <http_fota_handler+0x11c>)
		if ((current_fota.sent_dl_progress == 100) &&
   30208:	6a59      	ldr	r1, [r3, #36]	; 0x24
		current_fota.status = NRF_FOTA_DOWNLOADING;
   3020a:	721a      	strb	r2, [r3, #8]
		current_fota.dl_progress = evt->progress;
   3020c:	6862      	ldr	r2, [r4, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   3020e:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   30210:	621a      	str	r2, [r3, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   30212:	d108      	bne.n	30226 <http_fota_handler+0xea>
   30214:	2a64      	cmp	r2, #100	; 0x64
   30216:	d0d7      	beq.n	301c8 <http_fota_handler+0x8c>
		if (current_fota.sent_dl_progress >
   30218:	2a63      	cmp	r2, #99	; 0x63
   3021a:	dd06      	ble.n	3022a <http_fota_handler+0xee>
		    ((current_fota.dl_progress -
   3021c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   3021e:	1a51      	subs	r1, r2, r1
		if (current_fota.dl_progress != 100 &&
   30220:	2909      	cmp	r1, #9
   30222:	dc06      	bgt.n	30232 <http_fota_handler+0xf6>
	last_fota_dl_evt = evt->id;
   30224:	e7d0      	b.n	301c8 <http_fota_handler+0x8c>
		if (current_fota.sent_dl_progress >
   30226:	428a      	cmp	r2, r1
   30228:	da01      	bge.n	3022e <http_fota_handler+0xf2>
			current_fota.sent_dl_progress = 0;
   3022a:	2100      	movs	r1, #0
   3022c:	6259      	str	r1, [r3, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   3022e:	2a64      	cmp	r2, #100	; 0x64
   30230:	d1f4      	bne.n	3021c <http_fota_handler+0xe0>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   30232:	625a      	str	r2, [r3, #36]	; 0x24
		send_job_update(&current_fota);
   30234:	4808      	ldr	r0, [pc, #32]	; (30258 <http_fota_handler+0x11c>)
   30236:	e7b7      	b.n	301a8 <http_fota_handler+0x6c>
   30238:	0004d21e 	.word	0x0004d21e
   3023c:	0004825b 	.word	0x0004825b
   30240:	0004d4ef 	.word	0x0004d4ef
   30244:	00046878 	.word	0x00046878
   30248:	00046960 	.word	0x00046960
   3024c:	0004d12e 	.word	0x0004d12e
   30250:	0004d231 	.word	0x0004d231
   30254:	2002096d 	.word	0x2002096d
   30258:	200254b0 	.word	0x200254b0

0003025c <get_modem_update_status>:
{
   3025c:	b508      	push	{r3, lr}
	int modem_dfu_res = bsdlib_get_init_ret();
   3025e:	f7f9 f94f 	bl	29500 <bsdlib_get_init_ret>
   30262:	491b      	ldr	r1, [pc, #108]	; (302d0 <get_modem_update_status+0x74>)
   30264:	4a1b      	ldr	r2, [pc, #108]	; (302d4 <get_modem_update_status+0x78>)
	switch (modem_dfu_res) {
   30266:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   3026a:	eba1 0102 	sub.w	r1, r1, r2
	int modem_dfu_res = bsdlib_get_init_ret();
   3026e:	4603      	mov	r3, r0
	switch (modem_dfu_res) {
   30270:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   30274:	dd1f      	ble.n	302b6 <get_modem_update_status+0x5a>
   30276:	4a18      	ldr	r2, [pc, #96]	; (302d8 <get_modem_update_status+0x7c>)
   30278:	4290      	cmp	r0, r2
   3027a:	dd0f      	ble.n	3029c <get_modem_update_status+0x40>
   3027c:	4a17      	ldr	r2, [pc, #92]	; (302dc <get_modem_update_status+0x80>)
   3027e:	4290      	cmp	r0, r2
   30280:	d119      	bne.n	302b6 <get_modem_update_status+0x5a>
		LOG_DBG("Modem FOTA OK");
   30282:	2304      	movs	r3, #4
   30284:	f04f 0000 	mov.w	r0, #0
   30288:	f363 0007 	bfi	r0, r3, #0, #8
   3028c:	f361 108f 	bfi	r0, r1, #6, #10
   30290:	4a13      	ldr	r2, [pc, #76]	; (302e0 <get_modem_update_status+0x84>)
   30292:	4914      	ldr	r1, [pc, #80]	; (302e4 <get_modem_update_status+0x88>)
   30294:	f011 fed3 	bl	4203e <log_string_sync>
	return ret;
   30298:	2002      	movs	r0, #2
}
   3029a:	bd08      	pop	{r3, pc}
		LOG_ERR("Modem FOTA error: %d", modem_dfu_res);
   3029c:	2201      	movs	r2, #1
   3029e:	f04f 0000 	mov.w	r0, #0
   302a2:	f362 0007 	bfi	r0, r2, #0, #8
   302a6:	f361 108f 	bfi	r0, r1, #6, #10
   302aa:	461a      	mov	r2, r3
   302ac:	490e      	ldr	r1, [pc, #56]	; (302e8 <get_modem_update_status+0x8c>)
   302ae:	f011 fec6 	bl	4203e <log_string_sync>
		ret = NRF_FOTA_VALIDATE_FAIL;
   302b2:	2003      	movs	r0, #3
		break;
   302b4:	e7f1      	b.n	3029a <get_modem_update_status+0x3e>
		LOG_DBG("Modem FOTA result unknown: %d", modem_dfu_res);
   302b6:	2204      	movs	r2, #4
   302b8:	f04f 0000 	mov.w	r0, #0
   302bc:	f362 0007 	bfi	r0, r2, #0, #8
   302c0:	f361 108f 	bfi	r0, r1, #6, #10
   302c4:	4a06      	ldr	r2, [pc, #24]	; (302e0 <get_modem_update_status+0x84>)
   302c6:	4909      	ldr	r1, [pc, #36]	; (302ec <get_modem_update_status+0x90>)
   302c8:	f011 feb9 	bl	4203e <log_string_sync>
	enum fota_validate_status ret = NRF_FOTA_VALIDATE_UNKNOWN;
   302cc:	2004      	movs	r0, #4
   302ce:	e7e4      	b.n	3029a <get_modem_update_status+0x3e>
   302d0:	00046960 	.word	0x00046960
   302d4:	00046878 	.word	0x00046878
   302d8:	04400004 	.word	0x04400004
   302dc:	05500001 	.word	0x05500001
   302e0:	0004d0d4 	.word	0x0004d0d4
   302e4:	0004d1d5 	.word	0x0004d1d5
   302e8:	0004d1e7 	.word	0x0004d1e7
   302ec:	0004d1fc 	.word	0x0004d1fc

000302f0 <nrf_cloud_fota_init>:
{
   302f0:	b570      	push	{r4, r5, r6, lr}
	if (cb == NULL) {
   302f2:	b978      	cbnz	r0, 30314 <nrf_cloud_fota_init+0x24>
		LOG_ERR("Invalid parameter");
   302f4:	2301      	movs	r3, #1
   302f6:	4a45      	ldr	r2, [pc, #276]	; (3040c <nrf_cloud_fota_init+0x11c>)
   302f8:	f363 0007 	bfi	r0, r3, #0, #8
   302fc:	4b44      	ldr	r3, [pc, #272]	; (30410 <nrf_cloud_fota_init+0x120>)
   302fe:	4945      	ldr	r1, [pc, #276]	; (30414 <nrf_cloud_fota_init+0x124>)
   30300:	1a9b      	subs	r3, r3, r2
   30302:	08db      	lsrs	r3, r3, #3
   30304:	f363 108f 	bfi	r0, r3, #6, #10
   30308:	f011 fe99 	bl	4203e <log_string_sync>
		return -EINVAL;
   3030c:	f06f 0415 	mvn.w	r4, #21
}
   30310:	4620      	mov	r0, r4
   30312:	bd70      	pop	{r4, r5, r6, pc}
	event_cb = cb;
   30314:	4b40      	ldr	r3, [pc, #256]	; (30418 <nrf_cloud_fota_init+0x128>)
	if (initialized){
   30316:	4e41      	ldr	r6, [pc, #260]	; (3041c <nrf_cloud_fota_init+0x12c>)
	event_cb = cb;
   30318:	6018      	str	r0, [r3, #0]
	if (initialized){
   3031a:	7833      	ldrb	r3, [r6, #0]
   3031c:	2b00      	cmp	r3, #0
   3031e:	d173      	bne.n	30408 <nrf_cloud_fota_init+0x118>
	err = fota_download_init(http_fota_handler);
   30320:	483f      	ldr	r0, [pc, #252]	; (30420 <nrf_cloud_fota_init+0x130>)
   30322:	f001 fc41 	bl	31ba8 <fota_download_init>
	if (err != 0) {
   30326:	4604      	mov	r4, r0
   30328:	b178      	cbz	r0, 3034a <nrf_cloud_fota_init+0x5a>
		LOG_ERR("fota_download_init error %d", err);
   3032a:	2301      	movs	r3, #1
   3032c:	f04f 0000 	mov.w	r0, #0
   30330:	4a36      	ldr	r2, [pc, #216]	; (3040c <nrf_cloud_fota_init+0x11c>)
   30332:	f363 0007 	bfi	r0, r3, #0, #8
   30336:	4b36      	ldr	r3, [pc, #216]	; (30410 <nrf_cloud_fota_init+0x120>)
   30338:	493a      	ldr	r1, [pc, #232]	; (30424 <nrf_cloud_fota_init+0x134>)
   3033a:	1a9b      	subs	r3, r3, r2
   3033c:	08db      	lsrs	r3, r3, #3
   3033e:	f363 108f 	bfi	r0, r3, #6, #10
   30342:	4622      	mov	r2, r4
   30344:	f011 fe7b 	bl	4203e <log_string_sync>
		return err;
   30348:	e7e2      	b.n	30310 <nrf_cloud_fota_init+0x20>
	err = settings_load_subtree(settings_handler_fota.name);
   3034a:	4837      	ldr	r0, [pc, #220]	; (30428 <nrf_cloud_fota_init+0x138>)
   3034c:	f7f5 faa8 	bl	258a0 <settings_load_subtree>
	if (err) {
   30350:	4604      	mov	r4, r0
   30352:	b170      	cbz	r0, 30372 <nrf_cloud_fota_init+0x82>
		LOG_ERR("Cannot load settings: %d", err);
   30354:	2301      	movs	r3, #1
   30356:	f04f 0000 	mov.w	r0, #0
   3035a:	4a2c      	ldr	r2, [pc, #176]	; (3040c <nrf_cloud_fota_init+0x11c>)
   3035c:	f363 0007 	bfi	r0, r3, #0, #8
   30360:	4b2b      	ldr	r3, [pc, #172]	; (30410 <nrf_cloud_fota_init+0x120>)
   30362:	4932      	ldr	r1, [pc, #200]	; (3042c <nrf_cloud_fota_init+0x13c>)
   30364:	1a9b      	subs	r3, r3, r2
   30366:	08db      	lsrs	r3, r3, #3
   30368:	f363 108f 	bfi	r0, r3, #6, #10
   3036c:	4622      	mov	r2, r4
   3036e:	f011 fe66 	bl	4203e <log_string_sync>
	if (saved_job.validate == NRF_FOTA_VALIDATE_PENDING) {
   30372:	4d2f      	ldr	r5, [pc, #188]	; (30430 <nrf_cloud_fota_init+0x140>)
   30374:	782b      	ldrb	r3, [r5, #0]
   30376:	2b01      	cmp	r3, #1
   30378:	d136      	bne.n	303e8 <nrf_cloud_fota_init+0xf8>
		if (!boot_is_img_confirmed()) {
   3037a:	f012 f972 	bl	42662 <boot_is_img_confirmed>
   3037e:	2800      	cmp	r0, #0
   30380:	d140      	bne.n	30404 <nrf_cloud_fota_init+0x114>
			err = boot_write_img_confirmed();
   30382:	f012 f975 	bl	42670 <boot_write_img_confirmed>
			if (err) {
   30386:	4604      	mov	r4, r0
   30388:	4b21      	ldr	r3, [pc, #132]	; (30410 <nrf_cloud_fota_init+0x120>)
   3038a:	4a20      	ldr	r2, [pc, #128]	; (3040c <nrf_cloud_fota_init+0x11c>)
				LOG_ERR("FOTA update confirmation failed: %d",
   3038c:	f04f 0000 	mov.w	r0, #0
   30390:	1a9b      	subs	r3, r3, r2
   30392:	f3c3 03c9 	ubfx	r3, r3, #3, #10
			if (err) {
   30396:	b354      	cbz	r4, 303ee <nrf_cloud_fota_init+0xfe>
				LOG_ERR("FOTA update confirmation failed: %d",
   30398:	2201      	movs	r2, #1
   3039a:	f362 0007 	bfi	r0, r2, #0, #8
   3039e:	f363 108f 	bfi	r0, r3, #6, #10
   303a2:	4622      	mov	r2, r4
   303a4:	4923      	ldr	r1, [pc, #140]	; (30434 <nrf_cloud_fota_init+0x144>)
   303a6:	f011 fe4a 	bl	4203e <log_string_sync>
				validate = NRF_FOTA_VALIDATE_FAIL;
   303aa:	2203      	movs	r2, #3
		if (saved_job.type == NRF_FOTA_MODEM) {
   303ac:	786b      	ldrb	r3, [r5, #1]
   303ae:	2b01      	cmp	r3, #1
   303b0:	d102      	bne.n	303b8 <nrf_cloud_fota_init+0xc8>
			validate = get_modem_update_status();
   303b2:	f7ff ff53 	bl	3025c <get_modem_update_status>
   303b6:	4602      	mov	r2, r0
		save_validate_status(saved_job.id, saved_job.type, validate);
   303b8:	7869      	ldrb	r1, [r5, #1]
   303ba:	481f      	ldr	r0, [pc, #124]	; (30438 <nrf_cloud_fota_init+0x148>)
   303bc:	f7ff fdc0 	bl	2ff40 <save_validate_status>
		if (saved_job.type == NRF_FOTA_MODEM) {
   303c0:	786d      	ldrb	r5, [r5, #1]
   303c2:	2d01      	cmp	r5, #1
   303c4:	d110      	bne.n	303e8 <nrf_cloud_fota_init+0xf8>
			LOG_INF("Rebooting to complete modem FOTA");
   303c6:	2303      	movs	r3, #3
   303c8:	f04f 0000 	mov.w	r0, #0
   303cc:	4a0f      	ldr	r2, [pc, #60]	; (3040c <nrf_cloud_fota_init+0x11c>)
   303ce:	f363 0007 	bfi	r0, r3, #0, #8
   303d2:	4b0f      	ldr	r3, [pc, #60]	; (30410 <nrf_cloud_fota_init+0x120>)
   303d4:	4919      	ldr	r1, [pc, #100]	; (3043c <nrf_cloud_fota_init+0x14c>)
   303d6:	1a9b      	subs	r3, r3, r2
   303d8:	08db      	lsrs	r3, r3, #3
   303da:	f363 108f 	bfi	r0, r3, #6, #10
   303de:	f011 fe2e 	bl	4203e <log_string_sync>
			sys_reboot(SYS_REBOOT_COLD);
   303e2:	4628      	mov	r0, r5
   303e4:	f7f5 feee 	bl	261c4 <sys_reboot>
	initialized = true;
   303e8:	2301      	movs	r3, #1
   303ea:	7033      	strb	r3, [r6, #0]
	return err;
   303ec:	e790      	b.n	30310 <nrf_cloud_fota_init+0x20>
				LOG_DBG("FOTA update confirmed");
   303ee:	2204      	movs	r2, #4
   303f0:	f362 0007 	bfi	r0, r2, #0, #8
   303f4:	f363 108f 	bfi	r0, r3, #6, #10
   303f8:	4a11      	ldr	r2, [pc, #68]	; (30440 <nrf_cloud_fota_init+0x150>)
   303fa:	4912      	ldr	r1, [pc, #72]	; (30444 <nrf_cloud_fota_init+0x154>)
   303fc:	f011 fe1f 	bl	4203e <log_string_sync>
				validate = NRF_FOTA_VALIDATE_PASS;
   30400:	2202      	movs	r2, #2
   30402:	e7d3      	b.n	303ac <nrf_cloud_fota_init+0xbc>
	enum fota_validate_status validate = NRF_FOTA_VALIDATE_UNKNOWN;
   30404:	2204      	movs	r2, #4
   30406:	e7d1      	b.n	303ac <nrf_cloud_fota_init+0xbc>
		return 0;
   30408:	2400      	movs	r4, #0
   3040a:	e781      	b.n	30310 <nrf_cloud_fota_init+0x20>
   3040c:	00046878 	.word	0x00046878
   30410:	00046960 	.word	0x00046960
   30414:	0004d2a6 	.word	0x0004d2a6
   30418:	200254d8 	.word	0x200254d8
   3041c:	2002cb09 	.word	0x2002cb09
   30420:	0003013d 	.word	0x0003013d
   30424:	0004d2b8 	.word	0x0004d2b8
   30428:	0004d2d4 	.word	0x0004d2d4
   3042c:	0004c555 	.word	0x0004c555
   30430:	2002096e 	.word	0x2002096e
   30434:	0004d2e3 	.word	0x0004d2e3
   30438:	20020970 	.word	0x20020970
   3043c:	0004d321 	.word	0x0004d321
   30440:	0004d0ec 	.word	0x0004d0ec
   30444:	0004d307 	.word	0x0004d307

00030448 <nrf_cloud_fota_endpoint_set>:
{
   30448:	b570      	push	{r4, r5, r6, lr}
   3044a:	460e      	mov	r6, r1
   3044c:	b08a      	sub	sp, #40	; 0x28
   3044e:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   30450:	2800      	cmp	r0, #0
   30452:	d074      	beq.n	3053e <nrf_cloud_fota_endpoint_set+0xf6>
   30454:	2a00      	cmp	r2, #0
   30456:	d072      	beq.n	3053e <nrf_cloud_fota_endpoint_set+0xf6>
   30458:	6813      	ldr	r3, [r2, #0]
   3045a:	2b00      	cmp	r3, #0
   3045c:	d06f      	beq.n	3053e <nrf_cloud_fota_endpoint_set+0xf6>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   3045e:	6853      	ldr	r3, [r2, #4]
   30460:	2b00      	cmp	r3, #0
   30462:	d06c      	beq.n	3053e <nrf_cloud_fota_endpoint_set+0xf6>
   30464:	2900      	cmp	r1, #0
   30466:	d06a      	beq.n	3053e <nrf_cloud_fota_endpoint_set+0xf6>
	client_mqtt = client;
   30468:	4b36      	ldr	r3, [pc, #216]	; (30544 <nrf_cloud_fota_endpoint_set+0xfc>)
   3046a:	6018      	str	r0, [r3, #0]
	reset_topics();
   3046c:	f7ff fcb2 	bl	2fdd4 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   30470:	4b35      	ldr	r3, [pc, #212]	; (30548 <nrf_cloud_fota_endpoint_set+0x100>)
   30472:	4a36      	ldr	r2, [pc, #216]	; (3054c <nrf_cloud_fota_endpoint_set+0x104>)
   30474:	4629      	mov	r1, r5
   30476:	4630      	mov	r0, r6
   30478:	f7ff fdd2 	bl	30020 <build_topic>
	if (ret) {
   3047c:	4604      	mov	r4, r0
   3047e:	2800      	cmp	r0, #0
   30480:	d15a      	bne.n	30538 <nrf_cloud_fota_endpoint_set+0xf0>
	ret = build_topic(client_id, endpoint,TOPIC_FOTA_UPDATE,
   30482:	4b33      	ldr	r3, [pc, #204]	; (30550 <nrf_cloud_fota_endpoint_set+0x108>)
   30484:	4a33      	ldr	r2, [pc, #204]	; (30554 <nrf_cloud_fota_endpoint_set+0x10c>)
   30486:	4629      	mov	r1, r5
   30488:	4630      	mov	r0, r6
   3048a:	f7ff fdc9 	bl	30020 <build_topic>
	if (ret) {
   3048e:	4604      	mov	r4, r0
   30490:	2800      	cmp	r0, #0
   30492:	d151      	bne.n	30538 <nrf_cloud_fota_endpoint_set+0xf0>
	ret = build_topic(client_id, endpoint,TOPIC_FOTA_REQ,
   30494:	4b30      	ldr	r3, [pc, #192]	; (30558 <nrf_cloud_fota_endpoint_set+0x110>)
   30496:	4a31      	ldr	r2, [pc, #196]	; (3055c <nrf_cloud_fota_endpoint_set+0x114>)
   30498:	4629      	mov	r1, r5
   3049a:	4630      	mov	r0, r6
   3049c:	f7ff fdc0 	bl	30020 <build_topic>
	if (ret) {
   304a0:	4604      	mov	r4, r0
   304a2:	2800      	cmp	r0, #0
   304a4:	d148      	bne.n	30538 <nrf_cloud_fota_endpoint_set+0xf0>
	if (saved_job.type != NRF_FOTA_TYPE__INVALID) {
   304a6:	4d2e      	ldr	r5, [pc, #184]	; (30560 <nrf_cloud_fota_endpoint_set+0x118>)
   304a8:	786e      	ldrb	r6, [r5, #1]
   304aa:	2e03      	cmp	r6, #3
   304ac:	d017      	beq.n	304de <nrf_cloud_fota_endpoint_set+0x96>
		struct nrf_cloud_fota_job job = { .type = saved_job.type,
   304ae:	2228      	movs	r2, #40	; 0x28
   304b0:	4601      	mov	r1, r0
   304b2:	4668      	mov	r0, sp
   304b4:	f014 fed8 	bl	45268 <memset>
		switch (saved_job.validate) {
   304b8:	782a      	ldrb	r2, [r5, #0]
		struct nrf_cloud_fota_job job = { .type = saved_job.type,
   304ba:	1cab      	adds	r3, r5, #2
		switch (saved_job.validate) {
   304bc:	2a03      	cmp	r2, #3
		struct nrf_cloud_fota_job job = { .type = saved_job.type,
   304be:	f88d 6009 	strb.w	r6, [sp, #9]
   304c2:	9303      	str	r3, [sp, #12]
		switch (saved_job.validate) {
   304c4:	d012      	beq.n	304ec <nrf_cloud_fota_endpoint_set+0xa4>
   304c6:	2a04      	cmp	r2, #4
   304c8:	d00c      	beq.n	304e4 <nrf_cloud_fota_endpoint_set+0x9c>
   304ca:	2a02      	cmp	r2, #2
   304cc:	d110      	bne.n	304f0 <nrf_cloud_fota_endpoint_set+0xa8>
			job.status = NRF_FOTA_SUCCEEDED;
   304ce:	2303      	movs	r3, #3
			int err = send_job_update(&job);
   304d0:	4668      	mov	r0, sp
			job.status = NRF_FOTA_FAILED;
   304d2:	f88d 3008 	strb.w	r3, [sp, #8]
			int err = send_job_update(&job);
   304d6:	f7ff fcdb 	bl	2fe90 <send_job_update>
			if (err) {
   304da:	4602      	mov	r2, r0
   304dc:	b9e8      	cbnz	r0, 3051a <nrf_cloud_fota_endpoint_set+0xd2>
}
   304de:	4620      	mov	r0, r4
   304e0:	b00a      	add	sp, #40	; 0x28
   304e2:	bd70      	pop	{r4, r5, r6, pc}
			job.error = NRF_FOTA_ERROR_UNABLE_TO_VALIDATE;
   304e4:	2303      	movs	r3, #3
   304e6:	f88d 301c 	strb.w	r3, [sp, #28]
   304ea:	e7f0      	b.n	304ce <nrf_cloud_fota_endpoint_set+0x86>
			job.status = NRF_FOTA_FAILED;
   304ec:	2302      	movs	r3, #2
   304ee:	e7ef      	b.n	304d0 <nrf_cloud_fota_endpoint_set+0x88>
			LOG_ERR("Unexpected job validation status: %d",
   304f0:	2301      	movs	r3, #1
   304f2:	f04f 0000 	mov.w	r0, #0
   304f6:	491b      	ldr	r1, [pc, #108]	; (30564 <nrf_cloud_fota_endpoint_set+0x11c>)
   304f8:	f363 0007 	bfi	r0, r3, #0, #8
   304fc:	4b1a      	ldr	r3, [pc, #104]	; (30568 <nrf_cloud_fota_endpoint_set+0x120>)
   304fe:	1a5b      	subs	r3, r3, r1
   30500:	08db      	lsrs	r3, r3, #3
   30502:	f363 108f 	bfi	r0, r3, #6, #10
   30506:	4919      	ldr	r1, [pc, #100]	; (3056c <nrf_cloud_fota_endpoint_set+0x124>)
   30508:	f011 fd99 	bl	4203e <log_string_sync>
			save_validate_status(job.id, job.type, NRF_FOTA_VALIDATE_DONE);
   3050c:	2205      	movs	r2, #5
   3050e:	f89d 1009 	ldrb.w	r1, [sp, #9]
   30512:	9803      	ldr	r0, [sp, #12]
   30514:	f7ff fd14 	bl	2ff40 <save_validate_status>
		if (job.type != NRF_FOTA_TYPE__INVALID) {
   30518:	e7e1      	b.n	304de <nrf_cloud_fota_endpoint_set+0x96>
				LOG_ERR("Error sending job update: %d", err);
   3051a:	2301      	movs	r3, #1
   3051c:	f04f 0000 	mov.w	r0, #0
   30520:	4910      	ldr	r1, [pc, #64]	; (30564 <nrf_cloud_fota_endpoint_set+0x11c>)
   30522:	f363 0007 	bfi	r0, r3, #0, #8
   30526:	4b10      	ldr	r3, [pc, #64]	; (30568 <nrf_cloud_fota_endpoint_set+0x120>)
   30528:	1a5b      	subs	r3, r3, r1
   3052a:	08db      	lsrs	r3, r3, #3
   3052c:	f363 108f 	bfi	r0, r3, #6, #10
   30530:	490f      	ldr	r1, [pc, #60]	; (30570 <nrf_cloud_fota_endpoint_set+0x128>)
   30532:	f011 fd84 	bl	4203e <log_string_sync>
   30536:	e7d2      	b.n	304de <nrf_cloud_fota_endpoint_set+0x96>
	reset_topics();
   30538:	f7ff fc4c 	bl	2fdd4 <reset_topics>
	return ret;
   3053c:	e7cf      	b.n	304de <nrf_cloud_fota_endpoint_set+0x96>
		return -EINVAL;
   3053e:	f06f 0415 	mvn.w	r4, #21
   30542:	e7cc      	b.n	304de <nrf_cloud_fota_endpoint_set+0x96>
   30544:	200254ac 	.word	0x200254ac
   30548:	20020748 	.word	0x20020748
   3054c:	0004d243 	.word	0x0004d243
   30550:	20020760 	.word	0x20020760
   30554:	0004d24d 	.word	0x0004d24d
   30558:	20020754 	.word	0x20020754
   3055c:	0004d25a 	.word	0x0004d25a
   30560:	2002096e 	.word	0x2002096e
   30564:	00046878 	.word	0x00046878
   30568:	00046960 	.word	0x00046960
   3056c:	0004d264 	.word	0x0004d264
   30570:	0004d289 	.word	0x0004d289

00030574 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   30574:	2200      	movs	r2, #0
   30576:	4b02      	ldr	r3, [pc, #8]	; (30580 <nrf_cloud_fota_endpoint_clear+0xc>)
   30578:	601a      	str	r2, [r3, #0]
	reset_topics();
   3057a:	f7ff bc2b 	b.w	2fdd4 <reset_topics>
   3057e:	bf00      	nop
   30580:	200254ac 	.word	0x200254ac

00030584 <nrf_cloud_fota_subscribe>:
{
   30584:	b508      	push	{r3, lr}
	if (topic_rcv.topic.size == 0 || topic_rcv.topic.utf8 == NULL) {
   30586:	4b0f      	ldr	r3, [pc, #60]	; (305c4 <nrf_cloud_fota_subscribe+0x40>)
   30588:	685a      	ldr	r2, [r3, #4]
   3058a:	b1ba      	cbz	r2, 305bc <nrf_cloud_fota_subscribe+0x38>
   3058c:	681b      	ldr	r3, [r3, #0]
   3058e:	b1ab      	cbz	r3, 305bc <nrf_cloud_fota_subscribe+0x38>
	LOG_DBG("Subscribing to topic: %s", topic_rcv.topic.utf8);
   30590:	2204      	movs	r2, #4
   30592:	f04f 0000 	mov.w	r0, #0
   30596:	490c      	ldr	r1, [pc, #48]	; (305c8 <nrf_cloud_fota_subscribe+0x44>)
   30598:	f362 0007 	bfi	r0, r2, #0, #8
   3059c:	4a0b      	ldr	r2, [pc, #44]	; (305cc <nrf_cloud_fota_subscribe+0x48>)
   3059e:	1a52      	subs	r2, r2, r1
   305a0:	08d2      	lsrs	r2, r2, #3
   305a2:	f362 108f 	bfi	r0, r2, #6, #10
   305a6:	490a      	ldr	r1, [pc, #40]	; (305d0 <nrf_cloud_fota_subscribe+0x4c>)
   305a8:	4a0a      	ldr	r2, [pc, #40]	; (305d4 <nrf_cloud_fota_subscribe+0x50>)
   305aa:	f011 fd48 	bl	4203e <log_string_sync>
	return mqtt_subscribe(client_mqtt, &sub_list);
   305ae:	4b0a      	ldr	r3, [pc, #40]	; (305d8 <nrf_cloud_fota_subscribe+0x54>)
   305b0:	490a      	ldr	r1, [pc, #40]	; (305dc <nrf_cloud_fota_subscribe+0x58>)
   305b2:	6818      	ldr	r0, [r3, #0]
}
   305b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_subscribe(client_mqtt, &sub_list);
   305b8:	f013 b88a 	b.w	436d0 <mqtt_subscribe>
}
   305bc:	f06f 000d 	mvn.w	r0, #13
   305c0:	bd08      	pop	{r3, pc}
   305c2:	bf00      	nop
   305c4:	20020748 	.word	0x20020748
   305c8:	00046878 	.word	0x00046878
   305cc:	00046960 	.word	0x00046960
   305d0:	0004d435 	.word	0x0004d435
   305d4:	0004d100 	.word	0x0004d100
   305d8:	200254ac 	.word	0x200254ac
   305dc:	00047360 	.word	0x00047360

000305e0 <nrf_cloud_fota_unsubscribe>:
	if (topic_rcv.topic.size == 0 || topic_rcv.topic.utf8 == NULL) {
   305e0:	4b06      	ldr	r3, [pc, #24]	; (305fc <nrf_cloud_fota_unsubscribe+0x1c>)
   305e2:	685a      	ldr	r2, [r3, #4]
   305e4:	b132      	cbz	r2, 305f4 <nrf_cloud_fota_unsubscribe+0x14>
   305e6:	681b      	ldr	r3, [r3, #0]
   305e8:	b123      	cbz	r3, 305f4 <nrf_cloud_fota_unsubscribe+0x14>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   305ea:	4b05      	ldr	r3, [pc, #20]	; (30600 <nrf_cloud_fota_unsubscribe+0x20>)
   305ec:	4905      	ldr	r1, [pc, #20]	; (30604 <nrf_cloud_fota_unsubscribe+0x24>)
   305ee:	6818      	ldr	r0, [r3, #0]
   305f0:	f013 b895 	b.w	4371e <mqtt_unsubscribe>
}
   305f4:	f06f 000d 	mvn.w	r0, #13
   305f8:	4770      	bx	lr
   305fa:	bf00      	nop
   305fc:	20020748 	.word	0x20020748
   30600:	200254ac 	.word	0x200254ac
   30604:	00047360 	.word	0x00047360

00030608 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   30608:	b530      	push	{r4, r5, lr}
	if (client_mqtt == NULL) {
   3060a:	4b13      	ldr	r3, [pc, #76]	; (30658 <nrf_cloud_fota_update_check+0x50>)
{
   3060c:	b087      	sub	sp, #28
	if (client_mqtt == NULL) {
   3060e:	681b      	ldr	r3, [r3, #0]
   30610:	b1e3      	cbz	r3, 3064c <nrf_cloud_fota_update_check+0x44>
		return -ENXIO;
	}
	if (topic_req.topic.utf8 == NULL || topic_req.topic.size == 0) {
   30612:	4d12      	ldr	r5, [pc, #72]	; (3065c <nrf_cloud_fota_update_check+0x54>)
   30614:	682b      	ldr	r3, [r5, #0]
   30616:	b1e3      	cbz	r3, 30652 <nrf_cloud_fota_update_check+0x4a>
   30618:	686b      	ldr	r3, [r5, #4]
   3061a:	b1d3      	cbz	r3, 30652 <nrf_cloud_fota_update_check+0x4a>
		return -EADDRNOTAVAIL;
	}

	struct mqtt_publish_param param = {
   3061c:	466c      	mov	r4, sp
   3061e:	2218      	movs	r2, #24
   30620:	2100      	movs	r1, #0
   30622:	4620      	mov	r0, r4
   30624:	f014 fe20 	bl	45268 <memset>
   30628:	f242 233f 	movw	r3, #8767	; 0x223f
		.message_id = NRF_CLOUD_FOTA_REQUEST_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   3062c:	480c      	ldr	r0, [pc, #48]	; (30660 <nrf_cloud_fota_update_check+0x58>)
	struct mqtt_publish_param param = {
   3062e:	f8ad 3014 	strh.w	r3, [sp, #20]
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   30632:	9003      	str	r0, [sp, #12]
	param.message.payload.len = strlen(JOB_REQUEST_LATEST_PAYLOAD);
   30634:	f7ec fe16 	bl	1d264 <strlen>
   30638:	9004      	str	r0, [sp, #16]
	param.message.topic = topic_req;
   3063a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   3063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	return publish(&param);
   30642:	4620      	mov	r0, r4
   30644:	f7ff fbd8 	bl	2fdf8 <publish>
}
   30648:	b007      	add	sp, #28
   3064a:	bd30      	pop	{r4, r5, pc}
		return -ENXIO;
   3064c:	f06f 0005 	mvn.w	r0, #5
   30650:	e7fa      	b.n	30648 <nrf_cloud_fota_update_check+0x40>
		return -EADDRNOTAVAIL;
   30652:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   30656:	e7f7      	b.n	30648 <nrf_cloud_fota_update_check+0x40>
   30658:	200254ac 	.word	0x200254ac
   3065c:	20020754 	.word	0x20020754
   30660:	0004d452 	.word	0x0004d452

00030664 <nrf_cloud_fota_mqtt_evt_handler>:

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt * evt)
{
   30664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (topic_rcv.topic.utf8 == NULL || topic_rcv.topic.size == 0) {
   30668:	4bb0      	ldr	r3, [pc, #704]	; (3092c <nrf_cloud_fota_mqtt_evt_handler+0x2c8>)
{
   3066a:	4607      	mov	r7, r0
	if (topic_rcv.topic.utf8 == NULL || topic_rcv.topic.size == 0) {
   3066c:	6818      	ldr	r0, [r3, #0]
{
   3066e:	b087      	sub	sp, #28
	if (topic_rcv.topic.utf8 == NULL || topic_rcv.topic.size == 0) {
   30670:	2800      	cmp	r0, #0
   30672:	f000 81b2 	beq.w	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
   30676:	685b      	ldr	r3, [r3, #4]
   30678:	2b00      	cmp	r3, #0
   3067a:	f000 81ae 	beq.w	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
		return 1;
	}

	int ret;

	switch (evt->type) {
   3067e:	783b      	ldrb	r3, [r7, #0]
   30680:	2b09      	cmp	r3, #9
   30682:	f200 813c 	bhi.w	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
   30686:	e8df f013 	tbh	[pc, r3, lsl #1]
   3068a:	01a8      	.short	0x01a8
   3068c:	000a01a8 	.word	0x000a01a8
   30690:	01a8017b 	.word	0x01a8017b
   30694:	01a801a8 	.word	0x01a801a8
   30698:	013c0124 	.word	0x013c0124
   3069c:	01a8      	.short	0x01a8
	case MQTT_EVT_PUBLISH: {
		int err = 0;
		bool start = false;
		const struct mqtt_publish_param *p = &evt->param.publish;

		struct mqtt_puback_param ack = {
   3069e:	8b3b      	ldrh	r3, [r7, #24]
			.message_id = p->message_id
		};

		if (strstr(topic_rcv.topic.utf8,
   306a0:	6879      	ldr	r1, [r7, #4]
		struct mqtt_puback_param ack = {
   306a2:	f8ad 300c 	strh.w	r3, [sp, #12]
		if (strstr(topic_rcv.topic.utf8,
   306a6:	f014 ffe9 	bl	4567c <strstr>
   306aa:	2800      	cmp	r0, #0
   306ac:	f000 8195 	beq.w	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
			   p->message.topic.topic.utf8) == NULL) {
			return 1;
		}

		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   306b0:	2304      	movs	r3, #4
   306b2:	f04f 0000 	mov.w	r0, #0
   306b6:	4a9e      	ldr	r2, [pc, #632]	; (30930 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   306b8:	f363 0007 	bfi	r0, r3, #0, #8
   306bc:	4b9d      	ldr	r3, [pc, #628]	; (30934 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
	return (current_fota.mqtt_payload != NULL &&
   306be:	4e9e      	ldr	r6, [pc, #632]	; (30938 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   306c0:	eba3 0802 	sub.w	r8, r3, r2
   306c4:	697b      	ldr	r3, [r7, #20]
   306c6:	f3c8 08c9 	ubfx	r8, r8, #3, #10
   306ca:	9300      	str	r3, [sp, #0]
   306cc:	f368 108f 	bfi	r0, r8, #6, #10
   306d0:	8b3b      	ldrh	r3, [r7, #24]
   306d2:	4a9a      	ldr	r2, [pc, #616]	; (3093c <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   306d4:	499a      	ldr	r1, [pc, #616]	; (30940 <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   306d6:	f011 fcb2 	bl	4203e <log_string_sync>
	return (current_fota.mqtt_payload != NULL &&
   306da:	6833      	ldr	r3, [r6, #0]
   306dc:	2b00      	cmp	r3, #0
   306de:	d04c      	beq.n	3077a <nrf_cloud_fota_mqtt_evt_handler+0x116>
   306e0:	6873      	ldr	r3, [r6, #4]
   306e2:	2b00      	cmp	r3, #0
   306e4:	d049      	beq.n	3077a <nrf_cloud_fota_mqtt_evt_handler+0x116>
			p->message_id,
			p->message.payload.len);

		if (is_fota_active()) {
			LOG_INF("Job in progress... skipping");
   306e6:	2303      	movs	r3, #3
   306e8:	f04f 0000 	mov.w	r0, #0
		bool start = false;
   306ec:	f04f 0900 	mov.w	r9, #0
			LOG_INF("Job in progress... skipping");
   306f0:	f363 0007 	bfi	r0, r3, #0, #8
   306f4:	f368 108f 	bfi	r0, r8, #6, #10
   306f8:	4992      	ldr	r1, [pc, #584]	; (30944 <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   306fa:	f011 fca0 	bl	4203e <log_string_sync>
		int err = 0;
   306fe:	464d      	mov	r5, r9
			goto send_ack;
		}

		start = true;
send_ack:
		if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   30700:	7b3b      	ldrb	r3, [r7, #12]
   30702:	2b00      	cmp	r3, #0
   30704:	f040 80cd 	bne.w	308a2 <nrf_cloud_fota_mqtt_evt_handler+0x23e>
			LOG_DBG("No ack required");
   30708:	f04f 0000 	mov.w	r0, #0
   3070c:	2304      	movs	r3, #4
   3070e:	4a8b      	ldr	r2, [pc, #556]	; (3093c <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   30710:	f363 0007 	bfi	r0, r3, #0, #8
   30714:	498c      	ldr	r1, [pc, #560]	; (30948 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   30716:	f368 108f 	bfi	r0, r8, #6, #10
		} else {
			ret = mqtt_publish_qos1_ack(client_mqtt, &ack);
			if (ret) {
				LOG_ERR("MQTT ACK failed: %d", ret);
   3071a:	f011 fc90 	bl	4203e <log_string_sync>
			}
		}

		if (start) {
   3071e:	f1b9 0f00 	cmp.w	r9, #0
   30722:	d023      	beq.n	3076c <nrf_cloud_fota_mqtt_evt_handler+0x108>
	ret = fota_download_start(job->host, job->path, sec_tag, NULL, fragment_size);
   30724:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   30728:	2300      	movs	r3, #0
   3072a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3072e:	9300      	str	r3, [sp, #0]
   30730:	f001 fa0e 	bl	31b50 <fota_download_start>
	if (ret) {
   30734:	4604      	mov	r4, r0
   30736:	2800      	cmp	r0, #0
   30738:	f000 80c6 	beq.w	308c8 <nrf_cloud_fota_mqtt_evt_handler+0x264>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   3073c:	2301      	movs	r3, #1
   3073e:	f04f 0000 	mov.w	r0, #0
   30742:	f363 0007 	bfi	r0, r3, #0, #8
   30746:	f368 108f 	bfi	r0, r8, #6, #10
   3074a:	4622      	mov	r2, r4
   3074c:	497f      	ldr	r1, [pc, #508]	; (3094c <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   3074e:	f011 fc76 	bl	4203e <log_string_sync>
		job->status = NRF_FOTA_FAILED;
   30752:	2002      	movs	r0, #2
		job->error = NRF_FOTA_ERROR_DOWNLOAD_START;
   30754:	2301      	movs	r3, #1
		job->status = NRF_FOTA_FAILED;
   30756:	7230      	strb	r0, [r6, #8]
		job->error = NRF_FOTA_ERROR_DOWNLOAD_START;
   30758:	7733      	strb	r3, [r6, #28]
		send_event(NRF_FOTA_EVT_START, job);
   3075a:	f7ff fc97 	bl	3008c <send_event.constprop.3>
			ret = start_job(&current_fota);
			(void)send_job_update(&current_fota);
   3075e:	4876      	ldr	r0, [pc, #472]	; (30938 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   30760:	f7ff fb96 	bl	2fe90 <send_job_update>
			if (ret) {
   30764:	b114      	cbz	r4, 3076c <nrf_cloud_fota_mqtt_evt_handler+0x108>
				cleanup_job(&current_fota);
   30766:	f7ff fcb1 	bl	300cc <cleanup_job.constprop.4>
				ret = 0;
   3076a:	2400      	movs	r4, #0
			}
		}

		return (err ? err : ret);
   3076c:	2d00      	cmp	r5, #0
   3076e:	bf08      	it	eq
   30770:	4625      	moveq	r5, r4
		return 1;
	break;
	}

	return 0;
   30772:	4628      	mov	r0, r5
   30774:	b007      	add	sp, #28
   30776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		current_fota.mqtt_payload_size = p->message.payload.len + 1;
   3077a:	6978      	ldr	r0, [r7, #20]
			nrf_cloud_calloc(current_fota.mqtt_payload_size,1);
   3077c:	2101      	movs	r1, #1
		current_fota.mqtt_payload_size = p->message.payload.len + 1;
   3077e:	3001      	adds	r0, #1
   30780:	6070      	str	r0, [r6, #4]
			nrf_cloud_calloc(current_fota.mqtt_payload_size,1);
   30782:	f014 fd1b 	bl	451bc <k_calloc>
   30786:	4605      	mov	r5, r0
		current_fota.mqtt_payload =
   30788:	6030      	str	r0, [r6, #0]
		if (!current_fota.mqtt_payload) {
   3078a:	b968      	cbnz	r0, 307a8 <nrf_cloud_fota_mqtt_evt_handler+0x144>
			LOG_ERR("Unable to allocate memory for job");
   3078c:	2301      	movs	r3, #1
   3078e:	f04f 0000 	mov.w	r0, #0
   30792:	f363 0007 	bfi	r0, r3, #0, #8
   30796:	f368 108f 	bfi	r0, r8, #6, #10
   3079a:	496d      	ldr	r1, [pc, #436]	; (30950 <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
		bool start = false;
   3079c:	46a9      	mov	r9, r5
			LOG_ERR("Unable to allocate memory for job");
   3079e:	f011 fc4e 	bl	4203e <log_string_sync>
			err = -ENOMEM;
   307a2:	f06f 050b 	mvn.w	r5, #11
			goto send_ack;
   307a6:	e7ab      	b.n	30700 <nrf_cloud_fota_mqtt_evt_handler+0x9c>
		ret = mqtt_readall_publish_payload(client_mqtt,
   307a8:	4b6a      	ldr	r3, [pc, #424]	; (30954 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   307aa:	4601      	mov	r1, r0
   307ac:	697a      	ldr	r2, [r7, #20]
   307ae:	6818      	ldr	r0, [r3, #0]
   307b0:	f013 f869 	bl	43886 <mqtt_readall_publish_payload>
		if (ret) {
   307b4:	4604      	mov	r4, r0
   307b6:	b170      	cbz	r0, 307d6 <nrf_cloud_fota_mqtt_evt_handler+0x172>
			LOG_ERR("Error reading MQTTT payload: %d", ret);
   307b8:	2301      	movs	r3, #1
   307ba:	f04f 0000 	mov.w	r0, #0
   307be:	f363 0007 	bfi	r0, r3, #0, #8
   307c2:	f368 108f 	bfi	r0, r8, #6, #10
   307c6:	4622      	mov	r2, r4
   307c8:	4963      	ldr	r1, [pc, #396]	; (30958 <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
   307ca:	f011 fc38 	bl	4203e <log_string_sync>
			goto send_ack;
   307ce:	4625      	mov	r5, r4
		bool start = false;
   307d0:	f04f 0900 	mov.w	r9, #0
			goto send_ack;
   307d4:	e794      	b.n	30700 <nrf_cloud_fota_mqtt_evt_handler+0x9c>
	char * save_ptr = NULL;
   307d6:	9004      	str	r0, [sp, #16]
	char * end_ptr = &job->mqtt_payload[job->mqtt_payload_size - 1];
   307d8:	e9d6 0300 	ldrd	r0, r3, [r6]
   307dc:	3b01      	subs	r3, #1
   307de:	4403      	add	r3, r0
   307e0:	9305      	str	r3, [sp, #20]
	LOG_DBG("Parsing: %s", log_strdup(job->mqtt_payload));
   307e2:	f04f 0500 	mov.w	r5, #0
   307e6:	2304      	movs	r3, #4
   307e8:	f363 0507 	bfi	r5, r3, #0, #8
   307ec:	f011 fc3a 	bl	42064 <log_strdup>
   307f0:	f368 158f 	bfi	r5, r8, #6, #10
   307f4:	4603      	mov	r3, r0
   307f6:	4a59      	ldr	r2, [pc, #356]	; (3095c <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   307f8:	4959      	ldr	r1, [pc, #356]	; (30960 <nrf_cloud_fota_mqtt_evt_handler+0x2fc>)
   307fa:	4628      	mov	r0, r5
   307fc:	f011 fc1f 	bl	4203e <log_string_sync>
	job->id = strtok_r(job->mqtt_payload, "[\",]", &save_ptr);
   30800:	aa04      	add	r2, sp, #16
   30802:	4958      	ldr	r1, [pc, #352]	; (30964 <nrf_cloud_fota_mqtt_evt_handler+0x300>)
   30804:	6830      	ldr	r0, [r6, #0]
   30806:	f014 ff95 	bl	45734 <strtok_r>
   3080a:	60f0      	str	r0, [r6, #12]
	if (!job->id) {
   3080c:	2800      	cmp	r0, #0
   3080e:	d03a      	beq.n	30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	tok = strtok_r(NULL, ",", &save_ptr);
   30810:	aa04      	add	r2, sp, #16
   30812:	4955      	ldr	r1, [pc, #340]	; (30968 <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   30814:	4620      	mov	r0, r4
   30816:	f014 ff8d 	bl	45734 <strtok_r>
	if (!tok) {
   3081a:	4605      	mov	r5, r0
   3081c:	2800      	cmp	r0, #0
   3081e:	d032      	beq.n	30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	errno = 0;
   30820:	f012 fa7b 	bl	42d1a <__errno>
	job->type = (int)strtol(tok, &end_ptr,10);
   30824:	220a      	movs	r2, #10
	errno = 0;
   30826:	6004      	str	r4, [r0, #0]
	job->type = (int)strtol(tok, &end_ptr,10);
   30828:	a905      	add	r1, sp, #20
   3082a:	4628      	mov	r0, r5
   3082c:	f00f fde8 	bl	40400 <strtol>
   30830:	7270      	strb	r0, [r6, #9]
	if (errno) {
   30832:	f012 fa72 	bl	42d1a <__errno>
   30836:	6803      	ldr	r3, [r0, #0]
   30838:	bb2b      	cbnz	r3, 30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	tok = strtok_r(NULL, ",", &save_ptr);
   3083a:	aa04      	add	r2, sp, #16
   3083c:	494a      	ldr	r1, [pc, #296]	; (30968 <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   3083e:	4620      	mov	r0, r4
   30840:	f014 ff78 	bl	45734 <strtok_r>
	if (!tok) {
   30844:	4605      	mov	r5, r0
   30846:	b1f0      	cbz	r0, 30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	errno = 0;
   30848:	f012 fa67 	bl	42d1a <__errno>
	job->file_size = (int)strtol(tok, &end_ptr,10);
   3084c:	220a      	movs	r2, #10
	errno = 0;
   3084e:	6004      	str	r4, [r0, #0]
	job->file_size = (int)strtol(tok, &end_ptr,10);
   30850:	a905      	add	r1, sp, #20
   30852:	4628      	mov	r0, r5
   30854:	f00f fdd4 	bl	40400 <strtol>
   30858:	61b0      	str	r0, [r6, #24]
	if (errno) {
   3085a:	f012 fa5e 	bl	42d1a <__errno>
   3085e:	6804      	ldr	r4, [r0, #0]
   30860:	b98c      	cbnz	r4, 30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	job->host = strtok_r(NULL, "\",", &save_ptr);
   30862:	aa04      	add	r2, sp, #16
   30864:	4941      	ldr	r1, [pc, #260]	; (3096c <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   30866:	4620      	mov	r0, r4
   30868:	f014 ff64 	bl	45734 <strtok_r>
   3086c:	6130      	str	r0, [r6, #16]
	if (!job->host) {
   3086e:	b150      	cbz	r0, 30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
	job->path = strtok_r(NULL, "\",]", &save_ptr);
   30870:	aa04      	add	r2, sp, #16
   30872:	493f      	ldr	r1, [pc, #252]	; (30970 <nrf_cloud_fota_mqtt_evt_handler+0x30c>)
   30874:	4620      	mov	r0, r4
   30876:	f014 ff5d 	bl	45734 <strtok_r>
   3087a:	6170      	str	r0, [r6, #20]
	if (!job->path) {
   3087c:	b118      	cbz	r0, 30886 <nrf_cloud_fota_mqtt_evt_handler+0x222>
		int err = 0;
   3087e:	4625      	mov	r5, r4
		start = true;
   30880:	f04f 0901 	mov.w	r9, #1
   30884:	e73c      	b.n	30700 <nrf_cloud_fota_mqtt_evt_handler+0x9c>
	return -EINVAL;
   30886:	f06f 0515 	mvn.w	r5, #21
	nrf_cloud_free(job->mqtt_payload);
   3088a:	6830      	ldr	r0, [r6, #0]
   3088c:	f014 fc91 	bl	451b2 <k_free>
	memset(job, 0, sizeof(*job));
   30890:	2228      	movs	r2, #40	; 0x28
   30892:	2100      	movs	r1, #0
   30894:	4828      	ldr	r0, [pc, #160]	; (30938 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   30896:	f014 fce7 	bl	45268 <memset>
		bool start = false;
   3089a:	f04f 0900 	mov.w	r9, #0
	return -EINVAL;
   3089e:	462c      	mov	r4, r5
   308a0:	e72e      	b.n	30700 <nrf_cloud_fota_mqtt_evt_handler+0x9c>
			ret = mqtt_publish_qos1_ack(client_mqtt, &ack);
   308a2:	4b2c      	ldr	r3, [pc, #176]	; (30954 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   308a4:	a903      	add	r1, sp, #12
   308a6:	6818      	ldr	r0, [r3, #0]
   308a8:	f012 fec2 	bl	43630 <mqtt_publish_qos1_ack>
			if (ret) {
   308ac:	4604      	mov	r4, r0
   308ae:	2800      	cmp	r0, #0
   308b0:	f43f af35 	beq.w	3071e <nrf_cloud_fota_mqtt_evt_handler+0xba>
				LOG_ERR("MQTT ACK failed: %d", ret);
   308b4:	f04f 0000 	mov.w	r0, #0
   308b8:	2301      	movs	r3, #1
   308ba:	f363 0007 	bfi	r0, r3, #0, #8
   308be:	f368 108f 	bfi	r0, r8, #6, #10
   308c2:	4622      	mov	r2, r4
   308c4:	492b      	ldr	r1, [pc, #172]	; (30974 <nrf_cloud_fota_mqtt_evt_handler+0x310>)
   308c6:	e728      	b.n	3071a <nrf_cloud_fota_mqtt_evt_handler+0xb6>
		job->status = NRF_FOTA_DOWNLOADING;
   308c8:	2307      	movs	r3, #7
		job->sent_dl_progress = 0;
   308ca:	e9c6 0008 	strd	r0, r0, [r6, #32]
		job->status = NRF_FOTA_DOWNLOADING;
   308ce:	7233      	strb	r3, [r6, #8]
   308d0:	e743      	b.n	3075a <nrf_cloud_fota_mqtt_evt_handler+0xf6>
		if (evt->param.suback.message_id !=
   308d2:	f242 233e 	movw	r3, #8766	; 0x223e
   308d6:	88ba      	ldrh	r2, [r7, #4]
   308d8:	429a      	cmp	r2, r3
   308da:	d17e      	bne.n	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
		LOG_DBG("MQTT_EVT_SUBACK");
   308dc:	2304      	movs	r3, #4
   308de:	f04f 0000 	mov.w	r0, #0
   308e2:	4a13      	ldr	r2, [pc, #76]	; (30930 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   308e4:	f363 0007 	bfi	r0, r3, #0, #8
   308e8:	4b12      	ldr	r3, [pc, #72]	; (30934 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   308ea:	4923      	ldr	r1, [pc, #140]	; (30978 <nrf_cloud_fota_mqtt_evt_handler+0x314>)
   308ec:	1a9b      	subs	r3, r3, r2
   308ee:	08db      	lsrs	r3, r3, #3
   308f0:	f363 108f 	bfi	r0, r3, #6, #10
   308f4:	4a11      	ldr	r2, [pc, #68]	; (3093c <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   308f6:	f011 fba2 	bl	4203e <log_string_sync>
		nrf_cloud_fota_update_check();
   308fa:	f7ff fe85 	bl	30608 <nrf_cloud_fota_update_check>
	return 0;
   308fe:	2500      	movs	r5, #0
   30900:	e737      	b.n	30772 <nrf_cloud_fota_mqtt_evt_handler+0x10e>
		if (evt->param.unsuback.message_id !=
   30902:	f242 233e 	movw	r3, #8766	; 0x223e
   30906:	88ba      	ldrh	r2, [r7, #4]
   30908:	429a      	cmp	r2, r3
   3090a:	d166      	bne.n	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   3090c:	2304      	movs	r3, #4
   3090e:	f04f 0000 	mov.w	r0, #0
   30912:	4a07      	ldr	r2, [pc, #28]	; (30930 <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   30914:	f363 0007 	bfi	r0, r3, #0, #8
   30918:	4b06      	ldr	r3, [pc, #24]	; (30934 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   3091a:	4918      	ldr	r1, [pc, #96]	; (3097c <nrf_cloud_fota_mqtt_evt_handler+0x318>)
   3091c:	1a9b      	subs	r3, r3, r2
   3091e:	08db      	lsrs	r3, r3, #3
   30920:	f363 108f 	bfi	r0, r3, #6, #10
   30924:	4a05      	ldr	r2, [pc, #20]	; (3093c <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
   30926:	f011 fb8a 	bl	4203e <log_string_sync>
   3092a:	e7e8      	b.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
   3092c:	20020748 	.word	0x20020748
   30930:	00046878 	.word	0x00046878
   30934:	00046960 	.word	0x00046960
   30938:	200254b0 	.word	0x200254b0
   3093c:	0004d15e 	.word	0x0004d15e
   30940:	0004c858 	.word	0x0004c858
   30944:	0004d342 	.word	0x0004d342
   30948:	0004d3b8 	.word	0x0004d3b8
   3094c:	0004d3e0 	.word	0x0004d3e0
   30950:	0004d35e 	.word	0x0004d35e
   30954:	200254ac 	.word	0x200254ac
   30958:	0004d380 	.word	0x0004d380
   3095c:	0004d140 	.word	0x0004d140
   30960:	0004d3a0 	.word	0x0004d3a0
   30964:	0004d3b0 	.word	0x0004d3b0
   30968:	0004d3b6 	.word	0x0004d3b6
   3096c:	0004d3b5 	.word	0x0004d3b5
   30970:	0004d3b1 	.word	0x0004d3b1
   30974:	0004d3cc 	.word	0x0004d3cc
   30978:	0004d402 	.word	0x0004d402
   3097c:	0004c90e 	.word	0x0004c90e
		if ((evt->param.puback.message_id !=
   30980:	88bb      	ldrh	r3, [r7, #4]
   30982:	f5a3 5208 	sub.w	r2, r3, #8704	; 0x2200
   30986:	3a3f      	subs	r2, #63	; 0x3f
   30988:	2a01      	cmp	r2, #1
   3098a:	d826      	bhi.n	309da <nrf_cloud_fota_mqtt_evt_handler+0x376>
		LOG_DBG("MQTT_EVT_PUBACK: msg id %d",
   3098c:	2204      	movs	r2, #4
   3098e:	f04f 0000 	mov.w	r0, #0
   30992:	4913      	ldr	r1, [pc, #76]	; (309e0 <nrf_cloud_fota_mqtt_evt_handler+0x37c>)
   30994:	f362 0007 	bfi	r0, r2, #0, #8
   30998:	4a12      	ldr	r2, [pc, #72]	; (309e4 <nrf_cloud_fota_mqtt_evt_handler+0x380>)
   3099a:	1a52      	subs	r2, r2, r1
   3099c:	08d2      	lsrs	r2, r2, #3
   3099e:	f362 108f 	bfi	r0, r2, #6, #10
   309a2:	4911      	ldr	r1, [pc, #68]	; (309e8 <nrf_cloud_fota_mqtt_evt_handler+0x384>)
   309a4:	4a11      	ldr	r2, [pc, #68]	; (309ec <nrf_cloud_fota_mqtt_evt_handler+0x388>)
   309a6:	f011 fb4a 	bl	4203e <log_string_sync>
		if (evt->param.puback.message_id ==
   309aa:	f242 233f 	movw	r3, #8767	; 0x223f
   309ae:	88ba      	ldrh	r2, [r7, #4]
   309b0:	429a      	cmp	r2, r3
   309b2:	d0a4      	beq.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
		switch (saved_job.validate) {
   309b4:	4b0e      	ldr	r3, [pc, #56]	; (309f0 <nrf_cloud_fota_mqtt_evt_handler+0x38c>)
   309b6:	7818      	ldrb	r0, [r3, #0]
   309b8:	2801      	cmp	r0, #1
   309ba:	d009      	beq.n	309d0 <nrf_cloud_fota_mqtt_evt_handler+0x36c>
   309bc:	2800      	cmp	r0, #0
   309be:	d09e      	beq.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
   309c0:	2804      	cmp	r0, #4
   309c2:	d89c      	bhi.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
			save_validate_status(saved_job.id,saved_job.type,
   309c4:	2205      	movs	r2, #5
   309c6:	7859      	ldrb	r1, [r3, #1]
   309c8:	1c98      	adds	r0, r3, #2
   309ca:	f7ff fab9 	bl	2ff40 <save_validate_status>
			break;
   309ce:	e796      	b.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
			send_event(NRF_FOTA_EVT_DONE,&current_fota);
   309d0:	f7ff fb5c 	bl	3008c <send_event.constprop.3>
			cleanup_job(&current_fota);
   309d4:	f7ff fb7a 	bl	300cc <cleanup_job.constprop.4>
			break;
   309d8:	e791      	b.n	308fe <nrf_cloud_fota_mqtt_evt_handler+0x29a>
		return 1;
   309da:	2501      	movs	r5, #1
   309dc:	e6c9      	b.n	30772 <nrf_cloud_fota_mqtt_evt_handler+0x10e>
   309de:	bf00      	nop
   309e0:	00046878 	.word	0x00046878
   309e4:	00046960 	.word	0x00046960
   309e8:	0004d416 	.word	0x0004d416
   309ec:	0004d15e 	.word	0x0004d15e
   309f0:	2002096e 	.word	0x2002096e

000309f4 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   309f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   309f6:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   309fa:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   309fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   30a00:	d90e      	bls.n	30a20 <fragment_evt_send+0x2c>
   30a02:	490f      	ldr	r1, [pc, #60]	; (30a40 <fragment_evt_send+0x4c>)
   30a04:	f240 1339 	movw	r3, #313	; 0x139
   30a08:	4a0e      	ldr	r2, [pc, #56]	; (30a44 <fragment_evt_send+0x50>)
   30a0a:	480f      	ldr	r0, [pc, #60]	; (30a48 <fragment_evt_send+0x54>)
   30a0c:	f011 f8ec 	bl	41be8 <printk>
   30a10:	480e      	ldr	r0, [pc, #56]	; (30a4c <fragment_evt_send+0x58>)
   30a12:	f011 f8e9 	bl	41be8 <printk>
   30a16:	f240 1139 	movw	r1, #313	; 0x139
   30a1a:	480a      	ldr	r0, [pc, #40]	; (30a44 <fragment_evt_send+0x50>)
   30a1c:	f011 fafe 	bl	4201c <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   30a20:	2300      	movs	r3, #0
   30a22:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   30a26:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   30a28:	9302      	str	r3, [sp, #8]
   30a2a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   30a2e:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   30a30:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   30a32:	f641 1308 	movw	r3, #6408	; 0x1908
   30a36:	58e3      	ldr	r3, [r4, r3]
   30a38:	4798      	blx	r3
}
   30a3a:	b004      	add	sp, #16
   30a3c:	bd10      	pop	{r4, pc}
   30a3e:	bf00      	nop
   30a40:	0004d927 	.word	0x0004d927
   30a44:	0004d8e2 	.word	0x0004d8e2
   30a48:	0004825b 	.word	0x0004825b
   30a4c:	0004d93e 	.word	0x0004d93e

00030a50 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   30a50:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   30a52:	4605      	mov	r5, r0
{
   30a54:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   30a56:	b1f8      	cbz	r0, 30a98 <download_client_init+0x48>
   30a58:	b1f1      	cbz	r1, 30a98 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   30a5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30a5e:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   30a60:	f641 1308 	movw	r3, #6408	; 0x1908
   30a64:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   30a66:	2200      	movs	r2, #0
   30a68:	2300      	movs	r3, #0
   30a6a:	2400      	movs	r4, #0
   30a6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   30a70:	230e      	movs	r3, #14
   30a72:	9000      	str	r0, [sp, #0]
   30a74:	e9cd 3403 	strd	r3, r4, [sp, #12]
   30a78:	f600 1108 	addw	r1, r0, #2312	; 0x908
   30a7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   30a80:	4b07      	ldr	r3, [pc, #28]	; (30aa0 <download_client_init+0x50>)
   30a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   30a86:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   30a8a:	f00d fcfd 	bl	3e488 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   30a8e:	f8c5 0838 	str.w	r0, [r5, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   30a92:	4620      	mov	r0, r4
}
   30a94:	b009      	add	sp, #36	; 0x24
   30a96:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   30a98:	f06f 0015 	mvn.w	r0, #21
   30a9c:	e7fa      	b.n	30a94 <download_client_init+0x44>
   30a9e:	bf00      	nop
   30aa0:	00031001 	.word	0x00031001

00030aa4 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   30aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30aa8:	4688      	mov	r8, r1
   30aaa:	b0c5      	sub	sp, #276	; 0x114
   30aac:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   30aae:	4605      	mov	r5, r0
   30ab0:	2800      	cmp	r0, #0
   30ab2:	f000 8244 	beq.w	30f3e <download_client_connect+0x49a>
   30ab6:	2900      	cmp	r1, #0
   30ab8:	f000 8241 	beq.w	30f3e <download_client_connect+0x49a>
   30abc:	2a00      	cmp	r2, #0
   30abe:	f000 823e 	beq.w	30f3e <download_client_connect+0x49a>
		return -EINVAL;
	}

	if (client->fd != -1) {
   30ac2:	6803      	ldr	r3, [r0, #0]
   30ac4:	3301      	adds	r3, #1
   30ac6:	f040 823d 	bne.w	30f44 <download_client_connect+0x4a0>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   30aca:	6893      	ldr	r3, [r2, #8]
   30acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   30ad0:	d913      	bls.n	30afa <download_client_connect+0x56>
		LOG_ERR("The configured fragment size is larger than buffer");
   30ad2:	2301      	movs	r3, #1
   30ad4:	f04f 0000 	mov.w	r0, #0
   30ad8:	4ac5      	ldr	r2, [pc, #788]	; (30df0 <download_client_connect+0x34c>)
   30ada:	f363 0007 	bfi	r0, r3, #0, #8
   30ade:	4bc5      	ldr	r3, [pc, #788]	; (30df4 <download_client_connect+0x350>)
   30ae0:	49c5      	ldr	r1, [pc, #788]	; (30df8 <download_client_connect+0x354>)
   30ae2:	1a9b      	subs	r3, r3, r2
   30ae4:	08db      	lsrs	r3, r3, #3
   30ae6:	f363 108f 	bfi	r0, r3, #6, #10
   30aea:	f011 faa8 	bl	4203e <log_string_sync>
		return -E2BIG;
   30aee:	f06f 0406 	mvn.w	r4, #6
	if (err) {
		return err;
	}

	return 0;
}
   30af2:	4620      	mov	r0, r4
   30af4:	b045      	add	sp, #276	; 0x114
   30af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   30afa:	6854      	ldr	r4, [r2, #4]
	struct addrinfo hints = {
   30afc:	2100      	movs	r1, #0
   30afe:	2250      	movs	r2, #80	; 0x50
   30b00:	a81c      	add	r0, sp, #112	; 0x70
   30b02:	f014 fbb1 	bl	45268 <memset>
			} : NULL,
   30b06:	b16c      	cbz	r4, 30b24 <download_client_connect+0x80>
			&(struct addrinfo) {
   30b08:	2250      	movs	r2, #80	; 0x50
   30b0a:	2100      	movs	r1, #0
   30b0c:	a830      	add	r0, sp, #192	; 0xc0
   30b0e:	f014 fbab 	bl	45268 <memset>
   30b12:	2304      	movs	r3, #4
   30b14:	2266      	movs	r2, #102	; 0x66
   30b16:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   30b1a:	f240 2302 	movw	r3, #514	; 0x202
   30b1e:	9437      	str	r4, [sp, #220]	; 0xdc
   30b20:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   30b22:	ac30      	add	r4, sp, #192	; 0xc0
	struct addrinfo hints = {
   30b24:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   30b26:	2240      	movs	r2, #64	; 0x40
   30b28:	a90c      	add	r1, sp, #48	; 0x30
   30b2a:	4640      	mov	r0, r8
	struct addrinfo hints = {
   30b2c:	941c      	str	r4, [sp, #112]	; 0x70
   30b2e:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   30b30:	f000 fc3c 	bl	313ac <url_parse_host>
	if (err) {
   30b34:	4604      	mov	r4, r0
   30b36:	2800      	cmp	r0, #0
   30b38:	d1db      	bne.n	30af2 <download_client_connect+0x4e>
	return zsock_getaddrinfo(host, service, hints, res);
   30b3a:	4601      	mov	r1, r0
   30b3c:	ab05      	add	r3, sp, #20
   30b3e:	aa1c      	add	r2, sp, #112	; 0x70
   30b40:	a80c      	add	r0, sp, #48	; 0x30
   30b42:	f011 fddf 	bl	42704 <zsock_getaddrinfo>
	if (err) {
   30b46:	4604      	mov	r4, r0
   30b48:	b1b0      	cbz	r0, 30b78 <download_client_connect+0xd4>
		LOG_WRN("Failed to resolve hostname %s on %s",
   30b4a:	2302      	movs	r3, #2
   30b4c:	f04f 0400 	mov.w	r4, #0
   30b50:	4aa7      	ldr	r2, [pc, #668]	; (30df0 <download_client_connect+0x34c>)
   30b52:	f363 0407 	bfi	r4, r3, #0, #8
   30b56:	4ba7      	ldr	r3, [pc, #668]	; (30df4 <download_client_connect+0x350>)
   30b58:	a80c      	add	r0, sp, #48	; 0x30
   30b5a:	1a9b      	subs	r3, r3, r2
   30b5c:	08db      	lsrs	r3, r3, #3
   30b5e:	f363 148f 	bfi	r4, r3, #6, #10
   30b62:	f011 fa7f 	bl	42064 <log_strdup>
   30b66:	4ba5      	ldr	r3, [pc, #660]	; (30dfc <download_client_connect+0x358>)
   30b68:	4602      	mov	r2, r0
   30b6a:	49a5      	ldr	r1, [pc, #660]	; (30e00 <download_client_connect+0x35c>)
   30b6c:	4620      	mov	r0, r4
   30b6e:	f011 fa66 	bl	4203e <log_string_sync>
		return -EHOSTUNREACH;
   30b72:	f06f 0475 	mvn.w	r4, #117	; 0x75
   30b76:	e7bc      	b.n	30af2 <download_client_connect+0x4e>
	*sa = *(ai->ai_addr);
   30b78:	f8dd c014 	ldr.w	ip, [sp, #20]
   30b7c:	af06      	add	r7, sp, #24
   30b7e:	f8dc 3018 	ldr.w	r3, [ip, #24]
   30b82:	f103 0e18 	add.w	lr, r3, #24
   30b86:	463a      	mov	r2, r7
   30b88:	6818      	ldr	r0, [r3, #0]
   30b8a:	6859      	ldr	r1, [r3, #4]
   30b8c:	3308      	adds	r3, #8
   30b8e:	c203      	stmia	r2!, {r0, r1}
   30b90:	4573      	cmp	r3, lr
   30b92:	4617      	mov	r7, r2
   30b94:	d1f7      	bne.n	30b86 <download_client_connect+0xe2>
	zsock_freeaddrinfo(ai);
   30b96:	4660      	mov	r0, ip
   30b98:	f011 fdb6 	bl	42708 <zsock_freeaddrinfo>
	client->config = *config;
   30b9c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   30ba0:	f605 0318 	addw	r3, r5, #2072	; 0x818
   30ba4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	client->host = host;
   30ba8:	f8c5 8810 	str.w	r8, [r5, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   30bac:	aa05      	add	r2, sp, #20
   30bae:	f605 0124 	addw	r1, r5, #2084	; 0x824
   30bb2:	4640      	mov	r0, r8
   30bb4:	f000 fbc4 	bl	31340 <url_parse_proto>
	if (err) {
   30bb8:	b150      	cbz	r0, 30bd0 <download_client_connect+0x12c>
		type = SOCK_STREAM;
   30bba:	2301      	movs	r3, #1
   30bbc:	9305      	str	r3, [sp, #20]
		if (dl->config.sec_tag != -1) {
   30bbe:	f8d5 3818 	ldr.w	r3, [r5, #2072]	; 0x818
   30bc2:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   30bc4:	bf14      	ite	ne
   30bc6:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   30bca:	2306      	moveq	r3, #6
   30bcc:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   30bd0:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   30bd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   30bd8:	2a11      	cmp	r2, #17
   30bda:	f000 81aa 	beq.w	30f32 <download_client_connect+0x48e>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   30bde:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30be2:	d149      	bne.n	30c78 <download_client_connect+0x1d4>
		if (dl->config.sec_tag == -1) {
   30be4:	f8d5 3818 	ldr.w	r3, [r5, #2072]	; 0x818
   30be8:	3301      	adds	r3, #1
   30bea:	d145      	bne.n	30c78 <download_client_connect+0x1d4>
			LOG_WRN("No security tag provided for TLS/DTLS");
   30bec:	2302      	movs	r3, #2
   30bee:	f04f 0000 	mov.w	r0, #0
   30bf2:	4a7f      	ldr	r2, [pc, #508]	; (30df0 <download_client_connect+0x34c>)
   30bf4:	f363 0007 	bfi	r0, r3, #0, #8
   30bf8:	4b7e      	ldr	r3, [pc, #504]	; (30df4 <download_client_connect+0x350>)
   30bfa:	4982      	ldr	r1, [pc, #520]	; (30e04 <download_client_connect+0x360>)
   30bfc:	1a9b      	subs	r3, r3, r2
   30bfe:	08db      	lsrs	r3, r3, #3
   30c00:	f363 108f 	bfi	r0, r3, #6, #10
   30c04:	f011 fa1b 	bl	4203e <log_string_sync>
			return -EINVAL;
   30c08:	f06f 0415 	mvn.w	r4, #21
	if (client->fd < 0) {
   30c0c:	682e      	ldr	r6, [r5, #0]
   30c0e:	2e00      	cmp	r6, #0
   30c10:	f6ff af6f 	blt.w	30af2 <download_client_connect+0x4e>
	struct timeval timeo = {
   30c14:	2204      	movs	r2, #4
   30c16:	2300      	movs	r3, #0
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   30c18:	f04f 0000 	mov.w	r0, #0
	struct timeval timeo = {
   30c1c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   30c20:	2303      	movs	r3, #3
   30c22:	4d74      	ldr	r5, [pc, #464]	; (30df4 <download_client_connect+0x350>)
   30c24:	f363 0007 	bfi	r0, r3, #0, #8
   30c28:	4b71      	ldr	r3, [pc, #452]	; (30df0 <download_client_connect+0x34c>)
   30c2a:	4977      	ldr	r1, [pc, #476]	; (30e08 <download_client_connect+0x364>)
   30c2c:	1aed      	subs	r5, r5, r3
   30c2e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   30c32:	f365 108f 	bfi	r0, r5, #6, #10
   30c36:	f011 fa02 	bl	4203e <log_string_sync>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30c3a:	2308      	movs	r3, #8
   30c3c:	2214      	movs	r2, #20
   30c3e:	9300      	str	r3, [sp, #0]
   30c40:	2101      	movs	r1, #1
   30c42:	ab1c      	add	r3, sp, #112	; 0x70
   30c44:	4630      	mov	r0, r6
   30c46:	f011 fe1e 	bl	42886 <z_impl_zsock_setsockopt>
	if (err) {
   30c4a:	4604      	mov	r4, r0
   30c4c:	2800      	cmp	r0, #0
   30c4e:	f43f af50 	beq.w	30af2 <download_client_connect+0x4e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   30c52:	2302      	movs	r3, #2
   30c54:	f04f 0400 	mov.w	r4, #0
   30c58:	f363 0407 	bfi	r4, r3, #0, #8
   30c5c:	f012 f85d 	bl	42d1a <__errno>
   30c60:	f365 148f 	bfi	r4, r5, #6, #10
   30c64:	6802      	ldr	r2, [r0, #0]
   30c66:	4969      	ldr	r1, [pc, #420]	; (30e0c <download_client_connect+0x368>)
   30c68:	4620      	mov	r0, r4
   30c6a:	f011 f9e8 	bl	4203e <log_string_sync>
		return -errno;
   30c6e:	f012 f854 	bl	42d1a <__errno>
   30c72:	6804      	ldr	r4, [r0, #0]
   30c74:	4264      	negs	r4, r4
	if (err) {
   30c76:	e73c      	b.n	30af2 <download_client_connect+0x4e>
	err = url_parse_port(host, &port);
   30c78:	f10d 0112 	add.w	r1, sp, #18
   30c7c:	4640      	mov	r0, r8
   30c7e:	f000 fbbf 	bl	31400 <url_parse_port>
	if (err) {
   30c82:	b130      	cbz	r0, 30c92 <download_client_connect+0x1ee>
		switch (dl->proto) {
   30c84:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   30c88:	2b11      	cmp	r3, #17
   30c8a:	d044      	beq.n	30d16 <download_client_connect+0x272>
   30c8c:	dc32      	bgt.n	30cf4 <download_client_connect+0x250>
   30c8e:	2b06      	cmp	r3, #6
   30c90:	d03f      	beq.n	30d12 <download_client_connect+0x26e>
	switch (sa->sa_family) {
   30c92:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   30c96:	2801      	cmp	r0, #1
   30c98:	d040      	beq.n	30d1c <download_client_connect+0x278>
   30c9a:	2802      	cmp	r0, #2
   30c9c:	f040 814c 	bne.w	30f38 <download_client_connect+0x494>
		addrlen = sizeof(struct sockaddr_in6);
   30ca0:	f04f 0918 	mov.w	r9, #24
		SIN6(sa)->sin6_port = htons(port);
   30ca4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   30ca8:	0213      	lsls	r3, r2, #8
   30caa:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   30cae:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   30cb2:	9905      	ldr	r1, [sp, #20]
   30cb4:	f8d5 2824 	ldr.w	r2, [r5, #2084]	; 0x824
	return z_impl_zsock_socket(family, type, proto);
   30cb8:	f7f4 fb96 	bl	253e8 <z_impl_zsock_socket>
   30cbc:	4f4d      	ldr	r7, [pc, #308]	; (30df4 <download_client_connect+0x350>)
   30cbe:	4b4c      	ldr	r3, [pc, #304]	; (30df0 <download_client_connect+0x34c>)
	if (*fd < 0) {
   30cc0:	2800      	cmp	r0, #0
   30cc2:	eba7 0703 	sub.w	r7, r7, r3
	*fd = socket(sa->sa_family, type, dl->proto);
   30cc6:	6028      	str	r0, [r5, #0]
	if (*fd < 0) {
   30cc8:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   30ccc:	da30      	bge.n	30d30 <download_client_connect+0x28c>
		LOG_ERR("Failed to create socket, err %d", errno);
   30cce:	2301      	movs	r3, #1
   30cd0:	f04f 0400 	mov.w	r4, #0
   30cd4:	f363 0407 	bfi	r4, r3, #0, #8
   30cd8:	f012 f81f 	bl	42d1a <__errno>
   30cdc:	f367 148f 	bfi	r4, r7, #6, #10
   30ce0:	6802      	ldr	r2, [r0, #0]
   30ce2:	494b      	ldr	r1, [pc, #300]	; (30e10 <download_client_connect+0x36c>)
   30ce4:	4620      	mov	r0, r4
   30ce6:	f011 f9aa 	bl	4203e <log_string_sync>
		return -errno;
   30cea:	f012 f816 	bl	42d1a <__errno>
   30cee:	6804      	ldr	r4, [r0, #0]
   30cf0:	4264      	negs	r4, r4
   30cf2:	e78b      	b.n	30c0c <download_client_connect+0x168>
		switch (dl->proto) {
   30cf4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30cf8:	d006      	beq.n	30d08 <download_client_connect+0x264>
   30cfa:	f240 1211 	movw	r2, #273	; 0x111
   30cfe:	4293      	cmp	r3, r2
   30d00:	d1c7      	bne.n	30c92 <download_client_connect+0x1ee>
			port = 5684;
   30d02:	f241 6334 	movw	r3, #5684	; 0x1634
   30d06:	e001      	b.n	30d0c <download_client_connect+0x268>
			port = 443;
   30d08:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   30d0c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   30d10:	e7bf      	b.n	30c92 <download_client_connect+0x1ee>
			port = 80;
   30d12:	2350      	movs	r3, #80	; 0x50
   30d14:	e7fa      	b.n	30d0c <download_client_connect+0x268>
			port = 5683;
   30d16:	f241 6333 	movw	r3, #5683	; 0x1633
   30d1a:	e7f7      	b.n	30d0c <download_client_connect+0x268>
		SIN(sa)->sin_port = htons(port);
   30d1c:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		addrlen = sizeof(struct sockaddr_in);
   30d20:	f04f 0908 	mov.w	r9, #8
		SIN(sa)->sin_port = htons(port);
   30d24:	0213      	lsls	r3, r2, #8
   30d26:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   30d2a:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   30d2e:	e7c0      	b.n	30cb2 <download_client_connect+0x20e>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   30d30:	f8d5 081c 	ldr.w	r0, [r5, #2076]	; 0x81c
   30d34:	2800      	cmp	r0, #0
   30d36:	d079      	beq.n	30e2c <download_client_connect+0x388>
   30d38:	f7ec fa94 	bl	1d264 <strlen>
   30d3c:	2800      	cmp	r0, #0
   30d3e:	d075      	beq.n	30e2c <download_client_connect+0x388>
		err = socket_apn_set(*fd, dl->config.apn);
   30d40:	f8d5 681c 	ldr.w	r6, [r5, #2076]	; 0x81c
   30d44:	f8d5 b000 	ldr.w	fp, [r5]
	__ASSERT_NO_MSG(apn);
   30d48:	b94e      	cbnz	r6, 30d5e <download_client_connect+0x2ba>
   30d4a:	4932      	ldr	r1, [pc, #200]	; (30e14 <download_client_connect+0x370>)
   30d4c:	4832      	ldr	r0, [pc, #200]	; (30e18 <download_client_connect+0x374>)
   30d4e:	236f      	movs	r3, #111	; 0x6f
   30d50:	4a32      	ldr	r2, [pc, #200]	; (30e1c <download_client_connect+0x378>)
   30d52:	f010 ff49 	bl	41be8 <printk>
   30d56:	216f      	movs	r1, #111	; 0x6f
   30d58:	4830      	ldr	r0, [pc, #192]	; (30e1c <download_client_connect+0x378>)
   30d5a:	f011 f95f 	bl	4201c <assert_post_action>
	len = strlen(apn);
   30d5e:	4630      	mov	r0, r6
   30d60:	f7ec fa80 	bl	1d264 <strlen>
	if (len >= IFNAMSIZ) {
   30d64:	283f      	cmp	r0, #63	; 0x3f
   30d66:	d913      	bls.n	30d90 <download_client_connect+0x2ec>
		LOG_ERR("Access point name is too long.");
   30d68:	2301      	movs	r3, #1
   30d6a:	f04f 0000 	mov.w	r0, #0
   30d6e:	f363 0007 	bfi	r0, r3, #0, #8
   30d72:	f367 108f 	bfi	r0, r7, #6, #10
   30d76:	492a      	ldr	r1, [pc, #168]	; (30e20 <download_client_connect+0x37c>)
   30d78:	f011 f961 	bl	4203e <log_string_sync>
		return -EINVAL;
   30d7c:	f06f 0615 	mvn.w	r6, #21
		close(*fd);
   30d80:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   30d82:	f011 fcd2 	bl	4272a <z_impl_zsock_close>
		*fd = -1;
   30d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30d8a:	4634      	mov	r4, r6
   30d8c:	602b      	str	r3, [r5, #0]
   30d8e:	e73d      	b.n	30c0c <download_client_connect+0x168>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   30d90:	2203      	movs	r2, #3
   30d92:	f04f 0a00 	mov.w	sl, #0
   30d96:	9003      	str	r0, [sp, #12]
   30d98:	4630      	mov	r0, r6
   30d9a:	f362 0a07 	bfi	sl, r2, #0, #8
   30d9e:	f011 f961 	bl	42064 <log_strdup>
   30da2:	f367 1a8f 	bfi	sl, r7, #6, #10
   30da6:	4602      	mov	r2, r0
   30da8:	491e      	ldr	r1, [pc, #120]	; (30e24 <download_client_connect+0x380>)
   30daa:	4650      	mov	r0, sl
   30dac:	f011 f947 	bl	4203e <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30db0:	9b03      	ldr	r3, [sp, #12]
   30db2:	2219      	movs	r2, #25
   30db4:	9300      	str	r3, [sp, #0]
   30db6:	2101      	movs	r1, #1
   30db8:	4633      	mov	r3, r6
   30dba:	4658      	mov	r0, fp
   30dbc:	f011 fd63 	bl	42886 <z_impl_zsock_setsockopt>
	if (err) {
   30dc0:	b3a0      	cbz	r0, 30e2c <download_client_connect+0x388>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   30dc2:	2301      	movs	r3, #1
   30dc4:	f04f 0400 	mov.w	r4, #0
   30dc8:	4630      	mov	r0, r6
   30dca:	f363 0407 	bfi	r4, r3, #0, #8
   30dce:	f011 f949 	bl	42064 <log_strdup>
   30dd2:	4606      	mov	r6, r0
   30dd4:	f011 ffa1 	bl	42d1a <__errno>
   30dd8:	f367 148f 	bfi	r4, r7, #6, #10
   30ddc:	6803      	ldr	r3, [r0, #0]
   30dde:	4632      	mov	r2, r6
   30de0:	4911      	ldr	r1, [pc, #68]	; (30e28 <download_client_connect+0x384>)
   30de2:	4620      	mov	r0, r4
   30de4:	f011 f92b 	bl	4203e <log_string_sync>
		return -ENETUNREACH;
   30de8:	f06f 0671 	mvn.w	r6, #113	; 0x71
   30dec:	e7c8      	b.n	30d80 <download_client_connect+0x2dc>
   30dee:	bf00      	nop
   30df0:	00046878 	.word	0x00046878
   30df4:	000468e0 	.word	0x000468e0
   30df8:	0004d5c0 	.word	0x0004d5c0
   30dfc:	0004d5f3 	.word	0x0004d5f3
   30e00:	0004d5f8 	.word	0x0004d5f8
   30e04:	0004d61c 	.word	0x0004d61c
   30e08:	0004d76c 	.word	0x0004d76c
   30e0c:	0004d78f 	.word	0x0004d78f
   30e10:	0004d642 	.word	0x0004d642
   30e14:	0004b4c7 	.word	0x0004b4c7
   30e18:	0004825b 	.word	0x0004825b
   30e1c:	0004d8e2 	.word	0x0004d8e2
   30e20:	0004d662 	.word	0x0004d662
   30e24:	0004d681 	.word	0x0004d681
   30e28:	0004d694 	.word	0x0004d694
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   30e2c:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   30e30:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30e34:	d003      	beq.n	30e3e <download_client_connect+0x39a>
   30e36:	f240 1211 	movw	r2, #273	; 0x111
   30e3a:	4293      	cmp	r3, r2
   30e3c:	d12a      	bne.n	30e94 <download_client_connect+0x3f0>
	     && (dl->config.sec_tag != -1)) {
   30e3e:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
   30e42:	1c73      	adds	r3, r6, #1
   30e44:	d026      	beq.n	30e94 <download_client_connect+0x3f0>
	verify = REQUIRED;
   30e46:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   30e48:	f8d5 a000 	ldr.w	sl, [r5]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30e4c:	961c      	str	r6, [sp, #112]	; 0x70
	verify = REQUIRED;
   30e4e:	930c      	str	r3, [sp, #48]	; 0x30
   30e50:	f04f 0b04 	mov.w	fp, #4
   30e54:	ab0c      	add	r3, sp, #48	; 0x30
   30e56:	f8cd b000 	str.w	fp, [sp]
   30e5a:	2205      	movs	r2, #5
   30e5c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30e60:	4650      	mov	r0, sl
   30e62:	f011 fd10 	bl	42886 <z_impl_zsock_setsockopt>
	if (err) {
   30e66:	2800      	cmp	r0, #0
   30e68:	d041      	beq.n	30eee <download_client_connect+0x44a>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   30e6a:	2301      	movs	r3, #1
   30e6c:	f04f 0600 	mov.w	r6, #0
   30e70:	f363 0607 	bfi	r6, r3, #0, #8
   30e74:	f011 ff51 	bl	42d1a <__errno>
   30e78:	4933      	ldr	r1, [pc, #204]	; (30f48 <download_client_connect+0x4a4>)
   30e7a:	6802      	ldr	r2, [r0, #0]
   30e7c:	f367 168f 	bfi	r6, r7, #6, #10
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30e80:	4630      	mov	r0, r6
   30e82:	f011 f8dc 	bl	4203e <log_string_sync>
		return -errno;
   30e86:	f011 ff48 	bl	42d1a <__errno>
   30e8a:	6806      	ldr	r6, [r0, #0]
   30e8c:	4276      	negs	r6, r6
		if (err) {
   30e8e:	2e00      	cmp	r6, #0
   30e90:	f47f af76 	bne.w	30d80 <download_client_connect+0x2dc>
	LOG_INF("Connecting to %s", log_strdup(host));
   30e94:	2303      	movs	r3, #3
   30e96:	f04f 0600 	mov.w	r6, #0
   30e9a:	4640      	mov	r0, r8
   30e9c:	f363 0607 	bfi	r6, r3, #0, #8
   30ea0:	f011 f8e0 	bl	42064 <log_strdup>
   30ea4:	f367 168f 	bfi	r6, r7, #6, #10
   30ea8:	4602      	mov	r2, r0
   30eaa:	4928      	ldr	r1, [pc, #160]	; (30f4c <download_client_connect+0x4a8>)
   30eac:	4630      	mov	r0, r6
   30eae:	f011 f8c6 	bl	4203e <log_string_sync>
	err = connect(*fd, sa, addrlen);
   30eb2:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   30eb4:	464a      	mov	r2, r9
   30eb6:	a906      	add	r1, sp, #24
   30eb8:	f011 fc4e 	bl	42758 <z_impl_zsock_connect>
	if (err) {
   30ebc:	2800      	cmp	r0, #0
   30ebe:	f43f aea5 	beq.w	30c0c <download_client_connect+0x168>
		LOG_ERR("Unable to connect, errno %d", errno);
   30ec2:	2301      	movs	r3, #1
   30ec4:	f04f 0600 	mov.w	r6, #0
   30ec8:	f363 0607 	bfi	r6, r3, #0, #8
   30ecc:	f011 ff25 	bl	42d1a <__errno>
   30ed0:	f367 168f 	bfi	r6, r7, #6, #10
   30ed4:	6802      	ldr	r2, [r0, #0]
   30ed6:	491e      	ldr	r1, [pc, #120]	; (30f50 <download_client_connect+0x4ac>)
   30ed8:	4630      	mov	r0, r6
   30eda:	f011 f8b0 	bl	4203e <log_string_sync>
		err = -errno;
   30ede:	f011 ff1c 	bl	42d1a <__errno>
   30ee2:	6806      	ldr	r6, [r0, #0]
   30ee4:	4276      	negs	r6, r6
	if (err) {
   30ee6:	2e00      	cmp	r6, #0
   30ee8:	f47f af4a 	bne.w	30d80 <download_client_connect+0x2dc>
   30eec:	e68e      	b.n	30c0c <download_client_connect+0x168>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   30eee:	2303      	movs	r3, #3
   30ef0:	f04f 0000 	mov.w	r0, #0
   30ef4:	f363 0007 	bfi	r0, r3, #0, #8
   30ef8:	f367 108f 	bfi	r0, r7, #6, #10
   30efc:	4632      	mov	r2, r6
   30efe:	4915      	ldr	r1, [pc, #84]	; (30f54 <download_client_connect+0x4b0>)
   30f00:	f011 f89d 	bl	4203e <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   30f04:	2201      	movs	r2, #1
   30f06:	f8cd b000 	str.w	fp, [sp]
   30f0a:	ab1c      	add	r3, sp, #112	; 0x70
   30f0c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30f10:	4650      	mov	r0, sl
   30f12:	f011 fcb8 	bl	42886 <z_impl_zsock_setsockopt>
	if (err) {
   30f16:	2800      	cmp	r0, #0
   30f18:	d0bc      	beq.n	30e94 <download_client_connect+0x3f0>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30f1a:	2301      	movs	r3, #1
   30f1c:	f04f 0600 	mov.w	r6, #0
   30f20:	f363 0607 	bfi	r6, r3, #0, #8
   30f24:	f011 fef9 	bl	42d1a <__errno>
   30f28:	f367 168f 	bfi	r6, r7, #6, #10
   30f2c:	6802      	ldr	r2, [r0, #0]
   30f2e:	490a      	ldr	r1, [pc, #40]	; (30f58 <download_client_connect+0x4b4>)
   30f30:	e7a6      	b.n	30e80 <download_client_connect+0x3dc>
			return -EPROTONOSUPPORT;
   30f32:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   30f36:	e669      	b.n	30c0c <download_client_connect+0x168>
		return -EAFNOSUPPORT;
   30f38:	f06f 0469 	mvn.w	r4, #105	; 0x69
   30f3c:	e666      	b.n	30c0c <download_client_connect+0x168>
		return -EINVAL;
   30f3e:	f06f 0415 	mvn.w	r4, #21
   30f42:	e5d6      	b.n	30af2 <download_client_connect+0x4e>
		return 0;
   30f44:	2400      	movs	r4, #0
   30f46:	e5d4      	b.n	30af2 <download_client_connect+0x4e>
   30f48:	0004d6c2 	.word	0x0004d6c2
   30f4c:	0004d73f 	.word	0x0004d73f
   30f50:	0004d750 	.word	0x0004d750
   30f54:	0004d6ee 	.word	0x0004d6ee
   30f58:	0004d711 	.word	0x0004d711

00030f5c <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   30f5c:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   30f5e:	4604      	mov	r4, r0
   30f60:	b300      	cbz	r0, 30fa4 <download_client_disconnect+0x48>
   30f62:	6800      	ldr	r0, [r0, #0]
   30f64:	2800      	cmp	r0, #0
   30f66:	db1d      	blt.n	30fa4 <download_client_disconnect+0x48>
	return z_impl_zsock_close(sock);
   30f68:	f011 fbdf 	bl	4272a <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   30f6c:	b1b0      	cbz	r0, 30f9c <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   30f6e:	2301      	movs	r3, #1
   30f70:	f04f 0400 	mov.w	r4, #0
   30f74:	4a0d      	ldr	r2, [pc, #52]	; (30fac <download_client_disconnect+0x50>)
   30f76:	f363 0407 	bfi	r4, r3, #0, #8
   30f7a:	4b0d      	ldr	r3, [pc, #52]	; (30fb0 <download_client_disconnect+0x54>)
   30f7c:	1a9b      	subs	r3, r3, r2
   30f7e:	08db      	lsrs	r3, r3, #3
   30f80:	f363 148f 	bfi	r4, r3, #6, #10
   30f84:	f011 fec9 	bl	42d1a <__errno>
   30f88:	490a      	ldr	r1, [pc, #40]	; (30fb4 <download_client_disconnect+0x58>)
   30f8a:	6802      	ldr	r2, [r0, #0]
   30f8c:	4620      	mov	r0, r4
   30f8e:	f011 f856 	bl	4203e <log_string_sync>
		return -errno;
   30f92:	f011 fec2 	bl	42d1a <__errno>
   30f96:	6800      	ldr	r0, [r0, #0]
   30f98:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   30f9a:	bd10      	pop	{r4, pc}
	client->fd = -1;
   30f9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30fa0:	6023      	str	r3, [r4, #0]
	return 0;
   30fa2:	e7fa      	b.n	30f9a <download_client_disconnect+0x3e>
		return -EINVAL;
   30fa4:	f06f 0015 	mvn.w	r0, #21
   30fa8:	e7f7      	b.n	30f9a <download_client_disconnect+0x3e>
   30faa:	bf00      	nop
   30fac:	00046878 	.word	0x00046878
   30fb0:	000468e0 	.word	0x000468e0
   30fb4:	0004d7b6 	.word	0x0004d7b6

00030fb8 <reconnect>:
{
   30fb8:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   30fba:	2303      	movs	r3, #3
{
   30fbc:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   30fbe:	f04f 0000 	mov.w	r0, #0
   30fc2:	4a0c      	ldr	r2, [pc, #48]	; (30ff4 <reconnect+0x3c>)
   30fc4:	f363 0007 	bfi	r0, r3, #0, #8
   30fc8:	4b0b      	ldr	r3, [pc, #44]	; (30ff8 <reconnect+0x40>)
   30fca:	490c      	ldr	r1, [pc, #48]	; (30ffc <reconnect+0x44>)
   30fcc:	1a9b      	subs	r3, r3, r2
   30fce:	08db      	lsrs	r3, r3, #3
   30fd0:	f363 108f 	bfi	r0, r3, #6, #10
   30fd4:	f011 f833 	bl	4203e <log_string_sync>
	err = download_client_disconnect(dl);
   30fd8:	4620      	mov	r0, r4
   30fda:	f7ff ffbf 	bl	30f5c <download_client_disconnect>
	if (err) {
   30fde:	b940      	cbnz	r0, 30ff2 <reconnect+0x3a>
	err = download_client_connect(dl, dl->host, &dl->config);
   30fe0:	f604 0218 	addw	r2, r4, #2072	; 0x818
   30fe4:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   30fe8:	4620      	mov	r0, r4
}
   30fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   30fee:	f7ff bd59 	b.w	30aa4 <download_client_connect>
}
   30ff2:	bd10      	pop	{r4, pc}
   30ff4:	00046878 	.word	0x00046878
   30ff8:	000468e0 	.word	0x000468e0
   30ffc:	0004d951 	.word	0x0004d951

00031000 <download_thread>:
{
   31000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31004:	4604      	mov	r4, r0
	int rc = 0;
   31006:	2500      	movs	r5, #0
   31008:	4ba1      	ldr	r3, [pc, #644]	; (31290 <download_thread+0x290>)
			LOG_INF("Downloaded %u bytes", dl->progress);
   3100a:	4aa2      	ldr	r2, [pc, #648]	; (31294 <download_thread+0x294>)
{
   3100c:	b08d      	sub	sp, #52	; 0x34
			LOG_INF("Downloaded %u bytes", dl->progress);
   3100e:	1a9b      	subs	r3, r3, r2
   31010:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   31014:	f500 56c8 	add.w	r6, r0, #6400	; 0x1900
   31018:	9303      	str	r3, [sp, #12]
   3101a:	3608      	adds	r6, #8
	k_thread_suspend(dl->tid);
   3101c:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   31020:	f00c fc48 	bl	3d8b4 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   31024:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   31028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   3102c:	d30e      	bcc.n	3104c <download_thread+0x4c>
   3102e:	499a      	ldr	r1, [pc, #616]	; (31298 <download_thread+0x298>)
   31030:	f240 136f 	movw	r3, #367	; 0x16f
   31034:	4a99      	ldr	r2, [pc, #612]	; (3129c <download_thread+0x29c>)
   31036:	489a      	ldr	r0, [pc, #616]	; (312a0 <download_thread+0x2a0>)
   31038:	f010 fdd6 	bl	41be8 <printk>
   3103c:	4899      	ldr	r0, [pc, #612]	; (312a4 <download_thread+0x2a4>)
   3103e:	f010 fdd3 	bl	41be8 <printk>
   31042:	f240 116f 	movw	r1, #367	; 0x16f
   31046:	4895      	ldr	r0, [pc, #596]	; (3129c <download_thread+0x29c>)
   31048:	f010 ffe8 	bl	4201c <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   3104c:	f8d4 1804 	ldr.w	r1, [r4, #2052]	; 0x804
   31050:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   31054:	d112      	bne.n	3107c <download_thread+0x7c>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   31056:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   3105a:	f043 0301 	orr.w	r3, r3, #1
   3105e:	f363 0707 	bfi	r7, r3, #0, #8
   31062:	9b03      	ldr	r3, [sp, #12]
   31064:	460a      	mov	r2, r1
   31066:	f363 178f 	bfi	r7, r3, #6, #10
   3106a:	498f      	ldr	r1, [pc, #572]	; (312a8 <download_thread+0x2a8>)
   3106c:	4638      	mov	r0, r7
   3106e:	f010 ffe6 	bl	4203e <log_string_sync>
			error_evt_send(dl, E2BIG);
   31072:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   31074:	4630      	mov	r0, r6
   31076:	f013 fe46 	bl	44d06 <error_evt_send.isra.0>
				break;
   3107a:	e7cf      	b.n	3101c <download_thread+0x1c>
		len = recv(dl->fd, dl->buf + dl->offset,
   3107c:	46a4      	mov	ip, r4
   3107e:	f85c 0b04 	ldr.w	r0, [ip], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   31082:	2300      	movs	r3, #0
   31084:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   31088:	e9cd 3300 	strd	r3, r3, [sp]
   3108c:	4461      	add	r1, ip
   3108e:	f011 fbac 	bl	427ea <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   31092:	1e43      	subs	r3, r0, #1
   31094:	3303      	adds	r3, #3
   31096:	9007      	str	r0, [sp, #28]
   31098:	f240 8082 	bls.w	311a0 <download_thread+0x1a0>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   3109c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   310a0:	b1ab      	cbz	r3, 310ce <download_thread+0xce>
   310a2:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
   310a6:	b193      	cbz	r3, 310ce <download_thread+0xce>
				rc = fragment_evt_send(dl);
   310a8:	4620      	mov	r0, r4
   310aa:	f7ff fca3 	bl	309f4 <fragment_evt_send>
				if (rc) {
   310ae:	4605      	mov	r5, r0
   310b0:	b168      	cbz	r0, 310ce <download_thread+0xce>
					LOG_INF("Fragment refused, download stopped.");
   310b2:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   310b6:	f043 0303 	orr.w	r3, r3, #3
   310ba:	f363 0b07 	bfi	fp, r3, #0, #8
   310be:	9b03      	ldr	r3, [sp, #12]
   310c0:	497a      	ldr	r1, [pc, #488]	; (312ac <download_thread+0x2ac>)
   310c2:	f363 1b8f 	bfi	fp, r3, #6, #10
   310c6:	4658      	mov	r0, fp
			LOG_INF("Fragment refused, download stopped.");
   310c8:	f010 ffb9 	bl	4203e <log_string_sync>
   310cc:	e7a6      	b.n	3101c <download_thread+0x1c>
			if (len == -1) {
   310ce:	9b07      	ldr	r3, [sp, #28]
   310d0:	3301      	adds	r3, #1
   310d2:	d150      	bne.n	31176 <download_thread+0x176>
				if (errno == ETIMEDOUT) {
   310d4:	f011 fe21 	bl	42d1a <__errno>
   310d8:	6803      	ldr	r3, [r0, #0]
   310da:	2b74      	cmp	r3, #116	; 0x74
   310dc:	d025      	beq.n	3112a <download_thread+0x12a>
				LOG_ERR("Error in recv(), errno %d", errno);
   310de:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   310e2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   310e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   310ea:	f043 0301 	orr.w	r3, r3, #1
   310ee:	f363 0207 	bfi	r2, r3, #0, #8
   310f2:	b293      	uxth	r3, r2
   310f4:	9a03      	ldr	r2, [sp, #12]
   310f6:	f362 138f 	bfi	r3, r2, #6, #10
   310fa:	f8ad 3010 	strh.w	r3, [sp, #16]
   310fe:	f011 fe0c 	bl	42d1a <__errno>
   31102:	496b      	ldr	r1, [pc, #428]	; (312b0 <download_thread+0x2b0>)
   31104:	6802      	ldr	r2, [r0, #0]
   31106:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   3110a:	f010 ff98 	bl	4203e <log_string_sync>
			rc = error_evt_send(dl, ECONNRESET);
   3110e:	2168      	movs	r1, #104	; 0x68
   31110:	4630      	mov	r0, r6
   31112:	f013 fdf8 	bl	44d06 <error_evt_send.isra.0>
			if (rc) {
   31116:	4605      	mov	r5, r0
   31118:	2800      	cmp	r0, #0
   3111a:	f47f af7f 	bne.w	3101c <download_thread+0x1c>
			rc = reconnect(dl);
   3111e:	4620      	mov	r0, r4
   31120:	f7ff ff4a 	bl	30fb8 <reconnect>
			if (rc) {
   31124:	4605      	mov	r5, r0
   31126:	bb20      	cbnz	r0, 31172 <download_thread+0x172>
			rc = reconnect(dl);
   31128:	2500      	movs	r5, #0
		dl->offset = 0;
   3112a:	2300      	movs	r3, #0
   3112c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
		if (dl->proto != IPPROTO_TCP || len == 0) {
   31130:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   31134:	2b06      	cmp	r3, #6
   31136:	d103      	bne.n	31140 <download_thread+0x140>
   31138:	9b07      	ldr	r3, [sp, #28]
   3113a:	2b00      	cmp	r3, #0
   3113c:	f47f af72 	bne.w	31024 <download_thread+0x24>
			dl->http.has_header = false;
   31140:	f04f 0300 	mov.w	r3, #0
			rc = request_send(dl);
   31144:	4620      	mov	r0, r4
			dl->http.has_header = false;
   31146:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
			rc = request_send(dl);
   3114a:	f013 fdd1 	bl	44cf0 <request_send>
			if (rc) {
   3114e:	4605      	mov	r5, r0
   31150:	2800      	cmp	r0, #0
   31152:	f43f af67 	beq.w	31024 <download_thread+0x24>
				rc = error_evt_send(dl, ECONNRESET);
   31156:	2168      	movs	r1, #104	; 0x68
   31158:	4630      	mov	r0, r6
   3115a:	f013 fdd4 	bl	44d06 <error_evt_send.isra.0>
				if (rc) {
   3115e:	4605      	mov	r5, r0
   31160:	2800      	cmp	r0, #0
   31162:	f47f af5b 	bne.w	3101c <download_thread+0x1c>
				rc = reconnect(dl);
   31166:	4620      	mov	r0, r4
   31168:	f7ff ff26 	bl	30fb8 <reconnect>
				if (rc) {
   3116c:	4605      	mov	r5, r0
   3116e:	2800      	cmp	r0, #0
   31170:	d0db      	beq.n	3112a <download_thread+0x12a>
				error_evt_send(dl, EHOSTDOWN);
   31172:	2175      	movs	r1, #117	; 0x75
   31174:	e77e      	b.n	31074 <download_thread+0x74>
				LOG_WRN("Peer closed connection!");
   31176:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   3117a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   3117e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   31182:	f043 0302 	orr.w	r3, r3, #2
   31186:	f363 0207 	bfi	r2, r3, #0, #8
   3118a:	b293      	uxth	r3, r2
   3118c:	9a03      	ldr	r2, [sp, #12]
   3118e:	4949      	ldr	r1, [pc, #292]	; (312b4 <download_thread+0x2b4>)
   31190:	f362 138f 	bfi	r3, r2, #6, #10
   31194:	b298      	uxth	r0, r3
   31196:	f8ad 3014 	strh.w	r3, [sp, #20]
   3119a:	f010 ff50 	bl	4203e <log_string_sync>
   3119e:	e7b6      	b.n	3110e <download_thread+0x10e>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   311a0:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   311a4:	2b06      	cmp	r3, #6
   311a6:	d002      	beq.n	311ae <download_thread+0x1ae>
   311a8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   311ac:	d106      	bne.n	311bc <download_thread+0x1bc>
			rc = http_parse(client, len);
   311ae:	9907      	ldr	r1, [sp, #28]
   311b0:	4620      	mov	r0, r4
   311b2:	f000 fa13 	bl	315dc <http_parse>
			if (rc > 0) {
   311b6:	1e05      	subs	r5, r0, #0
   311b8:	f73f af34 	bgt.w	31024 <download_thread+0x24>
		if (rc < 0) {
   311bc:	2d00      	cmp	r5, #0
   311be:	da01      	bge.n	311c4 <download_thread+0x1c4>
			error_evt_send(dl, EBADMSG);
   311c0:	214d      	movs	r1, #77	; 0x4d
   311c2:	e757      	b.n	31074 <download_thread+0x74>
		if (dl->file_size) {
   311c4:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   311c8:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   311cc:	b353      	cbz	r3, 31224 <download_thread+0x224>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   311ce:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   311d2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   311d6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   311da:	f041 0103 	orr.w	r1, r1, #3
   311de:	f361 0007 	bfi	r0, r1, #0, #8
   311e2:	b281      	uxth	r1, r0
   311e4:	9803      	ldr	r0, [sp, #12]
   311e6:	f360 118f 	bfi	r1, r0, #6, #10
   311ea:	f8ad 1018 	strh.w	r1, [sp, #24]
   311ee:	2164      	movs	r1, #100	; 0x64
   311f0:	4351      	muls	r1, r2
   311f2:	fbb1 f1f3 	udiv	r1, r1, r3
   311f6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   311fa:	9100      	str	r1, [sp, #0]
   311fc:	492e      	ldr	r1, [pc, #184]	; (312b8 <download_thread+0x2b8>)
   311fe:	f010 ff1e 	bl	4203e <log_string_sync>
		rc = fragment_evt_send(dl);
   31202:	4620      	mov	r0, r4
   31204:	f7ff fbf6 	bl	309f4 <fragment_evt_send>
		if (rc) {
   31208:	4605      	mov	r5, r0
   3120a:	b1c8      	cbz	r0, 31240 <download_thread+0x240>
			LOG_INF("Fragment refused, download stopped.");
   3120c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   31210:	f043 0303 	orr.w	r3, r3, #3
   31214:	f363 0907 	bfi	r9, r3, #0, #8
   31218:	9b03      	ldr	r3, [sp, #12]
   3121a:	4924      	ldr	r1, [pc, #144]	; (312ac <download_thread+0x2ac>)
   3121c:	f363 198f 	bfi	r9, r3, #6, #10
   31220:	4648      	mov	r0, r9
   31222:	e751      	b.n	310c8 <download_thread+0xc8>
			LOG_INF("Downloaded %u bytes", dl->progress);
   31224:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   31228:	f043 0303 	orr.w	r3, r3, #3
   3122c:	f363 0807 	bfi	r8, r3, #0, #8
   31230:	9b03      	ldr	r3, [sp, #12]
   31232:	4922      	ldr	r1, [pc, #136]	; (312bc <download_thread+0x2bc>)
   31234:	f363 188f 	bfi	r8, r3, #6, #10
   31238:	4640      	mov	r0, r8
   3123a:	f010 ff00 	bl	4203e <log_string_sync>
   3123e:	e7e0      	b.n	31202 <download_thread+0x202>
		if (dl->progress == dl->file_size) {
   31240:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   31244:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   31248:	429a      	cmp	r2, r3
   3124a:	d116      	bne.n	3127a <download_thread+0x27a>
			LOG_INF("Download complete");
   3124c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   31250:	f043 0303 	orr.w	r3, r3, #3
   31254:	f363 0a07 	bfi	sl, r3, #0, #8
   31258:	9b03      	ldr	r3, [sp, #12]
   3125a:	4919      	ldr	r1, [pc, #100]	; (312c0 <download_thread+0x2c0>)
   3125c:	f363 1a8f 	bfi	sl, r3, #6, #10
   31260:	4650      	mov	r0, sl
   31262:	f010 feec 	bl	4203e <log_string_sync>
			const struct download_client_evt evt = {
   31266:	2302      	movs	r3, #2
   31268:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   3126c:	950b      	str	r5, [sp, #44]	; 0x2c
   3126e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			dl->callback(&evt);
   31272:	a809      	add	r0, sp, #36	; 0x24
   31274:	6833      	ldr	r3, [r6, #0]
   31276:	4798      	blx	r3
			break;
   31278:	e6d0      	b.n	3101c <download_thread+0x1c>
		if (dl->http.connection_close) {
   3127a:	f894 3829 	ldrb.w	r3, [r4, #2089]	; 0x829
   3127e:	2b00      	cmp	r3, #0
   31280:	f43f af52 	beq.w	31128 <download_thread+0x128>
			dl->http.connection_close = false;
   31284:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
			reconnect(dl);
   31288:	4620      	mov	r0, r4
   3128a:	f7ff fe95 	bl	30fb8 <reconnect>
   3128e:	e74c      	b.n	3112a <download_thread+0x12a>
   31290:	000468e0 	.word	0x000468e0
   31294:	00046878 	.word	0x00046878
   31298:	0004d7ec 	.word	0x0004d7ec
   3129c:	0004d8e2 	.word	0x0004d8e2
   312a0:	0004825b 	.word	0x0004825b
   312a4:	0004d809 	.word	0x0004d809
   312a8:	0004d81b 	.word	0x0004d81b
   312ac:	0004d848 	.word	0x0004d848
   312b0:	0004d86c 	.word	0x0004d86c
   312b4:	0004d886 	.word	0x0004d886
   312b8:	0004d89e 	.word	0x0004d89e
   312bc:	0004d8bc 	.word	0x0004d8bc
   312c0:	0004d8d0 	.word	0x0004d8d0

000312c4 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   312c4:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   312c6:	4604      	mov	r4, r0
   312c8:	b368      	cbz	r0, 31326 <download_client_start+0x62>
		return -EINVAL;
	}

	if (client->fd < 0) {
   312ca:	6803      	ldr	r3, [r0, #0]
   312cc:	2b00      	cmp	r3, #0
   312ce:	db2d      	blt.n	3132c <download_client_start+0x68>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   312d0:	2300      	movs	r3, #0
	client->file = file;
   312d2:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   312d6:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   312da:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   312de:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   312e2:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828

	if (IS_ENABLED(CONFIG_COAP)) {
		coap_block_init(client, from);
	}

	err = request_send(client);
   312e6:	f013 fd03 	bl	44cf0 <request_send>
	if (err) {
   312ea:	4605      	mov	r5, r0
   312ec:	b9c8      	cbnz	r0, 31322 <download_client_start+0x5e>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   312ee:	2303      	movs	r3, #3
   312f0:	f04f 0600 	mov.w	r6, #0
   312f4:	4a0f      	ldr	r2, [pc, #60]	; (31334 <download_client_start+0x70>)
   312f6:	f363 0607 	bfi	r6, r3, #0, #8
   312fa:	4b0f      	ldr	r3, [pc, #60]	; (31338 <download_client_start+0x74>)
   312fc:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   31300:	1a9b      	subs	r3, r3, r2
   31302:	08db      	lsrs	r3, r3, #3
   31304:	f363 168f 	bfi	r6, r3, #6, #10
   31308:	f010 feac 	bl	42064 <log_strdup>
   3130c:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   31310:	4602      	mov	r2, r0
   31312:	490a      	ldr	r1, [pc, #40]	; (3133c <download_client_start+0x78>)
   31314:	4630      	mov	r0, r6
   31316:	f010 fe92 	bl	4203e <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   3131a:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   3131e:	f00c f975 	bl	3d60c <z_impl_k_thread_resume>

	return 0;
}
   31322:	4628      	mov	r0, r5
   31324:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   31326:	f06f 0515 	mvn.w	r5, #21
   3132a:	e7fa      	b.n	31322 <download_client_start+0x5e>
		return -ENOTCONN;
   3132c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   31330:	e7f7      	b.n	31322 <download_client_start+0x5e>
   31332:	bf00      	nop
   31334:	00046878 	.word	0x00046878
   31338:	000468e0 	.word	0x000468e0
   3133c:	0004d7d7 	.word	0x0004d7d7

00031340 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   31340:	b570      	push	{r4, r5, r6, lr}
   31342:	460d      	mov	r5, r1
   31344:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   31346:	4915      	ldr	r1, [pc, #84]	; (3139c <url_parse_proto+0x5c>)
   31348:	2205      	movs	r2, #5
{
   3134a:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   3134c:	f014 f965 	bl	4561a <strncmp>
   31350:	b928      	cbnz	r0, 3135e <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   31352:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   31356:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   31358:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   3135a:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   3135c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   3135e:	2204      	movs	r2, #4
   31360:	490f      	ldr	r1, [pc, #60]	; (313a0 <url_parse_proto+0x60>)
   31362:	4630      	mov	r0, r6
   31364:	f014 f959 	bl	4561a <strncmp>
   31368:	b908      	cbnz	r0, 3136e <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   3136a:	2306      	movs	r3, #6
   3136c:	e7f3      	b.n	31356 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   3136e:	2205      	movs	r2, #5
   31370:	490c      	ldr	r1, [pc, #48]	; (313a4 <url_parse_proto+0x64>)
   31372:	4630      	mov	r0, r6
   31374:	f014 f951 	bl	4561a <strncmp>
   31378:	b920      	cbnz	r0, 31384 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   3137a:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   3137e:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   31380:	2302      	movs	r3, #2
   31382:	e7ea      	b.n	3135a <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   31384:	2204      	movs	r2, #4
   31386:	4908      	ldr	r1, [pc, #32]	; (313a8 <url_parse_proto+0x68>)
   31388:	4630      	mov	r0, r6
   3138a:	f014 f946 	bl	4561a <strncmp>
   3138e:	b908      	cbnz	r0, 31394 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   31390:	2311      	movs	r3, #17
   31392:	e7f4      	b.n	3137e <url_parse_proto+0x3e>
		return -EINVAL;
   31394:	f06f 0015 	mvn.w	r0, #21
   31398:	e7e0      	b.n	3135c <url_parse_proto+0x1c>
   3139a:	bf00      	nop
   3139c:	0004d974 	.word	0x0004d974
   313a0:	0004d97a 	.word	0x0004d97a
   313a4:	0004d97f 	.word	0x0004d97f
   313a8:	0004d985 	.word	0x0004d985

000313ac <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   313ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   313ae:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   313b0:	9001      	str	r0, [sp, #4]
{
   313b2:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   313b4:	a801      	add	r0, sp, #4
   313b6:	4911      	ldr	r1, [pc, #68]	; (313fc <url_parse_host+0x50>)
{
   313b8:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   313ba:	f013 fcdd 	bl	44d78 <swallow>

	end = strchr(cur, ':');
   313be:	213a      	movs	r1, #58	; 0x3a
   313c0:	9801      	ldr	r0, [sp, #4]
   313c2:	f014 f8f9 	bl	455b8 <strchr>
	if (!end) {
   313c6:	b948      	cbnz	r0, 313dc <url_parse_host+0x30>
		end = strchr(cur, '/');
   313c8:	212f      	movs	r1, #47	; 0x2f
   313ca:	9801      	ldr	r0, [sp, #4]
   313cc:	f014 f8f4 	bl	455b8 <strchr>
		if (!end) {
   313d0:	b920      	cbnz	r0, 313dc <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   313d2:	4620      	mov	r0, r4
   313d4:	f7eb ff46 	bl	1d264 <strlen>
   313d8:	3001      	adds	r0, #1
   313da:	4420      	add	r0, r4
		}
	}

	if (end - cur + 1 > len) {
   313dc:	9901      	ldr	r1, [sp, #4]
   313de:	1a44      	subs	r4, r0, r1
   313e0:	1c63      	adds	r3, r4, #1
   313e2:	42b3      	cmp	r3, r6
   313e4:	d807      	bhi.n	313f6 <url_parse_host+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   313e6:	4622      	mov	r2, r4
   313e8:	4628      	mov	r0, r5
   313ea:	f013 ff1d 	bl	45228 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   313ee:	2000      	movs	r0, #0
   313f0:	5528      	strb	r0, [r5, r4]

	return 0;
}
   313f2:	b002      	add	sp, #8
   313f4:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   313f6:	f06f 0006 	mvn.w	r0, #6
   313fa:	e7fa      	b.n	313f2 <url_parse_host+0x46>
   313fc:	0004d970 	.word	0x0004d970

00031400 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   31400:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   31402:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   31404:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   31406:	4917      	ldr	r1, [pc, #92]	; (31464 <url_parse_port+0x64>)
   31408:	a801      	add	r0, sp, #4
   3140a:	f013 fcb5 	bl	44d78 <swallow>

	err = swallow(&cur, ":");
   3140e:	4916      	ldr	r1, [pc, #88]	; (31468 <url_parse_port+0x68>)
   31410:	a801      	add	r0, sp, #4
   31412:	f013 fcb1 	bl	44d78 <swallow>
	if (err) {
   31416:	4605      	mov	r5, r0
   31418:	bb08      	cbnz	r0, 3145e <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   3141a:	212f      	movs	r1, #47	; 0x2f
   3141c:	9801      	ldr	r0, [sp, #4]
   3141e:	f014 f8cb 	bl	455b8 <strchr>
	if (!end) {
   31422:	b9c8      	cbnz	r0, 31458 <url_parse_port+0x58>
		len = strlen(cur);
   31424:	9801      	ldr	r0, [sp, #4]
   31426:	f7eb ff1d 	bl	1d264 <strlen>
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   3142a:	2807      	cmp	r0, #7
   3142c:	bf38      	it	cc
   3142e:	2007      	movcc	r0, #7

	memcpy(aport, cur, len);
   31430:	2308      	movs	r3, #8
	len = MAX(len, sizeof(aport) - 1);
   31432:	4604      	mov	r4, r0
	memcpy(aport, cur, len);
   31434:	4602      	mov	r2, r0
   31436:	9901      	ldr	r1, [sp, #4]
   31438:	eb0d 0003 	add.w	r0, sp, r3
   3143c:	f013 ff01 	bl	45242 <__memcpy_chk>
	aport[len] = '\0';
   31440:	ab04      	add	r3, sp, #16
   31442:	441c      	add	r4, r3
   31444:	2300      	movs	r3, #0

	*port = atoi(aport);
   31446:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   31448:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   3144c:	f013 fecc 	bl	451e8 <atoi>
   31450:	8030      	strh	r0, [r6, #0]

	return 0;
}
   31452:	4628      	mov	r0, r5
   31454:	b004      	add	sp, #16
   31456:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   31458:	9c01      	ldr	r4, [sp, #4]
   3145a:	1b00      	subs	r0, r0, r4
   3145c:	e7e5      	b.n	3142a <url_parse_port+0x2a>
		return -EINVAL;
   3145e:	f06f 0515 	mvn.w	r5, #21
   31462:	e7f6      	b.n	31452 <url_parse_port+0x52>
   31464:	0004d970 	.word	0x0004d970
   31468:	0004a95c 	.word	0x0004a95c

0003146c <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   3146c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3146e:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   31470:	4915      	ldr	r1, [pc, #84]	; (314c8 <url_parse_file+0x5c>)
{
   31472:	4614      	mov	r4, r2
	cur = url;
   31474:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   31476:	f014 f901 	bl	4567c <strstr>
   3147a:	b940      	cbnz	r0, 3148e <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   3147c:	9801      	ldr	r0, [sp, #4]
   3147e:	f7eb fef1 	bl	1d264 <strlen>
   31482:	3001      	adds	r0, #1
   31484:	42a0      	cmp	r0, r4
   31486:	d912      	bls.n	314ae <url_parse_file+0x42>
		return -E2BIG;
   31488:	f06f 0006 	mvn.w	r0, #6
   3148c:	e006      	b.n	3149c <url_parse_file+0x30>
		err = swallow(&cur, "://");
   3148e:	490f      	ldr	r1, [pc, #60]	; (314cc <url_parse_file+0x60>)
   31490:	a801      	add	r0, sp, #4
   31492:	f013 fc71 	bl	44d78 <swallow>
		if (err) {
   31496:	b118      	cbz	r0, 314a0 <url_parse_file+0x34>
			return -EINVAL;
   31498:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   3149c:	b003      	add	sp, #12
   3149e:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   314a0:	490b      	ldr	r1, [pc, #44]	; (314d0 <url_parse_file+0x64>)
   314a2:	a801      	add	r0, sp, #4
   314a4:	f013 fc68 	bl	44d78 <swallow>
		if (err) {
   314a8:	2800      	cmp	r0, #0
   314aa:	d0e7      	beq.n	3147c <url_parse_file+0x10>
   314ac:	e7f4      	b.n	31498 <url_parse_file+0x2c>
	len = strlen(cur);
   314ae:	9801      	ldr	r0, [sp, #4]
   314b0:	f7eb fed8 	bl	1d264 <strlen>
   314b4:	9901      	ldr	r1, [sp, #4]
   314b6:	4604      	mov	r4, r0
   314b8:	4602      	mov	r2, r0
   314ba:	4628      	mov	r0, r5
   314bc:	f013 feb4 	bl	45228 <memcpy>
	file[len] = '\0';
   314c0:	2000      	movs	r0, #0
   314c2:	5528      	strb	r0, [r5, r4]
	return 0;
   314c4:	e7ea      	b.n	3149c <url_parse_file+0x30>
   314c6:	bf00      	nop
   314c8:	0004d971 	.word	0x0004d971
   314cc:	0004d970 	.word	0x0004d970
   314d0:	0004d972 	.word	0x0004d972

000314d4 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   314d4:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   314d6:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
{
   314da:	b0c4      	sub	sp, #272	; 0x110
   314dc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(client->host);
   314de:	b94b      	cbnz	r3, 314f4 <http_get_request_send+0x20>
   314e0:	4935      	ldr	r1, [pc, #212]	; (315b8 <http_get_request_send+0xe4>)
   314e2:	4836      	ldr	r0, [pc, #216]	; (315bc <http_get_request_send+0xe8>)
   314e4:	232e      	movs	r3, #46	; 0x2e
   314e6:	4a36      	ldr	r2, [pc, #216]	; (315c0 <http_get_request_send+0xec>)
   314e8:	f010 fb7e 	bl	41be8 <printk>
   314ec:	212e      	movs	r1, #46	; 0x2e
   314ee:	4834      	ldr	r0, [pc, #208]	; (315c0 <http_get_request_send+0xec>)
   314f0:	f010 fd94 	bl	4201c <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   314f4:	f8d4 3814 	ldr.w	r3, [r4, #2068]	; 0x814
   314f8:	b94b      	cbnz	r3, 3150e <http_get_request_send+0x3a>
   314fa:	4932      	ldr	r1, [pc, #200]	; (315c4 <http_get_request_send+0xf0>)
   314fc:	482f      	ldr	r0, [pc, #188]	; (315bc <http_get_request_send+0xe8>)
   314fe:	232f      	movs	r3, #47	; 0x2f
   31500:	4a2f      	ldr	r2, [pc, #188]	; (315c0 <http_get_request_send+0xec>)
   31502:	f010 fb71 	bl	41be8 <printk>
   31506:	212f      	movs	r1, #47	; 0x2f
   31508:	482d      	ldr	r0, [pc, #180]	; (315c0 <http_get_request_send+0xec>)
   3150a:	f010 fd87 	bl	4201c <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   3150e:	ad04      	add	r5, sp, #16
   31510:	2240      	movs	r2, #64	; 0x40
   31512:	4629      	mov	r1, r5
   31514:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
   31518:	f7ff ff48 	bl	313ac <url_parse_host>
	if (err) {
   3151c:	4606      	mov	r6, r0
   3151e:	2800      	cmp	r0, #0
   31520:	d13b      	bne.n	3159a <http_get_request_send+0xc6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   31522:	22c0      	movs	r2, #192	; 0xc0
   31524:	a914      	add	r1, sp, #80	; 0x50
   31526:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   3152a:	f7ff ff9f 	bl	3146c <url_parse_file>
	if (err) {
   3152e:	4606      	mov	r6, r0
   31530:	bb98      	cbnz	r0, 3159a <http_get_request_send+0xc6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   31532:	f8d4 3820 	ldr.w	r3, [r4, #2080]	; 0x820
   31536:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   3153a:	b38b      	cbz	r3, 315a0 <http_get_request_send+0xcc>
		off = client->progress + client->config.frag_size_override - 1;
   3153c:	4413      	add	r3, r2
   3153e:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   31540:	f8d4 1808 	ldr.w	r1, [r4, #2056]	; 0x808
   31544:	b111      	cbz	r1, 3154c <http_get_request_send+0x78>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   31546:	428b      	cmp	r3, r1
   31548:	bf28      	it	cs
   3154a:	460b      	movcs	r3, r1

	/* We use range requests only for HTTPS, due to memory limitations.
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2) {
   3154c:	f8d4 1824 	ldr.w	r1, [r4, #2084]	; 0x824
   31550:	1d20      	adds	r0, r4, #4
   31552:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   31556:	d126      	bne.n	315a6 <http_get_request_send+0xd2>
		len = snprintf(client->buf,
   31558:	e9cd 2301 	strd	r2, r3, [sp, #4]
   3155c:	9500      	str	r5, [sp, #0]
   3155e:	ab14      	add	r3, sp, #80	; 0x50
   31560:	4a19      	ldr	r2, [pc, #100]	; (315c8 <http_get_request_send+0xf4>)
   31562:	f44f 6100 	mov.w	r1, #2048	; 0x800
   31566:	f00e fe69 	bl	4023c <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   3156a:	4601      	mov	r1, r0
   3156c:	4620      	mov	r0, r4
   3156e:	f013 fbd9 	bl	44d24 <socket_send>
	if (err) {
   31572:	4606      	mov	r6, r0
   31574:	b188      	cbz	r0, 3159a <http_get_request_send+0xc6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   31576:	2301      	movs	r3, #1
   31578:	f04f 0400 	mov.w	r4, #0
   3157c:	4a13      	ldr	r2, [pc, #76]	; (315cc <http_get_request_send+0xf8>)
   3157e:	f363 0407 	bfi	r4, r3, #0, #8
   31582:	4b13      	ldr	r3, [pc, #76]	; (315d0 <http_get_request_send+0xfc>)
   31584:	1a9b      	subs	r3, r3, r2
   31586:	08db      	lsrs	r3, r3, #3
   31588:	f363 148f 	bfi	r4, r3, #6, #10
   3158c:	f011 fbc5 	bl	42d1a <__errno>
   31590:	4910      	ldr	r1, [pc, #64]	; (315d4 <http_get_request_send+0x100>)
   31592:	6802      	ldr	r2, [r0, #0]
   31594:	4620      	mov	r0, r4
   31596:	f010 fd52 	bl	4203e <log_string_sync>
		return err;
	}

	return 0;
}
   3159a:	4630      	mov	r0, r6
   3159c:	b044      	add	sp, #272	; 0x110
   3159e:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   315a0:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   315a4:	e7cc      	b.n	31540 <http_get_request_send+0x6c>
		len = snprintf(client->buf,
   315a6:	e9cd 5200 	strd	r5, r2, [sp]
   315aa:	ab14      	add	r3, sp, #80	; 0x50
   315ac:	4a0a      	ldr	r2, [pc, #40]	; (315d8 <http_get_request_send+0x104>)
   315ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
   315b2:	f00e fe43 	bl	4023c <sniprintf>
   315b6:	e7d8      	b.n	3156a <http_get_request_send+0x96>
   315b8:	0004d9c4 	.word	0x0004d9c4
   315bc:	0004825b 	.word	0x0004825b
   315c0:	0004d98a 	.word	0x0004d98a
   315c4:	0004d9d1 	.word	0x0004d9d1
   315c8:	0004d9de 	.word	0x0004d9de
   315cc:	00046878 	.word	0x00046878
   315d0:	000468e0 	.word	0x000468e0
   315d4:	0004da72 	.word	0x0004da72
   315d8:	0004da29 	.word	0x0004da29

000315dc <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   315dc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   315e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   315e4:	440b      	add	r3, r1
   315e6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   315ea:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   315ee:	4604      	mov	r4, r0
   315f0:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   315f2:	2b00      	cmp	r3, #0
   315f4:	f040 80bd 	bne.w	31772 <http_parse+0x196>
	p = strstr(client->buf, "\r\n\r\n");
   315f8:	1d05      	adds	r5, r0, #4
   315fa:	496a      	ldr	r1, [pc, #424]	; (317a4 <http_parse+0x1c8>)
   315fc:	4628      	mov	r0, r5
   315fe:	f014 f83d 	bl	4567c <strstr>
	if (!p) {
   31602:	4606      	mov	r6, r0
   31604:	2800      	cmp	r0, #0
   31606:	f000 80c9 	beq.w	3179c <http_parse+0x1c0>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   3160a:	4866      	ldr	r0, [pc, #408]	; (317a4 <http_parse+0x1c8>)
   3160c:	f7eb fe2a 	bl	1d264 <strlen>
   31610:	462b      	mov	r3, r5
   31612:	4406      	add	r6, r0
   31614:	eba6 0805 	sub.w	r8, r6, r5
		client->buf[i] = tolower(client->buf[i]);
   31618:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 317e4 <http_parse+0x208>
   3161c:	eb05 0008 	add.w	r0, r5, r8
	for (size_t i = 0; i < *hdr_len; i++) {
   31620:	4298      	cmp	r0, r3
   31622:	d119      	bne.n	31658 <http_parse+0x7c>
	p = strstr(client->buf, "http/1.1 206");
   31624:	4960      	ldr	r1, [pc, #384]	; (317a8 <http_parse+0x1cc>)
   31626:	4628      	mov	r0, r5
   31628:	f014 f828 	bl	4567c <strstr>
	if (!p) {
   3162c:	bb78      	cbnz	r0, 3168e <http_parse+0xb2>
		if (client->proto == IPPROTO_TLS_1_2) {
   3162e:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   31632:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   31636:	d11a      	bne.n	3166e <http_parse+0x92>
			LOG_ERR("Server did not honor partial content request");
   31638:	2301      	movs	r3, #1
   3163a:	4a5c      	ldr	r2, [pc, #368]	; (317ac <http_parse+0x1d0>)
   3163c:	f363 0007 	bfi	r0, r3, #0, #8
   31640:	4b5b      	ldr	r3, [pc, #364]	; (317b0 <http_parse+0x1d4>)
   31642:	495c      	ldr	r1, [pc, #368]	; (317b4 <http_parse+0x1d8>)
   31644:	1a9b      	subs	r3, r3, r2
   31646:	08db      	lsrs	r3, r3, #3
   31648:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Server response is not 200 Success");
   3164c:	f010 fcf7 	bl	4203e <log_string_sync>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   31650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	    (client->progress != client->file_size)) {
		return 1;
	}

	return 0;
}
   31654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   31658:	781a      	ldrb	r2, [r3, #0]
   3165a:	f812 100c 	ldrb.w	r1, [r2, ip]
   3165e:	f001 0103 	and.w	r1, r1, #3
   31662:	2901      	cmp	r1, #1
   31664:	bf08      	it	eq
   31666:	3220      	addeq	r2, #32
   31668:	f803 2b01 	strb.w	r2, [r3], #1
   3166c:	e7d8      	b.n	31620 <http_parse+0x44>
		p = strstr(client->buf, "http/1.1 200");
   3166e:	4952      	ldr	r1, [pc, #328]	; (317b8 <http_parse+0x1dc>)
   31670:	4628      	mov	r0, r5
   31672:	f014 f803 	bl	4567c <strstr>
		if (!p) {
   31676:	b950      	cbnz	r0, 3168e <http_parse+0xb2>
			LOG_ERR("Server response is not 200 Success");
   31678:	2301      	movs	r3, #1
   3167a:	4a4c      	ldr	r2, [pc, #304]	; (317ac <http_parse+0x1d0>)
   3167c:	f363 0007 	bfi	r0, r3, #0, #8
   31680:	4b4b      	ldr	r3, [pc, #300]	; (317b0 <http_parse+0x1d4>)
   31682:	494e      	ldr	r1, [pc, #312]	; (317bc <http_parse+0x1e0>)
   31684:	1a9b      	subs	r3, r3, r2
   31686:	08db      	lsrs	r3, r3, #3
   31688:	f363 108f 	bfi	r0, r3, #6, #10
   3168c:	e7de      	b.n	3164c <http_parse+0x70>
	if (client->file_size == 0) {
   3168e:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   31692:	2b00      	cmp	r3, #0
   31694:	d144      	bne.n	31720 <http_parse+0x144>
		if (client->proto == IPPROTO_TLS_1_2) {
   31696:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   3169a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3169e:	d11e      	bne.n	316de <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   316a0:	4947      	ldr	r1, [pc, #284]	; (317c0 <http_parse+0x1e4>)
   316a2:	4628      	mov	r0, r5
   316a4:	f013 ffea 	bl	4567c <strstr>
			if (!p) {
   316a8:	b950      	cbnz	r0, 316c0 <http_parse+0xe4>
				LOG_ERR("Server did not send "
   316aa:	2301      	movs	r3, #1
   316ac:	4a3f      	ldr	r2, [pc, #252]	; (317ac <http_parse+0x1d0>)
   316ae:	f363 0007 	bfi	r0, r3, #0, #8
   316b2:	4b3f      	ldr	r3, [pc, #252]	; (317b0 <http_parse+0x1d4>)
   316b4:	4943      	ldr	r1, [pc, #268]	; (317c4 <http_parse+0x1e8>)
   316b6:	1a9b      	subs	r3, r3, r2
   316b8:	08db      	lsrs	r3, r3, #3
   316ba:	f363 108f 	bfi	r0, r3, #6, #10
   316be:	e7c5      	b.n	3164c <http_parse+0x70>
			p = strstr(p, "/");
   316c0:	4941      	ldr	r1, [pc, #260]	; (317c8 <http_parse+0x1ec>)
   316c2:	f013 ffdb 	bl	4567c <strstr>
			if (!p) {
   316c6:	bb18      	cbnz	r0, 31710 <http_parse+0x134>
				LOG_ERR("No file size in response");
   316c8:	2301      	movs	r3, #1
   316ca:	4a38      	ldr	r2, [pc, #224]	; (317ac <http_parse+0x1d0>)
   316cc:	f363 0007 	bfi	r0, r3, #0, #8
   316d0:	4b37      	ldr	r3, [pc, #220]	; (317b0 <http_parse+0x1d4>)
   316d2:	493e      	ldr	r1, [pc, #248]	; (317cc <http_parse+0x1f0>)
   316d4:	1a9b      	subs	r3, r3, r2
   316d6:	08db      	lsrs	r3, r3, #3
   316d8:	f363 108f 	bfi	r0, r3, #6, #10
   316dc:	e7b6      	b.n	3164c <http_parse+0x70>
			p = strstr(client->buf, "content-length");
   316de:	493c      	ldr	r1, [pc, #240]	; (317d0 <http_parse+0x1f4>)
   316e0:	4628      	mov	r0, r5
   316e2:	f013 ffcb 	bl	4567c <strstr>
			if (!p) {
   316e6:	b950      	cbnz	r0, 316fe <http_parse+0x122>
				LOG_WRN("Server did not send "
   316e8:	2302      	movs	r3, #2
   316ea:	4a30      	ldr	r2, [pc, #192]	; (317ac <http_parse+0x1d0>)
   316ec:	f363 0007 	bfi	r0, r3, #0, #8
   316f0:	4b2f      	ldr	r3, [pc, #188]	; (317b0 <http_parse+0x1d4>)
   316f2:	4938      	ldr	r1, [pc, #224]	; (317d4 <http_parse+0x1f8>)
   316f4:	1a9b      	subs	r3, r3, r2
   316f6:	08db      	lsrs	r3, r3, #3
   316f8:	f363 108f 	bfi	r0, r3, #6, #10
   316fc:	e7a6      	b.n	3164c <http_parse+0x70>
			p = strstr(p, ":");
   316fe:	4936      	ldr	r1, [pc, #216]	; (317d8 <http_parse+0x1fc>)
   31700:	f013 ffbc 	bl	4567c <strstr>
			if (!p) {
   31704:	2800      	cmp	r0, #0
   31706:	d0df      	beq.n	316c8 <http_parse+0xec>
			client->file_size = client->progress;
   31708:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   3170c:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
		client->file_size += atoi(p + 1);
   31710:	3001      	adds	r0, #1
   31712:	f013 fd69 	bl	451e8 <atoi>
   31716:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   3171a:	4418      	add	r0, r3
   3171c:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   31720:	492e      	ldr	r1, [pc, #184]	; (317dc <http_parse+0x200>)
   31722:	4628      	mov	r0, r5
   31724:	f013 ffaa 	bl	4567c <strstr>
	if (p) {
   31728:	b180      	cbz	r0, 3174c <http_parse+0x170>
		LOG_WRN("Peer closed connection, will re-connect");
   3172a:	2302      	movs	r3, #2
   3172c:	f04f 0000 	mov.w	r0, #0
   31730:	4a1e      	ldr	r2, [pc, #120]	; (317ac <http_parse+0x1d0>)
   31732:	f363 0007 	bfi	r0, r3, #0, #8
   31736:	4b1e      	ldr	r3, [pc, #120]	; (317b0 <http_parse+0x1d4>)
   31738:	4929      	ldr	r1, [pc, #164]	; (317e0 <http_parse+0x204>)
   3173a:	1a9b      	subs	r3, r3, r2
   3173c:	08db      	lsrs	r3, r3, #3
   3173e:	f363 108f 	bfi	r0, r3, #6, #10
   31742:	f010 fc7c 	bl	4203e <log_string_sync>
		client->http.connection_close = true;
   31746:	2301      	movs	r3, #1
   31748:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   3174c:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   3174e:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   31752:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   31756:	4542      	cmp	r2, r8
   31758:	d01e      	beq.n	31798 <http_parse+0x1bc>
   3175a:	eba2 0208 	sub.w	r2, r2, r8
   3175e:	4631      	mov	r1, r6
   31760:	4628      	mov	r0, r5
   31762:	f013 fd61 	bl	45228 <memcpy>
			client->offset -= hdr_len;
   31766:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   3176a:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   3176e:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   31772:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   31776:	f8d4 080c 	ldr.w	r0, [r4, #2060]	; 0x80c
   3177a:	429f      	cmp	r7, r3
   3177c:	bf94      	ite	ls
   3177e:	19c7      	addls	r7, r0, r7
   31780:	18c7      	addhi	r7, r0, r3
	if ((client->offset < CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE) &&
   31782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	client->progress += MIN(client->offset, len);
   31786:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if ((client->offset < CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE) &&
   3178a:	d209      	bcs.n	317a0 <http_parse+0x1c4>
   3178c:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
   31790:	1bc0      	subs	r0, r0, r7
   31792:	bf18      	it	ne
   31794:	2001      	movne	r0, #1
   31796:	e75d      	b.n	31654 <http_parse+0x78>
			client->offset = 0;
   31798:	2300      	movs	r3, #0
   3179a:	e7e8      	b.n	3176e <http_parse+0x192>
			return 1;
   3179c:	2001      	movs	r0, #1
   3179e:	e759      	b.n	31654 <http_parse+0x78>
	return 0;
   317a0:	2000      	movs	r0, #0
   317a2:	e757      	b.n	31654 <http_parse+0x78>
   317a4:	0004da6d 	.word	0x0004da6d
   317a8:	0004da98 	.word	0x0004da98
   317ac:	00046878 	.word	0x00046878
   317b0:	000468e0 	.word	0x000468e0
   317b4:	0004daa5 	.word	0x0004daa5
   317b8:	0004dad2 	.word	0x0004dad2
   317bc:	0004dadf 	.word	0x0004dadf
   317c0:	0004db02 	.word	0x0004db02
   317c4:	0004db10 	.word	0x0004db10
   317c8:	0004d972 	.word	0x0004d972
   317cc:	0004db40 	.word	0x0004db40
   317d0:	0004db59 	.word	0x0004db59
   317d4:	0004db68 	.word	0x0004db68
   317d8:	0004a95c 	.word	0x0004a95c
   317dc:	0004db99 	.word	0x0004db99
   317e0:	0004dbab 	.word	0x0004dbab
   317e4:	0004f20f 	.word	0x0004f20f

000317e8 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   317e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   317ea:	a801      	add	r0, sp, #4
   317ec:	f000 fa42 	bl	31c74 <dfu_target_offset_get>
	if (err != 0) {
   317f0:	4c21      	ldr	r4, [pc, #132]	; (31878 <download_with_offset+0x90>)
   317f2:	4b22      	ldr	r3, [pc, #136]	; (3187c <download_with_offset+0x94>)
   317f4:	1ae4      	subs	r4, r4, r3
   317f6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   317fa:	4603      	mov	r3, r0
   317fc:	b160      	cbz	r0, 31818 <download_with_offset+0x30>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   317fe:	2201      	movs	r2, #1
   31800:	f04f 0000 	mov.w	r0, #0
   31804:	491e      	ldr	r1, [pc, #120]	; (31880 <download_with_offset+0x98>)
   31806:	f362 0007 	bfi	r0, r2, #0, #8
   3180a:	4a1e      	ldr	r2, [pc, #120]	; (31884 <download_with_offset+0x9c>)
   3180c:	f364 108f 	bfi	r0, r4, #6, #10
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   31810:	f010 fc15 	bl	4203e <log_string_sync>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   31814:	b003      	add	sp, #12
   31816:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   31818:	4d1b      	ldr	r5, [pc, #108]	; (31888 <download_with_offset+0xa0>)
   3181a:	f605 0218 	addw	r2, r5, #2072	; 0x818
   3181e:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   31822:	4628      	mov	r0, r5
   31824:	f7ff f93e 	bl	30aa4 <download_client_connect>
	if (err != 0) {
   31828:	4603      	mov	r3, r0
   3182a:	b148      	cbz	r0, 31840 <download_with_offset+0x58>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   3182c:	2201      	movs	r2, #1
   3182e:	f04f 0000 	mov.w	r0, #0
   31832:	f362 0007 	bfi	r0, r2, #0, #8
   31836:	f364 108f 	bfi	r0, r4, #6, #10
   3183a:	4a12      	ldr	r2, [pc, #72]	; (31884 <download_with_offset+0x9c>)
   3183c:	4913      	ldr	r1, [pc, #76]	; (3188c <download_with_offset+0xa4>)
   3183e:	e7e7      	b.n	31810 <download_with_offset+0x28>
	err = download_client_start(&dlc, dlc.file, offset);
   31840:	9a01      	ldr	r2, [sp, #4]
   31842:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   31846:	4628      	mov	r0, r5
   31848:	f7ff fd3c 	bl	312c4 <download_client_start>
	if (err != 0) {
   3184c:	4603      	mov	r3, r0
		LOG_ERR("%s failed to start download  with error %d", __func__,
   3184e:	f04f 0000 	mov.w	r0, #0
	if (err != 0) {
   31852:	b13b      	cbz	r3, 31864 <download_with_offset+0x7c>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   31854:	2201      	movs	r2, #1
   31856:	f362 0007 	bfi	r0, r2, #0, #8
   3185a:	f364 108f 	bfi	r0, r4, #6, #10
   3185e:	4a09      	ldr	r2, [pc, #36]	; (31884 <download_with_offset+0x9c>)
   31860:	490b      	ldr	r1, [pc, #44]	; (31890 <download_with_offset+0xa8>)
   31862:	e7d5      	b.n	31810 <download_with_offset+0x28>
	LOG_INF("Downloading from offset: 0x%x", offset);
   31864:	2303      	movs	r3, #3
   31866:	f363 0007 	bfi	r0, r3, #0, #8
   3186a:	f364 108f 	bfi	r0, r4, #6, #10
   3186e:	9a01      	ldr	r2, [sp, #4]
   31870:	4908      	ldr	r1, [pc, #32]	; (31894 <download_with_offset+0xac>)
   31872:	f010 fbe4 	bl	4203e <log_string_sync>
   31876:	e7cd      	b.n	31814 <download_with_offset+0x2c>
   31878:	000468f0 	.word	0x000468f0
   3187c:	00046878 	.word	0x00046878
   31880:	0004dd0d 	.word	0x0004dd0d
   31884:	0004dbd3 	.word	0x0004dbd3
   31888:	20021d00 	.word	0x20021d00
   3188c:	0004dd33 	.word	0x0004dd33
   31890:	0004dd56 	.word	0x0004dd56
   31894:	0004dd81 	.word	0x0004dd81

00031898 <send_evt>:
	const struct fota_download_evt evt = {
   31898:	2300      	movs	r3, #0
{
   3189a:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   3189c:	e9cd 3300 	strd	r3, r3, [sp]
	callback(&evt);
   318a0:	4b04      	ldr	r3, [pc, #16]	; (318b4 <send_evt+0x1c>)
	const struct fota_download_evt evt = {
   318a2:	f88d 0000 	strb.w	r0, [sp]
	callback(&evt);
   318a6:	681b      	ldr	r3, [r3, #0]
   318a8:	4668      	mov	r0, sp
   318aa:	4798      	blx	r3
}
   318ac:	b003      	add	sp, #12
   318ae:	f85d fb04 	ldr.w	pc, [sp], #4
   318b2:	bf00      	nop
   318b4:	200254dc 	.word	0x200254dc

000318b8 <download_client_callback>:
{
   318b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   318ba:	4605      	mov	r5, r0
{
   318bc:	b085      	sub	sp, #20
	if (event == NULL) {
   318be:	2800      	cmp	r0, #0
   318c0:	f000 811d 	beq.w	31afe <download_client_callback+0x246>
	switch (event->id) {
   318c4:	7803      	ldrb	r3, [r0, #0]
   318c6:	2b01      	cmp	r3, #1
   318c8:	f000 80d5 	beq.w	31a76 <download_client_callback+0x1be>
   318cc:	b123      	cbz	r3, 318d8 <download_client_callback+0x20>
   318ce:	2b02      	cmp	r3, #2
   318d0:	f000 80ae 	beq.w	31a30 <download_client_callback+0x178>
	return 0;
   318d4:	2400      	movs	r4, #0
			socket_retries_left--;
   318d6:	e03e      	b.n	31956 <download_client_callback+0x9e>
		if (first_fragment) {
   318d8:	4e8a      	ldr	r6, [pc, #552]	; (31b04 <download_client_callback+0x24c>)
   318da:	7833      	ldrb	r3, [r6, #0]
   318dc:	2b00      	cmp	r3, #0
   318de:	d061      	beq.n	319a4 <download_client_callback+0xec>
			err = download_client_file_size_get(&dlc, &file_size);
   318e0:	4f89      	ldr	r7, [pc, #548]	; (31b08 <download_client_callback+0x250>)
   318e2:	488a      	ldr	r0, [pc, #552]	; (31b0c <download_client_callback+0x254>)
   318e4:	4639      	mov	r1, r7
   318e6:	f013 fa3d 	bl	44d64 <download_client_file_size_get>
			if (err != 0) {
   318ea:	4604      	mov	r4, r0
   318ec:	b118      	cbz	r0, 318f6 <download_client_callback+0x3e>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   318ee:	2004      	movs	r0, #4
   318f0:	f7ff ffd2 	bl	31898 <send_evt>
			return err;
   318f4:	e02f      	b.n	31956 <download_client_callback+0x9e>
			first_fragment = false;
   318f6:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   318f8:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   318fc:	f000 f970 	bl	31be0 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   31900:	4a83      	ldr	r2, [pc, #524]	; (31b10 <download_client_callback+0x258>)
   31902:	6839      	ldr	r1, [r7, #0]
   31904:	f000 f98e 	bl	31c24 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   31908:	1e04      	subs	r4, r0, #0
   3190a:	da27      	bge.n	3195c <download_client_callback+0xa4>
   3190c:	f114 0f10 	cmn.w	r4, #16
   31910:	d024      	beq.n	3195c <download_client_callback+0xa4>
				LOG_ERR("dfu_target_init error %d", err);
   31912:	2301      	movs	r3, #1
   31914:	f04f 0000 	mov.w	r0, #0
   31918:	4d7e      	ldr	r5, [pc, #504]	; (31b14 <download_client_callback+0x25c>)
   3191a:	f363 0007 	bfi	r0, r3, #0, #8
   3191e:	4b7e      	ldr	r3, [pc, #504]	; (31b18 <download_client_callback+0x260>)
   31920:	4622      	mov	r2, r4
   31922:	1aed      	subs	r5, r5, r3
   31924:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   31928:	f365 108f 	bfi	r0, r5, #6, #10
   3192c:	497b      	ldr	r1, [pc, #492]	; (31b1c <download_client_callback+0x264>)
   3192e:	f010 fb86 	bl	4203e <log_string_sync>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   31932:	2004      	movs	r0, #4
   31934:	f7ff ffb0 	bl	31898 <send_evt>
				int res = dfu_target_reset();
   31938:	f000 f9da 	bl	31cf0 <dfu_target_reset>
				if (res != 0) {
   3193c:	b148      	cbz	r0, 31952 <download_client_callback+0x9a>
					LOG_ERR("Unable to reset DFU target");
   3193e:	f04f 0000 	mov.w	r0, #0
   31942:	2301      	movs	r3, #1
   31944:	f363 0007 	bfi	r0, r3, #0, #8
   31948:	f365 108f 	bfi	r0, r5, #6, #10
   3194c:	4974      	ldr	r1, [pc, #464]	; (31b20 <download_client_callback+0x268>)
   3194e:	f010 fb76 	bl	4203e <log_string_sync>
				first_fragment = true;
   31952:	2301      	movs	r3, #1
   31954:	7033      	strb	r3, [r6, #0]
}
   31956:	4620      	mov	r0, r4
   31958:	b005      	add	sp, #20
   3195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   3195c:	a801      	add	r0, sp, #4
   3195e:	f000 f989 	bl	31c74 <dfu_target_offset_get>
			if (err != 0) {
   31962:	b110      	cbz	r0, 3196a <download_client_callback+0xb2>
				send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   31964:	2004      	movs	r0, #4
   31966:	f7ff ff97 	bl	31898 <send_evt>
			if (offset != 0) {
   3196a:	9b01      	ldr	r3, [sp, #4]
   3196c:	b1d3      	cbz	r3, 319a4 <download_client_callback+0xec>
				(void)download_client_disconnect(&dlc);
   3196e:	4867      	ldr	r0, [pc, #412]	; (31b0c <download_client_callback+0x254>)
   31970:	f7ff faf4 	bl	30f5c <download_client_disconnect>
   31974:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   31978:	2300      	movs	r3, #0
   3197a:	496a      	ldr	r1, [pc, #424]	; (31b24 <download_client_callback+0x26c>)
   3197c:	486a      	ldr	r0, [pc, #424]	; (31b28 <download_client_callback+0x270>)
   3197e:	f00c fead 	bl	3e6dc <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   31982:	2303      	movs	r3, #3
   31984:	f04f 0000 	mov.w	r0, #0
   31988:	4a63      	ldr	r2, [pc, #396]	; (31b18 <download_client_callback+0x260>)
   3198a:	f363 0007 	bfi	r0, r3, #0, #8
   3198e:	4b61      	ldr	r3, [pc, #388]	; (31b14 <download_client_callback+0x25c>)
   31990:	4966      	ldr	r1, [pc, #408]	; (31b2c <download_client_callback+0x274>)
   31992:	1a9b      	subs	r3, r3, r2
   31994:	08db      	lsrs	r3, r3, #3
   31996:	f363 108f 	bfi	r0, r3, #6, #10
   3199a:	f010 fb50 	bl	4203e <log_string_sync>
				return -1;
   3199e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   319a2:	e7d8      	b.n	31956 <download_client_callback+0x9e>
		err = dfu_target_write(event->fragment.buf,
   319a4:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   319a8:	f000 f96e 	bl	31c88 <dfu_target_write>
		if (err != 0) {
   319ac:	4604      	mov	r4, r0
   319ae:	b318      	cbz	r0, 319f8 <download_client_callback+0x140>
			LOG_ERR("dfu_target_write error %d", err);
   319b0:	2301      	movs	r3, #1
   319b2:	f04f 0000 	mov.w	r0, #0
   319b6:	4d57      	ldr	r5, [pc, #348]	; (31b14 <download_client_callback+0x25c>)
   319b8:	f363 0007 	bfi	r0, r3, #0, #8
   319bc:	4b56      	ldr	r3, [pc, #344]	; (31b18 <download_client_callback+0x260>)
   319be:	4622      	mov	r2, r4
   319c0:	1aed      	subs	r5, r5, r3
   319c2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   319c6:	f365 108f 	bfi	r0, r5, #6, #10
   319ca:	4959      	ldr	r1, [pc, #356]	; (31b30 <download_client_callback+0x278>)
   319cc:	f010 fb37 	bl	4203e <log_string_sync>
			int res = dfu_target_done(false);
   319d0:	2000      	movs	r0, #0
   319d2:	f000 f965 	bl	31ca0 <dfu_target_done>
			if (res != 0) {
   319d6:	b148      	cbz	r0, 319ec <download_client_callback+0x134>
				LOG_ERR("Unable to free DFU target resources");
   319d8:	f04f 0000 	mov.w	r0, #0
   319dc:	2301      	movs	r3, #1
   319de:	f363 0007 	bfi	r0, r3, #0, #8
   319e2:	f365 108f 	bfi	r0, r5, #6, #10
   319e6:	4953      	ldr	r1, [pc, #332]	; (31b34 <download_client_callback+0x27c>)
   319e8:	f010 fb29 	bl	4203e <log_string_sync>
			first_fragment = true;
   319ec:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   319ee:	4847      	ldr	r0, [pc, #284]	; (31b0c <download_client_callback+0x254>)
			first_fragment = true;
   319f0:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   319f2:	f7ff fab3 	bl	30f5c <download_client_disconnect>
   319f6:	e77a      	b.n	318ee <download_client_callback+0x36>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   319f8:	7833      	ldrb	r3, [r6, #0]
   319fa:	2b00      	cmp	r3, #0
   319fc:	d1ab      	bne.n	31956 <download_client_callback+0x9e>
			err = dfu_target_offset_get(&offset);
   319fe:	a801      	add	r0, sp, #4
   31a00:	f000 f938 	bl	31c74 <dfu_target_offset_get>
			if (err != 0) {
   31a04:	4604      	mov	r4, r0
   31a06:	2800      	cmp	r0, #0
   31a08:	f47f af71 	bne.w	318ee <download_client_callback+0x36>
			if (file_size == 0) {
   31a0c:	4b3e      	ldr	r3, [pc, #248]	; (31b08 <download_client_callback+0x250>)
   31a0e:	681a      	ldr	r2, [r3, #0]
   31a10:	2a00      	cmp	r2, #0
   31a12:	f43f af6c 	beq.w	318ee <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   31a16:	2364      	movs	r3, #100	; 0x64
   31a18:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   31a1a:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   31a1e:	434b      	muls	r3, r1
   31a20:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   31a24:	9303      	str	r3, [sp, #12]
	callback(&evt);
   31a26:	4b44      	ldr	r3, [pc, #272]	; (31b38 <download_client_callback+0x280>)
   31a28:	a802      	add	r0, sp, #8
   31a2a:	681b      	ldr	r3, [r3, #0]
   31a2c:	4798      	blx	r3
   31a2e:	e792      	b.n	31956 <download_client_callback+0x9e>
		err = dfu_target_done(true);
   31a30:	2001      	movs	r0, #1
   31a32:	f000 f935 	bl	31ca0 <dfu_target_done>
		if (err != 0) {
   31a36:	4604      	mov	r4, r0
   31a38:	b178      	cbz	r0, 31a5a <download_client_callback+0x1a2>
			LOG_ERR("dfu_target_done error: %d", err);
   31a3a:	2301      	movs	r3, #1
   31a3c:	f04f 0000 	mov.w	r0, #0
   31a40:	4a35      	ldr	r2, [pc, #212]	; (31b18 <download_client_callback+0x260>)
   31a42:	f363 0007 	bfi	r0, r3, #0, #8
   31a46:	4b33      	ldr	r3, [pc, #204]	; (31b14 <download_client_callback+0x25c>)
   31a48:	493c      	ldr	r1, [pc, #240]	; (31b3c <download_client_callback+0x284>)
   31a4a:	1a9b      	subs	r3, r3, r2
   31a4c:	08db      	lsrs	r3, r3, #3
   31a4e:	f363 108f 	bfi	r0, r3, #6, #10
   31a52:	4622      	mov	r2, r4
   31a54:	f010 faf3 	bl	4203e <log_string_sync>
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   31a58:	e749      	b.n	318ee <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   31a5a:	482c      	ldr	r0, [pc, #176]	; (31b0c <download_client_callback+0x254>)
   31a5c:	f7ff fa7e 	bl	30f5c <download_client_disconnect>
		if (err != 0) {
   31a60:	4604      	mov	r4, r0
   31a62:	2800      	cmp	r0, #0
   31a64:	f47f af43 	bne.w	318ee <download_client_callback+0x36>
		send_evt(FOTA_DOWNLOAD_EVT_FINISHED);
   31a68:	2001      	movs	r0, #1
   31a6a:	f7ff ff15 	bl	31898 <send_evt>
		first_fragment = true;
   31a6e:	2201      	movs	r2, #1
   31a70:	4b24      	ldr	r3, [pc, #144]	; (31b04 <download_client_callback+0x24c>)
   31a72:	701a      	strb	r2, [r3, #0]
		break;
   31a74:	e76f      	b.n	31956 <download_client_callback+0x9e>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   31a76:	4e32      	ldr	r6, [pc, #200]	; (31b40 <download_client_callback+0x288>)
   31a78:	4c26      	ldr	r4, [pc, #152]	; (31b14 <download_client_callback+0x25c>)
   31a7a:	6832      	ldr	r2, [r6, #0]
   31a7c:	4f26      	ldr	r7, [pc, #152]	; (31b18 <download_client_callback+0x260>)
   31a7e:	b1aa      	cbz	r2, 31aac <download_client_callback+0x1f4>
   31a80:	6843      	ldr	r3, [r0, #4]
   31a82:	f113 0f80 	cmn.w	r3, #128	; 0x80
   31a86:	d001      	beq.n	31a8c <download_client_callback+0x1d4>
   31a88:	3368      	adds	r3, #104	; 0x68
   31a8a:	d10f      	bne.n	31aac <download_client_callback+0x1f4>
			LOG_WRN("Download socket error. %d retries left...",
   31a8c:	2302      	movs	r3, #2
   31a8e:	f04f 0000 	mov.w	r0, #0
   31a92:	1be4      	subs	r4, r4, r7
   31a94:	f363 0007 	bfi	r0, r3, #0, #8
   31a98:	08e4      	lsrs	r4, r4, #3
   31a9a:	f364 108f 	bfi	r0, r4, #6, #10
   31a9e:	4929      	ldr	r1, [pc, #164]	; (31b44 <download_client_callback+0x28c>)
   31aa0:	f010 facd 	bl	4203e <log_string_sync>
			socket_retries_left--;
   31aa4:	6833      	ldr	r3, [r6, #0]
   31aa6:	3b01      	subs	r3, #1
   31aa8:	6033      	str	r3, [r6, #0]
   31aaa:	e713      	b.n	318d4 <download_client_callback+0x1c>
			download_client_disconnect(&dlc);
   31aac:	4817      	ldr	r0, [pc, #92]	; (31b0c <download_client_callback+0x254>)
   31aae:	f7ff fa55 	bl	30f5c <download_client_disconnect>
			LOG_ERR("Download client error");
   31ab2:	2301      	movs	r3, #1
   31ab4:	f04f 0000 	mov.w	r0, #0
   31ab8:	1be4      	subs	r4, r4, r7
   31aba:	f363 0007 	bfi	r0, r3, #0, #8
   31abe:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   31ac2:	f364 108f 	bfi	r0, r4, #6, #10
   31ac6:	4920      	ldr	r1, [pc, #128]	; (31b48 <download_client_callback+0x290>)
   31ac8:	f010 fab9 	bl	4203e <log_string_sync>
			err = dfu_target_done(false);
   31acc:	2000      	movs	r0, #0
   31ace:	f000 f8e7 	bl	31ca0 <dfu_target_done>
			if (err == -EACCES) {
   31ad2:	f110 0f0d 	cmn.w	r0, #13
   31ad6:	d00a      	beq.n	31aee <download_client_callback+0x236>
			} else if (err != 0) {
   31ad8:	b148      	cbz	r0, 31aee <download_client_callback+0x236>
				LOG_ERR("Unable to deinitialze resources "
   31ada:	f04f 0000 	mov.w	r0, #0
   31ade:	2301      	movs	r3, #1
   31ae0:	f363 0007 	bfi	r0, r3, #0, #8
   31ae4:	f364 108f 	bfi	r0, r4, #6, #10
   31ae8:	4918      	ldr	r1, [pc, #96]	; (31b4c <download_client_callback+0x294>)
   31aea:	f010 faa8 	bl	4203e <log_string_sync>
			first_fragment = true;
   31aee:	2201      	movs	r2, #1
   31af0:	4b04      	ldr	r3, [pc, #16]	; (31b04 <download_client_callback+0x24c>)
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   31af2:	2004      	movs	r0, #4
			first_fragment = true;
   31af4:	701a      	strb	r2, [r3, #0]
			send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   31af6:	f7ff fecf 	bl	31898 <send_evt>
			return event->error;
   31afa:	686c      	ldr	r4, [r5, #4]
   31afc:	e72b      	b.n	31956 <download_client_callback+0x9e>
		return -EINVAL;
   31afe:	f06f 0415 	mvn.w	r4, #21
   31b02:	e728      	b.n	31956 <download_client_callback+0x9e>
   31b04:	20020995 	.word	0x20020995
   31b08:	200254e0 	.word	0x200254e0
   31b0c:	20021d00 	.word	0x20021d00
   31b10:	00044d9b 	.word	0x00044d9b
   31b14:	000468f0 	.word	0x000468f0
   31b18:	00046878 	.word	0x00046878
   31b1c:	0004dbe8 	.word	0x0004dbe8
   31b20:	0004dc01 	.word	0x0004dc01
   31b24:	20023610 	.word	0x20023610
   31b28:	200244a8 	.word	0x200244a8
   31b2c:	0004dc1c 	.word	0x0004dc1c
   31b30:	0004dc41 	.word	0x0004dc41
   31b34:	0004dc5b 	.word	0x0004dc5b
   31b38:	200254dc 	.word	0x200254dc
   31b3c:	0004dc7f 	.word	0x0004dc7f
   31b40:	200254e4 	.word	0x200254e4
   31b44:	0004dc99 	.word	0x0004dc99
   31b48:	0004dcc3 	.word	0x0004dcc3
   31b4c:	0004dcd9 	.word	0x0004dcd9

00031b50 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   31b50:	b530      	push	{r4, r5, lr}
   31b52:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   31b54:	e9cd 2301 	strd	r2, r3, [sp, #4]
   31b58:	9b08      	ldr	r3, [sp, #32]
{
   31b5a:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   31b5c:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   31b5e:	4601      	mov	r1, r0
   31b60:	b1c8      	cbz	r0, 31b96 <fota_download_start+0x46>
   31b62:	b1c5      	cbz	r5, 31b96 <fota_download_start+0x46>
   31b64:	4b0d      	ldr	r3, [pc, #52]	; (31b9c <fota_download_start+0x4c>)
   31b66:	681b      	ldr	r3, [r3, #0]
   31b68:	b1ab      	cbz	r3, 31b96 <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   31b6a:	2202      	movs	r2, #2
   31b6c:	4b0c      	ldr	r3, [pc, #48]	; (31ba0 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   31b6e:	480d      	ldr	r0, [pc, #52]	; (31ba4 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   31b70:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   31b72:	aa01      	add	r2, sp, #4
   31b74:	f7fe ff96 	bl	30aa4 <download_client_connect>
	if (err != 0) {
   31b78:	4604      	mov	r4, r0
   31b7a:	b948      	cbnz	r0, 31b90 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   31b7c:	4602      	mov	r2, r0
   31b7e:	4629      	mov	r1, r5
   31b80:	4808      	ldr	r0, [pc, #32]	; (31ba4 <fota_download_start+0x54>)
   31b82:	f7ff fb9f 	bl	312c4 <download_client_start>
	if (err != 0) {
   31b86:	4604      	mov	r4, r0
   31b88:	b110      	cbz	r0, 31b90 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   31b8a:	4806      	ldr	r0, [pc, #24]	; (31ba4 <fota_download_start+0x54>)
   31b8c:	f7ff f9e6 	bl	30f5c <download_client_disconnect>
		return err;
	}

	return 0;
}
   31b90:	4620      	mov	r0, r4
   31b92:	b005      	add	sp, #20
   31b94:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   31b96:	f06f 0415 	mvn.w	r4, #21
   31b9a:	e7f9      	b.n	31b90 <fota_download_start+0x40>
   31b9c:	200254dc 	.word	0x200254dc
   31ba0:	200254e4 	.word	0x200254e4
   31ba4:	20021d00 	.word	0x20021d00

00031ba8 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   31ba8:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   31baa:	b158      	cbz	r0, 31bc4 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   31bac:	4b07      	ldr	r3, [pc, #28]	; (31bcc <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   31bae:	4908      	ldr	r1, [pc, #32]	; (31bd0 <fota_download_init+0x28>)
	callback = client_callback;
   31bb0:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   31bb2:	4808      	ldr	r0, [pc, #32]	; (31bd4 <fota_download_init+0x2c>)
   31bb4:	f013 fa57 	bl	45066 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   31bb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   31bbc:	4906      	ldr	r1, [pc, #24]	; (31bd8 <fota_download_init+0x30>)
   31bbe:	4807      	ldr	r0, [pc, #28]	; (31bdc <fota_download_init+0x34>)
   31bc0:	f7fe bf46 	b.w	30a50 <download_client_init>
}
   31bc4:	f06f 0015 	mvn.w	r0, #21
   31bc8:	bd08      	pop	{r3, pc}
   31bca:	bf00      	nop
   31bcc:	200254dc 	.word	0x200254dc
   31bd0:	000317e9 	.word	0x000317e9
   31bd4:	20023610 	.word	0x20023610
   31bd8:	000318b9 	.word	0x000318b9
   31bdc:	20021d00 	.word	0x20021d00

00031be0 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   31be0:	b510      	push	{r4, lr}
   31be2:	460c      	mov	r4, r1
	if (dfu_target_mcuboot_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   31be4:	f000 f960 	bl	31ea8 <dfu_target_modem_identify>
   31be8:	b980      	cbnz	r0, 31c0c <dfu_target_img_type+0x2c>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   31bea:	2c1f      	cmp	r4, #31
   31bec:	d910      	bls.n	31c10 <dfu_target_img_type+0x30>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   31bee:	2301      	movs	r3, #1
   31bf0:	4a09      	ldr	r2, [pc, #36]	; (31c18 <dfu_target_img_type+0x38>)
   31bf2:	f363 0007 	bfi	r0, r3, #0, #8
   31bf6:	4b09      	ldr	r3, [pc, #36]	; (31c1c <dfu_target_img_type+0x3c>)
   31bf8:	4909      	ldr	r1, [pc, #36]	; (31c20 <dfu_target_img_type+0x40>)
   31bfa:	1a9b      	subs	r3, r3, r2
   31bfc:	08db      	lsrs	r3, r3, #3
   31bfe:	f363 108f 	bfi	r0, r3, #6, #10
   31c02:	f010 fa1c 	bl	4203e <log_string_sync>
	return -ENOTSUP;
   31c06:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   31c0a:	bd10      	pop	{r4, pc}
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   31c0c:	2002      	movs	r0, #2
   31c0e:	e7fc      	b.n	31c0a <dfu_target_img_type+0x2a>
		return -EAGAIN;
   31c10:	f06f 000a 	mvn.w	r0, #10
   31c14:	e7f9      	b.n	31c0a <dfu_target_img_type+0x2a>
   31c16:	bf00      	nop
   31c18:	00046878 	.word	0x00046878
   31c1c:	000468c8 	.word	0x000468c8
   31c20:	0004ddcb 	.word	0x0004ddcb

00031c24 <dfu_target_init>:
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   31c24:	2802      	cmp	r0, #2
{
   31c26:	b508      	push	{r3, lr}
   31c28:	460b      	mov	r3, r1
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   31c2a:	d108      	bne.n	31c3e <dfu_target_init+0x1a>
	if (new_target == current_target
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
		return 0;
	}

	current_target = new_target;
   31c2c:	490c      	ldr	r1, [pc, #48]	; (31c60 <dfu_target_init+0x3c>)
   31c2e:	480d      	ldr	r0, [pc, #52]	; (31c64 <dfu_target_init+0x40>)
   31c30:	6008      	str	r0, [r1, #0]

	return current_target->init(file_size, cb);
   31c32:	4618      	mov	r0, r3
}
   31c34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return current_target->init(file_size, cb);
   31c38:	4611      	mov	r1, r2
   31c3a:	f000 b93d 	b.w	31eb8 <dfu_target_modem_init>
		LOG_ERR("Unknown image type");
   31c3e:	2301      	movs	r3, #1
   31c40:	f04f 0000 	mov.w	r0, #0
   31c44:	4a08      	ldr	r2, [pc, #32]	; (31c68 <dfu_target_init+0x44>)
   31c46:	f363 0007 	bfi	r0, r3, #0, #8
   31c4a:	4b08      	ldr	r3, [pc, #32]	; (31c6c <dfu_target_init+0x48>)
   31c4c:	4908      	ldr	r1, [pc, #32]	; (31c70 <dfu_target_init+0x4c>)
   31c4e:	1a9b      	subs	r3, r3, r2
   31c50:	08db      	lsrs	r3, r3, #3
   31c52:	f363 108f 	bfi	r0, r3, #6, #10
   31c56:	f010 f9f2 	bl	4203e <log_string_sync>
}
   31c5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31c5e:	bd08      	pop	{r3, pc}
   31c60:	200254e8 	.word	0x200254e8
   31c64:	00047368 	.word	0x00047368
   31c68:	00046878 	.word	0x00046878
   31c6c:	000468c8 	.word	0x000468c8
   31c70:	0004dde9 	.word	0x0004dde9

00031c74 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   31c74:	4b03      	ldr	r3, [pc, #12]	; (31c84 <dfu_target_offset_get+0x10>)
   31c76:	681b      	ldr	r3, [r3, #0]
   31c78:	b10b      	cbz	r3, 31c7e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   31c7a:	685b      	ldr	r3, [r3, #4]
   31c7c:	4718      	bx	r3
}
   31c7e:	f06f 000c 	mvn.w	r0, #12
   31c82:	4770      	bx	lr
   31c84:	200254e8 	.word	0x200254e8

00031c88 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   31c88:	4b04      	ldr	r3, [pc, #16]	; (31c9c <dfu_target_write+0x14>)
   31c8a:	681b      	ldr	r3, [r3, #0]
   31c8c:	b113      	cbz	r3, 31c94 <dfu_target_write+0xc>
   31c8e:	b108      	cbz	r0, 31c94 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   31c90:	689b      	ldr	r3, [r3, #8]
   31c92:	4718      	bx	r3
}
   31c94:	f06f 000c 	mvn.w	r0, #12
   31c98:	4770      	bx	lr
   31c9a:	bf00      	nop
   31c9c:	200254e8 	.word	0x200254e8

00031ca0 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   31ca0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   31ca2:	4d0f      	ldr	r5, [pc, #60]	; (31ce0 <dfu_target_done+0x40>)
{
   31ca4:	4606      	mov	r6, r0
	if (current_target == NULL) {
   31ca6:	682b      	ldr	r3, [r5, #0]
   31ca8:	b1bb      	cbz	r3, 31cda <dfu_target_done+0x3a>
		return -EACCES;
	}

	err = current_target->done(successful);
   31caa:	68db      	ldr	r3, [r3, #12]
   31cac:	4798      	blx	r3
	if (err != 0) {
   31cae:	4604      	mov	r4, r0
   31cb0:	b178      	cbz	r0, 31cd2 <dfu_target_done+0x32>
		LOG_ERR("Unable to clean up dfu_target");
   31cb2:	2301      	movs	r3, #1
   31cb4:	f04f 0000 	mov.w	r0, #0
   31cb8:	4a0a      	ldr	r2, [pc, #40]	; (31ce4 <dfu_target_done+0x44>)
   31cba:	f363 0007 	bfi	r0, r3, #0, #8
   31cbe:	4b0a      	ldr	r3, [pc, #40]	; (31ce8 <dfu_target_done+0x48>)
   31cc0:	490a      	ldr	r1, [pc, #40]	; (31cec <dfu_target_done+0x4c>)
   31cc2:	1a9b      	subs	r3, r3, r2
   31cc4:	08db      	lsrs	r3, r3, #3
   31cc6:	f363 108f 	bfi	r0, r3, #6, #10
   31cca:	f010 f9b8 	bl	4203e <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   31cce:	4620      	mov	r0, r4
   31cd0:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   31cd2:	2e00      	cmp	r6, #0
   31cd4:	d0fb      	beq.n	31cce <dfu_target_done+0x2e>
		current_target = NULL;
   31cd6:	6028      	str	r0, [r5, #0]
   31cd8:	e7f9      	b.n	31cce <dfu_target_done+0x2e>
		return -EACCES;
   31cda:	f06f 040c 	mvn.w	r4, #12
   31cde:	e7f6      	b.n	31cce <dfu_target_done+0x2e>
   31ce0:	200254e8 	.word	0x200254e8
   31ce4:	00046878 	.word	0x00046878
   31ce8:	000468c8 	.word	0x000468c8
   31cec:	0004ddad 	.word	0x0004ddad

00031cf0 <dfu_target_reset>:

int dfu_target_reset(void)
{
   31cf0:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   31cf2:	4d0d      	ldr	r5, [pc, #52]	; (31d28 <dfu_target_reset+0x38>)
   31cf4:	682a      	ldr	r2, [r5, #0]
   31cf6:	b1a2      	cbz	r2, 31d22 <dfu_target_reset+0x32>
		int err = current_target->done(false);
   31cf8:	68d3      	ldr	r3, [r2, #12]
   31cfa:	2000      	movs	r0, #0
   31cfc:	4798      	blx	r3

		if (err != 0) {
   31cfe:	4604      	mov	r4, r0
   31d00:	b178      	cbz	r0, 31d22 <dfu_target_reset+0x32>
			LOG_ERR("Unable to clean up dfu_target");
   31d02:	2301      	movs	r3, #1
   31d04:	f04f 0000 	mov.w	r0, #0
   31d08:	4a08      	ldr	r2, [pc, #32]	; (31d2c <dfu_target_reset+0x3c>)
   31d0a:	f363 0007 	bfi	r0, r3, #0, #8
   31d0e:	4b08      	ldr	r3, [pc, #32]	; (31d30 <dfu_target_reset+0x40>)
   31d10:	4908      	ldr	r1, [pc, #32]	; (31d34 <dfu_target_reset+0x44>)
   31d12:	1a9b      	subs	r3, r3, r2
   31d14:	08db      	lsrs	r3, r3, #3
   31d16:	f363 108f 	bfi	r0, r3, #6, #10
   31d1a:	f010 f990 	bl	4203e <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   31d1e:	4620      	mov	r0, r4
   31d20:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   31d22:	2400      	movs	r4, #0
   31d24:	602c      	str	r4, [r5, #0]
	return 0;
   31d26:	e7fa      	b.n	31d1e <dfu_target_reset+0x2e>
   31d28:	200254e8 	.word	0x200254e8
   31d2c:	00046878 	.word	0x00046878
   31d30:	000468c8 	.word	0x000468c8
   31d34:	0004ddad 	.word	0x0004ddad

00031d38 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   31d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   31d3a:	2200      	movs	r2, #0
   31d3c:	2304      	movs	r3, #4
   31d3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   31d42:	4b10      	ldr	r3, [pc, #64]	; (31d84 <get_modem_error+0x4c>)
   31d44:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   31d46:	ab03      	add	r3, sp, #12
   31d48:	9300      	str	r3, [sp, #0]
   31d4a:	2214      	movs	r2, #20
   31d4c:	ab02      	add	r3, sp, #8
   31d4e:	f240 2103 	movw	r1, #515	; 0x203
   31d52:	f010 fd7d 	bl	42850 <z_impl_zsock_getsockopt>
	if (rc) {
   31d56:	b188      	cbz	r0, 31d7c <get_modem_error+0x44>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   31d58:	2301      	movs	r3, #1
   31d5a:	f04f 0400 	mov.w	r4, #0
   31d5e:	4a0a      	ldr	r2, [pc, #40]	; (31d88 <get_modem_error+0x50>)
   31d60:	f363 0407 	bfi	r4, r3, #0, #8
   31d64:	4b09      	ldr	r3, [pc, #36]	; (31d8c <get_modem_error+0x54>)
   31d66:	1a9b      	subs	r3, r3, r2
   31d68:	08db      	lsrs	r3, r3, #3
   31d6a:	f363 148f 	bfi	r4, r3, #6, #10
   31d6e:	f010 ffd4 	bl	42d1a <__errno>
   31d72:	4907      	ldr	r1, [pc, #28]	; (31d90 <get_modem_error+0x58>)
   31d74:	6802      	ldr	r2, [r0, #0]
   31d76:	4620      	mov	r0, r4
   31d78:	f010 f961 	bl	4203e <log_string_sync>
	}

	return err;
}
   31d7c:	9802      	ldr	r0, [sp, #8]
   31d7e:	b004      	add	sp, #16
   31d80:	bd10      	pop	{r4, pc}
   31d82:	bf00      	nop
   31d84:	200254f0 	.word	0x200254f0
   31d88:	00046878 	.word	0x00046878
   31d8c:	000468d0 	.word	0x000468d0
   31d90:	0004e046 	.word	0x0004e046

00031d94 <delete_banked_modem_fw>:
	}
	return 0;
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
   31d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int err;
	socklen_t len = sizeof(offset);
   31d98:	2304      	movs	r3, #4
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   31d9a:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   31d9e:	9303      	str	r3, [sp, #12]
	LOG_INF("Deleting firmware image, this can take several minutes");
   31da0:	2303      	movs	r3, #3
   31da2:	4c38      	ldr	r4, [pc, #224]	; (31e84 <delete_banked_modem_fw+0xf0>)
   31da4:	f363 0007 	bfi	r0, r3, #0, #8
   31da8:	4b37      	ldr	r3, [pc, #220]	; (31e88 <delete_banked_modem_fw+0xf4>)
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   31daa:	4e38      	ldr	r6, [pc, #224]	; (31e8c <delete_banked_modem_fw+0xf8>)
	LOG_INF("Deleting firmware image, this can take several minutes");
   31dac:	1ae4      	subs	r4, r4, r3
   31dae:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   31db2:	f364 108f 	bfi	r0, r4, #6, #10
   31db6:	4936      	ldr	r1, [pc, #216]	; (31e90 <delete_banked_modem_fw+0xfc>)
   31db8:	f010 f941 	bl	4203e <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   31dbc:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   31dbe:	2300      	movs	r3, #0
   31dc0:	2206      	movs	r2, #6
   31dc2:	9300      	str	r3, [sp, #0]
   31dc4:	f240 2103 	movw	r1, #515	; 0x203
   31dc8:	f010 fd5d 	bl	42886 <z_impl_zsock_setsockopt>
	if (err < 0) {
   31dcc:	2800      	cmp	r0, #0
   31dce:	da12      	bge.n	31df6 <delete_banked_modem_fw+0x62>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   31dd0:	2301      	movs	r3, #1
   31dd2:	f04f 0500 	mov.w	r5, #0
   31dd6:	f363 0507 	bfi	r5, r3, #0, #8
   31dda:	f010 ff9e 	bl	42d1a <__errno>
   31dde:	f364 158f 	bfi	r5, r4, #6, #10
   31de2:	6802      	ldr	r2, [r0, #0]
   31de4:	492b      	ldr	r1, [pc, #172]	; (31e94 <delete_banked_modem_fw+0x100>)
   31de6:	4628      	mov	r0, r5
   31de8:	f010 f929 	bl	4203e <log_string_sync>
		return -EFAULT;
   31dec:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   31df0:	b004      	add	sp, #16
   31df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   31df6:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   31df8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 31ea0 <delete_banked_modem_fw+0x10c>
				callback(DFU_TARGET_EVT_TIMEOUT);
   31dfc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 31e98 <delete_banked_modem_fw+0x104>
					LOG_ERR("DFU error: %d", err);
   31e00:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 31ea4 <delete_banked_modem_fw+0x110>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31e04:	6830      	ldr	r0, [r6, #0]
   31e06:	ab03      	add	r3, sp, #12
   31e08:	9300      	str	r3, [sp, #0]
   31e0a:	2207      	movs	r2, #7
   31e0c:	4643      	mov	r3, r8
   31e0e:	f240 2103 	movw	r1, #515	; 0x203
   31e12:	f010 fd1d 	bl	42850 <z_impl_zsock_getsockopt>
		if (err < 0) {
   31e16:	2800      	cmp	r0, #0
   31e18:	da24      	bge.n	31e64 <delete_banked_modem_fw+0xd0>
			if (timeout < 0) {
   31e1a:	2d00      	cmp	r5, #0
   31e1c:	da04      	bge.n	31e28 <delete_banked_modem_fw+0x94>
				callback(DFU_TARGET_EVT_TIMEOUT);
   31e1e:	f8d9 3000 	ldr.w	r3, [r9]
   31e22:	2000      	movs	r0, #0
   31e24:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   31e26:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   31e28:	f010 ff77 	bl	42d1a <__errno>
   31e2c:	6803      	ldr	r3, [r0, #0]
   31e2e:	2b08      	cmp	r3, #8
   31e30:	d116      	bne.n	31e60 <delete_banked_modem_fw+0xcc>
				err = get_modem_error();
   31e32:	f7ff ff81 	bl	31d38 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   31e36:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   31e3a:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   31e3c:	d00b      	beq.n	31e56 <delete_banked_modem_fw+0xc2>
					LOG_ERR("DFU error: %d", err);
   31e3e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   31e42:	f043 0301 	orr.w	r3, r3, #1
   31e46:	f363 0707 	bfi	r7, r3, #0, #8
   31e4a:	f364 178f 	bfi	r7, r4, #6, #10
   31e4e:	4651      	mov	r1, sl
   31e50:	4638      	mov	r0, r7
   31e52:	f010 f8f4 	bl	4203e <log_string_sync>
	return z_impl_k_sleep(timeout);
   31e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   31e5a:	2100      	movs	r1, #0
   31e5c:	f00c f996 	bl	3e18c <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   31e60:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31e62:	e7cf      	b.n	31e04 <delete_banked_modem_fw+0x70>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   31e64:	4b0c      	ldr	r3, [pc, #48]	; (31e98 <delete_banked_modem_fw+0x104>)
   31e66:	2001      	movs	r0, #1
   31e68:	681b      	ldr	r3, [r3, #0]
   31e6a:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   31e6c:	2303      	movs	r3, #3
   31e6e:	f04f 0000 	mov.w	r0, #0
   31e72:	f363 0007 	bfi	r0, r3, #0, #8
   31e76:	f364 108f 	bfi	r0, r4, #6, #10
   31e7a:	4908      	ldr	r1, [pc, #32]	; (31e9c <delete_banked_modem_fw+0x108>)
   31e7c:	f010 f8df 	bl	4203e <log_string_sync>
	return 0;
   31e80:	2000      	movs	r0, #0
   31e82:	e7b5      	b.n	31df0 <delete_banked_modem_fw+0x5c>
   31e84:	000468d0 	.word	0x000468d0
   31e88:	00046878 	.word	0x00046878
   31e8c:	200254f0 	.word	0x200254f0
   31e90:	0004ddfc 	.word	0x0004ddfc
   31e94:	0004de33 	.word	0x0004de33
   31e98:	200254ec 	.word	0x200254ec
   31e9c:	0004de63 	.word	0x0004de63
   31ea0:	200254f4 	.word	0x200254f4
   31ea4:	0004de55 	.word	0x0004de55

00031ea8 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   31ea8:	6840      	ldr	r0, [r0, #4]

}
   31eaa:	4b02      	ldr	r3, [pc, #8]	; (31eb4 <dfu_target_modem_identify+0xc>)
   31eac:	1ac3      	subs	r3, r0, r3
   31eae:	4258      	negs	r0, r3
   31eb0:	4158      	adcs	r0, r3
   31eb2:	4770      	bx	lr
   31eb4:	7544656d 	.word	0x7544656d

00031eb8 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   31eb8:	2304      	movs	r3, #4
{
   31eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31ebe:	b098      	sub	sp, #96	; 0x60
	socklen_t len = sizeof(offset);
   31ec0:	9303      	str	r3, [sp, #12]

	callback = cb;
   31ec2:	4b72      	ldr	r3, [pc, #456]	; (3208c <dfu_target_modem_init+0x1d4>)
{
   31ec4:	4680      	mov	r8, r0
	callback = cb;
   31ec6:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   31ec8:	f240 2203 	movw	r2, #515	; 0x203
   31ecc:	2101      	movs	r1, #1
   31ece:	2006      	movs	r0, #6
   31ed0:	f7f3 fa8a 	bl	253e8 <z_impl_zsock_socket>
   31ed4:	4c6e      	ldr	r4, [pc, #440]	; (32090 <dfu_target_modem_init+0x1d8>)
   31ed6:	4b6f      	ldr	r3, [pc, #444]	; (32094 <dfu_target_modem_init+0x1dc>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   31ed8:	4e6f      	ldr	r6, [pc, #444]	; (32098 <dfu_target_modem_init+0x1e0>)
   31eda:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   31edc:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   31ede:	6030      	str	r0, [r6, #0]
	if (fd < 0) {
   31ee0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   31ee4:	4635      	mov	r5, r6
		LOG_ERR("Failed to open Modem DFU socket.");
   31ee6:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   31eea:	da3a      	bge.n	31f62 <dfu_target_modem_init+0xaa>
		LOG_ERR("Failed to open Modem DFU socket.");
   31eec:	2301      	movs	r3, #1
   31eee:	f363 0007 	bfi	r0, r3, #0, #8
   31ef2:	f364 108f 	bfi	r0, r4, #6, #10
   31ef6:	4969      	ldr	r1, [pc, #420]	; (3209c <dfu_target_modem_init+0x1e4>)
   31ef8:	f010 f8a1 	bl	4203e <log_string_sync>
		return fd;
   31efc:	6830      	ldr	r0, [r6, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   31efe:	2800      	cmp	r0, #0
   31f00:	db55      	blt.n	31fae <dfu_target_modem_init+0xf6>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   31f02:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   31f04:	af03      	add	r7, sp, #12
   31f06:	9700      	str	r7, [sp, #0]
   31f08:	ab0e      	add	r3, sp, #56	; 0x38
   31f0a:	2202      	movs	r2, #2
   31f0c:	f240 2103 	movw	r1, #515	; 0x203
   31f10:	f010 fc9e 	bl	42850 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31f14:	2800      	cmp	r0, #0
   31f16:	da13      	bge.n	31f40 <dfu_target_modem_init+0x88>
		if (errno == ENOEXEC) {
   31f18:	f010 feff 	bl	42d1a <__errno>
   31f1c:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   31f1e:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   31f22:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   31f24:	f04f 0301 	mov.w	r3, #1
   31f28:	f363 0607 	bfi	r6, r3, #0, #8
   31f2c:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   31f30:	d157      	bne.n	31fe2 <dfu_target_modem_init+0x12a>
			LOG_ERR("Modem error: %d", get_modem_error());
   31f32:	f7ff ff01 	bl	31d38 <get_modem_error>
   31f36:	4602      	mov	r2, r0
   31f38:	4959      	ldr	r1, [pc, #356]	; (320a0 <dfu_target_modem_init+0x1e8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31f3a:	4630      	mov	r0, r6
   31f3c:	f010 f87f 	bl	4203e <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   31f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   31f42:	4543      	cmp	r3, r8
   31f44:	d252      	bcs.n	31fec <dfu_target_modem_init+0x134>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   31f46:	2201      	movs	r2, #1
   31f48:	f04f 0000 	mov.w	r0, #0
   31f4c:	f362 0007 	bfi	r0, r2, #0, #8
   31f50:	f364 108f 	bfi	r0, r4, #6, #10
   31f54:	4642      	mov	r2, r8
   31f56:	4953      	ldr	r1, [pc, #332]	; (320a4 <dfu_target_modem_init+0x1ec>)
   31f58:	f010 f871 	bl	4203e <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   31f5c:	f06f 001a 	mvn.w	r0, #26
   31f60:	e025      	b.n	31fae <dfu_target_modem_init+0xf6>
	LOG_INF("Modem DFU Socket created");
   31f62:	2303      	movs	r3, #3
	len = sizeof(version);
   31f64:	2724      	movs	r7, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   31f66:	f363 0007 	bfi	r0, r3, #0, #8
   31f6a:	f364 108f 	bfi	r0, r4, #6, #10
   31f6e:	494e      	ldr	r1, [pc, #312]	; (320a8 <dfu_target_modem_init+0x1f0>)
   31f70:	f010 f865 	bl	4203e <log_string_sync>
	len = sizeof(version);
   31f74:	9704      	str	r7, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   31f76:	6830      	ldr	r0, [r6, #0]
   31f78:	ab04      	add	r3, sp, #16
   31f7a:	ae05      	add	r6, sp, #20
   31f7c:	9300      	str	r3, [sp, #0]
   31f7e:	2201      	movs	r2, #1
   31f80:	4633      	mov	r3, r6
   31f82:	f240 2103 	movw	r1, #515	; 0x203
   31f86:	f010 fc63 	bl	42850 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31f8a:	2800      	cmp	r0, #0
   31f8c:	da12      	bge.n	31fb4 <dfu_target_modem_init+0xfc>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   31f8e:	2301      	movs	r3, #1
   31f90:	f04f 0500 	mov.w	r5, #0
   31f94:	f363 0507 	bfi	r5, r3, #0, #8
   31f98:	f010 febf 	bl	42d1a <__errno>
   31f9c:	f364 158f 	bfi	r5, r4, #6, #10
   31fa0:	6802      	ldr	r2, [r0, #0]
   31fa2:	4942      	ldr	r1, [pc, #264]	; (320ac <dfu_target_modem_init+0x1f4>)
   31fa4:	4628      	mov	r0, r5
   31fa6:	f010 f84a 	bl	4203e <log_string_sync>
		return -1;
   31faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   31fae:	b018      	add	sp, #96	; 0x60
   31fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   31fb4:	9600      	str	r6, [sp, #0]
   31fb6:	463b      	mov	r3, r7
   31fb8:	4a3d      	ldr	r2, [pc, #244]	; (320b0 <dfu_target_modem_init+0x1f8>)
   31fba:	2125      	movs	r1, #37	; 0x25
   31fbc:	a80e      	add	r0, sp, #56	; 0x38
   31fbe:	f00e f93d 	bl	4023c <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31fc2:	f04f 0600 	mov.w	r6, #0
   31fc6:	2303      	movs	r3, #3
   31fc8:	a80e      	add	r0, sp, #56	; 0x38
   31fca:	f363 0607 	bfi	r6, r3, #0, #8
   31fce:	f010 f849 	bl	42064 <log_strdup>
   31fd2:	f364 168f 	bfi	r6, r4, #6, #10
   31fd6:	4602      	mov	r2, r0
   31fd8:	4936      	ldr	r1, [pc, #216]	; (320b4 <dfu_target_modem_init+0x1fc>)
   31fda:	4630      	mov	r0, r6
   31fdc:	f010 f82f 	bl	4203e <log_string_sync>
	if (err < 0) {
   31fe0:	e78f      	b.n	31f02 <dfu_target_modem_init+0x4a>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31fe2:	f010 fe9a 	bl	42d1a <__errno>
   31fe6:	4934      	ldr	r1, [pc, #208]	; (320b8 <dfu_target_modem_init+0x200>)
   31fe8:	6802      	ldr	r2, [r0, #0]
   31fea:	e7a6      	b.n	31f3a <dfu_target_modem_init+0x82>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31fec:	6828      	ldr	r0, [r5, #0]
   31fee:	4b33      	ldr	r3, [pc, #204]	; (320bc <dfu_target_modem_init+0x204>)
   31ff0:	9700      	str	r7, [sp, #0]
   31ff2:	2207      	movs	r2, #7
   31ff4:	f240 2103 	movw	r1, #515	; 0x203
   31ff8:	f010 fc2a 	bl	42850 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31ffc:	2800      	cmp	r0, #0
   31ffe:	da13      	bge.n	32028 <dfu_target_modem_init+0x170>
		if (errno == ENOEXEC) {
   32000:	f010 fe8b 	bl	42d1a <__errno>
   32004:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   32006:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   3200a:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   3200c:	f04f 0301 	mov.w	r3, #1
   32010:	f363 0607 	bfi	r6, r3, #0, #8
   32014:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   32018:	d10f      	bne.n	3203a <dfu_target_modem_init+0x182>
			LOG_ERR("Modem error: %d", get_modem_error());
   3201a:	f7ff fe8d 	bl	31d38 <get_modem_error>
   3201e:	4602      	mov	r2, r0
   32020:	491f      	ldr	r1, [pc, #124]	; (320a0 <dfu_target_modem_init+0x1e8>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   32022:	4630      	mov	r0, r6
   32024:	f010 f80b 	bl	4203e <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   32028:	4e24      	ldr	r6, [pc, #144]	; (320bc <dfu_target_modem_init+0x204>)
   3202a:	6832      	ldr	r2, [r6, #0]
   3202c:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   32030:	d108      	bne.n	32044 <dfu_target_modem_init+0x18c>
		delete_banked_modem_fw();
   32032:	f7ff feaf 	bl	31d94 <delete_banked_modem_fw>
	return 0;
   32036:	2000      	movs	r0, #0
   32038:	e7b9      	b.n	31fae <dfu_target_modem_init+0xf6>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   3203a:	f010 fe6e 	bl	42d1a <__errno>
   3203e:	491e      	ldr	r1, [pc, #120]	; (320b8 <dfu_target_modem_init+0x200>)
   32040:	6802      	ldr	r2, [r0, #0]
   32042:	e7ee      	b.n	32022 <dfu_target_modem_init+0x16a>
	} else if (offset != 0) {
   32044:	2a00      	cmp	r2, #0
   32046:	d0f6      	beq.n	32036 <dfu_target_modem_init+0x17e>
		LOG_INF("Setting offset to 0x%x", offset);
   32048:	2303      	movs	r3, #3
   3204a:	f04f 0000 	mov.w	r0, #0
   3204e:	f363 0007 	bfi	r0, r3, #0, #8
   32052:	f364 108f 	bfi	r0, r4, #6, #10
   32056:	491a      	ldr	r1, [pc, #104]	; (320c0 <dfu_target_modem_init+0x208>)
   32058:	f00f fff1 	bl	4203e <log_string_sync>
		len = sizeof(offset);
   3205c:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   3205e:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   32060:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   32062:	2207      	movs	r2, #7
   32064:	9300      	str	r3, [sp, #0]
   32066:	f240 2103 	movw	r1, #515	; 0x203
   3206a:	4633      	mov	r3, r6
   3206c:	f010 fc0b 	bl	42886 <z_impl_zsock_setsockopt>
		if (err != 0) {
   32070:	2800      	cmp	r0, #0
   32072:	d0e0      	beq.n	32036 <dfu_target_modem_init+0x17e>
			LOG_INF("Error while setting offset: %d", offset);
   32074:	2303      	movs	r3, #3
   32076:	f04f 0000 	mov.w	r0, #0
   3207a:	f363 0007 	bfi	r0, r3, #0, #8
   3207e:	f364 108f 	bfi	r0, r4, #6, #10
   32082:	6832      	ldr	r2, [r6, #0]
   32084:	490f      	ldr	r1, [pc, #60]	; (320c4 <dfu_target_modem_init+0x20c>)
   32086:	f00f ffda 	bl	4203e <log_string_sync>
   3208a:	e7d4      	b.n	32036 <dfu_target_modem_init+0x17e>
   3208c:	200254ec 	.word	0x200254ec
   32090:	000468d0 	.word	0x000468d0
   32094:	00046878 	.word	0x00046878
   32098:	200254f0 	.word	0x200254f0
   3209c:	0004df08 	.word	0x0004df08
   320a0:	0004df8c 	.word	0x0004df8c
   320a4:	0004dfb9 	.word	0x0004dfb9
   320a8:	0004df29 	.word	0x0004df29
   320ac:	0004df42 	.word	0x0004df42
   320b0:	0004df6c 	.word	0x0004df6c
   320b4:	0004df71 	.word	0x0004df71
   320b8:	0004df9c 	.word	0x0004df9c
   320bc:	200254f4 	.word	0x200254f4
   320c0:	0004dfe8 	.word	0x0004dfe8
   320c4:	0004dfff 	.word	0x0004dfff

000320c8 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   320c8:	4b02      	ldr	r3, [pc, #8]	; (320d4 <dfu_target_modem_offset_get+0xc>)
   320ca:	681b      	ldr	r3, [r3, #0]
   320cc:	6003      	str	r3, [r0, #0]
	return 0;
}
   320ce:	2000      	movs	r0, #0
   320d0:	4770      	bx	lr
   320d2:	bf00      	nop
   320d4:	200254f4 	.word	0x200254f4

000320d8 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   320d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   320dc:	2400      	movs	r4, #0
{
   320de:	4607      	mov	r7, r0
   320e0:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   320e2:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   320e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 32190 <dfu_target_modem_write+0xb8>
   320e8:	f8d8 0000 	ldr.w	r0, [r8]
   320ec:	2300      	movs	r3, #0
   320ee:	e9cd 6600 	strd	r6, r6, [sp]
   320f2:	1b2a      	subs	r2, r5, r4
   320f4:	1939      	adds	r1, r7, r4
   320f6:	f010 fb45 	bl	42784 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   320fa:	2800      	cmp	r0, #0
   320fc:	dd0a      	ble.n	32114 <dfu_target_modem_write+0x3c>
			sent += send_result;
   320fe:	4404      	add	r4, r0
			if (sent >= len) {
   32100:	42ac      	cmp	r4, r5
   32102:	d3f1      	bcc.n	320e8 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   32104:	2000      	movs	r0, #0
				offset += len;
   32106:	4a1e      	ldr	r2, [pc, #120]	; (32180 <dfu_target_modem_write+0xa8>)
   32108:	6813      	ldr	r3, [r2, #0]
   3210a:	441d      	add	r5, r3
   3210c:	6015      	str	r5, [r2, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   3210e:	b002      	add	sp, #8
   32110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   32114:	d0e8      	beq.n	320e8 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   32116:	f010 fe00 	bl	42d1a <__errno>
   3211a:	6803      	ldr	r3, [r0, #0]
   3211c:	2b08      	cmp	r3, #8
   3211e:	d12c      	bne.n	3217a <dfu_target_modem_write+0xa2>
	modem_error = get_modem_error();
   32120:	f7ff fe0a 	bl	31d38 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   32124:	f04f 0600 	mov.w	r6, #0
   32128:	2301      	movs	r3, #1
   3212a:	4a16      	ldr	r2, [pc, #88]	; (32184 <dfu_target_modem_write+0xac>)
   3212c:	f363 0607 	bfi	r6, r3, #0, #8
   32130:	4b15      	ldr	r3, [pc, #84]	; (32188 <dfu_target_modem_write+0xb0>)
	modem_error = get_modem_error();
   32132:	4604      	mov	r4, r0
   32134:	1a9b      	subs	r3, r3, r2
   32136:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   32138:	f363 168f 	bfi	r6, r3, #6, #10
   3213c:	f010 fded 	bl	42d1a <__errno>
   32140:	4623      	mov	r3, r4
   32142:	6802      	ldr	r2, [r0, #0]
   32144:	4911      	ldr	r1, [pc, #68]	; (3218c <dfu_target_modem_write+0xb4>)
   32146:	4630      	mov	r0, r6
   32148:	f00f ff79 	bl	4203e <log_string_sync>
	switch (modem_error) {
   3214c:	f114 0f0b 	cmn.w	r4, #11
   32150:	d004      	beq.n	3215c <dfu_target_modem_write+0x84>
   32152:	f114 0f09 	cmn.w	r4, #9
   32156:	d00d      	beq.n	32174 <dfu_target_modem_write+0x9c>
   32158:	340e      	adds	r4, #14
   3215a:	d10e      	bne.n	3217a <dfu_target_modem_write+0xa2>
		delete_banked_modem_fw();
   3215c:	f7ff fe1a 	bl	31d94 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   32160:	4629      	mov	r1, r5
   32162:	4638      	mov	r0, r7
   32164:	f7ff ffb8 	bl	320d8 <dfu_target_modem_write>
			return 0;
   32168:	2800      	cmp	r0, #0
   3216a:	bfb4      	ite	lt
   3216c:	f06f 0015 	mvnlt.w	r0, #21
   32170:	2000      	movge	r0, #0
   32172:	e7cc      	b.n	3210e <dfu_target_modem_write+0x36>
		return -EINVAL;
   32174:	f06f 0015 	mvn.w	r0, #21
   32178:	e7c9      	b.n	3210e <dfu_target_modem_write+0x36>
		return -EFAULT;
   3217a:	f06f 000d 	mvn.w	r0, #13
   3217e:	e7c6      	b.n	3210e <dfu_target_modem_write+0x36>
   32180:	200254f4 	.word	0x200254f4
   32184:	00046878 	.word	0x00046878
   32188:	000468d0 	.word	0x000468d0
   3218c:	0004e01e 	.word	0x0004e01e
   32190:	200254f0 	.word	0x200254f0

00032194 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   32194:	b573      	push	{r0, r1, r4, r5, r6, lr}
   32196:	4b2c      	ldr	r3, [pc, #176]	; (32248 <dfu_target_modem_done+0xb4>)
   32198:	4c2c      	ldr	r4, [pc, #176]	; (3224c <dfu_target_modem_done+0xb8>)
   3219a:	4e2d      	ldr	r6, [pc, #180]	; (32250 <dfu_target_modem_done+0xbc>)
   3219c:	1ae4      	subs	r4, r4, r3
   3219e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   321a2:	2800      	cmp	r0, #0
   321a4:	d042      	beq.n	3222c <dfu_target_modem_done+0x98>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   321a6:	2303      	movs	r3, #3
   321a8:	f04f 0000 	mov.w	r0, #0
   321ac:	f363 0007 	bfi	r0, r3, #0, #8
   321b0:	f364 108f 	bfi	r0, r4, #6, #10
   321b4:	4927      	ldr	r1, [pc, #156]	; (32254 <dfu_target_modem_done+0xc0>)
   321b6:	f00f ff42 	bl	4203e <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   321ba:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   321bc:	2300      	movs	r3, #0
   321be:	2204      	movs	r2, #4
   321c0:	9300      	str	r3, [sp, #0]
   321c2:	f240 2103 	movw	r1, #515	; 0x203
   321c6:	f010 fb5e 	bl	42886 <z_impl_zsock_setsockopt>
	if (err < 0) {
   321ca:	1e05      	subs	r5, r0, #0
   321cc:	da12      	bge.n	321f4 <dfu_target_modem_done+0x60>
		if (errno == ENOEXEC) {
   321ce:	f010 fda4 	bl	42d1a <__errno>
   321d2:	6803      	ldr	r3, [r0, #0]
   321d4:	2b08      	cmp	r3, #8
   321d6:	d11f      	bne.n	32218 <dfu_target_modem_done+0x84>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   321d8:	2301      	movs	r3, #1
   321da:	f04f 0500 	mov.w	r5, #0
   321de:	f363 0507 	bfi	r5, r3, #0, #8
   321e2:	f7ff fda9 	bl	31d38 <get_modem_error>
   321e6:	f364 158f 	bfi	r5, r4, #6, #10
   321ea:	4602      	mov	r2, r0
   321ec:	4628      	mov	r0, r5
   321ee:	491a      	ldr	r1, [pc, #104]	; (32258 <dfu_target_modem_done+0xc4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   321f0:	f00f ff25 	bl	4203e <log_string_sync>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   321f4:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   321f6:	f010 fa98 	bl	4272a <z_impl_zsock_close>
	if (err < 0) {
   321fa:	1e05      	subs	r5, r0, #0
   321fc:	da21      	bge.n	32242 <dfu_target_modem_done+0xae>
		LOG_ERR("Failed to close modem DFU socket.");
   321fe:	f04f 0000 	mov.w	r0, #0
   32202:	2301      	movs	r3, #1
   32204:	f363 0007 	bfi	r0, r3, #0, #8
   32208:	f364 108f 	bfi	r0, r4, #6, #10
   3220c:	4913      	ldr	r1, [pc, #76]	; (3225c <dfu_target_modem_done+0xc8>)
   3220e:	f00f ff16 	bl	4203e <log_string_sync>
		return err;
	}

	return 0;
}
   32212:	4628      	mov	r0, r5
   32214:	b002      	add	sp, #8
   32216:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   32218:	f04f 0000 	mov.w	r0, #0
   3221c:	2301      	movs	r3, #1
   3221e:	f363 0007 	bfi	r0, r3, #0, #8
   32222:	f364 108f 	bfi	r0, r4, #6, #10
   32226:	462a      	mov	r2, r5
   32228:	490b      	ldr	r1, [pc, #44]	; (32258 <dfu_target_modem_done+0xc4>)
   3222a:	e7e1      	b.n	321f0 <dfu_target_modem_done+0x5c>
		LOG_INF("Modem upgrade aborted.");
   3222c:	2303      	movs	r3, #3
   3222e:	f04f 0000 	mov.w	r0, #0
   32232:	f363 0007 	bfi	r0, r3, #0, #8
   32236:	f364 108f 	bfi	r0, r4, #6, #10
   3223a:	4909      	ldr	r1, [pc, #36]	; (32260 <dfu_target_modem_done+0xcc>)
   3223c:	f00f feff 	bl	4203e <log_string_sync>
   32240:	e7d8      	b.n	321f4 <dfu_target_modem_done+0x60>
	return 0;
   32242:	2500      	movs	r5, #0
   32244:	e7e5      	b.n	32212 <dfu_target_modem_done+0x7e>
   32246:	bf00      	nop
   32248:	00046878 	.word	0x00046878
   3224c:	000468d0 	.word	0x000468d0
   32250:	200254f0 	.word	0x200254f0
   32254:	0004de7c 	.word	0x0004de7c
   32258:	0004deab 	.word	0x0004deab
   3225c:	0004dee6 	.word	0x0004dee6
   32260:	0004decf 	.word	0x0004decf

00032264 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   32264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   32268:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   3226a:	4c21      	ldr	r4, [pc, #132]	; (322f0 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   3226c:	4e21      	ldr	r6, [pc, #132]	; (322f4 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3226e:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   32272:	f8df 9088 	ldr.w	r9, [pc, #136]	; 322fc <check_ext_api_requests+0x98>
{
   32276:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   32278:	45a8      	cmp	r8, r5
   3227a:	d803      	bhi.n	32284 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   3227c:	2000      	movs	r0, #0
   3227e:	b005      	add	sp, #20
   32280:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   32284:	6a63      	ldr	r3, [r4, #36]	; 0x24
   32286:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3228a:	681f      	ldr	r7, [r3, #0]
   3228c:	ab01      	add	r3, sp, #4
   3228e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   32292:	220c      	movs	r2, #12
   32294:	4619      	mov	r1, r3
   32296:	4638      	mov	r0, r7
   32298:	f012 ffb8 	bl	4520c <memcmp>
   3229c:	b990      	cbnz	r0, 322c4 <check_ext_api_requests+0x60>
   3229e:	b18f      	cbz	r7, 322c4 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   322a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   322a2:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   322a4:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   322a6:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   322a8:	4291      	cmp	r1, r2
   322aa:	d10b      	bne.n	322c4 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   322ac:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   322ae:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   322b0:	4291      	cmp	r1, r2
   322b2:	d807      	bhi.n	322c4 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   322b4:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   322b6:	4291      	cmp	r1, r2
   322b8:	d904      	bls.n	322c4 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   322ba:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   322bc:	695b      	ldr	r3, [r3, #20]
   322be:	ea32 0303 	bics.w	r3, r2, r3
   322c2:	d00a      	beq.n	322da <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   322c4:	6a27      	ldr	r7, [r4, #32]
   322c6:	b167      	cbz	r7, 322e2 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   322c8:	480b      	ldr	r0, [pc, #44]	; (322f8 <check_ext_api_requests+0x94>)
   322ca:	f00f fc8d 	bl	41be8 <printk>
			k_panic();
   322ce:	4040      	eors	r0, r0
   322d0:	f380 8811 	msr	BASEPRI, r0
   322d4:	f04f 0004 	mov.w	r0, #4
   322d8:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   322da:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   322dc:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   322de:	441c      	add	r4, r3
   322e0:	e7ca      	b.n	32278 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   322e2:	4648      	mov	r0, r9
   322e4:	f00f fc80 	bl	41be8 <printk>
			*ext_api_req->ext_api = NULL;
   322e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   322ea:	601f      	str	r7, [r3, #0]
   322ec:	e7f5      	b.n	322da <check_ext_api_requests+0x76>
   322ee:	bf00      	nop
   322f0:	0001c43c 	.word	0x0001c43c
   322f4:	00046a20 	.word	0x00046a20
   322f8:	0004e07d 	.word	0x0004e07d
   322fc:	0004e0a6 	.word	0x0004e0a6

00032300 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(const struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   32300:	b538      	push	{r3, r4, r5, lr}
   32302:	4614      	mov	r4, r2
	switch (chan) {
   32304:	2910      	cmp	r1, #16
   32306:	d82f      	bhi.n	32368 <sensor_sim_channel_get+0x68>
   32308:	e8df f001 	tbb	[pc, r1]
   3230c:	18140d09 	.word	0x18140d09
   32310:	2e2e2e2e 	.word	0x2e2e2e2e
   32314:	2e2e2e2e 	.word	0x2e2e2e2e
   32318:	2e2c282e 	.word	0x2e2c282e
   3231c:	2a          	.byte	0x2a
   3231d:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   3231e:	4b14      	ldr	r3, [pc, #80]	; (32370 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   32320:	e9d3 0100 	ldrd	r0, r1, [r3]
   32324:	e002      	b.n	3232c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   32326:	4b12      	ldr	r3, [pc, #72]	; (32370 <sensor_sim_channel_get+0x70>)
   32328:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   3232c:	f7eb ff2c 	bl	1e188 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   32330:	2000      	movs	r0, #0
}
   32332:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   32334:	4b0e      	ldr	r3, [pc, #56]	; (32370 <sensor_sim_channel_get+0x70>)
   32336:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   3233a:	e7f7      	b.n	3232c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   3233c:	4d0c      	ldr	r5, [pc, #48]	; (32370 <sensor_sim_channel_get+0x70>)
   3233e:	e9d5 0100 	ldrd	r0, r1, [r5]
   32342:	f7eb ff21 	bl	1e188 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   32346:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   3234a:	f104 0208 	add.w	r2, r4, #8
   3234e:	f7eb ff1b 	bl	1e188 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   32352:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   32356:	f104 0210 	add.w	r2, r4, #16
   3235a:	e7e7      	b.n	3232c <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   3235c:	4b05      	ldr	r3, [pc, #20]	; (32374 <sensor_sim_channel_get+0x74>)
   3235e:	e7df      	b.n	32320 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   32360:	4b05      	ldr	r3, [pc, #20]	; (32378 <sensor_sim_channel_get+0x78>)
   32362:	e7dd      	b.n	32320 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   32364:	4b05      	ldr	r3, [pc, #20]	; (3237c <sensor_sim_channel_get+0x7c>)
   32366:	e7db      	b.n	32320 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   32368:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3236c:	e7e1      	b.n	32332 <sensor_sim_channel_get+0x32>
   3236e:	bf00      	nop
   32370:	20023640 	.word	0x20023640
   32374:	20023968 	.word	0x20023968
   32378:	20023658 	.word	0x20023658
   3237c:	20023660 	.word	0x20023660

00032380 <sensor_sim_trigger_set>:
{
   32380:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->data;
   32382:	68c3      	ldr	r3, [r0, #12]
	switch (trig->type) {
   32384:	8808      	ldrh	r0, [r1, #0]
   32386:	2801      	cmp	r0, #1
   32388:	d104      	bne.n	32394 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   3238a:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   3238c:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   3238e:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   32390:	2000      	movs	r0, #0
}
   32392:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   32394:	2301      	movs	r3, #1
   32396:	f04f 0000 	mov.w	r0, #0
   3239a:	4a07      	ldr	r2, [pc, #28]	; (323b8 <sensor_sim_trigger_set+0x38>)
   3239c:	f363 0007 	bfi	r0, r3, #0, #8
   323a0:	4b06      	ldr	r3, [pc, #24]	; (323bc <sensor_sim_trigger_set+0x3c>)
   323a2:	4907      	ldr	r1, [pc, #28]	; (323c0 <sensor_sim_trigger_set+0x40>)
   323a4:	1a9b      	subs	r3, r3, r2
   323a6:	08db      	lsrs	r3, r3, #3
   323a8:	f363 108f 	bfi	r0, r3, #6, #10
   323ac:	f00f fe47 	bl	4203e <log_string_sync>
	return ret;
   323b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   323b4:	e7ed      	b.n	32392 <sensor_sim_trigger_set+0x12>
   323b6:	bf00      	nop
   323b8:	00046878 	.word	0x00046878
   323bc:	00046988 	.word	0x00046988
   323c0:	0004e0d9 	.word	0x0004e0d9

000323c4 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   323c4:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   323c6:	f012 fe5a 	bl	4507e <z_impl_k_uptime_ticks>
   323ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   323ce:	fba0 2304 	umull	r2, r3, r0, r4
   323d2:	fb04 3301 	mla	r3, r4, r1, r3
   323d6:	0bd0      	lsrs	r0, r2, #15
   323d8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return offset + amplitude * sin(time % 65535);
   323dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   323e0:	fbb0 f3f3 	udiv	r3, r0, r3
   323e4:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   323e8:	1ac0      	subs	r0, r0, r3
   323ea:	f7ea f96b 	bl	1c6c4 <__aeabi_ui2d>
   323ee:	ec41 0b10 	vmov	d0, r0, r1
   323f2:	f7eb ffb1 	bl	1e358 <sin>
   323f6:	2200      	movs	r2, #0
   323f8:	4b04      	ldr	r3, [pc, #16]	; (3240c <generate_sine.constprop.2+0x48>)
   323fa:	ec51 0b10 	vmov	r0, r1, d0
   323fe:	f7ea f9db 	bl	1c7b8 <__aeabi_dmul>
   32402:	2200      	movs	r2, #0
   32404:	2300      	movs	r3, #0
   32406:	f7ea f821 	bl	1c44c <__adddf3>
}
   3240a:	bd10      	pop	{r4, pc}
   3240c:	40340000 	.word	0x40340000

00032410 <sensor_sim_init>:
{
   32410:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->data;
   32412:	68c5      	ldr	r5, [r0, #12]
{
   32414:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32416:	2200      	movs	r2, #0
   32418:	2300      	movs	r3, #0
   3241a:	2400      	movs	r4, #0
   3241c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   32420:	f06f 0305 	mvn.w	r3, #5
   32424:	f44f 7200 	mov.w	r2, #512	; 0x200
   32428:	f105 0138 	add.w	r1, r5, #56	; 0x38
   3242c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   32430:	9000      	str	r0, [sp, #0]
   32432:	4b07      	ldr	r3, [pc, #28]	; (32450 <sensor_sim_init+0x40>)
   32434:	e9cd 4401 	strd	r4, r4, [sp, #4]
   32438:	f505 700e 	add.w	r0, r5, #568	; 0x238
   3243c:	f00c f824 	bl	3e488 <z_impl_k_thread_create>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   32440:	f7f4 faae 	bl	269a0 <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   32444:	f00d fe8a 	bl	4015c <srand>
}
   32448:	4620      	mov	r0, r4
   3244a:	b009      	add	sp, #36	; 0x24
   3244c:	bd30      	pop	{r4, r5, pc}
   3244e:	bf00      	nop
   32450:	00044db3 	.word	0x00044db3

00032454 <gps_priority_set.isra.3>:
{
	k_delayed_work_cancel(&drv_data->timeout_work);
	k_delayed_work_cancel(&drv_data->blocked_work);
}

static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   32454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	int retval;
	nrf_gnss_delete_mask_t delete_mask = 0;
   32456:	2300      	movs	r3, #0
static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   32458:	4604      	mov	r4, r0
	nrf_gnss_delete_mask_t delete_mask = 0;
   3245a:	9303      	str	r3, [sp, #12]

	if (enable) {
   3245c:	6800      	ldr	r0, [r0, #0]
   3245e:	2900      	cmp	r1, #0
   32460:	d033      	beq.n	324ca <gps_priority_set.isra.3+0x76>
		retval = nrf_setsockopt(drv_data->socket,
   32462:	9300      	str	r3, [sp, #0]
   32464:	220a      	movs	r2, #10
   32466:	f44f 7101 	mov.w	r1, #516	; 0x204
   3246a:	f007 fd8f 	bl	39f8c <nrf_setsockopt>
					NRF_SOL_GNSS,
					NRF_SO_GNSS_ENABLE_PRIORITY, NULL, 0);
		if (retval != 0) {
   3246e:	b118      	cbz	r0, 32478 <gps_priority_set.isra.3+0x24>
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));
	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
		return -EIO;
   32470:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   32474:	b004      	add	sp, #16
   32476:	bd10      	pop	{r4, pc}
		LOG_DBG("GPS priority enabled");
   32478:	2304      	movs	r3, #4
   3247a:	f04f 0000 	mov.w	r0, #0
   3247e:	4a1d      	ldr	r2, [pc, #116]	; (324f4 <gps_priority_set.isra.3+0xa0>)
   32480:	f363 0007 	bfi	r0, r3, #0, #8
   32484:	4b1c      	ldr	r3, [pc, #112]	; (324f8 <gps_priority_set.isra.3+0xa4>)
   32486:	491d      	ldr	r1, [pc, #116]	; (324fc <gps_priority_set.isra.3+0xa8>)
   32488:	1a9b      	subs	r3, r3, r2
   3248a:	08db      	lsrs	r3, r3, #3
   3248c:	4a1c      	ldr	r2, [pc, #112]	; (32500 <gps_priority_set.isra.3+0xac>)
   3248e:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_DBG("GPS priority disabled");
   32492:	f00f fdd4 	bl	4203e <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   32496:	2304      	movs	r3, #4
   32498:	2207      	movs	r2, #7
   3249a:	9300      	str	r3, [sp, #0]
   3249c:	f44f 7101 	mov.w	r1, #516	; 0x204
   324a0:	ab03      	add	r3, sp, #12
   324a2:	6820      	ldr	r0, [r4, #0]
   324a4:	f007 fd72 	bl	39f8c <nrf_setsockopt>
	if (retval != 0) {
   324a8:	2800      	cmp	r0, #0
   324aa:	d0e3      	beq.n	32474 <gps_priority_set.isra.3+0x20>
		LOG_ERR("Failed to start GPS");
   324ac:	2301      	movs	r3, #1
   324ae:	f04f 0000 	mov.w	r0, #0
   324b2:	4a10      	ldr	r2, [pc, #64]	; (324f4 <gps_priority_set.isra.3+0xa0>)
   324b4:	f363 0007 	bfi	r0, r3, #0, #8
   324b8:	4b0f      	ldr	r3, [pc, #60]	; (324f8 <gps_priority_set.isra.3+0xa4>)
   324ba:	4912      	ldr	r1, [pc, #72]	; (32504 <gps_priority_set.isra.3+0xb0>)
   324bc:	1a9b      	subs	r3, r3, r2
   324be:	08db      	lsrs	r3, r3, #3
   324c0:	f363 108f 	bfi	r0, r3, #6, #10
   324c4:	f00f fdbb 	bl	4203e <log_string_sync>
   324c8:	e7d2      	b.n	32470 <gps_priority_set.isra.3+0x1c>
		retval = nrf_setsockopt(drv_data->socket,
   324ca:	9100      	str	r1, [sp, #0]
   324cc:	460b      	mov	r3, r1
   324ce:	220b      	movs	r2, #11
   324d0:	f44f 7101 	mov.w	r1, #516	; 0x204
   324d4:	f007 fd5a 	bl	39f8c <nrf_setsockopt>
		if (retval != 0) {
   324d8:	2800      	cmp	r0, #0
   324da:	d1c9      	bne.n	32470 <gps_priority_set.isra.3+0x1c>
		LOG_DBG("GPS priority disabled");
   324dc:	2304      	movs	r3, #4
   324de:	4a05      	ldr	r2, [pc, #20]	; (324f4 <gps_priority_set.isra.3+0xa0>)
   324e0:	f363 0007 	bfi	r0, r3, #0, #8
   324e4:	4b04      	ldr	r3, [pc, #16]	; (324f8 <gps_priority_set.isra.3+0xa4>)
   324e6:	4908      	ldr	r1, [pc, #32]	; (32508 <gps_priority_set.isra.3+0xb4>)
   324e8:	1a9b      	subs	r3, r3, r2
   324ea:	08db      	lsrs	r3, r3, #3
   324ec:	f363 108f 	bfi	r0, r3, #6, #10
   324f0:	4a03      	ldr	r2, [pc, #12]	; (32500 <gps_priority_set.isra.3+0xac>)
   324f2:	e7ce      	b.n	32492 <gps_priority_set.isra.3+0x3e>
   324f4:	00046878 	.word	0x00046878
   324f8:	00046940 	.word	0x00046940
   324fc:	0004e1e3 	.word	0x0004e1e3
   32500:	0004e121 	.word	0x0004e121
   32504:	0004e216 	.word	0x0004e216
   32508:	0004e1fc 	.word	0x0004e1fc

0003250c <blocked_work_fn>:

	notify_event(dev, &evt);
}

static void blocked_work_fn(struct k_work *work)
{
   3250c:	b508      	push	{r3, lr}
	int retval;
	struct gps_drv_data *drv_data =
		CONTAINER_OF(work, struct gps_drv_data, blocked_work);

	retval = gps_priority_set(drv_data, true);
   3250e:	2101      	movs	r1, #1
   32510:	f6a0 104c 	subw	r0, r0, #2380	; 0x94c
   32514:	f7ff ff9e 	bl	32454 <gps_priority_set.isra.3>
	if (retval != 0) {
   32518:	4602      	mov	r2, r0
   3251a:	b178      	cbz	r0, 3253c <blocked_work_fn+0x30>
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   3251c:	2301      	movs	r3, #1
   3251e:	f04f 0000 	mov.w	r0, #0
   32522:	4907      	ldr	r1, [pc, #28]	; (32540 <blocked_work_fn+0x34>)
   32524:	f363 0007 	bfi	r0, r3, #0, #8
   32528:	4b06      	ldr	r3, [pc, #24]	; (32544 <blocked_work_fn+0x38>)
   3252a:	1a5b      	subs	r3, r3, r1
   3252c:	08db      	lsrs	r3, r3, #3
   3252e:	f363 108f 	bfi	r0, r3, #6, #10
   32532:	4905      	ldr	r1, [pc, #20]	; (32548 <blocked_work_fn+0x3c>)
	}
}
   32534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   32538:	f00f bd81 	b.w	4203e <log_string_sync>
}
   3253c:	bd08      	pop	{r3, pc}
   3253e:	bf00      	nop
   32540:	00046878 	.word	0x00046878
   32544:	00046940 	.word	0x00046940
   32548:	0004e1bd 	.word	0x0004e1bd

0003254c <open_socket.isra.4>:
static int open_socket(struct gps_drv_data *drv_data)
   3254c:	b510      	push	{r4, lr}
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   3254e:	f44f 7201 	mov.w	r2, #516	; 0x204
static int open_socket(struct gps_drv_data *drv_data)
   32552:	4604      	mov	r4, r0
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   32554:	2102      	movs	r1, #2
   32556:	2001      	movs	r0, #1
   32558:	f007 fc30 	bl	39dbc <nrf_socket>
   3255c:	4a13      	ldr	r2, [pc, #76]	; (325ac <open_socket.isra.4+0x60>)
   3255e:	4914      	ldr	r1, [pc, #80]	; (325b0 <open_socket.isra.4+0x64>)
	if (drv_data->socket >= 0) {
   32560:	2800      	cmp	r0, #0
   32562:	eba2 0201 	sub.w	r2, r2, r1
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   32566:	4603      	mov	r3, r0
   32568:	6020      	str	r0, [r4, #0]
	if (drv_data->socket >= 0) {
   3256a:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   3256e:	db0c      	blt.n	3258a <open_socket.isra.4+0x3e>
		LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   32570:	2104      	movs	r1, #4
   32572:	f04f 0000 	mov.w	r0, #0
   32576:	f361 0007 	bfi	r0, r1, #0, #8
   3257a:	f362 108f 	bfi	r0, r2, #6, #10
   3257e:	490d      	ldr	r1, [pc, #52]	; (325b4 <open_socket.isra.4+0x68>)
   32580:	4a0d      	ldr	r2, [pc, #52]	; (325b8 <open_socket.isra.4+0x6c>)
   32582:	f00f fd5c 	bl	4203e <log_string_sync>
	return 0;
   32586:	2000      	movs	r0, #0
}
   32588:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not initialize socket, error: %d)",
   3258a:	2301      	movs	r3, #1
   3258c:	f04f 0400 	mov.w	r4, #0
   32590:	f363 0407 	bfi	r4, r3, #0, #8
   32594:	f362 148f 	bfi	r4, r2, #6, #10
   32598:	f010 fbbf 	bl	42d1a <__errno>
   3259c:	4907      	ldr	r1, [pc, #28]	; (325bc <open_socket.isra.4+0x70>)
   3259e:	6802      	ldr	r2, [r0, #0]
   325a0:	4620      	mov	r0, r4
   325a2:	f00f fd4c 	bl	4203e <log_string_sync>
		return -EIO;
   325a6:	f06f 0004 	mvn.w	r0, #4
   325aa:	e7ed      	b.n	32588 <open_socket.isra.4+0x3c>
   325ac:	00046940 	.word	0x00046940
   325b0:	00046878 	.word	0x00046878
   325b4:	0004e434 	.word	0x0004e434
   325b8:	0004e115 	.word	0x0004e115
   325bc:	0004e453 	.word	0x0004e453

000325c0 <agps_write>:

static int agps_write(const struct device *dev, enum gps_agps_type type,
		      void *data, size_t data_len)
{
   325c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   325c2:	460c      	mov	r4, r1
   325c4:	4611      	mov	r1, r2
   325c6:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   325c8:	4b1c      	ldr	r3, [pc, #112]	; (3263c <agps_write+0x7c>)
	struct gps_drv_data *drv_data = dev->data;
   325ca:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   325cc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   325d0:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   325d4:	2302      	movs	r3, #2
   325d6:	9301      	str	r3, [sp, #4]
   325d8:	f10d 030e 	add.w	r3, sp, #14
   325dc:	9300      	str	r3, [sp, #0]
   325de:	6a40      	ldr	r0, [r0, #36]	; 0x24
   325e0:	2300      	movs	r3, #0
   325e2:	f007 fc0b 	bl	39dfc <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   325e6:	4b16      	ldr	r3, [pc, #88]	; (32640 <agps_write+0x80>)
   325e8:	4a16      	ldr	r2, [pc, #88]	; (32644 <agps_write+0x84>)
   325ea:	2800      	cmp	r0, #0
   325ec:	eba3 0302 	sub.w	r3, r3, r2
   325f0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   325f4:	da13      	bge.n	3261e <agps_write+0x5e>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   325f6:	2201      	movs	r2, #1
   325f8:	f04f 0400 	mov.w	r4, #0
   325fc:	f362 0407 	bfi	r4, r2, #0, #8
   32600:	f363 148f 	bfi	r4, r3, #6, #10
   32604:	f010 fb89 	bl	42d1a <__errno>
   32608:	490f      	ldr	r1, [pc, #60]	; (32648 <agps_write+0x88>)
   3260a:	6802      	ldr	r2, [r0, #0]
   3260c:	4620      	mov	r0, r4
   3260e:	f00f fd16 	bl	4203e <log_string_sync>
		return -errno;
   32612:	f010 fb82 	bl	42d1a <__errno>
   32616:	6800      	ldr	r0, [r0, #0]
   32618:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   3261a:	b004      	add	sp, #16
   3261c:	bd10      	pop	{r4, pc}
	LOG_DBG("Sent A-GPS data to modem, type: %d", type);
   3261e:	2204      	movs	r2, #4
   32620:	f04f 0000 	mov.w	r0, #0
   32624:	f362 0007 	bfi	r0, r2, #0, #8
   32628:	f363 108f 	bfi	r0, r3, #6, #10
   3262c:	4a07      	ldr	r2, [pc, #28]	; (3264c <agps_write+0x8c>)
   3262e:	4623      	mov	r3, r4
   32630:	4907      	ldr	r1, [pc, #28]	; (32650 <agps_write+0x90>)
   32632:	f00f fd04 	bl	4203e <log_string_sync>
	return 0;
   32636:	2000      	movs	r0, #0
   32638:	e7ef      	b.n	3261a <agps_write+0x5a>
   3263a:	bf00      	nop
   3263c:	00047954 	.word	0x00047954
   32640:	00046940 	.word	0x00046940
   32644:	00046878 	.word	0x00046878
   32648:	0004e168 	.word	0x0004e168
   3264c:	0004e15d 	.word	0x0004e15d
   32650:	0004e196 	.word	0x0004e196

00032654 <setup>:
{
   32654:	4602      	mov	r2, r0
	drv_data->socket = -1;
   32656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	struct gps_drv_data *drv_data = dev->data;
   3265a:	68c0      	ldr	r0, [r0, #12]
{
   3265c:	b570      	push	{r4, r5, r6, lr}
	drv_data->socket = -1;
   3265e:	6241      	str	r1, [r0, #36]	; 0x24
	drv_data->dev = dev;
   32660:	f840 2b1c 	str.w	r2, [r0], #28
	atomic_set(&drv_data->is_active, 0);
   32664:	2100      	movs	r1, #0
   32666:	f012 fbe0 	bl	44e2a <atomic_set>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   3266a:	2300      	movs	r3, #0
   3266c:	4825      	ldr	r0, [pc, #148]	; (32704 <setup+0xb0>)
   3266e:	461a      	mov	r2, r3
   32670:	4619      	mov	r1, r3
   32672:	f7f8 fa25 	bl	2aac0 <at_cmd_write>
	if (err) {
   32676:	4c24      	ldr	r4, [pc, #144]	; (32708 <setup+0xb4>)
   32678:	4b24      	ldr	r3, [pc, #144]	; (3270c <setup+0xb8>)
   3267a:	4605      	mov	r5, r0
   3267c:	1ae4      	subs	r4, r4, r3
   3267e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   32682:	b160      	cbz	r0, 3269e <setup+0x4a>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   32684:	f04f 0000 	mov.w	r0, #0
   32688:	2301      	movs	r3, #1
   3268a:	462a      	mov	r2, r5
   3268c:	f363 0007 	bfi	r0, r3, #0, #8
   32690:	491f      	ldr	r1, [pc, #124]	; (32710 <setup+0xbc>)
   32692:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not configure COEX0, error: %d", err);
   32696:	f00f fcd2 	bl	4203e <log_string_sync>
}
   3269a:	4628      	mov	r0, r5
   3269c:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("MAGPIO set: %s",
   3269e:	2304      	movs	r3, #4
   326a0:	f04f 0600 	mov.w	r6, #0
   326a4:	4817      	ldr	r0, [pc, #92]	; (32704 <setup+0xb0>)
   326a6:	f363 0607 	bfi	r6, r3, #0, #8
   326aa:	f00f fcdb 	bl	42064 <log_strdup>
   326ae:	f364 168f 	bfi	r6, r4, #6, #10
   326b2:	4603      	mov	r3, r0
   326b4:	4a17      	ldr	r2, [pc, #92]	; (32714 <setup+0xc0>)
   326b6:	4918      	ldr	r1, [pc, #96]	; (32718 <setup+0xc4>)
   326b8:	4630      	mov	r0, r6
   326ba:	f00f fcc0 	bl	4203e <log_string_sync>
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   326be:	462b      	mov	r3, r5
   326c0:	462a      	mov	r2, r5
   326c2:	4629      	mov	r1, r5
   326c4:	4815      	ldr	r0, [pc, #84]	; (3271c <setup+0xc8>)
   326c6:	f7f8 f9fb 	bl	2aac0 <at_cmd_write>
	if (err) {
   326ca:	4605      	mov	r5, r0
   326cc:	b148      	cbz	r0, 326e2 <setup+0x8e>
		LOG_ERR("Could not configure COEX0, error: %d", err);
   326ce:	f04f 0000 	mov.w	r0, #0
   326d2:	2301      	movs	r3, #1
   326d4:	f363 0007 	bfi	r0, r3, #0, #8
   326d8:	f364 108f 	bfi	r0, r4, #6, #10
   326dc:	462a      	mov	r2, r5
   326de:	4910      	ldr	r1, [pc, #64]	; (32720 <setup+0xcc>)
   326e0:	e7d9      	b.n	32696 <setup+0x42>
	LOG_DBG("COEX0 set: %s",
   326e2:	2304      	movs	r3, #4
   326e4:	f04f 0600 	mov.w	r6, #0
   326e8:	480c      	ldr	r0, [pc, #48]	; (3271c <setup+0xc8>)
   326ea:	f363 0607 	bfi	r6, r3, #0, #8
   326ee:	f00f fcb9 	bl	42064 <log_strdup>
   326f2:	f364 168f 	bfi	r6, r4, #6, #10
   326f6:	4603      	mov	r3, r0
   326f8:	4a06      	ldr	r2, [pc, #24]	; (32714 <setup+0xc0>)
   326fa:	490a      	ldr	r1, [pc, #40]	; (32724 <setup+0xd0>)
   326fc:	4630      	mov	r0, r6
   326fe:	f00f fc9e 	bl	4203e <log_string_sync>
	return err;
   32702:	e7ca      	b.n	3269a <setup+0x46>
   32704:	0004e47b 	.word	0x0004e47b
   32708:	00046940 	.word	0x00046940
   3270c:	00046878 	.word	0x00046878
   32710:	0004e49a 	.word	0x0004e49a
   32714:	0004e14e 	.word	0x0004e14e
   32718:	0004e4c0 	.word	0x0004e4c0
   3271c:	0004e4d3 	.word	0x0004e4d3
   32720:	0004e4eb 	.word	0x0004e4eb
   32724:	0004e510 	.word	0x0004e510

00032728 <init>:

static int init(const struct device *dev, gps_event_handler_t handler)
{
   32728:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->data;
   3272a:	68c4      	ldr	r4, [r0, #12]
{
   3272c:	b089      	sub	sp, #36	; 0x24
   3272e:	4605      	mov	r5, r0
	int err;

	if (atomic_get(&drv_data->is_init)) {
   32730:	f104 0718 	add.w	r7, r4, #24
   32734:	e8d7 3faf 	lda	r3, [r7]
   32738:	b18b      	cbz	r3, 3275e <init+0x36>
		LOG_WRN("GPS is already initialized");
   3273a:	2302      	movs	r3, #2
   3273c:	f04f 0000 	mov.w	r0, #0
   32740:	4a2e      	ldr	r2, [pc, #184]	; (327fc <init+0xd4>)
   32742:	f363 0007 	bfi	r0, r3, #0, #8
   32746:	4b2e      	ldr	r3, [pc, #184]	; (32800 <init+0xd8>)
   32748:	492e      	ldr	r1, [pc, #184]	; (32804 <init+0xdc>)
   3274a:	1a9b      	subs	r3, r3, r2
   3274c:	08db      	lsrs	r3, r3, #3
   3274e:	f363 108f 	bfi	r0, r3, #6, #10
   32752:	f00f fc74 	bl	4203e <log_string_sync>

		return -EALREADY;
   32756:	f06f 0077 	mvn.w	r0, #119	; 0x77
	}

	atomic_set(&drv_data->is_init, 1);

	return 0;
}
   3275a:	b009      	add	sp, #36	; 0x24
   3275c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (handler == NULL) {
   3275e:	b981      	cbnz	r1, 32782 <init+0x5a>
		LOG_ERR("No event handler provided");
   32760:	2301      	movs	r3, #1
   32762:	f04f 0000 	mov.w	r0, #0
   32766:	4a25      	ldr	r2, [pc, #148]	; (327fc <init+0xd4>)
   32768:	f363 0007 	bfi	r0, r3, #0, #8
   3276c:	4b24      	ldr	r3, [pc, #144]	; (32800 <init+0xd8>)
   3276e:	4926      	ldr	r1, [pc, #152]	; (32808 <init+0xe0>)
   32770:	1a9b      	subs	r3, r3, r2
   32772:	08db      	lsrs	r3, r3, #3
   32774:	f363 108f 	bfi	r0, r3, #6, #10
   32778:	f00f fc61 	bl	4203e <log_string_sync>
		return -EINVAL;
   3277c:	f06f 0015 	mvn.w	r0, #21
   32780:	e7eb      	b.n	3275a <init+0x32>
	if (drv_data->socket < 0) {
   32782:	6a63      	ldr	r3, [r4, #36]	; 0x24
	drv_data->handler = handler;
   32784:	6061      	str	r1, [r4, #4]
	if (drv_data->socket < 0) {
   32786:	2b00      	cmp	r3, #0
   32788:	db31      	blt.n	327ee <init+0xc6>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   3278a:	f504 6011 	add.w	r0, r4, #2320	; 0x910
   3278e:	491f      	ldr	r1, [pc, #124]	; (3280c <init+0xe4>)
   32790:	f012 fc69 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   32794:	f504 6014 	add.w	r0, r4, #2368	; 0x940
   32798:	491d      	ldr	r1, [pc, #116]	; (32810 <init+0xe8>)
   3279a:	f012 fc64 	bl	45066 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->blocked_work, blocked_work_fn);
   3279e:	491d      	ldr	r1, [pc, #116]	; (32814 <init+0xec>)
   327a0:	f504 6017 	add.w	r0, r4, #2416	; 0x970
   327a4:	f012 fc5f 	bl	45066 <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   327a8:	2201      	movs	r2, #1
   327aa:	2100      	movs	r1, #0
   327ac:	f604 00f4 	addw	r0, r4, #2292	; 0x8f4
   327b0:	f012 fbe0 	bl	44f74 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->data;
   327b4:	68ee      	ldr	r6, [r5, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   327b6:	2200      	movs	r2, #0
   327b8:	2300      	movs	r3, #0
   327ba:	2400      	movs	r4, #0
   327bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   327c0:	230a      	movs	r3, #10
   327c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   327c6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   327ca:	f106 0128 	add.w	r1, r6, #40	; 0x28
   327ce:	4b12      	ldr	r3, [pc, #72]	; (32818 <init+0xf0>)
   327d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   327d4:	9500      	str	r5, [sp, #0]
   327d6:	f606 0028 	addw	r0, r6, #2088	; 0x828
   327da:	f00b fe55 	bl	3e488 <z_impl_k_thread_create>
	atomic_set(&drv_data->is_init, 1);
   327de:	2101      	movs	r1, #1
	drv_data->thread_id = k_thread_create(
   327e0:	f8c6 08f0 	str.w	r0, [r6, #2288]	; 0x8f0
	atomic_set(&drv_data->is_init, 1);
   327e4:	4638      	mov	r0, r7
   327e6:	f012 fb20 	bl	44e2a <atomic_set>
	return 0;
   327ea:	4620      	mov	r0, r4
   327ec:	e7b5      	b.n	3275a <init+0x32>
		int ret = open_socket(drv_data);
   327ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   327f2:	f7ff feab 	bl	3254c <open_socket.isra.4>
		if (ret != 0) {
   327f6:	2800      	cmp	r0, #0
   327f8:	d0c7      	beq.n	3278a <init+0x62>
   327fa:	e7ae      	b.n	3275a <init+0x32>
   327fc:	00046878 	.word	0x00046878
   32800:	00046940 	.word	0x00046940
   32804:	0004e3ff 	.word	0x0004e3ff
   32808:	0004e41a 	.word	0x0004e41a
   3280c:	00044ddf 	.word	0x00044ddf
   32810:	00044e05 	.word	0x00044e05
   32814:	0003250d 	.word	0x0003250d
   32818:	00032c2d 	.word	0x00032c2d

0003281c <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   3281c:	2210      	movs	r2, #16
{
   3281e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32822:	b089      	sub	sp, #36	; 0x24
	struct gps_drv_data *drv_data = dev->data;
   32824:	68c6      	ldr	r6, [r0, #12]
{
   32826:	460d      	mov	r5, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   32828:	eb0d 0002 	add.w	r0, sp, r2
   3282c:	2100      	movs	r1, #0
   3282e:	f012 fd1b 	bl	45268 <memset>
   32832:	f106 0320 	add.w	r3, r6, #32
   32836:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   3283a:	2b01      	cmp	r3, #1
   3283c:	f000 81eb 	beq.w	32c16 <start+0x3fa>
	if (atomic_get(&drv_data->is_active)) {
   32840:	f106 071c 	add.w	r7, r6, #28
   32844:	e8d7 3faf 	lda	r3, [r7]
   32848:	4cbd      	ldr	r4, [pc, #756]	; (32b40 <start+0x324>)
   3284a:	4abe      	ldr	r2, [pc, #760]	; (32b44 <start+0x328>)
   3284c:	1aa4      	subs	r4, r4, r2
   3284e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   32852:	b193      	cbz	r3, 3287a <start+0x5e>
		LOG_DBG("GPS is already active. Clean up before restart");
   32854:	2304      	movs	r3, #4
   32856:	f04f 0000 	mov.w	r0, #0
   3285a:	f363 0007 	bfi	r0, r3, #0, #8
   3285e:	f364 108f 	bfi	r0, r4, #6, #10
   32862:	4ab9      	ldr	r2, [pc, #740]	; (32b48 <start+0x32c>)
   32864:	49b9      	ldr	r1, [pc, #740]	; (32b4c <start+0x330>)
   32866:	f00f fbea 	bl	4203e <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   3286a:	f506 6014 	add.w	r0, r6, #2368	; 0x940
   3286e:	f00b ffbd 	bl	3e7ec <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   32872:	f506 6017 	add.w	r0, r6, #2416	; 0x970
   32876:	f00b ffb9 	bl	3e7ec <k_delayed_work_cancel>
   3287a:	f106 0318 	add.w	r3, r6, #24
   3287e:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_init) != 1) {
   32882:	2b01      	cmp	r3, #1
   32884:	d00f      	beq.n	328a6 <start+0x8a>
		LOG_WRN("GPS must be initialized first");
   32886:	2302      	movs	r3, #2
   32888:	f04f 0000 	mov.w	r0, #0
   3288c:	f363 0007 	bfi	r0, r3, #0, #8
   32890:	f364 108f 	bfi	r0, r4, #6, #10
   32894:	49ae      	ldr	r1, [pc, #696]	; (32b50 <start+0x334>)
   32896:	f00f fbd2 	bl	4203e <log_string_sync>
		return -ENODEV;
   3289a:	f06f 0512 	mvn.w	r5, #18
}
   3289e:	4628      	mov	r0, r5
   328a0:	b009      	add	sp, #36	; 0x24
   328a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (cfg_src->nav_mode) {
   328a6:	782a      	ldrb	r2, [r5, #0]
   328a8:	2a01      	cmp	r2, #1
   328aa:	d022      	beq.n	328f2 <start+0xd6>
   328ac:	b253      	sxtb	r3, r2
   328ae:	b163      	cbz	r3, 328ca <start+0xae>
   328b0:	2a02      	cmp	r2, #2
   328b2:	d022      	beq.n	328fa <start+0xde>
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   328b4:	2301      	movs	r3, #1
   328b6:	f04f 0000 	mov.w	r0, #0
   328ba:	f363 0007 	bfi	r0, r3, #0, #8
   328be:	f364 108f 	bfi	r0, r4, #6, #10
   328c2:	49a4      	ldr	r1, [pc, #656]	; (32b54 <start+0x338>)
   328c4:	f00f fbbb 	bl	4203e <log_string_sync>
	if (err) {
   328c8:	e024      	b.n	32914 <start+0xf8>
		cfg_dst->interval = 0;
   328ca:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   328ce:	68ab      	ldr	r3, [r5, #8]
   328d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   328d4:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   328d8:	7b2b      	ldrb	r3, [r5, #12]
   328da:	b10b      	cbz	r3, 328e0 <start+0xc4>
		cfg_dst->delete_mask = 0xFF;
   328dc:	23ff      	movs	r3, #255	; 0xff
   328de:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   328e0:	2301      	movs	r3, #1
   328e2:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   328e6:	786b      	ldrb	r3, [r5, #1]
   328e8:	2b01      	cmp	r3, #1
   328ea:	d126      	bne.n	3293a <start+0x11e>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   328ec:	f88d 301c 	strb.w	r3, [sp, #28]
   328f0:	e025      	b.n	3293e <start+0x122>
		cfg_dst->retry = 0;
   328f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   328f6:	9304      	str	r3, [sp, #16]
		break;
   328f8:	e7ee      	b.n	328d8 <start+0xbc>
		if (cfg_src->interval < 10) {
   328fa:	686b      	ldr	r3, [r5, #4]
   328fc:	2b09      	cmp	r3, #9
   328fe:	d816      	bhi.n	3292e <start+0x112>
			LOG_ERR("Minimum periodic interval is 10 sec");
   32900:	f04f 0000 	mov.w	r0, #0
   32904:	2301      	movs	r3, #1
   32906:	f363 0007 	bfi	r0, r3, #0, #8
   3290a:	f364 108f 	bfi	r0, r4, #6, #10
   3290e:	4992      	ldr	r1, [pc, #584]	; (32b58 <start+0x33c>)
   32910:	f00f fb95 	bl	4203e <log_string_sync>
		LOG_ERR("Invalid GPS configuration");
   32914:	2301      	movs	r3, #1
   32916:	f04f 0000 	mov.w	r0, #0
   3291a:	f363 0007 	bfi	r0, r3, #0, #8
   3291e:	f364 108f 	bfi	r0, r4, #6, #10
   32922:	498e      	ldr	r1, [pc, #568]	; (32b5c <start+0x340>)
   32924:	f00f fb8b 	bl	4203e <log_string_sync>
		return err;
   32928:	f06f 0515 	mvn.w	r5, #21
   3292c:	e7b7      	b.n	3289e <start+0x82>
		cfg_dst->retry = cfg_src->timeout;
   3292e:	68aa      	ldr	r2, [r5, #8]
		cfg_dst->interval = cfg_src->interval;
   32930:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout;
   32934:	f8ad 2010 	strh.w	r2, [sp, #16]
		break;
   32938:	e7ce      	b.n	328d8 <start+0xbc>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   3293a:	2b02      	cmp	r3, #2
   3293c:	d0d6      	beq.n	328ec <start+0xd0>
	cfg_dst->priority = cfg_src->priority;
   3293e:	7b6b      	ldrb	r3, [r5, #13]
   32940:	f88d 301d 	strb.w	r3, [sp, #29]
	if (cfg != &drv_data->current_cfg) {
   32944:	f106 0308 	add.w	r3, r6, #8
   32948:	429d      	cmp	r5, r3
   3294a:	d11a      	bne.n	32982 <start+0x166>
	err = lte_lc_system_mode_get(&system_mode);
   3294c:	f10d 000e 	add.w	r0, sp, #14
   32950:	f7f9 f934 	bl	2bbbc <lte_lc_system_mode_get>
	if (err) {
   32954:	4602      	mov	r2, r0
   32956:	b1e8      	cbz	r0, 32994 <start+0x178>
		LOG_ERR("Could not get modem system mode, error: %d", err);
   32958:	2101      	movs	r1, #1
   3295a:	f04f 0000 	mov.w	r0, #0
   3295e:	f361 0007 	bfi	r0, r1, #0, #8
   32962:	497f      	ldr	r1, [pc, #508]	; (32b60 <start+0x344>)
   32964:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not get modem's functional mode, error: %d",
   32968:	f00f fb69 	bl	4203e <log_string_sync>
		LOG_ERR("Failed to enable GPS");
   3296c:	f04f 0000 	mov.w	r0, #0
   32970:	2301      	movs	r3, #1
   32972:	497c      	ldr	r1, [pc, #496]	; (32b64 <start+0x348>)
   32974:	f363 0007 	bfi	r0, r3, #0, #8
   32978:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Failed to re-init GPS service");
   3297c:	f00f fb5f 	bl	4203e <log_string_sync>
			return -EIO;
   32980:	e09c      	b.n	32abc <start+0x2a0>
   32982:	f105 0210 	add.w	r2, r5, #16
   32986:	f855 1b04 	ldr.w	r1, [r5], #4
   3298a:	4295      	cmp	r5, r2
   3298c:	f843 1b04 	str.w	r1, [r3], #4
   32990:	d1f9      	bne.n	32986 <start+0x16a>
   32992:	e7db      	b.n	3294c <start+0x130>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   32994:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   32998:	1eda      	subs	r2, r3, #3
   3299a:	2a02      	cmp	r2, #2
   3299c:	d920      	bls.n	329e0 <start+0x1c4>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   3299e:	2b01      	cmp	r3, #1
   329a0:	d01c      	beq.n	329dc <start+0x1c0>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   329a2:	2b02      	cmp	r3, #2
   329a4:	bf14      	ite	ne
   329a6:	2503      	movne	r5, #3
   329a8:	2505      	moveq	r5, #5
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   329aa:	2304      	movs	r3, #4
   329ac:	f04f 0000 	mov.w	r0, #0
   329b0:	f363 0007 	bfi	r0, r3, #0, #8
   329b4:	4a6c      	ldr	r2, [pc, #432]	; (32b68 <start+0x34c>)
   329b6:	f364 108f 	bfi	r0, r4, #6, #10
   329ba:	496c      	ldr	r1, [pc, #432]	; (32b6c <start+0x350>)
   329bc:	f00f fb3f 	bl	4203e <log_string_sync>
		err = lte_lc_system_mode_set(new_mode);
   329c0:	4628      	mov	r0, r5
   329c2:	f7f9 f827 	bl	2ba14 <lte_lc_system_mode_set>
		if (err) {
   329c6:	4602      	mov	r2, r0
   329c8:	b150      	cbz	r0, 329e0 <start+0x1c4>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   329ca:	2101      	movs	r1, #1
   329cc:	f04f 0000 	mov.w	r0, #0
   329d0:	f361 0007 	bfi	r0, r1, #0, #8
   329d4:	f364 108f 	bfi	r0, r4, #6, #10
   329d8:	4965      	ldr	r1, [pc, #404]	; (32b70 <start+0x354>)
   329da:	e7c5      	b.n	32968 <start+0x14c>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   329dc:	2504      	movs	r5, #4
   329de:	e7e4      	b.n	329aa <start+0x18e>
	LOG_DBG("GPS mode is enabled");
   329e0:	2304      	movs	r3, #4
   329e2:	f04f 0000 	mov.w	r0, #0
   329e6:	f363 0007 	bfi	r0, r3, #0, #8
   329ea:	4a5f      	ldr	r2, [pc, #380]	; (32b68 <start+0x34c>)
   329ec:	f364 108f 	bfi	r0, r4, #6, #10
   329f0:	4960      	ldr	r1, [pc, #384]	; (32b74 <start+0x358>)
   329f2:	f00f fb24 	bl	4203e <log_string_sync>
	err = lte_lc_func_mode_get(&functional_mode);
   329f6:	f10d 000f 	add.w	r0, sp, #15
   329fa:	f7f9 fa89 	bl	2bf10 <lte_lc_func_mode_get>
	if (err) {
   329fe:	4602      	mov	r2, r0
   32a00:	b140      	cbz	r0, 32a14 <start+0x1f8>
		LOG_ERR("Could not get modem's functional mode, error: %d",
   32a02:	2101      	movs	r1, #1
   32a04:	f04f 0000 	mov.w	r0, #0
   32a08:	f361 0007 	bfi	r0, r1, #0, #8
   32a0c:	f364 108f 	bfi	r0, r4, #6, #10
   32a10:	4959      	ldr	r1, [pc, #356]	; (32b78 <start+0x35c>)
   32a12:	e7a9      	b.n	32968 <start+0x14c>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   32a14:	f89d 300f 	ldrb.w	r3, [sp, #15]
   32a18:	2b01      	cmp	r3, #1
   32a1a:	d00a      	beq.n	32a32 <start+0x216>
		LOG_ERR("GPS is not supported in current functional mode");
   32a1c:	2301      	movs	r3, #1
   32a1e:	f04f 0000 	mov.w	r0, #0
   32a22:	f363 0007 	bfi	r0, r3, #0, #8
   32a26:	f364 108f 	bfi	r0, r4, #6, #10
   32a2a:	4954      	ldr	r1, [pc, #336]	; (32b7c <start+0x360>)
   32a2c:	f00f fb07 	bl	4203e <log_string_sync>
		return -EIO;
   32a30:	e79c      	b.n	3296c <start+0x150>
	retval = nrf_setsockopt(drv_data->socket,
   32a32:	2502      	movs	r5, #2
		LOG_DBG("Failed to set fix retry value, "
   32a34:	f8df a110 	ldr.w	sl, [pc, #272]	; 32b48 <start+0x32c>
   32a38:	f8df b158 	ldr.w	fp, [pc, #344]	; 32b94 <start+0x378>
	retval = nrf_setsockopt(drv_data->socket,
   32a3c:	9500      	str	r5, [sp, #0]
   32a3e:	ab04      	add	r3, sp, #16
   32a40:	2202      	movs	r2, #2
   32a42:	f44f 7101 	mov.w	r1, #516	; 0x204
   32a46:	6a70      	ldr	r0, [r6, #36]	; 0x24
   32a48:	f007 faa0 	bl	39f8c <nrf_setsockopt>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   32a4c:	1c43      	adds	r3, r0, #1
   32a4e:	d138      	bne.n	32ac2 <start+0x2a6>
   32a50:	f010 f963 	bl	42d1a <__errno>
   32a54:	6803      	ldr	r3, [r0, #0]
   32a56:	2b0e      	cmp	r3, #14
   32a58:	d11f      	bne.n	32a9a <start+0x27e>
		nrf_close(drv_data->socket);
   32a5a:	46b1      	mov	r9, r6
		LOG_DBG("Failed to set fix retry value, "
   32a5c:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   32a60:	f043 0304 	orr.w	r3, r3, #4
   32a64:	f363 0807 	bfi	r8, r3, #0, #8
   32a68:	f364 188f 	bfi	r8, r4, #6, #10
   32a6c:	4652      	mov	r2, sl
   32a6e:	4659      	mov	r1, fp
   32a70:	4640      	mov	r0, r8
   32a72:	f00f fae4 	bl	4203e <log_string_sync>
		nrf_close(drv_data->socket);
   32a76:	f859 0f24 	ldr.w	r0, [r9, #36]!
   32a7a:	f007 f9b1 	bl	39de0 <nrf_close>
		if (open_socket(drv_data) != 0) {
   32a7e:	4648      	mov	r0, r9
   32a80:	f7ff fd64 	bl	3254c <open_socket.isra.4>
   32a84:	2800      	cmp	r0, #0
   32a86:	d0d9      	beq.n	32a3c <start+0x220>
			LOG_ERR("Failed to re-init GPS service");
   32a88:	f04f 0000 	mov.w	r0, #0
   32a8c:	2301      	movs	r3, #1
   32a8e:	f363 0007 	bfi	r0, r3, #0, #8
   32a92:	f364 108f 	bfi	r0, r4, #6, #10
   32a96:	493a      	ldr	r1, [pc, #232]	; (32b80 <start+0x364>)
   32a98:	e770      	b.n	3297c <start+0x160>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   32a9a:	f010 f93e 	bl	42d1a <__errno>
   32a9e:	6803      	ldr	r3, [r0, #0]
   32aa0:	2b09      	cmp	r3, #9
   32aa2:	d0da      	beq.n	32a5a <start+0x23e>
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   32aa4:	f04f 0000 	mov.w	r0, #0
   32aa8:	2301      	movs	r3, #1
   32aaa:	f363 0007 	bfi	r0, r3, #0, #8
   32aae:	f364 108f 	bfi	r0, r4, #6, #10
   32ab2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   32ab6:	4933      	ldr	r1, [pc, #204]	; (32b84 <start+0x368>)
   32ab8:	f00f fac1 	bl	4203e <log_string_sync>
		return -EIO;
   32abc:	f06f 0504 	mvn.w	r5, #4
   32ac0:	e6ed      	b.n	3289e <start+0x82>
	} else if (retval != 0) {
   32ac2:	2800      	cmp	r0, #0
   32ac4:	d1ee      	bne.n	32aa4 <start+0x288>
	retval = nrf_setsockopt(drv_data->socket,
   32ac6:	9500      	str	r5, [sp, #0]
   32ac8:	f10d 0312 	add.w	r3, sp, #18
   32acc:	2201      	movs	r2, #1
   32ace:	f44f 7101 	mov.w	r1, #516	; 0x204
   32ad2:	6a70      	ldr	r0, [r6, #36]	; 0x24
   32ad4:	f007 fa5a 	bl	39f8c <nrf_setsockopt>
	if (retval != 0) {
   32ad8:	b140      	cbz	r0, 32aec <start+0x2d0>
		LOG_ERR("Failed to set fix interval value");
   32ada:	f04f 0000 	mov.w	r0, #0
   32ade:	2301      	movs	r3, #1
   32ae0:	f363 0007 	bfi	r0, r3, #0, #8
   32ae4:	f364 108f 	bfi	r0, r4, #6, #10
   32ae8:	4927      	ldr	r1, [pc, #156]	; (32b88 <start+0x36c>)
   32aea:	e747      	b.n	3297c <start+0x160>
	retval = nrf_setsockopt(drv_data->socket,
   32aec:	9500      	str	r5, [sp, #0]
   32aee:	ab05      	add	r3, sp, #20
   32af0:	2204      	movs	r2, #4
   32af2:	f44f 7101 	mov.w	r1, #516	; 0x204
   32af6:	6a70      	ldr	r0, [r6, #36]	; 0x24
   32af8:	f007 fa48 	bl	39f8c <nrf_setsockopt>
	if (retval != 0) {
   32afc:	b140      	cbz	r0, 32b10 <start+0x2f4>
		LOG_ERR("Failed to set nmea mask");
   32afe:	f04f 0000 	mov.w	r0, #0
   32b02:	2301      	movs	r3, #1
   32b04:	f363 0007 	bfi	r0, r3, #0, #8
   32b08:	f364 108f 	bfi	r0, r4, #6, #10
   32b0c:	491f      	ldr	r1, [pc, #124]	; (32b8c <start+0x370>)
   32b0e:	e735      	b.n	3297c <start+0x160>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   32b10:	f89d 301c 	ldrb.w	r3, [sp, #28]
   32b14:	2b00      	cmp	r3, #0
   32b16:	d03f      	beq.n	32b98 <start+0x37c>
		retval = nrf_setsockopt(drv_data->socket,
   32b18:	2301      	movs	r3, #1
   32b1a:	9300      	str	r3, [sp, #0]
   32b1c:	2209      	movs	r2, #9
   32b1e:	ab07      	add	r3, sp, #28
   32b20:	f44f 7101 	mov.w	r1, #516	; 0x204
   32b24:	6a70      	ldr	r0, [r6, #36]	; 0x24
   32b26:	f007 fa31 	bl	39f8c <nrf_setsockopt>
		if (retval != 0) {
   32b2a:	b3a8      	cbz	r0, 32b98 <start+0x37c>
			LOG_ERR("Failed to set GPS power mode");
   32b2c:	f04f 0000 	mov.w	r0, #0
   32b30:	2301      	movs	r3, #1
   32b32:	f363 0007 	bfi	r0, r3, #0, #8
   32b36:	f364 108f 	bfi	r0, r4, #6, #10
   32b3a:	4915      	ldr	r1, [pc, #84]	; (32b90 <start+0x374>)
   32b3c:	e71e      	b.n	3297c <start+0x160>
   32b3e:	bf00      	nop
   32b40:	00046940 	.word	0x00046940
   32b44:	00046878 	.word	0x00046878
   32b48:	0004e148 	.word	0x0004e148
   32b4c:	0004e522 	.word	0x0004e522
   32b50:	0004e555 	.word	0x0004e555
   32b54:	0004e597 	.word	0x0004e597
   32b58:	0004e573 	.word	0x0004e573
   32b5c:	0004e5c7 	.word	0x0004e5c7
   32b60:	0004e5e1 	.word	0x0004e5e1
   32b64:	0004e6df 	.word	0x0004e6df
   32b68:	0004e13d 	.word	0x0004e13d
   32b6c:	0004e60c 	.word	0x0004e60c
   32b70:	0004e641 	.word	0x0004e641
   32b74:	0004e666 	.word	0x0004e666
   32b78:	0004e67e 	.word	0x0004e67e
   32b7c:	0004e6af 	.word	0x0004e6af
   32b80:	0004e759 	.word	0x0004e759
   32b84:	0004e737 	.word	0x0004e737
   32b88:	0004e777 	.word	0x0004e777
   32b8c:	0004e798 	.word	0x0004e798
   32b90:	0004e7b0 	.word	0x0004e7b0
   32b94:	0004e6f4 	.word	0x0004e6f4
	retval = nrf_setsockopt(drv_data->socket,
   32b98:	2304      	movs	r3, #4
   32b9a:	9300      	str	r3, [sp, #0]
   32b9c:	2207      	movs	r2, #7
   32b9e:	ab06      	add	r3, sp, #24
   32ba0:	f44f 7101 	mov.w	r1, #516	; 0x204
   32ba4:	6a70      	ldr	r0, [r6, #36]	; 0x24
   32ba6:	f007 f9f1 	bl	39f8c <nrf_setsockopt>
	if (retval != 0) {
   32baa:	4605      	mov	r5, r0
   32bac:	b140      	cbz	r0, 32bc0 <start+0x3a4>
		LOG_ERR("Failed to start GPS");
   32bae:	f04f 0000 	mov.w	r0, #0
   32bb2:	2301      	movs	r3, #1
   32bb4:	f363 0007 	bfi	r0, r3, #0, #8
   32bb8:	f364 108f 	bfi	r0, r4, #6, #10
   32bbc:	4917      	ldr	r1, [pc, #92]	; (32c1c <start+0x400>)
   32bbe:	e6dd      	b.n	3297c <start+0x160>
	if (!gps_cfg.priority) {
   32bc0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   32bc4:	b99b      	cbnz	r3, 32bee <start+0x3d2>
		retval = gps_priority_set(drv_data, false);
   32bc6:	4601      	mov	r1, r0
   32bc8:	f106 0024 	add.w	r0, r6, #36	; 0x24
   32bcc:	f7ff fc42 	bl	32454 <gps_priority_set.isra.3>
		if (retval != 0) {
   32bd0:	4680      	mov	r8, r0
   32bd2:	b160      	cbz	r0, 32bee <start+0x3d2>
			LOG_ERR("Failed to set GPS priority, error: %d",
   32bd4:	2301      	movs	r3, #1
   32bd6:	f04f 0000 	mov.w	r0, #0
   32bda:	f363 0007 	bfi	r0, r3, #0, #8
   32bde:	f364 108f 	bfi	r0, r4, #6, #10
   32be2:	4642      	mov	r2, r8
   32be4:	490e      	ldr	r1, [pc, #56]	; (32c20 <start+0x404>)
   32be6:	f00f fa2a 	bl	4203e <log_string_sync>
			return retval;
   32bea:	4645      	mov	r5, r8
   32bec:	e657      	b.n	3289e <start+0x82>
	atomic_set(&drv_data->is_active, 1);
   32bee:	2101      	movs	r1, #1
   32bf0:	4638      	mov	r0, r7
   32bf2:	f012 f91a 	bl	44e2a <atomic_set>
	z_impl_k_sem_give(sem);
   32bf6:	f606 00f4 	addw	r0, r6, #2292	; 0x8f4
   32bfa:	f00b fb03 	bl	3e204 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   32bfe:	2304      	movs	r3, #4
   32c00:	f04f 0000 	mov.w	r0, #0
   32c04:	f363 0007 	bfi	r0, r3, #0, #8
   32c08:	f364 108f 	bfi	r0, r4, #6, #10
   32c0c:	4a05      	ldr	r2, [pc, #20]	; (32c24 <start+0x408>)
   32c0e:	4906      	ldr	r1, [pc, #24]	; (32c28 <start+0x40c>)
   32c10:	f00f fa15 	bl	4203e <log_string_sync>
	return retval;
   32c14:	e643      	b.n	3289e <start+0x82>
		return -EHOSTDOWN;
   32c16:	f06f 0574 	mvn.w	r5, #116	; 0x74
   32c1a:	e640      	b.n	3289e <start+0x82>
   32c1c:	0004e216 	.word	0x0004e216
   32c20:	0004e1bd 	.word	0x0004e1bd
   32c24:	0004e148 	.word	0x0004e148
   32c28:	0004e7cd 	.word	0x0004e7cd

00032c2c <gps_thread>:
{
   32c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gps_drv_data *drv_data = dev->data;
   32c30:	68c3      	ldr	r3, [r0, #12]
{
   32c32:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   32c36:	9006      	str	r0, [sp, #24]
	struct gps_event evt = {
   32c38:	22c0      	movs	r2, #192	; 0xc0
   32c3a:	2100      	movs	r1, #0
   32c3c:	a810      	add	r0, sp, #64	; 0x40
	struct gps_drv_data *drv_data = dev->data;
   32c3e:	9303      	str	r3, [sp, #12]
   32c40:	4c76      	ldr	r4, [pc, #472]	; (32e1c <gps_thread+0x1f0>)
	struct gps_event evt = {
   32c42:	f012 fb11 	bl	45268 <memset>
			LOG_DBG("A-GPS data update needed");
   32c46:	4b76      	ldr	r3, [pc, #472]	; (32e20 <gps_thread+0x1f4>)
   32c48:	1ae4      	subs	r4, r4, r3
	bool has_fix = false;
   32c4a:	2300      	movs	r3, #0
	bool operation_blocked = false;
   32c4c:	461d      	mov	r5, r3
			LOG_DBG("A-GPS data update needed");
   32c4e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	bool has_fix = false;
   32c52:	9304      	str	r3, [sp, #16]
	return z_impl_k_sem_take(sem, timeout);
   32c54:	9903      	ldr	r1, [sp, #12]
   32c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32c5a:	f601 00f4 	addw	r0, r1, #2292	; 0x8f4
   32c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32c62:	f00b fb13 	bl	3e28c <z_impl_k_sem_take>
	notify_event(dev, &evt);
   32c66:	a910      	add	r1, sp, #64	; 0x40
   32c68:	9806      	ldr	r0, [sp, #24]
   32c6a:	f012 f8b3 	bl	44dd4 <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   32c6e:	22d8      	movs	r2, #216	; 0xd8
   32c70:	2100      	movs	r1, #0
   32c72:	a870      	add	r0, sp, #448	; 0x1c0
   32c74:	f012 faf8 	bl	45268 <memset>
		struct gps_event evt = {0};
   32c78:	22c0      	movs	r2, #192	; 0xc0
   32c7a:	2100      	movs	r1, #0
   32c7c:	a840      	add	r0, sp, #256	; 0x100
   32c7e:	f012 faf3 	bl	45268 <memset>
		if (!has_fix) {
   32c82:	9b03      	ldr	r3, [sp, #12]
   32c84:	f503 6314 	add.w	r3, r3, #2368	; 0x940
   32c88:	930e      	str	r3, [sp, #56]	; 0x38
   32c8a:	9b04      	ldr	r3, [sp, #16]
   32c8c:	b933      	cbnz	r3, 32c9c <gps_thread+0x70>
   32c8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   32c92:	2300      	movs	r3, #0
   32c94:	990e      	ldr	r1, [sp, #56]	; 0x38
   32c96:	4863      	ldr	r0, [pc, #396]	; (32e24 <gps_thread+0x1f8>)
   32c98:	f00b fd20 	bl	3e6dc <k_delayed_work_submit_to_queue>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   32c9c:	9803      	ldr	r0, [sp, #12]
   32c9e:	2300      	movs	r3, #0
   32ca0:	22d8      	movs	r2, #216	; 0xd8
   32ca2:	a970      	add	r1, sp, #448	; 0x1c0
   32ca4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   32ca6:	f007 f8f7 	bl	39e98 <nrf_recv>
   32caa:	4606      	mov	r6, r0
		k_delayed_work_cancel(&drv_data->timeout_work);
   32cac:	980e      	ldr	r0, [sp, #56]	; 0x38
   32cae:	f00b fd9d 	bl	3e7ec <k_delayed_work_cancel>
		if (len <= 0) {
   32cb2:	9b03      	ldr	r3, [sp, #12]
   32cb4:	2e00      	cmp	r6, #0
   32cb6:	f503 6717 	add.w	r7, r3, #2416	; 0x970
   32cba:	dc70      	bgt.n	32d9e <gps_thread+0x172>
   32cbc:	331c      	adds	r3, #28
   32cbe:	930f      	str	r3, [sp, #60]	; 0x3c
   32cc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   32cc2:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->is_active)) {
   32cc6:	2b00      	cmp	r3, #0
   32cc8:	d0c4      	beq.n	32c54 <gps_thread+0x28>
			if (errno == EHOSTDOWN) {
   32cca:	f010 f826 	bl	42d1a <__errno>
   32cce:	6803      	ldr	r3, [r0, #0]
   32cd0:	2b75      	cmp	r3, #117	; 0x75
   32cd2:	d14f      	bne.n	32d74 <gps_thread+0x148>
				LOG_DBG("GPS host is going down, sleeping");
   32cd4:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   32cd8:	f043 0304 	orr.w	r3, r3, #4
   32cdc:	f363 0907 	bfi	r9, r3, #0, #8
   32ce0:	f364 198f 	bfi	r9, r4, #6, #10
   32ce4:	4a50      	ldr	r2, [pc, #320]	; (32e28 <gps_thread+0x1fc>)
   32ce6:	4951      	ldr	r1, [pc, #324]	; (32e2c <gps_thread+0x200>)
   32ce8:	4648      	mov	r0, r9
   32cea:	f00f f9a8 	bl	4203e <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   32cee:	980e      	ldr	r0, [sp, #56]	; 0x38
   32cf0:	f00b fd7c 	bl	3e7ec <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   32cf4:	4638      	mov	r0, r7
   32cf6:	f00b fd79 	bl	3e7ec <k_delayed_work_cancel>
	return atomic_set(target, 0);
   32cfa:	2100      	movs	r1, #0
   32cfc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   32cfe:	f012 f894 	bl	44e2a <atomic_set>
				atomic_set(&drv_data->is_shutdown, 1);
   32d02:	9b03      	ldr	r3, [sp, #12]
   32d04:	2101      	movs	r1, #1
   32d06:	f103 0720 	add.w	r7, r3, #32
   32d0a:	4638      	mov	r0, r7
   32d0c:	f012 f88d 	bl	44e2a <atomic_set>
				nrf_close(drv_data->socket);
   32d10:	9e03      	ldr	r6, [sp, #12]
   32d12:	f856 0f24 	ldr.w	r0, [r6, #36]!
   32d16:	f007 f863 	bl	39de0 <nrf_close>
				bsdlib_shutdown_wait();
   32d1a:	f7f6 fba7 	bl	2946c <bsdlib_shutdown_wait>
				if (open_socket(drv_data) != 0) {
   32d1e:	4630      	mov	r0, r6
   32d20:	f7ff fc14 	bl	3254c <open_socket.isra.4>
   32d24:	4601      	mov	r1, r0
   32d26:	b168      	cbz	r0, 32d44 <gps_thread+0x118>
					LOG_ERR("Failed to open socket after "
   32d28:	2301      	movs	r3, #1
   32d2a:	f04f 0000 	mov.w	r0, #0
   32d2e:	f363 0007 	bfi	r0, r3, #0, #8
   32d32:	f364 108f 	bfi	r0, r4, #6, #10
   32d36:	493e      	ldr	r1, [pc, #248]	; (32e30 <gps_thread+0x204>)
   32d38:	f00f f981 	bl	4203e <log_string_sync>
}
   32d3c:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   32d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d44:	4638      	mov	r0, r7
   32d46:	f012 f870 	bl	44e2a <atomic_set>
				LOG_DBG("GPS host available, going back to "
   32d4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   32d4e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   32d52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32d56:	f043 0304 	orr.w	r3, r3, #4
   32d5a:	f363 0207 	bfi	r2, r3, #0, #8
   32d5e:	b293      	uxth	r3, r2
   32d60:	f364 138f 	bfi	r3, r4, #6, #10
   32d64:	4a30      	ldr	r2, [pc, #192]	; (32e28 <gps_thread+0x1fc>)
   32d66:	4933      	ldr	r1, [pc, #204]	; (32e34 <gps_thread+0x208>)
   32d68:	b298      	uxth	r0, r3
   32d6a:	f8ad 301c 	strh.w	r3, [sp, #28]
   32d6e:	f00f f966 	bl	4203e <log_string_sync>
				goto wait;
   32d72:	e76f      	b.n	32c54 <gps_thread+0x28>
				LOG_ERR("recv() returned error: %d", len);
   32d74:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   32d78:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   32d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32d80:	f043 0301 	orr.w	r3, r3, #1
   32d84:	f363 0207 	bfi	r2, r3, #0, #8
   32d88:	b293      	uxth	r3, r2
   32d8a:	f364 138f 	bfi	r3, r4, #6, #10
   32d8e:	4632      	mov	r2, r6
   32d90:	4929      	ldr	r1, [pc, #164]	; (32e38 <gps_thread+0x20c>)
   32d92:	b298      	uxth	r0, r3
   32d94:	f8ad 3020 	strh.w	r3, [sp, #32]
   32d98:	f00f f951 	bl	4203e <log_string_sync>
			continue;
   32d9c:	e767      	b.n	32c6e <gps_thread+0x42>
		switch (raw_gps_data.data_id) {
   32d9e:	f89d 31c0 	ldrb.w	r3, [sp, #448]	; 0x1c0
   32da2:	2b02      	cmp	r3, #2
   32da4:	f000 815e 	beq.w	33064 <gps_thread+0x438>
   32da8:	2b03      	cmp	r3, #3
   32daa:	f000 8187 	beq.w	330bc <gps_thread+0x490>
   32dae:	2b01      	cmp	r3, #1
   32db0:	f47f af5d 	bne.w	32c6e <gps_thread+0x42>
	return ((pvt->flags & NRF_GNSS_PVT_FLAG_DEADLINE_MISSED)
   32db4:	f89d 3204 	ldrb.w	r3, [sp, #516]	; 0x204
			if (has_no_time_window(&raw_gps_data.pvt) ||
   32db8:	f013 0318 	ands.w	r3, r3, #24
   32dbc:	930e      	str	r3, [sp, #56]	; 0x38
   32dbe:	d03f      	beq.n	32e40 <gps_thread+0x214>
				if (operation_blocked) {
   32dc0:	b11d      	cbz	r5, 32dca <gps_thread+0x19e>
			has_fix = false;
   32dc2:	2300      	movs	r3, #0
   32dc4:	2501      	movs	r5, #1
   32dc6:	9304      	str	r3, [sp, #16]
   32dc8:	e751      	b.n	32c6e <gps_thread+0x42>
				LOG_DBG("Waiting for time window to operate");
   32dca:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   32dce:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   32dd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32dd6:	f043 0304 	orr.w	r3, r3, #4
   32dda:	f363 0207 	bfi	r2, r3, #0, #8
   32dde:	b293      	uxth	r3, r2
   32de0:	f364 138f 	bfi	r3, r4, #6, #10
   32de4:	b298      	uxth	r0, r3
   32de6:	4a10      	ldr	r2, [pc, #64]	; (32e28 <gps_thread+0x1fc>)
   32de8:	4914      	ldr	r1, [pc, #80]	; (32e3c <gps_thread+0x210>)
   32dea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   32dee:	f00f f926 	bl	4203e <log_string_sync>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   32df2:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   32df4:	a940      	add	r1, sp, #256	; 0x100
   32df6:	9806      	ldr	r0, [sp, #24]
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   32df8:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				notify_event(dev, &evt);
   32dfc:	f011 ffea 	bl	44dd4 <notify_event>
				if (drv_data->current_cfg.priority) {
   32e00:	9b03      	ldr	r3, [sp, #12]
   32e02:	7d5e      	ldrb	r6, [r3, #21]
   32e04:	2e00      	cmp	r6, #0
   32e06:	d0dc      	beq.n	32dc2 <gps_thread+0x196>
   32e08:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   32e0c:	2300      	movs	r3, #0
   32e0e:	4639      	mov	r1, r7
   32e10:	4804      	ldr	r0, [pc, #16]	; (32e24 <gps_thread+0x1f8>)
   32e12:	f00b fc63 	bl	3e6dc <k_delayed_work_submit_to_queue>
			has_fix = false;
   32e16:	9504      	str	r5, [sp, #16]
				operation_blocked = true;
   32e18:	4635      	mov	r5, r6
   32e1a:	e728      	b.n	32c6e <gps_thread+0x42>
   32e1c:	00046940 	.word	0x00046940
   32e20:	00046878 	.word	0x00046878
   32e24:	200244a8 	.word	0x200244a8
   32e28:	0004e132 	.word	0x0004e132
   32e2c:	0004e254 	.word	0x0004e254
   32e30:	0004e279 	.word	0x0004e279
   32e34:	0004e2b4 	.word	0x0004e2b4
   32e38:	0004e2ec 	.word	0x0004e2ec
   32e3c:	0004e306 	.word	0x0004e306
			} else if (operation_blocked) {
   32e40:	b1ed      	cbz	r5, 32e7e <gps_thread+0x252>
				LOG_DBG("GPS has time window to operate");
   32e42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   32e46:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   32e4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32e4e:	f043 0304 	orr.w	r3, r3, #4
   32e52:	f363 0207 	bfi	r2, r3, #0, #8
   32e56:	b293      	uxth	r3, r2
   32e58:	f364 138f 	bfi	r3, r4, #6, #10
   32e5c:	b298      	uxth	r0, r3
   32e5e:	4ab1      	ldr	r2, [pc, #708]	; (33124 <gps_thread+0x4f8>)
   32e60:	49b1      	ldr	r1, [pc, #708]	; (33128 <gps_thread+0x4fc>)
   32e62:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   32e66:	f00f f8ea 	bl	4203e <log_string_sync>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   32e6a:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   32e6c:	9806      	ldr	r0, [sp, #24]
   32e6e:	a940      	add	r1, sp, #256	; 0x100
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   32e70:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				notify_event(dev, &evt);
   32e74:	f011 ffae 	bl	44dd4 <notify_event>
				k_delayed_work_cancel(&drv_data->blocked_work);
   32e78:	4638      	mov	r0, r7
   32e7a:	f00b fcb7 	bl	3e7ec <k_delayed_work_cancel>
	dest->latitude = src->latitude;
   32e7e:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
   32e82:	e9cd 2342 	strd	r2, r3, [sp, #264]	; 0x108
	dest->longitude = src->longitude;
   32e86:	e9dd 2374 	ldrd	r2, r3, [sp, #464]	; 0x1d0
   32e8a:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
	dest->datetime.year = src->datetime.year;
   32e8e:	9a7a      	ldr	r2, [sp, #488]	; 0x1e8
   32e90:	af70      	add	r7, sp, #448	; 0x1c0
   32e92:	924f      	str	r2, [sp, #316]	; 0x13c
	dest->datetime.hour = src->datetime.hour;
   32e94:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
	for (size_t i = 0;
   32e98:	2100      	movs	r1, #0
	dest->datetime.hour = src->datetime.hour;
   32e9a:	f8ad 2140 	strh.w	r2, [sp, #320]	; 0x140
	dest->tdop = src->tdop;
   32e9e:	463a      	mov	r2, r7
	dest->altitude = src->altitude;
   32ea0:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
   32ea2:	9346      	str	r3, [sp, #280]	; 0x118
	dest->accuracy = src->accuracy;
   32ea4:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
   32ea6:	9347      	str	r3, [sp, #284]	; 0x11c
	dest->speed = src->speed;
   32ea8:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
   32eaa:	9348      	str	r3, [sp, #288]	; 0x120
	dest->heading = src->heading;
   32eac:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
   32eae:	9349      	str	r3, [sp, #292]	; 0x124
	dest->datetime.seconds = src->datetime.seconds;
   32eb0:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
   32eb4:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
	dest->datetime.ms = src->datetime.ms;
   32eb8:	f8bd 31f0 	ldrh.w	r3, [sp, #496]	; 0x1f0
   32ebc:	f8ad 3144 	strh.w	r3, [sp, #324]	; 0x144
	dest->pdop = src->pdop;
   32ec0:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
   32ec2:	934a      	str	r3, [sp, #296]	; 0x128
	dest->hdop = src->hdop;
   32ec4:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
   32ec6:	934b      	str	r3, [sp, #300]	; 0x12c
	dest->vdop = src->vdop;
   32ec8:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
   32eca:	934c      	str	r3, [sp, #304]	; 0x130
	dest->tdop = src->tdop;
   32ecc:	9b80      	ldr	r3, [sp, #512]	; 0x200
   32ece:	934d      	str	r3, [sp, #308]	; 0x134
	for (size_t i = 0;
   32ed0:	ab40      	add	r3, sp, #256	; 0x100
		dest->sv[i].sv = src->sv[i].sv;
   32ed2:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   32ed6:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   32ed8:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   32edc:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
	for (size_t i = 0;
   32ee0:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   32ee2:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   32ee6:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
   32eea:	f103 030a 	add.w	r3, r3, #10
   32eee:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   32ef2:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
   32ef6:	f102 020c 	add.w	r2, r2, #12
   32efa:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   32efe:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   32f02:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	for (size_t i = 0;
   32f06:	d1e4      	bne.n	32ed2 <gps_thread+0x2a6>
			if (is_fix(&raw_gps_data.pvt)) {
   32f08:	f89d 3204 	ldrb.w	r3, [sp, #516]	; 0x204
   32f0c:	f013 0301 	ands.w	r3, r3, #1
   32f10:	f000 80a4 	beq.w	3305c <gps_thread+0x430>
				LOG_DBG("PVT: Position fix");
   32f14:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   32f18:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   32f1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   32f20:	f043 0304 	orr.w	r3, r3, #4
   32f24:	f363 0207 	bfi	r2, r3, #0, #8
   32f28:	b293      	uxth	r3, r2
   32f2a:	f364 138f 	bfi	r3, r4, #6, #10
   32f2e:	b298      	uxth	r0, r3
   32f30:	4a7c      	ldr	r2, [pc, #496]	; (33124 <gps_thread+0x4f8>)
   32f32:	497e      	ldr	r1, [pc, #504]	; (3312c <gps_thread+0x500>)
   32f34:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   32f38:	f00f f881 	bl	4203e <log_string_sync>
				evt.type = GPS_EVT_PVT_FIX;
   32f3c:	2304      	movs	r3, #4
   32f3e:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
	return z_impl_k_uptime_ticks();
   32f42:	f012 f89c 	bl	4507e <z_impl_k_uptime_ticks>
   32f46:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   32f4a:	fba0 2306 	umull	r2, r3, r0, r6
   32f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   32f52:	9b05      	ldr	r3, [sp, #20]
				fix_timestamp = k_uptime_get();
   32f54:	4d76      	ldr	r5, [pc, #472]	; (33130 <gps_thread+0x504>)
   32f56:	fb06 3301 	mla	r3, r6, r1, r3
   32f5a:	9305      	str	r3, [sp, #20]
   32f5c:	9b04      	ldr	r3, [sp, #16]
   32f5e:	0bda      	lsrs	r2, r3, #15
   32f60:	9b05      	ldr	r3, [sp, #20]
   32f62:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
   32f66:	0bdb      	lsrs	r3, r3, #15
   32f68:	e9c5 2300 	strd	r2, r3, [r5]
				has_fix = true;
   32f6c:	2301      	movs	r3, #1
	uint8_t  n_unhealthy = 0;
   32f6e:	2500      	movs	r5, #0
	uint8_t  n_used = 0;
   32f70:	462e      	mov	r6, r5
			notify_event(dev, &evt);
   32f72:	a940      	add	r1, sp, #256	; 0x100
   32f74:	9806      	ldr	r0, [sp, #24]
			has_fix = false;
   32f76:	9304      	str	r3, [sp, #16]
			notify_event(dev, &evt);
   32f78:	f011 ff2c 	bl	44dd4 <notify_event>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   32f7c:	950f      	str	r5, [sp, #60]	; 0x3c
		uint8_t sv = pvt_data->pvt.sv[i].sv;
   32f7e:	f897 c046 	ldrb.w	ip, [r7, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   32f82:	f1bc 0f00 	cmp.w	ip, #0
   32f86:	d02a      	beq.n	32fde <gps_thread+0x3b2>
			n_tracked++;
   32f88:	980e      	ldr	r0, [sp, #56]	; 0x38
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   32f8a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
			n_tracked++;
   32f8e:	3001      	adds	r0, #1
   32f90:	b2c3      	uxtb	r3, r0
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   32f92:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   32f96:	930e      	str	r3, [sp, #56]	; 0x38
			if (used) {
   32f98:	b109      	cbz	r1, 32f9e <gps_thread+0x372>
				n_used++;
   32f9a:	3601      	adds	r6, #1
   32f9c:	b2f6      	uxtb	r6, r6
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   32f9e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   32fa2:	b10a      	cbz	r2, 32fa8 <gps_thread+0x37c>
				n_unhealthy++;
   32fa4:	3501      	adds	r5, #1
   32fa6:	b2ed      	uxtb	r5, r5
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32fa8:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
   32fac:	f040 0004 	orr.w	r0, r0, #4
   32fb0:	f360 0a07 	bfi	sl, r0, #0, #8
   32fb4:	4b5f      	ldr	r3, [pc, #380]	; (33134 <gps_thread+0x508>)
   32fb6:	4860      	ldr	r0, [pc, #384]	; (33138 <gps_thread+0x50c>)
   32fb8:	f364 1a8f 	bfi	sl, r4, #6, #10
   32fbc:	2900      	cmp	r1, #0
   32fbe:	bf08      	it	eq
   32fc0:	4618      	moveq	r0, r3
   32fc2:	4b5e      	ldr	r3, [pc, #376]	; (3313c <gps_thread+0x510>)
   32fc4:	4601      	mov	r1, r0
   32fc6:	485e      	ldr	r0, [pc, #376]	; (33140 <gps_thread+0x514>)
   32fc8:	2a00      	cmp	r2, #0
   32fca:	bf08      	it	eq
   32fcc:	4603      	moveq	r3, r0
   32fce:	4a5d      	ldr	r2, [pc, #372]	; (33144 <gps_thread+0x518>)
   32fd0:	e9cd 1300 	strd	r1, r3, [sp]
   32fd4:	4650      	mov	r0, sl
   32fd6:	4663      	mov	r3, ip
   32fd8:	495b      	ldr	r1, [pc, #364]	; (33148 <gps_thread+0x51c>)
   32fda:	f00f f830 	bl	4203e <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   32fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   32fe0:	370c      	adds	r7, #12
   32fe2:	3301      	adds	r3, #1
   32fe4:	2b0c      	cmp	r3, #12
   32fe6:	930f      	str	r3, [sp, #60]	; 0x3c
   32fe8:	d1c9      	bne.n	32f7e <gps_thread+0x352>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   32fea:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   32fee:	f043 0304 	orr.w	r3, r3, #4
   32ff2:	f363 0807 	bfi	r8, r3, #0, #8
   32ff6:	f364 188f 	bfi	r8, r4, #6, #10
   32ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   32ffc:	e9cd 6500 	strd	r6, r5, [sp]
   33000:	4a50      	ldr	r2, [pc, #320]	; (33144 <gps_thread+0x518>)
   33002:	4952      	ldr	r1, [pc, #328]	; (3314c <gps_thread+0x520>)
   33004:	4640      	mov	r0, r8
   33006:	f00f f81a 	bl	4203e <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   3300a:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   3300e:	f043 0304 	orr.w	r3, r3, #4
   33012:	f363 0b07 	bfi	fp, r3, #0, #8
   33016:	f364 1b8f 	bfi	fp, r4, #6, #10
   3301a:	f012 f830 	bl	4507e <z_impl_k_uptime_ticks>
   3301e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   33022:	fba0 2305 	umull	r2, r3, r0, r5
   33026:	fb05 3301 	mla	r3, r5, r1, r3
   3302a:	0bd5      	lsrs	r5, r2, #15
   3302c:	ea45 4543 	orr.w	r5, r5, r3, lsl #17
   33030:	0bd9      	lsrs	r1, r3, #15
   33032:	4b3f      	ldr	r3, [pc, #252]	; (33130 <gps_thread+0x504>)
   33034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33038:	e9d3 0600 	ldrd	r0, r6, [r3]
   3303c:	1a28      	subs	r0, r5, r0
   3303e:	f04f 0300 	mov.w	r3, #0
   33042:	eb61 0106 	sbc.w	r1, r1, r6
   33046:	f7e9 ff39 	bl	1cebc <__aeabi_uldivmod>
   3304a:	4a3e      	ldr	r2, [pc, #248]	; (33144 <gps_thread+0x518>)
   3304c:	e9cd 0100 	strd	r0, r1, [sp]
   33050:	493f      	ldr	r1, [pc, #252]	; (33150 <gps_thread+0x524>)
   33052:	4658      	mov	r0, fp
   33054:	f00e fff3 	bl	4203e <log_string_sync>
   33058:	2500      	movs	r5, #0
   3305a:	e608      	b.n	32c6e <gps_thread+0x42>
				evt.type = GPS_EVT_PVT;
   3305c:	2203      	movs	r2, #3
   3305e:	f88d 2100 	strb.w	r2, [sp, #256]	; 0x100
   33062:	e784      	b.n	32f6e <gps_thread+0x342>
			if (operation_blocked) {
   33064:	2d00      	cmp	r5, #0
   33066:	f47f ae02 	bne.w	32c6e <gps_thread+0x42>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   3306a:	23b8      	movs	r3, #184	; 0xb8
   3306c:	4632      	mov	r2, r6
   3306e:	a972      	add	r1, sp, #456	; 0x1c8
   33070:	a842      	add	r0, sp, #264	; 0x108
   33072:	f012 f8e6 	bl	45242 <__memcpy_chk>
			if (has_fix) {
   33076:	9b04      	ldr	r3, [sp, #16]
			evt.nmea.len = len - 1;
   33078:	3e01      	subs	r6, #1
   3307a:	f88d 615b 	strb.w	r6, [sp, #347]	; 0x15b
			if (has_fix) {
   3307e:	b1db      	cbz	r3, 330b8 <gps_thread+0x48c>
				LOG_DBG("NMEA: Position fix");
   33080:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   33084:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   33088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   3308c:	f043 0304 	orr.w	r3, r3, #4
   33090:	f363 0207 	bfi	r2, r3, #0, #8
   33094:	b293      	uxth	r3, r2
   33096:	f364 138f 	bfi	r3, r4, #6, #10
   3309a:	b298      	uxth	r0, r3
   3309c:	4a21      	ldr	r2, [pc, #132]	; (33124 <gps_thread+0x4f8>)
   3309e:	492d      	ldr	r1, [pc, #180]	; (33154 <gps_thread+0x528>)
   330a0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   330a4:	f00e ffcb 	bl	4203e <log_string_sync>
				evt.type = GPS_EVT_NMEA_FIX;
   330a8:	2306      	movs	r3, #6
			notify_event(dev, &evt);
   330aa:	a940      	add	r1, sp, #256	; 0x100
   330ac:	9806      	ldr	r0, [sp, #24]
				evt.type = GPS_EVT_NMEA;
   330ae:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			notify_event(dev, &evt);
   330b2:	f011 fe8f 	bl	44dd4 <notify_event>
			break;
   330b6:	e7cf      	b.n	33058 <gps_thread+0x42c>
				evt.type = GPS_EVT_NMEA;
   330b8:	2305      	movs	r3, #5
   330ba:	e7f6      	b.n	330aa <gps_thread+0x47e>
			LOG_DBG("A-GPS data update needed");
   330bc:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   330c0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   330c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   330c8:	f043 0304 	orr.w	r3, r3, #4
   330cc:	f363 0207 	bfi	r2, r3, #0, #8
   330d0:	b293      	uxth	r3, r2
   330d2:	f364 138f 	bfi	r3, r4, #6, #10
   330d6:	4a13      	ldr	r2, [pc, #76]	; (33124 <gps_thread+0x4f8>)
   330d8:	491f      	ldr	r1, [pc, #124]	; (33158 <gps_thread+0x52c>)
   330da:	b298      	uxth	r0, r3
   330dc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   330e0:	f00e ffad 	bl	4203e <log_string_sync>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   330e4:	2309      	movs	r3, #9
   330e6:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			evt.agps_request.sv_mask_ephe =
   330ea:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
				raw_gps_data.agps.data_flags &
   330ec:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
			evt.agps_request.sv_mask_ephe =
   330ee:	9342      	str	r3, [sp, #264]	; 0x108
			evt.agps_request.sv_mask_alm =
   330f0:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
				BIT(NRF_GNSS_AGPS_KLOBUCHAR_REQUEST) ? 1 : 0;
   330f2:	0851      	lsrs	r1, r2, #1
			evt.agps_request.sv_mask_alm =
   330f4:	9343      	str	r3, [sp, #268]	; 0x10c
			evt.agps_request.utc =
   330f6:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
   330fa:	f362 0300 	bfi	r3, r2, #0, #1
			evt.agps_request.klobuchar =
   330fe:	f361 0341 	bfi	r3, r1, #1, #1
				BIT(NRF_GNSS_AGPS_NEQUICK_REQUEST) ? 1 : 0;
   33102:	0891      	lsrs	r1, r2, #2
			evt.agps_request.nequick =
   33104:	f361 0382 	bfi	r3, r1, #2, #1
				1 : 0;
   33108:	08d1      	lsrs	r1, r2, #3
			evt.agps_request.system_time_tow =
   3310a:	f361 03c3 	bfi	r3, r1, #3, #1
				BIT(NRF_GNSS_AGPS_POSITION_REQUEST) ? 1 : 0;
   3310e:	0911      	lsrs	r1, r2, #4
			evt.agps_request.position =
   33110:	f361 1304 	bfi	r3, r1, #4, #1
				BIT(NRF_GNSS_AGPS_INTEGRITY_REQUEST) ? 1 : 0;
   33114:	0952      	lsrs	r2, r2, #5
			evt.agps_request.integrity =
   33116:	f362 1345 	bfi	r3, r2, #5, #1
   3311a:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
			notify_event(dev, &evt);
   3311e:	a940      	add	r1, sp, #256	; 0x100
   33120:	e5a2      	b.n	32c68 <gps_thread+0x3c>
   33122:	bf00      	nop
   33124:	0004e132 	.word	0x0004e132
   33128:	0004e32d 	.word	0x0004e32d
   3312c:	0004e350 	.word	0x0004e350
   33130:	20023970 	.word	0x20023970
   33134:	0004e233 	.word	0x0004e233
   33138:	0004e22a 	.word	0x0004e22a
   3313c:	0004e23c 	.word	0x0004e23c
   33140:	0004e248 	.word	0x0004e248
   33144:	0004e0ff 	.word	0x0004e0ff
   33148:	0004e366 	.word	0x0004e366
   3314c:	0004e382 	.word	0x0004e382
   33150:	0004e3ab 	.word	0x0004e3ab
   33154:	0004e3cb 	.word	0x0004e3cb
   33158:	0004e3e2 	.word	0x0004e3e2

0003315c <stop>:
{
   3315c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3315e:	4604      	mov	r4, r0
   33160:	b085      	sub	sp, #20
	struct gps_drv_data *drv_data = dev->data;
   33162:	68c5      	ldr	r5, [r0, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   33164:	f105 0320 	add.w	r3, r5, #32
   33168:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   3316c:	2b01      	cmp	r3, #1
   3316e:	d045      	beq.n	331fc <stop+0xa0>
	k_delayed_work_cancel(&drv_data->timeout_work);
   33170:	f505 6014 	add.w	r0, r5, #2368	; 0x940
   33174:	f00b fb3a 	bl	3e7ec <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   33178:	f505 6017 	add.w	r0, r5, #2416	; 0x970
   3317c:	f00b fb36 	bl	3e7ec <k_delayed_work_cancel>
   33180:	f105 031c 	add.w	r3, r5, #28
   33184:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_active) == 0) {
   33188:	b37b      	cbz	r3, 331ea <stop+0x8e>
		LOG_DBG("Stopping GPS");
   3318a:	2304      	movs	r3, #4
   3318c:	f04f 0000 	mov.w	r0, #0
	nrf_gnss_delete_mask_t delete_mask = 0;
   33190:	2700      	movs	r7, #0
	err = stop_gps(dev, false);
   33192:	68e6      	ldr	r6, [r4, #12]
		LOG_DBG("Stopping GPS");
   33194:	f363 0007 	bfi	r0, r3, #0, #8
   33198:	4c1a      	ldr	r4, [pc, #104]	; (33204 <stop+0xa8>)
   3319a:	4b1b      	ldr	r3, [pc, #108]	; (33208 <stop+0xac>)
   3319c:	4a1b      	ldr	r2, [pc, #108]	; (3320c <stop+0xb0>)
   3319e:	1ae4      	subs	r4, r4, r3
   331a0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   331a4:	f364 108f 	bfi	r0, r4, #6, #10
   331a8:	4919      	ldr	r1, [pc, #100]	; (33210 <stop+0xb4>)
	nrf_gnss_delete_mask_t delete_mask = 0;
   331aa:	9703      	str	r7, [sp, #12]
		LOG_DBG("Stopping GPS");
   331ac:	f00e ff47 	bl	4203e <log_string_sync>
	atomic_set(&drv_data->is_active, 0);
   331b0:	4639      	mov	r1, r7
   331b2:	f106 001c 	add.w	r0, r6, #28
   331b6:	f011 fe38 	bl	44e2a <atomic_set>
	retval = nrf_setsockopt(drv_data->socket,
   331ba:	2304      	movs	r3, #4
   331bc:	9300      	str	r3, [sp, #0]
   331be:	2208      	movs	r2, #8
   331c0:	ab03      	add	r3, sp, #12
   331c2:	f44f 7101 	mov.w	r1, #516	; 0x204
   331c6:	6a70      	ldr	r0, [r6, #36]	; 0x24
   331c8:	f006 fee0 	bl	39f8c <nrf_setsockopt>
	if (retval != 0) {
   331cc:	b168      	cbz	r0, 331ea <stop+0x8e>
		LOG_ERR("Failed to stop GPS");
   331ce:	2301      	movs	r3, #1
   331d0:	f04f 0000 	mov.w	r0, #0
   331d4:	f363 0007 	bfi	r0, r3, #0, #8
   331d8:	f364 108f 	bfi	r0, r4, #6, #10
   331dc:	490d      	ldr	r1, [pc, #52]	; (33214 <stop+0xb8>)
   331de:	f00e ff2e 	bl	4203e <log_string_sync>
		return -EIO;
   331e2:	f06f 0004 	mvn.w	r0, #4
}
   331e6:	b005      	add	sp, #20
   331e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   331ea:	2200      	movs	r2, #0
   331ec:	2300      	movs	r3, #0
   331ee:	f505 6111 	add.w	r1, r5, #2320	; 0x910
   331f2:	4809      	ldr	r0, [pc, #36]	; (33218 <stop+0xbc>)
   331f4:	f00b fa72 	bl	3e6dc <k_delayed_work_submit_to_queue>
	return 0;
   331f8:	2000      	movs	r0, #0
   331fa:	e7f4      	b.n	331e6 <stop+0x8a>
		return -EHOSTDOWN;
   331fc:	f06f 0074 	mvn.w	r0, #116	; 0x74
   33200:	e7f1      	b.n	331e6 <stop+0x8a>
   33202:	bf00      	nop
   33204:	00046940 	.word	0x00046940
   33208:	00046878 	.word	0x00046878
   3320c:	0004e154 	.word	0x0004e154
   33210:	0004e7e1 	.word	0x0004e7e1
   33214:	0004e7f2 	.word	0x0004e7f2
   33218:	200244a8 	.word	0x200244a8

0003321c <packet_free_cb>:
   3321c:	b510      	push	{r4, lr}
   3321e:	4604      	mov	r4, r0
   33220:	6800      	ldr	r0, [r0, #0]
   33222:	f004 ffa1 	bl	38168 <rpc_logobj_client_data_free>
   33226:	68a0      	ldr	r0, [r4, #8]
   33228:	b118      	cbz	r0, 33232 <packet_free_cb+0x16>
   3322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3322e:	f007 be57 	b.w	3aee0 <nrf_free>
   33232:	bd10      	pop	{r4, pc}

00033234 <logobj_event_handler>:
   33234:	b530      	push	{r4, r5, lr}
   33236:	4b3b      	ldr	r3, [pc, #236]	; (33324 <logobj_event_handler+0xf0>)
   33238:	b085      	sub	sp, #20
   3323a:	681d      	ldr	r5, [r3, #0]
   3323c:	2d00      	cmp	r5, #0
   3323e:	d04c      	beq.n	332da <logobj_event_handler+0xa6>
   33240:	f248 0302 	movw	r3, #32770	; 0x8002
   33244:	4299      	cmp	r1, r3
   33246:	d053      	beq.n	332f0 <logobj_event_handler+0xbc>
   33248:	d91c      	bls.n	33284 <logobj_event_handler+0x50>
   3324a:	f248 0303 	movw	r3, #32771	; 0x8003
   3324e:	4299      	cmp	r1, r3
   33250:	d05a      	beq.n	33308 <logobj_event_handler+0xd4>
   33252:	f249 0301 	movw	r3, #36865	; 0x9001
   33256:	4299      	cmp	r1, r3
   33258:	d147      	bne.n	332ea <logobj_event_handler+0xb6>
   3325a:	2400      	movs	r4, #0
   3325c:	6843      	ldr	r3, [r0, #4]
   3325e:	6802      	ldr	r2, [r0, #0]
   33260:	e9cd 4402 	strd	r4, r4, [sp, #8]
   33264:	e9cd 2300 	strd	r2, r3, [sp]
   33268:	69e8      	ldr	r0, [r5, #28]
   3326a:	4669      	mov	r1, sp
   3326c:	6803      	ldr	r3, [r0, #0]
   3326e:	685b      	ldr	r3, [r3, #4]
   33270:	4798      	blx	r3
   33272:	3001      	adds	r0, #1
   33274:	d04e      	beq.n	33314 <logobj_event_handler+0xe0>
   33276:	4620      	mov	r0, r4
   33278:	682b      	ldr	r3, [r5, #0]
   3327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3327e:	602b      	str	r3, [r5, #0]
   33280:	b005      	add	sp, #20
   33282:	bd30      	pop	{r4, r5, pc}
   33284:	f248 0301 	movw	r3, #32769	; 0x8001
   33288:	4299      	cmp	r1, r3
   3328a:	d12e      	bne.n	332ea <logobj_event_handler+0xb6>
   3328c:	68c3      	ldr	r3, [r0, #12]
   3328e:	2b00      	cmp	r3, #0
   33290:	d135      	bne.n	332fe <logobj_event_handler+0xca>
   33292:	6828      	ldr	r0, [r5, #0]
   33294:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   33298:	d03e      	beq.n	33318 <logobj_event_handler+0xe4>
   3329a:	682b      	ldr	r3, [r5, #0]
   3329c:	b29b      	uxth	r3, r3
   3329e:	2b01      	cmp	r3, #1
   332a0:	d105      	bne.n	332ae <logobj_event_handler+0x7a>
   332a2:	682b      	ldr	r3, [r5, #0]
   332a4:	0c1b      	lsrs	r3, r3, #16
   332a6:	041b      	lsls	r3, r3, #16
   332a8:	f043 0302 	orr.w	r3, r3, #2
   332ac:	602b      	str	r3, [r5, #0]
   332ae:	4b1e      	ldr	r3, [pc, #120]	; (33328 <logobj_event_handler+0xf4>)
   332b0:	781a      	ldrb	r2, [r3, #0]
   332b2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   332b6:	2a00      	cmp	r2, #0
   332b8:	d031      	beq.n	3331e <logobj_event_handler+0xea>
   332ba:	4a1c      	ldr	r2, [pc, #112]	; (3332c <logobj_event_handler+0xf8>)
   332bc:	7811      	ldrb	r1, [r2, #0]
   332be:	b909      	cbnz	r1, 332c4 <logobj_event_handler+0x90>
   332c0:	2101      	movs	r1, #1
   332c2:	7011      	strb	r1, [r2, #0]
   332c4:	2000      	movs	r0, #0
   332c6:	7018      	strb	r0, [r3, #0]
   332c8:	682b      	ldr	r3, [r5, #0]
   332ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   332ce:	602b      	str	r3, [r5, #0]
   332d0:	682b      	ldr	r3, [r5, #0]
   332d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   332d6:	602b      	str	r3, [r5, #0]
   332d8:	e7d2      	b.n	33280 <logobj_event_handler+0x4c>
   332da:	6800      	ldr	r0, [r0, #0]
   332dc:	2800      	cmp	r0, #0
   332de:	d0cf      	beq.n	33280 <logobj_event_handler+0x4c>
   332e0:	f004 ff42 	bl	38168 <rpc_logobj_client_data_free>
   332e4:	4628      	mov	r0, r5
   332e6:	b005      	add	sp, #20
   332e8:	bd30      	pop	{r4, r5, pc}
   332ea:	2000      	movs	r0, #0
   332ec:	b005      	add	sp, #20
   332ee:	bd30      	pop	{r4, r5, pc}
   332f0:	682b      	ldr	r3, [r5, #0]
   332f2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   332f6:	d00b      	beq.n	33310 <logobj_event_handler+0xdc>
   332f8:	68c0      	ldr	r0, [r0, #12]
   332fa:	2800      	cmp	r0, #0
   332fc:	d0e4      	beq.n	332c8 <logobj_event_handler+0x94>
   332fe:	230e      	movs	r3, #14
   33300:	2000      	movs	r0, #0
   33302:	606b      	str	r3, [r5, #4]
   33304:	b005      	add	sp, #20
   33306:	bd30      	pop	{r4, r5, pc}
   33308:	68c3      	ldr	r3, [r0, #12]
   3330a:	2b01      	cmp	r3, #1
   3330c:	d1a5      	bne.n	3325a <logobj_event_handler+0x26>
   3330e:	e7f6      	b.n	332fe <logobj_event_handler+0xca>
   33310:	4618      	mov	r0, r3
   33312:	e7b5      	b.n	33280 <logobj_event_handler+0x4c>
   33314:	2002      	movs	r0, #2
   33316:	e7b3      	b.n	33280 <logobj_event_handler+0x4c>
   33318:	230e      	movs	r3, #14
   3331a:	606b      	str	r3, [r5, #4]
   3331c:	e7b0      	b.n	33280 <logobj_event_handler+0x4c>
   3331e:	4a03      	ldr	r2, [pc, #12]	; (3332c <logobj_event_handler+0xf8>)
   33320:	7011      	strb	r1, [r2, #0]
   33322:	e7cf      	b.n	332c4 <logobj_event_handler+0x90>
   33324:	200254fc 	.word	0x200254fc
   33328:	2002cb0a 	.word	0x2002cb0a
   3332c:	2002cb0b 	.word	0x2002cb0b

00033330 <logobj_interface_init>:
   33330:	2300      	movs	r3, #0
   33332:	b510      	push	{r4, lr}
   33334:	4808      	ldr	r0, [pc, #32]	; (33358 <logobj_interface_init+0x28>)
   33336:	4c09      	ldr	r4, [pc, #36]	; (3335c <logobj_interface_init+0x2c>)
   33338:	4909      	ldr	r1, [pc, #36]	; (33360 <logobj_interface_init+0x30>)
   3333a:	4a0a      	ldr	r2, [pc, #40]	; (33364 <logobj_interface_init+0x34>)
   3333c:	7023      	strb	r3, [r4, #0]
   3333e:	6003      	str	r3, [r0, #0]
   33340:	700b      	strb	r3, [r1, #0]
   33342:	6013      	str	r3, [r2, #0]
   33344:	f004 fed0 	bl	380e8 <rpc_logobj_client_init>
   33348:	b918      	cbnz	r0, 33352 <logobj_interface_init+0x22>
   3334a:	2201      	movs	r2, #1
   3334c:	4b06      	ldr	r3, [pc, #24]	; (33368 <logobj_interface_init+0x38>)
   3334e:	701a      	strb	r2, [r3, #0]
   33350:	bd10      	pop	{r4, pc}
   33352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33356:	bd10      	pop	{r4, pc}
   33358:	200254fc 	.word	0x200254fc
   3335c:	2002cb0b 	.word	0x2002cb0b
   33360:	2002cb0a 	.word	0x2002cb0a
   33364:	200254f8 	.word	0x200254f8
   33368:	2002cb0c 	.word	0x2002cb0c

0003336c <logobj_interface_deinit>:
   3336c:	b510      	push	{r4, lr}
   3336e:	4c05      	ldr	r4, [pc, #20]	; (33384 <logobj_interface_deinit+0x18>)
   33370:	7820      	ldrb	r0, [r4, #0]
   33372:	b900      	cbnz	r0, 33376 <logobj_interface_deinit+0xa>
   33374:	bd10      	pop	{r4, pc}
   33376:	f004 febd 	bl	380f4 <rpc_logobj_client_deinit>
   3337a:	b908      	cbnz	r0, 33380 <logobj_interface_deinit+0x14>
   3337c:	7020      	strb	r0, [r4, #0]
   3337e:	bd10      	pop	{r4, pc}
   33380:	2003      	movs	r0, #3
   33382:	bd10      	pop	{r4, pc}
   33384:	2002cb0c 	.word	0x2002cb0c

00033388 <logobj_interface_open>:
   33388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3338c:	2400      	movs	r4, #0
   3338e:	4b5b      	ldr	r3, [pc, #364]	; (334fc <logobj_interface_open+0x174>)
   33390:	b084      	sub	sp, #16
   33392:	781b      	ldrb	r3, [r3, #0]
   33394:	9401      	str	r4, [sp, #4]
   33396:	2b00      	cmp	r3, #0
   33398:	f000 809f 	beq.w	334da <logobj_interface_open+0x152>
   3339c:	2866      	cmp	r0, #102	; 0x66
   3339e:	4680      	mov	r8, r0
   333a0:	f040 808f 	bne.w	334c2 <logobj_interface_open+0x13a>
   333a4:	2902      	cmp	r1, #2
   333a6:	4689      	mov	r9, r1
   333a8:	f040 808b 	bne.w	334c2 <logobj_interface_open+0x13a>
   333ac:	f240 2305 	movw	r3, #517	; 0x205
   333b0:	429a      	cmp	r2, r3
   333b2:	4692      	mov	sl, r2
   333b4:	f040 8085 	bne.w	334c2 <logobj_interface_open+0x13a>
   333b8:	4f51      	ldr	r7, [pc, #324]	; (33500 <logobj_interface_open+0x178>)
   333ba:	683d      	ldr	r5, [r7, #0]
   333bc:	2d00      	cmp	r5, #0
   333be:	f040 8086 	bne.w	334ce <logobj_interface_open+0x146>
   333c2:	4a50      	ldr	r2, [pc, #320]	; (33504 <logobj_interface_open+0x17c>)
   333c4:	a801      	add	r0, sp, #4
   333c6:	f008 f8c3 	bl	3b550 <interface_socket_allocate>
   333ca:	9b01      	ldr	r3, [sp, #4]
   333cc:	4606      	mov	r6, r0
   333ce:	2b00      	cmp	r3, #0
   333d0:	f000 808d 	beq.w	334ee <logobj_interface_open+0x166>
   333d4:	4629      	mov	r1, r5
   333d6:	2204      	movs	r2, #4
   333d8:	484b      	ldr	r0, [pc, #300]	; (33508 <logobj_interface_open+0x180>)
   333da:	603b      	str	r3, [r7, #0]
   333dc:	f011 ff44 	bl	45268 <memset>
   333e0:	9c01      	ldr	r4, [sp, #4]
   333e2:	4629      	mov	r1, r5
   333e4:	e9c4 8903 	strd	r8, r9, [r4, #12]
   333e8:	f8c4 a014 	str.w	sl, [r4, #20]
   333ec:	a802      	add	r0, sp, #8
   333ee:	f004 fe85 	bl	380fc <rpc_logobj_client_request_alloc>
   333f2:	2800      	cmp	r0, #0
   333f4:	d142      	bne.n	3347c <logobj_interface_open+0xf4>
   333f6:	2201      	movs	r2, #1
   333f8:	2104      	movs	r1, #4
   333fa:	9b02      	ldr	r3, [sp, #8]
   333fc:	4d43      	ldr	r5, [pc, #268]	; (3350c <logobj_interface_open+0x184>)
   333fe:	7358      	strb	r0, [r3, #13]
   33400:	7398      	strb	r0, [r3, #14]
   33402:	73d8      	strb	r0, [r3, #15]
   33404:	7258      	strb	r0, [r3, #9]
   33406:	7298      	strb	r0, [r3, #10]
   33408:	72d8      	strb	r0, [r3, #11]
   3340a:	7219      	strb	r1, [r3, #8]
   3340c:	702a      	strb	r2, [r5, #0]
   3340e:	731a      	strb	r2, [r3, #12]
   33410:	6822      	ldr	r2, [r4, #0]
   33412:	4618      	mov	r0, r3
   33414:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   33418:	6022      	str	r2, [r4, #0]
   3341a:	f247 0101 	movw	r1, #28673	; 0x7001
   3341e:	f004 fe85 	bl	3812c <rpc_logobj_client_request_send>
   33422:	bb68      	cbnz	r0, 33480 <logobj_interface_open+0xf8>
   33424:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33426:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   3342a:	2900      	cmp	r1, #0
   3342c:	bf08      	it	eq
   3342e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   33432:	ab04      	add	r3, sp, #16
   33434:	f843 1d04 	str.w	r1, [r3, #-4]!
   33438:	4630      	mov	r0, r6
   3343a:	4611      	mov	r1, r2
   3343c:	f008 f93a 	bl	3b6b4 <interface_socket_wait>
   33440:	4604      	mov	r4, r0
   33442:	b310      	cbz	r0, 3348a <logobj_interface_open+0x102>
   33444:	9a01      	ldr	r2, [sp, #4]
   33446:	2e00      	cmp	r6, #0
   33448:	6813      	ldr	r3, [r2, #0]
   3344a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3344e:	6013      	str	r3, [r2, #0]
   33450:	9a01      	ldr	r2, [sp, #4]
   33452:	6813      	ldr	r3, [r2, #0]
   33454:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   33458:	6013      	str	r3, [r2, #0]
   3345a:	9a01      	ldr	r2, [sp, #4]
   3345c:	6813      	ldr	r3, [r2, #0]
   3345e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   33462:	6013      	str	r3, [r2, #0]
   33464:	da3f      	bge.n	334e6 <logobj_interface_open+0x15e>
   33466:	2300      	movs	r3, #0
   33468:	4620      	mov	r0, r4
   3346a:	603b      	str	r3, [r7, #0]
   3346c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   33470:	f7f6 f950 	bl	29714 <bsd_os_errno_set>
   33474:	4630      	mov	r0, r6
   33476:	b004      	add	sp, #16
   33478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3347c:	240c      	movs	r4, #12
   3347e:	e7e1      	b.n	33444 <logobj_interface_open+0xbc>
   33480:	9802      	ldr	r0, [sp, #8]
   33482:	f004 fe69 	bl	38158 <rpc_logobj_client_message_free>
   33486:	2405      	movs	r4, #5
   33488:	e7dc      	b.n	33444 <logobj_interface_open+0xbc>
   3348a:	4630      	mov	r0, r6
   3348c:	f008 f986 	bl	3b79c <interface_socket_from_handle_get>
   33490:	b120      	cbz	r0, 3349c <logobj_interface_open+0x114>
   33492:	6844      	ldr	r4, [r0, #4]
   33494:	b114      	cbz	r4, 3349c <logobj_interface_open+0x114>
   33496:	2300      	movs	r3, #0
   33498:	6043      	str	r3, [r0, #4]
   3349a:	e7d3      	b.n	33444 <logobj_interface_open+0xbc>
   3349c:	4630      	mov	r0, r6
   3349e:	9a01      	ldr	r2, [sp, #4]
   334a0:	6813      	ldr	r3, [r2, #0]
   334a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   334a6:	6013      	str	r3, [r2, #0]
   334a8:	9a01      	ldr	r2, [sp, #4]
   334aa:	6813      	ldr	r3, [r2, #0]
   334ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   334b0:	6013      	str	r3, [r2, #0]
   334b2:	9a01      	ldr	r2, [sp, #4]
   334b4:	6813      	ldr	r3, [r2, #0]
   334b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   334ba:	6013      	str	r3, [r2, #0]
   334bc:	b004      	add	sp, #16
   334be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   334c2:	2016      	movs	r0, #22
   334c4:	f7f6 f926 	bl	29714 <bsd_os_errno_set>
   334c8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   334cc:	e7d2      	b.n	33474 <logobj_interface_open+0xec>
   334ce:	2001      	movs	r0, #1
   334d0:	f7f6 f920 	bl	29714 <bsd_os_errno_set>
   334d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   334d8:	e7cc      	b.n	33474 <logobj_interface_open+0xec>
   334da:	2070      	movs	r0, #112	; 0x70
   334dc:	f7f6 f91a 	bl	29714 <bsd_os_errno_set>
   334e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   334e4:	e7c6      	b.n	33474 <logobj_interface_open+0xec>
   334e6:	4630      	mov	r0, r6
   334e8:	f008 f896 	bl	3b618 <interface_socket_free>
   334ec:	e7bb      	b.n	33466 <logobj_interface_open+0xde>
   334ee:	2018      	movs	r0, #24
   334f0:	f7f6 f910 	bl	29714 <bsd_os_errno_set>
   334f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   334f8:	e7bc      	b.n	33474 <logobj_interface_open+0xec>
   334fa:	bf00      	nop
   334fc:	2002cb0c 	.word	0x2002cb0c
   33500:	200254fc 	.word	0x200254fc
   33504:	0003321d 	.word	0x0003321d
   33508:	200254f8 	.word	0x200254f8
   3350c:	2002cb0a 	.word	0x2002cb0a

00033510 <logobj_interface_read>:
   33510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   33514:	b087      	sub	sp, #28
   33516:	2900      	cmp	r1, #0
   33518:	d06b      	beq.n	335f2 <logobj_interface_read+0xe2>
   3351a:	2a00      	cmp	r2, #0
   3351c:	4617      	mov	r7, r2
   3351e:	dd68      	ble.n	335f2 <logobj_interface_read+0xe2>
   33520:	461d      	mov	r5, r3
   33522:	4680      	mov	r8, r0
   33524:	460e      	mov	r6, r1
   33526:	f008 f939 	bl	3b79c <interface_socket_from_handle_get>
   3352a:	4604      	mov	r4, r0
   3352c:	2800      	cmp	r0, #0
   3352e:	d066      	beq.n	335fe <logobj_interface_read+0xee>
   33530:	bb4d      	cbnz	r5, 33586 <logobj_interface_read+0x76>
   33532:	69e0      	ldr	r0, [r4, #28]
   33534:	07aa      	lsls	r2, r5, #30
   33536:	6803      	ldr	r3, [r0, #0]
   33538:	68db      	ldr	r3, [r3, #12]
   3353a:	d52d      	bpl.n	33598 <logobj_interface_read+0x88>
   3353c:	4798      	blx	r3
   3353e:	3001      	adds	r0, #1
   33540:	d047      	beq.n	335d2 <logobj_interface_read+0xc2>
   33542:	6823      	ldr	r3, [r4, #0]
   33544:	69e0      	ldr	r0, [r4, #28]
   33546:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   3354a:	d044      	beq.n	335d6 <logobj_interface_read+0xc6>
   3354c:	2100      	movs	r1, #0
   3354e:	6823      	ldr	r3, [r4, #0]
   33550:	462a      	mov	r2, r5
   33552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33556:	6023      	str	r3, [r4, #0]
   33558:	e9cd 1104 	strd	r1, r1, [sp, #16]
   3355c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   33560:	6803      	ldr	r3, [r0, #0]
   33562:	a902      	add	r1, sp, #8
   33564:	689b      	ldr	r3, [r3, #8]
   33566:	4798      	blx	r3
   33568:	4605      	mov	r5, r0
   3356a:	69e0      	ldr	r0, [r4, #28]
   3356c:	6803      	ldr	r3, [r0, #0]
   3356e:	68db      	ldr	r3, [r3, #12]
   33570:	4798      	blx	r3
   33572:	3001      	adds	r0, #1
   33574:	d003      	beq.n	3357e <logobj_interface_read+0x6e>
   33576:	6823      	ldr	r3, [r4, #0]
   33578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3357c:	6023      	str	r3, [r4, #0]
   3357e:	4628      	mov	r0, r5
   33580:	b007      	add	sp, #28
   33582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   33586:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   3358a:	d1d2      	bne.n	33532 <logobj_interface_read+0x22>
   3358c:	202d      	movs	r0, #45	; 0x2d
   3358e:	f7f6 f8c1 	bl	29714 <bsd_os_errno_set>
   33592:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   33596:	e7f2      	b.n	3357e <logobj_interface_read+0x6e>
   33598:	6822      	ldr	r2, [r4, #0]
   3359a:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   3359e:	d1cd      	bne.n	3353c <logobj_interface_read+0x2c>
   335a0:	4798      	blx	r3
   335a2:	1c43      	adds	r3, r0, #1
   335a4:	d1cd      	bne.n	33542 <logobj_interface_read+0x32>
   335a6:	6a22      	ldr	r2, [r4, #32]
   335a8:	ab06      	add	r3, sp, #24
   335aa:	2a00      	cmp	r2, #0
   335ac:	bf18      	it	ne
   335ae:	4610      	movne	r0, r2
   335b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   335b4:	f843 0d14 	str.w	r0, [r3, #-20]!
   335b8:	4611      	mov	r1, r2
   335ba:	4640      	mov	r0, r8
   335bc:	f008 f87a 	bl	3b6b4 <interface_socket_wait>
   335c0:	b158      	cbz	r0, 335da <logobj_interface_read+0xca>
   335c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   335c6:	f7f6 f8a5 	bl	29714 <bsd_os_errno_set>
   335ca:	4628      	mov	r0, r5
   335cc:	b007      	add	sp, #28
   335ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   335d2:	2023      	movs	r0, #35	; 0x23
   335d4:	e7f5      	b.n	335c2 <logobj_interface_read+0xb2>
   335d6:	461d      	mov	r5, r3
   335d8:	e7c8      	b.n	3356c <logobj_interface_read+0x5c>
   335da:	4640      	mov	r0, r8
   335dc:	f008 f8de 	bl	3b79c <interface_socket_from_handle_get>
   335e0:	4603      	mov	r3, r0
   335e2:	2800      	cmp	r0, #0
   335e4:	d0ad      	beq.n	33542 <logobj_interface_read+0x32>
   335e6:	6840      	ldr	r0, [r0, #4]
   335e8:	2800      	cmp	r0, #0
   335ea:	d0aa      	beq.n	33542 <logobj_interface_read+0x32>
   335ec:	f8c3 9004 	str.w	r9, [r3, #4]
   335f0:	e7e7      	b.n	335c2 <logobj_interface_read+0xb2>
   335f2:	2016      	movs	r0, #22
   335f4:	f7f6 f88e 	bl	29714 <bsd_os_errno_set>
   335f8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   335fc:	e7bf      	b.n	3357e <logobj_interface_read+0x6e>
   335fe:	2009      	movs	r0, #9
   33600:	f7f6 f888 	bl	29714 <bsd_os_errno_set>
   33604:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   33608:	e7b9      	b.n	3357e <logobj_interface_read+0x6e>
   3360a:	bf00      	nop

0003360c <logobj_interface_write>:
   3360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33610:	b082      	sub	sp, #8
   33612:	2900      	cmp	r1, #0
   33614:	d06b      	beq.n	336ee <logobj_interface_write+0xe2>
   33616:	2a04      	cmp	r2, #4
   33618:	d169      	bne.n	336ee <logobj_interface_write+0xe2>
   3361a:	461f      	mov	r7, r3
   3361c:	4606      	mov	r6, r0
   3361e:	460d      	mov	r5, r1
   33620:	f008 f8bc 	bl	3b79c <interface_socket_from_handle_get>
   33624:	4604      	mov	r4, r0
   33626:	2800      	cmp	r0, #0
   33628:	d074      	beq.n	33714 <logobj_interface_write+0x108>
   3362a:	b1e7      	cbz	r7, 33666 <logobj_interface_write+0x5a>
   3362c:	07b8      	lsls	r0, r7, #30
   3362e:	d56b      	bpl.n	33708 <logobj_interface_write+0xfc>
   33630:	6823      	ldr	r3, [r4, #0]
   33632:	039b      	lsls	r3, r3, #14
   33634:	d564      	bpl.n	33700 <logobj_interface_write+0xf4>
   33636:	2700      	movs	r7, #0
   33638:	6823      	ldr	r3, [r4, #0]
   3363a:	2100      	movs	r1, #0
   3363c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   33640:	6023      	str	r3, [r4, #0]
   33642:	4668      	mov	r0, sp
   33644:	f8d5 8000 	ldr.w	r8, [r5]
   33648:	f004 fd58 	bl	380fc <rpc_logobj_client_request_alloc>
   3364c:	b198      	cbz	r0, 33676 <logobj_interface_write+0x6a>
   3364e:	200c      	movs	r0, #12
   33650:	6823      	ldr	r3, [r4, #0]
   33652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   33656:	6023      	str	r3, [r4, #0]
   33658:	f7f6 f85c 	bl	29714 <bsd_os_errno_set>
   3365c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33660:	b002      	add	sp, #8
   33662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33666:	6803      	ldr	r3, [r0, #0]
   33668:	00d9      	lsls	r1, r3, #3
   3366a:	d4e1      	bmi.n	33630 <logobj_interface_write+0x24>
   3366c:	6803      	ldr	r3, [r0, #0]
   3366e:	039a      	lsls	r2, r3, #14
   33670:	d548      	bpl.n	33704 <logobj_interface_write+0xf8>
   33672:	2701      	movs	r7, #1
   33674:	e7e0      	b.n	33638 <logobj_interface_write+0x2c>
   33676:	2504      	movs	r5, #4
   33678:	9b00      	ldr	r3, [sp, #0]
   3367a:	f247 0103 	movw	r1, #28675	; 0x7003
   3367e:	f8c3 800c 	str.w	r8, [r3, #12]
   33682:	7258      	strb	r0, [r3, #9]
   33684:	7298      	strb	r0, [r3, #10]
   33686:	72d8      	strb	r0, [r3, #11]
   33688:	721d      	strb	r5, [r3, #8]
   3368a:	4618      	mov	r0, r3
   3368c:	f004 fd4e 	bl	3812c <rpc_logobj_client_request_send>
   33690:	4680      	mov	r8, r0
   33692:	bb18      	cbnz	r0, 336dc <logobj_interface_write+0xd0>
   33694:	b1d7      	cbz	r7, 336cc <logobj_interface_write+0xc0>
   33696:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3369c:	2900      	cmp	r1, #0
   3369e:	bf08      	it	eq
   336a0:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   336a4:	ab02      	add	r3, sp, #8
   336a6:	f843 1d04 	str.w	r1, [r3, #-4]!
   336aa:	4630      	mov	r0, r6
   336ac:	4611      	mov	r1, r2
   336ae:	f008 f801 	bl	3b6b4 <interface_socket_wait>
   336b2:	b120      	cbz	r0, 336be <logobj_interface_write+0xb2>
   336b4:	6823      	ldr	r3, [r4, #0]
   336b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   336ba:	6023      	str	r3, [r4, #0]
   336bc:	e7cc      	b.n	33658 <logobj_interface_write+0x4c>
   336be:	4630      	mov	r0, r6
   336c0:	f008 f86c 	bl	3b79c <interface_socket_from_handle_get>
   336c4:	4603      	mov	r3, r0
   336c6:	b108      	cbz	r0, 336cc <logobj_interface_write+0xc0>
   336c8:	6840      	ldr	r0, [r0, #4]
   336ca:	b9b0      	cbnz	r0, 336fa <logobj_interface_write+0xee>
   336cc:	4628      	mov	r0, r5
   336ce:	6823      	ldr	r3, [r4, #0]
   336d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   336d4:	6023      	str	r3, [r4, #0]
   336d6:	b002      	add	sp, #8
   336d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   336dc:	9800      	ldr	r0, [sp, #0]
   336de:	f004 fd3b 	bl	38158 <rpc_logobj_client_message_free>
   336e2:	6823      	ldr	r3, [r4, #0]
   336e4:	2005      	movs	r0, #5
   336e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   336ea:	6023      	str	r3, [r4, #0]
   336ec:	e7b4      	b.n	33658 <logobj_interface_write+0x4c>
   336ee:	2016      	movs	r0, #22
   336f0:	f7f6 f810 	bl	29714 <bsd_os_errno_set>
   336f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   336f8:	e7b2      	b.n	33660 <logobj_interface_write+0x54>
   336fa:	f8c3 8004 	str.w	r8, [r3, #4]
   336fe:	e7d9      	b.n	336b4 <logobj_interface_write+0xa8>
   33700:	2073      	movs	r0, #115	; 0x73
   33702:	e7a9      	b.n	33658 <logobj_interface_write+0x4c>
   33704:	2009      	movs	r0, #9
   33706:	e7a7      	b.n	33658 <logobj_interface_write+0x4c>
   33708:	202d      	movs	r0, #45	; 0x2d
   3370a:	f7f6 f803 	bl	29714 <bsd_os_errno_set>
   3370e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33712:	e7a5      	b.n	33660 <logobj_interface_write+0x54>
   33714:	2009      	movs	r0, #9
   33716:	f7f5 fffd 	bl	29714 <bsd_os_errno_set>
   3371a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3371e:	e79f      	b.n	33660 <logobj_interface_write+0x54>

00033720 <logobj_interface_setopt>:
   33720:	b5f0      	push	{r4, r5, r6, r7, lr}
   33722:	2901      	cmp	r1, #1
   33724:	b085      	sub	sp, #20
   33726:	d06d      	beq.n	33804 <logobj_interface_setopt+0xe4>
   33728:	461e      	mov	r6, r3
   3372a:	f240 2305 	movw	r3, #517	; 0x205
   3372e:	4299      	cmp	r1, r3
   33730:	f040 80a0 	bne.w	33874 <logobj_interface_setopt+0x154>
   33734:	4607      	mov	r7, r0
   33736:	4615      	mov	r5, r2
   33738:	f008 f830 	bl	3b79c <interface_socket_from_handle_get>
   3373c:	4604      	mov	r4, r0
   3373e:	2800      	cmp	r0, #0
   33740:	f000 80c3 	beq.w	338ca <logobj_interface_setopt+0x1aa>
   33744:	2d01      	cmp	r5, #1
   33746:	d019      	beq.n	3377c <logobj_interface_setopt+0x5c>
   33748:	2d02      	cmp	r5, #2
   3374a:	d010      	beq.n	3376e <logobj_interface_setopt+0x4e>
   3374c:	252a      	movs	r5, #42	; 0x2a
   3374e:	6803      	ldr	r3, [r0, #0]
   33750:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   33754:	6023      	str	r3, [r4, #0]
   33756:	6823      	ldr	r3, [r4, #0]
   33758:	4628      	mov	r0, r5
   3375a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   3375e:	6023      	str	r3, [r4, #0]
   33760:	f7f5 ffd8 	bl	29714 <bsd_os_errno_set>
   33764:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   33768:	4628      	mov	r0, r5
   3376a:	b005      	add	sp, #20
   3376c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3376e:	b116      	cbz	r6, 33776 <logobj_interface_setopt+0x56>
   33770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33772:	2b01      	cmp	r3, #1
   33774:	d04e      	beq.n	33814 <logobj_interface_setopt+0xf4>
   33776:	6823      	ldr	r3, [r4, #0]
   33778:	2516      	movs	r5, #22
   3377a:	e7e9      	b.n	33750 <logobj_interface_setopt+0x30>
   3377c:	2e00      	cmp	r6, #0
   3377e:	d0fa      	beq.n	33776 <logobj_interface_setopt+0x56>
   33780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33782:	2b04      	cmp	r3, #4
   33784:	d1f7      	bne.n	33776 <logobj_interface_setopt+0x56>
   33786:	2100      	movs	r1, #0
   33788:	a803      	add	r0, sp, #12
   3378a:	f004 fcb7 	bl	380fc <rpc_logobj_client_request_alloc>
   3378e:	4605      	mov	r5, r0
   33790:	2800      	cmp	r0, #0
   33792:	d175      	bne.n	33880 <logobj_interface_setopt+0x160>
   33794:	9803      	ldr	r0, [sp, #12]
   33796:	2208      	movs	r2, #8
   33798:	4629      	mov	r1, r5
   3379a:	300c      	adds	r0, #12
   3379c:	f011 fd64 	bl	45268 <memset>
   337a0:	9803      	ldr	r0, [sp, #12]
   337a2:	4631      	mov	r1, r6
   337a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   337a6:	300c      	adds	r0, #12
   337a8:	f011 fd3e 	bl	45228 <memcpy>
   337ac:	2308      	movs	r3, #8
   337ae:	9803      	ldr	r0, [sp, #12]
   337b0:	f247 0102 	movw	r1, #28674	; 0x7002
   337b4:	7203      	strb	r3, [r0, #8]
   337b6:	7245      	strb	r5, [r0, #9]
   337b8:	7285      	strb	r5, [r0, #10]
   337ba:	72c5      	strb	r5, [r0, #11]
   337bc:	6823      	ldr	r3, [r4, #0]
   337be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   337c2:	6023      	str	r3, [r4, #0]
   337c4:	f004 fcb2 	bl	3812c <rpc_logobj_client_request_send>
   337c8:	2800      	cmp	r0, #0
   337ca:	d178      	bne.n	338be <logobj_interface_setopt+0x19e>
   337cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   337ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   337d2:	2900      	cmp	r1, #0
   337d4:	bf08      	it	eq
   337d6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   337da:	ab04      	add	r3, sp, #16
   337dc:	f843 1d08 	str.w	r1, [r3, #-8]!
   337e0:	4638      	mov	r0, r7
   337e2:	4611      	mov	r1, r2
   337e4:	f007 ff66 	bl	3b6b4 <interface_socket_wait>
   337e8:	4605      	mov	r5, r0
   337ea:	2800      	cmp	r0, #0
   337ec:	d140      	bne.n	33870 <logobj_interface_setopt+0x150>
   337ee:	4638      	mov	r0, r7
   337f0:	f007 ffd4 	bl	3b79c <interface_socket_from_handle_get>
   337f4:	2800      	cmp	r0, #0
   337f6:	d04e      	beq.n	33896 <logobj_interface_setopt+0x176>
   337f8:	6843      	ldr	r3, [r0, #4]
   337fa:	2b00      	cmp	r3, #0
   337fc:	d04b      	beq.n	33896 <logobj_interface_setopt+0x176>
   337fe:	6045      	str	r5, [r0, #4]
   33800:	461d      	mov	r5, r3
   33802:	e035      	b.n	33870 <logobj_interface_setopt+0x150>
   33804:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   33806:	9400      	str	r4, [sp, #0]
   33808:	f007 fff0 	bl	3b7ec <interface_socket_setopt>
   3380c:	4605      	mov	r5, r0
   3380e:	4628      	mov	r0, r5
   33810:	b005      	add	sp, #20
   33812:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33814:	2100      	movs	r1, #0
   33816:	a802      	add	r0, sp, #8
   33818:	7835      	ldrb	r5, [r6, #0]
   3381a:	f004 fc6f 	bl	380fc <rpc_logobj_client_request_alloc>
   3381e:	bb78      	cbnz	r0, 33880 <logobj_interface_setopt+0x160>
   33820:	2d01      	cmp	r5, #1
   33822:	bf08      	it	eq
   33824:	4b2c      	ldreq	r3, [pc, #176]	; (338d8 <logobj_interface_setopt+0x1b8>)
   33826:	f04f 0204 	mov.w	r2, #4
   3382a:	bf08      	it	eq
   3382c:	701d      	strbeq	r5, [r3, #0]
   3382e:	2300      	movs	r3, #0
   33830:	9802      	ldr	r0, [sp, #8]
   33832:	f247 0101 	movw	r1, #28673	; 0x7001
   33836:	7243      	strb	r3, [r0, #9]
   33838:	60c5      	str	r5, [r0, #12]
   3383a:	7283      	strb	r3, [r0, #10]
   3383c:	72c3      	strb	r3, [r0, #11]
   3383e:	7202      	strb	r2, [r0, #8]
   33840:	6823      	ldr	r3, [r4, #0]
   33842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   33846:	6023      	str	r3, [r4, #0]
   33848:	f004 fc70 	bl	3812c <rpc_logobj_client_request_send>
   3384c:	4606      	mov	r6, r0
   3384e:	bb80      	cbnz	r0, 338b2 <logobj_interface_setopt+0x192>
   33850:	6a61      	ldr	r1, [r4, #36]	; 0x24
   33852:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   33856:	2900      	cmp	r1, #0
   33858:	bf08      	it	eq
   3385a:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   3385e:	ab04      	add	r3, sp, #16
   33860:	f843 1d04 	str.w	r1, [r3, #-4]!
   33864:	4638      	mov	r0, r7
   33866:	4611      	mov	r1, r2
   33868:	f007 ff24 	bl	3b6b4 <interface_socket_wait>
   3386c:	4605      	mov	r5, r0
   3386e:	b150      	cbz	r0, 33886 <logobj_interface_setopt+0x166>
   33870:	6823      	ldr	r3, [r4, #0]
   33872:	e76d      	b.n	33750 <logobj_interface_setopt+0x30>
   33874:	202a      	movs	r0, #42	; 0x2a
   33876:	f7f5 ff4d 	bl	29714 <bsd_os_errno_set>
   3387a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3387e:	e773      	b.n	33768 <logobj_interface_setopt+0x48>
   33880:	6823      	ldr	r3, [r4, #0]
   33882:	250c      	movs	r5, #12
   33884:	e764      	b.n	33750 <logobj_interface_setopt+0x30>
   33886:	4638      	mov	r0, r7
   33888:	f007 ff88 	bl	3b79c <interface_socket_from_handle_get>
   3388c:	b140      	cbz	r0, 338a0 <logobj_interface_setopt+0x180>
   3388e:	6845      	ldr	r5, [r0, #4]
   33890:	b135      	cbz	r5, 338a0 <logobj_interface_setopt+0x180>
   33892:	6046      	str	r6, [r0, #4]
   33894:	e7ec      	b.n	33870 <logobj_interface_setopt+0x150>
   33896:	4631      	mov	r1, r6
   33898:	2204      	movs	r2, #4
   3389a:	4810      	ldr	r0, [pc, #64]	; (338dc <logobj_interface_setopt+0x1bc>)
   3389c:	f011 fcc4 	bl	45228 <memcpy>
   338a0:	6823      	ldr	r3, [r4, #0]
   338a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   338a6:	6023      	str	r3, [r4, #0]
   338a8:	6823      	ldr	r3, [r4, #0]
   338aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   338ae:	6023      	str	r3, [r4, #0]
   338b0:	e75a      	b.n	33768 <logobj_interface_setopt+0x48>
   338b2:	9802      	ldr	r0, [sp, #8]
   338b4:	f004 fc50 	bl	38158 <rpc_logobj_client_message_free>
   338b8:	2505      	movs	r5, #5
   338ba:	6823      	ldr	r3, [r4, #0]
   338bc:	e748      	b.n	33750 <logobj_interface_setopt+0x30>
   338be:	9803      	ldr	r0, [sp, #12]
   338c0:	f004 fc4a 	bl	38158 <rpc_logobj_client_message_free>
   338c4:	2505      	movs	r5, #5
   338c6:	6823      	ldr	r3, [r4, #0]
   338c8:	e742      	b.n	33750 <logobj_interface_setopt+0x30>
   338ca:	2009      	movs	r0, #9
   338cc:	f7f5 ff22 	bl	29714 <bsd_os_errno_set>
   338d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   338d4:	e748      	b.n	33768 <logobj_interface_setopt+0x48>
   338d6:	bf00      	nop
   338d8:	2002cb0a 	.word	0x2002cb0a
   338dc:	200254f8 	.word	0x200254f8

000338e0 <logobj_interface_getopt>:
   338e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   338e2:	2901      	cmp	r1, #1
   338e4:	b083      	sub	sp, #12
   338e6:	9e08      	ldr	r6, [sp, #32]
   338e8:	d030      	beq.n	3394c <logobj_interface_getopt+0x6c>
   338ea:	461f      	mov	r7, r3
   338ec:	f240 2305 	movw	r3, #517	; 0x205
   338f0:	4299      	cmp	r1, r3
   338f2:	d134      	bne.n	3395e <logobj_interface_getopt+0x7e>
   338f4:	4615      	mov	r5, r2
   338f6:	f007 ff51 	bl	3b79c <interface_socket_from_handle_get>
   338fa:	2800      	cmp	r0, #0
   338fc:	d037      	beq.n	3396e <logobj_interface_getopt+0x8e>
   338fe:	2d01      	cmp	r5, #1
   33900:	d015      	beq.n	3392e <logobj_interface_getopt+0x4e>
   33902:	2d02      	cmp	r5, #2
   33904:	d10b      	bne.n	3391e <logobj_interface_getopt+0x3e>
   33906:	b387      	cbz	r7, 3396a <logobj_interface_getopt+0x8a>
   33908:	6833      	ldr	r3, [r6, #0]
   3390a:	b373      	cbz	r3, 3396a <logobj_interface_getopt+0x8a>
   3390c:	2300      	movs	r3, #0
   3390e:	2201      	movs	r2, #1
   33910:	4618      	mov	r0, r3
   33912:	491a      	ldr	r1, [pc, #104]	; (3397c <logobj_interface_getopt+0x9c>)
   33914:	7809      	ldrb	r1, [r1, #0]
   33916:	7039      	strb	r1, [r7, #0]
   33918:	6032      	str	r2, [r6, #0]
   3391a:	b003      	add	sp, #12
   3391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3391e:	2009      	movs	r0, #9
   33920:	f7f5 fef8 	bl	29714 <bsd_os_errno_set>
   33924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33928:	4618      	mov	r0, r3
   3392a:	b003      	add	sp, #12
   3392c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3392e:	b1e7      	cbz	r7, 3396a <logobj_interface_getopt+0x8a>
   33930:	6833      	ldr	r3, [r6, #0]
   33932:	2b03      	cmp	r3, #3
   33934:	d919      	bls.n	3396a <logobj_interface_getopt+0x8a>
   33936:	4638      	mov	r0, r7
   33938:	2204      	movs	r2, #4
   3393a:	4911      	ldr	r1, [pc, #68]	; (33980 <logobj_interface_getopt+0xa0>)
   3393c:	f011 fc74 	bl	45228 <memcpy>
   33940:	2300      	movs	r3, #0
   33942:	2204      	movs	r2, #4
   33944:	4618      	mov	r0, r3
   33946:	6032      	str	r2, [r6, #0]
   33948:	b003      	add	sp, #12
   3394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3394c:	9600      	str	r6, [sp, #0]
   3394e:	f007 ff93 	bl	3b878 <interface_socket_getopt>
   33952:	4603      	mov	r3, r0
   33954:	2800      	cmp	r0, #0
   33956:	d1e3      	bne.n	33920 <logobj_interface_getopt+0x40>
   33958:	4618      	mov	r0, r3
   3395a:	b003      	add	sp, #12
   3395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3395e:	202a      	movs	r0, #42	; 0x2a
   33960:	f7f5 fed8 	bl	29714 <bsd_os_errno_set>
   33964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33968:	e7de      	b.n	33928 <logobj_interface_getopt+0x48>
   3396a:	2016      	movs	r0, #22
   3396c:	e7d8      	b.n	33920 <logobj_interface_getopt+0x40>
   3396e:	2009      	movs	r0, #9
   33970:	f7f5 fed0 	bl	29714 <bsd_os_errno_set>
   33974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33978:	e7d6      	b.n	33928 <logobj_interface_getopt+0x48>
   3397a:	bf00      	nop
   3397c:	2002cb0b 	.word	0x2002cb0b
   33980:	200254f8 	.word	0x200254f8

00033984 <logobj_interface_close>:
   33984:	b510      	push	{r4, lr}
   33986:	4604      	mov	r4, r0
   33988:	f007 ff08 	bl	3b79c <interface_socket_from_handle_get>
   3398c:	b138      	cbz	r0, 3399e <logobj_interface_close+0x1a>
   3398e:	4620      	mov	r0, r4
   33990:	f007 fe42 	bl	3b618 <interface_socket_free>
   33994:	2300      	movs	r3, #0
   33996:	4a05      	ldr	r2, [pc, #20]	; (339ac <logobj_interface_close+0x28>)
   33998:	4618      	mov	r0, r3
   3399a:	6013      	str	r3, [r2, #0]
   3399c:	bd10      	pop	{r4, pc}
   3399e:	2009      	movs	r0, #9
   339a0:	f7f5 feb8 	bl	29714 <bsd_os_errno_set>
   339a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   339a8:	bd10      	pop	{r4, pc}
   339aa:	bf00      	nop
   339ac:	200254fc 	.word	0x200254fc

000339b0 <rpc_transport_send>:
   339b0:	f000 bee2 	b.w	34778 <rpc_transport_ipc_send>

000339b4 <rpc_transport_rpc_alloc>:
   339b4:	f000 bf62 	b.w	3487c <rpc_transport_ipc_tx_rpc_data_alloc>

000339b8 <rpc_transport_data_alloc>:
   339b8:	f000 bfc8 	b.w	3494c <rpc_transport_ipc_tx_data_alloc>

000339bc <rpc_transport_rpc_free>:
   339bc:	f000 bdb6 	b.w	3452c <rpc_transport_ipc_msg_free>

000339c0 <rpc_transport_data_free>:
   339c0:	f000 ba64 	b.w	33e8c <rpc_transport_ipc_data_free>

000339c4 <ipc_trace_init>:
   339c4:	4b01      	ldr	r3, [pc, #4]	; (339cc <ipc_trace_init+0x8>)
   339c6:	6018      	str	r0, [r3, #0]
   339c8:	4770      	bx	lr
   339ca:	bf00      	nop
   339cc:	2002550c 	.word	0x2002550c

000339d0 <bsd_os_trace_irq_handler>:
   339d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   339d2:	4b6e      	ldr	r3, [pc, #440]	; (33b8c <bsd_os_trace_irq_handler+0x1bc>)
   339d4:	b083      	sub	sp, #12
   339d6:	781b      	ldrb	r3, [r3, #0]
   339d8:	2b00      	cmp	r3, #0
   339da:	f000 80d3 	beq.w	33b84 <bsd_os_trace_irq_handler+0x1b4>
   339de:	4b6c      	ldr	r3, [pc, #432]	; (33b90 <bsd_os_trace_irq_handler+0x1c0>)
   339e0:	681c      	ldr	r4, [r3, #0]
   339e2:	b124      	cbz	r4, 339ee <bsd_os_trace_irq_handler+0x1e>
   339e4:	68a3      	ldr	r3, [r4, #8]
   339e6:	6862      	ldr	r2, [r4, #4]
   339e8:	4293      	cmp	r3, r2
   339ea:	f040 808c 	bne.w	33b06 <bsd_os_trace_irq_handler+0x136>
   339ee:	4b69      	ldr	r3, [pc, #420]	; (33b94 <bsd_os_trace_irq_handler+0x1c4>)
   339f0:	681c      	ldr	r4, [r3, #0]
   339f2:	b11c      	cbz	r4, 339fc <bsd_os_trace_irq_handler+0x2c>
   339f4:	68a3      	ldr	r3, [r4, #8]
   339f6:	6862      	ldr	r2, [r4, #4]
   339f8:	4293      	cmp	r3, r2
   339fa:	d146      	bne.n	33a8a <bsd_os_trace_irq_handler+0xba>
   339fc:	4b66      	ldr	r3, [pc, #408]	; (33b98 <bsd_os_trace_irq_handler+0x1c8>)
   339fe:	681c      	ldr	r4, [r3, #0]
   33a00:	b11c      	cbz	r4, 33a0a <bsd_os_trace_irq_handler+0x3a>
   33a02:	68a3      	ldr	r3, [r4, #8]
   33a04:	6862      	ldr	r2, [r4, #4]
   33a06:	4293      	cmp	r3, r2
   33a08:	d101      	bne.n	33a0e <bsd_os_trace_irq_handler+0x3e>
   33a0a:	b003      	add	sp, #12
   33a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33a0e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33a12:	f8ad 2000 	strh.w	r2, [sp]
   33a16:	7822      	ldrb	r2, [r4, #0]
   33a18:	466e      	mov	r6, sp
   33a1a:	f88d 2004 	strb.w	r2, [sp, #4]
   33a1e:	6862      	ldr	r2, [r4, #4]
   33a20:	2105      	movs	r1, #5
   33a22:	4293      	cmp	r3, r2
   33a24:	bf2a      	itet	cs
   33a26:	6927      	ldrcs	r7, [r4, #16]
   33a28:	1ad7      	subcc	r7, r2, r3
   33a2a:	1aff      	subcs	r7, r7, r3
   33a2c:	4293      	cmp	r3, r2
   33a2e:	bf94      	ite	ls
   33a30:	2500      	movls	r5, #0
   33a32:	68e5      	ldrhi	r5, [r4, #12]
   33a34:	b2bf      	uxth	r7, r7
   33a36:	bf88      	it	hi
   33a38:	1b52      	subhi	r2, r2, r5
   33a3a:	4630      	mov	r0, r6
   33a3c:	bf88      	it	hi
   33a3e:	b295      	uxthhi	r5, r2
   33a40:	f8ad 7002 	strh.w	r7, [sp, #2]
   33a44:	f010 fb78 	bl	44138 <bsd_os_trace_put>
   33a48:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33a4c:	68a0      	ldr	r0, [r4, #8]
   33a4e:	f010 fb73 	bl	44138 <bsd_os_trace_put>
   33a52:	68a3      	ldr	r3, [r4, #8]
   33a54:	6922      	ldr	r2, [r4, #16]
   33a56:	441f      	add	r7, r3
   33a58:	4297      	cmp	r7, r2
   33a5a:	bf08      	it	eq
   33a5c:	68e3      	ldreq	r3, [r4, #12]
   33a5e:	60a7      	str	r7, [r4, #8]
   33a60:	bf08      	it	eq
   33a62:	60a3      	streq	r3, [r4, #8]
   33a64:	2d00      	cmp	r5, #0
   33a66:	d0d0      	beq.n	33a0a <bsd_os_trace_irq_handler+0x3a>
   33a68:	2105      	movs	r1, #5
   33a6a:	4630      	mov	r0, r6
   33a6c:	f8ad 5002 	strh.w	r5, [sp, #2]
   33a70:	f010 fb62 	bl	44138 <bsd_os_trace_put>
   33a74:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33a78:	68e0      	ldr	r0, [r4, #12]
   33a7a:	f010 fb5d 	bl	44138 <bsd_os_trace_put>
   33a7e:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33a82:	68e3      	ldr	r3, [r4, #12]
   33a84:	4413      	add	r3, r2
   33a86:	60a3      	str	r3, [r4, #8]
   33a88:	e7bf      	b.n	33a0a <bsd_os_trace_irq_handler+0x3a>
   33a8a:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33a8e:	f8ad 2000 	strh.w	r2, [sp]
   33a92:	7822      	ldrb	r2, [r4, #0]
   33a94:	466e      	mov	r6, sp
   33a96:	f88d 2004 	strb.w	r2, [sp, #4]
   33a9a:	6862      	ldr	r2, [r4, #4]
   33a9c:	2105      	movs	r1, #5
   33a9e:	4293      	cmp	r3, r2
   33aa0:	bf2a      	itet	cs
   33aa2:	6927      	ldrcs	r7, [r4, #16]
   33aa4:	1ad7      	subcc	r7, r2, r3
   33aa6:	1aff      	subcs	r7, r7, r3
   33aa8:	4293      	cmp	r3, r2
   33aaa:	bf94      	ite	ls
   33aac:	2500      	movls	r5, #0
   33aae:	68e5      	ldrhi	r5, [r4, #12]
   33ab0:	b2bf      	uxth	r7, r7
   33ab2:	bf88      	it	hi
   33ab4:	1b52      	subhi	r2, r2, r5
   33ab6:	4630      	mov	r0, r6
   33ab8:	bf88      	it	hi
   33aba:	b295      	uxthhi	r5, r2
   33abc:	f8ad 7002 	strh.w	r7, [sp, #2]
   33ac0:	f010 fb3a 	bl	44138 <bsd_os_trace_put>
   33ac4:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33ac8:	68a0      	ldr	r0, [r4, #8]
   33aca:	f010 fb35 	bl	44138 <bsd_os_trace_put>
   33ace:	68a3      	ldr	r3, [r4, #8]
   33ad0:	6922      	ldr	r2, [r4, #16]
   33ad2:	441f      	add	r7, r3
   33ad4:	4297      	cmp	r7, r2
   33ad6:	bf08      	it	eq
   33ad8:	68e3      	ldreq	r3, [r4, #12]
   33ada:	60a7      	str	r7, [r4, #8]
   33adc:	bf08      	it	eq
   33ade:	60a3      	streq	r3, [r4, #8]
   33ae0:	2d00      	cmp	r5, #0
   33ae2:	d08b      	beq.n	339fc <bsd_os_trace_irq_handler+0x2c>
   33ae4:	2105      	movs	r1, #5
   33ae6:	4630      	mov	r0, r6
   33ae8:	f8ad 5002 	strh.w	r5, [sp, #2]
   33aec:	f010 fb24 	bl	44138 <bsd_os_trace_put>
   33af0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33af4:	68e0      	ldr	r0, [r4, #12]
   33af6:	f010 fb1f 	bl	44138 <bsd_os_trace_put>
   33afa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33afe:	68e3      	ldr	r3, [r4, #12]
   33b00:	4413      	add	r3, r2
   33b02:	60a3      	str	r3, [r4, #8]
   33b04:	e77a      	b.n	339fc <bsd_os_trace_irq_handler+0x2c>
   33b06:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33b0a:	f8ad 2000 	strh.w	r2, [sp]
   33b0e:	7822      	ldrb	r2, [r4, #0]
   33b10:	466e      	mov	r6, sp
   33b12:	f88d 2004 	strb.w	r2, [sp, #4]
   33b16:	6862      	ldr	r2, [r4, #4]
   33b18:	2105      	movs	r1, #5
   33b1a:	4293      	cmp	r3, r2
   33b1c:	bf2a      	itet	cs
   33b1e:	6927      	ldrcs	r7, [r4, #16]
   33b20:	1ad7      	subcc	r7, r2, r3
   33b22:	1aff      	subcs	r7, r7, r3
   33b24:	4293      	cmp	r3, r2
   33b26:	bf94      	ite	ls
   33b28:	2500      	movls	r5, #0
   33b2a:	68e5      	ldrhi	r5, [r4, #12]
   33b2c:	b2bf      	uxth	r7, r7
   33b2e:	bf88      	it	hi
   33b30:	1b52      	subhi	r2, r2, r5
   33b32:	4630      	mov	r0, r6
   33b34:	bf88      	it	hi
   33b36:	b295      	uxthhi	r5, r2
   33b38:	f8ad 7002 	strh.w	r7, [sp, #2]
   33b3c:	f010 fafc 	bl	44138 <bsd_os_trace_put>
   33b40:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33b44:	68a0      	ldr	r0, [r4, #8]
   33b46:	f010 faf7 	bl	44138 <bsd_os_trace_put>
   33b4a:	68a3      	ldr	r3, [r4, #8]
   33b4c:	6922      	ldr	r2, [r4, #16]
   33b4e:	441f      	add	r7, r3
   33b50:	4297      	cmp	r7, r2
   33b52:	bf08      	it	eq
   33b54:	68e3      	ldreq	r3, [r4, #12]
   33b56:	60a7      	str	r7, [r4, #8]
   33b58:	bf08      	it	eq
   33b5a:	60a3      	streq	r3, [r4, #8]
   33b5c:	2d00      	cmp	r5, #0
   33b5e:	f43f af46 	beq.w	339ee <bsd_os_trace_irq_handler+0x1e>
   33b62:	2105      	movs	r1, #5
   33b64:	4630      	mov	r0, r6
   33b66:	f8ad 5002 	strh.w	r5, [sp, #2]
   33b6a:	f010 fae5 	bl	44138 <bsd_os_trace_put>
   33b6e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33b72:	68e0      	ldr	r0, [r4, #12]
   33b74:	f010 fae0 	bl	44138 <bsd_os_trace_put>
   33b78:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33b7c:	68e3      	ldr	r3, [r4, #12]
   33b7e:	4413      	add	r3, r2
   33b80:	60a3      	str	r3, [r4, #8]
   33b82:	e734      	b.n	339ee <bsd_os_trace_irq_handler+0x1e>
   33b84:	f7f5 fed6 	bl	29934 <bsd_os_trace_irq_clear>
   33b88:	e729      	b.n	339de <bsd_os_trace_irq_handler+0xe>
   33b8a:	bf00      	nop
   33b8c:	2002cb0d 	.word	0x2002cb0d
   33b90:	20025508 	.word	0x20025508
   33b94:	20025500 	.word	0x20025500
   33b98:	20025504 	.word	0x20025504

00033b9c <ipc_trace_handle>:
   33b9c:	2200      	movs	r2, #0
   33b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ba2:	4bb2      	ldr	r3, [pc, #712]	; (33e6c <_flash_used+0x78>)
   33ba4:	b083      	sub	sp, #12
   33ba6:	681b      	ldr	r3, [r3, #0]
   33ba8:	6919      	ldr	r1, [r3, #16]
   33baa:	695c      	ldr	r4, [r3, #20]
   33bac:	7c18      	ldrb	r0, [r3, #16]
   33bae:	741a      	strb	r2, [r3, #16]
   33bb0:	7c58      	ldrb	r0, [r3, #17]
   33bb2:	745a      	strb	r2, [r3, #17]
   33bb4:	7c98      	ldrb	r0, [r3, #18]
   33bb6:	749a      	strb	r2, [r3, #18]
   33bb8:	7cd8      	ldrb	r0, [r3, #19]
   33bba:	74da      	strb	r2, [r3, #19]
   33bbc:	7d18      	ldrb	r0, [r3, #20]
   33bbe:	751a      	strb	r2, [r3, #20]
   33bc0:	7d58      	ldrb	r0, [r3, #21]
   33bc2:	755a      	strb	r2, [r3, #21]
   33bc4:	7d98      	ldrb	r0, [r3, #22]
   33bc6:	759a      	strb	r2, [r3, #22]
   33bc8:	7dd8      	ldrb	r0, [r3, #23]
   33bca:	75da      	strb	r2, [r3, #23]
   33bcc:	b1a9      	cbz	r1, 33bfa <ipc_trace_handle+0x5e>
   33bce:	3901      	subs	r1, #1
   33bd0:	2903      	cmp	r1, #3
   33bd2:	d812      	bhi.n	33bfa <ipc_trace_handle+0x5e>
   33bd4:	e8df f001 	tbb	[pc, r1]
   33bd8:	1402a97c 	.word	0x1402a97c
   33bdc:	2501      	movs	r5, #1
   33bde:	2003      	movs	r0, #3
   33be0:	2200      	movs	r2, #0
   33be2:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33be6:	4ca2      	ldr	r4, [pc, #648]	; (33e70 <_flash_used+0x7c>)
   33be8:	7025      	strb	r5, [r4, #0]
   33bea:	7a1c      	ldrb	r4, [r3, #8]
   33bec:	7218      	strb	r0, [r3, #8]
   33bee:	7a58      	ldrb	r0, [r3, #9]
   33bf0:	725a      	strb	r2, [r3, #9]
   33bf2:	7a98      	ldrb	r0, [r3, #10]
   33bf4:	729a      	strb	r2, [r3, #10]
   33bf6:	7ada      	ldrb	r2, [r3, #11]
   33bf8:	72d9      	strb	r1, [r3, #11]
   33bfa:	b003      	add	sp, #12
   33bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33c00:	2104      	movs	r1, #4
   33c02:	2200      	movs	r2, #0
   33c04:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   33c08:	7a1c      	ldrb	r4, [r3, #8]
   33c0a:	7219      	strb	r1, [r3, #8]
   33c0c:	7a59      	ldrb	r1, [r3, #9]
   33c0e:	725a      	strb	r2, [r3, #9]
   33c10:	4997      	ldr	r1, [pc, #604]	; (33e70 <_flash_used+0x7c>)
   33c12:	7a9c      	ldrb	r4, [r3, #10]
   33c14:	729a      	strb	r2, [r3, #10]
   33c16:	7adc      	ldrb	r4, [r3, #11]
   33c18:	72d8      	strb	r0, [r3, #11]
   33c1a:	700a      	strb	r2, [r1, #0]
   33c1c:	780b      	ldrb	r3, [r1, #0]
   33c1e:	2b00      	cmp	r3, #0
   33c20:	f000 809f 	beq.w	33d62 <ipc_trace_handle+0x1c6>
   33c24:	4b93      	ldr	r3, [pc, #588]	; (33e74 <_flash_used+0x80>)
   33c26:	681c      	ldr	r4, [r3, #0]
   33c28:	b124      	cbz	r4, 33c34 <ipc_trace_handle+0x98>
   33c2a:	68a3      	ldr	r3, [r4, #8]
   33c2c:	6862      	ldr	r2, [r4, #4]
   33c2e:	4293      	cmp	r3, r2
   33c30:	f040 80d9 	bne.w	33de6 <ipc_trace_handle+0x24a>
   33c34:	4b90      	ldr	r3, [pc, #576]	; (33e78 <_flash_used+0x84>)
   33c36:	681c      	ldr	r4, [r3, #0]
   33c38:	b124      	cbz	r4, 33c44 <ipc_trace_handle+0xa8>
   33c3a:	68a3      	ldr	r3, [r4, #8]
   33c3c:	6862      	ldr	r2, [r4, #4]
   33c3e:	4293      	cmp	r3, r2
   33c40:	f040 8092 	bne.w	33d68 <ipc_trace_handle+0x1cc>
   33c44:	4b8d      	ldr	r3, [pc, #564]	; (33e7c <_flash_used+0x88>)
   33c46:	681c      	ldr	r4, [r3, #0]
   33c48:	2c00      	cmp	r4, #0
   33c4a:	d0d6      	beq.n	33bfa <ipc_trace_handle+0x5e>
   33c4c:	68a3      	ldr	r3, [r4, #8]
   33c4e:	6862      	ldr	r2, [r4, #4]
   33c50:	4293      	cmp	r3, r2
   33c52:	d0d2      	beq.n	33bfa <ipc_trace_handle+0x5e>
   33c54:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33c58:	f8ad 2000 	strh.w	r2, [sp]
   33c5c:	7822      	ldrb	r2, [r4, #0]
   33c5e:	466e      	mov	r6, sp
   33c60:	f88d 2004 	strb.w	r2, [sp, #4]
   33c64:	6862      	ldr	r2, [r4, #4]
   33c66:	2105      	movs	r1, #5
   33c68:	4293      	cmp	r3, r2
   33c6a:	bf2a      	itet	cs
   33c6c:	6927      	ldrcs	r7, [r4, #16]
   33c6e:	1ad7      	subcc	r7, r2, r3
   33c70:	1aff      	subcs	r7, r7, r3
   33c72:	4293      	cmp	r3, r2
   33c74:	bf94      	ite	ls
   33c76:	2500      	movls	r5, #0
   33c78:	68e5      	ldrhi	r5, [r4, #12]
   33c7a:	b2bf      	uxth	r7, r7
   33c7c:	bf88      	it	hi
   33c7e:	1b52      	subhi	r2, r2, r5
   33c80:	4630      	mov	r0, r6
   33c82:	bf88      	it	hi
   33c84:	b295      	uxthhi	r5, r2
   33c86:	f8ad 7002 	strh.w	r7, [sp, #2]
   33c8a:	f010 fa55 	bl	44138 <bsd_os_trace_put>
   33c8e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33c92:	68a0      	ldr	r0, [r4, #8]
   33c94:	f010 fa50 	bl	44138 <bsd_os_trace_put>
   33c98:	68a3      	ldr	r3, [r4, #8]
   33c9a:	6922      	ldr	r2, [r4, #16]
   33c9c:	441f      	add	r7, r3
   33c9e:	4297      	cmp	r7, r2
   33ca0:	bf08      	it	eq
   33ca2:	68e3      	ldreq	r3, [r4, #12]
   33ca4:	60a7      	str	r7, [r4, #8]
   33ca6:	bf08      	it	eq
   33ca8:	60a3      	streq	r3, [r4, #8]
   33caa:	2d00      	cmp	r5, #0
   33cac:	d0a5      	beq.n	33bfa <ipc_trace_handle+0x5e>
   33cae:	2105      	movs	r1, #5
   33cb0:	4630      	mov	r0, r6
   33cb2:	f8ad 5002 	strh.w	r5, [sp, #2]
   33cb6:	f010 fa3f 	bl	44138 <bsd_os_trace_put>
   33cba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33cbe:	68e0      	ldr	r0, [r4, #12]
   33cc0:	f010 fa3a 	bl	44138 <bsd_os_trace_put>
   33cc4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33cc8:	68e3      	ldr	r3, [r4, #12]
   33cca:	4413      	add	r3, r2
   33ccc:	60a3      	str	r3, [r4, #8]
   33cce:	e794      	b.n	33bfa <ipc_trace_handle+0x5e>
   33cd0:	4a67      	ldr	r2, [pc, #412]	; (33e70 <_flash_used+0x7c>)
   33cd2:	7811      	ldrb	r1, [r2, #0]
   33cd4:	b109      	cbz	r1, 33cda <ipc_trace_handle+0x13e>
   33cd6:	2100      	movs	r1, #0
   33cd8:	7011      	strb	r1, [r2, #0]
   33cda:	68a5      	ldr	r5, [r4, #8]
   33cdc:	2d00      	cmp	r5, #0
   33cde:	d03b      	beq.n	33d58 <ipc_trace_handle+0x1bc>
   33ce0:	f04f 0c00 	mov.w	ip, #0
   33ce4:	f8df a190 	ldr.w	sl, [pc, #400]	; 33e78 <_flash_used+0x84>
   33ce8:	f8df b188 	ldr.w	fp, [pc, #392]	; 33e74 <_flash_used+0x80>
   33cec:	4963      	ldr	r1, [pc, #396]	; (33e7c <_flash_used+0x88>)
   33cee:	46e1      	mov	r9, ip
   33cf0:	4666      	mov	r6, ip
   33cf2:	4662      	mov	r2, ip
   33cf4:	f8d1 e000 	ldr.w	lr, [r1]
   33cf8:	f8da 8000 	ldr.w	r8, [sl]
   33cfc:	f8db 7000 	ldr.w	r7, [fp]
   33d00:	e008      	b.n	33d14 <ipc_trace_handle+0x178>
   33d02:	2963      	cmp	r1, #99	; 0x63
   33d04:	d016      	beq.n	33d34 <ipc_trace_handle+0x198>
   33d06:	2961      	cmp	r1, #97	; 0x61
   33d08:	bf04      	itt	eq
   33d0a:	4607      	moveq	r7, r0
   33d0c:	2601      	moveq	r6, #1
   33d0e:	3201      	adds	r2, #1
   33d10:	42aa      	cmp	r2, r5
   33d12:	d013      	beq.n	33d3c <ipc_trace_handle+0x1a0>
   33d14:	1c91      	adds	r1, r2, #2
   33d16:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   33d1a:	6848      	ldr	r0, [r1, #4]
   33d1c:	7801      	ldrb	r1, [r0, #0]
   33d1e:	2962      	cmp	r1, #98	; 0x62
   33d20:	d1ef      	bne.n	33d02 <ipc_trace_handle+0x166>
   33d22:	4680      	mov	r8, r0
   33d24:	f04f 0901 	mov.w	r9, #1
   33d28:	e7f1      	b.n	33d0e <ipc_trace_handle+0x172>
   33d2a:	f7f5 fdfb 	bl	29924 <bsd_os_trace_irq_set>
   33d2e:	b003      	add	sp, #12
   33d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d34:	4686      	mov	lr, r0
   33d36:	f04f 0c01 	mov.w	ip, #1
   33d3a:	e7e8      	b.n	33d0e <ipc_trace_handle+0x172>
   33d3c:	2e00      	cmp	r6, #0
   33d3e:	f040 8091 	bne.w	33e64 <_flash_used+0x70>
   33d42:	f1b9 0f00 	cmp.w	r9, #0
   33d46:	d001      	beq.n	33d4c <ipc_trace_handle+0x1b0>
   33d48:	f8ca 8000 	str.w	r8, [sl]
   33d4c:	f1bc 0f00 	cmp.w	ip, #0
   33d50:	d002      	beq.n	33d58 <ipc_trace_handle+0x1bc>
   33d52:	4a4a      	ldr	r2, [pc, #296]	; (33e7c <_flash_used+0x88>)
   33d54:	f8c2 e000 	str.w	lr, [r2]
   33d58:	2001      	movs	r0, #1
   33d5a:	2200      	movs	r2, #0
   33d5c:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   33d60:	e743      	b.n	33bea <ipc_trace_handle+0x4e>
   33d62:	f7f5 fde7 	bl	29934 <bsd_os_trace_irq_clear>
   33d66:	e75d      	b.n	33c24 <ipc_trace_handle+0x88>
   33d68:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33d6c:	f8ad 2000 	strh.w	r2, [sp]
   33d70:	7822      	ldrb	r2, [r4, #0]
   33d72:	466e      	mov	r6, sp
   33d74:	f88d 2004 	strb.w	r2, [sp, #4]
   33d78:	6862      	ldr	r2, [r4, #4]
   33d7a:	2105      	movs	r1, #5
   33d7c:	4293      	cmp	r3, r2
   33d7e:	bf2a      	itet	cs
   33d80:	6927      	ldrcs	r7, [r4, #16]
   33d82:	1ad7      	subcc	r7, r2, r3
   33d84:	1aff      	subcs	r7, r7, r3
   33d86:	4293      	cmp	r3, r2
   33d88:	bf94      	ite	ls
   33d8a:	2500      	movls	r5, #0
   33d8c:	68e5      	ldrhi	r5, [r4, #12]
   33d8e:	b2bf      	uxth	r7, r7
   33d90:	bf88      	it	hi
   33d92:	1b52      	subhi	r2, r2, r5
   33d94:	4630      	mov	r0, r6
   33d96:	bf88      	it	hi
   33d98:	b295      	uxthhi	r5, r2
   33d9a:	f8ad 7002 	strh.w	r7, [sp, #2]
   33d9e:	f010 f9cb 	bl	44138 <bsd_os_trace_put>
   33da2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33da6:	68a0      	ldr	r0, [r4, #8]
   33da8:	f010 f9c6 	bl	44138 <bsd_os_trace_put>
   33dac:	68a3      	ldr	r3, [r4, #8]
   33dae:	6922      	ldr	r2, [r4, #16]
   33db0:	441f      	add	r7, r3
   33db2:	4297      	cmp	r7, r2
   33db4:	bf08      	it	eq
   33db6:	68e3      	ldreq	r3, [r4, #12]
   33db8:	60a7      	str	r7, [r4, #8]
   33dba:	bf08      	it	eq
   33dbc:	60a3      	streq	r3, [r4, #8]
   33dbe:	2d00      	cmp	r5, #0
   33dc0:	f43f af40 	beq.w	33c44 <ipc_trace_handle+0xa8>
   33dc4:	2105      	movs	r1, #5
   33dc6:	4630      	mov	r0, r6
   33dc8:	f8ad 5002 	strh.w	r5, [sp, #2]
   33dcc:	f010 f9b4 	bl	44138 <bsd_os_trace_put>
   33dd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33dd4:	68e0      	ldr	r0, [r4, #12]
   33dd6:	f010 f9af 	bl	44138 <bsd_os_trace_put>
   33dda:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33dde:	68e3      	ldr	r3, [r4, #12]
   33de0:	4413      	add	r3, r2
   33de2:	60a3      	str	r3, [r4, #8]
   33de4:	e72e      	b.n	33c44 <ipc_trace_handle+0xa8>
   33de6:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   33dea:	f8ad 2000 	strh.w	r2, [sp]
   33dee:	7822      	ldrb	r2, [r4, #0]
   33df0:	466e      	mov	r6, sp
   33df2:	f88d 2004 	strb.w	r2, [sp, #4]
   33df6:	6862      	ldr	r2, [r4, #4]
   33df8:	2105      	movs	r1, #5
   33dfa:	4293      	cmp	r3, r2
   33dfc:	bf2a      	itet	cs
   33dfe:	6927      	ldrcs	r7, [r4, #16]
   33e00:	1ad7      	subcc	r7, r2, r3
   33e02:	1aff      	subcs	r7, r7, r3
   33e04:	4293      	cmp	r3, r2
   33e06:	bf94      	ite	ls
   33e08:	2500      	movls	r5, #0
   33e0a:	68e5      	ldrhi	r5, [r4, #12]
   33e0c:	b2bf      	uxth	r7, r7
   33e0e:	bf88      	it	hi
   33e10:	1b52      	subhi	r2, r2, r5
   33e12:	4630      	mov	r0, r6
   33e14:	bf88      	it	hi
   33e16:	b295      	uxthhi	r5, r2
   33e18:	f8ad 7002 	strh.w	r7, [sp, #2]
   33e1c:	f010 f98c 	bl	44138 <bsd_os_trace_put>
   33e20:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33e24:	68a0      	ldr	r0, [r4, #8]
   33e26:	f010 f987 	bl	44138 <bsd_os_trace_put>
   33e2a:	68a3      	ldr	r3, [r4, #8]
   33e2c:	6922      	ldr	r2, [r4, #16]
   33e2e:	441f      	add	r7, r3
   33e30:	4297      	cmp	r7, r2
   33e32:	bf08      	it	eq
   33e34:	68e3      	ldreq	r3, [r4, #12]
   33e36:	60a7      	str	r7, [r4, #8]
   33e38:	bf08      	it	eq
   33e3a:	60a3      	streq	r3, [r4, #8]
   33e3c:	2d00      	cmp	r5, #0
   33e3e:	f43f aef9 	beq.w	33c34 <ipc_trace_handle+0x98>
   33e42:	2105      	movs	r1, #5
   33e44:	4630      	mov	r0, r6
   33e46:	f8ad 5002 	strh.w	r5, [sp, #2]
   33e4a:	f010 f975 	bl	44138 <bsd_os_trace_put>
   33e4e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   33e52:	68e0      	ldr	r0, [r4, #12]
   33e54:	f010 f970 	bl	44138 <bsd_os_trace_put>
   33e58:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   33e5c:	68e3      	ldr	r3, [r4, #12]
   33e5e:	4413      	add	r3, r2
   33e60:	60a3      	str	r3, [r4, #8]
   33e62:	e6e7      	b.n	33c34 <ipc_trace_handle+0x98>
   33e64:	f8cb 7000 	str.w	r7, [fp]
   33e68:	e76b      	b.n	33d42 <ipc_trace_handle+0x1a6>
   33e6a:	bf00      	nop
   33e6c:	2002550c 	.word	0x2002550c
   33e70:	2002cb0d 	.word	0x2002cb0d
   33e74:	20025508 	.word	0x20025508
   33e78:	20025500 	.word	0x20025500
   33e7c:	20025504 	.word	0x20025504

00033e80 <rpc_trace_coredump_in_progress>:
   33e80:	4b01      	ldr	r3, [pc, #4]	; (33e88 <rpc_trace_coredump_in_progress+0x8>)
   33e82:	7818      	ldrb	r0, [r3, #0]
   33e84:	4770      	bx	lr
   33e86:	bf00      	nop
   33e88:	2002cb0d 	.word	0x2002cb0d

00033e8c <rpc_transport_ipc_data_free>:
   33e8c:	b510      	push	{r4, lr}
   33e8e:	4b0e      	ldr	r3, [pc, #56]	; (33ec8 <rpc_transport_ipc_data_free+0x3c>)
   33e90:	4604      	mov	r4, r0
   33e92:	e9d3 2300 	ldrd	r2, r3, [r3]
   33e96:	4413      	add	r3, r2
   33e98:	4298      	cmp	r0, r3
   33e9a:	d20d      	bcs.n	33eb8 <rpc_transport_ipc_data_free+0x2c>
   33e9c:	4282      	cmp	r2, r0
   33e9e:	d80b      	bhi.n	33eb8 <rpc_transport_ipc_data_free+0x2c>
   33ea0:	f000 fd24 	bl	348ec <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   33ea4:	b158      	cbz	r0, 33ebe <rpc_transport_ipc_data_free+0x32>
   33ea6:	4a09      	ldr	r2, [pc, #36]	; (33ecc <rpc_transport_ipc_data_free+0x40>)
   33ea8:	6084      	str	r4, [r0, #8]
   33eaa:	6002      	str	r2, [r0, #0]
   33eac:	f7ff fd80 	bl	339b0 <rpc_transport_send>
   33eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33eb4:	f7f5 bd26 	b.w	29904 <bsd_os_application_irq_set>
   33eb8:	4620      	mov	r0, r4
   33eba:	f007 f827 	bl	3af0c <nrf_shared_free>
   33ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33ec2:	f7f5 bd1f 	b.w	29904 <bsd_os_application_irq_set>
   33ec6:	bf00      	nop
   33ec8:	20025510 	.word	0x20025510
   33ecc:	00020001 	.word	0x00020001

00033ed0 <rpc_transport_ipc_init>:
   33ed0:	b188      	cbz	r0, 33ef6 <rpc_transport_ipc_init+0x26>
   33ed2:	b510      	push	{r4, lr}
   33ed4:	b082      	sub	sp, #8
   33ed6:	aa01      	add	r2, sp, #4
   33ed8:	4669      	mov	r1, sp
   33eda:	4604      	mov	r4, r0
   33edc:	f000 fb62 	bl	345a4 <rpc_transport_ipc_tx_init>
   33ee0:	4602      	mov	r2, r0
   33ee2:	b148      	cbz	r0, 33ef8 <rpc_transport_ipc_init+0x28>
   33ee4:	4b12      	ldr	r3, [pc, #72]	; (33f30 <rpc_transport_ipc_init+0x60>)
   33ee6:	3428      	adds	r4, #40	; 0x28
   33ee8:	e894 0003 	ldmia.w	r4, {r0, r1}
   33eec:	e883 0003 	stmia.w	r3, {r0, r1}
   33ef0:	4610      	mov	r0, r2
   33ef2:	b002      	add	sp, #8
   33ef4:	bd10      	pop	{r4, pc}
   33ef6:	e7fe      	b.n	33ef6 <rpc_transport_ipc_init+0x26>
   33ef8:	e9dd 1200 	ldrd	r1, r2, [sp]
   33efc:	4620      	mov	r0, r4
   33efe:	f000 f9ef 	bl	342e0 <rpc_transport_ipc_rx_init>
   33f02:	4602      	mov	r2, r0
   33f04:	4b0a      	ldr	r3, [pc, #40]	; (33f30 <rpc_transport_ipc_init+0x60>)
   33f06:	f104 0128 	add.w	r1, r4, #40	; 0x28
   33f0a:	c903      	ldmia	r1, {r0, r1}
   33f0c:	e883 0003 	stmia.w	r3, {r0, r1}
   33f10:	2a00      	cmp	r2, #0
   33f12:	d1ed      	bne.n	33ef0 <rpc_transport_ipc_init+0x20>
   33f14:	f44f 6080 	mov.w	r0, #1024	; 0x400
   33f18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   33f1a:	4906      	ldr	r1, [pc, #24]	; (33f34 <rpc_transport_ipc_init+0x64>)
   33f1c:	015b      	lsls	r3, r3, #5
   33f1e:	b2db      	uxtb	r3, r3
   33f20:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   33f24:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   33f28:	6048      	str	r0, [r1, #4]
   33f2a:	4610      	mov	r0, r2
   33f2c:	b002      	add	sp, #8
   33f2e:	bd10      	pop	{r4, pc}
   33f30:	20025510 	.word	0x20025510
   33f34:	e000e100 	.word	0xe000e100

00033f38 <rpc_transport_ipc_shutdown>:
   33f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f3c:	b08c      	sub	sp, #48	; 0x30
   33f3e:	f000 fd0f 	bl	34960 <rpc_transport_ipc_tx_suspend>
   33f42:	2200      	movs	r2, #0
   33f44:	2010      	movs	r0, #16
   33f46:	4b31      	ldr	r3, [pc, #196]	; (3400c <rpc_transport_ipc_shutdown+0xd4>)
   33f48:	f04f 0c01 	mov.w	ip, #1
   33f4c:	4c30      	ldr	r4, [pc, #192]	; (34010 <rpc_transport_ipc_shutdown+0xd8>)
   33f4e:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   33f52:	6821      	ldr	r1, [r4, #0]
   33f54:	2704      	movs	r7, #4
   33f56:	910a      	str	r1, [sp, #40]	; 0x28
   33f58:	492e      	ldr	r1, [pc, #184]	; (34014 <rpc_transport_ipc_shutdown+0xdc>)
   33f5a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   33f5c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   33f60:	680d      	ldr	r5, [r1, #0]
   33f62:	950b      	str	r5, [sp, #44]	; 0x2c
   33f64:	4d2c      	ldr	r5, [pc, #176]	; (34018 <rpc_transport_ipc_shutdown+0xe0>)
   33f66:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   33f68:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   33f6c:	682d      	ldr	r5, [r5, #0]
   33f6e:	2640      	movs	r6, #64	; 0x40
   33f70:	9509      	str	r5, [sp, #36]	; 0x24
   33f72:	4d2a      	ldr	r5, [pc, #168]	; (3401c <rpc_transport_ipc_shutdown+0xe4>)
   33f74:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   33f78:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   33f7c:	f8d5 e000 	ldr.w	lr, [r5]
   33f80:	2580      	movs	r5, #128	; 0x80
   33f82:	f8cd e020 	str.w	lr, [sp, #32]
   33f86:	f8dd e020 	ldr.w	lr, [sp, #32]
   33f8a:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   33f8e:	f8d4 e000 	ldr.w	lr, [r4]
   33f92:	2405      	movs	r4, #5
   33f94:	f8cd e01c 	str.w	lr, [sp, #28]
   33f98:	f8df e08c 	ldr.w	lr, [pc, #140]	; 34028 <rpc_transport_ipc_shutdown+0xf0>
   33f9c:	f8dd 801c 	ldr.w	r8, [sp, #28]
   33fa0:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   33fa4:	f8de e000 	ldr.w	lr, [lr]
   33fa8:	f8cd e018 	str.w	lr, [sp, #24]
   33fac:	f8df e07c 	ldr.w	lr, [pc, #124]	; 3402c <rpc_transport_ipc_shutdown+0xf4>
   33fb0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   33fb4:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   33fb8:	f8de e000 	ldr.w	lr, [lr]
   33fbc:	f8cd e014 	str.w	lr, [sp, #20]
   33fc0:	f8dd e014 	ldr.w	lr, [sp, #20]
   33fc4:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   33fc8:	f8d1 c000 	ldr.w	ip, [r1]
   33fcc:	f8cd c010 	str.w	ip, [sp, #16]
   33fd0:	f8dd c010 	ldr.w	ip, [sp, #16]
   33fd4:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   33fd8:	680f      	ldr	r7, [r1, #0]
   33fda:	9703      	str	r7, [sp, #12]
   33fdc:	9f03      	ldr	r7, [sp, #12]
   33fde:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   33fe2:	6808      	ldr	r0, [r1, #0]
   33fe4:	9002      	str	r0, [sp, #8]
   33fe6:	9802      	ldr	r0, [sp, #8]
   33fe8:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   33fec:	680e      	ldr	r6, [r1, #0]
   33fee:	480c      	ldr	r0, [pc, #48]	; (34020 <rpc_transport_ipc_shutdown+0xe8>)
   33ff0:	9601      	str	r6, [sp, #4]
   33ff2:	9e01      	ldr	r6, [sp, #4]
   33ff4:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   33ff8:	6809      	ldr	r1, [r1, #0]
   33ffa:	4b0a      	ldr	r3, [pc, #40]	; (34024 <rpc_transport_ipc_shutdown+0xec>)
   33ffc:	9100      	str	r1, [sp, #0]
   33ffe:	9900      	ldr	r1, [sp, #0]
   34000:	8002      	strh	r2, [r0, #0]
   34002:	601c      	str	r4, [r3, #0]
   34004:	b00c      	add	sp, #48	; 0x30
   34006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3400a:	bf00      	nop
   3400c:	4002a000 	.word	0x4002a000
   34010:	4002a5a0 	.word	0x4002a5a0
   34014:	4002a308 	.word	0x4002a308
   34018:	4002a590 	.word	0x4002a590
   3401c:	4002a598 	.word	0x4002a598
   34020:	2002a390 	.word	0x2002a390
   34024:	20025528 	.word	0x20025528
   34028:	4002a5a8 	.word	0x4002a5a8
   3402c:	4002a5ac 	.word	0x4002a5ac

00034030 <bsd_os_application_irq_handler>:
   34030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34034:	f7f5 fc6e 	bl	29914 <bsd_os_application_irq_clear>
   34038:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 34110 <bsd_os_application_irq_handler+0xe0>
   3403c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 34114 <bsd_os_application_irq_handler+0xe4>
   34040:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 34118 <bsd_os_application_irq_handler+0xe8>
   34044:	f108 0908 	add.w	r9, r8, #8
   34048:	f858 7b04 	ldr.w	r7, [r8], #4
   3404c:	6839      	ldr	r1, [r7, #0]
   3404e:	b361      	cbz	r1, 340aa <bsd_os_application_irq_handler+0x7a>
   34050:	2400      	movs	r4, #0
   34052:	e002      	b.n	3405a <bsd_os_application_irq_handler+0x2a>
   34054:	3401      	adds	r4, #1
   34056:	428c      	cmp	r4, r1
   34058:	d227      	bcs.n	340aa <bsd_os_application_irq_handler+0x7a>
   3405a:	00e6      	lsls	r6, r4, #3
   3405c:	19bd      	adds	r5, r7, r6
   3405e:	68aa      	ldr	r2, [r5, #8]
   34060:	2a00      	cmp	r2, #0
   34062:	d0f7      	beq.n	34054 <bsd_os_application_irq_handler+0x24>
   34064:	686a      	ldr	r2, [r5, #4]
   34066:	b2d2      	uxtb	r2, r2
   34068:	2a01      	cmp	r2, #1
   3406a:	d1f3      	bne.n	34054 <bsd_os_application_irq_handler+0x24>
   3406c:	6868      	ldr	r0, [r5, #4]
   3406e:	f8bb 2000 	ldrh.w	r2, [fp]
   34072:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   34076:	d1ed      	bne.n	34054 <bsd_os_application_irq_handler+0x24>
   34078:	68a8      	ldr	r0, [r5, #8]
   3407a:	6841      	ldr	r1, [r0, #4]
   3407c:	b2c9      	uxtb	r1, r1
   3407e:	2902      	cmp	r1, #2
   34080:	d02c      	beq.n	340dc <bsd_os_application_irq_handler+0xac>
   34082:	2901      	cmp	r1, #1
   34084:	d015      	beq.n	340b2 <bsd_os_application_irq_handler+0x82>
   34086:	3604      	adds	r6, #4
   34088:	59b9      	ldr	r1, [r7, r6]
   3408a:	3201      	adds	r2, #1
   3408c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   34090:	f041 0103 	orr.w	r1, r1, #3
   34094:	51b9      	str	r1, [r7, r6]
   34096:	f8ab 2000 	strh.w	r2, [fp]
   3409a:	f7f5 fc33 	bl	29904 <bsd_os_application_irq_set>
   3409e:	f858 7c04 	ldr.w	r7, [r8, #-4]
   340a2:	3401      	adds	r4, #1
   340a4:	6839      	ldr	r1, [r7, #0]
   340a6:	428c      	cmp	r4, r1
   340a8:	d3d7      	bcc.n	3405a <bsd_os_application_irq_handler+0x2a>
   340aa:	45c1      	cmp	r9, r8
   340ac:	d1cc      	bne.n	34048 <bsd_os_application_irq_handler+0x18>
   340ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   340b2:	6801      	ldr	r1, [r0, #0]
   340b4:	0c09      	lsrs	r1, r1, #16
   340b6:	f002 ff87 	bl	36fc8 <rpc_handle_ctrl_message>
   340ba:	2801      	cmp	r0, #1
   340bc:	d014      	beq.n	340e8 <bsd_os_application_irq_handler+0xb8>
   340be:	d310      	bcc.n	340e2 <bsd_os_application_irq_handler+0xb2>
   340c0:	2802      	cmp	r0, #2
   340c2:	d007      	beq.n	340d4 <bsd_os_application_irq_handler+0xa4>
   340c4:	2203      	movs	r2, #3
   340c6:	4b11      	ldr	r3, [pc, #68]	; (3410c <bsd_os_application_irq_handler+0xdc>)
   340c8:	4610      	mov	r0, r2
   340ca:	f8ca 2000 	str.w	r2, [sl]
   340ce:	601a      	str	r2, [r3, #0]
   340d0:	f005 fbf0 	bl	398b4 <rpc_transport_ipc_fault_handler>
   340d4:	f858 7c04 	ldr.w	r7, [r8, #-4]
   340d8:	6839      	ldr	r1, [r7, #0]
   340da:	e7bb      	b.n	34054 <bsd_os_application_irq_handler+0x24>
   340dc:	f002 ff8c 	bl	36ff8 <rpc_handle_data_message>
   340e0:	e7eb      	b.n	340ba <bsd_os_application_irq_handler+0x8a>
   340e2:	f8bb 2000 	ldrh.w	r2, [fp]
   340e6:	e7ce      	b.n	34086 <bsd_os_application_irq_handler+0x56>
   340e8:	686a      	ldr	r2, [r5, #4]
   340ea:	f8bb 1000 	ldrh.w	r1, [fp]
   340ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   340f2:	f042 0202 	orr.w	r2, r2, #2
   340f6:	606a      	str	r2, [r5, #4]
   340f8:	1c4a      	adds	r2, r1, #1
   340fa:	f8ab 2000 	strh.w	r2, [fp]
   340fe:	f7f5 fc01 	bl	29904 <bsd_os_application_irq_set>
   34102:	f858 7c04 	ldr.w	r7, [r8, #-4]
   34106:	6839      	ldr	r1, [r7, #0]
   34108:	e7a4      	b.n	34054 <bsd_os_application_irq_handler+0x24>
   3410a:	bf00      	nop
   3410c:	20025518 	.word	0x20025518
   34110:	20025520 	.word	0x20025520
   34114:	2002a390 	.word	0x2002a390
   34118:	20025528 	.word	0x20025528

0003411c <IPC_IRQHandler>:
   3411c:	b570      	push	{r4, r5, r6, lr}
   3411e:	f44f 6680 	mov.w	r6, #1024	; 0x400
   34122:	4d62      	ldr	r5, [pc, #392]	; (342ac <IPC_IRQHandler+0x190>)
   34124:	4c62      	ldr	r4, [pc, #392]	; (342b0 <IPC_IRQHandler+0x194>)
   34126:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   3412a:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   3412e:	b086      	sub	sp, #24
   34130:	061b      	lsls	r3, r3, #24
   34132:	d50b      	bpl.n	3414c <IPC_IRQHandler+0x30>
   34134:	f7ff fd32 	bl	33b9c <ipc_trace_handle>
   34138:	f7ff fea2 	bl	33e80 <rpc_trace_coredump_in_progress>
   3413c:	2800      	cmp	r0, #0
   3413e:	d151      	bne.n	341e4 <IPC_IRQHandler+0xc8>
   34140:	4b5c      	ldr	r3, [pc, #368]	; (342b4 <IPC_IRQHandler+0x198>)
   34142:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   34146:	681b      	ldr	r3, [r3, #0]
   34148:	9301      	str	r3, [sp, #4]
   3414a:	9b01      	ldr	r3, [sp, #4]
   3414c:	4b58      	ldr	r3, [pc, #352]	; (342b0 <IPC_IRQHandler+0x194>)
   3414e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   34152:	f012 0201 	ands.w	r2, r2, #1
   34156:	d11c      	bne.n	34192 <IPC_IRQHandler+0x76>
   34158:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   3415c:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   34160:	d145      	bne.n	341ee <IPC_IRQHandler+0xd2>
   34162:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   34166:	0750      	lsls	r0, r2, #29
   34168:	d50c      	bpl.n	34184 <IPC_IRQHandler+0x68>
   3416a:	4a53      	ldr	r2, [pc, #332]	; (342b8 <IPC_IRQHandler+0x19c>)
   3416c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   34170:	6812      	ldr	r2, [r2, #0]
   34172:	4b52      	ldr	r3, [pc, #328]	; (342bc <IPC_IRQHandler+0x1a0>)
   34174:	9204      	str	r2, [sp, #16]
   34176:	9a04      	ldr	r2, [sp, #16]
   34178:	681a      	ldr	r2, [r3, #0]
   3417a:	2a02      	cmp	r2, #2
   3417c:	d079      	beq.n	34272 <IPC_IRQHandler+0x156>
   3417e:	681a      	ldr	r2, [r3, #0]
   34180:	2a01      	cmp	r2, #1
   34182:	d05b      	beq.n	3423c <IPC_IRQHandler+0x120>
   34184:	4b4a      	ldr	r3, [pc, #296]	; (342b0 <IPC_IRQHandler+0x194>)
   34186:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   3418a:	06d2      	lsls	r2, r2, #27
   3418c:	d41e      	bmi.n	341cc <IPC_IRQHandler+0xb0>
   3418e:	b006      	add	sp, #24
   34190:	bd70      	pop	{r4, r5, r6, pc}
   34192:	2000      	movs	r0, #0
   34194:	f248 0202 	movw	r2, #32770	; 0x8002
   34198:	4949      	ldr	r1, [pc, #292]	; (342c0 <IPC_IRQHandler+0x1a4>)
   3419a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   3419e:	6809      	ldr	r1, [r1, #0]
   341a0:	9102      	str	r1, [sp, #8]
   341a2:	9902      	ldr	r1, [sp, #8]
   341a4:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   341a8:	4293      	cmp	r3, r2
   341aa:	d06b      	beq.n	34284 <IPC_IRQHandler+0x168>
   341ac:	d82a      	bhi.n	34204 <IPC_IRQHandler+0xe8>
   341ae:	2b00      	cmp	r3, #0
   341b0:	d062      	beq.n	34278 <IPC_IRQHandler+0x15c>
   341b2:	2b02      	cmp	r3, #2
   341b4:	d937      	bls.n	34226 <IPC_IRQHandler+0x10a>
   341b6:	f248 0201 	movw	r2, #32769	; 0x8001
   341ba:	4293      	cmp	r3, r2
   341bc:	d15c      	bne.n	34278 <IPC_IRQHandler+0x15c>
   341be:	2003      	movs	r0, #3
   341c0:	2207      	movs	r2, #7
   341c2:	493e      	ldr	r1, [pc, #248]	; (342bc <IPC_IRQHandler+0x1a0>)
   341c4:	4b3f      	ldr	r3, [pc, #252]	; (342c4 <IPC_IRQHandler+0x1a8>)
   341c6:	6008      	str	r0, [r1, #0]
   341c8:	601a      	str	r2, [r3, #0]
   341ca:	e7e0      	b.n	3418e <IPC_IRQHandler+0x72>
   341cc:	2100      	movs	r1, #0
   341ce:	4a3e      	ldr	r2, [pc, #248]	; (342c8 <IPC_IRQHandler+0x1ac>)
   341d0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   341d4:	6813      	ldr	r3, [r2, #0]
   341d6:	9305      	str	r3, [sp, #20]
   341d8:	9b05      	ldr	r3, [sp, #20]
   341da:	b006      	add	sp, #24
   341dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   341e0:	f7f5 bb90 	b.w	29904 <bsd_os_application_irq_set>
   341e4:	23e0      	movs	r3, #224	; 0xe0
   341e6:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   341ea:	606e      	str	r6, [r5, #4]
   341ec:	e7cf      	b.n	3418e <IPC_IRQHandler+0x72>
   341ee:	4937      	ldr	r1, [pc, #220]	; (342cc <IPC_IRQHandler+0x1b0>)
   341f0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   341f4:	680b      	ldr	r3, [r1, #0]
   341f6:	9303      	str	r3, [sp, #12]
   341f8:	9b03      	ldr	r3, [sp, #12]
   341fa:	b006      	add	sp, #24
   341fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34200:	f7ff be9a 	b.w	33f38 <rpc_transport_ipc_shutdown>
   34204:	4a32      	ldr	r2, [pc, #200]	; (342d0 <IPC_IRQHandler+0x1b4>)
   34206:	4293      	cmp	r3, r2
   34208:	d82a      	bhi.n	34260 <IPC_IRQHandler+0x144>
   3420a:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   3420e:	d82a      	bhi.n	34266 <IPC_IRQHandler+0x14a>
   34210:	f248 0203 	movw	r2, #32771	; 0x8003
   34214:	4293      	cmp	r3, r2
   34216:	d12f      	bne.n	34278 <IPC_IRQHandler+0x15c>
   34218:	2003      	movs	r0, #3
   3421a:	2204      	movs	r2, #4
   3421c:	4927      	ldr	r1, [pc, #156]	; (342bc <IPC_IRQHandler+0x1a0>)
   3421e:	4b29      	ldr	r3, [pc, #164]	; (342c4 <IPC_IRQHandler+0x1a8>)
   34220:	6008      	str	r0, [r1, #0]
   34222:	601a      	str	r2, [r3, #0]
   34224:	e7b3      	b.n	3418e <IPC_IRQHandler+0x72>
   34226:	2303      	movs	r3, #3
   34228:	4618      	mov	r0, r3
   3422a:	4924      	ldr	r1, [pc, #144]	; (342bc <IPC_IRQHandler+0x1a0>)
   3422c:	4a25      	ldr	r2, [pc, #148]	; (342c4 <IPC_IRQHandler+0x1a8>)
   3422e:	600b      	str	r3, [r1, #0]
   34230:	6013      	str	r3, [r2, #0]
   34232:	b006      	add	sp, #24
   34234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   34238:	f005 bb3c 	b.w	398b4 <rpc_transport_ipc_fault_handler>
   3423c:	4a25      	ldr	r2, [pc, #148]	; (342d4 <IPC_IRQHandler+0x1b8>)
   3423e:	4826      	ldr	r0, [pc, #152]	; (342d8 <IPC_IRQHandler+0x1bc>)
   34240:	6811      	ldr	r1, [r2, #0]
   34242:	688a      	ldr	r2, [r1, #8]
   34244:	6002      	str	r2, [r0, #0]
   34246:	6849      	ldr	r1, [r1, #4]
   34248:	6041      	str	r1, [r0, #4]
   3424a:	b312      	cbz	r2, 34292 <IPC_IRQHandler+0x176>
   3424c:	b309      	cbz	r1, 34292 <IPC_IRQHandler+0x176>
   3424e:	6812      	ldr	r2, [r2, #0]
   34250:	2a10      	cmp	r2, #16
   34252:	d824      	bhi.n	3429e <IPC_IRQHandler+0x182>
   34254:	680a      	ldr	r2, [r1, #0]
   34256:	2a10      	cmp	r2, #16
   34258:	d821      	bhi.n	3429e <IPC_IRQHandler+0x182>
   3425a:	2202      	movs	r2, #2
   3425c:	601a      	str	r2, [r3, #0]
   3425e:	e791      	b.n	34184 <IPC_IRQHandler+0x68>
   34260:	4a1e      	ldr	r2, [pc, #120]	; (342dc <IPC_IRQHandler+0x1c0>)
   34262:	4293      	cmp	r3, r2
   34264:	d108      	bne.n	34278 <IPC_IRQHandler+0x15c>
   34266:	2003      	movs	r0, #3
   34268:	4914      	ldr	r1, [pc, #80]	; (342bc <IPC_IRQHandler+0x1a0>)
   3426a:	4a16      	ldr	r2, [pc, #88]	; (342c4 <IPC_IRQHandler+0x1a8>)
   3426c:	6008      	str	r0, [r1, #0]
   3426e:	6013      	str	r3, [r2, #0]
   34270:	e78d      	b.n	3418e <IPC_IRQHandler+0x72>
   34272:	f7f5 fb47 	bl	29904 <bsd_os_application_irq_set>
   34276:	e785      	b.n	34184 <IPC_IRQHandler+0x68>
   34278:	2303      	movs	r3, #3
   3427a:	4910      	ldr	r1, [pc, #64]	; (342bc <IPC_IRQHandler+0x1a0>)
   3427c:	4a11      	ldr	r2, [pc, #68]	; (342c4 <IPC_IRQHandler+0x1a8>)
   3427e:	600b      	str	r3, [r1, #0]
   34280:	6013      	str	r3, [r2, #0]
   34282:	e784      	b.n	3418e <IPC_IRQHandler+0x72>
   34284:	2003      	movs	r0, #3
   34286:	2206      	movs	r2, #6
   34288:	490c      	ldr	r1, [pc, #48]	; (342bc <IPC_IRQHandler+0x1a0>)
   3428a:	4b0e      	ldr	r3, [pc, #56]	; (342c4 <IPC_IRQHandler+0x1a8>)
   3428c:	6008      	str	r0, [r1, #0]
   3428e:	601a      	str	r2, [r3, #0]
   34290:	e77d      	b.n	3418e <IPC_IRQHandler+0x72>
   34292:	2003      	movs	r0, #3
   34294:	2110      	movs	r1, #16
   34296:	4a0b      	ldr	r2, [pc, #44]	; (342c4 <IPC_IRQHandler+0x1a8>)
   34298:	6018      	str	r0, [r3, #0]
   3429a:	6011      	str	r1, [r2, #0]
   3429c:	e772      	b.n	34184 <IPC_IRQHandler+0x68>
   3429e:	2003      	movs	r0, #3
   342a0:	f24c 0106 	movw	r1, #49158	; 0xc006
   342a4:	4a07      	ldr	r2, [pc, #28]	; (342c4 <IPC_IRQHandler+0x1a8>)
   342a6:	6018      	str	r0, [r3, #0]
   342a8:	6011      	str	r1, [r2, #0]
   342aa:	e76b      	b.n	34184 <IPC_IRQHandler+0x68>
   342ac:	e000e100 	.word	0xe000e100
   342b0:	4002a000 	.word	0x4002a000
   342b4:	4002a11c 	.word	0x4002a11c
   342b8:	4002a108 	.word	0x4002a108
   342bc:	20025528 	.word	0x20025528
   342c0:	4002a100 	.word	0x4002a100
   342c4:	20025518 	.word	0x20025518
   342c8:	4002a110 	.word	0x4002a110
   342cc:	4002a118 	.word	0x4002a118
   342d0:	04400004 	.word	0x04400004
   342d4:	2002552c 	.word	0x2002552c
   342d8:	20025520 	.word	0x20025520
   342dc:	05500001 	.word	0x05500001

000342e0 <rpc_transport_ipc_rx_init>:
   342e0:	2800      	cmp	r0, #0
   342e2:	f000 8109 	beq.w	344f8 <rpc_transport_ipc_rx_init+0x218>
   342e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   342ea:	6805      	ldr	r5, [r0, #0]
   342ec:	b097      	sub	sp, #92	; 0x5c
   342ee:	2d00      	cmp	r5, #0
   342f0:	f000 80f8 	beq.w	344e4 <rpc_transport_ipc_rx_init+0x204>
   342f4:	6883      	ldr	r3, [r0, #8]
   342f6:	2b00      	cmp	r3, #0
   342f8:	f000 80f4 	beq.w	344e4 <rpc_transport_ipc_rx_init+0x204>
   342fc:	6906      	ldr	r6, [r0, #16]
   342fe:	2e00      	cmp	r6, #0
   34300:	f000 80f0 	beq.w	344e4 <rpc_transport_ipc_rx_init+0x204>
   34304:	6a84      	ldr	r4, [r0, #40]	; 0x28
   34306:	2c00      	cmp	r4, #0
   34308:	f000 80ec 	beq.w	344e4 <rpc_transport_ipc_rx_init+0x204>
   3430c:	6844      	ldr	r4, [r0, #4]
   3430e:	2c1b      	cmp	r4, #27
   34310:	f240 80ed 	bls.w	344ee <rpc_transport_ipc_rx_init+0x20e>
   34314:	68c4      	ldr	r4, [r0, #12]
   34316:	2c0b      	cmp	r4, #11
   34318:	f240 80e9 	bls.w	344ee <rpc_transport_ipc_rx_init+0x20e>
   3431c:	f8d0 e014 	ldr.w	lr, [r0, #20]
   34320:	f1be 0f17 	cmp.w	lr, #23
   34324:	f240 80e3 	bls.w	344ee <rpc_transport_ipc_rx_init+0x20e>
   34328:	4604      	mov	r4, r0
   3432a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 34520 <rpc_transport_ipc_rx_init+0x240>
   3432e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   34330:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 34524 <rpc_transport_ipc_rx_init+0x244>
   34334:	4690      	mov	r8, r2
   34336:	9101      	str	r1, [sp, #4]
   34338:	4672      	mov	r2, lr
   3433a:	2100      	movs	r1, #0
   3433c:	4630      	mov	r0, r6
   3433e:	f8ca 7000 	str.w	r7, [sl]
   34342:	f8cb 3000 	str.w	r3, [fp]
   34346:	f010 ff8f 	bl	45268 <memset>
   3434a:	69e3      	ldr	r3, [r4, #28]
   3434c:	4630      	mov	r0, r6
   3434e:	6033      	str	r3, [r6, #0]
   34350:	69a3      	ldr	r3, [r4, #24]
   34352:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 34528 <rpc_transport_ipc_rx_init+0x248>
   34356:	6073      	str	r3, [r6, #4]
   34358:	f7ff fb34 	bl	339c4 <ipc_trace_init>
   3435c:	2200      	movs	r2, #0
   3435e:	2001      	movs	r0, #1
   34360:	4b67      	ldr	r3, [pc, #412]	; (34500 <rpc_transport_ipc_rx_init+0x220>)
   34362:	4968      	ldr	r1, [pc, #416]	; (34504 <rpc_transport_ipc_rx_init+0x224>)
   34364:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   34368:	6809      	ldr	r1, [r1, #0]
   3436a:	f04f 0c80 	mov.w	ip, #128	; 0x80
   3436e:	9106      	str	r1, [sp, #24]
   34370:	4965      	ldr	r1, [pc, #404]	; (34508 <rpc_transport_ipc_rx_init+0x228>)
   34372:	f8dd e018 	ldr.w	lr, [sp, #24]
   34376:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   3437a:	6809      	ldr	r1, [r1, #0]
   3437c:	702a      	strb	r2, [r5, #0]
   3437e:	9105      	str	r1, [sp, #20]
   34380:	706a      	strb	r2, [r5, #1]
   34382:	70ea      	strb	r2, [r5, #3]
   34384:	70a8      	strb	r0, [r5, #2]
   34386:	9905      	ldr	r1, [sp, #20]
   34388:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   3438a:	f8db e000 	ldr.w	lr, [fp]
   3438e:	6069      	str	r1, [r5, #4]
   34390:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   34392:	61ae      	str	r6, [r5, #24]
   34394:	60a9      	str	r1, [r5, #8]
   34396:	9901      	ldr	r1, [sp, #4]
   34398:	f8c5 e014 	str.w	lr, [r5, #20]
   3439c:	6129      	str	r1, [r5, #16]
   3439e:	495b      	ldr	r1, [pc, #364]	; (3450c <rpc_transport_ipc_rx_init+0x22c>)
   343a0:	f8c5 800c 	str.w	r8, [r5, #12]
   343a4:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   343a8:	680c      	ldr	r4, [r1, #0]
   343aa:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   343ae:	9407      	str	r4, [sp, #28]
   343b0:	9c07      	ldr	r4, [sp, #28]
   343b2:	2404      	movs	r4, #4
   343b4:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   343b8:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   343bc:	4f54      	ldr	r7, [pc, #336]	; (34510 <rpc_transport_ipc_rx_init+0x230>)
   343be:	9408      	str	r4, [sp, #32]
   343c0:	9c08      	ldr	r4, [sp, #32]
   343c2:	2410      	movs	r4, #16
   343c4:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   343c8:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   343cc:	9409      	str	r4, [sp, #36]	; 0x24
   343ce:	9c09      	ldr	r4, [sp, #36]	; 0x24
   343d0:	2440      	movs	r4, #64	; 0x40
   343d2:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   343d6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   343da:	940a      	str	r4, [sp, #40]	; 0x28
   343dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   343de:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   343e2:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   343e6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   343ea:	940b      	str	r4, [sp, #44]	; 0x2c
   343ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   343ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   343f2:	680c      	ldr	r4, [r1, #0]
   343f4:	940c      	str	r4, [sp, #48]	; 0x30
   343f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   343f8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   343fc:	688c      	ldr	r4, [r1, #8]
   343fe:	940d      	str	r4, [sp, #52]	; 0x34
   34400:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   34402:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   34406:	690c      	ldr	r4, [r1, #16]
   34408:	940e      	str	r4, [sp, #56]	; 0x38
   3440a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   3440c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   34410:	698c      	ldr	r4, [r1, #24]
   34412:	940f      	str	r4, [sp, #60]	; 0x3c
   34414:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   34416:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   3441a:	69cc      	ldr	r4, [r1, #28]
   3441c:	f501 7101 	add.w	r1, r1, #516	; 0x204
   34420:	9410      	str	r4, [sp, #64]	; 0x40
   34422:	9c10      	ldr	r4, [sp, #64]	; 0x40
   34424:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   34428:	4304      	orrs	r4, r0
   3442a:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   3442e:	680d      	ldr	r5, [r1, #0]
   34430:	4c38      	ldr	r4, [pc, #224]	; (34514 <rpc_transport_ipc_rx_init+0x234>)
   34432:	9511      	str	r5, [sp, #68]	; 0x44
   34434:	9d11      	ldr	r5, [sp, #68]	; 0x44
   34436:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   3443a:	4d37      	ldr	r5, [pc, #220]	; (34518 <rpc_transport_ipc_rx_init+0x238>)
   3443c:	f046 0604 	orr.w	r6, r6, #4
   34440:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   34444:	680e      	ldr	r6, [r1, #0]
   34446:	9612      	str	r6, [sp, #72]	; 0x48
   34448:	9e12      	ldr	r6, [sp, #72]	; 0x48
   3444a:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   3444e:	f046 0610 	orr.w	r6, r6, #16
   34452:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   34456:	680e      	ldr	r6, [r1, #0]
   34458:	9613      	str	r6, [sp, #76]	; 0x4c
   3445a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   3445c:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   34460:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   34464:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   34468:	680e      	ldr	r6, [r1, #0]
   3446a:	9614      	str	r6, [sp, #80]	; 0x50
   3446c:	9e14      	ldr	r6, [sp, #80]	; 0x50
   3446e:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   34472:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   34476:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   3447a:	f8da 3000 	ldr.w	r3, [sl]
   3447e:	6809      	ldr	r1, [r1, #0]
   34480:	015b      	lsls	r3, r3, #5
   34482:	9115      	str	r1, [sp, #84]	; 0x54
   34484:	b2db      	uxtb	r3, r3
   34486:	9915      	ldr	r1, [sp, #84]	; 0x54
   34488:	6022      	str	r2, [r4, #0]
   3448a:	f8c9 0000 	str.w	r0, [r9]
   3448e:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   34492:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   34496:	f8c5 c004 	str.w	ip, [r5, #4]
   3449a:	9204      	str	r2, [sp, #16]
   3449c:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   344a0:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   344a4:	9304      	str	r3, [sp, #16]
   344a6:	9b04      	ldr	r3, [sp, #16]
   344a8:	f8d9 3000 	ldr.w	r3, [r9]
   344ac:	4283      	cmp	r3, r0
   344ae:	d10f      	bne.n	344d0 <rpc_transport_ipc_rx_init+0x1f0>
   344b0:	2614      	movs	r6, #20
   344b2:	4d1a      	ldr	r5, [pc, #104]	; (3451c <rpc_transport_ipc_rx_init+0x23c>)
   344b4:	e000      	b.n	344b8 <rpc_transport_ipc_rx_init+0x1d8>
   344b6:	b15d      	cbz	r5, 344d0 <rpc_transport_ipc_rx_init+0x1f0>
   344b8:	a903      	add	r1, sp, #12
   344ba:	2000      	movs	r0, #0
   344bc:	9603      	str	r6, [sp, #12]
   344be:	f7f5 f869 	bl	29594 <bsd_os_timedwait>
   344c2:	9b03      	ldr	r3, [sp, #12]
   344c4:	f8d9 2000 	ldr.w	r2, [r9]
   344c8:	3b14      	subs	r3, #20
   344ca:	2a01      	cmp	r2, #1
   344cc:	441d      	add	r5, r3
   344ce:	d0f2      	beq.n	344b6 <rpc_transport_ipc_rx_init+0x1d6>
   344d0:	f8d9 3000 	ldr.w	r3, [r9]
   344d4:	2b01      	cmp	r3, #1
   344d6:	bf0a      	itet	eq
   344d8:	200d      	moveq	r0, #13
   344da:	6820      	ldrne	r0, [r4, #0]
   344dc:	6020      	streq	r0, [r4, #0]
   344de:	b017      	add	sp, #92	; 0x5c
   344e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344e4:	f24c 000e 	movw	r0, #49166	; 0xc00e
   344e8:	b017      	add	sp, #92	; 0x5c
   344ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344ee:	f24c 0009 	movw	r0, #49161	; 0xc009
   344f2:	b017      	add	sp, #92	; 0x5c
   344f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344f8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   344fc:	4770      	bx	lr
   344fe:	bf00      	nop
   34500:	4002a000 	.word	0x4002a000
   34504:	4002a610 	.word	0x4002a610
   34508:	4002a614 	.word	0x4002a614
   3450c:	4002a590 	.word	0x4002a590
   34510:	40005000 	.word	0x40005000
   34514:	20025518 	.word	0x20025518
   34518:	e000e100 	.word	0xe000e100
   3451c:	000249f0 	.word	0x000249f0
   34520:	2002551c 	.word	0x2002551c
   34524:	2002552c 	.word	0x2002552c
   34528:	20025528 	.word	0x20025528

0003452c <rpc_transport_ipc_msg_free>:
   3452c:	b470      	push	{r4, r5, r6}
   3452e:	4e17      	ldr	r6, [pc, #92]	; (3458c <rpc_transport_ipc_msg_free+0x60>)
   34530:	6831      	ldr	r1, [r6, #0]
   34532:	680d      	ldr	r5, [r1, #0]
   34534:	b1ad      	cbz	r5, 34562 <rpc_transport_ipc_msg_free+0x36>
   34536:	688b      	ldr	r3, [r1, #8]
   34538:	4283      	cmp	r3, r0
   3453a:	d024      	beq.n	34586 <rpc_transport_ipc_msg_free+0x5a>
   3453c:	2300      	movs	r3, #0
   3453e:	3301      	adds	r3, #1
   34540:	00da      	lsls	r2, r3, #3
   34542:	429d      	cmp	r5, r3
   34544:	eb01 0402 	add.w	r4, r1, r2
   34548:	d00b      	beq.n	34562 <rpc_transport_ipc_msg_free+0x36>
   3454a:	68a4      	ldr	r4, [r4, #8]
   3454c:	42a0      	cmp	r0, r4
   3454e:	d1f6      	bne.n	3453e <rpc_transport_ipc_msg_free+0x12>
   34550:	3204      	adds	r2, #4
   34552:	588b      	ldr	r3, [r1, r2]
   34554:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   34558:	f043 0303 	orr.w	r3, r3, #3
   3455c:	508b      	str	r3, [r1, r2]
   3455e:	bc70      	pop	{r4, r5, r6}
   34560:	4770      	bx	lr
   34562:	6871      	ldr	r1, [r6, #4]
   34564:	680d      	ldr	r5, [r1, #0]
   34566:	2d00      	cmp	r5, #0
   34568:	d0f9      	beq.n	3455e <rpc_transport_ipc_msg_free+0x32>
   3456a:	688b      	ldr	r3, [r1, #8]
   3456c:	4283      	cmp	r3, r0
   3456e:	d00a      	beq.n	34586 <rpc_transport_ipc_msg_free+0x5a>
   34570:	2300      	movs	r3, #0
   34572:	3301      	adds	r3, #1
   34574:	00da      	lsls	r2, r3, #3
   34576:	429d      	cmp	r5, r3
   34578:	eb01 0402 	add.w	r4, r1, r2
   3457c:	d0ef      	beq.n	3455e <rpc_transport_ipc_msg_free+0x32>
   3457e:	68a4      	ldr	r4, [r4, #8]
   34580:	42a0      	cmp	r0, r4
   34582:	d1f6      	bne.n	34572 <rpc_transport_ipc_msg_free+0x46>
   34584:	e7e4      	b.n	34550 <rpc_transport_ipc_msg_free+0x24>
   34586:	2204      	movs	r2, #4
   34588:	e7e3      	b.n	34552 <rpc_transport_ipc_msg_free+0x26>
   3458a:	bf00      	nop
   3458c:	20025520 	.word	0x20025520

00034590 <rpc_transport_ipc_shutdown_done>:
   34590:	4b03      	ldr	r3, [pc, #12]	; (345a0 <rpc_transport_ipc_shutdown_done+0x10>)
   34592:	6818      	ldr	r0, [r3, #0]
   34594:	f1a0 0005 	sub.w	r0, r0, #5
   34598:	fab0 f080 	clz	r0, r0
   3459c:	0940      	lsrs	r0, r0, #5
   3459e:	4770      	bx	lr
   345a0:	20025528 	.word	0x20025528

000345a4 <rpc_transport_ipc_tx_init>:
   345a4:	2800      	cmp	r0, #0
   345a6:	f000 80b8 	beq.w	3471a <rpc_transport_ipc_tx_init+0x176>
   345aa:	2900      	cmp	r1, #0
   345ac:	f000 80b5 	beq.w	3471a <rpc_transport_ipc_tx_init+0x176>
   345b0:	2a00      	cmp	r2, #0
   345b2:	f000 80b2 	beq.w	3471a <rpc_transport_ipc_tx_init+0x176>
   345b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   345ba:	6a04      	ldr	r4, [r0, #32]
   345bc:	b085      	sub	sp, #20
   345be:	2c00      	cmp	r4, #0
   345c0:	f000 80a6 	beq.w	34710 <rpc_transport_ipc_tx_init+0x16c>
   345c4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   345c6:	2800      	cmp	r0, #0
   345c8:	f000 80a2 	beq.w	34710 <rpc_transport_ipc_tx_init+0x16c>
   345cc:	f642 4587 	movw	r5, #11399	; 0x2c87
   345d0:	f04f 0a00 	mov.w	sl, #0
   345d4:	4e55      	ldr	r6, [pc, #340]	; (3472c <rpc_transport_ipc_tx_init+0x188>)
   345d6:	42a8      	cmp	r0, r5
   345d8:	f886 a000 	strb.w	sl, [r6]
   345dc:	f240 80a0 	bls.w	34720 <rpc_transport_ipc_tx_init+0x17c>
   345e0:	2708      	movs	r7, #8
   345e2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 34764 <rpc_transport_ipc_tx_init+0x1c0>
   345e6:	4620      	mov	r0, r4
   345e8:	4616      	mov	r6, r2
   345ea:	460d      	mov	r5, r1
   345ec:	2244      	movs	r2, #68	; 0x44
   345ee:	4651      	mov	r1, sl
   345f0:	f8c9 4000 	str.w	r4, [r9]
   345f4:	f010 fe38 	bl	45268 <memset>
   345f8:	f8d9 2000 	ldr.w	r2, [r9]
   345fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   34600:	f8df 8164 	ldr.w	r8, [pc, #356]	; 34768 <rpc_transport_ipc_tx_init+0x1c4>
   34604:	f882 a001 	strb.w	sl, [r2, #1]
   34608:	f882 a002 	strb.w	sl, [r2, #2]
   3460c:	f882 a003 	strb.w	sl, [r2, #3]
   34610:	7017      	strb	r7, [r2, #0]
   34612:	4618      	mov	r0, r3
   34614:	2244      	movs	r2, #68	; 0x44
   34616:	4651      	mov	r1, sl
   34618:	f8c8 3000 	str.w	r3, [r8]
   3461c:	f010 fe24 	bl	45268 <memset>
   34620:	f8d8 2000 	ldr.w	r2, [r8]
   34624:	f104 0388 	add.w	r3, r4, #136	; 0x88
   34628:	f8df b140 	ldr.w	fp, [pc, #320]	; 3476c <rpc_transport_ipc_tx_init+0x1c8>
   3462c:	7017      	strb	r7, [r2, #0]
   3462e:	f882 a001 	strb.w	sl, [r2, #1]
   34632:	f882 a002 	strb.w	sl, [r2, #2]
   34636:	f882 a003 	strb.w	sl, [r2, #3]
   3463a:	4618      	mov	r0, r3
   3463c:	f44f 7200 	mov.w	r2, #512	; 0x200
   34640:	4651      	mov	r1, sl
   34642:	f8cb 3000 	str.w	r3, [fp]
   34646:	f010 fe0f 	bl	45268 <memset>
   3464a:	4b39      	ldr	r3, [pc, #228]	; (34730 <rpc_transport_ipc_tx_init+0x18c>)
   3464c:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   34650:	f8c3 c000 	str.w	ip, [r3]
   34654:	4651      	mov	r1, sl
   34656:	4660      	mov	r0, ip
   34658:	f44f 7200 	mov.w	r2, #512	; 0x200
   3465c:	f010 fe04 	bl	45268 <memset>
   34660:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   34664:	2106      	movs	r1, #6
   34666:	f04f 0e01 	mov.w	lr, #1
   3466a:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   3466e:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   34672:	4b30      	ldr	r3, [pc, #192]	; (34734 <rpc_transport_ipc_tx_init+0x190>)
   34674:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   34678:	605c      	str	r4, [r3, #4]
   3467a:	4c2f      	ldr	r4, [pc, #188]	; (34738 <rpc_transport_ipc_tx_init+0x194>)
   3467c:	f8c3 c008 	str.w	ip, [r3, #8]
   34680:	8199      	strh	r1, [r3, #12]
   34682:	f8a3 e000 	strh.w	lr, [r3]
   34686:	4619      	mov	r1, r3
   34688:	611c      	str	r4, [r3, #16]
   3468a:	4b2c      	ldr	r3, [pc, #176]	; (3473c <rpc_transport_ipc_tx_init+0x198>)
   3468c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 34770 <rpc_transport_ipc_tx_init+0x1cc>
   34690:	6120      	str	r0, [r4, #16]
   34692:	482b      	ldr	r0, [pc, #172]	; (34740 <rpc_transport_ipc_tx_init+0x19c>)
   34694:	6063      	str	r3, [r4, #4]
   34696:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   3469a:	60a0      	str	r0, [r4, #8]
   3469c:	f8c4 c000 	str.w	ip, [r4]
   346a0:	4828      	ldr	r0, [pc, #160]	; (34744 <rpc_transport_ipc_tx_init+0x1a0>)
   346a2:	60e3      	str	r3, [r4, #12]
   346a4:	6162      	str	r2, [r4, #20]
   346a6:	f006 faf7 	bl	3ac98 <nrf_mem_register>
   346aa:	2800      	cmp	r0, #0
   346ac:	d132      	bne.n	34714 <rpc_transport_ipc_tx_init+0x170>
   346ae:	f04f 0c02 	mov.w	ip, #2
   346b2:	2420      	movs	r4, #32
   346b4:	f8d9 1000 	ldr.w	r1, [r9]
   346b8:	f8db 2000 	ldr.w	r2, [fp]
   346bc:	6029      	str	r1, [r5, #0]
   346be:	4b1c      	ldr	r3, [pc, #112]	; (34730 <rpc_transport_ipc_tx_init+0x18c>)
   346c0:	f8d8 1000 	ldr.w	r1, [r8]
   346c4:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 34774 <rpc_transport_ipc_tx_init+0x1d0>
   346c8:	4d1f      	ldr	r5, [pc, #124]	; (34748 <rpc_transport_ipc_tx_init+0x1a4>)
   346ca:	6031      	str	r1, [r6, #0]
   346cc:	f8ce 2000 	str.w	r2, [lr]
   346d0:	681b      	ldr	r3, [r3, #0]
   346d2:	491e      	ldr	r1, [pc, #120]	; (3474c <rpc_transport_ipc_tx_init+0x1a8>)
   346d4:	f502 7200 	add.w	r2, r2, #512	; 0x200
   346d8:	602a      	str	r2, [r5, #0]
   346da:	4e1d      	ldr	r6, [pc, #116]	; (34750 <rpc_transport_ipc_tx_init+0x1ac>)
   346dc:	4a1d      	ldr	r2, [pc, #116]	; (34754 <rpc_transport_ipc_tx_init+0x1b0>)
   346de:	4d1e      	ldr	r5, [pc, #120]	; (34758 <rpc_transport_ipc_tx_init+0x1b4>)
   346e0:	600b      	str	r3, [r1, #0]
   346e2:	f503 7300 	add.w	r3, r3, #512	; 0x200
   346e6:	491d      	ldr	r1, [pc, #116]	; (3475c <rpc_transport_ipc_tx_init+0x1b8>)
   346e8:	6033      	str	r3, [r6, #0]
   346ea:	8028      	strh	r0, [r5, #0]
   346ec:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   346f0:	6809      	ldr	r1, [r1, #0]
   346f2:	4b1b      	ldr	r3, [pc, #108]	; (34760 <rpc_transport_ipc_tx_init+0x1bc>)
   346f4:	9103      	str	r1, [sp, #12]
   346f6:	9903      	ldr	r1, [sp, #12]
   346f8:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   346fc:	6819      	ldr	r1, [r3, #0]
   346fe:	443b      	add	r3, r7
   34700:	9102      	str	r1, [sp, #8]
   34702:	9902      	ldr	r1, [sp, #8]
   34704:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   34708:	681b      	ldr	r3, [r3, #0]
   3470a:	9301      	str	r3, [sp, #4]
   3470c:	9b01      	ldr	r3, [sp, #4]
   3470e:	e001      	b.n	34714 <rpc_transport_ipc_tx_init+0x170>
   34710:	f24c 0007 	movw	r0, #49159	; 0xc007
   34714:	b005      	add	sp, #20
   34716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3471a:	f24c 000e 	movw	r0, #49166	; 0xc00e
   3471e:	4770      	bx	lr
   34720:	f24c 0004 	movw	r0, #49156	; 0xc004
   34724:	b005      	add	sp, #20
   34726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3472a:	bf00      	nop
   3472c:	2002cb0e 	.word	0x2002cb0e
   34730:	20025558 	.word	0x20025558
   34734:	20025544 	.word	0x20025544
   34738:	20025568 	.word	0x20025568
   3473c:	00040080 	.word	0x00040080
   34740:	00040100 	.word	0x00040100
   34744:	20025530 	.word	0x20025530
   34748:	2002553c 	.word	0x2002553c
   3474c:	20025538 	.word	0x20025538
   34750:	20025534 	.word	0x20025534
   34754:	4002a000 	.word	0x4002a000
   34758:	2002a392 	.word	0x2002a392
   3475c:	4002a514 	.word	0x4002a514
   34760:	4002a51c 	.word	0x4002a51c
   34764:	20025564 	.word	0x20025564
   34768:	2002555c 	.word	0x2002555c
   3476c:	20025560 	.word	0x20025560
   34770:	00080040 	.word	0x00080040
   34774:	20025540 	.word	0x20025540

00034778 <rpc_transport_ipc_send>:
   34778:	2800      	cmp	r0, #0
   3477a:	d061      	beq.n	34840 <rpc_transport_ipc_send+0xc8>
   3477c:	b4f0      	push	{r4, r5, r6, r7}
   3477e:	4b34      	ldr	r3, [pc, #208]	; (34850 <rpc_transport_ipc_send+0xd8>)
   34780:	b082      	sub	sp, #8
   34782:	681a      	ldr	r2, [r3, #0]
   34784:	4b33      	ldr	r3, [pc, #204]	; (34854 <rpc_transport_ipc_send+0xdc>)
   34786:	4282      	cmp	r2, r0
   34788:	d81e      	bhi.n	347c8 <rpc_transport_ipc_send+0x50>
   3478a:	681b      	ldr	r3, [r3, #0]
   3478c:	4932      	ldr	r1, [pc, #200]	; (34858 <rpc_transport_ipc_send+0xe0>)
   3478e:	4283      	cmp	r3, r0
   34790:	6809      	ldr	r1, [r1, #0]
   34792:	d803      	bhi.n	3479c <rpc_transport_ipc_send+0x24>
   34794:	4c31      	ldr	r4, [pc, #196]	; (3485c <rpc_transport_ipc_send+0xe4>)
   34796:	6824      	ldr	r4, [r4, #0]
   34798:	4284      	cmp	r4, r0
   3479a:	d849      	bhi.n	34830 <rpc_transport_ipc_send+0xb8>
   3479c:	4281      	cmp	r1, r0
   3479e:	d90e      	bls.n	347be <rpc_transport_ipc_send+0x46>
   347a0:	4b2f      	ldr	r3, [pc, #188]	; (34860 <rpc_transport_ipc_send+0xe8>)
   347a2:	781b      	ldrb	r3, [r3, #0]
   347a4:	2b00      	cmp	r3, #0
   347a6:	d14e      	bne.n	34846 <rpc_transport_ipc_send+0xce>
   347a8:	1a83      	subs	r3, r0, r2
   347aa:	492e      	ldr	r1, [pc, #184]	; (34864 <rpc_transport_ipc_send+0xec>)
   347ac:	099f      	lsrs	r7, r3, #6
   347ae:	069b      	lsls	r3, r3, #26
   347b0:	680a      	ldr	r2, [r1, #0]
   347b2:	4d2d      	ldr	r5, [pc, #180]	; (34868 <rpc_transport_ipc_send+0xf0>)
   347b4:	f04f 0403 	mov.w	r4, #3
   347b8:	f04f 0602 	mov.w	r6, #2
   347bc:	d014      	beq.n	347e8 <rpc_transport_ipc_send+0x70>
   347be:	f24c 0010 	movw	r0, #49168	; 0xc010
   347c2:	b002      	add	sp, #8
   347c4:	bcf0      	pop	{r4, r5, r6, r7}
   347c6:	4770      	bx	lr
   347c8:	681b      	ldr	r3, [r3, #0]
   347ca:	4298      	cmp	r0, r3
   347cc:	d3f7      	bcc.n	347be <rpc_transport_ipc_send+0x46>
   347ce:	4a23      	ldr	r2, [pc, #140]	; (3485c <rpc_transport_ipc_send+0xe4>)
   347d0:	6812      	ldr	r2, [r2, #0]
   347d2:	4290      	cmp	r0, r2
   347d4:	d2f3      	bcs.n	347be <rpc_transport_ipc_send+0x46>
   347d6:	2401      	movs	r4, #1
   347d8:	1ac3      	subs	r3, r0, r3
   347da:	4a24      	ldr	r2, [pc, #144]	; (3486c <rpc_transport_ipc_send+0xf4>)
   347dc:	099f      	lsrs	r7, r3, #6
   347de:	069b      	lsls	r3, r3, #26
   347e0:	4626      	mov	r6, r4
   347e2:	6812      	ldr	r2, [r2, #0]
   347e4:	4d22      	ldr	r5, [pc, #136]	; (34870 <rpc_transport_ipc_send+0xf8>)
   347e6:	d1ea      	bne.n	347be <rpc_transport_ipc_send+0x46>
   347e8:	6841      	ldr	r1, [r0, #4]
   347ea:	b2c9      	uxtb	r1, r1
   347ec:	428e      	cmp	r6, r1
   347ee:	d122      	bne.n	34836 <rpc_transport_ipc_send+0xbe>
   347f0:	2020      	movs	r0, #32
   347f2:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   347f6:	491f      	ldr	r1, [pc, #124]	; (34874 <rpc_transport_ipc_send+0xfc>)
   347f8:	685a      	ldr	r2, [r3, #4]
   347fa:	880e      	ldrh	r6, [r1, #0]
   347fc:	b292      	uxth	r2, r2
   347fe:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   34802:	605a      	str	r2, [r3, #4]
   34804:	685a      	ldr	r2, [r3, #4]
   34806:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3480a:	f042 0201 	orr.w	r2, r2, #1
   3480e:	605a      	str	r2, [r3, #4]
   34810:	bf00      	nop
   34812:	3801      	subs	r0, #1
   34814:	d1fc      	bne.n	34810 <rpc_transport_ipc_send+0x98>
   34816:	2201      	movs	r2, #1
   34818:	4b17      	ldr	r3, [pc, #92]	; (34878 <rpc_transport_ipc_send+0x100>)
   3481a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   3481e:	682a      	ldr	r2, [r5, #0]
   34820:	880b      	ldrh	r3, [r1, #0]
   34822:	9201      	str	r2, [sp, #4]
   34824:	9a01      	ldr	r2, [sp, #4]
   34826:	3301      	adds	r3, #1
   34828:	800b      	strh	r3, [r1, #0]
   3482a:	b002      	add	sp, #8
   3482c:	bcf0      	pop	{r4, r5, r6, r7}
   3482e:	4770      	bx	lr
   34830:	4281      	cmp	r1, r0
   34832:	d9d0      	bls.n	347d6 <rpc_transport_ipc_send+0x5e>
   34834:	e7b4      	b.n	347a0 <rpc_transport_ipc_send+0x28>
   34836:	f24c 0007 	movw	r0, #49159	; 0xc007
   3483a:	b002      	add	sp, #8
   3483c:	bcf0      	pop	{r4, r5, r6, r7}
   3483e:	4770      	bx	lr
   34840:	f24c 000e 	movw	r0, #49166	; 0xc00e
   34844:	4770      	bx	lr
   34846:	f24c 000f 	movw	r0, #49167	; 0xc00f
   3484a:	b002      	add	sp, #8
   3484c:	bcf0      	pop	{r4, r5, r6, r7}
   3484e:	4770      	bx	lr
   34850:	20025540 	.word	0x20025540
   34854:	20025538 	.word	0x20025538
   34858:	2002553c 	.word	0x2002553c
   3485c:	20025534 	.word	0x20025534
   34860:	2002cb0e 	.word	0x2002cb0e
   34864:	20025564 	.word	0x20025564
   34868:	4002a00c 	.word	0x4002a00c
   3486c:	2002555c 	.word	0x2002555c
   34870:	4002a004 	.word	0x4002a004
   34874:	2002a392 	.word	0x2002a392
   34878:	4002a000 	.word	0x4002a000

0003487c <rpc_transport_ipc_tx_rpc_data_alloc>:
   3487c:	4b18      	ldr	r3, [pc, #96]	; (348e0 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   3487e:	781b      	ldrb	r3, [r3, #0]
   34880:	bb63      	cbnz	r3, 348dc <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   34882:	b4f0      	push	{r4, r5, r6, r7}
   34884:	4a17      	ldr	r2, [pc, #92]	; (348e4 <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   34886:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   3488a:	6814      	ldr	r4, [r2, #0]
   3488c:	4b16      	ldr	r3, [pc, #88]	; (348e8 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   3488e:	6825      	ldr	r5, [r4, #0]
   34890:	681e      	ldr	r6, [r3, #0]
   34892:	b1a5      	cbz	r5, 348be <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   34894:	4607      	mov	r7, r0
   34896:	00c1      	lsls	r1, r0, #3
   34898:	1863      	adds	r3, r4, r1
   3489a:	685a      	ldr	r2, [r3, #4]
   3489c:	b2d2      	uxtb	r2, r2
   3489e:	2a03      	cmp	r2, #3
   348a0:	d104      	bne.n	348ac <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   348a2:	609f      	str	r7, [r3, #8]
   348a4:	685a      	ldr	r2, [r3, #4]
   348a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   348aa:	605a      	str	r2, [r3, #4]
   348ac:	685a      	ldr	r2, [r3, #4]
   348ae:	f012 0fff 	tst.w	r2, #255	; 0xff
   348b2:	d101      	bne.n	348b8 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   348b4:	689b      	ldr	r3, [r3, #8]
   348b6:	b12b      	cbz	r3, 348c4 <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   348b8:	3001      	adds	r0, #1
   348ba:	42a8      	cmp	r0, r5
   348bc:	d1eb      	bne.n	34896 <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   348be:	2000      	movs	r0, #0
   348c0:	bcf0      	pop	{r4, r5, r6, r7}
   348c2:	4770      	bx	lr
   348c4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   348c8:	4421      	add	r1, r4
   348ca:	6088      	str	r0, [r1, #8]
   348cc:	6843      	ldr	r3, [r0, #4]
   348ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   348d2:	f043 0302 	orr.w	r3, r3, #2
   348d6:	6043      	str	r3, [r0, #4]
   348d8:	bcf0      	pop	{r4, r5, r6, r7}
   348da:	4770      	bx	lr
   348dc:	2000      	movs	r0, #0
   348de:	4770      	bx	lr
   348e0:	2002cb0e 	.word	0x2002cb0e
   348e4:	20025564 	.word	0x20025564
   348e8:	20025560 	.word	0x20025560

000348ec <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   348ec:	b4f0      	push	{r4, r5, r6, r7}
   348ee:	4a15      	ldr	r2, [pc, #84]	; (34944 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   348f0:	4b15      	ldr	r3, [pc, #84]	; (34948 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   348f2:	6814      	ldr	r4, [r2, #0]
   348f4:	681e      	ldr	r6, [r3, #0]
   348f6:	6825      	ldr	r5, [r4, #0]
   348f8:	b1ad      	cbz	r5, 34926 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   348fa:	2000      	movs	r0, #0
   348fc:	4607      	mov	r7, r0
   348fe:	00c1      	lsls	r1, r0, #3
   34900:	1863      	adds	r3, r4, r1
   34902:	685a      	ldr	r2, [r3, #4]
   34904:	b2d2      	uxtb	r2, r2
   34906:	2a03      	cmp	r2, #3
   34908:	d104      	bne.n	34914 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   3490a:	609f      	str	r7, [r3, #8]
   3490c:	685a      	ldr	r2, [r3, #4]
   3490e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   34912:	605a      	str	r2, [r3, #4]
   34914:	685a      	ldr	r2, [r3, #4]
   34916:	f012 0fff 	tst.w	r2, #255	; 0xff
   3491a:	d101      	bne.n	34920 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   3491c:	689b      	ldr	r3, [r3, #8]
   3491e:	b12b      	cbz	r3, 3492c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   34920:	3001      	adds	r0, #1
   34922:	4285      	cmp	r5, r0
   34924:	d1eb      	bne.n	348fe <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   34926:	2000      	movs	r0, #0
   34928:	bcf0      	pop	{r4, r5, r6, r7}
   3492a:	4770      	bx	lr
   3492c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   34930:	4421      	add	r1, r4
   34932:	6088      	str	r0, [r1, #8]
   34934:	6843      	ldr	r3, [r0, #4]
   34936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3493a:	f043 0301 	orr.w	r3, r3, #1
   3493e:	6043      	str	r3, [r0, #4]
   34940:	bcf0      	pop	{r4, r5, r6, r7}
   34942:	4770      	bx	lr
   34944:	2002555c 	.word	0x2002555c
   34948:	20025558 	.word	0x20025558

0003494c <rpc_transport_ipc_tx_data_alloc>:
   3494c:	4b03      	ldr	r3, [pc, #12]	; (3495c <rpc_transport_ipc_tx_data_alloc+0x10>)
   3494e:	781b      	ldrb	r3, [r3, #0]
   34950:	b90b      	cbnz	r3, 34956 <rpc_transport_ipc_tx_data_alloc+0xa>
   34952:	f006 bad1 	b.w	3aef8 <nrf_shared_malloc>
   34956:	2000      	movs	r0, #0
   34958:	4770      	bx	lr
   3495a:	bf00      	nop
   3495c:	2002cb0e 	.word	0x2002cb0e

00034960 <rpc_transport_ipc_tx_suspend>:
   34960:	2201      	movs	r2, #1
   34962:	4b01      	ldr	r3, [pc, #4]	; (34968 <rpc_transport_ipc_tx_suspend+0x8>)
   34964:	701a      	strb	r2, [r3, #0]
   34966:	4770      	bx	lr
   34968:	2002cb0e 	.word	0x2002cb0e

0003496c <rpc_transport_ipc_request_shutdown>:
   3496c:	b4f0      	push	{r4, r5, r6, r7}
   3496e:	4a16      	ldr	r2, [pc, #88]	; (349c8 <rpc_transport_ipc_request_shutdown+0x5c>)
   34970:	4b16      	ldr	r3, [pc, #88]	; (349cc <rpc_transport_ipc_request_shutdown+0x60>)
   34972:	6814      	ldr	r4, [r2, #0]
   34974:	681e      	ldr	r6, [r3, #0]
   34976:	6825      	ldr	r5, [r4, #0]
   34978:	b1ad      	cbz	r5, 349a6 <rpc_transport_ipc_request_shutdown+0x3a>
   3497a:	2200      	movs	r2, #0
   3497c:	4617      	mov	r7, r2
   3497e:	00d0      	lsls	r0, r2, #3
   34980:	1823      	adds	r3, r4, r0
   34982:	6859      	ldr	r1, [r3, #4]
   34984:	b2c9      	uxtb	r1, r1
   34986:	2903      	cmp	r1, #3
   34988:	d104      	bne.n	34994 <rpc_transport_ipc_request_shutdown+0x28>
   3498a:	609f      	str	r7, [r3, #8]
   3498c:	6859      	ldr	r1, [r3, #4]
   3498e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   34992:	6059      	str	r1, [r3, #4]
   34994:	6859      	ldr	r1, [r3, #4]
   34996:	f011 0fff 	tst.w	r1, #255	; 0xff
   3499a:	d101      	bne.n	349a0 <rpc_transport_ipc_request_shutdown+0x34>
   3499c:	689b      	ldr	r3, [r3, #8]
   3499e:	b123      	cbz	r3, 349aa <rpc_transport_ipc_request_shutdown+0x3e>
   349a0:	3201      	adds	r2, #1
   349a2:	42aa      	cmp	r2, r5
   349a4:	d1eb      	bne.n	3497e <rpc_transport_ipc_request_shutdown+0x12>
   349a6:	bcf0      	pop	{r4, r5, r6, r7}
   349a8:	4770      	bx	lr
   349aa:	0192      	lsls	r2, r2, #6
   349ac:	4404      	add	r4, r0
   349ae:	18b0      	adds	r0, r6, r2
   349b0:	60a0      	str	r0, [r4, #8]
   349b2:	6843      	ldr	r3, [r0, #4]
   349b4:	4906      	ldr	r1, [pc, #24]	; (349d0 <rpc_transport_ipc_request_shutdown+0x64>)
   349b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   349ba:	f043 0301 	orr.w	r3, r3, #1
   349be:	6043      	str	r3, [r0, #4]
   349c0:	50b1      	str	r1, [r6, r2]
   349c2:	bcf0      	pop	{r4, r5, r6, r7}
   349c4:	f7ff bed8 	b.w	34778 <rpc_transport_ipc_send>
   349c8:	2002555c 	.word	0x2002555c
   349cc:	20025558 	.word	0x20025558
   349d0:	00030001 	.word	0x00030001

000349d4 <secure_client_socket>:
   349d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   349d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   349dc:	460c      	mov	r4, r1
   349de:	680b      	ldr	r3, [r1, #0]
   349e0:	4f45      	ldr	r7, [pc, #276]	; (34af8 <secure_client_socket+0x124>)
   349e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   349e6:	600b      	str	r3, [r1, #0]
   349e8:	680b      	ldr	r3, [r1, #0]
   349ea:	00c6      	lsls	r6, r0, #3
   349ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   349f0:	600b      	str	r3, [r1, #0]
   349f2:	eb07 0a06 	add.w	sl, r7, r6
   349f6:	b084      	sub	sp, #16
   349f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   349fc:	6989      	ldr	r1, [r1, #24]
   349fe:	f247 0281 	movw	r2, #28801	; 0x7081
   34a02:	4605      	mov	r5, r0
   34a04:	f8d4 8000 	ldr.w	r8, [r4]
   34a08:	e9cd cc02 	strd	ip, ip, [sp, #8]
   34a0c:	f000 fd82 	bl	35514 <ip_interface_request_create>
   34a10:	2800      	cmp	r0, #0
   34a12:	d06c      	beq.n	34aee <secure_client_socket+0x11a>
   34a14:	f8da 2004 	ldr.w	r2, [sl, #4]
   34a18:	4681      	mov	r9, r0
   34a1a:	2a00      	cmp	r2, #0
   34a1c:	d15c      	bne.n	34ad8 <secure_client_socket+0x104>
   34a1e:	4b37      	ldr	r3, [pc, #220]	; (34afc <secure_client_socket+0x128>)
   34a20:	1971      	adds	r1, r6, r5
   34a22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   34a26:	2224      	movs	r2, #36	; 0x24
   34a28:	f109 0014 	add.w	r0, r9, #20
   34a2c:	f010 fbfc 	bl	45228 <memcpy>
   34a30:	f8d9 3008 	ldr.w	r3, [r9, #8]
   34a34:	4649      	mov	r1, r9
   34a36:	3324      	adds	r3, #36	; 0x24
   34a38:	f8c9 3008 	str.w	r3, [r9, #8]
   34a3c:	6822      	ldr	r2, [r4, #0]
   34a3e:	4643      	mov	r3, r8
   34a40:	0c12      	lsrs	r2, r2, #16
   34a42:	0412      	lsls	r2, r2, #16
   34a44:	f042 020a 	orr.w	r2, r2, #10
   34a48:	6022      	str	r2, [r4, #0]
   34a4a:	4620      	mov	r0, r4
   34a4c:	f247 0281 	movw	r2, #28801	; 0x7081
   34a50:	f000 fd80 	bl	35554 <ip_interface_request_send>
   34a54:	4603      	mov	r3, r0
   34a56:	b968      	cbnz	r0, 34a74 <secure_client_socket+0xa0>
   34a58:	6823      	ldr	r3, [r4, #0]
   34a5a:	00db      	lsls	r3, r3, #3
   34a5c:	d40e      	bmi.n	34a7c <secure_client_socket+0xa8>
   34a5e:	ab03      	add	r3, sp, #12
   34a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34a64:	210b      	movs	r1, #11
   34a66:	4628      	mov	r0, r5
   34a68:	f000 fd88 	bl	3557c <ip_interface_wait>
   34a6c:	4603      	mov	r3, r0
   34a6e:	b150      	cbz	r0, 34a86 <secure_client_socket+0xb2>
   34a70:	f8c4 8000 	str.w	r8, [r4]
   34a74:	4618      	mov	r0, r3
   34a76:	b004      	add	sp, #16
   34a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34a7c:	2373      	movs	r3, #115	; 0x73
   34a7e:	4618      	mov	r0, r3
   34a80:	b004      	add	sp, #16
   34a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34a86:	220c      	movs	r2, #12
   34a88:	ab02      	add	r3, sp, #8
   34a8a:	4611      	mov	r1, r2
   34a8c:	4628      	mov	r0, r5
   34a8e:	f000 fd75 	bl	3557c <ip_interface_wait>
   34a92:	4603      	mov	r3, r0
   34a94:	bb30      	cbnz	r0, 34ae4 <secure_client_socket+0x110>
   34a96:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   34a9a:	b138      	cbz	r0, 34aac <secure_client_socket+0xd8>
   34a9c:	9301      	str	r3, [sp, #4]
   34a9e:	f006 fa1f 	bl	3aee0 <nrf_free>
   34aa2:	9b01      	ldr	r3, [sp, #4]
   34aa4:	443e      	add	r6, r7
   34aa6:	6073      	str	r3, [r6, #4]
   34aa8:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   34aac:	4618      	mov	r0, r3
   34aae:	6822      	ldr	r2, [r4, #0]
   34ab0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   34ab4:	6022      	str	r2, [r4, #0]
   34ab6:	6822      	ldr	r2, [r4, #0]
   34ab8:	0c12      	lsrs	r2, r2, #16
   34aba:	0412      	lsls	r2, r2, #16
   34abc:	f042 020c 	orr.w	r2, r2, #12
   34ac0:	6022      	str	r2, [r4, #0]
   34ac2:	6822      	ldr	r2, [r4, #0]
   34ac4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   34ac8:	6022      	str	r2, [r4, #0]
   34aca:	6822      	ldr	r2, [r4, #0]
   34acc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   34ad0:	6022      	str	r2, [r4, #0]
   34ad2:	b004      	add	sp, #16
   34ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34ad8:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   34adc:	6800      	ldr	r0, [r0, #0]
   34ade:	f010 fba3 	bl	45228 <memcpy>
   34ae2:	e79c      	b.n	34a1e <secure_client_socket+0x4a>
   34ae4:	2b73      	cmp	r3, #115	; 0x73
   34ae6:	d0c5      	beq.n	34a74 <secure_client_socket+0xa0>
   34ae8:	f8c4 8000 	str.w	r8, [r4]
   34aec:	e7c2      	b.n	34a74 <secure_client_socket+0xa0>
   34aee:	230c      	movs	r3, #12
   34af0:	4618      	mov	r0, r3
   34af2:	b004      	add	sp, #16
   34af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34af8:	200256c4 	.word	0x200256c4
   34afc:	20025580 	.word	0x20025580

00034b00 <tls_interface_init>:
   34b00:	2201      	movs	r2, #1
   34b02:	4b02      	ldr	r3, [pc, #8]	; (34b0c <tls_interface_init+0xc>)
   34b04:	2000      	movs	r0, #0
   34b06:	701a      	strb	r2, [r3, #0]
   34b08:	4770      	bx	lr
   34b0a:	bf00      	nop
   34b0c:	2002cb0f 	.word	0x2002cb0f

00034b10 <tls_interface_deinit>:
   34b10:	2300      	movs	r3, #0
   34b12:	4a02      	ldr	r2, [pc, #8]	; (34b1c <tls_interface_deinit+0xc>)
   34b14:	4618      	mov	r0, r3
   34b16:	7013      	strb	r3, [r2, #0]
   34b18:	4770      	bx	lr
   34b1a:	bf00      	nop
   34b1c:	2002cb0f 	.word	0x2002cb0f

00034b20 <tls_interface_open>:
   34b20:	b538      	push	{r3, r4, r5, lr}
   34b22:	4b23      	ldr	r3, [pc, #140]	; (34bb0 <tls_interface_open+0x90>)
   34b24:	781b      	ldrb	r3, [r3, #0]
   34b26:	2b00      	cmp	r3, #0
   34b28:	d03c      	beq.n	34ba4 <tls_interface_open+0x84>
   34b2a:	1e4b      	subs	r3, r1, #1
   34b2c:	2b01      	cmp	r3, #1
   34b2e:	d808      	bhi.n	34b42 <tls_interface_open+0x22>
   34b30:	4614      	mov	r4, r2
   34b32:	b162      	cbz	r2, 34b4e <tls_interface_open+0x2e>
   34b34:	2901      	cmp	r1, #1
   34b36:	d02d      	beq.n	34b94 <tls_interface_open+0x74>
   34b38:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   34b3c:	bf08      	it	eq
   34b3e:	2202      	moveq	r2, #2
   34b40:	d00d      	beq.n	34b5e <tls_interface_open+0x3e>
   34b42:	2029      	movs	r0, #41	; 0x29
   34b44:	f7f4 fde6 	bl	29714 <bsd_os_errno_set>
   34b48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34b4c:	e020      	b.n	34b90 <tls_interface_open+0x70>
   34b4e:	2901      	cmp	r1, #1
   34b50:	bf0b      	itete	eq
   34b52:	2201      	moveq	r2, #1
   34b54:	2202      	movne	r2, #2
   34b56:	f44f 7482 	moveq.w	r4, #260	; 0x104
   34b5a:	f44f 7487 	movne.w	r4, #270	; 0x10e
   34b5e:	f000 fd4d 	bl	355fc <ip_interface_open>
   34b62:	1e05      	subs	r5, r0, #0
   34b64:	db1b      	blt.n	34b9e <tls_interface_open+0x7e>
   34b66:	4b13      	ldr	r3, [pc, #76]	; (34bb4 <tls_interface_open+0x94>)
   34b68:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   34b6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   34b70:	2224      	movs	r2, #36	; 0x24
   34b72:	4911      	ldr	r1, [pc, #68]	; (34bb8 <tls_interface_open+0x98>)
   34b74:	f010 fb58 	bl	45228 <memcpy>
   34b78:	4628      	mov	r0, r5
   34b7a:	f006 fe0f 	bl	3b79c <interface_socket_from_handle_get>
   34b7e:	6803      	ldr	r3, [r0, #0]
   34b80:	6144      	str	r4, [r0, #20]
   34b82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34b86:	6003      	str	r3, [r0, #0]
   34b88:	6803      	ldr	r3, [r0, #0]
   34b8a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34b8e:	6003      	str	r3, [r0, #0]
   34b90:	4628      	mov	r0, r5
   34b92:	bd38      	pop	{r3, r4, r5, pc}
   34b94:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   34b98:	d1d3      	bne.n	34b42 <tls_interface_open+0x22>
   34b9a:	460a      	mov	r2, r1
   34b9c:	e7df      	b.n	34b5e <tls_interface_open+0x3e>
   34b9e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34ba2:	e7f5      	b.n	34b90 <tls_interface_open+0x70>
   34ba4:	2070      	movs	r0, #112	; 0x70
   34ba6:	f7f4 fdb5 	bl	29714 <bsd_os_errno_set>
   34baa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   34bae:	e7ef      	b.n	34b90 <tls_interface_open+0x70>
   34bb0:	2002cb0f 	.word	0x2002cb0f
   34bb4:	20025580 	.word	0x20025580
   34bb8:	000473a0 	.word	0x000473a0

00034bbc <tls_interface_close>:
   34bbc:	b538      	push	{r3, r4, r5, lr}
   34bbe:	4604      	mov	r4, r0
   34bc0:	f006 fdec 	bl	3b79c <interface_socket_from_handle_get>
   34bc4:	b180      	cbz	r0, 34be8 <tls_interface_close+0x2c>
   34bc6:	4d0b      	ldr	r5, [pc, #44]	; (34bf4 <tls_interface_close+0x38>)
   34bc8:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   34bcc:	b138      	cbz	r0, 34bde <tls_interface_close+0x22>
   34bce:	f006 f987 	bl	3aee0 <nrf_free>
   34bd2:	2300      	movs	r3, #0
   34bd4:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   34bd8:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   34bdc:	6053      	str	r3, [r2, #4]
   34bde:	4620      	mov	r0, r4
   34be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   34be4:	f000 bdd0 	b.w	35788 <ip_interface_close>
   34be8:	2009      	movs	r0, #9
   34bea:	f7f4 fd93 	bl	29714 <bsd_os_errno_set>
   34bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34bf2:	bd38      	pop	{r3, r4, r5, pc}
   34bf4:	200256c4 	.word	0x200256c4

00034bf8 <tls_interface_sendto>:
   34bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34bfc:	b087      	sub	sp, #28
   34bfe:	9103      	str	r1, [sp, #12]
   34c00:	4616      	mov	r6, r2
   34c02:	469b      	mov	fp, r3
   34c04:	4682      	mov	sl, r0
   34c06:	f006 fdc9 	bl	3b79c <interface_socket_from_handle_get>
   34c0a:	2800      	cmp	r0, #0
   34c0c:	f000 8082 	beq.w	34d14 <tls_interface_sendto+0x11c>
   34c10:	2400      	movs	r4, #0
   34c12:	f01b 0f02 	tst.w	fp, #2
   34c16:	bf08      	it	eq
   34c18:	6807      	ldreq	r7, [r0, #0]
   34c1a:	4a40      	ldr	r2, [pc, #256]	; (34d1c <tls_interface_sendto+0x124>)
   34c1c:	bf08      	it	eq
   34c1e:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   34c22:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   34c26:	4605      	mov	r5, r0
   34c28:	bf0c      	ite	eq
   34c2a:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   34c2e:	2700      	movne	r7, #0
   34c30:	46a0      	mov	r8, r4
   34c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34c36:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   34c3a:	e00f      	b.n	34c5c <tls_interface_sendto+0x64>
   34c3c:	f899 2000 	ldrb.w	r2, [r9]
   34c40:	2a02      	cmp	r2, #2
   34c42:	d061      	beq.n	34d08 <tls_interface_sendto+0x110>
   34c44:	692a      	ldr	r2, [r5, #16]
   34c46:	2a01      	cmp	r2, #1
   34c48:	d061      	beq.n	34d0e <tls_interface_sendto+0x116>
   34c4a:	2b00      	cmp	r3, #0
   34c4c:	db30      	blt.n	34cb0 <tls_interface_sendto+0xb8>
   34c4e:	f1b8 0f00 	cmp.w	r8, #0
   34c52:	dc18      	bgt.n	34c86 <tls_interface_sendto+0x8e>
   34c54:	441c      	add	r4, r3
   34c56:	b1df      	cbz	r7, 34c90 <tls_interface_sendto+0x98>
   34c58:	42a6      	cmp	r6, r4
   34c5a:	dd19      	ble.n	34c90 <tls_interface_sendto+0x98>
   34c5c:	6829      	ldr	r1, [r5, #0]
   34c5e:	1b32      	subs	r2, r6, r4
   34c60:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   34c64:	b289      	uxth	r1, r1
   34c66:	bfa8      	it	ge
   34c68:	f44f 6200 	movge.w	r2, #2048	; 0x800
   34c6c:	290c      	cmp	r1, #12
   34c6e:	d013      	beq.n	34c98 <tls_interface_sendto+0xa0>
   34c70:	6829      	ldr	r1, [r5, #0]
   34c72:	b289      	uxth	r1, r1
   34c74:	290b      	cmp	r1, #11
   34c76:	d0e1      	beq.n	34c3c <tls_interface_sendto+0x44>
   34c78:	6929      	ldr	r1, [r5, #16]
   34c7a:	2901      	cmp	r1, #1
   34c7c:	d024      	beq.n	34cc8 <tls_interface_sendto+0xd0>
   34c7e:	2902      	cmp	r1, #2
   34c80:	d01a      	beq.n	34cb8 <tls_interface_sendto+0xc0>
   34c82:	f04f 0839 	mov.w	r8, #57	; 0x39
   34c86:	4640      	mov	r0, r8
   34c88:	f7f4 fd44 	bl	29714 <bsd_os_errno_set>
   34c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   34c90:	4620      	mov	r0, r4
   34c92:	b007      	add	sp, #28
   34c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34c9a:	9903      	ldr	r1, [sp, #12]
   34c9c:	9301      	str	r3, [sp, #4]
   34c9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34ca0:	4421      	add	r1, r4
   34ca2:	9300      	str	r3, [sp, #0]
   34ca4:	4650      	mov	r0, sl
   34ca6:	465b      	mov	r3, fp
   34ca8:	f000 fde0 	bl	3586c <ip_interface_sendto>
   34cac:	1e03      	subs	r3, r0, #0
   34cae:	dad1      	bge.n	34c54 <tls_interface_sendto+0x5c>
   34cb0:	f1b8 0f00 	cmp.w	r8, #0
   34cb4:	ddea      	ble.n	34c8c <tls_interface_sendto+0x94>
   34cb6:	e7e6      	b.n	34c86 <tls_interface_sendto+0x8e>
   34cb8:	6829      	ldr	r1, [r5, #0]
   34cba:	b289      	uxth	r1, r1
   34cbc:	2902      	cmp	r1, #2
   34cbe:	d007      	beq.n	34cd0 <tls_interface_sendto+0xd8>
   34cc0:	6829      	ldr	r1, [r5, #0]
   34cc2:	b289      	uxth	r1, r1
   34cc4:	2904      	cmp	r1, #4
   34cc6:	d003      	beq.n	34cd0 <tls_interface_sendto+0xd8>
   34cc8:	6829      	ldr	r1, [r5, #0]
   34cca:	b289      	uxth	r1, r1
   34ccc:	2905      	cmp	r1, #5
   34cce:	d1d8      	bne.n	34c82 <tls_interface_sendto+0x8a>
   34cd0:	f899 1000 	ldrb.w	r1, [r9]
   34cd4:	2902      	cmp	r1, #2
   34cd6:	d1b8      	bne.n	34c4a <tls_interface_sendto+0x52>
   34cd8:	4629      	mov	r1, r5
   34cda:	4650      	mov	r0, sl
   34cdc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   34ce0:	f7ff fe78 	bl	349d4 <secure_client_socket>
   34ce4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   34ce8:	4680      	mov	r8, r0
   34cea:	2800      	cmp	r0, #0
   34cec:	d1ad      	bne.n	34c4a <tls_interface_sendto+0x52>
   34cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   34cf0:	9903      	ldr	r1, [sp, #12]
   34cf2:	9301      	str	r3, [sp, #4]
   34cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   34cf6:	4421      	add	r1, r4
   34cf8:	9300      	str	r3, [sp, #0]
   34cfa:	4650      	mov	r0, sl
   34cfc:	465b      	mov	r3, fp
   34cfe:	f000 fdb5 	bl	3586c <ip_interface_sendto>
   34d02:	1e03      	subs	r3, r0, #0
   34d04:	daa6      	bge.n	34c54 <tls_interface_sendto+0x5c>
   34d06:	e7c1      	b.n	34c8c <tls_interface_sendto+0x94>
   34d08:	f04f 0823 	mov.w	r8, #35	; 0x23
   34d0c:	e7bb      	b.n	34c86 <tls_interface_sendto+0x8e>
   34d0e:	f04f 082a 	mov.w	r8, #42	; 0x2a
   34d12:	e7b8      	b.n	34c86 <tls_interface_sendto+0x8e>
   34d14:	f04f 0809 	mov.w	r8, #9
   34d18:	e7b5      	b.n	34c86 <tls_interface_sendto+0x8e>
   34d1a:	bf00      	nop
   34d1c:	20025580 	.word	0x20025580

00034d20 <tls_interface_recvfrom>:
   34d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34d24:	460d      	mov	r5, r1
   34d26:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   34d2a:	4616      	mov	r6, r2
   34d2c:	461f      	mov	r7, r3
   34d2e:	4604      	mov	r4, r0
   34d30:	f006 fd34 	bl	3b79c <interface_socket_from_handle_get>
   34d34:	2800      	cmp	r0, #0
   34d36:	d038      	beq.n	34daa <tls_interface_recvfrom+0x8a>
   34d38:	6803      	ldr	r3, [r0, #0]
   34d3a:	b29b      	uxth	r3, r3
   34d3c:	2b0c      	cmp	r3, #12
   34d3e:	d00f      	beq.n	34d60 <tls_interface_recvfrom+0x40>
   34d40:	6803      	ldr	r3, [r0, #0]
   34d42:	b29b      	uxth	r3, r3
   34d44:	2b0d      	cmp	r3, #13
   34d46:	d00b      	beq.n	34d60 <tls_interface_recvfrom+0x40>
   34d48:	6903      	ldr	r3, [r0, #16]
   34d4a:	2b01      	cmp	r3, #1
   34d4c:	d01a      	beq.n	34d84 <tls_interface_recvfrom+0x64>
   34d4e:	2b02      	cmp	r3, #2
   34d50:	d010      	beq.n	34d74 <tls_interface_recvfrom+0x54>
   34d52:	2023      	movs	r0, #35	; 0x23
   34d54:	f7f4 fcde 	bl	29714 <bsd_os_errno_set>
   34d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34d60:	e9cd 8908 	strd	r8, r9, [sp, #32]
   34d64:	463b      	mov	r3, r7
   34d66:	4632      	mov	r2, r6
   34d68:	4629      	mov	r1, r5
   34d6a:	4620      	mov	r0, r4
   34d6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34d70:	f000 bee2 	b.w	35b38 <ip_interface_recvfrom>
   34d74:	6803      	ldr	r3, [r0, #0]
   34d76:	b29b      	uxth	r3, r3
   34d78:	2b02      	cmp	r3, #2
   34d7a:	d007      	beq.n	34d8c <tls_interface_recvfrom+0x6c>
   34d7c:	6803      	ldr	r3, [r0, #0]
   34d7e:	b29b      	uxth	r3, r3
   34d80:	2b04      	cmp	r3, #4
   34d82:	d003      	beq.n	34d8c <tls_interface_recvfrom+0x6c>
   34d84:	6803      	ldr	r3, [r0, #0]
   34d86:	b29b      	uxth	r3, r3
   34d88:	2b05      	cmp	r3, #5
   34d8a:	d1e2      	bne.n	34d52 <tls_interface_recvfrom+0x32>
   34d8c:	4b08      	ldr	r3, [pc, #32]	; (34db0 <tls_interface_recvfrom+0x90>)
   34d8e:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   34d92:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34d96:	2b02      	cmp	r3, #2
   34d98:	d1db      	bne.n	34d52 <tls_interface_recvfrom+0x32>
   34d9a:	4601      	mov	r1, r0
   34d9c:	4620      	mov	r0, r4
   34d9e:	f7ff fe19 	bl	349d4 <secure_client_socket>
   34da2:	2800      	cmp	r0, #0
   34da4:	d0dc      	beq.n	34d60 <tls_interface_recvfrom+0x40>
   34da6:	dcd5      	bgt.n	34d54 <tls_interface_recvfrom+0x34>
   34da8:	e7d6      	b.n	34d58 <tls_interface_recvfrom+0x38>
   34daa:	2009      	movs	r0, #9
   34dac:	e7d2      	b.n	34d54 <tls_interface_recvfrom+0x34>
   34dae:	bf00      	nop
   34db0:	20025580 	.word	0x20025580

00034db4 <tls_interface_bind>:
   34db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34db8:	b082      	sub	sp, #8
   34dba:	460e      	mov	r6, r1
   34dbc:	4617      	mov	r7, r2
   34dbe:	4605      	mov	r5, r0
   34dc0:	f006 fcec 	bl	3b79c <interface_socket_from_handle_get>
   34dc4:	2800      	cmp	r0, #0
   34dc6:	d069      	beq.n	34e9c <tls_interface_bind+0xe8>
   34dc8:	6803      	ldr	r3, [r0, #0]
   34dca:	4604      	mov	r4, r0
   34dcc:	b29b      	uxth	r3, r3
   34dce:	2b02      	cmp	r3, #2
   34dd0:	d158      	bne.n	34e84 <tls_interface_bind+0xd0>
   34dd2:	463a      	mov	r2, r7
   34dd4:	4631      	mov	r1, r6
   34dd6:	4628      	mov	r0, r5
   34dd8:	f001 f9be 	bl	36158 <ip_interface_bind>
   34ddc:	2800      	cmp	r0, #0
   34dde:	d148      	bne.n	34e72 <tls_interface_bind+0xbe>
   34de0:	00ee      	lsls	r6, r5, #3
   34de2:	4f2f      	ldr	r7, [pc, #188]	; (34ea0 <tls_interface_bind+0xec>)
   34de4:	1973      	adds	r3, r6, r5
   34de6:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   34dea:	2b01      	cmp	r3, #1
   34dec:	d002      	beq.n	34df4 <tls_interface_bind+0x40>
   34dee:	b002      	add	sp, #8
   34df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34df4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   34df8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 34ea4 <tls_interface_bind+0xf0>
   34dfc:	f247 0281 	movw	r2, #28801	; 0x7081
   34e00:	eb0a 0906 	add.w	r9, sl, r6
   34e04:	f8d9 3004 	ldr.w	r3, [r9, #4]
   34e08:	69a1      	ldr	r1, [r4, #24]
   34e0a:	4628      	mov	r0, r5
   34e0c:	f8cd c004 	str.w	ip, [sp, #4]
   34e10:	f000 fb80 	bl	35514 <ip_interface_request_create>
   34e14:	4680      	mov	r8, r0
   34e16:	2800      	cmp	r0, #0
   34e18:	d03e      	beq.n	34e98 <tls_interface_bind+0xe4>
   34e1a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   34e1e:	bbaa      	cbnz	r2, 34e8c <tls_interface_bind+0xd8>
   34e20:	1971      	adds	r1, r6, r5
   34e22:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   34e26:	2224      	movs	r2, #36	; 0x24
   34e28:	f108 0014 	add.w	r0, r8, #20
   34e2c:	f010 f9fc 	bl	45228 <memcpy>
   34e30:	f8d8 3008 	ldr.w	r3, [r8, #8]
   34e34:	4641      	mov	r1, r8
   34e36:	3324      	adds	r3, #36	; 0x24
   34e38:	f8c8 3008 	str.w	r3, [r8, #8]
   34e3c:	6822      	ldr	r2, [r4, #0]
   34e3e:	2304      	movs	r3, #4
   34e40:	0c12      	lsrs	r2, r2, #16
   34e42:	0412      	lsls	r2, r2, #16
   34e44:	f042 020a 	orr.w	r2, r2, #10
   34e48:	6022      	str	r2, [r4, #0]
   34e4a:	4620      	mov	r0, r4
   34e4c:	f247 0281 	movw	r2, #28801	; 0x7081
   34e50:	f000 fb80 	bl	35554 <ip_interface_request_send>
   34e54:	b968      	cbnz	r0, 34e72 <tls_interface_bind+0xbe>
   34e56:	6823      	ldr	r3, [r4, #0]
   34e58:	00db      	lsls	r3, r3, #3
   34e5a:	d415      	bmi.n	34e88 <tls_interface_bind+0xd4>
   34e5c:	4628      	mov	r0, r5
   34e5e:	ab01      	add	r3, sp, #4
   34e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34e64:	210b      	movs	r1, #11
   34e66:	f000 fb89 	bl	3557c <ip_interface_wait>
   34e6a:	2800      	cmp	r0, #0
   34e6c:	d0bf      	beq.n	34dee <tls_interface_bind+0x3a>
   34e6e:	2304      	movs	r3, #4
   34e70:	6023      	str	r3, [r4, #0]
   34e72:	2800      	cmp	r0, #0
   34e74:	ddbb      	ble.n	34dee <tls_interface_bind+0x3a>
   34e76:	f7f4 fc4d 	bl	29714 <bsd_os_errno_set>
   34e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34e7e:	b002      	add	sp, #8
   34e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   34e84:	202d      	movs	r0, #45	; 0x2d
   34e86:	e7f6      	b.n	34e76 <tls_interface_bind+0xc2>
   34e88:	2073      	movs	r0, #115	; 0x73
   34e8a:	e7f4      	b.n	34e76 <tls_interface_bind+0xc2>
   34e8c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   34e90:	6800      	ldr	r0, [r0, #0]
   34e92:	f010 f9c9 	bl	45228 <memcpy>
   34e96:	e7c3      	b.n	34e20 <tls_interface_bind+0x6c>
   34e98:	200c      	movs	r0, #12
   34e9a:	e7ec      	b.n	34e76 <tls_interface_bind+0xc2>
   34e9c:	2009      	movs	r0, #9
   34e9e:	e7ea      	b.n	34e76 <tls_interface_bind+0xc2>
   34ea0:	20025580 	.word	0x20025580
   34ea4:	200256c4 	.word	0x200256c4

00034ea8 <tls_interface_connect>:
   34ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34eaa:	460e      	mov	r6, r1
   34eac:	4617      	mov	r7, r2
   34eae:	4604      	mov	r4, r0
   34eb0:	f006 fc74 	bl	3b79c <interface_socket_from_handle_get>
   34eb4:	b1e8      	cbz	r0, 34ef2 <tls_interface_connect+0x4a>
   34eb6:	4b13      	ldr	r3, [pc, #76]	; (34f04 <tls_interface_connect+0x5c>)
   34eb8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   34ebc:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   34ec0:	2b02      	cmp	r3, #2
   34ec2:	d11c      	bne.n	34efe <tls_interface_connect+0x56>
   34ec4:	6803      	ldr	r3, [r0, #0]
   34ec6:	4605      	mov	r5, r0
   34ec8:	b29b      	uxth	r3, r3
   34eca:	2b02      	cmp	r3, #2
   34ecc:	d003      	beq.n	34ed6 <tls_interface_connect+0x2e>
   34ece:	6803      	ldr	r3, [r0, #0]
   34ed0:	b29b      	uxth	r3, r3
   34ed2:	2b04      	cmp	r3, #4
   34ed4:	d113      	bne.n	34efe <tls_interface_connect+0x56>
   34ed6:	463a      	mov	r2, r7
   34ed8:	4631      	mov	r1, r6
   34eda:	4620      	mov	r0, r4
   34edc:	f000 ff54 	bl	35d88 <ip_interface_connect>
   34ee0:	b110      	cbz	r0, 34ee8 <tls_interface_connect+0x40>
   34ee2:	2800      	cmp	r0, #0
   34ee4:	dc06      	bgt.n	34ef4 <tls_interface_connect+0x4c>
   34ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34ee8:	4629      	mov	r1, r5
   34eea:	4620      	mov	r0, r4
   34eec:	f7ff fd72 	bl	349d4 <secure_client_socket>
   34ef0:	e7f7      	b.n	34ee2 <tls_interface_connect+0x3a>
   34ef2:	2009      	movs	r0, #9
   34ef4:	f7f4 fc0e 	bl	29714 <bsd_os_errno_set>
   34ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34efe:	202d      	movs	r0, #45	; 0x2d
   34f00:	e7f8      	b.n	34ef4 <tls_interface_connect+0x4c>
   34f02:	bf00      	nop
   34f04:	20025580 	.word	0x20025580

00034f08 <tls_interface_listen>:
   34f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34f0c:	b085      	sub	sp, #20
   34f0e:	4689      	mov	r9, r1
   34f10:	4605      	mov	r5, r0
   34f12:	f006 fc43 	bl	3b79c <interface_socket_from_handle_get>
   34f16:	2800      	cmp	r0, #0
   34f18:	f000 8084 	beq.w	35024 <tls_interface_listen+0x11c>
   34f1c:	6803      	ldr	r3, [r0, #0]
   34f1e:	4604      	mov	r4, r0
   34f20:	00da      	lsls	r2, r3, #3
   34f22:	d47d      	bmi.n	35020 <tls_interface_listen+0x118>
   34f24:	6903      	ldr	r3, [r0, #16]
   34f26:	2b01      	cmp	r3, #1
   34f28:	d17a      	bne.n	35020 <tls_interface_listen+0x118>
   34f2a:	6803      	ldr	r3, [r0, #0]
   34f2c:	b29b      	uxth	r3, r3
   34f2e:	2b04      	cmp	r3, #4
   34f30:	d05d      	beq.n	34fee <tls_interface_listen+0xe6>
   34f32:	6823      	ldr	r3, [r4, #0]
   34f34:	b29b      	uxth	r3, r3
   34f36:	2b0b      	cmp	r3, #11
   34f38:	d172      	bne.n	35020 <tls_interface_listen+0x118>
   34f3a:	4a3b      	ldr	r2, [pc, #236]	; (35028 <tls_interface_listen+0x120>)
   34f3c:	00ee      	lsls	r6, r5, #3
   34f3e:	1973      	adds	r3, r6, r5
   34f40:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   34f44:	9201      	str	r2, [sp, #4]
   34f46:	2b01      	cmp	r3, #1
   34f48:	d16a      	bne.n	35020 <tls_interface_listen+0x118>
   34f4a:	2201      	movs	r2, #1
   34f4c:	9901      	ldr	r1, [sp, #4]
   34f4e:	1973      	adds	r3, r6, r5
   34f50:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   34f54:	6823      	ldr	r3, [r4, #0]
   34f56:	2b0b      	cmp	r3, #11
   34f58:	d040      	beq.n	34fdc <tls_interface_listen+0xd4>
   34f5a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   34f5e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 3502c <tls_interface_listen+0x124>
   34f62:	f247 0281 	movw	r2, #28801	; 0x7081
   34f66:	eb0a 0806 	add.w	r8, sl, r6
   34f6a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   34f6e:	69a1      	ldr	r1, [r4, #24]
   34f70:	4628      	mov	r0, r5
   34f72:	6827      	ldr	r7, [r4, #0]
   34f74:	f8cd c00c 	str.w	ip, [sp, #12]
   34f78:	f000 facc 	bl	35514 <ip_interface_request_create>
   34f7c:	4683      	mov	fp, r0
   34f7e:	2800      	cmp	r0, #0
   34f80:	d046      	beq.n	35010 <tls_interface_listen+0x108>
   34f82:	f8d8 2004 	ldr.w	r2, [r8, #4]
   34f86:	2a00      	cmp	r2, #0
   34f88:	d144      	bne.n	35014 <tls_interface_listen+0x10c>
   34f8a:	9b01      	ldr	r3, [sp, #4]
   34f8c:	1971      	adds	r1, r6, r5
   34f8e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   34f92:	2224      	movs	r2, #36	; 0x24
   34f94:	f10b 0014 	add.w	r0, fp, #20
   34f98:	f010 f946 	bl	45228 <memcpy>
   34f9c:	f8db 2008 	ldr.w	r2, [fp, #8]
   34fa0:	4659      	mov	r1, fp
   34fa2:	3224      	adds	r2, #36	; 0x24
   34fa4:	f8cb 2008 	str.w	r2, [fp, #8]
   34fa8:	6822      	ldr	r2, [r4, #0]
   34faa:	463b      	mov	r3, r7
   34fac:	0c12      	lsrs	r2, r2, #16
   34fae:	0412      	lsls	r2, r2, #16
   34fb0:	f042 020a 	orr.w	r2, r2, #10
   34fb4:	6022      	str	r2, [r4, #0]
   34fb6:	4620      	mov	r0, r4
   34fb8:	f247 0281 	movw	r2, #28801	; 0x7081
   34fbc:	f000 faca 	bl	35554 <ip_interface_request_send>
   34fc0:	b980      	cbnz	r0, 34fe4 <tls_interface_listen+0xdc>
   34fc2:	6823      	ldr	r3, [r4, #0]
   34fc4:	00db      	lsls	r3, r3, #3
   34fc6:	d41b      	bmi.n	35000 <tls_interface_listen+0xf8>
   34fc8:	ab03      	add	r3, sp, #12
   34fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34fce:	210b      	movs	r1, #11
   34fd0:	4628      	mov	r0, r5
   34fd2:	f000 fad3 	bl	3557c <ip_interface_wait>
   34fd6:	b108      	cbz	r0, 34fdc <tls_interface_listen+0xd4>
   34fd8:	6027      	str	r7, [r4, #0]
   34fda:	e003      	b.n	34fe4 <tls_interface_listen+0xdc>
   34fdc:	4649      	mov	r1, r9
   34fde:	4628      	mov	r0, r5
   34fe0:	f001 f95c 	bl	3629c <ip_interface_listen>
   34fe4:	2800      	cmp	r0, #0
   34fe6:	dc0c      	bgt.n	35002 <tls_interface_listen+0xfa>
   34fe8:	b005      	add	sp, #20
   34fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fee:	4a0e      	ldr	r2, [pc, #56]	; (35028 <tls_interface_listen+0x120>)
   34ff0:	00ee      	lsls	r6, r5, #3
   34ff2:	1973      	adds	r3, r6, r5
   34ff4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   34ff8:	9201      	str	r2, [sp, #4]
   34ffa:	2b02      	cmp	r3, #2
   34ffc:	d199      	bne.n	34f32 <tls_interface_listen+0x2a>
   34ffe:	e7a4      	b.n	34f4a <tls_interface_listen+0x42>
   35000:	2073      	movs	r0, #115	; 0x73
   35002:	f7f4 fb87 	bl	29714 <bsd_os_errno_set>
   35006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3500a:	b005      	add	sp, #20
   3500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35010:	200c      	movs	r0, #12
   35012:	e7f6      	b.n	35002 <tls_interface_listen+0xfa>
   35014:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   35018:	6800      	ldr	r0, [r0, #0]
   3501a:	f010 f905 	bl	45228 <memcpy>
   3501e:	e7b4      	b.n	34f8a <tls_interface_listen+0x82>
   35020:	202d      	movs	r0, #45	; 0x2d
   35022:	e7ee      	b.n	35002 <tls_interface_listen+0xfa>
   35024:	2009      	movs	r0, #9
   35026:	e7ec      	b.n	35002 <tls_interface_listen+0xfa>
   35028:	20025580 	.word	0x20025580
   3502c:	200256c4 	.word	0x200256c4

00035030 <tls_interface_accept>:
   35030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35034:	b083      	sub	sp, #12
   35036:	460f      	mov	r7, r1
   35038:	4690      	mov	r8, r2
   3503a:	4699      	mov	r9, r3
   3503c:	4606      	mov	r6, r0
   3503e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   35042:	f006 fbab 	bl	3b79c <interface_socket_from_handle_get>
   35046:	9401      	str	r4, [sp, #4]
   35048:	2800      	cmp	r0, #0
   3504a:	d048      	beq.n	350de <tls_interface_accept+0xae>
   3504c:	6805      	ldr	r5, [r0, #0]
   3504e:	b2ad      	uxth	r5, r5
   35050:	2d07      	cmp	r5, #7
   35052:	d144      	bne.n	350de <tls_interface_accept+0xae>
   35054:	6803      	ldr	r3, [r0, #0]
   35056:	00db      	lsls	r3, r3, #3
   35058:	d443      	bmi.n	350e2 <tls_interface_accept+0xb2>
   3505a:	464b      	mov	r3, r9
   3505c:	4642      	mov	r2, r8
   3505e:	4639      	mov	r1, r7
   35060:	4630      	mov	r0, r6
   35062:	f001 f997 	bl	36394 <ip_interface_accept>
   35066:	1e04      	subs	r4, r0, #0
   35068:	da08      	bge.n	3507c <tls_interface_accept+0x4c>
   3506a:	4620      	mov	r0, r4
   3506c:	f7f4 fb52 	bl	29714 <bsd_os_errno_set>
   35070:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   35074:	4620      	mov	r0, r4
   35076:	b003      	add	sp, #12
   35078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3507c:	f006 fb8e 	bl	3b79c <interface_socket_from_handle_get>
   35080:	6803      	ldr	r3, [r0, #0]
   35082:	f8df 8068 	ldr.w	r8, [pc, #104]	; 350ec <tls_interface_accept+0xbc>
   35086:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3508a:	6003      	str	r3, [r0, #0]
   3508c:	6803      	ldr	r3, [r0, #0]
   3508e:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   35092:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   35096:	00bf      	lsls	r7, r7, #2
   35098:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3509c:	4605      	mov	r5, r0
   3509e:	6003      	str	r3, [r0, #0]
   350a0:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   350a4:	2224      	movs	r2, #36	; 0x24
   350a6:	eb08 0007 	add.w	r0, r8, r7
   350aa:	f010 f8bd 	bl	45228 <memcpy>
   350ae:	2302      	movs	r3, #2
   350b0:	f808 3007 	strb.w	r3, [r8, r7]
   350b4:	682a      	ldr	r2, [r5, #0]
   350b6:	ab01      	add	r3, sp, #4
   350b8:	0c12      	lsrs	r2, r2, #16
   350ba:	0412      	lsls	r2, r2, #16
   350bc:	f042 020b 	orr.w	r2, r2, #11
   350c0:	602a      	str	r2, [r5, #0]
   350c2:	210c      	movs	r1, #12
   350c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   350c8:	4620      	mov	r0, r4
   350ca:	f000 fa57 	bl	3557c <ip_interface_wait>
   350ce:	4605      	mov	r5, r0
   350d0:	2800      	cmp	r0, #0
   350d2:	d0cf      	beq.n	35074 <tls_interface_accept+0x44>
   350d4:	4620      	mov	r0, r4
   350d6:	f000 fb57 	bl	35788 <ip_interface_close>
   350da:	462c      	mov	r4, r5
   350dc:	e7c5      	b.n	3506a <tls_interface_accept+0x3a>
   350de:	2409      	movs	r4, #9
   350e0:	e7c3      	b.n	3506a <tls_interface_accept+0x3a>
   350e2:	202d      	movs	r0, #45	; 0x2d
   350e4:	f7f4 fb16 	bl	29714 <bsd_os_errno_set>
   350e8:	e7c4      	b.n	35074 <tls_interface_accept+0x44>
   350ea:	bf00      	nop
   350ec:	20025580 	.word	0x20025580

000350f0 <tls_interface_setopt>:
   350f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   350f4:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   350f8:	b082      	sub	sp, #8
   350fa:	9e08      	ldr	r6, [sp, #32]
   350fc:	d120      	bne.n	35140 <tls_interface_setopt+0x50>
   350fe:	4698      	mov	r8, r3
   35100:	4617      	mov	r7, r2
   35102:	4605      	mov	r5, r0
   35104:	2b00      	cmp	r3, #0
   35106:	f000 80a0 	beq.w	3524a <tls_interface_setopt+0x15a>
   3510a:	f006 fb47 	bl	3b79c <interface_socket_from_handle_get>
   3510e:	2800      	cmp	r0, #0
   35110:	f000 8097 	beq.w	35242 <tls_interface_setopt+0x152>
   35114:	6804      	ldr	r4, [r0, #0]
   35116:	b2a4      	uxth	r4, r4
   35118:	2c02      	cmp	r4, #2
   3511a:	d008      	beq.n	3512e <tls_interface_setopt+0x3e>
   3511c:	6803      	ldr	r3, [r0, #0]
   3511e:	b29b      	uxth	r3, r3
   35120:	2b04      	cmp	r3, #4
   35122:	d004      	beq.n	3512e <tls_interface_setopt+0x3e>
   35124:	6803      	ldr	r3, [r0, #0]
   35126:	b29b      	uxth	r3, r3
   35128:	2b05      	cmp	r3, #5
   3512a:	f040 808a 	bne.w	35242 <tls_interface_setopt+0x152>
   3512e:	1e7a      	subs	r2, r7, #1
   35130:	2a05      	cmp	r2, #5
   35132:	f200 8090 	bhi.w	35256 <tls_interface_setopt+0x166>
   35136:	e8df f002 	tbb	[pc, r2]
   3513a:	2718      	.short	0x2718
   3513c:	08594b3c 	.word	0x08594b3c
   35140:	b002      	add	sp, #8
   35142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35146:	f001 ba67 	b.w	36618 <ip_interface_setopt>
   3514a:	4601      	mov	r1, r0
   3514c:	e9cd 8600 	strd	r8, r6, [sp]
   35150:	4628      	mov	r0, r5
   35152:	f247 0301 	movw	r3, #28673	; 0x7001
   35156:	f44f 7280 	mov.w	r2, #256	; 0x100
   3515a:	f000 ff87 	bl	3606c <ip_interface_socketoption_send>
   3515e:	2800      	cmp	r0, #0
   35160:	d161      	bne.n	35226 <tls_interface_setopt+0x136>
   35162:	2000      	movs	r0, #0
   35164:	b002      	add	sp, #8
   35166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3516a:	2e04      	cmp	r6, #4
   3516c:	d15a      	bne.n	35224 <tls_interface_setopt+0x134>
   3516e:	f8d8 0000 	ldr.w	r0, [r8]
   35172:	2800      	cmp	r0, #0
   35174:	d05e      	beq.n	35234 <tls_interface_setopt+0x144>
   35176:	2801      	cmp	r0, #1
   35178:	d154      	bne.n	35224 <tls_interface_setopt+0x134>
   3517a:	4b38      	ldr	r3, [pc, #224]	; (3525c <tls_interface_setopt+0x16c>)
   3517c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   35180:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   35184:	2000      	movs	r0, #0
   35186:	e7ed      	b.n	35164 <tls_interface_setopt+0x74>
   35188:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   3518c:	d04a      	beq.n	35224 <tls_interface_setopt+0x134>
   3518e:	f016 0703 	ands.w	r7, r6, #3
   35192:	d147      	bne.n	35224 <tls_interface_setopt+0x134>
   35194:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   35198:	00a4      	lsls	r4, r4, #2
   3519a:	4b30      	ldr	r3, [pc, #192]	; (3525c <tls_interface_setopt+0x16c>)
   3519c:	1d20      	adds	r0, r4, #4
   3519e:	4418      	add	r0, r3
   351a0:	4423      	add	r3, r4
   351a2:	4632      	mov	r2, r6
   351a4:	4641      	mov	r1, r8
   351a6:	f883 c003 	strb.w	ip, [r3, #3]
   351aa:	f010 f83d 	bl	45228 <memcpy>
   351ae:	4638      	mov	r0, r7
   351b0:	e7d8      	b.n	35164 <tls_interface_setopt+0x74>
   351b2:	2e01      	cmp	r6, #1
   351b4:	d136      	bne.n	35224 <tls_interface_setopt+0x134>
   351b6:	f898 2000 	ldrb.w	r2, [r8]
   351ba:	4b28      	ldr	r3, [pc, #160]	; (3525c <tls_interface_setopt+0x16c>)
   351bc:	3200      	adds	r2, #0
   351be:	bf18      	it	ne
   351c0:	2201      	movne	r2, #1
   351c2:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   351c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   351ca:	7062      	strb	r2, [r4, #1]
   351cc:	2000      	movs	r0, #0
   351ce:	e7c9      	b.n	35164 <tls_interface_setopt+0x74>
   351d0:	2e04      	cmp	r6, #4
   351d2:	d127      	bne.n	35224 <tls_interface_setopt+0x134>
   351d4:	f8d8 2000 	ldr.w	r2, [r8]
   351d8:	2a02      	cmp	r2, #2
   351da:	d823      	bhi.n	35224 <tls_interface_setopt+0x134>
   351dc:	4b1f      	ldr	r3, [pc, #124]	; (3525c <tls_interface_setopt+0x16c>)
   351de:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   351e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   351e6:	70a2      	strb	r2, [r4, #2]
   351e8:	2000      	movs	r0, #0
   351ea:	e7bb      	b.n	35164 <tls_interface_setopt+0x74>
   351ec:	4c1c      	ldr	r4, [pc, #112]	; (35260 <tls_interface_setopt+0x170>)
   351ee:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   351f2:	b138      	cbz	r0, 35204 <tls_interface_setopt+0x114>
   351f4:	f005 fe74 	bl	3aee0 <nrf_free>
   351f8:	2200      	movs	r2, #0
   351fa:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   351fe:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   35202:	605a      	str	r2, [r3, #4]
   35204:	2e00      	cmp	r6, #0
   35206:	d0ac      	beq.n	35162 <tls_interface_setopt+0x72>
   35208:	4630      	mov	r0, r6
   3520a:	f005 fe5f 	bl	3aecc <nrf_malloc>
   3520e:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   35212:	b1c0      	cbz	r0, 35246 <tls_interface_setopt+0x156>
   35214:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   35218:	4632      	mov	r2, r6
   3521a:	4641      	mov	r1, r8
   3521c:	6066      	str	r6, [r4, #4]
   3521e:	f010 f803 	bl	45228 <memcpy>
   35222:	e79e      	b.n	35162 <tls_interface_setopt+0x72>
   35224:	2016      	movs	r0, #22
   35226:	f7f4 fa75 	bl	29714 <bsd_os_errno_set>
   3522a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3522e:	b002      	add	sp, #8
   35230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35234:	2202      	movs	r2, #2
   35236:	4b09      	ldr	r3, [pc, #36]	; (3525c <tls_interface_setopt+0x16c>)
   35238:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3523c:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   35240:	e790      	b.n	35164 <tls_interface_setopt+0x74>
   35242:	2009      	movs	r0, #9
   35244:	e7ef      	b.n	35226 <tls_interface_setopt+0x136>
   35246:	200c      	movs	r0, #12
   35248:	e7ed      	b.n	35226 <tls_interface_setopt+0x136>
   3524a:	200e      	movs	r0, #14
   3524c:	f7f4 fa62 	bl	29714 <bsd_os_errno_set>
   35250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35254:	e786      	b.n	35164 <tls_interface_setopt+0x74>
   35256:	202a      	movs	r0, #42	; 0x2a
   35258:	e7e5      	b.n	35226 <tls_interface_setopt+0x136>
   3525a:	bf00      	nop
   3525c:	20025580 	.word	0x20025580
   35260:	200256c4 	.word	0x200256c4

00035264 <tls_interface_getopt>:
   35264:	b5f0      	push	{r4, r5, r6, r7, lr}
   35266:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3526a:	b083      	sub	sp, #12
   3526c:	9f08      	ldr	r7, [sp, #32]
   3526e:	d112      	bne.n	35296 <tls_interface_getopt+0x32>
   35270:	461d      	mov	r5, r3
   35272:	b16b      	cbz	r3, 35290 <tls_interface_getopt+0x2c>
   35274:	b167      	cbz	r7, 35290 <tls_interface_getopt+0x2c>
   35276:	4606      	mov	r6, r0
   35278:	4614      	mov	r4, r2
   3527a:	f006 fa8f 	bl	3b79c <interface_socket_from_handle_get>
   3527e:	b178      	cbz	r0, 352a0 <tls_interface_getopt+0x3c>
   35280:	3c01      	subs	r4, #1
   35282:	2c05      	cmp	r4, #5
   35284:	d859      	bhi.n	3533a <tls_interface_getopt+0xd6>
   35286:	e8df f004 	tbb	[pc, r4]
   3528a:	2818      	.short	0x2818
   3528c:	0d584c40 	.word	0x0d584c40
   35290:	200e      	movs	r0, #14
   35292:	b003      	add	sp, #12
   35294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35296:	b003      	add	sp, #12
   35298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3529c:	f001 ba5e 	b.w	3675c <ip_interface_getopt>
   352a0:	2009      	movs	r0, #9
   352a2:	e7f6      	b.n	35292 <tls_interface_getopt+0x2e>
   352a4:	4601      	mov	r1, r0
   352a6:	e9cd 5700 	strd	r5, r7, [sp]
   352aa:	4630      	mov	r0, r6
   352ac:	f247 0301 	movw	r3, #28673	; 0x7001
   352b0:	f44f 7280 	mov.w	r2, #256	; 0x100
   352b4:	f000 fe2a 	bl	35f0c <ip_interface_socketoption_get>
   352b8:	e7eb      	b.n	35292 <tls_interface_getopt+0x2e>
   352ba:	683b      	ldr	r3, [r7, #0]
   352bc:	2b04      	cmp	r3, #4
   352be:	d13e      	bne.n	3533e <tls_interface_getopt+0xda>
   352c0:	4b22      	ldr	r3, [pc, #136]	; (3534c <tls_interface_getopt+0xe8>)
   352c2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   352c6:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   352ca:	2000      	movs	r0, #0
   352cc:	f1a3 0301 	sub.w	r3, r3, #1
   352d0:	fab3 f383 	clz	r3, r3
   352d4:	095b      	lsrs	r3, r3, #5
   352d6:	602b      	str	r3, [r5, #0]
   352d8:	e7db      	b.n	35292 <tls_interface_getopt+0x2e>
   352da:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   352de:	491b      	ldr	r1, [pc, #108]	; (3534c <tls_interface_getopt+0xe8>)
   352e0:	683b      	ldr	r3, [r7, #0]
   352e2:	00b6      	lsls	r6, r6, #2
   352e4:	198a      	adds	r2, r1, r6
   352e6:	f013 0403 	ands.w	r4, r3, #3
   352ea:	78d0      	ldrb	r0, [r2, #3]
   352ec:	d129      	bne.n	35342 <tls_interface_getopt+0xde>
   352ee:	089b      	lsrs	r3, r3, #2
   352f0:	4283      	cmp	r3, r0
   352f2:	bf28      	it	cs
   352f4:	4603      	movcs	r3, r0
   352f6:	009a      	lsls	r2, r3, #2
   352f8:	b31b      	cbz	r3, 35342 <tls_interface_getopt+0xde>
   352fa:	3604      	adds	r6, #4
   352fc:	4431      	add	r1, r6
   352fe:	603a      	str	r2, [r7, #0]
   35300:	4628      	mov	r0, r5
   35302:	f00f ff91 	bl	45228 <memcpy>
   35306:	4620      	mov	r0, r4
   35308:	e7c3      	b.n	35292 <tls_interface_getopt+0x2e>
   3530a:	683b      	ldr	r3, [r7, #0]
   3530c:	2b01      	cmp	r3, #1
   3530e:	d116      	bne.n	3533e <tls_interface_getopt+0xda>
   35310:	4b0e      	ldr	r3, [pc, #56]	; (3534c <tls_interface_getopt+0xe8>)
   35312:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   35316:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   3531a:	7873      	ldrb	r3, [r6, #1]
   3531c:	2000      	movs	r0, #0
   3531e:	702b      	strb	r3, [r5, #0]
   35320:	e7b7      	b.n	35292 <tls_interface_getopt+0x2e>
   35322:	683b      	ldr	r3, [r7, #0]
   35324:	2b04      	cmp	r3, #4
   35326:	d10a      	bne.n	3533e <tls_interface_getopt+0xda>
   35328:	4b08      	ldr	r3, [pc, #32]	; (3534c <tls_interface_getopt+0xe8>)
   3532a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3532e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   35332:	78b3      	ldrb	r3, [r6, #2]
   35334:	2000      	movs	r0, #0
   35336:	602b      	str	r3, [r5, #0]
   35338:	e7ab      	b.n	35292 <tls_interface_getopt+0x2e>
   3533a:	202a      	movs	r0, #42	; 0x2a
   3533c:	e7a9      	b.n	35292 <tls_interface_getopt+0x2e>
   3533e:	2016      	movs	r0, #22
   35340:	e7a7      	b.n	35292 <tls_interface_getopt+0x2e>
   35342:	2800      	cmp	r0, #0
   35344:	d1fb      	bne.n	3533e <tls_interface_getopt+0xda>
   35346:	6038      	str	r0, [r7, #0]
   35348:	e7a3      	b.n	35292 <tls_interface_getopt+0x2e>
   3534a:	bf00      	nop
   3534c:	20025580 	.word	0x20025580

00035350 <tls_rpc_ip_event_handler>:
   35350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35352:	f248 0581 	movw	r5, #32897	; 0x8081
   35356:	42ab      	cmp	r3, r5
   35358:	460c      	mov	r4, r1
   3535a:	d044      	beq.n	353e6 <tls_rpc_ip_event_handler+0x96>
   3535c:	f249 0182 	movw	r1, #36994	; 0x9082
   35360:	428b      	cmp	r3, r1
   35362:	4606      	mov	r6, r0
   35364:	d02d      	beq.n	353c2 <tls_rpc_ip_event_handler+0x72>
   35366:	f248 0102 	movw	r1, #32770	; 0x8002
   3536a:	428b      	cmp	r3, r1
   3536c:	d001      	beq.n	35372 <tls_rpc_ip_event_handler+0x22>
   3536e:	2001      	movs	r0, #1
   35370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35372:	2c00      	cmp	r4, #0
   35374:	d0fb      	beq.n	3536e <tls_rpc_ip_event_handler+0x1e>
   35376:	6963      	ldr	r3, [r4, #20]
   35378:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   3537c:	d002      	beq.n	35384 <tls_rpc_ip_event_handler+0x34>
   3537e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   35382:	d1f4      	bne.n	3536e <tls_rpc_ip_event_handler+0x1e>
   35384:	6823      	ldr	r3, [r4, #0]
   35386:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   3538a:	6023      	str	r3, [r4, #0]
   3538c:	6955      	ldr	r5, [r2, #20]
   3538e:	bb05      	cbnz	r5, 353d2 <tls_rpc_ip_event_handler+0x82>
   35390:	6823      	ldr	r3, [r4, #0]
   35392:	0c1b      	lsrs	r3, r3, #16
   35394:	041b      	lsls	r3, r3, #16
   35396:	f043 0305 	orr.w	r3, r3, #5
   3539a:	6023      	str	r3, [r4, #0]
   3539c:	6823      	ldr	r3, [r4, #0]
   3539e:	00db      	lsls	r3, r3, #3
   353a0:	d50d      	bpl.n	353be <tls_rpc_ip_event_handler+0x6e>
   353a2:	4b2a      	ldr	r3, [pc, #168]	; (3544c <tls_rpc_ip_event_handler+0xfc>)
   353a4:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   353a8:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   353ac:	2b02      	cmp	r3, #2
   353ae:	d106      	bne.n	353be <tls_rpc_ip_event_handler+0x6e>
   353b0:	4630      	mov	r0, r6
   353b2:	4621      	mov	r1, r4
   353b4:	f7ff fb0e 	bl	349d4 <secure_client_socket>
   353b8:	b108      	cbz	r0, 353be <tls_rpc_ip_event_handler+0x6e>
   353ba:	2873      	cmp	r0, #115	; 0x73
   353bc:	d10c      	bne.n	353d8 <tls_rpc_ip_event_handler+0x88>
   353be:	2000      	movs	r0, #0
   353c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   353c2:	2c00      	cmp	r4, #0
   353c4:	d0fb      	beq.n	353be <tls_rpc_ip_event_handler+0x6e>
   353c6:	6823      	ldr	r3, [r4, #0]
   353c8:	b29b      	uxth	r3, r3
   353ca:	2b0b      	cmp	r3, #11
   353cc:	d1f7      	bne.n	353be <tls_rpc_ip_event_handler+0x6e>
   353ce:	6915      	ldr	r5, [r2, #16]
   353d0:	b1cd      	cbz	r5, 35406 <tls_rpc_ip_event_handler+0xb6>
   353d2:	4628      	mov	r0, r5
   353d4:	f000 f894 	bl	35500 <rpc_error_to_nrf_bsd_error>
   353d8:	6060      	str	r0, [r4, #4]
   353da:	6823      	ldr	r3, [r4, #0]
   353dc:	2000      	movs	r0, #0
   353de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   353e2:	6023      	str	r3, [r4, #0]
   353e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   353e6:	2900      	cmp	r1, #0
   353e8:	d0e9      	beq.n	353be <tls_rpc_ip_event_handler+0x6e>
   353ea:	680b      	ldr	r3, [r1, #0]
   353ec:	b29b      	uxth	r3, r3
   353ee:	2b0a      	cmp	r3, #10
   353f0:	d1e5      	bne.n	353be <tls_rpc_ip_event_handler+0x6e>
   353f2:	6950      	ldr	r0, [r2, #20]
   353f4:	2800      	cmp	r0, #0
   353f6:	d1ed      	bne.n	353d4 <tls_rpc_ip_event_handler+0x84>
   353f8:	680b      	ldr	r3, [r1, #0]
   353fa:	0c1b      	lsrs	r3, r3, #16
   353fc:	041b      	lsls	r3, r3, #16
   353fe:	f043 030b 	orr.w	r3, r3, #11
   35402:	600b      	str	r3, [r1, #0]
   35404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35406:	6823      	ldr	r3, [r4, #0]
   35408:	4f11      	ldr	r7, [pc, #68]	; (35450 <tls_rpc_ip_event_handler+0x100>)
   3540a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   3540e:	6023      	str	r3, [r4, #0]
   35410:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   35414:	b130      	cbz	r0, 35424 <tls_rpc_ip_event_handler+0xd4>
   35416:	f005 fd63 	bl	3aee0 <nrf_free>
   3541a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   3541e:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   35422:	605d      	str	r5, [r3, #4]
   35424:	6823      	ldr	r3, [r4, #0]
   35426:	2000      	movs	r0, #0
   35428:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   3542c:	6023      	str	r3, [r4, #0]
   3542e:	6823      	ldr	r3, [r4, #0]
   35430:	0c1b      	lsrs	r3, r3, #16
   35432:	041b      	lsls	r3, r3, #16
   35434:	f043 030c 	orr.w	r3, r3, #12
   35438:	6023      	str	r3, [r4, #0]
   3543a:	6823      	ldr	r3, [r4, #0]
   3543c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35440:	6023      	str	r3, [r4, #0]
   35442:	6823      	ldr	r3, [r4, #0]
   35444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   35448:	6023      	str	r3, [r4, #0]
   3544a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3544c:	20025580 	.word	0x20025580
   35450:	200256c4 	.word	0x200256c4

00035454 <ip_client_event_handler>:
   35454:	f850 1b08 	ldr.w	r1, [r0], #8
   35458:	0c09      	lsrs	r1, r1, #16
   3545a:	f001 bb1f 	b.w	36a9c <rpc_ip_event_handler>
   3545e:	bf00      	nop

00035460 <rpc_ip_client_init>:
   35460:	4801      	ldr	r0, [pc, #4]	; (35468 <rpc_ip_client_init+0x8>)
   35462:	f001 be1d 	b.w	370a0 <rpc_client_register>
   35466:	bf00      	nop
   35468:	000473c4 	.word	0x000473c4

0003546c <rpc_ip_client_deinit>:
   3546c:	2004      	movs	r0, #4
   3546e:	f001 be81 	b.w	37174 <rpc_client_unregister>
   35472:	bf00      	nop

00035474 <rpc_ip_client_request_alloc>:
   35474:	2300      	movs	r3, #0
   35476:	b510      	push	{r4, lr}
   35478:	b082      	sub	sp, #8
   3547a:	9301      	str	r3, [sp, #4]
   3547c:	b158      	cbz	r0, 35496 <rpc_ip_client_request_alloc+0x22>
   3547e:	4604      	mov	r4, r0
   35480:	aa01      	add	r2, sp, #4
   35482:	2004      	movs	r0, #4
   35484:	f001 fecc 	bl	37220 <rpc_message_alloc>
   35488:	b918      	cbnz	r0, 35492 <rpc_ip_client_request_alloc+0x1e>
   3548a:	9b01      	ldr	r3, [sp, #4]
   3548c:	b10b      	cbz	r3, 35492 <rpc_ip_client_request_alloc+0x1e>
   3548e:	3308      	adds	r3, #8
   35490:	6023      	str	r3, [r4, #0]
   35492:	b002      	add	sp, #8
   35494:	bd10      	pop	{r4, pc}
   35496:	2007      	movs	r0, #7
   35498:	b002      	add	sp, #8
   3549a:	bd10      	pop	{r4, pc}

0003549c <rpc_ip_client_request_send>:
   3549c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   354a0:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   354a4:	d10b      	bne.n	354be <rpc_ip_client_request_send+0x22>
   354a6:	b160      	cbz	r0, 354c2 <rpc_ip_client_request_send+0x26>
   354a8:	4603      	mov	r3, r0
   354aa:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   354ae:	2004      	movs	r0, #4
   354b0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   354b4:	f843 1d08 	str.w	r1, [r3, #-8]!
   354b8:	4619      	mov	r1, r3
   354ba:	f001 bea1 	b.w	37200 <rpc_message_send>
   354be:	200f      	movs	r0, #15
   354c0:	4770      	bx	lr
   354c2:	2007      	movs	r0, #7
   354c4:	4770      	bx	lr
   354c6:	bf00      	nop

000354c8 <rpc_ip_client_message_free>:
   354c8:	b120      	cbz	r0, 354d4 <rpc_ip_client_message_free+0xc>
   354ca:	f1a0 0108 	sub.w	r1, r0, #8
   354ce:	2004      	movs	r0, #4
   354d0:	f001 bed2 	b.w	37278 <rpc_message_free>
   354d4:	2007      	movs	r0, #7
   354d6:	4770      	bx	lr

000354d8 <rpc_ip_client_data_free>:
   354d8:	b118      	cbz	r0, 354e2 <rpc_ip_client_data_free+0xa>
   354da:	4601      	mov	r1, r0
   354dc:	2004      	movs	r0, #4
   354de:	f001 bed7 	b.w	37290 <rpc_message_data_free>
   354e2:	2007      	movs	r0, #7
   354e4:	4770      	bx	lr
   354e6:	bf00      	nop

000354e8 <ip_recvd_packet_free_cb>:
   354e8:	b510      	push	{r4, lr}
   354ea:	4604      	mov	r4, r0
   354ec:	6800      	ldr	r0, [r0, #0]
   354ee:	f7ff fff3 	bl	354d8 <rpc_ip_client_data_free>
   354f2:	68a0      	ldr	r0, [r4, #8]
   354f4:	b118      	cbz	r0, 354fe <ip_recvd_packet_free_cb+0x16>
   354f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   354fa:	f005 bcf1 	b.w	3aee0 <nrf_free>
   354fe:	bd10      	pop	{r4, pc}

00035500 <rpc_error_to_nrf_bsd_error>:
   35500:	2810      	cmp	r0, #16
   35502:	bf9a      	itte	ls
   35504:	4b02      	ldrls	r3, [pc, #8]	; (35510 <rpc_error_to_nrf_bsd_error+0x10>)
   35506:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   3550a:	202d      	movhi	r0, #45	; 0x2d
   3550c:	4770      	bx	lr
   3550e:	bf00      	nop
   35510:	000473d4 	.word	0x000473d4

00035514 <ip_interface_request_create>:
   35514:	b570      	push	{r4, r5, r6, lr}
   35516:	2500      	movs	r5, #0
   35518:	b082      	sub	sp, #8
   3551a:	ac02      	add	r4, sp, #8
   3551c:	f844 5d04 	str.w	r5, [r4, #-4]!
   35520:	4606      	mov	r6, r0
   35522:	460d      	mov	r5, r1
   35524:	4620      	mov	r0, r4
   35526:	4619      	mov	r1, r3
   35528:	4614      	mov	r4, r2
   3552a:	f7ff ffa3 	bl	35474 <rpc_ip_client_request_alloc>
   3552e:	b960      	cbnz	r0, 3554a <ip_interface_request_create+0x36>
   35530:	9b01      	ldr	r3, [sp, #4]
   35532:	2208      	movs	r2, #8
   35534:	7258      	strb	r0, [r3, #9]
   35536:	7298      	strb	r0, [r3, #10]
   35538:	72d8      	strb	r0, [r3, #11]
   3553a:	4618      	mov	r0, r3
   3553c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   35540:	60dc      	str	r4, [r3, #12]
   35542:	611d      	str	r5, [r3, #16]
   35544:	721a      	strb	r2, [r3, #8]
   35546:	b002      	add	sp, #8
   35548:	bd70      	pop	{r4, r5, r6, pc}
   3554a:	9b01      	ldr	r3, [sp, #4]
   3554c:	4618      	mov	r0, r3
   3554e:	b002      	add	sp, #8
   35550:	bd70      	pop	{r4, r5, r6, pc}
   35552:	bf00      	nop

00035554 <ip_interface_request_send>:
   35554:	b570      	push	{r4, r5, r6, lr}
   35556:	460c      	mov	r4, r1
   35558:	4605      	mov	r5, r0
   3555a:	4611      	mov	r1, r2
   3555c:	4620      	mov	r0, r4
   3555e:	461e      	mov	r6, r3
   35560:	f7ff ff9c 	bl	3549c <rpc_ip_client_request_send>
   35564:	b900      	cbnz	r0, 35568 <ip_interface_request_send+0x14>
   35566:	bd70      	pop	{r4, r5, r6, pc}
   35568:	6820      	ldr	r0, [r4, #0]
   3556a:	b108      	cbz	r0, 35570 <ip_interface_request_send+0x1c>
   3556c:	f7ff ffb4 	bl	354d8 <rpc_ip_client_data_free>
   35570:	4620      	mov	r0, r4
   35572:	f7ff ffa9 	bl	354c8 <rpc_ip_client_message_free>
   35576:	602e      	str	r6, [r5, #0]
   35578:	2023      	movs	r0, #35	; 0x23
   3557a:	bd70      	pop	{r4, r5, r6, pc}

0003557c <ip_interface_wait>:
   3557c:	b538      	push	{r3, r4, r5, lr}
   3557e:	4605      	mov	r5, r0
   35580:	f006 f898 	bl	3b6b4 <interface_socket_wait>
   35584:	4604      	mov	r4, r0
   35586:	b108      	cbz	r0, 3558c <ip_interface_wait+0x10>
   35588:	4620      	mov	r0, r4
   3558a:	bd38      	pop	{r3, r4, r5, pc}
   3558c:	4628      	mov	r0, r5
   3558e:	f006 f905 	bl	3b79c <interface_socket_from_handle_get>
   35592:	2800      	cmp	r0, #0
   35594:	d0f8      	beq.n	35588 <ip_interface_wait+0xc>
   35596:	6844      	ldr	r4, [r0, #4]
   35598:	2c00      	cmp	r4, #0
   3559a:	d0f5      	beq.n	35588 <ip_interface_wait+0xc>
   3559c:	2300      	movs	r3, #0
   3559e:	6043      	str	r3, [r0, #4]
   355a0:	4620      	mov	r0, r4
   355a2:	bd38      	pop	{r3, r4, r5, pc}

000355a4 <ip_interface_init>:
   355a4:	b538      	push	{r3, r4, r5, lr}
   355a6:	2300      	movs	r3, #0
   355a8:	4d09      	ldr	r5, [pc, #36]	; (355d0 <ip_interface_init+0x2c>)
   355aa:	4c0a      	ldr	r4, [pc, #40]	; (355d4 <ip_interface_init+0x30>)
   355ac:	4619      	mov	r1, r3
   355ae:	2224      	movs	r2, #36	; 0x24
   355b0:	4809      	ldr	r0, [pc, #36]	; (355d8 <ip_interface_init+0x34>)
   355b2:	602b      	str	r3, [r5, #0]
   355b4:	6023      	str	r3, [r4, #0]
   355b6:	f00f fe57 	bl	45268 <memset>
   355ba:	f7ff ff51 	bl	35460 <rpc_ip_client_init>
   355be:	b918      	cbnz	r0, 355c8 <ip_interface_init+0x24>
   355c0:	2201      	movs	r2, #1
   355c2:	4b06      	ldr	r3, [pc, #24]	; (355dc <ip_interface_init+0x38>)
   355c4:	701a      	strb	r2, [r3, #0]
   355c6:	bd38      	pop	{r3, r4, r5, pc}
   355c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   355cc:	bd38      	pop	{r3, r4, r5, pc}
   355ce:	bf00      	nop
   355d0:	20025714 	.word	0x20025714
   355d4:	20025710 	.word	0x20025710
   355d8:	20025718 	.word	0x20025718
   355dc:	2002cb10 	.word	0x2002cb10

000355e0 <ip_interface_deinit>:
   355e0:	b510      	push	{r4, lr}
   355e2:	4c05      	ldr	r4, [pc, #20]	; (355f8 <ip_interface_deinit+0x18>)
   355e4:	7820      	ldrb	r0, [r4, #0]
   355e6:	b900      	cbnz	r0, 355ea <ip_interface_deinit+0xa>
   355e8:	bd10      	pop	{r4, pc}
   355ea:	f7ff ff3f 	bl	3546c <rpc_ip_client_deinit>
   355ee:	b908      	cbnz	r0, 355f4 <ip_interface_deinit+0x14>
   355f0:	7020      	strb	r0, [r4, #0]
   355f2:	bd10      	pop	{r4, pc}
   355f4:	2003      	movs	r0, #3
   355f6:	bd10      	pop	{r4, pc}
   355f8:	2002cb10 	.word	0x2002cb10

000355fc <ip_interface_open>:
   355fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35600:	2500      	movs	r5, #0
   35602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   35606:	4c5e      	ldr	r4, [pc, #376]	; (35780 <ip_interface_open+0x184>)
   35608:	4606      	mov	r6, r0
   3560a:	7820      	ldrb	r0, [r4, #0]
   3560c:	b084      	sub	sp, #16
   3560e:	e9cd 5701 	strd	r5, r7, [sp, #4]
   35612:	2800      	cmp	r0, #0
   35614:	f000 80b0 	beq.w	35778 <ip_interface_open+0x17c>
   35618:	4690      	mov	r8, r2
   3561a:	f026 0208 	bic.w	r2, r6, #8
   3561e:	2a02      	cmp	r2, #2
   35620:	460c      	mov	r4, r1
   35622:	d002      	beq.n	3562a <ip_interface_open+0x2e>
   35624:	2e05      	cmp	r6, #5
   35626:	f040 808d 	bne.w	35744 <ip_interface_open+0x148>
   3562a:	1e63      	subs	r3, r4, #1
   3562c:	2b02      	cmp	r3, #2
   3562e:	f200 809d 	bhi.w	3576c <ip_interface_open+0x170>
   35632:	f1b8 0f00 	cmp.w	r8, #0
   35636:	d159      	bne.n	356ec <ip_interface_open+0xf0>
   35638:	2c01      	cmp	r4, #1
   3563a:	d06f      	beq.n	3571c <ip_interface_open+0x120>
   3563c:	2c03      	cmp	r4, #3
   3563e:	bf18      	it	ne
   35640:	f04f 0802 	movne.w	r8, #2
   35644:	4a4f      	ldr	r2, [pc, #316]	; (35784 <ip_interface_open+0x188>)
   35646:	4621      	mov	r1, r4
   35648:	a801      	add	r0, sp, #4
   3564a:	f005 ff81 	bl	3b550 <interface_socket_allocate>
   3564e:	9b01      	ldr	r3, [sp, #4]
   35650:	4607      	mov	r7, r0
   35652:	2b00      	cmp	r3, #0
   35654:	d060      	beq.n	35718 <ip_interface_open+0x11c>
   35656:	2100      	movs	r1, #0
   35658:	a804      	add	r0, sp, #16
   3565a:	f840 1d04 	str.w	r1, [r0, #-4]!
   3565e:	e9c3 6403 	strd	r6, r4, [r3, #12]
   35662:	f8c3 8014 	str.w	r8, [r3, #20]
   35666:	f7ff ff05 	bl	35474 <rpc_ip_client_request_alloc>
   3566a:	2800      	cmp	r0, #0
   3566c:	d151      	bne.n	35712 <ip_interface_open+0x116>
   3566e:	f247 0201 	movw	r2, #28673	; 0x7001
   35672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35676:	2108      	movs	r1, #8
   35678:	9d03      	ldr	r5, [sp, #12]
   3567a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   3567e:	60ea      	str	r2, [r5, #12]
   35680:	7268      	strb	r0, [r5, #9]
   35682:	72a8      	strb	r0, [r5, #10]
   35684:	72e8      	strb	r0, [r5, #11]
   35686:	7229      	strb	r1, [r5, #8]
   35688:	742b      	strb	r3, [r5, #16]
   3568a:	746b      	strb	r3, [r5, #17]
   3568c:	74ab      	strb	r3, [r5, #18]
   3568e:	74eb      	strb	r3, [r5, #19]
   35690:	68ab      	ldr	r3, [r5, #8]
   35692:	2e05      	cmp	r6, #5
   35694:	f103 030c 	add.w	r3, r3, #12
   35698:	60ab      	str	r3, [r5, #8]
   3569a:	d003      	beq.n	356a4 <ip_interface_open+0xa8>
   3569c:	2e0a      	cmp	r6, #10
   3569e:	bf14      	ite	ne
   356a0:	2601      	movne	r6, #1
   356a2:	2602      	moveq	r6, #2
   356a4:	616e      	str	r6, [r5, #20]
   356a6:	f8c5 801c 	str.w	r8, [r5, #28]
   356aa:	61ac      	str	r4, [r5, #24]
   356ac:	f247 0101 	movw	r1, #28673	; 0x7001
   356b0:	4628      	mov	r0, r5
   356b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   356b6:	f7ff fef1 	bl	3549c <rpc_ip_client_request_send>
   356ba:	4606      	mov	r6, r0
   356bc:	b380      	cbz	r0, 35720 <ip_interface_open+0x124>
   356be:	6828      	ldr	r0, [r5, #0]
   356c0:	b108      	cbz	r0, 356c6 <ip_interface_open+0xca>
   356c2:	f7ff ff09 	bl	354d8 <rpc_ip_client_data_free>
   356c6:	4628      	mov	r0, r5
   356c8:	f7ff fefe 	bl	354c8 <rpc_ip_client_message_free>
   356cc:	2301      	movs	r3, #1
   356ce:	2523      	movs	r5, #35	; 0x23
   356d0:	f8c8 3000 	str.w	r3, [r8]
   356d4:	4638      	mov	r0, r7
   356d6:	f005 ff9f 	bl	3b618 <interface_socket_free>
   356da:	4628      	mov	r0, r5
   356dc:	f7f4 f81a 	bl	29714 <bsd_os_errno_set>
   356e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   356e4:	4638      	mov	r0, r7
   356e6:	b004      	add	sp, #16
   356e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   356ec:	2c01      	cmp	r4, #1
   356ee:	d00a      	beq.n	35706 <ip_interface_open+0x10a>
   356f0:	2c02      	cmp	r4, #2
   356f2:	d10b      	bne.n	3570c <ip_interface_open+0x110>
   356f4:	f1b8 0f02 	cmp.w	r8, #2
   356f8:	d0a4      	beq.n	35644 <ip_interface_open+0x48>
   356fa:	2029      	movs	r0, #41	; 0x29
   356fc:	f7f4 f80a 	bl	29714 <bsd_os_errno_set>
   35700:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   35704:	e7ee      	b.n	356e4 <ip_interface_open+0xe8>
   35706:	f1b8 0f01 	cmp.w	r8, #1
   3570a:	d1f6      	bne.n	356fa <ip_interface_open+0xfe>
   3570c:	f04f 0802 	mov.w	r8, #2
   35710:	e798      	b.n	35644 <ip_interface_open+0x48>
   35712:	9d03      	ldr	r5, [sp, #12]
   35714:	2d00      	cmp	r5, #0
   35716:	d1bb      	bne.n	35690 <ip_interface_open+0x94>
   35718:	2569      	movs	r5, #105	; 0x69
   3571a:	e7db      	b.n	356d4 <ip_interface_open+0xd8>
   3571c:	46a0      	mov	r8, r4
   3571e:	e791      	b.n	35644 <ip_interface_open+0x48>
   35720:	ab02      	add	r3, sp, #8
   35722:	f64f 72ff 	movw	r2, #65535	; 0xffff
   35726:	2102      	movs	r1, #2
   35728:	4638      	mov	r0, r7
   3572a:	f005 ffc3 	bl	3b6b4 <interface_socket_wait>
   3572e:	4605      	mov	r5, r0
   35730:	2800      	cmp	r0, #0
   35732:	d1cf      	bne.n	356d4 <ip_interface_open+0xd8>
   35734:	4638      	mov	r0, r7
   35736:	f006 f831 	bl	3b79c <interface_socket_from_handle_get>
   3573a:	b138      	cbz	r0, 3574c <ip_interface_open+0x150>
   3573c:	6845      	ldr	r5, [r0, #4]
   3573e:	b12d      	cbz	r5, 3574c <ip_interface_open+0x150>
   35740:	6046      	str	r6, [r0, #4]
   35742:	e7c7      	b.n	356d4 <ip_interface_open+0xd8>
   35744:	202f      	movs	r0, #47	; 0x2f
   35746:	f7f3 ffe5 	bl	29714 <bsd_os_errno_set>
   3574a:	e7cb      	b.n	356e4 <ip_interface_open+0xe8>
   3574c:	3c02      	subs	r4, #2
   3574e:	2c01      	cmp	r4, #1
   35750:	d8c8      	bhi.n	356e4 <ip_interface_open+0xe8>
   35752:	4638      	mov	r0, r7
   35754:	9b01      	ldr	r3, [sp, #4]
   35756:	681a      	ldr	r2, [r3, #0]
   35758:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3575c:	601a      	str	r2, [r3, #0]
   3575e:	681a      	ldr	r2, [r3, #0]
   35760:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   35764:	601a      	str	r2, [r3, #0]
   35766:	b004      	add	sp, #16
   35768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3576c:	2016      	movs	r0, #22
   3576e:	f7f3 ffd1 	bl	29714 <bsd_os_errno_set>
   35772:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   35776:	e7b5      	b.n	356e4 <ip_interface_open+0xe8>
   35778:	2070      	movs	r0, #112	; 0x70
   3577a:	f7f3 ffcb 	bl	29714 <bsd_os_errno_set>
   3577e:	e7b1      	b.n	356e4 <ip_interface_open+0xe8>
   35780:	2002cb10 	.word	0x2002cb10
   35784:	000354e9 	.word	0x000354e9

00035788 <ip_interface_close>:
   35788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35790:	b082      	sub	sp, #8
   35792:	4606      	mov	r6, r0
   35794:	9300      	str	r3, [sp, #0]
   35796:	f006 f801 	bl	3b79c <interface_socket_from_handle_get>
   3579a:	2800      	cmp	r0, #0
   3579c:	d062      	beq.n	35864 <ip_interface_close+0xdc>
   3579e:	4604      	mov	r4, r0
   357a0:	2100      	movs	r1, #0
   357a2:	a802      	add	r0, sp, #8
   357a4:	6827      	ldr	r7, [r4, #0]
   357a6:	f840 1d04 	str.w	r1, [r0, #-4]!
   357aa:	f8d4 8018 	ldr.w	r8, [r4, #24]
   357ae:	f7ff fe61 	bl	35474 <rpc_ip_client_request_alloc>
   357b2:	2800      	cmp	r0, #0
   357b4:	d139      	bne.n	3582a <ip_interface_close+0xa2>
   357b6:	f247 0309 	movw	r3, #28681	; 0x7009
   357ba:	2208      	movs	r2, #8
   357bc:	9d01      	ldr	r5, [sp, #4]
   357be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   357c2:	60eb      	str	r3, [r5, #12]
   357c4:	f8c5 8010 	str.w	r8, [r5, #16]
   357c8:	7268      	strb	r0, [r5, #9]
   357ca:	72a8      	strb	r0, [r5, #10]
   357cc:	72e8      	strb	r0, [r5, #11]
   357ce:	722a      	strb	r2, [r5, #8]
   357d0:	6823      	ldr	r3, [r4, #0]
   357d2:	f247 0109 	movw	r1, #28681	; 0x7009
   357d6:	0c1b      	lsrs	r3, r3, #16
   357d8:	041b      	lsls	r3, r3, #16
   357da:	f043 030d 	orr.w	r3, r3, #13
   357de:	6023      	str	r3, [r4, #0]
   357e0:	6823      	ldr	r3, [r4, #0]
   357e2:	4628      	mov	r0, r5
   357e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   357e8:	6023      	str	r3, [r4, #0]
   357ea:	6823      	ldr	r3, [r4, #0]
   357ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   357f0:	6023      	str	r3, [r4, #0]
   357f2:	f7ff fe53 	bl	3549c <rpc_ip_client_request_send>
   357f6:	bb38      	cbnz	r0, 35848 <ip_interface_close+0xc0>
   357f8:	466b      	mov	r3, sp
   357fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   357fe:	210e      	movs	r1, #14
   35800:	4630      	mov	r0, r6
   35802:	f005 ff57 	bl	3b6b4 <interface_socket_wait>
   35806:	4604      	mov	r4, r0
   35808:	b1a0      	cbz	r0, 35834 <ip_interface_close+0xac>
   3580a:	4c17      	ldr	r4, [pc, #92]	; (35868 <ip_interface_close+0xe0>)
   3580c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   35810:	b120      	cbz	r0, 3581c <ip_interface_close+0x94>
   35812:	f7ff fe59 	bl	354c8 <rpc_ip_client_message_free>
   35816:	2300      	movs	r3, #0
   35818:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   3581c:	4630      	mov	r0, r6
   3581e:	f005 fefb 	bl	3b618 <interface_socket_free>
   35822:	2000      	movs	r0, #0
   35824:	b002      	add	sp, #8
   35826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3582a:	9d01      	ldr	r5, [sp, #4]
   3582c:	200c      	movs	r0, #12
   3582e:	2d00      	cmp	r5, #0
   35830:	d1ce      	bne.n	357d0 <ip_interface_close+0x48>
   35832:	e012      	b.n	3585a <ip_interface_close+0xd2>
   35834:	4630      	mov	r0, r6
   35836:	f005 ffb1 	bl	3b79c <interface_socket_from_handle_get>
   3583a:	2800      	cmp	r0, #0
   3583c:	d0e5      	beq.n	3580a <ip_interface_close+0x82>
   3583e:	6843      	ldr	r3, [r0, #4]
   35840:	2b00      	cmp	r3, #0
   35842:	d0e2      	beq.n	3580a <ip_interface_close+0x82>
   35844:	6044      	str	r4, [r0, #4]
   35846:	e7e0      	b.n	3580a <ip_interface_close+0x82>
   35848:	6828      	ldr	r0, [r5, #0]
   3584a:	b108      	cbz	r0, 35850 <ip_interface_close+0xc8>
   3584c:	f7ff fe44 	bl	354d8 <rpc_ip_client_data_free>
   35850:	4628      	mov	r0, r5
   35852:	f7ff fe39 	bl	354c8 <rpc_ip_client_message_free>
   35856:	2023      	movs	r0, #35	; 0x23
   35858:	6027      	str	r7, [r4, #0]
   3585a:	f7f3 ff5b 	bl	29714 <bsd_os_errno_set>
   3585e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35862:	e7df      	b.n	35824 <ip_interface_close+0x9c>
   35864:	2009      	movs	r0, #9
   35866:	e7f8      	b.n	3585a <ip_interface_close+0xd2>
   35868:	20025718 	.word	0x20025718

0003586c <ip_interface_sendto>:
   3586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35870:	2400      	movs	r4, #0
   35872:	b089      	sub	sp, #36	; 0x24
   35874:	9102      	str	r1, [sp, #8]
   35876:	4615      	mov	r5, r2
   35878:	4699      	mov	r9, r3
   3587a:	9406      	str	r4, [sp, #24]
   3587c:	4607      	mov	r7, r0
   3587e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   35880:	f005 ff8c 	bl	3b79c <interface_socket_from_handle_get>
   35884:	2800      	cmp	r0, #0
   35886:	f000 814c 	beq.w	35b22 <ip_interface_sendto+0x2b6>
   3588a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   3588e:	f300 8139 	bgt.w	35b04 <ip_interface_sendto+0x298>
   35892:	6903      	ldr	r3, [r0, #16]
   35894:	4604      	mov	r4, r0
   35896:	2b01      	cmp	r3, #1
   35898:	f000 80ea 	beq.w	35a70 <ip_interface_sendto+0x204>
   3589c:	6822      	ldr	r2, [r4, #0]
   3589e:	0391      	lsls	r1, r2, #14
   358a0:	d56a      	bpl.n	35978 <ip_interface_sendto+0x10c>
   358a2:	f1b9 0f00 	cmp.w	r9, #0
   358a6:	f000 80f3 	beq.w	35a90 <ip_interface_sendto+0x224>
   358aa:	f019 0f02 	tst.w	r9, #2
   358ae:	f000 8133 	beq.w	35b18 <ip_interface_sendto+0x2ac>
   358b2:	2300      	movs	r3, #0
   358b4:	9303      	str	r3, [sp, #12]
   358b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   358b8:	f247 0806 	movw	r8, #28678	; 0x7006
   358bc:	2b00      	cmp	r3, #0
   358be:	bf08      	it	eq
   358c0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   358c4:	f04f 0b0c 	mov.w	fp, #12
   358c8:	4a9a      	ldr	r2, [pc, #616]	; (35b34 <ip_interface_sendto+0x2c8>)
   358ca:	9307      	str	r3, [sp, #28]
   358cc:	043b      	lsls	r3, r7, #16
   358ce:	9200      	str	r2, [sp, #0]
   358d0:	9304      	str	r3, [sp, #16]
   358d2:	4629      	mov	r1, r5
   358d4:	a806      	add	r0, sp, #24
   358d6:	f7ff fdcd 	bl	35474 <rpc_ip_client_request_alloc>
   358da:	2804      	cmp	r0, #4
   358dc:	f000 8098 	beq.w	35a10 <ip_interface_sendto+0x1a4>
   358e0:	2800      	cmp	r0, #0
   358e2:	f040 8123 	bne.w	35b2c <ip_interface_sendto+0x2c0>
   358e6:	9b06      	ldr	r3, [sp, #24]
   358e8:	f883 b008 	strb.w	fp, [r3, #8]
   358ec:	7258      	strb	r0, [r3, #9]
   358ee:	7298      	strb	r0, [r3, #10]
   358f0:	72d8      	strb	r0, [r3, #11]
   358f2:	2e00      	cmp	r6, #0
   358f4:	d053      	beq.n	3599e <ip_interface_sendto+0x132>
   358f6:	68e2      	ldr	r2, [r4, #12]
   358f8:	6871      	ldr	r1, [r6, #4]
   358fa:	428a      	cmp	r2, r1
   358fc:	f040 809a 	bne.w	35a34 <ip_interface_sendto+0x1c8>
   35900:	7831      	ldrb	r1, [r6, #0]
   35902:	9813      	ldr	r0, [sp, #76]	; 0x4c
   35904:	4288      	cmp	r0, r1
   35906:	d10a      	bne.n	3591e <ip_interface_sendto+0xb2>
   35908:	2a02      	cmp	r2, #2
   3590a:	f103 001c 	add.w	r0, r3, #28
   3590e:	f000 80e7 	beq.w	35ae0 <ip_interface_sendto+0x274>
   35912:	2a0a      	cmp	r2, #10
   35914:	d103      	bne.n	3591e <ip_interface_sendto+0xb2>
   35916:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   35918:	2a24      	cmp	r2, #36	; 0x24
   3591a:	f000 80ce 	beq.w	35aba <ip_interface_sendto+0x24e>
   3591e:	f04f 0a16 	mov.w	sl, #22
   35922:	6818      	ldr	r0, [r3, #0]
   35924:	b110      	cbz	r0, 3592c <ip_interface_sendto+0xc0>
   35926:	f7ff fdd7 	bl	354d8 <rpc_ip_client_data_free>
   3592a:	9b06      	ldr	r3, [sp, #24]
   3592c:	4618      	mov	r0, r3
   3592e:	f7ff fdcb 	bl	354c8 <rpc_ip_client_message_free>
   35932:	6823      	ldr	r3, [r4, #0]
   35934:	0318      	lsls	r0, r3, #12
   35936:	d40b      	bmi.n	35950 <ip_interface_sendto+0xe4>
   35938:	6823      	ldr	r3, [r4, #0]
   3593a:	b29b      	uxth	r3, r3
   3593c:	2b0d      	cmp	r3, #13
   3593e:	d007      	beq.n	35950 <ip_interface_sendto+0xe4>
   35940:	6823      	ldr	r3, [r4, #0]
   35942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   35946:	6023      	str	r3, [r4, #0]
   35948:	6823      	ldr	r3, [r4, #0]
   3594a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3594e:	6023      	str	r3, [r4, #0]
   35950:	f1ba 0f00 	cmp.w	sl, #0
   35954:	f040 8093 	bne.w	35a7e <ip_interface_sendto+0x212>
   35958:	6823      	ldr	r3, [r4, #0]
   3595a:	0119      	lsls	r1, r3, #4
   3595c:	d56d      	bpl.n	35a3a <ip_interface_sendto+0x1ce>
   3595e:	6823      	ldr	r3, [r4, #0]
   35960:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   35964:	6023      	str	r3, [r4, #0]
   35966:	9b00      	ldr	r3, [sp, #0]
   35968:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   3596c:	2800      	cmp	r0, #0
   3596e:	d168      	bne.n	35a42 <ip_interface_sendto+0x1d6>
   35970:	4628      	mov	r0, r5
   35972:	b009      	add	sp, #36	; 0x24
   35974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35978:	6822      	ldr	r2, [r4, #0]
   3597a:	0092      	lsls	r2, r2, #2
   3597c:	d406      	bmi.n	3598c <ip_interface_sendto+0x120>
   3597e:	2b01      	cmp	r3, #1
   35980:	f000 8095 	beq.w	35aae <ip_interface_sendto+0x242>
   35984:	6823      	ldr	r3, [r4, #0]
   35986:	031b      	lsls	r3, r3, #12
   35988:	f140 80b7 	bpl.w	35afa <ip_interface_sendto+0x28e>
   3598c:	6823      	ldr	r3, [r4, #0]
   3598e:	031e      	lsls	r6, r3, #12
   35990:	f140 80bd 	bpl.w	35b0e <ip_interface_sendto+0x2a2>
   35994:	4b67      	ldr	r3, [pc, #412]	; (35b34 <ip_interface_sendto+0x2c8>)
   35996:	f8d4 a008 	ldr.w	sl, [r4, #8]
   3599a:	9300      	str	r3, [sp, #0]
   3599c:	e7d8      	b.n	35950 <ip_interface_sendto+0xe4>
   3599e:	4642      	mov	r2, r8
   359a0:	f8c3 9014 	str.w	r9, [r3, #20]
   359a4:	69a1      	ldr	r1, [r4, #24]
   359a6:	9804      	ldr	r0, [sp, #16]
   359a8:	6119      	str	r1, [r3, #16]
   359aa:	9902      	ldr	r1, [sp, #8]
   359ac:	4302      	orrs	r2, r0
   359ae:	60da      	str	r2, [r3, #12]
   359b0:	605d      	str	r5, [r3, #4]
   359b2:	b119      	cbz	r1, 359bc <ip_interface_sendto+0x150>
   359b4:	6818      	ldr	r0, [r3, #0]
   359b6:	462a      	mov	r2, r5
   359b8:	f00f fc36 	bl	45228 <memcpy>
   359bc:	6823      	ldr	r3, [r4, #0]
   359be:	4641      	mov	r1, r8
   359c0:	9305      	str	r3, [sp, #20]
   359c2:	6823      	ldr	r3, [r4, #0]
   359c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   359c8:	6023      	str	r3, [r4, #0]
   359ca:	6823      	ldr	r3, [r4, #0]
   359cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   359d0:	6023      	str	r3, [r4, #0]
   359d2:	9b06      	ldr	r3, [sp, #24]
   359d4:	4618      	mov	r0, r3
   359d6:	9301      	str	r3, [sp, #4]
   359d8:	f7ff fd60 	bl	3549c <rpc_ip_client_request_send>
   359dc:	9b01      	ldr	r3, [sp, #4]
   359de:	4682      	mov	sl, r0
   359e0:	2800      	cmp	r0, #0
   359e2:	d138      	bne.n	35a56 <ip_interface_sendto+0x1ea>
   359e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   359e8:	ab07      	add	r3, sp, #28
   359ea:	4611      	mov	r1, r2
   359ec:	4638      	mov	r0, r7
   359ee:	f005 fe61 	bl	3b6b4 <interface_socket_wait>
   359f2:	4603      	mov	r3, r0
   359f4:	b198      	cbz	r0, 35a1e <ip_interface_sendto+0x1b2>
   359f6:	6822      	ldr	r2, [r4, #0]
   359f8:	0312      	lsls	r2, r2, #12
   359fa:	d455      	bmi.n	35aa8 <ip_interface_sendto+0x23c>
   359fc:	2b3c      	cmp	r3, #60	; 0x3c
   359fe:	d017      	beq.n	35a30 <ip_interface_sendto+0x1c4>
   35a00:	2b0c      	cmp	r3, #12
   35a02:	d115      	bne.n	35a30 <ip_interface_sendto+0x1c4>
   35a04:	9b00      	ldr	r3, [sp, #0]
   35a06:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   35a0a:	b108      	cbz	r0, 35a10 <ip_interface_sendto+0x1a4>
   35a0c:	f7ff fd5c 	bl	354c8 <rpc_ip_client_message_free>
   35a10:	9b03      	ldr	r3, [sp, #12]
   35a12:	2b00      	cmp	r3, #0
   35a14:	f47f af5d 	bne.w	358d2 <ip_interface_sendto+0x66>
   35a18:	f04f 0a23 	mov.w	sl, #35	; 0x23
   35a1c:	e789      	b.n	35932 <ip_interface_sendto+0xc6>
   35a1e:	9001      	str	r0, [sp, #4]
   35a20:	4638      	mov	r0, r7
   35a22:	f005 febb 	bl	3b79c <interface_socket_from_handle_get>
   35a26:	9b01      	ldr	r3, [sp, #4]
   35a28:	b110      	cbz	r0, 35a30 <ip_interface_sendto+0x1c4>
   35a2a:	6843      	ldr	r3, [r0, #4]
   35a2c:	2b00      	cmp	r3, #0
   35a2e:	d136      	bne.n	35a9e <ip_interface_sendto+0x232>
   35a30:	469a      	mov	sl, r3
   35a32:	e77e      	b.n	35932 <ip_interface_sendto+0xc6>
   35a34:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   35a38:	e773      	b.n	35922 <ip_interface_sendto+0xb6>
   35a3a:	9b00      	ldr	r3, [sp, #0]
   35a3c:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   35a40:	6985      	ldr	r5, [r0, #24]
   35a42:	f7ff fd41 	bl	354c8 <rpc_ip_client_message_free>
   35a46:	2300      	movs	r3, #0
   35a48:	4628      	mov	r0, r5
   35a4a:	9a00      	ldr	r2, [sp, #0]
   35a4c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   35a50:	b009      	add	sp, #36	; 0x24
   35a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35a56:	6818      	ldr	r0, [r3, #0]
   35a58:	469a      	mov	sl, r3
   35a5a:	b108      	cbz	r0, 35a60 <ip_interface_sendto+0x1f4>
   35a5c:	f7ff fd3c 	bl	354d8 <rpc_ip_client_data_free>
   35a60:	4650      	mov	r0, sl
   35a62:	f7ff fd31 	bl	354c8 <rpc_ip_client_message_free>
   35a66:	9b05      	ldr	r3, [sp, #20]
   35a68:	f04f 0a23 	mov.w	sl, #35	; 0x23
   35a6c:	6023      	str	r3, [r4, #0]
   35a6e:	e760      	b.n	35932 <ip_interface_sendto+0xc6>
   35a70:	2e00      	cmp	r6, #0
   35a72:	f43f af13 	beq.w	3589c <ip_interface_sendto+0x30>
   35a76:	f04f 0a38 	mov.w	sl, #56	; 0x38
   35a7a:	4b2e      	ldr	r3, [pc, #184]	; (35b34 <ip_interface_sendto+0x2c8>)
   35a7c:	9300      	str	r3, [sp, #0]
   35a7e:	4650      	mov	r0, sl
   35a80:	f7f3 fe48 	bl	29714 <bsd_os_errno_set>
   35a84:	9b00      	ldr	r3, [sp, #0]
   35a86:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35a8a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   35a8e:	e76d      	b.n	3596c <ip_interface_sendto+0x100>
   35a90:	6823      	ldr	r3, [r4, #0]
   35a92:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   35a96:	f3c3 7300 	ubfx	r3, r3, #28, #1
   35a9a:	9303      	str	r3, [sp, #12]
   35a9c:	e70b      	b.n	358b6 <ip_interface_sendto+0x4a>
   35a9e:	f8c0 a004 	str.w	sl, [r0, #4]
   35aa2:	6822      	ldr	r2, [r4, #0]
   35aa4:	0312      	lsls	r2, r2, #12
   35aa6:	d5a9      	bpl.n	359fc <ip_interface_sendto+0x190>
   35aa8:	f8d4 a008 	ldr.w	sl, [r4, #8]
   35aac:	e741      	b.n	35932 <ip_interface_sendto+0xc6>
   35aae:	6823      	ldr	r3, [r4, #0]
   35ab0:	b29b      	uxth	r3, r3
   35ab2:	2b05      	cmp	r3, #5
   35ab4:	f47f af6a 	bne.w	3598c <ip_interface_sendto+0x120>
   35ab8:	e764      	b.n	35984 <ip_interface_sendto+0x118>
   35aba:	2210      	movs	r2, #16
   35abc:	8931      	ldrh	r1, [r6, #8]
   35abe:	835a      	strh	r2, [r3, #26]
   35ac0:	8319      	strh	r1, [r3, #24]
   35ac2:	18b1      	adds	r1, r6, r2
   35ac4:	f00f fbb0 	bl	45228 <memcpy>
   35ac8:	f247 0207 	movw	r2, #28679	; 0x7007
   35acc:	9b06      	ldr	r3, [sp, #24]
   35ace:	4690      	mov	r8, r2
   35ad0:	6899      	ldr	r1, [r3, #8]
   35ad2:	8b58      	ldrh	r0, [r3, #26]
   35ad4:	3104      	adds	r1, #4
   35ad6:	4401      	add	r1, r0
   35ad8:	f8c3 9014 	str.w	r9, [r3, #20]
   35adc:	6099      	str	r1, [r3, #8]
   35ade:	e761      	b.n	359a4 <ip_interface_sendto+0x138>
   35ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   35ae2:	2a10      	cmp	r2, #16
   35ae4:	f47f af1b 	bne.w	3591e <ip_interface_sendto+0xb2>
   35ae8:	2204      	movs	r2, #4
   35aea:	8931      	ldrh	r1, [r6, #8]
   35aec:	835a      	strh	r2, [r3, #26]
   35aee:	8319      	strh	r1, [r3, #24]
   35af0:	f106 010c 	add.w	r1, r6, #12
   35af4:	f00f fb98 	bl	45228 <memcpy>
   35af8:	e7e6      	b.n	35ac8 <ip_interface_sendto+0x25c>
   35afa:	4b0e      	ldr	r3, [pc, #56]	; (35b34 <ip_interface_sendto+0x2c8>)
   35afc:	f04f 0a23 	mov.w	sl, #35	; 0x23
   35b00:	9300      	str	r3, [sp, #0]
   35b02:	e7bc      	b.n	35a7e <ip_interface_sendto+0x212>
   35b04:	4b0b      	ldr	r3, [pc, #44]	; (35b34 <ip_interface_sendto+0x2c8>)
   35b06:	f04f 0a28 	mov.w	sl, #40	; 0x28
   35b0a:	9300      	str	r3, [sp, #0]
   35b0c:	e7b7      	b.n	35a7e <ip_interface_sendto+0x212>
   35b0e:	4b09      	ldr	r3, [pc, #36]	; (35b34 <ip_interface_sendto+0x2c8>)
   35b10:	f04f 0a39 	mov.w	sl, #57	; 0x39
   35b14:	9300      	str	r3, [sp, #0]
   35b16:	e7b2      	b.n	35a7e <ip_interface_sendto+0x212>
   35b18:	4b06      	ldr	r3, [pc, #24]	; (35b34 <ip_interface_sendto+0x2c8>)
   35b1a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   35b1e:	9300      	str	r3, [sp, #0]
   35b20:	e7ad      	b.n	35a7e <ip_interface_sendto+0x212>
   35b22:	4b04      	ldr	r3, [pc, #16]	; (35b34 <ip_interface_sendto+0x2c8>)
   35b24:	f04f 0a09 	mov.w	sl, #9
   35b28:	9300      	str	r3, [sp, #0]
   35b2a:	e7a8      	b.n	35a7e <ip_interface_sendto+0x212>
   35b2c:	f04f 0a0c 	mov.w	sl, #12
   35b30:	e6ff      	b.n	35932 <ip_interface_sendto+0xc6>
   35b32:	bf00      	nop
   35b34:	20025718 	.word	0x20025718

00035b38 <ip_interface_recvfrom>:
   35b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b3c:	b087      	sub	sp, #28
   35b3e:	2a00      	cmp	r2, #0
   35b40:	f000 8112 	beq.w	35d68 <ip_interface_recvfrom+0x230>
   35b44:	4680      	mov	r8, r0
   35b46:	468b      	mov	fp, r1
   35b48:	469a      	mov	sl, r3
   35b4a:	4691      	mov	r9, r2
   35b4c:	b11b      	cbz	r3, 35b56 <ip_interface_recvfrom+0x1e>
   35b4e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   35b52:	f000 8107 	beq.w	35d64 <ip_interface_recvfrom+0x22c>
   35b56:	4640      	mov	r0, r8
   35b58:	f005 fe20 	bl	3b79c <interface_socket_from_handle_get>
   35b5c:	4604      	mov	r4, r0
   35b5e:	2800      	cmp	r0, #0
   35b60:	f000 8104 	beq.w	35d6c <ip_interface_recvfrom+0x234>
   35b64:	6803      	ldr	r3, [r0, #0]
   35b66:	02db      	lsls	r3, r3, #11
   35b68:	d562      	bpl.n	35c30 <ip_interface_recvfrom+0xf8>
   35b6a:	f01a 0f02 	tst.w	sl, #2
   35b6e:	bf18      	it	ne
   35b70:	2600      	movne	r6, #0
   35b72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35b76:	bf08      	it	eq
   35b78:	6806      	ldreq	r6, [r0, #0]
   35b7a:	f00a 0310 	and.w	r3, sl, #16
   35b7e:	bf04      	itt	eq
   35b80:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   35b84:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   35b88:	9301      	str	r3, [sp, #4]
   35b8a:	6823      	ldr	r3, [r4, #0]
   35b8c:	03df      	lsls	r7, r3, #15
   35b8e:	d567      	bpl.n	35c60 <ip_interface_recvfrom+0x128>
   35b90:	6823      	ldr	r3, [r4, #0]
   35b92:	69e0      	ldr	r0, [r4, #28]
   35b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   35b98:	6023      	str	r3, [r4, #0]
   35b9a:	6803      	ldr	r3, [r0, #0]
   35b9c:	68db      	ldr	r3, [r3, #12]
   35b9e:	4798      	blx	r3
   35ba0:	4605      	mov	r5, r0
   35ba2:	3001      	adds	r0, #1
   35ba4:	d07d      	beq.n	35ca2 <ip_interface_recvfrom+0x16a>
   35ba6:	45a9      	cmp	r9, r5
   35ba8:	dd03      	ble.n	35bb2 <ip_interface_recvfrom+0x7a>
   35baa:	6923      	ldr	r3, [r4, #16]
   35bac:	2b01      	cmp	r3, #1
   35bae:	f000 80a3 	beq.w	35cf8 <ip_interface_recvfrom+0x1c0>
   35bb2:	f04f 0800 	mov.w	r8, #0
   35bb6:	af02      	add	r7, sp, #8
   35bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   35bba:	b103      	cbz	r3, 35bbe <ip_interface_recvfrom+0x86>
   35bbc:	681b      	ldr	r3, [r3, #0]
   35bbe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   35bc0:	e9cd b902 	strd	fp, r9, [sp, #8]
   35bc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   35bc8:	69e0      	ldr	r0, [r4, #28]
   35bca:	4639      	mov	r1, r7
   35bcc:	6803      	ldr	r3, [r0, #0]
   35bce:	4652      	mov	r2, sl
   35bd0:	689b      	ldr	r3, [r3, #8]
   35bd2:	4798      	blx	r3
   35bd4:	4605      	mov	r5, r0
   35bd6:	69e0      	ldr	r0, [r4, #28]
   35bd8:	1c6b      	adds	r3, r5, #1
   35bda:	6803      	ldr	r3, [r0, #0]
   35bdc:	bf18      	it	ne
   35bde:	2701      	movne	r7, #1
   35be0:	68db      	ldr	r3, [r3, #12]
   35be2:	bf0a      	itet	eq
   35be4:	2700      	moveq	r7, #0
   35be6:	2600      	movne	r6, #0
   35be8:	2623      	moveq	r6, #35	; 0x23
   35bea:	4798      	blx	r3
   35bec:	3001      	adds	r0, #1
   35bee:	d132      	bne.n	35c56 <ip_interface_recvfrom+0x11e>
   35bf0:	f1b8 0f00 	cmp.w	r8, #0
   35bf4:	f000 80b0 	beq.w	35d58 <ip_interface_recvfrom+0x220>
   35bf8:	2f00      	cmp	r7, #0
   35bfa:	f000 80a1 	beq.w	35d40 <ip_interface_recvfrom+0x208>
   35bfe:	6823      	ldr	r3, [r4, #0]
   35c00:	0318      	lsls	r0, r3, #12
   35c02:	d506      	bpl.n	35c12 <ip_interface_recvfrom+0xda>
   35c04:	6823      	ldr	r3, [r4, #0]
   35c06:	b29b      	uxth	r3, r3
   35c08:	2b0d      	cmp	r3, #13
   35c0a:	d002      	beq.n	35c12 <ip_interface_recvfrom+0xda>
   35c0c:	6923      	ldr	r3, [r4, #16]
   35c0e:	2b01      	cmp	r3, #1
   35c10:	d021      	beq.n	35c56 <ip_interface_recvfrom+0x11e>
   35c12:	6823      	ldr	r3, [r4, #0]
   35c14:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   35c18:	6823      	ldr	r3, [r4, #0]
   35c1a:	f040 80a9 	bne.w	35d70 <ip_interface_recvfrom+0x238>
   35c1e:	0319      	lsls	r1, r3, #12
   35c20:	d473      	bmi.n	35d0a <ip_interface_recvfrom+0x1d2>
   35c22:	2e00      	cmp	r6, #0
   35c24:	f040 8086 	bne.w	35d34 <ip_interface_recvfrom+0x1fc>
   35c28:	4628      	mov	r0, r5
   35c2a:	b007      	add	sp, #28
   35c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c30:	6803      	ldr	r3, [r0, #0]
   35c32:	b29b      	uxth	r3, r3
   35c34:	2b06      	cmp	r3, #6
   35c36:	d071      	beq.n	35d1c <ip_interface_recvfrom+0x1e4>
   35c38:	6803      	ldr	r3, [r0, #0]
   35c3a:	b29b      	uxth	r3, r3
   35c3c:	2b07      	cmp	r3, #7
   35c3e:	bf0c      	ite	eq
   35c40:	2609      	moveq	r6, #9
   35c42:	2639      	movne	r6, #57	; 0x39
   35c44:	69e0      	ldr	r0, [r4, #28]
   35c46:	6803      	ldr	r3, [r0, #0]
   35c48:	68db      	ldr	r3, [r3, #12]
   35c4a:	4798      	blx	r3
   35c4c:	1c43      	adds	r3, r0, #1
   35c4e:	4605      	mov	r5, r0
   35c50:	d0df      	beq.n	35c12 <ip_interface_recvfrom+0xda>
   35c52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35c56:	6823      	ldr	r3, [r4, #0]
   35c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35c5c:	6023      	str	r3, [r4, #0]
   35c5e:	e7e0      	b.n	35c22 <ip_interface_recvfrom+0xea>
   35c60:	2e00      	cmp	r6, #0
   35c62:	d07d      	beq.n	35d60 <ip_interface_recvfrom+0x228>
   35c64:	6a26      	ldr	r6, [r4, #32]
   35c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   35c6a:	2e00      	cmp	r6, #0
   35c6c:	bf08      	it	eq
   35c6e:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   35c72:	af02      	add	r7, sp, #8
   35c74:	463b      	mov	r3, r7
   35c76:	4611      	mov	r1, r2
   35c78:	4640      	mov	r0, r8
   35c7a:	9602      	str	r6, [sp, #8]
   35c7c:	f005 fd1a 	bl	3b6b4 <interface_socket_wait>
   35c80:	4606      	mov	r6, r0
   35c82:	b350      	cbz	r0, 35cda <ip_interface_recvfrom+0x1a2>
   35c84:	6823      	ldr	r3, [r4, #0]
   35c86:	031a      	lsls	r2, r3, #12
   35c88:	d532      	bpl.n	35cf0 <ip_interface_recvfrom+0x1b8>
   35c8a:	6823      	ldr	r3, [r4, #0]
   35c8c:	b29b      	uxth	r3, r3
   35c8e:	2b0d      	cmp	r3, #13
   35c90:	d02e      	beq.n	35cf0 <ip_interface_recvfrom+0x1b8>
   35c92:	6923      	ldr	r3, [r4, #16]
   35c94:	f1a3 0801 	sub.w	r8, r3, #1
   35c98:	fab8 f888 	clz	r8, r8
   35c9c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   35ca0:	e78a      	b.n	35bb8 <ip_interface_recvfrom+0x80>
   35ca2:	6823      	ldr	r3, [r4, #0]
   35ca4:	031a      	lsls	r2, r3, #12
   35ca6:	d5db      	bpl.n	35c60 <ip_interface_recvfrom+0x128>
   35ca8:	6823      	ldr	r3, [r4, #0]
   35caa:	b29b      	uxth	r3, r3
   35cac:	2b0d      	cmp	r3, #13
   35cae:	d0d7      	beq.n	35c60 <ip_interface_recvfrom+0x128>
   35cb0:	6923      	ldr	r3, [r4, #16]
   35cb2:	69e0      	ldr	r0, [r4, #28]
   35cb4:	2b01      	cmp	r3, #1
   35cb6:	d033      	beq.n	35d20 <ip_interface_recvfrom+0x1e8>
   35cb8:	2639      	movs	r6, #57	; 0x39
   35cba:	6823      	ldr	r3, [r4, #0]
   35cbc:	0c1b      	lsrs	r3, r3, #16
   35cbe:	041b      	lsls	r3, r3, #16
   35cc0:	f043 030d 	orr.w	r3, r3, #13
   35cc4:	6023      	str	r3, [r4, #0]
   35cc6:	6823      	ldr	r3, [r4, #0]
   35cc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   35ccc:	6023      	str	r3, [r4, #0]
   35cce:	6803      	ldr	r3, [r0, #0]
   35cd0:	68db      	ldr	r3, [r3, #12]
   35cd2:	4798      	blx	r3
   35cd4:	3001      	adds	r0, #1
   35cd6:	d1be      	bne.n	35c56 <ip_interface_recvfrom+0x11e>
   35cd8:	e79b      	b.n	35c12 <ip_interface_recvfrom+0xda>
   35cda:	4640      	mov	r0, r8
   35cdc:	f005 fd5e 	bl	3b79c <interface_socket_from_handle_get>
   35ce0:	b140      	cbz	r0, 35cf4 <ip_interface_recvfrom+0x1bc>
   35ce2:	6846      	ldr	r6, [r0, #4]
   35ce4:	b136      	cbz	r6, 35cf4 <ip_interface_recvfrom+0x1bc>
   35ce6:	2300      	movs	r3, #0
   35ce8:	6043      	str	r3, [r0, #4]
   35cea:	6823      	ldr	r3, [r4, #0]
   35cec:	031a      	lsls	r2, r3, #12
   35cee:	d4cc      	bmi.n	35c8a <ip_interface_recvfrom+0x152>
   35cf0:	69e0      	ldr	r0, [r4, #28]
   35cf2:	e7ec      	b.n	35cce <ip_interface_recvfrom+0x196>
   35cf4:	2601      	movs	r6, #1
   35cf6:	e748      	b.n	35b8a <ip_interface_recvfrom+0x52>
   35cf8:	9b01      	ldr	r3, [sp, #4]
   35cfa:	b11b      	cbz	r3, 35d04 <ip_interface_recvfrom+0x1cc>
   35cfc:	6823      	ldr	r3, [r4, #0]
   35cfe:	00d9      	lsls	r1, r3, #3
   35d00:	d5b0      	bpl.n	35c64 <ip_interface_recvfrom+0x12c>
   35d02:	e756      	b.n	35bb2 <ip_interface_recvfrom+0x7a>
   35d04:	4698      	mov	r8, r3
   35d06:	af02      	add	r7, sp, #8
   35d08:	e756      	b.n	35bb8 <ip_interface_recvfrom+0x80>
   35d0a:	6823      	ldr	r3, [r4, #0]
   35d0c:	b29b      	uxth	r3, r3
   35d0e:	2b0d      	cmp	r3, #13
   35d10:	d187      	bne.n	35c22 <ip_interface_recvfrom+0xea>
   35d12:	68a3      	ldr	r3, [r4, #8]
   35d14:	2b00      	cmp	r3, #0
   35d16:	d084      	beq.n	35c22 <ip_interface_recvfrom+0xea>
   35d18:	68a6      	ldr	r6, [r4, #8]
   35d1a:	e782      	b.n	35c22 <ip_interface_recvfrom+0xea>
   35d1c:	2609      	movs	r6, #9
   35d1e:	e791      	b.n	35c44 <ip_interface_recvfrom+0x10c>
   35d20:	6803      	ldr	r3, [r0, #0]
   35d22:	68db      	ldr	r3, [r3, #12]
   35d24:	4798      	blx	r3
   35d26:	3001      	adds	r0, #1
   35d28:	d00a      	beq.n	35d40 <ip_interface_recvfrom+0x208>
   35d2a:	2623      	movs	r6, #35	; 0x23
   35d2c:	6823      	ldr	r3, [r4, #0]
   35d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35d32:	6023      	str	r3, [r4, #0]
   35d34:	4630      	mov	r0, r6
   35d36:	f7f3 fced 	bl	29714 <bsd_os_errno_set>
   35d3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35d3e:	e773      	b.n	35c28 <ip_interface_recvfrom+0xf0>
   35d40:	6823      	ldr	r3, [r4, #0]
   35d42:	2500      	movs	r5, #0
   35d44:	0c1b      	lsrs	r3, r3, #16
   35d46:	041b      	lsls	r3, r3, #16
   35d48:	f043 030d 	orr.w	r3, r3, #13
   35d4c:	6023      	str	r3, [r4, #0]
   35d4e:	6823      	ldr	r3, [r4, #0]
   35d50:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   35d54:	6023      	str	r3, [r4, #0]
   35d56:	e767      	b.n	35c28 <ip_interface_recvfrom+0xf0>
   35d58:	2f00      	cmp	r7, #0
   35d5a:	f47f af50 	bne.w	35bfe <ip_interface_recvfrom+0xc6>
   35d5e:	e758      	b.n	35c12 <ip_interface_recvfrom+0xda>
   35d60:	2623      	movs	r6, #35	; 0x23
   35d62:	e7c5      	b.n	35cf0 <ip_interface_recvfrom+0x1b8>
   35d64:	262d      	movs	r6, #45	; 0x2d
   35d66:	e7e5      	b.n	35d34 <ip_interface_recvfrom+0x1fc>
   35d68:	2616      	movs	r6, #22
   35d6a:	e7e3      	b.n	35d34 <ip_interface_recvfrom+0x1fc>
   35d6c:	2609      	movs	r6, #9
   35d6e:	e7e1      	b.n	35d34 <ip_interface_recvfrom+0x1fc>
   35d70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   35d74:	6023      	str	r3, [r4, #0]
   35d76:	6823      	ldr	r3, [r4, #0]
   35d78:	2669      	movs	r6, #105	; 0x69
   35d7a:	0c1b      	lsrs	r3, r3, #16
   35d7c:	041b      	lsls	r3, r3, #16
   35d7e:	f043 030d 	orr.w	r3, r3, #13
   35d82:	6023      	str	r3, [r4, #0]
   35d84:	e7d6      	b.n	35d34 <ip_interface_recvfrom+0x1fc>
   35d86:	bf00      	nop

00035d88 <ip_interface_connect>:
   35d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35d8c:	b082      	sub	sp, #8
   35d8e:	2900      	cmp	r1, #0
   35d90:	d04b      	beq.n	35e2a <ip_interface_connect+0xa2>
   35d92:	4617      	mov	r7, r2
   35d94:	2a00      	cmp	r2, #0
   35d96:	d048      	beq.n	35e2a <ip_interface_connect+0xa2>
   35d98:	4680      	mov	r8, r0
   35d9a:	4689      	mov	r9, r1
   35d9c:	f005 fcfe 	bl	3b79c <interface_socket_from_handle_get>
   35da0:	4605      	mov	r5, r0
   35da2:	2800      	cmp	r0, #0
   35da4:	f000 80af 	beq.w	35f06 <ip_interface_connect+0x17e>
   35da8:	6803      	ldr	r3, [r0, #0]
   35daa:	b29b      	uxth	r3, r3
   35dac:	2b02      	cmp	r3, #2
   35dae:	d004      	beq.n	35dba <ip_interface_connect+0x32>
   35db0:	6803      	ldr	r3, [r0, #0]
   35db2:	b29b      	uxth	r3, r3
   35db4:	2b04      	cmp	r3, #4
   35db6:	f040 809d 	bne.w	35ef4 <ip_interface_connect+0x16c>
   35dba:	6829      	ldr	r1, [r5, #0]
   35dbc:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   35dc0:	f040 8089 	bne.w	35ed6 <ip_interface_connect+0x14e>
   35dc4:	ae02      	add	r6, sp, #8
   35dc6:	f8d5 a018 	ldr.w	sl, [r5, #24]
   35dca:	f846 1d04 	str.w	r1, [r6, #-4]!
   35dce:	4630      	mov	r0, r6
   35dd0:	f7ff fb50 	bl	35474 <rpc_ip_client_request_alloc>
   35dd4:	bb98      	cbnz	r0, 35e3e <ip_interface_connect+0xb6>
   35dd6:	2108      	movs	r1, #8
   35dd8:	ea4f 4208 	mov.w	r2, r8, lsl #16
   35ddc:	9c01      	ldr	r4, [sp, #4]
   35dde:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   35de2:	f043 0302 	orr.w	r3, r3, #2
   35de6:	60e3      	str	r3, [r4, #12]
   35de8:	f8c4 a010 	str.w	sl, [r4, #16]
   35dec:	7260      	strb	r0, [r4, #9]
   35dee:	72a0      	strb	r0, [r4, #10]
   35df0:	72e0      	strb	r0, [r4, #11]
   35df2:	7221      	strb	r1, [r4, #8]
   35df4:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   35df8:	f042 0202 	orr.w	r2, r2, #2
   35dfc:	60e2      	str	r2, [r4, #12]
   35dfe:	68a3      	ldr	r3, [r4, #8]
   35e00:	69aa      	ldr	r2, [r5, #24]
   35e02:	3304      	adds	r3, #4
   35e04:	6122      	str	r2, [r4, #16]
   35e06:	60a3      	str	r3, [r4, #8]
   35e08:	68eb      	ldr	r3, [r5, #12]
   35e0a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   35e0e:	4293      	cmp	r3, r2
   35e10:	d11b      	bne.n	35e4a <ip_interface_connect+0xc2>
   35e12:	f899 2000 	ldrb.w	r2, [r9]
   35e16:	4297      	cmp	r7, r2
   35e18:	d107      	bne.n	35e2a <ip_interface_connect+0xa2>
   35e1a:	2b02      	cmp	r3, #2
   35e1c:	f104 0018 	add.w	r0, r4, #24
   35e20:	d015      	beq.n	35e4e <ip_interface_connect+0xc6>
   35e22:	2b0a      	cmp	r3, #10
   35e24:	d101      	bne.n	35e2a <ip_interface_connect+0xa2>
   35e26:	2f24      	cmp	r7, #36	; 0x24
   35e28:	d01d      	beq.n	35e66 <ip_interface_connect+0xde>
   35e2a:	2416      	movs	r4, #22
   35e2c:	4620      	mov	r0, r4
   35e2e:	f7f3 fc71 	bl	29714 <bsd_os_errno_set>
   35e32:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   35e36:	4620      	mov	r0, r4
   35e38:	b002      	add	sp, #8
   35e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35e3e:	9c01      	ldr	r4, [sp, #4]
   35e40:	2c00      	cmp	r4, #0
   35e42:	d05e      	beq.n	35f02 <ip_interface_connect+0x17a>
   35e44:	ea4f 4208 	mov.w	r2, r8, lsl #16
   35e48:	e7d4      	b.n	35df4 <ip_interface_connect+0x6c>
   35e4a:	242f      	movs	r4, #47	; 0x2f
   35e4c:	e7ee      	b.n	35e2c <ip_interface_connect+0xa4>
   35e4e:	2f10      	cmp	r7, #16
   35e50:	d1eb      	bne.n	35e2a <ip_interface_connect+0xa2>
   35e52:	2204      	movs	r2, #4
   35e54:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   35e58:	f109 010c 	add.w	r1, r9, #12
   35e5c:	82e2      	strh	r2, [r4, #22]
   35e5e:	82a3      	strh	r3, [r4, #20]
   35e60:	f00f f9e2 	bl	45228 <memcpy>
   35e64:	e008      	b.n	35e78 <ip_interface_connect+0xf0>
   35e66:	2210      	movs	r2, #16
   35e68:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   35e6c:	eb09 0102 	add.w	r1, r9, r2
   35e70:	82e2      	strh	r2, [r4, #22]
   35e72:	82a3      	strh	r3, [r4, #20]
   35e74:	f00f f9d8 	bl	45228 <memcpy>
   35e78:	68a3      	ldr	r3, [r4, #8]
   35e7a:	8ae2      	ldrh	r2, [r4, #22]
   35e7c:	f247 0102 	movw	r1, #28674	; 0x7002
   35e80:	4413      	add	r3, r2
   35e82:	60a3      	str	r3, [r4, #8]
   35e84:	682f      	ldr	r7, [r5, #0]
   35e86:	682b      	ldr	r3, [r5, #0]
   35e88:	4620      	mov	r0, r4
   35e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   35e8e:	602b      	str	r3, [r5, #0]
   35e90:	f7ff fb04 	bl	3549c <rpc_ip_client_request_send>
   35e94:	b9a8      	cbnz	r0, 35ec2 <ip_interface_connect+0x13a>
   35e96:	682b      	ldr	r3, [r5, #0]
   35e98:	00db      	lsls	r3, r3, #3
   35e9a:	d429      	bmi.n	35ef0 <ip_interface_connect+0x168>
   35e9c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   35e9e:	4633      	mov	r3, r6
   35ea0:	2c00      	cmp	r4, #0
   35ea2:	bf08      	it	eq
   35ea4:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   35ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   35eac:	2105      	movs	r1, #5
   35eae:	4640      	mov	r0, r8
   35eb0:	9401      	str	r4, [sp, #4]
   35eb2:	f005 fbff 	bl	3b6b4 <interface_socket_wait>
   35eb6:	4604      	mov	r4, r0
   35eb8:	b178      	cbz	r0, 35eda <ip_interface_connect+0x152>
   35eba:	2c73      	cmp	r4, #115	; 0x73
   35ebc:	d0b6      	beq.n	35e2c <ip_interface_connect+0xa4>
   35ebe:	602f      	str	r7, [r5, #0]
   35ec0:	e7b4      	b.n	35e2c <ip_interface_connect+0xa4>
   35ec2:	6820      	ldr	r0, [r4, #0]
   35ec4:	b108      	cbz	r0, 35eca <ip_interface_connect+0x142>
   35ec6:	f7ff fb07 	bl	354d8 <rpc_ip_client_data_free>
   35eca:	4620      	mov	r0, r4
   35ecc:	f7ff fafc 	bl	354c8 <rpc_ip_client_message_free>
   35ed0:	2423      	movs	r4, #35	; 0x23
   35ed2:	602f      	str	r7, [r5, #0]
   35ed4:	e7aa      	b.n	35e2c <ip_interface_connect+0xa4>
   35ed6:	2472      	movs	r4, #114	; 0x72
   35ed8:	e7a8      	b.n	35e2c <ip_interface_connect+0xa4>
   35eda:	4640      	mov	r0, r8
   35edc:	f005 fc5e 	bl	3b79c <interface_socket_from_handle_get>
   35ee0:	2800      	cmp	r0, #0
   35ee2:	d0a8      	beq.n	35e36 <ip_interface_connect+0xae>
   35ee4:	6843      	ldr	r3, [r0, #4]
   35ee6:	2b00      	cmp	r3, #0
   35ee8:	d0a5      	beq.n	35e36 <ip_interface_connect+0xae>
   35eea:	6044      	str	r4, [r0, #4]
   35eec:	461c      	mov	r4, r3
   35eee:	e7e4      	b.n	35eba <ip_interface_connect+0x132>
   35ef0:	2473      	movs	r4, #115	; 0x73
   35ef2:	e79b      	b.n	35e2c <ip_interface_connect+0xa4>
   35ef4:	6803      	ldr	r3, [r0, #0]
   35ef6:	b29b      	uxth	r3, r3
   35ef8:	2b05      	cmp	r3, #5
   35efa:	bf14      	ite	ne
   35efc:	2409      	movne	r4, #9
   35efe:	2438      	moveq	r4, #56	; 0x38
   35f00:	e794      	b.n	35e2c <ip_interface_connect+0xa4>
   35f02:	240c      	movs	r4, #12
   35f04:	e792      	b.n	35e2c <ip_interface_connect+0xa4>
   35f06:	2409      	movs	r4, #9
   35f08:	e790      	b.n	35e2c <ip_interface_connect+0xa4>
   35f0a:	bf00      	nop

00035f0c <ip_interface_socketoption_get>:
   35f0c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   35f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   35f14:	b082      	sub	sp, #8
   35f16:	9400      	str	r4, [sp, #0]
   35f18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   35f1a:	2c00      	cmp	r4, #0
   35f1c:	d05b      	beq.n	35fd6 <ip_interface_socketoption_get+0xca>
   35f1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   35f20:	6824      	ldr	r4, [r4, #0]
   35f22:	2c00      	cmp	r4, #0
   35f24:	d057      	beq.n	35fd6 <ip_interface_socketoption_get+0xca>
   35f26:	680c      	ldr	r4, [r1, #0]
   35f28:	0266      	lsls	r6, r4, #9
   35f2a:	d44f      	bmi.n	35fcc <ip_interface_socketoption_get+0xc0>
   35f2c:	680c      	ldr	r4, [r1, #0]
   35f2e:	0225      	lsls	r5, r4, #8
   35f30:	d44c      	bmi.n	35fcc <ip_interface_socketoption_get+0xc0>
   35f32:	680c      	ldr	r4, [r1, #0]
   35f34:	01e4      	lsls	r4, r4, #7
   35f36:	d449      	bmi.n	35fcc <ip_interface_socketoption_get+0xc0>
   35f38:	680c      	ldr	r4, [r1, #0]
   35f3a:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   35f3e:	d145      	bne.n	35fcc <ip_interface_socketoption_get+0xc0>
   35f40:	460c      	mov	r4, r1
   35f42:	680e      	ldr	r6, [r1, #0]
   35f44:	461f      	mov	r7, r3
   35f46:	680b      	ldr	r3, [r1, #0]
   35f48:	4681      	mov	r9, r0
   35f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35f4e:	600b      	str	r3, [r1, #0]
   35f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   35f52:	a802      	add	r0, sp, #8
   35f54:	f840 cd04 	str.w	ip, [r0, #-4]!
   35f58:	6819      	ldr	r1, [r3, #0]
   35f5a:	4615      	mov	r5, r2
   35f5c:	f8d4 b018 	ldr.w	fp, [r4, #24]
   35f60:	f7ff fa88 	bl	35474 <rpc_ip_client_request_alloc>
   35f64:	2800      	cmp	r0, #0
   35f66:	d146      	bne.n	35ff6 <ip_interface_socketoption_get+0xea>
   35f68:	f247 0304 	movw	r3, #28676	; 0x7004
   35f6c:	2208      	movs	r2, #8
   35f6e:	f8dd a004 	ldr.w	sl, [sp, #4]
   35f72:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   35f76:	f8ca 300c 	str.w	r3, [sl, #12]
   35f7a:	f8ca b010 	str.w	fp, [sl, #16]
   35f7e:	f88a 0009 	strb.w	r0, [sl, #9]
   35f82:	f88a 000a 	strb.w	r0, [sl, #10]
   35f86:	f88a 000b 	strb.w	r0, [sl, #11]
   35f8a:	f88a 2008 	strb.w	r2, [sl, #8]
   35f8e:	f8da 3008 	ldr.w	r3, [sl, #8]
   35f92:	f8ca 7018 	str.w	r7, [sl, #24]
   35f96:	3308      	adds	r3, #8
   35f98:	f8ca 5014 	str.w	r5, [sl, #20]
   35f9c:	f8ca 3008 	str.w	r3, [sl, #8]
   35fa0:	f247 0104 	movw	r1, #28676	; 0x7004
   35fa4:	4650      	mov	r0, sl
   35fa6:	f8da 7000 	ldr.w	r7, [sl]
   35faa:	f7ff fa77 	bl	3549c <rpc_ip_client_request_send>
   35fae:	b9b8      	cbnz	r0, 35fe0 <ip_interface_socketoption_get+0xd4>
   35fb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   35fb4:	466b      	mov	r3, sp
   35fb6:	4611      	mov	r1, r2
   35fb8:	4648      	mov	r0, r9
   35fba:	f005 fb7b 	bl	3b6b4 <interface_socket_wait>
   35fbe:	4605      	mov	r5, r0
   35fc0:	b300      	cbz	r0, 36004 <ip_interface_socketoption_get+0xf8>
   35fc2:	4638      	mov	r0, r7
   35fc4:	f7ff fa88 	bl	354d8 <rpc_ip_client_data_free>
   35fc8:	6026      	str	r6, [r4, #0]
   35fca:	e000      	b.n	35fce <ip_interface_socketoption_get+0xc2>
   35fcc:	2523      	movs	r5, #35	; 0x23
   35fce:	4628      	mov	r0, r5
   35fd0:	b002      	add	sp, #8
   35fd2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   35fd6:	2516      	movs	r5, #22
   35fd8:	4628      	mov	r0, r5
   35fda:	b002      	add	sp, #8
   35fdc:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   35fe0:	f8da 0000 	ldr.w	r0, [sl]
   35fe4:	b108      	cbz	r0, 35fea <ip_interface_socketoption_get+0xde>
   35fe6:	f7ff fa77 	bl	354d8 <rpc_ip_client_data_free>
   35fea:	4650      	mov	r0, sl
   35fec:	f7ff fa6c 	bl	354c8 <rpc_ip_client_message_free>
   35ff0:	2523      	movs	r5, #35	; 0x23
   35ff2:	6026      	str	r6, [r4, #0]
   35ff4:	e7e5      	b.n	35fc2 <ip_interface_socketoption_get+0xb6>
   35ff6:	f8dd a004 	ldr.w	sl, [sp, #4]
   35ffa:	f1ba 0f00 	cmp.w	sl, #0
   35ffe:	d1c6      	bne.n	35f8e <ip_interface_socketoption_get+0x82>
   36000:	250c      	movs	r5, #12
   36002:	e7e1      	b.n	35fc8 <ip_interface_socketoption_get+0xbc>
   36004:	4648      	mov	r0, r9
   36006:	f005 fbc9 	bl	3b79c <interface_socket_from_handle_get>
   3600a:	b120      	cbz	r0, 36016 <ip_interface_socketoption_get+0x10a>
   3600c:	6843      	ldr	r3, [r0, #4]
   3600e:	b113      	cbz	r3, 36016 <ip_interface_socketoption_get+0x10a>
   36010:	6045      	str	r5, [r0, #4]
   36012:	461d      	mov	r5, r3
   36014:	e7d5      	b.n	35fc2 <ip_interface_socketoption_get+0xb6>
   36016:	f8df b050 	ldr.w	fp, [pc, #80]	; 36068 <ip_interface_socketoption_get+0x15c>
   3601a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3601c:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   36020:	681b      	ldr	r3, [r3, #0]
   36022:	b1b0      	cbz	r0, 36052 <ip_interface_socketoption_get+0x146>
   36024:	6842      	ldr	r2, [r0, #4]
   36026:	429a      	cmp	r2, r3
   36028:	d811      	bhi.n	3604e <ip_interface_socketoption_get+0x142>
   3602a:	6801      	ldr	r1, [r0, #0]
   3602c:	b179      	cbz	r1, 3604e <ip_interface_socketoption_get+0x142>
   3602e:	980a      	ldr	r0, [sp, #40]	; 0x28
   36030:	f00f f8fa 	bl	45228 <memcpy>
   36034:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   36038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3603a:	685b      	ldr	r3, [r3, #4]
   3603c:	6013      	str	r3, [r2, #0]
   3603e:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   36042:	f7ff fa41 	bl	354c8 <rpc_ip_client_message_free>
   36046:	2300      	movs	r3, #0
   36048:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   3604c:	e7b9      	b.n	35fc2 <ip_interface_socketoption_get+0xb6>
   3604e:	2516      	movs	r5, #22
   36050:	e7f7      	b.n	36042 <ip_interface_socketoption_get+0x136>
   36052:	461a      	mov	r2, r3
   36054:	980a      	ldr	r0, [sp, #40]	; 0x28
   36056:	4639      	mov	r1, r7
   36058:	f00f f8e6 	bl	45228 <memcpy>
   3605c:	f8da 3004 	ldr.w	r3, [sl, #4]
   36060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   36062:	6013      	str	r3, [r2, #0]
   36064:	e7ad      	b.n	35fc2 <ip_interface_socketoption_get+0xb6>
   36066:	bf00      	nop
   36068:	20025718 	.word	0x20025718

0003606c <ip_interface_socketoption_send>:
   3606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36070:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36074:	680c      	ldr	r4, [r1, #0]
   36076:	b082      	sub	sp, #8
   36078:	0266      	lsls	r6, r4, #9
   3607a:	9500      	str	r5, [sp, #0]
   3607c:	d44d      	bmi.n	3611a <ip_interface_socketoption_send+0xae>
   3607e:	680c      	ldr	r4, [r1, #0]
   36080:	0225      	lsls	r5, r4, #8
   36082:	d44a      	bmi.n	3611a <ip_interface_socketoption_send+0xae>
   36084:	680c      	ldr	r4, [r1, #0]
   36086:	01e4      	lsls	r4, r4, #7
   36088:	d447      	bmi.n	3611a <ip_interface_socketoption_send+0xae>
   3608a:	680c      	ldr	r4, [r1, #0]
   3608c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   36090:	d143      	bne.n	3611a <ip_interface_socketoption_send+0xae>
   36092:	4688      	mov	r8, r1
   36094:	f8d1 9000 	ldr.w	r9, [r1]
   36098:	461f      	mov	r7, r3
   3609a:	680b      	ldr	r3, [r1, #0]
   3609c:	4605      	mov	r5, r0
   3609e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   360a2:	a802      	add	r0, sp, #8
   360a4:	600b      	str	r3, [r1, #0]
   360a6:	f840 4d04 	str.w	r4, [r0, #-4]!
   360aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   360ac:	4616      	mov	r6, r2
   360ae:	f8d8 a018 	ldr.w	sl, [r8, #24]
   360b2:	f7ff f9df 	bl	35474 <rpc_ip_client_request_alloc>
   360b6:	bba8      	cbnz	r0, 36124 <ip_interface_socketoption_send+0xb8>
   360b8:	f247 0303 	movw	r3, #28675	; 0x7003
   360bc:	2208      	movs	r2, #8
   360be:	9c01      	ldr	r4, [sp, #4]
   360c0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   360c4:	60e3      	str	r3, [r4, #12]
   360c6:	f8c4 a010 	str.w	sl, [r4, #16]
   360ca:	7260      	strb	r0, [r4, #9]
   360cc:	72a0      	strb	r0, [r4, #10]
   360ce:	72e0      	strb	r0, [r4, #11]
   360d0:	7222      	strb	r2, [r4, #8]
   360d2:	68a3      	ldr	r3, [r4, #8]
   360d4:	6166      	str	r6, [r4, #20]
   360d6:	3308      	adds	r3, #8
   360d8:	60a3      	str	r3, [r4, #8]
   360da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   360dc:	61a7      	str	r7, [r4, #24]
   360de:	b133      	cbz	r3, 360ee <ip_interface_socketoption_send+0x82>
   360e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   360e2:	b123      	cbz	r3, 360ee <ip_interface_socketoption_send+0x82>
   360e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   360e6:	4619      	mov	r1, r3
   360e8:	6820      	ldr	r0, [r4, #0]
   360ea:	f00f f89d 	bl	45228 <memcpy>
   360ee:	f247 0103 	movw	r1, #28675	; 0x7003
   360f2:	4620      	mov	r0, r4
   360f4:	f7ff f9d2 	bl	3549c <rpc_ip_client_request_send>
   360f8:	4606      	mov	r6, r0
   360fa:	b9c0      	cbnz	r0, 3612e <ip_interface_socketoption_send+0xc2>
   360fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   36100:	466b      	mov	r3, sp
   36102:	4611      	mov	r1, r2
   36104:	4628      	mov	r0, r5
   36106:	f005 fad5 	bl	3b6b4 <interface_socket_wait>
   3610a:	4604      	mov	r4, r0
   3610c:	b1d0      	cbz	r0, 36144 <ip_interface_socketoption_send+0xd8>
   3610e:	4620      	mov	r0, r4
   36110:	f8c8 9000 	str.w	r9, [r8]
   36114:	b002      	add	sp, #8
   36116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3611a:	2423      	movs	r4, #35	; 0x23
   3611c:	4620      	mov	r0, r4
   3611e:	b002      	add	sp, #8
   36120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36124:	9c01      	ldr	r4, [sp, #4]
   36126:	2c00      	cmp	r4, #0
   36128:	d1d3      	bne.n	360d2 <ip_interface_socketoption_send+0x66>
   3612a:	240c      	movs	r4, #12
   3612c:	e7ef      	b.n	3610e <ip_interface_socketoption_send+0xa2>
   3612e:	6820      	ldr	r0, [r4, #0]
   36130:	b108      	cbz	r0, 36136 <ip_interface_socketoption_send+0xca>
   36132:	f7ff f9d1 	bl	354d8 <rpc_ip_client_data_free>
   36136:	4620      	mov	r0, r4
   36138:	f7ff f9c6 	bl	354c8 <rpc_ip_client_message_free>
   3613c:	2423      	movs	r4, #35	; 0x23
   3613e:	f8c8 9000 	str.w	r9, [r8]
   36142:	e7e4      	b.n	3610e <ip_interface_socketoption_send+0xa2>
   36144:	4628      	mov	r0, r5
   36146:	f005 fb29 	bl	3b79c <interface_socket_from_handle_get>
   3614a:	2800      	cmp	r0, #0
   3614c:	d0df      	beq.n	3610e <ip_interface_socketoption_send+0xa2>
   3614e:	6844      	ldr	r4, [r0, #4]
   36150:	2c00      	cmp	r4, #0
   36152:	d0dc      	beq.n	3610e <ip_interface_socketoption_send+0xa2>
   36154:	6046      	str	r6, [r0, #4]
   36156:	e7da      	b.n	3610e <ip_interface_socketoption_send+0xa2>

00036158 <ip_interface_bind>:
   36158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3615c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36160:	b083      	sub	sp, #12
   36162:	9300      	str	r3, [sp, #0]
   36164:	b3b1      	cbz	r1, 361d4 <ip_interface_bind+0x7c>
   36166:	4616      	mov	r6, r2
   36168:	b3a2      	cbz	r2, 361d4 <ip_interface_bind+0x7c>
   3616a:	4607      	mov	r7, r0
   3616c:	4688      	mov	r8, r1
   3616e:	f005 fb15 	bl	3b79c <interface_socket_from_handle_get>
   36172:	4605      	mov	r5, r0
   36174:	2800      	cmp	r0, #0
   36176:	d04a      	beq.n	3620e <ip_interface_bind+0xb6>
   36178:	6803      	ldr	r3, [r0, #0]
   3617a:	b29b      	uxth	r3, r3
   3617c:	2b02      	cmp	r3, #2
   3617e:	d146      	bne.n	3620e <ip_interface_bind+0xb6>
   36180:	2100      	movs	r1, #0
   36182:	a802      	add	r0, sp, #8
   36184:	f840 1d04 	str.w	r1, [r0, #-4]!
   36188:	f8d5 9018 	ldr.w	r9, [r5, #24]
   3618c:	f7ff f972 	bl	35474 <rpc_ip_client_request_alloc>
   36190:	bb50      	cbnz	r0, 361e8 <ip_interface_bind+0x90>
   36192:	f247 0305 	movw	r3, #28677	; 0x7005
   36196:	2208      	movs	r2, #8
   36198:	9c01      	ldr	r4, [sp, #4]
   3619a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   3619e:	60e3      	str	r3, [r4, #12]
   361a0:	f8c4 9010 	str.w	r9, [r4, #16]
   361a4:	7260      	strb	r0, [r4, #9]
   361a6:	72a0      	strb	r0, [r4, #10]
   361a8:	72e0      	strb	r0, [r4, #11]
   361aa:	7222      	strb	r2, [r4, #8]
   361ac:	68a3      	ldr	r3, [r4, #8]
   361ae:	3304      	adds	r3, #4
   361b0:	60a3      	str	r3, [r4, #8]
   361b2:	68eb      	ldr	r3, [r5, #12]
   361b4:	f8d8 2004 	ldr.w	r2, [r8, #4]
   361b8:	4293      	cmp	r3, r2
   361ba:	d11a      	bne.n	361f2 <ip_interface_bind+0x9a>
   361bc:	f898 2000 	ldrb.w	r2, [r8]
   361c0:	4296      	cmp	r6, r2
   361c2:	d107      	bne.n	361d4 <ip_interface_bind+0x7c>
   361c4:	2b02      	cmp	r3, #2
   361c6:	f104 0018 	add.w	r0, r4, #24
   361ca:	d014      	beq.n	361f6 <ip_interface_bind+0x9e>
   361cc:	2b0a      	cmp	r3, #10
   361ce:	d101      	bne.n	361d4 <ip_interface_bind+0x7c>
   361d0:	2e24      	cmp	r6, #36	; 0x24
   361d2:	d01e      	beq.n	36212 <ip_interface_bind+0xba>
   361d4:	2416      	movs	r4, #22
   361d6:	4620      	mov	r0, r4
   361d8:	f7f3 fa9c 	bl	29714 <bsd_os_errno_set>
   361dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   361e0:	4620      	mov	r0, r4
   361e2:	b003      	add	sp, #12
   361e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   361e8:	9c01      	ldr	r4, [sp, #4]
   361ea:	2c00      	cmp	r4, #0
   361ec:	d1de      	bne.n	361ac <ip_interface_bind+0x54>
   361ee:	240c      	movs	r4, #12
   361f0:	e7f1      	b.n	361d6 <ip_interface_bind+0x7e>
   361f2:	242f      	movs	r4, #47	; 0x2f
   361f4:	e7ef      	b.n	361d6 <ip_interface_bind+0x7e>
   361f6:	2e10      	cmp	r6, #16
   361f8:	d1ec      	bne.n	361d4 <ip_interface_bind+0x7c>
   361fa:	2204      	movs	r2, #4
   361fc:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   36200:	f108 010c 	add.w	r1, r8, #12
   36204:	82e2      	strh	r2, [r4, #22]
   36206:	82a3      	strh	r3, [r4, #20]
   36208:	f00f f80e 	bl	45228 <memcpy>
   3620c:	e00a      	b.n	36224 <ip_interface_bind+0xcc>
   3620e:	2409      	movs	r4, #9
   36210:	e7e1      	b.n	361d6 <ip_interface_bind+0x7e>
   36212:	2210      	movs	r2, #16
   36214:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   36218:	eb08 0102 	add.w	r1, r8, r2
   3621c:	82e2      	strh	r2, [r4, #22]
   3621e:	82a3      	strh	r3, [r4, #20]
   36220:	f00f f802 	bl	45228 <memcpy>
   36224:	68a3      	ldr	r3, [r4, #8]
   36226:	8ae2      	ldrh	r2, [r4, #22]
   36228:	f247 0105 	movw	r1, #28677	; 0x7005
   3622c:	4413      	add	r3, r2
   3622e:	60a3      	str	r3, [r4, #8]
   36230:	682b      	ldr	r3, [r5, #0]
   36232:	4620      	mov	r0, r4
   36234:	0c1b      	lsrs	r3, r3, #16
   36236:	041b      	lsls	r3, r3, #16
   36238:	f043 0303 	orr.w	r3, r3, #3
   3623c:	602b      	str	r3, [r5, #0]
   3623e:	682e      	ldr	r6, [r5, #0]
   36240:	f7ff f92c 	bl	3549c <rpc_ip_client_request_send>
   36244:	4680      	mov	r8, r0
   36246:	b978      	cbnz	r0, 36268 <ip_interface_bind+0x110>
   36248:	466b      	mov	r3, sp
   3624a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   3624e:	2104      	movs	r1, #4
   36250:	4638      	mov	r0, r7
   36252:	f005 fa2f 	bl	3b6b4 <interface_socket_wait>
   36256:	4604      	mov	r4, r0
   36258:	b1a0      	cbz	r0, 36284 <ip_interface_bind+0x12c>
   3625a:	682b      	ldr	r3, [r5, #0]
   3625c:	0c1b      	lsrs	r3, r3, #16
   3625e:	041b      	lsls	r3, r3, #16
   36260:	f043 0302 	orr.w	r3, r3, #2
   36264:	602b      	str	r3, [r5, #0]
   36266:	e7b6      	b.n	361d6 <ip_interface_bind+0x7e>
   36268:	6820      	ldr	r0, [r4, #0]
   3626a:	b108      	cbz	r0, 36270 <ip_interface_bind+0x118>
   3626c:	f7ff f934 	bl	354d8 <rpc_ip_client_data_free>
   36270:	0c36      	lsrs	r6, r6, #16
   36272:	0436      	lsls	r6, r6, #16
   36274:	4620      	mov	r0, r4
   36276:	f046 0602 	orr.w	r6, r6, #2
   3627a:	f7ff f925 	bl	354c8 <rpc_ip_client_message_free>
   3627e:	2423      	movs	r4, #35	; 0x23
   36280:	602e      	str	r6, [r5, #0]
   36282:	e7a8      	b.n	361d6 <ip_interface_bind+0x7e>
   36284:	4638      	mov	r0, r7
   36286:	f005 fa89 	bl	3b79c <interface_socket_from_handle_get>
   3628a:	2800      	cmp	r0, #0
   3628c:	d0a8      	beq.n	361e0 <ip_interface_bind+0x88>
   3628e:	6844      	ldr	r4, [r0, #4]
   36290:	2c00      	cmp	r4, #0
   36292:	d0a5      	beq.n	361e0 <ip_interface_bind+0x88>
   36294:	f8c0 8004 	str.w	r8, [r0, #4]
   36298:	e7df      	b.n	3625a <ip_interface_bind+0x102>
   3629a:	bf00      	nop

0003629c <ip_interface_listen>:
   3629c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   362a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   362a4:	b082      	sub	sp, #8
   362a6:	4606      	mov	r6, r0
   362a8:	9300      	str	r3, [sp, #0]
   362aa:	f005 fa77 	bl	3b79c <interface_socket_from_handle_get>
   362ae:	2800      	cmp	r0, #0
   362b0:	d06c      	beq.n	3638c <ip_interface_listen+0xf0>
   362b2:	6803      	ldr	r3, [r0, #0]
   362b4:	4604      	mov	r4, r0
   362b6:	b29b      	uxth	r3, r3
   362b8:	2b04      	cmp	r3, #4
   362ba:	d003      	beq.n	362c4 <ip_interface_listen+0x28>
   362bc:	6803      	ldr	r3, [r0, #0]
   362be:	b29b      	uxth	r3, r3
   362c0:	2b0b      	cmp	r3, #11
   362c2:	d163      	bne.n	3638c <ip_interface_listen+0xf0>
   362c4:	2100      	movs	r1, #0
   362c6:	4a32      	ldr	r2, [pc, #200]	; (36390 <ip_interface_listen+0xf4>)
   362c8:	4630      	mov	r0, r6
   362ca:	f005 f9bb 	bl	3b644 <interface_socket_packet_handler_update>
   362ce:	4601      	mov	r1, r0
   362d0:	2800      	cmp	r0, #0
   362d2:	d159      	bne.n	36388 <ip_interface_listen+0xec>
   362d4:	a802      	add	r0, sp, #8
   362d6:	f840 1d04 	str.w	r1, [r0, #-4]!
   362da:	69a7      	ldr	r7, [r4, #24]
   362dc:	f7ff f8ca 	bl	35474 <rpc_ip_client_request_alloc>
   362e0:	bba0      	cbnz	r0, 3634c <ip_interface_listen+0xb0>
   362e2:	f247 0308 	movw	r3, #28680	; 0x7008
   362e6:	2208      	movs	r2, #8
   362e8:	9d01      	ldr	r5, [sp, #4]
   362ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   362ee:	60eb      	str	r3, [r5, #12]
   362f0:	612f      	str	r7, [r5, #16]
   362f2:	7268      	strb	r0, [r5, #9]
   362f4:	72a8      	strb	r0, [r5, #10]
   362f6:	72e8      	strb	r0, [r5, #11]
   362f8:	722a      	strb	r2, [r5, #8]
   362fa:	68ab      	ldr	r3, [r5, #8]
   362fc:	f247 0108 	movw	r1, #28680	; 0x7008
   36300:	3304      	adds	r3, #4
   36302:	60ab      	str	r3, [r5, #8]
   36304:	6823      	ldr	r3, [r4, #0]
   36306:	4628      	mov	r0, r5
   36308:	0c1b      	lsrs	r3, r3, #16
   3630a:	041b      	lsls	r3, r3, #16
   3630c:	f043 0306 	orr.w	r3, r3, #6
   36310:	6023      	str	r3, [r4, #0]
   36312:	6827      	ldr	r7, [r4, #0]
   36314:	f7ff f8c2 	bl	3549c <rpc_ip_client_request_send>
   36318:	4680      	mov	r8, r0
   3631a:	b9e0      	cbnz	r0, 36356 <ip_interface_listen+0xba>
   3631c:	466b      	mov	r3, sp
   3631e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   36322:	2107      	movs	r1, #7
   36324:	4630      	mov	r0, r6
   36326:	f005 f9c5 	bl	3b6b4 <interface_socket_wait>
   3632a:	4605      	mov	r5, r0
   3632c:	b308      	cbz	r0, 36372 <ip_interface_listen+0xd6>
   3632e:	6823      	ldr	r3, [r4, #0]
   36330:	0c1b      	lsrs	r3, r3, #16
   36332:	041b      	lsls	r3, r3, #16
   36334:	f043 0304 	orr.w	r3, r3, #4
   36338:	6023      	str	r3, [r4, #0]
   3633a:	4628      	mov	r0, r5
   3633c:	f7f3 f9ea 	bl	29714 <bsd_os_errno_set>
   36340:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36344:	4628      	mov	r0, r5
   36346:	b002      	add	sp, #8
   36348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3634c:	9d01      	ldr	r5, [sp, #4]
   3634e:	2d00      	cmp	r5, #0
   36350:	d1d3      	bne.n	362fa <ip_interface_listen+0x5e>
   36352:	250c      	movs	r5, #12
   36354:	e7f1      	b.n	3633a <ip_interface_listen+0x9e>
   36356:	6828      	ldr	r0, [r5, #0]
   36358:	b108      	cbz	r0, 3635e <ip_interface_listen+0xc2>
   3635a:	f7ff f8bd 	bl	354d8 <rpc_ip_client_data_free>
   3635e:	0c3f      	lsrs	r7, r7, #16
   36360:	043f      	lsls	r7, r7, #16
   36362:	4628      	mov	r0, r5
   36364:	f047 0704 	orr.w	r7, r7, #4
   36368:	f7ff f8ae 	bl	354c8 <rpc_ip_client_message_free>
   3636c:	2523      	movs	r5, #35	; 0x23
   3636e:	6027      	str	r7, [r4, #0]
   36370:	e7e3      	b.n	3633a <ip_interface_listen+0x9e>
   36372:	4630      	mov	r0, r6
   36374:	f005 fa12 	bl	3b79c <interface_socket_from_handle_get>
   36378:	2800      	cmp	r0, #0
   3637a:	d0e3      	beq.n	36344 <ip_interface_listen+0xa8>
   3637c:	6845      	ldr	r5, [r0, #4]
   3637e:	2d00      	cmp	r5, #0
   36380:	d0e0      	beq.n	36344 <ip_interface_listen+0xa8>
   36382:	f8c0 8004 	str.w	r8, [r0, #4]
   36386:	e7d2      	b.n	3632e <ip_interface_listen+0x92>
   36388:	2523      	movs	r5, #35	; 0x23
   3638a:	e7d6      	b.n	3633a <ip_interface_listen+0x9e>
   3638c:	2509      	movs	r5, #9
   3638e:	e7d4      	b.n	3633a <ip_interface_listen+0x9e>
   36390:	000354e9 	.word	0x000354e9

00036394 <ip_interface_accept>:
   36394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3639c:	2500      	movs	r5, #0
   3639e:	b087      	sub	sp, #28
   363a0:	460f      	mov	r7, r1
   363a2:	4690      	mov	r8, r2
   363a4:	e9cd 5303 	strd	r5, r3, [sp, #12]
   363a8:	4606      	mov	r6, r0
   363aa:	f005 f9f7 	bl	3b79c <interface_socket_from_handle_get>
   363ae:	4604      	mov	r4, r0
   363b0:	2800      	cmp	r0, #0
   363b2:	f000 8123 	beq.w	365fc <ip_interface_accept+0x268>
   363b6:	6803      	ldr	r3, [r0, #0]
   363b8:	b29b      	uxth	r3, r3
   363ba:	2b07      	cmp	r3, #7
   363bc:	d10a      	bne.n	363d4 <ip_interface_accept+0x40>
   363be:	6803      	ldr	r3, [r0, #0]
   363c0:	6805      	ldr	r5, [r0, #0]
   363c2:	00db      	lsls	r3, r3, #3
   363c4:	d416      	bmi.n	363f4 <ip_interface_accept+0x60>
   363c6:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   363ca:	d019      	beq.n	36400 <ip_interface_accept+0x6c>
   363cc:	6805      	ldr	r5, [r0, #0]
   363ce:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   363d2:	d124      	bne.n	3641e <ip_interface_accept+0x8a>
   363d4:	f04f 0909 	mov.w	r9, #9
   363d8:	9b03      	ldr	r3, [sp, #12]
   363da:	b113      	cbz	r3, 363e2 <ip_interface_accept+0x4e>
   363dc:	4628      	mov	r0, r5
   363de:	f005 f91b 	bl	3b618 <interface_socket_free>
   363e2:	4648      	mov	r0, r9
   363e4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   363e8:	f7f3 f994 	bl	29714 <bsd_os_errno_set>
   363ec:	4648      	mov	r0, r9
   363ee:	b007      	add	sp, #28
   363f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363f4:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   363f8:	d170      	bne.n	364dc <ip_interface_accept+0x148>
   363fa:	f04f 0923 	mov.w	r9, #35	; 0x23
   363fe:	e7eb      	b.n	363d8 <ip_interface_accept+0x44>
   36400:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   36404:	ab04      	add	r3, sp, #16
   36406:	4611      	mov	r1, r2
   36408:	4630      	mov	r0, r6
   3640a:	f005 f953 	bl	3b6b4 <interface_socket_wait>
   3640e:	4681      	mov	r9, r0
   36410:	2800      	cmp	r0, #0
   36412:	f000 8082 	beq.w	3651a <ip_interface_accept+0x186>
   36416:	6825      	ldr	r5, [r4, #0]
   36418:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3641c:	d0dc      	beq.n	363d8 <ip_interface_accept+0x44>
   3641e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36422:	2300      	movs	r3, #0
   36424:	e9cd 0300 	strd	r0, r3, [sp]
   36428:	4a78      	ldr	r2, [pc, #480]	; (3660c <ip_interface_accept+0x278>)
   3642a:	6921      	ldr	r1, [r4, #16]
   3642c:	a803      	add	r0, sp, #12
   3642e:	f005 f88f 	bl	3b550 <interface_socket_allocate>
   36432:	9b03      	ldr	r3, [sp, #12]
   36434:	4605      	mov	r5, r0
   36436:	2b00      	cmp	r3, #0
   36438:	f000 80e4 	beq.w	36604 <ip_interface_accept+0x270>
   3643c:	2100      	movs	r1, #0
   3643e:	6962      	ldr	r2, [r4, #20]
   36440:	a806      	add	r0, sp, #24
   36442:	615a      	str	r2, [r3, #20]
   36444:	68e2      	ldr	r2, [r4, #12]
   36446:	f840 1d04 	str.w	r1, [r0, #-4]!
   3644a:	60da      	str	r2, [r3, #12]
   3644c:	6922      	ldr	r2, [r4, #16]
   3644e:	611a      	str	r2, [r3, #16]
   36450:	f8d4 9018 	ldr.w	r9, [r4, #24]
   36454:	f7ff f80e 	bl	35474 <rpc_ip_client_request_alloc>
   36458:	2800      	cmp	r0, #0
   3645a:	d146      	bne.n	364ea <ip_interface_accept+0x156>
   3645c:	f247 030c 	movw	r3, #28684	; 0x700c
   36460:	2108      	movs	r1, #8
   36462:	f8dd b014 	ldr.w	fp, [sp, #20]
   36466:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   3646a:	f8cb 300c 	str.w	r3, [fp, #12]
   3646e:	f8cb 9010 	str.w	r9, [fp, #16]
   36472:	f88b 0009 	strb.w	r0, [fp, #9]
   36476:	f88b 000a 	strb.w	r0, [fp, #10]
   3647a:	f88b 000b 	strb.w	r0, [fp, #11]
   3647e:	f88b 1008 	strb.w	r1, [fp, #8]
   36482:	6823      	ldr	r3, [r4, #0]
   36484:	f247 010c 	movw	r1, #28684	; 0x700c
   36488:	0c1b      	lsrs	r3, r3, #16
   3648a:	041b      	lsls	r3, r3, #16
   3648c:	f043 0308 	orr.w	r3, r3, #8
   36490:	6023      	str	r3, [r4, #0]
   36492:	4658      	mov	r0, fp
   36494:	f8d4 9000 	ldr.w	r9, [r4]
   36498:	f7ff f800 	bl	3549c <rpc_ip_client_request_send>
   3649c:	4682      	mov	sl, r0
   3649e:	bb60      	cbnz	r0, 364fa <ip_interface_accept+0x166>
   364a0:	6822      	ldr	r2, [r4, #0]
   364a2:	9900      	ldr	r1, [sp, #0]
   364a4:	ab04      	add	r3, sp, #16
   364a6:	400a      	ands	r2, r1
   364a8:	6022      	str	r2, [r4, #0]
   364aa:	2109      	movs	r1, #9
   364ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
   364b0:	4630      	mov	r0, r6
   364b2:	f005 f8ff 	bl	3b6b4 <interface_socket_wait>
   364b6:	4681      	mov	r9, r0
   364b8:	2800      	cmp	r0, #0
   364ba:	f000 808d 	beq.w	365d8 <ip_interface_accept+0x244>
   364be:	6823      	ldr	r3, [r4, #0]
   364c0:	9a01      	ldr	r2, [sp, #4]
   364c2:	431a      	orrs	r2, r3
   364c4:	6022      	str	r2, [r4, #0]
   364c6:	6823      	ldr	r3, [r4, #0]
   364c8:	0c1b      	lsrs	r3, r3, #16
   364ca:	041b      	lsls	r3, r3, #16
   364cc:	f043 0307 	orr.w	r3, r3, #7
   364d0:	6023      	str	r3, [r4, #0]
   364d2:	6823      	ldr	r3, [r4, #0]
   364d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   364d8:	6023      	str	r3, [r4, #0]
   364da:	e77d      	b.n	363d8 <ip_interface_accept+0x44>
   364dc:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   364e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   364e4:	e9cd 2300 	strd	r2, r3, [sp]
   364e8:	e79e      	b.n	36428 <ip_interface_accept+0x94>
   364ea:	f8dd b014 	ldr.w	fp, [sp, #20]
   364ee:	f04f 090c 	mov.w	r9, #12
   364f2:	f1bb 0f00 	cmp.w	fp, #0
   364f6:	d1c4      	bne.n	36482 <ip_interface_accept+0xee>
   364f8:	e76e      	b.n	363d8 <ip_interface_accept+0x44>
   364fa:	f8db 0000 	ldr.w	r0, [fp]
   364fe:	b108      	cbz	r0, 36504 <ip_interface_accept+0x170>
   36500:	f7fe ffea 	bl	354d8 <rpc_ip_client_data_free>
   36504:	ea4f 4919 	mov.w	r9, r9, lsr #16
   36508:	4658      	mov	r0, fp
   3650a:	ea4f 4909 	mov.w	r9, r9, lsl #16
   3650e:	f7fe ffdb 	bl	354c8 <rpc_ip_client_message_free>
   36512:	f049 0307 	orr.w	r3, r9, #7
   36516:	6023      	str	r3, [r4, #0]
   36518:	e76f      	b.n	363fa <ip_interface_accept+0x66>
   3651a:	4630      	mov	r0, r6
   3651c:	f005 f93e 	bl	3b79c <interface_socket_from_handle_get>
   36520:	b130      	cbz	r0, 36530 <ip_interface_accept+0x19c>
   36522:	f8d0 9004 	ldr.w	r9, [r0, #4]
   36526:	f1b9 0f00 	cmp.w	r9, #0
   3652a:	d001      	beq.n	36530 <ip_interface_accept+0x19c>
   3652c:	6045      	str	r5, [r0, #4]
   3652e:	e772      	b.n	36416 <ip_interface_accept+0x82>
   36530:	6823      	ldr	r3, [r4, #0]
   36532:	03d9      	lsls	r1, r3, #15
   36534:	f53f af73 	bmi.w	3641e <ip_interface_accept+0x8a>
   36538:	4d35      	ldr	r5, [pc, #212]	; (36610 <ip_interface_accept+0x27c>)
   3653a:	9903      	ldr	r1, [sp, #12]
   3653c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   36540:	699b      	ldr	r3, [r3, #24]
   36542:	618b      	str	r3, [r1, #24]
   36544:	b147      	cbz	r7, 36558 <ip_interface_accept+0x1c4>
   36546:	68cb      	ldr	r3, [r1, #12]
   36548:	2b0a      	cmp	r3, #10
   3654a:	d028      	beq.n	3659e <ip_interface_accept+0x20a>
   3654c:	2b02      	cmp	r3, #2
   3654e:	d103      	bne.n	36558 <ip_interface_accept+0x1c4>
   36550:	f8d8 2000 	ldr.w	r2, [r8]
   36554:	2a10      	cmp	r2, #16
   36556:	d036      	beq.n	365c6 <ip_interface_accept+0x232>
   36558:	680a      	ldr	r2, [r1, #0]
   3655a:	482e      	ldr	r0, [pc, #184]	; (36614 <ip_interface_accept+0x280>)
   3655c:	4002      	ands	r2, r0
   3655e:	f042 0205 	orr.w	r2, r2, #5
   36562:	600a      	str	r2, [r1, #0]
   36564:	9a03      	ldr	r2, [sp, #12]
   36566:	6811      	ldr	r1, [r2, #0]
   36568:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   3656c:	6011      	str	r1, [r2, #0]
   3656e:	6811      	ldr	r1, [r2, #0]
   36570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   36574:	6011      	str	r1, [r2, #0]
   36576:	6823      	ldr	r3, [r4, #0]
   36578:	4003      	ands	r3, r0
   3657a:	f043 0307 	orr.w	r3, r3, #7
   3657e:	6023      	str	r3, [r4, #0]
   36580:	6823      	ldr	r3, [r4, #0]
   36582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   36586:	6023      	str	r3, [r4, #0]
   36588:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   3658c:	f7fe ff9c 	bl	354c8 <rpc_ip_client_message_free>
   36590:	2300      	movs	r3, #0
   36592:	4648      	mov	r0, r9
   36594:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   36598:	b007      	add	sp, #28
   3659a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3659e:	f8d8 2000 	ldr.w	r2, [r8]
   365a2:	2a24      	cmp	r2, #36	; 0x24
   365a4:	d1d8      	bne.n	36558 <ip_interface_accept+0x1c4>
   365a6:	703a      	strb	r2, [r7, #0]
   365a8:	2210      	movs	r2, #16
   365aa:	607b      	str	r3, [r7, #4]
   365ac:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   365b0:	f107 0010 	add.w	r0, r7, #16
   365b4:	8b9b      	ldrh	r3, [r3, #28]
   365b6:	813b      	strh	r3, [r7, #8]
   365b8:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   365bc:	3120      	adds	r1, #32
   365be:	f00e fe33 	bl	45228 <memcpy>
   365c2:	9903      	ldr	r1, [sp, #12]
   365c4:	e7c8      	b.n	36558 <ip_interface_accept+0x1c4>
   365c6:	703a      	strb	r2, [r7, #0]
   365c8:	607b      	str	r3, [r7, #4]
   365ca:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   365ce:	f107 000c 	add.w	r0, r7, #12
   365d2:	8b9b      	ldrh	r3, [r3, #28]
   365d4:	2204      	movs	r2, #4
   365d6:	e7ee      	b.n	365b6 <ip_interface_accept+0x222>
   365d8:	4630      	mov	r0, r6
   365da:	f005 f8df 	bl	3b79c <interface_socket_from_handle_get>
   365de:	b138      	cbz	r0, 365f0 <ip_interface_accept+0x25c>
   365e0:	f8d0 9004 	ldr.w	r9, [r0, #4]
   365e4:	f1b9 0f00 	cmp.w	r9, #0
   365e8:	d002      	beq.n	365f0 <ip_interface_accept+0x25c>
   365ea:	f8c0 a004 	str.w	sl, [r0, #4]
   365ee:	e766      	b.n	364be <ip_interface_accept+0x12a>
   365f0:	6823      	ldr	r3, [r4, #0]
   365f2:	9a01      	ldr	r2, [sp, #4]
   365f4:	46a9      	mov	r9, r5
   365f6:	4313      	orrs	r3, r2
   365f8:	6023      	str	r3, [r4, #0]
   365fa:	e79d      	b.n	36538 <ip_interface_accept+0x1a4>
   365fc:	4605      	mov	r5, r0
   365fe:	f04f 0909 	mov.w	r9, #9
   36602:	e6e9      	b.n	363d8 <ip_interface_accept+0x44>
   36604:	f04f 090c 	mov.w	r9, #12
   36608:	e6eb      	b.n	363e2 <ip_interface_accept+0x4e>
   3660a:	bf00      	nop
   3660c:	000354e9 	.word	0x000354e9
   36610:	20025718 	.word	0x20025718
   36614:	ffff0000 	.word	0xffff0000

00036618 <ip_interface_setopt>:
   36618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3661c:	2901      	cmp	r1, #1
   3661e:	b084      	sub	sp, #16
   36620:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   36622:	f040 808a 	bne.w	3673a <ip_interface_setopt+0x122>
   36626:	4617      	mov	r7, r2
   36628:	461d      	mov	r5, r3
   3662a:	4680      	mov	r8, r0
   3662c:	f005 f8b6 	bl	3b79c <interface_socket_from_handle_get>
   36630:	4604      	mov	r4, r0
   36632:	2800      	cmp	r0, #0
   36634:	f000 808d 	beq.w	36752 <ip_interface_setopt+0x13a>
   36638:	f1a7 0119 	sub.w	r1, r7, #25
   3663c:	290f      	cmp	r1, #15
   3663e:	d872      	bhi.n	36726 <ip_interface_setopt+0x10e>
   36640:	e8df f001 	tbb	[pc, r1]
   36644:	7171711a 	.word	0x7171711a
   36648:	61514071 	.word	0x61514071
   3664c:	71717171 	.word	0x71717171
   36650:	08717171 	.word	0x08717171
   36654:	2e04      	cmp	r6, #4
   36656:	d176      	bne.n	36746 <ip_interface_setopt+0x12e>
   36658:	2d00      	cmp	r5, #0
   3665a:	d074      	beq.n	36746 <ip_interface_setopt+0x12e>
   3665c:	4601      	mov	r1, r0
   3665e:	e9cd 5600 	strd	r5, r6, [sp]
   36662:	4640      	mov	r0, r8
   36664:	f241 0304 	movw	r3, #4100	; 0x1004
   36668:	2208      	movs	r2, #8
   3666a:	f7ff fcff 	bl	3606c <ip_interface_socketoption_send>
   3666e:	bb20      	cbnz	r0, 366ba <ip_interface_setopt+0xa2>
   36670:	2000      	movs	r0, #0
   36672:	b004      	add	sp, #16
   36674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36678:	2d00      	cmp	r5, #0
   3667a:	d06c      	beq.n	36756 <ip_interface_setopt+0x13e>
   3667c:	4628      	mov	r0, r5
   3667e:	f7e6 fdf1 	bl	1d264 <strlen>
   36682:	42b0      	cmp	r0, r6
   36684:	d167      	bne.n	36756 <ip_interface_setopt+0x13e>
   36686:	6823      	ldr	r3, [r4, #0]
   36688:	b29b      	uxth	r3, r3
   3668a:	2b02      	cmp	r3, #2
   3668c:	d161      	bne.n	36752 <ip_interface_setopt+0x13a>
   3668e:	4629      	mov	r1, r5
   36690:	68e0      	ldr	r0, [r4, #12]
   36692:	f002 fd03 	bl	3909c <pdn_interface_pdn_id_get>
   36696:	9003      	str	r0, [sp, #12]
   36698:	3001      	adds	r0, #1
   3669a:	bf08      	it	eq
   3669c:	2016      	moveq	r0, #22
   3669e:	d00c      	beq.n	366ba <ip_interface_setopt+0xa2>
   366a0:	2204      	movs	r2, #4
   366a2:	ab03      	add	r3, sp, #12
   366a4:	e9cd 3200 	strd	r3, r2, [sp]
   366a8:	4621      	mov	r1, r4
   366aa:	4640      	mov	r0, r8
   366ac:	f243 0310 	movw	r3, #12304	; 0x3010
   366b0:	2208      	movs	r2, #8
   366b2:	f7ff fcdb 	bl	3606c <ip_interface_socketoption_send>
   366b6:	2800      	cmp	r0, #0
   366b8:	d0da      	beq.n	36670 <ip_interface_setopt+0x58>
   366ba:	f7f3 f82b 	bl	29714 <bsd_os_errno_set>
   366be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   366c2:	e7d6      	b.n	36672 <ip_interface_setopt+0x5a>
   366c4:	2e04      	cmp	r6, #4
   366c6:	d13e      	bne.n	36746 <ip_interface_setopt+0x12e>
   366c8:	2d00      	cmp	r5, #0
   366ca:	d03c      	beq.n	36746 <ip_interface_setopt+0x12e>
   366cc:	4601      	mov	r1, r0
   366ce:	e9cd 5600 	strd	r5, r6, [sp]
   366d2:	4640      	mov	r0, r8
   366d4:	f248 0301 	movw	r3, #32769	; 0x8001
   366d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   366dc:	f7ff fcc6 	bl	3606c <ip_interface_socketoption_send>
   366e0:	2800      	cmp	r0, #0
   366e2:	d0c5      	beq.n	36670 <ip_interface_setopt+0x58>
   366e4:	e7e9      	b.n	366ba <ip_interface_setopt+0xa2>
   366e6:	2e04      	cmp	r6, #4
   366e8:	d12d      	bne.n	36746 <ip_interface_setopt+0x12e>
   366ea:	b365      	cbz	r5, 36746 <ip_interface_setopt+0x12e>
   366ec:	4601      	mov	r1, r0
   366ee:	e9cd 5600 	strd	r5, r6, [sp]
   366f2:	4640      	mov	r0, r8
   366f4:	f244 0310 	movw	r3, #16400	; 0x4010
   366f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   366fc:	f7ff fcb6 	bl	3606c <ip_interface_socketoption_send>
   36700:	2800      	cmp	r0, #0
   36702:	d0b5      	beq.n	36670 <ip_interface_setopt+0x58>
   36704:	e7d9      	b.n	366ba <ip_interface_setopt+0xa2>
   36706:	2e04      	cmp	r6, #4
   36708:	d11d      	bne.n	36746 <ip_interface_setopt+0x12e>
   3670a:	b1e5      	cbz	r5, 36746 <ip_interface_setopt+0x12e>
   3670c:	4601      	mov	r1, r0
   3670e:	e9cd 5600 	strd	r5, r6, [sp]
   36712:	4640      	mov	r0, r8
   36714:	f246 0310 	movw	r3, #24592	; 0x6010
   36718:	f44f 7200 	mov.w	r2, #512	; 0x200
   3671c:	f7ff fca6 	bl	3606c <ip_interface_socketoption_send>
   36720:	2800      	cmp	r0, #0
   36722:	d0a5      	beq.n	36670 <ip_interface_setopt+0x58>
   36724:	e7c9      	b.n	366ba <ip_interface_setopt+0xa2>
   36726:	9600      	str	r6, [sp, #0]
   36728:	462b      	mov	r3, r5
   3672a:	463a      	mov	r2, r7
   3672c:	4640      	mov	r0, r8
   3672e:	2101      	movs	r1, #1
   36730:	f005 f85c 	bl	3b7ec <interface_socket_setopt>
   36734:	b004      	add	sp, #16
   36736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3673a:	202a      	movs	r0, #42	; 0x2a
   3673c:	f7f2 ffea 	bl	29714 <bsd_os_errno_set>
   36740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36744:	e795      	b.n	36672 <ip_interface_setopt+0x5a>
   36746:	2016      	movs	r0, #22
   36748:	f7f2 ffe4 	bl	29714 <bsd_os_errno_set>
   3674c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36750:	e78f      	b.n	36672 <ip_interface_setopt+0x5a>
   36752:	2009      	movs	r0, #9
   36754:	e7b1      	b.n	366ba <ip_interface_setopt+0xa2>
   36756:	200e      	movs	r0, #14
   36758:	e7af      	b.n	366ba <ip_interface_setopt+0xa2>
   3675a:	bf00      	nop

0003675c <ip_interface_getopt>:
   3675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36760:	2901      	cmp	r1, #1
   36762:	b082      	sub	sp, #8
   36764:	9c08      	ldr	r4, [sp, #32]
   36766:	d173      	bne.n	36850 <ip_interface_getopt+0xf4>
   36768:	4617      	mov	r7, r2
   3676a:	461e      	mov	r6, r3
   3676c:	4680      	mov	r8, r0
   3676e:	f005 f815 	bl	3b79c <interface_socket_from_handle_get>
   36772:	2800      	cmp	r0, #0
   36774:	d072      	beq.n	3685c <ip_interface_getopt+0x100>
   36776:	f1a7 051e 	sub.w	r5, r7, #30
   3677a:	2d0a      	cmp	r5, #10
   3677c:	d858      	bhi.n	36830 <ip_interface_getopt+0xd4>
   3677e:	e8df f005 	tbb	[pc, r5]
   36782:	331b      	.short	0x331b
   36784:	57575745 	.word	0x57575745
   36788:	57575757 	.word	0x57575757
   3678c:	06          	.byte	0x06
   3678d:	00          	.byte	0x00
   3678e:	2c00      	cmp	r4, #0
   36790:	d058      	beq.n	36844 <ip_interface_getopt+0xe8>
   36792:	6823      	ldr	r3, [r4, #0]
   36794:	2b04      	cmp	r3, #4
   36796:	d155      	bne.n	36844 <ip_interface_getopt+0xe8>
   36798:	2e00      	cmp	r6, #0
   3679a:	d053      	beq.n	36844 <ip_interface_getopt+0xe8>
   3679c:	4601      	mov	r1, r0
   3679e:	e9cd 6400 	strd	r6, r4, [sp]
   367a2:	4640      	mov	r0, r8
   367a4:	f241 0304 	movw	r3, #4100	; 0x1004
   367a8:	2208      	movs	r2, #8
   367aa:	f7ff fbaf 	bl	35f0c <ip_interface_socketoption_get>
   367ae:	b9b0      	cbnz	r0, 367de <ip_interface_getopt+0x82>
   367b0:	2000      	movs	r0, #0
   367b2:	b002      	add	sp, #8
   367b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   367b8:	2c00      	cmp	r4, #0
   367ba:	d043      	beq.n	36844 <ip_interface_getopt+0xe8>
   367bc:	6823      	ldr	r3, [r4, #0]
   367be:	2b04      	cmp	r3, #4
   367c0:	d140      	bne.n	36844 <ip_interface_getopt+0xe8>
   367c2:	2e00      	cmp	r6, #0
   367c4:	d03e      	beq.n	36844 <ip_interface_getopt+0xe8>
   367c6:	4601      	mov	r1, r0
   367c8:	e9cd 6400 	strd	r6, r4, [sp]
   367cc:	4640      	mov	r0, r8
   367ce:	f248 0301 	movw	r3, #32769	; 0x8001
   367d2:	f44f 7200 	mov.w	r2, #512	; 0x200
   367d6:	f7ff fb99 	bl	35f0c <ip_interface_socketoption_get>
   367da:	2800      	cmp	r0, #0
   367dc:	d0e8      	beq.n	367b0 <ip_interface_getopt+0x54>
   367de:	f7f2 ff99 	bl	29714 <bsd_os_errno_set>
   367e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   367e6:	e7e4      	b.n	367b2 <ip_interface_getopt+0x56>
   367e8:	b364      	cbz	r4, 36844 <ip_interface_getopt+0xe8>
   367ea:	6823      	ldr	r3, [r4, #0]
   367ec:	2b04      	cmp	r3, #4
   367ee:	d129      	bne.n	36844 <ip_interface_getopt+0xe8>
   367f0:	b346      	cbz	r6, 36844 <ip_interface_getopt+0xe8>
   367f2:	4601      	mov	r1, r0
   367f4:	e9cd 6400 	strd	r6, r4, [sp]
   367f8:	4640      	mov	r0, r8
   367fa:	f244 0310 	movw	r3, #16400	; 0x4010
   367fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   36802:	f7ff fb83 	bl	35f0c <ip_interface_socketoption_get>
   36806:	2800      	cmp	r0, #0
   36808:	d0d2      	beq.n	367b0 <ip_interface_getopt+0x54>
   3680a:	e7e8      	b.n	367de <ip_interface_getopt+0x82>
   3680c:	b1d4      	cbz	r4, 36844 <ip_interface_getopt+0xe8>
   3680e:	6823      	ldr	r3, [r4, #0]
   36810:	2b04      	cmp	r3, #4
   36812:	d117      	bne.n	36844 <ip_interface_getopt+0xe8>
   36814:	b1b6      	cbz	r6, 36844 <ip_interface_getopt+0xe8>
   36816:	4601      	mov	r1, r0
   36818:	e9cd 6400 	strd	r6, r4, [sp]
   3681c:	4640      	mov	r0, r8
   3681e:	f246 0310 	movw	r3, #24592	; 0x6010
   36822:	f44f 7200 	mov.w	r2, #512	; 0x200
   36826:	f7ff fb71 	bl	35f0c <ip_interface_socketoption_get>
   3682a:	2800      	cmp	r0, #0
   3682c:	d0c0      	beq.n	367b0 <ip_interface_getopt+0x54>
   3682e:	e7d6      	b.n	367de <ip_interface_getopt+0x82>
   36830:	4633      	mov	r3, r6
   36832:	463a      	mov	r2, r7
   36834:	4640      	mov	r0, r8
   36836:	2101      	movs	r1, #1
   36838:	9408      	str	r4, [sp, #32]
   3683a:	b002      	add	sp, #8
   3683c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   36840:	f005 b81a 	b.w	3b878 <interface_socket_getopt>
   36844:	2016      	movs	r0, #22
   36846:	f7f2 ff65 	bl	29714 <bsd_os_errno_set>
   3684a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3684e:	e7b0      	b.n	367b2 <ip_interface_getopt+0x56>
   36850:	202a      	movs	r0, #42	; 0x2a
   36852:	f7f2 ff5f 	bl	29714 <bsd_os_errno_set>
   36856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3685a:	e7aa      	b.n	367b2 <ip_interface_getopt+0x56>
   3685c:	2009      	movs	r0, #9
   3685e:	f7f2 ff59 	bl	29714 <bsd_os_errno_set>
   36862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36866:	e7a4      	b.n	367b2 <ip_interface_getopt+0x56>

00036868 <ip_interface_getaddrinfo>:
   36868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3686c:	f04f 0c00 	mov.w	ip, #0
   36870:	2401      	movs	r4, #1
   36872:	4e75      	ldr	r6, [pc, #468]	; (36a48 <ip_interface_getaddrinfo+0x1e0>)
   36874:	4d75      	ldr	r5, [pc, #468]	; (36a4c <ip_interface_getaddrinfo+0x1e4>)
   36876:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 36a5c <ip_interface_getaddrinfo+0x1f4>
   3687a:	4f75      	ldr	r7, [pc, #468]	; (36a50 <ip_interface_getaddrinfo+0x1e8>)
   3687c:	7836      	ldrb	r6, [r6, #0]
   3687e:	b085      	sub	sp, #20
   36880:	f8a5 c000 	strh.w	ip, [r5]
   36884:	f8c8 4000 	str.w	r4, [r8]
   36888:	603c      	str	r4, [r7, #0]
   3688a:	2e00      	cmp	r6, #0
   3688c:	d05b      	beq.n	36946 <ip_interface_getaddrinfo+0xde>
   3688e:	9301      	str	r3, [sp, #4]
   36890:	4614      	mov	r4, r2
   36892:	460b      	mov	r3, r1
   36894:	4606      	mov	r6, r0
   36896:	b171      	cbz	r1, 368b6 <ip_interface_getaddrinfo+0x4e>
   36898:	4618      	mov	r0, r3
   3689a:	220a      	movs	r2, #10
   3689c:	4661      	mov	r1, ip
   3689e:	f009 fdaf 	bl	40400 <strtol>
   368a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   368a6:	1e42      	subs	r2, r0, #1
   368a8:	429a      	cmp	r2, r3
   368aa:	f200 8097 	bhi.w	369dc <ip_interface_getaddrinfo+0x174>
   368ae:	0203      	lsls	r3, r0, #8
   368b0:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   368b4:	8028      	strh	r0, [r5, #0]
   368b6:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 36a60 <ip_interface_getaddrinfo+0x1f8>
   368ba:	f8da 3000 	ldr.w	r3, [sl]
   368be:	2b00      	cmp	r3, #0
   368c0:	d145      	bne.n	3694e <ip_interface_getaddrinfo+0xe6>
   368c2:	4a64      	ldr	r2, [pc, #400]	; (36a54 <ip_interface_getaddrinfo+0x1ec>)
   368c4:	6013      	str	r3, [r2, #0]
   368c6:	4a64      	ldr	r2, [pc, #400]	; (36a58 <ip_interface_getaddrinfo+0x1f0>)
   368c8:	6013      	str	r3, [r2, #0]
   368ca:	2e00      	cmp	r6, #0
   368cc:	d07a      	beq.n	369c4 <ip_interface_getaddrinfo+0x15c>
   368ce:	4630      	mov	r0, r6
   368d0:	f7e6 fcc8 	bl	1d264 <strlen>
   368d4:	4683      	mov	fp, r0
   368d6:	b144      	cbz	r4, 368ea <ip_interface_getaddrinfo+0x82>
   368d8:	69e2      	ldr	r2, [r4, #28]
   368da:	b132      	cbz	r2, 368ea <ip_interface_getaddrinfo+0x82>
   368dc:	6851      	ldr	r1, [r2, #4]
   368de:	2966      	cmp	r1, #102	; 0x66
   368e0:	d103      	bne.n	368ea <ip_interface_getaddrinfo+0x82>
   368e2:	6891      	ldr	r1, [r2, #8]
   368e4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   368e8:	d07e      	beq.n	369e8 <ip_interface_getaddrinfo+0x180>
   368ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   368ee:	2100      	movs	r1, #0
   368f0:	f10d 0910 	add.w	r9, sp, #16
   368f4:	f849 1d04 	str.w	r1, [r9, #-4]!
   368f8:	4648      	mov	r0, r9
   368fa:	4659      	mov	r1, fp
   368fc:	9200      	str	r2, [sp, #0]
   368fe:	f7fe fdb9 	bl	35474 <rpc_ip_client_request_alloc>
   36902:	9a00      	ldr	r2, [sp, #0]
   36904:	2800      	cmp	r0, #0
   36906:	d15f      	bne.n	369c8 <ip_interface_getaddrinfo+0x160>
   36908:	f247 010d 	movw	r1, #28685	; 0x700d
   3690c:	f04f 0c08 	mov.w	ip, #8
   36910:	9d03      	ldr	r5, [sp, #12]
   36912:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   36916:	60e9      	str	r1, [r5, #12]
   36918:	612a      	str	r2, [r5, #16]
   3691a:	7268      	strb	r0, [r5, #9]
   3691c:	72a8      	strb	r0, [r5, #10]
   3691e:	72e8      	strb	r0, [r5, #11]
   36920:	f885 c008 	strb.w	ip, [r5, #8]
   36924:	2c00      	cmp	r4, #0
   36926:	d076      	beq.n	36a16 <ip_interface_getaddrinfo+0x1ae>
   36928:	6862      	ldr	r2, [r4, #4]
   3692a:	f022 0108 	bic.w	r1, r2, #8
   3692e:	2902      	cmp	r1, #2
   36930:	d011      	beq.n	36956 <ip_interface_getaddrinfo+0xee>
   36932:	2a05      	cmp	r2, #5
   36934:	d176      	bne.n	36a24 <ip_interface_getaddrinfo+0x1bc>
   36936:	68a1      	ldr	r1, [r4, #8]
   36938:	2902      	cmp	r1, #2
   3693a:	6039      	str	r1, [r7, #0]
   3693c:	d115      	bne.n	3696a <ip_interface_getaddrinfo+0x102>
   3693e:	2102      	movs	r1, #2
   36940:	f8c8 1000 	str.w	r1, [r8]
   36944:	e00b      	b.n	3695e <ip_interface_getaddrinfo+0xf6>
   36946:	2070      	movs	r0, #112	; 0x70
   36948:	b005      	add	sp, #20
   3694a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3694e:	2073      	movs	r0, #115	; 0x73
   36950:	b005      	add	sp, #20
   36952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36956:	68a1      	ldr	r1, [r4, #8]
   36958:	2902      	cmp	r1, #2
   3695a:	6039      	str	r1, [r7, #0]
   3695c:	d0ef      	beq.n	3693e <ip_interface_getaddrinfo+0xd6>
   3695e:	2a05      	cmp	r2, #5
   36960:	d003      	beq.n	3696a <ip_interface_getaddrinfo+0x102>
   36962:	2a0a      	cmp	r2, #10
   36964:	bf14      	ite	ne
   36966:	2201      	movne	r2, #1
   36968:	2202      	moveq	r2, #2
   3696a:	61aa      	str	r2, [r5, #24]
   3696c:	68e2      	ldr	r2, [r4, #12]
   3696e:	622a      	str	r2, [r5, #32]
   36970:	68a2      	ldr	r2, [r4, #8]
   36972:	61ea      	str	r2, [r5, #28]
   36974:	6822      	ldr	r2, [r4, #0]
   36976:	616a      	str	r2, [r5, #20]
   36978:	68aa      	ldr	r2, [r5, #8]
   3697a:	3210      	adds	r2, #16
   3697c:	60aa      	str	r2, [r5, #8]
   3697e:	b12e      	cbz	r6, 3698c <ip_interface_getaddrinfo+0x124>
   36980:	6828      	ldr	r0, [r5, #0]
   36982:	b118      	cbz	r0, 3698c <ip_interface_getaddrinfo+0x124>
   36984:	465a      	mov	r2, fp
   36986:	4631      	mov	r1, r6
   36988:	f00e fc4e 	bl	45228 <memcpy>
   3698c:	2301      	movs	r3, #1
   3698e:	f247 010d 	movw	r1, #28685	; 0x700d
   36992:	4628      	mov	r0, r5
   36994:	f8ca 3000 	str.w	r3, [sl]
   36998:	f7fe fd80 	bl	3549c <rpc_ip_client_request_send>
   3699c:	bb10      	cbnz	r0, 369e4 <ip_interface_getaddrinfo+0x17c>
   3699e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   369a2:	9303      	str	r3, [sp, #12]
   369a4:	4649      	mov	r1, r9
   369a6:	4628      	mov	r0, r5
   369a8:	f7f2 fdf4 	bl	29594 <bsd_os_timedwait>
   369ac:	f8da 3000 	ldr.w	r3, [sl]
   369b0:	2b01      	cmp	r3, #1
   369b2:	d0f7      	beq.n	369a4 <ip_interface_getaddrinfo+0x13c>
   369b4:	4b28      	ldr	r3, [pc, #160]	; (36a58 <ip_interface_getaddrinfo+0x1f0>)
   369b6:	6818      	ldr	r0, [r3, #0]
   369b8:	bb40      	cbnz	r0, 36a0c <ip_interface_getaddrinfo+0x1a4>
   369ba:	4b26      	ldr	r3, [pc, #152]	; (36a54 <ip_interface_getaddrinfo+0x1ec>)
   369bc:	9a01      	ldr	r2, [sp, #4]
   369be:	681b      	ldr	r3, [r3, #0]
   369c0:	6013      	str	r3, [r2, #0]
   369c2:	e7c1      	b.n	36948 <ip_interface_getaddrinfo+0xe0>
   369c4:	46b3      	mov	fp, r6
   369c6:	e786      	b.n	368d6 <ip_interface_getaddrinfo+0x6e>
   369c8:	9d03      	ldr	r5, [sp, #12]
   369ca:	2d00      	cmp	r5, #0
   369cc:	d1aa      	bne.n	36924 <ip_interface_getaddrinfo+0xbc>
   369ce:	200c      	movs	r0, #12
   369d0:	2300      	movs	r3, #0
   369d2:	f8ca 3000 	str.w	r3, [sl]
   369d6:	b005      	add	sp, #20
   369d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   369dc:	2016      	movs	r0, #22
   369de:	b005      	add	sp, #20
   369e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   369e4:	2023      	movs	r0, #35	; 0x23
   369e6:	e7f3      	b.n	369d0 <ip_interface_getaddrinfo+0x168>
   369e8:	f240 2002 	movw	r0, #514	; 0x202
   369ec:	68d1      	ldr	r1, [r2, #12]
   369ee:	4281      	cmp	r1, r0
   369f0:	f47f af7b 	bne.w	368ea <ip_interface_getaddrinfo+0x82>
   369f4:	6991      	ldr	r1, [r2, #24]
   369f6:	2900      	cmp	r1, #0
   369f8:	f43f af77 	beq.w	368ea <ip_interface_getaddrinfo+0x82>
   369fc:	6860      	ldr	r0, [r4, #4]
   369fe:	f002 fb4d 	bl	3909c <pdn_interface_pdn_id_get>
   36a02:	1c43      	adds	r3, r0, #1
   36a04:	f43f af71 	beq.w	368ea <ip_interface_getaddrinfo+0x82>
   36a08:	4602      	mov	r2, r0
   36a0a:	e770      	b.n	368ee <ip_interface_getaddrinfo+0x86>
   36a0c:	4b12      	ldr	r3, [pc, #72]	; (36a58 <ip_interface_getaddrinfo+0x1f0>)
   36a0e:	6818      	ldr	r0, [r3, #0]
   36a10:	2800      	cmp	r0, #0
   36a12:	d099      	beq.n	36948 <ip_interface_getaddrinfo+0xe0>
   36a14:	e7dc      	b.n	369d0 <ip_interface_getaddrinfo+0x168>
   36a16:	4621      	mov	r1, r4
   36a18:	2210      	movs	r2, #16
   36a1a:	f105 0014 	add.w	r0, r5, #20
   36a1e:	f00e fc23 	bl	45268 <memset>
   36a22:	e7a9      	b.n	36978 <ip_interface_getaddrinfo+0x110>
   36a24:	202f      	movs	r0, #47	; 0x2f
   36a26:	f7f2 fe75 	bl	29714 <bsd_os_errno_set>
   36a2a:	68aa      	ldr	r2, [r5, #8]
   36a2c:	3210      	adds	r2, #16
   36a2e:	60aa      	str	r2, [r5, #8]
   36a30:	b916      	cbnz	r6, 36a38 <ip_interface_getaddrinfo+0x1d0>
   36a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36a36:	e7cb      	b.n	369d0 <ip_interface_getaddrinfo+0x168>
   36a38:	6828      	ldr	r0, [r5, #0]
   36a3a:	2800      	cmp	r0, #0
   36a3c:	d0f9      	beq.n	36a32 <ip_interface_getaddrinfo+0x1ca>
   36a3e:	465a      	mov	r2, fp
   36a40:	4631      	mov	r1, r6
   36a42:	f00e fbf1 	bl	45228 <memcpy>
   36a46:	e7f4      	b.n	36a32 <ip_interface_getaddrinfo+0x1ca>
   36a48:	2002cb10 	.word	0x2002cb10
   36a4c:	2002a394 	.word	0x2002a394
   36a50:	20025708 	.word	0x20025708
   36a54:	20025714 	.word	0x20025714
   36a58:	2002570c 	.word	0x2002570c
   36a5c:	20025704 	.word	0x20025704
   36a60:	20025710 	.word	0x20025710

00036a64 <ip_interface_freeaddrinfo>:
   36a64:	b538      	push	{r3, r4, r5, lr}
   36a66:	4d0b      	ldr	r5, [pc, #44]	; (36a94 <ip_interface_freeaddrinfo+0x30>)
   36a68:	682b      	ldr	r3, [r5, #0]
   36a6a:	2b02      	cmp	r3, #2
   36a6c:	d000      	beq.n	36a70 <ip_interface_freeaddrinfo+0xc>
   36a6e:	bd38      	pop	{r3, r4, r5, pc}
   36a70:	b150      	cbz	r0, 36a88 <ip_interface_freeaddrinfo+0x24>
   36a72:	4604      	mov	r4, r0
   36a74:	6940      	ldr	r0, [r0, #20]
   36a76:	f004 fa33 	bl	3aee0 <nrf_free>
   36a7a:	69a0      	ldr	r0, [r4, #24]
   36a7c:	b108      	cbz	r0, 36a82 <ip_interface_freeaddrinfo+0x1e>
   36a7e:	f004 fa2f 	bl	3aee0 <nrf_free>
   36a82:	4620      	mov	r0, r4
   36a84:	f004 fa2c 	bl	3aee0 <nrf_free>
   36a88:	2300      	movs	r3, #0
   36a8a:	4a03      	ldr	r2, [pc, #12]	; (36a98 <ip_interface_freeaddrinfo+0x34>)
   36a8c:	602b      	str	r3, [r5, #0]
   36a8e:	6013      	str	r3, [r2, #0]
   36a90:	bd38      	pop	{r3, r4, r5, pc}
   36a92:	bf00      	nop
   36a94:	20025710 	.word	0x20025710
   36a98:	2002570c 	.word	0x2002570c

00036a9c <rpc_ip_event_handler>:
   36a9c:	f248 030d 	movw	r3, #32781	; 0x800d
   36aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36aa4:	4299      	cmp	r1, r3
   36aa6:	b089      	sub	sp, #36	; 0x24
   36aa8:	4604      	mov	r4, r0
   36aaa:	d05c      	beq.n	36b66 <rpc_ip_event_handler+0xca>
   36aac:	f248 030f 	movw	r3, #32783	; 0x800f
   36ab0:	4299      	cmp	r1, r3
   36ab2:	460d      	mov	r5, r1
   36ab4:	d045      	beq.n	36b42 <rpc_ip_event_handler+0xa6>
   36ab6:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   36aba:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   36abe:	68c0      	ldr	r0, [r0, #12]
   36ac0:	d075      	beq.n	36bae <rpc_ip_event_handler+0x112>
   36ac2:	0c06      	lsrs	r6, r0, #16
   36ac4:	4630      	mov	r0, r6
   36ac6:	f004 fe69 	bl	3b79c <interface_socket_from_handle_get>
   36aca:	4607      	mov	r7, r0
   36acc:	2800      	cmp	r0, #0
   36ace:	d059      	beq.n	36b84 <rpc_ip_event_handler+0xe8>
   36ad0:	4601      	mov	r1, r0
   36ad2:	462b      	mov	r3, r5
   36ad4:	4622      	mov	r2, r4
   36ad6:	4630      	mov	r0, r6
   36ad8:	f7fe fc3a 	bl	35350 <tls_rpc_ip_event_handler>
   36adc:	2800      	cmp	r0, #0
   36ade:	d04d      	beq.n	36b7c <rpc_ip_event_handler+0xe0>
   36ae0:	f248 0307 	movw	r3, #32775	; 0x8007
   36ae4:	429d      	cmp	r5, r3
   36ae6:	d866      	bhi.n	36bb6 <rpc_ip_event_handler+0x11a>
   36ae8:	f248 0306 	movw	r3, #32774	; 0x8006
   36aec:	429d      	cmp	r5, r3
   36aee:	f080 81e7 	bcs.w	36ec0 <rpc_ip_event_handler+0x424>
   36af2:	f248 0303 	movw	r3, #32771	; 0x8003
   36af6:	429d      	cmp	r5, r3
   36af8:	f000 81c5 	beq.w	36e86 <rpc_ip_event_handler+0x3ea>
   36afc:	f200 811b 	bhi.w	36d36 <rpc_ip_event_handler+0x29a>
   36b00:	f248 0301 	movw	r3, #32769	; 0x8001
   36b04:	429d      	cmp	r5, r3
   36b06:	f000 8154 	beq.w	36db2 <rpc_ip_event_handler+0x316>
   36b0a:	f248 0302 	movw	r3, #32770	; 0x8002
   36b0e:	429d      	cmp	r5, r3
   36b10:	d138      	bne.n	36b84 <rpc_ip_event_handler+0xe8>
   36b12:	683b      	ldr	r3, [r7, #0]
   36b14:	0098      	lsls	r0, r3, #2
   36b16:	d531      	bpl.n	36b7c <rpc_ip_event_handler+0xe0>
   36b18:	683b      	ldr	r3, [r7, #0]
   36b1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   36b1e:	603b      	str	r3, [r7, #0]
   36b20:	6963      	ldr	r3, [r4, #20]
   36b22:	2b00      	cmp	r3, #0
   36b24:	f000 81ea 	beq.w	36efc <rpc_ip_event_handler+0x460>
   36b28:	2b10      	cmp	r3, #16
   36b2a:	bf8e      	itee	hi
   36b2c:	232d      	movhi	r3, #45	; 0x2d
   36b2e:	4ab9      	ldrls	r2, [pc, #740]	; (36e14 <rpc_ip_event_handler+0x378>)
   36b30:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   36b34:	607b      	str	r3, [r7, #4]
   36b36:	683b      	ldr	r3, [r7, #0]
   36b38:	2000      	movs	r0, #0
   36b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   36b3e:	603b      	str	r3, [r7, #0]
   36b40:	e00e      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36b42:	6943      	ldr	r3, [r0, #20]
   36b44:	2001      	movs	r0, #1
   36b46:	2b10      	cmp	r3, #16
   36b48:	49b3      	ldr	r1, [pc, #716]	; (36e18 <rpc_ip_event_handler+0x37c>)
   36b4a:	bf88      	it	hi
   36b4c:	222d      	movhi	r2, #45	; 0x2d
   36b4e:	7008      	strb	r0, [r1, #0]
   36b50:	f04f 0000 	mov.w	r0, #0
   36b54:	bf9c      	itt	ls
   36b56:	4aaf      	ldrls	r2, [pc, #700]	; (36e14 <rpc_ip_event_handler+0x378>)
   36b58:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   36b5c:	4baf      	ldr	r3, [pc, #700]	; (36e1c <rpc_ip_event_handler+0x380>)
   36b5e:	601a      	str	r2, [r3, #0]
   36b60:	b009      	add	sp, #36	; 0x24
   36b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b66:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 36e30 <rpc_ip_event_handler+0x394>
   36b6a:	6807      	ldr	r7, [r0, #0]
   36b6c:	f8da 2000 	ldr.w	r2, [sl]
   36b70:	2a01      	cmp	r2, #1
   36b72:	d00b      	beq.n	36b8c <rpc_ip_event_handler+0xf0>
   36b74:	b117      	cbz	r7, 36b7c <rpc_ip_event_handler+0xe0>
   36b76:	4638      	mov	r0, r7
   36b78:	f7fe fcae 	bl	354d8 <rpc_ip_client_data_free>
   36b7c:	2000      	movs	r0, #0
   36b7e:	b009      	add	sp, #36	; 0x24
   36b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b84:	6820      	ldr	r0, [r4, #0]
   36b86:	2800      	cmp	r0, #0
   36b88:	d1f6      	bne.n	36b78 <rpc_ip_event_handler+0xdc>
   36b8a:	e7f7      	b.n	36b7c <rpc_ip_event_handler+0xe0>
   36b8c:	6942      	ldr	r2, [r0, #20]
   36b8e:	2a00      	cmp	r2, #0
   36b90:	d045      	beq.n	36c1e <rpc_ip_event_handler+0x182>
   36b92:	2a10      	cmp	r2, #16
   36b94:	bf8e      	itee	hi
   36b96:	222d      	movhi	r2, #45	; 0x2d
   36b98:	499e      	ldrls	r1, [pc, #632]	; (36e14 <rpc_ip_event_handler+0x378>)
   36b9a:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   36b9e:	49a0      	ldr	r1, [pc, #640]	; (36e20 <rpc_ip_event_handler+0x384>)
   36ba0:	600a      	str	r2, [r1, #0]
   36ba2:	2202      	movs	r2, #2
   36ba4:	f8ca 2000 	str.w	r2, [sl]
   36ba8:	2f00      	cmp	r7, #0
   36baa:	d1e4      	bne.n	36b76 <rpc_ip_event_handler+0xda>
   36bac:	e7e6      	b.n	36b7c <rpc_ip_event_handler+0xe0>
   36bae:	f004 fda3 	bl	3b6f8 <interface_from_internal_id_search>
   36bb2:	4606      	mov	r6, r0
   36bb4:	e786      	b.n	36ac4 <rpc_ip_event_handler+0x28>
   36bb6:	f248 030c 	movw	r3, #32780	; 0x800c
   36bba:	429d      	cmp	r5, r3
   36bbc:	f000 813c 	beq.w	36e38 <rpc_ip_event_handler+0x39c>
   36bc0:	f240 80d5 	bls.w	36d6e <rpc_ip_event_handler+0x2d2>
   36bc4:	f249 0302 	movw	r3, #36866	; 0x9002
   36bc8:	429d      	cmp	r5, r3
   36bca:	f000 811d 	beq.w	36e08 <rpc_ip_event_handler+0x36c>
   36bce:	f249 0303 	movw	r3, #36867	; 0x9003
   36bd2:	429d      	cmp	r5, r3
   36bd4:	f000 80f9 	beq.w	36dca <rpc_ip_event_handler+0x32e>
   36bd8:	f249 0301 	movw	r3, #36865	; 0x9001
   36bdc:	429d      	cmp	r5, r3
   36bde:	d1d1      	bne.n	36b84 <rpc_ip_event_handler+0xe8>
   36be0:	683d      	ldr	r5, [r7, #0]
   36be2:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   36be6:	f000 8184 	beq.w	36ef2 <rpc_ip_event_handler+0x456>
   36bea:	68a3      	ldr	r3, [r4, #8]
   36bec:	2b04      	cmp	r3, #4
   36bee:	f200 81af 	bhi.w	36f50 <rpc_ip_event_handler+0x4b4>
   36bf2:	2500      	movs	r5, #0
   36bf4:	462e      	mov	r6, r5
   36bf6:	6821      	ldr	r1, [r4, #0]
   36bf8:	6862      	ldr	r2, [r4, #4]
   36bfa:	e9cd 6506 	strd	r6, r5, [sp, #24]
   36bfe:	e9cd 1204 	strd	r1, r2, [sp, #16]
   36c02:	69f8      	ldr	r0, [r7, #28]
   36c04:	a904      	add	r1, sp, #16
   36c06:	6803      	ldr	r3, [r0, #0]
   36c08:	685b      	ldr	r3, [r3, #4]
   36c0a:	4798      	blx	r3
   36c0c:	3001      	adds	r0, #1
   36c0e:	f000 818e 	beq.w	36f2e <rpc_ip_event_handler+0x492>
   36c12:	683b      	ldr	r3, [r7, #0]
   36c14:	2000      	movs	r0, #0
   36c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36c1a:	603b      	str	r3, [r7, #0]
   36c1c:	e7a0      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36c1e:	6985      	ldr	r5, [r0, #24]
   36c20:	016b      	lsls	r3, r5, #5
   36c22:	4618      	mov	r0, r3
   36c24:	9303      	str	r3, [sp, #12]
   36c26:	f004 f951 	bl	3aecc <nrf_malloc>
   36c2a:	9002      	str	r0, [sp, #8]
   36c2c:	2800      	cmp	r0, #0
   36c2e:	d078      	beq.n	36d22 <rpc_ip_event_handler+0x286>
   36c30:	00ee      	lsls	r6, r5, #3
   36c32:	1970      	adds	r0, r6, r5
   36c34:	0080      	lsls	r0, r0, #2
   36c36:	f004 f949 	bl	3aecc <nrf_malloc>
   36c3a:	2800      	cmp	r0, #0
   36c3c:	d073      	beq.n	36d26 <rpc_ip_event_handler+0x28a>
   36c3e:	2d00      	cmp	r5, #0
   36c40:	d074      	beq.n	36d2c <rpc_ip_event_handler+0x290>
   36c42:	3610      	adds	r6, #16
   36c44:	1983      	adds	r3, r0, r6
   36c46:	9301      	str	r3, [sp, #4]
   36c48:	9b02      	ldr	r3, [sp, #8]
   36c4a:	2204      	movs	r2, #4
   36c4c:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 36e34 <rpc_ip_event_handler+0x398>
   36c50:	f100 0810 	add.w	r8, r0, #16
   36c54:	f103 0520 	add.w	r5, r3, #32
   36c58:	e013      	b.n	36c82 <rpc_ip_event_handler+0x1e6>
   36c5a:	464a      	mov	r2, r9
   36c5c:	f00e fae4 	bl	45228 <memcpy>
   36c60:	2100      	movs	r1, #0
   36c62:	f855 3c08 	ldr.w	r3, [r5, #-8]
   36c66:	f108 0808 	add.w	r8, r8, #8
   36c6a:	eb09 0206 	add.w	r2, r9, r6
   36c6e:	f803 1009 	strb.w	r1, [r3, r9]
   36c72:	9b01      	ldr	r3, [sp, #4]
   36c74:	f845 5c04 	str.w	r5, [r5, #-4]
   36c78:	4598      	cmp	r8, r3
   36c7a:	f105 0520 	add.w	r5, r5, #32
   36c7e:	f000 8090 	beq.w	36da2 <rpc_ip_event_handler+0x306>
   36c82:	58bb      	ldr	r3, [r7, r2]
   36c84:	18b9      	adds	r1, r7, r2
   36c86:	f845 3c20 	str.w	r3, [r5, #-32]
   36c8a:	684b      	ldr	r3, [r1, #4]
   36c8c:	f8db 0000 	ldr.w	r0, [fp]
   36c90:	2b02      	cmp	r3, #2
   36c92:	bf14      	ite	ne
   36c94:	2602      	movne	r6, #2
   36c96:	260a      	moveq	r6, #10
   36c98:	4b62      	ldr	r3, [pc, #392]	; (36e24 <rpc_ip_event_handler+0x388>)
   36c9a:	e945 6007 	strd	r6, r0, [r5, #-28]
   36c9e:	681b      	ldr	r3, [r3, #0]
   36ca0:	f102 0614 	add.w	r6, r2, #20
   36ca4:	f845 3c14 	str.w	r3, [r5, #-20]
   36ca8:	8a08      	ldrh	r0, [r1, #16]
   36caa:	f1a8 0310 	sub.w	r3, r8, #16
   36cae:	f845 0c10 	str.w	r0, [r5, #-16]
   36cb2:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   36cb6:	f845 3c0c 	str.w	r3, [r5, #-12]
   36cba:	4b5b      	ldr	r3, [pc, #364]	; (36e28 <rpc_ip_event_handler+0x38c>)
   36cbc:	2804      	cmp	r0, #4
   36cbe:	eb07 0106 	add.w	r1, r7, r6
   36cc2:	881b      	ldrh	r3, [r3, #0]
   36cc4:	d01e      	beq.n	36d04 <rpc_ip_event_handler+0x268>
   36cc6:	220a      	movs	r2, #10
   36cc8:	f848 2c0c 	str.w	r2, [r8, #-12]
   36ccc:	f04f 0224 	mov.w	r2, #36	; 0x24
   36cd0:	f828 3c08 	strh.w	r3, [r8, #-8]
   36cd4:	f808 2c10 	strb.w	r2, [r8, #-16]
   36cd8:	f855 2c10 	ldr.w	r2, [r5, #-16]
   36cdc:	4640      	mov	r0, r8
   36cde:	f00e faa3 	bl	45228 <memcpy>
   36ce2:	f855 3c10 	ldr.w	r3, [r5, #-16]
   36ce6:	f109 0001 	add.w	r0, r9, #1
   36cea:	441e      	add	r6, r3
   36cec:	f004 f8ee 	bl	3aecc <nrf_malloc>
   36cf0:	19b9      	adds	r1, r7, r6
   36cf2:	eb09 0206 	add.w	r2, r9, r6
   36cf6:	f845 0c08 	str.w	r0, [r5, #-8]
   36cfa:	2800      	cmp	r0, #0
   36cfc:	d1ad      	bne.n	36c5a <rpc_ip_event_handler+0x1be>
   36cfe:	f108 0808 	add.w	r8, r8, #8
   36d02:	e7b6      	b.n	36c72 <rpc_ip_event_handler+0x1d6>
   36d04:	2210      	movs	r2, #16
   36d06:	2002      	movs	r0, #2
   36d08:	f828 3c08 	strh.w	r3, [r8, #-8]
   36d0c:	f848 0c0c 	str.w	r0, [r8, #-12]
   36d10:	f808 2c10 	strb.w	r2, [r8, #-16]
   36d14:	f855 2c10 	ldr.w	r2, [r5, #-16]
   36d18:	f1a8 0004 	sub.w	r0, r8, #4
   36d1c:	f00e fa84 	bl	45228 <memcpy>
   36d20:	e7df      	b.n	36ce2 <rpc_ip_event_handler+0x246>
   36d22:	f004 f8dd 	bl	3aee0 <nrf_free>
   36d26:	210c      	movs	r1, #12
   36d28:	4a3d      	ldr	r2, [pc, #244]	; (36e20 <rpc_ip_event_handler+0x384>)
   36d2a:	6011      	str	r1, [r2, #0]
   36d2c:	9b02      	ldr	r3, [sp, #8]
   36d2e:	4a3f      	ldr	r2, [pc, #252]	; (36e2c <rpc_ip_event_handler+0x390>)
   36d30:	6827      	ldr	r7, [r4, #0]
   36d32:	6013      	str	r3, [r2, #0]
   36d34:	e735      	b.n	36ba2 <rpc_ip_event_handler+0x106>
   36d36:	f248 0304 	movw	r3, #32772	; 0x8004
   36d3a:	429d      	cmp	r5, r3
   36d3c:	f000 808f 	beq.w	36e5e <rpc_ip_event_handler+0x3c2>
   36d40:	f248 0305 	movw	r3, #32773	; 0x8005
   36d44:	429d      	cmp	r5, r3
   36d46:	f47f af1d 	bne.w	36b84 <rpc_ip_event_handler+0xe8>
   36d4a:	683b      	ldr	r3, [r7, #0]
   36d4c:	b29b      	uxth	r3, r3
   36d4e:	2b03      	cmp	r3, #3
   36d50:	f47f af14 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36d54:	6963      	ldr	r3, [r4, #20]
   36d56:	2b00      	cmp	r3, #0
   36d58:	f000 80eb 	beq.w	36f32 <rpc_ip_event_handler+0x496>
   36d5c:	2b10      	cmp	r3, #16
   36d5e:	f200 80bd 	bhi.w	36edc <rpc_ip_event_handler+0x440>
   36d62:	4a2c      	ldr	r2, [pc, #176]	; (36e14 <rpc_ip_event_handler+0x378>)
   36d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   36d68:	607b      	str	r3, [r7, #4]
   36d6a:	2000      	movs	r0, #0
   36d6c:	e6f8      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36d6e:	f248 0308 	movw	r3, #32776	; 0x8008
   36d72:	429d      	cmp	r5, r3
   36d74:	f000 8094 	beq.w	36ea0 <rpc_ip_event_handler+0x404>
   36d78:	f248 0309 	movw	r3, #32777	; 0x8009
   36d7c:	429d      	cmp	r5, r3
   36d7e:	f47f af01 	bne.w	36b84 <rpc_ip_event_handler+0xe8>
   36d82:	683b      	ldr	r3, [r7, #0]
   36d84:	b29b      	uxth	r3, r3
   36d86:	2b0d      	cmp	r3, #13
   36d88:	f47f aef8 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36d8c:	6960      	ldr	r0, [r4, #20]
   36d8e:	2800      	cmp	r0, #0
   36d90:	f000 80d7 	beq.w	36f42 <rpc_ip_event_handler+0x4a6>
   36d94:	2810      	cmp	r0, #16
   36d96:	f200 80a1 	bhi.w	36edc <rpc_ip_event_handler+0x440>
   36d9a:	4b1e      	ldr	r3, [pc, #120]	; (36e14 <rpc_ip_event_handler+0x378>)
   36d9c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   36da0:	e7e2      	b.n	36d68 <rpc_ip_event_handler+0x2cc>
   36da2:	2100      	movs	r1, #0
   36da4:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   36da8:	4403      	add	r3, r0
   36daa:	f843 1c04 	str.w	r1, [r3, #-4]
   36dae:	4603      	mov	r3, r0
   36db0:	e7bd      	b.n	36d2e <rpc_ip_event_handler+0x292>
   36db2:	683b      	ldr	r3, [r7, #0]
   36db4:	2b01      	cmp	r3, #1
   36db6:	f47f aee1 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36dba:	6960      	ldr	r0, [r4, #20]
   36dbc:	2800      	cmp	r0, #0
   36dbe:	d1e9      	bne.n	36d94 <rpc_ip_event_handler+0x2f8>
   36dc0:	2302      	movs	r3, #2
   36dc2:	603b      	str	r3, [r7, #0]
   36dc4:	69a3      	ldr	r3, [r4, #24]
   36dc6:	61bb      	str	r3, [r7, #24]
   36dc8:	e6ca      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36dca:	683b      	ldr	r3, [r7, #0]
   36dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   36dd0:	603b      	str	r3, [r7, #0]
   36dd2:	683b      	ldr	r3, [r7, #0]
   36dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   36dd8:	603b      	str	r3, [r7, #0]
   36dda:	683b      	ldr	r3, [r7, #0]
   36ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   36de0:	603b      	str	r3, [r7, #0]
   36de2:	683b      	ldr	r3, [r7, #0]
   36de4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   36de8:	603b      	str	r3, [r7, #0]
   36dea:	6923      	ldr	r3, [r4, #16]
   36dec:	2b6c      	cmp	r3, #108	; 0x6c
   36dee:	d077      	beq.n	36ee0 <rpc_ip_event_handler+0x444>
   36df0:	2b10      	cmp	r3, #16
   36df2:	bf8c      	ite	hi
   36df4:	232d      	movhi	r3, #45	; 0x2d
   36df6:	4a07      	ldrls	r2, [pc, #28]	; (36e14 <rpc_ip_event_handler+0x378>)
   36df8:	f04f 0000 	mov.w	r0, #0
   36dfc:	bf98      	it	ls
   36dfe:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   36e02:	607b      	str	r3, [r7, #4]
   36e04:	60bb      	str	r3, [r7, #8]
   36e06:	e6ab      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36e08:	683b      	ldr	r3, [r7, #0]
   36e0a:	b29b      	uxth	r3, r3
   36e0c:	2b07      	cmp	r3, #7
   36e0e:	f47f aeb5 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36e12:	e6fe      	b.n	36c12 <rpc_ip_event_handler+0x176>
   36e14:	000473d4 	.word	0x000473d4
   36e18:	2002cb11 	.word	0x2002cb11
   36e1c:	2002573c 	.word	0x2002573c
   36e20:	2002570c 	.word	0x2002570c
   36e24:	20025704 	.word	0x20025704
   36e28:	2002a394 	.word	0x2002a394
   36e2c:	20025714 	.word	0x20025714
   36e30:	20025710 	.word	0x20025710
   36e34:	20025708 	.word	0x20025708
   36e38:	683b      	ldr	r3, [r7, #0]
   36e3a:	b29b      	uxth	r3, r3
   36e3c:	2b08      	cmp	r3, #8
   36e3e:	f47f ae9d 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36e42:	6963      	ldr	r3, [r4, #20]
   36e44:	2b00      	cmp	r3, #0
   36e46:	d189      	bne.n	36d5c <rpc_ip_event_handler+0x2c0>
   36e48:	4b5e      	ldr	r3, [pc, #376]	; (36fc4 <rpc_ip_event_handler+0x528>)
   36e4a:	2001      	movs	r0, #1
   36e4c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   36e50:	683b      	ldr	r3, [r7, #0]
   36e52:	0c1b      	lsrs	r3, r3, #16
   36e54:	041b      	lsls	r3, r3, #16
   36e56:	f043 0309 	orr.w	r3, r3, #9
   36e5a:	603b      	str	r3, [r7, #0]
   36e5c:	e680      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36e5e:	683b      	ldr	r3, [r7, #0]
   36e60:	01db      	lsls	r3, r3, #7
   36e62:	f57f ae8b 	bpl.w	36b7c <rpc_ip_event_handler+0xe0>
   36e66:	6963      	ldr	r3, [r4, #20]
   36e68:	2b00      	cmp	r3, #0
   36e6a:	f47f af77 	bne.w	36d5c <rpc_ip_event_handler+0x2c0>
   36e6e:	6823      	ldr	r3, [r4, #0]
   36e70:	2b00      	cmp	r3, #0
   36e72:	d071      	beq.n	36f58 <rpc_ip_event_handler+0x4bc>
   36e74:	2001      	movs	r0, #1
   36e76:	4b53      	ldr	r3, [pc, #332]	; (36fc4 <rpc_ip_event_handler+0x528>)
   36e78:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   36e7c:	683b      	ldr	r3, [r7, #0]
   36e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   36e82:	603b      	str	r3, [r7, #0]
   36e84:	e66c      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36e86:	683b      	ldr	r3, [r7, #0]
   36e88:	025a      	lsls	r2, r3, #9
   36e8a:	f57f ae77 	bpl.w	36b7c <rpc_ip_event_handler+0xe0>
   36e8e:	6960      	ldr	r0, [r4, #20]
   36e90:	2800      	cmp	r0, #0
   36e92:	f47f af7f 	bne.w	36d94 <rpc_ip_event_handler+0x2f8>
   36e96:	683b      	ldr	r3, [r7, #0]
   36e98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   36e9c:	603b      	str	r3, [r7, #0]
   36e9e:	e65f      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36ea0:	683b      	ldr	r3, [r7, #0]
   36ea2:	b29b      	uxth	r3, r3
   36ea4:	2b06      	cmp	r3, #6
   36ea6:	f47f ae69 	bne.w	36b7c <rpc_ip_event_handler+0xe0>
   36eaa:	6960      	ldr	r0, [r4, #20]
   36eac:	2800      	cmp	r0, #0
   36eae:	f47f af71 	bne.w	36d94 <rpc_ip_event_handler+0x2f8>
   36eb2:	683b      	ldr	r3, [r7, #0]
   36eb4:	0c1b      	lsrs	r3, r3, #16
   36eb6:	041b      	lsls	r3, r3, #16
   36eb8:	f043 0307 	orr.w	r3, r3, #7
   36ebc:	603b      	str	r3, [r7, #0]
   36ebe:	e64f      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36ec0:	683b      	ldr	r3, [r7, #0]
   36ec2:	0299      	lsls	r1, r3, #10
   36ec4:	f57f ae5a 	bpl.w	36b7c <rpc_ip_event_handler+0xe0>
   36ec8:	6963      	ldr	r3, [r4, #20]
   36eca:	b33b      	cbz	r3, 36f1c <rpc_ip_event_handler+0x480>
   36ecc:	2b6b      	cmp	r3, #107	; 0x6b
   36ece:	f47f ae2b 	bne.w	36b28 <rpc_ip_event_handler+0x8c>
   36ed2:	693b      	ldr	r3, [r7, #16]
   36ed4:	2b01      	cmp	r3, #1
   36ed6:	d041      	beq.n	36f5c <rpc_ip_event_handler+0x4c0>
   36ed8:	230c      	movs	r3, #12
   36eda:	e62b      	b.n	36b34 <rpc_ip_event_handler+0x98>
   36edc:	232d      	movs	r3, #45	; 0x2d
   36ede:	e743      	b.n	36d68 <rpc_ip_event_handler+0x2cc>
   36ee0:	2239      	movs	r2, #57	; 0x39
   36ee2:	683b      	ldr	r3, [r7, #0]
   36ee4:	2000      	movs	r0, #0
   36ee6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   36eea:	603b      	str	r3, [r7, #0]
   36eec:	607a      	str	r2, [r7, #4]
   36eee:	60ba      	str	r2, [r7, #8]
   36ef0:	e636      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36ef2:	6820      	ldr	r0, [r4, #0]
   36ef4:	f7fe faf0 	bl	354d8 <rpc_ip_client_data_free>
   36ef8:	4628      	mov	r0, r5
   36efa:	e631      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36efc:	683b      	ldr	r3, [r7, #0]
   36efe:	2000      	movs	r0, #0
   36f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36f04:	603b      	str	r3, [r7, #0]
   36f06:	683b      	ldr	r3, [r7, #0]
   36f08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   36f0c:	603b      	str	r3, [r7, #0]
   36f0e:	683b      	ldr	r3, [r7, #0]
   36f10:	0c1b      	lsrs	r3, r3, #16
   36f12:	041b      	lsls	r3, r3, #16
   36f14:	f043 0305 	orr.w	r3, r3, #5
   36f18:	603b      	str	r3, [r7, #0]
   36f1a:	e621      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f1c:	683b      	ldr	r3, [r7, #0]
   36f1e:	4a29      	ldr	r2, [pc, #164]	; (36fc4 <rpc_ip_event_handler+0x528>)
   36f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   36f24:	603b      	str	r3, [r7, #0]
   36f26:	2001      	movs	r0, #1
   36f28:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   36f2c:	e618      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f2e:	2002      	movs	r0, #2
   36f30:	e616      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f32:	683b      	ldr	r3, [r7, #0]
   36f34:	2000      	movs	r0, #0
   36f36:	0c1b      	lsrs	r3, r3, #16
   36f38:	041b      	lsls	r3, r3, #16
   36f3a:	f043 0304 	orr.w	r3, r3, #4
   36f3e:	603b      	str	r3, [r7, #0]
   36f40:	e60e      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f42:	683b      	ldr	r3, [r7, #0]
   36f44:	0c1b      	lsrs	r3, r3, #16
   36f46:	041b      	lsls	r3, r3, #16
   36f48:	f043 030e 	orr.w	r3, r3, #14
   36f4c:	603b      	str	r3, [r7, #0]
   36f4e:	e607      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f50:	8a65      	ldrh	r5, [r4, #18]
   36f52:	b95d      	cbnz	r5, 36f6c <rpc_ip_event_handler+0x4d0>
   36f54:	462e      	mov	r6, r5
   36f56:	e64e      	b.n	36bf6 <rpc_ip_event_handler+0x15a>
   36f58:	2000      	movs	r0, #0
   36f5a:	e78f      	b.n	36e7c <rpc_ip_event_handler+0x3e0>
   36f5c:	220c      	movs	r2, #12
   36f5e:	683b      	ldr	r3, [r7, #0]
   36f60:	2000      	movs	r0, #0
   36f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   36f66:	603b      	str	r3, [r7, #0]
   36f68:	607a      	str	r2, [r7, #4]
   36f6a:	e5f9      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f6c:	2024      	movs	r0, #36	; 0x24
   36f6e:	f003 ffad 	bl	3aecc <nrf_malloc>
   36f72:	4606      	mov	r6, r0
   36f74:	2800      	cmp	r0, #0
   36f76:	d0da      	beq.n	36f2e <rpc_ip_event_handler+0x492>
   36f78:	8a62      	ldrh	r2, [r4, #18]
   36f7a:	2a10      	cmp	r2, #16
   36f7c:	d009      	beq.n	36f92 <rpc_ip_event_handler+0x4f6>
   36f7e:	2a04      	cmp	r2, #4
   36f80:	d013      	beq.n	36faa <rpc_ip_event_handler+0x50e>
   36f82:	6820      	ldr	r0, [r4, #0]
   36f84:	f7fe faa8 	bl	354d8 <rpc_ip_client_data_free>
   36f88:	4630      	mov	r0, r6
   36f8a:	f003 ffa9 	bl	3aee0 <nrf_free>
   36f8e:	2000      	movs	r0, #0
   36f90:	e5e6      	b.n	36b60 <rpc_ip_event_handler+0xc4>
   36f92:	230a      	movs	r3, #10
   36f94:	2524      	movs	r5, #36	; 0x24
   36f96:	6043      	str	r3, [r0, #4]
   36f98:	7005      	strb	r5, [r0, #0]
   36f9a:	8a23      	ldrh	r3, [r4, #16]
   36f9c:	f104 0114 	add.w	r1, r4, #20
   36fa0:	8103      	strh	r3, [r0, #8]
   36fa2:	3010      	adds	r0, #16
   36fa4:	f00e f940 	bl	45228 <memcpy>
   36fa8:	e625      	b.n	36bf6 <rpc_ip_event_handler+0x15a>
   36faa:	2302      	movs	r3, #2
   36fac:	2510      	movs	r5, #16
   36fae:	6043      	str	r3, [r0, #4]
   36fb0:	7005      	strb	r5, [r0, #0]
   36fb2:	8a23      	ldrh	r3, [r4, #16]
   36fb4:	f104 0114 	add.w	r1, r4, #20
   36fb8:	8103      	strh	r3, [r0, #8]
   36fba:	300c      	adds	r0, #12
   36fbc:	f00e f934 	bl	45228 <memcpy>
   36fc0:	e619      	b.n	36bf6 <rpc_ip_event_handler+0x15a>
   36fc2:	bf00      	nop
   36fc4:	20025718 	.word	0x20025718

00036fc8 <rpc_handle_ctrl_message>:
   36fc8:	2902      	cmp	r1, #2
   36fca:	b510      	push	{r4, lr}
   36fcc:	4604      	mov	r4, r0
   36fce:	d00c      	beq.n	36fea <rpc_handle_ctrl_message+0x22>
   36fd0:	2904      	cmp	r1, #4
   36fd2:	d008      	beq.n	36fe6 <rpc_handle_ctrl_message+0x1e>
   36fd4:	2901      	cmp	r1, #1
   36fd6:	d006      	beq.n	36fe6 <rpc_handle_ctrl_message+0x1e>
   36fd8:	6880      	ldr	r0, [r0, #8]
   36fda:	b108      	cbz	r0, 36fe0 <rpc_handle_ctrl_message+0x18>
   36fdc:	f7fc fcf0 	bl	339c0 <rpc_transport_data_free>
   36fe0:	4620      	mov	r0, r4
   36fe2:	f7fc fceb 	bl	339bc <rpc_transport_rpc_free>
   36fe6:	2000      	movs	r0, #0
   36fe8:	bd10      	pop	{r4, pc}
   36fea:	6880      	ldr	r0, [r0, #8]
   36fec:	2800      	cmp	r0, #0
   36fee:	d0fa      	beq.n	36fe6 <rpc_handle_ctrl_message+0x1e>
   36ff0:	f7fc fce6 	bl	339c0 <rpc_transport_data_free>
   36ff4:	2000      	movs	r0, #0
   36ff6:	bd10      	pop	{r4, pc}

00036ff8 <rpc_handle_data_message>:
   36ff8:	4b23      	ldr	r3, [pc, #140]	; (37088 <rpc_handle_data_message+0x90>)
   36ffa:	6802      	ldr	r2, [r0, #0]
   36ffc:	8819      	ldrh	r1, [r3, #0]
   36ffe:	b292      	uxth	r2, r2
   37000:	4291      	cmp	r1, r2
   37002:	d027      	beq.n	37054 <rpc_handle_data_message+0x5c>
   37004:	8a19      	ldrh	r1, [r3, #16]
   37006:	4291      	cmp	r1, r2
   37008:	d02a      	beq.n	37060 <rpc_handle_data_message+0x68>
   3700a:	8c19      	ldrh	r1, [r3, #32]
   3700c:	4291      	cmp	r1, r2
   3700e:	d02b      	beq.n	37068 <rpc_handle_data_message+0x70>
   37010:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   37012:	4291      	cmp	r1, r2
   37014:	d02a      	beq.n	3706c <rpc_handle_data_message+0x74>
   37016:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   3701a:	4291      	cmp	r1, r2
   3701c:	d028      	beq.n	37070 <rpc_handle_data_message+0x78>
   3701e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   37022:	4291      	cmp	r1, r2
   37024:	d026      	beq.n	37074 <rpc_handle_data_message+0x7c>
   37026:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   3702a:	4291      	cmp	r1, r2
   3702c:	d026      	beq.n	3707c <rpc_handle_data_message+0x84>
   3702e:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   37032:	4291      	cmp	r1, r2
   37034:	d024      	beq.n	37080 <rpc_handle_data_message+0x88>
   37036:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   3703a:	4291      	cmp	r1, r2
   3703c:	d01c      	beq.n	37078 <rpc_handle_data_message+0x80>
   3703e:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   37042:	4291      	cmp	r1, r2
   37044:	d01e      	beq.n	37084 <rpc_handle_data_message+0x8c>
   37046:	6880      	ldr	r0, [r0, #8]
   37048:	b160      	cbz	r0, 37064 <rpc_handle_data_message+0x6c>
   3704a:	b510      	push	{r4, lr}
   3704c:	f7fc fcb8 	bl	339c0 <rpc_transport_data_free>
   37050:	2000      	movs	r0, #0
   37052:	bd10      	pop	{r4, pc}
   37054:	2200      	movs	r2, #0
   37056:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   3705a:	685a      	ldr	r2, [r3, #4]
   3705c:	68d9      	ldr	r1, [r3, #12]
   3705e:	4710      	bx	r2
   37060:	2201      	movs	r2, #1
   37062:	e7f8      	b.n	37056 <rpc_handle_data_message+0x5e>
   37064:	2000      	movs	r0, #0
   37066:	4770      	bx	lr
   37068:	2202      	movs	r2, #2
   3706a:	e7f4      	b.n	37056 <rpc_handle_data_message+0x5e>
   3706c:	2203      	movs	r2, #3
   3706e:	e7f2      	b.n	37056 <rpc_handle_data_message+0x5e>
   37070:	2204      	movs	r2, #4
   37072:	e7f0      	b.n	37056 <rpc_handle_data_message+0x5e>
   37074:	2205      	movs	r2, #5
   37076:	e7ee      	b.n	37056 <rpc_handle_data_message+0x5e>
   37078:	2208      	movs	r2, #8
   3707a:	e7ec      	b.n	37056 <rpc_handle_data_message+0x5e>
   3707c:	2206      	movs	r2, #6
   3707e:	e7ea      	b.n	37056 <rpc_handle_data_message+0x5e>
   37080:	2207      	movs	r2, #7
   37082:	e7e8      	b.n	37056 <rpc_handle_data_message+0x5e>
   37084:	2209      	movs	r2, #9
   37086:	e7e6      	b.n	37056 <rpc_handle_data_message+0x5e>
   37088:	20025740 	.word	0x20025740

0003708c <rpc_framework_init>:
   3708c:	b508      	push	{r3, lr}
   3708e:	22a0      	movs	r2, #160	; 0xa0
   37090:	2100      	movs	r1, #0
   37092:	4802      	ldr	r0, [pc, #8]	; (3709c <rpc_framework_init+0x10>)
   37094:	f00e f8e8 	bl	45268 <memset>
   37098:	2000      	movs	r0, #0
   3709a:	bd08      	pop	{r3, pc}
   3709c:	20025740 	.word	0x20025740

000370a0 <rpc_client_register>:
   370a0:	8803      	ldrh	r3, [r0, #0]
   370a2:	2b00      	cmp	r3, #0
   370a4:	d045      	beq.n	37132 <rpc_client_register+0x92>
   370a6:	6842      	ldr	r2, [r0, #4]
   370a8:	4601      	mov	r1, r0
   370aa:	2a00      	cmp	r2, #0
   370ac:	d050      	beq.n	37150 <rpc_client_register+0xb0>
   370ae:	4a30      	ldr	r2, [pc, #192]	; (37170 <rpc_client_register+0xd0>)
   370b0:	8810      	ldrh	r0, [r2, #0]
   370b2:	4283      	cmp	r3, r0
   370b4:	d03d      	beq.n	37132 <rpc_client_register+0x92>
   370b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   370ba:	8a14      	ldrh	r4, [r2, #16]
   370bc:	42a3      	cmp	r3, r4
   370be:	d035      	beq.n	3712c <rpc_client_register+0x8c>
   370c0:	8c15      	ldrh	r5, [r2, #32]
   370c2:	42ab      	cmp	r3, r5
   370c4:	d032      	beq.n	3712c <rpc_client_register+0x8c>
   370c6:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   370c8:	42b3      	cmp	r3, r6
   370ca:	d02f      	beq.n	3712c <rpc_client_register+0x8c>
   370cc:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   370d0:	42bb      	cmp	r3, r7
   370d2:	d02b      	beq.n	3712c <rpc_client_register+0x8c>
   370d4:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   370d8:	4563      	cmp	r3, ip
   370da:	d027      	beq.n	3712c <rpc_client_register+0x8c>
   370dc:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   370e0:	4573      	cmp	r3, lr
   370e2:	d023      	beq.n	3712c <rpc_client_register+0x8c>
   370e4:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   370e8:	4543      	cmp	r3, r8
   370ea:	d01f      	beq.n	3712c <rpc_client_register+0x8c>
   370ec:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   370f0:	454b      	cmp	r3, r9
   370f2:	d01b      	beq.n	3712c <rpc_client_register+0x8c>
   370f4:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   370f8:	4553      	cmp	r3, sl
   370fa:	d017      	beq.n	3712c <rpc_client_register+0x8c>
   370fc:	b1e0      	cbz	r0, 37138 <rpc_client_register+0x98>
   370fe:	b35c      	cbz	r4, 37158 <rpc_client_register+0xb8>
   37100:	b365      	cbz	r5, 3715c <rpc_client_register+0xbc>
   37102:	b36e      	cbz	r6, 37160 <rpc_client_register+0xc0>
   37104:	b377      	cbz	r7, 37164 <rpc_client_register+0xc4>
   37106:	f1bc 0f00 	cmp.w	ip, #0
   3710a:	d02d      	beq.n	37168 <rpc_client_register+0xc8>
   3710c:	f1be 0f00 	cmp.w	lr, #0
   37110:	d020      	beq.n	37154 <rpc_client_register+0xb4>
   37112:	f1b8 0f00 	cmp.w	r8, #0
   37116:	d029      	beq.n	3716c <rpc_client_register+0xcc>
   37118:	f1b9 0f00 	cmp.w	r9, #0
   3711c:	d00b      	beq.n	37136 <rpc_client_register+0x96>
   3711e:	2009      	movs	r0, #9
   37120:	f1ba 0f00 	cmp.w	sl, #0
   37124:	d008      	beq.n	37138 <rpc_client_register+0x98>
   37126:	2004      	movs	r0, #4
   37128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3712c:	2007      	movs	r0, #7
   3712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37132:	2007      	movs	r0, #7
   37134:	4770      	bx	lr
   37136:	2008      	movs	r0, #8
   37138:	0100      	lsls	r0, r0, #4
   3713a:	5213      	strh	r3, [r2, r0]
   3713c:	684b      	ldr	r3, [r1, #4]
   3713e:	4402      	add	r2, r0
   37140:	6053      	str	r3, [r2, #4]
   37142:	688b      	ldr	r3, [r1, #8]
   37144:	2000      	movs	r0, #0
   37146:	6093      	str	r3, [r2, #8]
   37148:	68cb      	ldr	r3, [r1, #12]
   3714a:	60d3      	str	r3, [r2, #12]
   3714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37150:	200e      	movs	r0, #14
   37152:	4770      	bx	lr
   37154:	2006      	movs	r0, #6
   37156:	e7ef      	b.n	37138 <rpc_client_register+0x98>
   37158:	2001      	movs	r0, #1
   3715a:	e7ed      	b.n	37138 <rpc_client_register+0x98>
   3715c:	2002      	movs	r0, #2
   3715e:	e7eb      	b.n	37138 <rpc_client_register+0x98>
   37160:	2003      	movs	r0, #3
   37162:	e7e9      	b.n	37138 <rpc_client_register+0x98>
   37164:	2004      	movs	r0, #4
   37166:	e7e7      	b.n	37138 <rpc_client_register+0x98>
   37168:	2005      	movs	r0, #5
   3716a:	e7e5      	b.n	37138 <rpc_client_register+0x98>
   3716c:	2007      	movs	r0, #7
   3716e:	e7e3      	b.n	37138 <rpc_client_register+0x98>
   37170:	20025740 	.word	0x20025740

00037174 <rpc_client_unregister>:
   37174:	b340      	cbz	r0, 371c8 <rpc_client_unregister+0x54>
   37176:	4b21      	ldr	r3, [pc, #132]	; (371fc <rpc_client_unregister+0x88>)
   37178:	881a      	ldrh	r2, [r3, #0]
   3717a:	4282      	cmp	r2, r0
   3717c:	d02e      	beq.n	371dc <rpc_client_unregister+0x68>
   3717e:	8a1a      	ldrh	r2, [r3, #16]
   37180:	4282      	cmp	r2, r0
   37182:	d02f      	beq.n	371e4 <rpc_client_unregister+0x70>
   37184:	8c1a      	ldrh	r2, [r3, #32]
   37186:	4282      	cmp	r2, r0
   37188:	d02e      	beq.n	371e8 <rpc_client_unregister+0x74>
   3718a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   3718c:	4282      	cmp	r2, r0
   3718e:	d02d      	beq.n	371ec <rpc_client_unregister+0x78>
   37190:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   37194:	4282      	cmp	r2, r0
   37196:	d023      	beq.n	371e0 <rpc_client_unregister+0x6c>
   37198:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   3719c:	4282      	cmp	r2, r0
   3719e:	d027      	beq.n	371f0 <rpc_client_unregister+0x7c>
   371a0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
   371a4:	4282      	cmp	r2, r0
   371a6:	d025      	beq.n	371f4 <rpc_client_unregister+0x80>
   371a8:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
   371ac:	4282      	cmp	r2, r0
   371ae:	d023      	beq.n	371f8 <rpc_client_unregister+0x84>
   371b0:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
   371b4:	4282      	cmp	r2, r0
   371b6:	d009      	beq.n	371cc <rpc_client_unregister+0x58>
   371b8:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   371bc:	4282      	cmp	r2, r0
   371be:	bf08      	it	eq
   371c0:	2209      	moveq	r2, #9
   371c2:	d004      	beq.n	371ce <rpc_client_unregister+0x5a>
   371c4:	2005      	movs	r0, #5
   371c6:	4770      	bx	lr
   371c8:	2007      	movs	r0, #7
   371ca:	4770      	bx	lr
   371cc:	2208      	movs	r2, #8
   371ce:	2000      	movs	r0, #0
   371d0:	0112      	lsls	r2, r2, #4
   371d2:	1899      	adds	r1, r3, r2
   371d4:	5298      	strh	r0, [r3, r2]
   371d6:	6048      	str	r0, [r1, #4]
   371d8:	60c8      	str	r0, [r1, #12]
   371da:	4770      	bx	lr
   371dc:	2200      	movs	r2, #0
   371de:	e7f6      	b.n	371ce <rpc_client_unregister+0x5a>
   371e0:	2204      	movs	r2, #4
   371e2:	e7f4      	b.n	371ce <rpc_client_unregister+0x5a>
   371e4:	2201      	movs	r2, #1
   371e6:	e7f2      	b.n	371ce <rpc_client_unregister+0x5a>
   371e8:	2202      	movs	r2, #2
   371ea:	e7f0      	b.n	371ce <rpc_client_unregister+0x5a>
   371ec:	2203      	movs	r2, #3
   371ee:	e7ee      	b.n	371ce <rpc_client_unregister+0x5a>
   371f0:	2205      	movs	r2, #5
   371f2:	e7ec      	b.n	371ce <rpc_client_unregister+0x5a>
   371f4:	2206      	movs	r2, #6
   371f6:	e7ea      	b.n	371ce <rpc_client_unregister+0x5a>
   371f8:	2207      	movs	r2, #7
   371fa:	e7e8      	b.n	371ce <rpc_client_unregister+0x5a>
   371fc:	20025740 	.word	0x20025740

00037200 <rpc_message_send>:
   37200:	b150      	cbz	r0, 37218 <rpc_message_send+0x18>
   37202:	b159      	cbz	r1, 3721c <rpc_message_send+0x1c>
   37204:	684b      	ldr	r3, [r1, #4]
   37206:	8008      	strh	r0, [r1, #0]
   37208:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3720c:	f043 0302 	orr.w	r3, r3, #2
   37210:	604b      	str	r3, [r1, #4]
   37212:	4608      	mov	r0, r1
   37214:	f7fc bbcc 	b.w	339b0 <rpc_transport_send>
   37218:	2007      	movs	r0, #7
   3721a:	4770      	bx	lr
   3721c:	200e      	movs	r0, #14
   3721e:	4770      	bx	lr

00037220 <rpc_message_alloc>:
   37220:	b342      	cbz	r2, 37274 <rpc_message_alloc+0x54>
   37222:	b328      	cbz	r0, 37270 <rpc_message_alloc+0x50>
   37224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37226:	2300      	movs	r3, #0
   37228:	4616      	mov	r6, r2
   3722a:	460c      	mov	r4, r1
   3722c:	4605      	mov	r5, r0
   3722e:	6013      	str	r3, [r2, #0]
   37230:	b171      	cbz	r1, 37250 <rpc_message_alloc+0x30>
   37232:	4608      	mov	r0, r1
   37234:	f7fc fbc0 	bl	339b8 <rpc_transport_data_alloc>
   37238:	4607      	mov	r7, r0
   3723a:	b1b8      	cbz	r0, 3726c <rpc_message_alloc+0x4c>
   3723c:	f7fc fbba 	bl	339b4 <rpc_transport_rpc_alloc>
   37240:	4603      	mov	r3, r0
   37242:	b180      	cbz	r0, 37266 <rpc_message_alloc+0x46>
   37244:	2000      	movs	r0, #0
   37246:	60dc      	str	r4, [r3, #12]
   37248:	609f      	str	r7, [r3, #8]
   3724a:	801d      	strh	r5, [r3, #0]
   3724c:	6033      	str	r3, [r6, #0]
   3724e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37250:	f7fc fbb0 	bl	339b4 <rpc_transport_rpc_alloc>
   37254:	4603      	mov	r3, r0
   37256:	b148      	cbz	r0, 3726c <rpc_message_alloc+0x4c>
   37258:	4627      	mov	r7, r4
   3725a:	60dc      	str	r4, [r3, #12]
   3725c:	609f      	str	r7, [r3, #8]
   3725e:	801d      	strh	r5, [r3, #0]
   37260:	2000      	movs	r0, #0
   37262:	6033      	str	r3, [r6, #0]
   37264:	e7f3      	b.n	3724e <rpc_message_alloc+0x2e>
   37266:	4638      	mov	r0, r7
   37268:	f7fc fbaa 	bl	339c0 <rpc_transport_data_free>
   3726c:	2004      	movs	r0, #4
   3726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37270:	2007      	movs	r0, #7
   37272:	4770      	bx	lr
   37274:	200e      	movs	r0, #14
   37276:	4770      	bx	lr

00037278 <rpc_message_free>:
   37278:	b130      	cbz	r0, 37288 <rpc_message_free+0x10>
   3727a:	b139      	cbz	r1, 3728c <rpc_message_free+0x14>
   3727c:	b508      	push	{r3, lr}
   3727e:	4608      	mov	r0, r1
   37280:	f7fc fb9c 	bl	339bc <rpc_transport_rpc_free>
   37284:	2000      	movs	r0, #0
   37286:	bd08      	pop	{r3, pc}
   37288:	2007      	movs	r0, #7
   3728a:	4770      	bx	lr
   3728c:	200e      	movs	r0, #14
   3728e:	4770      	bx	lr

00037290 <rpc_message_data_free>:
   37290:	b130      	cbz	r0, 372a0 <rpc_message_data_free+0x10>
   37292:	b139      	cbz	r1, 372a4 <rpc_message_data_free+0x14>
   37294:	b508      	push	{r3, lr}
   37296:	4608      	mov	r0, r1
   37298:	f7fc fb92 	bl	339c0 <rpc_transport_data_free>
   3729c:	2000      	movs	r0, #0
   3729e:	bd08      	pop	{r3, pc}
   372a0:	2007      	movs	r0, #7
   372a2:	4770      	bx	lr
   372a4:	200e      	movs	r0, #14
   372a6:	4770      	bx	lr

000372a8 <packet_free_cb>:
   372a8:	b510      	push	{r4, lr}
   372aa:	4604      	mov	r4, r0
   372ac:	b118      	cbz	r0, 372b6 <packet_free_cb+0xe>
   372ae:	6800      	ldr	r0, [r0, #0]
   372b0:	b108      	cbz	r0, 372b6 <packet_free_cb+0xe>
   372b2:	f003 f827 	bl	3a304 <rpc_gnss_client_data_free>
   372b6:	68a0      	ldr	r0, [r4, #8]
   372b8:	b118      	cbz	r0, 372c2 <packet_free_cb+0x1a>
   372ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   372be:	f003 be0f 	b.w	3aee0 <nrf_free>
   372c2:	bd10      	pop	{r4, pc}

000372c4 <rpc_gnss_event_handler>:
   372c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   372c6:	4b64      	ldr	r3, [pc, #400]	; (37458 <rpc_gnss_event_handler+0x194>)
   372c8:	4606      	mov	r6, r0
   372ca:	6800      	ldr	r0, [r0, #0]
   372cc:	881b      	ldrh	r3, [r3, #0]
   372ce:	6802      	ldr	r2, [r0, #0]
   372d0:	b085      	sub	sp, #20
   372d2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   372d6:	460d      	mov	r5, r1
   372d8:	d037      	beq.n	3734a <rpc_gnss_event_handler+0x86>
   372da:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   372de:	33ff      	adds	r3, #255	; 0xff
   372e0:	b29b      	uxth	r3, r3
   372e2:	2b02      	cmp	r3, #2
   372e4:	d811      	bhi.n	3730a <rpc_gnss_event_handler+0x46>
   372e6:	4c5d      	ldr	r4, [pc, #372]	; (3745c <rpc_gnss_event_handler+0x198>)
   372e8:	6823      	ldr	r3, [r4, #0]
   372ea:	075a      	lsls	r2, r3, #29
   372ec:	d410      	bmi.n	37310 <rpc_gnss_event_handler+0x4c>
   372ee:	6823      	ldr	r3, [r4, #0]
   372f0:	079b      	lsls	r3, r3, #30
   372f2:	d503      	bpl.n	372fc <rpc_gnss_event_handler+0x38>
   372f4:	f244 0303 	movw	r3, #16387	; 0x4003
   372f8:	429d      	cmp	r5, r3
   372fa:	d009      	beq.n	37310 <rpc_gnss_event_handler+0x4c>
   372fc:	6830      	ldr	r0, [r6, #0]
   372fe:	b120      	cbz	r0, 3730a <rpc_gnss_event_handler+0x46>
   37300:	f003 f800 	bl	3a304 <rpc_gnss_client_data_free>
   37304:	2200      	movs	r2, #0
   37306:	4b56      	ldr	r3, [pc, #344]	; (37460 <rpc_gnss_event_handler+0x19c>)
   37308:	601a      	str	r2, [r3, #0]
   3730a:	2000      	movs	r0, #0
   3730c:	b005      	add	sp, #20
   3730e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   37310:	2002      	movs	r0, #2
   37312:	f003 fddb 	bl	3aecc <nrf_malloc>
   37316:	4607      	mov	r7, r0
   37318:	2800      	cmp	r0, #0
   3731a:	f000 8094 	beq.w	37446 <rpc_gnss_event_handler+0x182>
   3731e:	2302      	movs	r3, #2
   37320:	8005      	strh	r5, [r0, #0]
   37322:	6831      	ldr	r1, [r6, #0]
   37324:	6872      	ldr	r2, [r6, #4]
   37326:	484f      	ldr	r0, [pc, #316]	; (37464 <rpc_gnss_event_handler+0x1a0>)
   37328:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   3732c:	6800      	ldr	r0, [r0, #0]
   3732e:	9303      	str	r3, [sp, #12]
   37330:	6803      	ldr	r3, [r0, #0]
   37332:	4669      	mov	r1, sp
   37334:	685b      	ldr	r3, [r3, #4]
   37336:	4798      	blx	r3
   37338:	3001      	adds	r0, #1
   3733a:	d071      	beq.n	37420 <rpc_gnss_event_handler+0x15c>
   3733c:	2000      	movs	r0, #0
   3733e:	6823      	ldr	r3, [r4, #0]
   37340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   37344:	6023      	str	r3, [r4, #0]
   37346:	b005      	add	sp, #20
   37348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3734a:	4c44      	ldr	r4, [pc, #272]	; (3745c <rpc_gnss_event_handler+0x198>)
   3734c:	4f44      	ldr	r7, [pc, #272]	; (37460 <rpc_gnss_event_handler+0x19c>)
   3734e:	6823      	ldr	r3, [r4, #0]
   37350:	6038      	str	r0, [r7, #0]
   37352:	01d9      	lsls	r1, r3, #7
   37354:	d523      	bpl.n	3739e <rpc_gnss_event_handler+0xda>
   37356:	f242 1302 	movw	r3, #8450	; 0x2102
   3735a:	429d      	cmp	r5, r3
   3735c:	d11f      	bne.n	3739e <rpc_gnss_event_handler+0xda>
   3735e:	6843      	ldr	r3, [r0, #4]
   37360:	b91b      	cbnz	r3, 3736a <rpc_gnss_event_handler+0xa6>
   37362:	6823      	ldr	r3, [r4, #0]
   37364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   37368:	6023      	str	r3, [r4, #0]
   3736a:	6823      	ldr	r3, [r4, #0]
   3736c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37370:	6023      	str	r3, [r4, #0]
   37372:	6823      	ldr	r3, [r4, #0]
   37374:	025a      	lsls	r2, r3, #9
   37376:	d430      	bmi.n	373da <rpc_gnss_event_handler+0x116>
   37378:	f242 0305 	movw	r3, #8197	; 0x2005
   3737c:	429d      	cmp	r5, r3
   3737e:	d12c      	bne.n	373da <rpc_gnss_event_handler+0x116>
   37380:	6823      	ldr	r3, [r4, #0]
   37382:	0299      	lsls	r1, r3, #10
   37384:	d529      	bpl.n	373da <rpc_gnss_event_handler+0x116>
   37386:	6843      	ldr	r3, [r0, #4]
   37388:	2b00      	cmp	r3, #0
   3738a:	d157      	bne.n	3743c <rpc_gnss_event_handler+0x178>
   3738c:	6823      	ldr	r3, [r4, #0]
   3738e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37392:	6023      	str	r3, [r4, #0]
   37394:	6823      	ldr	r3, [r4, #0]
   37396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3739a:	6023      	str	r3, [r4, #0]
   3739c:	e01d      	b.n	373da <rpc_gnss_event_handler+0x116>
   3739e:	6823      	ldr	r3, [r4, #0]
   373a0:	025b      	lsls	r3, r3, #9
   373a2:	d50e      	bpl.n	373c2 <rpc_gnss_event_handler+0xfe>
   373a4:	f242 1303 	movw	r3, #8451	; 0x2103
   373a8:	429d      	cmp	r5, r3
   373aa:	d10a      	bne.n	373c2 <rpc_gnss_event_handler+0xfe>
   373ac:	6843      	ldr	r3, [r0, #4]
   373ae:	b91b      	cbnz	r3, 373b8 <rpc_gnss_event_handler+0xf4>
   373b0:	6823      	ldr	r3, [r4, #0]
   373b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   373b6:	6023      	str	r3, [r4, #0]
   373b8:	6823      	ldr	r3, [r4, #0]
   373ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   373be:	6023      	str	r3, [r4, #0]
   373c0:	e00b      	b.n	373da <rpc_gnss_event_handler+0x116>
   373c2:	f242 0301 	movw	r3, #8193	; 0x2001
   373c6:	429d      	cmp	r5, r3
   373c8:	d10c      	bne.n	373e4 <rpc_gnss_event_handler+0x120>
   373ca:	6843      	ldr	r3, [r0, #4]
   373cc:	b92b      	cbnz	r3, 373da <rpc_gnss_event_handler+0x116>
   373ce:	6823      	ldr	r3, [r4, #0]
   373d0:	0c1b      	lsrs	r3, r3, #16
   373d2:	041b      	lsls	r3, r3, #16
   373d4:	f043 0302 	orr.w	r3, r3, #2
   373d8:	6023      	str	r3, [r4, #0]
   373da:	f002 ff93 	bl	3a304 <rpc_gnss_client_data_free>
   373de:	2300      	movs	r3, #0
   373e0:	603b      	str	r3, [r7, #0]
   373e2:	e77a      	b.n	372da <rpc_gnss_event_handler+0x16>
   373e4:	f242 0304 	movw	r3, #8196	; 0x2004
   373e8:	429d      	cmp	r5, r3
   373ea:	d1c5      	bne.n	37378 <rpc_gnss_event_handler+0xb4>
   373ec:	6843      	ldr	r3, [r0, #4]
   373ee:	b993      	cbnz	r3, 37416 <rpc_gnss_event_handler+0x152>
   373f0:	6823      	ldr	r3, [r4, #0]
   373f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   373f6:	6023      	str	r3, [r4, #0]
   373f8:	6823      	ldr	r3, [r4, #0]
   373fa:	b29b      	uxth	r3, r3
   373fc:	2b03      	cmp	r3, #3
   373fe:	6823      	ldr	r3, [r4, #0]
   37400:	d016      	beq.n	37430 <rpc_gnss_event_handler+0x16c>
   37402:	b29b      	uxth	r3, r3
   37404:	2b04      	cmp	r3, #4
   37406:	d1d7      	bne.n	373b8 <rpc_gnss_event_handler+0xf4>
   37408:	6823      	ldr	r3, [r4, #0]
   3740a:	0c1b      	lsrs	r3, r3, #16
   3740c:	041b      	lsls	r3, r3, #16
   3740e:	f043 0302 	orr.w	r3, r3, #2
   37412:	6023      	str	r3, [r4, #0]
   37414:	e7d0      	b.n	373b8 <rpc_gnss_event_handler+0xf4>
   37416:	6823      	ldr	r3, [r4, #0]
   37418:	b29b      	uxth	r3, r3
   3741a:	2b03      	cmp	r3, #3
   3741c:	d1cc      	bne.n	373b8 <rpc_gnss_event_handler+0xf4>
   3741e:	e7f3      	b.n	37408 <rpc_gnss_event_handler+0x144>
   37420:	4638      	mov	r0, r7
   37422:	f003 fd5d 	bl	3aee0 <nrf_free>
   37426:	6830      	ldr	r0, [r6, #0]
   37428:	2800      	cmp	r0, #0
   3742a:	f47f af69 	bne.w	37300 <rpc_gnss_event_handler+0x3c>
   3742e:	e76c      	b.n	3730a <rpc_gnss_event_handler+0x46>
   37430:	0c1b      	lsrs	r3, r3, #16
   37432:	041b      	lsls	r3, r3, #16
   37434:	f043 0304 	orr.w	r3, r3, #4
   37438:	6023      	str	r3, [r4, #0]
   3743a:	e7bd      	b.n	373b8 <rpc_gnss_event_handler+0xf4>
   3743c:	6823      	ldr	r3, [r4, #0]
   3743e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37442:	6023      	str	r3, [r4, #0]
   37444:	e7c9      	b.n	373da <rpc_gnss_event_handler+0x116>
   37446:	6830      	ldr	r0, [r6, #0]
   37448:	2800      	cmp	r0, #0
   3744a:	f43f af5e 	beq.w	3730a <rpc_gnss_event_handler+0x46>
   3744e:	f002 ff59 	bl	3a304 <rpc_gnss_client_data_free>
   37452:	4b03      	ldr	r3, [pc, #12]	; (37460 <rpc_gnss_event_handler+0x19c>)
   37454:	601f      	str	r7, [r3, #0]
   37456:	e758      	b.n	3730a <rpc_gnss_event_handler+0x46>
   37458:	2002a396 	.word	0x2002a396
   3745c:	200257e0 	.word	0x200257e0
   37460:	200257e4 	.word	0x200257e4
   37464:	200257e8 	.word	0x200257e8

00037468 <gnss_interface_write>:
   37468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3746c:	4a74      	ldr	r2, [pc, #464]	; (37640 <gnss_interface_write+0x1d8>)
   3746e:	b09f      	sub	sp, #124	; 0x7c
   37470:	4290      	cmp	r0, r2
   37472:	9d26      	ldr	r5, [sp, #152]	; 0x98
   37474:	f040 80d7 	bne.w	37626 <gnss_interface_write+0x1be>
   37478:	2900      	cmp	r1, #0
   3747a:	f000 80c6 	beq.w	3760a <gnss_interface_write+0x1a2>
   3747e:	2d00      	cmp	r5, #0
   37480:	f000 80c3 	beq.w	3760a <gnss_interface_write+0x1a2>
   37484:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   37486:	2a02      	cmp	r2, #2
   37488:	f040 80bf 	bne.w	3760a <gnss_interface_write+0x1a2>
   3748c:	4c6d      	ldr	r4, [pc, #436]	; (37644 <gnss_interface_write+0x1dc>)
   3748e:	6822      	ldr	r2, [r4, #0]
   37490:	b292      	uxth	r2, r2
   37492:	2a02      	cmp	r2, #2
   37494:	d004      	beq.n	374a0 <gnss_interface_write+0x38>
   37496:	6822      	ldr	r2, [r4, #0]
   37498:	b292      	uxth	r2, r2
   3749a:	2a04      	cmp	r2, #4
   3749c:	f040 80bd 	bne.w	3761a <gnss_interface_write+0x1b2>
   374a0:	2b00      	cmp	r3, #0
   374a2:	f040 80c6 	bne.w	37632 <gnss_interface_write+0x1ca>
   374a6:	6822      	ldr	r2, [r4, #0]
   374a8:	0390      	lsls	r0, r2, #14
   374aa:	d512      	bpl.n	374d2 <gnss_interface_write+0x6a>
   374ac:	6822      	ldr	r2, [r4, #0]
   374ae:	882b      	ldrh	r3, [r5, #0]
   374b0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   374b4:	6022      	str	r2, [r4, #0]
   374b6:	6822      	ldr	r2, [r4, #0]
   374b8:	3b01      	subs	r3, #1
   374ba:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   374be:	6022      	str	r2, [r4, #0]
   374c0:	2b07      	cmp	r3, #7
   374c2:	f200 80a2 	bhi.w	3760a <gnss_interface_write+0x1a2>
   374c6:	e8df f003 	tbb	[pc, r3]
   374ca:	7d82      	.short	0x7d82
   374cc:	646e7378 	.word	0x646e7378
   374d0:	0869      	.short	0x0869
   374d2:	2000      	movs	r0, #0
   374d4:	b01f      	add	sp, #124	; 0x7c
   374d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   374da:	4608      	mov	r0, r1
   374dc:	a902      	add	r1, sp, #8
   374de:	f002 fec1 	bl	3a264 <rpc_gnss_serialize_integrity>
   374e2:	2172      	movs	r1, #114	; 0x72
   374e4:	4668      	mov	r0, sp
   374e6:	f002 fedb 	bl	3a2a0 <rpc_gnss_client_request_alloc>
   374ea:	4605      	mov	r5, r0
   374ec:	9800      	ldr	r0, [sp, #0]
   374ee:	2d00      	cmp	r5, #0
   374f0:	d172      	bne.n	375d8 <gnss_interface_write+0x170>
   374f2:	2800      	cmp	r0, #0
   374f4:	d077      	beq.n	375e6 <gnss_interface_write+0x17e>
   374f6:	f241 0605 	movw	r6, #4101	; 0x1005
   374fa:	f04f 0c49 	mov.w	ip, #73	; 0x49
   374fe:	2272      	movs	r2, #114	; 0x72
   37500:	f04f 0e76 	mov.w	lr, #118	; 0x76
   37504:	f04f 0943 	mov.w	r9, #67	; 0x43
   37508:	f04f 0854 	mov.w	r8, #84	; 0x54
   3750c:	4f4e      	ldr	r7, [pc, #312]	; (37648 <gnss_interface_write+0x1e0>)
   3750e:	a91e      	add	r1, sp, #120	; 0x78
   37510:	883b      	ldrh	r3, [r7, #0]
   37512:	f880 c00f 	strb.w	ip, [r0, #15]
   37516:	3301      	adds	r3, #1
   37518:	b29b      	uxth	r3, r3
   3751a:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   3751e:	f841 cd74 	str.w	ip, [r1, #-116]!
   37522:	7145      	strb	r5, [r0, #5]
   37524:	7185      	strb	r5, [r0, #6]
   37526:	71c5      	strb	r5, [r0, #7]
   37528:	7205      	strb	r5, [r0, #8]
   3752a:	7245      	strb	r5, [r0, #9]
   3752c:	7285      	strb	r5, [r0, #10]
   3752e:	72c5      	strb	r5, [r0, #11]
   37530:	7102      	strb	r2, [r0, #4]
   37532:	f880 900c 	strb.w	r9, [r0, #12]
   37536:	f880 800d 	strb.w	r8, [r0, #13]
   3753a:	f880 e00e 	strb.w	lr, [r0, #14]
   3753e:	6800      	ldr	r0, [r0, #0]
   37540:	803b      	strh	r3, [r7, #0]
   37542:	f00d fe71 	bl	45228 <memcpy>
   37546:	4b41      	ldr	r3, [pc, #260]	; (3764c <gnss_interface_write+0x1e4>)
   37548:	4631      	mov	r1, r6
   3754a:	9800      	ldr	r0, [sp, #0]
   3754c:	601d      	str	r5, [r3, #0]
   3754e:	f002 febb 	bl	3a2c8 <rpc_gnss_client_request_send>
   37552:	2800      	cmp	r0, #0
   37554:	d14e      	bne.n	375f4 <gnss_interface_write+0x18c>
   37556:	6823      	ldr	r3, [r4, #0]
   37558:	0299      	lsls	r1, r3, #10
   3755a:	d50b      	bpl.n	37574 <gnss_interface_write+0x10c>
   3755c:	4e3c      	ldr	r6, [pc, #240]	; (37650 <gnss_interface_write+0x1e8>)
   3755e:	4d38      	ldr	r5, [pc, #224]	; (37640 <gnss_interface_write+0x1d8>)
   37560:	e000      	b.n	37564 <gnss_interface_write+0xfc>
   37562:	b978      	cbnz	r0, 37584 <gnss_interface_write+0x11c>
   37564:	4631      	mov	r1, r6
   37566:	4628      	mov	r0, r5
   37568:	f7f2 f814 	bl	29594 <bsd_os_timedwait>
   3756c:	6823      	ldr	r3, [r4, #0]
   3756e:	029a      	lsls	r2, r3, #10
   37570:	d4f7      	bmi.n	37562 <gnss_interface_write+0xfa>
   37572:	b938      	cbnz	r0, 37584 <gnss_interface_write+0x11c>
   37574:	6823      	ldr	r3, [r4, #0]
   37576:	039b      	lsls	r3, r3, #14
   37578:	d4ab      	bmi.n	374d2 <gnss_interface_write+0x6a>
   3757a:	2005      	movs	r0, #5
   3757c:	6823      	ldr	r3, [r4, #0]
   3757e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37582:	6023      	str	r3, [r4, #0]
   37584:	f7f2 f8c6 	bl	29714 <bsd_os_errno_set>
   37588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3758c:	b01f      	add	sp, #124	; 0x7c
   3758e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37592:	4608      	mov	r0, r1
   37594:	a902      	add	r1, sp, #8
   37596:	f002 fe1d 	bl	3a1d4 <rpc_gnss_serialize_time_and_sv_tow>
   3759a:	e7a2      	b.n	374e2 <gnss_interface_write+0x7a>
   3759c:	4608      	mov	r0, r1
   3759e:	a902      	add	r1, sp, #8
   375a0:	f002 fe40 	bl	3a224 <rpc_gnss_serialize_location>
   375a4:	e79d      	b.n	374e2 <gnss_interface_write+0x7a>
   375a6:	4608      	mov	r0, r1
   375a8:	a902      	add	r1, sp, #8
   375aa:	f002 fdf9 	bl	3a1a0 <rpc_gnss_serialize_nequick>
   375ae:	e798      	b.n	374e2 <gnss_interface_write+0x7a>
   375b0:	4608      	mov	r0, r1
   375b2:	a902      	add	r1, sp, #8
   375b4:	f002 fdd0 	bl	3a158 <rpc_gnss_serialize_klob>
   375b8:	e793      	b.n	374e2 <gnss_interface_write+0x7a>
   375ba:	4608      	mov	r0, r1
   375bc:	a902      	add	r1, sp, #8
   375be:	f002 fd99 	bl	3a0f4 <rpc_gnss_serialize_alm>
   375c2:	e78e      	b.n	374e2 <gnss_interface_write+0x7a>
   375c4:	4608      	mov	r0, r1
   375c6:	a902      	add	r1, sp, #8
   375c8:	f002 fd42 	bl	3a050 <rpc_gnss_serialize_ephe>
   375cc:	e789      	b.n	374e2 <gnss_interface_write+0x7a>
   375ce:	4608      	mov	r0, r1
   375d0:	a902      	add	r1, sp, #8
   375d2:	f002 fd1b 	bl	3a00c <rpc_gnss_serialize_utc>
   375d6:	e784      	b.n	374e2 <gnss_interface_write+0x7a>
   375d8:	b128      	cbz	r0, 375e6 <gnss_interface_write+0x17e>
   375da:	6803      	ldr	r3, [r0, #0]
   375dc:	b11b      	cbz	r3, 375e6 <gnss_interface_write+0x17e>
   375de:	4618      	mov	r0, r3
   375e0:	f002 fe90 	bl	3a304 <rpc_gnss_client_data_free>
   375e4:	9800      	ldr	r0, [sp, #0]
   375e6:	f002 fe85 	bl	3a2f4 <rpc_gnss_client_message_free>
   375ea:	2023      	movs	r0, #35	; 0x23
   375ec:	f7f2 f892 	bl	29714 <bsd_os_errno_set>
   375f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   375f4:	6823      	ldr	r3, [r4, #0]
   375f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   375fa:	6023      	str	r3, [r4, #0]
   375fc:	6823      	ldr	r3, [r4, #0]
   375fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37602:	6023      	str	r3, [r4, #0]
   37604:	b01f      	add	sp, #124	; 0x7c
   37606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3760a:	2016      	movs	r0, #22
   3760c:	f7f2 f882 	bl	29714 <bsd_os_errno_set>
   37610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37614:	b01f      	add	sp, #124	; 0x7c
   37616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3761a:	2039      	movs	r0, #57	; 0x39
   3761c:	f7f2 f87a 	bl	29714 <bsd_os_errno_set>
   37620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37624:	e756      	b.n	374d4 <gnss_interface_write+0x6c>
   37626:	2009      	movs	r0, #9
   37628:	f7f2 f874 	bl	29714 <bsd_os_errno_set>
   3762c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37630:	e750      	b.n	374d4 <gnss_interface_write+0x6c>
   37632:	202d      	movs	r0, #45	; 0x2d
   37634:	f7f2 f86e 	bl	29714 <bsd_os_errno_set>
   37638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3763c:	e74a      	b.n	374d4 <gnss_interface_write+0x6c>
   3763e:	bf00      	nop
   37640:	49765443 	.word	0x49765443
   37644:	200257e0 	.word	0x200257e0
   37648:	2002a396 	.word	0x2002a396
   3764c:	200257e4 	.word	0x200257e4
   37650:	20020770 	.word	0x20020770

00037654 <gnss_interface_read>:
   37654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37658:	4c55      	ldr	r4, [pc, #340]	; (377b0 <gnss_interface_read+0x15c>)
   3765a:	b0b7      	sub	sp, #220	; 0xdc
   3765c:	42a0      	cmp	r0, r4
   3765e:	f040 81fa 	bne.w	37a56 <gnss_interface_read+0x402>
   37662:	460e      	mov	r6, r1
   37664:	2900      	cmp	r1, #0
   37666:	f000 81f0 	beq.w	37a4a <gnss_interface_read+0x3f6>
   3766a:	2ad7      	cmp	r2, #215	; 0xd7
   3766c:	f240 81ed 	bls.w	37a4a <gnss_interface_read+0x3f6>
   37670:	4d50      	ldr	r5, [pc, #320]	; (377b4 <gnss_interface_read+0x160>)
   37672:	469a      	mov	sl, r3
   37674:	682b      	ldr	r3, [r5, #0]
   37676:	b29b      	uxth	r3, r3
   37678:	2b04      	cmp	r3, #4
   3767a:	d004      	beq.n	37686 <gnss_interface_read+0x32>
   3767c:	682b      	ldr	r3, [r5, #0]
   3767e:	b29b      	uxth	r3, r3
   37680:	2b02      	cmp	r3, #2
   37682:	f040 81dc 	bne.w	37a3e <gnss_interface_read+0x3ea>
   37686:	f1ba 0f00 	cmp.w	sl, #0
   3768a:	d178      	bne.n	3777e <gnss_interface_read+0x12a>
   3768c:	2102      	movs	r1, #2
   3768e:	20b6      	movs	r0, #182	; 0xb6
   37690:	2400      	movs	r4, #0
   37692:	682b      	ldr	r3, [r5, #0]
   37694:	f10d 020e 	add.w	r2, sp, #14
   37698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3769c:	602b      	str	r3, [r5, #0]
   3769e:	ab08      	add	r3, sp, #32
   376a0:	9304      	str	r3, [sp, #16]
   376a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 377bc <gnss_interface_read+0x168>
   376a6:	ea0a 0301 	and.w	r3, sl, r1
   376aa:	4f43      	ldr	r7, [pc, #268]	; (377b8 <gnss_interface_read+0x164>)
   376ac:	f8df 9110 	ldr.w	r9, [pc, #272]	; 377c0 <gnss_interface_read+0x16c>
   376b0:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 377b0 <gnss_interface_read+0x15c>
   376b4:	9005      	str	r0, [sp, #20]
   376b6:	9107      	str	r1, [sp, #28]
   376b8:	9206      	str	r2, [sp, #24]
   376ba:	9301      	str	r3, [sp, #4]
   376bc:	f8db 0000 	ldr.w	r0, [fp]
   376c0:	4652      	mov	r2, sl
   376c2:	6803      	ldr	r3, [r0, #0]
   376c4:	a904      	add	r1, sp, #16
   376c6:	689b      	ldr	r3, [r3, #8]
   376c8:	4798      	blx	r3
   376ca:	2800      	cmp	r0, #0
   376cc:	da2a      	bge.n	37724 <gnss_interface_read+0xd0>
   376ce:	9b01      	ldr	r3, [sp, #4]
   376d0:	b15b      	cbz	r3, 376ea <gnss_interface_read+0x96>
   376d2:	1c42      	adds	r2, r0, #1
   376d4:	4603      	mov	r3, r0
   376d6:	d125      	bne.n	37724 <gnss_interface_read+0xd0>
   376d8:	b9dc      	cbnz	r4, 37712 <gnss_interface_read+0xbe>
   376da:	2023      	movs	r0, #35	; 0x23
   376dc:	461c      	mov	r4, r3
   376de:	f7f2 f819 	bl	29714 <bsd_os_errno_set>
   376e2:	4620      	mov	r0, r4
   376e4:	b037      	add	sp, #220	; 0xdc
   376e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   376ea:	682a      	ldr	r2, [r5, #0]
   376ec:	783b      	ldrb	r3, [r7, #0]
   376ee:	03d1      	lsls	r1, r2, #15
   376f0:	d40c      	bmi.n	3770c <gnss_interface_read+0xb8>
   376f2:	b95c      	cbnz	r4, 3770c <gnss_interface_read+0xb8>
   376f4:	b163      	cbz	r3, 37710 <gnss_interface_read+0xbc>
   376f6:	4649      	mov	r1, r9
   376f8:	4640      	mov	r0, r8
   376fa:	f7f1 ff4b 	bl	29594 <bsd_os_timedwait>
   376fe:	682b      	ldr	r3, [r5, #0]
   37700:	03db      	lsls	r3, r3, #15
   37702:	d437      	bmi.n	37774 <gnss_interface_read+0x120>
   37704:	783b      	ldrb	r3, [r7, #0]
   37706:	2800      	cmp	r0, #0
   37708:	d0f4      	beq.n	376f4 <gnss_interface_read+0xa0>
   3770a:	4604      	mov	r4, r0
   3770c:	2b00      	cmp	r3, #0
   3770e:	d1d5      	bne.n	376bc <gnss_interface_read+0x68>
   37710:	2470      	movs	r4, #112	; 0x70
   37712:	4620      	mov	r0, r4
   37714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37718:	f7f1 fffc 	bl	29714 <bsd_os_errno_set>
   3771c:	4620      	mov	r0, r4
   3771e:	b037      	add	sp, #220	; 0xdc
   37720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37724:	f244 0202 	movw	r2, #16386	; 0x4002
   37728:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3772c:	4293      	cmp	r3, r2
   3772e:	d02f      	beq.n	37790 <gnss_interface_read+0x13c>
   37730:	f244 0201 	movw	r2, #16385	; 0x4001
   37734:	4293      	cmp	r3, r2
   37736:	d045      	beq.n	377c4 <gnss_interface_read+0x170>
   37738:	f244 0203 	movw	r2, #16387	; 0x4003
   3773c:	4293      	cmp	r3, r2
   3773e:	f040 8184 	bne.w	37a4a <gnss_interface_read+0x3f6>
   37742:	2203      	movs	r2, #3
   37744:	2414      	movs	r4, #20
   37746:	9b08      	ldr	r3, [sp, #32]
   37748:	7032      	strb	r2, [r6, #0]
   3774a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3774c:	60b3      	str	r3, [r6, #8]
   3774e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   37752:	e9c6 2303 	strd	r2, r3, [r6, #12]
   37756:	f8db 0000 	ldr.w	r0, [fp]
   3775a:	6803      	ldr	r3, [r0, #0]
   3775c:	68db      	ldr	r3, [r3, #12]
   3775e:	4798      	blx	r3
   37760:	2800      	cmp	r0, #0
   37762:	ddbe      	ble.n	376e2 <gnss_interface_read+0x8e>
   37764:	4620      	mov	r0, r4
   37766:	682b      	ldr	r3, [r5, #0]
   37768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3776c:	602b      	str	r3, [r5, #0]
   3776e:	b037      	add	sp, #220	; 0xdc
   37770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37774:	783b      	ldrb	r3, [r7, #0]
   37776:	4604      	mov	r4, r0
   37778:	2b00      	cmp	r3, #0
   3777a:	d19f      	bne.n	376bc <gnss_interface_read+0x68>
   3777c:	e7c8      	b.n	37710 <gnss_interface_read+0xbc>
   3777e:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   37782:	d183      	bne.n	3768c <gnss_interface_read+0x38>
   37784:	202d      	movs	r0, #45	; 0x2d
   37786:	f7f1 ffc5 	bl	29714 <bsd_os_errno_set>
   3778a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3778e:	e7a8      	b.n	376e2 <gnss_interface_read+0x8e>
   37790:	a808      	add	r0, sp, #32
   37792:	f7e5 fd67 	bl	1d264 <strlen>
   37796:	2302      	movs	r3, #2
   37798:	1c44      	adds	r4, r0, #1
   3779a:	b2a4      	uxth	r4, r4
   3779c:	f806 3b08 	strb.w	r3, [r6], #8
   377a0:	4622      	mov	r2, r4
   377a2:	a908      	add	r1, sp, #32
   377a4:	4630      	mov	r0, r6
   377a6:	f00d fd3f 	bl	45228 <memcpy>
   377aa:	3408      	adds	r4, #8
   377ac:	e7d3      	b.n	37756 <gnss_interface_read+0x102>
   377ae:	bf00      	nop
   377b0:	49765443 	.word	0x49765443
   377b4:	200257e0 	.word	0x200257e0
   377b8:	2002cb12 	.word	0x2002cb12
   377bc:	200257e8 	.word	0x200257e8
   377c0:	20020770 	.word	0x20020770
   377c4:	2401      	movs	r4, #1
   377c6:	a809      	add	r0, sp, #36	; 0x24
   377c8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   377ca:	e9c6 0102 	strd	r0, r1, [r6, #8]
   377ce:	e9c6 2304 	strd	r2, r3, [r6, #16]
   377d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   377d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   377d6:	7034      	strb	r4, [r6, #0]
   377d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   377da:	61b1      	str	r1, [r6, #24]
   377dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   377de:	61f2      	str	r2, [r6, #28]
   377e0:	6233      	str	r3, [r6, #32]
   377e2:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   377e6:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   377ea:	6271      	str	r1, [r6, #36]	; 0x24
   377ec:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   377f0:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   377f4:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   377f8:	6373      	str	r3, [r6, #52]	; 0x34
   377fa:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   377fe:	63b1      	str	r1, [r6, #56]	; 0x38
   37800:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   37804:	63f2      	str	r2, [r6, #60]	; 0x3c
   37806:	6433      	str	r3, [r6, #64]	; 0x40
   37808:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   3780c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   37810:	8531      	strh	r1, [r6, #40]	; 0x28
   37812:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   37816:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   3781a:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   3781e:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   37822:	9b18      	ldr	r3, [sp, #96]	; 0x60
   37824:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   37828:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   3782c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   37830:	f3c3 210f 	ubfx	r1, r3, #8, #16
   37834:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   37836:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   3783a:	8630      	strh	r0, [r6, #48]	; 0x30
   3783c:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   37840:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   37844:	f3c3 230f 	ubfx	r3, r3, #8, #16
   37848:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   3784c:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   37850:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   37854:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   37858:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   3785c:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   37860:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   37864:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   37868:	64f3      	str	r3, [r6, #76]	; 0x4c
   3786a:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   3786e:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   37872:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   37876:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   3787a:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   3787e:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   37882:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   37886:	65b1      	str	r1, [r6, #88]	; 0x58
   37888:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   3788c:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   37890:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   37894:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   37898:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   3789c:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   378a0:	6672      	str	r2, [r6, #100]	; 0x64
   378a2:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   378a6:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   378aa:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   378ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
   378b0:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   378b4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   378b8:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   378bc:	f3c2 220f 	ubfx	r2, r2, #8, #16
   378c0:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   378c4:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   378c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   378cc:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   378d0:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   378d4:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   378d8:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   378dc:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   378e0:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   378e4:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   378e8:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   378ec:	6733      	str	r3, [r6, #112]	; 0x70
   378ee:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   378f2:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   378f6:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   378fa:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   378fe:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   37902:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   37906:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   3790a:	67f1      	str	r1, [r6, #124]	; 0x7c
   3790c:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   37910:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   37914:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   37918:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   3791c:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   37920:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   37924:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   37928:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   3792c:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   37930:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   37932:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   37936:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   3793a:	f3c3 210f 	ubfx	r1, r3, #8, #16
   3793e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   37940:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   37944:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   37948:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   3794c:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   37950:	f3c3 230f 	ubfx	r3, r3, #8, #16
   37954:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   37958:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   3795c:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   37960:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   37964:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   37968:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   3796c:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   37970:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   37974:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   37978:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   3797c:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   37980:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   37984:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   37988:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   3798c:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   37990:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   37994:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   37998:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   3799c:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   379a0:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   379a4:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   379a8:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   379ac:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   379b0:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   379b4:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   379b8:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   379bc:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   379c0:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   379c4:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   379c6:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   379ca:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   379ce:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   379d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   379d6:	f3c2 220f 	ubfx	r2, r2, #8, #16
   379da:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   379de:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   379e2:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   379e6:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   379ea:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   379ee:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   379f2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   379f6:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   379fa:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   379fe:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   37a02:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   37a06:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   37a0a:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   37a0e:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   37a12:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   37a16:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   37a1a:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   37a1e:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   37a22:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   37a26:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   37a2a:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   37a2e:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   37a32:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   37a36:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   37a3a:	24d8      	movs	r4, #216	; 0xd8
   37a3c:	e68b      	b.n	37756 <gnss_interface_read+0x102>
   37a3e:	2039      	movs	r0, #57	; 0x39
   37a40:	f7f1 fe68 	bl	29714 <bsd_os_errno_set>
   37a44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37a48:	e64b      	b.n	376e2 <gnss_interface_read+0x8e>
   37a4a:	2016      	movs	r0, #22
   37a4c:	f7f1 fe62 	bl	29714 <bsd_os_errno_set>
   37a50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37a54:	e645      	b.n	376e2 <gnss_interface_read+0x8e>
   37a56:	2009      	movs	r0, #9
   37a58:	f7f1 fe5c 	bl	29714 <bsd_os_errno_set>
   37a5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37a60:	e63f      	b.n	376e2 <gnss_interface_read+0x8e>
   37a62:	bf00      	nop

00037a64 <gnss_interface_setopt>:
   37a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37a68:	4db3      	ldr	r5, [pc, #716]	; (37d38 <gnss_interface_setopt+0x2d4>)
   37a6a:	b086      	sub	sp, #24
   37a6c:	682c      	ldr	r4, [r5, #0]
   37a6e:	b2a4      	uxth	r4, r4
   37a70:	2c02      	cmp	r4, #2
   37a72:	d00d      	beq.n	37a90 <gnss_interface_setopt+0x2c>
   37a74:	2a08      	cmp	r2, #8
   37a76:	d00b      	beq.n	37a90 <gnss_interface_setopt+0x2c>
   37a78:	f1a2 040a 	sub.w	r4, r2, #10
   37a7c:	2c01      	cmp	r4, #1
   37a7e:	d907      	bls.n	37a90 <gnss_interface_setopt+0x2c>
   37a80:	200e      	movs	r0, #14
   37a82:	f7f1 fe47 	bl	29714 <bsd_os_errno_set>
   37a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37a8a:	b006      	add	sp, #24
   37a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37a90:	682c      	ldr	r4, [r5, #0]
   37a92:	0264      	lsls	r4, r4, #9
   37a94:	f100 8149 	bmi.w	37d2a <gnss_interface_setopt+0x2c6>
   37a98:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   37a9c:	f040 8139 	bne.w	37d12 <gnss_interface_setopt+0x2ae>
   37aa0:	49a6      	ldr	r1, [pc, #664]	; (37d3c <gnss_interface_setopt+0x2d8>)
   37aa2:	4288      	cmp	r0, r1
   37aa4:	f040 813b 	bne.w	37d1e <gnss_interface_setopt+0x2ba>
   37aa8:	f1a2 010a 	sub.w	r1, r2, #10
   37aac:	2901      	cmp	r1, #1
   37aae:	d902      	bls.n	37ab6 <gnss_interface_setopt+0x52>
   37ab0:	2b00      	cmp	r3, #0
   37ab2:	f000 8112 	beq.w	37cda <gnss_interface_setopt+0x276>
   37ab6:	3a01      	subs	r2, #1
   37ab8:	2a0a      	cmp	r2, #10
   37aba:	f200 810e 	bhi.w	37cda <gnss_interface_setopt+0x276>
   37abe:	e8df f012 	tbh	[pc, r2, lsl #1]
   37ac2:	007f      	.short	0x007f
   37ac4:	0098008c 	.word	0x0098008c
   37ac8:	00ae00a2 	.word	0x00ae00a2
   37acc:	00c500b9 	.word	0x00c500b9
   37ad0:	00f300dd 	.word	0x00f300dd
   37ad4:	000b00ff 	.word	0x000b00ff
   37ad8:	682b      	ldr	r3, [r5, #0]
   37ada:	b29b      	uxth	r3, r3
   37adc:	2b04      	cmp	r3, #4
   37ade:	d1cf      	bne.n	37a80 <gnss_interface_setopt+0x1c>
   37ae0:	2203      	movs	r2, #3
   37ae2:	f241 0604 	movw	r6, #4100	; 0x1004
   37ae6:	2300      	movs	r3, #0
   37ae8:	4637      	mov	r7, r6
   37aea:	f88d 2008 	strb.w	r2, [sp, #8]
   37aee:	f88d 3009 	strb.w	r3, [sp, #9]
   37af2:	f88d 300a 	strb.w	r3, [sp, #10]
   37af6:	f88d 300b 	strb.w	r3, [sp, #11]
   37afa:	f88d 300c 	strb.w	r3, [sp, #12]
   37afe:	682b      	ldr	r3, [r5, #0]
   37b00:	2112      	movs	r1, #18
   37b02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   37b06:	4668      	mov	r0, sp
   37b08:	602b      	str	r3, [r5, #0]
   37b0a:	f002 fbc9 	bl	3a2a0 <rpc_gnss_client_request_alloc>
   37b0e:	4604      	mov	r4, r0
   37b10:	9800      	ldr	r0, [sp, #0]
   37b12:	2c00      	cmp	r4, #0
   37b14:	f040 80e7 	bne.w	37ce6 <gnss_interface_setopt+0x282>
   37b18:	2800      	cmp	r0, #0
   37b1a:	f000 80eb 	beq.w	37cf4 <gnss_interface_setopt+0x290>
   37b1e:	2212      	movs	r2, #18
   37b20:	f04f 0876 	mov.w	r8, #118	; 0x76
   37b24:	f04f 0e49 	mov.w	lr, #73	; 0x49
   37b28:	f04f 0a43 	mov.w	sl, #67	; 0x43
   37b2c:	f04f 0954 	mov.w	r9, #84	; 0x54
   37b30:	f8df c210 	ldr.w	ip, [pc, #528]	; 37d44 <gnss_interface_setopt+0x2e0>
   37b34:	a906      	add	r1, sp, #24
   37b36:	f8bc 3000 	ldrh.w	r3, [ip]
   37b3a:	f880 800e 	strb.w	r8, [r0, #14]
   37b3e:	3301      	adds	r3, #1
   37b40:	b29b      	uxth	r3, r3
   37b42:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   37b46:	f841 6d14 	str.w	r6, [r1, #-20]!
   37b4a:	7144      	strb	r4, [r0, #5]
   37b4c:	7184      	strb	r4, [r0, #6]
   37b4e:	71c4      	strb	r4, [r0, #7]
   37b50:	7204      	strb	r4, [r0, #8]
   37b52:	7244      	strb	r4, [r0, #9]
   37b54:	7284      	strb	r4, [r0, #10]
   37b56:	72c4      	strb	r4, [r0, #11]
   37b58:	7102      	strb	r2, [r0, #4]
   37b5a:	f880 a00c 	strb.w	sl, [r0, #12]
   37b5e:	f880 900d 	strb.w	r9, [r0, #13]
   37b62:	f880 e00f 	strb.w	lr, [r0, #15]
   37b66:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 37d48 <gnss_interface_setopt+0x2e4>
   37b6a:	6800      	ldr	r0, [r0, #0]
   37b6c:	f8ac 3000 	strh.w	r3, [ip]
   37b70:	f00d fb5a 	bl	45228 <memcpy>
   37b74:	4639      	mov	r1, r7
   37b76:	9800      	ldr	r0, [sp, #0]
   37b78:	f8c8 4000 	str.w	r4, [r8]
   37b7c:	f002 fba4 	bl	3a2c8 <rpc_gnss_client_request_send>
   37b80:	2800      	cmp	r0, #0
   37b82:	f040 80bc 	bne.w	37cfe <gnss_interface_setopt+0x29a>
   37b86:	4f6e      	ldr	r7, [pc, #440]	; (37d40 <gnss_interface_setopt+0x2dc>)
   37b88:	4e6c      	ldr	r6, [pc, #432]	; (37d3c <gnss_interface_setopt+0x2d8>)
   37b8a:	4639      	mov	r1, r7
   37b8c:	4630      	mov	r0, r6
   37b8e:	f7f1 fd01 	bl	29594 <bsd_os_timedwait>
   37b92:	682c      	ldr	r4, [r5, #0]
   37b94:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   37b98:	d1f7      	bne.n	37b8a <gnss_interface_setopt+0x126>
   37b9a:	f8d8 0000 	ldr.w	r0, [r8]
   37b9e:	b118      	cbz	r0, 37ba8 <gnss_interface_setopt+0x144>
   37ba0:	f002 fbb0 	bl	3a304 <rpc_gnss_client_data_free>
   37ba4:	f8c8 4000 	str.w	r4, [r8]
   37ba8:	682b      	ldr	r3, [r5, #0]
   37baa:	021b      	lsls	r3, r3, #8
   37bac:	f140 808f 	bpl.w	37cce <gnss_interface_setopt+0x26a>
   37bb0:	2000      	movs	r0, #0
   37bb2:	682b      	ldr	r3, [r5, #0]
   37bb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   37bb8:	602b      	str	r3, [r5, #0]
   37bba:	b006      	add	sp, #24
   37bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   37bc0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37bc2:	2a02      	cmp	r2, #2
   37bc4:	f040 8089 	bne.w	37cda <gnss_interface_setopt+0x276>
   37bc8:	2208      	movs	r2, #8
   37bca:	f241 1603 	movw	r6, #4355	; 0x1103
   37bce:	881b      	ldrh	r3, [r3, #0]
   37bd0:	9202      	str	r2, [sp, #8]
   37bd2:	f8ad 300f 	strh.w	r3, [sp, #15]
   37bd6:	4637      	mov	r7, r6
   37bd8:	e791      	b.n	37afe <gnss_interface_setopt+0x9a>
   37bda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37bdc:	2a02      	cmp	r2, #2
   37bde:	d17c      	bne.n	37cda <gnss_interface_setopt+0x276>
   37be0:	2210      	movs	r2, #16
   37be2:	f241 1603 	movw	r6, #4355	; 0x1103
   37be6:	881b      	ldrh	r3, [r3, #0]
   37be8:	9202      	str	r2, [sp, #8]
   37bea:	f8ad 3011 	strh.w	r3, [sp, #17]
   37bee:	4637      	mov	r7, r6
   37bf0:	e785      	b.n	37afe <gnss_interface_setopt+0x9a>
   37bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37bf4:	2a01      	cmp	r2, #1
   37bf6:	d170      	bne.n	37cda <gnss_interface_setopt+0x276>
   37bf8:	781b      	ldrb	r3, [r3, #0]
   37bfa:	2b01      	cmp	r3, #1
   37bfc:	d16d      	bne.n	37cda <gnss_interface_setopt+0x276>
   37bfe:	f241 1603 	movw	r6, #4355	; 0x1103
   37c02:	4637      	mov	r7, r6
   37c04:	e77b      	b.n	37afe <gnss_interface_setopt+0x9a>
   37c06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c08:	2a02      	cmp	r2, #2
   37c0a:	d166      	bne.n	37cda <gnss_interface_setopt+0x276>
   37c0c:	2220      	movs	r2, #32
   37c0e:	f241 1603 	movw	r6, #4355	; 0x1103
   37c12:	881b      	ldrh	r3, [r3, #0]
   37c14:	9202      	str	r2, [sp, #8]
   37c16:	f8ad 3013 	strh.w	r3, [sp, #19]
   37c1a:	4637      	mov	r7, r6
   37c1c:	e76f      	b.n	37afe <gnss_interface_setopt+0x9a>
   37c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c20:	2a01      	cmp	r2, #1
   37c22:	d15a      	bne.n	37cda <gnss_interface_setopt+0x276>
   37c24:	f241 1603 	movw	r6, #4355	; 0x1103
   37c28:	781b      	ldrb	r3, [r3, #0]
   37c2a:	9202      	str	r2, [sp, #8]
   37c2c:	f88d 300c 	strb.w	r3, [sp, #12]
   37c30:	4637      	mov	r7, r6
   37c32:	e764      	b.n	37afe <gnss_interface_setopt+0x9a>
   37c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c36:	2a01      	cmp	r2, #1
   37c38:	d14f      	bne.n	37cda <gnss_interface_setopt+0x276>
   37c3a:	2202      	movs	r2, #2
   37c3c:	f241 1603 	movw	r6, #4355	; 0x1103
   37c40:	781b      	ldrb	r3, [r3, #0]
   37c42:	9202      	str	r2, [sp, #8]
   37c44:	f88d 300d 	strb.w	r3, [sp, #13]
   37c48:	4637      	mov	r7, r6
   37c4a:	e758      	b.n	37afe <gnss_interface_setopt+0x9a>
   37c4c:	682a      	ldr	r2, [r5, #0]
   37c4e:	b292      	uxth	r2, r2
   37c50:	2a02      	cmp	r2, #2
   37c52:	f47f af15 	bne.w	37a80 <gnss_interface_setopt+0x1c>
   37c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c58:	2a04      	cmp	r2, #4
   37c5a:	d13e      	bne.n	37cda <gnss_interface_setopt+0x276>
   37c5c:	2101      	movs	r1, #1
   37c5e:	f241 0604 	movw	r6, #4100	; 0x1004
   37c62:	682a      	ldr	r2, [r5, #0]
   37c64:	6818      	ldr	r0, [r3, #0]
   37c66:	0c13      	lsrs	r3, r2, #16
   37c68:	041b      	lsls	r3, r3, #16
   37c6a:	f043 0303 	orr.w	r3, r3, #3
   37c6e:	f8cd 0009 	str.w	r0, [sp, #9]
   37c72:	602b      	str	r3, [r5, #0]
   37c74:	f88d 1008 	strb.w	r1, [sp, #8]
   37c78:	4637      	mov	r7, r6
   37c7a:	e740      	b.n	37afe <gnss_interface_setopt+0x9a>
   37c7c:	682a      	ldr	r2, [r5, #0]
   37c7e:	b292      	uxth	r2, r2
   37c80:	2a04      	cmp	r2, #4
   37c82:	d004      	beq.n	37c8e <gnss_interface_setopt+0x22a>
   37c84:	682a      	ldr	r2, [r5, #0]
   37c86:	b292      	uxth	r2, r2
   37c88:	2a02      	cmp	r2, #2
   37c8a:	f47f aef9 	bne.w	37a80 <gnss_interface_setopt+0x1c>
   37c8e:	2200      	movs	r2, #0
   37c90:	f88d 2008 	strb.w	r2, [sp, #8]
   37c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37c96:	2a04      	cmp	r2, #4
   37c98:	d11f      	bne.n	37cda <gnss_interface_setopt+0x276>
   37c9a:	f241 0604 	movw	r6, #4100	; 0x1004
   37c9e:	681b      	ldr	r3, [r3, #0]
   37ca0:	4637      	mov	r7, r6
   37ca2:	f8cd 3009 	str.w	r3, [sp, #9]
   37ca6:	e72a      	b.n	37afe <gnss_interface_setopt+0x9a>
   37ca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   37caa:	2a01      	cmp	r2, #1
   37cac:	d115      	bne.n	37cda <gnss_interface_setopt+0x276>
   37cae:	2240      	movs	r2, #64	; 0x40
   37cb0:	f241 1603 	movw	r6, #4355	; 0x1103
   37cb4:	781b      	ldrb	r3, [r3, #0]
   37cb6:	9202      	str	r2, [sp, #8]
   37cb8:	f88d 3015 	strb.w	r3, [sp, #21]
   37cbc:	4637      	mov	r7, r6
   37cbe:	e71e      	b.n	37afe <gnss_interface_setopt+0x9a>
   37cc0:	682b      	ldr	r3, [r5, #0]
   37cc2:	b29b      	uxth	r3, r3
   37cc4:	2b04      	cmp	r3, #4
   37cc6:	f47f aedb 	bne.w	37a80 <gnss_interface_setopt+0x1c>
   37cca:	2202      	movs	r2, #2
   37ccc:	e709      	b.n	37ae2 <gnss_interface_setopt+0x7e>
   37cce:	200e      	movs	r0, #14
   37cd0:	f7f1 fd20 	bl	29714 <bsd_os_errno_set>
   37cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37cd8:	e76b      	b.n	37bb2 <gnss_interface_setopt+0x14e>
   37cda:	2016      	movs	r0, #22
   37cdc:	f7f1 fd1a 	bl	29714 <bsd_os_errno_set>
   37ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37ce4:	e6d1      	b.n	37a8a <gnss_interface_setopt+0x26>
   37ce6:	b128      	cbz	r0, 37cf4 <gnss_interface_setopt+0x290>
   37ce8:	6803      	ldr	r3, [r0, #0]
   37cea:	b11b      	cbz	r3, 37cf4 <gnss_interface_setopt+0x290>
   37cec:	4618      	mov	r0, r3
   37cee:	f002 fb09 	bl	3a304 <rpc_gnss_client_data_free>
   37cf2:	9800      	ldr	r0, [sp, #0]
   37cf4:	f002 fafe 	bl	3a2f4 <rpc_gnss_client_message_free>
   37cf8:	2023      	movs	r0, #35	; 0x23
   37cfa:	f7f1 fd0b 	bl	29714 <bsd_os_errno_set>
   37cfe:	682b      	ldr	r3, [r5, #0]
   37d00:	200e      	movs	r0, #14
   37d02:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   37d06:	602b      	str	r3, [r5, #0]
   37d08:	f7f1 fd04 	bl	29714 <bsd_os_errno_set>
   37d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37d10:	e6bb      	b.n	37a8a <gnss_interface_setopt+0x26>
   37d12:	202a      	movs	r0, #42	; 0x2a
   37d14:	f7f1 fcfe 	bl	29714 <bsd_os_errno_set>
   37d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37d1c:	e6b5      	b.n	37a8a <gnss_interface_setopt+0x26>
   37d1e:	2009      	movs	r0, #9
   37d20:	f7f1 fcf8 	bl	29714 <bsd_os_errno_set>
   37d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37d28:	e6af      	b.n	37a8a <gnss_interface_setopt+0x26>
   37d2a:	2073      	movs	r0, #115	; 0x73
   37d2c:	f7f1 fcf2 	bl	29714 <bsd_os_errno_set>
   37d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37d34:	e6a9      	b.n	37a8a <gnss_interface_setopt+0x26>
   37d36:	bf00      	nop
   37d38:	200257e0 	.word	0x200257e0
   37d3c:	49765443 	.word	0x49765443
   37d40:	20020770 	.word	0x20020770
   37d44:	2002a396 	.word	0x2002a396
   37d48:	200257e4 	.word	0x200257e4

00037d4c <gnss_interface_getopt>:
   37d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37d50:	4c81      	ldr	r4, [pc, #516]	; (37f58 <gnss_interface_getopt+0x20c>)
   37d52:	b087      	sub	sp, #28
   37d54:	6825      	ldr	r5, [r4, #0]
   37d56:	4698      	mov	r8, r3
   37d58:	b2ad      	uxth	r5, r5
   37d5a:	2d02      	cmp	r5, #2
   37d5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37d5e:	f040 80dd 	bne.w	37f1c <gnss_interface_getopt+0x1d0>
   37d62:	6825      	ldr	r5, [r4, #0]
   37d64:	03ee      	lsls	r6, r5, #15
   37d66:	f100 80eb 	bmi.w	37f40 <gnss_interface_getopt+0x1f4>
   37d6a:	6825      	ldr	r5, [r4, #0]
   37d6c:	01ed      	lsls	r5, r5, #7
   37d6e:	f100 80ed 	bmi.w	37f4c <gnss_interface_getopt+0x200>
   37d72:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   37d76:	f040 80d7 	bne.w	37f28 <gnss_interface_getopt+0x1dc>
   37d7a:	4978      	ldr	r1, [pc, #480]	; (37f5c <gnss_interface_getopt+0x210>)
   37d7c:	4288      	cmp	r0, r1
   37d7e:	f040 80d9 	bne.w	37f34 <gnss_interface_getopt+0x1e8>
   37d82:	f1b8 0f00 	cmp.w	r8, #0
   37d86:	d00b      	beq.n	37da0 <gnss_interface_getopt+0x54>
   37d88:	b153      	cbz	r3, 37da0 <gnss_interface_getopt+0x54>
   37d8a:	1e57      	subs	r7, r2, #1
   37d8c:	2f05      	cmp	r7, #5
   37d8e:	d807      	bhi.n	37da0 <gnss_interface_getopt+0x54>
   37d90:	e8df f007 	tbb	[pc, r7]
   37d94:	0f030f0f 	.word	0x0f030f0f
   37d98:	0303      	.short	0x0303
   37d9a:	681b      	ldr	r3, [r3, #0]
   37d9c:	2b01      	cmp	r3, #1
   37d9e:	d00b      	beq.n	37db8 <gnss_interface_getopt+0x6c>
   37da0:	2016      	movs	r0, #22
   37da2:	f7f1 fcb7 	bl	29714 <bsd_os_errno_set>
   37da6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37daa:	4628      	mov	r0, r5
   37dac:	b007      	add	sp, #28
   37dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37db2:	681b      	ldr	r3, [r3, #0]
   37db4:	2b02      	cmp	r3, #2
   37db6:	d1f3      	bne.n	37da0 <gnss_interface_getopt+0x54>
   37db8:	6823      	ldr	r3, [r4, #0]
   37dba:	2212      	movs	r2, #18
   37dbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   37dc0:	2100      	movs	r1, #0
   37dc2:	a801      	add	r0, sp, #4
   37dc4:	6023      	str	r3, [r4, #0]
   37dc6:	f00d fa4f 	bl	45268 <memset>
   37dca:	2112      	movs	r1, #18
   37dcc:	4668      	mov	r0, sp
   37dce:	f002 fa67 	bl	3a2a0 <rpc_gnss_client_request_alloc>
   37dd2:	4605      	mov	r5, r0
   37dd4:	9800      	ldr	r0, [sp, #0]
   37dd6:	2d00      	cmp	r5, #0
   37dd8:	f040 808a 	bne.w	37ef0 <gnss_interface_getopt+0x1a4>
   37ddc:	2800      	cmp	r0, #0
   37dde:	f000 808e 	beq.w	37efe <gnss_interface_getopt+0x1b2>
   37de2:	f241 1602 	movw	r6, #4354	; 0x1102
   37de6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   37dea:	2212      	movs	r2, #18
   37dec:	f04f 0976 	mov.w	r9, #118	; 0x76
   37df0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   37df4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   37df8:	f8df c168 	ldr.w	ip, [pc, #360]	; 37f64 <gnss_interface_getopt+0x218>
   37dfc:	f880 e00f 	strb.w	lr, [r0, #15]
   37e00:	f8bc 3000 	ldrh.w	r3, [ip]
   37e04:	f880 900e 	strb.w	r9, [r0, #14]
   37e08:	3301      	adds	r3, #1
   37e0a:	b29b      	uxth	r3, r3
   37e0c:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   37e10:	f8cd e004 	str.w	lr, [sp, #4]
   37e14:	7145      	strb	r5, [r0, #5]
   37e16:	7185      	strb	r5, [r0, #6]
   37e18:	71c5      	strb	r5, [r0, #7]
   37e1a:	7205      	strb	r5, [r0, #8]
   37e1c:	7245      	strb	r5, [r0, #9]
   37e1e:	7285      	strb	r5, [r0, #10]
   37e20:	72c5      	strb	r5, [r0, #11]
   37e22:	a901      	add	r1, sp, #4
   37e24:	7102      	strb	r2, [r0, #4]
   37e26:	f880 b00c 	strb.w	fp, [r0, #12]
   37e2a:	f880 a00d 	strb.w	sl, [r0, #13]
   37e2e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 37f68 <gnss_interface_getopt+0x21c>
   37e32:	6800      	ldr	r0, [r0, #0]
   37e34:	f8ac 3000 	strh.w	r3, [ip]
   37e38:	f00d f9f6 	bl	45228 <memcpy>
   37e3c:	4631      	mov	r1, r6
   37e3e:	9800      	ldr	r0, [sp, #0]
   37e40:	f8c9 5000 	str.w	r5, [r9]
   37e44:	f002 fa40 	bl	3a2c8 <rpc_gnss_client_request_send>
   37e48:	2800      	cmp	r0, #0
   37e4a:	d15d      	bne.n	37f08 <gnss_interface_getopt+0x1bc>
   37e4c:	4e44      	ldr	r6, [pc, #272]	; (37f60 <gnss_interface_getopt+0x214>)
   37e4e:	4d43      	ldr	r5, [pc, #268]	; (37f5c <gnss_interface_getopt+0x210>)
   37e50:	4631      	mov	r1, r6
   37e52:	4628      	mov	r0, r5
   37e54:	f7f1 fb9e 	bl	29594 <bsd_os_timedwait>
   37e58:	6823      	ldr	r3, [r4, #0]
   37e5a:	01db      	lsls	r3, r3, #7
   37e5c:	d4f8      	bmi.n	37e50 <gnss_interface_getopt+0x104>
   37e5e:	f8d9 0000 	ldr.w	r0, [r9]
   37e62:	b1d8      	cbz	r0, 37e9c <gnss_interface_getopt+0x150>
   37e64:	6825      	ldr	r5, [r4, #0]
   37e66:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   37e6a:	d00f      	beq.n	37e8c <gnss_interface_getopt+0x140>
   37e6c:	2f05      	cmp	r7, #5
   37e6e:	d837      	bhi.n	37ee0 <gnss_interface_getopt+0x194>
   37e70:	e8df f007 	tbb	[pc, r7]
   37e74:	2b26201a 	.word	0x2b26201a
   37e78:	0331      	.short	0x0331
   37e7a:	2500      	movs	r5, #0
   37e7c:	7b43      	ldrb	r3, [r0, #13]
   37e7e:	f888 3000 	strb.w	r3, [r8]
   37e82:	f002 fa3f 	bl	3a304 <rpc_gnss_client_data_free>
   37e86:	2300      	movs	r3, #0
   37e88:	f8c9 3000 	str.w	r3, [r9]
   37e8c:	6823      	ldr	r3, [r4, #0]
   37e8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   37e92:	6023      	str	r3, [r4, #0]
   37e94:	4628      	mov	r0, r5
   37e96:	b007      	add	sp, #28
   37e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37e9c:	6823      	ldr	r3, [r4, #0]
   37e9e:	4605      	mov	r5, r0
   37ea0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   37ea4:	6023      	str	r3, [r4, #0]
   37ea6:	e7f5      	b.n	37e94 <gnss_interface_getopt+0x148>
   37ea8:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   37eac:	2500      	movs	r5, #0
   37eae:	f8a8 3000 	strh.w	r3, [r8]
   37eb2:	e7e6      	b.n	37e82 <gnss_interface_getopt+0x136>
   37eb4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   37eb8:	2500      	movs	r5, #0
   37eba:	f8a8 3000 	strh.w	r3, [r8]
   37ebe:	e7e0      	b.n	37e82 <gnss_interface_getopt+0x136>
   37ec0:	7b83      	ldrb	r3, [r0, #14]
   37ec2:	2500      	movs	r5, #0
   37ec4:	f888 3000 	strb.w	r3, [r8]
   37ec8:	e7db      	b.n	37e82 <gnss_interface_getopt+0x136>
   37eca:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   37ece:	2500      	movs	r5, #0
   37ed0:	f8a8 3000 	strh.w	r3, [r8]
   37ed4:	e7d5      	b.n	37e82 <gnss_interface_getopt+0x136>
   37ed6:	7b03      	ldrb	r3, [r0, #12]
   37ed8:	2500      	movs	r5, #0
   37eda:	f888 3000 	strb.w	r3, [r8]
   37ede:	e7d0      	b.n	37e82 <gnss_interface_getopt+0x136>
   37ee0:	2016      	movs	r0, #22
   37ee2:	f7f1 fc17 	bl	29714 <bsd_os_errno_set>
   37ee6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37eea:	f8d9 0000 	ldr.w	r0, [r9]
   37eee:	e7c8      	b.n	37e82 <gnss_interface_getopt+0x136>
   37ef0:	b128      	cbz	r0, 37efe <gnss_interface_getopt+0x1b2>
   37ef2:	6803      	ldr	r3, [r0, #0]
   37ef4:	b11b      	cbz	r3, 37efe <gnss_interface_getopt+0x1b2>
   37ef6:	4618      	mov	r0, r3
   37ef8:	f002 fa04 	bl	3a304 <rpc_gnss_client_data_free>
   37efc:	9800      	ldr	r0, [sp, #0]
   37efe:	f002 f9f9 	bl	3a2f4 <rpc_gnss_client_message_free>
   37f02:	2023      	movs	r0, #35	; 0x23
   37f04:	f7f1 fc06 	bl	29714 <bsd_os_errno_set>
   37f08:	6823      	ldr	r3, [r4, #0]
   37f0a:	200e      	movs	r0, #14
   37f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   37f10:	6023      	str	r3, [r4, #0]
   37f12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f16:	f7f1 fbfd 	bl	29714 <bsd_os_errno_set>
   37f1a:	e746      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f1c:	200e      	movs	r0, #14
   37f1e:	f7f1 fbf9 	bl	29714 <bsd_os_errno_set>
   37f22:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f26:	e740      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f28:	202a      	movs	r0, #42	; 0x2a
   37f2a:	f7f1 fbf3 	bl	29714 <bsd_os_errno_set>
   37f2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f32:	e73a      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f34:	2009      	movs	r0, #9
   37f36:	f7f1 fbed 	bl	29714 <bsd_os_errno_set>
   37f3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f3e:	e734      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f40:	2005      	movs	r0, #5
   37f42:	f7f1 fbe7 	bl	29714 <bsd_os_errno_set>
   37f46:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f4a:	e72e      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f4c:	2073      	movs	r0, #115	; 0x73
   37f4e:	f7f1 fbe1 	bl	29714 <bsd_os_errno_set>
   37f52:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f56:	e728      	b.n	37daa <gnss_interface_getopt+0x5e>
   37f58:	200257e0 	.word	0x200257e0
   37f5c:	49765443 	.word	0x49765443
   37f60:	20020770 	.word	0x20020770
   37f64:	2002a396 	.word	0x2002a396
   37f68:	200257e4 	.word	0x200257e4

00037f6c <gnss_interface_init>:
   37f6c:	2100      	movs	r1, #0
   37f6e:	b538      	push	{r3, r4, r5, lr}
   37f70:	4c0a      	ldr	r4, [pc, #40]	; (37f9c <gnss_interface_init+0x30>)
   37f72:	4d0b      	ldr	r5, [pc, #44]	; (37fa0 <gnss_interface_init+0x34>)
   37f74:	6822      	ldr	r2, [r4, #0]
   37f76:	480b      	ldr	r0, [pc, #44]	; (37fa4 <gnss_interface_init+0x38>)
   37f78:	4b0b      	ldr	r3, [pc, #44]	; (37fa8 <gnss_interface_init+0x3c>)
   37f7a:	402a      	ands	r2, r5
   37f7c:	6022      	str	r2, [r4, #0]
   37f7e:	8001      	strh	r1, [r0, #0]
   37f80:	6019      	str	r1, [r3, #0]
   37f82:	f002 f983 	bl	3a28c <rpc_gnss_client_init>
   37f86:	b938      	cbnz	r0, 37f98 <gnss_interface_init+0x2c>
   37f88:	2101      	movs	r1, #1
   37f8a:	6823      	ldr	r3, [r4, #0]
   37f8c:	4a07      	ldr	r2, [pc, #28]	; (37fac <gnss_interface_init+0x40>)
   37f8e:	402b      	ands	r3, r5
   37f90:	430b      	orrs	r3, r1
   37f92:	7011      	strb	r1, [r2, #0]
   37f94:	6023      	str	r3, [r4, #0]
   37f96:	bd38      	pop	{r3, r4, r5, pc}
   37f98:	2003      	movs	r0, #3
   37f9a:	bd38      	pop	{r3, r4, r5, pc}
   37f9c:	200257e0 	.word	0x200257e0
   37fa0:	ffff0000 	.word	0xffff0000
   37fa4:	2002a396 	.word	0x2002a396
   37fa8:	200257e4 	.word	0x200257e4
   37fac:	2002cb12 	.word	0x2002cb12

00037fb0 <gnss_interface_deinit>:
   37fb0:	b538      	push	{r3, r4, r5, lr}
   37fb2:	4b0b      	ldr	r3, [pc, #44]	; (37fe0 <gnss_interface_deinit+0x30>)
   37fb4:	681b      	ldr	r3, [r3, #0]
   37fb6:	b29b      	uxth	r3, r3
   37fb8:	b90b      	cbnz	r3, 37fbe <gnss_interface_deinit+0xe>
   37fba:	2000      	movs	r0, #0
   37fbc:	bd38      	pop	{r3, r4, r5, pc}
   37fbe:	f002 f96b 	bl	3a298 <rpc_gnss_client_deinit>
   37fc2:	4604      	mov	r4, r0
   37fc4:	b950      	cbnz	r0, 37fdc <gnss_interface_deinit+0x2c>
   37fc6:	4d07      	ldr	r5, [pc, #28]	; (37fe4 <gnss_interface_deinit+0x34>)
   37fc8:	4b07      	ldr	r3, [pc, #28]	; (37fe8 <gnss_interface_deinit+0x38>)
   37fca:	6828      	ldr	r0, [r5, #0]
   37fcc:	701c      	strb	r4, [r3, #0]
   37fce:	2800      	cmp	r0, #0
   37fd0:	d0f3      	beq.n	37fba <gnss_interface_deinit+0xa>
   37fd2:	f002 faa1 	bl	3a518 <packet_handler_delete>
   37fd6:	602c      	str	r4, [r5, #0]
   37fd8:	4620      	mov	r0, r4
   37fda:	bd38      	pop	{r3, r4, r5, pc}
   37fdc:	2003      	movs	r0, #3
   37fde:	bd38      	pop	{r3, r4, r5, pc}
   37fe0:	200257e0 	.word	0x200257e0
   37fe4:	200257e8 	.word	0x200257e8
   37fe8:	2002cb12 	.word	0x2002cb12

00037fec <gnss_interface_open>:
   37fec:	b510      	push	{r4, lr}
   37fee:	4b1c      	ldr	r3, [pc, #112]	; (38060 <gnss_interface_open+0x74>)
   37ff0:	781b      	ldrb	r3, [r3, #0]
   37ff2:	b34b      	cbz	r3, 38048 <gnss_interface_open+0x5c>
   37ff4:	2902      	cmp	r1, #2
   37ff6:	d121      	bne.n	3803c <gnss_interface_open+0x50>
   37ff8:	4c1a      	ldr	r4, [pc, #104]	; (38064 <gnss_interface_open+0x78>)
   37ffa:	6823      	ldr	r3, [r4, #0]
   37ffc:	b29b      	uxth	r3, r3
   37ffe:	2b01      	cmp	r3, #1
   38000:	d116      	bne.n	38030 <gnss_interface_open+0x44>
   38002:	6823      	ldr	r3, [r4, #0]
   38004:	4608      	mov	r0, r1
   38006:	0c1b      	lsrs	r3, r3, #16
   38008:	041b      	lsls	r3, r3, #16
   3800a:	f043 0302 	orr.w	r3, r3, #2
   3800e:	2200      	movs	r2, #0
   38010:	4915      	ldr	r1, [pc, #84]	; (38068 <gnss_interface_open+0x7c>)
   38012:	6023      	str	r3, [r4, #0]
   38014:	f002 fa60 	bl	3a4d8 <packet_handler_create>
   38018:	4a14      	ldr	r2, [pc, #80]	; (3806c <gnss_interface_open+0x80>)
   3801a:	6010      	str	r0, [r2, #0]
   3801c:	b1d0      	cbz	r0, 38054 <gnss_interface_open+0x68>
   3801e:	6823      	ldr	r3, [r4, #0]
   38020:	6802      	ldr	r2, [r0, #0]
   38022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   38026:	6812      	ldr	r2, [r2, #0]
   38028:	6023      	str	r3, [r4, #0]
   3802a:	4790      	blx	r2
   3802c:	4810      	ldr	r0, [pc, #64]	; (38070 <gnss_interface_open+0x84>)
   3802e:	bd10      	pop	{r4, pc}
   38030:	2005      	movs	r0, #5
   38032:	f7f1 fb6f 	bl	29714 <bsd_os_errno_set>
   38036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3803a:	bd10      	pop	{r4, pc}
   3803c:	2029      	movs	r0, #41	; 0x29
   3803e:	f7f1 fb69 	bl	29714 <bsd_os_errno_set>
   38042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38046:	bd10      	pop	{r4, pc}
   38048:	2070      	movs	r0, #112	; 0x70
   3804a:	f7f1 fb63 	bl	29714 <bsd_os_errno_set>
   3804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38052:	bd10      	pop	{r4, pc}
   38054:	200e      	movs	r0, #14
   38056:	f7f1 fb5d 	bl	29714 <bsd_os_errno_set>
   3805a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3805e:	bd10      	pop	{r4, pc}
   38060:	2002cb12 	.word	0x2002cb12
   38064:	200257e0 	.word	0x200257e0
   38068:	000372a9 	.word	0x000372a9
   3806c:	200257e8 	.word	0x200257e8
   38070:	49765443 	.word	0x49765443

00038074 <gnss_interface_close>:
   38074:	b530      	push	{r4, r5, lr}
   38076:	4b15      	ldr	r3, [pc, #84]	; (380cc <gnss_interface_close+0x58>)
   38078:	b085      	sub	sp, #20
   3807a:	4298      	cmp	r0, r3
   3807c:	d11f      	bne.n	380be <gnss_interface_close+0x4a>
   3807e:	4c14      	ldr	r4, [pc, #80]	; (380d0 <gnss_interface_close+0x5c>)
   38080:	6822      	ldr	r2, [r4, #0]
   38082:	b292      	uxth	r2, r2
   38084:	2a04      	cmp	r2, #4
   38086:	d00f      	beq.n	380a8 <gnss_interface_close+0x34>
   38088:	4d12      	ldr	r5, [pc, #72]	; (380d4 <gnss_interface_close+0x60>)
   3808a:	6828      	ldr	r0, [r5, #0]
   3808c:	b118      	cbz	r0, 38096 <gnss_interface_close+0x22>
   3808e:	f002 fa43 	bl	3a518 <packet_handler_delete>
   38092:	2300      	movs	r3, #0
   38094:	602b      	str	r3, [r5, #0]
   38096:	2000      	movs	r0, #0
   38098:	6823      	ldr	r3, [r4, #0]
   3809a:	0c1b      	lsrs	r3, r3, #16
   3809c:	041b      	lsls	r3, r3, #16
   3809e:	f043 0301 	orr.w	r3, r3, #1
   380a2:	6023      	str	r3, [r4, #0]
   380a4:	b005      	add	sp, #20
   380a6:	bd30      	pop	{r4, r5, pc}
   380a8:	2100      	movs	r1, #0
   380aa:	ab04      	add	r3, sp, #16
   380ac:	f843 1d04 	str.w	r1, [r3, #-4]!
   380b0:	9200      	str	r2, [sp, #0]
   380b2:	f44f 7101 	mov.w	r1, #516	; 0x204
   380b6:	2208      	movs	r2, #8
   380b8:	f001 ff68 	bl	39f8c <nrf_setsockopt>
   380bc:	e7e4      	b.n	38088 <gnss_interface_close+0x14>
   380be:	2009      	movs	r0, #9
   380c0:	f7f1 fb28 	bl	29714 <bsd_os_errno_set>
   380c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   380c8:	e7ec      	b.n	380a4 <gnss_interface_close+0x30>
   380ca:	bf00      	nop
   380cc:	49765443 	.word	0x49765443
   380d0:	200257e0 	.word	0x200257e0
   380d4:	200257e8 	.word	0x200257e8

000380d8 <rpc_logobj_client_evt_handler>:
   380d8:	b120      	cbz	r0, 380e4 <rpc_logobj_client_evt_handler+0xc>
   380da:	f850 1b08 	ldr.w	r1, [r0], #8
   380de:	0c09      	lsrs	r1, r1, #16
   380e0:	f7fb b8a8 	b.w	33234 <logobj_event_handler>
   380e4:	4770      	bx	lr
   380e6:	bf00      	nop

000380e8 <rpc_logobj_client_init>:
   380e8:	4801      	ldr	r0, [pc, #4]	; (380f0 <rpc_logobj_client_init+0x8>)
   380ea:	f7fe bfd9 	b.w	370a0 <rpc_client_register>
   380ee:	bf00      	nop
   380f0:	00047418 	.word	0x00047418

000380f4 <rpc_logobj_client_deinit>:
   380f4:	2009      	movs	r0, #9
   380f6:	f7ff b83d 	b.w	37174 <rpc_client_unregister>
   380fa:	bf00      	nop

000380fc <rpc_logobj_client_request_alloc>:
   380fc:	2300      	movs	r3, #0
   380fe:	b510      	push	{r4, lr}
   38100:	b082      	sub	sp, #8
   38102:	9301      	str	r3, [sp, #4]
   38104:	b961      	cbnz	r1, 38120 <rpc_logobj_client_request_alloc+0x24>
   38106:	b170      	cbz	r0, 38126 <rpc_logobj_client_request_alloc+0x2a>
   38108:	4604      	mov	r4, r0
   3810a:	aa01      	add	r2, sp, #4
   3810c:	2009      	movs	r0, #9
   3810e:	f7ff f887 	bl	37220 <rpc_message_alloc>
   38112:	b918      	cbnz	r0, 3811c <rpc_logobj_client_request_alloc+0x20>
   38114:	9b01      	ldr	r3, [sp, #4]
   38116:	b10b      	cbz	r3, 3811c <rpc_logobj_client_request_alloc+0x20>
   38118:	3308      	adds	r3, #8
   3811a:	6023      	str	r3, [r4, #0]
   3811c:	b002      	add	sp, #8
   3811e:	bd10      	pop	{r4, pc}
   38120:	200f      	movs	r0, #15
   38122:	b002      	add	sp, #8
   38124:	bd10      	pop	{r4, pc}
   38126:	200e      	movs	r0, #14
   38128:	b002      	add	sp, #8
   3812a:	bd10      	pop	{r4, pc}

0003812c <rpc_logobj_client_request_send>:
   3812c:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   38130:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   38134:	d10b      	bne.n	3814e <rpc_logobj_client_request_send+0x22>
   38136:	b160      	cbz	r0, 38152 <rpc_logobj_client_request_send+0x26>
   38138:	4603      	mov	r3, r0
   3813a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3813e:	2009      	movs	r0, #9
   38140:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   38144:	f843 1d08 	str.w	r1, [r3, #-8]!
   38148:	4619      	mov	r1, r3
   3814a:	f7ff b859 	b.w	37200 <rpc_message_send>
   3814e:	200f      	movs	r0, #15
   38150:	4770      	bx	lr
   38152:	200e      	movs	r0, #14
   38154:	4770      	bx	lr
   38156:	bf00      	nop

00038158 <rpc_logobj_client_message_free>:
   38158:	b120      	cbz	r0, 38164 <rpc_logobj_client_message_free+0xc>
   3815a:	f1a0 0108 	sub.w	r1, r0, #8
   3815e:	2009      	movs	r0, #9
   38160:	f7ff b88a 	b.w	37278 <rpc_message_free>
   38164:	200e      	movs	r0, #14
   38166:	4770      	bx	lr

00038168 <rpc_logobj_client_data_free>:
   38168:	b118      	cbz	r0, 38172 <rpc_logobj_client_data_free+0xa>
   3816a:	4601      	mov	r1, r0
   3816c:	2009      	movs	r0, #9
   3816e:	f7ff b88f 	b.w	37290 <rpc_message_data_free>
   38172:	200e      	movs	r0, #14
   38174:	4770      	bx	lr
   38176:	bf00      	nop

00038178 <dfu_client_event_handler>:
   38178:	f850 1b08 	ldr.w	r1, [r0], #8
   3817c:	0c09      	lsrs	r1, r1, #16
   3817e:	f002 bed1 	b.w	3af24 <rpc_dfu_event_handler>
   38182:	bf00      	nop

00038184 <rpc_dfu_client_init>:
   38184:	4801      	ldr	r0, [pc, #4]	; (3818c <rpc_dfu_client_init+0x8>)
   38186:	f7fe bf8b 	b.w	370a0 <rpc_client_register>
   3818a:	bf00      	nop
   3818c:	00047428 	.word	0x00047428

00038190 <rpc_dfu_client_deinit>:
   38190:	2006      	movs	r0, #6
   38192:	f7fe bfef 	b.w	37174 <rpc_client_unregister>
   38196:	bf00      	nop

00038198 <rpc_dfu_client_request_alloc>:
   38198:	2300      	movs	r3, #0
   3819a:	b510      	push	{r4, lr}
   3819c:	b082      	sub	sp, #8
   3819e:	9301      	str	r3, [sp, #4]
   381a0:	b158      	cbz	r0, 381ba <rpc_dfu_client_request_alloc+0x22>
   381a2:	4604      	mov	r4, r0
   381a4:	aa01      	add	r2, sp, #4
   381a6:	2006      	movs	r0, #6
   381a8:	f7ff f83a 	bl	37220 <rpc_message_alloc>
   381ac:	b918      	cbnz	r0, 381b6 <rpc_dfu_client_request_alloc+0x1e>
   381ae:	9b01      	ldr	r3, [sp, #4]
   381b0:	b10b      	cbz	r3, 381b6 <rpc_dfu_client_request_alloc+0x1e>
   381b2:	3308      	adds	r3, #8
   381b4:	6023      	str	r3, [r4, #0]
   381b6:	b002      	add	sp, #8
   381b8:	bd10      	pop	{r4, pc}
   381ba:	2007      	movs	r0, #7
   381bc:	b002      	add	sp, #8
   381be:	bd10      	pop	{r4, pc}

000381c0 <rpc_dfu_client_request_send>:
   381c0:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   381c4:	d10b      	bne.n	381de <rpc_dfu_client_request_send+0x1e>
   381c6:	b160      	cbz	r0, 381e2 <rpc_dfu_client_request_send+0x22>
   381c8:	4603      	mov	r3, r0
   381ca:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   381ce:	2006      	movs	r0, #6
   381d0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   381d4:	f843 1d08 	str.w	r1, [r3, #-8]!
   381d8:	4619      	mov	r1, r3
   381da:	f7ff b811 	b.w	37200 <rpc_message_send>
   381de:	200f      	movs	r0, #15
   381e0:	4770      	bx	lr
   381e2:	2007      	movs	r0, #7
   381e4:	4770      	bx	lr
   381e6:	bf00      	nop

000381e8 <rpc_dfu_client_message_free>:
   381e8:	b120      	cbz	r0, 381f4 <rpc_dfu_client_message_free+0xc>
   381ea:	f1a0 0108 	sub.w	r1, r0, #8
   381ee:	2006      	movs	r0, #6
   381f0:	f7ff b842 	b.w	37278 <rpc_message_free>
   381f4:	2007      	movs	r0, #7
   381f6:	4770      	bx	lr

000381f8 <rpc_dfu_client_data_free>:
   381f8:	b118      	cbz	r0, 38202 <rpc_dfu_client_data_free+0xa>
   381fa:	4601      	mov	r1, r0
   381fc:	2006      	movs	r0, #6
   381fe:	f7ff b847 	b.w	37290 <rpc_message_data_free>
   38202:	2007      	movs	r0, #7
   38204:	4770      	bx	lr
   38206:	bf00      	nop

00038208 <packet_free_cb>:
   38208:	6800      	ldr	r0, [r0, #0]
   3820a:	f003 bc57 	b.w	3babc <rpc_at_client_data_free>
   3820e:	bf00      	nop

00038210 <at_interface_write>:
   38210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38214:	b083      	sub	sp, #12
   38216:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   38218:	2c00      	cmp	r4, #0
   3821a:	d16c      	bne.n	382f6 <at_interface_write+0xe6>
   3821c:	4688      	mov	r8, r1
   3821e:	4615      	mov	r5, r2
   38220:	461e      	mov	r6, r3
   38222:	4607      	mov	r7, r0
   38224:	f003 faba 	bl	3b79c <interface_socket_from_handle_get>
   38228:	4604      	mov	r4, r0
   3822a:	2e00      	cmp	r6, #0
   3822c:	d137      	bne.n	3829e <at_interface_write+0x8e>
   3822e:	2800      	cmp	r0, #0
   38230:	d067      	beq.n	38302 <at_interface_write+0xf2>
   38232:	6803      	ldr	r3, [r0, #0]
   38234:	039b      	lsls	r3, r3, #14
   38236:	d564      	bpl.n	38302 <at_interface_write+0xf2>
   38238:	6803      	ldr	r3, [r0, #0]
   3823a:	4629      	mov	r1, r5
   3823c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   38240:	6003      	str	r3, [r0, #0]
   38242:	6803      	ldr	r3, [r0, #0]
   38244:	4668      	mov	r0, sp
   38246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3824a:	6023      	str	r3, [r4, #0]
   3824c:	f003 fc0c 	bl	3ba68 <rpc_at_client_request_alloc>
   38250:	4606      	mov	r6, r0
   38252:	4638      	mov	r0, r7
   38254:	f003 faa2 	bl	3b79c <interface_socket_from_handle_get>
   38258:	4681      	mov	r9, r0
   3825a:	bb56      	cbnz	r6, 382b2 <at_interface_write+0xa2>
   3825c:	2304      	movs	r3, #4
   3825e:	9800      	ldr	r0, [sp, #0]
   38260:	7203      	strb	r3, [r0, #8]
   38262:	7246      	strb	r6, [r0, #9]
   38264:	7286      	strb	r6, [r0, #10]
   38266:	72c6      	strb	r6, [r0, #11]
   38268:	60c7      	str	r7, [r0, #12]
   3826a:	bb25      	cbnz	r5, 382b6 <at_interface_write+0xa6>
   3826c:	2101      	movs	r1, #1
   3826e:	f003 fc0f 	bl	3ba90 <rpc_at_client_request_send>
   38272:	bb78      	cbnz	r0, 382d4 <at_interface_write+0xc4>
   38274:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   38278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3827c:	2900      	cmp	r1, #0
   3827e:	bf08      	it	eq
   38280:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   38284:	ab02      	add	r3, sp, #8
   38286:	f843 1d04 	str.w	r1, [r3, #-4]!
   3828a:	4638      	mov	r0, r7
   3828c:	4611      	mov	r1, r2
   3828e:	f003 fa11 	bl	3b6b4 <interface_socket_wait>
   38292:	b320      	cbz	r0, 382de <at_interface_write+0xce>
   38294:	6823      	ldr	r3, [r4, #0]
   38296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3829a:	6023      	str	r3, [r4, #0]
   3829c:	e002      	b.n	382a4 <at_interface_write+0x94>
   3829e:	b390      	cbz	r0, 38306 <at_interface_write+0xf6>
   382a0:	6803      	ldr	r3, [r0, #0]
   382a2:	202d      	movs	r0, #45	; 0x2d
   382a4:	f7f1 fa36 	bl	29714 <bsd_os_errno_set>
   382a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   382ac:	b003      	add	sp, #12
   382ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   382b2:	200c      	movs	r0, #12
   382b4:	e7ee      	b.n	38294 <at_interface_write+0x84>
   382b6:	4641      	mov	r1, r8
   382b8:	6800      	ldr	r0, [r0, #0]
   382ba:	462a      	mov	r2, r5
   382bc:	f00c ffb4 	bl	45228 <memcpy>
   382c0:	2101      	movs	r1, #1
   382c2:	9800      	ldr	r0, [sp, #0]
   382c4:	f003 fbe4 	bl	3ba90 <rpc_at_client_request_send>
   382c8:	2800      	cmp	r0, #0
   382ca:	d0d3      	beq.n	38274 <at_interface_write+0x64>
   382cc:	9b00      	ldr	r3, [sp, #0]
   382ce:	6818      	ldr	r0, [r3, #0]
   382d0:	f003 fbf4 	bl	3babc <rpc_at_client_data_free>
   382d4:	9800      	ldr	r0, [sp, #0]
   382d6:	f003 fbe9 	bl	3baac <rpc_at_client_message_free>
   382da:	2023      	movs	r0, #35	; 0x23
   382dc:	e7da      	b.n	38294 <at_interface_write+0x84>
   382de:	4638      	mov	r0, r7
   382e0:	f003 fa5c 	bl	3b79c <interface_socket_from_handle_get>
   382e4:	4603      	mov	r3, r0
   382e6:	b120      	cbz	r0, 382f2 <at_interface_write+0xe2>
   382e8:	6840      	ldr	r0, [r0, #4]
   382ea:	b110      	cbz	r0, 382f2 <at_interface_write+0xe2>
   382ec:	2200      	movs	r2, #0
   382ee:	605a      	str	r2, [r3, #4]
   382f0:	e7d0      	b.n	38294 <at_interface_write+0x84>
   382f2:	4628      	mov	r0, r5
   382f4:	e7da      	b.n	382ac <at_interface_write+0x9c>
   382f6:	2038      	movs	r0, #56	; 0x38
   382f8:	f7f1 fa0c 	bl	29714 <bsd_os_errno_set>
   382fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38300:	e7d4      	b.n	382ac <at_interface_write+0x9c>
   38302:	2016      	movs	r0, #22
   38304:	e7ce      	b.n	382a4 <at_interface_write+0x94>
   38306:	202d      	movs	r0, #45	; 0x2d
   38308:	e7cc      	b.n	382a4 <at_interface_write+0x94>
   3830a:	bf00      	nop

0003830c <at_interface_init>:
   3830c:	b508      	push	{r3, lr}
   3830e:	f003 fba1 	bl	3ba54 <rpc_at_client_init>
   38312:	b910      	cbnz	r0, 3831a <at_interface_init+0xe>
   38314:	2201      	movs	r2, #1
   38316:	4b01      	ldr	r3, [pc, #4]	; (3831c <at_interface_init+0x10>)
   38318:	701a      	strb	r2, [r3, #0]
   3831a:	bd08      	pop	{r3, pc}
   3831c:	2002cb13 	.word	0x2002cb13

00038320 <at_interface_deinit>:
   38320:	b510      	push	{r4, lr}
   38322:	4c05      	ldr	r4, [pc, #20]	; (38338 <at_interface_deinit+0x18>)
   38324:	7820      	ldrb	r0, [r4, #0]
   38326:	b900      	cbnz	r0, 3832a <at_interface_deinit+0xa>
   38328:	bd10      	pop	{r4, pc}
   3832a:	f003 fb99 	bl	3ba60 <rpc_at_client_deinit>
   3832e:	b908      	cbnz	r0, 38334 <at_interface_deinit+0x14>
   38330:	7020      	strb	r0, [r4, #0]
   38332:	bd10      	pop	{r4, pc}
   38334:	2003      	movs	r0, #3
   38336:	bd10      	pop	{r4, pc}
   38338:	2002cb13 	.word	0x2002cb13

0003833c <at_interface_open>:
   3833c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38340:	2600      	movs	r6, #0
   38342:	4b34      	ldr	r3, [pc, #208]	; (38414 <at_interface_open+0xd8>)
   38344:	b084      	sub	sp, #16
   38346:	781b      	ldrb	r3, [r3, #0]
   38348:	9601      	str	r6, [sp, #4]
   3834a:	2b00      	cmp	r3, #0
   3834c:	d05c      	beq.n	38408 <at_interface_open+0xcc>
   3834e:	2902      	cmp	r1, #2
   38350:	460d      	mov	r5, r1
   38352:	d153      	bne.n	383fc <at_interface_open+0xc0>
   38354:	4680      	mov	r8, r0
   38356:	4617      	mov	r7, r2
   38358:	a801      	add	r0, sp, #4
   3835a:	4a2f      	ldr	r2, [pc, #188]	; (38418 <at_interface_open+0xdc>)
   3835c:	f003 f8f8 	bl	3b550 <interface_socket_allocate>
   38360:	9b01      	ldr	r3, [sp, #4]
   38362:	4604      	mov	r4, r0
   38364:	b3c3      	cbz	r3, 383d8 <at_interface_open+0x9c>
   38366:	615f      	str	r7, [r3, #20]
   38368:	4631      	mov	r1, r6
   3836a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   3836e:	a802      	add	r0, sp, #8
   38370:	f003 fb7a 	bl	3ba68 <rpc_at_client_request_alloc>
   38374:	4606      	mov	r6, r0
   38376:	4620      	mov	r0, r4
   38378:	f003 fa10 	bl	3b79c <interface_socket_from_handle_get>
   3837c:	4607      	mov	r7, r0
   3837e:	bb16      	cbnz	r6, 383c6 <at_interface_open+0x8a>
   38380:	2304      	movs	r3, #4
   38382:	9802      	ldr	r0, [sp, #8]
   38384:	2105      	movs	r1, #5
   38386:	7246      	strb	r6, [r0, #9]
   38388:	7286      	strb	r6, [r0, #10]
   3838a:	72c6      	strb	r6, [r0, #11]
   3838c:	7203      	strb	r3, [r0, #8]
   3838e:	60c4      	str	r4, [r0, #12]
   38390:	f003 fb7e 	bl	3ba90 <rpc_at_client_request_send>
   38394:	4606      	mov	r6, r0
   38396:	bb60      	cbnz	r0, 383f2 <at_interface_open+0xb6>
   38398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3839a:	ab04      	add	r3, sp, #16
   3839c:	2a00      	cmp	r2, #0
   3839e:	bf08      	it	eq
   383a0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   383a4:	4629      	mov	r1, r5
   383a6:	f843 2d04 	str.w	r2, [r3, #-4]!
   383aa:	4620      	mov	r0, r4
   383ac:	462a      	mov	r2, r5
   383ae:	f003 f981 	bl	3b6b4 <interface_socket_wait>
   383b2:	4605      	mov	r5, r0
   383b4:	b940      	cbnz	r0, 383c8 <at_interface_open+0x8c>
   383b6:	4620      	mov	r0, r4
   383b8:	f003 f9f0 	bl	3b79c <interface_socket_from_handle_get>
   383bc:	b180      	cbz	r0, 383e0 <at_interface_open+0xa4>
   383be:	6845      	ldr	r5, [r0, #4]
   383c0:	b175      	cbz	r5, 383e0 <at_interface_open+0xa4>
   383c2:	6046      	str	r6, [r0, #4]
   383c4:	e000      	b.n	383c8 <at_interface_open+0x8c>
   383c6:	250c      	movs	r5, #12
   383c8:	4620      	mov	r0, r4
   383ca:	f003 f925 	bl	3b618 <interface_socket_free>
   383ce:	4628      	mov	r0, r5
   383d0:	f7f1 f9a0 	bl	29714 <bsd_os_errno_set>
   383d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   383d8:	4620      	mov	r0, r4
   383da:	b004      	add	sp, #16
   383dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   383e0:	4620      	mov	r0, r4
   383e2:	9a01      	ldr	r2, [sp, #4]
   383e4:	6813      	ldr	r3, [r2, #0]
   383e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   383ea:	6013      	str	r3, [r2, #0]
   383ec:	b004      	add	sp, #16
   383ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   383f2:	9802      	ldr	r0, [sp, #8]
   383f4:	f003 fb5a 	bl	3baac <rpc_at_client_message_free>
   383f8:	2523      	movs	r5, #35	; 0x23
   383fa:	e7e5      	b.n	383c8 <at_interface_open+0x8c>
   383fc:	2029      	movs	r0, #41	; 0x29
   383fe:	f7f1 f989 	bl	29714 <bsd_os_errno_set>
   38402:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38406:	e7e7      	b.n	383d8 <at_interface_open+0x9c>
   38408:	2070      	movs	r0, #112	; 0x70
   3840a:	f7f1 f983 	bl	29714 <bsd_os_errno_set>
   3840e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38412:	e7e1      	b.n	383d8 <at_interface_open+0x9c>
   38414:	2002cb13 	.word	0x2002cb13
   38418:	00038209 	.word	0x00038209

0003841c <at_interface_close>:
   3841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38420:	b082      	sub	sp, #8
   38422:	4606      	mov	r6, r0
   38424:	f003 f9ba 	bl	3b79c <interface_socket_from_handle_get>
   38428:	2800      	cmp	r0, #0
   3842a:	d051      	beq.n	384d0 <at_interface_close+0xb4>
   3842c:	230d      	movs	r3, #13
   3842e:	6807      	ldr	r7, [r0, #0]
   38430:	6003      	str	r3, [r0, #0]
   38432:	6803      	ldr	r3, [r0, #0]
   38434:	4604      	mov	r4, r0
   38436:	039b      	lsls	r3, r3, #14
   38438:	d42e      	bmi.n	38498 <at_interface_close+0x7c>
   3843a:	2100      	movs	r1, #0
   3843c:	4668      	mov	r0, sp
   3843e:	f003 fb13 	bl	3ba68 <rpc_at_client_request_alloc>
   38442:	4605      	mov	r5, r0
   38444:	4630      	mov	r0, r6
   38446:	f003 f9a9 	bl	3b79c <interface_socket_from_handle_get>
   3844a:	4680      	mov	r8, r0
   3844c:	bb75      	cbnz	r5, 384ac <at_interface_close+0x90>
   3844e:	2304      	movs	r3, #4
   38450:	9800      	ldr	r0, [sp, #0]
   38452:	2106      	movs	r1, #6
   38454:	7203      	strb	r3, [r0, #8]
   38456:	7245      	strb	r5, [r0, #9]
   38458:	7285      	strb	r5, [r0, #10]
   3845a:	72c5      	strb	r5, [r0, #11]
   3845c:	60c6      	str	r6, [r0, #12]
   3845e:	f003 fb17 	bl	3ba90 <rpc_at_client_request_send>
   38462:	b9f0      	cbnz	r0, 384a2 <at_interface_close+0x86>
   38464:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   38468:	220e      	movs	r2, #14
   3846a:	2900      	cmp	r1, #0
   3846c:	bf08      	it	eq
   3846e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   38472:	ab02      	add	r3, sp, #8
   38474:	f843 1d04 	str.w	r1, [r3, #-4]!
   38478:	4630      	mov	r0, r6
   3847a:	4611      	mov	r1, r2
   3847c:	f003 f91a 	bl	3b6b4 <interface_socket_wait>
   38480:	4605      	mov	r5, r0
   38482:	b1a8      	cbz	r0, 384b0 <at_interface_close+0x94>
   38484:	6027      	str	r7, [r4, #0]
   38486:	4628      	mov	r0, r5
   38488:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3848c:	f7f1 f942 	bl	29714 <bsd_os_errno_set>
   38490:	4628      	mov	r0, r5
   38492:	b002      	add	sp, #8
   38494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38498:	6803      	ldr	r3, [r0, #0]
   3849a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3849e:	6003      	str	r3, [r0, #0]
   384a0:	e7cb      	b.n	3843a <at_interface_close+0x1e>
   384a2:	9800      	ldr	r0, [sp, #0]
   384a4:	f003 fb02 	bl	3baac <rpc_at_client_message_free>
   384a8:	2523      	movs	r5, #35	; 0x23
   384aa:	e7eb      	b.n	38484 <at_interface_close+0x68>
   384ac:	250c      	movs	r5, #12
   384ae:	e7e9      	b.n	38484 <at_interface_close+0x68>
   384b0:	4630      	mov	r0, r6
   384b2:	f003 f973 	bl	3b79c <interface_socket_from_handle_get>
   384b6:	b120      	cbz	r0, 384c2 <at_interface_close+0xa6>
   384b8:	6843      	ldr	r3, [r0, #4]
   384ba:	b113      	cbz	r3, 384c2 <at_interface_close+0xa6>
   384bc:	6045      	str	r5, [r0, #4]
   384be:	461d      	mov	r5, r3
   384c0:	e7e0      	b.n	38484 <at_interface_close+0x68>
   384c2:	4630      	mov	r0, r6
   384c4:	f003 f8a8 	bl	3b618 <interface_socket_free>
   384c8:	4628      	mov	r0, r5
   384ca:	b002      	add	sp, #8
   384cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   384d0:	2516      	movs	r5, #22
   384d2:	e7d8      	b.n	38486 <at_interface_close+0x6a>

000384d4 <at_interface_read>:
   384d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   384d8:	b087      	sub	sp, #28
   384da:	4688      	mov	r8, r1
   384dc:	4615      	mov	r5, r2
   384de:	461e      	mov	r6, r3
   384e0:	4607      	mov	r7, r0
   384e2:	f003 f95b 	bl	3b79c <interface_socket_from_handle_get>
   384e6:	2800      	cmp	r0, #0
   384e8:	d056      	beq.n	38598 <at_interface_read+0xc4>
   384ea:	2300      	movs	r3, #0
   384ec:	4604      	mov	r4, r0
   384ee:	e9cd 8502 	strd	r8, r5, [sp, #8]
   384f2:	e9cd 3304 	strd	r3, r3, [sp, #16]
   384f6:	bb66      	cbnz	r6, 38552 <at_interface_read+0x7e>
   384f8:	f016 0502 	ands.w	r5, r6, #2
   384fc:	d136      	bne.n	3856c <at_interface_read+0x98>
   384fe:	46a8      	mov	r8, r5
   38500:	6823      	ldr	r3, [r4, #0]
   38502:	69e0      	ldr	r0, [r4, #28]
   38504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   38508:	6023      	str	r3, [r4, #0]
   3850a:	6803      	ldr	r3, [r0, #0]
   3850c:	4632      	mov	r2, r6
   3850e:	689b      	ldr	r3, [r3, #8]
   38510:	a902      	add	r1, sp, #8
   38512:	4798      	blx	r3
   38514:	f1b0 0900 	subs.w	r9, r0, #0
   38518:	da38      	bge.n	3858c <at_interface_read+0xb8>
   3851a:	bb05      	cbnz	r5, 3855e <at_interface_read+0x8a>
   3851c:	6a25      	ldr	r5, [r4, #32]
   3851e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   38522:	2d00      	cmp	r5, #0
   38524:	bf08      	it	eq
   38526:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   3852a:	4611      	mov	r1, r2
   3852c:	ab01      	add	r3, sp, #4
   3852e:	4638      	mov	r0, r7
   38530:	9501      	str	r5, [sp, #4]
   38532:	f003 f8bf 	bl	3b6b4 <interface_socket_wait>
   38536:	4605      	mov	r5, r0
   38538:	2800      	cmp	r0, #0
   3853a:	d1e1      	bne.n	38500 <at_interface_read+0x2c>
   3853c:	4638      	mov	r0, r7
   3853e:	f003 f92d 	bl	3b79c <interface_socket_from_handle_get>
   38542:	2800      	cmp	r0, #0
   38544:	d0dc      	beq.n	38500 <at_interface_read+0x2c>
   38546:	6845      	ldr	r5, [r0, #4]
   38548:	2d00      	cmp	r5, #0
   3854a:	d0d9      	beq.n	38500 <at_interface_read+0x2c>
   3854c:	f8c0 8004 	str.w	r8, [r0, #4]
   38550:	e7d6      	b.n	38500 <at_interface_read+0x2c>
   38552:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   38556:	d1cf      	bne.n	384f8 <at_interface_read+0x24>
   38558:	252d      	movs	r5, #45	; 0x2d
   3855a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   3855e:	4628      	mov	r0, r5
   38560:	f7f1 f8d8 	bl	29714 <bsd_os_errno_set>
   38564:	4648      	mov	r0, r9
   38566:	b007      	add	sp, #28
   38568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3856c:	6823      	ldr	r3, [r4, #0]
   3856e:	69e0      	ldr	r0, [r4, #28]
   38570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   38574:	6023      	str	r3, [r4, #0]
   38576:	6803      	ldr	r3, [r0, #0]
   38578:	4632      	mov	r2, r6
   3857a:	689b      	ldr	r3, [r3, #8]
   3857c:	a902      	add	r1, sp, #8
   3857e:	4798      	blx	r3
   38580:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   38584:	4681      	mov	r9, r0
   38586:	d1ed      	bne.n	38564 <at_interface_read+0x90>
   38588:	2523      	movs	r5, #35	; 0x23
   3858a:	e7e8      	b.n	3855e <at_interface_read+0x8a>
   3858c:	2d00      	cmp	r5, #0
   3858e:	d1e6      	bne.n	3855e <at_interface_read+0x8a>
   38590:	4648      	mov	r0, r9
   38592:	b007      	add	sp, #28
   38594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38598:	2516      	movs	r5, #22
   3859a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   3859e:	e7de      	b.n	3855e <at_interface_read+0x8a>

000385a0 <at_interface_getopt>:
   385a0:	f003 b96a 	b.w	3b878 <interface_socket_getopt>

000385a4 <at_interface_setopt>:
   385a4:	f003 b922 	b.w	3b7ec <interface_socket_setopt>

000385a8 <rpc_at_event_handler>:
   385a8:	b570      	push	{r4, r5, r6, lr}
   385aa:	4606      	mov	r6, r0
   385ac:	b084      	sub	sp, #16
   385ae:	68c0      	ldr	r0, [r0, #12]
   385b0:	460d      	mov	r5, r1
   385b2:	f003 f8f3 	bl	3b79c <interface_socket_from_handle_get>
   385b6:	4604      	mov	r4, r0
   385b8:	b348      	cbz	r0, 3860e <rpc_at_event_handler+0x66>
   385ba:	6803      	ldr	r3, [r0, #0]
   385bc:	b29b      	uxth	r3, r3
   385be:	2b01      	cmp	r3, #1
   385c0:	d01f      	beq.n	38602 <rpc_at_event_handler+0x5a>
   385c2:	6803      	ldr	r3, [r0, #0]
   385c4:	b29b      	uxth	r3, r3
   385c6:	2b0d      	cmp	r3, #13
   385c8:	d029      	beq.n	3861e <rpc_at_event_handler+0x76>
   385ca:	6803      	ldr	r3, [r0, #0]
   385cc:	b29b      	uxth	r3, r3
   385ce:	2b02      	cmp	r3, #2
   385d0:	d02d      	beq.n	3862e <rpc_at_event_handler+0x86>
   385d2:	3d03      	subs	r5, #3
   385d4:	2d01      	cmp	r5, #1
   385d6:	d817      	bhi.n	38608 <rpc_at_event_handler+0x60>
   385d8:	2500      	movs	r5, #0
   385da:	6873      	ldr	r3, [r6, #4]
   385dc:	6832      	ldr	r2, [r6, #0]
   385de:	e9cd 5502 	strd	r5, r5, [sp, #8]
   385e2:	e9cd 2300 	strd	r2, r3, [sp]
   385e6:	69e0      	ldr	r0, [r4, #28]
   385e8:	4669      	mov	r1, sp
   385ea:	6803      	ldr	r3, [r0, #0]
   385ec:	685b      	ldr	r3, [r3, #4]
   385ee:	4798      	blx	r3
   385f0:	3001      	adds	r0, #1
   385f2:	d019      	beq.n	38628 <rpc_at_event_handler+0x80>
   385f4:	4628      	mov	r0, r5
   385f6:	6823      	ldr	r3, [r4, #0]
   385f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   385fc:	6023      	str	r3, [r4, #0]
   385fe:	b004      	add	sp, #16
   38600:	bd70      	pop	{r4, r5, r6, pc}
   38602:	2d02      	cmp	r5, #2
   38604:	d1e5      	bne.n	385d2 <rpc_at_event_handler+0x2a>
   38606:	6005      	str	r5, [r0, #0]
   38608:	2000      	movs	r0, #0
   3860a:	b004      	add	sp, #16
   3860c:	bd70      	pop	{r4, r5, r6, pc}
   3860e:	6830      	ldr	r0, [r6, #0]
   38610:	2800      	cmp	r0, #0
   38612:	d0f9      	beq.n	38608 <rpc_at_event_handler+0x60>
   38614:	f003 fa52 	bl	3babc <rpc_at_client_data_free>
   38618:	4620      	mov	r0, r4
   3861a:	b004      	add	sp, #16
   3861c:	bd70      	pop	{r4, r5, r6, pc}
   3861e:	2d02      	cmp	r5, #2
   38620:	d1d7      	bne.n	385d2 <rpc_at_event_handler+0x2a>
   38622:	230e      	movs	r3, #14
   38624:	6003      	str	r3, [r0, #0]
   38626:	e7ef      	b.n	38608 <rpc_at_event_handler+0x60>
   38628:	2002      	movs	r0, #2
   3862a:	b004      	add	sp, #16
   3862c:	bd70      	pop	{r4, r5, r6, pc}
   3862e:	6803      	ldr	r3, [r0, #0]
   38630:	029b      	lsls	r3, r3, #10
   38632:	d5ce      	bpl.n	385d2 <rpc_at_event_handler+0x2a>
   38634:	2d02      	cmp	r5, #2
   38636:	d1cc      	bne.n	385d2 <rpc_at_event_handler+0x2a>
   38638:	6803      	ldr	r3, [r0, #0]
   3863a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3863e:	6003      	str	r3, [r0, #0]
   38640:	6803      	ldr	r3, [r0, #0]
   38642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   38646:	6003      	str	r3, [r0, #0]
   38648:	e7de      	b.n	38608 <rpc_at_event_handler+0x60>
   3864a:	bf00      	nop

0003864c <ok_rsp_parser>:
   3864c:	2000      	movs	r0, #0
   3864e:	4770      	bx	lr

00038650 <pdn_state_get_parser>:
   38650:	2200      	movs	r2, #0
   38652:	b570      	push	{r4, r5, r6, lr}
   38654:	780b      	ldrb	r3, [r1, #0]
   38656:	b084      	sub	sp, #16
   38658:	460e      	mov	r6, r1
   3865a:	e9cd 2200 	strd	r2, r2, [sp]
   3865e:	e9cd 2202 	strd	r2, r2, [sp, #8]
   38662:	b323      	cbz	r3, 386ae <pdn_state_get_parser+0x5e>
   38664:	460c      	mov	r4, r1
   38666:	2b20      	cmp	r3, #32
   38668:	460d      	mov	r5, r1
   3866a:	d01b      	beq.n	386a4 <pdn_state_get_parser+0x54>
   3866c:	700b      	strb	r3, [r1, #0]
   3866e:	3201      	adds	r2, #1
   38670:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   38674:	18b1      	adds	r1, r6, r2
   38676:	460d      	mov	r5, r1
   38678:	2b00      	cmp	r3, #0
   3867a:	d1f4      	bne.n	38666 <pdn_state_get_parser+0x16>
   3867c:	2200      	movs	r2, #0
   3867e:	4b0d      	ldr	r3, [pc, #52]	; (386b4 <pdn_state_get_parser+0x64>)
   38680:	702a      	strb	r2, [r5, #0]
   38682:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   38686:	4a0c      	ldr	r2, [pc, #48]	; (386b8 <pdn_state_get_parser+0x68>)
   38688:	681b      	ldr	r3, [r3, #0]
   3868a:	2110      	movs	r1, #16
   3868c:	4668      	mov	r0, sp
   3868e:	f007 fdd5 	bl	4023c <sniprintf>
   38692:	4669      	mov	r1, sp
   38694:	4630      	mov	r0, r6
   38696:	f00c fff1 	bl	4567c <strstr>
   3869a:	3000      	adds	r0, #0
   3869c:	bf18      	it	ne
   3869e:	2001      	movne	r0, #1
   386a0:	b004      	add	sp, #16
   386a2:	bd70      	pop	{r4, r5, r6, pc}
   386a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   386a8:	2b00      	cmp	r3, #0
   386aa:	d1dc      	bne.n	38666 <pdn_state_get_parser+0x16>
   386ac:	e7e6      	b.n	3867c <pdn_state_get_parser+0x2c>
   386ae:	460d      	mov	r5, r1
   386b0:	e7e4      	b.n	3867c <pdn_state_get_parser+0x2c>
   386b2:	bf00      	nop
   386b4:	200258f0 	.word	0x200258f0
   386b8:	000474e0 	.word	0x000474e0

000386bc <pdn_id_get_parser>:
   386bc:	b570      	push	{r4, r5, r6, lr}
   386be:	780b      	ldrb	r3, [r1, #0]
   386c0:	4606      	mov	r6, r0
   386c2:	b313      	cbz	r3, 3870a <pdn_id_get_parser+0x4e>
   386c4:	4608      	mov	r0, r1
   386c6:	2400      	movs	r4, #0
   386c8:	460a      	mov	r2, r1
   386ca:	2b20      	cmp	r3, #32
   386cc:	4615      	mov	r5, r2
   386ce:	d017      	beq.n	38700 <pdn_id_get_parser+0x44>
   386d0:	7013      	strb	r3, [r2, #0]
   386d2:	3401      	adds	r4, #1
   386d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   386d8:	190a      	adds	r2, r1, r4
   386da:	4615      	mov	r5, r2
   386dc:	2b00      	cmp	r3, #0
   386de:	d1f4      	bne.n	386ca <pdn_id_get_parser+0xe>
   386e0:	2300      	movs	r3, #0
   386e2:	4608      	mov	r0, r1
   386e4:	702b      	strb	r3, [r5, #0]
   386e6:	213a      	movs	r1, #58	; 0x3a
   386e8:	f00c ff66 	bl	455b8 <strchr>
   386ec:	b130      	cbz	r0, 386fc <pdn_id_get_parser+0x40>
   386ee:	3001      	adds	r0, #1
   386f0:	f00c fd7a 	bl	451e8 <atoi>
   386f4:	4b06      	ldr	r3, [pc, #24]	; (38710 <pdn_id_get_parser+0x54>)
   386f6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   386fa:	6058      	str	r0, [r3, #4]
   386fc:	2000      	movs	r0, #0
   386fe:	bd70      	pop	{r4, r5, r6, pc}
   38700:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   38704:	2b00      	cmp	r3, #0
   38706:	d1e0      	bne.n	386ca <pdn_id_get_parser+0xe>
   38708:	e7ea      	b.n	386e0 <pdn_id_get_parser+0x24>
   3870a:	460d      	mov	r5, r1
   3870c:	e7e8      	b.n	386e0 <pdn_id_get_parser+0x24>
   3870e:	bf00      	nop
   38710:	200258f0 	.word	0x200258f0

00038714 <context_create_parser>:
   38714:	b570      	push	{r4, r5, r6, lr}
   38716:	780b      	ldrb	r3, [r1, #0]
   38718:	4606      	mov	r6, r0
   3871a:	b313      	cbz	r3, 38762 <context_create_parser+0x4e>
   3871c:	4608      	mov	r0, r1
   3871e:	2400      	movs	r4, #0
   38720:	460a      	mov	r2, r1
   38722:	2b20      	cmp	r3, #32
   38724:	4615      	mov	r5, r2
   38726:	d017      	beq.n	38758 <context_create_parser+0x44>
   38728:	7013      	strb	r3, [r2, #0]
   3872a:	3401      	adds	r4, #1
   3872c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   38730:	190a      	adds	r2, r1, r4
   38732:	4615      	mov	r5, r2
   38734:	2b00      	cmp	r3, #0
   38736:	d1f4      	bne.n	38722 <context_create_parser+0xe>
   38738:	2300      	movs	r3, #0
   3873a:	4608      	mov	r0, r1
   3873c:	702b      	strb	r3, [r5, #0]
   3873e:	213a      	movs	r1, #58	; 0x3a
   38740:	f00c ff3a 	bl	455b8 <strchr>
   38744:	b130      	cbz	r0, 38754 <context_create_parser+0x40>
   38746:	4b08      	ldr	r3, [pc, #32]	; (38768 <context_create_parser+0x54>)
   38748:	3001      	adds	r0, #1
   3874a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   3874e:	f00c fd4b 	bl	451e8 <atoi>
   38752:	6020      	str	r0, [r4, #0]
   38754:	2000      	movs	r0, #0
   38756:	bd70      	pop	{r4, r5, r6, pc}
   38758:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3875c:	2b00      	cmp	r3, #0
   3875e:	d1e0      	bne.n	38722 <context_create_parser+0xe>
   38760:	e7ea      	b.n	38738 <context_create_parser+0x24>
   38762:	460d      	mov	r5, r1
   38764:	e7e8      	b.n	38738 <context_create_parser+0x24>
   38766:	bf00      	nop
   38768:	200258f0 	.word	0x200258f0

0003876c <pdn_interface_init>:
   3876c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38770:	b510      	push	{r4, lr}
   38772:	4c0b      	ldr	r4, [pc, #44]	; (387a0 <pdn_interface_init+0x34>)
   38774:	2228      	movs	r2, #40	; 0x28
   38776:	2100      	movs	r1, #0
   38778:	480a      	ldr	r0, [pc, #40]	; (387a4 <pdn_interface_init+0x38>)
   3877a:	6023      	str	r3, [r4, #0]
   3877c:	f00c fd74 	bl	45268 <memset>
   38780:	f240 2201 	movw	r2, #513	; 0x201
   38784:	2102      	movs	r1, #2
   38786:	2066      	movs	r0, #102	; 0x66
   38788:	f7ff fdd8 	bl	3833c <at_interface_open>
   3878c:	2800      	cmp	r0, #0
   3878e:	6020      	str	r0, [r4, #0]
   38790:	db04      	blt.n	3879c <pdn_interface_init+0x30>
   38792:	2201      	movs	r2, #1
   38794:	4b04      	ldr	r3, [pc, #16]	; (387a8 <pdn_interface_init+0x3c>)
   38796:	2000      	movs	r0, #0
   38798:	701a      	strb	r2, [r3, #0]
   3879a:	bd10      	pop	{r4, pc}
   3879c:	2003      	movs	r0, #3
   3879e:	bd10      	pop	{r4, pc}
   387a0:	200257ec 	.word	0x200257ec
   387a4:	200258f0 	.word	0x200258f0
   387a8:	2002cb14 	.word	0x2002cb14

000387ac <pdn_interface_deinit>:
   387ac:	4b05      	ldr	r3, [pc, #20]	; (387c4 <pdn_interface_deinit+0x18>)
   387ae:	781a      	ldrb	r2, [r3, #0]
   387b0:	b12a      	cbz	r2, 387be <pdn_interface_deinit+0x12>
   387b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   387b6:	2000      	movs	r0, #0
   387b8:	4a03      	ldr	r2, [pc, #12]	; (387c8 <pdn_interface_deinit+0x1c>)
   387ba:	7018      	strb	r0, [r3, #0]
   387bc:	6011      	str	r1, [r2, #0]
   387be:	2000      	movs	r0, #0
   387c0:	4770      	bx	lr
   387c2:	bf00      	nop
   387c4:	2002cb14 	.word	0x2002cb14
   387c8:	200257ec 	.word	0x200257ec

000387cc <pdn_interface_open>:
   387cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   387d0:	4b66      	ldr	r3, [pc, #408]	; (3896c <pdn_interface_open+0x1a0>)
   387d2:	b083      	sub	sp, #12
   387d4:	781b      	ldrb	r3, [r3, #0]
   387d6:	2b00      	cmp	r3, #0
   387d8:	f000 80c2 	beq.w	38960 <pdn_interface_open+0x194>
   387dc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   387e0:	f040 80ad 	bne.w	3893e <pdn_interface_open+0x172>
   387e4:	4c62      	ldr	r4, [pc, #392]	; (38970 <pdn_interface_open+0x1a4>)
   387e6:	6825      	ldr	r5, [r4, #0]
   387e8:	b34d      	cbz	r5, 3883e <pdn_interface_open+0x72>
   387ea:	6863      	ldr	r3, [r4, #4]
   387ec:	2b00      	cmp	r3, #0
   387ee:	f000 8098 	beq.w	38922 <pdn_interface_open+0x156>
   387f2:	68a3      	ldr	r3, [r4, #8]
   387f4:	2b00      	cmp	r3, #0
   387f6:	f000 8096 	beq.w	38926 <pdn_interface_open+0x15a>
   387fa:	68e3      	ldr	r3, [r4, #12]
   387fc:	2b00      	cmp	r3, #0
   387fe:	f000 8094 	beq.w	3892a <pdn_interface_open+0x15e>
   38802:	6923      	ldr	r3, [r4, #16]
   38804:	2b00      	cmp	r3, #0
   38806:	f000 8092 	beq.w	3892e <pdn_interface_open+0x162>
   3880a:	6963      	ldr	r3, [r4, #20]
   3880c:	2b00      	cmp	r3, #0
   3880e:	f000 8090 	beq.w	38932 <pdn_interface_open+0x166>
   38812:	69a3      	ldr	r3, [r4, #24]
   38814:	2b00      	cmp	r3, #0
   38816:	f000 808e 	beq.w	38936 <pdn_interface_open+0x16a>
   3881a:	69e3      	ldr	r3, [r4, #28]
   3881c:	2b00      	cmp	r3, #0
   3881e:	f000 808c 	beq.w	3893a <pdn_interface_open+0x16e>
   38822:	6a23      	ldr	r3, [r4, #32]
   38824:	b153      	cbz	r3, 3883c <pdn_interface_open+0x70>
   38826:	6a63      	ldr	r3, [r4, #36]	; 0x24
   38828:	2509      	movs	r5, #9
   3882a:	b143      	cbz	r3, 3883e <pdn_interface_open+0x72>
   3882c:	200c      	movs	r0, #12
   3882e:	f7f0 ff71 	bl	29714 <bsd_os_errno_set>
   38832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38836:	b003      	add	sp, #12
   38838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3883c:	2508      	movs	r5, #8
   3883e:	2074      	movs	r0, #116	; 0x74
   38840:	f002 fb44 	bl	3aecc <nrf_malloc>
   38844:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   38848:	2800      	cmp	r0, #0
   3884a:	d0ef      	beq.n	3882c <pdn_interface_open+0x60>
   3884c:	2274      	movs	r2, #116	; 0x74
   3884e:	2100      	movs	r1, #0
   38850:	f00c fd0a 	bl	45268 <memset>
   38854:	2101      	movs	r1, #1
   38856:	2003      	movs	r0, #3
   38858:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3885c:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38860:	4a44      	ldr	r2, [pc, #272]	; (38974 <pdn_interface_open+0x1a8>)
   38862:	6099      	str	r1, [r3, #8]
   38864:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   38868:	f44f 7180 	mov.w	r1, #256	; 0x100
   3886c:	6718      	str	r0, [r3, #112]	; 0x70
   3886e:	605f      	str	r7, [r3, #4]
   38870:	4841      	ldr	r0, [pc, #260]	; (38978 <pdn_interface_open+0x1ac>)
   38872:	f8df 8110 	ldr.w	r8, [pc, #272]	; 38984 <pdn_interface_open+0x1b8>
   38876:	f007 fce1 	bl	4023c <sniprintf>
   3887a:	483f      	ldr	r0, [pc, #252]	; (38978 <pdn_interface_open+0x1ac>)
   3887c:	f8d8 9000 	ldr.w	r9, [r8]
   38880:	2600      	movs	r6, #0
   38882:	f7e4 fcef 	bl	1d264 <strlen>
   38886:	4633      	mov	r3, r6
   38888:	4602      	mov	r2, r0
   3888a:	493b      	ldr	r1, [pc, #236]	; (38978 <pdn_interface_open+0x1ac>)
   3888c:	4648      	mov	r0, r9
   3888e:	9601      	str	r6, [sp, #4]
   38890:	9600      	str	r6, [sp, #0]
   38892:	f7ff fcbd 	bl	38210 <at_interface_write>
   38896:	4681      	mov	r9, r0
   38898:	4837      	ldr	r0, [pc, #220]	; (38978 <pdn_interface_open+0x1ac>)
   3889a:	f7e4 fce3 	bl	1d264 <strlen>
   3889e:	4548      	cmp	r0, r9
   388a0:	d153      	bne.n	3894a <pdn_interface_open+0x17e>
   388a2:	4633      	mov	r3, r6
   388a4:	e9cd 6600 	strd	r6, r6, [sp]
   388a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   388ac:	4932      	ldr	r1, [pc, #200]	; (38978 <pdn_interface_open+0x1ac>)
   388ae:	f8d8 0000 	ldr.w	r0, [r8]
   388b2:	f7ff fe0f 	bl	384d4 <at_interface_read>
   388b6:	4606      	mov	r6, r0
   388b8:	4830      	ldr	r0, [pc, #192]	; (3897c <pdn_interface_open+0x1b0>)
   388ba:	f7e4 fcd3 	bl	1d264 <strlen>
   388be:	4286      	cmp	r6, r0
   388c0:	db15      	blt.n	388ee <pdn_interface_open+0x122>
   388c2:	4602      	mov	r2, r0
   388c4:	492c      	ldr	r1, [pc, #176]	; (38978 <pdn_interface_open+0x1ac>)
   388c6:	482d      	ldr	r0, [pc, #180]	; (3897c <pdn_interface_open+0x1b0>)
   388c8:	f00c fea7 	bl	4561a <strncmp>
   388cc:	b978      	cbnz	r0, 388ee <pdn_interface_open+0x122>
   388ce:	492a      	ldr	r1, [pc, #168]	; (38978 <pdn_interface_open+0x1ac>)
   388d0:	4628      	mov	r0, r5
   388d2:	f7ff ff1f 	bl	38714 <context_create_parser>
   388d6:	b9b0      	cbnz	r0, 38906 <pdn_interface_open+0x13a>
   388d8:	2202      	movs	r2, #2
   388da:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   388de:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   388e2:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   388e6:	609a      	str	r2, [r3, #8]
   388e8:	b003      	add	sp, #12
   388ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   388ee:	4824      	ldr	r0, [pc, #144]	; (38980 <pdn_interface_open+0x1b4>)
   388f0:	f7e4 fcb8 	bl	1d264 <strlen>
   388f4:	4920      	ldr	r1, [pc, #128]	; (38978 <pdn_interface_open+0x1ac>)
   388f6:	4602      	mov	r2, r0
   388f8:	4821      	ldr	r0, [pc, #132]	; (38980 <pdn_interface_open+0x1b4>)
   388fa:	f00c fe8e 	bl	4561a <strncmp>
   388fe:	b960      	cbnz	r0, 3891a <pdn_interface_open+0x14e>
   38900:	2008      	movs	r0, #8
   38902:	f7f0 ff07 	bl	29714 <bsd_os_errno_set>
   38906:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   3890a:	f002 fae9 	bl	3aee0 <nrf_free>
   3890e:	2300      	movs	r3, #0
   38910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38914:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   38918:	e78d      	b.n	38836 <pdn_interface_open+0x6a>
   3891a:	2005      	movs	r0, #5
   3891c:	f7f0 fefa 	bl	29714 <bsd_os_errno_set>
   38920:	e7f1      	b.n	38906 <pdn_interface_open+0x13a>
   38922:	2501      	movs	r5, #1
   38924:	e78b      	b.n	3883e <pdn_interface_open+0x72>
   38926:	2502      	movs	r5, #2
   38928:	e789      	b.n	3883e <pdn_interface_open+0x72>
   3892a:	2503      	movs	r5, #3
   3892c:	e787      	b.n	3883e <pdn_interface_open+0x72>
   3892e:	2504      	movs	r5, #4
   38930:	e785      	b.n	3883e <pdn_interface_open+0x72>
   38932:	2505      	movs	r5, #5
   38934:	e783      	b.n	3883e <pdn_interface_open+0x72>
   38936:	2506      	movs	r5, #6
   38938:	e781      	b.n	3883e <pdn_interface_open+0x72>
   3893a:	2507      	movs	r5, #7
   3893c:	e77f      	b.n	3883e <pdn_interface_open+0x72>
   3893e:	2029      	movs	r0, #41	; 0x29
   38940:	f7f0 fee8 	bl	29714 <bsd_os_errno_set>
   38944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38948:	e775      	b.n	38836 <pdn_interface_open+0x6a>
   3894a:	2005      	movs	r0, #5
   3894c:	f7f0 fee2 	bl	29714 <bsd_os_errno_set>
   38950:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   38954:	f002 fac4 	bl	3aee0 <nrf_free>
   38958:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   3895c:	4638      	mov	r0, r7
   3895e:	e76a      	b.n	38836 <pdn_interface_open+0x6a>
   38960:	2070      	movs	r0, #112	; 0x70
   38962:	f7f0 fed7 	bl	29714 <bsd_os_errno_set>
   38966:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3896a:	e764      	b.n	38836 <pdn_interface_open+0x6a>
   3896c:	2002cb14 	.word	0x2002cb14
   38970:	200258f0 	.word	0x200258f0
   38974:	000474bc 	.word	0x000474bc
   38978:	200257f0 	.word	0x200257f0
   3897c:	000474cc 	.word	0x000474cc
   38980:	000474d8 	.word	0x000474d8
   38984:	200257ec 	.word	0x200257ec

00038988 <pdn_interface_connect>:
   38988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3898c:	b083      	sub	sp, #12
   3898e:	2900      	cmp	r1, #0
   38990:	f000 813d 	beq.w	38c0e <pdn_interface_connect+0x286>
   38994:	2a64      	cmp	r2, #100	; 0x64
   38996:	4691      	mov	r9, r2
   38998:	f200 8139 	bhi.w	38c0e <pdn_interface_connect+0x286>
   3899c:	4605      	mov	r5, r0
   3899e:	4608      	mov	r0, r1
   389a0:	4688      	mov	r8, r1
   389a2:	f7e4 fc5f 	bl	1d264 <strlen>
   389a6:	2864      	cmp	r0, #100	; 0x64
   389a8:	f200 8131 	bhi.w	38c0e <pdn_interface_connect+0x286>
   389ac:	0c2b      	lsrs	r3, r5, #16
   389ae:	4aa5      	ldr	r2, [pc, #660]	; (38c44 <pdn_interface_connect+0x2bc>)
   389b0:	041b      	lsls	r3, r3, #16
   389b2:	4293      	cmp	r3, r2
   389b4:	f040 8122 	bne.w	38bfc <pdn_interface_connect+0x274>
   389b8:	f025 45f1 	bic.w	r5, r5, #2021654528	; 0x78800000
   389bc:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   389c0:	2d09      	cmp	r5, #9
   389c2:	f300 811b 	bgt.w	38bfc <pdn_interface_connect+0x274>
   389c6:	4fa0      	ldr	r7, [pc, #640]	; (38c48 <pdn_interface_connect+0x2c0>)
   389c8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   389cc:	2b00      	cmp	r3, #0
   389ce:	f000 8115 	beq.w	38bfc <pdn_interface_connect+0x274>
   389d2:	689a      	ldr	r2, [r3, #8]
   389d4:	2a00      	cmp	r2, #0
   389d6:	f000 8111 	beq.w	38bfc <pdn_interface_connect+0x274>
   389da:	689b      	ldr	r3, [r3, #8]
   389dc:	2b02      	cmp	r3, #2
   389de:	f040 810d 	bne.w	38bfc <pdn_interface_connect+0x274>
   389e2:	4e9a      	ldr	r6, [pc, #616]	; (38c4c <pdn_interface_connect+0x2c4>)
   389e4:	4a9a      	ldr	r2, [pc, #616]	; (38c50 <pdn_interface_connect+0x2c8>)
   389e6:	f44f 7180 	mov.w	r1, #256	; 0x100
   389ea:	4630      	mov	r0, r6
   389ec:	f007 fc26 	bl	4023c <sniprintf>
   389f0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   389f4:	4604      	mov	r4, r0
   389f6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   389fa:	681b      	ldr	r3, [r3, #0]
   389fc:	4a95      	ldr	r2, [pc, #596]	; (38c54 <pdn_interface_connect+0x2cc>)
   389fe:	1830      	adds	r0, r6, r0
   38a00:	f007 fc1c 	bl	4023c <sniprintf>
   38a04:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   38a08:	4404      	add	r4, r0
   38a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   38a0c:	f003 0203 	and.w	r2, r3, #3
   38a10:	2a03      	cmp	r2, #3
   38a12:	f000 80ea 	beq.w	38bea <pdn_interface_connect+0x262>
   38a16:	079b      	lsls	r3, r3, #30
   38a18:	eb06 0004 	add.w	r0, r6, r4
   38a1c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   38a20:	bf4c      	ite	mi
   38a22:	4b8d      	ldrmi	r3, [pc, #564]	; (38c58 <pdn_interface_connect+0x2d0>)
   38a24:	4b8d      	ldrpl	r3, [pc, #564]	; (38c5c <pdn_interface_connect+0x2d4>)
   38a26:	4a8e      	ldr	r2, [pc, #568]	; (38c60 <pdn_interface_connect+0x2d8>)
   38a28:	f007 fc08 	bl	4023c <sniprintf>
   38a2c:	4404      	add	r4, r0
   38a2e:	4643      	mov	r3, r8
   38a30:	4a8c      	ldr	r2, [pc, #560]	; (38c64 <pdn_interface_connect+0x2dc>)
   38a32:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   38a36:	1930      	adds	r0, r6, r4
   38a38:	f007 fc00 	bl	4023c <sniprintf>
   38a3c:	4420      	add	r0, r4
   38a3e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   38a42:	f300 80f7 	bgt.w	38c34 <pdn_interface_connect+0x2ac>
   38a46:	f8df a23c 	ldr.w	sl, [pc, #572]	; 38c84 <pdn_interface_connect+0x2fc>
   38a4a:	4880      	ldr	r0, [pc, #512]	; (38c4c <pdn_interface_connect+0x2c4>)
   38a4c:	f8da b000 	ldr.w	fp, [sl]
   38a50:	2400      	movs	r4, #0
   38a52:	f7e4 fc07 	bl	1d264 <strlen>
   38a56:	4623      	mov	r3, r4
   38a58:	4602      	mov	r2, r0
   38a5a:	497c      	ldr	r1, [pc, #496]	; (38c4c <pdn_interface_connect+0x2c4>)
   38a5c:	4658      	mov	r0, fp
   38a5e:	9401      	str	r4, [sp, #4]
   38a60:	9400      	str	r4, [sp, #0]
   38a62:	f7ff fbd5 	bl	38210 <at_interface_write>
   38a66:	4683      	mov	fp, r0
   38a68:	4878      	ldr	r0, [pc, #480]	; (38c4c <pdn_interface_connect+0x2c4>)
   38a6a:	f7e4 fbfb 	bl	1d264 <strlen>
   38a6e:	4558      	cmp	r0, fp
   38a70:	d008      	beq.n	38a84 <pdn_interface_connect+0xfc>
   38a72:	2005      	movs	r0, #5
   38a74:	f7f0 fe4e 	bl	29714 <bsd_os_errno_set>
   38a78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38a7c:	4620      	mov	r0, r4
   38a7e:	b003      	add	sp, #12
   38a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38a84:	4623      	mov	r3, r4
   38a86:	e9cd 4400 	strd	r4, r4, [sp]
   38a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
   38a8e:	496f      	ldr	r1, [pc, #444]	; (38c4c <pdn_interface_connect+0x2c4>)
   38a90:	f8da 0000 	ldr.w	r0, [sl]
   38a94:	f7ff fd1e 	bl	384d4 <at_interface_read>
   38a98:	4604      	mov	r4, r0
   38a9a:	4873      	ldr	r0, [pc, #460]	; (38c68 <pdn_interface_connect+0x2e0>)
   38a9c:	f7e4 fbe2 	bl	1d264 <strlen>
   38aa0:	4284      	cmp	r4, r0
   38aa2:	f2c0 8091 	blt.w	38bc8 <pdn_interface_connect+0x240>
   38aa6:	4602      	mov	r2, r0
   38aa8:	4968      	ldr	r1, [pc, #416]	; (38c4c <pdn_interface_connect+0x2c4>)
   38aaa:	486f      	ldr	r0, [pc, #444]	; (38c68 <pdn_interface_connect+0x2e0>)
   38aac:	f00c fdb5 	bl	4561a <strncmp>
   38ab0:	2800      	cmp	r0, #0
   38ab2:	f040 8089 	bne.w	38bc8 <pdn_interface_connect+0x240>
   38ab6:	4965      	ldr	r1, [pc, #404]	; (38c4c <pdn_interface_connect+0x2c4>)
   38ab8:	4628      	mov	r0, r5
   38aba:	f7ff fdc7 	bl	3864c <ok_rsp_parser>
   38abe:	4604      	mov	r4, r0
   38ac0:	2800      	cmp	r0, #0
   38ac2:	d1db      	bne.n	38a7c <pdn_interface_connect+0xf4>
   38ac4:	4a69      	ldr	r2, [pc, #420]	; (38c6c <pdn_interface_connect+0x2e4>)
   38ac6:	f44f 7180 	mov.w	r1, #256	; 0x100
   38aca:	4860      	ldr	r0, [pc, #384]	; (38c4c <pdn_interface_connect+0x2c4>)
   38acc:	f007 fbb6 	bl	4023c <sniprintf>
   38ad0:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   38ad4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38ad8:	681b      	ldr	r3, [r3, #0]
   38ada:	4a65      	ldr	r2, [pc, #404]	; (38c70 <pdn_interface_connect+0x2e8>)
   38adc:	4430      	add	r0, r6
   38ade:	f007 fbad 	bl	4023c <sniprintf>
   38ae2:	485a      	ldr	r0, [pc, #360]	; (38c4c <pdn_interface_connect+0x2c4>)
   38ae4:	f8da b000 	ldr.w	fp, [sl]
   38ae8:	f7e4 fbbc 	bl	1d264 <strlen>
   38aec:	4623      	mov	r3, r4
   38aee:	4602      	mov	r2, r0
   38af0:	4956      	ldr	r1, [pc, #344]	; (38c4c <pdn_interface_connect+0x2c4>)
   38af2:	4658      	mov	r0, fp
   38af4:	9401      	str	r4, [sp, #4]
   38af6:	9400      	str	r4, [sp, #0]
   38af8:	f7ff fb8a 	bl	38210 <at_interface_write>
   38afc:	4683      	mov	fp, r0
   38afe:	4853      	ldr	r0, [pc, #332]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b00:	f7e4 fbb0 	bl	1d264 <strlen>
   38b04:	4558      	cmp	r0, fp
   38b06:	d1b4      	bne.n	38a72 <pdn_interface_connect+0xea>
   38b08:	4623      	mov	r3, r4
   38b0a:	f44f 7280 	mov.w	r2, #256	; 0x100
   38b0e:	494f      	ldr	r1, [pc, #316]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b10:	f8da 0000 	ldr.w	r0, [sl]
   38b14:	e9cd 4400 	strd	r4, r4, [sp]
   38b18:	f7ff fcdc 	bl	384d4 <at_interface_read>
   38b1c:	4683      	mov	fp, r0
   38b1e:	4852      	ldr	r0, [pc, #328]	; (38c68 <pdn_interface_connect+0x2e0>)
   38b20:	f7e4 fba0 	bl	1d264 <strlen>
   38b24:	4583      	cmp	fp, r0
   38b26:	db4f      	blt.n	38bc8 <pdn_interface_connect+0x240>
   38b28:	4602      	mov	r2, r0
   38b2a:	4948      	ldr	r1, [pc, #288]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b2c:	484e      	ldr	r0, [pc, #312]	; (38c68 <pdn_interface_connect+0x2e0>)
   38b2e:	f00c fd74 	bl	4561a <strncmp>
   38b32:	2800      	cmp	r0, #0
   38b34:	d148      	bne.n	38bc8 <pdn_interface_connect+0x240>
   38b36:	2103      	movs	r1, #3
   38b38:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   38b3c:	464a      	mov	r2, r9
   38b3e:	6099      	str	r1, [r3, #8]
   38b40:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   38b44:	4641      	mov	r1, r8
   38b46:	300c      	adds	r0, #12
   38b48:	f00c fb6e 	bl	45228 <memcpy>
   38b4c:	4a49      	ldr	r2, [pc, #292]	; (38c74 <pdn_interface_connect+0x2ec>)
   38b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
   38b52:	483e      	ldr	r0, [pc, #248]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b54:	f007 fb72 	bl	4023c <sniprintf>
   38b58:	4601      	mov	r1, r0
   38b5a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   38b5e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   38b62:	681b      	ldr	r3, [r3, #0]
   38b64:	4a42      	ldr	r2, [pc, #264]	; (38c70 <pdn_interface_connect+0x2e8>)
   38b66:	1830      	adds	r0, r6, r0
   38b68:	f007 fb68 	bl	4023c <sniprintf>
   38b6c:	4837      	ldr	r0, [pc, #220]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b6e:	f8da 6000 	ldr.w	r6, [sl]
   38b72:	f7e4 fb77 	bl	1d264 <strlen>
   38b76:	4623      	mov	r3, r4
   38b78:	4602      	mov	r2, r0
   38b7a:	4934      	ldr	r1, [pc, #208]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b7c:	4630      	mov	r0, r6
   38b7e:	9401      	str	r4, [sp, #4]
   38b80:	9400      	str	r4, [sp, #0]
   38b82:	f7ff fb45 	bl	38210 <at_interface_write>
   38b86:	4606      	mov	r6, r0
   38b88:	4830      	ldr	r0, [pc, #192]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b8a:	f7e4 fb6b 	bl	1d264 <strlen>
   38b8e:	42b0      	cmp	r0, r6
   38b90:	d153      	bne.n	38c3a <pdn_interface_connect+0x2b2>
   38b92:	4623      	mov	r3, r4
   38b94:	f44f 7280 	mov.w	r2, #256	; 0x100
   38b98:	492c      	ldr	r1, [pc, #176]	; (38c4c <pdn_interface_connect+0x2c4>)
   38b9a:	f8da 0000 	ldr.w	r0, [sl]
   38b9e:	e9cd 4400 	strd	r4, r4, [sp]
   38ba2:	f7ff fc97 	bl	384d4 <at_interface_read>
   38ba6:	4606      	mov	r6, r0
   38ba8:	4833      	ldr	r0, [pc, #204]	; (38c78 <pdn_interface_connect+0x2f0>)
   38baa:	f7e4 fb5b 	bl	1d264 <strlen>
   38bae:	4286      	cmp	r6, r0
   38bb0:	db33      	blt.n	38c1a <pdn_interface_connect+0x292>
   38bb2:	4602      	mov	r2, r0
   38bb4:	4925      	ldr	r1, [pc, #148]	; (38c4c <pdn_interface_connect+0x2c4>)
   38bb6:	4830      	ldr	r0, [pc, #192]	; (38c78 <pdn_interface_connect+0x2f0>)
   38bb8:	f00c fd2f 	bl	4561a <strncmp>
   38bbc:	bb68      	cbnz	r0, 38c1a <pdn_interface_connect+0x292>
   38bbe:	4628      	mov	r0, r5
   38bc0:	4922      	ldr	r1, [pc, #136]	; (38c4c <pdn_interface_connect+0x2c4>)
   38bc2:	f7ff fd7b 	bl	386bc <pdn_id_get_parser>
   38bc6:	e759      	b.n	38a7c <pdn_interface_connect+0xf4>
   38bc8:	482c      	ldr	r0, [pc, #176]	; (38c7c <pdn_interface_connect+0x2f4>)
   38bca:	f7e4 fb4b 	bl	1d264 <strlen>
   38bce:	491f      	ldr	r1, [pc, #124]	; (38c4c <pdn_interface_connect+0x2c4>)
   38bd0:	4602      	mov	r2, r0
   38bd2:	482a      	ldr	r0, [pc, #168]	; (38c7c <pdn_interface_connect+0x2f4>)
   38bd4:	f00c fd21 	bl	4561a <strncmp>
   38bd8:	2800      	cmp	r0, #0
   38bda:	f47f af4a 	bne.w	38a72 <pdn_interface_connect+0xea>
   38bde:	2008      	movs	r0, #8
   38be0:	f7f0 fd98 	bl	29714 <bsd_os_errno_set>
   38be4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38be8:	e748      	b.n	38a7c <pdn_interface_connect+0xf4>
   38bea:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   38bee:	1930      	adds	r0, r6, r4
   38bf0:	4b23      	ldr	r3, [pc, #140]	; (38c80 <pdn_interface_connect+0x2f8>)
   38bf2:	4a1b      	ldr	r2, [pc, #108]	; (38c60 <pdn_interface_connect+0x2d8>)
   38bf4:	f007 fb22 	bl	4023c <sniprintf>
   38bf8:	4404      	add	r4, r0
   38bfa:	e718      	b.n	38a2e <pdn_interface_connect+0xa6>
   38bfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38c00:	2009      	movs	r0, #9
   38c02:	f7f0 fd87 	bl	29714 <bsd_os_errno_set>
   38c06:	4620      	mov	r0, r4
   38c08:	b003      	add	sp, #12
   38c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c0e:	2016      	movs	r0, #22
   38c10:	f7f0 fd80 	bl	29714 <bsd_os_errno_set>
   38c14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38c18:	e730      	b.n	38a7c <pdn_interface_connect+0xf4>
   38c1a:	4818      	ldr	r0, [pc, #96]	; (38c7c <pdn_interface_connect+0x2f4>)
   38c1c:	f7e4 fb22 	bl	1d264 <strlen>
   38c20:	490a      	ldr	r1, [pc, #40]	; (38c4c <pdn_interface_connect+0x2c4>)
   38c22:	4602      	mov	r2, r0
   38c24:	4815      	ldr	r0, [pc, #84]	; (38c7c <pdn_interface_connect+0x2f4>)
   38c26:	f00c fcf8 	bl	4561a <strncmp>
   38c2a:	b930      	cbnz	r0, 38c3a <pdn_interface_connect+0x2b2>
   38c2c:	2008      	movs	r0, #8
   38c2e:	f7f0 fd71 	bl	29714 <bsd_os_errno_set>
   38c32:	e723      	b.n	38a7c <pdn_interface_connect+0xf4>
   38c34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38c38:	e720      	b.n	38a7c <pdn_interface_connect+0xf4>
   38c3a:	2005      	movs	r0, #5
   38c3c:	f7f0 fd6a 	bl	29714 <bsd_os_errno_set>
   38c40:	e71c      	b.n	38a7c <pdn_interface_connect+0xf4>
   38c42:	bf00      	nop
   38c44:	789a0000 	.word	0x789a0000
   38c48:	200258f0 	.word	0x200258f0
   38c4c:	200257f0 	.word	0x200257f0
   38c50:	00047444 	.word	0x00047444
   38c54:	00047450 	.word	0x00047450
   38c58:	00047464 	.word	0x00047464
   38c5c:	0004746c 	.word	0x0004746c
   38c60:	0004745c 	.word	0x0004745c
   38c64:	000474a0 	.word	0x000474a0
   38c68:	00047470 	.word	0x00047470
   38c6c:	00047474 	.word	0x00047474
   38c70:	00047480 	.word	0x00047480
   38c74:	00047484 	.word	0x00047484
   38c78:	00047494 	.word	0x00047494
   38c7c:	000474d8 	.word	0x000474d8
   38c80:	00047454 	.word	0x00047454
   38c84:	200257ec 	.word	0x200257ec

00038c88 <pdn_interface_close>:
   38c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38c8c:	4a6b      	ldr	r2, [pc, #428]	; (38e3c <pdn_interface_close+0x1b4>)
   38c8e:	0c03      	lsrs	r3, r0, #16
   38c90:	041b      	lsls	r3, r3, #16
   38c92:	4293      	cmp	r3, r2
   38c94:	b083      	sub	sp, #12
   38c96:	f040 80ac 	bne.w	38df2 <pdn_interface_close+0x16a>
   38c9a:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   38c9e:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   38ca2:	2c09      	cmp	r4, #9
   38ca4:	f300 80a5 	bgt.w	38df2 <pdn_interface_close+0x16a>
   38ca8:	4d65      	ldr	r5, [pc, #404]	; (38e40 <pdn_interface_close+0x1b8>)
   38caa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   38cae:	2800      	cmp	r0, #0
   38cb0:	f000 809f 	beq.w	38df2 <pdn_interface_close+0x16a>
   38cb4:	6883      	ldr	r3, [r0, #8]
   38cb6:	2b00      	cmp	r3, #0
   38cb8:	f000 809b 	beq.w	38df2 <pdn_interface_close+0x16a>
   38cbc:	6883      	ldr	r3, [r0, #8]
   38cbe:	2b03      	cmp	r3, #3
   38cc0:	d00b      	beq.n	38cda <pdn_interface_close+0x52>
   38cc2:	6883      	ldr	r3, [r0, #8]
   38cc4:	2b02      	cmp	r3, #2
   38cc6:	d055      	beq.n	38d74 <pdn_interface_close+0xec>
   38cc8:	f002 f90a 	bl	3aee0 <nrf_free>
   38ccc:	2300      	movs	r3, #0
   38cce:	4618      	mov	r0, r3
   38cd0:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   38cd4:	b003      	add	sp, #12
   38cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38cda:	4e5a      	ldr	r6, [pc, #360]	; (38e44 <pdn_interface_close+0x1bc>)
   38cdc:	4a5a      	ldr	r2, [pc, #360]	; (38e48 <pdn_interface_close+0x1c0>)
   38cde:	f44f 7180 	mov.w	r1, #256	; 0x100
   38ce2:	4630      	mov	r0, r6
   38ce4:	f007 faaa 	bl	4023c <sniprintf>
   38ce8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   38cec:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38cf0:	681b      	ldr	r3, [r3, #0]
   38cf2:	4a56      	ldr	r2, [pc, #344]	; (38e4c <pdn_interface_close+0x1c4>)
   38cf4:	4430      	add	r0, r6
   38cf6:	f8df 8164 	ldr.w	r8, [pc, #356]	; 38e5c <pdn_interface_close+0x1d4>
   38cfa:	f007 fa9f 	bl	4023c <sniprintf>
   38cfe:	4630      	mov	r0, r6
   38d00:	f8d8 9000 	ldr.w	r9, [r8]
   38d04:	2700      	movs	r7, #0
   38d06:	f7e4 faad 	bl	1d264 <strlen>
   38d0a:	4631      	mov	r1, r6
   38d0c:	4602      	mov	r2, r0
   38d0e:	463b      	mov	r3, r7
   38d10:	4648      	mov	r0, r9
   38d12:	9701      	str	r7, [sp, #4]
   38d14:	9700      	str	r7, [sp, #0]
   38d16:	f7ff fa7b 	bl	38210 <at_interface_write>
   38d1a:	4681      	mov	r9, r0
   38d1c:	4630      	mov	r0, r6
   38d1e:	f7e4 faa1 	bl	1d264 <strlen>
   38d22:	4548      	cmp	r0, r9
   38d24:	f040 8082 	bne.w	38e2c <pdn_interface_close+0x1a4>
   38d28:	463b      	mov	r3, r7
   38d2a:	e9cd 7700 	strd	r7, r7, [sp]
   38d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
   38d32:	4631      	mov	r1, r6
   38d34:	f8d8 0000 	ldr.w	r0, [r8]
   38d38:	f7ff fbcc 	bl	384d4 <at_interface_read>
   38d3c:	4607      	mov	r7, r0
   38d3e:	4844      	ldr	r0, [pc, #272]	; (38e50 <pdn_interface_close+0x1c8>)
   38d40:	f7e4 fa90 	bl	1d264 <strlen>
   38d44:	4287      	cmp	r7, r0
   38d46:	da5a      	bge.n	38dfe <pdn_interface_close+0x176>
   38d48:	4842      	ldr	r0, [pc, #264]	; (38e54 <pdn_interface_close+0x1cc>)
   38d4a:	f7e4 fa8b 	bl	1d264 <strlen>
   38d4e:	493d      	ldr	r1, [pc, #244]	; (38e44 <pdn_interface_close+0x1bc>)
   38d50:	4602      	mov	r2, r0
   38d52:	4840      	ldr	r0, [pc, #256]	; (38e54 <pdn_interface_close+0x1cc>)
   38d54:	f00c fc61 	bl	4561a <strncmp>
   38d58:	2800      	cmp	r0, #0
   38d5a:	d167      	bne.n	38e2c <pdn_interface_close+0x1a4>
   38d5c:	2008      	movs	r0, #8
   38d5e:	f7f0 fcd9 	bl	29714 <bsd_os_errno_set>
   38d62:	2202      	movs	r2, #2
   38d64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   38d68:	609a      	str	r2, [r3, #8]
   38d6a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   38d6e:	6883      	ldr	r3, [r0, #8]
   38d70:	2b02      	cmp	r3, #2
   38d72:	d1a9      	bne.n	38cc8 <pdn_interface_close+0x40>
   38d74:	4e33      	ldr	r6, [pc, #204]	; (38e44 <pdn_interface_close+0x1bc>)
   38d76:	4a38      	ldr	r2, [pc, #224]	; (38e58 <pdn_interface_close+0x1d0>)
   38d78:	f44f 7180 	mov.w	r1, #256	; 0x100
   38d7c:	4630      	mov	r0, r6
   38d7e:	f007 fa5d 	bl	4023c <sniprintf>
   38d82:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   38d86:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   38d8a:	681b      	ldr	r3, [r3, #0]
   38d8c:	4a2f      	ldr	r2, [pc, #188]	; (38e4c <pdn_interface_close+0x1c4>)
   38d8e:	4430      	add	r0, r6
   38d90:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 38e5c <pdn_interface_close+0x1d4>
   38d94:	f007 fa52 	bl	4023c <sniprintf>
   38d98:	4630      	mov	r0, r6
   38d9a:	f8d8 9000 	ldr.w	r9, [r8]
   38d9e:	2700      	movs	r7, #0
   38da0:	f7e4 fa60 	bl	1d264 <strlen>
   38da4:	4631      	mov	r1, r6
   38da6:	4602      	mov	r2, r0
   38da8:	463b      	mov	r3, r7
   38daa:	4648      	mov	r0, r9
   38dac:	9701      	str	r7, [sp, #4]
   38dae:	9700      	str	r7, [sp, #0]
   38db0:	f7ff fa2e 	bl	38210 <at_interface_write>
   38db4:	4681      	mov	r9, r0
   38db6:	4630      	mov	r0, r6
   38db8:	f7e4 fa54 	bl	1d264 <strlen>
   38dbc:	4548      	cmp	r0, r9
   38dbe:	d139      	bne.n	38e34 <pdn_interface_close+0x1ac>
   38dc0:	463b      	mov	r3, r7
   38dc2:	e9cd 7700 	strd	r7, r7, [sp]
   38dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
   38dca:	4631      	mov	r1, r6
   38dcc:	f8d8 0000 	ldr.w	r0, [r8]
   38dd0:	f7ff fb80 	bl	384d4 <at_interface_read>
   38dd4:	4607      	mov	r7, r0
   38dd6:	481e      	ldr	r0, [pc, #120]	; (38e50 <pdn_interface_close+0x1c8>)
   38dd8:	f7e4 fa44 	bl	1d264 <strlen>
   38ddc:	4287      	cmp	r7, r0
   38dde:	db16      	blt.n	38e0e <pdn_interface_close+0x186>
   38de0:	4602      	mov	r2, r0
   38de2:	4631      	mov	r1, r6
   38de4:	481a      	ldr	r0, [pc, #104]	; (38e50 <pdn_interface_close+0x1c8>)
   38de6:	f00c fc18 	bl	4561a <strncmp>
   38dea:	b980      	cbnz	r0, 38e0e <pdn_interface_close+0x186>
   38dec:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   38df0:	e76a      	b.n	38cc8 <pdn_interface_close+0x40>
   38df2:	2009      	movs	r0, #9
   38df4:	f7f0 fc8e 	bl	29714 <bsd_os_errno_set>
   38df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38dfc:	e76a      	b.n	38cd4 <pdn_interface_close+0x4c>
   38dfe:	4602      	mov	r2, r0
   38e00:	4631      	mov	r1, r6
   38e02:	4813      	ldr	r0, [pc, #76]	; (38e50 <pdn_interface_close+0x1c8>)
   38e04:	f00c fc09 	bl	4561a <strncmp>
   38e08:	2800      	cmp	r0, #0
   38e0a:	d0aa      	beq.n	38d62 <pdn_interface_close+0xda>
   38e0c:	e79c      	b.n	38d48 <pdn_interface_close+0xc0>
   38e0e:	4811      	ldr	r0, [pc, #68]	; (38e54 <pdn_interface_close+0x1cc>)
   38e10:	f7e4 fa28 	bl	1d264 <strlen>
   38e14:	490b      	ldr	r1, [pc, #44]	; (38e44 <pdn_interface_close+0x1bc>)
   38e16:	4602      	mov	r2, r0
   38e18:	480e      	ldr	r0, [pc, #56]	; (38e54 <pdn_interface_close+0x1cc>)
   38e1a:	f00c fbfe 	bl	4561a <strncmp>
   38e1e:	b948      	cbnz	r0, 38e34 <pdn_interface_close+0x1ac>
   38e20:	2008      	movs	r0, #8
   38e22:	f7f0 fc77 	bl	29714 <bsd_os_errno_set>
   38e26:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   38e2a:	e74d      	b.n	38cc8 <pdn_interface_close+0x40>
   38e2c:	2005      	movs	r0, #5
   38e2e:	f7f0 fc71 	bl	29714 <bsd_os_errno_set>
   38e32:	e796      	b.n	38d62 <pdn_interface_close+0xda>
   38e34:	2005      	movs	r0, #5
   38e36:	f7f0 fc6d 	bl	29714 <bsd_os_errno_set>
   38e3a:	e7d7      	b.n	38dec <pdn_interface_close+0x164>
   38e3c:	789a0000 	.word	0x789a0000
   38e40:	200258f0 	.word	0x200258f0
   38e44:	200257f0 	.word	0x200257f0
   38e48:	00047438 	.word	0x00047438
   38e4c:	00047480 	.word	0x00047480
   38e50:	00047470 	.word	0x00047470
   38e54:	000474d8 	.word	0x000474d8
   38e58:	00047444 	.word	0x00047444
   38e5c:	200257ec 	.word	0x200257ec

00038e60 <pdn_interface_setopt>:
   38e60:	b538      	push	{r3, r4, r5, lr}
   38e62:	f240 2502 	movw	r5, #514	; 0x202
   38e66:	42a9      	cmp	r1, r5
   38e68:	9c04      	ldr	r4, [sp, #16]
   38e6a:	d140      	bne.n	38eee <pdn_interface_setopt+0x8e>
   38e6c:	2b00      	cmp	r3, #0
   38e6e:	d03e      	beq.n	38eee <pdn_interface_setopt+0x8e>
   38e70:	2c00      	cmp	r4, #0
   38e72:	d03c      	beq.n	38eee <pdn_interface_setopt+0x8e>
   38e74:	0c01      	lsrs	r1, r0, #16
   38e76:	4d22      	ldr	r5, [pc, #136]	; (38f00 <pdn_interface_setopt+0xa0>)
   38e78:	0409      	lsls	r1, r1, #16
   38e7a:	42a9      	cmp	r1, r5
   38e7c:	d005      	beq.n	38e8a <pdn_interface_setopt+0x2a>
   38e7e:	2009      	movs	r0, #9
   38e80:	f7f0 fc48 	bl	29714 <bsd_os_errno_set>
   38e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38e88:	bd38      	pop	{r3, r4, r5, pc}
   38e8a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   38e8e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   38e92:	2809      	cmp	r0, #9
   38e94:	dcf3      	bgt.n	38e7e <pdn_interface_setopt+0x1e>
   38e96:	491b      	ldr	r1, [pc, #108]	; (38f04 <pdn_interface_setopt+0xa4>)
   38e98:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   38e9c:	2900      	cmp	r1, #0
   38e9e:	d0ee      	beq.n	38e7e <pdn_interface_setopt+0x1e>
   38ea0:	6888      	ldr	r0, [r1, #8]
   38ea2:	2800      	cmp	r0, #0
   38ea4:	d0eb      	beq.n	38e7e <pdn_interface_setopt+0x1e>
   38ea6:	2a01      	cmp	r2, #1
   38ea8:	d128      	bne.n	38efc <pdn_interface_setopt+0x9c>
   38eaa:	688a      	ldr	r2, [r1, #8]
   38eac:	b1ea      	cbz	r2, 38eea <pdn_interface_setopt+0x8a>
   38eae:	688a      	ldr	r2, [r1, #8]
   38eb0:	2a03      	cmp	r2, #3
   38eb2:	d01a      	beq.n	38eea <pdn_interface_setopt+0x8a>
   38eb4:	688a      	ldr	r2, [r1, #8]
   38eb6:	2a04      	cmp	r2, #4
   38eb8:	d017      	beq.n	38eea <pdn_interface_setopt+0x8a>
   38eba:	08a2      	lsrs	r2, r4, #2
   38ebc:	1e50      	subs	r0, r2, #1
   38ebe:	2801      	cmp	r0, #1
   38ec0:	d815      	bhi.n	38eee <pdn_interface_setopt+0x8e>
   38ec2:	07a0      	lsls	r0, r4, #30
   38ec4:	d113      	bne.n	38eee <pdn_interface_setopt+0x8e>
   38ec6:	6818      	ldr	r0, [r3, #0]
   38ec8:	2802      	cmp	r0, #2
   38eca:	d012      	beq.n	38ef2 <pdn_interface_setopt+0x92>
   38ecc:	280a      	cmp	r0, #10
   38ece:	d10e      	bne.n	38eee <pdn_interface_setopt+0x8e>
   38ed0:	2002      	movs	r0, #2
   38ed2:	2a02      	cmp	r2, #2
   38ed4:	d106      	bne.n	38ee4 <pdn_interface_setopt+0x84>
   38ed6:	685b      	ldr	r3, [r3, #4]
   38ed8:	2b02      	cmp	r3, #2
   38eda:	d00c      	beq.n	38ef6 <pdn_interface_setopt+0x96>
   38edc:	2b0a      	cmp	r3, #10
   38ede:	d106      	bne.n	38eee <pdn_interface_setopt+0x8e>
   38ee0:	f040 0002 	orr.w	r0, r0, #2
   38ee4:	6708      	str	r0, [r1, #112]	; 0x70
   38ee6:	2000      	movs	r0, #0
   38ee8:	bd38      	pop	{r3, r4, r5, pc}
   38eea:	200e      	movs	r0, #14
   38eec:	e7c8      	b.n	38e80 <pdn_interface_setopt+0x20>
   38eee:	2016      	movs	r0, #22
   38ef0:	e7c6      	b.n	38e80 <pdn_interface_setopt+0x20>
   38ef2:	2001      	movs	r0, #1
   38ef4:	e7ed      	b.n	38ed2 <pdn_interface_setopt+0x72>
   38ef6:	f040 0001 	orr.w	r0, r0, #1
   38efa:	e7f3      	b.n	38ee4 <pdn_interface_setopt+0x84>
   38efc:	202d      	movs	r0, #45	; 0x2d
   38efe:	e7bf      	b.n	38e80 <pdn_interface_setopt+0x20>
   38f00:	789a0000 	.word	0x789a0000
   38f04:	200258f0 	.word	0x200258f0

00038f08 <pdn_interface_getopt>:
   38f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38f0c:	f240 2402 	movw	r4, #514	; 0x202
   38f10:	b083      	sub	sp, #12
   38f12:	42a1      	cmp	r1, r4
   38f14:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   38f16:	f040 809f 	bne.w	39058 <pdn_interface_getopt+0x150>
   38f1a:	461e      	mov	r6, r3
   38f1c:	2b00      	cmp	r3, #0
   38f1e:	f000 809b 	beq.w	39058 <pdn_interface_getopt+0x150>
   38f22:	2d00      	cmp	r5, #0
   38f24:	f000 8098 	beq.w	39058 <pdn_interface_getopt+0x150>
   38f28:	0c03      	lsrs	r3, r0, #16
   38f2a:	4955      	ldr	r1, [pc, #340]	; (39080 <pdn_interface_getopt+0x178>)
   38f2c:	041b      	lsls	r3, r3, #16
   38f2e:	428b      	cmp	r3, r1
   38f30:	f040 8094 	bne.w	3905c <pdn_interface_getopt+0x154>
   38f34:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   38f38:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   38f3c:	2c09      	cmp	r4, #9
   38f3e:	f300 808d 	bgt.w	3905c <pdn_interface_getopt+0x154>
   38f42:	4b50      	ldr	r3, [pc, #320]	; (39084 <pdn_interface_getopt+0x17c>)
   38f44:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   38f48:	2b00      	cmp	r3, #0
   38f4a:	f000 8087 	beq.w	3905c <pdn_interface_getopt+0x154>
   38f4e:	6899      	ldr	r1, [r3, #8]
   38f50:	2900      	cmp	r1, #0
   38f52:	f000 8083 	beq.w	3905c <pdn_interface_getopt+0x154>
   38f56:	2a02      	cmp	r2, #2
   38f58:	d04c      	beq.n	38ff4 <pdn_interface_getopt+0xec>
   38f5a:	2a03      	cmp	r2, #3
   38f5c:	d009      	beq.n	38f72 <pdn_interface_getopt+0x6a>
   38f5e:	2a01      	cmp	r2, #1
   38f60:	d052      	beq.n	39008 <pdn_interface_getopt+0x100>
   38f62:	202d      	movs	r0, #45	; 0x2d
   38f64:	f7f0 fbd6 	bl	29714 <bsd_os_errno_set>
   38f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38f6c:	b003      	add	sp, #12
   38f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   38f72:	682b      	ldr	r3, [r5, #0]
   38f74:	2b00      	cmp	r3, #0
   38f76:	d06f      	beq.n	39058 <pdn_interface_getopt+0x150>
   38f78:	4a43      	ldr	r2, [pc, #268]	; (39088 <pdn_interface_getopt+0x180>)
   38f7a:	f44f 7180 	mov.w	r1, #256	; 0x100
   38f7e:	4843      	ldr	r0, [pc, #268]	; (3908c <pdn_interface_getopt+0x184>)
   38f80:	f8df 8114 	ldr.w	r8, [pc, #276]	; 39098 <pdn_interface_getopt+0x190>
   38f84:	f007 f95a 	bl	4023c <sniprintf>
   38f88:	4840      	ldr	r0, [pc, #256]	; (3908c <pdn_interface_getopt+0x184>)
   38f8a:	f8d8 9000 	ldr.w	r9, [r8]
   38f8e:	2700      	movs	r7, #0
   38f90:	f7e4 f968 	bl	1d264 <strlen>
   38f94:	463b      	mov	r3, r7
   38f96:	4602      	mov	r2, r0
   38f98:	493c      	ldr	r1, [pc, #240]	; (3908c <pdn_interface_getopt+0x184>)
   38f9a:	4648      	mov	r0, r9
   38f9c:	9701      	str	r7, [sp, #4]
   38f9e:	9700      	str	r7, [sp, #0]
   38fa0:	f7ff f936 	bl	38210 <at_interface_write>
   38fa4:	4681      	mov	r9, r0
   38fa6:	4839      	ldr	r0, [pc, #228]	; (3908c <pdn_interface_getopt+0x184>)
   38fa8:	f7e4 f95c 	bl	1d264 <strlen>
   38fac:	4548      	cmp	r0, r9
   38fae:	d160      	bne.n	39072 <pdn_interface_getopt+0x16a>
   38fb0:	463b      	mov	r3, r7
   38fb2:	e9cd 7700 	strd	r7, r7, [sp]
   38fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   38fba:	4934      	ldr	r1, [pc, #208]	; (3908c <pdn_interface_getopt+0x184>)
   38fbc:	f8d8 0000 	ldr.w	r0, [r8]
   38fc0:	f7ff fa88 	bl	384d4 <at_interface_read>
   38fc4:	4607      	mov	r7, r0
   38fc6:	4832      	ldr	r0, [pc, #200]	; (39090 <pdn_interface_getopt+0x188>)
   38fc8:	f7e4 f94c 	bl	1d264 <strlen>
   38fcc:	4287      	cmp	r7, r0
   38fce:	db32      	blt.n	39036 <pdn_interface_getopt+0x12e>
   38fd0:	4602      	mov	r2, r0
   38fd2:	492e      	ldr	r1, [pc, #184]	; (3908c <pdn_interface_getopt+0x184>)
   38fd4:	482e      	ldr	r0, [pc, #184]	; (39090 <pdn_interface_getopt+0x188>)
   38fd6:	f00c fb20 	bl	4561a <strncmp>
   38fda:	4607      	mov	r7, r0
   38fdc:	bb58      	cbnz	r0, 39036 <pdn_interface_getopt+0x12e>
   38fde:	4620      	mov	r0, r4
   38fe0:	492a      	ldr	r1, [pc, #168]	; (3908c <pdn_interface_getopt+0x184>)
   38fe2:	f7ff fb35 	bl	38650 <pdn_state_get_parser>
   38fe6:	2800      	cmp	r0, #0
   38fe8:	dbbc      	blt.n	38f64 <pdn_interface_getopt+0x5c>
   38fea:	2301      	movs	r3, #1
   38fec:	7030      	strb	r0, [r6, #0]
   38fee:	4638      	mov	r0, r7
   38ff0:	602b      	str	r3, [r5, #0]
   38ff2:	e7bb      	b.n	38f6c <pdn_interface_getopt+0x64>
   38ff4:	682a      	ldr	r2, [r5, #0]
   38ff6:	b37a      	cbz	r2, 39058 <pdn_interface_getopt+0x150>
   38ff8:	2201      	movs	r2, #1
   38ffa:	2000      	movs	r0, #0
   38ffc:	681b      	ldr	r3, [r3, #0]
   38ffe:	7033      	strb	r3, [r6, #0]
   39000:	602a      	str	r2, [r5, #0]
   39002:	b003      	add	sp, #12
   39004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39008:	689a      	ldr	r2, [r3, #8]
   3900a:	b31a      	cbz	r2, 39054 <pdn_interface_getopt+0x14c>
   3900c:	689a      	ldr	r2, [r3, #8]
   3900e:	2a04      	cmp	r2, #4
   39010:	d020      	beq.n	39054 <pdn_interface_getopt+0x14c>
   39012:	682a      	ldr	r2, [r5, #0]
   39014:	2a07      	cmp	r2, #7
   39016:	d91f      	bls.n	39058 <pdn_interface_getopt+0x150>
   39018:	f012 0203 	ands.w	r2, r2, #3
   3901c:	d11c      	bne.n	39058 <pdn_interface_getopt+0x150>
   3901e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   39020:	0799      	lsls	r1, r3, #30
   39022:	d421      	bmi.n	39068 <pdn_interface_getopt+0x160>
   39024:	2104      	movs	r1, #4
   39026:	07db      	lsls	r3, r3, #31
   39028:	d502      	bpl.n	39030 <pdn_interface_getopt+0x128>
   3902a:	2302      	movs	r3, #2
   3902c:	50b3      	str	r3, [r6, r2]
   3902e:	460a      	mov	r2, r1
   39030:	602a      	str	r2, [r5, #0]
   39032:	2000      	movs	r0, #0
   39034:	e79a      	b.n	38f6c <pdn_interface_getopt+0x64>
   39036:	4817      	ldr	r0, [pc, #92]	; (39094 <pdn_interface_getopt+0x18c>)
   39038:	f7e4 f914 	bl	1d264 <strlen>
   3903c:	4913      	ldr	r1, [pc, #76]	; (3908c <pdn_interface_getopt+0x184>)
   3903e:	4602      	mov	r2, r0
   39040:	4814      	ldr	r0, [pc, #80]	; (39094 <pdn_interface_getopt+0x18c>)
   39042:	f00c faea 	bl	4561a <strncmp>
   39046:	b9a0      	cbnz	r0, 39072 <pdn_interface_getopt+0x16a>
   39048:	2008      	movs	r0, #8
   3904a:	f7f0 fb63 	bl	29714 <bsd_os_errno_set>
   3904e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39052:	e787      	b.n	38f64 <pdn_interface_getopt+0x5c>
   39054:	200e      	movs	r0, #14
   39056:	e785      	b.n	38f64 <pdn_interface_getopt+0x5c>
   39058:	2016      	movs	r0, #22
   3905a:	e783      	b.n	38f64 <pdn_interface_getopt+0x5c>
   3905c:	2009      	movs	r0, #9
   3905e:	f7f0 fb59 	bl	29714 <bsd_os_errno_set>
   39062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39066:	e781      	b.n	38f6c <pdn_interface_getopt+0x64>
   39068:	220a      	movs	r2, #10
   3906a:	2108      	movs	r1, #8
   3906c:	6032      	str	r2, [r6, #0]
   3906e:	2204      	movs	r2, #4
   39070:	e7d9      	b.n	39026 <pdn_interface_getopt+0x11e>
   39072:	2005      	movs	r0, #5
   39074:	f7f0 fb4e 	bl	29714 <bsd_os_errno_set>
   39078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3907c:	e772      	b.n	38f64 <pdn_interface_getopt+0x5c>
   3907e:	bf00      	nop
   39080:	789a0000 	.word	0x789a0000
   39084:	200258f0 	.word	0x200258f0
   39088:	000474a8 	.word	0x000474a8
   3908c:	200257f0 	.word	0x200257f0
   39090:	000474b4 	.word	0x000474b4
   39094:	000474d8 	.word	0x000474d8
   39098:	200257ec 	.word	0x200257ec

0003909c <pdn_interface_pdn_id_get>:
   3909c:	2900      	cmp	r1, #0
   3909e:	f000 83b9 	beq.w	39814 <pdn_interface_pdn_id_get+0x778>
   390a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   390a6:	4ca3      	ldr	r4, [pc, #652]	; (39334 <pdn_interface_pdn_id_get+0x298>)
   390a8:	2802      	cmp	r0, #2
   390aa:	b083      	sub	sp, #12
   390ac:	460d      	mov	r5, r1
   390ae:	6823      	ldr	r3, [r4, #0]
   390b0:	f000 8094 	beq.w	391dc <pdn_interface_pdn_id_get+0x140>
   390b4:	280a      	cmp	r0, #10
   390b6:	d03f      	beq.n	39138 <pdn_interface_pdn_id_get+0x9c>
   390b8:	b11b      	cbz	r3, 390c2 <pdn_interface_pdn_id_get+0x26>
   390ba:	689b      	ldr	r3, [r3, #8]
   390bc:	2b03      	cmp	r3, #3
   390be:	f000 8127 	beq.w	39310 <pdn_interface_pdn_id_get+0x274>
   390c2:	6863      	ldr	r3, [r4, #4]
   390c4:	b11b      	cbz	r3, 390ce <pdn_interface_pdn_id_get+0x32>
   390c6:	689b      	ldr	r3, [r3, #8]
   390c8:	2b03      	cmp	r3, #3
   390ca:	f000 8110 	beq.w	392ee <pdn_interface_pdn_id_get+0x252>
   390ce:	68a3      	ldr	r3, [r4, #8]
   390d0:	b11b      	cbz	r3, 390da <pdn_interface_pdn_id_get+0x3e>
   390d2:	689b      	ldr	r3, [r3, #8]
   390d4:	2b03      	cmp	r3, #3
   390d6:	f000 80f9 	beq.w	392cc <pdn_interface_pdn_id_get+0x230>
   390da:	68e3      	ldr	r3, [r4, #12]
   390dc:	b11b      	cbz	r3, 390e6 <pdn_interface_pdn_id_get+0x4a>
   390de:	689b      	ldr	r3, [r3, #8]
   390e0:	2b03      	cmp	r3, #3
   390e2:	f000 80e2 	beq.w	392aa <pdn_interface_pdn_id_get+0x20e>
   390e6:	6923      	ldr	r3, [r4, #16]
   390e8:	b11b      	cbz	r3, 390f2 <pdn_interface_pdn_id_get+0x56>
   390ea:	689b      	ldr	r3, [r3, #8]
   390ec:	2b03      	cmp	r3, #3
   390ee:	f000 8123 	beq.w	39338 <pdn_interface_pdn_id_get+0x29c>
   390f2:	6963      	ldr	r3, [r4, #20]
   390f4:	b11b      	cbz	r3, 390fe <pdn_interface_pdn_id_get+0x62>
   390f6:	689b      	ldr	r3, [r3, #8]
   390f8:	2b03      	cmp	r3, #3
   390fa:	f000 8161 	beq.w	393c0 <pdn_interface_pdn_id_get+0x324>
   390fe:	69a3      	ldr	r3, [r4, #24]
   39100:	b11b      	cbz	r3, 3910a <pdn_interface_pdn_id_get+0x6e>
   39102:	689b      	ldr	r3, [r3, #8]
   39104:	2b03      	cmp	r3, #3
   39106:	f000 814a 	beq.w	3939e <pdn_interface_pdn_id_get+0x302>
   3910a:	69e3      	ldr	r3, [r4, #28]
   3910c:	b11b      	cbz	r3, 39116 <pdn_interface_pdn_id_get+0x7a>
   3910e:	689b      	ldr	r3, [r3, #8]
   39110:	2b03      	cmp	r3, #3
   39112:	f000 8133 	beq.w	3937c <pdn_interface_pdn_id_get+0x2e0>
   39116:	6a23      	ldr	r3, [r4, #32]
   39118:	b11b      	cbz	r3, 39122 <pdn_interface_pdn_id_get+0x86>
   3911a:	689b      	ldr	r3, [r3, #8]
   3911c:	2b03      	cmp	r3, #3
   3911e:	f000 811c 	beq.w	3935a <pdn_interface_pdn_id_get+0x2be>
   39122:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39124:	b11b      	cbz	r3, 3912e <pdn_interface_pdn_id_get+0x92>
   39126:	689b      	ldr	r3, [r3, #8]
   39128:	2b03      	cmp	r3, #3
   3912a:	f000 80ad 	beq.w	39288 <pdn_interface_pdn_id_get+0x1ec>
   3912e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39132:	b003      	add	sp, #12
   39134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39138:	b11b      	cbz	r3, 39142 <pdn_interface_pdn_id_get+0xa6>
   3913a:	689b      	ldr	r3, [r3, #8]
   3913c:	2b03      	cmp	r3, #3
   3913e:	f000 8335 	beq.w	397ac <pdn_interface_pdn_id_get+0x710>
   39142:	6863      	ldr	r3, [r4, #4]
   39144:	b11b      	cbz	r3, 3914e <pdn_interface_pdn_id_get+0xb2>
   39146:	689b      	ldr	r3, [r3, #8]
   39148:	2b03      	cmp	r3, #3
   3914a:	f000 82fd 	beq.w	39748 <pdn_interface_pdn_id_get+0x6ac>
   3914e:	68a3      	ldr	r3, [r4, #8]
   39150:	b11b      	cbz	r3, 3915a <pdn_interface_pdn_id_get+0xbe>
   39152:	689b      	ldr	r3, [r3, #8]
   39154:	2b03      	cmp	r3, #3
   39156:	f000 82d5 	beq.w	39704 <pdn_interface_pdn_id_get+0x668>
   3915a:	68e3      	ldr	r3, [r4, #12]
   3915c:	b11b      	cbz	r3, 39166 <pdn_interface_pdn_id_get+0xca>
   3915e:	689e      	ldr	r6, [r3, #8]
   39160:	2e03      	cmp	r6, #3
   39162:	f000 81f0 	beq.w	39546 <pdn_interface_pdn_id_get+0x4aa>
   39166:	6923      	ldr	r3, [r4, #16]
   39168:	b11b      	cbz	r3, 39172 <pdn_interface_pdn_id_get+0xd6>
   3916a:	689b      	ldr	r3, [r3, #8]
   3916c:	2b03      	cmp	r3, #3
   3916e:	f000 8203 	beq.w	39578 <pdn_interface_pdn_id_get+0x4dc>
   39172:	6963      	ldr	r3, [r4, #20]
   39174:	b11b      	cbz	r3, 3917e <pdn_interface_pdn_id_get+0xe2>
   39176:	689b      	ldr	r3, [r3, #8]
   39178:	2b03      	cmp	r3, #3
   3917a:	f000 8215 	beq.w	395a8 <pdn_interface_pdn_id_get+0x50c>
   3917e:	69a3      	ldr	r3, [r4, #24]
   39180:	b11b      	cbz	r3, 3918a <pdn_interface_pdn_id_get+0xee>
   39182:	689b      	ldr	r3, [r3, #8]
   39184:	2b03      	cmp	r3, #3
   39186:	f000 8227 	beq.w	395d8 <pdn_interface_pdn_id_get+0x53c>
   3918a:	69e3      	ldr	r3, [r4, #28]
   3918c:	b11b      	cbz	r3, 39196 <pdn_interface_pdn_id_get+0xfa>
   3918e:	689b      	ldr	r3, [r3, #8]
   39190:	2b03      	cmp	r3, #3
   39192:	f000 8239 	beq.w	39608 <pdn_interface_pdn_id_get+0x56c>
   39196:	6a23      	ldr	r3, [r4, #32]
   39198:	b11b      	cbz	r3, 391a2 <pdn_interface_pdn_id_get+0x106>
   3919a:	689b      	ldr	r3, [r3, #8]
   3919c:	2b03      	cmp	r3, #3
   3919e:	f000 824d 	beq.w	3963c <pdn_interface_pdn_id_get+0x5a0>
   391a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   391a4:	2b00      	cmp	r3, #0
   391a6:	d0c2      	beq.n	3912e <pdn_interface_pdn_id_get+0x92>
   391a8:	689b      	ldr	r3, [r3, #8]
   391aa:	2b03      	cmp	r3, #3
   391ac:	d1bf      	bne.n	3912e <pdn_interface_pdn_id_get+0x92>
   391ae:	4628      	mov	r0, r5
   391b0:	f7e4 f858 	bl	1d264 <strlen>
   391b4:	4606      	mov	r6, r0
   391b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   391b8:	300c      	adds	r0, #12
   391ba:	f7e4 f853 	bl	1d264 <strlen>
   391be:	42b0      	cmp	r0, r6
   391c0:	d1b5      	bne.n	3912e <pdn_interface_pdn_id_get+0x92>
   391c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   391c4:	4628      	mov	r0, r5
   391c6:	310c      	adds	r1, #12
   391c8:	f7e4 f842 	bl	1d250 <strcmp>
   391cc:	2800      	cmp	r0, #0
   391ce:	d1ae      	bne.n	3912e <pdn_interface_pdn_id_get+0x92>
   391d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   391d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   391d4:	0792      	lsls	r2, r2, #30
   391d6:	d5aa      	bpl.n	3912e <pdn_interface_pdn_id_get+0x92>
   391d8:	2609      	movs	r6, #9
   391da:	e11a      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   391dc:	b11b      	cbz	r3, 391e6 <pdn_interface_pdn_id_get+0x14a>
   391de:	689b      	ldr	r3, [r3, #8]
   391e0:	2b03      	cmp	r3, #3
   391e2:	f000 82fd 	beq.w	397e0 <pdn_interface_pdn_id_get+0x744>
   391e6:	6863      	ldr	r3, [r4, #4]
   391e8:	b11b      	cbz	r3, 391f2 <pdn_interface_pdn_id_get+0x156>
   391ea:	689b      	ldr	r3, [r3, #8]
   391ec:	2b03      	cmp	r3, #3
   391ee:	f000 82c5 	beq.w	3977c <pdn_interface_pdn_id_get+0x6e0>
   391f2:	68a3      	ldr	r3, [r4, #8]
   391f4:	b11b      	cbz	r3, 391fe <pdn_interface_pdn_id_get+0x162>
   391f6:	689b      	ldr	r3, [r3, #8]
   391f8:	2b03      	cmp	r3, #3
   391fa:	f000 8269 	beq.w	396d0 <pdn_interface_pdn_id_get+0x634>
   391fe:	68e3      	ldr	r3, [r4, #12]
   39200:	b11b      	cbz	r3, 3920a <pdn_interface_pdn_id_get+0x16e>
   39202:	689e      	ldr	r6, [r3, #8]
   39204:	2e03      	cmp	r6, #3
   39206:	f000 80ec 	beq.w	393e2 <pdn_interface_pdn_id_get+0x346>
   3920a:	6923      	ldr	r3, [r4, #16]
   3920c:	b11b      	cbz	r3, 39216 <pdn_interface_pdn_id_get+0x17a>
   3920e:	689b      	ldr	r3, [r3, #8]
   39210:	2b03      	cmp	r3, #3
   39212:	f000 814a 	beq.w	394aa <pdn_interface_pdn_id_get+0x40e>
   39216:	6963      	ldr	r3, [r4, #20]
   39218:	b11b      	cbz	r3, 39222 <pdn_interface_pdn_id_get+0x186>
   3921a:	689b      	ldr	r3, [r3, #8]
   3921c:	2b03      	cmp	r3, #3
   3921e:	f000 815e 	beq.w	394de <pdn_interface_pdn_id_get+0x442>
   39222:	69a3      	ldr	r3, [r4, #24]
   39224:	b11b      	cbz	r3, 3922e <pdn_interface_pdn_id_get+0x192>
   39226:	689b      	ldr	r3, [r3, #8]
   39228:	2b03      	cmp	r3, #3
   3922a:	f000 8172 	beq.w	39512 <pdn_interface_pdn_id_get+0x476>
   3922e:	69e3      	ldr	r3, [r4, #28]
   39230:	b11b      	cbz	r3, 3923a <pdn_interface_pdn_id_get+0x19e>
   39232:	689b      	ldr	r3, [r3, #8]
   39234:	2b03      	cmp	r3, #3
   39236:	f000 821b 	beq.w	39670 <pdn_interface_pdn_id_get+0x5d4>
   3923a:	6a23      	ldr	r3, [r4, #32]
   3923c:	b11b      	cbz	r3, 39246 <pdn_interface_pdn_id_get+0x1aa>
   3923e:	689b      	ldr	r3, [r3, #8]
   39240:	2b03      	cmp	r3, #3
   39242:	f000 822d 	beq.w	396a0 <pdn_interface_pdn_id_get+0x604>
   39246:	6a63      	ldr	r3, [r4, #36]	; 0x24
   39248:	2b00      	cmp	r3, #0
   3924a:	f43f af70 	beq.w	3912e <pdn_interface_pdn_id_get+0x92>
   3924e:	689b      	ldr	r3, [r3, #8]
   39250:	2b03      	cmp	r3, #3
   39252:	f47f af6c 	bne.w	3912e <pdn_interface_pdn_id_get+0x92>
   39256:	4628      	mov	r0, r5
   39258:	f7e4 f804 	bl	1d264 <strlen>
   3925c:	4606      	mov	r6, r0
   3925e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   39260:	300c      	adds	r0, #12
   39262:	f7e3 ffff 	bl	1d264 <strlen>
   39266:	4286      	cmp	r6, r0
   39268:	f47f af61 	bne.w	3912e <pdn_interface_pdn_id_get+0x92>
   3926c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3926e:	4628      	mov	r0, r5
   39270:	310c      	adds	r1, #12
   39272:	f7e3 ffed 	bl	1d250 <strcmp>
   39276:	2800      	cmp	r0, #0
   39278:	f47f af59 	bne.w	3912e <pdn_interface_pdn_id_get+0x92>
   3927c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3927e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39280:	07d2      	lsls	r2, r2, #31
   39282:	f57f af54 	bpl.w	3912e <pdn_interface_pdn_id_get+0x92>
   39286:	e7a7      	b.n	391d8 <pdn_interface_pdn_id_get+0x13c>
   39288:	4628      	mov	r0, r5
   3928a:	f7e3 ffeb 	bl	1d264 <strlen>
   3928e:	4606      	mov	r6, r0
   39290:	6a60      	ldr	r0, [r4, #36]	; 0x24
   39292:	300c      	adds	r0, #12
   39294:	f7e3 ffe6 	bl	1d264 <strlen>
   39298:	42b0      	cmp	r0, r6
   3929a:	f47f af48 	bne.w	3912e <pdn_interface_pdn_id_get+0x92>
   3929e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   392a0:	4628      	mov	r0, r5
   392a2:	310c      	adds	r1, #12
   392a4:	f7e3 ffd4 	bl	1d250 <strcmp>
   392a8:	e741      	b.n	3912e <pdn_interface_pdn_id_get+0x92>
   392aa:	4628      	mov	r0, r5
   392ac:	f7e3 ffda 	bl	1d264 <strlen>
   392b0:	4606      	mov	r6, r0
   392b2:	68e0      	ldr	r0, [r4, #12]
   392b4:	300c      	adds	r0, #12
   392b6:	f7e3 ffd5 	bl	1d264 <strlen>
   392ba:	4286      	cmp	r6, r0
   392bc:	f47f af13 	bne.w	390e6 <pdn_interface_pdn_id_get+0x4a>
   392c0:	68e1      	ldr	r1, [r4, #12]
   392c2:	4628      	mov	r0, r5
   392c4:	310c      	adds	r1, #12
   392c6:	f7e3 ffc3 	bl	1d250 <strcmp>
   392ca:	e70c      	b.n	390e6 <pdn_interface_pdn_id_get+0x4a>
   392cc:	4628      	mov	r0, r5
   392ce:	f7e3 ffc9 	bl	1d264 <strlen>
   392d2:	4606      	mov	r6, r0
   392d4:	68a0      	ldr	r0, [r4, #8]
   392d6:	300c      	adds	r0, #12
   392d8:	f7e3 ffc4 	bl	1d264 <strlen>
   392dc:	4286      	cmp	r6, r0
   392de:	f47f aefc 	bne.w	390da <pdn_interface_pdn_id_get+0x3e>
   392e2:	68a1      	ldr	r1, [r4, #8]
   392e4:	4628      	mov	r0, r5
   392e6:	310c      	adds	r1, #12
   392e8:	f7e3 ffb2 	bl	1d250 <strcmp>
   392ec:	e6f5      	b.n	390da <pdn_interface_pdn_id_get+0x3e>
   392ee:	4628      	mov	r0, r5
   392f0:	f7e3 ffb8 	bl	1d264 <strlen>
   392f4:	4606      	mov	r6, r0
   392f6:	6860      	ldr	r0, [r4, #4]
   392f8:	300c      	adds	r0, #12
   392fa:	f7e3 ffb3 	bl	1d264 <strlen>
   392fe:	4286      	cmp	r6, r0
   39300:	f47f aee5 	bne.w	390ce <pdn_interface_pdn_id_get+0x32>
   39304:	6861      	ldr	r1, [r4, #4]
   39306:	4628      	mov	r0, r5
   39308:	310c      	adds	r1, #12
   3930a:	f7e3 ffa1 	bl	1d250 <strcmp>
   3930e:	e6de      	b.n	390ce <pdn_interface_pdn_id_get+0x32>
   39310:	4608      	mov	r0, r1
   39312:	f7e3 ffa7 	bl	1d264 <strlen>
   39316:	4606      	mov	r6, r0
   39318:	6820      	ldr	r0, [r4, #0]
   3931a:	300c      	adds	r0, #12
   3931c:	f7e3 ffa2 	bl	1d264 <strlen>
   39320:	4286      	cmp	r6, r0
   39322:	f47f aece 	bne.w	390c2 <pdn_interface_pdn_id_get+0x26>
   39326:	6821      	ldr	r1, [r4, #0]
   39328:	4628      	mov	r0, r5
   3932a:	310c      	adds	r1, #12
   3932c:	f7e3 ff90 	bl	1d250 <strcmp>
   39330:	e6c7      	b.n	390c2 <pdn_interface_pdn_id_get+0x26>
   39332:	bf00      	nop
   39334:	200258f0 	.word	0x200258f0
   39338:	4628      	mov	r0, r5
   3933a:	f7e3 ff93 	bl	1d264 <strlen>
   3933e:	4606      	mov	r6, r0
   39340:	6920      	ldr	r0, [r4, #16]
   39342:	300c      	adds	r0, #12
   39344:	f7e3 ff8e 	bl	1d264 <strlen>
   39348:	4286      	cmp	r6, r0
   3934a:	f47f aed2 	bne.w	390f2 <pdn_interface_pdn_id_get+0x56>
   3934e:	6921      	ldr	r1, [r4, #16]
   39350:	4628      	mov	r0, r5
   39352:	310c      	adds	r1, #12
   39354:	f7e3 ff7c 	bl	1d250 <strcmp>
   39358:	e6cb      	b.n	390f2 <pdn_interface_pdn_id_get+0x56>
   3935a:	4628      	mov	r0, r5
   3935c:	f7e3 ff82 	bl	1d264 <strlen>
   39360:	4606      	mov	r6, r0
   39362:	6a20      	ldr	r0, [r4, #32]
   39364:	300c      	adds	r0, #12
   39366:	f7e3 ff7d 	bl	1d264 <strlen>
   3936a:	4286      	cmp	r6, r0
   3936c:	f47f aed9 	bne.w	39122 <pdn_interface_pdn_id_get+0x86>
   39370:	6a21      	ldr	r1, [r4, #32]
   39372:	4628      	mov	r0, r5
   39374:	310c      	adds	r1, #12
   39376:	f7e3 ff6b 	bl	1d250 <strcmp>
   3937a:	e6d2      	b.n	39122 <pdn_interface_pdn_id_get+0x86>
   3937c:	4628      	mov	r0, r5
   3937e:	f7e3 ff71 	bl	1d264 <strlen>
   39382:	4606      	mov	r6, r0
   39384:	69e0      	ldr	r0, [r4, #28]
   39386:	300c      	adds	r0, #12
   39388:	f7e3 ff6c 	bl	1d264 <strlen>
   3938c:	4286      	cmp	r6, r0
   3938e:	f47f aec2 	bne.w	39116 <pdn_interface_pdn_id_get+0x7a>
   39392:	69e1      	ldr	r1, [r4, #28]
   39394:	4628      	mov	r0, r5
   39396:	310c      	adds	r1, #12
   39398:	f7e3 ff5a 	bl	1d250 <strcmp>
   3939c:	e6bb      	b.n	39116 <pdn_interface_pdn_id_get+0x7a>
   3939e:	4628      	mov	r0, r5
   393a0:	f7e3 ff60 	bl	1d264 <strlen>
   393a4:	4606      	mov	r6, r0
   393a6:	69a0      	ldr	r0, [r4, #24]
   393a8:	300c      	adds	r0, #12
   393aa:	f7e3 ff5b 	bl	1d264 <strlen>
   393ae:	4286      	cmp	r6, r0
   393b0:	f47f aeab 	bne.w	3910a <pdn_interface_pdn_id_get+0x6e>
   393b4:	69a1      	ldr	r1, [r4, #24]
   393b6:	4628      	mov	r0, r5
   393b8:	310c      	adds	r1, #12
   393ba:	f7e3 ff49 	bl	1d250 <strcmp>
   393be:	e6a4      	b.n	3910a <pdn_interface_pdn_id_get+0x6e>
   393c0:	4628      	mov	r0, r5
   393c2:	f7e3 ff4f 	bl	1d264 <strlen>
   393c6:	4606      	mov	r6, r0
   393c8:	6960      	ldr	r0, [r4, #20]
   393ca:	300c      	adds	r0, #12
   393cc:	f7e3 ff4a 	bl	1d264 <strlen>
   393d0:	4286      	cmp	r6, r0
   393d2:	f47f ae94 	bne.w	390fe <pdn_interface_pdn_id_get+0x62>
   393d6:	6961      	ldr	r1, [r4, #20]
   393d8:	4628      	mov	r0, r5
   393da:	310c      	adds	r1, #12
   393dc:	f7e3 ff38 	bl	1d250 <strcmp>
   393e0:	e68d      	b.n	390fe <pdn_interface_pdn_id_get+0x62>
   393e2:	4628      	mov	r0, r5
   393e4:	f7e3 ff3e 	bl	1d264 <strlen>
   393e8:	4607      	mov	r7, r0
   393ea:	68e0      	ldr	r0, [r4, #12]
   393ec:	300c      	adds	r0, #12
   393ee:	f7e3 ff39 	bl	1d264 <strlen>
   393f2:	4287      	cmp	r7, r0
   393f4:	f47f af09 	bne.w	3920a <pdn_interface_pdn_id_get+0x16e>
   393f8:	68e1      	ldr	r1, [r4, #12]
   393fa:	4628      	mov	r0, r5
   393fc:	310c      	adds	r1, #12
   393fe:	f7e3 ff27 	bl	1d250 <strcmp>
   39402:	2800      	cmp	r0, #0
   39404:	f47f af01 	bne.w	3920a <pdn_interface_pdn_id_get+0x16e>
   39408:	68e3      	ldr	r3, [r4, #12]
   3940a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3940c:	07d1      	lsls	r1, r2, #31
   3940e:	f57f aefc 	bpl.w	3920a <pdn_interface_pdn_id_get+0x16e>
   39412:	6858      	ldr	r0, [r3, #4]
   39414:	1c43      	adds	r3, r0, #1
   39416:	f47f ae8c 	bne.w	39132 <pdn_interface_pdn_id_get+0x96>
   3941a:	4dc6      	ldr	r5, [pc, #792]	; (39734 <pdn_interface_pdn_id_get+0x698>)
   3941c:	4ac6      	ldr	r2, [pc, #792]	; (39738 <pdn_interface_pdn_id_get+0x69c>)
   3941e:	f44f 7180 	mov.w	r1, #256	; 0x100
   39422:	4628      	mov	r0, r5
   39424:	f006 ff0a 	bl	4023c <sniprintf>
   39428:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   3942c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   39430:	681b      	ldr	r3, [r3, #0]
   39432:	4ac2      	ldr	r2, [pc, #776]	; (3973c <pdn_interface_pdn_id_get+0x6a0>)
   39434:	4428      	add	r0, r5
   39436:	f8df 830c 	ldr.w	r8, [pc, #780]	; 39744 <pdn_interface_pdn_id_get+0x6a8>
   3943a:	f006 feff 	bl	4023c <sniprintf>
   3943e:	4628      	mov	r0, r5
   39440:	f8d8 9000 	ldr.w	r9, [r8]
   39444:	2700      	movs	r7, #0
   39446:	f7e3 ff0d 	bl	1d264 <strlen>
   3944a:	4629      	mov	r1, r5
   3944c:	4602      	mov	r2, r0
   3944e:	463b      	mov	r3, r7
   39450:	4648      	mov	r0, r9
   39452:	9701      	str	r7, [sp, #4]
   39454:	9700      	str	r7, [sp, #0]
   39456:	f7fe fedb 	bl	38210 <at_interface_write>
   3945a:	4681      	mov	r9, r0
   3945c:	4628      	mov	r0, r5
   3945e:	f7e3 ff01 	bl	1d264 <strlen>
   39462:	4548      	cmp	r0, r9
   39464:	f040 81e9 	bne.w	3983a <pdn_interface_pdn_id_get+0x79e>
   39468:	463b      	mov	r3, r7
   3946a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3946e:	e9cd 7700 	strd	r7, r7, [sp]
   39472:	4629      	mov	r1, r5
   39474:	f8d8 0000 	ldr.w	r0, [r8]
   39478:	f7ff f82c 	bl	384d4 <at_interface_read>
   3947c:	4607      	mov	r7, r0
   3947e:	48b0      	ldr	r0, [pc, #704]	; (39740 <pdn_interface_pdn_id_get+0x6a4>)
   39480:	f7e3 fef0 	bl	1d264 <strlen>
   39484:	4287      	cmp	r7, r0
   39486:	4602      	mov	r2, r0
   39488:	f2c0 81c7 	blt.w	3981a <pdn_interface_pdn_id_get+0x77e>
   3948c:	4629      	mov	r1, r5
   3948e:	48ac      	ldr	r0, [pc, #688]	; (39740 <pdn_interface_pdn_id_get+0x6a4>)
   39490:	f00c f8c3 	bl	4561a <strncmp>
   39494:	2800      	cmp	r0, #0
   39496:	f040 81c0 	bne.w	3981a <pdn_interface_pdn_id_get+0x77e>
   3949a:	4629      	mov	r1, r5
   3949c:	4630      	mov	r0, r6
   3949e:	f7ff f90d 	bl	386bc <pdn_id_get_parser>
   394a2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   394a6:	6858      	ldr	r0, [r3, #4]
   394a8:	e643      	b.n	39132 <pdn_interface_pdn_id_get+0x96>
   394aa:	4628      	mov	r0, r5
   394ac:	f7e3 feda 	bl	1d264 <strlen>
   394b0:	4606      	mov	r6, r0
   394b2:	6920      	ldr	r0, [r4, #16]
   394b4:	300c      	adds	r0, #12
   394b6:	f7e3 fed5 	bl	1d264 <strlen>
   394ba:	4286      	cmp	r6, r0
   394bc:	f47f aeab 	bne.w	39216 <pdn_interface_pdn_id_get+0x17a>
   394c0:	6921      	ldr	r1, [r4, #16]
   394c2:	4628      	mov	r0, r5
   394c4:	310c      	adds	r1, #12
   394c6:	f7e3 fec3 	bl	1d250 <strcmp>
   394ca:	2800      	cmp	r0, #0
   394cc:	f47f aea3 	bne.w	39216 <pdn_interface_pdn_id_get+0x17a>
   394d0:	6923      	ldr	r3, [r4, #16]
   394d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   394d4:	07d2      	lsls	r2, r2, #31
   394d6:	f57f ae9e 	bpl.w	39216 <pdn_interface_pdn_id_get+0x17a>
   394da:	2604      	movs	r6, #4
   394dc:	e799      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   394de:	4628      	mov	r0, r5
   394e0:	f7e3 fec0 	bl	1d264 <strlen>
   394e4:	4606      	mov	r6, r0
   394e6:	6960      	ldr	r0, [r4, #20]
   394e8:	300c      	adds	r0, #12
   394ea:	f7e3 febb 	bl	1d264 <strlen>
   394ee:	4286      	cmp	r6, r0
   394f0:	f47f ae97 	bne.w	39222 <pdn_interface_pdn_id_get+0x186>
   394f4:	6961      	ldr	r1, [r4, #20]
   394f6:	4628      	mov	r0, r5
   394f8:	310c      	adds	r1, #12
   394fa:	f7e3 fea9 	bl	1d250 <strcmp>
   394fe:	2800      	cmp	r0, #0
   39500:	f47f ae8f 	bne.w	39222 <pdn_interface_pdn_id_get+0x186>
   39504:	6963      	ldr	r3, [r4, #20]
   39506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39508:	07d7      	lsls	r7, r2, #31
   3950a:	f57f ae8a 	bpl.w	39222 <pdn_interface_pdn_id_get+0x186>
   3950e:	2605      	movs	r6, #5
   39510:	e77f      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   39512:	4628      	mov	r0, r5
   39514:	f7e3 fea6 	bl	1d264 <strlen>
   39518:	4606      	mov	r6, r0
   3951a:	69a0      	ldr	r0, [r4, #24]
   3951c:	300c      	adds	r0, #12
   3951e:	f7e3 fea1 	bl	1d264 <strlen>
   39522:	4286      	cmp	r6, r0
   39524:	f47f ae83 	bne.w	3922e <pdn_interface_pdn_id_get+0x192>
   39528:	69a1      	ldr	r1, [r4, #24]
   3952a:	4628      	mov	r0, r5
   3952c:	310c      	adds	r1, #12
   3952e:	f7e3 fe8f 	bl	1d250 <strcmp>
   39532:	2800      	cmp	r0, #0
   39534:	f47f ae7b 	bne.w	3922e <pdn_interface_pdn_id_get+0x192>
   39538:	69a3      	ldr	r3, [r4, #24]
   3953a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3953c:	07d6      	lsls	r6, r2, #31
   3953e:	f57f ae76 	bpl.w	3922e <pdn_interface_pdn_id_get+0x192>
   39542:	2606      	movs	r6, #6
   39544:	e765      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   39546:	4628      	mov	r0, r5
   39548:	f7e3 fe8c 	bl	1d264 <strlen>
   3954c:	4607      	mov	r7, r0
   3954e:	68e0      	ldr	r0, [r4, #12]
   39550:	300c      	adds	r0, #12
   39552:	f7e3 fe87 	bl	1d264 <strlen>
   39556:	4287      	cmp	r7, r0
   39558:	f47f ae05 	bne.w	39166 <pdn_interface_pdn_id_get+0xca>
   3955c:	68e1      	ldr	r1, [r4, #12]
   3955e:	4628      	mov	r0, r5
   39560:	310c      	adds	r1, #12
   39562:	f7e3 fe75 	bl	1d250 <strcmp>
   39566:	2800      	cmp	r0, #0
   39568:	f47f adfd 	bne.w	39166 <pdn_interface_pdn_id_get+0xca>
   3956c:	68e3      	ldr	r3, [r4, #12]
   3956e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39570:	0791      	lsls	r1, r2, #30
   39572:	f53f af4e 	bmi.w	39412 <pdn_interface_pdn_id_get+0x376>
   39576:	e5f6      	b.n	39166 <pdn_interface_pdn_id_get+0xca>
   39578:	4628      	mov	r0, r5
   3957a:	f7e3 fe73 	bl	1d264 <strlen>
   3957e:	4606      	mov	r6, r0
   39580:	6920      	ldr	r0, [r4, #16]
   39582:	300c      	adds	r0, #12
   39584:	f7e3 fe6e 	bl	1d264 <strlen>
   39588:	4286      	cmp	r6, r0
   3958a:	f47f adf2 	bne.w	39172 <pdn_interface_pdn_id_get+0xd6>
   3958e:	6921      	ldr	r1, [r4, #16]
   39590:	4628      	mov	r0, r5
   39592:	310c      	adds	r1, #12
   39594:	f7e3 fe5c 	bl	1d250 <strcmp>
   39598:	2800      	cmp	r0, #0
   3959a:	f47f adea 	bne.w	39172 <pdn_interface_pdn_id_get+0xd6>
   3959e:	6923      	ldr	r3, [r4, #16]
   395a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   395a2:	0792      	lsls	r2, r2, #30
   395a4:	d499      	bmi.n	394da <pdn_interface_pdn_id_get+0x43e>
   395a6:	e5e4      	b.n	39172 <pdn_interface_pdn_id_get+0xd6>
   395a8:	4628      	mov	r0, r5
   395aa:	f7e3 fe5b 	bl	1d264 <strlen>
   395ae:	4606      	mov	r6, r0
   395b0:	6960      	ldr	r0, [r4, #20]
   395b2:	300c      	adds	r0, #12
   395b4:	f7e3 fe56 	bl	1d264 <strlen>
   395b8:	4286      	cmp	r6, r0
   395ba:	f47f ade0 	bne.w	3917e <pdn_interface_pdn_id_get+0xe2>
   395be:	6961      	ldr	r1, [r4, #20]
   395c0:	4628      	mov	r0, r5
   395c2:	310c      	adds	r1, #12
   395c4:	f7e3 fe44 	bl	1d250 <strcmp>
   395c8:	2800      	cmp	r0, #0
   395ca:	f47f add8 	bne.w	3917e <pdn_interface_pdn_id_get+0xe2>
   395ce:	6963      	ldr	r3, [r4, #20]
   395d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   395d2:	0797      	lsls	r7, r2, #30
   395d4:	d49b      	bmi.n	3950e <pdn_interface_pdn_id_get+0x472>
   395d6:	e5d2      	b.n	3917e <pdn_interface_pdn_id_get+0xe2>
   395d8:	4628      	mov	r0, r5
   395da:	f7e3 fe43 	bl	1d264 <strlen>
   395de:	4606      	mov	r6, r0
   395e0:	69a0      	ldr	r0, [r4, #24]
   395e2:	300c      	adds	r0, #12
   395e4:	f7e3 fe3e 	bl	1d264 <strlen>
   395e8:	4286      	cmp	r6, r0
   395ea:	f47f adce 	bne.w	3918a <pdn_interface_pdn_id_get+0xee>
   395ee:	69a1      	ldr	r1, [r4, #24]
   395f0:	4628      	mov	r0, r5
   395f2:	310c      	adds	r1, #12
   395f4:	f7e3 fe2c 	bl	1d250 <strcmp>
   395f8:	2800      	cmp	r0, #0
   395fa:	f47f adc6 	bne.w	3918a <pdn_interface_pdn_id_get+0xee>
   395fe:	69a3      	ldr	r3, [r4, #24]
   39600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39602:	0796      	lsls	r6, r2, #30
   39604:	d49d      	bmi.n	39542 <pdn_interface_pdn_id_get+0x4a6>
   39606:	e5c0      	b.n	3918a <pdn_interface_pdn_id_get+0xee>
   39608:	4628      	mov	r0, r5
   3960a:	f7e3 fe2b 	bl	1d264 <strlen>
   3960e:	4606      	mov	r6, r0
   39610:	69e0      	ldr	r0, [r4, #28]
   39612:	300c      	adds	r0, #12
   39614:	f7e3 fe26 	bl	1d264 <strlen>
   39618:	4286      	cmp	r6, r0
   3961a:	f47f adbc 	bne.w	39196 <pdn_interface_pdn_id_get+0xfa>
   3961e:	69e1      	ldr	r1, [r4, #28]
   39620:	4628      	mov	r0, r5
   39622:	310c      	adds	r1, #12
   39624:	f7e3 fe14 	bl	1d250 <strcmp>
   39628:	2800      	cmp	r0, #0
   3962a:	f47f adb4 	bne.w	39196 <pdn_interface_pdn_id_get+0xfa>
   3962e:	69e3      	ldr	r3, [r4, #28]
   39630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39632:	0790      	lsls	r0, r2, #30
   39634:	f57f adaf 	bpl.w	39196 <pdn_interface_pdn_id_get+0xfa>
   39638:	2607      	movs	r6, #7
   3963a:	e6ea      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   3963c:	4628      	mov	r0, r5
   3963e:	f7e3 fe11 	bl	1d264 <strlen>
   39642:	4606      	mov	r6, r0
   39644:	6a20      	ldr	r0, [r4, #32]
   39646:	300c      	adds	r0, #12
   39648:	f7e3 fe0c 	bl	1d264 <strlen>
   3964c:	4286      	cmp	r6, r0
   3964e:	f47f ada8 	bne.w	391a2 <pdn_interface_pdn_id_get+0x106>
   39652:	6a21      	ldr	r1, [r4, #32]
   39654:	4628      	mov	r0, r5
   39656:	310c      	adds	r1, #12
   39658:	f7e3 fdfa 	bl	1d250 <strcmp>
   3965c:	2800      	cmp	r0, #0
   3965e:	f47f ada0 	bne.w	391a2 <pdn_interface_pdn_id_get+0x106>
   39662:	6a23      	ldr	r3, [r4, #32]
   39664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39666:	0791      	lsls	r1, r2, #30
   39668:	f57f ad9b 	bpl.w	391a2 <pdn_interface_pdn_id_get+0x106>
   3966c:	2608      	movs	r6, #8
   3966e:	e6d0      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   39670:	4628      	mov	r0, r5
   39672:	f7e3 fdf7 	bl	1d264 <strlen>
   39676:	4606      	mov	r6, r0
   39678:	69e0      	ldr	r0, [r4, #28]
   3967a:	300c      	adds	r0, #12
   3967c:	f7e3 fdf2 	bl	1d264 <strlen>
   39680:	4286      	cmp	r6, r0
   39682:	f47f adda 	bne.w	3923a <pdn_interface_pdn_id_get+0x19e>
   39686:	69e1      	ldr	r1, [r4, #28]
   39688:	4628      	mov	r0, r5
   3968a:	310c      	adds	r1, #12
   3968c:	f7e3 fde0 	bl	1d250 <strcmp>
   39690:	2800      	cmp	r0, #0
   39692:	f47f add2 	bne.w	3923a <pdn_interface_pdn_id_get+0x19e>
   39696:	69e3      	ldr	r3, [r4, #28]
   39698:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3969a:	07d0      	lsls	r0, r2, #31
   3969c:	d4cc      	bmi.n	39638 <pdn_interface_pdn_id_get+0x59c>
   3969e:	e5cc      	b.n	3923a <pdn_interface_pdn_id_get+0x19e>
   396a0:	4628      	mov	r0, r5
   396a2:	f7e3 fddf 	bl	1d264 <strlen>
   396a6:	4606      	mov	r6, r0
   396a8:	6a20      	ldr	r0, [r4, #32]
   396aa:	300c      	adds	r0, #12
   396ac:	f7e3 fdda 	bl	1d264 <strlen>
   396b0:	4286      	cmp	r6, r0
   396b2:	f47f adc8 	bne.w	39246 <pdn_interface_pdn_id_get+0x1aa>
   396b6:	6a21      	ldr	r1, [r4, #32]
   396b8:	4628      	mov	r0, r5
   396ba:	310c      	adds	r1, #12
   396bc:	f7e3 fdc8 	bl	1d250 <strcmp>
   396c0:	2800      	cmp	r0, #0
   396c2:	f47f adc0 	bne.w	39246 <pdn_interface_pdn_id_get+0x1aa>
   396c6:	6a23      	ldr	r3, [r4, #32]
   396c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   396ca:	07d1      	lsls	r1, r2, #31
   396cc:	d4ce      	bmi.n	3966c <pdn_interface_pdn_id_get+0x5d0>
   396ce:	e5ba      	b.n	39246 <pdn_interface_pdn_id_get+0x1aa>
   396d0:	4628      	mov	r0, r5
   396d2:	f7e3 fdc7 	bl	1d264 <strlen>
   396d6:	4606      	mov	r6, r0
   396d8:	68a0      	ldr	r0, [r4, #8]
   396da:	300c      	adds	r0, #12
   396dc:	f7e3 fdc2 	bl	1d264 <strlen>
   396e0:	4286      	cmp	r6, r0
   396e2:	f47f ad8c 	bne.w	391fe <pdn_interface_pdn_id_get+0x162>
   396e6:	68a1      	ldr	r1, [r4, #8]
   396e8:	4628      	mov	r0, r5
   396ea:	310c      	adds	r1, #12
   396ec:	f7e3 fdb0 	bl	1d250 <strcmp>
   396f0:	2800      	cmp	r0, #0
   396f2:	f47f ad84 	bne.w	391fe <pdn_interface_pdn_id_get+0x162>
   396f6:	68a3      	ldr	r3, [r4, #8]
   396f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   396fa:	07d0      	lsls	r0, r2, #31
   396fc:	f57f ad7f 	bpl.w	391fe <pdn_interface_pdn_id_get+0x162>
   39700:	2602      	movs	r6, #2
   39702:	e686      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   39704:	4628      	mov	r0, r5
   39706:	f7e3 fdad 	bl	1d264 <strlen>
   3970a:	4606      	mov	r6, r0
   3970c:	68a0      	ldr	r0, [r4, #8]
   3970e:	300c      	adds	r0, #12
   39710:	f7e3 fda8 	bl	1d264 <strlen>
   39714:	4286      	cmp	r6, r0
   39716:	f47f ad20 	bne.w	3915a <pdn_interface_pdn_id_get+0xbe>
   3971a:	68a1      	ldr	r1, [r4, #8]
   3971c:	4628      	mov	r0, r5
   3971e:	310c      	adds	r1, #12
   39720:	f7e3 fd96 	bl	1d250 <strcmp>
   39724:	2800      	cmp	r0, #0
   39726:	f47f ad18 	bne.w	3915a <pdn_interface_pdn_id_get+0xbe>
   3972a:	68a3      	ldr	r3, [r4, #8]
   3972c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3972e:	0790      	lsls	r0, r2, #30
   39730:	d4e6      	bmi.n	39700 <pdn_interface_pdn_id_get+0x664>
   39732:	e512      	b.n	3915a <pdn_interface_pdn_id_get+0xbe>
   39734:	200257f0 	.word	0x200257f0
   39738:	00047484 	.word	0x00047484
   3973c:	00047480 	.word	0x00047480
   39740:	00047494 	.word	0x00047494
   39744:	200257ec 	.word	0x200257ec
   39748:	4628      	mov	r0, r5
   3974a:	f7e3 fd8b 	bl	1d264 <strlen>
   3974e:	4606      	mov	r6, r0
   39750:	6860      	ldr	r0, [r4, #4]
   39752:	300c      	adds	r0, #12
   39754:	f7e3 fd86 	bl	1d264 <strlen>
   39758:	4286      	cmp	r6, r0
   3975a:	f47f acf8 	bne.w	3914e <pdn_interface_pdn_id_get+0xb2>
   3975e:	6861      	ldr	r1, [r4, #4]
   39760:	4628      	mov	r0, r5
   39762:	310c      	adds	r1, #12
   39764:	f7e3 fd74 	bl	1d250 <strcmp>
   39768:	2800      	cmp	r0, #0
   3976a:	f47f acf0 	bne.w	3914e <pdn_interface_pdn_id_get+0xb2>
   3976e:	6863      	ldr	r3, [r4, #4]
   39770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   39772:	0796      	lsls	r6, r2, #30
   39774:	f57f aceb 	bpl.w	3914e <pdn_interface_pdn_id_get+0xb2>
   39778:	2601      	movs	r6, #1
   3977a:	e64a      	b.n	39412 <pdn_interface_pdn_id_get+0x376>
   3977c:	4628      	mov	r0, r5
   3977e:	f7e3 fd71 	bl	1d264 <strlen>
   39782:	4606      	mov	r6, r0
   39784:	6860      	ldr	r0, [r4, #4]
   39786:	300c      	adds	r0, #12
   39788:	f7e3 fd6c 	bl	1d264 <strlen>
   3978c:	4286      	cmp	r6, r0
   3978e:	f47f ad30 	bne.w	391f2 <pdn_interface_pdn_id_get+0x156>
   39792:	6861      	ldr	r1, [r4, #4]
   39794:	4628      	mov	r0, r5
   39796:	310c      	adds	r1, #12
   39798:	f7e3 fd5a 	bl	1d250 <strcmp>
   3979c:	2800      	cmp	r0, #0
   3979e:	f47f ad28 	bne.w	391f2 <pdn_interface_pdn_id_get+0x156>
   397a2:	6863      	ldr	r3, [r4, #4]
   397a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   397a6:	07d6      	lsls	r6, r2, #31
   397a8:	d4e6      	bmi.n	39778 <pdn_interface_pdn_id_get+0x6dc>
   397aa:	e522      	b.n	391f2 <pdn_interface_pdn_id_get+0x156>
   397ac:	4608      	mov	r0, r1
   397ae:	f7e3 fd59 	bl	1d264 <strlen>
   397b2:	4606      	mov	r6, r0
   397b4:	6820      	ldr	r0, [r4, #0]
   397b6:	300c      	adds	r0, #12
   397b8:	f7e3 fd54 	bl	1d264 <strlen>
   397bc:	4286      	cmp	r6, r0
   397be:	f47f acc0 	bne.w	39142 <pdn_interface_pdn_id_get+0xa6>
   397c2:	6821      	ldr	r1, [r4, #0]
   397c4:	4628      	mov	r0, r5
   397c6:	310c      	adds	r1, #12
   397c8:	f7e3 fd42 	bl	1d250 <strcmp>
   397cc:	4606      	mov	r6, r0
   397ce:	2800      	cmp	r0, #0
   397d0:	f47f acb7 	bne.w	39142 <pdn_interface_pdn_id_get+0xa6>
   397d4:	6823      	ldr	r3, [r4, #0]
   397d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   397d8:	0797      	lsls	r7, r2, #30
   397da:	f53f ae1a 	bmi.w	39412 <pdn_interface_pdn_id_get+0x376>
   397de:	e4b0      	b.n	39142 <pdn_interface_pdn_id_get+0xa6>
   397e0:	4608      	mov	r0, r1
   397e2:	f7e3 fd3f 	bl	1d264 <strlen>
   397e6:	4606      	mov	r6, r0
   397e8:	6820      	ldr	r0, [r4, #0]
   397ea:	300c      	adds	r0, #12
   397ec:	f7e3 fd3a 	bl	1d264 <strlen>
   397f0:	4286      	cmp	r6, r0
   397f2:	f47f acf8 	bne.w	391e6 <pdn_interface_pdn_id_get+0x14a>
   397f6:	6821      	ldr	r1, [r4, #0]
   397f8:	4628      	mov	r0, r5
   397fa:	310c      	adds	r1, #12
   397fc:	f7e3 fd28 	bl	1d250 <strcmp>
   39800:	4606      	mov	r6, r0
   39802:	2800      	cmp	r0, #0
   39804:	f47f acef 	bne.w	391e6 <pdn_interface_pdn_id_get+0x14a>
   39808:	6823      	ldr	r3, [r4, #0]
   3980a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3980c:	07d7      	lsls	r7, r2, #31
   3980e:	f53f ae00 	bmi.w	39412 <pdn_interface_pdn_id_get+0x376>
   39812:	e4e8      	b.n	391e6 <pdn_interface_pdn_id_get+0x14a>
   39814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39818:	4770      	bx	lr
   3981a:	480b      	ldr	r0, [pc, #44]	; (39848 <pdn_interface_pdn_id_get+0x7ac>)
   3981c:	f7e3 fd22 	bl	1d264 <strlen>
   39820:	490a      	ldr	r1, [pc, #40]	; (3984c <pdn_interface_pdn_id_get+0x7b0>)
   39822:	4602      	mov	r2, r0
   39824:	4808      	ldr	r0, [pc, #32]	; (39848 <pdn_interface_pdn_id_get+0x7ac>)
   39826:	f00b fef8 	bl	4561a <strncmp>
   3982a:	b930      	cbnz	r0, 3983a <pdn_interface_pdn_id_get+0x79e>
   3982c:	2008      	movs	r0, #8
   3982e:	f7ef ff71 	bl	29714 <bsd_os_errno_set>
   39832:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   39836:	6858      	ldr	r0, [r3, #4]
   39838:	e47b      	b.n	39132 <pdn_interface_pdn_id_get+0x96>
   3983a:	2005      	movs	r0, #5
   3983c:	f7ef ff6a 	bl	29714 <bsd_os_errno_set>
   39840:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   39844:	6858      	ldr	r0, [r3, #4]
   39846:	e474      	b.n	39132 <pdn_interface_pdn_id_get+0x96>
   39848:	000474d8 	.word	0x000474d8
   3984c:	200257f0 	.word	0x200257f0

00039850 <bsd_platform_error_handler>:
   39850:	b508      	push	{r3, lr}
   39852:	f008 f838 	bl	418c6 <bsd_recoverable_error_handler>
   39856:	bd08      	pop	{r3, pc}

00039858 <bsd_init>:
   39858:	b160      	cbz	r0, 39874 <bsd_init+0x1c>
   3985a:	b510      	push	{r4, lr}
   3985c:	4c07      	ldr	r4, [pc, #28]	; (3987c <bsd_init+0x24>)
   3985e:	7823      	ldrb	r3, [r4, #0]
   39860:	b92b      	cbnz	r3, 3986e <bsd_init+0x16>
   39862:	f000 f829 	bl	398b8 <bsd_platform_init>
   39866:	b908      	cbnz	r0, 3986c <bsd_init+0x14>
   39868:	2301      	movs	r3, #1
   3986a:	7023      	strb	r3, [r4, #0]
   3986c:	bd10      	pop	{r4, pc}
   3986e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39872:	bd10      	pop	{r4, pc}
   39874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39878:	4770      	bx	lr
   3987a:	bf00      	nop
   3987c:	2002cb15 	.word	0x2002cb15

00039880 <bsd_shutdown>:
   39880:	b510      	push	{r4, lr}
   39882:	4c05      	ldr	r4, [pc, #20]	; (39898 <bsd_shutdown+0x18>)
   39884:	7823      	ldrb	r3, [r4, #0]
   39886:	b123      	cbz	r3, 39892 <bsd_shutdown+0x12>
   39888:	f000 f89a 	bl	399c0 <bsd_platform_shutdown>
   3988c:	b900      	cbnz	r0, 39890 <bsd_shutdown+0x10>
   3988e:	7020      	strb	r0, [r4, #0]
   39890:	bd10      	pop	{r4, pc}
   39892:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39896:	bd10      	pop	{r4, pc}
   39898:	2002cb15 	.word	0x2002cb15

0003989c <unimplemented_method>:
   3989c:	b40f      	push	{r0, r1, r2, r3}
   3989e:	b508      	push	{r3, lr}
   398a0:	202d      	movs	r0, #45	; 0x2d
   398a2:	f7ef ff37 	bl	29714 <bsd_os_errno_set>
   398a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   398aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   398ae:	b004      	add	sp, #16
   398b0:	4770      	bx	lr
   398b2:	bf00      	nop

000398b4 <rpc_transport_ipc_fault_handler>:
   398b4:	f7ff bfcc 	b.w	39850 <bsd_platform_error_handler>

000398b8 <bsd_platform_init>:
   398b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   398ba:	f04f 0c00 	mov.w	ip, #0
   398be:	f247 0660 	movw	r6, #28768	; 0x7060
   398c2:	f24b 0260 	movw	r2, #45152	; 0xb060
   398c6:	6843      	ldr	r3, [r0, #4]
   398c8:	4d3a      	ldr	r5, [pc, #232]	; (399b4 <bsd_platform_init+0xfc>)
   398ca:	4607      	mov	r7, r0
   398cc:	602b      	str	r3, [r5, #0]
   398ce:	7801      	ldrb	r1, [r0, #0]
   398d0:	2006      	movs	r0, #6
   398d2:	4561      	cmp	r1, ip
   398d4:	bf08      	it	eq
   398d6:	4632      	moveq	r2, r6
   398d8:	4413      	add	r3, r2
   398da:	4c37      	ldr	r4, [pc, #220]	; (399b8 <bsd_platform_init+0x100>)
   398dc:	60ab      	str	r3, [r5, #8]
   398de:	68b9      	ldr	r1, [r7, #8]
   398e0:	6063      	str	r3, [r4, #4]
   398e2:	4b36      	ldr	r3, [pc, #216]	; (399bc <bsd_platform_init+0x104>)
   398e4:	b093      	sub	sp, #76	; 0x4c
   398e6:	606a      	str	r2, [r5, #4]
   398e8:	f8a4 c000 	strh.w	ip, [r4]
   398ec:	1a8a      	subs	r2, r1, r2
   398ee:	60ea      	str	r2, [r5, #12]
   398f0:	60a2      	str	r2, [r4, #8]
   398f2:	81a0      	strh	r0, [r4, #12]
   398f4:	6123      	str	r3, [r4, #16]
   398f6:	f001 f95b 	bl	3abb0 <nrf_mem_init>
   398fa:	2800      	cmp	r0, #0
   398fc:	d156      	bne.n	399ac <bsd_platform_init+0xf4>
   398fe:	4621      	mov	r1, r4
   39900:	a801      	add	r0, sp, #4
   39902:	f001 f9c9 	bl	3ac98 <nrf_mem_register>
   39906:	2800      	cmp	r0, #0
   39908:	d150      	bne.n	399ac <bsd_platform_init+0xf4>
   3990a:	f7f0 f81b 	bl	29944 <bsd_os_init>
   3990e:	f7fd fbbd 	bl	3708c <rpc_framework_init>
   39912:	2800      	cmp	r0, #0
   39914:	d14a      	bne.n	399ac <bsd_platform_init+0xf4>
   39916:	783a      	ldrb	r2, [r7, #0]
   39918:	682b      	ldr	r3, [r5, #0]
   3991a:	bb32      	cbnz	r2, 3996a <bsd_platform_init+0xb2>
   3991c:	4606      	mov	r6, r0
   3991e:	2220      	movs	r2, #32
   39920:	2408      	movs	r4, #8
   39922:	2500      	movs	r5, #0
   39924:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   39928:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   3992c:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   39930:	4411      	add	r1, r2
   39932:	9302      	str	r3, [sp, #8]
   39934:	e9cd 6008 	strd	r6, r0, [sp, #32]
   39938:	910c      	str	r1, [sp, #48]	; 0x30
   3993a:	9203      	str	r2, [sp, #12]
   3993c:	f103 0140 	add.w	r1, r3, #64	; 0x40
   39940:	9205      	str	r2, [sp, #20]
   39942:	9207      	str	r2, [sp, #28]
   39944:	eb0d 0004 	add.w	r0, sp, r4
   39948:	189a      	adds	r2, r3, r2
   3994a:	3360      	adds	r3, #96	; 0x60
   3994c:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   39950:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   39954:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   39958:	940f      	str	r4, [sp, #60]	; 0x3c
   3995a:	9104      	str	r1, [sp, #16]
   3995c:	9206      	str	r2, [sp, #24]
   3995e:	930a      	str	r3, [sp, #40]	; 0x28
   39960:	f7fa fab6 	bl	33ed0 <rpc_transport_ipc_init>
   39964:	b128      	cbz	r0, 39972 <bsd_platform_init+0xba>
   39966:	b013      	add	sp, #76	; 0x4c
   39968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3996a:	441e      	add	r6, r3
   3996c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   39970:	e7d5      	b.n	3991e <bsd_platform_init+0x66>
   39972:	f001 fde1 	bl	3b538 <interface_init>
   39976:	b9c8      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   39978:	f7fe fcc8 	bl	3830c <at_interface_init>
   3997c:	b9b0      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   3997e:	f7fb fe11 	bl	355a4 <ip_interface_init>
   39982:	b998      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   39984:	f7fb f8bc 	bl	34b00 <tls_interface_init>
   39988:	b980      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   3998a:	f001 fae1 	bl	3af50 <mfu_interface_init>
   3998e:	b968      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   39990:	f7fe feec 	bl	3876c <pdn_interface_init>
   39994:	b950      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   39996:	f7fe fae9 	bl	37f6c <gnss_interface_init>
   3999a:	b938      	cbnz	r0, 399ac <bsd_platform_init+0xf4>
   3999c:	f7f9 fcc8 	bl	33330 <logobj_interface_init>
   399a0:	1b40      	subs	r0, r0, r5
   399a2:	bf18      	it	ne
   399a4:	2001      	movne	r0, #1
   399a6:	4240      	negs	r0, r0
   399a8:	b013      	add	sp, #76	; 0x4c
   399aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   399ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399b0:	b013      	add	sp, #76	; 0x4c
   399b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   399b4:	2002592c 	.word	0x2002592c
   399b8:	20025918 	.word	0x20025918
   399bc:	0004762c 	.word	0x0004762c

000399c0 <bsd_platform_shutdown>:
   399c0:	b570      	push	{r4, r5, r6, lr}
   399c2:	b084      	sub	sp, #16
   399c4:	f001 ffa2 	bl	3b90c <interface_shutdown>
   399c8:	f7fe faf2 	bl	37fb0 <gnss_interface_deinit>
   399cc:	2800      	cmp	r0, #0
   399ce:	bf14      	ite	ne
   399d0:	2416      	movne	r4, #22
   399d2:	2400      	moveq	r4, #0
   399d4:	f7fb fe04 	bl	355e0 <ip_interface_deinit>
   399d8:	2800      	cmp	r0, #0
   399da:	bf18      	it	ne
   399dc:	2416      	movne	r4, #22
   399de:	f7f9 fcc5 	bl	3336c <logobj_interface_deinit>
   399e2:	2800      	cmp	r0, #0
   399e4:	bf18      	it	ne
   399e6:	2416      	movne	r4, #22
   399e8:	f001 face 	bl	3af88 <mfu_interface_deinit>
   399ec:	2800      	cmp	r0, #0
   399ee:	bf18      	it	ne
   399f0:	2416      	movne	r4, #22
   399f2:	f7fe fedb 	bl	387ac <pdn_interface_deinit>
   399f6:	2800      	cmp	r0, #0
   399f8:	bf18      	it	ne
   399fa:	2416      	movne	r4, #22
   399fc:	f7fb f888 	bl	34b10 <tls_interface_deinit>
   39a00:	2800      	cmp	r0, #0
   39a02:	bf18      	it	ne
   39a04:	2416      	movne	r4, #22
   39a06:	f7fe fc8b 	bl	38320 <at_interface_deinit>
   39a0a:	2800      	cmp	r0, #0
   39a0c:	bf18      	it	ne
   39a0e:	2416      	movne	r4, #22
   39a10:	f7fa ffac 	bl	3496c <rpc_transport_ipc_request_shutdown>
   39a14:	f247 5330 	movw	r3, #30000	; 0x7530
   39a18:	2564      	movs	r5, #100	; 0x64
   39a1a:	9301      	str	r3, [sp, #4]
   39a1c:	e00b      	b.n	39a36 <bsd_platform_shutdown+0x76>
   39a1e:	2b00      	cmp	r3, #0
   39a20:	dd0e      	ble.n	39a40 <bsd_platform_shutdown+0x80>
   39a22:	a903      	add	r1, sp, #12
   39a24:	9503      	str	r5, [sp, #12]
   39a26:	f7ef fdb5 	bl	29594 <bsd_os_timedwait>
   39a2a:	9a03      	ldr	r2, [sp, #12]
   39a2c:	9b01      	ldr	r3, [sp, #4]
   39a2e:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   39a32:	1a9b      	subs	r3, r3, r2
   39a34:	9301      	str	r3, [sp, #4]
   39a36:	f7fa fdab 	bl	34590 <rpc_transport_ipc_shutdown_done>
   39a3a:	9b01      	ldr	r3, [sp, #4]
   39a3c:	2800      	cmp	r0, #0
   39a3e:	d0ee      	beq.n	39a1e <bsd_platform_shutdown+0x5e>
   39a40:	2b00      	cmp	r3, #0
   39a42:	d045      	beq.n	39ad0 <bsd_platform_shutdown+0x110>
   39a44:	f64b 3380 	movw	r3, #48000	; 0xbb80
   39a48:	4d23      	ldr	r5, [pc, #140]	; (39ad8 <bsd_platform_shutdown+0x118>)
   39a4a:	9301      	str	r3, [sp, #4]
   39a4c:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   39a50:	2b01      	cmp	r3, #1
   39a52:	d112      	bne.n	39a7a <bsd_platform_shutdown+0xba>
   39a54:	2664      	movs	r6, #100	; 0x64
   39a56:	e003      	b.n	39a60 <bsd_platform_shutdown+0xa0>
   39a58:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   39a5c:	2b01      	cmp	r3, #1
   39a5e:	d10c      	bne.n	39a7a <bsd_platform_shutdown+0xba>
   39a60:	a903      	add	r1, sp, #12
   39a62:	2000      	movs	r0, #0
   39a64:	9603      	str	r6, [sp, #12]
   39a66:	f7ef fd95 	bl	29594 <bsd_os_timedwait>
   39a6a:	9a03      	ldr	r2, [sp, #12]
   39a6c:	9b01      	ldr	r3, [sp, #4]
   39a6e:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   39a72:	1a9b      	subs	r3, r3, r2
   39a74:	2b00      	cmp	r3, #0
   39a76:	9301      	str	r3, [sp, #4]
   39a78:	dcee      	bgt.n	39a58 <bsd_platform_shutdown+0x98>
   39a7a:	230a      	movs	r3, #10
   39a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   39a80:	2101      	movs	r1, #1
   39a82:	4a15      	ldr	r2, [pc, #84]	; (39ad8 <bsd_platform_shutdown+0x118>)
   39a84:	9001      	str	r0, [sp, #4]
   39a86:	f8c2 1614 	str.w	r1, [r2, #1556]	; 0x614
   39a8a:	9302      	str	r3, [sp, #8]
   39a8c:	9b02      	ldr	r3, [sp, #8]
   39a8e:	b12b      	cbz	r3, 39a9c <bsd_platform_shutdown+0xdc>
   39a90:	9b02      	ldr	r3, [sp, #8]
   39a92:	3b01      	subs	r3, #1
   39a94:	9302      	str	r3, [sp, #8]
   39a96:	9b02      	ldr	r3, [sp, #8]
   39a98:	2b00      	cmp	r3, #0
   39a9a:	d1f9      	bne.n	39a90 <bsd_platform_shutdown+0xd0>
   39a9c:	2200      	movs	r2, #0
   39a9e:	4b0e      	ldr	r3, [pc, #56]	; (39ad8 <bsd_platform_shutdown+0x118>)
   39aa0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   39aa4:	a901      	add	r1, sp, #4
   39aa6:	2000      	movs	r0, #0
   39aa8:	f7ef fd74 	bl	29594 <bsd_os_timedwait>
   39aac:	9b01      	ldr	r3, [sp, #4]
   39aae:	2b00      	cmp	r3, #0
   39ab0:	dcf8      	bgt.n	39aa4 <bsd_platform_shutdown+0xe4>
   39ab2:	2200      	movs	r2, #0
   39ab4:	2101      	movs	r1, #1
   39ab6:	4620      	mov	r0, r4
   39ab8:	4b07      	ldr	r3, [pc, #28]	; (39ad8 <bsd_platform_shutdown+0x118>)
   39aba:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   39abe:	9203      	str	r2, [sp, #12]
   39ac0:	f8c3 1610 	str.w	r1, [r3, #1552]	; 0x610
   39ac4:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
   39ac8:	9303      	str	r3, [sp, #12]
   39aca:	9b03      	ldr	r3, [sp, #12]
   39acc:	b004      	add	sp, #16
   39ace:	bd70      	pop	{r4, r5, r6, pc}
   39ad0:	f7fa fa32 	bl	33f38 <rpc_transport_ipc_shutdown>
   39ad4:	e7b6      	b.n	39a44 <bsd_platform_shutdown+0x84>
   39ad6:	bf00      	nop
   39ad8:	40005000 	.word	0x40005000

00039adc <bsd_platform_af_method_table_get>:
   39adc:	2805      	cmp	r0, #5
   39ade:	d02a      	beq.n	39b36 <bsd_platform_af_method_table_get+0x5a>
   39ae0:	b508      	push	{r3, lr}
   39ae2:	d914      	bls.n	39b0e <bsd_platform_af_method_table_get+0x32>
   39ae4:	280a      	cmp	r0, #10
   39ae6:	d016      	beq.n	39b16 <bsd_platform_af_method_table_get+0x3a>
   39ae8:	2866      	cmp	r0, #102	; 0x66
   39aea:	d11f      	bne.n	39b2c <bsd_platform_af_method_table_get+0x50>
   39aec:	f240 2302 	movw	r3, #514	; 0x202
   39af0:	429a      	cmp	r2, r3
   39af2:	d035      	beq.n	39b60 <bsd_platform_af_method_table_get+0x84>
   39af4:	f240 2305 	movw	r3, #517	; 0x205
   39af8:	429a      	cmp	r2, r3
   39afa:	d035      	beq.n	39b68 <bsd_platform_af_method_table_get+0x8c>
   39afc:	f240 2301 	movw	r3, #513	; 0x201
   39b00:	429a      	cmp	r2, r3
   39b02:	d02f      	beq.n	39b64 <bsd_platform_af_method_table_get+0x88>
   39b04:	202b      	movs	r0, #43	; 0x2b
   39b06:	f7ef fe05 	bl	29714 <bsd_os_errno_set>
   39b0a:	2000      	movs	r0, #0
   39b0c:	bd08      	pop	{r3, pc}
   39b0e:	2801      	cmp	r0, #1
   39b10:	d016      	beq.n	39b40 <bsd_platform_af_method_table_get+0x64>
   39b12:	2802      	cmp	r0, #2
   39b14:	d10a      	bne.n	39b2c <bsd_platform_af_method_table_get+0x50>
   39b16:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   39b1a:	d21a      	bcs.n	39b52 <bsd_platform_af_method_table_get+0x76>
   39b1c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   39b20:	d21a      	bcs.n	39b58 <bsd_platform_af_method_table_get+0x7c>
   39b22:	3a01      	subs	r2, #1
   39b24:	2a01      	cmp	r2, #1
   39b26:	d8ed      	bhi.n	39b04 <bsd_platform_af_method_table_get+0x28>
   39b28:	4810      	ldr	r0, [pc, #64]	; (39b6c <bsd_platform_af_method_table_get+0x90>)
   39b2a:	bd08      	pop	{r3, pc}
   39b2c:	2016      	movs	r0, #22
   39b2e:	f7ef fdf1 	bl	29714 <bsd_os_errno_set>
   39b32:	2000      	movs	r0, #0
   39b34:	bd08      	pop	{r3, pc}
   39b36:	2903      	cmp	r1, #3
   39b38:	480d      	ldr	r0, [pc, #52]	; (39b70 <bsd_platform_af_method_table_get+0x94>)
   39b3a:	bf18      	it	ne
   39b3c:	2000      	movne	r0, #0
   39b3e:	4770      	bx	lr
   39b40:	f240 2303 	movw	r3, #515	; 0x203
   39b44:	429a      	cmp	r2, r3
   39b46:	d009      	beq.n	39b5c <bsd_platform_af_method_table_get+0x80>
   39b48:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   39b4c:	d1da      	bne.n	39b04 <bsd_platform_af_method_table_get+0x28>
   39b4e:	4809      	ldr	r0, [pc, #36]	; (39b74 <bsd_platform_af_method_table_get+0x98>)
   39b50:	bd08      	pop	{r3, pc}
   39b52:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   39b56:	d1d5      	bne.n	39b04 <bsd_platform_af_method_table_get+0x28>
   39b58:	4807      	ldr	r0, [pc, #28]	; (39b78 <bsd_platform_af_method_table_get+0x9c>)
   39b5a:	bd08      	pop	{r3, pc}
   39b5c:	4807      	ldr	r0, [pc, #28]	; (39b7c <bsd_platform_af_method_table_get+0xa0>)
   39b5e:	bd08      	pop	{r3, pc}
   39b60:	4807      	ldr	r0, [pc, #28]	; (39b80 <bsd_platform_af_method_table_get+0xa4>)
   39b62:	bd08      	pop	{r3, pc}
   39b64:	4807      	ldr	r0, [pc, #28]	; (39b84 <bsd_platform_af_method_table_get+0xa8>)
   39b66:	bd08      	pop	{r3, pc}
   39b68:	4807      	ldr	r0, [pc, #28]	; (39b88 <bsd_platform_af_method_table_get+0xac>)
   39b6a:	bd08      	pop	{r3, pc}
   39b6c:	00047514 	.word	0x00047514
   39b70:	00047604 	.word	0x00047604
   39b74:	000475b4 	.word	0x000475b4
   39b78:	0004753c 	.word	0x0004753c
   39b7c:	00047564 	.word	0x00047564
   39b80:	0004758c 	.word	0x0004758c
   39b84:	000474ec 	.word	0x000474ec
   39b88:	000475dc 	.word	0x000475dc

00039b8c <bsd_platform_fd_method_table_get>:
   39b8c:	b538      	push	{r3, r4, r5, lr}
   39b8e:	4605      	mov	r5, r0
   39b90:	f001 fe04 	bl	3b79c <interface_socket_from_handle_get>
   39b94:	4604      	mov	r4, r0
   39b96:	b960      	cbnz	r0, 39bb2 <bsd_platform_fd_method_table_get+0x26>
   39b98:	4b2c      	ldr	r3, [pc, #176]	; (39c4c <bsd_platform_fd_method_table_get+0xc0>)
   39b9a:	429d      	cmp	r5, r3
   39b9c:	d02f      	beq.n	39bfe <bsd_platform_fd_method_table_get+0x72>
   39b9e:	0c2b      	lsrs	r3, r5, #16
   39ba0:	4a2b      	ldr	r2, [pc, #172]	; (39c50 <bsd_platform_fd_method_table_get+0xc4>)
   39ba2:	041b      	lsls	r3, r3, #16
   39ba4:	4293      	cmp	r3, r2
   39ba6:	d03d      	beq.n	39c24 <bsd_platform_fd_method_table_get+0x98>
   39ba8:	4b2a      	ldr	r3, [pc, #168]	; (39c54 <bsd_platform_fd_method_table_get+0xc8>)
   39baa:	429d      	cmp	r5, r3
   39bac:	d149      	bne.n	39c42 <bsd_platform_fd_method_table_get+0xb6>
   39bae:	482a      	ldr	r0, [pc, #168]	; (39c58 <bsd_platform_fd_method_table_get+0xcc>)
   39bb0:	bd38      	pop	{r3, r4, r5, pc}
   39bb2:	68c3      	ldr	r3, [r0, #12]
   39bb4:	6942      	ldr	r2, [r0, #20]
   39bb6:	2b05      	cmp	r3, #5
   39bb8:	d036      	beq.n	39c28 <bsd_platform_fd_method_table_get+0x9c>
   39bba:	d911      	bls.n	39be0 <bsd_platform_fd_method_table_get+0x54>
   39bbc:	2b0a      	cmp	r3, #10
   39bbe:	d013      	beq.n	39be8 <bsd_platform_fd_method_table_get+0x5c>
   39bc0:	2b66      	cmp	r3, #102	; 0x66
   39bc2:	d11e      	bne.n	39c02 <bsd_platform_fd_method_table_get+0x76>
   39bc4:	f240 2302 	movw	r3, #514	; 0x202
   39bc8:	429a      	cmp	r2, r3
   39bca:	d02b      	beq.n	39c24 <bsd_platform_fd_method_table_get+0x98>
   39bcc:	f240 2305 	movw	r3, #517	; 0x205
   39bd0:	429a      	cmp	r2, r3
   39bd2:	d02f      	beq.n	39c34 <bsd_platform_fd_method_table_get+0xa8>
   39bd4:	f240 2301 	movw	r3, #513	; 0x201
   39bd8:	429a      	cmp	r2, r3
   39bda:	d11e      	bne.n	39c1a <bsd_platform_fd_method_table_get+0x8e>
   39bdc:	481f      	ldr	r0, [pc, #124]	; (39c5c <bsd_platform_fd_method_table_get+0xd0>)
   39bde:	bd38      	pop	{r3, r4, r5, pc}
   39be0:	2b01      	cmp	r3, #1
   39be2:	d013      	beq.n	39c0c <bsd_platform_fd_method_table_get+0x80>
   39be4:	2b02      	cmp	r3, #2
   39be6:	d10c      	bne.n	39c02 <bsd_platform_fd_method_table_get+0x76>
   39be8:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   39bec:	d224      	bcs.n	39c38 <bsd_platform_fd_method_table_get+0xac>
   39bee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   39bf2:	d224      	bcs.n	39c3e <bsd_platform_fd_method_table_get+0xb2>
   39bf4:	3a01      	subs	r2, #1
   39bf6:	2a01      	cmp	r2, #1
   39bf8:	d80f      	bhi.n	39c1a <bsd_platform_fd_method_table_get+0x8e>
   39bfa:	4819      	ldr	r0, [pc, #100]	; (39c60 <bsd_platform_fd_method_table_get+0xd4>)
   39bfc:	bd38      	pop	{r3, r4, r5, pc}
   39bfe:	4819      	ldr	r0, [pc, #100]	; (39c64 <bsd_platform_fd_method_table_get+0xd8>)
   39c00:	bd38      	pop	{r3, r4, r5, pc}
   39c02:	2016      	movs	r0, #22
   39c04:	f7ef fd86 	bl	29714 <bsd_os_errno_set>
   39c08:	2000      	movs	r0, #0
   39c0a:	bd38      	pop	{r3, r4, r5, pc}
   39c0c:	f240 2303 	movw	r3, #515	; 0x203
   39c10:	429a      	cmp	r2, r3
   39c12:	d0f4      	beq.n	39bfe <bsd_platform_fd_method_table_get+0x72>
   39c14:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   39c18:	d0c9      	beq.n	39bae <bsd_platform_fd_method_table_get+0x22>
   39c1a:	202b      	movs	r0, #43	; 0x2b
   39c1c:	f7ef fd7a 	bl	29714 <bsd_os_errno_set>
   39c20:	2000      	movs	r0, #0
   39c22:	bd38      	pop	{r3, r4, r5, pc}
   39c24:	4810      	ldr	r0, [pc, #64]	; (39c68 <bsd_platform_fd_method_table_get+0xdc>)
   39c26:	bd38      	pop	{r3, r4, r5, pc}
   39c28:	6903      	ldr	r3, [r0, #16]
   39c2a:	4810      	ldr	r0, [pc, #64]	; (39c6c <bsd_platform_fd_method_table_get+0xe0>)
   39c2c:	2b03      	cmp	r3, #3
   39c2e:	bf18      	it	ne
   39c30:	2000      	movne	r0, #0
   39c32:	bd38      	pop	{r3, r4, r5, pc}
   39c34:	480e      	ldr	r0, [pc, #56]	; (39c70 <bsd_platform_fd_method_table_get+0xe4>)
   39c36:	bd38      	pop	{r3, r4, r5, pc}
   39c38:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   39c3c:	d1ed      	bne.n	39c1a <bsd_platform_fd_method_table_get+0x8e>
   39c3e:	480d      	ldr	r0, [pc, #52]	; (39c74 <bsd_platform_fd_method_table_get+0xe8>)
   39c40:	bd38      	pop	{r3, r4, r5, pc}
   39c42:	2009      	movs	r0, #9
   39c44:	f7ef fd66 	bl	29714 <bsd_os_errno_set>
   39c48:	4620      	mov	r0, r4
   39c4a:	bd38      	pop	{r3, r4, r5, pc}
   39c4c:	49765432 	.word	0x49765432
   39c50:	789a0000 	.word	0x789a0000
   39c54:	49765443 	.word	0x49765443
   39c58:	000475b4 	.word	0x000475b4
   39c5c:	000474ec 	.word	0x000474ec
   39c60:	00047514 	.word	0x00047514
   39c64:	00047564 	.word	0x00047564
   39c68:	0004758c 	.word	0x0004758c
   39c6c:	00047604 	.word	0x00047604
   39c70:	000475dc 	.word	0x000475dc
   39c74:	0004753c 	.word	0x0004753c

00039c78 <bsd_platform_getaddrinfo>:
   39c78:	f7fc bdf6 	b.w	36868 <ip_interface_getaddrinfo>

00039c7c <bsd_platform_freeaddrinfo>:
   39c7c:	f7fc bef2 	b.w	36a64 <ip_interface_freeaddrinfo>

00039c80 <bsd_platform_poll>:
   39c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39c84:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   39c88:	b083      	sub	sp, #12
   39c8a:	9200      	str	r2, [sp, #0]
   39c8c:	2800      	cmp	r0, #0
   39c8e:	d048      	beq.n	39d22 <bsd_platform_poll+0xa2>
   39c90:	1e4b      	subs	r3, r1, #1
   39c92:	2b08      	cmp	r3, #8
   39c94:	d845      	bhi.n	39d22 <bsd_platform_poll+0xa2>
   39c96:	4680      	mov	r8, r0
   39c98:	4605      	mov	r5, r0
   39c9a:	2400      	movs	r4, #0
   39c9c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   39ca0:	88ab      	ldrh	r3, [r5, #4]
   39ca2:	6828      	ldr	r0, [r5, #0]
   39ca4:	f003 0303 	and.w	r3, r3, #3
   39ca8:	a901      	add	r1, sp, #4
   39caa:	f043 061c 	orr.w	r6, r3, #28
   39cae:	f001 fd83 	bl	3b7b8 <interface_socket_event_get>
   39cb2:	9b01      	ldr	r3, [sp, #4]
   39cb4:	3508      	adds	r5, #8
   39cb6:	4033      	ands	r3, r6
   39cb8:	f825 3c02 	strh.w	r3, [r5, #-2]
   39cbc:	b103      	cbz	r3, 39cc0 <bsd_platform_poll+0x40>
   39cbe:	3401      	adds	r4, #1
   39cc0:	42af      	cmp	r7, r5
   39cc2:	d1ed      	bne.n	39ca0 <bsd_platform_poll+0x20>
   39cc4:	bb9c      	cbnz	r4, 39d2e <bsd_platform_poll+0xae>
   39cc6:	4669      	mov	r1, sp
   39cc8:	4640      	mov	r0, r8
   39cca:	f7ef fc63 	bl	29594 <bsd_os_timedwait>
   39cce:	4607      	mov	r7, r0
   39cd0:	b108      	cbz	r0, 39cd6 <bsd_platform_poll+0x56>
   39cd2:	283c      	cmp	r0, #60	; 0x3c
   39cd4:	d11d      	bne.n	39d12 <bsd_platform_poll+0x92>
   39cd6:	46c1      	mov	r9, r8
   39cd8:	2600      	movs	r6, #0
   39cda:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   39cde:	f8d9 0000 	ldr.w	r0, [r9]
   39ce2:	f003 0303 	and.w	r3, r3, #3
   39ce6:	a901      	add	r1, sp, #4
   39ce8:	f043 041c 	orr.w	r4, r3, #28
   39cec:	f001 fd64 	bl	3b7b8 <interface_socket_event_get>
   39cf0:	9b01      	ldr	r3, [sp, #4]
   39cf2:	f109 0908 	add.w	r9, r9, #8
   39cf6:	4023      	ands	r3, r4
   39cf8:	f829 3c02 	strh.w	r3, [r9, #-2]
   39cfc:	b103      	cbz	r3, 39d00 <bsd_platform_poll+0x80>
   39cfe:	3601      	adds	r6, #1
   39d00:	454d      	cmp	r5, r9
   39d02:	d1ea      	bne.n	39cda <bsd_platform_poll+0x5a>
   39d04:	b90e      	cbnz	r6, 39d0a <bsd_platform_poll+0x8a>
   39d06:	2f00      	cmp	r7, #0
   39d08:	d0dd      	beq.n	39cc6 <bsd_platform_poll+0x46>
   39d0a:	4630      	mov	r0, r6
   39d0c:	b003      	add	sp, #12
   39d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39d12:	2023      	movs	r0, #35	; 0x23
   39d14:	f7ef fcfe 	bl	29714 <bsd_os_errno_set>
   39d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39d1c:	b003      	add	sp, #12
   39d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39d22:	2016      	movs	r0, #22
   39d24:	f7ef fcf6 	bl	29714 <bsd_os_errno_set>
   39d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39d2c:	e7ee      	b.n	39d0c <bsd_platform_poll+0x8c>
   39d2e:	4620      	mov	r0, r4
   39d30:	e7ec      	b.n	39d0c <bsd_platform_poll+0x8c>
   39d32:	bf00      	nop

00039d34 <bsd_platform_fcntl>:
   39d34:	b508      	push	{r3, lr}
   39d36:	4b06      	ldr	r3, [pc, #24]	; (39d50 <bsd_platform_fcntl+0x1c>)
   39d38:	4298      	cmp	r0, r3
   39d3a:	d003      	beq.n	39d44 <bsd_platform_fcntl+0x10>
   39d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   39d40:	f001 be42 	b.w	3b9c8 <interface_socket_fcntl>
   39d44:	202d      	movs	r0, #45	; 0x2d
   39d46:	f7ef fce5 	bl	29714 <bsd_os_errno_set>
   39d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39d4e:	bd08      	pop	{r3, pc}
   39d50:	49765432 	.word	0x49765432

00039d54 <linked_list_init>:
   39d54:	b128      	cbz	r0, 39d62 <linked_list_init+0xe>
   39d56:	2300      	movs	r3, #0
   39d58:	6003      	str	r3, [r0, #0]
   39d5a:	e9c0 3301 	strd	r3, r3, [r0, #4]
   39d5e:	4618      	mov	r0, r3
   39d60:	4770      	bx	lr
   39d62:	2007      	movs	r0, #7
   39d64:	4770      	bx	lr
   39d66:	bf00      	nop

00039d68 <linked_list_push>:
   39d68:	6802      	ldr	r2, [r0, #0]
   39d6a:	4603      	mov	r3, r0
   39d6c:	3201      	adds	r2, #1
   39d6e:	d00e      	beq.n	39d8e <linked_list_push+0x26>
   39d70:	2200      	movs	r2, #0
   39d72:	600a      	str	r2, [r1, #0]
   39d74:	6802      	ldr	r2, [r0, #0]
   39d76:	b13a      	cbz	r2, 39d88 <linked_list_push+0x20>
   39d78:	6882      	ldr	r2, [r0, #8]
   39d7a:	6011      	str	r1, [r2, #0]
   39d7c:	6081      	str	r1, [r0, #8]
   39d7e:	681a      	ldr	r2, [r3, #0]
   39d80:	2000      	movs	r0, #0
   39d82:	3201      	adds	r2, #1
   39d84:	601a      	str	r2, [r3, #0]
   39d86:	4770      	bx	lr
   39d88:	e9c0 1101 	strd	r1, r1, [r0, #4]
   39d8c:	e7f7      	b.n	39d7e <linked_list_push+0x16>
   39d8e:	2004      	movs	r0, #4
   39d90:	4770      	bx	lr
   39d92:	bf00      	nop

00039d94 <linked_list_pop>:
   39d94:	4603      	mov	r3, r0
   39d96:	6800      	ldr	r0, [r0, #0]
   39d98:	b128      	cbz	r0, 39da6 <linked_list_pop+0x12>
   39d9a:	6858      	ldr	r0, [r3, #4]
   39d9c:	681a      	ldr	r2, [r3, #0]
   39d9e:	6801      	ldr	r1, [r0, #0]
   39da0:	3a01      	subs	r2, #1
   39da2:	6059      	str	r1, [r3, #4]
   39da4:	601a      	str	r2, [r3, #0]
   39da6:	4770      	bx	lr

00039da8 <linked_list_peek>:
   39da8:	6803      	ldr	r3, [r0, #0]
   39daa:	b10b      	cbz	r3, 39db0 <linked_list_peek+0x8>
   39dac:	6840      	ldr	r0, [r0, #4]
   39dae:	4770      	bx	lr
   39db0:	4618      	mov	r0, r3
   39db2:	4770      	bx	lr

00039db4 <linked_list_size_get>:
   39db4:	6800      	ldr	r0, [r0, #0]
   39db6:	4770      	bx	lr

00039db8 <linked_list_get_next>:
   39db8:	6800      	ldr	r0, [r0, #0]
   39dba:	4770      	bx	lr

00039dbc <nrf_socket>:
   39dbc:	b570      	push	{r4, r5, r6, lr}
   39dbe:	4604      	mov	r4, r0
   39dc0:	460d      	mov	r5, r1
   39dc2:	4616      	mov	r6, r2
   39dc4:	f7ff fe8a 	bl	39adc <bsd_platform_af_method_table_get>
   39dc8:	b130      	cbz	r0, 39dd8 <nrf_socket+0x1c>
   39dca:	6803      	ldr	r3, [r0, #0]
   39dcc:	4632      	mov	r2, r6
   39dce:	4629      	mov	r1, r5
   39dd0:	4620      	mov	r0, r4
   39dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39dd6:	4718      	bx	r3
   39dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39ddc:	bd70      	pop	{r4, r5, r6, pc}
   39dde:	bf00      	nop

00039de0 <nrf_close>:
   39de0:	b510      	push	{r4, lr}
   39de2:	4604      	mov	r4, r0
   39de4:	f7ff fed2 	bl	39b8c <bsd_platform_fd_method_table_get>
   39de8:	b120      	cbz	r0, 39df4 <nrf_close+0x14>
   39dea:	6843      	ldr	r3, [r0, #4]
   39dec:	4620      	mov	r0, r4
   39dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39df2:	4718      	bx	r3
   39df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39df8:	bd10      	pop	{r4, pc}
   39dfa:	bf00      	nop

00039dfc <nrf_sendto>:
   39dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39e00:	460d      	mov	r5, r1
   39e02:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   39e06:	4616      	mov	r6, r2
   39e08:	461f      	mov	r7, r3
   39e0a:	4604      	mov	r4, r0
   39e0c:	f7ff febe 	bl	39b8c <bsd_platform_fd_method_table_get>
   39e10:	b158      	cbz	r0, 39e2a <nrf_sendto+0x2e>
   39e12:	e9cd 8908 	strd	r8, r9, [sp, #32]
   39e16:	f8d0 e008 	ldr.w	lr, [r0, #8]
   39e1a:	463b      	mov	r3, r7
   39e1c:	4632      	mov	r2, r6
   39e1e:	4629      	mov	r1, r5
   39e20:	4620      	mov	r0, r4
   39e22:	46f4      	mov	ip, lr
   39e24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39e28:	4760      	bx	ip
   39e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39e32:	bf00      	nop

00039e34 <nrf_write>:
   39e34:	b5f0      	push	{r4, r5, r6, r7, lr}
   39e36:	b083      	sub	sp, #12
   39e38:	460e      	mov	r6, r1
   39e3a:	4617      	mov	r7, r2
   39e3c:	4605      	mov	r5, r0
   39e3e:	f7ff fea5 	bl	39b8c <bsd_platform_fd_method_table_get>
   39e42:	b150      	cbz	r0, 39e5a <nrf_write+0x26>
   39e44:	2300      	movs	r3, #0
   39e46:	4604      	mov	r4, r0
   39e48:	e9cd 3300 	strd	r3, r3, [sp]
   39e4c:	463a      	mov	r2, r7
   39e4e:	4631      	mov	r1, r6
   39e50:	4628      	mov	r0, r5
   39e52:	68a4      	ldr	r4, [r4, #8]
   39e54:	47a0      	blx	r4
   39e56:	b003      	add	sp, #12
   39e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39e5e:	e7fa      	b.n	39e56 <nrf_write+0x22>

00039e60 <nrf_recvfrom>:
   39e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39e64:	460d      	mov	r5, r1
   39e66:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   39e6a:	4616      	mov	r6, r2
   39e6c:	461f      	mov	r7, r3
   39e6e:	4604      	mov	r4, r0
   39e70:	f7ff fe8c 	bl	39b8c <bsd_platform_fd_method_table_get>
   39e74:	b158      	cbz	r0, 39e8e <nrf_recvfrom+0x2e>
   39e76:	e9cd 8908 	strd	r8, r9, [sp, #32]
   39e7a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   39e7e:	463b      	mov	r3, r7
   39e80:	4632      	mov	r2, r6
   39e82:	4629      	mov	r1, r5
   39e84:	4620      	mov	r0, r4
   39e86:	46f4      	mov	ip, lr
   39e88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   39e8c:	4760      	bx	ip
   39e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39e96:	bf00      	nop

00039e98 <nrf_recv>:
   39e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39e9c:	b082      	sub	sp, #8
   39e9e:	460e      	mov	r6, r1
   39ea0:	4617      	mov	r7, r2
   39ea2:	4698      	mov	r8, r3
   39ea4:	4605      	mov	r5, r0
   39ea6:	f7ff fe71 	bl	39b8c <bsd_platform_fd_method_table_get>
   39eaa:	b160      	cbz	r0, 39ec6 <nrf_recv+0x2e>
   39eac:	4604      	mov	r4, r0
   39eae:	2000      	movs	r0, #0
   39eb0:	e9cd 0000 	strd	r0, r0, [sp]
   39eb4:	4643      	mov	r3, r8
   39eb6:	463a      	mov	r2, r7
   39eb8:	4631      	mov	r1, r6
   39eba:	4628      	mov	r0, r5
   39ebc:	68e4      	ldr	r4, [r4, #12]
   39ebe:	47a0      	blx	r4
   39ec0:	b002      	add	sp, #8
   39ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39eca:	e7f9      	b.n	39ec0 <nrf_recv+0x28>

00039ecc <nrf_read>:
   39ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
   39ece:	b083      	sub	sp, #12
   39ed0:	460e      	mov	r6, r1
   39ed2:	4617      	mov	r7, r2
   39ed4:	4605      	mov	r5, r0
   39ed6:	f7ff fe59 	bl	39b8c <bsd_platform_fd_method_table_get>
   39eda:	b150      	cbz	r0, 39ef2 <nrf_read+0x26>
   39edc:	2300      	movs	r3, #0
   39ede:	4604      	mov	r4, r0
   39ee0:	e9cd 3300 	strd	r3, r3, [sp]
   39ee4:	463a      	mov	r2, r7
   39ee6:	4631      	mov	r1, r6
   39ee8:	4628      	mov	r0, r5
   39eea:	68e4      	ldr	r4, [r4, #12]
   39eec:	47a0      	blx	r4
   39eee:	b003      	add	sp, #12
   39ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39ef6:	e7fa      	b.n	39eee <nrf_read+0x22>

00039ef8 <nrf_connect>:
   39ef8:	b570      	push	{r4, r5, r6, lr}
   39efa:	460d      	mov	r5, r1
   39efc:	4616      	mov	r6, r2
   39efe:	4604      	mov	r4, r0
   39f00:	f7ff fe44 	bl	39b8c <bsd_platform_fd_method_table_get>
   39f04:	b130      	cbz	r0, 39f14 <nrf_connect+0x1c>
   39f06:	6943      	ldr	r3, [r0, #20]
   39f08:	4632      	mov	r2, r6
   39f0a:	4629      	mov	r1, r5
   39f0c:	4620      	mov	r0, r4
   39f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39f12:	4718      	bx	r3
   39f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39f18:	bd70      	pop	{r4, r5, r6, pc}
   39f1a:	bf00      	nop

00039f1c <nrf_listen>:
   39f1c:	b570      	push	{r4, r5, r6, lr}
   39f1e:	460d      	mov	r5, r1
   39f20:	4604      	mov	r4, r0
   39f22:	f7ff fe33 	bl	39b8c <bsd_platform_fd_method_table_get>
   39f26:	b128      	cbz	r0, 39f34 <nrf_listen+0x18>
   39f28:	6983      	ldr	r3, [r0, #24]
   39f2a:	4629      	mov	r1, r5
   39f2c:	4620      	mov	r0, r4
   39f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39f32:	4718      	bx	r3
   39f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39f38:	bd70      	pop	{r4, r5, r6, pc}
   39f3a:	bf00      	nop

00039f3c <nrf_accept>:
   39f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39f40:	460d      	mov	r5, r1
   39f42:	4616      	mov	r6, r2
   39f44:	4604      	mov	r4, r0
   39f46:	f7ff fe21 	bl	39b8c <bsd_platform_fd_method_table_get>
   39f4a:	b140      	cbz	r0, 39f5e <nrf_accept+0x22>
   39f4c:	69c7      	ldr	r7, [r0, #28]
   39f4e:	4632      	mov	r2, r6
   39f50:	4629      	mov	r1, r5
   39f52:	4620      	mov	r0, r4
   39f54:	46bc      	mov	ip, r7
   39f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39f5a:	2300      	movs	r3, #0
   39f5c:	4760      	bx	ip
   39f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39f66:	bf00      	nop

00039f68 <nrf_bind>:
   39f68:	b570      	push	{r4, r5, r6, lr}
   39f6a:	460d      	mov	r5, r1
   39f6c:	4616      	mov	r6, r2
   39f6e:	4604      	mov	r4, r0
   39f70:	f7ff fe0c 	bl	39b8c <bsd_platform_fd_method_table_get>
   39f74:	b130      	cbz	r0, 39f84 <nrf_bind+0x1c>
   39f76:	6903      	ldr	r3, [r0, #16]
   39f78:	4632      	mov	r2, r6
   39f7a:	4629      	mov	r1, r5
   39f7c:	4620      	mov	r0, r4
   39f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   39f82:	4718      	bx	r3
   39f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39f88:	bd70      	pop	{r4, r5, r6, pc}
   39f8a:	bf00      	nop

00039f8c <nrf_setsockopt>:
   39f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39f90:	f8dd 8018 	ldr.w	r8, [sp, #24]
   39f94:	460d      	mov	r5, r1
   39f96:	4616      	mov	r6, r2
   39f98:	461f      	mov	r7, r3
   39f9a:	4604      	mov	r4, r0
   39f9c:	f7ff fdf6 	bl	39b8c <bsd_platform_fd_method_table_get>
   39fa0:	b158      	cbz	r0, 39fba <nrf_setsockopt+0x2e>
   39fa2:	f8cd 8018 	str.w	r8, [sp, #24]
   39fa6:	f8d0 e020 	ldr.w	lr, [r0, #32]
   39faa:	463b      	mov	r3, r7
   39fac:	4632      	mov	r2, r6
   39fae:	4629      	mov	r1, r5
   39fb0:	4620      	mov	r0, r4
   39fb2:	46f4      	mov	ip, lr
   39fb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39fb8:	4760      	bx	ip
   39fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39fc2:	bf00      	nop

00039fc4 <nrf_getsockopt>:
   39fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39fc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   39fcc:	460d      	mov	r5, r1
   39fce:	4616      	mov	r6, r2
   39fd0:	461f      	mov	r7, r3
   39fd2:	4604      	mov	r4, r0
   39fd4:	f7ff fdda 	bl	39b8c <bsd_platform_fd_method_table_get>
   39fd8:	b158      	cbz	r0, 39ff2 <nrf_getsockopt+0x2e>
   39fda:	f8cd 8018 	str.w	r8, [sp, #24]
   39fde:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   39fe2:	463b      	mov	r3, r7
   39fe4:	4632      	mov	r2, r6
   39fe6:	4629      	mov	r1, r5
   39fe8:	4620      	mov	r0, r4
   39fea:	46f4      	mov	ip, lr
   39fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   39ff0:	4760      	bx	ip
   39ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   39ffa:	bf00      	nop

00039ffc <nrf_getaddrinfo>:
   39ffc:	f7ff be3c 	b.w	39c78 <bsd_platform_getaddrinfo>

0003a000 <nrf_freeaddrinfo>:
   3a000:	f7ff be3c 	b.w	39c7c <bsd_platform_freeaddrinfo>

0003a004 <nrf_poll>:
   3a004:	f7ff be3c 	b.w	39c80 <bsd_platform_poll>

0003a008 <nrf_fcntl>:
   3a008:	f7ff be94 	b.w	39d34 <bsd_platform_fcntl>

0003a00c <rpc_gnss_serialize_utc>:
   3a00c:	4603      	mov	r3, r0
   3a00e:	b1d8      	cbz	r0, 3a048 <rpc_gnss_serialize_utc+0x3c>
   3a010:	b1d1      	cbz	r1, 3a048 <rpc_gnss_serialize_utc+0x3c>
   3a012:	2000      	movs	r0, #0
   3a014:	2201      	movs	r2, #1
   3a016:	7048      	strb	r0, [r1, #1]
   3a018:	700a      	strb	r2, [r1, #0]
   3a01a:	685a      	ldr	r2, [r3, #4]
   3a01c:	2010      	movs	r0, #16
   3a01e:	f8c1 2006 	str.w	r2, [r1, #6]
   3a022:	681a      	ldr	r2, [r3, #0]
   3a024:	f8c1 2002 	str.w	r2, [r1, #2]
   3a028:	f993 200a 	ldrsb.w	r2, [r3, #10]
   3a02c:	730a      	strb	r2, [r1, #12]
   3a02e:	f993 200d 	ldrsb.w	r2, [r3, #13]
   3a032:	73ca      	strb	r2, [r1, #15]
   3a034:	f993 200c 	ldrsb.w	r2, [r3, #12]
   3a038:	738a      	strb	r2, [r1, #14]
   3a03a:	7a1a      	ldrb	r2, [r3, #8]
   3a03c:	728a      	strb	r2, [r1, #10]
   3a03e:	7ada      	ldrb	r2, [r3, #11]
   3a040:	734a      	strb	r2, [r1, #13]
   3a042:	7a5b      	ldrb	r3, [r3, #9]
   3a044:	72cb      	strb	r3, [r1, #11]
   3a046:	4770      	bx	lr
   3a048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a04c:	4770      	bx	lr
   3a04e:	bf00      	nop

0003a050 <rpc_gnss_serialize_ephe>:
   3a050:	4603      	mov	r3, r0
   3a052:	2800      	cmp	r0, #0
   3a054:	d04b      	beq.n	3a0ee <rpc_gnss_serialize_ephe+0x9e>
   3a056:	2900      	cmp	r1, #0
   3a058:	d049      	beq.n	3a0ee <rpc_gnss_serialize_ephe+0x9e>
   3a05a:	2000      	movs	r0, #0
   3a05c:	2202      	movs	r2, #2
   3a05e:	7048      	strb	r0, [r1, #1]
   3a060:	700a      	strb	r2, [r1, #0]
   3a062:	68da      	ldr	r2, [r3, #12]
   3a064:	2040      	movs	r0, #64	; 0x40
   3a066:	f8c1 200b 	str.w	r2, [r1, #11]
   3a06a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3a06e:	f8a1 2009 	strh.w	r2, [r1, #9]
   3a072:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3a076:	720a      	strb	r2, [r1, #8]
   3a078:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   3a07c:	878a      	strh	r2, [r1, #60]	; 0x3c
   3a07e:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   3a082:	86ca      	strh	r2, [r1, #54]	; 0x36
   3a084:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   3a088:	874a      	strh	r2, [r1, #58]	; 0x3a
   3a08a:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   3a08e:	868a      	strh	r2, [r1, #52]	; 0x34
   3a090:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   3a094:	87ca      	strh	r2, [r1, #62]	; 0x3e
   3a096:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   3a09a:	870a      	strh	r2, [r1, #56]	; 0x38
   3a09c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3a0a0:	830a      	strh	r2, [r1, #24]
   3a0a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3a0a4:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   3a0a8:	7c9a      	ldrb	r2, [r3, #18]
   3a0aa:	744a      	strb	r2, [r1, #17]
   3a0ac:	785a      	ldrb	r2, [r3, #1]
   3a0ae:	70ca      	strb	r2, [r1, #3]
   3a0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3a0b2:	62ca      	str	r2, [r1, #44]	; 0x2c
   3a0b4:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   3a0b8:	84ca      	strh	r2, [r1, #38]	; 0x26
   3a0ba:	885a      	ldrh	r2, [r3, #2]
   3a0bc:	808a      	strh	r2, [r1, #4]
   3a0be:	6a1a      	ldr	r2, [r3, #32]
   3a0c0:	f8c1 201a 	str.w	r2, [r1, #26]
   3a0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3a0c6:	630a      	str	r2, [r1, #48]	; 0x30
   3a0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3a0ca:	f8c1 201e 	str.w	r2, [r1, #30]
   3a0ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3a0d0:	628a      	str	r2, [r1, #40]	; 0x28
   3a0d2:	781a      	ldrb	r2, [r3, #0]
   3a0d4:	708a      	strb	r2, [r1, #2]
   3a0d6:	f993 2010 	ldrsb.w	r2, [r3, #16]
   3a0da:	73ca      	strb	r2, [r1, #15]
   3a0dc:	889a      	ldrh	r2, [r3, #4]
   3a0de:	80ca      	strh	r2, [r1, #6]
   3a0e0:	8a9a      	ldrh	r2, [r3, #20]
   3a0e2:	824a      	strh	r2, [r1, #18]
   3a0e4:	7c5a      	ldrb	r2, [r3, #17]
   3a0e6:	740a      	strb	r2, [r1, #16]
   3a0e8:	699b      	ldr	r3, [r3, #24]
   3a0ea:	614b      	str	r3, [r1, #20]
   3a0ec:	4770      	bx	lr
   3a0ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0f2:	4770      	bx	lr

0003a0f4 <rpc_gnss_serialize_alm>:
   3a0f4:	4603      	mov	r3, r0
   3a0f6:	b360      	cbz	r0, 3a152 <rpc_gnss_serialize_alm+0x5e>
   3a0f8:	b359      	cbz	r1, 3a152 <rpc_gnss_serialize_alm+0x5e>
   3a0fa:	2000      	movs	r0, #0
   3a0fc:	2203      	movs	r2, #3
   3a0fe:	7048      	strb	r0, [r1, #1]
   3a100:	700a      	strb	r2, [r1, #0]
   3a102:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3a106:	2021      	movs	r0, #33	; 0x21
   3a108:	f8a1 201d 	strh.w	r2, [r1, #29]
   3a10c:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   3a110:	f8a1 201f 	strh.w	r2, [r1, #31]
   3a114:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   3a118:	810a      	strh	r2, [r1, #8]
   3a11a:	889a      	ldrh	r2, [r3, #4]
   3a11c:	80ca      	strh	r2, [r1, #6]
   3a11e:	78da      	ldrb	r2, [r3, #3]
   3a120:	714a      	strb	r2, [r1, #5]
   3a122:	699a      	ldr	r2, [r3, #24]
   3a124:	f8c1 2019 	str.w	r2, [r1, #25]
   3a128:	691a      	ldr	r2, [r3, #16]
   3a12a:	f8c1 2011 	str.w	r2, [r1, #17]
   3a12e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3a132:	814a      	strh	r2, [r1, #10]
   3a134:	68da      	ldr	r2, [r3, #12]
   3a136:	f8c1 200d 	str.w	r2, [r1, #13]
   3a13a:	7a9a      	ldrb	r2, [r3, #10]
   3a13c:	730a      	strb	r2, [r1, #12]
   3a13e:	781a      	ldrb	r2, [r3, #0]
   3a140:	708a      	strb	r2, [r1, #2]
   3a142:	789a      	ldrb	r2, [r3, #2]
   3a144:	710a      	strb	r2, [r1, #4]
   3a146:	695a      	ldr	r2, [r3, #20]
   3a148:	f8c1 2015 	str.w	r2, [r1, #21]
   3a14c:	785b      	ldrb	r3, [r3, #1]
   3a14e:	70cb      	strb	r3, [r1, #3]
   3a150:	4770      	bx	lr
   3a152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a156:	4770      	bx	lr

0003a158 <rpc_gnss_serialize_klob>:
   3a158:	4603      	mov	r3, r0
   3a15a:	b1f0      	cbz	r0, 3a19a <rpc_gnss_serialize_klob+0x42>
   3a15c:	b1e9      	cbz	r1, 3a19a <rpc_gnss_serialize_klob+0x42>
   3a15e:	2000      	movs	r0, #0
   3a160:	2204      	movs	r2, #4
   3a162:	7048      	strb	r0, [r1, #1]
   3a164:	700a      	strb	r2, [r1, #0]
   3a166:	f993 2000 	ldrsb.w	r2, [r3]
   3a16a:	200a      	movs	r0, #10
   3a16c:	708a      	strb	r2, [r1, #2]
   3a16e:	f993 2001 	ldrsb.w	r2, [r3, #1]
   3a172:	70ca      	strb	r2, [r1, #3]
   3a174:	f993 2002 	ldrsb.w	r2, [r3, #2]
   3a178:	710a      	strb	r2, [r1, #4]
   3a17a:	f993 2003 	ldrsb.w	r2, [r3, #3]
   3a17e:	714a      	strb	r2, [r1, #5]
   3a180:	f993 2004 	ldrsb.w	r2, [r3, #4]
   3a184:	718a      	strb	r2, [r1, #6]
   3a186:	f993 2005 	ldrsb.w	r2, [r3, #5]
   3a18a:	71ca      	strb	r2, [r1, #7]
   3a18c:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3a190:	720a      	strb	r2, [r1, #8]
   3a192:	f993 3007 	ldrsb.w	r3, [r3, #7]
   3a196:	724b      	strb	r3, [r1, #9]
   3a198:	4770      	bx	lr
   3a19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a19e:	4770      	bx	lr

0003a1a0 <rpc_gnss_serialize_nequick>:
   3a1a0:	4603      	mov	r3, r0
   3a1a2:	b198      	cbz	r0, 3a1cc <rpc_gnss_serialize_nequick+0x2c>
   3a1a4:	b191      	cbz	r1, 3a1cc <rpc_gnss_serialize_nequick+0x2c>
   3a1a6:	2000      	movs	r0, #0
   3a1a8:	2205      	movs	r2, #5
   3a1aa:	7048      	strb	r0, [r1, #1]
   3a1ac:	700a      	strb	r2, [r1, #0]
   3a1ae:	f9b3 2000 	ldrsh.w	r2, [r3]
   3a1b2:	200a      	movs	r0, #10
   3a1b4:	804a      	strh	r2, [r1, #2]
   3a1b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   3a1ba:	808a      	strh	r2, [r1, #4]
   3a1bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   3a1c0:	80ca      	strh	r2, [r1, #6]
   3a1c2:	799a      	ldrb	r2, [r3, #6]
   3a1c4:	720a      	strb	r2, [r1, #8]
   3a1c6:	79db      	ldrb	r3, [r3, #7]
   3a1c8:	724b      	strb	r3, [r1, #9]
   3a1ca:	4770      	bx	lr
   3a1cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a1d0:	4770      	bx	lr
   3a1d2:	bf00      	nop

0003a1d4 <rpc_gnss_serialize_time_and_sv_tow>:
   3a1d4:	b310      	cbz	r0, 3a21c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3a1d6:	b309      	cbz	r1, 3a21c <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3a1d8:	b470      	push	{r4, r5, r6}
   3a1da:	2500      	movs	r5, #0
   3a1dc:	2606      	movs	r6, #6
   3a1de:	460c      	mov	r4, r1
   3a1e0:	704d      	strb	r5, [r1, #1]
   3a1e2:	700e      	strb	r6, [r1, #0]
   3a1e4:	462b      	mov	r3, r5
   3a1e6:	8805      	ldrh	r5, [r0, #0]
   3a1e8:	4602      	mov	r2, r0
   3a1ea:	804d      	strh	r5, [r1, #2]
   3a1ec:	68c5      	ldr	r5, [r0, #12]
   3a1ee:	f8c1 500a 	str.w	r5, [r1, #10]
   3a1f2:	8905      	ldrh	r5, [r0, #8]
   3a1f4:	810d      	strh	r5, [r1, #8]
   3a1f6:	6840      	ldr	r0, [r0, #4]
   3a1f8:	6048      	str	r0, [r1, #4]
   3a1fa:	8a15      	ldrh	r5, [r2, #16]
   3a1fc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   3a200:	4408      	add	r0, r1
   3a202:	81c5      	strh	r5, [r0, #14]
   3a204:	7c90      	ldrb	r0, [r2, #18]
   3a206:	3301      	adds	r3, #1
   3a208:	2b20      	cmp	r3, #32
   3a20a:	7420      	strb	r0, [r4, #16]
   3a20c:	f102 0204 	add.w	r2, r2, #4
   3a210:	f104 0403 	add.w	r4, r4, #3
   3a214:	d1f1      	bne.n	3a1fa <rpc_gnss_serialize_time_and_sv_tow+0x26>
   3a216:	206e      	movs	r0, #110	; 0x6e
   3a218:	bc70      	pop	{r4, r5, r6}
   3a21a:	4770      	bx	lr
   3a21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a220:	4770      	bx	lr
   3a222:	bf00      	nop

0003a224 <rpc_gnss_serialize_location>:
   3a224:	4603      	mov	r3, r0
   3a226:	b1c8      	cbz	r0, 3a25c <rpc_gnss_serialize_location+0x38>
   3a228:	b1c1      	cbz	r1, 3a25c <rpc_gnss_serialize_location+0x38>
   3a22a:	2000      	movs	r0, #0
   3a22c:	2207      	movs	r2, #7
   3a22e:	7048      	strb	r0, [r1, #1]
   3a230:	700a      	strb	r2, [r1, #0]
   3a232:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3a236:	2011      	movs	r0, #17
   3a238:	814a      	strh	r2, [r1, #10]
   3a23a:	7b9a      	ldrb	r2, [r3, #14]
   3a23c:	740a      	strb	r2, [r1, #16]
   3a23e:	681a      	ldr	r2, [r3, #0]
   3a240:	f8c1 2002 	str.w	r2, [r1, #2]
   3a244:	685a      	ldr	r2, [r3, #4]
   3a246:	f8c1 2006 	str.w	r2, [r1, #6]
   3a24a:	7b1a      	ldrb	r2, [r3, #12]
   3a24c:	738a      	strb	r2, [r1, #14]
   3a24e:	7b5a      	ldrb	r2, [r3, #13]
   3a250:	73ca      	strb	r2, [r1, #15]
   3a252:	7a9a      	ldrb	r2, [r3, #10]
   3a254:	730a      	strb	r2, [r1, #12]
   3a256:	7adb      	ldrb	r3, [r3, #11]
   3a258:	734b      	strb	r3, [r1, #13]
   3a25a:	4770      	bx	lr
   3a25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a260:	4770      	bx	lr
   3a262:	bf00      	nop

0003a264 <rpc_gnss_serialize_integrity>:
   3a264:	b148      	cbz	r0, 3a27a <rpc_gnss_serialize_integrity+0x16>
   3a266:	b141      	cbz	r1, 3a27a <rpc_gnss_serialize_integrity+0x16>
   3a268:	2200      	movs	r2, #0
   3a26a:	2308      	movs	r3, #8
   3a26c:	704a      	strb	r2, [r1, #1]
   3a26e:	700b      	strb	r3, [r1, #0]
   3a270:	6803      	ldr	r3, [r0, #0]
   3a272:	2006      	movs	r0, #6
   3a274:	f8c1 3002 	str.w	r3, [r1, #2]
   3a278:	4770      	bx	lr
   3a27a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a27e:	4770      	bx	lr

0003a280 <gnss_client_event_handler>:
   3a280:	f850 1b08 	ldr.w	r1, [r0], #8
   3a284:	0c09      	lsrs	r1, r1, #16
   3a286:	f7fd b81d 	b.w	372c4 <rpc_gnss_event_handler>
   3a28a:	bf00      	nop

0003a28c <rpc_gnss_client_init>:
   3a28c:	4801      	ldr	r0, [pc, #4]	; (3a294 <rpc_gnss_client_init+0x8>)
   3a28e:	f7fc bf07 	b.w	370a0 <rpc_client_register>
   3a292:	bf00      	nop
   3a294:	00047644 	.word	0x00047644

0003a298 <rpc_gnss_client_deinit>:
   3a298:	2007      	movs	r0, #7
   3a29a:	f7fc bf6b 	b.w	37174 <rpc_client_unregister>
   3a29e:	bf00      	nop

0003a2a0 <rpc_gnss_client_request_alloc>:
   3a2a0:	2300      	movs	r3, #0
   3a2a2:	b510      	push	{r4, lr}
   3a2a4:	b082      	sub	sp, #8
   3a2a6:	9301      	str	r3, [sp, #4]
   3a2a8:	b158      	cbz	r0, 3a2c2 <rpc_gnss_client_request_alloc+0x22>
   3a2aa:	4604      	mov	r4, r0
   3a2ac:	aa01      	add	r2, sp, #4
   3a2ae:	2007      	movs	r0, #7
   3a2b0:	f7fc ffb6 	bl	37220 <rpc_message_alloc>
   3a2b4:	b918      	cbnz	r0, 3a2be <rpc_gnss_client_request_alloc+0x1e>
   3a2b6:	9b01      	ldr	r3, [sp, #4]
   3a2b8:	b10b      	cbz	r3, 3a2be <rpc_gnss_client_request_alloc+0x1e>
   3a2ba:	3308      	adds	r3, #8
   3a2bc:	6023      	str	r3, [r4, #0]
   3a2be:	b002      	add	sp, #8
   3a2c0:	bd10      	pop	{r4, pc}
   3a2c2:	2007      	movs	r0, #7
   3a2c4:	b002      	add	sp, #8
   3a2c6:	bd10      	pop	{r4, pc}

0003a2c8 <rpc_gnss_client_request_send>:
   3a2c8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3a2cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   3a2d0:	d10b      	bne.n	3a2ea <rpc_gnss_client_request_send+0x22>
   3a2d2:	b160      	cbz	r0, 3a2ee <rpc_gnss_client_request_send+0x26>
   3a2d4:	4603      	mov	r3, r0
   3a2d6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3a2da:	2007      	movs	r0, #7
   3a2dc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3a2e0:	f843 1d08 	str.w	r1, [r3, #-8]!
   3a2e4:	4619      	mov	r1, r3
   3a2e6:	f7fc bf8b 	b.w	37200 <rpc_message_send>
   3a2ea:	200f      	movs	r0, #15
   3a2ec:	4770      	bx	lr
   3a2ee:	2007      	movs	r0, #7
   3a2f0:	4770      	bx	lr
   3a2f2:	bf00      	nop

0003a2f4 <rpc_gnss_client_message_free>:
   3a2f4:	b120      	cbz	r0, 3a300 <rpc_gnss_client_message_free+0xc>
   3a2f6:	f1a0 0108 	sub.w	r1, r0, #8
   3a2fa:	2007      	movs	r0, #7
   3a2fc:	f7fc bfbc 	b.w	37278 <rpc_message_free>
   3a300:	2007      	movs	r0, #7
   3a302:	4770      	bx	lr

0003a304 <rpc_gnss_client_data_free>:
   3a304:	b118      	cbz	r0, 3a30e <rpc_gnss_client_data_free+0xa>
   3a306:	4601      	mov	r1, r0
   3a308:	2007      	movs	r0, #7
   3a30a:	f7fc bfc1 	b.w	37290 <rpc_message_data_free>
   3a30e:	2007      	movs	r0, #7
   3a310:	4770      	bx	lr
   3a312:	bf00      	nop

0003a314 <datagram_handler_init>:
   3a314:	b510      	push	{r4, lr}
   3a316:	4604      	mov	r4, r0
   3a318:	200c      	movs	r0, #12
   3a31a:	f000 fdd7 	bl	3aecc <nrf_malloc>
   3a31e:	60e0      	str	r0, [r4, #12]
   3a320:	b118      	cbz	r0, 3a32a <datagram_handler_init+0x16>
   3a322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a326:	f7ff bd15 	b.w	39d54 <linked_list_init>
   3a32a:	2004      	movs	r0, #4
   3a32c:	bd10      	pop	{r4, pc}
   3a32e:	bf00      	nop

0003a330 <datagram_handler_put>:
   3a330:	b570      	push	{r4, r5, r6, lr}
   3a332:	4606      	mov	r6, r0
   3a334:	2014      	movs	r0, #20
   3a336:	460d      	mov	r5, r1
   3a338:	f000 fdc8 	bl	3aecc <nrf_malloc>
   3a33c:	b178      	cbz	r0, 3a35e <datagram_handler_put+0x2e>
   3a33e:	682b      	ldr	r3, [r5, #0]
   3a340:	4604      	mov	r4, r0
   3a342:	6043      	str	r3, [r0, #4]
   3a344:	686b      	ldr	r3, [r5, #4]
   3a346:	4601      	mov	r1, r0
   3a348:	6083      	str	r3, [r0, #8]
   3a34a:	68eb      	ldr	r3, [r5, #12]
   3a34c:	60c3      	str	r3, [r0, #12]
   3a34e:	68ab      	ldr	r3, [r5, #8]
   3a350:	6103      	str	r3, [r0, #16]
   3a352:	68f0      	ldr	r0, [r6, #12]
   3a354:	f7ff fd08 	bl	39d68 <linked_list_push>
   3a358:	b920      	cbnz	r0, 3a364 <datagram_handler_put+0x34>
   3a35a:	6868      	ldr	r0, [r5, #4]
   3a35c:	bd70      	pop	{r4, r5, r6, pc}
   3a35e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a362:	bd70      	pop	{r4, r5, r6, pc}
   3a364:	4620      	mov	r0, r4
   3a366:	f000 fdbb 	bl	3aee0 <nrf_free>
   3a36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a36e:	bd70      	pop	{r4, r5, r6, pc}

0003a370 <datagram_handler_get>:
   3a370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a374:	4607      	mov	r7, r0
   3a376:	b084      	sub	sp, #16
   3a378:	68c0      	ldr	r0, [r0, #12]
   3a37a:	460c      	mov	r4, r1
   3a37c:	4616      	mov	r6, r2
   3a37e:	f7ff fd13 	bl	39da8 <linked_list_peek>
   3a382:	2800      	cmp	r0, #0
   3a384:	d03b      	beq.n	3a3fe <datagram_handler_get+0x8e>
   3a386:	6882      	ldr	r2, [r0, #8]
   3a388:	4605      	mov	r5, r0
   3a38a:	e9d4 0300 	ldrd	r0, r3, [r4]
   3a38e:	429a      	cmp	r2, r3
   3a390:	bf28      	it	cs
   3a392:	461a      	movcs	r2, r3
   3a394:	6062      	str	r2, [r4, #4]
   3a396:	b110      	cbz	r0, 3a39e <datagram_handler_get+0x2e>
   3a398:	6869      	ldr	r1, [r5, #4]
   3a39a:	f00a ff45 	bl	45228 <memcpy>
   3a39e:	68a0      	ldr	r0, [r4, #8]
   3a3a0:	b118      	cbz	r0, 3a3aa <datagram_handler_get+0x3a>
   3a3a2:	692b      	ldr	r3, [r5, #16]
   3a3a4:	b10b      	cbz	r3, 3a3aa <datagram_handler_get+0x3a>
   3a3a6:	68ea      	ldr	r2, [r5, #12]
   3a3a8:	bb02      	cbnz	r2, 3a3ec <datagram_handler_get+0x7c>
   3a3aa:	2300      	movs	r3, #0
   3a3ac:	60e3      	str	r3, [r4, #12]
   3a3ae:	0732      	lsls	r2, r6, #28
   3a3b0:	d506      	bpl.n	3a3c0 <datagram_handler_get+0x50>
   3a3b2:	06b3      	lsls	r3, r6, #26
   3a3b4:	bf4c      	ite	mi
   3a3b6:	68a8      	ldrmi	r0, [r5, #8]
   3a3b8:	6860      	ldrpl	r0, [r4, #4]
   3a3ba:	b004      	add	sp, #16
   3a3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a3c0:	68f8      	ldr	r0, [r7, #12]
   3a3c2:	f7ff fce7 	bl	39d94 <linked_list_pop>
   3a3c6:	4680      	mov	r8, r0
   3a3c8:	2800      	cmp	r0, #0
   3a3ca:	d0f2      	beq.n	3a3b2 <datagram_handler_get+0x42>
   3a3cc:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3a3d0:	6902      	ldr	r2, [r0, #16]
   3a3d2:	9300      	str	r3, [sp, #0]
   3a3d4:	68c3      	ldr	r3, [r0, #12]
   3a3d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3a3da:	9303      	str	r3, [sp, #12]
   3a3dc:	4668      	mov	r0, sp
   3a3de:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   3a3e2:	4798      	blx	r3
   3a3e4:	4640      	mov	r0, r8
   3a3e6:	f000 fd7b 	bl	3aee0 <nrf_free>
   3a3ea:	e7e2      	b.n	3a3b2 <datagram_handler_get+0x42>
   3a3ec:	68e3      	ldr	r3, [r4, #12]
   3a3ee:	429a      	cmp	r2, r3
   3a3f0:	bf28      	it	cs
   3a3f2:	461a      	movcs	r2, r3
   3a3f4:	60e2      	str	r2, [r4, #12]
   3a3f6:	6929      	ldr	r1, [r5, #16]
   3a3f8:	f00a ff16 	bl	45228 <memcpy>
   3a3fc:	e7d7      	b.n	3a3ae <datagram_handler_get+0x3e>
   3a3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a402:	e7da      	b.n	3a3ba <datagram_handler_get+0x4a>

0003a404 <datagram_handler_available>:
   3a404:	b508      	push	{r3, lr}
   3a406:	68c0      	ldr	r0, [r0, #12]
   3a408:	f7ff fcce 	bl	39da8 <linked_list_peek>
   3a40c:	b108      	cbz	r0, 3a412 <datagram_handler_available+0xe>
   3a40e:	6880      	ldr	r0, [r0, #8]
   3a410:	bd08      	pop	{r3, pc}
   3a412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a416:	bd08      	pop	{r3, pc}

0003a418 <datagram_handler_flush>:
   3a418:	b530      	push	{r4, r5, lr}
   3a41a:	4605      	mov	r5, r0
   3a41c:	68c0      	ldr	r0, [r0, #12]
   3a41e:	b085      	sub	sp, #20
   3a420:	b9a8      	cbnz	r0, 3a44e <datagram_handler_flush+0x36>
   3a422:	e01a      	b.n	3a45a <datagram_handler_flush+0x42>
   3a424:	68e8      	ldr	r0, [r5, #12]
   3a426:	f7ff fcb5 	bl	39d94 <linked_list_pop>
   3a42a:	4604      	mov	r4, r0
   3a42c:	b170      	cbz	r0, 3a44c <datagram_handler_flush+0x34>
   3a42e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3a432:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3a436:	e9cd 0100 	strd	r0, r1, [sp]
   3a43a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3a43e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3a442:	4668      	mov	r0, sp
   3a444:	4798      	blx	r3
   3a446:	4620      	mov	r0, r4
   3a448:	f000 fd4a 	bl	3aee0 <nrf_free>
   3a44c:	68e8      	ldr	r0, [r5, #12]
   3a44e:	f7ff fcb1 	bl	39db4 <linked_list_size_get>
   3a452:	2800      	cmp	r0, #0
   3a454:	d1e6      	bne.n	3a424 <datagram_handler_flush+0xc>
   3a456:	b005      	add	sp, #20
   3a458:	bd30      	pop	{r4, r5, pc}
   3a45a:	2008      	movs	r0, #8
   3a45c:	b005      	add	sp, #20
   3a45e:	bd30      	pop	{r4, r5, pc}

0003a460 <datagram_handler_free>:
   3a460:	b530      	push	{r4, r5, lr}
   3a462:	4605      	mov	r5, r0
   3a464:	68c0      	ldr	r0, [r0, #12]
   3a466:	b085      	sub	sp, #20
   3a468:	b9a0      	cbnz	r0, 3a494 <datagram_handler_free+0x34>
   3a46a:	e01c      	b.n	3a4a6 <datagram_handler_free+0x46>
   3a46c:	f7ff fc92 	bl	39d94 <linked_list_pop>
   3a470:	4604      	mov	r4, r0
   3a472:	b170      	cbz	r0, 3a492 <datagram_handler_free+0x32>
   3a474:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3a478:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3a47c:	e9cd 0100 	strd	r0, r1, [sp]
   3a480:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3a484:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3a488:	4668      	mov	r0, sp
   3a48a:	4798      	blx	r3
   3a48c:	4620      	mov	r0, r4
   3a48e:	f000 fd27 	bl	3aee0 <nrf_free>
   3a492:	68e8      	ldr	r0, [r5, #12]
   3a494:	f7ff fc8e 	bl	39db4 <linked_list_size_get>
   3a498:	4604      	mov	r4, r0
   3a49a:	68e8      	ldr	r0, [r5, #12]
   3a49c:	2c00      	cmp	r4, #0
   3a49e:	d1e5      	bne.n	3a46c <datagram_handler_free+0xc>
   3a4a0:	f000 fd1e 	bl	3aee0 <nrf_free>
   3a4a4:	60ec      	str	r4, [r5, #12]
   3a4a6:	b005      	add	sp, #20
   3a4a8:	bd30      	pop	{r4, r5, pc}
   3a4aa:	bf00      	nop

0003a4ac <null_handler_init>:
   3a4ac:	2000      	movs	r0, #0
   3a4ae:	4770      	bx	lr

0003a4b0 <null_handler_put>:
   3a4b0:	b510      	push	{r4, lr}
   3a4b2:	460c      	mov	r4, r1
   3a4b4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3a4b8:	4620      	mov	r0, r4
   3a4ba:	4798      	blx	r3
   3a4bc:	6860      	ldr	r0, [r4, #4]
   3a4be:	bd10      	pop	{r4, pc}

0003a4c0 <null_handler_get>:
   3a4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a4c4:	4770      	bx	lr
   3a4c6:	bf00      	nop

0003a4c8 <null_handler_available>:
   3a4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a4cc:	4770      	bx	lr
   3a4ce:	bf00      	nop

0003a4d0 <null_handler_flush>:
   3a4d0:	2000      	movs	r0, #0
   3a4d2:	4770      	bx	lr

0003a4d4 <null_handler_free>:
   3a4d4:	4770      	bx	lr
   3a4d6:	bf00      	nop

0003a4d8 <packet_handler_create>:
   3a4d8:	2801      	cmp	r0, #1
   3a4da:	b538      	push	{r3, r4, r5, lr}
   3a4dc:	460d      	mov	r5, r1
   3a4de:	4614      	mov	r4, r2
   3a4e0:	d00d      	beq.n	3a4fe <packet_handler_create+0x26>
   3a4e2:	db11      	blt.n	3a508 <packet_handler_create+0x30>
   3a4e4:	2803      	cmp	r0, #3
   3a4e6:	dc0f      	bgt.n	3a508 <packet_handler_create+0x30>
   3a4e8:	2010      	movs	r0, #16
   3a4ea:	f000 fcef 	bl	3aecc <nrf_malloc>
   3a4ee:	2218      	movs	r2, #24
   3a4f0:	b120      	cbz	r0, 3a4fc <packet_handler_create+0x24>
   3a4f2:	4b08      	ldr	r3, [pc, #32]	; (3a514 <packet_handler_create+0x3c>)
   3a4f4:	6045      	str	r5, [r0, #4]
   3a4f6:	4413      	add	r3, r2
   3a4f8:	6084      	str	r4, [r0, #8]
   3a4fa:	6003      	str	r3, [r0, #0]
   3a4fc:	bd38      	pop	{r3, r4, r5, pc}
   3a4fe:	2014      	movs	r0, #20
   3a500:	f000 fce4 	bl	3aecc <nrf_malloc>
   3a504:	2230      	movs	r2, #48	; 0x30
   3a506:	e7f3      	b.n	3a4f0 <packet_handler_create+0x18>
   3a508:	200c      	movs	r0, #12
   3a50a:	f000 fcdf 	bl	3aecc <nrf_malloc>
   3a50e:	2200      	movs	r2, #0
   3a510:	e7ee      	b.n	3a4f0 <packet_handler_create+0x18>
   3a512:	bf00      	nop
   3a514:	00047654 	.word	0x00047654

0003a518 <packet_handler_delete>:
   3a518:	b510      	push	{r4, lr}
   3a51a:	4604      	mov	r4, r0
   3a51c:	6803      	ldr	r3, [r0, #0]
   3a51e:	691b      	ldr	r3, [r3, #16]
   3a520:	4798      	blx	r3
   3a522:	6823      	ldr	r3, [r4, #0]
   3a524:	4620      	mov	r0, r4
   3a526:	695b      	ldr	r3, [r3, #20]
   3a528:	4798      	blx	r3
   3a52a:	4620      	mov	r0, r4
   3a52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a530:	f000 bcd6 	b.w	3aee0 <nrf_free>

0003a534 <stream_handler_init>:
   3a534:	b510      	push	{r4, lr}
   3a536:	4604      	mov	r4, r0
   3a538:	200c      	movs	r0, #12
   3a53a:	f000 fcc7 	bl	3aecc <nrf_malloc>
   3a53e:	60e0      	str	r0, [r4, #12]
   3a540:	b128      	cbz	r0, 3a54e <stream_handler_init+0x1a>
   3a542:	2300      	movs	r3, #0
   3a544:	6123      	str	r3, [r4, #16]
   3a546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3a54a:	f7ff bc03 	b.w	39d54 <linked_list_init>
   3a54e:	2004      	movs	r0, #4
   3a550:	bd10      	pop	{r4, pc}
   3a552:	bf00      	nop

0003a554 <stream_handler_put>:
   3a554:	b570      	push	{r4, r5, r6, lr}
   3a556:	4606      	mov	r6, r0
   3a558:	2014      	movs	r0, #20
   3a55a:	460d      	mov	r5, r1
   3a55c:	f000 fcb6 	bl	3aecc <nrf_malloc>
   3a560:	b178      	cbz	r0, 3a582 <stream_handler_put+0x2e>
   3a562:	682b      	ldr	r3, [r5, #0]
   3a564:	4604      	mov	r4, r0
   3a566:	6043      	str	r3, [r0, #4]
   3a568:	686b      	ldr	r3, [r5, #4]
   3a56a:	4601      	mov	r1, r0
   3a56c:	6083      	str	r3, [r0, #8]
   3a56e:	68eb      	ldr	r3, [r5, #12]
   3a570:	60c3      	str	r3, [r0, #12]
   3a572:	68ab      	ldr	r3, [r5, #8]
   3a574:	6103      	str	r3, [r0, #16]
   3a576:	68f0      	ldr	r0, [r6, #12]
   3a578:	f7ff fbf6 	bl	39d68 <linked_list_push>
   3a57c:	b920      	cbnz	r0, 3a588 <stream_handler_put+0x34>
   3a57e:	6868      	ldr	r0, [r5, #4]
   3a580:	bd70      	pop	{r4, r5, r6, pc}
   3a582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a586:	bd70      	pop	{r4, r5, r6, pc}
   3a588:	4620      	mov	r0, r4
   3a58a:	f000 fca9 	bl	3aee0 <nrf_free>
   3a58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a592:	bd70      	pop	{r4, r5, r6, pc}

0003a594 <stream_handler_get>:
   3a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a598:	4682      	mov	sl, r0
   3a59a:	b089      	sub	sp, #36	; 0x24
   3a59c:	68c0      	ldr	r0, [r0, #12]
   3a59e:	4689      	mov	r9, r1
   3a5a0:	4693      	mov	fp, r2
   3a5a2:	f7ff fc01 	bl	39da8 <linked_list_peek>
   3a5a6:	2800      	cmp	r0, #0
   3a5a8:	d071      	beq.n	3a68e <stream_handler_get+0xfa>
   3a5aa:	4605      	mov	r5, r0
   3a5ac:	f8d9 0008 	ldr.w	r0, [r9, #8]
   3a5b0:	b120      	cbz	r0, 3a5bc <stream_handler_get+0x28>
   3a5b2:	692b      	ldr	r3, [r5, #16]
   3a5b4:	b113      	cbz	r3, 3a5bc <stream_handler_get+0x28>
   3a5b6:	68ea      	ldr	r2, [r5, #12]
   3a5b8:	2a00      	cmp	r2, #0
   3a5ba:	d15d      	bne.n	3a678 <stream_handler_get+0xe4>
   3a5bc:	2300      	movs	r3, #0
   3a5be:	f8c9 300c 	str.w	r3, [r9, #12]
   3a5c2:	f8d9 2000 	ldr.w	r2, [r9]
   3a5c6:	f8d9 8004 	ldr.w	r8, [r9, #4]
   3a5ca:	f8da 1010 	ldr.w	r1, [sl, #16]
   3a5ce:	9203      	str	r2, [sp, #12]
   3a5d0:	f1b8 0f00 	cmp.w	r8, #0
   3a5d4:	d030      	beq.n	3a638 <stream_handler_get+0xa4>
   3a5d6:	2400      	movs	r4, #0
   3a5d8:	f00b 0320 	and.w	r3, fp, #32
   3a5dc:	9301      	str	r3, [sp, #4]
   3a5de:	f00b 0b08 	and.w	fp, fp, #8
   3a5e2:	68ae      	ldr	r6, [r5, #8]
   3a5e4:	eba8 0304 	sub.w	r3, r8, r4
   3a5e8:	1a76      	subs	r6, r6, r1
   3a5ea:	429e      	cmp	r6, r3
   3a5ec:	4637      	mov	r7, r6
   3a5ee:	bf28      	it	cs
   3a5f0:	461f      	movcs	r7, r3
   3a5f2:	b10a      	cbz	r2, 3a5f8 <stream_handler_get+0x64>
   3a5f4:	9a01      	ldr	r2, [sp, #4]
   3a5f6:	b1aa      	cbz	r2, 3a624 <stream_handler_get+0x90>
   3a5f8:	f1bb 0f00 	cmp.w	fp, #0
   3a5fc:	d106      	bne.n	3a60c <stream_handler_get+0x78>
   3a5fe:	429e      	cmp	r6, r3
   3a600:	d921      	bls.n	3a646 <stream_handler_get+0xb2>
   3a602:	f8da 3010 	ldr.w	r3, [sl, #16]
   3a606:	443b      	add	r3, r7
   3a608:	f8ca 3010 	str.w	r3, [sl, #16]
   3a60c:	4628      	mov	r0, r5
   3a60e:	f7ff fbd3 	bl	39db8 <linked_list_get_next>
   3a612:	443c      	add	r4, r7
   3a614:	4605      	mov	r5, r0
   3a616:	b180      	cbz	r0, 3a63a <stream_handler_get+0xa6>
   3a618:	45a0      	cmp	r8, r4
   3a61a:	d90e      	bls.n	3a63a <stream_handler_get+0xa6>
   3a61c:	f8d9 2000 	ldr.w	r2, [r9]
   3a620:	2100      	movs	r1, #0
   3a622:	e7de      	b.n	3a5e2 <stream_handler_get+0x4e>
   3a624:	6868      	ldr	r0, [r5, #4]
   3a626:	9302      	str	r3, [sp, #8]
   3a628:	9b03      	ldr	r3, [sp, #12]
   3a62a:	4401      	add	r1, r0
   3a62c:	463a      	mov	r2, r7
   3a62e:	1918      	adds	r0, r3, r4
   3a630:	f00a fdfa 	bl	45228 <memcpy>
   3a634:	9b02      	ldr	r3, [sp, #8]
   3a636:	e7df      	b.n	3a5f8 <stream_handler_get+0x64>
   3a638:	4644      	mov	r4, r8
   3a63a:	4620      	mov	r0, r4
   3a63c:	f8c9 4004 	str.w	r4, [r9, #4]
   3a640:	b009      	add	sp, #36	; 0x24
   3a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a646:	f8da 000c 	ldr.w	r0, [sl, #12]
   3a64a:	f7ff fba3 	bl	39d94 <linked_list_pop>
   3a64e:	4606      	mov	r6, r0
   3a650:	b170      	cbz	r0, 3a670 <stream_handler_get+0xdc>
   3a652:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   3a656:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   3a65a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   3a65e:	e9cd 1006 	strd	r1, r0, [sp, #24]
   3a662:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   3a666:	a804      	add	r0, sp, #16
   3a668:	4798      	blx	r3
   3a66a:	4630      	mov	r0, r6
   3a66c:	f000 fc38 	bl	3aee0 <nrf_free>
   3a670:	2300      	movs	r3, #0
   3a672:	f8ca 3010 	str.w	r3, [sl, #16]
   3a676:	e7c9      	b.n	3a60c <stream_handler_get+0x78>
   3a678:	f8d9 300c 	ldr.w	r3, [r9, #12]
   3a67c:	429a      	cmp	r2, r3
   3a67e:	bf28      	it	cs
   3a680:	461a      	movcs	r2, r3
   3a682:	f8c9 200c 	str.w	r2, [r9, #12]
   3a686:	6929      	ldr	r1, [r5, #16]
   3a688:	f00a fdce 	bl	45228 <memcpy>
   3a68c:	e799      	b.n	3a5c2 <stream_handler_get+0x2e>
   3a68e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a692:	e7d5      	b.n	3a640 <stream_handler_get+0xac>

0003a694 <stream_handler_available>:
   3a694:	b510      	push	{r4, lr}
   3a696:	4604      	mov	r4, r0
   3a698:	68c0      	ldr	r0, [r0, #12]
   3a69a:	f7ff fb85 	bl	39da8 <linked_list_peek>
   3a69e:	b150      	cbz	r0, 3a6b6 <stream_handler_available+0x22>
   3a6a0:	6924      	ldr	r4, [r4, #16]
   3a6a2:	4264      	negs	r4, r4
   3a6a4:	6883      	ldr	r3, [r0, #8]
   3a6a6:	441c      	add	r4, r3
   3a6a8:	f7ff fb86 	bl	39db8 <linked_list_get_next>
   3a6ac:	2800      	cmp	r0, #0
   3a6ae:	d1f9      	bne.n	3a6a4 <stream_handler_available+0x10>
   3a6b0:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3a6b4:	bd10      	pop	{r4, pc}
   3a6b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a6ba:	bd10      	pop	{r4, pc}

0003a6bc <stream_handler_flush>:
   3a6bc:	b530      	push	{r4, r5, lr}
   3a6be:	4605      	mov	r5, r0
   3a6c0:	68c0      	ldr	r0, [r0, #12]
   3a6c2:	b085      	sub	sp, #20
   3a6c4:	b9a8      	cbnz	r0, 3a6f2 <stream_handler_flush+0x36>
   3a6c6:	e01a      	b.n	3a6fe <stream_handler_flush+0x42>
   3a6c8:	68e8      	ldr	r0, [r5, #12]
   3a6ca:	f7ff fb63 	bl	39d94 <linked_list_pop>
   3a6ce:	4604      	mov	r4, r0
   3a6d0:	b170      	cbz	r0, 3a6f0 <stream_handler_flush+0x34>
   3a6d2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3a6d6:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3a6da:	e9cd 0100 	strd	r0, r1, [sp]
   3a6de:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3a6e2:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3a6e6:	4668      	mov	r0, sp
   3a6e8:	4798      	blx	r3
   3a6ea:	4620      	mov	r0, r4
   3a6ec:	f000 fbf8 	bl	3aee0 <nrf_free>
   3a6f0:	68e8      	ldr	r0, [r5, #12]
   3a6f2:	f7ff fb5f 	bl	39db4 <linked_list_size_get>
   3a6f6:	2800      	cmp	r0, #0
   3a6f8:	d1e6      	bne.n	3a6c8 <stream_handler_flush+0xc>
   3a6fa:	b005      	add	sp, #20
   3a6fc:	bd30      	pop	{r4, r5, pc}
   3a6fe:	2008      	movs	r0, #8
   3a700:	b005      	add	sp, #20
   3a702:	bd30      	pop	{r4, r5, pc}

0003a704 <stream_handler_free>:
   3a704:	b530      	push	{r4, r5, lr}
   3a706:	4605      	mov	r5, r0
   3a708:	68c0      	ldr	r0, [r0, #12]
   3a70a:	b085      	sub	sp, #20
   3a70c:	b9a0      	cbnz	r0, 3a738 <stream_handler_free+0x34>
   3a70e:	e01c      	b.n	3a74a <stream_handler_free+0x46>
   3a710:	f7ff fb40 	bl	39d94 <linked_list_pop>
   3a714:	4604      	mov	r4, r0
   3a716:	b170      	cbz	r0, 3a736 <stream_handler_free+0x32>
   3a718:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3a71c:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3a720:	e9cd 0100 	strd	r0, r1, [sp]
   3a724:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3a728:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3a72c:	4668      	mov	r0, sp
   3a72e:	4798      	blx	r3
   3a730:	4620      	mov	r0, r4
   3a732:	f000 fbd5 	bl	3aee0 <nrf_free>
   3a736:	68e8      	ldr	r0, [r5, #12]
   3a738:	f7ff fb3c 	bl	39db4 <linked_list_size_get>
   3a73c:	4604      	mov	r4, r0
   3a73e:	68e8      	ldr	r0, [r5, #12]
   3a740:	2c00      	cmp	r4, #0
   3a742:	d1e5      	bne.n	3a710 <stream_handler_free+0xc>
   3a744:	f000 fbcc 	bl	3aee0 <nrf_free>
   3a748:	60ec      	str	r4, [r5, #12]
   3a74a:	b005      	add	sp, #20
   3a74c:	bd30      	pop	{r4, r5, pc}
   3a74e:	bf00      	nop

0003a750 <mem_free>:
   3a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a754:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3a824 <mem_free+0xd4>
   3a758:	b083      	sub	sp, #12
   3a75a:	9000      	str	r0, [sp, #0]
   3a75c:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   3a760:	f8dc 3008 	ldr.w	r3, [ip, #8]
   3a764:	b12b      	cbz	r3, 3a772 <mem_free+0x22>
   3a766:	f8dc 2000 	ldr.w	r2, [ip]
   3a76a:	9c00      	ldr	r4, [sp, #0]
   3a76c:	7810      	ldrb	r0, [r2, #0]
   3a76e:	42a0      	cmp	r0, r4
   3a770:	d006      	beq.n	3a780 <mem_free+0x30>
   3a772:	f10c 0c0c 	add.w	ip, ip, #12
   3a776:	45e3      	cmp	fp, ip
   3a778:	d1f2      	bne.n	3a760 <mem_free+0x10>
   3a77a:	b003      	add	sp, #12
   3a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a780:	f8dc a004 	ldr.w	sl, [ip, #4]
   3a784:	eb03 080a 	add.w	r8, r3, sl
   3a788:	45c2      	cmp	sl, r8
   3a78a:	d2f2      	bcs.n	3a772 <mem_free+0x22>
   3a78c:	6853      	ldr	r3, [r2, #4]
   3a78e:	f8cd c004 	str.w	ip, [sp, #4]
   3a792:	46d6      	mov	lr, sl
   3a794:	469c      	mov	ip, r3
   3a796:	f8d2 9010 	ldr.w	r9, [r2, #16]
   3a79a:	8997      	ldrh	r7, [r2, #12]
   3a79c:	ebae 000a 	sub.w	r0, lr, sl
   3a7a0:	b3df      	cbz	r7, 3a81a <mem_free+0xca>
   3a7a2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   3a7a6:	4290      	cmp	r0, r2
   3a7a8:	d31c      	bcc.n	3a7e4 <mem_free+0x94>
   3a7aa:	4665      	mov	r5, ip
   3a7ac:	2400      	movs	r4, #0
   3a7ae:	f109 0304 	add.w	r3, r9, #4
   3a7b2:	e003      	b.n	3a7bc <mem_free+0x6c>
   3a7b4:	885a      	ldrh	r2, [r3, #2]
   3a7b6:	3304      	adds	r3, #4
   3a7b8:	4282      	cmp	r2, r0
   3a7ba:	d815      	bhi.n	3a7e8 <mem_free+0x98>
   3a7bc:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   3a7c0:	3401      	adds	r4, #1
   3a7c2:	42a7      	cmp	r7, r4
   3a7c4:	fb02 5506 	mla	r5, r2, r6, r5
   3a7c8:	eba0 0002 	sub.w	r0, r0, r2
   3a7cc:	461e      	mov	r6, r3
   3a7ce:	d1f1      	bne.n	3a7b4 <mem_free+0x64>
   3a7d0:	2000      	movs	r0, #0
   3a7d2:	4281      	cmp	r1, r0
   3a7d4:	d00d      	beq.n	3a7f2 <mem_free+0xa2>
   3a7d6:	f10e 0e01 	add.w	lr, lr, #1
   3a7da:	45f0      	cmp	r8, lr
   3a7dc:	d1de      	bne.n	3a79c <mem_free+0x4c>
   3a7de:	f8dd c004 	ldr.w	ip, [sp, #4]
   3a7e2:	e7c6      	b.n	3a772 <mem_free+0x22>
   3a7e4:	4665      	mov	r5, ip
   3a7e6:	464e      	mov	r6, r9
   3a7e8:	8833      	ldrh	r3, [r6, #0]
   3a7ea:	fb00 5003 	mla	r0, r0, r3, r5
   3a7ee:	4281      	cmp	r1, r0
   3a7f0:	d1f1      	bne.n	3a7d6 <mem_free+0x86>
   3a7f2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   3a7f6:	f8dd c004 	ldr.w	ip, [sp, #4]
   3a7fa:	d0ba      	beq.n	3a772 <mem_free+0x22>
   3a7fc:	2301      	movs	r3, #1
   3a7fe:	4a08      	ldr	r2, [pc, #32]	; (3a820 <mem_free+0xd0>)
   3a800:	ea4f 115e 	mov.w	r1, lr, lsr #5
   3a804:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3a808:	f00e 0e1f 	and.w	lr, lr, #31
   3a80c:	fa03 fe0e 	lsl.w	lr, r3, lr
   3a810:	ea4e 0000 	orr.w	r0, lr, r0
   3a814:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   3a818:	e7af      	b.n	3a77a <mem_free+0x2a>
   3a81a:	4638      	mov	r0, r7
   3a81c:	e7d9      	b.n	3a7d2 <mem_free+0x82>
   3a81e:	bf00      	nop
   3a820:	2002593c 	.word	0x2002593c
   3a824:	20025980 	.word	0x20025980

0003a828 <mem_alloc.constprop.5>:
   3a828:	2800      	cmp	r0, #0
   3a82a:	d050      	beq.n	3a8ce <mem_alloc.constprop.5+0xa6>
   3a82c:	4b6d      	ldr	r3, [pc, #436]	; (3a9e4 <mem_alloc.constprop.5+0x1bc>)
   3a82e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   3a832:	4290      	cmp	r0, r2
   3a834:	d84b      	bhi.n	3a8ce <mem_alloc.constprop.5+0xa6>
   3a836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a83a:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   3a83e:	b083      	sub	sp, #12
   3a840:	f1bb 0f00 	cmp.w	fp, #0
   3a844:	d054      	beq.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a846:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   3a84a:	4691      	mov	r9, r2
   3a84c:	2600      	movs	r6, #0
   3a84e:	f04f 0812 	mov.w	r8, #18
   3a852:	4f65      	ldr	r7, [pc, #404]	; (3a9e8 <mem_alloc.constprop.5+0x1c0>)
   3a854:	9201      	str	r2, [sp, #4]
   3a856:	f10b 0e11 	add.w	lr, fp, #17
   3a85a:	eb06 0209 	add.w	r2, r6, r9
   3a85e:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   3a862:	3201      	adds	r2, #1
   3a864:	0852      	lsrs	r2, r2, #1
   3a866:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   3a86a:	f102 0112 	add.w	r1, r2, #18
   3a86e:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   3a872:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   3a876:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   3a87a:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   3a87e:	f8dc c004 	ldr.w	ip, [ip, #4]
   3a882:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3a886:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3a88a:	f8da a010 	ldr.w	sl, [sl, #16]
   3a88e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   3a892:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   3a896:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   3a89a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   3a89e:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   3a8a2:	6849      	ldr	r1, [r1, #4]
   3a8a4:	692d      	ldr	r5, [r5, #16]
   3a8a6:	6924      	ldr	r4, [r4, #16]
   3a8a8:	f8dc c004 	ldr.w	ip, [ip, #4]
   3a8ac:	4550      	cmp	r0, sl
   3a8ae:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   3a8b2:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   3a8b6:	d915      	bls.n	3a8e4 <mem_alloc.constprop.5+0xbc>
   3a8b8:	4288      	cmp	r0, r1
   3a8ba:	d211      	bcs.n	3a8e0 <mem_alloc.constprop.5+0xb8>
   3a8bc:	42a8      	cmp	r0, r5
   3a8be:	d908      	bls.n	3a8d2 <mem_alloc.constprop.5+0xaa>
   3a8c0:	1c56      	adds	r6, r2, #1
   3a8c2:	45b1      	cmp	r9, r6
   3a8c4:	f0c0 8087 	bcc.w	3a9d6 <mem_alloc.constprop.5+0x1ae>
   3a8c8:	f102 0813 	add.w	r8, r2, #19
   3a8cc:	e7c5      	b.n	3a85a <mem_alloc.constprop.5+0x32>
   3a8ce:	2000      	movs	r0, #0
   3a8d0:	4770      	bx	lr
   3a8d2:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   3a8d6:	454e      	cmp	r6, r9
   3a8d8:	d87d      	bhi.n	3a9d6 <mem_alloc.constprop.5+0x1ae>
   3a8da:	f102 0e11 	add.w	lr, r2, #17
   3a8de:	e7bc      	b.n	3a85a <mem_alloc.constprop.5+0x32>
   3a8e0:	f109 0601 	add.w	r6, r9, #1
   3a8e4:	45b3      	cmp	fp, r6
   3a8e6:	d007      	beq.n	3a8f8 <mem_alloc.constprop.5+0xd0>
   3a8e8:	2e10      	cmp	r6, #16
   3a8ea:	d001      	beq.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a8ec:	45b3      	cmp	fp, r6
   3a8ee:	d808      	bhi.n	3a902 <mem_alloc.constprop.5+0xda>
   3a8f0:	2000      	movs	r0, #0
   3a8f2:	b003      	add	sp, #12
   3a8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a8f8:	9a01      	ldr	r2, [sp, #4]
   3a8fa:	2a10      	cmp	r2, #16
   3a8fc:	bf18      	it	ne
   3a8fe:	4616      	movne	r6, r2
   3a900:	d0f6      	beq.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a902:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3a9ec <mem_alloc.constprop.5+0x1c4>
   3a906:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   3a90a:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   3a90e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3a912:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   3a916:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   3a91a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3a91e:	691d      	ldr	r5, [r3, #16]
   3a920:	2c00      	cmp	r4, #0
   3a922:	d056      	beq.n	3a9d2 <mem_alloc.constprop.5+0x1aa>
   3a924:	462a      	mov	r2, r5
   3a926:	4670      	mov	r0, lr
   3a928:	00a4      	lsls	r4, r4, #2
   3a92a:	eb05 0904 	add.w	r9, r5, r4
   3a92e:	8851      	ldrh	r1, [r2, #2]
   3a930:	3204      	adds	r2, #4
   3a932:	4591      	cmp	r9, r2
   3a934:	4408      	add	r0, r1
   3a936:	d1fa      	bne.n	3a92e <mem_alloc.constprop.5+0x106>
   3a938:	1929      	adds	r1, r5, r4
   3a93a:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   3a93e:	4482      	add	sl, r0
   3a940:	4582      	cmp	sl, r0
   3a942:	d918      	bls.n	3a976 <mem_alloc.constprop.5+0x14e>
   3a944:	0941      	lsrs	r1, r0, #5
   3a946:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3a94a:	f000 041f 	and.w	r4, r0, #31
   3a94e:	fa22 f904 	lsr.w	r9, r2, r4
   3a952:	f019 0f01 	tst.w	r9, #1
   3a956:	d007      	beq.n	3a968 <mem_alloc.constprop.5+0x140>
   3a958:	e013      	b.n	3a982 <mem_alloc.constprop.5+0x15a>
   3a95a:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3a95e:	fa22 f904 	lsr.w	r9, r2, r4
   3a962:	f019 0f01 	tst.w	r9, #1
   3a966:	d10c      	bne.n	3a982 <mem_alloc.constprop.5+0x15a>
   3a968:	3001      	adds	r0, #1
   3a96a:	4582      	cmp	sl, r0
   3a96c:	ea4f 1150 	mov.w	r1, r0, lsr #5
   3a970:	f000 041f 	and.w	r4, r0, #31
   3a974:	d1f1      	bne.n	3a95a <mem_alloc.constprop.5+0x132>
   3a976:	3601      	adds	r6, #1
   3a978:	455e      	cmp	r6, fp
   3a97a:	f108 0808 	add.w	r8, r8, #8
   3a97e:	d3c4      	bcc.n	3a90a <mem_alloc.constprop.5+0xe2>
   3a980:	e7b6      	b.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a982:	2601      	movs	r6, #1
   3a984:	fa06 f404 	lsl.w	r4, r6, r4
   3a988:	899e      	ldrh	r6, [r3, #12]
   3a98a:	ea22 0204 	bic.w	r2, r2, r4
   3a98e:	eba0 000e 	sub.w	r0, r0, lr
   3a992:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   3a996:	685c      	ldr	r4, [r3, #4]
   3a998:	2e00      	cmp	r6, #0
   3a99a:	d0a9      	beq.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a99c:	886a      	ldrh	r2, [r5, #2]
   3a99e:	4282      	cmp	r2, r0
   3a9a0:	d811      	bhi.n	3a9c6 <mem_alloc.constprop.5+0x19e>
   3a9a2:	2100      	movs	r1, #0
   3a9a4:	1d2b      	adds	r3, r5, #4
   3a9a6:	e003      	b.n	3a9b0 <mem_alloc.constprop.5+0x188>
   3a9a8:	885a      	ldrh	r2, [r3, #2]
   3a9aa:	3304      	adds	r3, #4
   3a9ac:	4282      	cmp	r2, r0
   3a9ae:	d80a      	bhi.n	3a9c6 <mem_alloc.constprop.5+0x19e>
   3a9b0:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3a9b4:	3101      	adds	r1, #1
   3a9b6:	428e      	cmp	r6, r1
   3a9b8:	fb02 4405 	mla	r4, r2, r5, r4
   3a9bc:	eba0 0002 	sub.w	r0, r0, r2
   3a9c0:	461d      	mov	r5, r3
   3a9c2:	d1f1      	bne.n	3a9a8 <mem_alloc.constprop.5+0x180>
   3a9c4:	e794      	b.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a9c6:	882b      	ldrh	r3, [r5, #0]
   3a9c8:	fb00 4003 	mla	r0, r0, r3, r4
   3a9cc:	b003      	add	sp, #12
   3a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a9d2:	4670      	mov	r0, lr
   3a9d4:	e7b0      	b.n	3a938 <mem_alloc.constprop.5+0x110>
   3a9d6:	f1bb 0f10 	cmp.w	fp, #16
   3a9da:	bf08      	it	eq
   3a9dc:	260f      	moveq	r6, #15
   3a9de:	d090      	beq.n	3a902 <mem_alloc.constprop.5+0xda>
   3a9e0:	e786      	b.n	3a8f0 <mem_alloc.constprop.5+0xc8>
   3a9e2:	bf00      	nop
   3a9e4:	200259bc 	.word	0x200259bc
   3a9e8:	20025980 	.word	0x20025980
   3a9ec:	2002593c 	.word	0x2002593c

0003a9f0 <mem_alloc.constprop.4>:
   3a9f0:	2800      	cmp	r0, #0
   3a9f2:	d04c      	beq.n	3aa8e <mem_alloc.constprop.4+0x9e>
   3a9f4:	4b6b      	ldr	r3, [pc, #428]	; (3aba4 <mem_alloc.constprop.4+0x1b4>)
   3a9f6:	681a      	ldr	r2, [r3, #0]
   3a9f8:	4290      	cmp	r0, r2
   3a9fa:	d848      	bhi.n	3aa8e <mem_alloc.constprop.4+0x9e>
   3a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3aa00:	685f      	ldr	r7, [r3, #4]
   3aa02:	b083      	sub	sp, #12
   3aa04:	9700      	str	r7, [sp, #0]
   3aa06:	2f00      	cmp	r7, #0
   3aa08:	d051      	beq.n	3aaae <mem_alloc.constprop.4+0xbe>
   3aa0a:	1e7a      	subs	r2, r7, #1
   3aa0c:	4696      	mov	lr, r2
   3aa0e:	2100      	movs	r1, #0
   3aa10:	f04f 0c01 	mov.w	ip, #1
   3aa14:	4c64      	ldr	r4, [pc, #400]	; (3aba8 <mem_alloc.constprop.4+0x1b8>)
   3aa16:	9201      	str	r2, [sp, #4]
   3aa18:	eb01 020e 	add.w	r2, r1, lr
   3aa1c:	3201      	adds	r2, #1
   3aa1e:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   3aa22:	0852      	lsrs	r2, r2, #1
   3aa24:	f102 0801 	add.w	r8, r2, #1
   3aa28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3aa2c:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   3aa30:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   3aa34:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   3aa38:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   3aa3c:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   3aa40:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3aa44:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3aa48:	f8da a010 	ldr.w	sl, [sl, #16]
   3aa4c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   3aa50:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   3aa54:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   3aa58:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   3aa5c:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   3aa60:	6936      	ldr	r6, [r6, #16]
   3aa62:	f8db b004 	ldr.w	fp, [fp, #4]
   3aa66:	692d      	ldr	r5, [r5, #16]
   3aa68:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3aa6c:	4550      	cmp	r0, sl
   3aa6e:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   3aa72:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   3aa76:	d913      	bls.n	3aaa0 <mem_alloc.constprop.4+0xb0>
   3aa78:	42a8      	cmp	r0, r5
   3aa7a:	d210      	bcs.n	3aa9e <mem_alloc.constprop.4+0xae>
   3aa7c:	42b0      	cmp	r0, r6
   3aa7e:	d908      	bls.n	3aa92 <mem_alloc.constprop.4+0xa2>
   3aa80:	45c6      	cmp	lr, r8
   3aa82:	4641      	mov	r1, r8
   3aa84:	f0c0 8087 	bcc.w	3ab96 <mem_alloc.constprop.4+0x1a6>
   3aa88:	f108 0c01 	add.w	ip, r8, #1
   3aa8c:	e7c4      	b.n	3aa18 <mem_alloc.constprop.4+0x28>
   3aa8e:	2000      	movs	r0, #0
   3aa90:	4770      	bx	lr
   3aa92:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   3aa96:	4571      	cmp	r1, lr
   3aa98:	d87d      	bhi.n	3ab96 <mem_alloc.constprop.4+0x1a6>
   3aa9a:	4617      	mov	r7, r2
   3aa9c:	e7bc      	b.n	3aa18 <mem_alloc.constprop.4+0x28>
   3aa9e:	4639      	mov	r1, r7
   3aaa0:	9a00      	ldr	r2, [sp, #0]
   3aaa2:	428a      	cmp	r2, r1
   3aaa4:	d007      	beq.n	3aab6 <mem_alloc.constprop.4+0xc6>
   3aaa6:	2910      	cmp	r1, #16
   3aaa8:	d001      	beq.n	3aaae <mem_alloc.constprop.4+0xbe>
   3aaaa:	428a      	cmp	r2, r1
   3aaac:	d808      	bhi.n	3aac0 <mem_alloc.constprop.4+0xd0>
   3aaae:	2000      	movs	r0, #0
   3aab0:	b003      	add	sp, #12
   3aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aab6:	9a01      	ldr	r2, [sp, #4]
   3aab8:	2a10      	cmp	r2, #16
   3aaba:	bf18      	it	ne
   3aabc:	4611      	movne	r1, r2
   3aabe:	d0f6      	beq.n	3aaae <mem_alloc.constprop.4+0xbe>
   3aac0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3abac <mem_alloc.constprop.4+0x1bc>
   3aac4:	f8dd 9000 	ldr.w	r9, [sp]
   3aac8:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   3aacc:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   3aad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3aad4:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   3aad8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   3aadc:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3aae0:	691f      	ldr	r7, [r3, #16]
   3aae2:	2e00      	cmp	r6, #0
   3aae4:	d055      	beq.n	3ab92 <mem_alloc.constprop.4+0x1a2>
   3aae6:	463a      	mov	r2, r7
   3aae8:	4670      	mov	r0, lr
   3aaea:	00b6      	lsls	r6, r6, #2
   3aaec:	eb07 0a06 	add.w	sl, r7, r6
   3aaf0:	8855      	ldrh	r5, [r2, #2]
   3aaf2:	3204      	adds	r2, #4
   3aaf4:	4592      	cmp	sl, r2
   3aaf6:	4428      	add	r0, r5
   3aaf8:	d1fa      	bne.n	3aaf0 <mem_alloc.constprop.4+0x100>
   3aafa:	19bd      	adds	r5, r7, r6
   3aafc:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   3ab00:	4483      	add	fp, r0
   3ab02:	4583      	cmp	fp, r0
   3ab04:	d918      	bls.n	3ab38 <mem_alloc.constprop.4+0x148>
   3ab06:	0945      	lsrs	r5, r0, #5
   3ab08:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3ab0c:	f000 061f 	and.w	r6, r0, #31
   3ab10:	fa22 fa06 	lsr.w	sl, r2, r6
   3ab14:	f01a 0f01 	tst.w	sl, #1
   3ab18:	d007      	beq.n	3ab2a <mem_alloc.constprop.4+0x13a>
   3ab1a:	e013      	b.n	3ab44 <mem_alloc.constprop.4+0x154>
   3ab1c:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3ab20:	fa22 fa06 	lsr.w	sl, r2, r6
   3ab24:	f01a 0f01 	tst.w	sl, #1
   3ab28:	d10c      	bne.n	3ab44 <mem_alloc.constprop.4+0x154>
   3ab2a:	3001      	adds	r0, #1
   3ab2c:	4583      	cmp	fp, r0
   3ab2e:	ea4f 1550 	mov.w	r5, r0, lsr #5
   3ab32:	f000 061f 	and.w	r6, r0, #31
   3ab36:	d1f1      	bne.n	3ab1c <mem_alloc.constprop.4+0x12c>
   3ab38:	3101      	adds	r1, #1
   3ab3a:	4549      	cmp	r1, r9
   3ab3c:	f108 0808 	add.w	r8, r8, #8
   3ab40:	d3c4      	bcc.n	3aacc <mem_alloc.constprop.4+0xdc>
   3ab42:	e7b4      	b.n	3aaae <mem_alloc.constprop.4+0xbe>
   3ab44:	2101      	movs	r1, #1
   3ab46:	40b1      	lsls	r1, r6
   3ab48:	899e      	ldrh	r6, [r3, #12]
   3ab4a:	ea22 0201 	bic.w	r2, r2, r1
   3ab4e:	eba0 000e 	sub.w	r0, r0, lr
   3ab52:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   3ab56:	685c      	ldr	r4, [r3, #4]
   3ab58:	2e00      	cmp	r6, #0
   3ab5a:	d0a8      	beq.n	3aaae <mem_alloc.constprop.4+0xbe>
   3ab5c:	887a      	ldrh	r2, [r7, #2]
   3ab5e:	4282      	cmp	r2, r0
   3ab60:	d811      	bhi.n	3ab86 <mem_alloc.constprop.4+0x196>
   3ab62:	2100      	movs	r1, #0
   3ab64:	1d3b      	adds	r3, r7, #4
   3ab66:	e003      	b.n	3ab70 <mem_alloc.constprop.4+0x180>
   3ab68:	885a      	ldrh	r2, [r3, #2]
   3ab6a:	3304      	adds	r3, #4
   3ab6c:	4282      	cmp	r2, r0
   3ab6e:	d80a      	bhi.n	3ab86 <mem_alloc.constprop.4+0x196>
   3ab70:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3ab74:	3101      	adds	r1, #1
   3ab76:	428e      	cmp	r6, r1
   3ab78:	eba0 0002 	sub.w	r0, r0, r2
   3ab7c:	fb02 4405 	mla	r4, r2, r5, r4
   3ab80:	461f      	mov	r7, r3
   3ab82:	d1f1      	bne.n	3ab68 <mem_alloc.constprop.4+0x178>
   3ab84:	e793      	b.n	3aaae <mem_alloc.constprop.4+0xbe>
   3ab86:	883b      	ldrh	r3, [r7, #0]
   3ab88:	fb00 4003 	mla	r0, r0, r3, r4
   3ab8c:	b003      	add	sp, #12
   3ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ab92:	4670      	mov	r0, lr
   3ab94:	e7b1      	b.n	3aafa <mem_alloc.constprop.4+0x10a>
   3ab96:	9a00      	ldr	r2, [sp, #0]
   3ab98:	2a10      	cmp	r2, #16
   3ab9a:	bf08      	it	eq
   3ab9c:	210f      	moveq	r1, #15
   3ab9e:	d08f      	beq.n	3aac0 <mem_alloc.constprop.4+0xd0>
   3aba0:	e785      	b.n	3aaae <mem_alloc.constprop.4+0xbe>
   3aba2:	bf00      	nop
   3aba4:	200259bc 	.word	0x200259bc
   3aba8:	20025980 	.word	0x20025980
   3abac:	2002593c 	.word	0x2002593c

0003abb0 <nrf_mem_init>:
   3abb0:	b570      	push	{r4, r5, r6, lr}
   3abb2:	2200      	movs	r2, #0
   3abb4:	2501      	movs	r5, #1
   3abb6:	4833      	ldr	r0, [pc, #204]	; (3ac84 <nrf_mem_init+0xd4>)
   3abb8:	0951      	lsrs	r1, r2, #5
   3abba:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3abbe:	f002 031f 	and.w	r3, r2, #31
   3abc2:	fa05 f303 	lsl.w	r3, r5, r3
   3abc6:	3201      	adds	r2, #1
   3abc8:	4323      	orrs	r3, r4
   3abca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   3abce:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   3abd2:	d1f1      	bne.n	3abb8 <nrf_mem_init+0x8>
   3abd4:	2400      	movs	r4, #0
   3abd6:	4b2c      	ldr	r3, [pc, #176]	; (3ac88 <nrf_mem_init+0xd8>)
   3abd8:	4621      	mov	r1, r4
   3abda:	223c      	movs	r2, #60	; 0x3c
   3abdc:	482b      	ldr	r0, [pc, #172]	; (3ac8c <nrf_mem_init+0xdc>)
   3abde:	601c      	str	r4, [r3, #0]
   3abe0:	f00a fb42 	bl	45268 <memset>
   3abe4:	2110      	movs	r1, #16
   3abe6:	2205      	movs	r2, #5
   3abe8:	4b29      	ldr	r3, [pc, #164]	; (3ac90 <nrf_mem_init+0xe0>)
   3abea:	4e2a      	ldr	r6, [pc, #168]	; (3ac94 <nrf_mem_init+0xe4>)
   3abec:	e9c3 4400 	strd	r4, r4, [r3]
   3abf0:	60d9      	str	r1, [r3, #12]
   3abf2:	6159      	str	r1, [r3, #20]
   3abf4:	61d9      	str	r1, [r3, #28]
   3abf6:	6259      	str	r1, [r3, #36]	; 0x24
   3abf8:	62d9      	str	r1, [r3, #44]	; 0x2c
   3abfa:	6359      	str	r1, [r3, #52]	; 0x34
   3abfc:	63d9      	str	r1, [r3, #60]	; 0x3c
   3abfe:	6459      	str	r1, [r3, #68]	; 0x44
   3ac00:	64d9      	str	r1, [r3, #76]	; 0x4c
   3ac02:	6559      	str	r1, [r3, #84]	; 0x54
   3ac04:	65d9      	str	r1, [r3, #92]	; 0x5c
   3ac06:	6659      	str	r1, [r3, #100]	; 0x64
   3ac08:	66d9      	str	r1, [r3, #108]	; 0x6c
   3ac0a:	6759      	str	r1, [r3, #116]	; 0x74
   3ac0c:	67d9      	str	r1, [r3, #124]	; 0x7c
   3ac0e:	609a      	str	r2, [r3, #8]
   3ac10:	611a      	str	r2, [r3, #16]
   3ac12:	619a      	str	r2, [r3, #24]
   3ac14:	621a      	str	r2, [r3, #32]
   3ac16:	629a      	str	r2, [r3, #40]	; 0x28
   3ac18:	631a      	str	r2, [r3, #48]	; 0x30
   3ac1a:	639a      	str	r2, [r3, #56]	; 0x38
   3ac1c:	641a      	str	r2, [r3, #64]	; 0x40
   3ac1e:	649a      	str	r2, [r3, #72]	; 0x48
   3ac20:	651a      	str	r2, [r3, #80]	; 0x50
   3ac22:	659a      	str	r2, [r3, #88]	; 0x58
   3ac24:	661a      	str	r2, [r3, #96]	; 0x60
   3ac26:	669a      	str	r2, [r3, #104]	; 0x68
   3ac28:	671a      	str	r2, [r3, #112]	; 0x70
   3ac2a:	679a      	str	r2, [r3, #120]	; 0x78
   3ac2c:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   3ac30:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   3ac34:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   3ac38:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   3ac3c:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   3ac40:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   3ac44:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   3ac48:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   3ac4c:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   3ac50:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   3ac54:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   3ac58:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   3ac5c:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   3ac60:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   3ac64:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   3ac68:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   3ac6c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   3ac70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3ac74:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   3ac78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3ac7c:	4620      	mov	r0, r4
   3ac7e:	7035      	strb	r5, [r6, #0]
   3ac80:	bd70      	pop	{r4, r5, r6, pc}
   3ac82:	bf00      	nop
   3ac84:	2002593c 	.word	0x2002593c
   3ac88:	2002597c 	.word	0x2002597c
   3ac8c:	20025980 	.word	0x20025980
   3ac90:	200259bc 	.word	0x200259bc
   3ac94:	2002cb16 	.word	0x2002cb16

0003ac98 <nrf_mem_register>:
   3ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ac9c:	4b87      	ldr	r3, [pc, #540]	; (3aebc <nrf_mem_register+0x224>)
   3ac9e:	b087      	sub	sp, #28
   3aca0:	781b      	ldrb	r3, [r3, #0]
   3aca2:	2b00      	cmp	r3, #0
   3aca4:	f000 808c 	beq.w	3adc0 <nrf_mem_register+0x128>
   3aca8:	b328      	cbz	r0, 3acf6 <nrf_mem_register+0x5e>
   3acaa:	b321      	cbz	r1, 3acf6 <nrf_mem_register+0x5e>
   3acac:	780b      	ldrb	r3, [r1, #0]
   3acae:	f8df 8218 	ldr.w	r8, [pc, #536]	; 3aec8 <nrf_mem_register+0x230>
   3acb2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   3acb6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3acba:	685b      	ldr	r3, [r3, #4]
   3acbc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   3acc0:	4463      	add	r3, ip
   3acc2:	2b10      	cmp	r3, #16
   3acc4:	d811      	bhi.n	3acea <nrf_mem_register+0x52>
   3acc6:	f04f 0a00 	mov.w	sl, #0
   3acca:	4689      	mov	r9, r1
   3accc:	4b7c      	ldr	r3, [pc, #496]	; (3aec0 <nrf_mem_register+0x228>)
   3acce:	4f7d      	ldr	r7, [pc, #500]	; (3aec4 <nrf_mem_register+0x22c>)
   3acd0:	681b      	ldr	r3, [r3, #0]
   3acd2:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   3acd6:	9300      	str	r3, [sp, #0]
   3acd8:	68b9      	ldr	r1, [r7, #8]
   3acda:	b191      	cbz	r1, 3ad02 <nrf_mem_register+0x6a>
   3acdc:	f10a 0a01 	add.w	sl, sl, #1
   3ace0:	f1ba 0f05 	cmp.w	sl, #5
   3ace4:	f107 070c 	add.w	r7, r7, #12
   3ace8:	d1f6      	bne.n	3acd8 <nrf_mem_register+0x40>
   3acea:	f248 1b07 	movw	fp, #33031	; 0x8107
   3acee:	4658      	mov	r0, fp
   3acf0:	b007      	add	sp, #28
   3acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3acf6:	f248 1b0e 	movw	fp, #33038	; 0x810e
   3acfa:	4658      	mov	r0, fp
   3acfc:	b007      	add	sp, #28
   3acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad02:	f1bc 0f00 	cmp.w	ip, #0
   3ad06:	d061      	beq.n	3adcc <nrf_mem_register+0x134>
   3ad08:	460d      	mov	r5, r1
   3ad0a:	460c      	mov	r4, r1
   3ad0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3ad10:	eb0e 0b03 	add.w	fp, lr, r3
   3ad14:	885a      	ldrh	r2, [r3, #2]
   3ad16:	f833 6b04 	ldrh.w	r6, [r3], #4
   3ad1a:	4415      	add	r5, r2
   3ad1c:	459b      	cmp	fp, r3
   3ad1e:	fb02 4406 	mla	r4, r2, r6, r4
   3ad22:	d1f7      	bne.n	3ad14 <nrf_mem_register+0x7c>
   3ad24:	f8d9 3008 	ldr.w	r3, [r9, #8]
   3ad28:	42a3      	cmp	r3, r4
   3ad2a:	d3d7      	bcc.n	3acdc <nrf_mem_register+0x44>
   3ad2c:	9b00      	ldr	r3, [sp, #0]
   3ad2e:	442b      	add	r3, r5
   3ad30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3ad34:	d2d2      	bcs.n	3acdc <nrf_mem_register+0x44>
   3ad36:	4c63      	ldr	r4, [pc, #396]	; (3aec4 <nrf_mem_register+0x22c>)
   3ad38:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   3ad3c:	0092      	lsls	r2, r2, #2
   3ad3e:	f8c0 a000 	str.w	sl, [r0]
   3ad42:	18a0      	adds	r0, r4, r2
   3ad44:	f844 9002 	str.w	r9, [r4, r2]
   3ad48:	9a00      	ldr	r2, [sp, #0]
   3ad4a:	468b      	mov	fp, r1
   3ad4c:	e9c0 2501 	strd	r2, r5, [r0, #4]
   3ad50:	f899 2001 	ldrb.w	r2, [r9, #1]
   3ad54:	485a      	ldr	r0, [pc, #360]	; (3aec0 <nrf_mem_register+0x228>)
   3ad56:	2a01      	cmp	r2, #1
   3ad58:	6003      	str	r3, [r0, #0]
   3ad5a:	d0c8      	beq.n	3acee <nrf_mem_register+0x56>
   3ad5c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   3ad60:	2b00      	cmp	r3, #0
   3ad62:	d0c4      	beq.n	3acee <nrf_mem_register+0x56>
   3ad64:	2500      	movs	r5, #0
   3ad66:	f8cd 9004 	str.w	r9, [sp, #4]
   3ad6a:	f8cd a00c 	str.w	sl, [sp, #12]
   3ad6e:	f8cd b014 	str.w	fp, [sp, #20]
   3ad72:	9b01      	ldr	r3, [sp, #4]
   3ad74:	781f      	ldrb	r7, [r3, #0]
   3ad76:	691a      	ldr	r2, [r3, #16]
   3ad78:	013b      	lsls	r3, r7, #4
   3ad7a:	eb03 0907 	add.w	r9, r3, r7
   3ad7e:	9300      	str	r3, [sp, #0]
   3ad80:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3ad84:	6859      	ldr	r1, [r3, #4]
   3ad86:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   3ad8a:	9102      	str	r1, [sp, #8]
   3ad8c:	bb39      	cbnz	r1, 3adde <nrf_mem_register+0x146>
   3ad8e:	9a03      	ldr	r2, [sp, #12]
   3ad90:	60dd      	str	r5, [r3, #12]
   3ad92:	609a      	str	r2, [r3, #8]
   3ad94:	9b00      	ldr	r3, [sp, #0]
   3ad96:	443b      	add	r3, r7
   3ad98:	461f      	mov	r7, r3
   3ad9a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   3ad9e:	684b      	ldr	r3, [r1, #4]
   3ada0:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   3ada4:	3301      	adds	r3, #1
   3ada6:	4294      	cmp	r4, r2
   3ada8:	604b      	str	r3, [r1, #4]
   3adaa:	d912      	bls.n	3add2 <nrf_mem_register+0x13a>
   3adac:	9b01      	ldr	r3, [sp, #4]
   3adae:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   3adb2:	899b      	ldrh	r3, [r3, #12]
   3adb4:	3501      	adds	r5, #1
   3adb6:	429d      	cmp	r5, r3
   3adb8:	d3db      	bcc.n	3ad72 <nrf_mem_register+0xda>
   3adba:	f8dd b014 	ldr.w	fp, [sp, #20]
   3adbe:	e796      	b.n	3acee <nrf_mem_register+0x56>
   3adc0:	f248 1b08 	movw	fp, #33032	; 0x8108
   3adc4:	4658      	mov	r0, fp
   3adc6:	b007      	add	sp, #28
   3adc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3adcc:	9b00      	ldr	r3, [sp, #0]
   3adce:	4665      	mov	r5, ip
   3add0:	e7ae      	b.n	3ad30 <nrf_mem_register+0x98>
   3add2:	9b01      	ldr	r3, [sp, #4]
   3add4:	3501      	adds	r5, #1
   3add6:	899b      	ldrh	r3, [r3, #12]
   3add8:	42ab      	cmp	r3, r5
   3adda:	d8ca      	bhi.n	3ad72 <nrf_mem_register+0xda>
   3addc:	e7ed      	b.n	3adba <nrf_mem_register+0x122>
   3adde:	2600      	movs	r6, #0
   3ade0:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   3ade4:	9504      	str	r5, [sp, #16]
   3ade6:	eb06 000a 	add.w	r0, r6, sl
   3adea:	eb09 0206 	add.w	r2, r9, r6
   3adee:	3201      	adds	r2, #1
   3adf0:	3001      	adds	r0, #1
   3adf2:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   3adf6:	0840      	lsrs	r0, r0, #1
   3adf8:	4d32      	ldr	r5, [pc, #200]	; (3aec4 <nrf_mem_register+0x22c>)
   3adfa:	eb09 0100 	add.w	r1, r9, r0
   3adfe:	eb09 030a 	add.w	r3, r9, sl
   3ae02:	3101      	adds	r1, #1
   3ae04:	3301      	adds	r3, #1
   3ae06:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3ae0a:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   3ae0e:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   3ae12:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   3ae16:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   3ae1a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   3ae1e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3ae22:	f8db b010 	ldr.w	fp, [fp, #16]
   3ae26:	6852      	ldr	r2, [r2, #4]
   3ae28:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   3ae2c:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   3ae30:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   3ae34:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3ae38:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   3ae3c:	f8de e010 	ldr.w	lr, [lr, #16]
   3ae40:	6849      	ldr	r1, [r1, #4]
   3ae42:	f8dc c010 	ldr.w	ip, [ip, #16]
   3ae46:	685b      	ldr	r3, [r3, #4]
   3ae48:	4294      	cmp	r4, r2
   3ae4a:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   3ae4e:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   3ae52:	d92d      	bls.n	3aeb0 <nrf_mem_register+0x218>
   3ae54:	429c      	cmp	r4, r3
   3ae56:	d22d      	bcs.n	3aeb4 <nrf_mem_register+0x21c>
   3ae58:	428c      	cmp	r4, r1
   3ae5a:	d924      	bls.n	3aea6 <nrf_mem_register+0x20e>
   3ae5c:	1c46      	adds	r6, r0, #1
   3ae5e:	45b2      	cmp	sl, r6
   3ae60:	d2c1      	bcs.n	3ade6 <nrf_mem_register+0x14e>
   3ae62:	2610      	movs	r6, #16
   3ae64:	9d04      	ldr	r5, [sp, #16]
   3ae66:	9a02      	ldr	r2, [sp, #8]
   3ae68:	42b2      	cmp	r2, r6
   3ae6a:	d911      	bls.n	3ae90 <nrf_mem_register+0x1f8>
   3ae6c:	9b00      	ldr	r3, [sp, #0]
   3ae6e:	443b      	add	r3, r7
   3ae70:	441a      	add	r2, r3
   3ae72:	4433      	add	r3, r6
   3ae74:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   3ae78:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   3ae7c:	2208      	movs	r2, #8
   3ae7e:	4651      	mov	r1, sl
   3ae80:	eb0a 0002 	add.w	r0, sl, r2
   3ae84:	f1aa 0a08 	sub.w	sl, sl, #8
   3ae88:	f00a f9ce 	bl	45228 <memcpy>
   3ae8c:	45d1      	cmp	r9, sl
   3ae8e:	d1f5      	bne.n	3ae7c <nrf_mem_register+0x1e4>
   3ae90:	9b00      	ldr	r3, [sp, #0]
   3ae92:	9903      	ldr	r1, [sp, #12]
   3ae94:	443b      	add	r3, r7
   3ae96:	4433      	add	r3, r6
   3ae98:	3301      	adds	r3, #1
   3ae9a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   3ae9e:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   3aea2:	6055      	str	r5, [r2, #4]
   3aea4:	e776      	b.n	3ad94 <nrf_mem_register+0xfc>
   3aea6:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   3aeaa:	4556      	cmp	r6, sl
   3aeac:	d99b      	bls.n	3ade6 <nrf_mem_register+0x14e>
   3aeae:	e7d8      	b.n	3ae62 <nrf_mem_register+0x1ca>
   3aeb0:	9d04      	ldr	r5, [sp, #16]
   3aeb2:	e7d8      	b.n	3ae66 <nrf_mem_register+0x1ce>
   3aeb4:	9d04      	ldr	r5, [sp, #16]
   3aeb6:	f10a 0601 	add.w	r6, sl, #1
   3aeba:	e7d4      	b.n	3ae66 <nrf_mem_register+0x1ce>
   3aebc:	2002cb16 	.word	0x2002cb16
   3aec0:	2002597c 	.word	0x2002597c
   3aec4:	20025980 	.word	0x20025980
   3aec8:	200259bc 	.word	0x200259bc

0003aecc <nrf_malloc>:
   3aecc:	4b03      	ldr	r3, [pc, #12]	; (3aedc <nrf_malloc+0x10>)
   3aece:	781b      	ldrb	r3, [r3, #0]
   3aed0:	b10b      	cbz	r3, 3aed6 <nrf_malloc+0xa>
   3aed2:	f7ff bd8d 	b.w	3a9f0 <mem_alloc.constprop.4>
   3aed6:	4618      	mov	r0, r3
   3aed8:	4770      	bx	lr
   3aeda:	bf00      	nop
   3aedc:	2002cb16 	.word	0x2002cb16

0003aee0 <nrf_free>:
   3aee0:	4b04      	ldr	r3, [pc, #16]	; (3aef4 <nrf_free+0x14>)
   3aee2:	781b      	ldrb	r3, [r3, #0]
   3aee4:	b123      	cbz	r3, 3aef0 <nrf_free+0x10>
   3aee6:	b118      	cbz	r0, 3aef0 <nrf_free+0x10>
   3aee8:	4601      	mov	r1, r0
   3aeea:	2000      	movs	r0, #0
   3aeec:	f7ff bc30 	b.w	3a750 <mem_free>
   3aef0:	4770      	bx	lr
   3aef2:	bf00      	nop
   3aef4:	2002cb16 	.word	0x2002cb16

0003aef8 <nrf_shared_malloc>:
   3aef8:	4b03      	ldr	r3, [pc, #12]	; (3af08 <nrf_shared_malloc+0x10>)
   3aefa:	781b      	ldrb	r3, [r3, #0]
   3aefc:	b10b      	cbz	r3, 3af02 <nrf_shared_malloc+0xa>
   3aefe:	f7ff bc93 	b.w	3a828 <mem_alloc.constprop.5>
   3af02:	4618      	mov	r0, r3
   3af04:	4770      	bx	lr
   3af06:	bf00      	nop
   3af08:	2002cb16 	.word	0x2002cb16

0003af0c <nrf_shared_free>:
   3af0c:	4b04      	ldr	r3, [pc, #16]	; (3af20 <nrf_shared_free+0x14>)
   3af0e:	781b      	ldrb	r3, [r3, #0]
   3af10:	b123      	cbz	r3, 3af1c <nrf_shared_free+0x10>
   3af12:	b118      	cbz	r0, 3af1c <nrf_shared_free+0x10>
   3af14:	4601      	mov	r1, r0
   3af16:	2001      	movs	r0, #1
   3af18:	f7ff bc1a 	b.w	3a750 <mem_free>
   3af1c:	4770      	bx	lr
   3af1e:	bf00      	nop
   3af20:	2002cb16 	.word	0x2002cb16

0003af24 <rpc_dfu_event_handler>:
   3af24:	b508      	push	{r3, lr}
   3af26:	4a08      	ldr	r2, [pc, #32]	; (3af48 <rpc_dfu_event_handler+0x24>)
   3af28:	68c1      	ldr	r1, [r0, #12]
   3af2a:	8812      	ldrh	r2, [r2, #0]
   3af2c:	4603      	mov	r3, r0
   3af2e:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   3af32:	d005      	beq.n	3af40 <rpc_dfu_event_handler+0x1c>
   3af34:	6800      	ldr	r0, [r0, #0]
   3af36:	b110      	cbz	r0, 3af3e <rpc_dfu_event_handler+0x1a>
   3af38:	f7fd f95e 	bl	381f8 <rpc_dfu_client_data_free>
   3af3c:	2000      	movs	r0, #0
   3af3e:	bd08      	pop	{r3, pc}
   3af40:	4a02      	ldr	r2, [pc, #8]	; (3af4c <rpc_dfu_event_handler+0x28>)
   3af42:	2001      	movs	r0, #1
   3af44:	6013      	str	r3, [r2, #0]
   3af46:	bd08      	pop	{r3, pc}
   3af48:	2002a398 	.word	0x2002a398
   3af4c:	20025ad8 	.word	0x20025ad8

0003af50 <mfu_interface_init>:
   3af50:	2300      	movs	r3, #0
   3af52:	b510      	push	{r4, lr}
   3af54:	4808      	ldr	r0, [pc, #32]	; (3af78 <mfu_interface_init+0x28>)
   3af56:	4909      	ldr	r1, [pc, #36]	; (3af7c <mfu_interface_init+0x2c>)
   3af58:	4a09      	ldr	r2, [pc, #36]	; (3af80 <mfu_interface_init+0x30>)
   3af5a:	4c0a      	ldr	r4, [pc, #40]	; (3af84 <mfu_interface_init+0x34>)
   3af5c:	8003      	strh	r3, [r0, #0]
   3af5e:	600b      	str	r3, [r1, #0]
   3af60:	6013      	str	r3, [r2, #0]
   3af62:	6023      	str	r3, [r4, #0]
   3af64:	f7fd f90e 	bl	38184 <rpc_dfu_client_init>
   3af68:	b910      	cbnz	r0, 3af70 <mfu_interface_init+0x20>
   3af6a:	2301      	movs	r3, #1
   3af6c:	6023      	str	r3, [r4, #0]
   3af6e:	bd10      	pop	{r4, pc}
   3af70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3af74:	bd10      	pop	{r4, pc}
   3af76:	bf00      	nop
   3af78:	2002a398 	.word	0x2002a398
   3af7c:	20025ad8 	.word	0x20025ad8
   3af80:	20025ad4 	.word	0x20025ad4
   3af84:	20025acc 	.word	0x20025acc

0003af88 <mfu_interface_deinit>:
   3af88:	b510      	push	{r4, lr}
   3af8a:	4c06      	ldr	r4, [pc, #24]	; (3afa4 <mfu_interface_deinit+0x1c>)
   3af8c:	6820      	ldr	r0, [r4, #0]
   3af8e:	b900      	cbnz	r0, 3af92 <mfu_interface_deinit+0xa>
   3af90:	bd10      	pop	{r4, pc}
   3af92:	f7fd f8fd 	bl	38190 <rpc_dfu_client_deinit>
   3af96:	b908      	cbnz	r0, 3af9c <mfu_interface_deinit+0x14>
   3af98:	6020      	str	r0, [r4, #0]
   3af9a:	bd10      	pop	{r4, pc}
   3af9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3afa0:	bd10      	pop	{r4, pc}
   3afa2:	bf00      	nop
   3afa4:	20025acc 	.word	0x20025acc

0003afa8 <mfu_interface_open>:
   3afa8:	b508      	push	{r3, lr}
   3afaa:	4b07      	ldr	r3, [pc, #28]	; (3afc8 <mfu_interface_open+0x20>)
   3afac:	681a      	ldr	r2, [r3, #0]
   3afae:	2a01      	cmp	r2, #1
   3afb0:	d103      	bne.n	3afba <mfu_interface_open+0x12>
   3afb2:	2202      	movs	r2, #2
   3afb4:	601a      	str	r2, [r3, #0]
   3afb6:	4805      	ldr	r0, [pc, #20]	; (3afcc <mfu_interface_open+0x24>)
   3afb8:	bd08      	pop	{r3, pc}
   3afba:	2001      	movs	r0, #1
   3afbc:	f7ee fbaa 	bl	29714 <bsd_os_errno_set>
   3afc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3afc4:	bd08      	pop	{r3, pc}
   3afc6:	bf00      	nop
   3afc8:	20025acc 	.word	0x20025acc
   3afcc:	49765432 	.word	0x49765432

0003afd0 <mfu_interface_close>:
   3afd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3afd2:	4c32      	ldr	r4, [pc, #200]	; (3b09c <mfu_interface_close+0xcc>)
   3afd4:	b083      	sub	sp, #12
   3afd6:	6823      	ldr	r3, [r4, #0]
   3afd8:	1e9a      	subs	r2, r3, #2
   3afda:	2a01      	cmp	r2, #1
   3afdc:	d857      	bhi.n	3b08e <mfu_interface_close+0xbe>
   3afde:	2b03      	cmp	r3, #3
   3afe0:	d004      	beq.n	3afec <mfu_interface_close+0x1c>
   3afe2:	2301      	movs	r3, #1
   3afe4:	2000      	movs	r0, #0
   3afe6:	6023      	str	r3, [r4, #0]
   3afe8:	b003      	add	sp, #12
   3afea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3afec:	2100      	movs	r1, #0
   3afee:	4668      	mov	r0, sp
   3aff0:	f7fd f8d2 	bl	38198 <rpc_dfu_client_request_alloc>
   3aff4:	4603      	mov	r3, r0
   3aff6:	2800      	cmp	r0, #0
   3aff8:	d13d      	bne.n	3b076 <mfu_interface_close+0xa6>
   3affa:	2104      	movs	r1, #4
   3affc:	4e28      	ldr	r6, [pc, #160]	; (3b0a0 <mfu_interface_close+0xd0>)
   3affe:	9800      	ldr	r0, [sp, #0]
   3b000:	8832      	ldrh	r2, [r6, #0]
   3b002:	7201      	strb	r1, [r0, #8]
   3b004:	3201      	adds	r2, #1
   3b006:	b292      	uxth	r2, r2
   3b008:	0411      	lsls	r1, r2, #16
   3b00a:	f041 0106 	orr.w	r1, r1, #6
   3b00e:	4d25      	ldr	r5, [pc, #148]	; (3b0a4 <mfu_interface_close+0xd4>)
   3b010:	60c1      	str	r1, [r0, #12]
   3b012:	7103      	strb	r3, [r0, #4]
   3b014:	7143      	strb	r3, [r0, #5]
   3b016:	7183      	strb	r3, [r0, #6]
   3b018:	71c3      	strb	r3, [r0, #7]
   3b01a:	7243      	strb	r3, [r0, #9]
   3b01c:	7283      	strb	r3, [r0, #10]
   3b01e:	72c3      	strb	r3, [r0, #11]
   3b020:	2106      	movs	r1, #6
   3b022:	8032      	strh	r2, [r6, #0]
   3b024:	602b      	str	r3, [r5, #0]
   3b026:	f7fd f8cb 	bl	381c0 <rpc_dfu_client_request_send>
   3b02a:	b9d8      	cbnz	r0, 3b064 <mfu_interface_close+0x94>
   3b02c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b030:	ae02      	add	r6, sp, #8
   3b032:	4627      	mov	r7, r4
   3b034:	f846 3d04 	str.w	r3, [r6, #-4]!
   3b038:	e004      	b.n	3b044 <mfu_interface_close+0x74>
   3b03a:	4631      	mov	r1, r6
   3b03c:	4638      	mov	r0, r7
   3b03e:	f7ee faa9 	bl	29594 <bsd_os_timedwait>
   3b042:	b9f0      	cbnz	r0, 3b082 <mfu_interface_close+0xb2>
   3b044:	6828      	ldr	r0, [r5, #0]
   3b046:	2800      	cmp	r0, #0
   3b048:	d0f7      	beq.n	3b03a <mfu_interface_close+0x6a>
   3b04a:	6905      	ldr	r5, [r0, #16]
   3b04c:	f7fd f8cc 	bl	381e8 <rpc_dfu_client_message_free>
   3b050:	2d00      	cmp	r5, #0
   3b052:	d0c6      	beq.n	3afe2 <mfu_interface_close+0x12>
   3b054:	4b14      	ldr	r3, [pc, #80]	; (3b0a8 <mfu_interface_close+0xd8>)
   3b056:	2008      	movs	r0, #8
   3b058:	601d      	str	r5, [r3, #0]
   3b05a:	f7ee fb5b 	bl	29714 <bsd_os_errno_set>
   3b05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b062:	e7c1      	b.n	3afe8 <mfu_interface_close+0x18>
   3b064:	9800      	ldr	r0, [sp, #0]
   3b066:	6803      	ldr	r3, [r0, #0]
   3b068:	b11b      	cbz	r3, 3b072 <mfu_interface_close+0xa2>
   3b06a:	4618      	mov	r0, r3
   3b06c:	f7fd f8c4 	bl	381f8 <rpc_dfu_client_data_free>
   3b070:	9800      	ldr	r0, [sp, #0]
   3b072:	f7fd f8b9 	bl	381e8 <rpc_dfu_client_message_free>
   3b076:	200c      	movs	r0, #12
   3b078:	f7ee fb4c 	bl	29714 <bsd_os_errno_set>
   3b07c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b080:	e7b2      	b.n	3afe8 <mfu_interface_close+0x18>
   3b082:	203c      	movs	r0, #60	; 0x3c
   3b084:	f7ee fb46 	bl	29714 <bsd_os_errno_set>
   3b088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b08c:	e7ac      	b.n	3afe8 <mfu_interface_close+0x18>
   3b08e:	2001      	movs	r0, #1
   3b090:	f7ee fb40 	bl	29714 <bsd_os_errno_set>
   3b094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b098:	e7a6      	b.n	3afe8 <mfu_interface_close+0x18>
   3b09a:	bf00      	nop
   3b09c:	20025acc 	.word	0x20025acc
   3b0a0:	2002a398 	.word	0x2002a398
   3b0a4:	20025ad8 	.word	0x20025ad8
   3b0a8:	20025ad0 	.word	0x20025ad0

0003b0ac <mfu_interface_sendto>:
   3b0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b0b0:	4e64      	ldr	r6, [pc, #400]	; (3b244 <mfu_interface_sendto+0x198>)
   3b0b2:	460f      	mov	r7, r1
   3b0b4:	6831      	ldr	r1, [r6, #0]
   3b0b6:	4615      	mov	r5, r2
   3b0b8:	1e8a      	subs	r2, r1, #2
   3b0ba:	2a01      	cmp	r2, #1
   3b0bc:	b082      	sub	sp, #8
   3b0be:	f200 80b4 	bhi.w	3b22a <mfu_interface_sendto+0x17e>
   3b0c2:	2f00      	cmp	r7, #0
   3b0c4:	f000 80a5 	beq.w	3b212 <mfu_interface_sendto+0x166>
   3b0c8:	2d00      	cmp	r5, #0
   3b0ca:	f000 80a2 	beq.w	3b212 <mfu_interface_sendto+0x166>
   3b0ce:	2b00      	cmp	r3, #0
   3b0d0:	f040 80b1 	bne.w	3b236 <mfu_interface_sendto+0x18a>
   3b0d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3b0d6:	2b00      	cmp	r3, #0
   3b0d8:	f040 80a1 	bne.w	3b21e <mfu_interface_sendto+0x172>
   3b0dc:	2902      	cmp	r1, #2
   3b0de:	d04f      	beq.n	3b180 <mfu_interface_sendto+0xd4>
   3b0e0:	46e8      	mov	r8, sp
   3b0e2:	4640      	mov	r0, r8
   3b0e4:	4629      	mov	r1, r5
   3b0e6:	f7fd f857 	bl	38198 <rpc_dfu_client_request_alloc>
   3b0ea:	4606      	mov	r6, r0
   3b0ec:	b140      	cbz	r0, 3b100 <mfu_interface_sendto+0x54>
   3b0ee:	200c      	movs	r0, #12
   3b0f0:	f7ee fb10 	bl	29714 <bsd_os_errno_set>
   3b0f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b0f8:	4628      	mov	r0, r5
   3b0fa:	b002      	add	sp, #8
   3b0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b100:	9b00      	ldr	r3, [sp, #0]
   3b102:	4639      	mov	r1, r7
   3b104:	6818      	ldr	r0, [r3, #0]
   3b106:	462a      	mov	r2, r5
   3b108:	f00a f88e 	bl	45228 <memcpy>
   3b10c:	2104      	movs	r1, #4
   3b10e:	4c4e      	ldr	r4, [pc, #312]	; (3b248 <mfu_interface_sendto+0x19c>)
   3b110:	9800      	ldr	r0, [sp, #0]
   3b112:	8823      	ldrh	r3, [r4, #0]
   3b114:	6045      	str	r5, [r0, #4]
   3b116:	3301      	adds	r3, #1
   3b118:	b29b      	uxth	r3, r3
   3b11a:	041a      	lsls	r2, r3, #16
   3b11c:	8023      	strh	r3, [r4, #0]
   3b11e:	430a      	orrs	r2, r1
   3b120:	4c4a      	ldr	r4, [pc, #296]	; (3b24c <mfu_interface_sendto+0x1a0>)
   3b122:	60c2      	str	r2, [r0, #12]
   3b124:	7246      	strb	r6, [r0, #9]
   3b126:	7286      	strb	r6, [r0, #10]
   3b128:	72c6      	strb	r6, [r0, #11]
   3b12a:	7201      	strb	r1, [r0, #8]
   3b12c:	6026      	str	r6, [r4, #0]
   3b12e:	f7fd f847 	bl	381c0 <rpc_dfu_client_request_send>
   3b132:	2800      	cmp	r0, #0
   3b134:	d163      	bne.n	3b1fe <mfu_interface_sendto+0x152>
   3b136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b13a:	ae02      	add	r6, sp, #8
   3b13c:	4f41      	ldr	r7, [pc, #260]	; (3b244 <mfu_interface_sendto+0x198>)
   3b13e:	f846 3d04 	str.w	r3, [r6, #-4]!
   3b142:	e004      	b.n	3b14e <mfu_interface_sendto+0xa2>
   3b144:	4631      	mov	r1, r6
   3b146:	4638      	mov	r0, r7
   3b148:	f7ee fa24 	bl	29594 <bsd_os_timedwait>
   3b14c:	b978      	cbnz	r0, 3b16e <mfu_interface_sendto+0xc2>
   3b14e:	6820      	ldr	r0, [r4, #0]
   3b150:	2800      	cmp	r0, #0
   3b152:	d0f7      	beq.n	3b144 <mfu_interface_sendto+0x98>
   3b154:	6904      	ldr	r4, [r0, #16]
   3b156:	f7fd f847 	bl	381e8 <rpc_dfu_client_message_free>
   3b15a:	2c00      	cmp	r4, #0
   3b15c:	d0cc      	beq.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b15e:	4b3c      	ldr	r3, [pc, #240]	; (3b250 <mfu_interface_sendto+0x1a4>)
   3b160:	2008      	movs	r0, #8
   3b162:	601c      	str	r4, [r3, #0]
   3b164:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b168:	f7ee fad4 	bl	29714 <bsd_os_errno_set>
   3b16c:	e7c4      	b.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b16e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b172:	203c      	movs	r0, #60	; 0x3c
   3b174:	f7ee face 	bl	29714 <bsd_os_errno_set>
   3b178:	4628      	mov	r0, r5
   3b17a:	b002      	add	sp, #8
   3b17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b180:	46e8      	mov	r8, sp
   3b182:	4619      	mov	r1, r3
   3b184:	4640      	mov	r0, r8
   3b186:	f7fd f807 	bl	38198 <rpc_dfu_client_request_alloc>
   3b18a:	4602      	mov	r2, r0
   3b18c:	2800      	cmp	r0, #0
   3b18e:	d1ae      	bne.n	3b0ee <mfu_interface_sendto+0x42>
   3b190:	f04f 0c08 	mov.w	ip, #8
   3b194:	492c      	ldr	r1, [pc, #176]	; (3b248 <mfu_interface_sendto+0x19c>)
   3b196:	482f      	ldr	r0, [pc, #188]	; (3b254 <mfu_interface_sendto+0x1a8>)
   3b198:	880b      	ldrh	r3, [r1, #0]
   3b19a:	6804      	ldr	r4, [r0, #0]
   3b19c:	3301      	adds	r3, #1
   3b19e:	9800      	ldr	r0, [sp, #0]
   3b1a0:	b29b      	uxth	r3, r3
   3b1a2:	800b      	strh	r3, [r1, #0]
   3b1a4:	041b      	lsls	r3, r3, #16
   3b1a6:	f043 0303 	orr.w	r3, r3, #3
   3b1aa:	6104      	str	r4, [r0, #16]
   3b1ac:	4c27      	ldr	r4, [pc, #156]	; (3b24c <mfu_interface_sendto+0x1a0>)
   3b1ae:	60c3      	str	r3, [r0, #12]
   3b1b0:	7102      	strb	r2, [r0, #4]
   3b1b2:	7142      	strb	r2, [r0, #5]
   3b1b4:	7182      	strb	r2, [r0, #6]
   3b1b6:	71c2      	strb	r2, [r0, #7]
   3b1b8:	7242      	strb	r2, [r0, #9]
   3b1ba:	7282      	strb	r2, [r0, #10]
   3b1bc:	72c2      	strb	r2, [r0, #11]
   3b1be:	f880 c008 	strb.w	ip, [r0, #8]
   3b1c2:	2103      	movs	r1, #3
   3b1c4:	6022      	str	r2, [r4, #0]
   3b1c6:	f7fc fffb 	bl	381c0 <rpc_dfu_client_request_send>
   3b1ca:	b9c0      	cbnz	r0, 3b1fe <mfu_interface_sendto+0x152>
   3b1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b1d0:	f10d 0908 	add.w	r9, sp, #8
   3b1d4:	f849 3d04 	str.w	r3, [r9, #-4]!
   3b1d8:	46b2      	mov	sl, r6
   3b1da:	e005      	b.n	3b1e8 <mfu_interface_sendto+0x13c>
   3b1dc:	4649      	mov	r1, r9
   3b1de:	4650      	mov	r0, sl
   3b1e0:	f7ee f9d8 	bl	29594 <bsd_os_timedwait>
   3b1e4:	2800      	cmp	r0, #0
   3b1e6:	d1c2      	bne.n	3b16e <mfu_interface_sendto+0xc2>
   3b1e8:	6820      	ldr	r0, [r4, #0]
   3b1ea:	2800      	cmp	r0, #0
   3b1ec:	d0f6      	beq.n	3b1dc <mfu_interface_sendto+0x130>
   3b1ee:	6904      	ldr	r4, [r0, #16]
   3b1f0:	f7fc fffa 	bl	381e8 <rpc_dfu_client_message_free>
   3b1f4:	2c00      	cmp	r4, #0
   3b1f6:	d1b2      	bne.n	3b15e <mfu_interface_sendto+0xb2>
   3b1f8:	2303      	movs	r3, #3
   3b1fa:	6033      	str	r3, [r6, #0]
   3b1fc:	e771      	b.n	3b0e2 <mfu_interface_sendto+0x36>
   3b1fe:	9800      	ldr	r0, [sp, #0]
   3b200:	6803      	ldr	r3, [r0, #0]
   3b202:	b11b      	cbz	r3, 3b20c <mfu_interface_sendto+0x160>
   3b204:	4618      	mov	r0, r3
   3b206:	f7fc fff7 	bl	381f8 <rpc_dfu_client_data_free>
   3b20a:	9800      	ldr	r0, [sp, #0]
   3b20c:	f7fc ffec 	bl	381e8 <rpc_dfu_client_message_free>
   3b210:	e76d      	b.n	3b0ee <mfu_interface_sendto+0x42>
   3b212:	2016      	movs	r0, #22
   3b214:	f7ee fa7e 	bl	29714 <bsd_os_errno_set>
   3b218:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b21c:	e76c      	b.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b21e:	2038      	movs	r0, #56	; 0x38
   3b220:	f7ee fa78 	bl	29714 <bsd_os_errno_set>
   3b224:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b228:	e766      	b.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b22a:	2001      	movs	r0, #1
   3b22c:	f7ee fa72 	bl	29714 <bsd_os_errno_set>
   3b230:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b234:	e760      	b.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b236:	202d      	movs	r0, #45	; 0x2d
   3b238:	f7ee fa6c 	bl	29714 <bsd_os_errno_set>
   3b23c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b240:	e75a      	b.n	3b0f8 <mfu_interface_sendto+0x4c>
   3b242:	bf00      	nop
   3b244:	20025acc 	.word	0x20025acc
   3b248:	2002a398 	.word	0x2002a398
   3b24c:	20025ad8 	.word	0x20025ad8
   3b250:	20025ad0 	.word	0x20025ad0
   3b254:	20025ad4 	.word	0x20025ad4

0003b258 <mfu_interface_setopt>:
   3b258:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b25a:	4846      	ldr	r0, [pc, #280]	; (3b374 <mfu_interface_setopt+0x11c>)
   3b25c:	b083      	sub	sp, #12
   3b25e:	6800      	ldr	r0, [r0, #0]
   3b260:	3802      	subs	r0, #2
   3b262:	2801      	cmp	r0, #1
   3b264:	d877      	bhi.n	3b356 <mfu_interface_setopt+0xfe>
   3b266:	f240 2003 	movw	r0, #515	; 0x203
   3b26a:	4281      	cmp	r1, r0
   3b26c:	d16d      	bne.n	3b34a <mfu_interface_setopt+0xf2>
   3b26e:	3a04      	subs	r2, #4
   3b270:	2a03      	cmp	r2, #3
   3b272:	d85c      	bhi.n	3b32e <mfu_interface_setopt+0xd6>
   3b274:	e8df f002 	tbb	[pc, r2]
   3b278:	514e024b 	.word	0x514e024b
   3b27c:	2407      	movs	r4, #7
   3b27e:	4625      	mov	r5, r4
   3b280:	2100      	movs	r1, #0
   3b282:	4668      	mov	r0, sp
   3b284:	f7fc ff88 	bl	38198 <rpc_dfu_client_request_alloc>
   3b288:	4603      	mov	r3, r0
   3b28a:	2800      	cmp	r0, #0
   3b28c:	d138      	bne.n	3b300 <mfu_interface_setopt+0xa8>
   3b28e:	2704      	movs	r7, #4
   3b290:	4e39      	ldr	r6, [pc, #228]	; (3b378 <mfu_interface_setopt+0x120>)
   3b292:	9800      	ldr	r0, [sp, #0]
   3b294:	8832      	ldrh	r2, [r6, #0]
   3b296:	4629      	mov	r1, r5
   3b298:	3201      	adds	r2, #1
   3b29a:	b292      	uxth	r2, r2
   3b29c:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   3b2a0:	4c36      	ldr	r4, [pc, #216]	; (3b37c <mfu_interface_setopt+0x124>)
   3b2a2:	60c5      	str	r5, [r0, #12]
   3b2a4:	7103      	strb	r3, [r0, #4]
   3b2a6:	7143      	strb	r3, [r0, #5]
   3b2a8:	7183      	strb	r3, [r0, #6]
   3b2aa:	71c3      	strb	r3, [r0, #7]
   3b2ac:	7243      	strb	r3, [r0, #9]
   3b2ae:	7283      	strb	r3, [r0, #10]
   3b2b0:	72c3      	strb	r3, [r0, #11]
   3b2b2:	7207      	strb	r7, [r0, #8]
   3b2b4:	8032      	strh	r2, [r6, #0]
   3b2b6:	6023      	str	r3, [r4, #0]
   3b2b8:	f7fc ff82 	bl	381c0 <rpc_dfu_client_request_send>
   3b2bc:	b9b8      	cbnz	r0, 3b2ee <mfu_interface_setopt+0x96>
   3b2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b2c2:	ad02      	add	r5, sp, #8
   3b2c4:	4e2b      	ldr	r6, [pc, #172]	; (3b374 <mfu_interface_setopt+0x11c>)
   3b2c6:	f845 3d04 	str.w	r3, [r5, #-4]!
   3b2ca:	e005      	b.n	3b2d8 <mfu_interface_setopt+0x80>
   3b2cc:	4629      	mov	r1, r5
   3b2ce:	4630      	mov	r0, r6
   3b2d0:	f7ee f960 	bl	29594 <bsd_os_timedwait>
   3b2d4:	2800      	cmp	r0, #0
   3b2d6:	d131      	bne.n	3b33c <mfu_interface_setopt+0xe4>
   3b2d8:	6820      	ldr	r0, [r4, #0]
   3b2da:	2800      	cmp	r0, #0
   3b2dc:	d0f6      	beq.n	3b2cc <mfu_interface_setopt+0x74>
   3b2de:	6904      	ldr	r4, [r0, #16]
   3b2e0:	f7fc ff82 	bl	381e8 <rpc_dfu_client_message_free>
   3b2e4:	2c00      	cmp	r4, #0
   3b2e6:	d13c      	bne.n	3b362 <mfu_interface_setopt+0x10a>
   3b2e8:	4620      	mov	r0, r4
   3b2ea:	b003      	add	sp, #12
   3b2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b2ee:	9800      	ldr	r0, [sp, #0]
   3b2f0:	6803      	ldr	r3, [r0, #0]
   3b2f2:	b11b      	cbz	r3, 3b2fc <mfu_interface_setopt+0xa4>
   3b2f4:	4618      	mov	r0, r3
   3b2f6:	f7fc ff7f 	bl	381f8 <rpc_dfu_client_data_free>
   3b2fa:	9800      	ldr	r0, [sp, #0]
   3b2fc:	f7fc ff74 	bl	381e8 <rpc_dfu_client_message_free>
   3b300:	200c      	movs	r0, #12
   3b302:	f7ee fa07 	bl	29714 <bsd_os_errno_set>
   3b306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b30a:	b003      	add	sp, #12
   3b30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b30e:	2405      	movs	r4, #5
   3b310:	4625      	mov	r5, r4
   3b312:	e7b5      	b.n	3b280 <mfu_interface_setopt+0x28>
   3b314:	2408      	movs	r4, #8
   3b316:	4625      	mov	r5, r4
   3b318:	e7b2      	b.n	3b280 <mfu_interface_setopt+0x28>
   3b31a:	b1b3      	cbz	r3, 3b34a <mfu_interface_setopt+0xf2>
   3b31c:	9a08      	ldr	r2, [sp, #32]
   3b31e:	2a04      	cmp	r2, #4
   3b320:	d113      	bne.n	3b34a <mfu_interface_setopt+0xf2>
   3b322:	2000      	movs	r0, #0
   3b324:	681a      	ldr	r2, [r3, #0]
   3b326:	4b16      	ldr	r3, [pc, #88]	; (3b380 <mfu_interface_setopt+0x128>)
   3b328:	601a      	str	r2, [r3, #0]
   3b32a:	b003      	add	sp, #12
   3b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b32e:	202a      	movs	r0, #42	; 0x2a
   3b330:	f7ee f9f0 	bl	29714 <bsd_os_errno_set>
   3b334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b338:	b003      	add	sp, #12
   3b33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b33c:	203c      	movs	r0, #60	; 0x3c
   3b33e:	f7ee f9e9 	bl	29714 <bsd_os_errno_set>
   3b342:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b346:	b003      	add	sp, #12
   3b348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3b34a:	2016      	movs	r0, #22
   3b34c:	f7ee f9e2 	bl	29714 <bsd_os_errno_set>
   3b350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b354:	e7c9      	b.n	3b2ea <mfu_interface_setopt+0x92>
   3b356:	2001      	movs	r0, #1
   3b358:	f7ee f9dc 	bl	29714 <bsd_os_errno_set>
   3b35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b360:	e7c3      	b.n	3b2ea <mfu_interface_setopt+0x92>
   3b362:	4b08      	ldr	r3, [pc, #32]	; (3b384 <mfu_interface_setopt+0x12c>)
   3b364:	2008      	movs	r0, #8
   3b366:	601c      	str	r4, [r3, #0]
   3b368:	f7ee f9d4 	bl	29714 <bsd_os_errno_set>
   3b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b370:	e7bb      	b.n	3b2ea <mfu_interface_setopt+0x92>
   3b372:	bf00      	nop
   3b374:	20025acc 	.word	0x20025acc
   3b378:	2002a398 	.word	0x2002a398
   3b37c:	20025ad8 	.word	0x20025ad8
   3b380:	20025ad4 	.word	0x20025ad4
   3b384:	20025ad0 	.word	0x20025ad0

0003b388 <mfu_interface_getopt>:
   3b388:	f240 2003 	movw	r0, #515	; 0x203
   3b38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b390:	4281      	cmp	r1, r0
   3b392:	b082      	sub	sp, #8
   3b394:	9e08      	ldr	r6, [sp, #32]
   3b396:	f040 80ae 	bne.w	3b4f6 <mfu_interface_getopt+0x16e>
   3b39a:	461d      	mov	r5, r3
   3b39c:	2b00      	cmp	r3, #0
   3b39e:	f000 80aa 	beq.w	3b4f6 <mfu_interface_getopt+0x16e>
   3b3a2:	2e00      	cmp	r6, #0
   3b3a4:	f000 80a7 	beq.w	3b4f6 <mfu_interface_getopt+0x16e>
   3b3a8:	4b5e      	ldr	r3, [pc, #376]	; (3b524 <mfu_interface_getopt+0x19c>)
   3b3aa:	681b      	ldr	r3, [r3, #0]
   3b3ac:	3b02      	subs	r3, #2
   3b3ae:	2b01      	cmp	r3, #1
   3b3b0:	f200 80a7 	bhi.w	3b502 <mfu_interface_getopt+0x17a>
   3b3b4:	3a01      	subs	r2, #1
   3b3b6:	2a13      	cmp	r2, #19
   3b3b8:	d879      	bhi.n	3b4ae <mfu_interface_getopt+0x126>
   3b3ba:	e8df f002 	tbb	[pc, r2]
   3b3be:	5f17      	.short	0x5f17
   3b3c0:	78787878 	.word	0x78787878
   3b3c4:	78787872 	.word	0x78787872
   3b3c8:	78787878 	.word	0x78787878
   3b3cc:	78787878 	.word	0x78787878
   3b3d0:	0a78      	.short	0x0a78
   3b3d2:	6833      	ldr	r3, [r6, #0]
   3b3d4:	2b04      	cmp	r3, #4
   3b3d6:	f040 808e 	bne.w	3b4f6 <mfu_interface_getopt+0x16e>
   3b3da:	2200      	movs	r2, #0
   3b3dc:	4610      	mov	r0, r2
   3b3de:	4b52      	ldr	r3, [pc, #328]	; (3b528 <mfu_interface_getopt+0x1a0>)
   3b3e0:	6819      	ldr	r1, [r3, #0]
   3b3e2:	601a      	str	r2, [r3, #0]
   3b3e4:	6029      	str	r1, [r5, #0]
   3b3e6:	b002      	add	sp, #8
   3b3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b3ec:	6833      	ldr	r3, [r6, #0]
   3b3ee:	2b24      	cmp	r3, #36	; 0x24
   3b3f0:	f040 8081 	bne.w	3b4f6 <mfu_interface_getopt+0x16e>
   3b3f4:	2401      	movs	r4, #1
   3b3f6:	46a0      	mov	r8, r4
   3b3f8:	2100      	movs	r1, #0
   3b3fa:	4668      	mov	r0, sp
   3b3fc:	f7fc fecc 	bl	38198 <rpc_dfu_client_request_alloc>
   3b400:	2800      	cmp	r0, #0
   3b402:	d146      	bne.n	3b492 <mfu_interface_getopt+0x10a>
   3b404:	4949      	ldr	r1, [pc, #292]	; (3b52c <mfu_interface_getopt+0x1a4>)
   3b406:	9b00      	ldr	r3, [sp, #0]
   3b408:	880a      	ldrh	r2, [r1, #0]
   3b40a:	f1b8 0f03 	cmp.w	r8, #3
   3b40e:	f102 0201 	add.w	r2, r2, #1
   3b412:	b292      	uxth	r2, r2
   3b414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   3b418:	7118      	strb	r0, [r3, #4]
   3b41a:	800a      	strh	r2, [r1, #0]
   3b41c:	60dc      	str	r4, [r3, #12]
   3b41e:	7158      	strb	r0, [r3, #5]
   3b420:	7198      	strb	r0, [r3, #6]
   3b422:	71d8      	strb	r0, [r3, #7]
   3b424:	d04b      	beq.n	3b4be <mfu_interface_getopt+0x136>
   3b426:	2104      	movs	r1, #4
   3b428:	2200      	movs	r2, #0
   3b42a:	4f41      	ldr	r7, [pc, #260]	; (3b530 <mfu_interface_getopt+0x1a8>)
   3b42c:	6099      	str	r1, [r3, #8]
   3b42e:	4618      	mov	r0, r3
   3b430:	4641      	mov	r1, r8
   3b432:	603a      	str	r2, [r7, #0]
   3b434:	f7fc fec4 	bl	381c0 <rpc_dfu_client_request_send>
   3b438:	2800      	cmp	r0, #0
   3b43a:	d14d      	bne.n	3b4d8 <mfu_interface_getopt+0x150>
   3b43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3b440:	ac02      	add	r4, sp, #8
   3b442:	f844 3d04 	str.w	r3, [r4, #-4]!
   3b446:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3b524 <mfu_interface_getopt+0x19c>
   3b44a:	e005      	b.n	3b458 <mfu_interface_getopt+0xd0>
   3b44c:	4621      	mov	r1, r4
   3b44e:	4640      	mov	r0, r8
   3b450:	f7ee f8a0 	bl	29594 <bsd_os_timedwait>
   3b454:	2800      	cmp	r0, #0
   3b456:	d137      	bne.n	3b4c8 <mfu_interface_getopt+0x140>
   3b458:	6839      	ldr	r1, [r7, #0]
   3b45a:	2900      	cmp	r1, #0
   3b45c:	d0f6      	beq.n	3b44c <mfu_interface_getopt+0xc4>
   3b45e:	690c      	ldr	r4, [r1, #16]
   3b460:	2c00      	cmp	r4, #0
   3b462:	d154      	bne.n	3b50e <mfu_interface_getopt+0x186>
   3b464:	6832      	ldr	r2, [r6, #0]
   3b466:	3114      	adds	r1, #20
   3b468:	4628      	mov	r0, r5
   3b46a:	f009 fedd 	bl	45228 <memcpy>
   3b46e:	6838      	ldr	r0, [r7, #0]
   3b470:	f7fc feba 	bl	381e8 <rpc_dfu_client_message_free>
   3b474:	4620      	mov	r0, r4
   3b476:	b002      	add	sp, #8
   3b478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b47c:	6833      	ldr	r3, [r6, #0]
   3b47e:	2b04      	cmp	r3, #4
   3b480:	d139      	bne.n	3b4f6 <mfu_interface_getopt+0x16e>
   3b482:	2402      	movs	r4, #2
   3b484:	2100      	movs	r1, #0
   3b486:	4668      	mov	r0, sp
   3b488:	46a0      	mov	r8, r4
   3b48a:	f7fc fe85 	bl	38198 <rpc_dfu_client_request_alloc>
   3b48e:	2800      	cmp	r0, #0
   3b490:	d0b8      	beq.n	3b404 <mfu_interface_getopt+0x7c>
   3b492:	200c      	movs	r0, #12
   3b494:	f7ee f93e 	bl	29714 <bsd_os_errno_set>
   3b498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b49c:	b002      	add	sp, #8
   3b49e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b4a2:	6833      	ldr	r3, [r6, #0]
   3b4a4:	2b04      	cmp	r3, #4
   3b4a6:	d126      	bne.n	3b4f6 <mfu_interface_getopt+0x16e>
   3b4a8:	2409      	movs	r4, #9
   3b4aa:	46a0      	mov	r8, r4
   3b4ac:	e7a4      	b.n	3b3f8 <mfu_interface_getopt+0x70>
   3b4ae:	202a      	movs	r0, #42	; 0x2a
   3b4b0:	f7ee f930 	bl	29714 <bsd_os_errno_set>
   3b4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b4b8:	b002      	add	sp, #8
   3b4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b4be:	4a1d      	ldr	r2, [pc, #116]	; (3b534 <mfu_interface_getopt+0x1ac>)
   3b4c0:	2108      	movs	r1, #8
   3b4c2:	6812      	ldr	r2, [r2, #0]
   3b4c4:	611a      	str	r2, [r3, #16]
   3b4c6:	e7af      	b.n	3b428 <mfu_interface_getopt+0xa0>
   3b4c8:	203c      	movs	r0, #60	; 0x3c
   3b4ca:	f7ee f923 	bl	29714 <bsd_os_errno_set>
   3b4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b4d2:	b002      	add	sp, #8
   3b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b4d8:	9800      	ldr	r0, [sp, #0]
   3b4da:	6803      	ldr	r3, [r0, #0]
   3b4dc:	b11b      	cbz	r3, 3b4e6 <mfu_interface_getopt+0x15e>
   3b4de:	4618      	mov	r0, r3
   3b4e0:	f7fc fe8a 	bl	381f8 <rpc_dfu_client_data_free>
   3b4e4:	9800      	ldr	r0, [sp, #0]
   3b4e6:	f7fc fe7f 	bl	381e8 <rpc_dfu_client_message_free>
   3b4ea:	200c      	movs	r0, #12
   3b4ec:	f7ee f912 	bl	29714 <bsd_os_errno_set>
   3b4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b4f4:	e7d2      	b.n	3b49c <mfu_interface_getopt+0x114>
   3b4f6:	2016      	movs	r0, #22
   3b4f8:	f7ee f90c 	bl	29714 <bsd_os_errno_set>
   3b4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b500:	e771      	b.n	3b3e6 <mfu_interface_getopt+0x5e>
   3b502:	2001      	movs	r0, #1
   3b504:	f7ee f906 	bl	29714 <bsd_os_errno_set>
   3b508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b50c:	e76b      	b.n	3b3e6 <mfu_interface_getopt+0x5e>
   3b50e:	4b06      	ldr	r3, [pc, #24]	; (3b528 <mfu_interface_getopt+0x1a0>)
   3b510:	2008      	movs	r0, #8
   3b512:	601c      	str	r4, [r3, #0]
   3b514:	f7ee f8fe 	bl	29714 <bsd_os_errno_set>
   3b518:	6838      	ldr	r0, [r7, #0]
   3b51a:	f7fc fe65 	bl	381e8 <rpc_dfu_client_message_free>
   3b51e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b522:	e760      	b.n	3b3e6 <mfu_interface_getopt+0x5e>
   3b524:	20025acc 	.word	0x20025acc
   3b528:	20025ad0 	.word	0x20025ad0
   3b52c:	2002a398 	.word	0x2002a398
   3b530:	20025ad8 	.word	0x20025ad8
   3b534:	20025ad4 	.word	0x20025ad4

0003b538 <interface_init>:
   3b538:	b508      	push	{r3, lr}
   3b53a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3b53e:	2100      	movs	r1, #0
   3b540:	4802      	ldr	r0, [pc, #8]	; (3b54c <interface_init+0x14>)
   3b542:	f009 fe91 	bl	45268 <memset>
   3b546:	2000      	movs	r0, #0
   3b548:	bd08      	pop	{r3, pc}
   3b54a:	bf00      	nop
   3b54c:	2002cb18 	.word	0x2002cb18

0003b550 <interface_socket_allocate>:
   3b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b552:	4b30      	ldr	r3, [pc, #192]	; (3b614 <interface_socket_allocate+0xc4>)
   3b554:	4606      	mov	r6, r0
   3b556:	681d      	ldr	r5, [r3, #0]
   3b558:	4608      	mov	r0, r1
   3b55a:	b31d      	cbz	r5, 3b5a4 <interface_socket_allocate+0x54>
   3b55c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   3b55e:	2c00      	cmp	r4, #0
   3b560:	d04a      	beq.n	3b5f8 <interface_socket_allocate+0xa8>
   3b562:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   3b564:	2c00      	cmp	r4, #0
   3b566:	d049      	beq.n	3b5fc <interface_socket_allocate+0xac>
   3b568:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   3b56a:	2c00      	cmp	r4, #0
   3b56c:	d048      	beq.n	3b600 <interface_socket_allocate+0xb0>
   3b56e:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   3b572:	2900      	cmp	r1, #0
   3b574:	d046      	beq.n	3b604 <interface_socket_allocate+0xb4>
   3b576:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   3b57a:	b191      	cbz	r1, 3b5a2 <interface_socket_allocate+0x52>
   3b57c:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   3b580:	2900      	cmp	r1, #0
   3b582:	d043      	beq.n	3b60c <interface_socket_allocate+0xbc>
   3b584:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   3b588:	2900      	cmp	r1, #0
   3b58a:	d041      	beq.n	3b610 <interface_socket_allocate+0xc0>
   3b58c:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   3b590:	2900      	cmp	r1, #0
   3b592:	d039      	beq.n	3b608 <interface_socket_allocate+0xb8>
   3b594:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b598:	2069      	movs	r0, #105	; 0x69
   3b59a:	f7ee f8bb 	bl	29714 <bsd_os_errno_set>
   3b59e:	4628      	mov	r0, r5
   3b5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b5a2:	2505      	movs	r5, #5
   3b5a4:	f04f 0c01 	mov.w	ip, #1
   3b5a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3b5ac:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   3b5b0:	00e4      	lsls	r4, r4, #3
   3b5b2:	f843 c004 	str.w	ip, [r3, r4]
   3b5b6:	441c      	add	r4, r3
   3b5b8:	4611      	mov	r1, r2
   3b5ba:	61a7      	str	r7, [r4, #24]
   3b5bc:	4622      	mov	r2, r4
   3b5be:	f7fe ff8b 	bl	3a4d8 <packet_handler_create>
   3b5c2:	4603      	mov	r3, r0
   3b5c4:	61e0      	str	r0, [r4, #28]
   3b5c6:	b158      	cbz	r0, 3b5e0 <interface_socket_allocate+0x90>
   3b5c8:	681b      	ldr	r3, [r3, #0]
   3b5ca:	681b      	ldr	r3, [r3, #0]
   3b5cc:	4798      	blx	r3
   3b5ce:	b910      	cbnz	r0, 3b5d6 <interface_socket_allocate+0x86>
   3b5d0:	6034      	str	r4, [r6, #0]
   3b5d2:	4628      	mov	r0, r5
   3b5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b5d6:	69e0      	ldr	r0, [r4, #28]
   3b5d8:	f7fe ff9e 	bl	3a518 <packet_handler_delete>
   3b5dc:	2300      	movs	r3, #0
   3b5de:	61e3      	str	r3, [r4, #28]
   3b5e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3b5e4:	2228      	movs	r2, #40	; 0x28
   3b5e6:	2100      	movs	r1, #0
   3b5e8:	4620      	mov	r0, r4
   3b5ea:	f009 fe3d 	bl	45268 <memset>
   3b5ee:	200c      	movs	r0, #12
   3b5f0:	f7ee f890 	bl	29714 <bsd_os_errno_set>
   3b5f4:	4628      	mov	r0, r5
   3b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b5f8:	2501      	movs	r5, #1
   3b5fa:	e7d3      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b5fc:	2502      	movs	r5, #2
   3b5fe:	e7d1      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b600:	2503      	movs	r5, #3
   3b602:	e7cf      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b604:	2504      	movs	r5, #4
   3b606:	e7cd      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b608:	2508      	movs	r5, #8
   3b60a:	e7cb      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b60c:	2506      	movs	r5, #6
   3b60e:	e7c9      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b610:	2507      	movs	r5, #7
   3b612:	e7c7      	b.n	3b5a4 <interface_socket_allocate+0x54>
   3b614:	2002cb18 	.word	0x2002cb18

0003b618 <interface_socket_free>:
   3b618:	2808      	cmp	r0, #8
   3b61a:	d900      	bls.n	3b61e <interface_socket_free+0x6>
   3b61c:	4770      	bx	lr
   3b61e:	b510      	push	{r4, lr}
   3b620:	4c07      	ldr	r4, [pc, #28]	; (3b640 <interface_socket_free+0x28>)
   3b622:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b626:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   3b62a:	69e0      	ldr	r0, [r4, #28]
   3b62c:	b108      	cbz	r0, 3b632 <interface_socket_free+0x1a>
   3b62e:	f7fe ff73 	bl	3a518 <packet_handler_delete>
   3b632:	4620      	mov	r0, r4
   3b634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b638:	2228      	movs	r2, #40	; 0x28
   3b63a:	2100      	movs	r1, #0
   3b63c:	f009 be14 	b.w	45268 <memset>
   3b640:	2002cb18 	.word	0x2002cb18

0003b644 <interface_socket_packet_handler_update>:
   3b644:	2808      	cmp	r0, #8
   3b646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3b64a:	d81e      	bhi.n	3b68a <interface_socket_packet_handler_update+0x46>
   3b64c:	ea4f 0880 	mov.w	r8, r0, lsl #2
   3b650:	4e17      	ldr	r6, [pc, #92]	; (3b6b0 <interface_socket_packet_handler_update+0x6c>)
   3b652:	eb08 0300 	add.w	r3, r8, r0
   3b656:	00db      	lsls	r3, r3, #3
   3b658:	58f4      	ldr	r4, [r6, r3]
   3b65a:	18f5      	adds	r5, r6, r3
   3b65c:	b1ac      	cbz	r4, 3b68a <interface_socket_packet_handler_update+0x46>
   3b65e:	460b      	mov	r3, r1
   3b660:	4604      	mov	r4, r0
   3b662:	4611      	mov	r1, r2
   3b664:	4618      	mov	r0, r3
   3b666:	462a      	mov	r2, r5
   3b668:	f8d5 901c 	ldr.w	r9, [r5, #28]
   3b66c:	f7fe ff34 	bl	3a4d8 <packet_handler_create>
   3b670:	61e8      	str	r0, [r5, #28]
   3b672:	b1d0      	cbz	r0, 3b6aa <interface_socket_packet_handler_update+0x66>
   3b674:	6803      	ldr	r3, [r0, #0]
   3b676:	681b      	ldr	r3, [r3, #0]
   3b678:	4798      	blx	r3
   3b67a:	4607      	mov	r7, r0
   3b67c:	b948      	cbnz	r0, 3b692 <interface_socket_packet_handler_update+0x4e>
   3b67e:	4648      	mov	r0, r9
   3b680:	f7fe ff4a 	bl	3a518 <packet_handler_delete>
   3b684:	4638      	mov	r0, r7
   3b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b68a:	2705      	movs	r7, #5
   3b68c:	4638      	mov	r0, r7
   3b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b692:	69e8      	ldr	r0, [r5, #28]
   3b694:	f7fe ff40 	bl	3a518 <packet_handler_delete>
   3b698:	eb08 0004 	add.w	r0, r8, r4
   3b69c:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   3b6a0:	f8c6 901c 	str.w	r9, [r6, #28]
   3b6a4:	4638      	mov	r0, r7
   3b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3b6aa:	2704      	movs	r7, #4
   3b6ac:	e7f4      	b.n	3b698 <interface_socket_packet_handler_update+0x54>
   3b6ae:	bf00      	nop
   3b6b0:	2002cb18 	.word	0x2002cb18

0003b6b4 <interface_socket_wait>:
   3b6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b6b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b6bc:	4c0d      	ldr	r4, [pc, #52]	; (3b6f4 <interface_socket_wait+0x40>)
   3b6be:	00c0      	lsls	r0, r0, #3
   3b6c0:	5825      	ldr	r5, [r4, r0]
   3b6c2:	4404      	add	r4, r0
   3b6c4:	4015      	ands	r5, r2
   3b6c6:	428d      	cmp	r5, r1
   3b6c8:	d011      	beq.n	3b6ee <interface_socket_wait+0x3a>
   3b6ca:	6860      	ldr	r0, [r4, #4]
   3b6cc:	b978      	cbnz	r0, 3b6ee <interface_socket_wait+0x3a>
   3b6ce:	4698      	mov	r8, r3
   3b6d0:	460f      	mov	r7, r1
   3b6d2:	4616      	mov	r6, r2
   3b6d4:	4625      	mov	r5, r4
   3b6d6:	e006      	b.n	3b6e6 <interface_socket_wait+0x32>
   3b6d8:	686b      	ldr	r3, [r5, #4]
   3b6da:	b943      	cbnz	r3, 3b6ee <interface_socket_wait+0x3a>
   3b6dc:	4641      	mov	r1, r8
   3b6de:	4620      	mov	r0, r4
   3b6e0:	f7ed ff58 	bl	29594 <bsd_os_timedwait>
   3b6e4:	b920      	cbnz	r0, 3b6f0 <interface_socket_wait+0x3c>
   3b6e6:	6828      	ldr	r0, [r5, #0]
   3b6e8:	4030      	ands	r0, r6
   3b6ea:	42b8      	cmp	r0, r7
   3b6ec:	d1f4      	bne.n	3b6d8 <interface_socket_wait+0x24>
   3b6ee:	2000      	movs	r0, #0
   3b6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3b6f4:	2002cb18 	.word	0x2002cb18

0003b6f8 <interface_from_internal_id_search>:
   3b6f8:	4b27      	ldr	r3, [pc, #156]	; (3b798 <interface_from_internal_id_search+0xa0>)
   3b6fa:	681a      	ldr	r2, [r3, #0]
   3b6fc:	b112      	cbz	r2, 3b704 <interface_from_internal_id_search+0xc>
   3b6fe:	699a      	ldr	r2, [r3, #24]
   3b700:	4282      	cmp	r2, r0
   3b702:	d039      	beq.n	3b778 <interface_from_internal_id_search+0x80>
   3b704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3b706:	b112      	cbz	r2, 3b70e <interface_from_internal_id_search+0x16>
   3b708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   3b70a:	4282      	cmp	r2, r0
   3b70c:	d036      	beq.n	3b77c <interface_from_internal_id_search+0x84>
   3b70e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3b710:	b112      	cbz	r2, 3b718 <interface_from_internal_id_search+0x20>
   3b712:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   3b714:	4282      	cmp	r2, r0
   3b716:	d033      	beq.n	3b780 <interface_from_internal_id_search+0x88>
   3b718:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3b71a:	b11a      	cbz	r2, 3b724 <interface_from_internal_id_search+0x2c>
   3b71c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   3b720:	4282      	cmp	r2, r0
   3b722:	d02f      	beq.n	3b784 <interface_from_internal_id_search+0x8c>
   3b724:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3b728:	b11a      	cbz	r2, 3b732 <interface_from_internal_id_search+0x3a>
   3b72a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   3b72e:	4282      	cmp	r2, r0
   3b730:	d02a      	beq.n	3b788 <interface_from_internal_id_search+0x90>
   3b732:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3b736:	b11a      	cbz	r2, 3b740 <interface_from_internal_id_search+0x48>
   3b738:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   3b73c:	4282      	cmp	r2, r0
   3b73e:	d025      	beq.n	3b78c <interface_from_internal_id_search+0x94>
   3b740:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3b744:	b11a      	cbz	r2, 3b74e <interface_from_internal_id_search+0x56>
   3b746:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   3b74a:	4282      	cmp	r2, r0
   3b74c:	d020      	beq.n	3b790 <interface_from_internal_id_search+0x98>
   3b74e:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3b752:	b11a      	cbz	r2, 3b75c <interface_from_internal_id_search+0x64>
   3b754:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3b758:	4282      	cmp	r2, r0
   3b75a:	d01b      	beq.n	3b794 <interface_from_internal_id_search+0x9c>
   3b75c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3b760:	b13a      	cbz	r2, 3b772 <interface_from_internal_id_search+0x7a>
   3b762:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   3b766:	4283      	cmp	r3, r0
   3b768:	bf14      	ite	ne
   3b76a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3b76e:	2008      	moveq	r0, #8
   3b770:	4770      	bx	lr
   3b772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b776:	4770      	bx	lr
   3b778:	2000      	movs	r0, #0
   3b77a:	4770      	bx	lr
   3b77c:	2001      	movs	r0, #1
   3b77e:	4770      	bx	lr
   3b780:	2002      	movs	r0, #2
   3b782:	4770      	bx	lr
   3b784:	2003      	movs	r0, #3
   3b786:	4770      	bx	lr
   3b788:	2004      	movs	r0, #4
   3b78a:	4770      	bx	lr
   3b78c:	2005      	movs	r0, #5
   3b78e:	4770      	bx	lr
   3b790:	2006      	movs	r0, #6
   3b792:	4770      	bx	lr
   3b794:	2007      	movs	r0, #7
   3b796:	4770      	bx	lr
   3b798:	2002cb18 	.word	0x2002cb18

0003b79c <interface_socket_from_handle_get>:
   3b79c:	2808      	cmp	r0, #8
   3b79e:	d807      	bhi.n	3b7b0 <interface_socket_from_handle_get+0x14>
   3b7a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b7a4:	4b03      	ldr	r3, [pc, #12]	; (3b7b4 <interface_socket_from_handle_get+0x18>)
   3b7a6:	00c0      	lsls	r0, r0, #3
   3b7a8:	581a      	ldr	r2, [r3, r0]
   3b7aa:	b10a      	cbz	r2, 3b7b0 <interface_socket_from_handle_get+0x14>
   3b7ac:	4418      	add	r0, r3
   3b7ae:	4770      	bx	lr
   3b7b0:	2000      	movs	r0, #0
   3b7b2:	4770      	bx	lr
   3b7b4:	2002cb18 	.word	0x2002cb18

0003b7b8 <interface_socket_event_get>:
   3b7b8:	b119      	cbz	r1, 3b7c2 <interface_socket_event_get+0xa>
   3b7ba:	2808      	cmp	r0, #8
   3b7bc:	d902      	bls.n	3b7c4 <interface_socket_event_get+0xc>
   3b7be:	2310      	movs	r3, #16
   3b7c0:	600b      	str	r3, [r1, #0]
   3b7c2:	4770      	bx	lr
   3b7c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b7c8:	4b07      	ldr	r3, [pc, #28]	; (3b7e8 <interface_socket_event_get+0x30>)
   3b7ca:	00c0      	lsls	r0, r0, #3
   3b7cc:	581a      	ldr	r2, [r3, r0]
   3b7ce:	2a00      	cmp	r2, #0
   3b7d0:	d0f5      	beq.n	3b7be <interface_socket_event_get+0x6>
   3b7d2:	581b      	ldr	r3, [r3, r0]
   3b7d4:	0c1b      	lsrs	r3, r3, #16
   3b7d6:	f003 020a 	and.w	r2, r3, #10
   3b7da:	2a0a      	cmp	r2, #10
   3b7dc:	bf14      	ite	ne
   3b7de:	f003 030f 	andne.w	r3, r3, #15
   3b7e2:	f003 030d 	andeq.w	r3, r3, #13
   3b7e6:	e7eb      	b.n	3b7c0 <interface_socket_event_get+0x8>
   3b7e8:	2002cb18 	.word	0x2002cb18

0003b7ec <interface_socket_setopt>:
   3b7ec:	2808      	cmp	r0, #8
   3b7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b7f0:	d82c      	bhi.n	3b84c <interface_socket_setopt+0x60>
   3b7f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b7f6:	4e1e      	ldr	r6, [pc, #120]	; (3b870 <interface_socket_setopt+0x84>)
   3b7f8:	00c0      	lsls	r0, r0, #3
   3b7fa:	5834      	ldr	r4, [r6, r0]
   3b7fc:	b334      	cbz	r4, 3b84c <interface_socket_setopt+0x60>
   3b7fe:	2901      	cmp	r1, #1
   3b800:	d11e      	bne.n	3b840 <interface_socket_setopt+0x54>
   3b802:	f1a2 0114 	sub.w	r1, r2, #20
   3b806:	2901      	cmp	r1, #1
   3b808:	d81a      	bhi.n	3b840 <interface_socket_setopt+0x54>
   3b80a:	9906      	ldr	r1, [sp, #24]
   3b80c:	2908      	cmp	r1, #8
   3b80e:	d123      	bne.n	3b858 <interface_socket_setopt+0x6c>
   3b810:	b313      	cbz	r3, 3b858 <interface_socket_setopt+0x6c>
   3b812:	6859      	ldr	r1, [r3, #4]
   3b814:	4c17      	ldr	r4, [pc, #92]	; (3b874 <interface_socket_setopt+0x88>)
   3b816:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   3b81a:	fba4 4101 	umull	r4, r1, r4, r1
   3b81e:	0989      	lsrs	r1, r1, #6
   3b820:	460c      	mov	r4, r1
   3b822:	2500      	movs	r5, #0
   3b824:	681b      	ldr	r3, [r3, #0]
   3b826:	fbe7 4503 	umlal	r4, r5, r7, r3
   3b82a:	2d01      	cmp	r5, #1
   3b82c:	bf08      	it	eq
   3b82e:	2c00      	cmpeq	r4, #0
   3b830:	d218      	bcs.n	3b864 <interface_socket_setopt+0x78>
   3b832:	4430      	add	r0, r6
   3b834:	2a14      	cmp	r2, #20
   3b836:	bf0c      	ite	eq
   3b838:	6204      	streq	r4, [r0, #32]
   3b83a:	6244      	strne	r4, [r0, #36]	; 0x24
   3b83c:	2000      	movs	r0, #0
   3b83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b840:	202a      	movs	r0, #42	; 0x2a
   3b842:	f7ed ff67 	bl	29714 <bsd_os_errno_set>
   3b846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b84c:	2009      	movs	r0, #9
   3b84e:	f7ed ff61 	bl	29714 <bsd_os_errno_set>
   3b852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b858:	2016      	movs	r0, #22
   3b85a:	f7ed ff5b 	bl	29714 <bsd_os_errno_set>
   3b85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b864:	2025      	movs	r0, #37	; 0x25
   3b866:	f7ed ff55 	bl	29714 <bsd_os_errno_set>
   3b86a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b870:	2002cb18 	.word	0x2002cb18
   3b874:	10624dd3 	.word	0x10624dd3

0003b878 <interface_socket_getopt>:
   3b878:	b570      	push	{r4, r5, r6, lr}
   3b87a:	2808      	cmp	r0, #8
   3b87c:	9d04      	ldr	r5, [sp, #16]
   3b87e:	d835      	bhi.n	3b8ec <interface_socket_getopt+0x74>
   3b880:	4c20      	ldr	r4, [pc, #128]	; (3b904 <interface_socket_getopt+0x8c>)
   3b882:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b886:	00c0      	lsls	r0, r0, #3
   3b888:	5826      	ldr	r6, [r4, r0]
   3b88a:	4404      	add	r4, r0
   3b88c:	b376      	cbz	r6, 3b8ec <interface_socket_getopt+0x74>
   3b88e:	2901      	cmp	r1, #1
   3b890:	d132      	bne.n	3b8f8 <interface_socket_getopt+0x80>
   3b892:	b32b      	cbz	r3, 3b8e0 <interface_socket_getopt+0x68>
   3b894:	b325      	cbz	r5, 3b8e0 <interface_socket_getopt+0x68>
   3b896:	2a04      	cmp	r2, #4
   3b898:	d019      	beq.n	3b8ce <interface_socket_getopt+0x56>
   3b89a:	f1a2 0114 	sub.w	r1, r2, #20
   3b89e:	2901      	cmp	r1, #1
   3b8a0:	d82a      	bhi.n	3b8f8 <interface_socket_getopt+0x80>
   3b8a2:	6829      	ldr	r1, [r5, #0]
   3b8a4:	2908      	cmp	r1, #8
   3b8a6:	d11b      	bne.n	3b8e0 <interface_socket_getopt+0x68>
   3b8a8:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   3b8ac:	2a14      	cmp	r2, #20
   3b8ae:	bf18      	it	ne
   3b8b0:	4601      	movne	r1, r0
   3b8b2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3b8b6:	4a14      	ldr	r2, [pc, #80]	; (3b908 <interface_socket_getopt+0x90>)
   3b8b8:	2000      	movs	r0, #0
   3b8ba:	fba2 5201 	umull	r5, r2, r2, r1
   3b8be:	0992      	lsrs	r2, r2, #6
   3b8c0:	fb04 1112 	mls	r1, r4, r2, r1
   3b8c4:	fb04 f101 	mul.w	r1, r4, r1
   3b8c8:	e9c3 2100 	strd	r2, r1, [r3]
   3b8cc:	bd70      	pop	{r4, r5, r6, pc}
   3b8ce:	682a      	ldr	r2, [r5, #0]
   3b8d0:	2a04      	cmp	r2, #4
   3b8d2:	d105      	bne.n	3b8e0 <interface_socket_getopt+0x68>
   3b8d4:	2200      	movs	r2, #0
   3b8d6:	6861      	ldr	r1, [r4, #4]
   3b8d8:	4610      	mov	r0, r2
   3b8da:	6019      	str	r1, [r3, #0]
   3b8dc:	6062      	str	r2, [r4, #4]
   3b8de:	bd70      	pop	{r4, r5, r6, pc}
   3b8e0:	2016      	movs	r0, #22
   3b8e2:	f7ed ff17 	bl	29714 <bsd_os_errno_set>
   3b8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b8ea:	bd70      	pop	{r4, r5, r6, pc}
   3b8ec:	2009      	movs	r0, #9
   3b8ee:	f7ed ff11 	bl	29714 <bsd_os_errno_set>
   3b8f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b8f6:	bd70      	pop	{r4, r5, r6, pc}
   3b8f8:	202a      	movs	r0, #42	; 0x2a
   3b8fa:	f7ed ff0b 	bl	29714 <bsd_os_errno_set>
   3b8fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b902:	bd70      	pop	{r4, r5, r6, pc}
   3b904:	2002cb18 	.word	0x2002cb18
   3b908:	10624dd3 	.word	0x10624dd3

0003b90c <interface_shutdown>:
   3b90c:	b530      	push	{r4, r5, lr}
   3b90e:	4b2d      	ldr	r3, [pc, #180]	; (3b9c4 <interface_shutdown+0xb8>)
   3b910:	b083      	sub	sp, #12
   3b912:	681a      	ldr	r2, [r3, #0]
   3b914:	b10a      	cbz	r2, 3b91a <interface_shutdown+0xe>
   3b916:	2270      	movs	r2, #112	; 0x70
   3b918:	605a      	str	r2, [r3, #4]
   3b91a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3b91c:	b10a      	cbz	r2, 3b922 <interface_shutdown+0x16>
   3b91e:	2270      	movs	r2, #112	; 0x70
   3b920:	62da      	str	r2, [r3, #44]	; 0x2c
   3b922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3b924:	b10a      	cbz	r2, 3b92a <interface_shutdown+0x1e>
   3b926:	2270      	movs	r2, #112	; 0x70
   3b928:	655a      	str	r2, [r3, #84]	; 0x54
   3b92a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3b92c:	b10a      	cbz	r2, 3b932 <interface_shutdown+0x26>
   3b92e:	2270      	movs	r2, #112	; 0x70
   3b930:	67da      	str	r2, [r3, #124]	; 0x7c
   3b932:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3b936:	b112      	cbz	r2, 3b93e <interface_shutdown+0x32>
   3b938:	2270      	movs	r2, #112	; 0x70
   3b93a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   3b93e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3b942:	b112      	cbz	r2, 3b94a <interface_shutdown+0x3e>
   3b944:	2270      	movs	r2, #112	; 0x70
   3b946:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   3b94a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3b94e:	b112      	cbz	r2, 3b956 <interface_shutdown+0x4a>
   3b950:	2270      	movs	r2, #112	; 0x70
   3b952:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   3b956:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3b95a:	b112      	cbz	r2, 3b962 <interface_shutdown+0x56>
   3b95c:	2270      	movs	r2, #112	; 0x70
   3b95e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   3b962:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3b966:	b112      	cbz	r2, 3b96e <interface_shutdown+0x62>
   3b968:	2270      	movs	r2, #112	; 0x70
   3b96a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   3b96e:	f7ed ffc9 	bl	29904 <bsd_os_application_irq_set>
   3b972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3b976:	ac02      	add	r4, sp, #8
   3b978:	f844 3d04 	str.w	r3, [r4, #-4]!
   3b97c:	4621      	mov	r1, r4
   3b97e:	2000      	movs	r0, #0
   3b980:	f7ed fe08 	bl	29594 <bsd_os_timedwait>
   3b984:	9b01      	ldr	r3, [sp, #4]
   3b986:	2b00      	cmp	r3, #0
   3b988:	dcf8      	bgt.n	3b97c <interface_shutdown+0x70>
   3b98a:	4c0e      	ldr	r4, [pc, #56]	; (3b9c4 <interface_shutdown+0xb8>)
   3b98c:	f504 75b4 	add.w	r5, r4, #360	; 0x168
   3b990:	e009      	b.n	3b9a6 <interface_shutdown+0x9a>
   3b992:	f7fe fdc1 	bl	3a518 <packet_handler_delete>
   3b996:	2228      	movs	r2, #40	; 0x28
   3b998:	4620      	mov	r0, r4
   3b99a:	2100      	movs	r1, #0
   3b99c:	4414      	add	r4, r2
   3b99e:	f009 fc63 	bl	45268 <memset>
   3b9a2:	42ac      	cmp	r4, r5
   3b9a4:	d00a      	beq.n	3b9bc <interface_shutdown+0xb0>
   3b9a6:	69e0      	ldr	r0, [r4, #28]
   3b9a8:	2800      	cmp	r0, #0
   3b9aa:	d1f2      	bne.n	3b992 <interface_shutdown+0x86>
   3b9ac:	2228      	movs	r2, #40	; 0x28
   3b9ae:	4601      	mov	r1, r0
   3b9b0:	4620      	mov	r0, r4
   3b9b2:	4414      	add	r4, r2
   3b9b4:	f009 fc58 	bl	45268 <memset>
   3b9b8:	42ac      	cmp	r4, r5
   3b9ba:	d1f4      	bne.n	3b9a6 <interface_shutdown+0x9a>
   3b9bc:	2000      	movs	r0, #0
   3b9be:	b003      	add	sp, #12
   3b9c0:	bd30      	pop	{r4, r5, pc}
   3b9c2:	bf00      	nop
   3b9c4:	2002cb18 	.word	0x2002cb18

0003b9c8 <interface_socket_fcntl>:
   3b9c8:	2808      	cmp	r0, #8
   3b9ca:	b510      	push	{r4, lr}
   3b9cc:	d826      	bhi.n	3ba1c <interface_socket_fcntl+0x54>
   3b9ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3b9d2:	4c1b      	ldr	r4, [pc, #108]	; (3ba40 <interface_socket_fcntl+0x78>)
   3b9d4:	00c3      	lsls	r3, r0, #3
   3b9d6:	58e0      	ldr	r0, [r4, r3]
   3b9d8:	b300      	cbz	r0, 3ba1c <interface_socket_fcntl+0x54>
   3b9da:	2901      	cmp	r1, #1
   3b9dc:	d005      	beq.n	3b9ea <interface_socket_fcntl+0x22>
   3b9de:	2902      	cmp	r1, #2
   3b9e0:	d122      	bne.n	3ba28 <interface_socket_fcntl+0x60>
   3b9e2:	58e0      	ldr	r0, [r4, r3]
   3b9e4:	f3c0 7000 	ubfx	r0, r0, #28, #1
   3b9e8:	bd10      	pop	{r4, pc}
   3b9ea:	07d2      	lsls	r2, r2, #31
   3b9ec:	d410      	bmi.n	3ba10 <interface_socket_fcntl+0x48>
   3b9ee:	58e0      	ldr	r0, [r4, r3]
   3b9f0:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   3b9f4:	d11e      	bne.n	3ba34 <interface_socket_fcntl+0x6c>
   3b9f6:	58e2      	ldr	r2, [r4, r3]
   3b9f8:	b292      	uxth	r2, r2
   3b9fa:	2a0a      	cmp	r2, #10
   3b9fc:	d01a      	beq.n	3ba34 <interface_socket_fcntl+0x6c>
   3b9fe:	58e2      	ldr	r2, [r4, r3]
   3ba00:	b292      	uxth	r2, r2
   3ba02:	2a0b      	cmp	r2, #11
   3ba04:	d016      	beq.n	3ba34 <interface_socket_fcntl+0x6c>
   3ba06:	58e2      	ldr	r2, [r4, r3]
   3ba08:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   3ba0c:	50e2      	str	r2, [r4, r3]
   3ba0e:	bd10      	pop	{r4, pc}
   3ba10:	58e2      	ldr	r2, [r4, r3]
   3ba12:	2000      	movs	r0, #0
   3ba14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   3ba18:	50e2      	str	r2, [r4, r3]
   3ba1a:	bd10      	pop	{r4, pc}
   3ba1c:	2009      	movs	r0, #9
   3ba1e:	f7ed fe79 	bl	29714 <bsd_os_errno_set>
   3ba22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ba26:	bd10      	pop	{r4, pc}
   3ba28:	2016      	movs	r0, #22
   3ba2a:	f7ed fe73 	bl	29714 <bsd_os_errno_set>
   3ba2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ba32:	bd10      	pop	{r4, pc}
   3ba34:	2023      	movs	r0, #35	; 0x23
   3ba36:	f7ed fe6d 	bl	29714 <bsd_os_errno_set>
   3ba3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ba3e:	bd10      	pop	{r4, pc}
   3ba40:	2002cb18 	.word	0x2002cb18

0003ba44 <at_client_evt_handler>:
   3ba44:	b120      	cbz	r0, 3ba50 <at_client_evt_handler+0xc>
   3ba46:	f850 1b08 	ldr.w	r1, [r0], #8
   3ba4a:	0c09      	lsrs	r1, r1, #16
   3ba4c:	f7fc bdac 	b.w	385a8 <rpc_at_event_handler>
   3ba50:	4770      	bx	lr
   3ba52:	bf00      	nop

0003ba54 <rpc_at_client_init>:
   3ba54:	4801      	ldr	r0, [pc, #4]	; (3ba5c <rpc_at_client_init+0x8>)
   3ba56:	f7fb bb23 	b.w	370a0 <rpc_client_register>
   3ba5a:	bf00      	nop
   3ba5c:	0004769c 	.word	0x0004769c

0003ba60 <rpc_at_client_deinit>:
   3ba60:	2003      	movs	r0, #3
   3ba62:	f7fb bb87 	b.w	37174 <rpc_client_unregister>
   3ba66:	bf00      	nop

0003ba68 <rpc_at_client_request_alloc>:
   3ba68:	b180      	cbz	r0, 3ba8c <rpc_at_client_request_alloc+0x24>
   3ba6a:	2300      	movs	r3, #0
   3ba6c:	b510      	push	{r4, lr}
   3ba6e:	b082      	sub	sp, #8
   3ba70:	aa02      	add	r2, sp, #8
   3ba72:	4604      	mov	r4, r0
   3ba74:	f842 3d04 	str.w	r3, [r2, #-4]!
   3ba78:	2003      	movs	r0, #3
   3ba7a:	f7fb fbd1 	bl	37220 <rpc_message_alloc>
   3ba7e:	b918      	cbnz	r0, 3ba88 <rpc_at_client_request_alloc+0x20>
   3ba80:	9b01      	ldr	r3, [sp, #4]
   3ba82:	b10b      	cbz	r3, 3ba88 <rpc_at_client_request_alloc+0x20>
   3ba84:	3308      	adds	r3, #8
   3ba86:	6023      	str	r3, [r4, #0]
   3ba88:	b002      	add	sp, #8
   3ba8a:	bd10      	pop	{r4, pc}
   3ba8c:	200e      	movs	r0, #14
   3ba8e:	4770      	bx	lr

0003ba90 <rpc_at_client_request_send>:
   3ba90:	b150      	cbz	r0, 3baa8 <rpc_at_client_request_send+0x18>
   3ba92:	4603      	mov	r3, r0
   3ba94:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3ba98:	2003      	movs	r0, #3
   3ba9a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3ba9e:	f843 1d08 	str.w	r1, [r3, #-8]!
   3baa2:	4619      	mov	r1, r3
   3baa4:	f7fb bbac 	b.w	37200 <rpc_message_send>
   3baa8:	200e      	movs	r0, #14
   3baaa:	4770      	bx	lr

0003baac <rpc_at_client_message_free>:
   3baac:	b120      	cbz	r0, 3bab8 <rpc_at_client_message_free+0xc>
   3baae:	f1a0 0108 	sub.w	r1, r0, #8
   3bab2:	2003      	movs	r0, #3
   3bab4:	f7fb bbe0 	b.w	37278 <rpc_message_free>
   3bab8:	200e      	movs	r0, #14
   3baba:	4770      	bx	lr

0003babc <rpc_at_client_data_free>:
   3babc:	b118      	cbz	r0, 3bac6 <rpc_at_client_data_free+0xa>
   3babe:	4601      	mov	r1, r0
   3bac0:	2003      	movs	r0, #3
   3bac2:	f7fb bbe5 	b.w	37290 <rpc_message_data_free>
   3bac6:	200e      	movs	r0, #14
   3bac8:	4770      	bx	lr
   3baca:	bf00      	nop

0003bacc <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3bacc:	4a07      	ldr	r2, [pc, #28]	; (3baec <SystemInit+0x20>)
   3bace:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3bad2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3bad6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3bada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3bade:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3bae2:	4b03      	ldr	r3, [pc, #12]	; (3baf0 <SystemInit+0x24>)
   3bae4:	4a03      	ldr	r2, [pc, #12]	; (3baf4 <SystemInit+0x28>)
   3bae6:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3bae8:	4770      	bx	lr
   3baea:	bf00      	nop
   3baec:	e000ed00 	.word	0xe000ed00
   3baf0:	20020774 	.word	0x20020774
   3baf4:	03d09000 	.word	0x03d09000

0003baf8 <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   3baf8:	b508      	push	{r3, lr}
    switch (domain)
   3bafa:	b178      	cbz	r0, 3bb1c <nrf_clock_is_running.constprop.2+0x24>
   3bafc:	2801      	cmp	r0, #1
   3bafe:	d019      	beq.n	3bb34 <nrf_clock_is_running.constprop.2+0x3c>
            NRFX_ASSERT(0);
   3bb00:	f240 3342 	movw	r3, #834	; 0x342
   3bb04:	4a10      	ldr	r2, [pc, #64]	; (3bb48 <nrf_clock_is_running.constprop.2+0x50>)
   3bb06:	4911      	ldr	r1, [pc, #68]	; (3bb4c <nrf_clock_is_running.constprop.2+0x54>)
   3bb08:	4811      	ldr	r0, [pc, #68]	; (3bb50 <nrf_clock_is_running.constprop.2+0x58>)
   3bb0a:	f006 f86d 	bl	41be8 <printk>
   3bb0e:	480e      	ldr	r0, [pc, #56]	; (3bb48 <nrf_clock_is_running.constprop.2+0x50>)
   3bb10:	f240 3142 	movw	r1, #834	; 0x342
   3bb14:	f006 fa82 	bl	4201c <assert_post_action>
            return false;
   3bb18:	2000      	movs	r0, #0
   3bb1a:	e00a      	b.n	3bb32 <nrf_clock_is_running.constprop.2+0x3a>
            if (p_clk_src != NULL)
   3bb1c:	4a0d      	ldr	r2, [pc, #52]	; (3bb54 <nrf_clock_is_running.constprop.2+0x5c>)
   3bb1e:	b121      	cbz	r1, 3bb2a <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3bb20:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   3bb24:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3bb28:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3bb2a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3bb2e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   3bb32:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   3bb34:	4a07      	ldr	r2, [pc, #28]	; (3bb54 <nrf_clock_is_running.constprop.2+0x5c>)
   3bb36:	b121      	cbz	r1, 3bb42 <nrf_clock_is_running.constprop.2+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3bb38:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   3bb3c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3bb40:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3bb42:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   3bb46:	e7f2      	b.n	3bb2e <nrf_clock_is_running.constprop.2+0x36>
   3bb48:	0004e811 	.word	0x0004e811
   3bb4c:	0004edb2 	.word	0x0004edb2
   3bb50:	0004825b 	.word	0x0004825b
   3bb54:	40005000 	.word	0x40005000

0003bb58 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   3bb58:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   3bb5a:	4604      	mov	r4, r0
   3bb5c:	b948      	cbnz	r0, 3bb72 <nrfx_clock_init+0x1a>
   3bb5e:	490a      	ldr	r1, [pc, #40]	; (3bb88 <nrfx_clock_init+0x30>)
   3bb60:	480a      	ldr	r0, [pc, #40]	; (3bb8c <nrfx_clock_init+0x34>)
   3bb62:	23b3      	movs	r3, #179	; 0xb3
   3bb64:	4a0a      	ldr	r2, [pc, #40]	; (3bb90 <nrfx_clock_init+0x38>)
   3bb66:	f006 f83f 	bl	41be8 <printk>
   3bb6a:	21b3      	movs	r1, #179	; 0xb3
   3bb6c:	4808      	ldr	r0, [pc, #32]	; (3bb90 <nrfx_clock_init+0x38>)
   3bb6e:	f006 fa55 	bl	4201c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3bb72:	4b08      	ldr	r3, [pc, #32]	; (3bb94 <nrfx_clock_init+0x3c>)
   3bb74:	791a      	ldrb	r2, [r3, #4]
   3bb76:	b922      	cbnz	r2, 3bb82 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3bb78:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   3bb7a:	4807      	ldr	r0, [pc, #28]	; (3bb98 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   3bb7c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   3bb7e:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3bb80:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3bb82:	4806      	ldr	r0, [pc, #24]	; (3bb9c <nrfx_clock_init+0x44>)
    return err_code;
   3bb84:	e7fc      	b.n	3bb80 <nrfx_clock_init+0x28>
   3bb86:	bf00      	nop
   3bb88:	0004e8a0 	.word	0x0004e8a0
   3bb8c:	0004825b 	.word	0x0004825b
   3bb90:	0004e863 	.word	0x0004e863
   3bb94:	20025adc 	.word	0x20025adc
   3bb98:	0bad0000 	.word	0x0bad0000
   3bb9c:	0bad000c 	.word	0x0bad000c

0003bba0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3bba0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bba2:	4b0b      	ldr	r3, [pc, #44]	; (3bbd0 <nrfx_clock_enable+0x30>)
   3bba4:	791b      	ldrb	r3, [r3, #4]
   3bba6:	b94b      	cbnz	r3, 3bbbc <nrfx_clock_enable+0x1c>
   3bba8:	490a      	ldr	r1, [pc, #40]	; (3bbd4 <nrfx_clock_enable+0x34>)
   3bbaa:	480b      	ldr	r0, [pc, #44]	; (3bbd8 <nrfx_clock_enable+0x38>)
   3bbac:	23cc      	movs	r3, #204	; 0xcc
   3bbae:	4a0b      	ldr	r2, [pc, #44]	; (3bbdc <nrfx_clock_enable+0x3c>)
   3bbb0:	f006 f81a 	bl	41be8 <printk>
   3bbb4:	21cc      	movs	r1, #204	; 0xcc
   3bbb6:	4809      	ldr	r0, [pc, #36]	; (3bbdc <nrfx_clock_enable+0x3c>)
   3bbb8:	f006 fa30 	bl	4201c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3bbbc:	2005      	movs	r0, #5
   3bbbe:	f7eb f81f 	bl	26c00 <arch_irq_is_enabled>
   3bbc2:	b920      	cbnz	r0, 3bbce <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3bbc4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3bbc8:	2005      	movs	r0, #5
   3bbca:	f7eb b809 	b.w	26be0 <arch_irq_enable>
   3bbce:	bd08      	pop	{r3, pc}
   3bbd0:	20025adc 	.word	0x20025adc
   3bbd4:	0004e845 	.word	0x0004e845
   3bbd8:	0004825b 	.word	0x0004825b
   3bbdc:	0004e863 	.word	0x0004e863

0003bbe0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bbe0:	4b22      	ldr	r3, [pc, #136]	; (3bc6c <nrfx_clock_start+0x8c>)
{
   3bbe2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bbe4:	791b      	ldrb	r3, [r3, #4]
{
   3bbe6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bbe8:	b95b      	cbnz	r3, 3bc02 <nrfx_clock_start+0x22>
   3bbea:	4921      	ldr	r1, [pc, #132]	; (3bc70 <nrfx_clock_start+0x90>)
   3bbec:	4821      	ldr	r0, [pc, #132]	; (3bc74 <nrfx_clock_start+0x94>)
   3bbee:	f44f 7384 	mov.w	r3, #264	; 0x108
   3bbf2:	4a21      	ldr	r2, [pc, #132]	; (3bc78 <nrfx_clock_start+0x98>)
   3bbf4:	f005 fff8 	bl	41be8 <printk>
   3bbf8:	f44f 7184 	mov.w	r1, #264	; 0x108
   3bbfc:	481e      	ldr	r0, [pc, #120]	; (3bc78 <nrfx_clock_start+0x98>)
   3bbfe:	f006 fa0d 	bl	4201c <assert_post_action>
    switch (domain)
   3bc02:	b174      	cbz	r4, 3bc22 <nrfx_clock_start+0x42>
   3bc04:	2c01      	cmp	r4, #1
   3bc06:	d027      	beq.n	3bc58 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3bc08:	f44f 739d 	mov.w	r3, #314	; 0x13a
   3bc0c:	4a1a      	ldr	r2, [pc, #104]	; (3bc78 <nrfx_clock_start+0x98>)
   3bc0e:	491b      	ldr	r1, [pc, #108]	; (3bc7c <nrfx_clock_start+0x9c>)
   3bc10:	4818      	ldr	r0, [pc, #96]	; (3bc74 <nrfx_clock_start+0x94>)
   3bc12:	f005 ffe9 	bl	41be8 <printk>
   3bc16:	f44f 719d 	mov.w	r1, #314	; 0x13a
   3bc1a:	4817      	ldr	r0, [pc, #92]	; (3bc78 <nrfx_clock_start+0x98>)
   3bc1c:	f006 f9fe 	bl	4201c <assert_post_action>
            break;
    }
}
   3bc20:	e016      	b.n	3bc50 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   3bc22:	f10d 0107 	add.w	r1, sp, #7
   3bc26:	4620      	mov	r0, r4
   3bc28:	f7ff ff66 	bl	3baf8 <nrf_clock_is_running.constprop.2>
   3bc2c:	4b14      	ldr	r3, [pc, #80]	; (3bc80 <nrfx_clock_start+0xa0>)
   3bc2e:	b188      	cbz	r0, 3bc54 <nrfx_clock_start+0x74>
   3bc30:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3bc34:	2a02      	cmp	r2, #2
   3bc36:	d10d      	bne.n	3bc54 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3bc38:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bc3c:	2200      	movs	r2, #0
   3bc3e:	4b11      	ldr	r3, [pc, #68]	; (3bc84 <nrfx_clock_start+0xa4>)
   3bc40:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   3bc42:	2202      	movs	r2, #2
   3bc44:	681b      	ldr	r3, [r3, #0]
   3bc46:	4b0e      	ldr	r3, [pc, #56]	; (3bc80 <nrfx_clock_start+0xa0>)
   3bc48:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bc4c:	2201      	movs	r2, #1
   3bc4e:	609a      	str	r2, [r3, #8]
}
   3bc50:	b002      	add	sp, #8
   3bc52:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   3bc54:	2201      	movs	r2, #1
   3bc56:	e7ef      	b.n	3bc38 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bc58:	2200      	movs	r2, #0
   3bc5a:	4b0b      	ldr	r3, [pc, #44]	; (3bc88 <nrfx_clock_start+0xa8>)
   3bc5c:	601a      	str	r2, [r3, #0]
   3bc5e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3bc60:	4b07      	ldr	r3, [pc, #28]	; (3bc80 <nrfx_clock_start+0xa0>)
   3bc62:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bc66:	601c      	str	r4, [r3, #0]
   3bc68:	e7f2      	b.n	3bc50 <nrfx_clock_start+0x70>
   3bc6a:	bf00      	nop
   3bc6c:	20025adc 	.word	0x20025adc
   3bc70:	0004e845 	.word	0x0004e845
   3bc74:	0004825b 	.word	0x0004825b
   3bc78:	0004e863 	.word	0x0004e863
   3bc7c:	0004edb2 	.word	0x0004edb2
   3bc80:	40005000 	.word	0x40005000
   3bc84:	40005104 	.word	0x40005104
   3bc88:	40005100 	.word	0x40005100

0003bc8c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bc8c:	4b2d      	ldr	r3, [pc, #180]	; (3bd44 <nrfx_clock_stop+0xb8>)
{
   3bc8e:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bc90:	791b      	ldrb	r3, [r3, #4]
{
   3bc92:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3bc94:	b95b      	cbnz	r3, 3bcae <nrfx_clock_stop+0x22>
   3bc96:	492c      	ldr	r1, [pc, #176]	; (3bd48 <nrfx_clock_stop+0xbc>)
   3bc98:	482c      	ldr	r0, [pc, #176]	; (3bd4c <nrfx_clock_stop+0xc0>)
   3bc9a:	f240 1341 	movw	r3, #321	; 0x141
   3bc9e:	4a2c      	ldr	r2, [pc, #176]	; (3bd50 <nrfx_clock_stop+0xc4>)
   3bca0:	f005 ffa2 	bl	41be8 <printk>
   3bca4:	f240 1141 	movw	r1, #321	; 0x141
   3bca8:	4829      	ldr	r0, [pc, #164]	; (3bd50 <nrfx_clock_stop+0xc4>)
   3bcaa:	f006 f9b7 	bl	4201c <assert_post_action>
    switch (domain)
   3bcae:	b17c      	cbz	r4, 3bcd0 <nrfx_clock_stop+0x44>
   3bcb0:	2c01      	cmp	r4, #1
   3bcb2:	d027      	beq.n	3bd04 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3bcb4:	4927      	ldr	r1, [pc, #156]	; (3bd54 <nrfx_clock_stop+0xc8>)
   3bcb6:	4825      	ldr	r0, [pc, #148]	; (3bd4c <nrfx_clock_stop+0xc0>)
   3bcb8:	f240 135d 	movw	r3, #349	; 0x15d
   3bcbc:	4a24      	ldr	r2, [pc, #144]	; (3bd50 <nrfx_clock_stop+0xc4>)
   3bcbe:	f005 ff93 	bl	41be8 <printk>
   3bcc2:	f240 115d 	movw	r1, #349	; 0x15d
   3bcc6:	4822      	ldr	r0, [pc, #136]	; (3bd50 <nrfx_clock_stop+0xc4>)
   3bcc8:	f006 f9a8 	bl	4201c <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3bccc:	b002      	add	sp, #8
   3bcce:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3bcd0:	2202      	movs	r2, #2
   3bcd2:	4b21      	ldr	r3, [pc, #132]	; (3bd58 <nrfx_clock_stop+0xcc>)
   3bcd4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bcd8:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bcda:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bcde:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bce2:	f503 7382 	add.w	r3, r3, #260	; 0x104
   3bce6:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bce8:	4b1c      	ldr	r3, [pc, #112]	; (3bd5c <nrfx_clock_stop+0xd0>)
   3bcea:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   3bcec:	2100      	movs	r1, #0
   3bcee:	4608      	mov	r0, r1
   3bcf0:	f7ff ff02 	bl	3baf8 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3bcf4:	2800      	cmp	r0, #0
   3bcf6:	d0e9      	beq.n	3bccc <nrfx_clock_stop+0x40>
   3bcf8:	2001      	movs	r0, #1
   3bcfa:	f009 f89f 	bl	44e3c <nrfx_busy_wait>
   3bcfe:	3c01      	subs	r4, #1
   3bd00:	d1f4      	bne.n	3bcec <nrfx_clock_stop+0x60>
   3bd02:	e7e3      	b.n	3bccc <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bd04:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3bd06:	4b14      	ldr	r3, [pc, #80]	; (3bd58 <nrfx_clock_stop+0xcc>)
   3bd08:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bd0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3bd10:	f503 7380 	add.w	r3, r3, #256	; 0x100
   3bd14:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bd16:	4b12      	ldr	r3, [pc, #72]	; (3bd60 <nrfx_clock_stop+0xd4>)
   3bd18:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3bd1a:	f88d 4007 	strb.w	r4, [sp, #7]
   3bd1e:	f242 7410 	movw	r4, #10000	; 0x2710
   3bd22:	f10d 0107 	add.w	r1, sp, #7
   3bd26:	2001      	movs	r0, #1
   3bd28:	f7ff fee6 	bl	3baf8 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3bd2c:	2800      	cmp	r0, #0
   3bd2e:	d0cd      	beq.n	3bccc <nrfx_clock_stop+0x40>
   3bd30:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3bd34:	2801      	cmp	r0, #1
   3bd36:	d1c9      	bne.n	3bccc <nrfx_clock_stop+0x40>
   3bd38:	f009 f880 	bl	44e3c <nrfx_busy_wait>
   3bd3c:	3c01      	subs	r4, #1
   3bd3e:	d1f0      	bne.n	3bd22 <nrfx_clock_stop+0x96>
   3bd40:	e7c4      	b.n	3bccc <nrfx_clock_stop+0x40>
   3bd42:	bf00      	nop
   3bd44:	20025adc 	.word	0x20025adc
   3bd48:	0004e845 	.word	0x0004e845
   3bd4c:	0004825b 	.word	0x0004825b
   3bd50:	0004e863 	.word	0x0004e863
   3bd54:	0004edb2 	.word	0x0004edb2
   3bd58:	40005000 	.word	0x40005000
   3bd5c:	4000500c 	.word	0x4000500c
   3bd60:	40005004 	.word	0x40005004

0003bd64 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3bd64:	4b15      	ldr	r3, [pc, #84]	; (3bdbc <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3bd66:	b507      	push	{r0, r1, r2, lr}
   3bd68:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3bd6a:	b14a      	cbz	r2, 3bd80 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bd6c:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   3bd6e:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bd70:	6018      	str	r0, [r3, #0]
   3bd72:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3bd74:	4b12      	ldr	r3, [pc, #72]	; (3bdc0 <nrfx_power_clock_irq_handler+0x5c>)
   3bd76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3bd7a:	4b12      	ldr	r3, [pc, #72]	; (3bdc4 <nrfx_power_clock_irq_handler+0x60>)
   3bd7c:	681b      	ldr	r3, [r3, #0]
   3bd7e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3bd80:	4b11      	ldr	r3, [pc, #68]	; (3bdc8 <nrfx_power_clock_irq_handler+0x64>)
   3bd82:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3bd84:	b182      	cbz	r2, 3bda8 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3bd86:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   3bd88:	f10d 0107 	add.w	r1, sp, #7
   3bd8c:	6018      	str	r0, [r3, #0]
   3bd8e:	681b      	ldr	r3, [r3, #0]
   3bd90:	f7ff feb2 	bl	3baf8 <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3bd94:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3bd98:	4b09      	ldr	r3, [pc, #36]	; (3bdc0 <nrfx_power_clock_irq_handler+0x5c>)
   3bd9a:	2901      	cmp	r1, #1
   3bd9c:	f04f 0202 	mov.w	r2, #2
   3bda0:	d105      	bne.n	3bdae <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3bda2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3bda6:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3bda8:	b003      	add	sp, #12
   3bdaa:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   3bdae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3bdb2:	4b04      	ldr	r3, [pc, #16]	; (3bdc4 <nrfx_power_clock_irq_handler+0x60>)
   3bdb4:	2001      	movs	r0, #1
   3bdb6:	681b      	ldr	r3, [r3, #0]
   3bdb8:	4798      	blx	r3
}
   3bdba:	e7f5      	b.n	3bda8 <nrfx_power_clock_irq_handler+0x44>
   3bdbc:	40005100 	.word	0x40005100
   3bdc0:	40005000 	.word	0x40005000
   3bdc4:	20025adc 	.word	0x20025adc
   3bdc8:	40005104 	.word	0x40005104

0003bdcc <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3bdcc:	4a04      	ldr	r2, [pc, #16]	; (3bde0 <nvmc_word_write+0x14>)
   3bdce:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3bdd2:	07db      	lsls	r3, r3, #31
   3bdd4:	d5fb      	bpl.n	3bdce <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3bdd6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3bdd8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3bddc:	4770      	bx	lr
   3bdde:	bf00      	nop
   3bde0:	40039000 	.word	0x40039000

0003bde4 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3bde4:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   3bde8:	b510      	push	{r4, lr}
   3bdea:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3bdec:	d30b      	bcc.n	3be06 <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   3bdee:	4910      	ldr	r1, [pc, #64]	; (3be30 <nrfx_nvmc_page_erase+0x4c>)
   3bdf0:	4810      	ldr	r0, [pc, #64]	; (3be34 <nrfx_nvmc_page_erase+0x50>)
   3bdf2:	f44f 7382 	mov.w	r3, #260	; 0x104
   3bdf6:	4a10      	ldr	r2, [pc, #64]	; (3be38 <nrfx_nvmc_page_erase+0x54>)
   3bdf8:	f005 fef6 	bl	41be8 <printk>
   3bdfc:	f44f 7182 	mov.w	r1, #260	; 0x104
   3be00:	480d      	ldr	r0, [pc, #52]	; (3be38 <nrfx_nvmc_page_erase+0x54>)
   3be02:	f006 f90b 	bl	4201c <assert_post_action>
    return !(addr % flash_page_size_get());
   3be06:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   3be0a:	b97b      	cbnz	r3, 3be2c <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3be0c:	2202      	movs	r2, #2
   3be0e:	4b0b      	ldr	r3, [pc, #44]	; (3be3c <nrfx_nvmc_page_erase+0x58>)
   3be10:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3be14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3be18:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3be1a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3be1e:	07d2      	lsls	r2, r2, #31
   3be20:	d5fb      	bpl.n	3be1a <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   3be22:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3be24:	4806      	ldr	r0, [pc, #24]	; (3be40 <nrfx_nvmc_page_erase+0x5c>)
   3be26:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3be2a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3be2c:	4805      	ldr	r0, [pc, #20]	; (3be44 <nrfx_nvmc_page_erase+0x60>)
   3be2e:	e7fc      	b.n	3be2a <nrfx_nvmc_page_erase+0x46>
   3be30:	0004e8c8 	.word	0x0004e8c8
   3be34:	0004825b 	.word	0x0004825b
   3be38:	0004e90b 	.word	0x0004e90b
   3be3c:	40039000 	.word	0x40039000
   3be40:	0bad0000 	.word	0x0bad0000
   3be44:	0bad000a 	.word	0x0bad000a

0003be48 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3be48:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3be4c:	b570      	push	{r4, r5, r6, lr}
   3be4e:	4604      	mov	r4, r0
   3be50:	460e      	mov	r6, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3be52:	d30b      	bcc.n	3be6c <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   3be54:	4912      	ldr	r1, [pc, #72]	; (3bea0 <nrfx_nvmc_word_write+0x58>)
   3be56:	4813      	ldr	r0, [pc, #76]	; (3bea4 <nrfx_nvmc_word_write+0x5c>)
   3be58:	f44f 73c9 	mov.w	r3, #402	; 0x192
   3be5c:	4a12      	ldr	r2, [pc, #72]	; (3bea8 <nrfx_nvmc_word_write+0x60>)
   3be5e:	f005 fec3 	bl	41be8 <printk>
   3be62:	f44f 71c9 	mov.w	r1, #402	; 0x192
   3be66:	4810      	ldr	r0, [pc, #64]	; (3bea8 <nrfx_nvmc_word_write+0x60>)
   3be68:	f006 f8d8 	bl	4201c <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3be6c:	07a3      	lsls	r3, r4, #30
   3be6e:	d00b      	beq.n	3be88 <nrfx_nvmc_word_write+0x40>
   3be70:	490e      	ldr	r1, [pc, #56]	; (3beac <nrfx_nvmc_word_write+0x64>)
   3be72:	480c      	ldr	r0, [pc, #48]	; (3bea4 <nrfx_nvmc_word_write+0x5c>)
   3be74:	f240 1393 	movw	r3, #403	; 0x193
   3be78:	4a0b      	ldr	r2, [pc, #44]	; (3bea8 <nrfx_nvmc_word_write+0x60>)
   3be7a:	f005 feb5 	bl	41be8 <printk>
   3be7e:	f240 1193 	movw	r1, #403	; 0x193
   3be82:	4809      	ldr	r0, [pc, #36]	; (3bea8 <nrfx_nvmc_word_write+0x60>)
   3be84:	f006 f8ca 	bl	4201c <assert_post_action>
   3be88:	2301      	movs	r3, #1
   3be8a:	4d09      	ldr	r5, [pc, #36]	; (3beb0 <nrfx_nvmc_word_write+0x68>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3be8c:	4631      	mov	r1, r6
   3be8e:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584
   3be92:	4620      	mov	r0, r4
   3be94:	f7ff ff9a 	bl	3bdcc <nvmc_word_write>
   3be98:	2300      	movs	r3, #0
   3be9a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   3be9e:	bd70      	pop	{r4, r5, r6, pc}
   3bea0:	0004e8ae 	.word	0x0004e8ae
   3bea4:	0004825b 	.word	0x0004825b
   3bea8:	0004e90b 	.word	0x0004e90b
   3beac:	0004e8e2 	.word	0x0004e8e2
   3beb0:	40039000 	.word	0x40039000

0003beb4 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   3beb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3beb8:	4606      	mov	r6, r0
   3beba:	4617      	mov	r7, r2
    NRFX_ASSERT(p_config);
   3bebc:	460c      	mov	r4, r1
   3bebe:	b949      	cbnz	r1, 3bed4 <nrfx_wdt_init+0x20>
   3bec0:	4921      	ldr	r1, [pc, #132]	; (3bf48 <nrfx_wdt_init+0x94>)
   3bec2:	4822      	ldr	r0, [pc, #136]	; (3bf4c <nrfx_wdt_init+0x98>)
   3bec4:	233d      	movs	r3, #61	; 0x3d
   3bec6:	4a22      	ldr	r2, [pc, #136]	; (3bf50 <nrfx_wdt_init+0x9c>)
   3bec8:	f005 fe8e 	bl	41be8 <printk>
   3becc:	213d      	movs	r1, #61	; 0x3d
   3bece:	4820      	ldr	r0, [pc, #128]	; (3bf50 <nrfx_wdt_init+0x9c>)
   3bed0:	f006 f8a4 	bl	4201c <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3bed4:	7932      	ldrb	r2, [r6, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   3bed6:	4b1f      	ldr	r3, [pc, #124]	; (3bf54 <nrfx_wdt_init+0xa0>)
   3bed8:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   3bedc:	604f      	str	r7, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   3bede:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   3bee2:	bb69      	cbnz	r1, 3bf40 <nrfx_wdt_init+0x8c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3bee4:	2001      	movs	r0, #1
   3bee6:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   3beea:	7822      	ldrb	r2, [r4, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   3beec:	6833      	ldr	r3, [r6, #0]
   3beee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3bef2:	6863      	ldr	r3, [r4, #4]
   3bef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3bef8:	0c5d      	lsrs	r5, r3, #17
   3befa:	03dc      	lsls	r4, r3, #15
   3befc:	4620      	mov	r0, r4
   3befe:	2300      	movs	r3, #0
   3bf00:	4629      	mov	r1, r5
   3bf02:	f7e0 ffdb 	bl	1cebc <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3bf06:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   3bf0a:	bf08      	it	eq
   3bf0c:	2c00      	cmpeq	r4, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3bf0e:	4680      	mov	r8, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3bf10:	d309      	bcc.n	3bf26 <nrfx_wdt_init+0x72>
   3bf12:	4911      	ldr	r1, [pc, #68]	; (3bf58 <nrfx_wdt_init+0xa4>)
   3bf14:	480d      	ldr	r0, [pc, #52]	; (3bf4c <nrfx_wdt_init+0x98>)
   3bf16:	2358      	movs	r3, #88	; 0x58
   3bf18:	4a0d      	ldr	r2, [pc, #52]	; (3bf50 <nrfx_wdt_init+0x9c>)
   3bf1a:	f005 fe65 	bl	41be8 <printk>
   3bf1e:	2158      	movs	r1, #88	; 0x58
   3bf20:	480b      	ldr	r0, [pc, #44]	; (3bf50 <nrfx_wdt_init+0x9c>)
   3bf22:	f006 f87b 	bl	4201c <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   3bf26:	6830      	ldr	r0, [r6, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   3bf28:	f8c0 8504 	str.w	r8, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   3bf2c:	b137      	cbz	r7, 3bf3c <nrfx_wdt_init+0x88>
    p_reg->INTENSET = mask;
   3bf2e:	2301      	movs	r3, #1
   3bf30:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   3bf34:	f340 3007 	sbfx	r0, r0, #12, #8
   3bf38:	f7ea fe52 	bl	26be0 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3bf3c:	4807      	ldr	r0, [pc, #28]	; (3bf5c <nrfx_wdt_init+0xa8>)
   3bf3e:	e000      	b.n	3bf42 <nrfx_wdt_init+0x8e>
        return err_code;
   3bf40:	4807      	ldr	r0, [pc, #28]	; (3bf60 <nrfx_wdt_init+0xac>)
}
   3bf42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3bf46:	bf00      	nop
   3bf48:	0004ea32 	.word	0x0004ea32
   3bf4c:	0004825b 	.word	0x0004825b
   3bf50:	0004e9f7 	.word	0x0004e9f7
   3bf54:	20025ae4 	.word	0x20025ae4
   3bf58:	0004ea3b 	.word	0x0004ea3b
   3bf5c:	0bad0000 	.word	0x0bad0000
   3bf60:	0bad0005 	.word	0x0bad0005

0003bf64 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   3bf64:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3bf66:	4c13      	ldr	r4, [pc, #76]	; (3bfb4 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3bf68:	7905      	ldrb	r5, [r0, #4]
{
   3bf6a:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3bf6c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   3bf70:	785b      	ldrb	r3, [r3, #1]
   3bf72:	b94b      	cbnz	r3, 3bf88 <nrfx_wdt_enable+0x24>
   3bf74:	4910      	ldr	r1, [pc, #64]	; (3bfb8 <nrfx_wdt_enable+0x54>)
   3bf76:	4811      	ldr	r0, [pc, #68]	; (3bfbc <nrfx_wdt_enable+0x58>)
   3bf78:	236e      	movs	r3, #110	; 0x6e
   3bf7a:	4a11      	ldr	r2, [pc, #68]	; (3bfc0 <nrfx_wdt_enable+0x5c>)
   3bf7c:	f005 fe34 	bl	41be8 <printk>
   3bf80:	216e      	movs	r1, #110	; 0x6e
   3bf82:	480f      	ldr	r0, [pc, #60]	; (3bfc0 <nrfx_wdt_enable+0x5c>)
   3bf84:	f006 f84a 	bl	4201c <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3bf88:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   3bf8c:	2b01      	cmp	r3, #1
   3bf8e:	d009      	beq.n	3bfa4 <nrfx_wdt_enable+0x40>
   3bf90:	490c      	ldr	r1, [pc, #48]	; (3bfc4 <nrfx_wdt_enable+0x60>)
   3bf92:	480a      	ldr	r0, [pc, #40]	; (3bfbc <nrfx_wdt_enable+0x58>)
   3bf94:	236f      	movs	r3, #111	; 0x6f
   3bf96:	4a0a      	ldr	r2, [pc, #40]	; (3bfc0 <nrfx_wdt_enable+0x5c>)
   3bf98:	f005 fe26 	bl	41be8 <printk>
   3bf9c:	216f      	movs	r1, #111	; 0x6f
   3bf9e:	4808      	ldr	r0, [pc, #32]	; (3bfc0 <nrfx_wdt_enable+0x5c>)
   3bfa0:	f006 f83c 	bl	4201c <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   3bfa4:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   3bfa6:	6833      	ldr	r3, [r6, #0]
   3bfa8:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3bfaa:	2302      	movs	r3, #2
   3bfac:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   3bfb0:	bd70      	pop	{r4, r5, r6, pc}
   3bfb2:	bf00      	nop
   3bfb4:	20025ae4 	.word	0x20025ae4
   3bfb8:	0004e9b6 	.word	0x0004e9b6
   3bfbc:	0004825b 	.word	0x0004825b
   3bfc0:	0004e9f7 	.word	0x0004e9f7
   3bfc4:	0004e9cd 	.word	0x0004e9cd

0003bfc8 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   3bfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bfca:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3bfcc:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
   3bfce:	460e      	mov	r6, r1
   3bfd0:	b949      	cbnz	r1, 3bfe6 <nrfx_wdt_channel_alloc+0x1e>
   3bfd2:	491c      	ldr	r1, [pc, #112]	; (3c044 <nrfx_wdt_channel_alloc+0x7c>)
   3bfd4:	481c      	ldr	r0, [pc, #112]	; (3c048 <nrfx_wdt_channel_alloc+0x80>)
   3bfd6:	2385      	movs	r3, #133	; 0x85
   3bfd8:	4a1c      	ldr	r2, [pc, #112]	; (3c04c <nrfx_wdt_channel_alloc+0x84>)
   3bfda:	f005 fe05 	bl	41be8 <printk>
   3bfde:	2185      	movs	r1, #133	; 0x85
   3bfe0:	481a      	ldr	r0, [pc, #104]	; (3c04c <nrfx_wdt_channel_alloc+0x84>)
   3bfe2:	f006 f81b 	bl	4201c <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3bfe6:	4c1a      	ldr	r4, [pc, #104]	; (3c050 <nrfx_wdt_channel_alloc+0x88>)
   3bfe8:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   3bfec:	2a01      	cmp	r2, #1
   3bfee:	d009      	beq.n	3c004 <nrfx_wdt_channel_alloc+0x3c>
   3bff0:	4918      	ldr	r1, [pc, #96]	; (3c054 <nrfx_wdt_channel_alloc+0x8c>)
   3bff2:	4815      	ldr	r0, [pc, #84]	; (3c048 <nrfx_wdt_channel_alloc+0x80>)
   3bff4:	2386      	movs	r3, #134	; 0x86
   3bff6:	4a15      	ldr	r2, [pc, #84]	; (3c04c <nrfx_wdt_channel_alloc+0x84>)
   3bff8:	f005 fdf6 	bl	41be8 <printk>
   3bffc:	2186      	movs	r1, #134	; 0x86
   3bffe:	4813      	ldr	r0, [pc, #76]	; (3c04c <nrfx_wdt_channel_alloc+0x84>)
   3c000:	f006 f80c 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c004:	f04f 0320 	mov.w	r3, #32
   3c008:	f3ef 8c11 	mrs	ip, BASEPRI
   3c00c:	f383 8811 	msr	BASEPRI, r3
   3c010:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   3c014:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   3c018:	785a      	ldrb	r2, [r3, #1]
   3c01a:	2a07      	cmp	r2, #7
   3c01c:	d810      	bhi.n	3c040 <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   3c01e:	1c51      	adds	r1, r2, #1
   3c020:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   3c022:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   3c024:	6829      	ldr	r1, [r5, #0]
   3c026:	4093      	lsls	r3, r2
   3c028:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   3c02c:	7032      	strb	r2, [r6, #0]
   3c02e:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   3c030:	4809      	ldr	r0, [pc, #36]	; (3c058 <nrfx_wdt_channel_alloc+0x90>)
   3c032:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   3c036:	f38c 8811 	msr	BASEPRI, ip
   3c03a:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   3c03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   3c040:	4806      	ldr	r0, [pc, #24]	; (3c05c <nrfx_wdt_channel_alloc+0x94>)
   3c042:	e7f8      	b.n	3c036 <nrfx_wdt_channel_alloc+0x6e>
   3c044:	0004e967 	.word	0x0004e967
   3c048:	0004825b 	.word	0x0004825b
   3c04c:	0004e9f7 	.word	0x0004e9f7
   3c050:	20025ae4 	.word	0x20025ae4
   3c054:	0004e9cd 	.word	0x0004e9cd
   3c058:	0bad0000 	.word	0x0bad0000
   3c05c:	0bad0002 	.word	0x0bad0002

0003c060 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   3c060:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3c062:	4b0c      	ldr	r3, [pc, #48]	; (3c094 <nrfx_wdt_channel_feed+0x34>)
   3c064:	7902      	ldrb	r2, [r0, #4]
{
   3c066:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3c068:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   3c06c:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3c06e:	2b02      	cmp	r3, #2
   3c070:	d009      	beq.n	3c086 <nrfx_wdt_channel_feed+0x26>
   3c072:	4909      	ldr	r1, [pc, #36]	; (3c098 <nrfx_wdt_channel_feed+0x38>)
   3c074:	4809      	ldr	r0, [pc, #36]	; (3c09c <nrfx_wdt_channel_feed+0x3c>)
   3c076:	239b      	movs	r3, #155	; 0x9b
   3c078:	4a09      	ldr	r2, [pc, #36]	; (3c0a0 <nrfx_wdt_channel_feed+0x40>)
   3c07a:	f005 fdb5 	bl	41be8 <printk>
   3c07e:	219b      	movs	r1, #155	; 0x9b
   3c080:	4807      	ldr	r0, [pc, #28]	; (3c0a0 <nrfx_wdt_channel_feed+0x40>)
   3c082:	f005 ffcb 	bl	4201c <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   3c086:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   3c088:	4a06      	ldr	r2, [pc, #24]	; (3c0a4 <nrfx_wdt_channel_feed+0x44>)
   3c08a:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   3c08e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   3c092:	bd38      	pop	{r3, r4, r5, pc}
   3c094:	20025ae4 	.word	0x20025ae4
   3c098:	0004e974 	.word	0x0004e974
   3c09c:	0004825b 	.word	0x0004825b
   3c0a0:	0004e9f7 	.word	0x0004e9f7
   3c0a4:	6e524635 	.word	0x6e524635

0003c0a8 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   3c0a8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   3c0aa:	4c05      	ldr	r4, [pc, #20]	; (3c0c0 <nrfx_wdt_0_irq_handler+0x18>)
   3c0ac:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   3c0ae:	b12b      	cbz	r3, 3c0bc <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   3c0b0:	4b04      	ldr	r3, [pc, #16]	; (3c0c4 <nrfx_wdt_0_irq_handler+0x1c>)
   3c0b2:	685b      	ldr	r3, [r3, #4]
   3c0b4:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c0b6:	2300      	movs	r3, #0
   3c0b8:	6023      	str	r3, [r4, #0]
   3c0ba:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   3c0bc:	bd10      	pop	{r4, pc}
   3c0be:	bf00      	nop
   3c0c0:	40018100 	.word	0x40018100
   3c0c4:	20025ae4 	.word	0x20025ae4

0003c0c8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   3c0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3c0ca:	4b10      	ldr	r3, [pc, #64]	; (3c10c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   3c0cc:	4f10      	ldr	r7, [pc, #64]	; (3c110 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3c0ce:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3c0d2:	3001      	adds	r0, #1
   3c0d4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3c0d8:	42ae      	cmp	r6, r5
   3c0da:	d800      	bhi.n	3c0de <z_sys_init_run_level+0x16>
		}
	}
}
   3c0dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   3c0de:	e9d5 3400 	ldrd	r3, r4, [r5]
   3c0e2:	4620      	mov	r0, r4
   3c0e4:	4798      	blx	r3
   3c0e6:	b170      	cbz	r0, 3c106 <z_sys_init_run_level+0x3e>
   3c0e8:	b16c      	cbz	r4, 3c106 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   3c0ea:	2301      	movs	r3, #1
				(dev - __device_start));
   3c0ec:	1be4      	subs	r4, r4, r7
   3c0ee:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3c0f0:	4a08      	ldr	r2, [pc, #32]	; (3c114 <z_sys_init_run_level+0x4c>)
   3c0f2:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3c0f4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3c0f8:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   3c0fc:	fa03 f404 	lsl.w	r4, r3, r4
   3c100:	4304      	orrs	r4, r0
   3c102:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3c106:	3508      	adds	r5, #8
   3c108:	e7e6      	b.n	3c0d8 <z_sys_init_run_level+0x10>
   3c10a:	bf00      	nop
   3c10c:	000476ac 	.word	0x000476ac
   3c110:	20020998 	.word	0x20020998
   3c114:	20020a58 	.word	0x20020a58

0003c118 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   3c118:	4b08      	ldr	r3, [pc, #32]	; (3c13c <z_device_ready+0x24>)
   3c11a:	1ac0      	subs	r0, r0, r3
   3c11c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3c11e:	4b08      	ldr	r3, [pc, #32]	; (3c140 <z_device_ready+0x28>)
   3c120:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3c122:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   3c126:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3c128:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   3c12c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   3c130:	4210      	tst	r0, r2
}
   3c132:	bf0c      	ite	eq
   3c134:	4618      	moveq	r0, r3
   3c136:	2000      	movne	r0, #0
   3c138:	4770      	bx	lr
   3c13a:	bf00      	nop
   3c13c:	20020998 	.word	0x20020998
   3c140:	20020a58 	.word	0x20020a58

0003c144 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   3c144:	4911      	ldr	r1, [pc, #68]	; (3c18c <z_impl_device_get_binding+0x48>)
{
   3c146:	b570      	push	{r4, r5, r6, lr}
   3c148:	4605      	mov	r5, r0
   3c14a:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   3c14c:	4c10      	ldr	r4, [pc, #64]	; (3c190 <z_impl_device_get_binding+0x4c>)
   3c14e:	428c      	cmp	r4, r1
   3c150:	d104      	bne.n	3c15c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   3c152:	4c0f      	ldr	r4, [pc, #60]	; (3c190 <z_impl_device_get_binding+0x4c>)
   3c154:	42b4      	cmp	r4, r6
   3c156:	d10a      	bne.n	3c16e <z_impl_device_get_binding+0x2a>
	return NULL;
   3c158:	2400      	movs	r4, #0
   3c15a:	e014      	b.n	3c186 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   3c15c:	4620      	mov	r0, r4
   3c15e:	f7ff ffdb 	bl	3c118 <z_device_ready>
   3c162:	b110      	cbz	r0, 3c16a <z_impl_device_get_binding+0x26>
   3c164:	6823      	ldr	r3, [r4, #0]
   3c166:	42ab      	cmp	r3, r5
   3c168:	d00d      	beq.n	3c186 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   3c16a:	3410      	adds	r4, #16
   3c16c:	e7ef      	b.n	3c14e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3c16e:	4620      	mov	r0, r4
   3c170:	f7ff ffd2 	bl	3c118 <z_device_ready>
   3c174:	b908      	cbnz	r0, 3c17a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   3c176:	3410      	adds	r4, #16
   3c178:	e7ec      	b.n	3c154 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3c17a:	6821      	ldr	r1, [r4, #0]
   3c17c:	4628      	mov	r0, r5
   3c17e:	f7e1 f867 	bl	1d250 <strcmp>
   3c182:	2800      	cmp	r0, #0
   3c184:	d1f7      	bne.n	3c176 <z_impl_device_get_binding+0x32>
}
   3c186:	4620      	mov	r0, r4
   3c188:	bd70      	pop	{r4, r5, r6, pc}
   3c18a:	bf00      	nop
   3c18c:	20020a58 	.word	0x20020a58
   3c190:	20020998 	.word	0x20020998

0003c194 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3c194:	4b01      	ldr	r3, [pc, #4]	; (3c19c <z_impl_z_errno+0x8>)
   3c196:	6898      	ldr	r0, [r3, #8]
}
   3c198:	3064      	adds	r0, #100	; 0x64
   3c19a:	4770      	bx	lr
   3c19c:	20025af0 	.word	0x20025af0

0003c1a0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3c1a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c1a4:	4605      	mov	r5, r0
   3c1a6:	460f      	mov	r7, r1
	__asm__ volatile(
   3c1a8:	f04f 0320 	mov.w	r3, #32
   3c1ac:	f3ef 8911 	mrs	r9, BASEPRI
   3c1b0:	f383 8811 	msr	BASEPRI, r3
   3c1b4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   3c1b8:	f002 f81e 	bl	3e1f8 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3c1bc:	2301      	movs	r3, #1
   3c1be:	4606      	mov	r6, r0
   3c1c0:	f04f 0000 	mov.w	r0, #0
   3c1c4:	2200      	movs	r2, #0
   3c1c6:	f363 0007 	bfi	r0, r3, #0, #8
   3c1ca:	4c2d      	ldr	r4, [pc, #180]	; (3c280 <z_fatal_error+0xe0>)
   3c1cc:	4b2d      	ldr	r3, [pc, #180]	; (3c284 <z_fatal_error+0xe4>)
   3c1ce:	2d04      	cmp	r5, #4
   3c1d0:	eba4 0403 	sub.w	r4, r4, r3
   3c1d4:	bf98      	it	ls
   3c1d6:	4b2c      	ldrls	r3, [pc, #176]	; (3c288 <z_fatal_error+0xe8>)
   3c1d8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3c1dc:	bf94      	ite	ls
   3c1de:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   3c1e2:	4b2a      	ldrhi	r3, [pc, #168]	; (3c28c <z_fatal_error+0xec>)
   3c1e4:	9200      	str	r2, [sp, #0]
   3c1e6:	f364 108f 	bfi	r0, r4, #6, #10
   3c1ea:	462a      	mov	r2, r5
   3c1ec:	4928      	ldr	r1, [pc, #160]	; (3c290 <z_fatal_error+0xf0>)
   3c1ee:	f005 ff26 	bl	4203e <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3c1f2:	b16f      	cbz	r7, 3c210 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3c1f4:	69fb      	ldr	r3, [r7, #28]
   3c1f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   3c1fa:	b14b      	cbz	r3, 3c210 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   3c1fc:	f04f 0000 	mov.w	r0, #0
   3c200:	2301      	movs	r3, #1
   3c202:	f363 0007 	bfi	r0, r3, #0, #8
   3c206:	f364 108f 	bfi	r0, r4, #6, #10
   3c20a:	4922      	ldr	r1, [pc, #136]	; (3c294 <z_fatal_error+0xf4>)
   3c20c:	f005 ff17 	bl	4203e <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3c210:	f04f 0800 	mov.w	r8, #0
   3c214:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   3c216:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   3c218:	f363 0807 	bfi	r8, r3, #0, #8
   3c21c:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   3c220:	f008 fec3 	bl	44faa <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3c224:	b348      	cbz	r0, 3c27a <z_fatal_error+0xda>
   3c226:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3c228:	4b1b      	ldr	r3, [pc, #108]	; (3c298 <z_fatal_error+0xf8>)
   3c22a:	2a00      	cmp	r2, #0
   3c22c:	bf08      	it	eq
   3c22e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3c230:	f005 ff18 	bl	42064 <log_strdup>
   3c234:	4632      	mov	r2, r6
   3c236:	4603      	mov	r3, r0
   3c238:	4918      	ldr	r1, [pc, #96]	; (3c29c <z_fatal_error+0xfc>)
   3c23a:	4640      	mov	r0, r8
   3c23c:	f005 feff 	bl	4203e <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   3c240:	4639      	mov	r1, r7
   3c242:	4628      	mov	r0, r5
   3c244:	f7e5 fbc2 	bl	219cc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3c248:	2d04      	cmp	r5, #4
   3c24a:	d10c      	bne.n	3c266 <z_fatal_error+0xc6>
   3c24c:	4914      	ldr	r1, [pc, #80]	; (3c2a0 <z_fatal_error+0x100>)
   3c24e:	238f      	movs	r3, #143	; 0x8f
   3c250:	4a14      	ldr	r2, [pc, #80]	; (3c2a4 <z_fatal_error+0x104>)
   3c252:	4815      	ldr	r0, [pc, #84]	; (3c2a8 <z_fatal_error+0x108>)
   3c254:	f005 fcc8 	bl	41be8 <printk>
   3c258:	4814      	ldr	r0, [pc, #80]	; (3c2ac <z_fatal_error+0x10c>)
   3c25a:	f005 fcc5 	bl	41be8 <printk>
   3c25e:	218f      	movs	r1, #143	; 0x8f
   3c260:	4810      	ldr	r0, [pc, #64]	; (3c2a4 <z_fatal_error+0x104>)
   3c262:	f005 fedb 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c266:	f389 8811 	msr	BASEPRI, r9
   3c26a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3c26e:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   3c270:	b003      	add	sp, #12
   3c272:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c276:	f7eb b987 	b.w	27588 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3c27a:	4807      	ldr	r0, [pc, #28]	; (3c298 <z_fatal_error+0xf8>)
   3c27c:	e7d8      	b.n	3c230 <z_fatal_error+0x90>
   3c27e:	bf00      	nop
   3c280:	00046978 	.word	0x00046978
   3c284:	00046878 	.word	0x00046878
   3c288:	000476c4 	.word	0x000476c4
   3c28c:	0004ea9b 	.word	0x0004ea9b
   3c290:	0004eab1 	.word	0x0004eab1
   3c294:	0004ead9 	.word	0x0004ead9
   3c298:	0004eaa9 	.word	0x0004eaa9
   3c29c:	0004eafa 	.word	0x0004eafa
   3c2a0:	0004eb34 	.word	0x0004eb34
   3c2a4:	0004eb12 	.word	0x0004eb12
   3c2a8:	0004825b 	.word	0x0004825b
   3c2ac:	0004eb51 	.word	0x0004eb51

0003c2b0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3c2b0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3c2b2:	4d0b      	ldr	r5, [pc, #44]	; (3c2e0 <idle+0x30>)
	__asm__ volatile(
   3c2b4:	f04f 0220 	mov.w	r2, #32
   3c2b8:	f3ef 8311 	mrs	r3, BASEPRI
   3c2bc:	f382 8811 	msr	BASEPRI, r2
   3c2c0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   3c2c4:	f002 fcc6 	bl	3ec54 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3c2c8:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   3c2ca:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3c2cc:	2802      	cmp	r0, #2
   3c2ce:	bfd8      	it	le
   3c2d0:	4608      	movle	r0, r1
   3c2d2:	f002 fd07 	bl	3ece4 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3c2d6:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   3c2d8:	f7ea fd2a 	bl	26d30 <arch_cpu_idle>
   3c2dc:	e7ea      	b.n	3c2b4 <idle+0x4>
   3c2de:	bf00      	nop
   3c2e0:	20025af0 	.word	0x20025af0

0003c2e4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3c2e4:	4802      	ldr	r0, [pc, #8]	; (3c2f0 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3c2e6:	4a03      	ldr	r2, [pc, #12]	; (3c2f4 <z_bss_zero+0x10>)
   3c2e8:	2100      	movs	r1, #0
   3c2ea:	1a12      	subs	r2, r2, r0
   3c2ec:	f008 bfbc 	b.w	45268 <memset>
   3c2f0:	20020c80 	.word	0x20020c80
   3c2f4:	2002cc90 	.word	0x2002cc90

0003c2f8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3c2f8:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3c2fa:	4806      	ldr	r0, [pc, #24]	; (3c314 <z_data_copy+0x1c>)
   3c2fc:	4a06      	ldr	r2, [pc, #24]	; (3c318 <z_data_copy+0x20>)
   3c2fe:	4907      	ldr	r1, [pc, #28]	; (3c31c <z_data_copy+0x24>)
   3c300:	1a12      	subs	r2, r2, r0
   3c302:	f008 ff91 	bl	45228 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3c306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3c30a:	4a05      	ldr	r2, [pc, #20]	; (3c320 <z_data_copy+0x28>)
   3c30c:	4905      	ldr	r1, [pc, #20]	; (3c324 <z_data_copy+0x2c>)
   3c30e:	4806      	ldr	r0, [pc, #24]	; (3c328 <z_data_copy+0x30>)
   3c310:	f008 bf8a 	b.w	45228 <memcpy>
   3c314:	20020000 	.word	0x20020000
   3c318:	20020c80 	.word	0x20020c80
   3c31c:	0004f36c 	.word	0x0004f36c
   3c320:	00000000 	.word	0x00000000
   3c324:	0004f36c 	.word	0x0004f36c
   3c328:	20020000 	.word	0x20020000

0003c32c <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   3c32c:	2201      	movs	r2, #1
{
   3c32e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   3c330:	4b0b      	ldr	r3, [pc, #44]	; (3c360 <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3c332:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3c334:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3c336:	f7ff fec7 	bl	3c0c8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3c33a:	4a0a      	ldr	r2, [pc, #40]	; (3c364 <bg_thread_main+0x38>)
   3c33c:	490a      	ldr	r1, [pc, #40]	; (3c368 <bg_thread_main+0x3c>)
   3c33e:	480b      	ldr	r0, [pc, #44]	; (3c36c <bg_thread_main+0x40>)
   3c340:	f005 fc52 	bl	41be8 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3c344:	2003      	movs	r0, #3
   3c346:	f7ff febf 	bl	3c0c8 <z_sys_init_run_level>

	z_init_static_threads();
   3c34a:	f002 f8eb 	bl	3e524 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3c34e:	f7e6 f911 	bl	22574 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3c352:	4a07      	ldr	r2, [pc, #28]	; (3c370 <bg_thread_main+0x44>)
   3c354:	7b13      	ldrb	r3, [r2, #12]
   3c356:	f023 0301 	bic.w	r3, r3, #1
   3c35a:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3c35c:	bd08      	pop	{r3, pc}
   3c35e:	bf00      	nop
   3c360:	2002cb17 	.word	0x2002cb17
   3c364:	00049479 	.word	0x00049479
   3c368:	0004eb86 	.word	0x0004eb86
   3c36c:	0004eba9 	.word	0x0004eba9
   3c370:	200243e0 	.word	0x200243e0

0003c374 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3c374:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   3c378:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3c37a:	f7e8 fcd5 	bl	24d28 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3c37e:	4b34      	ldr	r3, [pc, #208]	; (3c450 <z_cstart+0xdc>)
	uint32_t msp =
   3c380:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3c384:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3c388:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3c38c:	2400      	movs	r4, #0
   3c38e:	23e0      	movs	r3, #224	; 0xe0
   3c390:	4d30      	ldr	r5, [pc, #192]	; (3c454 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3c392:	f04f 0b01 	mov.w	fp, #1
   3c396:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3c39a:	77ec      	strb	r4, [r5, #31]
   3c39c:	762c      	strb	r4, [r5, #24]
   3c39e:	766c      	strb	r4, [r5, #25]
   3c3a0:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3c3a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   3c3a4:	4e2c      	ldr	r6, [pc, #176]	; (3c458 <z_cstart+0xe4>)
   3c3a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3c3aa:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3c3ac:	f7eb f8b4 	bl	27518 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3c3b0:	f7ea fcb8 	bl	26d24 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3c3b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c3b8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3c3ba:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3c3bc:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   3c3c0:	4d26      	ldr	r5, [pc, #152]	; (3c45c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   3c3c2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   3c3c6:	ab06      	add	r3, sp, #24
   3c3c8:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3c3ca:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   3c3cc:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   3c3d0:	f7ff fe7a 	bl	3c0c8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3c3d4:	2001      	movs	r0, #1
   3c3d6:	f7ff fe77 	bl	3c0c8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3c3da:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3c474 <z_cstart+0x100>
	z_sched_init();
   3c3de:	f001 fd83 	bl	3dee8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3c3e2:	4b1f      	ldr	r3, [pc, #124]	; (3c460 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   3c3e4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3c3e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3c3ea:	491e      	ldr	r1, [pc, #120]	; (3c464 <z_cstart+0xf0>)
   3c3ec:	9305      	str	r3, [sp, #20]
   3c3ee:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   3c3f2:	4643      	mov	r3, r8
   3c3f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3c3f8:	9400      	str	r4, [sp, #0]
   3c3fa:	4630      	mov	r0, r6
   3c3fc:	f001 ffe8 	bl	3e3d0 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3c400:	7b73      	ldrb	r3, [r6, #13]
   3c402:	4682      	mov	sl, r0
   3c404:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   3c408:	4630      	mov	r0, r6
   3c40a:	7373      	strb	r3, [r6, #13]
   3c40c:	f001 f862 	bl	3d4d4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   3c410:	230f      	movs	r3, #15
   3c412:	4f15      	ldr	r7, [pc, #84]	; (3c468 <z_cstart+0xf4>)
   3c414:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3c418:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3c41c:	4b13      	ldr	r3, [pc, #76]	; (3c46c <z_cstart+0xf8>)
   3c41e:	4914      	ldr	r1, [pc, #80]	; (3c470 <z_cstart+0xfc>)
   3c420:	e9cd b404 	strd	fp, r4, [sp, #16]
   3c424:	e9cd 4400 	strd	r4, r4, [sp]
   3c428:	4638      	mov	r0, r7
   3c42a:	f001 ffd1 	bl	3e3d0 <z_setup_new_thread>
   3c42e:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   3c430:	60ef      	str	r7, [r5, #12]
   3c432:	f023 0304 	bic.w	r3, r3, #4
   3c436:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3c438:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
   3c43c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   3c43e:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   3c442:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3c446:	4642      	mov	r2, r8
   3c448:	4651      	mov	r1, sl
   3c44a:	4630      	mov	r0, r6
   3c44c:	f7ea fc44 	bl	26cd8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3c450:	200313d0 	.word	0x200313d0
   3c454:	e000ed00 	.word	0xe000ed00
   3c458:	200243e0 	.word	0x200243e0
   3c45c:	20025af0 	.word	0x20025af0
   3c460:	0004ebd3 	.word	0x0004ebd3
   3c464:	2002f290 	.word	0x2002f290
   3c468:	20024318 	.word	0x20024318
   3c46c:	0003c2b1 	.word	0x0003c2b1
   3c470:	20031290 	.word	0x20031290
   3c474:	0003c32d 	.word	0x0003c32d

0003c478 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   3c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3c47a:	4d0f      	ldr	r5, [pc, #60]	; (3c4b8 <statics_init+0x40>)
   3c47c:	4c0f      	ldr	r4, [pc, #60]	; (3c4bc <statics_init+0x44>)
   3c47e:	462f      	mov	r7, r5
   3c480:	4e0f      	ldr	r6, [pc, #60]	; (3c4c0 <statics_init+0x48>)
   3c482:	42ac      	cmp	r4, r5
   3c484:	d90c      	bls.n	3c4a0 <statics_init+0x28>
   3c486:	490f      	ldr	r1, [pc, #60]	; (3c4c4 <statics_init+0x4c>)
   3c488:	2315      	movs	r3, #21
   3c48a:	4632      	mov	r2, r6
   3c48c:	480e      	ldr	r0, [pc, #56]	; (3c4c8 <statics_init+0x50>)
   3c48e:	f005 fbab 	bl	41be8 <printk>
   3c492:	480e      	ldr	r0, [pc, #56]	; (3c4cc <statics_init+0x54>)
   3c494:	f005 fba8 	bl	41be8 <printk>
   3c498:	2115      	movs	r1, #21
   3c49a:	4630      	mov	r0, r6
   3c49c:	f005 fdbe 	bl	4201c <assert_post_action>
   3c4a0:	42bc      	cmp	r4, r7
   3c4a2:	d301      	bcc.n	3c4a8 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   3c4a4:	2000      	movs	r0, #0
   3c4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   3c4a8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   3c4ac:	4620      	mov	r0, r4
   3c4ae:	f008 fcd2 	bl	44e56 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3c4b2:	3418      	adds	r4, #24
   3c4b4:	e7e5      	b.n	3c482 <statics_init+0xa>
   3c4b6:	bf00      	nop
   3c4b8:	20020ad4 	.word	0x20020ad4
   3c4bc:	20020abc 	.word	0x20020abc
   3c4c0:	0004ec1d 	.word	0x0004ec1d
   3c4c4:	0004ec3f 	.word	0x0004ec3f
   3c4c8:	0004825b 	.word	0x0004825b
   3c4cc:	000494f5 	.word	0x000494f5

0003c4d0 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   3c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c4d4:	4606      	mov	r6, r0
   3c4d6:	b085      	sub	sp, #20
   3c4d8:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   3c4da:	4610      	mov	r0, r2
   3c4dc:	4619      	mov	r1, r3
{
   3c4de:	4690      	mov	r8, r2
   3c4e0:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   3c4e2:	f008 fdce 	bl	45082 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3c4e6:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   3c4ea:	4607      	mov	r7, r0
   3c4ec:	468b      	mov	fp, r1
   3c4ee:	f04f 0320 	mov.w	r3, #32
   3c4f2:	f3ef 8511 	mrs	r5, BASEPRI
   3c4f6:	f383 8811 	msr	BASEPRI, r3
   3c4fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c4fe:	4620      	mov	r0, r4
   3c500:	f002 f8a0 	bl	3e644 <z_spin_lock_valid>
   3c504:	b968      	cbnz	r0, 3c522 <k_heap_alloc+0x52>
   3c506:	235c      	movs	r3, #92	; 0x5c
   3c508:	4a3d      	ldr	r2, [pc, #244]	; (3c600 <k_heap_alloc+0x130>)
   3c50a:	493e      	ldr	r1, [pc, #248]	; (3c604 <k_heap_alloc+0x134>)
   3c50c:	483e      	ldr	r0, [pc, #248]	; (3c608 <k_heap_alloc+0x138>)
   3c50e:	f005 fb6b 	bl	41be8 <printk>
   3c512:	4621      	mov	r1, r4
   3c514:	483d      	ldr	r0, [pc, #244]	; (3c60c <k_heap_alloc+0x13c>)
   3c516:	f005 fb67 	bl	41be8 <printk>
   3c51a:	215c      	movs	r1, #92	; 0x5c
   3c51c:	4838      	ldr	r0, [pc, #224]	; (3c600 <k_heap_alloc+0x130>)
   3c51e:	f005 fd7d 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3c522:	4620      	mov	r0, r4
   3c524:	f002 f8ac 	bl	3e680 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3c528:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3c52c:	b17b      	cbz	r3, 3c54e <k_heap_alloc+0x7e>
   3c52e:	ea58 0309 	orrs.w	r3, r8, r9
   3c532:	d00c      	beq.n	3c54e <k_heap_alloc+0x7e>
   3c534:	4936      	ldr	r1, [pc, #216]	; (3c610 <k_heap_alloc+0x140>)
   3c536:	2323      	movs	r3, #35	; 0x23
   3c538:	4a36      	ldr	r2, [pc, #216]	; (3c614 <k_heap_alloc+0x144>)
   3c53a:	4833      	ldr	r0, [pc, #204]	; (3c608 <k_heap_alloc+0x138>)
   3c53c:	f005 fb54 	bl	41be8 <printk>
   3c540:	4835      	ldr	r0, [pc, #212]	; (3c618 <k_heap_alloc+0x148>)
   3c542:	f005 fb51 	bl	41be8 <printk>
   3c546:	2123      	movs	r1, #35	; 0x23
   3c548:	4832      	ldr	r0, [pc, #200]	; (3c614 <k_heap_alloc+0x144>)
   3c54a:	f005 fd67 	bl	4201c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c54e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3c600 <k_heap_alloc+0x130>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   3c552:	4651      	mov	r1, sl
   3c554:	4630      	mov	r0, r6
   3c556:	f005 fd32 	bl	41fbe <sys_heap_alloc>
   3c55a:	4680      	mov	r8, r0

		now = z_tick_get();
   3c55c:	f002 fcda 	bl	3ef14 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3c560:	f1b8 0f00 	cmp.w	r8, #0
   3c564:	d019      	beq.n	3c59a <k_heap_alloc+0xca>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c566:	4620      	mov	r0, r4
   3c568:	f002 f87a 	bl	3e660 <z_spin_unlock_valid>
   3c56c:	b968      	cbnz	r0, 3c58a <k_heap_alloc+0xba>
   3c56e:	2384      	movs	r3, #132	; 0x84
   3c570:	4a23      	ldr	r2, [pc, #140]	; (3c600 <k_heap_alloc+0x130>)
   3c572:	492a      	ldr	r1, [pc, #168]	; (3c61c <k_heap_alloc+0x14c>)
   3c574:	4824      	ldr	r0, [pc, #144]	; (3c608 <k_heap_alloc+0x138>)
   3c576:	f005 fb37 	bl	41be8 <printk>
   3c57a:	4621      	mov	r1, r4
   3c57c:	4828      	ldr	r0, [pc, #160]	; (3c620 <k_heap_alloc+0x150>)
   3c57e:	f005 fb33 	bl	41be8 <printk>
   3c582:	2184      	movs	r1, #132	; 0x84
   3c584:	481e      	ldr	r0, [pc, #120]	; (3c600 <k_heap_alloc+0x130>)
   3c586:	f005 fd49 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c58a:	f385 8811 	msr	BASEPRI, r5
   3c58e:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3c592:	4640      	mov	r0, r8
   3c594:	b005      	add	sp, #20
   3c596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   3c59a:	1a3b      	subs	r3, r7, r0
   3c59c:	9302      	str	r3, [sp, #8]
   3c59e:	eb6b 0301 	sbc.w	r3, fp, r1
   3c5a2:	9303      	str	r3, [sp, #12]
   3c5a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3c5a8:	2a01      	cmp	r2, #1
   3c5aa:	f173 0300 	sbcs.w	r3, r3, #0
   3c5ae:	dbda      	blt.n	3c566 <k_heap_alloc+0x96>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3c5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3c5b4:	4629      	mov	r1, r5
   3c5b6:	e9cd 2300 	strd	r2, r3, [sp]
   3c5ba:	4620      	mov	r0, r4
   3c5bc:	f106 020c 	add.w	r2, r6, #12
   3c5c0:	f001 fb4c 	bl	3dc5c <z_pend_curr>
	__asm__ volatile(
   3c5c4:	f04f 0320 	mov.w	r3, #32
   3c5c8:	f3ef 8511 	mrs	r5, BASEPRI
   3c5cc:	f383 8811 	msr	BASEPRI, r3
   3c5d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c5d4:	4620      	mov	r0, r4
   3c5d6:	f002 f835 	bl	3e644 <z_spin_lock_valid>
   3c5da:	b968      	cbnz	r0, 3c5f8 <k_heap_alloc+0x128>
   3c5dc:	235c      	movs	r3, #92	; 0x5c
   3c5de:	464a      	mov	r2, r9
   3c5e0:	4908      	ldr	r1, [pc, #32]	; (3c604 <k_heap_alloc+0x134>)
   3c5e2:	4809      	ldr	r0, [pc, #36]	; (3c608 <k_heap_alloc+0x138>)
   3c5e4:	f005 fb00 	bl	41be8 <printk>
   3c5e8:	4621      	mov	r1, r4
   3c5ea:	4808      	ldr	r0, [pc, #32]	; (3c60c <k_heap_alloc+0x13c>)
   3c5ec:	f005 fafc 	bl	41be8 <printk>
   3c5f0:	215c      	movs	r1, #92	; 0x5c
   3c5f2:	4648      	mov	r0, r9
   3c5f4:	f005 fd12 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3c5f8:	4620      	mov	r0, r4
   3c5fa:	f002 f841 	bl	3e680 <z_spin_lock_set_owner>
	return k;
   3c5fe:	e7a8      	b.n	3c552 <k_heap_alloc+0x82>
   3c600:	00048d7b 	.word	0x00048d7b
   3c604:	00048da1 	.word	0x00048da1
   3c608:	0004825b 	.word	0x0004825b
   3c60c:	00048db6 	.word	0x00048db6
   3c610:	0004ebd8 	.word	0x0004ebd8
   3c614:	0004ec1d 	.word	0x0004ec1d
   3c618:	00049477 	.word	0x00049477
   3c61c:	00048dce 	.word	0x00048dce
   3c620:	00048de5 	.word	0x00048de5

0003c624 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   3c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c626:	4605      	mov	r5, r0
   3c628:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3c62a:	f100 0414 	add.w	r4, r0, #20
   3c62e:	f04f 0320 	mov.w	r3, #32
   3c632:	f3ef 8611 	mrs	r6, BASEPRI
   3c636:	f383 8811 	msr	BASEPRI, r3
   3c63a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c63e:	4620      	mov	r0, r4
   3c640:	f002 f800 	bl	3e644 <z_spin_lock_valid>
   3c644:	b968      	cbnz	r0, 3c662 <k_heap_free+0x3e>
   3c646:	235c      	movs	r3, #92	; 0x5c
   3c648:	4a1a      	ldr	r2, [pc, #104]	; (3c6b4 <k_heap_free+0x90>)
   3c64a:	491b      	ldr	r1, [pc, #108]	; (3c6b8 <k_heap_free+0x94>)
   3c64c:	481b      	ldr	r0, [pc, #108]	; (3c6bc <k_heap_free+0x98>)
   3c64e:	f005 facb 	bl	41be8 <printk>
   3c652:	4621      	mov	r1, r4
   3c654:	481a      	ldr	r0, [pc, #104]	; (3c6c0 <k_heap_free+0x9c>)
   3c656:	f005 fac7 	bl	41be8 <printk>
   3c65a:	215c      	movs	r1, #92	; 0x5c
   3c65c:	4815      	ldr	r0, [pc, #84]	; (3c6b4 <k_heap_free+0x90>)
   3c65e:	f005 fcdd 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3c662:	4620      	mov	r0, r4
   3c664:	f002 f80c 	bl	3e680 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   3c668:	4628      	mov	r0, r5
   3c66a:	4639      	mov	r1, r7
   3c66c:	f7e8 f9e0 	bl	24a30 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   3c670:	f105 000c 	add.w	r0, r5, #12
   3c674:	f008 fc6e 	bl	44f54 <z_unpend_all>
   3c678:	b128      	cbz	r0, 3c686 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   3c67a:	4631      	mov	r1, r6
   3c67c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3c67e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   3c682:	f000 bd07 	b.w	3d094 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c686:	4620      	mov	r0, r4
   3c688:	f001 ffea 	bl	3e660 <z_spin_unlock_valid>
   3c68c:	b968      	cbnz	r0, 3c6aa <k_heap_free+0x86>
   3c68e:	2384      	movs	r3, #132	; 0x84
   3c690:	4a08      	ldr	r2, [pc, #32]	; (3c6b4 <k_heap_free+0x90>)
   3c692:	490c      	ldr	r1, [pc, #48]	; (3c6c4 <k_heap_free+0xa0>)
   3c694:	4809      	ldr	r0, [pc, #36]	; (3c6bc <k_heap_free+0x98>)
   3c696:	f005 faa7 	bl	41be8 <printk>
   3c69a:	4621      	mov	r1, r4
   3c69c:	480a      	ldr	r0, [pc, #40]	; (3c6c8 <k_heap_free+0xa4>)
   3c69e:	f005 faa3 	bl	41be8 <printk>
   3c6a2:	2184      	movs	r1, #132	; 0x84
   3c6a4:	4803      	ldr	r0, [pc, #12]	; (3c6b4 <k_heap_free+0x90>)
   3c6a6:	f005 fcb9 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c6aa:	f386 8811 	msr	BASEPRI, r6
   3c6ae:	f3bf 8f6f 	isb	sy
}
   3c6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c6b4:	00048d7b 	.word	0x00048d7b
   3c6b8:	00048da1 	.word	0x00048da1
   3c6bc:	0004825b 	.word	0x0004825b
   3c6c0:	00048db6 	.word	0x00048db6
   3c6c4:	00048dce 	.word	0x00048dce
   3c6c8:	00048de5 	.word	0x00048de5

0003c6cc <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   3c6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3c6d0:	4d16      	ldr	r5, [pc, #88]	; (3c72c <init_mem_slab_module+0x60>)
   3c6d2:	4c17      	ldr	r4, [pc, #92]	; (3c730 <init_mem_slab_module+0x64>)
   3c6d4:	46a8      	mov	r8, r5
   3c6d6:	4e17      	ldr	r6, [pc, #92]	; (3c734 <init_mem_slab_module+0x68>)
   3c6d8:	42ac      	cmp	r4, r5
   3c6da:	d90c      	bls.n	3c6f6 <init_mem_slab_module+0x2a>
   3c6dc:	4916      	ldr	r1, [pc, #88]	; (3c738 <init_mem_slab_module+0x6c>)
   3c6de:	2342      	movs	r3, #66	; 0x42
   3c6e0:	4632      	mov	r2, r6
   3c6e2:	4816      	ldr	r0, [pc, #88]	; (3c73c <init_mem_slab_module+0x70>)
   3c6e4:	f005 fa80 	bl	41be8 <printk>
   3c6e8:	4815      	ldr	r0, [pc, #84]	; (3c740 <init_mem_slab_module+0x74>)
   3c6ea:	f005 fa7d 	bl	41be8 <printk>
   3c6ee:	2142      	movs	r1, #66	; 0x42
   3c6f0:	4630      	mov	r0, r6
   3c6f2:	f005 fc93 	bl	4201c <assert_post_action>
   3c6f6:	4544      	cmp	r4, r8
   3c6f8:	d302      	bcc.n	3c700 <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   3c6fa:	2000      	movs	r0, #0
	return rc;
}
   3c6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3c700:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   3c704:	ea42 0301 	orr.w	r3, r2, r1
   3c708:	f013 0303 	ands.w	r3, r3, #3
   3c70c:	d10b      	bne.n	3c726 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   3c70e:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   3c710:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3c712:	4283      	cmp	r3, r0
   3c714:	d101      	bne.n	3c71a <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3c716:	341c      	adds	r4, #28
   3c718:	e7de      	b.n	3c6d8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   3c71a:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3c71c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3c71e:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   3c720:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3c722:	440a      	add	r2, r1
   3c724:	e7f5      	b.n	3c712 <init_mem_slab_module+0x46>
		return -EINVAL;
   3c726:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3c72a:	e7e7      	b.n	3c6fc <init_mem_slab_module+0x30>
   3c72c:	20020abc 	.word	0x20020abc
   3c730:	20020abc 	.word	0x20020abc
   3c734:	0004ec55 	.word	0x0004ec55
   3c738:	0004ec7a 	.word	0x0004ec7a
   3c73c:	0004825b 	.word	0x0004825b
   3c740:	000494f5 	.word	0x000494f5

0003c744 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   3c744:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3c748:	4604      	mov	r4, r0
   3c74a:	468a      	mov	sl, r1
   3c74c:	4690      	mov	r8, r2
   3c74e:	4699      	mov	r9, r3
   3c750:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3c754:	b17b      	cbz	r3, 3c776 <z_impl_k_msgq_put+0x32>
   3c756:	ea58 0309 	orrs.w	r3, r8, r9
   3c75a:	d00c      	beq.n	3c776 <z_impl_k_msgq_put+0x32>
   3c75c:	4940      	ldr	r1, [pc, #256]	; (3c860 <z_impl_k_msgq_put+0x11c>)
   3c75e:	2376      	movs	r3, #118	; 0x76
   3c760:	4a40      	ldr	r2, [pc, #256]	; (3c864 <z_impl_k_msgq_put+0x120>)
   3c762:	4841      	ldr	r0, [pc, #260]	; (3c868 <z_impl_k_msgq_put+0x124>)
   3c764:	f005 fa40 	bl	41be8 <printk>
   3c768:	4840      	ldr	r0, [pc, #256]	; (3c86c <z_impl_k_msgq_put+0x128>)
   3c76a:	f005 fa3d 	bl	41be8 <printk>
   3c76e:	2176      	movs	r1, #118	; 0x76
   3c770:	483c      	ldr	r0, [pc, #240]	; (3c864 <z_impl_k_msgq_put+0x120>)
   3c772:	f005 fc53 	bl	4201c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c776:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   3c77a:	f04f 0320 	mov.w	r3, #32
   3c77e:	f3ef 8711 	mrs	r7, BASEPRI
   3c782:	f383 8811 	msr	BASEPRI, r3
   3c786:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c78a:	4628      	mov	r0, r5
   3c78c:	f001 ff5a 	bl	3e644 <z_spin_lock_valid>
   3c790:	b968      	cbnz	r0, 3c7ae <z_impl_k_msgq_put+0x6a>
   3c792:	235c      	movs	r3, #92	; 0x5c
   3c794:	4a36      	ldr	r2, [pc, #216]	; (3c870 <z_impl_k_msgq_put+0x12c>)
   3c796:	4937      	ldr	r1, [pc, #220]	; (3c874 <z_impl_k_msgq_put+0x130>)
   3c798:	4833      	ldr	r0, [pc, #204]	; (3c868 <z_impl_k_msgq_put+0x124>)
   3c79a:	f005 fa25 	bl	41be8 <printk>
   3c79e:	4629      	mov	r1, r5
   3c7a0:	4835      	ldr	r0, [pc, #212]	; (3c878 <z_impl_k_msgq_put+0x134>)
   3c7a2:	f005 fa21 	bl	41be8 <printk>
   3c7a6:	215c      	movs	r1, #92	; 0x5c
   3c7a8:	4831      	ldr	r0, [pc, #196]	; (3c870 <z_impl_k_msgq_put+0x12c>)
   3c7aa:	f005 fc37 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3c7ae:	4628      	mov	r0, r5
   3c7b0:	f001 ff66 	bl	3e680 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3c7b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3c7b6:	6923      	ldr	r3, [r4, #16]
   3c7b8:	429a      	cmp	r2, r3
   3c7ba:	d23d      	bcs.n	3c838 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c7bc:	4620      	mov	r0, r4
   3c7be:	f001 fb0d 	bl	3dddc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3c7c2:	68e2      	ldr	r2, [r4, #12]
   3c7c4:	4606      	mov	r6, r0
   3c7c6:	4651      	mov	r1, sl
   3c7c8:	b178      	cbz	r0, 3c7ea <z_impl_k_msgq_put+0xa6>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3c7ca:	2400      	movs	r4, #0
   3c7cc:	6940      	ldr	r0, [r0, #20]
   3c7ce:	f008 fd2b 	bl	45228 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3c7d2:	4630      	mov	r0, r6
   3c7d4:	67f4      	str	r4, [r6, #124]	; 0x7c
   3c7d6:	f000 fe7d 	bl	3d4d4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3c7da:	4639      	mov	r1, r7
   3c7dc:	4628      	mov	r0, r5
   3c7de:	f000 fc59 	bl	3d094 <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c7e2:	4620      	mov	r0, r4
   3c7e4:	b002      	add	sp, #8
   3c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c7ea:	6a20      	ldr	r0, [r4, #32]
   3c7ec:	f008 fd1c 	bl	45228 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3c7f0:	6a23      	ldr	r3, [r4, #32]
   3c7f2:	68e2      	ldr	r2, [r4, #12]
   3c7f4:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c7f6:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c7f8:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c7fa:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c7fc:	bf04      	itt	eq
   3c7fe:	6963      	ldreq	r3, [r4, #20]
   3c800:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3c802:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c804:	3301      	adds	r3, #1
   3c806:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3c808:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c80a:	4628      	mov	r0, r5
   3c80c:	f001 ff28 	bl	3e660 <z_spin_unlock_valid>
   3c810:	b968      	cbnz	r0, 3c82e <z_impl_k_msgq_put+0xea>
   3c812:	2384      	movs	r3, #132	; 0x84
   3c814:	4a16      	ldr	r2, [pc, #88]	; (3c870 <z_impl_k_msgq_put+0x12c>)
   3c816:	4919      	ldr	r1, [pc, #100]	; (3c87c <z_impl_k_msgq_put+0x138>)
   3c818:	4813      	ldr	r0, [pc, #76]	; (3c868 <z_impl_k_msgq_put+0x124>)
   3c81a:	f005 f9e5 	bl	41be8 <printk>
   3c81e:	4629      	mov	r1, r5
   3c820:	4817      	ldr	r0, [pc, #92]	; (3c880 <z_impl_k_msgq_put+0x13c>)
   3c822:	f005 f9e1 	bl	41be8 <printk>
   3c826:	2184      	movs	r1, #132	; 0x84
   3c828:	4811      	ldr	r0, [pc, #68]	; (3c870 <z_impl_k_msgq_put+0x12c>)
   3c82a:	f005 fbf7 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c82e:	f387 8811 	msr	BASEPRI, r7
   3c832:	f3bf 8f6f 	isb	sy
	return result;
   3c836:	e7d4      	b.n	3c7e2 <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3c838:	ea58 0309 	orrs.w	r3, r8, r9
   3c83c:	d00c      	beq.n	3c858 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   3c83e:	4b11      	ldr	r3, [pc, #68]	; (3c884 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c840:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   3c842:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c844:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   3c846:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c84a:	4628      	mov	r0, r5
   3c84c:	e9cd 8900 	strd	r8, r9, [sp]
   3c850:	f001 fa04 	bl	3dc5c <z_pend_curr>
   3c854:	4604      	mov	r4, r0
   3c856:	e7c4      	b.n	3c7e2 <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   3c858:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3c85c:	e7d5      	b.n	3c80a <z_impl_k_msgq_put+0xc6>
   3c85e:	bf00      	nop
   3c860:	0004ebd8 	.word	0x0004ebd8
   3c864:	0004ec97 	.word	0x0004ec97
   3c868:	0004825b 	.word	0x0004825b
   3c86c:	00049477 	.word	0x00049477
   3c870:	00048d7b 	.word	0x00048d7b
   3c874:	00048da1 	.word	0x00048da1
   3c878:	00048db6 	.word	0x00048db6
   3c87c:	00048dce 	.word	0x00048dce
   3c880:	00048de5 	.word	0x00048de5
   3c884:	20025af0 	.word	0x20025af0

0003c888 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   3c888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3c88c:	4604      	mov	r4, r0
   3c88e:	460d      	mov	r5, r1
   3c890:	4690      	mov	r8, r2
   3c892:	4699      	mov	r9, r3
   3c894:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3c898:	b17b      	cbz	r3, 3c8ba <z_impl_k_msgq_get+0x32>
   3c89a:	ea58 0309 	orrs.w	r3, r8, r9
   3c89e:	d00c      	beq.n	3c8ba <z_impl_k_msgq_get+0x32>
   3c8a0:	4946      	ldr	r1, [pc, #280]	; (3c9bc <z_impl_k_msgq_get+0x134>)
   3c8a2:	23c2      	movs	r3, #194	; 0xc2
   3c8a4:	4a46      	ldr	r2, [pc, #280]	; (3c9c0 <z_impl_k_msgq_get+0x138>)
   3c8a6:	4847      	ldr	r0, [pc, #284]	; (3c9c4 <z_impl_k_msgq_get+0x13c>)
   3c8a8:	f005 f99e 	bl	41be8 <printk>
   3c8ac:	4846      	ldr	r0, [pc, #280]	; (3c9c8 <z_impl_k_msgq_get+0x140>)
   3c8ae:	f005 f99b 	bl	41be8 <printk>
   3c8b2:	21c2      	movs	r1, #194	; 0xc2
   3c8b4:	4842      	ldr	r0, [pc, #264]	; (3c9c0 <z_impl_k_msgq_get+0x138>)
   3c8b6:	f005 fbb1 	bl	4201c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3c8ba:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3c8be:	f04f 0320 	mov.w	r3, #32
   3c8c2:	f3ef 8711 	mrs	r7, BASEPRI
   3c8c6:	f383 8811 	msr	BASEPRI, r3
   3c8ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3c8ce:	4630      	mov	r0, r6
   3c8d0:	f001 feb8 	bl	3e644 <z_spin_lock_valid>
   3c8d4:	b968      	cbnz	r0, 3c8f2 <z_impl_k_msgq_get+0x6a>
   3c8d6:	235c      	movs	r3, #92	; 0x5c
   3c8d8:	4a3c      	ldr	r2, [pc, #240]	; (3c9cc <z_impl_k_msgq_get+0x144>)
   3c8da:	493d      	ldr	r1, [pc, #244]	; (3c9d0 <z_impl_k_msgq_get+0x148>)
   3c8dc:	4839      	ldr	r0, [pc, #228]	; (3c9c4 <z_impl_k_msgq_get+0x13c>)
   3c8de:	f005 f983 	bl	41be8 <printk>
   3c8e2:	4631      	mov	r1, r6
   3c8e4:	483b      	ldr	r0, [pc, #236]	; (3c9d4 <z_impl_k_msgq_get+0x14c>)
   3c8e6:	f005 f97f 	bl	41be8 <printk>
   3c8ea:	215c      	movs	r1, #92	; 0x5c
   3c8ec:	4837      	ldr	r0, [pc, #220]	; (3c9cc <z_impl_k_msgq_get+0x144>)
   3c8ee:	f005 fb95 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3c8f2:	4630      	mov	r0, r6
   3c8f4:	f001 fec4 	bl	3e680 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3c8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c8fa:	2b00      	cmp	r3, #0
   3c8fc:	d035      	beq.n	3c96a <z_impl_k_msgq_get+0xe2>
   3c8fe:	68e2      	ldr	r2, [r4, #12]
   3c900:	69e1      	ldr	r1, [r4, #28]
   3c902:	4628      	mov	r0, r5
   3c904:	f008 fc90 	bl	45228 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3c908:	69e3      	ldr	r3, [r4, #28]
   3c90a:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c90c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3c90e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3c910:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3c912:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3c914:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3c916:	bf04      	itt	eq
   3c918:	6963      	ldreq	r3, [r4, #20]
   3c91a:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3c91c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c91e:	3b01      	subs	r3, #1
   3c920:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3c922:	f001 fa5b 	bl	3dddc <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3c926:	4605      	mov	r5, r0
   3c928:	2800      	cmp	r0, #0
   3c92a:	d02f      	beq.n	3c98c <z_impl_k_msgq_get+0x104>
   3c92c:	6941      	ldr	r1, [r0, #20]
   3c92e:	68e2      	ldr	r2, [r4, #12]
   3c930:	6a20      	ldr	r0, [r4, #32]
   3c932:	f008 fc79 	bl	45228 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3c936:	6a23      	ldr	r3, [r4, #32]
   3c938:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3c93a:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3c93c:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3c93e:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3c940:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3c942:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3c944:	bf04      	itt	eq
   3c946:	6963      	ldreq	r3, [r4, #20]
   3c948:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3c94a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c94c:	3301      	adds	r3, #1
   3c94e:	6263      	str	r3, [r4, #36]	; 0x24
   3c950:	2400      	movs	r4, #0
   3c952:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   3c954:	f000 fdbe 	bl	3d4d4 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3c958:	4639      	mov	r1, r7
   3c95a:	4630      	mov	r0, r6
   3c95c:	f000 fb9a 	bl	3d094 <z_reschedule>
			return 0;
   3c960:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3c962:	4628      	mov	r0, r5
   3c964:	b003      	add	sp, #12
   3c966:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3c96a:	ea58 0309 	orrs.w	r3, r8, r9
   3c96e:	d00b      	beq.n	3c988 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   3c970:	4b19      	ldr	r3, [pc, #100]	; (3c9d8 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c972:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3c974:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c976:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3c978:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3c97a:	4630      	mov	r0, r6
   3c97c:	e9cd 8900 	strd	r8, r9, [sp]
   3c980:	f001 f96c 	bl	3dc5c <z_pend_curr>
   3c984:	4605      	mov	r5, r0
   3c986:	e7ec      	b.n	3c962 <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   3c988:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3c98c:	4630      	mov	r0, r6
   3c98e:	f001 fe67 	bl	3e660 <z_spin_unlock_valid>
   3c992:	b968      	cbnz	r0, 3c9b0 <z_impl_k_msgq_get+0x128>
   3c994:	2384      	movs	r3, #132	; 0x84
   3c996:	4a0d      	ldr	r2, [pc, #52]	; (3c9cc <z_impl_k_msgq_get+0x144>)
   3c998:	4910      	ldr	r1, [pc, #64]	; (3c9dc <z_impl_k_msgq_get+0x154>)
   3c99a:	480a      	ldr	r0, [pc, #40]	; (3c9c4 <z_impl_k_msgq_get+0x13c>)
   3c99c:	f005 f924 	bl	41be8 <printk>
   3c9a0:	4631      	mov	r1, r6
   3c9a2:	480f      	ldr	r0, [pc, #60]	; (3c9e0 <z_impl_k_msgq_get+0x158>)
   3c9a4:	f005 f920 	bl	41be8 <printk>
   3c9a8:	2184      	movs	r1, #132	; 0x84
   3c9aa:	4808      	ldr	r0, [pc, #32]	; (3c9cc <z_impl_k_msgq_get+0x144>)
   3c9ac:	f005 fb36 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3c9b0:	f387 8811 	msr	BASEPRI, r7
   3c9b4:	f3bf 8f6f 	isb	sy
	return result;
   3c9b8:	e7d3      	b.n	3c962 <z_impl_k_msgq_get+0xda>
   3c9ba:	bf00      	nop
   3c9bc:	0004ebd8 	.word	0x0004ebd8
   3c9c0:	0004ec97 	.word	0x0004ec97
   3c9c4:	0004825b 	.word	0x0004825b
   3c9c8:	00049477 	.word	0x00049477
   3c9cc:	00048d7b 	.word	0x00048d7b
   3c9d0:	00048da1 	.word	0x00048da1
   3c9d4:	00048db6 	.word	0x00048db6
   3c9d8:	20025af0 	.word	0x20025af0
   3c9dc:	00048dce 	.word	0x00048dce
   3c9e0:	00048de5 	.word	0x00048de5

0003c9e4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   3c9e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3c9e8:	4604      	mov	r4, r0
   3c9ea:	4616      	mov	r6, r2
   3c9ec:	461f      	mov	r7, r3
   3c9ee:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3c9f2:	b163      	cbz	r3, 3ca0e <z_impl_k_mutex_lock+0x2a>
   3c9f4:	496f      	ldr	r1, [pc, #444]	; (3cbb4 <z_impl_k_mutex_lock+0x1d0>)
   3c9f6:	237d      	movs	r3, #125	; 0x7d
   3c9f8:	4a6f      	ldr	r2, [pc, #444]	; (3cbb8 <z_impl_k_mutex_lock+0x1d4>)
   3c9fa:	4870      	ldr	r0, [pc, #448]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3c9fc:	f005 f8f4 	bl	41be8 <printk>
   3ca00:	486f      	ldr	r0, [pc, #444]	; (3cbc0 <z_impl_k_mutex_lock+0x1dc>)
   3ca02:	f005 f8f1 	bl	41be8 <printk>
   3ca06:	217d      	movs	r1, #125	; 0x7d
   3ca08:	486b      	ldr	r0, [pc, #428]	; (3cbb8 <z_impl_k_mutex_lock+0x1d4>)
   3ca0a:	f005 fb07 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ca0e:	f04f 0320 	mov.w	r3, #32
   3ca12:	f3ef 8511 	mrs	r5, BASEPRI
   3ca16:	f383 8811 	msr	BASEPRI, r3
   3ca1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ca1e:	4869      	ldr	r0, [pc, #420]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3ca20:	f001 fe10 	bl	3e644 <z_spin_lock_valid>
   3ca24:	b968      	cbnz	r0, 3ca42 <z_impl_k_mutex_lock+0x5e>
   3ca26:	235c      	movs	r3, #92	; 0x5c
   3ca28:	4a67      	ldr	r2, [pc, #412]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3ca2a:	4968      	ldr	r1, [pc, #416]	; (3cbcc <z_impl_k_mutex_lock+0x1e8>)
   3ca2c:	4863      	ldr	r0, [pc, #396]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3ca2e:	f005 f8db 	bl	41be8 <printk>
   3ca32:	4964      	ldr	r1, [pc, #400]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3ca34:	4866      	ldr	r0, [pc, #408]	; (3cbd0 <z_impl_k_mutex_lock+0x1ec>)
   3ca36:	f005 f8d7 	bl	41be8 <printk>
   3ca3a:	215c      	movs	r1, #92	; 0x5c
   3ca3c:	4862      	ldr	r0, [pc, #392]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3ca3e:	f005 faed 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ca42:	4860      	ldr	r0, [pc, #384]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3ca44:	f001 fe1c 	bl	3e680 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3ca48:	68e3      	ldr	r3, [r4, #12]
   3ca4a:	4a62      	ldr	r2, [pc, #392]	; (3cbd4 <z_impl_k_mutex_lock+0x1f0>)
   3ca4c:	b1fb      	cbz	r3, 3ca8e <z_impl_k_mutex_lock+0xaa>
   3ca4e:	68a0      	ldr	r0, [r4, #8]
   3ca50:	6891      	ldr	r1, [r2, #8]
   3ca52:	4288      	cmp	r0, r1
   3ca54:	d03d      	beq.n	3cad2 <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   3ca56:	ea56 0307 	orrs.w	r3, r6, r7
   3ca5a:	d13c      	bne.n	3cad6 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ca5c:	4859      	ldr	r0, [pc, #356]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3ca5e:	f001 fdff 	bl	3e660 <z_spin_unlock_valid>
   3ca62:	b968      	cbnz	r0, 3ca80 <z_impl_k_mutex_lock+0x9c>
   3ca64:	2384      	movs	r3, #132	; 0x84
   3ca66:	4a58      	ldr	r2, [pc, #352]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3ca68:	495b      	ldr	r1, [pc, #364]	; (3cbd8 <z_impl_k_mutex_lock+0x1f4>)
   3ca6a:	4854      	ldr	r0, [pc, #336]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3ca6c:	f005 f8bc 	bl	41be8 <printk>
   3ca70:	4954      	ldr	r1, [pc, #336]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3ca72:	485a      	ldr	r0, [pc, #360]	; (3cbdc <z_impl_k_mutex_lock+0x1f8>)
   3ca74:	f005 f8b8 	bl	41be8 <printk>
   3ca78:	2184      	movs	r1, #132	; 0x84
   3ca7a:	4853      	ldr	r0, [pc, #332]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3ca7c:	f005 face 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ca80:	f385 8811 	msr	BASEPRI, r5
   3ca84:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3ca88:	f06f 000f 	mvn.w	r0, #15
   3ca8c:	e01e      	b.n	3cacc <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3ca8e:	6891      	ldr	r1, [r2, #8]
   3ca90:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3ca94:	3301      	adds	r3, #1
   3ca96:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3ca98:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3ca9a:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3ca9c:	60a3      	str	r3, [r4, #8]
   3ca9e:	4849      	ldr	r0, [pc, #292]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3caa0:	f001 fdde 	bl	3e660 <z_spin_unlock_valid>
   3caa4:	b968      	cbnz	r0, 3cac2 <z_impl_k_mutex_lock+0xde>
   3caa6:	2384      	movs	r3, #132	; 0x84
   3caa8:	4a47      	ldr	r2, [pc, #284]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3caaa:	494b      	ldr	r1, [pc, #300]	; (3cbd8 <z_impl_k_mutex_lock+0x1f4>)
   3caac:	4843      	ldr	r0, [pc, #268]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3caae:	f005 f89b 	bl	41be8 <printk>
   3cab2:	4944      	ldr	r1, [pc, #272]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cab4:	4849      	ldr	r0, [pc, #292]	; (3cbdc <z_impl_k_mutex_lock+0x1f8>)
   3cab6:	f005 f897 	bl	41be8 <printk>
   3caba:	2184      	movs	r1, #132	; 0x84
   3cabc:	4842      	ldr	r0, [pc, #264]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3cabe:	f005 faad 	bl	4201c <assert_post_action>
   3cac2:	f385 8811 	msr	BASEPRI, r5
   3cac6:	f3bf 8f6f 	isb	sy
		return 0;
   3caca:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3cacc:	b002      	add	sp, #8
   3cace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   3cad2:	6921      	ldr	r1, [r4, #16]
   3cad4:	e7de      	b.n	3ca94 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3cad6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3cada:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3cade:	4299      	cmp	r1, r3
   3cae0:	bfa8      	it	ge
   3cae2:	4619      	movge	r1, r3
   3cae4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3cae8:	4299      	cmp	r1, r3
   3caea:	da43      	bge.n	3cb74 <z_impl_k_mutex_lock+0x190>
		return z_set_prio(mutex->owner, new_prio);
   3caec:	f001 f8e6 	bl	3dcbc <z_set_prio>
   3caf0:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3caf2:	e9cd 6700 	strd	r6, r7, [sp]
   3caf6:	4622      	mov	r2, r4
   3caf8:	4629      	mov	r1, r5
   3cafa:	4832      	ldr	r0, [pc, #200]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cafc:	f001 f8ae 	bl	3dc5c <z_pend_curr>
	if (got_mutex == 0) {
   3cb00:	2800      	cmp	r0, #0
   3cb02:	d0e3      	beq.n	3cacc <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   3cb04:	f04f 0320 	mov.w	r3, #32
   3cb08:	f3ef 8511 	mrs	r5, BASEPRI
   3cb0c:	f383 8811 	msr	BASEPRI, r3
   3cb10:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cb14:	482b      	ldr	r0, [pc, #172]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb16:	f001 fd95 	bl	3e644 <z_spin_lock_valid>
   3cb1a:	b968      	cbnz	r0, 3cb38 <z_impl_k_mutex_lock+0x154>
   3cb1c:	235c      	movs	r3, #92	; 0x5c
   3cb1e:	4a2a      	ldr	r2, [pc, #168]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3cb20:	492a      	ldr	r1, [pc, #168]	; (3cbcc <z_impl_k_mutex_lock+0x1e8>)
   3cb22:	4826      	ldr	r0, [pc, #152]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3cb24:	f005 f860 	bl	41be8 <printk>
   3cb28:	4926      	ldr	r1, [pc, #152]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb2a:	4829      	ldr	r0, [pc, #164]	; (3cbd0 <z_impl_k_mutex_lock+0x1ec>)
   3cb2c:	f005 f85c 	bl	41be8 <printk>
   3cb30:	215c      	movs	r1, #92	; 0x5c
   3cb32:	4825      	ldr	r0, [pc, #148]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3cb34:	f005 fa72 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3cb38:	4822      	ldr	r0, [pc, #136]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb3a:	f001 fda1 	bl	3e680 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   3cb3e:	6823      	ldr	r3, [r4, #0]
   3cb40:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3cb42:	42a3      	cmp	r3, r4
   3cb44:	d007      	beq.n	3cb56 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3cb46:	b133      	cbz	r3, 3cb56 <z_impl_k_mutex_lock+0x172>
   3cb48:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3cb4c:	4299      	cmp	r1, r3
   3cb4e:	bfa8      	it	ge
   3cb50:	4619      	movge	r1, r3
   3cb52:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3cb56:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3cb58:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3cb5c:	4299      	cmp	r1, r3
   3cb5e:	d10c      	bne.n	3cb7a <z_impl_k_mutex_lock+0x196>
	if (resched) {
   3cb60:	f1b8 0f00 	cmp.w	r8, #0
   3cb64:	d00e      	beq.n	3cb84 <z_impl_k_mutex_lock+0x1a0>
		z_reschedule(&lock, key);
   3cb66:	4629      	mov	r1, r5
   3cb68:	4816      	ldr	r0, [pc, #88]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb6a:	f000 fa93 	bl	3d094 <z_reschedule>
	return -EAGAIN;
   3cb6e:	f06f 000a 	mvn.w	r0, #10
   3cb72:	e7ab      	b.n	3cacc <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   3cb74:	f04f 0800 	mov.w	r8, #0
   3cb78:	e7bb      	b.n	3caf2 <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   3cb7a:	f001 f89f 	bl	3dcbc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3cb7e:	2800      	cmp	r0, #0
   3cb80:	d1f1      	bne.n	3cb66 <z_impl_k_mutex_lock+0x182>
   3cb82:	e7ed      	b.n	3cb60 <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cb84:	480f      	ldr	r0, [pc, #60]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb86:	f001 fd6b 	bl	3e660 <z_spin_unlock_valid>
   3cb8a:	b968      	cbnz	r0, 3cba8 <z_impl_k_mutex_lock+0x1c4>
   3cb8c:	2384      	movs	r3, #132	; 0x84
   3cb8e:	4a0e      	ldr	r2, [pc, #56]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3cb90:	4911      	ldr	r1, [pc, #68]	; (3cbd8 <z_impl_k_mutex_lock+0x1f4>)
   3cb92:	480a      	ldr	r0, [pc, #40]	; (3cbbc <z_impl_k_mutex_lock+0x1d8>)
   3cb94:	f005 f828 	bl	41be8 <printk>
   3cb98:	490a      	ldr	r1, [pc, #40]	; (3cbc4 <z_impl_k_mutex_lock+0x1e0>)
   3cb9a:	4810      	ldr	r0, [pc, #64]	; (3cbdc <z_impl_k_mutex_lock+0x1f8>)
   3cb9c:	f005 f824 	bl	41be8 <printk>
   3cba0:	2184      	movs	r1, #132	; 0x84
   3cba2:	4809      	ldr	r0, [pc, #36]	; (3cbc8 <z_impl_k_mutex_lock+0x1e4>)
   3cba4:	f005 fa3a 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3cba8:	f385 8811 	msr	BASEPRI, r5
   3cbac:	f3bf 8f6f 	isb	sy
   3cbb0:	e7dd      	b.n	3cb6e <z_impl_k_mutex_lock+0x18a>
   3cbb2:	bf00      	nop
   3cbb4:	0004ecdb 	.word	0x0004ecdb
   3cbb8:	0004ecb9 	.word	0x0004ecb9
   3cbbc:	0004825b 	.word	0x0004825b
   3cbc0:	0004eced 	.word	0x0004eced
   3cbc4:	20025aec 	.word	0x20025aec
   3cbc8:	00048d7b 	.word	0x00048d7b
   3cbcc:	00048da1 	.word	0x00048da1
   3cbd0:	00048db6 	.word	0x00048db6
   3cbd4:	20025af0 	.word	0x20025af0
   3cbd8:	00048dce 	.word	0x00048dce
   3cbdc:	00048de5 	.word	0x00048de5

0003cbe0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   3cbe0:	b538      	push	{r3, r4, r5, lr}
   3cbe2:	4604      	mov	r4, r0
   3cbe4:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3cbe8:	b163      	cbz	r3, 3cc04 <z_impl_k_mutex_unlock+0x24>
   3cbea:	4954      	ldr	r1, [pc, #336]	; (3cd3c <z_impl_k_mutex_unlock+0x15c>)
   3cbec:	23d8      	movs	r3, #216	; 0xd8
   3cbee:	4a54      	ldr	r2, [pc, #336]	; (3cd40 <z_impl_k_mutex_unlock+0x160>)
   3cbf0:	4854      	ldr	r0, [pc, #336]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3cbf2:	f004 fff9 	bl	41be8 <printk>
   3cbf6:	4854      	ldr	r0, [pc, #336]	; (3cd48 <z_impl_k_mutex_unlock+0x168>)
   3cbf8:	f004 fff6 	bl	41be8 <printk>
   3cbfc:	21d8      	movs	r1, #216	; 0xd8
   3cbfe:	4850      	ldr	r0, [pc, #320]	; (3cd40 <z_impl_k_mutex_unlock+0x160>)
   3cc00:	f005 fa0c 	bl	4201c <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   3cc04:	68a3      	ldr	r3, [r4, #8]
   3cc06:	2b00      	cmp	r3, #0
   3cc08:	f000 8091 	beq.w	3cd2e <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   3cc0c:	4d4f      	ldr	r5, [pc, #316]	; (3cd4c <z_impl_k_mutex_unlock+0x16c>)
   3cc0e:	68aa      	ldr	r2, [r5, #8]
   3cc10:	4293      	cmp	r3, r2
   3cc12:	f040 808f 	bne.w	3cd34 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3cc16:	68e3      	ldr	r3, [r4, #12]
   3cc18:	b94b      	cbnz	r3, 3cc2e <z_impl_k_mutex_unlock+0x4e>
   3cc1a:	494d      	ldr	r1, [pc, #308]	; (3cd50 <z_impl_k_mutex_unlock+0x170>)
   3cc1c:	4849      	ldr	r0, [pc, #292]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3cc1e:	23ea      	movs	r3, #234	; 0xea
   3cc20:	4a47      	ldr	r2, [pc, #284]	; (3cd40 <z_impl_k_mutex_unlock+0x160>)
   3cc22:	f004 ffe1 	bl	41be8 <printk>
   3cc26:	21ea      	movs	r1, #234	; 0xea
   3cc28:	4845      	ldr	r0, [pc, #276]	; (3cd40 <z_impl_k_mutex_unlock+0x160>)
   3cc2a:	f005 f9f7 	bl	4201c <assert_post_action>
   3cc2e:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3cc32:	b173      	cbz	r3, 3cc52 <z_impl_k_mutex_unlock+0x72>
   3cc34:	4941      	ldr	r1, [pc, #260]	; (3cd3c <z_impl_k_mutex_unlock+0x15c>)
   3cc36:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3cc3a:	4a46      	ldr	r2, [pc, #280]	; (3cd54 <z_impl_k_mutex_unlock+0x174>)
   3cc3c:	4841      	ldr	r0, [pc, #260]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3cc3e:	f004 ffd3 	bl	41be8 <printk>
   3cc42:	4845      	ldr	r0, [pc, #276]	; (3cd58 <z_impl_k_mutex_unlock+0x178>)
   3cc44:	f004 ffd0 	bl	41be8 <printk>
   3cc48:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3cc4c:	4841      	ldr	r0, [pc, #260]	; (3cd54 <z_impl_k_mutex_unlock+0x174>)
   3cc4e:	f005 f9e5 	bl	4201c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3cc52:	68ab      	ldr	r3, [r5, #8]
   3cc54:	7bdb      	ldrb	r3, [r3, #15]
   3cc56:	2b01      	cmp	r3, #1
   3cc58:	d10e      	bne.n	3cc78 <z_impl_k_mutex_unlock+0x98>
   3cc5a:	4940      	ldr	r1, [pc, #256]	; (3cd5c <z_impl_k_mutex_unlock+0x17c>)
   3cc5c:	f240 130d 	movw	r3, #269	; 0x10d
   3cc60:	4a3c      	ldr	r2, [pc, #240]	; (3cd54 <z_impl_k_mutex_unlock+0x174>)
   3cc62:	4838      	ldr	r0, [pc, #224]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3cc64:	f004 ffc0 	bl	41be8 <printk>
   3cc68:	483b      	ldr	r0, [pc, #236]	; (3cd58 <z_impl_k_mutex_unlock+0x178>)
   3cc6a:	f004 ffbd 	bl	41be8 <printk>
   3cc6e:	f240 110d 	movw	r1, #269	; 0x10d
   3cc72:	4838      	ldr	r0, [pc, #224]	; (3cd54 <z_impl_k_mutex_unlock+0x174>)
   3cc74:	f005 f9d2 	bl	4201c <assert_post_action>

	--_current->base.sched_locked;
   3cc78:	68aa      	ldr	r2, [r5, #8]
   3cc7a:	7bd3      	ldrb	r3, [r2, #15]
   3cc7c:	3b01      	subs	r3, #1
   3cc7e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   3cc80:	68e3      	ldr	r3, [r4, #12]
   3cc82:	2b01      	cmp	r3, #1
   3cc84:	d005      	beq.n	3cc92 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   3cc86:	3b01      	subs	r3, #1
   3cc88:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3cc8a:	f000 fb5d 	bl	3d348 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   3cc8e:	2000      	movs	r0, #0
}
   3cc90:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   3cc92:	f04f 0320 	mov.w	r3, #32
   3cc96:	f3ef 8511 	mrs	r5, BASEPRI
   3cc9a:	f383 8811 	msr	BASEPRI, r3
   3cc9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cca2:	482f      	ldr	r0, [pc, #188]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3cca4:	f001 fcce 	bl	3e644 <z_spin_lock_valid>
   3cca8:	b968      	cbnz	r0, 3ccc6 <z_impl_k_mutex_unlock+0xe6>
   3ccaa:	235c      	movs	r3, #92	; 0x5c
   3ccac:	4a2d      	ldr	r2, [pc, #180]	; (3cd64 <z_impl_k_mutex_unlock+0x184>)
   3ccae:	492e      	ldr	r1, [pc, #184]	; (3cd68 <z_impl_k_mutex_unlock+0x188>)
   3ccb0:	4824      	ldr	r0, [pc, #144]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3ccb2:	f004 ff99 	bl	41be8 <printk>
   3ccb6:	492a      	ldr	r1, [pc, #168]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3ccb8:	482c      	ldr	r0, [pc, #176]	; (3cd6c <z_impl_k_mutex_unlock+0x18c>)
   3ccba:	f004 ff95 	bl	41be8 <printk>
   3ccbe:	215c      	movs	r1, #92	; 0x5c
   3ccc0:	4828      	ldr	r0, [pc, #160]	; (3cd64 <z_impl_k_mutex_unlock+0x184>)
   3ccc2:	f005 f9ab 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ccc6:	4826      	ldr	r0, [pc, #152]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3ccc8:	f001 fcda 	bl	3e680 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3cccc:	68a0      	ldr	r0, [r4, #8]
   3ccce:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3ccd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3ccd4:	4299      	cmp	r1, r3
   3ccd6:	d001      	beq.n	3ccdc <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   3ccd8:	f000 fff0 	bl	3dcbc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3ccdc:	4620      	mov	r0, r4
   3ccde:	f001 f87d 	bl	3dddc <z_unpend_first_thread>
	mutex->owner = new_owner;
   3cce2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3cce4:	b158      	cbz	r0, 3ccfe <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   3cce6:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3ccea:	6122      	str	r2, [r4, #16]
   3ccec:	2200      	movs	r2, #0
   3ccee:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   3ccf0:	f000 fbf0 	bl	3d4d4 <z_ready_thread>
		z_reschedule(&lock, key);
   3ccf4:	4629      	mov	r1, r5
   3ccf6:	481a      	ldr	r0, [pc, #104]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3ccf8:	f000 f9cc 	bl	3d094 <z_reschedule>
   3ccfc:	e7c5      	b.n	3cc8a <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   3ccfe:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cd00:	4817      	ldr	r0, [pc, #92]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3cd02:	f001 fcad 	bl	3e660 <z_spin_unlock_valid>
   3cd06:	b968      	cbnz	r0, 3cd24 <z_impl_k_mutex_unlock+0x144>
   3cd08:	2384      	movs	r3, #132	; 0x84
   3cd0a:	4a16      	ldr	r2, [pc, #88]	; (3cd64 <z_impl_k_mutex_unlock+0x184>)
   3cd0c:	4918      	ldr	r1, [pc, #96]	; (3cd70 <z_impl_k_mutex_unlock+0x190>)
   3cd0e:	480d      	ldr	r0, [pc, #52]	; (3cd44 <z_impl_k_mutex_unlock+0x164>)
   3cd10:	f004 ff6a 	bl	41be8 <printk>
   3cd14:	4912      	ldr	r1, [pc, #72]	; (3cd60 <z_impl_k_mutex_unlock+0x180>)
   3cd16:	4817      	ldr	r0, [pc, #92]	; (3cd74 <z_impl_k_mutex_unlock+0x194>)
   3cd18:	f004 ff66 	bl	41be8 <printk>
   3cd1c:	2184      	movs	r1, #132	; 0x84
   3cd1e:	4811      	ldr	r0, [pc, #68]	; (3cd64 <z_impl_k_mutex_unlock+0x184>)
   3cd20:	f005 f97c 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3cd24:	f385 8811 	msr	BASEPRI, r5
   3cd28:	f3bf 8f6f 	isb	sy
   3cd2c:	e7ad      	b.n	3cc8a <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   3cd2e:	f06f 0015 	mvn.w	r0, #21
   3cd32:	e7ad      	b.n	3cc90 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   3cd34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cd38:	e7aa      	b.n	3cc90 <z_impl_k_mutex_unlock+0xb0>
   3cd3a:	bf00      	nop
   3cd3c:	0004ecdb 	.word	0x0004ecdb
   3cd40:	0004ecb9 	.word	0x0004ecb9
   3cd44:	0004825b 	.word	0x0004825b
   3cd48:	0004eced 	.word	0x0004eced
   3cd4c:	20025af0 	.word	0x20025af0
   3cd50:	0004ed12 	.word	0x0004ed12
   3cd54:	0004ed29 	.word	0x0004ed29
   3cd58:	00049477 	.word	0x00049477
   3cd5c:	0004ed54 	.word	0x0004ed54
   3cd60:	20025aec 	.word	0x20025aec
   3cd64:	00048d7b 	.word	0x00048d7b
   3cd68:	00048da1 	.word	0x00048da1
   3cd6c:	00048db6 	.word	0x00048db6
   3cd70:	00048dce 	.word	0x00048dce
   3cd74:	00048de5 	.word	0x00048de5

0003cd78 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3cd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3cd7c:	4604      	mov	r4, r0
   3cd7e:	460e      	mov	r6, r1
   3cd80:	4690      	mov	r8, r2
   3cd82:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3cd84:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3cd88:	f04f 0320 	mov.w	r3, #32
   3cd8c:	f3ef 8711 	mrs	r7, BASEPRI
   3cd90:	f383 8811 	msr	BASEPRI, r3
   3cd94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cd98:	4628      	mov	r0, r5
   3cd9a:	f001 fc53 	bl	3e644 <z_spin_lock_valid>
   3cd9e:	b968      	cbnz	r0, 3cdbc <queue_insert+0x44>
   3cda0:	235c      	movs	r3, #92	; 0x5c
   3cda2:	4a39      	ldr	r2, [pc, #228]	; (3ce88 <queue_insert+0x110>)
   3cda4:	4939      	ldr	r1, [pc, #228]	; (3ce8c <queue_insert+0x114>)
   3cda6:	483a      	ldr	r0, [pc, #232]	; (3ce90 <queue_insert+0x118>)
   3cda8:	f004 ff1e 	bl	41be8 <printk>
   3cdac:	4629      	mov	r1, r5
   3cdae:	4839      	ldr	r0, [pc, #228]	; (3ce94 <queue_insert+0x11c>)
   3cdb0:	f004 ff1a 	bl	41be8 <printk>
   3cdb4:	215c      	movs	r1, #92	; 0x5c
   3cdb6:	4834      	ldr	r0, [pc, #208]	; (3ce88 <queue_insert+0x110>)
   3cdb8:	f005 f930 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3cdbc:	4628      	mov	r0, r5
   3cdbe:	f001 fc5f 	bl	3e680 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3cdc2:	f104 000c 	add.w	r0, r4, #12
   3cdc6:	f001 f809 	bl	3dddc <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   3cdca:	b158      	cbz	r0, 3cde4 <queue_insert+0x6c>
   3cdcc:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3cdce:	f8c0 8014 	str.w	r8, [r0, #20]
   3cdd2:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   3cdd4:	f000 fb7e 	bl	3d4d4 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   3cdd8:	4628      	mov	r0, r5
   3cdda:	4639      	mov	r1, r7
   3cddc:	f000 f95a 	bl	3d094 <z_reschedule>
	return 0;
   3cde0:	2000      	movs	r0, #0
   3cde2:	e01e      	b.n	3ce22 <queue_insert+0xaa>
	if (alloc) {
   3cde4:	f1b9 0f00 	cmp.w	r9, #0
   3cde8:	d02d      	beq.n	3ce46 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   3cdea:	2008      	movs	r0, #8
   3cdec:	f002 fc48 	bl	3f680 <z_thread_malloc>
		if (anode == NULL) {
   3cdf0:	b9c8      	cbnz	r0, 3ce26 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cdf2:	4628      	mov	r0, r5
   3cdf4:	f001 fc34 	bl	3e660 <z_spin_unlock_valid>
   3cdf8:	b968      	cbnz	r0, 3ce16 <queue_insert+0x9e>
   3cdfa:	2384      	movs	r3, #132	; 0x84
   3cdfc:	4a22      	ldr	r2, [pc, #136]	; (3ce88 <queue_insert+0x110>)
   3cdfe:	4926      	ldr	r1, [pc, #152]	; (3ce98 <queue_insert+0x120>)
   3ce00:	4823      	ldr	r0, [pc, #140]	; (3ce90 <queue_insert+0x118>)
   3ce02:	f004 fef1 	bl	41be8 <printk>
   3ce06:	4629      	mov	r1, r5
   3ce08:	4824      	ldr	r0, [pc, #144]	; (3ce9c <queue_insert+0x124>)
   3ce0a:	f004 feed 	bl	41be8 <printk>
   3ce0e:	2184      	movs	r1, #132	; 0x84
   3ce10:	481d      	ldr	r0, [pc, #116]	; (3ce88 <queue_insert+0x110>)
   3ce12:	f005 f903 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ce16:	f387 8811 	msr	BASEPRI, r7
   3ce1a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3ce1e:	f06f 000b 	mvn.w	r0, #11
}
   3ce22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3ce26:	2301      	movs	r3, #1
		anode->data = data;
   3ce28:	f8c0 8004 	str.w	r8, [r0, #4]
   3ce2c:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3ce2e:	6803      	ldr	r3, [r0, #0]
   3ce30:	f003 0303 	and.w	r3, r3, #3
   3ce34:	b95e      	cbnz	r6, 3ce4e <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ce36:	6822      	ldr	r2, [r4, #0]
   3ce38:	4313      	orrs	r3, r2
   3ce3a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3ce3c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3ce3e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3ce40:	b973      	cbnz	r3, 3ce60 <queue_insert+0xe8>
	list->tail = node;
   3ce42:	6060      	str	r0, [r4, #4]
   3ce44:	e00c      	b.n	3ce60 <queue_insert+0xe8>
	node->next_and_flags = flags;
   3ce46:	f8c8 9000 	str.w	r9, [r8]
   3ce4a:	4640      	mov	r0, r8
   3ce4c:	e7ef      	b.n	3ce2e <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3ce4e:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3ce50:	f032 0203 	bics.w	r2, r2, #3
   3ce54:	d110      	bne.n	3ce78 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   3ce56:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ce58:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3ce5a:	b93a      	cbnz	r2, 3ce6c <queue_insert+0xf4>
	list->head = node;
   3ce5c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3ce60:	2104      	movs	r1, #4
   3ce62:	f104 0014 	add.w	r0, r4, #20
   3ce66:	f008 f97e 	bl	45166 <z_handle_obj_poll_events>
   3ce6a:	e7b5      	b.n	3cdd8 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3ce6c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ce6e:	f003 0303 	and.w	r3, r3, #3
   3ce72:	4303      	orrs	r3, r0
   3ce74:	6013      	str	r3, [r2, #0]
   3ce76:	e7e4      	b.n	3ce42 <queue_insert+0xca>
   3ce78:	4313      	orrs	r3, r2
   3ce7a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3ce7c:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3ce7e:	f003 0303 	and.w	r3, r3, #3
   3ce82:	4318      	orrs	r0, r3
   3ce84:	6030      	str	r0, [r6, #0]
   3ce86:	e7eb      	b.n	3ce60 <queue_insert+0xe8>
   3ce88:	00048d7b 	.word	0x00048d7b
   3ce8c:	00048da1 	.word	0x00048da1
   3ce90:	0004825b 	.word	0x0004825b
   3ce94:	00048db6 	.word	0x00048db6
   3ce98:	00048dce 	.word	0x00048dce
   3ce9c:	00048de5 	.word	0x00048de5

0003cea0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   3cea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3cea4:	4606      	mov	r6, r0
   3cea6:	4690      	mov	r8, r2
   3cea8:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3ceaa:	f100 0408 	add.w	r4, r0, #8
	__asm__ volatile(
   3ceae:	f04f 0320 	mov.w	r3, #32
   3ceb2:	f3ef 8711 	mrs	r7, BASEPRI
   3ceb6:	f383 8811 	msr	BASEPRI, r3
   3ceba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cebe:	4620      	mov	r0, r4
   3cec0:	f001 fbc0 	bl	3e644 <z_spin_lock_valid>
   3cec4:	b968      	cbnz	r0, 3cee2 <z_impl_k_queue_get+0x42>
   3cec6:	235c      	movs	r3, #92	; 0x5c
   3cec8:	4a24      	ldr	r2, [pc, #144]	; (3cf5c <z_impl_k_queue_get+0xbc>)
   3ceca:	4925      	ldr	r1, [pc, #148]	; (3cf60 <z_impl_k_queue_get+0xc0>)
   3cecc:	4825      	ldr	r0, [pc, #148]	; (3cf64 <z_impl_k_queue_get+0xc4>)
   3cece:	f004 fe8b 	bl	41be8 <printk>
   3ced2:	4621      	mov	r1, r4
   3ced4:	4824      	ldr	r0, [pc, #144]	; (3cf68 <z_impl_k_queue_get+0xc8>)
   3ced6:	f004 fe87 	bl	41be8 <printk>
   3ceda:	215c      	movs	r1, #92	; 0x5c
   3cedc:	481f      	ldr	r0, [pc, #124]	; (3cf5c <z_impl_k_queue_get+0xbc>)
   3cede:	f005 f89d 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3cee2:	4620      	mov	r0, r4
   3cee4:	f001 fbcc 	bl	3e680 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3cee8:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3ceea:	b335      	cbz	r5, 3cf3a <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3ceec:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3ceee:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3cef0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3cef4:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3cef6:	4628      	mov	r0, r5
	list->head = node;
   3cef8:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3cefa:	bf08      	it	eq
   3cefc:	6073      	streq	r3, [r6, #4]
   3cefe:	2101      	movs	r1, #1
   3cf00:	f007 ffd6 	bl	44eb0 <z_queue_node_peek>
   3cf04:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3cf06:	4620      	mov	r0, r4
   3cf08:	f001 fbaa 	bl	3e660 <z_spin_unlock_valid>
   3cf0c:	b968      	cbnz	r0, 3cf2a <z_impl_k_queue_get+0x8a>
   3cf0e:	2384      	movs	r3, #132	; 0x84
   3cf10:	4a12      	ldr	r2, [pc, #72]	; (3cf5c <z_impl_k_queue_get+0xbc>)
   3cf12:	4916      	ldr	r1, [pc, #88]	; (3cf6c <z_impl_k_queue_get+0xcc>)
   3cf14:	4813      	ldr	r0, [pc, #76]	; (3cf64 <z_impl_k_queue_get+0xc4>)
   3cf16:	f004 fe67 	bl	41be8 <printk>
   3cf1a:	4621      	mov	r1, r4
   3cf1c:	4814      	ldr	r0, [pc, #80]	; (3cf70 <z_impl_k_queue_get+0xd0>)
   3cf1e:	f004 fe63 	bl	41be8 <printk>
   3cf22:	2184      	movs	r1, #132	; 0x84
   3cf24:	480d      	ldr	r0, [pc, #52]	; (3cf5c <z_impl_k_queue_get+0xbc>)
   3cf26:	f005 f879 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3cf2a:	f387 8811 	msr	BASEPRI, r7
   3cf2e:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   3cf32:	4628      	mov	r0, r5
   3cf34:	b003      	add	sp, #12
   3cf36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3cf3a:	ea58 0309 	orrs.w	r3, r8, r9
   3cf3e:	d0e2      	beq.n	3cf06 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   3cf40:	e9cd 8900 	strd	r8, r9, [sp]
   3cf44:	f106 020c 	add.w	r2, r6, #12
   3cf48:	4639      	mov	r1, r7
   3cf4a:	4620      	mov	r0, r4
   3cf4c:	f000 fe86 	bl	3dc5c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   3cf50:	2800      	cmp	r0, #0
   3cf52:	d1ee      	bne.n	3cf32 <z_impl_k_queue_get+0x92>
   3cf54:	4b07      	ldr	r3, [pc, #28]	; (3cf74 <z_impl_k_queue_get+0xd4>)
   3cf56:	689b      	ldr	r3, [r3, #8]
   3cf58:	695d      	ldr	r5, [r3, #20]
   3cf5a:	e7ea      	b.n	3cf32 <z_impl_k_queue_get+0x92>
   3cf5c:	00048d7b 	.word	0x00048d7b
   3cf60:	00048da1 	.word	0x00048da1
   3cf64:	0004825b 	.word	0x0004825b
   3cf68:	00048db6 	.word	0x00048db6
   3cf6c:	00048dce 	.word	0x00048dce
   3cf70:	00048de5 	.word	0x00048de5
   3cf74:	20025af0 	.word	0x20025af0

0003cf78 <pended_on.isra.18>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   3cf78:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3cf7a:	b510      	push	{r4, lr}
   3cf7c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3cf7e:	b95b      	cbnz	r3, 3cf98 <pended_on.isra.18+0x20>
   3cf80:	4906      	ldr	r1, [pc, #24]	; (3cf9c <pended_on.isra.18+0x24>)
   3cf82:	4807      	ldr	r0, [pc, #28]	; (3cfa0 <pended_on.isra.18+0x28>)
   3cf84:	f240 13ed 	movw	r3, #493	; 0x1ed
   3cf88:	4a06      	ldr	r2, [pc, #24]	; (3cfa4 <pended_on.isra.18+0x2c>)
   3cf8a:	f004 fe2d 	bl	41be8 <printk>
   3cf8e:	f240 11ed 	movw	r1, #493	; 0x1ed
   3cf92:	4804      	ldr	r0, [pc, #16]	; (3cfa4 <pended_on.isra.18+0x2c>)
   3cf94:	f005 f842 	bl	4201c <assert_post_action>

	return thread->base.pended_on;
}
   3cf98:	6820      	ldr	r0, [r4, #0]
   3cf9a:	bd10      	pop	{r4, pc}
   3cf9c:	0004edd6 	.word	0x0004edd6
   3cfa0:	0004825b 	.word	0x0004825b
   3cfa4:	0004edb4 	.word	0x0004edb4

0003cfa8 <z_reset_time_slice>:
{
   3cfa8:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3cfaa:	4c08      	ldr	r4, [pc, #32]	; (3cfcc <z_reset_time_slice+0x24>)
   3cfac:	6823      	ldr	r3, [r4, #0]
   3cfae:	b15b      	cbz	r3, 3cfc8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3cfb0:	f7e9 fca6 	bl	26900 <z_clock_elapsed>
   3cfb4:	6823      	ldr	r3, [r4, #0]
   3cfb6:	4a06      	ldr	r2, [pc, #24]	; (3cfd0 <z_reset_time_slice+0x28>)
   3cfb8:	4418      	add	r0, r3
   3cfba:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3cfbc:	2100      	movs	r1, #0
}
   3cfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3cfc2:	4618      	mov	r0, r3
   3cfc4:	f001 be8e 	b.w	3ece4 <z_set_timeout_expiry>
}
   3cfc8:	bd10      	pop	{r4, pc}
   3cfca:	bf00      	nop
   3cfcc:	20025b30 	.word	0x20025b30
   3cfd0:	20025af0 	.word	0x20025af0

0003cfd4 <k_sched_time_slice_set>:
{
   3cfd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cfd6:	4607      	mov	r7, r0
   3cfd8:	460d      	mov	r5, r1
	__asm__ volatile(
   3cfda:	f04f 0320 	mov.w	r3, #32
   3cfde:	f3ef 8411 	mrs	r4, BASEPRI
   3cfe2:	f383 8811 	msr	BASEPRI, r3
   3cfe6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3cfea:	4820      	ldr	r0, [pc, #128]	; (3d06c <k_sched_time_slice_set+0x98>)
   3cfec:	f001 fb2a 	bl	3e644 <z_spin_lock_valid>
   3cff0:	b968      	cbnz	r0, 3d00e <k_sched_time_slice_set+0x3a>
   3cff2:	235c      	movs	r3, #92	; 0x5c
   3cff4:	4a1e      	ldr	r2, [pc, #120]	; (3d070 <k_sched_time_slice_set+0x9c>)
   3cff6:	491f      	ldr	r1, [pc, #124]	; (3d074 <k_sched_time_slice_set+0xa0>)
   3cff8:	481f      	ldr	r0, [pc, #124]	; (3d078 <k_sched_time_slice_set+0xa4>)
   3cffa:	f004 fdf5 	bl	41be8 <printk>
   3cffe:	491b      	ldr	r1, [pc, #108]	; (3d06c <k_sched_time_slice_set+0x98>)
   3d000:	481e      	ldr	r0, [pc, #120]	; (3d07c <k_sched_time_slice_set+0xa8>)
   3d002:	f004 fdf1 	bl	41be8 <printk>
   3d006:	215c      	movs	r1, #92	; 0x5c
   3d008:	4819      	ldr	r0, [pc, #100]	; (3d070 <k_sched_time_slice_set+0x9c>)
   3d00a:	f005 f807 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d00e:	4817      	ldr	r0, [pc, #92]	; (3d06c <k_sched_time_slice_set+0x98>)
   3d010:	f001 fb36 	bl	3e680 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   3d014:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3d018:	2200      	movs	r2, #0
   3d01a:	f240 30e7 	movw	r0, #999	; 0x3e7
   3d01e:	2100      	movs	r1, #0
   3d020:	4b17      	ldr	r3, [pc, #92]	; (3d080 <k_sched_time_slice_set+0xac>)
   3d022:	fbe6 0107 	umlal	r0, r1, r6, r7
   3d026:	611a      	str	r2, [r3, #16]
   3d028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3d02c:	2300      	movs	r3, #0
   3d02e:	f7df ff45 	bl	1cebc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3d032:	4b14      	ldr	r3, [pc, #80]	; (3d084 <k_sched_time_slice_set+0xb0>)
   3d034:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3d036:	4b14      	ldr	r3, [pc, #80]	; (3d088 <k_sched_time_slice_set+0xb4>)
   3d038:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   3d03a:	f7ff ffb5 	bl	3cfa8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d03e:	480b      	ldr	r0, [pc, #44]	; (3d06c <k_sched_time_slice_set+0x98>)
   3d040:	f001 fb0e 	bl	3e660 <z_spin_unlock_valid>
   3d044:	b968      	cbnz	r0, 3d062 <k_sched_time_slice_set+0x8e>
   3d046:	2384      	movs	r3, #132	; 0x84
   3d048:	4a09      	ldr	r2, [pc, #36]	; (3d070 <k_sched_time_slice_set+0x9c>)
   3d04a:	4910      	ldr	r1, [pc, #64]	; (3d08c <k_sched_time_slice_set+0xb8>)
   3d04c:	480a      	ldr	r0, [pc, #40]	; (3d078 <k_sched_time_slice_set+0xa4>)
   3d04e:	f004 fdcb 	bl	41be8 <printk>
   3d052:	4906      	ldr	r1, [pc, #24]	; (3d06c <k_sched_time_slice_set+0x98>)
   3d054:	480e      	ldr	r0, [pc, #56]	; (3d090 <k_sched_time_slice_set+0xbc>)
   3d056:	f004 fdc7 	bl	41be8 <printk>
   3d05a:	2184      	movs	r1, #132	; 0x84
   3d05c:	4804      	ldr	r0, [pc, #16]	; (3d070 <k_sched_time_slice_set+0x9c>)
   3d05e:	f004 ffdd 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d062:	f384 8811 	msr	BASEPRI, r4
   3d066:	f3bf 8f6f 	isb	sy
}
   3d06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3d06c:	20025b28 	.word	0x20025b28
   3d070:	00048d7b 	.word	0x00048d7b
   3d074:	00048da1 	.word	0x00048da1
   3d078:	0004825b 	.word	0x0004825b
   3d07c:	00048db6 	.word	0x00048db6
   3d080:	20025af0 	.word	0x20025af0
   3d084:	20025b30 	.word	0x20025b30
   3d088:	20025b2c 	.word	0x20025b2c
   3d08c:	00048dce 	.word	0x00048dce
   3d090:	00048de5 	.word	0x00048de5

0003d094 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3d094:	b538      	push	{r3, r4, r5, lr}
   3d096:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3d098:	460d      	mov	r5, r1
   3d09a:	b9e9      	cbnz	r1, 3d0d8 <z_reschedule+0x44>
   3d09c:	f3ef 8305 	mrs	r3, IPSR
   3d0a0:	b9d3      	cbnz	r3, 3d0d8 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   3d0a2:	4b19      	ldr	r3, [pc, #100]	; (3d108 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   3d0a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3d0a6:	689b      	ldr	r3, [r3, #8]
   3d0a8:	429a      	cmp	r2, r3
   3d0aa:	d015      	beq.n	3d0d8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d0ac:	f001 fad8 	bl	3e660 <z_spin_unlock_valid>
   3d0b0:	b968      	cbnz	r0, 3d0ce <z_reschedule+0x3a>
   3d0b2:	239b      	movs	r3, #155	; 0x9b
   3d0b4:	4a15      	ldr	r2, [pc, #84]	; (3d10c <z_reschedule+0x78>)
   3d0b6:	4916      	ldr	r1, [pc, #88]	; (3d110 <z_reschedule+0x7c>)
   3d0b8:	4816      	ldr	r0, [pc, #88]	; (3d114 <z_reschedule+0x80>)
   3d0ba:	f004 fd95 	bl	41be8 <printk>
   3d0be:	4621      	mov	r1, r4
   3d0c0:	4815      	ldr	r0, [pc, #84]	; (3d118 <z_reschedule+0x84>)
   3d0c2:	f004 fd91 	bl	41be8 <printk>
   3d0c6:	219b      	movs	r1, #155	; 0x9b
   3d0c8:	4810      	ldr	r0, [pc, #64]	; (3d10c <z_reschedule+0x78>)
   3d0ca:	f004 ffa7 	bl	4201c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3d0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   3d0d2:	2000      	movs	r0, #0
   3d0d4:	f7e9 bd02 	b.w	26adc <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d0d8:	4620      	mov	r0, r4
   3d0da:	f001 fac1 	bl	3e660 <z_spin_unlock_valid>
   3d0de:	b968      	cbnz	r0, 3d0fc <z_reschedule+0x68>
   3d0e0:	2384      	movs	r3, #132	; 0x84
   3d0e2:	4a0a      	ldr	r2, [pc, #40]	; (3d10c <z_reschedule+0x78>)
   3d0e4:	490a      	ldr	r1, [pc, #40]	; (3d110 <z_reschedule+0x7c>)
   3d0e6:	480b      	ldr	r0, [pc, #44]	; (3d114 <z_reschedule+0x80>)
   3d0e8:	f004 fd7e 	bl	41be8 <printk>
   3d0ec:	4621      	mov	r1, r4
   3d0ee:	480a      	ldr	r0, [pc, #40]	; (3d118 <z_reschedule+0x84>)
   3d0f0:	f004 fd7a 	bl	41be8 <printk>
   3d0f4:	2184      	movs	r1, #132	; 0x84
   3d0f6:	4805      	ldr	r0, [pc, #20]	; (3d10c <z_reschedule+0x78>)
   3d0f8:	f004 ff90 	bl	4201c <assert_post_action>
   3d0fc:	f385 8811 	msr	BASEPRI, r5
   3d100:	f3bf 8f6f 	isb	sy
   3d104:	bd38      	pop	{r3, r4, r5, pc}
   3d106:	bf00      	nop
   3d108:	20025af0 	.word	0x20025af0
   3d10c:	00048d7b 	.word	0x00048d7b
   3d110:	00048dce 	.word	0x00048dce
   3d114:	0004825b 	.word	0x0004825b
   3d118:	00048de5 	.word	0x00048de5

0003d11c <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3d11c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3d11e:	f04f 0320 	mov.w	r3, #32
   3d122:	f3ef 8511 	mrs	r5, BASEPRI
   3d126:	f383 8811 	msr	BASEPRI, r3
   3d12a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d12e:	482b      	ldr	r0, [pc, #172]	; (3d1dc <k_sched_lock+0xc0>)
   3d130:	f001 fa88 	bl	3e644 <z_spin_lock_valid>
   3d134:	b968      	cbnz	r0, 3d152 <k_sched_lock+0x36>
   3d136:	235c      	movs	r3, #92	; 0x5c
   3d138:	4a29      	ldr	r2, [pc, #164]	; (3d1e0 <k_sched_lock+0xc4>)
   3d13a:	492a      	ldr	r1, [pc, #168]	; (3d1e4 <k_sched_lock+0xc8>)
   3d13c:	482a      	ldr	r0, [pc, #168]	; (3d1e8 <k_sched_lock+0xcc>)
   3d13e:	f004 fd53 	bl	41be8 <printk>
   3d142:	4926      	ldr	r1, [pc, #152]	; (3d1dc <k_sched_lock+0xc0>)
   3d144:	4829      	ldr	r0, [pc, #164]	; (3d1ec <k_sched_lock+0xd0>)
   3d146:	f004 fd4f 	bl	41be8 <printk>
   3d14a:	215c      	movs	r1, #92	; 0x5c
   3d14c:	4824      	ldr	r0, [pc, #144]	; (3d1e0 <k_sched_lock+0xc4>)
   3d14e:	f004 ff65 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d152:	4822      	ldr	r0, [pc, #136]	; (3d1dc <k_sched_lock+0xc0>)
   3d154:	f001 fa94 	bl	3e680 <z_spin_lock_set_owner>
   3d158:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3d15c:	b173      	cbz	r3, 3d17c <k_sched_lock+0x60>
   3d15e:	4924      	ldr	r1, [pc, #144]	; (3d1f0 <k_sched_lock+0xd4>)
   3d160:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3d164:	4a23      	ldr	r2, [pc, #140]	; (3d1f4 <k_sched_lock+0xd8>)
   3d166:	4820      	ldr	r0, [pc, #128]	; (3d1e8 <k_sched_lock+0xcc>)
   3d168:	f004 fd3e 	bl	41be8 <printk>
   3d16c:	4822      	ldr	r0, [pc, #136]	; (3d1f8 <k_sched_lock+0xdc>)
   3d16e:	f004 fd3b 	bl	41be8 <printk>
   3d172:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3d176:	481f      	ldr	r0, [pc, #124]	; (3d1f4 <k_sched_lock+0xd8>)
   3d178:	f004 ff50 	bl	4201c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3d17c:	4c1f      	ldr	r4, [pc, #124]	; (3d1fc <k_sched_lock+0xe0>)
   3d17e:	68a2      	ldr	r2, [r4, #8]
   3d180:	7bd2      	ldrb	r2, [r2, #15]
   3d182:	2a01      	cmp	r2, #1
   3d184:	d10e      	bne.n	3d1a4 <k_sched_lock+0x88>
   3d186:	491e      	ldr	r1, [pc, #120]	; (3d200 <k_sched_lock+0xe4>)
   3d188:	f240 130d 	movw	r3, #269	; 0x10d
   3d18c:	4a19      	ldr	r2, [pc, #100]	; (3d1f4 <k_sched_lock+0xd8>)
   3d18e:	4816      	ldr	r0, [pc, #88]	; (3d1e8 <k_sched_lock+0xcc>)
   3d190:	f004 fd2a 	bl	41be8 <printk>
   3d194:	4818      	ldr	r0, [pc, #96]	; (3d1f8 <k_sched_lock+0xdc>)
   3d196:	f004 fd27 	bl	41be8 <printk>
   3d19a:	f240 110d 	movw	r1, #269	; 0x10d
   3d19e:	4815      	ldr	r0, [pc, #84]	; (3d1f4 <k_sched_lock+0xd8>)
   3d1a0:	f004 ff3c 	bl	4201c <assert_post_action>
	--_current->base.sched_locked;
   3d1a4:	68a2      	ldr	r2, [r4, #8]
   3d1a6:	7bd3      	ldrb	r3, [r2, #15]
   3d1a8:	3b01      	subs	r3, #1
   3d1aa:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d1ac:	480b      	ldr	r0, [pc, #44]	; (3d1dc <k_sched_lock+0xc0>)
   3d1ae:	f001 fa57 	bl	3e660 <z_spin_unlock_valid>
   3d1b2:	b968      	cbnz	r0, 3d1d0 <k_sched_lock+0xb4>
   3d1b4:	2384      	movs	r3, #132	; 0x84
   3d1b6:	4a0a      	ldr	r2, [pc, #40]	; (3d1e0 <k_sched_lock+0xc4>)
   3d1b8:	4912      	ldr	r1, [pc, #72]	; (3d204 <k_sched_lock+0xe8>)
   3d1ba:	480b      	ldr	r0, [pc, #44]	; (3d1e8 <k_sched_lock+0xcc>)
   3d1bc:	f004 fd14 	bl	41be8 <printk>
   3d1c0:	4906      	ldr	r1, [pc, #24]	; (3d1dc <k_sched_lock+0xc0>)
   3d1c2:	4811      	ldr	r0, [pc, #68]	; (3d208 <k_sched_lock+0xec>)
   3d1c4:	f004 fd10 	bl	41be8 <printk>
   3d1c8:	2184      	movs	r1, #132	; 0x84
   3d1ca:	4805      	ldr	r0, [pc, #20]	; (3d1e0 <k_sched_lock+0xc4>)
   3d1cc:	f004 ff26 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d1d0:	f385 8811 	msr	BASEPRI, r5
   3d1d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3d1d8:	bd38      	pop	{r3, r4, r5, pc}
   3d1da:	bf00      	nop
   3d1dc:	20025b28 	.word	0x20025b28
   3d1e0:	00048d7b 	.word	0x00048d7b
   3d1e4:	00048da1 	.word	0x00048da1
   3d1e8:	0004825b 	.word	0x0004825b
   3d1ec:	00048db6 	.word	0x00048db6
   3d1f0:	0004ecdb 	.word	0x0004ecdb
   3d1f4:	0004ed29 	.word	0x0004ed29
   3d1f8:	00049477 	.word	0x00049477
   3d1fc:	20025af0 	.word	0x20025af0
   3d200:	0004ed54 	.word	0x0004ed54
   3d204:	00048dce 	.word	0x00048dce
   3d208:	00048de5 	.word	0x00048de5

0003d20c <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3d20c:	4b11      	ldr	r3, [pc, #68]	; (3d254 <z_priq_dumb_remove+0x48>)
{
   3d20e:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3d210:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3d214:	4282      	cmp	r2, r0
{
   3d216:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3d218:	d105      	bne.n	3d226 <z_priq_dumb_remove+0x1a>
   3d21a:	689b      	ldr	r3, [r3, #8]
   3d21c:	428b      	cmp	r3, r1
   3d21e:	d102      	bne.n	3d226 <z_priq_dumb_remove+0x1a>
   3d220:	7b4b      	ldrb	r3, [r1, #13]
   3d222:	06db      	lsls	r3, r3, #27
   3d224:	d115      	bne.n	3d252 <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d226:	4b0c      	ldr	r3, [pc, #48]	; (3d258 <z_priq_dumb_remove+0x4c>)
   3d228:	429c      	cmp	r4, r3
   3d22a:	d10b      	bne.n	3d244 <z_priq_dumb_remove+0x38>
   3d22c:	490b      	ldr	r1, [pc, #44]	; (3d25c <z_priq_dumb_remove+0x50>)
   3d22e:	480c      	ldr	r0, [pc, #48]	; (3d260 <z_priq_dumb_remove+0x54>)
   3d230:	f240 339f 	movw	r3, #927	; 0x39f
   3d234:	4a0b      	ldr	r2, [pc, #44]	; (3d264 <z_priq_dumb_remove+0x58>)
   3d236:	f004 fcd7 	bl	41be8 <printk>
   3d23a:	f240 319f 	movw	r1, #927	; 0x39f
   3d23e:	4809      	ldr	r0, [pc, #36]	; (3d264 <z_priq_dumb_remove+0x58>)
   3d240:	f004 feec 	bl	4201c <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   3d244:	e9d4 3200 	ldrd	r3, r2, [r4]
   3d248:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3d24a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3d24c:	2300      	movs	r3, #0
	node->prev = NULL;
   3d24e:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3d252:	bd10      	pop	{r4, pc}
   3d254:	20025af0 	.word	0x20025af0
   3d258:	20024318 	.word	0x20024318
   3d25c:	0004eded 	.word	0x0004eded
   3d260:	0004825b 	.word	0x0004825b
   3d264:	0004edb4 	.word	0x0004edb4

0003d268 <z_unpend_thread>:
{
   3d268:	b538      	push	{r3, r4, r5, lr}
   3d26a:	4604      	mov	r4, r0
	__asm__ volatile(
   3d26c:	f04f 0320 	mov.w	r3, #32
   3d270:	f3ef 8511 	mrs	r5, BASEPRI
   3d274:	f383 8811 	msr	BASEPRI, r3
   3d278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d27c:	4819      	ldr	r0, [pc, #100]	; (3d2e4 <z_unpend_thread+0x7c>)
   3d27e:	f001 f9e1 	bl	3e644 <z_spin_lock_valid>
   3d282:	b968      	cbnz	r0, 3d2a0 <z_unpend_thread+0x38>
   3d284:	235c      	movs	r3, #92	; 0x5c
   3d286:	4a18      	ldr	r2, [pc, #96]	; (3d2e8 <z_unpend_thread+0x80>)
   3d288:	4918      	ldr	r1, [pc, #96]	; (3d2ec <z_unpend_thread+0x84>)
   3d28a:	4819      	ldr	r0, [pc, #100]	; (3d2f0 <z_unpend_thread+0x88>)
   3d28c:	f004 fcac 	bl	41be8 <printk>
   3d290:	4914      	ldr	r1, [pc, #80]	; (3d2e4 <z_unpend_thread+0x7c>)
   3d292:	4818      	ldr	r0, [pc, #96]	; (3d2f4 <z_unpend_thread+0x8c>)
   3d294:	f004 fca8 	bl	41be8 <printk>
   3d298:	215c      	movs	r1, #92	; 0x5c
   3d29a:	4813      	ldr	r0, [pc, #76]	; (3d2e8 <z_unpend_thread+0x80>)
   3d29c:	f004 febe 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d2a0:	4810      	ldr	r0, [pc, #64]	; (3d2e4 <z_unpend_thread+0x7c>)
   3d2a2:	f001 f9ed 	bl	3e680 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3d2a6:	4620      	mov	r0, r4
   3d2a8:	f007 fe3f 	bl	44f2a <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d2ac:	480d      	ldr	r0, [pc, #52]	; (3d2e4 <z_unpend_thread+0x7c>)
   3d2ae:	f001 f9d7 	bl	3e660 <z_spin_unlock_valid>
   3d2b2:	b968      	cbnz	r0, 3d2d0 <z_unpend_thread+0x68>
   3d2b4:	2384      	movs	r3, #132	; 0x84
   3d2b6:	4a0c      	ldr	r2, [pc, #48]	; (3d2e8 <z_unpend_thread+0x80>)
   3d2b8:	490f      	ldr	r1, [pc, #60]	; (3d2f8 <z_unpend_thread+0x90>)
   3d2ba:	480d      	ldr	r0, [pc, #52]	; (3d2f0 <z_unpend_thread+0x88>)
   3d2bc:	f004 fc94 	bl	41be8 <printk>
   3d2c0:	4908      	ldr	r1, [pc, #32]	; (3d2e4 <z_unpend_thread+0x7c>)
   3d2c2:	480e      	ldr	r0, [pc, #56]	; (3d2fc <z_unpend_thread+0x94>)
   3d2c4:	f004 fc90 	bl	41be8 <printk>
   3d2c8:	2184      	movs	r1, #132	; 0x84
   3d2ca:	4807      	ldr	r0, [pc, #28]	; (3d2e8 <z_unpend_thread+0x80>)
   3d2cc:	f004 fea6 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d2d0:	f385 8811 	msr	BASEPRI, r5
   3d2d4:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3d2d8:	f104 0018 	add.w	r0, r4, #24
}
   3d2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3d2e0:	f001 bc1e 	b.w	3eb20 <z_abort_timeout>
   3d2e4:	20025b28 	.word	0x20025b28
   3d2e8:	00048d7b 	.word	0x00048d7b
   3d2ec:	00048da1 	.word	0x00048da1
   3d2f0:	0004825b 	.word	0x0004825b
   3d2f4:	00048db6 	.word	0x00048db6
   3d2f8:	00048dce 	.word	0x00048dce
   3d2fc:	00048de5 	.word	0x00048de5

0003d300 <update_cache>:
{
   3d300:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3d302:	4c10      	ldr	r4, [pc, #64]	; (3d344 <update_cache+0x44>)
{
   3d304:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3d306:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3d30a:	f007 fe1d 	bl	44f48 <z_priq_dumb_best>
   3d30e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   3d310:	68a3      	ldr	r3, [r4, #8]
   3d312:	7b59      	ldrb	r1, [r3, #13]
   3d314:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   3d316:	bf44      	itt	mi
   3d318:	f041 0108 	orrmi.w	r1, r1, #8
   3d31c:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   3d31e:	b905      	cbnz	r5, 3d322 <update_cache+0x22>
   3d320:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3d322:	b94e      	cbnz	r6, 3d338 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   3d324:	7b5a      	ldrb	r2, [r3, #13]
   3d326:	06d2      	lsls	r2, r2, #27
   3d328:	d106      	bne.n	3d338 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3d32a:	69aa      	ldr	r2, [r5, #24]
   3d32c:	b922      	cbnz	r2, 3d338 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   3d32e:	89da      	ldrh	r2, [r3, #14]
   3d330:	2a7f      	cmp	r2, #127	; 0x7f
   3d332:	d901      	bls.n	3d338 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   3d334:	6263      	str	r3, [r4, #36]	; 0x24
}
   3d336:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   3d338:	42ab      	cmp	r3, r5
   3d33a:	d001      	beq.n	3d340 <update_cache+0x40>
			z_reset_time_slice();
   3d33c:	f7ff fe34 	bl	3cfa8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3d340:	6265      	str	r5, [r4, #36]	; 0x24
}
   3d342:	e7f8      	b.n	3d336 <update_cache+0x36>
   3d344:	20025af0 	.word	0x20025af0

0003d348 <k_sched_unlock>:
{
   3d348:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3d34a:	f04f 0320 	mov.w	r3, #32
   3d34e:	f3ef 8511 	mrs	r5, BASEPRI
   3d352:	f383 8811 	msr	BASEPRI, r3
   3d356:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d35a:	482d      	ldr	r0, [pc, #180]	; (3d410 <k_sched_unlock+0xc8>)
   3d35c:	f001 f972 	bl	3e644 <z_spin_lock_valid>
   3d360:	b968      	cbnz	r0, 3d37e <k_sched_unlock+0x36>
   3d362:	235c      	movs	r3, #92	; 0x5c
   3d364:	4a2b      	ldr	r2, [pc, #172]	; (3d414 <k_sched_unlock+0xcc>)
   3d366:	492c      	ldr	r1, [pc, #176]	; (3d418 <k_sched_unlock+0xd0>)
   3d368:	482c      	ldr	r0, [pc, #176]	; (3d41c <k_sched_unlock+0xd4>)
   3d36a:	f004 fc3d 	bl	41be8 <printk>
   3d36e:	4928      	ldr	r1, [pc, #160]	; (3d410 <k_sched_unlock+0xc8>)
   3d370:	482b      	ldr	r0, [pc, #172]	; (3d420 <k_sched_unlock+0xd8>)
   3d372:	f004 fc39 	bl	41be8 <printk>
   3d376:	215c      	movs	r1, #92	; 0x5c
   3d378:	4826      	ldr	r0, [pc, #152]	; (3d414 <k_sched_unlock+0xcc>)
   3d37a:	f004 fe4f 	bl	4201c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   3d37e:	4c29      	ldr	r4, [pc, #164]	; (3d424 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   3d380:	4823      	ldr	r0, [pc, #140]	; (3d410 <k_sched_unlock+0xc8>)
   3d382:	f001 f97d 	bl	3e680 <z_spin_lock_set_owner>
   3d386:	68a2      	ldr	r2, [r4, #8]
   3d388:	7bd2      	ldrb	r2, [r2, #15]
   3d38a:	b972      	cbnz	r2, 3d3aa <k_sched_unlock+0x62>
   3d38c:	4926      	ldr	r1, [pc, #152]	; (3d428 <k_sched_unlock+0xe0>)
   3d38e:	f240 333a 	movw	r3, #826	; 0x33a
   3d392:	4a26      	ldr	r2, [pc, #152]	; (3d42c <k_sched_unlock+0xe4>)
   3d394:	4821      	ldr	r0, [pc, #132]	; (3d41c <k_sched_unlock+0xd4>)
   3d396:	f004 fc27 	bl	41be8 <printk>
   3d39a:	4825      	ldr	r0, [pc, #148]	; (3d430 <k_sched_unlock+0xe8>)
   3d39c:	f004 fc24 	bl	41be8 <printk>
   3d3a0:	f240 313a 	movw	r1, #826	; 0x33a
   3d3a4:	4821      	ldr	r0, [pc, #132]	; (3d42c <k_sched_unlock+0xe4>)
   3d3a6:	f004 fe39 	bl	4201c <assert_post_action>
   3d3aa:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   3d3ae:	b173      	cbz	r3, 3d3ce <k_sched_unlock+0x86>
   3d3b0:	4920      	ldr	r1, [pc, #128]	; (3d434 <k_sched_unlock+0xec>)
   3d3b2:	f240 333b 	movw	r3, #827	; 0x33b
   3d3b6:	4a1d      	ldr	r2, [pc, #116]	; (3d42c <k_sched_unlock+0xe4>)
   3d3b8:	4818      	ldr	r0, [pc, #96]	; (3d41c <k_sched_unlock+0xd4>)
   3d3ba:	f004 fc15 	bl	41be8 <printk>
   3d3be:	481c      	ldr	r0, [pc, #112]	; (3d430 <k_sched_unlock+0xe8>)
   3d3c0:	f004 fc12 	bl	41be8 <printk>
   3d3c4:	f240 313b 	movw	r1, #827	; 0x33b
   3d3c8:	4818      	ldr	r0, [pc, #96]	; (3d42c <k_sched_unlock+0xe4>)
   3d3ca:	f004 fe27 	bl	4201c <assert_post_action>
		++_current->base.sched_locked;
   3d3ce:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3d3d0:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3d3d2:	7bd3      	ldrb	r3, [r2, #15]
   3d3d4:	3301      	adds	r3, #1
   3d3d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3d3d8:	f7ff ff92 	bl	3d300 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d3dc:	480c      	ldr	r0, [pc, #48]	; (3d410 <k_sched_unlock+0xc8>)
   3d3de:	f001 f93f 	bl	3e660 <z_spin_unlock_valid>
   3d3e2:	b968      	cbnz	r0, 3d400 <k_sched_unlock+0xb8>
   3d3e4:	2384      	movs	r3, #132	; 0x84
   3d3e6:	4a0b      	ldr	r2, [pc, #44]	; (3d414 <k_sched_unlock+0xcc>)
   3d3e8:	4913      	ldr	r1, [pc, #76]	; (3d438 <k_sched_unlock+0xf0>)
   3d3ea:	480c      	ldr	r0, [pc, #48]	; (3d41c <k_sched_unlock+0xd4>)
   3d3ec:	f004 fbfc 	bl	41be8 <printk>
   3d3f0:	4907      	ldr	r1, [pc, #28]	; (3d410 <k_sched_unlock+0xc8>)
   3d3f2:	4812      	ldr	r0, [pc, #72]	; (3d43c <k_sched_unlock+0xf4>)
   3d3f4:	f004 fbf8 	bl	41be8 <printk>
   3d3f8:	2184      	movs	r1, #132	; 0x84
   3d3fa:	4806      	ldr	r0, [pc, #24]	; (3d414 <k_sched_unlock+0xcc>)
   3d3fc:	f004 fe0e 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d400:	f385 8811 	msr	BASEPRI, r5
   3d404:	f3bf 8f6f 	isb	sy
}
   3d408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3d40c:	f007 bd83 	b.w	44f16 <z_reschedule_unlocked>
   3d410:	20025b28 	.word	0x20025b28
   3d414:	00048d7b 	.word	0x00048d7b
   3d418:	00048da1 	.word	0x00048da1
   3d41c:	0004825b 	.word	0x0004825b
   3d420:	00048db6 	.word	0x00048db6
   3d424:	20025af0 	.word	0x20025af0
   3d428:	0004ed84 	.word	0x0004ed84
   3d42c:	0004edb4 	.word	0x0004edb4
   3d430:	00049477 	.word	0x00049477
   3d434:	0004ecdb 	.word	0x0004ecdb
   3d438:	00048dce 	.word	0x00048dce
   3d43c:	00048de5 	.word	0x00048de5

0003d440 <ready_thread>:
{
   3d440:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d442:	7b43      	ldrb	r3, [r0, #13]
   3d444:	4604      	mov	r4, r0
   3d446:	06db      	lsls	r3, r3, #27
   3d448:	d138      	bne.n	3d4bc <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
   3d44a:	6983      	ldr	r3, [r0, #24]
   3d44c:	2b00      	cmp	r3, #0
   3d44e:	d135      	bne.n	3d4bc <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d450:	4b1b      	ldr	r3, [pc, #108]	; (3d4c0 <ready_thread+0x80>)
   3d452:	4298      	cmp	r0, r3
   3d454:	d10b      	bne.n	3d46e <ready_thread+0x2e>
   3d456:	491b      	ldr	r1, [pc, #108]	; (3d4c4 <ready_thread+0x84>)
   3d458:	481b      	ldr	r0, [pc, #108]	; (3d4c8 <ready_thread+0x88>)
   3d45a:	f240 3389 	movw	r3, #905	; 0x389
   3d45e:	4a1b      	ldr	r2, [pc, #108]	; (3d4cc <ready_thread+0x8c>)
   3d460:	f004 fbc2 	bl	41be8 <printk>
   3d464:	f240 3189 	movw	r1, #905	; 0x389
   3d468:	4818      	ldr	r0, [pc, #96]	; (3d4cc <ready_thread+0x8c>)
   3d46a:	f004 fdd7 	bl	4201c <assert_post_action>
	return list->head == list;
   3d46e:	4a18      	ldr	r2, [pc, #96]	; (3d4d0 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d470:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3d474:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3d478:	428b      	cmp	r3, r1
   3d47a:	d019      	beq.n	3d4b0 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d47c:	b1c3      	cbz	r3, 3d4b0 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d47e:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3d482:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3d486:	42ae      	cmp	r6, r5
   3d488:	dd0d      	ble.n	3d4a6 <ready_thread+0x66>
	node->prev = successor->prev;
   3d48a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3d48c:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3d490:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3d492:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3d494:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3d496:	2000      	movs	r0, #0
   3d498:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3d49c:	7363      	strb	r3, [r4, #13]
}
   3d49e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   3d4a2:	f7ff bf2d 	b.w	3d300 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3d4a6:	4298      	cmp	r0, r3
   3d4a8:	d002      	beq.n	3d4b0 <ready_thread+0x70>
   3d4aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d4ac:	2b00      	cmp	r3, #0
   3d4ae:	d1e8      	bne.n	3d482 <ready_thread+0x42>
	node->prev = list->tail;
   3d4b0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d4b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d4b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d4b8:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d4ba:	e7eb      	b.n	3d494 <ready_thread+0x54>
}
   3d4bc:	bd70      	pop	{r4, r5, r6, pc}
   3d4be:	bf00      	nop
   3d4c0:	20024318 	.word	0x20024318
   3d4c4:	0004eded 	.word	0x0004eded
   3d4c8:	0004825b 	.word	0x0004825b
   3d4cc:	0004edb4 	.word	0x0004edb4
   3d4d0:	20025af0 	.word	0x20025af0

0003d4d4 <z_ready_thread>:
{
   3d4d4:	b538      	push	{r3, r4, r5, lr}
   3d4d6:	4605      	mov	r5, r0
	__asm__ volatile(
   3d4d8:	f04f 0320 	mov.w	r3, #32
   3d4dc:	f3ef 8411 	mrs	r4, BASEPRI
   3d4e0:	f383 8811 	msr	BASEPRI, r3
   3d4e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d4e8:	4817      	ldr	r0, [pc, #92]	; (3d548 <z_ready_thread+0x74>)
   3d4ea:	f001 f8ab 	bl	3e644 <z_spin_lock_valid>
   3d4ee:	b968      	cbnz	r0, 3d50c <z_ready_thread+0x38>
   3d4f0:	235c      	movs	r3, #92	; 0x5c
   3d4f2:	4a16      	ldr	r2, [pc, #88]	; (3d54c <z_ready_thread+0x78>)
   3d4f4:	4916      	ldr	r1, [pc, #88]	; (3d550 <z_ready_thread+0x7c>)
   3d4f6:	4817      	ldr	r0, [pc, #92]	; (3d554 <z_ready_thread+0x80>)
   3d4f8:	f004 fb76 	bl	41be8 <printk>
   3d4fc:	4912      	ldr	r1, [pc, #72]	; (3d548 <z_ready_thread+0x74>)
   3d4fe:	4816      	ldr	r0, [pc, #88]	; (3d558 <z_ready_thread+0x84>)
   3d500:	f004 fb72 	bl	41be8 <printk>
   3d504:	215c      	movs	r1, #92	; 0x5c
   3d506:	4811      	ldr	r0, [pc, #68]	; (3d54c <z_ready_thread+0x78>)
   3d508:	f004 fd88 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d50c:	480e      	ldr	r0, [pc, #56]	; (3d548 <z_ready_thread+0x74>)
   3d50e:	f001 f8b7 	bl	3e680 <z_spin_lock_set_owner>
		ready_thread(thread);
   3d512:	4628      	mov	r0, r5
   3d514:	f7ff ff94 	bl	3d440 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d518:	480b      	ldr	r0, [pc, #44]	; (3d548 <z_ready_thread+0x74>)
   3d51a:	f001 f8a1 	bl	3e660 <z_spin_unlock_valid>
   3d51e:	b968      	cbnz	r0, 3d53c <z_ready_thread+0x68>
   3d520:	2384      	movs	r3, #132	; 0x84
   3d522:	4a0a      	ldr	r2, [pc, #40]	; (3d54c <z_ready_thread+0x78>)
   3d524:	490d      	ldr	r1, [pc, #52]	; (3d55c <z_ready_thread+0x88>)
   3d526:	480b      	ldr	r0, [pc, #44]	; (3d554 <z_ready_thread+0x80>)
   3d528:	f004 fb5e 	bl	41be8 <printk>
   3d52c:	4906      	ldr	r1, [pc, #24]	; (3d548 <z_ready_thread+0x74>)
   3d52e:	480c      	ldr	r0, [pc, #48]	; (3d560 <z_ready_thread+0x8c>)
   3d530:	f004 fb5a 	bl	41be8 <printk>
   3d534:	2184      	movs	r1, #132	; 0x84
   3d536:	4805      	ldr	r0, [pc, #20]	; (3d54c <z_ready_thread+0x78>)
   3d538:	f004 fd70 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d53c:	f384 8811 	msr	BASEPRI, r4
   3d540:	f3bf 8f6f 	isb	sy
}
   3d544:	bd38      	pop	{r3, r4, r5, pc}
   3d546:	bf00      	nop
   3d548:	20025b28 	.word	0x20025b28
   3d54c:	00048d7b 	.word	0x00048d7b
   3d550:	00048da1 	.word	0x00048da1
   3d554:	0004825b 	.word	0x0004825b
   3d558:	00048db6 	.word	0x00048db6
   3d55c:	00048dce 	.word	0x00048dce
   3d560:	00048de5 	.word	0x00048de5

0003d564 <z_sched_start>:
{
   3d564:	b538      	push	{r3, r4, r5, lr}
   3d566:	4604      	mov	r4, r0
	__asm__ volatile(
   3d568:	f04f 0320 	mov.w	r3, #32
   3d56c:	f3ef 8511 	mrs	r5, BASEPRI
   3d570:	f383 8811 	msr	BASEPRI, r3
   3d574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d578:	481d      	ldr	r0, [pc, #116]	; (3d5f0 <z_sched_start+0x8c>)
   3d57a:	f001 f863 	bl	3e644 <z_spin_lock_valid>
   3d57e:	b968      	cbnz	r0, 3d59c <z_sched_start+0x38>
   3d580:	235c      	movs	r3, #92	; 0x5c
   3d582:	4a1c      	ldr	r2, [pc, #112]	; (3d5f4 <z_sched_start+0x90>)
   3d584:	491c      	ldr	r1, [pc, #112]	; (3d5f8 <z_sched_start+0x94>)
   3d586:	481d      	ldr	r0, [pc, #116]	; (3d5fc <z_sched_start+0x98>)
   3d588:	f004 fb2e 	bl	41be8 <printk>
   3d58c:	4918      	ldr	r1, [pc, #96]	; (3d5f0 <z_sched_start+0x8c>)
   3d58e:	481c      	ldr	r0, [pc, #112]	; (3d600 <z_sched_start+0x9c>)
   3d590:	f004 fb2a 	bl	41be8 <printk>
   3d594:	215c      	movs	r1, #92	; 0x5c
   3d596:	4817      	ldr	r0, [pc, #92]	; (3d5f4 <z_sched_start+0x90>)
   3d598:	f004 fd40 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d59c:	4814      	ldr	r0, [pc, #80]	; (3d5f0 <z_sched_start+0x8c>)
   3d59e:	f001 f86f 	bl	3e680 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3d5a2:	7b63      	ldrb	r3, [r4, #13]
   3d5a4:	075a      	lsls	r2, r3, #29
   3d5a6:	d416      	bmi.n	3d5d6 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d5a8:	4811      	ldr	r0, [pc, #68]	; (3d5f0 <z_sched_start+0x8c>)
   3d5aa:	f001 f859 	bl	3e660 <z_spin_unlock_valid>
   3d5ae:	b968      	cbnz	r0, 3d5cc <z_sched_start+0x68>
   3d5b0:	2384      	movs	r3, #132	; 0x84
   3d5b2:	4a10      	ldr	r2, [pc, #64]	; (3d5f4 <z_sched_start+0x90>)
   3d5b4:	4913      	ldr	r1, [pc, #76]	; (3d604 <z_sched_start+0xa0>)
   3d5b6:	4811      	ldr	r0, [pc, #68]	; (3d5fc <z_sched_start+0x98>)
   3d5b8:	f004 fb16 	bl	41be8 <printk>
   3d5bc:	490c      	ldr	r1, [pc, #48]	; (3d5f0 <z_sched_start+0x8c>)
   3d5be:	4812      	ldr	r0, [pc, #72]	; (3d608 <z_sched_start+0xa4>)
   3d5c0:	f004 fb12 	bl	41be8 <printk>
   3d5c4:	2184      	movs	r1, #132	; 0x84
   3d5c6:	480b      	ldr	r0, [pc, #44]	; (3d5f4 <z_sched_start+0x90>)
   3d5c8:	f004 fd28 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d5cc:	f385 8811 	msr	BASEPRI, r5
   3d5d0:	f3bf 8f6f 	isb	sy
}
   3d5d4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3d5d6:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3d5da:	4620      	mov	r0, r4
   3d5dc:	7363      	strb	r3, [r4, #13]
   3d5de:	f7ff ff2f 	bl	3d440 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3d5e2:	4629      	mov	r1, r5
}
   3d5e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3d5e8:	4801      	ldr	r0, [pc, #4]	; (3d5f0 <z_sched_start+0x8c>)
   3d5ea:	f7ff bd53 	b.w	3d094 <z_reschedule>
   3d5ee:	bf00      	nop
   3d5f0:	20025b28 	.word	0x20025b28
   3d5f4:	00048d7b 	.word	0x00048d7b
   3d5f8:	00048da1 	.word	0x00048da1
   3d5fc:	0004825b 	.word	0x0004825b
   3d600:	00048db6 	.word	0x00048db6
   3d604:	00048dce 	.word	0x00048dce
   3d608:	00048de5 	.word	0x00048de5

0003d60c <z_impl_k_thread_resume>:
{
   3d60c:	b538      	push	{r3, r4, r5, lr}
   3d60e:	4604      	mov	r4, r0
	__asm__ volatile(
   3d610:	f04f 0320 	mov.w	r3, #32
   3d614:	f3ef 8511 	mrs	r5, BASEPRI
   3d618:	f383 8811 	msr	BASEPRI, r3
   3d61c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d620:	4810      	ldr	r0, [pc, #64]	; (3d664 <z_impl_k_thread_resume+0x58>)
   3d622:	f001 f80f 	bl	3e644 <z_spin_lock_valid>
   3d626:	b968      	cbnz	r0, 3d644 <z_impl_k_thread_resume+0x38>
   3d628:	235c      	movs	r3, #92	; 0x5c
   3d62a:	4a0f      	ldr	r2, [pc, #60]	; (3d668 <z_impl_k_thread_resume+0x5c>)
   3d62c:	490f      	ldr	r1, [pc, #60]	; (3d66c <z_impl_k_thread_resume+0x60>)
   3d62e:	4810      	ldr	r0, [pc, #64]	; (3d670 <z_impl_k_thread_resume+0x64>)
   3d630:	f004 fada 	bl	41be8 <printk>
   3d634:	490b      	ldr	r1, [pc, #44]	; (3d664 <z_impl_k_thread_resume+0x58>)
   3d636:	480f      	ldr	r0, [pc, #60]	; (3d674 <z_impl_k_thread_resume+0x68>)
   3d638:	f004 fad6 	bl	41be8 <printk>
   3d63c:	215c      	movs	r1, #92	; 0x5c
   3d63e:	480a      	ldr	r0, [pc, #40]	; (3d668 <z_impl_k_thread_resume+0x5c>)
   3d640:	f004 fcec 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d644:	4807      	ldr	r0, [pc, #28]	; (3d664 <z_impl_k_thread_resume+0x58>)
   3d646:	f001 f81b 	bl	3e680 <z_spin_lock_set_owner>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3d64a:	7b63      	ldrb	r3, [r4, #13]
	ready_thread(thread);
   3d64c:	4620      	mov	r0, r4
   3d64e:	f023 0310 	bic.w	r3, r3, #16
   3d652:	7363      	strb	r3, [r4, #13]
   3d654:	f7ff fef4 	bl	3d440 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3d658:	4629      	mov	r1, r5
}
   3d65a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3d65e:	4801      	ldr	r0, [pc, #4]	; (3d664 <z_impl_k_thread_resume+0x58>)
   3d660:	f7ff bd18 	b.w	3d094 <z_reschedule>
   3d664:	20025b28 	.word	0x20025b28
   3d668:	00048d7b 	.word	0x00048d7b
   3d66c:	00048da1 	.word	0x00048da1
   3d670:	0004825b 	.word	0x0004825b
   3d674:	00048db6 	.word	0x00048db6

0003d678 <z_thread_timeout>:
{
   3d678:	b570      	push	{r4, r5, r6, lr}
   3d67a:	4604      	mov	r4, r0
   3d67c:	f04f 0320 	mov.w	r3, #32
   3d680:	f3ef 8611 	mrs	r6, BASEPRI
   3d684:	f383 8811 	msr	BASEPRI, r3
   3d688:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d68c:	481e      	ldr	r0, [pc, #120]	; (3d708 <z_thread_timeout+0x90>)
   3d68e:	f000 ffd9 	bl	3e644 <z_spin_lock_valid>
   3d692:	b968      	cbnz	r0, 3d6b0 <z_thread_timeout+0x38>
   3d694:	235c      	movs	r3, #92	; 0x5c
   3d696:	4a1d      	ldr	r2, [pc, #116]	; (3d70c <z_thread_timeout+0x94>)
   3d698:	491d      	ldr	r1, [pc, #116]	; (3d710 <z_thread_timeout+0x98>)
   3d69a:	481e      	ldr	r0, [pc, #120]	; (3d714 <z_thread_timeout+0x9c>)
   3d69c:	f004 faa4 	bl	41be8 <printk>
   3d6a0:	4919      	ldr	r1, [pc, #100]	; (3d708 <z_thread_timeout+0x90>)
   3d6a2:	481d      	ldr	r0, [pc, #116]	; (3d718 <z_thread_timeout+0xa0>)
   3d6a4:	f004 faa0 	bl	41be8 <printk>
   3d6a8:	215c      	movs	r1, #92	; 0x5c
   3d6aa:	4818      	ldr	r0, [pc, #96]	; (3d70c <z_thread_timeout+0x94>)
   3d6ac:	f004 fcb6 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d6b0:	4815      	ldr	r0, [pc, #84]	; (3d708 <z_thread_timeout+0x90>)
   3d6b2:	f000 ffe5 	bl	3e680 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   3d6b6:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   3d6ba:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   3d6be:	b113      	cbz	r3, 3d6c6 <z_thread_timeout+0x4e>
			unpend_thread_no_timeout(thread);
   3d6c0:	4628      	mov	r0, r5
   3d6c2:	f007 fc32 	bl	44f2a <unpend_thread_no_timeout>
   3d6c6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   3d6ca:	4628      	mov	r0, r5
   3d6cc:	f023 0314 	bic.w	r3, r3, #20
   3d6d0:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3d6d4:	f7ff feb4 	bl	3d440 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d6d8:	480b      	ldr	r0, [pc, #44]	; (3d708 <z_thread_timeout+0x90>)
   3d6da:	f000 ffc1 	bl	3e660 <z_spin_unlock_valid>
   3d6de:	b968      	cbnz	r0, 3d6fc <z_thread_timeout+0x84>
   3d6e0:	2384      	movs	r3, #132	; 0x84
   3d6e2:	4a0a      	ldr	r2, [pc, #40]	; (3d70c <z_thread_timeout+0x94>)
   3d6e4:	490d      	ldr	r1, [pc, #52]	; (3d71c <z_thread_timeout+0xa4>)
   3d6e6:	480b      	ldr	r0, [pc, #44]	; (3d714 <z_thread_timeout+0x9c>)
   3d6e8:	f004 fa7e 	bl	41be8 <printk>
   3d6ec:	4906      	ldr	r1, [pc, #24]	; (3d708 <z_thread_timeout+0x90>)
   3d6ee:	480c      	ldr	r0, [pc, #48]	; (3d720 <z_thread_timeout+0xa8>)
   3d6f0:	f004 fa7a 	bl	41be8 <printk>
   3d6f4:	2184      	movs	r1, #132	; 0x84
   3d6f6:	4805      	ldr	r0, [pc, #20]	; (3d70c <z_thread_timeout+0x94>)
   3d6f8:	f004 fc90 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d6fc:	f386 8811 	msr	BASEPRI, r6
   3d700:	f3bf 8f6f 	isb	sy
}
   3d704:	bd70      	pop	{r4, r5, r6, pc}
   3d706:	bf00      	nop
   3d708:	20025b28 	.word	0x20025b28
   3d70c:	00048d7b 	.word	0x00048d7b
   3d710:	00048da1 	.word	0x00048da1
   3d714:	0004825b 	.word	0x0004825b
   3d718:	00048db6 	.word	0x00048db6
   3d71c:	00048dce 	.word	0x00048dce
   3d720:	00048de5 	.word	0x00048de5

0003d724 <move_thread_to_end_of_prio_q>:
{
   3d724:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   3d726:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   3d72a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3d72c:	2b00      	cmp	r3, #0
   3d72e:	da03      	bge.n	3d738 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d730:	4601      	mov	r1, r0
   3d732:	481e      	ldr	r0, [pc, #120]	; (3d7ac <move_thread_to_end_of_prio_q+0x88>)
   3d734:	f7ff fd6a 	bl	3d20c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3d738:	4b1d      	ldr	r3, [pc, #116]	; (3d7b0 <move_thread_to_end_of_prio_q+0x8c>)
   3d73a:	429c      	cmp	r4, r3
   3d73c:	d10b      	bne.n	3d756 <move_thread_to_end_of_prio_q+0x32>
   3d73e:	491d      	ldr	r1, [pc, #116]	; (3d7b4 <move_thread_to_end_of_prio_q+0x90>)
   3d740:	481d      	ldr	r0, [pc, #116]	; (3d7b8 <move_thread_to_end_of_prio_q+0x94>)
   3d742:	f240 3389 	movw	r3, #905	; 0x389
   3d746:	4a1d      	ldr	r2, [pc, #116]	; (3d7bc <move_thread_to_end_of_prio_q+0x98>)
   3d748:	f004 fa4e 	bl	41be8 <printk>
   3d74c:	f240 3189 	movw	r1, #905	; 0x389
   3d750:	481a      	ldr	r0, [pc, #104]	; (3d7bc <move_thread_to_end_of_prio_q+0x98>)
   3d752:	f004 fc63 	bl	4201c <assert_post_action>
	return list->head == list;
   3d756:	4a1a      	ldr	r2, [pc, #104]	; (3d7c0 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3d758:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3d75c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3d760:	428b      	cmp	r3, r1
   3d762:	d01c      	beq.n	3d79e <move_thread_to_end_of_prio_q+0x7a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d764:	b1db      	cbz	r3, 3d79e <move_thread_to_end_of_prio_q+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   3d766:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3d76a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3d76e:	42ae      	cmp	r6, r5
   3d770:	dd10      	ble.n	3d794 <move_thread_to_end_of_prio_q+0x70>
	node->prev = successor->prev;
   3d772:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3d774:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3d778:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3d77a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3d77c:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   3d77e:	6890      	ldr	r0, [r2, #8]
   3d780:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3d784:	7363      	strb	r3, [r4, #13]
   3d786:	1b03      	subs	r3, r0, r4
   3d788:	4258      	negs	r0, r3
   3d78a:	4158      	adcs	r0, r3
}
   3d78c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   3d790:	f7ff bdb6 	b.w	3d300 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3d794:	4298      	cmp	r0, r3
   3d796:	d002      	beq.n	3d79e <move_thread_to_end_of_prio_q+0x7a>
   3d798:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3d79a:	2b00      	cmp	r3, #0
   3d79c:	d1e5      	bne.n	3d76a <move_thread_to_end_of_prio_q+0x46>
	node->prev = list->tail;
   3d79e:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3d7a2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3d7a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3d7a6:	62d4      	str	r4, [r2, #44]	; 0x2c
   3d7a8:	e7e8      	b.n	3d77c <move_thread_to_end_of_prio_q+0x58>
   3d7aa:	bf00      	nop
   3d7ac:	20025b18 	.word	0x20025b18
   3d7b0:	20024318 	.word	0x20024318
   3d7b4:	0004eded 	.word	0x0004eded
   3d7b8:	0004825b 	.word	0x0004825b
   3d7bc:	0004edb4 	.word	0x0004edb4
   3d7c0:	20025af0 	.word	0x20025af0

0003d7c4 <z_time_slice>:
{
   3d7c4:	b570      	push	{r4, r5, r6, lr}
   3d7c6:	4605      	mov	r5, r0
	__asm__ volatile(
   3d7c8:	f04f 0320 	mov.w	r3, #32
   3d7cc:	f3ef 8411 	mrs	r4, BASEPRI
   3d7d0:	f383 8811 	msr	BASEPRI, r3
   3d7d4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d7d8:	482a      	ldr	r0, [pc, #168]	; (3d884 <z_time_slice+0xc0>)
   3d7da:	f000 ff33 	bl	3e644 <z_spin_lock_valid>
   3d7de:	b968      	cbnz	r0, 3d7fc <z_time_slice+0x38>
   3d7e0:	235c      	movs	r3, #92	; 0x5c
   3d7e2:	4a29      	ldr	r2, [pc, #164]	; (3d888 <z_time_slice+0xc4>)
   3d7e4:	4929      	ldr	r1, [pc, #164]	; (3d88c <z_time_slice+0xc8>)
   3d7e6:	482a      	ldr	r0, [pc, #168]	; (3d890 <z_time_slice+0xcc>)
   3d7e8:	f004 f9fe 	bl	41be8 <printk>
   3d7ec:	4925      	ldr	r1, [pc, #148]	; (3d884 <z_time_slice+0xc0>)
   3d7ee:	4829      	ldr	r0, [pc, #164]	; (3d894 <z_time_slice+0xd0>)
   3d7f0:	f004 f9fa 	bl	41be8 <printk>
   3d7f4:	215c      	movs	r1, #92	; 0x5c
   3d7f6:	4824      	ldr	r0, [pc, #144]	; (3d888 <z_time_slice+0xc4>)
   3d7f8:	f004 fc10 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d7fc:	4821      	ldr	r0, [pc, #132]	; (3d884 <z_time_slice+0xc0>)
   3d7fe:	f000 ff3f 	bl	3e680 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   3d802:	4b25      	ldr	r3, [pc, #148]	; (3d898 <z_time_slice+0xd4>)
   3d804:	4a25      	ldr	r2, [pc, #148]	; (3d89c <z_time_slice+0xd8>)
   3d806:	6898      	ldr	r0, [r3, #8]
   3d808:	6811      	ldr	r1, [r2, #0]
   3d80a:	4288      	cmp	r0, r1
   3d80c:	4619      	mov	r1, r3
   3d80e:	d118      	bne.n	3d842 <z_time_slice+0x7e>
			z_reset_time_slice();
   3d810:	f7ff fbca 	bl	3cfa8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d814:	481b      	ldr	r0, [pc, #108]	; (3d884 <z_time_slice+0xc0>)
   3d816:	f000 ff23 	bl	3e660 <z_spin_unlock_valid>
   3d81a:	b968      	cbnz	r0, 3d838 <z_time_slice+0x74>
   3d81c:	2384      	movs	r3, #132	; 0x84
   3d81e:	4a1a      	ldr	r2, [pc, #104]	; (3d888 <z_time_slice+0xc4>)
   3d820:	491f      	ldr	r1, [pc, #124]	; (3d8a0 <z_time_slice+0xdc>)
   3d822:	481b      	ldr	r0, [pc, #108]	; (3d890 <z_time_slice+0xcc>)
   3d824:	f004 f9e0 	bl	41be8 <printk>
   3d828:	4916      	ldr	r1, [pc, #88]	; (3d884 <z_time_slice+0xc0>)
   3d82a:	481e      	ldr	r0, [pc, #120]	; (3d8a4 <z_time_slice+0xe0>)
   3d82c:	f004 f9dc 	bl	41be8 <printk>
   3d830:	2184      	movs	r1, #132	; 0x84
   3d832:	4815      	ldr	r0, [pc, #84]	; (3d888 <z_time_slice+0xc4>)
   3d834:	f004 fbf2 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d838:	f384 8811 	msr	BASEPRI, r4
   3d83c:	f3bf 8f6f 	isb	sy
}
   3d840:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   3d842:	2600      	movs	r6, #0
   3d844:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   3d846:	4a18      	ldr	r2, [pc, #96]	; (3d8a8 <z_time_slice+0xe4>)
   3d848:	6812      	ldr	r2, [r2, #0]
   3d84a:	b1ba      	cbz	r2, 3d87c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3d84c:	89c2      	ldrh	r2, [r0, #14]
   3d84e:	2a7f      	cmp	r2, #127	; 0x7f
   3d850:	d814      	bhi.n	3d87c <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   3d852:	7b42      	ldrb	r2, [r0, #13]
   3d854:	06d2      	lsls	r2, r2, #27
   3d856:	d111      	bne.n	3d87c <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3d858:	4a14      	ldr	r2, [pc, #80]	; (3d8ac <z_time_slice+0xe8>)
   3d85a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   3d85e:	6812      	ldr	r2, [r2, #0]
   3d860:	4296      	cmp	r6, r2
   3d862:	db0b      	blt.n	3d87c <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3d864:	4a12      	ldr	r2, [pc, #72]	; (3d8b0 <z_time_slice+0xec>)
   3d866:	4290      	cmp	r0, r2
   3d868:	d008      	beq.n	3d87c <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   3d86a:	691a      	ldr	r2, [r3, #16]
   3d86c:	42aa      	cmp	r2, r5
   3d86e:	dc02      	bgt.n	3d876 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   3d870:	f7ff ff58 	bl	3d724 <move_thread_to_end_of_prio_q>
   3d874:	e7cc      	b.n	3d810 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   3d876:	1b52      	subs	r2, r2, r5
   3d878:	611a      	str	r2, [r3, #16]
   3d87a:	e7cb      	b.n	3d814 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   3d87c:	2300      	movs	r3, #0
   3d87e:	610b      	str	r3, [r1, #16]
   3d880:	e7c8      	b.n	3d814 <z_time_slice+0x50>
   3d882:	bf00      	nop
   3d884:	20025b28 	.word	0x20025b28
   3d888:	00048d7b 	.word	0x00048d7b
   3d88c:	00048da1 	.word	0x00048da1
   3d890:	0004825b 	.word	0x0004825b
   3d894:	00048db6 	.word	0x00048db6
   3d898:	20025af0 	.word	0x20025af0
   3d89c:	20025b24 	.word	0x20025b24
   3d8a0:	00048dce 	.word	0x00048dce
   3d8a4:	00048de5 	.word	0x00048de5
   3d8a8:	20025b30 	.word	0x20025b30
   3d8ac:	20025b2c 	.word	0x20025b2c
   3d8b0:	20024318 	.word	0x20024318

0003d8b4 <z_impl_k_thread_suspend>:
{
   3d8b4:	b570      	push	{r4, r5, r6, lr}
   3d8b6:	4604      	mov	r4, r0
   3d8b8:	3018      	adds	r0, #24
   3d8ba:	f001 f931 	bl	3eb20 <z_abort_timeout>
	__asm__ volatile(
   3d8be:	f04f 0320 	mov.w	r3, #32
   3d8c2:	f3ef 8611 	mrs	r6, BASEPRI
   3d8c6:	f383 8811 	msr	BASEPRI, r3
   3d8ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d8ce:	4825      	ldr	r0, [pc, #148]	; (3d964 <z_impl_k_thread_suspend+0xb0>)
   3d8d0:	f000 feb8 	bl	3e644 <z_spin_lock_valid>
   3d8d4:	b968      	cbnz	r0, 3d8f2 <z_impl_k_thread_suspend+0x3e>
   3d8d6:	235c      	movs	r3, #92	; 0x5c
   3d8d8:	4a23      	ldr	r2, [pc, #140]	; (3d968 <z_impl_k_thread_suspend+0xb4>)
   3d8da:	4924      	ldr	r1, [pc, #144]	; (3d96c <z_impl_k_thread_suspend+0xb8>)
   3d8dc:	4824      	ldr	r0, [pc, #144]	; (3d970 <z_impl_k_thread_suspend+0xbc>)
   3d8de:	f004 f983 	bl	41be8 <printk>
   3d8e2:	4920      	ldr	r1, [pc, #128]	; (3d964 <z_impl_k_thread_suspend+0xb0>)
   3d8e4:	4823      	ldr	r0, [pc, #140]	; (3d974 <z_impl_k_thread_suspend+0xc0>)
   3d8e6:	f004 f97f 	bl	41be8 <printk>
   3d8ea:	215c      	movs	r1, #92	; 0x5c
   3d8ec:	481e      	ldr	r0, [pc, #120]	; (3d968 <z_impl_k_thread_suspend+0xb4>)
   3d8ee:	f004 fb95 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d8f2:	481c      	ldr	r0, [pc, #112]	; (3d964 <z_impl_k_thread_suspend+0xb0>)
   3d8f4:	f000 fec4 	bl	3e680 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3d8f8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3d8fc:	2b00      	cmp	r3, #0
   3d8fe:	da07      	bge.n	3d910 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3d900:	4621      	mov	r1, r4
   3d902:	481d      	ldr	r0, [pc, #116]	; (3d978 <z_impl_k_thread_suspend+0xc4>)
   3d904:	f7ff fc82 	bl	3d20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3d908:	7b63      	ldrb	r3, [r4, #13]
   3d90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3d90e:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3d910:	4d1a      	ldr	r5, [pc, #104]	; (3d97c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3d912:	7b63      	ldrb	r3, [r4, #13]
   3d914:	68a8      	ldr	r0, [r5, #8]
   3d916:	f043 0310 	orr.w	r3, r3, #16
   3d91a:	7363      	strb	r3, [r4, #13]
   3d91c:	1b03      	subs	r3, r0, r4
   3d91e:	4258      	negs	r0, r3
   3d920:	4158      	adcs	r0, r3
   3d922:	f7ff fced 	bl	3d300 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3d926:	480f      	ldr	r0, [pc, #60]	; (3d964 <z_impl_k_thread_suspend+0xb0>)
   3d928:	f000 fe9a 	bl	3e660 <z_spin_unlock_valid>
   3d92c:	b968      	cbnz	r0, 3d94a <z_impl_k_thread_suspend+0x96>
   3d92e:	2384      	movs	r3, #132	; 0x84
   3d930:	4a0d      	ldr	r2, [pc, #52]	; (3d968 <z_impl_k_thread_suspend+0xb4>)
   3d932:	4913      	ldr	r1, [pc, #76]	; (3d980 <z_impl_k_thread_suspend+0xcc>)
   3d934:	480e      	ldr	r0, [pc, #56]	; (3d970 <z_impl_k_thread_suspend+0xbc>)
   3d936:	f004 f957 	bl	41be8 <printk>
   3d93a:	490a      	ldr	r1, [pc, #40]	; (3d964 <z_impl_k_thread_suspend+0xb0>)
   3d93c:	4811      	ldr	r0, [pc, #68]	; (3d984 <z_impl_k_thread_suspend+0xd0>)
   3d93e:	f004 f953 	bl	41be8 <printk>
   3d942:	2184      	movs	r1, #132	; 0x84
   3d944:	4808      	ldr	r0, [pc, #32]	; (3d968 <z_impl_k_thread_suspend+0xb4>)
   3d946:	f004 fb69 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3d94a:	f386 8811 	msr	BASEPRI, r6
   3d94e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   3d952:	68ab      	ldr	r3, [r5, #8]
   3d954:	42a3      	cmp	r3, r4
   3d956:	d103      	bne.n	3d960 <z_impl_k_thread_suspend+0xac>
}
   3d958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   3d95c:	f007 badb 	b.w	44f16 <z_reschedule_unlocked>
}
   3d960:	bd70      	pop	{r4, r5, r6, pc}
   3d962:	bf00      	nop
   3d964:	20025b28 	.word	0x20025b28
   3d968:	00048d7b 	.word	0x00048d7b
   3d96c:	00048da1 	.word	0x00048da1
   3d970:	0004825b 	.word	0x0004825b
   3d974:	00048db6 	.word	0x00048db6
   3d978:	20025b18 	.word	0x20025b18
   3d97c:	20025af0 	.word	0x20025af0
   3d980:	00048dce 	.word	0x00048dce
   3d984:	00048de5 	.word	0x00048de5

0003d988 <z_thread_single_abort>:
{
   3d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   3d98c:	7b03      	ldrb	r3, [r0, #12]
{
   3d98e:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   3d990:	07dd      	lsls	r5, r3, #31
   3d992:	d50e      	bpl.n	3d9b2 <z_thread_single_abort+0x2a>
   3d994:	4948      	ldr	r1, [pc, #288]	; (3dab8 <z_thread_single_abort+0x130>)
   3d996:	f240 13f5 	movw	r3, #501	; 0x1f5
   3d99a:	4a48      	ldr	r2, [pc, #288]	; (3dabc <z_thread_single_abort+0x134>)
   3d99c:	4848      	ldr	r0, [pc, #288]	; (3dac0 <z_thread_single_abort+0x138>)
   3d99e:	f004 f923 	bl	41be8 <printk>
   3d9a2:	4848      	ldr	r0, [pc, #288]	; (3dac4 <z_thread_single_abort+0x13c>)
   3d9a4:	f004 f920 	bl	41be8 <printk>
   3d9a8:	f240 11f5 	movw	r1, #501	; 0x1f5
   3d9ac:	4843      	ldr	r0, [pc, #268]	; (3dabc <z_thread_single_abort+0x134>)
   3d9ae:	f004 fb35 	bl	4201c <assert_post_action>
	if (thread->fn_abort != NULL) {
   3d9b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   3d9b4:	b103      	cbz	r3, 3d9b8 <z_thread_single_abort+0x30>
		thread->fn_abort();
   3d9b6:	4798      	blx	r3
   3d9b8:	f104 0018 	add.w	r0, r4, #24
   3d9bc:	f001 f8b0 	bl	3eb20 <z_abort_timeout>
	__asm__ volatile(
   3d9c0:	f04f 0320 	mov.w	r3, #32
   3d9c4:	f3ef 8611 	mrs	r6, BASEPRI
   3d9c8:	f383 8811 	msr	BASEPRI, r3
   3d9cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3d9d0:	483d      	ldr	r0, [pc, #244]	; (3dac8 <z_thread_single_abort+0x140>)
   3d9d2:	f000 fe37 	bl	3e644 <z_spin_lock_valid>
   3d9d6:	b968      	cbnz	r0, 3d9f4 <z_thread_single_abort+0x6c>
   3d9d8:	235c      	movs	r3, #92	; 0x5c
   3d9da:	4a3c      	ldr	r2, [pc, #240]	; (3dacc <z_thread_single_abort+0x144>)
   3d9dc:	493c      	ldr	r1, [pc, #240]	; (3dad0 <z_thread_single_abort+0x148>)
   3d9de:	4838      	ldr	r0, [pc, #224]	; (3dac0 <z_thread_single_abort+0x138>)
   3d9e0:	f004 f902 	bl	41be8 <printk>
   3d9e4:	4938      	ldr	r1, [pc, #224]	; (3dac8 <z_thread_single_abort+0x140>)
   3d9e6:	483b      	ldr	r0, [pc, #236]	; (3dad4 <z_thread_single_abort+0x14c>)
   3d9e8:	f004 f8fe 	bl	41be8 <printk>
   3d9ec:	215c      	movs	r1, #92	; 0x5c
   3d9ee:	4837      	ldr	r0, [pc, #220]	; (3dacc <z_thread_single_abort+0x144>)
   3d9f0:	f004 fb14 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3d9f4:	4834      	ldr	r0, [pc, #208]	; (3dac8 <z_thread_single_abort+0x140>)
   3d9f6:	f000 fe43 	bl	3e680 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3d9fa:	7b63      	ldrb	r3, [r4, #13]
   3d9fc:	06d8      	lsls	r0, r3, #27
   3d9fe:	d136      	bne.n	3da6e <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   3da00:	69a2      	ldr	r2, [r4, #24]
   3da02:	2a00      	cmp	r2, #0
   3da04:	d133      	bne.n	3da6e <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   3da06:	0619      	lsls	r1, r3, #24
   3da08:	d507      	bpl.n	3da1a <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   3da0a:	4621      	mov	r1, r4
   3da0c:	4832      	ldr	r0, [pc, #200]	; (3dad8 <z_thread_single_abort+0x150>)
   3da0e:	f7ff fbfd 	bl	3d20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3da12:	7b63      	ldrb	r3, [r4, #13]
   3da14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3da18:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   3da1a:	4b30      	ldr	r3, [pc, #192]	; (3dadc <z_thread_single_abort+0x154>)
   3da1c:	6898      	ldr	r0, [r3, #8]
   3da1e:	1b02      	subs	r2, r0, r4
   3da20:	4250      	negs	r0, r2
   3da22:	4150      	adcs	r0, r2
   3da24:	f7ff fc6c 	bl	3d300 <update_cache>
			waiter->base.pended_on = NULL;
   3da28:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   3da2a:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   3da2c:	f104 0830 	add.w	r8, r4, #48	; 0x30
   3da30:	f043 0308 	orr.w	r3, r3, #8
   3da34:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   3da36:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3da38:	4545      	cmp	r5, r8
   3da3a:	d000      	beq.n	3da3e <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   3da3c:	bb3d      	cbnz	r5, 3da8e <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3da3e:	4822      	ldr	r0, [pc, #136]	; (3dac8 <z_thread_single_abort+0x140>)
   3da40:	f000 fe0e 	bl	3e660 <z_spin_unlock_valid>
   3da44:	b968      	cbnz	r0, 3da62 <z_thread_single_abort+0xda>
   3da46:	2384      	movs	r3, #132	; 0x84
   3da48:	4a20      	ldr	r2, [pc, #128]	; (3dacc <z_thread_single_abort+0x144>)
   3da4a:	4925      	ldr	r1, [pc, #148]	; (3dae0 <z_thread_single_abort+0x158>)
   3da4c:	481c      	ldr	r0, [pc, #112]	; (3dac0 <z_thread_single_abort+0x138>)
   3da4e:	f004 f8cb 	bl	41be8 <printk>
   3da52:	491d      	ldr	r1, [pc, #116]	; (3dac8 <z_thread_single_abort+0x140>)
   3da54:	4823      	ldr	r0, [pc, #140]	; (3dae4 <z_thread_single_abort+0x15c>)
   3da56:	f004 f8c7 	bl	41be8 <printk>
   3da5a:	2184      	movs	r1, #132	; 0x84
   3da5c:	481b      	ldr	r0, [pc, #108]	; (3dacc <z_thread_single_abort+0x144>)
   3da5e:	f004 fadd 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3da62:	f386 8811 	msr	BASEPRI, r6
   3da66:	f3bf 8f6f 	isb	sy
}
   3da6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   3da6e:	079b      	lsls	r3, r3, #30
   3da70:	d5da      	bpl.n	3da28 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   3da72:	f104 0008 	add.w	r0, r4, #8
   3da76:	f7ff fa7f 	bl	3cf78 <pended_on.isra.18>
   3da7a:	4621      	mov	r1, r4
   3da7c:	f7ff fbc6 	bl	3d20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3da80:	7b63      	ldrb	r3, [r4, #13]
   3da82:	f023 0302 	bic.w	r3, r3, #2
   3da86:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   3da88:	2300      	movs	r3, #0
   3da8a:	60a3      	str	r3, [r4, #8]
   3da8c:	e7cc      	b.n	3da28 <z_thread_single_abort+0xa0>
   3da8e:	f105 0018 	add.w	r0, r5, #24
   3da92:	f001 f845 	bl	3eb20 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   3da96:	f105 0008 	add.w	r0, r5, #8
   3da9a:	f7ff fa6d 	bl	3cf78 <pended_on.isra.18>
   3da9e:	4629      	mov	r1, r5
   3daa0:	f7ff fbb4 	bl	3d20c <z_priq_dumb_remove>
   3daa4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   3daa6:	60af      	str	r7, [r5, #8]
   3daa8:	f023 0302 	bic.w	r3, r3, #2
   3daac:	736b      	strb	r3, [r5, #13]
   3daae:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   3dab0:	4628      	mov	r0, r5
   3dab2:	f7ff fcc5 	bl	3d440 <ready_thread>
   3dab6:	e7be      	b.n	3da36 <z_thread_single_abort+0xae>
   3dab8:	0004ee0e 	.word	0x0004ee0e
   3dabc:	0004edb4 	.word	0x0004edb4
   3dac0:	0004825b 	.word	0x0004825b
   3dac4:	0004ee3c 	.word	0x0004ee3c
   3dac8:	20025b28 	.word	0x20025b28
   3dacc:	00048d7b 	.word	0x00048d7b
   3dad0:	00048da1 	.word	0x00048da1
   3dad4:	00048db6 	.word	0x00048db6
   3dad8:	20025b18 	.word	0x20025b18
   3dadc:	20025af0 	.word	0x20025af0
   3dae0:	00048dce 	.word	0x00048dce
   3dae4:	00048de5 	.word	0x00048de5

0003dae8 <unready_thread>:
{
   3dae8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   3daea:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   3daee:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3daf0:	2b00      	cmp	r3, #0
   3daf2:	da07      	bge.n	3db04 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3daf4:	4601      	mov	r1, r0
   3daf6:	4808      	ldr	r0, [pc, #32]	; (3db18 <unready_thread+0x30>)
   3daf8:	f7ff fb88 	bl	3d20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3dafc:	7b63      	ldrb	r3, [r4, #13]
   3dafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3db02:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   3db04:	4b05      	ldr	r3, [pc, #20]	; (3db1c <unready_thread+0x34>)
   3db06:	6898      	ldr	r0, [r3, #8]
   3db08:	1b03      	subs	r3, r0, r4
   3db0a:	4258      	negs	r0, r3
   3db0c:	4158      	adcs	r0, r3
}
   3db0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   3db12:	f7ff bbf5 	b.w	3d300 <update_cache>
   3db16:	bf00      	nop
   3db18:	20025b18 	.word	0x20025b18
   3db1c:	20025af0 	.word	0x20025af0

0003db20 <add_to_waitq_locked>:
{
   3db20:	b538      	push	{r3, r4, r5, lr}
   3db22:	4604      	mov	r4, r0
   3db24:	460d      	mov	r5, r1
	unready_thread(thread);
   3db26:	f7ff ffdf 	bl	3dae8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   3db2a:	7b63      	ldrb	r3, [r4, #13]
   3db2c:	f043 0302 	orr.w	r3, r3, #2
   3db30:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   3db32:	b1f5      	cbz	r5, 3db72 <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3db34:	4b16      	ldr	r3, [pc, #88]	; (3db90 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   3db36:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3db38:	429c      	cmp	r4, r3
   3db3a:	d10b      	bne.n	3db54 <add_to_waitq_locked+0x34>
   3db3c:	4915      	ldr	r1, [pc, #84]	; (3db94 <add_to_waitq_locked+0x74>)
   3db3e:	4816      	ldr	r0, [pc, #88]	; (3db98 <add_to_waitq_locked+0x78>)
   3db40:	f240 3389 	movw	r3, #905	; 0x389
   3db44:	4a15      	ldr	r2, [pc, #84]	; (3db9c <add_to_waitq_locked+0x7c>)
   3db46:	f004 f84f 	bl	41be8 <printk>
   3db4a:	f240 3189 	movw	r1, #905	; 0x389
   3db4e:	4813      	ldr	r0, [pc, #76]	; (3db9c <add_to_waitq_locked+0x7c>)
   3db50:	f004 fa64 	bl	4201c <assert_post_action>
	return list->head == list;
   3db54:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3db56:	429d      	cmp	r5, r3
   3db58:	d012      	beq.n	3db80 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3db5a:	b18b      	cbz	r3, 3db80 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   3db5c:	f994 200e 	ldrsb.w	r2, [r4, #14]
   3db60:	f993 100e 	ldrsb.w	r1, [r3, #14]
   3db64:	4291      	cmp	r1, r2
   3db66:	dd05      	ble.n	3db74 <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   3db68:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3db6a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3db6e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3db70:	605c      	str	r4, [r3, #4]
}
   3db72:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   3db74:	6869      	ldr	r1, [r5, #4]
   3db76:	428b      	cmp	r3, r1
   3db78:	d002      	beq.n	3db80 <add_to_waitq_locked+0x60>
   3db7a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3db7c:	2b00      	cmp	r3, #0
   3db7e:	d1ef      	bne.n	3db60 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   3db80:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3db82:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   3db84:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   3db86:	686b      	ldr	r3, [r5, #4]
   3db88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3db8a:	606c      	str	r4, [r5, #4]
}
   3db8c:	e7f1      	b.n	3db72 <add_to_waitq_locked+0x52>
   3db8e:	bf00      	nop
   3db90:	20024318 	.word	0x20024318
   3db94:	0004eded 	.word	0x0004eded
   3db98:	0004825b 	.word	0x0004825b
   3db9c:	0004edb4 	.word	0x0004edb4

0003dba0 <pend>:
{
   3dba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dba4:	4604      	mov	r4, r0
   3dba6:	4688      	mov	r8, r1
   3dba8:	4616      	mov	r6, r2
   3dbaa:	461f      	mov	r7, r3
	__asm__ volatile(
   3dbac:	f04f 0320 	mov.w	r3, #32
   3dbb0:	f3ef 8511 	mrs	r5, BASEPRI
   3dbb4:	f383 8811 	msr	BASEPRI, r3
   3dbb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dbbc:	481f      	ldr	r0, [pc, #124]	; (3dc3c <pend+0x9c>)
   3dbbe:	f000 fd41 	bl	3e644 <z_spin_lock_valid>
   3dbc2:	b968      	cbnz	r0, 3dbe0 <pend+0x40>
   3dbc4:	235c      	movs	r3, #92	; 0x5c
   3dbc6:	4a1e      	ldr	r2, [pc, #120]	; (3dc40 <pend+0xa0>)
   3dbc8:	491e      	ldr	r1, [pc, #120]	; (3dc44 <pend+0xa4>)
   3dbca:	481f      	ldr	r0, [pc, #124]	; (3dc48 <pend+0xa8>)
   3dbcc:	f004 f80c 	bl	41be8 <printk>
   3dbd0:	491a      	ldr	r1, [pc, #104]	; (3dc3c <pend+0x9c>)
   3dbd2:	481e      	ldr	r0, [pc, #120]	; (3dc4c <pend+0xac>)
   3dbd4:	f004 f808 	bl	41be8 <printk>
   3dbd8:	215c      	movs	r1, #92	; 0x5c
   3dbda:	4819      	ldr	r0, [pc, #100]	; (3dc40 <pend+0xa0>)
   3dbdc:	f004 fa1e 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3dbe0:	4816      	ldr	r0, [pc, #88]	; (3dc3c <pend+0x9c>)
   3dbe2:	f000 fd4d 	bl	3e680 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   3dbe6:	4620      	mov	r0, r4
   3dbe8:	4641      	mov	r1, r8
   3dbea:	f7ff ff99 	bl	3db20 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dbee:	4813      	ldr	r0, [pc, #76]	; (3dc3c <pend+0x9c>)
   3dbf0:	f000 fd36 	bl	3e660 <z_spin_unlock_valid>
   3dbf4:	b968      	cbnz	r0, 3dc12 <pend+0x72>
   3dbf6:	2384      	movs	r3, #132	; 0x84
   3dbf8:	4a11      	ldr	r2, [pc, #68]	; (3dc40 <pend+0xa0>)
   3dbfa:	4915      	ldr	r1, [pc, #84]	; (3dc50 <pend+0xb0>)
   3dbfc:	4812      	ldr	r0, [pc, #72]	; (3dc48 <pend+0xa8>)
   3dbfe:	f003 fff3 	bl	41be8 <printk>
   3dc02:	490e      	ldr	r1, [pc, #56]	; (3dc3c <pend+0x9c>)
   3dc04:	4813      	ldr	r0, [pc, #76]	; (3dc54 <pend+0xb4>)
   3dc06:	f003 ffef 	bl	41be8 <printk>
   3dc0a:	2184      	movs	r1, #132	; 0x84
   3dc0c:	480c      	ldr	r0, [pc, #48]	; (3dc40 <pend+0xa0>)
   3dc0e:	f004 fa05 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3dc12:	f385 8811 	msr	BASEPRI, r5
   3dc16:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3dc1a:	1c7b      	adds	r3, r7, #1
   3dc1c:	bf08      	it	eq
   3dc1e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   3dc22:	d008      	beq.n	3dc36 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3dc24:	4632      	mov	r2, r6
   3dc26:	463b      	mov	r3, r7
   3dc28:	f104 0018 	add.w	r0, r4, #24
   3dc2c:	490a      	ldr	r1, [pc, #40]	; (3dc58 <pend+0xb8>)
}
   3dc2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3dc32:	f000 be9f 	b.w	3e974 <z_add_timeout>
   3dc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3dc3a:	bf00      	nop
   3dc3c:	20025b28 	.word	0x20025b28
   3dc40:	00048d7b 	.word	0x00048d7b
   3dc44:	00048da1 	.word	0x00048da1
   3dc48:	0004825b 	.word	0x0004825b
   3dc4c:	00048db6 	.word	0x00048db6
   3dc50:	00048dce 	.word	0x00048dce
   3dc54:	00048de5 	.word	0x00048de5
   3dc58:	0003d679 	.word	0x0003d679

0003dc5c <z_pend_curr>:
{
   3dc5c:	b538      	push	{r3, r4, r5, lr}
   3dc5e:	4604      	mov	r4, r0
	pending_current = _current;
   3dc60:	4b10      	ldr	r3, [pc, #64]	; (3dca4 <z_pend_curr+0x48>)
{
   3dc62:	460d      	mov	r5, r1
	pending_current = _current;
   3dc64:	6898      	ldr	r0, [r3, #8]
   3dc66:	4b10      	ldr	r3, [pc, #64]	; (3dca8 <z_pend_curr+0x4c>)
{
   3dc68:	4611      	mov	r1, r2
	pending_current = _current;
   3dc6a:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   3dc6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3dc70:	f7ff ff96 	bl	3dba0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dc74:	4620      	mov	r0, r4
   3dc76:	f000 fcf3 	bl	3e660 <z_spin_unlock_valid>
   3dc7a:	b968      	cbnz	r0, 3dc98 <z_pend_curr+0x3c>
   3dc7c:	239b      	movs	r3, #155	; 0x9b
   3dc7e:	4a0b      	ldr	r2, [pc, #44]	; (3dcac <z_pend_curr+0x50>)
   3dc80:	490b      	ldr	r1, [pc, #44]	; (3dcb0 <z_pend_curr+0x54>)
   3dc82:	480c      	ldr	r0, [pc, #48]	; (3dcb4 <z_pend_curr+0x58>)
   3dc84:	f003 ffb0 	bl	41be8 <printk>
   3dc88:	4621      	mov	r1, r4
   3dc8a:	480b      	ldr	r0, [pc, #44]	; (3dcb8 <z_pend_curr+0x5c>)
   3dc8c:	f003 ffac 	bl	41be8 <printk>
   3dc90:	219b      	movs	r1, #155	; 0x9b
   3dc92:	4806      	ldr	r0, [pc, #24]	; (3dcac <z_pend_curr+0x50>)
   3dc94:	f004 f9c2 	bl	4201c <assert_post_action>
   3dc98:	4628      	mov	r0, r5
}
   3dc9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3dc9e:	f7e8 bf1d 	b.w	26adc <arch_swap>
   3dca2:	bf00      	nop
   3dca4:	20025af0 	.word	0x20025af0
   3dca8:	20025b24 	.word	0x20025b24
   3dcac:	00048d7b 	.word	0x00048d7b
   3dcb0:	00048dce 	.word	0x00048dce
   3dcb4:	0004825b 	.word	0x0004825b
   3dcb8:	00048de5 	.word	0x00048de5

0003dcbc <z_set_prio>:
{
   3dcbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3dcbe:	4604      	mov	r4, r0
   3dcc0:	460d      	mov	r5, r1
	__asm__ volatile(
   3dcc2:	f04f 0320 	mov.w	r3, #32
   3dcc6:	f3ef 8611 	mrs	r6, BASEPRI
   3dcca:	f383 8811 	msr	BASEPRI, r3
   3dcce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3dcd2:	4836      	ldr	r0, [pc, #216]	; (3ddac <z_set_prio+0xf0>)
   3dcd4:	f000 fcb6 	bl	3e644 <z_spin_lock_valid>
   3dcd8:	b968      	cbnz	r0, 3dcf6 <z_set_prio+0x3a>
   3dcda:	235c      	movs	r3, #92	; 0x5c
   3dcdc:	4a34      	ldr	r2, [pc, #208]	; (3ddb0 <z_set_prio+0xf4>)
   3dcde:	4935      	ldr	r1, [pc, #212]	; (3ddb4 <z_set_prio+0xf8>)
   3dce0:	4835      	ldr	r0, [pc, #212]	; (3ddb8 <z_set_prio+0xfc>)
   3dce2:	f003 ff81 	bl	41be8 <printk>
   3dce6:	4931      	ldr	r1, [pc, #196]	; (3ddac <z_set_prio+0xf0>)
   3dce8:	4834      	ldr	r0, [pc, #208]	; (3ddbc <z_set_prio+0x100>)
   3dcea:	f003 ff7d 	bl	41be8 <printk>
   3dcee:	215c      	movs	r1, #92	; 0x5c
   3dcf0:	482f      	ldr	r0, [pc, #188]	; (3ddb0 <z_set_prio+0xf4>)
   3dcf2:	f004 f993 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3dcf6:	482d      	ldr	r0, [pc, #180]	; (3ddac <z_set_prio+0xf0>)
   3dcf8:	f000 fcc2 	bl	3e680 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3dcfc:	7b63      	ldrb	r3, [r4, #13]
   3dcfe:	b26d      	sxtb	r5, r5
   3dd00:	06db      	lsls	r3, r3, #27
   3dd02:	d150      	bne.n	3dda6 <z_set_prio+0xea>
		if (need_sched) {
   3dd04:	69a3      	ldr	r3, [r4, #24]
   3dd06:	2b00      	cmp	r3, #0
   3dd08:	d14d      	bne.n	3dda6 <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   3dd0a:	4621      	mov	r1, r4
   3dd0c:	482c      	ldr	r0, [pc, #176]	; (3ddc0 <z_set_prio+0x104>)
   3dd0e:	f7ff fa7d 	bl	3d20c <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3dd12:	4b2c      	ldr	r3, [pc, #176]	; (3ddc4 <z_set_prio+0x108>)
				thread->base.prio = prio;
   3dd14:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3dd16:	429c      	cmp	r4, r3
   3dd18:	d10b      	bne.n	3dd32 <z_set_prio+0x76>
   3dd1a:	492b      	ldr	r1, [pc, #172]	; (3ddc8 <z_set_prio+0x10c>)
   3dd1c:	4826      	ldr	r0, [pc, #152]	; (3ddb8 <z_set_prio+0xfc>)
   3dd1e:	f240 3389 	movw	r3, #905	; 0x389
   3dd22:	4a2a      	ldr	r2, [pc, #168]	; (3ddcc <z_set_prio+0x110>)
   3dd24:	f003 ff60 	bl	41be8 <printk>
   3dd28:	f240 3189 	movw	r1, #905	; 0x389
   3dd2c:	4827      	ldr	r0, [pc, #156]	; (3ddcc <z_set_prio+0x110>)
   3dd2e:	f004 f975 	bl	4201c <assert_post_action>
	return list->head == list;
   3dd32:	4a27      	ldr	r2, [pc, #156]	; (3ddd0 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3dd34:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3dd38:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3dd3c:	428b      	cmp	r3, r1
   3dd3e:	d02c      	beq.n	3dd9a <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3dd40:	b35b      	cbz	r3, 3dd9a <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   3dd42:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3dd46:	f993 700e 	ldrsb.w	r7, [r3, #14]
   3dd4a:	42af      	cmp	r7, r5
   3dd4c:	dd20      	ble.n	3dd90 <z_set_prio+0xd4>
	node->prev = successor->prev;
   3dd4e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3dd50:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3dd54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3dd56:	605c      	str	r4, [r3, #4]
			update_cache(1);
   3dd58:	2001      	movs	r0, #1
   3dd5a:	f7ff fad1 	bl	3d300 <update_cache>
   3dd5e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dd60:	4812      	ldr	r0, [pc, #72]	; (3ddac <z_set_prio+0xf0>)
   3dd62:	f000 fc7d 	bl	3e660 <z_spin_unlock_valid>
   3dd66:	b968      	cbnz	r0, 3dd84 <z_set_prio+0xc8>
   3dd68:	2384      	movs	r3, #132	; 0x84
   3dd6a:	4a11      	ldr	r2, [pc, #68]	; (3ddb0 <z_set_prio+0xf4>)
   3dd6c:	4919      	ldr	r1, [pc, #100]	; (3ddd4 <z_set_prio+0x118>)
   3dd6e:	4812      	ldr	r0, [pc, #72]	; (3ddb8 <z_set_prio+0xfc>)
   3dd70:	f003 ff3a 	bl	41be8 <printk>
   3dd74:	490d      	ldr	r1, [pc, #52]	; (3ddac <z_set_prio+0xf0>)
   3dd76:	4818      	ldr	r0, [pc, #96]	; (3ddd8 <z_set_prio+0x11c>)
   3dd78:	f003 ff36 	bl	41be8 <printk>
   3dd7c:	2184      	movs	r1, #132	; 0x84
   3dd7e:	480c      	ldr	r0, [pc, #48]	; (3ddb0 <z_set_prio+0xf4>)
   3dd80:	f004 f94c 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3dd84:	f386 8811 	msr	BASEPRI, r6
   3dd88:	f3bf 8f6f 	isb	sy
}
   3dd8c:	4620      	mov	r0, r4
   3dd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3dd90:	4298      	cmp	r0, r3
   3dd92:	d002      	beq.n	3dd9a <z_set_prio+0xde>
   3dd94:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3dd96:	2b00      	cmp	r3, #0
   3dd98:	d1d5      	bne.n	3dd46 <z_set_prio+0x8a>
	node->prev = list->tail;
   3dd9a:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3dd9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3dda0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3dda2:	62d4      	str	r4, [r2, #44]	; 0x2c
   3dda4:	e7d8      	b.n	3dd58 <z_set_prio+0x9c>
			thread->base.prio = prio;
   3dda6:	73a5      	strb	r5, [r4, #14]
   3dda8:	2400      	movs	r4, #0
   3ddaa:	e7d9      	b.n	3dd60 <z_set_prio+0xa4>
   3ddac:	20025b28 	.word	0x20025b28
   3ddb0:	00048d7b 	.word	0x00048d7b
   3ddb4:	00048da1 	.word	0x00048da1
   3ddb8:	0004825b 	.word	0x0004825b
   3ddbc:	00048db6 	.word	0x00048db6
   3ddc0:	20025b18 	.word	0x20025b18
   3ddc4:	20024318 	.word	0x20024318
   3ddc8:	0004eded 	.word	0x0004eded
   3ddcc:	0004edb4 	.word	0x0004edb4
   3ddd0:	20025af0 	.word	0x20025af0
   3ddd4:	00048dce 	.word	0x00048dce
   3ddd8:	00048de5 	.word	0x00048de5

0003dddc <z_unpend_first_thread>:
{
   3dddc:	b538      	push	{r3, r4, r5, lr}
   3ddde:	4604      	mov	r4, r0
	__asm__ volatile(
   3dde0:	f04f 0320 	mov.w	r3, #32
   3dde4:	f3ef 8511 	mrs	r5, BASEPRI
   3dde8:	f383 8811 	msr	BASEPRI, r3
   3ddec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ddf0:	4836      	ldr	r0, [pc, #216]	; (3decc <z_unpend_first_thread+0xf0>)
   3ddf2:	f000 fc27 	bl	3e644 <z_spin_lock_valid>
   3ddf6:	b968      	cbnz	r0, 3de14 <z_unpend_first_thread+0x38>
   3ddf8:	235c      	movs	r3, #92	; 0x5c
   3ddfa:	4a35      	ldr	r2, [pc, #212]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3ddfc:	4935      	ldr	r1, [pc, #212]	; (3ded4 <z_unpend_first_thread+0xf8>)
   3ddfe:	4836      	ldr	r0, [pc, #216]	; (3ded8 <z_unpend_first_thread+0xfc>)
   3de00:	f003 fef2 	bl	41be8 <printk>
   3de04:	4931      	ldr	r1, [pc, #196]	; (3decc <z_unpend_first_thread+0xf0>)
   3de06:	4835      	ldr	r0, [pc, #212]	; (3dedc <z_unpend_first_thread+0x100>)
   3de08:	f003 feee 	bl	41be8 <printk>
   3de0c:	215c      	movs	r1, #92	; 0x5c
   3de0e:	4830      	ldr	r0, [pc, #192]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de10:	f004 f904 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3de14:	482d      	ldr	r0, [pc, #180]	; (3decc <z_unpend_first_thread+0xf0>)
   3de16:	f000 fc33 	bl	3e680 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   3de1a:	4620      	mov	r0, r4
   3de1c:	f007 f894 	bl	44f48 <z_priq_dumb_best>
   3de20:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3de22:	482a      	ldr	r0, [pc, #168]	; (3decc <z_unpend_first_thread+0xf0>)
   3de24:	f000 fc1c 	bl	3e660 <z_spin_unlock_valid>
   3de28:	b968      	cbnz	r0, 3de46 <z_unpend_first_thread+0x6a>
   3de2a:	2384      	movs	r3, #132	; 0x84
   3de2c:	4a28      	ldr	r2, [pc, #160]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de2e:	492c      	ldr	r1, [pc, #176]	; (3dee0 <z_unpend_first_thread+0x104>)
   3de30:	4829      	ldr	r0, [pc, #164]	; (3ded8 <z_unpend_first_thread+0xfc>)
   3de32:	f003 fed9 	bl	41be8 <printk>
   3de36:	4925      	ldr	r1, [pc, #148]	; (3decc <z_unpend_first_thread+0xf0>)
   3de38:	482a      	ldr	r0, [pc, #168]	; (3dee4 <z_unpend_first_thread+0x108>)
   3de3a:	f003 fed5 	bl	41be8 <printk>
   3de3e:	2184      	movs	r1, #132	; 0x84
   3de40:	4823      	ldr	r0, [pc, #140]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de42:	f004 f8eb 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3de46:	f385 8811 	msr	BASEPRI, r5
   3de4a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   3de4e:	2c00      	cmp	r4, #0
   3de50:	d039      	beq.n	3dec6 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   3de52:	f04f 0320 	mov.w	r3, #32
   3de56:	f3ef 8511 	mrs	r5, BASEPRI
   3de5a:	f383 8811 	msr	BASEPRI, r3
   3de5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3de62:	481a      	ldr	r0, [pc, #104]	; (3decc <z_unpend_first_thread+0xf0>)
   3de64:	f000 fbee 	bl	3e644 <z_spin_lock_valid>
   3de68:	b968      	cbnz	r0, 3de86 <z_unpend_first_thread+0xaa>
   3de6a:	235c      	movs	r3, #92	; 0x5c
   3de6c:	4a18      	ldr	r2, [pc, #96]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de6e:	4919      	ldr	r1, [pc, #100]	; (3ded4 <z_unpend_first_thread+0xf8>)
   3de70:	4819      	ldr	r0, [pc, #100]	; (3ded8 <z_unpend_first_thread+0xfc>)
   3de72:	f003 feb9 	bl	41be8 <printk>
   3de76:	4915      	ldr	r1, [pc, #84]	; (3decc <z_unpend_first_thread+0xf0>)
   3de78:	4818      	ldr	r0, [pc, #96]	; (3dedc <z_unpend_first_thread+0x100>)
   3de7a:	f003 feb5 	bl	41be8 <printk>
   3de7e:	215c      	movs	r1, #92	; 0x5c
   3de80:	4813      	ldr	r0, [pc, #76]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de82:	f004 f8cb 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3de86:	4811      	ldr	r0, [pc, #68]	; (3decc <z_unpend_first_thread+0xf0>)
   3de88:	f000 fbfa 	bl	3e680 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3de8c:	4620      	mov	r0, r4
   3de8e:	f007 f84c 	bl	44f2a <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3de92:	480e      	ldr	r0, [pc, #56]	; (3decc <z_unpend_first_thread+0xf0>)
   3de94:	f000 fbe4 	bl	3e660 <z_spin_unlock_valid>
   3de98:	b968      	cbnz	r0, 3deb6 <z_unpend_first_thread+0xda>
   3de9a:	2384      	movs	r3, #132	; 0x84
   3de9c:	4a0c      	ldr	r2, [pc, #48]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3de9e:	4910      	ldr	r1, [pc, #64]	; (3dee0 <z_unpend_first_thread+0x104>)
   3dea0:	480d      	ldr	r0, [pc, #52]	; (3ded8 <z_unpend_first_thread+0xfc>)
   3dea2:	f003 fea1 	bl	41be8 <printk>
   3dea6:	4909      	ldr	r1, [pc, #36]	; (3decc <z_unpend_first_thread+0xf0>)
   3dea8:	480e      	ldr	r0, [pc, #56]	; (3dee4 <z_unpend_first_thread+0x108>)
   3deaa:	f003 fe9d 	bl	41be8 <printk>
   3deae:	2184      	movs	r1, #132	; 0x84
   3deb0:	4807      	ldr	r0, [pc, #28]	; (3ded0 <z_unpend_first_thread+0xf4>)
   3deb2:	f004 f8b3 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3deb6:	f385 8811 	msr	BASEPRI, r5
   3deba:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   3debe:	f104 0018 	add.w	r0, r4, #24
   3dec2:	f000 fe2d 	bl	3eb20 <z_abort_timeout>
}
   3dec6:	4620      	mov	r0, r4
   3dec8:	bd38      	pop	{r3, r4, r5, pc}
   3deca:	bf00      	nop
   3decc:	20025b28 	.word	0x20025b28
   3ded0:	00048d7b 	.word	0x00048d7b
   3ded4:	00048da1 	.word	0x00048da1
   3ded8:	0004825b 	.word	0x0004825b
   3dedc:	00048db6 	.word	0x00048db6
   3dee0:	00048dce 	.word	0x00048dce
   3dee4:	00048de5 	.word	0x00048de5

0003dee8 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   3dee8:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   3deea:	4b04      	ldr	r3, [pc, #16]	; (3defc <z_sched_init+0x14>)
   3deec:	4608      	mov	r0, r1
   3deee:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   3def2:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   3def6:	f7ff b86d 	b.w	3cfd4 <k_sched_time_slice_set>
   3defa:	bf00      	nop
   3defc:	20025af0 	.word	0x20025af0

0003df00 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   3df00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3df02:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3df06:	b173      	cbz	r3, 3df26 <z_impl_k_yield+0x26>
   3df08:	4945      	ldr	r1, [pc, #276]	; (3e020 <z_impl_k_yield+0x120>)
   3df0a:	f240 4394 	movw	r3, #1172	; 0x494
   3df0e:	4a45      	ldr	r2, [pc, #276]	; (3e024 <z_impl_k_yield+0x124>)
   3df10:	4845      	ldr	r0, [pc, #276]	; (3e028 <z_impl_k_yield+0x128>)
   3df12:	f003 fe69 	bl	41be8 <printk>
   3df16:	4845      	ldr	r0, [pc, #276]	; (3e02c <z_impl_k_yield+0x12c>)
   3df18:	f003 fe66 	bl	41be8 <printk>
   3df1c:	f240 4194 	movw	r1, #1172	; 0x494
   3df20:	4840      	ldr	r0, [pc, #256]	; (3e024 <z_impl_k_yield+0x124>)
   3df22:	f004 f87b 	bl	4201c <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   3df26:	4c42      	ldr	r4, [pc, #264]	; (3e030 <z_impl_k_yield+0x130>)
   3df28:	4e42      	ldr	r6, [pc, #264]	; (3e034 <z_impl_k_yield+0x134>)
   3df2a:	68a2      	ldr	r2, [r4, #8]
   3df2c:	42b2      	cmp	r2, r6
   3df2e:	d05f      	beq.n	3dff0 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   3df30:	f04f 0320 	mov.w	r3, #32
   3df34:	f3ef 8711 	mrs	r7, BASEPRI
   3df38:	f383 8811 	msr	BASEPRI, r3
   3df3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3df40:	483d      	ldr	r0, [pc, #244]	; (3e038 <z_impl_k_yield+0x138>)
   3df42:	f000 fb7f 	bl	3e644 <z_spin_lock_valid>
   3df46:	b968      	cbnz	r0, 3df64 <z_impl_k_yield+0x64>
   3df48:	235c      	movs	r3, #92	; 0x5c
   3df4a:	4a3c      	ldr	r2, [pc, #240]	; (3e03c <z_impl_k_yield+0x13c>)
   3df4c:	493c      	ldr	r1, [pc, #240]	; (3e040 <z_impl_k_yield+0x140>)
   3df4e:	4836      	ldr	r0, [pc, #216]	; (3e028 <z_impl_k_yield+0x128>)
   3df50:	f003 fe4a 	bl	41be8 <printk>
   3df54:	4938      	ldr	r1, [pc, #224]	; (3e038 <z_impl_k_yield+0x138>)
   3df56:	483b      	ldr	r0, [pc, #236]	; (3e044 <z_impl_k_yield+0x144>)
   3df58:	f003 fe46 	bl	41be8 <printk>
   3df5c:	215c      	movs	r1, #92	; 0x5c
   3df5e:	4837      	ldr	r0, [pc, #220]	; (3e03c <z_impl_k_yield+0x13c>)
   3df60:	f004 f85c 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3df64:	4834      	ldr	r0, [pc, #208]	; (3e038 <z_impl_k_yield+0x138>)
   3df66:	f000 fb8b 	bl	3e680 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   3df6a:	68a1      	ldr	r1, [r4, #8]
   3df6c:	4836      	ldr	r0, [pc, #216]	; (3e048 <z_impl_k_yield+0x148>)
   3df6e:	f7ff f94d 	bl	3d20c <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3df72:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3df74:	42b5      	cmp	r5, r6
   3df76:	d10b      	bne.n	3df90 <z_impl_k_yield+0x90>
   3df78:	4934      	ldr	r1, [pc, #208]	; (3e04c <z_impl_k_yield+0x14c>)
   3df7a:	482b      	ldr	r0, [pc, #172]	; (3e028 <z_impl_k_yield+0x128>)
   3df7c:	f240 3389 	movw	r3, #905	; 0x389
   3df80:	4a28      	ldr	r2, [pc, #160]	; (3e024 <z_impl_k_yield+0x124>)
   3df82:	f003 fe31 	bl	41be8 <printk>
   3df86:	f240 3189 	movw	r1, #905	; 0x389
   3df8a:	4826      	ldr	r0, [pc, #152]	; (3e024 <z_impl_k_yield+0x124>)
   3df8c:	f004 f846 	bl	4201c <assert_post_action>
	return list->head == list;
   3df90:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3df94:	4a2c      	ldr	r2, [pc, #176]	; (3e048 <z_impl_k_yield+0x148>)
   3df96:	4293      	cmp	r3, r2
   3df98:	d03b      	beq.n	3e012 <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3df9a:	2b00      	cmp	r3, #0
   3df9c:	d039      	beq.n	3e012 <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   3df9e:	f995 000e 	ldrsb.w	r0, [r5, #14]
   3dfa2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3dfa6:	4286      	cmp	r6, r0
   3dfa8:	dd2e      	ble.n	3e008 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   3dfaa:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3dfac:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3dfb0:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3dfb2:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   3dfb4:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   3dfb6:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   3dfb8:	7b53      	ldrb	r3, [r2, #13]
   3dfba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3dfbe:	7353      	strb	r3, [r2, #13]
   3dfc0:	f7ff f99e 	bl	3d300 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3dfc4:	481c      	ldr	r0, [pc, #112]	; (3e038 <z_impl_k_yield+0x138>)
   3dfc6:	f000 fb4b 	bl	3e660 <z_spin_unlock_valid>
   3dfca:	b968      	cbnz	r0, 3dfe8 <z_impl_k_yield+0xe8>
   3dfcc:	2384      	movs	r3, #132	; 0x84
   3dfce:	4a1b      	ldr	r2, [pc, #108]	; (3e03c <z_impl_k_yield+0x13c>)
   3dfd0:	491f      	ldr	r1, [pc, #124]	; (3e050 <z_impl_k_yield+0x150>)
   3dfd2:	4815      	ldr	r0, [pc, #84]	; (3e028 <z_impl_k_yield+0x128>)
   3dfd4:	f003 fe08 	bl	41be8 <printk>
   3dfd8:	4917      	ldr	r1, [pc, #92]	; (3e038 <z_impl_k_yield+0x138>)
   3dfda:	481e      	ldr	r0, [pc, #120]	; (3e054 <z_impl_k_yield+0x154>)
   3dfdc:	f003 fe04 	bl	41be8 <printk>
   3dfe0:	2184      	movs	r1, #132	; 0x84
   3dfe2:	4816      	ldr	r0, [pc, #88]	; (3e03c <z_impl_k_yield+0x13c>)
   3dfe4:	f004 f81a 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3dfe8:	f387 8811 	msr	BASEPRI, r7
   3dfec:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3dff0:	f04f 0320 	mov.w	r3, #32
   3dff4:	f3ef 8011 	mrs	r0, BASEPRI
   3dff8:	f383 8811 	msr	BASEPRI, r3
   3dffc:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   3e000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   3e004:	f7e8 bd6a 	b.w	26adc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   3e008:	4299      	cmp	r1, r3
   3e00a:	d002      	beq.n	3e012 <z_impl_k_yield+0x112>
   3e00c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3e00e:	2b00      	cmp	r3, #0
   3e010:	d1c7      	bne.n	3dfa2 <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   3e012:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   3e016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3e018:	601d      	str	r5, [r3, #0]
	list->tail = node;
   3e01a:	62e5      	str	r5, [r4, #44]	; 0x2c
   3e01c:	e7ca      	b.n	3dfb4 <z_impl_k_yield+0xb4>
   3e01e:	bf00      	nop
   3e020:	0004ecdb 	.word	0x0004ecdb
   3e024:	0004edb4 	.word	0x0004edb4
   3e028:	0004825b 	.word	0x0004825b
   3e02c:	00049477 	.word	0x00049477
   3e030:	20025af0 	.word	0x20025af0
   3e034:	20024318 	.word	0x20024318
   3e038:	20025b28 	.word	0x20025b28
   3e03c:	00048d7b 	.word	0x00048d7b
   3e040:	00048da1 	.word	0x00048da1
   3e044:	00048db6 	.word	0x00048db6
   3e048:	20025b18 	.word	0x20025b18
   3e04c:	0004eded 	.word	0x0004eded
   3e050:	00048dce 	.word	0x00048dce
   3e054:	00048de5 	.word	0x00048de5

0003e058 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   3e058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e05c:	4604      	mov	r4, r0
   3e05e:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   3e062:	b173      	cbz	r3, 3e082 <z_tick_sleep+0x2a>
   3e064:	493b      	ldr	r1, [pc, #236]	; (3e154 <z_tick_sleep+0xfc>)
   3e066:	f240 43b2 	movw	r3, #1202	; 0x4b2
   3e06a:	4a3b      	ldr	r2, [pc, #236]	; (3e158 <z_tick_sleep+0x100>)
   3e06c:	483b      	ldr	r0, [pc, #236]	; (3e15c <z_tick_sleep+0x104>)
   3e06e:	f003 fdbb 	bl	41be8 <printk>
   3e072:	483b      	ldr	r0, [pc, #236]	; (3e160 <z_tick_sleep+0x108>)
   3e074:	f003 fdb8 	bl	41be8 <printk>
   3e078:	f240 41b2 	movw	r1, #1202	; 0x4b2
   3e07c:	4836      	ldr	r0, [pc, #216]	; (3e158 <z_tick_sleep+0x100>)
   3e07e:	f003 ffcd 	bl	4201c <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   3e082:	b924      	cbnz	r4, 3e08e <z_tick_sleep+0x36>
	z_impl_k_yield();
   3e084:	f7ff ff3c 	bl	3df00 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   3e088:	4620      	mov	r0, r4
   3e08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   3e08e:	f006 fff2 	bl	45076 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   3e092:	4626      	mov	r6, r4
   3e094:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   3e096:	4404      	add	r4, r0
   3e098:	f04f 0320 	mov.w	r3, #32
   3e09c:	f3ef 8811 	mrs	r8, BASEPRI
   3e0a0:	f383 8811 	msr	BASEPRI, r3
   3e0a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e0a8:	482e      	ldr	r0, [pc, #184]	; (3e164 <z_tick_sleep+0x10c>)
   3e0aa:	f000 facb 	bl	3e644 <z_spin_lock_valid>
   3e0ae:	b968      	cbnz	r0, 3e0cc <z_tick_sleep+0x74>
   3e0b0:	235c      	movs	r3, #92	; 0x5c
   3e0b2:	4a2d      	ldr	r2, [pc, #180]	; (3e168 <z_tick_sleep+0x110>)
   3e0b4:	492d      	ldr	r1, [pc, #180]	; (3e16c <z_tick_sleep+0x114>)
   3e0b6:	4829      	ldr	r0, [pc, #164]	; (3e15c <z_tick_sleep+0x104>)
   3e0b8:	f003 fd96 	bl	41be8 <printk>
   3e0bc:	4929      	ldr	r1, [pc, #164]	; (3e164 <z_tick_sleep+0x10c>)
   3e0be:	482c      	ldr	r0, [pc, #176]	; (3e170 <z_tick_sleep+0x118>)
   3e0c0:	f003 fd92 	bl	41be8 <printk>
   3e0c4:	215c      	movs	r1, #92	; 0x5c
   3e0c6:	4828      	ldr	r0, [pc, #160]	; (3e168 <z_tick_sleep+0x110>)
   3e0c8:	f003 ffa8 	bl	4201c <assert_post_action>
	pending_current = _current;
   3e0cc:	4d29      	ldr	r5, [pc, #164]	; (3e174 <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   3e0ce:	4825      	ldr	r0, [pc, #148]	; (3e164 <z_tick_sleep+0x10c>)
   3e0d0:	f000 fad6 	bl	3e680 <z_spin_lock_set_owner>
   3e0d4:	68a8      	ldr	r0, [r5, #8]
   3e0d6:	4b28      	ldr	r3, [pc, #160]	; (3e178 <z_tick_sleep+0x120>)
   3e0d8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   3e0da:	f7ff fd05 	bl	3dae8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   3e0de:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   3e0e0:	4632      	mov	r2, r6
   3e0e2:	463b      	mov	r3, r7
   3e0e4:	3018      	adds	r0, #24
   3e0e6:	4925      	ldr	r1, [pc, #148]	; (3e17c <z_tick_sleep+0x124>)
   3e0e8:	f000 fc44 	bl	3e974 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3e0ec:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e0ee:	481d      	ldr	r0, [pc, #116]	; (3e164 <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3e0f0:	7b53      	ldrb	r3, [r2, #13]
   3e0f2:	f043 0310 	orr.w	r3, r3, #16
   3e0f6:	7353      	strb	r3, [r2, #13]
   3e0f8:	f000 fab2 	bl	3e660 <z_spin_unlock_valid>
   3e0fc:	b968      	cbnz	r0, 3e11a <z_tick_sleep+0xc2>
   3e0fe:	239b      	movs	r3, #155	; 0x9b
   3e100:	4a19      	ldr	r2, [pc, #100]	; (3e168 <z_tick_sleep+0x110>)
   3e102:	491f      	ldr	r1, [pc, #124]	; (3e180 <z_tick_sleep+0x128>)
   3e104:	4815      	ldr	r0, [pc, #84]	; (3e15c <z_tick_sleep+0x104>)
   3e106:	f003 fd6f 	bl	41be8 <printk>
   3e10a:	4916      	ldr	r1, [pc, #88]	; (3e164 <z_tick_sleep+0x10c>)
   3e10c:	481d      	ldr	r0, [pc, #116]	; (3e184 <z_tick_sleep+0x12c>)
   3e10e:	f003 fd6b 	bl	41be8 <printk>
   3e112:	219b      	movs	r1, #155	; 0x9b
   3e114:	4814      	ldr	r0, [pc, #80]	; (3e168 <z_tick_sleep+0x110>)
   3e116:	f003 ff81 	bl	4201c <assert_post_action>
   3e11a:	4640      	mov	r0, r8
   3e11c:	f7e8 fcde 	bl	26adc <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   3e120:	68ab      	ldr	r3, [r5, #8]
   3e122:	7b5b      	ldrb	r3, [r3, #13]
   3e124:	06db      	lsls	r3, r3, #27
   3e126:	d50e      	bpl.n	3e146 <z_tick_sleep+0xee>
   3e128:	4917      	ldr	r1, [pc, #92]	; (3e188 <z_tick_sleep+0x130>)
   3e12a:	f240 43d2 	movw	r3, #1234	; 0x4d2
   3e12e:	4a0a      	ldr	r2, [pc, #40]	; (3e158 <z_tick_sleep+0x100>)
   3e130:	480a      	ldr	r0, [pc, #40]	; (3e15c <z_tick_sleep+0x104>)
   3e132:	f003 fd59 	bl	41be8 <printk>
   3e136:	480a      	ldr	r0, [pc, #40]	; (3e160 <z_tick_sleep+0x108>)
   3e138:	f003 fd56 	bl	41be8 <printk>
   3e13c:	f240 41d2 	movw	r1, #1234	; 0x4d2
   3e140:	4805      	ldr	r0, [pc, #20]	; (3e158 <z_tick_sleep+0x100>)
   3e142:	f003 ff6b 	bl	4201c <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   3e146:	f006 ff96 	bl	45076 <z_tick_get_32>
   3e14a:	1a24      	subs	r4, r4, r0
   3e14c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   3e150:	e79a      	b.n	3e088 <z_tick_sleep+0x30>
   3e152:	bf00      	nop
   3e154:	0004ecdb 	.word	0x0004ecdb
   3e158:	0004edb4 	.word	0x0004edb4
   3e15c:	0004825b 	.word	0x0004825b
   3e160:	00049477 	.word	0x00049477
   3e164:	20025b28 	.word	0x20025b28
   3e168:	00048d7b 	.word	0x00048d7b
   3e16c:	00048da1 	.word	0x00048da1
   3e170:	00048db6 	.word	0x00048db6
   3e174:	20025af0 	.word	0x20025af0
   3e178:	20025b24 	.word	0x20025b24
   3e17c:	0003d679 	.word	0x0003d679
   3e180:	00048dce 	.word	0x00048dce
   3e184:	00048de5 	.word	0x00048de5
   3e188:	0004ee57 	.word	0x0004ee57

0003e18c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   3e18c:	b538      	push	{r3, r4, r5, lr}
   3e18e:	4604      	mov	r4, r0
   3e190:	460d      	mov	r5, r1
   3e192:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   3e196:	b173      	cbz	r3, 3e1b6 <z_impl_k_sleep+0x2a>
   3e198:	4912      	ldr	r1, [pc, #72]	; (3e1e4 <z_impl_k_sleep+0x58>)
   3e19a:	f240 43e1 	movw	r3, #1249	; 0x4e1
   3e19e:	4a12      	ldr	r2, [pc, #72]	; (3e1e8 <z_impl_k_sleep+0x5c>)
   3e1a0:	4812      	ldr	r0, [pc, #72]	; (3e1ec <z_impl_k_sleep+0x60>)
   3e1a2:	f003 fd21 	bl	41be8 <printk>
   3e1a6:	4812      	ldr	r0, [pc, #72]	; (3e1f0 <z_impl_k_sleep+0x64>)
   3e1a8:	f003 fd1e 	bl	41be8 <printk>
   3e1ac:	f240 41e1 	movw	r1, #1249	; 0x4e1
   3e1b0:	480d      	ldr	r0, [pc, #52]	; (3e1e8 <z_impl_k_sleep+0x5c>)
   3e1b2:	f003 ff33 	bl	4201c <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3e1b6:	3501      	adds	r5, #1
   3e1b8:	bf08      	it	eq
   3e1ba:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   3e1be:	d106      	bne.n	3e1ce <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   3e1c0:	4b0c      	ldr	r3, [pc, #48]	; (3e1f4 <z_impl_k_sleep+0x68>)
   3e1c2:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3e1c4:	f7ff fb76 	bl	3d8b4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   3e1c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   3e1cc:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   3e1ce:	4620      	mov	r0, r4
   3e1d0:	f7ff ff42 	bl	3e058 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   3e1d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3e1d8:	fb80 3403 	smull	r3, r4, r0, r3
   3e1dc:	0bd8      	lsrs	r0, r3, #15
   3e1de:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   3e1e2:	e7f3      	b.n	3e1cc <z_impl_k_sleep+0x40>
   3e1e4:	0004ecdb 	.word	0x0004ecdb
   3e1e8:	0004edb4 	.word	0x0004edb4
   3e1ec:	0004825b 	.word	0x0004825b
   3e1f0:	00049477 	.word	0x00049477
   3e1f4:	20025af0 	.word	0x20025af0

0003e1f8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   3e1f8:	4b01      	ldr	r3, [pc, #4]	; (3e200 <z_impl_k_current_get+0x8>)
   3e1fa:	6898      	ldr	r0, [r3, #8]
   3e1fc:	4770      	bx	lr
   3e1fe:	bf00      	nop
   3e200:	20025af0 	.word	0x20025af0

0003e204 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   3e204:	b538      	push	{r3, r4, r5, lr}
   3e206:	4604      	mov	r4, r0
   3e208:	f04f 0320 	mov.w	r3, #32
   3e20c:	f3ef 8511 	mrs	r5, BASEPRI
   3e210:	f383 8811 	msr	BASEPRI, r3
   3e214:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e218:	4817      	ldr	r0, [pc, #92]	; (3e278 <z_impl_k_sem_give+0x74>)
   3e21a:	f000 fa13 	bl	3e644 <z_spin_lock_valid>
   3e21e:	b968      	cbnz	r0, 3e23c <z_impl_k_sem_give+0x38>
   3e220:	235c      	movs	r3, #92	; 0x5c
   3e222:	4a16      	ldr	r2, [pc, #88]	; (3e27c <z_impl_k_sem_give+0x78>)
   3e224:	4916      	ldr	r1, [pc, #88]	; (3e280 <z_impl_k_sem_give+0x7c>)
   3e226:	4817      	ldr	r0, [pc, #92]	; (3e284 <z_impl_k_sem_give+0x80>)
   3e228:	f003 fcde 	bl	41be8 <printk>
   3e22c:	4912      	ldr	r1, [pc, #72]	; (3e278 <z_impl_k_sem_give+0x74>)
   3e22e:	4816      	ldr	r0, [pc, #88]	; (3e288 <z_impl_k_sem_give+0x84>)
   3e230:	f003 fcda 	bl	41be8 <printk>
   3e234:	215c      	movs	r1, #92	; 0x5c
   3e236:	4811      	ldr	r0, [pc, #68]	; (3e27c <z_impl_k_sem_give+0x78>)
   3e238:	f003 fef0 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3e23c:	480e      	ldr	r0, [pc, #56]	; (3e278 <z_impl_k_sem_give+0x74>)
   3e23e:	f000 fa1f 	bl	3e680 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   3e242:	4620      	mov	r0, r4
   3e244:	f7ff fdca 	bl	3dddc <z_unpend_first_thread>

	if (thread != NULL) {
   3e248:	b148      	cbz	r0, 3e25e <z_impl_k_sem_give+0x5a>
   3e24a:	2200      	movs	r2, #0
   3e24c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   3e24e:	f7ff f941 	bl	3d4d4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   3e252:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   3e254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3e258:	4807      	ldr	r0, [pc, #28]	; (3e278 <z_impl_k_sem_give+0x74>)
   3e25a:	f7fe bf1b 	b.w	3d094 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3e25e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   3e262:	429a      	cmp	r2, r3
   3e264:	bf18      	it	ne
   3e266:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3e268:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3e26a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3e26c:	f104 0010 	add.w	r0, r4, #16
   3e270:	f006 ff79 	bl	45166 <z_handle_obj_poll_events>
   3e274:	e7ed      	b.n	3e252 <z_impl_k_sem_give+0x4e>
   3e276:	bf00      	nop
   3e278:	20025b34 	.word	0x20025b34
   3e27c:	00048d7b 	.word	0x00048d7b
   3e280:	00048da1 	.word	0x00048da1
   3e284:	0004825b 	.word	0x0004825b
   3e288:	00048db6 	.word	0x00048db6

0003e28c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   3e28c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e28e:	4605      	mov	r5, r0
   3e290:	4616      	mov	r6, r2
   3e292:	461f      	mov	r7, r3
   3e294:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   3e298:	b17b      	cbz	r3, 3e2ba <z_impl_k_sem_take+0x2e>
   3e29a:	ea56 0307 	orrs.w	r3, r6, r7
   3e29e:	d00c      	beq.n	3e2ba <z_impl_k_sem_take+0x2e>
   3e2a0:	4935      	ldr	r1, [pc, #212]	; (3e378 <z_impl_k_sem_take+0xec>)
   3e2a2:	238d      	movs	r3, #141	; 0x8d
   3e2a4:	4a35      	ldr	r2, [pc, #212]	; (3e37c <z_impl_k_sem_take+0xf0>)
   3e2a6:	4836      	ldr	r0, [pc, #216]	; (3e380 <z_impl_k_sem_take+0xf4>)
   3e2a8:	f003 fc9e 	bl	41be8 <printk>
   3e2ac:	4835      	ldr	r0, [pc, #212]	; (3e384 <z_impl_k_sem_take+0xf8>)
   3e2ae:	f003 fc9b 	bl	41be8 <printk>
   3e2b2:	218d      	movs	r1, #141	; 0x8d
   3e2b4:	4831      	ldr	r0, [pc, #196]	; (3e37c <z_impl_k_sem_take+0xf0>)
   3e2b6:	f003 feb1 	bl	4201c <assert_post_action>
   3e2ba:	f04f 0320 	mov.w	r3, #32
   3e2be:	f3ef 8411 	mrs	r4, BASEPRI
   3e2c2:	f383 8811 	msr	BASEPRI, r3
   3e2c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e2ca:	482f      	ldr	r0, [pc, #188]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e2cc:	f000 f9ba 	bl	3e644 <z_spin_lock_valid>
   3e2d0:	b968      	cbnz	r0, 3e2ee <z_impl_k_sem_take+0x62>
   3e2d2:	235c      	movs	r3, #92	; 0x5c
   3e2d4:	4a2d      	ldr	r2, [pc, #180]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e2d6:	492e      	ldr	r1, [pc, #184]	; (3e390 <z_impl_k_sem_take+0x104>)
   3e2d8:	4829      	ldr	r0, [pc, #164]	; (3e380 <z_impl_k_sem_take+0xf4>)
   3e2da:	f003 fc85 	bl	41be8 <printk>
   3e2de:	492a      	ldr	r1, [pc, #168]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e2e0:	482c      	ldr	r0, [pc, #176]	; (3e394 <z_impl_k_sem_take+0x108>)
   3e2e2:	f003 fc81 	bl	41be8 <printk>
   3e2e6:	215c      	movs	r1, #92	; 0x5c
   3e2e8:	4828      	ldr	r0, [pc, #160]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e2ea:	f003 fe97 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3e2ee:	4826      	ldr	r0, [pc, #152]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e2f0:	f000 f9c6 	bl	3e680 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   3e2f4:	68ab      	ldr	r3, [r5, #8]
   3e2f6:	b1d3      	cbz	r3, 3e32e <z_impl_k_sem_take+0xa2>
		sem->count--;
   3e2f8:	3b01      	subs	r3, #1
   3e2fa:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e2fc:	4822      	ldr	r0, [pc, #136]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e2fe:	f000 f9af 	bl	3e660 <z_spin_unlock_valid>
   3e302:	b968      	cbnz	r0, 3e320 <z_impl_k_sem_take+0x94>
   3e304:	2384      	movs	r3, #132	; 0x84
   3e306:	4a21      	ldr	r2, [pc, #132]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e308:	4923      	ldr	r1, [pc, #140]	; (3e398 <z_impl_k_sem_take+0x10c>)
   3e30a:	481d      	ldr	r0, [pc, #116]	; (3e380 <z_impl_k_sem_take+0xf4>)
   3e30c:	f003 fc6c 	bl	41be8 <printk>
   3e310:	491d      	ldr	r1, [pc, #116]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e312:	4822      	ldr	r0, [pc, #136]	; (3e39c <z_impl_k_sem_take+0x110>)
   3e314:	f003 fc68 	bl	41be8 <printk>
   3e318:	2184      	movs	r1, #132	; 0x84
   3e31a:	481c      	ldr	r0, [pc, #112]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e31c:	f003 fe7e 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3e320:	f384 8811 	msr	BASEPRI, r4
   3e324:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   3e328:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   3e32a:	b003      	add	sp, #12
   3e32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3e32e:	ea56 0307 	orrs.w	r3, r6, r7
   3e332:	d118      	bne.n	3e366 <z_impl_k_sem_take+0xda>
   3e334:	4814      	ldr	r0, [pc, #80]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e336:	f000 f993 	bl	3e660 <z_spin_unlock_valid>
   3e33a:	b968      	cbnz	r0, 3e358 <z_impl_k_sem_take+0xcc>
   3e33c:	2384      	movs	r3, #132	; 0x84
   3e33e:	4a13      	ldr	r2, [pc, #76]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e340:	4915      	ldr	r1, [pc, #84]	; (3e398 <z_impl_k_sem_take+0x10c>)
   3e342:	480f      	ldr	r0, [pc, #60]	; (3e380 <z_impl_k_sem_take+0xf4>)
   3e344:	f003 fc50 	bl	41be8 <printk>
   3e348:	490f      	ldr	r1, [pc, #60]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e34a:	4814      	ldr	r0, [pc, #80]	; (3e39c <z_impl_k_sem_take+0x110>)
   3e34c:	f003 fc4c 	bl	41be8 <printk>
   3e350:	2184      	movs	r1, #132	; 0x84
   3e352:	480e      	ldr	r0, [pc, #56]	; (3e38c <z_impl_k_sem_take+0x100>)
   3e354:	f003 fe62 	bl	4201c <assert_post_action>
   3e358:	f384 8811 	msr	BASEPRI, r4
   3e35c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   3e360:	f06f 000f 	mvn.w	r0, #15
		goto out;
   3e364:	e7e1      	b.n	3e32a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   3e366:	e9cd 6700 	strd	r6, r7, [sp]
   3e36a:	462a      	mov	r2, r5
   3e36c:	4621      	mov	r1, r4
   3e36e:	4806      	ldr	r0, [pc, #24]	; (3e388 <z_impl_k_sem_take+0xfc>)
   3e370:	f7ff fc74 	bl	3dc5c <z_pend_curr>
	return ret;
   3e374:	e7d9      	b.n	3e32a <z_impl_k_sem_take+0x9e>
   3e376:	bf00      	nop
   3e378:	0004eeb7 	.word	0x0004eeb7
   3e37c:	0004ee97 	.word	0x0004ee97
   3e380:	0004825b 	.word	0x0004825b
   3e384:	00049477 	.word	0x00049477
   3e388:	20025b34 	.word	0x20025b34
   3e38c:	00048d7b 	.word	0x00048d7b
   3e390:	00048da1 	.word	0x00048da1
   3e394:	00048db6 	.word	0x00048db6
   3e398:	00048dce 	.word	0x00048dce
   3e39c:	00048de5 	.word	0x00048de5

0003e3a0 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   3e3a0:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   3e3a2:	4c08      	ldr	r4, [pc, #32]	; (3e3c4 <k_sys_work_q_init+0x24>)
   3e3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e3a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3e3ac:	4906      	ldr	r1, [pc, #24]	; (3e3c8 <k_sys_work_q_init+0x28>)
   3e3ae:	4620      	mov	r0, r4
   3e3b0:	f000 f96e 	bl	3e690 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   3e3b4:	4905      	ldr	r1, [pc, #20]	; (3e3cc <k_sys_work_q_init+0x2c>)
   3e3b6:	f104 0020 	add.w	r0, r4, #32
   3e3ba:	f006 fdf3 	bl	44fa4 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3e3be:	2000      	movs	r0, #0
   3e3c0:	bd10      	pop	{r4, pc}
   3e3c2:	bf00      	nop
   3e3c4:	200244a8 	.word	0x200244a8
   3e3c8:	20031bd0 	.word	0x20031bd0
   3e3cc:	0004ef04 	.word	0x0004ef04

0003e3d0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   3e3d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   3e3d4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3e3d6:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   3e3d8:	2d0f      	cmp	r5, #15
{
   3e3da:	460f      	mov	r7, r1
   3e3dc:	4616      	mov	r6, r2
   3e3de:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   3e3e0:	d12d      	bne.n	3e43e <z_setup_new_thread+0x6e>
   3e3e2:	4b23      	ldr	r3, [pc, #140]	; (3e470 <z_setup_new_thread+0xa0>)
   3e3e4:	4598      	cmp	r8, r3
   3e3e6:	d12e      	bne.n	3e446 <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   3e3e8:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   3e3ec:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   3e3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   3e3f2:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   3e3f4:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3e3f6:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   3e3f8:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   3e3fa:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e3fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3e3fe:	1df2      	adds	r2, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e400:	9302      	str	r3, [sp, #8]
   3e402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3e404:	f022 0207 	bic.w	r2, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e408:	9301      	str	r3, [sp, #4]
   3e40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   3e40c:	18be      	adds	r6, r7, r2
	new_thread->stack_info.size = stack_buf_size;
   3e40e:	e9c4 721a 	strd	r7, r2, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e412:	9300      	str	r3, [sp, #0]
	thread_base->sched_locked = 0U;
   3e414:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e416:	4643      	mov	r3, r8
	node->prev = NULL;
   3e418:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   3e41c:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3e41e:	4632      	mov	r2, r6
   3e420:	4639      	mov	r1, r7
   3e422:	4620      	mov	r0, r4
   3e424:	f7e8 fc3a 	bl	26c9c <arch_new_thread>
	if (!_current) {
   3e428:	4b12      	ldr	r3, [pc, #72]	; (3e474 <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   3e42a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   3e42e:	689b      	ldr	r3, [r3, #8]
   3e430:	b103      	cbz	r3, 3e434 <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   3e432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   3e434:	4630      	mov	r0, r6
   3e436:	6763      	str	r3, [r4, #116]	; 0x74
   3e438:	b004      	add	sp, #16
   3e43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   3e43e:	f105 0310 	add.w	r3, r5, #16
   3e442:	2b1e      	cmp	r3, #30
   3e444:	d9d0      	bls.n	3e3e8 <z_setup_new_thread+0x18>
   3e446:	f240 2313 	movw	r3, #531	; 0x213
   3e44a:	4a0b      	ldr	r2, [pc, #44]	; (3e478 <z_setup_new_thread+0xa8>)
   3e44c:	490b      	ldr	r1, [pc, #44]	; (3e47c <z_setup_new_thread+0xac>)
   3e44e:	480c      	ldr	r0, [pc, #48]	; (3e480 <z_setup_new_thread+0xb0>)
   3e450:	f003 fbca 	bl	41be8 <printk>
   3e454:	4629      	mov	r1, r5
   3e456:	f06f 030f 	mvn.w	r3, #15
   3e45a:	220e      	movs	r2, #14
   3e45c:	4809      	ldr	r0, [pc, #36]	; (3e484 <z_setup_new_thread+0xb4>)
   3e45e:	f003 fbc3 	bl	41be8 <printk>
   3e462:	f240 2113 	movw	r1, #531	; 0x213
   3e466:	4804      	ldr	r0, [pc, #16]	; (3e478 <z_setup_new_thread+0xa8>)
   3e468:	f003 fdd8 	bl	4201c <assert_post_action>
   3e46c:	e7bc      	b.n	3e3e8 <z_setup_new_thread+0x18>
   3e46e:	bf00      	nop
   3e470:	0003c2b1 	.word	0x0003c2b1
   3e474:	20025af0 	.word	0x20025af0
   3e478:	0004ef5f 	.word	0x0004ef5f
   3e47c:	0004ef82 	.word	0x0004ef82
   3e480:	0004825b 	.word	0x0004825b
   3e484:	0004f002 	.word	0x0004f002

0003e488 <z_impl_k_thread_create>:
{
   3e488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e48c:	b087      	sub	sp, #28
   3e48e:	4604      	mov	r4, r0
   3e490:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   3e494:	460d      	mov	r5, r1
   3e496:	4690      	mov	r8, r2
   3e498:	4699      	mov	r9, r3
   3e49a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   3e49e:	b173      	cbz	r3, 3e4be <z_impl_k_thread_create+0x36>
   3e4a0:	491b      	ldr	r1, [pc, #108]	; (3e510 <z_impl_k_thread_create+0x88>)
   3e4a2:	f240 2373 	movw	r3, #627	; 0x273
   3e4a6:	4a1b      	ldr	r2, [pc, #108]	; (3e514 <z_impl_k_thread_create+0x8c>)
   3e4a8:	481b      	ldr	r0, [pc, #108]	; (3e518 <z_impl_k_thread_create+0x90>)
   3e4aa:	f003 fb9d 	bl	41be8 <printk>
   3e4ae:	481b      	ldr	r0, [pc, #108]	; (3e51c <z_impl_k_thread_create+0x94>)
   3e4b0:	f003 fb9a 	bl	41be8 <printk>
   3e4b4:	f240 2173 	movw	r1, #627	; 0x273
   3e4b8:	4816      	ldr	r0, [pc, #88]	; (3e514 <z_impl_k_thread_create+0x8c>)
   3e4ba:	f003 fdaf 	bl	4201c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   3e4be:	2300      	movs	r3, #0
   3e4c0:	9305      	str	r3, [sp, #20]
   3e4c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   3e4c4:	4642      	mov	r2, r8
   3e4c6:	9304      	str	r3, [sp, #16]
   3e4c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   3e4ca:	4629      	mov	r1, r5
   3e4cc:	9303      	str	r3, [sp, #12]
   3e4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3e4d0:	4620      	mov	r0, r4
   3e4d2:	9302      	str	r3, [sp, #8]
   3e4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3e4d6:	9301      	str	r3, [sp, #4]
   3e4d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3e4da:	9300      	str	r3, [sp, #0]
   3e4dc:	464b      	mov	r3, r9
   3e4de:	f7ff ff77 	bl	3e3d0 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   3e4e2:	1c7b      	adds	r3, r7, #1
   3e4e4:	bf08      	it	eq
   3e4e6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   3e4ea:	d005      	beq.n	3e4f8 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e4ec:	ea56 0307 	orrs.w	r3, r6, r7
   3e4f0:	d106      	bne.n	3e500 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   3e4f2:	4620      	mov	r0, r4
   3e4f4:	f7ff f836 	bl	3d564 <z_sched_start>
}
   3e4f8:	4620      	mov	r0, r4
   3e4fa:	b007      	add	sp, #28
   3e4fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3e500:	4632      	mov	r2, r6
   3e502:	463b      	mov	r3, r7
   3e504:	4906      	ldr	r1, [pc, #24]	; (3e520 <z_impl_k_thread_create+0x98>)
   3e506:	f104 0018 	add.w	r0, r4, #24
   3e50a:	f000 fa33 	bl	3e974 <z_add_timeout>
   3e50e:	e7f3      	b.n	3e4f8 <z_impl_k_thread_create+0x70>
   3e510:	0004ecdb 	.word	0x0004ecdb
   3e514:	0004ef5f 	.word	0x0004ef5f
   3e518:	0004825b 	.word	0x0004825b
   3e51c:	0004ef0d 	.word	0x0004ef0d
   3e520:	0003d679 	.word	0x0003d679

0003e524 <z_init_static_threads>:
{
   3e524:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3e528:	4f3f      	ldr	r7, [pc, #252]	; (3e628 <z_init_static_threads+0x104>)
   3e52a:	4d40      	ldr	r5, [pc, #256]	; (3e62c <z_init_static_threads+0x108>)
   3e52c:	463e      	mov	r6, r7
   3e52e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 3e63c <z_init_static_threads+0x118>
{
   3e532:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   3e534:	42bd      	cmp	r5, r7
   3e536:	d90e      	bls.n	3e556 <z_init_static_threads+0x32>
   3e538:	493d      	ldr	r1, [pc, #244]	; (3e630 <z_init_static_threads+0x10c>)
   3e53a:	f240 23e1 	movw	r3, #737	; 0x2e1
   3e53e:	4642      	mov	r2, r8
   3e540:	483c      	ldr	r0, [pc, #240]	; (3e634 <z_init_static_threads+0x110>)
   3e542:	f003 fb51 	bl	41be8 <printk>
   3e546:	483c      	ldr	r0, [pc, #240]	; (3e638 <z_init_static_threads+0x114>)
   3e548:	f003 fb4e 	bl	41be8 <printk>
   3e54c:	f240 21e1 	movw	r1, #737	; 0x2e1
   3e550:	4640      	mov	r0, r8
   3e552:	f003 fd63 	bl	4201c <assert_post_action>
   3e556:	42b5      	cmp	r5, r6
   3e558:	f105 0430 	add.w	r4, r5, #48	; 0x30
   3e55c:	d31f      	bcc.n	3e59e <z_init_static_threads+0x7a>
	k_sched_lock();
   3e55e:	f7fe fddd 	bl	3d11c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   3e562:	4c32      	ldr	r4, [pc, #200]	; (3e62c <z_init_static_threads+0x108>)
   3e564:	4d35      	ldr	r5, [pc, #212]	; (3e63c <z_init_static_threads+0x118>)
   3e566:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 3e630 <z_init_static_threads+0x10c>
   3e56a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 3e634 <z_init_static_threads+0x110>
   3e56e:	42b4      	cmp	r4, r6
   3e570:	d90e      	bls.n	3e590 <z_init_static_threads+0x6c>
   3e572:	4641      	mov	r1, r8
   3e574:	f44f 7340 	mov.w	r3, #768	; 0x300
   3e578:	462a      	mov	r2, r5
   3e57a:	4648      	mov	r0, r9
   3e57c:	f003 fb34 	bl	41be8 <printk>
   3e580:	482d      	ldr	r0, [pc, #180]	; (3e638 <z_init_static_threads+0x114>)
   3e582:	f003 fb31 	bl	41be8 <printk>
   3e586:	f44f 7140 	mov.w	r1, #768	; 0x300
   3e58a:	4628      	mov	r0, r5
   3e58c:	f003 fd46 	bl	4201c <assert_post_action>
   3e590:	42b4      	cmp	r4, r6
   3e592:	d321      	bcc.n	3e5d8 <z_init_static_threads+0xb4>
}
   3e594:	b006      	add	sp, #24
   3e596:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   3e59a:	f7fe bed5 	b.w	3d348 <k_sched_unlock>
		z_setup_new_thread(
   3e59e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3e5a2:	9305      	str	r3, [sp, #20]
   3e5a4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3e5a8:	9304      	str	r3, [sp, #16]
   3e5aa:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3e5ae:	9303      	str	r3, [sp, #12]
   3e5b0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   3e5b4:	9302      	str	r3, [sp, #8]
   3e5b6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   3e5ba:	9301      	str	r3, [sp, #4]
   3e5bc:	f854 3c20 	ldr.w	r3, [r4, #-32]
   3e5c0:	9300      	str	r3, [sp, #0]
   3e5c2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   3e5c6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   3e5ca:	f7ff ff01 	bl	3e3d0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   3e5ce:	f854 3c30 	ldr.w	r3, [r4, #-48]
   3e5d2:	65dd      	str	r5, [r3, #92]	; 0x5c
   3e5d4:	4625      	mov	r5, r4
   3e5d6:	e7ad      	b.n	3e534 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   3e5d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3e5da:	1c4b      	adds	r3, r1, #1
   3e5dc:	d014      	beq.n	3e608 <z_init_static_threads+0xe4>
   3e5de:	f240 32e7 	movw	r2, #999	; 0x3e7
   3e5e2:	2300      	movs	r3, #0
   3e5e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   3e5e8:	4693      	mov	fp, r2
   3e5ea:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   3e5ec:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   3e5f0:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e5f4:	459c      	cmp	ip, r3
   3e5f6:	bf08      	it	eq
   3e5f8:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   3e5fa:	6827      	ldr	r7, [r4, #0]
   3e5fc:	4658      	mov	r0, fp
   3e5fe:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e600:	d104      	bne.n	3e60c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   3e602:	4638      	mov	r0, r7
   3e604:	f7fe ffae 	bl	3d564 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   3e608:	3430      	adds	r4, #48	; 0x30
   3e60a:	e7b0      	b.n	3e56e <z_init_static_threads+0x4a>
   3e60c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e610:	2300      	movs	r3, #0
   3e612:	f7de fc53 	bl	1cebc <__aeabi_uldivmod>
   3e616:	4602      	mov	r2, r0
   3e618:	460b      	mov	r3, r1
   3e61a:	f107 0018 	add.w	r0, r7, #24
   3e61e:	4908      	ldr	r1, [pc, #32]	; (3e640 <z_init_static_threads+0x11c>)
   3e620:	f000 f9a8 	bl	3e974 <z_add_timeout>
   3e624:	e7f0      	b.n	3e608 <z_init_static_threads+0xe4>
   3e626:	bf00      	nop
   3e628:	20020abc 	.word	0x20020abc
   3e62c:	20020a5c 	.word	0x20020a5c
   3e630:	0004ef32 	.word	0x0004ef32
   3e634:	0004825b 	.word	0x0004825b
   3e638:	000494f5 	.word	0x000494f5
   3e63c:	0004ef5f 	.word	0x0004ef5f
   3e640:	0003d679 	.word	0x0003d679

0003e644 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   3e644:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3e646:	b138      	cbz	r0, 3e658 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   3e648:	4b04      	ldr	r3, [pc, #16]	; (3e65c <z_spin_lock_valid+0x18>)
   3e64a:	f000 0003 	and.w	r0, r0, #3
   3e64e:	7d1b      	ldrb	r3, [r3, #20]
   3e650:	1ac0      	subs	r0, r0, r3
   3e652:	bf18      	it	ne
   3e654:	2001      	movne	r0, #1
   3e656:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3e658:	2001      	movs	r0, #1
}
   3e65a:	4770      	bx	lr
   3e65c:	20025af0 	.word	0x20025af0

0003e660 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3e660:	4a06      	ldr	r2, [pc, #24]	; (3e67c <z_spin_unlock_valid+0x1c>)
   3e662:	7d11      	ldrb	r1, [r2, #20]
   3e664:	6893      	ldr	r3, [r2, #8]
   3e666:	6802      	ldr	r2, [r0, #0]
   3e668:	430b      	orrs	r3, r1
   3e66a:	429a      	cmp	r2, r3
   3e66c:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   3e670:	bf06      	itte	eq
   3e672:	6003      	streq	r3, [r0, #0]
	return true;
   3e674:	2001      	moveq	r0, #1
		return false;
   3e676:	4618      	movne	r0, r3
}
   3e678:	4770      	bx	lr
   3e67a:	bf00      	nop
   3e67c:	20025af0 	.word	0x20025af0

0003e680 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3e680:	4a02      	ldr	r2, [pc, #8]	; (3e68c <z_spin_lock_set_owner+0xc>)
   3e682:	7d11      	ldrb	r1, [r2, #20]
   3e684:	6893      	ldr	r3, [r2, #8]
   3e686:	430b      	orrs	r3, r1
   3e688:	6003      	str	r3, [r0, #0]
}
   3e68a:	4770      	bx	lr
   3e68c:	20025af0 	.word	0x20025af0

0003e690 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   3e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e694:	4605      	mov	r5, r0
   3e696:	b088      	sub	sp, #32
   3e698:	460e      	mov	r6, r1
   3e69a:	4617      	mov	r7, r2
   3e69c:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   3e69e:	f006 fc13 	bl	44ec8 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3e6a2:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   3e6a6:	2000      	movs	r0, #0
   3e6a8:	2200      	movs	r2, #0
   3e6aa:	2300      	movs	r3, #0
   3e6ac:	e9cd 8003 	strd	r8, r0, [sp, #12]
   3e6b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   3e6b4:	e9cd 0001 	strd	r0, r0, [sp, #4]
   3e6b8:	9500      	str	r5, [sp, #0]
   3e6ba:	4b06      	ldr	r3, [pc, #24]	; (3e6d4 <k_work_q_start+0x44>)
   3e6bc:	463a      	mov	r2, r7
   3e6be:	4631      	mov	r1, r6
   3e6c0:	4620      	mov	r0, r4
   3e6c2:	f7ff fee1 	bl	3e488 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   3e6c6:	4620      	mov	r0, r4
   3e6c8:	4903      	ldr	r1, [pc, #12]	; (3e6d8 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3e6ca:	b008      	add	sp, #32
   3e6cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3e6d0:	f006 bc68 	b.w	44fa4 <z_impl_k_thread_name_set>
   3e6d4:	000249c1 	.word	0x000249c1
   3e6d8:	0004a37c 	.word	0x0004a37c

0003e6dc <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   3e6dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e6e0:	4606      	mov	r6, r0
   3e6e2:	460d      	mov	r5, r1
   3e6e4:	4690      	mov	r8, r2
   3e6e6:	4699      	mov	r9, r3
	__asm__ volatile(
   3e6e8:	f04f 0320 	mov.w	r3, #32
   3e6ec:	f3ef 8711 	mrs	r7, BASEPRI
   3e6f0:	f383 8811 	msr	BASEPRI, r3
   3e6f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e6f8:	4834      	ldr	r0, [pc, #208]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e6fa:	f7ff ffa3 	bl	3e644 <z_spin_lock_valid>
   3e6fe:	b968      	cbnz	r0, 3e71c <k_delayed_work_submit_to_queue+0x40>
   3e700:	235c      	movs	r3, #92	; 0x5c
   3e702:	4a33      	ldr	r2, [pc, #204]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e704:	4933      	ldr	r1, [pc, #204]	; (3e7d4 <k_delayed_work_submit_to_queue+0xf8>)
   3e706:	4834      	ldr	r0, [pc, #208]	; (3e7d8 <k_delayed_work_submit_to_queue+0xfc>)
   3e708:	f003 fa6e 	bl	41be8 <printk>
   3e70c:	492f      	ldr	r1, [pc, #188]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e70e:	4833      	ldr	r0, [pc, #204]	; (3e7dc <k_delayed_work_submit_to_queue+0x100>)
   3e710:	f003 fa6a 	bl	41be8 <printk>
   3e714:	215c      	movs	r1, #92	; 0x5c
   3e716:	482e      	ldr	r0, [pc, #184]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e718:	f003 fc80 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3e71c:	482b      	ldr	r0, [pc, #172]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e71e:	f7ff ffaf 	bl	3e680 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   3e722:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3e724:	b30b      	cbz	r3, 3e76a <k_delayed_work_submit_to_queue+0x8e>
   3e726:	42b3      	cmp	r3, r6
   3e728:	d14c      	bne.n	3e7c4 <k_delayed_work_submit_to_queue+0xe8>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3e72a:	4628      	mov	r0, r5
   3e72c:	f006 fc58 	bl	44fe0 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   3e730:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   3e734:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   3e736:	d01a      	beq.n	3e76e <k_delayed_work_submit_to_queue+0x92>
			err = 0;
		} else if (err < 0) {
   3e738:	2800      	cmp	r0, #0
   3e73a:	da19      	bge.n	3e770 <k_delayed_work_submit_to_queue+0x94>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e73c:	4823      	ldr	r0, [pc, #140]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e73e:	f7ff ff8f 	bl	3e660 <z_spin_unlock_valid>
   3e742:	b968      	cbnz	r0, 3e760 <k_delayed_work_submit_to_queue+0x84>
   3e744:	2384      	movs	r3, #132	; 0x84
   3e746:	4a22      	ldr	r2, [pc, #136]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e748:	4925      	ldr	r1, [pc, #148]	; (3e7e0 <k_delayed_work_submit_to_queue+0x104>)
   3e74a:	4823      	ldr	r0, [pc, #140]	; (3e7d8 <k_delayed_work_submit_to_queue+0xfc>)
   3e74c:	f003 fa4c 	bl	41be8 <printk>
   3e750:	491e      	ldr	r1, [pc, #120]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e752:	4824      	ldr	r0, [pc, #144]	; (3e7e4 <k_delayed_work_submit_to_queue+0x108>)
   3e754:	f003 fa48 	bl	41be8 <printk>
   3e758:	2184      	movs	r1, #132	; 0x84
   3e75a:	481d      	ldr	r0, [pc, #116]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e75c:	f003 fc5e 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3e760:	f387 8811 	msr	BASEPRI, r7
   3e764:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   3e768:	e021      	b.n	3e7ae <k_delayed_work_submit_to_queue+0xd2>
	if (work->work_q == work_q) {
   3e76a:	2e00      	cmp	r6, #0
   3e76c:	d0dd      	beq.n	3e72a <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   3e76e:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e770:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   3e774:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   3e776:	d11d      	bne.n	3e7b4 <k_delayed_work_submit_to_queue+0xd8>
   3e778:	4814      	ldr	r0, [pc, #80]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e77a:	f7ff ff71 	bl	3e660 <z_spin_unlock_valid>
   3e77e:	b968      	cbnz	r0, 3e79c <k_delayed_work_submit_to_queue+0xc0>
   3e780:	2384      	movs	r3, #132	; 0x84
   3e782:	4a13      	ldr	r2, [pc, #76]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e784:	4916      	ldr	r1, [pc, #88]	; (3e7e0 <k_delayed_work_submit_to_queue+0x104>)
   3e786:	4814      	ldr	r0, [pc, #80]	; (3e7d8 <k_delayed_work_submit_to_queue+0xfc>)
   3e788:	f003 fa2e 	bl	41be8 <printk>
   3e78c:	490f      	ldr	r1, [pc, #60]	; (3e7cc <k_delayed_work_submit_to_queue+0xf0>)
   3e78e:	4815      	ldr	r0, [pc, #84]	; (3e7e4 <k_delayed_work_submit_to_queue+0x108>)
   3e790:	f003 fa2a 	bl	41be8 <printk>
   3e794:	2184      	movs	r1, #132	; 0x84
   3e796:	480e      	ldr	r0, [pc, #56]	; (3e7d0 <k_delayed_work_submit_to_queue+0xf4>)
   3e798:	f003 fc40 	bl	4201c <assert_post_action>
   3e79c:	f387 8811 	msr	BASEPRI, r7
   3e7a0:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   3e7a4:	4629      	mov	r1, r5
   3e7a6:	4630      	mov	r0, r6
   3e7a8:	f006 fc01 	bl	44fae <k_work_submit_to_queue>
		return 0;
   3e7ac:	2400      	movs	r4, #0
}
   3e7ae:	4620      	mov	r0, r4
   3e7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   3e7b4:	4642      	mov	r2, r8
   3e7b6:	464b      	mov	r3, r9
   3e7b8:	490b      	ldr	r1, [pc, #44]	; (3e7e8 <k_delayed_work_submit_to_queue+0x10c>)
   3e7ba:	f105 0010 	add.w	r0, r5, #16
   3e7be:	f000 f8d9 	bl	3e974 <z_add_timeout>
   3e7c2:	e7bb      	b.n	3e73c <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   3e7c4:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3e7c8:	e7b8      	b.n	3e73c <k_delayed_work_submit_to_queue+0x60>
   3e7ca:	bf00      	nop
   3e7cc:	20025b38 	.word	0x20025b38
   3e7d0:	00048d7b 	.word	0x00048d7b
   3e7d4:	00048da1 	.word	0x00048da1
   3e7d8:	0004825b 	.word	0x0004825b
   3e7dc:	00048db6 	.word	0x00048db6
   3e7e0:	00048dce 	.word	0x00048dce
   3e7e4:	00048de5 	.word	0x00048de5
   3e7e8:	00044fd7 	.word	0x00044fd7

0003e7ec <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   3e7ec:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   3e7ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   3e7f0:	4604      	mov	r4, r0
	if (!work->work_q) {
   3e7f2:	2b00      	cmp	r3, #0
   3e7f4:	d038      	beq.n	3e868 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   3e7f6:	f04f 0320 	mov.w	r3, #32
   3e7fa:	f3ef 8511 	mrs	r5, BASEPRI
   3e7fe:	f383 8811 	msr	BASEPRI, r3
   3e802:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3e806:	481a      	ldr	r0, [pc, #104]	; (3e870 <k_delayed_work_cancel+0x84>)
   3e808:	f7ff ff1c 	bl	3e644 <z_spin_lock_valid>
   3e80c:	b968      	cbnz	r0, 3e82a <k_delayed_work_cancel+0x3e>
   3e80e:	235c      	movs	r3, #92	; 0x5c
   3e810:	4a18      	ldr	r2, [pc, #96]	; (3e874 <k_delayed_work_cancel+0x88>)
   3e812:	4919      	ldr	r1, [pc, #100]	; (3e878 <k_delayed_work_cancel+0x8c>)
   3e814:	4819      	ldr	r0, [pc, #100]	; (3e87c <k_delayed_work_cancel+0x90>)
   3e816:	f003 f9e7 	bl	41be8 <printk>
   3e81a:	4915      	ldr	r1, [pc, #84]	; (3e870 <k_delayed_work_cancel+0x84>)
   3e81c:	4818      	ldr	r0, [pc, #96]	; (3e880 <k_delayed_work_cancel+0x94>)
   3e81e:	f003 f9e3 	bl	41be8 <printk>
   3e822:	215c      	movs	r1, #92	; 0x5c
   3e824:	4813      	ldr	r0, [pc, #76]	; (3e874 <k_delayed_work_cancel+0x88>)
   3e826:	f003 fbf9 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3e82a:	4811      	ldr	r0, [pc, #68]	; (3e870 <k_delayed_work_cancel+0x84>)
   3e82c:	f7ff ff28 	bl	3e680 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   3e830:	4620      	mov	r0, r4
   3e832:	f006 fbd5 	bl	44fe0 <work_cancel>
   3e836:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3e838:	480d      	ldr	r0, [pc, #52]	; (3e870 <k_delayed_work_cancel+0x84>)
   3e83a:	f7ff ff11 	bl	3e660 <z_spin_unlock_valid>
   3e83e:	b968      	cbnz	r0, 3e85c <k_delayed_work_cancel+0x70>
   3e840:	2384      	movs	r3, #132	; 0x84
   3e842:	4a0c      	ldr	r2, [pc, #48]	; (3e874 <k_delayed_work_cancel+0x88>)
   3e844:	490f      	ldr	r1, [pc, #60]	; (3e884 <k_delayed_work_cancel+0x98>)
   3e846:	480d      	ldr	r0, [pc, #52]	; (3e87c <k_delayed_work_cancel+0x90>)
   3e848:	f003 f9ce 	bl	41be8 <printk>
   3e84c:	4908      	ldr	r1, [pc, #32]	; (3e870 <k_delayed_work_cancel+0x84>)
   3e84e:	480e      	ldr	r0, [pc, #56]	; (3e888 <k_delayed_work_cancel+0x9c>)
   3e850:	f003 f9ca 	bl	41be8 <printk>
   3e854:	2184      	movs	r1, #132	; 0x84
   3e856:	4807      	ldr	r0, [pc, #28]	; (3e874 <k_delayed_work_cancel+0x88>)
   3e858:	f003 fbe0 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3e85c:	f385 8811 	msr	BASEPRI, r5
   3e860:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   3e864:	4620      	mov	r0, r4
   3e866:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3e868:	f06f 0415 	mvn.w	r4, #21
   3e86c:	e7fa      	b.n	3e864 <k_delayed_work_cancel+0x78>
   3e86e:	bf00      	nop
   3e870:	20025b38 	.word	0x20025b38
   3e874:	00048d7b 	.word	0x00048d7b
   3e878:	00048da1 	.word	0x00048da1
   3e87c:	0004825b 	.word	0x0004825b
   3e880:	00048db6 	.word	0x00048db6
   3e884:	00048dce 	.word	0x00048dce
   3e888:	00048de5 	.word	0x00048de5

0003e88c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   3e88c:	4b03      	ldr	r3, [pc, #12]	; (3e89c <elapsed+0x10>)
   3e88e:	681b      	ldr	r3, [r3, #0]
   3e890:	b90b      	cbnz	r3, 3e896 <elapsed+0xa>
   3e892:	f7e8 b835 	b.w	26900 <z_clock_elapsed>
}
   3e896:	2000      	movs	r0, #0
   3e898:	4770      	bx	lr
   3e89a:	bf00      	nop
   3e89c:	20025b3c 	.word	0x20025b3c

0003e8a0 <remove_timeout>:
{
   3e8a0:	b530      	push	{r4, r5, lr}
   3e8a2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e8a4:	b168      	cbz	r0, 3e8c2 <remove_timeout+0x22>
   3e8a6:	4a0a      	ldr	r2, [pc, #40]	; (3e8d0 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   3e8a8:	6852      	ldr	r2, [r2, #4]
   3e8aa:	4290      	cmp	r0, r2
   3e8ac:	d009      	beq.n	3e8c2 <remove_timeout+0x22>
	if (next(t) != NULL) {
   3e8ae:	b143      	cbz	r3, 3e8c2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   3e8b0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   3e8b4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   3e8b8:	1912      	adds	r2, r2, r4
   3e8ba:	eb45 0101 	adc.w	r1, r5, r1
   3e8be:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   3e8c2:	6842      	ldr	r2, [r0, #4]
   3e8c4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3e8c6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3e8c8:	2300      	movs	r3, #0
	node->prev = NULL;
   3e8ca:	e9c0 3300 	strd	r3, r3, [r0]
}
   3e8ce:	bd30      	pop	{r4, r5, pc}
   3e8d0:	20020778 	.word	0x20020778

0003e8d4 <next_timeout>:

static int32_t next_timeout(void)
{
   3e8d4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   3e8d6:	4b11      	ldr	r3, [pc, #68]	; (3e91c <next_timeout+0x48>)
   3e8d8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e8da:	429c      	cmp	r4, r3
   3e8dc:	bf08      	it	eq
   3e8de:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   3e8e0:	f7ff ffd4 	bl	3e88c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   3e8e4:	b1b4      	cbz	r4, 3e914 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   3e8e6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   3e8ea:	1a14      	subs	r4, r2, r0
   3e8ec:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   3e8f0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   3e8f4:	f175 0300 	sbcs.w	r3, r5, #0
   3e8f8:	da0c      	bge.n	3e914 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   3e8fa:	2c00      	cmp	r4, #0
   3e8fc:	f175 0300 	sbcs.w	r3, r5, #0
   3e900:	4620      	mov	r0, r4
   3e902:	da00      	bge.n	3e906 <next_timeout+0x32>
   3e904:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   3e906:	4b06      	ldr	r3, [pc, #24]	; (3e920 <next_timeout+0x4c>)
   3e908:	691b      	ldr	r3, [r3, #16]
   3e90a:	b113      	cbz	r3, 3e912 <next_timeout+0x3e>
   3e90c:	4298      	cmp	r0, r3
   3e90e:	bfa8      	it	ge
   3e910:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   3e912:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   3e914:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3e918:	e7f5      	b.n	3e906 <next_timeout+0x32>
   3e91a:	bf00      	nop
   3e91c:	20020778 	.word	0x20020778
   3e920:	20025af0 	.word	0x20025af0

0003e924 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   3e924:	6803      	ldr	r3, [r0, #0]
{
   3e926:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   3e928:	b1fb      	cbz	r3, 3e96a <timeout_rem+0x46>
	return list->head == list;
   3e92a:	4a11      	ldr	r2, [pc, #68]	; (3e970 <timeout_rem+0x4c>)
   3e92c:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e92e:	4293      	cmp	r3, r2
   3e930:	d018      	beq.n	3e964 <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3e932:	2400      	movs	r4, #0
   3e934:	2500      	movs	r5, #0
   3e936:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   3e938:	b93b      	cbnz	r3, 3e94a <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   3e93a:	f7ff ffa7 	bl	3e88c <elapsed>
   3e93e:	1a22      	subs	r2, r4, r0
   3e940:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   3e944:	4619      	mov	r1, r3
   3e946:	4610      	mov	r0, r2
}
   3e948:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   3e94a:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   3e94e:	18a4      	adds	r4, r4, r2
   3e950:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   3e954:	4283      	cmp	r3, r0
   3e956:	d0f0      	beq.n	3e93a <timeout_rem+0x16>
   3e958:	2b00      	cmp	r3, #0
   3e95a:	d0ee      	beq.n	3e93a <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   3e95c:	428b      	cmp	r3, r1
   3e95e:	d0ec      	beq.n	3e93a <timeout_rem+0x16>
   3e960:	681b      	ldr	r3, [r3, #0]
   3e962:	e7e9      	b.n	3e938 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3e964:	2400      	movs	r4, #0
   3e966:	2500      	movs	r5, #0
   3e968:	e7e7      	b.n	3e93a <timeout_rem+0x16>
		return 0;
   3e96a:	2000      	movs	r0, #0
   3e96c:	2100      	movs	r1, #0
   3e96e:	e7eb      	b.n	3e948 <timeout_rem+0x24>
   3e970:	20020778 	.word	0x20020778

0003e974 <z_add_timeout>:
{
   3e974:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e978:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3e97a:	1c59      	adds	r1, r3, #1
   3e97c:	bf08      	it	eq
   3e97e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   3e982:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3e984:	f000 80a6 	beq.w	3ead4 <z_add_timeout+0x160>
	k_ticks_t ticks = timeout.ticks + 1;
   3e988:	1c54      	adds	r4, r2, #1
   3e98a:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   3e98e:	f06f 0301 	mvn.w	r3, #1
   3e992:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3e996:	ebb3 0804 	subs.w	r8, r3, r4
   3e99a:	eb6b 0905 	sbc.w	r9, fp, r5
   3e99e:	f1b8 0f00 	cmp.w	r8, #0
   3e9a2:	f179 0300 	sbcs.w	r3, r9, #0
   3e9a6:	db0f      	blt.n	3e9c8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   3e9a8:	f7ff ff70 	bl	3e88c <elapsed>
   3e9ac:	f06f 0301 	mvn.w	r3, #1
   3e9b0:	4a4f      	ldr	r2, [pc, #316]	; (3eaf0 <z_add_timeout+0x17c>)
   3e9b2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   3e9b6:	1a5b      	subs	r3, r3, r1
   3e9b8:	eb6b 020c 	sbc.w	r2, fp, ip
   3e9bc:	1b1e      	subs	r6, r3, r4
   3e9be:	eb62 0705 	sbc.w	r7, r2, r5
   3e9c2:	1a34      	subs	r4, r6, r0
   3e9c4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   3e9c8:	f8da 3000 	ldr.w	r3, [sl]
   3e9cc:	b163      	cbz	r3, 3e9e8 <z_add_timeout+0x74>
   3e9ce:	4949      	ldr	r1, [pc, #292]	; (3eaf4 <z_add_timeout+0x180>)
   3e9d0:	2368      	movs	r3, #104	; 0x68
   3e9d2:	4a49      	ldr	r2, [pc, #292]	; (3eaf8 <z_add_timeout+0x184>)
   3e9d4:	4849      	ldr	r0, [pc, #292]	; (3eafc <z_add_timeout+0x188>)
   3e9d6:	f003 f907 	bl	41be8 <printk>
   3e9da:	4849      	ldr	r0, [pc, #292]	; (3eb00 <z_add_timeout+0x18c>)
   3e9dc:	f003 f904 	bl	41be8 <printk>
   3e9e0:	2168      	movs	r1, #104	; 0x68
   3e9e2:	4845      	ldr	r0, [pc, #276]	; (3eaf8 <z_add_timeout+0x184>)
   3e9e4:	f003 fb1a 	bl	4201c <assert_post_action>
	to->fn = fn;
   3e9e8:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   3e9ea:	2c01      	cmp	r4, #1
	to->fn = fn;
   3e9ec:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   3e9f0:	f175 0300 	sbcs.w	r3, r5, #0
   3e9f4:	4627      	mov	r7, r4
   3e9f6:	46a8      	mov	r8, r5
   3e9f8:	bfbc      	itt	lt
   3e9fa:	2701      	movlt	r7, #1
   3e9fc:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   3ea00:	f04f 0320 	mov.w	r3, #32
   3ea04:	f3ef 8611 	mrs	r6, BASEPRI
   3ea08:	f383 8811 	msr	BASEPRI, r3
   3ea0c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ea10:	483c      	ldr	r0, [pc, #240]	; (3eb04 <z_add_timeout+0x190>)
   3ea12:	f7ff fe17 	bl	3e644 <z_spin_lock_valid>
   3ea16:	b968      	cbnz	r0, 3ea34 <z_add_timeout+0xc0>
   3ea18:	235c      	movs	r3, #92	; 0x5c
   3ea1a:	4a3b      	ldr	r2, [pc, #236]	; (3eb08 <z_add_timeout+0x194>)
   3ea1c:	493b      	ldr	r1, [pc, #236]	; (3eb0c <z_add_timeout+0x198>)
   3ea1e:	4837      	ldr	r0, [pc, #220]	; (3eafc <z_add_timeout+0x188>)
   3ea20:	f003 f8e2 	bl	41be8 <printk>
   3ea24:	4937      	ldr	r1, [pc, #220]	; (3eb04 <z_add_timeout+0x190>)
   3ea26:	483a      	ldr	r0, [pc, #232]	; (3eb10 <z_add_timeout+0x19c>)
   3ea28:	f003 f8de 	bl	41be8 <printk>
   3ea2c:	215c      	movs	r1, #92	; 0x5c
   3ea2e:	4836      	ldr	r0, [pc, #216]	; (3eb08 <z_add_timeout+0x194>)
   3ea30:	f003 faf4 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ea34:	4833      	ldr	r0, [pc, #204]	; (3eb04 <z_add_timeout+0x190>)
   3ea36:	f7ff fe23 	bl	3e680 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   3ea3a:	f7ff ff27 	bl	3e88c <elapsed>
	return list->head == list;
   3ea3e:	4b35      	ldr	r3, [pc, #212]	; (3eb14 <z_add_timeout+0x1a0>)
   3ea40:	183c      	adds	r4, r7, r0
   3ea42:	681a      	ldr	r2, [r3, #0]
   3ea44:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ea48:	429a      	cmp	r2, r3
   3ea4a:	e9ca 4504 	strd	r4, r5, [sl, #16]
   3ea4e:	d001      	beq.n	3ea54 <z_add_timeout+0xe0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3ea50:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   3ea52:	b952      	cbnz	r2, 3ea6a <z_add_timeout+0xf6>
	node->prev = list->tail;
   3ea54:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   3ea56:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   3ea5a:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   3ea5e:	685a      	ldr	r2, [r3, #4]
   3ea60:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   3ea64:	f8c3 a004 	str.w	sl, [r3, #4]
   3ea68:	e014      	b.n	3ea94 <z_add_timeout+0x120>
			if (t->dticks > to->dticks) {
   3ea6a:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   3ea6e:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   3ea72:	4544      	cmp	r4, r8
   3ea74:	eb75 0109 	sbcs.w	r1, r5, r9
   3ea78:	da2f      	bge.n	3eada <z_add_timeout+0x166>
				t->dticks -= to->dticks;
   3ea7a:	ebb8 0004 	subs.w	r0, r8, r4
   3ea7e:	eb69 0105 	sbc.w	r1, r9, r5
   3ea82:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   3ea86:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   3ea88:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   3ea8c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   3ea90:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   3ea94:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ea96:	429a      	cmp	r2, r3
   3ea98:	d006      	beq.n	3eaa8 <z_add_timeout+0x134>
		if (to == first()) {
   3ea9a:	4592      	cmp	sl, r2
   3ea9c:	d104      	bne.n	3eaa8 <z_add_timeout+0x134>
			z_clock_set_timeout(next_timeout(), false);
   3ea9e:	f7ff ff19 	bl	3e8d4 <next_timeout>
   3eaa2:	2100      	movs	r1, #0
   3eaa4:	f7e7 fec6 	bl	26834 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3eaa8:	4816      	ldr	r0, [pc, #88]	; (3eb04 <z_add_timeout+0x190>)
   3eaaa:	f7ff fdd9 	bl	3e660 <z_spin_unlock_valid>
   3eaae:	b968      	cbnz	r0, 3eacc <z_add_timeout+0x158>
   3eab0:	2384      	movs	r3, #132	; 0x84
   3eab2:	4a15      	ldr	r2, [pc, #84]	; (3eb08 <z_add_timeout+0x194>)
   3eab4:	4918      	ldr	r1, [pc, #96]	; (3eb18 <z_add_timeout+0x1a4>)
   3eab6:	4811      	ldr	r0, [pc, #68]	; (3eafc <z_add_timeout+0x188>)
   3eab8:	f003 f896 	bl	41be8 <printk>
   3eabc:	4911      	ldr	r1, [pc, #68]	; (3eb04 <z_add_timeout+0x190>)
   3eabe:	4817      	ldr	r0, [pc, #92]	; (3eb1c <z_add_timeout+0x1a8>)
   3eac0:	f003 f892 	bl	41be8 <printk>
   3eac4:	2184      	movs	r1, #132	; 0x84
   3eac6:	4810      	ldr	r0, [pc, #64]	; (3eb08 <z_add_timeout+0x194>)
   3eac8:	f003 faa8 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3eacc:	f386 8811 	msr	BASEPRI, r6
   3ead0:	f3bf 8f6f 	isb	sy
}
   3ead4:	b003      	add	sp, #12
   3ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   3eada:	ebb4 0008 	subs.w	r0, r4, r8
   3eade:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   3eae2:	42ba      	cmp	r2, r7
   3eae4:	e9ca 0104 	strd	r0, r1, [sl, #16]
   3eae8:	d0b4      	beq.n	3ea54 <z_add_timeout+0xe0>
   3eaea:	6812      	ldr	r2, [r2, #0]
   3eaec:	e7b1      	b.n	3ea52 <z_add_timeout+0xde>
   3eaee:	bf00      	nop
   3eaf0:	20024590 	.word	0x20024590
   3eaf4:	0004f057 	.word	0x0004f057
   3eaf8:	0004f033 	.word	0x0004f033
   3eafc:	0004825b 	.word	0x0004825b
   3eb00:	00049477 	.word	0x00049477
   3eb04:	20025b40 	.word	0x20025b40
   3eb08:	00048d7b 	.word	0x00048d7b
   3eb0c:	00048da1 	.word	0x00048da1
   3eb10:	00048db6 	.word	0x00048db6
   3eb14:	20020778 	.word	0x20020778
   3eb18:	00048dce 	.word	0x00048dce
   3eb1c:	00048de5 	.word	0x00048de5

0003eb20 <z_abort_timeout>:
{
   3eb20:	b538      	push	{r3, r4, r5, lr}
   3eb22:	4604      	mov	r4, r0
	__asm__ volatile(
   3eb24:	f04f 0320 	mov.w	r3, #32
   3eb28:	f3ef 8511 	mrs	r5, BASEPRI
   3eb2c:	f383 8811 	msr	BASEPRI, r3
   3eb30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eb34:	481a      	ldr	r0, [pc, #104]	; (3eba0 <z_abort_timeout+0x80>)
   3eb36:	f7ff fd85 	bl	3e644 <z_spin_lock_valid>
   3eb3a:	b968      	cbnz	r0, 3eb58 <z_abort_timeout+0x38>
   3eb3c:	235c      	movs	r3, #92	; 0x5c
   3eb3e:	4a19      	ldr	r2, [pc, #100]	; (3eba4 <z_abort_timeout+0x84>)
   3eb40:	4919      	ldr	r1, [pc, #100]	; (3eba8 <z_abort_timeout+0x88>)
   3eb42:	481a      	ldr	r0, [pc, #104]	; (3ebac <z_abort_timeout+0x8c>)
   3eb44:	f003 f850 	bl	41be8 <printk>
   3eb48:	4915      	ldr	r1, [pc, #84]	; (3eba0 <z_abort_timeout+0x80>)
   3eb4a:	4819      	ldr	r0, [pc, #100]	; (3ebb0 <z_abort_timeout+0x90>)
   3eb4c:	f003 f84c 	bl	41be8 <printk>
   3eb50:	215c      	movs	r1, #92	; 0x5c
   3eb52:	4814      	ldr	r0, [pc, #80]	; (3eba4 <z_abort_timeout+0x84>)
   3eb54:	f003 fa62 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3eb58:	4811      	ldr	r0, [pc, #68]	; (3eba0 <z_abort_timeout+0x80>)
   3eb5a:	f7ff fd91 	bl	3e680 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   3eb5e:	6823      	ldr	r3, [r4, #0]
   3eb60:	b1db      	cbz	r3, 3eb9a <z_abort_timeout+0x7a>
			remove_timeout(to);
   3eb62:	4620      	mov	r0, r4
   3eb64:	f7ff fe9c 	bl	3e8a0 <remove_timeout>
			ret = 0;
   3eb68:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3eb6a:	480d      	ldr	r0, [pc, #52]	; (3eba0 <z_abort_timeout+0x80>)
   3eb6c:	f7ff fd78 	bl	3e660 <z_spin_unlock_valid>
   3eb70:	b968      	cbnz	r0, 3eb8e <z_abort_timeout+0x6e>
   3eb72:	2384      	movs	r3, #132	; 0x84
   3eb74:	4a0b      	ldr	r2, [pc, #44]	; (3eba4 <z_abort_timeout+0x84>)
   3eb76:	490f      	ldr	r1, [pc, #60]	; (3ebb4 <z_abort_timeout+0x94>)
   3eb78:	480c      	ldr	r0, [pc, #48]	; (3ebac <z_abort_timeout+0x8c>)
   3eb7a:	f003 f835 	bl	41be8 <printk>
   3eb7e:	4908      	ldr	r1, [pc, #32]	; (3eba0 <z_abort_timeout+0x80>)
   3eb80:	480d      	ldr	r0, [pc, #52]	; (3ebb8 <z_abort_timeout+0x98>)
   3eb82:	f003 f831 	bl	41be8 <printk>
   3eb86:	2184      	movs	r1, #132	; 0x84
   3eb88:	4806      	ldr	r0, [pc, #24]	; (3eba4 <z_abort_timeout+0x84>)
   3eb8a:	f003 fa47 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3eb8e:	f385 8811 	msr	BASEPRI, r5
   3eb92:	f3bf 8f6f 	isb	sy
}
   3eb96:	4620      	mov	r0, r4
   3eb98:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   3eb9a:	f06f 0415 	mvn.w	r4, #21
   3eb9e:	e7e4      	b.n	3eb6a <z_abort_timeout+0x4a>
   3eba0:	20025b40 	.word	0x20025b40
   3eba4:	00048d7b 	.word	0x00048d7b
   3eba8:	00048da1 	.word	0x00048da1
   3ebac:	0004825b 	.word	0x0004825b
   3ebb0:	00048db6 	.word	0x00048db6
   3ebb4:	00048dce 	.word	0x00048dce
   3ebb8:	00048de5 	.word	0x00048de5

0003ebbc <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   3ebbc:	b570      	push	{r4, r5, r6, lr}
   3ebbe:	4604      	mov	r4, r0
	__asm__ volatile(
   3ebc0:	f04f 0320 	mov.w	r3, #32
   3ebc4:	f3ef 8611 	mrs	r6, BASEPRI
   3ebc8:	f383 8811 	msr	BASEPRI, r3
   3ebcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ebd0:	4819      	ldr	r0, [pc, #100]	; (3ec38 <z_timeout_remaining+0x7c>)
   3ebd2:	f7ff fd37 	bl	3e644 <z_spin_lock_valid>
   3ebd6:	b968      	cbnz	r0, 3ebf4 <z_timeout_remaining+0x38>
   3ebd8:	235c      	movs	r3, #92	; 0x5c
   3ebda:	4a18      	ldr	r2, [pc, #96]	; (3ec3c <z_timeout_remaining+0x80>)
   3ebdc:	4918      	ldr	r1, [pc, #96]	; (3ec40 <z_timeout_remaining+0x84>)
   3ebde:	4819      	ldr	r0, [pc, #100]	; (3ec44 <z_timeout_remaining+0x88>)
   3ebe0:	f003 f802 	bl	41be8 <printk>
   3ebe4:	4914      	ldr	r1, [pc, #80]	; (3ec38 <z_timeout_remaining+0x7c>)
   3ebe6:	4818      	ldr	r0, [pc, #96]	; (3ec48 <z_timeout_remaining+0x8c>)
   3ebe8:	f002 fffe 	bl	41be8 <printk>
   3ebec:	215c      	movs	r1, #92	; 0x5c
   3ebee:	4813      	ldr	r0, [pc, #76]	; (3ec3c <z_timeout_remaining+0x80>)
   3ebf0:	f003 fa14 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ebf4:	4810      	ldr	r0, [pc, #64]	; (3ec38 <z_timeout_remaining+0x7c>)
   3ebf6:	f7ff fd43 	bl	3e680 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   3ebfa:	4620      	mov	r0, r4
   3ebfc:	f7ff fe92 	bl	3e924 <timeout_rem>
   3ec00:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ec02:	480d      	ldr	r0, [pc, #52]	; (3ec38 <z_timeout_remaining+0x7c>)
   3ec04:	460d      	mov	r5, r1
   3ec06:	f7ff fd2b 	bl	3e660 <z_spin_unlock_valid>
   3ec0a:	b968      	cbnz	r0, 3ec28 <z_timeout_remaining+0x6c>
   3ec0c:	2384      	movs	r3, #132	; 0x84
   3ec0e:	4a0b      	ldr	r2, [pc, #44]	; (3ec3c <z_timeout_remaining+0x80>)
   3ec10:	490e      	ldr	r1, [pc, #56]	; (3ec4c <z_timeout_remaining+0x90>)
   3ec12:	480c      	ldr	r0, [pc, #48]	; (3ec44 <z_timeout_remaining+0x88>)
   3ec14:	f002 ffe8 	bl	41be8 <printk>
   3ec18:	4907      	ldr	r1, [pc, #28]	; (3ec38 <z_timeout_remaining+0x7c>)
   3ec1a:	480d      	ldr	r0, [pc, #52]	; (3ec50 <z_timeout_remaining+0x94>)
   3ec1c:	f002 ffe4 	bl	41be8 <printk>
   3ec20:	2184      	movs	r1, #132	; 0x84
   3ec22:	4806      	ldr	r0, [pc, #24]	; (3ec3c <z_timeout_remaining+0x80>)
   3ec24:	f003 f9fa 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ec28:	f386 8811 	msr	BASEPRI, r6
   3ec2c:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   3ec30:	4620      	mov	r0, r4
   3ec32:	4629      	mov	r1, r5
   3ec34:	bd70      	pop	{r4, r5, r6, pc}
   3ec36:	bf00      	nop
   3ec38:	20025b40 	.word	0x20025b40
   3ec3c:	00048d7b 	.word	0x00048d7b
   3ec40:	00048da1 	.word	0x00048da1
   3ec44:	0004825b 	.word	0x0004825b
   3ec48:	00048db6 	.word	0x00048db6
   3ec4c:	00048dce 	.word	0x00048dce
   3ec50:	00048de5 	.word	0x00048de5

0003ec54 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   3ec54:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3ec56:	f04f 0320 	mov.w	r3, #32
   3ec5a:	f3ef 8511 	mrs	r5, BASEPRI
   3ec5e:	f383 8811 	msr	BASEPRI, r3
   3ec62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ec66:	4818      	ldr	r0, [pc, #96]	; (3ecc8 <z_get_next_timeout_expiry+0x74>)
   3ec68:	f7ff fcec 	bl	3e644 <z_spin_lock_valid>
   3ec6c:	b968      	cbnz	r0, 3ec8a <z_get_next_timeout_expiry+0x36>
   3ec6e:	235c      	movs	r3, #92	; 0x5c
   3ec70:	4a16      	ldr	r2, [pc, #88]	; (3eccc <z_get_next_timeout_expiry+0x78>)
   3ec72:	4917      	ldr	r1, [pc, #92]	; (3ecd0 <z_get_next_timeout_expiry+0x7c>)
   3ec74:	4817      	ldr	r0, [pc, #92]	; (3ecd4 <z_get_next_timeout_expiry+0x80>)
   3ec76:	f002 ffb7 	bl	41be8 <printk>
   3ec7a:	4913      	ldr	r1, [pc, #76]	; (3ecc8 <z_get_next_timeout_expiry+0x74>)
   3ec7c:	4816      	ldr	r0, [pc, #88]	; (3ecd8 <z_get_next_timeout_expiry+0x84>)
   3ec7e:	f002 ffb3 	bl	41be8 <printk>
   3ec82:	215c      	movs	r1, #92	; 0x5c
   3ec84:	4811      	ldr	r0, [pc, #68]	; (3eccc <z_get_next_timeout_expiry+0x78>)
   3ec86:	f003 f9c9 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ec8a:	480f      	ldr	r0, [pc, #60]	; (3ecc8 <z_get_next_timeout_expiry+0x74>)
   3ec8c:	f7ff fcf8 	bl	3e680 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   3ec90:	f7ff fe20 	bl	3e8d4 <next_timeout>
   3ec94:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ec96:	480c      	ldr	r0, [pc, #48]	; (3ecc8 <z_get_next_timeout_expiry+0x74>)
   3ec98:	f7ff fce2 	bl	3e660 <z_spin_unlock_valid>
   3ec9c:	b968      	cbnz	r0, 3ecba <z_get_next_timeout_expiry+0x66>
   3ec9e:	2384      	movs	r3, #132	; 0x84
   3eca0:	4a0a      	ldr	r2, [pc, #40]	; (3eccc <z_get_next_timeout_expiry+0x78>)
   3eca2:	490e      	ldr	r1, [pc, #56]	; (3ecdc <z_get_next_timeout_expiry+0x88>)
   3eca4:	480b      	ldr	r0, [pc, #44]	; (3ecd4 <z_get_next_timeout_expiry+0x80>)
   3eca6:	f002 ff9f 	bl	41be8 <printk>
   3ecaa:	4907      	ldr	r1, [pc, #28]	; (3ecc8 <z_get_next_timeout_expiry+0x74>)
   3ecac:	480c      	ldr	r0, [pc, #48]	; (3ece0 <z_get_next_timeout_expiry+0x8c>)
   3ecae:	f002 ff9b 	bl	41be8 <printk>
   3ecb2:	2184      	movs	r1, #132	; 0x84
   3ecb4:	4805      	ldr	r0, [pc, #20]	; (3eccc <z_get_next_timeout_expiry+0x78>)
   3ecb6:	f003 f9b1 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ecba:	f385 8811 	msr	BASEPRI, r5
   3ecbe:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   3ecc2:	4620      	mov	r0, r4
   3ecc4:	bd38      	pop	{r3, r4, r5, pc}
   3ecc6:	bf00      	nop
   3ecc8:	20025b40 	.word	0x20025b40
   3eccc:	00048d7b 	.word	0x00048d7b
   3ecd0:	00048da1 	.word	0x00048da1
   3ecd4:	0004825b 	.word	0x0004825b
   3ecd8:	00048db6 	.word	0x00048db6
   3ecdc:	00048dce 	.word	0x00048dce
   3ece0:	00048de5 	.word	0x00048de5

0003ece4 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   3ece4:	b570      	push	{r4, r5, r6, lr}
   3ece6:	4604      	mov	r4, r0
   3ece8:	460e      	mov	r6, r1
	__asm__ volatile(
   3ecea:	f04f 0320 	mov.w	r3, #32
   3ecee:	f3ef 8511 	mrs	r5, BASEPRI
   3ecf2:	f383 8811 	msr	BASEPRI, r3
   3ecf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ecfa:	481b      	ldr	r0, [pc, #108]	; (3ed68 <z_set_timeout_expiry+0x84>)
   3ecfc:	f7ff fca2 	bl	3e644 <z_spin_lock_valid>
   3ed00:	b968      	cbnz	r0, 3ed1e <z_set_timeout_expiry+0x3a>
   3ed02:	235c      	movs	r3, #92	; 0x5c
   3ed04:	4a19      	ldr	r2, [pc, #100]	; (3ed6c <z_set_timeout_expiry+0x88>)
   3ed06:	491a      	ldr	r1, [pc, #104]	; (3ed70 <z_set_timeout_expiry+0x8c>)
   3ed08:	481a      	ldr	r0, [pc, #104]	; (3ed74 <z_set_timeout_expiry+0x90>)
   3ed0a:	f002 ff6d 	bl	41be8 <printk>
   3ed0e:	4916      	ldr	r1, [pc, #88]	; (3ed68 <z_set_timeout_expiry+0x84>)
   3ed10:	4819      	ldr	r0, [pc, #100]	; (3ed78 <z_set_timeout_expiry+0x94>)
   3ed12:	f002 ff69 	bl	41be8 <printk>
   3ed16:	215c      	movs	r1, #92	; 0x5c
   3ed18:	4814      	ldr	r0, [pc, #80]	; (3ed6c <z_set_timeout_expiry+0x88>)
   3ed1a:	f003 f97f 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ed1e:	4812      	ldr	r0, [pc, #72]	; (3ed68 <z_set_timeout_expiry+0x84>)
   3ed20:	f7ff fcae 	bl	3e680 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   3ed24:	f7ff fdd6 	bl	3e8d4 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3ed28:	2801      	cmp	r0, #1
   3ed2a:	dd05      	ble.n	3ed38 <z_set_timeout_expiry+0x54>
   3ed2c:	42a0      	cmp	r0, r4
   3ed2e:	dd03      	ble.n	3ed38 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   3ed30:	4631      	mov	r1, r6
   3ed32:	4620      	mov	r0, r4
   3ed34:	f7e7 fd7e 	bl	26834 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ed38:	480b      	ldr	r0, [pc, #44]	; (3ed68 <z_set_timeout_expiry+0x84>)
   3ed3a:	f7ff fc91 	bl	3e660 <z_spin_unlock_valid>
   3ed3e:	b968      	cbnz	r0, 3ed5c <z_set_timeout_expiry+0x78>
   3ed40:	2384      	movs	r3, #132	; 0x84
   3ed42:	4a0a      	ldr	r2, [pc, #40]	; (3ed6c <z_set_timeout_expiry+0x88>)
   3ed44:	490d      	ldr	r1, [pc, #52]	; (3ed7c <z_set_timeout_expiry+0x98>)
   3ed46:	480b      	ldr	r0, [pc, #44]	; (3ed74 <z_set_timeout_expiry+0x90>)
   3ed48:	f002 ff4e 	bl	41be8 <printk>
   3ed4c:	4906      	ldr	r1, [pc, #24]	; (3ed68 <z_set_timeout_expiry+0x84>)
   3ed4e:	480c      	ldr	r0, [pc, #48]	; (3ed80 <z_set_timeout_expiry+0x9c>)
   3ed50:	f002 ff4a 	bl	41be8 <printk>
   3ed54:	2184      	movs	r1, #132	; 0x84
   3ed56:	4805      	ldr	r0, [pc, #20]	; (3ed6c <z_set_timeout_expiry+0x88>)
   3ed58:	f003 f960 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ed5c:	f385 8811 	msr	BASEPRI, r5
   3ed60:	f3bf 8f6f 	isb	sy
		}
	}
}
   3ed64:	bd70      	pop	{r4, r5, r6, pc}
   3ed66:	bf00      	nop
   3ed68:	20025b40 	.word	0x20025b40
   3ed6c:	00048d7b 	.word	0x00048d7b
   3ed70:	00048da1 	.word	0x00048da1
   3ed74:	0004825b 	.word	0x0004825b
   3ed78:	00048db6 	.word	0x00048db6
   3ed7c:	00048dce 	.word	0x00048dce
   3ed80:	00048de5 	.word	0x00048de5

0003ed84 <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   3ed84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ed88:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   3ed8a:	f7fe fd1b 	bl	3d7c4 <z_time_slice>
	__asm__ volatile(
   3ed8e:	f04f 0320 	mov.w	r3, #32
   3ed92:	f3ef 8711 	mrs	r7, BASEPRI
   3ed96:	f383 8811 	msr	BASEPRI, r3
   3ed9a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ed9e:	4853      	ldr	r0, [pc, #332]	; (3eeec <z_clock_announce+0x168>)
   3eda0:	f7ff fc50 	bl	3e644 <z_spin_lock_valid>
   3eda4:	b968      	cbnz	r0, 3edc2 <z_clock_announce+0x3e>
   3eda6:	235c      	movs	r3, #92	; 0x5c
   3eda8:	4a51      	ldr	r2, [pc, #324]	; (3eef0 <z_clock_announce+0x16c>)
   3edaa:	4952      	ldr	r1, [pc, #328]	; (3eef4 <z_clock_announce+0x170>)
   3edac:	4852      	ldr	r0, [pc, #328]	; (3eef8 <z_clock_announce+0x174>)
   3edae:	f002 ff1b 	bl	41be8 <printk>
   3edb2:	494e      	ldr	r1, [pc, #312]	; (3eeec <z_clock_announce+0x168>)
   3edb4:	4851      	ldr	r0, [pc, #324]	; (3eefc <z_clock_announce+0x178>)
   3edb6:	f002 ff17 	bl	41be8 <printk>
   3edba:	215c      	movs	r1, #92	; 0x5c
   3edbc:	484c      	ldr	r0, [pc, #304]	; (3eef0 <z_clock_announce+0x16c>)
   3edbe:	f003 f92d 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3edc2:	4e4f      	ldr	r6, [pc, #316]	; (3ef00 <z_clock_announce+0x17c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   3edc4:	4d4f      	ldr	r5, [pc, #316]	; (3ef04 <z_clock_announce+0x180>)
   3edc6:	46b3      	mov	fp, r6
   3edc8:	4848      	ldr	r0, [pc, #288]	; (3eeec <z_clock_announce+0x168>)
	return list->head == list;
   3edca:	f8df a144 	ldr.w	sl, [pc, #324]	; 3ef10 <z_clock_announce+0x18c>
   3edce:	f7ff fc57 	bl	3e680 <z_spin_lock_set_owner>
   3edd2:	602c      	str	r4, [r5, #0]
   3edd4:	f8da 4000 	ldr.w	r4, [sl]
   3edd8:	f8d5 c000 	ldr.w	ip, [r5]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3eddc:	4554      	cmp	r4, sl
   3edde:	e9d6 2300 	ldrd	r2, r3, [r6]
   3ede2:	46e0      	mov	r8, ip
   3ede4:	e9cd 2300 	strd	r2, r3, [sp]
   3ede8:	ea4f 79ec 	mov.w	r9, ip, asr #31
   3edec:	d00c      	beq.n	3ee08 <z_clock_announce+0x84>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   3edee:	b15c      	cbz	r4, 3ee08 <z_clock_announce+0x84>
   3edf0:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   3edf4:	458c      	cmp	ip, r1
   3edf6:	eb79 0302 	sbcs.w	r3, r9, r2
   3edfa:	da2d      	bge.n	3ee58 <z_clock_announce+0xd4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   3edfc:	ebb1 000c 	subs.w	r0, r1, ip
   3ee00:	eb62 0109 	sbc.w	r1, r2, r9
   3ee04:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   3ee08:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   3ee0a:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   3ee0c:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
   3ee0e:	eb18 0203 	adds.w	r2, r8, r3
   3ee12:	9b01      	ldr	r3, [sp, #4]
   3ee14:	eb49 0303 	adc.w	r3, r9, r3
   3ee18:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
   3ee1c:	f7ff fd5a 	bl	3e8d4 <next_timeout>
   3ee20:	4621      	mov	r1, r4
   3ee22:	f7e7 fd07 	bl	26834 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ee26:	4831      	ldr	r0, [pc, #196]	; (3eeec <z_clock_announce+0x168>)
   3ee28:	f7ff fc1a 	bl	3e660 <z_spin_unlock_valid>
   3ee2c:	b968      	cbnz	r0, 3ee4a <z_clock_announce+0xc6>
   3ee2e:	2384      	movs	r3, #132	; 0x84
   3ee30:	4a2f      	ldr	r2, [pc, #188]	; (3eef0 <z_clock_announce+0x16c>)
   3ee32:	4935      	ldr	r1, [pc, #212]	; (3ef08 <z_clock_announce+0x184>)
   3ee34:	4830      	ldr	r0, [pc, #192]	; (3eef8 <z_clock_announce+0x174>)
   3ee36:	f002 fed7 	bl	41be8 <printk>
   3ee3a:	492c      	ldr	r1, [pc, #176]	; (3eeec <z_clock_announce+0x168>)
   3ee3c:	4833      	ldr	r0, [pc, #204]	; (3ef0c <z_clock_announce+0x188>)
   3ee3e:	f002 fed3 	bl	41be8 <printk>
   3ee42:	2184      	movs	r1, #132	; 0x84
   3ee44:	482a      	ldr	r0, [pc, #168]	; (3eef0 <z_clock_announce+0x16c>)
   3ee46:	f003 f8e9 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ee4a:	f387 8811 	msr	BASEPRI, r7
   3ee4e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3ee52:	b003      	add	sp, #12
   3ee54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   3ee58:	2200      	movs	r2, #0
		curr_tick += dt;
   3ee5a:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   3ee5e:	2300      	movs	r3, #0
		curr_tick += dt;
   3ee60:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   3ee64:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   3ee68:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   3ee6c:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   3ee6e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   3ee72:	4620      	mov	r0, r4
		curr_tick += dt;
   3ee74:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   3ee78:	f7ff fd12 	bl	3e8a0 <remove_timeout>
   3ee7c:	481b      	ldr	r0, [pc, #108]	; (3eeec <z_clock_announce+0x168>)
   3ee7e:	f7ff fbef 	bl	3e660 <z_spin_unlock_valid>
   3ee82:	b968      	cbnz	r0, 3eea0 <z_clock_announce+0x11c>
   3ee84:	2384      	movs	r3, #132	; 0x84
   3ee86:	4a1a      	ldr	r2, [pc, #104]	; (3eef0 <z_clock_announce+0x16c>)
   3ee88:	491f      	ldr	r1, [pc, #124]	; (3ef08 <z_clock_announce+0x184>)
   3ee8a:	481b      	ldr	r0, [pc, #108]	; (3eef8 <z_clock_announce+0x174>)
   3ee8c:	f002 feac 	bl	41be8 <printk>
   3ee90:	4916      	ldr	r1, [pc, #88]	; (3eeec <z_clock_announce+0x168>)
   3ee92:	481e      	ldr	r0, [pc, #120]	; (3ef0c <z_clock_announce+0x188>)
   3ee94:	f002 fea8 	bl	41be8 <printk>
   3ee98:	2184      	movs	r1, #132	; 0x84
   3ee9a:	4815      	ldr	r0, [pc, #84]	; (3eef0 <z_clock_announce+0x16c>)
   3ee9c:	f003 f8be 	bl	4201c <assert_post_action>
   3eea0:	f387 8811 	msr	BASEPRI, r7
   3eea4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3eea8:	68a3      	ldr	r3, [r4, #8]
   3eeaa:	4620      	mov	r0, r4
   3eeac:	4798      	blx	r3
	__asm__ volatile(
   3eeae:	f04f 0320 	mov.w	r3, #32
   3eeb2:	f3ef 8711 	mrs	r7, BASEPRI
   3eeb6:	f383 8811 	msr	BASEPRI, r3
   3eeba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eebe:	480b      	ldr	r0, [pc, #44]	; (3eeec <z_clock_announce+0x168>)
   3eec0:	f7ff fbc0 	bl	3e644 <z_spin_lock_valid>
   3eec4:	b968      	cbnz	r0, 3eee2 <z_clock_announce+0x15e>
   3eec6:	235c      	movs	r3, #92	; 0x5c
   3eec8:	4a09      	ldr	r2, [pc, #36]	; (3eef0 <z_clock_announce+0x16c>)
   3eeca:	490a      	ldr	r1, [pc, #40]	; (3eef4 <z_clock_announce+0x170>)
   3eecc:	480a      	ldr	r0, [pc, #40]	; (3eef8 <z_clock_announce+0x174>)
   3eece:	f002 fe8b 	bl	41be8 <printk>
   3eed2:	4906      	ldr	r1, [pc, #24]	; (3eeec <z_clock_announce+0x168>)
   3eed4:	4809      	ldr	r0, [pc, #36]	; (3eefc <z_clock_announce+0x178>)
   3eed6:	f002 fe87 	bl	41be8 <printk>
   3eeda:	215c      	movs	r1, #92	; 0x5c
   3eedc:	4804      	ldr	r0, [pc, #16]	; (3eef0 <z_clock_announce+0x16c>)
   3eede:	f003 f89d 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3eee2:	4802      	ldr	r0, [pc, #8]	; (3eeec <z_clock_announce+0x168>)
   3eee4:	f7ff fbcc 	bl	3e680 <z_spin_lock_set_owner>
	return k;
   3eee8:	e774      	b.n	3edd4 <z_clock_announce+0x50>
   3eeea:	bf00      	nop
   3eeec:	20025b40 	.word	0x20025b40
   3eef0:	00048d7b 	.word	0x00048d7b
   3eef4:	00048da1 	.word	0x00048da1
   3eef8:	0004825b 	.word	0x0004825b
   3eefc:	00048db6 	.word	0x00048db6
   3ef00:	20024590 	.word	0x20024590
   3ef04:	20025b3c 	.word	0x20025b3c
   3ef08:	00048dce 	.word	0x00048dce
   3ef0c:	00048de5 	.word	0x00048de5
   3ef10:	20020778 	.word	0x20020778

0003ef14 <z_tick_get>:

int64_t z_tick_get(void)
{
   3ef14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ef18:	f04f 0320 	mov.w	r3, #32
   3ef1c:	f3ef 8611 	mrs	r6, BASEPRI
   3ef20:	f383 8811 	msr	BASEPRI, r3
   3ef24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ef28:	481b      	ldr	r0, [pc, #108]	; (3ef98 <z_tick_get+0x84>)
   3ef2a:	f7ff fb8b 	bl	3e644 <z_spin_lock_valid>
   3ef2e:	b968      	cbnz	r0, 3ef4c <z_tick_get+0x38>
   3ef30:	235c      	movs	r3, #92	; 0x5c
   3ef32:	4a1a      	ldr	r2, [pc, #104]	; (3ef9c <z_tick_get+0x88>)
   3ef34:	491a      	ldr	r1, [pc, #104]	; (3efa0 <z_tick_get+0x8c>)
   3ef36:	481b      	ldr	r0, [pc, #108]	; (3efa4 <z_tick_get+0x90>)
   3ef38:	f002 fe56 	bl	41be8 <printk>
   3ef3c:	4916      	ldr	r1, [pc, #88]	; (3ef98 <z_tick_get+0x84>)
   3ef3e:	481a      	ldr	r0, [pc, #104]	; (3efa8 <z_tick_get+0x94>)
   3ef40:	f002 fe52 	bl	41be8 <printk>
   3ef44:	215c      	movs	r1, #92	; 0x5c
   3ef46:	4815      	ldr	r0, [pc, #84]	; (3ef9c <z_tick_get+0x88>)
   3ef48:	f003 f868 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3ef4c:	4812      	ldr	r0, [pc, #72]	; (3ef98 <z_tick_get+0x84>)
   3ef4e:	f7ff fb97 	bl	3e680 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3ef52:	f7e7 fcd5 	bl	26900 <z_clock_elapsed>
   3ef56:	4b15      	ldr	r3, [pc, #84]	; (3efac <z_tick_get+0x98>)
   3ef58:	e9d3 4500 	ldrd	r4, r5, [r3]
   3ef5c:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ef5e:	480e      	ldr	r0, [pc, #56]	; (3ef98 <z_tick_get+0x84>)
   3ef60:	f145 0800 	adc.w	r8, r5, #0
   3ef64:	f7ff fb7c 	bl	3e660 <z_spin_unlock_valid>
   3ef68:	b968      	cbnz	r0, 3ef86 <z_tick_get+0x72>
   3ef6a:	2384      	movs	r3, #132	; 0x84
   3ef6c:	4a0b      	ldr	r2, [pc, #44]	; (3ef9c <z_tick_get+0x88>)
   3ef6e:	4910      	ldr	r1, [pc, #64]	; (3efb0 <z_tick_get+0x9c>)
   3ef70:	480c      	ldr	r0, [pc, #48]	; (3efa4 <z_tick_get+0x90>)
   3ef72:	f002 fe39 	bl	41be8 <printk>
   3ef76:	4908      	ldr	r1, [pc, #32]	; (3ef98 <z_tick_get+0x84>)
   3ef78:	480e      	ldr	r0, [pc, #56]	; (3efb4 <z_tick_get+0xa0>)
   3ef7a:	f002 fe35 	bl	41be8 <printk>
   3ef7e:	2184      	movs	r1, #132	; 0x84
   3ef80:	4806      	ldr	r0, [pc, #24]	; (3ef9c <z_tick_get+0x88>)
   3ef82:	f003 f84b 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3ef86:	f386 8811 	msr	BASEPRI, r6
   3ef8a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3ef8e:	4638      	mov	r0, r7
   3ef90:	4641      	mov	r1, r8
   3ef92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ef96:	bf00      	nop
   3ef98:	20025b40 	.word	0x20025b40
   3ef9c:	00048d7b 	.word	0x00048d7b
   3efa0:	00048da1 	.word	0x00048da1
   3efa4:	0004825b 	.word	0x0004825b
   3efa8:	00048db6 	.word	0x00048db6
   3efac:	20024590 	.word	0x20024590
   3efb0:	00048dce 	.word	0x00048dce
   3efb4:	00048de5 	.word	0x00048de5

0003efb8 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   3efb8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   3efba:	6883      	ldr	r3, [r0, #8]
{
   3efbc:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   3efbe:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   3efc0:	b964      	cbnz	r4, 3efdc <k_poll_poller_cb+0x24>
   3efc2:	4919      	ldr	r1, [pc, #100]	; (3f028 <k_poll_poller_cb+0x70>)
   3efc4:	23df      	movs	r3, #223	; 0xdf
   3efc6:	4a19      	ldr	r2, [pc, #100]	; (3f02c <k_poll_poller_cb+0x74>)
   3efc8:	4819      	ldr	r0, [pc, #100]	; (3f030 <k_poll_poller_cb+0x78>)
   3efca:	f002 fe0d 	bl	41be8 <printk>
   3efce:	4819      	ldr	r0, [pc, #100]	; (3f034 <k_poll_poller_cb+0x7c>)
   3efd0:	f002 fe0a 	bl	41be8 <printk>
   3efd4:	21df      	movs	r1, #223	; 0xdf
   3efd6:	4815      	ldr	r0, [pc, #84]	; (3f02c <k_poll_poller_cb+0x74>)
   3efd8:	f003 f820 	bl	4201c <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   3efdc:	7b63      	ldrb	r3, [r4, #13]
   3efde:	079a      	lsls	r2, r3, #30
   3efe0:	d401      	bmi.n	3efe6 <k_poll_poller_cb+0x2e>
		return 0;
   3efe2:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   3efe4:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   3efe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3efea:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   3efee:	f06f 0001 	mvn.w	r0, #1
   3eff2:	428b      	cmp	r3, r1
   3eff4:	bf08      	it	eq
   3eff6:	4282      	cmpeq	r2, r0
   3eff8:	d012      	beq.n	3f020 <k_poll_poller_cb+0x68>
	z_unpend_thread(thread);
   3effa:	4620      	mov	r0, r4
   3effc:	f7fe f934 	bl	3d268 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3f000:	2d08      	cmp	r5, #8
   3f002:	bf0c      	ite	eq
   3f004:	f06f 0303 	mvneq.w	r3, #3
   3f008:	2300      	movne	r3, #0
   3f00a:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3f00c:	7b63      	ldrb	r3, [r4, #13]
   3f00e:	06db      	lsls	r3, r3, #27
   3f010:	d1e7      	bne.n	3efe2 <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   3f012:	69a5      	ldr	r5, [r4, #24]
   3f014:	2d00      	cmp	r5, #0
   3f016:	d1e4      	bne.n	3efe2 <k_poll_poller_cb+0x2a>
	z_ready_thread(thread);
   3f018:	4620      	mov	r0, r4
   3f01a:	f7fe fa5b 	bl	3d4d4 <z_ready_thread>
	return 0;
   3f01e:	e7e0      	b.n	3efe2 <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   3f020:	f06f 000a 	mvn.w	r0, #10
   3f024:	e7de      	b.n	3efe4 <k_poll_poller_cb+0x2c>
   3f026:	bf00      	nop
   3f028:	0004f13e 	.word	0x0004f13e
   3f02c:	0004f11d 	.word	0x0004f11d
   3f030:	0004825b 	.word	0x0004825b
   3f034:	0004f154 	.word	0x0004f154

0003f038 <clear_event_registrations>:
{
   3f038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f03c:	2414      	movs	r4, #20
   3f03e:	4680      	mov	r8, r0
   3f040:	4617      	mov	r7, r2
	while (num_events--) {
   3f042:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3f046:	4d48      	ldr	r5, [pc, #288]	; (3f168 <clear_event_registrations+0x130>)
   3f048:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3f1a4 <clear_event_registrations+0x16c>
   3f04c:	4e47      	ldr	r6, [pc, #284]	; (3f16c <clear_event_registrations+0x134>)
	while (num_events--) {
   3f04e:	4544      	cmp	r4, r8
   3f050:	d101      	bne.n	3f056 <clear_event_registrations+0x1e>
}
   3f052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3f056:	2300      	movs	r3, #0
   3f058:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3f05c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3f060:	f003 030f 	and.w	r3, r3, #15
   3f064:	2b04      	cmp	r3, #4
   3f066:	d83d      	bhi.n	3f0e4 <clear_event_registrations+0xac>
   3f068:	e8df f003 	tbb	[pc, r3]
   3f06c:	3c032d49 	.word	0x3c032d49
   3f070:	1e          	.byte	0x1e
   3f071:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3f072:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3f076:	b963      	cbnz	r3, 3f092 <clear_event_registrations+0x5a>
   3f078:	493d      	ldr	r1, [pc, #244]	; (3f170 <clear_event_registrations+0x138>)
   3f07a:	2395      	movs	r3, #149	; 0x95
   3f07c:	462a      	mov	r2, r5
   3f07e:	4630      	mov	r0, r6
   3f080:	f002 fdb2 	bl	41be8 <printk>
   3f084:	483b      	ldr	r0, [pc, #236]	; (3f174 <clear_event_registrations+0x13c>)
   3f086:	f002 fdaf 	bl	41be8 <printk>
   3f08a:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3f08c:	4628      	mov	r0, r5
   3f08e:	f002 ffc5 	bl	4201c <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3f092:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3f096:	b393      	cbz	r3, 3f0fe <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3f098:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3f09c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3f09e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3f0a0:	2300      	movs	r3, #0
	node->prev = NULL;
   3f0a2:	e944 3305 	strd	r3, r3, [r4, #-20]
   3f0a6:	e02a      	b.n	3f0fe <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3f0a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3f0ac:	2b00      	cmp	r3, #0
   3f0ae:	d1f0      	bne.n	3f092 <clear_event_registrations+0x5a>
   3f0b0:	4931      	ldr	r1, [pc, #196]	; (3f178 <clear_event_registrations+0x140>)
   3f0b2:	2399      	movs	r3, #153	; 0x99
   3f0b4:	462a      	mov	r2, r5
   3f0b6:	4630      	mov	r0, r6
   3f0b8:	f002 fd96 	bl	41be8 <printk>
   3f0bc:	482f      	ldr	r0, [pc, #188]	; (3f17c <clear_event_registrations+0x144>)
   3f0be:	f002 fd93 	bl	41be8 <printk>
   3f0c2:	2199      	movs	r1, #153	; 0x99
   3f0c4:	e7e2      	b.n	3f08c <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3f0c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3f0ca:	2b00      	cmp	r3, #0
   3f0cc:	d1e1      	bne.n	3f092 <clear_event_registrations+0x5a>
   3f0ce:	492c      	ldr	r1, [pc, #176]	; (3f180 <clear_event_registrations+0x148>)
   3f0d0:	239d      	movs	r3, #157	; 0x9d
   3f0d2:	462a      	mov	r2, r5
   3f0d4:	4630      	mov	r0, r6
   3f0d6:	f002 fd87 	bl	41be8 <printk>
   3f0da:	482a      	ldr	r0, [pc, #168]	; (3f184 <clear_event_registrations+0x14c>)
   3f0dc:	f002 fd84 	bl	41be8 <printk>
   3f0e0:	219d      	movs	r1, #157	; 0x9d
   3f0e2:	e7d3      	b.n	3f08c <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3f0e4:	4649      	mov	r1, r9
   3f0e6:	23a4      	movs	r3, #164	; 0xa4
   3f0e8:	462a      	mov	r2, r5
   3f0ea:	4630      	mov	r0, r6
   3f0ec:	f002 fd7c 	bl	41be8 <printk>
   3f0f0:	4825      	ldr	r0, [pc, #148]	; (3f188 <clear_event_registrations+0x150>)
   3f0f2:	f002 fd79 	bl	41be8 <printk>
   3f0f6:	21a4      	movs	r1, #164	; 0xa4
   3f0f8:	4628      	mov	r0, r5
   3f0fa:	f002 ff8f 	bl	4201c <assert_post_action>
   3f0fe:	4823      	ldr	r0, [pc, #140]	; (3f18c <clear_event_registrations+0x154>)
   3f100:	f7ff faae 	bl	3e660 <z_spin_unlock_valid>
   3f104:	b968      	cbnz	r0, 3f122 <clear_event_registrations+0xea>
   3f106:	2384      	movs	r3, #132	; 0x84
   3f108:	4a21      	ldr	r2, [pc, #132]	; (3f190 <clear_event_registrations+0x158>)
   3f10a:	4922      	ldr	r1, [pc, #136]	; (3f194 <clear_event_registrations+0x15c>)
   3f10c:	4630      	mov	r0, r6
   3f10e:	f002 fd6b 	bl	41be8 <printk>
   3f112:	491e      	ldr	r1, [pc, #120]	; (3f18c <clear_event_registrations+0x154>)
   3f114:	4820      	ldr	r0, [pc, #128]	; (3f198 <clear_event_registrations+0x160>)
   3f116:	f002 fd67 	bl	41be8 <printk>
   3f11a:	2184      	movs	r1, #132	; 0x84
   3f11c:	481c      	ldr	r0, [pc, #112]	; (3f190 <clear_event_registrations+0x158>)
   3f11e:	f002 ff7d 	bl	4201c <assert_post_action>
   3f122:	f387 8811 	msr	BASEPRI, r7
   3f126:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3f12a:	f04f 0320 	mov.w	r3, #32
   3f12e:	f3ef 8711 	mrs	r7, BASEPRI
   3f132:	f383 8811 	msr	BASEPRI, r3
   3f136:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f13a:	4814      	ldr	r0, [pc, #80]	; (3f18c <clear_event_registrations+0x154>)
   3f13c:	f7ff fa82 	bl	3e644 <z_spin_lock_valid>
   3f140:	b968      	cbnz	r0, 3f15e <clear_event_registrations+0x126>
   3f142:	235c      	movs	r3, #92	; 0x5c
   3f144:	4a12      	ldr	r2, [pc, #72]	; (3f190 <clear_event_registrations+0x158>)
   3f146:	4915      	ldr	r1, [pc, #84]	; (3f19c <clear_event_registrations+0x164>)
   3f148:	4630      	mov	r0, r6
   3f14a:	f002 fd4d 	bl	41be8 <printk>
   3f14e:	490f      	ldr	r1, [pc, #60]	; (3f18c <clear_event_registrations+0x154>)
   3f150:	4813      	ldr	r0, [pc, #76]	; (3f1a0 <clear_event_registrations+0x168>)
   3f152:	f002 fd49 	bl	41be8 <printk>
   3f156:	215c      	movs	r1, #92	; 0x5c
   3f158:	480d      	ldr	r0, [pc, #52]	; (3f190 <clear_event_registrations+0x158>)
   3f15a:	f002 ff5f 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3f15e:	480b      	ldr	r0, [pc, #44]	; (3f18c <clear_event_registrations+0x154>)
   3f160:	f7ff fa8e 	bl	3e680 <z_spin_lock_set_owner>
	return k;
   3f164:	3c14      	subs	r4, #20
   3f166:	e772      	b.n	3f04e <clear_event_registrations+0x16>
   3f168:	0004f11d 	.word	0x0004f11d
   3f16c:	0004825b 	.word	0x0004825b
   3f170:	0004f077 	.word	0x0004f077
   3f174:	0004f091 	.word	0x0004f091
   3f178:	0004f0a6 	.word	0x0004f0a6
   3f17c:	0004f0c2 	.word	0x0004f0c2
   3f180:	0004f0d3 	.word	0x0004f0d3
   3f184:	0004f0f0 	.word	0x0004f0f0
   3f188:	0004f107 	.word	0x0004f107
   3f18c:	20025b44 	.word	0x20025b44
   3f190:	00048d7b 	.word	0x00048d7b
   3f194:	00048dce 	.word	0x00048dce
   3f198:	00048de5 	.word	0x00048de5
   3f19c:	00048da1 	.word	0x00048da1
   3f1a0:	00048db6 	.word	0x00048db6
   3f1a4:	0004edb2 	.word	0x0004edb2

0003f1a8 <register_events>:
{
   3f1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3f1ac:	2700      	movs	r7, #0
{
   3f1ae:	468a      	mov	sl, r1
   3f1b0:	4615      	mov	r5, r2
   3f1b2:	4604      	mov	r4, r0
	int events_registered = 0;
   3f1b4:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f1b6:	4e69      	ldr	r6, [pc, #420]	; (3f35c <register_events+0x1b4>)
   3f1b8:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 3f39c <register_events+0x1f4>
{
   3f1bc:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3f1be:	4557      	cmp	r7, sl
   3f1c0:	db03      	blt.n	3f1ca <register_events+0x22>
}
   3f1c2:	4648      	mov	r0, r9
   3f1c4:	b003      	add	sp, #12
   3f1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f1ca:	f04f 0320 	mov.w	r3, #32
   3f1ce:	f3ef 8b11 	mrs	fp, BASEPRI
   3f1d2:	f383 8811 	msr	BASEPRI, r3
   3f1d6:	f3bf 8f6f 	isb	sy
   3f1da:	4630      	mov	r0, r6
   3f1dc:	f7ff fa32 	bl	3e644 <z_spin_lock_valid>
   3f1e0:	b968      	cbnz	r0, 3f1fe <register_events+0x56>
   3f1e2:	235c      	movs	r3, #92	; 0x5c
   3f1e4:	4642      	mov	r2, r8
   3f1e6:	495e      	ldr	r1, [pc, #376]	; (3f360 <register_events+0x1b8>)
   3f1e8:	485e      	ldr	r0, [pc, #376]	; (3f364 <register_events+0x1bc>)
   3f1ea:	f002 fcfd 	bl	41be8 <printk>
   3f1ee:	4631      	mov	r1, r6
   3f1f0:	485d      	ldr	r0, [pc, #372]	; (3f368 <register_events+0x1c0>)
   3f1f2:	f002 fcf9 	bl	41be8 <printk>
   3f1f6:	215c      	movs	r1, #92	; 0x5c
   3f1f8:	4640      	mov	r0, r8
   3f1fa:	f002 ff0f 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3f1fe:	4630      	mov	r0, r6
   3f200:	f7ff fa3e 	bl	3e680 <z_spin_lock_set_owner>
	switch (event->type) {
   3f204:	7b63      	ldrb	r3, [r4, #13]
   3f206:	f003 030f 	and.w	r3, r3, #15
   3f20a:	2b04      	cmp	r3, #4
   3f20c:	d844      	bhi.n	3f298 <register_events+0xf0>
   3f20e:	e8df f003 	tbb	[pc, r3]
   3f212:	3d2d      	.short	0x3d2d
   3f214:	4303      	.short	0x4303
   3f216:	2a          	.byte	0x2a
   3f217:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   3f218:	6923      	ldr	r3, [r4, #16]
   3f21a:	689b      	ldr	r3, [r3, #8]
   3f21c:	b333      	cbz	r3, 3f26c <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3f21e:	2202      	movs	r2, #2
	event->poller = NULL;
   3f220:	2100      	movs	r1, #0
	event->state |= state;
   3f222:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3f224:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3f226:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3f22a:	4302      	orrs	r2, r0
   3f22c:	f362 3310 	bfi	r3, r2, #12, #5
   3f230:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3f232:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f234:	4630      	mov	r0, r6
   3f236:	f7ff fa13 	bl	3e660 <z_spin_unlock_valid>
   3f23a:	b968      	cbnz	r0, 3f258 <register_events+0xb0>
   3f23c:	2384      	movs	r3, #132	; 0x84
   3f23e:	4642      	mov	r2, r8
   3f240:	494a      	ldr	r1, [pc, #296]	; (3f36c <register_events+0x1c4>)
   3f242:	4848      	ldr	r0, [pc, #288]	; (3f364 <register_events+0x1bc>)
   3f244:	f002 fcd0 	bl	41be8 <printk>
   3f248:	4631      	mov	r1, r6
   3f24a:	4849      	ldr	r0, [pc, #292]	; (3f370 <register_events+0x1c8>)
   3f24c:	f002 fccc 	bl	41be8 <printk>
   3f250:	2184      	movs	r1, #132	; 0x84
   3f252:	4640      	mov	r0, r8
   3f254:	f002 fee2 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3f258:	f38b 8811 	msr	BASEPRI, fp
   3f25c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3f260:	3701      	adds	r7, #1
   3f262:	3414      	adds	r4, #20
   3f264:	e7ab      	b.n	3f1be <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   3f266:	6923      	ldr	r3, [r4, #16]
   3f268:	681b      	ldr	r3, [r3, #0]
   3f26a:	bb33      	cbnz	r3, 3f2ba <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   3f26c:	9b01      	ldr	r3, [sp, #4]
   3f26e:	2b00      	cmp	r3, #0
   3f270:	d1e0      	bne.n	3f234 <register_events+0x8c>
   3f272:	782b      	ldrb	r3, [r5, #0]
   3f274:	2b00      	cmp	r3, #0
   3f276:	d0dd      	beq.n	3f234 <register_events+0x8c>
	switch (event->type) {
   3f278:	7b63      	ldrb	r3, [r4, #13]
   3f27a:	f003 030f 	and.w	r3, r3, #15
   3f27e:	2b04      	cmp	r3, #4
   3f280:	d85d      	bhi.n	3f33e <register_events+0x196>
   3f282:	e8df f003 	tbb	[pc, r3]
   3f286:	4931      	.short	0x4931
   3f288:	5c1c      	.short	0x5c1c
   3f28a:	35          	.byte	0x35
   3f28b:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3f28c:	6923      	ldr	r3, [r4, #16]
   3f28e:	689b      	ldr	r3, [r3, #8]
   3f290:	2b00      	cmp	r3, #0
   3f292:	d0eb      	beq.n	3f26c <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   3f294:	2201      	movs	r2, #1
   3f296:	e7c3      	b.n	3f220 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3f298:	234f      	movs	r3, #79	; 0x4f
   3f29a:	4a36      	ldr	r2, [pc, #216]	; (3f374 <register_events+0x1cc>)
   3f29c:	4936      	ldr	r1, [pc, #216]	; (3f378 <register_events+0x1d0>)
   3f29e:	4831      	ldr	r0, [pc, #196]	; (3f364 <register_events+0x1bc>)
   3f2a0:	f002 fca2 	bl	41be8 <printk>
   3f2a4:	7b61      	ldrb	r1, [r4, #13]
   3f2a6:	4835      	ldr	r0, [pc, #212]	; (3f37c <register_events+0x1d4>)
   3f2a8:	f001 010f 	and.w	r1, r1, #15
   3f2ac:	f002 fc9c 	bl	41be8 <printk>
   3f2b0:	214f      	movs	r1, #79	; 0x4f
   3f2b2:	4830      	ldr	r0, [pc, #192]	; (3f374 <register_events+0x1cc>)
   3f2b4:	f002 feb2 	bl	4201c <assert_post_action>
		break;
   3f2b8:	e7d8      	b.n	3f26c <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3f2ba:	2204      	movs	r2, #4
   3f2bc:	e7b0      	b.n	3f220 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3f2be:	6923      	ldr	r3, [r4, #16]
   3f2c0:	b963      	cbnz	r3, 3f2dc <register_events+0x134>
   3f2c2:	492f      	ldr	r1, [pc, #188]	; (3f380 <register_events+0x1d8>)
   3f2c4:	2374      	movs	r3, #116	; 0x74
   3f2c6:	4a2b      	ldr	r2, [pc, #172]	; (3f374 <register_events+0x1cc>)
   3f2c8:	4826      	ldr	r0, [pc, #152]	; (3f364 <register_events+0x1bc>)
   3f2ca:	f002 fc8d 	bl	41be8 <printk>
   3f2ce:	482d      	ldr	r0, [pc, #180]	; (3f384 <register_events+0x1dc>)
   3f2d0:	f002 fc8a 	bl	41be8 <printk>
   3f2d4:	2174      	movs	r1, #116	; 0x74
   3f2d6:	4827      	ldr	r0, [pc, #156]	; (3f374 <register_events+0x1cc>)
   3f2d8:	f002 fea0 	bl	4201c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3f2dc:	462a      	mov	r2, r5
   3f2de:	4621      	mov	r1, r4
   3f2e0:	6920      	ldr	r0, [r4, #16]
   3f2e2:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3f2e4:	f005 ff11 	bl	4510a <add_event>
	event->poller = poller;
   3f2e8:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   3f2ea:	f109 0901 	add.w	r9, r9, #1
   3f2ee:	e7a1      	b.n	3f234 <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3f2f0:	6923      	ldr	r3, [r4, #16]
   3f2f2:	b963      	cbnz	r3, 3f30e <register_events+0x166>
   3f2f4:	4924      	ldr	r1, [pc, #144]	; (3f388 <register_events+0x1e0>)
   3f2f6:	2378      	movs	r3, #120	; 0x78
   3f2f8:	4a1e      	ldr	r2, [pc, #120]	; (3f374 <register_events+0x1cc>)
   3f2fa:	481a      	ldr	r0, [pc, #104]	; (3f364 <register_events+0x1bc>)
   3f2fc:	f002 fc74 	bl	41be8 <printk>
   3f300:	4822      	ldr	r0, [pc, #136]	; (3f38c <register_events+0x1e4>)
   3f302:	f002 fc71 	bl	41be8 <printk>
   3f306:	2178      	movs	r1, #120	; 0x78
   3f308:	481a      	ldr	r0, [pc, #104]	; (3f374 <register_events+0x1cc>)
   3f30a:	f002 fe87 	bl	4201c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3f30e:	6920      	ldr	r0, [r4, #16]
   3f310:	462a      	mov	r2, r5
   3f312:	4621      	mov	r1, r4
   3f314:	3014      	adds	r0, #20
   3f316:	e7e5      	b.n	3f2e4 <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3f318:	6923      	ldr	r3, [r4, #16]
   3f31a:	b963      	cbnz	r3, 3f336 <register_events+0x18e>
   3f31c:	491c      	ldr	r1, [pc, #112]	; (3f390 <register_events+0x1e8>)
   3f31e:	237c      	movs	r3, #124	; 0x7c
   3f320:	4a14      	ldr	r2, [pc, #80]	; (3f374 <register_events+0x1cc>)
   3f322:	4810      	ldr	r0, [pc, #64]	; (3f364 <register_events+0x1bc>)
   3f324:	f002 fc60 	bl	41be8 <printk>
   3f328:	481a      	ldr	r0, [pc, #104]	; (3f394 <register_events+0x1ec>)
   3f32a:	f002 fc5d 	bl	41be8 <printk>
   3f32e:	217c      	movs	r1, #124	; 0x7c
   3f330:	4810      	ldr	r0, [pc, #64]	; (3f374 <register_events+0x1cc>)
   3f332:	f002 fe73 	bl	4201c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3f336:	462a      	mov	r2, r5
   3f338:	4621      	mov	r1, r4
   3f33a:	6920      	ldr	r0, [r4, #16]
   3f33c:	e7d2      	b.n	3f2e4 <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   3f33e:	2383      	movs	r3, #131	; 0x83
   3f340:	4a0c      	ldr	r2, [pc, #48]	; (3f374 <register_events+0x1cc>)
   3f342:	490d      	ldr	r1, [pc, #52]	; (3f378 <register_events+0x1d0>)
   3f344:	4807      	ldr	r0, [pc, #28]	; (3f364 <register_events+0x1bc>)
   3f346:	f002 fc4f 	bl	41be8 <printk>
   3f34a:	4813      	ldr	r0, [pc, #76]	; (3f398 <register_events+0x1f0>)
   3f34c:	f002 fc4c 	bl	41be8 <printk>
   3f350:	2183      	movs	r1, #131	; 0x83
   3f352:	4808      	ldr	r0, [pc, #32]	; (3f374 <register_events+0x1cc>)
   3f354:	f002 fe62 	bl	4201c <assert_post_action>
		break;
   3f358:	e7c6      	b.n	3f2e8 <register_events+0x140>
   3f35a:	bf00      	nop
   3f35c:	20025b44 	.word	0x20025b44
   3f360:	00048da1 	.word	0x00048da1
   3f364:	0004825b 	.word	0x0004825b
   3f368:	00048db6 	.word	0x00048db6
   3f36c:	00048dce 	.word	0x00048dce
   3f370:	00048de5 	.word	0x00048de5
   3f374:	0004f11d 	.word	0x0004f11d
   3f378:	0004edb2 	.word	0x0004edb2
   3f37c:	0004f173 	.word	0x0004f173
   3f380:	0004f077 	.word	0x0004f077
   3f384:	0004f091 	.word	0x0004f091
   3f388:	0004f0a6 	.word	0x0004f0a6
   3f38c:	0004f0c2 	.word	0x0004f0c2
   3f390:	0004f0d3 	.word	0x0004f0d3
   3f394:	0004f0f0 	.word	0x0004f0f0
   3f398:	0004f107 	.word	0x0004f107
   3f39c:	00048d7b 	.word	0x00048d7b

0003f3a0 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   3f3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f3a4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   3f3a6:	2301      	movs	r3, #1
{
   3f3a8:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   3f3aa:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   3f3ae:	4b73      	ldr	r3, [pc, #460]	; (3f57c <z_impl_k_poll+0x1dc>)
{
   3f3b0:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   3f3b2:	689b      	ldr	r3, [r3, #8]
{
   3f3b4:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   3f3b6:	9306      	str	r3, [sp, #24]
   3f3b8:	4b71      	ldr	r3, [pc, #452]	; (3f580 <z_impl_k_poll+0x1e0>)
{
   3f3ba:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   3f3bc:	9307      	str	r3, [sp, #28]
   3f3be:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   3f3c2:	b163      	cbz	r3, 3f3de <z_impl_k_poll+0x3e>
   3f3c4:	496f      	ldr	r1, [pc, #444]	; (3f584 <z_impl_k_poll+0x1e4>)
   3f3c6:	23ff      	movs	r3, #255	; 0xff
   3f3c8:	4a6f      	ldr	r2, [pc, #444]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f3ca:	4870      	ldr	r0, [pc, #448]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f3cc:	f002 fc0c 	bl	41be8 <printk>
   3f3d0:	486f      	ldr	r0, [pc, #444]	; (3f590 <z_impl_k_poll+0x1f0>)
   3f3d2:	f002 fc09 	bl	41be8 <printk>
   3f3d6:	21ff      	movs	r1, #255	; 0xff
   3f3d8:	486b      	ldr	r0, [pc, #428]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f3da:	f002 fe1f 	bl	4201c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3f3de:	b974      	cbnz	r4, 3f3fe <z_impl_k_poll+0x5e>
   3f3e0:	496c      	ldr	r1, [pc, #432]	; (3f594 <z_impl_k_poll+0x1f4>)
   3f3e2:	f44f 7380 	mov.w	r3, #256	; 0x100
   3f3e6:	4a68      	ldr	r2, [pc, #416]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f3e8:	4868      	ldr	r0, [pc, #416]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f3ea:	f002 fbfd 	bl	41be8 <printk>
   3f3ee:	486a      	ldr	r0, [pc, #424]	; (3f598 <z_impl_k_poll+0x1f8>)
   3f3f0:	f002 fbfa 	bl	41be8 <printk>
   3f3f4:	f44f 7180 	mov.w	r1, #256	; 0x100
   3f3f8:	4863      	ldr	r0, [pc, #396]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f3fa:	f002 fe0f 	bl	4201c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3f3fe:	2d00      	cmp	r5, #0
   3f400:	da0e      	bge.n	3f420 <z_impl_k_poll+0x80>
   3f402:	4966      	ldr	r1, [pc, #408]	; (3f59c <z_impl_k_poll+0x1fc>)
   3f404:	f240 1301 	movw	r3, #257	; 0x101
   3f408:	4a5f      	ldr	r2, [pc, #380]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f40a:	4860      	ldr	r0, [pc, #384]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f40c:	f002 fbec 	bl	41be8 <printk>
   3f410:	4863      	ldr	r0, [pc, #396]	; (3f5a0 <z_impl_k_poll+0x200>)
   3f412:	f002 fbe9 	bl	41be8 <printk>
   3f416:	f240 1101 	movw	r1, #257	; 0x101
   3f41a:	485b      	ldr	r0, [pc, #364]	; (3f588 <z_impl_k_poll+0x1e8>)
   3f41c:	f002 fdfe 	bl	4201c <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   3f420:	ea56 0307 	orrs.w	r3, r6, r7
   3f424:	bf0c      	ite	eq
   3f426:	2301      	moveq	r3, #1
   3f428:	2300      	movne	r3, #0
   3f42a:	aa05      	add	r2, sp, #20
   3f42c:	4629      	mov	r1, r5
   3f42e:	4620      	mov	r0, r4
   3f430:	f7ff feba 	bl	3f1a8 <register_events>
   3f434:	4680      	mov	r8, r0
	__asm__ volatile(
   3f436:	f04f 0320 	mov.w	r3, #32
   3f43a:	f3ef 8511 	mrs	r5, BASEPRI
   3f43e:	f383 8811 	msr	BASEPRI, r3
   3f442:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f446:	4857      	ldr	r0, [pc, #348]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f448:	f7ff f8fc 	bl	3e644 <z_spin_lock_valid>
   3f44c:	b968      	cbnz	r0, 3f46a <z_impl_k_poll+0xca>
   3f44e:	235c      	movs	r3, #92	; 0x5c
   3f450:	4a55      	ldr	r2, [pc, #340]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f452:	4956      	ldr	r1, [pc, #344]	; (3f5ac <z_impl_k_poll+0x20c>)
   3f454:	484d      	ldr	r0, [pc, #308]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f456:	f002 fbc7 	bl	41be8 <printk>
   3f45a:	4952      	ldr	r1, [pc, #328]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f45c:	4854      	ldr	r0, [pc, #336]	; (3f5b0 <z_impl_k_poll+0x210>)
   3f45e:	f002 fbc3 	bl	41be8 <printk>
   3f462:	215c      	movs	r1, #92	; 0x5c
   3f464:	4850      	ldr	r0, [pc, #320]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f466:	f002 fdd9 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3f46a:	484e      	ldr	r0, [pc, #312]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f46c:	f7ff f908 	bl	3e680 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   3f470:	f89d 3014 	ldrb.w	r3, [sp, #20]
   3f474:	b9fb      	cbnz	r3, 3f4b6 <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   3f476:	4620      	mov	r0, r4
   3f478:	462a      	mov	r2, r5
   3f47a:	4641      	mov	r1, r8
   3f47c:	f7ff fddc 	bl	3f038 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f480:	4848      	ldr	r0, [pc, #288]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f482:	f7ff f8ed 	bl	3e660 <z_spin_unlock_valid>
   3f486:	b968      	cbnz	r0, 3f4a4 <z_impl_k_poll+0x104>
   3f488:	2384      	movs	r3, #132	; 0x84
   3f48a:	4a47      	ldr	r2, [pc, #284]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f48c:	4949      	ldr	r1, [pc, #292]	; (3f5b4 <z_impl_k_poll+0x214>)
   3f48e:	483f      	ldr	r0, [pc, #252]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f490:	f002 fbaa 	bl	41be8 <printk>
   3f494:	4943      	ldr	r1, [pc, #268]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f496:	4848      	ldr	r0, [pc, #288]	; (3f5b8 <z_impl_k_poll+0x218>)
   3f498:	f002 fba6 	bl	41be8 <printk>
   3f49c:	2184      	movs	r1, #132	; 0x84
   3f49e:	4842      	ldr	r0, [pc, #264]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f4a0:	f002 fdbc 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3f4a4:	f385 8811 	msr	BASEPRI, r5
   3f4a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   3f4ac:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   3f4ae:	4628      	mov	r0, r5
   3f4b0:	b008      	add	sp, #32
   3f4b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   3f4b6:	2300      	movs	r3, #0
   3f4b8:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3f4bc:	ea56 0307 	orrs.w	r3, r6, r7
   3f4c0:	d118      	bne.n	3f4f4 <z_impl_k_poll+0x154>
   3f4c2:	4838      	ldr	r0, [pc, #224]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f4c4:	f7ff f8cc 	bl	3e660 <z_spin_unlock_valid>
   3f4c8:	b968      	cbnz	r0, 3f4e6 <z_impl_k_poll+0x146>
   3f4ca:	2384      	movs	r3, #132	; 0x84
   3f4cc:	4a36      	ldr	r2, [pc, #216]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f4ce:	4939      	ldr	r1, [pc, #228]	; (3f5b4 <z_impl_k_poll+0x214>)
   3f4d0:	482e      	ldr	r0, [pc, #184]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f4d2:	f002 fb89 	bl	41be8 <printk>
   3f4d6:	4933      	ldr	r1, [pc, #204]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f4d8:	4837      	ldr	r0, [pc, #220]	; (3f5b8 <z_impl_k_poll+0x218>)
   3f4da:	f002 fb85 	bl	41be8 <printk>
   3f4de:	2184      	movs	r1, #132	; 0x84
   3f4e0:	4831      	ldr	r0, [pc, #196]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f4e2:	f002 fd9b 	bl	4201c <assert_post_action>
   3f4e6:	f385 8811 	msr	BASEPRI, r5
   3f4ea:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3f4ee:	f06f 050a 	mvn.w	r5, #10
   3f4f2:	e7dc      	b.n	3f4ae <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3f4f4:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3f4f6:	4629      	mov	r1, r5
   3f4f8:	e9cd 6700 	strd	r6, r7, [sp]
   3f4fc:	4829      	ldr	r0, [pc, #164]	; (3f5a4 <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3f4fe:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3f502:	f7fe fbab 	bl	3dc5c <z_pend_curr>
   3f506:	4605      	mov	r5, r0
	__asm__ volatile(
   3f508:	f04f 0320 	mov.w	r3, #32
   3f50c:	f3ef 8611 	mrs	r6, BASEPRI
   3f510:	f383 8811 	msr	BASEPRI, r3
   3f514:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f518:	4822      	ldr	r0, [pc, #136]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f51a:	f7ff f893 	bl	3e644 <z_spin_lock_valid>
   3f51e:	b968      	cbnz	r0, 3f53c <z_impl_k_poll+0x19c>
   3f520:	235c      	movs	r3, #92	; 0x5c
   3f522:	4a21      	ldr	r2, [pc, #132]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f524:	4921      	ldr	r1, [pc, #132]	; (3f5ac <z_impl_k_poll+0x20c>)
   3f526:	4819      	ldr	r0, [pc, #100]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f528:	f002 fb5e 	bl	41be8 <printk>
   3f52c:	491d      	ldr	r1, [pc, #116]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f52e:	4820      	ldr	r0, [pc, #128]	; (3f5b0 <z_impl_k_poll+0x210>)
   3f530:	f002 fb5a 	bl	41be8 <printk>
   3f534:	215c      	movs	r1, #92	; 0x5c
   3f536:	481c      	ldr	r0, [pc, #112]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f538:	f002 fd70 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3f53c:	4819      	ldr	r0, [pc, #100]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f53e:	f7ff f89f 	bl	3e680 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3f542:	4620      	mov	r0, r4
   3f544:	4632      	mov	r2, r6
   3f546:	4641      	mov	r1, r8
   3f548:	f7ff fd76 	bl	3f038 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f54c:	4815      	ldr	r0, [pc, #84]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f54e:	f7ff f887 	bl	3e660 <z_spin_unlock_valid>
   3f552:	b968      	cbnz	r0, 3f570 <z_impl_k_poll+0x1d0>
   3f554:	2384      	movs	r3, #132	; 0x84
   3f556:	4a14      	ldr	r2, [pc, #80]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f558:	4916      	ldr	r1, [pc, #88]	; (3f5b4 <z_impl_k_poll+0x214>)
   3f55a:	480c      	ldr	r0, [pc, #48]	; (3f58c <z_impl_k_poll+0x1ec>)
   3f55c:	f002 fb44 	bl	41be8 <printk>
   3f560:	4910      	ldr	r1, [pc, #64]	; (3f5a4 <z_impl_k_poll+0x204>)
   3f562:	4815      	ldr	r0, [pc, #84]	; (3f5b8 <z_impl_k_poll+0x218>)
   3f564:	f002 fb40 	bl	41be8 <printk>
   3f568:	2184      	movs	r1, #132	; 0x84
   3f56a:	480f      	ldr	r0, [pc, #60]	; (3f5a8 <z_impl_k_poll+0x208>)
   3f56c:	f002 fd56 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3f570:	f386 8811 	msr	BASEPRI, r6
   3f574:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3f578:	e799      	b.n	3f4ae <z_impl_k_poll+0x10e>
   3f57a:	bf00      	nop
   3f57c:	20025af0 	.word	0x20025af0
   3f580:	0003efb9 	.word	0x0003efb9
   3f584:	0004ecdb 	.word	0x0004ecdb
   3f588:	0004f11d 	.word	0x0004f11d
   3f58c:	0004825b 	.word	0x0004825b
   3f590:	00049477 	.word	0x00049477
   3f594:	0004f190 	.word	0x0004f190
   3f598:	0004f1a6 	.word	0x0004f1a6
   3f59c:	0004f1b5 	.word	0x0004f1b5
   3f5a0:	0004f1c5 	.word	0x0004f1c5
   3f5a4:	20025b44 	.word	0x20025b44
   3f5a8:	00048d7b 	.word	0x00048d7b
   3f5ac:	00048da1 	.word	0x00048da1
   3f5b0:	00048db6 	.word	0x00048db6
   3f5b4:	00048dce 	.word	0x00048dce
   3f5b8:	00048de5 	.word	0x00048de5

0003f5bc <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   3f5bc:	b570      	push	{r4, r5, r6, lr}
   3f5be:	4604      	mov	r4, r0
   3f5c0:	460e      	mov	r6, r1
	__asm__ volatile(
   3f5c2:	f04f 0320 	mov.w	r3, #32
   3f5c6:	f3ef 8511 	mrs	r5, BASEPRI
   3f5ca:	f383 8811 	msr	BASEPRI, r3
   3f5ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f5d2:	4821      	ldr	r0, [pc, #132]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f5d4:	f7ff f836 	bl	3e644 <z_spin_lock_valid>
   3f5d8:	b968      	cbnz	r0, 3f5f6 <z_impl_k_poll_signal_raise+0x3a>
   3f5da:	235c      	movs	r3, #92	; 0x5c
   3f5dc:	4a1f      	ldr	r2, [pc, #124]	; (3f65c <z_impl_k_poll_signal_raise+0xa0>)
   3f5de:	4920      	ldr	r1, [pc, #128]	; (3f660 <z_impl_k_poll_signal_raise+0xa4>)
   3f5e0:	4820      	ldr	r0, [pc, #128]	; (3f664 <z_impl_k_poll_signal_raise+0xa8>)
   3f5e2:	f002 fb01 	bl	41be8 <printk>
   3f5e6:	491c      	ldr	r1, [pc, #112]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f5e8:	481f      	ldr	r0, [pc, #124]	; (3f668 <z_impl_k_poll_signal_raise+0xac>)
   3f5ea:	f002 fafd 	bl	41be8 <printk>
   3f5ee:	215c      	movs	r1, #92	; 0x5c
   3f5f0:	481a      	ldr	r0, [pc, #104]	; (3f65c <z_impl_k_poll_signal_raise+0xa0>)
   3f5f2:	f002 fd13 	bl	4201c <assert_post_action>
	z_spin_lock_set_owner(l);
   3f5f6:	4818      	ldr	r0, [pc, #96]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f5f8:	f7ff f842 	bl	3e680 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   3f5fc:	2101      	movs	r1, #1
	return list->head == list;
   3f5fe:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   3f600:	60e6      	str	r6, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3f602:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   3f604:	60a1      	str	r1, [r4, #8]
   3f606:	d117      	bne.n	3f638 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f608:	4813      	ldr	r0, [pc, #76]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f60a:	f7ff f829 	bl	3e660 <z_spin_unlock_valid>
   3f60e:	b968      	cbnz	r0, 3f62c <z_impl_k_poll_signal_raise+0x70>
   3f610:	2384      	movs	r3, #132	; 0x84
   3f612:	4a12      	ldr	r2, [pc, #72]	; (3f65c <z_impl_k_poll_signal_raise+0xa0>)
   3f614:	4915      	ldr	r1, [pc, #84]	; (3f66c <z_impl_k_poll_signal_raise+0xb0>)
   3f616:	4813      	ldr	r0, [pc, #76]	; (3f664 <z_impl_k_poll_signal_raise+0xa8>)
   3f618:	f002 fae6 	bl	41be8 <printk>
   3f61c:	490e      	ldr	r1, [pc, #56]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f61e:	4814      	ldr	r0, [pc, #80]	; (3f670 <z_impl_k_poll_signal_raise+0xb4>)
   3f620:	f002 fae2 	bl	41be8 <printk>
   3f624:	2184      	movs	r1, #132	; 0x84
   3f626:	480d      	ldr	r0, [pc, #52]	; (3f65c <z_impl_k_poll_signal_raise+0xa0>)
   3f628:	f002 fcf8 	bl	4201c <assert_post_action>
	__asm__ volatile(
   3f62c:	f385 8811 	msr	BASEPRI, r5
   3f630:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   3f634:	2400      	movs	r4, #0
   3f636:	e00d      	b.n	3f654 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   3f638:	e9d0 3200 	ldrd	r3, r2, [r0]
   3f63c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3f63e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3f640:	2300      	movs	r3, #0
	node->prev = NULL;
   3f642:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3f646:	f005 fd45 	bl	450d4 <signal_poll_event>

	z_reschedule(&lock, key);
   3f64a:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3f64c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   3f64e:	4802      	ldr	r0, [pc, #8]	; (3f658 <z_impl_k_poll_signal_raise+0x9c>)
   3f650:	f7fd fd20 	bl	3d094 <z_reschedule>
	return rc;
}
   3f654:	4620      	mov	r0, r4
   3f656:	bd70      	pop	{r4, r5, r6, pc}
   3f658:	20025b44 	.word	0x20025b44
   3f65c:	00048d7b 	.word	0x00048d7b
   3f660:	00048da1 	.word	0x00048da1
   3f664:	0004825b 	.word	0x0004825b
   3f668:	00048db6 	.word	0x00048db6
   3f66c:	00048dce 	.word	0x00048dce
   3f670:	00048de5 	.word	0x00048de5

0003f674 <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   3f674:	4601      	mov	r1, r0
   3f676:	4801      	ldr	r0, [pc, #4]	; (3f67c <k_malloc+0x8>)
   3f678:	f005 bd83 	b.w	45182 <k_mem_pool_malloc>
   3f67c:	20020780 	.word	0x20020780

0003f680 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   3f680:	b510      	push	{r4, lr}
   3f682:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   3f684:	f005 fc86 	bl	44f94 <k_is_in_isr>
   3f688:	b948      	cbnz	r0, 3f69e <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   3f68a:	4b06      	ldr	r3, [pc, #24]	; (3f6a4 <z_thread_malloc+0x24>)
   3f68c:	689b      	ldr	r3, [r3, #8]
   3f68e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   3f690:	b13b      	cbz	r3, 3f6a2 <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   3f692:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   3f694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   3f698:	4618      	mov	r0, r3
   3f69a:	f005 bd72 	b.w	45182 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   3f69e:	4b02      	ldr	r3, [pc, #8]	; (3f6a8 <z_thread_malloc+0x28>)
   3f6a0:	e7f7      	b.n	3f692 <z_thread_malloc+0x12>
}
   3f6a2:	bd10      	pop	{r4, pc}
   3f6a4:	20025af0 	.word	0x20025af0
   3f6a8:	20020780 	.word	0x20020780

0003f6ac <fabs>:
   3f6ac:	ec51 0b10 	vmov	r0, r1, d0
   3f6b0:	ee10 2a10 	vmov	r2, s0
   3f6b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   3f6b8:	ec43 2b10 	vmov	d0, r2, r3
   3f6bc:	4770      	bx	lr
   3f6be:	bf00      	nop

0003f6c0 <__assert_func>:
   3f6c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3f6c2:	461c      	mov	r4, r3
   3f6c4:	4b09      	ldr	r3, [pc, #36]	; (3f6ec <__assert_func+0x2c>)
   3f6c6:	4605      	mov	r5, r0
   3f6c8:	681b      	ldr	r3, [r3, #0]
   3f6ca:	68d8      	ldr	r0, [r3, #12]
   3f6cc:	b152      	cbz	r2, 3f6e4 <__assert_func+0x24>
   3f6ce:	4b08      	ldr	r3, [pc, #32]	; (3f6f0 <__assert_func+0x30>)
   3f6d0:	9100      	str	r1, [sp, #0]
   3f6d2:	4908      	ldr	r1, [pc, #32]	; (3f6f4 <__assert_func+0x34>)
   3f6d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
   3f6d8:	462b      	mov	r3, r5
   3f6da:	4622      	mov	r2, r4
   3f6dc:	f000 f80e 	bl	3f6fc <fiprintf>
   3f6e0:	f006 f85b 	bl	4579a <abort>
   3f6e4:	4b04      	ldr	r3, [pc, #16]	; (3f6f8 <__assert_func+0x38>)
   3f6e6:	461a      	mov	r2, r3
   3f6e8:	e7f2      	b.n	3f6d0 <__assert_func+0x10>
   3f6ea:	bf00      	nop
   3f6ec:	20020784 	.word	0x20020784
   3f6f0:	0004f1d2 	.word	0x0004f1d2
   3f6f4:	0004f1df 	.word	0x0004f1df
   3f6f8:	00049479 	.word	0x00049479

0003f6fc <fiprintf>:
   3f6fc:	b40e      	push	{r1, r2, r3}
   3f6fe:	b503      	push	{r0, r1, lr}
   3f700:	ab03      	add	r3, sp, #12
   3f702:	4601      	mov	r1, r0
   3f704:	4805      	ldr	r0, [pc, #20]	; (3f71c <fiprintf+0x20>)
   3f706:	f853 2b04 	ldr.w	r2, [r3], #4
   3f70a:	6800      	ldr	r0, [r0, #0]
   3f70c:	9301      	str	r3, [sp, #4]
   3f70e:	f000 f8bf 	bl	3f890 <_vfiprintf_r>
   3f712:	b002      	add	sp, #8
   3f714:	f85d eb04 	ldr.w	lr, [sp], #4
   3f718:	b003      	add	sp, #12
   3f71a:	4770      	bx	lr
   3f71c:	20020784 	.word	0x20020784

0003f720 <malloc>:
   3f720:	4b02      	ldr	r3, [pc, #8]	; (3f72c <malloc+0xc>)
   3f722:	4601      	mov	r1, r0
   3f724:	6818      	ldr	r0, [r3, #0]
   3f726:	f000 b859 	b.w	3f7dc <_malloc_r>
   3f72a:	bf00      	nop
   3f72c:	20020784 	.word	0x20020784

0003f730 <free>:
   3f730:	4b02      	ldr	r3, [pc, #8]	; (3f73c <free+0xc>)
   3f732:	4601      	mov	r1, r0
   3f734:	6818      	ldr	r0, [r3, #0]
   3f736:	f000 b803 	b.w	3f740 <_free_r>
   3f73a:	bf00      	nop
   3f73c:	20020784 	.word	0x20020784

0003f740 <_free_r>:
   3f740:	b538      	push	{r3, r4, r5, lr}
   3f742:	4605      	mov	r5, r0
   3f744:	2900      	cmp	r1, #0
   3f746:	d045      	beq.n	3f7d4 <_free_r+0x94>
   3f748:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3f74c:	1f0c      	subs	r4, r1, #4
   3f74e:	2b00      	cmp	r3, #0
   3f750:	bfb8      	it	lt
   3f752:	18e4      	addlt	r4, r4, r3
   3f754:	f001 fbe4 	bl	40f20 <__malloc_lock>
   3f758:	4a1f      	ldr	r2, [pc, #124]	; (3f7d8 <_free_r+0x98>)
   3f75a:	6813      	ldr	r3, [r2, #0]
   3f75c:	4610      	mov	r0, r2
   3f75e:	b933      	cbnz	r3, 3f76e <_free_r+0x2e>
   3f760:	6063      	str	r3, [r4, #4]
   3f762:	6014      	str	r4, [r2, #0]
   3f764:	4628      	mov	r0, r5
   3f766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3f76a:	f001 bbdf 	b.w	40f2c <__malloc_unlock>
   3f76e:	42a3      	cmp	r3, r4
   3f770:	d90c      	bls.n	3f78c <_free_r+0x4c>
   3f772:	6821      	ldr	r1, [r4, #0]
   3f774:	1862      	adds	r2, r4, r1
   3f776:	4293      	cmp	r3, r2
   3f778:	bf02      	ittt	eq
   3f77a:	681a      	ldreq	r2, [r3, #0]
   3f77c:	685b      	ldreq	r3, [r3, #4]
   3f77e:	1852      	addeq	r2, r2, r1
   3f780:	6063      	str	r3, [r4, #4]
   3f782:	bf08      	it	eq
   3f784:	6022      	streq	r2, [r4, #0]
   3f786:	6004      	str	r4, [r0, #0]
   3f788:	e7ec      	b.n	3f764 <_free_r+0x24>
   3f78a:	4613      	mov	r3, r2
   3f78c:	685a      	ldr	r2, [r3, #4]
   3f78e:	b10a      	cbz	r2, 3f794 <_free_r+0x54>
   3f790:	42a2      	cmp	r2, r4
   3f792:	d9fa      	bls.n	3f78a <_free_r+0x4a>
   3f794:	6819      	ldr	r1, [r3, #0]
   3f796:	1858      	adds	r0, r3, r1
   3f798:	42a0      	cmp	r0, r4
   3f79a:	d10b      	bne.n	3f7b4 <_free_r+0x74>
   3f79c:	6820      	ldr	r0, [r4, #0]
   3f79e:	4401      	add	r1, r0
   3f7a0:	1858      	adds	r0, r3, r1
   3f7a2:	6019      	str	r1, [r3, #0]
   3f7a4:	4282      	cmp	r2, r0
   3f7a6:	d1dd      	bne.n	3f764 <_free_r+0x24>
   3f7a8:	6810      	ldr	r0, [r2, #0]
   3f7aa:	6852      	ldr	r2, [r2, #4]
   3f7ac:	4401      	add	r1, r0
   3f7ae:	605a      	str	r2, [r3, #4]
   3f7b0:	6019      	str	r1, [r3, #0]
   3f7b2:	e7d7      	b.n	3f764 <_free_r+0x24>
   3f7b4:	d902      	bls.n	3f7bc <_free_r+0x7c>
   3f7b6:	230c      	movs	r3, #12
   3f7b8:	602b      	str	r3, [r5, #0]
   3f7ba:	e7d3      	b.n	3f764 <_free_r+0x24>
   3f7bc:	6820      	ldr	r0, [r4, #0]
   3f7be:	1821      	adds	r1, r4, r0
   3f7c0:	428a      	cmp	r2, r1
   3f7c2:	bf02      	ittt	eq
   3f7c4:	6811      	ldreq	r1, [r2, #0]
   3f7c6:	6852      	ldreq	r2, [r2, #4]
   3f7c8:	1809      	addeq	r1, r1, r0
   3f7ca:	6062      	str	r2, [r4, #4]
   3f7cc:	bf08      	it	eq
   3f7ce:	6021      	streq	r1, [r4, #0]
   3f7d0:	605c      	str	r4, [r3, #4]
   3f7d2:	e7c7      	b.n	3f764 <_free_r+0x24>
   3f7d4:	bd38      	pop	{r3, r4, r5, pc}
   3f7d6:	bf00      	nop
   3f7d8:	2002a384 	.word	0x2002a384

0003f7dc <_malloc_r>:
   3f7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f7de:	1ccd      	adds	r5, r1, #3
   3f7e0:	4606      	mov	r6, r0
   3f7e2:	f025 0503 	bic.w	r5, r5, #3
   3f7e6:	3508      	adds	r5, #8
   3f7e8:	2d0c      	cmp	r5, #12
   3f7ea:	bf38      	it	cc
   3f7ec:	250c      	movcc	r5, #12
   3f7ee:	2d00      	cmp	r5, #0
   3f7f0:	db01      	blt.n	3f7f6 <_malloc_r+0x1a>
   3f7f2:	42a9      	cmp	r1, r5
   3f7f4:	d903      	bls.n	3f7fe <_malloc_r+0x22>
   3f7f6:	230c      	movs	r3, #12
   3f7f8:	6033      	str	r3, [r6, #0]
   3f7fa:	2000      	movs	r0, #0
   3f7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f7fe:	f001 fb8f 	bl	40f20 <__malloc_lock>
   3f802:	4921      	ldr	r1, [pc, #132]	; (3f888 <_malloc_r+0xac>)
   3f804:	680a      	ldr	r2, [r1, #0]
   3f806:	4614      	mov	r4, r2
   3f808:	b99c      	cbnz	r4, 3f832 <_malloc_r+0x56>
   3f80a:	4f20      	ldr	r7, [pc, #128]	; (3f88c <_malloc_r+0xb0>)
   3f80c:	683b      	ldr	r3, [r7, #0]
   3f80e:	b923      	cbnz	r3, 3f81a <_malloc_r+0x3e>
   3f810:	4621      	mov	r1, r4
   3f812:	4630      	mov	r0, r6
   3f814:	f000 fd02 	bl	4021c <_sbrk_r>
   3f818:	6038      	str	r0, [r7, #0]
   3f81a:	4629      	mov	r1, r5
   3f81c:	4630      	mov	r0, r6
   3f81e:	f000 fcfd 	bl	4021c <_sbrk_r>
   3f822:	1c43      	adds	r3, r0, #1
   3f824:	d123      	bne.n	3f86e <_malloc_r+0x92>
   3f826:	230c      	movs	r3, #12
   3f828:	4630      	mov	r0, r6
   3f82a:	6033      	str	r3, [r6, #0]
   3f82c:	f001 fb7e 	bl	40f2c <__malloc_unlock>
   3f830:	e7e3      	b.n	3f7fa <_malloc_r+0x1e>
   3f832:	6823      	ldr	r3, [r4, #0]
   3f834:	1b5b      	subs	r3, r3, r5
   3f836:	d417      	bmi.n	3f868 <_malloc_r+0x8c>
   3f838:	2b0b      	cmp	r3, #11
   3f83a:	d903      	bls.n	3f844 <_malloc_r+0x68>
   3f83c:	6023      	str	r3, [r4, #0]
   3f83e:	441c      	add	r4, r3
   3f840:	6025      	str	r5, [r4, #0]
   3f842:	e004      	b.n	3f84e <_malloc_r+0x72>
   3f844:	6863      	ldr	r3, [r4, #4]
   3f846:	42a2      	cmp	r2, r4
   3f848:	bf0c      	ite	eq
   3f84a:	600b      	streq	r3, [r1, #0]
   3f84c:	6053      	strne	r3, [r2, #4]
   3f84e:	4630      	mov	r0, r6
   3f850:	f001 fb6c 	bl	40f2c <__malloc_unlock>
   3f854:	f104 000b 	add.w	r0, r4, #11
   3f858:	1d23      	adds	r3, r4, #4
   3f85a:	f020 0007 	bic.w	r0, r0, #7
   3f85e:	1ac2      	subs	r2, r0, r3
   3f860:	d0cc      	beq.n	3f7fc <_malloc_r+0x20>
   3f862:	1a1b      	subs	r3, r3, r0
   3f864:	50a3      	str	r3, [r4, r2]
   3f866:	e7c9      	b.n	3f7fc <_malloc_r+0x20>
   3f868:	4622      	mov	r2, r4
   3f86a:	6864      	ldr	r4, [r4, #4]
   3f86c:	e7cc      	b.n	3f808 <_malloc_r+0x2c>
   3f86e:	1cc4      	adds	r4, r0, #3
   3f870:	f024 0403 	bic.w	r4, r4, #3
   3f874:	42a0      	cmp	r0, r4
   3f876:	d0e3      	beq.n	3f840 <_malloc_r+0x64>
   3f878:	1a21      	subs	r1, r4, r0
   3f87a:	4630      	mov	r0, r6
   3f87c:	f000 fcce 	bl	4021c <_sbrk_r>
   3f880:	3001      	adds	r0, #1
   3f882:	d1dd      	bne.n	3f840 <_malloc_r+0x64>
   3f884:	e7cf      	b.n	3f826 <_malloc_r+0x4a>
   3f886:	bf00      	nop
   3f888:	2002a384 	.word	0x2002a384
   3f88c:	2002a388 	.word	0x2002a388

0003f890 <_vfiprintf_r>:
   3f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f894:	460d      	mov	r5, r1
   3f896:	b09d      	sub	sp, #116	; 0x74
   3f898:	4614      	mov	r4, r2
   3f89a:	461e      	mov	r6, r3
   3f89c:	4607      	mov	r7, r0
   3f89e:	b118      	cbz	r0, 3f8a8 <_vfiprintf_r+0x18>
   3f8a0:	6983      	ldr	r3, [r0, #24]
   3f8a2:	b90b      	cbnz	r3, 3f8a8 <_vfiprintf_r+0x18>
   3f8a4:	f001 f846 	bl	40934 <__sinit>
   3f8a8:	4b85      	ldr	r3, [pc, #532]	; (3fac0 <_vfiprintf_r+0x230>)
   3f8aa:	429d      	cmp	r5, r3
   3f8ac:	d11b      	bne.n	3f8e6 <_vfiprintf_r+0x56>
   3f8ae:	687d      	ldr	r5, [r7, #4]
   3f8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3f8b2:	07d9      	lsls	r1, r3, #31
   3f8b4:	d405      	bmi.n	3f8c2 <_vfiprintf_r+0x32>
   3f8b6:	89ab      	ldrh	r3, [r5, #12]
   3f8b8:	059a      	lsls	r2, r3, #22
   3f8ba:	d402      	bmi.n	3f8c2 <_vfiprintf_r+0x32>
   3f8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3f8be:	f006 f93b 	bl	45b38 <__retarget_lock_acquire_recursive>
   3f8c2:	89ab      	ldrh	r3, [r5, #12]
   3f8c4:	071b      	lsls	r3, r3, #28
   3f8c6:	d501      	bpl.n	3f8cc <_vfiprintf_r+0x3c>
   3f8c8:	692b      	ldr	r3, [r5, #16]
   3f8ca:	b9eb      	cbnz	r3, 3f908 <_vfiprintf_r+0x78>
   3f8cc:	4629      	mov	r1, r5
   3f8ce:	4638      	mov	r0, r7
   3f8d0:	f000 feb0 	bl	40634 <__swsetup_r>
   3f8d4:	b1c0      	cbz	r0, 3f908 <_vfiprintf_r+0x78>
   3f8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3f8d8:	07d8      	lsls	r0, r3, #31
   3f8da:	d50e      	bpl.n	3f8fa <_vfiprintf_r+0x6a>
   3f8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f8e0:	b01d      	add	sp, #116	; 0x74
   3f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f8e6:	4b77      	ldr	r3, [pc, #476]	; (3fac4 <_vfiprintf_r+0x234>)
   3f8e8:	429d      	cmp	r5, r3
   3f8ea:	d101      	bne.n	3f8f0 <_vfiprintf_r+0x60>
   3f8ec:	68bd      	ldr	r5, [r7, #8]
   3f8ee:	e7df      	b.n	3f8b0 <_vfiprintf_r+0x20>
   3f8f0:	4b75      	ldr	r3, [pc, #468]	; (3fac8 <_vfiprintf_r+0x238>)
   3f8f2:	429d      	cmp	r5, r3
   3f8f4:	bf08      	it	eq
   3f8f6:	68fd      	ldreq	r5, [r7, #12]
   3f8f8:	e7da      	b.n	3f8b0 <_vfiprintf_r+0x20>
   3f8fa:	89ab      	ldrh	r3, [r5, #12]
   3f8fc:	0599      	lsls	r1, r3, #22
   3f8fe:	d4ed      	bmi.n	3f8dc <_vfiprintf_r+0x4c>
   3f900:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3f902:	f006 f91a 	bl	45b3a <__retarget_lock_release_recursive>
   3f906:	e7e9      	b.n	3f8dc <_vfiprintf_r+0x4c>
   3f908:	2300      	movs	r3, #0
   3f90a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 3facc <_vfiprintf_r+0x23c>
   3f90e:	f04f 0a01 	mov.w	sl, #1
   3f912:	9603      	str	r6, [sp, #12]
   3f914:	9309      	str	r3, [sp, #36]	; 0x24
   3f916:	2320      	movs	r3, #32
   3f918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3f91c:	2330      	movs	r3, #48	; 0x30
   3f91e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3f922:	4623      	mov	r3, r4
   3f924:	461e      	mov	r6, r3
   3f926:	f813 2b01 	ldrb.w	r2, [r3], #1
   3f92a:	b10a      	cbz	r2, 3f930 <_vfiprintf_r+0xa0>
   3f92c:	2a25      	cmp	r2, #37	; 0x25
   3f92e:	d1f9      	bne.n	3f924 <_vfiprintf_r+0x94>
   3f930:	ebb6 0b04 	subs.w	fp, r6, r4
   3f934:	d00b      	beq.n	3f94e <_vfiprintf_r+0xbe>
   3f936:	465b      	mov	r3, fp
   3f938:	4622      	mov	r2, r4
   3f93a:	4629      	mov	r1, r5
   3f93c:	4638      	mov	r0, r7
   3f93e:	f005 fcb2 	bl	452a6 <__sfputs_r>
   3f942:	3001      	adds	r0, #1
   3f944:	f000 80a3 	beq.w	3fa8e <_vfiprintf_r+0x1fe>
   3f948:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3f94a:	445b      	add	r3, fp
   3f94c:	9309      	str	r3, [sp, #36]	; 0x24
   3f94e:	7833      	ldrb	r3, [r6, #0]
   3f950:	2b00      	cmp	r3, #0
   3f952:	f000 809c 	beq.w	3fa8e <_vfiprintf_r+0x1fe>
   3f956:	2300      	movs	r3, #0
   3f958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3f95c:	3601      	adds	r6, #1
   3f95e:	9304      	str	r3, [sp, #16]
   3f960:	9307      	str	r3, [sp, #28]
   3f962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3f966:	931a      	str	r3, [sp, #104]	; 0x68
   3f968:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3f96c:	4634      	mov	r4, r6
   3f96e:	2205      	movs	r2, #5
   3f970:	4856      	ldr	r0, [pc, #344]	; (3facc <_vfiprintf_r+0x23c>)
   3f972:	f814 1b01 	ldrb.w	r1, [r4], #1
   3f976:	f005 fc3b 	bl	451f0 <memchr>
   3f97a:	9b04      	ldr	r3, [sp, #16]
   3f97c:	b9c0      	cbnz	r0, 3f9b0 <_vfiprintf_r+0x120>
   3f97e:	06da      	lsls	r2, r3, #27
   3f980:	bf44      	itt	mi
   3f982:	2220      	movmi	r2, #32
   3f984:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3f988:	0718      	lsls	r0, r3, #28
   3f98a:	bf44      	itt	mi
   3f98c:	222b      	movmi	r2, #43	; 0x2b
   3f98e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   3f992:	7832      	ldrb	r2, [r6, #0]
   3f994:	2a2a      	cmp	r2, #42	; 0x2a
   3f996:	d013      	beq.n	3f9c0 <_vfiprintf_r+0x130>
   3f998:	4634      	mov	r4, r6
   3f99a:	9a07      	ldr	r2, [sp, #28]
   3f99c:	2000      	movs	r0, #0
   3f99e:	260a      	movs	r6, #10
   3f9a0:	4621      	mov	r1, r4
   3f9a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   3f9a6:	3b30      	subs	r3, #48	; 0x30
   3f9a8:	2b09      	cmp	r3, #9
   3f9aa:	d94b      	bls.n	3fa44 <_vfiprintf_r+0x1b4>
   3f9ac:	b970      	cbnz	r0, 3f9cc <_vfiprintf_r+0x13c>
   3f9ae:	e014      	b.n	3f9da <_vfiprintf_r+0x14a>
   3f9b0:	eba0 0009 	sub.w	r0, r0, r9
   3f9b4:	4626      	mov	r6, r4
   3f9b6:	fa0a f000 	lsl.w	r0, sl, r0
   3f9ba:	4318      	orrs	r0, r3
   3f9bc:	9004      	str	r0, [sp, #16]
   3f9be:	e7d5      	b.n	3f96c <_vfiprintf_r+0xdc>
   3f9c0:	9a03      	ldr	r2, [sp, #12]
   3f9c2:	1d11      	adds	r1, r2, #4
   3f9c4:	6812      	ldr	r2, [r2, #0]
   3f9c6:	2a00      	cmp	r2, #0
   3f9c8:	9103      	str	r1, [sp, #12]
   3f9ca:	db01      	blt.n	3f9d0 <_vfiprintf_r+0x140>
   3f9cc:	9207      	str	r2, [sp, #28]
   3f9ce:	e004      	b.n	3f9da <_vfiprintf_r+0x14a>
   3f9d0:	4252      	negs	r2, r2
   3f9d2:	f043 0302 	orr.w	r3, r3, #2
   3f9d6:	9207      	str	r2, [sp, #28]
   3f9d8:	9304      	str	r3, [sp, #16]
   3f9da:	7823      	ldrb	r3, [r4, #0]
   3f9dc:	2b2e      	cmp	r3, #46	; 0x2e
   3f9de:	d10c      	bne.n	3f9fa <_vfiprintf_r+0x16a>
   3f9e0:	7863      	ldrb	r3, [r4, #1]
   3f9e2:	2b2a      	cmp	r3, #42	; 0x2a
   3f9e4:	d133      	bne.n	3fa4e <_vfiprintf_r+0x1be>
   3f9e6:	9b03      	ldr	r3, [sp, #12]
   3f9e8:	3402      	adds	r4, #2
   3f9ea:	1d1a      	adds	r2, r3, #4
   3f9ec:	681b      	ldr	r3, [r3, #0]
   3f9ee:	2b00      	cmp	r3, #0
   3f9f0:	9203      	str	r2, [sp, #12]
   3f9f2:	bfb8      	it	lt
   3f9f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   3f9f8:	9305      	str	r3, [sp, #20]
   3f9fa:	4e35      	ldr	r6, [pc, #212]	; (3fad0 <_vfiprintf_r+0x240>)
   3f9fc:	2203      	movs	r2, #3
   3f9fe:	7821      	ldrb	r1, [r4, #0]
   3fa00:	4630      	mov	r0, r6
   3fa02:	f005 fbf5 	bl	451f0 <memchr>
   3fa06:	b138      	cbz	r0, 3fa18 <_vfiprintf_r+0x188>
   3fa08:	2340      	movs	r3, #64	; 0x40
   3fa0a:	1b80      	subs	r0, r0, r6
   3fa0c:	3401      	adds	r4, #1
   3fa0e:	fa03 f000 	lsl.w	r0, r3, r0
   3fa12:	9b04      	ldr	r3, [sp, #16]
   3fa14:	4303      	orrs	r3, r0
   3fa16:	9304      	str	r3, [sp, #16]
   3fa18:	f814 1b01 	ldrb.w	r1, [r4], #1
   3fa1c:	2206      	movs	r2, #6
   3fa1e:	482d      	ldr	r0, [pc, #180]	; (3fad4 <_vfiprintf_r+0x244>)
   3fa20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3fa24:	f005 fbe4 	bl	451f0 <memchr>
   3fa28:	2800      	cmp	r0, #0
   3fa2a:	d03f      	beq.n	3faac <_vfiprintf_r+0x21c>
   3fa2c:	4b2a      	ldr	r3, [pc, #168]	; (3fad8 <_vfiprintf_r+0x248>)
   3fa2e:	bb13      	cbnz	r3, 3fa76 <_vfiprintf_r+0x1e6>
   3fa30:	9b03      	ldr	r3, [sp, #12]
   3fa32:	3307      	adds	r3, #7
   3fa34:	f023 0307 	bic.w	r3, r3, #7
   3fa38:	3308      	adds	r3, #8
   3fa3a:	9303      	str	r3, [sp, #12]
   3fa3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3fa3e:	4443      	add	r3, r8
   3fa40:	9309      	str	r3, [sp, #36]	; 0x24
   3fa42:	e76e      	b.n	3f922 <_vfiprintf_r+0x92>
   3fa44:	fb06 3202 	mla	r2, r6, r2, r3
   3fa48:	2001      	movs	r0, #1
   3fa4a:	460c      	mov	r4, r1
   3fa4c:	e7a8      	b.n	3f9a0 <_vfiprintf_r+0x110>
   3fa4e:	2300      	movs	r3, #0
   3fa50:	3401      	adds	r4, #1
   3fa52:	260a      	movs	r6, #10
   3fa54:	4619      	mov	r1, r3
   3fa56:	9305      	str	r3, [sp, #20]
   3fa58:	4620      	mov	r0, r4
   3fa5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   3fa5e:	3a30      	subs	r2, #48	; 0x30
   3fa60:	2a09      	cmp	r2, #9
   3fa62:	d903      	bls.n	3fa6c <_vfiprintf_r+0x1dc>
   3fa64:	2b00      	cmp	r3, #0
   3fa66:	d0c8      	beq.n	3f9fa <_vfiprintf_r+0x16a>
   3fa68:	9105      	str	r1, [sp, #20]
   3fa6a:	e7c6      	b.n	3f9fa <_vfiprintf_r+0x16a>
   3fa6c:	fb06 2101 	mla	r1, r6, r1, r2
   3fa70:	2301      	movs	r3, #1
   3fa72:	4604      	mov	r4, r0
   3fa74:	e7f0      	b.n	3fa58 <_vfiprintf_r+0x1c8>
   3fa76:	ab03      	add	r3, sp, #12
   3fa78:	462a      	mov	r2, r5
   3fa7a:	a904      	add	r1, sp, #16
   3fa7c:	4638      	mov	r0, r7
   3fa7e:	9300      	str	r3, [sp, #0]
   3fa80:	4b16      	ldr	r3, [pc, #88]	; (3fadc <_vfiprintf_r+0x24c>)
   3fa82:	f000 f82d 	bl	3fae0 <_printf_float>
   3fa86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3fa8a:	4680      	mov	r8, r0
   3fa8c:	d1d6      	bne.n	3fa3c <_vfiprintf_r+0x1ac>
   3fa8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3fa90:	07d9      	lsls	r1, r3, #31
   3fa92:	d405      	bmi.n	3faa0 <_vfiprintf_r+0x210>
   3fa94:	89ab      	ldrh	r3, [r5, #12]
   3fa96:	059a      	lsls	r2, r3, #22
   3fa98:	d402      	bmi.n	3faa0 <_vfiprintf_r+0x210>
   3fa9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3fa9c:	f006 f84d 	bl	45b3a <__retarget_lock_release_recursive>
   3faa0:	89ab      	ldrh	r3, [r5, #12]
   3faa2:	065b      	lsls	r3, r3, #25
   3faa4:	f53f af1a 	bmi.w	3f8dc <_vfiprintf_r+0x4c>
   3faa8:	9809      	ldr	r0, [sp, #36]	; 0x24
   3faaa:	e719      	b.n	3f8e0 <_vfiprintf_r+0x50>
   3faac:	ab03      	add	r3, sp, #12
   3faae:	462a      	mov	r2, r5
   3fab0:	a904      	add	r1, sp, #16
   3fab2:	4638      	mov	r0, r7
   3fab4:	9300      	str	r3, [sp, #0]
   3fab6:	4b09      	ldr	r3, [pc, #36]	; (3fadc <_vfiprintf_r+0x24c>)
   3fab8:	f000 fa3c 	bl	3ff34 <_printf_i>
   3fabc:	e7e3      	b.n	3fa86 <_vfiprintf_r+0x1f6>
   3fabe:	bf00      	nop
   3fac0:	000478bc 	.word	0x000478bc
   3fac4:	000478dc 	.word	0x000478dc
   3fac8:	0004789c 	.word	0x0004789c
   3facc:	0004f30f 	.word	0x0004f30f
   3fad0:	0004f315 	.word	0x0004f315
   3fad4:	0004f319 	.word	0x0004f319
   3fad8:	0003fae1 	.word	0x0003fae1
   3fadc:	000452a7 	.word	0x000452a7

0003fae0 <_printf_float>:
   3fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fae4:	b08d      	sub	sp, #52	; 0x34
   3fae6:	460c      	mov	r4, r1
   3fae8:	4616      	mov	r6, r2
   3faea:	461f      	mov	r7, r3
   3faec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   3faf0:	4605      	mov	r5, r0
   3faf2:	f001 f9bf 	bl	40e74 <_localeconv_r>
   3faf6:	6803      	ldr	r3, [r0, #0]
   3faf8:	4618      	mov	r0, r3
   3fafa:	9306      	str	r3, [sp, #24]
   3fafc:	f7dd fbb2 	bl	1d264 <strlen>
   3fb00:	2300      	movs	r3, #0
   3fb02:	9007      	str	r0, [sp, #28]
   3fb04:	930a      	str	r3, [sp, #40]	; 0x28
   3fb06:	f8d8 3000 	ldr.w	r3, [r8]
   3fb0a:	f894 a018 	ldrb.w	sl, [r4, #24]
   3fb0e:	3307      	adds	r3, #7
   3fb10:	f8d4 b000 	ldr.w	fp, [r4]
   3fb14:	f023 0307 	bic.w	r3, r3, #7
   3fb18:	f103 0208 	add.w	r2, r3, #8
   3fb1c:	f8c8 2000 	str.w	r2, [r8]
   3fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
   3fb24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3fb28:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   3fb2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3fb30:	ed8d 7b04 	vstr	d7, [sp, #16]
   3fb34:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   3fb38:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   3fb3c:	4640      	mov	r0, r8
   3fb3e:	4ba6      	ldr	r3, [pc, #664]	; (3fdd8 <_printf_float+0x2f8>)
   3fb40:	4649      	mov	r1, r9
   3fb42:	f7dd fb39 	bl	1d1b8 <__aeabi_dcmpun>
   3fb46:	bb70      	cbnz	r0, 3fba6 <_printf_float+0xc6>
   3fb48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3fb4c:	4ba2      	ldr	r3, [pc, #648]	; (3fdd8 <_printf_float+0x2f8>)
   3fb4e:	4640      	mov	r0, r8
   3fb50:	4649      	mov	r1, r9
   3fb52:	f7dd f8ad 	bl	1ccb0 <__aeabi_dcmple>
   3fb56:	bb30      	cbnz	r0, 3fba6 <_printf_float+0xc6>
   3fb58:	2200      	movs	r2, #0
   3fb5a:	2300      	movs	r3, #0
   3fb5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   3fb60:	f7dd f89c 	bl	1cc9c <__aeabi_dcmplt>
   3fb64:	b110      	cbz	r0, 3fb6c <_printf_float+0x8c>
   3fb66:	232d      	movs	r3, #45	; 0x2d
   3fb68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3fb6c:	4a9b      	ldr	r2, [pc, #620]	; (3fddc <_printf_float+0x2fc>)
   3fb6e:	4b9c      	ldr	r3, [pc, #624]	; (3fde0 <_printf_float+0x300>)
   3fb70:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   3fb74:	bf94      	ite	ls
   3fb76:	4690      	movls	r8, r2
   3fb78:	4698      	movhi	r8, r3
   3fb7a:	f04f 0900 	mov.w	r9, #0
   3fb7e:	2303      	movs	r3, #3
   3fb80:	f02b 0204 	bic.w	r2, fp, #4
   3fb84:	6123      	str	r3, [r4, #16]
   3fb86:	6022      	str	r2, [r4, #0]
   3fb88:	9700      	str	r7, [sp, #0]
   3fb8a:	4633      	mov	r3, r6
   3fb8c:	aa0b      	add	r2, sp, #44	; 0x2c
   3fb8e:	4621      	mov	r1, r4
   3fb90:	4628      	mov	r0, r5
   3fb92:	f005 fc2a 	bl	453ea <_printf_common>
   3fb96:	3001      	adds	r0, #1
   3fb98:	f040 808c 	bne.w	3fcb4 <_printf_float+0x1d4>
   3fb9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3fba0:	b00d      	add	sp, #52	; 0x34
   3fba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   3fbaa:	4610      	mov	r0, r2
   3fbac:	4619      	mov	r1, r3
   3fbae:	f7dd fb03 	bl	1d1b8 <__aeabi_dcmpun>
   3fbb2:	b140      	cbz	r0, 3fbc6 <_printf_float+0xe6>
   3fbb4:	9b05      	ldr	r3, [sp, #20]
   3fbb6:	4a8b      	ldr	r2, [pc, #556]	; (3fde4 <_printf_float+0x304>)
   3fbb8:	2b00      	cmp	r3, #0
   3fbba:	bfbc      	itt	lt
   3fbbc:	232d      	movlt	r3, #45	; 0x2d
   3fbbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3fbc2:	4b89      	ldr	r3, [pc, #548]	; (3fde8 <_printf_float+0x308>)
   3fbc4:	e7d4      	b.n	3fb70 <_printf_float+0x90>
   3fbc6:	6863      	ldr	r3, [r4, #4]
   3fbc8:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   3fbcc:	1c5a      	adds	r2, r3, #1
   3fbce:	d13e      	bne.n	3fc4e <_printf_float+0x16e>
   3fbd0:	2306      	movs	r3, #6
   3fbd2:	6063      	str	r3, [r4, #4]
   3fbd4:	2300      	movs	r3, #0
   3fbd6:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   3fbda:	6861      	ldr	r1, [r4, #4]
   3fbdc:	4628      	mov	r0, r5
   3fbde:	9303      	str	r3, [sp, #12]
   3fbe0:	ab0a      	add	r3, sp, #40	; 0x28
   3fbe2:	6022      	str	r2, [r4, #0]
   3fbe4:	e9cd a301 	strd	sl, r3, [sp, #4]
   3fbe8:	ab09      	add	r3, sp, #36	; 0x24
   3fbea:	ed9d 0b04 	vldr	d0, [sp, #16]
   3fbee:	9300      	str	r3, [sp, #0]
   3fbf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3fbf4:	f005 fb69 	bl	452ca <__cvt>
   3fbf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3fbfc:	4680      	mov	r8, r0
   3fbfe:	9909      	ldr	r1, [sp, #36]	; 0x24
   3fc00:	d108      	bne.n	3fc14 <_printf_float+0x134>
   3fc02:	1cc8      	adds	r0, r1, #3
   3fc04:	db02      	blt.n	3fc0c <_printf_float+0x12c>
   3fc06:	6863      	ldr	r3, [r4, #4]
   3fc08:	4299      	cmp	r1, r3
   3fc0a:	dd41      	ble.n	3fc90 <_printf_float+0x1b0>
   3fc0c:	f1aa 0a02 	sub.w	sl, sl, #2
   3fc10:	fa5f fa8a 	uxtb.w	sl, sl
   3fc14:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3fc18:	d820      	bhi.n	3fc5c <_printf_float+0x17c>
   3fc1a:	3901      	subs	r1, #1
   3fc1c:	4652      	mov	r2, sl
   3fc1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3fc22:	9109      	str	r1, [sp, #36]	; 0x24
   3fc24:	f005 fbae 	bl	45384 <__exponent>
   3fc28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3fc2a:	4681      	mov	r9, r0
   3fc2c:	1813      	adds	r3, r2, r0
   3fc2e:	2a01      	cmp	r2, #1
   3fc30:	6123      	str	r3, [r4, #16]
   3fc32:	dc02      	bgt.n	3fc3a <_printf_float+0x15a>
   3fc34:	6822      	ldr	r2, [r4, #0]
   3fc36:	07d2      	lsls	r2, r2, #31
   3fc38:	d501      	bpl.n	3fc3e <_printf_float+0x15e>
   3fc3a:	3301      	adds	r3, #1
   3fc3c:	6123      	str	r3, [r4, #16]
   3fc3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3fc42:	2b00      	cmp	r3, #0
   3fc44:	d0a0      	beq.n	3fb88 <_printf_float+0xa8>
   3fc46:	232d      	movs	r3, #45	; 0x2d
   3fc48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3fc4c:	e79c      	b.n	3fb88 <_printf_float+0xa8>
   3fc4e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   3fc52:	d1bf      	bne.n	3fbd4 <_printf_float+0xf4>
   3fc54:	2b00      	cmp	r3, #0
   3fc56:	d1bd      	bne.n	3fbd4 <_printf_float+0xf4>
   3fc58:	2301      	movs	r3, #1
   3fc5a:	e7ba      	b.n	3fbd2 <_printf_float+0xf2>
   3fc5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   3fc60:	d118      	bne.n	3fc94 <_printf_float+0x1b4>
   3fc62:	2900      	cmp	r1, #0
   3fc64:	6863      	ldr	r3, [r4, #4]
   3fc66:	dd0b      	ble.n	3fc80 <_printf_float+0x1a0>
   3fc68:	6121      	str	r1, [r4, #16]
   3fc6a:	b913      	cbnz	r3, 3fc72 <_printf_float+0x192>
   3fc6c:	6822      	ldr	r2, [r4, #0]
   3fc6e:	07d0      	lsls	r0, r2, #31
   3fc70:	d502      	bpl.n	3fc78 <_printf_float+0x198>
   3fc72:	3301      	adds	r3, #1
   3fc74:	440b      	add	r3, r1
   3fc76:	6123      	str	r3, [r4, #16]
   3fc78:	65a1      	str	r1, [r4, #88]	; 0x58
   3fc7a:	f04f 0900 	mov.w	r9, #0
   3fc7e:	e7de      	b.n	3fc3e <_printf_float+0x15e>
   3fc80:	b913      	cbnz	r3, 3fc88 <_printf_float+0x1a8>
   3fc82:	6822      	ldr	r2, [r4, #0]
   3fc84:	07d2      	lsls	r2, r2, #31
   3fc86:	d501      	bpl.n	3fc8c <_printf_float+0x1ac>
   3fc88:	3302      	adds	r3, #2
   3fc8a:	e7f4      	b.n	3fc76 <_printf_float+0x196>
   3fc8c:	2301      	movs	r3, #1
   3fc8e:	e7f2      	b.n	3fc76 <_printf_float+0x196>
   3fc90:	f04f 0a67 	mov.w	sl, #103	; 0x67
   3fc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3fc96:	4299      	cmp	r1, r3
   3fc98:	db05      	blt.n	3fca6 <_printf_float+0x1c6>
   3fc9a:	6823      	ldr	r3, [r4, #0]
   3fc9c:	6121      	str	r1, [r4, #16]
   3fc9e:	07d8      	lsls	r0, r3, #31
   3fca0:	d5ea      	bpl.n	3fc78 <_printf_float+0x198>
   3fca2:	1c4b      	adds	r3, r1, #1
   3fca4:	e7e7      	b.n	3fc76 <_printf_float+0x196>
   3fca6:	2900      	cmp	r1, #0
   3fca8:	bfd4      	ite	le
   3fcaa:	f1c1 0202 	rsble	r2, r1, #2
   3fcae:	2201      	movgt	r2, #1
   3fcb0:	4413      	add	r3, r2
   3fcb2:	e7e0      	b.n	3fc76 <_printf_float+0x196>
   3fcb4:	6823      	ldr	r3, [r4, #0]
   3fcb6:	055a      	lsls	r2, r3, #21
   3fcb8:	d407      	bmi.n	3fcca <_printf_float+0x1ea>
   3fcba:	6923      	ldr	r3, [r4, #16]
   3fcbc:	4642      	mov	r2, r8
   3fcbe:	4631      	mov	r1, r6
   3fcc0:	4628      	mov	r0, r5
   3fcc2:	47b8      	blx	r7
   3fcc4:	3001      	adds	r0, #1
   3fcc6:	d12b      	bne.n	3fd20 <_printf_float+0x240>
   3fcc8:	e768      	b.n	3fb9c <_printf_float+0xbc>
   3fcca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   3fcce:	f240 80dc 	bls.w	3fe8a <_printf_float+0x3aa>
   3fcd2:	2200      	movs	r2, #0
   3fcd4:	2300      	movs	r3, #0
   3fcd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3fcda:	f7dc ffd5 	bl	1cc88 <__aeabi_dcmpeq>
   3fcde:	2800      	cmp	r0, #0
   3fce0:	d033      	beq.n	3fd4a <_printf_float+0x26a>
   3fce2:	2301      	movs	r3, #1
   3fce4:	4a41      	ldr	r2, [pc, #260]	; (3fdec <_printf_float+0x30c>)
   3fce6:	4631      	mov	r1, r6
   3fce8:	4628      	mov	r0, r5
   3fcea:	47b8      	blx	r7
   3fcec:	3001      	adds	r0, #1
   3fcee:	f43f af55 	beq.w	3fb9c <_printf_float+0xbc>
   3fcf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3fcf6:	429a      	cmp	r2, r3
   3fcf8:	db02      	blt.n	3fd00 <_printf_float+0x220>
   3fcfa:	6823      	ldr	r3, [r4, #0]
   3fcfc:	07d8      	lsls	r0, r3, #31
   3fcfe:	d50f      	bpl.n	3fd20 <_printf_float+0x240>
   3fd00:	4631      	mov	r1, r6
   3fd02:	4628      	mov	r0, r5
   3fd04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3fd08:	47b8      	blx	r7
   3fd0a:	3001      	adds	r0, #1
   3fd0c:	f43f af46 	beq.w	3fb9c <_printf_float+0xbc>
   3fd10:	f04f 0800 	mov.w	r8, #0
   3fd14:	f104 091a 	add.w	r9, r4, #26
   3fd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3fd1a:	3b01      	subs	r3, #1
   3fd1c:	4543      	cmp	r3, r8
   3fd1e:	dc09      	bgt.n	3fd34 <_printf_float+0x254>
   3fd20:	6823      	ldr	r3, [r4, #0]
   3fd22:	079b      	lsls	r3, r3, #30
   3fd24:	f100 8101 	bmi.w	3ff2a <_printf_float+0x44a>
   3fd28:	68e0      	ldr	r0, [r4, #12]
   3fd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3fd2c:	4298      	cmp	r0, r3
   3fd2e:	bfb8      	it	lt
   3fd30:	4618      	movlt	r0, r3
   3fd32:	e735      	b.n	3fba0 <_printf_float+0xc0>
   3fd34:	2301      	movs	r3, #1
   3fd36:	464a      	mov	r2, r9
   3fd38:	4631      	mov	r1, r6
   3fd3a:	4628      	mov	r0, r5
   3fd3c:	47b8      	blx	r7
   3fd3e:	3001      	adds	r0, #1
   3fd40:	f43f af2c 	beq.w	3fb9c <_printf_float+0xbc>
   3fd44:	f108 0801 	add.w	r8, r8, #1
   3fd48:	e7e6      	b.n	3fd18 <_printf_float+0x238>
   3fd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3fd4c:	2b00      	cmp	r3, #0
   3fd4e:	dc2b      	bgt.n	3fda8 <_printf_float+0x2c8>
   3fd50:	2301      	movs	r3, #1
   3fd52:	4a26      	ldr	r2, [pc, #152]	; (3fdec <_printf_float+0x30c>)
   3fd54:	4631      	mov	r1, r6
   3fd56:	4628      	mov	r0, r5
   3fd58:	47b8      	blx	r7
   3fd5a:	3001      	adds	r0, #1
   3fd5c:	f43f af1e 	beq.w	3fb9c <_printf_float+0xbc>
   3fd60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3fd64:	4313      	orrs	r3, r2
   3fd66:	d102      	bne.n	3fd6e <_printf_float+0x28e>
   3fd68:	6823      	ldr	r3, [r4, #0]
   3fd6a:	07d9      	lsls	r1, r3, #31
   3fd6c:	d5d8      	bpl.n	3fd20 <_printf_float+0x240>
   3fd6e:	4631      	mov	r1, r6
   3fd70:	4628      	mov	r0, r5
   3fd72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3fd76:	47b8      	blx	r7
   3fd78:	3001      	adds	r0, #1
   3fd7a:	f43f af0f 	beq.w	3fb9c <_printf_float+0xbc>
   3fd7e:	f04f 0900 	mov.w	r9, #0
   3fd82:	f104 0a1a 	add.w	sl, r4, #26
   3fd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3fd88:	425b      	negs	r3, r3
   3fd8a:	454b      	cmp	r3, r9
   3fd8c:	dc01      	bgt.n	3fd92 <_printf_float+0x2b2>
   3fd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3fd90:	e794      	b.n	3fcbc <_printf_float+0x1dc>
   3fd92:	2301      	movs	r3, #1
   3fd94:	4652      	mov	r2, sl
   3fd96:	4631      	mov	r1, r6
   3fd98:	4628      	mov	r0, r5
   3fd9a:	47b8      	blx	r7
   3fd9c:	3001      	adds	r0, #1
   3fd9e:	f43f aefd 	beq.w	3fb9c <_printf_float+0xbc>
   3fda2:	f109 0901 	add.w	r9, r9, #1
   3fda6:	e7ee      	b.n	3fd86 <_printf_float+0x2a6>
   3fda8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3fdaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3fdac:	429a      	cmp	r2, r3
   3fdae:	bfa8      	it	ge
   3fdb0:	461a      	movge	r2, r3
   3fdb2:	2a00      	cmp	r2, #0
   3fdb4:	4691      	mov	r9, r2
   3fdb6:	dd07      	ble.n	3fdc8 <_printf_float+0x2e8>
   3fdb8:	4613      	mov	r3, r2
   3fdba:	4631      	mov	r1, r6
   3fdbc:	4642      	mov	r2, r8
   3fdbe:	4628      	mov	r0, r5
   3fdc0:	47b8      	blx	r7
   3fdc2:	3001      	adds	r0, #1
   3fdc4:	f43f aeea 	beq.w	3fb9c <_printf_float+0xbc>
   3fdc8:	f104 031a 	add.w	r3, r4, #26
   3fdcc:	f04f 0b00 	mov.w	fp, #0
   3fdd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3fdd4:	9304      	str	r3, [sp, #16]
   3fdd6:	e015      	b.n	3fe04 <_printf_float+0x324>
   3fdd8:	7fefffff 	.word	0x7fefffff
   3fddc:	0004f320 	.word	0x0004f320
   3fde0:	00049324 	.word	0x00049324
   3fde4:	0004f324 	.word	0x0004f324
   3fde8:	0004f328 	.word	0x0004f328
   3fdec:	0004edb2 	.word	0x0004edb2
   3fdf0:	2301      	movs	r3, #1
   3fdf2:	9a04      	ldr	r2, [sp, #16]
   3fdf4:	4631      	mov	r1, r6
   3fdf6:	4628      	mov	r0, r5
   3fdf8:	47b8      	blx	r7
   3fdfa:	3001      	adds	r0, #1
   3fdfc:	f43f aece 	beq.w	3fb9c <_printf_float+0xbc>
   3fe00:	f10b 0b01 	add.w	fp, fp, #1
   3fe04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   3fe08:	ebaa 0309 	sub.w	r3, sl, r9
   3fe0c:	455b      	cmp	r3, fp
   3fe0e:	dcef      	bgt.n	3fdf0 <_printf_float+0x310>
   3fe10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3fe14:	429a      	cmp	r2, r3
   3fe16:	db1b      	blt.n	3fe50 <_printf_float+0x370>
   3fe18:	6823      	ldr	r3, [r4, #0]
   3fe1a:	07da      	lsls	r2, r3, #31
   3fe1c:	d418      	bmi.n	3fe50 <_printf_float+0x370>
   3fe1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3fe22:	4592      	cmp	sl, r2
   3fe24:	db1c      	blt.n	3fe60 <_printf_float+0x380>
   3fe26:	eba3 090a 	sub.w	r9, r3, sl
   3fe2a:	f1b9 0f00 	cmp.w	r9, #0
   3fe2e:	dd08      	ble.n	3fe42 <_printf_float+0x362>
   3fe30:	464b      	mov	r3, r9
   3fe32:	eb08 020a 	add.w	r2, r8, sl
   3fe36:	4631      	mov	r1, r6
   3fe38:	4628      	mov	r0, r5
   3fe3a:	47b8      	blx	r7
   3fe3c:	3001      	adds	r0, #1
   3fe3e:	f43f aead 	beq.w	3fb9c <_printf_float+0xbc>
   3fe42:	f04f 0800 	mov.w	r8, #0
   3fe46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3fe4a:	f104 0a1a 	add.w	sl, r4, #26
   3fe4e:	e014      	b.n	3fe7a <_printf_float+0x39a>
   3fe50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3fe54:	4631      	mov	r1, r6
   3fe56:	4628      	mov	r0, r5
   3fe58:	47b8      	blx	r7
   3fe5a:	3001      	adds	r0, #1
   3fe5c:	d1df      	bne.n	3fe1e <_printf_float+0x33e>
   3fe5e:	e69d      	b.n	3fb9c <_printf_float+0xbc>
   3fe60:	eba3 0902 	sub.w	r9, r3, r2
   3fe64:	e7e1      	b.n	3fe2a <_printf_float+0x34a>
   3fe66:	2301      	movs	r3, #1
   3fe68:	4652      	mov	r2, sl
   3fe6a:	4631      	mov	r1, r6
   3fe6c:	4628      	mov	r0, r5
   3fe6e:	47b8      	blx	r7
   3fe70:	3001      	adds	r0, #1
   3fe72:	f43f ae93 	beq.w	3fb9c <_printf_float+0xbc>
   3fe76:	f108 0801 	add.w	r8, r8, #1
   3fe7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3fe7e:	1a9b      	subs	r3, r3, r2
   3fe80:	eba3 0309 	sub.w	r3, r3, r9
   3fe84:	4543      	cmp	r3, r8
   3fe86:	dcee      	bgt.n	3fe66 <_printf_float+0x386>
   3fe88:	e74a      	b.n	3fd20 <_printf_float+0x240>
   3fe8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3fe8c:	2a01      	cmp	r2, #1
   3fe8e:	dc01      	bgt.n	3fe94 <_printf_float+0x3b4>
   3fe90:	07db      	lsls	r3, r3, #31
   3fe92:	d537      	bpl.n	3ff04 <_printf_float+0x424>
   3fe94:	2301      	movs	r3, #1
   3fe96:	4642      	mov	r2, r8
   3fe98:	4631      	mov	r1, r6
   3fe9a:	4628      	mov	r0, r5
   3fe9c:	47b8      	blx	r7
   3fe9e:	3001      	adds	r0, #1
   3fea0:	f43f ae7c 	beq.w	3fb9c <_printf_float+0xbc>
   3fea4:	4631      	mov	r1, r6
   3fea6:	4628      	mov	r0, r5
   3fea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   3feac:	47b8      	blx	r7
   3feae:	3001      	adds	r0, #1
   3feb0:	f43f ae74 	beq.w	3fb9c <_printf_float+0xbc>
   3feb4:	2200      	movs	r2, #0
   3feb6:	2300      	movs	r3, #0
   3feb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3febc:	f7dc fee4 	bl	1cc88 <__aeabi_dcmpeq>
   3fec0:	b9d8      	cbnz	r0, 3fefa <_printf_float+0x41a>
   3fec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3fec4:	f108 0201 	add.w	r2, r8, #1
   3fec8:	3b01      	subs	r3, #1
   3feca:	4631      	mov	r1, r6
   3fecc:	4628      	mov	r0, r5
   3fece:	47b8      	blx	r7
   3fed0:	3001      	adds	r0, #1
   3fed2:	d10e      	bne.n	3fef2 <_printf_float+0x412>
   3fed4:	e662      	b.n	3fb9c <_printf_float+0xbc>
   3fed6:	2301      	movs	r3, #1
   3fed8:	4652      	mov	r2, sl
   3feda:	4631      	mov	r1, r6
   3fedc:	4628      	mov	r0, r5
   3fede:	47b8      	blx	r7
   3fee0:	3001      	adds	r0, #1
   3fee2:	f43f ae5b 	beq.w	3fb9c <_printf_float+0xbc>
   3fee6:	f108 0801 	add.w	r8, r8, #1
   3feea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3feec:	3b01      	subs	r3, #1
   3feee:	4543      	cmp	r3, r8
   3fef0:	dcf1      	bgt.n	3fed6 <_printf_float+0x3f6>
   3fef2:	464b      	mov	r3, r9
   3fef4:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3fef8:	e6e1      	b.n	3fcbe <_printf_float+0x1de>
   3fefa:	f04f 0800 	mov.w	r8, #0
   3fefe:	f104 0a1a 	add.w	sl, r4, #26
   3ff02:	e7f2      	b.n	3feea <_printf_float+0x40a>
   3ff04:	2301      	movs	r3, #1
   3ff06:	4642      	mov	r2, r8
   3ff08:	e7df      	b.n	3feca <_printf_float+0x3ea>
   3ff0a:	2301      	movs	r3, #1
   3ff0c:	464a      	mov	r2, r9
   3ff0e:	4631      	mov	r1, r6
   3ff10:	4628      	mov	r0, r5
   3ff12:	47b8      	blx	r7
   3ff14:	3001      	adds	r0, #1
   3ff16:	f43f ae41 	beq.w	3fb9c <_printf_float+0xbc>
   3ff1a:	f108 0801 	add.w	r8, r8, #1
   3ff1e:	68e3      	ldr	r3, [r4, #12]
   3ff20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3ff22:	1a9b      	subs	r3, r3, r2
   3ff24:	4543      	cmp	r3, r8
   3ff26:	dcf0      	bgt.n	3ff0a <_printf_float+0x42a>
   3ff28:	e6fe      	b.n	3fd28 <_printf_float+0x248>
   3ff2a:	f04f 0800 	mov.w	r8, #0
   3ff2e:	f104 0919 	add.w	r9, r4, #25
   3ff32:	e7f4      	b.n	3ff1e <_printf_float+0x43e>

0003ff34 <_printf_i>:
   3ff34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3ff38:	4606      	mov	r6, r0
   3ff3a:	460c      	mov	r4, r1
   3ff3c:	f101 0043 	add.w	r0, r1, #67	; 0x43
   3ff40:	7e09      	ldrb	r1, [r1, #24]
   3ff42:	b085      	sub	sp, #20
   3ff44:	4698      	mov	r8, r3
   3ff46:	296e      	cmp	r1, #110	; 0x6e
   3ff48:	4617      	mov	r7, r2
   3ff4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   3ff4c:	f000 80ba 	beq.w	400c4 <_printf_i+0x190>
   3ff50:	d824      	bhi.n	3ff9c <_printf_i+0x68>
   3ff52:	2963      	cmp	r1, #99	; 0x63
   3ff54:	d039      	beq.n	3ffca <_printf_i+0x96>
   3ff56:	d80a      	bhi.n	3ff6e <_printf_i+0x3a>
   3ff58:	2900      	cmp	r1, #0
   3ff5a:	f000 80c3 	beq.w	400e4 <_printf_i+0x1b0>
   3ff5e:	2958      	cmp	r1, #88	; 0x58
   3ff60:	f000 8091 	beq.w	40086 <_printf_i+0x152>
   3ff64:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3ff68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   3ff6c:	e035      	b.n	3ffda <_printf_i+0xa6>
   3ff6e:	2964      	cmp	r1, #100	; 0x64
   3ff70:	d001      	beq.n	3ff76 <_printf_i+0x42>
   3ff72:	2969      	cmp	r1, #105	; 0x69
   3ff74:	d1f6      	bne.n	3ff64 <_printf_i+0x30>
   3ff76:	6825      	ldr	r5, [r4, #0]
   3ff78:	681a      	ldr	r2, [r3, #0]
   3ff7a:	f015 0f80 	tst.w	r5, #128	; 0x80
   3ff7e:	f102 0104 	add.w	r1, r2, #4
   3ff82:	d02c      	beq.n	3ffde <_printf_i+0xaa>
   3ff84:	6812      	ldr	r2, [r2, #0]
   3ff86:	6019      	str	r1, [r3, #0]
   3ff88:	2a00      	cmp	r2, #0
   3ff8a:	da03      	bge.n	3ff94 <_printf_i+0x60>
   3ff8c:	232d      	movs	r3, #45	; 0x2d
   3ff8e:	4252      	negs	r2, r2
   3ff90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3ff94:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 40154 <_printf_i+0x220>
   3ff98:	230a      	movs	r3, #10
   3ff9a:	e03f      	b.n	4001c <_printf_i+0xe8>
   3ff9c:	2973      	cmp	r1, #115	; 0x73
   3ff9e:	f000 80a5 	beq.w	400ec <_printf_i+0x1b8>
   3ffa2:	d808      	bhi.n	3ffb6 <_printf_i+0x82>
   3ffa4:	296f      	cmp	r1, #111	; 0x6f
   3ffa6:	d021      	beq.n	3ffec <_printf_i+0xb8>
   3ffa8:	2970      	cmp	r1, #112	; 0x70
   3ffaa:	d1db      	bne.n	3ff64 <_printf_i+0x30>
   3ffac:	6822      	ldr	r2, [r4, #0]
   3ffae:	f042 0220 	orr.w	r2, r2, #32
   3ffb2:	6022      	str	r2, [r4, #0]
   3ffb4:	e003      	b.n	3ffbe <_printf_i+0x8a>
   3ffb6:	2975      	cmp	r1, #117	; 0x75
   3ffb8:	d018      	beq.n	3ffec <_printf_i+0xb8>
   3ffba:	2978      	cmp	r1, #120	; 0x78
   3ffbc:	d1d2      	bne.n	3ff64 <_printf_i+0x30>
   3ffbe:	2278      	movs	r2, #120	; 0x78
   3ffc0:	f8df c194 	ldr.w	ip, [pc, #404]	; 40158 <_printf_i+0x224>
   3ffc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   3ffc8:	e061      	b.n	4008e <_printf_i+0x15a>
   3ffca:	681a      	ldr	r2, [r3, #0]
   3ffcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
   3ffd0:	1d11      	adds	r1, r2, #4
   3ffd2:	6019      	str	r1, [r3, #0]
   3ffd4:	6813      	ldr	r3, [r2, #0]
   3ffd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3ffda:	2301      	movs	r3, #1
   3ffdc:	e093      	b.n	40106 <_printf_i+0x1d2>
   3ffde:	6812      	ldr	r2, [r2, #0]
   3ffe0:	f015 0f40 	tst.w	r5, #64	; 0x40
   3ffe4:	6019      	str	r1, [r3, #0]
   3ffe6:	bf18      	it	ne
   3ffe8:	b212      	sxthne	r2, r2
   3ffea:	e7cd      	b.n	3ff88 <_printf_i+0x54>
   3ffec:	f8d4 c000 	ldr.w	ip, [r4]
   3fff0:	681a      	ldr	r2, [r3, #0]
   3fff2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   3fff6:	f102 0504 	add.w	r5, r2, #4
   3fffa:	601d      	str	r5, [r3, #0]
   3fffc:	d001      	beq.n	40002 <_printf_i+0xce>
   3fffe:	6812      	ldr	r2, [r2, #0]
   40000:	e003      	b.n	4000a <_printf_i+0xd6>
   40002:	f01c 0f40 	tst.w	ip, #64	; 0x40
   40006:	d0fa      	beq.n	3fffe <_printf_i+0xca>
   40008:	8812      	ldrh	r2, [r2, #0]
   4000a:	296f      	cmp	r1, #111	; 0x6f
   4000c:	f8df c144 	ldr.w	ip, [pc, #324]	; 40154 <_printf_i+0x220>
   40010:	bf0c      	ite	eq
   40012:	2308      	moveq	r3, #8
   40014:	230a      	movne	r3, #10
   40016:	2100      	movs	r1, #0
   40018:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   4001c:	6865      	ldr	r5, [r4, #4]
   4001e:	2d00      	cmp	r5, #0
   40020:	60a5      	str	r5, [r4, #8]
   40022:	bfa2      	ittt	ge
   40024:	6821      	ldrge	r1, [r4, #0]
   40026:	f021 0104 	bicge.w	r1, r1, #4
   4002a:	6021      	strge	r1, [r4, #0]
   4002c:	b90a      	cbnz	r2, 40032 <_printf_i+0xfe>
   4002e:	2d00      	cmp	r5, #0
   40030:	d046      	beq.n	400c0 <_printf_i+0x18c>
   40032:	4605      	mov	r5, r0
   40034:	4293      	cmp	r3, r2
   40036:	fbb2 f1f3 	udiv	r1, r2, r3
   4003a:	fb03 2e11 	mls	lr, r3, r1, r2
   4003e:	f81c e00e 	ldrb.w	lr, [ip, lr]
   40042:	f805 ed01 	strb.w	lr, [r5, #-1]!
   40046:	d939      	bls.n	400bc <_printf_i+0x188>
   40048:	2b08      	cmp	r3, #8
   4004a:	d10b      	bne.n	40064 <_printf_i+0x130>
   4004c:	6823      	ldr	r3, [r4, #0]
   4004e:	07da      	lsls	r2, r3, #31
   40050:	d508      	bpl.n	40064 <_printf_i+0x130>
   40052:	6923      	ldr	r3, [r4, #16]
   40054:	6862      	ldr	r2, [r4, #4]
   40056:	429a      	cmp	r2, r3
   40058:	bfde      	ittt	le
   4005a:	2330      	movle	r3, #48	; 0x30
   4005c:	f805 3c01 	strble.w	r3, [r5, #-1]
   40060:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   40064:	1b40      	subs	r0, r0, r5
   40066:	6120      	str	r0, [r4, #16]
   40068:	f8cd 8000 	str.w	r8, [sp]
   4006c:	463b      	mov	r3, r7
   4006e:	aa03      	add	r2, sp, #12
   40070:	4621      	mov	r1, r4
   40072:	4630      	mov	r0, r6
   40074:	f005 f9b9 	bl	453ea <_printf_common>
   40078:	3001      	adds	r0, #1
   4007a:	d149      	bne.n	40110 <_printf_i+0x1dc>
   4007c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40080:	b005      	add	sp, #20
   40082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40086:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 40154 <_printf_i+0x220>
   4008a:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   4008e:	681d      	ldr	r5, [r3, #0]
   40090:	6821      	ldr	r1, [r4, #0]
   40092:	f855 2b04 	ldr.w	r2, [r5], #4
   40096:	601d      	str	r5, [r3, #0]
   40098:	060d      	lsls	r5, r1, #24
   4009a:	d50b      	bpl.n	400b4 <_printf_i+0x180>
   4009c:	07cd      	lsls	r5, r1, #31
   4009e:	bf44      	itt	mi
   400a0:	f041 0120 	orrmi.w	r1, r1, #32
   400a4:	6021      	strmi	r1, [r4, #0]
   400a6:	b91a      	cbnz	r2, 400b0 <_printf_i+0x17c>
   400a8:	6823      	ldr	r3, [r4, #0]
   400aa:	f023 0320 	bic.w	r3, r3, #32
   400ae:	6023      	str	r3, [r4, #0]
   400b0:	2310      	movs	r3, #16
   400b2:	e7b0      	b.n	40016 <_printf_i+0xe2>
   400b4:	064b      	lsls	r3, r1, #25
   400b6:	bf48      	it	mi
   400b8:	b292      	uxthmi	r2, r2
   400ba:	e7ef      	b.n	4009c <_printf_i+0x168>
   400bc:	460a      	mov	r2, r1
   400be:	e7b9      	b.n	40034 <_printf_i+0x100>
   400c0:	4605      	mov	r5, r0
   400c2:	e7c1      	b.n	40048 <_printf_i+0x114>
   400c4:	681a      	ldr	r2, [r3, #0]
   400c6:	f8d4 c000 	ldr.w	ip, [r4]
   400ca:	1d15      	adds	r5, r2, #4
   400cc:	6961      	ldr	r1, [r4, #20]
   400ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
   400d2:	601d      	str	r5, [r3, #0]
   400d4:	6813      	ldr	r3, [r2, #0]
   400d6:	d001      	beq.n	400dc <_printf_i+0x1a8>
   400d8:	6019      	str	r1, [r3, #0]
   400da:	e003      	b.n	400e4 <_printf_i+0x1b0>
   400dc:	f01c 0f40 	tst.w	ip, #64	; 0x40
   400e0:	d0fa      	beq.n	400d8 <_printf_i+0x1a4>
   400e2:	8019      	strh	r1, [r3, #0]
   400e4:	2300      	movs	r3, #0
   400e6:	4605      	mov	r5, r0
   400e8:	6123      	str	r3, [r4, #16]
   400ea:	e7bd      	b.n	40068 <_printf_i+0x134>
   400ec:	681a      	ldr	r2, [r3, #0]
   400ee:	1d11      	adds	r1, r2, #4
   400f0:	6019      	str	r1, [r3, #0]
   400f2:	2100      	movs	r1, #0
   400f4:	6815      	ldr	r5, [r2, #0]
   400f6:	6862      	ldr	r2, [r4, #4]
   400f8:	4628      	mov	r0, r5
   400fa:	f005 f879 	bl	451f0 <memchr>
   400fe:	b108      	cbz	r0, 40104 <_printf_i+0x1d0>
   40100:	1b40      	subs	r0, r0, r5
   40102:	6060      	str	r0, [r4, #4]
   40104:	6863      	ldr	r3, [r4, #4]
   40106:	6123      	str	r3, [r4, #16]
   40108:	2300      	movs	r3, #0
   4010a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   4010e:	e7ab      	b.n	40068 <_printf_i+0x134>
   40110:	6923      	ldr	r3, [r4, #16]
   40112:	462a      	mov	r2, r5
   40114:	4639      	mov	r1, r7
   40116:	4630      	mov	r0, r6
   40118:	47c0      	blx	r8
   4011a:	3001      	adds	r0, #1
   4011c:	d0ae      	beq.n	4007c <_printf_i+0x148>
   4011e:	6823      	ldr	r3, [r4, #0]
   40120:	079b      	lsls	r3, r3, #30
   40122:	d413      	bmi.n	4014c <_printf_i+0x218>
   40124:	68e0      	ldr	r0, [r4, #12]
   40126:	9b03      	ldr	r3, [sp, #12]
   40128:	4298      	cmp	r0, r3
   4012a:	bfb8      	it	lt
   4012c:	4618      	movlt	r0, r3
   4012e:	e7a7      	b.n	40080 <_printf_i+0x14c>
   40130:	2301      	movs	r3, #1
   40132:	464a      	mov	r2, r9
   40134:	4639      	mov	r1, r7
   40136:	4630      	mov	r0, r6
   40138:	47c0      	blx	r8
   4013a:	3001      	adds	r0, #1
   4013c:	d09e      	beq.n	4007c <_printf_i+0x148>
   4013e:	3501      	adds	r5, #1
   40140:	68e3      	ldr	r3, [r4, #12]
   40142:	9a03      	ldr	r2, [sp, #12]
   40144:	1a9b      	subs	r3, r3, r2
   40146:	42ab      	cmp	r3, r5
   40148:	dcf2      	bgt.n	40130 <_printf_i+0x1fc>
   4014a:	e7eb      	b.n	40124 <_printf_i+0x1f0>
   4014c:	2500      	movs	r5, #0
   4014e:	f104 0919 	add.w	r9, r4, #25
   40152:	e7f5      	b.n	40140 <_printf_i+0x20c>
   40154:	0004f32c 	.word	0x0004f32c
   40158:	00048f69 	.word	0x00048f69

0004015c <srand>:
   4015c:	b538      	push	{r3, r4, r5, lr}
   4015e:	4b0d      	ldr	r3, [pc, #52]	; (40194 <srand+0x38>)
   40160:	4605      	mov	r5, r0
   40162:	681c      	ldr	r4, [r3, #0]
   40164:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   40166:	b97b      	cbnz	r3, 40188 <srand+0x2c>
   40168:	2018      	movs	r0, #24
   4016a:	f7ff fad9 	bl	3f720 <malloc>
   4016e:	4a0a      	ldr	r2, [pc, #40]	; (40198 <srand+0x3c>)
   40170:	4b0a      	ldr	r3, [pc, #40]	; (4019c <srand+0x40>)
   40172:	63a0      	str	r0, [r4, #56]	; 0x38
   40174:	e9c0 2300 	strd	r2, r3, [r0]
   40178:	4b09      	ldr	r3, [pc, #36]	; (401a0 <srand+0x44>)
   4017a:	2201      	movs	r2, #1
   4017c:	6083      	str	r3, [r0, #8]
   4017e:	230b      	movs	r3, #11
   40180:	8183      	strh	r3, [r0, #12]
   40182:	2300      	movs	r3, #0
   40184:	e9c0 2304 	strd	r2, r3, [r0, #16]
   40188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4018a:	2200      	movs	r2, #0
   4018c:	611d      	str	r5, [r3, #16]
   4018e:	615a      	str	r2, [r3, #20]
   40190:	bd38      	pop	{r3, r4, r5, pc}
   40192:	bf00      	nop
   40194:	20020784 	.word	0x20020784
   40198:	abcd330e 	.word	0xabcd330e
   4019c:	e66d1234 	.word	0xe66d1234
   401a0:	0005deec 	.word	0x0005deec

000401a4 <rand>:
   401a4:	4b13      	ldr	r3, [pc, #76]	; (401f4 <rand+0x50>)
   401a6:	b510      	push	{r4, lr}
   401a8:	681c      	ldr	r4, [r3, #0]
   401aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   401ac:	b97b      	cbnz	r3, 401ce <rand+0x2a>
   401ae:	2018      	movs	r0, #24
   401b0:	f7ff fab6 	bl	3f720 <malloc>
   401b4:	4a10      	ldr	r2, [pc, #64]	; (401f8 <rand+0x54>)
   401b6:	4b11      	ldr	r3, [pc, #68]	; (401fc <rand+0x58>)
   401b8:	63a0      	str	r0, [r4, #56]	; 0x38
   401ba:	e9c0 2300 	strd	r2, r3, [r0]
   401be:	4b10      	ldr	r3, [pc, #64]	; (40200 <rand+0x5c>)
   401c0:	2201      	movs	r2, #1
   401c2:	6083      	str	r3, [r0, #8]
   401c4:	230b      	movs	r3, #11
   401c6:	8183      	strh	r3, [r0, #12]
   401c8:	2300      	movs	r3, #0
   401ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
   401ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   401d0:	480c      	ldr	r0, [pc, #48]	; (40204 <rand+0x60>)
   401d2:	690a      	ldr	r2, [r1, #16]
   401d4:	694b      	ldr	r3, [r1, #20]
   401d6:	4c0c      	ldr	r4, [pc, #48]	; (40208 <rand+0x64>)
   401d8:	4350      	muls	r0, r2
   401da:	fb04 0003 	mla	r0, r4, r3, r0
   401de:	fba2 3404 	umull	r3, r4, r2, r4
   401e2:	1c5a      	adds	r2, r3, #1
   401e4:	4404      	add	r4, r0
   401e6:	f144 0000 	adc.w	r0, r4, #0
   401ea:	e9c1 2004 	strd	r2, r0, [r1, #16]
   401ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   401f2:	bd10      	pop	{r4, pc}
   401f4:	20020784 	.word	0x20020784
   401f8:	abcd330e 	.word	0xabcd330e
   401fc:	e66d1234 	.word	0xe66d1234
   40200:	0005deec 	.word	0x0005deec
   40204:	5851f42d 	.word	0x5851f42d
   40208:	4c957f2d 	.word	0x4c957f2d

0004020c <realloc>:
   4020c:	4b02      	ldr	r3, [pc, #8]	; (40218 <realloc+0xc>)
   4020e:	460a      	mov	r2, r1
   40210:	4601      	mov	r1, r0
   40212:	6818      	ldr	r0, [r3, #0]
   40214:	f006 b827 	b.w	46266 <_realloc_r>
   40218:	20020784 	.word	0x20020784

0004021c <_sbrk_r>:
   4021c:	b538      	push	{r3, r4, r5, lr}
   4021e:	2300      	movs	r3, #0
   40220:	4c05      	ldr	r4, [pc, #20]	; (40238 <_sbrk_r+0x1c>)
   40222:	4605      	mov	r5, r0
   40224:	4608      	mov	r0, r1
   40226:	6023      	str	r3, [r4, #0]
   40228:	f7e7 fc36 	bl	27a98 <_sbrk>
   4022c:	1c43      	adds	r3, r0, #1
   4022e:	d102      	bne.n	40236 <_sbrk_r+0x1a>
   40230:	6823      	ldr	r3, [r4, #0]
   40232:	b103      	cbz	r3, 40236 <_sbrk_r+0x1a>
   40234:	602b      	str	r3, [r5, #0]
   40236:	bd38      	pop	{r3, r4, r5, pc}
   40238:	2002cc80 	.word	0x2002cc80

0004023c <sniprintf>:
   4023c:	b40c      	push	{r2, r3}
   4023e:	4b18      	ldr	r3, [pc, #96]	; (402a0 <sniprintf+0x64>)
   40240:	b530      	push	{r4, r5, lr}
   40242:	1e0c      	subs	r4, r1, #0
   40244:	b09d      	sub	sp, #116	; 0x74
   40246:	681d      	ldr	r5, [r3, #0]
   40248:	da08      	bge.n	4025c <sniprintf+0x20>
   4024a:	238b      	movs	r3, #139	; 0x8b
   4024c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40250:	602b      	str	r3, [r5, #0]
   40252:	b01d      	add	sp, #116	; 0x74
   40254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   40258:	b002      	add	sp, #8
   4025a:	4770      	bx	lr
   4025c:	f44f 7302 	mov.w	r3, #520	; 0x208
   40260:	9002      	str	r0, [sp, #8]
   40262:	9006      	str	r0, [sp, #24]
   40264:	a902      	add	r1, sp, #8
   40266:	f8ad 3014 	strh.w	r3, [sp, #20]
   4026a:	bf14      	ite	ne
   4026c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   40270:	4623      	moveq	r3, r4
   40272:	9a20      	ldr	r2, [sp, #128]	; 0x80
   40274:	4628      	mov	r0, r5
   40276:	9304      	str	r3, [sp, #16]
   40278:	9307      	str	r3, [sp, #28]
   4027a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4027e:	f8ad 3016 	strh.w	r3, [sp, #22]
   40282:	ab21      	add	r3, sp, #132	; 0x84
   40284:	9301      	str	r3, [sp, #4]
   40286:	f000 ff19 	bl	410bc <_svfiprintf_r>
   4028a:	1c43      	adds	r3, r0, #1
   4028c:	bfbc      	itt	lt
   4028e:	238b      	movlt	r3, #139	; 0x8b
   40290:	602b      	strlt	r3, [r5, #0]
   40292:	2c00      	cmp	r4, #0
   40294:	d0dd      	beq.n	40252 <sniprintf+0x16>
   40296:	9b02      	ldr	r3, [sp, #8]
   40298:	2200      	movs	r2, #0
   4029a:	701a      	strb	r2, [r3, #0]
   4029c:	e7d9      	b.n	40252 <sniprintf+0x16>
   4029e:	bf00      	nop
   402a0:	20020784 	.word	0x20020784

000402a4 <siscanf>:
   402a4:	b40e      	push	{r1, r2, r3}
   402a6:	b530      	push	{r4, r5, lr}
   402a8:	b09c      	sub	sp, #112	; 0x70
   402aa:	f44f 7201 	mov.w	r2, #516	; 0x204
   402ae:	ac1f      	add	r4, sp, #124	; 0x7c
   402b0:	f8ad 2014 	strh.w	r2, [sp, #20]
   402b4:	9002      	str	r0, [sp, #8]
   402b6:	f854 5b04 	ldr.w	r5, [r4], #4
   402ba:	9006      	str	r0, [sp, #24]
   402bc:	f7dc ffd2 	bl	1d264 <strlen>
   402c0:	4b0b      	ldr	r3, [pc, #44]	; (402f0 <siscanf+0x4c>)
   402c2:	462a      	mov	r2, r5
   402c4:	9003      	str	r0, [sp, #12]
   402c6:	a902      	add	r1, sp, #8
   402c8:	930b      	str	r3, [sp, #44]	; 0x2c
   402ca:	2300      	movs	r3, #0
   402cc:	9007      	str	r0, [sp, #28]
   402ce:	930f      	str	r3, [sp, #60]	; 0x3c
   402d0:	9314      	str	r3, [sp, #80]	; 0x50
   402d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   402d6:	4807      	ldr	r0, [pc, #28]	; (402f4 <siscanf+0x50>)
   402d8:	f8ad 3016 	strh.w	r3, [sp, #22]
   402dc:	4623      	mov	r3, r4
   402de:	6800      	ldr	r0, [r0, #0]
   402e0:	9401      	str	r4, [sp, #4]
   402e2:	f000 ffe3 	bl	412ac <__ssvfiscanf_r>
   402e6:	b01c      	add	sp, #112	; 0x70
   402e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   402ec:	b003      	add	sp, #12
   402ee:	4770      	bx	lr
   402f0:	00045531 	.word	0x00045531
   402f4:	20020784 	.word	0x20020784

000402f8 <strtod>:
   402f8:	460a      	mov	r2, r1
   402fa:	4601      	mov	r1, r0
   402fc:	4802      	ldr	r0, [pc, #8]	; (40308 <strtod+0x10>)
   402fe:	4b03      	ldr	r3, [pc, #12]	; (4030c <strtod+0x14>)
   40300:	6800      	ldr	r0, [r0, #0]
   40302:	f7df b9dd 	b.w	1f6c0 <_strtod_l>
   40306:	bf00      	nop
   40308:	20020784 	.word	0x20020784
   4030c:	200207e8 	.word	0x200207e8

00040310 <_strtol_l.isra.0>:
   40310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   40314:	4686      	mov	lr, r0
   40316:	4f39      	ldr	r7, [pc, #228]	; (403fc <_strtol_l.isra.0+0xec>)
   40318:	4608      	mov	r0, r1
   4031a:	4605      	mov	r5, r0
   4031c:	f815 4b01 	ldrb.w	r4, [r5], #1
   40320:	5de6      	ldrb	r6, [r4, r7]
   40322:	f016 0608 	ands.w	r6, r6, #8
   40326:	d135      	bne.n	40394 <_strtol_l.isra.0+0x84>
   40328:	2c2d      	cmp	r4, #45	; 0x2d
   4032a:	d135      	bne.n	40398 <_strtol_l.isra.0+0x88>
   4032c:	782c      	ldrb	r4, [r5, #0]
   4032e:	f04f 0801 	mov.w	r8, #1
   40332:	1c85      	adds	r5, r0, #2
   40334:	2b00      	cmp	r3, #0
   40336:	d05c      	beq.n	403f2 <_strtol_l.isra.0+0xe2>
   40338:	2b10      	cmp	r3, #16
   4033a:	d109      	bne.n	40350 <_strtol_l.isra.0+0x40>
   4033c:	2c30      	cmp	r4, #48	; 0x30
   4033e:	d107      	bne.n	40350 <_strtol_l.isra.0+0x40>
   40340:	7828      	ldrb	r0, [r5, #0]
   40342:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   40346:	2858      	cmp	r0, #88	; 0x58
   40348:	d14e      	bne.n	403e8 <_strtol_l.isra.0+0xd8>
   4034a:	786c      	ldrb	r4, [r5, #1]
   4034c:	2310      	movs	r3, #16
   4034e:	3502      	adds	r5, #2
   40350:	f1b8 0f00 	cmp.w	r8, #0
   40354:	f04f 0700 	mov.w	r7, #0
   40358:	bf14      	ite	ne
   4035a:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   4035e:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   40362:	4638      	mov	r0, r7
   40364:	fbbc f9f3 	udiv	r9, ip, r3
   40368:	fb03 ca19 	mls	sl, r3, r9, ip
   4036c:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   40370:	2e09      	cmp	r6, #9
   40372:	d817      	bhi.n	403a4 <_strtol_l.isra.0+0x94>
   40374:	4634      	mov	r4, r6
   40376:	42a3      	cmp	r3, r4
   40378:	dd23      	ble.n	403c2 <_strtol_l.isra.0+0xb2>
   4037a:	1c7e      	adds	r6, r7, #1
   4037c:	d007      	beq.n	4038e <_strtol_l.isra.0+0x7e>
   4037e:	4581      	cmp	r9, r0
   40380:	d31c      	bcc.n	403bc <_strtol_l.isra.0+0xac>
   40382:	d101      	bne.n	40388 <_strtol_l.isra.0+0x78>
   40384:	45a2      	cmp	sl, r4
   40386:	db19      	blt.n	403bc <_strtol_l.isra.0+0xac>
   40388:	fb00 4003 	mla	r0, r0, r3, r4
   4038c:	2701      	movs	r7, #1
   4038e:	f815 4b01 	ldrb.w	r4, [r5], #1
   40392:	e7eb      	b.n	4036c <_strtol_l.isra.0+0x5c>
   40394:	4628      	mov	r0, r5
   40396:	e7c0      	b.n	4031a <_strtol_l.isra.0+0xa>
   40398:	2c2b      	cmp	r4, #43	; 0x2b
   4039a:	46b0      	mov	r8, r6
   4039c:	bf04      	itt	eq
   4039e:	782c      	ldrbeq	r4, [r5, #0]
   403a0:	1c85      	addeq	r5, r0, #2
   403a2:	e7c7      	b.n	40334 <_strtol_l.isra.0+0x24>
   403a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   403a8:	2e19      	cmp	r6, #25
   403aa:	d801      	bhi.n	403b0 <_strtol_l.isra.0+0xa0>
   403ac:	3c37      	subs	r4, #55	; 0x37
   403ae:	e7e2      	b.n	40376 <_strtol_l.isra.0+0x66>
   403b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   403b4:	2e19      	cmp	r6, #25
   403b6:	d804      	bhi.n	403c2 <_strtol_l.isra.0+0xb2>
   403b8:	3c57      	subs	r4, #87	; 0x57
   403ba:	e7dc      	b.n	40376 <_strtol_l.isra.0+0x66>
   403bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   403c0:	e7e5      	b.n	4038e <_strtol_l.isra.0+0x7e>
   403c2:	1c7b      	adds	r3, r7, #1
   403c4:	d106      	bne.n	403d4 <_strtol_l.isra.0+0xc4>
   403c6:	2322      	movs	r3, #34	; 0x22
   403c8:	4660      	mov	r0, ip
   403ca:	f8ce 3000 	str.w	r3, [lr]
   403ce:	b942      	cbnz	r2, 403e2 <_strtol_l.isra.0+0xd2>
   403d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   403d4:	f1b8 0f00 	cmp.w	r8, #0
   403d8:	d000      	beq.n	403dc <_strtol_l.isra.0+0xcc>
   403da:	4240      	negs	r0, r0
   403dc:	2a00      	cmp	r2, #0
   403de:	d0f7      	beq.n	403d0 <_strtol_l.isra.0+0xc0>
   403e0:	b107      	cbz	r7, 403e4 <_strtol_l.isra.0+0xd4>
   403e2:	1e69      	subs	r1, r5, #1
   403e4:	6011      	str	r1, [r2, #0]
   403e6:	e7f3      	b.n	403d0 <_strtol_l.isra.0+0xc0>
   403e8:	2430      	movs	r4, #48	; 0x30
   403ea:	2b00      	cmp	r3, #0
   403ec:	d1b0      	bne.n	40350 <_strtol_l.isra.0+0x40>
   403ee:	2308      	movs	r3, #8
   403f0:	e7ae      	b.n	40350 <_strtol_l.isra.0+0x40>
   403f2:	2c30      	cmp	r4, #48	; 0x30
   403f4:	d0a4      	beq.n	40340 <_strtol_l.isra.0+0x30>
   403f6:	230a      	movs	r3, #10
   403f8:	e7aa      	b.n	40350 <_strtol_l.isra.0+0x40>
   403fa:	bf00      	nop
   403fc:	0004f20f 	.word	0x0004f20f

00040400 <strtol>:
   40400:	4613      	mov	r3, r2
   40402:	460a      	mov	r2, r1
   40404:	4601      	mov	r1, r0
   40406:	4802      	ldr	r0, [pc, #8]	; (40410 <strtol+0x10>)
   40408:	6800      	ldr	r0, [r0, #0]
   4040a:	f7ff bf81 	b.w	40310 <_strtol_l.isra.0>
   4040e:	bf00      	nop
   40410:	20020784 	.word	0x20020784

00040414 <_strtoul_l.isra.0>:
   40414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40418:	4686      	mov	lr, r0
   4041a:	4f37      	ldr	r7, [pc, #220]	; (404f8 <_strtoul_l.isra.0+0xe4>)
   4041c:	4608      	mov	r0, r1
   4041e:	4605      	mov	r5, r0
   40420:	f815 4b01 	ldrb.w	r4, [r5], #1
   40424:	5de6      	ldrb	r6, [r4, r7]
   40426:	f016 0608 	ands.w	r6, r6, #8
   4042a:	d131      	bne.n	40490 <_strtoul_l.isra.0+0x7c>
   4042c:	2c2d      	cmp	r4, #45	; 0x2d
   4042e:	d131      	bne.n	40494 <_strtoul_l.isra.0+0x80>
   40430:	782c      	ldrb	r4, [r5, #0]
   40432:	f04f 0801 	mov.w	r8, #1
   40436:	1c85      	adds	r5, r0, #2
   40438:	2b00      	cmp	r3, #0
   4043a:	d059      	beq.n	404f0 <_strtoul_l.isra.0+0xdc>
   4043c:	2b10      	cmp	r3, #16
   4043e:	d109      	bne.n	40454 <_strtoul_l.isra.0+0x40>
   40440:	2c30      	cmp	r4, #48	; 0x30
   40442:	d107      	bne.n	40454 <_strtoul_l.isra.0+0x40>
   40444:	7828      	ldrb	r0, [r5, #0]
   40446:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   4044a:	2858      	cmp	r0, #88	; 0x58
   4044c:	d14b      	bne.n	404e6 <_strtoul_l.isra.0+0xd2>
   4044e:	786c      	ldrb	r4, [r5, #1]
   40450:	2310      	movs	r3, #16
   40452:	3502      	adds	r5, #2
   40454:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   40458:	2600      	movs	r6, #0
   4045a:	fbbc fcf3 	udiv	ip, ip, r3
   4045e:	fb03 f90c 	mul.w	r9, r3, ip
   40462:	4630      	mov	r0, r6
   40464:	ea6f 0909 	mvn.w	r9, r9
   40468:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   4046c:	2f09      	cmp	r7, #9
   4046e:	d817      	bhi.n	404a0 <_strtoul_l.isra.0+0x8c>
   40470:	463c      	mov	r4, r7
   40472:	42a3      	cmp	r3, r4
   40474:	dd23      	ble.n	404be <_strtoul_l.isra.0+0xaa>
   40476:	2e00      	cmp	r6, #0
   40478:	db1e      	blt.n	404b8 <_strtoul_l.isra.0+0xa4>
   4047a:	4584      	cmp	ip, r0
   4047c:	d31c      	bcc.n	404b8 <_strtoul_l.isra.0+0xa4>
   4047e:	d101      	bne.n	40484 <_strtoul_l.isra.0+0x70>
   40480:	45a1      	cmp	r9, r4
   40482:	db19      	blt.n	404b8 <_strtoul_l.isra.0+0xa4>
   40484:	fb00 4003 	mla	r0, r0, r3, r4
   40488:	2601      	movs	r6, #1
   4048a:	f815 4b01 	ldrb.w	r4, [r5], #1
   4048e:	e7eb      	b.n	40468 <_strtoul_l.isra.0+0x54>
   40490:	4628      	mov	r0, r5
   40492:	e7c4      	b.n	4041e <_strtoul_l.isra.0+0xa>
   40494:	2c2b      	cmp	r4, #43	; 0x2b
   40496:	46b0      	mov	r8, r6
   40498:	bf04      	itt	eq
   4049a:	782c      	ldrbeq	r4, [r5, #0]
   4049c:	1c85      	addeq	r5, r0, #2
   4049e:	e7cb      	b.n	40438 <_strtoul_l.isra.0+0x24>
   404a0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   404a4:	2f19      	cmp	r7, #25
   404a6:	d801      	bhi.n	404ac <_strtoul_l.isra.0+0x98>
   404a8:	3c37      	subs	r4, #55	; 0x37
   404aa:	e7e2      	b.n	40472 <_strtoul_l.isra.0+0x5e>
   404ac:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   404b0:	2f19      	cmp	r7, #25
   404b2:	d804      	bhi.n	404be <_strtoul_l.isra.0+0xaa>
   404b4:	3c57      	subs	r4, #87	; 0x57
   404b6:	e7dc      	b.n	40472 <_strtoul_l.isra.0+0x5e>
   404b8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   404bc:	e7e5      	b.n	4048a <_strtoul_l.isra.0+0x76>
   404be:	2e00      	cmp	r6, #0
   404c0:	da07      	bge.n	404d2 <_strtoul_l.isra.0+0xbe>
   404c2:	2322      	movs	r3, #34	; 0x22
   404c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   404c8:	f8ce 3000 	str.w	r3, [lr]
   404cc:	b942      	cbnz	r2, 404e0 <_strtoul_l.isra.0+0xcc>
   404ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   404d2:	f1b8 0f00 	cmp.w	r8, #0
   404d6:	d000      	beq.n	404da <_strtoul_l.isra.0+0xc6>
   404d8:	4240      	negs	r0, r0
   404da:	2a00      	cmp	r2, #0
   404dc:	d0f7      	beq.n	404ce <_strtoul_l.isra.0+0xba>
   404de:	b106      	cbz	r6, 404e2 <_strtoul_l.isra.0+0xce>
   404e0:	1e69      	subs	r1, r5, #1
   404e2:	6011      	str	r1, [r2, #0]
   404e4:	e7f3      	b.n	404ce <_strtoul_l.isra.0+0xba>
   404e6:	2430      	movs	r4, #48	; 0x30
   404e8:	2b00      	cmp	r3, #0
   404ea:	d1b3      	bne.n	40454 <_strtoul_l.isra.0+0x40>
   404ec:	2308      	movs	r3, #8
   404ee:	e7b1      	b.n	40454 <_strtoul_l.isra.0+0x40>
   404f0:	2c30      	cmp	r4, #48	; 0x30
   404f2:	d0a7      	beq.n	40444 <_strtoul_l.isra.0+0x30>
   404f4:	230a      	movs	r3, #10
   404f6:	e7ad      	b.n	40454 <_strtoul_l.isra.0+0x40>
   404f8:	0004f20f 	.word	0x0004f20f

000404fc <strtoul>:
   404fc:	4613      	mov	r3, r2
   404fe:	460a      	mov	r2, r1
   40500:	4601      	mov	r1, r0
   40502:	4802      	ldr	r0, [pc, #8]	; (4050c <strtoul+0x10>)
   40504:	6800      	ldr	r0, [r0, #0]
   40506:	f7ff bf85 	b.w	40414 <_strtoul_l.isra.0>
   4050a:	bf00      	nop
   4050c:	20020784 	.word	0x20020784

00040510 <vsniprintf>:
   40510:	b507      	push	{r0, r1, r2, lr}
   40512:	9300      	str	r3, [sp, #0]
   40514:	4613      	mov	r3, r2
   40516:	460a      	mov	r2, r1
   40518:	4601      	mov	r1, r0
   4051a:	4803      	ldr	r0, [pc, #12]	; (40528 <vsniprintf+0x18>)
   4051c:	6800      	ldr	r0, [r0, #0]
   4051e:	f005 f910 	bl	45742 <_vsniprintf_r>
   40522:	b003      	add	sp, #12
   40524:	f85d fb04 	ldr.w	pc, [sp], #4
   40528:	20020784 	.word	0x20020784

0004052c <_vsiprintf_r>:
   4052c:	b500      	push	{lr}
   4052e:	b09b      	sub	sp, #108	; 0x6c
   40530:	9100      	str	r1, [sp, #0]
   40532:	9104      	str	r1, [sp, #16]
   40534:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   40538:	9105      	str	r1, [sp, #20]
   4053a:	9102      	str	r1, [sp, #8]
   4053c:	4905      	ldr	r1, [pc, #20]	; (40554 <_vsiprintf_r+0x28>)
   4053e:	9103      	str	r1, [sp, #12]
   40540:	4669      	mov	r1, sp
   40542:	f000 fdbb 	bl	410bc <_svfiprintf_r>
   40546:	9b00      	ldr	r3, [sp, #0]
   40548:	2200      	movs	r2, #0
   4054a:	701a      	strb	r2, [r3, #0]
   4054c:	b01b      	add	sp, #108	; 0x6c
   4054e:	f85d fb04 	ldr.w	pc, [sp], #4
   40552:	bf00      	nop
   40554:	ffff0208 	.word	0xffff0208

00040558 <vsiprintf>:
   40558:	4613      	mov	r3, r2
   4055a:	460a      	mov	r2, r1
   4055c:	4601      	mov	r1, r0
   4055e:	4802      	ldr	r0, [pc, #8]	; (40568 <vsiprintf+0x10>)
   40560:	6800      	ldr	r0, [r0, #0]
   40562:	f7ff bfe3 	b.w	4052c <_vsiprintf_r>
   40566:	bf00      	nop
   40568:	20020784 	.word	0x20020784

0004056c <__swbuf_r>:
   4056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4056e:	460e      	mov	r6, r1
   40570:	4614      	mov	r4, r2
   40572:	4605      	mov	r5, r0
   40574:	b118      	cbz	r0, 4057e <__swbuf_r+0x12>
   40576:	6983      	ldr	r3, [r0, #24]
   40578:	b90b      	cbnz	r3, 4057e <__swbuf_r+0x12>
   4057a:	f000 f9db 	bl	40934 <__sinit>
   4057e:	4b21      	ldr	r3, [pc, #132]	; (40604 <__swbuf_r+0x98>)
   40580:	429c      	cmp	r4, r3
   40582:	d12b      	bne.n	405dc <__swbuf_r+0x70>
   40584:	686c      	ldr	r4, [r5, #4]
   40586:	69a3      	ldr	r3, [r4, #24]
   40588:	60a3      	str	r3, [r4, #8]
   4058a:	89a3      	ldrh	r3, [r4, #12]
   4058c:	071a      	lsls	r2, r3, #28
   4058e:	d52f      	bpl.n	405f0 <__swbuf_r+0x84>
   40590:	6923      	ldr	r3, [r4, #16]
   40592:	b36b      	cbz	r3, 405f0 <__swbuf_r+0x84>
   40594:	6923      	ldr	r3, [r4, #16]
   40596:	b2f6      	uxtb	r6, r6
   40598:	6820      	ldr	r0, [r4, #0]
   4059a:	4637      	mov	r7, r6
   4059c:	1ac0      	subs	r0, r0, r3
   4059e:	6963      	ldr	r3, [r4, #20]
   405a0:	4283      	cmp	r3, r0
   405a2:	dc04      	bgt.n	405ae <__swbuf_r+0x42>
   405a4:	4621      	mov	r1, r4
   405a6:	4628      	mov	r0, r5
   405a8:	f000 f946 	bl	40838 <_fflush_r>
   405ac:	bb30      	cbnz	r0, 405fc <__swbuf_r+0x90>
   405ae:	68a3      	ldr	r3, [r4, #8]
   405b0:	3001      	adds	r0, #1
   405b2:	3b01      	subs	r3, #1
   405b4:	60a3      	str	r3, [r4, #8]
   405b6:	6823      	ldr	r3, [r4, #0]
   405b8:	1c5a      	adds	r2, r3, #1
   405ba:	6022      	str	r2, [r4, #0]
   405bc:	701e      	strb	r6, [r3, #0]
   405be:	6963      	ldr	r3, [r4, #20]
   405c0:	4283      	cmp	r3, r0
   405c2:	d004      	beq.n	405ce <__swbuf_r+0x62>
   405c4:	89a3      	ldrh	r3, [r4, #12]
   405c6:	07db      	lsls	r3, r3, #31
   405c8:	d506      	bpl.n	405d8 <__swbuf_r+0x6c>
   405ca:	2e0a      	cmp	r6, #10
   405cc:	d104      	bne.n	405d8 <__swbuf_r+0x6c>
   405ce:	4621      	mov	r1, r4
   405d0:	4628      	mov	r0, r5
   405d2:	f000 f931 	bl	40838 <_fflush_r>
   405d6:	b988      	cbnz	r0, 405fc <__swbuf_r+0x90>
   405d8:	4638      	mov	r0, r7
   405da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   405dc:	4b0a      	ldr	r3, [pc, #40]	; (40608 <__swbuf_r+0x9c>)
   405de:	429c      	cmp	r4, r3
   405e0:	d101      	bne.n	405e6 <__swbuf_r+0x7a>
   405e2:	68ac      	ldr	r4, [r5, #8]
   405e4:	e7cf      	b.n	40586 <__swbuf_r+0x1a>
   405e6:	4b09      	ldr	r3, [pc, #36]	; (4060c <__swbuf_r+0xa0>)
   405e8:	429c      	cmp	r4, r3
   405ea:	bf08      	it	eq
   405ec:	68ec      	ldreq	r4, [r5, #12]
   405ee:	e7ca      	b.n	40586 <__swbuf_r+0x1a>
   405f0:	4621      	mov	r1, r4
   405f2:	4628      	mov	r0, r5
   405f4:	f000 f81e 	bl	40634 <__swsetup_r>
   405f8:	2800      	cmp	r0, #0
   405fa:	d0cb      	beq.n	40594 <__swbuf_r+0x28>
   405fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   40600:	e7ea      	b.n	405d8 <__swbuf_r+0x6c>
   40602:	bf00      	nop
   40604:	000478bc 	.word	0x000478bc
   40608:	000478dc 	.word	0x000478dc
   4060c:	0004789c 	.word	0x0004789c

00040610 <_write_r>:
   40610:	b538      	push	{r3, r4, r5, lr}
   40612:	4605      	mov	r5, r0
   40614:	4c06      	ldr	r4, [pc, #24]	; (40630 <_write_r+0x20>)
   40616:	4608      	mov	r0, r1
   40618:	4611      	mov	r1, r2
   4061a:	2200      	movs	r2, #0
   4061c:	6022      	str	r2, [r4, #0]
   4061e:	461a      	mov	r2, r3
   40620:	f002 fb67 	bl	42cf2 <_write>
   40624:	1c43      	adds	r3, r0, #1
   40626:	d102      	bne.n	4062e <_write_r+0x1e>
   40628:	6823      	ldr	r3, [r4, #0]
   4062a:	b103      	cbz	r3, 4062e <_write_r+0x1e>
   4062c:	602b      	str	r3, [r5, #0]
   4062e:	bd38      	pop	{r3, r4, r5, pc}
   40630:	2002cc80 	.word	0x2002cc80

00040634 <__swsetup_r>:
   40634:	4b32      	ldr	r3, [pc, #200]	; (40700 <__swsetup_r+0xcc>)
   40636:	b570      	push	{r4, r5, r6, lr}
   40638:	681d      	ldr	r5, [r3, #0]
   4063a:	4606      	mov	r6, r0
   4063c:	460c      	mov	r4, r1
   4063e:	b125      	cbz	r5, 4064a <__swsetup_r+0x16>
   40640:	69ab      	ldr	r3, [r5, #24]
   40642:	b913      	cbnz	r3, 4064a <__swsetup_r+0x16>
   40644:	4628      	mov	r0, r5
   40646:	f000 f975 	bl	40934 <__sinit>
   4064a:	4b2e      	ldr	r3, [pc, #184]	; (40704 <__swsetup_r+0xd0>)
   4064c:	429c      	cmp	r4, r3
   4064e:	d10f      	bne.n	40670 <__swsetup_r+0x3c>
   40650:	686c      	ldr	r4, [r5, #4]
   40652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   40656:	b29a      	uxth	r2, r3
   40658:	0715      	lsls	r5, r2, #28
   4065a:	d42c      	bmi.n	406b6 <__swsetup_r+0x82>
   4065c:	06d0      	lsls	r0, r2, #27
   4065e:	d411      	bmi.n	40684 <__swsetup_r+0x50>
   40660:	2209      	movs	r2, #9
   40662:	6032      	str	r2, [r6, #0]
   40664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4066c:	81a3      	strh	r3, [r4, #12]
   4066e:	e03e      	b.n	406ee <__swsetup_r+0xba>
   40670:	4b25      	ldr	r3, [pc, #148]	; (40708 <__swsetup_r+0xd4>)
   40672:	429c      	cmp	r4, r3
   40674:	d101      	bne.n	4067a <__swsetup_r+0x46>
   40676:	68ac      	ldr	r4, [r5, #8]
   40678:	e7eb      	b.n	40652 <__swsetup_r+0x1e>
   4067a:	4b24      	ldr	r3, [pc, #144]	; (4070c <__swsetup_r+0xd8>)
   4067c:	429c      	cmp	r4, r3
   4067e:	bf08      	it	eq
   40680:	68ec      	ldreq	r4, [r5, #12]
   40682:	e7e6      	b.n	40652 <__swsetup_r+0x1e>
   40684:	0751      	lsls	r1, r2, #29
   40686:	d512      	bpl.n	406ae <__swsetup_r+0x7a>
   40688:	6b61      	ldr	r1, [r4, #52]	; 0x34
   4068a:	b141      	cbz	r1, 4069e <__swsetup_r+0x6a>
   4068c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   40690:	4299      	cmp	r1, r3
   40692:	d002      	beq.n	4069a <__swsetup_r+0x66>
   40694:	4630      	mov	r0, r6
   40696:	f7ff f853 	bl	3f740 <_free_r>
   4069a:	2300      	movs	r3, #0
   4069c:	6363      	str	r3, [r4, #52]	; 0x34
   4069e:	89a3      	ldrh	r3, [r4, #12]
   406a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   406a4:	81a3      	strh	r3, [r4, #12]
   406a6:	2300      	movs	r3, #0
   406a8:	6063      	str	r3, [r4, #4]
   406aa:	6923      	ldr	r3, [r4, #16]
   406ac:	6023      	str	r3, [r4, #0]
   406ae:	89a3      	ldrh	r3, [r4, #12]
   406b0:	f043 0308 	orr.w	r3, r3, #8
   406b4:	81a3      	strh	r3, [r4, #12]
   406b6:	6923      	ldr	r3, [r4, #16]
   406b8:	b94b      	cbnz	r3, 406ce <__swsetup_r+0x9a>
   406ba:	89a3      	ldrh	r3, [r4, #12]
   406bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
   406c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   406c4:	d003      	beq.n	406ce <__swsetup_r+0x9a>
   406c6:	4621      	mov	r1, r4
   406c8:	4630      	mov	r0, r6
   406ca:	f000 fbe9 	bl	40ea0 <__smakebuf_r>
   406ce:	89a2      	ldrh	r2, [r4, #12]
   406d0:	f012 0301 	ands.w	r3, r2, #1
   406d4:	d00c      	beq.n	406f0 <__swsetup_r+0xbc>
   406d6:	2300      	movs	r3, #0
   406d8:	60a3      	str	r3, [r4, #8]
   406da:	6963      	ldr	r3, [r4, #20]
   406dc:	425b      	negs	r3, r3
   406de:	61a3      	str	r3, [r4, #24]
   406e0:	6923      	ldr	r3, [r4, #16]
   406e2:	b953      	cbnz	r3, 406fa <__swsetup_r+0xc6>
   406e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   406e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   406ec:	d1ba      	bne.n	40664 <__swsetup_r+0x30>
   406ee:	bd70      	pop	{r4, r5, r6, pc}
   406f0:	0792      	lsls	r2, r2, #30
   406f2:	bf58      	it	pl
   406f4:	6963      	ldrpl	r3, [r4, #20]
   406f6:	60a3      	str	r3, [r4, #8]
   406f8:	e7f2      	b.n	406e0 <__swsetup_r+0xac>
   406fa:	2000      	movs	r0, #0
   406fc:	e7f7      	b.n	406ee <__swsetup_r+0xba>
   406fe:	bf00      	nop
   40700:	20020784 	.word	0x20020784
   40704:	000478bc 	.word	0x000478bc
   40708:	000478dc 	.word	0x000478dc
   4070c:	0004789c 	.word	0x0004789c

00040710 <_close_r>:
   40710:	b538      	push	{r3, r4, r5, lr}
   40712:	2300      	movs	r3, #0
   40714:	4c05      	ldr	r4, [pc, #20]	; (4072c <_close_r+0x1c>)
   40716:	4605      	mov	r5, r0
   40718:	4608      	mov	r0, r1
   4071a:	6023      	str	r3, [r4, #0]
   4071c:	f002 faed 	bl	42cfa <_close>
   40720:	1c43      	adds	r3, r0, #1
   40722:	d102      	bne.n	4072a <_close_r+0x1a>
   40724:	6823      	ldr	r3, [r4, #0]
   40726:	b103      	cbz	r3, 4072a <_close_r+0x1a>
   40728:	602b      	str	r3, [r5, #0]
   4072a:	bd38      	pop	{r3, r4, r5, pc}
   4072c:	2002cc80 	.word	0x2002cc80

00040730 <__sflush_r>:
   40730:	898a      	ldrh	r2, [r1, #12]
   40732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40736:	4605      	mov	r5, r0
   40738:	0710      	lsls	r0, r2, #28
   4073a:	460c      	mov	r4, r1
   4073c:	d458      	bmi.n	407f0 <__sflush_r+0xc0>
   4073e:	684b      	ldr	r3, [r1, #4]
   40740:	2b00      	cmp	r3, #0
   40742:	dc05      	bgt.n	40750 <__sflush_r+0x20>
   40744:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   40746:	2b00      	cmp	r3, #0
   40748:	dc02      	bgt.n	40750 <__sflush_r+0x20>
   4074a:	2000      	movs	r0, #0
   4074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   40752:	2e00      	cmp	r6, #0
   40754:	d0f9      	beq.n	4074a <__sflush_r+0x1a>
   40756:	2300      	movs	r3, #0
   40758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   4075c:	682f      	ldr	r7, [r5, #0]
   4075e:	602b      	str	r3, [r5, #0]
   40760:	d032      	beq.n	407c8 <__sflush_r+0x98>
   40762:	6d60      	ldr	r0, [r4, #84]	; 0x54
   40764:	89a3      	ldrh	r3, [r4, #12]
   40766:	075a      	lsls	r2, r3, #29
   40768:	d505      	bpl.n	40776 <__sflush_r+0x46>
   4076a:	6863      	ldr	r3, [r4, #4]
   4076c:	1ac0      	subs	r0, r0, r3
   4076e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   40770:	b10b      	cbz	r3, 40776 <__sflush_r+0x46>
   40772:	6c23      	ldr	r3, [r4, #64]	; 0x40
   40774:	1ac0      	subs	r0, r0, r3
   40776:	2300      	movs	r3, #0
   40778:	4602      	mov	r2, r0
   4077a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   4077c:	4628      	mov	r0, r5
   4077e:	6a21      	ldr	r1, [r4, #32]
   40780:	47b0      	blx	r6
   40782:	1c43      	adds	r3, r0, #1
   40784:	89a3      	ldrh	r3, [r4, #12]
   40786:	d106      	bne.n	40796 <__sflush_r+0x66>
   40788:	6829      	ldr	r1, [r5, #0]
   4078a:	291d      	cmp	r1, #29
   4078c:	d82c      	bhi.n	407e8 <__sflush_r+0xb8>
   4078e:	4a29      	ldr	r2, [pc, #164]	; (40834 <__sflush_r+0x104>)
   40790:	40ca      	lsrs	r2, r1
   40792:	07d6      	lsls	r6, r2, #31
   40794:	d528      	bpl.n	407e8 <__sflush_r+0xb8>
   40796:	2200      	movs	r2, #0
   40798:	04d9      	lsls	r1, r3, #19
   4079a:	6062      	str	r2, [r4, #4]
   4079c:	6922      	ldr	r2, [r4, #16]
   4079e:	6022      	str	r2, [r4, #0]
   407a0:	d504      	bpl.n	407ac <__sflush_r+0x7c>
   407a2:	1c42      	adds	r2, r0, #1
   407a4:	d101      	bne.n	407aa <__sflush_r+0x7a>
   407a6:	682b      	ldr	r3, [r5, #0]
   407a8:	b903      	cbnz	r3, 407ac <__sflush_r+0x7c>
   407aa:	6560      	str	r0, [r4, #84]	; 0x54
   407ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   407ae:	602f      	str	r7, [r5, #0]
   407b0:	2900      	cmp	r1, #0
   407b2:	d0ca      	beq.n	4074a <__sflush_r+0x1a>
   407b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   407b8:	4299      	cmp	r1, r3
   407ba:	d002      	beq.n	407c2 <__sflush_r+0x92>
   407bc:	4628      	mov	r0, r5
   407be:	f7fe ffbf 	bl	3f740 <_free_r>
   407c2:	2000      	movs	r0, #0
   407c4:	6360      	str	r0, [r4, #52]	; 0x34
   407c6:	e7c1      	b.n	4074c <__sflush_r+0x1c>
   407c8:	6a21      	ldr	r1, [r4, #32]
   407ca:	2301      	movs	r3, #1
   407cc:	4628      	mov	r0, r5
   407ce:	47b0      	blx	r6
   407d0:	1c41      	adds	r1, r0, #1
   407d2:	d1c7      	bne.n	40764 <__sflush_r+0x34>
   407d4:	682b      	ldr	r3, [r5, #0]
   407d6:	2b00      	cmp	r3, #0
   407d8:	d0c4      	beq.n	40764 <__sflush_r+0x34>
   407da:	2b1d      	cmp	r3, #29
   407dc:	d001      	beq.n	407e2 <__sflush_r+0xb2>
   407de:	2b16      	cmp	r3, #22
   407e0:	d101      	bne.n	407e6 <__sflush_r+0xb6>
   407e2:	602f      	str	r7, [r5, #0]
   407e4:	e7b1      	b.n	4074a <__sflush_r+0x1a>
   407e6:	89a3      	ldrh	r3, [r4, #12]
   407e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   407ec:	81a3      	strh	r3, [r4, #12]
   407ee:	e7ad      	b.n	4074c <__sflush_r+0x1c>
   407f0:	690f      	ldr	r7, [r1, #16]
   407f2:	2f00      	cmp	r7, #0
   407f4:	d0a9      	beq.n	4074a <__sflush_r+0x1a>
   407f6:	0793      	lsls	r3, r2, #30
   407f8:	680e      	ldr	r6, [r1, #0]
   407fa:	600f      	str	r7, [r1, #0]
   407fc:	bf0c      	ite	eq
   407fe:	694b      	ldreq	r3, [r1, #20]
   40800:	2300      	movne	r3, #0
   40802:	eba6 0807 	sub.w	r8, r6, r7
   40806:	608b      	str	r3, [r1, #8]
   40808:	f1b8 0f00 	cmp.w	r8, #0
   4080c:	dd9d      	ble.n	4074a <__sflush_r+0x1a>
   4080e:	4643      	mov	r3, r8
   40810:	463a      	mov	r2, r7
   40812:	6a21      	ldr	r1, [r4, #32]
   40814:	4628      	mov	r0, r5
   40816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   40818:	47b0      	blx	r6
   4081a:	2800      	cmp	r0, #0
   4081c:	dc06      	bgt.n	4082c <__sflush_r+0xfc>
   4081e:	89a3      	ldrh	r3, [r4, #12]
   40820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   40824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   40828:	81a3      	strh	r3, [r4, #12]
   4082a:	e78f      	b.n	4074c <__sflush_r+0x1c>
   4082c:	4407      	add	r7, r0
   4082e:	eba8 0800 	sub.w	r8, r8, r0
   40832:	e7e9      	b.n	40808 <__sflush_r+0xd8>
   40834:	20400001 	.word	0x20400001

00040838 <_fflush_r>:
   40838:	b538      	push	{r3, r4, r5, lr}
   4083a:	690b      	ldr	r3, [r1, #16]
   4083c:	4605      	mov	r5, r0
   4083e:	460c      	mov	r4, r1
   40840:	b913      	cbnz	r3, 40848 <_fflush_r+0x10>
   40842:	2500      	movs	r5, #0
   40844:	4628      	mov	r0, r5
   40846:	bd38      	pop	{r3, r4, r5, pc}
   40848:	b118      	cbz	r0, 40852 <_fflush_r+0x1a>
   4084a:	6983      	ldr	r3, [r0, #24]
   4084c:	b90b      	cbnz	r3, 40852 <_fflush_r+0x1a>
   4084e:	f000 f871 	bl	40934 <__sinit>
   40852:	4b14      	ldr	r3, [pc, #80]	; (408a4 <_fflush_r+0x6c>)
   40854:	429c      	cmp	r4, r3
   40856:	d11b      	bne.n	40890 <_fflush_r+0x58>
   40858:	686c      	ldr	r4, [r5, #4]
   4085a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   4085e:	2b00      	cmp	r3, #0
   40860:	d0ef      	beq.n	40842 <_fflush_r+0xa>
   40862:	6e62      	ldr	r2, [r4, #100]	; 0x64
   40864:	07d0      	lsls	r0, r2, #31
   40866:	d404      	bmi.n	40872 <_fflush_r+0x3a>
   40868:	0599      	lsls	r1, r3, #22
   4086a:	d402      	bmi.n	40872 <_fflush_r+0x3a>
   4086c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   4086e:	f005 f963 	bl	45b38 <__retarget_lock_acquire_recursive>
   40872:	4628      	mov	r0, r5
   40874:	4621      	mov	r1, r4
   40876:	f7ff ff5b 	bl	40730 <__sflush_r>
   4087a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   4087c:	4605      	mov	r5, r0
   4087e:	07da      	lsls	r2, r3, #31
   40880:	d4e0      	bmi.n	40844 <_fflush_r+0xc>
   40882:	89a3      	ldrh	r3, [r4, #12]
   40884:	059b      	lsls	r3, r3, #22
   40886:	d4dd      	bmi.n	40844 <_fflush_r+0xc>
   40888:	6da0      	ldr	r0, [r4, #88]	; 0x58
   4088a:	f005 f956 	bl	45b3a <__retarget_lock_release_recursive>
   4088e:	e7d9      	b.n	40844 <_fflush_r+0xc>
   40890:	4b05      	ldr	r3, [pc, #20]	; (408a8 <_fflush_r+0x70>)
   40892:	429c      	cmp	r4, r3
   40894:	d101      	bne.n	4089a <_fflush_r+0x62>
   40896:	68ac      	ldr	r4, [r5, #8]
   40898:	e7df      	b.n	4085a <_fflush_r+0x22>
   4089a:	4b04      	ldr	r3, [pc, #16]	; (408ac <_fflush_r+0x74>)
   4089c:	429c      	cmp	r4, r3
   4089e:	bf08      	it	eq
   408a0:	68ec      	ldreq	r4, [r5, #12]
   408a2:	e7da      	b.n	4085a <_fflush_r+0x22>
   408a4:	000478bc 	.word	0x000478bc
   408a8:	000478dc 	.word	0x000478dc
   408ac:	0004789c 	.word	0x0004789c

000408b0 <std>:
   408b0:	2300      	movs	r3, #0
   408b2:	b510      	push	{r4, lr}
   408b4:	4604      	mov	r4, r0
   408b6:	6083      	str	r3, [r0, #8]
   408b8:	8181      	strh	r1, [r0, #12]
   408ba:	4619      	mov	r1, r3
   408bc:	6643      	str	r3, [r0, #100]	; 0x64
   408be:	81c2      	strh	r2, [r0, #14]
   408c0:	2208      	movs	r2, #8
   408c2:	6183      	str	r3, [r0, #24]
   408c4:	e9c0 3300 	strd	r3, r3, [r0]
   408c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   408cc:	305c      	adds	r0, #92	; 0x5c
   408ce:	f004 fccb 	bl	45268 <memset>
   408d2:	4b05      	ldr	r3, [pc, #20]	; (408e8 <std+0x38>)
   408d4:	6224      	str	r4, [r4, #32]
   408d6:	6263      	str	r3, [r4, #36]	; 0x24
   408d8:	4b04      	ldr	r3, [pc, #16]	; (408ec <std+0x3c>)
   408da:	62a3      	str	r3, [r4, #40]	; 0x28
   408dc:	4b04      	ldr	r3, [pc, #16]	; (408f0 <std+0x40>)
   408de:	62e3      	str	r3, [r4, #44]	; 0x2c
   408e0:	4b04      	ldr	r3, [pc, #16]	; (408f4 <std+0x44>)
   408e2:	6323      	str	r3, [r4, #48]	; 0x30
   408e4:	bd10      	pop	{r4, pc}
   408e6:	bf00      	nop
   408e8:	0004550f 	.word	0x0004550f
   408ec:	00045535 	.word	0x00045535
   408f0:	0004556d 	.word	0x0004556d
   408f4:	00045591 	.word	0x00045591

000408f8 <_cleanup_r>:
   408f8:	4901      	ldr	r1, [pc, #4]	; (40900 <_cleanup_r+0x8>)
   408fa:	f004 bff9 	b.w	458f0 <_fwalk_reent>
   408fe:	bf00      	nop
   40900:	00040839 	.word	0x00040839

00040904 <__sfp_lock_acquire>:
   40904:	4801      	ldr	r0, [pc, #4]	; (4090c <__sfp_lock_acquire+0x8>)
   40906:	f005 b917 	b.w	45b38 <__retarget_lock_acquire_recursive>
   4090a:	bf00      	nop
   4090c:	2002cc8c 	.word	0x2002cc8c

00040910 <__sfp_lock_release>:
   40910:	4801      	ldr	r0, [pc, #4]	; (40918 <__sfp_lock_release+0x8>)
   40912:	f005 b912 	b.w	45b3a <__retarget_lock_release_recursive>
   40916:	bf00      	nop
   40918:	2002cc8c 	.word	0x2002cc8c

0004091c <__sinit_lock_acquire>:
   4091c:	4801      	ldr	r0, [pc, #4]	; (40924 <__sinit_lock_acquire+0x8>)
   4091e:	f005 b90b 	b.w	45b38 <__retarget_lock_acquire_recursive>
   40922:	bf00      	nop
   40924:	2002cc87 	.word	0x2002cc87

00040928 <__sinit_lock_release>:
   40928:	4801      	ldr	r0, [pc, #4]	; (40930 <__sinit_lock_release+0x8>)
   4092a:	f005 b906 	b.w	45b3a <__retarget_lock_release_recursive>
   4092e:	bf00      	nop
   40930:	2002cc87 	.word	0x2002cc87

00040934 <__sinit>:
   40934:	b510      	push	{r4, lr}
   40936:	4604      	mov	r4, r0
   40938:	f7ff fff0 	bl	4091c <__sinit_lock_acquire>
   4093c:	69a3      	ldr	r3, [r4, #24]
   4093e:	b11b      	cbz	r3, 40948 <__sinit+0x14>
   40940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40944:	f7ff bff0 	b.w	40928 <__sinit_lock_release>
   40948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   4094c:	6523      	str	r3, [r4, #80]	; 0x50
   4094e:	4620      	mov	r0, r4
   40950:	4b12      	ldr	r3, [pc, #72]	; (4099c <__sinit+0x68>)
   40952:	4a13      	ldr	r2, [pc, #76]	; (409a0 <__sinit+0x6c>)
   40954:	681b      	ldr	r3, [r3, #0]
   40956:	62a2      	str	r2, [r4, #40]	; 0x28
   40958:	42a3      	cmp	r3, r4
   4095a:	bf04      	itt	eq
   4095c:	2301      	moveq	r3, #1
   4095e:	61a3      	streq	r3, [r4, #24]
   40960:	f000 f820 	bl	409a4 <__sfp>
   40964:	6060      	str	r0, [r4, #4]
   40966:	4620      	mov	r0, r4
   40968:	f000 f81c 	bl	409a4 <__sfp>
   4096c:	60a0      	str	r0, [r4, #8]
   4096e:	4620      	mov	r0, r4
   40970:	f000 f818 	bl	409a4 <__sfp>
   40974:	2200      	movs	r2, #0
   40976:	60e0      	str	r0, [r4, #12]
   40978:	2104      	movs	r1, #4
   4097a:	6860      	ldr	r0, [r4, #4]
   4097c:	f7ff ff98 	bl	408b0 <std>
   40980:	2201      	movs	r2, #1
   40982:	2109      	movs	r1, #9
   40984:	68a0      	ldr	r0, [r4, #8]
   40986:	f7ff ff93 	bl	408b0 <std>
   4098a:	2202      	movs	r2, #2
   4098c:	2112      	movs	r1, #18
   4098e:	68e0      	ldr	r0, [r4, #12]
   40990:	f7ff ff8e 	bl	408b0 <std>
   40994:	2301      	movs	r3, #1
   40996:	61a3      	str	r3, [r4, #24]
   40998:	e7d2      	b.n	40940 <__sinit+0xc>
   4099a:	bf00      	nop
   4099c:	00047870 	.word	0x00047870
   409a0:	000408f9 	.word	0x000408f9

000409a4 <__sfp>:
   409a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   409a6:	4607      	mov	r7, r0
   409a8:	f7ff ffac 	bl	40904 <__sfp_lock_acquire>
   409ac:	4b1e      	ldr	r3, [pc, #120]	; (40a28 <__sfp+0x84>)
   409ae:	681e      	ldr	r6, [r3, #0]
   409b0:	69b3      	ldr	r3, [r6, #24]
   409b2:	b913      	cbnz	r3, 409ba <__sfp+0x16>
   409b4:	4630      	mov	r0, r6
   409b6:	f7ff ffbd 	bl	40934 <__sinit>
   409ba:	3648      	adds	r6, #72	; 0x48
   409bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   409c0:	3b01      	subs	r3, #1
   409c2:	d503      	bpl.n	409cc <__sfp+0x28>
   409c4:	6833      	ldr	r3, [r6, #0]
   409c6:	b30b      	cbz	r3, 40a0c <__sfp+0x68>
   409c8:	6836      	ldr	r6, [r6, #0]
   409ca:	e7f7      	b.n	409bc <__sfp+0x18>
   409cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   409d0:	b9d5      	cbnz	r5, 40a08 <__sfp+0x64>
   409d2:	4b16      	ldr	r3, [pc, #88]	; (40a2c <__sfp+0x88>)
   409d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   409d8:	6665      	str	r5, [r4, #100]	; 0x64
   409da:	60e3      	str	r3, [r4, #12]
   409dc:	f005 f8ab 	bl	45b36 <__retarget_lock_init_recursive>
   409e0:	f7ff ff96 	bl	40910 <__sfp_lock_release>
   409e4:	6025      	str	r5, [r4, #0]
   409e6:	61a5      	str	r5, [r4, #24]
   409e8:	2208      	movs	r2, #8
   409ea:	4629      	mov	r1, r5
   409ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   409f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   409f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   409f8:	f004 fc36 	bl	45268 <memset>
   409fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   40a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   40a04:	4620      	mov	r0, r4
   40a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   40a08:	3468      	adds	r4, #104	; 0x68
   40a0a:	e7d9      	b.n	409c0 <__sfp+0x1c>
   40a0c:	2104      	movs	r1, #4
   40a0e:	4638      	mov	r0, r7
   40a10:	f004 ff58 	bl	458c4 <__sfmoreglue>
   40a14:	4604      	mov	r4, r0
   40a16:	6030      	str	r0, [r6, #0]
   40a18:	2800      	cmp	r0, #0
   40a1a:	d1d5      	bne.n	409c8 <__sfp+0x24>
   40a1c:	f7ff ff78 	bl	40910 <__sfp_lock_release>
   40a20:	230c      	movs	r3, #12
   40a22:	603b      	str	r3, [r7, #0]
   40a24:	e7ee      	b.n	40a04 <__sfp+0x60>
   40a26:	bf00      	nop
   40a28:	00047870 	.word	0x00047870
   40a2c:	ffff0001 	.word	0xffff0001

00040a30 <__gethex>:
   40a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40a34:	b08b      	sub	sp, #44	; 0x2c
   40a36:	468b      	mov	fp, r1
   40a38:	4690      	mov	r8, r2
   40a3a:	9306      	str	r3, [sp, #24]
   40a3c:	4bb5      	ldr	r3, [pc, #724]	; (40d14 <__gethex+0x2e4>)
   40a3e:	9002      	str	r0, [sp, #8]
   40a40:	681b      	ldr	r3, [r3, #0]
   40a42:	4618      	mov	r0, r3
   40a44:	9303      	str	r3, [sp, #12]
   40a46:	f7dc fc0d 	bl	1d264 <strlen>
   40a4a:	9b03      	ldr	r3, [sp, #12]
   40a4c:	f8db 2000 	ldr.w	r2, [fp]
   40a50:	4403      	add	r3, r0
   40a52:	9001      	str	r0, [sp, #4]
   40a54:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   40a58:	9307      	str	r3, [sp, #28]
   40a5a:	1c93      	adds	r3, r2, #2
   40a5c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   40a60:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   40a64:	32fe      	adds	r2, #254	; 0xfe
   40a66:	eb02 0a03 	add.w	sl, r2, r3
   40a6a:	461f      	mov	r7, r3
   40a6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   40a70:	2830      	cmp	r0, #48	; 0x30
   40a72:	d0f8      	beq.n	40a66 <__gethex+0x36>
   40a74:	f004 ff94 	bl	459a0 <__hexdig_fun>
   40a78:	4604      	mov	r4, r0
   40a7a:	2800      	cmp	r0, #0
   40a7c:	d167      	bne.n	40b4e <__gethex+0x11e>
   40a7e:	9a01      	ldr	r2, [sp, #4]
   40a80:	4638      	mov	r0, r7
   40a82:	9903      	ldr	r1, [sp, #12]
   40a84:	f004 fdc9 	bl	4561a <strncmp>
   40a88:	4605      	mov	r5, r0
   40a8a:	2800      	cmp	r0, #0
   40a8c:	d162      	bne.n	40b54 <__gethex+0x124>
   40a8e:	9b01      	ldr	r3, [sp, #4]
   40a90:	5cf8      	ldrb	r0, [r7, r3]
   40a92:	18fe      	adds	r6, r7, r3
   40a94:	f004 ff84 	bl	459a0 <__hexdig_fun>
   40a98:	2800      	cmp	r0, #0
   40a9a:	d05d      	beq.n	40b58 <__gethex+0x128>
   40a9c:	4633      	mov	r3, r6
   40a9e:	7818      	ldrb	r0, [r3, #0]
   40aa0:	461f      	mov	r7, r3
   40aa2:	3301      	adds	r3, #1
   40aa4:	2830      	cmp	r0, #48	; 0x30
   40aa6:	d0fa      	beq.n	40a9e <__gethex+0x6e>
   40aa8:	f004 ff7a 	bl	459a0 <__hexdig_fun>
   40aac:	fab0 f480 	clz	r4, r0
   40ab0:	4635      	mov	r5, r6
   40ab2:	f04f 0a01 	mov.w	sl, #1
   40ab6:	0964      	lsrs	r4, r4, #5
   40ab8:	463a      	mov	r2, r7
   40aba:	4616      	mov	r6, r2
   40abc:	3201      	adds	r2, #1
   40abe:	7830      	ldrb	r0, [r6, #0]
   40ac0:	f004 ff6e 	bl	459a0 <__hexdig_fun>
   40ac4:	2800      	cmp	r0, #0
   40ac6:	d1f8      	bne.n	40aba <__gethex+0x8a>
   40ac8:	9a01      	ldr	r2, [sp, #4]
   40aca:	4630      	mov	r0, r6
   40acc:	9903      	ldr	r1, [sp, #12]
   40ace:	f004 fda4 	bl	4561a <strncmp>
   40ad2:	b950      	cbnz	r0, 40aea <__gethex+0xba>
   40ad4:	b955      	cbnz	r5, 40aec <__gethex+0xbc>
   40ad6:	9b01      	ldr	r3, [sp, #4]
   40ad8:	18f5      	adds	r5, r6, r3
   40ada:	462a      	mov	r2, r5
   40adc:	4616      	mov	r6, r2
   40ade:	3201      	adds	r2, #1
   40ae0:	7830      	ldrb	r0, [r6, #0]
   40ae2:	f004 ff5d 	bl	459a0 <__hexdig_fun>
   40ae6:	2800      	cmp	r0, #0
   40ae8:	d1f8      	bne.n	40adc <__gethex+0xac>
   40aea:	b10d      	cbz	r5, 40af0 <__gethex+0xc0>
   40aec:	1bad      	subs	r5, r5, r6
   40aee:	00ad      	lsls	r5, r5, #2
   40af0:	7833      	ldrb	r3, [r6, #0]
   40af2:	2b50      	cmp	r3, #80	; 0x50
   40af4:	d001      	beq.n	40afa <__gethex+0xca>
   40af6:	2b70      	cmp	r3, #112	; 0x70
   40af8:	d13c      	bne.n	40b74 <__gethex+0x144>
   40afa:	7873      	ldrb	r3, [r6, #1]
   40afc:	2b2b      	cmp	r3, #43	; 0x2b
   40afe:	d02d      	beq.n	40b5c <__gethex+0x12c>
   40b00:	2b2d      	cmp	r3, #45	; 0x2d
   40b02:	d02f      	beq.n	40b64 <__gethex+0x134>
   40b04:	1c71      	adds	r1, r6, #1
   40b06:	f04f 0900 	mov.w	r9, #0
   40b0a:	7808      	ldrb	r0, [r1, #0]
   40b0c:	f004 ff48 	bl	459a0 <__hexdig_fun>
   40b10:	1e43      	subs	r3, r0, #1
   40b12:	b2db      	uxtb	r3, r3
   40b14:	2b18      	cmp	r3, #24
   40b16:	d82d      	bhi.n	40b74 <__gethex+0x144>
   40b18:	f1a0 0210 	sub.w	r2, r0, #16
   40b1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   40b20:	f004 ff3e 	bl	459a0 <__hexdig_fun>
   40b24:	1e43      	subs	r3, r0, #1
   40b26:	b2db      	uxtb	r3, r3
   40b28:	2b18      	cmp	r3, #24
   40b2a:	d91e      	bls.n	40b6a <__gethex+0x13a>
   40b2c:	f1b9 0f00 	cmp.w	r9, #0
   40b30:	d000      	beq.n	40b34 <__gethex+0x104>
   40b32:	4252      	negs	r2, r2
   40b34:	4415      	add	r5, r2
   40b36:	f8cb 1000 	str.w	r1, [fp]
   40b3a:	b1ec      	cbz	r4, 40b78 <__gethex+0x148>
   40b3c:	f1ba 0f00 	cmp.w	sl, #0
   40b40:	bf14      	ite	ne
   40b42:	2700      	movne	r7, #0
   40b44:	2706      	moveq	r7, #6
   40b46:	4638      	mov	r0, r7
   40b48:	b00b      	add	sp, #44	; 0x2c
   40b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40b4e:	2400      	movs	r4, #0
   40b50:	4625      	mov	r5, r4
   40b52:	e7b1      	b.n	40ab8 <__gethex+0x88>
   40b54:	463e      	mov	r6, r7
   40b56:	4625      	mov	r5, r4
   40b58:	2401      	movs	r4, #1
   40b5a:	e7c9      	b.n	40af0 <__gethex+0xc0>
   40b5c:	f04f 0900 	mov.w	r9, #0
   40b60:	1cb1      	adds	r1, r6, #2
   40b62:	e7d2      	b.n	40b0a <__gethex+0xda>
   40b64:	f04f 0901 	mov.w	r9, #1
   40b68:	e7fa      	b.n	40b60 <__gethex+0x130>
   40b6a:	230a      	movs	r3, #10
   40b6c:	fb03 0202 	mla	r2, r3, r2, r0
   40b70:	3a10      	subs	r2, #16
   40b72:	e7d3      	b.n	40b1c <__gethex+0xec>
   40b74:	4631      	mov	r1, r6
   40b76:	e7de      	b.n	40b36 <__gethex+0x106>
   40b78:	1bf3      	subs	r3, r6, r7
   40b7a:	4621      	mov	r1, r4
   40b7c:	3b01      	subs	r3, #1
   40b7e:	2b07      	cmp	r3, #7
   40b80:	dc4f      	bgt.n	40c22 <__gethex+0x1f2>
   40b82:	9802      	ldr	r0, [sp, #8]
   40b84:	f04f 0b00 	mov.w	fp, #0
   40b88:	f005 f828 	bl	45bdc <_Balloc>
   40b8c:	9b01      	ldr	r3, [sp, #4]
   40b8e:	f100 0914 	add.w	r9, r0, #20
   40b92:	4604      	mov	r4, r0
   40b94:	f1c3 0301 	rsb	r3, r3, #1
   40b98:	46da      	mov	sl, fp
   40b9a:	f8cd 9010 	str.w	r9, [sp, #16]
   40b9e:	9308      	str	r3, [sp, #32]
   40ba0:	42b7      	cmp	r7, r6
   40ba2:	d341      	bcc.n	40c28 <__gethex+0x1f8>
   40ba4:	9804      	ldr	r0, [sp, #16]
   40ba6:	f840 ab04 	str.w	sl, [r0], #4
   40baa:	eba0 0009 	sub.w	r0, r0, r9
   40bae:	1080      	asrs	r0, r0, #2
   40bb0:	0147      	lsls	r7, r0, #5
   40bb2:	6120      	str	r0, [r4, #16]
   40bb4:	4650      	mov	r0, sl
   40bb6:	f005 f8d7 	bl	45d68 <__hi0bits>
   40bba:	f8d8 6000 	ldr.w	r6, [r8]
   40bbe:	1a3f      	subs	r7, r7, r0
   40bc0:	42b7      	cmp	r7, r6
   40bc2:	dd63      	ble.n	40c8c <__gethex+0x25c>
   40bc4:	1bbf      	subs	r7, r7, r6
   40bc6:	4620      	mov	r0, r4
   40bc8:	4639      	mov	r1, r7
   40bca:	f005 fb1d 	bl	46208 <__any_on>
   40bce:	4682      	mov	sl, r0
   40bd0:	b1a8      	cbz	r0, 40bfe <__gethex+0x1ce>
   40bd2:	1e7b      	subs	r3, r7, #1
   40bd4:	f04f 0a01 	mov.w	sl, #1
   40bd8:	1159      	asrs	r1, r3, #5
   40bda:	f003 021f 	and.w	r2, r3, #31
   40bde:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   40be2:	fa0a f202 	lsl.w	r2, sl, r2
   40be6:	420a      	tst	r2, r1
   40be8:	d009      	beq.n	40bfe <__gethex+0x1ce>
   40bea:	4553      	cmp	r3, sl
   40bec:	dd05      	ble.n	40bfa <__gethex+0x1ca>
   40bee:	1eb9      	subs	r1, r7, #2
   40bf0:	4620      	mov	r0, r4
   40bf2:	f005 fb09 	bl	46208 <__any_on>
   40bf6:	2800      	cmp	r0, #0
   40bf8:	d145      	bne.n	40c86 <__gethex+0x256>
   40bfa:	f04f 0a02 	mov.w	sl, #2
   40bfe:	443d      	add	r5, r7
   40c00:	4639      	mov	r1, r7
   40c02:	4620      	mov	r0, r4
   40c04:	f004 fe92 	bl	4592c <rshift>
   40c08:	f8d8 3008 	ldr.w	r3, [r8, #8]
   40c0c:	42ab      	cmp	r3, r5
   40c0e:	da4b      	bge.n	40ca8 <__gethex+0x278>
   40c10:	4621      	mov	r1, r4
   40c12:	9802      	ldr	r0, [sp, #8]
   40c14:	f005 f816 	bl	45c44 <_Bfree>
   40c18:	2300      	movs	r3, #0
   40c1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   40c1c:	27a3      	movs	r7, #163	; 0xa3
   40c1e:	6013      	str	r3, [r2, #0]
   40c20:	e791      	b.n	40b46 <__gethex+0x116>
   40c22:	3101      	adds	r1, #1
   40c24:	105b      	asrs	r3, r3, #1
   40c26:	e7aa      	b.n	40b7e <__gethex+0x14e>
   40c28:	1e73      	subs	r3, r6, #1
   40c2a:	9a07      	ldr	r2, [sp, #28]
   40c2c:	9305      	str	r3, [sp, #20]
   40c2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   40c32:	4293      	cmp	r3, r2
   40c34:	d017      	beq.n	40c66 <__gethex+0x236>
   40c36:	f1bb 0f20 	cmp.w	fp, #32
   40c3a:	d106      	bne.n	40c4a <__gethex+0x21a>
   40c3c:	9b04      	ldr	r3, [sp, #16]
   40c3e:	f843 ab04 	str.w	sl, [r3], #4
   40c42:	f04f 0a00 	mov.w	sl, #0
   40c46:	9304      	str	r3, [sp, #16]
   40c48:	46d3      	mov	fp, sl
   40c4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   40c4e:	f004 fea7 	bl	459a0 <__hexdig_fun>
   40c52:	f000 000f 	and.w	r0, r0, #15
   40c56:	9b05      	ldr	r3, [sp, #20]
   40c58:	fa00 f00b 	lsl.w	r0, r0, fp
   40c5c:	f10b 0b04 	add.w	fp, fp, #4
   40c60:	ea4a 0a00 	orr.w	sl, sl, r0
   40c64:	e00d      	b.n	40c82 <__gethex+0x252>
   40c66:	9b05      	ldr	r3, [sp, #20]
   40c68:	9a08      	ldr	r2, [sp, #32]
   40c6a:	4413      	add	r3, r2
   40c6c:	42bb      	cmp	r3, r7
   40c6e:	d3e2      	bcc.n	40c36 <__gethex+0x206>
   40c70:	4618      	mov	r0, r3
   40c72:	9a01      	ldr	r2, [sp, #4]
   40c74:	9903      	ldr	r1, [sp, #12]
   40c76:	9309      	str	r3, [sp, #36]	; 0x24
   40c78:	f004 fccf 	bl	4561a <strncmp>
   40c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   40c7e:	2800      	cmp	r0, #0
   40c80:	d1d9      	bne.n	40c36 <__gethex+0x206>
   40c82:	461e      	mov	r6, r3
   40c84:	e78c      	b.n	40ba0 <__gethex+0x170>
   40c86:	f04f 0a03 	mov.w	sl, #3
   40c8a:	e7b8      	b.n	40bfe <__gethex+0x1ce>
   40c8c:	da09      	bge.n	40ca2 <__gethex+0x272>
   40c8e:	1bf7      	subs	r7, r6, r7
   40c90:	4621      	mov	r1, r4
   40c92:	9802      	ldr	r0, [sp, #8]
   40c94:	463a      	mov	r2, r7
   40c96:	1bed      	subs	r5, r5, r7
   40c98:	f005 f94e 	bl	45f38 <__lshift>
   40c9c:	4604      	mov	r4, r0
   40c9e:	f100 0914 	add.w	r9, r0, #20
   40ca2:	f04f 0a00 	mov.w	sl, #0
   40ca6:	e7af      	b.n	40c08 <__gethex+0x1d8>
   40ca8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   40cac:	42ab      	cmp	r3, r5
   40cae:	dd6d      	ble.n	40d8c <__gethex+0x35c>
   40cb0:	1b5d      	subs	r5, r3, r5
   40cb2:	42ae      	cmp	r6, r5
   40cb4:	dc30      	bgt.n	40d18 <__gethex+0x2e8>
   40cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   40cba:	2b02      	cmp	r3, #2
   40cbc:	d022      	beq.n	40d04 <__gethex+0x2d4>
   40cbe:	2b03      	cmp	r3, #3
   40cc0:	d024      	beq.n	40d0c <__gethex+0x2dc>
   40cc2:	2b01      	cmp	r3, #1
   40cc4:	d115      	bne.n	40cf2 <__gethex+0x2c2>
   40cc6:	42ae      	cmp	r6, r5
   40cc8:	d113      	bne.n	40cf2 <__gethex+0x2c2>
   40cca:	2e01      	cmp	r6, #1
   40ccc:	d10b      	bne.n	40ce6 <__gethex+0x2b6>
   40cce:	f8d8 3004 	ldr.w	r3, [r8, #4]
   40cd2:	2762      	movs	r7, #98	; 0x62
   40cd4:	9a06      	ldr	r2, [sp, #24]
   40cd6:	6013      	str	r3, [r2, #0]
   40cd8:	2301      	movs	r3, #1
   40cda:	6123      	str	r3, [r4, #16]
   40cdc:	f8c9 3000 	str.w	r3, [r9]
   40ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   40ce2:	601c      	str	r4, [r3, #0]
   40ce4:	e72f      	b.n	40b46 <__gethex+0x116>
   40ce6:	1e71      	subs	r1, r6, #1
   40ce8:	4620      	mov	r0, r4
   40cea:	f005 fa8d 	bl	46208 <__any_on>
   40cee:	2800      	cmp	r0, #0
   40cf0:	d1ed      	bne.n	40cce <__gethex+0x29e>
   40cf2:	4621      	mov	r1, r4
   40cf4:	9802      	ldr	r0, [sp, #8]
   40cf6:	f004 ffa5 	bl	45c44 <_Bfree>
   40cfa:	2300      	movs	r3, #0
   40cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   40cfe:	2750      	movs	r7, #80	; 0x50
   40d00:	6013      	str	r3, [r2, #0]
   40d02:	e720      	b.n	40b46 <__gethex+0x116>
   40d04:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40d06:	2b00      	cmp	r3, #0
   40d08:	d1f3      	bne.n	40cf2 <__gethex+0x2c2>
   40d0a:	e7e0      	b.n	40cce <__gethex+0x29e>
   40d0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40d0e:	2b00      	cmp	r3, #0
   40d10:	d1dd      	bne.n	40cce <__gethex+0x29e>
   40d12:	e7ee      	b.n	40cf2 <__gethex+0x2c2>
   40d14:	000478fc 	.word	0x000478fc
   40d18:	1e6f      	subs	r7, r5, #1
   40d1a:	f1ba 0f00 	cmp.w	sl, #0
   40d1e:	d132      	bne.n	40d86 <__gethex+0x356>
   40d20:	b127      	cbz	r7, 40d2c <__gethex+0x2fc>
   40d22:	4639      	mov	r1, r7
   40d24:	4620      	mov	r0, r4
   40d26:	f005 fa6f 	bl	46208 <__any_on>
   40d2a:	4682      	mov	sl, r0
   40d2c:	117a      	asrs	r2, r7, #5
   40d2e:	2301      	movs	r3, #1
   40d30:	f007 071f 	and.w	r7, r7, #31
   40d34:	4629      	mov	r1, r5
   40d36:	4620      	mov	r0, r4
   40d38:	1b76      	subs	r6, r6, r5
   40d3a:	fa03 f707 	lsl.w	r7, r3, r7
   40d3e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   40d42:	421f      	tst	r7, r3
   40d44:	f04f 0702 	mov.w	r7, #2
   40d48:	bf18      	it	ne
   40d4a:	f04a 0a02 	orrne.w	sl, sl, #2
   40d4e:	f004 fded 	bl	4592c <rshift>
   40d52:	f8d8 5004 	ldr.w	r5, [r8, #4]
   40d56:	f1ba 0f00 	cmp.w	sl, #0
   40d5a:	d048      	beq.n	40dee <__gethex+0x3be>
   40d5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   40d60:	2b02      	cmp	r3, #2
   40d62:	d015      	beq.n	40d90 <__gethex+0x360>
   40d64:	2b03      	cmp	r3, #3
   40d66:	d017      	beq.n	40d98 <__gethex+0x368>
   40d68:	2b01      	cmp	r3, #1
   40d6a:	d109      	bne.n	40d80 <__gethex+0x350>
   40d6c:	f01a 0f02 	tst.w	sl, #2
   40d70:	d006      	beq.n	40d80 <__gethex+0x350>
   40d72:	f8d9 3000 	ldr.w	r3, [r9]
   40d76:	ea4a 0a03 	orr.w	sl, sl, r3
   40d7a:	f01a 0f01 	tst.w	sl, #1
   40d7e:	d10e      	bne.n	40d9e <__gethex+0x36e>
   40d80:	f047 0710 	orr.w	r7, r7, #16
   40d84:	e033      	b.n	40dee <__gethex+0x3be>
   40d86:	f04f 0a01 	mov.w	sl, #1
   40d8a:	e7cf      	b.n	40d2c <__gethex+0x2fc>
   40d8c:	2701      	movs	r7, #1
   40d8e:	e7e2      	b.n	40d56 <__gethex+0x326>
   40d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40d92:	f1c3 0301 	rsb	r3, r3, #1
   40d96:	9315      	str	r3, [sp, #84]	; 0x54
   40d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   40d9a:	2b00      	cmp	r3, #0
   40d9c:	d0f0      	beq.n	40d80 <__gethex+0x350>
   40d9e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   40da2:	f104 0314 	add.w	r3, r4, #20
   40da6:	f04f 0c00 	mov.w	ip, #0
   40daa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   40dae:	eb03 010a 	add.w	r1, r3, sl
   40db2:	4618      	mov	r0, r3
   40db4:	f853 2b04 	ldr.w	r2, [r3], #4
   40db8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   40dbc:	d01c      	beq.n	40df8 <__gethex+0x3c8>
   40dbe:	3201      	adds	r2, #1
   40dc0:	6002      	str	r2, [r0, #0]
   40dc2:	2f02      	cmp	r7, #2
   40dc4:	f104 0314 	add.w	r3, r4, #20
   40dc8:	d138      	bne.n	40e3c <__gethex+0x40c>
   40dca:	f8d8 2000 	ldr.w	r2, [r8]
   40dce:	3a01      	subs	r2, #1
   40dd0:	42b2      	cmp	r2, r6
   40dd2:	d10a      	bne.n	40dea <__gethex+0x3ba>
   40dd4:	1171      	asrs	r1, r6, #5
   40dd6:	2201      	movs	r2, #1
   40dd8:	f006 061f 	and.w	r6, r6, #31
   40ddc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   40de0:	fa02 f606 	lsl.w	r6, r2, r6
   40de4:	421e      	tst	r6, r3
   40de6:	bf18      	it	ne
   40de8:	4617      	movne	r7, r2
   40dea:	f047 0720 	orr.w	r7, r7, #32
   40dee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   40df0:	601c      	str	r4, [r3, #0]
   40df2:	9b06      	ldr	r3, [sp, #24]
   40df4:	601d      	str	r5, [r3, #0]
   40df6:	e6a6      	b.n	40b46 <__gethex+0x116>
   40df8:	4299      	cmp	r1, r3
   40dfa:	f843 cc04 	str.w	ip, [r3, #-4]
   40dfe:	d8d8      	bhi.n	40db2 <__gethex+0x382>
   40e00:	68a3      	ldr	r3, [r4, #8]
   40e02:	4599      	cmp	r9, r3
   40e04:	db12      	blt.n	40e2c <__gethex+0x3fc>
   40e06:	6861      	ldr	r1, [r4, #4]
   40e08:	9802      	ldr	r0, [sp, #8]
   40e0a:	3101      	adds	r1, #1
   40e0c:	f004 fee6 	bl	45bdc <_Balloc>
   40e10:	6922      	ldr	r2, [r4, #16]
   40e12:	4683      	mov	fp, r0
   40e14:	f104 010c 	add.w	r1, r4, #12
   40e18:	3202      	adds	r2, #2
   40e1a:	300c      	adds	r0, #12
   40e1c:	0092      	lsls	r2, r2, #2
   40e1e:	f004 fa03 	bl	45228 <memcpy>
   40e22:	4621      	mov	r1, r4
   40e24:	465c      	mov	r4, fp
   40e26:	9802      	ldr	r0, [sp, #8]
   40e28:	f004 ff0c 	bl	45c44 <_Bfree>
   40e2c:	6923      	ldr	r3, [r4, #16]
   40e2e:	1c5a      	adds	r2, r3, #1
   40e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   40e34:	6122      	str	r2, [r4, #16]
   40e36:	2201      	movs	r2, #1
   40e38:	615a      	str	r2, [r3, #20]
   40e3a:	e7c2      	b.n	40dc2 <__gethex+0x392>
   40e3c:	6922      	ldr	r2, [r4, #16]
   40e3e:	454a      	cmp	r2, r9
   40e40:	dd0b      	ble.n	40e5a <__gethex+0x42a>
   40e42:	2101      	movs	r1, #1
   40e44:	4620      	mov	r0, r4
   40e46:	f004 fd71 	bl	4592c <rshift>
   40e4a:	3501      	adds	r5, #1
   40e4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   40e50:	42ab      	cmp	r3, r5
   40e52:	f6ff aedd 	blt.w	40c10 <__gethex+0x1e0>
   40e56:	2701      	movs	r7, #1
   40e58:	e7c7      	b.n	40dea <__gethex+0x3ba>
   40e5a:	f016 061f 	ands.w	r6, r6, #31
   40e5e:	d0fa      	beq.n	40e56 <__gethex+0x426>
   40e60:	449a      	add	sl, r3
   40e62:	f1c6 0620 	rsb	r6, r6, #32
   40e66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   40e6a:	f004 ff7d 	bl	45d68 <__hi0bits>
   40e6e:	42b0      	cmp	r0, r6
   40e70:	dbe7      	blt.n	40e42 <__gethex+0x412>
   40e72:	e7f0      	b.n	40e56 <__gethex+0x426>

00040e74 <_localeconv_r>:
   40e74:	4800      	ldr	r0, [pc, #0]	; (40e78 <_localeconv_r+0x4>)
   40e76:	4770      	bx	lr
   40e78:	200208d8 	.word	0x200208d8

00040e7c <_lseek_r>:
   40e7c:	b538      	push	{r3, r4, r5, lr}
   40e7e:	4605      	mov	r5, r0
   40e80:	4c06      	ldr	r4, [pc, #24]	; (40e9c <_lseek_r+0x20>)
   40e82:	4608      	mov	r0, r1
   40e84:	4611      	mov	r1, r2
   40e86:	2200      	movs	r2, #0
   40e88:	6022      	str	r2, [r4, #0]
   40e8a:	461a      	mov	r2, r3
   40e8c:	f001 ff38 	bl	42d00 <_lseek>
   40e90:	1c43      	adds	r3, r0, #1
   40e92:	d102      	bne.n	40e9a <_lseek_r+0x1e>
   40e94:	6823      	ldr	r3, [r4, #0]
   40e96:	b103      	cbz	r3, 40e9a <_lseek_r+0x1e>
   40e98:	602b      	str	r3, [r5, #0]
   40e9a:	bd38      	pop	{r3, r4, r5, pc}
   40e9c:	2002cc80 	.word	0x2002cc80

00040ea0 <__smakebuf_r>:
   40ea0:	898b      	ldrh	r3, [r1, #12]
   40ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   40ea4:	079d      	lsls	r5, r3, #30
   40ea6:	4606      	mov	r6, r0
   40ea8:	460c      	mov	r4, r1
   40eaa:	d507      	bpl.n	40ebc <__smakebuf_r+0x1c>
   40eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
   40eb0:	6023      	str	r3, [r4, #0]
   40eb2:	6123      	str	r3, [r4, #16]
   40eb4:	2301      	movs	r3, #1
   40eb6:	6163      	str	r3, [r4, #20]
   40eb8:	b002      	add	sp, #8
   40eba:	bd70      	pop	{r4, r5, r6, pc}
   40ebc:	ab01      	add	r3, sp, #4
   40ebe:	466a      	mov	r2, sp
   40ec0:	f004 fe3c 	bl	45b3c <__swhatbuf_r>
   40ec4:	9900      	ldr	r1, [sp, #0]
   40ec6:	4605      	mov	r5, r0
   40ec8:	4630      	mov	r0, r6
   40eca:	f7fe fc87 	bl	3f7dc <_malloc_r>
   40ece:	b948      	cbnz	r0, 40ee4 <__smakebuf_r+0x44>
   40ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   40ed4:	059a      	lsls	r2, r3, #22
   40ed6:	d4ef      	bmi.n	40eb8 <__smakebuf_r+0x18>
   40ed8:	f023 0303 	bic.w	r3, r3, #3
   40edc:	f043 0302 	orr.w	r3, r3, #2
   40ee0:	81a3      	strh	r3, [r4, #12]
   40ee2:	e7e3      	b.n	40eac <__smakebuf_r+0xc>
   40ee4:	4b0d      	ldr	r3, [pc, #52]	; (40f1c <__smakebuf_r+0x7c>)
   40ee6:	62b3      	str	r3, [r6, #40]	; 0x28
   40ee8:	89a3      	ldrh	r3, [r4, #12]
   40eea:	6020      	str	r0, [r4, #0]
   40eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   40ef0:	6120      	str	r0, [r4, #16]
   40ef2:	81a3      	strh	r3, [r4, #12]
   40ef4:	9b00      	ldr	r3, [sp, #0]
   40ef6:	6163      	str	r3, [r4, #20]
   40ef8:	9b01      	ldr	r3, [sp, #4]
   40efa:	b15b      	cbz	r3, 40f14 <__smakebuf_r+0x74>
   40efc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   40f00:	4630      	mov	r0, r6
   40f02:	f000 fca5 	bl	41850 <_isatty_r>
   40f06:	b128      	cbz	r0, 40f14 <__smakebuf_r+0x74>
   40f08:	89a3      	ldrh	r3, [r4, #12]
   40f0a:	f023 0303 	bic.w	r3, r3, #3
   40f0e:	f043 0301 	orr.w	r3, r3, #1
   40f12:	81a3      	strh	r3, [r4, #12]
   40f14:	89a3      	ldrh	r3, [r4, #12]
   40f16:	431d      	orrs	r5, r3
   40f18:	81a5      	strh	r5, [r4, #12]
   40f1a:	e7cd      	b.n	40eb8 <__smakebuf_r+0x18>
   40f1c:	000408f9 	.word	0x000408f9

00040f20 <__malloc_lock>:
   40f20:	4801      	ldr	r0, [pc, #4]	; (40f28 <__malloc_lock+0x8>)
   40f22:	f004 be09 	b.w	45b38 <__retarget_lock_acquire_recursive>
   40f26:	bf00      	nop
   40f28:	2002cc88 	.word	0x2002cc88

00040f2c <__malloc_unlock>:
   40f2c:	4801      	ldr	r0, [pc, #4]	; (40f34 <__malloc_unlock+0x8>)
   40f2e:	f004 be04 	b.w	45b3a <__retarget_lock_release_recursive>
   40f32:	bf00      	nop
   40f34:	2002cc88 	.word	0x2002cc88

00040f38 <__pow5mult>:
   40f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40f3c:	4615      	mov	r5, r2
   40f3e:	f012 0203 	ands.w	r2, r2, #3
   40f42:	4606      	mov	r6, r0
   40f44:	460f      	mov	r7, r1
   40f46:	d007      	beq.n	40f58 <__pow5mult+0x20>
   40f48:	3a01      	subs	r2, #1
   40f4a:	4c21      	ldr	r4, [pc, #132]	; (40fd0 <__pow5mult+0x98>)
   40f4c:	2300      	movs	r3, #0
   40f4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   40f52:	f004 fe8e 	bl	45c72 <__multadd>
   40f56:	4607      	mov	r7, r0
   40f58:	10ad      	asrs	r5, r5, #2
   40f5a:	d035      	beq.n	40fc8 <__pow5mult+0x90>
   40f5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   40f5e:	b93c      	cbnz	r4, 40f70 <__pow5mult+0x38>
   40f60:	2010      	movs	r0, #16
   40f62:	f7fe fbdd 	bl	3f720 <malloc>
   40f66:	6270      	str	r0, [r6, #36]	; 0x24
   40f68:	6004      	str	r4, [r0, #0]
   40f6a:	60c4      	str	r4, [r0, #12]
   40f6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   40f70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   40f74:	f8d8 4008 	ldr.w	r4, [r8, #8]
   40f78:	b94c      	cbnz	r4, 40f8e <__pow5mult+0x56>
   40f7a:	f240 2171 	movw	r1, #625	; 0x271
   40f7e:	4630      	mov	r0, r6
   40f80:	f004 ff42 	bl	45e08 <__i2b>
   40f84:	2300      	movs	r3, #0
   40f86:	4604      	mov	r4, r0
   40f88:	f8c8 0008 	str.w	r0, [r8, #8]
   40f8c:	6003      	str	r3, [r0, #0]
   40f8e:	f04f 0800 	mov.w	r8, #0
   40f92:	07eb      	lsls	r3, r5, #31
   40f94:	d50a      	bpl.n	40fac <__pow5mult+0x74>
   40f96:	4639      	mov	r1, r7
   40f98:	4622      	mov	r2, r4
   40f9a:	4630      	mov	r0, r6
   40f9c:	f004 ff3d 	bl	45e1a <__multiply>
   40fa0:	4681      	mov	r9, r0
   40fa2:	4639      	mov	r1, r7
   40fa4:	4630      	mov	r0, r6
   40fa6:	464f      	mov	r7, r9
   40fa8:	f004 fe4c 	bl	45c44 <_Bfree>
   40fac:	106d      	asrs	r5, r5, #1
   40fae:	d00b      	beq.n	40fc8 <__pow5mult+0x90>
   40fb0:	6820      	ldr	r0, [r4, #0]
   40fb2:	b938      	cbnz	r0, 40fc4 <__pow5mult+0x8c>
   40fb4:	4622      	mov	r2, r4
   40fb6:	4621      	mov	r1, r4
   40fb8:	4630      	mov	r0, r6
   40fba:	f004 ff2e 	bl	45e1a <__multiply>
   40fbe:	6020      	str	r0, [r4, #0]
   40fc0:	f8c0 8000 	str.w	r8, [r0]
   40fc4:	4604      	mov	r4, r0
   40fc6:	e7e4      	b.n	40f92 <__pow5mult+0x5a>
   40fc8:	4638      	mov	r0, r7
   40fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   40fce:	bf00      	nop
   40fd0:	00047908 	.word	0x00047908

00040fd4 <__ulp>:
   40fd4:	4b10      	ldr	r3, [pc, #64]	; (41018 <__ulp+0x44>)
   40fd6:	ee10 2a90 	vmov	r2, s1
   40fda:	401a      	ands	r2, r3
   40fdc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   40fe0:	2b00      	cmp	r3, #0
   40fe2:	dd04      	ble.n	40fee <__ulp+0x1a>
   40fe4:	2000      	movs	r0, #0
   40fe6:	4619      	mov	r1, r3
   40fe8:	ec41 0b10 	vmov	d0, r0, r1
   40fec:	4770      	bx	lr
   40fee:	425b      	negs	r3, r3
   40ff0:	2000      	movs	r0, #0
   40ff2:	2100      	movs	r1, #0
   40ff4:	151b      	asrs	r3, r3, #20
   40ff6:	2b13      	cmp	r3, #19
   40ff8:	dc04      	bgt.n	41004 <__ulp+0x30>
   40ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   40ffe:	fa42 f103 	asr.w	r1, r2, r3
   41002:	e7f1      	b.n	40fe8 <__ulp+0x14>
   41004:	3b14      	subs	r3, #20
   41006:	2b1e      	cmp	r3, #30
   41008:	bfd6      	itet	le
   4100a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   4100e:	2301      	movgt	r3, #1
   41010:	fa22 f303 	lsrle.w	r3, r2, r3
   41014:	4618      	mov	r0, r3
   41016:	e7e7      	b.n	40fe8 <__ulp+0x14>
   41018:	7ff00000 	.word	0x7ff00000

0004101c <__b2d>:
   4101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4101e:	6905      	ldr	r5, [r0, #16]
   41020:	f100 0714 	add.w	r7, r0, #20
   41024:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   41028:	f855 4c04 	ldr.w	r4, [r5, #-4]
   4102c:	1f2e      	subs	r6, r5, #4
   4102e:	4620      	mov	r0, r4
   41030:	f004 fe9a 	bl	45d68 <__hi0bits>
   41034:	f1c0 0320 	rsb	r3, r0, #32
   41038:	280a      	cmp	r0, #10
   4103a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 410b8 <__b2d+0x9c>
   4103e:	600b      	str	r3, [r1, #0]
   41040:	dc15      	bgt.n	4106e <__b2d+0x52>
   41042:	f1c0 0e0b 	rsb	lr, r0, #11
   41046:	42b7      	cmp	r7, r6
   41048:	f100 0015 	add.w	r0, r0, #21
   4104c:	fa24 f10e 	lsr.w	r1, r4, lr
   41050:	fa04 f000 	lsl.w	r0, r4, r0
   41054:	ea41 030c 	orr.w	r3, r1, ip
   41058:	bf34      	ite	cc
   4105a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   4105e:	2100      	movcs	r1, #0
   41060:	fa21 f10e 	lsr.w	r1, r1, lr
   41064:	ea40 0201 	orr.w	r2, r0, r1
   41068:	ec43 2b10 	vmov	d0, r2, r3
   4106c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4106e:	42b7      	cmp	r7, r6
   41070:	bf3a      	itte	cc
   41072:	f1a5 0608 	subcc.w	r6, r5, #8
   41076:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   4107a:	2100      	movcs	r1, #0
   4107c:	380b      	subs	r0, #11
   4107e:	d017      	beq.n	410b0 <__b2d+0x94>
   41080:	f1c0 0c20 	rsb	ip, r0, #32
   41084:	fa04 f500 	lsl.w	r5, r4, r0
   41088:	42be      	cmp	r6, r7
   4108a:	fa01 f000 	lsl.w	r0, r1, r0
   4108e:	fa21 f40c 	lsr.w	r4, r1, ip
   41092:	ea45 0504 	orr.w	r5, r5, r4
   41096:	bf8c      	ite	hi
   41098:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   4109c:	2400      	movls	r4, #0
   4109e:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   410a2:	fa24 f40c 	lsr.w	r4, r4, ip
   410a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   410aa:	ea40 0204 	orr.w	r2, r0, r4
   410ae:	e7db      	b.n	41068 <__b2d+0x4c>
   410b0:	ea44 030c 	orr.w	r3, r4, ip
   410b4:	460a      	mov	r2, r1
   410b6:	e7d7      	b.n	41068 <__b2d+0x4c>
   410b8:	3ff00000 	.word	0x3ff00000

000410bc <_svfiprintf_r>:
   410bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   410c0:	461e      	mov	r6, r3
   410c2:	898b      	ldrh	r3, [r1, #12]
   410c4:	b09d      	sub	sp, #116	; 0x74
   410c6:	4607      	mov	r7, r0
   410c8:	061b      	lsls	r3, r3, #24
   410ca:	460d      	mov	r5, r1
   410cc:	4614      	mov	r4, r2
   410ce:	d50e      	bpl.n	410ee <_svfiprintf_r+0x32>
   410d0:	690b      	ldr	r3, [r1, #16]
   410d2:	b963      	cbnz	r3, 410ee <_svfiprintf_r+0x32>
   410d4:	2140      	movs	r1, #64	; 0x40
   410d6:	f7fe fb81 	bl	3f7dc <_malloc_r>
   410da:	6028      	str	r0, [r5, #0]
   410dc:	6128      	str	r0, [r5, #16]
   410de:	b920      	cbnz	r0, 410ea <_svfiprintf_r+0x2e>
   410e0:	230c      	movs	r3, #12
   410e2:	603b      	str	r3, [r7, #0]
   410e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   410e8:	e0c9      	b.n	4127e <_svfiprintf_r+0x1c2>
   410ea:	2340      	movs	r3, #64	; 0x40
   410ec:	616b      	str	r3, [r5, #20]
   410ee:	2300      	movs	r3, #0
   410f0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 41298 <_svfiprintf_r+0x1dc>
   410f4:	f04f 0a01 	mov.w	sl, #1
   410f8:	9603      	str	r6, [sp, #12]
   410fa:	9309      	str	r3, [sp, #36]	; 0x24
   410fc:	2320      	movs	r3, #32
   410fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   41102:	2330      	movs	r3, #48	; 0x30
   41104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   41108:	4623      	mov	r3, r4
   4110a:	461e      	mov	r6, r3
   4110c:	f813 2b01 	ldrb.w	r2, [r3], #1
   41110:	b10a      	cbz	r2, 41116 <_svfiprintf_r+0x5a>
   41112:	2a25      	cmp	r2, #37	; 0x25
   41114:	d1f9      	bne.n	4110a <_svfiprintf_r+0x4e>
   41116:	ebb6 0b04 	subs.w	fp, r6, r4
   4111a:	d00b      	beq.n	41134 <_svfiprintf_r+0x78>
   4111c:	465b      	mov	r3, fp
   4111e:	4622      	mov	r2, r4
   41120:	4629      	mov	r1, r5
   41122:	4638      	mov	r0, r7
   41124:	f005 f8c5 	bl	462b2 <__ssputs_r>
   41128:	3001      	adds	r0, #1
   4112a:	f000 80a3 	beq.w	41274 <_svfiprintf_r+0x1b8>
   4112e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41130:	445b      	add	r3, fp
   41132:	9309      	str	r3, [sp, #36]	; 0x24
   41134:	7833      	ldrb	r3, [r6, #0]
   41136:	2b00      	cmp	r3, #0
   41138:	f000 809c 	beq.w	41274 <_svfiprintf_r+0x1b8>
   4113c:	2300      	movs	r3, #0
   4113e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   41142:	3601      	adds	r6, #1
   41144:	9304      	str	r3, [sp, #16]
   41146:	9307      	str	r3, [sp, #28]
   41148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   4114c:	931a      	str	r3, [sp, #104]	; 0x68
   4114e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   41152:	4634      	mov	r4, r6
   41154:	2205      	movs	r2, #5
   41156:	4850      	ldr	r0, [pc, #320]	; (41298 <_svfiprintf_r+0x1dc>)
   41158:	f814 1b01 	ldrb.w	r1, [r4], #1
   4115c:	f004 f848 	bl	451f0 <memchr>
   41160:	9b04      	ldr	r3, [sp, #16]
   41162:	b9c0      	cbnz	r0, 41196 <_svfiprintf_r+0xda>
   41164:	06d9      	lsls	r1, r3, #27
   41166:	bf44      	itt	mi
   41168:	2220      	movmi	r2, #32
   4116a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   4116e:	071a      	lsls	r2, r3, #28
   41170:	bf44      	itt	mi
   41172:	222b      	movmi	r2, #43	; 0x2b
   41174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   41178:	7832      	ldrb	r2, [r6, #0]
   4117a:	2a2a      	cmp	r2, #42	; 0x2a
   4117c:	d013      	beq.n	411a6 <_svfiprintf_r+0xea>
   4117e:	4634      	mov	r4, r6
   41180:	9a07      	ldr	r2, [sp, #28]
   41182:	2000      	movs	r0, #0
   41184:	260a      	movs	r6, #10
   41186:	4621      	mov	r1, r4
   41188:	f811 3b01 	ldrb.w	r3, [r1], #1
   4118c:	3b30      	subs	r3, #48	; 0x30
   4118e:	2b09      	cmp	r3, #9
   41190:	d94b      	bls.n	4122a <_svfiprintf_r+0x16e>
   41192:	b970      	cbnz	r0, 411b2 <_svfiprintf_r+0xf6>
   41194:	e014      	b.n	411c0 <_svfiprintf_r+0x104>
   41196:	eba0 0009 	sub.w	r0, r0, r9
   4119a:	4626      	mov	r6, r4
   4119c:	fa0a f000 	lsl.w	r0, sl, r0
   411a0:	4318      	orrs	r0, r3
   411a2:	9004      	str	r0, [sp, #16]
   411a4:	e7d5      	b.n	41152 <_svfiprintf_r+0x96>
   411a6:	9a03      	ldr	r2, [sp, #12]
   411a8:	1d11      	adds	r1, r2, #4
   411aa:	6812      	ldr	r2, [r2, #0]
   411ac:	2a00      	cmp	r2, #0
   411ae:	9103      	str	r1, [sp, #12]
   411b0:	db01      	blt.n	411b6 <_svfiprintf_r+0xfa>
   411b2:	9207      	str	r2, [sp, #28]
   411b4:	e004      	b.n	411c0 <_svfiprintf_r+0x104>
   411b6:	4252      	negs	r2, r2
   411b8:	f043 0302 	orr.w	r3, r3, #2
   411bc:	9207      	str	r2, [sp, #28]
   411be:	9304      	str	r3, [sp, #16]
   411c0:	7823      	ldrb	r3, [r4, #0]
   411c2:	2b2e      	cmp	r3, #46	; 0x2e
   411c4:	d10c      	bne.n	411e0 <_svfiprintf_r+0x124>
   411c6:	7863      	ldrb	r3, [r4, #1]
   411c8:	2b2a      	cmp	r3, #42	; 0x2a
   411ca:	d133      	bne.n	41234 <_svfiprintf_r+0x178>
   411cc:	9b03      	ldr	r3, [sp, #12]
   411ce:	3402      	adds	r4, #2
   411d0:	1d1a      	adds	r2, r3, #4
   411d2:	681b      	ldr	r3, [r3, #0]
   411d4:	2b00      	cmp	r3, #0
   411d6:	9203      	str	r2, [sp, #12]
   411d8:	bfb8      	it	lt
   411da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   411de:	9305      	str	r3, [sp, #20]
   411e0:	4e2e      	ldr	r6, [pc, #184]	; (4129c <_svfiprintf_r+0x1e0>)
   411e2:	2203      	movs	r2, #3
   411e4:	7821      	ldrb	r1, [r4, #0]
   411e6:	4630      	mov	r0, r6
   411e8:	f004 f802 	bl	451f0 <memchr>
   411ec:	b138      	cbz	r0, 411fe <_svfiprintf_r+0x142>
   411ee:	2340      	movs	r3, #64	; 0x40
   411f0:	1b80      	subs	r0, r0, r6
   411f2:	3401      	adds	r4, #1
   411f4:	fa03 f000 	lsl.w	r0, r3, r0
   411f8:	9b04      	ldr	r3, [sp, #16]
   411fa:	4303      	orrs	r3, r0
   411fc:	9304      	str	r3, [sp, #16]
   411fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   41202:	2206      	movs	r2, #6
   41204:	4826      	ldr	r0, [pc, #152]	; (412a0 <_svfiprintf_r+0x1e4>)
   41206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   4120a:	f003 fff1 	bl	451f0 <memchr>
   4120e:	2800      	cmp	r0, #0
   41210:	d038      	beq.n	41284 <_svfiprintf_r+0x1c8>
   41212:	4b24      	ldr	r3, [pc, #144]	; (412a4 <_svfiprintf_r+0x1e8>)
   41214:	bb13      	cbnz	r3, 4125c <_svfiprintf_r+0x1a0>
   41216:	9b03      	ldr	r3, [sp, #12]
   41218:	3307      	adds	r3, #7
   4121a:	f023 0307 	bic.w	r3, r3, #7
   4121e:	3308      	adds	r3, #8
   41220:	9303      	str	r3, [sp, #12]
   41222:	9b09      	ldr	r3, [sp, #36]	; 0x24
   41224:	4443      	add	r3, r8
   41226:	9309      	str	r3, [sp, #36]	; 0x24
   41228:	e76e      	b.n	41108 <_svfiprintf_r+0x4c>
   4122a:	fb06 3202 	mla	r2, r6, r2, r3
   4122e:	2001      	movs	r0, #1
   41230:	460c      	mov	r4, r1
   41232:	e7a8      	b.n	41186 <_svfiprintf_r+0xca>
   41234:	2300      	movs	r3, #0
   41236:	3401      	adds	r4, #1
   41238:	260a      	movs	r6, #10
   4123a:	4619      	mov	r1, r3
   4123c:	9305      	str	r3, [sp, #20]
   4123e:	4620      	mov	r0, r4
   41240:	f810 2b01 	ldrb.w	r2, [r0], #1
   41244:	3a30      	subs	r2, #48	; 0x30
   41246:	2a09      	cmp	r2, #9
   41248:	d903      	bls.n	41252 <_svfiprintf_r+0x196>
   4124a:	2b00      	cmp	r3, #0
   4124c:	d0c8      	beq.n	411e0 <_svfiprintf_r+0x124>
   4124e:	9105      	str	r1, [sp, #20]
   41250:	e7c6      	b.n	411e0 <_svfiprintf_r+0x124>
   41252:	fb06 2101 	mla	r1, r6, r1, r2
   41256:	2301      	movs	r3, #1
   41258:	4604      	mov	r4, r0
   4125a:	e7f0      	b.n	4123e <_svfiprintf_r+0x182>
   4125c:	ab03      	add	r3, sp, #12
   4125e:	462a      	mov	r2, r5
   41260:	a904      	add	r1, sp, #16
   41262:	4638      	mov	r0, r7
   41264:	9300      	str	r3, [sp, #0]
   41266:	4b10      	ldr	r3, [pc, #64]	; (412a8 <_svfiprintf_r+0x1ec>)
   41268:	f7fe fc3a 	bl	3fae0 <_printf_float>
   4126c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   41270:	4680      	mov	r8, r0
   41272:	d1d6      	bne.n	41222 <_svfiprintf_r+0x166>
   41274:	89ab      	ldrh	r3, [r5, #12]
   41276:	065b      	lsls	r3, r3, #25
   41278:	f53f af34 	bmi.w	410e4 <_svfiprintf_r+0x28>
   4127c:	9809      	ldr	r0, [sp, #36]	; 0x24
   4127e:	b01d      	add	sp, #116	; 0x74
   41280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41284:	ab03      	add	r3, sp, #12
   41286:	462a      	mov	r2, r5
   41288:	a904      	add	r1, sp, #16
   4128a:	4638      	mov	r0, r7
   4128c:	9300      	str	r3, [sp, #0]
   4128e:	4b06      	ldr	r3, [pc, #24]	; (412a8 <_svfiprintf_r+0x1ec>)
   41290:	f7fe fe50 	bl	3ff34 <_printf_i>
   41294:	e7ea      	b.n	4126c <_svfiprintf_r+0x1b0>
   41296:	bf00      	nop
   41298:	0004f30f 	.word	0x0004f30f
   4129c:	0004f315 	.word	0x0004f315
   412a0:	0004f319 	.word	0x0004f319
   412a4:	0003fae1 	.word	0x0003fae1
   412a8:	000462b3 	.word	0x000462b3

000412ac <__ssvfiscanf_r>:
   412ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   412b0:	460c      	mov	r4, r1
   412b2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   412b6:	2100      	movs	r1, #0
   412b8:	4606      	mov	r6, r0
   412ba:	f10d 0804 	add.w	r8, sp, #4
   412be:	4f9b      	ldr	r7, [pc, #620]	; (4152c <__ssvfiscanf_r+0x280>)
   412c0:	f8df 9274 	ldr.w	r9, [pc, #628]	; 41538 <__ssvfiscanf_r+0x28c>
   412c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   412c8:	9300      	str	r3, [sp, #0]
   412ca:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   412ce:	4998      	ldr	r1, [pc, #608]	; (41530 <__ssvfiscanf_r+0x284>)
   412d0:	91a0      	str	r1, [sp, #640]	; 0x280
   412d2:	4998      	ldr	r1, [pc, #608]	; (41534 <__ssvfiscanf_r+0x288>)
   412d4:	91a1      	str	r1, [sp, #644]	; 0x284
   412d6:	f892 a000 	ldrb.w	sl, [r2]
   412da:	f1ba 0f00 	cmp.w	sl, #0
   412de:	f000 8122 	beq.w	41526 <__ssvfiscanf_r+0x27a>
   412e2:	f81a 3007 	ldrb.w	r3, [sl, r7]
   412e6:	1c55      	adds	r5, r2, #1
   412e8:	f013 0308 	ands.w	r3, r3, #8
   412ec:	d019      	beq.n	41322 <__ssvfiscanf_r+0x76>
   412ee:	6863      	ldr	r3, [r4, #4]
   412f0:	2b00      	cmp	r3, #0
   412f2:	dd0f      	ble.n	41314 <__ssvfiscanf_r+0x68>
   412f4:	6823      	ldr	r3, [r4, #0]
   412f6:	781a      	ldrb	r2, [r3, #0]
   412f8:	5cba      	ldrb	r2, [r7, r2]
   412fa:	0712      	lsls	r2, r2, #28
   412fc:	d401      	bmi.n	41302 <__ssvfiscanf_r+0x56>
   412fe:	462a      	mov	r2, r5
   41300:	e7e9      	b.n	412d6 <__ssvfiscanf_r+0x2a>
   41302:	9a45      	ldr	r2, [sp, #276]	; 0x114
   41304:	3301      	adds	r3, #1
   41306:	3201      	adds	r2, #1
   41308:	6023      	str	r3, [r4, #0]
   4130a:	9245      	str	r2, [sp, #276]	; 0x114
   4130c:	6862      	ldr	r2, [r4, #4]
   4130e:	3a01      	subs	r2, #1
   41310:	6062      	str	r2, [r4, #4]
   41312:	e7ec      	b.n	412ee <__ssvfiscanf_r+0x42>
   41314:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   41316:	4621      	mov	r1, r4
   41318:	4630      	mov	r0, r6
   4131a:	4798      	blx	r3
   4131c:	2800      	cmp	r0, #0
   4131e:	d0e9      	beq.n	412f4 <__ssvfiscanf_r+0x48>
   41320:	e7ed      	b.n	412fe <__ssvfiscanf_r+0x52>
   41322:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   41326:	d17f      	bne.n	41428 <__ssvfiscanf_r+0x17c>
   41328:	9341      	str	r3, [sp, #260]	; 0x104
   4132a:	9343      	str	r3, [sp, #268]	; 0x10c
   4132c:	7853      	ldrb	r3, [r2, #1]
   4132e:	2b2a      	cmp	r3, #42	; 0x2a
   41330:	bf04      	itt	eq
   41332:	2310      	moveq	r3, #16
   41334:	1c95      	addeq	r5, r2, #2
   41336:	f04f 020a 	mov.w	r2, #10
   4133a:	bf08      	it	eq
   4133c:	9341      	streq	r3, [sp, #260]	; 0x104
   4133e:	46ab      	mov	fp, r5
   41340:	f81b 1b01 	ldrb.w	r1, [fp], #1
   41344:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   41348:	2b09      	cmp	r3, #9
   4134a:	d921      	bls.n	41390 <__ssvfiscanf_r+0xe4>
   4134c:	2203      	movs	r2, #3
   4134e:	487a      	ldr	r0, [pc, #488]	; (41538 <__ssvfiscanf_r+0x28c>)
   41350:	f003 ff4e 	bl	451f0 <memchr>
   41354:	b138      	cbz	r0, 41366 <__ssvfiscanf_r+0xba>
   41356:	eba0 0309 	sub.w	r3, r0, r9
   4135a:	2001      	movs	r0, #1
   4135c:	465d      	mov	r5, fp
   4135e:	4098      	lsls	r0, r3
   41360:	9b41      	ldr	r3, [sp, #260]	; 0x104
   41362:	4318      	orrs	r0, r3
   41364:	9041      	str	r0, [sp, #260]	; 0x104
   41366:	f815 3b01 	ldrb.w	r3, [r5], #1
   4136a:	2b67      	cmp	r3, #103	; 0x67
   4136c:	d848      	bhi.n	41400 <__ssvfiscanf_r+0x154>
   4136e:	2b65      	cmp	r3, #101	; 0x65
   41370:	f080 809f 	bcs.w	414b2 <__ssvfiscanf_r+0x206>
   41374:	2b47      	cmp	r3, #71	; 0x47
   41376:	d812      	bhi.n	4139e <__ssvfiscanf_r+0xf2>
   41378:	2b45      	cmp	r3, #69	; 0x45
   4137a:	f080 809a 	bcs.w	414b2 <__ssvfiscanf_r+0x206>
   4137e:	2b00      	cmp	r3, #0
   41380:	d06b      	beq.n	4145a <__ssvfiscanf_r+0x1ae>
   41382:	2b25      	cmp	r3, #37	; 0x25
   41384:	d050      	beq.n	41428 <__ssvfiscanf_r+0x17c>
   41386:	2303      	movs	r3, #3
   41388:	9347      	str	r3, [sp, #284]	; 0x11c
   4138a:	230a      	movs	r3, #10
   4138c:	9342      	str	r3, [sp, #264]	; 0x108
   4138e:	e016      	b.n	413be <__ssvfiscanf_r+0x112>
   41390:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   41392:	465d      	mov	r5, fp
   41394:	fb02 1303 	mla	r3, r2, r3, r1
   41398:	3b30      	subs	r3, #48	; 0x30
   4139a:	9343      	str	r3, [sp, #268]	; 0x10c
   4139c:	e7cf      	b.n	4133e <__ssvfiscanf_r+0x92>
   4139e:	2b5b      	cmp	r3, #91	; 0x5b
   413a0:	d067      	beq.n	41472 <__ssvfiscanf_r+0x1c6>
   413a2:	d827      	bhi.n	413f4 <__ssvfiscanf_r+0x148>
   413a4:	2b58      	cmp	r3, #88	; 0x58
   413a6:	d1ee      	bne.n	41386 <__ssvfiscanf_r+0xda>
   413a8:	9a41      	ldr	r2, [sp, #260]	; 0x104
   413aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   413ae:	9241      	str	r2, [sp, #260]	; 0x104
   413b0:	2210      	movs	r2, #16
   413b2:	2b6f      	cmp	r3, #111	; 0x6f
   413b4:	9242      	str	r2, [sp, #264]	; 0x108
   413b6:	bf34      	ite	cc
   413b8:	2303      	movcc	r3, #3
   413ba:	2304      	movcs	r3, #4
   413bc:	9347      	str	r3, [sp, #284]	; 0x11c
   413be:	6863      	ldr	r3, [r4, #4]
   413c0:	2b00      	cmp	r3, #0
   413c2:	dd78      	ble.n	414b6 <__ssvfiscanf_r+0x20a>
   413c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   413c6:	0659      	lsls	r1, r3, #25
   413c8:	d404      	bmi.n	413d4 <__ssvfiscanf_r+0x128>
   413ca:	6823      	ldr	r3, [r4, #0]
   413cc:	781a      	ldrb	r2, [r3, #0]
   413ce:	5cba      	ldrb	r2, [r7, r2]
   413d0:	0712      	lsls	r2, r2, #28
   413d2:	d477      	bmi.n	414c4 <__ssvfiscanf_r+0x218>
   413d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   413d6:	2b02      	cmp	r3, #2
   413d8:	f300 8087 	bgt.w	414ea <__ssvfiscanf_r+0x23e>
   413dc:	466b      	mov	r3, sp
   413de:	4622      	mov	r2, r4
   413e0:	a941      	add	r1, sp, #260	; 0x104
   413e2:	4630      	mov	r0, r6
   413e4:	f000 f8ac 	bl	41540 <_scanf_chars>
   413e8:	2801      	cmp	r0, #1
   413ea:	f000 809c 	beq.w	41526 <__ssvfiscanf_r+0x27a>
   413ee:	2802      	cmp	r0, #2
   413f0:	d185      	bne.n	412fe <__ssvfiscanf_r+0x52>
   413f2:	e02f      	b.n	41454 <__ssvfiscanf_r+0x1a8>
   413f4:	2b63      	cmp	r3, #99	; 0x63
   413f6:	d047      	beq.n	41488 <__ssvfiscanf_r+0x1dc>
   413f8:	2b64      	cmp	r3, #100	; 0x64
   413fa:	d1c4      	bne.n	41386 <__ssvfiscanf_r+0xda>
   413fc:	220a      	movs	r2, #10
   413fe:	e7d8      	b.n	413b2 <__ssvfiscanf_r+0x106>
   41400:	2b70      	cmp	r3, #112	; 0x70
   41402:	d02d      	beq.n	41460 <__ssvfiscanf_r+0x1b4>
   41404:	d808      	bhi.n	41418 <__ssvfiscanf_r+0x16c>
   41406:	2b6e      	cmp	r3, #110	; 0x6e
   41408:	d044      	beq.n	41494 <__ssvfiscanf_r+0x1e8>
   4140a:	d82e      	bhi.n	4146a <__ssvfiscanf_r+0x1be>
   4140c:	2b69      	cmp	r3, #105	; 0x69
   4140e:	d1ba      	bne.n	41386 <__ssvfiscanf_r+0xda>
   41410:	2300      	movs	r3, #0
   41412:	9342      	str	r3, [sp, #264]	; 0x108
   41414:	2303      	movs	r3, #3
   41416:	e7d1      	b.n	413bc <__ssvfiscanf_r+0x110>
   41418:	2b75      	cmp	r3, #117	; 0x75
   4141a:	d0ef      	beq.n	413fc <__ssvfiscanf_r+0x150>
   4141c:	2b78      	cmp	r3, #120	; 0x78
   4141e:	d0c3      	beq.n	413a8 <__ssvfiscanf_r+0xfc>
   41420:	2b73      	cmp	r3, #115	; 0x73
   41422:	d1b0      	bne.n	41386 <__ssvfiscanf_r+0xda>
   41424:	2302      	movs	r3, #2
   41426:	e7c9      	b.n	413bc <__ssvfiscanf_r+0x110>
   41428:	6863      	ldr	r3, [r4, #4]
   4142a:	2b00      	cmp	r3, #0
   4142c:	dd0c      	ble.n	41448 <__ssvfiscanf_r+0x19c>
   4142e:	6823      	ldr	r3, [r4, #0]
   41430:	781a      	ldrb	r2, [r3, #0]
   41432:	4552      	cmp	r2, sl
   41434:	d177      	bne.n	41526 <__ssvfiscanf_r+0x27a>
   41436:	3301      	adds	r3, #1
   41438:	6862      	ldr	r2, [r4, #4]
   4143a:	6023      	str	r3, [r4, #0]
   4143c:	3a01      	subs	r2, #1
   4143e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   41440:	6062      	str	r2, [r4, #4]
   41442:	3301      	adds	r3, #1
   41444:	9345      	str	r3, [sp, #276]	; 0x114
   41446:	e75a      	b.n	412fe <__ssvfiscanf_r+0x52>
   41448:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   4144a:	4621      	mov	r1, r4
   4144c:	4630      	mov	r0, r6
   4144e:	4798      	blx	r3
   41450:	2800      	cmp	r0, #0
   41452:	d0ec      	beq.n	4142e <__ssvfiscanf_r+0x182>
   41454:	9844      	ldr	r0, [sp, #272]	; 0x110
   41456:	2800      	cmp	r0, #0
   41458:	d15b      	bne.n	41512 <__ssvfiscanf_r+0x266>
   4145a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4145e:	e05e      	b.n	4151e <__ssvfiscanf_r+0x272>
   41460:	9a41      	ldr	r2, [sp, #260]	; 0x104
   41462:	f042 0220 	orr.w	r2, r2, #32
   41466:	9241      	str	r2, [sp, #260]	; 0x104
   41468:	e79e      	b.n	413a8 <__ssvfiscanf_r+0xfc>
   4146a:	2308      	movs	r3, #8
   4146c:	9342      	str	r3, [sp, #264]	; 0x108
   4146e:	2304      	movs	r3, #4
   41470:	e7a4      	b.n	413bc <__ssvfiscanf_r+0x110>
   41472:	4629      	mov	r1, r5
   41474:	4640      	mov	r0, r8
   41476:	f004 ffd1 	bl	4641c <__sccl>
   4147a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   4147c:	4605      	mov	r5, r0
   4147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   41482:	9341      	str	r3, [sp, #260]	; 0x104
   41484:	2301      	movs	r3, #1
   41486:	e799      	b.n	413bc <__ssvfiscanf_r+0x110>
   41488:	9b41      	ldr	r3, [sp, #260]	; 0x104
   4148a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4148e:	9341      	str	r3, [sp, #260]	; 0x104
   41490:	2300      	movs	r3, #0
   41492:	e793      	b.n	413bc <__ssvfiscanf_r+0x110>
   41494:	9841      	ldr	r0, [sp, #260]	; 0x104
   41496:	06c3      	lsls	r3, r0, #27
   41498:	f53f af31 	bmi.w	412fe <__ssvfiscanf_r+0x52>
   4149c:	9b00      	ldr	r3, [sp, #0]
   4149e:	07c0      	lsls	r0, r0, #31
   414a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   414a2:	f103 0104 	add.w	r1, r3, #4
   414a6:	9100      	str	r1, [sp, #0]
   414a8:	681b      	ldr	r3, [r3, #0]
   414aa:	bf4c      	ite	mi
   414ac:	801a      	strhmi	r2, [r3, #0]
   414ae:	601a      	strpl	r2, [r3, #0]
   414b0:	e725      	b.n	412fe <__ssvfiscanf_r+0x52>
   414b2:	2305      	movs	r3, #5
   414b4:	e782      	b.n	413bc <__ssvfiscanf_r+0x110>
   414b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   414b8:	4621      	mov	r1, r4
   414ba:	4630      	mov	r0, r6
   414bc:	4798      	blx	r3
   414be:	2800      	cmp	r0, #0
   414c0:	d080      	beq.n	413c4 <__ssvfiscanf_r+0x118>
   414c2:	e7c7      	b.n	41454 <__ssvfiscanf_r+0x1a8>
   414c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   414c6:	3201      	adds	r2, #1
   414c8:	9245      	str	r2, [sp, #276]	; 0x114
   414ca:	6862      	ldr	r2, [r4, #4]
   414cc:	3a01      	subs	r2, #1
   414ce:	2a00      	cmp	r2, #0
   414d0:	6062      	str	r2, [r4, #4]
   414d2:	dd02      	ble.n	414da <__ssvfiscanf_r+0x22e>
   414d4:	3301      	adds	r3, #1
   414d6:	6023      	str	r3, [r4, #0]
   414d8:	e777      	b.n	413ca <__ssvfiscanf_r+0x11e>
   414da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   414dc:	4621      	mov	r1, r4
   414de:	4630      	mov	r0, r6
   414e0:	4798      	blx	r3
   414e2:	2800      	cmp	r0, #0
   414e4:	f43f af71 	beq.w	413ca <__ssvfiscanf_r+0x11e>
   414e8:	e7b4      	b.n	41454 <__ssvfiscanf_r+0x1a8>
   414ea:	2b04      	cmp	r3, #4
   414ec:	dc06      	bgt.n	414fc <__ssvfiscanf_r+0x250>
   414ee:	466b      	mov	r3, sp
   414f0:	4622      	mov	r2, r4
   414f2:	a941      	add	r1, sp, #260	; 0x104
   414f4:	4630      	mov	r0, r6
   414f6:	f000 f87b 	bl	415f0 <_scanf_i>
   414fa:	e775      	b.n	413e8 <__ssvfiscanf_r+0x13c>
   414fc:	4b0f      	ldr	r3, [pc, #60]	; (4153c <__ssvfiscanf_r+0x290>)
   414fe:	2b00      	cmp	r3, #0
   41500:	f43f aefd 	beq.w	412fe <__ssvfiscanf_r+0x52>
   41504:	466b      	mov	r3, sp
   41506:	4622      	mov	r2, r4
   41508:	a941      	add	r1, sp, #260	; 0x104
   4150a:	4630      	mov	r0, r6
   4150c:	e000      	b.n	41510 <__ssvfiscanf_r+0x264>
   4150e:	bf00      	nop
   41510:	e76a      	b.n	413e8 <__ssvfiscanf_r+0x13c>
   41512:	89a3      	ldrh	r3, [r4, #12]
   41514:	f013 0f40 	tst.w	r3, #64	; 0x40
   41518:	bf18      	it	ne
   4151a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   4151e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   41522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41526:	9844      	ldr	r0, [sp, #272]	; 0x110
   41528:	e7f9      	b.n	4151e <__ssvfiscanf_r+0x272>
   4152a:	bf00      	nop
   4152c:	0004f20f 	.word	0x0004f20f
   41530:	00046369 	.word	0x00046369
   41534:	000463e3 	.word	0x000463e3
   41538:	0004f315 	.word	0x0004f315
   4153c:	00000000 	.word	0x00000000

00041540 <_scanf_chars>:
   41540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   41544:	4615      	mov	r5, r2
   41546:	688a      	ldr	r2, [r1, #8]
   41548:	4680      	mov	r8, r0
   4154a:	460c      	mov	r4, r1
   4154c:	b932      	cbnz	r2, 4155c <_scanf_chars+0x1c>
   4154e:	698a      	ldr	r2, [r1, #24]
   41550:	2a00      	cmp	r2, #0
   41552:	bf0c      	ite	eq
   41554:	2201      	moveq	r2, #1
   41556:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   4155a:	608a      	str	r2, [r1, #8]
   4155c:	6822      	ldr	r2, [r4, #0]
   4155e:	2700      	movs	r7, #0
   41560:	f8df 9088 	ldr.w	r9, [pc, #136]	; 415ec <_scanf_chars+0xac>
   41564:	06d1      	lsls	r1, r2, #27
   41566:	bf5f      	itttt	pl
   41568:	681a      	ldrpl	r2, [r3, #0]
   4156a:	1d11      	addpl	r1, r2, #4
   4156c:	6019      	strpl	r1, [r3, #0]
   4156e:	6816      	ldrpl	r6, [r2, #0]
   41570:	69a0      	ldr	r0, [r4, #24]
   41572:	b188      	cbz	r0, 41598 <_scanf_chars+0x58>
   41574:	2801      	cmp	r0, #1
   41576:	d107      	bne.n	41588 <_scanf_chars+0x48>
   41578:	682b      	ldr	r3, [r5, #0]
   4157a:	781a      	ldrb	r2, [r3, #0]
   4157c:	6963      	ldr	r3, [r4, #20]
   4157e:	5c9b      	ldrb	r3, [r3, r2]
   41580:	b953      	cbnz	r3, 41598 <_scanf_chars+0x58>
   41582:	bb27      	cbnz	r7, 415ce <_scanf_chars+0x8e>
   41584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   41588:	2802      	cmp	r0, #2
   4158a:	d120      	bne.n	415ce <_scanf_chars+0x8e>
   4158c:	682b      	ldr	r3, [r5, #0]
   4158e:	781b      	ldrb	r3, [r3, #0]
   41590:	f813 3009 	ldrb.w	r3, [r3, r9]
   41594:	071b      	lsls	r3, r3, #28
   41596:	d41a      	bmi.n	415ce <_scanf_chars+0x8e>
   41598:	6823      	ldr	r3, [r4, #0]
   4159a:	3701      	adds	r7, #1
   4159c:	06da      	lsls	r2, r3, #27
   4159e:	bf5e      	ittt	pl
   415a0:	682b      	ldrpl	r3, [r5, #0]
   415a2:	781b      	ldrbpl	r3, [r3, #0]
   415a4:	f806 3b01 	strbpl.w	r3, [r6], #1
   415a8:	682a      	ldr	r2, [r5, #0]
   415aa:	686b      	ldr	r3, [r5, #4]
   415ac:	3201      	adds	r2, #1
   415ae:	3b01      	subs	r3, #1
   415b0:	602a      	str	r2, [r5, #0]
   415b2:	68a2      	ldr	r2, [r4, #8]
   415b4:	606b      	str	r3, [r5, #4]
   415b6:	3a01      	subs	r2, #1
   415b8:	60a2      	str	r2, [r4, #8]
   415ba:	b142      	cbz	r2, 415ce <_scanf_chars+0x8e>
   415bc:	2b00      	cmp	r3, #0
   415be:	dcd7      	bgt.n	41570 <_scanf_chars+0x30>
   415c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   415c4:	4629      	mov	r1, r5
   415c6:	4640      	mov	r0, r8
   415c8:	4798      	blx	r3
   415ca:	2800      	cmp	r0, #0
   415cc:	d0d0      	beq.n	41570 <_scanf_chars+0x30>
   415ce:	6823      	ldr	r3, [r4, #0]
   415d0:	f013 0310 	ands.w	r3, r3, #16
   415d4:	d105      	bne.n	415e2 <_scanf_chars+0xa2>
   415d6:	68e2      	ldr	r2, [r4, #12]
   415d8:	3201      	adds	r2, #1
   415da:	60e2      	str	r2, [r4, #12]
   415dc:	69a2      	ldr	r2, [r4, #24]
   415de:	b102      	cbz	r2, 415e2 <_scanf_chars+0xa2>
   415e0:	7033      	strb	r3, [r6, #0]
   415e2:	6923      	ldr	r3, [r4, #16]
   415e4:	2000      	movs	r0, #0
   415e6:	441f      	add	r7, r3
   415e8:	6127      	str	r7, [r4, #16]
   415ea:	e7cb      	b.n	41584 <_scanf_chars+0x44>
   415ec:	0004f20f 	.word	0x0004f20f

000415f0 <_scanf_i>:
   415f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   415f4:	4699      	mov	r9, r3
   415f6:	b087      	sub	sp, #28
   415f8:	4b72      	ldr	r3, [pc, #456]	; (417c4 <_scanf_i+0x1d4>)
   415fa:	460c      	mov	r4, r1
   415fc:	4682      	mov	sl, r0
   415fe:	4616      	mov	r6, r2
   41600:	4627      	mov	r7, r4
   41602:	f04f 0b00 	mov.w	fp, #0
   41606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   4160a:	ab03      	add	r3, sp, #12
   4160c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   41610:	4b6d      	ldr	r3, [pc, #436]	; (417c8 <_scanf_i+0x1d8>)
   41612:	69a1      	ldr	r1, [r4, #24]
   41614:	4a6d      	ldr	r2, [pc, #436]	; (417cc <_scanf_i+0x1dc>)
   41616:	2903      	cmp	r1, #3
   41618:	bf18      	it	ne
   4161a:	461a      	movne	r2, r3
   4161c:	68a3      	ldr	r3, [r4, #8]
   4161e:	9201      	str	r2, [sp, #4]
   41620:	1e5a      	subs	r2, r3, #1
   41622:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   41626:	bf89      	itett	hi
   41628:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   4162c:	f04f 0800 	movls.w	r8, #0
   41630:	eb03 0805 	addhi.w	r8, r3, r5
   41634:	f240 135d 	movwhi	r3, #349	; 0x15d
   41638:	bf88      	it	hi
   4163a:	60a3      	strhi	r3, [r4, #8]
   4163c:	f857 3b1c 	ldr.w	r3, [r7], #28
   41640:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   41644:	463d      	mov	r5, r7
   41646:	6023      	str	r3, [r4, #0]
   41648:	6831      	ldr	r1, [r6, #0]
   4164a:	ab03      	add	r3, sp, #12
   4164c:	2202      	movs	r2, #2
   4164e:	7809      	ldrb	r1, [r1, #0]
   41650:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   41654:	f003 fdcc 	bl	451f0 <memchr>
   41658:	b328      	cbz	r0, 416a6 <_scanf_i+0xb6>
   4165a:	f1bb 0f01 	cmp.w	fp, #1
   4165e:	d159      	bne.n	41714 <_scanf_i+0x124>
   41660:	6862      	ldr	r2, [r4, #4]
   41662:	b92a      	cbnz	r2, 41670 <_scanf_i+0x80>
   41664:	6822      	ldr	r2, [r4, #0]
   41666:	2308      	movs	r3, #8
   41668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   4166c:	6063      	str	r3, [r4, #4]
   4166e:	6022      	str	r2, [r4, #0]
   41670:	6822      	ldr	r2, [r4, #0]
   41672:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   41676:	6022      	str	r2, [r4, #0]
   41678:	68a2      	ldr	r2, [r4, #8]
   4167a:	1e51      	subs	r1, r2, #1
   4167c:	60a1      	str	r1, [r4, #8]
   4167e:	b192      	cbz	r2, 416a6 <_scanf_i+0xb6>
   41680:	6832      	ldr	r2, [r6, #0]
   41682:	1c51      	adds	r1, r2, #1
   41684:	6031      	str	r1, [r6, #0]
   41686:	7812      	ldrb	r2, [r2, #0]
   41688:	f805 2b01 	strb.w	r2, [r5], #1
   4168c:	6872      	ldr	r2, [r6, #4]
   4168e:	3a01      	subs	r2, #1
   41690:	2a00      	cmp	r2, #0
   41692:	6072      	str	r2, [r6, #4]
   41694:	dc07      	bgt.n	416a6 <_scanf_i+0xb6>
   41696:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   4169a:	4631      	mov	r1, r6
   4169c:	4650      	mov	r0, sl
   4169e:	4790      	blx	r2
   416a0:	2800      	cmp	r0, #0
   416a2:	f040 8085 	bne.w	417b0 <_scanf_i+0x1c0>
   416a6:	f10b 0b01 	add.w	fp, fp, #1
   416aa:	f1bb 0f03 	cmp.w	fp, #3
   416ae:	d1cb      	bne.n	41648 <_scanf_i+0x58>
   416b0:	6863      	ldr	r3, [r4, #4]
   416b2:	b90b      	cbnz	r3, 416b8 <_scanf_i+0xc8>
   416b4:	230a      	movs	r3, #10
   416b6:	6063      	str	r3, [r4, #4]
   416b8:	6863      	ldr	r3, [r4, #4]
   416ba:	f04f 0b00 	mov.w	fp, #0
   416be:	4944      	ldr	r1, [pc, #272]	; (417d0 <_scanf_i+0x1e0>)
   416c0:	6960      	ldr	r0, [r4, #20]
   416c2:	1ac9      	subs	r1, r1, r3
   416c4:	f004 feaa 	bl	4641c <__sccl>
   416c8:	68a3      	ldr	r3, [r4, #8]
   416ca:	6822      	ldr	r2, [r4, #0]
   416cc:	2b00      	cmp	r3, #0
   416ce:	d03d      	beq.n	4174c <_scanf_i+0x15c>
   416d0:	6831      	ldr	r1, [r6, #0]
   416d2:	6960      	ldr	r0, [r4, #20]
   416d4:	f891 c000 	ldrb.w	ip, [r1]
   416d8:	f810 000c 	ldrb.w	r0, [r0, ip]
   416dc:	2800      	cmp	r0, #0
   416de:	d035      	beq.n	4174c <_scanf_i+0x15c>
   416e0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   416e4:	d124      	bne.n	41730 <_scanf_i+0x140>
   416e6:	0510      	lsls	r0, r2, #20
   416e8:	d522      	bpl.n	41730 <_scanf_i+0x140>
   416ea:	f10b 0b01 	add.w	fp, fp, #1
   416ee:	f1b8 0f00 	cmp.w	r8, #0
   416f2:	d003      	beq.n	416fc <_scanf_i+0x10c>
   416f4:	3301      	adds	r3, #1
   416f6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   416fa:	60a3      	str	r3, [r4, #8]
   416fc:	6873      	ldr	r3, [r6, #4]
   416fe:	3b01      	subs	r3, #1
   41700:	2b00      	cmp	r3, #0
   41702:	6073      	str	r3, [r6, #4]
   41704:	dd1b      	ble.n	4173e <_scanf_i+0x14e>
   41706:	6833      	ldr	r3, [r6, #0]
   41708:	3301      	adds	r3, #1
   4170a:	6033      	str	r3, [r6, #0]
   4170c:	68a3      	ldr	r3, [r4, #8]
   4170e:	3b01      	subs	r3, #1
   41710:	60a3      	str	r3, [r4, #8]
   41712:	e7d9      	b.n	416c8 <_scanf_i+0xd8>
   41714:	f1bb 0f02 	cmp.w	fp, #2
   41718:	d1ae      	bne.n	41678 <_scanf_i+0x88>
   4171a:	6822      	ldr	r2, [r4, #0]
   4171c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   41720:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   41724:	d1bf      	bne.n	416a6 <_scanf_i+0xb6>
   41726:	2310      	movs	r3, #16
   41728:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   4172c:	6063      	str	r3, [r4, #4]
   4172e:	e7a2      	b.n	41676 <_scanf_i+0x86>
   41730:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   41734:	6022      	str	r2, [r4, #0]
   41736:	780b      	ldrb	r3, [r1, #0]
   41738:	f805 3b01 	strb.w	r3, [r5], #1
   4173c:	e7de      	b.n	416fc <_scanf_i+0x10c>
   4173e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   41742:	4631      	mov	r1, r6
   41744:	4650      	mov	r0, sl
   41746:	4798      	blx	r3
   41748:	2800      	cmp	r0, #0
   4174a:	d0df      	beq.n	4170c <_scanf_i+0x11c>
   4174c:	6823      	ldr	r3, [r4, #0]
   4174e:	05d9      	lsls	r1, r3, #23
   41750:	d50d      	bpl.n	4176e <_scanf_i+0x17e>
   41752:	42bd      	cmp	r5, r7
   41754:	d909      	bls.n	4176a <_scanf_i+0x17a>
   41756:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   4175a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   4175e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   41762:	4632      	mov	r2, r6
   41764:	4645      	mov	r5, r8
   41766:	4650      	mov	r0, sl
   41768:	4798      	blx	r3
   4176a:	42bd      	cmp	r5, r7
   4176c:	d028      	beq.n	417c0 <_scanf_i+0x1d0>
   4176e:	6822      	ldr	r2, [r4, #0]
   41770:	f012 0210 	ands.w	r2, r2, #16
   41774:	d113      	bne.n	4179e <_scanf_i+0x1ae>
   41776:	702a      	strb	r2, [r5, #0]
   41778:	4639      	mov	r1, r7
   4177a:	6863      	ldr	r3, [r4, #4]
   4177c:	4650      	mov	r0, sl
   4177e:	9e01      	ldr	r6, [sp, #4]
   41780:	47b0      	blx	r6
   41782:	f8d9 3000 	ldr.w	r3, [r9]
   41786:	6821      	ldr	r1, [r4, #0]
   41788:	1d1a      	adds	r2, r3, #4
   4178a:	f011 0f20 	tst.w	r1, #32
   4178e:	f8c9 2000 	str.w	r2, [r9]
   41792:	681b      	ldr	r3, [r3, #0]
   41794:	d00f      	beq.n	417b6 <_scanf_i+0x1c6>
   41796:	6018      	str	r0, [r3, #0]
   41798:	68e3      	ldr	r3, [r4, #12]
   4179a:	3301      	adds	r3, #1
   4179c:	60e3      	str	r3, [r4, #12]
   4179e:	1bed      	subs	r5, r5, r7
   417a0:	2000      	movs	r0, #0
   417a2:	44ab      	add	fp, r5
   417a4:	6925      	ldr	r5, [r4, #16]
   417a6:	445d      	add	r5, fp
   417a8:	6125      	str	r5, [r4, #16]
   417aa:	b007      	add	sp, #28
   417ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   417b0:	f04f 0b00 	mov.w	fp, #0
   417b4:	e7ca      	b.n	4174c <_scanf_i+0x15c>
   417b6:	07ca      	lsls	r2, r1, #31
   417b8:	bf4c      	ite	mi
   417ba:	8018      	strhmi	r0, [r3, #0]
   417bc:	6018      	strpl	r0, [r3, #0]
   417be:	e7eb      	b.n	41798 <_scanf_i+0x1a8>
   417c0:	2001      	movs	r0, #1
   417c2:	e7f2      	b.n	417aa <_scanf_i+0x1ba>
   417c4:	00046a38 	.word	0x00046a38
   417c8:	0004573f 	.word	0x0004573f
   417cc:	0004573b 	.word	0x0004573b
   417d0:	0004f360 	.word	0x0004f360

000417d4 <_read_r>:
   417d4:	b538      	push	{r3, r4, r5, lr}
   417d6:	4605      	mov	r5, r0
   417d8:	4c06      	ldr	r4, [pc, #24]	; (417f4 <_read_r+0x20>)
   417da:	4608      	mov	r0, r1
   417dc:	4611      	mov	r1, r2
   417de:	2200      	movs	r2, #0
   417e0:	6022      	str	r2, [r4, #0]
   417e2:	461a      	mov	r2, r3
   417e4:	f001 fa81 	bl	42cea <_read>
   417e8:	1c43      	adds	r3, r0, #1
   417ea:	d102      	bne.n	417f2 <_read_r+0x1e>
   417ec:	6823      	ldr	r3, [r4, #0]
   417ee:	b103      	cbz	r3, 417f2 <_read_r+0x1e>
   417f0:	602b      	str	r3, [r5, #0]
   417f2:	bd38      	pop	{r3, r4, r5, pc}
   417f4:	2002cc80 	.word	0x2002cc80

000417f8 <raise>:
   417f8:	4b02      	ldr	r3, [pc, #8]	; (41804 <raise+0xc>)
   417fa:	4601      	mov	r1, r0
   417fc:	6818      	ldr	r0, [r3, #0]
   417fe:	f004 be3e 	b.w	4647e <_raise_r>
   41802:	bf00      	nop
   41804:	20020784 	.word	0x20020784

00041808 <_kill_r>:
   41808:	b538      	push	{r3, r4, r5, lr}
   4180a:	2300      	movs	r3, #0
   4180c:	4c06      	ldr	r4, [pc, #24]	; (41828 <_kill_r+0x20>)
   4180e:	4605      	mov	r5, r0
   41810:	4608      	mov	r0, r1
   41812:	4611      	mov	r1, r2
   41814:	6023      	str	r3, [r4, #0]
   41816:	f001 fa77 	bl	42d08 <_kill>
   4181a:	1c43      	adds	r3, r0, #1
   4181c:	d102      	bne.n	41824 <_kill_r+0x1c>
   4181e:	6823      	ldr	r3, [r4, #0]
   41820:	b103      	cbz	r3, 41824 <_kill_r+0x1c>
   41822:	602b      	str	r3, [r5, #0]
   41824:	bd38      	pop	{r3, r4, r5, pc}
   41826:	bf00      	nop
   41828:	2002cc80 	.word	0x2002cc80

0004182c <_fstat_r>:
   4182c:	b538      	push	{r3, r4, r5, lr}
   4182e:	2300      	movs	r3, #0
   41830:	4c06      	ldr	r4, [pc, #24]	; (4184c <_fstat_r+0x20>)
   41832:	4605      	mov	r5, r0
   41834:	4608      	mov	r0, r1
   41836:	4611      	mov	r1, r2
   41838:	6023      	str	r3, [r4, #0]
   4183a:	f001 fa69 	bl	42d10 <_fstat>
   4183e:	1c43      	adds	r3, r0, #1
   41840:	d102      	bne.n	41848 <_fstat_r+0x1c>
   41842:	6823      	ldr	r3, [r4, #0]
   41844:	b103      	cbz	r3, 41848 <_fstat_r+0x1c>
   41846:	602b      	str	r3, [r5, #0]
   41848:	bd38      	pop	{r3, r4, r5, pc}
   4184a:	bf00      	nop
   4184c:	2002cc80 	.word	0x2002cc80

00041850 <_isatty_r>:
   41850:	b538      	push	{r3, r4, r5, lr}
   41852:	2300      	movs	r3, #0
   41854:	4c05      	ldr	r4, [pc, #20]	; (4186c <_isatty_r+0x1c>)
   41856:	4605      	mov	r5, r0
   41858:	4608      	mov	r0, r1
   4185a:	6023      	str	r3, [r4, #0]
   4185c:	f001 fa52 	bl	42d04 <_isatty>
   41860:	1c43      	adds	r3, r0, #1
   41862:	d102      	bne.n	4186a <_isatty_r+0x1a>
   41864:	6823      	ldr	r3, [r4, #0]
   41866:	b103      	cbz	r3, 4186a <_isatty_r+0x1a>
   41868:	602b      	str	r3, [r5, #0]
   4186a:	bd38      	pop	{r3, r4, r5, pc}
   4186c:	2002cc80 	.word	0x2002cc80

00041870 <cloud_send>:
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_send(const struct cloud_backend *const backend,
			     struct cloud_msg *msg)
{
	if (backend == NULL || backend->api == NULL ||
   41870:	b120      	cbz	r0, 4187c <cloud_send+0xc>
   41872:	6803      	ldr	r3, [r0, #0]
   41874:	b113      	cbz	r3, 4187c <cloud_send+0xc>
	    backend->api->send == NULL) {
   41876:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   41878:	b103      	cbz	r3, 4187c <cloud_send+0xc>
		return -ENOTSUP;
	}

	return backend->api->send(backend, msg);
   4187a:	4718      	bx	r3
}
   4187c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   41880:	4770      	bx	lr

00041882 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   41882:	e8d0 3fef 	ldaex	r3, [r0]
   41886:	e8c0 1fe2 	stlex	r2, r1, [r0]
   4188a:	2a00      	cmp	r2, #0
   4188c:	d1f9      	bne.n	41882 <atomic_set>
}
   4188e:	4618      	mov	r0, r3
   41890:	4770      	bx	lr

00041892 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   41892:	e8d0 0faf 	lda	r0, [r0]
}
   41896:	4770      	bx	lr

00041898 <k_uptime_get>:
{
   41898:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   4189a:	f003 fbf0 	bl	4507e <z_impl_k_uptime_ticks>
   4189e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   418a2:	fba0 2304 	umull	r2, r3, r0, r4
   418a6:	fb04 3301 	mla	r3, r4, r1, r3
   418aa:	0bd0      	lsrs	r0, r2, #15
}
   418ac:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   418b0:	0bd9      	lsrs	r1, r3, #15
   418b2:	bd10      	pop	{r4, pc}

000418b4 <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   418b4:	f06f 0173 	mvn.w	r1, #115	; 0x73
   418b8:	2000      	movs	r0, #0
   418ba:	f7e0 b875 	b.w	219a8 <error_handler>

000418be <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   418be:	4601      	mov	r1, r0
   418c0:	2000      	movs	r0, #0
   418c2:	f7e0 b871 	b.w	219a8 <error_handler>

000418c6 <bsd_recoverable_error_handler>:
	error_handler(ERROR_BSD_RECOVERABLE, (int)err);
   418c6:	4601      	mov	r1, r0
   418c8:	2001      	movs	r0, #1
   418ca:	f7e0 b86d 	b.w	219a8 <error_handler>

000418ce <sensors_start_work_fn>:
	sensors_start();
   418ce:	f7e0 bc01 	b.w	220d4 <sensors_start>

000418d2 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   418d2:	6883      	ldr	r3, [r0, #8]
   418d4:	691b      	ldr	r3, [r3, #16]
   418d6:	4718      	bx	r3

000418d8 <motion_simulate_trigger>:

void motion_simulate_trigger(void)
{
	sensor_trigger_handler(NULL, NULL);
   418d8:	f7e0 bfd4 	b.w	22884 <sensor_trigger_handler.isra.0>

000418dc <ui_led_set_color>:
}
   418dc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   418e0:	4770      	bx	lr

000418e2 <json_value_string_compare>:
{
   418e2:	b510      	push	{r4, lr}
   418e4:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   418e6:	f002 fbda 	bl	4409e <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   418ea:	b130      	cbz	r0, 418fa <json_value_string_compare+0x18>
   418ec:	b134      	cbz	r4, 418fc <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   418ee:	4621      	mov	r1, r4
   418f0:	f7db fcae 	bl	1d250 <strcmp>
   418f4:	fab0 f080 	clz	r0, r0
   418f8:	0940      	lsrs	r0, r0, #5
}
   418fa:	bd10      	pop	{r4, pc}
		return false;
   418fc:	4620      	mov	r0, r4
   418fe:	e7fc      	b.n	418fa <json_value_string_compare+0x18>

00041900 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   41900:	b108      	cbz	r0, 41906 <json_object_decode+0x6>
   41902:	f002 bb6a 	b.w	43fda <cJSON_GetObjectItem>
}
   41906:	4770      	bx	lr

00041908 <add_array_obj>:
{
   41908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4190c:	4681      	mov	r9, r0
   4190e:	4688      	mov	r8, r1
   41910:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   41912:	461e      	mov	r6, r3
   41914:	b32b      	cbz	r3, 41962 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   41916:	f7e7 fd45 	bl	293a4 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   4191a:	4604      	mov	r4, r0
   4191c:	b1d0      	cbz	r0, 41954 <add_array_obj+0x4c>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   4191e:	2500      	movs	r5, #0
   41920:	4545      	cmp	r5, r8
   41922:	d10d      	bne.n	41940 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   41924:	4620      	mov	r0, r4
   41926:	f002 fb50 	bl	43fca <cJSON_GetArraySize>
   4192a:	b908      	cbnz	r0, 41930 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   4192c:	2304      	movs	r3, #4
   4192e:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   41930:	4630      	mov	r0, r6
   41932:	4622      	mov	r2, r4
   41934:	4639      	mov	r1, r7
   41936:	f002 fb5c 	bl	43ff2 <cJSON_AddItemToObject>
	return 0;
   4193a:	2000      	movs	r0, #0
}
   4193c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   41940:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   41944:	b158      	cbz	r0, 4195e <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   41946:	f7e7 fd15 	bl	29374 <cJSON_CreateString>
			if (str == NULL) {
   4194a:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   4194c:	4620      	mov	r0, r4
			if (str == NULL) {
   4194e:	b921      	cbnz	r1, 4195a <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   41950:	f7e7 fc60 	bl	29214 <cJSON_Delete>
		return -ENOMEM;
   41954:	f06f 000b 	mvn.w	r0, #11
   41958:	e7f0      	b.n	4193c <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   4195a:	f002 fb48 	bl	43fee <cJSON_AddItemToArray>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   4195e:	3501      	adds	r5, #1
   41960:	e7de      	b.n	41920 <add_array_obj+0x18>
		return -EINVAL;
   41962:	f06f 0015 	mvn.w	r0, #21
   41966:	e7e9      	b.n	4193c <add_array_obj+0x34>

00041968 <env_sensors_get_air_quality>:
}
   41968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4196c:	4770      	bx	lr

0004196e <sys_notify_validate>:
	if (notify == NULL) {
   4196e:	b140      	cbz	r0, 41982 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   41970:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   41972:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   41976:	2b02      	cmp	r3, #2
   41978:	d006      	beq.n	41988 <sys_notify_validate+0x1a>
   4197a:	2b03      	cmp	r3, #3
   4197c:	d004      	beq.n	41988 <sys_notify_validate+0x1a>
   4197e:	2b01      	cmp	r3, #1
   41980:	d005      	beq.n	4198e <sys_notify_validate+0x20>
		return -EINVAL;
   41982:	f06f 0015 	mvn.w	r0, #21
}
   41986:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   41988:	6803      	ldr	r3, [r0, #0]
   4198a:	2b00      	cmp	r3, #0
   4198c:	d0f9      	beq.n	41982 <sys_notify_validate+0x14>
		notify->result = 0;
   4198e:	2300      	movs	r3, #0
   41990:	6083      	str	r3, [r0, #8]
   41992:	4618      	mov	r0, r3
   41994:	4770      	bx	lr

00041996 <arch_printk_char_out>:
}
   41996:	2000      	movs	r0, #0
   41998:	4770      	bx	lr

0004199a <str_out>:
{
   4199a:	b530      	push	{r4, r5, lr}
   4199c:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   4199e:	680c      	ldr	r4, [r1, #0]
   419a0:	1c55      	adds	r5, r2, #1
   419a2:	b114      	cbz	r4, 419aa <str_out+0x10>
   419a4:	684b      	ldr	r3, [r1, #4]
   419a6:	4293      	cmp	r3, r2
   419a8:	dc01      	bgt.n	419ae <str_out+0x14>
		ctx->count++;
   419aa:	608d      	str	r5, [r1, #8]
}
   419ac:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   419ae:	3b01      	subs	r3, #1
   419b0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   419b2:	bf08      	it	eq
   419b4:	2200      	moveq	r2, #0
   419b6:	608d      	str	r5, [r1, #8]
   419b8:	bf0c      	ite	eq
   419ba:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   419bc:	54a0      	strbne	r0, [r4, r2]
   419be:	e7f5      	b.n	419ac <str_out+0x12>

000419c0 <z_vprintk>:
{
   419c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   419c4:	2500      	movs	r5, #0
{
   419c6:	4606      	mov	r6, r0
   419c8:	460f      	mov	r7, r1
   419ca:	461c      	mov	r4, r3
	int min_width = -1;
   419cc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   419d0:	46a8      	mov	r8, r5
{
   419d2:	b087      	sub	sp, #28
   419d4:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   419d8:	f04f 0a00 	mov.w	sl, #0
					break;
   419dc:	e007      	b.n	419ee <z_vprintk+0x2e>
		if (!might_format) {
   419de:	f1ba 0f00 	cmp.w	sl, #0
   419e2:	d10b      	bne.n	419fc <z_vprintk+0x3c>
			if (*fmt != '%') {
   419e4:	2825      	cmp	r0, #37	; 0x25
   419e6:	f000 80f0 	beq.w	41bca <z_vprintk+0x20a>
				out((int)*fmt, ctx);
   419ea:	4639      	mov	r1, r7
   419ec:	47b0      	blx	r6
	while (*fmt) {
   419ee:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   419f2:	2800      	cmp	r0, #0
   419f4:	d1f3      	bne.n	419de <z_vprintk+0x1e>
}
   419f6:	b007      	add	sp, #28
   419f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   419fc:	2864      	cmp	r0, #100	; 0x64
   419fe:	d06c      	beq.n	41ada <z_vprintk+0x11a>
   41a00:	d81a      	bhi.n	41a38 <z_vprintk+0x78>
   41a02:	2839      	cmp	r0, #57	; 0x39
   41a04:	d80a      	bhi.n	41a1c <z_vprintk+0x5c>
   41a06:	2831      	cmp	r0, #49	; 0x31
   41a08:	d25e      	bcs.n	41ac8 <z_vprintk+0x108>
   41a0a:	282d      	cmp	r0, #45	; 0x2d
   41a0c:	f000 80e4 	beq.w	41bd8 <z_vprintk+0x218>
   41a10:	2830      	cmp	r0, #48	; 0x30
   41a12:	d04a      	beq.n	41aaa <z_vprintk+0xea>
   41a14:	2825      	cmp	r0, #37	; 0x25
   41a16:	d107      	bne.n	41a28 <z_vprintk+0x68>
				out((int)'%', ctx);
   41a18:	4639      	mov	r1, r7
   41a1a:	e00b      	b.n	41a34 <z_vprintk+0x74>
			switch (*fmt) {
   41a1c:	2858      	cmp	r0, #88	; 0x58
   41a1e:	f000 80a5 	beq.w	41b6c <z_vprintk+0x1ac>
   41a22:	2863      	cmp	r0, #99	; 0x63
   41a24:	f000 80cd 	beq.w	41bc2 <z_vprintk+0x202>
					out((int)'%', ctx);
   41a28:	4639      	mov	r1, r7
   41a2a:	2025      	movs	r0, #37	; 0x25
   41a2c:	47b0      	blx	r6
					out((int)*fmt, ctx);
   41a2e:	4639      	mov	r1, r7
   41a30:	f89b 0000 	ldrb.w	r0, [fp]
   41a34:	47b0      	blx	r6
   41a36:	e7cf      	b.n	419d8 <z_vprintk+0x18>
			switch (*fmt) {
   41a38:	2870      	cmp	r0, #112	; 0x70
   41a3a:	f000 808d 	beq.w	41b58 <z_vprintk+0x198>
   41a3e:	d80d      	bhi.n	41a5c <z_vprintk+0x9c>
   41a40:	2869      	cmp	r0, #105	; 0x69
   41a42:	d04a      	beq.n	41ada <z_vprintk+0x11a>
   41a44:	286c      	cmp	r0, #108	; 0x6c
   41a46:	d103      	bne.n	41a50 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   41a48:	2d6c      	cmp	r5, #108	; 0x6c
   41a4a:	d12a      	bne.n	41aa2 <z_vprintk+0xe2>
					length_mod = 'L';
   41a4c:	254c      	movs	r5, #76	; 0x4c
   41a4e:	e7ce      	b.n	419ee <z_vprintk+0x2e>
			switch (*fmt) {
   41a50:	2868      	cmp	r0, #104	; 0x68
   41a52:	d1e9      	bne.n	41a28 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   41a54:	2d68      	cmp	r5, #104	; 0x68
   41a56:	d124      	bne.n	41aa2 <z_vprintk+0xe2>
					length_mod = 'H';
   41a58:	2548      	movs	r5, #72	; 0x48
   41a5a:	e7c8      	b.n	419ee <z_vprintk+0x2e>
			switch (*fmt) {
   41a5c:	2875      	cmp	r0, #117	; 0x75
   41a5e:	d03c      	beq.n	41ada <z_vprintk+0x11a>
   41a60:	d81b      	bhi.n	41a9a <z_vprintk+0xda>
   41a62:	2873      	cmp	r0, #115	; 0x73
   41a64:	d1e0      	bne.n	41a28 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   41a66:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   41a6a:	469a      	mov	sl, r3
   41a6c:	4652      	mov	r2, sl
   41a6e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   41a72:	2800      	cmp	r0, #0
   41a74:	f040 80a0 	bne.w	41bb8 <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
   41a78:	f1b8 0f03 	cmp.w	r8, #3
   41a7c:	f040 80b2 	bne.w	41be4 <z_vprintk+0x224>
					int remaining = min_width - (s - start);
   41a80:	eba2 0a03 	sub.w	sl, r2, r3
   41a84:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
   41a88:	f1ba 0f00 	cmp.w	sl, #0
   41a8c:	dda4      	ble.n	419d8 <z_vprintk+0x18>
						out(' ', ctx);
   41a8e:	4639      	mov	r1, r7
   41a90:	2020      	movs	r0, #32
   41a92:	47b0      	blx	r6
   41a94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   41a98:	e7f6      	b.n	41a88 <z_vprintk+0xc8>
			switch (*fmt) {
   41a9a:	2878      	cmp	r0, #120	; 0x78
   41a9c:	d066      	beq.n	41b6c <z_vprintk+0x1ac>
   41a9e:	287a      	cmp	r0, #122	; 0x7a
   41aa0:	d1c2      	bne.n	41a28 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   41aa2:	2d00      	cmp	r5, #0
   41aa4:	d1c0      	bne.n	41a28 <z_vprintk+0x68>
   41aa6:	4605      	mov	r5, r0
   41aa8:	e7a1      	b.n	419ee <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
   41aaa:	f1b9 0f00 	cmp.w	r9, #0
   41aae:	da0e      	bge.n	41ace <z_vprintk+0x10e>
   41ab0:	f1b8 0f00 	cmp.w	r8, #0
   41ab4:	f000 8093 	beq.w	41bde <z_vprintk+0x21e>
					min_width = *fmt - '0';
   41ab8:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   41abc:	f1b8 0f00 	cmp.w	r8, #0
   41ac0:	bf08      	it	eq
   41ac2:	f04f 0802 	moveq.w	r8, #2
   41ac6:	e792      	b.n	419ee <z_vprintk+0x2e>
				if (min_width < 0) {
   41ac8:	f1b9 0f00 	cmp.w	r9, #0
   41acc:	dbf4      	blt.n	41ab8 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   41ace:	230a      	movs	r3, #10
   41ad0:	fb03 0909 	mla	r9, r3, r9, r0
   41ad4:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   41ad8:	e7f0      	b.n	41abc <z_vprintk+0xfc>
				if (length_mod == 'z') {
   41ada:	2d7a      	cmp	r5, #122	; 0x7a
   41adc:	d106      	bne.n	41aec <z_vprintk+0x12c>
					d = va_arg(ap, long);
   41ade:	46a2      	mov	sl, r4
   41ae0:	f85a 2b04 	ldr.w	r2, [sl], #4
   41ae4:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   41ae6:	2875      	cmp	r0, #117	; 0x75
   41ae8:	d125      	bne.n	41b36 <z_vprintk+0x176>
   41aea:	e00f      	b.n	41b0c <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
   41aec:	2d6c      	cmp	r5, #108	; 0x6c
   41aee:	d0f6      	beq.n	41ade <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   41af0:	2d4c      	cmp	r5, #76	; 0x4c
   41af2:	d105      	bne.n	41b00 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
   41af4:	3407      	adds	r4, #7
   41af6:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
   41afa:	e8fa 2302 	ldrd	r2, r3, [sl], #8
   41afe:	e7f2      	b.n	41ae6 <z_vprintk+0x126>
				} else if (*fmt == 'u') {
   41b00:	2875      	cmp	r0, #117	; 0x75
   41b02:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
   41b06:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
   41b08:	d114      	bne.n	41b34 <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
   41b0a:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   41b0c:	f1b8 0103 	subs.w	r1, r8, #3
   41b10:	bf18      	it	ne
   41b12:	2101      	movne	r1, #1
   41b14:	f1b8 0f01 	cmp.w	r8, #1
   41b18:	bf0c      	ite	eq
   41b1a:	2030      	moveq	r0, #48	; 0x30
   41b1c:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   41b1e:	9101      	str	r1, [sp, #4]
   41b20:	210a      	movs	r1, #10
   41b22:	e9cd 0902 	strd	r0, r9, [sp, #8]
   41b26:	9100      	str	r1, [sp, #0]
   41b28:	4630      	mov	r0, r6
   41b2a:	4639      	mov	r1, r7
   41b2c:	f7e2 fb86 	bl	2423c <print_digits.part.0>
   41b30:	4654      	mov	r4, sl
   41b32:	e751      	b.n	419d8 <z_vprintk+0x18>
					d = va_arg(ap, int);
   41b34:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   41b36:	2a00      	cmp	r2, #0
   41b38:	f173 0100 	sbcs.w	r1, r3, #0
   41b3c:	dae6      	bge.n	41b0c <z_vprintk+0x14c>
					out((int)'-', ctx);
   41b3e:	4639      	mov	r1, r7
   41b40:	202d      	movs	r0, #45	; 0x2d
   41b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
   41b46:	47b0      	blx	r6
					d = -d;
   41b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   41b4c:	4252      	negs	r2, r2
   41b4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   41b52:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   41b56:	e7d9      	b.n	41b0c <z_vprintk+0x14c>
				out('0', ctx);
   41b58:	4639      	mov	r1, r7
   41b5a:	2030      	movs	r0, #48	; 0x30
   41b5c:	47b0      	blx	r6
				out('x', ctx);
   41b5e:	4639      	mov	r1, r7
   41b60:	2078      	movs	r0, #120	; 0x78
   41b62:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   41b64:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   41b68:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   41b6c:	f89b 3000 	ldrb.w	r3, [fp]
   41b70:	2b70      	cmp	r3, #112	; 0x70
   41b72:	d103      	bne.n	41b7c <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
   41b74:	f854 2b04 	ldr.w	r2, [r4], #4
   41b78:	2300      	movs	r3, #0
   41b7a:	e00a      	b.n	41b92 <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
   41b7c:	2d6c      	cmp	r5, #108	; 0x6c
   41b7e:	d0f9      	beq.n	41b74 <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
   41b80:	2d4c      	cmp	r5, #76	; 0x4c
   41b82:	d1f7      	bne.n	41b74 <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
   41b84:	3407      	adds	r4, #7
   41b86:	f024 0307 	bic.w	r3, r4, #7
   41b8a:	461c      	mov	r4, r3
   41b8c:	685b      	ldr	r3, [r3, #4]
   41b8e:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   41b92:	f1b8 0103 	subs.w	r1, r8, #3
   41b96:	bf18      	it	ne
   41b98:	2101      	movne	r1, #1
   41b9a:	f1b8 0f01 	cmp.w	r8, #1
   41b9e:	bf0c      	ite	eq
   41ba0:	2030      	moveq	r0, #48	; 0x30
   41ba2:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   41ba4:	9101      	str	r1, [sp, #4]
   41ba6:	2110      	movs	r1, #16
   41ba8:	e9cd 0902 	strd	r0, r9, [sp, #8]
   41bac:	9100      	str	r1, [sp, #0]
   41bae:	4630      	mov	r0, r6
   41bb0:	4639      	mov	r1, r7
   41bb2:	f7e2 fb43 	bl	2423c <print_digits.part.0>
   41bb6:	e70f      	b.n	419d8 <z_vprintk+0x18>
					out((int)(*s++), ctx);
   41bb8:	4639      	mov	r1, r7
   41bba:	9304      	str	r3, [sp, #16]
   41bbc:	47b0      	blx	r6
   41bbe:	9b04      	ldr	r3, [sp, #16]
   41bc0:	e754      	b.n	41a6c <z_vprintk+0xac>
				out(c, ctx);
   41bc2:	4639      	mov	r1, r7
   41bc4:	f854 0b04 	ldr.w	r0, [r4], #4
   41bc8:	e734      	b.n	41a34 <z_vprintk+0x74>
				length_mod = 0;
   41bca:	4655      	mov	r5, sl
				padding = PAD_NONE;
   41bcc:	46d0      	mov	r8, sl
				min_width = -1;
   41bce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   41bd2:	f04f 0a01 	mov.w	sl, #1
   41bd6:	e70a      	b.n	419ee <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
   41bd8:	f04f 0803 	mov.w	r8, #3
   41bdc:	e707      	b.n	419ee <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   41bde:	f04f 0801 	mov.w	r8, #1
   41be2:	e704      	b.n	419ee <z_vprintk+0x2e>
			might_format = 0;
   41be4:	4682      	mov	sl, r0
   41be6:	e702      	b.n	419ee <z_vprintk+0x2e>

00041be8 <printk>:
{
   41be8:	b40f      	push	{r0, r1, r2, r3}
   41bea:	b507      	push	{r0, r1, r2, lr}
   41bec:	a904      	add	r1, sp, #16
   41bee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   41bf2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   41bf4:	f7e2 fb72 	bl	242dc <vprintk>
}
   41bf8:	b003      	add	sp, #12
   41bfa:	f85d eb04 	ldr.w	lr, [sp], #4
   41bfe:	b004      	add	sp, #16
   41c00:	4770      	bx	lr

00041c02 <snprintk>:
{
   41c02:	b40c      	push	{r2, r3}
   41c04:	b507      	push	{r0, r1, r2, lr}
   41c06:	ab04      	add	r3, sp, #16
   41c08:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   41c0c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   41c0e:	f7e2 fb73 	bl	242f8 <vsnprintk>
}
   41c12:	b003      	add	sp, #12
   41c14:	f85d eb04 	ldr.w	lr, [sp], #4
   41c18:	b002      	add	sp, #8
   41c1a:	4770      	bx	lr

00041c1c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   41c1c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   41c1e:	f013 0307 	ands.w	r3, r3, #7
   41c22:	d105      	bne.n	41c30 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   41c24:	6803      	ldr	r3, [r0, #0]
   41c26:	2b00      	cmp	r3, #0
		evt = EVT_START;
   41c28:	bf0c      	ite	eq
   41c2a:	2000      	moveq	r0, #0
   41c2c:	2003      	movne	r0, #3
   41c2e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   41c30:	2b02      	cmp	r3, #2
   41c32:	d105      	bne.n	41c40 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   41c34:	8bc3      	ldrh	r3, [r0, #30]
   41c36:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   41c38:	bf14      	ite	ne
   41c3a:	2000      	movne	r0, #0
   41c3c:	2004      	moveq	r0, #4
   41c3e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   41c40:	2b01      	cmp	r3, #1
   41c42:	d105      	bne.n	41c50 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   41c44:	6803      	ldr	r3, [r0, #0]
   41c46:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   41c48:	bf0c      	ite	eq
   41c4a:	2000      	moveq	r0, #0
   41c4c:	2005      	movne	r0, #5
   41c4e:	4770      	bx	lr
	int evt = EVT_NOP;
   41c50:	2000      	movs	r0, #0
}
   41c52:	4770      	bx	lr

00041c54 <notify_one>:
{
   41c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41c58:	460d      	mov	r5, r1
   41c5a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   41c5c:	4619      	mov	r1, r3
   41c5e:	1d28      	adds	r0, r5, #4
{
   41c60:	4690      	mov	r8, r2
   41c62:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   41c64:	f7e2 fab2 	bl	241cc <sys_notify_finalize>
	if (cb) {
   41c68:	4604      	mov	r4, r0
   41c6a:	b138      	cbz	r0, 41c7c <notify_one+0x28>
		cb(mgr, cli, state, res);
   41c6c:	4633      	mov	r3, r6
   41c6e:	4642      	mov	r2, r8
   41c70:	4629      	mov	r1, r5
   41c72:	4638      	mov	r0, r7
   41c74:	46a4      	mov	ip, r4
}
   41c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   41c7a:	4760      	bx	ip
}
   41c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041c80 <validate_args>:
{
   41c80:	b510      	push	{r4, lr}
   41c82:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   41c84:	b140      	cbz	r0, 41c98 <validate_args+0x18>
   41c86:	b139      	cbz	r1, 41c98 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   41c88:	1d08      	adds	r0, r1, #4
   41c8a:	f7ff fe70 	bl	4196e <sys_notify_validate>
	if ((rv == 0)
   41c8e:	b928      	cbnz	r0, 41c9c <validate_args+0x1c>
	    && ((cli->notify.flags
   41c90:	68a3      	ldr	r3, [r4, #8]
   41c92:	f033 0303 	bics.w	r3, r3, #3
   41c96:	d001      	beq.n	41c9c <validate_args+0x1c>
		rv = -EINVAL;
   41c98:	f06f 0015 	mvn.w	r0, #21
}
   41c9c:	bd10      	pop	{r4, pc}

00041c9e <onoff_manager_init>:
{
   41c9e:	b538      	push	{r3, r4, r5, lr}
   41ca0:	460c      	mov	r4, r1
	if ((mgr == NULL)
   41ca2:	4605      	mov	r5, r0
   41ca4:	b158      	cbz	r0, 41cbe <onoff_manager_init+0x20>
	    || (transitions == NULL)
   41ca6:	b151      	cbz	r1, 41cbe <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   41ca8:	680b      	ldr	r3, [r1, #0]
   41caa:	b143      	cbz	r3, 41cbe <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   41cac:	684b      	ldr	r3, [r1, #4]
   41cae:	b133      	cbz	r3, 41cbe <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   41cb0:	2220      	movs	r2, #32
   41cb2:	2100      	movs	r1, #0
   41cb4:	f003 fad8 	bl	45268 <memset>
	return 0;
   41cb8:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   41cba:	612c      	str	r4, [r5, #16]
}
   41cbc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   41cbe:	f06f 0015 	mvn.w	r0, #21
   41cc2:	e7fb      	b.n	41cbc <onoff_manager_init+0x1e>

00041cc4 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   41cc4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   41cc6:	f7fc fa9d 	bl	3e204 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   41cca:	2000      	movs	r0, #0
   41ccc:	bd08      	pop	{r3, pc}

00041cce <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   41cce:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   41cd0:	f7fc fadc 	bl	3e28c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   41cd4:	f110 0f0b 	cmn.w	r0, #11
   41cd8:	d005      	beq.n	41ce6 <sys_sem_take+0x18>
   41cda:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   41cde:	bf08      	it	eq
   41ce0:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   41ce4:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   41ce6:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   41cea:	e7fb      	b.n	41ce4 <sys_sem_take+0x16>

00041cec <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   41cec:	4604      	mov	r4, r0
   41cee:	b508      	push	{r3, lr}
   41cf0:	4608      	mov	r0, r1
   41cf2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   41cf4:	461a      	mov	r2, r3
   41cf6:	47a0      	blx	r4
	return z_impl_k_current_get();
   41cf8:	f7fc fa7e 	bl	3e1f8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   41cfc:	f7e5 fc44 	bl	27588 <z_impl_k_thread_abort>

00041d00 <chunk_field>:
	if (big_heap(h)) {
   41d00:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   41d02:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   41d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   41d0a:	bf2c      	ite	cs
   41d0c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   41d10:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   41d14:	4770      	bx	lr

00041d16 <chunk_set>:
	void *cmem = &buf[c];
   41d16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   41d1a:	6880      	ldr	r0, [r0, #8]
   41d1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   41d20:	bf2c      	ite	cs
   41d22:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   41d26:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   41d2a:	4770      	bx	lr

00041d2c <chunk_size>:
{
   41d2c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   41d2e:	2201      	movs	r2, #1
   41d30:	f7ff ffe6 	bl	41d00 <chunk_field>
}
   41d34:	0840      	lsrs	r0, r0, #1
   41d36:	bd08      	pop	{r3, pc}

00041d38 <set_chunk_used>:
	if (big_heap(h)) {
   41d38:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   41d3a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   41d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41d42:	d308      	bcc.n	41d56 <set_chunk_used+0x1e>
		if (used) {
   41d44:	684b      	ldr	r3, [r1, #4]
   41d46:	b11a      	cbz	r2, 41d50 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   41d48:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   41d4c:	604b      	str	r3, [r1, #4]
   41d4e:	4770      	bx	lr
   41d50:	f023 0301 	bic.w	r3, r3, #1
   41d54:	e7fa      	b.n	41d4c <set_chunk_used+0x14>
		if (used) {
   41d56:	884b      	ldrh	r3, [r1, #2]
   41d58:	b11a      	cbz	r2, 41d62 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   41d5a:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   41d5e:	804b      	strh	r3, [r1, #2]
}
   41d60:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   41d62:	f023 0301 	bic.w	r3, r3, #1
   41d66:	e7fa      	b.n	41d5e <set_chunk_used+0x26>

00041d68 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   41d68:	0053      	lsls	r3, r2, #1
   41d6a:	2201      	movs	r2, #1
   41d6c:	f7ff bfd3 	b.w	41d16 <chunk_set>

00041d70 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   41d70:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   41d72:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   41d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41d78:	bf2c      	ite	cs
   41d7a:	2008      	movcs	r0, #8
   41d7c:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   41d7e:	4408      	add	r0, r1
}
   41d80:	08c0      	lsrs	r0, r0, #3
   41d82:	4770      	bx	lr

00041d84 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   41d84:	460a      	mov	r2, r1
   41d86:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   41d88:	2101      	movs	r1, #1
   41d8a:	f7ff fff1 	bl	41d70 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   41d8e:	3201      	adds	r2, #1
   41d90:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   41d92:	fab0 f080 	clz	r0, r0
}
   41d96:	f1c0 001f 	rsb	r0, r0, #31
   41d9a:	bd08      	pop	{r3, pc}

00041d9c <merge_chunks>:
{
   41d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41da0:	4616      	mov	r6, r2
   41da2:	4604      	mov	r4, r0
   41da4:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   41da6:	f7ff ffc1 	bl	41d2c <chunk_size>
   41daa:	4631      	mov	r1, r6
   41dac:	4605      	mov	r5, r0
   41dae:	4620      	mov	r0, r4
   41db0:	f7ff ffbc 	bl	41d2c <chunk_size>
   41db4:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   41db6:	462a      	mov	r2, r5
   41db8:	4639      	mov	r1, r7
   41dba:	4620      	mov	r0, r4
   41dbc:	f7ff ffd4 	bl	41d68 <set_chunk_size>
	return c + chunk_size(h, c);
   41dc0:	4631      	mov	r1, r6
   41dc2:	4620      	mov	r0, r4
   41dc4:	f7ff ffb2 	bl	41d2c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   41dc8:	462b      	mov	r3, r5
   41dca:	1831      	adds	r1, r6, r0
   41dcc:	2200      	movs	r2, #0
   41dce:	4620      	mov	r0, r4
}
   41dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41dd4:	f7ff bf9f 	b.w	41d16 <chunk_set>

00041dd8 <split_chunks>:
{
   41dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41ddc:	4614      	mov	r4, r2
   41dde:	460f      	mov	r7, r1
   41de0:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   41de2:	f7ff ffa3 	bl	41d2c <chunk_size>
	size_t lsz = rc - lc;
   41de6:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   41dea:	1b3e      	subs	r6, r7, r4
   41dec:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   41dee:	4642      	mov	r2, r8
   41df0:	4639      	mov	r1, r7
   41df2:	4628      	mov	r0, r5
   41df4:	f7ff ffb8 	bl	41d68 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   41df8:	4632      	mov	r2, r6
   41dfa:	4621      	mov	r1, r4
   41dfc:	4628      	mov	r0, r5
   41dfe:	f7ff ffb3 	bl	41d68 <set_chunk_size>
   41e02:	4643      	mov	r3, r8
   41e04:	2200      	movs	r2, #0
   41e06:	4621      	mov	r1, r4
   41e08:	4628      	mov	r0, r5
   41e0a:	f7ff ff84 	bl	41d16 <chunk_set>
	return c + chunk_size(h, c);
   41e0e:	4621      	mov	r1, r4
   41e10:	4628      	mov	r0, r5
   41e12:	f7ff ff8b 	bl	41d2c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   41e16:	4633      	mov	r3, r6
   41e18:	1821      	adds	r1, r4, r0
   41e1a:	2200      	movs	r2, #0
   41e1c:	4628      	mov	r0, r5
}
   41e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41e22:	f7ff bf78 	b.w	41d16 <chunk_set>

00041e26 <free_list_remove_bidx>:
{
   41e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41e2a:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   41e2c:	2203      	movs	r2, #3
   41e2e:	460e      	mov	r6, r1
   41e30:	4604      	mov	r4, r0
   41e32:	f7ff ff65 	bl	41d00 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   41e36:	4286      	cmp	r6, r0
   41e38:	4605      	mov	r5, r0
   41e3a:	f108 0704 	add.w	r7, r8, #4
   41e3e:	d10b      	bne.n	41e58 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   41e40:	2301      	movs	r3, #1
   41e42:	fa03 f208 	lsl.w	r2, r3, r8
   41e46:	68e3      	ldr	r3, [r4, #12]
   41e48:	ea23 0302 	bic.w	r3, r3, r2
   41e4c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   41e4e:	2300      	movs	r3, #0
   41e50:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   41e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   41e58:	4631      	mov	r1, r6
   41e5a:	2202      	movs	r2, #2
   41e5c:	4620      	mov	r0, r4
   41e5e:	f7ff ff4f 	bl	41d00 <chunk_field>
   41e62:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   41e64:	462b      	mov	r3, r5
   41e66:	4601      	mov	r1, r0
		b->next = second;
   41e68:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   41e6c:	4620      	mov	r0, r4
   41e6e:	2203      	movs	r2, #3
   41e70:	f7ff ff51 	bl	41d16 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   41e74:	4633      	mov	r3, r6
   41e76:	4629      	mov	r1, r5
   41e78:	4620      	mov	r0, r4
}
   41e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41e7e:	2202      	movs	r2, #2
   41e80:	f7ff bf49 	b.w	41d16 <chunk_set>

00041e84 <free_list_remove>:
{
   41e84:	b538      	push	{r3, r4, r5, lr}
   41e86:	4604      	mov	r4, r0
   41e88:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   41e8a:	f7ff ff4f 	bl	41d2c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   41e8e:	68a3      	ldr	r3, [r4, #8]
   41e90:	4601      	mov	r1, r0
   41e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41e96:	d301      	bcc.n	41e9c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   41e98:	2801      	cmp	r0, #1
   41e9a:	d009      	beq.n	41eb0 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   41e9c:	4620      	mov	r0, r4
   41e9e:	f7ff ff71 	bl	41d84 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   41ea2:	4629      	mov	r1, r5
   41ea4:	4602      	mov	r2, r0
   41ea6:	4620      	mov	r0, r4
}
   41ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   41eac:	f7ff bfbb 	b.w	41e26 <free_list_remove_bidx>
}
   41eb0:	bd38      	pop	{r3, r4, r5, pc}

00041eb2 <alloc_chunk>:
{
   41eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41eb6:	4604      	mov	r4, r0
   41eb8:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   41eba:	f7ff ff63 	bl	41d84 <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   41ebe:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   41ec0:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   41ec2:	4620      	mov	r0, r4
   41ec4:	f7ff ff5e 	bl	41d84 <bucket_idx>
   41ec8:	42b0      	cmp	r0, r6
   41eca:	da03      	bge.n	41ed4 <alloc_chunk+0x22>
		return 0;
   41ecc:	2500      	movs	r5, #0
}
   41ece:	4628      	mov	r0, r5
   41ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   41ed4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   41ed8:	f8d7 9010 	ldr.w	r9, [r7, #16]
   41edc:	f1b9 0f00 	cmp.w	r9, #0
   41ee0:	d019      	beq.n	41f16 <alloc_chunk+0x64>
   41ee2:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   41ee6:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   41ee8:	4620      	mov	r0, r4
   41eea:	4629      	mov	r1, r5
   41eec:	f7ff ff1e 	bl	41d2c <chunk_size>
   41ef0:	4550      	cmp	r0, sl
   41ef2:	d305      	bcc.n	41f00 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   41ef4:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   41ef6:	4629      	mov	r1, r5
   41ef8:	4620      	mov	r0, r4
   41efa:	f7ff ff94 	bl	41e26 <free_list_remove_bidx>
		return c;
   41efe:	e7e6      	b.n	41ece <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   41f00:	2203      	movs	r2, #3
   41f02:	4629      	mov	r1, r5
   41f04:	4620      	mov	r0, r4
   41f06:	f7ff fefb 	bl	41d00 <chunk_field>
		} while (--i && b->next != first);
   41f0a:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   41f0e:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   41f10:	d001      	beq.n	41f16 <alloc_chunk+0x64>
   41f12:	4581      	cmp	r9, r0
   41f14:	d1e7      	bne.n	41ee6 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   41f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   41f1a:	3601      	adds	r6, #1
   41f1c:	68e3      	ldr	r3, [r4, #12]
   41f1e:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0) {
   41f20:	401a      	ands	r2, r3
   41f22:	d0d3      	beq.n	41ecc <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   41f24:	fa92 f2a2 	rbit	r2, r2
   41f28:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   41f2c:	1d13      	adds	r3, r2, #4
   41f2e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   41f32:	e7e0      	b.n	41ef6 <alloc_chunk+0x44>

00041f34 <free_list_add>:
{
   41f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41f38:	4604      	mov	r4, r0
   41f3a:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   41f3c:	f7ff fef6 	bl	41d2c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   41f40:	68a3      	ldr	r3, [r4, #8]
   41f42:	4601      	mov	r1, r0
   41f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   41f48:	d301      	bcc.n	41f4e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   41f4a:	2801      	cmp	r0, #1
   41f4c:	d035      	beq.n	41fba <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   41f4e:	4620      	mov	r0, r4
   41f50:	f7ff ff18 	bl	41d84 <bucket_idx>
	if (b->next == 0) {
   41f54:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   41f58:	6916      	ldr	r6, [r2, #16]
   41f5a:	b99e      	cbnz	r6, 41f84 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   41f5c:	2301      	movs	r3, #1
   41f5e:	fa03 f000 	lsl.w	r0, r3, r0
   41f62:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   41f64:	4629      	mov	r1, r5
   41f66:	4303      	orrs	r3, r0
   41f68:	60e3      	str	r3, [r4, #12]
   41f6a:	4620      	mov	r0, r4
		b->next = c;
   41f6c:	6115      	str	r5, [r2, #16]
   41f6e:	462b      	mov	r3, r5
   41f70:	2202      	movs	r2, #2
   41f72:	f7ff fed0 	bl	41d16 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   41f76:	2203      	movs	r2, #3
   41f78:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   41f7a:	4620      	mov	r0, r4
}
   41f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   41f80:	f7ff bec9 	b.w	41d16 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   41f84:	2202      	movs	r2, #2
   41f86:	4631      	mov	r1, r6
   41f88:	4620      	mov	r0, r4
   41f8a:	f7ff feb9 	bl	41d00 <chunk_field>
   41f8e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   41f90:	4603      	mov	r3, r0
   41f92:	2202      	movs	r2, #2
   41f94:	4629      	mov	r1, r5
   41f96:	4620      	mov	r0, r4
   41f98:	f7ff febd 	bl	41d16 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   41f9c:	4633      	mov	r3, r6
   41f9e:	2203      	movs	r2, #3
   41fa0:	4629      	mov	r1, r5
   41fa2:	4620      	mov	r0, r4
   41fa4:	f7ff feb7 	bl	41d16 <chunk_set>
   41fa8:	2203      	movs	r2, #3
   41faa:	4639      	mov	r1, r7
   41fac:	462b      	mov	r3, r5
   41fae:	4620      	mov	r0, r4
   41fb0:	f7ff feb1 	bl	41d16 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   41fb4:	2202      	movs	r2, #2
   41fb6:	4631      	mov	r1, r6
   41fb8:	e7df      	b.n	41f7a <free_list_add+0x46>
   41fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00041fbe <sys_heap_alloc>:
{
   41fbe:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   41fc0:	b909      	cbnz	r1, 41fc6 <sys_heap_alloc+0x8>
		return NULL;
   41fc2:	2000      	movs	r0, #0
}
   41fc4:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   41fc6:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   41fc8:	4620      	mov	r0, r4
   41fca:	f7ff fed1 	bl	41d70 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   41fce:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   41fd0:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   41fd2:	4620      	mov	r0, r4
   41fd4:	f7ff ff6d 	bl	41eb2 <alloc_chunk>
	if (c == 0) {
   41fd8:	4605      	mov	r5, r0
   41fda:	2800      	cmp	r0, #0
   41fdc:	d0f1      	beq.n	41fc2 <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   41fde:	4601      	mov	r1, r0
   41fe0:	4620      	mov	r0, r4
   41fe2:	f7ff fea3 	bl	41d2c <chunk_size>
   41fe6:	42b0      	cmp	r0, r6
   41fe8:	d909      	bls.n	41ffe <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   41fea:	442e      	add	r6, r5
   41fec:	4629      	mov	r1, r5
   41fee:	4620      	mov	r0, r4
   41ff0:	4632      	mov	r2, r6
   41ff2:	f7ff fef1 	bl	41dd8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   41ff6:	4631      	mov	r1, r6
   41ff8:	4620      	mov	r0, r4
   41ffa:	f7ff ff9b 	bl	41f34 <free_list_add>
	set_chunk_used(h, c, true);
   41ffe:	4620      	mov	r0, r4
   42000:	2201      	movs	r2, #1
   42002:	4629      	mov	r1, r5
   42004:	f7ff fe98 	bl	41d38 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   42008:	68a3      	ldr	r3, [r4, #8]
   4200a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4200e:	bf2c      	ite	cs
   42010:	2008      	movcs	r0, #8
   42012:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   42014:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   42018:	4420      	add	r0, r4
	return chunk_mem(h, c);
   4201a:	e7d3      	b.n	41fc4 <sys_heap_alloc+0x6>

0004201c <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   4201c:	4040      	eors	r0, r0
   4201e:	f380 8811 	msr	BASEPRI, r0
   42022:	f04f 0004 	mov.w	r0, #4
   42026:	df02      	svc	2
}
   42028:	4770      	bx	lr

0004202a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   4202a:	4770      	bx	lr

0004202c <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   4202c:	f7f9 bd4e 	b.w	3bacc <SystemInit>

00042030 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   42030:	6843      	ldr	r3, [r0, #4]
}
   42032:	7958      	ldrb	r0, [r3, #5]
   42034:	4770      	bx	lr

00042036 <k_cycle_get_32_wrapper>:
   42036:	f7e4 bcb3 	b.w	269a0 <z_timer_cycle_get_32>

0004203a <dummy_timestamp>:
   4203a:	2000      	movs	r0, #0
   4203c:	4770      	bx	lr

0004203e <log_string_sync>:
{
   4203e:	b40e      	push	{r1, r2, r3}
   42040:	b503      	push	{r0, r1, lr}
   42042:	aa03      	add	r2, sp, #12
   42044:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   42048:	2300      	movs	r3, #0
	va_start(ap, fmt);
   4204a:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   4204c:	f7e2 fe3e 	bl	24ccc <log_generic>
}
   42050:	b002      	add	sp, #8
   42052:	f85d eb04 	ldr.w	lr, [sp], #4
   42056:	b003      	add	sp, #12
   42058:	4770      	bx	lr

0004205a <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   4205a:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   4205c:	f7e2 feac 	bl	24db8 <log_init>
	}

	return 0;
}
   42060:	2000      	movs	r0, #0
   42062:	bd08      	pop	{r3, pc}

00042064 <log_strdup>:
}
   42064:	4770      	bx	lr

00042066 <out_func>:
{
   42066:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   42068:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   4206c:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   4206e:	6852      	ldr	r2, [r2, #4]
   42070:	2101      	movs	r1, #1
   42072:	a801      	add	r0, sp, #4
   42074:	4798      	blx	r3
}
   42076:	2000      	movs	r0, #0
   42078:	b003      	add	sp, #12
   4207a:	f85d fb04 	ldr.w	pc, [sp], #4

0004207e <buffer_write>:
{
   4207e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42080:	4606      	mov	r6, r0
   42082:	460d      	mov	r5, r1
   42084:	4614      	mov	r4, r2
   42086:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   42088:	4621      	mov	r1, r4
   4208a:	4628      	mov	r0, r5
   4208c:	463a      	mov	r2, r7
   4208e:	47b0      	blx	r6
	} while (len != 0);
   42090:	1a24      	subs	r4, r4, r0
		buf += processed;
   42092:	4405      	add	r5, r0
	} while (len != 0);
   42094:	d1f8      	bne.n	42088 <buffer_write+0xa>
}
   42096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00042098 <log_output_flush>:
		     log_output->control_block->offset,
   42098:	6842      	ldr	r2, [r0, #4]
{
   4209a:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   4209c:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   420a0:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   420a2:	6881      	ldr	r1, [r0, #8]
   420a4:	6800      	ldr	r0, [r0, #0]
   420a6:	f7ff ffea 	bl	4207e <buffer_write>
	log_output->control_block->offset = 0;
   420aa:	2200      	movs	r2, #0
   420ac:	6863      	ldr	r3, [r4, #4]
   420ae:	601a      	str	r2, [r3, #0]
}
   420b0:	bd10      	pop	{r4, pc}

000420b2 <fcb_append_to_scratch>:
{
   420b2:	b538      	push	{r3, r4, r5, lr}
   420b4:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   420b6:	6a41      	ldr	r1, [r0, #36]	; 0x24
   420b8:	f000 fa0f 	bl	424da <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   420bc:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   420be:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   420c0:	4298      	cmp	r0, r3
   420c2:	d00f      	beq.n	420e4 <fcb_append_to_scratch+0x32>
	if (!sector) {
   420c4:	b170      	cbz	r0, 420e4 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   420c6:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   420c8:	4601      	mov	r1, r0
   420ca:	3201      	adds	r2, #1
   420cc:	b292      	uxth	r2, r2
   420ce:	4620      	mov	r0, r4
   420d0:	f000 f8b0 	bl	42234 <fcb_sector_hdr_init>
	if (rc) {
   420d4:	b928      	cbnz	r0, 420e2 <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   420d6:	2308      	movs	r3, #8
   420d8:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   420da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   420dc:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   420de:	3301      	adds	r3, #1
   420e0:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   420e2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   420e4:	f06f 001b 	mvn.w	r0, #27
   420e8:	e7fb      	b.n	420e2 <fcb_append_to_scratch+0x30>

000420ea <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   420ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   420ec:	b083      	sub	sp, #12
   420ee:	4604      	mov	r4, r0
   420f0:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   420f2:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   420f6:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   420f8:	1dd3      	adds	r3, r2, #7
   420fa:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   420fe:	ebad 0d03 	sub.w	sp, sp, r3
   42102:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   42104:	21ff      	movs	r1, #255	; 0xff
   42106:	4630      	mov	r0, r6
   42108:	f003 f8ae 	bl	45268 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   4210c:	4632      	mov	r2, r6
   4210e:	4629      	mov	r1, r5
   42110:	4620      	mov	r0, r4
   42112:	f000 f939 	bl	42388 <fcb_elem_crc8>
	if (rc) {
   42116:	b9b0      	cbnz	r0, 42146 <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   42118:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   4211c:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   4211e:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   42120:	bf82      	ittt	hi
   42122:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   42126:	18d2      	addhi	r2, r2, r3
   42128:	4258      	neghi	r0, r3
   4212a:	68a9      	ldr	r1, [r5, #8]
   4212c:	bf88      	it	hi
   4212e:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   42130:	9300      	str	r3, [sp, #0]
   42132:	440a      	add	r2, r1
   42134:	4633      	mov	r3, r6
   42136:	6829      	ldr	r1, [r5, #0]
   42138:	4620      	mov	r0, r4
   4213a:	f000 f821 	bl	42180 <fcb_flash_write>
	if (rc) {
   4213e:	2800      	cmp	r0, #0
		return -EIO;
   42140:	bf18      	it	ne
   42142:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   42146:	3704      	adds	r7, #4
   42148:	46bd      	mov	sp, r7
   4214a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004214c <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   4214c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   4214e:	b108      	cbz	r0, 42154 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   42150:	f000 bc42 	b.w	429d8 <flash_area_align>

	return align;
}
   42154:	4770      	bx	lr

00042156 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   42156:	b570      	push	{r4, r5, r6, lr}
   42158:	4614      	mov	r4, r2
   4215a:	461a      	mov	r2, r3
   4215c:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   4215e:	684d      	ldr	r5, [r1, #4]
   42160:	18e6      	adds	r6, r4, r3
   42162:	42ae      	cmp	r6, r5
   42164:	d809      	bhi.n	4217a <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   42166:	6b80      	ldr	r0, [r0, #56]	; 0x38
   42168:	b120      	cbz	r0, 42174 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   4216a:	6809      	ldr	r1, [r1, #0]
   4216c:	4421      	add	r1, r4
   4216e:	f000 fbc7 	bl	42900 <flash_area_read>

	if (rc != 0) {
   42172:	b108      	cbz	r0, 42178 <fcb_flash_read+0x22>
		return -EIO;
   42174:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   42178:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4217a:	f06f 0015 	mvn.w	r0, #21
   4217e:	e7fb      	b.n	42178 <fcb_flash_read+0x22>

00042180 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   42180:	b570      	push	{r4, r5, r6, lr}
   42182:	4614      	mov	r4, r2
   42184:	461a      	mov	r2, r3
   42186:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   42188:	684d      	ldr	r5, [r1, #4]
   4218a:	18e6      	adds	r6, r4, r3
   4218c:	42ae      	cmp	r6, r5
   4218e:	d809      	bhi.n	421a4 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   42190:	6b80      	ldr	r0, [r0, #56]	; 0x38
   42192:	b120      	cbz	r0, 4219e <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   42194:	6809      	ldr	r1, [r1, #0]
   42196:	4421      	add	r1, r4
   42198:	f000 fbcf 	bl	4293a <flash_area_write>

	if (rc != 0) {
   4219c:	b108      	cbz	r0, 421a2 <fcb_flash_write+0x22>
		return -EIO;
   4219e:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   421a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   421a4:	f06f 0015 	mvn.w	r0, #21
   421a8:	e7fb      	b.n	421a2 <fcb_flash_write+0x22>

000421aa <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   421aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   421ac:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   421ae:	b120      	cbz	r0, 421ba <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   421b0:	e9d1 1200 	ldrd	r1, r2, [r1]
   421b4:	f000 fbea 	bl	4298c <flash_area_erase>

	if (rc != 0) {
   421b8:	b108      	cbz	r0, 421be <fcb_erase_sector+0x14>
		return -EIO;
   421ba:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   421be:	bd08      	pop	{r3, pc}

000421c0 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   421c0:	b538      	push	{r3, r4, r5, lr}
   421c2:	4605      	mov	r5, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   421c4:	2400      	movs	r4, #0
	fa = fcb->f_active.fe_sector;
   421c6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   421c8:	796b      	ldrb	r3, [r5, #5]
   421ca:	42a3      	cmp	r3, r4
   421cc:	dc01      	bgt.n	421d2 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   421ce:	4620      	mov	r0, r4
   421d0:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   421d2:	4628      	mov	r0, r5
   421d4:	f000 f981 	bl	424da <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   421d8:	6a2b      	ldr	r3, [r5, #32]
		fa = fcb_getnext_sector(fcb, fa);
   421da:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   421dc:	4283      	cmp	r3, r0
   421de:	d0f6      	beq.n	421ce <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   421e0:	3401      	adds	r4, #1
   421e2:	e7f1      	b.n	421c8 <fcb_free_sector_cnt+0x8>

000421e4 <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   421e4:	297f      	cmp	r1, #127	; 0x7f
   421e6:	d802      	bhi.n	421ee <fcb_put_len+0xa>
		buf[0] = len;
   421e8:	7001      	strb	r1, [r0, #0]
		return 1;
   421ea:	2001      	movs	r0, #1
   421ec:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   421ee:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   421f2:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   421f4:	bf9f      	itttt	ls
   421f6:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   421fa:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   421fc:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   421fe:	7041      	strbls	r1, [r0, #1]
		return 2;
   42200:	bf94      	ite	ls
   42202:	2002      	movls	r0, #2
	} else {
		return -EINVAL;
   42204:	f06f 0015 	mvnhi.w	r0, #21
	}
}
   42208:	4770      	bx	lr

0004220a <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   4220a:	7803      	ldrb	r3, [r0, #0]
   4220c:	061a      	lsls	r2, r3, #24
   4220e:	d50b      	bpl.n	42228 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   42210:	7842      	ldrb	r2, [r0, #1]
   42212:	ea03 0002 	and.w	r0, r3, r2
   42216:	28ff      	cmp	r0, #255	; 0xff
   42218:	d009      	beq.n	4222e <fcb_get_len+0x24>
			return -ENOTSUP;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   4221a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   4221e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   42222:	800b      	strh	r3, [r1, #0]
		rc = 2;
   42224:	2002      	movs	r0, #2
   42226:	4770      	bx	lr
	} else {
		*len = buf[0];
   42228:	800b      	strh	r3, [r1, #0]
		rc = 1;
   4222a:	2001      	movs	r0, #1
   4222c:	4770      	bx	lr
			return -ENOTSUP;
   4222e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}
	return rc;
}
   42232:	4770      	bx	lr

00042234 <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   42234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   42236:	7903      	ldrb	r3, [r0, #4]
	fda.fd_magic = fcb->f_magic;
   42238:	6804      	ldr	r4, [r0, #0]
	fda.fd_ver = fcb->f_version;
   4223a:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   4223e:	23ff      	movs	r3, #255	; 0xff
   42240:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   42244:	2308      	movs	r3, #8
	fda.fd_id = id;
   42246:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   4224a:	9300      	str	r3, [sp, #0]
   4224c:	2200      	movs	r2, #0
   4224e:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   42250:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   42252:	f7ff ff95 	bl	42180 <fcb_flash_write>
	if (rc != 0) {
   42256:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   42258:	bf18      	it	ne
   4225a:	f06f 0004 	mvnne.w	r0, #4
   4225e:	b004      	add	sp, #16
   42260:	bd10      	pop	{r4, pc}

00042262 <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   42262:	b530      	push	{r4, r5, lr}
   42264:	4605      	mov	r5, r0
   42266:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   42268:	4614      	mov	r4, r2
   4226a:	b902      	cbnz	r2, 4226e <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   4226c:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   4226e:	2308      	movs	r3, #8
   42270:	2200      	movs	r2, #0
   42272:	9300      	str	r3, [sp, #0]
   42274:	4628      	mov	r0, r5
   42276:	4623      	mov	r3, r4
   42278:	f7ff ff6d 	bl	42156 <fcb_flash_read>
	if (rc) {
   4227c:	b950      	cbnz	r0, 42294 <fcb_sector_hdr_read+0x32>
		return -EIO;
	}
	if (fdap->fd_magic == 0xffffffff) {
   4227e:	6823      	ldr	r3, [r4, #0]
   42280:	1c5a      	adds	r2, r3, #1
   42282:	d005      	beq.n	42290 <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   42284:	682a      	ldr	r2, [r5, #0]
		return -ENOMSG;
   42286:	4293      	cmp	r3, r2
   42288:	bf0c      	ite	eq
   4228a:	2001      	moveq	r0, #1
   4228c:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   42290:	b005      	add	sp, #20
   42292:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   42294:	f06f 0004 	mvn.w	r0, #4
   42298:	e7fa      	b.n	42290 <fcb_sector_hdr_read+0x2e>

0004229a <fcb_init>:
{
   4229a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   4229e:	688b      	ldr	r3, [r1, #8]
{
   422a0:	b085      	sub	sp, #20
   422a2:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   422a4:	b92b      	cbnz	r3, 422b2 <fcb_init+0x18>
		return -EINVAL;
   422a6:	f06f 0515 	mvn.w	r5, #21
}
   422aa:	4628      	mov	r0, r5
   422ac:	b005      	add	sp, #20
   422ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   422b2:	794b      	ldrb	r3, [r1, #5]
   422b4:	798a      	ldrb	r2, [r1, #6]
   422b6:	1a9b      	subs	r3, r3, r2
   422b8:	2b00      	cmp	r3, #0
   422ba:	ddf4      	ble.n	422a6 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   422bc:	3138      	adds	r1, #56	; 0x38
   422be:	b2c0      	uxtb	r0, r0
   422c0:	f7e3 fa7a 	bl	257b8 <flash_area_open>
	if (rc != 0) {
   422c4:	4606      	mov	r6, r0
   422c6:	2800      	cmp	r0, #0
   422c8:	d1ed      	bne.n	422a6 <fcb_init+0xc>
	align = fcb_get_align(fcb);
   422ca:	4620      	mov	r0, r4
   422cc:	f7ff ff3e 	bl	4214c <fcb_get_align>
	if (align == 0U) {
   422d0:	4683      	mov	fp, r0
   422d2:	2800      	cmp	r0, #0
   422d4:	d0e7      	beq.n	422a6 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   422d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   422da:	46b2      	mov	sl, r6
   422dc:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   422de:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   422e0:	7962      	ldrb	r2, [r4, #5]
   422e2:	42b2      	cmp	r2, r6
   422e4:	dc24      	bgt.n	42330 <fcb_init+0x96>
	if (oldest < 0) {
   422e6:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   422ea:	d149      	bne.n	42380 <fcb_init+0xe6>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   422ec:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   422ee:	2200      	movs	r2, #0
   422f0:	4639      	mov	r1, r7
   422f2:	4620      	mov	r0, r4
   422f4:	f7ff ff9e 	bl	42234 <fcb_sector_hdr_init>
		if (rc) {
   422f8:	4605      	mov	r5, r0
   422fa:	2800      	cmp	r0, #0
   422fc:	d1d5      	bne.n	422aa <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   422fe:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   42300:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   42302:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   42306:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   4230a:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   4230c:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   4230e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   42312:	4631      	mov	r1, r6
   42314:	4620      	mov	r0, r4
   42316:	f000 f8bd 	bl	42494 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   4231a:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   4231e:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   42320:	d030      	beq.n	42384 <fcb_init+0xea>
		if (rc != 0) {
   42322:	2800      	cmp	r0, #0
   42324:	d0f5      	beq.n	42312 <fcb_init+0x78>
	return z_impl_k_mutex_init(mutex);
   42326:	f104 000c 	add.w	r0, r4, #12
   4232a:	f002 fdba 	bl	44ea2 <z_impl_k_mutex_init>
   4232e:	e7bc      	b.n	422aa <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   42330:	68a2      	ldr	r2, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   42332:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   42334:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   42338:	4649      	mov	r1, r9
   4233a:	aa02      	add	r2, sp, #8
   4233c:	9301      	str	r3, [sp, #4]
   4233e:	f7ff ff90 	bl	42262 <fcb_sector_hdr_read>
		if (rc < 0) {
   42342:	1e05      	subs	r5, r0, #0
   42344:	dbb1      	blt.n	422aa <fcb_init+0x10>
		if (rc == 0) {
   42346:	9b01      	ldr	r3, [sp, #4]
   42348:	d008      	beq.n	4235c <fcb_init+0xc2>
		if (oldest < 0) {
   4234a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   4234e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   42352:	d105      	bne.n	42360 <fcb_init+0xc6>
			oldest = newest = fda.fd_id;
   42354:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   42356:	46ca      	mov	sl, r9
   42358:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   4235a:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   4235c:	3601      	adds	r6, #1
   4235e:	e7bf      	b.n	422e0 <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   42360:	b215      	sxth	r5, r2
   42362:	b218      	sxth	r0, r3
   42364:	1a28      	subs	r0, r5, r0
   42366:	2800      	cmp	r0, #0
   42368:	dd02      	ble.n	42370 <fcb_init+0xd6>
			newest = fda.fd_id;
   4236a:	4613      	mov	r3, r2
			newest_sector = sector;
   4236c:	46ca      	mov	sl, r9
   4236e:	e7f5      	b.n	4235c <fcb_init+0xc2>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   42370:	fa0f f188 	sxth.w	r1, r8
   42374:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   42376:	2900      	cmp	r1, #0
   42378:	bfc4      	itt	gt
   4237a:	4690      	movgt	r8, r2
   4237c:	464f      	movgt	r7, r9
   4237e:	e7ed      	b.n	4235c <fcb_init+0xc2>
   42380:	461d      	mov	r5, r3
   42382:	e7bd      	b.n	42300 <fcb_init+0x66>
			rc = 0;
   42384:	2500      	movs	r5, #0
   42386:	e7ce      	b.n	42326 <fcb_init+0x8c>

00042388 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   42388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4238c:	460c      	mov	r4, r1
   4238e:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   42390:	e9d1 1200 	ldrd	r1, r2, [r1]
   42394:	684b      	ldr	r3, [r1, #4]
   42396:	1c95      	adds	r5, r2, #2
   42398:	429d      	cmp	r5, r3
{
   4239a:	b08c      	sub	sp, #48	; 0x30
   4239c:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   4239e:	d84b      	bhi.n	42438 <fcb_elem_crc8+0xb0>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   423a0:	2302      	movs	r3, #2
   423a2:	9300      	str	r3, [sp, #0]
   423a4:	ab04      	add	r3, sp, #16
   423a6:	f7ff fed6 	bl	42156 <fcb_flash_read>
	if (rc) {
   423aa:	b120      	cbz	r0, 423b6 <fcb_elem_crc8+0x2e>
		return -EIO;
   423ac:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   423b0:	b00c      	add	sp, #48	; 0x30
   423b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   423b6:	f10d 010e 	add.w	r1, sp, #14
   423ba:	a804      	add	r0, sp, #16
   423bc:	f7ff ff25 	bl	4220a <fcb_get_len>
	if (cnt < 0) {
   423c0:	2800      	cmp	r0, #0
   423c2:	dbf5      	blt.n	423b0 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   423c4:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   423c8:	b283      	uxth	r3, r0
   423ca:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   423cc:	bf84      	itt	hi
   423ce:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   423d2:	195b      	addhi	r3, r3, r5
   423d4:	6861      	ldr	r1, [r4, #4]
   423d6:	bf84      	itt	hi
   423d8:	4252      	neghi	r2, r2
   423da:	4013      	andhi	r3, r2
   423dc:	440b      	add	r3, r1
   423de:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   423e0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   423e4:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   423e6:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   423e8:	a904      	add	r1, sp, #16
   423ea:	20ff      	movs	r0, #255	; 0xff
   423ec:	f7e1 fe34 	bl	24058 <crc8_ccitt>
   423f0:	4682      	mov	sl, r0
	off = loc->fe_data_off;
   423f2:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   423f4:	f8bd 900e 	ldrh.w	r9, [sp, #14]
   423f8:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   423fa:	454d      	cmp	r5, r9
   423fc:	d303      	bcc.n	42406 <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   423fe:	f887 a000 	strb.w	sl, [r7]
	return 0;
   42402:	2000      	movs	r0, #0
   42404:	e7d4      	b.n	423b0 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   42406:	eba9 0805 	sub.w	r8, r9, r5
   4240a:	f1b8 0f20 	cmp.w	r8, #32
   4240e:	bf28      	it	cs
   42410:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   42414:	ab04      	add	r3, sp, #16
   42416:	f8cd 8000 	str.w	r8, [sp]
   4241a:	462a      	mov	r2, r5
   4241c:	6821      	ldr	r1, [r4, #0]
   4241e:	4630      	mov	r0, r6
   42420:	f7ff fe99 	bl	42156 <fcb_flash_read>
		if (rc) {
   42424:	2800      	cmp	r0, #0
   42426:	d1c1      	bne.n	423ac <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   42428:	4650      	mov	r0, sl
   4242a:	4642      	mov	r2, r8
   4242c:	a904      	add	r1, sp, #16
   4242e:	f7e1 fe13 	bl	24058 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   42432:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   42434:	4682      	mov	sl, r0
   42436:	e7e0      	b.n	423fa <fcb_elem_crc8+0x72>
		return -ENOTSUP;
   42438:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4243c:	e7b8      	b.n	423b0 <fcb_elem_crc8+0x28>

0004243e <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   4243e:	b530      	push	{r4, r5, lr}
   42440:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   42442:	f10d 020e 	add.w	r2, sp, #14
{
   42446:	4605      	mov	r5, r0
   42448:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   4244a:	f7ff ff9d 	bl	42388 <fcb_elem_crc8>
	if (rc) {
   4244e:	b9e0      	cbnz	r0, 4248a <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   42450:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   42454:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   42456:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   42458:	bf81      	itttt	hi
   4245a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   4245e:	18d2      	addhi	r2, r2, r3
   42460:	425b      	neghi	r3, r3
   42462:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   42464:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   42466:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   42468:	9300      	str	r3, [sp, #0]
   4246a:	440a      	add	r2, r1
   4246c:	f10d 030f 	add.w	r3, sp, #15
   42470:	6821      	ldr	r1, [r4, #0]
   42472:	4628      	mov	r0, r5
   42474:	f7ff fe6f 	bl	42156 <fcb_flash_read>
	if (rc) {
   42478:	b948      	cbnz	r0, 4248e <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   4247a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   4247e:	f89d 300e 	ldrb.w	r3, [sp, #14]
   42482:	429a      	cmp	r2, r3
		return -EBADMSG;
   42484:	bf18      	it	ne
   42486:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   4248a:	b005      	add	sp, #20
   4248c:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   4248e:	f06f 0004 	mvn.w	r0, #4
   42492:	e7fa      	b.n	4248a <fcb_elem_info+0x4c>

00042494 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   42494:	b538      	push	{r3, r4, r5, lr}
   42496:	4604      	mov	r4, r0
   42498:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   4249a:	f7ff ffd0 	bl	4243e <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   4249e:	b110      	cbz	r0, 424a6 <fcb_getnext_in_sector+0x12>
   424a0:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   424a4:	d118      	bne.n	424d8 <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   424a6:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   424aa:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   424ac:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   424ae:	bf88      	it	hi
   424b0:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
			loc->fe_elem_off = loc->fe_data_off +
   424b4:	68aa      	ldr	r2, [r5, #8]
   424b6:	bf82      	ittt	hi
   424b8:	185b      	addhi	r3, r3, r1
   424ba:	4248      	neghi	r0, r1
   424bc:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   424be:	2901      	cmp	r1, #1
   424c0:	4413      	add	r3, r2
		return len;
   424c2:	bf92      	itee	ls
   424c4:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   424c6:	424a      	neghi	r2, r1
   424c8:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   424ca:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   424cc:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   424ce:	4629      	mov	r1, r5
   424d0:	4620      	mov	r0, r4
   424d2:	f7ff ffb4 	bl	4243e <fcb_elem_info>
			if (rc != -EBADMSG) {
   424d6:	e7e3      	b.n	424a0 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   424d8:	bd38      	pop	{r3, r4, r5, pc}

000424da <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   424da:	6882      	ldr	r2, [r0, #8]
   424dc:	7943      	ldrb	r3, [r0, #5]
	sector++;
   424de:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   424e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   424e4:	4299      	cmp	r1, r3
   424e6:	bf34      	ite	cc
   424e8:	4608      	movcc	r0, r1
   424ea:	4610      	movcs	r0, r2
   424ec:	4770      	bx	lr

000424ee <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   424ee:	680b      	ldr	r3, [r1, #0]
{
   424f0:	b570      	push	{r4, r5, r6, lr}
   424f2:	4605      	mov	r5, r0
   424f4:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   424f6:	b90b      	cbnz	r3, 424fc <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   424f8:	6a03      	ldr	r3, [r0, #32]
   424fa:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   424fc:	6863      	ldr	r3, [r4, #4]
   424fe:	b95b      	cbnz	r3, 42518 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   42500:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   42502:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   42504:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   42506:	4628      	mov	r0, r5
   42508:	f7ff ff99 	bl	4243e <fcb_elem_info>
		switch (rc) {
   4250c:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   42510:	d021      	beq.n	42556 <fcb_getnext_nolock+0x68>
   42512:	b950      	cbnz	r0, 4252a <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   42514:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   42516:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   42518:	4621      	mov	r1, r4
   4251a:	4628      	mov	r0, r5
   4251c:	f7ff ffba 	bl	42494 <fcb_getnext_in_sector>
		if (rc == 0) {
   42520:	2800      	cmp	r0, #0
   42522:	d0f7      	beq.n	42514 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   42524:	f110 0f86 	cmn.w	r0, #134	; 0x86
   42528:	d113      	bne.n	42552 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   4252a:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   4252c:	6821      	ldr	r1, [r4, #0]
   4252e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   42530:	4299      	cmp	r1, r3
   42532:	d019      	beq.n	42568 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   42534:	4628      	mov	r0, r5
   42536:	f7ff ffd0 	bl	424da <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   4253a:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   4253c:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   42540:	4628      	mov	r0, r5
   42542:	f7ff ff7c 	bl	4243e <fcb_elem_info>
			switch (rc) {
   42546:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   4254a:	d004      	beq.n	42556 <fcb_getnext_nolock+0x68>
   4254c:	2800      	cmp	r0, #0
   4254e:	d0e1      	beq.n	42514 <fcb_getnext_nolock+0x26>
   42550:	e7ec      	b.n	4252c <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   42552:	304d      	adds	r0, #77	; 0x4d
   42554:	d1de      	bne.n	42514 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   42556:	4621      	mov	r1, r4
   42558:	4628      	mov	r0, r5
   4255a:	f7ff ff9b 	bl	42494 <fcb_getnext_in_sector>
		if (rc == 0) {
   4255e:	2800      	cmp	r0, #0
   42560:	d0d8      	beq.n	42514 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   42562:	304d      	adds	r0, #77	; 0x4d
   42564:	d0f7      	beq.n	42556 <fcb_getnext_nolock+0x68>
next_sector:
   42566:	e7e0      	b.n	4252a <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   42568:	f06f 0085 	mvn.w	r0, #133	; 0x85
   4256c:	e7d3      	b.n	42516 <fcb_getnext_nolock+0x28>

0004256e <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   4256e:	b570      	push	{r4, r5, r6, lr}
   42570:	4604      	mov	r4, r0
   42572:	460e      	mov	r6, r1
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   42574:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   42578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   4257c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   42580:	4628      	mov	r0, r5
   42582:	f7fa fa2f 	bl	3c9e4 <z_impl_k_mutex_lock>
	if (rc) {
   42586:	b948      	cbnz	r0, 4259c <fcb_getnext+0x2e>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   42588:	4631      	mov	r1, r6
   4258a:	4620      	mov	r0, r4
   4258c:	f7ff ffaf 	bl	424ee <fcb_getnext_nolock>
   42590:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   42592:	4628      	mov	r0, r5
   42594:	f7fa fb24 	bl	3cbe0 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   42598:	4620      	mov	r0, r4
   4259a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4259c:	f06f 0415 	mvn.w	r4, #21
   425a0:	e7fa      	b.n	42598 <fcb_getnext+0x2a>

000425a2 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   425a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   425a4:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   425a6:	f100 060c 	add.w	r6, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   425aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   425ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   425b2:	4630      	mov	r0, r6
   425b4:	f7fa fa16 	bl	3c9e4 <z_impl_k_mutex_lock>
	if (rc) {
   425b8:	bb48      	cbnz	r0, 4260e <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   425ba:	6a21      	ldr	r1, [r4, #32]
   425bc:	4620      	mov	r0, r4
   425be:	f7ff fdf4 	bl	421aa <fcb_erase_sector>
	if (rc) {
   425c2:	bb08      	cbnz	r0, 42608 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   425c4:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   425c8:	4299      	cmp	r1, r3
   425ca:	d112      	bne.n	425f2 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   425cc:	4620      	mov	r0, r4
   425ce:	f7ff ff84 	bl	424da <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   425d2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   425d4:	4601      	mov	r1, r0
   425d6:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   425d8:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   425da:	b292      	uxth	r2, r2
   425dc:	4620      	mov	r0, r4
   425de:	f7ff fe29 	bl	42234 <fcb_sector_hdr_init>
		if (rc) {
   425e2:	4605      	mov	r5, r0
   425e4:	b958      	cbnz	r0, 425fe <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   425e6:	2308      	movs	r3, #8
   425e8:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   425ea:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   425ec:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   425ee:	3301      	adds	r3, #1
   425f0:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   425f2:	6a21      	ldr	r1, [r4, #32]
   425f4:	4620      	mov	r0, r4
   425f6:	f7ff ff70 	bl	424da <fcb_getnext_sector>
   425fa:	2500      	movs	r5, #0
   425fc:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   425fe:	4630      	mov	r0, r6
   42600:	f7fa faee 	bl	3cbe0 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   42604:	4628      	mov	r0, r5
   42606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   42608:	f06f 0504 	mvn.w	r5, #4
   4260c:	e7f7      	b.n	425fe <fcb_rotate+0x5c>
		return -EINVAL;
   4260e:	f06f 0515 	mvn.w	r5, #21
   42612:	e7f7      	b.n	42604 <fcb_rotate+0x62>

00042614 <boot_flag_read.constprop.6>:
	flash_area_close(fa);

	return rc;
}

static int boot_flag_read(int flag, uint8_t bank_id)
   42614:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	uint32_t offs;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(bank_id, &fa);
   42616:	2003      	movs	r0, #3
   42618:	a901      	add	r1, sp, #4
   4261a:	f7e3 f8cd 	bl	257b8 <flash_area_open>
	if (rc) {
   4261e:	b950      	cbnz	r0, 42636 <boot_flag_read.constprop.6+0x22>
		return rc;
	}

	rc = boot_flag_offs(flag, fa, &offs);
   42620:	9801      	ldr	r0, [sp, #4]
	if (rc != 0) {
		flash_area_close(fa);
		return rc;
	}

	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   42622:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   42624:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   42626:	f10d 0203 	add.w	r2, sp, #3
   4262a:	3918      	subs	r1, #24
   4262c:	f000 f968 	bl	42900 <flash_area_read>
	if (rc != 0) {
   42630:	b908      	cbnz	r0, 42636 <boot_flag_read.constprop.6+0x22>
		return rc;
	}

	return flag_val;
   42632:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   42636:	b003      	add	sp, #12
   42638:	f85d fb04 	ldr.w	pc, [sp], #4

0004263c <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, uint8_t bank_id)
   4263c:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   4263e:	a901      	add	r1, sp, #4
   42640:	f7e3 f8ba 	bl	257b8 <flash_area_open>
	if (rc) {
   42644:	4604      	mov	r4, r0
   42646:	b948      	cbnz	r0, 4265c <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   42648:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   4264a:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   4264c:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   4264e:	3918      	subs	r1, #24
   42650:	f7e2 fea2 	bl	25398 <boot_write_trailer_byte>
   42654:	4604      	mov	r4, r0
	flash_area_close(fa);
   42656:	9801      	ldr	r0, [sp, #4]
   42658:	f000 f951 	bl	428fe <flash_area_close>
}
   4265c:	4620      	mov	r0, r4
   4265e:	b002      	add	sp, #8
   42660:	bd10      	pop	{r4, pc}

00042662 <boot_is_img_confirmed>:
op_end:
	return rc;
}

bool boot_is_img_confirmed(void)
{
   42662:	b508      	push	{r3, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   42664:	f7ff ffd6 	bl	42614 <boot_flag_read.constprop.6>
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}
   42668:	1e43      	subs	r3, r0, #1
   4266a:	4258      	negs	r0, r3
   4266c:	4158      	adcs	r0, r3
   4266e:	bd08      	pop	{r3, pc}

00042670 <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   42670:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   42672:	f7ff ffcf 	bl	42614 <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   42676:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   42678:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   4267a:	2003      	movs	r0, #3
   4267c:	f7e3 f89c 	bl	257b8 <flash_area_open>
	if (rc) {
   42680:	2800      	cmp	r0, #0
		return -EINVAL;
   42682:	bf0c      	ite	eq
   42684:	23ff      	moveq	r3, #255	; 0xff
   42686:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   4268a:	42a3      	cmp	r3, r4
   4268c:	d104      	bne.n	42698 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   4268e:	2003      	movs	r0, #3
   42690:	f7ff ffd4 	bl	4263c <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   42694:	b002      	add	sp, #8
   42696:	bd10      	pop	{r4, pc}
		return 0;
   42698:	2000      	movs	r0, #0
   4269a:	e7fb      	b.n	42694 <boot_write_img_confirmed+0x24>

0004269c <sntp_init>:
{
   4269c:	b570      	push	{r4, r5, r6, lr}
   4269e:	460d      	mov	r5, r1
   426a0:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   426a2:	4604      	mov	r4, r0
   426a4:	b330      	cbz	r0, 426f4 <sntp_init+0x58>
   426a6:	b329      	cbz	r1, 426f4 <sntp_init+0x58>
   426a8:	2214      	movs	r2, #20
   426aa:	2100      	movs	r1, #0
   426ac:	f002 fddc 	bl	45268 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   426b0:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   426b2:	2211      	movs	r2, #17
   426b4:	2102      	movs	r1, #2
   426b6:	f7e2 fe97 	bl	253e8 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   426ba:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   426bc:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   426be:	da04      	bge.n	426ca <sntp_init+0x2e>
		return -errno;
   426c0:	f000 fb2b 	bl	42d1a <__errno>
   426c4:	6800      	ldr	r0, [r0, #0]
   426c6:	4240      	negs	r0, r0
}
   426c8:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   426ca:	4632      	mov	r2, r6
   426cc:	4629      	mov	r1, r5
   426ce:	f000 f843 	bl	42758 <z_impl_zsock_connect>
	if (ret < 0) {
   426d2:	2800      	cmp	r0, #0
   426d4:	68e0      	ldr	r0, [r4, #12]
   426d6:	da02      	bge.n	426de <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   426d8:	f000 f827 	bl	4272a <z_impl_zsock_close>
   426dc:	e7f0      	b.n	426c0 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   426de:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   426e0:	68a3      	ldr	r3, [r4, #8]
   426e2:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   426e6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   426ea:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   426ec:	8091      	strh	r1, [r2, #4]
	return 0;
   426ee:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   426f0:	60a3      	str	r3, [r4, #8]
	return 0;
   426f2:	e7e9      	b.n	426c8 <sntp_init+0x2c>
		return -EFAULT;
   426f4:	f06f 000d 	mvn.w	r0, #13
   426f8:	e7e6      	b.n	426c8 <sntp_init+0x2c>

000426fa <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   426fa:	b110      	cbz	r0, 42702 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   426fc:	68c0      	ldr	r0, [r0, #12]
   426fe:	f000 b814 	b.w	4272a <z_impl_zsock_close>
	}
}
   42702:	4770      	bx	lr

00042704 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   42704:	f7e2 bfe2 	b.w	256cc <socket_offload_getaddrinfo>

00042708 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   42708:	f7e3 b814 	b.w	25734 <socket_offload_freeaddrinfo>

0004270c <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   4270c:	b40c      	push	{r2, r3}
   4270e:	b513      	push	{r0, r1, r4, lr}
   42710:	460c      	mov	r4, r1
   42712:	aa04      	add	r2, sp, #16
   42714:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   42718:	68c3      	ldr	r3, [r0, #12]
   4271a:	4620      	mov	r0, r4
	va_start(args, request);
   4271c:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   4271e:	4798      	blx	r3
	va_end(args);

	return res;
}
   42720:	b002      	add	sp, #8
   42722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   42726:	b002      	add	sp, #8
   42728:	4770      	bx	lr

0004272a <z_impl_zsock_close>:
{
   4272a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   4272c:	a901      	add	r1, sp, #4
{
   4272e:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   42730:	f7e1 fcdc 	bl	240ec <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   42734:	b940      	cbnz	r0, 42748 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   42736:	f000 faf0 	bl	42d1a <__errno>
   4273a:	2309      	movs	r3, #9
		return -1;
   4273c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   42740:	6003      	str	r3, [r0, #0]
}
   42742:	4620      	mov	r0, r4
   42744:	b003      	add	sp, #12
   42746:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   42748:	9b01      	ldr	r3, [sp, #4]
   4274a:	689b      	ldr	r3, [r3, #8]
   4274c:	4798      	blx	r3
   4274e:	4604      	mov	r4, r0
	z_free_fd(sock);
   42750:	4628      	mov	r0, r5
   42752:	f7e1 fd1b 	bl	2418c <z_free_fd>
	return ret;
   42756:	e7f4      	b.n	42742 <z_impl_zsock_close+0x18>

00042758 <z_impl_zsock_connect>:
{
   42758:	b537      	push	{r0, r1, r2, r4, r5, lr}
   4275a:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   4275c:	a901      	add	r1, sp, #4
{
   4275e:	4615      	mov	r5, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   42760:	f7e1 fcc4 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   42764:	b110      	cbz	r0, 4276c <z_impl_zsock_connect+0x14>
   42766:	9b01      	ldr	r3, [sp, #4]
   42768:	695b      	ldr	r3, [r3, #20]
   4276a:	b93b      	cbnz	r3, 4277c <z_impl_zsock_connect+0x24>
   4276c:	f000 fad5 	bl	42d1a <__errno>
   42770:	2309      	movs	r3, #9
   42772:	6003      	str	r3, [r0, #0]
   42774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   42778:	b003      	add	sp, #12
   4277a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   4277c:	462a      	mov	r2, r5
   4277e:	4621      	mov	r1, r4
   42780:	4798      	blx	r3
   42782:	e7f9      	b.n	42778 <z_impl_zsock_connect+0x20>

00042784 <z_impl_zsock_sendto>:
{
   42784:	b5f0      	push	{r4, r5, r6, r7, lr}
   42786:	b085      	sub	sp, #20
   42788:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   4278a:	a903      	add	r1, sp, #12
{
   4278c:	4616      	mov	r6, r2
   4278e:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   42790:	f7e1 fcac 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   42794:	b110      	cbz	r0, 4279c <z_impl_zsock_sendto+0x18>
   42796:	9b03      	ldr	r3, [sp, #12]
   42798:	6a1c      	ldr	r4, [r3, #32]
   4279a:	b93c      	cbnz	r4, 427ac <z_impl_zsock_sendto+0x28>
   4279c:	f000 fabd 	bl	42d1a <__errno>
   427a0:	2309      	movs	r3, #9
   427a2:	6003      	str	r3, [r0, #0]
   427a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   427a8:	b005      	add	sp, #20
   427aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   427ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   427ae:	4632      	mov	r2, r6
   427b0:	9301      	str	r3, [sp, #4]
   427b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   427b4:	4629      	mov	r1, r5
   427b6:	9300      	str	r3, [sp, #0]
   427b8:	463b      	mov	r3, r7
   427ba:	47a0      	blx	r4
   427bc:	e7f4      	b.n	427a8 <z_impl_zsock_sendto+0x24>

000427be <z_impl_zsock_sendmsg>:
{
   427be:	b537      	push	{r0, r1, r2, r4, r5, lr}
   427c0:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   427c2:	a901      	add	r1, sp, #4
{
   427c4:	4615      	mov	r5, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   427c6:	f7e1 fc91 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   427ca:	b110      	cbz	r0, 427d2 <z_impl_zsock_sendmsg+0x14>
   427cc:	9b01      	ldr	r3, [sp, #4]
   427ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   427d0:	b93b      	cbnz	r3, 427e2 <z_impl_zsock_sendmsg+0x24>
   427d2:	f000 faa2 	bl	42d1a <__errno>
   427d6:	2309      	movs	r3, #9
   427d8:	6003      	str	r3, [r0, #0]
   427da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   427de:	b003      	add	sp, #12
   427e0:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   427e2:	462a      	mov	r2, r5
   427e4:	4621      	mov	r1, r4
   427e6:	4798      	blx	r3
   427e8:	e7f9      	b.n	427de <z_impl_zsock_sendmsg+0x20>

000427ea <z_impl_zsock_recvfrom>:
{
   427ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   427ec:	b085      	sub	sp, #20
   427ee:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   427f0:	a903      	add	r1, sp, #12
{
   427f2:	4616      	mov	r6, r2
   427f4:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   427f6:	f7e1 fc79 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   427fa:	b110      	cbz	r0, 42802 <z_impl_zsock_recvfrom+0x18>
   427fc:	9b03      	ldr	r3, [sp, #12]
   427fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   42800:	b93c      	cbnz	r4, 42812 <z_impl_zsock_recvfrom+0x28>
   42802:	f000 fa8a 	bl	42d1a <__errno>
   42806:	2309      	movs	r3, #9
   42808:	6003      	str	r3, [r0, #0]
   4280a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   4280e:	b005      	add	sp, #20
   42810:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   42812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   42814:	4632      	mov	r2, r6
   42816:	9301      	str	r3, [sp, #4]
   42818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4281a:	4629      	mov	r1, r5
   4281c:	9300      	str	r3, [sp, #0]
   4281e:	463b      	mov	r3, r7
   42820:	47a0      	blx	r4
   42822:	e7f4      	b.n	4280e <z_impl_zsock_recvfrom+0x24>

00042824 <z_impl_zsock_fcntl>:
{
   42824:	b537      	push	{r0, r1, r2, r4, r5, lr}
   42826:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   42828:	a901      	add	r1, sp, #4
{
   4282a:	4615      	mov	r5, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   4282c:	f7e1 fc5e 	bl	240ec <z_get_fd_obj_and_vtable>
	if (obj == NULL) {
   42830:	4601      	mov	r1, r0
   42832:	b938      	cbnz	r0, 42844 <z_impl_zsock_fcntl+0x20>
		errno = EBADF;
   42834:	f000 fa71 	bl	42d1a <__errno>
   42838:	2309      	movs	r3, #9
   4283a:	6003      	str	r3, [r0, #0]
		return -1;
   4283c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   42840:	b003      	add	sp, #12
   42842:	bd30      	pop	{r4, r5, pc}
	return z_fdtable_call_ioctl((const struct fd_op_vtable *)vtable,
   42844:	462b      	mov	r3, r5
   42846:	4622      	mov	r2, r4
   42848:	9801      	ldr	r0, [sp, #4]
   4284a:	f7ff ff5f 	bl	4270c <z_fdtable_call_ioctl>
   4284e:	e7f7      	b.n	42840 <z_impl_zsock_fcntl+0x1c>

00042850 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   42850:	b5f0      	push	{r4, r5, r6, r7, lr}
   42852:	b085      	sub	sp, #20
   42854:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   42856:	a903      	add	r1, sp, #12
{
   42858:	4616      	mov	r6, r2
   4285a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   4285c:	f7e1 fc46 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   42860:	b110      	cbz	r0, 42868 <z_impl_zsock_getsockopt+0x18>
   42862:	9b03      	ldr	r3, [sp, #12]
   42864:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   42866:	b93c      	cbnz	r4, 42878 <z_impl_zsock_getsockopt+0x28>
   42868:	f000 fa57 	bl	42d1a <__errno>
   4286c:	2309      	movs	r3, #9
   4286e:	6003      	str	r3, [r0, #0]
   42870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   42874:	b005      	add	sp, #20
   42876:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   42878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4287a:	4632      	mov	r2, r6
   4287c:	9300      	str	r3, [sp, #0]
   4287e:	4629      	mov	r1, r5
   42880:	463b      	mov	r3, r7
   42882:	47a0      	blx	r4
   42884:	e7f6      	b.n	42874 <z_impl_zsock_getsockopt+0x24>

00042886 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   42886:	b5f0      	push	{r4, r5, r6, r7, lr}
   42888:	b085      	sub	sp, #20
   4288a:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   4288c:	a903      	add	r1, sp, #12
{
   4288e:	4616      	mov	r6, r2
   42890:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   42892:	f7e1 fc2b 	bl	240ec <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   42896:	b110      	cbz	r0, 4289e <z_impl_zsock_setsockopt+0x18>
   42898:	9b03      	ldr	r3, [sp, #12]
   4289a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   4289c:	b93c      	cbnz	r4, 428ae <z_impl_zsock_setsockopt+0x28>
   4289e:	f000 fa3c 	bl	42d1a <__errno>
   428a2:	2309      	movs	r3, #9
   428a4:	6003      	str	r3, [r0, #0]
   428a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   428aa:	b005      	add	sp, #20
   428ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   428ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   428b0:	4632      	mov	r2, r6
   428b2:	9300      	str	r3, [sp, #0]
   428b4:	4629      	mov	r1, r5
   428b6:	463b      	mov	r3, r7
   428b8:	47a0      	blx	r4
   428ba:	e7f6      	b.n	428aa <z_impl_zsock_setsockopt+0x24>

000428bc <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   428bc:	6883      	ldr	r3, [r0, #8]
   428be:	68db      	ldr	r3, [r3, #12]
   428c0:	4718      	bx	r3

000428c2 <get_sectors_cb>:
{
   428c2:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   428c4:	6802      	ldr	r2, [r0, #0]
   428c6:	684c      	ldr	r4, [r1, #4]
   428c8:	42a2      	cmp	r2, r4
   428ca:	d316      	bcc.n	428fa <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   428cc:	688b      	ldr	r3, [r1, #8]
   428ce:	4423      	add	r3, r4
   428d0:	429a      	cmp	r2, r3
   428d2:	d206      	bcs.n	428e2 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   428d4:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   428d8:	42ab      	cmp	r3, r5
   428da:	d304      	bcc.n	428e6 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   428dc:	f06f 030b 	mvn.w	r3, #11
   428e0:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   428e2:	2000      	movs	r0, #0
   428e4:	e00a      	b.n	428fc <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   428e6:	68cd      	ldr	r5, [r1, #12]
   428e8:	1b12      	subs	r2, r2, r4
   428ea:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   428ee:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   428f0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   428f4:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   428f6:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   428f8:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   428fa:	2001      	movs	r0, #1
}
   428fc:	bd70      	pop	{r4, r5, r6, pc}

000428fe <flash_area_close>:
}
   428fe:	4770      	bx	lr

00042900 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   42900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42904:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   42906:	6883      	ldr	r3, [r0, #8]
{
   42908:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4290a:	428b      	cmp	r3, r1
{
   4290c:	460c      	mov	r4, r1
   4290e:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42910:	d30f      	bcc.n	42932 <flash_area_read+0x32>
   42912:	1872      	adds	r2, r6, r1
   42914:	4293      	cmp	r3, r2
   42916:	d30c      	bcc.n	42932 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   42918:	68c0      	ldr	r0, [r0, #12]
   4291a:	f7f9 fc13 	bl	3c144 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   4291e:	6869      	ldr	r1, [r5, #4]
   42920:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   42922:	6883      	ldr	r3, [r0, #8]
   42924:	463a      	mov	r2, r7
   42926:	681c      	ldr	r4, [r3, #0]
   42928:	4633      	mov	r3, r6
   4292a:	46a4      	mov	ip, r4
}
   4292c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   42930:	4760      	bx	ip
   42932:	f06f 0015 	mvn.w	r0, #21
   42936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004293a <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   4293a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4293e:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   42940:	6883      	ldr	r3, [r0, #8]
{
   42942:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42944:	428b      	cmp	r3, r1
{
   42946:	460d      	mov	r5, r1
   42948:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4294a:	d31c      	bcc.n	42986 <flash_area_write+0x4c>
   4294c:	eb08 0201 	add.w	r2, r8, r1
   42950:	4293      	cmp	r3, r2
   42952:	d318      	bcc.n	42986 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   42954:	68c0      	ldr	r0, [r0, #12]
   42956:	f7f9 fbf5 	bl	3c144 <z_impl_device_get_binding>
   4295a:	4606      	mov	r6, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&enable, K_SYSCALL_FLASH_WRITE_PROTECTION_SET);
	}
#endif
	compiler_barrier();
	return z_impl_flash_write_protection_set(dev, enable);
   4295c:	2100      	movs	r1, #0
   4295e:	f7ff ffad 	bl	428bc <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   42962:	4604      	mov	r4, r0
   42964:	b960      	cbnz	r0, 42980 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   42966:	6879      	ldr	r1, [r7, #4]
   42968:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   4296a:	68b3      	ldr	r3, [r6, #8]
   4296c:	464a      	mov	r2, r9
   4296e:	685c      	ldr	r4, [r3, #4]
   42970:	4630      	mov	r0, r6
   42972:	4643      	mov	r3, r8
   42974:	47a0      	blx	r4
   42976:	4604      	mov	r4, r0
   42978:	2101      	movs	r1, #1
   4297a:	4630      	mov	r0, r6
   4297c:	f7ff ff9e 	bl	428bc <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   42980:	4620      	mov	r0, r4
   42982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   42986:	f06f 0415 	mvn.w	r4, #21
   4298a:	e7f9      	b.n	42980 <flash_area_write+0x46>

0004298c <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   4298c:	6883      	ldr	r3, [r0, #8]
{
   4298e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   42992:	428b      	cmp	r3, r1
{
   42994:	4607      	mov	r7, r0
   42996:	460d      	mov	r5, r1
   42998:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4299a:	d31a      	bcc.n	429d2 <flash_area_erase+0x46>
   4299c:	440a      	add	r2, r1
   4299e:	4293      	cmp	r3, r2
   429a0:	d317      	bcc.n	429d2 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   429a2:	68c0      	ldr	r0, [r0, #12]
   429a4:	f7f9 fbce 	bl	3c144 <z_impl_device_get_binding>
   429a8:	4606      	mov	r6, r0
   429aa:	2100      	movs	r1, #0
   429ac:	f7ff ff86 	bl	428bc <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   429b0:	4604      	mov	r4, r0
   429b2:	b958      	cbnz	r0, 429cc <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   429b4:	6879      	ldr	r1, [r7, #4]
   429b6:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   429b8:	68b3      	ldr	r3, [r6, #8]
   429ba:	4642      	mov	r2, r8
   429bc:	689b      	ldr	r3, [r3, #8]
   429be:	4630      	mov	r0, r6
   429c0:	4798      	blx	r3
   429c2:	4604      	mov	r4, r0
   429c4:	2101      	movs	r1, #1
   429c6:	4630      	mov	r0, r6
   429c8:	f7ff ff78 	bl	428bc <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   429cc:	4620      	mov	r0, r4
   429ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   429d2:	f06f 0415 	mvn.w	r4, #21
   429d6:	e7f9      	b.n	429cc <flash_area_erase+0x40>

000429d8 <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   429d8:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   429da:	68c0      	ldr	r0, [r0, #12]
   429dc:	f7f9 fbb2 	bl	3c144 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   429e0:	6883      	ldr	r3, [r0, #8]
   429e2:	691b      	ldr	r3, [r3, #16]
   429e4:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   429e6:	7800      	ldrb	r0, [r0, #0]
   429e8:	bd08      	pop	{r3, pc}

000429ea <settings_name_steq>:
{
   429ea:	b530      	push	{r4, r5, lr}
	if (next) {
   429ec:	b10a      	cbz	r2, 429f2 <settings_name_steq+0x8>
		*next = NULL;
   429ee:	2300      	movs	r3, #0
   429f0:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   429f2:	b190      	cbz	r0, 42a1a <settings_name_steq+0x30>
   429f4:	b151      	cbz	r1, 42a0c <settings_name_steq+0x22>
   429f6:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   429f8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   429fc:	4603      	mov	r3, r0
   429fe:	f810 1b01 	ldrb.w	r1, [r0], #1
   42a02:	b15c      	cbz	r4, 42a1c <settings_name_steq+0x32>
   42a04:	428c      	cmp	r4, r1
   42a06:	d101      	bne.n	42a0c <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   42a08:	2c3d      	cmp	r4, #61	; 0x3d
   42a0a:	d1f5      	bne.n	429f8 <settings_name_steq+0xe>
	return 0;
   42a0c:	2000      	movs	r0, #0
   42a0e:	e004      	b.n	42a1a <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   42a10:	293d      	cmp	r1, #61	; 0x3d
   42a12:	d008      	beq.n	42a26 <settings_name_steq+0x3c>
   42a14:	fab1 f081 	clz	r0, r1
   42a18:	0940      	lsrs	r0, r0, #5
}
   42a1a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   42a1c:	292f      	cmp	r1, #47	; 0x2f
   42a1e:	d1f7      	bne.n	42a10 <settings_name_steq+0x26>
		if (next) {
   42a20:	b10a      	cbz	r2, 42a26 <settings_name_steq+0x3c>
			*next = name + 1;
   42a22:	3301      	adds	r3, #1
   42a24:	6013      	str	r3, [r2, #0]
		return 1;
   42a26:	2001      	movs	r0, #1
   42a28:	e7f7      	b.n	42a1a <settings_name_steq+0x30>

00042a2a <settings_line_len_calc>:
{
   42a2a:	b510      	push	{r4, lr}
   42a2c:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   42a2e:	f7da fc19 	bl	1d264 <strlen>
   42a32:	3401      	adds	r4, #1
}
   42a34:	4420      	add	r0, r4
   42a36:	bd10      	pop	{r4, pc}

00042a38 <settings_line_raw_read>:
{
   42a38:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   42a3a:	9c04      	ldr	r4, [sp, #16]
   42a3c:	9401      	str	r4, [sp, #4]
   42a3e:	2400      	movs	r4, #0
   42a40:	9400      	str	r4, [sp, #0]
   42a42:	f7e3 f8b1 	bl	25ba8 <settings_line_raw_read_until>
}
   42a46:	b002      	add	sp, #8
   42a48:	bd10      	pop	{r4, pc}

00042a4a <settings_line_read_cb>:
{
   42a4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42a4c:	6803      	ldr	r3, [r0, #0]
   42a4e:	9300      	str	r3, [sp, #0]
   42a50:	6840      	ldr	r0, [r0, #4]
   42a52:	ab03      	add	r3, sp, #12
   42a54:	f7ff fff0 	bl	42a38 <settings_line_raw_read>
	if (rc == 0) {
   42a58:	b918      	cbnz	r0, 42a62 <settings_line_read_cb+0x18>
		return len_read;
   42a5a:	9803      	ldr	r0, [sp, #12]
}
   42a5c:	b005      	add	sp, #20
   42a5e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   42a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42a66:	e7f9      	b.n	42a5c <settings_line_read_cb+0x12>

00042a68 <settings_line_name_read>:
{
   42a68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   42a6a:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   42a6c:	9301      	str	r3, [sp, #4]
   42a6e:	f10d 030f 	add.w	r3, sp, #15
   42a72:	9300      	str	r3, [sp, #0]
   42a74:	4613      	mov	r3, r2
   42a76:	460a      	mov	r2, r1
   42a78:	4601      	mov	r1, r0
   42a7a:	2000      	movs	r0, #0
	char const until_char = '=';
   42a7c:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   42a80:	f7e3 f892 	bl	25ba8 <settings_line_raw_read_until>
}
   42a84:	b004      	add	sp, #16
   42a86:	bd10      	pop	{r4, pc}

00042a88 <settings_line_dup_check_cb>:
{
   42a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42a8c:	4689      	mov	r9, r1
   42a8e:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   42a90:	6819      	ldr	r1, [r3, #0]
{
   42a92:	4692      	mov	sl, r2
   42a94:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   42a96:	f7da fbdb 	bl	1d250 <strcmp>
   42a9a:	4606      	mov	r6, r0
   42a9c:	b940      	cbnz	r0, 42ab0 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   42a9e:	4649      	mov	r1, r9
   42aa0:	4650      	mov	r0, sl
   42aa2:	f7e3 f93f 	bl	25d24 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   42aa6:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   42aa8:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   42aaa:	4283      	cmp	r3, r0
   42aac:	d004      	beq.n	42ab8 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   42aae:	60e6      	str	r6, [r4, #12]
}
   42ab0:	2000      	movs	r0, #0
   42ab2:	b008      	add	sp, #32
   42ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   42ab8:	b913      	cbnz	r3, 42ac0 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   42aba:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   42abc:	60e3      	str	r3, [r4, #12]
   42abe:	e7f7      	b.n	42ab0 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   42ac0:	f8d4 8004 	ldr.w	r8, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   42ac4:	2d10      	cmp	r5, #16
   42ac6:	462f      	mov	r7, r5
   42ac8:	bf28      	it	cs
   42aca:	2710      	movcs	r7, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42acc:	f8cd 9000 	str.w	r9, [sp]
   42ad0:	ab03      	add	r3, sp, #12
   42ad2:	463a      	mov	r2, r7
   42ad4:	a904      	add	r1, sp, #16
   42ad6:	eb0a 0006 	add.w	r0, sl, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   42ada:	9703      	str	r7, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   42adc:	f7ff ffac 	bl	42a38 <settings_line_raw_read>
		if (rc) {
   42ae0:	b970      	cbnz	r0, 42b00 <settings_line_dup_check_cb+0x78>
		if (len_read != exp_len) {
   42ae2:	9b03      	ldr	r3, [sp, #12]
   42ae4:	429f      	cmp	r7, r3
   42ae6:	d10b      	bne.n	42b00 <settings_line_dup_check_cb+0x78>
		rc = memcmp(val, buf, len_read);
   42ae8:	463a      	mov	r2, r7
   42aea:	a904      	add	r1, sp, #16
   42aec:	4640      	mov	r0, r8
   42aee:	f002 fb8d 	bl	4520c <memcmp>
		if (rc) {
   42af2:	b928      	cbnz	r0, 42b00 <settings_line_dup_check_cb+0x78>
		val += len_read;
   42af4:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   42af6:	1aed      	subs	r5, r5, r3
		val += len_read;
   42af8:	4498      	add	r8, r3
		off += len_read;
   42afa:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   42afc:	d1e2      	bne.n	42ac4 <settings_line_dup_check_cb+0x3c>
   42afe:	e7dc      	b.n	42aba <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   42b00:	2300      	movs	r3, #0
   42b02:	e7db      	b.n	42abc <settings_line_dup_check_cb+0x34>

00042b04 <get_len_cb>:
}
   42b04:	8980      	ldrh	r0, [r0, #12]
   42b06:	4770      	bx	lr

00042b08 <write_handler>:
{
   42b08:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   42b0a:	6805      	ldr	r5, [r0, #0]
   42b0c:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   42b0e:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   42b10:	4421      	add	r1, r4
   42b12:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   42b14:	4421      	add	r1, r4
}
   42b16:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   42b18:	f7ff bf0f 	b.w	4293a <flash_area_write>

00042b1c <read_handler>:
{
   42b1c:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   42b1e:	8984      	ldrh	r4, [r0, #12]
   42b20:	428c      	cmp	r4, r1
   42b22:	dd0f      	ble.n	42b44 <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   42b24:	681d      	ldr	r5, [r3, #0]
   42b26:	440d      	add	r5, r1
   42b28:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   42b2a:	bf84      	itt	hi
   42b2c:	1a64      	subhi	r4, r4, r1
   42b2e:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   42b30:	6804      	ldr	r4, [r0, #0]
   42b32:	6885      	ldr	r5, [r0, #8]
   42b34:	6824      	ldr	r4, [r4, #0]
   42b36:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   42b38:	4421      	add	r1, r4
   42b3a:	681b      	ldr	r3, [r3, #0]
   42b3c:	6900      	ldr	r0, [r0, #16]
}
   42b3e:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   42b40:	f7ff bede 	b.w	42900 <flash_area_read>
		*len = 0;
   42b44:	2000      	movs	r0, #0
}
   42b46:	bc30      	pop	{r4, r5}
		*len = 0;
   42b48:	6018      	str	r0, [r3, #0]
}
   42b4a:	4770      	bx	lr

00042b4c <uart_poll_out>:
	api->poll_out(dev, out_char);
   42b4c:	6883      	ldr	r3, [r0, #8]
   42b4e:	685b      	ldr	r3, [r3, #4]
   42b50:	4718      	bx	r3

00042b52 <debug_hook_out_nop>:
}
   42b52:	2000      	movs	r0, #0
   42b54:	4770      	bx	lr

00042b56 <set_starting_state>:
{
   42b56:	b510      	push	{r4, lr}
	__asm__ volatile(
   42b58:	f04f 0320 	mov.w	r3, #32
   42b5c:	f3ef 8211 	mrs	r2, BASEPRI
   42b60:	f383 8811 	msr	BASEPRI, r3
   42b64:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   42b68:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   42b6a:	f003 0407 	and.w	r4, r3, #7
   42b6e:	2c01      	cmp	r4, #1
   42b70:	d106      	bne.n	42b80 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   42b72:	6001      	str	r1, [r0, #0]
	int err = 0;
   42b74:	2000      	movs	r0, #0
	__asm__ volatile(
   42b76:	f382 8811 	msr	BASEPRI, r2
   42b7a:	f3bf 8f6f 	isb	sy
}
   42b7e:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   42b80:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   42b84:	428b      	cmp	r3, r1
		err = -EBUSY;
   42b86:	bf14      	ite	ne
   42b88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   42b8c:	f06f 000f 	mvneq.w	r0, #15
   42b90:	e7f1      	b.n	42b76 <set_starting_state+0x20>

00042b92 <set_on_state>:
	__asm__ volatile(
   42b92:	f04f 0320 	mov.w	r3, #32
   42b96:	f3ef 8211 	mrs	r2, BASEPRI
   42b9a:	f383 8811 	msr	BASEPRI, r3
   42b9e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   42ba2:	6803      	ldr	r3, [r0, #0]
   42ba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   42ba8:	f043 0302 	orr.w	r3, r3, #2
   42bac:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   42bae:	f382 8811 	msr	BASEPRI, r2
   42bb2:	f3bf 8f6f 	isb	sy
}
   42bb6:	4770      	bx	lr

00042bb8 <onoff_started_callback>:
	return &data->mgr[type];
   42bb8:	68c0      	ldr	r0, [r0, #12]
   42bba:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   42bbc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   42bc0:	2100      	movs	r1, #0
   42bc2:	4710      	bx	r2

00042bc4 <api_stop>:
	return stop(dev, subsys, CTX_API);
   42bc4:	2280      	movs	r2, #128	; 0x80
   42bc6:	f7e3 bb89 	b.w	262dc <stop>

00042bca <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   42bca:	4610      	mov	r0, r2
   42bcc:	f7fb bb1a 	b.w	3e204 <z_impl_k_sem_give>

00042bd0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   42bd0:	2000      	movs	r0, #0
   42bd2:	f7f9 b85b 	b.w	3bc8c <nrfx_clock_stop>

00042bd6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   42bd6:	2000      	movs	r0, #0
   42bd8:	f7f9 b802 	b.w	3bbe0 <nrfx_clock_start>

00042bdc <api_start>:
{
   42bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   42bde:	240c      	movs	r4, #12
   42be0:	b2c9      	uxtb	r1, r1
   42be2:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   42be4:	68c5      	ldr	r5, [r0, #12]
{
   42be6:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   42be8:	f104 0048 	add.w	r0, r4, #72	; 0x48
   42bec:	2180      	movs	r1, #128	; 0x80
   42bee:	4428      	add	r0, r5
{
   42bf0:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   42bf2:	f7ff ffb0 	bl	42b56 <set_starting_state>
	if (err < 0) {
   42bf6:	2800      	cmp	r0, #0
   42bf8:	db08      	blt.n	42c0c <api_start+0x30>
	subdata->cb = data->cb;
   42bfa:	687b      	ldr	r3, [r7, #4]
   42bfc:	4425      	add	r5, r4
   42bfe:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   42c00:	68bb      	ldr	r3, [r7, #8]
   42c02:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   42c04:	6873      	ldr	r3, [r6, #4]
   42c06:	591b      	ldr	r3, [r3, r4]
   42c08:	4798      	blx	r3
	return 0;
   42c0a:	2000      	movs	r0, #0
}
   42c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00042c0e <wdt_nrf_disable>:
}
   42c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42c12:	4770      	bx	lr

00042c14 <wdt_nrf_feed>:
{
   42c14:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   42c16:	68c3      	ldr	r3, [r0, #12]
   42c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   42c1c:	428b      	cmp	r3, r1
   42c1e:	db05      	blt.n	42c2c <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   42c20:	6840      	ldr	r0, [r0, #4]
   42c22:	b2c9      	uxtb	r1, r1
   42c24:	f7f9 fa1c 	bl	3c060 <nrfx_wdt_channel_feed>
	return 0;
   42c28:	2000      	movs	r0, #0
}
   42c2a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   42c2c:	f06f 0015 	mvn.w	r0, #21
   42c30:	e7fb      	b.n	42c2a <wdt_nrf_feed+0x16>

00042c32 <wdt_nrf_setup>:
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   42c32:	f011 0f01 	tst.w	r1, #1
{
   42c36:	b538      	push	{r3, r4, r5, lr}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   42c38:	bf0c      	ite	eq
   42c3a:	2309      	moveq	r3, #9
   42c3c:	2308      	movne	r3, #8
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   42c3e:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   42c40:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   42c42:	6825      	ldr	r5, [r4, #0]
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   42c44:	bf48      	it	mi
   42c46:	f003 0301 	andmi.w	r3, r3, #1
    p_reg->CONFIG = behaviour;
   42c4a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   42c4e:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   42c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   42c54:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   42c56:	2300      	movs	r3, #0
   42c58:	03c8      	lsls	r0, r1, #15
   42c5a:	0c49      	lsrs	r1, r1, #17
   42c5c:	f7da f92e 	bl	1cebc <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   42c60:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   42c64:	4620      	mov	r0, r4
   42c66:	f7f9 f97d 	bl	3bf64 <nrfx_wdt_enable>
}
   42c6a:	2000      	movs	r0, #0
   42c6c:	bd38      	pop	{r3, r4, r5, pc}

00042c6e <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   42c6e:	4770      	bx	lr

00042c70 <sys_clock_disable>:
   42c70:	4770      	bx	lr

00042c72 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   42c72:	2100      	movs	r1, #0
   42c74:	2001      	movs	r0, #1
   42c76:	f7e4 b873 	b.w	26d60 <z_arm_fatal_error>

00042c7a <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   42c7a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   42c7c:	f383 880b 	msr	PSPLIM, r3
}
   42c80:	4770      	bx	lr

00042c82 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   42c82:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   42c84:	6800      	ldr	r0, [r0, #0]
   42c86:	f7e4 b86b 	b.w	26d60 <z_arm_fatal_error>

00042c8a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   42c8a:	b508      	push	{r3, lr}
	handler();
   42c8c:	f7e4 f8fc 	bl	26e88 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   42c90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   42c94:	f7e4 bc4c 	b.w	27530 <z_arm_exc_exit>

00042c98 <mpu_configure_region>:
{
   42c98:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   42c9a:	684b      	ldr	r3, [r1, #4]
{
   42c9c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   42c9e:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   42ca0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   42ca4:	890d      	ldrh	r5, [r1, #8]
   42ca6:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   42ca8:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42caa:	f024 041f 	bic.w	r4, r4, #31
   42cae:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   42cb0:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42cb4:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   42cb6:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42cba:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   42cbe:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   42cc0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   42cc4:	9303      	str	r3, [sp, #12]
   42cc6:	f7e4 fccd 	bl	27664 <region_allocate_and_init>
}
   42cca:	b005      	add	sp, #20
   42ccc:	bd30      	pop	{r4, r5, pc}

00042cce <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   42cce:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   42cd2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   42cd6:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   42cd8:	bf08      	it	eq
   42cda:	f06f 0015 	mvneq.w	r0, #21
   42cde:	4770      	bx	lr

00042ce0 <_stdout_hook_default>:
}
   42ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42ce4:	4770      	bx	lr

00042ce6 <_stdin_hook_default>:
}
   42ce6:	2000      	movs	r0, #0
   42ce8:	4770      	bx	lr

00042cea <_read>:
{
   42cea:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   42cec:	4611      	mov	r1, r2
   42cee:	f7e4 be9f 	b.w	27a30 <z_impl_zephyr_read_stdin>

00042cf2 <_write>:
{
   42cf2:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   42cf4:	4611      	mov	r1, r2
   42cf6:	f7e4 beaf 	b.w	27a58 <z_impl_zephyr_write_stdout>

00042cfa <_close>:
   42cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42cfe:	4770      	bx	lr

00042d00 <_lseek>:
}
   42d00:	2000      	movs	r0, #0
   42d02:	4770      	bx	lr

00042d04 <_isatty>:
}
   42d04:	2001      	movs	r0, #1
   42d06:	4770      	bx	lr

00042d08 <_kill>:
}
   42d08:	2000      	movs	r0, #0
   42d0a:	4770      	bx	lr

00042d0c <_getpid>:
}
   42d0c:	2000      	movs	r0, #0
   42d0e:	4770      	bx	lr

00042d10 <_fstat>:
	st->st_mode = S_IFCHR;
   42d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   42d14:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   42d16:	604b      	str	r3, [r1, #4]
}
   42d18:	4770      	bx	lr

00042d1a <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   42d1a:	f7f9 ba3b 	b.w	3c194 <z_impl_z_errno>

00042d1e <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   42d1e:	b508      	push	{r3, lr}
	net_if_init();
   42d20:	f7e4 ff72 	bl	27c08 <net_if_init>
	net_if_post_init();
   42d24:	f7e4 ffa4 	bl	27c70 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   42d28:	2000      	movs	r0, #0
   42d2a:	bd08      	pop	{r3, pc}

00042d2c <net_if_l2>:
	if (!iface || !iface->if_dev) {
   42d2c:	b110      	cbz	r0, 42d34 <net_if_l2+0x8>
   42d2e:	6800      	ldr	r0, [r0, #0]
   42d30:	b100      	cbz	r0, 42d34 <net_if_l2+0x8>
	return iface->if_dev->l2;
   42d32:	6840      	ldr	r0, [r0, #4]
}
   42d34:	4770      	bx	lr

00042d36 <l2_flags_get>:
{
   42d36:	b510      	push	{r4, lr}
   42d38:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   42d3a:	f7ff fff7 	bl	42d2c <net_if_l2>
   42d3e:	b128      	cbz	r0, 42d4c <l2_flags_get+0x16>
   42d40:	68c3      	ldr	r3, [r0, #12]
   42d42:	b11b      	cbz	r3, 42d4c <l2_flags_get+0x16>
}
   42d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   42d48:	4610      	mov	r0, r2
   42d4a:	4718      	bx	r3
}
   42d4c:	2000      	movs	r0, #0
   42d4e:	bd10      	pop	{r4, pc}

00042d50 <net_byte_to_hex>:
{
   42d50:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   42d52:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   42d54:	b1b3      	cbz	r3, 42d84 <net_byte_to_hex+0x34>
		if (val < 10) {
   42d56:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   42d58:	b274      	sxtb	r4, r6
   42d5a:	bf86      	itte	hi
   42d5c:	f1a2 030a 	subhi.w	r3, r2, #10
   42d60:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   42d62:	3430      	addls	r4, #48	; 0x30
   42d64:	1c45      	adds	r5, r0, #1
   42d66:	7004      	strb	r4, [r0, #0]
   42d68:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   42d6c:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   42d6e:	b24b      	sxtb	r3, r1
   42d70:	bf83      	ittte	hi
   42d72:	3a0a      	subhi	r2, #10
   42d74:	189b      	addhi	r3, r3, r2
   42d76:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   42d78:	3330      	addls	r3, #48	; 0x30
   42d7a:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   42d7c:	2300      	movs	r3, #0
   42d7e:	706b      	strb	r3, [r5, #1]
   42d80:	1c68      	adds	r0, r5, #1
}
   42d82:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   42d84:	2e00      	cmp	r6, #0
   42d86:	d1e6      	bne.n	42d56 <net_byte_to_hex+0x6>
   42d88:	4605      	mov	r5, r0
   42d8a:	e7ed      	b.n	42d68 <net_byte_to_hex+0x18>

00042d8c <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   42d8c:	e9d0 2300 	ldrd	r2, r3, [r0]
   42d90:	1a9b      	subs	r3, r3, r2
   42d92:	2b01      	cmp	r3, #1
{
   42d94:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   42d96:	d90c      	bls.n	42db2 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   42d98:	4614      	mov	r4, r2
   42d9a:	1c53      	adds	r3, r2, #1
   42d9c:	6003      	str	r3, [r0, #0]
   42d9e:	f814 3b02 	ldrb.w	r3, [r4], #2
   42da2:	021b      	lsls	r3, r3, #8
   42da4:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   42da6:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   42da8:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   42daa:	7852      	ldrb	r2, [r2, #1]
   42dac:	4313      	orrs	r3, r2
   42dae:	800b      	strh	r3, [r1, #0]
}
   42db0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   42db2:	f06f 0015 	mvn.w	r0, #21
   42db6:	e7fb      	b.n	42db0 <unpack_uint16+0x24>

00042db8 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   42db8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42dba:	e9d0 3400 	ldrd	r3, r4, [r0]
   42dbe:	429c      	cmp	r4, r3
   42dc0:	d01f      	beq.n	42e02 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   42dc2:	1c5c      	adds	r4, r3, #1
   42dc4:	6004      	str	r4, [r0, #0]
   42dc6:	781b      	ldrb	r3, [r3, #0]
   42dc8:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   42dca:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   42dcc:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   42dce:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   42dd0:	6804      	ldr	r4, [r0, #0]
   42dd2:	42bc      	cmp	r4, r7
   42dd4:	d218      	bcs.n	42e08 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   42dd6:	4625      	mov	r5, r4
   42dd8:	f815 3b01 	ldrb.w	r3, [r5], #1
   42ddc:	6816      	ldr	r6, [r2, #0]
   42dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   42de2:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   42de4:	4433      	add	r3, r6
   42de6:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   42de8:	6005      	str	r5, [r0, #0]
   42dea:	f994 4000 	ldrsb.w	r4, [r4]
   42dee:	2c00      	cmp	r4, #0
   42df0:	db04      	blt.n	42dfc <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   42df2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   42df6:	d204      	bcs.n	42e02 <fixed_header_decode+0x4a>
	return 0;
   42df8:	2000      	movs	r0, #0
   42dfa:	e004      	b.n	42e06 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   42dfc:	3107      	adds	r1, #7
   42dfe:	291c      	cmp	r1, #28
   42e00:	d1e6      	bne.n	42dd0 <fixed_header_decode+0x18>
		return -EINVAL;
   42e02:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   42e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   42e08:	f06f 000a 	mvn.w	r0, #10
   42e0c:	e7fb      	b.n	42e06 <fixed_header_decode+0x4e>

00042e0e <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   42e0e:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42e10:	e9d1 3500 	ldrd	r3, r5, [r1]
   42e14:	429d      	cmp	r5, r3
   42e16:	d102      	bne.n	42e1e <connect_ack_decode+0x10>
		return -EINVAL;
   42e18:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   42e1c:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   42e1e:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42e20:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   42e22:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42e24:	d0f8      	beq.n	42e18 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   42e26:	461d      	mov	r5, r3
   42e28:	f815 4b02 	ldrb.w	r4, [r5], #2
   42e2c:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   42e2e:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
	*val = *(buf->cur++);
   42e32:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   42e34:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   42e36:	bf04      	itt	eq
   42e38:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   42e3c:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   42e3e:	7053      	strb	r3, [r2, #1]
	return 0;
   42e40:	2000      	movs	r0, #0
   42e42:	e7eb      	b.n	42e1c <connect_ack_decode+0xe>

00042e44 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   42e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   42e48:	461d      	mov	r5, r3
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   42e4a:	7d9b      	ldrb	r3, [r3, #22]
{
   42e4c:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   42e4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   42e52:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   42e56:	f3c0 0041 	ubfx	r0, r0, #1, #2
   42e5a:	7228      	strb	r0, [r5, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   42e5c:	75ab      	strb	r3, [r5, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   42e5e:	f10d 0106 	add.w	r1, sp, #6
   42e62:	4610      	mov	r0, r2
{
   42e64:	4617      	mov	r7, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   42e66:	f7ff ff91 	bl	42d8c <unpack_uint16>
	if (err_code != 0) {
   42e6a:	4606      	mov	r6, r0
   42e6c:	b9c0      	cbnz	r0, 42ea0 <publish_decode+0x5c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   42e6e:	683b      	ldr	r3, [r7, #0]
   42e70:	687a      	ldr	r2, [r7, #4]
   42e72:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   42e76:	1ad2      	subs	r2, r2, r3
   42e78:	42a2      	cmp	r2, r4
   42e7a:	da02      	bge.n	42e82 <publish_decode+0x3e>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   42e7c:	f06f 0615 	mvn.w	r6, #21
   42e80:	e00e      	b.n	42ea0 <publish_decode+0x5c>
	str->size = utf8_strlen;
   42e82:	606c      	str	r4, [r5, #4]
	if (utf8_strlen) {
   42e84:	b184      	cbz	r4, 42ea8 <publish_decode+0x64>
		str->utf8 = buf->cur;
   42e86:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   42e88:	4423      	add	r3, r4
   42e8a:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   42e8c:	7a2b      	ldrb	r3, [r5, #8]
   42e8e:	b96b      	cbnz	r3, 42eac <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   42e90:	3402      	adds	r4, #2
	if (var_length < var_header_length) {
   42e92:	4544      	cmp	r4, r8
   42e94:	d8f2      	bhi.n	42e7c <publish_decode+0x38>
	}

	param->message.payload.data = NULL;
   42e96:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   42e98:	eba8 0404 	sub.w	r4, r8, r4
	param->message.payload.data = NULL;
   42e9c:	60eb      	str	r3, [r5, #12]
	param->message.payload.len = var_length - var_header_length;
   42e9e:	612c      	str	r4, [r5, #16]

	return 0;
}
   42ea0:	4630      	mov	r0, r6
   42ea2:	b002      	add	sp, #8
   42ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   42ea8:	602c      	str	r4, [r5, #0]
	if (err_code != 0) {
   42eaa:	e7ef      	b.n	42e8c <publish_decode+0x48>
		err_code = unpack_uint16(buf, &param->message_id);
   42eac:	f105 0114 	add.w	r1, r5, #20
   42eb0:	4638      	mov	r0, r7
   42eb2:	f7ff ff6b 	bl	42d8c <unpack_uint16>
		if (err_code != 0) {
   42eb6:	b908      	cbnz	r0, 42ebc <publish_decode+0x78>
		var_header_length += sizeof(uint16_t);
   42eb8:	3404      	adds	r4, #4
   42eba:	e7ea      	b.n	42e92 <publish_decode+0x4e>
   42ebc:	4606      	mov	r6, r0
   42ebe:	e7ef      	b.n	42ea0 <publish_decode+0x5c>

00042ec0 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42ec0:	f7ff bf64 	b.w	42d8c <unpack_uint16>

00042ec4 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42ec4:	f7ff bf62 	b.w	42d8c <unpack_uint16>

00042ec8 <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42ec8:	f7ff bf60 	b.w	42d8c <unpack_uint16>

00042ecc <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42ecc:	f7ff bf5e 	b.w	42d8c <unpack_uint16>

00042ed0 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   42ed0:	b538      	push	{r3, r4, r5, lr}
   42ed2:	4605      	mov	r5, r0
   42ed4:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   42ed6:	f7ff ff59 	bl	42d8c <unpack_uint16>
	if (err_code != 0) {
   42eda:	b930      	cbnz	r0, 42eea <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   42edc:	e9d5 2300 	ldrd	r2, r3, [r5]
   42ee0:	1a99      	subs	r1, r3, r2
	str->len = length;
   42ee2:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   42ee4:	b111      	cbz	r1, 42eec <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   42ee6:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   42ee8:	602b      	str	r3, [r5, #0]
}
   42eea:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   42eec:	6060      	str	r0, [r4, #4]
   42eee:	e7fc      	b.n	42eea <subscribe_ack_decode+0x1a>

00042ef0 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   42ef0:	f7ff bf4c 	b.w	42d8c <unpack_uint16>

00042ef4 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   42ef4:	e9d1 3200 	ldrd	r3, r2, [r1]
   42ef8:	1ad2      	subs	r2, r2, r3
   42efa:	2a01      	cmp	r2, #1
   42efc:	d909      	bls.n	42f12 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   42efe:	1c5a      	adds	r2, r3, #1
   42f00:	600a      	str	r2, [r1, #0]
   42f02:	0a02      	lsrs	r2, r0, #8
   42f04:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   42f06:	680b      	ldr	r3, [r1, #0]
   42f08:	1c5a      	adds	r2, r3, #1
   42f0a:	600a      	str	r2, [r1, #0]
   42f0c:	7018      	strb	r0, [r3, #0]
	return 0;
   42f0e:	2000      	movs	r0, #0
   42f10:	4770      	bx	lr
		return -ENOMEM;
   42f12:	f06f 000b 	mvn.w	r0, #11
}
   42f16:	4770      	bx	lr

00042f18 <pack_utf8_str>:
{
   42f18:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   42f1a:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   42f1e:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   42f20:	6840      	ldr	r0, [r0, #4]
   42f22:	1a9b      	subs	r3, r3, r2
   42f24:	1c82      	adds	r2, r0, #2
   42f26:	4293      	cmp	r3, r2
{
   42f28:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   42f2a:	d30d      	bcc.n	42f48 <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   42f2c:	b280      	uxth	r0, r0
   42f2e:	f7ff ffe1 	bl	42ef4 <pack_uint16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   42f32:	e9d5 1200 	ldrd	r1, r2, [r5]
   42f36:	6820      	ldr	r0, [r4, #0]
   42f38:	f002 f976 	bl	45228 <memcpy>
	return 0;
   42f3c:	2000      	movs	r0, #0
	buf->cur += str->size;
   42f3e:	6823      	ldr	r3, [r4, #0]
   42f40:	686a      	ldr	r2, [r5, #4]
   42f42:	4413      	add	r3, r2
   42f44:	6023      	str	r3, [r4, #0]
}
   42f46:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   42f48:	f06f 000b 	mvn.w	r0, #11
   42f4c:	e7fb      	b.n	42f46 <pack_utf8_str+0x2e>

00042f4e <mqtt_encode_fixed_header>:
{
   42f4e:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   42f50:	6815      	ldr	r5, [r2, #0]
   42f52:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   42f54:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   42f58:	d227      	bcs.n	42faa <mqtt_encode_fixed_header+0x5c>
   42f5a:	462c      	mov	r4, r5
   42f5c:	2600      	movs	r6, #0
	} while (length > 0);
   42f5e:	09e4      	lsrs	r4, r4, #7
   42f60:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   42f62:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   42f66:	d1fa      	bne.n	42f5e <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   42f68:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   42f6a:	b2db      	uxtb	r3, r3
   42f6c:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42f6e:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   42f70:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   42f72:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   42f74:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   42f76:	bf1e      	ittt	ne
   42f78:	3401      	addne	r4, #1
   42f7a:	6014      	strne	r4, [r2, #0]
   42f7c:	54c8      	strbne	r0, [r1, r3]
	return 0;
   42f7e:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   42f80:	6811      	ldr	r1, [r2, #0]
   42f82:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   42f86:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   42f88:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   42f8a:	bf1f      	itttt	ne
   42f8c:	6814      	ldrne	r4, [r2, #0]
   42f8e:	7821      	ldrbne	r1, [r4, #0]
   42f90:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   42f94:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   42f96:	6811      	ldr	r1, [r2, #0]
   42f98:	3101      	adds	r1, #1
   42f9a:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   42f9c:	2800      	cmp	r0, #0
   42f9e:	d1ef      	bne.n	42f80 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   42fa0:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   42fa2:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   42fa4:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   42fa6:	6051      	str	r1, [r2, #4]
}
   42fa8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   42faa:	f06f 0079 	mvn.w	r0, #121	; 0x79
   42fae:	e7fb      	b.n	42fa8 <mqtt_encode_fixed_header+0x5a>

00042fb0 <mqtt_message_id_only_enc>:
{
   42fb0:	b570      	push	{r4, r5, r6, lr}
   42fb2:	4606      	mov	r6, r0
   42fb4:	4615      	mov	r5, r2
	if (message_id == 0U) {
   42fb6:	4608      	mov	r0, r1
   42fb8:	b169      	cbz	r1, 42fd6 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42fba:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   42fbc:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42fbe:	3405      	adds	r4, #5
   42fc0:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   42fc2:	f7ff ff97 	bl	42ef4 <pack_uint16>
	if (err_code != 0) {
   42fc6:	b940      	cbnz	r0, 42fda <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   42fc8:	462a      	mov	r2, r5
   42fca:	4621      	mov	r1, r4
   42fcc:	4630      	mov	r0, r6
}
   42fce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   42fd2:	f7ff bfbc 	b.w	42f4e <mqtt_encode_fixed_header>
		return -EINVAL;
   42fd6:	f06f 0015 	mvn.w	r0, #21
}
   42fda:	bd70      	pop	{r4, r5, r6, pc}

00042fdc <publish_encode>:
{
   42fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42fe0:	4607      	mov	r7, r0
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   42fe2:	7d80      	ldrb	r0, [r0, #22]
   42fe4:	7a3c      	ldrb	r4, [r7, #8]
{
   42fe6:	460d      	mov	r5, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   42fe8:	f000 0801 	and.w	r8, r0, #1
   42fec:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   42ff0:	b10c      	cbz	r4, 42ff6 <publish_encode+0x1a>
   42ff2:	8abb      	ldrh	r3, [r7, #20]
   42ff4:	b35b      	cbz	r3, 4304e <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42ff6:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   42ff8:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   42ffa:	3605      	adds	r6, #5
   42ffc:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   42ffe:	4638      	mov	r0, r7
   43000:	f7ff ff8a 	bl	42f18 <pack_utf8_str>
	if (err_code != 0) {
   43004:	b9a8      	cbnz	r0, 43032 <publish_encode+0x56>
	if (param->message.topic.qos) {
   43006:	7a3b      	ldrb	r3, [r7, #8]
   43008:	b9ab      	cbnz	r3, 43036 <publish_encode+0x5a>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   4300a:	0060      	lsls	r0, r4, #1
   4300c:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   43010:	693a      	ldr	r2, [r7, #16]
   43012:	682b      	ldr	r3, [r5, #0]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   43014:	ea40 0009 	orr.w	r0, r0, r9
   43018:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   4301c:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   4301e:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   43022:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   43024:	462a      	mov	r2, r5
   43026:	4631      	mov	r1, r6
   43028:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   4302c:	f7ff ff8f 	bl	42f4e <mqtt_encode_fixed_header>
	if (err_code != 0) {
   43030:	b140      	cbz	r0, 43044 <publish_encode+0x68>
}
   43032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   43036:	4629      	mov	r1, r5
   43038:	8ab8      	ldrh	r0, [r7, #20]
   4303a:	f7ff ff5b 	bl	42ef4 <pack_uint16>
		if (err_code != 0) {
   4303e:	2800      	cmp	r0, #0
   43040:	d0e3      	beq.n	4300a <publish_encode+0x2e>
   43042:	e7f6      	b.n	43032 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   43044:	686b      	ldr	r3, [r5, #4]
   43046:	693a      	ldr	r2, [r7, #16]
   43048:	1a9b      	subs	r3, r3, r2
   4304a:	606b      	str	r3, [r5, #4]
	return 0;
   4304c:	e7f1      	b.n	43032 <publish_encode+0x56>
		return -EINVAL;
   4304e:	f06f 0015 	mvn.w	r0, #21
   43052:	e7ee      	b.n	43032 <publish_encode+0x56>

00043054 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   43054:	460a      	mov	r2, r1
   43056:	8801      	ldrh	r1, [r0, #0]
   43058:	2040      	movs	r0, #64	; 0x40
   4305a:	f7ff bfa9 	b.w	42fb0 <mqtt_message_id_only_enc>

0004305e <subscribe_encode>:
{
   4305e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43062:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   43064:	88c0      	ldrh	r0, [r0, #6]
{
   43066:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   43068:	b330      	cbz	r0, 430b8 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   4306a:	680e      	ldr	r6, [r1, #0]
   4306c:	3605      	adds	r6, #5
   4306e:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   43070:	f7ff ff40 	bl	42ef4 <pack_uint16>
	if (err_code != 0) {
   43074:	4604      	mov	r4, r0
   43076:	bb08      	cbnz	r0, 430bc <subscribe_encode+0x5e>
   43078:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   4307c:	88bb      	ldrh	r3, [r7, #4]
   4307e:	42a3      	cmp	r3, r4
   43080:	dc06      	bgt.n	43090 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   43082:	462a      	mov	r2, r5
   43084:	4631      	mov	r1, r6
}
   43086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   4308a:	2082      	movs	r0, #130	; 0x82
   4308c:	f7ff bf5f 	b.w	42f4e <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   43090:	fb09 f804 	mul.w	r8, r9, r4
   43094:	6838      	ldr	r0, [r7, #0]
   43096:	4629      	mov	r1, r5
   43098:	4440      	add	r0, r8
   4309a:	f7ff ff3d 	bl	42f18 <pack_utf8_str>
		if (err_code != 0) {
   4309e:	b980      	cbnz	r0, 430c2 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   430a0:	683b      	ldr	r3, [r7, #0]
   430a2:	4443      	add	r3, r8
   430a4:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   430a6:	e9d5 3100 	ldrd	r3, r1, [r5]
   430aa:	4299      	cmp	r1, r3
   430ac:	d00b      	beq.n	430c6 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   430ae:	1c59      	adds	r1, r3, #1
   430b0:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   430b2:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   430b4:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   430b6:	e7e1      	b.n	4307c <subscribe_encode+0x1e>
		return -EINVAL;
   430b8:	f06f 0415 	mvn.w	r4, #21
}
   430bc:	4620      	mov	r0, r4
   430be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   430c2:	4604      	mov	r4, r0
   430c4:	e7fa      	b.n	430bc <subscribe_encode+0x5e>
		return -ENOMEM;
   430c6:	f06f 040b 	mvn.w	r4, #11
   430ca:	e7f7      	b.n	430bc <subscribe_encode+0x5e>

000430cc <unsubscribe_encode>:
{
   430cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   430d0:	680d      	ldr	r5, [r1, #0]
{
   430d2:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   430d4:	3505      	adds	r5, #5
   430d6:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   430d8:	88c0      	ldrh	r0, [r0, #6]
{
   430da:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   430dc:	f7ff ff0a 	bl	42ef4 <pack_uint16>
	if (err_code != 0) {
   430e0:	4604      	mov	r4, r0
   430e2:	b9a8      	cbnz	r0, 43110 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   430e4:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   430e8:	88bb      	ldrh	r3, [r7, #4]
   430ea:	42a3      	cmp	r3, r4
   430ec:	dc06      	bgt.n	430fc <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   430ee:	4632      	mov	r2, r6
   430f0:	4629      	mov	r1, r5
}
   430f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   430f6:	20a2      	movs	r0, #162	; 0xa2
   430f8:	f7ff bf29 	b.w	42f4e <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   430fc:	6838      	ldr	r0, [r7, #0]
   430fe:	4631      	mov	r1, r6
   43100:	fb08 0004 	mla	r0, r8, r4, r0
   43104:	f7ff ff08 	bl	42f18 <pack_utf8_str>
		if (err_code != 0) {
   43108:	b908      	cbnz	r0, 4310e <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   4310a:	3401      	adds	r4, #1
   4310c:	e7ec      	b.n	430e8 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   4310e:	4604      	mov	r4, r0
}
   43110:	4620      	mov	r0, r4
   43112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043116 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   43116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   43118:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   4311a:	e9d1 3100 	ldrd	r3, r1, [r1]
   4311e:	1acb      	subs	r3, r1, r3
   43120:	4293      	cmp	r3, r2
{
   43122:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   43124:	d301      	bcc.n	4312a <mqtt_read_message_chunk+0x14>
		return 0;
   43126:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   43128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   4312a:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   4312c:	190f      	adds	r7, r1, r4
   4312e:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   43132:	4413      	add	r3, r2
   43134:	429f      	cmp	r7, r3
   43136:	d813      	bhi.n	43160 <mqtt_read_message_chunk+0x4a>
   43138:	4297      	cmp	r7, r2
   4313a:	d311      	bcc.n	43160 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   4313c:	2300      	movs	r3, #0
   4313e:	4622      	mov	r2, r4
   43140:	f7e4 ff68 	bl	28014 <mqtt_transport_read>
	if (len < 0) {
   43144:	2800      	cmp	r0, #0
   43146:	dbef      	blt.n	43128 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   43148:	d00d      	beq.n	43166 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   4314a:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   4314c:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   4314e:	4403      	add	r3, r0
   43150:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   43152:	686b      	ldr	r3, [r5, #4]
   43154:	4403      	add	r3, r0
   43156:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   43158:	d2e5      	bcs.n	43126 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   4315a:	f06f 000a 	mvn.w	r0, #10
   4315e:	e7e3      	b.n	43128 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   43160:	f06f 000b 	mvn.w	r0, #11
   43164:	e7e0      	b.n	43128 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   43166:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   4316a:	e7dd      	b.n	43128 <mqtt_read_message_chunk+0x12>

0004316c <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   4316c:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   4316e:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   43170:	69c2      	ldr	r2, [r0, #28]
{
   43172:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   43174:	9302      	str	r3, [sp, #8]
{
   43176:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   43178:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   4317a:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   4317c:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   4317e:	a902      	add	r1, sp, #8
   43180:	4628      	mov	r0, r5
   43182:	f7ff ffc8 	bl	43116 <mqtt_read_message_chunk>
		if (err_code < 0) {
   43186:	1e04      	subs	r4, r0, #0
   43188:	db2b      	blt.n	431e2 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   4318a:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   4318c:	aa01      	add	r2, sp, #4
   4318e:	f10d 0103 	add.w	r1, sp, #3
   43192:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   43194:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   43196:	f7ff fe0f 	bl	42db8 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   4319a:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   4319e:	4604      	mov	r4, r0
		chunk_size = 1U;
   431a0:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   431a4:	d0eb      	beq.n	4317e <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   431a6:	2800      	cmp	r0, #0
   431a8:	db1f      	blt.n	431ea <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   431aa:	f89d 6003 	ldrb.w	r6, [sp, #3]
   431ae:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   431b2:	2b30      	cmp	r3, #48	; 0x30
   431b4:	d11c      	bne.n	431f0 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   431b6:	2202      	movs	r2, #2
   431b8:	a902      	add	r1, sp, #8
   431ba:	4628      	mov	r0, r5
   431bc:	f7ff ffab 	bl	43116 <mqtt_read_message_chunk>
	if (err_code < 0) {
   431c0:	1e04      	subs	r4, r0, #0
   431c2:	db0e      	blt.n	431e2 <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   431c4:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   431c6:	f016 0f06 	tst.w	r6, #6
   431ca:	881a      	ldrh	r2, [r3, #0]
   431cc:	ba52      	rev16	r2, r2
   431ce:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   431d0:	bf0c      	ite	eq
   431d2:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   431d4:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   431d6:	a902      	add	r1, sp, #8
   431d8:	4628      	mov	r0, r5
   431da:	f7ff ff9c 	bl	43116 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   431de:	1e04      	subs	r4, r0, #0
   431e0:	da08      	bge.n	431f4 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   431e2:	f114 0f0b 	cmn.w	r4, #11
   431e6:	d100      	bne.n	431ea <mqtt_handle_rx+0x7e>
   431e8:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   431ea:	4620      	mov	r0, r4
   431ec:	b00c      	add	sp, #48	; 0x30
   431ee:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   431f0:	9a01      	ldr	r2, [sp, #4]
   431f2:	e7f0      	b.n	431d6 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   431f4:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   431f6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   431fa:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   431fc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   43200:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   43202:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   43204:	d066      	beq.n	432d4 <mqtt_handle_rx+0x168>
   43206:	d813      	bhi.n	43230 <mqtt_handle_rx+0xc4>
   43208:	2b30      	cmp	r3, #48	; 0x30
   4320a:	d04d      	beq.n	432a8 <mqtt_handle_rx+0x13c>
   4320c:	d804      	bhi.n	43218 <mqtt_handle_rx+0xac>
   4320e:	2b20      	cmp	r3, #32
   43210:	d02f      	beq.n	43272 <mqtt_handle_rx+0x106>
	client->internal.rx_buf_datalen = 0U;
   43212:	2400      	movs	r4, #0
   43214:	61ec      	str	r4, [r5, #28]
	return 0;
   43216:	e7e8      	b.n	431ea <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   43218:	2b40      	cmp	r3, #64	; 0x40
   4321a:	d051      	beq.n	432c0 <mqtt_handle_rx+0x154>
   4321c:	2b50      	cmp	r3, #80	; 0x50
   4321e:	d1f8      	bne.n	43212 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   43220:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   43222:	a905      	add	r1, sp, #20
   43224:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   43226:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   4322a:	f7ff fe4b 	bl	42ec4 <publish_receive_decode>
   4322e:	e04e      	b.n	432ce <mqtt_handle_rx+0x162>
	switch (type_and_flags & 0xF0) {
   43230:	2b90      	cmp	r3, #144	; 0x90
   43232:	d057      	beq.n	432e4 <mqtt_handle_rx+0x178>
   43234:	d809      	bhi.n	4324a <mqtt_handle_rx+0xde>
   43236:	2b70      	cmp	r3, #112	; 0x70
   43238:	d1eb      	bne.n	43212 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   4323a:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   4323c:	a905      	add	r1, sp, #20
   4323e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   43240:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   43244:	f7ff fe42 	bl	42ecc <publish_complete_decode>
   43248:	e041      	b.n	432ce <mqtt_handle_rx+0x162>
	switch (type_and_flags & 0xF0) {
   4324a:	2bb0      	cmp	r3, #176	; 0xb0
   4324c:	d052      	beq.n	432f4 <mqtt_handle_rx+0x188>
   4324e:	2bd0      	cmp	r3, #208	; 0xd0
   43250:	d1df      	bne.n	43212 <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   43252:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   43256:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   43258:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   4325a:	bfc8      	it	gt
   4325c:	f103 32ff 	addgt.w	r2, r3, #4294967295	; 0xffffffff
		evt.type = MQTT_EVT_PINGRESP;
   43260:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   43264:	bfc8      	it	gt
   43266:	b252      	sxtbgt	r2, r2
   43268:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   4326c:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   43270:	e010      	b.n	43294 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_CONNACK;
   43272:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   43276:	a902      	add	r1, sp, #8
   43278:	aa05      	add	r2, sp, #20
   4327a:	4628      	mov	r0, r5
   4327c:	f7ff fdc7 	bl	42e0e <connect_ack_decode>
		if (err_code == 0) {
   43280:	4604      	mov	r4, r0
   43282:	bb28      	cbnz	r0, 432d0 <mqtt_handle_rx+0x164>
			if (evt.param.connack.return_code ==
   43284:	f89d 2015 	ldrb.w	r2, [sp, #21]
   43288:	b95a      	cbnz	r2, 432a2 <mqtt_handle_rx+0x136>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   4328a:	69ab      	ldr	r3, [r5, #24]
   4328c:	f043 0304 	orr.w	r3, r3, #4
   43290:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   43292:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   43294:	a904      	add	r1, sp, #16
   43296:	4628      	mov	r0, r5
   43298:	f000 f8be 	bl	43418 <event_notify>
	if (err_code < 0) {
   4329c:	2c00      	cmp	r4, #0
   4329e:	dab8      	bge.n	43212 <mqtt_handle_rx+0xa6>
   432a0:	e7a3      	b.n	431ea <mqtt_handle_rx+0x7e>
				err_code = -ECONNREFUSED;
   432a2:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   432a6:	e7f4      	b.n	43292 <mqtt_handle_rx+0x126>
		evt.type = MQTT_EVT_PUBLISH;
   432a8:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   432aa:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   432ac:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   432b0:	ab05      	add	r3, sp, #20
   432b2:	f7ff fdc7 	bl	42e44 <publish_decode>
		client->internal.remaining_payload =
   432b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   432b8:	4604      	mov	r4, r0
		evt.result = err_code;
   432ba:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   432bc:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   432be:	e7e9      	b.n	43294 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBACK;
   432c0:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   432c2:	a905      	add	r1, sp, #20
   432c4:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   432c6:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   432ca:	f7ff fdf9 	bl	42ec0 <publish_ack_decode>
   432ce:	4604      	mov	r4, r0
		evt.result = err_code;
   432d0:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   432d2:	e7df      	b.n	43294 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBREL;
   432d4:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   432d6:	a905      	add	r1, sp, #20
   432d8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   432da:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   432de:	f7ff fdf3 	bl	42ec8 <publish_release_decode>
   432e2:	e7f4      	b.n	432ce <mqtt_handle_rx+0x162>
		evt.type = MQTT_EVT_SUBACK;
   432e4:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   432e6:	a905      	add	r1, sp, #20
   432e8:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   432ea:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   432ee:	f7ff fdef 	bl	42ed0 <subscribe_ack_decode>
   432f2:	e7ec      	b.n	432ce <mqtt_handle_rx+0x162>
		evt.type = MQTT_EVT_UNSUBACK;
   432f4:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   432f6:	a905      	add	r1, sp, #20
   432f8:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   432fc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   43300:	f7ff fdf6 	bl	42ef0 <unsubscribe_ack_decode>
   43304:	e7e3      	b.n	432ce <mqtt_handle_rx+0x162>

00043306 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   43306:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   43308:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   4330a:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   4330c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   4330e:	2206      	movs	r2, #6
   43310:	2101      	movs	r1, #1
   43312:	f7e2 f869 	bl	253e8 <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   43316:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   43318:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   4331a:	da04      	bge.n	43326 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   4331c:	f7ff fcfd 	bl	42d1a <__errno>
   43320:	6800      	ldr	r0, [r0, #0]
   43322:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   43324:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   43326:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   43328:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   4332a:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   4332c:	bf14      	ite	ne
   4332e:	2218      	movne	r2, #24
   43330:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   43332:	f7ff fa11 	bl	42758 <z_impl_zsock_connect>
	if (ret < 0) {
   43336:	2800      	cmp	r0, #0
   43338:	da03      	bge.n	43342 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   4333a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   4333c:	f7ff f9f5 	bl	4272a <z_impl_zsock_close>
   43340:	e7ec      	b.n	4331c <mqtt_client_tcp_connect+0x16>
	return 0;
   43342:	2000      	movs	r0, #0
   43344:	e7ee      	b.n	43324 <mqtt_client_tcp_connect+0x1e>

00043346 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   43346:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   4334a:	2400      	movs	r4, #0
{
   4334c:	4607      	mov	r7, r0
   4334e:	4688      	mov	r8, r1
   43350:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   43352:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   43354:	42ac      	cmp	r4, r5
   43356:	d301      	bcc.n	4335c <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   43358:	2000      	movs	r0, #0
   4335a:	e00e      	b.n	4337a <mqtt_client_tcp_write+0x34>
		ret = send(client->transport.tcp.sock, data + offset,
   4335c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   4335e:	2300      	movs	r3, #0
   43360:	e9cd 6600 	strd	r6, r6, [sp]
   43364:	1b2a      	subs	r2, r5, r4
   43366:	eb08 0104 	add.w	r1, r8, r4
   4336a:	f7ff fa0b 	bl	42784 <z_impl_zsock_sendto>
		if (ret < 0) {
   4336e:	2800      	cmp	r0, #0
   43370:	da06      	bge.n	43380 <mqtt_client_tcp_write+0x3a>
			return -errno;
   43372:	f7ff fcd2 	bl	42d1a <__errno>
   43376:	6800      	ldr	r0, [r0, #0]
   43378:	4240      	negs	r0, r0
}
   4337a:	b002      	add	sp, #8
   4337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   43380:	4404      	add	r4, r0
   43382:	e7e7      	b.n	43354 <mqtt_client_tcp_write+0xe>

00043384 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   43384:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   43386:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   43388:	2200      	movs	r2, #0
   4338a:	f7ff fa18 	bl	427be <z_impl_zsock_sendmsg>
	if (ret < 0) {
   4338e:	2800      	cmp	r0, #0
   43390:	da04      	bge.n	4339c <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   43392:	f7ff fcc2 	bl	42d1a <__errno>
   43396:	6800      	ldr	r0, [r0, #0]
   43398:	4240      	negs	r0, r0
	}

	return 0;
}
   4339a:	bd08      	pop	{r3, pc}
	return 0;
   4339c:	2000      	movs	r0, #0
   4339e:	e7fc      	b.n	4339a <mqtt_client_tcp_write_msg+0x16>

000433a0 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   433a0:	b513      	push	{r0, r1, r4, lr}
   433a2:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   433a4:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   433a6:	bf14      	ite	ne
   433a8:	4623      	movne	r3, r4
   433aa:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   433ac:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   433ae:	e9cd 4400 	strd	r4, r4, [sp]
   433b2:	f7ff fa1a 	bl	427ea <z_impl_zsock_recvfrom>
	if (ret < 0) {
   433b6:	2800      	cmp	r0, #0
   433b8:	da03      	bge.n	433c2 <mqtt_client_tcp_read+0x22>
		return -errno;
   433ba:	f7ff fcae 	bl	42d1a <__errno>
   433be:	6800      	ldr	r0, [r0, #0]
   433c0:	4240      	negs	r0, r0
	}

	return ret;
}
   433c2:	b002      	add	sp, #8
   433c4:	bd10      	pop	{r4, pc}

000433c6 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   433c6:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   433c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   433ca:	f7ff f9ae 	bl	4272a <z_impl_zsock_close>
	if (ret < 0) {
   433ce:	2800      	cmp	r0, #0
   433d0:	da04      	bge.n	433dc <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   433d2:	f7ff fca2 	bl	42d1a <__errno>
   433d6:	6800      	ldr	r0, [r0, #0]
   433d8:	4240      	negs	r0, r0
	}

	return 0;
}
   433da:	bd08      	pop	{r3, pc}
	return 0;
   433dc:	2000      	movs	r0, #0
   433de:	e7fc      	b.n	433da <mqtt_client_tcp_disconnect+0x14>

000433e0 <k_uptime_get>:
{
   433e0:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   433e2:	f001 fe4c 	bl	4507e <z_impl_k_uptime_ticks>
   433e6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   433ea:	fba0 2304 	umull	r2, r3, r0, r4
   433ee:	fb04 3301 	mla	r3, r4, r1, r3
   433f2:	0bd0      	lsrs	r0, r2, #15
}
   433f4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   433f8:	0bd9      	lsrs	r1, r3, #15
   433fa:	bd10      	pop	{r4, pc}

000433fc <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   433fc:	b538      	push	{r3, r4, r5, lr}
   433fe:	4604      	mov	r4, r0
   43400:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   43402:	6f42      	ldr	r2, [r0, #116]	; 0x74
   43404:	2100      	movs	r1, #0
   43406:	6f00      	ldr	r0, [r0, #112]	; 0x70
   43408:	f001 ff2e 	bl	45268 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   4340c:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   4340e:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   43410:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   43412:	4413      	add	r3, r2
   43414:	606b      	str	r3, [r5, #4]
}
   43416:	bd38      	pop	{r3, r4, r5, pc}

00043418 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   43418:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   4341a:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   4341c:	4604      	mov	r4, r0
   4341e:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   43420:	b153      	cbz	r3, 43438 <event_notify+0x20>
		mqtt_mutex_unlock(client);
   43422:	f7e4 fe0f 	bl	28044 <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   43426:	4620      	mov	r0, r4
   43428:	6e63      	ldr	r3, [r4, #100]	; 0x64
   4342a:	4629      	mov	r1, r5
   4342c:	4798      	blx	r3

		mqtt_mutex_lock(client);
   4342e:	4620      	mov	r0, r4
	}
}
   43430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   43434:	f7e4 be32 	b.w	2809c <mqtt_mutex_lock>
}
   43438:	bd38      	pop	{r3, r4, r5, pc}

0004343a <client_disconnect.constprop.3>:

static void client_disconnect(struct mqtt_client *client, int result,
   4343a:	b530      	push	{r4, r5, lr}
   4343c:	b089      	sub	sp, #36	; 0x24
   4343e:	4604      	mov	r4, r0
   43440:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   43442:	f7e4 fdf5 	bl	28030 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   43446:	221c      	movs	r2, #28
   43448:	2100      	movs	r1, #0
   4344a:	4668      	mov	r0, sp
   4344c:	f001 ff0c 	bl	45268 <memset>
   43450:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   43452:	4669      	mov	r1, sp
   43454:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   43456:	f88d 3000 	strb.w	r3, [sp]
   4345a:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   4345c:	f7ff ffdc 	bl	43418 <event_notify>
	MQTT_STATE_INIT(client);
   43460:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   43462:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   43466:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   4346a:	b009      	add	sp, #36	; 0x24
   4346c:	bd30      	pop	{r4, r5, pc}

0004346e <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   4346e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   43472:	460f      	mov	r7, r1
   43474:	4690      	mov	r8, r2
   43476:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   43478:	4605      	mov	r5, r0
   4347a:	b320      	cbz	r0, 434c6 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   4347c:	f7e4 fe0e 	bl	2809c <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   43480:	6a2c      	ldr	r4, [r5, #32]
   43482:	b1b4      	cbz	r4, 434b2 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   43484:	4544      	cmp	r4, r8
   43486:	4622      	mov	r2, r4
   43488:	4633      	mov	r3, r6
   4348a:	bf28      	it	cs
   4348c:	4642      	movcs	r2, r8
   4348e:	4639      	mov	r1, r7
   43490:	4628      	mov	r0, r5
   43492:	f7e4 fdbf 	bl	28014 <mqtt_transport_read>
   43496:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   43498:	b916      	cbnz	r6, 434a0 <read_publish_payload+0x32>
   4349a:	f110 0f0b 	cmn.w	r0, #11
   4349e:	d008      	beq.n	434b2 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   434a0:	2c00      	cmp	r4, #0
   434a2:	dc0c      	bgt.n	434be <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   434a4:	bf08      	it	eq
   434a6:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   434aa:	4628      	mov	r0, r5
   434ac:	4621      	mov	r1, r4
   434ae:	f7ff ffc4 	bl	4343a <client_disconnect.constprop.3>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   434b2:	4628      	mov	r0, r5
   434b4:	f7e4 fdc6 	bl	28044 <mqtt_mutex_unlock>

	return ret;
}
   434b8:	4620      	mov	r0, r4
   434ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   434be:	6a2b      	ldr	r3, [r5, #32]
   434c0:	1b1b      	subs	r3, r3, r4
   434c2:	622b      	str	r3, [r5, #32]
   434c4:	e7f5      	b.n	434b2 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   434c6:	f06f 0415 	mvn.w	r4, #21
   434ca:	e7f5      	b.n	434b8 <read_publish_payload+0x4a>

000434cc <client_write>:
{
   434cc:	b538      	push	{r3, r4, r5, lr}
   434ce:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   434d0:	f7e4 fd86 	bl	27fe0 <mqtt_transport_write>
	if (err_code < 0) {
   434d4:	1e04      	subs	r4, r0, #0
   434d6:	da05      	bge.n	434e4 <client_write+0x18>
		client_disconnect(client, err_code, true);
   434d8:	4621      	mov	r1, r4
   434da:	4628      	mov	r0, r5
   434dc:	f7ff ffad 	bl	4343a <client_disconnect.constprop.3>
}
   434e0:	4620      	mov	r0, r4
   434e2:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   434e4:	f7ff ff7c 	bl	433e0 <k_uptime_get>
	return 0;
   434e8:	2400      	movs	r4, #0
   434ea:	6168      	str	r0, [r5, #20]
   434ec:	e7f8      	b.n	434e0 <client_write+0x14>

000434ee <mqtt_client_init>:
{
   434ee:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   434f0:	4604      	mov	r4, r0
   434f2:	b1a0      	cbz	r0, 4351e <mqtt_client_init+0x30>
	MQTT_STATE_INIT(client);
   434f4:	2500      	movs	r5, #0
   434f6:	2280      	movs	r2, #128	; 0x80
   434f8:	2100      	movs	r1, #0
   434fa:	f001 feb5 	bl	45268 <memset>
   434fe:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   43500:	4620      	mov	r0, r4
   43502:	f001 fcce 	bl	44ea2 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   43506:	2304      	movs	r3, #4
   43508:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   4350c:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   43510:	f365 0341 	bfi	r3, r5, #1, #1
   43514:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   43518:	2378      	movs	r3, #120	; 0x78
   4351a:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   4351e:	bd38      	pop	{r3, r4, r5, pc}

00043520 <mqtt_connect>:
{
   43520:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   43522:	4604      	mov	r4, r0
   43524:	2800      	cmp	r0, #0
   43526:	d03b      	beq.n	435a0 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   43528:	6c83      	ldr	r3, [r0, #72]	; 0x48
   4352a:	2b00      	cmp	r3, #0
   4352c:	d038      	beq.n	435a0 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   4352e:	f7e4 fdb5 	bl	2809c <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   43532:	6f23      	ldr	r3, [r4, #112]	; 0x70
   43534:	b38b      	cbz	r3, 4359a <mqtt_connect+0x7a>
   43536:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   43538:	b37b      	cbz	r3, 4359a <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   4353a:	4620      	mov	r0, r4
   4353c:	f7e4 fd46 	bl	27fcc <mqtt_transport_connect>
	if (err_code < 0) {
   43540:	1e05      	subs	r5, r0, #0
   43542:	db24      	blt.n	4358e <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   43544:	4669      	mov	r1, sp
   43546:	4620      	mov	r0, r4
   43548:	f7ff ff58 	bl	433fc <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   4354c:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   4354e:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   43550:	f043 0302 	orr.w	r3, r3, #2
   43554:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   43556:	4620      	mov	r0, r4
   43558:	f7e4 fc94 	bl	27e84 <connect_request_encode>
	if (err_code < 0) {
   4355c:	1e05      	subs	r5, r0, #0
   4355e:	db13      	blt.n	43588 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   43560:	e9dd 1200 	ldrd	r1, r2, [sp]
   43564:	4620      	mov	r0, r4
   43566:	1a52      	subs	r2, r2, r1
   43568:	f7e4 fd3a 	bl	27fe0 <mqtt_transport_write>
	if (err_code < 0) {
   4356c:	1e05      	subs	r5, r0, #0
   4356e:	db0b      	blt.n	43588 <mqtt_connect+0x68>
   43570:	f7ff ff36 	bl	433e0 <k_uptime_get>
	client->unacked_ping = 0;
   43574:	2500      	movs	r5, #0
   43576:	6160      	str	r0, [r4, #20]
   43578:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   4357c:	4620      	mov	r0, r4
   4357e:	f7e4 fd61 	bl	28044 <mqtt_mutex_unlock>
}
   43582:	4628      	mov	r0, r5
   43584:	b003      	add	sp, #12
   43586:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   43588:	4620      	mov	r0, r4
   4358a:	f7e4 fd51 	bl	28030 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   4358e:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   43590:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   43594:	e9c4 3307 	strd	r3, r3, [r4, #28]
   43598:	e7f0      	b.n	4357c <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   4359a:	f06f 050b 	mvn.w	r5, #11
   4359e:	e7f6      	b.n	4358e <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   435a0:	f06f 0515 	mvn.w	r5, #21
   435a4:	e7ed      	b.n	43582 <mqtt_connect+0x62>

000435a6 <mqtt_publish>:
{
   435a6:	b570      	push	{r4, r5, r6, lr}
   435a8:	460e      	mov	r6, r1
   435aa:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   435ac:	4605      	mov	r5, r0
   435ae:	2800      	cmp	r0, #0
   435b0:	d03b      	beq.n	4362a <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   435b2:	2900      	cmp	r1, #0
   435b4:	d039      	beq.n	4362a <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   435b6:	f7e4 fd71 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   435ba:	a901      	add	r1, sp, #4
   435bc:	4628      	mov	r0, r5
   435be:	f7ff ff1d 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   435c2:	69ab      	ldr	r3, [r5, #24]
   435c4:	075b      	lsls	r3, r3, #29
   435c6:	d52d      	bpl.n	43624 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   435c8:	a901      	add	r1, sp, #4
   435ca:	4630      	mov	r0, r6
   435cc:	f7ff fd06 	bl	42fdc <publish_encode>
	if (err_code < 0) {
   435d0:	1e04      	subs	r4, r0, #0
   435d2:	db1c      	blt.n	4360e <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   435d4:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   435d6:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   435d8:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   435da:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   435dc:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   435de:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   435e0:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   435e2:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   435e4:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   435e6:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   435e8:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   435ec:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   435ee:	f001 fe3b 	bl	45268 <memset>
	msg.msg_iov = io_vector;
   435f2:	ab03      	add	r3, sp, #12
   435f4:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   435f6:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   435f8:	a907      	add	r1, sp, #28
   435fa:	4628      	mov	r0, r5
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   435fc:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   435fe:	f7e4 fcfb 	bl	27ff8 <mqtt_transport_write_msg>
	if (err_code < 0) {
   43602:	1e04      	subs	r4, r0, #0
   43604:	da09      	bge.n	4361a <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   43606:	4621      	mov	r1, r4
   43608:	4628      	mov	r0, r5
   4360a:	f7ff ff16 	bl	4343a <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   4360e:	4628      	mov	r0, r5
   43610:	f7e4 fd18 	bl	28044 <mqtt_mutex_unlock>
}
   43614:	4620      	mov	r0, r4
   43616:	b00e      	add	sp, #56	; 0x38
   43618:	bd70      	pop	{r4, r5, r6, pc}
   4361a:	f7ff fee1 	bl	433e0 <k_uptime_get>
	return 0;
   4361e:	2400      	movs	r4, #0
   43620:	6168      	str	r0, [r5, #20]
   43622:	e7f4      	b.n	4360e <mqtt_publish+0x68>
		return -ENOTCONN;
   43624:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   43628:	e7f1      	b.n	4360e <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   4362a:	f06f 0415 	mvn.w	r4, #21
   4362e:	e7f1      	b.n	43614 <mqtt_publish+0x6e>

00043630 <mqtt_publish_qos1_ack>:
{
   43630:	b537      	push	{r0, r1, r2, r4, r5, lr}
   43632:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   43634:	4605      	mov	r5, r0
   43636:	b1f8      	cbz	r0, 43678 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   43638:	b1f1      	cbz	r1, 43678 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   4363a:	f7e4 fd2f 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4363e:	4669      	mov	r1, sp
   43640:	4628      	mov	r0, r5
   43642:	f7ff fedb 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   43646:	69ab      	ldr	r3, [r5, #24]
   43648:	075b      	lsls	r3, r3, #29
   4364a:	d512      	bpl.n	43672 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   4364c:	4620      	mov	r0, r4
   4364e:	4669      	mov	r1, sp
   43650:	f7ff fd00 	bl	43054 <publish_ack_encode>
	if (err_code < 0) {
   43654:	1e04      	subs	r4, r0, #0
   43656:	db06      	blt.n	43666 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   43658:	e9dd 1200 	ldrd	r1, r2, [sp]
   4365c:	4628      	mov	r0, r5
   4365e:	1a52      	subs	r2, r2, r1
   43660:	f7ff ff34 	bl	434cc <client_write>
   43664:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   43666:	4628      	mov	r0, r5
   43668:	f7e4 fcec 	bl	28044 <mqtt_mutex_unlock>
}
   4366c:	4620      	mov	r0, r4
   4366e:	b003      	add	sp, #12
   43670:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   43672:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   43676:	e7f6      	b.n	43666 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   43678:	f06f 0415 	mvn.w	r4, #21
   4367c:	e7f6      	b.n	4366c <mqtt_publish_qos1_ack+0x3c>

0004367e <mqtt_disconnect>:
{
   4367e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   43680:	4604      	mov	r4, r0
   43682:	b310      	cbz	r0, 436ca <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   43684:	f7e4 fd0a 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   43688:	4669      	mov	r1, sp
   4368a:	4620      	mov	r0, r4
   4368c:	f7ff feb6 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   43690:	69a3      	ldr	r3, [r4, #24]
   43692:	075b      	lsls	r3, r3, #29
   43694:	d516      	bpl.n	436c4 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   43696:	4668      	mov	r0, sp
   43698:	f7e4 fc74 	bl	27f84 <disconnect_encode>
	if (err_code < 0) {
   4369c:	1e05      	subs	r5, r0, #0
   4369e:	db0b      	blt.n	436b8 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   436a0:	e9dd 1200 	ldrd	r1, r2, [sp]
   436a4:	4620      	mov	r0, r4
   436a6:	1a52      	subs	r2, r2, r1
   436a8:	f7ff ff10 	bl	434cc <client_write>
	if (err_code < 0) {
   436ac:	1e05      	subs	r5, r0, #0
   436ae:	db03      	blt.n	436b8 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   436b0:	2100      	movs	r1, #0
   436b2:	4620      	mov	r0, r4
   436b4:	f7ff fec1 	bl	4343a <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   436b8:	4620      	mov	r0, r4
   436ba:	f7e4 fcc3 	bl	28044 <mqtt_mutex_unlock>
}
   436be:	4628      	mov	r0, r5
   436c0:	b003      	add	sp, #12
   436c2:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   436c4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   436c8:	e7f6      	b.n	436b8 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   436ca:	f06f 0515 	mvn.w	r5, #21
   436ce:	e7f6      	b.n	436be <mqtt_disconnect+0x40>

000436d0 <mqtt_subscribe>:
{
   436d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   436d2:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   436d4:	4605      	mov	r5, r0
   436d6:	b1f8      	cbz	r0, 43718 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   436d8:	b1f1      	cbz	r1, 43718 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   436da:	f7e4 fcdf 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   436de:	4669      	mov	r1, sp
   436e0:	4628      	mov	r0, r5
   436e2:	f7ff fe8b 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   436e6:	69ab      	ldr	r3, [r5, #24]
   436e8:	075b      	lsls	r3, r3, #29
   436ea:	d512      	bpl.n	43712 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   436ec:	4620      	mov	r0, r4
   436ee:	4669      	mov	r1, sp
   436f0:	f7ff fcb5 	bl	4305e <subscribe_encode>
	if (err_code < 0) {
   436f4:	1e04      	subs	r4, r0, #0
   436f6:	db06      	blt.n	43706 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   436f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   436fc:	4628      	mov	r0, r5
   436fe:	1a52      	subs	r2, r2, r1
   43700:	f7ff fee4 	bl	434cc <client_write>
   43704:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   43706:	4628      	mov	r0, r5
   43708:	f7e4 fc9c 	bl	28044 <mqtt_mutex_unlock>
}
   4370c:	4620      	mov	r0, r4
   4370e:	b003      	add	sp, #12
   43710:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   43712:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   43716:	e7f6      	b.n	43706 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   43718:	f06f 0415 	mvn.w	r4, #21
   4371c:	e7f6      	b.n	4370c <mqtt_subscribe+0x3c>

0004371e <mqtt_unsubscribe>:
{
   4371e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   43720:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   43722:	4605      	mov	r5, r0
   43724:	b1f8      	cbz	r0, 43766 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   43726:	b1f1      	cbz	r1, 43766 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   43728:	f7e4 fcb8 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4372c:	4669      	mov	r1, sp
   4372e:	4628      	mov	r0, r5
   43730:	f7ff fe64 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   43734:	69ab      	ldr	r3, [r5, #24]
   43736:	075b      	lsls	r3, r3, #29
   43738:	d512      	bpl.n	43760 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   4373a:	4620      	mov	r0, r4
   4373c:	4669      	mov	r1, sp
   4373e:	f7ff fcc5 	bl	430cc <unsubscribe_encode>
	if (err_code < 0) {
   43742:	1e04      	subs	r4, r0, #0
   43744:	db06      	blt.n	43754 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   43746:	e9dd 1200 	ldrd	r1, r2, [sp]
   4374a:	4628      	mov	r0, r5
   4374c:	1a52      	subs	r2, r2, r1
   4374e:	f7ff febd 	bl	434cc <client_write>
   43752:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   43754:	4628      	mov	r0, r5
   43756:	f7e4 fc75 	bl	28044 <mqtt_mutex_unlock>
}
   4375a:	4620      	mov	r0, r4
   4375c:	b003      	add	sp, #12
   4375e:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   43760:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   43764:	e7f6      	b.n	43754 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   43766:	f06f 0415 	mvn.w	r4, #21
   4376a:	e7f6      	b.n	4375a <mqtt_unsubscribe+0x3c>

0004376c <mqtt_ping>:
{
   4376c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   4376e:	4604      	mov	r4, r0
   43770:	b320      	cbz	r0, 437bc <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   43772:	f7e4 fc93 	bl	2809c <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   43776:	4669      	mov	r1, sp
   43778:	4620      	mov	r0, r4
   4377a:	f7ff fe3f 	bl	433fc <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   4377e:	69a3      	ldr	r3, [r4, #24]
   43780:	075b      	lsls	r3, r3, #29
   43782:	d518      	bpl.n	437b6 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   43784:	4668      	mov	r0, sp
   43786:	f7e4 fc0f 	bl	27fa8 <ping_request_encode>
	if (err_code < 0) {
   4378a:	1e05      	subs	r5, r0, #0
   4378c:	db0d      	blt.n	437aa <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4378e:	e9dd 1200 	ldrd	r1, r2, [sp]
   43792:	4620      	mov	r0, r4
   43794:	1a52      	subs	r2, r2, r1
   43796:	f7ff fe99 	bl	434cc <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   4379a:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4379e:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   437a0:	2b7f      	cmp	r3, #127	; 0x7f
   437a2:	d002      	beq.n	437aa <mqtt_ping+0x3e>
		client->unacked_ping++;
   437a4:	3301      	adds	r3, #1
   437a6:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   437aa:	4620      	mov	r0, r4
   437ac:	f7e4 fc4a 	bl	28044 <mqtt_mutex_unlock>
}
   437b0:	4628      	mov	r0, r5
   437b2:	b003      	add	sp, #12
   437b4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   437b6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   437ba:	e7f6      	b.n	437aa <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   437bc:	f06f 0515 	mvn.w	r5, #21
   437c0:	e7f6      	b.n	437b0 <mqtt_ping+0x44>

000437c2 <mqtt_live>:
{
   437c2:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   437c4:	4606      	mov	r6, r0
   437c6:	b300      	cbz	r0, 4380a <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   437c8:	f7e4 fc68 	bl	2809c <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   437cc:	6974      	ldr	r4, [r6, #20]
   437ce:	f7ff fe07 	bl	433e0 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   437d2:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   437d4:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   437d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   437dc:	b19c      	cbz	r4, 43806 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   437de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   437e2:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   437e4:	4284      	cmp	r4, r0
   437e6:	d80d      	bhi.n	43804 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   437e8:	4630      	mov	r0, r6
   437ea:	f7ff ffbf 	bl	4376c <mqtt_ping>
		ping_sent = true;
   437ee:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   437f0:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   437f2:	4630      	mov	r0, r6
   437f4:	f7e4 fc26 	bl	28044 <mqtt_mutex_unlock>
		return -EAGAIN;
   437f8:	2c00      	cmp	r4, #0
   437fa:	bf08      	it	eq
   437fc:	f06f 050a 	mvneq.w	r5, #10
}
   43800:	4628      	mov	r0, r5
   43802:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   43804:	2400      	movs	r4, #0
	int err_code = 0;
   43806:	4625      	mov	r5, r4
   43808:	e7f3      	b.n	437f2 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   4380a:	f06f 0515 	mvn.w	r5, #21
   4380e:	e7f7      	b.n	43800 <mqtt_live+0x3e>

00043810 <mqtt_keepalive_time_left>:
{
   43810:	b538      	push	{r3, r4, r5, lr}
   43812:	4605      	mov	r5, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   43814:	6944      	ldr	r4, [r0, #20]
   43816:	f7ff fde3 	bl	433e0 <k_uptime_get>
	int32_t diff = k_uptime_get_32() - last_activity;
   4381a:	1b04      	subs	r4, r0, r4
	uint32_t keepalive_ms = 1000U * client->keepalive;
   4381c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   43820:	f8b5 2078 	ldrh.w	r2, [r5, #120]	; 0x78
		return 0;
   43824:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   43828:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   4382a:	b11a      	cbz	r2, 43834 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   4382c:	42a0      	cmp	r0, r4
   4382e:	d904      	bls.n	4383a <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   43830:	1b00      	subs	r0, r0, r4
}
   43832:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   43834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43838:	e7fb      	b.n	43832 <mqtt_keepalive_time_left+0x22>
		return 0;
   4383a:	2000      	movs	r0, #0
   4383c:	e7f9      	b.n	43832 <mqtt_keepalive_time_left+0x22>

0004383e <mqtt_input>:
{
   4383e:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   43840:	4605      	mov	r5, r0
   43842:	b1d0      	cbz	r0, 4387a <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   43844:	f7e4 fc2a 	bl	2809c <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   43848:	69ab      	ldr	r3, [r5, #24]
   4384a:	079b      	lsls	r3, r3, #30
   4384c:	d50f      	bpl.n	4386e <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   4384e:	6a2b      	ldr	r3, [r5, #32]
   43850:	b983      	cbnz	r3, 43874 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   43852:	4628      	mov	r0, r5
   43854:	f7ff fc8a 	bl	4316c <mqtt_handle_rx>
	if (err_code < 0) {
   43858:	1e04      	subs	r4, r0, #0
   4385a:	da03      	bge.n	43864 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   4385c:	4621      	mov	r1, r4
   4385e:	4628      	mov	r0, r5
   43860:	f7ff fdeb 	bl	4343a <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   43864:	4628      	mov	r0, r5
   43866:	f7e4 fbed 	bl	28044 <mqtt_mutex_unlock>
}
   4386a:	4620      	mov	r0, r4
   4386c:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   4386e:	f06f 040c 	mvn.w	r4, #12
   43872:	e7f7      	b.n	43864 <mqtt_input+0x26>
		return -EBUSY;
   43874:	f06f 040f 	mvn.w	r4, #15
   43878:	e7f4      	b.n	43864 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   4387a:	f06f 0415 	mvn.w	r4, #21
   4387e:	e7f4      	b.n	4386a <mqtt_input+0x2c>

00043880 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   43880:	2301      	movs	r3, #1
   43882:	f7ff bdf4 	b.w	4346e <read_publish_payload>

00043886 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   43886:	b570      	push	{r4, r5, r6, lr}
   43888:	4606      	mov	r6, r0
   4388a:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   4388c:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   4388e:	42ac      	cmp	r4, r5
   43890:	d301      	bcc.n	43896 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   43892:	2000      	movs	r0, #0
}
   43894:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   43896:	1b2a      	subs	r2, r5, r4
   43898:	4621      	mov	r1, r4
   4389a:	4630      	mov	r0, r6
   4389c:	f7ff fff0 	bl	43880 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   438a0:	2800      	cmp	r0, #0
   438a2:	dbf7      	blt.n	43894 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   438a4:	d001      	beq.n	438aa <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   438a6:	4404      	add	r4, r0
   438a8:	e7f1      	b.n	4388e <mqtt_readall_publish_payload+0x8>
			return -EIO;
   438aa:	f06f 0004 	mvn.w	r0, #4
   438ae:	e7f1      	b.n	43894 <mqtt_readall_publish_payload+0xe>

000438b0 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   438b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   438b2:	6d06      	ldr	r6, [r0, #80]	; 0x50
{
   438b4:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   438b6:	8830      	ldrh	r0, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   438b8:	f44f 7281 	mov.w	r2, #258	; 0x102
   438bc:	2101      	movs	r1, #1
   438be:	f7e1 fd93 	bl	253e8 <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   438c2:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   438c4:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   438c6:	da05      	bge.n	438d4 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   438c8:	f7ff fa27 	bl	42d1a <__errno>
   438cc:	6800      	ldr	r0, [r0, #0]
   438ce:	4240      	negs	r0, r0
}
   438d0:	b003      	add	sp, #12
   438d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   438d4:	2304      	movs	r3, #4
   438d6:	2205      	movs	r2, #5
   438d8:	9300      	str	r3, [sp, #0]
   438da:	f44f 718d 	mov.w	r1, #282	; 0x11a
   438de:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   438e2:	f7fe ffd0 	bl	42886 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   438e6:	2800      	cmp	r0, #0
   438e8:	da03      	bge.n	438f2 <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   438ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   438ec:	f7fe ff1d 	bl	4272a <z_impl_zsock_close>
   438f0:	e7ea      	b.n	438c8 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   438f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   438f4:	bb03      	cbnz	r3, 43938 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   438f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   438f8:	bb63      	cbnz	r3, 43954 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   438fa:	6c25      	ldr	r5, [r4, #64]	; 0x40
   438fc:	2d00      	cmp	r5, #0
   438fe:	d137      	bne.n	43970 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   43900:	6c63      	ldr	r3, [r4, #68]	; 0x44
   43902:	2b01      	cmp	r3, #1
   43904:	d10b      	bne.n	4391e <mqtt_client_tls_connect+0x6e>
   43906:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   43908:	2304      	movs	r3, #4
   4390a:	2207      	movs	r2, #7
   4390c:	9300      	str	r3, [sp, #0]
   4390e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43912:	f104 0344 	add.w	r3, r4, #68	; 0x44
   43916:	f7fe ffb6 	bl	42886 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4391a:	2800      	cmp	r0, #0
   4391c:	dbe5      	blt.n	438ea <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   4391e:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   43920:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   43922:	2b01      	cmp	r3, #1
   43924:	bf0c      	ite	eq
   43926:	2208      	moveq	r2, #8
   43928:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   4392a:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   4392c:	f7fe ff14 	bl	42758 <z_impl_zsock_connect>
	if (ret < 0) {
   43930:	2800      	cmp	r0, #0
   43932:	dbda      	blt.n	438ea <mqtt_client_tls_connect+0x3a>
	return 0;
   43934:	2000      	movs	r0, #0
   43936:	e7cb      	b.n	438d0 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   43938:	6b22      	ldr	r2, [r4, #48]	; 0x30
   4393a:	2a00      	cmp	r2, #0
   4393c:	d0db      	beq.n	438f6 <mqtt_client_tls_connect+0x46>
   4393e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   43940:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   43942:	9200      	str	r2, [sp, #0]
   43944:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43948:	2203      	movs	r2, #3
   4394a:	f7fe ff9c 	bl	42886 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4394e:	2800      	cmp	r0, #0
   43950:	dad1      	bge.n	438f6 <mqtt_client_tls_connect+0x46>
   43952:	e7ca      	b.n	438ea <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   43954:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   43956:	2a00      	cmp	r2, #0
   43958:	d0cf      	beq.n	438fa <mqtt_client_tls_connect+0x4a>
   4395a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   4395c:	0092      	lsls	r2, r2, #2
   4395e:	9200      	str	r2, [sp, #0]
   43960:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43964:	2201      	movs	r2, #1
   43966:	f7fe ff8e 	bl	42886 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4396a:	2800      	cmp	r0, #0
   4396c:	dac5      	bge.n	438fa <mqtt_client_tls_connect+0x4a>
   4396e:	e7bc      	b.n	438ea <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   43970:	4628      	mov	r0, r5
   43972:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   43974:	f7d9 fc76 	bl	1d264 <strlen>
   43978:	2202      	movs	r2, #2
   4397a:	9000      	str	r0, [sp, #0]
   4397c:	462b      	mov	r3, r5
   4397e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   43982:	4638      	mov	r0, r7
   43984:	f7fe ff7f 	bl	42886 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   43988:	2800      	cmp	r0, #0
   4398a:	dab9      	bge.n	43900 <mqtt_client_tls_connect+0x50>
   4398c:	e7ad      	b.n	438ea <mqtt_client_tls_connect+0x3a>

0004398e <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   4398e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   43992:	2400      	movs	r4, #0
{
   43994:	4607      	mov	r7, r0
   43996:	4688      	mov	r8, r1
   43998:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   4399a:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   4399c:	42ac      	cmp	r4, r5
   4399e:	d301      	bcc.n	439a4 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   439a0:	2000      	movs	r0, #0
   439a2:	e00e      	b.n	439c2 <mqtt_client_tls_write+0x34>
		ret = send(client->transport.tls.sock, data + offset,
   439a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   439a6:	2300      	movs	r3, #0
   439a8:	e9cd 6600 	strd	r6, r6, [sp]
   439ac:	1b2a      	subs	r2, r5, r4
   439ae:	eb08 0104 	add.w	r1, r8, r4
   439b2:	f7fe fee7 	bl	42784 <z_impl_zsock_sendto>
		if (ret < 0) {
   439b6:	2800      	cmp	r0, #0
   439b8:	da06      	bge.n	439c8 <mqtt_client_tls_write+0x3a>
			return -errno;
   439ba:	f7ff f9ae 	bl	42d1a <__errno>
   439be:	6800      	ldr	r0, [r0, #0]
   439c0:	4240      	negs	r0, r0
}
   439c2:	b002      	add	sp, #8
   439c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   439c8:	4404      	add	r4, r0
   439ca:	e7e7      	b.n	4399c <mqtt_client_tls_write+0xe>

000439cc <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   439cc:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   439ce:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   439d0:	2200      	movs	r2, #0
   439d2:	f7fe fef4 	bl	427be <z_impl_zsock_sendmsg>
	if (ret < 0) {
   439d6:	2800      	cmp	r0, #0
   439d8:	da04      	bge.n	439e4 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   439da:	f7ff f99e 	bl	42d1a <__errno>
   439de:	6800      	ldr	r0, [r0, #0]
   439e0:	4240      	negs	r0, r0
	}

	return 0;
}
   439e2:	bd08      	pop	{r3, pc}
	return 0;
   439e4:	2000      	movs	r0, #0
   439e6:	e7fc      	b.n	439e2 <mqtt_client_tls_write_msg+0x16>

000439e8 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   439e8:	b513      	push	{r0, r1, r4, lr}
   439ea:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   439ec:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   439ee:	bf14      	ite	ne
   439f0:	4623      	movne	r3, r4
   439f2:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   439f4:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   439f6:	e9cd 4400 	strd	r4, r4, [sp]
   439fa:	f7fe fef6 	bl	427ea <z_impl_zsock_recvfrom>
	if (ret < 0) {
   439fe:	2800      	cmp	r0, #0
   43a00:	da03      	bge.n	43a0a <mqtt_client_tls_read+0x22>
		return -errno;
   43a02:	f7ff f98a 	bl	42d1a <__errno>
   43a06:	6800      	ldr	r0, [r0, #0]
   43a08:	4240      	negs	r0, r0
	}

	return ret;
}
   43a0a:	b002      	add	sp, #8
   43a0c:	bd10      	pop	{r4, pc}

00043a0e <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   43a0e:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   43a10:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   43a12:	f7fe fe8a 	bl	4272a <z_impl_zsock_close>
	if (ret < 0) {
   43a16:	2800      	cmp	r0, #0
   43a18:	da04      	bge.n	43a24 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   43a1a:	f7ff f97e 	bl	42d1a <__errno>
   43a1e:	6800      	ldr	r0, [r0, #0]
   43a20:	4240      	negs	r0, r0
	}

	return 0;
}
   43a22:	bd08      	pop	{r3, pc}
	return 0;
   43a24:	2000      	movs	r0, #0
   43a26:	e7fc      	b.n	43a22 <mqtt_client_tls_disconnect+0x14>

00043a28 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a28:	6843      	ldr	r3, [r0, #4]
}
   43a2a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a2c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   43a2e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   43a30:	600b      	str	r3, [r1, #0]
}
   43a32:	4770      	bx	lr

00043a34 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a34:	6843      	ldr	r3, [r0, #4]
   43a36:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   43a38:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   43a3a:	4042      	eors	r2, r0
   43a3c:	400a      	ands	r2, r1
   43a3e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   43a40:	605a      	str	r2, [r3, #4]
}
   43a42:	2000      	movs	r0, #0
   43a44:	4770      	bx	lr

00043a46 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a46:	6843      	ldr	r3, [r0, #4]
}
   43a48:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a4a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   43a4c:	6099      	str	r1, [r3, #8]
}
   43a4e:	4770      	bx	lr

00043a50 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a50:	6843      	ldr	r3, [r0, #4]
}
   43a52:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a54:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   43a56:	60d9      	str	r1, [r3, #12]
}
   43a58:	4770      	bx	lr

00043a5a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a5a:	6843      	ldr	r3, [r0, #4]
}
   43a5c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   43a5e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   43a60:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   43a62:	4059      	eors	r1, r3
    p_reg->OUT = value;
   43a64:	6051      	str	r1, [r2, #4]
}
   43a66:	4770      	bx	lr

00043a68 <nrf_gpio_cfg_sense_set>:
{
   43a68:	b513      	push	{r0, r1, r4, lr}
   43a6a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43a6c:	a801      	add	r0, sp, #4
{
   43a6e:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43a70:	f7e4 fb8c 	bl	2818c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   43a74:	9a01      	ldr	r2, [sp, #4]
   43a76:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   43a7a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   43a7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   43a82:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   43a86:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   43a8a:	b002      	add	sp, #8
   43a8c:	bd10      	pop	{r4, pc}

00043a8e <flash_nrf_write_protection>:
}
   43a8e:	2000      	movs	r0, #0
   43a90:	4770      	bx	lr

00043a92 <is_regular_addr_valid>:
{
   43a92:	b538      	push	{r3, r4, r5, lr}
   43a94:	4604      	mov	r4, r0
   43a96:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   43a98:	f001 f9d2 	bl	44e40 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   43a9c:	4284      	cmp	r4, r0
   43a9e:	d209      	bcs.n	43ab4 <is_regular_addr_valid+0x22>
   43aa0:	2c00      	cmp	r4, #0
   43aa2:	db07      	blt.n	43ab4 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   43aa4:	42a8      	cmp	r0, r5
   43aa6:	d305      	bcc.n	43ab4 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   43aa8:	442c      	add	r4, r5
	    len > flash_size ||
   43aaa:	4284      	cmp	r4, r0
   43aac:	bf8c      	ite	hi
   43aae:	2000      	movhi	r0, #0
   43ab0:	2001      	movls	r0, #1
}
   43ab2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   43ab4:	2000      	movs	r0, #0
   43ab6:	e7fc      	b.n	43ab2 <is_regular_addr_valid+0x20>

00043ab8 <flash_nrf_read>:
{
   43ab8:	b570      	push	{r4, r5, r6, lr}
   43aba:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   43abc:	4619      	mov	r1, r3
   43abe:	4628      	mov	r0, r5
{
   43ac0:	4616      	mov	r6, r2
   43ac2:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   43ac4:	f7ff ffe5 	bl	43a92 <is_regular_addr_valid>
   43ac8:	b170      	cbz	r0, 43ae8 <flash_nrf_read+0x30>
	if (!len) {
   43aca:	b184      	cbz	r4, 43aee <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   43acc:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   43ad0:	4622      	mov	r2, r4
   43ad2:	4629      	mov	r1, r5
   43ad4:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   43ad6:	da03      	bge.n	43ae0 <flash_nrf_read+0x28>
}
   43ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   43adc:	f7d4 ba80 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   43ae0:	f001 fba2 	bl	45228 <memcpy>
   43ae4:	2000      	movs	r0, #0
}
   43ae6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   43ae8:	f06f 0015 	mvn.w	r0, #21
   43aec:	e7fb      	b.n	43ae6 <flash_nrf_read+0x2e>
		return 0;
   43aee:	4620      	mov	r0, r4
   43af0:	e7f9      	b.n	43ae6 <flash_nrf_read+0x2e>

00043af2 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   43af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   43af6:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   43af8:	6883      	ldr	r3, [r0, #8]
{
   43afa:	b086      	sub	sp, #24
   43afc:	4689      	mov	r9, r1
   43afe:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   43b00:	695b      	ldr	r3, [r3, #20]
   43b02:	aa02      	add	r2, sp, #8
   43b04:	a901      	add	r1, sp, #4
   43b06:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   43b08:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   43b0a:	4625      	mov	r5, r4
   43b0c:	9b02      	ldr	r3, [sp, #8]
   43b0e:	42ab      	cmp	r3, r5
   43b10:	d802      	bhi.n	43b18 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   43b12:	b006      	add	sp, #24
   43b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   43b18:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   43b1a:	9f01      	ldr	r7, [sp, #4]
   43b1c:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   43b20:	687b      	ldr	r3, [r7, #4]
   43b22:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43b24:	683a      	ldr	r2, [r7, #0]
   43b26:	eb08 0306 	add.w	r3, r8, r6
   43b2a:	42b2      	cmp	r2, r6
   43b2c:	d802      	bhi.n	43b34 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   43b2e:	3501      	adds	r5, #1
   43b30:	4698      	mov	r8, r3
   43b32:	e7eb      	b.n	43b0c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   43b34:	4651      	mov	r1, sl
   43b36:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   43b38:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   43b3a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   43b3c:	47c8      	blx	r9
   43b3e:	2800      	cmp	r0, #0
   43b40:	d0e7      	beq.n	43b12 <flash_page_foreach+0x20>
			off += page_info.size;
   43b42:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   43b44:	3601      	adds	r6, #1
			off += page_info.size;
   43b46:	441c      	add	r4, r3
			page++;
   43b48:	e7ec      	b.n	43b24 <flash_page_foreach+0x32>

00043b4a <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   43b4a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   43b4c:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   43b4e:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   43b50:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   43b52:	7b91      	ldrb	r1, [r2, #14]
   43b54:	b159      	cbz	r1, 43b6e <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43b56:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   43b5a:	b141      	cbz	r1, 43b6e <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   43b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
   43b60:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43b64:	2101      	movs	r1, #1
   43b66:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   43b68:	2300      	movs	r3, #0
   43b6a:	7393      	strb	r3, [r2, #14]
		return;
   43b6c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43b6e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   43b72:	b121      	cbz	r1, 43b7e <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43b74:	2100      	movs	r1, #0
   43b76:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   43b7a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   43b7e:	6813      	ldr	r3, [r2, #0]
   43b80:	b10b      	cbz	r3, 43b86 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   43b82:	6851      	ldr	r1, [r2, #4]
   43b84:	4718      	bx	r3
}
   43b86:	4770      	bx	lr

00043b88 <uarte_nrfx_config_get>:
{
   43b88:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   43b8a:	68c3      	ldr	r3, [r0, #12]
   43b8c:	3304      	adds	r3, #4
   43b8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   43b92:	e882 0003 	stmia.w	r2, {r0, r1}
}
   43b96:	2000      	movs	r0, #0
   43b98:	4770      	bx	lr

00043b9a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   43b9a:	6843      	ldr	r3, [r0, #4]
   43b9c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   43b9e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   43ba2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   43ba6:	4770      	bx	lr

00043ba8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   43ba8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   43baa:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   43bac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43bae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   43bb2:	b148      	cbz	r0, 43bc8 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43bb4:	2000      	movs	r0, #0
	*c = data->rx_data;
   43bb6:	7d12      	ldrb	r2, [r2, #20]
   43bb8:	700a      	strb	r2, [r1, #0]
   43bba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   43bbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43bc2:	2201      	movs	r2, #1
   43bc4:	601a      	str	r2, [r3, #0]
	return 0;
   43bc6:	4770      	bx	lr
		return -1;
   43bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   43bcc:	4770      	bx	lr

00043bce <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   43bce:	6843      	ldr	r3, [r0, #4]
{
   43bd0:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   43bd2:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43bd4:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   43bd8:	b1cb      	cbz	r3, 43c0e <uarte_nrfx_fifo_fill+0x40>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43bda:	68c5      	ldr	r5, [r0, #12]
	if (len > data->int_driven->tx_buff_size) {
   43bdc:	68eb      	ldr	r3, [r5, #12]
   43bde:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43be0:	2300      	movs	r3, #0
   43be2:	4290      	cmp	r0, r2
   43be4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   43be8:	bfa8      	it	ge
   43bea:	4610      	movge	r0, r2
   43bec:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   43bf0:	68ea      	ldr	r2, [r5, #12]
   43bf2:	4283      	cmp	r3, r0
   43bf4:	6892      	ldr	r2, [r2, #8]
   43bf6:	db06      	blt.n	43c06 <uarte_nrfx_fifo_fill+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43bf8:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43bfa:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43bfe:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43c02:	60a3      	str	r3, [r4, #8]
}
   43c04:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   43c06:	5cce      	ldrb	r6, [r1, r3]
   43c08:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   43c0a:	3301      	adds	r3, #1
   43c0c:	e7f0      	b.n	43bf0 <uarte_nrfx_fifo_fill+0x22>
		return 0;
   43c0e:	4618      	mov	r0, r3
   43c10:	e7f8      	b.n	43c04 <uarte_nrfx_fifo_fill+0x36>

00043c12 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   43c12:	6843      	ldr	r3, [r0, #4]
   43c14:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43c16:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   43c1a:	b153      	cbz	r3, 43c32 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   43c1c:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43c1e:	2000      	movs	r0, #0
   43c20:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   43c24:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43c28:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   43c2a:	7d1b      	ldrb	r3, [r3, #20]
   43c2c:	700b      	strb	r3, [r1, #0]
   43c2e:	6010      	str	r0, [r2, #0]
   43c30:	4770      	bx	lr
	int num_rx = 0;
   43c32:	4618      	mov	r0, r3
}
   43c34:	4770      	bx	lr

00043c36 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   43c36:	2100      	movs	r1, #0
   43c38:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   43c3a:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   43c3c:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   43c3e:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   43c40:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   43c42:	f44f 7280 	mov.w	r2, #256	; 0x100
   43c46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43c4a:	4770      	bx	lr

00043c4c <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   43c4c:	2201      	movs	r2, #1
   43c4e:	68c3      	ldr	r3, [r0, #12]
   43c50:	68db      	ldr	r3, [r3, #12]
   43c52:	739a      	strb	r2, [r3, #14]
}
   43c54:	4770      	bx	lr

00043c56 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   43c56:	68c3      	ldr	r3, [r0, #12]
   43c58:	68db      	ldr	r3, [r3, #12]
   43c5a:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   43c5c:	b94b      	cbnz	r3, 43c72 <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   43c5e:	6843      	ldr	r3, [r0, #4]
   43c60:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43c62:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   43c66:	b128      	cbz	r0, 43c74 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   43c68:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   43c6c:	f3c0 2000 	ubfx	r0, r0, #8, #1
   43c70:	4770      	bx	lr
   43c72:	2000      	movs	r0, #0
}
   43c74:	4770      	bx	lr

00043c76 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   43c76:	6843      	ldr	r3, [r0, #4]
   43c78:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43c7a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   43c7e:	3000      	adds	r0, #0
   43c80:	bf18      	it	ne
   43c82:	2001      	movne	r0, #1
   43c84:	4770      	bx	lr

00043c86 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   43c86:	2210      	movs	r2, #16
	return config->uarte_regs;
   43c88:	6843      	ldr	r3, [r0, #4]
   43c8a:	681b      	ldr	r3, [r3, #0]
   43c8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43c90:	4770      	bx	lr

00043c92 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   43c92:	2210      	movs	r2, #16
	return config->uarte_regs;
   43c94:	6843      	ldr	r3, [r0, #4]
   43c96:	681b      	ldr	r3, [r3, #0]
   43c98:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   43c9c:	4770      	bx	lr

00043c9e <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   43c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   43ca2:	6843      	ldr	r3, [r0, #4]
   43ca4:	681b      	ldr	r3, [r3, #0]
   43ca6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   43caa:	4770      	bx	lr

00043cac <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   43cac:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   43cb0:	6843      	ldr	r3, [r0, #4]
   43cb2:	681b      	ldr	r3, [r3, #0]
   43cb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   43cb8:	4770      	bx	lr

00043cba <uarte_nrfx_irq_update>:
}
   43cba:	2001      	movs	r0, #1
   43cbc:	4770      	bx	lr

00043cbe <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   43cbe:	68c3      	ldr	r3, [r0, #12]
   43cc0:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   43cc2:	e9c3 1200 	strd	r1, r2, [r3]
}
   43cc6:	4770      	bx	lr

00043cc8 <uarte_nrfx_irq_is_pending>:
{
   43cc8:	b508      	push	{r3, lr}
	return config->uarte_regs;
   43cca:	6843      	ldr	r3, [r0, #4]
{
   43ccc:	4602      	mov	r2, r0
	return config->uarte_regs;
   43cce:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   43cd0:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   43cd4:	05db      	lsls	r3, r3, #23
   43cd6:	d405      	bmi.n	43ce4 <uarte_nrfx_irq_is_pending+0x1c>
   43cd8:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   43cdc:	f010 0010 	ands.w	r0, r0, #16
   43ce0:	d106      	bne.n	43cf0 <uarte_nrfx_irq_is_pending+0x28>
}
   43ce2:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   43ce4:	f7ff ffb7 	bl	43c56 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   43ce8:	2800      	cmp	r0, #0
   43cea:	d0f5      	beq.n	43cd8 <uarte_nrfx_irq_is_pending+0x10>
		||
   43cec:	2001      	movs	r0, #1
   43cee:	e7f8      	b.n	43ce2 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   43cf0:	4610      	mov	r0, r2
   43cf2:	f7ff ffc0 	bl	43c76 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   43cf6:	3000      	adds	r0, #0
   43cf8:	bf18      	it	ne
   43cfa:	2001      	movne	r0, #1
   43cfc:	e7f1      	b.n	43ce2 <uarte_nrfx_irq_is_pending+0x1a>

00043cfe <uarte_nrfx_poll_out>:
{
   43cfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   43d02:	6843      	ldr	r3, [r0, #4]
{
   43d04:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   43d08:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43d0a:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   43d0c:	f001 f942 	bl	44f94 <k_is_in_isr>
   43d10:	bb98      	cbnz	r0, 43d7a <uarte_nrfx_poll_out+0x7c>
   43d12:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   43d14:	f04f 0801 	mov.w	r8, #1
   43d18:	f106 0710 	add.w	r7, r6, #16
   43d1c:	e8d7 3fef 	ldaex	r3, [r7]
   43d20:	2b00      	cmp	r3, #0
   43d22:	d103      	bne.n	43d2c <uarte_nrfx_poll_out+0x2e>
   43d24:	e8c7 8fe2 	stlex	r2, r8, [r7]
   43d28:	2a00      	cmp	r2, #0
   43d2a:	d1f7      	bne.n	43d1c <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   43d2c:	d007      	beq.n	43d3e <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   43d2e:	2021      	movs	r0, #33	; 0x21
   43d30:	2100      	movs	r1, #0
   43d32:	3d01      	subs	r5, #1
   43d34:	f7fa fa2a 	bl	3e18c <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   43d38:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   43d3c:	d1ee      	bne.n	43d1c <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43d3e:	2300      	movs	r3, #0
   43d40:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   43d44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43d48:	f10d 0307 	add.w	r3, sp, #7
   43d4c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43d50:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43d52:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   43d56:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43d5a:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   43d5c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   43d60:	b923      	cbnz	r3, 43d6c <uarte_nrfx_poll_out+0x6e>
   43d62:	2001      	movs	r0, #1
   43d64:	f001 f86a 	bl	44e3c <nrfx_busy_wait>
   43d68:	3d01      	subs	r5, #1
   43d6a:	d1f7      	bne.n	43d5c <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43d6c:	2301      	movs	r3, #1
   43d6e:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   43d70:	2300      	movs	r3, #0
   43d72:	6133      	str	r3, [r6, #16]
}
   43d74:	b002      	add	sp, #8
   43d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   43d7a:	2301      	movs	r3, #1
   43d7c:	6133      	str	r3, [r6, #16]
   43d7e:	e7de      	b.n	43d3e <uarte_nrfx_poll_out+0x40>

00043d80 <uarte_instance_init.constprop.4>:
static int uarte_instance_init(const struct device *dev,
   43d80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   43d84:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   43d88:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   43d8a:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   43d8c:	681c      	ldr	r4, [r3, #0]
   43d8e:	680b      	ldr	r3, [r1, #0]
   43d90:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   43d94:	4606      	mov	r6, r0
	data->dev = dev;
   43d96:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43d98:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   43d9a:	460d      	mov	r5, r1
   43d9c:	9301      	str	r3, [sp, #4]
   43d9e:	f7e4 fd7f 	bl	288a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   43da2:	2301      	movs	r3, #1
   43da4:	9a01      	ldr	r2, [sp, #4]
   43da6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   43da8:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   43daa:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43dac:	a801      	add	r0, sp, #4
   43dae:	9301      	str	r3, [sp, #4]
   43db0:	f7e4 fd76 	bl	288a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   43db4:	2203      	movs	r2, #3
   43db6:	9b01      	ldr	r3, [sp, #4]
   43db8:	3380      	adds	r3, #128	; 0x80
   43dba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   43dbe:	686b      	ldr	r3, [r5, #4]
   43dc0:	1c58      	adds	r0, r3, #1
   43dc2:	d007      	beq.n	43dd4 <uarte_instance_init.constprop.4+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43dc4:	a801      	add	r0, sp, #4
   43dc6:	9301      	str	r3, [sp, #4]
   43dc8:	f7e4 fd6a 	bl	288a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   43dcc:	9b01      	ldr	r3, [sp, #4]
   43dce:	3380      	adds	r3, #128	; 0x80
   43dd0:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   43dd4:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   43dd8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   43ddc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   43de0:	68ab      	ldr	r3, [r5, #8]
   43de2:	1c59      	adds	r1, r3, #1
   43de4:	d008      	beq.n	43df8 <uarte_instance_init.constprop.4+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43de6:	a801      	add	r0, sp, #4
   43de8:	9301      	str	r3, [sp, #4]
   43dea:	f7e4 fd59 	bl	288a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   43dee:	2200      	movs	r2, #0
   43df0:	9b01      	ldr	r3, [sp, #4]
   43df2:	3380      	adds	r3, #128	; 0x80
   43df4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   43df8:	68eb      	ldr	r3, [r5, #12]
   43dfa:	1c5a      	adds	r2, r3, #1
   43dfc:	d011      	beq.n	43e22 <uarte_instance_init.constprop.4+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43dfe:	a801      	add	r0, sp, #4
   43e00:	9301      	str	r3, [sp, #4]
   43e02:	f7e4 fd4d 	bl	288a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   43e06:	2301      	movs	r3, #1
   43e08:	9a01      	ldr	r2, [sp, #4]
   43e0a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   43e0c:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   43e0e:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   43e10:	a801      	add	r0, sp, #4
   43e12:	9301      	str	r3, [sp, #4]
   43e14:	f7e4 fd44 	bl	288a0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   43e18:	2203      	movs	r2, #3
   43e1a:	9b01      	ldr	r3, [sp, #4]
   43e1c:	3380      	adds	r3, #128	; 0x80
   43e1e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   43e22:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   43e24:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   43e28:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   43e2a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   43e2e:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   43e30:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   43e34:	f7e4 fc7e 	bl	28734 <uarte_nrfx_configure>
	if (err) {
   43e38:	b9d8      	cbnz	r0, 43e72 <uarte_instance_init.constprop.4+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   43e3a:	2308      	movs	r3, #8
   43e3c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   43e40:	686b      	ldr	r3, [r5, #4]
   43e42:	3301      	adds	r3, #1
   43e44:	d00b      	beq.n	43e5e <uarte_instance_init.constprop.4+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   43e46:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   43e4a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   43e4e:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   43e52:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   43e56:	2301      	movs	r3, #1
   43e58:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43e5c:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   43e5e:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   43e60:	689b      	ldr	r3, [r3, #8]
   43e62:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   43e66:	2300      	movs	r3, #0
   43e68:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   43e6c:	2301      	movs	r3, #1
   43e6e:	60a3      	str	r3, [r4, #8]
   43e70:	60e3      	str	r3, [r4, #12]
}
   43e72:	b002      	add	sp, #8
   43e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00043e78 <entropy_cc310_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   43e78:	2000      	movs	r0, #0
   43e7a:	4770      	bx	lr

00043e7c <parse_hex4>:
    for (i = 0; i < 4; i++)
   43e7c:	2200      	movs	r2, #0
    unsigned int h = 0;
   43e7e:	4613      	mov	r3, r2
{
   43e80:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   43e82:	5c81      	ldrb	r1, [r0, r2]
   43e84:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   43e88:	2c09      	cmp	r4, #9
   43e8a:	d80a      	bhi.n	43ea2 <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   43e8c:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   43e8e:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   43e90:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   43e92:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   43e96:	bf18      	it	ne
   43e98:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   43e9a:	2a04      	cmp	r2, #4
   43e9c:	d1f1      	bne.n	43e82 <parse_hex4+0x6>
}
   43e9e:	4618      	mov	r0, r3
   43ea0:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   43ea2:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   43ea6:	2c05      	cmp	r4, #5
   43ea8:	d801      	bhi.n	43eae <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   43eaa:	3b37      	subs	r3, #55	; 0x37
   43eac:	e7ef      	b.n	43e8e <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   43eae:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   43eb2:	2c05      	cmp	r4, #5
   43eb4:	d801      	bhi.n	43eba <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   43eb6:	3b57      	subs	r3, #87	; 0x57
   43eb8:	e7e9      	b.n	43e8e <parse_hex4+0x12>
            return 0;
   43eba:	2300      	movs	r3, #0
   43ebc:	e7ef      	b.n	43e9e <parse_hex4+0x22>

00043ebe <buffer_skip_whitespace>:
{
   43ebe:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   43ec0:	b140      	cbz	r0, 43ed4 <buffer_skip_whitespace+0x16>
   43ec2:	6801      	ldr	r1, [r0, #0]
   43ec4:	b171      	cbz	r1, 43ee4 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   43ec6:	6842      	ldr	r2, [r0, #4]
   43ec8:	6883      	ldr	r3, [r0, #8]
   43eca:	4293      	cmp	r3, r2
   43ecc:	d206      	bcs.n	43edc <buffer_skip_whitespace+0x1e>
   43ece:	5ccc      	ldrb	r4, [r1, r3]
   43ed0:	2c20      	cmp	r4, #32
   43ed2:	d900      	bls.n	43ed6 <buffer_skip_whitespace+0x18>
}
   43ed4:	bd10      	pop	{r4, pc}
       buffer->offset++;
   43ed6:	3301      	adds	r3, #1
   43ed8:	6083      	str	r3, [r0, #8]
   43eda:	e7f5      	b.n	43ec8 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   43edc:	d1fa      	bne.n	43ed4 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   43ede:	3a01      	subs	r2, #1
   43ee0:	6082      	str	r2, [r0, #8]
   43ee2:	e7f7      	b.n	43ed4 <buffer_skip_whitespace+0x16>
        return NULL;
   43ee4:	4608      	mov	r0, r1
   43ee6:	e7f5      	b.n	43ed4 <buffer_skip_whitespace+0x16>

00043ee8 <update_offset>:
{
   43ee8:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   43eea:	4604      	mov	r4, r0
   43eec:	b140      	cbz	r0, 43f00 <update_offset+0x18>
   43eee:	6803      	ldr	r3, [r0, #0]
   43ef0:	b133      	cbz	r3, 43f00 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   43ef2:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   43ef4:	4418      	add	r0, r3
   43ef6:	f7d9 f9b5 	bl	1d264 <strlen>
   43efa:	68a3      	ldr	r3, [r4, #8]
   43efc:	4418      	add	r0, r3
   43efe:	60a0      	str	r0, [r4, #8]
}
   43f00:	bd10      	pop	{r4, pc}

00043f02 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   43f02:	b161      	cbz	r1, 43f1e <add_item_to_array+0x1c>
   43f04:	b160      	cbz	r0, 43f20 <add_item_to_array+0x1e>
    child = array->child;
   43f06:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   43f08:	b91b      	cbnz	r3, 43f12 <add_item_to_array+0x10>
        array->child = item;
   43f0a:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   43f0c:	2001      	movs	r0, #1
   43f0e:	4770      	bx	lr
        while (child->next)
   43f10:	4613      	mov	r3, r2
   43f12:	681a      	ldr	r2, [r3, #0]
   43f14:	2a00      	cmp	r2, #0
   43f16:	d1fb      	bne.n	43f10 <add_item_to_array+0xe>
    prev->next = item;
   43f18:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   43f1a:	604b      	str	r3, [r1, #4]
   43f1c:	e7f6      	b.n	43f0c <add_item_to_array+0xa>
        return false;
   43f1e:	4608      	mov	r0, r1
}
   43f20:	4770      	bx	lr

00043f22 <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   43f22:	b510      	push	{r4, lr}
   43f24:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   43f26:	2028      	movs	r0, #40	; 0x28
   43f28:	4798      	blx	r3
    if (node)
   43f2a:	4604      	mov	r4, r0
   43f2c:	b118      	cbz	r0, 43f36 <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   43f2e:	2228      	movs	r2, #40	; 0x28
   43f30:	2100      	movs	r1, #0
   43f32:	f001 f999 	bl	45268 <memset>
}
   43f36:	4620      	mov	r0, r4
   43f38:	bd10      	pop	{r4, pc}

00043f3a <ensure>:
{
   43f3a:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   43f3c:	4604      	mov	r4, r0
   43f3e:	b1b8      	cbz	r0, 43f70 <ensure+0x36>
   43f40:	6805      	ldr	r5, [r0, #0]
   43f42:	b165      	cbz	r5, 43f5e <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   43f44:	6842      	ldr	r2, [r0, #4]
   43f46:	b112      	cbz	r2, 43f4e <ensure+0x14>
   43f48:	6883      	ldr	r3, [r0, #8]
   43f4a:	429a      	cmp	r2, r3
   43f4c:	d910      	bls.n	43f70 <ensure+0x36>
    if (needed > INT_MAX)
   43f4e:	2900      	cmp	r1, #0
   43f50:	db0e      	blt.n	43f70 <ensure+0x36>
    needed += p->offset + 1;
   43f52:	68a0      	ldr	r0, [r4, #8]
   43f54:	4401      	add	r1, r0
   43f56:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   43f58:	429a      	cmp	r2, r3
   43f5a:	d302      	bcc.n	43f62 <ensure+0x28>
        return p->buffer + p->offset;
   43f5c:	4405      	add	r5, r0
}
   43f5e:	4628      	mov	r0, r5
   43f60:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   43f62:	6922      	ldr	r2, [r4, #16]
   43f64:	b922      	cbnz	r2, 43f70 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   43f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   43f6a:	d303      	bcc.n	43f74 <ensure+0x3a>
        if (needed <= INT_MAX)
   43f6c:	2b00      	cmp	r3, #0
   43f6e:	da0f      	bge.n	43f90 <ensure+0x56>
        return NULL;
   43f70:	2500      	movs	r5, #0
   43f72:	e7f4      	b.n	43f5e <ensure+0x24>
        newsize = needed + 1;
   43f74:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   43f76:	6a23      	ldr	r3, [r4, #32]
   43f78:	b16b      	cbz	r3, 43f96 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   43f7a:	4628      	mov	r0, r5
   43f7c:	4631      	mov	r1, r6
   43f7e:	4798      	blx	r3
        if (newbuffer == NULL)
   43f80:	4605      	mov	r5, r0
   43f82:	b9b0      	cbnz	r0, 43fb2 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   43f84:	69e3      	ldr	r3, [r4, #28]
   43f86:	6820      	ldr	r0, [r4, #0]
   43f88:	4798      	blx	r3
            p->buffer = NULL;
   43f8a:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   43f8e:	e7e6      	b.n	43f5e <ensure+0x24>
            newsize = INT_MAX;
   43f90:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   43f94:	e7ef      	b.n	43f76 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   43f96:	69a3      	ldr	r3, [r4, #24]
   43f98:	4630      	mov	r0, r6
   43f9a:	4798      	blx	r3
        if (!newbuffer)
   43f9c:	4605      	mov	r5, r0
   43f9e:	2800      	cmp	r0, #0
   43fa0:	d0f0      	beq.n	43f84 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   43fa2:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   43fa4:	6821      	ldr	r1, [r4, #0]
   43fa6:	3201      	adds	r2, #1
   43fa8:	f001 f93e 	bl	45228 <memcpy>
        p->hooks.deallocate(p->buffer);
   43fac:	69e3      	ldr	r3, [r4, #28]
   43fae:	6820      	ldr	r0, [r4, #0]
   43fb0:	4798      	blx	r3
    return newbuffer + p->offset;
   43fb2:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   43fb4:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   43fb8:	441d      	add	r5, r3
   43fba:	e7d0      	b.n	43f5e <ensure+0x24>

00043fbc <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   43fbc:	2200      	movs	r2, #0
   43fbe:	4611      	mov	r1, r2
   43fc0:	f7e5 b94c 	b.w	2925c <cJSON_ParseWithOpts>

00043fc4 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   43fc4:	2100      	movs	r1, #0
   43fc6:	f7e5 b877 	b.w	290b8 <print.constprop.14>

00043fca <cJSON_GetArraySize>:
    if (array == NULL)
   43fca:	b110      	cbz	r0, 43fd2 <cJSON_GetArraySize+0x8>
    child = array->child;
   43fcc:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   43fce:	2000      	movs	r0, #0
    while(child != NULL)
   43fd0:	b903      	cbnz	r3, 43fd4 <cJSON_GetArraySize+0xa>
}
   43fd2:	4770      	bx	lr
        size++;
   43fd4:	3001      	adds	r0, #1
        child = child->next;
   43fd6:	681b      	ldr	r3, [r3, #0]
   43fd8:	e7fa      	b.n	43fd0 <cJSON_GetArraySize+0x6>

00043fda <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   43fda:	2200      	movs	r2, #0
   43fdc:	f7e4 bdfc 	b.w	28bd8 <get_object_item>

00043fe0 <cJSON_HasObjectItem>:
{
   43fe0:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   43fe2:	f7ff fffa 	bl	43fda <cJSON_GetObjectItem>
}
   43fe6:	3000      	adds	r0, #0
   43fe8:	bf18      	it	ne
   43fea:	2001      	movne	r0, #1
   43fec:	bd08      	pop	{r3, pc}

00043fee <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   43fee:	f7ff bf88 	b.w	43f02 <add_item_to_array>

00043ff2 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   43ff2:	2300      	movs	r3, #0
   43ff4:	f7e5 b8c2 	b.w	2917c <add_item_to_object.constprop.12>

00043ff8 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   43ff8:	b180      	cbz	r0, 4401c <cJSON_DetachItemViaPointer+0x24>
   43ffa:	b169      	cbz	r1, 44018 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   43ffc:	684a      	ldr	r2, [r1, #4]
   43ffe:	b10a      	cbz	r2, 44004 <cJSON_DetachItemViaPointer+0xc>
   44000:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   44002:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   44004:	680b      	ldr	r3, [r1, #0]
   44006:	b103      	cbz	r3, 4400a <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   44008:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   4400a:	6882      	ldr	r2, [r0, #8]
   4400c:	428a      	cmp	r2, r1
        parent->child = item->next;
   4400e:	bf08      	it	eq
   44010:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   44012:	2300      	movs	r3, #0
    item->next = NULL;
   44014:	e9c1 3300 	strd	r3, r3, [r1]
}
   44018:	4608      	mov	r0, r1
   4401a:	4770      	bx	lr
        return NULL;
   4401c:	4601      	mov	r1, r0
   4401e:	e7fb      	b.n	44018 <cJSON_DetachItemViaPointer+0x20>

00044020 <cJSON_DetachItemFromObject>:
{
   44020:	b510      	push	{r4, lr}
   44022:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   44024:	f7ff ffd9 	bl	43fda <cJSON_GetObjectItem>
    return cJSON_DetachItemViaPointer(object, to_detach);
   44028:	4601      	mov	r1, r0
   4402a:	4620      	mov	r0, r4
}
   4402c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   44030:	f7ff bfe2 	b.w	43ff8 <cJSON_DetachItemViaPointer>

00044034 <cJSON_AddNullToObject>:
{
   44034:	b570      	push	{r4, r5, r6, lr}
   44036:	4605      	mov	r5, r0
   44038:	460e      	mov	r6, r1
    cJSON *null = cJSON_CreateNull();
   4403a:	f7e5 f97f 	bl	2933c <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   4403e:	2300      	movs	r3, #0
   44040:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   44042:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   44044:	4631      	mov	r1, r6
   44046:	4628      	mov	r0, r5
   44048:	f7e5 f898 	bl	2917c <add_item_to_object.constprop.12>
   4404c:	4605      	mov	r5, r0
   4404e:	b918      	cbnz	r0, 44058 <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   44050:	4620      	mov	r0, r4
   44052:	f7e5 f8df 	bl	29214 <cJSON_Delete>
    return NULL;
   44056:	462c      	mov	r4, r5
}
   44058:	4620      	mov	r0, r4
   4405a:	bd70      	pop	{r4, r5, r6, pc}

0004405c <cJSON_IsTrue>:
    return (item->type & 0xFF) == cJSON_False;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
{
    if (item == NULL)
   4405c:	b118      	cbz	r0, 44066 <cJSON_IsTrue+0xa>
    {
        return false;
    }

    return (item->type & 0xff) == cJSON_True;
   4405e:	7b00      	ldrb	r0, [r0, #12]
   44060:	1e83      	subs	r3, r0, #2
   44062:	4258      	negs	r0, r3
   44064:	4158      	adcs	r0, r3
}
   44066:	4770      	bx	lr

00044068 <cJSON_IsBool>:


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
    if (item == NULL)
   44068:	b120      	cbz	r0, 44074 <cJSON_IsBool+0xc>
    {
        return false;
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
   4406a:	68c0      	ldr	r0, [r0, #12]
   4406c:	f010 0003 	ands.w	r0, r0, #3
   44070:	bf18      	it	ne
   44072:	2001      	movne	r0, #1
}
   44074:	4770      	bx	lr

00044076 <cJSON_IsNull>:
CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
{
    if (item == NULL)
   44076:	b118      	cbz	r0, 44080 <cJSON_IsNull+0xa>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_NULL;
   44078:	7b00      	ldrb	r0, [r0, #12]
   4407a:	1f03      	subs	r3, r0, #4
   4407c:	4258      	negs	r0, r3
   4407e:	4158      	adcs	r0, r3
}
   44080:	4770      	bx	lr

00044082 <cJSON_IsNumber>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
    if (item == NULL)
   44082:	b120      	cbz	r0, 4408e <cJSON_IsNumber+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Number;
   44084:	7b00      	ldrb	r0, [r0, #12]
   44086:	f1a0 0308 	sub.w	r3, r0, #8
   4408a:	4258      	negs	r0, r3
   4408c:	4158      	adcs	r0, r3
}
   4408e:	4770      	bx	lr

00044090 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
    if (item == NULL)
   44090:	b120      	cbz	r0, 4409c <cJSON_IsString+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_String;
   44092:	7b00      	ldrb	r0, [r0, #12]
   44094:	f1a0 0310 	sub.w	r3, r0, #16
   44098:	4258      	negs	r0, r3
   4409a:	4158      	adcs	r0, r3
}
   4409c:	4770      	bx	lr

0004409e <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   4409e:	b508      	push	{r3, lr}
   440a0:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   440a2:	f7ff fff5 	bl	44090 <cJSON_IsString>
   440a6:	b100      	cbz	r0, 440aa <cJSON_GetStringValue+0xc>
    return item->valuestring;
   440a8:	6910      	ldr	r0, [r2, #16]
}
   440aa:	bd08      	pop	{r3, pc}

000440ac <cJSON_IsObject>:
    return (item->type & 0xFF) == cJSON_Array;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
{
    if (item == NULL)
   440ac:	b120      	cbz	r0, 440b8 <cJSON_IsObject+0xc>
    {
        return false;
    }

    return (item->type & 0xFF) == cJSON_Object;
   440ae:	7b00      	ldrb	r0, [r0, #12]
   440b0:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   440b4:	4258      	negs	r0, r3
   440b6:	4158      	adcs	r0, r3
}
   440b8:	4770      	bx	lr

000440ba <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   440ba:	f001 b87a 	b.w	451b2 <k_free>

000440be <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   440be:	f7fb bad9 	b.w	3f674 <k_malloc>

000440c2 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   440c2:	b508      	push	{r3, lr}
#ifdef CONFIG_LTE_LINK_CONTROL
	lte_lc_deinit();
   440c4:	f7e7 fc60 	bl	2b988 <lte_lc_deinit>
#endif
	bsd_shutdown();
   440c8:	f7f5 fbda 	bl	39880 <bsd_shutdown>

	return 0;
}
   440cc:	2000      	movs	r0, #0
   440ce:	bd08      	pop	{r3, pc}

000440d0 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   440d0:	4668      	mov	r0, sp
   440d2:	f020 0107 	bic.w	r1, r0, #7
   440d6:	468d      	mov	sp, r1
   440d8:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   440da:	f7ef fc79 	bl	339d0 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   440de:	f7e2 fdcf 	bl	26c80 <_arch_isr_direct_pm>
   440e2:	f7e3 fa25 	bl	27530 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   440e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   440ea:	4685      	mov	sp, r0
   440ec:	4770      	bx	lr

000440ee <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   440ee:	4668      	mov	r0, sp
   440f0:	f020 0107 	bic.w	r1, r0, #7
   440f4:	468d      	mov	sp, r1
   440f6:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   440f8:	f7f0 f810 	bl	3411c <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   440fc:	f7e2 fdc0 	bl	26c80 <_arch_isr_direct_pm>
   44100:	f7e3 fa16 	bl	27530 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   44104:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   44108:	4685      	mov	sp, r0
   4410a:	4770      	bx	lr

0004410c <trace_task_create>:
{
   4410c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   4410e:	201d      	movs	r0, #29
   44110:	2200      	movs	r2, #0
   44112:	2106      	movs	r1, #6
   44114:	f7e2 fd82 	bl	26c1c <z_arm_irq_priority_set>
}
   44118:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   4411c:	201d      	movs	r0, #29
   4411e:	f7e2 bd5f 	b.w	26be0 <arch_irq_enable>

00044122 <read_task_create>:
{
   44122:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   44124:	201c      	movs	r0, #28
   44126:	2200      	movs	r2, #0
   44128:	2106      	movs	r1, #6
   4412a:	f7e2 fd77 	bl	26c1c <z_arm_irq_priority_set>
}
   4412e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   44132:	201c      	movs	r0, #28
   44134:	f7e2 bd54 	b.w	26be0 <arch_irq_enable>

00044138 <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   44138:	2000      	movs	r0, #0
   4413a:	4770      	bx	lr

0004413c <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   4413c:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   44140:	bf18      	it	ne
   44142:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   44144:	0781      	lsls	r1, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   44146:	bf48      	it	mi
   44148:	f043 0308 	orrmi.w	r3, r3, #8
	if (z_flags & MSG_TRUNC) {
   4414c:	06c2      	lsls	r2, r0, #27
		nrf_flags |= NRF_MSG_TRUNC;
   4414e:	bf48      	it	mi
   44150:	f043 0320 	orrmi.w	r3, r3, #32
}
   44154:	4618      	mov	r0, r3
   44156:	4770      	bx	lr

00044158 <z_to_nrf_family>:
	switch (z_family) {
   44158:	2803      	cmp	r0, #3
   4415a:	d00f      	beq.n	4417c <z_to_nrf_family+0x24>
   4415c:	d808      	bhi.n	44170 <z_to_nrf_family+0x18>
   4415e:	2801      	cmp	r0, #1
   44160:	d00e      	beq.n	44180 <z_to_nrf_family+0x28>
   44162:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   44164:	bf08      	it	eq
   44166:	200a      	moveq	r0, #10
   44168:	bf18      	it	ne
   4416a:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   4416e:	4770      	bx	lr
	switch (z_family) {
   44170:	2806      	cmp	r0, #6
   44172:	d007      	beq.n	44184 <z_to_nrf_family+0x2c>
   44174:	2866      	cmp	r0, #102	; 0x66
		return -EAFNOSUPPORT;
   44176:	bf08      	it	eq
   44178:	2066      	moveq	r0, #102	; 0x66
   4417a:	e7f5      	b.n	44168 <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   4417c:	2005      	movs	r0, #5
   4417e:	4770      	bx	lr
		return NRF_AF_INET;
   44180:	2002      	movs	r0, #2
   44182:	4770      	bx	lr
		return NRF_AF_LOCAL;
   44184:	2001      	movs	r0, #1
}
   44186:	4770      	bx	lr

00044188 <z_to_nrf_protocol>:
	switch (proto) {
   44188:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   4418c:	d01d      	beq.n	441ca <z_to_nrf_protocol+0x42>
   4418e:	dc08      	bgt.n	441a2 <z_to_nrf_protocol+0x1a>
   44190:	2806      	cmp	r0, #6
   44192:	d01d      	beq.n	441d0 <z_to_nrf_protocol+0x48>
   44194:	2811      	cmp	r0, #17
   44196:	d01d      	beq.n	441d4 <z_to_nrf_protocol+0x4c>
   44198:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   4419a:	bf18      	it	ne
   4419c:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   441a0:	4770      	bx	lr
	switch (proto) {
   441a2:	f240 2301 	movw	r3, #513	; 0x201
   441a6:	4298      	cmp	r0, r3
   441a8:	d015      	beq.n	441d6 <z_to_nrf_protocol+0x4e>
   441aa:	dc06      	bgt.n	441ba <z_to_nrf_protocol+0x32>
   441ac:	f240 1311 	movw	r3, #273	; 0x111
   441b0:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   441b2:	bf08      	it	eq
   441b4:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   441b8:	e7ef      	b.n	4419a <z_to_nrf_protocol+0x12>
	switch (proto) {
   441ba:	f240 2302 	movw	r3, #514	; 0x202
   441be:	4298      	cmp	r0, r3
   441c0:	d009      	beq.n	441d6 <z_to_nrf_protocol+0x4e>
   441c2:	f240 2303 	movw	r3, #515	; 0x203
   441c6:	4298      	cmp	r0, r3
   441c8:	e7e7      	b.n	4419a <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   441ca:	f44f 7082 	mov.w	r0, #260	; 0x104
   441ce:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   441d0:	2001      	movs	r0, #1
   441d2:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   441d4:	2002      	movs	r0, #2
}
   441d6:	4770      	bx	lr

000441d8 <nrf91_socket_is_supported>:
}
   441d8:	2001      	movs	r0, #1
   441da:	4770      	bx	lr

000441dc <nrf91_bsdlib_socket_offload_init>:
}
   441dc:	2000      	movs	r0, #0
   441de:	4770      	bx	lr

000441e0 <nrf91_socket_offload_getsockopt>:
{
   441e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   441e4:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   441e6:	2300      	movs	r3, #0
{
   441e8:	b086      	sub	sp, #24
   441ea:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   441ee:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   441f2:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   441f6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   441fa:	460c      	mov	r4, r1
   441fc:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   441fe:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   44202:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   44204:	d002      	beq.n	4420c <nrf91_socket_offload_getsockopt+0x2c>
   44206:	dc2d      	bgt.n	44264 <nrf91_socket_offload_getsockopt+0x84>
   44208:	2901      	cmp	r1, #1
   4420a:	d140      	bne.n	4428e <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   4420c:	aa02      	add	r2, sp, #8
   4420e:	4631      	mov	r1, r6
   44210:	4620      	mov	r0, r4
   44212:	f7e5 fbad 	bl	29970 <z_to_nrf_optname>
   44216:	2800      	cmp	r0, #0
   44218:	db39      	blt.n	4428e <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   4421a:	2c01      	cmp	r4, #1
   4421c:	d12a      	bne.n	44274 <nrf91_socket_offload_getsockopt+0x94>
   4421e:	f1a6 0314 	sub.w	r3, r6, #20
   44222:	2b01      	cmp	r3, #1
   44224:	d826      	bhi.n	44274 <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   44226:	2308      	movs	r3, #8
   44228:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   4422a:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   4422c:	aa03      	add	r2, sp, #12
   4422e:	9200      	str	r2, [sp, #0]
   44230:	4638      	mov	r0, r7
   44232:	9a02      	ldr	r2, [sp, #8]
   44234:	4621      	mov	r1, r4
   44236:	f7f5 fec5 	bl	39fc4 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   4423a:	4607      	mov	r7, r0
   4423c:	b970      	cbnz	r0, 4425c <nrf91_socket_offload_getsockopt+0x7c>
   4423e:	b16d      	cbz	r5, 4425c <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   44240:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   44242:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   44244:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   44248:	d108      	bne.n	4425c <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   4424a:	2e04      	cmp	r6, #4
   4424c:	d114      	bne.n	44278 <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   4424e:	6828      	ldr	r0, [r5, #0]
   44250:	f7e5 fa60 	bl	29714 <bsd_os_errno_set>
				*(int *)optval = errno;
   44254:	f7fe fd61 	bl	42d1a <__errno>
   44258:	6803      	ldr	r3, [r0, #0]
   4425a:	602b      	str	r3, [r5, #0]
}
   4425c:	4638      	mov	r0, r7
   4425e:	b006      	add	sp, #24
   44260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   44264:	f240 2302 	movw	r3, #514	; 0x202
   44268:	4299      	cmp	r1, r3
   4426a:	d0cf      	beq.n	4420c <nrf91_socket_offload_getsockopt+0x2c>
   4426c:	f240 2303 	movw	r3, #515	; 0x203
   44270:	4299      	cmp	r1, r3
   44272:	e7ca      	b.n	4420a <nrf91_socket_offload_getsockopt+0x2a>
   44274:	462b      	mov	r3, r5
   44276:	e7d9      	b.n	4422c <nrf91_socket_offload_getsockopt+0x4c>
			} else if ((optname == SO_RCVTIMEO) ||
   44278:	3e14      	subs	r6, #20
   4427a:	2e01      	cmp	r6, #1
   4427c:	d8ee      	bhi.n	4425c <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   4427e:	9b04      	ldr	r3, [sp, #16]
   44280:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   44282:	9b05      	ldr	r3, [sp, #20]
   44284:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   44286:	2308      	movs	r3, #8
   44288:	f8c8 3000 	str.w	r3, [r8]
   4428c:	e7e6      	b.n	4425c <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   4428e:	f7fe fd44 	bl	42d1a <__errno>
   44292:	236d      	movs	r3, #109	; 0x6d
	return retval;
   44294:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   44298:	6003      	str	r3, [r0, #0]
	return retval;
   4429a:	e7df      	b.n	4425c <nrf91_socket_offload_getsockopt+0x7c>

0004429c <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   4429c:	3801      	subs	r0, #1
   4429e:	f7f5 be3d 	b.w	39f1c <nrf_listen>

000442a2 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   442a2:	3801      	subs	r0, #1
   442a4:	f7f5 bd9c 	b.w	39de0 <nrf_close>

000442a8 <nrf91_socket_offload_freeaddrinfo>:
{
   442a8:	b538      	push	{r3, r4, r5, lr}
   442aa:	4604      	mov	r4, r0
	while (next != NULL) {
   442ac:	b904      	cbnz	r4, 442b0 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   442ae:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   442b0:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   442b2:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   442b4:	f000 ff7d 	bl	451b2 <k_free>
		k_free(this);
   442b8:	4620      	mov	r0, r4
   442ba:	f000 ff7a 	bl	451b2 <k_free>
		next = next->ai_next;
   442be:	462c      	mov	r4, r5
   442c0:	e7f4      	b.n	442ac <nrf91_socket_offload_freeaddrinfo+0x4>

000442c2 <z_to_nrf_addrinfo_hints>:
{
   442c2:	b538      	push	{r3, r4, r5, lr}
   442c4:	460c      	mov	r4, r1
   442c6:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   442c8:	221c      	movs	r2, #28
   442ca:	2100      	movs	r1, #0
   442cc:	1d20      	adds	r0, r4, #4
   442ce:	f000 ffcb 	bl	45268 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   442d2:	2300      	movs	r3, #0
   442d4:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   442d6:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   442d8:	2b03      	cmp	r3, #3
   442da:	d003      	beq.n	442e4 <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   442dc:	2b04      	cmp	r3, #4
   442de:	bf08      	it	eq
   442e0:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   442e4:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   442e6:	8928      	ldrh	r0, [r5, #8]
   442e8:	f7ff ff36 	bl	44158 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   442ec:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   442f0:	d00b      	beq.n	4430a <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   442f2:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   442f4:	6928      	ldr	r0, [r5, #16]
   442f6:	f7ff ff47 	bl	44188 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   442fa:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   442fe:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   44300:	d003      	beq.n	4430a <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   44302:	69e8      	ldr	r0, [r5, #28]
   44304:	b108      	cbz	r0, 4430a <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   44306:	61a0      	str	r0, [r4, #24]
	return 0;
   44308:	2000      	movs	r0, #0
}
   4430a:	bd38      	pop	{r3, r4, r5, pc}

0004430c <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   4430c:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   4430e:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   44310:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   44312:	4603      	mov	r3, r0
{
   44314:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   44316:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4431a:	f101 0210 	add.w	r2, r1, #16
   4431e:	f102 0410 	add.w	r4, r2, #16
   44322:	f852 5b04 	ldr.w	r5, [r2], #4
   44326:	42a2      	cmp	r2, r4
   44328:	f843 5b04 	str.w	r5, [r3], #4
   4432c:	d1f9      	bne.n	44322 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   4432e:	6a0b      	ldr	r3, [r1, #32]
   44330:	7503      	strb	r3, [r0, #20]
}
   44332:	bd30      	pop	{r4, r5, pc}

00044334 <nrf91_socket_offload_recvfrom>:
{
   44334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int sd = OBJ_TO_SD(obj);
   44338:	1e45      	subs	r5, r0, #1
{
   4433a:	b08d      	sub	sp, #52	; 0x34
   4433c:	4618      	mov	r0, r3
   4433e:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   44342:	4688      	mov	r8, r1
   44344:	4691      	mov	r9, r2
   44346:	f7ff fef9 	bl	4413c <z_to_nrf_flags>
   4434a:	4603      	mov	r3, r0
	if (from == NULL) {
   4434c:	b95c      	cbnz	r4, 44366 <nrf91_socket_offload_recvfrom+0x32>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   4434e:	4628      	mov	r0, r5
   44350:	e9cd 4400 	strd	r4, r4, [sp]
   44354:	464a      	mov	r2, r9
   44356:	4641      	mov	r1, r8
   44358:	f7f5 fd82 	bl	39e60 <nrf_recvfrom>
   4435c:	4605      	mov	r5, r0
}
   4435e:	4628      	mov	r0, r5
   44360:	b00d      	add	sp, #52	; 0x34
   44362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   44366:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   44368:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   4436a:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4436c:	aa02      	add	r2, sp, #8
   4436e:	9201      	str	r2, [sp, #4]
   44370:	4628      	mov	r0, r5
   44372:	9700      	str	r7, [sp, #0]
   44374:	464a      	mov	r2, r9
   44376:	4641      	mov	r1, r8
   44378:	f7f5 fd72 	bl	39e60 <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   4437c:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4437e:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   44380:	2b02      	cmp	r3, #2
   44382:	d109      	bne.n	44398 <nrf91_socket_offload_recvfrom+0x64>
	ptr->sin_port = nrf_in->sin_port;
   44384:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   44388:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   4438a:	2301      	movs	r3, #1
   4438c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4438e:	9b06      	ldr	r3, [sp, #24]
   44390:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   44392:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   44394:	6033      	str	r3, [r6, #0]
	return retval;
   44396:	e7e2      	b.n	4435e <nrf91_socket_offload_recvfrom+0x2a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   44398:	2b0a      	cmp	r3, #10
   4439a:	d1e0      	bne.n	4435e <nrf91_socket_offload_recvfrom+0x2a>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   4439c:	4639      	mov	r1, r7
   4439e:	4620      	mov	r0, r4
   443a0:	f7ff ffb4 	bl	4430c <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   443a4:	2318      	movs	r3, #24
   443a6:	e7f5      	b.n	44394 <nrf91_socket_offload_recvfrom+0x60>

000443a8 <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   443a8:	2300      	movs	r3, #0
{
   443aa:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   443ac:	e9cd 3300 	strd	r3, r3, [sp]
   443b0:	f7ff ffc0 	bl	44334 <nrf91_socket_offload_recvfrom>
}
   443b4:	b003      	add	sp, #12
   443b6:	f85d fb04 	ldr.w	pc, [sp], #4

000443ba <nrf91_socket_offload_getaddrinfo>:
{
   443ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   443be:	4614      	mov	r4, r2
   443c0:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   443c2:	2100      	movs	r1, #0
{
   443c4:	b093      	sub	sp, #76	; 0x4c
   443c6:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   443c8:	2220      	movs	r2, #32
   443ca:	a802      	add	r0, sp, #8
{
   443cc:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   443ce:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   443d0:	f000 ff4a 	bl	45268 <memset>
	if (hints != NULL) {
   443d4:	b194      	cbz	r4, 443fc <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   443d6:	a902      	add	r1, sp, #8
   443d8:	4620      	mov	r0, r4
   443da:	f7ff ff72 	bl	442c2 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   443de:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   443e2:	f000 80ca 	beq.w	4457a <nrf91_socket_offload_getaddrinfo+0x1c0>
		} else if (error == -EAFNOSUPPORT) {
   443e6:	306a      	adds	r0, #106	; 0x6a
   443e8:	f000 80ca 	beq.w	44580 <nrf91_socket_offload_getaddrinfo+0x1c6>
		if (hints->ai_next != NULL) {
   443ec:	6820      	ldr	r0, [r4, #0]
   443ee:	b120      	cbz	r0, 443fa <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   443f0:	ac0a      	add	r4, sp, #40	; 0x28
   443f2:	4621      	mov	r1, r4
   443f4:	f7ff ff65 	bl	442c2 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   443f8:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   443fa:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   443fc:	4628      	mov	r0, r5
   443fe:	ab01      	add	r3, sp, #4
   44400:	4622      	mov	r2, r4
   44402:	4631      	mov	r1, r6
   44404:	f7f5 fdfa 	bl	39ffc <nrf_getaddrinfo>
	if (retval != 0) {
   44408:	4605      	mov	r5, r0
   4440a:	b1f8      	cbz	r0, 4444c <nrf91_socket_offload_getaddrinfo+0x92>
	switch (nrf_error) {
   4440c:	282f      	cmp	r0, #47	; 0x2f
   4440e:	f000 80ba 	beq.w	44586 <nrf91_socket_offload_getaddrinfo+0x1cc>
   44412:	dc0d      	bgt.n	44430 <nrf91_socket_offload_getaddrinfo+0x76>
   44414:	280c      	cmp	r0, #12
   44416:	f000 80b9 	beq.w	4458c <nrf91_socket_offload_getaddrinfo+0x1d2>
		return DNS_EAI_SYSTEM;
   4441a:	2823      	cmp	r0, #35	; 0x23
   4441c:	bf08      	it	eq
   4441e:	f06f 0502 	mvneq.w	r5, #2
   44422:	bf18      	it	ne
   44424:	f06f 050a 	mvnne.w	r5, #10
}
   44428:	4628      	mov	r0, r5
   4442a:	b013      	add	sp, #76	; 0x4c
   4442c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   44430:	2833      	cmp	r0, #51	; 0x33
   44432:	d004      	beq.n	4443e <nrf91_socket_offload_getaddrinfo+0x84>
		return DNS_EAI_SYSTEM;
   44434:	2873      	cmp	r0, #115	; 0x73
   44436:	bf08      	it	eq
   44438:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   4443c:	e7f1      	b.n	44422 <nrf91_socket_offload_getaddrinfo+0x68>
		errno = ENETUNREACH;
   4443e:	f7fe fc6c 	bl	42d1a <__errno>
   44442:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   44444:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   44448:	6003      	str	r3, [r0, #0]
   4444a:	e7ed      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>
	struct zsock_addrinfo *latest_z_res = NULL;
   4444c:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   4444e:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   44450:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   44452:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   44454:	b91e      	cbnz	r6, 4445e <nrf91_socket_offload_getaddrinfo+0xa4>
	nrf_freeaddrinfo(nrf_res);
   44456:	9801      	ldr	r0, [sp, #4]
   44458:	f7f5 fdd2 	bl	3a000 <nrf_freeaddrinfo>
	return retval;
   4445c:	e7e4      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>
					k_malloc(sizeof(struct zsock_addrinfo));
   4445e:	2050      	movs	r0, #80	; 0x50
   44460:	f7fb f908 	bl	3f674 <k_malloc>
		if (next_z_res == NULL) {
   44464:	4604      	mov	r4, r0
   44466:	2800      	cmp	r0, #0
   44468:	d07c      	beq.n	44564 <nrf91_socket_offload_getaddrinfo+0x1aa>
	family = nrf_to_z_family(nrf_in->ai_family);
   4446a:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   4446c:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   4446e:	2a05      	cmp	r2, #5
	z_out->ai_next = NULL;
   44470:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   44474:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   44478:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   4447c:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   4447e:	d033      	beq.n	444e8 <nrf91_socket_offload_getaddrinfo+0x12e>
   44480:	dc09      	bgt.n	44496 <nrf91_socket_offload_getaddrinfo+0xdc>
   44482:	2a01      	cmp	r2, #1
   44484:	d032      	beq.n	444ec <nrf91_socket_offload_getaddrinfo+0x132>
   44486:	2a02      	cmp	r2, #2
   44488:	d032      	beq.n	444f0 <nrf91_socket_offload_getaddrinfo+0x136>
			k_free(next_z_res);
   4448a:	4620      	mov	r0, r4
   4448c:	f000 fe91 	bl	451b2 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   44490:	f06f 0508 	mvn.w	r5, #8
   44494:	e068      	b.n	44568 <nrf91_socket_offload_getaddrinfo+0x1ae>
	switch (nrf_family) {
   44496:	2a0a      	cmp	r2, #10
   44498:	d02c      	beq.n	444f4 <nrf91_socket_offload_getaddrinfo+0x13a>
   4449a:	2a66      	cmp	r2, #102	; 0x66
   4449c:	d1f5      	bne.n	4448a <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LTE;
   4449e:	4613      	mov	r3, r2
	z_out->ai_family = family;
   444a0:	60a3      	str	r3, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   444a2:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   444a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   444a8:	d045      	beq.n	44536 <nrf91_socket_offload_getaddrinfo+0x17c>
   444aa:	dc25      	bgt.n	444f8 <nrf91_socket_offload_getaddrinfo+0x13e>
   444ac:	2b01      	cmp	r3, #1
   444ae:	d047      	beq.n	44540 <nrf91_socket_offload_getaddrinfo+0x186>
   444b0:	2b02      	cmp	r3, #2
   444b2:	d043      	beq.n	4453c <nrf91_socket_offload_getaddrinfo+0x182>
   444b4:	bb43      	cbnz	r3, 44508 <nrf91_socket_offload_getaddrinfo+0x14e>
	if (nrf_in->ai_family == NRF_AF_INET) {
   444b6:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   444b8:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   444ba:	d143      	bne.n	44544 <nrf91_socket_offload_getaddrinfo+0x18a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   444bc:	2008      	movs	r0, #8
   444be:	f7fb f8d9 	bl	3f674 <k_malloc>
   444c2:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   444c4:	2800      	cmp	r0, #0
   444c6:	d04a      	beq.n	4455e <nrf91_socket_offload_getaddrinfo+0x1a4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   444c8:	2308      	movs	r3, #8
   444ca:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   444cc:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   444ce:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   444d0:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   444d2:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   444d4:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   444d6:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   444d8:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   444da:	f1b8 0f00 	cmp.w	r8, #0
   444de:	d149      	bne.n	44574 <nrf91_socket_offload_getaddrinfo+0x1ba>
			*res = next_z_res;
   444e0:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   444e2:	69f6      	ldr	r6, [r6, #28]
   444e4:	46a0      	mov	r8, r4
   444e6:	e7b5      	b.n	44454 <nrf91_socket_offload_getaddrinfo+0x9a>
		return AF_PACKET;
   444e8:	2303      	movs	r3, #3
   444ea:	e7d9      	b.n	444a0 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_LOCAL;
   444ec:	2306      	movs	r3, #6
   444ee:	e7d7      	b.n	444a0 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_INET;
   444f0:	2301      	movs	r3, #1
   444f2:	e7d5      	b.n	444a0 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_INET6;
   444f4:	2302      	movs	r3, #2
   444f6:	e7d3      	b.n	444a0 <nrf91_socket_offload_getaddrinfo+0xe6>
	switch (proto) {
   444f8:	f240 2101 	movw	r1, #513	; 0x201
   444fc:	428b      	cmp	r3, r1
   444fe:	d0da      	beq.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   44500:	dc0d      	bgt.n	4451e <nrf91_socket_offload_getaddrinfo+0x164>
   44502:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   44506:	d013      	beq.n	44530 <nrf91_socket_offload_getaddrinfo+0x176>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   44508:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   4450c:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   4450e:	2300      	movs	r3, #0
   44510:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   44512:	4620      	mov	r0, r4
   44514:	f000 fe4d 	bl	451b2 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   44518:	f06f 0506 	mvn.w	r5, #6
   4451c:	e024      	b.n	44568 <nrf91_socket_offload_getaddrinfo+0x1ae>
	switch (proto) {
   4451e:	f240 2102 	movw	r1, #514	; 0x202
   44522:	428b      	cmp	r3, r1
   44524:	d0c7      	beq.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   44526:	f240 2103 	movw	r1, #515	; 0x203
   4452a:	428b      	cmp	r3, r1
   4452c:	d0c3      	beq.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   4452e:	e7eb      	b.n	44508 <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   44530:	f240 1311 	movw	r3, #273	; 0x111
   44534:	e7bf      	b.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   44536:	f44f 7381 	mov.w	r3, #258	; 0x102
   4453a:	e7bc      	b.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   4453c:	2311      	movs	r3, #17
   4453e:	e7ba      	b.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
   44540:	2306      	movs	r3, #6
   44542:	e7b8      	b.n	444b6 <nrf91_socket_offload_getaddrinfo+0xfc>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   44544:	2a0a      	cmp	r2, #10
   44546:	d1e4      	bne.n	44512 <nrf91_socket_offload_getaddrinfo+0x158>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   44548:	2018      	movs	r0, #24
   4454a:	f7fb f893 	bl	3f674 <k_malloc>
   4454e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   44550:	b128      	cbz	r0, 4455e <nrf91_socket_offload_getaddrinfo+0x1a4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   44552:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   44554:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   44556:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   44558:	f7ff fed8 	bl	4430c <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   4455c:	e7bd      	b.n	444da <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   4455e:	4620      	mov	r0, r4
   44560:	f000 fe27 	bl	451b2 <k_free>
			retval = DNS_EAI_MEMORY;
   44564:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   44568:	6838      	ldr	r0, [r7, #0]
   4456a:	f7ff fe9d 	bl	442a8 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   4456e:	2300      	movs	r3, #0
   44570:	603b      	str	r3, [r7, #0]
   44572:	e770      	b.n	44456 <nrf91_socket_offload_getaddrinfo+0x9c>
			latest_z_res->ai_next = next_z_res;
   44574:	f8c8 4000 	str.w	r4, [r8]
   44578:	e7b3      	b.n	444e2 <nrf91_socket_offload_getaddrinfo+0x128>
			return DNS_EAI_SOCKTYPE;
   4457a:	f06f 0506 	mvn.w	r5, #6
   4457e:	e753      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>
			return DNS_EAI_ADDRFAMILY;
   44580:	f06f 0508 	mvn.w	r5, #8
   44584:	e750      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>
		return DNS_EAI_NONAME;
   44586:	f06f 0501 	mvn.w	r5, #1
   4458a:	e74d      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>
		return DNS_EAI_MEMORY;
   4458c:	f06f 0509 	mvn.w	r5, #9
   44590:	e74a      	b.n	44428 <nrf91_socket_offload_getaddrinfo+0x6e>

00044592 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   44592:	2224      	movs	r2, #36	; 0x24
{
   44594:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   44596:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   44598:	8842      	ldrh	r2, [r0, #2]
{
   4459a:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   4459c:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   4459e:	220a      	movs	r2, #10
{
   445a0:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   445a2:	604a      	str	r2, [r1, #4]
   445a4:	f101 0610 	add.w	r6, r1, #16
   445a8:	1d02      	adds	r2, r0, #4
   445aa:	f100 0714 	add.w	r7, r0, #20
   445ae:	4635      	mov	r5, r6
   445b0:	6810      	ldr	r0, [r2, #0]
   445b2:	6851      	ldr	r1, [r2, #4]
   445b4:	3208      	adds	r2, #8
   445b6:	c503      	stmia	r5!, {r0, r1}
   445b8:	42ba      	cmp	r2, r7
   445ba:	462e      	mov	r6, r5
   445bc:	d1f7      	bne.n	445ae <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   445be:	7d22      	ldrb	r2, [r4, #20]
   445c0:	621a      	str	r2, [r3, #32]
}
   445c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000445c4 <nrf91_socket_offload_sendto>:
{
   445c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   445c8:	b08d      	sub	sp, #52	; 0x34
   445ca:	9c14      	ldr	r4, [sp, #80]	; 0x50
   445cc:	460e      	mov	r6, r1
   445ce:	4617      	mov	r7, r2
   445d0:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   445d2:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   445d4:	b96c      	cbnz	r4, 445f2 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   445d6:	4618      	mov	r0, r3
   445d8:	f7ff fdb0 	bl	4413c <z_to_nrf_flags>
   445dc:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   445e0:	4603      	mov	r3, r0
   445e2:	463a      	mov	r2, r7
   445e4:	4631      	mov	r1, r6
   445e6:	4628      	mov	r0, r5
   445e8:	f7f5 fc08 	bl	39dfc <nrf_sendto>
}
   445ec:	b00d      	add	sp, #52	; 0x34
   445ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   445f2:	8823      	ldrh	r3, [r4, #0]
   445f4:	2b01      	cmp	r3, #1
   445f6:	d112      	bne.n	4461e <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   445f8:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   445fa:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   445fe:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   44602:	2302      	movs	r3, #2
   44604:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44606:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   44608:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4460a:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4460c:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   44610:	f7ff fd94 	bl	4413c <z_to_nrf_flags>
   44614:	ab03      	add	r3, sp, #12
   44616:	f8cd 9004 	str.w	r9, [sp, #4]
   4461a:	9300      	str	r3, [sp, #0]
   4461c:	e7e0      	b.n	445e0 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   4461e:	2b02      	cmp	r3, #2
   44620:	d10c      	bne.n	4463c <nrf91_socket_offload_sendto+0x78>
		z_to_nrf_ipv6(to, &ipv6);
   44622:	f10d 090c 	add.w	r9, sp, #12
   44626:	4649      	mov	r1, r9
   44628:	4620      	mov	r0, r4
   4462a:	f7ff ffb2 	bl	44592 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   4462e:	4640      	mov	r0, r8
   44630:	f7ff fd84 	bl	4413c <z_to_nrf_flags>
   44634:	2324      	movs	r3, #36	; 0x24
   44636:	e9cd 9300 	strd	r9, r3, [sp]
   4463a:	e7d1      	b.n	445e0 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   4463c:	f7fe fb6d 	bl	42d1a <__errno>
   44640:	2386      	movs	r3, #134	; 0x86
   44642:	6003      	str	r3, [r0, #0]
	return retval;
   44644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   44648:	e7d0      	b.n	445ec <nrf91_socket_offload_sendto+0x28>

0004464a <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   4464a:	2300      	movs	r3, #0
{
   4464c:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   4464e:	e9cd 3300 	strd	r3, r3, [sp]
   44652:	f7ff ffb7 	bl	445c4 <nrf91_socket_offload_sendto>
}
   44656:	b003      	add	sp, #12
   44658:	f85d fb04 	ldr.w	pc, [sp], #4

0004465c <nrf91_socket_offload_connect>:
{
   4465c:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   4465e:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   44660:	8808      	ldrh	r0, [r1, #0]
{
   44662:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   44664:	2801      	cmp	r0, #1
{
   44666:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   44668:	d10f      	bne.n	4468a <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   4466a:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4466c:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   4466e:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   44672:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44674:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44676:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   4467a:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4467c:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   4467e:	a901      	add	r1, sp, #4
   44680:	4620      	mov	r0, r4
   44682:	f7f5 fc39 	bl	39ef8 <nrf_connect>
}
   44686:	b00a      	add	sp, #40	; 0x28
   44688:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   4468a:	2802      	cmp	r0, #2
   4468c:	d105      	bne.n	4469a <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   4468e:	a901      	add	r1, sp, #4
   44690:	4618      	mov	r0, r3
   44692:	f7ff ff7e 	bl	44592 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   44696:	2224      	movs	r2, #36	; 0x24
   44698:	e7f1      	b.n	4467e <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   4469a:	4620      	mov	r0, r4
   4469c:	f7f5 fc2c 	bl	39ef8 <nrf_connect>
		if (retval < 0) {
   446a0:	2800      	cmp	r0, #0
   446a2:	daf0      	bge.n	44686 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   446a4:	f7fe fb39 	bl	42d1a <__errno>
   446a8:	2386      	movs	r3, #134	; 0x86
   446aa:	6003      	str	r3, [r0, #0]
   446ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   446b0:	e7e9      	b.n	44686 <nrf91_socket_offload_connect+0x2a>

000446b2 <nrf91_socket_offload_setsockopt>:
{
   446b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   446b6:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   446ba:	b086      	sub	sp, #24
   446bc:	460c      	mov	r4, r1
   446be:	4615      	mov	r5, r2
   446c0:	461e      	mov	r6, r3
   446c2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   446c4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   446c8:	d002      	beq.n	446d0 <nrf91_socket_offload_setsockopt+0x1e>
   446ca:	dc1d      	bgt.n	44708 <nrf91_socket_offload_setsockopt+0x56>
   446cc:	2901      	cmp	r1, #1
   446ce:	d12a      	bne.n	44726 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   446d0:	aa03      	add	r2, sp, #12
   446d2:	4629      	mov	r1, r5
   446d4:	4620      	mov	r0, r4
   446d6:	f7e5 f94b 	bl	29970 <z_to_nrf_optname>
   446da:	2800      	cmp	r0, #0
   446dc:	db23      	blt.n	44726 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   446de:	2c01      	cmp	r4, #1
   446e0:	d11a      	bne.n	44718 <nrf91_socket_offload_setsockopt+0x66>
   446e2:	3d14      	subs	r5, #20
   446e4:	2d01      	cmp	r5, #1
   446e6:	d805      	bhi.n	446f4 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(struct nrf_timeval);
   446e8:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   446ea:	6833      	ldr	r3, [r6, #0]
   446ec:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   446ee:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   446f0:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   446f2:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   446f4:	9700      	str	r7, [sp, #0]
   446f6:	4633      	mov	r3, r6
   446f8:	9a03      	ldr	r2, [sp, #12]
   446fa:	4621      	mov	r1, r4
   446fc:	4640      	mov	r0, r8
   446fe:	f7f5 fc45 	bl	39f8c <nrf_setsockopt>
}
   44702:	b006      	add	sp, #24
   44704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   44708:	f240 2302 	movw	r3, #514	; 0x202
   4470c:	4299      	cmp	r1, r3
   4470e:	d0df      	beq.n	446d0 <nrf91_socket_offload_setsockopt+0x1e>
   44710:	f240 2303 	movw	r3, #515	; 0x203
   44714:	4299      	cmp	r1, r3
   44716:	e7da      	b.n	446ce <nrf91_socket_offload_setsockopt+0x1c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   44718:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   4471c:	d1ea      	bne.n	446f4 <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   4471e:	2d07      	cmp	r5, #7
   44720:	bf08      	it	eq
   44722:	2701      	moveq	r7, #1
   44724:	e7e6      	b.n	446f4 <nrf91_socket_offload_setsockopt+0x42>
	errno = ENOPROTOOPT;
   44726:	f7fe faf8 	bl	42d1a <__errno>
   4472a:	236d      	movs	r3, #109	; 0x6d
   4472c:	6003      	str	r3, [r0, #0]
   4472e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   44732:	e7e6      	b.n	44702 <nrf91_socket_offload_setsockopt+0x50>

00044734 <nrf91_socket_offload_bind>:
{
   44734:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   44736:	880a      	ldrh	r2, [r1, #0]
{
   44738:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   4473a:	2a01      	cmp	r2, #1
{
   4473c:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   4473e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   44742:	d10f      	bne.n	44764 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   44744:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44746:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   44748:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   4474c:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4474e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   44750:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   44754:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   44756:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44758:	a901      	add	r1, sp, #4
   4475a:	4620      	mov	r0, r4
   4475c:	f7f5 fc04 	bl	39f68 <nrf_bind>
}
   44760:	b00a      	add	sp, #40	; 0x28
   44762:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   44764:	2a02      	cmp	r2, #2
   44766:	d105      	bne.n	44774 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   44768:	a901      	add	r1, sp, #4
   4476a:	4618      	mov	r0, r3
   4476c:	f7ff ff11 	bl	44592 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   44770:	2224      	movs	r2, #36	; 0x24
   44772:	e7f1      	b.n	44758 <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   44774:	f7fe fad1 	bl	42d1a <__errno>
   44778:	2386      	movs	r3, #134	; 0x86
   4477a:	6003      	str	r3, [r0, #0]
   4477c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   44780:	e7ee      	b.n	44760 <nrf91_socket_offload_bind+0x2c>

00044782 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   44782:	ea40 0301 	orr.w	r3, r0, r1
   44786:	f033 030f 	bics.w	r3, r3, #15
   4478a:	d101      	bne.n	44790 <dk_set_leds_state+0xe>
   4478c:	f7e5 bc00 	b.w	29f90 <dk_set_leds_state.part.6>
}
   44790:	f06f 0015 	mvn.w	r0, #21
   44794:	4770      	bx	lr

00044796 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   44796:	210f      	movs	r1, #15
   44798:	f7ff bff3 	b.w	44782 <dk_set_leds_state>

0004479c <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   4479c:	6883      	ldr	r3, [r0, #8]
   4479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   447a0:	b103      	cbz	r3, 447a4 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   447a2:	4718      	bx	r3
}
   447a4:	4770      	bx	lr

000447a6 <response_handler>:
	write_uart_string(response);
   447a6:	4608      	mov	r0, r1
   447a8:	f7e6 bb60 	b.w	2ae6c <write_uart_string>

000447ac <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   447ac:	280d      	cmp	r0, #13
   447ae:	d004      	beq.n	447ba <is_lfcr+0xe>
   447b0:	f1a0 030a 	sub.w	r3, r0, #10
   447b4:	4258      	negs	r0, r3
   447b6:	4158      	adcs	r0, r3
   447b8:	4770      	bx	lr
		return true;
   447ba:	2001      	movs	r0, #1
}
   447bc:	4770      	bx	lr

000447be <skip_command_prefix>:
{
   447be:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   447c0:	6802      	ldr	r2, [r0, #0]
{
   447c2:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   447c4:	1c93      	adds	r3, r2, #2
   447c6:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   447c8:	7894      	ldrb	r4, [r2, #2]
   447ca:	4620      	mov	r0, r4
   447cc:	f7ff ffee 	bl	447ac <is_lfcr>
   447d0:	b910      	cbnz	r0, 447d8 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   447d2:	b10c      	cbz	r4, 447d8 <skip_command_prefix+0x1a>
	(*cmd)++;
   447d4:	3203      	adds	r2, #3
   447d6:	600a      	str	r2, [r1, #0]
}
   447d8:	bd10      	pop	{r4, pc}

000447da <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   447da:	6813      	ldr	r3, [r2, #0]
   447dc:	f7e6 beb2 	b.w	2b544 <at_parser_max_params_from_str>

000447e0 <at_params_list_init>:
{
   447e0:	b538      	push	{r3, r4, r5, lr}
   447e2:	460d      	mov	r5, r1
	if (list == NULL) {
   447e4:	4604      	mov	r4, r0
   447e6:	b140      	cbz	r0, 447fa <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   447e8:	210c      	movs	r1, #12
   447ea:	4628      	mov	r0, r5
   447ec:	f000 fce6 	bl	451bc <k_calloc>
   447f0:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   447f2:	b128      	cbz	r0, 44800 <at_params_list_init+0x20>
	return 0;
   447f4:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   447f6:	6025      	str	r5, [r4, #0]
}
   447f8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   447fa:	f06f 0015 	mvn.w	r0, #21
   447fe:	e7fb      	b.n	447f8 <at_params_list_init+0x18>
		return -ENOMEM;
   44800:	f06f 000b 	mvn.w	r0, #11
   44804:	e7f8      	b.n	447f8 <at_params_list_init+0x18>

00044806 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   44806:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   44808:	4604      	mov	r4, r0
   4480a:	b148      	cbz	r0, 44820 <at_params_list_free+0x1a>
   4480c:	6843      	ldr	r3, [r0, #4]
   4480e:	b13b      	cbz	r3, 44820 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   44810:	2500      	movs	r5, #0
	at_params_list_clear(list);
   44812:	f7e6 ff93 	bl	2b73c <at_params_list_clear>
	list->param_count = 0;
   44816:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   44818:	6860      	ldr	r0, [r4, #4]
   4481a:	f000 fcca 	bl	451b2 <k_free>
	list->params = NULL;
   4481e:	6065      	str	r5, [r4, #4]
}
   44820:	bd38      	pop	{r3, r4, r5, pc}

00044822 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   44822:	b538      	push	{r3, r4, r5, lr}
   44824:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   44826:	b910      	cbnz	r0, 4482e <at_params_short_put+0xc>
		return -EINVAL;
   44828:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   4482c:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   4482e:	6843      	ldr	r3, [r0, #4]
   44830:	2b00      	cmp	r3, #0
   44832:	d0f9      	beq.n	44828 <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   44834:	f7e6 ff16 	bl	2b664 <at_params_get>
	if (param == NULL) {
   44838:	4604      	mov	r4, r0
   4483a:	2800      	cmp	r0, #0
   4483c:	d0f4      	beq.n	44828 <at_params_short_put+0x6>
	at_param_clear(param);
   4483e:	f7e6 ff5b 	bl	2b6f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   44842:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   44844:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   44846:	7023      	strb	r3, [r4, #0]
	return 0;
   44848:	2000      	movs	r0, #0
   4484a:	e7ef      	b.n	4482c <at_params_short_put+0xa>

0004484c <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   4484c:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   4484e:	b910      	cbnz	r0, 44856 <at_params_empty_put+0xa>
		return -EINVAL;
   44850:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   44854:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   44856:	6843      	ldr	r3, [r0, #4]
   44858:	2b00      	cmp	r3, #0
   4485a:	d0f9      	beq.n	44850 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   4485c:	f7e6 ff02 	bl	2b664 <at_params_get>
	if (param == NULL) {
   44860:	4604      	mov	r4, r0
   44862:	2800      	cmp	r0, #0
   44864:	d0f4      	beq.n	44850 <at_params_empty_put+0x4>
	at_param_clear(param);
   44866:	f7e6 ff47 	bl	2b6f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   4486a:	2305      	movs	r3, #5
	param->value.int_val = 0;
   4486c:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   4486e:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   44870:	60a0      	str	r0, [r4, #8]
	return 0;
   44872:	e7ef      	b.n	44854 <at_params_empty_put+0x8>

00044874 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   44874:	b538      	push	{r3, r4, r5, lr}
   44876:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   44878:	b910      	cbnz	r0, 44880 <at_params_int_put+0xc>
		return -EINVAL;
   4487a:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   4487e:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   44880:	6843      	ldr	r3, [r0, #4]
   44882:	2b00      	cmp	r3, #0
   44884:	d0f9      	beq.n	4487a <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   44886:	f7e6 feed 	bl	2b664 <at_params_get>
	if (param == NULL) {
   4488a:	4604      	mov	r4, r0
   4488c:	2800      	cmp	r0, #0
   4488e:	d0f4      	beq.n	4487a <at_params_int_put+0x6>
	at_param_clear(param);
   44890:	f7e6 ff32 	bl	2b6f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   44894:	2302      	movs	r3, #2
	param->value.int_val = value;
   44896:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   44898:	7023      	strb	r3, [r4, #0]
	return 0;
   4489a:	2000      	movs	r0, #0
   4489c:	e7ef      	b.n	4487e <at_params_int_put+0xa>

0004489e <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   4489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   448a0:	4616      	mov	r6, r2
   448a2:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   448a4:	b910      	cbnz	r0, 448ac <at_params_string_put+0xe>
		return -EINVAL;
   448a6:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   448aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   448ac:	6843      	ldr	r3, [r0, #4]
   448ae:	2b00      	cmp	r3, #0
   448b0:	d0f9      	beq.n	448a6 <at_params_string_put+0x8>
   448b2:	2a00      	cmp	r2, #0
   448b4:	d0f7      	beq.n	448a6 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   448b6:	f7e6 fed5 	bl	2b664 <at_params_get>
	if (param == NULL) {
   448ba:	4604      	mov	r4, r0
   448bc:	2800      	cmp	r0, #0
   448be:	d0f2      	beq.n	448a6 <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   448c0:	1c68      	adds	r0, r5, #1
   448c2:	f7fa fed7 	bl	3f674 <k_malloc>
	if (param_value == NULL) {
   448c6:	4607      	mov	r7, r0
   448c8:	b160      	cbz	r0, 448e4 <at_params_string_put+0x46>
   448ca:	462a      	mov	r2, r5
   448cc:	4631      	mov	r1, r6
   448ce:	f000 fcab 	bl	45228 <memcpy>
	at_param_clear(param);
   448d2:	4620      	mov	r0, r4
   448d4:	f7e6 ff10 	bl	2b6f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   448d8:	2303      	movs	r3, #3
	param->size = str_len;
   448da:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   448dc:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   448de:	60a7      	str	r7, [r4, #8]
	return 0;
   448e0:	2000      	movs	r0, #0
   448e2:	e7e2      	b.n	448aa <at_params_string_put+0xc>
		return -ENOMEM;
   448e4:	f06f 000b 	mvn.w	r0, #11
   448e8:	e7df      	b.n	448aa <at_params_string_put+0xc>

000448ea <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   448ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   448ec:	4616      	mov	r6, r2
   448ee:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   448f0:	b910      	cbnz	r0, 448f8 <at_params_array_put+0xe>
		return -EINVAL;
   448f2:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   448f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   448f8:	6843      	ldr	r3, [r0, #4]
   448fa:	2b00      	cmp	r3, #0
   448fc:	d0f9      	beq.n	448f2 <at_params_array_put+0x8>
   448fe:	2a00      	cmp	r2, #0
   44900:	d0f7      	beq.n	448f2 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   44902:	f7e6 feaf 	bl	2b664 <at_params_get>
	if (param == NULL) {
   44906:	4604      	mov	r4, r0
   44908:	2800      	cmp	r0, #0
   4490a:	d0f2      	beq.n	448f2 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   4490c:	4628      	mov	r0, r5
   4490e:	f7fa feb1 	bl	3f674 <k_malloc>
	if (param_value == NULL) {
   44912:	4607      	mov	r7, r0
   44914:	b160      	cbz	r0, 44930 <at_params_array_put+0x46>
   44916:	462a      	mov	r2, r5
   44918:	4631      	mov	r1, r6
   4491a:	f000 fc85 	bl	45228 <memcpy>
	at_param_clear(param);
   4491e:	4620      	mov	r0, r4
   44920:	f7e6 feea 	bl	2b6f8 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   44924:	2304      	movs	r3, #4
	param->size = array_len;
   44926:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   44928:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   4492a:	60a7      	str	r7, [r4, #8]
	return 0;
   4492c:	2000      	movs	r0, #0
   4492e:	e7e2      	b.n	448f6 <at_params_array_put+0xc>
		return -ENOMEM;
   44930:	f06f 000b 	mvn.w	r0, #11
   44934:	e7df      	b.n	448f6 <at_params_array_put+0xc>

00044936 <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   44936:	b510      	push	{r4, lr}
   44938:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   4493a:	b910      	cbnz	r0, 44942 <at_params_short_get+0xc>
		return -EINVAL;
   4493c:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   44940:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   44942:	6843      	ldr	r3, [r0, #4]
   44944:	2b00      	cmp	r3, #0
   44946:	d0f9      	beq.n	4493c <at_params_short_get+0x6>
   44948:	2a00      	cmp	r2, #0
   4494a:	d0f7      	beq.n	4493c <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   4494c:	f7e6 fe8a 	bl	2b664 <at_params_get>
	if (param == NULL) {
   44950:	2800      	cmp	r0, #0
   44952:	d0f3      	beq.n	4493c <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   44954:	7803      	ldrb	r3, [r0, #0]
   44956:	2b01      	cmp	r3, #1
   44958:	d1f0      	bne.n	4493c <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   4495a:	6883      	ldr	r3, [r0, #8]
	return 0;
   4495c:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   4495e:	8023      	strh	r3, [r4, #0]
	return 0;
   44960:	e7ee      	b.n	44940 <at_params_short_get+0xa>

00044962 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   44962:	b510      	push	{r4, lr}
   44964:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   44966:	b910      	cbnz	r0, 4496e <at_params_int_get+0xc>
		return -EINVAL;
   44968:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   4496c:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   4496e:	6843      	ldr	r3, [r0, #4]
   44970:	2b00      	cmp	r3, #0
   44972:	d0f9      	beq.n	44968 <at_params_int_get+0x6>
   44974:	2a00      	cmp	r2, #0
   44976:	d0f7      	beq.n	44968 <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   44978:	f7e6 fe74 	bl	2b664 <at_params_get>
	if (param == NULL) {
   4497c:	2800      	cmp	r0, #0
   4497e:	d0f3      	beq.n	44968 <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   44980:	7803      	ldrb	r3, [r0, #0]
   44982:	3b01      	subs	r3, #1
   44984:	2b01      	cmp	r3, #1
   44986:	d8ef      	bhi.n	44968 <at_params_int_get+0x6>
	*value = param->value.int_val;
   44988:	6883      	ldr	r3, [r0, #8]
	return 0;
   4498a:	2000      	movs	r0, #0
	*value = param->value.int_val;
   4498c:	6023      	str	r3, [r4, #0]
	return 0;
   4498e:	e7ed      	b.n	4496c <at_params_int_get+0xa>

00044990 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   44990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44992:	4616      	mov	r6, r2
   44994:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   44996:	b910      	cbnz	r0, 4499e <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   44998:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   4499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   4499e:	6843      	ldr	r3, [r0, #4]
   449a0:	2b00      	cmp	r3, #0
   449a2:	d0f9      	beq.n	44998 <at_params_string_get+0x8>
   449a4:	2a00      	cmp	r2, #0
   449a6:	d0f7      	beq.n	44998 <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   449a8:	2c00      	cmp	r4, #0
   449aa:	d0f5      	beq.n	44998 <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   449ac:	f7e6 fe5a 	bl	2b664 <at_params_get>
	if (param == NULL) {
   449b0:	4607      	mov	r7, r0
   449b2:	2800      	cmp	r0, #0
   449b4:	d0f0      	beq.n	44998 <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   449b6:	7803      	ldrb	r3, [r0, #0]
   449b8:	2b03      	cmp	r3, #3
   449ba:	d1ed      	bne.n	44998 <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   449bc:	f7e6 fe74 	bl	2b6a8 <at_param_size>
	if (*len < param_len) {
   449c0:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   449c2:	4605      	mov	r5, r0
	if (*len < param_len) {
   449c4:	4283      	cmp	r3, r0
   449c6:	d307      	bcc.n	449d8 <at_params_string_get+0x48>
   449c8:	4602      	mov	r2, r0
   449ca:	68b9      	ldr	r1, [r7, #8]
   449cc:	4630      	mov	r0, r6
   449ce:	f000 fc2b 	bl	45228 <memcpy>
	*len = param_len;
   449d2:	6025      	str	r5, [r4, #0]
	return 0;
   449d4:	2000      	movs	r0, #0
   449d6:	e7e1      	b.n	4499c <at_params_string_get+0xc>
		return -ENOMEM;
   449d8:	f06f 000b 	mvn.w	r0, #11
   449dc:	e7de      	b.n	4499c <at_params_string_get+0xc>

000449de <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   449de:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   449e0:	4605      	mov	r5, r0
   449e2:	b180      	cbz	r0, 44a06 <at_params_valid_count_get+0x28>
   449e4:	6843      	ldr	r3, [r0, #4]
   449e6:	b173      	cbz	r3, 44a06 <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   449e8:	2100      	movs	r1, #0
   449ea:	f7e6 fe3b 	bl	2b664 <at_params_get>
	size_t valid_i = 0;
   449ee:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   449f0:	b108      	cbz	r0, 449f6 <at_params_valid_count_get+0x18>
   449f2:	7803      	ldrb	r3, [r0, #0]
   449f4:	b90b      	cbnz	r3, 449fa <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   449f6:	4620      	mov	r0, r4
   449f8:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   449fa:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   449fc:	4621      	mov	r1, r4
   449fe:	4628      	mov	r0, r5
   44a00:	f7e6 fe30 	bl	2b664 <at_params_get>
   44a04:	e7f4      	b.n	449f0 <at_params_valid_count_get+0x12>
		return -EINVAL;
   44a06:	f06f 0415 	mvn.w	r4, #21
   44a0a:	e7f4      	b.n	449f6 <at_params_valid_count_get+0x18>

00044a0c <response_is_valid>:
{
   44a0c:	b570      	push	{r4, r5, r6, lr}
   44a0e:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   44a10:	4610      	mov	r0, r2
{
   44a12:	460d      	mov	r5, r1
   44a14:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   44a16:	f7d8 fc25 	bl	1d264 <strlen>
   44a1a:	42a8      	cmp	r0, r5
   44a1c:	d808      	bhi.n	44a30 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   44a1e:	462a      	mov	r2, r5
   44a20:	4621      	mov	r1, r4
   44a22:	4630      	mov	r0, r6
   44a24:	f000 fbf2 	bl	4520c <memcmp>
	if ((response_len < strlen(check)) ||
   44a28:	fab0 f080 	clz	r0, r0
   44a2c:	0940      	lsrs	r0, r0, #5
}
   44a2e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   44a30:	2000      	movs	r0, #0
   44a32:	e7fc      	b.n	44a2e <response_is_valid+0x22>

00044a34 <lte_lc_init_and_connect>:
{
   44a34:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   44a36:	f7e7 f9b9 	bl	2bdac <w_lte_lc_init>
	if (ret) {
   44a3a:	b920      	cbnz	r0, 44a46 <lte_lc_init_and_connect+0x12>
}
   44a3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   44a40:	2001      	movs	r0, #1
   44a42:	f7e7 b84d 	b.w	2bae0 <w_lte_lc_connect>
}
   44a46:	bd08      	pop	{r3, pc}

00044a48 <json_add_str>:
{
   44a48:	b538      	push	{r3, r4, r5, lr}
   44a4a:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   44a4c:	4604      	mov	r4, r0
   44a4e:	b158      	cbz	r0, 44a68 <json_add_str+0x20>
   44a50:	b152      	cbz	r2, 44a68 <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   44a52:	4610      	mov	r0, r2
   44a54:	f7e4 fc8e 	bl	29374 <cJSON_CreateString>
	if (json_str == NULL) {
   44a58:	4602      	mov	r2, r0
   44a5a:	b140      	cbz	r0, 44a6e <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   44a5c:	4620      	mov	r0, r4
   44a5e:	4629      	mov	r1, r5
   44a60:	f7ff fac7 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   44a64:	2000      	movs	r0, #0
}
   44a66:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   44a68:	f06f 0015 	mvn.w	r0, #21
   44a6c:	e7fb      	b.n	44a66 <json_add_str+0x1e>
		return -ENOMEM;
   44a6e:	f06f 000b 	mvn.w	r0, #11
   44a72:	e7f8      	b.n	44a66 <json_add_str+0x1e>

00044a74 <json_add_data>:
{
   44a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   44a76:	4604      	mov	r4, r0
   44a78:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   44a7a:	460f      	mov	r7, r1
   44a7c:	b921      	cbnz	r1, 44a88 <json_add_data+0x14>
		return -EINVAL;
   44a7e:	f06f 0615 	mvn.w	r6, #21
}
   44a82:	4630      	mov	r0, r6
   44a84:	b01b      	add	sp, #108	; 0x6c
   44a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   44a88:	2264      	movs	r2, #100	; 0x64
   44a8a:	2100      	movs	r1, #0
   44a8c:	a801      	add	r0, sp, #4
   44a8e:	f000 fbeb 	bl	45268 <memset>
	ret = modem_info_name_get(param->type,
   44a92:	a901      	add	r1, sp, #4
   44a94:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   44a98:	f7e7 fb68 	bl	2c16c <modem_info_name_get>
	if (ret < 0) {
   44a9c:	1e05      	subs	r5, r0, #0
   44a9e:	dbee      	blt.n	44a7e <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   44aa0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   44aa4:	f7e7 fb58 	bl	2c158 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   44aa8:	2803      	cmp	r0, #3
   44aaa:	d113      	bne.n	44ad4 <json_add_data+0x60>
   44aac:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   44ab0:	2b03      	cmp	r3, #3
   44ab2:	d00f      	beq.n	44ad4 <json_add_data+0x60>
		total_len += strlen(param->value_string);
   44ab4:	3402      	adds	r4, #2
   44ab6:	4620      	mov	r0, r4
   44ab8:	f7d8 fbd4 	bl	1d264 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   44abc:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   44abe:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   44ac0:	a901      	add	r1, sp, #4
   44ac2:	4638      	mov	r0, r7
   44ac4:	f7ff ffc0 	bl	44a48 <json_add_str>
   44ac8:	4428      	add	r0, r5
	if (ret < 0) {
   44aca:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   44ace:	bf28      	it	cs
   44ad0:	4606      	movcs	r6, r0
   44ad2:	e7d6      	b.n	44a82 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   44ad4:	8820      	ldrh	r0, [r4, #0]
   44ad6:	f7d7 fdf5 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   44ada:	ec41 0b10 	vmov	d0, r0, r1
   44ade:	f7d9 f803 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   44ae2:	4602      	mov	r2, r0
   44ae4:	b138      	cbz	r0, 44af6 <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   44ae6:	4638      	mov	r0, r7
   44ae8:	a901      	add	r1, sp, #4
   44aea:	f7ff fa82 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   44aee:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   44af0:	4428      	add	r0, r5
		total_len += sizeof(uint16_t);
   44af2:	2602      	movs	r6, #2
   44af4:	e7e9      	b.n	44aca <json_add_data+0x56>
		return -ENOMEM;
   44af6:	f06f 000b 	mvn.w	r0, #11
   44afa:	e7f9      	b.n	44af0 <json_add_data+0x7c>

00044afc <sim_data_add>:
{
   44afc:	b570      	push	{r4, r5, r6, lr}
   44afe:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   44b00:	4606      	mov	r6, r0
   44b02:	b180      	cbz	r0, 44b26 <sim_data_add+0x2a>
   44b04:	b179      	cbz	r1, 44b26 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   44b06:	f7ff ffb5 	bl	44a74 <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   44b0a:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   44b0c:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   44b0e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   44b12:	f7ff ffaf 	bl	44a74 <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   44b16:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   44b18:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   44b1a:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   44b1e:	f7ff ffa9 	bl	44a74 <json_add_data>
   44b22:	4420      	add	r0, r4
}
   44b24:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   44b26:	f06f 0015 	mvn.w	r0, #21
   44b2a:	e7fb      	b.n	44b24 <sim_data_add+0x28>

00044b2c <k_uptime_get>:
{
   44b2c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   44b2e:	f000 faa6 	bl	4507e <z_impl_k_uptime_ticks>
   44b32:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   44b36:	fba0 2304 	umull	r2, r3, r0, r4
   44b3a:	fb04 3301 	mla	r3, r4, r1, r3
   44b3e:	0bd0      	lsrs	r0, r2, #15
}
   44b40:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   44b44:	0bd9      	lsrs	r1, r3, #15
   44b46:	bd10      	pop	{r4, pc}

00044b48 <date_time_timestamp_clear>:
	return 0;
}

int date_time_timestamp_clear(int64_t *unix_timestamp)
{
	if (unix_timestamp == NULL) {
   44b48:	b128      	cbz	r0, 44b56 <date_time_timestamp_clear+0xe>
		return -EINVAL;
	}

	*unix_timestamp = 0;
   44b4a:	2200      	movs	r2, #0
   44b4c:	2300      	movs	r3, #0
   44b4e:	e9c0 2300 	strd	r2, r3, [r0]

	return 0;
   44b52:	2000      	movs	r0, #0
   44b54:	4770      	bx	lr
		return -EINVAL;
   44b56:	f06f 0015 	mvn.w	r0, #21
}
   44b5a:	4770      	bx	lr

00044b5c <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   44b5c:	6843      	ldr	r3, [r0, #4]
   44b5e:	685b      	ldr	r3, [r3, #4]
   44b60:	b103      	cbz	r3, 44b64 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   44b62:	4718      	bx	r3
	}
}
   44b64:	4770      	bx	lr

00044b66 <api_user_data_set>:
	backend->config->user_data = user_data;
   44b66:	6843      	ldr	r3, [r0, #4]
}
   44b68:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   44b6a:	60d9      	str	r1, [r3, #12]
}
   44b6c:	4770      	bx	lr

00044b6e <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44b6e:	e8d0 3fef 	ldaex	r3, [r0]
   44b72:	e8c0 1fe2 	stlex	r2, r1, [r0]
   44b76:	2a00      	cmp	r2, #0
   44b78:	d1f9      	bne.n	44b6e <atomic_set>
}
   44b7a:	4618      	mov	r0, r3
   44b7c:	4770      	bx	lr

00044b7e <api_ping>:
{
   44b7e:	b508      	push	{r3, lr}
	nct_process();
   44b80:	f7ea fb00 	bl	2f184 <nct_process>
}
   44b84:	2000      	movs	r0, #0
   44b86:	bd08      	pop	{r3, pc}

00044b88 <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   44b88:	f7ea bb08 	b.w	2f19c <nct_keepalive_time_left>

00044b8c <api_input>:
   44b8c:	b508      	push	{r3, lr}
   44b8e:	f7ea faf9 	bl	2f184 <nct_process>
   44b92:	2000      	movs	r0, #0
   44b94:	bd08      	pop	{r3, pc}

00044b96 <api_disconnect>:
	return nrf_cloud_disconnect();
   44b96:	f7e8 bc6d 	b.w	2d474 <nrf_cloud_disconnect>

00044b9a <json_add_str>:
{
   44b9a:	b538      	push	{r3, r4, r5, lr}
   44b9c:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   44b9e:	4610      	mov	r0, r2
{
   44ba0:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   44ba2:	f7e4 fbe7 	bl	29374 <cJSON_CreateString>
	if (json_str == NULL) {
   44ba6:	4602      	mov	r2, r0
   44ba8:	b128      	cbz	r0, 44bb6 <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   44baa:	4620      	mov	r0, r4
   44bac:	4629      	mov	r1, r5
   44bae:	f7ff fa20 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   44bb2:	2000      	movs	r0, #0
}
   44bb4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   44bb6:	f06f 000b 	mvn.w	r0, #11
   44bba:	e7fb      	b.n	44bb4 <json_add_str+0x1a>

00044bbc <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   44bbc:	b108      	cbz	r0, 44bc2 <json_object_decode+0x6>
   44bbe:	f7ff ba0c 	b.w	43fda <cJSON_GetObjectItem>
}
   44bc2:	4770      	bx	lr

00044bc4 <json_add_null>:
{
   44bc4:	b538      	push	{r3, r4, r5, lr}
   44bc6:	4604      	mov	r4, r0
   44bc8:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   44bca:	f7e4 fbb7 	bl	2933c <cJSON_CreateNull>
	if (json_null == NULL) {
   44bce:	4602      	mov	r2, r0
   44bd0:	b128      	cbz	r0, 44bde <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   44bd2:	4620      	mov	r0, r4
   44bd4:	4629      	mov	r1, r5
   44bd6:	f7ff fa0c 	bl	43ff2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   44bda:	2000      	movs	r0, #0
}
   44bdc:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   44bde:	f06f 000b 	mvn.w	r0, #11
   44be2:	e7fb      	b.n	44bdc <json_add_null+0x18>

00044be4 <json_decode_and_alloc>:
{
   44be4:	b538      	push	{r3, r4, r5, lr}
   44be6:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   44be8:	4604      	mov	r4, r0
   44bea:	b110      	cbz	r0, 44bf2 <json_decode_and_alloc+0xe>
   44bec:	68c3      	ldr	r3, [r0, #12]
   44bee:	2b10      	cmp	r3, #16
   44bf0:	d004      	beq.n	44bfc <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   44bf2:	2300      	movs	r3, #0
		return -ENOENT;
   44bf4:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   44bf8:	606b      	str	r3, [r5, #4]
}
   44bfa:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   44bfc:	6900      	ldr	r0, [r0, #16]
   44bfe:	f7d8 fb31 	bl	1d264 <strlen>
   44c02:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   44c04:	3001      	adds	r0, #1
   44c06:	f7fa fd35 	bl	3f674 <k_malloc>
   44c0a:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   44c0c:	b130      	cbz	r0, 44c1c <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   44c0e:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   44c10:	6921      	ldr	r1, [r4, #16]
   44c12:	3201      	adds	r2, #1
   44c14:	f000 fd13 	bl	4563e <strncpy>
	return 0;
   44c18:	2000      	movs	r0, #0
   44c1a:	e7ee      	b.n	44bfa <json_decode_and_alloc+0x16>
		return -ENOMEM;
   44c1c:	f06f 000b 	mvn.w	r0, #11
   44c20:	e7eb      	b.n	44bfa <json_decode_and_alloc+0x16>

00044c22 <nrf_codec_init>:
{
   44c22:	b508      	push	{r3, lr}
	cJSON_Init();
   44c24:	f7e4 fbd6 	bl	293d4 <cJSON_Init>
}
   44c28:	2000      	movs	r0, #0
   44c2a:	bd08      	pop	{r3, pc}

00044c2c <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   44c2c:	2000      	movs	r0, #0
   44c2e:	4770      	bx	lr

00044c30 <disconnection_handler>:
{
   44c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   44c32:	2218      	movs	r2, #24
   44c34:	2100      	movs	r1, #0
   44c36:	4668      	mov	r0, sp
   44c38:	f000 fb16 	bl	45268 <memset>
   44c3c:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   44c3e:	4669      	mov	r1, sp
   44c40:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   44c42:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   44c46:	f7e8 fb99 	bl	2d37c <nfsm_set_current_state_and_notify>
}
   44c4a:	2000      	movs	r0, #0
   44c4c:	b007      	add	sp, #28
   44c4e:	f85d fb04 	ldr.w	pc, [sp], #4

00044c52 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   44c52:	b510      	push	{r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   44c54:	2306      	movs	r3, #6
   44c56:	2400      	movs	r4, #0
{
   44c58:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   44c5a:	e9cd 4400 	strd	r4, r4, [sp]
   44c5e:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   44c62:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   44c64:	aa02      	add	r2, sp, #8
   44c66:	e893 0003 	ldmia.w	r3, {r0, r1}
   44c6a:	3308      	adds	r3, #8
   44c6c:	e882 0003 	stmia.w	r2, {r0, r1}
   44c70:	e893 0003 	ldmia.w	r3, {r0, r1}
   44c74:	ab06      	add	r3, sp, #24
   44c76:	e903 0003 	stmdb	r3, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   44c7a:	f7e8 fb79 	bl	2d370 <nfsm_get_current_state>
   44c7e:	4669      	mov	r1, sp
   44c80:	f7e8 fb7c 	bl	2d37c <nfsm_set_current_state_and_notify>

	return 0;
}
   44c84:	4620      	mov	r0, r4
   44c86:	b006      	add	sp, #24
   44c88:	bd10      	pop	{r4, pc}

00044c8a <dc_connection_handler>:
{
   44c8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   44c8c:	6801      	ldr	r1, [r0, #0]
   44c8e:	b951      	cbnz	r1, 44ca6 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   44c90:	2218      	movs	r2, #24
   44c92:	4668      	mov	r0, sp
   44c94:	f000 fae8 	bl	45268 <memset>
   44c98:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   44c9a:	4669      	mov	r1, sp
   44c9c:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   44c9e:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   44ca2:	f7e8 fb6b 	bl	2d37c <nfsm_set_current_state_and_notify>
}
   44ca6:	2000      	movs	r0, #0
   44ca8:	b007      	add	sp, #28
   44caa:	f85d fb04 	ldr.w	pc, [sp], #4

00044cae <cc_tx_ack_in_state_requested_handler>:
{
   44cae:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   44cb0:	f241 632e 	movw	r3, #5678	; 0x162e
   44cb4:	6842      	ldr	r2, [r0, #4]
   44cb6:	429a      	cmp	r2, r3
   44cb8:	d103      	bne.n	44cc2 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   44cba:	2100      	movs	r1, #0
   44cbc:	2005      	movs	r0, #5
   44cbe:	f7e8 fb5d 	bl	2d37c <nfsm_set_current_state_and_notify>
}
   44cc2:	2000      	movs	r0, #0
   44cc4:	bd08      	pop	{r3, pc}

00044cc6 <dc_disconnection_handler>:
   44cc6:	2000      	movs	r0, #0
   44cc8:	4770      	bx	lr

00044cca <dc_tx_ack_handler>:
   44cca:	2000      	movs	r0, #0
   44ccc:	4770      	bx	lr

00044cce <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   44cce:	2101      	movs	r1, #1
   44cd0:	f7e9 bbdc 	b.w	2e48c <dc_send>

00044cd4 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   44cd4:	2100      	movs	r1, #0
   44cd6:	f7e9 bbd9 	b.w	2e48c <dc_send>

00044cda <reset_topic>:
{
   44cda:	b510      	push	{r4, lr}
   44cdc:	4604      	mov	r4, r0
	if (topic->utf8) {
   44cde:	6800      	ldr	r0, [r0, #0]
   44ce0:	b118      	cbz	r0, 44cea <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   44ce2:	f000 fa66 	bl	451b2 <k_free>
		topic->utf8 = NULL;
   44ce6:	2300      	movs	r3, #0
   44ce8:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   44cea:	2300      	movs	r3, #0
   44cec:	6063      	str	r3, [r4, #4]
}
   44cee:	bd10      	pop	{r4, pc}

00044cf0 <request_send>:
	switch (dl->proto) {
   44cf0:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   44cf4:	2b06      	cmp	r3, #6
   44cf6:	d002      	beq.n	44cfe <request_send+0xe>
   44cf8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   44cfc:	d101      	bne.n	44d02 <request_send+0x12>
		return http_get_request_send(dl);
   44cfe:	f7ec bbe9 	b.w	314d4 <http_get_request_send>
}
   44d02:	2000      	movs	r0, #0
   44d04:	4770      	bx	lr

00044d06 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   44d06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   44d08:	2300      	movs	r3, #0
   44d0a:	9301      	str	r3, [sp, #4]
   44d0c:	9303      	str	r3, [sp, #12]
   44d0e:	2301      	movs	r3, #1
		.error = -error
   44d10:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   44d12:	f88d 3004 	strb.w	r3, [sp, #4]
   44d16:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   44d18:	6803      	ldr	r3, [r0, #0]
   44d1a:	a801      	add	r0, sp, #4
   44d1c:	4798      	blx	r3
}
   44d1e:	b005      	add	sp, #20
   44d20:	f85d fb04 	ldr.w	pc, [sp], #4

00044d24 <socket_send>:
{
   44d24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   44d28:	2500      	movs	r5, #0
{
   44d2a:	4606      	mov	r6, r0
   44d2c:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   44d2e:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   44d30:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   44d34:	b90c      	cbnz	r4, 44d3a <socket_send+0x16>
	return 0;
   44d36:	4620      	mov	r0, r4
   44d38:	e00e      	b.n	44d58 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   44d3a:	6830      	ldr	r0, [r6, #0]
   44d3c:	2300      	movs	r3, #0
   44d3e:	e9cd 7700 	strd	r7, r7, [sp]
   44d42:	4622      	mov	r2, r4
   44d44:	eb08 0105 	add.w	r1, r8, r5
   44d48:	f7fd fd1c 	bl	42784 <z_impl_zsock_sendto>
		if (sent <= 0) {
   44d4c:	2800      	cmp	r0, #0
   44d4e:	dc06      	bgt.n	44d5e <socket_send+0x3a>
			return -errno;
   44d50:	f7fd ffe3 	bl	42d1a <__errno>
   44d54:	6800      	ldr	r0, [r0, #0]
   44d56:	4240      	negs	r0, r0
}
   44d58:	b002      	add	sp, #8
   44d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   44d5e:	4405      	add	r5, r0
		len -= sent;
   44d60:	1a24      	subs	r4, r4, r0
   44d62:	e7e7      	b.n	44d34 <socket_send+0x10>

00044d64 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   44d64:	b128      	cbz	r0, 44d72 <download_client_file_size_get+0xe>
   44d66:	b121      	cbz	r1, 44d72 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   44d68:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   44d6c:	2000      	movs	r0, #0
	*size = client->file_size;
   44d6e:	600b      	str	r3, [r1, #0]
	return 0;
   44d70:	4770      	bx	lr
		return -EINVAL;
   44d72:	f06f 0015 	mvn.w	r0, #21
}
   44d76:	4770      	bx	lr

00044d78 <swallow>:
{
   44d78:	b570      	push	{r4, r5, r6, lr}
   44d7a:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   44d7c:	6800      	ldr	r0, [r0, #0]
{
   44d7e:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   44d80:	f000 fc7c 	bl	4567c <strstr>
	if (!p) {
   44d84:	4604      	mov	r4, r0
   44d86:	b130      	cbz	r0, 44d96 <swallow+0x1e>
	*str = p + strlen(swallow);
   44d88:	4630      	mov	r0, r6
   44d8a:	f7d8 fa6b 	bl	1d264 <strlen>
   44d8e:	4420      	add	r0, r4
   44d90:	6028      	str	r0, [r5, #0]
	return 0;
   44d92:	2000      	movs	r0, #0
}
   44d94:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   44d96:	2001      	movs	r0, #1
   44d98:	e7fc      	b.n	44d94 <swallow+0x1c>

00044d9a <dfu_target_callback_handler>:
	switch (evt) {
   44d9a:	b118      	cbz	r0, 44da4 <dfu_target_callback_handler+0xa>
   44d9c:	2801      	cmp	r0, #1
   44d9e:	d004      	beq.n	44daa <dfu_target_callback_handler+0x10>
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   44da0:	2004      	movs	r0, #4
   44da2:	e000      	b.n	44da6 <dfu_target_callback_handler+0xc>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_PENDING);
   44da4:	2002      	movs	r0, #2
		send_evt(FOTA_DOWNLOAD_EVT_ERROR);
   44da6:	f7ec bd77 	b.w	31898 <send_evt>
		send_evt(FOTA_DOWNLOAD_EVT_ERASE_DONE);
   44daa:	2003      	movs	r0, #3
   44dac:	e7fb      	b.n	44da6 <dfu_target_callback_handler+0xc>

00044dae <sensor_sim_attr_set>:
}
   44dae:	2000      	movs	r0, #0
   44db0:	4770      	bx	lr

00044db2 <sensor_sim_thread>:
{
   44db2:	b570      	push	{r4, r5, r6, lr}
   44db4:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->data;
   44db6:	68c5      	ldr	r5, [r0, #12]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   44db8:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(timeout);
   44dbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   44dc0:	2100      	movs	r1, #0
   44dc2:	f7f9 f9e3 	bl	3e18c <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   44dc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   44dc8:	2b00      	cmp	r3, #0
   44dca:	d0f7      	beq.n	44dbc <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   44dcc:	4631      	mov	r1, r6
   44dce:	4620      	mov	r0, r4
   44dd0:	4798      	blx	r3
   44dd2:	e7f3      	b.n	44dbc <sensor_sim_thread+0xa>

00044dd4 <notify_event>:
	if (drv_data->handler) {
   44dd4:	68c3      	ldr	r3, [r0, #12]
   44dd6:	685b      	ldr	r3, [r3, #4]
   44dd8:	b103      	cbz	r3, 44ddc <notify_event+0x8>
		drv_data->handler(dev, evt);
   44dda:	4718      	bx	r3
}
   44ddc:	4770      	bx	lr

00044dde <stop_work_fn>:
{
   44dde:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   44de0:	f5a0 6011 	sub.w	r0, r0, #2320	; 0x910
{
   44de4:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   44de6:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   44de8:	22c0      	movs	r2, #192	; 0xc0
   44dea:	2100      	movs	r1, #0
   44dec:	4668      	mov	r0, sp
   44dee:	f000 fa3b 	bl	45268 <memset>
   44df2:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   44df4:	4669      	mov	r1, sp
   44df6:	4620      	mov	r0, r4
	struct gps_event evt = {
   44df8:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   44dfc:	f7ff ffea 	bl	44dd4 <notify_event>
}
   44e00:	b030      	add	sp, #192	; 0xc0
   44e02:	bd10      	pop	{r4, pc}

00044e04 <timeout_work_fn>:
{
   44e04:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   44e06:	f5a0 6014 	sub.w	r0, r0, #2368	; 0x940
{
   44e0a:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   44e0c:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   44e0e:	22c0      	movs	r2, #192	; 0xc0
   44e10:	2100      	movs	r1, #0
   44e12:	4668      	mov	r0, sp
   44e14:	f000 fa28 	bl	45268 <memset>
   44e18:	2302      	movs	r3, #2
	notify_event(dev, &evt);
   44e1a:	4669      	mov	r1, sp
   44e1c:	4620      	mov	r0, r4
	struct gps_event evt = {
   44e1e:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   44e22:	f7ff ffd7 	bl	44dd4 <notify_event>
}
   44e26:	b030      	add	sp, #192	; 0xc0
   44e28:	bd10      	pop	{r4, pc}

00044e2a <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   44e2a:	e8d0 3fef 	ldaex	r3, [r0]
   44e2e:	e8c0 1fe2 	stlex	r2, r1, [r0]
   44e32:	2a00      	cmp	r2, #0
   44e34:	d1f9      	bne.n	44e2a <atomic_set>
}
   44e36:	4618      	mov	r0, r3
   44e38:	4770      	bx	lr

00044e3a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   44e3a:	4700      	bx	r0

00044e3c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   44e3c:	f000 b8b0 	b.w	44fa0 <z_impl_k_busy_wait>

00044e40 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   44e40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   44e44:	4770      	bx	lr

00044e46 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   44e46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   44e4a:	4770      	bx	lr

00044e4c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   44e4c:	f44f 7080 	mov.w	r0, #256	; 0x100
   44e50:	4770      	bx	lr

00044e52 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   44e52:	f7fd bf0c 	b.w	42c6e <z_clock_idle_exit>

00044e56 <k_heap_init>:
{
   44e56:	b410      	push	{r4}
   44e58:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   44e5c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   44e60:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   44e64:	f7df be78 	b.w	24b58 <sys_heap_init>

00044e68 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   44e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44e6a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   44e6e:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   44e70:	6800      	ldr	r0, [r0, #0]
{
   44e72:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   44e74:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   44e76:	4632      	mov	r2, r6
   44e78:	463b      	mov	r3, r7
   44e7a:	4621      	mov	r1, r4
   44e7c:	f7f7 fb28 	bl	3c4d0 <k_heap_alloc>
   44e80:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   44e82:	b144      	cbz	r4, 44e96 <k_mem_pool_alloc+0x2e>
   44e84:	b938      	cbnz	r0, 44e96 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   44e86:	ea56 0307 	orrs.w	r3, r6, r7
   44e8a:	bf0c      	ite	eq
   44e8c:	f06f 000b 	mvneq.w	r0, #11
   44e90:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   44e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   44e96:	2000      	movs	r0, #0
   44e98:	e7fc      	b.n	44e94 <k_mem_pool_alloc+0x2c>

00044e9a <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   44e9a:	e9d0 1000 	ldrd	r1, r0, [r0]
   44e9e:	f7f7 bbc1 	b.w	3c624 <k_heap_free>

00044ea2 <z_impl_k_mutex_init>:
{
   44ea2:	4603      	mov	r3, r0
	mutex->owner = NULL;
   44ea4:	2000      	movs	r0, #0
   44ea6:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   44eaa:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   44eae:	4770      	bx	lr

00044eb0 <z_queue_node_peek>:
{
   44eb0:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   44eb2:	4604      	mov	r4, r0
   44eb4:	b130      	cbz	r0, 44ec4 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   44eb6:	6802      	ldr	r2, [r0, #0]
   44eb8:	0793      	lsls	r3, r2, #30
   44eba:	d003      	beq.n	44ec4 <z_queue_node_peek+0x14>
		ret = anode->data;
   44ebc:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   44ebe:	b109      	cbz	r1, 44ec4 <z_queue_node_peek+0x14>
			k_free(anode);
   44ec0:	f000 f977 	bl	451b2 <k_free>
}
   44ec4:	4620      	mov	r0, r4
   44ec6:	bd10      	pop	{r4, pc}

00044ec8 <z_impl_k_queue_init>:
	list->head = NULL;
   44ec8:	2300      	movs	r3, #0
	list->tail = NULL;
   44eca:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   44ece:	6083      	str	r3, [r0, #8]
   44ed0:	f100 030c 	add.w	r3, r0, #12
   44ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   44ed8:	f100 0314 	add.w	r3, r0, #20
   44edc:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   44ee0:	4770      	bx	lr

00044ee2 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   44ee2:	460a      	mov	r2, r1
   44ee4:	2300      	movs	r3, #0
   44ee6:	6841      	ldr	r1, [r0, #4]
   44ee8:	f7f7 bf46 	b.w	3cd78 <queue_insert>

00044eec <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   44eec:	f990 000e 	ldrsb.w	r0, [r0, #14]
   44ef0:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   44ef4:	4298      	cmp	r0, r3
   44ef6:	bfac      	ite	ge
   44ef8:	2000      	movge	r0, #0
   44efa:	2001      	movlt	r0, #1
   44efc:	4770      	bx	lr

00044efe <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   44efe:	4603      	mov	r3, r0
   44f00:	b920      	cbnz	r0, 44f0c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   44f02:	f3ef 8205 	mrs	r2, IPSR
   44f06:	b90a      	cbnz	r2, 44f0c <z_reschedule_irqlock+0xe>
   44f08:	f7e1 bde8 	b.w	26adc <arch_swap>
   44f0c:	f383 8811 	msr	BASEPRI, r3
   44f10:	f3bf 8f6f 	isb	sy
}
   44f14:	4770      	bx	lr

00044f16 <z_reschedule_unlocked>:
	__asm__ volatile(
   44f16:	f04f 0320 	mov.w	r3, #32
   44f1a:	f3ef 8011 	mrs	r0, BASEPRI
   44f1e:	f383 8811 	msr	BASEPRI, r3
   44f22:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   44f26:	f7ff bfea 	b.w	44efe <z_reschedule_irqlock>

00044f2a <unpend_thread_no_timeout>:
{
   44f2a:	b510      	push	{r4, lr}
   44f2c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   44f2e:	3008      	adds	r0, #8
   44f30:	f7f8 f822 	bl	3cf78 <pended_on.isra.18>
   44f34:	4621      	mov	r1, r4
   44f36:	f7f8 f969 	bl	3d20c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   44f3a:	7b63      	ldrb	r3, [r4, #13]
   44f3c:	f023 0302 	bic.w	r3, r3, #2
   44f40:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   44f42:	2300      	movs	r3, #0
   44f44:	60a3      	str	r3, [r4, #8]
}
   44f46:	bd10      	pop	{r4, pc}

00044f48 <z_priq_dumb_best>:
	return list->head == list;
   44f48:	6803      	ldr	r3, [r0, #0]
}
   44f4a:	4298      	cmp	r0, r3
   44f4c:	bf14      	ite	ne
   44f4e:	4618      	movne	r0, r3
   44f50:	2000      	moveq	r0, #0
   44f52:	4770      	bx	lr

00044f54 <z_unpend_all>:
{
   44f54:	b538      	push	{r3, r4, r5, lr}
   44f56:	4605      	mov	r5, r0
	int need_sched = 0;
   44f58:	2000      	movs	r0, #0
   44f5a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   44f5c:	42a5      	cmp	r5, r4
   44f5e:	d000      	beq.n	44f62 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   44f60:	b904      	cbnz	r4, 44f64 <z_unpend_all+0x10>
}
   44f62:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   44f64:	4620      	mov	r0, r4
   44f66:	f7f8 f97f 	bl	3d268 <z_unpend_thread>
		z_ready_thread(thread);
   44f6a:	4620      	mov	r0, r4
   44f6c:	f7f8 fab2 	bl	3d4d4 <z_ready_thread>
		need_sched = 1;
   44f70:	2001      	movs	r0, #1
   44f72:	e7f2      	b.n	44f5a <z_unpend_all+0x6>

00044f74 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   44f74:	b15a      	cbz	r2, 44f8e <z_impl_k_sem_init+0x1a>
   44f76:	428a      	cmp	r2, r1
   44f78:	d309      	bcc.n	44f8e <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   44f7a:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   44f7e:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   44f82:	e9c0 0000 	strd	r0, r0, [r0]
   44f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   44f8a:	2000      	movs	r0, #0
   44f8c:	4770      	bx	lr
		return -EINVAL;
   44f8e:	f06f 0015 	mvn.w	r0, #21
}
   44f92:	4770      	bx	lr

00044f94 <k_is_in_isr>:
   44f94:	f3ef 8005 	mrs	r0, IPSR
}
   44f98:	3000      	adds	r0, #0
   44f9a:	bf18      	it	ne
   44f9c:	2001      	movne	r0, #1
   44f9e:	4770      	bx	lr

00044fa0 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   44fa0:	f7df be8a 	b.w	24cb8 <arch_busy_wait>

00044fa4 <z_impl_k_thread_name_set>:
}
   44fa4:	f06f 0057 	mvn.w	r0, #87	; 0x57
   44fa8:	4770      	bx	lr

00044faa <k_thread_name_get>:
}
   44faa:	2000      	movs	r0, #0
   44fac:	4770      	bx	lr

00044fae <k_work_submit_to_queue>:
{
   44fae:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   44fb0:	f101 0308 	add.w	r3, r1, #8
   44fb4:	e8d3 2fef 	ldaex	r2, [r3]
   44fb8:	f042 0c01 	orr.w	ip, r2, #1
   44fbc:	e8c3 cfee 	stlex	lr, ip, [r3]
   44fc0:	f1be 0f00 	cmp.w	lr, #0
   44fc4:	d1f6      	bne.n	44fb4 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   44fc6:	07d3      	lsls	r3, r2, #31
   44fc8:	d403      	bmi.n	44fd2 <k_work_submit_to_queue+0x24>
}
   44fca:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   44fce:	f7ff bf88 	b.w	44ee2 <k_queue_append>
}
   44fd2:	f85d fb04 	ldr.w	pc, [sp], #4

00044fd6 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   44fd6:	f1a0 0110 	sub.w	r1, r0, #16
   44fda:	6980      	ldr	r0, [r0, #24]
   44fdc:	f7ff bfe7 	b.w	44fae <k_work_submit_to_queue>

00044fe0 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   44fe0:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   44fe2:	b570      	push	{r4, r5, r6, lr}
   44fe4:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   44fe6:	b913      	cbnz	r3, 44fee <work_cancel+0xe>
		return -EALREADY;
   44fe8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   44fec:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   44fee:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   44ff2:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   44ff6:	07db      	lsls	r3, r3, #31
   44ff8:	d52f      	bpl.n	4505a <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   44ffa:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   44ffc:	6a82      	ldr	r2, [r0, #40]	; 0x28
   44ffe:	6813      	ldr	r3, [r2, #0]
   45000:	b913      	cbnz	r3, 45008 <work_cancel+0x28>
			return -EINVAL;
   45002:	f06f 0015 	mvn.w	r0, #21
   45006:	e7f1      	b.n	44fec <work_cancel+0xc>
   45008:	429c      	cmp	r4, r3
   4500a:	d121      	bne.n	45050 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   4500c:	6823      	ldr	r3, [r4, #0]
   4500e:	6856      	ldr	r6, [r2, #4]
   45010:	f023 0003 	bic.w	r0, r3, #3
   45014:	b991      	cbnz	r1, 4503c <work_cancel+0x5c>
   45016:	42b4      	cmp	r4, r6
	list->head = node;
   45018:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   4501a:	d100      	bne.n	4501e <work_cancel+0x3e>
	list->tail = node;
   4501c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4501e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   45020:	f003 0303 	and.w	r3, r3, #3
   45024:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   45026:	2000      	movs	r0, #0
   45028:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   4502a:	e8d5 3fef 	ldaex	r3, [r5]
   4502e:	f023 0301 	bic.w	r3, r3, #1
   45032:	e8c5 3fe2 	stlex	r2, r3, [r5]
   45036:	2a00      	cmp	r2, #0
   45038:	d0d8      	beq.n	44fec <work_cancel+0xc>
   4503a:	e7f6      	b.n	4502a <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4503c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   4503e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   45040:	f003 0303 	and.w	r3, r3, #3
   45044:	ea43 0300 	orr.w	r3, r3, r0
   45048:	600b      	str	r3, [r1, #0]
	list->tail = node;
   4504a:	bf08      	it	eq
   4504c:	6051      	streq	r1, [r2, #4]
   4504e:	e7e6      	b.n	4501e <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   45050:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   45052:	4619      	mov	r1, r3
   45054:	f020 0303 	bic.w	r3, r0, #3
   45058:	e7d2      	b.n	45000 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   4505a:	3010      	adds	r0, #16
   4505c:	f7f9 fd60 	bl	3eb20 <z_abort_timeout>
		if (err) {
   45060:	2800      	cmp	r0, #0
   45062:	d0e0      	beq.n	45026 <work_cancel+0x46>
   45064:	e7c0      	b.n	44fe8 <work_cancel+0x8>

00045066 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   45066:	2300      	movs	r3, #0
   45068:	e9c0 3100 	strd	r3, r1, [r0]
   4506c:	6083      	str	r3, [r0, #8]
	node->prev = NULL;
   4506e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	work->work_q = NULL;
   45072:	6283      	str	r3, [r0, #40]	; 0x28
}
   45074:	4770      	bx	lr

00045076 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   45076:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   45078:	f7f9 ff4c 	bl	3ef14 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   4507c:	bd08      	pop	{r3, pc}

0004507e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   4507e:	f7f9 bf49 	b.w	3ef14 <z_tick_get>

00045082 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   45082:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   45084:	1c4b      	adds	r3, r1, #1
   45086:	bf08      	it	eq
   45088:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   4508c:	4604      	mov	r4, r0
   4508e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   45090:	d013      	beq.n	450ba <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   45092:	ea54 0105 	orrs.w	r1, r4, r5
   45096:	d103      	bne.n	450a0 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   45098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   4509c:	f7f9 bf3a 	b.w	3ef14 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   450a0:	f06f 0101 	mvn.w	r1, #1
   450a4:	1a0a      	subs	r2, r1, r0
   450a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   450aa:	eb61 0305 	sbc.w	r3, r1, r5
   450ae:	2a00      	cmp	r2, #0
   450b0:	f173 0100 	sbcs.w	r1, r3, #0
   450b4:	db02      	blt.n	450bc <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   450b6:	4610      	mov	r0, r2
   450b8:	4619      	mov	r1, r3
}
   450ba:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   450bc:	f7f9 ff2a 	bl	3ef14 <z_tick_get>
   450c0:	2c01      	cmp	r4, #1
   450c2:	f175 0300 	sbcs.w	r3, r5, #0
   450c6:	bfbc      	itt	lt
   450c8:	2401      	movlt	r4, #1
   450ca:	2500      	movlt	r5, #0
   450cc:	1820      	adds	r0, r4, r0
   450ce:	eb45 0101 	adc.w	r1, r5, r1
   450d2:	e7f2      	b.n	450ba <z_timeout_end_calc+0x38>

000450d4 <signal_poll_event>:
{
   450d4:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   450d6:	6884      	ldr	r4, [r0, #8]
{
   450d8:	4605      	mov	r5, r0
   450da:	460e      	mov	r6, r1
	if (poller) {
   450dc:	b19c      	cbz	r4, 45106 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   450de:	68a3      	ldr	r3, [r4, #8]
   450e0:	b95b      	cbnz	r3, 450fa <signal_poll_event+0x26>
	int retcode = 0;
   450e2:	4618      	mov	r0, r3
		poller->is_polling = false;
   450e4:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   450e6:	2300      	movs	r3, #0
   450e8:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   450ea:	68eb      	ldr	r3, [r5, #12]
   450ec:	f3c3 3204 	ubfx	r2, r3, #12, #5
   450f0:	4316      	orrs	r6, r2
   450f2:	f366 3310 	bfi	r3, r6, #12, #5
   450f6:	60eb      	str	r3, [r5, #12]
	return retcode;
   450f8:	e004      	b.n	45104 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   450fa:	4798      	blx	r3
		poller->is_polling = false;
   450fc:	2300      	movs	r3, #0
		if (retcode < 0) {
   450fe:	2800      	cmp	r0, #0
		poller->is_polling = false;
   45100:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   45102:	daf0      	bge.n	450e6 <signal_poll_event+0x12>
}
   45104:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   45106:	4620      	mov	r0, r4
   45108:	e7ed      	b.n	450e6 <signal_poll_event+0x12>

0004510a <add_event>:
{
   4510a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4510c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   4510e:	e9d0 2300 	ldrd	r2, r3, [r0]
   45112:	4290      	cmp	r0, r2
   45114:	4604      	mov	r4, r0
   45116:	460d      	mov	r5, r1
   45118:	d106      	bne.n	45128 <add_event+0x1e>
	node->prev = list->tail;
   4511a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   4511c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   4511e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   45120:	6863      	ldr	r3, [r4, #4]
   45122:	601d      	str	r5, [r3, #0]
	list->tail = node;
   45124:	6065      	str	r5, [r4, #4]
}
   45126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   45128:	2b00      	cmp	r3, #0
   4512a:	d0f6      	beq.n	4511a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   4512c:	689b      	ldr	r3, [r3, #8]
   4512e:	6879      	ldr	r1, [r7, #4]
   45130:	6858      	ldr	r0, [r3, #4]
   45132:	f7ff fedb 	bl	44eec <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   45136:	2800      	cmp	r0, #0
   45138:	d1ef      	bne.n	4511a <add_event+0x10>
	return list->head == list;
   4513a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4513c:	42b4      	cmp	r4, r6
   4513e:	d0ec      	beq.n	4511a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   45140:	2e00      	cmp	r6, #0
   45142:	d0ea      	beq.n	4511a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   45144:	68b3      	ldr	r3, [r6, #8]
   45146:	6878      	ldr	r0, [r7, #4]
   45148:	6859      	ldr	r1, [r3, #4]
   4514a:	f7ff fecf 	bl	44eec <z_is_t1_higher_prio_than_t2>
   4514e:	b128      	cbz	r0, 4515c <add_event+0x52>
	node->prev = successor->prev;
   45150:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   45152:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   45156:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   45158:	6075      	str	r5, [r6, #4]
			return;
   4515a:	e7e4      	b.n	45126 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   4515c:	6863      	ldr	r3, [r4, #4]
   4515e:	429e      	cmp	r6, r3
   45160:	d0db      	beq.n	4511a <add_event+0x10>
   45162:	6836      	ldr	r6, [r6, #0]
   45164:	e7ec      	b.n	45140 <add_event+0x36>

00045166 <z_handle_obj_poll_events>:
	return list->head == list;
   45166:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   45168:	4298      	cmp	r0, r3
   4516a:	d009      	beq.n	45180 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   4516c:	e9d3 2000 	ldrd	r2, r0, [r3]
   45170:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   45172:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   45174:	2200      	movs	r2, #0
		(void) signal_poll_event(poll_event, state);
   45176:	4618      	mov	r0, r3
	node->prev = NULL;
   45178:	e9c3 2200 	strd	r2, r2, [r3]
   4517c:	f7ff bfaa 	b.w	450d4 <signal_poll_event>
}
   45180:	4770      	bx	lr

00045182 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   45182:	2208      	movs	r2, #8
{
   45184:	b530      	push	{r4, r5, lr}
   45186:	188a      	adds	r2, r1, r2
   45188:	b085      	sub	sp, #20
   4518a:	d207      	bcs.n	4519c <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   4518c:	2400      	movs	r4, #0
   4518e:	2500      	movs	r5, #0
   45190:	a902      	add	r1, sp, #8
   45192:	e9cd 4500 	strd	r4, r5, [sp]
   45196:	f7ff fe67 	bl	44e68 <k_mem_pool_alloc>
   4519a:	b110      	cbz	r0, 451a2 <k_mem_pool_malloc+0x20>
		return NULL;
   4519c:	2000      	movs	r0, #0
}
   4519e:	b005      	add	sp, #20
   451a0:	bd30      	pop	{r4, r5, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   451a2:	9a02      	ldr	r2, [sp, #8]
   451a4:	ab02      	add	r3, sp, #8
   451a6:	cb03      	ldmia	r3!, {r0, r1}
   451a8:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   451aa:	9802      	ldr	r0, [sp, #8]
   451ac:	6051      	str	r1, [r2, #4]
   451ae:	3008      	adds	r0, #8
   451b0:	e7f5      	b.n	4519e <k_mem_pool_malloc+0x1c>

000451b2 <k_free>:
	if (ptr != NULL) {
   451b2:	b110      	cbz	r0, 451ba <k_free+0x8>
		k_mem_pool_free_id(ptr);
   451b4:	3808      	subs	r0, #8
   451b6:	f7ff be70 	b.w	44e9a <k_mem_pool_free_id>
}
   451ba:	4770      	bx	lr

000451bc <k_calloc>:
{
   451bc:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   451be:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   451c2:	b118      	cbz	r0, 451cc <k_calloc+0x10>
   451c4:	fbb4 f0f0 	udiv	r0, r4, r0
   451c8:	4281      	cmp	r1, r0
   451ca:	d10a      	bne.n	451e2 <k_calloc+0x26>
	ret = k_malloc(bounds);
   451cc:	4620      	mov	r0, r4
   451ce:	f7fa fa51 	bl	3f674 <k_malloc>
	if (ret != NULL) {
   451d2:	4605      	mov	r5, r0
   451d4:	b118      	cbz	r0, 451de <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   451d6:	4622      	mov	r2, r4
   451d8:	2100      	movs	r1, #0
   451da:	f000 f845 	bl	45268 <memset>
}
   451de:	4628      	mov	r0, r5
   451e0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   451e2:	2500      	movs	r5, #0
   451e4:	e7fb      	b.n	451de <k_calloc+0x22>

000451e6 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   451e6:	4770      	bx	lr

000451e8 <atoi>:
   451e8:	220a      	movs	r2, #10
   451ea:	2100      	movs	r1, #0
   451ec:	f7fb b908 	b.w	40400 <strtol>

000451f0 <memchr>:
   451f0:	b2c9      	uxtb	r1, r1
   451f2:	4402      	add	r2, r0
   451f4:	b510      	push	{r4, lr}
   451f6:	4290      	cmp	r0, r2
   451f8:	4603      	mov	r3, r0
   451fa:	d101      	bne.n	45200 <memchr+0x10>
   451fc:	2300      	movs	r3, #0
   451fe:	e003      	b.n	45208 <memchr+0x18>
   45200:	781c      	ldrb	r4, [r3, #0]
   45202:	3001      	adds	r0, #1
   45204:	428c      	cmp	r4, r1
   45206:	d1f6      	bne.n	451f6 <memchr+0x6>
   45208:	4618      	mov	r0, r3
   4520a:	bd10      	pop	{r4, pc}

0004520c <memcmp>:
   4520c:	b530      	push	{r4, r5, lr}
   4520e:	3901      	subs	r1, #1
   45210:	2400      	movs	r4, #0
   45212:	42a2      	cmp	r2, r4
   45214:	d101      	bne.n	4521a <memcmp+0xe>
   45216:	2000      	movs	r0, #0
   45218:	e005      	b.n	45226 <memcmp+0x1a>
   4521a:	5d03      	ldrb	r3, [r0, r4]
   4521c:	3401      	adds	r4, #1
   4521e:	5d0d      	ldrb	r5, [r1, r4]
   45220:	42ab      	cmp	r3, r5
   45222:	d0f6      	beq.n	45212 <memcmp+0x6>
   45224:	1b58      	subs	r0, r3, r5
   45226:	bd30      	pop	{r4, r5, pc}

00045228 <memcpy>:
   45228:	440a      	add	r2, r1
   4522a:	1e43      	subs	r3, r0, #1
   4522c:	4291      	cmp	r1, r2
   4522e:	d100      	bne.n	45232 <memcpy+0xa>
   45230:	4770      	bx	lr
   45232:	b510      	push	{r4, lr}
   45234:	f811 4b01 	ldrb.w	r4, [r1], #1
   45238:	4291      	cmp	r1, r2
   4523a:	f803 4f01 	strb.w	r4, [r3, #1]!
   4523e:	d1f9      	bne.n	45234 <memcpy+0xc>
   45240:	bd10      	pop	{r4, pc}

00045242 <__memcpy_chk>:
   45242:	429a      	cmp	r2, r3
   45244:	b508      	push	{r3, lr}
   45246:	d901      	bls.n	4524c <__memcpy_chk+0xa>
   45248:	f7e2 fc4a 	bl	27ae0 <__chk_fail>
   4524c:	4281      	cmp	r1, r0
   4524e:	d804      	bhi.n	4525a <__memcpy_chk+0x18>
   45250:	188b      	adds	r3, r1, r2
   45252:	4298      	cmp	r0, r3
   45254:	d3f8      	bcc.n	45248 <__memcpy_chk+0x6>
   45256:	4281      	cmp	r1, r0
   45258:	d102      	bne.n	45260 <__memcpy_chk+0x1e>
   4525a:	1883      	adds	r3, r0, r2
   4525c:	4299      	cmp	r1, r3
   4525e:	d3f3      	bcc.n	45248 <__memcpy_chk+0x6>
   45260:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   45264:	f7ff bfe0 	b.w	45228 <memcpy>

00045268 <memset>:
   45268:	4402      	add	r2, r0
   4526a:	4603      	mov	r3, r0
   4526c:	4293      	cmp	r3, r2
   4526e:	d100      	bne.n	45272 <memset+0xa>
   45270:	4770      	bx	lr
   45272:	f803 1b01 	strb.w	r1, [r3], #1
   45276:	e7f9      	b.n	4526c <memset+0x4>

00045278 <__sfputc_r>:
   45278:	6893      	ldr	r3, [r2, #8]
   4527a:	3b01      	subs	r3, #1
   4527c:	2b00      	cmp	r3, #0
   4527e:	6093      	str	r3, [r2, #8]
   45280:	b410      	push	{r4}
   45282:	da08      	bge.n	45296 <__sfputc_r+0x1e>
   45284:	6994      	ldr	r4, [r2, #24]
   45286:	42a3      	cmp	r3, r4
   45288:	db01      	blt.n	4528e <__sfputc_r+0x16>
   4528a:	290a      	cmp	r1, #10
   4528c:	d103      	bne.n	45296 <__sfputc_r+0x1e>
   4528e:	f85d 4b04 	ldr.w	r4, [sp], #4
   45292:	f7fb b96b 	b.w	4056c <__swbuf_r>
   45296:	6813      	ldr	r3, [r2, #0]
   45298:	1c58      	adds	r0, r3, #1
   4529a:	6010      	str	r0, [r2, #0]
   4529c:	4608      	mov	r0, r1
   4529e:	7019      	strb	r1, [r3, #0]
   452a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   452a4:	4770      	bx	lr

000452a6 <__sfputs_r>:
   452a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   452a8:	4606      	mov	r6, r0
   452aa:	460f      	mov	r7, r1
   452ac:	4614      	mov	r4, r2
   452ae:	18d5      	adds	r5, r2, r3
   452b0:	42ac      	cmp	r4, r5
   452b2:	d101      	bne.n	452b8 <__sfputs_r+0x12>
   452b4:	2000      	movs	r0, #0
   452b6:	e007      	b.n	452c8 <__sfputs_r+0x22>
   452b8:	463a      	mov	r2, r7
   452ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   452be:	4630      	mov	r0, r6
   452c0:	f7ff ffda 	bl	45278 <__sfputc_r>
   452c4:	1c43      	adds	r3, r0, #1
   452c6:	d1f3      	bne.n	452b0 <__sfputs_r+0xa>
   452c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000452ca <__cvt>:
   452ca:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   452ce:	ec55 4b10 	vmov	r4, r5, d0
   452d2:	2d00      	cmp	r5, #0
   452d4:	460e      	mov	r6, r1
   452d6:	4691      	mov	r9, r2
   452d8:	4619      	mov	r1, r3
   452da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   452de:	f04f 0200 	mov.w	r2, #0
   452e2:	da03      	bge.n	452ec <__cvt+0x22>
   452e4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   452e8:	222d      	movs	r2, #45	; 0x2d
   452ea:	461d      	mov	r5, r3
   452ec:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   452ee:	700a      	strb	r2, [r1, #0]
   452f0:	f027 0720 	bic.w	r7, r7, #32
   452f4:	2f46      	cmp	r7, #70	; 0x46
   452f6:	d004      	beq.n	45302 <__cvt+0x38>
   452f8:	2f45      	cmp	r7, #69	; 0x45
   452fa:	d100      	bne.n	452fe <__cvt+0x34>
   452fc:	3601      	adds	r6, #1
   452fe:	2102      	movs	r1, #2
   45300:	e000      	b.n	45304 <__cvt+0x3a>
   45302:	2103      	movs	r1, #3
   45304:	ab03      	add	r3, sp, #12
   45306:	4632      	mov	r2, r6
   45308:	9301      	str	r3, [sp, #4]
   4530a:	ab02      	add	r3, sp, #8
   4530c:	ec45 4b10 	vmov	d0, r4, r5
   45310:	9300      	str	r3, [sp, #0]
   45312:	4653      	mov	r3, sl
   45314:	f7da ff9c 	bl	20250 <_dtoa_r>
   45318:	2f47      	cmp	r7, #71	; 0x47
   4531a:	4680      	mov	r8, r0
   4531c:	d102      	bne.n	45324 <__cvt+0x5a>
   4531e:	f019 0f01 	tst.w	r9, #1
   45322:	d022      	beq.n	4536a <__cvt+0xa0>
   45324:	2f46      	cmp	r7, #70	; 0x46
   45326:	eb08 0906 	add.w	r9, r8, r6
   4532a:	d111      	bne.n	45350 <__cvt+0x86>
   4532c:	f898 3000 	ldrb.w	r3, [r8]
   45330:	2b30      	cmp	r3, #48	; 0x30
   45332:	d10a      	bne.n	4534a <__cvt+0x80>
   45334:	2200      	movs	r2, #0
   45336:	2300      	movs	r3, #0
   45338:	4620      	mov	r0, r4
   4533a:	4629      	mov	r1, r5
   4533c:	f7d7 fca4 	bl	1cc88 <__aeabi_dcmpeq>
   45340:	b918      	cbnz	r0, 4534a <__cvt+0x80>
   45342:	f1c6 0601 	rsb	r6, r6, #1
   45346:	f8ca 6000 	str.w	r6, [sl]
   4534a:	f8da 3000 	ldr.w	r3, [sl]
   4534e:	4499      	add	r9, r3
   45350:	2200      	movs	r2, #0
   45352:	2300      	movs	r3, #0
   45354:	4620      	mov	r0, r4
   45356:	4629      	mov	r1, r5
   45358:	f7d7 fc96 	bl	1cc88 <__aeabi_dcmpeq>
   4535c:	b108      	cbz	r0, 45362 <__cvt+0x98>
   4535e:	f8cd 900c 	str.w	r9, [sp, #12]
   45362:	2230      	movs	r2, #48	; 0x30
   45364:	9b03      	ldr	r3, [sp, #12]
   45366:	454b      	cmp	r3, r9
   45368:	d308      	bcc.n	4537c <__cvt+0xb2>
   4536a:	9b03      	ldr	r3, [sp, #12]
   4536c:	4640      	mov	r0, r8
   4536e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   45370:	eba3 0308 	sub.w	r3, r3, r8
   45374:	6013      	str	r3, [r2, #0]
   45376:	b004      	add	sp, #16
   45378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4537c:	1c59      	adds	r1, r3, #1
   4537e:	9103      	str	r1, [sp, #12]
   45380:	701a      	strb	r2, [r3, #0]
   45382:	e7ef      	b.n	45364 <__cvt+0x9a>

00045384 <__exponent>:
   45384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   45386:	2900      	cmp	r1, #0
   45388:	7002      	strb	r2, [r0, #0]
   4538a:	bfba      	itte	lt
   4538c:	4249      	neglt	r1, r1
   4538e:	232d      	movlt	r3, #45	; 0x2d
   45390:	232b      	movge	r3, #43	; 0x2b
   45392:	2909      	cmp	r1, #9
   45394:	7043      	strb	r3, [r0, #1]
   45396:	dd22      	ble.n	453de <__exponent+0x5a>
   45398:	f10d 0307 	add.w	r3, sp, #7
   4539c:	260a      	movs	r6, #10
   4539e:	461f      	mov	r7, r3
   453a0:	2963      	cmp	r1, #99	; 0x63
   453a2:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   453a6:	fb91 f2f6 	sdiv	r2, r1, r6
   453aa:	fb06 1412 	mls	r4, r6, r2, r1
   453ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   453b2:	f803 4c01 	strb.w	r4, [r3, #-1]
   453b6:	dc0a      	bgt.n	453ce <__exponent+0x4a>
   453b8:	3230      	adds	r2, #48	; 0x30
   453ba:	3b02      	subs	r3, #2
   453bc:	f805 2c01 	strb.w	r2, [r5, #-1]
   453c0:	1c82      	adds	r2, r0, #2
   453c2:	42bb      	cmp	r3, r7
   453c4:	4614      	mov	r4, r2
   453c6:	d305      	bcc.n	453d4 <__exponent+0x50>
   453c8:	1a20      	subs	r0, r4, r0
   453ca:	b003      	add	sp, #12
   453cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   453ce:	462b      	mov	r3, r5
   453d0:	4611      	mov	r1, r2
   453d2:	e7e5      	b.n	453a0 <__exponent+0x1c>
   453d4:	f813 1b01 	ldrb.w	r1, [r3], #1
   453d8:	f802 1b01 	strb.w	r1, [r2], #1
   453dc:	e7f1      	b.n	453c2 <__exponent+0x3e>
   453de:	2330      	movs	r3, #48	; 0x30
   453e0:	1d04      	adds	r4, r0, #4
   453e2:	4419      	add	r1, r3
   453e4:	7083      	strb	r3, [r0, #2]
   453e6:	70c1      	strb	r1, [r0, #3]
   453e8:	e7ee      	b.n	453c8 <__exponent+0x44>

000453ea <_printf_common>:
   453ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   453ee:	4691      	mov	r9, r2
   453f0:	461f      	mov	r7, r3
   453f2:	688a      	ldr	r2, [r1, #8]
   453f4:	4606      	mov	r6, r0
   453f6:	690b      	ldr	r3, [r1, #16]
   453f8:	460c      	mov	r4, r1
   453fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
   453fe:	4293      	cmp	r3, r2
   45400:	bfb8      	it	lt
   45402:	4613      	movlt	r3, r2
   45404:	f8c9 3000 	str.w	r3, [r9]
   45408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   4540c:	b112      	cbz	r2, 45414 <_printf_common+0x2a>
   4540e:	3301      	adds	r3, #1
   45410:	f8c9 3000 	str.w	r3, [r9]
   45414:	6823      	ldr	r3, [r4, #0]
   45416:	0699      	lsls	r1, r3, #26
   45418:	bf42      	ittt	mi
   4541a:	f8d9 3000 	ldrmi.w	r3, [r9]
   4541e:	3302      	addmi	r3, #2
   45420:	f8c9 3000 	strmi.w	r3, [r9]
   45424:	6825      	ldr	r5, [r4, #0]
   45426:	f015 0506 	ands.w	r5, r5, #6
   4542a:	d107      	bne.n	4543c <_printf_common+0x52>
   4542c:	f104 0a19 	add.w	sl, r4, #25
   45430:	68e3      	ldr	r3, [r4, #12]
   45432:	f8d9 2000 	ldr.w	r2, [r9]
   45436:	1a9b      	subs	r3, r3, r2
   45438:	42ab      	cmp	r3, r5
   4543a:	dc2b      	bgt.n	45494 <_printf_common+0xaa>
   4543c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   45440:	6822      	ldr	r2, [r4, #0]
   45442:	3300      	adds	r3, #0
   45444:	bf18      	it	ne
   45446:	2301      	movne	r3, #1
   45448:	0692      	lsls	r2, r2, #26
   4544a:	d430      	bmi.n	454ae <_printf_common+0xc4>
   4544c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   45450:	4639      	mov	r1, r7
   45452:	4630      	mov	r0, r6
   45454:	47c0      	blx	r8
   45456:	3001      	adds	r0, #1
   45458:	d023      	beq.n	454a2 <_printf_common+0xb8>
   4545a:	6823      	ldr	r3, [r4, #0]
   4545c:	341a      	adds	r4, #26
   4545e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   45462:	f003 0306 	and.w	r3, r3, #6
   45466:	f8d9 2000 	ldr.w	r2, [r9]
   4546a:	f04f 0900 	mov.w	r9, #0
   4546e:	2b04      	cmp	r3, #4
   45470:	f854 3c12 	ldr.w	r3, [r4, #-18]
   45474:	bf08      	it	eq
   45476:	1aad      	subeq	r5, r5, r2
   45478:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   4547c:	bf14      	ite	ne
   4547e:	2500      	movne	r5, #0
   45480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   45484:	4293      	cmp	r3, r2
   45486:	bfc4      	itt	gt
   45488:	1a9b      	subgt	r3, r3, r2
   4548a:	18ed      	addgt	r5, r5, r3
   4548c:	454d      	cmp	r5, r9
   4548e:	d11a      	bne.n	454c6 <_printf_common+0xdc>
   45490:	2000      	movs	r0, #0
   45492:	e008      	b.n	454a6 <_printf_common+0xbc>
   45494:	2301      	movs	r3, #1
   45496:	4652      	mov	r2, sl
   45498:	4639      	mov	r1, r7
   4549a:	4630      	mov	r0, r6
   4549c:	47c0      	blx	r8
   4549e:	3001      	adds	r0, #1
   454a0:	d103      	bne.n	454aa <_printf_common+0xc0>
   454a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   454a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   454aa:	3501      	adds	r5, #1
   454ac:	e7c0      	b.n	45430 <_printf_common+0x46>
   454ae:	18e1      	adds	r1, r4, r3
   454b0:	1c5a      	adds	r2, r3, #1
   454b2:	2030      	movs	r0, #48	; 0x30
   454b4:	3302      	adds	r3, #2
   454b6:	4422      	add	r2, r4
   454b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   454bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   454c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   454c4:	e7c2      	b.n	4544c <_printf_common+0x62>
   454c6:	2301      	movs	r3, #1
   454c8:	4622      	mov	r2, r4
   454ca:	4639      	mov	r1, r7
   454cc:	4630      	mov	r0, r6
   454ce:	47c0      	blx	r8
   454d0:	3001      	adds	r0, #1
   454d2:	d0e6      	beq.n	454a2 <_printf_common+0xb8>
   454d4:	f109 0901 	add.w	r9, r9, #1
   454d8:	e7d8      	b.n	4548c <_printf_common+0xa2>

000454da <__sprintf_chk>:
   454da:	b408      	push	{r3}
   454dc:	b517      	push	{r0, r1, r2, r4, lr}
   454de:	ab05      	add	r3, sp, #20
   454e0:	1e14      	subs	r4, r2, #0
   454e2:	f853 1b04 	ldr.w	r1, [r3], #4
   454e6:	9301      	str	r3, [sp, #4]
   454e8:	da07      	bge.n	454fa <__sprintf_chk+0x20>
   454ea:	461a      	mov	r2, r3
   454ec:	f7fb f834 	bl	40558 <vsiprintf>
   454f0:	b003      	add	sp, #12
   454f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   454f6:	b001      	add	sp, #4
   454f8:	4770      	bx	lr
   454fa:	460a      	mov	r2, r1
   454fc:	4621      	mov	r1, r4
   454fe:	f7fb f807 	bl	40510 <vsniprintf>
   45502:	2800      	cmp	r0, #0
   45504:	dbf4      	blt.n	454f0 <__sprintf_chk+0x16>
   45506:	42a0      	cmp	r0, r4
   45508:	d3f2      	bcc.n	454f0 <__sprintf_chk+0x16>
   4550a:	f7e2 fae9 	bl	27ae0 <__chk_fail>

0004550e <__sread>:
   4550e:	b510      	push	{r4, lr}
   45510:	460c      	mov	r4, r1
   45512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45516:	f7fc f95d 	bl	417d4 <_read_r>
   4551a:	2800      	cmp	r0, #0
   4551c:	bfab      	itete	ge
   4551e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   45520:	89a3      	ldrhlt	r3, [r4, #12]
   45522:	181b      	addge	r3, r3, r0
   45524:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   45528:	bfac      	ite	ge
   4552a:	6563      	strge	r3, [r4, #84]	; 0x54
   4552c:	81a3      	strhlt	r3, [r4, #12]
   4552e:	bd10      	pop	{r4, pc}

00045530 <__seofread>:
   45530:	2000      	movs	r0, #0
   45532:	4770      	bx	lr

00045534 <__swrite>:
   45534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45538:	461f      	mov	r7, r3
   4553a:	898b      	ldrh	r3, [r1, #12]
   4553c:	4605      	mov	r5, r0
   4553e:	460c      	mov	r4, r1
   45540:	05db      	lsls	r3, r3, #23
   45542:	4616      	mov	r6, r2
   45544:	d505      	bpl.n	45552 <__swrite+0x1e>
   45546:	2302      	movs	r3, #2
   45548:	2200      	movs	r2, #0
   4554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4554e:	f7fb fc95 	bl	40e7c <_lseek_r>
   45552:	89a3      	ldrh	r3, [r4, #12]
   45554:	4632      	mov	r2, r6
   45556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   4555a:	4628      	mov	r0, r5
   4555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   45560:	81a3      	strh	r3, [r4, #12]
   45562:	463b      	mov	r3, r7
   45564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   45568:	f7fb b852 	b.w	40610 <_write_r>

0004556c <__sseek>:
   4556c:	b510      	push	{r4, lr}
   4556e:	460c      	mov	r4, r1
   45570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45574:	f7fb fc82 	bl	40e7c <_lseek_r>
   45578:	1c43      	adds	r3, r0, #1
   4557a:	89a3      	ldrh	r3, [r4, #12]
   4557c:	bf15      	itete	ne
   4557e:	6560      	strne	r0, [r4, #84]	; 0x54
   45580:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   45584:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   45588:	81a3      	strheq	r3, [r4, #12]
   4558a:	bf18      	it	ne
   4558c:	81a3      	strhne	r3, [r4, #12]
   4558e:	bd10      	pop	{r4, pc}

00045590 <__sclose>:
   45590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45594:	f7fb b8bc 	b.w	40710 <_close_r>

00045598 <strcat>:
   45598:	4603      	mov	r3, r0
   4559a:	b510      	push	{r4, lr}
   4559c:	461a      	mov	r2, r3
   4559e:	f812 4b01 	ldrb.w	r4, [r2], #1
   455a2:	b93c      	cbnz	r4, 455b4 <strcat+0x1c>
   455a4:	3b01      	subs	r3, #1
   455a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   455aa:	f803 2f01 	strb.w	r2, [r3, #1]!
   455ae:	2a00      	cmp	r2, #0
   455b0:	d1f9      	bne.n	455a6 <strcat+0xe>
   455b2:	bd10      	pop	{r4, pc}
   455b4:	4613      	mov	r3, r2
   455b6:	e7f1      	b.n	4559c <strcat+0x4>

000455b8 <strchr>:
   455b8:	b2c9      	uxtb	r1, r1
   455ba:	4603      	mov	r3, r0
   455bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   455c0:	b11a      	cbz	r2, 455ca <strchr+0x12>
   455c2:	428a      	cmp	r2, r1
   455c4:	d1f9      	bne.n	455ba <strchr+0x2>
   455c6:	4618      	mov	r0, r3
   455c8:	4770      	bx	lr
   455ca:	2900      	cmp	r1, #0
   455cc:	bf18      	it	ne
   455ce:	2300      	movne	r3, #0
   455d0:	e7f9      	b.n	455c6 <strchr+0xe>

000455d2 <strcpy>:
   455d2:	4603      	mov	r3, r0
   455d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   455d8:	f803 2b01 	strb.w	r2, [r3], #1
   455dc:	2a00      	cmp	r2, #0
   455de:	d1f9      	bne.n	455d4 <strcpy+0x2>
   455e0:	4770      	bx	lr

000455e2 <__strcpy_chk>:
   455e2:	b570      	push	{r4, r5, r6, lr}
   455e4:	4605      	mov	r5, r0
   455e6:	4608      	mov	r0, r1
   455e8:	4616      	mov	r6, r2
   455ea:	460c      	mov	r4, r1
   455ec:	f7d7 fe3a 	bl	1d264 <strlen>
   455f0:	1c42      	adds	r2, r0, #1
   455f2:	42b2      	cmp	r2, r6
   455f4:	d901      	bls.n	455fa <__strcpy_chk+0x18>
   455f6:	f7e2 fa73 	bl	27ae0 <__chk_fail>
   455fa:	42ac      	cmp	r4, r5
   455fc:	d804      	bhi.n	45608 <__strcpy_chk+0x26>
   455fe:	18a3      	adds	r3, r4, r2
   45600:	429d      	cmp	r5, r3
   45602:	d3f8      	bcc.n	455f6 <__strcpy_chk+0x14>
   45604:	42ac      	cmp	r4, r5
   45606:	d102      	bne.n	4560e <__strcpy_chk+0x2c>
   45608:	18ab      	adds	r3, r5, r2
   4560a:	429c      	cmp	r4, r3
   4560c:	d3f3      	bcc.n	455f6 <__strcpy_chk+0x14>
   4560e:	4621      	mov	r1, r4
   45610:	4628      	mov	r0, r5
   45612:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   45616:	f7ff be07 	b.w	45228 <memcpy>

0004561a <strncmp>:
   4561a:	b510      	push	{r4, lr}
   4561c:	b16a      	cbz	r2, 4563a <strncmp+0x20>
   4561e:	3901      	subs	r1, #1
   45620:	1884      	adds	r4, r0, r2
   45622:	f810 3b01 	ldrb.w	r3, [r0], #1
   45626:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4562a:	4293      	cmp	r3, r2
   4562c:	d103      	bne.n	45636 <strncmp+0x1c>
   4562e:	42a0      	cmp	r0, r4
   45630:	d001      	beq.n	45636 <strncmp+0x1c>
   45632:	2b00      	cmp	r3, #0
   45634:	d1f5      	bne.n	45622 <strncmp+0x8>
   45636:	1a98      	subs	r0, r3, r2
   45638:	bd10      	pop	{r4, pc}
   4563a:	4610      	mov	r0, r2
   4563c:	e7fc      	b.n	45638 <strncmp+0x1e>

0004563e <strncpy>:
   4563e:	3901      	subs	r1, #1
   45640:	4603      	mov	r3, r0
   45642:	b510      	push	{r4, lr}
   45644:	b132      	cbz	r2, 45654 <strncpy+0x16>
   45646:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   4564a:	3a01      	subs	r2, #1
   4564c:	f803 4b01 	strb.w	r4, [r3], #1
   45650:	2c00      	cmp	r4, #0
   45652:	d1f7      	bne.n	45644 <strncpy+0x6>
   45654:	441a      	add	r2, r3
   45656:	2100      	movs	r1, #0
   45658:	4293      	cmp	r3, r2
   4565a:	d100      	bne.n	4565e <strncpy+0x20>
   4565c:	bd10      	pop	{r4, pc}
   4565e:	f803 1b01 	strb.w	r1, [r3], #1
   45662:	e7f9      	b.n	45658 <strncpy+0x1a>

00045664 <strnlen>:
   45664:	4602      	mov	r2, r0
   45666:	4401      	add	r1, r0
   45668:	b510      	push	{r4, lr}
   4566a:	428a      	cmp	r2, r1
   4566c:	4613      	mov	r3, r2
   4566e:	d003      	beq.n	45678 <strnlen+0x14>
   45670:	781c      	ldrb	r4, [r3, #0]
   45672:	3201      	adds	r2, #1
   45674:	2c00      	cmp	r4, #0
   45676:	d1f8      	bne.n	4566a <strnlen+0x6>
   45678:	1a18      	subs	r0, r3, r0
   4567a:	bd10      	pop	{r4, pc}

0004567c <strstr>:
   4567c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4567e:	780c      	ldrb	r4, [r1, #0]
   45680:	b164      	cbz	r4, 4569c <strstr+0x20>
   45682:	4603      	mov	r3, r0
   45684:	781a      	ldrb	r2, [r3, #0]
   45686:	4618      	mov	r0, r3
   45688:	1c5e      	adds	r6, r3, #1
   4568a:	b90a      	cbnz	r2, 45690 <strstr+0x14>
   4568c:	4610      	mov	r0, r2
   4568e:	e005      	b.n	4569c <strstr+0x20>
   45690:	4294      	cmp	r4, r2
   45692:	d108      	bne.n	456a6 <strstr+0x2a>
   45694:	460d      	mov	r5, r1
   45696:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   4569a:	b902      	cbnz	r2, 4569e <strstr+0x22>
   4569c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4569e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   456a2:	4297      	cmp	r7, r2
   456a4:	d0f7      	beq.n	45696 <strstr+0x1a>
   456a6:	4633      	mov	r3, r6
   456a8:	e7ec      	b.n	45684 <strstr+0x8>

000456aa <sulp>:
   456aa:	b570      	push	{r4, r5, r6, lr}
   456ac:	4604      	mov	r4, r0
   456ae:	460d      	mov	r5, r1
   456b0:	4616      	mov	r6, r2
   456b2:	ec45 4b10 	vmov	d0, r4, r5
   456b6:	f7fb fc8d 	bl	40fd4 <__ulp>
   456ba:	ec51 0b10 	vmov	r0, r1, d0
   456be:	b17e      	cbz	r6, 456e0 <sulp+0x36>
   456c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
   456c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   456c8:	2b00      	cmp	r3, #0
   456ca:	dd09      	ble.n	456e0 <sulp+0x36>
   456cc:	051b      	lsls	r3, r3, #20
   456ce:	2400      	movs	r4, #0
   456d0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   456d4:	4622      	mov	r2, r4
   456d6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   456da:	462b      	mov	r3, r5
   456dc:	f7d7 f86c 	bl	1c7b8 <__aeabi_dmul>
   456e0:	bd70      	pop	{r4, r5, r6, pc}

000456e2 <__strtok_r>:
   456e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   456e4:	b918      	cbnz	r0, 456ee <__strtok_r+0xc>
   456e6:	6810      	ldr	r0, [r2, #0]
   456e8:	b908      	cbnz	r0, 456ee <__strtok_r+0xc>
   456ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   456ec:	4620      	mov	r0, r4
   456ee:	4604      	mov	r4, r0
   456f0:	460f      	mov	r7, r1
   456f2:	f814 5b01 	ldrb.w	r5, [r4], #1
   456f6:	f817 6b01 	ldrb.w	r6, [r7], #1
   456fa:	b91e      	cbnz	r6, 45704 <__strtok_r+0x22>
   456fc:	b965      	cbnz	r5, 45718 <__strtok_r+0x36>
   456fe:	6015      	str	r5, [r2, #0]
   45700:	4628      	mov	r0, r5
   45702:	e7f2      	b.n	456ea <__strtok_r+0x8>
   45704:	42b5      	cmp	r5, r6
   45706:	d1f6      	bne.n	456f6 <__strtok_r+0x14>
   45708:	2b00      	cmp	r3, #0
   4570a:	d1ef      	bne.n	456ec <__strtok_r+0xa>
   4570c:	6014      	str	r4, [r2, #0]
   4570e:	7003      	strb	r3, [r0, #0]
   45710:	e7eb      	b.n	456ea <__strtok_r+0x8>
   45712:	461c      	mov	r4, r3
   45714:	e00c      	b.n	45730 <__strtok_r+0x4e>
   45716:	b915      	cbnz	r5, 4571e <__strtok_r+0x3c>
   45718:	f814 3b01 	ldrb.w	r3, [r4], #1
   4571c:	460e      	mov	r6, r1
   4571e:	f816 5b01 	ldrb.w	r5, [r6], #1
   45722:	42ab      	cmp	r3, r5
   45724:	d1f7      	bne.n	45716 <__strtok_r+0x34>
   45726:	2b00      	cmp	r3, #0
   45728:	d0f3      	beq.n	45712 <__strtok_r+0x30>
   4572a:	2300      	movs	r3, #0
   4572c:	f804 3c01 	strb.w	r3, [r4, #-1]
   45730:	6014      	str	r4, [r2, #0]
   45732:	e7da      	b.n	456ea <__strtok_r+0x8>

00045734 <strtok_r>:
   45734:	2301      	movs	r3, #1
   45736:	f7ff bfd4 	b.w	456e2 <__strtok_r>

0004573a <_strtol_r>:
   4573a:	f7fa bde9 	b.w	40310 <_strtol_l.isra.0>

0004573e <_strtoul_r>:
   4573e:	f7fa be69 	b.w	40414 <_strtoul_l.isra.0>

00045742 <_vsniprintf_r>:
   45742:	b530      	push	{r4, r5, lr}
   45744:	1e14      	subs	r4, r2, #0
   45746:	4605      	mov	r5, r0
   45748:	b09b      	sub	sp, #108	; 0x6c
   4574a:	4618      	mov	r0, r3
   4574c:	da05      	bge.n	4575a <_vsniprintf_r+0x18>
   4574e:	238b      	movs	r3, #139	; 0x8b
   45750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45754:	602b      	str	r3, [r5, #0]
   45756:	b01b      	add	sp, #108	; 0x6c
   45758:	bd30      	pop	{r4, r5, pc}
   4575a:	f44f 7302 	mov.w	r3, #520	; 0x208
   4575e:	9100      	str	r1, [sp, #0]
   45760:	9104      	str	r1, [sp, #16]
   45762:	4602      	mov	r2, r0
   45764:	f8ad 300c 	strh.w	r3, [sp, #12]
   45768:	bf14      	ite	ne
   4576a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   4576e:	4623      	moveq	r3, r4
   45770:	4669      	mov	r1, sp
   45772:	4628      	mov	r0, r5
   45774:	9302      	str	r3, [sp, #8]
   45776:	9305      	str	r3, [sp, #20]
   45778:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4577c:	f8ad 300e 	strh.w	r3, [sp, #14]
   45780:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   45782:	f7fb fc9b 	bl	410bc <_svfiprintf_r>
   45786:	1c43      	adds	r3, r0, #1
   45788:	bfbc      	itt	lt
   4578a:	238b      	movlt	r3, #139	; 0x8b
   4578c:	602b      	strlt	r3, [r5, #0]
   4578e:	2c00      	cmp	r4, #0
   45790:	d0e1      	beq.n	45756 <_vsniprintf_r+0x14>
   45792:	9b00      	ldr	r3, [sp, #0]
   45794:	2200      	movs	r2, #0
   45796:	701a      	strb	r2, [r3, #0]
   45798:	e7dd      	b.n	45756 <_vsniprintf_r+0x14>

0004579a <abort>:
   4579a:	b508      	push	{r3, lr}
   4579c:	2006      	movs	r0, #6
   4579e:	f7fc f82b 	bl	417f8 <raise>
   457a2:	2001      	movs	r0, #1
   457a4:	f7e2 f970 	bl	27a88 <_exit>

000457a8 <quorem>:
   457a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   457ac:	6903      	ldr	r3, [r0, #16]
   457ae:	4680      	mov	r8, r0
   457b0:	690c      	ldr	r4, [r1, #16]
   457b2:	42a3      	cmp	r3, r4
   457b4:	f2c0 8084 	blt.w	458c0 <quorem+0x118>
   457b8:	3c01      	subs	r4, #1
   457ba:	f108 0514 	add.w	r5, r8, #20
   457be:	f101 0714 	add.w	r7, r1, #20
   457c2:	00a0      	lsls	r0, r4, #2
   457c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   457c8:	182b      	adds	r3, r5, r0
   457ca:	eb07 0900 	add.w	r9, r7, r0
   457ce:	9301      	str	r3, [sp, #4]
   457d0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   457d4:	3301      	adds	r3, #1
   457d6:	429a      	cmp	r2, r3
   457d8:	fbb2 f6f3 	udiv	r6, r2, r3
   457dc:	d333      	bcc.n	45846 <quorem+0x9e>
   457de:	f04f 0a00 	mov.w	sl, #0
   457e2:	46bc      	mov	ip, r7
   457e4:	46ae      	mov	lr, r5
   457e6:	46d3      	mov	fp, sl
   457e8:	f85c 2b04 	ldr.w	r2, [ip], #4
   457ec:	b293      	uxth	r3, r2
   457ee:	45e1      	cmp	r9, ip
   457f0:	ea4f 4212 	mov.w	r2, r2, lsr #16
   457f4:	fb06 a303 	mla	r3, r6, r3, sl
   457f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   457fc:	b29b      	uxth	r3, r3
   457fe:	fb06 a202 	mla	r2, r6, r2, sl
   45802:	ebab 0303 	sub.w	r3, fp, r3
   45806:	f8de b000 	ldr.w	fp, [lr]
   4580a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   4580e:	fa1f fb8b 	uxth.w	fp, fp
   45812:	445b      	add	r3, fp
   45814:	fa1f fb82 	uxth.w	fp, r2
   45818:	f8de 2000 	ldr.w	r2, [lr]
   4581c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   45820:	eb02 4223 	add.w	r2, r2, r3, asr #16
   45824:	b29b      	uxth	r3, r3
   45826:	ea4f 4b22 	mov.w	fp, r2, asr #16
   4582a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4582e:	f84e 3b04 	str.w	r3, [lr], #4
   45832:	d2d9      	bcs.n	457e8 <quorem+0x40>
   45834:	582b      	ldr	r3, [r5, r0]
   45836:	b933      	cbnz	r3, 45846 <quorem+0x9e>
   45838:	9b01      	ldr	r3, [sp, #4]
   4583a:	3b04      	subs	r3, #4
   4583c:	429d      	cmp	r5, r3
   4583e:	461a      	mov	r2, r3
   45840:	d332      	bcc.n	458a8 <quorem+0x100>
   45842:	f8c8 4010 	str.w	r4, [r8, #16]
   45846:	4640      	mov	r0, r8
   45848:	f000 fbc9 	bl	45fde <__mcmp>
   4584c:	2800      	cmp	r0, #0
   4584e:	db27      	blt.n	458a0 <quorem+0xf8>
   45850:	3601      	adds	r6, #1
   45852:	4628      	mov	r0, r5
   45854:	f04f 0c00 	mov.w	ip, #0
   45858:	f857 1b04 	ldr.w	r1, [r7], #4
   4585c:	f8d0 e000 	ldr.w	lr, [r0]
   45860:	b28b      	uxth	r3, r1
   45862:	45b9      	cmp	r9, r7
   45864:	fa1f f28e 	uxth.w	r2, lr
   45868:	ebac 0303 	sub.w	r3, ip, r3
   4586c:	4413      	add	r3, r2
   4586e:	ea4f 4211 	mov.w	r2, r1, lsr #16
   45872:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   45876:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4587a:	b29b      	uxth	r3, r3
   4587c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   45880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   45884:	f840 3b04 	str.w	r3, [r0], #4
   45888:	d2e6      	bcs.n	45858 <quorem+0xb0>
   4588a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   4588e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   45892:	b92a      	cbnz	r2, 458a0 <quorem+0xf8>
   45894:	3b04      	subs	r3, #4
   45896:	429d      	cmp	r5, r3
   45898:	461a      	mov	r2, r3
   4589a:	d30b      	bcc.n	458b4 <quorem+0x10c>
   4589c:	f8c8 4010 	str.w	r4, [r8, #16]
   458a0:	4630      	mov	r0, r6
   458a2:	b003      	add	sp, #12
   458a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   458a8:	6812      	ldr	r2, [r2, #0]
   458aa:	3b04      	subs	r3, #4
   458ac:	2a00      	cmp	r2, #0
   458ae:	d1c8      	bne.n	45842 <quorem+0x9a>
   458b0:	3c01      	subs	r4, #1
   458b2:	e7c3      	b.n	4583c <quorem+0x94>
   458b4:	6812      	ldr	r2, [r2, #0]
   458b6:	3b04      	subs	r3, #4
   458b8:	2a00      	cmp	r2, #0
   458ba:	d1ef      	bne.n	4589c <quorem+0xf4>
   458bc:	3c01      	subs	r4, #1
   458be:	e7ea      	b.n	45896 <quorem+0xee>
   458c0:	2000      	movs	r0, #0
   458c2:	e7ee      	b.n	458a2 <quorem+0xfa>

000458c4 <__sfmoreglue>:
   458c4:	b570      	push	{r4, r5, r6, lr}
   458c6:	1e4a      	subs	r2, r1, #1
   458c8:	2568      	movs	r5, #104	; 0x68
   458ca:	460e      	mov	r6, r1
   458cc:	4355      	muls	r5, r2
   458ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
   458d2:	f7f9 ff83 	bl	3f7dc <_malloc_r>
   458d6:	4604      	mov	r4, r0
   458d8:	b140      	cbz	r0, 458ec <__sfmoreglue+0x28>
   458da:	2100      	movs	r1, #0
   458dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
   458e0:	e9c0 1600 	strd	r1, r6, [r0]
   458e4:	300c      	adds	r0, #12
   458e6:	60a0      	str	r0, [r4, #8]
   458e8:	f7ff fcbe 	bl	45268 <memset>
   458ec:	4620      	mov	r0, r4
   458ee:	bd70      	pop	{r4, r5, r6, pc}

000458f0 <_fwalk_reent>:
   458f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   458f4:	4680      	mov	r8, r0
   458f6:	4689      	mov	r9, r1
   458f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
   458fc:	2600      	movs	r6, #0
   458fe:	b914      	cbnz	r4, 45906 <_fwalk_reent+0x16>
   45900:	4630      	mov	r0, r6
   45902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   45906:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   4590a:	3f01      	subs	r7, #1
   4590c:	d501      	bpl.n	45912 <_fwalk_reent+0x22>
   4590e:	6824      	ldr	r4, [r4, #0]
   45910:	e7f5      	b.n	458fe <_fwalk_reent+0xe>
   45912:	89ab      	ldrh	r3, [r5, #12]
   45914:	2b01      	cmp	r3, #1
   45916:	d907      	bls.n	45928 <_fwalk_reent+0x38>
   45918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   4591c:	3301      	adds	r3, #1
   4591e:	d003      	beq.n	45928 <_fwalk_reent+0x38>
   45920:	4629      	mov	r1, r5
   45922:	4640      	mov	r0, r8
   45924:	47c8      	blx	r9
   45926:	4306      	orrs	r6, r0
   45928:	3568      	adds	r5, #104	; 0x68
   4592a:	e7ee      	b.n	4590a <_fwalk_reent+0x1a>

0004592c <rshift>:
   4592c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4592e:	114b      	asrs	r3, r1, #5
   45930:	6906      	ldr	r6, [r0, #16]
   45932:	f100 0414 	add.w	r4, r0, #20
   45936:	429e      	cmp	r6, r3
   45938:	dd30      	ble.n	4599c <rshift+0x70>
   4593a:	f011 011f 	ands.w	r1, r1, #31
   4593e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   45942:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   45946:	d108      	bne.n	4595a <rshift+0x2e>
   45948:	4621      	mov	r1, r4
   4594a:	42b2      	cmp	r2, r6
   4594c:	460b      	mov	r3, r1
   4594e:	d211      	bcs.n	45974 <rshift+0x48>
   45950:	f852 3b04 	ldr.w	r3, [r2], #4
   45954:	f841 3b04 	str.w	r3, [r1], #4
   45958:	e7f7      	b.n	4594a <rshift+0x1e>
   4595a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   4595e:	f1c1 0c20 	rsb	ip, r1, #32
   45962:	3204      	adds	r2, #4
   45964:	4623      	mov	r3, r4
   45966:	40cd      	lsrs	r5, r1
   45968:	4296      	cmp	r6, r2
   4596a:	4617      	mov	r7, r2
   4596c:	d80c      	bhi.n	45988 <rshift+0x5c>
   4596e:	601d      	str	r5, [r3, #0]
   45970:	b105      	cbz	r5, 45974 <rshift+0x48>
   45972:	3304      	adds	r3, #4
   45974:	1b1a      	subs	r2, r3, r4
   45976:	42a3      	cmp	r3, r4
   45978:	ea4f 02a2 	mov.w	r2, r2, asr #2
   4597c:	bf08      	it	eq
   4597e:	2300      	moveq	r3, #0
   45980:	6102      	str	r2, [r0, #16]
   45982:	bf08      	it	eq
   45984:	6143      	streq	r3, [r0, #20]
   45986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   45988:	683f      	ldr	r7, [r7, #0]
   4598a:	fa07 f70c 	lsl.w	r7, r7, ip
   4598e:	433d      	orrs	r5, r7
   45990:	f843 5b04 	str.w	r5, [r3], #4
   45994:	f852 5b04 	ldr.w	r5, [r2], #4
   45998:	40cd      	lsrs	r5, r1
   4599a:	e7e5      	b.n	45968 <rshift+0x3c>
   4599c:	4623      	mov	r3, r4
   4599e:	e7e9      	b.n	45974 <rshift+0x48>

000459a0 <__hexdig_fun>:
   459a0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   459a4:	2b09      	cmp	r3, #9
   459a6:	d802      	bhi.n	459ae <__hexdig_fun+0xe>
   459a8:	3820      	subs	r0, #32
   459aa:	b2c0      	uxtb	r0, r0
   459ac:	4770      	bx	lr
   459ae:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   459b2:	2b05      	cmp	r3, #5
   459b4:	d801      	bhi.n	459ba <__hexdig_fun+0x1a>
   459b6:	3847      	subs	r0, #71	; 0x47
   459b8:	e7f7      	b.n	459aa <__hexdig_fun+0xa>
   459ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   459be:	2b05      	cmp	r3, #5
   459c0:	d801      	bhi.n	459c6 <__hexdig_fun+0x26>
   459c2:	3827      	subs	r0, #39	; 0x27
   459c4:	e7f1      	b.n	459aa <__hexdig_fun+0xa>
   459c6:	2000      	movs	r0, #0
   459c8:	4770      	bx	lr

000459ca <L_shift>:
   459ca:	f1c2 0208 	rsb	r2, r2, #8
   459ce:	0092      	lsls	r2, r2, #2
   459d0:	b570      	push	{r4, r5, r6, lr}
   459d2:	f1c2 0620 	rsb	r6, r2, #32
   459d6:	6843      	ldr	r3, [r0, #4]
   459d8:	6804      	ldr	r4, [r0, #0]
   459da:	fa03 f506 	lsl.w	r5, r3, r6
   459de:	40d3      	lsrs	r3, r2
   459e0:	432c      	orrs	r4, r5
   459e2:	6004      	str	r4, [r0, #0]
   459e4:	f840 3f04 	str.w	r3, [r0, #4]!
   459e8:	4288      	cmp	r0, r1
   459ea:	d3f4      	bcc.n	459d6 <L_shift+0xc>
   459ec:	bd70      	pop	{r4, r5, r6, pc}

000459ee <__match>:
   459ee:	6803      	ldr	r3, [r0, #0]
   459f0:	3301      	adds	r3, #1
   459f2:	b530      	push	{r4, r5, lr}
   459f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   459f8:	b914      	cbnz	r4, 45a00 <__match+0x12>
   459fa:	6003      	str	r3, [r0, #0]
   459fc:	2001      	movs	r0, #1
   459fe:	bd30      	pop	{r4, r5, pc}
   45a00:	f813 2b01 	ldrb.w	r2, [r3], #1
   45a04:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   45a08:	2d19      	cmp	r5, #25
   45a0a:	bf98      	it	ls
   45a0c:	3220      	addls	r2, #32
   45a0e:	42a2      	cmp	r2, r4
   45a10:	d0f0      	beq.n	459f4 <__match+0x6>
   45a12:	2000      	movs	r0, #0
   45a14:	e7f3      	b.n	459fe <__match+0x10>

00045a16 <__hexnan>:
   45a16:	680b      	ldr	r3, [r1, #0]
   45a18:	6801      	ldr	r1, [r0, #0]
   45a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45a1e:	115f      	asrs	r7, r3, #5
   45a20:	f013 031f 	ands.w	r3, r3, #31
   45a24:	f04f 0500 	mov.w	r5, #0
   45a28:	b087      	sub	sp, #28
   45a2a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   45a2e:	4682      	mov	sl, r0
   45a30:	4690      	mov	r8, r2
   45a32:	46ab      	mov	fp, r5
   45a34:	bf18      	it	ne
   45a36:	3704      	addne	r7, #4
   45a38:	9301      	str	r3, [sp, #4]
   45a3a:	9502      	str	r5, [sp, #8]
   45a3c:	1f3e      	subs	r6, r7, #4
   45a3e:	f847 5c04 	str.w	r5, [r7, #-4]
   45a42:	46b1      	mov	r9, r6
   45a44:	4634      	mov	r4, r6
   45a46:	1c4b      	adds	r3, r1, #1
   45a48:	784a      	ldrb	r2, [r1, #1]
   45a4a:	9303      	str	r3, [sp, #12]
   45a4c:	b342      	cbz	r2, 45aa0 <__hexnan+0x8a>
   45a4e:	4610      	mov	r0, r2
   45a50:	9105      	str	r1, [sp, #20]
   45a52:	9204      	str	r2, [sp, #16]
   45a54:	f7ff ffa4 	bl	459a0 <__hexdig_fun>
   45a58:	2800      	cmp	r0, #0
   45a5a:	d143      	bne.n	45ae4 <__hexnan+0xce>
   45a5c:	9a04      	ldr	r2, [sp, #16]
   45a5e:	9905      	ldr	r1, [sp, #20]
   45a60:	2a20      	cmp	r2, #32
   45a62:	d818      	bhi.n	45a96 <__hexnan+0x80>
   45a64:	9b02      	ldr	r3, [sp, #8]
   45a66:	459b      	cmp	fp, r3
   45a68:	dd13      	ble.n	45a92 <__hexnan+0x7c>
   45a6a:	454c      	cmp	r4, r9
   45a6c:	d206      	bcs.n	45a7c <__hexnan+0x66>
   45a6e:	2d07      	cmp	r5, #7
   45a70:	dc04      	bgt.n	45a7c <__hexnan+0x66>
   45a72:	462a      	mov	r2, r5
   45a74:	4649      	mov	r1, r9
   45a76:	4620      	mov	r0, r4
   45a78:	f7ff ffa7 	bl	459ca <L_shift>
   45a7c:	4544      	cmp	r4, r8
   45a7e:	d943      	bls.n	45b08 <__hexnan+0xf2>
   45a80:	2300      	movs	r3, #0
   45a82:	f1a4 0904 	sub.w	r9, r4, #4
   45a86:	f8cd b008 	str.w	fp, [sp, #8]
   45a8a:	f844 3c04 	str.w	r3, [r4, #-4]
   45a8e:	461d      	mov	r5, r3
   45a90:	464c      	mov	r4, r9
   45a92:	9903      	ldr	r1, [sp, #12]
   45a94:	e7d7      	b.n	45a46 <__hexnan+0x30>
   45a96:	2a29      	cmp	r2, #41	; 0x29
   45a98:	d149      	bne.n	45b2e <__hexnan+0x118>
   45a9a:	3102      	adds	r1, #2
   45a9c:	f8ca 1000 	str.w	r1, [sl]
   45aa0:	f1bb 0f00 	cmp.w	fp, #0
   45aa4:	d043      	beq.n	45b2e <__hexnan+0x118>
   45aa6:	454c      	cmp	r4, r9
   45aa8:	d206      	bcs.n	45ab8 <__hexnan+0xa2>
   45aaa:	2d07      	cmp	r5, #7
   45aac:	dc04      	bgt.n	45ab8 <__hexnan+0xa2>
   45aae:	462a      	mov	r2, r5
   45ab0:	4649      	mov	r1, r9
   45ab2:	4620      	mov	r0, r4
   45ab4:	f7ff ff89 	bl	459ca <L_shift>
   45ab8:	4544      	cmp	r4, r8
   45aba:	d927      	bls.n	45b0c <__hexnan+0xf6>
   45abc:	4643      	mov	r3, r8
   45abe:	f854 2b04 	ldr.w	r2, [r4], #4
   45ac2:	42a6      	cmp	r6, r4
   45ac4:	f843 2b04 	str.w	r2, [r3], #4
   45ac8:	d2f9      	bcs.n	45abe <__hexnan+0xa8>
   45aca:	2200      	movs	r2, #0
   45acc:	f843 2b04 	str.w	r2, [r3], #4
   45ad0:	429e      	cmp	r6, r3
   45ad2:	d2fb      	bcs.n	45acc <__hexnan+0xb6>
   45ad4:	6833      	ldr	r3, [r6, #0]
   45ad6:	b91b      	cbnz	r3, 45ae0 <__hexnan+0xca>
   45ad8:	4546      	cmp	r6, r8
   45ada:	d126      	bne.n	45b2a <__hexnan+0x114>
   45adc:	2301      	movs	r3, #1
   45ade:	6033      	str	r3, [r6, #0]
   45ae0:	2005      	movs	r0, #5
   45ae2:	e025      	b.n	45b30 <__hexnan+0x11a>
   45ae4:	3501      	adds	r5, #1
   45ae6:	f10b 0b01 	add.w	fp, fp, #1
   45aea:	2d08      	cmp	r5, #8
   45aec:	dd05      	ble.n	45afa <__hexnan+0xe4>
   45aee:	4544      	cmp	r4, r8
   45af0:	d9cf      	bls.n	45a92 <__hexnan+0x7c>
   45af2:	2300      	movs	r3, #0
   45af4:	3c04      	subs	r4, #4
   45af6:	2501      	movs	r5, #1
   45af8:	6023      	str	r3, [r4, #0]
   45afa:	6822      	ldr	r2, [r4, #0]
   45afc:	f000 000f 	and.w	r0, r0, #15
   45b00:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   45b04:	6020      	str	r0, [r4, #0]
   45b06:	e7c4      	b.n	45a92 <__hexnan+0x7c>
   45b08:	2508      	movs	r5, #8
   45b0a:	e7c2      	b.n	45a92 <__hexnan+0x7c>
   45b0c:	9b01      	ldr	r3, [sp, #4]
   45b0e:	2b00      	cmp	r3, #0
   45b10:	d0e0      	beq.n	45ad4 <__hexnan+0xbe>
   45b12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   45b16:	f1c3 0320 	rsb	r3, r3, #32
   45b1a:	fa22 f303 	lsr.w	r3, r2, r3
   45b1e:	f857 2c04 	ldr.w	r2, [r7, #-4]
   45b22:	401a      	ands	r2, r3
   45b24:	f847 2c04 	str.w	r2, [r7, #-4]
   45b28:	e7d4      	b.n	45ad4 <__hexnan+0xbe>
   45b2a:	3e04      	subs	r6, #4
   45b2c:	e7d2      	b.n	45ad4 <__hexnan+0xbe>
   45b2e:	2004      	movs	r0, #4
   45b30:	b007      	add	sp, #28
   45b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00045b36 <__retarget_lock_init_recursive>:
   45b36:	4770      	bx	lr

00045b38 <__retarget_lock_acquire_recursive>:
   45b38:	4770      	bx	lr

00045b3a <__retarget_lock_release_recursive>:
   45b3a:	4770      	bx	lr

00045b3c <__swhatbuf_r>:
   45b3c:	b570      	push	{r4, r5, r6, lr}
   45b3e:	460e      	mov	r6, r1
   45b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   45b44:	b096      	sub	sp, #88	; 0x58
   45b46:	4614      	mov	r4, r2
   45b48:	2900      	cmp	r1, #0
   45b4a:	461d      	mov	r5, r3
   45b4c:	da07      	bge.n	45b5e <__swhatbuf_r+0x22>
   45b4e:	2300      	movs	r3, #0
   45b50:	602b      	str	r3, [r5, #0]
   45b52:	89b3      	ldrh	r3, [r6, #12]
   45b54:	061a      	lsls	r2, r3, #24
   45b56:	d410      	bmi.n	45b7a <__swhatbuf_r+0x3e>
   45b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
   45b5c:	e00e      	b.n	45b7c <__swhatbuf_r+0x40>
   45b5e:	466a      	mov	r2, sp
   45b60:	f7fb fe64 	bl	4182c <_fstat_r>
   45b64:	2800      	cmp	r0, #0
   45b66:	dbf2      	blt.n	45b4e <__swhatbuf_r+0x12>
   45b68:	9a01      	ldr	r2, [sp, #4]
   45b6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   45b6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   45b72:	425a      	negs	r2, r3
   45b74:	415a      	adcs	r2, r3
   45b76:	602a      	str	r2, [r5, #0]
   45b78:	e7ee      	b.n	45b58 <__swhatbuf_r+0x1c>
   45b7a:	2340      	movs	r3, #64	; 0x40
   45b7c:	2000      	movs	r0, #0
   45b7e:	6023      	str	r3, [r4, #0]
   45b80:	b016      	add	sp, #88	; 0x58
   45b82:	bd70      	pop	{r4, r5, r6, pc}

00045b84 <__ascii_mbtowc>:
   45b84:	b082      	sub	sp, #8
   45b86:	b901      	cbnz	r1, 45b8a <__ascii_mbtowc+0x6>
   45b88:	a901      	add	r1, sp, #4
   45b8a:	b142      	cbz	r2, 45b9e <__ascii_mbtowc+0x1a>
   45b8c:	b14b      	cbz	r3, 45ba2 <__ascii_mbtowc+0x1e>
   45b8e:	7813      	ldrb	r3, [r2, #0]
   45b90:	600b      	str	r3, [r1, #0]
   45b92:	7812      	ldrb	r2, [r2, #0]
   45b94:	1c10      	adds	r0, r2, #0
   45b96:	bf18      	it	ne
   45b98:	2001      	movne	r0, #1
   45b9a:	b002      	add	sp, #8
   45b9c:	4770      	bx	lr
   45b9e:	4610      	mov	r0, r2
   45ba0:	e7fb      	b.n	45b9a <__ascii_mbtowc+0x16>
   45ba2:	f06f 0001 	mvn.w	r0, #1
   45ba6:	e7f8      	b.n	45b9a <__ascii_mbtowc+0x16>

00045ba8 <memmove>:
   45ba8:	4288      	cmp	r0, r1
   45baa:	eb01 0302 	add.w	r3, r1, r2
   45bae:	b510      	push	{r4, lr}
   45bb0:	d902      	bls.n	45bb8 <memmove+0x10>
   45bb2:	4283      	cmp	r3, r0
   45bb4:	461c      	mov	r4, r3
   45bb6:	d807      	bhi.n	45bc8 <memmove+0x20>
   45bb8:	1e42      	subs	r2, r0, #1
   45bba:	4299      	cmp	r1, r3
   45bbc:	d008      	beq.n	45bd0 <memmove+0x28>
   45bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
   45bc2:	f802 4f01 	strb.w	r4, [r2, #1]!
   45bc6:	e7f8      	b.n	45bba <memmove+0x12>
   45bc8:	1883      	adds	r3, r0, r2
   45bca:	1a9a      	subs	r2, r3, r2
   45bcc:	429a      	cmp	r2, r3
   45bce:	d100      	bne.n	45bd2 <memmove+0x2a>
   45bd0:	bd10      	pop	{r4, pc}
   45bd2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   45bd6:	f803 1d01 	strb.w	r1, [r3, #-1]!
   45bda:	e7f7      	b.n	45bcc <memmove+0x24>

00045bdc <_Balloc>:
   45bdc:	b570      	push	{r4, r5, r6, lr}
   45bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
   45be0:	4604      	mov	r4, r0
   45be2:	460e      	mov	r6, r1
   45be4:	b93d      	cbnz	r5, 45bf6 <_Balloc+0x1a>
   45be6:	2010      	movs	r0, #16
   45be8:	f7f9 fd9a 	bl	3f720 <malloc>
   45bec:	6260      	str	r0, [r4, #36]	; 0x24
   45bee:	6005      	str	r5, [r0, #0]
   45bf0:	60c5      	str	r5, [r0, #12]
   45bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
   45bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
   45bf8:	68eb      	ldr	r3, [r5, #12]
   45bfa:	b183      	cbz	r3, 45c1e <_Balloc+0x42>
   45bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   45bfe:	68db      	ldr	r3, [r3, #12]
   45c00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   45c04:	b9b8      	cbnz	r0, 45c36 <_Balloc+0x5a>
   45c06:	2101      	movs	r1, #1
   45c08:	4620      	mov	r0, r4
   45c0a:	fa01 f506 	lsl.w	r5, r1, r6
   45c0e:	1d6a      	adds	r2, r5, #5
   45c10:	0092      	lsls	r2, r2, #2
   45c12:	f000 fb1a 	bl	4624a <_calloc_r>
   45c16:	b160      	cbz	r0, 45c32 <_Balloc+0x56>
   45c18:	e9c0 6501 	strd	r6, r5, [r0, #4]
   45c1c:	e00e      	b.n	45c3c <_Balloc+0x60>
   45c1e:	2221      	movs	r2, #33	; 0x21
   45c20:	2104      	movs	r1, #4
   45c22:	4620      	mov	r0, r4
   45c24:	f000 fb11 	bl	4624a <_calloc_r>
   45c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   45c2a:	60e8      	str	r0, [r5, #12]
   45c2c:	68db      	ldr	r3, [r3, #12]
   45c2e:	2b00      	cmp	r3, #0
   45c30:	d1e4      	bne.n	45bfc <_Balloc+0x20>
   45c32:	2000      	movs	r0, #0
   45c34:	bd70      	pop	{r4, r5, r6, pc}
   45c36:	6802      	ldr	r2, [r0, #0]
   45c38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   45c3c:	2300      	movs	r3, #0
   45c3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   45c42:	e7f7      	b.n	45c34 <_Balloc+0x58>

00045c44 <_Bfree>:
   45c44:	b570      	push	{r4, r5, r6, lr}
   45c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
   45c48:	4606      	mov	r6, r0
   45c4a:	460d      	mov	r5, r1
   45c4c:	b93c      	cbnz	r4, 45c5e <_Bfree+0x1a>
   45c4e:	2010      	movs	r0, #16
   45c50:	f7f9 fd66 	bl	3f720 <malloc>
   45c54:	6270      	str	r0, [r6, #36]	; 0x24
   45c56:	6004      	str	r4, [r0, #0]
   45c58:	60c4      	str	r4, [r0, #12]
   45c5a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   45c5e:	b13d      	cbz	r5, 45c70 <_Bfree+0x2c>
   45c60:	6a73      	ldr	r3, [r6, #36]	; 0x24
   45c62:	686a      	ldr	r2, [r5, #4]
   45c64:	68db      	ldr	r3, [r3, #12]
   45c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   45c6a:	6029      	str	r1, [r5, #0]
   45c6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   45c70:	bd70      	pop	{r4, r5, r6, pc}

00045c72 <__multadd>:
   45c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   45c76:	f101 0c14 	add.w	ip, r1, #20
   45c7a:	461f      	mov	r7, r3
   45c7c:	4606      	mov	r6, r0
   45c7e:	460c      	mov	r4, r1
   45c80:	690d      	ldr	r5, [r1, #16]
   45c82:	2300      	movs	r3, #0
   45c84:	f8dc 0000 	ldr.w	r0, [ip]
   45c88:	3301      	adds	r3, #1
   45c8a:	b281      	uxth	r1, r0
   45c8c:	429d      	cmp	r5, r3
   45c8e:	ea4f 4010 	mov.w	r0, r0, lsr #16
   45c92:	fb02 7101 	mla	r1, r2, r1, r7
   45c96:	ea4f 4711 	mov.w	r7, r1, lsr #16
   45c9a:	b289      	uxth	r1, r1
   45c9c:	fb02 7000 	mla	r0, r2, r0, r7
   45ca0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   45ca4:	ea4f 4710 	mov.w	r7, r0, lsr #16
   45ca8:	f84c 1b04 	str.w	r1, [ip], #4
   45cac:	dcea      	bgt.n	45c84 <__multadd+0x12>
   45cae:	b1d7      	cbz	r7, 45ce6 <__multadd+0x74>
   45cb0:	68a3      	ldr	r3, [r4, #8]
   45cb2:	42ab      	cmp	r3, r5
   45cb4:	dc12      	bgt.n	45cdc <__multadd+0x6a>
   45cb6:	6861      	ldr	r1, [r4, #4]
   45cb8:	4630      	mov	r0, r6
   45cba:	3101      	adds	r1, #1
   45cbc:	f7ff ff8e 	bl	45bdc <_Balloc>
   45cc0:	6922      	ldr	r2, [r4, #16]
   45cc2:	4680      	mov	r8, r0
   45cc4:	f104 010c 	add.w	r1, r4, #12
   45cc8:	3202      	adds	r2, #2
   45cca:	300c      	adds	r0, #12
   45ccc:	0092      	lsls	r2, r2, #2
   45cce:	f7ff faab 	bl	45228 <memcpy>
   45cd2:	4621      	mov	r1, r4
   45cd4:	4644      	mov	r4, r8
   45cd6:	4630      	mov	r0, r6
   45cd8:	f7ff ffb4 	bl	45c44 <_Bfree>
   45cdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   45ce0:	3501      	adds	r5, #1
   45ce2:	615f      	str	r7, [r3, #20]
   45ce4:	6125      	str	r5, [r4, #16]
   45ce6:	4620      	mov	r0, r4
   45ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045cec <__s2b>:
   45cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45cf0:	4615      	mov	r5, r2
   45cf2:	461f      	mov	r7, r3
   45cf4:	2209      	movs	r2, #9
   45cf6:	3308      	adds	r3, #8
   45cf8:	460c      	mov	r4, r1
   45cfa:	4606      	mov	r6, r0
   45cfc:	2100      	movs	r1, #0
   45cfe:	fb93 f3f2 	sdiv	r3, r3, r2
   45d02:	2201      	movs	r2, #1
   45d04:	429a      	cmp	r2, r3
   45d06:	db20      	blt.n	45d4a <__s2b+0x5e>
   45d08:	4630      	mov	r0, r6
   45d0a:	f7ff ff67 	bl	45bdc <_Balloc>
   45d0e:	9b08      	ldr	r3, [sp, #32]
   45d10:	2d09      	cmp	r5, #9
   45d12:	6143      	str	r3, [r0, #20]
   45d14:	f04f 0301 	mov.w	r3, #1
   45d18:	6103      	str	r3, [r0, #16]
   45d1a:	dd19      	ble.n	45d50 <__s2b+0x64>
   45d1c:	f104 0909 	add.w	r9, r4, #9
   45d20:	442c      	add	r4, r5
   45d22:	46c8      	mov	r8, r9
   45d24:	f818 3b01 	ldrb.w	r3, [r8], #1
   45d28:	4601      	mov	r1, r0
   45d2a:	220a      	movs	r2, #10
   45d2c:	4630      	mov	r0, r6
   45d2e:	3b30      	subs	r3, #48	; 0x30
   45d30:	f7ff ff9f 	bl	45c72 <__multadd>
   45d34:	45a0      	cmp	r8, r4
   45d36:	d1f5      	bne.n	45d24 <__s2b+0x38>
   45d38:	f1a5 0408 	sub.w	r4, r5, #8
   45d3c:	444c      	add	r4, r9
   45d3e:	1b2d      	subs	r5, r5, r4
   45d40:	1963      	adds	r3, r4, r5
   45d42:	42bb      	cmp	r3, r7
   45d44:	db07      	blt.n	45d56 <__s2b+0x6a>
   45d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   45d4a:	0052      	lsls	r2, r2, #1
   45d4c:	3101      	adds	r1, #1
   45d4e:	e7d9      	b.n	45d04 <__s2b+0x18>
   45d50:	340a      	adds	r4, #10
   45d52:	2509      	movs	r5, #9
   45d54:	e7f3      	b.n	45d3e <__s2b+0x52>
   45d56:	f814 3b01 	ldrb.w	r3, [r4], #1
   45d5a:	4601      	mov	r1, r0
   45d5c:	220a      	movs	r2, #10
   45d5e:	4630      	mov	r0, r6
   45d60:	3b30      	subs	r3, #48	; 0x30
   45d62:	f7ff ff86 	bl	45c72 <__multadd>
   45d66:	e7eb      	b.n	45d40 <__s2b+0x54>

00045d68 <__hi0bits>:
   45d68:	0c02      	lsrs	r2, r0, #16
   45d6a:	4603      	mov	r3, r0
   45d6c:	0412      	lsls	r2, r2, #16
   45d6e:	b9ca      	cbnz	r2, 45da4 <__hi0bits+0x3c>
   45d70:	0403      	lsls	r3, r0, #16
   45d72:	2010      	movs	r0, #16
   45d74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   45d78:	bf04      	itt	eq
   45d7a:	021b      	lsleq	r3, r3, #8
   45d7c:	3008      	addeq	r0, #8
   45d7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   45d82:	bf04      	itt	eq
   45d84:	011b      	lsleq	r3, r3, #4
   45d86:	3004      	addeq	r0, #4
   45d88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   45d8c:	bf04      	itt	eq
   45d8e:	009b      	lsleq	r3, r3, #2
   45d90:	3002      	addeq	r0, #2
   45d92:	2b00      	cmp	r3, #0
   45d94:	db05      	blt.n	45da2 <__hi0bits+0x3a>
   45d96:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   45d9a:	f100 0001 	add.w	r0, r0, #1
   45d9e:	bf08      	it	eq
   45da0:	2020      	moveq	r0, #32
   45da2:	4770      	bx	lr
   45da4:	2000      	movs	r0, #0
   45da6:	e7e5      	b.n	45d74 <__hi0bits+0xc>

00045da8 <__lo0bits>:
   45da8:	6803      	ldr	r3, [r0, #0]
   45daa:	4601      	mov	r1, r0
   45dac:	f013 0207 	ands.w	r2, r3, #7
   45db0:	d00b      	beq.n	45dca <__lo0bits+0x22>
   45db2:	07da      	lsls	r2, r3, #31
   45db4:	d424      	bmi.n	45e00 <__lo0bits+0x58>
   45db6:	0798      	lsls	r0, r3, #30
   45db8:	bf47      	ittee	mi
   45dba:	085b      	lsrmi	r3, r3, #1
   45dbc:	2001      	movmi	r0, #1
   45dbe:	089b      	lsrpl	r3, r3, #2
   45dc0:	2002      	movpl	r0, #2
   45dc2:	bf4c      	ite	mi
   45dc4:	600b      	strmi	r3, [r1, #0]
   45dc6:	600b      	strpl	r3, [r1, #0]
   45dc8:	4770      	bx	lr
   45dca:	b298      	uxth	r0, r3
   45dcc:	b9b0      	cbnz	r0, 45dfc <__lo0bits+0x54>
   45dce:	0c1b      	lsrs	r3, r3, #16
   45dd0:	2010      	movs	r0, #16
   45dd2:	f013 0fff 	tst.w	r3, #255	; 0xff
   45dd6:	bf04      	itt	eq
   45dd8:	0a1b      	lsreq	r3, r3, #8
   45dda:	3008      	addeq	r0, #8
   45ddc:	071a      	lsls	r2, r3, #28
   45dde:	bf04      	itt	eq
   45de0:	091b      	lsreq	r3, r3, #4
   45de2:	3004      	addeq	r0, #4
   45de4:	079a      	lsls	r2, r3, #30
   45de6:	bf04      	itt	eq
   45de8:	089b      	lsreq	r3, r3, #2
   45dea:	3002      	addeq	r0, #2
   45dec:	07da      	lsls	r2, r3, #31
   45dee:	d403      	bmi.n	45df8 <__lo0bits+0x50>
   45df0:	085b      	lsrs	r3, r3, #1
   45df2:	f100 0001 	add.w	r0, r0, #1
   45df6:	d005      	beq.n	45e04 <__lo0bits+0x5c>
   45df8:	600b      	str	r3, [r1, #0]
   45dfa:	4770      	bx	lr
   45dfc:	4610      	mov	r0, r2
   45dfe:	e7e8      	b.n	45dd2 <__lo0bits+0x2a>
   45e00:	2000      	movs	r0, #0
   45e02:	4770      	bx	lr
   45e04:	2020      	movs	r0, #32
   45e06:	4770      	bx	lr

00045e08 <__i2b>:
   45e08:	b510      	push	{r4, lr}
   45e0a:	460c      	mov	r4, r1
   45e0c:	2101      	movs	r1, #1
   45e0e:	f7ff fee5 	bl	45bdc <_Balloc>
   45e12:	2201      	movs	r2, #1
   45e14:	6144      	str	r4, [r0, #20]
   45e16:	6102      	str	r2, [r0, #16]
   45e18:	bd10      	pop	{r4, pc}

00045e1a <__multiply>:
   45e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45e1e:	4690      	mov	r8, r2
   45e20:	690a      	ldr	r2, [r1, #16]
   45e22:	460c      	mov	r4, r1
   45e24:	f8d8 3010 	ldr.w	r3, [r8, #16]
   45e28:	429a      	cmp	r2, r3
   45e2a:	bfbe      	ittt	lt
   45e2c:	460b      	movlt	r3, r1
   45e2e:	4644      	movlt	r4, r8
   45e30:	4698      	movlt	r8, r3
   45e32:	6927      	ldr	r7, [r4, #16]
   45e34:	68a3      	ldr	r3, [r4, #8]
   45e36:	f8d8 9010 	ldr.w	r9, [r8, #16]
   45e3a:	6861      	ldr	r1, [r4, #4]
   45e3c:	eb07 0609 	add.w	r6, r7, r9
   45e40:	42b3      	cmp	r3, r6
   45e42:	bfb8      	it	lt
   45e44:	3101      	addlt	r1, #1
   45e46:	f7ff fec9 	bl	45bdc <_Balloc>
   45e4a:	f100 0514 	add.w	r5, r0, #20
   45e4e:	2200      	movs	r2, #0
   45e50:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   45e54:	462b      	mov	r3, r5
   45e56:	4573      	cmp	r3, lr
   45e58:	d316      	bcc.n	45e88 <__multiply+0x6e>
   45e5a:	f104 0314 	add.w	r3, r4, #20
   45e5e:	f108 0214 	add.w	r2, r8, #20
   45e62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   45e66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   45e6a:	9300      	str	r3, [sp, #0]
   45e6c:	9b00      	ldr	r3, [sp, #0]
   45e6e:	9201      	str	r2, [sp, #4]
   45e70:	4293      	cmp	r3, r2
   45e72:	d80c      	bhi.n	45e8e <__multiply+0x74>
   45e74:	2e00      	cmp	r6, #0
   45e76:	dd03      	ble.n	45e80 <__multiply+0x66>
   45e78:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   45e7c:	2b00      	cmp	r3, #0
   45e7e:	d059      	beq.n	45f34 <__multiply+0x11a>
   45e80:	6106      	str	r6, [r0, #16]
   45e82:	b003      	add	sp, #12
   45e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45e88:	f843 2b04 	str.w	r2, [r3], #4
   45e8c:	e7e3      	b.n	45e56 <__multiply+0x3c>
   45e8e:	f8b2 a000 	ldrh.w	sl, [r2]
   45e92:	f1ba 0f00 	cmp.w	sl, #0
   45e96:	d023      	beq.n	45ee0 <__multiply+0xc6>
   45e98:	f104 0914 	add.w	r9, r4, #20
   45e9c:	46ac      	mov	ip, r5
   45e9e:	f04f 0800 	mov.w	r8, #0
   45ea2:	f859 1b04 	ldr.w	r1, [r9], #4
   45ea6:	f8dc b000 	ldr.w	fp, [ip]
   45eaa:	b28b      	uxth	r3, r1
   45eac:	454f      	cmp	r7, r9
   45eae:	fa1f fb8b 	uxth.w	fp, fp
   45eb2:	fb0a b303 	mla	r3, sl, r3, fp
   45eb6:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   45eba:	f8dc 1000 	ldr.w	r1, [ip]
   45ebe:	4443      	add	r3, r8
   45ec0:	ea4f 4811 	mov.w	r8, r1, lsr #16
   45ec4:	fb0a 810b 	mla	r1, sl, fp, r8
   45ec8:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   45ecc:	b29b      	uxth	r3, r3
   45ece:	ea4f 4811 	mov.w	r8, r1, lsr #16
   45ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   45ed6:	f84c 3b04 	str.w	r3, [ip], #4
   45eda:	d8e2      	bhi.n	45ea2 <__multiply+0x88>
   45edc:	f8cc 8000 	str.w	r8, [ip]
   45ee0:	9b01      	ldr	r3, [sp, #4]
   45ee2:	3204      	adds	r2, #4
   45ee4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   45ee8:	f1b9 0f00 	cmp.w	r9, #0
   45eec:	d020      	beq.n	45f30 <__multiply+0x116>
   45eee:	682b      	ldr	r3, [r5, #0]
   45ef0:	f104 0814 	add.w	r8, r4, #20
   45ef4:	46ac      	mov	ip, r5
   45ef6:	f04f 0a00 	mov.w	sl, #0
   45efa:	f8b8 1000 	ldrh.w	r1, [r8]
   45efe:	b29b      	uxth	r3, r3
   45f00:	f8bc b002 	ldrh.w	fp, [ip, #2]
   45f04:	fb09 b101 	mla	r1, r9, r1, fp
   45f08:	448a      	add	sl, r1
   45f0a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   45f0e:	f84c 3b04 	str.w	r3, [ip], #4
   45f12:	f858 3b04 	ldr.w	r3, [r8], #4
   45f16:	f8bc 1000 	ldrh.w	r1, [ip]
   45f1a:	0c1b      	lsrs	r3, r3, #16
   45f1c:	4547      	cmp	r7, r8
   45f1e:	fb09 1303 	mla	r3, r9, r3, r1
   45f22:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   45f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   45f2a:	d8e6      	bhi.n	45efa <__multiply+0xe0>
   45f2c:	f8cc 3000 	str.w	r3, [ip]
   45f30:	3504      	adds	r5, #4
   45f32:	e79b      	b.n	45e6c <__multiply+0x52>
   45f34:	3e01      	subs	r6, #1
   45f36:	e79d      	b.n	45e74 <__multiply+0x5a>

00045f38 <__lshift>:
   45f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   45f3c:	460c      	mov	r4, r1
   45f3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
   45f42:	4607      	mov	r7, r0
   45f44:	4616      	mov	r6, r2
   45f46:	6923      	ldr	r3, [r4, #16]
   45f48:	6849      	ldr	r1, [r1, #4]
   45f4a:	eb0a 0903 	add.w	r9, sl, r3
   45f4e:	68a3      	ldr	r3, [r4, #8]
   45f50:	f109 0501 	add.w	r5, r9, #1
   45f54:	42ab      	cmp	r3, r5
   45f56:	db33      	blt.n	45fc0 <__lshift+0x88>
   45f58:	4638      	mov	r0, r7
   45f5a:	f7ff fe3f 	bl	45bdc <_Balloc>
   45f5e:	2300      	movs	r3, #0
   45f60:	4680      	mov	r8, r0
   45f62:	f100 0114 	add.w	r1, r0, #20
   45f66:	f100 0210 	add.w	r2, r0, #16
   45f6a:	4618      	mov	r0, r3
   45f6c:	4553      	cmp	r3, sl
   45f6e:	db2a      	blt.n	45fc6 <__lshift+0x8e>
   45f70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   45f74:	f104 0314 	add.w	r3, r4, #20
   45f78:	6920      	ldr	r0, [r4, #16]
   45f7a:	f016 021f 	ands.w	r2, r6, #31
   45f7e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   45f82:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   45f86:	d022      	beq.n	45fce <__lshift+0x96>
   45f88:	f1c2 0e20 	rsb	lr, r2, #32
   45f8c:	2000      	movs	r0, #0
   45f8e:	681e      	ldr	r6, [r3, #0]
   45f90:	4096      	lsls	r6, r2
   45f92:	4330      	orrs	r0, r6
   45f94:	f841 0b04 	str.w	r0, [r1], #4
   45f98:	f853 0b04 	ldr.w	r0, [r3], #4
   45f9c:	459c      	cmp	ip, r3
   45f9e:	fa20 f00e 	lsr.w	r0, r0, lr
   45fa2:	d8f4      	bhi.n	45f8e <__lshift+0x56>
   45fa4:	6008      	str	r0, [r1, #0]
   45fa6:	b108      	cbz	r0, 45fac <__lshift+0x74>
   45fa8:	f109 0502 	add.w	r5, r9, #2
   45fac:	3d01      	subs	r5, #1
   45fae:	4638      	mov	r0, r7
   45fb0:	4621      	mov	r1, r4
   45fb2:	f8c8 5010 	str.w	r5, [r8, #16]
   45fb6:	f7ff fe45 	bl	45c44 <_Bfree>
   45fba:	4640      	mov	r0, r8
   45fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   45fc0:	3101      	adds	r1, #1
   45fc2:	005b      	lsls	r3, r3, #1
   45fc4:	e7c6      	b.n	45f54 <__lshift+0x1c>
   45fc6:	f842 0f04 	str.w	r0, [r2, #4]!
   45fca:	3301      	adds	r3, #1
   45fcc:	e7ce      	b.n	45f6c <__lshift+0x34>
   45fce:	3904      	subs	r1, #4
   45fd0:	f853 2b04 	ldr.w	r2, [r3], #4
   45fd4:	459c      	cmp	ip, r3
   45fd6:	f841 2f04 	str.w	r2, [r1, #4]!
   45fda:	d8f9      	bhi.n	45fd0 <__lshift+0x98>
   45fdc:	e7e6      	b.n	45fac <__lshift+0x74>

00045fde <__mcmp>:
   45fde:	6903      	ldr	r3, [r0, #16]
   45fe0:	690a      	ldr	r2, [r1, #16]
   45fe2:	1a9b      	subs	r3, r3, r2
   45fe4:	b530      	push	{r4, r5, lr}
   45fe6:	d10c      	bne.n	46002 <__mcmp+0x24>
   45fe8:	0092      	lsls	r2, r2, #2
   45fea:	3014      	adds	r0, #20
   45fec:	3114      	adds	r1, #20
   45fee:	1884      	adds	r4, r0, r2
   45ff0:	4411      	add	r1, r2
   45ff2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   45ff6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   45ffa:	4295      	cmp	r5, r2
   45ffc:	d003      	beq.n	46006 <__mcmp+0x28>
   45ffe:	d305      	bcc.n	4600c <__mcmp+0x2e>
   46000:	2301      	movs	r3, #1
   46002:	4618      	mov	r0, r3
   46004:	bd30      	pop	{r4, r5, pc}
   46006:	42a0      	cmp	r0, r4
   46008:	d3f3      	bcc.n	45ff2 <__mcmp+0x14>
   4600a:	e7fa      	b.n	46002 <__mcmp+0x24>
   4600c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   46010:	e7f7      	b.n	46002 <__mcmp+0x24>

00046012 <__mdiff>:
   46012:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   46016:	460d      	mov	r5, r1
   46018:	4607      	mov	r7, r0
   4601a:	4611      	mov	r1, r2
   4601c:	4614      	mov	r4, r2
   4601e:	4628      	mov	r0, r5
   46020:	f7ff ffdd 	bl	45fde <__mcmp>
   46024:	1e06      	subs	r6, r0, #0
   46026:	d108      	bne.n	4603a <__mdiff+0x28>
   46028:	4631      	mov	r1, r6
   4602a:	4638      	mov	r0, r7
   4602c:	f7ff fdd6 	bl	45bdc <_Balloc>
   46030:	2301      	movs	r3, #1
   46032:	e9c0 3604 	strd	r3, r6, [r0, #16]
   46036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4603a:	bfa3      	ittte	ge
   4603c:	4623      	movge	r3, r4
   4603e:	462c      	movge	r4, r5
   46040:	2600      	movge	r6, #0
   46042:	2601      	movlt	r6, #1
   46044:	bfa8      	it	ge
   46046:	461d      	movge	r5, r3
   46048:	6861      	ldr	r1, [r4, #4]
   4604a:	4638      	mov	r0, r7
   4604c:	f7ff fdc6 	bl	45bdc <_Balloc>
   46050:	f105 0914 	add.w	r9, r5, #20
   46054:	60c6      	str	r6, [r0, #12]
   46056:	f104 0214 	add.w	r2, r4, #20
   4605a:	6926      	ldr	r6, [r4, #16]
   4605c:	f100 0114 	add.w	r1, r0, #20
   46060:	692b      	ldr	r3, [r5, #16]
   46062:	f04f 0e00 	mov.w	lr, #0
   46066:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   4606a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   4606e:	f852 ab04 	ldr.w	sl, [r2], #4
   46072:	f859 5b04 	ldr.w	r5, [r9], #4
   46076:	fa1f f38a 	uxth.w	r3, sl
   4607a:	4694      	mov	ip, r2
   4607c:	b2ac      	uxth	r4, r5
   4607e:	45c8      	cmp	r8, r9
   46080:	4473      	add	r3, lr
   46082:	eba3 0304 	sub.w	r3, r3, r4
   46086:	ea4f 4415 	mov.w	r4, r5, lsr #16
   4608a:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   4608e:	eb04 4423 	add.w	r4, r4, r3, asr #16
   46092:	b29b      	uxth	r3, r3
   46094:	ea4f 4e24 	mov.w	lr, r4, asr #16
   46098:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   4609c:	f841 4b04 	str.w	r4, [r1], #4
   460a0:	d8e5      	bhi.n	4606e <__mdiff+0x5c>
   460a2:	45bc      	cmp	ip, r7
   460a4:	d304      	bcc.n	460b0 <__mdiff+0x9e>
   460a6:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   460aa:	b183      	cbz	r3, 460ce <__mdiff+0xbc>
   460ac:	6106      	str	r6, [r0, #16]
   460ae:	e7c2      	b.n	46036 <__mdiff+0x24>
   460b0:	f85c 4b04 	ldr.w	r4, [ip], #4
   460b4:	b2a2      	uxth	r2, r4
   460b6:	4472      	add	r2, lr
   460b8:	1413      	asrs	r3, r2, #16
   460ba:	b292      	uxth	r2, r2
   460bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   460c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   460c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
   460c8:	f841 2b04 	str.w	r2, [r1], #4
   460cc:	e7e9      	b.n	460a2 <__mdiff+0x90>
   460ce:	3e01      	subs	r6, #1
   460d0:	e7e9      	b.n	460a6 <__mdiff+0x94>

000460d2 <__d2b>:
   460d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   460d6:	ec59 8b10 	vmov	r8, r9, d0
   460da:	f3c9 540a 	ubfx	r4, r9, #20, #11
   460de:	460e      	mov	r6, r1
   460e0:	2101      	movs	r1, #1
   460e2:	4615      	mov	r5, r2
   460e4:	f7ff fd7a 	bl	45bdc <_Balloc>
   460e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
   460ec:	4607      	mov	r7, r0
   460ee:	bb2c      	cbnz	r4, 4613c <__d2b+0x6a>
   460f0:	9301      	str	r3, [sp, #4]
   460f2:	f1b8 0300 	subs.w	r3, r8, #0
   460f6:	d026      	beq.n	46146 <__d2b+0x74>
   460f8:	4668      	mov	r0, sp
   460fa:	9300      	str	r3, [sp, #0]
   460fc:	f7ff fe54 	bl	45da8 <__lo0bits>
   46100:	9900      	ldr	r1, [sp, #0]
   46102:	b1f0      	cbz	r0, 46142 <__d2b+0x70>
   46104:	9a01      	ldr	r2, [sp, #4]
   46106:	f1c0 0320 	rsb	r3, r0, #32
   4610a:	fa02 f303 	lsl.w	r3, r2, r3
   4610e:	40c2      	lsrs	r2, r0
   46110:	430b      	orrs	r3, r1
   46112:	9201      	str	r2, [sp, #4]
   46114:	617b      	str	r3, [r7, #20]
   46116:	9b01      	ldr	r3, [sp, #4]
   46118:	2b00      	cmp	r3, #0
   4611a:	61bb      	str	r3, [r7, #24]
   4611c:	bf14      	ite	ne
   4611e:	2102      	movne	r1, #2
   46120:	2101      	moveq	r1, #1
   46122:	6139      	str	r1, [r7, #16]
   46124:	b1c4      	cbz	r4, 46158 <__d2b+0x86>
   46126:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   4612a:	4404      	add	r4, r0
   4612c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   46130:	6034      	str	r4, [r6, #0]
   46132:	6028      	str	r0, [r5, #0]
   46134:	4638      	mov	r0, r7
   46136:	b003      	add	sp, #12
   46138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4613c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   46140:	e7d6      	b.n	460f0 <__d2b+0x1e>
   46142:	6179      	str	r1, [r7, #20]
   46144:	e7e7      	b.n	46116 <__d2b+0x44>
   46146:	a801      	add	r0, sp, #4
   46148:	f7ff fe2e 	bl	45da8 <__lo0bits>
   4614c:	9b01      	ldr	r3, [sp, #4]
   4614e:	2101      	movs	r1, #1
   46150:	3020      	adds	r0, #32
   46152:	617b      	str	r3, [r7, #20]
   46154:	6139      	str	r1, [r7, #16]
   46156:	e7e5      	b.n	46124 <__d2b+0x52>
   46158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   4615c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   46160:	6030      	str	r0, [r6, #0]
   46162:	6918      	ldr	r0, [r3, #16]
   46164:	f7ff fe00 	bl	45d68 <__hi0bits>
   46168:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   4616c:	e7e1      	b.n	46132 <__d2b+0x60>

0004616e <__ratio>:
   4616e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46172:	4688      	mov	r8, r1
   46174:	4681      	mov	r9, r0
   46176:	4669      	mov	r1, sp
   46178:	f7fa ff50 	bl	4101c <__b2d>
   4617c:	a901      	add	r1, sp, #4
   4617e:	4640      	mov	r0, r8
   46180:	ec57 6b10 	vmov	r6, r7, d0
   46184:	f7fa ff4a 	bl	4101c <__b2d>
   46188:	f8d9 3010 	ldr.w	r3, [r9, #16]
   4618c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   46190:	463d      	mov	r5, r7
   46192:	4630      	mov	r0, r6
   46194:	eba3 0c02 	sub.w	ip, r3, r2
   46198:	e9dd 3200 	ldrd	r3, r2, [sp]
   4619c:	ec5b ab10 	vmov	sl, fp, d0
   461a0:	1a9b      	subs	r3, r3, r2
   461a2:	4659      	mov	r1, fp
   461a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   461a8:	2b00      	cmp	r3, #0
   461aa:	bfcd      	iteet	gt
   461ac:	463a      	movgt	r2, r7
   461ae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   461b2:	465a      	movle	r2, fp
   461b4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   461b8:	bfd8      	it	le
   461ba:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   461be:	ee10 2a10 	vmov	r2, s0
   461c2:	460b      	mov	r3, r1
   461c4:	4629      	mov	r1, r5
   461c6:	f7d6 fc21 	bl	1ca0c <__aeabi_ddiv>
   461ca:	ec41 0b10 	vmov	d0, r0, r1
   461ce:	b003      	add	sp, #12
   461d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000461d4 <__copybits>:
   461d4:	3901      	subs	r1, #1
   461d6:	f102 0314 	add.w	r3, r2, #20
   461da:	1149      	asrs	r1, r1, #5
   461dc:	b510      	push	{r4, lr}
   461de:	3101      	adds	r1, #1
   461e0:	6914      	ldr	r4, [r2, #16]
   461e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   461e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   461ea:	42a3      	cmp	r3, r4
   461ec:	4602      	mov	r2, r0
   461ee:	d303      	bcc.n	461f8 <__copybits+0x24>
   461f0:	2300      	movs	r3, #0
   461f2:	428a      	cmp	r2, r1
   461f4:	d305      	bcc.n	46202 <__copybits+0x2e>
   461f6:	bd10      	pop	{r4, pc}
   461f8:	f853 2b04 	ldr.w	r2, [r3], #4
   461fc:	f840 2b04 	str.w	r2, [r0], #4
   46200:	e7f3      	b.n	461ea <__copybits+0x16>
   46202:	f842 3b04 	str.w	r3, [r2], #4
   46206:	e7f4      	b.n	461f2 <__copybits+0x1e>

00046208 <__any_on>:
   46208:	f100 0214 	add.w	r2, r0, #20
   4620c:	114b      	asrs	r3, r1, #5
   4620e:	6900      	ldr	r0, [r0, #16]
   46210:	4298      	cmp	r0, r3
   46212:	b510      	push	{r4, lr}
   46214:	db11      	blt.n	4623a <__any_on+0x32>
   46216:	dd0a      	ble.n	4622e <__any_on+0x26>
   46218:	f011 011f 	ands.w	r1, r1, #31
   4621c:	d007      	beq.n	4622e <__any_on+0x26>
   4621e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   46222:	fa24 f001 	lsr.w	r0, r4, r1
   46226:	fa00 f101 	lsl.w	r1, r0, r1
   4622a:	428c      	cmp	r4, r1
   4622c:	d10b      	bne.n	46246 <__any_on+0x3e>
   4622e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   46232:	4293      	cmp	r3, r2
   46234:	d803      	bhi.n	4623e <__any_on+0x36>
   46236:	2000      	movs	r0, #0
   46238:	bd10      	pop	{r4, pc}
   4623a:	4603      	mov	r3, r0
   4623c:	e7f7      	b.n	4622e <__any_on+0x26>
   4623e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   46242:	2900      	cmp	r1, #0
   46244:	d0f5      	beq.n	46232 <__any_on+0x2a>
   46246:	2001      	movs	r0, #1
   46248:	e7f6      	b.n	46238 <__any_on+0x30>

0004624a <_calloc_r>:
   4624a:	b538      	push	{r3, r4, r5, lr}
   4624c:	fb02 f401 	mul.w	r4, r2, r1
   46250:	4621      	mov	r1, r4
   46252:	f7f9 fac3 	bl	3f7dc <_malloc_r>
   46256:	4605      	mov	r5, r0
   46258:	b118      	cbz	r0, 46262 <_calloc_r+0x18>
   4625a:	4622      	mov	r2, r4
   4625c:	2100      	movs	r1, #0
   4625e:	f7ff f803 	bl	45268 <memset>
   46262:	4628      	mov	r0, r5
   46264:	bd38      	pop	{r3, r4, r5, pc}

00046266 <_realloc_r>:
   46266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   46268:	4607      	mov	r7, r0
   4626a:	4614      	mov	r4, r2
   4626c:	460e      	mov	r6, r1
   4626e:	b921      	cbnz	r1, 4627a <_realloc_r+0x14>
   46270:	4611      	mov	r1, r2
   46272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   46276:	f7f9 bab1 	b.w	3f7dc <_malloc_r>
   4627a:	b922      	cbnz	r2, 46286 <_realloc_r+0x20>
   4627c:	4625      	mov	r5, r4
   4627e:	f7f9 fa5f 	bl	3f740 <_free_r>
   46282:	4628      	mov	r0, r5
   46284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   46286:	f000 f968 	bl	4655a <_malloc_usable_size_r>
   4628a:	42a0      	cmp	r0, r4
   4628c:	d20f      	bcs.n	462ae <_realloc_r+0x48>
   4628e:	4621      	mov	r1, r4
   46290:	4638      	mov	r0, r7
   46292:	f7f9 faa3 	bl	3f7dc <_malloc_r>
   46296:	4605      	mov	r5, r0
   46298:	2800      	cmp	r0, #0
   4629a:	d0f2      	beq.n	46282 <_realloc_r+0x1c>
   4629c:	4631      	mov	r1, r6
   4629e:	4622      	mov	r2, r4
   462a0:	f7fe ffc2 	bl	45228 <memcpy>
   462a4:	4631      	mov	r1, r6
   462a6:	4638      	mov	r0, r7
   462a8:	f7f9 fa4a 	bl	3f740 <_free_r>
   462ac:	e7e9      	b.n	46282 <_realloc_r+0x1c>
   462ae:	4635      	mov	r5, r6
   462b0:	e7e7      	b.n	46282 <_realloc_r+0x1c>

000462b2 <__ssputs_r>:
   462b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   462b6:	688e      	ldr	r6, [r1, #8]
   462b8:	4682      	mov	sl, r0
   462ba:	460c      	mov	r4, r1
   462bc:	4691      	mov	r9, r2
   462be:	429e      	cmp	r6, r3
   462c0:	4698      	mov	r8, r3
   462c2:	d838      	bhi.n	46336 <__ssputs_r+0x84>
   462c4:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   462c8:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   462cc:	d031      	beq.n	46332 <__ssputs_r+0x80>
   462ce:	6962      	ldr	r2, [r4, #20]
   462d0:	3301      	adds	r3, #1
   462d2:	6825      	ldr	r5, [r4, #0]
   462d4:	6909      	ldr	r1, [r1, #16]
   462d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   462da:	1a6f      	subs	r7, r5, r1
   462dc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   462e0:	443b      	add	r3, r7
   462e2:	1055      	asrs	r5, r2, #1
   462e4:	429d      	cmp	r5, r3
   462e6:	bf38      	it	cc
   462e8:	461d      	movcc	r5, r3
   462ea:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   462ee:	d030      	beq.n	46352 <__ssputs_r+0xa0>
   462f0:	4629      	mov	r1, r5
   462f2:	f7f9 fa73 	bl	3f7dc <_malloc_r>
   462f6:	4606      	mov	r6, r0
   462f8:	b950      	cbnz	r0, 46310 <__ssputs_r+0x5e>
   462fa:	230c      	movs	r3, #12
   462fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46300:	f8ca 3000 	str.w	r3, [sl]
   46304:	89a3      	ldrh	r3, [r4, #12]
   46306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   4630a:	81a3      	strh	r3, [r4, #12]
   4630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   46310:	463a      	mov	r2, r7
   46312:	6921      	ldr	r1, [r4, #16]
   46314:	f7fe ff88 	bl	45228 <memcpy>
   46318:	89a3      	ldrh	r3, [r4, #12]
   4631a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   4631e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   46322:	81a3      	strh	r3, [r4, #12]
   46324:	6126      	str	r6, [r4, #16]
   46326:	443e      	add	r6, r7
   46328:	6165      	str	r5, [r4, #20]
   4632a:	1bed      	subs	r5, r5, r7
   4632c:	6026      	str	r6, [r4, #0]
   4632e:	4646      	mov	r6, r8
   46330:	60a5      	str	r5, [r4, #8]
   46332:	4546      	cmp	r6, r8
   46334:	d900      	bls.n	46338 <__ssputs_r+0x86>
   46336:	4646      	mov	r6, r8
   46338:	4632      	mov	r2, r6
   4633a:	4649      	mov	r1, r9
   4633c:	6820      	ldr	r0, [r4, #0]
   4633e:	f7ff fc33 	bl	45ba8 <memmove>
   46342:	68a3      	ldr	r3, [r4, #8]
   46344:	2000      	movs	r0, #0
   46346:	1b9b      	subs	r3, r3, r6
   46348:	60a3      	str	r3, [r4, #8]
   4634a:	6823      	ldr	r3, [r4, #0]
   4634c:	441e      	add	r6, r3
   4634e:	6026      	str	r6, [r4, #0]
   46350:	e7dc      	b.n	4630c <__ssputs_r+0x5a>
   46352:	462a      	mov	r2, r5
   46354:	f7ff ff87 	bl	46266 <_realloc_r>
   46358:	4606      	mov	r6, r0
   4635a:	2800      	cmp	r0, #0
   4635c:	d1e2      	bne.n	46324 <__ssputs_r+0x72>
   4635e:	6921      	ldr	r1, [r4, #16]
   46360:	4650      	mov	r0, sl
   46362:	f7f9 f9ed 	bl	3f740 <_free_r>
   46366:	e7c8      	b.n	462fa <__ssputs_r+0x48>

00046368 <_sungetc_r>:
   46368:	b538      	push	{r3, r4, r5, lr}
   4636a:	1c4b      	adds	r3, r1, #1
   4636c:	4614      	mov	r4, r2
   4636e:	d103      	bne.n	46378 <_sungetc_r+0x10>
   46370:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   46374:	4628      	mov	r0, r5
   46376:	bd38      	pop	{r3, r4, r5, pc}
   46378:	8993      	ldrh	r3, [r2, #12]
   4637a:	b2cd      	uxtb	r5, r1
   4637c:	f023 0320 	bic.w	r3, r3, #32
   46380:	8193      	strh	r3, [r2, #12]
   46382:	6b63      	ldr	r3, [r4, #52]	; 0x34
   46384:	6852      	ldr	r2, [r2, #4]
   46386:	b18b      	cbz	r3, 463ac <_sungetc_r+0x44>
   46388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4638a:	4293      	cmp	r3, r2
   4638c:	dd08      	ble.n	463a0 <_sungetc_r+0x38>
   4638e:	6823      	ldr	r3, [r4, #0]
   46390:	1e5a      	subs	r2, r3, #1
   46392:	6022      	str	r2, [r4, #0]
   46394:	f803 5c01 	strb.w	r5, [r3, #-1]
   46398:	6863      	ldr	r3, [r4, #4]
   4639a:	3301      	adds	r3, #1
   4639c:	6063      	str	r3, [r4, #4]
   4639e:	e7e9      	b.n	46374 <_sungetc_r+0xc>
   463a0:	4621      	mov	r1, r4
   463a2:	f000 f896 	bl	464d2 <__submore>
   463a6:	2800      	cmp	r0, #0
   463a8:	d0f1      	beq.n	4638e <_sungetc_r+0x26>
   463aa:	e7e1      	b.n	46370 <_sungetc_r+0x8>
   463ac:	6921      	ldr	r1, [r4, #16]
   463ae:	6823      	ldr	r3, [r4, #0]
   463b0:	b151      	cbz	r1, 463c8 <_sungetc_r+0x60>
   463b2:	4299      	cmp	r1, r3
   463b4:	d208      	bcs.n	463c8 <_sungetc_r+0x60>
   463b6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   463ba:	42a9      	cmp	r1, r5
   463bc:	d104      	bne.n	463c8 <_sungetc_r+0x60>
   463be:	3b01      	subs	r3, #1
   463c0:	3201      	adds	r2, #1
   463c2:	6023      	str	r3, [r4, #0]
   463c4:	6062      	str	r2, [r4, #4]
   463c6:	e7d5      	b.n	46374 <_sungetc_r+0xc>
   463c8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   463cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   463d0:	6363      	str	r3, [r4, #52]	; 0x34
   463d2:	2303      	movs	r3, #3
   463d4:	63a3      	str	r3, [r4, #56]	; 0x38
   463d6:	4623      	mov	r3, r4
   463d8:	f803 5f46 	strb.w	r5, [r3, #70]!
   463dc:	6023      	str	r3, [r4, #0]
   463de:	2301      	movs	r3, #1
   463e0:	e7dc      	b.n	4639c <_sungetc_r+0x34>

000463e2 <__ssrefill_r>:
   463e2:	b510      	push	{r4, lr}
   463e4:	460c      	mov	r4, r1
   463e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   463e8:	b169      	cbz	r1, 46406 <__ssrefill_r+0x24>
   463ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
   463ee:	4299      	cmp	r1, r3
   463f0:	d001      	beq.n	463f6 <__ssrefill_r+0x14>
   463f2:	f7f9 f9a5 	bl	3f740 <_free_r>
   463f6:	2000      	movs	r0, #0
   463f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   463fa:	6360      	str	r0, [r4, #52]	; 0x34
   463fc:	6063      	str	r3, [r4, #4]
   463fe:	b113      	cbz	r3, 46406 <__ssrefill_r+0x24>
   46400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   46402:	6023      	str	r3, [r4, #0]
   46404:	bd10      	pop	{r4, pc}
   46406:	6923      	ldr	r3, [r4, #16]
   46408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4640c:	6023      	str	r3, [r4, #0]
   4640e:	2300      	movs	r3, #0
   46410:	6063      	str	r3, [r4, #4]
   46412:	89a3      	ldrh	r3, [r4, #12]
   46414:	f043 0320 	orr.w	r3, r3, #32
   46418:	81a3      	strh	r3, [r4, #12]
   4641a:	e7f3      	b.n	46404 <__ssrefill_r+0x22>

0004641c <__sccl>:
   4641c:	b570      	push	{r4, r5, r6, lr}
   4641e:	780b      	ldrb	r3, [r1, #0]
   46420:	1e44      	subs	r4, r0, #1
   46422:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   46426:	2b5e      	cmp	r3, #94	; 0x5e
   46428:	bf13      	iteet	ne
   4642a:	1c4a      	addne	r2, r1, #1
   4642c:	1c8a      	addeq	r2, r1, #2
   4642e:	784b      	ldrbeq	r3, [r1, #1]
   46430:	2100      	movne	r1, #0
   46432:	bf08      	it	eq
   46434:	2101      	moveq	r1, #1
   46436:	f804 1f01 	strb.w	r1, [r4, #1]!
   4643a:	42ac      	cmp	r4, r5
   4643c:	d1fb      	bne.n	46436 <__sccl+0x1a>
   4643e:	b913      	cbnz	r3, 46446 <__sccl+0x2a>
   46440:	3a01      	subs	r2, #1
   46442:	4610      	mov	r0, r2
   46444:	bd70      	pop	{r4, r5, r6, pc}
   46446:	f081 0401 	eor.w	r4, r1, #1
   4644a:	1c51      	adds	r1, r2, #1
   4644c:	54c4      	strb	r4, [r0, r3]
   4644e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   46452:	1e4e      	subs	r6, r1, #1
   46454:	460a      	mov	r2, r1
   46456:	2d2d      	cmp	r5, #45	; 0x2d
   46458:	d006      	beq.n	46468 <__sccl+0x4c>
   4645a:	2d5d      	cmp	r5, #93	; 0x5d
   4645c:	d0f1      	beq.n	46442 <__sccl+0x26>
   4645e:	b90d      	cbnz	r5, 46464 <__sccl+0x48>
   46460:	4632      	mov	r2, r6
   46462:	e7ee      	b.n	46442 <__sccl+0x26>
   46464:	462b      	mov	r3, r5
   46466:	e7f0      	b.n	4644a <__sccl+0x2e>
   46468:	780e      	ldrb	r6, [r1, #0]
   4646a:	2e5d      	cmp	r6, #93	; 0x5d
   4646c:	d0fa      	beq.n	46464 <__sccl+0x48>
   4646e:	42b3      	cmp	r3, r6
   46470:	dcf8      	bgt.n	46464 <__sccl+0x48>
   46472:	3301      	adds	r3, #1
   46474:	429e      	cmp	r6, r3
   46476:	54c4      	strb	r4, [r0, r3]
   46478:	dcfb      	bgt.n	46472 <__sccl+0x56>
   4647a:	3102      	adds	r1, #2
   4647c:	e7e7      	b.n	4644e <__sccl+0x32>

0004647e <_raise_r>:
   4647e:	291f      	cmp	r1, #31
   46480:	b538      	push	{r3, r4, r5, lr}
   46482:	4604      	mov	r4, r0
   46484:	460d      	mov	r5, r1
   46486:	d904      	bls.n	46492 <_raise_r+0x14>
   46488:	2316      	movs	r3, #22
   4648a:	6003      	str	r3, [r0, #0]
   4648c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   46490:	bd38      	pop	{r3, r4, r5, pc}
   46492:	6c42      	ldr	r2, [r0, #68]	; 0x44
   46494:	b112      	cbz	r2, 4649c <_raise_r+0x1e>
   46496:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   4649a:	b94b      	cbnz	r3, 464b0 <_raise_r+0x32>
   4649c:	4620      	mov	r0, r4
   4649e:	f000 f816 	bl	464ce <_getpid_r>
   464a2:	462a      	mov	r2, r5
   464a4:	4601      	mov	r1, r0
   464a6:	4620      	mov	r0, r4
   464a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   464ac:	f7fb b9ac 	b.w	41808 <_kill_r>
   464b0:	2b01      	cmp	r3, #1
   464b2:	d00a      	beq.n	464ca <_raise_r+0x4c>
   464b4:	1c59      	adds	r1, r3, #1
   464b6:	d103      	bne.n	464c0 <_raise_r+0x42>
   464b8:	2316      	movs	r3, #22
   464ba:	6003      	str	r3, [r0, #0]
   464bc:	2001      	movs	r0, #1
   464be:	e7e7      	b.n	46490 <_raise_r+0x12>
   464c0:	2400      	movs	r4, #0
   464c2:	4628      	mov	r0, r5
   464c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   464c8:	4798      	blx	r3
   464ca:	2000      	movs	r0, #0
   464cc:	e7e0      	b.n	46490 <_raise_r+0x12>

000464ce <_getpid_r>:
   464ce:	f7fc bc1d 	b.w	42d0c <_getpid>

000464d2 <__submore>:
   464d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   464d6:	460c      	mov	r4, r1
   464d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
   464da:	f104 0344 	add.w	r3, r4, #68	; 0x44
   464de:	4299      	cmp	r1, r3
   464e0:	d11a      	bne.n	46518 <__submore+0x46>
   464e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   464e6:	f7f9 f979 	bl	3f7dc <_malloc_r>
   464ea:	b918      	cbnz	r0, 464f4 <__submore+0x22>
   464ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   464f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   464f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   464f8:	6360      	str	r0, [r4, #52]	; 0x34
   464fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   464fe:	63a3      	str	r3, [r4, #56]	; 0x38
   46500:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   46504:	7083      	strb	r3, [r0, #2]
   46506:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   4650a:	7043      	strb	r3, [r0, #1]
   4650c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   46510:	7003      	strb	r3, [r0, #0]
   46512:	6020      	str	r0, [r4, #0]
   46514:	2000      	movs	r0, #0
   46516:	e7eb      	b.n	464f0 <__submore+0x1e>
   46518:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   4651a:	0077      	lsls	r7, r6, #1
   4651c:	463a      	mov	r2, r7
   4651e:	f7ff fea2 	bl	46266 <_realloc_r>
   46522:	4605      	mov	r5, r0
   46524:	2800      	cmp	r0, #0
   46526:	d0e1      	beq.n	464ec <__submore+0x1a>
   46528:	eb00 0806 	add.w	r8, r0, r6
   4652c:	4601      	mov	r1, r0
   4652e:	4632      	mov	r2, r6
   46530:	4640      	mov	r0, r8
   46532:	f7fe fe79 	bl	45228 <memcpy>
   46536:	f8c4 8000 	str.w	r8, [r4]
   4653a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   4653e:	e7e9      	b.n	46514 <__submore+0x42>

00046540 <__ascii_wctomb>:
   46540:	b149      	cbz	r1, 46556 <__ascii_wctomb+0x16>
   46542:	2aff      	cmp	r2, #255	; 0xff
   46544:	bf8d      	iteet	hi
   46546:	238a      	movhi	r3, #138	; 0x8a
   46548:	700a      	strbls	r2, [r1, #0]
   4654a:	2001      	movls	r0, #1
   4654c:	6003      	strhi	r3, [r0, #0]
   4654e:	bf88      	it	hi
   46550:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   46554:	4770      	bx	lr
   46556:	4608      	mov	r0, r1
   46558:	4770      	bx	lr

0004655a <_malloc_usable_size_r>:
   4655a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   4655e:	1f18      	subs	r0, r3, #4
   46560:	2b00      	cmp	r3, #0
   46562:	bfbc      	itt	lt
   46564:	580b      	ldrlt	r3, [r1, r0]
   46566:	18c0      	addlt	r0, r0, r3
   46568:	4770      	bx	lr
