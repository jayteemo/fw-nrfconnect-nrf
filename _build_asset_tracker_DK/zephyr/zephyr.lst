
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	20031d40 	.word	0x20031d40
   1c204:	00027a29 	.word	0x00027a29
   1c208:	00045955 	.word	0x00045955
   1c20c:	00027a59 	.word	0x00027a59
   1c210:	00027a59 	.word	0x00027a59
   1c214:	00027a59 	.word	0x00027a59
   1c218:	00027a59 	.word	0x00027a59
   1c21c:	00027a59 	.word	0x00027a59
	...
   1c22c:	000276bd 	.word	0x000276bd
   1c230:	00027a59 	.word	0x00027a59
   1c234:	00000000 	.word	0x00000000
   1c238:	0002760d 	.word	0x0002760d
   1c23c:	00027051 	.word	0x00027051

0001c240 <_irq_vector_table>:
   1c240:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c250:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c260:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c270:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c280:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c290:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c2a0:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c2b0:	0002b381 00046f77 000279e9 000279e9     ....wo...y...y..
   1c2c0:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c2d0:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c2e0:	000279e9 000279e9 00046f95 000279e9     .y...y...o...y..
   1c2f0:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c300:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c310:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c320:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c330:	000279e9 000279e9 000279e9 000279e9     .y...y...y...y..
   1c340:	000279e9                                .y..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	00037894 00000001 0001c200 0001c200     .x..............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c57e:	f1a4 0401 	sub.w	r4, r4, #1
   1c582:	d1e9      	bne.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_d2f>:
   1cd7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cd84:	bf24      	itt	cs
   1cd86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cd8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cd8e:	d90d      	bls.n	1cdac <__aeabi_d2f+0x30>
   1cd90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cd94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cd98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cd9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cda0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cda4:	bf08      	it	eq
   1cda6:	f020 0001 	biceq.w	r0, r0, #1
   1cdaa:	4770      	bx	lr
   1cdac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cdb0:	d121      	bne.n	1cdf6 <__aeabi_d2f+0x7a>
   1cdb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cdb6:	bfbc      	itt	lt
   1cdb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cdbc:	4770      	bxlt	lr
   1cdbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdc6:	f1c2 0218 	rsb	r2, r2, #24
   1cdca:	f1c2 0c20 	rsb	ip, r2, #32
   1cdce:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdd2:	fa20 f002 	lsr.w	r0, r0, r2
   1cdd6:	bf18      	it	ne
   1cdd8:	f040 0001 	orrne.w	r0, r0, #1
   1cddc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cde0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cde4:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cde8:	ea40 000c 	orr.w	r0, r0, ip
   1cdec:	fa23 f302 	lsr.w	r3, r3, r2
   1cdf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cdf4:	e7cc      	b.n	1cd90 <__aeabi_d2f+0x14>
   1cdf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cdfa:	d107      	bne.n	1ce0c <__aeabi_d2f+0x90>
   1cdfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce00:	bf1e      	ittt	ne
   1ce02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce0a:	4770      	bxne	lr
   1ce0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce18:	4770      	bx	lr
   1ce1a:	bf00      	nop

0001ce1c <__aeabi_ldivmod>:
   1ce1c:	b97b      	cbnz	r3, 1ce3e <__aeabi_ldivmod+0x22>
   1ce1e:	b972      	cbnz	r2, 1ce3e <__aeabi_ldivmod+0x22>
   1ce20:	2900      	cmp	r1, #0
   1ce22:	bfbe      	ittt	lt
   1ce24:	2000      	movlt	r0, #0
   1ce26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce2a:	e006      	blt.n	1ce3a <__aeabi_ldivmod+0x1e>
   1ce2c:	bf08      	it	eq
   1ce2e:	2800      	cmpeq	r0, #0
   1ce30:	bf1c      	itt	ne
   1ce32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce36:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ce3a:	f000 b9bb 	b.w	1d1b4 <__aeabi_idiv0>
   1ce3e:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce46:	2900      	cmp	r1, #0
   1ce48:	db09      	blt.n	1ce5e <__aeabi_ldivmod+0x42>
   1ce4a:	2b00      	cmp	r3, #0
   1ce4c:	db1a      	blt.n	1ce84 <__aeabi_ldivmod+0x68>
   1ce4e:	f000 f84d 	bl	1ceec <__udivmoddi4>
   1ce52:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce5a:	b004      	add	sp, #16
   1ce5c:	4770      	bx	lr
   1ce5e:	4240      	negs	r0, r0
   1ce60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	db1b      	blt.n	1cea0 <__aeabi_ldivmod+0x84>
   1ce68:	f000 f840 	bl	1ceec <__udivmoddi4>
   1ce6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce74:	b004      	add	sp, #16
   1ce76:	4240      	negs	r0, r0
   1ce78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce7c:	4252      	negs	r2, r2
   1ce7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce82:	4770      	bx	lr
   1ce84:	4252      	negs	r2, r2
   1ce86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce8a:	f000 f82f 	bl	1ceec <__udivmoddi4>
   1ce8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce96:	b004      	add	sp, #16
   1ce98:	4240      	negs	r0, r0
   1ce9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce9e:	4770      	bx	lr
   1cea0:	4252      	negs	r2, r2
   1cea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cea6:	f000 f821 	bl	1ceec <__udivmoddi4>
   1ceaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ceb2:	b004      	add	sp, #16
   1ceb4:	4252      	negs	r2, r2
   1ceb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceba:	4770      	bx	lr

0001cebc <__aeabi_uldivmod>:
   1cebc:	b953      	cbnz	r3, 1ced4 <__aeabi_uldivmod+0x18>
   1cebe:	b94a      	cbnz	r2, 1ced4 <__aeabi_uldivmod+0x18>
   1cec0:	2900      	cmp	r1, #0
   1cec2:	bf08      	it	eq
   1cec4:	2800      	cmpeq	r0, #0
   1cec6:	bf1c      	itt	ne
   1cec8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cecc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1ced0:	f000 b970 	b.w	1d1b4 <__aeabi_idiv0>
   1ced4:	f1ad 0c08 	sub.w	ip, sp, #8
   1ced8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cedc:	f000 f806 	bl	1ceec <__udivmoddi4>
   1cee0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cee8:	b004      	add	sp, #16
   1ceea:	4770      	bx	lr

0001ceec <__udivmoddi4>:
   1ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cef0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cef2:	4604      	mov	r4, r0
   1cef4:	4689      	mov	r9, r1
   1cef6:	2b00      	cmp	r3, #0
   1cef8:	f040 8083 	bne.w	1d002 <__udivmoddi4+0x116>
   1cefc:	428a      	cmp	r2, r1
   1cefe:	4615      	mov	r5, r2
   1cf00:	d945      	bls.n	1cf8e <__udivmoddi4+0xa2>
   1cf02:	fab2 f282 	clz	r2, r2
   1cf06:	b14a      	cbz	r2, 1cf1c <__udivmoddi4+0x30>
   1cf08:	f1c2 0720 	rsb	r7, r2, #32
   1cf0c:	fa01 f302 	lsl.w	r3, r1, r2
   1cf10:	4095      	lsls	r5, r2
   1cf12:	4094      	lsls	r4, r2
   1cf14:	fa20 f707 	lsr.w	r7, r0, r7
   1cf18:	ea47 0903 	orr.w	r9, r7, r3
   1cf1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cf20:	0c23      	lsrs	r3, r4, #16
   1cf22:	fa1f f885 	uxth.w	r8, r5
   1cf26:	fbb9 fcfe 	udiv	ip, r9, lr
   1cf2a:	fb0e 991c 	mls	r9, lr, ip, r9
   1cf2e:	fb0c f108 	mul.w	r1, ip, r8
   1cf32:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   1cf36:	4299      	cmp	r1, r3
   1cf38:	d90a      	bls.n	1cf50 <__udivmoddi4+0x64>
   1cf3a:	18eb      	adds	r3, r5, r3
   1cf3c:	bf2c      	ite	cs
   1cf3e:	2001      	movcs	r0, #1
   1cf40:	2000      	movcc	r0, #0
   1cf42:	4299      	cmp	r1, r3
   1cf44:	d902      	bls.n	1cf4c <__udivmoddi4+0x60>
   1cf46:	2800      	cmp	r0, #0
   1cf48:	f000 811d 	beq.w	1d186 <__udivmoddi4+0x29a>
   1cf4c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1cf50:	1a59      	subs	r1, r3, r1
   1cf52:	b2a3      	uxth	r3, r4
   1cf54:	fbb1 f0fe 	udiv	r0, r1, lr
   1cf58:	fb0e 1110 	mls	r1, lr, r0, r1
   1cf5c:	fb00 f808 	mul.w	r8, r0, r8
   1cf60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cf64:	45a0      	cmp	r8, r4
   1cf66:	d905      	bls.n	1cf74 <__udivmoddi4+0x88>
   1cf68:	192c      	adds	r4, r5, r4
   1cf6a:	d202      	bcs.n	1cf72 <__udivmoddi4+0x86>
   1cf6c:	45a0      	cmp	r8, r4
   1cf6e:	f200 810e 	bhi.w	1d18e <__udivmoddi4+0x2a2>
   1cf72:	3801      	subs	r0, #1
   1cf74:	eba4 0408 	sub.w	r4, r4, r8
   1cf78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1cf7c:	2700      	movs	r7, #0
   1cf7e:	b11e      	cbz	r6, 1cf88 <__udivmoddi4+0x9c>
   1cf80:	40d4      	lsrs	r4, r2
   1cf82:	2300      	movs	r3, #0
   1cf84:	e9c6 4300 	strd	r4, r3, [r6]
   1cf88:	4639      	mov	r1, r7
   1cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf8e:	2a00      	cmp	r2, #0
   1cf90:	d051      	beq.n	1d036 <__udivmoddi4+0x14a>
   1cf92:	fab2 f282 	clz	r2, r2
   1cf96:	2a00      	cmp	r2, #0
   1cf98:	f040 80af 	bne.w	1d0fa <__udivmoddi4+0x20e>
   1cf9c:	1b49      	subs	r1, r1, r5
   1cf9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfa2:	fa1f f885 	uxth.w	r8, r5
   1cfa6:	2701      	movs	r7, #1
   1cfa8:	0c23      	lsrs	r3, r4, #16
   1cfaa:	fbb1 fcfe 	udiv	ip, r1, lr
   1cfae:	fb0e 111c 	mls	r1, lr, ip, r1
   1cfb2:	fb08 f00c 	mul.w	r0, r8, ip
   1cfb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cfba:	4298      	cmp	r0, r3
   1cfbc:	d90a      	bls.n	1cfd4 <__udivmoddi4+0xe8>
   1cfbe:	18eb      	adds	r3, r5, r3
   1cfc0:	bf2c      	ite	cs
   1cfc2:	2101      	movcs	r1, #1
   1cfc4:	2100      	movcc	r1, #0
   1cfc6:	4298      	cmp	r0, r3
   1cfc8:	d902      	bls.n	1cfd0 <__udivmoddi4+0xe4>
   1cfca:	2900      	cmp	r1, #0
   1cfcc:	f000 80d7 	beq.w	1d17e <__udivmoddi4+0x292>
   1cfd0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1cfd4:	1a19      	subs	r1, r3, r0
   1cfd6:	b2a3      	uxth	r3, r4
   1cfd8:	fbb1 f0fe 	udiv	r0, r1, lr
   1cfdc:	fb0e 1110 	mls	r1, lr, r0, r1
   1cfe0:	fb08 f800 	mul.w	r8, r8, r0
   1cfe4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cfe8:	45a0      	cmp	r8, r4
   1cfea:	d905      	bls.n	1cff8 <__udivmoddi4+0x10c>
   1cfec:	192c      	adds	r4, r5, r4
   1cfee:	d202      	bcs.n	1cff6 <__udivmoddi4+0x10a>
   1cff0:	45a0      	cmp	r8, r4
   1cff2:	f200 80c1 	bhi.w	1d178 <__udivmoddi4+0x28c>
   1cff6:	3801      	subs	r0, #1
   1cff8:	eba4 0408 	sub.w	r4, r4, r8
   1cffc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d000:	e7bd      	b.n	1cf7e <__udivmoddi4+0x92>
   1d002:	428b      	cmp	r3, r1
   1d004:	d908      	bls.n	1d018 <__udivmoddi4+0x12c>
   1d006:	2e00      	cmp	r6, #0
   1d008:	d074      	beq.n	1d0f4 <__udivmoddi4+0x208>
   1d00a:	2700      	movs	r7, #0
   1d00c:	e9c6 0100 	strd	r0, r1, [r6]
   1d010:	4638      	mov	r0, r7
   1d012:	4639      	mov	r1, r7
   1d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d018:	fab3 f783 	clz	r7, r3
   1d01c:	b967      	cbnz	r7, 1d038 <__udivmoddi4+0x14c>
   1d01e:	428b      	cmp	r3, r1
   1d020:	f0c0 80a4 	bcc.w	1d16c <__udivmoddi4+0x280>
   1d024:	4282      	cmp	r2, r0
   1d026:	f240 80a1 	bls.w	1d16c <__udivmoddi4+0x280>
   1d02a:	4638      	mov	r0, r7
   1d02c:	2e00      	cmp	r6, #0
   1d02e:	d0ab      	beq.n	1cf88 <__udivmoddi4+0x9c>
   1d030:	e9c6 4900 	strd	r4, r9, [r6]
   1d034:	e7a8      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d036:	deff      	udf	#255	; 0xff
   1d038:	f1c7 0520 	rsb	r5, r7, #32
   1d03c:	40bb      	lsls	r3, r7
   1d03e:	fa02 fc07 	lsl.w	ip, r2, r7
   1d042:	fa01 f407 	lsl.w	r4, r1, r7
   1d046:	40ea      	lsrs	r2, r5
   1d048:	fa20 f805 	lsr.w	r8, r0, r5
   1d04c:	40e9      	lsrs	r1, r5
   1d04e:	fa00 fe07 	lsl.w	lr, r0, r7
   1d052:	431a      	orrs	r2, r3
   1d054:	ea48 0404 	orr.w	r4, r8, r4
   1d058:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1d05c:	0c20      	lsrs	r0, r4, #16
   1d05e:	fa1f f982 	uxth.w	r9, r2
   1d062:	fbb1 faf8 	udiv	sl, r1, r8
   1d066:	fb08 111a 	mls	r1, r8, sl, r1
   1d06a:	fb0a fb09 	mul.w	fp, sl, r9
   1d06e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   1d072:	458b      	cmp	fp, r1
   1d074:	d90a      	bls.n	1d08c <__udivmoddi4+0x1a0>
   1d076:	1851      	adds	r1, r2, r1
   1d078:	bf2c      	ite	cs
   1d07a:	2301      	movcs	r3, #1
   1d07c:	2300      	movcc	r3, #0
   1d07e:	458b      	cmp	fp, r1
   1d080:	d902      	bls.n	1d088 <__udivmoddi4+0x19c>
   1d082:	2b00      	cmp	r3, #0
   1d084:	f000 8088 	beq.w	1d198 <__udivmoddi4+0x2ac>
   1d088:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1d08c:	eba1 010b 	sub.w	r1, r1, fp
   1d090:	b2a4      	uxth	r4, r4
   1d092:	fbb1 f0f8 	udiv	r0, r1, r8
   1d096:	fb08 1110 	mls	r1, r8, r0, r1
   1d09a:	fb00 f909 	mul.w	r9, r0, r9
   1d09e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   1d0a2:	4589      	cmp	r9, r1
   1d0a4:	d904      	bls.n	1d0b0 <__udivmoddi4+0x1c4>
   1d0a6:	1851      	adds	r1, r2, r1
   1d0a8:	d201      	bcs.n	1d0ae <__udivmoddi4+0x1c2>
   1d0aa:	4589      	cmp	r9, r1
   1d0ac:	d87b      	bhi.n	1d1a6 <__udivmoddi4+0x2ba>
   1d0ae:	3801      	subs	r0, #1
   1d0b0:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1d0b4:	eba1 0109 	sub.w	r1, r1, r9
   1d0b8:	fba0 890c 	umull	r8, r9, r0, ip
   1d0bc:	4549      	cmp	r1, r9
   1d0be:	4644      	mov	r4, r8
   1d0c0:	464b      	mov	r3, r9
   1d0c2:	d302      	bcc.n	1d0ca <__udivmoddi4+0x1de>
   1d0c4:	d106      	bne.n	1d0d4 <__udivmoddi4+0x1e8>
   1d0c6:	45c6      	cmp	lr, r8
   1d0c8:	d204      	bcs.n	1d0d4 <__udivmoddi4+0x1e8>
   1d0ca:	3801      	subs	r0, #1
   1d0cc:	ebb8 040c 	subs.w	r4, r8, ip
   1d0d0:	eb69 0302 	sbc.w	r3, r9, r2
   1d0d4:	2e00      	cmp	r6, #0
   1d0d6:	d05d      	beq.n	1d194 <__udivmoddi4+0x2a8>
   1d0d8:	ebbe 0204 	subs.w	r2, lr, r4
   1d0dc:	eb61 0103 	sbc.w	r1, r1, r3
   1d0e0:	fa01 f505 	lsl.w	r5, r1, r5
   1d0e4:	fa22 f307 	lsr.w	r3, r2, r7
   1d0e8:	40f9      	lsrs	r1, r7
   1d0ea:	2700      	movs	r7, #0
   1d0ec:	431d      	orrs	r5, r3
   1d0ee:	e9c6 5100 	strd	r5, r1, [r6]
   1d0f2:	e749      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d0f4:	4637      	mov	r7, r6
   1d0f6:	4630      	mov	r0, r6
   1d0f8:	e746      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d0fa:	f1c2 0020 	rsb	r0, r2, #32
   1d0fe:	4095      	lsls	r5, r2
   1d100:	fa01 f702 	lsl.w	r7, r1, r2
   1d104:	fa21 f300 	lsr.w	r3, r1, r0
   1d108:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d10c:	fa24 f100 	lsr.w	r1, r4, r0
   1d110:	fa1f f885 	uxth.w	r8, r5
   1d114:	4094      	lsls	r4, r2
   1d116:	4339      	orrs	r1, r7
   1d118:	fbb3 f0fe 	udiv	r0, r3, lr
   1d11c:	0c0f      	lsrs	r7, r1, #16
   1d11e:	fb0e 3310 	mls	r3, lr, r0, r3
   1d122:	fb00 fc08 	mul.w	ip, r0, r8
   1d126:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
   1d12a:	459c      	cmp	ip, r3
   1d12c:	d907      	bls.n	1d13e <__udivmoddi4+0x252>
   1d12e:	18eb      	adds	r3, r5, r3
   1d130:	bf2c      	ite	cs
   1d132:	2701      	movcs	r7, #1
   1d134:	2700      	movcc	r7, #0
   1d136:	459c      	cmp	ip, r3
   1d138:	d900      	bls.n	1d13c <__udivmoddi4+0x250>
   1d13a:	b38f      	cbz	r7, 1d1a0 <__udivmoddi4+0x2b4>
   1d13c:	3801      	subs	r0, #1
   1d13e:	eba3 030c 	sub.w	r3, r3, ip
   1d142:	b289      	uxth	r1, r1
   1d144:	fbb3 f7fe 	udiv	r7, r3, lr
   1d148:	fb0e 3317 	mls	r3, lr, r7, r3
   1d14c:	fb07 fc08 	mul.w	ip, r7, r8
   1d150:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d154:	458c      	cmp	ip, r1
   1d156:	d904      	bls.n	1d162 <__udivmoddi4+0x276>
   1d158:	1869      	adds	r1, r5, r1
   1d15a:	d201      	bcs.n	1d160 <__udivmoddi4+0x274>
   1d15c:	458c      	cmp	ip, r1
   1d15e:	d825      	bhi.n	1d1ac <__udivmoddi4+0x2c0>
   1d160:	3f01      	subs	r7, #1
   1d162:	eba1 010c 	sub.w	r1, r1, ip
   1d166:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   1d16a:	e71d      	b.n	1cfa8 <__udivmoddi4+0xbc>
   1d16c:	1a84      	subs	r4, r0, r2
   1d16e:	eb61 0303 	sbc.w	r3, r1, r3
   1d172:	2001      	movs	r0, #1
   1d174:	4699      	mov	r9, r3
   1d176:	e759      	b.n	1d02c <__udivmoddi4+0x140>
   1d178:	3802      	subs	r0, #2
   1d17a:	442c      	add	r4, r5
   1d17c:	e73c      	b.n	1cff8 <__udivmoddi4+0x10c>
   1d17e:	f1ac 0c02 	sub.w	ip, ip, #2
   1d182:	442b      	add	r3, r5
   1d184:	e726      	b.n	1cfd4 <__udivmoddi4+0xe8>
   1d186:	f1ac 0c02 	sub.w	ip, ip, #2
   1d18a:	442b      	add	r3, r5
   1d18c:	e6e0      	b.n	1cf50 <__udivmoddi4+0x64>
   1d18e:	3802      	subs	r0, #2
   1d190:	442c      	add	r4, r5
   1d192:	e6ef      	b.n	1cf74 <__udivmoddi4+0x88>
   1d194:	4637      	mov	r7, r6
   1d196:	e6f7      	b.n	1cf88 <__udivmoddi4+0x9c>
   1d198:	f1aa 0a02 	sub.w	sl, sl, #2
   1d19c:	4411      	add	r1, r2
   1d19e:	e775      	b.n	1d08c <__udivmoddi4+0x1a0>
   1d1a0:	3802      	subs	r0, #2
   1d1a2:	442b      	add	r3, r5
   1d1a4:	e7cb      	b.n	1d13e <__udivmoddi4+0x252>
   1d1a6:	3802      	subs	r0, #2
   1d1a8:	4411      	add	r1, r2
   1d1aa:	e781      	b.n	1d0b0 <__udivmoddi4+0x1c4>
   1d1ac:	3f02      	subs	r7, #2
   1d1ae:	4429      	add	r1, r5
   1d1b0:	e7d7      	b.n	1d162 <__udivmoddi4+0x276>
   1d1b2:	bf00      	nop

0001d1b4 <__aeabi_idiv0>:
   1d1b4:	4770      	bx	lr
   1d1b6:	bf00      	nop

0001d1b8 <__aeabi_dcmpun>:
   1d1b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d1bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1c0:	d102      	bne.n	1d1c8 <__aeabi_dcmpun+0x10>
   1d1c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d1c6:	d10a      	bne.n	1d1de <__aeabi_dcmpun+0x26>
   1d1c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d1cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d1d0:	d102      	bne.n	1d1d8 <__aeabi_dcmpun+0x20>
   1d1d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d1d6:	d102      	bne.n	1d1de <__aeabi_dcmpun+0x26>
   1d1d8:	f04f 0000 	mov.w	r0, #0
   1d1dc:	4770      	bx	lr
   1d1de:	f04f 0001 	mov.w	r0, #1
   1d1e2:	4770      	bx	lr

0001d1e4 <__aeabi_d2lz>:
   1d1e4:	b538      	push	{r3, r4, r5, lr}
   1d1e6:	2200      	movs	r2, #0
   1d1e8:	2300      	movs	r3, #0
   1d1ea:	4604      	mov	r4, r0
   1d1ec:	460d      	mov	r5, r1
   1d1ee:	f7ff fd55 	bl	1cc9c <__aeabi_dcmplt>
   1d1f2:	b928      	cbnz	r0, 1d200 <__aeabi_d2lz+0x1c>
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	4629      	mov	r1, r5
   1d1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d1fc:	f000 b80a 	b.w	1d214 <__aeabi_d2ulz>
   1d200:	4620      	mov	r0, r4
   1d202:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1d206:	f000 f805 	bl	1d214 <__aeabi_d2ulz>
   1d20a:	4240      	negs	r0, r0
   1d20c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1d210:	bd38      	pop	{r3, r4, r5, pc}
   1d212:	bf00      	nop

0001d214 <__aeabi_d2ulz>:
   1d214:	b5d0      	push	{r4, r6, r7, lr}
   1d216:	2200      	movs	r2, #0
   1d218:	4b0b      	ldr	r3, [pc, #44]	; (1d248 <__aeabi_d2ulz+0x34>)
   1d21a:	4606      	mov	r6, r0
   1d21c:	460f      	mov	r7, r1
   1d21e:	f7ff facb 	bl	1c7b8 <__aeabi_dmul>
   1d222:	f7ff fd8b 	bl	1cd3c <__aeabi_d2uiz>
   1d226:	4604      	mov	r4, r0
   1d228:	f7ff fa4c 	bl	1c6c4 <__aeabi_ui2d>
   1d22c:	2200      	movs	r2, #0
   1d22e:	4b07      	ldr	r3, [pc, #28]	; (1d24c <__aeabi_d2ulz+0x38>)
   1d230:	f7ff fac2 	bl	1c7b8 <__aeabi_dmul>
   1d234:	4602      	mov	r2, r0
   1d236:	460b      	mov	r3, r1
   1d238:	4630      	mov	r0, r6
   1d23a:	4639      	mov	r1, r7
   1d23c:	f7ff f904 	bl	1c448 <__aeabi_dsub>
   1d240:	f7ff fd7c 	bl	1cd3c <__aeabi_d2uiz>
   1d244:	4621      	mov	r1, r4
   1d246:	bdd0      	pop	{r4, r6, r7, pc}
   1d248:	3df00000 	.word	0x3df00000
   1d24c:	41f00000 	.word	0x41f00000

0001d250 <strcmp>:
   1d250:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d254:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d258:	2a01      	cmp	r2, #1
   1d25a:	bf28      	it	cs
   1d25c:	429a      	cmpcs	r2, r3
   1d25e:	d0f7      	beq.n	1d250 <strcmp>
   1d260:	1ad0      	subs	r0, r2, r3
   1d262:	4770      	bx	lr

0001d264 <strlen>:
   1d264:	4603      	mov	r3, r0
   1d266:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d26a:	2a00      	cmp	r2, #0
   1d26c:	d1fb      	bne.n	1d266 <strlen+0x2>
   1d26e:	1a18      	subs	r0, r3, r0
   1d270:	3801      	subs	r0, #1
   1d272:	4770      	bx	lr
   1d274:	0000      	movs	r0, r0
	...

0001d278 <send_agps_request>:
{
	error_handler(ERROR_CLOUD, err);
}

static void send_agps_request(struct k_work *work)
{
   1d278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d27c:	4b28      	ldr	r3, [pc, #160]	; (1d320 <send_agps_request+0xa8>)
	static int64_t last_request_timestamp;

/* Request A-GPS data no more often than every hour (time in milliseconds). */
#define AGPS_UPDATE_PERIOD (60 * 60 * 1000)

	if ((last_request_timestamp != 0) &&
   1d27e:	4d29      	ldr	r5, [pc, #164]	; (1d324 <send_agps_request+0xac>)
   1d280:	4c29      	ldr	r4, [pc, #164]	; (1d328 <send_agps_request+0xb0>)
   1d282:	46a8      	mov	r8, r5
   1d284:	1ae4      	subs	r4, r4, r3
   1d286:	e9d5 2300 	ldrd	r2, r3, [r5]
   1d28a:	4313      	orrs	r3, r2
   1d28c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   1d290:	d018      	beq.n	1d2c4 <send_agps_request+0x4c>
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   1d292:	f026 fe5d 	bl	43f50 <k_uptime_get>
   1d296:	e9d5 3200 	ldrd	r3, r2, [r5]
   1d29a:	1ac6      	subs	r6, r0, r3
   1d29c:	eb61 0702 	sbc.w	r7, r1, r2
	if ((last_request_timestamp != 0) &&
   1d2a0:	a31d      	add	r3, pc, #116	; (adr r3, 1d318 <send_agps_request+0xa0>)
   1d2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2a6:	42b2      	cmp	r2, r6
   1d2a8:	41bb      	sbcs	r3, r7
   1d2aa:	db0b      	blt.n	1d2c4 <send_agps_request+0x4c>
		LOG_WRN("A-GPS request was sent less than 1 hour ago");
   1d2ac:	f04f 0000 	mov.w	r0, #0
   1d2b0:	2302      	movs	r3, #2
   1d2b2:	491e      	ldr	r1, [pc, #120]	; (1d32c <send_agps_request+0xb4>)
   1d2b4:	f363 0007 	bfi	r0, r3, #0, #8
   1d2b8:	f364 108f 	bfi	r0, r4, #6, #10

	last_request_timestamp = k_uptime_get();

	LOG_INF("A-GPS request sent");
#endif /* defined(CONFIG_AGPS) */
}
   1d2bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("A-GPS request sent");
   1d2c0:	f027 ba31 	b.w	44726 <log_string_sync>
	LOG_INF("Sending A-GPS request");
   1d2c4:	2303      	movs	r3, #3
   1d2c6:	f04f 0000 	mov.w	r0, #0
   1d2ca:	f363 0007 	bfi	r0, r3, #0, #8
   1d2ce:	f364 108f 	bfi	r0, r4, #6, #10
   1d2d2:	4917      	ldr	r1, [pc, #92]	; (1d330 <send_agps_request+0xb8>)
   1d2d4:	f027 fa27 	bl	44726 <log_string_sync>
	err = gps_agps_request(agps_request, GPS_SOCKET_NOT_PROVIDED);
   1d2d8:	4a16      	ldr	r2, [pc, #88]	; (1d334 <send_agps_request+0xbc>)
   1d2da:	2300      	movs	r3, #0
   1d2dc:	ca07      	ldmia	r2, {r0, r1, r2}
   1d2de:	f00a f827 	bl	27330 <gps_agps_request>
	if (err) {
   1d2e2:	4602      	mov	r2, r0
   1d2e4:	b158      	cbz	r0, 1d2fe <send_agps_request+0x86>
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1d2e6:	2101      	movs	r1, #1
   1d2e8:	f04f 0000 	mov.w	r0, #0
   1d2ec:	f361 0007 	bfi	r0, r1, #0, #8
   1d2f0:	f364 108f 	bfi	r0, r4, #6, #10
   1d2f4:	4910      	ldr	r1, [pc, #64]	; (1d338 <send_agps_request+0xc0>)
}
   1d2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1d2fa:	f027 ba14 	b.w	44726 <log_string_sync>
	last_request_timestamp = k_uptime_get();
   1d2fe:	f026 fe27 	bl	43f50 <k_uptime_get>
	LOG_INF("A-GPS request sent");
   1d302:	2303      	movs	r3, #3
	last_request_timestamp = k_uptime_get();
   1d304:	e9c8 0100 	strd	r0, r1, [r8]
	LOG_INF("A-GPS request sent");
   1d308:	f04f 0000 	mov.w	r0, #0
   1d30c:	f363 0007 	bfi	r0, r3, #0, #8
   1d310:	f364 108f 	bfi	r0, r4, #6, #10
   1d314:	4909      	ldr	r1, [pc, #36]	; (1d33c <send_agps_request+0xc4>)
   1d316:	e7d1      	b.n	1d2bc <send_agps_request+0x44>
   1d318:	0036ee7f 	.word	0x0036ee7f
   1d31c:	00000000 	.word	0x00000000
   1d320:	00049788 	.word	0x00049788
   1d324:	20021038 	.word	0x20021038
   1d328:	00049798 	.word	0x00049798
   1d32c:	0004b566 	.word	0x0004b566
   1d330:	0004b592 	.word	0x0004b592
   1d334:	20024978 	.word	0x20024978
   1d338:	0004b5a8 	.word	0x0004b5a8
   1d33c:	0004b5d0 	.word	0x0004b5d0

0001d340 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d340:	b570      	push	{r4, r5, r6, lr}
   1d342:	b096      	sub	sp, #88	; 0x58
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d344:	f02a fe4b 	bl	47fde <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d348:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1d34c:	fba0 5604 	umull	r5, r6, r0, r4
   1d350:	fb04 6601 	mla	r6, r4, r1, r6
   1d354:	0bea      	lsrs	r2, r5, #15
		err = sensor_sample_fetch_chan(accel_dev,
   1d356:	4c52      	ldr	r4, [pc, #328]	; (1d4a0 <motion_work_q_handler+0x160>)
   1d358:	ea42 4246 	orr.w	r2, r2, r6, lsl #17
   1d35c:	0bf3      	lsrs	r3, r6, #15
	motion_data_t motion_data;

	motion_data.ts = k_uptime_get();
   1d35e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		err = sensor_sample_fetch_chan(accel_dev,
   1d362:	6820      	ldr	r0, [r4, #0]
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   1d364:	6883      	ldr	r3, [r0, #8]
   1d366:	2103      	movs	r1, #3
   1d368:	68db      	ldr	r3, [r3, #12]
   1d36a:	4798      	blx	r3
	if (err) {
   1d36c:	4601      	mov	r1, r0
   1d36e:	b178      	cbz	r0, 1d390 <motion_work_q_handler+0x50>
		LOG_ERR("sensor_sample_fetch failed");
   1d370:	2301      	movs	r3, #1
   1d372:	f04f 0000 	mov.w	r0, #0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1d376:	4a4b      	ldr	r2, [pc, #300]	; (1d4a4 <motion_work_q_handler+0x164>)
   1d378:	f363 0007 	bfi	r0, r3, #0, #8
   1d37c:	4b4a      	ldr	r3, [pc, #296]	; (1d4a8 <motion_work_q_handler+0x168>)
   1d37e:	494b      	ldr	r1, [pc, #300]	; (1d4ac <motion_work_q_handler+0x16c>)
   1d380:	1a9b      	subs	r3, r3, r2
   1d382:	08db      	lsrs	r3, r3, #3
   1d384:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("sensor_channel_get failed");
   1d388:	f027 f9cd 	bl	44726 <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d38c:	b016      	add	sp, #88	; 0x58
   1d38e:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d390:	aa06      	add	r2, sp, #24
   1d392:	6820      	ldr	r0, [r4, #0]
   1d394:	f026 fdf9 	bl	43f8a <sensor_channel_get>
	if (err) {
   1d398:	b160      	cbz	r0, 1d3b4 <motion_work_q_handler+0x74>
		LOG_ERR("sensor_channel_get failed");
   1d39a:	2301      	movs	r3, #1
   1d39c:	f04f 0000 	mov.w	r0, #0
   1d3a0:	4a40      	ldr	r2, [pc, #256]	; (1d4a4 <motion_work_q_handler+0x164>)
   1d3a2:	f363 0007 	bfi	r0, r3, #0, #8
   1d3a6:	4b40      	ldr	r3, [pc, #256]	; (1d4a8 <motion_work_q_handler+0x168>)
   1d3a8:	4941      	ldr	r1, [pc, #260]	; (1d4b0 <motion_work_q_handler+0x170>)
   1d3aa:	1a9b      	subs	r3, r3, r2
   1d3ac:	08db      	lsrs	r3, r3, #3
   1d3ae:	f363 108f 	bfi	r0, r3, #6, #10
   1d3b2:	e7e9      	b.n	1d388 <motion_work_q_handler+0x48>
	err = sensor_channel_get(accel_dev,
   1d3b4:	aa08      	add	r2, sp, #32
   1d3b6:	2101      	movs	r1, #1
   1d3b8:	6820      	ldr	r0, [r4, #0]
   1d3ba:	f026 fde6 	bl	43f8a <sensor_channel_get>
	if (err) {
   1d3be:	2800      	cmp	r0, #0
   1d3c0:	d1eb      	bne.n	1d39a <motion_work_q_handler+0x5a>
	err = sensor_channel_get(accel_dev,
   1d3c2:	aa0a      	add	r2, sp, #40	; 0x28
   1d3c4:	2102      	movs	r1, #2
   1d3c6:	6820      	ldr	r0, [r4, #0]
   1d3c8:	f026 fddf 	bl	43f8a <sensor_channel_get>
	if (err) {
   1d3cc:	2800      	cmp	r0, #0
   1d3ce:	d1e4      	bne.n	1d39a <motion_work_q_handler+0x5a>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d3d0:	9807      	ldr	r0, [sp, #28]
   1d3d2:	f7ff f987 	bl	1c6e4 <__aeabi_i2d>
   1d3d6:	a330      	add	r3, pc, #192	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3dc:	f7ff fb16 	bl	1ca0c <__aeabi_ddiv>
   1d3e0:	4604      	mov	r4, r0
   1d3e2:	9806      	ldr	r0, [sp, #24]
   1d3e4:	460d      	mov	r5, r1
   1d3e6:	f7ff f97d 	bl	1c6e4 <__aeabi_i2d>
   1d3ea:	4602      	mov	r2, r0
   1d3ec:	460b      	mov	r3, r1
   1d3ee:	4620      	mov	r0, r4
   1d3f0:	4629      	mov	r1, r5
   1d3f2:	f7ff f82b 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d3f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d3fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d3fc:	f7ff f972 	bl	1c6e4 <__aeabi_i2d>
   1d400:	a325      	add	r3, pc, #148	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d402:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d406:	f7ff fb01 	bl	1ca0c <__aeabi_ddiv>
   1d40a:	4604      	mov	r4, r0
   1d40c:	9808      	ldr	r0, [sp, #32]
   1d40e:	460d      	mov	r5, r1
   1d410:	f7ff f968 	bl	1c6e4 <__aeabi_i2d>
   1d414:	4602      	mov	r2, r0
   1d416:	460b      	mov	r3, r1
   1d418:	4620      	mov	r0, r4
   1d41a:	4629      	mov	r1, r5
   1d41c:	f7ff f816 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d420:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1d424:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d426:	f7ff f95d 	bl	1c6e4 <__aeabi_i2d>
   1d42a:	a31b      	add	r3, pc, #108	; (adr r3, 1d498 <motion_work_q_handler+0x158>)
   1d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d430:	f7ff faec 	bl	1ca0c <__aeabi_ddiv>
   1d434:	4604      	mov	r4, r0
   1d436:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d438:	460d      	mov	r5, r1
   1d43a:	f7ff f953 	bl	1c6e4 <__aeabi_i2d>
   1d43e:	4602      	mov	r2, r0
   1d440:	460b      	mov	r3, r1
   1d442:	4620      	mov	r0, r4
   1d444:	4629      	mov	r1, r5
   1d446:	f7ff f801 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d44a:	2200      	movs	r2, #0
   1d44c:	4b19      	ldr	r3, [pc, #100]	; (1d4b4 <motion_work_q_handler+0x174>)
   1d44e:	4604      	mov	r4, r0
   1d450:	460d      	mov	r5, r1
   1d452:	f7ff fc37 	bl	1ccc4 <__aeabi_dcmpge>
   1d456:	b190      	cbz	r0, 1d47e <motion_work_q_handler+0x13e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d458:	2301      	movs	r3, #1
			handler(motion_data);
   1d45a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   1d45e:	466c      	mov	r4, sp
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d460:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			handler(motion_data);
   1d464:	4b14      	ldr	r3, [pc, #80]	; (1d4b8 <motion_work_q_handler+0x178>)
   1d466:	ad10      	add	r5, sp, #64	; 0x40
   1d468:	681e      	ldr	r6, [r3, #0]
   1d46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d46e:	e895 0003 	ldmia.w	r5, {r0, r1}
   1d472:	e884 0003 	stmia.w	r4, {r0, r1}
   1d476:	ab0c      	add	r3, sp, #48	; 0x30
   1d478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d47a:	47b0      	blx	r6
}
   1d47c:	e786      	b.n	1d38c <motion_work_q_handler+0x4c>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d47e:	2200      	movs	r2, #0
   1d480:	4b0e      	ldr	r3, [pc, #56]	; (1d4bc <motion_work_q_handler+0x17c>)
   1d482:	4620      	mov	r0, r4
   1d484:	4629      	mov	r1, r5
   1d486:	f7ff fc13 	bl	1ccb0 <__aeabi_dcmple>
   1d48a:	b108      	cbz	r0, 1d490 <motion_work_q_handler+0x150>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d48c:	2302      	movs	r3, #2
   1d48e:	e7e4      	b.n	1d45a <motion_work_q_handler+0x11a>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d490:	2303      	movs	r3, #3
   1d492:	e7e2      	b.n	1d45a <motion_work_q_handler+0x11a>
   1d494:	f3af 8000 	nop.w
   1d498:	00000000 	.word	0x00000000
   1d49c:	412e8480 	.word	0x412e8480
   1d4a0:	200249e0 	.word	0x200249e0
   1d4a4:	00049788 	.word	0x00049788
   1d4a8:	00049858 	.word	0x00049858
   1d4ac:	0004b805 	.word	0x0004b805
   1d4b0:	0004b820 	.word	0x0004b820
   1d4b4:	40140000 	.word	0x40140000
   1d4b8:	200249e4 	.word	0x200249e4
   1d4bc:	c0140000 	.word	0xc0140000

0001d4c0 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4c4:	b08d      	sub	sp, #52	; 0x34
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d4c6:	4b6a      	ldr	r3, [pc, #424]	; (1d670 <env_sensors_poll_fn+0x1b0>)
{
   1d4c8:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d4ca:	681a      	ldr	r2, [r3, #0]
{
   1d4cc:	f8c7 d008 	str.w	sp, [r7, #8]
	if (data_send_interval_s == 0) {
   1d4d0:	603b      	str	r3, [r7, #0]
   1d4d2:	2a00      	cmp	r2, #0
   1d4d4:	d05c      	beq.n	1d590 <env_sensors_poll_fn+0xd0>
   1d4d6:	4b67      	ldr	r3, [pc, #412]	; (1d674 <env_sensors_poll_fn+0x1b4>)
	for (int i = 0; i < num_sensors; i++) {
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d4d8:	4a67      	ldr	r2, [pc, #412]	; (1d678 <env_sensors_poll_fn+0x1b8>)
   1d4da:	4c68      	ldr	r4, [pc, #416]	; (1d67c <env_sensors_poll_fn+0x1bc>)
   1d4dc:	1a9b      	subs	r3, r3, r2
   1d4de:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   1d4e2:	613b      	str	r3, [r7, #16]
   1d4e4:	2303      	movs	r3, #3
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d4e6:	4e66      	ldr	r6, [pc, #408]	; (1d680 <env_sensors_poll_fn+0x1c0>)
   1d4e8:	f107 0518 	add.w	r5, r7, #24
   1d4ec:	60fb      	str	r3, [r7, #12]
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d4ee:	f854 3b04 	ldr.w	r3, [r4], #4
   1d4f2:	6a18      	ldr	r0, [r3, #32]
   1d4f4:	8b19      	ldrh	r1, [r3, #24]
	return api->sample_fetch(dev, type);
   1d4f6:	6883      	ldr	r3, [r0, #8]
   1d4f8:	68db      	ldr	r3, [r3, #12]
   1d4fa:	4798      	blx	r3
			if (err) {
   1d4fc:	4680      	mov	r8, r0
   1d4fe:	b1b0      	cbz	r0, 1d52e <env_sensors_poll_fn+0x6e>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d500:	8abb      	ldrh	r3, [r7, #20]
   1d502:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   1d506:	f042 0201 	orr.w	r2, r2, #1
   1d50a:	f362 0307 	bfi	r3, r2, #0, #8
   1d50e:	693a      	ldr	r2, [r7, #16]
   1d510:	b29b      	uxth	r3, r3
   1d512:	f362 138f 	bfi	r3, r2, #6, #10
   1d516:	82bb      	strh	r3, [r7, #20]
   1d518:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d51c:	69d8      	ldr	r0, [r3, #28]
   1d51e:	f027 f915 	bl	4474c <log_strdup>
   1d522:	4643      	mov	r3, r8
   1d524:	4602      	mov	r2, r0
   1d526:	4957      	ldr	r1, [pc, #348]	; (1d684 <env_sensors_poll_fn+0x1c4>)
   1d528:	8ab8      	ldrh	r0, [r7, #20]
   1d52a:	f027 f8fc 	bl	44726 <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d52e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d532:	6a18      	ldr	r0, [r3, #32]
   1d534:	8b19      	ldrh	r1, [r3, #24]
	return api->channel_get(dev, chan, val);
   1d536:	6883      	ldr	r3, [r0, #8]
   1d538:	462a      	mov	r2, r5
   1d53a:	691b      	ldr	r3, [r3, #16]
   1d53c:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d53e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d542:	4681      	mov	r9, r0
   1d544:	b340      	cbz	r0, 1d598 <env_sensors_poll_fn+0xd8>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d546:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   1d54a:	f042 0201 	orr.w	r2, r2, #1
   1d54e:	f362 0a07 	bfi	sl, r2, #0, #8
   1d552:	693a      	ldr	r2, [r7, #16]
   1d554:	69d8      	ldr	r0, [r3, #28]
   1d556:	f362 1a8f 	bfi	sl, r2, #6, #10
   1d55a:	f027 f8f7 	bl	4474c <log_strdup>
   1d55e:	464b      	mov	r3, r9
   1d560:	4602      	mov	r2, r0
   1d562:	4948      	ldr	r1, [pc, #288]	; (1d684 <env_sensors_poll_fn+0x1c4>)
   1d564:	4650      	mov	r0, sl
   1d566:	f027 f8de 	bl	44726 <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d56a:	68fb      	ldr	r3, [r7, #12]
   1d56c:	3508      	adds	r5, #8
   1d56e:	3b01      	subs	r3, #1
   1d570:	60fb      	str	r3, [r7, #12]
   1d572:	d1bc      	bne.n	1d4ee <env_sensors_poll_fn+0x2e>
			env_sensors[i]->sensor.ts = k_uptime_get();
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d574:	4b44      	ldr	r3, [pc, #272]	; (1d688 <env_sensors_poll_fn+0x1c8>)
   1d576:	681b      	ldr	r3, [r3, #0]
   1d578:	b103      	cbz	r3, 1d57c <env_sensors_poll_fn+0xbc>
		data_ready_cb();
   1d57a:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d57c:	4b43      	ldr	r3, [pc, #268]	; (1d68c <env_sensors_poll_fn+0x1cc>)
   1d57e:	781b      	ldrb	r3, [r3, #0]
   1d580:	2b00      	cmp	r3, #0
   1d582:	d16c      	bne.n	1d65e <env_sensors_poll_fn+0x19e>
   1d584:	683b      	ldr	r3, [r7, #0]
   1d586:	6818      	ldr	r0, [r3, #0]
   1d588:	f006 faa8 	bl	23adc <submit_poll_work>
   1d58c:	f8d7 d008 	ldr.w	sp, [r7, #8]
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d590:	3734      	adds	r7, #52	; 0x34
   1d592:	46bd      	mov	sp, r7
   1d594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d598:	f103 0824 	add.w	r8, r3, #36	; 0x24
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d59c:	f04f 0320 	mov.w	r3, #32
   1d5a0:	f3ef 8211 	mrs	r2, BASEPRI
   1d5a4:	f383 8811 	msr	BASEPRI, r3
   1d5a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d5ac:	4640      	mov	r0, r8
   1d5ae:	607a      	str	r2, [r7, #4]
   1d5b0:	f023 fba4 	bl	40cfc <z_spin_lock_valid>
   1d5b4:	b968      	cbnz	r0, 1d5d2 <env_sensors_poll_fn+0x112>
   1d5b6:	235c      	movs	r3, #92	; 0x5c
   1d5b8:	4632      	mov	r2, r6
   1d5ba:	4935      	ldr	r1, [pc, #212]	; (1d690 <env_sensors_poll_fn+0x1d0>)
   1d5bc:	4835      	ldr	r0, [pc, #212]	; (1d694 <env_sensors_poll_fn+0x1d4>)
   1d5be:	f026 fe87 	bl	442d0 <printk>
   1d5c2:	4641      	mov	r1, r8
   1d5c4:	4834      	ldr	r0, [pc, #208]	; (1d698 <env_sensors_poll_fn+0x1d8>)
   1d5c6:	f026 fe83 	bl	442d0 <printk>
   1d5ca:	215c      	movs	r1, #92	; 0x5c
   1d5cc:	4630      	mov	r0, r6
   1d5ce:	f027 f899 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d5d2:	4640      	mov	r0, r8
   1d5d4:	f023 fbb0 	bl	40d38 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d5d8:	6868      	ldr	r0, [r5, #4]
   1d5da:	f7ff f883 	bl	1c6e4 <__aeabi_i2d>
   1d5de:	a322      	add	r3, pc, #136	; (adr r3, 1d668 <env_sensors_poll_fn+0x1a8>)
   1d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d5e4:	f7ff fa12 	bl	1ca0c <__aeabi_ddiv>
   1d5e8:	4680      	mov	r8, r0
   1d5ea:	6828      	ldr	r0, [r5, #0]
   1d5ec:	4689      	mov	r9, r1
   1d5ee:	f7ff f879 	bl	1c6e4 <__aeabi_i2d>
   1d5f2:	4602      	mov	r2, r0
   1d5f4:	460b      	mov	r3, r1
   1d5f6:	4640      	mov	r0, r8
   1d5f8:	4649      	mov	r1, r9
   1d5fa:	f7fe ff27 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d5fe:	f854 bc04 	ldr.w	fp, [r4, #-4]
   1d602:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1d606:	f02a fcea 	bl	47fde <z_impl_k_uptime_ticks>
   1d60a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   1d60e:	fba0 890c 	umull	r8, r9, r0, ip
   1d612:	fb0c 9901 	mla	r9, ip, r1, r9
   1d616:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   1d61a:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   1d61e:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
			env_sensors[i]->sensor.ts = k_uptime_get();
   1d622:	e9cb 2304 	strd	r2, r3, [fp, #16]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d626:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1d62a:	f103 0824 	add.w	r8, r3, #36	; 0x24
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d62e:	4640      	mov	r0, r8
   1d630:	f023 fb72 	bl	40d18 <z_spin_unlock_valid>
   1d634:	b968      	cbnz	r0, 1d652 <env_sensors_poll_fn+0x192>
   1d636:	2384      	movs	r3, #132	; 0x84
   1d638:	4632      	mov	r2, r6
   1d63a:	4918      	ldr	r1, [pc, #96]	; (1d69c <env_sensors_poll_fn+0x1dc>)
   1d63c:	4815      	ldr	r0, [pc, #84]	; (1d694 <env_sensors_poll_fn+0x1d4>)
   1d63e:	f026 fe47 	bl	442d0 <printk>
   1d642:	4641      	mov	r1, r8
   1d644:	4816      	ldr	r0, [pc, #88]	; (1d6a0 <env_sensors_poll_fn+0x1e0>)
   1d646:	f026 fe43 	bl	442d0 <printk>
   1d64a:	2184      	movs	r1, #132	; 0x84
   1d64c:	4630      	mov	r0, r6
   1d64e:	f027 f859 	bl	44704 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d652:	687b      	ldr	r3, [r7, #4]
   1d654:	f383 8811 	msr	BASEPRI, r3
   1d658:	f3bf 8f6f 	isb	sy
   1d65c:	e785      	b.n	1d56a <env_sensors_poll_fn+0xaa>
	submit_poll_work(backoff_enabled ?
   1d65e:	2014      	movs	r0, #20
   1d660:	e792      	b.n	1d588 <env_sensors_poll_fn+0xc8>
   1d662:	bf00      	nop
   1d664:	f3af 8000 	nop.w
   1d668:	00000000 	.word	0x00000000
   1d66c:	412e8480 	.word	0x412e8480
   1d670:	20020728 	.word	0x20020728
   1d674:	00049818 	.word	0x00049818
   1d678:	00049788 	.word	0x00049788
   1d67c:	00049b80 	.word	0x00049b80
   1d680:	0004be5f 	.word	0x0004be5f
   1d684:	0004be37 	.word	0x0004be37
   1d688:	20024a08 	.word	0x20024a08
   1d68c:	2002b4ab 	.word	0x2002b4ab
   1d690:	0004be85 	.word	0x0004be85
   1d694:	0004b33b 	.word	0x0004b33b
   1d698:	0004be9a 	.word	0x0004be9a
   1d69c:	0004beb2 	.word	0x0004beb2
   1d6a0:	0004bec9 	.word	0x0004bec9
   1d6a4:	00000000 	.word	0x00000000

0001d6a8 <sntp_query>:

	return res;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1d6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6ac:	4605      	mov	r5, r0
   1d6ae:	b09b      	sub	sp, #108	; 0x6c
   1d6b0:	460f      	mov	r7, r1
   1d6b2:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1d6b4:	2100      	movs	r1, #0
   1d6b6:	2230      	movs	r2, #48	; 0x30
   1d6b8:	a802      	add	r0, sp, #8
   1d6ba:	f02a fd85 	bl	481c8 <memset>
	int ret = 0;

	if (!ctx || !time) {
   1d6be:	2d00      	cmp	r5, #0
   1d6c0:	f000 8087 	beq.w	1d7d2 <sntp_query+0x12a>
   1d6c4:	2e00      	cmp	r6, #0
   1d6c6:	f000 8084 	beq.w	1d7d2 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1d6ca:	231b      	movs	r3, #27
   1d6cc:	f88d 3008 	strb.w	r3, [sp, #8]
   1d6d0:	f02a fc85 	bl	47fde <z_impl_k_uptime_ticks>
   1d6d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d6d8:	2400      	movs	r4, #0
   1d6da:	fba0 8903 	umull	r8, r9, r0, r3
   1d6de:	fb03 9901 	mla	r9, r3, r1, r9
   1d6e2:	ea4f 30d8 	mov.w	r0, r8, lsr #15
	return time / MSEC_PER_SEC;
   1d6e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d6ea:	2300      	movs	r3, #0
   1d6ec:	ea40 4049 	orr.w	r0, r0, r9, lsl #17
   1d6f0:	4621      	mov	r1, r4
   1d6f2:	f7ff fbe3 	bl	1cebc <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d6f6:	4a3c      	ldr	r2, [pc, #240]	; (1d7e8 <sntp_query+0x140>)
   1d6f8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d6fa:	0a13      	lsrs	r3, r2, #8
   1d6fc:	0211      	lsls	r1, r2, #8
   1d6fe:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1d702:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d706:	430b      	orrs	r3, r1
   1d708:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d70c:	f043 0383 	orr.w	r3, r3, #131	; 0x83
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d710:	612a      	str	r2, [r5, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d712:	930c      	str	r3, [sp, #48]	; 0x30

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1d714:	68e8      	ldr	r0, [r5, #12]
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d716:	2230      	movs	r2, #48	; 0x30
   1d718:	e9cd 4400 	strd	r4, r4, [sp]
   1d71c:	4623      	mov	r3, r4
   1d71e:	a902      	add	r1, sp, #8
   1d720:	f027 fbe9 	bl	44ef6 <z_impl_zsock_sendto>
	if (ret < 0) {
   1d724:	2800      	cmp	r0, #0
   1d726:	db0f      	blt.n	1d748 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   1d728:	4621      	mov	r1, r4
   1d72a:	2230      	movs	r2, #48	; 0x30
   1d72c:	a80e      	add	r0, sp, #56	; 0x38
   1d72e:	f02a fd4b 	bl	481c8 <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1d732:	68a9      	ldr	r1, [r5, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d734:	463a      	mov	r2, r7
   1d736:	4628      	mov	r0, r5
   1d738:	f007 fee6 	bl	25508 <z_impl_zsock_poll>
	if (status < 0) {
   1d73c:	42a0      	cmp	r0, r4
   1d73e:	da06      	bge.n	1d74e <sntp_query+0xa6>
		return -errno;
   1d740:	f028 f950 	bl	459e4 <__errno>
   1d744:	6800      	ldr	r0, [r0, #0]
   1d746:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1d748:	b01b      	add	sp, #108	; 0x6c
   1d74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (status == 0) {
   1d74e:	d037      	beq.n	1d7c0 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1d750:	68e8      	ldr	r0, [r5, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d752:	2230      	movs	r2, #48	; 0x30
   1d754:	e9cd 4400 	strd	r4, r4, [sp]
   1d758:	4623      	mov	r3, r4
   1d75a:	a90e      	add	r1, sp, #56	; 0x38
   1d75c:	f027 fbfe 	bl	44f5c <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1d760:	2800      	cmp	r0, #0
   1d762:	dbed      	blt.n	1d740 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1d764:	2830      	cmp	r0, #48	; 0x30
   1d766:	d12e      	bne.n	1d7c6 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1d768:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d76a:	692a      	ldr	r2, [r5, #16]
   1d76c:	ba1b      	rev	r3, r3
   1d76e:	429a      	cmp	r2, r3
   1d770:	d002      	beq.n	1d778 <sntp_query+0xd0>
		return -EINVAL;
   1d772:	f06f 0015 	mvn.w	r0, #21
   1d776:	e7e7      	b.n	1d748 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1d778:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d77c:	f003 0307 	and.w	r3, r3, #7
   1d780:	2b04      	cmp	r3, #4
   1d782:	d1f6      	bne.n	1d772 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1d784:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d788:	b303      	cbz	r3, 1d7cc <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1d78a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d78c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d78e:	ba1b      	rev	r3, r3
   1d790:	ba12      	rev	r2, r2
   1d792:	ea53 0102 	orrs.w	r1, r3, r2
   1d796:	d0ec      	beq.n	1d772 <sntp_query+0xca>
	if (ts & 0x80000000) {
   1d798:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1d79a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1d79c:	da0c      	bge.n	1d7b8 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1d79e:	4a13      	ldr	r2, [pc, #76]	; (1d7ec <sntp_query+0x144>)
   1d7a0:	4293      	cmp	r3, r2
   1d7a2:	d9e6      	bls.n	1d772 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1d7a4:	a10c      	add	r1, pc, #48	; (adr r1, 1d7d8 <sntp_query+0x130>)
   1d7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d7aa:	18c4      	adds	r4, r0, r3
   1d7ac:	f141 0500 	adc.w	r5, r1, #0
   1d7b0:	e9c6 4500 	strd	r4, r5, [r6]
	return 0;
   1d7b4:	2000      	movs	r0, #0
   1d7b6:	e7c7      	b.n	1d748 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d7b8:	a109      	add	r1, pc, #36	; (adr r1, 1d7e0 <sntp_query+0x138>)
   1d7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d7be:	e7f4      	b.n	1d7aa <sntp_query+0x102>
		return -ETIMEDOUT;
   1d7c0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1d7c4:	e7c0      	b.n	1d748 <sntp_query+0xa0>
		return -EMSGSIZE;
   1d7c6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d7ca:	e7bd      	b.n	1d748 <sntp_query+0xa0>
		return -EBUSY;
   1d7cc:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1d7d0:	e7ba      	b.n	1d748 <sntp_query+0xa0>
		return -EFAULT;
   1d7d2:	f06f 000d 	mvn.w	r0, #13
   1d7d6:	e7b7      	b.n	1d748 <sntp_query+0xa0>
   1d7d8:	7c558180 	.word	0x7c558180
   1d7dc:	ffffffff 	.word	0xffffffff
   1d7e0:	7c558180 	.word	0x7c558180
   1d7e4:	00000000 	.word	0x00000000
   1d7e8:	83aa7e80 	.word	0x83aa7e80
   1d7ec:	83aa7e7f 	.word	0x83aa7e7f

0001d7f0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d7f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d7f4:	4605      	mov	r5, r0
   1d7f6:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d7f8:	460c      	mov	r4, r1
   1d7fa:	b909      	cbnz	r1, 1d800 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d7fc:	2000      	movs	r0, #0
   1d7fe:	e024      	b.n	1d84a <parse_value+0x5a>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d800:	6808      	ldr	r0, [r1, #0]
   1d802:	2800      	cmp	r0, #0
   1d804:	d0fa      	beq.n	1d7fc <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d806:	688b      	ldr	r3, [r1, #8]
   1d808:	6862      	ldr	r2, [r4, #4]
   1d80a:	1d19      	adds	r1, r3, #4
   1d80c:	4291      	cmp	r1, r2
   1d80e:	d80b      	bhi.n	1d828 <parse_value+0x38>
   1d810:	2204      	movs	r2, #4
   1d812:	49b1      	ldr	r1, [pc, #708]	; (1dad8 <parse_value+0x2e8>)
   1d814:	4418      	add	r0, r3
   1d816:	f02a feb0 	bl	4857a <strncmp>
   1d81a:	b928      	cbnz	r0, 1d828 <parse_value+0x38>
        item->type = cJSON_NULL;
   1d81c:	2304      	movs	r3, #4
   1d81e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d820:	68a3      	ldr	r3, [r4, #8]
   1d822:	3304      	adds	r3, #4
    input_buffer->offset++;
   1d824:	60a3      	str	r3, [r4, #8]
   1d826:	e074      	b.n	1d912 <parse_value+0x122>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d828:	68a3      	ldr	r3, [r4, #8]
   1d82a:	6862      	ldr	r2, [r4, #4]
   1d82c:	1d59      	adds	r1, r3, #5
   1d82e:	4291      	cmp	r1, r2
   1d830:	d80e      	bhi.n	1d850 <parse_value+0x60>
   1d832:	6820      	ldr	r0, [r4, #0]
   1d834:	2205      	movs	r2, #5
   1d836:	49a9      	ldr	r1, [pc, #676]	; (1dadc <parse_value+0x2ec>)
   1d838:	4418      	add	r0, r3
   1d83a:	f02a fe9e 	bl	4857a <strncmp>
   1d83e:	b938      	cbnz	r0, 1d850 <parse_value+0x60>
        item->type = cJSON_False;
   1d840:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d842:	68a3      	ldr	r3, [r4, #8]
        item->type = cJSON_False;
   1d844:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d846:	3305      	adds	r3, #5
        input_buffer->offset += 4;
   1d848:	60a3      	str	r3, [r4, #8]
}
   1d84a:	b013      	add	sp, #76	; 0x4c
   1d84c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d850:	68a3      	ldr	r3, [r4, #8]
   1d852:	6862      	ldr	r2, [r4, #4]
   1d854:	1d19      	adds	r1, r3, #4
   1d856:	4291      	cmp	r1, r2
   1d858:	d80d      	bhi.n	1d876 <parse_value+0x86>
   1d85a:	6820      	ldr	r0, [r4, #0]
   1d85c:	2204      	movs	r2, #4
   1d85e:	49a0      	ldr	r1, [pc, #640]	; (1dae0 <parse_value+0x2f0>)
   1d860:	4418      	add	r0, r3
   1d862:	f02a fe8a 	bl	4857a <strncmp>
   1d866:	b930      	cbnz	r0, 1d876 <parse_value+0x86>
        item->type = cJSON_True;
   1d868:	2302      	movs	r3, #2
        item->valueint = 1;
   1d86a:	2001      	movs	r0, #1
        item->type = cJSON_True;
   1d86c:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d86e:	68a3      	ldr	r3, [r4, #8]
        item->valueint = 1;
   1d870:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d872:	3304      	adds	r3, #4
   1d874:	e7e8      	b.n	1d848 <parse_value+0x58>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d876:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
   1d87a:	42ba      	cmp	r2, r7
   1d87c:	d2be      	bcs.n	1d7fc <parse_value+0xc>
   1d87e:	6820      	ldr	r0, [r4, #0]
   1d880:	5c83      	ldrb	r3, [r0, r2]
   1d882:	2b22      	cmp	r3, #34	; 0x22
   1d884:	d104      	bne.n	1d890 <parse_value+0xa0>
        return parse_string(item, input_buffer);
   1d886:	4621      	mov	r1, r4
   1d888:	4628      	mov	r0, r5
   1d88a:	f00c ffcd 	bl	2a828 <parse_string>
   1d88e:	e7dc      	b.n	1d84a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d890:	2b2d      	cmp	r3, #45	; 0x2d
   1d892:	d003      	beq.n	1d89c <parse_value+0xac>
   1d894:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1d898:	2e09      	cmp	r6, #9
   1d89a:	d850      	bhi.n	1d93e <parse_value+0x14e>
    unsigned char *after_end = NULL;
   1d89c:	2300      	movs	r3, #0
   1d89e:	9301      	str	r3, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d8a0:	2800      	cmp	r0, #0
   1d8a2:	d0ab      	beq.n	1d7fc <parse_value+0xc>
   1d8a4:	1abf      	subs	r7, r7, r2
   1d8a6:	ae02      	add	r6, sp, #8
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d8a8:	429f      	cmp	r7, r3
   1d8aa:	eb02 0103 	add.w	r1, r2, r3
   1d8ae:	d00e      	beq.n	1d8ce <parse_value+0xde>
        switch (buffer_at_offset(input_buffer)[i])
   1d8b0:	5c41      	ldrb	r1, [r0, r1]
   1d8b2:	2939      	cmp	r1, #57	; 0x39
   1d8b4:	d82f      	bhi.n	1d916 <parse_value+0x126>
   1d8b6:	2930      	cmp	r1, #48	; 0x30
   1d8b8:	d205      	bcs.n	1d8c6 <parse_value+0xd6>
   1d8ba:	292d      	cmp	r1, #45	; 0x2d
   1d8bc:	d003      	beq.n	1d8c6 <parse_value+0xd6>
   1d8be:	292e      	cmp	r1, #46	; 0x2e
   1d8c0:	d001      	beq.n	1d8c6 <parse_value+0xd6>
   1d8c2:	292b      	cmp	r1, #43	; 0x2b
   1d8c4:	d103      	bne.n	1d8ce <parse_value+0xde>
                number_c_string[i] = decimal_point;
   1d8c6:	54f1      	strb	r1, [r6, r3]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d8c8:	3301      	adds	r3, #1
   1d8ca:	2b3f      	cmp	r3, #63	; 0x3f
   1d8cc:	d1ec      	bne.n	1d8a8 <parse_value+0xb8>
    number_c_string[i] = '\0';
   1d8ce:	aa12      	add	r2, sp, #72	; 0x48
   1d8d0:	4413      	add	r3, r2
   1d8d2:	2200      	movs	r2, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8d4:	a901      	add	r1, sp, #4
   1d8d6:	4630      	mov	r0, r6
    number_c_string[i] = '\0';
   1d8d8:	f803 2c40 	strb.w	r2, [r3, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8dc:	f025 f868 	bl	429b0 <strtod>
    if (number_c_string == after_end)
   1d8e0:	9f01      	ldr	r7, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d8e2:	ec59 8b10 	vmov	r8, r9, d0
    if (number_c_string == after_end)
   1d8e6:	42b7      	cmp	r7, r6
   1d8e8:	d088      	beq.n	1d7fc <parse_value+0xc>
    if (number >= INT_MAX)
   1d8ea:	a379      	add	r3, pc, #484	; (adr r3, 1dad0 <parse_value+0x2e0>)
   1d8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d8f0:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d8f4:	ee10 0a10 	vmov	r0, s0
   1d8f8:	4649      	mov	r1, r9
   1d8fa:	f7ff f9e3 	bl	1ccc4 <__aeabi_dcmpge>
   1d8fe:	b170      	cbz	r0, 1d91e <parse_value+0x12e>
        item->valueint = INT_MAX;
   1d900:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d904:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d906:	2308      	movs	r3, #8
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d908:	1bbe      	subs	r6, r7, r6
   1d90a:	68a7      	ldr	r7, [r4, #8]
    item->type = cJSON_Number;
   1d90c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d90e:	443e      	add	r6, r7
   1d910:	60a6      	str	r6, [r4, #8]
    return true;
   1d912:	2001      	movs	r0, #1
   1d914:	e799      	b.n	1d84a <parse_value+0x5a>
        switch (buffer_at_offset(input_buffer)[i])
   1d916:	2945      	cmp	r1, #69	; 0x45
   1d918:	d0d5      	beq.n	1d8c6 <parse_value+0xd6>
   1d91a:	2965      	cmp	r1, #101	; 0x65
   1d91c:	e7d2      	b.n	1d8c4 <parse_value+0xd4>
    else if (number <= (double)INT_MIN)
   1d91e:	2200      	movs	r2, #0
   1d920:	4b70      	ldr	r3, [pc, #448]	; (1dae4 <parse_value+0x2f4>)
   1d922:	4640      	mov	r0, r8
   1d924:	4649      	mov	r1, r9
   1d926:	f7ff f9c3 	bl	1ccb0 <__aeabi_dcmple>
   1d92a:	b110      	cbz	r0, 1d932 <parse_value+0x142>
        item->valueint = INT_MIN;
   1d92c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d930:	e7e8      	b.n	1d904 <parse_value+0x114>
        item->valueint = (int)number;
   1d932:	4640      	mov	r0, r8
   1d934:	4649      	mov	r1, r9
   1d936:	f7ff f9d9 	bl	1ccec <__aeabi_d2iz>
   1d93a:	6168      	str	r0, [r5, #20]
   1d93c:	e7e3      	b.n	1d906 <parse_value+0x116>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d93e:	2b5b      	cmp	r3, #91	; 0x5b
   1d940:	d153      	bne.n	1d9ea <parse_value+0x1fa>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d942:	68e3      	ldr	r3, [r4, #12]
   1d944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d948:	f4bf af58 	bcs.w	1d7fc <parse_value+0xc>
    input_buffer->depth++;
   1d94c:	3301      	adds	r3, #1
   1d94e:	60e3      	str	r3, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d950:	5c83      	ldrb	r3, [r0, r2]
   1d952:	2b5b      	cmp	r3, #91	; 0x5b
   1d954:	f47f af52 	bne.w	1d7fc <parse_value+0xc>
    input_buffer->offset++;
   1d958:	3201      	adds	r2, #1
   1d95a:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d95c:	4620      	mov	r0, r4
   1d95e:	f029 f9ec 	bl	46d3a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d962:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d966:	4293      	cmp	r3, r2
   1d968:	d262      	bcs.n	1da30 <parse_value+0x240>
   1d96a:	6822      	ldr	r2, [r4, #0]
   1d96c:	5cd2      	ldrb	r2, [r2, r3]
   1d96e:	2a5d      	cmp	r2, #93	; 0x5d
   1d970:	d109      	bne.n	1d986 <parse_value+0x196>
    cJSON *head = NULL; /* head of the linked list */
   1d972:	2600      	movs	r6, #0
    input_buffer->depth--;
   1d974:	68e3      	ldr	r3, [r4, #12]
   1d976:	3b01      	subs	r3, #1
   1d978:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d97a:	2320      	movs	r3, #32
    item->child = head;
   1d97c:	e9c5 6302 	strd	r6, r3, [r5, #8]
    input_buffer->offset++;
   1d980:	68a3      	ldr	r3, [r4, #8]
   1d982:	3301      	adds	r3, #1
   1d984:	e74e      	b.n	1d824 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d986:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* head of the linked list */
   1d98a:	4646      	mov	r6, r8
    input_buffer->offset--;
   1d98c:	3b01      	subs	r3, #1
   1d98e:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d990:	6920      	ldr	r0, [r4, #16]
   1d992:	f029 fa0c 	bl	46dae <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1d996:	4607      	mov	r7, r0
   1d998:	b300      	cbz	r0, 1d9dc <parse_value+0x1ec>
        if (head == NULL)
   1d99a:	b1ee      	cbz	r6, 1d9d8 <parse_value+0x1e8>
            current_item->next = new_item;
   1d99c:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d9a0:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d9a4:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9a6:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d9a8:	3301      	adds	r3, #1
   1d9aa:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9ac:	f029 f9c5 	bl	46d3a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d9b0:	4621      	mov	r1, r4
   1d9b2:	4638      	mov	r0, r7
   1d9b4:	f7ff ff1c 	bl	1d7f0 <parse_value>
   1d9b8:	b198      	cbz	r0, 1d9e2 <parse_value+0x1f2>
        buffer_skip_whitespace(input_buffer);
   1d9ba:	4620      	mov	r0, r4
   1d9bc:	f029 f9bd 	bl	46d3a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d9c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9c4:	4293      	cmp	r3, r2
   1d9c6:	d20c      	bcs.n	1d9e2 <parse_value+0x1f2>
   1d9c8:	6822      	ldr	r2, [r4, #0]
   1d9ca:	46b8      	mov	r8, r7
   1d9cc:	5cd3      	ldrb	r3, [r2, r3]
   1d9ce:	2b2c      	cmp	r3, #44	; 0x2c
   1d9d0:	d0de      	beq.n	1d990 <parse_value+0x1a0>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d9d2:	2b5d      	cmp	r3, #93	; 0x5d
   1d9d4:	d105      	bne.n	1d9e2 <parse_value+0x1f2>
   1d9d6:	e7cd      	b.n	1d974 <parse_value+0x184>
        if (head == NULL)
   1d9d8:	4606      	mov	r6, r0
   1d9da:	e7e3      	b.n	1d9a4 <parse_value+0x1b4>
    if (head != NULL)
   1d9dc:	2e00      	cmp	r6, #0
   1d9de:	f43f af0d 	beq.w	1d7fc <parse_value+0xc>
        cJSON_Delete(head);
   1d9e2:	4630      	mov	r0, r6
        cJSON_Delete(head);
   1d9e4:	f00d fb2a 	bl	2b03c <cJSON_Delete>
   1d9e8:	e708      	b.n	1d7fc <parse_value+0xc>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d9ea:	2b7b      	cmp	r3, #123	; 0x7b
   1d9ec:	f47f af06 	bne.w	1d7fc <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d9f0:	68e3      	ldr	r3, [r4, #12]
   1d9f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1d9f6:	f4bf af01 	bcs.w	1d7fc <parse_value+0xc>
    input_buffer->depth++;
   1d9fa:	3301      	adds	r3, #1
   1d9fc:	60e3      	str	r3, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d9fe:	5c83      	ldrb	r3, [r0, r2]
   1da00:	2b7b      	cmp	r3, #123	; 0x7b
   1da02:	f47f aefb 	bne.w	1d7fc <parse_value+0xc>
    input_buffer->offset++;
   1da06:	3201      	adds	r2, #1
   1da08:	60a2      	str	r2, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1da0a:	4620      	mov	r0, r4
   1da0c:	f029 f995 	bl	46d3a <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1da10:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1da14:	4293      	cmp	r3, r2
   1da16:	d20b      	bcs.n	1da30 <parse_value+0x240>
   1da18:	6822      	ldr	r2, [r4, #0]
   1da1a:	5cd2      	ldrb	r2, [r2, r3]
   1da1c:	2a7d      	cmp	r2, #125	; 0x7d
   1da1e:	d10a      	bne.n	1da36 <parse_value+0x246>
    cJSON *head = NULL; /* linked list head */
   1da20:	2700      	movs	r7, #0
    input_buffer->depth--;
   1da22:	68e3      	ldr	r3, [r4, #12]
   1da24:	3b01      	subs	r3, #1
   1da26:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1da28:	2340      	movs	r3, #64	; 0x40
    item->child = head;
   1da2a:	e9c5 7302 	strd	r7, r3, [r5, #8]
   1da2e:	e7a7      	b.n	1d980 <parse_value+0x190>
        input_buffer->offset--;
   1da30:	3b01      	subs	r3, #1
   1da32:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1da34:	e6e2      	b.n	1d7fc <parse_value+0xc>
    cJSON *current_item = NULL;
   1da36:	f04f 0800 	mov.w	r8, #0
    cJSON *head = NULL; /* linked list head */
   1da3a:	4647      	mov	r7, r8
        current_item->valuestring = NULL;
   1da3c:	46c1      	mov	r9, r8
    input_buffer->offset--;
   1da3e:	3b01      	subs	r3, #1
   1da40:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1da42:	6920      	ldr	r0, [r4, #16]
   1da44:	f029 f9b3 	bl	46dae <cJSON_New_Item.isra.1>
        if (new_item == NULL)
   1da48:	4606      	mov	r6, r0
   1da4a:	2800      	cmp	r0, #0
   1da4c:	d039      	beq.n	1dac2 <parse_value+0x2d2>
        if (head == NULL)
   1da4e:	b3b7      	cbz	r7, 1dabe <parse_value+0x2ce>
            current_item->next = new_item;
   1da50:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1da54:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1da58:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da5a:	4620      	mov	r0, r4
        input_buffer->offset++;
   1da5c:	3301      	adds	r3, #1
   1da5e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da60:	f029 f96b 	bl	46d3a <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1da64:	4621      	mov	r1, r4
   1da66:	4630      	mov	r0, r6
   1da68:	f00c fede 	bl	2a828 <parse_string>
   1da6c:	b360      	cbz	r0, 1dac8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1da6e:	4620      	mov	r0, r4
   1da70:	f029 f963 	bl	46d3a <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1da74:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1da76:	f8c6 9010 	str.w	r9, [r6, #16]
        current_item->string = current_item->valuestring;
   1da7a:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1da7c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1da80:	4293      	cmp	r3, r2
   1da82:	d221      	bcs.n	1dac8 <parse_value+0x2d8>
   1da84:	6822      	ldr	r2, [r4, #0]
   1da86:	5cd2      	ldrb	r2, [r2, r3]
   1da88:	2a3a      	cmp	r2, #58	; 0x3a
   1da8a:	d11d      	bne.n	1dac8 <parse_value+0x2d8>
        input_buffer->offset++;
   1da8c:	3301      	adds	r3, #1
   1da8e:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1da90:	4620      	mov	r0, r4
   1da92:	f029 f952 	bl	46d3a <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1da96:	4621      	mov	r1, r4
   1da98:	4630      	mov	r0, r6
   1da9a:	f7ff fea9 	bl	1d7f0 <parse_value>
   1da9e:	b198      	cbz	r0, 1dac8 <parse_value+0x2d8>
        buffer_skip_whitespace(input_buffer);
   1daa0:	4620      	mov	r0, r4
   1daa2:	f029 f94a 	bl	46d3a <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1daa6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1daaa:	4293      	cmp	r3, r2
   1daac:	d20c      	bcs.n	1dac8 <parse_value+0x2d8>
   1daae:	6822      	ldr	r2, [r4, #0]
   1dab0:	46b0      	mov	r8, r6
   1dab2:	5cd3      	ldrb	r3, [r2, r3]
   1dab4:	2b2c      	cmp	r3, #44	; 0x2c
   1dab6:	d0c4      	beq.n	1da42 <parse_value+0x252>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1dab8:	2b7d      	cmp	r3, #125	; 0x7d
   1daba:	d105      	bne.n	1dac8 <parse_value+0x2d8>
   1dabc:	e7b1      	b.n	1da22 <parse_value+0x232>
        if (head == NULL)
   1dabe:	4607      	mov	r7, r0
   1dac0:	e7ca      	b.n	1da58 <parse_value+0x268>
    if (head != NULL)
   1dac2:	2f00      	cmp	r7, #0
   1dac4:	f43f ae9a 	beq.w	1d7fc <parse_value+0xc>
        cJSON_Delete(head);
   1dac8:	4638      	mov	r0, r7
   1daca:	e78b      	b.n	1d9e4 <parse_value+0x1f4>
   1dacc:	f3af 8000 	nop.w
   1dad0:	ffc00000 	.word	0xffc00000
   1dad4:	41dfffff 	.word	0x41dfffff
   1dad8:	0004d9a7 	.word	0x0004d9a7
   1dadc:	0004d9be 	.word	0x0004d9be
   1dae0:	0004d9c4 	.word	0x0004d9c4
   1dae4:	c1e00000 	.word	0xc1e00000

0001dae8 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1dae8:	4b17      	ldr	r3, [pc, #92]	; (1db48 <cJSON_CreateNumber+0x60>)
{
   1daea:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1daec:	6818      	ldr	r0, [r3, #0]
{
   1daee:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1daf2:	f029 f95c 	bl	46dae <cJSON_New_Item.isra.1>
    if(item)
   1daf6:	4604      	mov	r4, r0
   1daf8:	b170      	cbz	r0, 1db18 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1dafa:	2308      	movs	r3, #8
        item->valuedouble = num;
   1dafc:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1db00:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1db02:	4639      	mov	r1, r7
   1db04:	a30e      	add	r3, pc, #56	; (adr r3, 1db40 <cJSON_CreateNumber+0x58>)
   1db06:	e9d3 2300 	ldrd	r2, r3, [r3]
   1db0a:	4630      	mov	r0, r6
   1db0c:	f7ff f8da 	bl	1ccc4 <__aeabi_dcmpge>
   1db10:	b120      	cbz	r0, 1db1c <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1db12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1db16:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1db18:	4620      	mov	r0, r4
   1db1a:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1db1c:	2200      	movs	r2, #0
   1db1e:	4b0b      	ldr	r3, [pc, #44]	; (1db4c <cJSON_CreateNumber+0x64>)
   1db20:	4630      	mov	r0, r6
   1db22:	4639      	mov	r1, r7
   1db24:	f7ff f8c4 	bl	1ccb0 <__aeabi_dcmple>
   1db28:	b110      	cbz	r0, 1db30 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1db2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1db2e:	e7f2      	b.n	1db16 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1db30:	4630      	mov	r0, r6
   1db32:	4639      	mov	r1, r7
   1db34:	f7ff f8da 	bl	1ccec <__aeabi_d2iz>
   1db38:	6160      	str	r0, [r4, #20]
    return item;
   1db3a:	e7ed      	b.n	1db18 <cJSON_CreateNumber+0x30>
   1db3c:	f3af 8000 	nop.w
   1db40:	ffc00000 	.word	0xffc00000
   1db44:	41dfffff 	.word	0x41dfffff
   1db48:	20020828 	.word	0x20020828
   1db4c:	c1e00000 	.word	0xc1e00000

0001db50 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   1db50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db54:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   1db58:	460e      	mov	r6, r1
{
   1db5a:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
   1db5c:	b991      	cbnz	r1, 1db84 <at_handler+0x34>
		LOG_ERR("Response buffer is NULL-pointer");
   1db5e:	2301      	movs	r3, #1
   1db60:	f04f 0000 	mov.w	r0, #0
   1db64:	4ab6      	ldr	r2, [pc, #728]	; (1de40 <at_handler+0x2f0>)
   1db66:	f363 0007 	bfi	r0, r3, #0, #8
   1db6a:	4bb6      	ldr	r3, [pc, #728]	; (1de44 <at_handler+0x2f4>)
   1db6c:	49b6      	ldr	r1, [pc, #728]	; (1de48 <at_handler+0x2f8>)
   1db6e:	1a9b      	subs	r3, r3, r2
   1db70:	08db      	lsrs	r3, r3, #3
   1db72:	f363 108f 	bfi	r0, r3, #6, #10
   1db76:	f026 fdd6 	bl	44726 <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
   1db7a:	b00c      	add	sp, #48	; 0x30
   1db7c:	ecbd 8b02 	vpop	{d8}
   1db80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1db84:	2400      	movs	r4, #0
   1db86:	4fb1      	ldr	r7, [pc, #708]	; (1de4c <at_handler+0x2fc>)
		if (strncmp(at_notifs[i], notif,
   1db88:	f857 5b04 	ldr.w	r5, [r7], #4
   1db8c:	4628      	mov	r0, r5
   1db8e:	f7ff fb69 	bl	1d264 <strlen>
   1db92:	4631      	mov	r1, r6
   1db94:	4602      	mov	r2, r0
   1db96:	4628      	mov	r0, r5
   1db98:	f02a fcef 	bl	4857a <strncmp>
   1db9c:	4605      	mov	r5, r0
   1db9e:	bba0      	cbnz	r0, 1dc0a <at_handler+0xba>
			*type = i;
   1dba0:	b2e4      	uxtb	r4, r4
	switch (notif_type) {
   1dba2:	2c01      	cmp	r4, #1
   1dba4:	f000 8123 	beq.w	1ddee <at_handler+0x29e>
   1dba8:	2c02      	cmp	r4, #2
   1dbaa:	f000 81bb 	beq.w	1df24 <at_handler+0x3d4>
	size_t len = sizeof(str_buf) - 1;
   1dbae:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dbb2:	210a      	movs	r1, #10
   1dbb4:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   1dbb6:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dbba:	f029 fd64 	bl	47686 <at_params_list_init>
	if (err) {
   1dbbe:	4604      	mov	r4, r0
   1dbc0:	b338      	cbz	r0, 1dc12 <at_handler+0xc2>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dbc2:	2301      	movs	r3, #1
   1dbc4:	f04f 0000 	mov.w	r0, #0
   1dbc8:	4a9d      	ldr	r2, [pc, #628]	; (1de40 <at_handler+0x2f0>)
   1dbca:	f363 0007 	bfi	r0, r3, #0, #8
   1dbce:	4b9d      	ldr	r3, [pc, #628]	; (1de44 <at_handler+0x2f4>)
   1dbd0:	499f      	ldr	r1, [pc, #636]	; (1de50 <at_handler+0x300>)
   1dbd2:	1a9b      	subs	r3, r3, r2
   1dbd4:	08db      	lsrs	r3, r3, #3
   1dbd6:	f363 108f 	bfi	r0, r3, #6, #10
   1dbda:	4622      	mov	r2, r4
   1dbdc:	f026 fda3 	bl	44726 <log_string_sync>
			LOG_ERR("Failed to parse notification (error %d): %s",
   1dbe0:	2301      	movs	r3, #1
   1dbe2:	f04f 0500 	mov.w	r5, #0
   1dbe6:	4a96      	ldr	r2, [pc, #600]	; (1de40 <at_handler+0x2f0>)
   1dbe8:	f363 0507 	bfi	r5, r3, #0, #8
   1dbec:	4b95      	ldr	r3, [pc, #596]	; (1de44 <at_handler+0x2f4>)
   1dbee:	4630      	mov	r0, r6
   1dbf0:	1a9b      	subs	r3, r3, r2
   1dbf2:	08db      	lsrs	r3, r3, #3
   1dbf4:	f363 158f 	bfi	r5, r3, #6, #10
   1dbf8:	f026 fda8 	bl	4474c <log_strdup>
   1dbfc:	4622      	mov	r2, r4
   1dbfe:	4603      	mov	r3, r0
   1dc00:	4994      	ldr	r1, [pc, #592]	; (1de54 <at_handler+0x304>)
   1dc02:	4628      	mov	r0, r5
   1dc04:	f026 fd8f 	bl	44726 <log_string_sync>
			return;
   1dc08:	e7b7      	b.n	1db7a <at_handler+0x2a>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1dc0a:	3401      	adds	r4, #1
   1dc0c:	2c03      	cmp	r4, #3
   1dc0e:	d1bb      	bne.n	1db88 <at_handler+0x38>
   1dc10:	e7b3      	b.n	1db7a <at_handler+0x2a>
	err = at_parser_params_from_str(notification,
   1dc12:	4601      	mov	r1, r0
   1dc14:	aa07      	add	r2, sp, #28
   1dc16:	4630      	mov	r0, r6
   1dc18:	f029 fd32 	bl	47680 <at_parser_params_from_str>
	if (err) {
   1dc1c:	4604      	mov	r4, r0
   1dc1e:	2800      	cmp	r0, #0
   1dc20:	d060      	beq.n	1dce4 <at_handler+0x194>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1dc22:	2301      	movs	r3, #1
   1dc24:	f04f 0000 	mov.w	r0, #0
   1dc28:	4a85      	ldr	r2, [pc, #532]	; (1de40 <at_handler+0x2f0>)
   1dc2a:	f363 0007 	bfi	r0, r3, #0, #8
   1dc2e:	4b85      	ldr	r3, [pc, #532]	; (1de44 <at_handler+0x2f4>)
   1dc30:	4989      	ldr	r1, [pc, #548]	; (1de58 <at_handler+0x308>)
   1dc32:	1a9b      	subs	r3, r3, r2
   1dc34:	4622      	mov	r2, r4
   1dc36:	08db      	lsrs	r3, r3, #3
   1dc38:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get registration status, error: %d", err);
   1dc3c:	f026 fd73 	bl	44726 <log_string_sync>
	at_params_list_free(&resp_list);
   1dc40:	a807      	add	r0, sp, #28
   1dc42:	f029 fd33 	bl	476ac <at_params_list_free>
		if (err) {
   1dc46:	2c00      	cmp	r4, #0
   1dc48:	d1ca      	bne.n	1dbe0 <at_handler+0x90>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc4a:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1dc4e:	2b01      	cmp	r3, #1
   1dc50:	d102      	bne.n	1dc58 <at_handler+0x108>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1dc52:	4882      	ldr	r0, [pc, #520]	; (1de5c <at_handler+0x30c>)
   1dc54:	f022 fe32 	bl	408bc <z_impl_k_sem_give>
		if (!evt_handler) {
   1dc58:	4c81      	ldr	r4, [pc, #516]	; (1de60 <at_handler+0x310>)
   1dc5a:	6823      	ldr	r3, [r4, #0]
   1dc5c:	2b00      	cmp	r3, #0
   1dc5e:	d08c      	beq.n	1db7a <at_handler+0x2a>
		if (reg_status != prev_reg_status) {
   1dc60:	4a80      	ldr	r2, [pc, #512]	; (1de64 <at_handler+0x314>)
   1dc62:	7811      	ldrb	r1, [r2, #0]
   1dc64:	42a9      	cmp	r1, r5
   1dc66:	d007      	beq.n	1dc78 <at_handler+0x128>
			prev_reg_status = reg_status;
   1dc68:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1dc6a:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   1dc6c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1dc70:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
   1dc74:	a809      	add	r0, sp, #36	; 0x24
   1dc76:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1dc78:	4e7b      	ldr	r6, [pc, #492]	; (1de68 <at_handler+0x318>)
   1dc7a:	ad03      	add	r5, sp, #12
   1dc7c:	2208      	movs	r2, #8
   1dc7e:	4631      	mov	r1, r6
   1dc80:	4628      	mov	r0, r5
   1dc82:	f02a fa73 	bl	4816c <memcmp>
   1dc86:	b160      	cbz	r0, 1dca2 <at_handler+0x152>
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1dc88:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   1dc8c:	2304      	movs	r3, #4
   1dc8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   1dc92:	ab0c      	add	r3, sp, #48	; 0x30
   1dc94:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1dc98:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1dc9c:	6823      	ldr	r3, [r4, #0]
   1dc9e:	a809      	add	r0, sp, #36	; 0x24
   1dca0:	4798      	blx	r3
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   1dca2:	4e72      	ldr	r6, [pc, #456]	; (1de6c <at_handler+0x31c>)
   1dca4:	ad05      	add	r5, sp, #20
   1dca6:	2208      	movs	r2, #8
   1dca8:	4631      	mov	r1, r6
   1dcaa:	4628      	mov	r0, r5
   1dcac:	f02a fa5e 	bl	4816c <memcmp>
   1dcb0:	b160      	cbz	r0, 1dccc <at_handler+0x17c>
			memcpy(&prev_psm_cfg, &psm_cfg,
   1dcb2:	e895 0003 	ldmia.w	r5, {r0, r1}
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   1dcb6:	2301      	movs	r3, #1
   1dcb8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&evt.psm_cfg, &psm_cfg,
   1dcbc:	ab0c      	add	r3, sp, #48	; 0x30
   1dcbe:	e903 0003 	stmdb	r3, {r0, r1}
			memcpy(&prev_psm_cfg, &psm_cfg,
   1dcc2:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1dcc6:	6823      	ldr	r3, [r4, #0]
   1dcc8:	a809      	add	r0, sp, #36	; 0x24
   1dcca:	4798      	blx	r3
	bool notify = false;
   1dccc:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   1dcce:	4a64      	ldr	r2, [pc, #400]	; (1de60 <at_handler+0x310>)
   1dcd0:	6812      	ldr	r2, [r2, #0]
   1dcd2:	2a00      	cmp	r2, #0
   1dcd4:	f43f af51 	beq.w	1db7a <at_handler+0x2a>
   1dcd8:	2b00      	cmp	r3, #0
   1dcda:	f43f af4e 	beq.w	1db7a <at_handler+0x2a>
		evt_handler(&evt);
   1dcde:	a809      	add	r0, sp, #36	; 0x24
   1dce0:	4790      	blx	r2
   1dce2:	e74a      	b.n	1db7a <at_handler+0x2a>
	err = at_params_int_get(&resp_list,
   1dce4:	aa01      	add	r2, sp, #4
   1dce6:	2101      	movs	r1, #1
   1dce8:	a807      	add	r0, sp, #28
   1dcea:	f029 fd8d 	bl	47808 <at_params_int_get>
	if (err) {
   1dcee:	4604      	mov	r4, r0
   1dcf0:	b168      	cbz	r0, 1dd0e <at_handler+0x1be>
		LOG_ERR("Could not get registration status, error: %d", err);
   1dcf2:	2301      	movs	r3, #1
   1dcf4:	f04f 0000 	mov.w	r0, #0
   1dcf8:	4a51      	ldr	r2, [pc, #324]	; (1de40 <at_handler+0x2f0>)
   1dcfa:	f363 0007 	bfi	r0, r3, #0, #8
   1dcfe:	4b51      	ldr	r3, [pc, #324]	; (1de44 <at_handler+0x2f4>)
   1dd00:	495b      	ldr	r1, [pc, #364]	; (1de70 <at_handler+0x320>)
   1dd02:	1a9b      	subs	r3, r3, r2
   1dd04:	08db      	lsrs	r3, r3, #3
   1dd06:	f363 108f 	bfi	r0, r3, #6, #10
   1dd0a:	4622      	mov	r2, r4
   1dd0c:	e796      	b.n	1dc3c <at_handler+0xec>
	*reg_status = status;
   1dd0e:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if (*reg_status != LTE_LC_NW_REG_UICC_FAIL) {
   1dd12:	2d5a      	cmp	r5, #90	; 0x5a
   1dd14:	d04f      	beq.n	1ddb6 <at_handler+0x266>
		err = at_params_string_get(&resp_list,
   1dd16:	ab02      	add	r3, sp, #8
   1dd18:	aa09      	add	r2, sp, #36	; 0x24
   1dd1a:	2102      	movs	r1, #2
   1dd1c:	a807      	add	r0, sp, #28
   1dd1e:	f029 fd8a 	bl	47836 <at_params_string_get>
		if (err) {
   1dd22:	4607      	mov	r7, r0
   1dd24:	b180      	cbz	r0, 1dd48 <at_handler+0x1f8>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1dd26:	2301      	movs	r3, #1
   1dd28:	f04f 0000 	mov.w	r0, #0
   1dd2c:	4a44      	ldr	r2, [pc, #272]	; (1de40 <at_handler+0x2f0>)
   1dd2e:	f363 0007 	bfi	r0, r3, #0, #8
   1dd32:	4b44      	ldr	r3, [pc, #272]	; (1de44 <at_handler+0x2f4>)
   1dd34:	494f      	ldr	r1, [pc, #316]	; (1de74 <at_handler+0x324>)
   1dd36:	1a9b      	subs	r3, r3, r2
   1dd38:	463a      	mov	r2, r7
   1dd3a:	08db      	lsrs	r3, r3, #3
   1dd3c:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dd40:	f026 fcf1 	bl	44726 <log_string_sync>
			goto clean_exit;
   1dd44:	463c      	mov	r4, r7
   1dd46:	e77b      	b.n	1dc40 <at_handler+0xf0>
		str_buf[len] = '\0';
   1dd48:	9b02      	ldr	r3, [sp, #8]
   1dd4a:	aa0c      	add	r2, sp, #48	; 0x30
   1dd4c:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd4e:	4621      	mov	r1, r4
   1dd50:	2210      	movs	r2, #16
   1dd52:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dd54:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd58:	f024 ff2c 	bl	42bb4 <strtoul>
		err = at_params_string_get(&resp_list,
   1dd5c:	ab02      	add	r3, sp, #8
		cell->tac = strtoul(str_buf, NULL, 16);
   1dd5e:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
   1dd60:	aa09      	add	r2, sp, #36	; 0x24
   1dd62:	2103      	movs	r1, #3
   1dd64:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
   1dd66:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
   1dd6a:	f029 fd64 	bl	47836 <at_params_string_get>
		if (err) {
   1dd6e:	4607      	mov	r7, r0
   1dd70:	b168      	cbz	r0, 1dd8e <at_handler+0x23e>
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dd72:	2301      	movs	r3, #1
   1dd74:	f04f 0000 	mov.w	r0, #0
   1dd78:	4a31      	ldr	r2, [pc, #196]	; (1de40 <at_handler+0x2f0>)
   1dd7a:	f363 0007 	bfi	r0, r3, #0, #8
   1dd7e:	4b31      	ldr	r3, [pc, #196]	; (1de44 <at_handler+0x2f4>)
   1dd80:	493d      	ldr	r1, [pc, #244]	; (1de78 <at_handler+0x328>)
   1dd82:	1a9b      	subs	r3, r3, r2
   1dd84:	08db      	lsrs	r3, r3, #3
   1dd86:	f363 108f 	bfi	r0, r3, #6, #10
   1dd8a:	463a      	mov	r2, r7
   1dd8c:	e7d8      	b.n	1dd40 <at_handler+0x1f0>
		str_buf[len] = '\0';
   1dd8e:	9b02      	ldr	r3, [sp, #8]
   1dd90:	aa0c      	add	r2, sp, #48	; 0x30
   1dd92:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   1dd94:	4621      	mov	r1, r4
   1dd96:	2210      	movs	r2, #16
   1dd98:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dd9a:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1dd9e:	f024 ff09 	bl	42bb4 <strtoul>
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dda2:	f005 03fb 	and.w	r3, r5, #251	; 0xfb
   1dda6:	2b01      	cmp	r3, #1
		cell->id = strtoul(str_buf, NULL, 16);
   1dda8:	9003      	str	r0, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1ddaa:	d009      	beq.n	1ddc0 <at_handler+0x270>
		psm_cfg->tau = -1;
   1ddac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		psm_cfg->active_time = -1;
   1ddb0:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1ddb4:	e744      	b.n	1dc40 <at_handler+0xf0>
		cell->tac = UINT32_MAX;
   1ddb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = UINT32_MAX;
   1ddba:	e9cd 3303 	strd	r3, r3, [sp, #12]
	if ((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1ddbe:	e7f5      	b.n	1ddac <at_handler+0x25c>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1ddc0:	aa05      	add	r2, sp, #20
   1ddc2:	2101      	movs	r1, #1
   1ddc4:	a807      	add	r0, sp, #28
   1ddc6:	f00f fc0f 	bl	2d5e8 <parse_psm_cfg>
		if (err) {
   1ddca:	4604      	mov	r4, r0
   1ddcc:	2800      	cmp	r0, #0
   1ddce:	f43f af37 	beq.w	1dc40 <at_handler+0xf0>
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   1ddd2:	2301      	movs	r3, #1
   1ddd4:	f04f 0000 	mov.w	r0, #0
   1ddd8:	4a19      	ldr	r2, [pc, #100]	; (1de40 <at_handler+0x2f0>)
   1ddda:	f363 0007 	bfi	r0, r3, #0, #8
   1ddde:	4b19      	ldr	r3, [pc, #100]	; (1de44 <at_handler+0x2f4>)
   1dde0:	4926      	ldr	r1, [pc, #152]	; (1de7c <at_handler+0x32c>)
   1dde2:	1a9b      	subs	r3, r3, r2
   1dde4:	08db      	lsrs	r3, r3, #3
   1dde6:	f363 108f 	bfi	r0, r3, #6, #10
   1ddea:	4622      	mov	r2, r4
   1ddec:	e726      	b.n	1dc3c <at_handler+0xec>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1ddee:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1ddf2:	2104      	movs	r1, #4
   1ddf4:	a807      	add	r0, sp, #28
   1ddf6:	f029 fc46 	bl	47686 <at_params_list_init>
	if (err) {
   1ddfa:	4605      	mov	r5, r0
   1ddfc:	2800      	cmp	r0, #0
   1ddfe:	d041      	beq.n	1de84 <at_handler+0x334>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1de00:	2301      	movs	r3, #1
   1de02:	f04f 0000 	mov.w	r0, #0
   1de06:	4a0e      	ldr	r2, [pc, #56]	; (1de40 <at_handler+0x2f0>)
   1de08:	f363 0007 	bfi	r0, r3, #0, #8
   1de0c:	4b0d      	ldr	r3, [pc, #52]	; (1de44 <at_handler+0x2f4>)
   1de0e:	4910      	ldr	r1, [pc, #64]	; (1de50 <at_handler+0x300>)
   1de10:	1a9b      	subs	r3, r3, r2
   1de12:	08db      	lsrs	r3, r3, #3
   1de14:	f363 108f 	bfi	r0, r3, #6, #10
   1de18:	462a      	mov	r2, r5
   1de1a:	f026 fc84 	bl	44726 <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   1de1e:	2301      	movs	r3, #1
   1de20:	f04f 0000 	mov.w	r0, #0
   1de24:	4a06      	ldr	r2, [pc, #24]	; (1de40 <at_handler+0x2f0>)
   1de26:	f363 0007 	bfi	r0, r3, #0, #8
   1de2a:	4b06      	ldr	r3, [pc, #24]	; (1de44 <at_handler+0x2f4>)
   1de2c:	4914      	ldr	r1, [pc, #80]	; (1de80 <at_handler+0x330>)
   1de2e:	1a9b      	subs	r3, r3, r2
   1de30:	462a      	mov	r2, r5
   1de32:	08db      	lsrs	r3, r3, #3
   1de34:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1de38:	f026 fc75 	bl	44726 <log_string_sync>
			return;
   1de3c:	e69d      	b.n	1db7a <at_handler+0x2a>
   1de3e:	bf00      	nop
   1de40:	00049788 	.word	0x00049788
   1de44:	00049838 	.word	0x00049838
   1de48:	0004e2d2 	.word	0x0004e2d2
   1de4c:	0004a008 	.word	0x0004a008
   1de50:	0004e2f2 	.word	0x0004e2f2
   1de54:	0004e3ef 	.word	0x0004e3ef
   1de58:	0004e31b 	.word	0x0004e31b
   1de5c:	20024d30 	.word	0x20024d30
   1de60:	20024d2c 	.word	0x20024d2c
   1de64:	2002d088 	.word	0x2002d088
   1de68:	20024d48 	.word	0x20024d48
   1de6c:	20024d50 	.word	0x20024d50
   1de70:	0004e348 	.word	0x0004e348
   1de74:	0004e375 	.word	0x0004e375
   1de78:	0004e3a1 	.word	0x0004e3a1
   1de7c:	0004e3c2 	.word	0x0004e3c2
   1de80:	0004e48b 	.word	0x0004e48b
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1de84:	4601      	mov	r1, r0
   1de86:	aa07      	add	r2, sp, #28
   1de88:	4630      	mov	r0, r6
   1de8a:	f029 fbf9 	bl	47680 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1de8e:	4605      	mov	r5, r0
   1de90:	b1c0      	cbz	r0, 1dec4 <at_handler+0x374>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1de92:	2301      	movs	r3, #1
   1de94:	f04f 0000 	mov.w	r0, #0
   1de98:	4aa7      	ldr	r2, [pc, #668]	; (1e138 <at_handler+0x5e8>)
   1de9a:	f363 0007 	bfi	r0, r3, #0, #8
   1de9e:	4ba7      	ldr	r3, [pc, #668]	; (1e13c <at_handler+0x5ec>)
   1dea0:	49a7      	ldr	r1, [pc, #668]	; (1e140 <at_handler+0x5f0>)
   1dea2:	1a9b      	subs	r3, r3, r2
   1dea4:	462a      	mov	r2, r5
   1dea6:	08db      	lsrs	r3, r3, #3
   1dea8:	f363 108f 	bfi	r0, r3, #6, #10
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1deac:	f026 fc3b 	bl	44726 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1deb0:	a807      	add	r0, sp, #28
   1deb2:	f029 fbfb 	bl	476ac <at_params_list_free>
		if (err) {
   1deb6:	2d00      	cmp	r5, #0
   1deb8:	d1b1      	bne.n	1de1e <at_handler+0x2ce>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   1deba:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1debc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   1dec0:	2301      	movs	r3, #1
		break;
   1dec2:	e704      	b.n	1dcce <at_handler+0x17e>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1dec4:	aa05      	add	r2, sp, #20
   1dec6:	4621      	mov	r1, r4
   1dec8:	a807      	add	r0, sp, #28
   1deca:	f029 fc9d 	bl	47808 <at_params_int_get>
	if (err) {
   1dece:	4605      	mov	r5, r0
   1ded0:	b168      	cbz	r0, 1deee <at_handler+0x39e>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1ded2:	2301      	movs	r3, #1
   1ded4:	f04f 0000 	mov.w	r0, #0
   1ded8:	4a97      	ldr	r2, [pc, #604]	; (1e138 <at_handler+0x5e8>)
   1deda:	f363 0007 	bfi	r0, r3, #0, #8
   1dede:	4b97      	ldr	r3, [pc, #604]	; (1e13c <at_handler+0x5ec>)
   1dee0:	4998      	ldr	r1, [pc, #608]	; (1e144 <at_handler+0x5f4>)
   1dee2:	1a9b      	subs	r3, r3, r2
   1dee4:	08db      	lsrs	r3, r3, #3
   1dee6:	f363 108f 	bfi	r0, r3, #6, #10
   1deea:	462a      	mov	r2, r5
   1deec:	e7de      	b.n	1deac <at_handler+0x35c>
	if (temp_mode == 0) {
   1deee:	9a05      	ldr	r2, [sp, #20]
   1def0:	b912      	cbnz	r2, 1def8 <at_handler+0x3a8>
		*mode = LTE_LC_RRC_MODE_IDLE;
   1def2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
   1def6:	e7db      	b.n	1deb0 <at_handler+0x360>
	} else if (temp_mode == 1) {
   1def8:	2a01      	cmp	r2, #1
   1defa:	d102      	bne.n	1df02 <at_handler+0x3b2>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1defc:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   1df00:	e7d6      	b.n	1deb0 <at_handler+0x360>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1df02:	2301      	movs	r3, #1
   1df04:	f04f 0000 	mov.w	r0, #0
   1df08:	498b      	ldr	r1, [pc, #556]	; (1e138 <at_handler+0x5e8>)
   1df0a:	f363 0007 	bfi	r0, r3, #0, #8
   1df0e:	4b8b      	ldr	r3, [pc, #556]	; (1e13c <at_handler+0x5ec>)
		err = -EINVAL;
   1df10:	f06f 0515 	mvn.w	r5, #21
   1df14:	1a5b      	subs	r3, r3, r1
   1df16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1df18:	f363 108f 	bfi	r0, r3, #6, #10
   1df1c:	498a      	ldr	r1, [pc, #552]	; (1e148 <at_handler+0x5f8>)
   1df1e:	f026 fc02 	bl	44726 <log_string_sync>
		err = -EINVAL;
   1df22:	e7c5      	b.n	1deb0 <at_handler+0x360>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1df24:	2304      	movs	r3, #4
	switch (sys_mode_current) {
   1df26:	4d89      	ldr	r5, [pc, #548]	; (1e14c <at_handler+0x5fc>)
	struct at_param_list resp_list = {0};
   1df28:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
   1df2c:	782a      	ldrb	r2, [r5, #0]
	size_t len = sizeof(tmp_buf) - 1;
   1df2e:	9303      	str	r3, [sp, #12]
	switch (sys_mode_current) {
   1df30:	3a01      	subs	r2, #1
   1df32:	2a04      	cmp	r2, #4
   1df34:	d804      	bhi.n	1df40 <at_handler+0x3f0>
   1df36:	e8df f002 	tbb	[pc, r2]
   1df3a:	3921      	.short	0x3921
   1df3c:	2103      	.short	0x2103
   1df3e:	39          	.byte	0x39
   1df3f:	00          	.byte	0x00
		LOG_ERR("No LTE connection available in this system mode");
   1df40:	2301      	movs	r3, #1
   1df42:	f04f 0000 	mov.w	r0, #0
   1df46:	4a7c      	ldr	r2, [pc, #496]	; (1e138 <at_handler+0x5e8>)
   1df48:	f363 0007 	bfi	r0, r3, #0, #8
   1df4c:	4b7b      	ldr	r3, [pc, #492]	; (1e13c <at_handler+0x5ec>)
   1df4e:	4980      	ldr	r1, [pc, #512]	; (1e150 <at_handler+0x600>)
   1df50:	1a9b      	subs	r3, r3, r2
   1df52:	08db      	lsrs	r3, r3, #3
   1df54:	f363 108f 	bfi	r0, r3, #6, #10
   1df58:	f026 fbe5 	bl	44726 <log_string_sync>
		return -ENOTCONN;
   1df5c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1df60:	2301      	movs	r3, #1
   1df62:	f04f 0000 	mov.w	r0, #0
   1df66:	4a74      	ldr	r2, [pc, #464]	; (1e138 <at_handler+0x5e8>)
   1df68:	f363 0007 	bfi	r0, r3, #0, #8
   1df6c:	4b73      	ldr	r3, [pc, #460]	; (1e13c <at_handler+0x5ec>)
   1df6e:	4979      	ldr	r1, [pc, #484]	; (1e154 <at_handler+0x604>)
   1df70:	1a9b      	subs	r3, r3, r2
   1df72:	08db      	lsrs	r3, r3, #3
   1df74:	f363 108f 	bfi	r0, r3, #6, #10
   1df78:	4622      	mov	r2, r4
   1df7a:	e75d      	b.n	1de38 <at_handler+0x2e8>
		*ptw_multiplier = 1.28;
   1df7c:	ed9f 8a76 	vldr	s16, [pc, #472]	; 1e158 <at_handler+0x608>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1df80:	2105      	movs	r1, #5
   1df82:	a807      	add	r0, sp, #28
   1df84:	f029 fb7f 	bl	47686 <at_params_list_init>
	if (err) {
   1df88:	4604      	mov	r4, r0
   1df8a:	b190      	cbz	r0, 1dfb2 <at_handler+0x462>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1df8c:	2301      	movs	r3, #1
   1df8e:	f04f 0000 	mov.w	r0, #0
   1df92:	4a69      	ldr	r2, [pc, #420]	; (1e138 <at_handler+0x5e8>)
   1df94:	f363 0007 	bfi	r0, r3, #0, #8
   1df98:	4b68      	ldr	r3, [pc, #416]	; (1e13c <at_handler+0x5ec>)
   1df9a:	4970      	ldr	r1, [pc, #448]	; (1e15c <at_handler+0x60c>)
   1df9c:	1a9b      	subs	r3, r3, r2
   1df9e:	08db      	lsrs	r3, r3, #3
   1dfa0:	f363 108f 	bfi	r0, r3, #6, #10
   1dfa4:	4622      	mov	r2, r4
   1dfa6:	f026 fbbe 	bl	44726 <log_string_sync>
		return err;
   1dfaa:	e7d9      	b.n	1df60 <at_handler+0x410>
		*ptw_multiplier = 2.56;
   1dfac:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 1e160 <at_handler+0x610>
   1dfb0:	e7e6      	b.n	1df80 <at_handler+0x430>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1dfb2:	4601      	mov	r1, r0
   1dfb4:	aa07      	add	r2, sp, #28
   1dfb6:	4630      	mov	r0, r6
   1dfb8:	f029 fb62 	bl	47680 <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1dfbc:	4604      	mov	r4, r0
   1dfbe:	b1a8      	cbz	r0, 1dfec <at_handler+0x49c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1dfc0:	2301      	movs	r3, #1
   1dfc2:	f04f 0000 	mov.w	r0, #0
   1dfc6:	4a5c      	ldr	r2, [pc, #368]	; (1e138 <at_handler+0x5e8>)
   1dfc8:	f363 0007 	bfi	r0, r3, #0, #8
   1dfcc:	4b5b      	ldr	r3, [pc, #364]	; (1e13c <at_handler+0x5ec>)
   1dfce:	4965      	ldr	r1, [pc, #404]	; (1e164 <at_handler+0x614>)
   1dfd0:	1a9b      	subs	r3, r3, r2
   1dfd2:	4622      	mov	r2, r4
   1dfd4:	08db      	lsrs	r3, r3, #3
   1dfd6:	f363 108f 	bfi	r0, r3, #6, #10
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1dfda:	f026 fba4 	bl	44726 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1dfde:	a807      	add	r0, sp, #28
   1dfe0:	f029 fb64 	bl	476ac <at_params_list_free>
		if (err) {
   1dfe4:	2c00      	cmp	r4, #0
   1dfe6:	d1bb      	bne.n	1df60 <at_handler+0x410>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dfe8:	2302      	movs	r3, #2
   1dfea:	e767      	b.n	1debc <at_handler+0x36c>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1dfec:	ab03      	add	r3, sp, #12
   1dfee:	aa05      	add	r2, sp, #20
   1dff0:	2103      	movs	r1, #3
   1dff2:	a807      	add	r0, sp, #28
   1dff4:	f029 fc1f 	bl	47836 <at_params_string_get>
	if (err) {
   1dff8:	4604      	mov	r4, r0
   1dffa:	b168      	cbz	r0, 1e018 <at_handler+0x4c8>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1dffc:	2301      	movs	r3, #1
   1dffe:	f04f 0000 	mov.w	r0, #0
   1e002:	4a4d      	ldr	r2, [pc, #308]	; (1e138 <at_handler+0x5e8>)
   1e004:	f363 0007 	bfi	r0, r3, #0, #8
   1e008:	4b4c      	ldr	r3, [pc, #304]	; (1e13c <at_handler+0x5ec>)
   1e00a:	4957      	ldr	r1, [pc, #348]	; (1e168 <at_handler+0x618>)
   1e00c:	1a9b      	subs	r3, r3, r2
   1e00e:	08db      	lsrs	r3, r3, #3
   1e010:	f363 108f 	bfi	r0, r3, #6, #10
   1e014:	4622      	mov	r2, r4
   1e016:	e7e0      	b.n	1dfda <at_handler+0x48a>
	tmp_buf[len] = '\0';
   1e018:	9b03      	ldr	r3, [sp, #12]
   1e01a:	aa0c      	add	r2, sp, #48	; 0x30
   1e01c:	4413      	add	r3, r2
   1e01e:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1e022:	4601      	mov	r1, r0
   1e024:	2202      	movs	r2, #2
   1e026:	a805      	add	r0, sp, #20
   1e028:	f024 fdc4 	bl	42bb4 <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e02c:	b2c0      	uxtb	r0, r0
   1e02e:	280f      	cmp	r0, #15
   1e030:	d850      	bhi.n	1e0d4 <at_handler+0x584>
	switch (sys_mode_current) {
   1e032:	782b      	ldrb	r3, [r5, #0]
   1e034:	3b01      	subs	r3, #1
   1e036:	2b04      	cmp	r3, #4
   1e038:	d82c      	bhi.n	1e094 <at_handler+0x544>
   1e03a:	e8df f003 	tbb	[pc, r3]
   1e03e:	2903      	.short	0x2903
   1e040:	032b      	.short	0x032b
   1e042:	29          	.byte	0x29
   1e043:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
   1e044:	4b49      	ldr	r3, [pc, #292]	; (1e16c <at_handler+0x61c>)
		multiplier = edrx_lookup_nbiot[idx];
   1e046:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e04a:	2800      	cmp	r0, #0
   1e04c:	d040      	beq.n	1e0d0 <at_handler+0x580>
   1e04e:	f7fe fb49 	bl	1c6e4 <__aeabi_i2d>
   1e052:	a337      	add	r3, pc, #220	; (adr r3, 1e130 <at_handler+0x5e0>)
   1e054:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e058:	f7fe fbae 	bl	1c7b8 <__aeabi_dmul>
   1e05c:	f7fe fe8e 	bl	1cd7c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e060:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e062:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e064:	ab03      	add	r3, sp, #12
   1e066:	aa05      	add	r2, sp, #20
   1e068:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   1e06a:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e06c:	f029 fbe3 	bl	47836 <at_params_string_get>
	if (err) {
   1e070:	4604      	mov	r4, r0
   1e072:	b390      	cbz	r0, 1e0da <at_handler+0x58a>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e074:	2301      	movs	r3, #1
   1e076:	f04f 0000 	mov.w	r0, #0
   1e07a:	4a2f      	ldr	r2, [pc, #188]	; (1e138 <at_handler+0x5e8>)
   1e07c:	f363 0007 	bfi	r0, r3, #0, #8
   1e080:	4b2e      	ldr	r3, [pc, #184]	; (1e13c <at_handler+0x5ec>)
   1e082:	493b      	ldr	r1, [pc, #236]	; (1e170 <at_handler+0x620>)
   1e084:	1a9b      	subs	r3, r3, r2
   1e086:	08db      	lsrs	r3, r3, #3
   1e088:	f363 108f 	bfi	r0, r3, #6, #10
   1e08c:	4622      	mov	r2, r4
   1e08e:	e7a4      	b.n	1dfda <at_handler+0x48a>
		multiplier = edrx_lookup_nbiot[idx];
   1e090:	4b38      	ldr	r3, [pc, #224]	; (1e174 <at_handler+0x624>)
   1e092:	e7d8      	b.n	1e046 <at_handler+0x4f6>
		LOG_ERR("No LTE connection available in this system mode");
   1e094:	2301      	movs	r3, #1
   1e096:	f04f 0000 	mov.w	r0, #0
   1e09a:	4a27      	ldr	r2, [pc, #156]	; (1e138 <at_handler+0x5e8>)
   1e09c:	f363 0007 	bfi	r0, r3, #0, #8
   1e0a0:	4b26      	ldr	r3, [pc, #152]	; (1e13c <at_handler+0x5ec>)
   1e0a2:	492b      	ldr	r1, [pc, #172]	; (1e150 <at_handler+0x600>)
   1e0a4:	1a9b      	subs	r3, r3, r2
   1e0a6:	08db      	lsrs	r3, r3, #3
   1e0a8:	f363 108f 	bfi	r0, r3, #6, #10
   1e0ac:	f026 fb3b 	bl	44726 <log_string_sync>
		return -ENOTCONN;
   1e0b0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e0b4:	2301      	movs	r3, #1
   1e0b6:	f04f 0000 	mov.w	r0, #0
   1e0ba:	4a1f      	ldr	r2, [pc, #124]	; (1e138 <at_handler+0x5e8>)
   1e0bc:	f363 0007 	bfi	r0, r3, #0, #8
   1e0c0:	4b1e      	ldr	r3, [pc, #120]	; (1e13c <at_handler+0x5ec>)
   1e0c2:	492d      	ldr	r1, [pc, #180]	; (1e178 <at_handler+0x628>)
   1e0c4:	1a9b      	subs	r3, r3, r2
   1e0c6:	08db      	lsrs	r3, r3, #3
   1e0c8:	f363 108f 	bfi	r0, r3, #6, #10
   1e0cc:	4622      	mov	r2, r4
   1e0ce:	e784      	b.n	1dfda <at_handler+0x48a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e0d0:	482a      	ldr	r0, [pc, #168]	; (1e17c <at_handler+0x62c>)
   1e0d2:	e7c5      	b.n	1e060 <at_handler+0x510>
		return -EINVAL;
   1e0d4:	f06f 0415 	mvn.w	r4, #21
   1e0d8:	e7ec      	b.n	1e0b4 <at_handler+0x564>
	tmp_buf[len] = '\0';
   1e0da:	9b03      	ldr	r3, [sp, #12]
   1e0dc:	aa0c      	add	r2, sp, #48	; 0x30
   1e0de:	4413      	add	r3, r2
   1e0e0:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1e0e4:	2202      	movs	r2, #2
   1e0e6:	4601      	mov	r1, r0
   1e0e8:	a805      	add	r0, sp, #20
   1e0ea:	f024 fd63 	bl	42bb4 <strtoul>
	if (idx > 15) {
   1e0ee:	b2c2      	uxtb	r2, r0
   1e0f0:	2a0f      	cmp	r2, #15
   1e0f2:	d910      	bls.n	1e116 <at_handler+0x5c6>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e0f4:	2301      	movs	r3, #1
   1e0f6:	f04f 0000 	mov.w	r0, #0
   1e0fa:	490f      	ldr	r1, [pc, #60]	; (1e138 <at_handler+0x5e8>)
   1e0fc:	f363 0007 	bfi	r0, r3, #0, #8
   1e100:	4b0e      	ldr	r3, [pc, #56]	; (1e13c <at_handler+0x5ec>)
		err = -EINVAL;
   1e102:	f06f 0415 	mvn.w	r4, #21
   1e106:	1a5b      	subs	r3, r3, r1
   1e108:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e10a:	f363 108f 	bfi	r0, r3, #6, #10
   1e10e:	491c      	ldr	r1, [pc, #112]	; (1e180 <at_handler+0x630>)
   1e110:	f026 fb09 	bl	44726 <log_string_sync>
		goto clean_exit;
   1e114:	e763      	b.n	1dfde <at_handler+0x48e>
	idx += 1;
   1e116:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   1e118:	b2c0      	uxtb	r0, r0
   1e11a:	ee07 0a90 	vmov	s15, r0
   1e11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e122:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e126:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
	LOG_DBG("eDRX value: %d.%02d, PTW: %d.%02d",
   1e12a:	e758      	b.n	1dfde <at_handler+0x48e>
   1e12c:	f3af 8000 	nop.w
   1e130:	47ae147b 	.word	0x47ae147b
   1e134:	40247ae1 	.word	0x40247ae1
   1e138:	00049788 	.word	0x00049788
   1e13c:	00049838 	.word	0x00049838
   1e140:	0004e41b 	.word	0x0004e41b
   1e144:	0004e446 	.word	0x0004e446
   1e148:	0004e46f 	.word	0x0004e46f
   1e14c:	2002d089 	.word	0x2002d089
   1e150:	0004e4b2 	.word	0x0004e4b2
   1e154:	0004e5a6 	.word	0x0004e5a6
   1e158:	3fa3d70a 	.word	0x3fa3d70a
   1e15c:	0004e2f2 	.word	0x0004e2f2
   1e160:	4023d70a 	.word	0x4023d70a
   1e164:	0004e4e2 	.word	0x0004e4e2
   1e168:	0004e50e 	.word	0x0004e50e
   1e16c:	0004a9f4 	.word	0x0004a9f4
   1e170:	0004e55e 	.word	0x0004e55e
   1e174:	0004aa14 	.word	0x0004aa14
   1e178:	0004e53a 	.word	0x0004e53a
   1e17c:	40a3d70a 	.word	0x40a3d70a
   1e180:	0004e589 	.word	0x0004e589
   1e184:	00000000 	.word	0x00000000

0001e188 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1e188:	b5d0      	push	{r4, r6, r7, lr}
   1e18a:	4614      	mov	r4, r2
   1e18c:	460f      	mov	r7, r1
   1e18e:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1e190:	f7fe fdac 	bl	1ccec <__aeabi_d2iz>
   1e194:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1e196:	f7fe faa5 	bl	1c6e4 <__aeabi_i2d>
   1e19a:	4602      	mov	r2, r0
   1e19c:	460b      	mov	r3, r1
   1e19e:	4630      	mov	r0, r6
   1e1a0:	4639      	mov	r1, r7
   1e1a2:	f7fe f951 	bl	1c448 <__aeabi_dsub>
   1e1a6:	a304      	add	r3, pc, #16	; (adr r3, 1e1b8 <double_to_sensor_value+0x30>)
   1e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e1ac:	f7fe fb04 	bl	1c7b8 <__aeabi_dmul>
   1e1b0:	f7fe fd9c 	bl	1ccec <__aeabi_d2iz>
   1e1b4:	6060      	str	r0, [r4, #4]
}
   1e1b6:	bdd0      	pop	{r4, r6, r7, pc}
   1e1b8:	00000000 	.word	0x00000000
   1e1bc:	412e8480 	.word	0x412e8480

0001e1c0 <sensor_sim_sample_fetch>:
	return 0;
}

static int sensor_sim_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1e1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (chan) {
   1e1c2:	2910      	cmp	r1, #16
   1e1c4:	f200 80a8 	bhi.w	1e318 <sensor_sim_sample_fetch+0x158>
   1e1c8:	e8df f001 	tbb	[pc, r1]
   1e1cc:	40302009 	.word	0x40302009
   1e1d0:	a6a6a6a6 	.word	0xa6a6a6a6
   1e1d4:	a6a6a6a6 	.word	0xa6a6a6a6
   1e1d8:	a6926aa6 	.word	0xa6926aa6
   1e1dc:	7f          	.byte	0x7f
   1e1dd:	00          	.byte	0x00
			accel_samples[0] = static_val_coeff * max_variation;
   1e1de:	4c54      	ldr	r4, [pc, #336]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e1e0:	f016 faca 	bl	34778 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1e1e4:	6820      	ldr	r0, [r4, #0]
   1e1e6:	f7fe fa7d 	bl	1c6e4 <__aeabi_i2d>
   1e1ea:	4b52      	ldr	r3, [pc, #328]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e1ec:	2200      	movs	r2, #0
   1e1ee:	4606      	mov	r6, r0
   1e1f0:	460f      	mov	r7, r1
   1e1f2:	f7fe fae1 	bl	1c7b8 <__aeabi_dmul>
   1e1f6:	4b50      	ldr	r3, [pc, #320]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e1f8:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1e1fc:	4630      	mov	r0, r6
   1e1fe:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e202:	f7fe fd73 	bl	1ccec <__aeabi_d2iz>
   1e206:	6020      	str	r0, [r4, #0]
	return 0;
   1e208:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
}
   1e20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			accel_samples[1] = static_val_coeff * max_variation;
   1e20c:	4c48      	ldr	r4, [pc, #288]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e20e:	f016 fab3 	bl	34778 <generate_sine.constprop.2>
			accel_samples[1] = static_val_coeff * max_variation;
   1e212:	6820      	ldr	r0, [r4, #0]
   1e214:	f7fe fa66 	bl	1c6e4 <__aeabi_i2d>
   1e218:	4b46      	ldr	r3, [pc, #280]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e21a:	2200      	movs	r2, #0
   1e21c:	4606      	mov	r6, r0
   1e21e:	460f      	mov	r7, r1
   1e220:	f7fe faca 	bl	1c7b8 <__aeabi_dmul>
   1e224:	4b44      	ldr	r3, [pc, #272]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e226:	e9c3 0102 	strd	r0, r1, [r3, #8]
		static_val_coeff *= -1.0;
   1e22a:	e7e7      	b.n	1e1fc <sensor_sim_sample_fetch+0x3c>
			accel_samples[2] = static_val_coeff * max_variation;
   1e22c:	4c40      	ldr	r4, [pc, #256]	; (1e330 <sensor_sim_sample_fetch+0x170>)
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e22e:	f016 faa3 	bl	34778 <generate_sine.constprop.2>
			accel_samples[2] = static_val_coeff * max_variation;
   1e232:	6820      	ldr	r0, [r4, #0]
   1e234:	f7fe fa56 	bl	1c6e4 <__aeabi_i2d>
   1e238:	4b3e      	ldr	r3, [pc, #248]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e23a:	2200      	movs	r2, #0
   1e23c:	4606      	mov	r6, r0
   1e23e:	460f      	mov	r7, r1
   1e240:	f7fe faba 	bl	1c7b8 <__aeabi_dmul>
   1e244:	4b3c      	ldr	r3, [pc, #240]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e246:	e9c3 0104 	strd	r0, r1, [r3, #16]
   1e24a:	e7d7      	b.n	1e1fc <sensor_sim_sample_fetch+0x3c>
			accel_samples[0] = generate_sine(base_accel_samples[0],
   1e24c:	f016 fa94 	bl	34778 <generate_sine.constprop.2>
   1e250:	4c39      	ldr	r4, [pc, #228]	; (1e338 <sensor_sim_sample_fetch+0x178>)
   1e252:	e9c4 0100 	strd	r0, r1, [r4]
	return z_impl_k_sleep(timeout);
   1e256:	2100      	movs	r1, #0
   1e258:	2021      	movs	r0, #33	; 0x21
   1e25a:	f022 faf3 	bl	40844 <z_impl_k_sleep>
			accel_samples[1] = generate_sine(base_accel_samples[1],
   1e25e:	f016 fa8b 	bl	34778 <generate_sine.constprop.2>
   1e262:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[0] = static_val_coeff * max_variation;
   1e266:	4d32      	ldr	r5, [pc, #200]	; (1e330 <sensor_sim_sample_fetch+0x170>)
   1e268:	2100      	movs	r1, #0
   1e26a:	2021      	movs	r0, #33	; 0x21
   1e26c:	f022 faea 	bl	40844 <z_impl_k_sleep>
			accel_samples[2] = generate_sine(base_accel_samples[2],
   1e270:	f016 fa82 	bl	34778 <generate_sine.constprop.2>
			accel_samples[0] = static_val_coeff * max_variation;
   1e274:	6828      	ldr	r0, [r5, #0]
   1e276:	f7fe fa35 	bl	1c6e4 <__aeabi_i2d>
   1e27a:	2200      	movs	r2, #0
   1e27c:	4b2d      	ldr	r3, [pc, #180]	; (1e334 <sensor_sim_sample_fetch+0x174>)
   1e27e:	4606      	mov	r6, r0
   1e280:	460f      	mov	r7, r1
   1e282:	f7fe fa99 	bl	1c7b8 <__aeabi_dmul>
   1e286:	e9c4 0100 	strd	r0, r1, [r4]
			accel_samples[1] = static_val_coeff * max_variation;
   1e28a:	e9c4 0102 	strd	r0, r1, [r4, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1e28e:	e9c4 0104 	strd	r0, r1, [r4, #16]
		static_val_coeff *= -1.0;
   1e292:	4630      	mov	r0, r6
   1e294:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e298:	f7fe fd28 	bl	1ccec <__aeabi_d2iz>
   1e29c:	6028      	str	r0, [r5, #0]
	return retval;
   1e29e:	e7b3      	b.n	1e208 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2a0:	f024 fadc 	bl	4285c <rand>
   1e2a4:	f7fe fa1e 	bl	1c6e4 <__aeabi_i2d>
   1e2a8:	a31d      	add	r3, pc, #116	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2ae:	f7fe fbad 	bl	1ca0c <__aeabi_ddiv>
   1e2b2:	2200      	movs	r2, #0
   1e2b4:	4b21      	ldr	r3, [pc, #132]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e2b6:	f7fe f8c7 	bl	1c448 <__aeabi_dsub>
	temp_sample = base_temp_sample + generate_pseudo_random();
   1e2ba:	4b21      	ldr	r3, [pc, #132]	; (1e340 <sensor_sim_sample_fetch+0x180>)
   1e2bc:	2200      	movs	r2, #0
   1e2be:	f7fe f8c5 	bl	1c44c <__adddf3>
   1e2c2:	4b20      	ldr	r3, [pc, #128]	; (1e344 <sensor_sim_sample_fetch+0x184>)
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e2c4:	e9c3 0100 	strd	r0, r1, [r3]
   1e2c8:	e79e      	b.n	1e208 <sensor_sim_sample_fetch+0x48>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2ca:	f024 fac7 	bl	4285c <rand>
   1e2ce:	f7fe fa09 	bl	1c6e4 <__aeabi_i2d>
   1e2d2:	a313      	add	r3, pc, #76	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2d8:	f7fe fb98 	bl	1ca0c <__aeabi_ddiv>
   1e2dc:	2200      	movs	r2, #0
   1e2de:	4b17      	ldr	r3, [pc, #92]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e2e0:	f7fe f8b2 	bl	1c448 <__aeabi_dsub>
	humidity_sample = base_humidity_sample + generate_pseudo_random();
   1e2e4:	4b18      	ldr	r3, [pc, #96]	; (1e348 <sensor_sim_sample_fetch+0x188>)
   1e2e6:	2200      	movs	r2, #0
   1e2e8:	f7fe f8b0 	bl	1c44c <__adddf3>
   1e2ec:	4b17      	ldr	r3, [pc, #92]	; (1e34c <sensor_sim_sample_fetch+0x18c>)
   1e2ee:	e7e9      	b.n	1e2c4 <sensor_sim_sample_fetch+0x104>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2f0:	f024 fab4 	bl	4285c <rand>
   1e2f4:	f7fe f9f6 	bl	1c6e4 <__aeabi_i2d>
   1e2f8:	a309      	add	r3, pc, #36	; (adr r3, 1e320 <sensor_sim_sample_fetch+0x160>)
   1e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2fe:	f7fe fb85 	bl	1ca0c <__aeabi_ddiv>
   1e302:	2200      	movs	r2, #0
   1e304:	4b0d      	ldr	r3, [pc, #52]	; (1e33c <sensor_sim_sample_fetch+0x17c>)
   1e306:	f7fe f89f 	bl	1c448 <__aeabi_dsub>
	pressure_sample = base_pressure_sample + generate_pseudo_random();
   1e30a:	a307      	add	r3, pc, #28	; (adr r3, 1e328 <sensor_sim_sample_fetch+0x168>)
   1e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e310:	f7fe f89c 	bl	1c44c <__adddf3>
   1e314:	4b0e      	ldr	r3, [pc, #56]	; (1e350 <sensor_sim_sample_fetch+0x190>)
   1e316:	e7d5      	b.n	1e2c4 <sensor_sim_sample_fetch+0x104>
		return -ENOTSUP;
   1e318:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
   1e31c:	e775      	b.n	1e20a <sensor_sim_sample_fetch+0x4a>
   1e31e:	bf00      	nop
   1e320:	ffc00000 	.word	0xffc00000
   1e324:	41cfffff 	.word	0x41cfffff
   1e328:	cccccccd 	.word	0xcccccccd
   1e32c:	40588ccc 	.word	0x40588ccc
   1e330:	200208c8 	.word	0x200208c8
   1e334:	40340000 	.word	0x40340000
   1e338:	20023a20 	.word	0x20023a20
   1e33c:	3ff00000 	.word	0x3ff00000
   1e340:	40350000 	.word	0x40350000
   1e344:	20023d48 	.word	0x20023d48
   1e348:	404a0000 	.word	0x404a0000
   1e34c:	20023a38 	.word	0x20023a38
   1e350:	20023a40 	.word	0x20023a40
   1e354:	00000000 	.word	0x00000000

0001e358 <sin>:
   1e358:	ec51 0b10 	vmov	r0, r1, d0
   1e35c:	4a2c      	ldr	r2, [pc, #176]	; (1e410 <sin+0xb8>)
   1e35e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1e362:	4293      	cmp	r3, r2
   1e364:	b500      	push	{lr}
   1e366:	b085      	sub	sp, #20
   1e368:	dd27      	ble.n	1e3ba <sin+0x62>
   1e36a:	4a2a      	ldr	r2, [pc, #168]	; (1e414 <sin+0xbc>)
   1e36c:	4293      	cmp	r3, r2
   1e36e:	dd09      	ble.n	1e384 <sin+0x2c>
   1e370:	ee10 2a10 	vmov	r2, s0
   1e374:	460b      	mov	r3, r1
   1e376:	f7fe f867 	bl	1c448 <__aeabi_dsub>
   1e37a:	ec41 0b10 	vmov	d0, r0, r1
   1e37e:	b005      	add	sp, #20
   1e380:	f85d fb04 	ldr.w	pc, [sp], #4
   1e384:	4668      	mov	r0, sp
   1e386:	f000 f847 	bl	1e418 <__ieee754_rem_pio2>
   1e38a:	f000 0003 	and.w	r0, r0, #3
   1e38e:	2801      	cmp	r0, #1
   1e390:	d01f      	beq.n	1e3d2 <sin+0x7a>
   1e392:	2802      	cmp	r0, #2
   1e394:	d030      	beq.n	1e3f8 <sin+0xa0>
   1e396:	b328      	cbz	r0, 1e3e4 <sin+0x8c>
   1e398:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e39c:	ed9d 0b00 	vldr	d0, [sp]
   1e3a0:	f000 fa56 	bl	1e850 <__kernel_cos>
   1e3a4:	ee10 0a10 	vmov	r0, s0
   1e3a8:	ec53 2b10 	vmov	r2, r3, d0
   1e3ac:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1e3b0:	ec41 0b10 	vmov	d0, r0, r1
   1e3b4:	b005      	add	sp, #20
   1e3b6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3ba:	2000      	movs	r0, #0
   1e3bc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 1e408 <sin+0xb0>
   1e3c0:	f000 ff9e 	bl	1f300 <__kernel_sin>
   1e3c4:	ec51 0b10 	vmov	r0, r1, d0
   1e3c8:	ec41 0b10 	vmov	d0, r0, r1
   1e3cc:	b005      	add	sp, #20
   1e3ce:	f85d fb04 	ldr.w	pc, [sp], #4
   1e3d2:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3d6:	ed9d 0b00 	vldr	d0, [sp]
   1e3da:	f000 fa39 	bl	1e850 <__kernel_cos>
   1e3de:	ec51 0b10 	vmov	r0, r1, d0
   1e3e2:	e7ca      	b.n	1e37a <sin+0x22>
   1e3e4:	2001      	movs	r0, #1
   1e3e6:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3ea:	ed9d 0b00 	vldr	d0, [sp]
   1e3ee:	f000 ff87 	bl	1f300 <__kernel_sin>
   1e3f2:	ec51 0b10 	vmov	r0, r1, d0
   1e3f6:	e7c0      	b.n	1e37a <sin+0x22>
   1e3f8:	2001      	movs	r0, #1
   1e3fa:	ed9d 1b02 	vldr	d1, [sp, #8]
   1e3fe:	ed9d 0b00 	vldr	d0, [sp]
   1e402:	f000 ff7d 	bl	1f300 <__kernel_sin>
   1e406:	e7cd      	b.n	1e3a4 <sin+0x4c>
	...
   1e410:	3fe921fb 	.word	0x3fe921fb
   1e414:	7fefffff 	.word	0x7fefffff

0001e418 <__ieee754_rem_pio2>:
   1e418:	ec53 2b10 	vmov	r2, r3, d0
   1e41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e420:	4999      	ldr	r1, [pc, #612]	; (1e688 <__ieee754_rem_pio2+0x270>)
   1e422:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   1e426:	b08f      	sub	sp, #60	; 0x3c
   1e428:	428d      	cmp	r5, r1
   1e42a:	f340 8088 	ble.w	1e53e <__ieee754_rem_pio2+0x126>
   1e42e:	4997      	ldr	r1, [pc, #604]	; (1e68c <__ieee754_rem_pio2+0x274>)
   1e430:	461e      	mov	r6, r3
   1e432:	4604      	mov	r4, r0
   1e434:	428d      	cmp	r5, r1
   1e436:	dc29      	bgt.n	1e48c <__ieee754_rem_pio2+0x74>
   1e438:	2e00      	cmp	r6, #0
   1e43a:	4619      	mov	r1, r3
   1e43c:	ee10 0a10 	vmov	r0, s0
   1e440:	a387      	add	r3, pc, #540	; (adr r3, 1e660 <__ieee754_rem_pio2+0x248>)
   1e442:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e446:	f340 81ae 	ble.w	1e7a6 <__ieee754_rem_pio2+0x38e>
   1e44a:	f7fd fffd 	bl	1c448 <__aeabi_dsub>
   1e44e:	4b90      	ldr	r3, [pc, #576]	; (1e690 <__ieee754_rem_pio2+0x278>)
   1e450:	4680      	mov	r8, r0
   1e452:	4689      	mov	r9, r1
   1e454:	429d      	cmp	r5, r3
   1e456:	f000 8088 	beq.w	1e56a <__ieee754_rem_pio2+0x152>
   1e45a:	2701      	movs	r7, #1
   1e45c:	a382      	add	r3, pc, #520	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e45e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e462:	f7fd fff1 	bl	1c448 <__aeabi_dsub>
   1e466:	4602      	mov	r2, r0
   1e468:	460b      	mov	r3, r1
   1e46a:	4640      	mov	r0, r8
   1e46c:	4649      	mov	r1, r9
   1e46e:	e9c4 2300 	strd	r2, r3, [r4]
   1e472:	f7fd ffe9 	bl	1c448 <__aeabi_dsub>
   1e476:	a37c      	add	r3, pc, #496	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e478:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e47c:	f7fd ffe4 	bl	1c448 <__aeabi_dsub>
   1e480:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e484:	4638      	mov	r0, r7
   1e486:	b00f      	add	sp, #60	; 0x3c
   1e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48c:	4981      	ldr	r1, [pc, #516]	; (1e694 <__ieee754_rem_pio2+0x27c>)
   1e48e:	428d      	cmp	r5, r1
   1e490:	f340 808b 	ble.w	1e5aa <__ieee754_rem_pio2+0x192>
   1e494:	4980      	ldr	r1, [pc, #512]	; (1e698 <__ieee754_rem_pio2+0x280>)
   1e496:	428d      	cmp	r5, r1
   1e498:	dc5c      	bgt.n	1e554 <__ieee754_rem_pio2+0x13c>
   1e49a:	152f      	asrs	r7, r5, #20
   1e49c:	ee10 0a10 	vmov	r0, s0
   1e4a0:	ee10 8a10 	vmov	r8, s0
   1e4a4:	f2a7 4716 	subw	r7, r7, #1046	; 0x416
   1e4a8:	eba5 5907 	sub.w	r9, r5, r7, lsl #20
   1e4ac:	4649      	mov	r1, r9
   1e4ae:	f7fe fc1d 	bl	1ccec <__aeabi_d2iz>
   1e4b2:	f7fe f917 	bl	1c6e4 <__aeabi_i2d>
   1e4b6:	4682      	mov	sl, r0
   1e4b8:	468b      	mov	fp, r1
   1e4ba:	4640      	mov	r0, r8
   1e4bc:	4649      	mov	r1, r9
   1e4be:	4652      	mov	r2, sl
   1e4c0:	465b      	mov	r3, fp
   1e4c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   1e4c6:	f7fd ffbf 	bl	1c448 <__aeabi_dsub>
   1e4ca:	2200      	movs	r2, #0
   1e4cc:	4b73      	ldr	r3, [pc, #460]	; (1e69c <__ieee754_rem_pio2+0x284>)
   1e4ce:	f7fe f973 	bl	1c7b8 <__aeabi_dmul>
   1e4d2:	4689      	mov	r9, r1
   1e4d4:	4680      	mov	r8, r0
   1e4d6:	f7fe fc09 	bl	1ccec <__aeabi_d2iz>
   1e4da:	4605      	mov	r5, r0
   1e4dc:	f7fe f902 	bl	1c6e4 <__aeabi_i2d>
   1e4e0:	4602      	mov	r2, r0
   1e4e2:	460b      	mov	r3, r1
   1e4e4:	4640      	mov	r0, r8
   1e4e6:	4649      	mov	r1, r9
   1e4e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1e4ec:	f7fd ffac 	bl	1c448 <__aeabi_dsub>
   1e4f0:	2200      	movs	r2, #0
   1e4f2:	4b6a      	ldr	r3, [pc, #424]	; (1e69c <__ieee754_rem_pio2+0x284>)
   1e4f4:	f7fe f960 	bl	1c7b8 <__aeabi_dmul>
   1e4f8:	2200      	movs	r2, #0
   1e4fa:	2300      	movs	r3, #0
   1e4fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1e500:	f7fe fbc2 	bl	1cc88 <__aeabi_dcmpeq>
   1e504:	2800      	cmp	r0, #0
   1e506:	f000 814c 	beq.w	1e7a2 <__ieee754_rem_pio2+0x38a>
   1e50a:	2d00      	cmp	r5, #0
   1e50c:	bf0c      	ite	eq
   1e50e:	2301      	moveq	r3, #1
   1e510:	2302      	movne	r3, #2
   1e512:	4963      	ldr	r1, [pc, #396]	; (1e6a0 <__ieee754_rem_pio2+0x288>)
   1e514:	2002      	movs	r0, #2
   1e516:	463a      	mov	r2, r7
   1e518:	9101      	str	r1, [sp, #4]
   1e51a:	4621      	mov	r1, r4
   1e51c:	9000      	str	r0, [sp, #0]
   1e51e:	a808      	add	r0, sp, #32
   1e520:	f000 fada 	bl	1ead8 <__kernel_rem_pio2>
   1e524:	2e00      	cmp	r6, #0
   1e526:	4607      	mov	r7, r0
   1e528:	daac      	bge.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e52a:	6862      	ldr	r2, [r4, #4]
   1e52c:	4247      	negs	r7, r0
   1e52e:	68e3      	ldr	r3, [r4, #12]
   1e530:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
   1e534:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   1e538:	6062      	str	r2, [r4, #4]
   1e53a:	60e3      	str	r3, [r4, #12]
   1e53c:	e7a2      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e53e:	2700      	movs	r7, #0
   1e540:	2400      	movs	r4, #0
   1e542:	2500      	movs	r5, #0
   1e544:	ed80 0b00 	vstr	d0, [r0]
   1e548:	e9c0 4502 	strd	r4, r5, [r0, #8]
   1e54c:	4638      	mov	r0, r7
   1e54e:	b00f      	add	sp, #60	; 0x3c
   1e550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e554:	ee10 0a10 	vmov	r0, s0
   1e558:	4619      	mov	r1, r3
   1e55a:	f7fd ff75 	bl	1c448 <__aeabi_dsub>
   1e55e:	2700      	movs	r7, #0
   1e560:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e564:	e9c4 0100 	strd	r0, r1, [r4]
   1e568:	e78c      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e56a:	a341      	add	r3, pc, #260	; (adr r3, 1e670 <__ieee754_rem_pio2+0x258>)
   1e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e570:	f7fd ff6a 	bl	1c448 <__aeabi_dsub>
   1e574:	4606      	mov	r6, r0
   1e576:	460f      	mov	r7, r1
   1e578:	a33f      	add	r3, pc, #252	; (adr r3, 1e678 <__ieee754_rem_pio2+0x260>)
   1e57a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e57e:	f7fd ff63 	bl	1c448 <__aeabi_dsub>
   1e582:	4602      	mov	r2, r0
   1e584:	460b      	mov	r3, r1
   1e586:	4630      	mov	r0, r6
   1e588:	4639      	mov	r1, r7
   1e58a:	2701      	movs	r7, #1
   1e58c:	e9c4 2300 	strd	r2, r3, [r4]
   1e590:	f7fd ff5a 	bl	1c448 <__aeabi_dsub>
   1e594:	a338      	add	r3, pc, #224	; (adr r3, 1e678 <__ieee754_rem_pio2+0x260>)
   1e596:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e59a:	f7fd ff55 	bl	1c448 <__aeabi_dsub>
   1e59e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e5a2:	4638      	mov	r0, r7
   1e5a4:	b00f      	add	sp, #60	; 0x3c
   1e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5aa:	f023 fbdb 	bl	41d64 <fabs>
   1e5ae:	ee10 0a10 	vmov	r0, s0
   1e5b2:	ec59 8b10 	vmov	r8, r9, d0
   1e5b6:	a332      	add	r3, pc, #200	; (adr r3, 1e680 <__ieee754_rem_pio2+0x268>)
   1e5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5bc:	4649      	mov	r1, r9
   1e5be:	f7fe f8fb 	bl	1c7b8 <__aeabi_dmul>
   1e5c2:	2200      	movs	r2, #0
   1e5c4:	4b37      	ldr	r3, [pc, #220]	; (1e6a4 <__ieee754_rem_pio2+0x28c>)
   1e5c6:	f7fd ff41 	bl	1c44c <__adddf3>
   1e5ca:	f7fe fb8f 	bl	1ccec <__aeabi_d2iz>
   1e5ce:	4607      	mov	r7, r0
   1e5d0:	f7fe f888 	bl	1c6e4 <__aeabi_i2d>
   1e5d4:	a322      	add	r3, pc, #136	; (adr r3, 1e660 <__ieee754_rem_pio2+0x248>)
   1e5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5da:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1e5de:	f7fe f8eb 	bl	1c7b8 <__aeabi_dmul>
   1e5e2:	4602      	mov	r2, r0
   1e5e4:	460b      	mov	r3, r1
   1e5e6:	4640      	mov	r0, r8
   1e5e8:	4649      	mov	r1, r9
   1e5ea:	f7fd ff2d 	bl	1c448 <__aeabi_dsub>
   1e5ee:	4682      	mov	sl, r0
   1e5f0:	468b      	mov	fp, r1
   1e5f2:	a31d      	add	r3, pc, #116	; (adr r3, 1e668 <__ieee754_rem_pio2+0x250>)
   1e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e5fc:	f7fe f8dc 	bl	1c7b8 <__aeabi_dmul>
   1e600:	2f1f      	cmp	r7, #31
   1e602:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e606:	dc51      	bgt.n	1e6ac <__ieee754_rem_pio2+0x294>
   1e608:	4602      	mov	r2, r0
   1e60a:	460b      	mov	r3, r1
   1e60c:	4650      	mov	r0, sl
   1e60e:	4659      	mov	r1, fp
   1e610:	f7fd ff1a 	bl	1c448 <__aeabi_dsub>
   1e614:	4b24      	ldr	r3, [pc, #144]	; (1e6a8 <__ieee754_rem_pio2+0x290>)
   1e616:	1e7a      	subs	r2, r7, #1
   1e618:	4680      	mov	r8, r0
   1e61a:	4689      	mov	r9, r1
   1e61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1e620:	42ab      	cmp	r3, r5
   1e622:	d04b      	beq.n	1e6bc <__ieee754_rem_pio2+0x2a4>
   1e624:	4642      	mov	r2, r8
   1e626:	464b      	mov	r3, r9
   1e628:	4650      	mov	r0, sl
   1e62a:	4659      	mov	r1, fp
   1e62c:	e9c4 8900 	strd	r8, r9, [r4]
   1e630:	f7fd ff0a 	bl	1c448 <__aeabi_dsub>
   1e634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e638:	f7fd ff06 	bl	1c448 <__aeabi_dsub>
   1e63c:	2e00      	cmp	r6, #0
   1e63e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e642:	f6bf af1f 	bge.w	1e484 <__ieee754_rem_pio2+0x6c>
   1e646:	f109 4500 	add.w	r5, r9, #2147483648	; 0x80000000
   1e64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1e64e:	427f      	negs	r7, r7
   1e650:	e9c4 8500 	strd	r8, r5, [r4]
   1e654:	e9c4 0302 	strd	r0, r3, [r4, #8]
   1e658:	e714      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e65a:	bf00      	nop
   1e65c:	f3af 8000 	nop.w
   1e660:	54400000 	.word	0x54400000
   1e664:	3ff921fb 	.word	0x3ff921fb
   1e668:	1a626331 	.word	0x1a626331
   1e66c:	3dd0b461 	.word	0x3dd0b461
   1e670:	1a600000 	.word	0x1a600000
   1e674:	3dd0b461 	.word	0x3dd0b461
   1e678:	2e037073 	.word	0x2e037073
   1e67c:	3ba3198a 	.word	0x3ba3198a
   1e680:	6dc9c883 	.word	0x6dc9c883
   1e684:	3fe45f30 	.word	0x3fe45f30
   1e688:	3fe921fb 	.word	0x3fe921fb
   1e68c:	4002d97b 	.word	0x4002d97b
   1e690:	3ff921fb 	.word	0x3ff921fb
   1e694:	413921fb 	.word	0x413921fb
   1e698:	7fefffff 	.word	0x7fefffff
   1e69c:	41700000 	.word	0x41700000
   1e6a0:	0004a838 	.word	0x0004a838
   1e6a4:	3fe00000 	.word	0x3fe00000
   1e6a8:	0004a7b8 	.word	0x0004a7b8
   1e6ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1e6b0:	4650      	mov	r0, sl
   1e6b2:	4659      	mov	r1, fp
   1e6b4:	f7fd fec8 	bl	1c448 <__aeabi_dsub>
   1e6b8:	4680      	mov	r8, r0
   1e6ba:	4689      	mov	r9, r1
   1e6bc:	152d      	asrs	r5, r5, #20
   1e6be:	f3c9 530a 	ubfx	r3, r9, #20, #11
   1e6c2:	1aeb      	subs	r3, r5, r3
   1e6c4:	2b10      	cmp	r3, #16
   1e6c6:	ddad      	ble.n	1e624 <__ieee754_rem_pio2+0x20c>
   1e6c8:	a357      	add	r3, pc, #348	; (adr r3, 1e828 <__ieee754_rem_pio2+0x410>)
   1e6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e6d2:	f7fe f871 	bl	1c7b8 <__aeabi_dmul>
   1e6d6:	4680      	mov	r8, r0
   1e6d8:	4689      	mov	r9, r1
   1e6da:	4602      	mov	r2, r0
   1e6dc:	460b      	mov	r3, r1
   1e6de:	4650      	mov	r0, sl
   1e6e0:	4659      	mov	r1, fp
   1e6e2:	f7fd feb1 	bl	1c448 <__aeabi_dsub>
   1e6e6:	4602      	mov	r2, r0
   1e6e8:	460b      	mov	r3, r1
   1e6ea:	4650      	mov	r0, sl
   1e6ec:	4659      	mov	r1, fp
   1e6ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e6f2:	f7fd fea9 	bl	1c448 <__aeabi_dsub>
   1e6f6:	4642      	mov	r2, r8
   1e6f8:	464b      	mov	r3, r9
   1e6fa:	f7fd fea5 	bl	1c448 <__aeabi_dsub>
   1e6fe:	4680      	mov	r8, r0
   1e700:	4689      	mov	r9, r1
   1e702:	a34b      	add	r3, pc, #300	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e704:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e70c:	f7fe f854 	bl	1c7b8 <__aeabi_dmul>
   1e710:	4642      	mov	r2, r8
   1e712:	464b      	mov	r3, r9
   1e714:	f7fd fe98 	bl	1c448 <__aeabi_dsub>
   1e718:	460b      	mov	r3, r1
   1e71a:	4602      	mov	r2, r0
   1e71c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
   1e720:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e724:	4650      	mov	r0, sl
   1e726:	4659      	mov	r1, fp
   1e728:	f7fd fe8e 	bl	1c448 <__aeabi_dsub>
   1e72c:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1e730:	4680      	mov	r8, r0
   1e732:	4689      	mov	r9, r1
   1e734:	1aed      	subs	r5, r5, r3
   1e736:	2d31      	cmp	r5, #49	; 0x31
   1e738:	f77f af74 	ble.w	1e624 <__ieee754_rem_pio2+0x20c>
   1e73c:	a33f      	add	r3, pc, #252	; (adr r3, 1e83c <__ieee754_rem_pio2+0x424>)
   1e73e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e746:	f7fe f837 	bl	1c7b8 <__aeabi_dmul>
   1e74a:	4680      	mov	r8, r0
   1e74c:	4689      	mov	r9, r1
   1e74e:	4602      	mov	r2, r0
   1e750:	460b      	mov	r3, r1
   1e752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e756:	f7fd fe77 	bl	1c448 <__aeabi_dsub>
   1e75a:	4602      	mov	r2, r0
   1e75c:	460b      	mov	r3, r1
   1e75e:	4682      	mov	sl, r0
   1e760:	468b      	mov	fp, r1
   1e762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1e766:	f7fd fe6f 	bl	1c448 <__aeabi_dsub>
   1e76a:	4642      	mov	r2, r8
   1e76c:	464b      	mov	r3, r9
   1e76e:	f7fd fe6b 	bl	1c448 <__aeabi_dsub>
   1e772:	4680      	mov	r8, r0
   1e774:	4689      	mov	r9, r1
   1e776:	a333      	add	r3, pc, #204	; (adr r3, 1e844 <__ieee754_rem_pio2+0x42c>)
   1e778:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1e780:	f7fe f81a 	bl	1c7b8 <__aeabi_dmul>
   1e784:	4642      	mov	r2, r8
   1e786:	464b      	mov	r3, r9
   1e788:	f7fd fe5e 	bl	1c448 <__aeabi_dsub>
   1e78c:	4602      	mov	r2, r0
   1e78e:	460b      	mov	r3, r1
   1e790:	4650      	mov	r0, sl
   1e792:	4659      	mov	r1, fp
   1e794:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e798:	f7fd fe56 	bl	1c448 <__aeabi_dsub>
   1e79c:	4680      	mov	r8, r0
   1e79e:	4689      	mov	r9, r1
   1e7a0:	e740      	b.n	1e624 <__ieee754_rem_pio2+0x20c>
   1e7a2:	2303      	movs	r3, #3
   1e7a4:	e6b5      	b.n	1e512 <__ieee754_rem_pio2+0xfa>
   1e7a6:	f7fd fe51 	bl	1c44c <__adddf3>
   1e7aa:	4b23      	ldr	r3, [pc, #140]	; (1e838 <__ieee754_rem_pio2+0x420>)
   1e7ac:	4680      	mov	r8, r0
   1e7ae:	4689      	mov	r9, r1
   1e7b0:	429d      	cmp	r5, r3
   1e7b2:	d016      	beq.n	1e7e2 <__ieee754_rem_pio2+0x3ca>
   1e7b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e7b8:	a319      	add	r3, pc, #100	; (adr r3, 1e820 <__ieee754_rem_pio2+0x408>)
   1e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7be:	f7fd fe45 	bl	1c44c <__adddf3>
   1e7c2:	4602      	mov	r2, r0
   1e7c4:	460b      	mov	r3, r1
   1e7c6:	4640      	mov	r0, r8
   1e7c8:	4649      	mov	r1, r9
   1e7ca:	e9c4 2300 	strd	r2, r3, [r4]
   1e7ce:	f7fd fe3b 	bl	1c448 <__aeabi_dsub>
   1e7d2:	a313      	add	r3, pc, #76	; (adr r3, 1e820 <__ieee754_rem_pio2+0x408>)
   1e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7d8:	f7fd fe38 	bl	1c44c <__adddf3>
   1e7dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e7e0:	e650      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e7e2:	a311      	add	r3, pc, #68	; (adr r3, 1e828 <__ieee754_rem_pio2+0x410>)
   1e7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7e8:	f7fd fe30 	bl	1c44c <__adddf3>
   1e7ec:	460f      	mov	r7, r1
   1e7ee:	4606      	mov	r6, r0
   1e7f0:	a30f      	add	r3, pc, #60	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e7f6:	f7fd fe29 	bl	1c44c <__adddf3>
   1e7fa:	4602      	mov	r2, r0
   1e7fc:	460b      	mov	r3, r1
   1e7fe:	4630      	mov	r0, r6
   1e800:	4639      	mov	r1, r7
   1e802:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1e806:	e9c4 2300 	strd	r2, r3, [r4]
   1e80a:	f7fd fe1d 	bl	1c448 <__aeabi_dsub>
   1e80e:	a308      	add	r3, pc, #32	; (adr r3, 1e830 <__ieee754_rem_pio2+0x418>)
   1e810:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e814:	f7fd fe1a 	bl	1c44c <__adddf3>
   1e818:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1e81c:	e632      	b.n	1e484 <__ieee754_rem_pio2+0x6c>
   1e81e:	bf00      	nop
   1e820:	1a626331 	.word	0x1a626331
   1e824:	3dd0b461 	.word	0x3dd0b461
   1e828:	1a600000 	.word	0x1a600000
   1e82c:	3dd0b461 	.word	0x3dd0b461
   1e830:	2e037073 	.word	0x2e037073
   1e834:	3ba3198a 	.word	0x3ba3198a
   1e838:	3ff921fb 	.word	0x3ff921fb
   1e83c:	2e000000 	.word	0x2e000000
   1e840:	3ba3198a 	.word	0x3ba3198a
   1e844:	252049c1 	.word	0x252049c1
   1e848:	397b839a 	.word	0x397b839a
   1e84c:	00000000 	.word	0x00000000

0001e850 <__kernel_cos>:
   1e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e854:	ec57 6b10 	vmov	r6, r7, d0
   1e858:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   1e85c:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
   1e860:	ed2d 8b02 	vpush	{d8}
   1e864:	eeb0 8a41 	vmov.f32	s16, s2
   1e868:	eef0 8a61 	vmov.f32	s17, s3
   1e86c:	b083      	sub	sp, #12
   1e86e:	da72      	bge.n	1e956 <__kernel_cos+0x106>
   1e870:	ee10 0a10 	vmov	r0, s0
   1e874:	4639      	mov	r1, r7
   1e876:	f7fe fa39 	bl	1ccec <__aeabi_d2iz>
   1e87a:	2800      	cmp	r0, #0
   1e87c:	f000 80f6 	beq.w	1ea6c <__kernel_cos+0x21c>
   1e880:	4632      	mov	r2, r6
   1e882:	463b      	mov	r3, r7
   1e884:	4630      	mov	r0, r6
   1e886:	4639      	mov	r1, r7
   1e888:	f7fd ff96 	bl	1c7b8 <__aeabi_dmul>
   1e88c:	4604      	mov	r4, r0
   1e88e:	460d      	mov	r5, r1
   1e890:	a37b      	add	r3, pc, #492	; (adr r3, 1ea80 <__kernel_cos+0x230>)
   1e892:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e896:	f7fd ff8f 	bl	1c7b8 <__aeabi_dmul>
   1e89a:	a37b      	add	r3, pc, #492	; (adr r3, 1ea88 <__kernel_cos+0x238>)
   1e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8a0:	f7fd fdd4 	bl	1c44c <__adddf3>
   1e8a4:	4622      	mov	r2, r4
   1e8a6:	462b      	mov	r3, r5
   1e8a8:	f7fd ff86 	bl	1c7b8 <__aeabi_dmul>
   1e8ac:	a378      	add	r3, pc, #480	; (adr r3, 1ea90 <__kernel_cos+0x240>)
   1e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8b2:	f7fd fdc9 	bl	1c448 <__aeabi_dsub>
   1e8b6:	4622      	mov	r2, r4
   1e8b8:	462b      	mov	r3, r5
   1e8ba:	f7fd ff7d 	bl	1c7b8 <__aeabi_dmul>
   1e8be:	a376      	add	r3, pc, #472	; (adr r3, 1ea98 <__kernel_cos+0x248>)
   1e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8c4:	f7fd fdc2 	bl	1c44c <__adddf3>
   1e8c8:	4622      	mov	r2, r4
   1e8ca:	462b      	mov	r3, r5
   1e8cc:	f7fd ff74 	bl	1c7b8 <__aeabi_dmul>
   1e8d0:	a373      	add	r3, pc, #460	; (adr r3, 1eaa0 <__kernel_cos+0x250>)
   1e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8d6:	f7fd fdb7 	bl	1c448 <__aeabi_dsub>
   1e8da:	4622      	mov	r2, r4
   1e8dc:	462b      	mov	r3, r5
   1e8de:	f7fd ff6b 	bl	1c7b8 <__aeabi_dmul>
   1e8e2:	a371      	add	r3, pc, #452	; (adr r3, 1eaa8 <__kernel_cos+0x258>)
   1e8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8e8:	f7fd fdb0 	bl	1c44c <__adddf3>
   1e8ec:	4622      	mov	r2, r4
   1e8ee:	462b      	mov	r3, r5
   1e8f0:	f7fd ff62 	bl	1c7b8 <__aeabi_dmul>
   1e8f4:	4682      	mov	sl, r0
   1e8f6:	468b      	mov	fp, r1
   1e8f8:	2200      	movs	r2, #0
   1e8fa:	4b71      	ldr	r3, [pc, #452]	; (1eac0 <__kernel_cos+0x270>)
   1e8fc:	4620      	mov	r0, r4
   1e8fe:	4629      	mov	r1, r5
   1e900:	f7fd ff5a 	bl	1c7b8 <__aeabi_dmul>
   1e904:	4652      	mov	r2, sl
   1e906:	4680      	mov	r8, r0
   1e908:	4689      	mov	r9, r1
   1e90a:	465b      	mov	r3, fp
   1e90c:	4620      	mov	r0, r4
   1e90e:	4629      	mov	r1, r5
   1e910:	f7fd ff52 	bl	1c7b8 <__aeabi_dmul>
   1e914:	4604      	mov	r4, r0
   1e916:	460d      	mov	r5, r1
   1e918:	4630      	mov	r0, r6
   1e91a:	4639      	mov	r1, r7
   1e91c:	ec53 2b18 	vmov	r2, r3, d8
   1e920:	f7fd ff4a 	bl	1c7b8 <__aeabi_dmul>
   1e924:	4602      	mov	r2, r0
   1e926:	460b      	mov	r3, r1
   1e928:	4620      	mov	r0, r4
   1e92a:	4629      	mov	r1, r5
   1e92c:	f7fd fd8c 	bl	1c448 <__aeabi_dsub>
   1e930:	4602      	mov	r2, r0
   1e932:	460b      	mov	r3, r1
   1e934:	4640      	mov	r0, r8
   1e936:	4649      	mov	r1, r9
   1e938:	f7fd fd86 	bl	1c448 <__aeabi_dsub>
   1e93c:	4602      	mov	r2, r0
   1e93e:	460b      	mov	r3, r1
   1e940:	2000      	movs	r0, #0
   1e942:	4960      	ldr	r1, [pc, #384]	; (1eac4 <__kernel_cos+0x274>)
   1e944:	f7fd fd80 	bl	1c448 <__aeabi_dsub>
   1e948:	ec41 0b10 	vmov	d0, r0, r1
   1e94c:	b003      	add	sp, #12
   1e94e:	ecbd 8b02 	vpop	{d8}
   1e952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e956:	ee10 2a10 	vmov	r2, s0
   1e95a:	ee10 0a10 	vmov	r0, s0
   1e95e:	463b      	mov	r3, r7
   1e960:	4639      	mov	r1, r7
   1e962:	f7fd ff29 	bl	1c7b8 <__aeabi_dmul>
   1e966:	4604      	mov	r4, r0
   1e968:	460d      	mov	r5, r1
   1e96a:	a345      	add	r3, pc, #276	; (adr r3, 1ea80 <__kernel_cos+0x230>)
   1e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e970:	f7fd ff22 	bl	1c7b8 <__aeabi_dmul>
   1e974:	a344      	add	r3, pc, #272	; (adr r3, 1ea88 <__kernel_cos+0x238>)
   1e976:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e97a:	f7fd fd67 	bl	1c44c <__adddf3>
   1e97e:	4622      	mov	r2, r4
   1e980:	462b      	mov	r3, r5
   1e982:	f7fd ff19 	bl	1c7b8 <__aeabi_dmul>
   1e986:	a342      	add	r3, pc, #264	; (adr r3, 1ea90 <__kernel_cos+0x240>)
   1e988:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e98c:	f7fd fd5c 	bl	1c448 <__aeabi_dsub>
   1e990:	4622      	mov	r2, r4
   1e992:	462b      	mov	r3, r5
   1e994:	f7fd ff10 	bl	1c7b8 <__aeabi_dmul>
   1e998:	a33f      	add	r3, pc, #252	; (adr r3, 1ea98 <__kernel_cos+0x248>)
   1e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e99e:	f7fd fd55 	bl	1c44c <__adddf3>
   1e9a2:	4622      	mov	r2, r4
   1e9a4:	462b      	mov	r3, r5
   1e9a6:	f7fd ff07 	bl	1c7b8 <__aeabi_dmul>
   1e9aa:	a33d      	add	r3, pc, #244	; (adr r3, 1eaa0 <__kernel_cos+0x250>)
   1e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9b0:	f7fd fd4a 	bl	1c448 <__aeabi_dsub>
   1e9b4:	4622      	mov	r2, r4
   1e9b6:	462b      	mov	r3, r5
   1e9b8:	f7fd fefe 	bl	1c7b8 <__aeabi_dmul>
   1e9bc:	a33a      	add	r3, pc, #232	; (adr r3, 1eaa8 <__kernel_cos+0x258>)
   1e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e9c2:	f7fd fd43 	bl	1c44c <__adddf3>
   1e9c6:	462b      	mov	r3, r5
   1e9c8:	4622      	mov	r2, r4
   1e9ca:	f7fd fef5 	bl	1c7b8 <__aeabi_dmul>
   1e9ce:	4b3e      	ldr	r3, [pc, #248]	; (1eac8 <__kernel_cos+0x278>)
   1e9d0:	4682      	mov	sl, r0
   1e9d2:	468b      	mov	fp, r1
   1e9d4:	4599      	cmp	r9, r3
   1e9d6:	dd8f      	ble.n	1e8f8 <__kernel_cos+0xa8>
   1e9d8:	4b3c      	ldr	r3, [pc, #240]	; (1eacc <__kernel_cos+0x27c>)
   1e9da:	4599      	cmp	r9, r3
   1e9dc:	dc3d      	bgt.n	1ea5a <__kernel_cos+0x20a>
   1e9de:	2200      	movs	r2, #0
   1e9e0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
   1e9e4:	2000      	movs	r0, #0
   1e9e6:	4937      	ldr	r1, [pc, #220]	; (1eac4 <__kernel_cos+0x274>)
   1e9e8:	4690      	mov	r8, r2
   1e9ea:	4699      	mov	r9, r3
   1e9ec:	f7fd fd2c 	bl	1c448 <__aeabi_dsub>
   1e9f0:	e9cd 0100 	strd	r0, r1, [sp]
   1e9f4:	2200      	movs	r2, #0
   1e9f6:	4b32      	ldr	r3, [pc, #200]	; (1eac0 <__kernel_cos+0x270>)
   1e9f8:	4620      	mov	r0, r4
   1e9fa:	4629      	mov	r1, r5
   1e9fc:	f7fd fedc 	bl	1c7b8 <__aeabi_dmul>
   1ea00:	4642      	mov	r2, r8
   1ea02:	464b      	mov	r3, r9
   1ea04:	f7fd fd20 	bl	1c448 <__aeabi_dsub>
   1ea08:	4652      	mov	r2, sl
   1ea0a:	4680      	mov	r8, r0
   1ea0c:	4689      	mov	r9, r1
   1ea0e:	465b      	mov	r3, fp
   1ea10:	4620      	mov	r0, r4
   1ea12:	4629      	mov	r1, r5
   1ea14:	f7fd fed0 	bl	1c7b8 <__aeabi_dmul>
   1ea18:	4604      	mov	r4, r0
   1ea1a:	460d      	mov	r5, r1
   1ea1c:	4630      	mov	r0, r6
   1ea1e:	4639      	mov	r1, r7
   1ea20:	ec53 2b18 	vmov	r2, r3, d8
   1ea24:	f7fd fec8 	bl	1c7b8 <__aeabi_dmul>
   1ea28:	4602      	mov	r2, r0
   1ea2a:	460b      	mov	r3, r1
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	4629      	mov	r1, r5
   1ea30:	f7fd fd0a 	bl	1c448 <__aeabi_dsub>
   1ea34:	4602      	mov	r2, r0
   1ea36:	460b      	mov	r3, r1
   1ea38:	4640      	mov	r0, r8
   1ea3a:	4649      	mov	r1, r9
   1ea3c:	f7fd fd04 	bl	1c448 <__aeabi_dsub>
   1ea40:	4602      	mov	r2, r0
   1ea42:	460b      	mov	r3, r1
   1ea44:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ea48:	f7fd fcfe 	bl	1c448 <__aeabi_dsub>
   1ea4c:	ec41 0b10 	vmov	d0, r0, r1
   1ea50:	b003      	add	sp, #12
   1ea52:	ecbd 8b02 	vpop	{d8}
   1ea56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea5a:	ed9f 7b15 	vldr	d7, [pc, #84]	; 1eab0 <__kernel_cos+0x260>
   1ea5e:	f04f 0800 	mov.w	r8, #0
   1ea62:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1ead0 <__kernel_cos+0x280>
   1ea66:	ed8d 7b00 	vstr	d7, [sp]
   1ea6a:	e7c3      	b.n	1e9f4 <__kernel_cos+0x1a4>
   1ea6c:	ed9f 0b12 	vldr	d0, [pc, #72]	; 1eab8 <__kernel_cos+0x268>
   1ea70:	b003      	add	sp, #12
   1ea72:	ecbd 8b02 	vpop	{d8}
   1ea76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea7a:	bf00      	nop
   1ea7c:	f3af 8000 	nop.w
   1ea80:	be8838d4 	.word	0xbe8838d4
   1ea84:	bda8fae9 	.word	0xbda8fae9
   1ea88:	bdb4b1c4 	.word	0xbdb4b1c4
   1ea8c:	3e21ee9e 	.word	0x3e21ee9e
   1ea90:	809c52ad 	.word	0x809c52ad
   1ea94:	3e927e4f 	.word	0x3e927e4f
   1ea98:	19cb1590 	.word	0x19cb1590
   1ea9c:	3efa01a0 	.word	0x3efa01a0
   1eaa0:	16c15177 	.word	0x16c15177
   1eaa4:	3f56c16c 	.word	0x3f56c16c
   1eaa8:	5555554c 	.word	0x5555554c
   1eaac:	3fa55555 	.word	0x3fa55555
   1eab0:	00000000 	.word	0x00000000
   1eab4:	3fe70000 	.word	0x3fe70000
   1eab8:	00000000 	.word	0x00000000
   1eabc:	3ff00000 	.word	0x3ff00000
   1eac0:	3fe00000 	.word	0x3fe00000
   1eac4:	3ff00000 	.word	0x3ff00000
   1eac8:	3fd33332 	.word	0x3fd33332
   1eacc:	3fe90000 	.word	0x3fe90000
   1ead0:	3fd20000 	.word	0x3fd20000
   1ead4:	00000000 	.word	0x00000000

0001ead8 <__kernel_rem_pio2>:
   1ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eadc:	461c      	mov	r4, r3
   1eade:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
   1eae2:	f112 0f14 	cmn.w	r2, #20
   1eae6:	910b      	str	r1, [sp, #44]	; 0x2c
   1eae8:	f104 31ff 	add.w	r1, r4, #4294967295	; 0xffffffff
   1eaec:	9308      	str	r3, [sp, #32]
   1eaee:	9103      	str	r1, [sp, #12]
   1eaf0:	4bb1      	ldr	r3, [pc, #708]	; (1edb8 <__kernel_rem_pio2+0x2e0>)
   1eaf2:	99a2      	ldr	r1, [sp, #648]	; 0x288
   1eaf4:	9004      	str	r0, [sp, #16]
   1eaf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   1eafa:	9305      	str	r3, [sp, #20]
   1eafc:	f2c0 82c1 	blt.w	1f082 <__kernel_rem_pio2+0x5aa>
   1eb00:	1ed3      	subs	r3, r2, #3
   1eb02:	49ae      	ldr	r1, [pc, #696]	; (1edbc <__kernel_rem_pio2+0x2e4>)
   1eb04:	fb81 0103 	smull	r0, r1, r1, r3
   1eb08:	17db      	asrs	r3, r3, #31
   1eb0a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1eb0e:	9307      	str	r3, [sp, #28]
   1eb10:	3301      	adds	r3, #1
   1eb12:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   1eb16:	00db      	lsls	r3, r3, #3
   1eb18:	18d3      	adds	r3, r2, r3
   1eb1a:	9a07      	ldr	r2, [sp, #28]
   1eb1c:	9306      	str	r3, [sp, #24]
   1eb1e:	9b03      	ldr	r3, [sp, #12]
   1eb20:	1ad6      	subs	r6, r2, r3
   1eb22:	9a05      	ldr	r2, [sp, #20]
   1eb24:	eb12 0803 	adds.w	r8, r2, r3
   1eb28:	d414      	bmi.n	1eb54 <__kernel_rem_pio2+0x7c>
   1eb2a:	f108 0801 	add.w	r8, r8, #1
   1eb2e:	af20      	add	r7, sp, #128	; 0x80
   1eb30:	2400      	movs	r4, #0
   1eb32:	2500      	movs	r5, #0
   1eb34:	44b0      	add	r8, r6
   1eb36:	f8dd 928c 	ldr.w	r9, [sp, #652]	; 0x28c
   1eb3a:	2e00      	cmp	r6, #0
   1eb3c:	4620      	mov	r0, r4
   1eb3e:	4629      	mov	r1, r5
   1eb40:	db03      	blt.n	1eb4a <__kernel_rem_pio2+0x72>
   1eb42:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   1eb46:	f7fd fdcd 	bl	1c6e4 <__aeabi_i2d>
   1eb4a:	3601      	adds	r6, #1
   1eb4c:	4546      	cmp	r6, r8
   1eb4e:	e8e7 0102 	strd	r0, r1, [r7], #8
   1eb52:	d1f2      	bne.n	1eb3a <__kernel_rem_pio2+0x62>
   1eb54:	9b05      	ldr	r3, [sp, #20]
   1eb56:	2b00      	cmp	r3, #0
   1eb58:	9b08      	ldr	r3, [sp, #32]
   1eb5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1eb5e:	9301      	str	r3, [sp, #4]
   1eb60:	db29      	blt.n	1ebb6 <__kernel_rem_pio2+0xde>
   1eb62:	9a04      	ldr	r2, [sp, #16]
   1eb64:	a920      	add	r1, sp, #128	; 0x80
   1eb66:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1eb6a:	eb02 0803 	add.w	r8, r2, r3
   1eb6e:	eb01 0903 	add.w	r9, r1, r3
   1eb72:	aa72      	add	r2, sp, #456	; 0x1c8
   1eb74:	9b05      	ldr	r3, [sp, #20]
   1eb76:	eb02 0bc3 	add.w	fp, r2, r3, lsl #3
   1eb7a:	9b03      	ldr	r3, [sp, #12]
   1eb7c:	2b00      	cmp	r3, #0
   1eb7e:	f2c0 819e 	blt.w	1eebe <__kernel_rem_pio2+0x3e6>
   1eb82:	464d      	mov	r5, r9
   1eb84:	9c04      	ldr	r4, [sp, #16]
   1eb86:	2600      	movs	r6, #0
   1eb88:	2700      	movs	r7, #0
   1eb8a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1eb8e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1eb92:	f7fd fe11 	bl	1c7b8 <__aeabi_dmul>
   1eb96:	4602      	mov	r2, r0
   1eb98:	460b      	mov	r3, r1
   1eb9a:	4630      	mov	r0, r6
   1eb9c:	4639      	mov	r1, r7
   1eb9e:	f7fd fc55 	bl	1c44c <__adddf3>
   1eba2:	4544      	cmp	r4, r8
   1eba4:	4606      	mov	r6, r0
   1eba6:	460f      	mov	r7, r1
   1eba8:	d1ef      	bne.n	1eb8a <__kernel_rem_pio2+0xb2>
   1ebaa:	f109 0908 	add.w	r9, r9, #8
   1ebae:	e8ea 6702 	strd	r6, r7, [sl], #8
   1ebb2:	45da      	cmp	sl, fp
   1ebb4:	d1e1      	bne.n	1eb7a <__kernel_rem_pio2+0xa2>
   1ebb6:	9905      	ldr	r1, [sp, #20]
   1ebb8:	9a01      	ldr	r2, [sp, #4]
   1ebba:	9804      	ldr	r0, [sp, #16]
   1ebbc:	008b      	lsls	r3, r1, #2
   1ebbe:	9101      	str	r1, [sp, #4]
   1ebc0:	4402      	add	r2, r0
   1ebc2:	a80b      	add	r0, sp, #44	; 0x2c
   1ebc4:	4693      	mov	fp, r2
   1ebc6:	f1a3 0208 	sub.w	r2, r3, #8
   1ebca:	18c3      	adds	r3, r0, r3
   1ebcc:	930a      	str	r3, [sp, #40]	; 0x28
   1ebce:	ab0c      	add	r3, sp, #48	; 0x30
   1ebd0:	4413      	add	r3, r2
   1ebd2:	9309      	str	r3, [sp, #36]	; 0x24
   1ebd4:	9a01      	ldr	r2, [sp, #4]
   1ebd6:	a998      	add	r1, sp, #608	; 0x260
   1ebd8:	2a00      	cmp	r2, #0
   1ebda:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   1ebde:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
   1ebe2:	dd29      	ble.n	1ec38 <__kernel_rem_pio2+0x160>
   1ebe4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
   1ebe8:	f10d 0930 	add.w	r9, sp, #48	; 0x30
   1ebec:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
   1ebf0:	2200      	movs	r2, #0
   1ebf2:	4b73      	ldr	r3, [pc, #460]	; (1edc0 <__kernel_rem_pio2+0x2e8>)
   1ebf4:	4620      	mov	r0, r4
   1ebf6:	4629      	mov	r1, r5
   1ebf8:	f7fd fdde 	bl	1c7b8 <__aeabi_dmul>
   1ebfc:	f7fe f876 	bl	1ccec <__aeabi_d2iz>
   1ec00:	f7fd fd70 	bl	1c6e4 <__aeabi_i2d>
   1ec04:	2200      	movs	r2, #0
   1ec06:	4b6f      	ldr	r3, [pc, #444]	; (1edc4 <__kernel_rem_pio2+0x2ec>)
   1ec08:	4606      	mov	r6, r0
   1ec0a:	460f      	mov	r7, r1
   1ec0c:	f7fd fdd4 	bl	1c7b8 <__aeabi_dmul>
   1ec10:	4602      	mov	r2, r0
   1ec12:	460b      	mov	r3, r1
   1ec14:	4620      	mov	r0, r4
   1ec16:	4629      	mov	r1, r5
   1ec18:	f7fd fc16 	bl	1c448 <__aeabi_dsub>
   1ec1c:	f7fe f866 	bl	1ccec <__aeabi_d2iz>
   1ec20:	4639      	mov	r1, r7
   1ec22:	f849 0b04 	str.w	r0, [r9], #4
   1ec26:	4630      	mov	r0, r6
   1ec28:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
   1ec2c:	f7fd fc0e 	bl	1c44c <__adddf3>
   1ec30:	4604      	mov	r4, r0
   1ec32:	45d0      	cmp	r8, sl
   1ec34:	460d      	mov	r5, r1
   1ec36:	d1db      	bne.n	1ebf0 <__kernel_rem_pio2+0x118>
   1ec38:	f8dd 9018 	ldr.w	r9, [sp, #24]
   1ec3c:	ec45 4b10 	vmov	d0, r4, r5
   1ec40:	4648      	mov	r0, r9
   1ec42:	f000 fcad 	bl	1f5a0 <scalbn>
   1ec46:	2200      	movs	r2, #0
   1ec48:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1ec4c:	ee10 0a10 	vmov	r0, s0
   1ec50:	ec55 4b10 	vmov	r4, r5, d0
   1ec54:	4629      	mov	r1, r5
   1ec56:	f7fd fdaf 	bl	1c7b8 <__aeabi_dmul>
   1ec5a:	ec41 0b10 	vmov	d0, r0, r1
   1ec5e:	f000 fc1b 	bl	1f498 <floor>
   1ec62:	2200      	movs	r2, #0
   1ec64:	4b58      	ldr	r3, [pc, #352]	; (1edc8 <__kernel_rem_pio2+0x2f0>)
   1ec66:	ec51 0b10 	vmov	r0, r1, d0
   1ec6a:	f7fd fda5 	bl	1c7b8 <__aeabi_dmul>
   1ec6e:	4602      	mov	r2, r0
   1ec70:	460b      	mov	r3, r1
   1ec72:	4620      	mov	r0, r4
   1ec74:	4629      	mov	r1, r5
   1ec76:	f7fd fbe7 	bl	1c448 <__aeabi_dsub>
   1ec7a:	460d      	mov	r5, r1
   1ec7c:	4604      	mov	r4, r0
   1ec7e:	f7fe f835 	bl	1ccec <__aeabi_d2iz>
   1ec82:	4680      	mov	r8, r0
   1ec84:	f7fd fd2e 	bl	1c6e4 <__aeabi_i2d>
   1ec88:	460b      	mov	r3, r1
   1ec8a:	4602      	mov	r2, r0
   1ec8c:	4629      	mov	r1, r5
   1ec8e:	4620      	mov	r0, r4
   1ec90:	f7fd fbda 	bl	1c448 <__aeabi_dsub>
   1ec94:	464b      	mov	r3, r9
   1ec96:	4606      	mov	r6, r0
   1ec98:	460f      	mov	r7, r1
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	f340 8096 	ble.w	1edcc <__kernel_rem_pio2+0x2f4>
   1eca0:	9a01      	ldr	r2, [sp, #4]
   1eca2:	a90c      	add	r1, sp, #48	; 0x30
   1eca4:	f1c9 0318 	rsb	r3, r9, #24
   1eca8:	f1c9 0517 	rsb	r5, r9, #23
   1ecac:	3a01      	subs	r2, #1
   1ecae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   1ecb2:	fa41 f003 	asr.w	r0, r1, r3
   1ecb6:	fa00 f303 	lsl.w	r3, r0, r3
   1ecba:	4480      	add	r8, r0
   1ecbc:	1acb      	subs	r3, r1, r3
   1ecbe:	a90c      	add	r1, sp, #48	; 0x30
   1ecc0:	fa43 f505 	asr.w	r5, r3, r5
   1ecc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ecc8:	2d00      	cmp	r5, #0
   1ecca:	f300 8089 	bgt.w	1ede0 <__kernel_rem_pio2+0x308>
   1ecce:	2200      	movs	r2, #0
   1ecd0:	2300      	movs	r3, #0
   1ecd2:	4630      	mov	r0, r6
   1ecd4:	4639      	mov	r1, r7
   1ecd6:	f7fd ffd7 	bl	1cc88 <__aeabi_dcmpeq>
   1ecda:	2800      	cmp	r0, #0
   1ecdc:	f000 8297 	beq.w	1f20e <__kernel_ram_size+0x6e>
   1ece0:	9901      	ldr	r1, [sp, #4]
   1ece2:	9b05      	ldr	r3, [sp, #20]
   1ece4:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1ece8:	454b      	cmp	r3, r9
   1ecea:	dc10      	bgt.n	1ed0e <__kernel_rem_pio2+0x236>
   1ecec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   1ecf0:	2200      	movs	r2, #0
   1ecf2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ecf4:	440b      	add	r3, r1
   1ecf6:	a90c      	add	r1, sp, #48	; 0x30
   1ecf8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1ecfc:	f853 1904 	ldr.w	r1, [r3], #-4
   1ed00:	4283      	cmp	r3, r0
   1ed02:	ea42 0201 	orr.w	r2, r2, r1
   1ed06:	d1f9      	bne.n	1ecfc <__kernel_rem_pio2+0x224>
   1ed08:	2a00      	cmp	r2, #0
   1ed0a:	f040 80e2 	bne.w	1eed2 <__kernel_rem_pio2+0x3fa>
   1ed0e:	9b05      	ldr	r3, [sp, #20]
   1ed10:	aa0c      	add	r2, sp, #48	; 0x30
   1ed12:	3b01      	subs	r3, #1
   1ed14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ed18:	2b00      	cmp	r3, #0
   1ed1a:	f040 80cb 	bne.w	1eeb4 <__kernel_rem_pio2+0x3dc>
   1ed1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ed20:	2301      	movs	r3, #1
   1ed22:	f852 1904 	ldr.w	r1, [r2], #-4
   1ed26:	3301      	adds	r3, #1
   1ed28:	2900      	cmp	r1, #0
   1ed2a:	d0fa      	beq.n	1ed22 <__kernel_rem_pio2+0x24a>
   1ed2c:	9901      	ldr	r1, [sp, #4]
   1ed2e:	1c4a      	adds	r2, r1, #1
   1ed30:	18cb      	adds	r3, r1, r3
   1ed32:	4691      	mov	r9, r2
   1ed34:	9302      	str	r3, [sp, #8]
   1ed36:	9b07      	ldr	r3, [sp, #28]
   1ed38:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1ed3c:	9901      	ldr	r1, [sp, #4]
   1ed3e:	18d3      	adds	r3, r2, r3
   1ed40:	9808      	ldr	r0, [sp, #32]
   1ed42:	449a      	add	sl, r3
   1ed44:	4401      	add	r1, r0
   1ed46:	ab20      	add	r3, sp, #128	; 0x80
   1ed48:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
   1ed4c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
   1ed4e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
   1ed52:	ab70      	add	r3, sp, #448	; 0x1c0
   1ed54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1ed58:	9301      	str	r3, [sp, #4]
   1ed5a:	f85a 0f04 	ldr.w	r0, [sl, #4]!
   1ed5e:	46a8      	mov	r8, r5
   1ed60:	f7fd fcc0 	bl	1c6e4 <__aeabi_i2d>
   1ed64:	460b      	mov	r3, r1
   1ed66:	9903      	ldr	r1, [sp, #12]
   1ed68:	4602      	mov	r2, r0
   1ed6a:	2900      	cmp	r1, #0
   1ed6c:	e8e8 2302 	strd	r2, r3, [r8], #8
   1ed70:	db1f      	blt.n	1edb2 <__kernel_rem_pio2+0x2da>
   1ed72:	9c04      	ldr	r4, [sp, #16]
   1ed74:	2600      	movs	r6, #0
   1ed76:	2700      	movs	r7, #0
   1ed78:	e001      	b.n	1ed7e <__kernel_rem_pio2+0x2a6>
   1ed7a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
   1ed7e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   1ed82:	f7fd fd19 	bl	1c7b8 <__aeabi_dmul>
   1ed86:	4602      	mov	r2, r0
   1ed88:	460b      	mov	r3, r1
   1ed8a:	4630      	mov	r0, r6
   1ed8c:	4639      	mov	r1, r7
   1ed8e:	f7fd fb5d 	bl	1c44c <__adddf3>
   1ed92:	455c      	cmp	r4, fp
   1ed94:	4606      	mov	r6, r0
   1ed96:	460f      	mov	r7, r1
   1ed98:	d1ef      	bne.n	1ed7a <__kernel_rem_pio2+0x2a2>
   1ed9a:	9b01      	ldr	r3, [sp, #4]
   1ed9c:	f109 0901 	add.w	r9, r9, #1
   1eda0:	4645      	mov	r5, r8
   1eda2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1eda6:	9301      	str	r3, [sp, #4]
   1eda8:	9b02      	ldr	r3, [sp, #8]
   1edaa:	4599      	cmp	r9, r3
   1edac:	ddd5      	ble.n	1ed5a <__kernel_rem_pio2+0x282>
   1edae:	9301      	str	r3, [sp, #4]
   1edb0:	e710      	b.n	1ebd4 <__kernel_rem_pio2+0xfc>
   1edb2:	2600      	movs	r6, #0
   1edb4:	2700      	movs	r7, #0
   1edb6:	e7f0      	b.n	1ed9a <__kernel_rem_pio2+0x2c2>
   1edb8:	0004a940 	.word	0x0004a940
   1edbc:	2aaaaaab 	.word	0x2aaaaaab
   1edc0:	3e700000 	.word	0x3e700000
   1edc4:	41700000 	.word	0x41700000
   1edc8:	40200000 	.word	0x40200000
   1edcc:	d169      	bne.n	1eea2 <__kernel_rem_pio2+0x3ca>
   1edce:	9b01      	ldr	r3, [sp, #4]
   1edd0:	aa0c      	add	r2, sp, #48	; 0x30
   1edd2:	3b01      	subs	r3, #1
   1edd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1edd8:	15ed      	asrs	r5, r5, #23
   1edda:	2d00      	cmp	r5, #0
   1eddc:	f77f af77 	ble.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ede0:	9b01      	ldr	r3, [sp, #4]
   1ede2:	f108 0801 	add.w	r8, r8, #1
   1ede6:	2b00      	cmp	r3, #0
   1ede8:	f340 820f 	ble.w	1f20a <__kernel_ram_size+0x6a>
   1edec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1edee:	2c00      	cmp	r4, #0
   1edf0:	d13a      	bne.n	1ee68 <__kernel_rem_pio2+0x390>
   1edf2:	9b01      	ldr	r3, [sp, #4]
   1edf4:	2b01      	cmp	r3, #1
   1edf6:	d009      	beq.n	1ee0c <__kernel_rem_pio2+0x334>
   1edf8:	a90c      	add	r1, sp, #48	; 0x30
   1edfa:	2201      	movs	r2, #1
   1edfc:	f851 4f04 	ldr.w	r4, [r1, #4]!
   1ee00:	1c53      	adds	r3, r2, #1
   1ee02:	bb9c      	cbnz	r4, 1ee6c <__kernel_rem_pio2+0x394>
   1ee04:	461a      	mov	r2, r3
   1ee06:	9b01      	ldr	r3, [sp, #4]
   1ee08:	4293      	cmp	r3, r2
   1ee0a:	d1f7      	bne.n	1edfc <__kernel_rem_pio2+0x324>
   1ee0c:	9b06      	ldr	r3, [sp, #24]
   1ee0e:	2b00      	cmp	r3, #0
   1ee10:	dd0e      	ble.n	1ee30 <__kernel_rem_pio2+0x358>
   1ee12:	2b01      	cmp	r3, #1
   1ee14:	f000 811a 	beq.w	1f04c <__kernel_rem_pio2+0x574>
   1ee18:	2b02      	cmp	r3, #2
   1ee1a:	d109      	bne.n	1ee30 <__kernel_rem_pio2+0x358>
   1ee1c:	9b01      	ldr	r3, [sp, #4]
   1ee1e:	a90c      	add	r1, sp, #48	; 0x30
   1ee20:	1e5a      	subs	r2, r3, #1
   1ee22:	ab0c      	add	r3, sp, #48	; 0x30
   1ee24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1ee28:	f3c3 0315 	ubfx	r3, r3, #0, #22
   1ee2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1ee30:	2d02      	cmp	r5, #2
   1ee32:	f47f af4c 	bne.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ee36:	4632      	mov	r2, r6
   1ee38:	463b      	mov	r3, r7
   1ee3a:	2000      	movs	r0, #0
   1ee3c:	4998      	ldr	r1, [pc, #608]	; (1f0a0 <__kernel_rem_pio2+0x5c8>)
   1ee3e:	f7fd fb03 	bl	1c448 <__aeabi_dsub>
   1ee42:	4606      	mov	r6, r0
   1ee44:	460f      	mov	r7, r1
   1ee46:	2c00      	cmp	r4, #0
   1ee48:	f43f af41 	beq.w	1ecce <__kernel_rem_pio2+0x1f6>
   1ee4c:	9806      	ldr	r0, [sp, #24]
   1ee4e:	ed9f 0b90 	vldr	d0, [pc, #576]	; 1f090 <__kernel_rem_pio2+0x5b8>
   1ee52:	f000 fba5 	bl	1f5a0 <scalbn>
   1ee56:	4630      	mov	r0, r6
   1ee58:	4639      	mov	r1, r7
   1ee5a:	ec53 2b10 	vmov	r2, r3, d0
   1ee5e:	f7fd faf3 	bl	1c448 <__aeabi_dsub>
   1ee62:	4606      	mov	r6, r0
   1ee64:	460f      	mov	r7, r1
   1ee66:	e732      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1ee68:	2301      	movs	r3, #1
   1ee6a:	2200      	movs	r2, #0
   1ee6c:	a90c      	add	r1, sp, #48	; 0x30
   1ee6e:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
   1ee72:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
   1ee76:	9901      	ldr	r1, [sp, #4]
   1ee78:	4299      	cmp	r1, r3
   1ee7a:	dd10      	ble.n	1ee9e <__kernel_rem_pio2+0x3c6>
   1ee7c:	a80c      	add	r0, sp, #48	; 0x30
   1ee7e:	aa0c      	add	r2, sp, #48	; 0x30
   1ee80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1ee84:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1ee88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ee8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
   1ee90:	e000      	b.n	1ee94 <__kernel_rem_pio2+0x3bc>
   1ee92:	681a      	ldr	r2, [r3, #0]
   1ee94:	1a8a      	subs	r2, r1, r2
   1ee96:	f843 2b04 	str.w	r2, [r3], #4
   1ee9a:	4283      	cmp	r3, r0
   1ee9c:	d1f9      	bne.n	1ee92 <__kernel_rem_pio2+0x3ba>
   1ee9e:	2401      	movs	r4, #1
   1eea0:	e7b4      	b.n	1ee0c <__kernel_rem_pio2+0x334>
   1eea2:	2200      	movs	r2, #0
   1eea4:	4b7f      	ldr	r3, [pc, #508]	; (1f0a4 <__kernel_rem_pio2+0x5cc>)
   1eea6:	f7fd ff0d 	bl	1ccc4 <__aeabi_dcmpge>
   1eeaa:	2800      	cmp	r0, #0
   1eeac:	f040 80d9 	bne.w	1f062 <__kernel_rem_pio2+0x58a>
   1eeb0:	4605      	mov	r5, r0
   1eeb2:	e70c      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1eeb4:	9b01      	ldr	r3, [sp, #4]
   1eeb6:	1c5a      	adds	r2, r3, #1
   1eeb8:	4691      	mov	r9, r2
   1eeba:	9202      	str	r2, [sp, #8]
   1eebc:	e73b      	b.n	1ed36 <__kernel_rem_pio2+0x25e>
   1eebe:	2600      	movs	r6, #0
   1eec0:	2700      	movs	r7, #0
   1eec2:	f109 0908 	add.w	r9, r9, #8
   1eec6:	e8ea 6702 	strd	r6, r7, [sl], #8
   1eeca:	45da      	cmp	sl, fp
   1eecc:	f47f ae55 	bne.w	1eb7a <__kernel_rem_pio2+0xa2>
   1eed0:	e671      	b.n	1ebb6 <__kernel_rem_pio2+0xde>
   1eed2:	9a06      	ldr	r2, [sp, #24]
   1eed4:	ab0c      	add	r3, sp, #48	; 0x30
   1eed6:	f8cd 801c 	str.w	r8, [sp, #28]
   1eeda:	3a18      	subs	r2, #24
   1eedc:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   1eee0:	9504      	str	r5, [sp, #16]
   1eee2:	9206      	str	r2, [sp, #24]
   1eee4:	b973      	cbnz	r3, 1ef04 <__kernel_rem_pio2+0x42c>
   1eee6:	4b70      	ldr	r3, [pc, #448]	; (1f0a8 <__kernel_rem_pio2+0x5d0>)
   1eee8:	9901      	ldr	r1, [sp, #4]
   1eeea:	4419      	add	r1, r3
   1eeec:	460b      	mov	r3, r1
   1eeee:	a90c      	add	r1, sp, #48	; 0x30
   1eef0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1eef4:	f853 1904 	ldr.w	r1, [r3], #-4
   1eef8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1eefc:	3a18      	subs	r2, #24
   1eefe:	2900      	cmp	r1, #0
   1ef00:	d0f8      	beq.n	1eef4 <__kernel_rem_pio2+0x41c>
   1ef02:	9206      	str	r2, [sp, #24]
   1ef04:	9806      	ldr	r0, [sp, #24]
   1ef06:	ed9f 0b62 	vldr	d0, [pc, #392]	; 1f090 <__kernel_rem_pio2+0x5b8>
   1ef0a:	f000 fb49 	bl	1f5a0 <scalbn>
   1ef0e:	f1b9 0f00 	cmp.w	r9, #0
   1ef12:	ec55 4b10 	vmov	r4, r5, d0
   1ef16:	f2c0 81da 	blt.w	1f2ce <__kernel_ram_size+0x12e>
   1ef1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1ef1e:	aa70      	add	r2, sp, #448	; 0x1c0
   1ef20:	f109 0601 	add.w	r6, r9, #1
   1ef24:	f04f 0a00 	mov.w	sl, #0
   1ef28:	eb02 0803 	add.w	r8, r2, r3
   1ef2c:	9306      	str	r3, [sp, #24]
   1ef2e:	ab0c      	add	r3, sp, #48	; 0x30
   1ef30:	f8df b178 	ldr.w	fp, [pc, #376]	; 1f0ac <__kernel_rem_pio2+0x5d4>
   1ef34:	f108 0708 	add.w	r7, r8, #8
   1ef38:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1ef3c:	f856 0d04 	ldr.w	r0, [r6, #-4]!
   1ef40:	f7fd fbd0 	bl	1c6e4 <__aeabi_i2d>
   1ef44:	4622      	mov	r2, r4
   1ef46:	462b      	mov	r3, r5
   1ef48:	f7fd fc36 	bl	1c7b8 <__aeabi_dmul>
   1ef4c:	465b      	mov	r3, fp
   1ef4e:	4652      	mov	r2, sl
   1ef50:	e967 0102 	strd	r0, r1, [r7, #-8]!
   1ef54:	4620      	mov	r0, r4
   1ef56:	4629      	mov	r1, r5
   1ef58:	f7fd fc2e 	bl	1c7b8 <__aeabi_dmul>
   1ef5c:	ab0c      	add	r3, sp, #48	; 0x30
   1ef5e:	4604      	mov	r4, r0
   1ef60:	460d      	mov	r5, r1
   1ef62:	429e      	cmp	r6, r3
   1ef64:	d1ea      	bne.n	1ef3c <__kernel_rem_pio2+0x464>
   1ef66:	ab48      	add	r3, sp, #288	; 0x120
   1ef68:	46c3      	mov	fp, r8
   1ef6a:	f04f 0a00 	mov.w	sl, #0
   1ef6e:	9303      	str	r3, [sp, #12]
   1ef70:	e9cd 3901 	strd	r3, r9, [sp, #4]
   1ef74:	f8dd 9014 	ldr.w	r9, [sp, #20]
   1ef78:	f1b9 0f00 	cmp.w	r9, #0
   1ef7c:	db2b      	blt.n	1efd6 <__kernel_rem_pio2+0x4fe>
   1ef7e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1f0b0 <__kernel_rem_pio2+0x5d8>
   1ef82:	465d      	mov	r5, fp
   1ef84:	2400      	movs	r4, #0
   1ef86:	2600      	movs	r6, #0
   1ef88:	2700      	movs	r7, #0
   1ef8a:	a343      	add	r3, pc, #268	; (adr r3, 1f098 <__kernel_rem_pio2+0x5c0>)
   1ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ef90:	e003      	b.n	1ef9a <__kernel_rem_pio2+0x4c2>
   1ef92:	4554      	cmp	r4, sl
   1ef94:	dc10      	bgt.n	1efb8 <__kernel_rem_pio2+0x4e0>
   1ef96:	e8f8 2302 	ldrd	r2, r3, [r8], #8
   1ef9a:	3401      	adds	r4, #1
   1ef9c:	e8f5 0102 	ldrd	r0, r1, [r5], #8
   1efa0:	f7fd fc0a 	bl	1c7b8 <__aeabi_dmul>
   1efa4:	4602      	mov	r2, r0
   1efa6:	460b      	mov	r3, r1
   1efa8:	4630      	mov	r0, r6
   1efaa:	4639      	mov	r1, r7
   1efac:	f7fd fa4e 	bl	1c44c <__adddf3>
   1efb0:	45a1      	cmp	r9, r4
   1efb2:	4606      	mov	r6, r0
   1efb4:	460f      	mov	r7, r1
   1efb6:	daec      	bge.n	1ef92 <__kernel_rem_pio2+0x4ba>
   1efb8:	9a02      	ldr	r2, [sp, #8]
   1efba:	f1ab 0b08 	sub.w	fp, fp, #8
   1efbe:	9b01      	ldr	r3, [sp, #4]
   1efc0:	4592      	cmp	sl, r2
   1efc2:	e8e3 6702 	strd	r6, r7, [r3], #8
   1efc6:	9301      	str	r3, [sp, #4]
   1efc8:	f10a 0301 	add.w	r3, sl, #1
   1efcc:	d006      	beq.n	1efdc <__kernel_rem_pio2+0x504>
   1efce:	f1b9 0f00 	cmp.w	r9, #0
   1efd2:	469a      	mov	sl, r3
   1efd4:	dad3      	bge.n	1ef7e <__kernel_rem_pio2+0x4a6>
   1efd6:	2600      	movs	r6, #0
   1efd8:	2700      	movs	r7, #0
   1efda:	e7ed      	b.n	1efb8 <__kernel_rem_pio2+0x4e0>
   1efdc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1efde:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1efe2:	2b03      	cmp	r3, #3
   1efe4:	d82b      	bhi.n	1f03e <__kernel_rem_pio2+0x566>
   1efe6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1efea:	00f5      	.short	0x00f5
   1efec:	00e400e4 	.word	0x00e400e4
   1eff0:	0067      	.short	0x0067
   1eff2:	ab48      	add	r3, sp, #288	; 0x120
   1eff4:	2400      	movs	r4, #0
   1eff6:	2500      	movs	r5, #0
   1eff8:	9303      	str	r3, [sp, #12]
   1effa:	9903      	ldr	r1, [sp, #12]
   1effc:	462b      	mov	r3, r5
   1effe:	4622      	mov	r2, r4
   1f000:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f004:	f7fd fa20 	bl	1c448 <__aeabi_dsub>
   1f008:	9b04      	ldr	r3, [sp, #16]
   1f00a:	2b00      	cmp	r3, #0
   1f00c:	f040 813e 	bne.w	1f28c <__kernel_ram_size+0xec>
   1f010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f012:	f1b9 0f00 	cmp.w	r9, #0
   1f016:	e9c3 4500 	strd	r4, r5, [r3]
   1f01a:	dd0d      	ble.n	1f038 <__kernel_rem_pio2+0x560>
   1f01c:	ad4a      	add	r5, sp, #296	; 0x128
   1f01e:	2401      	movs	r4, #1
   1f020:	3401      	adds	r4, #1
   1f022:	e8f5 2302 	ldrd	r2, r3, [r5], #8
   1f026:	f7fd fa11 	bl	1c44c <__adddf3>
   1f02a:	45a1      	cmp	r9, r4
   1f02c:	daf8      	bge.n	1f020 <__kernel_rem_pio2+0x548>
   1f02e:	9b04      	ldr	r3, [sp, #16]
   1f030:	b113      	cbz	r3, 1f038 <__kernel_rem_pio2+0x560>
   1f032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f036:	4619      	mov	r1, r3
   1f038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f03a:	e9c3 0102 	strd	r0, r1, [r3, #8]
   1f03e:	9b07      	ldr	r3, [sp, #28]
   1f040:	f003 0007 	and.w	r0, r3, #7
   1f044:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f04c:	9b01      	ldr	r3, [sp, #4]
   1f04e:	a90c      	add	r1, sp, #48	; 0x30
   1f050:	1e5a      	subs	r2, r3, #1
   1f052:	ab0c      	add	r3, sp, #48	; 0x30
   1f054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1f058:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1f05c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
   1f060:	e6e6      	b.n	1ee30 <__kernel_rem_pio2+0x358>
   1f062:	9b01      	ldr	r3, [sp, #4]
   1f064:	f108 0801 	add.w	r8, r8, #1
   1f068:	2502      	movs	r5, #2
   1f06a:	2b00      	cmp	r3, #0
   1f06c:	f73f aebe 	bgt.w	1edec <__kernel_rem_pio2+0x314>
   1f070:	4632      	mov	r2, r6
   1f072:	463b      	mov	r3, r7
   1f074:	2000      	movs	r0, #0
   1f076:	490a      	ldr	r1, [pc, #40]	; (1f0a0 <__kernel_rem_pio2+0x5c8>)
   1f078:	f7fd f9e6 	bl	1c448 <__aeabi_dsub>
   1f07c:	4606      	mov	r6, r0
   1f07e:	460f      	mov	r7, r1
   1f080:	e625      	b.n	1ecce <__kernel_rem_pio2+0x1f6>
   1f082:	2100      	movs	r1, #0
   1f084:	f06f 0317 	mvn.w	r3, #23
   1f088:	9107      	str	r1, [sp, #28]
   1f08a:	e545      	b.n	1eb18 <__kernel_rem_pio2+0x40>
   1f08c:	f3af 8000 	nop.w
   1f090:	00000000 	.word	0x00000000
   1f094:	3ff00000 	.word	0x3ff00000
   1f098:	40000000 	.word	0x40000000
   1f09c:	3ff921fb 	.word	0x3ff921fb
   1f0a0:	3ff00000 	.word	0x3ff00000
   1f0a4:	3fe00000 	.word	0x3fe00000
   1f0a8:	3ffffffe 	.word	0x3ffffffe
   1f0ac:	3e700000 	.word	0x3e700000
   1f0b0:	00049990 	.word	0x00049990
   1f0b4:	ab48      	add	r3, sp, #288	; 0x120
   1f0b6:	9303      	str	r3, [sp, #12]
   1f0b8:	f1b9 0f00 	cmp.w	r9, #0
   1f0bc:	f340 8119 	ble.w	1f2f2 <__kernel_ram_size+0x152>
   1f0c0:	9a03      	ldr	r2, [sp, #12]
   1f0c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
   1f0c6:	eb02 08c9 	add.w	r8, r2, r9, lsl #3
   1f0ca:	9301      	str	r3, [sp, #4]
   1f0cc:	e9d8 ab00 	ldrd	sl, fp, [r8]
   1f0d0:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
   1f0d4:	4652      	mov	r2, sl
   1f0d6:	465b      	mov	r3, fp
   1f0d8:	4630      	mov	r0, r6
   1f0da:	4639      	mov	r1, r7
   1f0dc:	f7fd f9b6 	bl	1c44c <__adddf3>
   1f0e0:	4604      	mov	r4, r0
   1f0e2:	460d      	mov	r5, r1
   1f0e4:	4602      	mov	r2, r0
   1f0e6:	460b      	mov	r3, r1
   1f0e8:	4630      	mov	r0, r6
   1f0ea:	4639      	mov	r1, r7
   1f0ec:	f7fd f9ac 	bl	1c448 <__aeabi_dsub>
   1f0f0:	465b      	mov	r3, fp
   1f0f2:	4652      	mov	r2, sl
   1f0f4:	46ab      	mov	fp, r5
   1f0f6:	f7fd f9a9 	bl	1c44c <__adddf3>
   1f0fa:	9b03      	ldr	r3, [sp, #12]
   1f0fc:	46a2      	mov	sl, r4
   1f0fe:	4543      	cmp	r3, r8
   1f100:	e9c8 0102 	strd	r0, r1, [r8, #8]
   1f104:	e9c8 4500 	strd	r4, r5, [r8]
   1f108:	d1e2      	bne.n	1f0d0 <__kernel_rem_pio2+0x5f8>
   1f10a:	f1b9 0f01 	cmp.w	r9, #1
   1f10e:	f340 80f0 	ble.w	1f2f2 <__kernel_ram_size+0x152>
   1f112:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   1f116:	9b01      	ldr	r3, [sp, #4]
   1f118:	9903      	ldr	r1, [sp, #12]
   1f11a:	f50d 7a94 	add.w	sl, sp, #296	; 0x128
   1f11e:	444a      	add	r2, r9
   1f120:	440b      	add	r3, r1
   1f122:	00d2      	lsls	r2, r2, #3
   1f124:	f102 0b08 	add.w	fp, r2, #8
   1f128:	9201      	str	r2, [sp, #4]
   1f12a:	e9d3 6700 	ldrd	r6, r7, [r3]
   1f12e:	448b      	add	fp, r1
   1f130:	4632      	mov	r2, r6
   1f132:	463b      	mov	r3, r7
   1f134:	e97b 8902 	ldrd	r8, r9, [fp, #-8]!
   1f138:	4640      	mov	r0, r8
   1f13a:	4649      	mov	r1, r9
   1f13c:	f7fd f986 	bl	1c44c <__adddf3>
   1f140:	4604      	mov	r4, r0
   1f142:	460d      	mov	r5, r1
   1f144:	4602      	mov	r2, r0
   1f146:	460b      	mov	r3, r1
   1f148:	4640      	mov	r0, r8
   1f14a:	4649      	mov	r1, r9
   1f14c:	f7fd f97c 	bl	1c448 <__aeabi_dsub>
   1f150:	4632      	mov	r2, r6
   1f152:	463b      	mov	r3, r7
   1f154:	4626      	mov	r6, r4
   1f156:	f7fd f979 	bl	1c44c <__adddf3>
   1f15a:	45da      	cmp	sl, fp
   1f15c:	462f      	mov	r7, r5
   1f15e:	e9cb 0102 	strd	r0, r1, [fp, #8]
   1f162:	e9cb 4500 	strd	r4, r5, [fp]
   1f166:	d1e3      	bne.n	1f130 <__kernel_rem_pio2+0x658>
   1f168:	9c01      	ldr	r4, [sp, #4]
   1f16a:	2000      	movs	r0, #0
   1f16c:	9b03      	ldr	r3, [sp, #12]
   1f16e:	2100      	movs	r1, #0
   1f170:	3410      	adds	r4, #16
   1f172:	f103 0510 	add.w	r5, r3, #16
   1f176:	441c      	add	r4, r3
   1f178:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1f17c:	f7fd f966 	bl	1c44c <__adddf3>
   1f180:	42a5      	cmp	r5, r4
   1f182:	d1f9      	bne.n	1f178 <__kernel_rem_pio2+0x6a0>
   1f184:	9c03      	ldr	r4, [sp, #12]
   1f186:	9e04      	ldr	r6, [sp, #16]
   1f188:	e9d4 2300 	ldrd	r2, r3, [r4]
   1f18c:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
   1f190:	2e00      	cmp	r6, #0
   1f192:	f040 8086 	bne.w	1f2a2 <__kernel_ram_size+0x102>
   1f196:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1f198:	e9c6 2300 	strd	r2, r3, [r6]
   1f19c:	9b07      	ldr	r3, [sp, #28]
   1f19e:	e9c6 0104 	strd	r0, r1, [r6, #16]
   1f1a2:	f003 0007 	and.w	r0, r3, #7
   1f1a6:	e9c6 4502 	strd	r4, r5, [r6, #8]
   1f1aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1b2:	9e06      	ldr	r6, [sp, #24]
   1f1b4:	2400      	movs	r4, #0
   1f1b6:	9f03      	ldr	r7, [sp, #12]
   1f1b8:	2500      	movs	r5, #0
   1f1ba:	3608      	adds	r6, #8
   1f1bc:	443e      	add	r6, r7
   1f1be:	4620      	mov	r0, r4
   1f1c0:	4629      	mov	r1, r5
   1f1c2:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
   1f1c6:	f7fd f941 	bl	1c44c <__adddf3>
   1f1ca:	4604      	mov	r4, r0
   1f1cc:	42b7      	cmp	r7, r6
   1f1ce:	460d      	mov	r5, r1
   1f1d0:	d1f5      	bne.n	1f1be <__kernel_ram_size+0x1e>
   1f1d2:	e712      	b.n	1effa <__kernel_rem_pio2+0x522>
   1f1d4:	9c06      	ldr	r4, [sp, #24]
   1f1d6:	2000      	movs	r0, #0
   1f1d8:	9d03      	ldr	r5, [sp, #12]
   1f1da:	2100      	movs	r1, #0
   1f1dc:	3408      	adds	r4, #8
   1f1de:	442c      	add	r4, r5
   1f1e0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
   1f1e4:	f7fd f932 	bl	1c44c <__adddf3>
   1f1e8:	42a5      	cmp	r5, r4
   1f1ea:	d1f9      	bne.n	1f1e0 <__kernel_ram_size+0x40>
   1f1ec:	9b04      	ldr	r3, [sp, #16]
   1f1ee:	b113      	cbz	r3, 1f1f6 <__kernel_ram_size+0x56>
   1f1f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f1f4:	4619      	mov	r1, r3
   1f1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f1f8:	e9c3 0100 	strd	r0, r1, [r3]
   1f1fc:	9b07      	ldr	r3, [sp, #28]
   1f1fe:	f003 0007 	and.w	r0, r3, #7
   1f202:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f20a:	2400      	movs	r4, #0
   1f20c:	e5fe      	b.n	1ee0c <__kernel_rem_pio2+0x334>
   1f20e:	9c06      	ldr	r4, [sp, #24]
   1f210:	f8cd 801c 	str.w	r8, [sp, #28]
   1f214:	4260      	negs	r0, r4
   1f216:	9504      	str	r5, [sp, #16]
   1f218:	ec47 6b10 	vmov	d0, r6, r7
   1f21c:	f000 f9c0 	bl	1f5a0 <scalbn>
   1f220:	2200      	movs	r2, #0
   1f222:	ee10 0a10 	vmov	r0, s0
   1f226:	4b34      	ldr	r3, [pc, #208]	; (1f2f8 <__kernel_ram_size+0x158>)
   1f228:	ec57 6b10 	vmov	r6, r7, d0
   1f22c:	4639      	mov	r1, r7
   1f22e:	f7fd fd49 	bl	1ccc4 <__aeabi_dcmpge>
   1f232:	b308      	cbz	r0, 1f278 <__kernel_ram_size+0xd8>
   1f234:	3418      	adds	r4, #24
   1f236:	2200      	movs	r2, #0
   1f238:	4b30      	ldr	r3, [pc, #192]	; (1f2fc <__kernel_ram_size+0x15c>)
   1f23a:	4630      	mov	r0, r6
   1f23c:	4639      	mov	r1, r7
   1f23e:	9406      	str	r4, [sp, #24]
   1f240:	f7fd faba 	bl	1c7b8 <__aeabi_dmul>
   1f244:	9d01      	ldr	r5, [sp, #4]
   1f246:	f7fd fd51 	bl	1ccec <__aeabi_d2iz>
   1f24a:	4604      	mov	r4, r0
   1f24c:	f7fd fa4a 	bl	1c6e4 <__aeabi_i2d>
   1f250:	2200      	movs	r2, #0
   1f252:	4b29      	ldr	r3, [pc, #164]	; (1f2f8 <__kernel_ram_size+0x158>)
   1f254:	f105 0901 	add.w	r9, r5, #1
   1f258:	f7fd faae 	bl	1c7b8 <__aeabi_dmul>
   1f25c:	460b      	mov	r3, r1
   1f25e:	4602      	mov	r2, r0
   1f260:	4639      	mov	r1, r7
   1f262:	4630      	mov	r0, r6
   1f264:	f7fd f8f0 	bl	1c448 <__aeabi_dsub>
   1f268:	f7fd fd40 	bl	1ccec <__aeabi_d2iz>
   1f26c:	ab0c      	add	r3, sp, #48	; 0x30
   1f26e:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
   1f272:	f843 4029 	str.w	r4, [r3, r9, lsl #2]
   1f276:	e645      	b.n	1ef04 <__kernel_rem_pio2+0x42c>
   1f278:	4630      	mov	r0, r6
   1f27a:	4639      	mov	r1, r7
   1f27c:	9c01      	ldr	r4, [sp, #4]
   1f27e:	f7fd fd35 	bl	1ccec <__aeabi_d2iz>
   1f282:	aa0c      	add	r2, sp, #48	; 0x30
   1f284:	46a1      	mov	r9, r4
   1f286:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
   1f28a:	e63b      	b.n	1ef04 <__kernel_rem_pio2+0x42c>
   1f28c:	4622      	mov	r2, r4
   1f28e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   1f292:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1f294:	f1b9 0f00 	cmp.w	r9, #0
   1f298:	e9c4 2300 	strd	r2, r3, [r4]
   1f29c:	f73f aebe 	bgt.w	1f01c <__kernel_rem_pio2+0x544>
   1f2a0:	e6c7      	b.n	1f032 <__kernel_rem_pio2+0x55a>
   1f2a2:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
   1f2a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f2aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f2ac:	4626      	mov	r6, r4
   1f2ae:	4694      	mov	ip, r2
   1f2b0:	f105 4400 	add.w	r4, r5, #2147483648	; 0x80000000
   1f2b4:	e9c1 0304 	strd	r0, r3, [r1, #16]
   1f2b8:	9b07      	ldr	r3, [sp, #28]
   1f2ba:	f003 0007 	and.w	r0, r3, #7
   1f2be:	e9c1 c700 	strd	ip, r7, [r1]
   1f2c2:	e9c1 6402 	strd	r6, r4, [r1, #8]
   1f2c6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
   1f2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f2ce:	9ba2      	ldr	r3, [sp, #648]	; 0x288
   1f2d0:	2b03      	cmp	r3, #3
   1f2d2:	f63f aeb4 	bhi.w	1f03e <__kernel_rem_pio2+0x566>
   1f2d6:	a201      	add	r2, pc, #4	; (adr r2, 1f2dc <__kernel_ram_size+0x13c>)
   1f2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f2dc:	0001f2ed 	.word	0x0001f2ed
   1f2e0:	0001eff3 	.word	0x0001eff3
   1f2e4:	0001eff3 	.word	0x0001eff3
   1f2e8:	0001f0b5 	.word	0x0001f0b5
   1f2ec:	2000      	movs	r0, #0
   1f2ee:	2100      	movs	r1, #0
   1f2f0:	e77c      	b.n	1f1ec <__kernel_ram_size+0x4c>
   1f2f2:	2000      	movs	r0, #0
   1f2f4:	2100      	movs	r1, #0
   1f2f6:	e745      	b.n	1f184 <__kernel_rem_pio2+0x6ac>
   1f2f8:	41700000 	.word	0x41700000
   1f2fc:	3e700000 	.word	0x3e700000

0001f300 <__kernel_sin>:
   1f300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f304:	ec55 4b10 	vmov	r4, r5, d0
   1f308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1f30c:	4682      	mov	sl, r0
   1f30e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   1f312:	ed2d 8b02 	vpush	{d8}
   1f316:	eeb0 8a41 	vmov.f32	s16, s2
   1f31a:	eef0 8a61 	vmov.f32	s17, s3
   1f31e:	b083      	sub	sp, #12
   1f320:	da07      	bge.n	1f332 <__kernel_sin+0x32>
   1f322:	ee10 0a10 	vmov	r0, s0
   1f326:	4629      	mov	r1, r5
   1f328:	f7fd fce0 	bl	1ccec <__aeabi_d2iz>
   1f32c:	2800      	cmp	r0, #0
   1f32e:	f000 808e 	beq.w	1f44e <__kernel_sin+0x14e>
   1f332:	4622      	mov	r2, r4
   1f334:	462b      	mov	r3, r5
   1f336:	4620      	mov	r0, r4
   1f338:	4629      	mov	r1, r5
   1f33a:	f7fd fa3d 	bl	1c7b8 <__aeabi_dmul>
   1f33e:	4606      	mov	r6, r0
   1f340:	460f      	mov	r7, r1
   1f342:	4602      	mov	r2, r0
   1f344:	460b      	mov	r3, r1
   1f346:	4620      	mov	r0, r4
   1f348:	4629      	mov	r1, r5
   1f34a:	f7fd fa35 	bl	1c7b8 <__aeabi_dmul>
   1f34e:	4680      	mov	r8, r0
   1f350:	4689      	mov	r9, r1
   1f352:	4630      	mov	r0, r6
   1f354:	4639      	mov	r1, r7
   1f356:	a345      	add	r3, pc, #276	; (adr r3, 1f46c <__kernel_sin+0x16c>)
   1f358:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f35c:	f7fd fa2c 	bl	1c7b8 <__aeabi_dmul>
   1f360:	a344      	add	r3, pc, #272	; (adr r3, 1f474 <__kernel_sin+0x174>)
   1f362:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f366:	f7fd f86f 	bl	1c448 <__aeabi_dsub>
   1f36a:	4632      	mov	r2, r6
   1f36c:	463b      	mov	r3, r7
   1f36e:	f7fd fa23 	bl	1c7b8 <__aeabi_dmul>
   1f372:	a342      	add	r3, pc, #264	; (adr r3, 1f47c <__kernel_sin+0x17c>)
   1f374:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f378:	f7fd f868 	bl	1c44c <__adddf3>
   1f37c:	4632      	mov	r2, r6
   1f37e:	463b      	mov	r3, r7
   1f380:	f7fd fa1a 	bl	1c7b8 <__aeabi_dmul>
   1f384:	a33f      	add	r3, pc, #252	; (adr r3, 1f484 <__kernel_sin+0x184>)
   1f386:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f38a:	f7fd f85d 	bl	1c448 <__aeabi_dsub>
   1f38e:	4632      	mov	r2, r6
   1f390:	463b      	mov	r3, r7
   1f392:	f7fd fa11 	bl	1c7b8 <__aeabi_dmul>
   1f396:	a33d      	add	r3, pc, #244	; (adr r3, 1f48c <__kernel_sin+0x18c>)
   1f398:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f39c:	f7fd f856 	bl	1c44c <__adddf3>
   1f3a0:	e9cd 0100 	strd	r0, r1, [sp]
   1f3a4:	f1ba 0f00 	cmp.w	sl, #0
   1f3a8:	d037      	beq.n	1f41a <__kernel_sin+0x11a>
   1f3aa:	2200      	movs	r2, #0
   1f3ac:	4b2e      	ldr	r3, [pc, #184]	; (1f468 <__kernel_sin+0x168>)
   1f3ae:	ec51 0b18 	vmov	r0, r1, d8
   1f3b2:	f7fd fa01 	bl	1c7b8 <__aeabi_dmul>
   1f3b6:	4682      	mov	sl, r0
   1f3b8:	468b      	mov	fp, r1
   1f3ba:	4640      	mov	r0, r8
   1f3bc:	4649      	mov	r1, r9
   1f3be:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f3c2:	f7fd f9f9 	bl	1c7b8 <__aeabi_dmul>
   1f3c6:	4602      	mov	r2, r0
   1f3c8:	460b      	mov	r3, r1
   1f3ca:	4650      	mov	r0, sl
   1f3cc:	4659      	mov	r1, fp
   1f3ce:	f7fd f83b 	bl	1c448 <__aeabi_dsub>
   1f3d2:	4632      	mov	r2, r6
   1f3d4:	463b      	mov	r3, r7
   1f3d6:	f7fd f9ef 	bl	1c7b8 <__aeabi_dmul>
   1f3da:	ec53 2b18 	vmov	r2, r3, d8
   1f3de:	f7fd f833 	bl	1c448 <__aeabi_dsub>
   1f3e2:	4606      	mov	r6, r0
   1f3e4:	460f      	mov	r7, r1
   1f3e6:	4640      	mov	r0, r8
   1f3e8:	4649      	mov	r1, r9
   1f3ea:	a31d      	add	r3, pc, #116	; (adr r3, 1f460 <__kernel_sin+0x160>)
   1f3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f3f0:	f7fd f9e2 	bl	1c7b8 <__aeabi_dmul>
   1f3f4:	4602      	mov	r2, r0
   1f3f6:	460b      	mov	r3, r1
   1f3f8:	4630      	mov	r0, r6
   1f3fa:	4639      	mov	r1, r7
   1f3fc:	f7fd f826 	bl	1c44c <__adddf3>
   1f400:	4602      	mov	r2, r0
   1f402:	460b      	mov	r3, r1
   1f404:	4620      	mov	r0, r4
   1f406:	4629      	mov	r1, r5
   1f408:	f7fd f81e 	bl	1c448 <__aeabi_dsub>
   1f40c:	ec41 0b10 	vmov	d0, r0, r1
   1f410:	b003      	add	sp, #12
   1f412:	ecbd 8b02 	vpop	{d8}
   1f416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f41a:	4602      	mov	r2, r0
   1f41c:	460b      	mov	r3, r1
   1f41e:	4630      	mov	r0, r6
   1f420:	4639      	mov	r1, r7
   1f422:	f7fd f9c9 	bl	1c7b8 <__aeabi_dmul>
   1f426:	a30e      	add	r3, pc, #56	; (adr r3, 1f460 <__kernel_sin+0x160>)
   1f428:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f42c:	f7fd f80c 	bl	1c448 <__aeabi_dsub>
   1f430:	4642      	mov	r2, r8
   1f432:	464b      	mov	r3, r9
   1f434:	f7fd f9c0 	bl	1c7b8 <__aeabi_dmul>
   1f438:	4622      	mov	r2, r4
   1f43a:	462b      	mov	r3, r5
   1f43c:	f7fd f806 	bl	1c44c <__adddf3>
   1f440:	ec41 0b10 	vmov	d0, r0, r1
   1f444:	b003      	add	sp, #12
   1f446:	ecbd 8b02 	vpop	{d8}
   1f44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f44e:	ec45 4b10 	vmov	d0, r4, r5
   1f452:	b003      	add	sp, #12
   1f454:	ecbd 8b02 	vpop	{d8}
   1f458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f45c:	f3af 8000 	nop.w
   1f460:	55555549 	.word	0x55555549
   1f464:	3fc55555 	.word	0x3fc55555
   1f468:	3fe00000 	.word	0x3fe00000
   1f46c:	5acfd57c 	.word	0x5acfd57c
   1f470:	3de5d93a 	.word	0x3de5d93a
   1f474:	8a2b9ceb 	.word	0x8a2b9ceb
   1f478:	3e5ae5e6 	.word	0x3e5ae5e6
   1f47c:	57b1fe7d 	.word	0x57b1fe7d
   1f480:	3ec71de3 	.word	0x3ec71de3
   1f484:	19c161d5 	.word	0x19c161d5
   1f488:	3f2a01a0 	.word	0x3f2a01a0
   1f48c:	1110f8a6 	.word	0x1110f8a6
   1f490:	3f811111 	.word	0x3f811111
   1f494:	00000000 	.word	0x00000000

0001f498 <floor>:
   1f498:	ec51 0b10 	vmov	r0, r1, d0
   1f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f49e:	f3c1 530a 	ubfx	r3, r1, #20, #11
   1f4a2:	460c      	mov	r4, r1
   1f4a4:	ee10 6a10 	vmov	r6, s0
   1f4a8:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
   1f4ac:	2d13      	cmp	r5, #19
   1f4ae:	dc30      	bgt.n	1f512 <floor+0x7a>
   1f4b0:	2d00      	cmp	r5, #0
   1f4b2:	db1e      	blt.n	1f4f2 <floor+0x5a>
   1f4b4:	4f38      	ldr	r7, [pc, #224]	; (1f598 <floor+0x100>)
   1f4b6:	412f      	asrs	r7, r5
   1f4b8:	ea07 0301 	and.w	r3, r7, r1
   1f4bc:	4303      	orrs	r3, r0
   1f4be:	d02d      	beq.n	1f51c <floor+0x84>
   1f4c0:	a333      	add	r3, pc, #204	; (adr r3, 1f590 <floor+0xf8>)
   1f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4c6:	f7fc ffc1 	bl	1c44c <__adddf3>
   1f4ca:	2200      	movs	r2, #0
   1f4cc:	2300      	movs	r3, #0
   1f4ce:	f7fd fc03 	bl	1ccd8 <__aeabi_dcmpgt>
   1f4d2:	b148      	cbz	r0, 1f4e8 <floor+0x50>
   1f4d4:	2c00      	cmp	r4, #0
   1f4d6:	da04      	bge.n	1f4e2 <floor+0x4a>
   1f4d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f4dc:	fa43 f505 	asr.w	r5, r3, r5
   1f4e0:	442c      	add	r4, r5
   1f4e2:	ea24 0407 	bic.w	r4, r4, r7
   1f4e6:	2600      	movs	r6, #0
   1f4e8:	4623      	mov	r3, r4
   1f4ea:	4632      	mov	r2, r6
   1f4ec:	ec43 2b10 	vmov	d0, r2, r3
   1f4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f4f2:	a327      	add	r3, pc, #156	; (adr r3, 1f590 <floor+0xf8>)
   1f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f4f8:	f7fc ffa8 	bl	1c44c <__adddf3>
   1f4fc:	2200      	movs	r2, #0
   1f4fe:	2300      	movs	r3, #0
   1f500:	f7fd fbea 	bl	1ccd8 <__aeabi_dcmpgt>
   1f504:	2800      	cmp	r0, #0
   1f506:	d0ef      	beq.n	1f4e8 <floor+0x50>
   1f508:	2c00      	cmp	r4, #0
   1f50a:	db29      	blt.n	1f560 <floor+0xc8>
   1f50c:	2600      	movs	r6, #0
   1f50e:	4634      	mov	r4, r6
   1f510:	e7ea      	b.n	1f4e8 <floor+0x50>
   1f512:	2d33      	cmp	r5, #51	; 0x33
   1f514:	dd05      	ble.n	1f522 <floor+0x8a>
   1f516:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   1f51a:	d019      	beq.n	1f550 <floor+0xb8>
   1f51c:	ec41 0b10 	vmov	d0, r0, r1
   1f520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f522:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
   1f526:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1f52a:	40df      	lsrs	r7, r3
   1f52c:	4207      	tst	r7, r0
   1f52e:	d0f5      	beq.n	1f51c <floor+0x84>
   1f530:	a317      	add	r3, pc, #92	; (adr r3, 1f590 <floor+0xf8>)
   1f532:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f536:	f7fc ff89 	bl	1c44c <__adddf3>
   1f53a:	2200      	movs	r2, #0
   1f53c:	2300      	movs	r3, #0
   1f53e:	f7fd fbcb 	bl	1ccd8 <__aeabi_dcmpgt>
   1f542:	2800      	cmp	r0, #0
   1f544:	d0d0      	beq.n	1f4e8 <floor+0x50>
   1f546:	2c00      	cmp	r4, #0
   1f548:	db13      	blt.n	1f572 <floor+0xda>
   1f54a:	ea26 0607 	bic.w	r6, r6, r7
   1f54e:	e7cb      	b.n	1f4e8 <floor+0x50>
   1f550:	ee10 2a10 	vmov	r2, s0
   1f554:	460b      	mov	r3, r1
   1f556:	f7fc ff79 	bl	1c44c <__adddf3>
   1f55a:	ec41 0b10 	vmov	d0, r0, r1
   1f55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f560:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
   1f564:	4a0d      	ldr	r2, [pc, #52]	; (1f59c <floor+0x104>)
   1f566:	4333      	orrs	r3, r6
   1f568:	2600      	movs	r6, #0
   1f56a:	42b3      	cmp	r3, r6
   1f56c:	bf18      	it	ne
   1f56e:	4614      	movne	r4, r2
   1f570:	e7ba      	b.n	1f4e8 <floor+0x50>
   1f572:	2d14      	cmp	r5, #20
   1f574:	d008      	beq.n	1f588 <floor+0xf0>
   1f576:	2301      	movs	r3, #1
   1f578:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
   1f57c:	fa03 f505 	lsl.w	r5, r3, r5
   1f580:	19ae      	adds	r6, r5, r6
   1f582:	bf28      	it	cs
   1f584:	18e4      	addcs	r4, r4, r3
   1f586:	e7e0      	b.n	1f54a <floor+0xb2>
   1f588:	3401      	adds	r4, #1
   1f58a:	e7de      	b.n	1f54a <floor+0xb2>
   1f58c:	f3af 8000 	nop.w
   1f590:	8800759c 	.word	0x8800759c
   1f594:	7e37e43c 	.word	0x7e37e43c
   1f598:	000fffff 	.word	0x000fffff
   1f59c:	bff00000 	.word	0xbff00000

0001f5a0 <scalbn>:
   1f5a0:	b538      	push	{r3, r4, r5, lr}
   1f5a2:	ec53 2b10 	vmov	r2, r3, d0
   1f5a6:	f3c3 510a 	ubfx	r1, r3, #20, #11
   1f5aa:	461c      	mov	r4, r3
   1f5ac:	4605      	mov	r5, r0
   1f5ae:	bb81      	cbnz	r1, 1f612 <scalbn+0x72>
   1f5b0:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   1f5b4:	ee10 1a10 	vmov	r1, s0
   1f5b8:	4321      	orrs	r1, r4
   1f5ba:	d029      	beq.n	1f610 <scalbn+0x70>
   1f5bc:	4c3c      	ldr	r4, [pc, #240]	; (1f6b0 <scalbn+0x110>)
   1f5be:	4619      	mov	r1, r3
   1f5c0:	2200      	movs	r2, #0
   1f5c2:	4b3c      	ldr	r3, [pc, #240]	; (1f6b4 <scalbn+0x114>)
   1f5c4:	ee10 0a10 	vmov	r0, s0
   1f5c8:	f7fd f8f6 	bl	1c7b8 <__aeabi_dmul>
   1f5cc:	42a5      	cmp	r5, r4
   1f5ce:	4602      	mov	r2, r0
   1f5d0:	460b      	mov	r3, r1
   1f5d2:	db16      	blt.n	1f602 <scalbn+0x62>
   1f5d4:	460c      	mov	r4, r1
   1f5d6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   1f5da:	3936      	subs	r1, #54	; 0x36
   1f5dc:	4429      	add	r1, r5
   1f5de:	f240 70fe 	movw	r0, #2046	; 0x7fe
   1f5e2:	4281      	cmp	r1, r0
   1f5e4:	dc21      	bgt.n	1f62a <scalbn+0x8a>
   1f5e6:	2900      	cmp	r1, #0
   1f5e8:	dc45      	bgt.n	1f676 <scalbn+0xd6>
   1f5ea:	f111 0f35 	cmn.w	r1, #53	; 0x35
   1f5ee:	da34      	bge.n	1f65a <scalbn+0xba>
   1f5f0:	f24c 3150 	movw	r1, #50000	; 0xc350
   1f5f4:	428d      	cmp	r5, r1
   1f5f6:	dc18      	bgt.n	1f62a <scalbn+0x8a>
   1f5f8:	2b00      	cmp	r3, #0
   1f5fa:	a125      	add	r1, pc, #148	; (adr r1, 1f690 <scalbn+0xf0>)
   1f5fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f600:	db40      	blt.n	1f684 <scalbn+0xe4>
   1f602:	a323      	add	r3, pc, #140	; (adr r3, 1f690 <scalbn+0xf0>)
   1f604:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f608:	f7fd f8d6 	bl	1c7b8 <__aeabi_dmul>
   1f60c:	ec41 0b10 	vmov	d0, r0, r1
   1f610:	bd38      	pop	{r3, r4, r5, pc}
   1f612:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1f616:	4281      	cmp	r1, r0
   1f618:	d1e0      	bne.n	1f5dc <scalbn+0x3c>
   1f61a:	ee10 0a10 	vmov	r0, s0
   1f61e:	4619      	mov	r1, r3
   1f620:	f7fc ff14 	bl	1c44c <__adddf3>
   1f624:	ec41 0b10 	vmov	d0, r0, r1
   1f628:	bd38      	pop	{r3, r4, r5, pc}
   1f62a:	2b00      	cmp	r3, #0
   1f62c:	a11a      	add	r1, pc, #104	; (adr r1, 1f698 <scalbn+0xf8>)
   1f62e:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f632:	db07      	blt.n	1f644 <scalbn+0xa4>
   1f634:	a318      	add	r3, pc, #96	; (adr r3, 1f698 <scalbn+0xf8>)
   1f636:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f63a:	f7fd f8bd 	bl	1c7b8 <__aeabi_dmul>
   1f63e:	ec41 0b10 	vmov	d0, r0, r1
   1f642:	bd38      	pop	{r3, r4, r5, pc}
   1f644:	a116      	add	r1, pc, #88	; (adr r1, 1f6a0 <scalbn+0x100>)
   1f646:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f64a:	a313      	add	r3, pc, #76	; (adr r3, 1f698 <scalbn+0xf8>)
   1f64c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f650:	f7fd f8b2 	bl	1c7b8 <__aeabi_dmul>
   1f654:	ec41 0b10 	vmov	d0, r0, r1
   1f658:	e7f3      	b.n	1f642 <scalbn+0xa2>
   1f65a:	4817      	ldr	r0, [pc, #92]	; (1f6b8 <scalbn+0x118>)
   1f65c:	3136      	adds	r1, #54	; 0x36
   1f65e:	4020      	ands	r0, r4
   1f660:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f664:	4610      	mov	r0, r2
   1f666:	2200      	movs	r2, #0
   1f668:	4619      	mov	r1, r3
   1f66a:	4b14      	ldr	r3, [pc, #80]	; (1f6bc <scalbn+0x11c>)
   1f66c:	f7fd f8a4 	bl	1c7b8 <__aeabi_dmul>
   1f670:	ec41 0b10 	vmov	d0, r0, r1
   1f674:	bd38      	pop	{r3, r4, r5, pc}
   1f676:	4810      	ldr	r0, [pc, #64]	; (1f6b8 <scalbn+0x118>)
   1f678:	4020      	ands	r0, r4
   1f67a:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
   1f67e:	ec43 2b10 	vmov	d0, r2, r3
   1f682:	bd38      	pop	{r3, r4, r5, pc}
   1f684:	a108      	add	r1, pc, #32	; (adr r1, 1f6a8 <scalbn+0x108>)
   1f686:	e9d1 0100 	ldrd	r0, r1, [r1]
   1f68a:	e7ba      	b.n	1f602 <scalbn+0x62>
   1f68c:	f3af 8000 	nop.w
   1f690:	c2f8f359 	.word	0xc2f8f359
   1f694:	01a56e1f 	.word	0x01a56e1f
   1f698:	8800759c 	.word	0x8800759c
   1f69c:	7e37e43c 	.word	0x7e37e43c
   1f6a0:	8800759c 	.word	0x8800759c
   1f6a4:	fe37e43c 	.word	0xfe37e43c
   1f6a8:	c2f8f359 	.word	0xc2f8f359
   1f6ac:	81a56e1f 	.word	0x81a56e1f
   1f6b0:	ffff3cb0 	.word	0xffff3cb0
   1f6b4:	43500000 	.word	0x43500000
   1f6b8:	800fffff 	.word	0x800fffff
   1f6bc:	3c900000 	.word	0x3c900000

0001f6c0 <_strtod_l>:
   1f6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6c4:	461f      	mov	r7, r3
   1f6c6:	b0a1      	sub	sp, #132	; 0x84
   1f6c8:	2300      	movs	r3, #0
   1f6ca:	460e      	mov	r6, r1
   1f6cc:	9004      	str	r0, [sp, #16]
   1f6ce:	f04f 0a00 	mov.w	sl, #0
   1f6d2:	931c      	str	r3, [sp, #112]	; 0x70
   1f6d4:	f04f 0b00 	mov.w	fp, #0
   1f6d8:	4b97      	ldr	r3, [pc, #604]	; (1f938 <_strtod_l+0x278>)
   1f6da:	9217      	str	r2, [sp, #92]	; 0x5c
   1f6dc:	681b      	ldr	r3, [r3, #0]
   1f6de:	4618      	mov	r0, r3
   1f6e0:	9305      	str	r3, [sp, #20]
   1f6e2:	f7fd fdbf 	bl	1d264 <strlen>
   1f6e6:	4604      	mov	r4, r0
   1f6e8:	961b      	str	r6, [sp, #108]	; 0x6c
   1f6ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1f6ec:	7813      	ldrb	r3, [r2, #0]
   1f6ee:	2b0d      	cmp	r3, #13
   1f6f0:	d832      	bhi.n	1f758 <_strtod_l+0x98>
   1f6f2:	2b09      	cmp	r3, #9
   1f6f4:	d236      	bcs.n	1f764 <_strtod_l+0xa4>
   1f6f6:	2b00      	cmp	r3, #0
   1f6f8:	d03e      	beq.n	1f778 <_strtod_l+0xb8>
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	930c      	str	r3, [sp, #48]	; 0x30
   1f6fe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
   1f700:	782b      	ldrb	r3, [r5, #0]
   1f702:	2b30      	cmp	r3, #48	; 0x30
   1f704:	f040 80a9 	bne.w	1f85a <_strtod_l+0x19a>
   1f708:	786b      	ldrb	r3, [r5, #1]
   1f70a:	2b58      	cmp	r3, #88	; 0x58
   1f70c:	d001      	beq.n	1f712 <_strtod_l+0x52>
   1f70e:	2b78      	cmp	r3, #120	; 0x78
   1f710:	d167      	bne.n	1f7e2 <_strtod_l+0x122>
   1f712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f714:	a91b      	add	r1, sp, #108	; 0x6c
   1f716:	9702      	str	r7, [sp, #8]
   1f718:	9301      	str	r3, [sp, #4]
   1f71a:	ab1c      	add	r3, sp, #112	; 0x70
   1f71c:	4a87      	ldr	r2, [pc, #540]	; (1f93c <_strtod_l+0x27c>)
   1f71e:	9300      	str	r3, [sp, #0]
   1f720:	ab1d      	add	r3, sp, #116	; 0x74
   1f722:	9804      	ldr	r0, [sp, #16]
   1f724:	f023 fce0 	bl	430e8 <__gethex>
   1f728:	f010 0407 	ands.w	r4, r0, #7
   1f72c:	4606      	mov	r6, r0
   1f72e:	d005      	beq.n	1f73c <_strtod_l+0x7c>
   1f730:	2c06      	cmp	r4, #6
   1f732:	d12b      	bne.n	1f78c <_strtod_l+0xcc>
   1f734:	3501      	adds	r5, #1
   1f736:	2300      	movs	r3, #0
   1f738:	951b      	str	r5, [sp, #108]	; 0x6c
   1f73a:	930c      	str	r3, [sp, #48]	; 0x30
   1f73c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f73e:	2b00      	cmp	r3, #0
   1f740:	f040 8572 	bne.w	20228 <_strtod_l+0xb68>
   1f744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f746:	b1e3      	cbz	r3, 1f782 <_strtod_l+0xc2>
   1f748:	4652      	mov	r2, sl
   1f74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1f74e:	ec43 2b10 	vmov	d0, r2, r3
   1f752:	b021      	add	sp, #132	; 0x84
   1f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f758:	2b2b      	cmp	r3, #43	; 0x2b
   1f75a:	d006      	beq.n	1f76a <_strtod_l+0xaa>
   1f75c:	2b2d      	cmp	r3, #45	; 0x2d
   1f75e:	d013      	beq.n	1f788 <_strtod_l+0xc8>
   1f760:	2b20      	cmp	r3, #32
   1f762:	d1ca      	bne.n	1f6fa <_strtod_l+0x3a>
   1f764:	3201      	adds	r2, #1
   1f766:	921b      	str	r2, [sp, #108]	; 0x6c
   1f768:	e7bf      	b.n	1f6ea <_strtod_l+0x2a>
   1f76a:	2300      	movs	r3, #0
   1f76c:	930c      	str	r3, [sp, #48]	; 0x30
   1f76e:	1c53      	adds	r3, r2, #1
   1f770:	931b      	str	r3, [sp, #108]	; 0x6c
   1f772:	7853      	ldrb	r3, [r2, #1]
   1f774:	2b00      	cmp	r3, #0
   1f776:	d1c2      	bne.n	1f6fe <_strtod_l+0x3e>
   1f778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1f77a:	961b      	str	r6, [sp, #108]	; 0x6c
   1f77c:	2b00      	cmp	r3, #0
   1f77e:	f040 8551 	bne.w	20224 <_strtod_l+0xb64>
   1f782:	4652      	mov	r2, sl
   1f784:	465b      	mov	r3, fp
   1f786:	e7e2      	b.n	1f74e <_strtod_l+0x8e>
   1f788:	2301      	movs	r3, #1
   1f78a:	e7ef      	b.n	1f76c <_strtod_l+0xac>
   1f78c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1f78e:	b13a      	cbz	r2, 1f7a0 <_strtod_l+0xe0>
   1f790:	2135      	movs	r1, #53	; 0x35
   1f792:	a81e      	add	r0, sp, #120	; 0x78
   1f794:	f029 fca2 	bl	490dc <__copybits>
   1f798:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f79a:	9804      	ldr	r0, [sp, #16]
   1f79c:	f029 f9d6 	bl	48b4c <_Bfree>
   1f7a0:	3c01      	subs	r4, #1
   1f7a2:	2c04      	cmp	r4, #4
   1f7a4:	d806      	bhi.n	1f7b4 <_strtod_l+0xf4>
   1f7a6:	e8df f004 	tbb	[pc, r4]
   1f7aa:	030a      	.short	0x030a
   1f7ac:	1714      	.short	0x1714
   1f7ae:	0a          	.byte	0x0a
   1f7af:	00          	.byte	0x00
   1f7b0:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
   1f7b4:	0731      	lsls	r1, r6, #28
   1f7b6:	d5c1      	bpl.n	1f73c <_strtod_l+0x7c>
   1f7b8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1f7bc:	e7be      	b.n	1f73c <_strtod_l+0x7c>
   1f7be:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
   1f7c2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1f7c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1f7c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1f7cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1f7d0:	e7f0      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7d2:	f8df b16c 	ldr.w	fp, [pc, #364]	; 1f940 <_strtod_l+0x280>
   1f7d6:	e7ed      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7d8:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1f7dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1f7e0:	e7e8      	b.n	1f7b4 <_strtod_l+0xf4>
   1f7e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f7e4:	1c5a      	adds	r2, r3, #1
   1f7e6:	921b      	str	r2, [sp, #108]	; 0x6c
   1f7e8:	785b      	ldrb	r3, [r3, #1]
   1f7ea:	2b30      	cmp	r3, #48	; 0x30
   1f7ec:	d0f9      	beq.n	1f7e2 <_strtod_l+0x122>
   1f7ee:	2b00      	cmp	r3, #0
   1f7f0:	d0a4      	beq.n	1f73c <_strtod_l+0x7c>
   1f7f2:	2301      	movs	r3, #1
   1f7f4:	f04f 0900 	mov.w	r9, #0
   1f7f8:	9306      	str	r3, [sp, #24]
   1f7fa:	220a      	movs	r2, #10
   1f7fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f7fe:	46c8      	mov	r8, r9
   1f800:	f8cd 901c 	str.w	r9, [sp, #28]
   1f804:	9309      	str	r3, [sp, #36]	; 0x24
   1f806:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1f808:	7805      	ldrb	r5, [r0, #0]
   1f80a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   1f80e:	b2d9      	uxtb	r1, r3
   1f810:	2909      	cmp	r1, #9
   1f812:	d924      	bls.n	1f85e <_strtod_l+0x19e>
   1f814:	4622      	mov	r2, r4
   1f816:	9905      	ldr	r1, [sp, #20]
   1f818:	f028 feaf 	bl	4857a <strncmp>
   1f81c:	b378      	cbz	r0, 1f87e <_strtod_l+0x1be>
   1f81e:	2000      	movs	r0, #0
   1f820:	462b      	mov	r3, r5
   1f822:	4644      	mov	r4, r8
   1f824:	4602      	mov	r2, r0
   1f826:	9005      	str	r0, [sp, #20]
   1f828:	2b65      	cmp	r3, #101	; 0x65
   1f82a:	d001      	beq.n	1f830 <_strtod_l+0x170>
   1f82c:	2b45      	cmp	r3, #69	; 0x45
   1f82e:	d112      	bne.n	1f856 <_strtod_l+0x196>
   1f830:	b91c      	cbnz	r4, 1f83a <_strtod_l+0x17a>
   1f832:	9b06      	ldr	r3, [sp, #24]
   1f834:	4303      	orrs	r3, r0
   1f836:	d09f      	beq.n	1f778 <_strtod_l+0xb8>
   1f838:	2400      	movs	r4, #0
   1f83a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
   1f83c:	1c73      	adds	r3, r6, #1
   1f83e:	931b      	str	r3, [sp, #108]	; 0x6c
   1f840:	7873      	ldrb	r3, [r6, #1]
   1f842:	2b2b      	cmp	r3, #43	; 0x2b
   1f844:	d071      	beq.n	1f92a <_strtod_l+0x26a>
   1f846:	2b2d      	cmp	r3, #45	; 0x2d
   1f848:	d074      	beq.n	1f934 <_strtod_l+0x274>
   1f84a:	2700      	movs	r7, #0
   1f84c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f850:	2909      	cmp	r1, #9
   1f852:	d97b      	bls.n	1f94c <_strtod_l+0x28c>
   1f854:	961b      	str	r6, [sp, #108]	; 0x6c
   1f856:	2500      	movs	r5, #0
   1f858:	e098      	b.n	1f98c <_strtod_l+0x2cc>
   1f85a:	2300      	movs	r3, #0
   1f85c:	e7ca      	b.n	1f7f4 <_strtod_l+0x134>
   1f85e:	f1b8 0f08 	cmp.w	r8, #8
   1f862:	f100 0001 	add.w	r0, r0, #1
   1f866:	f108 0801 	add.w	r8, r8, #1
   1f86a:	bfd4      	ite	le
   1f86c:	9907      	ldrle	r1, [sp, #28]
   1f86e:	fb02 3909 	mlagt	r9, r2, r9, r3
   1f872:	901b      	str	r0, [sp, #108]	; 0x6c
   1f874:	bfdc      	itt	le
   1f876:	fb02 3301 	mlale	r3, r2, r1, r3
   1f87a:	9307      	strle	r3, [sp, #28]
   1f87c:	e7c3      	b.n	1f806 <_strtod_l+0x146>
   1f87e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f880:	191a      	adds	r2, r3, r4
   1f882:	921b      	str	r2, [sp, #108]	; 0x6c
   1f884:	5d1b      	ldrb	r3, [r3, r4]
   1f886:	f1b8 0f00 	cmp.w	r8, #0
   1f88a:	d035      	beq.n	1f8f8 <_strtod_l+0x238>
   1f88c:	4644      	mov	r4, r8
   1f88e:	9005      	str	r0, [sp, #20]
   1f890:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1f894:	2a09      	cmp	r2, #9
   1f896:	d912      	bls.n	1f8be <_strtod_l+0x1fe>
   1f898:	2201      	movs	r2, #1
   1f89a:	e7c5      	b.n	1f828 <_strtod_l+0x168>
   1f89c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f89e:	3001      	adds	r0, #1
   1f8a0:	1c5a      	adds	r2, r3, #1
   1f8a2:	921b      	str	r2, [sp, #108]	; 0x6c
   1f8a4:	785b      	ldrb	r3, [r3, #1]
   1f8a6:	2b30      	cmp	r3, #48	; 0x30
   1f8a8:	d0f8      	beq.n	1f89c <_strtod_l+0x1dc>
   1f8aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1f8ae:	2a08      	cmp	r2, #8
   1f8b0:	f200 84bf 	bhi.w	20232 <_strtod_l+0xb72>
   1f8b4:	9005      	str	r0, [sp, #20]
   1f8b6:	2000      	movs	r0, #0
   1f8b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1f8ba:	4604      	mov	r4, r0
   1f8bc:	9209      	str	r2, [sp, #36]	; 0x24
   1f8be:	3b30      	subs	r3, #48	; 0x30
   1f8c0:	f100 0201 	add.w	r2, r0, #1
   1f8c4:	d012      	beq.n	1f8ec <_strtod_l+0x22c>
   1f8c6:	9905      	ldr	r1, [sp, #20]
   1f8c8:	1905      	adds	r5, r0, r4
   1f8ca:	4411      	add	r1, r2
   1f8cc:	4622      	mov	r2, r4
   1f8ce:	9105      	str	r1, [sp, #20]
   1f8d0:	210a      	movs	r1, #10
   1f8d2:	42aa      	cmp	r2, r5
   1f8d4:	d112      	bne.n	1f8fc <_strtod_l+0x23c>
   1f8d6:	1822      	adds	r2, r4, r0
   1f8d8:	3401      	adds	r4, #1
   1f8da:	2a08      	cmp	r2, #8
   1f8dc:	4404      	add	r4, r0
   1f8de:	dc1a      	bgt.n	1f916 <_strtod_l+0x256>
   1f8e0:	9907      	ldr	r1, [sp, #28]
   1f8e2:	220a      	movs	r2, #10
   1f8e4:	fb02 3301 	mla	r3, r2, r1, r3
   1f8e8:	9307      	str	r3, [sp, #28]
   1f8ea:	2200      	movs	r2, #0
   1f8ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f8ee:	4610      	mov	r0, r2
   1f8f0:	1c59      	adds	r1, r3, #1
   1f8f2:	911b      	str	r1, [sp, #108]	; 0x6c
   1f8f4:	785b      	ldrb	r3, [r3, #1]
   1f8f6:	e7cb      	b.n	1f890 <_strtod_l+0x1d0>
   1f8f8:	4640      	mov	r0, r8
   1f8fa:	e7d4      	b.n	1f8a6 <_strtod_l+0x1e6>
   1f8fc:	2a08      	cmp	r2, #8
   1f8fe:	dc04      	bgt.n	1f90a <_strtod_l+0x24a>
   1f900:	9f07      	ldr	r7, [sp, #28]
   1f902:	434f      	muls	r7, r1
   1f904:	9707      	str	r7, [sp, #28]
   1f906:	3201      	adds	r2, #1
   1f908:	e7e3      	b.n	1f8d2 <_strtod_l+0x212>
   1f90a:	1c57      	adds	r7, r2, #1
   1f90c:	2f10      	cmp	r7, #16
   1f90e:	bfd8      	it	le
   1f910:	fb01 f909 	mulle.w	r9, r1, r9
   1f914:	e7f7      	b.n	1f906 <_strtod_l+0x246>
   1f916:	2c10      	cmp	r4, #16
   1f918:	bfdc      	itt	le
   1f91a:	220a      	movle	r2, #10
   1f91c:	fb02 3909 	mlale	r9, r2, r9, r3
   1f920:	e7e3      	b.n	1f8ea <_strtod_l+0x22a>
   1f922:	2300      	movs	r3, #0
   1f924:	2201      	movs	r2, #1
   1f926:	9305      	str	r3, [sp, #20]
   1f928:	e783      	b.n	1f832 <_strtod_l+0x172>
   1f92a:	2700      	movs	r7, #0
   1f92c:	1cb3      	adds	r3, r6, #2
   1f92e:	931b      	str	r3, [sp, #108]	; 0x6c
   1f930:	78b3      	ldrb	r3, [r6, #2]
   1f932:	e78b      	b.n	1f84c <_strtod_l+0x18c>
   1f934:	2701      	movs	r7, #1
   1f936:	e7f9      	b.n	1f92c <_strtod_l+0x26c>
   1f938:	0004a9dc 	.word	0x0004a9dc
   1f93c:	0004a954 	.word	0x0004a954
   1f940:	7ff00000 	.word	0x7ff00000
   1f944:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f946:	1c59      	adds	r1, r3, #1
   1f948:	911b      	str	r1, [sp, #108]	; 0x6c
   1f94a:	785b      	ldrb	r3, [r3, #1]
   1f94c:	2b30      	cmp	r3, #48	; 0x30
   1f94e:	d0f9      	beq.n	1f944 <_strtod_l+0x284>
   1f950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1f954:	2908      	cmp	r1, #8
   1f956:	f63f af7e 	bhi.w	1f856 <_strtod_l+0x196>
   1f95a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
   1f95e:	f04f 0e0a 	mov.w	lr, #10
   1f962:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f964:	9308      	str	r3, [sp, #32]
   1f966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f968:	1c59      	adds	r1, r3, #1
   1f96a:	911b      	str	r1, [sp, #108]	; 0x6c
   1f96c:	785b      	ldrb	r3, [r3, #1]
   1f96e:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
   1f972:	2d09      	cmp	r5, #9
   1f974:	d92e      	bls.n	1f9d4 <_strtod_l+0x314>
   1f976:	9d08      	ldr	r5, [sp, #32]
   1f978:	1b49      	subs	r1, r1, r5
   1f97a:	f644 651f 	movw	r5, #19999	; 0x4e1f
   1f97e:	2908      	cmp	r1, #8
   1f980:	dc02      	bgt.n	1f988 <_strtod_l+0x2c8>
   1f982:	4565      	cmp	r5, ip
   1f984:	bfa8      	it	ge
   1f986:	4665      	movge	r5, ip
   1f988:	b107      	cbz	r7, 1f98c <_strtod_l+0x2cc>
   1f98a:	426d      	negs	r5, r5
   1f98c:	2c00      	cmp	r4, #0
   1f98e:	d14b      	bne.n	1fa28 <_strtod_l+0x368>
   1f990:	9906      	ldr	r1, [sp, #24]
   1f992:	4301      	orrs	r1, r0
   1f994:	f47f aed2 	bne.w	1f73c <_strtod_l+0x7c>
   1f998:	2a00      	cmp	r2, #0
   1f99a:	f47f aeed 	bne.w	1f778 <_strtod_l+0xb8>
   1f99e:	2b4e      	cmp	r3, #78	; 0x4e
   1f9a0:	d022      	beq.n	1f9e8 <_strtod_l+0x328>
   1f9a2:	dc1c      	bgt.n	1f9de <_strtod_l+0x31e>
   1f9a4:	2b49      	cmp	r3, #73	; 0x49
   1f9a6:	f47f aee7 	bne.w	1f778 <_strtod_l+0xb8>
   1f9aa:	499a      	ldr	r1, [pc, #616]	; (1fc14 <_strtod_l+0x554>)
   1f9ac:	a81b      	add	r0, sp, #108	; 0x6c
   1f9ae:	f028 ffa2 	bl	488f6 <__match>
   1f9b2:	2800      	cmp	r0, #0
   1f9b4:	f43f aee0 	beq.w	1f778 <_strtod_l+0xb8>
   1f9b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9ba:	a81b      	add	r0, sp, #108	; 0x6c
   1f9bc:	4996      	ldr	r1, [pc, #600]	; (1fc18 <_strtod_l+0x558>)
   1f9be:	3b01      	subs	r3, #1
   1f9c0:	931b      	str	r3, [sp, #108]	; 0x6c
   1f9c2:	f028 ff98 	bl	488f6 <__match>
   1f9c6:	b910      	cbnz	r0, 1f9ce <_strtod_l+0x30e>
   1f9c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9ca:	3301      	adds	r3, #1
   1f9cc:	931b      	str	r3, [sp, #108]	; 0x6c
   1f9ce:	f8df b260 	ldr.w	fp, [pc, #608]	; 1fc30 <_strtod_l+0x570>
   1f9d2:	e6b3      	b.n	1f73c <_strtod_l+0x7c>
   1f9d4:	fb0e 3c0c 	mla	ip, lr, ip, r3
   1f9d8:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   1f9dc:	e7c3      	b.n	1f966 <_strtod_l+0x2a6>
   1f9de:	2b69      	cmp	r3, #105	; 0x69
   1f9e0:	d0e3      	beq.n	1f9aa <_strtod_l+0x2ea>
   1f9e2:	2b6e      	cmp	r3, #110	; 0x6e
   1f9e4:	f47f aec8 	bne.w	1f778 <_strtod_l+0xb8>
   1f9e8:	498c      	ldr	r1, [pc, #560]	; (1fc1c <_strtod_l+0x55c>)
   1f9ea:	a81b      	add	r0, sp, #108	; 0x6c
   1f9ec:	f028 ff83 	bl	488f6 <__match>
   1f9f0:	2800      	cmp	r0, #0
   1f9f2:	f43f aec1 	beq.w	1f778 <_strtod_l+0xb8>
   1f9f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1f9f8:	781b      	ldrb	r3, [r3, #0]
   1f9fa:	2b28      	cmp	r3, #40	; 0x28
   1f9fc:	d10e      	bne.n	1fa1c <_strtod_l+0x35c>
   1f9fe:	aa1e      	add	r2, sp, #120	; 0x78
   1fa00:	4987      	ldr	r1, [pc, #540]	; (1fc20 <_strtod_l+0x560>)
   1fa02:	a81b      	add	r0, sp, #108	; 0x6c
   1fa04:	f028 ff8b 	bl	4891e <__hexnan>
   1fa08:	2805      	cmp	r0, #5
   1fa0a:	d107      	bne.n	1fa1c <_strtod_l+0x35c>
   1fa0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1fa0e:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
   1fa12:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1fa16:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1fa1a:	e68f      	b.n	1f73c <_strtod_l+0x7c>
   1fa1c:	4881      	ldr	r0, [pc, #516]	; (1fc24 <_strtod_l+0x564>)
   1fa1e:	f001 f9c7 	bl	20db0 <nan>
   1fa22:	ec5b ab10 	vmov	sl, fp, d0
   1fa26:	e689      	b.n	1f73c <_strtod_l+0x7c>
   1fa28:	9b05      	ldr	r3, [sp, #20]
   1fa2a:	f1b8 0f00 	cmp.w	r8, #0
   1fa2e:	bf08      	it	eq
   1fa30:	46a0      	moveq	r8, r4
   1fa32:	2c10      	cmp	r4, #16
   1fa34:	9807      	ldr	r0, [sp, #28]
   1fa36:	eba5 0303 	sub.w	r3, r5, r3
   1fa3a:	4626      	mov	r6, r4
   1fa3c:	bfa8      	it	ge
   1fa3e:	2610      	movge	r6, #16
   1fa40:	9308      	str	r3, [sp, #32]
   1fa42:	f7fc fe3f 	bl	1c6c4 <__aeabi_ui2d>
   1fa46:	2c09      	cmp	r4, #9
   1fa48:	4682      	mov	sl, r0
   1fa4a:	468b      	mov	fp, r1
   1fa4c:	dd13      	ble.n	1fa76 <_strtod_l+0x3b6>
   1fa4e:	4b76      	ldr	r3, [pc, #472]	; (1fc28 <_strtod_l+0x568>)
   1fa50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1fa54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1fa58:	f7fc feae 	bl	1c7b8 <__aeabi_dmul>
   1fa5c:	4682      	mov	sl, r0
   1fa5e:	468b      	mov	fp, r1
   1fa60:	4648      	mov	r0, r9
   1fa62:	f7fc fe2f 	bl	1c6c4 <__aeabi_ui2d>
   1fa66:	4602      	mov	r2, r0
   1fa68:	460b      	mov	r3, r1
   1fa6a:	4650      	mov	r0, sl
   1fa6c:	4659      	mov	r1, fp
   1fa6e:	f7fc fced 	bl	1c44c <__adddf3>
   1fa72:	4682      	mov	sl, r0
   1fa74:	468b      	mov	fp, r1
   1fa76:	2c0f      	cmp	r4, #15
   1fa78:	dc38      	bgt.n	1faec <_strtod_l+0x42c>
   1fa7a:	9b08      	ldr	r3, [sp, #32]
   1fa7c:	2b00      	cmp	r3, #0
   1fa7e:	f43f ae5d 	beq.w	1f73c <_strtod_l+0x7c>
   1fa82:	dd24      	ble.n	1face <_strtod_l+0x40e>
   1fa84:	2b16      	cmp	r3, #22
   1fa86:	dc0b      	bgt.n	1faa0 <_strtod_l+0x3e0>
   1fa88:	4c67      	ldr	r4, [pc, #412]	; (1fc28 <_strtod_l+0x568>)
   1fa8a:	4652      	mov	r2, sl
   1fa8c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
   1fa90:	465b      	mov	r3, fp
   1fa92:	e9d4 0100 	ldrd	r0, r1, [r4]
   1fa96:	f7fc fe8f 	bl	1c7b8 <__aeabi_dmul>
   1fa9a:	4682      	mov	sl, r0
   1fa9c:	468b      	mov	fp, r1
   1fa9e:	e64d      	b.n	1f73c <_strtod_l+0x7c>
   1faa0:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
   1faa4:	9a08      	ldr	r2, [sp, #32]
   1faa6:	4293      	cmp	r3, r2
   1faa8:	db20      	blt.n	1faec <_strtod_l+0x42c>
   1faaa:	f1c4 040f 	rsb	r4, r4, #15
   1faae:	4d5e      	ldr	r5, [pc, #376]	; (1fc28 <_strtod_l+0x568>)
   1fab0:	4652      	mov	r2, sl
   1fab2:	465b      	mov	r3, fp
   1fab4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
   1fab8:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fabc:	f7fc fe7c 	bl	1c7b8 <__aeabi_dmul>
   1fac0:	9b08      	ldr	r3, [sp, #32]
   1fac2:	1b1c      	subs	r4, r3, r4
   1fac4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1fac8:	e9d5 2300 	ldrd	r2, r3, [r5]
   1facc:	e7e3      	b.n	1fa96 <_strtod_l+0x3d6>
   1face:	9b08      	ldr	r3, [sp, #32]
   1fad0:	3316      	adds	r3, #22
   1fad2:	db0b      	blt.n	1faec <_strtod_l+0x42c>
   1fad4:	9b05      	ldr	r3, [sp, #20]
   1fad6:	4650      	mov	r0, sl
   1fad8:	4a53      	ldr	r2, [pc, #332]	; (1fc28 <_strtod_l+0x568>)
   1fada:	4659      	mov	r1, fp
   1fadc:	1b5d      	subs	r5, r3, r5
   1fade:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
   1fae2:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fae6:	f7fc ff91 	bl	1ca0c <__aeabi_ddiv>
   1faea:	e7d6      	b.n	1fa9a <_strtod_l+0x3da>
   1faec:	1ba6      	subs	r6, r4, r6
   1faee:	9b08      	ldr	r3, [sp, #32]
   1faf0:	441e      	add	r6, r3
   1faf2:	2e00      	cmp	r6, #0
   1faf4:	dd6e      	ble.n	1fbd4 <_strtod_l+0x514>
   1faf6:	f016 030f 	ands.w	r3, r6, #15
   1fafa:	d00a      	beq.n	1fb12 <_strtod_l+0x452>
   1fafc:	494a      	ldr	r1, [pc, #296]	; (1fc28 <_strtod_l+0x568>)
   1fafe:	4652      	mov	r2, sl
   1fb00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1fb04:	465b      	mov	r3, fp
   1fb06:	e9d1 0100 	ldrd	r0, r1, [r1]
   1fb0a:	f7fc fe55 	bl	1c7b8 <__aeabi_dmul>
   1fb0e:	4682      	mov	sl, r0
   1fb10:	468b      	mov	fp, r1
   1fb12:	f036 060f 	bics.w	r6, r6, #15
   1fb16:	d04e      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fb18:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
   1fb1c:	dd23      	ble.n	1fb66 <_strtod_l+0x4a6>
   1fb1e:	2400      	movs	r4, #0
   1fb20:	9405      	str	r4, [sp, #20]
   1fb22:	9409      	str	r4, [sp, #36]	; 0x24
   1fb24:	9407      	str	r4, [sp, #28]
   1fb26:	2322      	movs	r3, #34	; 0x22
   1fb28:	9a04      	ldr	r2, [sp, #16]
   1fb2a:	f8df b104 	ldr.w	fp, [pc, #260]	; 1fc30 <_strtod_l+0x570>
   1fb2e:	f04f 0a00 	mov.w	sl, #0
   1fb32:	6013      	str	r3, [r2, #0]
   1fb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb36:	2b00      	cmp	r3, #0
   1fb38:	f43f ae00 	beq.w	1f73c <_strtod_l+0x7c>
   1fb3c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fb3e:	9804      	ldr	r0, [sp, #16]
   1fb40:	f029 f804 	bl	48b4c <_Bfree>
   1fb44:	9907      	ldr	r1, [sp, #28]
   1fb46:	9804      	ldr	r0, [sp, #16]
   1fb48:	f029 f800 	bl	48b4c <_Bfree>
   1fb4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fb50:	f028 fffc 	bl	48b4c <_Bfree>
   1fb54:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fb56:	9804      	ldr	r0, [sp, #16]
   1fb58:	f028 fff8 	bl	48b4c <_Bfree>
   1fb5c:	4621      	mov	r1, r4
   1fb5e:	9804      	ldr	r0, [sp, #16]
   1fb60:	f028 fff4 	bl	48b4c <_Bfree>
   1fb64:	e5ea      	b.n	1f73c <_strtod_l+0x7c>
   1fb66:	2300      	movs	r3, #0
   1fb68:	1136      	asrs	r6, r6, #4
   1fb6a:	4650      	mov	r0, sl
   1fb6c:	4659      	mov	r1, fp
   1fb6e:	461f      	mov	r7, r3
   1fb70:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1fc2c <_strtod_l+0x56c>
   1fb74:	2e01      	cmp	r6, #1
   1fb76:	dc21      	bgt.n	1fbbc <_strtod_l+0x4fc>
   1fb78:	b10b      	cbz	r3, 1fb7e <_strtod_l+0x4be>
   1fb7a:	4682      	mov	sl, r0
   1fb7c:	468b      	mov	fp, r1
   1fb7e:	4b2b      	ldr	r3, [pc, #172]	; (1fc2c <_strtod_l+0x56c>)
   1fb80:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1fb84:	4652      	mov	r2, sl
   1fb86:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
   1fb8a:	465b      	mov	r3, fp
   1fb8c:	e9d7 0100 	ldrd	r0, r1, [r7]
   1fb90:	f7fc fe12 	bl	1c7b8 <__aeabi_dmul>
   1fb94:	4b26      	ldr	r3, [pc, #152]	; (1fc30 <_strtod_l+0x570>)
   1fb96:	460a      	mov	r2, r1
   1fb98:	4682      	mov	sl, r0
   1fb9a:	400b      	ands	r3, r1
   1fb9c:	4925      	ldr	r1, [pc, #148]	; (1fc34 <_strtod_l+0x574>)
   1fb9e:	428b      	cmp	r3, r1
   1fba0:	d8bd      	bhi.n	1fb1e <_strtod_l+0x45e>
   1fba2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1fba6:	428b      	cmp	r3, r1
   1fba8:	bf86      	itte	hi
   1fbaa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	; 1fc38 <_strtod_l+0x578>
   1fbae:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   1fbb2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1fbb6:	2300      	movs	r3, #0
   1fbb8:	9306      	str	r3, [sp, #24]
   1fbba:	e078      	b.n	1fcae <_strtod_l+0x5ee>
   1fbbc:	07f2      	lsls	r2, r6, #31
   1fbbe:	d506      	bpl.n	1fbce <_strtod_l+0x50e>
   1fbc0:	eb09 03c7 	add.w	r3, r9, r7, lsl #3
   1fbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fbc8:	f7fc fdf6 	bl	1c7b8 <__aeabi_dmul>
   1fbcc:	2301      	movs	r3, #1
   1fbce:	3701      	adds	r7, #1
   1fbd0:	1076      	asrs	r6, r6, #1
   1fbd2:	e7cf      	b.n	1fb74 <_strtod_l+0x4b4>
   1fbd4:	d0ef      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fbd6:	4276      	negs	r6, r6
   1fbd8:	f016 020f 	ands.w	r2, r6, #15
   1fbdc:	d00a      	beq.n	1fbf4 <_strtod_l+0x534>
   1fbde:	4b12      	ldr	r3, [pc, #72]	; (1fc28 <_strtod_l+0x568>)
   1fbe0:	4650      	mov	r0, sl
   1fbe2:	4659      	mov	r1, fp
   1fbe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1fbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fbec:	f7fc ff0e 	bl	1ca0c <__aeabi_ddiv>
   1fbf0:	4682      	mov	sl, r0
   1fbf2:	468b      	mov	fp, r1
   1fbf4:	1136      	asrs	r6, r6, #4
   1fbf6:	d0de      	beq.n	1fbb6 <_strtod_l+0x4f6>
   1fbf8:	2e1f      	cmp	r6, #31
   1fbfa:	dd1f      	ble.n	1fc3c <_strtod_l+0x57c>
   1fbfc:	2400      	movs	r4, #0
   1fbfe:	9405      	str	r4, [sp, #20]
   1fc00:	9409      	str	r4, [sp, #36]	; 0x24
   1fc02:	9407      	str	r4, [sp, #28]
   1fc04:	2322      	movs	r3, #34	; 0x22
   1fc06:	9a04      	ldr	r2, [sp, #16]
   1fc08:	f04f 0a00 	mov.w	sl, #0
   1fc0c:	f04f 0b00 	mov.w	fp, #0
   1fc10:	6013      	str	r3, [r2, #0]
   1fc12:	e78f      	b.n	1fb34 <_strtod_l+0x474>
   1fc14:	0004c409 	.word	0x0004c409
   1fc18:	00052c00 	.word	0x00052c00
   1fc1c:	00052be9 	.word	0x00052be9
   1fc20:	0004a968 	.word	0x0004a968
   1fc24:	0004c55d 	.word	0x0004c55d
   1fc28:	00049a18 	.word	0x00049a18
   1fc2c:	000499f0 	.word	0x000499f0
   1fc30:	7ff00000 	.word	0x7ff00000
   1fc34:	7ca00000 	.word	0x7ca00000
   1fc38:	7fefffff 	.word	0x7fefffff
   1fc3c:	f016 0310 	ands.w	r3, r6, #16
   1fc40:	4650      	mov	r0, sl
   1fc42:	4659      	mov	r1, fp
   1fc44:	4fac      	ldr	r7, [pc, #688]	; (1fef8 <_strtod_l+0x838>)
   1fc46:	bf18      	it	ne
   1fc48:	236a      	movne	r3, #106	; 0x6a
   1fc4a:	9306      	str	r3, [sp, #24]
   1fc4c:	2300      	movs	r3, #0
   1fc4e:	07f2      	lsls	r2, r6, #31
   1fc50:	d504      	bpl.n	1fc5c <_strtod_l+0x59c>
   1fc52:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fc56:	f7fc fdaf 	bl	1c7b8 <__aeabi_dmul>
   1fc5a:	2301      	movs	r3, #1
   1fc5c:	1076      	asrs	r6, r6, #1
   1fc5e:	f107 0708 	add.w	r7, r7, #8
   1fc62:	d1f4      	bne.n	1fc4e <_strtod_l+0x58e>
   1fc64:	b10b      	cbz	r3, 1fc6a <_strtod_l+0x5aa>
   1fc66:	4682      	mov	sl, r0
   1fc68:	468b      	mov	fp, r1
   1fc6a:	9b06      	ldr	r3, [sp, #24]
   1fc6c:	b1bb      	cbz	r3, 1fc9e <_strtod_l+0x5de>
   1fc6e:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1fc72:	4659      	mov	r1, fp
   1fc74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1fc78:	2b00      	cmp	r3, #0
   1fc7a:	dd10      	ble.n	1fc9e <_strtod_l+0x5de>
   1fc7c:	2b1f      	cmp	r3, #31
   1fc7e:	f340 8126 	ble.w	1fece <_strtod_l+0x80e>
   1fc82:	2b34      	cmp	r3, #52	; 0x34
   1fc84:	f04f 0a00 	mov.w	sl, #0
   1fc88:	bfdb      	ittet	le
   1fc8a:	3b20      	suble	r3, #32
   1fc8c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   1fc90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1fc94:	fa02 f303 	lslle.w	r3, r2, r3
   1fc98:	bfd8      	it	le
   1fc9a:	ea03 0b01 	andle.w	fp, r3, r1
   1fc9e:	2200      	movs	r2, #0
   1fca0:	2300      	movs	r3, #0
   1fca2:	4650      	mov	r0, sl
   1fca4:	4659      	mov	r1, fp
   1fca6:	f7fc ffef 	bl	1cc88 <__aeabi_dcmpeq>
   1fcaa:	2800      	cmp	r0, #0
   1fcac:	d1a6      	bne.n	1fbfc <_strtod_l+0x53c>
   1fcae:	9b07      	ldr	r3, [sp, #28]
   1fcb0:	4642      	mov	r2, r8
   1fcb2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fcb4:	9300      	str	r3, [sp, #0]
   1fcb6:	4623      	mov	r3, r4
   1fcb8:	9804      	ldr	r0, [sp, #16]
   1fcba:	f028 ff9b 	bl	48bf4 <__s2b>
   1fcbe:	9009      	str	r0, [sp, #36]	; 0x24
   1fcc0:	2800      	cmp	r0, #0
   1fcc2:	f43f af2c 	beq.w	1fb1e <_strtod_l+0x45e>
   1fcc6:	9b05      	ldr	r3, [sp, #20]
   1fcc8:	2400      	movs	r4, #0
   1fcca:	1b5d      	subs	r5, r3, r5
   1fccc:	9b08      	ldr	r3, [sp, #32]
   1fcce:	9405      	str	r4, [sp, #20]
   1fcd0:	2b00      	cmp	r3, #0
   1fcd2:	bfb4      	ite	lt
   1fcd4:	462b      	movlt	r3, r5
   1fcd6:	2300      	movge	r3, #0
   1fcd8:	930e      	str	r3, [sp, #56]	; 0x38
   1fcda:	9b08      	ldr	r3, [sp, #32]
   1fcdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1fce0:	9316      	str	r3, [sp, #88]	; 0x58
   1fce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fce4:	9804      	ldr	r0, [sp, #16]
   1fce6:	6859      	ldr	r1, [r3, #4]
   1fce8:	f028 fefc 	bl	48ae4 <_Balloc>
   1fcec:	9007      	str	r0, [sp, #28]
   1fcee:	2800      	cmp	r0, #0
   1fcf0:	f43f af19 	beq.w	1fb26 <_strtod_l+0x466>
   1fcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcf6:	300c      	adds	r0, #12
   1fcf8:	691a      	ldr	r2, [r3, #16]
   1fcfa:	f103 010c 	add.w	r1, r3, #12
   1fcfe:	3202      	adds	r2, #2
   1fd00:	0092      	lsls	r2, r2, #2
   1fd02:	f028 fa41 	bl	48188 <memcpy>
   1fd06:	aa1e      	add	r2, sp, #120	; 0x78
   1fd08:	a91d      	add	r1, sp, #116	; 0x74
   1fd0a:	9804      	ldr	r0, [sp, #16]
   1fd0c:	ec4b ab10 	vmov	d0, sl, fp
   1fd10:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1fd14:	f029 f961 	bl	48fda <__d2b>
   1fd18:	901c      	str	r0, [sp, #112]	; 0x70
   1fd1a:	2800      	cmp	r0, #0
   1fd1c:	f43f af03 	beq.w	1fb26 <_strtod_l+0x466>
   1fd20:	2101      	movs	r1, #1
   1fd22:	9804      	ldr	r0, [sp, #16]
   1fd24:	f028 fff4 	bl	48d10 <__i2b>
   1fd28:	9005      	str	r0, [sp, #20]
   1fd2a:	4603      	mov	r3, r0
   1fd2c:	2800      	cmp	r0, #0
   1fd2e:	f43f aefa 	beq.w	1fb26 <_strtod_l+0x466>
   1fd32:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1fd34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1fd36:	2e00      	cmp	r6, #0
   1fd38:	bfa9      	itett	ge
   1fd3a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
   1fd3c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
   1fd3e:	18f7      	addge	r7, r6, r3
   1fd40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
   1fd42:	bfb8      	it	lt
   1fd44:	1b9d      	sublt	r5, r3, r6
   1fd46:	9b06      	ldr	r3, [sp, #24]
   1fd48:	bfb8      	it	lt
   1fd4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
   1fd4c:	1af6      	subs	r6, r6, r3
   1fd4e:	4b6b      	ldr	r3, [pc, #428]	; (1fefc <_strtod_l+0x83c>)
   1fd50:	4416      	add	r6, r2
   1fd52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1fd56:	3e01      	subs	r6, #1
   1fd58:	429e      	cmp	r6, r3
   1fd5a:	f280 80bf 	bge.w	1fedc <_strtod_l+0x81c>
   1fd5e:	1b9b      	subs	r3, r3, r6
   1fd60:	f04f 0801 	mov.w	r8, #1
   1fd64:	2b1f      	cmp	r3, #31
   1fd66:	eba2 0203 	sub.w	r2, r2, r3
   1fd6a:	bfcd      	iteet	gt
   1fd6c:	f1c6 467f 	rsbgt	r6, r6, #4278190080	; 0xff000000
   1fd70:	fa08 f803 	lslle.w	r8, r8, r3
   1fd74:	2600      	movle	r6, #0
   1fd76:	f506 067f 	addgt.w	r6, r6, #16711680	; 0xff0000
   1fd7a:	bfc2      	ittt	gt
   1fd7c:	f506 467b 	addgt.w	r6, r6, #64256	; 0xfb00
   1fd80:	36e2      	addgt	r6, #226	; 0xe2
   1fd82:	fa08 f606 	lslgt.w	r6, r8, r6
   1fd86:	eb07 0902 	add.w	r9, r7, r2
   1fd8a:	9b06      	ldr	r3, [sp, #24]
   1fd8c:	4415      	add	r5, r2
   1fd8e:	454f      	cmp	r7, r9
   1fd90:	441d      	add	r5, r3
   1fd92:	463b      	mov	r3, r7
   1fd94:	bfa8      	it	ge
   1fd96:	464b      	movge	r3, r9
   1fd98:	42ab      	cmp	r3, r5
   1fd9a:	bfa8      	it	ge
   1fd9c:	462b      	movge	r3, r5
   1fd9e:	2b00      	cmp	r3, #0
   1fda0:	bfc2      	ittt	gt
   1fda2:	eba9 0903 	subgt.w	r9, r9, r3
   1fda6:	1aed      	subgt	r5, r5, r3
   1fda8:	1aff      	subgt	r7, r7, r3
   1fdaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fdac:	2b00      	cmp	r3, #0
   1fdae:	dd17      	ble.n	1fde0 <_strtod_l+0x720>
   1fdb0:	461a      	mov	r2, r3
   1fdb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fdb6:	f023 fc1b 	bl	435f0 <__pow5mult>
   1fdba:	9005      	str	r0, [sp, #20]
   1fdbc:	2800      	cmp	r0, #0
   1fdbe:	f43f aeb2 	beq.w	1fb26 <_strtod_l+0x466>
   1fdc2:	4601      	mov	r1, r0
   1fdc4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1fdc6:	9804      	ldr	r0, [sp, #16]
   1fdc8:	f028 ffab 	bl	48d22 <__multiply>
   1fdcc:	900d      	str	r0, [sp, #52]	; 0x34
   1fdce:	2800      	cmp	r0, #0
   1fdd0:	f43f aea9 	beq.w	1fb26 <_strtod_l+0x466>
   1fdd4:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fdd6:	9804      	ldr	r0, [sp, #16]
   1fdd8:	f028 feb8 	bl	48b4c <_Bfree>
   1fddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fdde:	931c      	str	r3, [sp, #112]	; 0x70
   1fde0:	f1b9 0f00 	cmp.w	r9, #0
   1fde4:	dc7e      	bgt.n	1fee4 <_strtod_l+0x824>
   1fde6:	9b08      	ldr	r3, [sp, #32]
   1fde8:	2b00      	cmp	r3, #0
   1fdea:	dd08      	ble.n	1fdfe <_strtod_l+0x73e>
   1fdec:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1fdee:	9907      	ldr	r1, [sp, #28]
   1fdf0:	9804      	ldr	r0, [sp, #16]
   1fdf2:	f023 fbfd 	bl	435f0 <__pow5mult>
   1fdf6:	9007      	str	r0, [sp, #28]
   1fdf8:	2800      	cmp	r0, #0
   1fdfa:	f43f ae94 	beq.w	1fb26 <_strtod_l+0x466>
   1fdfe:	2d00      	cmp	r5, #0
   1fe00:	dd08      	ble.n	1fe14 <_strtod_l+0x754>
   1fe02:	462a      	mov	r2, r5
   1fe04:	9907      	ldr	r1, [sp, #28]
   1fe06:	9804      	ldr	r0, [sp, #16]
   1fe08:	f029 f81a 	bl	48e40 <__lshift>
   1fe0c:	9007      	str	r0, [sp, #28]
   1fe0e:	2800      	cmp	r0, #0
   1fe10:	f43f ae89 	beq.w	1fb26 <_strtod_l+0x466>
   1fe14:	2f00      	cmp	r7, #0
   1fe16:	dd08      	ble.n	1fe2a <_strtod_l+0x76a>
   1fe18:	463a      	mov	r2, r7
   1fe1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1fe1e:	f029 f80f 	bl	48e40 <__lshift>
   1fe22:	9005      	str	r0, [sp, #20]
   1fe24:	2800      	cmp	r0, #0
   1fe26:	f43f ae7e 	beq.w	1fb26 <_strtod_l+0x466>
   1fe2a:	9a07      	ldr	r2, [sp, #28]
   1fe2c:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fe2e:	9804      	ldr	r0, [sp, #16]
   1fe30:	f029 f873 	bl	48f1a <__mdiff>
   1fe34:	4604      	mov	r4, r0
   1fe36:	2800      	cmp	r0, #0
   1fe38:	f43f ae75 	beq.w	1fb26 <_strtod_l+0x466>
   1fe3c:	68c3      	ldr	r3, [r0, #12]
   1fe3e:	9905      	ldr	r1, [sp, #20]
   1fe40:	930d      	str	r3, [sp, #52]	; 0x34
   1fe42:	2300      	movs	r3, #0
   1fe44:	60c3      	str	r3, [r0, #12]
   1fe46:	f029 f84e 	bl	48ee6 <__mcmp>
   1fe4a:	2800      	cmp	r0, #0
   1fe4c:	da5c      	bge.n	1ff08 <_strtod_l+0x848>
   1fe4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fe50:	ea53 030a 	orrs.w	r3, r3, sl
   1fe54:	d17e      	bne.n	1ff54 <_strtod_l+0x894>
   1fe56:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1fe5a:	2b00      	cmp	r3, #0
   1fe5c:	d17a      	bne.n	1ff54 <_strtod_l+0x894>
   1fe5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1fe62:	0d1b      	lsrs	r3, r3, #20
   1fe64:	051b      	lsls	r3, r3, #20
   1fe66:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1fe6a:	d973      	bls.n	1ff54 <_strtod_l+0x894>
   1fe6c:	6963      	ldr	r3, [r4, #20]
   1fe6e:	b913      	cbnz	r3, 1fe76 <_strtod_l+0x7b6>
   1fe70:	6923      	ldr	r3, [r4, #16]
   1fe72:	2b01      	cmp	r3, #1
   1fe74:	dd6e      	ble.n	1ff54 <_strtod_l+0x894>
   1fe76:	4621      	mov	r1, r4
   1fe78:	2201      	movs	r2, #1
   1fe7a:	9804      	ldr	r0, [sp, #16]
   1fe7c:	f028 ffe0 	bl	48e40 <__lshift>
   1fe80:	9905      	ldr	r1, [sp, #20]
   1fe82:	4604      	mov	r4, r0
   1fe84:	f029 f82f 	bl	48ee6 <__mcmp>
   1fe88:	2800      	cmp	r0, #0
   1fe8a:	dd63      	ble.n	1ff54 <_strtod_l+0x894>
   1fe8c:	9906      	ldr	r1, [sp, #24]
   1fe8e:	465b      	mov	r3, fp
   1fe90:	4a1b      	ldr	r2, [pc, #108]	; (1ff00 <_strtod_l+0x840>)
   1fe92:	2900      	cmp	r1, #0
   1fe94:	d07d      	beq.n	1ff92 <_strtod_l+0x8d2>
   1fe96:	ea02 010b 	and.w	r1, r2, fp
   1fe9a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1fe9e:	dc78      	bgt.n	1ff92 <_strtod_l+0x8d2>
   1fea0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1fea4:	f77f aeae 	ble.w	1fc04 <_strtod_l+0x544>
   1fea8:	2300      	movs	r3, #0
   1feaa:	4a16      	ldr	r2, [pc, #88]	; (1ff04 <_strtod_l+0x844>)
   1feac:	4650      	mov	r0, sl
   1feae:	4659      	mov	r1, fp
   1feb0:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
   1feb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1feb8:	f7fc fc7e 	bl	1c7b8 <__aeabi_dmul>
   1febc:	460b      	mov	r3, r1
   1febe:	4682      	mov	sl, r0
   1fec0:	468b      	mov	fp, r1
   1fec2:	4303      	orrs	r3, r0
   1fec4:	bf02      	ittt	eq
   1fec6:	2322      	moveq	r3, #34	; 0x22
   1fec8:	9a04      	ldreq	r2, [sp, #16]
   1feca:	6013      	streq	r3, [r2, #0]
   1fecc:	e636      	b.n	1fb3c <_strtod_l+0x47c>
   1fece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fed2:	fa02 f303 	lsl.w	r3, r2, r3
   1fed6:	ea03 0a0a 	and.w	sl, r3, sl
   1feda:	e6e0      	b.n	1fc9e <_strtod_l+0x5de>
   1fedc:	2600      	movs	r6, #0
   1fede:	f04f 0801 	mov.w	r8, #1
   1fee2:	e750      	b.n	1fd86 <_strtod_l+0x6c6>
   1fee4:	464a      	mov	r2, r9
   1fee6:	991c      	ldr	r1, [sp, #112]	; 0x70
   1fee8:	9804      	ldr	r0, [sp, #16]
   1feea:	f028 ffa9 	bl	48e40 <__lshift>
   1feee:	901c      	str	r0, [sp, #112]	; 0x70
   1fef0:	2800      	cmp	r0, #0
   1fef2:	f47f af78 	bne.w	1fde6 <_strtod_l+0x726>
   1fef6:	e616      	b.n	1fb26 <_strtod_l+0x466>
   1fef8:	000499c8 	.word	0x000499c8
   1fefc:	fffffc02 	.word	0xfffffc02
   1ff00:	7ff00000 	.word	0x7ff00000
   1ff04:	39500000 	.word	0x39500000
   1ff08:	465d      	mov	r5, fp
   1ff0a:	d160      	bne.n	1ffce <_strtod_l+0x90e>
   1ff0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ff0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ff12:	b342      	cbz	r2, 1ff66 <_strtod_l+0x8a6>
   1ff14:	4ab8      	ldr	r2, [pc, #736]	; (201f8 <_strtod_l+0xb38>)
   1ff16:	4293      	cmp	r3, r2
   1ff18:	d128      	bne.n	1ff6c <_strtod_l+0x8ac>
   1ff1a:	9b06      	ldr	r3, [sp, #24]
   1ff1c:	4650      	mov	r0, sl
   1ff1e:	b1eb      	cbz	r3, 1ff5c <_strtod_l+0x89c>
   1ff20:	4ab6      	ldr	r2, [pc, #728]	; (201fc <_strtod_l+0xb3c>)
   1ff22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ff26:	402a      	ands	r2, r5
   1ff28:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1ff2c:	d819      	bhi.n	1ff62 <_strtod_l+0x8a2>
   1ff2e:	0d12      	lsrs	r2, r2, #20
   1ff30:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ff34:	fa01 f303 	lsl.w	r3, r1, r3
   1ff38:	4298      	cmp	r0, r3
   1ff3a:	d117      	bne.n	1ff6c <_strtod_l+0x8ac>
   1ff3c:	4bb0      	ldr	r3, [pc, #704]	; (20200 <_strtod_l+0xb40>)
   1ff3e:	429d      	cmp	r5, r3
   1ff40:	d102      	bne.n	1ff48 <_strtod_l+0x888>
   1ff42:	3001      	adds	r0, #1
   1ff44:	f43f adef 	beq.w	1fb26 <_strtod_l+0x466>
   1ff48:	4bac      	ldr	r3, [pc, #688]	; (201fc <_strtod_l+0xb3c>)
   1ff4a:	f04f 0a00 	mov.w	sl, #0
   1ff4e:	402b      	ands	r3, r5
   1ff50:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1ff54:	9b06      	ldr	r3, [sp, #24]
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d1a6      	bne.n	1fea8 <_strtod_l+0x7e8>
   1ff5a:	e5ef      	b.n	1fb3c <_strtod_l+0x47c>
   1ff5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff60:	e7ea      	b.n	1ff38 <_strtod_l+0x878>
   1ff62:	460b      	mov	r3, r1
   1ff64:	e7e8      	b.n	1ff38 <_strtod_l+0x878>
   1ff66:	ea53 030a 	orrs.w	r3, r3, sl
   1ff6a:	d08f      	beq.n	1fe8c <_strtod_l+0x7cc>
   1ff6c:	b1de      	cbz	r6, 1ffa6 <_strtod_l+0x8e6>
   1ff6e:	422e      	tst	r6, r5
   1ff70:	d0f0      	beq.n	1ff54 <_strtod_l+0x894>
   1ff72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ff74:	4650      	mov	r0, sl
   1ff76:	9a06      	ldr	r2, [sp, #24]
   1ff78:	4659      	mov	r1, fp
   1ff7a:	b1bb      	cbz	r3, 1ffac <_strtod_l+0x8ec>
   1ff7c:	f028 fb45 	bl	4860a <sulp>
   1ff80:	4602      	mov	r2, r0
   1ff82:	460b      	mov	r3, r1
   1ff84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ff88:	f7fc fa60 	bl	1c44c <__adddf3>
   1ff8c:	4682      	mov	sl, r0
   1ff8e:	468b      	mov	fp, r1
   1ff90:	e7e0      	b.n	1ff54 <_strtod_l+0x894>
   1ff92:	4013      	ands	r3, r2
   1ff94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1ff98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ff9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1ffa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1ffa4:	e7d6      	b.n	1ff54 <_strtod_l+0x894>
   1ffa6:	ea18 0f0a 	tst.w	r8, sl
   1ffaa:	e7e1      	b.n	1ff70 <_strtod_l+0x8b0>
   1ffac:	f028 fb2d 	bl	4860a <sulp>
   1ffb0:	4602      	mov	r2, r0
   1ffb2:	460b      	mov	r3, r1
   1ffb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ffb8:	f7fc fa46 	bl	1c448 <__aeabi_dsub>
   1ffbc:	2200      	movs	r2, #0
   1ffbe:	2300      	movs	r3, #0
   1ffc0:	4682      	mov	sl, r0
   1ffc2:	468b      	mov	fp, r1
   1ffc4:	f7fc fe60 	bl	1cc88 <__aeabi_dcmpeq>
   1ffc8:	2800      	cmp	r0, #0
   1ffca:	d0c3      	beq.n	1ff54 <_strtod_l+0x894>
   1ffcc:	e61a      	b.n	1fc04 <_strtod_l+0x544>
   1ffce:	9905      	ldr	r1, [sp, #20]
   1ffd0:	4620      	mov	r0, r4
   1ffd2:	f029 f850 	bl	49076 <__ratio>
   1ffd6:	2200      	movs	r2, #0
   1ffd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ffdc:	ee10 0a10 	vmov	r0, s0
   1ffe0:	ec57 6b10 	vmov	r6, r7, d0
   1ffe4:	4639      	mov	r1, r7
   1ffe6:	f7fc fe63 	bl	1ccb0 <__aeabi_dcmple>
   1ffea:	2800      	cmp	r0, #0
   1ffec:	d073      	beq.n	200d6 <_strtod_l+0xa16>
   1ffee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1fff0:	2b00      	cmp	r3, #0
   1fff2:	d046      	beq.n	20082 <_strtod_l+0x9c2>
   1fff4:	f04f 0800 	mov.w	r8, #0
   1fff8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 20204 <_strtod_l+0xb44>
   1fffc:	2600      	movs	r6, #0
   1fffe:	4f81      	ldr	r7, [pc, #516]	; (20204 <_strtod_l+0xb44>)
   20000:	4b7e      	ldr	r3, [pc, #504]	; (201fc <_strtod_l+0xb3c>)
   20002:	402b      	ands	r3, r5
   20004:	930f      	str	r3, [sp, #60]	; 0x3c
   20006:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20008:	4b7f      	ldr	r3, [pc, #508]	; (20208 <_strtod_l+0xb48>)
   2000a:	429a      	cmp	r2, r3
   2000c:	f040 80ab 	bne.w	20166 <_strtod_l+0xaa6>
   20010:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
   20014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   20018:	ec4b ab10 	vmov	d0, sl, fp
   2001c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   20020:	f023 fb34 	bl	4368c <__ulp>
   20024:	4640      	mov	r0, r8
   20026:	4649      	mov	r1, r9
   20028:	ec53 2b10 	vmov	r2, r3, d0
   2002c:	f7fc fbc4 	bl	1c7b8 <__aeabi_dmul>
   20030:	4652      	mov	r2, sl
   20032:	465b      	mov	r3, fp
   20034:	f7fc fa0a 	bl	1c44c <__adddf3>
   20038:	460b      	mov	r3, r1
   2003a:	4970      	ldr	r1, [pc, #448]	; (201fc <_strtod_l+0xb3c>)
   2003c:	4682      	mov	sl, r0
   2003e:	4a73      	ldr	r2, [pc, #460]	; (2020c <_strtod_l+0xb4c>)
   20040:	4019      	ands	r1, r3
   20042:	4291      	cmp	r1, r2
   20044:	d95b      	bls.n	200fe <_strtod_l+0xa3e>
   20046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   20048:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   2004c:	4293      	cmp	r3, r2
   2004e:	d103      	bne.n	20058 <_strtod_l+0x998>
   20050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20052:	3301      	adds	r3, #1
   20054:	f43f ad67 	beq.w	1fb26 <_strtod_l+0x466>
   20058:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 20200 <_strtod_l+0xb40>
   2005c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   20060:	991c      	ldr	r1, [sp, #112]	; 0x70
   20062:	9804      	ldr	r0, [sp, #16]
   20064:	f028 fd72 	bl	48b4c <_Bfree>
   20068:	9907      	ldr	r1, [sp, #28]
   2006a:	9804      	ldr	r0, [sp, #16]
   2006c:	f028 fd6e 	bl	48b4c <_Bfree>
   20070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20074:	f028 fd6a 	bl	48b4c <_Bfree>
   20078:	4621      	mov	r1, r4
   2007a:	9804      	ldr	r0, [sp, #16]
   2007c:	f028 fd66 	bl	48b4c <_Bfree>
   20080:	e62f      	b.n	1fce2 <_strtod_l+0x622>
   20082:	f1ba 0f00 	cmp.w	sl, #0
   20086:	d118      	bne.n	200ba <_strtod_l+0x9fa>
   20088:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2008c:	b9db      	cbnz	r3, 200c6 <_strtod_l+0xa06>
   2008e:	2200      	movs	r2, #0
   20090:	4b5c      	ldr	r3, [pc, #368]	; (20204 <_strtod_l+0xb44>)
   20092:	4630      	mov	r0, r6
   20094:	4639      	mov	r1, r7
   20096:	f7fc fe01 	bl	1cc9c <__aeabi_dcmplt>
   2009a:	b9c8      	cbnz	r0, 200d0 <_strtod_l+0xa10>
   2009c:	4630      	mov	r0, r6
   2009e:	4639      	mov	r1, r7
   200a0:	2200      	movs	r2, #0
   200a2:	4b5b      	ldr	r3, [pc, #364]	; (20210 <_strtod_l+0xb50>)
   200a4:	f7fc fb88 	bl	1c7b8 <__aeabi_dmul>
   200a8:	4606      	mov	r6, r0
   200aa:	460f      	mov	r7, r1
   200ac:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   200b0:	9618      	str	r6, [sp, #96]	; 0x60
   200b2:	9319      	str	r3, [sp, #100]	; 0x64
   200b4:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   200b8:	e7a2      	b.n	20000 <_strtod_l+0x940>
   200ba:	f1ba 0f01 	cmp.w	sl, #1
   200be:	d102      	bne.n	200c6 <_strtod_l+0xa06>
   200c0:	2d00      	cmp	r5, #0
   200c2:	f43f ad9f 	beq.w	1fc04 <_strtod_l+0x544>
   200c6:	f04f 0800 	mov.w	r8, #0
   200ca:	f8df 9148 	ldr.w	r9, [pc, #328]	; 20214 <_strtod_l+0xb54>
   200ce:	e795      	b.n	1fffc <_strtod_l+0x93c>
   200d0:	2600      	movs	r6, #0
   200d2:	4f4f      	ldr	r7, [pc, #316]	; (20210 <_strtod_l+0xb50>)
   200d4:	e7ea      	b.n	200ac <_strtod_l+0x9ec>
   200d6:	4b4e      	ldr	r3, [pc, #312]	; (20210 <_strtod_l+0xb50>)
   200d8:	4630      	mov	r0, r6
   200da:	4639      	mov	r1, r7
   200dc:	2200      	movs	r2, #0
   200de:	f7fc fb6b 	bl	1c7b8 <__aeabi_dmul>
   200e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   200e4:	4606      	mov	r6, r0
   200e6:	460f      	mov	r7, r1
   200e8:	b933      	cbnz	r3, 200f8 <_strtod_l+0xa38>
   200ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   200ee:	9010      	str	r0, [sp, #64]	; 0x40
   200f0:	9311      	str	r3, [sp, #68]	; 0x44
   200f2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   200f6:	e783      	b.n	20000 <_strtod_l+0x940>
   200f8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   200fc:	e7f9      	b.n	200f2 <_strtod_l+0xa32>
   200fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   20102:	9b06      	ldr	r3, [sp, #24]
   20104:	2b00      	cmp	r3, #0
   20106:	d1ab      	bne.n	20060 <_strtod_l+0x9a0>
   20108:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   2010c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2010e:	0d1b      	lsrs	r3, r3, #20
   20110:	051b      	lsls	r3, r3, #20
   20112:	429a      	cmp	r2, r3
   20114:	d1a4      	bne.n	20060 <_strtod_l+0x9a0>
   20116:	4630      	mov	r0, r6
   20118:	4639      	mov	r1, r7
   2011a:	f7fd f863 	bl	1d1e4 <__aeabi_d2lz>
   2011e:	f7fc fb1d 	bl	1c75c <__aeabi_l2d>
   20122:	4602      	mov	r2, r0
   20124:	460b      	mov	r3, r1
   20126:	4630      	mov	r0, r6
   20128:	4639      	mov	r1, r7
   2012a:	f7fc f98d 	bl	1c448 <__aeabi_dsub>
   2012e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   20132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   20134:	4606      	mov	r6, r0
   20136:	ea43 030a 	orr.w	r3, r3, sl
   2013a:	460f      	mov	r7, r1
   2013c:	4313      	orrs	r3, r2
   2013e:	d06b      	beq.n	20218 <_strtod_l+0xb58>
   20140:	a327      	add	r3, pc, #156	; (adr r3, 201e0 <_strtod_l+0xb20>)
   20142:	e9d3 2300 	ldrd	r2, r3, [r3]
   20146:	f7fc fda9 	bl	1cc9c <__aeabi_dcmplt>
   2014a:	2800      	cmp	r0, #0
   2014c:	f47f acf6 	bne.w	1fb3c <_strtod_l+0x47c>
   20150:	4630      	mov	r0, r6
   20152:	4639      	mov	r1, r7
   20154:	a324      	add	r3, pc, #144	; (adr r3, 201e8 <_strtod_l+0xb28>)
   20156:	e9d3 2300 	ldrd	r2, r3, [r3]
   2015a:	f7fc fdbd 	bl	1ccd8 <__aeabi_dcmpgt>
   2015e:	2800      	cmp	r0, #0
   20160:	f43f af7e 	beq.w	20060 <_strtod_l+0x9a0>
   20164:	e4ea      	b.n	1fb3c <_strtod_l+0x47c>
   20166:	9b06      	ldr	r3, [sp, #24]
   20168:	b31b      	cbz	r3, 201b2 <_strtod_l+0xaf2>
   2016a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2016c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   20170:	d81f      	bhi.n	201b2 <_strtod_l+0xaf2>
   20172:	4630      	mov	r0, r6
   20174:	4639      	mov	r1, r7
   20176:	a31e      	add	r3, pc, #120	; (adr r3, 201f0 <_strtod_l+0xb30>)
   20178:	e9d3 2300 	ldrd	r2, r3, [r3]
   2017c:	f7fc fd98 	bl	1ccb0 <__aeabi_dcmple>
   20180:	b190      	cbz	r0, 201a8 <_strtod_l+0xae8>
   20182:	4639      	mov	r1, r7
   20184:	4630      	mov	r0, r6
   20186:	f7fc fdd9 	bl	1cd3c <__aeabi_d2uiz>
   2018a:	2800      	cmp	r0, #0
   2018c:	bf08      	it	eq
   2018e:	2001      	moveq	r0, #1
   20190:	f7fc fa98 	bl	1c6c4 <__aeabi_ui2d>
   20194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20196:	4606      	mov	r6, r0
   20198:	460f      	mov	r7, r1
   2019a:	b9db      	cbnz	r3, 201d4 <_strtod_l+0xb14>
   2019c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   201a0:	9012      	str	r0, [sp, #72]	; 0x48
   201a2:	9313      	str	r3, [sp, #76]	; 0x4c
   201a4:	e9dd 8912 	ldrd	r8, r9, [sp, #72]	; 0x48
   201a8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   201ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   201ae:	eba3 0902 	sub.w	r9, r3, r2
   201b2:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   201b6:	f023 fa69 	bl	4368c <__ulp>
   201ba:	4640      	mov	r0, r8
   201bc:	4649      	mov	r1, r9
   201be:	ec53 2b10 	vmov	r2, r3, d0
   201c2:	f7fc faf9 	bl	1c7b8 <__aeabi_dmul>
   201c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   201ca:	f7fc f93f 	bl	1c44c <__adddf3>
   201ce:	4682      	mov	sl, r0
   201d0:	468b      	mov	fp, r1
   201d2:	e796      	b.n	20102 <_strtod_l+0xa42>
   201d4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
   201d8:	e7e4      	b.n	201a4 <_strtod_l+0xae4>
   201da:	bf00      	nop
   201dc:	f3af 8000 	nop.w
   201e0:	94a03595 	.word	0x94a03595
   201e4:	3fdfffff 	.word	0x3fdfffff
   201e8:	35afe535 	.word	0x35afe535
   201ec:	3fe00000 	.word	0x3fe00000
   201f0:	ffc00000 	.word	0xffc00000
   201f4:	41dfffff 	.word	0x41dfffff
   201f8:	000fffff 	.word	0x000fffff
   201fc:	7ff00000 	.word	0x7ff00000
   20200:	7fefffff 	.word	0x7fefffff
   20204:	3ff00000 	.word	0x3ff00000
   20208:	7fe00000 	.word	0x7fe00000
   2020c:	7c9fffff 	.word	0x7c9fffff
   20210:	3fe00000 	.word	0x3fe00000
   20214:	bff00000 	.word	0xbff00000
   20218:	a30b      	add	r3, pc, #44	; (adr r3, 20248 <_strtod_l+0xb88>)
   2021a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2021e:	f7fc fd3d 	bl	1cc9c <__aeabi_dcmplt>
   20222:	e79c      	b.n	2015e <_strtod_l+0xa9e>
   20224:	2300      	movs	r3, #0
   20226:	930c      	str	r3, [sp, #48]	; 0x30
   20228:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2022a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2022c:	6013      	str	r3, [r2, #0]
   2022e:	f7ff ba89 	b.w	1f744 <_strtod_l+0x84>
   20232:	2b65      	cmp	r3, #101	; 0x65
   20234:	f43f ab75 	beq.w	1f922 <_strtod_l+0x262>
   20238:	2b45      	cmp	r3, #69	; 0x45
   2023a:	f43f ab72 	beq.w	1f922 <_strtod_l+0x262>
   2023e:	2201      	movs	r2, #1
   20240:	f7ff bba6 	b.w	1f990 <_strtod_l+0x2d0>
   20244:	f3af 8000 	nop.w
   20248:	94a03595 	.word	0x94a03595
   2024c:	3fcfffff 	.word	0x3fcfffff

00020250 <_dtoa_r>:
   20250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20254:	6a47      	ldr	r7, [r0, #36]	; 0x24
   20256:	b099      	sub	sp, #100	; 0x64
   20258:	4683      	mov	fp, r0
   2025a:	9108      	str	r1, [sp, #32]
   2025c:	920d      	str	r2, [sp, #52]	; 0x34
   2025e:	9314      	str	r3, [sp, #80]	; 0x50
   20260:	9e22      	ldr	r6, [sp, #136]	; 0x88
   20262:	ec55 4b10 	vmov	r4, r5, d0
   20266:	e9cd 4500 	strd	r4, r5, [sp]
   2026a:	b947      	cbnz	r7, 2027e <_dtoa_r+0x2e>
   2026c:	2010      	movs	r0, #16
   2026e:	f021 fdb3 	bl	41dd8 <malloc>
   20272:	f8cb 0024 	str.w	r0, [fp, #36]	; 0x24
   20276:	6007      	str	r7, [r0, #0]
   20278:	60c7      	str	r7, [r0, #12]
   2027a:	e9c0 7701 	strd	r7, r7, [r0, #4]
   2027e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   20282:	6819      	ldr	r1, [r3, #0]
   20284:	b159      	cbz	r1, 2029e <_dtoa_r+0x4e>
   20286:	685a      	ldr	r2, [r3, #4]
   20288:	2301      	movs	r3, #1
   2028a:	4658      	mov	r0, fp
   2028c:	4093      	lsls	r3, r2
   2028e:	604a      	str	r2, [r1, #4]
   20290:	608b      	str	r3, [r1, #8]
   20292:	f028 fc5b 	bl	48b4c <_Bfree>
   20296:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   2029a:	2200      	movs	r2, #0
   2029c:	601a      	str	r2, [r3, #0]
   2029e:	1e2b      	subs	r3, r5, #0
   202a0:	bfb7      	itett	lt
   202a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   202a6:	2300      	movge	r3, #0
   202a8:	2201      	movlt	r2, #1
   202aa:	9301      	strlt	r3, [sp, #4]
   202ac:	bfa8      	it	ge
   202ae:	6033      	strge	r3, [r6, #0]
   202b0:	9c01      	ldr	r4, [sp, #4]
   202b2:	4bb1      	ldr	r3, [pc, #708]	; (20578 <_dtoa_r+0x328>)
   202b4:	bfb8      	it	lt
   202b6:	6032      	strlt	r2, [r6, #0]
   202b8:	43a3      	bics	r3, r4
   202ba:	d11a      	bne.n	202f2 <_dtoa_r+0xa2>
   202bc:	f242 730f 	movw	r3, #9999	; 0x270f
   202c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   202c2:	6013      	str	r3, [r2, #0]
   202c4:	f3c4 0313 	ubfx	r3, r4, #0, #20
   202c8:	9a00      	ldr	r2, [sp, #0]
   202ca:	4313      	orrs	r3, r2
   202cc:	f000 8547 	beq.w	20d5e <_dtoa_r+0xb0e>
   202d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   202d2:	b953      	cbnz	r3, 202ea <_dtoa_r+0x9a>
   202d4:	4ba9      	ldr	r3, [pc, #676]	; (2057c <_dtoa_r+0x32c>)
   202d6:	e023      	b.n	20320 <_dtoa_r+0xd0>
   202d8:	4ba9      	ldr	r3, [pc, #676]	; (20580 <_dtoa_r+0x330>)
   202da:	9303      	str	r3, [sp, #12]
   202dc:	3308      	adds	r3, #8
   202de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   202e0:	6013      	str	r3, [r2, #0]
   202e2:	9803      	ldr	r0, [sp, #12]
   202e4:	b019      	add	sp, #100	; 0x64
   202e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   202ea:	4ba4      	ldr	r3, [pc, #656]	; (2057c <_dtoa_r+0x32c>)
   202ec:	9303      	str	r3, [sp, #12]
   202ee:	3303      	adds	r3, #3
   202f0:	e7f5      	b.n	202de <_dtoa_r+0x8e>
   202f2:	ed9d 7b00 	vldr	d7, [sp]
   202f6:	2200      	movs	r2, #0
   202f8:	2300      	movs	r3, #0
   202fa:	ec51 0b17 	vmov	r0, r1, d7
   202fe:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   20302:	f7fc fcc1 	bl	1cc88 <__aeabi_dcmpeq>
   20306:	4607      	mov	r7, r0
   20308:	b160      	cbz	r0, 20324 <_dtoa_r+0xd4>
   2030a:	2301      	movs	r3, #1
   2030c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2030e:	6013      	str	r3, [r2, #0]
   20310:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20312:	2b00      	cmp	r3, #0
   20314:	f000 8520 	beq.w	20d58 <_dtoa_r+0xb08>
   20318:	4b9a      	ldr	r3, [pc, #616]	; (20584 <_dtoa_r+0x334>)
   2031a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   2031c:	6013      	str	r3, [r2, #0]
   2031e:	3b01      	subs	r3, #1
   20320:	9303      	str	r3, [sp, #12]
   20322:	e7de      	b.n	202e2 <_dtoa_r+0x92>
   20324:	f3c4 560a 	ubfx	r6, r4, #20, #11
   20328:	aa16      	add	r2, sp, #88	; 0x58
   2032a:	a917      	add	r1, sp, #92	; 0x5c
   2032c:	4658      	mov	r0, fp
   2032e:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
   20332:	f028 fe52 	bl	48fda <__d2b>
   20336:	4680      	mov	r8, r0
   20338:	2e00      	cmp	r6, #0
   2033a:	d07d      	beq.n	20438 <_dtoa_r+0x1e8>
   2033c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2033e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   20342:	9715      	str	r7, [sp, #84]	; 0x54
   20344:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20348:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
   2034c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
   20350:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   20354:	2200      	movs	r2, #0
   20356:	4b8c      	ldr	r3, [pc, #560]	; (20588 <_dtoa_r+0x338>)
   20358:	4620      	mov	r0, r4
   2035a:	4629      	mov	r1, r5
   2035c:	f7fc f874 	bl	1c448 <__aeabi_dsub>
   20360:	a37f      	add	r3, pc, #508	; (adr r3, 20560 <_dtoa_r+0x310>)
   20362:	e9d3 2300 	ldrd	r2, r3, [r3]
   20366:	f7fc fa27 	bl	1c7b8 <__aeabi_dmul>
   2036a:	a37f      	add	r3, pc, #508	; (adr r3, 20568 <_dtoa_r+0x318>)
   2036c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20370:	f7fc f86c 	bl	1c44c <__adddf3>
   20374:	4604      	mov	r4, r0
   20376:	460d      	mov	r5, r1
   20378:	4630      	mov	r0, r6
   2037a:	f7fc f9b3 	bl	1c6e4 <__aeabi_i2d>
   2037e:	a37c      	add	r3, pc, #496	; (adr r3, 20570 <_dtoa_r+0x320>)
   20380:	e9d3 2300 	ldrd	r2, r3, [r3]
   20384:	f7fc fa18 	bl	1c7b8 <__aeabi_dmul>
   20388:	4602      	mov	r2, r0
   2038a:	460b      	mov	r3, r1
   2038c:	4620      	mov	r0, r4
   2038e:	4629      	mov	r1, r5
   20390:	f7fc f85c 	bl	1c44c <__adddf3>
   20394:	4604      	mov	r4, r0
   20396:	460d      	mov	r5, r1
   20398:	f7fc fca8 	bl	1ccec <__aeabi_d2iz>
   2039c:	2200      	movs	r2, #0
   2039e:	4682      	mov	sl, r0
   203a0:	2300      	movs	r3, #0
   203a2:	4620      	mov	r0, r4
   203a4:	4629      	mov	r1, r5
   203a6:	f7fc fc79 	bl	1cc9c <__aeabi_dcmplt>
   203aa:	b148      	cbz	r0, 203c0 <_dtoa_r+0x170>
   203ac:	4650      	mov	r0, sl
   203ae:	f7fc f999 	bl	1c6e4 <__aeabi_i2d>
   203b2:	4622      	mov	r2, r4
   203b4:	462b      	mov	r3, r5
   203b6:	f7fc fc67 	bl	1cc88 <__aeabi_dcmpeq>
   203ba:	b908      	cbnz	r0, 203c0 <_dtoa_r+0x170>
   203bc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   203c0:	f1ba 0f16 	cmp.w	sl, #22
   203c4:	d857      	bhi.n	20476 <_dtoa_r+0x226>
   203c6:	4b71      	ldr	r3, [pc, #452]	; (2058c <_dtoa_r+0x33c>)
   203c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   203cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   203d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   203d4:	f7fc fc62 	bl	1cc9c <__aeabi_dcmplt>
   203d8:	2800      	cmp	r0, #0
   203da:	d04e      	beq.n	2047a <_dtoa_r+0x22a>
   203dc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   203e0:	2300      	movs	r3, #0
   203e2:	9311      	str	r3, [sp, #68]	; 0x44
   203e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   203e6:	1b9e      	subs	r6, r3, r6
   203e8:	1e73      	subs	r3, r6, #1
   203ea:	9307      	str	r3, [sp, #28]
   203ec:	bf49      	itett	mi
   203ee:	f1c6 0301 	rsbmi	r3, r6, #1
   203f2:	2300      	movpl	r3, #0
   203f4:	9306      	strmi	r3, [sp, #24]
   203f6:	2300      	movmi	r3, #0
   203f8:	bf54      	ite	pl
   203fa:	9306      	strpl	r3, [sp, #24]
   203fc:	9307      	strmi	r3, [sp, #28]
   203fe:	f1ba 0f00 	cmp.w	sl, #0
   20402:	db3c      	blt.n	2047e <_dtoa_r+0x22e>
   20404:	9b07      	ldr	r3, [sp, #28]
   20406:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
   2040a:	4453      	add	r3, sl
   2040c:	9307      	str	r3, [sp, #28]
   2040e:	2300      	movs	r3, #0
   20410:	9309      	str	r3, [sp, #36]	; 0x24
   20412:	9b08      	ldr	r3, [sp, #32]
   20414:	2b09      	cmp	r3, #9
   20416:	f200 808d 	bhi.w	20534 <_dtoa_r+0x2e4>
   2041a:	2b05      	cmp	r3, #5
   2041c:	bfc5      	ittet	gt
   2041e:	3b04      	subgt	r3, #4
   20420:	2400      	movgt	r4, #0
   20422:	2401      	movle	r4, #1
   20424:	9308      	strgt	r3, [sp, #32]
   20426:	9b08      	ldr	r3, [sp, #32]
   20428:	3b02      	subs	r3, #2
   2042a:	2b03      	cmp	r3, #3
   2042c:	f200 808d 	bhi.w	2054a <_dtoa_r+0x2fa>
   20430:	e8df f003 	tbb	[pc, r3]
   20434:	7e3a3c2f 	.word	0x7e3a3c2f
   20438:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
   2043c:	441e      	add	r6, r3
   2043e:	f206 4032 	addw	r0, r6, #1074	; 0x432
   20442:	2820      	cmp	r0, #32
   20444:	dd11      	ble.n	2046a <_dtoa_r+0x21a>
   20446:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   2044a:	9b00      	ldr	r3, [sp, #0]
   2044c:	4084      	lsls	r4, r0
   2044e:	f206 4012 	addw	r0, r6, #1042	; 0x412
   20452:	fa23 f000 	lsr.w	r0, r3, r0
   20456:	4320      	orrs	r0, r4
   20458:	f7fc f934 	bl	1c6c4 <__aeabi_ui2d>
   2045c:	2301      	movs	r3, #1
   2045e:	4604      	mov	r4, r0
   20460:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
   20464:	3e01      	subs	r6, #1
   20466:	9315      	str	r3, [sp, #84]	; 0x54
   20468:	e774      	b.n	20354 <_dtoa_r+0x104>
   2046a:	f1c0 0020 	rsb	r0, r0, #32
   2046e:	9b00      	ldr	r3, [sp, #0]
   20470:	fa03 f000 	lsl.w	r0, r3, r0
   20474:	e7f0      	b.n	20458 <_dtoa_r+0x208>
   20476:	2301      	movs	r3, #1
   20478:	e7b3      	b.n	203e2 <_dtoa_r+0x192>
   2047a:	9011      	str	r0, [sp, #68]	; 0x44
   2047c:	e7b2      	b.n	203e4 <_dtoa_r+0x194>
   2047e:	9b06      	ldr	r3, [sp, #24]
   20480:	eba3 030a 	sub.w	r3, r3, sl
   20484:	9306      	str	r3, [sp, #24]
   20486:	f1ca 0300 	rsb	r3, sl, #0
   2048a:	9309      	str	r3, [sp, #36]	; 0x24
   2048c:	2300      	movs	r3, #0
   2048e:	9310      	str	r3, [sp, #64]	; 0x40
   20490:	e7bf      	b.n	20412 <_dtoa_r+0x1c2>
   20492:	2300      	movs	r3, #0
   20494:	930c      	str	r3, [sp, #48]	; 0x30
   20496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20498:	2b00      	cmp	r3, #0
   2049a:	dc59      	bgt.n	20550 <_dtoa_r+0x300>
   2049c:	2301      	movs	r3, #1
   2049e:	4699      	mov	r9, r3
   204a0:	461a      	mov	r2, r3
   204a2:	9304      	str	r3, [sp, #16]
   204a4:	920d      	str	r2, [sp, #52]	; 0x34
   204a6:	e00c      	b.n	204c2 <_dtoa_r+0x272>
   204a8:	2301      	movs	r3, #1
   204aa:	e7f3      	b.n	20494 <_dtoa_r+0x244>
   204ac:	2300      	movs	r3, #0
   204ae:	930c      	str	r3, [sp, #48]	; 0x30
   204b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   204b2:	4453      	add	r3, sl
   204b4:	f103 0901 	add.w	r9, r3, #1
   204b8:	9304      	str	r3, [sp, #16]
   204ba:	464b      	mov	r3, r9
   204bc:	2b01      	cmp	r3, #1
   204be:	bfb8      	it	lt
   204c0:	2301      	movlt	r3, #1
   204c2:	2200      	movs	r2, #0
   204c4:	f8db 5024 	ldr.w	r5, [fp, #36]	; 0x24
   204c8:	606a      	str	r2, [r5, #4]
   204ca:	2204      	movs	r2, #4
   204cc:	f102 0014 	add.w	r0, r2, #20
   204d0:	6869      	ldr	r1, [r5, #4]
   204d2:	4298      	cmp	r0, r3
   204d4:	d940      	bls.n	20558 <_dtoa_r+0x308>
   204d6:	4658      	mov	r0, fp
   204d8:	f028 fb04 	bl	48ae4 <_Balloc>
   204dc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
   204e0:	6028      	str	r0, [r5, #0]
   204e2:	f1b9 0f0e 	cmp.w	r9, #14
   204e6:	681b      	ldr	r3, [r3, #0]
   204e8:	9303      	str	r3, [sp, #12]
   204ea:	f200 80d4 	bhi.w	20696 <_dtoa_r+0x446>
   204ee:	2c00      	cmp	r4, #0
   204f0:	f000 80d1 	beq.w	20696 <_dtoa_r+0x446>
   204f4:	f1ba 0f00 	cmp.w	sl, #0
   204f8:	dd66      	ble.n	205c8 <_dtoa_r+0x378>
   204fa:	4a24      	ldr	r2, [pc, #144]	; (2058c <_dtoa_r+0x33c>)
   204fc:	f00a 030f 	and.w	r3, sl, #15
   20500:	ea4f 142a 	mov.w	r4, sl, asr #4
   20504:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   20508:	06e2      	lsls	r2, r4, #27
   2050a:	ed93 7b00 	vldr	d7, [r3]
   2050e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   20512:	d557      	bpl.n	205c4 <_dtoa_r+0x374>
   20514:	4b1e      	ldr	r3, [pc, #120]	; (20590 <_dtoa_r+0x340>)
   20516:	f004 040f 	and.w	r4, r4, #15
   2051a:	2603      	movs	r6, #3
   2051c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   20520:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   20524:	f7fc fa72 	bl	1ca0c <__aeabi_ddiv>
   20528:	e9cd 0100 	strd	r0, r1, [sp]
   2052c:	4d18      	ldr	r5, [pc, #96]	; (20590 <_dtoa_r+0x340>)
   2052e:	e03e      	b.n	205ae <_dtoa_r+0x35e>
   20530:	2301      	movs	r3, #1
   20532:	e7bc      	b.n	204ae <_dtoa_r+0x25e>
   20534:	2401      	movs	r4, #1
   20536:	2300      	movs	r3, #0
   20538:	940c      	str	r4, [sp, #48]	; 0x30
   2053a:	9308      	str	r3, [sp, #32]
   2053c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20540:	2200      	movs	r2, #0
   20542:	9304      	str	r3, [sp, #16]
   20544:	4699      	mov	r9, r3
   20546:	2312      	movs	r3, #18
   20548:	e7ac      	b.n	204a4 <_dtoa_r+0x254>
   2054a:	2301      	movs	r3, #1
   2054c:	930c      	str	r3, [sp, #48]	; 0x30
   2054e:	e7f5      	b.n	2053c <_dtoa_r+0x2ec>
   20550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20552:	9304      	str	r3, [sp, #16]
   20554:	4699      	mov	r9, r3
   20556:	e7b4      	b.n	204c2 <_dtoa_r+0x272>
   20558:	3101      	adds	r1, #1
   2055a:	0052      	lsls	r2, r2, #1
   2055c:	6069      	str	r1, [r5, #4]
   2055e:	e7b5      	b.n	204cc <_dtoa_r+0x27c>
   20560:	636f4361 	.word	0x636f4361
   20564:	3fd287a7 	.word	0x3fd287a7
   20568:	8b60c8b3 	.word	0x8b60c8b3
   2056c:	3fc68a28 	.word	0x3fc68a28
   20570:	509f79fb 	.word	0x509f79fb
   20574:	3fd34413 	.word	0x3fd34413
   20578:	7ff00000 	.word	0x7ff00000
   2057c:	00052c06 	.word	0x00052c06
   20580:	00052bfd 	.word	0x00052bfd
   20584:	00052673 	.word	0x00052673
   20588:	3ff80000 	.word	0x3ff80000
   2058c:	00049a18 	.word	0x00049a18
   20590:	000499f0 	.word	0x000499f0
   20594:	07e3      	lsls	r3, r4, #31
   20596:	d508      	bpl.n	205aa <_dtoa_r+0x35a>
   20598:	3601      	adds	r6, #1
   2059a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   2059e:	e9d5 2300 	ldrd	r2, r3, [r5]
   205a2:	f7fc f909 	bl	1c7b8 <__aeabi_dmul>
   205a6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   205aa:	1064      	asrs	r4, r4, #1
   205ac:	3508      	adds	r5, #8
   205ae:	2c00      	cmp	r4, #0
   205b0:	d1f0      	bne.n	20594 <_dtoa_r+0x344>
   205b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   205b6:	e9dd 0100 	ldrd	r0, r1, [sp]
   205ba:	f7fc fa27 	bl	1ca0c <__aeabi_ddiv>
   205be:	e9cd 0100 	strd	r0, r1, [sp]
   205c2:	e01a      	b.n	205fa <_dtoa_r+0x3aa>
   205c4:	2602      	movs	r6, #2
   205c6:	e7b1      	b.n	2052c <_dtoa_r+0x2dc>
   205c8:	f000 809f 	beq.w	2070a <_dtoa_r+0x4ba>
   205cc:	f1ca 0400 	rsb	r4, sl, #0
   205d0:	4b9e      	ldr	r3, [pc, #632]	; (2084c <_dtoa_r+0x5fc>)
   205d2:	4d9f      	ldr	r5, [pc, #636]	; (20850 <_dtoa_r+0x600>)
   205d4:	2602      	movs	r6, #2
   205d6:	f004 020f 	and.w	r2, r4, #15
   205da:	1124      	asrs	r4, r4, #4
   205dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   205e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   205e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   205e8:	f7fc f8e6 	bl	1c7b8 <__aeabi_dmul>
   205ec:	2300      	movs	r3, #0
   205ee:	e9cd 0100 	strd	r0, r1, [sp]
   205f2:	2c00      	cmp	r4, #0
   205f4:	d17e      	bne.n	206f4 <_dtoa_r+0x4a4>
   205f6:	2b00      	cmp	r3, #0
   205f8:	d1e1      	bne.n	205be <_dtoa_r+0x36e>
   205fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   205fc:	2b00      	cmp	r3, #0
   205fe:	f000 8086 	beq.w	2070e <_dtoa_r+0x4be>
   20602:	2200      	movs	r2, #0
   20604:	4b93      	ldr	r3, [pc, #588]	; (20854 <_dtoa_r+0x604>)
   20606:	e9dd 4500 	ldrd	r4, r5, [sp]
   2060a:	4620      	mov	r0, r4
   2060c:	4629      	mov	r1, r5
   2060e:	f7fc fb45 	bl	1cc9c <__aeabi_dcmplt>
   20612:	2800      	cmp	r0, #0
   20614:	d07b      	beq.n	2070e <_dtoa_r+0x4be>
   20616:	f1b9 0f00 	cmp.w	r9, #0
   2061a:	d078      	beq.n	2070e <_dtoa_r+0x4be>
   2061c:	9b04      	ldr	r3, [sp, #16]
   2061e:	2b00      	cmp	r3, #0
   20620:	dd35      	ble.n	2068e <_dtoa_r+0x43e>
   20622:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   20626:	4620      	mov	r0, r4
   20628:	2200      	movs	r2, #0
   2062a:	4629      	mov	r1, r5
   2062c:	930a      	str	r3, [sp, #40]	; 0x28
   2062e:	3601      	adds	r6, #1
   20630:	4b89      	ldr	r3, [pc, #548]	; (20858 <_dtoa_r+0x608>)
   20632:	f7fc f8c1 	bl	1c7b8 <__aeabi_dmul>
   20636:	9c04      	ldr	r4, [sp, #16]
   20638:	e9cd 0100 	strd	r0, r1, [sp]
   2063c:	4630      	mov	r0, r6
   2063e:	f7fc f851 	bl	1c6e4 <__aeabi_i2d>
   20642:	e9dd 2300 	ldrd	r2, r3, [sp]
   20646:	f7fc f8b7 	bl	1c7b8 <__aeabi_dmul>
   2064a:	2200      	movs	r2, #0
   2064c:	4b83      	ldr	r3, [pc, #524]	; (2085c <_dtoa_r+0x60c>)
   2064e:	f7fb fefd 	bl	1c44c <__adddf3>
   20652:	4606      	mov	r6, r0
   20654:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   20658:	2c00      	cmp	r4, #0
   2065a:	d15c      	bne.n	20716 <_dtoa_r+0x4c6>
   2065c:	2200      	movs	r2, #0
   2065e:	4b80      	ldr	r3, [pc, #512]	; (20860 <_dtoa_r+0x610>)
   20660:	e9dd 0100 	ldrd	r0, r1, [sp]
   20664:	f7fb fef0 	bl	1c448 <__aeabi_dsub>
   20668:	4632      	mov	r2, r6
   2066a:	463b      	mov	r3, r7
   2066c:	e9cd 0100 	strd	r0, r1, [sp]
   20670:	f7fc fb32 	bl	1ccd8 <__aeabi_dcmpgt>
   20674:	2800      	cmp	r0, #0
   20676:	f040 8289 	bne.w	20b8c <_dtoa_r+0x93c>
   2067a:	4632      	mov	r2, r6
   2067c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   20680:	e9dd 0100 	ldrd	r0, r1, [sp]
   20684:	f7fc fb0a 	bl	1cc9c <__aeabi_dcmplt>
   20688:	2800      	cmp	r0, #0
   2068a:	f040 827d 	bne.w	20b88 <_dtoa_r+0x938>
   2068e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
   20692:	e9cd 3400 	strd	r3, r4, [sp]
   20696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20698:	2b00      	cmp	r3, #0
   2069a:	f2c0 814c 	blt.w	20936 <_dtoa_r+0x6e6>
   2069e:	f1ba 0f0e 	cmp.w	sl, #14
   206a2:	f300 8148 	bgt.w	20936 <_dtoa_r+0x6e6>
   206a6:	4b69      	ldr	r3, [pc, #420]	; (2084c <_dtoa_r+0x5fc>)
   206a8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   206ac:	ed93 7b00 	vldr	d7, [r3]
   206b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   206b2:	2b00      	cmp	r3, #0
   206b4:	ed8d 7b04 	vstr	d7, [sp, #16]
   206b8:	f280 80d6 	bge.w	20868 <_dtoa_r+0x618>
   206bc:	f1b9 0f00 	cmp.w	r9, #0
   206c0:	f300 80d2 	bgt.w	20868 <_dtoa_r+0x618>
   206c4:	f040 825f 	bne.w	20b86 <_dtoa_r+0x936>
   206c8:	2200      	movs	r2, #0
   206ca:	4b65      	ldr	r3, [pc, #404]	; (20860 <_dtoa_r+0x610>)
   206cc:	464c      	mov	r4, r9
   206ce:	464e      	mov	r6, r9
   206d0:	ec51 0b17 	vmov	r0, r1, d7
   206d4:	f7fc f870 	bl	1c7b8 <__aeabi_dmul>
   206d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   206dc:	f7fc faf2 	bl	1ccc4 <__aeabi_dcmpge>
   206e0:	2800      	cmp	r0, #0
   206e2:	f040 8238 	bne.w	20b56 <_dtoa_r+0x906>
   206e6:	9d03      	ldr	r5, [sp, #12]
   206e8:	2331      	movs	r3, #49	; 0x31
   206ea:	f10a 0a01 	add.w	sl, sl, #1
   206ee:	f805 3b01 	strb.w	r3, [r5], #1
   206f2:	e234      	b.n	20b5e <_dtoa_r+0x90e>
   206f4:	07e7      	lsls	r7, r4, #31
   206f6:	d505      	bpl.n	20704 <_dtoa_r+0x4b4>
   206f8:	3601      	adds	r6, #1
   206fa:	e9d5 2300 	ldrd	r2, r3, [r5]
   206fe:	f7fc f85b 	bl	1c7b8 <__aeabi_dmul>
   20702:	2301      	movs	r3, #1
   20704:	1064      	asrs	r4, r4, #1
   20706:	3508      	adds	r5, #8
   20708:	e773      	b.n	205f2 <_dtoa_r+0x3a2>
   2070a:	2602      	movs	r6, #2
   2070c:	e775      	b.n	205fa <_dtoa_r+0x3aa>
   2070e:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   20712:	464c      	mov	r4, r9
   20714:	e792      	b.n	2063c <_dtoa_r+0x3ec>
   20716:	4b4d      	ldr	r3, [pc, #308]	; (2084c <_dtoa_r+0x5fc>)
   20718:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2071c:	e953 0102 	ldrd	r0, r1, [r3, #-8]
   20720:	9b03      	ldr	r3, [sp, #12]
   20722:	441c      	add	r4, r3
   20724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20726:	2b00      	cmp	r3, #0
   20728:	d046      	beq.n	207b8 <_dtoa_r+0x568>
   2072a:	4602      	mov	r2, r0
   2072c:	460b      	mov	r3, r1
   2072e:	2000      	movs	r0, #0
   20730:	494c      	ldr	r1, [pc, #304]	; (20864 <_dtoa_r+0x614>)
   20732:	f7fc f96b 	bl	1ca0c <__aeabi_ddiv>
   20736:	4632      	mov	r2, r6
   20738:	463b      	mov	r3, r7
   2073a:	f7fb fe85 	bl	1c448 <__aeabi_dsub>
   2073e:	9d03      	ldr	r5, [sp, #12]
   20740:	4606      	mov	r6, r0
   20742:	460f      	mov	r7, r1
   20744:	e9dd 0100 	ldrd	r0, r1, [sp]
   20748:	f7fc fad0 	bl	1ccec <__aeabi_d2iz>
   2074c:	9012      	str	r0, [sp, #72]	; 0x48
   2074e:	f7fb ffc9 	bl	1c6e4 <__aeabi_i2d>
   20752:	4602      	mov	r2, r0
   20754:	460b      	mov	r3, r1
   20756:	e9dd 0100 	ldrd	r0, r1, [sp]
   2075a:	f7fb fe75 	bl	1c448 <__aeabi_dsub>
   2075e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20760:	4632      	mov	r2, r6
   20762:	3330      	adds	r3, #48	; 0x30
   20764:	f805 3b01 	strb.w	r3, [r5], #1
   20768:	463b      	mov	r3, r7
   2076a:	e9cd 0100 	strd	r0, r1, [sp]
   2076e:	f7fc fa95 	bl	1cc9c <__aeabi_dcmplt>
   20772:	2800      	cmp	r0, #0
   20774:	d15f      	bne.n	20836 <_dtoa_r+0x5e6>
   20776:	2000      	movs	r0, #0
   20778:	4936      	ldr	r1, [pc, #216]	; (20854 <_dtoa_r+0x604>)
   2077a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2077e:	f7fb fe63 	bl	1c448 <__aeabi_dsub>
   20782:	4632      	mov	r2, r6
   20784:	463b      	mov	r3, r7
   20786:	f7fc fa89 	bl	1cc9c <__aeabi_dcmplt>
   2078a:	2800      	cmp	r0, #0
   2078c:	f040 80b2 	bne.w	208f4 <_dtoa_r+0x6a4>
   20790:	42a5      	cmp	r5, r4
   20792:	f43f af7c 	beq.w	2068e <_dtoa_r+0x43e>
   20796:	2200      	movs	r2, #0
   20798:	4b2f      	ldr	r3, [pc, #188]	; (20858 <_dtoa_r+0x608>)
   2079a:	4630      	mov	r0, r6
   2079c:	4639      	mov	r1, r7
   2079e:	f7fc f80b 	bl	1c7b8 <__aeabi_dmul>
   207a2:	2200      	movs	r2, #0
   207a4:	4606      	mov	r6, r0
   207a6:	460f      	mov	r7, r1
   207a8:	4b2b      	ldr	r3, [pc, #172]	; (20858 <_dtoa_r+0x608>)
   207aa:	e9dd 0100 	ldrd	r0, r1, [sp]
   207ae:	f7fc f803 	bl	1c7b8 <__aeabi_dmul>
   207b2:	e9cd 0100 	strd	r0, r1, [sp]
   207b6:	e7c5      	b.n	20744 <_dtoa_r+0x4f4>
   207b8:	4632      	mov	r2, r6
   207ba:	463b      	mov	r3, r7
   207bc:	f7fb fffc 	bl	1c7b8 <__aeabi_dmul>
   207c0:	4625      	mov	r5, r4
   207c2:	9e03      	ldr	r6, [sp, #12]
   207c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   207c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   207cc:	f7fc fa8e 	bl	1ccec <__aeabi_d2iz>
   207d0:	4607      	mov	r7, r0
   207d2:	f7fb ff87 	bl	1c6e4 <__aeabi_i2d>
   207d6:	4602      	mov	r2, r0
   207d8:	3730      	adds	r7, #48	; 0x30
   207da:	460b      	mov	r3, r1
   207dc:	e9dd 0100 	ldrd	r0, r1, [sp]
   207e0:	f7fb fe32 	bl	1c448 <__aeabi_dsub>
   207e4:	f806 7b01 	strb.w	r7, [r6], #1
   207e8:	42a6      	cmp	r6, r4
   207ea:	f04f 0200 	mov.w	r2, #0
   207ee:	e9cd 0100 	strd	r0, r1, [sp]
   207f2:	d125      	bne.n	20840 <_dtoa_r+0x5f0>
   207f4:	4b1b      	ldr	r3, [pc, #108]	; (20864 <_dtoa_r+0x614>)
   207f6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   207fa:	f7fb fe27 	bl	1c44c <__adddf3>
   207fe:	4602      	mov	r2, r0
   20800:	460b      	mov	r3, r1
   20802:	e9dd 0100 	ldrd	r0, r1, [sp]
   20806:	f7fc fa67 	bl	1ccd8 <__aeabi_dcmpgt>
   2080a:	2800      	cmp	r0, #0
   2080c:	d172      	bne.n	208f4 <_dtoa_r+0x6a4>
   2080e:	2000      	movs	r0, #0
   20810:	4914      	ldr	r1, [pc, #80]	; (20864 <_dtoa_r+0x614>)
   20812:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   20816:	f7fb fe17 	bl	1c448 <__aeabi_dsub>
   2081a:	4602      	mov	r2, r0
   2081c:	460b      	mov	r3, r1
   2081e:	e9dd 0100 	ldrd	r0, r1, [sp]
   20822:	f7fc fa3b 	bl	1cc9c <__aeabi_dcmplt>
   20826:	2800      	cmp	r0, #0
   20828:	f43f af31 	beq.w	2068e <_dtoa_r+0x43e>
   2082c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20830:	1e6a      	subs	r2, r5, #1
   20832:	2b30      	cmp	r3, #48	; 0x30
   20834:	d002      	beq.n	2083c <_dtoa_r+0x5ec>
   20836:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   2083a:	e049      	b.n	208d0 <_dtoa_r+0x680>
   2083c:	4615      	mov	r5, r2
   2083e:	e7f5      	b.n	2082c <_dtoa_r+0x5dc>
   20840:	4b05      	ldr	r3, [pc, #20]	; (20858 <_dtoa_r+0x608>)
   20842:	f7fb ffb9 	bl	1c7b8 <__aeabi_dmul>
   20846:	e9cd 0100 	strd	r0, r1, [sp]
   2084a:	e7bd      	b.n	207c8 <_dtoa_r+0x578>
   2084c:	00049a18 	.word	0x00049a18
   20850:	000499f0 	.word	0x000499f0
   20854:	3ff00000 	.word	0x3ff00000
   20858:	40240000 	.word	0x40240000
   2085c:	401c0000 	.word	0x401c0000
   20860:	40140000 	.word	0x40140000
   20864:	3fe00000 	.word	0x3fe00000
   20868:	e9dd 6700 	ldrd	r6, r7, [sp]
   2086c:	9d03      	ldr	r5, [sp, #12]
   2086e:	4630      	mov	r0, r6
   20870:	4639      	mov	r1, r7
   20872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20876:	f7fc f8c9 	bl	1ca0c <__aeabi_ddiv>
   2087a:	f7fc fa37 	bl	1ccec <__aeabi_d2iz>
   2087e:	4604      	mov	r4, r0
   20880:	f7fb ff30 	bl	1c6e4 <__aeabi_i2d>
   20884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   20888:	f7fb ff96 	bl	1c7b8 <__aeabi_dmul>
   2088c:	4602      	mov	r2, r0
   2088e:	4630      	mov	r0, r6
   20890:	f104 0630 	add.w	r6, r4, #48	; 0x30
   20894:	460b      	mov	r3, r1
   20896:	4639      	mov	r1, r7
   20898:	f7fb fdd6 	bl	1c448 <__aeabi_dsub>
   2089c:	f805 6b01 	strb.w	r6, [r5], #1
   208a0:	9e03      	ldr	r6, [sp, #12]
   208a2:	4602      	mov	r2, r0
   208a4:	460b      	mov	r3, r1
   208a6:	1bae      	subs	r6, r5, r6
   208a8:	45b1      	cmp	r9, r6
   208aa:	d137      	bne.n	2091c <_dtoa_r+0x6cc>
   208ac:	f7fb fdce 	bl	1c44c <__adddf3>
   208b0:	4606      	mov	r6, r0
   208b2:	460f      	mov	r7, r1
   208b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   208b8:	f7fc fa0e 	bl	1ccd8 <__aeabi_dcmpgt>
   208bc:	b9c0      	cbnz	r0, 208f0 <_dtoa_r+0x6a0>
   208be:	4630      	mov	r0, r6
   208c0:	4639      	mov	r1, r7
   208c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   208c6:	f7fc f9df 	bl	1cc88 <__aeabi_dcmpeq>
   208ca:	b108      	cbz	r0, 208d0 <_dtoa_r+0x680>
   208cc:	07e1      	lsls	r1, r4, #31
   208ce:	d40f      	bmi.n	208f0 <_dtoa_r+0x6a0>
   208d0:	4641      	mov	r1, r8
   208d2:	4658      	mov	r0, fp
   208d4:	f028 f93a 	bl	48b4c <_Bfree>
   208d8:	2300      	movs	r3, #0
   208da:	9a14      	ldr	r2, [sp, #80]	; 0x50
   208dc:	702b      	strb	r3, [r5, #0]
   208de:	f10a 0301 	add.w	r3, sl, #1
   208e2:	6013      	str	r3, [r2, #0]
   208e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   208e6:	2b00      	cmp	r3, #0
   208e8:	f43f acfb 	beq.w	202e2 <_dtoa_r+0x92>
   208ec:	601d      	str	r5, [r3, #0]
   208ee:	e4f8      	b.n	202e2 <_dtoa_r+0x92>
   208f0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   208f4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   208f8:	1e6b      	subs	r3, r5, #1
   208fa:	2a39      	cmp	r2, #57	; 0x39
   208fc:	d108      	bne.n	20910 <_dtoa_r+0x6c0>
   208fe:	9a03      	ldr	r2, [sp, #12]
   20900:	429a      	cmp	r2, r3
   20902:	d109      	bne.n	20918 <_dtoa_r+0x6c8>
   20904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20906:	9903      	ldr	r1, [sp, #12]
   20908:	3201      	adds	r2, #1
   2090a:	920a      	str	r2, [sp, #40]	; 0x28
   2090c:	2230      	movs	r2, #48	; 0x30
   2090e:	700a      	strb	r2, [r1, #0]
   20910:	781a      	ldrb	r2, [r3, #0]
   20912:	3201      	adds	r2, #1
   20914:	701a      	strb	r2, [r3, #0]
   20916:	e78e      	b.n	20836 <_dtoa_r+0x5e6>
   20918:	461d      	mov	r5, r3
   2091a:	e7eb      	b.n	208f4 <_dtoa_r+0x6a4>
   2091c:	2200      	movs	r2, #0
   2091e:	4b9d      	ldr	r3, [pc, #628]	; (20b94 <_dtoa_r+0x944>)
   20920:	f7fb ff4a 	bl	1c7b8 <__aeabi_dmul>
   20924:	2200      	movs	r2, #0
   20926:	2300      	movs	r3, #0
   20928:	4606      	mov	r6, r0
   2092a:	460f      	mov	r7, r1
   2092c:	f7fc f9ac 	bl	1cc88 <__aeabi_dcmpeq>
   20930:	2800      	cmp	r0, #0
   20932:	d09c      	beq.n	2086e <_dtoa_r+0x61e>
   20934:	e7cc      	b.n	208d0 <_dtoa_r+0x680>
   20936:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20938:	2a00      	cmp	r2, #0
   2093a:	f000 80cb 	beq.w	20ad4 <_dtoa_r+0x884>
   2093e:	9a08      	ldr	r2, [sp, #32]
   20940:	2a01      	cmp	r2, #1
   20942:	f300 80ae 	bgt.w	20aa2 <_dtoa_r+0x852>
   20946:	9a15      	ldr	r2, [sp, #84]	; 0x54
   20948:	2a00      	cmp	r2, #0
   2094a:	f000 80a6 	beq.w	20a9a <_dtoa_r+0x84a>
   2094e:	f203 4333 	addw	r3, r3, #1075	; 0x433
   20952:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20954:	9d06      	ldr	r5, [sp, #24]
   20956:	9a06      	ldr	r2, [sp, #24]
   20958:	2101      	movs	r1, #1
   2095a:	4658      	mov	r0, fp
   2095c:	441a      	add	r2, r3
   2095e:	9206      	str	r2, [sp, #24]
   20960:	9a07      	ldr	r2, [sp, #28]
   20962:	441a      	add	r2, r3
   20964:	9207      	str	r2, [sp, #28]
   20966:	f028 f9d3 	bl	48d10 <__i2b>
   2096a:	4606      	mov	r6, r0
   2096c:	2d00      	cmp	r5, #0
   2096e:	dd0c      	ble.n	2098a <_dtoa_r+0x73a>
   20970:	9b07      	ldr	r3, [sp, #28]
   20972:	2b00      	cmp	r3, #0
   20974:	dd09      	ble.n	2098a <_dtoa_r+0x73a>
   20976:	42ab      	cmp	r3, r5
   20978:	9a06      	ldr	r2, [sp, #24]
   2097a:	bfa8      	it	ge
   2097c:	462b      	movge	r3, r5
   2097e:	1ad2      	subs	r2, r2, r3
   20980:	1aed      	subs	r5, r5, r3
   20982:	9206      	str	r2, [sp, #24]
   20984:	9a07      	ldr	r2, [sp, #28]
   20986:	1ad3      	subs	r3, r2, r3
   20988:	9307      	str	r3, [sp, #28]
   2098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2098c:	b1f3      	cbz	r3, 209cc <_dtoa_r+0x77c>
   2098e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20990:	2b00      	cmp	r3, #0
   20992:	f000 80a3 	beq.w	20adc <_dtoa_r+0x88c>
   20996:	2c00      	cmp	r4, #0
   20998:	dd10      	ble.n	209bc <_dtoa_r+0x76c>
   2099a:	4631      	mov	r1, r6
   2099c:	4622      	mov	r2, r4
   2099e:	4658      	mov	r0, fp
   209a0:	f022 fe26 	bl	435f0 <__pow5mult>
   209a4:	4642      	mov	r2, r8
   209a6:	4601      	mov	r1, r0
   209a8:	4606      	mov	r6, r0
   209aa:	4658      	mov	r0, fp
   209ac:	f028 f9b9 	bl	48d22 <__multiply>
   209b0:	4607      	mov	r7, r0
   209b2:	4641      	mov	r1, r8
   209b4:	4658      	mov	r0, fp
   209b6:	46b8      	mov	r8, r7
   209b8:	f028 f8c8 	bl	48b4c <_Bfree>
   209bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   209be:	1b1a      	subs	r2, r3, r4
   209c0:	d004      	beq.n	209cc <_dtoa_r+0x77c>
   209c2:	4641      	mov	r1, r8
   209c4:	4658      	mov	r0, fp
   209c6:	f022 fe13 	bl	435f0 <__pow5mult>
   209ca:	4680      	mov	r8, r0
   209cc:	2101      	movs	r1, #1
   209ce:	4658      	mov	r0, fp
   209d0:	f028 f99e 	bl	48d10 <__i2b>
   209d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   209d6:	4604      	mov	r4, r0
   209d8:	2b00      	cmp	r3, #0
   209da:	f340 8081 	ble.w	20ae0 <_dtoa_r+0x890>
   209de:	461a      	mov	r2, r3
   209e0:	4601      	mov	r1, r0
   209e2:	4658      	mov	r0, fp
   209e4:	f022 fe04 	bl	435f0 <__pow5mult>
   209e8:	9b08      	ldr	r3, [sp, #32]
   209ea:	4604      	mov	r4, r0
   209ec:	2b01      	cmp	r3, #1
   209ee:	dd7a      	ble.n	20ae6 <_dtoa_r+0x896>
   209f0:	2700      	movs	r7, #0
   209f2:	6923      	ldr	r3, [r4, #16]
   209f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   209f8:	6918      	ldr	r0, [r3, #16]
   209fa:	f028 f939 	bl	48c70 <__hi0bits>
   209fe:	f1c0 0020 	rsb	r0, r0, #32
   20a02:	9b07      	ldr	r3, [sp, #28]
   20a04:	4418      	add	r0, r3
   20a06:	f010 001f 	ands.w	r0, r0, #31
   20a0a:	f000 808b 	beq.w	20b24 <_dtoa_r+0x8d4>
   20a0e:	f1c0 0320 	rsb	r3, r0, #32
   20a12:	2b04      	cmp	r3, #4
   20a14:	f340 8084 	ble.w	20b20 <_dtoa_r+0x8d0>
   20a18:	f1c0 001c 	rsb	r0, r0, #28
   20a1c:	9b06      	ldr	r3, [sp, #24]
   20a1e:	4405      	add	r5, r0
   20a20:	4403      	add	r3, r0
   20a22:	9306      	str	r3, [sp, #24]
   20a24:	9b07      	ldr	r3, [sp, #28]
   20a26:	4403      	add	r3, r0
   20a28:	9307      	str	r3, [sp, #28]
   20a2a:	9b06      	ldr	r3, [sp, #24]
   20a2c:	2b00      	cmp	r3, #0
   20a2e:	dd05      	ble.n	20a3c <_dtoa_r+0x7ec>
   20a30:	4641      	mov	r1, r8
   20a32:	461a      	mov	r2, r3
   20a34:	4658      	mov	r0, fp
   20a36:	f028 fa03 	bl	48e40 <__lshift>
   20a3a:	4680      	mov	r8, r0
   20a3c:	9b07      	ldr	r3, [sp, #28]
   20a3e:	2b00      	cmp	r3, #0
   20a40:	dd05      	ble.n	20a4e <_dtoa_r+0x7fe>
   20a42:	4621      	mov	r1, r4
   20a44:	461a      	mov	r2, r3
   20a46:	4658      	mov	r0, fp
   20a48:	f028 f9fa 	bl	48e40 <__lshift>
   20a4c:	4604      	mov	r4, r0
   20a4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   20a50:	2b00      	cmp	r3, #0
   20a52:	d069      	beq.n	20b28 <_dtoa_r+0x8d8>
   20a54:	4621      	mov	r1, r4
   20a56:	4640      	mov	r0, r8
   20a58:	f028 fa45 	bl	48ee6 <__mcmp>
   20a5c:	2800      	cmp	r0, #0
   20a5e:	da63      	bge.n	20b28 <_dtoa_r+0x8d8>
   20a60:	2300      	movs	r3, #0
   20a62:	4641      	mov	r1, r8
   20a64:	220a      	movs	r2, #10
   20a66:	4658      	mov	r0, fp
   20a68:	f028 f887 	bl	48b7a <__multadd>
   20a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20a6e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   20a72:	4680      	mov	r8, r0
   20a74:	2b00      	cmp	r3, #0
   20a76:	f000 8179 	beq.w	20d6c <_dtoa_r+0xb1c>
   20a7a:	2300      	movs	r3, #0
   20a7c:	4631      	mov	r1, r6
   20a7e:	220a      	movs	r2, #10
   20a80:	4658      	mov	r0, fp
   20a82:	f028 f87a 	bl	48b7a <__multadd>
   20a86:	9b04      	ldr	r3, [sp, #16]
   20a88:	4606      	mov	r6, r0
   20a8a:	2b00      	cmp	r3, #0
   20a8c:	f300 808a 	bgt.w	20ba4 <_dtoa_r+0x954>
   20a90:	9b08      	ldr	r3, [sp, #32]
   20a92:	2b02      	cmp	r3, #2
   20a94:	f340 8086 	ble.w	20ba4 <_dtoa_r+0x954>
   20a98:	e04e      	b.n	20b38 <_dtoa_r+0x8e8>
   20a9a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   20a9c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   20aa0:	e757      	b.n	20952 <_dtoa_r+0x702>
   20aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20aa4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
   20aa8:	42a3      	cmp	r3, r4
   20aaa:	bfb7      	itett	lt
   20aac:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
   20aae:	1b1c      	subge	r4, r3, r4
   20ab0:	9409      	strlt	r4, [sp, #36]	; 0x24
   20ab2:	1ae2      	sublt	r2, r4, r3
   20ab4:	bfbf      	itttt	lt
   20ab6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   20ab8:	2400      	movlt	r4, #0
   20aba:	189b      	addlt	r3, r3, r2
   20abc:	9310      	strlt	r3, [sp, #64]	; 0x40
   20abe:	f1b9 0f00 	cmp.w	r9, #0
   20ac2:	bfb3      	iteet	lt
   20ac4:	9b06      	ldrlt	r3, [sp, #24]
   20ac6:	464b      	movge	r3, r9
   20ac8:	9d06      	ldrge	r5, [sp, #24]
   20aca:	eba3 0509 	sublt.w	r5, r3, r9
   20ace:	bfb8      	it	lt
   20ad0:	2300      	movlt	r3, #0
   20ad2:	e740      	b.n	20956 <_dtoa_r+0x706>
   20ad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   20ad6:	9d06      	ldr	r5, [sp, #24]
   20ad8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   20ada:	e747      	b.n	2096c <_dtoa_r+0x71c>
   20adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20ade:	e770      	b.n	209c2 <_dtoa_r+0x772>
   20ae0:	9b08      	ldr	r3, [sp, #32]
   20ae2:	2b01      	cmp	r3, #1
   20ae4:	dc18      	bgt.n	20b18 <_dtoa_r+0x8c8>
   20ae6:	9b00      	ldr	r3, [sp, #0]
   20ae8:	b9b3      	cbnz	r3, 20b18 <_dtoa_r+0x8c8>
   20aea:	9b01      	ldr	r3, [sp, #4]
   20aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
   20af0:	b9a3      	cbnz	r3, 20b1c <_dtoa_r+0x8cc>
   20af2:	9b01      	ldr	r3, [sp, #4]
   20af4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   20af8:	0d3f      	lsrs	r7, r7, #20
   20afa:	053f      	lsls	r7, r7, #20
   20afc:	b137      	cbz	r7, 20b0c <_dtoa_r+0x8bc>
   20afe:	9b06      	ldr	r3, [sp, #24]
   20b00:	2701      	movs	r7, #1
   20b02:	3301      	adds	r3, #1
   20b04:	9306      	str	r3, [sp, #24]
   20b06:	9b07      	ldr	r3, [sp, #28]
   20b08:	3301      	adds	r3, #1
   20b0a:	9307      	str	r3, [sp, #28]
   20b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   20b0e:	2b00      	cmp	r3, #0
   20b10:	f47f af6f 	bne.w	209f2 <_dtoa_r+0x7a2>
   20b14:	2001      	movs	r0, #1
   20b16:	e774      	b.n	20a02 <_dtoa_r+0x7b2>
   20b18:	2700      	movs	r7, #0
   20b1a:	e7f7      	b.n	20b0c <_dtoa_r+0x8bc>
   20b1c:	9f00      	ldr	r7, [sp, #0]
   20b1e:	e7f5      	b.n	20b0c <_dtoa_r+0x8bc>
   20b20:	d083      	beq.n	20a2a <_dtoa_r+0x7da>
   20b22:	4618      	mov	r0, r3
   20b24:	301c      	adds	r0, #28
   20b26:	e779      	b.n	20a1c <_dtoa_r+0x7cc>
   20b28:	f1b9 0f00 	cmp.w	r9, #0
   20b2c:	dc34      	bgt.n	20b98 <_dtoa_r+0x948>
   20b2e:	9b08      	ldr	r3, [sp, #32]
   20b30:	2b02      	cmp	r3, #2
   20b32:	dd31      	ble.n	20b98 <_dtoa_r+0x948>
   20b34:	f8cd 9010 	str.w	r9, [sp, #16]
   20b38:	9b04      	ldr	r3, [sp, #16]
   20b3a:	b963      	cbnz	r3, 20b56 <_dtoa_r+0x906>
   20b3c:	4621      	mov	r1, r4
   20b3e:	2205      	movs	r2, #5
   20b40:	4658      	mov	r0, fp
   20b42:	f028 f81a 	bl	48b7a <__multadd>
   20b46:	4601      	mov	r1, r0
   20b48:	4604      	mov	r4, r0
   20b4a:	4640      	mov	r0, r8
   20b4c:	f028 f9cb 	bl	48ee6 <__mcmp>
   20b50:	2800      	cmp	r0, #0
   20b52:	f73f adc8 	bgt.w	206e6 <_dtoa_r+0x496>
   20b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   20b58:	9d03      	ldr	r5, [sp, #12]
   20b5a:	ea6f 0a03 	mvn.w	sl, r3
   20b5e:	2700      	movs	r7, #0
   20b60:	4621      	mov	r1, r4
   20b62:	4658      	mov	r0, fp
   20b64:	f027 fff2 	bl	48b4c <_Bfree>
   20b68:	2e00      	cmp	r6, #0
   20b6a:	f43f aeb1 	beq.w	208d0 <_dtoa_r+0x680>
   20b6e:	b12f      	cbz	r7, 20b7c <_dtoa_r+0x92c>
   20b70:	42b7      	cmp	r7, r6
   20b72:	d003      	beq.n	20b7c <_dtoa_r+0x92c>
   20b74:	4639      	mov	r1, r7
   20b76:	4658      	mov	r0, fp
   20b78:	f027 ffe8 	bl	48b4c <_Bfree>
   20b7c:	4631      	mov	r1, r6
   20b7e:	4658      	mov	r0, fp
   20b80:	f027 ffe4 	bl	48b4c <_Bfree>
   20b84:	e6a4      	b.n	208d0 <_dtoa_r+0x680>
   20b86:	2400      	movs	r4, #0
   20b88:	4626      	mov	r6, r4
   20b8a:	e7e4      	b.n	20b56 <_dtoa_r+0x906>
   20b8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   20b90:	4626      	mov	r6, r4
   20b92:	e5a8      	b.n	206e6 <_dtoa_r+0x496>
   20b94:	40240000 	.word	0x40240000
   20b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   20b9a:	f8cd 9010 	str.w	r9, [sp, #16]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	f000 80eb 	beq.w	20d7a <_dtoa_r+0xb2a>
   20ba4:	2d00      	cmp	r5, #0
   20ba6:	dd05      	ble.n	20bb4 <_dtoa_r+0x964>
   20ba8:	4631      	mov	r1, r6
   20baa:	462a      	mov	r2, r5
   20bac:	4658      	mov	r0, fp
   20bae:	f028 f947 	bl	48e40 <__lshift>
   20bb2:	4606      	mov	r6, r0
   20bb4:	2f00      	cmp	r7, #0
   20bb6:	d056      	beq.n	20c66 <_dtoa_r+0xa16>
   20bb8:	6871      	ldr	r1, [r6, #4]
   20bba:	4658      	mov	r0, fp
   20bbc:	f027 ff92 	bl	48ae4 <_Balloc>
   20bc0:	6932      	ldr	r2, [r6, #16]
   20bc2:	4605      	mov	r5, r0
   20bc4:	f106 010c 	add.w	r1, r6, #12
   20bc8:	3202      	adds	r2, #2
   20bca:	300c      	adds	r0, #12
   20bcc:	0092      	lsls	r2, r2, #2
   20bce:	f027 fadb 	bl	48188 <memcpy>
   20bd2:	2201      	movs	r2, #1
   20bd4:	4629      	mov	r1, r5
   20bd6:	4658      	mov	r0, fp
   20bd8:	f028 f932 	bl	48e40 <__lshift>
   20bdc:	9b03      	ldr	r3, [sp, #12]
   20bde:	4637      	mov	r7, r6
   20be0:	4606      	mov	r6, r0
   20be2:	f103 0901 	add.w	r9, r3, #1
   20be6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   20bea:	4413      	add	r3, r2
   20bec:	9309      	str	r3, [sp, #36]	; 0x24
   20bee:	9b00      	ldr	r3, [sp, #0]
   20bf0:	f003 0301 	and.w	r3, r3, #1
   20bf4:	9307      	str	r3, [sp, #28]
   20bf6:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   20bfa:	4621      	mov	r1, r4
   20bfc:	4640      	mov	r0, r8
   20bfe:	9300      	str	r3, [sp, #0]
   20c00:	f027 fd56 	bl	486b0 <quorem>
   20c04:	4603      	mov	r3, r0
   20c06:	9004      	str	r0, [sp, #16]
   20c08:	4639      	mov	r1, r7
   20c0a:	4640      	mov	r0, r8
   20c0c:	3330      	adds	r3, #48	; 0x30
   20c0e:	930a      	str	r3, [sp, #40]	; 0x28
   20c10:	f028 f969 	bl	48ee6 <__mcmp>
   20c14:	4632      	mov	r2, r6
   20c16:	9006      	str	r0, [sp, #24]
   20c18:	4621      	mov	r1, r4
   20c1a:	4658      	mov	r0, fp
   20c1c:	f028 f97d 	bl	48f1a <__mdiff>
   20c20:	68c2      	ldr	r2, [r0, #12]
   20c22:	4605      	mov	r5, r0
   20c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c26:	bb02      	cbnz	r2, 20c6a <_dtoa_r+0xa1a>
   20c28:	4601      	mov	r1, r0
   20c2a:	4640      	mov	r0, r8
   20c2c:	f028 f95b 	bl	48ee6 <__mcmp>
   20c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c32:	4602      	mov	r2, r0
   20c34:	4629      	mov	r1, r5
   20c36:	4658      	mov	r0, fp
   20c38:	920c      	str	r2, [sp, #48]	; 0x30
   20c3a:	464d      	mov	r5, r9
   20c3c:	930a      	str	r3, [sp, #40]	; 0x28
   20c3e:	f027 ff85 	bl	48b4c <_Bfree>
   20c42:	9b08      	ldr	r3, [sp, #32]
   20c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   20c46:	ea43 0102 	orr.w	r1, r3, r2
   20c4a:	9b07      	ldr	r3, [sp, #28]
   20c4c:	430b      	orrs	r3, r1
   20c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20c50:	d10d      	bne.n	20c6e <_dtoa_r+0xa1e>
   20c52:	2b39      	cmp	r3, #57	; 0x39
   20c54:	d027      	beq.n	20ca6 <_dtoa_r+0xa56>
   20c56:	9a06      	ldr	r2, [sp, #24]
   20c58:	2a00      	cmp	r2, #0
   20c5a:	dd01      	ble.n	20c60 <_dtoa_r+0xa10>
   20c5c:	9b04      	ldr	r3, [sp, #16]
   20c5e:	3331      	adds	r3, #49	; 0x31
   20c60:	9a00      	ldr	r2, [sp, #0]
   20c62:	7013      	strb	r3, [r2, #0]
   20c64:	e77c      	b.n	20b60 <_dtoa_r+0x910>
   20c66:	4630      	mov	r0, r6
   20c68:	e7b8      	b.n	20bdc <_dtoa_r+0x98c>
   20c6a:	2201      	movs	r2, #1
   20c6c:	e7e2      	b.n	20c34 <_dtoa_r+0x9e4>
   20c6e:	9906      	ldr	r1, [sp, #24]
   20c70:	2900      	cmp	r1, #0
   20c72:	db04      	blt.n	20c7e <_dtoa_r+0xa2e>
   20c74:	9808      	ldr	r0, [sp, #32]
   20c76:	4301      	orrs	r1, r0
   20c78:	9807      	ldr	r0, [sp, #28]
   20c7a:	4301      	orrs	r1, r0
   20c7c:	d11d      	bne.n	20cba <_dtoa_r+0xa6a>
   20c7e:	2a00      	cmp	r2, #0
   20c80:	ddee      	ble.n	20c60 <_dtoa_r+0xa10>
   20c82:	4641      	mov	r1, r8
   20c84:	2201      	movs	r2, #1
   20c86:	4658      	mov	r0, fp
   20c88:	9306      	str	r3, [sp, #24]
   20c8a:	f028 f8d9 	bl	48e40 <__lshift>
   20c8e:	4621      	mov	r1, r4
   20c90:	4680      	mov	r8, r0
   20c92:	f028 f928 	bl	48ee6 <__mcmp>
   20c96:	2800      	cmp	r0, #0
   20c98:	9b06      	ldr	r3, [sp, #24]
   20c9a:	dc02      	bgt.n	20ca2 <_dtoa_r+0xa52>
   20c9c:	d1e0      	bne.n	20c60 <_dtoa_r+0xa10>
   20c9e:	07da      	lsls	r2, r3, #31
   20ca0:	d5de      	bpl.n	20c60 <_dtoa_r+0xa10>
   20ca2:	2b39      	cmp	r3, #57	; 0x39
   20ca4:	d1da      	bne.n	20c5c <_dtoa_r+0xa0c>
   20ca6:	2339      	movs	r3, #57	; 0x39
   20ca8:	9a00      	ldr	r2, [sp, #0]
   20caa:	7013      	strb	r3, [r2, #0]
   20cac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20cb0:	1e6a      	subs	r2, r5, #1
   20cb2:	2b39      	cmp	r3, #57	; 0x39
   20cb4:	d046      	beq.n	20d44 <_dtoa_r+0xaf4>
   20cb6:	3301      	adds	r3, #1
   20cb8:	e7d3      	b.n	20c62 <_dtoa_r+0xa12>
   20cba:	2a00      	cmp	r2, #0
   20cbc:	dd03      	ble.n	20cc6 <_dtoa_r+0xa76>
   20cbe:	2b39      	cmp	r3, #57	; 0x39
   20cc0:	d0f1      	beq.n	20ca6 <_dtoa_r+0xa56>
   20cc2:	3301      	adds	r3, #1
   20cc4:	e7cc      	b.n	20c60 <_dtoa_r+0xa10>
   20cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   20cc8:	f809 3c01 	strb.w	r3, [r9, #-1]
   20ccc:	4591      	cmp	r9, r2
   20cce:	d021      	beq.n	20d14 <_dtoa_r+0xac4>
   20cd0:	4641      	mov	r1, r8
   20cd2:	2300      	movs	r3, #0
   20cd4:	220a      	movs	r2, #10
   20cd6:	4658      	mov	r0, fp
   20cd8:	f027 ff4f 	bl	48b7a <__multadd>
   20cdc:	42b7      	cmp	r7, r6
   20cde:	4680      	mov	r8, r0
   20ce0:	f04f 0300 	mov.w	r3, #0
   20ce4:	f04f 020a 	mov.w	r2, #10
   20ce8:	4639      	mov	r1, r7
   20cea:	4658      	mov	r0, fp
   20cec:	d106      	bne.n	20cfc <_dtoa_r+0xaac>
   20cee:	f027 ff44 	bl	48b7a <__multadd>
   20cf2:	4607      	mov	r7, r0
   20cf4:	4606      	mov	r6, r0
   20cf6:	f109 0901 	add.w	r9, r9, #1
   20cfa:	e77c      	b.n	20bf6 <_dtoa_r+0x9a6>
   20cfc:	f027 ff3d 	bl	48b7a <__multadd>
   20d00:	4631      	mov	r1, r6
   20d02:	4607      	mov	r7, r0
   20d04:	2300      	movs	r3, #0
   20d06:	220a      	movs	r2, #10
   20d08:	4658      	mov	r0, fp
   20d0a:	f027 ff36 	bl	48b7a <__multadd>
   20d0e:	4606      	mov	r6, r0
   20d10:	e7f1      	b.n	20cf6 <_dtoa_r+0xaa6>
   20d12:	2700      	movs	r7, #0
   20d14:	4641      	mov	r1, r8
   20d16:	2201      	movs	r2, #1
   20d18:	4658      	mov	r0, fp
   20d1a:	9300      	str	r3, [sp, #0]
   20d1c:	f028 f890 	bl	48e40 <__lshift>
   20d20:	4621      	mov	r1, r4
   20d22:	4680      	mov	r8, r0
   20d24:	f028 f8df 	bl	48ee6 <__mcmp>
   20d28:	2800      	cmp	r0, #0
   20d2a:	dcbf      	bgt.n	20cac <_dtoa_r+0xa5c>
   20d2c:	d102      	bne.n	20d34 <_dtoa_r+0xae4>
   20d2e:	9b00      	ldr	r3, [sp, #0]
   20d30:	07db      	lsls	r3, r3, #31
   20d32:	d4bb      	bmi.n	20cac <_dtoa_r+0xa5c>
   20d34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   20d38:	1e6a      	subs	r2, r5, #1
   20d3a:	2b30      	cmp	r3, #48	; 0x30
   20d3c:	f47f af10 	bne.w	20b60 <_dtoa_r+0x910>
   20d40:	4615      	mov	r5, r2
   20d42:	e7f7      	b.n	20d34 <_dtoa_r+0xae4>
   20d44:	9b03      	ldr	r3, [sp, #12]
   20d46:	4293      	cmp	r3, r2
   20d48:	d104      	bne.n	20d54 <_dtoa_r+0xb04>
   20d4a:	f10a 0a01 	add.w	sl, sl, #1
   20d4e:	2331      	movs	r3, #49	; 0x31
   20d50:	9a03      	ldr	r2, [sp, #12]
   20d52:	e786      	b.n	20c62 <_dtoa_r+0xa12>
   20d54:	4615      	mov	r5, r2
   20d56:	e7a9      	b.n	20cac <_dtoa_r+0xa5c>
   20d58:	4b13      	ldr	r3, [pc, #76]	; (20da8 <_dtoa_r+0xb58>)
   20d5a:	f7ff bae1 	b.w	20320 <_dtoa_r+0xd0>
   20d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   20d60:	2b00      	cmp	r3, #0
   20d62:	f47f aab9 	bne.w	202d8 <_dtoa_r+0x88>
   20d66:	4b11      	ldr	r3, [pc, #68]	; (20dac <_dtoa_r+0xb5c>)
   20d68:	f7ff bada 	b.w	20320 <_dtoa_r+0xd0>
   20d6c:	9b04      	ldr	r3, [sp, #16]
   20d6e:	2b00      	cmp	r3, #0
   20d70:	dc03      	bgt.n	20d7a <_dtoa_r+0xb2a>
   20d72:	9b08      	ldr	r3, [sp, #32]
   20d74:	2b02      	cmp	r3, #2
   20d76:	f73f aedf 	bgt.w	20b38 <_dtoa_r+0x8e8>
   20d7a:	9d03      	ldr	r5, [sp, #12]
   20d7c:	4621      	mov	r1, r4
   20d7e:	4640      	mov	r0, r8
   20d80:	f027 fc96 	bl	486b0 <quorem>
   20d84:	9a03      	ldr	r2, [sp, #12]
   20d86:	f100 0330 	add.w	r3, r0, #48	; 0x30
   20d8a:	9904      	ldr	r1, [sp, #16]
   20d8c:	f805 3b01 	strb.w	r3, [r5], #1
   20d90:	1aaa      	subs	r2, r5, r2
   20d92:	4291      	cmp	r1, r2
   20d94:	ddbd      	ble.n	20d12 <_dtoa_r+0xac2>
   20d96:	4641      	mov	r1, r8
   20d98:	2300      	movs	r3, #0
   20d9a:	220a      	movs	r2, #10
   20d9c:	4658      	mov	r0, fp
   20d9e:	f027 feec 	bl	48b7a <__multadd>
   20da2:	4680      	mov	r8, r0
   20da4:	e7ea      	b.n	20d7c <_dtoa_r+0xb2c>
   20da6:	bf00      	nop
   20da8:	00052672 	.word	0x00052672
   20dac:	00052bfd 	.word	0x00052bfd

00020db0 <nan>:
   20db0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 20db8 <nan+0x8>
   20db4:	4770      	bx	lr
   20db6:	bf00      	nop
   20db8:	00000000 	.word	0x00000000
   20dbc:	7ff80000 	.word	0x7ff80000

00020dc0 <shutdown_modem>:
	LOG_ERR("LTE link disconnect");
   20dc0:	2301      	movs	r3, #1
   20dc2:	f04f 0000 	mov.w	r0, #0
{
   20dc6:	b510      	push	{r4, lr}
	LOG_ERR("LTE link disconnect");
   20dc8:	f363 0007 	bfi	r0, r3, #0, #8
   20dcc:	4c12      	ldr	r4, [pc, #72]	; (20e18 <shutdown_modem+0x58>)
   20dce:	4b13      	ldr	r3, [pc, #76]	; (20e1c <shutdown_modem+0x5c>)
   20dd0:	4913      	ldr	r1, [pc, #76]	; (20e20 <shutdown_modem+0x60>)
   20dd2:	1ae4      	subs	r4, r4, r3
   20dd4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20dd8:	f364 108f 	bfi	r0, r4, #6, #10
   20ddc:	f023 fca3 	bl	44726 <log_string_sync>
	int err = lte_lc_power_off();
   20de0:	f00c fce2 	bl	2d7a8 <lte_lc_power_off>
	if (err) {
   20de4:	4602      	mov	r2, r0
   20de6:	b148      	cbz	r0, 20dfc <shutdown_modem+0x3c>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   20de8:	2101      	movs	r1, #1
   20dea:	f04f 0000 	mov.w	r0, #0
   20dee:	f361 0007 	bfi	r0, r1, #0, #8
   20df2:	f364 108f 	bfi	r0, r4, #6, #10
   20df6:	490b      	ldr	r1, [pc, #44]	; (20e24 <shutdown_modem+0x64>)
   20df8:	f023 fc95 	bl	44726 <log_string_sync>
	LOG_ERR("Shutdown modem");
   20dfc:	2301      	movs	r3, #1
   20dfe:	f04f 0000 	mov.w	r0, #0
   20e02:	f363 0007 	bfi	r0, r3, #0, #8
   20e06:	f364 108f 	bfi	r0, r4, #6, #10
   20e0a:	4907      	ldr	r1, [pc, #28]	; (20e28 <shutdown_modem+0x68>)
   20e0c:	f023 fc8b 	bl	44726 <log_string_sync>
}
   20e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bsdlib_shutdown();
   20e14:	f026 b8a8 	b.w	46f68 <bsdlib_shutdown>
   20e18:	00049798 	.word	0x00049798
   20e1c:	00049788 	.word	0x00049788
   20e20:	0004b772 	.word	0x0004b772
   20e24:	0004b786 	.word	0x0004b786
   20e28:	0004b7a2 	.word	0x0004b7a2

00020e2c <cycle_cloud_connection>:

static void cycle_cloud_connection(struct k_work *work)
{
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;

	LOG_INF("Disconnecting from cloud...");
   20e2c:	2303      	movs	r3, #3
   20e2e:	f04f 0000 	mov.w	r0, #0
{
   20e32:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Disconnecting from cloud...");
   20e34:	f363 0007 	bfi	r0, r3, #0, #8
   20e38:	4c1d      	ldr	r4, [pc, #116]	; (20eb0 <cycle_cloud_connection+0x84>)
   20e3a:	4b1e      	ldr	r3, [pc, #120]	; (20eb4 <cycle_cloud_connection+0x88>)
   20e3c:	491e      	ldr	r1, [pc, #120]	; (20eb8 <cycle_cloud_connection+0x8c>)
   20e3e:	1ae4      	subs	r4, r4, r3
   20e40:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   20e44:	f364 108f 	bfi	r0, r4, #6, #10
   20e48:	f023 fc6d 	bl	44726 <log_string_sync>

	if (cloud_disconnect(cloud_backend) != 0) {
   20e4c:	4b1b      	ldr	r3, [pc, #108]	; (20ebc <cycle_cloud_connection+0x90>)
   20e4e:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   20e50:	bb10      	cbnz	r0, 20e98 <cycle_cloud_connection+0x6c>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   20e52:	2303      	movs	r3, #3
   20e54:	f04f 0000 	mov.w	r0, #0
   20e58:	f363 0007 	bfi	r0, r3, #0, #8
   20e5c:	4918      	ldr	r1, [pc, #96]	; (20ec0 <cycle_cloud_connection+0x94>)
   20e5e:	f364 108f 	bfi	r0, r4, #6, #10
   20e62:	2205      	movs	r2, #5
   20e64:	f023 fc5f 	bl	44726 <log_string_sync>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
   20e68:	f241 3188 	movw	r1, #5000	; 0x1388
   20e6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20e70:	f240 34e7 	movw	r4, #999	; 0x3e7
   20e74:	2500      	movs	r5, #0
   20e76:	fbc0 4501 	smlal	r4, r5, r0, r1
   20e7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e7e:	2300      	movs	r3, #0
   20e80:	4620      	mov	r0, r4
   20e82:	4629      	mov	r1, r5
   20e84:	f7fc f81a 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Reboot fail-safe on disconnect */
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
				       K_MSEC(reboot_wait_ms));
}
   20e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   20e8c:	4602      	mov	r2, r0
   20e8e:	460b      	mov	r3, r1
   20e90:	480c      	ldr	r0, [pc, #48]	; (20ec4 <cycle_cloud_connection+0x98>)
   20e92:	490d      	ldr	r1, [pc, #52]	; (20ec8 <cycle_cloud_connection+0x9c>)
   20e94:	f01f bf7e 	b.w	40d94 <k_delayed_work_submit_to_queue>
   20e98:	6803      	ldr	r3, [r0, #0]
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d0d9      	beq.n	20e52 <cycle_cloud_connection+0x26>
	    backend->api->disconnect == NULL) {
   20e9e:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   20ea0:	2b00      	cmp	r3, #0
   20ea2:	d0d6      	beq.n	20e52 <cycle_cloud_connection+0x26>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   20ea4:	4798      	blx	r3
	if (cloud_disconnect(cloud_backend) != 0) {
   20ea6:	2800      	cmp	r0, #0
   20ea8:	d1d3      	bne.n	20e52 <cycle_cloud_connection+0x26>
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   20eaa:	f643 2198 	movw	r1, #15000	; 0x3a98
   20eae:	e7dd      	b.n	20e6c <cycle_cloud_connection+0x40>
   20eb0:	00049798 	.word	0x00049798
   20eb4:	00049788 	.word	0x00049788
   20eb8:	0004af71 	.word	0x0004af71
   20ebc:	2002498c 	.word	0x2002498c
   20ec0:	0004af8d 	.word	0x0004af8d
   20ec4:	20020e60 	.word	0x20020e60
   20ec8:	20020f78 	.word	0x20020f78

00020ecc <data_send_enabled>:
{
   20ecc:	b508      	push	{r3, lr}
	return (atomic_get(&cloud_association) ==
   20ece:	4803      	ldr	r0, [pc, #12]	; (20edc <data_send_enabled+0x10>)
   20ed0:	f023 f83b 	bl	43f4a <atomic_get>
}
   20ed4:	1f03      	subs	r3, r0, #4
   20ed6:	4258      	negs	r0, r3
   20ed8:	4158      	adcs	r0, r3
   20eda:	bd08      	pop	{r3, pc}
   20edc:	20024988 	.word	0x20024988

00020ee0 <set_gps_enable>:
		connect_to_cloud(connect_wait_s);
	}
}

static void set_gps_enable(const bool enable)
{
   20ee0:	b570      	push	{r4, r5, r6, lr}
   20ee2:	4604      	mov	r4, r0
	int32_t delay_ms = 0;
	bool changing = (enable != gps_control_is_enabled());
   20ee4:	f002 fc16 	bl	23714 <gps_control_is_enabled>
   20ee8:	4605      	mov	r5, r0

	/* Exit early if the link is not ready or if the cloud
	 * state is defined and the local state is not changing.
	 */
	if (!data_send_enabled() ||
   20eea:	f7ff ffef 	bl	20ecc <data_send_enabled>
   20eee:	2800      	cmp	r0, #0
   20ef0:	d03c      	beq.n	20f6c <set_gps_enable+0x8c>
	    ((cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS) !=
   20ef2:	2000      	movs	r0, #0
   20ef4:	f002 faac 	bl	23450 <cloud_get_channel_enable_state>
	if (!data_send_enabled() ||
   20ef8:	3001      	adds	r0, #1
   20efa:	d001      	beq.n	20f00 <set_gps_enable+0x20>
	    CLOUD_CMD_STATE_UNDEFINED) && !changing)) {
   20efc:	42a5      	cmp	r5, r4
   20efe:	d035      	beq.n	20f6c <set_gps_enable+0x8c>
		return;
	}

	cloud_set_channel_enable_state(CLOUD_CHANNEL_GPS,
   20f00:	b261      	sxtb	r1, r4
   20f02:	2000      	movs	r0, #0
   20f04:	f002 fb46 	bl	23594 <cloud_set_channel_enable_state>
		enable ? CLOUD_CMD_STATE_TRUE : CLOUD_CMD_STATE_FALSE);

	if (changing) {
   20f08:	42a5      	cmp	r5, r4
   20f0a:	d00f      	beq.n	20f2c <set_gps_enable+0x4c>
		if (enable) {
   20f0c:	4a18      	ldr	r2, [pc, #96]	; (20f70 <set_gps_enable+0x90>)
   20f0e:	4b19      	ldr	r3, [pc, #100]	; (20f74 <set_gps_enable+0x94>)
			LOG_INF("Starting GPS");
   20f10:	f04f 0000 	mov.w	r0, #0
   20f14:	1a9b      	subs	r3, r3, r2
   20f16:	2203      	movs	r2, #3
   20f18:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   20f1c:	f362 0007 	bfi	r0, r2, #0, #8
   20f20:	f363 108f 	bfi	r0, r3, #6, #10
		if (enable) {
   20f24:	b124      	cbz	r4, 20f30 <set_gps_enable+0x50>
			LOG_INF("Starting GPS");
   20f26:	4914      	ldr	r1, [pc, #80]	; (20f78 <set_gps_enable+0x98>)
   20f28:	f023 fbfd 	bl	44726 <log_string_sync>
	int32_t delay_ms = 0;
   20f2c:	2100      	movs	r1, #0
   20f2e:	e007      	b.n	20f40 <set_gps_enable+0x60>
			/* GPS will be started from the device config work
			 * handler AFTER the config has been sent to the cloud
			 */
		} else {
			LOG_INF("Stopping GPS");
   20f30:	4912      	ldr	r1, [pc, #72]	; (20f7c <set_gps_enable+0x9c>)
   20f32:	f023 fbf8 	bl	44726 <log_string_sync>
			gps_control_stop(0);
   20f36:	4620      	mov	r0, r4
   20f38:	f002 fd32 	bl	239a0 <gps_control_stop>
			/* Allow time for the gps to be stopped before
			 * attemping to send the config update
			 */
			delay_ms = 5 * MSEC_PER_SEC;
   20f3c:	f241 3188 	movw	r1, #5000	; 0x1388
   20f40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   20f44:	f240 34e7 	movw	r4, #999	; 0x3e7
   20f48:	2500      	movs	r5, #0
   20f4a:	fbc0 4501 	smlal	r4, r5, r0, r1
   20f4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20f52:	2300      	movs	r3, #0
   20f54:	4620      	mov	r0, r4
   20f56:	4629      	mov	r1, r5
   20f58:	f7fb ffb0 	bl	1cebc <__aeabi_uldivmod>
	}

	/* Update config state in cloud */
	k_delayed_work_submit_to_queue(&application_work_q,
			&device_config_work, K_MSEC(delay_ms));
}
   20f5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q,
   20f60:	4602      	mov	r2, r0
   20f62:	460b      	mov	r3, r1
   20f64:	4806      	ldr	r0, [pc, #24]	; (20f80 <set_gps_enable+0xa0>)
   20f66:	4907      	ldr	r1, [pc, #28]	; (20f84 <set_gps_enable+0xa4>)
   20f68:	f01f bf14 	b.w	40d94 <k_delayed_work_submit_to_queue>
}
   20f6c:	bd70      	pop	{r4, r5, r6, pc}
   20f6e:	bf00      	nop
   20f70:	00049788 	.word	0x00049788
   20f74:	00049798 	.word	0x00049798
   20f78:	0004b765 	.word	0x0004b765
   20f7c:	000520b8 	.word	0x000520b8
   20f80:	20020e60 	.word	0x20020e60
   20f84:	20020fd8 	.word	0x20020fd8

00020f88 <sensor_data_send>:
{
   20f88:	b510      	push	{r4, lr}
   20f8a:	b086      	sub	sp, #24
   20f8c:	4604      	mov	r4, r0
	struct cloud_msg msg = {
   20f8e:	2218      	movs	r2, #24
   20f90:	2100      	movs	r1, #0
   20f92:	4668      	mov	r0, sp
   20f94:	f027 f918 	bl	481c8 <memset>
	if (!data_send_enabled() || gps_control_is_active()) {
   20f98:	f7ff ff98 	bl	20ecc <data_send_enabled>
   20f9c:	b1b8      	cbz	r0, 20fce <sensor_data_send+0x46>
   20f9e:	f002 fbc3 	bl	23728 <gps_control_is_active>
   20fa2:	b9a0      	cbnz	r0, 20fce <sensor_data_send+0x46>
	err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   20fa4:	466a      	mov	r2, sp
   20fa6:	2106      	movs	r1, #6
   20fa8:	4620      	mov	r0, r4
   20faa:	f001 fe93 	bl	22cd4 <cloud_encode_data>
	if (err) {
   20fae:	4602      	mov	r2, r0
   20fb0:	b178      	cbz	r0, 20fd2 <sensor_data_send+0x4a>
		LOG_ERR("Unable to encode cloud data: %d", err);
   20fb2:	2301      	movs	r3, #1
   20fb4:	f04f 0000 	mov.w	r0, #0
   20fb8:	4914      	ldr	r1, [pc, #80]	; (2100c <sensor_data_send+0x84>)
   20fba:	f363 0007 	bfi	r0, r3, #0, #8
   20fbe:	4b14      	ldr	r3, [pc, #80]	; (21010 <sensor_data_send+0x88>)
   20fc0:	1a5b      	subs	r3, r3, r1
   20fc2:	08db      	lsrs	r3, r3, #3
   20fc4:	f363 108f 	bfi	r0, r3, #6, #10
   20fc8:	4912      	ldr	r1, [pc, #72]	; (21014 <sensor_data_send+0x8c>)
   20fca:	f023 fbac 	bl	44726 <log_string_sync>
}
   20fce:	b006      	add	sp, #24
   20fd0:	bd10      	pop	{r4, pc}
		err = cloud_send(cloud_backend, &msg);
   20fd2:	4b11      	ldr	r3, [pc, #68]	; (21018 <sensor_data_send+0x90>)
   20fd4:	4669      	mov	r1, sp
   20fd6:	6818      	ldr	r0, [r3, #0]
   20fd8:	f022 ffa6 	bl	43f28 <cloud_send>
   20fdc:	4604      	mov	r4, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   20fde:	9800      	ldr	r0, [sp, #0]
   20fe0:	f027 f897 	bl	48112 <k_free>
		if (err) {
   20fe4:	2c00      	cmp	r4, #0
   20fe6:	d0f2      	beq.n	20fce <sensor_data_send+0x46>
			LOG_ERR("%s failed, data was not sent: %d", __func__,
   20fe8:	2301      	movs	r3, #1
   20fea:	f04f 0000 	mov.w	r0, #0
   20fee:	4a08      	ldr	r2, [pc, #32]	; (21010 <sensor_data_send+0x88>)
   20ff0:	f363 0007 	bfi	r0, r3, #0, #8
   20ff4:	4b05      	ldr	r3, [pc, #20]	; (2100c <sensor_data_send+0x84>)
   20ff6:	4909      	ldr	r1, [pc, #36]	; (2101c <sensor_data_send+0x94>)
   20ff8:	1ad2      	subs	r2, r2, r3
   20ffa:	08d2      	lsrs	r2, r2, #3
   20ffc:	f362 108f 	bfi	r0, r2, #6, #10
   21000:	4623      	mov	r3, r4
   21002:	4a07      	ldr	r2, [pc, #28]	; (21020 <sensor_data_send+0x98>)
   21004:	f023 fb8f 	bl	44726 <log_string_sync>
   21008:	e7e1      	b.n	20fce <sensor_data_send+0x46>
   2100a:	bf00      	nop
   2100c:	00049788 	.word	0x00049788
   21010:	00049798 	.word	0x00049798
   21014:	0004b68d 	.word	0x0004b68d
   21018:	2002498c 	.word	0x2002498c
   2101c:	0004b6ad 	.word	0x0004b6ad
   21020:	0004aa93 	.word	0x0004aa93

00021024 <modem_rsrp_data_send>:
{
   21024:	b530      	push	{r4, r5, lr}
   21026:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   21028:	2280      	movs	r2, #128	; 0x80
   2102a:	2100      	movs	r1, #0
   2102c:	4668      	mov	r0, sp
   2102e:	f027 f8cb 	bl	481c8 <memset>
	if (!data_send_enabled()) {
   21032:	f7ff ff4b 	bl	20ecc <data_send_enabled>
   21036:	b308      	cbz	r0, 2107c <modem_rsrp_data_send+0x58>
	rsrp_current = rsrp.value - rsrp.offset;
   21038:	4b11      	ldr	r3, [pc, #68]	; (21080 <modem_rsrp_data_send+0x5c>)
	if (rsrp_current == rsrp_prev) {
   2103a:	4d12      	ldr	r5, [pc, #72]	; (21084 <modem_rsrp_data_send+0x60>)
	rsrp_current = rsrp.value - rsrp.offset;
   2103c:	881c      	ldrh	r4, [r3, #0]
   2103e:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   21040:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   21042:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   21044:	42a2      	cmp	r2, r4
   21046:	d019      	beq.n	2107c <modem_rsrp_data_send+0x58>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   21048:	2180      	movs	r1, #128	; 0x80
   2104a:	4623      	mov	r3, r4
   2104c:	4a0e      	ldr	r2, [pc, #56]	; (21088 <modem_rsrp_data_send+0x64>)
   2104e:	4668      	mov	r0, sp
   21050:	f021 fc50 	bl	428f4 <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   21054:	4b0d      	ldr	r3, [pc, #52]	; (2108c <modem_rsrp_data_send+0x68>)
	signal_strength_cloud_data.tag += 1;
   21056:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   21058:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   2105a:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   2105c:	bf08      	it	eq
   2105e:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   21060:	480a      	ldr	r0, [pc, #40]	; (2108c <modem_rsrp_data_send+0x68>)
		signal_strength_cloud_data.tag = 0x1;
   21062:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   21064:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   21068:	f7ff ff8e 	bl	20f88 <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   2106c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   21070:	2300      	movs	r3, #0
   21072:	4907      	ldr	r1, [pc, #28]	; (21090 <modem_rsrp_data_send+0x6c>)
   21074:	4807      	ldr	r0, [pc, #28]	; (21094 <modem_rsrp_data_send+0x70>)
	rsrp_prev = rsrp_current;
   21076:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   21078:	f01f fe8c 	bl	40d94 <k_delayed_work_submit_to_queue>
}
   2107c:	b021      	add	sp, #132	; 0x84
   2107e:	bd30      	pop	{r4, r5, pc}
   21080:	20020ab0 	.word	0x20020ab0
   21084:	200249b8 	.word	0x200249b8
   21088:	0004fec5 	.word	0x0004fec5
   2108c:	200219b8 	.word	0x200219b8
   21090:	20021958 	.word	0x20021958
   21094:	20020e60 	.word	0x20020e60

00021098 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   21098:	4801      	ldr	r0, [pc, #4]	; (210a0 <send_gps_data_work_fn+0x8>)
   2109a:	f7ff bf75 	b.w	20f88 <sensor_data_send>
   2109e:	bf00      	nop
   210a0:	20020000 	.word	0x20020000

000210a4 <no_sim_go_offline>:
	}
#endif /* CONFIG_BSD_LIBRARY */
}

static void no_sim_go_offline(struct k_work *work)
{
   210a4:	b510      	push	{r4, lr}
#if defined(CONFIG_BSD_LIBRARY)
	lte_lc_offline();
   210a6:	f00c fb71 	bl	2d78c <lte_lc_offline>
   210aa:	2100      	movs	r1, #0
   210ac:	f640 40cd 	movw	r0, #3277	; 0xccd
   210b0:	f01f fbc8 	bl	40844 <z_impl_k_sleep>
	/* Wait for lte_lc events to be processed before printing info message */
	k_sleep(K_MSEC(100));
	LOG_INF("No SIM card detected.");
   210b4:	2303      	movs	r3, #3
   210b6:	f04f 0000 	mov.w	r0, #0
   210ba:	4c0e      	ldr	r4, [pc, #56]	; (210f4 <no_sim_go_offline+0x50>)
   210bc:	f363 0007 	bfi	r0, r3, #0, #8
   210c0:	4b0d      	ldr	r3, [pc, #52]	; (210f8 <no_sim_go_offline+0x54>)
   210c2:	490e      	ldr	r1, [pc, #56]	; (210fc <no_sim_go_offline+0x58>)
   210c4:	1ae4      	subs	r4, r4, r3
   210c6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   210ca:	f364 108f 	bfi	r0, r4, #6, #10
   210ce:	f023 fb2a 	bl	44726 <log_string_sync>
	LOG_INF("Insert SIM and reset device to run the asset tracker.");
   210d2:	2303      	movs	r3, #3
   210d4:	f04f 0000 	mov.w	r0, #0
   210d8:	f363 0007 	bfi	r0, r3, #0, #8
   210dc:	f364 108f 	bfi	r0, r4, #6, #10
   210e0:	4907      	ldr	r1, [pc, #28]	; (21100 <no_sim_go_offline+0x5c>)
   210e2:	f023 fb20 	bl	44726 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
#endif /* CONFIG_BSD_LIBRARY */
}
   210e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
   210ea:	f44f 7040 	mov.w	r0, #768	; 0x300
   210ee:	f001 bc73 	b.w	229d8 <ui_led_set_pattern>
   210f2:	bf00      	nop
   210f4:	00049798 	.word	0x00049798
   210f8:	00049788 	.word	0x00049788
   210fc:	0004b4ce 	.word	0x0004b4ce
   21100:	0004b4e4 	.word	0x0004b4e4

00021104 <long_press_handler>:
{
   21104:	b508      	push	{r3, lr}
	if (!data_send_enabled()) {
   21106:	f7ff fee1 	bl	20ecc <data_send_enabled>
   2110a:	b968      	cbnz	r0, 21128 <long_press_handler+0x24>
		LOG_INF("Link not ready, long press disregarded");
   2110c:	2303      	movs	r3, #3
   2110e:	4a0b      	ldr	r2, [pc, #44]	; (2113c <long_press_handler+0x38>)
   21110:	f363 0007 	bfi	r0, r3, #0, #8
   21114:	4b0a      	ldr	r3, [pc, #40]	; (21140 <long_press_handler+0x3c>)
   21116:	490b      	ldr	r1, [pc, #44]	; (21144 <long_press_handler+0x40>)
   21118:	1a9b      	subs	r3, r3, r2
   2111a:	08db      	lsrs	r3, r3, #3
   2111c:	f363 108f 	bfi	r0, r3, #6, #10
}
   21120:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   21124:	f023 baff 	b.w	44726 <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   21128:	f002 faf4 	bl	23714 <gps_control_is_enabled>
}
   2112c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   21130:	f080 0001 	eor.w	r0, r0, #1
   21134:	b2c0      	uxtb	r0, r0
   21136:	f7ff bed3 	b.w	20ee0 <set_gps_enable>
   2113a:	bf00      	nop
   2113c:	00049788 	.word	0x00049788
   21140:	00049798 	.word	0x00049798
   21144:	0004b1a9 	.word	0x0004b1a9

00021148 <ui_evt_handler>:
{
   21148:	b507      	push	{r0, r1, r2, lr}
   2114a:	ab02      	add	r3, sp, #8
   2114c:	e903 0003 	stmdb	r3, {r0, r1}
   21150:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   21152:	2b03      	cmp	r3, #3
   21154:	d107      	bne.n	21166 <ui_evt_handler+0x1e>
	    data_send_enabled()) {
   21156:	f7ff feb9 	bl	20ecc <data_send_enabled>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   2115a:	b1c8      	cbz	r0, 21190 <ui_evt_handler+0x48>
}
   2115c:	b003      	add	sp, #12
   2115e:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   21162:	f022 bf15 	b.w	43f90 <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   21166:	2b01      	cmp	r3, #1
   21168:	d112      	bne.n	21190 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   2116a:	f89d 3000 	ldrb.w	r3, [sp]
   2116e:	b94b      	cbnz	r3, 21184 <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   21170:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21174:	2300      	movs	r3, #0
   21176:	4908      	ldr	r1, [pc, #32]	; (21198 <ui_evt_handler+0x50>)
   21178:	4808      	ldr	r0, [pc, #32]	; (2119c <ui_evt_handler+0x54>)
}
   2117a:	b003      	add	sp, #12
   2117c:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   21180:	f01f be08 	b.w	40d94 <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   21184:	4804      	ldr	r0, [pc, #16]	; (21198 <ui_evt_handler+0x50>)
}
   21186:	b003      	add	sp, #12
   21188:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   2118c:	f01f be8a 	b.w	40ea4 <k_delayed_work_cancel>
}
   21190:	b003      	add	sp, #12
   21192:	f85d fb04 	ldr.w	pc, [sp], #4
   21196:	bf00      	nop
   21198:	20021040 	.word	0x20021040
   2119c:	20020e60 	.word	0x20020e60

000211a0 <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   211a0:	2861      	cmp	r0, #97	; 0x61
{
   211a2:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
   211a4:	d814      	bhi.n	211d0 <modem_rsrp_handler+0x30>
	rsrp.value = rsrp_value;
   211a6:	4b0b      	ldr	r3, [pc, #44]	; (211d4 <modem_rsrp_handler+0x34>)
   211a8:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   211aa:	480b      	ldr	r0, [pc, #44]	; (211d8 <modem_rsrp_handler+0x38>)
   211ac:	f020 f862 	bl	41274 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   211b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   211b4:	fba0 0103 	umull	r0, r1, r0, r3
   211b8:	0bc3      	lsrs	r3, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   211ba:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   211be:	d107      	bne.n	211d0 <modem_rsrp_handler+0x30>
}
   211c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   211c4:	2200      	movs	r2, #0
   211c6:	2300      	movs	r3, #0
   211c8:	4904      	ldr	r1, [pc, #16]	; (211dc <modem_rsrp_handler+0x3c>)
   211ca:	4805      	ldr	r0, [pc, #20]	; (211e0 <modem_rsrp_handler+0x40>)
   211cc:	f01f bde2 	b.w	40d94 <k_delayed_work_submit_to_queue>
}
   211d0:	bd10      	pop	{r4, pc}
   211d2:	bf00      	nop
   211d4:	20020ab0 	.word	0x20020ab0
   211d8:	20021968 	.word	0x20021968
   211dc:	20021958 	.word	0x20021958
   211e0:	20020e60 	.word	0x20020e60

000211e4 <k_work_submit_to_queue.constprop.14>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   211e4:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   211e6:	f100 0308 	add.w	r3, r0, #8
   211ea:	e8d3 2fef 	ldaex	r2, [r3]
   211ee:	f042 0001 	orr.w	r0, r2, #1
   211f2:	e8c3 0fec 	stlex	ip, r0, [r3]
   211f6:	f1bc 0f00 	cmp.w	ip, #0
   211fa:	d1f6      	bne.n	211ea <k_work_submit_to_queue.constprop.14+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   211fc:	07d3      	lsls	r3, r2, #31
   211fe:	d402      	bmi.n	21206 <k_work_submit_to_queue.constprop.14+0x22>
		k_queue_append(&work_q->queue, work);
   21200:	4801      	ldr	r0, [pc, #4]	; (21208 <k_work_submit_to_queue.constprop.14+0x24>)
   21202:	f026 be19 	b.w	47e38 <k_queue_append>
}
   21206:	4770      	bx	lr
   21208:	20020e60 	.word	0x20020e60

0002120c <lte_handler>:

#if defined(CONFIG_LTE_LINK_CONTROL)
static void lte_handler(const struct lte_lc_evt *const evt)
{
   2120c:	b510      	push	{r4, lr}
	switch (evt->type) {
   2120e:	7803      	ldrb	r3, [r0, #0]
{
   21210:	b094      	sub	sp, #80	; 0x50
   21212:	4604      	mov	r4, r0
	switch (evt->type) {
   21214:	2b04      	cmp	r3, #4
   21216:	d80a      	bhi.n	2122e <lte_handler+0x22>
   21218:	e8df f003 	tbb	[pc, r3]
   2121c:	58342303 	.word	0x58342303
   21220:	6b          	.byte	0x6b
   21221:	00          	.byte	0x00
	case LTE_LC_EVT_NW_REG_STATUS:

		if (evt->nw_reg_status == LTE_LC_NW_REG_UICC_FAIL) {
   21222:	7901      	ldrb	r1, [r0, #4]
   21224:	295a      	cmp	r1, #90	; 0x5a
   21226:	d104      	bne.n	21232 <lte_handler+0x26>
			k_work_submit_to_queue(&application_work_q,
   21228:	4839      	ldr	r0, [pc, #228]	; (21310 <lte_handler+0x104>)
   2122a:	f7ff ffdb 	bl	211e4 <k_work_submit_to_queue.constprop.14>
			evt->cell.id, evt->cell.tac);
		break;
	default:
		break;
	}
}
   2122e:	b014      	add	sp, #80	; 0x50
   21230:	bd10      	pop	{r4, pc}
		} else if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   21232:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   21236:	2b01      	cmp	r3, #1
   21238:	d1f9      	bne.n	2122e <lte_handler+0x22>
			LOG_INF("Network registration status: %s",
   2123a:	2303      	movs	r3, #3
   2123c:	f04f 0000 	mov.w	r0, #0
   21240:	4a34      	ldr	r2, [pc, #208]	; (21314 <lte_handler+0x108>)
   21242:	f363 0007 	bfi	r0, r3, #0, #8
   21246:	4b34      	ldr	r3, [pc, #208]	; (21318 <lte_handler+0x10c>)
   21248:	1a9b      	subs	r3, r3, r2
   2124a:	08db      	lsrs	r3, r3, #3
   2124c:	f363 108f 	bfi	r0, r3, #6, #10
   21250:	4a32      	ldr	r2, [pc, #200]	; (2131c <lte_handler+0x110>)
   21252:	4b33      	ldr	r3, [pc, #204]	; (21320 <lte_handler+0x114>)
   21254:	2901      	cmp	r1, #1
   21256:	bf18      	it	ne
   21258:	461a      	movne	r2, r3
   2125a:	4932      	ldr	r1, [pc, #200]	; (21324 <lte_handler+0x118>)
		LOG_INF("RRC mode: %s",
   2125c:	f023 fa63 	bl	44726 <log_string_sync>
   21260:	e7e5      	b.n	2122e <lte_handler+0x22>
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   21262:	2303      	movs	r3, #3
   21264:	f04f 0000 	mov.w	r0, #0
   21268:	4a2a      	ldr	r2, [pc, #168]	; (21314 <lte_handler+0x108>)
   2126a:	f363 0007 	bfi	r0, r3, #0, #8
   2126e:	4b2a      	ldr	r3, [pc, #168]	; (21318 <lte_handler+0x10c>)
   21270:	492d      	ldr	r1, [pc, #180]	; (21328 <lte_handler+0x11c>)
   21272:	1a9b      	subs	r3, r3, r2
   21274:	08db      	lsrs	r3, r3, #3
   21276:	f363 108f 	bfi	r0, r3, #6, #10
   2127a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   2127e:	f023 fa52 	bl	44726 <log_string_sync>
}
   21282:	e7d4      	b.n	2122e <lte_handler+0x22>
		len = snprintf(log_buf, sizeof(log_buf),
   21284:	6880      	ldr	r0, [r0, #8]
   21286:	f7fb fa3f 	bl	1c708 <__aeabi_f2d>
   2128a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2128e:	6860      	ldr	r0, [r4, #4]
   21290:	f7fb fa3a 	bl	1c708 <__aeabi_f2d>
   21294:	4a25      	ldr	r2, [pc, #148]	; (2132c <lte_handler+0x120>)
   21296:	e9cd 0100 	strd	r0, r1, [sp]
   2129a:	213c      	movs	r1, #60	; 0x3c
   2129c:	a805      	add	r0, sp, #20
   2129e:	f021 fb29 	bl	428f4 <sniprintf>
		if ((len > 0) && (len < sizeof(log_buf))) {
   212a2:	3801      	subs	r0, #1
   212a4:	283a      	cmp	r0, #58	; 0x3a
   212a6:	dcc2      	bgt.n	2122e <lte_handler+0x22>
			LOG_INF("%s", log_strdup(log_buf));
   212a8:	2303      	movs	r3, #3
   212aa:	f04f 0400 	mov.w	r4, #0
   212ae:	4a19      	ldr	r2, [pc, #100]	; (21314 <lte_handler+0x108>)
   212b0:	f363 0407 	bfi	r4, r3, #0, #8
   212b4:	4b18      	ldr	r3, [pc, #96]	; (21318 <lte_handler+0x10c>)
   212b6:	a805      	add	r0, sp, #20
   212b8:	1a9b      	subs	r3, r3, r2
   212ba:	08db      	lsrs	r3, r3, #3
   212bc:	f363 148f 	bfi	r4, r3, #6, #10
   212c0:	f023 fa44 	bl	4474c <log_strdup>
   212c4:	491a      	ldr	r1, [pc, #104]	; (21330 <lte_handler+0x124>)
   212c6:	4602      	mov	r2, r0
   212c8:	4620      	mov	r0, r4
   212ca:	e7c7      	b.n	2125c <lte_handler+0x50>
		LOG_INF("RRC mode: %s",
   212cc:	2303      	movs	r3, #3
   212ce:	f04f 0000 	mov.w	r0, #0
   212d2:	4a10      	ldr	r2, [pc, #64]	; (21314 <lte_handler+0x108>)
   212d4:	f363 0007 	bfi	r0, r3, #0, #8
   212d8:	4b0f      	ldr	r3, [pc, #60]	; (21318 <lte_handler+0x10c>)
   212da:	7921      	ldrb	r1, [r4, #4]
   212dc:	1a9b      	subs	r3, r3, r2
   212de:	08db      	lsrs	r3, r3, #3
   212e0:	f363 108f 	bfi	r0, r3, #6, #10
   212e4:	4a13      	ldr	r2, [pc, #76]	; (21334 <lte_handler+0x128>)
   212e6:	4b14      	ldr	r3, [pc, #80]	; (21338 <lte_handler+0x12c>)
   212e8:	2901      	cmp	r1, #1
   212ea:	bf18      	it	ne
   212ec:	461a      	movne	r2, r3
   212ee:	4913      	ldr	r1, [pc, #76]	; (2133c <lte_handler+0x130>)
   212f0:	e7b4      	b.n	2125c <lte_handler+0x50>
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   212f2:	2303      	movs	r3, #3
   212f4:	f04f 0000 	mov.w	r0, #0
   212f8:	4a06      	ldr	r2, [pc, #24]	; (21314 <lte_handler+0x108>)
   212fa:	f363 0007 	bfi	r0, r3, #0, #8
   212fe:	4b06      	ldr	r3, [pc, #24]	; (21318 <lte_handler+0x10c>)
   21300:	490f      	ldr	r1, [pc, #60]	; (21340 <lte_handler+0x134>)
   21302:	1a9b      	subs	r3, r3, r2
   21304:	08db      	lsrs	r3, r3, #3
   21306:	f363 108f 	bfi	r0, r3, #6, #10
   2130a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2130e:	e7b6      	b.n	2127e <lte_handler+0x72>
   21310:	200249ac 	.word	0x200249ac
   21314:	00049788 	.word	0x00049788
   21318:	00049798 	.word	0x00049798
   2131c:	0004b1d0 	.word	0x0004b1d0
   21320:	0004b1e9 	.word	0x0004b1e9
   21324:	0004b20c 	.word	0x0004b20c
   21328:	0004b22c 	.word	0x0004b22c
   2132c:	0004b25b 	.word	0x0004b25b
   21330:	00051c52 	.word	0x00051c52
   21334:	0004b1fd 	.word	0x0004b1fd
   21338:	0004b207 	.word	0x0004b207
   2133c:	0004b28a 	.word	0x0004b28a
   21340:	0004b297 	.word	0x0004b297

00021344 <motion_handler>:
{
   21344:	b084      	sub	sp, #16
   21346:	b430      	push	{r4, r5}
   21348:	ac02      	add	r4, sp, #8
   2134a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (motion_data.orientation != last_motion_data.orientation) {
   2134e:	4c0b      	ldr	r4, [pc, #44]	; (2137c <motion_handler+0x38>)
   21350:	f89d 2008 	ldrb.w	r2, [sp, #8]
   21354:	7823      	ldrb	r3, [r4, #0]
   21356:	429a      	cmp	r2, r3
   21358:	d00d      	beq.n	21376 <motion_handler+0x32>
		last_motion_data = motion_data;
   2135a:	ad02      	add	r5, sp, #8
   2135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21364:	e895 0003 	ldmia.w	r5, {r0, r1}
   21368:	e884 0003 	stmia.w	r4, {r0, r1}
}
   2136c:	bc30      	pop	{r4, r5}
		k_work_submit_to_queue(&application_work_q,
   2136e:	4804      	ldr	r0, [pc, #16]	; (21380 <motion_handler+0x3c>)
}
   21370:	b004      	add	sp, #16
		k_work_submit_to_queue(&application_work_q,
   21372:	f7ff bf37 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
}
   21376:	bc30      	pop	{r4, r5}
   21378:	b004      	add	sp, #16
   2137a:	4770      	bx	lr
   2137c:	20021010 	.word	0x20021010
   21380:	200249a0 	.word	0x200249a0

00021384 <gps_handler>:
{
   21384:	b5f0      	push	{r4, r5, r6, r7, lr}
   21386:	460c      	mov	r4, r1
   21388:	b08b      	sub	sp, #44	; 0x2c
	gps_last_active_time = k_uptime_get();
   2138a:	f022 fde1 	bl	43f50 <k_uptime_get>
	switch (evt->type) {
   2138e:	7823      	ldrb	r3, [r4, #0]
   21390:	2b0a      	cmp	r3, #10
   21392:	d825      	bhi.n	213e0 <gps_handler+0x5c>
   21394:	e8df f013 	tbh	[pc, r3, lsl #1]
   21398:	0026000b 	.word	0x0026000b
   2139c:	0024003b 	.word	0x0024003b
   213a0:	0024005c 	.word	0x0024005c
   213a4:	00de0086 	.word	0x00de0086
   213a8:	00fa00ed 	.word	0x00fa00ed
   213ac:	0117      	.short	0x0117
		LOG_INF("GPS_EVT_SEARCH_STARTED");
   213ae:	2303      	movs	r3, #3
   213b0:	f04f 0000 	mov.w	r0, #0
   213b4:	4a8b      	ldr	r2, [pc, #556]	; (215e4 <gps_handler+0x260>)
   213b6:	f363 0007 	bfi	r0, r3, #0, #8
   213ba:	4b8b      	ldr	r3, [pc, #556]	; (215e8 <gps_handler+0x264>)
   213bc:	498b      	ldr	r1, [pc, #556]	; (215ec <gps_handler+0x268>)
   213be:	1a9b      	subs	r3, r3, r2
   213c0:	08db      	lsrs	r3, r3, #3
   213c2:	f363 108f 	bfi	r0, r3, #6, #10
   213c6:	f023 f9ae 	bl	44726 <log_string_sync>
		gps_control_set_active(true);
   213ca:	2001      	movs	r0, #1
   213cc:	f002 f9b6 	bl	2373c <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   213d0:	2008      	movs	r0, #8
   213d2:	f001 fb01 	bl	229d8 <ui_led_set_pattern>
		gps_last_search_start_time = k_uptime_get();
   213d6:	f022 fdbb 	bl	43f50 <k_uptime_get>
   213da:	4b85      	ldr	r3, [pc, #532]	; (215f0 <gps_handler+0x26c>)
   213dc:	e9c3 0100 	strd	r0, r1, [r3]
}
   213e0:	b00b      	add	sp, #44	; 0x2c
   213e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
   213e4:	2303      	movs	r3, #3
   213e6:	f04f 0000 	mov.w	r0, #0
   213ea:	4a7e      	ldr	r2, [pc, #504]	; (215e4 <gps_handler+0x260>)
   213ec:	f363 0007 	bfi	r0, r3, #0, #8
   213f0:	4b7d      	ldr	r3, [pc, #500]	; (215e8 <gps_handler+0x264>)
   213f2:	4980      	ldr	r1, [pc, #512]	; (215f4 <gps_handler+0x270>)
   213f4:	1a9b      	subs	r3, r3, r2
   213f6:	08db      	lsrs	r3, r3, #3
   213f8:	f363 108f 	bfi	r0, r3, #6, #10
   213fc:	f023 f993 	bl	44726 <log_string_sync>
		gps_control_set_active(false);
   21400:	2000      	movs	r0, #0
   21402:	f002 f99b 	bl	2373c <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   21406:	2008      	movs	r0, #8
   21408:	f001 fae6 	bl	229d8 <ui_led_set_pattern>
		break;
   2140c:	e7e8      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
   2140e:	2303      	movs	r3, #3
   21410:	f04f 0000 	mov.w	r0, #0
   21414:	4c74      	ldr	r4, [pc, #464]	; (215e8 <gps_handler+0x264>)
   21416:	f363 0007 	bfi	r0, r3, #0, #8
   2141a:	4b72      	ldr	r3, [pc, #456]	; (215e4 <gps_handler+0x260>)
   2141c:	4976      	ldr	r1, [pc, #472]	; (215f8 <gps_handler+0x274>)
   2141e:	1ae4      	subs	r4, r4, r3
   21420:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21424:	f364 108f 	bfi	r0, r4, #6, #10
   21428:	f023 f97d 	bl	44726 <log_string_sync>
		gps_control_set_active(false);
   2142c:	2000      	movs	r0, #0
   2142e:	f002 f985 	bl	2373c <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
   21432:	f04f 0500 	mov.w	r5, #0
   21436:	2303      	movs	r3, #3
   21438:	f363 0507 	bfi	r5, r3, #0, #8
   2143c:	f002 face 	bl	239dc <gps_control_get_gps_reporting_interval>
   21440:	f364 158f 	bfi	r5, r4, #6, #10
   21444:	4602      	mov	r2, r0
   21446:	496d      	ldr	r1, [pc, #436]	; (215fc <gps_handler+0x278>)
   21448:	4628      	mov	r0, r5
   2144a:	f023 f96c 	bl	44726 <log_string_sync>
   2144e:	e7c7      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_PVT_FIX");
   21450:	2303      	movs	r3, #3
   21452:	f04f 0000 	mov.w	r0, #0
   21456:	4a63      	ldr	r2, [pc, #396]	; (215e4 <gps_handler+0x260>)
   21458:	f363 0007 	bfi	r0, r3, #0, #8
   2145c:	4b62      	ldr	r3, [pc, #392]	; (215e8 <gps_handler+0x264>)
   2145e:	4968      	ldr	r1, [pc, #416]	; (21600 <gps_handler+0x27c>)
   21460:	1a9b      	subs	r3, r3, r2
   21462:	08db      	lsrs	r3, r3, #3
   21464:	f363 108f 	bfi	r0, r3, #6, #10
   21468:	f023 f95d 	bl	44726 <log_string_sync>
	struct tm gps_time = {
   2146c:	2300      	movs	r3, #0
   2146e:	e9cd 3307 	strd	r3, r3, [sp, #28]
   21472:	9309      	str	r3, [sp, #36]	; 0x24
		.tm_sec = gps_data->datetime.seconds,
   21474:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	date_time_set(&gps_time);
   21478:	a801      	add	r0, sp, #4
		.tm_sec = gps_data->datetime.seconds,
   2147a:	9301      	str	r3, [sp, #4]
		.tm_min = gps_data->datetime.minute,
   2147c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   21480:	9302      	str	r3, [sp, #8]
		.tm_hour = gps_data->datetime.hour,
   21482:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   21486:	9303      	str	r3, [sp, #12]
		.tm_mday = gps_data->datetime.day,
   21488:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   2148c:	9304      	str	r3, [sp, #16]
		.tm_mon = gps_data->datetime.month - 1,
   2148e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   21492:	3b01      	subs	r3, #1
	struct tm gps_time = {
   21494:	9305      	str	r3, [sp, #20]
		.tm_year = gps_data->datetime.year - 1900,
   21496:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   21498:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
	struct tm gps_time = {
   2149c:	9306      	str	r3, [sp, #24]
	date_time_set(&gps_time);
   2149e:	f00d fae7 	bl	2ea70 <date_time_set>
   214a2:	e79d      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("Position fix with NMEA data");
   214a4:	2303      	movs	r3, #3
   214a6:	f04f 0000 	mov.w	r0, #0
   214aa:	4d4f      	ldr	r5, [pc, #316]	; (215e8 <gps_handler+0x264>)
   214ac:	f363 0007 	bfi	r0, r3, #0, #8
   214b0:	4b4c      	ldr	r3, [pc, #304]	; (215e4 <gps_handler+0x260>)
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   214b2:	4e54      	ldr	r6, [pc, #336]	; (21604 <gps_handler+0x280>)
		LOG_INF("Position fix with NMEA data");
   214b4:	1aed      	subs	r5, r5, r3
   214b6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   214ba:	f365 108f 	bfi	r0, r5, #6, #10
   214be:	4952      	ldr	r1, [pc, #328]	; (21608 <gps_handler+0x284>)
   214c0:	f023 f931 	bl	44726 <log_string_sync>
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   214c4:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
   214c8:	f104 0108 	add.w	r1, r4, #8
   214cc:	2354      	movs	r3, #84	; 0x54
   214ce:	4630      	mov	r0, r6
   214d0:	f026 fe67 	bl	481a2 <__memcpy_chk>
		gps_data.len = evt->nmea.len;
   214d4:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
		gps_cloud_data.data.buf = gps_data.buf;
   214d8:	4c4c      	ldr	r4, [pc, #304]	; (2160c <gps_handler+0x288>)
		gps_data.len = evt->nmea.len;
   214da:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		gps_cloud_data.data.len = gps_data.len;
   214de:	e9c4 6301 	strd	r6, r3, [r4, #4]
		gps_cloud_data.ts = k_uptime_get();
   214e2:	f022 fd35 	bl	43f50 <k_uptime_get>
		gps_cloud_data.tag += 1;
   214e6:	68e3      	ldr	r3, [r4, #12]
		gps_cloud_data.ts = k_uptime_get();
   214e8:	e9c4 0104 	strd	r0, r1, [r4, #16]
		if (gps_cloud_data.tag == 0) {
   214ec:	3301      	adds	r3, #1
			gps_cloud_data.tag = 0x1;
   214ee:	bf08      	it	eq
   214f0:	2301      	moveq	r3, #1
   214f2:	60e3      	str	r3, [r4, #12]
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   214f4:	f022 fd2c 	bl	43f50 <k_uptime_get>
   214f8:	4b3d      	ldr	r3, [pc, #244]	; (215f0 <gps_handler+0x26c>)
   214fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   214fe:	e9d3 4600 	ldrd	r4, r6, [r3]
   21502:	1b00      	subs	r0, r0, r4
   21504:	eb61 0106 	sbc.w	r1, r1, r6
   21508:	2300      	movs	r3, #0
   2150a:	f7fb fc87 	bl	1ce1c <__aeabi_ldivmod>
   2150e:	4606      	mov	r6, r0
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21510:	2008      	movs	r0, #8
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   21512:	460f      	mov	r7, r1
		ui_led_set_pattern(UI_LED_GPS_FIX);
   21514:	f001 fa60 	bl	229d8 <ui_led_set_pattern>
		gps_control_set_active(false);
   21518:	2000      	movs	r0, #0
   2151a:	f002 f90f 	bl	2373c <gps_control_set_active>
		LOG_INF("GPS will be started in %lld seconds",
   2151e:	f04f 0400 	mov.w	r4, #0
   21522:	2303      	movs	r3, #3
   21524:	f363 0407 	bfi	r4, r3, #0, #8
   21528:	f002 fa58 	bl	239dc <gps_control_get_gps_reporting_interval>
   2152c:	17c1      	asrs	r1, r0, #31
   2152e:	f510 72b4 	adds.w	r2, r0, #360	; 0x168
   21532:	f141 0300 	adc.w	r3, r1, #0
   21536:	f365 148f 	bfi	r4, r5, #6, #10
   2153a:	1b92      	subs	r2, r2, r6
   2153c:	eb63 0307 	sbc.w	r3, r3, r7
   21540:	4933      	ldr	r1, [pc, #204]	; (21610 <gps_handler+0x28c>)
   21542:	4620      	mov	r0, r4
   21544:	f023 f8ef 	bl	44726 <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   21548:	4832      	ldr	r0, [pc, #200]	; (21614 <gps_handler+0x290>)
   2154a:	f7ff fe4b 	bl	211e4 <k_work_submit_to_queue.constprop.14>
		env_sensors_poll();
   2154e:	f002 fae5 	bl	23b1c <env_sensors_poll>
		break;
   21552:	e745      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
   21554:	2303      	movs	r3, #3
   21556:	f04f 0000 	mov.w	r0, #0
   2155a:	4a22      	ldr	r2, [pc, #136]	; (215e4 <gps_handler+0x260>)
   2155c:	f363 0007 	bfi	r0, r3, #0, #8
   21560:	4b21      	ldr	r3, [pc, #132]	; (215e8 <gps_handler+0x264>)
   21562:	492d      	ldr	r1, [pc, #180]	; (21618 <gps_handler+0x294>)
   21564:	1a9b      	subs	r3, r3, r2
   21566:	08db      	lsrs	r3, r3, #3
   21568:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
   2156c:	f023 f8db 	bl	44726 <log_string_sync>
   21570:	e749      	b.n	21406 <gps_handler+0x82>
   21572:	2303      	movs	r3, #3
   21574:	f04f 0000 	mov.w	r0, #0
   21578:	4a1a      	ldr	r2, [pc, #104]	; (215e4 <gps_handler+0x260>)
   2157a:	f363 0007 	bfi	r0, r3, #0, #8
   2157e:	4b1a      	ldr	r3, [pc, #104]	; (215e8 <gps_handler+0x264>)
   21580:	4926      	ldr	r1, [pc, #152]	; (2161c <gps_handler+0x298>)
   21582:	1a9b      	subs	r3, r3, r2
   21584:	08db      	lsrs	r3, r3, #3
   21586:	f363 108f 	bfi	r0, r3, #6, #10
   2158a:	e7ef      	b.n	2156c <gps_handler+0x1e8>
		LOG_INF("GPS_EVT_AGPS_DATA_NEEDED");
   2158c:	2303      	movs	r3, #3
   2158e:	f04f 0000 	mov.w	r0, #0
   21592:	4a14      	ldr	r2, [pc, #80]	; (215e4 <gps_handler+0x260>)
   21594:	f363 0007 	bfi	r0, r3, #0, #8
   21598:	4b13      	ldr	r3, [pc, #76]	; (215e8 <gps_handler+0x264>)
   2159a:	4921      	ldr	r1, [pc, #132]	; (21620 <gps_handler+0x29c>)
   2159c:	1a9b      	subs	r3, r3, r2
   2159e:	08db      	lsrs	r3, r3, #3
   215a0:	f363 108f 	bfi	r0, r3, #6, #10
   215a4:	f023 f8bf 	bl	44726 <log_string_sync>
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215a8:	f854 0f08 	ldr.w	r0, [r4, #8]!
   215ac:	4b1d      	ldr	r3, [pc, #116]	; (21624 <gps_handler+0x2a0>)
   215ae:	6861      	ldr	r1, [r4, #4]
		k_delayed_work_submit_to_queue(&application_work_q,
   215b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215b4:	c303      	stmia	r3!, {r0, r1}
   215b6:	68a0      	ldr	r0, [r4, #8]
		k_delayed_work_submit_to_queue(&application_work_q,
   215b8:	491b      	ldr	r1, [pc, #108]	; (21628 <gps_handler+0x2a4>)
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   215ba:	6018      	str	r0, [r3, #0]
		k_delayed_work_submit_to_queue(&application_work_q,
   215bc:	2300      	movs	r3, #0
   215be:	481b      	ldr	r0, [pc, #108]	; (2162c <gps_handler+0x2a8>)
   215c0:	f01f fbe8 	bl	40d94 <k_delayed_work_submit_to_queue>
		break;
   215c4:	e70c      	b.n	213e0 <gps_handler+0x5c>
		LOG_INF("GPS_EVT_ERROR\n");
   215c6:	2303      	movs	r3, #3
   215c8:	f04f 0000 	mov.w	r0, #0
   215cc:	4a05      	ldr	r2, [pc, #20]	; (215e4 <gps_handler+0x260>)
   215ce:	f363 0007 	bfi	r0, r3, #0, #8
   215d2:	4b05      	ldr	r3, [pc, #20]	; (215e8 <gps_handler+0x264>)
   215d4:	4916      	ldr	r1, [pc, #88]	; (21630 <gps_handler+0x2ac>)
   215d6:	1a9b      	subs	r3, r3, r2
   215d8:	08db      	lsrs	r3, r3, #3
   215da:	f363 108f 	bfi	r0, r3, #6, #10
   215de:	f023 f8a2 	bl	44726 <log_string_sync>
}
   215e2:	e6fd      	b.n	213e0 <gps_handler+0x5c>
   215e4:	00049788 	.word	0x00049788
   215e8:	00049798 	.word	0x00049798
   215ec:	0004b06f 	.word	0x0004b06f
   215f0:	20021008 	.word	0x20021008
   215f4:	0004b086 	.word	0x0004b086
   215f8:	0004b09d 	.word	0x0004b09d
   215fc:	0004b0b4 	.word	0x0004b0b4
   21600:	0004b0de 	.word	0x0004b0de
   21604:	2002a9c6 	.word	0x2002a9c6
   21608:	0004b0ee 	.word	0x0004b0ee
   2160c:	20020000 	.word	0x20020000
   21610:	0004b10a 	.word	0x0004b10a
   21614:	200249bc 	.word	0x200249bc
   21618:	0004b12e 	.word	0x0004b12e
   2161c:	0004b148 	.word	0x0004b148
   21620:	0004b164 	.word	0x0004b164
   21624:	20024978 	.word	0x20024978
   21628:	20021988 	.word	0x20021988
   2162c:	20020e60 	.word	0x20020e60
   21630:	0004b17d 	.word	0x0004b17d

00021634 <date_time_event_handler>:
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

static void date_time_event_handler(const struct date_time_evt *evt)
{
   21634:	b508      	push	{r3, lr}
	switch (evt->type) {
   21636:	7803      	ldrb	r3, [r0, #0]
   21638:	2b03      	cmp	r3, #3
   2163a:	d811      	bhi.n	21660 <date_time_event_handler+0x2c>
   2163c:	e8df f003 	tbb	[pc, r3]
   21640:	2f221502 	.word	0x2f221502
	case DATE_TIME_OBTAINED_MODEM:
		LOG_INF("DATE_TIME_OBTAINED_MODEM");
   21644:	2303      	movs	r3, #3
   21646:	f04f 0000 	mov.w	r0, #0
   2164a:	4a1b      	ldr	r2, [pc, #108]	; (216b8 <date_time_event_handler+0x84>)
   2164c:	f363 0007 	bfi	r0, r3, #0, #8
   21650:	4b1a      	ldr	r3, [pc, #104]	; (216bc <date_time_event_handler+0x88>)
   21652:	491b      	ldr	r1, [pc, #108]	; (216c0 <date_time_event_handler+0x8c>)
   21654:	1a9b      	subs	r3, r3, r2
   21656:	08db      	lsrs	r3, r3, #3
   21658:	f363 108f 	bfi	r0, r3, #6, #10
		break;
	case DATE_TIME_OBTAINED_EXT:
		LOG_INF("DATE_TIME_OBTAINED_EXT");
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   2165c:	f023 f863 	bl	44726 <log_string_sync>

	/* Do not depend on obtained time, continue upon any event from the
	 * date time library.
	 */
	k_sem_give(&date_time_obtained);
}
   21660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_impl_k_sem_give(sem);
   21664:	4817      	ldr	r0, [pc, #92]	; (216c4 <date_time_event_handler+0x90>)
   21666:	f01f b929 	b.w	408bc <z_impl_k_sem_give>
		LOG_INF("DATE_TIME_OBTAINED_NTP");
   2166a:	2303      	movs	r3, #3
   2166c:	f04f 0000 	mov.w	r0, #0
   21670:	4a11      	ldr	r2, [pc, #68]	; (216b8 <date_time_event_handler+0x84>)
   21672:	f363 0007 	bfi	r0, r3, #0, #8
   21676:	4b11      	ldr	r3, [pc, #68]	; (216bc <date_time_event_handler+0x88>)
   21678:	4913      	ldr	r1, [pc, #76]	; (216c8 <date_time_event_handler+0x94>)
   2167a:	1a9b      	subs	r3, r3, r2
   2167c:	08db      	lsrs	r3, r3, #3
   2167e:	f363 108f 	bfi	r0, r3, #6, #10
   21682:	e7eb      	b.n	2165c <date_time_event_handler+0x28>
		LOG_INF("DATE_TIME_OBTAINED_EXT");
   21684:	2303      	movs	r3, #3
   21686:	f04f 0000 	mov.w	r0, #0
   2168a:	4a0b      	ldr	r2, [pc, #44]	; (216b8 <date_time_event_handler+0x84>)
   2168c:	f363 0007 	bfi	r0, r3, #0, #8
   21690:	4b0a      	ldr	r3, [pc, #40]	; (216bc <date_time_event_handler+0x88>)
   21692:	490e      	ldr	r1, [pc, #56]	; (216cc <date_time_event_handler+0x98>)
   21694:	1a9b      	subs	r3, r3, r2
   21696:	08db      	lsrs	r3, r3, #3
   21698:	f363 108f 	bfi	r0, r3, #6, #10
   2169c:	e7de      	b.n	2165c <date_time_event_handler+0x28>
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   2169e:	2303      	movs	r3, #3
   216a0:	f04f 0000 	mov.w	r0, #0
   216a4:	4a04      	ldr	r2, [pc, #16]	; (216b8 <date_time_event_handler+0x84>)
   216a6:	f363 0007 	bfi	r0, r3, #0, #8
   216aa:	4b04      	ldr	r3, [pc, #16]	; (216bc <date_time_event_handler+0x88>)
   216ac:	4908      	ldr	r1, [pc, #32]	; (216d0 <date_time_event_handler+0x9c>)
   216ae:	1a9b      	subs	r3, r3, r2
   216b0:	08db      	lsrs	r3, r3, #3
   216b2:	f363 108f 	bfi	r0, r3, #6, #10
   216b6:	e7d1      	b.n	2165c <date_time_event_handler+0x28>
   216b8:	00049788 	.word	0x00049788
   216bc:	00049798 	.word	0x00049798
   216c0:	0004afc1 	.word	0x0004afc1
   216c4:	20020d44 	.word	0x20020d44
   216c8:	0004afda 	.word	0x0004afda
   216cc:	0004aff1 	.word	0x0004aff1
   216d0:	0004b008 	.word	0x0004b008

000216d4 <cloud_cmd_handler>:
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   216d4:	6803      	ldr	r3, [r0, #0]
{
   216d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   216d8:	4958      	ldr	r1, [pc, #352]	; (2183c <cloud_cmd_handler+0x168>)
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   216da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   216de:	428a      	cmp	r2, r1
   216e0:	d109      	bne.n	216f6 <cloud_cmd_handler+0x22>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   216e2:	f990 0010 	ldrsb.w	r0, [r0, #16]
   216e6:	1e43      	subs	r3, r0, #1
   216e8:	4258      	negs	r0, r3
   216ea:	4158      	adcs	r0, r3
}
   216ec:	b003      	add	sp, #12
   216ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   216f2:	f7ff bbf5 	b.w	20ee0 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   216f6:	4952      	ldr	r1, [pc, #328]	; (21840 <cloud_cmd_handler+0x16c>)
   216f8:	428a      	cmp	r2, r1
   216fa:	d149      	bne.n	21790 <cloud_cmd_handler+0xbc>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   216fc:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   216fe:	2c00      	cmp	r4, #0
   21700:	f000 8099 	beq.w	21836 <cloud_cmd_handler+0x162>
	return z_impl_k_sem_take(sem, timeout);
   21704:	f44f 7224 	mov.w	r2, #656	; 0x290
   21708:	2300      	movs	r3, #0
   2170a:	484e      	ldr	r0, [pc, #312]	; (21844 <cloud_cmd_handler+0x170>)
   2170c:	f01f f91a 	bl	40944 <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   21710:	4605      	mov	r5, r0
   21712:	b198      	cbz	r0, 2173c <cloud_cmd_handler+0x68>
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   21714:	2301      	movs	r3, #1
   21716:	f04f 0000 	mov.w	r0, #0
   2171a:	4a4b      	ldr	r2, [pc, #300]	; (21848 <cloud_cmd_handler+0x174>)
   2171c:	f363 0007 	bfi	r0, r3, #0, #8
   21720:	4b4a      	ldr	r3, [pc, #296]	; (2184c <cloud_cmd_handler+0x178>)
   21722:	494b      	ldr	r1, [pc, #300]	; (21850 <cloud_cmd_handler+0x17c>)
   21724:	1a9b      	subs	r3, r3, r2
   21726:	08db      	lsrs	r3, r3, #3
   21728:	f363 108f 	bfi	r0, r3, #6, #10
   2172c:	f240 3362 	movw	r3, #866	; 0x362
   21730:	4a48      	ldr	r2, [pc, #288]	; (21854 <cloud_cmd_handler+0x180>)
}
   21732:	b003      	add	sp, #12
   21734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   21738:	f022 bff5 	b.w	44726 <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   2173c:	f640 218d 	movw	r1, #2701	; 0xa8d
   21740:	4620      	mov	r0, r4
   21742:	f026 ff3f 	bl	485c4 <strnlen>
   21746:	f640 228d 	movw	r2, #2701	; 0xa8d
   2174a:	4290      	cmp	r0, r2
   2174c:	d11b      	bne.n	21786 <cloud_cmd_handler+0xb2>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   2174e:	2301      	movs	r3, #1
   21750:	f04f 0000 	mov.w	r0, #0
   21754:	4a3c      	ldr	r2, [pc, #240]	; (21848 <cloud_cmd_handler+0x174>)
   21756:	f363 0007 	bfi	r0, r3, #0, #8
   2175a:	4b3c      	ldr	r3, [pc, #240]	; (2184c <cloud_cmd_handler+0x178>)
   2175c:	493e      	ldr	r1, [pc, #248]	; (21858 <cloud_cmd_handler+0x184>)
   2175e:	1a9b      	subs	r3, r3, r2
   21760:	08db      	lsrs	r3, r3, #3
   21762:	f363 108f 	bfi	r0, r3, #6, #10
   21766:	f640 238c 	movw	r3, #2700	; 0xa8c
   2176a:	4a3a      	ldr	r2, [pc, #232]	; (21854 <cloud_cmd_handler+0x180>)
   2176c:	9300      	str	r3, [sp, #0]
   2176e:	f240 336b 	movw	r3, #875	; 0x36b
   21772:	f022 ffd8 	bl	44726 <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   21776:	4b39      	ldr	r3, [pc, #228]	; (2185c <cloud_cmd_handler+0x188>)
   21778:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   2177a:	4839      	ldr	r0, [pc, #228]	; (21860 <cloud_cmd_handler+0x18c>)
}
   2177c:	b003      	add	sp, #12
   2177e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_work_submit_to_queue(&application_work_q,
   21782:	f7ff bd2f 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
		strcpy(modem_at_cmd_buff, at_cmd);
   21786:	4621      	mov	r1, r4
   21788:	4834      	ldr	r0, [pc, #208]	; (2185c <cloud_cmd_handler+0x188>)
   2178a:	f026 feda 	bl	48542 <__strcpy_chk>
   2178e:	e7f4      	b.n	2177a <cloud_cmd_handler+0xa6>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   21790:	4934      	ldr	r1, [pc, #208]	; (21864 <cloud_cmd_handler+0x190>)
   21792:	428a      	cmp	r2, r1
   21794:	d10d      	bne.n	217b2 <cloud_cmd_handler+0xde>
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   21796:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2179a:	f7fb facf 	bl	1cd3c <__aeabi_d2uiz>
   2179e:	b2c2      	uxtb	r2, r0
   217a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
   217a4:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   217a8:	b003      	add	sp, #12
   217aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   217ae:	f022 bbf1 	b.w	43f94 <ui_led_set_color>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   217b2:	4a2d      	ldr	r2, [pc, #180]	; (21868 <cloud_cmd_handler+0x194>)
   217b4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   217b8:	4293      	cmp	r3, r2
   217ba:	d11f      	bne.n	217fc <cloud_cmd_handler+0x128>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   217bc:	7842      	ldrb	r2, [r0, #1]
   217be:	2a0e      	cmp	r2, #14
   217c0:	d039      	beq.n	21836 <cloud_cmd_handler+0x162>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   217c2:	2a07      	cmp	r2, #7
   217c4:	d108      	bne.n	217d8 <cloud_cmd_handler+0x104>
			env_sensors_set_send_interval(
   217c6:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   217ca:	f7fb fab7 	bl	1cd3c <__aeabi_d2uiz>
}
   217ce:	b003      	add	sp, #12
   217d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   217d4:	f002 bb1a 	b.w	23e0c <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   217d8:	b36a      	cbz	r2, 21836 <cloud_cmd_handler+0x162>
			LOG_ERR("Interval command not valid for channel %d",
   217da:	2301      	movs	r3, #1
   217dc:	f04f 0000 	mov.w	r0, #0
   217e0:	4919      	ldr	r1, [pc, #100]	; (21848 <cloud_cmd_handler+0x174>)
   217e2:	f363 0007 	bfi	r0, r3, #0, #8
   217e6:	4b19      	ldr	r3, [pc, #100]	; (2184c <cloud_cmd_handler+0x178>)
   217e8:	1a5b      	subs	r3, r3, r1
   217ea:	08db      	lsrs	r3, r3, #3
   217ec:	491f      	ldr	r1, [pc, #124]	; (2186c <cloud_cmd_handler+0x198>)
   217ee:	f363 108f 	bfi	r0, r3, #6, #10
}
   217f2:	b003      	add	sp, #12
   217f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   217f8:	f022 bf95 	b.w	44726 <log_string_sync>
	} else if ((cmd->group == CLOUD_CMD_GROUP_GET) &&
   217fc:	2b04      	cmp	r3, #4
   217fe:	d11a      	bne.n	21836 <cloud_cmd_handler+0x162>
		if (cmd->channel == CLOUD_CHANNEL_FLIP) {
   21800:	7843      	ldrb	r3, [r0, #1]
   21802:	2b01      	cmp	r3, #1
   21804:	d101      	bne.n	2180a <cloud_cmd_handler+0x136>
			k_work_submit_to_queue(&application_work_q,
   21806:	481a      	ldr	r0, [pc, #104]	; (21870 <cloud_cmd_handler+0x19c>)
   21808:	e7b8      	b.n	2177c <cloud_cmd_handler+0xa8>
		} else if (cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) {
   2180a:	2b0d      	cmp	r3, #13
   2180c:	d101      	bne.n	21812 <cloud_cmd_handler+0x13e>
			k_work_submit_to_queue(&application_work_q,
   2180e:	4819      	ldr	r0, [pc, #100]	; (21874 <cloud_cmd_handler+0x1a0>)
   21810:	e7b4      	b.n	2177c <cloud_cmd_handler+0xa8>
		} else if (cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) {
   21812:	2b0c      	cmp	r3, #12
   21814:	d108      	bne.n	21828 <cloud_cmd_handler+0x154>
			k_delayed_work_submit_to_queue(&application_work_q,
   21816:	2200      	movs	r2, #0
   21818:	2300      	movs	r3, #0
   2181a:	4917      	ldr	r1, [pc, #92]	; (21878 <cloud_cmd_handler+0x1a4>)
   2181c:	4817      	ldr	r0, [pc, #92]	; (2187c <cloud_cmd_handler+0x1a8>)
}
   2181e:	b003      	add	sp, #12
   21820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_delayed_work_submit_to_queue(&application_work_q,
   21824:	f01f bab6 	b.w	40d94 <k_delayed_work_submit_to_queue>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   21828:	2b07      	cmp	r3, #7
   2182a:	d104      	bne.n	21836 <cloud_cmd_handler+0x162>
}
   2182c:	b003      	add	sp, #12
   2182e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_poll();
   21832:	f002 b973 	b.w	23b1c <env_sensors_poll>
}
   21836:	b003      	add	sp, #12
   21838:	bd30      	pop	{r4, r5, pc}
   2183a:	bf00      	nop
   2183c:	00010008 	.word	0x00010008
   21840:	0007140a 	.word	0x0007140a
   21844:	20020d8c 	.word	0x20020d8c
   21848:	00049788 	.word	0x00049788
   2184c:	00049798 	.word	0x00049798
   21850:	0004aaa4 	.word	0x0004aaa4
   21854:	0004aa62 	.word	0x0004aa62
   21858:	0004aac6 	.word	0x0004aac6
   2185c:	2002aa1a 	.word	0x2002aa1a
   21860:	200249c8 	.word	0x200249c8
   21864:	00050508 	.word	0x00050508
   21868:	00040008 	.word	0x00040008
   2186c:	0004aaf4 	.word	0x0004aaf4
   21870:	200249a0 	.word	0x200249a0
   21874:	20024994 	.word	0x20024994
   21878:	20021958 	.word	0x20021958
   2187c:	20020e60 	.word	0x20020e60

00021880 <send_modem_at_cmd_work_fn>:
{
   21880:	b530      	push	{r4, r5, lr}
   21882:	b091      	sub	sp, #68	; 0x44
	struct cloud_channel_data modem_data = {
   21884:	2218      	movs	r2, #24
   21886:	2100      	movs	r1, #0
   21888:	a804      	add	r0, sp, #16
   2188a:	f026 fc9d 	bl	481c8 <memset>
   2188e:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   21890:	2218      	movs	r2, #24
   21892:	2100      	movs	r1, #0
   21894:	a80a      	add	r0, sp, #40	; 0x28
	struct cloud_channel_data modem_data = {
   21896:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   2189a:	f026 fc95 	bl	481c8 <memset>
	size_t len = strlen(modem_at_cmd_buff);
   2189e:	4837      	ldr	r0, [pc, #220]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218a0:	f7fb fce0 	bl	1d264 <strlen>
	if (len == 0) {
   218a4:	4c35      	ldr	r4, [pc, #212]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218a6:	bb90      	cbnz	r0, 2190e <send_modem_at_cmd_work_fn+0x8e>
		state = AT_CMD_ERROR;
   218a8:	2301      	movs	r3, #1
		err = -ENOBUFS;
   218aa:	f06f 0568 	mvn.w	r5, #104	; 0x68
		state = AT_CMD_ERROR;
   218ae:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   218b2:	4832      	ldr	r0, [pc, #200]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218b4:	f7fb fcd6 	bl	1d264 <strlen>
	if (err) {
   218b8:	b39d      	cbz	r5, 21922 <send_modem_at_cmd_work_fn+0xa2>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   218ba:	f89d 300f 	ldrb.w	r3, [sp, #15]
   218be:	4a30      	ldr	r2, [pc, #192]	; (21980 <send_modem_at_cmd_work_fn+0x100>)
   218c0:	9300      	str	r3, [sp, #0]
   218c2:	f640 218d 	movw	r1, #2701	; 0xa8d
   218c6:	462b      	mov	r3, r5
   218c8:	482c      	ldr	r0, [pc, #176]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   218ca:	f021 f813 	bl	428f4 <sniprintf>
	modem_data.data.len = len;
   218ce:	e9cd 4005 	strd	r4, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   218d2:	aa0a      	add	r2, sp, #40	; 0x28
   218d4:	210a      	movs	r1, #10
   218d6:	a804      	add	r0, sp, #16
   218d8:	f001 f9fc 	bl	22cd4 <cloud_encode_data>
	if (err) {
   218dc:	4602      	mov	r2, r0
   218de:	b380      	cbz	r0, 21942 <send_modem_at_cmd_work_fn+0xc2>
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   218e0:	2301      	movs	r3, #1
   218e2:	f04f 0000 	mov.w	r0, #0
   218e6:	4927      	ldr	r1, [pc, #156]	; (21984 <send_modem_at_cmd_work_fn+0x104>)
   218e8:	f363 0007 	bfi	r0, r3, #0, #8
   218ec:	4b26      	ldr	r3, [pc, #152]	; (21988 <send_modem_at_cmd_work_fn+0x108>)
   218ee:	9200      	str	r2, [sp, #0]
   218f0:	1a5b      	subs	r3, r3, r1
   218f2:	08db      	lsrs	r3, r3, #3
   218f4:	f363 108f 	bfi	r0, r3, #6, #10
   218f8:	f240 2367 	movw	r3, #615	; 0x267
   218fc:	4a23      	ldr	r2, [pc, #140]	; (2198c <send_modem_at_cmd_work_fn+0x10c>)
   218fe:	4924      	ldr	r1, [pc, #144]	; (21990 <send_modem_at_cmd_work_fn+0x110>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   21900:	f022 ff11 	bl	44726 <log_string_sync>
	z_impl_k_sem_give(sem);
   21904:	4823      	ldr	r0, [pc, #140]	; (21994 <send_modem_at_cmd_work_fn+0x114>)
   21906:	f01e ffd9 	bl	408bc <z_impl_k_sem_give>
}
   2190a:	b011      	add	sp, #68	; 0x44
   2190c:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   2190e:	f10d 030f 	add.w	r3, sp, #15
   21912:	f640 228d 	movw	r2, #2701	; 0xa8d
   21916:	4621      	mov	r1, r4
   21918:	4620      	mov	r0, r4
   2191a:	f00a ffef 	bl	2c8fc <at_cmd_write>
   2191e:	4605      	mov	r5, r0
   21920:	e7c7      	b.n	218b2 <send_modem_at_cmd_work_fn+0x32>
	} else if (len == 0) {
   21922:	b928      	cbnz	r0, 21930 <send_modem_at_cmd_work_fn+0xb0>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   21924:	491c      	ldr	r1, [pc, #112]	; (21998 <send_modem_at_cmd_work_fn+0x118>)
   21926:	4815      	ldr	r0, [pc, #84]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   21928:	f026 fe03 	bl	48532 <strcpy>
   2192c:	2004      	movs	r0, #4
   2192e:	e7ce      	b.n	218ce <send_modem_at_cmd_work_fn+0x4e>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   21930:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   21934:	d9cb      	bls.n	218ce <send_modem_at_cmd_work_fn+0x4e>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   21936:	4919      	ldr	r1, [pc, #100]	; (2199c <send_modem_at_cmd_work_fn+0x11c>)
   21938:	4810      	ldr	r0, [pc, #64]	; (2197c <send_modem_at_cmd_work_fn+0xfc>)
   2193a:	f026 fdfa 	bl	48532 <strcpy>
   2193e:	2032      	movs	r0, #50	; 0x32
   21940:	e7c5      	b.n	218ce <send_modem_at_cmd_work_fn+0x4e>
		err = cloud_send(cloud_backend, &msg);
   21942:	4b17      	ldr	r3, [pc, #92]	; (219a0 <send_modem_at_cmd_work_fn+0x120>)
   21944:	a90a      	add	r1, sp, #40	; 0x28
   21946:	6818      	ldr	r0, [r3, #0]
   21948:	f022 faee 	bl	43f28 <cloud_send>
   2194c:	4604      	mov	r4, r0
   2194e:	980a      	ldr	r0, [sp, #40]	; 0x28
   21950:	f026 fbdf 	bl	48112 <k_free>
		if (err) {
   21954:	2c00      	cmp	r4, #0
   21956:	d0d5      	beq.n	21904 <send_modem_at_cmd_work_fn+0x84>
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   21958:	2301      	movs	r3, #1
   2195a:	f04f 0000 	mov.w	r0, #0
   2195e:	4a09      	ldr	r2, [pc, #36]	; (21984 <send_modem_at_cmd_work_fn+0x104>)
   21960:	f363 0007 	bfi	r0, r3, #0, #8
   21964:	4b08      	ldr	r3, [pc, #32]	; (21988 <send_modem_at_cmd_work_fn+0x108>)
   21966:	9400      	str	r4, [sp, #0]
   21968:	1a9b      	subs	r3, r3, r2
   2196a:	08db      	lsrs	r3, r3, #3
   2196c:	f363 108f 	bfi	r0, r3, #6, #10
   21970:	4a06      	ldr	r2, [pc, #24]	; (2198c <send_modem_at_cmd_work_fn+0x10c>)
   21972:	f240 236d 	movw	r3, #621	; 0x26d
   21976:	490b      	ldr	r1, [pc, #44]	; (219a4 <send_modem_at_cmd_work_fn+0x124>)
   21978:	e7c2      	b.n	21900 <send_modem_at_cmd_work_fn+0x80>
   2197a:	bf00      	nop
   2197c:	2002aa1a 	.word	0x2002aa1a
   21980:	0004b5e3 	.word	0x0004b5e3
   21984:	00049788 	.word	0x00049788
   21988:	00049798 	.word	0x00049798
   2198c:	0004aa48 	.word	0x0004aa48
   21990:	0004b636 	.word	0x0004b636
   21994:	20020d8c 	.word	0x20020d8c
   21998:	0004b5fe 	.word	0x0004b5fe
   2199c:	0004b603 	.word	0x0004b603
   219a0:	2002498c 	.word	0x2002498c
   219a4:	0004b665 	.word	0x0004b665

000219a8 <error_handler>:
{
   219a8:	b510      	push	{r4, lr}
   219aa:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   219ac:	2100      	movs	r1, #0
   219ae:	4806      	ldr	r0, [pc, #24]	; (219c8 <error_handler+0x20>)
   219b0:	f022 fac3 	bl	43f3a <atomic_set>
	if (err_type == ERROR_CLOUD) {
   219b4:	b90c      	cbnz	r4, 219ba <error_handler+0x12>
		shutdown_modem();
   219b6:	f7ff fa03 	bl	20dc0 <shutdown_modem>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   219ba:	f003 fa39 	bl	24e30 <z_impl_log_panic>
}
   219be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   219c2:	2000      	movs	r0, #0
   219c4:	f004 bd66 	b.w	26494 <sys_reboot>
   219c8:	20024988 	.word	0x20024988

000219cc <k_sys_fatal_error_handler>:
{
   219cc:	b510      	push	{r4, lr}
   219ce:	4604      	mov	r4, r0
   219d0:	f003 fa2e 	bl	24e30 <z_impl_log_panic>
	LOG_ERR("Running main.c error handler");
   219d4:	2301      	movs	r3, #1
   219d6:	f04f 0000 	mov.w	r0, #0
   219da:	4a07      	ldr	r2, [pc, #28]	; (219f8 <k_sys_fatal_error_handler+0x2c>)
   219dc:	f363 0007 	bfi	r0, r3, #0, #8
   219e0:	4b06      	ldr	r3, [pc, #24]	; (219fc <k_sys_fatal_error_handler+0x30>)
   219e2:	4907      	ldr	r1, [pc, #28]	; (21a00 <k_sys_fatal_error_handler+0x34>)
   219e4:	1a9b      	subs	r3, r3, r2
   219e6:	08db      	lsrs	r3, r3, #3
   219e8:	f363 108f 	bfi	r0, r3, #6, #10
   219ec:	f022 fe9b 	bl	44726 <log_string_sync>
	error_handler(ERROR_SYSTEM_FAULT, reason);
   219f0:	4621      	mov	r1, r4
   219f2:	2003      	movs	r0, #3
   219f4:	f7ff ffd8 	bl	219a8 <error_handler>
	CODE_UNREACHABLE;
   219f8:	00049788 	.word	0x00049788
   219fc:	00049798 	.word	0x00049798
   21a00:	0004b18c 	.word	0x0004b18c

00021a04 <env_data_send>:
	struct cloud_msg msg = {
   21a04:	2218      	movs	r2, #24
{
   21a06:	b510      	push	{r4, lr}
   21a08:	b08c      	sub	sp, #48	; 0x30
	struct cloud_msg msg = {
   21a0a:	2100      	movs	r1, #0
   21a0c:	eb0d 0002 	add.w	r0, sp, r2
   21a10:	f026 fbda 	bl	481c8 <memset>
	if (!data_send_enabled()) {
   21a14:	f7ff fa5a 	bl	20ecc <data_send_enabled>
   21a18:	b128      	cbz	r0, 21a26 <env_data_send+0x22>
	if (gps_control_is_active()) {
   21a1a:	f001 fe85 	bl	23728 <gps_control_is_active>
   21a1e:	b120      	cbz	r0, 21a2a <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   21a20:	2001      	movs	r0, #1
   21a22:	f002 fa21 	bl	23e68 <env_sensors_set_backoff_enable>
}
   21a26:	b00c      	add	sp, #48	; 0x30
   21a28:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   21a2a:	f002 fa1d 	bl	23e68 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   21a2e:	4668      	mov	r0, sp
   21a30:	f002 f8de 	bl	23bf0 <env_sensors_get_temperature>
   21a34:	b338      	cbz	r0, 21a86 <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   21a36:	4668      	mov	r0, sp
   21a38:	f002 f934 	bl	23ca4 <env_sensors_get_humidity>
   21a3c:	2800      	cmp	r0, #0
   21a3e:	d04d      	beq.n	21adc <env_data_send+0xd8>
	if (env_sensors_get_pressure(&env_data) == 0) {
   21a40:	4668      	mov	r0, sp
   21a42:	f002 f989 	bl	23d58 <env_sensors_get_pressure>
   21a46:	2800      	cmp	r0, #0
   21a48:	d061      	beq.n	21b0e <env_data_send+0x10a>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   21a4a:	4668      	mov	r0, sp
   21a4c:	f022 fae8 	bl	44020 <env_sensors_get_air_quality>
   21a50:	2800      	cmp	r0, #0
   21a52:	d1e8      	bne.n	21a26 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   21a54:	ed9d 0b02 	vldr	d0, [sp, #8]
   21a58:	200b      	movs	r0, #11
   21a5a:	f001 fdb1 	bl	235c0 <cloud_is_send_allowed>
   21a5e:	2800      	cmp	r0, #0
   21a60:	d0e1      	beq.n	21a26 <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21a62:	a906      	add	r1, sp, #24
   21a64:	4668      	mov	r0, sp
   21a66:	f001 f9df 	bl	22e28 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21a6a:	2800      	cmp	r0, #0
   21a6c:	d1db      	bne.n	21a26 <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   21a6e:	4b34      	ldr	r3, [pc, #208]	; (21b40 <env_data_send+0x13c>)
   21a70:	a906      	add	r1, sp, #24
   21a72:	6818      	ldr	r0, [r3, #0]
   21a74:	f022 fa58 	bl	43f28 <cloud_send>
   21a78:	4604      	mov	r4, r0
   21a7a:	9806      	ldr	r0, [sp, #24]
   21a7c:	f026 fb49 	bl	48112 <k_free>
			if (err) {
   21a80:	2c00      	cmp	r4, #0
   21a82:	d0d0      	beq.n	21a26 <env_data_send+0x22>
   21a84:	e017      	b.n	21ab6 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   21a86:	ed9d 0b02 	vldr	d0, [sp, #8]
   21a8a:	2008      	movs	r0, #8
   21a8c:	f001 fd98 	bl	235c0 <cloud_is_send_allowed>
   21a90:	2800      	cmp	r0, #0
   21a92:	d0d0      	beq.n	21a36 <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21a94:	a906      	add	r1, sp, #24
   21a96:	4668      	mov	r0, sp
   21a98:	f001 f9c6 	bl	22e28 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   21a9c:	2800      	cmp	r0, #0
   21a9e:	d1ca      	bne.n	21a36 <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   21aa0:	4b27      	ldr	r3, [pc, #156]	; (21b40 <env_data_send+0x13c>)
   21aa2:	a906      	add	r1, sp, #24
   21aa4:	6818      	ldr	r0, [r3, #0]
   21aa6:	f022 fa3f 	bl	43f28 <cloud_send>
   21aaa:	4604      	mov	r4, r0
   21aac:	9806      	ldr	r0, [sp, #24]
   21aae:	f026 fb30 	bl	48112 <k_free>
			if (err) {
   21ab2:	2c00      	cmp	r4, #0
   21ab4:	d0bf      	beq.n	21a36 <env_data_send+0x32>
	LOG_ERR("sensor_data_send failed: %d", err);
   21ab6:	2301      	movs	r3, #1
   21ab8:	f04f 0000 	mov.w	r0, #0
   21abc:	4a21      	ldr	r2, [pc, #132]	; (21b44 <env_data_send+0x140>)
   21abe:	f363 0007 	bfi	r0, r3, #0, #8
   21ac2:	4b21      	ldr	r3, [pc, #132]	; (21b48 <env_data_send+0x144>)
   21ac4:	4921      	ldr	r1, [pc, #132]	; (21b4c <env_data_send+0x148>)
   21ac6:	1a9b      	subs	r3, r3, r2
   21ac8:	08db      	lsrs	r3, r3, #3
   21aca:	f363 108f 	bfi	r0, r3, #6, #10
   21ace:	4622      	mov	r2, r4
   21ad0:	f022 fe29 	bl	44726 <log_string_sync>
	cloud_error_handler(err);
   21ad4:	4620      	mov	r0, r4
   21ad6:	f022 fa4e 	bl	43f76 <cloud_error_handler>
   21ada:	e7a4      	b.n	21a26 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   21adc:	ed9d 0b02 	vldr	d0, [sp, #8]
   21ae0:	2009      	movs	r0, #9
   21ae2:	f001 fd6d 	bl	235c0 <cloud_is_send_allowed>
   21ae6:	2800      	cmp	r0, #0
   21ae8:	d0aa      	beq.n	21a40 <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21aea:	a906      	add	r1, sp, #24
   21aec:	4668      	mov	r0, sp
   21aee:	f001 f99b 	bl	22e28 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21af2:	2800      	cmp	r0, #0
   21af4:	d1a4      	bne.n	21a40 <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   21af6:	4b12      	ldr	r3, [pc, #72]	; (21b40 <env_data_send+0x13c>)
   21af8:	a906      	add	r1, sp, #24
   21afa:	6818      	ldr	r0, [r3, #0]
   21afc:	f022 fa14 	bl	43f28 <cloud_send>
   21b00:	4604      	mov	r4, r0
   21b02:	9806      	ldr	r0, [sp, #24]
   21b04:	f026 fb05 	bl	48112 <k_free>
			if (err) {
   21b08:	2c00      	cmp	r4, #0
   21b0a:	d099      	beq.n	21a40 <env_data_send+0x3c>
   21b0c:	e7d3      	b.n	21ab6 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   21b0e:	ed9d 0b02 	vldr	d0, [sp, #8]
   21b12:	200a      	movs	r0, #10
   21b14:	f001 fd54 	bl	235c0 <cloud_is_send_allowed>
   21b18:	2800      	cmp	r0, #0
   21b1a:	d096      	beq.n	21a4a <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   21b1c:	a906      	add	r1, sp, #24
   21b1e:	4668      	mov	r0, sp
   21b20:	f001 f982 	bl	22e28 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   21b24:	2800      	cmp	r0, #0
   21b26:	d190      	bne.n	21a4a <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   21b28:	4b05      	ldr	r3, [pc, #20]	; (21b40 <env_data_send+0x13c>)
   21b2a:	a906      	add	r1, sp, #24
   21b2c:	6818      	ldr	r0, [r3, #0]
   21b2e:	f022 f9fb 	bl	43f28 <cloud_send>
   21b32:	4604      	mov	r4, r0
   21b34:	9806      	ldr	r0, [sp, #24]
   21b36:	f026 faec 	bl	48112 <k_free>
			if (err) {
   21b3a:	2c00      	cmp	r4, #0
   21b3c:	d085      	beq.n	21a4a <env_data_send+0x46>
   21b3e:	e7ba      	b.n	21ab6 <env_data_send+0xb2>
   21b40:	2002498c 	.word	0x2002498c
   21b44:	00049788 	.word	0x00049788
   21b48:	00049798 	.word	0x00049798
   21b4c:	0004b053 	.word	0x0004b053

00021b50 <motion_data_send>:
{
   21b50:	b510      	push	{r4, lr}
   21b52:	b086      	sub	sp, #24
	if (!flip_mode_enabled || !data_send_enabled() ||
   21b54:	f7ff f9ba 	bl	20ecc <data_send_enabled>
   21b58:	b340      	cbz	r0, 21bac <motion_data_send+0x5c>
	    gps_control_is_active()) {
   21b5a:	f001 fde5 	bl	23728 <gps_control_is_active>
	if (!flip_mode_enabled || !data_send_enabled() ||
   21b5e:	4601      	mov	r1, r0
   21b60:	bb20      	cbnz	r0, 21bac <motion_data_send+0x5c>
	struct cloud_msg msg = {
   21b62:	2218      	movs	r2, #24
   21b64:	4668      	mov	r0, sp
   21b66:	f026 fb2f 	bl	481c8 <memset>
	if (cloud_encode_motion_data(&last_motion_data, &msg) == 0) {
   21b6a:	4669      	mov	r1, sp
   21b6c:	4810      	ldr	r0, [pc, #64]	; (21bb0 <motion_data_send+0x60>)
   21b6e:	f001 f9b5 	bl	22edc <cloud_encode_motion_data>
   21b72:	b9d8      	cbnz	r0, 21bac <motion_data_send+0x5c>
		err = cloud_send(cloud_backend, &msg);
   21b74:	4b0f      	ldr	r3, [pc, #60]	; (21bb4 <motion_data_send+0x64>)
   21b76:	4669      	mov	r1, sp
   21b78:	6818      	ldr	r0, [r3, #0]
   21b7a:	f022 f9d5 	bl	43f28 <cloud_send>
   21b7e:	4604      	mov	r4, r0
   21b80:	9800      	ldr	r0, [sp, #0]
   21b82:	f026 fac6 	bl	48112 <k_free>
		if (err) {
   21b86:	b18c      	cbz	r4, 21bac <motion_data_send+0x5c>
			LOG_ERR("Transmisison of motion data failed: %d", err);
   21b88:	2301      	movs	r3, #1
   21b8a:	f04f 0000 	mov.w	r0, #0
   21b8e:	4a0a      	ldr	r2, [pc, #40]	; (21bb8 <motion_data_send+0x68>)
   21b90:	f363 0007 	bfi	r0, r3, #0, #8
   21b94:	4b09      	ldr	r3, [pc, #36]	; (21bbc <motion_data_send+0x6c>)
   21b96:	490a      	ldr	r1, [pc, #40]	; (21bc0 <motion_data_send+0x70>)
   21b98:	1a9b      	subs	r3, r3, r2
   21b9a:	08db      	lsrs	r3, r3, #3
   21b9c:	f363 108f 	bfi	r0, r3, #6, #10
   21ba0:	4622      	mov	r2, r4
   21ba2:	f022 fdc0 	bl	44726 <log_string_sync>
			cloud_error_handler(err);
   21ba6:	4620      	mov	r0, r4
   21ba8:	f022 f9e5 	bl	43f76 <cloud_error_handler>
}
   21bac:	b006      	add	sp, #24
   21bae:	bd10      	pop	{r4, pc}
   21bb0:	20021010 	.word	0x20021010
   21bb4:	2002498c 	.word	0x2002498c
   21bb8:	00049788 	.word	0x00049788
   21bbc:	00049798 	.word	0x00049798
   21bc0:	0004b4a7 	.word	0x0004b4a7

00021bc4 <device_status_send>:
{
   21bc4:	b570      	push	{r4, r5, r6, lr}
   21bc6:	b092      	sub	sp, #72	; 0x48
	if (!data_send_enabled() || gps_control_is_active()) {
   21bc8:	f7ff f980 	bl	20ecc <data_send_enabled>
   21bcc:	2800      	cmp	r0, #0
   21bce:	d046      	beq.n	21c5e <device_status_send+0x9a>
   21bd0:	f001 fdaa 	bl	23728 <gps_control_is_active>
   21bd4:	4606      	mov	r6, r0
   21bd6:	2800      	cmp	r0, #0
   21bd8:	d141      	bne.n	21c5e <device_status_send+0x9a>
	ret = modem_info_params_get(&modem_param);
   21bda:	4832      	ldr	r0, [pc, #200]	; (21ca4 <device_status_send+0xe0>)
   21bdc:	f00c fc12 	bl	2e404 <modem_info_params_get>
	if (ret < 0) {
   21be0:	1e02      	subs	r2, r0, #0
   21be2:	da3e      	bge.n	21c62 <device_status_send+0x9e>
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   21be4:	2301      	movs	r3, #1
   21be6:	f04f 0000 	mov.w	r0, #0
   21bea:	492f      	ldr	r1, [pc, #188]	; (21ca8 <device_status_send+0xe4>)
   21bec:	f363 0007 	bfi	r0, r3, #0, #8
   21bf0:	4b2e      	ldr	r3, [pc, #184]	; (21cac <device_status_send+0xe8>)
   21bf2:	1a5b      	subs	r3, r3, r1
   21bf4:	08db      	lsrs	r3, r3, #3
   21bf6:	f363 108f 	bfi	r0, r3, #6, #10
   21bfa:	492d      	ldr	r1, [pc, #180]	; (21cb0 <device_status_send+0xec>)
   21bfc:	f022 fd93 	bl	44726 <log_string_sync>
	const char *const ui[] = {
   21c00:	4d2c      	ldr	r5, [pc, #176]	; (21cb4 <device_status_send+0xf0>)
   21c02:	ac06      	add	r4, sp, #24
   21c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   21c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21c08:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   21c0c:	4b2a      	ldr	r3, [pc, #168]	; (21cb8 <device_status_send+0xf4>)
	const char *const ui[] = {
   21c0e:	e884 0003 	stmia.w	r4, {r0, r1}
	const char *const fota[] = {
   21c12:	9304      	str	r3, [sp, #16]
	struct cloud_msg msg = {
   21c14:	ac0c      	add	r4, sp, #48	; 0x30
	const char *const fota[] = {
   21c16:	4b29      	ldr	r3, [pc, #164]	; (21cbc <device_status_send+0xf8>)
	struct cloud_msg msg = {
   21c18:	2218      	movs	r2, #24
   21c1a:	2100      	movs	r1, #0
   21c1c:	4620      	mov	r0, r4
	const char *const fota[] = {
   21c1e:	9305      	str	r3, [sp, #20]
	struct cloud_msg msg = {
   21c20:	f026 fad2 	bl	481c8 <memset>
   21c24:	2301      	movs	r3, #1
   21c26:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	ret = cloud_encode_device_status_data(modem_ptr,
   21c2a:	2302      	movs	r3, #2
   21c2c:	2206      	movs	r2, #6
   21c2e:	e9cd 3300 	strd	r3, r3, [sp]
   21c32:	9402      	str	r4, [sp, #8]
   21c34:	ab04      	add	r3, sp, #16
   21c36:	a906      	add	r1, sp, #24
   21c38:	4630      	mov	r0, r6
   21c3a:	f001 f99b 	bl	22f74 <cloud_encode_device_status_data>
	if (ret) {
   21c3e:	4602      	mov	r2, r0
   21c40:	b188      	cbz	r0, 21c66 <device_status_send+0xa2>
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21c42:	2301      	movs	r3, #1
   21c44:	f04f 0000 	mov.w	r0, #0
   21c48:	4917      	ldr	r1, [pc, #92]	; (21ca8 <device_status_send+0xe4>)
   21c4a:	f363 0007 	bfi	r0, r3, #0, #8
   21c4e:	4b17      	ldr	r3, [pc, #92]	; (21cac <device_status_send+0xe8>)
   21c50:	1a5b      	subs	r3, r3, r1
   21c52:	08db      	lsrs	r3, r3, #3
   21c54:	f363 108f 	bfi	r0, r3, #6, #10
   21c58:	4919      	ldr	r1, [pc, #100]	; (21cc0 <device_status_send+0xfc>)
   21c5a:	f022 fd64 	bl	44726 <log_string_sync>
}
   21c5e:	b012      	add	sp, #72	; 0x48
   21c60:	bd70      	pop	{r4, r5, r6, pc}
		modem_ptr = &modem_param;
   21c62:	4e10      	ldr	r6, [pc, #64]	; (21ca4 <device_status_send+0xe0>)
   21c64:	e7cc      	b.n	21c00 <device_status_send+0x3c>
		ret = cloud_send(cloud_backend, &msg);
   21c66:	4b17      	ldr	r3, [pc, #92]	; (21cc4 <device_status_send+0x100>)
   21c68:	4621      	mov	r1, r4
   21c6a:	6818      	ldr	r0, [r3, #0]
   21c6c:	f022 f95c 	bl	43f28 <cloud_send>
   21c70:	4604      	mov	r4, r0
   21c72:	980c      	ldr	r0, [sp, #48]	; 0x30
   21c74:	f026 fa4d 	bl	48112 <k_free>
		if (ret) {
   21c78:	2c00      	cmp	r4, #0
   21c7a:	d0f0      	beq.n	21c5e <device_status_send+0x9a>
			LOG_ERR("sensor_data_send failed: %d", ret);
   21c7c:	2301      	movs	r3, #1
   21c7e:	f04f 0000 	mov.w	r0, #0
   21c82:	4a09      	ldr	r2, [pc, #36]	; (21ca8 <device_status_send+0xe4>)
   21c84:	f363 0007 	bfi	r0, r3, #0, #8
   21c88:	4b08      	ldr	r3, [pc, #32]	; (21cac <device_status_send+0xe8>)
   21c8a:	490f      	ldr	r1, [pc, #60]	; (21cc8 <device_status_send+0x104>)
   21c8c:	1a9b      	subs	r3, r3, r2
   21c8e:	08db      	lsrs	r3, r3, #3
   21c90:	f363 108f 	bfi	r0, r3, #6, #10
   21c94:	4622      	mov	r2, r4
   21c96:	f022 fd46 	bl	44726 <log_string_sync>
			cloud_error_handler(ret);
   21c9a:	4620      	mov	r0, r4
   21c9c:	f022 f96b 	bl	43f76 <cloud_error_handler>
   21ca0:	e7dd      	b.n	21c5e <device_status_send+0x9a>
   21ca2:	bf00      	nop
   21ca4:	20021070 	.word	0x20021070
   21ca8:	00049788 	.word	0x00049788
   21cac:	00049798 	.word	0x00049798
   21cb0:	0004b02d 	.word	0x0004b02d
   21cb4:	00049900 	.word	0x00049900
   21cb8:	0004b7b1 	.word	0x0004b7b1
   21cbc:	0004afd4 	.word	0x0004afd4
   21cc0:	0004b68d 	.word	0x0004b68d
   21cc4:	2002498c 	.word	0x2002498c
   21cc8:	0004b053 	.word	0x0004b053

00021ccc <device_config_send>:
{
   21ccc:	b530      	push	{r4, r5, lr}
   21cce:	b087      	sub	sp, #28
	struct cloud_msg msg = {
   21cd0:	2218      	movs	r2, #24
   21cd2:	2100      	movs	r1, #0
   21cd4:	4668      	mov	r0, sp
   21cd6:	f026 fa77 	bl	481c8 <memset>
   21cda:	2301      	movs	r3, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21cdc:	2000      	movs	r0, #0
	struct cloud_msg msg = {
   21cde:	f8ad 300c 	strh.w	r3, [sp, #12]
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21ce2:	f001 fbb5 	bl	23450 <cloud_get_channel_enable_state>
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21ce6:	1c43      	adds	r3, r0, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21ce8:	4604      	mov	r4, r0
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   21cea:	d00a      	beq.n	21d02 <device_config_send+0x36>
	if (gps_control_is_active() && gps_cfg_state == CLOUD_CMD_STATE_FALSE) {
   21cec:	f001 fd1c 	bl	23728 <gps_control_is_active>
   21cf0:	b148      	cbz	r0, 21d06 <device_config_send+0x3a>
   21cf2:	b944      	cbnz	r4, 21d06 <device_config_send+0x3a>
		k_delayed_work_submit_to_queue(&application_work_q,
   21cf4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   21cf8:	2300      	movs	r3, #0
   21cfa:	4922      	ldr	r1, [pc, #136]	; (21d84 <device_config_send+0xb8>)
   21cfc:	4822      	ldr	r0, [pc, #136]	; (21d88 <device_config_send+0xbc>)
   21cfe:	f01f f849 	bl	40d94 <k_delayed_work_submit_to_queue>
}
   21d02:	b007      	add	sp, #28
   21d04:	bd30      	pop	{r4, r5, pc}
	ret = cloud_encode_config_data(&msg);
   21d06:	4668      	mov	r0, sp
   21d08:	f001 fbba 	bl	23480 <cloud_encode_config_data>
	if (ret) {
   21d0c:	4602      	mov	r2, r0
   21d0e:	b198      	cbz	r0, 21d38 <device_config_send+0x6c>
		LOG_ERR("Unable to encode cloud data: %d", ret);
   21d10:	2301      	movs	r3, #1
   21d12:	f04f 0000 	mov.w	r0, #0
   21d16:	491d      	ldr	r1, [pc, #116]	; (21d8c <device_config_send+0xc0>)
   21d18:	f363 0007 	bfi	r0, r3, #0, #8
   21d1c:	4b1c      	ldr	r3, [pc, #112]	; (21d90 <device_config_send+0xc4>)
   21d1e:	1a5b      	subs	r3, r3, r1
   21d20:	08db      	lsrs	r3, r3, #3
   21d22:	f363 108f 	bfi	r0, r3, #6, #10
   21d26:	491b      	ldr	r1, [pc, #108]	; (21d94 <device_config_send+0xc8>)
   21d28:	f022 fcfd 	bl	44726 <log_string_sync>
	if (gps_cfg_state == CLOUD_CMD_STATE_TRUE) {
   21d2c:	2c01      	cmp	r4, #1
   21d2e:	d1e8      	bne.n	21d02 <device_config_send+0x36>
		gps_control_start(0);
   21d30:	2000      	movs	r0, #0
   21d32:	f001 fe17 	bl	23964 <gps_control_start>
   21d36:	e7e4      	b.n	21d02 <device_config_send+0x36>
	} else if (msg.len && msg.buf) {
   21d38:	9b01      	ldr	r3, [sp, #4]
   21d3a:	2b00      	cmp	r3, #0
   21d3c:	d0f6      	beq.n	21d2c <device_config_send+0x60>
   21d3e:	9b00      	ldr	r3, [sp, #0]
   21d40:	2b00      	cmp	r3, #0
   21d42:	d0f3      	beq.n	21d2c <device_config_send+0x60>
		ret = cloud_send(cloud_backend, &msg);
   21d44:	4b14      	ldr	r3, [pc, #80]	; (21d98 <device_config_send+0xcc>)
   21d46:	4669      	mov	r1, sp
   21d48:	6818      	ldr	r0, [r3, #0]
   21d4a:	f022 f8ed 	bl	43f28 <cloud_send>
   21d4e:	4605      	mov	r5, r0
   21d50:	9800      	ldr	r0, [sp, #0]
   21d52:	f026 f9de 	bl	48112 <k_free>
		if (ret) {
   21d56:	2d00      	cmp	r5, #0
   21d58:	d0e8      	beq.n	21d2c <device_config_send+0x60>
			LOG_ERR("%s failed: %d", __func__, ret);
   21d5a:	2301      	movs	r3, #1
   21d5c:	f04f 0000 	mov.w	r0, #0
   21d60:	4a0a      	ldr	r2, [pc, #40]	; (21d8c <device_config_send+0xc0>)
   21d62:	f363 0007 	bfi	r0, r3, #0, #8
   21d66:	4b0a      	ldr	r3, [pc, #40]	; (21d90 <device_config_send+0xc4>)
   21d68:	490c      	ldr	r1, [pc, #48]	; (21d9c <device_config_send+0xd0>)
   21d6a:	1a9b      	subs	r3, r3, r2
   21d6c:	08db      	lsrs	r3, r3, #3
   21d6e:	f363 108f 	bfi	r0, r3, #6, #10
   21d72:	4a0b      	ldr	r2, [pc, #44]	; (21da0 <device_config_send+0xd4>)
   21d74:	462b      	mov	r3, r5
   21d76:	f022 fcd6 	bl	44726 <log_string_sync>
			cloud_error_handler(ret);
   21d7a:	4628      	mov	r0, r5
   21d7c:	f022 f8fb 	bl	43f76 <cloud_error_handler>
   21d80:	e7d4      	b.n	21d2c <device_config_send+0x60>
   21d82:	bf00      	nop
   21d84:	20020fd8 	.word	0x20020fd8
   21d88:	20020e60 	.word	0x20020e60
   21d8c:	00049788 	.word	0x00049788
   21d90:	00049798 	.word	0x00049798
   21d94:	0004b68d 	.word	0x0004b68d
   21d98:	2002498c 	.word	0x2002498c
   21d9c:	0004b01f 	.word	0x0004b01f
   21da0:	0004aa80 	.word	0x0004aa80

00021da4 <cloud_connect_error_handler>:
{
   21da4:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   21da6:	4605      	mov	r5, r0
   21da8:	2800      	cmp	r0, #0
   21daa:	f000 809c 	beq.w	21ee6 <cloud_connect_error_handler+0x142>
	LOG_ERR("Failed to connect to cloud, error %d", err);
   21dae:	2301      	movs	r3, #1
   21db0:	f04f 0000 	mov.w	r0, #0
   21db4:	4c4c      	ldr	r4, [pc, #304]	; (21ee8 <cloud_connect_error_handler+0x144>)
   21db6:	f363 0007 	bfi	r0, r3, #0, #8
   21dba:	4b4c      	ldr	r3, [pc, #304]	; (21eec <cloud_connect_error_handler+0x148>)
   21dbc:	462a      	mov	r2, r5
   21dbe:	1ae4      	subs	r4, r4, r3
   21dc0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21dc4:	f364 108f 	bfi	r0, r4, #6, #10
   21dc8:	4949      	ldr	r1, [pc, #292]	; (21ef0 <cloud_connect_error_handler+0x14c>)
	switch (err) {
   21dca:	350b      	adds	r5, #11
	LOG_ERR("Failed to connect to cloud, error %d", err);
   21dcc:	f022 fcab 	bl	44726 <log_string_sync>
	switch (err) {
   21dd0:	2d0a      	cmp	r5, #10
   21dd2:	d87f      	bhi.n	21ed4 <cloud_connect_error_handler+0x130>
   21dd4:	e8df f005 	tbb	[pc, r5]
   21dd8:	5a636c75 	.word	0x5a636c75
   21ddc:	273b7e51 	.word	0x273b7e51
   21de0:	7e1c      	.short	0x7e1c
   21de2:	06          	.byte	0x06
   21de3:	00          	.byte	0x00
		LOG_ERR("Cloud back-end has not been initialized");
   21de4:	f04f 0000 	mov.w	r0, #0
   21de8:	2301      	movs	r3, #1
   21dea:	f363 0007 	bfi	r0, r3, #0, #8
   21dee:	f364 108f 	bfi	r0, r4, #6, #10
   21df2:	4940      	ldr	r1, [pc, #256]	; (21ef4 <cloud_connect_error_handler+0x150>)
   21df4:	f022 fc97 	bl	44726 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   21df8:	f44f 6010 	mov.w	r0, #2304	; 0x900
   21dfc:	f000 fdec 	bl	229d8 <ui_led_set_pattern>
	shutdown_modem();
   21e00:	f7fe ffde 	bl	20dc0 <shutdown_modem>
	return z_impl_k_current_get();
   21e04:	f01e fd54 	bl	408b0 <z_impl_k_current_get>
}
   21e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   21e0c:	f01e b8ae 	b.w	3ff6c <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   21e10:	f04f 0000 	mov.w	r0, #0
   21e14:	2301      	movs	r3, #1
   21e16:	4938      	ldr	r1, [pc, #224]	; (21ef8 <cloud_connect_error_handler+0x154>)
   21e18:	f363 0007 	bfi	r0, r3, #0, #8
   21e1c:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Unhandled connect error");
   21e20:	f022 fc81 	bl	44726 <log_string_sync>
	if (reboot) {
   21e24:	e013      	b.n	21e4e <cloud_connect_error_handler+0xaa>
		if (cloud_backend && cloud_backend->config &&
   21e26:	4b35      	ldr	r3, [pc, #212]	; (21efc <cloud_connect_error_handler+0x158>)
   21e28:	681b      	ldr	r3, [r3, #0]
   21e2a:	b323      	cbz	r3, 21e76 <cloud_connect_error_handler+0xd2>
   21e2c:	685b      	ldr	r3, [r3, #4]
   21e2e:	b313      	cbz	r3, 21e76 <cloud_connect_error_handler+0xd2>
		    cloud_backend->config->name) {
   21e30:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   21e32:	4b33      	ldr	r3, [pc, #204]	; (21f00 <cloud_connect_error_handler+0x15c>)
   21e34:	2a00      	cmp	r2, #0
   21e36:	bf08      	it	eq
   21e38:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   21e3a:	f04f 0000 	mov.w	r0, #0
   21e3e:	2301      	movs	r3, #1
   21e40:	f363 0007 	bfi	r0, r3, #0, #8
   21e44:	f364 108f 	bfi	r0, r4, #6, #10
   21e48:	492e      	ldr	r1, [pc, #184]	; (21f04 <cloud_connect_error_handler+0x160>)
   21e4a:	f022 fc6c 	bl	44726 <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   21e4e:	2301      	movs	r3, #1
   21e50:	f04f 0000 	mov.w	r0, #0
   21e54:	f363 0007 	bfi	r0, r3, #0, #8
   21e58:	f364 108f 	bfi	r0, r4, #6, #10
   21e5c:	f44f 7296 	mov.w	r2, #300	; 0x12c
   21e60:	4929      	ldr	r1, [pc, #164]	; (21f08 <cloud_connect_error_handler+0x164>)
   21e62:	f022 fc60 	bl	44726 <log_string_sync>
		k_delayed_work_submit_to_queue(
   21e66:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   21e6a:	2300      	movs	r3, #0
   21e6c:	4927      	ldr	r1, [pc, #156]	; (21f0c <cloud_connect_error_handler+0x168>)
   21e6e:	4828      	ldr	r0, [pc, #160]	; (21f10 <cloud_connect_error_handler+0x16c>)
   21e70:	f01e ff90 	bl	40d94 <k_delayed_work_submit_to_queue>
   21e74:	e7c0      	b.n	21df8 <cloud_connect_error_handler+0x54>
	char *backend_name = "invalid";
   21e76:	4a22      	ldr	r2, [pc, #136]	; (21f00 <cloud_connect_error_handler+0x15c>)
   21e78:	e7df      	b.n	21e3a <cloud_connect_error_handler+0x96>
		LOG_ERR("Ensure device has a valid private key");
   21e7a:	f04f 0000 	mov.w	r0, #0
   21e7e:	2301      	movs	r3, #1
   21e80:	f363 0007 	bfi	r0, r3, #0, #8
   21e84:	f364 108f 	bfi	r0, r4, #6, #10
   21e88:	4922      	ldr	r1, [pc, #136]	; (21f14 <cloud_connect_error_handler+0x170>)
   21e8a:	e7c9      	b.n	21e20 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   21e8c:	f04f 0000 	mov.w	r0, #0
   21e90:	2301      	movs	r3, #1
   21e92:	f363 0007 	bfi	r0, r3, #0, #8
   21e96:	f364 108f 	bfi	r0, r4, #6, #10
   21e9a:	491f      	ldr	r1, [pc, #124]	; (21f18 <cloud_connect_error_handler+0x174>)
   21e9c:	e7c0      	b.n	21e20 <cloud_connect_error_handler+0x7c>
		LOG_ERR("A certificate/authorization error has occurred");
   21e9e:	f04f 0000 	mov.w	r0, #0
   21ea2:	2301      	movs	r3, #1
   21ea4:	f363 0007 	bfi	r0, r3, #0, #8
   21ea8:	f364 108f 	bfi	r0, r4, #6, #10
   21eac:	491b      	ldr	r1, [pc, #108]	; (21f1c <cloud_connect_error_handler+0x178>)
   21eae:	e7b7      	b.n	21e20 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   21eb0:	f04f 0000 	mov.w	r0, #0
   21eb4:	2301      	movs	r3, #1
   21eb6:	f363 0007 	bfi	r0, r3, #0, #8
   21eba:	f364 108f 	bfi	r0, r4, #6, #10
   21ebe:	4918      	ldr	r1, [pc, #96]	; (21f20 <cloud_connect_error_handler+0x17c>)
   21ec0:	e7ae      	b.n	21e20 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Connection already exists.");
   21ec2:	f04f 0000 	mov.w	r0, #0
   21ec6:	2301      	movs	r3, #1
   21ec8:	f363 0007 	bfi	r0, r3, #0, #8
   21ecc:	f364 108f 	bfi	r0, r4, #6, #10
   21ed0:	4914      	ldr	r1, [pc, #80]	; (21f24 <cloud_connect_error_handler+0x180>)
   21ed2:	e7a5      	b.n	21e20 <cloud_connect_error_handler+0x7c>
		LOG_ERR("Unhandled connect error");
   21ed4:	f04f 0000 	mov.w	r0, #0
   21ed8:	2301      	movs	r3, #1
   21eda:	f363 0007 	bfi	r0, r3, #0, #8
   21ede:	f364 108f 	bfi	r0, r4, #6, #10
   21ee2:	4911      	ldr	r1, [pc, #68]	; (21f28 <cloud_connect_error_handler+0x184>)
   21ee4:	e79c      	b.n	21e20 <cloud_connect_error_handler+0x7c>
}
   21ee6:	bd38      	pop	{r3, r4, r5, pc}
   21ee8:	00049798 	.word	0x00049798
   21eec:	00049788 	.word	0x00049788
   21ef0:	0004ab26 	.word	0x0004ab26
   21ef4:	0004ab4b 	.word	0x0004ab4b
   21ef8:	0004ab73 	.word	0x0004ab73
   21efc:	2002498c 	.word	0x2002498c
   21f00:	0004ab1e 	.word	0x0004ab1e
   21f04:	0004ab9c 	.word	0x0004ab9c
   21f08:	0004afa0 	.word	0x0004afa0
   21f0c:	20020f78 	.word	0x20020f78
   21f10:	20020e60 	.word	0x20020e60
   21f14:	0004abd1 	.word	0x0004abd1
   21f18:	0004abf7 	.word	0x0004abf7
   21f1c:	0004ac2b 	.word	0x0004ac2b
   21f20:	0004ac5a 	.word	0x0004ac5a
   21f24:	0004ac87 	.word	0x0004ac87
   21f28:	0004aca2 	.word	0x0004aca2

00021f2c <cloud_connect_work_fn>:
{
   21f2c:	b570      	push	{r4, r5, r6, lr}
	LOG_INF("Connecting to cloud, attempt %d of %d",
   21f2e:	2303      	movs	r3, #3
   21f30:	f04f 0500 	mov.w	r5, #0
   21f34:	4c27      	ldr	r4, [pc, #156]	; (21fd4 <cloud_connect_work_fn+0xa8>)
   21f36:	f363 0507 	bfi	r5, r3, #0, #8
   21f3a:	4b27      	ldr	r3, [pc, #156]	; (21fd8 <cloud_connect_work_fn+0xac>)
   21f3c:	4827      	ldr	r0, [pc, #156]	; (21fdc <cloud_connect_work_fn+0xb0>)
   21f3e:	1ae4      	subs	r4, r4, r3
   21f40:	f022 f803 	bl	43f4a <atomic_get>
   21f44:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   21f48:	f364 158f 	bfi	r5, r4, #6, #10
   21f4c:	4602      	mov	r2, r0
   21f4e:	2308      	movs	r3, #8
   21f50:	4923      	ldr	r1, [pc, #140]	; (21fe0 <cloud_connect_work_fn+0xb4>)
   21f52:	4628      	mov	r0, r5
   21f54:	f022 fbe7 	bl	44726 <log_string_sync>
	k_delayed_work_submit_to_queue(&application_work_q,
   21f58:	2300      	movs	r3, #0
   21f5a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21f5e:	4921      	ldr	r1, [pc, #132]	; (21fe4 <cloud_connect_work_fn+0xb8>)
   21f60:	4821      	ldr	r0, [pc, #132]	; (21fe8 <cloud_connect_work_fn+0xbc>)
   21f62:	f01e ff17 	bl	40d94 <k_delayed_work_submit_to_queue>
	ui_led_set_pattern(UI_CLOUD_CONNECTING);
   21f66:	f44f 6000 	mov.w	r0, #2048	; 0x800
   21f6a:	f000 fd35 	bl	229d8 <ui_led_set_pattern>
	ret = cloud_connect(cloud_backend);
   21f6e:	4b1f      	ldr	r3, [pc, #124]	; (21fec <cloud_connect_work_fn+0xc0>)
   21f70:	6818      	ldr	r0, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   21f72:	b170      	cbz	r0, 21f92 <cloud_connect_work_fn+0x66>
   21f74:	6803      	ldr	r3, [r0, #0]
   21f76:	b163      	cbz	r3, 21f92 <cloud_connect_work_fn+0x66>
	    backend->api->connect == NULL) {
   21f78:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   21f7a:	b153      	cbz	r3, 21f92 <cloud_connect_work_fn+0x66>
	return backend->api->connect(backend);
   21f7c:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   21f7e:	4605      	mov	r5, r0
   21f80:	b150      	cbz	r0, 21f98 <cloud_connect_work_fn+0x6c>
		k_delayed_work_cancel(&cloud_reboot_work);
   21f82:	4818      	ldr	r0, [pc, #96]	; (21fe4 <cloud_connect_work_fn+0xb8>)
   21f84:	f01e ff8e 	bl	40ea4 <k_delayed_work_cancel>
		cloud_connect_error_handler(ret);
   21f88:	b268      	sxtb	r0, r5
}
   21f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_connect_error_handler(ret);
   21f8e:	f7ff bf09 	b.w	21da4 <cloud_connect_error_handler>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   21f92:	f06f 0501 	mvn.w	r5, #1
   21f96:	e7f4      	b.n	21f82 <cloud_connect_work_fn+0x56>
		LOG_INF("Cloud connection request sent.");
   21f98:	2303      	movs	r3, #3
   21f9a:	f04f 0000 	mov.w	r0, #0
   21f9e:	f363 0007 	bfi	r0, r3, #0, #8
   21fa2:	f364 108f 	bfi	r0, r4, #6, #10
   21fa6:	4912      	ldr	r1, [pc, #72]	; (21ff0 <cloud_connect_work_fn+0xc4>)
   21fa8:	f022 fbbd 	bl	44726 <log_string_sync>
		LOG_INF("Connection response timeout is set to %d seconds.",
   21fac:	2303      	movs	r3, #3
   21fae:	f04f 0000 	mov.w	r0, #0
   21fb2:	f363 0007 	bfi	r0, r3, #0, #8
   21fb6:	f364 108f 	bfi	r0, r4, #6, #10
   21fba:	221e      	movs	r2, #30
   21fbc:	490d      	ldr	r1, [pc, #52]	; (21ff4 <cloud_connect_work_fn+0xc8>)
   21fbe:	f022 fbb2 	bl	44726 <log_string_sync>
}
   21fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   21fc6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   21fca:	2300      	movs	r3, #0
   21fcc:	4905      	ldr	r1, [pc, #20]	; (21fe4 <cloud_connect_work_fn+0xb8>)
   21fce:	4806      	ldr	r0, [pc, #24]	; (21fe8 <cloud_connect_work_fn+0xbc>)
   21fd0:	f01e bee0 	b.w	40d94 <k_delayed_work_submit_to_queue>
   21fd4:	00049798 	.word	0x00049798
   21fd8:	00049788 	.word	0x00049788
   21fdc:	20024990 	.word	0x20024990
   21fe0:	0004acba 	.word	0x0004acba
   21fe4:	20020f78 	.word	0x20020f78
   21fe8:	20020e60 	.word	0x20020e60
   21fec:	2002498c 	.word	0x2002498c
   21ff0:	0004f35c 	.word	0x0004f35c
   21ff4:	0004ace0 	.word	0x0004ace0

00021ff8 <connect_to_cloud>:
{
   21ff8:	b570      	push	{r4, r5, r6, lr}
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21ffa:	2100      	movs	r1, #0
{
   21ffc:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   21ffe:	482c      	ldr	r0, [pc, #176]	; (220b0 <connect_to_cloud+0xb8>)
   22000:	f021 ff9b 	bl	43f3a <atomic_set>
	if (atomic_get(&carrier_requested_disconnect)) {
   22004:	482b      	ldr	r0, [pc, #172]	; (220b4 <connect_to_cloud+0xbc>)
   22006:	f021 ffa0 	bl	43f4a <atomic_get>
   2200a:	2800      	cmp	r0, #0
   2200c:	d14e      	bne.n	220ac <connect_to_cloud+0xb4>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2200e:	482a      	ldr	r0, [pc, #168]	; (220b8 <connect_to_cloud+0xc0>)
   22010:	e8d0 3fef 	ldaex	r3, [r0]
   22014:	3301      	adds	r3, #1
   22016:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2201a:	2a00      	cmp	r2, #0
   2201c:	d1f8      	bne.n	22010 <connect_to_cloud+0x18>
	if (atomic_get(&cloud_connect_attempts) >
   2201e:	f021 ff94 	bl	43f4a <atomic_get>
   22022:	2808      	cmp	r0, #8
   22024:	dd11      	ble.n	2204a <connect_to_cloud+0x52>
		LOG_ERR("The max cloud connection attempt count exceeded.");
   22026:	2301      	movs	r3, #1
   22028:	f04f 0000 	mov.w	r0, #0
   2202c:	4a23      	ldr	r2, [pc, #140]	; (220bc <connect_to_cloud+0xc4>)
   2202e:	f363 0007 	bfi	r0, r3, #0, #8
   22032:	4b23      	ldr	r3, [pc, #140]	; (220c0 <connect_to_cloud+0xc8>)
   22034:	4923      	ldr	r1, [pc, #140]	; (220c4 <connect_to_cloud+0xcc>)
   22036:	1a9b      	subs	r3, r3, r2
   22038:	08db      	lsrs	r3, r3, #3
   2203a:	f363 108f 	bfi	r0, r3, #6, #10
   2203e:	f022 fb72 	bl	44726 <log_string_sync>
		cloud_error_handler(-ETIMEDOUT);
   22042:	f06f 0073 	mvn.w	r0, #115	; 0x73
   22046:	f021 ff96 	bl	43f76 <cloud_error_handler>
	if (!initial_connect) {
   2204a:	4b1f      	ldr	r3, [pc, #124]	; (220c8 <connect_to_cloud+0xd0>)
   2204c:	781a      	ldrb	r2, [r3, #0]
   2204e:	bb52      	cbnz	r2, 220a6 <connect_to_cloud+0xae>
		LOG_INF("Attempting reconnect in %d seconds...",
   22050:	2303      	movs	r3, #3
   22052:	f04f 0000 	mov.w	r0, #0
   22056:	4a19      	ldr	r2, [pc, #100]	; (220bc <connect_to_cloud+0xc4>)
   22058:	f363 0007 	bfi	r0, r3, #0, #8
   2205c:	4b18      	ldr	r3, [pc, #96]	; (220c0 <connect_to_cloud+0xc8>)
   2205e:	491b      	ldr	r1, [pc, #108]	; (220cc <connect_to_cloud+0xd4>)
   22060:	1a9b      	subs	r3, r3, r2
   22062:	08db      	lsrs	r3, r3, #3
   22064:	f363 108f 	bfi	r0, r3, #6, #10
   22068:	4622      	mov	r2, r4
   2206a:	f022 fb5c 	bl	44726 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   2206e:	4818      	ldr	r0, [pc, #96]	; (220d0 <connect_to_cloud+0xd8>)
   22070:	f01e ff18 	bl	40ea4 <k_delayed_work_cancel>
				       K_SECONDS(connect_delay_s));
   22074:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
			return (t * to_hz + off) / from_hz;
   22078:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2207c:	4361      	muls	r1, r4
   2207e:	2500      	movs	r5, #0
   22080:	f240 34e7 	movw	r4, #999	; 0x3e7
   22084:	fbe0 4501 	umlal	r4, r5, r0, r1
   22088:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2208c:	2300      	movs	r3, #0
   2208e:	4620      	mov	r0, r4
   22090:	4629      	mov	r1, r5
   22092:	f7fa ff13 	bl	1cebc <__aeabi_uldivmod>
}
   22096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_delayed_work_submit_to_queue(&application_work_q,
   2209a:	4602      	mov	r2, r0
   2209c:	460b      	mov	r3, r1
   2209e:	480d      	ldr	r0, [pc, #52]	; (220d4 <connect_to_cloud+0xdc>)
   220a0:	490d      	ldr	r1, [pc, #52]	; (220d8 <connect_to_cloud+0xe0>)
   220a2:	f01e be77 	b.w	40d94 <k_delayed_work_submit_to_queue>
		initial_connect = false;
   220a6:	2200      	movs	r2, #0
   220a8:	701a      	strb	r2, [r3, #0]
   220aa:	e7e3      	b.n	22074 <connect_to_cloud+0x7c>
}
   220ac:	bd70      	pop	{r4, r5, r6, pc}
   220ae:	bf00      	nop
   220b0:	20024988 	.word	0x20024988
   220b4:	20024984 	.word	0x20024984
   220b8:	20024990 	.word	0x20024990
   220bc:	00049788 	.word	0x00049788
   220c0:	00049798 	.word	0x00049798
   220c4:	0004af1a 	.word	0x0004af1a
   220c8:	20020ab4 	.word	0x20020ab4
   220cc:	0004af4b 	.word	0x0004af4b
   220d0:	20020f78 	.word	0x20020f78
   220d4:	20020e60 	.word	0x20020e60
   220d8:	20020f48 	.word	0x20020f48

000220dc <sensors_start>:
{
   220dc:	b510      	push	{r4, lr}
	if (!started) {
   220de:	4c35      	ldr	r4, [pc, #212]	; (221b4 <sensors_start+0xd8>)
   220e0:	7823      	ldrb	r3, [r4, #0]
   220e2:	2b00      	cmp	r3, #0
   220e4:	d159      	bne.n	2219a <sensors_start+0xbe>
	err = motion_init_and_start(&application_work_q, motion_handler);
   220e6:	4934      	ldr	r1, [pc, #208]	; (221b8 <sensors_start+0xdc>)
   220e8:	4834      	ldr	r0, [pc, #208]	; (221bc <sensors_start+0xe0>)
   220ea:	f000 fbd9 	bl	228a0 <motion_init_and_start>
	if (err) {
   220ee:	4602      	mov	r2, r0
   220f0:	b168      	cbz	r0, 2210e <sensors_start+0x32>
		LOG_ERR("motion module init failed, error: %d", err);
   220f2:	2301      	movs	r3, #1
   220f4:	f04f 0000 	mov.w	r0, #0
   220f8:	4931      	ldr	r1, [pc, #196]	; (221c0 <sensors_start+0xe4>)
   220fa:	f363 0007 	bfi	r0, r3, #0, #8
   220fe:	4b31      	ldr	r3, [pc, #196]	; (221c4 <sensors_start+0xe8>)
   22100:	1a5b      	subs	r3, r3, r1
   22102:	08db      	lsrs	r3, r3, #3
   22104:	f363 108f 	bfi	r0, r3, #6, #10
   22108:	492f      	ldr	r1, [pc, #188]	; (221c8 <sensors_start+0xec>)
   2210a:	f022 fb0c 	bl	44726 <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   2210e:	492f      	ldr	r1, [pc, #188]	; (221cc <sensors_start+0xf0>)
   22110:	482a      	ldr	r0, [pc, #168]	; (221bc <sensors_start+0xe0>)
   22112:	f001 fd0f 	bl	23b34 <env_sensors_init_and_start>
	if (err) {
   22116:	4602      	mov	r2, r0
   22118:	b168      	cbz	r0, 22136 <sensors_start+0x5a>
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   2211a:	2301      	movs	r3, #1
   2211c:	f04f 0000 	mov.w	r0, #0
   22120:	4927      	ldr	r1, [pc, #156]	; (221c0 <sensors_start+0xe4>)
   22122:	f363 0007 	bfi	r0, r3, #0, #8
   22126:	4b27      	ldr	r3, [pc, #156]	; (221c4 <sensors_start+0xe8>)
   22128:	1a5b      	subs	r3, r3, r1
   2212a:	08db      	lsrs	r3, r3, #3
   2212c:	f363 108f 	bfi	r0, r3, #6, #10
   22130:	4927      	ldr	r1, [pc, #156]	; (221d0 <sensors_start+0xf4>)
   22132:	f022 faf8 	bl	44726 <log_string_sync>
	err = modem_info_init();
   22136:	f00c f8c7 	bl	2e2c8 <modem_info_init>
	if (err) {
   2213a:	4602      	mov	r2, r0
   2213c:	b370      	cbz	r0, 2219c <sensors_start+0xc0>
		LOG_ERR("Modem info could not be established: %d", err);
   2213e:	2301      	movs	r3, #1
   22140:	f04f 0000 	mov.w	r0, #0
   22144:	491e      	ldr	r1, [pc, #120]	; (221c0 <sensors_start+0xe4>)
   22146:	f363 0007 	bfi	r0, r3, #0, #8
   2214a:	4b1e      	ldr	r3, [pc, #120]	; (221c4 <sensors_start+0xe8>)
   2214c:	1a5b      	subs	r3, r3, r1
   2214e:	08db      	lsrs	r3, r3, #3
   22150:	f363 108f 	bfi	r0, r3, #6, #10
   22154:	491f      	ldr	r1, [pc, #124]	; (221d4 <sensors_start+0xf8>)
   22156:	f022 fae6 	bl	44726 <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   2215a:	481f      	ldr	r0, [pc, #124]	; (221d8 <sensors_start+0xfc>)
   2215c:	f7ff f842 	bl	211e4 <k_work_submit_to_queue.constprop.14>
	err = gps_control_init(&application_work_q, gps_handler);
   22160:	491e      	ldr	r1, [pc, #120]	; (221dc <sensors_start+0x100>)
   22162:	4816      	ldr	r0, [pc, #88]	; (221bc <sensors_start+0xe0>)
   22164:	f001 fc40 	bl	239e8 <gps_control_init>
	if (err) {
   22168:	b168      	cbz	r0, 22186 <sensors_start+0xaa>
		LOG_ERR("GPS could not be initialized");
   2216a:	2301      	movs	r3, #1
   2216c:	f04f 0000 	mov.w	r0, #0
   22170:	4a13      	ldr	r2, [pc, #76]	; (221c0 <sensors_start+0xe4>)
   22172:	f363 0007 	bfi	r0, r3, #0, #8
   22176:	4b13      	ldr	r3, [pc, #76]	; (221c4 <sensors_start+0xe8>)
   22178:	4919      	ldr	r1, [pc, #100]	; (221e0 <sensors_start+0x104>)
   2217a:	1a9b      	subs	r3, r3, r2
   2217c:	08db      	lsrs	r3, r3, #3
   2217e:	f363 108f 	bfi	r0, r3, #6, #10
   22182:	f022 fad0 	bl	44726 <log_string_sync>
		switch (cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS)) {
   22186:	2000      	movs	r0, #0
   22188:	f001 f962 	bl	23450 <cloud_get_channel_enable_state>
		set_gps_enable(start_gps);
   2218c:	1e43      	subs	r3, r0, #1
   2218e:	4258      	negs	r0, r3
   22190:	4158      	adcs	r0, r3
   22192:	f7fe fea5 	bl	20ee0 <set_gps_enable>
		started = true;
   22196:	2301      	movs	r3, #1
   22198:	7023      	strb	r3, [r4, #0]
}
   2219a:	bd10      	pop	{r4, pc}
	modem_info_params_init(&modem_param);
   2219c:	4811      	ldr	r0, [pc, #68]	; (221e4 <sensors_start+0x108>)
   2219e:	f00c f8df 	bl	2e360 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   221a2:	220c      	movs	r2, #12
   221a4:	4b10      	ldr	r3, [pc, #64]	; (221e8 <sensors_start+0x10c>)
	modem_info_rsrp_register(modem_rsrp_handler);
   221a6:	4811      	ldr	r0, [pc, #68]	; (221ec <sensors_start+0x110>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   221a8:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   221aa:	2201      	movs	r2, #1
   221ac:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   221ae:	f00c f859 	bl	2e264 <modem_info_rsrp_register>
   221b2:	e7d2      	b.n	2215a <sensors_start+0x7e>
   221b4:	2002b4a7 	.word	0x2002b4a7
   221b8:	00021345 	.word	0x00021345
   221bc:	20020e60 	.word	0x20020e60
   221c0:	00049788 	.word	0x00049788
   221c4:	00049798 	.word	0x00049798
   221c8:	0004b6ce 	.word	0x0004b6ce
   221cc:	00021a05 	.word	0x00021a05
   221d0:	0004b6f3 	.word	0x0004b6f3
   221d4:	0004b720 	.word	0x0004b720
   221d8:	20024994 	.word	0x20024994
   221dc:	00021385 	.word	0x00021385
   221e0:	0004b748 	.word	0x0004b748
   221e4:	20021070 	.word	0x20021070
   221e8:	200219b8 	.word	0x200219b8
   221ec:	000211a1 	.word	0x000211a1

000221f0 <on_pairing_done>:
{
   221f0:	b510      	push	{r4, lr}
	if (atomic_get(&cloud_association) ==
   221f2:	4819      	ldr	r0, [pc, #100]	; (22258 <on_pairing_done+0x68>)
   221f4:	f021 fea9 	bl	43f4a <atomic_get>
   221f8:	2801      	cmp	r0, #1
   221fa:	d127      	bne.n	2224c <on_pairing_done+0x5c>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   221fc:	4817      	ldr	r0, [pc, #92]	; (2225c <on_pairing_done+0x6c>)
   221fe:	f01e fe51 	bl	40ea4 <k_delayed_work_cancel>
		LOG_INF("Device associated with cloud.");
   22202:	2303      	movs	r3, #3
   22204:	f04f 0000 	mov.w	r0, #0
   22208:	4c15      	ldr	r4, [pc, #84]	; (22260 <on_pairing_done+0x70>)
   2220a:	f363 0007 	bfi	r0, r3, #0, #8
   2220e:	4b15      	ldr	r3, [pc, #84]	; (22264 <on_pairing_done+0x74>)
   22210:	4915      	ldr	r1, [pc, #84]	; (22268 <on_pairing_done+0x78>)
   22212:	1ae4      	subs	r4, r4, r3
   22214:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22218:	f364 108f 	bfi	r0, r4, #6, #10
   2221c:	f022 fa83 	bl	44726 <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   22220:	2303      	movs	r3, #3
   22222:	f04f 0000 	mov.w	r0, #0
   22226:	f363 0007 	bfi	r0, r3, #0, #8
   2222a:	f364 108f 	bfi	r0, r4, #6, #10
   2222e:	490f      	ldr	r1, [pc, #60]	; (2226c <on_pairing_done+0x7c>)
   22230:	f022 fa79 	bl	44726 <log_string_sync>
		atomic_set(&cloud_association,
   22234:	2103      	movs	r1, #3
   22236:	4808      	ldr	r0, [pc, #32]	; (22258 <on_pairing_done+0x68>)
   22238:	f021 fe7f 	bl	43f3a <atomic_set>
}
   2223c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   22240:	2200      	movs	r2, #0
   22242:	2300      	movs	r3, #0
   22244:	4905      	ldr	r1, [pc, #20]	; (2225c <on_pairing_done+0x6c>)
   22246:	480a      	ldr	r0, [pc, #40]	; (22270 <on_pairing_done+0x80>)
   22248:	f01e bda4 	b.w	40d94 <k_delayed_work_submit_to_queue>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   2224c:	2102      	movs	r1, #2
}
   2224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   22252:	4801      	ldr	r0, [pc, #4]	; (22258 <on_pairing_done+0x68>)
   22254:	f021 be71 	b.w	43f3a <atomic_set>
   22258:	20024988 	.word	0x20024988
   2225c:	20020fa8 	.word	0x20020fa8
   22260:	00049798 	.word	0x00049798
   22264:	00049788 	.word	0x00049788
   22268:	0004b51a 	.word	0x0004b51a
   2226c:	0004b538 	.word	0x0004b538
   22270:	20020e60 	.word	0x20020e60

00022274 <cloud_event_handler>:
{
   22274:	b570      	push	{r4, r5, r6, lr}
   22276:	4ba2      	ldr	r3, [pc, #648]	; (22500 <cloud_event_handler+0x28c>)
   22278:	4ca2      	ldr	r4, [pc, #648]	; (22504 <cloud_event_handler+0x290>)
	switch (evt->type) {
   2227a:	780a      	ldrb	r2, [r1, #0]
   2227c:	1ae4      	subs	r4, r4, r3
{
   2227e:	460d      	mov	r5, r1
   22280:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   22284:	f04f 0000 	mov.w	r0, #0
	switch (evt->type) {
   22288:	2a0a      	cmp	r2, #10
   2228a:	f200 8131 	bhi.w	224f0 <cloud_event_handler+0x27c>
   2228e:	e8df f012 	tbh	[pc, r2, lsl #1]
   22292:	000b      	.short	0x000b
   22294:	000b000b 	.word	0x000b000b
   22298:	00ae009a 	.word	0x00ae009a
   2229c:	00bf00b8 	.word	0x00bf00b8
   222a0:	011400e2 	.word	0x011400e2
   222a4:	0120012f 	.word	0x0120012f
		LOG_INF("CLOUD_EVT_CONNECTING");
   222a8:	2303      	movs	r3, #3
   222aa:	f363 0007 	bfi	r0, r3, #0, #8
   222ae:	f364 108f 	bfi	r0, r4, #6, #10
	if (evt->type == CLOUD_EVT_CONNECTING) {
   222b2:	b992      	cbnz	r2, 222da <cloud_event_handler+0x66>
		LOG_INF("CLOUD_EVT_CONNECTING");
   222b4:	4994      	ldr	r1, [pc, #592]	; (22508 <cloud_event_handler+0x294>)
   222b6:	f022 fa36 	bl	44726 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTING);
   222ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
   222be:	f000 fb8b 	bl	229d8 <ui_led_set_pattern>
		k_delayed_work_cancel(&cloud_reboot_work);
   222c2:	4892      	ldr	r0, [pc, #584]	; (2250c <cloud_event_handler+0x298>)
   222c4:	f01e fdee 	bl	40ea4 <k_delayed_work_cancel>
		if (evt->data.err != CLOUD_CONNECT_RES_SUCCESS) {
   222c8:	6868      	ldr	r0, [r5, #4]
   222ca:	2800      	cmp	r0, #0
   222cc:	f000 8117 	beq.w	224fe <cloud_event_handler+0x28a>
}
   222d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			cloud_connect_error_handler(evt->data.err);
   222d4:	b240      	sxtb	r0, r0
   222d6:	f7ff bd65 	b.w	21da4 <cloud_connect_error_handler>
	} else if (evt->type == CLOUD_EVT_CONNECTED) {
   222da:	2a01      	cmp	r2, #1
   222dc:	d11b      	bne.n	22316 <cloud_event_handler+0xa2>
		LOG_INF("CLOUD_EVT_CONNECTED");
   222de:	498c      	ldr	r1, [pc, #560]	; (22510 <cloud_event_handler+0x29c>)
   222e0:	f022 fa21 	bl	44726 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   222e4:	4889      	ldr	r0, [pc, #548]	; (2250c <cloud_event_handler+0x298>)
   222e6:	f01e fddd 	bl	40ea4 <k_delayed_work_cancel>
	return z_impl_k_sem_take(sem, timeout);
   222ea:	2200      	movs	r2, #0
   222ec:	2300      	movs	r3, #0
   222ee:	4889      	ldr	r0, [pc, #548]	; (22514 <cloud_event_handler+0x2a0>)
   222f0:	f01e fb28 	bl	40944 <z_impl_k_sem_take>
		atomic_set(&cloud_connect_attempts, 0);
   222f4:	2100      	movs	r1, #0
   222f6:	4888      	ldr	r0, [pc, #544]	; (22518 <cloud_event_handler+0x2a4>)
   222f8:	f021 fe1f 	bl	43f3a <atomic_set>
		LOG_INF("Persistent Sessions = %u",
   222fc:	f04f 0000 	mov.w	r0, #0
   22300:	2303      	movs	r3, #3
   22302:	792a      	ldrb	r2, [r5, #4]
   22304:	f363 0007 	bfi	r0, r3, #0, #8
   22308:	4984      	ldr	r1, [pc, #528]	; (2251c <cloud_event_handler+0x2a8>)
   2230a:	f364 108f 	bfi	r0, r4, #6, #10
}
   2230e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   22312:	f022 ba08 	b.w	44726 <log_string_sync>
		LOG_INF("CLOUD_EVT_DISCONNECTED: %d", evt->data.err);
   22316:	684a      	ldr	r2, [r1, #4]
   22318:	4981      	ldr	r1, [pc, #516]	; (22520 <cloud_event_handler+0x2ac>)
   2231a:	f022 fa04 	bl	44726 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   2231e:	2004      	movs	r0, #4
   22320:	f000 fb5a 	bl	229d8 <ui_led_set_pattern>
		switch (evt->data.err) {
   22324:	686b      	ldr	r3, [r5, #4]
   22326:	2b01      	cmp	r3, #1
   22328:	d044      	beq.n	223b4 <cloud_event_handler+0x140>
   2232a:	2b02      	cmp	r3, #2
   2232c:	d003      	beq.n	22336 <cloud_event_handler+0xc2>
   2232e:	b38b      	cbz	r3, 22394 <cloud_event_handler+0x120>
		int32_t connect_wait_s = CONFIG_CLOUD_CONNECT_RETRY_DELAY;
   22330:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
   22334:	e01b      	b.n	2236e <cloud_event_handler+0xfa>
			LOG_INF("Cloud connection closed.");
   22336:	2303      	movs	r3, #3
   22338:	f04f 0000 	mov.w	r0, #0
   2233c:	f363 0007 	bfi	r0, r3, #0, #8
   22340:	f364 108f 	bfi	r0, r4, #6, #10
   22344:	4977      	ldr	r1, [pc, #476]	; (22524 <cloud_event_handler+0x2b0>)
   22346:	f022 f9ee 	bl	44726 <log_string_sync>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   2234a:	4873      	ldr	r0, [pc, #460]	; (22518 <cloud_event_handler+0x2a4>)
   2234c:	f021 fdfd 	bl	43f4a <atomic_get>
   22350:	2801      	cmp	r0, #1
   22352:	d114      	bne.n	2237e <cloud_event_handler+0x10a>
			    (atomic_get(&cloud_association) ==
   22354:	4874      	ldr	r0, [pc, #464]	; (22528 <cloud_event_handler+0x2b4>)
   22356:	f021 fdf8 	bl	43f4a <atomic_get>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   2235a:	b980      	cbnz	r0, 2237e <cloud_event_handler+0x10a>
				LOG_INF("This can occur during initial nRF Cloud provisioning.");
   2235c:	2303      	movs	r3, #3
   2235e:	f363 0007 	bfi	r0, r3, #0, #8
   22362:	f364 108f 	bfi	r0, r4, #6, #10
   22366:	4971      	ldr	r1, [pc, #452]	; (2252c <cloud_event_handler+0x2b8>)
   22368:	f022 f9dd 	bl	44726 <log_string_sync>
				connect_wait_s = 10;
   2236c:	240a      	movs	r4, #10
	z_impl_k_sem_give(sem);
   2236e:	4869      	ldr	r0, [pc, #420]	; (22514 <cloud_event_handler+0x2a0>)
   22370:	f01e faa4 	bl	408bc <z_impl_k_sem_give>
		connect_to_cloud(connect_wait_s);
   22374:	4620      	mov	r0, r4
}
   22376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		connect_to_cloud(connect_wait_s);
   2237a:	f7ff be3d 	b.w	21ff8 <connect_to_cloud>
				LOG_INF("This can occur if the device has the wrong nRF Cloud certificates.");
   2237e:	f04f 0000 	mov.w	r0, #0
   22382:	2303      	movs	r3, #3
   22384:	496a      	ldr	r1, [pc, #424]	; (22530 <cloud_event_handler+0x2bc>)
   22386:	f363 0007 	bfi	r0, r3, #0, #8
   2238a:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_INF("Disconnected by the cloud.");
   2238e:	f022 f9ca 	bl	44726 <log_string_sync>
   22392:	e7cd      	b.n	22330 <cloud_event_handler+0xbc>
			if (atomic_get(&cloud_association) ==
   22394:	4864      	ldr	r0, [pc, #400]	; (22528 <cloud_event_handler+0x2b4>)
   22396:	f021 fdd8 	bl	43f4a <atomic_get>
   2239a:	2803      	cmp	r0, #3
   2239c:	d0e6      	beq.n	2236c <cloud_event_handler+0xf8>
			    atomic_get(&cloud_association) ==
   2239e:	4862      	ldr	r0, [pc, #392]	; (22528 <cloud_event_handler+0x2b4>)
   223a0:	f021 fdd3 	bl	43f4a <atomic_get>
			    CLOUD_ASSOCIATION_STATE_RECONNECT ||
   223a4:	2801      	cmp	r0, #1
   223a6:	d0e1      	beq.n	2236c <cloud_event_handler+0xf8>
			    (atomic_get(&carrier_requested_disconnect))) {
   223a8:	4862      	ldr	r0, [pc, #392]	; (22534 <cloud_event_handler+0x2c0>)
   223aa:	f021 fdce 	bl	43f4a <atomic_get>
			    CLOUD_ASSOCIATION_STATE_REQUESTED ||
   223ae:	2800      	cmp	r0, #0
   223b0:	d1dc      	bne.n	2236c <cloud_event_handler+0xf8>
   223b2:	e7bd      	b.n	22330 <cloud_event_handler+0xbc>
			LOG_INF("Disconnected by the cloud.");
   223b4:	f04f 0000 	mov.w	r0, #0
   223b8:	2303      	movs	r3, #3
   223ba:	f363 0007 	bfi	r0, r3, #0, #8
   223be:	f364 108f 	bfi	r0, r4, #6, #10
   223c2:	495d      	ldr	r1, [pc, #372]	; (22538 <cloud_event_handler+0x2c4>)
   223c4:	e7e3      	b.n	2238e <cloud_event_handler+0x11a>
		LOG_INF("CLOUD_EVT_READY");
   223c6:	2303      	movs	r3, #3
   223c8:	f363 0007 	bfi	r0, r3, #0, #8
   223cc:	f364 108f 	bfi	r0, r4, #6, #10
   223d0:	495a      	ldr	r1, [pc, #360]	; (2253c <cloud_event_handler+0x2c8>)
   223d2:	f022 f9a8 	bl	44726 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   223d6:	2008      	movs	r0, #8
   223d8:	f000 fafe 	bl	229d8 <ui_led_set_pattern>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_READY);
   223dc:	2104      	movs	r1, #4
   223de:	4852      	ldr	r0, [pc, #328]	; (22528 <cloud_event_handler+0x2b4>)
   223e0:	f021 fdab 	bl	43f3a <atomic_set>
}
   223e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&application_work_q, &sensors_start_work);
   223e8:	4855      	ldr	r0, [pc, #340]	; (22540 <cloud_event_handler+0x2cc>)
   223ea:	f7fe befb 	b.w	211e4 <k_work_submit_to_queue.constprop.14>
		LOG_INF("CLOUD_EVT_ERROR");
   223ee:	2303      	movs	r3, #3
   223f0:	4954      	ldr	r1, [pc, #336]	; (22544 <cloud_event_handler+0x2d0>)
   223f2:	f363 0007 	bfi	r0, r3, #0, #8
   223f6:	f364 108f 	bfi	r0, r4, #6, #10
}
   223fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   223fe:	f022 b992 	b.w	44726 <log_string_sync>
   22402:	2303      	movs	r3, #3
   22404:	f363 0007 	bfi	r0, r3, #0, #8
   22408:	f364 108f 	bfi	r0, r4, #6, #10
   2240c:	494e      	ldr	r1, [pc, #312]	; (22548 <cloud_event_handler+0x2d4>)
   2240e:	e7f4      	b.n	223fa <cloud_event_handler+0x186>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   22410:	2303      	movs	r3, #3
   22412:	f363 0007 	bfi	r0, r3, #0, #8
   22416:	f364 108f 	bfi	r0, r4, #6, #10
   2241a:	494c      	ldr	r1, [pc, #304]	; (2254c <cloud_event_handler+0x2d8>)
   2241c:	f022 f983 	bl	44726 <log_string_sync>
		err = cloud_decode_command(evt->data.msg.buf);
   22420:	6868      	ldr	r0, [r5, #4]
   22422:	f000 fe77 	bl	23114 <cloud_decode_command>
		if (err == 0) {
   22426:	2800      	cmp	r0, #0
   22428:	d069      	beq.n	224fe <cloud_event_handler+0x28a>
		err = gps_process_agps_data(evt->data.msg.buf,
   2242a:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   2242e:	f004 ffa1 	bl	27374 <gps_process_agps_data>
		if (err) {
   22432:	4602      	mov	r2, r0
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   22434:	f04f 0000 	mov.w	r0, #0
		if (err) {
   22438:	b132      	cbz	r2, 22448 <cloud_event_handler+0x1d4>
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   2243a:	2102      	movs	r1, #2
   2243c:	f361 0007 	bfi	r0, r1, #0, #8
   22440:	f364 108f 	bfi	r0, r4, #6, #10
   22444:	4942      	ldr	r1, [pc, #264]	; (22550 <cloud_event_handler+0x2dc>)
   22446:	e762      	b.n	2230e <cloud_event_handler+0x9a>
		LOG_INF("A-GPS data processed");
   22448:	2303      	movs	r3, #3
   2244a:	f363 0007 	bfi	r0, r3, #0, #8
   2244e:	f364 108f 	bfi	r0, r4, #6, #10
   22452:	4940      	ldr	r1, [pc, #256]	; (22554 <cloud_event_handler+0x2e0>)
   22454:	e7d1      	b.n	223fa <cloud_event_handler+0x186>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   22456:	2303      	movs	r3, #3
   22458:	f363 0007 	bfi	r0, r3, #0, #8
   2245c:	f364 108f 	bfi	r0, r4, #6, #10
   22460:	493d      	ldr	r1, [pc, #244]	; (22558 <cloud_event_handler+0x2e4>)
   22462:	f022 f960 	bl	44726 <log_string_sync>
	if (atomic_get(&cloud_association) !=
   22466:	4830      	ldr	r0, [pc, #192]	; (22528 <cloud_event_handler+0x2b4>)
   22468:	f021 fd6f 	bl	43f4a <atomic_get>
   2246c:	2801      	cmp	r0, #1
   2246e:	d046      	beq.n	224fe <cloud_event_handler+0x28a>
		atomic_set(&cloud_association,
   22470:	2101      	movs	r1, #1
   22472:	482d      	ldr	r0, [pc, #180]	; (22528 <cloud_event_handler+0x2b4>)
   22474:	f021 fd61 	bl	43f3a <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   22478:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   2247c:	f000 faac 	bl	229d8 <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   22480:	2303      	movs	r3, #3
   22482:	f04f 0000 	mov.w	r0, #0
   22486:	f363 0007 	bfi	r0, r3, #0, #8
   2248a:	f364 108f 	bfi	r0, r4, #6, #10
   2248e:	4933      	ldr	r1, [pc, #204]	; (2255c <cloud_event_handler+0x2e8>)
   22490:	f022 f949 	bl	44726 <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   22494:	2303      	movs	r3, #3
   22496:	f04f 0000 	mov.w	r0, #0
   2249a:	f363 0007 	bfi	r0, r3, #0, #8
   2249e:	f364 108f 	bfi	r0, r4, #6, #10
   224a2:	492f      	ldr	r1, [pc, #188]	; (22560 <cloud_event_handler+0x2ec>)
   224a4:	f022 f93f 	bl	44726 <log_string_sync>
}
   224a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   224ac:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   224b0:	2300      	movs	r3, #0
   224b2:	492c      	ldr	r1, [pc, #176]	; (22564 <cloud_event_handler+0x2f0>)
   224b4:	482c      	ldr	r0, [pc, #176]	; (22568 <cloud_event_handler+0x2f4>)
   224b6:	f01e bc6d 	b.w	40d94 <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   224ba:	2303      	movs	r3, #3
   224bc:	f363 0007 	bfi	r0, r3, #0, #8
   224c0:	f364 108f 	bfi	r0, r4, #6, #10
   224c4:	4929      	ldr	r1, [pc, #164]	; (2256c <cloud_event_handler+0x2f8>)
   224c6:	f022 f92e 	bl	44726 <log_string_sync>
}
   224ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		on_pairing_done();
   224ce:	f7ff be8f 	b.w	221f0 <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   224d2:	2303      	movs	r3, #3
   224d4:	f363 0007 	bfi	r0, r3, #0, #8
   224d8:	f364 108f 	bfi	r0, r4, #6, #10
   224dc:	4924      	ldr	r1, [pc, #144]	; (22570 <cloud_event_handler+0x2fc>)
   224de:	f022 f922 	bl	44726 <log_string_sync>
		lte_lc_power_off();
   224e2:	f00b f961 	bl	2d7a8 <lte_lc_power_off>
}
   224e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   224ea:	2001      	movs	r0, #1
   224ec:	f003 bfd2 	b.w	26494 <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   224f0:	2302      	movs	r3, #2
   224f2:	f363 0007 	bfi	r0, r3, #0, #8
   224f6:	f364 108f 	bfi	r0, r4, #6, #10
   224fa:	491e      	ldr	r1, [pc, #120]	; (22574 <cloud_event_handler+0x300>)
   224fc:	e707      	b.n	2230e <cloud_event_handler+0x9a>
}
   224fe:	bd70      	pop	{r4, r5, r6, pc}
   22500:	00049788 	.word	0x00049788
   22504:	00049798 	.word	0x00049798
   22508:	0004ad12 	.word	0x0004ad12
   2250c:	20020f78 	.word	0x20020f78
   22510:	0004ad27 	.word	0x0004ad27
   22514:	20020d14 	.word	0x20020d14
   22518:	20024990 	.word	0x20024990
   2251c:	0004ad3b 	.word	0x0004ad3b
   22520:	0004ad54 	.word	0x0004ad54
   22524:	0004ad6f 	.word	0x0004ad6f
   22528:	20024988 	.word	0x20024988
   2252c:	0004ad88 	.word	0x0004ad88
   22530:	0004adbe 	.word	0x0004adbe
   22534:	20024984 	.word	0x20024984
   22538:	0004ae01 	.word	0x0004ae01
   2253c:	0004f1e8 	.word	0x0004f1e8
   22540:	200249d4 	.word	0x200249d4
   22544:	0004ae1c 	.word	0x0004ae1c
   22548:	0004ae2c 	.word	0x0004ae2c
   2254c:	0004ae40 	.word	0x0004ae40
   22550:	0004ae58 	.word	0x0004ae58
   22554:	0004ae7f 	.word	0x0004ae7f
   22558:	0004ae94 	.word	0x0004ae94
   2255c:	0004aeab 	.word	0x0004aeab
   22560:	0004aec8 	.word	0x0004aec8
   22564:	20020fa8 	.word	0x20020fa8
   22568:	20020e60 	.word	0x20020e60
   2256c:	0004aee9 	.word	0x0004aee9
   22570:	0004f2a3 	.word	0x0004f2a3
   22574:	0004aefd 	.word	0x0004aefd

00022578 <main>:

void main(void)
{
   22578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int ret;

	LOG_INF("Asset tracker started");
   2257c:	f04f 0000 	mov.w	r0, #0
   22580:	2303      	movs	r3, #3
   22582:	4c8d      	ldr	r4, [pc, #564]	; (227b8 <main+0x240>)
   22584:	f363 0007 	bfi	r0, r3, #0, #8
   22588:	4b8c      	ldr	r3, [pc, #560]	; (227bc <main+0x244>)
   2258a:	498d      	ldr	r1, [pc, #564]	; (227c0 <main+0x248>)
   2258c:	1ae4      	subs	r4, r4, r3
   2258e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22592:	f364 108f 	bfi	r0, r4, #6, #10
   22596:	f022 f8c6 	bl	44726 <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   2259a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2259e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   225a2:	4988      	ldr	r1, [pc, #544]	; (227c4 <main+0x24c>)
   225a4:	4888      	ldr	r0, [pc, #544]	; (227c8 <main+0x250>)
   225a6:	f01e fbcf 	bl	40d48 <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
   225aa:	4887      	ldr	r0, [pc, #540]	; (227c8 <main+0x250>)
   225ac:	f001 fca6 	bl	23efc <watchdog_init_and_start>
	cloud_backend = cloud_get_binding("NRF_CLOUD");
   225b0:	4886      	ldr	r0, [pc, #536]	; (227cc <main+0x254>)
   225b2:	f00c fbaf 	bl	2ed14 <cloud_get_binding>
   225b6:	4b86      	ldr	r3, [pc, #536]	; (227d0 <main+0x258>)
   225b8:	6018      	str	r0, [r3, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   225ba:	469a      	mov	sl, r3
   225bc:	b970      	cbnz	r0, 225dc <main+0x64>
   225be:	4985      	ldr	r1, [pc, #532]	; (227d4 <main+0x25c>)
   225c0:	f240 632d 	movw	r3, #1581	; 0x62d
   225c4:	4a84      	ldr	r2, [pc, #528]	; (227d8 <main+0x260>)
   225c6:	4885      	ldr	r0, [pc, #532]	; (227dc <main+0x264>)
   225c8:	f021 fe82 	bl	442d0 <printk>
   225cc:	4884      	ldr	r0, [pc, #528]	; (227e0 <main+0x268>)
   225ce:	f021 fe7f 	bl	442d0 <printk>
   225d2:	f240 612d 	movw	r1, #1581	; 0x62d
   225d6:	4880      	ldr	r0, [pc, #512]	; (227d8 <main+0x260>)
   225d8:	f022 f894 	bl	44704 <assert_post_action>
	ret = cloud_init(cloud_backend, cloud_event_handler);
   225dc:	f8da 0000 	ldr.w	r0, [sl]
	if (backend == NULL || backend->api == NULL ||
   225e0:	2800      	cmp	r0, #0
   225e2:	f000 80be 	beq.w	22762 <main+0x1ea>
   225e6:	6803      	ldr	r3, [r0, #0]
   225e8:	2b00      	cmp	r3, #0
   225ea:	f000 80ba 	beq.w	22762 <main+0x1ea>
	    backend->api->init == NULL) {
   225ee:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   225f0:	2b00      	cmp	r3, #0
   225f2:	f000 80b6 	beq.w	22762 <main+0x1ea>
	return backend->api->init(backend, handler);
   225f6:	497b      	ldr	r1, [pc, #492]	; (227e4 <main+0x26c>)
   225f8:	4798      	blx	r3
	if (ret) {
   225fa:	4682      	mov	sl, r0
   225fc:	b168      	cbz	r0, 2261a <main+0xa2>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   225fe:	2301      	movs	r3, #1
   22600:	f04f 0000 	mov.w	r0, #0
   22604:	f363 0007 	bfi	r0, r3, #0, #8
   22608:	f364 108f 	bfi	r0, r4, #6, #10
   2260c:	4652      	mov	r2, sl
   2260e:	4976      	ldr	r1, [pc, #472]	; (227e8 <main+0x270>)
   22610:	f022 f889 	bl	44726 <log_string_sync>
		cloud_error_handler(ret);
   22614:	4650      	mov	r0, sl
   22616:	f021 fcae 	bl	43f76 <cloud_error_handler>
	ret = cloud_decode_init(cloud_cmd_handler);
   2261a:	4874      	ldr	r0, [pc, #464]	; (227ec <main+0x274>)
   2261c:	f000 fefa 	bl	23414 <cloud_decode_init>
	if (ret) {
   22620:	4682      	mov	sl, r0
   22622:	b168      	cbz	r0, 22640 <main+0xc8>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d",
   22624:	2301      	movs	r3, #1
   22626:	f04f 0000 	mov.w	r0, #0
   2262a:	f363 0007 	bfi	r0, r3, #0, #8
   2262e:	f364 108f 	bfi	r0, r4, #6, #10
   22632:	4652      	mov	r2, sl
   22634:	496e      	ldr	r1, [pc, #440]	; (227f0 <main+0x278>)
   22636:	f022 f876 	bl	44726 <log_string_sync>
		cloud_error_handler(ret);
   2263a:	4650      	mov	r0, sl
   2263c:	f021 fc9b 	bl	43f76 <cloud_error_handler>
#endif

	cloud_api_init();

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   22640:	486c      	ldr	r0, [pc, #432]	; (227f4 <main+0x27c>)
   22642:	f000 f9cf 	bl	229e4 <ui_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22646:	2300      	movs	r3, #0
   22648:	4a6b      	ldr	r2, [pc, #428]	; (227f8 <main+0x280>)
   2264a:	496c      	ldr	r1, [pc, #432]	; (227fc <main+0x284>)
   2264c:	6013      	str	r3, [r2, #0]
   2264e:	e9c2 1301 	strd	r1, r3, [r2, #4]
   22652:	4a6b      	ldr	r2, [pc, #428]	; (22800 <main+0x288>)
   22654:	496b      	ldr	r1, [pc, #428]	; (22804 <main+0x28c>)
   22656:	6013      	str	r3, [r2, #0]
   22658:	e9c2 1301 	strd	r1, r3, [r2, #4]
   2265c:	4a6a      	ldr	r2, [pc, #424]	; (22808 <main+0x290>)
   2265e:	496b      	ldr	r1, [pc, #428]	; (2280c <main+0x294>)
	k_delayed_work_init(&send_agps_request_work, send_agps_request);
   22660:	486b      	ldr	r0, [pc, #428]	; (22810 <main+0x298>)
   22662:	e9c2 1301 	strd	r1, r3, [r2, #4]
   22666:	496b      	ldr	r1, [pc, #428]	; (22814 <main+0x29c>)
   22668:	6013      	str	r3, [r2, #0]
   2266a:	f025 fcac 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   2266e:	496a      	ldr	r1, [pc, #424]	; (22818 <main+0x2a0>)
   22670:	486a      	ldr	r0, [pc, #424]	; (2281c <main+0x2a4>)
   22672:	f025 fca8 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   22676:	496a      	ldr	r1, [pc, #424]	; (22820 <main+0x2a8>)
   22678:	486a      	ldr	r0, [pc, #424]	; (22824 <main+0x2ac>)
   2267a:	f025 fca4 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   2267e:	496a      	ldr	r1, [pc, #424]	; (22828 <main+0x2b0>)
   22680:	486a      	ldr	r0, [pc, #424]	; (2282c <main+0x2b4>)
   22682:	f025 fca0 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&device_config_work, device_config_send);
   22686:	496a      	ldr	r1, [pc, #424]	; (22830 <main+0x2b8>)
   22688:	486a      	ldr	r0, [pc, #424]	; (22834 <main+0x2bc>)
   2268a:	f025 fc9c 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&cloud_connect_work, cloud_connect_work_fn);
   2268e:	496a      	ldr	r1, [pc, #424]	; (22838 <main+0x2c0>)
   22690:	486a      	ldr	r0, [pc, #424]	; (2283c <main+0x2c4>)
   22692:	f025 fc98 	bl	47fc6 <k_delayed_work_init>
   22696:	2300      	movs	r3, #0
   22698:	4a69      	ldr	r2, [pc, #420]	; (22840 <main+0x2c8>)
   2269a:	496a      	ldr	r1, [pc, #424]	; (22844 <main+0x2cc>)
   2269c:	6013      	str	r3, [r2, #0]
   2269e:	e9c2 1301 	strd	r1, r3, [r2, #4]
   226a2:	4a69      	ldr	r2, [pc, #420]	; (22848 <main+0x2d0>)
   226a4:	4969      	ldr	r1, [pc, #420]	; (2284c <main+0x2d4>)
   226a6:	6013      	str	r3, [r2, #0]
   226a8:	e9c2 1301 	strd	r1, r3, [r2, #4]
   226ac:	4a68      	ldr	r2, [pc, #416]	; (22850 <main+0x2d8>)
   226ae:	4969      	ldr	r1, [pc, #420]	; (22854 <main+0x2dc>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   226b0:	4869      	ldr	r0, [pc, #420]	; (22858 <main+0x2e0>)
   226b2:	e9c2 1301 	strd	r1, r3, [r2, #4]
   226b6:	4969      	ldr	r1, [pc, #420]	; (2285c <main+0x2e4>)
   226b8:	6013      	str	r3, [r2, #0]
   226ba:	f025 fc84 	bl	47fc6 <k_delayed_work_init>
#endif
	work_init();
#if defined(CONFIG_LTE_LINK_CONTROL)
	lte_lc_register_handler(lte_handler);
   226be:	4868      	ldr	r0, [pc, #416]	; (22860 <main+0x2e8>)
   226c0:	f00b f830 	bl	2d724 <lte_lc_register_handler>
	LOG_INF("Connecting to LTE network.");
   226c4:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 22880 <main+0x308>
	LOG_INF("This may take several minutes.");
   226c8:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 22884 <main+0x30c>
	ui_led_set_pattern(UI_LTE_CONNECTING);
   226cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   226d0:	f000 f982 	bl	229d8 <ui_led_set_pattern>
	LOG_INF("Connecting to LTE network.");
   226d4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   226d8:	f043 0303 	orr.w	r3, r3, #3
   226dc:	f363 0807 	bfi	r8, r3, #0, #8
   226e0:	f364 188f 	bfi	r8, r4, #6, #10
   226e4:	4651      	mov	r1, sl
   226e6:	4640      	mov	r0, r8
   226e8:	f022 f81d 	bl	44726 <log_string_sync>
	LOG_INF("This may take several minutes.");
   226ec:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   226f0:	f043 0303 	orr.w	r3, r3, #3
   226f4:	f363 0907 	bfi	r9, r3, #0, #8
   226f8:	f364 198f 	bfi	r9, r4, #6, #10
   226fc:	4659      	mov	r1, fp
   226fe:	4648      	mov	r0, r9
   22700:	f022 f811 	bl	44726 <log_string_sync>
	int err = lte_lc_init_and_connect();
   22704:	f025 f8e9 	bl	478da <lte_lc_init_and_connect>
	if (err) {
   22708:	b370      	cbz	r0, 22768 <main+0x1f0>
		LOG_ERR("LTE link could not be established.");
   2270a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2270e:	f043 0301 	orr.w	r3, r3, #1
   22712:	f363 0707 	bfi	r7, r3, #0, #8
   22716:	f364 178f 	bfi	r7, r4, #6, #10
   2271a:	4638      	mov	r0, r7
   2271c:	4951      	ldr	r1, [pc, #324]	; (22864 <main+0x2ec>)
   2271e:	f022 f802 	bl	44726 <log_string_sync>
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
	while (modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   22722:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   22726:	f043 0302 	orr.w	r3, r3, #2
   2272a:	f363 0607 	bfi	r6, r3, #0, #8
   2272e:	f364 168f 	bfi	r6, r4, #6, #10
   22732:	4630      	mov	r0, r6
   22734:	494c      	ldr	r1, [pc, #304]	; (22868 <main+0x2f0>)
   22736:	f021 fff6 	bl	44726 <log_string_sync>
		LOG_WRN("Will retry in %d seconds.",
   2273a:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2273e:	f043 0302 	orr.w	r3, r3, #2
   22742:	f363 0507 	bfi	r5, r3, #0, #8
   22746:	f364 158f 	bfi	r5, r4, #6, #10
   2274a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   2274e:	4947      	ldr	r1, [pc, #284]	; (2286c <main+0x2f4>)
   22750:	4628      	mov	r0, r5
   22752:	f021 ffe8 	bl	44726 <log_string_sync>
	return z_impl_k_sleep(timeout);
   22756:	2100      	movs	r1, #0
   22758:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
   2275c:	f01e f872 	bl	40844 <z_impl_k_sleep>
   22760:	e7b4      	b.n	226cc <main+0x154>
		return -ENOTSUP;
   22762:	f06f 0a85 	mvn.w	sl, #133	; 0x85
   22766:	e74a      	b.n	225fe <main+0x86>
	LOG_INF("Connected to LTE network.");
   22768:	2303      	movs	r3, #3
   2276a:	f04f 0000 	mov.w	r0, #0
   2276e:	f363 0007 	bfi	r0, r3, #0, #8
   22772:	493f      	ldr	r1, [pc, #252]	; (22870 <main+0x2f8>)
   22774:	f364 108f 	bfi	r0, r4, #6, #10
   22778:	f021 ffd5 	bl	44726 <log_string_sync>
	ui_led_set_pattern(UI_LTE_CONNECTED);
   2277c:	2004      	movs	r0, #4
   2277e:	f000 f92b 	bl	229d8 <ui_led_set_pattern>
#if defined(CONFIG_LWM2M_CARRIER)
	LOG_INF("Waiting for LWM2M carrier to complete initialization...");
	k_sem_take(&cloud_ready_to_connect, K_FOREVER);
#endif

	date_time_update_async(date_time_event_handler);
   22782:	483c      	ldr	r0, [pc, #240]	; (22874 <main+0x2fc>)
   22784:	f00c fab8 	bl	2ecf8 <date_time_update_async>
	return z_impl_k_sem_take(sem, timeout);
   22788:	f44f 22f0 	mov.w	r2, #491520	; 0x78000
   2278c:	2300      	movs	r3, #0
   2278e:	483a      	ldr	r0, [pc, #232]	; (22878 <main+0x300>)
   22790:	f01e f8d8 	bl	40944 <z_impl_k_sem_take>

	ret = k_sem_take(&date_time_obtained, K_SECONDS(DATE_TIME_TIMEOUT_S));
	if (ret) {
   22794:	b150      	cbz	r0, 227ac <main+0x234>
		LOG_WRN("Date time, no callback event within %d seconds",
   22796:	f04f 0000 	mov.w	r0, #0
   2279a:	2302      	movs	r3, #2
   2279c:	f363 0007 	bfi	r0, r3, #0, #8
   227a0:	f364 108f 	bfi	r0, r4, #6, #10
   227a4:	220f      	movs	r2, #15
   227a6:	4935      	ldr	r1, [pc, #212]	; (2287c <main+0x304>)
   227a8:	f021 ffbd 	bl	44726 <log_string_sync>
			DATE_TIME_TIMEOUT_S);
	}

	connect_to_cloud(0);
}
   227ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	connect_to_cloud(0);
   227b0:	2000      	movs	r0, #0
   227b2:	f7ff bc21 	b.w	21ff8 <connect_to_cloud>
   227b6:	bf00      	nop
   227b8:	00049798 	.word	0x00049798
   227bc:	00049788 	.word	0x00049788
   227c0:	0004b2c8 	.word	0x0004b2c8
   227c4:	2002d340 	.word	0x2002d340
   227c8:	20020e60 	.word	0x20020e60
   227cc:	0004b2de 	.word	0x0004b2de
   227d0:	2002498c 	.word	0x2002498c
   227d4:	0004b31e 	.word	0x0004b31e
   227d8:	0004b2e8 	.word	0x0004b2e8
   227dc:	0004b33b 	.word	0x0004b33b
   227e0:	0004b358 	.word	0x0004b358
   227e4:	00022275 	.word	0x00022275
   227e8:	0004b376 	.word	0x0004b376
   227ec:	000216d5 	.word	0x000216d5
   227f0:	0004b3a8 	.word	0x0004b3a8
   227f4:	00021149 	.word	0x00021149
   227f8:	200249d4 	.word	0x200249d4
   227fc:	00043f87 	.word	0x00043f87
   22800:	200249bc 	.word	0x200249bc
   22804:	00021099 	.word	0x00021099
   22808:	200249c8 	.word	0x200249c8
   2280c:	00021881 	.word	0x00021881
   22810:	20021988 	.word	0x20021988
   22814:	0001d279 	.word	0x0001d279
   22818:	00021105 	.word	0x00021105
   2281c:	20021040 	.word	0x20021040
   22820:	00043f6d 	.word	0x00043f6d
   22824:	20020f78 	.word	0x20020f78
   22828:	00020e2d 	.word	0x00020e2d
   2282c:	20020fa8 	.word	0x20020fa8
   22830:	00021ccd 	.word	0x00021ccd
   22834:	20020fd8 	.word	0x20020fd8
   22838:	00021f2d 	.word	0x00021f2d
   2283c:	20020f48 	.word	0x20020f48
   22840:	20024994 	.word	0x20024994
   22844:	00021bc5 	.word	0x00021bc5
   22848:	200249a0 	.word	0x200249a0
   2284c:	00021b51 	.word	0x00021b51
   22850:	200249ac 	.word	0x200249ac
   22854:	000210a5 	.word	0x000210a5
   22858:	20021958 	.word	0x20021958
   2285c:	00021025 	.word	0x00021025
   22860:	0002120d 	.word	0x0002120d
   22864:	0004b3fd 	.word	0x0004b3fd
   22868:	0004b420 	.word	0x0004b420
   2286c:	0004b444 	.word	0x0004b444
   22870:	0004b45e 	.word	0x0004b45e
   22874:	00021635 	.word	0x00021635
   22878:	20020d44 	.word	0x20020d44
   2287c:	0004b478 	.word	0x0004b478
   22880:	0004b3e2 	.word	0x0004b3e2
   22884:	0004bcc6 	.word	0x0004bcc6

00022888 <sensor_trigger_handler.isra.0>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   22888:	4803      	ldr	r0, [pc, #12]	; (22898 <sensor_trigger_handler.isra.0+0x10>)
   2288a:	2200      	movs	r2, #0
   2288c:	2300      	movs	r3, #0
   2288e:	4903      	ldr	r1, [pc, #12]	; (2289c <sensor_trigger_handler.isra.0+0x14>)
   22890:	6800      	ldr	r0, [r0, #0]
   22892:	f01e ba7f 	b.w	40d94 <k_delayed_work_submit_to_queue>
   22896:	bf00      	nop
   22898:	200249e8 	.word	0x200249e8
   2289c:	200219d0 	.word	0x200219d0

000228a0 <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   228a0:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   228a2:	b340      	cbz	r0, 228f6 <motion_init_and_start+0x56>
   228a4:	b339      	cbz	r1, 228f6 <motion_init_and_start+0x56>
		return -EINVAL;
	}

	int err;

	motion_work_q = work_q;
   228a6:	4b15      	ldr	r3, [pc, #84]	; (228fc <motion_init_and_start+0x5c>)
   228a8:	6018      	str	r0, [r3, #0]
	handler = motion_handler;
   228aa:	4b15      	ldr	r3, [pc, #84]	; (22900 <motion_init_and_start+0x60>)

	k_delayed_work_init(&motion_work, motion_work_q_handler);
   228ac:	4815      	ldr	r0, [pc, #84]	; (22904 <motion_init_and_start+0x64>)
	handler = motion_handler;
   228ae:	6019      	str	r1, [r3, #0]
	k_delayed_work_init(&motion_work, motion_work_q_handler);
   228b0:	4915      	ldr	r1, [pc, #84]	; (22908 <motion_init_and_start+0x68>)
   228b2:	f025 fb88 	bl	47fc6 <k_delayed_work_init>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   228b6:	4815      	ldr	r0, [pc, #84]	; (2290c <motion_init_and_start+0x6c>)
   228b8:	f01b ff42 	bl	3e740 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   228bc:	4b14      	ldr	r3, [pc, #80]	; (22910 <motion_init_and_start+0x70>)
   228be:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   228c0:	b118      	cbz	r0, 228ca <motion_init_and_start+0x2a>

	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
   228c2:	f7ff ffe1 	bl	22888 <sensor_trigger_handler.isra.0>
	return 0;
   228c6:	2000      	movs	r0, #0
}
   228c8:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not get %s device",
   228ca:	2301      	movs	r3, #1
   228cc:	f04f 0400 	mov.w	r4, #0
   228d0:	4a10      	ldr	r2, [pc, #64]	; (22914 <motion_init_and_start+0x74>)
   228d2:	f363 0407 	bfi	r4, r3, #0, #8
   228d6:	4b10      	ldr	r3, [pc, #64]	; (22918 <motion_init_and_start+0x78>)
   228d8:	480c      	ldr	r0, [pc, #48]	; (2290c <motion_init_and_start+0x6c>)
   228da:	1a9b      	subs	r3, r3, r2
   228dc:	08db      	lsrs	r3, r3, #3
   228de:	f363 148f 	bfi	r4, r3, #6, #10
   228e2:	f021 ff33 	bl	4474c <log_strdup>
   228e6:	490d      	ldr	r1, [pc, #52]	; (2291c <motion_init_and_start+0x7c>)
   228e8:	4602      	mov	r2, r0
   228ea:	4620      	mov	r0, r4
   228ec:	f021 ff1b 	bl	44726 <log_string_sync>
		return -ENODEV;
   228f0:	f06f 0012 	mvn.w	r0, #18
   228f4:	e7e8      	b.n	228c8 <motion_init_and_start+0x28>
		return -EINVAL;
   228f6:	f06f 0015 	mvn.w	r0, #21
   228fa:	e7e5      	b.n	228c8 <motion_init_and_start+0x28>
   228fc:	200249e8 	.word	0x200249e8
   22900:	200249e4 	.word	0x200249e4
   22904:	200219d0 	.word	0x200219d0
   22908:	0001d341 	.word	0x0001d341
   2290c:	0004b7e2 	.word	0x0004b7e2
   22910:	200249e0 	.word	0x200249e0
   22914:	00049788 	.word	0x00049788
   22918:	00049858 	.word	0x00049858
   2291c:	0004b7ed 	.word	0x0004b7ed

00022920 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   22920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22922:	4605      	mov	r5, r0
   22924:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   22926:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   22928:	4f11      	ldr	r7, [pc, #68]	; (22970 <button_handler+0x50>)
	while (has_changed) {
   2292a:	b90c      	cbnz	r4, 22930 <button_handler+0x10>
	}
}
   2292c:	b003      	add	sp, #12
   2292e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22930:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   22932:	1c59      	adds	r1, r3, #1
   22934:	fa24 f303 	lsr.w	r3, r4, r3
   22938:	f013 0001 	ands.w	r0, r3, #1
   2293c:	b2ca      	uxtb	r2, r1
   2293e:	d103      	bne.n	22948 <button_handler+0x28>
		for (uint8_t i = 0; i < 32; i++) {
   22940:	2920      	cmp	r1, #32
   22942:	460b      	mov	r3, r1
   22944:	d1f5      	bne.n	22932 <button_handler+0x12>
		btn_num = 0;
   22946:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   22948:	1e53      	subs	r3, r2, #1
   2294a:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   2294e:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   22952:	43db      	mvns	r3, r3
   22954:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   22958:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   2295a:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   2295e:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   22960:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   22964:	683b      	ldr	r3, [r7, #0]
   22966:	e912 0003 	ldmdb	r2, {r0, r1}
   2296a:	4798      	blx	r3
   2296c:	e7dd      	b.n	2292a <button_handler+0xa>
   2296e:	bf00      	nop
   22970:	200249ec 	.word	0x200249ec

00022974 <leds_update>:
{
   22974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	led_on = !led_on;
   22978:	4d12      	ldr	r5, [pc, #72]	; (229c4 <leds_update+0x50>)
	led_on_mask = UI_LED_GET_ON(current_led_state);
   2297a:	4b13      	ldr	r3, [pc, #76]	; (229c8 <leds_update+0x54>)
	led_on = !led_on;
   2297c:	782a      	ldrb	r2, [r5, #0]
	led_on_mask = UI_LED_GET_ON(current_led_state);
   2297e:	881c      	ldrh	r4, [r3, #0]
	led_on = !led_on;
   22980:	f082 0201 	eor.w	r2, r2, #1
   22984:	f344 2107 	sbfx	r1, r4, #8, #8
{
   22988:	4607      	mov	r7, r0
	led_on = !led_on;
   2298a:	702a      	strb	r2, [r5, #0]
	if (led_on) {
   2298c:	b264      	sxtb	r4, r4
   2298e:	b19a      	cbz	r2, 229b8 <leds_update+0x44>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   22990:	430c      	orrs	r4, r1
	if (led_on_mask != current_led_on_mask) {
   22992:	4e0e      	ldr	r6, [pc, #56]	; (229cc <leds_update+0x58>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   22994:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   22996:	7833      	ldrb	r3, [r6, #0]
   22998:	42a3      	cmp	r3, r4
   2299a:	d003      	beq.n	229a4 <leds_update+0x30>
		dk_set_leds(led_on_mask);
   2299c:	4620      	mov	r0, r4
   2299e:	f024 fe4d 	bl	4763c <dk_set_leds>
		current_led_on_mask = led_on_mask;
   229a2:	7034      	strb	r4, [r6, #0]
	if (work) {
   229a4:	b15f      	cbz	r7, 229be <leds_update+0x4a>
}
   229a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   229aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   229ae:	2300      	movs	r3, #0
   229b0:	4907      	ldr	r1, [pc, #28]	; (229d0 <leds_update+0x5c>)
   229b2:	4808      	ldr	r0, [pc, #32]	; (229d4 <leds_update+0x60>)
   229b4:	f01e b9ee 	b.w	40d94 <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   229b8:	ea24 0401 	bic.w	r4, r4, r1
   229bc:	e7e9      	b.n	22992 <leds_update+0x1e>
}
   229be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   229c2:	bf00      	nop
   229c4:	2002b4a9 	.word	0x2002b4a9
   229c8:	2002a9b8 	.word	0x2002a9b8
   229cc:	2002b4a8 	.word	0x2002b4a8
   229d0:	20021a00 	.word	0x20021a00
   229d4:	20024888 	.word	0x20024888

000229d8 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   229d8:	4b01      	ldr	r3, [pc, #4]	; (229e0 <ui_led_set_pattern+0x8>)
   229da:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   229dc:	4770      	bx	lr
   229de:	bf00      	nop
   229e0:	2002a9b8 	.word	0x2002a9b8

000229e4 <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   229e4:	b538      	push	{r3, r4, r5, lr}
   229e6:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   229e8:	f009 fbf4 	bl	2c1d4 <dk_leds_init>
	if (err) {
   229ec:	4604      	mov	r4, r0
   229ee:	b180      	cbz	r0, 22a12 <ui_init+0x2e>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   229f0:	2301      	movs	r3, #1
   229f2:	f04f 0000 	mov.w	r0, #0
   229f6:	4a21      	ldr	r2, [pc, #132]	; (22a7c <ui_init+0x98>)
   229f8:	f363 0007 	bfi	r0, r3, #0, #8
   229fc:	4b20      	ldr	r3, [pc, #128]	; (22a80 <ui_init+0x9c>)
   229fe:	4921      	ldr	r1, [pc, #132]	; (22a84 <ui_init+0xa0>)
   22a00:	1a9b      	subs	r3, r3, r2
   22a02:	4622      	mov	r2, r4
   22a04:	08db      	lsrs	r3, r3, #3
   22a06:	f363 108f 	bfi	r0, r3, #6, #10
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   22a0a:	f021 fe8c 	bl	44726 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   22a0e:	4620      	mov	r0, r4
   22a10:	bd38      	pop	{r3, r4, r5, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   22a12:	210f      	movs	r1, #15
   22a14:	f024 fe08 	bl	47628 <dk_set_leds_state>
	if (err) {
   22a18:	4604      	mov	r4, r0
   22a1a:	b168      	cbz	r0, 22a38 <ui_init+0x54>
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   22a1c:	2301      	movs	r3, #1
   22a1e:	f04f 0000 	mov.w	r0, #0
   22a22:	4a16      	ldr	r2, [pc, #88]	; (22a7c <ui_init+0x98>)
   22a24:	f363 0007 	bfi	r0, r3, #0, #8
   22a28:	4b15      	ldr	r3, [pc, #84]	; (22a80 <ui_init+0x9c>)
   22a2a:	4917      	ldr	r1, [pc, #92]	; (22a88 <ui_init+0xa4>)
   22a2c:	1a9b      	subs	r3, r3, r2
   22a2e:	08db      	lsrs	r3, r3, #3
   22a30:	f363 108f 	bfi	r0, r3, #6, #10
   22a34:	4622      	mov	r2, r4
   22a36:	e7e8      	b.n	22a0a <ui_init+0x26>
	k_delayed_work_init(&leds_update_work, leds_update);
   22a38:	4914      	ldr	r1, [pc, #80]	; (22a8c <ui_init+0xa8>)
   22a3a:	4815      	ldr	r0, [pc, #84]	; (22a90 <ui_init+0xac>)
   22a3c:	f025 fac3 	bl	47fc6 <k_delayed_work_init>
   22a40:	2200      	movs	r2, #0
   22a42:	2300      	movs	r3, #0
   22a44:	4912      	ldr	r1, [pc, #72]	; (22a90 <ui_init+0xac>)
   22a46:	4813      	ldr	r0, [pc, #76]	; (22a94 <ui_init+0xb0>)
   22a48:	f01e f9a4 	bl	40d94 <k_delayed_work_submit_to_queue>
	if (cb) {
   22a4c:	2d00      	cmp	r5, #0
   22a4e:	d0de      	beq.n	22a0e <ui_init+0x2a>
		callback  = cb;
   22a50:	4b11      	ldr	r3, [pc, #68]	; (22a98 <ui_init+0xb4>)
		err = dk_buttons_init(button_handler);
   22a52:	4812      	ldr	r0, [pc, #72]	; (22a9c <ui_init+0xb8>)
		callback  = cb;
   22a54:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   22a56:	f009 fc15 	bl	2c284 <dk_buttons_init>
		if (err) {
   22a5a:	4604      	mov	r4, r0
   22a5c:	2800      	cmp	r0, #0
   22a5e:	d0d6      	beq.n	22a0e <ui_init+0x2a>
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   22a60:	2301      	movs	r3, #1
   22a62:	f04f 0000 	mov.w	r0, #0
   22a66:	4a05      	ldr	r2, [pc, #20]	; (22a7c <ui_init+0x98>)
   22a68:	f363 0007 	bfi	r0, r3, #0, #8
   22a6c:	4b04      	ldr	r3, [pc, #16]	; (22a80 <ui_init+0x9c>)
   22a6e:	490c      	ldr	r1, [pc, #48]	; (22aa0 <ui_init+0xbc>)
   22a70:	1a9b      	subs	r3, r3, r2
   22a72:	08db      	lsrs	r3, r3, #3
   22a74:	f363 108f 	bfi	r0, r3, #6, #10
   22a78:	4622      	mov	r2, r4
   22a7a:	e7c6      	b.n	22a0a <ui_init+0x26>
   22a7c:	00049788 	.word	0x00049788
   22a80:	000498d8 	.word	0x000498d8
   22a84:	0004b844 	.word	0x0004b844
   22a88:	0004b86d 	.word	0x0004b86d
   22a8c:	00022975 	.word	0x00022975
   22a90:	20021a00 	.word	0x20021a00
   22a94:	20024888 	.word	0x20024888
   22a98:	200249ec 	.word	0x200249ec
   22a9c:	00022921 	.word	0x00022921
   22aa0:	0004b895 	.word	0x0004b895

00022aa4 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   22aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   22aa6:	4616      	mov	r6, r2
   22aa8:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   22aaa:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22aac:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   22aae:	4c0a      	ldr	r4, [pc, #40]	; (22ad8 <cloud_set_chan_cfg_item+0x34>)
   22ab0:	fb02 f503 	mul.w	r5, r2, r3
   22ab4:	5d2d      	ldrb	r5, [r5, r4]
   22ab6:	4285      	cmp	r5, r0
   22ab8:	d108      	bne.n	22acc <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   22aba:	2206      	movs	r2, #6
	return 0;
   22abc:	2000      	movs	r0, #0
	cfg->value[type] = value;
   22abe:	fb02 1303 	mla	r3, r2, r3, r1
   22ac2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   22ac6:	e9c3 6702 	strd	r6, r7, [r3, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   22aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22acc:	3301      	adds	r3, #1
   22ace:	2b0a      	cmp	r3, #10
   22ad0:	d1ee      	bne.n	22ab0 <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   22ad2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22ad6:	e7f8      	b.n	22aca <cloud_set_chan_cfg_item+0x26>
   22ad8:	20020018 	.word	0x20020018

00022adc <cloud_cmd_handle_sensor_set_chan_cfg>:

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22adc:	7803      	ldrb	r3, [r0, #0]
{
   22ade:	b570      	push	{r4, r5, r6, lr}
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22ae0:	2b08      	cmp	r3, #8
{
   22ae2:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   22ae4:	d143      	bne.n	22b6e <cloud_cmd_handle_sensor_set_chan_cfg+0x92>
		return -EINVAL;
	}

	switch (cmd->type) {
   22ae6:	7883      	ldrb	r3, [r0, #2]
   22ae8:	2b02      	cmp	r3, #2
   22aea:	d00f      	beq.n	22b0c <cloud_cmd_handle_sensor_set_chan_cfg+0x30>
   22aec:	2b03      	cmp	r3, #3
   22aee:	d028      	beq.n	22b42 <cloud_cmd_handle_sensor_set_chan_cfg+0x66>
   22af0:	2b01      	cmp	r3, #1
   22af2:	d13f      	bne.n	22b74 <cloud_cmd_handle_sensor_set_chan_cfg+0x98>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   22af4:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22af8:	f7f9 fdf4 	bl	1c6e4 <__aeabi_i2d>
   22afc:	460b      	mov	r3, r1
   22afe:	2100      	movs	r1, #0
   22b00:	4602      	mov	r2, r0
   22b02:	7860      	ldrb	r0, [r4, #1]
	default:
		break;
	}

	return err;
}
   22b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   22b08:	f7ff bfcc 	b.w	22aa4 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   22b0c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22b10:	7865      	ldrb	r5, [r4, #1]
   22b12:	1c42      	adds	r2, r0, #1
   22b14:	d10e      	bne.n	22b34 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
			err = cloud_set_chan_cfg_item(
   22b16:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22b1a:	2103      	movs	r1, #3
   22b1c:	4628      	mov	r0, r5
   22b1e:	f7ff ffc1 	bl	22aa4 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   22b22:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   22b24:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   22b26:	2104      	movs	r1, #4
   22b28:	4b14      	ldr	r3, [pc, #80]	; (22b7c <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
			cloud_set_chan_cfg_item(
   22b2a:	7860      	ldrb	r0, [r4, #1]
   22b2c:	f7ff ffba 	bl	22aa4 <cloud_set_chan_cfg_item>
}
   22b30:	4628      	mov	r0, r5
   22b32:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   22b34:	f7f9 fdd6 	bl	1c6e4 <__aeabi_i2d>
   22b38:	460b      	mov	r3, r1
   22b3a:	4602      	mov	r2, r0
   22b3c:	2104      	movs	r1, #4
			err = cloud_set_chan_cfg_item(
   22b3e:	4628      	mov	r0, r5
   22b40:	e7e0      	b.n	22b04 <cloud_cmd_handle_sensor_set_chan_cfg+0x28>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   22b42:	f990 0010 	ldrsb.w	r0, [r0, #16]
   22b46:	7865      	ldrb	r5, [r4, #1]
   22b48:	1c43      	adds	r3, r0, #1
   22b4a:	d10a      	bne.n	22b62 <cloud_cmd_handle_sensor_set_chan_cfg+0x86>
			err = cloud_set_chan_cfg_item(
   22b4c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22b50:	2101      	movs	r1, #1
   22b52:	4628      	mov	r0, r5
   22b54:	f7ff ffa6 	bl	22aa4 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   22b58:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   22b5a:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   22b5c:	4b07      	ldr	r3, [pc, #28]	; (22b7c <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
   22b5e:	2102      	movs	r1, #2
   22b60:	e7e3      	b.n	22b2a <cloud_cmd_handle_sensor_set_chan_cfg+0x4e>
			err = cloud_set_chan_cfg_item(
   22b62:	f7f9 fdbf 	bl	1c6e4 <__aeabi_i2d>
   22b66:	460b      	mov	r3, r1
   22b68:	4602      	mov	r2, r0
   22b6a:	2102      	movs	r1, #2
   22b6c:	e7e7      	b.n	22b3e <cloud_cmd_handle_sensor_set_chan_cfg+0x62>
		return -EINVAL;
   22b6e:	f06f 0515 	mvn.w	r5, #21
   22b72:	e7dd      	b.n	22b30 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
	int err = -ENOTSUP;
   22b74:	f06f 0585 	mvn.w	r5, #133	; 0x85
   22b78:	e7da      	b.n	22b30 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
   22b7a:	bf00      	nop
   22b7c:	3ff00000 	.word	0x3ff00000

00022b80 <cloud_cmd_parse_type>:
{
   22b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22b84:	460f      	mov	r7, r1
   22b86:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   22b88:	4606      	mov	r6, r0
   22b8a:	2800      	cmp	r0, #0
   22b8c:	f000 8084 	beq.w	22c98 <cloud_cmd_parse_type+0x118>
	if (type_obj != NULL) {
   22b90:	7903      	ldrb	r3, [r0, #4]
   22b92:	2900      	cmp	r1, #0
   22b94:	d07e      	beq.n	22c94 <cloud_cmd_parse_type+0x114>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   22b96:	2b07      	cmp	r3, #7
   22b98:	d077      	beq.n	22c8a <cloud_cmd_parse_type+0x10a>
			decoded_obj = json_object_decode(type_obj,
   22b9a:	4a4a      	ldr	r2, [pc, #296]	; (22cc4 <cloud_cmd_parse_type+0x144>)
   22b9c:	4638      	mov	r0, r7
   22b9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   22ba2:	f021 fa09 	bl	43fb8 <json_object_decode>
			if (!decoded_obj) {
   22ba6:	4605      	mov	r5, r0
   22ba8:	2800      	cmp	r0, #0
   22baa:	f000 8085 	beq.w	22cb8 <cloud_cmd_parse_type+0x138>
		switch (type_cmd->type) {
   22bae:	7933      	ldrb	r3, [r6, #4]
   22bb0:	3b01      	subs	r3, #1
   22bb2:	2b06      	cmp	r3, #6
   22bb4:	f200 8083 	bhi.w	22cbe <cloud_cmd_parse_type+0x13e>
   22bb8:	e8df f003 	tbb	[pc, r3]
   22bbc:	2f2f2f04 	.word	0x2f2f2f04
   22bc0:	4f3f      	.short	0x4f3f
   22bc2:	67          	.byte	0x67
   22bc3:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   22bc4:	f024 f9a3 	bl	46f0e <cJSON_IsNull>
   22bc8:	b1b8      	cbz	r0, 22bfa <cloud_cmd_parse_type+0x7a>
				parsed_cmd->data.sv.state =
   22bca:	2300      	movs	r3, #0
   22bcc:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   22bce:	7935      	ldrb	r5, [r6, #4]
   22bd0:	2d04      	cmp	r5, #4
   22bd2:	d10f      	bne.n	22bf4 <cloud_cmd_parse_type+0x74>
   22bd4:	f994 3010 	ldrsb.w	r3, [r4, #16]
   22bd8:	3301      	adds	r3, #1
   22bda:	d10b      	bne.n	22bf4 <cloud_cmd_parse_type+0x74>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   22bdc:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   22be0:	2200      	movs	r2, #0
   22be2:	2300      	movs	r3, #0
   22be4:	4640      	mov	r0, r8
   22be6:	4649      	mov	r1, r9
   22be8:	f7fa f84e 	bl	1cc88 <__aeabi_dcmpeq>
   22bec:	2800      	cmp	r0, #0
   22bee:	d056      	beq.n	22c9e <cloud_cmd_parse_type+0x11e>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   22bf0:	2300      	movs	r3, #0
   22bf2:	7423      	strb	r3, [r4, #16]
	parsed_cmd->type = type_cmd->type;
   22bf4:	70a5      	strb	r5, [r4, #2]
	return 0;
   22bf6:	2000      	movs	r0, #0
   22bf8:	e005      	b.n	22c06 <cloud_cmd_parse_type+0x86>
			} else if (cJSON_IsBool(decoded_obj)) {
   22bfa:	4628      	mov	r0, r5
   22bfc:	f024 f980 	bl	46f00 <cJSON_IsBool>
   22c00:	b918      	cbnz	r0, 22c0a <cloud_cmd_parse_type+0x8a>
				return -ESRCH;
   22c02:	f06f 0002 	mvn.w	r0, #2
}
   22c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					cJSON_IsTrue(decoded_obj) ?
   22c0a:	4628      	mov	r0, r5
   22c0c:	f024 f972 	bl	46ef4 <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   22c10:	3000      	adds	r0, #0
   22c12:	bf18      	it	ne
   22c14:	2001      	movne	r0, #1
   22c16:	7420      	strb	r0, [r4, #16]
   22c18:	e7d9      	b.n	22bce <cloud_cmd_parse_type+0x4e>
			if (cJSON_IsNull(decoded_obj)) {
   22c1a:	f024 f978 	bl	46f0e <cJSON_IsNull>
   22c1e:	2800      	cmp	r0, #0
   22c20:	d1d3      	bne.n	22bca <cloud_cmd_parse_type+0x4a>
			} else if (cJSON_IsNumber(decoded_obj)) {
   22c22:	4628      	mov	r0, r5
   22c24:	f024 f979 	bl	46f1a <cJSON_IsNumber>
   22c28:	2800      	cmp	r0, #0
   22c2a:	d0ea      	beq.n	22c02 <cloud_cmd_parse_type+0x82>
				parsed_cmd->data.sv.state =
   22c2c:	23ff      	movs	r3, #255	; 0xff
   22c2e:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   22c30:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   22c34:	e9c4 2302 	strd	r2, r3, [r4, #8]
   22c38:	e7c9      	b.n	22bce <cloud_cmd_parse_type+0x4e>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   22c3a:	f024 f97c 	bl	46f36 <cJSON_GetStringValue>
   22c3e:	2800      	cmp	r0, #0
   22c40:	d0df      	beq.n	22c02 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   22c42:	4628      	mov	r0, r5
   22c44:	f024 f977 	bl	46f36 <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   22c48:	2210      	movs	r2, #16
   22c4a:	2100      	movs	r1, #0
   22c4c:	f01f ff34 	bl	42ab8 <strtol>
   22c50:	f7f9 fd48 	bl	1c6e4 <__aeabi_i2d>
   22c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   22c58:	e7b9      	b.n	22bce <cloud_cmd_parse_type+0x4e>
	if (!cJSON_IsObject(data_obj)) {
   22c5a:	f024 f97a 	bl	46f52 <cJSON_IsObject>
   22c5e:	2800      	cmp	r0, #0
   22c60:	d0cf      	beq.n	22c02 <cloud_cmd_parse_type+0x82>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   22c62:	4919      	ldr	r1, [pc, #100]	; (22cc8 <cloud_cmd_parse_type+0x148>)
   22c64:	4628      	mov	r0, r5
   22c66:	f021 f9a7 	bl	43fb8 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   22c6a:	f024 f964 	bl	46f36 <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   22c6e:	4917      	ldr	r1, [pc, #92]	; (22ccc <cloud_cmd_parse_type+0x14c>)
	params->blob = cJSON_GetStringValue(blob);
   22c70:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   22c72:	4628      	mov	r0, r5
   22c74:	f021 f9a0 	bl	43fb8 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   22c78:	f024 f95d 	bl	46f36 <cJSON_GetStringValue>
			-ESRCH : 0);
   22c7c:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   22c7e:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   22c80:	2b00      	cmp	r3, #0
   22c82:	d0be      	beq.n	22c02 <cloud_cmd_parse_type+0x82>
			if (parsed_cmd->data.data_string == NULL) {
   22c84:	2800      	cmp	r0, #0
   22c86:	d1a2      	bne.n	22bce <cloud_cmd_parse_type+0x4e>
   22c88:	e7bb      	b.n	22c02 <cloud_cmd_parse_type+0x82>
				cJSON_GetStringValue(type_obj);
   22c8a:	4638      	mov	r0, r7
   22c8c:	f024 f953 	bl	46f36 <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   22c90:	60a0      	str	r0, [r4, #8]
   22c92:	e7f7      	b.n	22c84 <cloud_cmd_parse_type+0x104>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   22c94:	2b00      	cmp	r3, #0
   22c96:	d09a      	beq.n	22bce <cloud_cmd_parse_type+0x4e>
		return -EINVAL;
   22c98:	f06f 0015 	mvn.w	r0, #21
   22c9c:	e7b3      	b.n	22c06 <cloud_cmd_parse_type+0x86>
		} else if (parsed_cmd->data.sv.value <
   22c9e:	2600      	movs	r6, #0
   22ca0:	4f0b      	ldr	r7, [pc, #44]	; (22cd0 <cloud_cmd_parse_type+0x150>)
   22ca2:	4632      	mov	r2, r6
   22ca4:	463b      	mov	r3, r7
   22ca6:	4640      	mov	r0, r8
   22ca8:	4649      	mov	r1, r9
   22caa:	f7f9 fff7 	bl	1cc9c <__aeabi_dcmplt>
   22cae:	2800      	cmp	r0, #0
   22cb0:	d0a0      	beq.n	22bf4 <cloud_cmd_parse_type+0x74>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   22cb2:	e9c4 6702 	strd	r6, r7, [r4, #8]
   22cb6:	e79d      	b.n	22bf4 <cloud_cmd_parse_type+0x74>
				return -ENOENT; /* Command not found */
   22cb8:	f06f 0001 	mvn.w	r0, #1
   22cbc:	e7a3      	b.n	22c06 <cloud_cmd_parse_type+0x86>
			return -ENOTSUP;
   22cbe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22cc2:	e7a0      	b.n	22c06 <cloud_cmd_parse_type+0x86>
   22cc4:	00049b60 	.word	0x00049b60
   22cc8:	0004b8e6 	.word	0x0004b8e6
   22ccc:	0004b8eb 	.word	0x0004b8eb
   22cd0:	40140000 	.word	0x40140000

00022cd4 <cloud_encode_data>:
{
   22cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22cd8:	4616      	mov	r6, r2
	int64_t data_ts = channel->ts;
   22cda:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   22cde:	e9cd 2300 	strd	r2, r3, [sp]
	if (channel == NULL || channel->data.buf == NULL ||
   22ce2:	6843      	ldr	r3, [r0, #4]
{
   22ce4:	4680      	mov	r8, r0
   22ce6:	460f      	mov	r7, r1
	if (channel == NULL || channel->data.buf == NULL ||
   22ce8:	2b00      	cmp	r3, #0
   22cea:	f000 8085 	beq.w	22df8 <cloud_encode_data+0x124>
   22cee:	6883      	ldr	r3, [r0, #8]
   22cf0:	2b00      	cmp	r3, #0
   22cf2:	f000 8081 	beq.w	22df8 <cloud_encode_data+0x124>
	    channel->data.len == 0 || output == NULL ||
   22cf6:	2e00      	cmp	r6, #0
   22cf8:	d07e      	beq.n	22df8 <cloud_encode_data+0x124>
   22cfa:	290a      	cmp	r1, #10
   22cfc:	d87c      	bhi.n	22df8 <cloud_encode_data+0x124>
	cJSON *root_obj = cJSON_CreateObject();
   22cfe:	f008 fa71 	bl	2b1e4 <cJSON_CreateObject>
	if (root_obj == NULL) {
   22d02:	4605      	mov	r5, r0
   22d04:	b938      	cbnz	r0, 22d16 <cloud_encode_data+0x42>
		cJSON_Delete(root_obj);
   22d06:	f008 f999 	bl	2b03c <cJSON_Delete>
		return -ENOMEM;
   22d0a:	f06f 040b 	mvn.w	r4, #11
}
   22d0e:	4620      	mov	r0, r4
   22d10:	b003      	add	sp, #12
   22d12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = date_time_uptime_to_unix_time_ms(&data_ts);
   22d16:	4668      	mov	r0, sp
   22d18:	f00b ff82 	bl	2ec20 <date_time_uptime_to_unix_time_ms>
	if (ret) {
   22d1c:	4602      	mov	r2, r0
   22d1e:	b1d8      	cbz	r0, 22d58 <cloud_encode_data+0x84>
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", ret);
   22d20:	2102      	movs	r1, #2
   22d22:	f04f 0000 	mov.w	r0, #0
   22d26:	4c36      	ldr	r4, [pc, #216]	; (22e00 <cloud_encode_data+0x12c>)
   22d28:	f361 0007 	bfi	r0, r1, #0, #8
   22d2c:	4935      	ldr	r1, [pc, #212]	; (22e04 <cloud_encode_data+0x130>)
   22d2e:	1a64      	subs	r4, r4, r1
   22d30:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   22d34:	f364 108f 	bfi	r0, r4, #6, #10
   22d38:	4933      	ldr	r1, [pc, #204]	; (22e08 <cloud_encode_data+0x134>)
   22d3a:	f021 fcf4 	bl	44726 <log_string_sync>
		LOG_WRN("Clearing timestamp");
   22d3e:	2302      	movs	r3, #2
   22d40:	f04f 0000 	mov.w	r0, #0
   22d44:	f363 0007 	bfi	r0, r3, #0, #8
   22d48:	f364 108f 	bfi	r0, r4, #6, #10
   22d4c:	492f      	ldr	r1, [pc, #188]	; (22e0c <cloud_encode_data+0x138>)
   22d4e:	f021 fcea 	bl	44726 <log_string_sync>
		date_time_timestamp_clear(&data_ts);
   22d52:	4668      	mov	r0, sp
   22d54:	f024 fe4b 	bl	479ee <date_time_timestamp_clear>
			   channel_type_str[channel->type]);
   22d58:	f898 2000 	ldrb.w	r2, [r8]
	json_str = cJSON_CreateString(item);
   22d5c:	4b2c      	ldr	r3, [pc, #176]	; (22e10 <cloud_encode_data+0x13c>)
   22d5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   22d62:	f008 fa1b 	bl	2b19c <cJSON_CreateString>
	if (json_str == NULL) {
   22d66:	4602      	mov	r2, r0
   22d68:	b350      	cbz	r0, 22dc0 <cloud_encode_data+0xec>
	cJSON_AddItemToObject(parent, str, item);
   22d6a:	492a      	ldr	r1, [pc, #168]	; (22e14 <cloud_encode_data+0x140>)
   22d6c:	4628      	mov	r0, r5
   22d6e:	f024 f88c 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22d72:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   22d76:	f8d8 0004 	ldr.w	r0, [r8, #4]
   22d7a:	f008 fa0f 	bl	2b19c <cJSON_CreateString>
	if (json_str == NULL) {
   22d7e:	4602      	mov	r2, r0
   22d80:	b308      	cbz	r0, 22dc6 <cloud_encode_data+0xf2>
	cJSON_AddItemToObject(parent, str, item);
   22d82:	4925      	ldr	r1, [pc, #148]	; (22e18 <cloud_encode_data+0x144>)
   22d84:	4628      	mov	r0, r5
   22d86:	f024 f880 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22d8a:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22d8c:	4b23      	ldr	r3, [pc, #140]	; (22e1c <cloud_encode_data+0x148>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   22d8e:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   22d90:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   22d94:	f008 fa02 	bl	2b19c <cJSON_CreateString>
	if (json_str == NULL) {
   22d98:	4602      	mov	r2, r0
   22d9a:	b1b8      	cbz	r0, 22dcc <cloud_encode_data+0xf8>
	cJSON_AddItemToObject(parent, str, item);
   22d9c:	4920      	ldr	r1, [pc, #128]	; (22e20 <cloud_encode_data+0x14c>)
   22d9e:	4628      	mov	r0, r5
   22da0:	f024 f873 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   22da4:	2300      	movs	r3, #0
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22da6:	e9dd 0100 	ldrd	r0, r1, [sp]
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   22daa:	441c      	add	r4, r3
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   22dac:	f7f9 fcd6 	bl	1c75c <__aeabi_l2d>
	json_num = cJSON_CreateNumber(item);
   22db0:	ec41 0b10 	vmov	d0, r0, r1
   22db4:	f7fa fe98 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   22db8:	4602      	mov	r2, r0
   22dba:	b950      	cbnz	r0, 22dd2 <cloud_encode_data+0xfe>
		cJSON_Delete(root_obj);
   22dbc:	4628      	mov	r0, r5
   22dbe:	e7a2      	b.n	22d06 <cloud_encode_data+0x32>
		return -ENOMEM;
   22dc0:	f06f 090b 	mvn.w	r9, #11
   22dc4:	e7d7      	b.n	22d76 <cloud_encode_data+0xa2>
   22dc6:	f06f 040b 	mvn.w	r4, #11
   22dca:	e7df      	b.n	22d8c <cloud_encode_data+0xb8>
   22dcc:	f06f 030b 	mvn.w	r3, #11
   22dd0:	e7e9      	b.n	22da6 <cloud_encode_data+0xd2>
	cJSON_AddItemToObject(parent, str, item);
   22dd2:	4914      	ldr	r1, [pc, #80]	; (22e24 <cloud_encode_data+0x150>)
   22dd4:	4628      	mov	r0, r5
   22dd6:	f024 f858 	bl	46e8a <cJSON_AddItemToObject>
	if (ret != 0) {
   22dda:	2c00      	cmp	r4, #0
   22ddc:	d1ee      	bne.n	22dbc <cloud_encode_data+0xe8>
	buffer = cJSON_PrintUnformatted(root_obj);
   22dde:	4628      	mov	r0, r5
   22de0:	f024 f836 	bl	46e50 <cJSON_PrintUnformatted>
   22de4:	4607      	mov	r7, r0
	cJSON_Delete(root_obj);
   22de6:	4628      	mov	r0, r5
   22de8:	f008 f928 	bl	2b03c <cJSON_Delete>
	output->buf = buffer;
   22dec:	6037      	str	r7, [r6, #0]
	output->len = strlen(buffer);
   22dee:	4638      	mov	r0, r7
   22df0:	f7fa fa38 	bl	1d264 <strlen>
   22df4:	6070      	str	r0, [r6, #4]
	return 0;
   22df6:	e78a      	b.n	22d0e <cloud_encode_data+0x3a>
		return -EINVAL;
   22df8:	f06f 0415 	mvn.w	r4, #21
   22dfc:	e787      	b.n	22d0e <cloud_encode_data+0x3a>
   22dfe:	bf00      	nop
   22e00:	000497e0 	.word	0x000497e0
   22e04:	00049788 	.word	0x00049788
   22e08:	0004b998 	.word	0x0004b998
   22e0c:	0004b9c4 	.word	0x0004b9c4
   22e10:	00049ae0 	.word	0x00049ae0
   22e14:	0004b9d7 	.word	0x0004b9d7
   22e18:	0004b105 	.word	0x0004b105
   22e1c:	00049b34 	.word	0x00049b34
   22e20:	0004b9dd 	.word	0x0004b9dd
   22e24:	0004b9e9 	.word	0x0004b9e9

00022e28 <cloud_encode_env_sensors_data>:
{
   22e28:	b570      	push	{r4, r5, r6, lr}
   22e2a:	460d      	mov	r5, r1
   22e2c:	b08a      	sub	sp, #40	; 0x28
	__ASSERT_NO_MSG(sensor_data != NULL);
   22e2e:	4604      	mov	r4, r0
   22e30:	b958      	cbnz	r0, 22e4a <cloud_encode_env_sensors_data+0x22>
   22e32:	4925      	ldr	r1, [pc, #148]	; (22ec8 <cloud_encode_env_sensors_data+0xa0>)
   22e34:	4825      	ldr	r0, [pc, #148]	; (22ecc <cloud_encode_env_sensors_data+0xa4>)
   22e36:	f240 1387 	movw	r3, #391	; 0x187
   22e3a:	4a25      	ldr	r2, [pc, #148]	; (22ed0 <cloud_encode_env_sensors_data+0xa8>)
   22e3c:	f021 fa48 	bl	442d0 <printk>
   22e40:	f240 1187 	movw	r1, #391	; 0x187
   22e44:	4822      	ldr	r0, [pc, #136]	; (22ed0 <cloud_encode_env_sensors_data+0xa8>)
   22e46:	f021 fc5d 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22e4a:	b95d      	cbnz	r5, 22e64 <cloud_encode_env_sensors_data+0x3c>
   22e4c:	4921      	ldr	r1, [pc, #132]	; (22ed4 <cloud_encode_env_sensors_data+0xac>)
   22e4e:	481f      	ldr	r0, [pc, #124]	; (22ecc <cloud_encode_env_sensors_data+0xa4>)
   22e50:	f44f 73c4 	mov.w	r3, #392	; 0x188
   22e54:	4a1e      	ldr	r2, [pc, #120]	; (22ed0 <cloud_encode_env_sensors_data+0xa8>)
   22e56:	f021 fa3b 	bl	442d0 <printk>
   22e5a:	f44f 71c4 	mov.w	r1, #392	; 0x188
   22e5e:	481c      	ldr	r0, [pc, #112]	; (22ed0 <cloud_encode_env_sensors_data+0xa8>)
   22e60:	f021 fc50 	bl	44704 <assert_post_action>
	struct cloud_channel_data cloud_sensor = { .ts = sensor_data->ts };
   22e64:	2210      	movs	r2, #16
   22e66:	2100      	movs	r1, #0
   22e68:	eb0d 0002 	add.w	r0, sp, r2
   22e6c:	f025 f9ac 	bl	481c8 <memset>
   22e70:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22e74:	e9cd 2308 	strd	r2, r3, [sp, #32]
	switch (sensor_data->type) {
   22e78:	7823      	ldrb	r3, [r4, #0]
   22e7a:	2b03      	cmp	r3, #3
   22e7c:	d820      	bhi.n	22ec0 <cloud_encode_env_sensors_data+0x98>
   22e7e:	e8df f003 	tbb	[pc, r3]
   22e82:	1902      	.short	0x1902
   22e84:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   22e86:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   22e88:	ae02      	add	r6, sp, #8
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22e8a:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   22e8e:	2106      	movs	r1, #6
   22e90:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   22e94:	4630      	mov	r0, r6
   22e96:	e9cd 2300 	strd	r2, r3, [sp]
   22e9a:	4a0f      	ldr	r2, [pc, #60]	; (22ed8 <cloud_encode_env_sensors_data+0xb0>)
   22e9c:	f01f fd2a 	bl	428f4 <sniprintf>
	cloud_sensor.data.len = len;
   22ea0:	b2c0      	uxtb	r0, r0
   22ea2:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22ea4:	462a      	mov	r2, r5
   22ea6:	2106      	movs	r1, #6
   22ea8:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   22eaa:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22eac:	f7ff ff12 	bl	22cd4 <cloud_encode_data>
}
   22eb0:	b00a      	add	sp, #40	; 0x28
   22eb2:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   22eb4:	2309      	movs	r3, #9
   22eb6:	e7e7      	b.n	22e88 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   22eb8:	230a      	movs	r3, #10
   22eba:	e7e5      	b.n	22e88 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   22ebc:	230b      	movs	r3, #11
   22ebe:	e7e3      	b.n	22e88 <cloud_encode_env_sensors_data+0x60>
		return -1;
   22ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22ec4:	e7f4      	b.n	22eb0 <cloud_encode_env_sensors_data+0x88>
   22ec6:	bf00      	nop
   22ec8:	0004ba8b 	.word	0x0004ba8b
   22ecc:	0004b33b 	.word	0x0004b33b
   22ed0:	0004ba42 	.word	0x0004ba42
   22ed4:	0004baa6 	.word	0x0004baa6
   22ed8:	0004babc 	.word	0x0004babc

00022edc <cloud_encode_motion_data>:
{
   22edc:	b530      	push	{r4, r5, lr}
   22ede:	460d      	mov	r5, r1
   22ee0:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(motion_data != NULL);
   22ee2:	4604      	mov	r4, r0
   22ee4:	b958      	cbnz	r0, 22efe <cloud_encode_motion_data+0x22>
   22ee6:	491d      	ldr	r1, [pc, #116]	; (22f5c <cloud_encode_motion_data+0x80>)
   22ee8:	481d      	ldr	r0, [pc, #116]	; (22f60 <cloud_encode_motion_data+0x84>)
   22eea:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   22eee:	4a1d      	ldr	r2, [pc, #116]	; (22f64 <cloud_encode_motion_data+0x88>)
   22ef0:	f021 f9ee 	bl	442d0 <printk>
   22ef4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   22ef8:	481a      	ldr	r0, [pc, #104]	; (22f64 <cloud_encode_motion_data+0x88>)
   22efa:	f021 fc03 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22efe:	b95d      	cbnz	r5, 22f18 <cloud_encode_motion_data+0x3c>
   22f00:	4919      	ldr	r1, [pc, #100]	; (22f68 <cloud_encode_motion_data+0x8c>)
   22f02:	4817      	ldr	r0, [pc, #92]	; (22f60 <cloud_encode_motion_data+0x84>)
   22f04:	f240 13af 	movw	r3, #431	; 0x1af
   22f08:	4a16      	ldr	r2, [pc, #88]	; (22f64 <cloud_encode_motion_data+0x88>)
   22f0a:	f021 f9e1 	bl	442d0 <printk>
   22f0e:	f240 11af 	movw	r1, #431	; 0x1af
   22f12:	4814      	ldr	r0, [pc, #80]	; (22f64 <cloud_encode_motion_data+0x88>)
   22f14:	f021 fbf6 	bl	44704 <assert_post_action>
	struct cloud_channel_data cloud_sensor = {
   22f18:	2210      	movs	r2, #16
   22f1a:	2100      	movs	r1, #0
   22f1c:	4668      	mov	r0, sp
   22f1e:	f025 f953 	bl	481c8 <memset>
   22f22:	2301      	movs	r3, #1
   22f24:	f88d 3000 	strb.w	r3, [sp]
   22f28:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   22f2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	switch (motion_data->orientation) {
   22f30:	7823      	ldrb	r3, [r4, #0]
   22f32:	2b01      	cmp	r3, #1
   22f34:	d005      	beq.n	22f42 <cloud_encode_motion_data+0x66>
   22f36:	2b02      	cmp	r3, #2
   22f38:	d00d      	beq.n	22f56 <cloud_encode_motion_data+0x7a>
		return -1;
   22f3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22f3e:	b007      	add	sp, #28
   22f40:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   22f42:	4b0a      	ldr	r3, [pc, #40]	; (22f6c <cloud_encode_motion_data+0x90>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22f44:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22f46:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22f48:	462a      	mov	r2, r5
   22f4a:	2106      	movs	r1, #6
   22f4c:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   22f4e:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   22f50:	f7ff fec0 	bl	22cd4 <cloud_encode_data>
   22f54:	e7f3      	b.n	22f3e <cloud_encode_motion_data+0x62>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   22f56:	4b06      	ldr	r3, [pc, #24]	; (22f70 <cloud_encode_motion_data+0x94>)
   22f58:	e7f4      	b.n	22f44 <cloud_encode_motion_data+0x68>
   22f5a:	bf00      	nop
   22f5c:	0004bac1 	.word	0x0004bac1
   22f60:	0004b33b 	.word	0x0004b33b
   22f64:	0004ba42 	.word	0x0004ba42
   22f68:	0004baa6 	.word	0x0004baa6
   22f6c:	0004badc 	.word	0x0004badc
   22f70:	0004bae3 	.word	0x0004bae3

00022f74 <cloud_encode_device_status_data>:
{
   22f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f78:	4680      	mov	r8, r0
   22f7a:	b085      	sub	sp, #20
   22f7c:	4692      	mov	sl, r2
   22f7e:	469b      	mov	fp, r3
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   22f80:	4689      	mov	r9, r1
   22f82:	b961      	cbnz	r1, 22f9e <cloud_encode_device_status_data+0x2a>
   22f84:	b15a      	cbz	r2, 22f9e <cloud_encode_device_status_data+0x2a>
   22f86:	495a      	ldr	r1, [pc, #360]	; (230f0 <cloud_encode_device_status_data+0x17c>)
   22f88:	485a      	ldr	r0, [pc, #360]	; (230f4 <cloud_encode_device_status_data+0x180>)
   22f8a:	f44f 7311 	mov.w	r3, #580	; 0x244
   22f8e:	4a5a      	ldr	r2, [pc, #360]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22f90:	f021 f99e 	bl	442d0 <printk>
   22f94:	f44f 7111 	mov.w	r1, #580	; 0x244
   22f98:	4857      	ldr	r0, [pc, #348]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22f9a:	f021 fbb3 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG((fota != NULL) || !fota_count);
   22f9e:	f1bb 0f00 	cmp.w	fp, #0
   22fa2:	d10d      	bne.n	22fc0 <cloud_encode_device_status_data+0x4c>
   22fa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22fa6:	b15b      	cbz	r3, 22fc0 <cloud_encode_device_status_data+0x4c>
   22fa8:	4954      	ldr	r1, [pc, #336]	; (230fc <cloud_encode_device_status_data+0x188>)
   22faa:	4852      	ldr	r0, [pc, #328]	; (230f4 <cloud_encode_device_status_data+0x180>)
   22fac:	f240 2345 	movw	r3, #581	; 0x245
   22fb0:	4a51      	ldr	r2, [pc, #324]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22fb2:	f021 f98d 	bl	442d0 <printk>
   22fb6:	f240 2145 	movw	r1, #581	; 0x245
   22fba:	484f      	ldr	r0, [pc, #316]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22fbc:	f021 fba2 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   22fc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22fc2:	b95b      	cbnz	r3, 22fdc <cloud_encode_device_status_data+0x68>
   22fc4:	494e      	ldr	r1, [pc, #312]	; (23100 <cloud_encode_device_status_data+0x18c>)
   22fc6:	484b      	ldr	r0, [pc, #300]	; (230f4 <cloud_encode_device_status_data+0x180>)
   22fc8:	f240 2346 	movw	r3, #582	; 0x246
   22fcc:	4a4a      	ldr	r2, [pc, #296]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22fce:	f021 f97f 	bl	442d0 <printk>
   22fd2:	f240 2146 	movw	r1, #582	; 0x246
   22fd6:	4848      	ldr	r0, [pc, #288]	; (230f8 <cloud_encode_device_status_data+0x184>)
   22fd8:	f021 fb94 	bl	44704 <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   22fdc:	f008 f902 	bl	2b1e4 <cJSON_CreateObject>
   22fe0:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   22fe2:	f008 f8ff 	bl	2b1e4 <cJSON_CreateObject>
   22fe6:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   22fe8:	f008 f8fc 	bl	2b1e4 <cJSON_CreateObject>
   22fec:	4605      	mov	r5, r0
	cJSON *device_obj = cJSON_CreateObject();
   22fee:	f008 f8f9 	bl	2b1e4 <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22ff2:	4b44      	ldr	r3, [pc, #272]	; (23104 <cloud_encode_device_status_data+0x190>)
	cJSON *device_obj = cJSON_CreateObject();
   22ff4:	4604      	mov	r4, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   22ff6:	889a      	ldrh	r2, [r3, #4]
   22ff8:	6818      	ldr	r0, [r3, #0]
   22ffa:	799b      	ldrb	r3, [r3, #6]
   22ffc:	9002      	str	r0, [sp, #8]
   22ffe:	f8ad 200c 	strh.w	r2, [sp, #12]
   23002:	f88d 300e 	strb.w	r3, [sp, #14]
	if (root_obj == NULL || state_obj == NULL ||
   23006:	b116      	cbz	r6, 2300e <cloud_encode_device_status_data+0x9a>
   23008:	b10f      	cbz	r7, 2300e <cloud_encode_device_status_data+0x9a>
   2300a:	b105      	cbz	r5, 2300e <cloud_encode_device_status_data+0x9a>
	    reported_obj == NULL || device_obj == NULL) {
   2300c:	b984      	cbnz	r4, 23030 <cloud_encode_device_status_data+0xbc>
		cJSON_Delete(root_obj);
   2300e:	4630      	mov	r0, r6
   23010:	f008 f814 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(state_obj);
   23014:	4638      	mov	r0, r7
   23016:	f008 f811 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2301a:	4628      	mov	r0, r5
   2301c:	f008 f80e 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(device_obj);
   23020:	4620      	mov	r0, r4
   23022:	f008 f80b 	bl	2b03c <cJSON_Delete>
		return -ENOMEM;
   23026:	f06f 000b 	mvn.w	r0, #11
}
   2302a:	b005      	add	sp, #20
   2302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *dummy_obj = cJSON_CreateNull();
   23030:	f008 f898 	bl	2b164 <cJSON_CreateNull>
	if (dummy_obj == NULL) {
   23034:	4602      	mov	r2, r0
   23036:	b118      	cbz	r0, 23040 <cloud_encode_device_status_data+0xcc>
	cJSON_AddItemToObject(parent, str, item);
   23038:	a902      	add	r1, sp, #8
   2303a:	4628      	mov	r0, r5
   2303c:	f023 ff25 	bl	46e8a <cJSON_AddItemToObject>
		dev_str[i] = tolower(dev_str[i]);
   23040:	4831      	ldr	r0, [pc, #196]	; (23108 <cloud_encode_device_status_data+0x194>)
   23042:	aa02      	add	r2, sp, #8
	for (int i = 0; dev_str[i]; ++i) {
   23044:	f812 3b01 	ldrb.w	r3, [r2], #1
   23048:	bb8b      	cbnz	r3, 230ae <cloud_encode_device_status_data+0x13a>
	if (modem_param) {
   2304a:	f1b8 0f00 	cmp.w	r8, #0
   2304e:	d137      	bne.n	230c0 <cloud_encode_device_status_data+0x14c>
	size_t item_cnt = 0;
   23050:	f04f 0800 	mov.w	r8, #0
	if (service_info_json_object_encode(ui, ui_count,
   23054:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   23058:	9401      	str	r4, [sp, #4]
   2305a:	9300      	str	r3, [sp, #0]
   2305c:	465a      	mov	r2, fp
   2305e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23060:	4651      	mov	r1, sl
   23062:	4648      	mov	r0, r9
   23064:	f000 fafa 	bl	2365c <service_info_json_object_encode>
   23068:	b110      	cbz	r0, 23070 <cloud_encode_device_status_data+0xfc>
	if (item_cnt != 0) {
   2306a:	f1b8 0f00 	cmp.w	r8, #0
   2306e:	d02f      	beq.n	230d0 <cloud_encode_device_status_data+0x15c>
	cJSON_AddItemToObject(parent, str, item);
   23070:	4622      	mov	r2, r4
   23072:	a902      	add	r1, sp, #8
   23074:	4628      	mov	r0, r5
   23076:	f023 ff08 	bl	46e8a <cJSON_AddItemToObject>
   2307a:	462a      	mov	r2, r5
   2307c:	4923      	ldr	r1, [pc, #140]	; (2310c <cloud_encode_device_status_data+0x198>)
   2307e:	4638      	mov	r0, r7
   23080:	f023 ff03 	bl	46e8a <cJSON_AddItemToObject>
   23084:	463a      	mov	r2, r7
   23086:	4922      	ldr	r1, [pc, #136]	; (23110 <cloud_encode_device_status_data+0x19c>)
   23088:	4630      	mov	r0, r6
   2308a:	f023 fefe 	bl	46e8a <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   2308e:	4630      	mov	r0, r6
   23090:	f023 fede 	bl	46e50 <cJSON_PrintUnformatted>
   23094:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   23096:	4630      	mov	r0, r6
   23098:	f007 ffd0 	bl	2b03c <cJSON_Delete>
	output->buf = buffer;
   2309c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	output->len = strlen(buffer);
   2309e:	4620      	mov	r0, r4
	output->buf = buffer;
   230a0:	601c      	str	r4, [r3, #0]
	output->len = strlen(buffer);
   230a2:	f7fa f8df 	bl	1d264 <strlen>
   230a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   230a8:	6058      	str	r0, [r3, #4]
	return 0;
   230aa:	2000      	movs	r0, #0
   230ac:	e7bd      	b.n	2302a <cloud_encode_device_status_data+0xb6>
		dev_str[i] = tolower(dev_str[i]);
   230ae:	5cc1      	ldrb	r1, [r0, r3]
   230b0:	f001 0103 	and.w	r1, r1, #3
   230b4:	2901      	cmp	r1, #1
   230b6:	bf08      	it	eq
   230b8:	3320      	addeq	r3, #32
   230ba:	f802 3c01 	strb.w	r3, [r2, #-1]
   230be:	e7c1      	b.n	23044 <cloud_encode_device_status_data+0xd0>
		val = modem_info_json_object_encode((struct modem_param_info *)
   230c0:	4640      	mov	r0, r8
   230c2:	4621      	mov	r1, r4
   230c4:	f00b fb1c 	bl	2e700 <modem_info_json_object_encode>
		if (val > 0) {
   230c8:	f1b0 0800 	subs.w	r8, r0, #0
   230cc:	dcc2      	bgt.n	23054 <cloud_encode_device_status_data+0xe0>
   230ce:	e7bf      	b.n	23050 <cloud_encode_device_status_data+0xdc>
		cJSON_Delete(root_obj);
   230d0:	4630      	mov	r0, r6
   230d2:	f007 ffb3 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(state_obj);
   230d6:	4638      	mov	r0, r7
   230d8:	f007 ffb0 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(reported_obj);
   230dc:	4628      	mov	r0, r5
   230de:	f007 ffad 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(device_obj);
   230e2:	4620      	mov	r0, r4
   230e4:	f007 ffaa 	bl	2b03c <cJSON_Delete>
		return -EAGAIN;
   230e8:	f06f 000a 	mvn.w	r0, #10
   230ec:	e79d      	b.n	2302a <cloud_encode_device_status_data+0xb6>
   230ee:	bf00      	nop
   230f0:	0004b9ec 	.word	0x0004b9ec
   230f4:	0004b33b 	.word	0x0004b33b
   230f8:	0004ba42 	.word	0x0004ba42
   230fc:	0004ba0d 	.word	0x0004ba0d
   23100:	0004baa6 	.word	0x0004baa6
   23104:	0004ba3b 	.word	0x0004ba3b
   23108:	00052acf 	.word	0x00052acf
   2310c:	0004ba32 	.word	0x0004ba32
   23110:	00051bb9 	.word	0x00051bb9

00023114 <cloud_decode_command>:
{
   23114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23118:	b08f      	sub	sp, #60	; 0x3c
	if (input == NULL) {
   2311a:	2800      	cmp	r0, #0
   2311c:	f000 8151 	beq.w	233c2 <cloud_decode_command+0x2ae>
	root_obj = cJSON_Parse(input);
   23120:	f023 fe92 	bl	46e48 <cJSON_Parse>
	if (root_obj == NULL) {
   23124:	9004      	str	r0, [sp, #16]
   23126:	2800      	cmp	r0, #0
   23128:	f000 814e 	beq.w	233c8 <cloud_decode_command+0x2b4>
   2312c:	4ea8      	ldr	r6, [pc, #672]	; (233d0 <cloud_decode_command+0x2bc>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   2312e:	2400      	movs	r4, #0
   23130:	4635      	mov	r5, r6
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   23132:	f856 3b04 	ldr.w	r3, [r6], #4
   23136:	9804      	ldr	r0, [sp, #16]
   23138:	6819      	ldr	r1, [r3, #0]
   2313a:	f020 ff3d 	bl	43fb8 <json_object_decode>
		if ((group_obj != NULL) &&
   2313e:	b308      	cbz	r0, 23184 <cloud_decode_command+0x70>
					cmd_group_str[cmd_groups[i]->group]))) {
   23140:	f856 3c04 	ldr.w	r3, [r6, #-4]
			(json_value_string_compare(group_obj,
   23144:	4aa3      	ldr	r2, [pc, #652]	; (233d4 <cloud_decode_command+0x2c0>)
					cmd_group_str[cmd_groups[i]->group]))) {
   23146:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   23148:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   2314c:	f020 ff25 	bl	43f9a <json_value_string_compare>
		if ((group_obj != NULL) &&
   23150:	b1c0      	cbz	r0, 23184 <cloud_decode_command+0x70>
			group = cmd_groups[i];
   23152:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
	if (group == NULL) {
   23156:	b9cd      	cbnz	r5, 2318c <cloud_decode_command+0x78>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   23158:	499f      	ldr	r1, [pc, #636]	; (233d8 <cloud_decode_command+0x2c4>)
   2315a:	9804      	ldr	r0, [sp, #16]
   2315c:	f023 fe89 	bl	46e72 <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   23160:	9b04      	ldr	r3, [sp, #16]
   23162:	499e      	ldr	r1, [pc, #632]	; (233dc <cloud_decode_command+0x2c8>)
   23164:	2800      	cmp	r0, #0
   23166:	bf08      	it	eq
   23168:	4618      	moveq	r0, r3
   2316a:	f023 fea5 	bl	46eb8 <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   2316e:	4607      	mov	r7, r0
   23170:	2800      	cmp	r0, #0
   23172:	f040 80a3 	bne.w	232bc <cloud_decode_command+0x1a8>
	cJSON_Delete(root_obj);
   23176:	9804      	ldr	r0, [sp, #16]
   23178:	f007 ff60 	bl	2b03c <cJSON_Delete>
	return 0;
   2317c:	2000      	movs	r0, #0
}
   2317e:	b00f      	add	sp, #60	; 0x3c
   23180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   23184:	3401      	adds	r4, #1
   23186:	2c04      	cmp	r4, #4
   23188:	d1d3      	bne.n	23132 <cloud_decode_command+0x1e>
   2318a:	e7e5      	b.n	23158 <cloud_decode_command+0x44>
	cmd_parsed.group = group->group;
   2318c:	4b94      	ldr	r3, [pc, #592]	; (233e0 <cloud_decode_command+0x2cc>)
	for (size_t j = 0; j < group->num_children; ++j) {
   2318e:	2600      	movs	r6, #0
   23190:	4699      	mov	r9, r3
	cmd_parsed.group = group->group;
   23192:	792a      	ldrb	r2, [r5, #4]
   23194:	701a      	strb	r2, [r3, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   23196:	68eb      	ldr	r3, [r5, #12]
   23198:	429e      	cmp	r6, r3
   2319a:	d2dd      	bcs.n	23158 <cloud_decode_command+0x44>
			json_object_decode(root_obj, group->children[j].key);
   2319c:	68ab      	ldr	r3, [r5, #8]
   2319e:	0134      	lsls	r4, r6, #4
   231a0:	5919      	ldr	r1, [r3, r4]
   231a2:	9804      	ldr	r0, [sp, #16]
   231a4:	f020 ff08 	bl	43fb8 <json_object_decode>
		if ((channel_obj != NULL) &&
   231a8:	2800      	cmp	r0, #0
   231aa:	d04f      	beq.n	2324c <cloud_decode_command+0x138>
			    channel_type_str[group->children[j].channel]))) {
   231ac:	68ab      	ldr	r3, [r5, #8]
		    (json_value_string_compare(
   231ae:	4a8d      	ldr	r2, [pc, #564]	; (233e4 <cloud_decode_command+0x2d0>)
			    channel_type_str[group->children[j].channel]))) {
   231b0:	4423      	add	r3, r4
   231b2:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   231b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   231b8:	f020 feef 	bl	43f9a <json_value_string_compare>
		if ((channel_obj != NULL) &&
   231bc:	2800      	cmp	r0, #0
   231be:	d045      	beq.n	2324c <cloud_decode_command+0x138>
			chan = &group->children[j];
   231c0:	68ab      	ldr	r3, [r5, #8]
	if (chan == NULL) {
   231c2:	191c      	adds	r4, r3, r4
   231c4:	d0c8      	beq.n	23158 <cloud_decode_command+0x44>
	for (size_t k = 0; k < chan->num_children; ++k) {
   231c6:	2600      	movs	r6, #0
	cmd_parsed.channel = chan->channel;
   231c8:	7923      	ldrb	r3, [r4, #4]
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   231ca:	4a87      	ldr	r2, [pc, #540]	; (233e8 <cloud_decode_command+0x2d4>)
	cmd_parsed.channel = chan->channel;
   231cc:	f889 3001 	strb.w	r3, [r9, #1]
   231d0:	4b86      	ldr	r3, [pc, #536]	; (233ec <cloud_decode_command+0x2d8>)
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   231d2:	1a9b      	subs	r3, r3, r2
   231d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   231d8:	9305      	str	r3, [sp, #20]
	for (size_t k = 0; k < chan->num_children; ++k) {
   231da:	68e3      	ldr	r3, [r4, #12]
   231dc:	429e      	cmp	r6, r3
   231de:	d2bb      	bcs.n	23158 <cloud_decode_command+0x44>
		type = &chan->children[k];
   231e0:	68a1      	ldr	r1, [r4, #8]
   231e2:	0132      	lsls	r2, r6, #4
   231e4:	188b      	adds	r3, r1, r2
		type_obj = json_object_decode(root_obj, type->key);
   231e6:	9804      	ldr	r0, [sp, #16]
   231e8:	5889      	ldr	r1, [r1, r2]
		type = &chan->children[k];
   231ea:	9306      	str	r3, [sp, #24]
		type_obj = json_object_decode(root_obj, type->key);
   231ec:	f020 fee4 	bl	43fb8 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   231f0:	9b06      	ldr	r3, [sp, #24]
   231f2:	4601      	mov	r1, r0
   231f4:	4a7a      	ldr	r2, [pc, #488]	; (233e0 <cloud_decode_command+0x2cc>)
   231f6:	4618      	mov	r0, r3
   231f8:	f7ff fcc2 	bl	22b80 <cloud_cmd_parse_type>
		if (ret != 0) {
   231fc:	b340      	cbz	r0, 23250 <cloud_decode_command+0x13c>
			if (ret != -ENOENT) {
   231fe:	1c81      	adds	r1, r0, #2
   23200:	9007      	str	r0, [sp, #28]
   23202:	d021      	beq.n	23248 <cloud_decode_command+0x134>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   23204:	f027 023f 	bic.w	r2, r7, #63	; 0x3f
   23208:	9b05      	ldr	r3, [sp, #20]
   2320a:	f042 0201 	orr.w	r2, r2, #1
   2320e:	f362 0707 	bfi	r7, r2, #0, #8
   23212:	f363 178f 	bfi	r7, r3, #6, #10
   23216:	792a      	ldrb	r2, [r5, #4]
   23218:	4b6e      	ldr	r3, [pc, #440]	; (233d4 <cloud_decode_command+0x2c0>)
   2321a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2321e:	f021 fa95 	bl	4474c <log_strdup>
   23222:	7921      	ldrb	r1, [r4, #4]
   23224:	4b6f      	ldr	r3, [pc, #444]	; (233e4 <cloud_decode_command+0x2d0>)
   23226:	9006      	str	r0, [sp, #24]
   23228:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   2322c:	f021 fa8e 	bl	4474c <log_strdup>
   23230:	9b07      	ldr	r3, [sp, #28]
   23232:	9a06      	ldr	r2, [sp, #24]
   23234:	e9cd 0301 	strd	r0, r3, [sp, #4]
   23238:	9200      	str	r2, [sp, #0]
   2323a:	f240 3363 	movw	r3, #867	; 0x363
   2323e:	4a6c      	ldr	r2, [pc, #432]	; (233f0 <cloud_decode_command+0x2dc>)
   23240:	496c      	ldr	r1, [pc, #432]	; (233f4 <cloud_decode_command+0x2e0>)
   23242:	4638      	mov	r0, r7
   23244:	f021 fa6f 	bl	44726 <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   23248:	3601      	adds	r6, #1
   2324a:	e7c6      	b.n	231da <cloud_decode_command+0xc6>
	for (size_t j = 0; j < group->num_children; ++j) {
   2324c:	3601      	adds	r6, #1
   2324e:	e7a2      	b.n	23196 <cloud_decode_command+0x82>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   23250:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   23254:	f043 0303 	orr.w	r3, r3, #3
   23258:	f363 0807 	bfi	r8, r3, #0, #8
   2325c:	9b05      	ldr	r3, [sp, #20]
   2325e:	4a5d      	ldr	r2, [pc, #372]	; (233d4 <cloud_decode_command+0x2c0>)
   23260:	f363 188f 	bfi	r8, r3, #6, #10
   23264:	f899 3000 	ldrb.w	r3, [r9]
   23268:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   2326c:	f021 fa6e 	bl	4474c <log_strdup>
   23270:	f899 2001 	ldrb.w	r2, [r9, #1]
   23274:	4b5b      	ldr	r3, [pc, #364]	; (233e4 <cloud_decode_command+0x2d0>)
   23276:	9007      	str	r0, [sp, #28]
   23278:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2327c:	f021 fa66 	bl	4474c <log_strdup>
   23280:	f899 1002 	ldrb.w	r1, [r9, #2]
   23284:	4b5c      	ldr	r3, [pc, #368]	; (233f8 <cloud_decode_command+0x2e4>)
   23286:	9006      	str	r0, [sp, #24]
   23288:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   2328c:	f021 fa5e 	bl	4474c <log_strdup>
   23290:	9a06      	ldr	r2, [sp, #24]
   23292:	9b07      	ldr	r3, [sp, #28]
   23294:	9002      	str	r0, [sp, #8]
   23296:	9201      	str	r2, [sp, #4]
   23298:	9300      	str	r3, [sp, #0]
   2329a:	4a55      	ldr	r2, [pc, #340]	; (233f0 <cloud_decode_command+0x2dc>)
   2329c:	f240 336b 	movw	r3, #875	; 0x36b
   232a0:	4956      	ldr	r1, [pc, #344]	; (233fc <cloud_decode_command+0x2e8>)
   232a2:	4640      	mov	r0, r8
   232a4:	f021 fa3f 	bl	44726 <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   232a8:	484d      	ldr	r0, [pc, #308]	; (233e0 <cloud_decode_command+0x2cc>)
   232aa:	f7ff fc17 	bl	22adc <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   232ae:	4b54      	ldr	r3, [pc, #336]	; (23400 <cloud_decode_command+0x2ec>)
   232b0:	681b      	ldr	r3, [r3, #0]
   232b2:	2b00      	cmp	r3, #0
   232b4:	d0c8      	beq.n	23248 <cloud_decode_command+0x134>
			cloud_command_cb(&cmd_parsed);
   232b6:	484a      	ldr	r0, [pc, #296]	; (233e0 <cloud_decode_command+0x2cc>)
   232b8:	4798      	blx	r3
   232ba:	e7c5      	b.n	23248 <cloud_decode_command+0x134>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232bc:	2500      	movs	r5, #0
   232be:	4b4b      	ldr	r3, [pc, #300]	; (233ec <cloud_decode_command+0x2d8>)
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232c0:	4a49      	ldr	r2, [pc, #292]	; (233e8 <cloud_decode_command+0x2d4>)
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232c2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 23410 <cloud_decode_command+0x2fc>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232c6:	1a9b      	subs	r3, r3, r2
   232c8:	f3c3 03c9 	ubfx	r3, r3, #3, #10
		cJSON *channel_obj = json_object_decode(
   232cc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 233e4 <cloud_decode_command+0x2d0>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   232d0:	9306      	str	r3, [sp, #24]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   232d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   232d6:	429d      	cmp	r5, r3
   232d8:	d303      	bcc.n	232e2 <cloud_decode_command+0x1ce>
	cJSON_Delete(config_obj);
   232da:	4638      	mov	r0, r7
   232dc:	f007 feae 	bl	2b03c <cJSON_Delete>
	return 0;
   232e0:	e749      	b.n	23176 <cloud_decode_command+0x62>
		struct cloud_command found_config_item = {
   232e2:	2218      	movs	r2, #24
   232e4:	2100      	movs	r1, #0
   232e6:	a808      	add	r0, sp, #32
   232e8:	f024 ff6e 	bl	481c8 <memset>
   232ec:	2308      	movs	r3, #8
   232ee:	f88d 3020 	strb.w	r3, [sp, #32]
			channel_type_str[group->children[ch].channel]);
   232f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   232f6:	012c      	lsls	r4, r5, #4
   232f8:	4423      	add	r3, r4
   232fa:	791b      	ldrb	r3, [r3, #4]
		cJSON *channel_obj = json_object_decode(
   232fc:	4638      	mov	r0, r7
   232fe:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
   23302:	f020 fe59 	bl	43fb8 <json_object_decode>
		if (channel_obj == NULL) {
   23306:	9005      	str	r0, [sp, #20]
   23308:	b908      	cbnz	r0, 2330e <cloud_decode_command+0x1fa>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   2330a:	3501      	adds	r5, #1
   2330c:	e7e1      	b.n	232d2 <cloud_decode_command+0x1be>
		for (size_t type = 0; type < chan->num_children; ++type) {
   2330e:	2600      	movs	r6, #0
		struct cmd *chan = &group->children[ch];
   23310:	f8d8 3008 	ldr.w	r3, [r8, #8]
   23314:	441c      	add	r4, r3
		found_config_item.channel = chan->channel;
   23316:	7923      	ldrb	r3, [r4, #4]
   23318:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		for (size_t type = 0; type < chan->num_children; ++type) {
   2331c:	68e3      	ldr	r3, [r4, #12]
   2331e:	429e      	cmp	r6, r3
   23320:	d2f3      	bcs.n	2330a <cloud_decode_command+0x1f6>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   23322:	68a0      	ldr	r0, [r4, #8]
   23324:	aa08      	add	r2, sp, #32
   23326:	9905      	ldr	r1, [sp, #20]
   23328:	eb00 1006 	add.w	r0, r0, r6, lsl #4
   2332c:	f7ff fc28 	bl	22b80 <cloud_cmd_parse_type>
			if (ret != 0) {
   23330:	b1e0      	cbz	r0, 2336c <cloud_decode_command+0x258>
				if (ret != -ENOENT) {
   23332:	1c82      	adds	r2, r0, #2
   23334:	9007      	str	r0, [sp, #28]
   23336:	d017      	beq.n	23368 <cloud_decode_command+0x254>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   23338:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   2333c:	f042 0201 	orr.w	r2, r2, #1
   23340:	f362 0b07 	bfi	fp, r2, #0, #8
   23344:	7922      	ldrb	r2, [r4, #4]
   23346:	9b06      	ldr	r3, [sp, #24]
   23348:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
   2334c:	f363 1b8f 	bfi	fp, r3, #6, #10
   23350:	f021 f9fc 	bl	4474c <log_strdup>
   23354:	9b07      	ldr	r3, [sp, #28]
   23356:	4a2b      	ldr	r2, [pc, #172]	; (23404 <cloud_decode_command+0x2f0>)
   23358:	e9cd 0300 	strd	r0, r3, [sp]
   2335c:	492a      	ldr	r1, [pc, #168]	; (23408 <cloud_decode_command+0x2f4>)
   2335e:	f240 33a7 	movw	r3, #935	; 0x3a7
   23362:	4658      	mov	r0, fp
   23364:	f021 f9df 	bl	44726 <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   23368:	3601      	adds	r6, #1
   2336a:	e7d7      	b.n	2331c <cloud_decode_command+0x208>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   2336c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   23370:	f043 0303 	orr.w	r3, r3, #3
   23374:	f363 0a07 	bfi	sl, r3, #0, #8
   23378:	9b06      	ldr	r3, [sp, #24]
   2337a:	f363 1a8f 	bfi	sl, r3, #6, #10
   2337e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   23382:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
   23386:	f021 f9e1 	bl	4474c <log_strdup>
   2338a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   2338e:	4b1a      	ldr	r3, [pc, #104]	; (233f8 <cloud_decode_command+0x2e4>)
   23390:	9007      	str	r0, [sp, #28]
   23392:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   23396:	f021 f9d9 	bl	4474c <log_strdup>
   2339a:	9b07      	ldr	r3, [sp, #28]
   2339c:	9001      	str	r0, [sp, #4]
   2339e:	9300      	str	r3, [sp, #0]
   233a0:	4a18      	ldr	r2, [pc, #96]	; (23404 <cloud_decode_command+0x2f0>)
   233a2:	f240 33af 	movw	r3, #943	; 0x3af
   233a6:	4919      	ldr	r1, [pc, #100]	; (2340c <cloud_decode_command+0x2f8>)
   233a8:	4650      	mov	r0, sl
   233aa:	f021 f9bc 	bl	44726 <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   233ae:	a808      	add	r0, sp, #32
   233b0:	f7ff fb94 	bl	22adc <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   233b4:	4b12      	ldr	r3, [pc, #72]	; (23400 <cloud_decode_command+0x2ec>)
   233b6:	681b      	ldr	r3, [r3, #0]
   233b8:	2b00      	cmp	r3, #0
   233ba:	d0d5      	beq.n	23368 <cloud_decode_command+0x254>
				cloud_command_cb(&found_config_item);
   233bc:	a808      	add	r0, sp, #32
   233be:	4798      	blx	r3
   233c0:	e7d2      	b.n	23368 <cloud_decode_command+0x254>
		return -EINVAL;
   233c2:	f06f 0015 	mvn.w	r0, #21
   233c6:	e6da      	b.n	2317e <cloud_decode_command+0x6a>
		return -ENOENT;
   233c8:	f06f 0001 	mvn.w	r0, #1
   233cc:	e6d7      	b.n	2317e <cloud_decode_command+0x6a>
   233ce:	bf00      	nop
   233d0:	200206d8 	.word	0x200206d8
   233d4:	00049b34 	.word	0x00049b34
   233d8:	00051bb9 	.word	0x00051bb9
   233dc:	00052307 	.word	0x00052307
   233e0:	20021a30 	.word	0x20021a30
   233e4:	00049ae0 	.word	0x00049ae0
   233e8:	00049788 	.word	0x00049788
   233ec:	000497e0 	.word	0x000497e0
   233f0:	0004b8c1 	.word	0x0004b8c1
   233f4:	0004b8f4 	.word	0x0004b8f4
   233f8:	00049b60 	.word	0x00049b60
   233fc:	0004b926 	.word	0x0004b926
   23400:	200249f0 	.word	0x200249f0
   23404:	0004b8d2 	.word	0x0004b8d2
   23408:	0004b944 	.word	0x0004b944
   2340c:	0004b972 	.word	0x0004b972
   23410:	200206e8 	.word	0x200206e8

00023414 <cloud_decode_init>:
{
   23414:	b510      	push	{r4, lr}
   23416:	4604      	mov	r4, r0
	cJSON_Init();
   23418:	f007 fef6 	bl	2b208 <cJSON_Init>
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2341c:	2200      	movs	r2, #0
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   2341e:	2000      	movs	r0, #0
	cloud_command_cb = cb;
   23420:	4b08      	ldr	r3, [pc, #32]	; (23444 <cloud_decode_init+0x30>)
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   23422:	4909      	ldr	r1, [pc, #36]	; (23448 <cloud_decode_init+0x34>)
	cloud_command_cb = cb;
   23424:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23426:	4b09      	ldr	r3, [pc, #36]	; (2344c <cloud_decode_init+0x38>)
   23428:	3201      	adds	r2, #1
   2342a:	2a0a      	cmp	r2, #10
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   2342c:	e9c3 0102 	strd	r0, r1, [r3, #8]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] =
   23430:	e9c3 0106 	strd	r0, r1, [r3, #24]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] =
   23434:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
   23438:	f103 0330 	add.w	r3, r3, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2343c:	d1f4      	bne.n	23428 <cloud_decode_init+0x14>
}
   2343e:	2000      	movs	r0, #0
   23440:	bd10      	pop	{r4, pc}
   23442:	bf00      	nop
   23444:	200249f0 	.word	0x200249f0
   23448:	bff00000 	.word	0xbff00000
   2344c:	20020018 	.word	0x20020018

00023450 <cloud_get_channel_enable_state>:
{
   23450:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23452:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   23454:	2430      	movs	r4, #48	; 0x30
   23456:	4a09      	ldr	r2, [pc, #36]	; (2347c <cloud_get_channel_enable_state+0x2c>)
   23458:	fb04 f103 	mul.w	r1, r4, r3
   2345c:	5c8d      	ldrb	r5, [r1, r2]
   2345e:	4285      	cmp	r5, r0
   23460:	d106      	bne.n	23470 <cloud_get_channel_enable_state+0x20>
				   [SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE];
   23462:	440a      	add	r2, r1
   23464:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   23468:	f7f9 fc40 	bl	1ccec <__aeabi_d2iz>
   2346c:	b240      	sxtb	r0, r0
}
   2346e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23470:	3301      	adds	r3, #1
   23472:	2b0a      	cmp	r3, #10
   23474:	d1f0      	bne.n	23458 <cloud_get_channel_enable_state+0x8>
	return CLOUD_CMD_STATE_UNDEFINED;
   23476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2347a:	e7f8      	b.n	2346e <cloud_get_channel_enable_state+0x1e>
   2347c:	20020018 	.word	0x20020018

00023480 <cloud_encode_config_data>:
{
   23480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(output != NULL);
   23484:	4606      	mov	r6, r0
   23486:	b958      	cbnz	r0, 234a0 <cloud_encode_config_data+0x20>
   23488:	493a      	ldr	r1, [pc, #232]	; (23574 <cloud_encode_config_data+0xf4>)
   2348a:	483b      	ldr	r0, [pc, #236]	; (23578 <cloud_encode_config_data+0xf8>)
   2348c:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   23490:	4a3a      	ldr	r2, [pc, #232]	; (2357c <cloud_encode_config_data+0xfc>)
   23492:	f020 ff1d 	bl	442d0 <printk>
   23496:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   2349a:	4838      	ldr	r0, [pc, #224]	; (2357c <cloud_encode_config_data+0xfc>)
   2349c:	f021 f932 	bl	44704 <assert_post_action>
	cJSON *chan_obj = cJSON_CreateObject();
   234a0:	f007 fea0 	bl	2b1e4 <cJSON_CreateObject>
   234a4:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   234a6:	f007 fe9d 	bl	2b1e4 <cJSON_CreateObject>
   234aa:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   234ac:	f007 fe9a 	bl	2b1e4 <cJSON_CreateObject>
   234b0:	4681      	mov	r9, r0
	cJSON *config_obj = cJSON_CreateObject();
   234b2:	f007 fe97 	bl	2b1e4 <cJSON_CreateObject>
   234b6:	4680      	mov	r8, r0
	cJSON *root_obj = cJSON_CreateObject();
   234b8:	f007 fe94 	bl	2b1e4 <cJSON_CreateObject>
   234bc:	4604      	mov	r4, r0
	if (chan_obj == NULL || state_obj == NULL ||
   234be:	2d00      	cmp	r5, #0
   234c0:	d043      	beq.n	2354a <cloud_encode_config_data+0xca>
   234c2:	f1ba 0f00 	cmp.w	sl, #0
   234c6:	d040      	beq.n	2354a <cloud_encode_config_data+0xca>
   234c8:	f1b9 0f00 	cmp.w	r9, #0
   234cc:	d03d      	beq.n	2354a <cloud_encode_config_data+0xca>
	    reported_obj == NULL || config_obj == NULL ||
   234ce:	f1b8 0f00 	cmp.w	r8, #0
   234d2:	d03a      	beq.n	2354a <cloud_encode_config_data+0xca>
   234d4:	2800      	cmp	r0, #0
   234d6:	d038      	beq.n	2354a <cloud_encode_config_data+0xca>
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   234d8:	2000      	movs	r0, #0
   234da:	f7ff ffb9 	bl	23450 <cloud_get_channel_enable_state>
	if (gps_state != CLOUD_CMD_STATE_UNDEFINED) {
   234de:	1c42      	adds	r2, r0, #1
   234e0:	d00a      	beq.n	234f8 <cloud_encode_config_data+0x78>
	json_bool = cJSON_CreateBool(value);
   234e2:	1e43      	subs	r3, r0, #1
   234e4:	4258      	negs	r0, r3
   234e6:	4158      	adcs	r0, r3
   234e8:	f007 fe48 	bl	2b17c <cJSON_CreateBool>
	if (json_bool == NULL) {
   234ec:	4602      	mov	r2, r0
   234ee:	b360      	cbz	r0, 2354a <cloud_encode_config_data+0xca>
	cJSON_AddItemToObject(parent, str, item);
   234f0:	4923      	ldr	r1, [pc, #140]	; (23580 <cloud_encode_config_data+0x100>)
   234f2:	4628      	mov	r0, r5
   234f4:	f023 fcc9 	bl	46e8a <cJSON_AddItemToObject>
	if (cJSON_GetArraySize(chan_obj) == 0) {
   234f8:	4628      	mov	r0, r5
   234fa:	f023 fcac 	bl	46e56 <cJSON_GetArraySize>
   234fe:	4607      	mov	r7, r0
   23500:	b328      	cbz	r0, 2354e <cloud_encode_config_data+0xce>
	cJSON_AddItemToObject(config_obj, channel_type_str[CLOUD_CHANNEL_GPS],
   23502:	462a      	mov	r2, r5
   23504:	491f      	ldr	r1, [pc, #124]	; (23584 <cloud_encode_config_data+0x104>)
   23506:	4640      	mov	r0, r8
   23508:	f023 fcbf 	bl	46e8a <cJSON_AddItemToObject>
	cJSON_AddItemToObject(reported_obj, "config", config_obj);
   2350c:	4642      	mov	r2, r8
   2350e:	491e      	ldr	r1, [pc, #120]	; (23588 <cloud_encode_config_data+0x108>)
   23510:	4648      	mov	r0, r9
   23512:	f023 fcba 	bl	46e8a <cJSON_AddItemToObject>
	cJSON_AddItemToObject(state_obj, "reported", reported_obj);
   23516:	464a      	mov	r2, r9
   23518:	491c      	ldr	r1, [pc, #112]	; (2358c <cloud_encode_config_data+0x10c>)
   2351a:	4650      	mov	r0, sl
   2351c:	f023 fcb5 	bl	46e8a <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root_obj, "state", state_obj);
   23520:	4652      	mov	r2, sl
   23522:	491b      	ldr	r1, [pc, #108]	; (23590 <cloud_encode_config_data+0x110>)
   23524:	4620      	mov	r0, r4
   23526:	f023 fcb0 	bl	46e8a <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   2352a:	4620      	mov	r0, r4
   2352c:	f023 fc90 	bl	46e50 <cJSON_PrintUnformatted>
   23530:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   23532:	4620      	mov	r0, r4
   23534:	f007 fd82 	bl	2b03c <cJSON_Delete>
	output->buf = buffer;
   23538:	6035      	str	r5, [r6, #0]
	output->len = strlen(buffer);
   2353a:	4628      	mov	r0, r5
   2353c:	f7f9 fe92 	bl	1d264 <strlen>
	return 0;
   23540:	2700      	movs	r7, #0
	output->len = strlen(buffer);
   23542:	6070      	str	r0, [r6, #4]
}
   23544:	4638      	mov	r0, r7
   23546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = -ENOMEM;
   2354a:	f06f 070b 	mvn.w	r7, #11
	output->buf = NULL;
   2354e:	2300      	movs	r3, #0
	cJSON_Delete(chan_obj);
   23550:	4628      	mov	r0, r5
	output->len = 0;
   23552:	e9c6 3300 	strd	r3, r3, [r6]
	cJSON_Delete(chan_obj);
   23556:	f007 fd71 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(state_obj);
   2355a:	4650      	mov	r0, sl
   2355c:	f007 fd6e 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(reported_obj);
   23560:	4648      	mov	r0, r9
   23562:	f007 fd6b 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(config_obj);
   23566:	4640      	mov	r0, r8
   23568:	f007 fd68 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(root_obj);
   2356c:	4620      	mov	r0, r4
   2356e:	f007 fd65 	bl	2b03c <cJSON_Delete>
	return ret;
   23572:	e7e7      	b.n	23544 <cloud_encode_config_data+0xc4>
   23574:	0004baa6 	.word	0x0004baa6
   23578:	0004b33b 	.word	0x0004b33b
   2357c:	0004ba42 	.word	0x0004ba42
   23580:	0004b991 	.word	0x0004b991
   23584:	00051fc3 	.word	0x00051fc3
   23588:	00052307 	.word	0x00052307
   2358c:	0004ba32 	.word	0x0004ba32
   23590:	00051bb9 	.word	0x00051bb9

00023594 <cloud_set_channel_enable_state>:
{
   23594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23596:	4606      	mov	r6, r0
   23598:	460f      	mov	r7, r1
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2359a:	2500      	movs	r5, #0
   2359c:	4c07      	ldr	r4, [pc, #28]	; (235bc <cloud_set_channel_enable_state+0x28>)
		if (sensor_cfg[i].chan == channel) {
   2359e:	7823      	ldrb	r3, [r4, #0]
   235a0:	42b3      	cmp	r3, r6
   235a2:	d104      	bne.n	235ae <cloud_set_channel_enable_state+0x1a>
				[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] = state;
   235a4:	4638      	mov	r0, r7
   235a6:	f7f9 f89d 	bl	1c6e4 <__aeabi_i2d>
   235aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   235ae:	3501      	adds	r5, #1
   235b0:	2d0a      	cmp	r5, #10
   235b2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   235b6:	d1f2      	bne.n	2359e <cloud_set_channel_enable_state+0xa>
}
   235b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   235ba:	bf00      	nop
   235bc:	20020018 	.word	0x20020018

000235c0 <cloud_is_send_allowed>:
{
   235c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   235c4:	4c23      	ldr	r4, [pc, #140]	; (23654 <cloud_is_send_allowed+0x94>)
{
   235c6:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   235ca:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   235cc:	2230      	movs	r2, #48	; 0x30
   235ce:	46a2      	mov	sl, r4
   235d0:	fb02 f305 	mul.w	r3, r2, r5
   235d4:	5d19      	ldrb	r1, [r3, r4]
   235d6:	4281      	cmp	r1, r0
   235d8:	d12a      	bne.n	23630 <cloud_is_send_allowed+0x70>
	    (cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] ==
   235da:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   235dc:	2200      	movs	r2, #0
   235de:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   235e2:	2300      	movs	r3, #0
   235e4:	f7f9 fb50 	bl	1cc88 <__aeabi_dcmpeq>
   235e8:	bb28      	cbnz	r0, 23636 <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] ==
   235ea:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   235ee:	2200      	movs	r2, #0
   235f0:	4b19      	ldr	r3, [pc, #100]	; (23658 <cloud_is_send_allowed+0x98>)
   235f2:	4640      	mov	r0, r8
   235f4:	4649      	mov	r1, r9
   235f6:	f7f9 fb47 	bl	1cc88 <__aeabi_dcmpeq>
   235fa:	b130      	cbz	r0, 2360a <cloud_is_send_allowed+0x4a>
		CLOUD_CMD_STATE_TRUE) &&
   235fc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   23600:	4630      	mov	r0, r6
   23602:	4639      	mov	r1, r7
   23604:	f7f9 fb4a 	bl	1cc9c <__aeabi_dcmplt>
   23608:	b9b8      	cbnz	r0, 2363a <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] ==
   2360a:	2330      	movs	r3, #48	; 0x30
   2360c:	fb03 a505 	mla	r5, r3, r5, sl
   23610:	2200      	movs	r2, #0
   23612:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   23616:	4b10      	ldr	r3, [pc, #64]	; (23658 <cloud_is_send_allowed+0x98>)
   23618:	f7f9 fb36 	bl	1cc88 <__aeabi_dcmpeq>
   2361c:	b178      	cbz	r0, 2363e <cloud_is_send_allowed+0x7e>
		CLOUD_CMD_STATE_TRUE) &&
   2361e:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   23622:	4630      	mov	r0, r6
   23624:	4639      	mov	r1, r7
   23626:	f7f9 fb57 	bl	1ccd8 <__aeabi_dcmpgt>
   2362a:	b930      	cbnz	r0, 2363a <cloud_is_send_allowed+0x7a>
}
   2362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   23630:	3501      	adds	r5, #1
   23632:	2d0a      	cmp	r5, #10
   23634:	d1cc      	bne.n	235d0 <cloud_is_send_allowed+0x10>
		return false;
   23636:	2000      	movs	r0, #0
   23638:	e7f8      	b.n	2362c <cloud_is_send_allowed+0x6c>
		return true;
   2363a:	2001      	movs	r0, #1
   2363c:	e7f6      	b.n	2362c <cloud_is_send_allowed+0x6c>
			!= CLOUD_CMD_STATE_TRUE) &&
   2363e:	2200      	movs	r2, #0
   23640:	4b05      	ldr	r3, [pc, #20]	; (23658 <cloud_is_send_allowed+0x98>)
   23642:	4640      	mov	r0, r8
   23644:	4649      	mov	r1, r9
   23646:	f7f9 fb1f 	bl	1cc88 <__aeabi_dcmpeq>
   2364a:	fab0 f080 	clz	r0, r0
   2364e:	0940      	lsrs	r0, r0, #5
   23650:	e7ec      	b.n	2362c <cloud_is_send_allowed+0x6c>
   23652:	bf00      	nop
   23654:	20020018 	.word	0x20020018
   23658:	3ff00000 	.word	0x3ff00000

0002365c <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const uint32_t ui_count, const char * const fota[],
	const uint32_t fota_count, const uint16_t fota_version, cJSON * const obj_out)
{
   2365c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23660:	b086      	sub	sp, #24
   23662:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   23664:	4604      	mov	r4, r0
   23666:	468a      	mov	sl, r1
   23668:	4690      	mov	r8, r2
   2366a:	4699      	mov	r9, r3
   2366c:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   23670:	2f00      	cmp	r7, #0
   23672:	d041      	beq.n	236f8 <service_info_json_object_encode+0x9c>
   23674:	b908      	cbnz	r0, 2367a <service_info_json_object_encode+0x1e>
   23676:	2900      	cmp	r1, #0
   23678:	d13e      	bne.n	236f8 <service_info_json_object_encode+0x9c>
   2367a:	f1b8 0f00 	cmp.w	r8, #0
   2367e:	d102      	bne.n	23686 <service_info_json_object_encode+0x2a>
	    ((fota == NULL) && fota_count)) {
   23680:	f1b9 0f00 	cmp.w	r9, #0
   23684:	d138      	bne.n	236f8 <service_info_json_object_encode+0x9c>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   23686:	f007 fdad 	bl	2b1e4 <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   2368a:	4605      	mov	r5, r0
   2368c:	2800      	cmp	r0, #0
   2368e:	d036      	beq.n	236fe <service_info_json_object_encode+0xa2>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   23690:	4603      	mov	r3, r0
   23692:	4a1c      	ldr	r2, [pc, #112]	; (23704 <service_info_json_object_encode+0xa8>)
   23694:	4620      	mov	r0, r4
   23696:	4651      	mov	r1, sl
   23698:	f020 fc92 	bl	43fc0 <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   2369c:	4604      	mov	r4, r0
   2369e:	bb38      	cbnz	r0, 236f0 <service_info_json_object_encode+0x94>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   236a0:	210c      	movs	r1, #12
   236a2:	4b19      	ldr	r3, [pc, #100]	; (23708 <service_info_json_object_encode+0xac>)
   236a4:	4a19      	ldr	r2, [pc, #100]	; (2370c <service_info_json_object_encode+0xb0>)
   236a6:	eb0d 0001 	add.w	r0, sp, r1
   236aa:	9600      	str	r6, [sp, #0]
   236ac:	f01f f922 	bl	428f4 <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   236b0:	462b      	mov	r3, r5
   236b2:	aa03      	add	r2, sp, #12
   236b4:	4649      	mov	r1, r9
   236b6:	4640      	mov	r0, r8
   236b8:	f020 fc82 	bl	43fc0 <add_array_obj>
				    service_info_obj);
		if (fota_version > 1) {
   236bc:	2e01      	cmp	r6, #1
		err = add_array_obj(fota, fota_count, fota_name,
   236be:	4604      	mov	r4, r0
		if (fota_version > 1) {
   236c0:	d90c      	bls.n	236dc <service_info_json_object_encode+0x80>
			/* Clear previous fota version in the shadow */
			snprintf(fota_name, sizeof(fota_name), "%s%hu",
   236c2:	210c      	movs	r1, #12
   236c4:	3e01      	subs	r6, #1
   236c6:	eb0d 0001 	add.w	r0, sp, r1
   236ca:	9600      	str	r6, [sp, #0]
   236cc:	4b0e      	ldr	r3, [pc, #56]	; (23708 <service_info_json_object_encode+0xac>)
   236ce:	4a0f      	ldr	r2, [pc, #60]	; (2370c <service_info_json_object_encode+0xb0>)
   236d0:	f01f f910 	bl	428f4 <sniprintf>
				 FOTAS_JSON_NAME, fota_version - 1);
			cJSON_AddNullToObject(service_info_obj, fota_name);
   236d4:	a903      	add	r1, sp, #12
   236d6:	4628      	mov	r0, r5
   236d8:	f023 fbf8 	bl	46ecc <cJSON_AddNullToObject>
		}
	}

	if (!err) {
   236dc:	b944      	cbnz	r4, 236f0 <service_info_json_object_encode+0x94>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   236de:	462a      	mov	r2, r5
   236e0:	490b      	ldr	r1, [pc, #44]	; (23710 <service_info_json_object_encode+0xb4>)
   236e2:	4638      	mov	r0, r7
   236e4:	f023 fbd1 	bl	46e8a <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   236e8:	4620      	mov	r0, r4
   236ea:	b006      	add	sp, #24
   236ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cJSON_Delete(service_info_obj);
   236f0:	4628      	mov	r0, r5
   236f2:	f007 fca3 	bl	2b03c <cJSON_Delete>
   236f6:	e7f7      	b.n	236e8 <service_info_json_object_encode+0x8c>
		return -EINVAL;
   236f8:	f06f 0415 	mvn.w	r4, #21
   236fc:	e7f4      	b.n	236e8 <service_info_json_object_encode+0x8c>
		return -ENOMEM;
   236fe:	f06f 040b 	mvn.w	r4, #11
   23702:	e7f1      	b.n	236e8 <service_info_json_object_encode+0x8c>
   23704:	0004b841 	.word	0x0004b841
   23708:	0004bba2 	.word	0x0004bba2
   2370c:	0004bba9 	.word	0x0004bba9
   23710:	0004bbaf 	.word	0x0004bbaf

00023714 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23714:	4b03      	ldr	r3, [pc, #12]	; (23724 <gps_control_is_enabled+0x10>)
   23716:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
   2371a:	3000      	adds	r0, #0
   2371c:	bf18      	it	ne
   2371e:	2001      	movne	r0, #1
   23720:	4770      	bx	lr
   23722:	bf00      	nop
   23724:	20024a00 	.word	0x20024a00

00023728 <gps_control_is_active>:
   23728:	4b03      	ldr	r3, [pc, #12]	; (23738 <gps_control_is_active+0x10>)
   2372a:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
   2372e:	3000      	adds	r0, #0
   23730:	bf18      	it	ne
   23732:	2001      	movne	r0, #1
   23734:	4770      	bx	lr
   23736:	bf00      	nop
   23738:	200249fc 	.word	0x200249fc

0002373c <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2373c:	4b05      	ldr	r3, [pc, #20]	; (23754 <gps_control_set_active+0x18>)
   2373e:	e8d3 2fef 	ldaex	r2, [r3]
   23742:	e8c3 0fe1 	stlex	r1, r0, [r3]
   23746:	2900      	cmp	r1, #0
   23748:	d1f9      	bne.n	2373e <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
   2374a:	1c10      	adds	r0, r2, #0
   2374c:	bf18      	it	ne
   2374e:	2001      	movne	r0, #1
   23750:	4770      	bx	lr
   23752:	bf00      	nop
   23754:	200249fc 	.word	0x200249fc

00023758 <stop>:
{
   23758:	b538      	push	{r3, r4, r5, lr}
	if (gps_dev == NULL) {
   2375a:	4b1f      	ldr	r3, [pc, #124]	; (237d8 <stop+0x80>)
   2375c:	4c1f      	ldr	r4, [pc, #124]	; (237dc <stop+0x84>)
   2375e:	6818      	ldr	r0, [r3, #0]
   23760:	4b1f      	ldr	r3, [pc, #124]	; (237e0 <stop+0x88>)
   23762:	1ae4      	subs	r4, r4, r3
   23764:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   23768:	b948      	cbnz	r0, 2377e <stop+0x26>
		LOG_ERR("GPS controller is not initialized");
   2376a:	2301      	movs	r3, #1
   2376c:	491d      	ldr	r1, [pc, #116]	; (237e4 <stop+0x8c>)
   2376e:	f363 0007 	bfi	r0, r3, #0, #8
   23772:	f364 108f 	bfi	r0, r4, #6, #10
}
   23776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("GPS operation was stopped");
   2377a:	f020 bfd4 	b.w	44726 <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->stop == NULL) {
   2377e:	6883      	ldr	r3, [r0, #8]
   23780:	685b      	ldr	r3, [r3, #4]
   23782:	b17b      	cbz	r3, 237a4 <stop+0x4c>
		return -ENOTSUP;
	}

	return api->stop(dev);
   23784:	4798      	blx	r3
	if (err) {
   23786:	4605      	mov	r5, r0
   23788:	b178      	cbz	r0, 237aa <stop+0x52>
		LOG_ERR("Failed to disable GPS, error: %d", err);
   2378a:	2301      	movs	r3, #1
   2378c:	f04f 0000 	mov.w	r0, #0
   23790:	f363 0007 	bfi	r0, r3, #0, #8
   23794:	f364 108f 	bfi	r0, r4, #6, #10
   23798:	462a      	mov	r2, r5
}
   2379a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
   2379e:	4912      	ldr	r1, [pc, #72]	; (237e8 <stop+0x90>)
   237a0:	f020 bfc1 	b.w	44726 <log_string_sync>
		return -ENOTSUP;
   237a4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   237a8:	e7ef      	b.n	2378a <stop+0x32>
	k_delayed_work_cancel(&start_work);
   237aa:	4810      	ldr	r0, [pc, #64]	; (237ec <stop+0x94>)
   237ac:	f01d fb7a 	bl	40ea4 <k_delayed_work_cancel>
   237b0:	4b0f      	ldr	r3, [pc, #60]	; (237f0 <stop+0x98>)
   237b2:	e8d3 2fef 	ldaex	r2, [r3]
   237b6:	e8c3 5fe1 	stlex	r1, r5, [r3]
   237ba:	2900      	cmp	r1, #0
   237bc:	d1f9      	bne.n	237b2 <stop+0x5a>
	gps_control_set_active(false);
   237be:	4628      	mov	r0, r5
   237c0:	f7ff ffbc 	bl	2373c <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
   237c4:	f04f 0000 	mov.w	r0, #0
   237c8:	2303      	movs	r3, #3
   237ca:	f363 0007 	bfi	r0, r3, #0, #8
   237ce:	f364 108f 	bfi	r0, r4, #6, #10
   237d2:	4908      	ldr	r1, [pc, #32]	; (237f4 <stop+0x9c>)
   237d4:	e7cf      	b.n	23776 <stop+0x1e>
   237d6:	bf00      	nop
   237d8:	200249f8 	.word	0x200249f8
   237dc:	00049828 	.word	0x00049828
   237e0:	00049788 	.word	0x00049788
   237e4:	0004bd56 	.word	0x0004bd56
   237e8:	0004bd78 	.word	0x0004bd78
   237ec:	20021a48 	.word	0x20021a48
   237f0:	20024a00 	.word	0x20024a00
   237f4:	0004bd99 	.word	0x0004bd99

000237f8 <start>:
{
   237f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   237fa:	b085      	sub	sp, #20
	struct gps_config gps_cfg = {
   237fc:	2210      	movs	r2, #16
   237fe:	2100      	movs	r1, #0
   23800:	4668      	mov	r0, sp
   23802:	f024 fce1 	bl	481c8 <memset>
   23806:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   23808:	4d48      	ldr	r5, [pc, #288]	; (2392c <start+0x134>)
	struct gps_config gps_cfg = {
   2380a:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   2380e:	682b      	ldr	r3, [r5, #0]
	struct gps_config gps_cfg = {
   23810:	2601      	movs	r6, #1
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   23812:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
   23816:	9301      	str	r3, [sp, #4]
   23818:	f44f 73b4 	mov.w	r3, #360	; 0x168
	if (gps_dev == NULL) {
   2381c:	4f44      	ldr	r7, [pc, #272]	; (23930 <start+0x138>)
	struct gps_config gps_cfg = {
   2381e:	9302      	str	r3, [sp, #8]
   23820:	4c44      	ldr	r4, [pc, #272]	; (23934 <start+0x13c>)
   23822:	4b45      	ldr	r3, [pc, #276]	; (23938 <start+0x140>)
	if (gps_dev == NULL) {
   23824:	683a      	ldr	r2, [r7, #0]
   23826:	1ae4      	subs	r4, r4, r3
	struct gps_config gps_cfg = {
   23828:	f88d 600d 	strb.w	r6, [sp, #13]
	if (gps_dev == NULL) {
   2382c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		LOG_ERR("GPS controller is not initialized properly");
   23830:	f04f 0000 	mov.w	r0, #0
	if (gps_dev == NULL) {
   23834:	b942      	cbnz	r2, 23848 <start+0x50>
		LOG_ERR("GPS controller is not initialized properly");
   23836:	f366 0007 	bfi	r0, r6, #0, #8
   2383a:	f364 108f 	bfi	r0, r4, #6, #10
   2383e:	493f      	ldr	r1, [pc, #252]	; (2393c <start+0x144>)
   23840:	f020 ff71 	bl	44726 <log_string_sync>
}
   23844:	b005      	add	sp, #20
   23846:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Enabling PSM");
   23848:	2303      	movs	r3, #3
   2384a:	f363 0007 	bfi	r0, r3, #0, #8
   2384e:	f364 108f 	bfi	r0, r4, #6, #10
   23852:	493b      	ldr	r1, [pc, #236]	; (23940 <start+0x148>)
   23854:	f020 ff67 	bl	44726 <log_string_sync>
	err = lte_lc_psm_req(true);
   23858:	4630      	mov	r0, r6
   2385a:	f009 ffd3 	bl	2d804 <lte_lc_psm_req>
	if (err) {
   2385e:	4602      	mov	r2, r0
		LOG_ERR("PSM request failed, error: %d", err);
   23860:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23864:	b1da      	cbz	r2, 2389e <start+0xa6>
		LOG_ERR("PSM request failed, error: %d", err);
   23866:	2101      	movs	r1, #1
   23868:	f361 0007 	bfi	r0, r1, #0, #8
   2386c:	f364 108f 	bfi	r0, r4, #6, #10
   23870:	4934      	ldr	r1, [pc, #208]	; (23944 <start+0x14c>)
   23872:	f020 ff58 	bl	44726 <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
   23876:	6838      	ldr	r0, [r7, #0]
	if ((dev == NULL) || (cfg == NULL)) {
   23878:	b1d0      	cbz	r0, 238b0 <start+0xb8>
	if (api->start == NULL) {
   2387a:	6883      	ldr	r3, [r0, #8]
   2387c:	681b      	ldr	r3, [r3, #0]
   2387e:	b1d3      	cbz	r3, 238b6 <start+0xbe>
	return api->start(dev, cfg);
   23880:	4669      	mov	r1, sp
   23882:	4798      	blx	r3
	if (err) {
   23884:	4602      	mov	r2, r0
   23886:	b1c8      	cbz	r0, 238bc <start+0xc4>
		LOG_ERR("Failed to enable GPS, error: %d", err);
   23888:	f04f 0000 	mov.w	r0, #0
   2388c:	2301      	movs	r3, #1
   2388e:	492e      	ldr	r1, [pc, #184]	; (23948 <start+0x150>)
   23890:	f363 0007 	bfi	r0, r3, #0, #8
   23894:	f364 108f 	bfi	r0, r4, #6, #10
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   23898:	f020 ff45 	bl	44726 <log_string_sync>
   2389c:	e7d2      	b.n	23844 <start+0x4c>
		LOG_INF("PSM enabled");
   2389e:	2303      	movs	r3, #3
   238a0:	f363 0007 	bfi	r0, r3, #0, #8
   238a4:	f364 108f 	bfi	r0, r4, #6, #10
   238a8:	4928      	ldr	r1, [pc, #160]	; (2394c <start+0x154>)
   238aa:	f020 ff3c 	bl	44726 <log_string_sync>
   238ae:	e7e2      	b.n	23876 <start+0x7e>
		return -EINVAL;
   238b0:	f06f 0215 	mvn.w	r2, #21
   238b4:	e7e8      	b.n	23888 <start+0x90>
		return -ENOTSUP;
   238b6:	f06f 0285 	mvn.w	r2, #133	; 0x85
   238ba:	e7e5      	b.n	23888 <start+0x90>
   238bc:	2001      	movs	r0, #1
   238be:	4b24      	ldr	r3, [pc, #144]	; (23950 <start+0x158>)
   238c0:	e8d3 2fef 	ldaex	r2, [r3]
   238c4:	e8c3 0fe1 	stlex	r1, r0, [r3]
   238c8:	2900      	cmp	r1, #0
   238ca:	d1f9      	bne.n	238c0 <start+0xc8>
	gps_control_set_active(true);
   238cc:	f7ff ff36 	bl	2373c <gps_control_set_active>
	ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   238d0:	2008      	movs	r0, #8
   238d2:	f7ff f881 	bl	229d8 <ui_led_set_pattern>
	LOG_INF("GPS started successfully. Searching for satellites ");
   238d6:	2303      	movs	r3, #3
   238d8:	f04f 0000 	mov.w	r0, #0
   238dc:	f363 0007 	bfi	r0, r3, #0, #8
   238e0:	f364 108f 	bfi	r0, r4, #6, #10
   238e4:	491b      	ldr	r1, [pc, #108]	; (23954 <start+0x15c>)
   238e6:	f020 ff1e 	bl	44726 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   238ea:	2303      	movs	r3, #3
   238ec:	f04f 0000 	mov.w	r0, #0
   238f0:	f363 0007 	bfi	r0, r3, #0, #8
   238f4:	f364 108f 	bfi	r0, r4, #6, #10
   238f8:	4917      	ldr	r1, [pc, #92]	; (23958 <start+0x160>)
   238fa:	f020 ff14 	bl	44726 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   238fe:	2303      	movs	r3, #3
   23900:	f04f 0000 	mov.w	r0, #0
   23904:	f363 0007 	bfi	r0, r3, #0, #8
   23908:	f364 108f 	bfi	r0, r4, #6, #10
   2390c:	f44f 72b4 	mov.w	r2, #360	; 0x168
   23910:	4912      	ldr	r1, [pc, #72]	; (2395c <start+0x164>)
   23912:	f020 ff08 	bl	44726 <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   23916:	f04f 0000 	mov.w	r0, #0
   2391a:	2303      	movs	r3, #3
   2391c:	f363 0007 	bfi	r0, r3, #0, #8
   23920:	f364 108f 	bfi	r0, r4, #6, #10
   23924:	682a      	ldr	r2, [r5, #0]
   23926:	490e      	ldr	r1, [pc, #56]	; (23960 <start+0x168>)
   23928:	e7b6      	b.n	23898 <start+0xa0>
   2392a:	bf00      	nop
   2392c:	20024a04 	.word	0x20024a04
   23930:	200249f8 	.word	0x200249f8
   23934:	00049828 	.word	0x00049828
   23938:	00049788 	.word	0x00049788
   2393c:	0004bbfb 	.word	0x0004bbfb
   23940:	0004bc26 	.word	0x0004bc26
   23944:	0004bc33 	.word	0x0004bc33
   23948:	0004bc5d 	.word	0x0004bc5d
   2394c:	0004bc51 	.word	0x0004bc51
   23950:	20024a00 	.word	0x20024a00
   23954:	0004bc7d 	.word	0x0004bc7d
   23958:	0004bcb1 	.word	0x0004bcb1
   2395c:	0004bce5 	.word	0x0004bce5
   23960:	0004bd1b 	.word	0x0004bd1b

00023964 <gps_control_start>:

void gps_control_start(uint32_t delay_ms)
{
   23964:	b5d0      	push	{r4, r6, r7, lr}
   23966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2396a:	f240 36e7 	movw	r6, #999	; 0x3e7
   2396e:	2700      	movs	r7, #0
   23970:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   23974:	4b08      	ldr	r3, [pc, #32]	; (23998 <gps_control_start+0x34>)
   23976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2397a:	681c      	ldr	r4, [r3, #0]
   2397c:	4630      	mov	r0, r6
   2397e:	2300      	movs	r3, #0
   23980:	4639      	mov	r1, r7
   23982:	f7f9 fa9b 	bl	1cebc <__aeabi_uldivmod>
   23986:	4602      	mov	r2, r0
   23988:	460b      	mov	r3, r1
   2398a:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   2398c:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   23990:	4902      	ldr	r1, [pc, #8]	; (2399c <gps_control_start+0x38>)
   23992:	f01d b9ff 	b.w	40d94 <k_delayed_work_submit_to_queue>
   23996:	bf00      	nop
   23998:	200249f4 	.word	0x200249f4
   2399c:	20021a48 	.word	0x20021a48

000239a0 <gps_control_stop>:

void gps_control_stop(uint32_t delay_ms)
{
   239a0:	b5d0      	push	{r4, r6, r7, lr}
   239a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   239a6:	f240 36e7 	movw	r6, #999	; 0x3e7
   239aa:	2700      	movs	r7, #0
   239ac:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   239b0:	4b08      	ldr	r3, [pc, #32]	; (239d4 <gps_control_stop+0x34>)
   239b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   239b6:	681c      	ldr	r4, [r3, #0]
   239b8:	4630      	mov	r0, r6
   239ba:	2300      	movs	r3, #0
   239bc:	4639      	mov	r1, r7
   239be:	f7f9 fa7d 	bl	1cebc <__aeabi_uldivmod>
   239c2:	4602      	mov	r2, r0
   239c4:	460b      	mov	r3, r1
   239c6:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   239c8:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   239cc:	4902      	ldr	r1, [pc, #8]	; (239d8 <gps_control_stop+0x38>)
   239ce:	f01d b9e1 	b.w	40d94 <k_delayed_work_submit_to_queue>
   239d2:	bf00      	nop
   239d4:	200249f4 	.word	0x200249f4
   239d8:	20021a78 	.word	0x20021a78

000239dc <gps_control_get_gps_reporting_interval>:

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
   239dc:	4b01      	ldr	r3, [pc, #4]	; (239e4 <gps_control_get_gps_reporting_interval+0x8>)
   239de:	6818      	ldr	r0, [r3, #0]
   239e0:	4770      	bx	lr
   239e2:	bf00      	nop
   239e4:	20024a04 	.word	0x20024a04

000239e8 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
   239e8:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
   239ea:	4e2e      	ldr	r6, [pc, #184]	; (23aa4 <gps_control_init+0xbc>)
{
   239ec:	460c      	mov	r4, r1
	if (is_init) {
   239ee:	7833      	ldrb	r3, [r6, #0]
   239f0:	2b00      	cmp	r3, #0
   239f2:	d151      	bne.n	23a98 <gps_control_init+0xb0>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
   239f4:	2800      	cmp	r0, #0
   239f6:	d052      	beq.n	23a9e <gps_control_init+0xb6>
   239f8:	2900      	cmp	r1, #0
   239fa:	d050      	beq.n	23a9e <gps_control_init+0xb6>
		return -EINVAL;
	}

	app_work_q = work_q;
   239fc:	4b2a      	ldr	r3, [pc, #168]	; (23aa8 <gps_control_init+0xc0>)
   239fe:	6018      	str	r0, [r3, #0]
   23a00:	482a      	ldr	r0, [pc, #168]	; (23aac <gps_control_init+0xc4>)
   23a02:	f01a fe9d 	bl	3e740 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   23a06:	4a2a      	ldr	r2, [pc, #168]	; (23ab0 <gps_control_init+0xc8>)
   23a08:	4d2a      	ldr	r5, [pc, #168]	; (23ab4 <gps_control_init+0xcc>)
   23a0a:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
   23a0c:	4a2a      	ldr	r2, [pc, #168]	; (23ab8 <gps_control_init+0xd0>)
   23a0e:	1aad      	subs	r5, r5, r2
   23a10:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   23a14:	b990      	cbnz	r0, 23a3c <gps_control_init+0x54>
		LOG_ERR("Could not get %s device",
   23a16:	2301      	movs	r3, #1
   23a18:	f04f 0400 	mov.w	r4, #0
   23a1c:	4823      	ldr	r0, [pc, #140]	; (23aac <gps_control_init+0xc4>)
   23a1e:	f363 0407 	bfi	r4, r3, #0, #8
   23a22:	f020 fe93 	bl	4474c <log_strdup>
   23a26:	f365 148f 	bfi	r4, r5, #6, #10
   23a2a:	4602      	mov	r2, r0
   23a2c:	4923      	ldr	r1, [pc, #140]	; (23abc <gps_control_init+0xd4>)
   23a2e:	4620      	mov	r0, r4
   23a30:	f020 fe79 	bl	44726 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   23a34:	f06f 0412 	mvn.w	r4, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
   23a38:	4620      	mov	r0, r4
   23a3a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->init == NULL) {
   23a3c:	6883      	ldr	r3, [r0, #8]
   23a3e:	68db      	ldr	r3, [r3, #12]
   23a40:	b17b      	cbz	r3, 23a62 <gps_control_init+0x7a>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   23a42:	4621      	mov	r1, r4
   23a44:	4798      	blx	r3
	if (err) {
   23a46:	4604      	mov	r4, r0
   23a48:	b170      	cbz	r0, 23a68 <gps_control_init+0x80>
		LOG_ERR("Could not initialize GPS, error: %d", err);
   23a4a:	2301      	movs	r3, #1
   23a4c:	f04f 0000 	mov.w	r0, #0
   23a50:	f363 0007 	bfi	r0, r3, #0, #8
   23a54:	f365 108f 	bfi	r0, r5, #6, #10
   23a58:	4622      	mov	r2, r4
   23a5a:	4919      	ldr	r1, [pc, #100]	; (23ac0 <gps_control_init+0xd8>)
   23a5c:	f020 fe63 	bl	44726 <log_string_sync>
		return err;
   23a60:	e7ea      	b.n	23a38 <gps_control_init+0x50>
		return -ENOTSUP;
   23a62:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23a66:	e7f0      	b.n	23a4a <gps_control_init+0x62>
	k_delayed_work_init(&start_work, start);
   23a68:	4916      	ldr	r1, [pc, #88]	; (23ac4 <gps_control_init+0xdc>)
   23a6a:	4817      	ldr	r0, [pc, #92]	; (23ac8 <gps_control_init+0xe0>)
   23a6c:	f024 faab 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&stop_work, stop);
   23a70:	4916      	ldr	r1, [pc, #88]	; (23acc <gps_control_init+0xe4>)
   23a72:	4817      	ldr	r0, [pc, #92]	; (23ad0 <gps_control_init+0xe8>)
   23a74:	f024 faa7 	bl	47fc6 <k_delayed_work_init>
	gps_reporting_interval_seconds =
   23a78:	221e      	movs	r2, #30
   23a7a:	4b16      	ldr	r3, [pc, #88]	; (23ad4 <gps_control_init+0xec>)
	LOG_INF("GPS initialized");
   23a7c:	f04f 0000 	mov.w	r0, #0
	gps_reporting_interval_seconds =
   23a80:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
   23a82:	2303      	movs	r3, #3
   23a84:	f363 0007 	bfi	r0, r3, #0, #8
   23a88:	f365 108f 	bfi	r0, r5, #6, #10
   23a8c:	4912      	ldr	r1, [pc, #72]	; (23ad8 <gps_control_init+0xf0>)
   23a8e:	f020 fe4a 	bl	44726 <log_string_sync>
	is_init = true;
   23a92:	2301      	movs	r3, #1
   23a94:	7033      	strb	r3, [r6, #0]
	return err;
   23a96:	e7cf      	b.n	23a38 <gps_control_init+0x50>
		return -EALREADY;
   23a98:	f06f 0477 	mvn.w	r4, #119	; 0x77
   23a9c:	e7cc      	b.n	23a38 <gps_control_init+0x50>
		return -EINVAL;
   23a9e:	f06f 0415 	mvn.w	r4, #21
   23aa2:	e7c9      	b.n	23a38 <gps_control_init+0x50>
   23aa4:	2002b4aa 	.word	0x2002b4aa
   23aa8:	200249f4 	.word	0x200249f4
   23aac:	0004bbbb 	.word	0x0004bbbb
   23ab0:	200249f8 	.word	0x200249f8
   23ab4:	00049828 	.word	0x00049828
   23ab8:	00049788 	.word	0x00049788
   23abc:	0004b7ed 	.word	0x0004b7ed
   23ac0:	0004bbc7 	.word	0x0004bbc7
   23ac4:	000237f9 	.word	0x000237f9
   23ac8:	20021a48 	.word	0x20021a48
   23acc:	00023759 	.word	0x00023759
   23ad0:	20021a78 	.word	0x20021a78
   23ad4:	20024a04 	.word	0x20024a04
   23ad8:	0004bbeb 	.word	0x0004bbeb

00023adc <submit_poll_work>:
					      K_SECONDS((uint32_t)delay_s));
   23adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
   23ae0:	b5d0      	push	{r4, r6, r7, lr}
					      K_SECONDS((uint32_t)delay_s));
   23ae2:	4341      	muls	r1, r0
   23ae4:	f240 36e7 	movw	r6, #999	; 0x3e7
   23ae8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   23aec:	2700      	movs	r7, #0
   23aee:	fbe0 6701 	umlal	r6, r7, r0, r1
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   23af2:	4b08      	ldr	r3, [pc, #32]	; (23b14 <submit_poll_work+0x38>)
   23af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23af8:	681c      	ldr	r4, [r3, #0]
   23afa:	4630      	mov	r0, r6
   23afc:	2300      	movs	r3, #0
   23afe:	4639      	mov	r1, r7
   23b00:	f7f9 f9dc 	bl	1cebc <__aeabi_uldivmod>
   23b04:	4602      	mov	r2, r0
   23b06:	460b      	mov	r3, r1
   23b08:	4620      	mov	r0, r4
}
   23b0a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   23b0e:	4902      	ldr	r1, [pc, #8]	; (23b18 <submit_poll_work+0x3c>)
   23b10:	f01d b940 	b.w	40d94 <k_delayed_work_submit_to_queue>
   23b14:	20024a0c 	.word	0x20024a0c
   23b18:	20021aa8 	.word	0x20021aa8

00023b1c <env_sensors_poll>:
	return initialized ? submit_poll_work(0) : -ENXIO;
   23b1c:	4b04      	ldr	r3, [pc, #16]	; (23b30 <env_sensors_poll+0x14>)
   23b1e:	781b      	ldrb	r3, [r3, #0]
   23b20:	b113      	cbz	r3, 23b28 <env_sensors_poll+0xc>
   23b22:	2000      	movs	r0, #0
   23b24:	f7ff bfda 	b.w	23adc <submit_poll_work>
}
   23b28:	f06f 0005 	mvn.w	r0, #5
   23b2c:	4770      	bx	lr
   23b2e:	bf00      	nop
   23b30:	2002b4ac 	.word	0x2002b4ac

00023b34 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   23b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b38:	460e      	mov	r6, r1
	if ((work_q == NULL) || (cb == NULL)) {
   23b3a:	4607      	mov	r7, r0
   23b3c:	2800      	cmp	r0, #0
   23b3e:	d03a      	beq.n	23bb6 <env_sensors_init_and_start+0x82>
   23b40:	2900      	cmp	r1, #0
   23b42:	d038      	beq.n	23bb6 <env_sensors_init_and_start+0x82>
   23b44:	2403      	movs	r4, #3
   23b46:	4d1f      	ldr	r5, [pc, #124]	; (23bc4 <env_sensors_init_and_start+0x90>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23b48:	f8df 8098 	ldr.w	r8, [pc, #152]	; 23be4 <env_sensors_init_and_start+0xb0>
   23b4c:	f8df a098 	ldr.w	sl, [pc, #152]	; 23be8 <env_sensors_init_and_start+0xb4>
   23b50:	f8df b098 	ldr.w	fp, [pc, #152]	; 23bec <env_sensors_init_and_start+0xb8>
			device_get_binding(env_sensors[i]->dev_name);
   23b54:	f8d5 9000 	ldr.w	r9, [r5]
   23b58:	f8d9 001c 	ldr.w	r0, [r9, #28]
   23b5c:	f01a fdf0 	bl	3e740 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   23b60:	f8c9 0020 	str.w	r0, [r9, #32]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   23b64:	f855 9b04 	ldr.w	r9, [r5], #4
   23b68:	f8d9 3020 	ldr.w	r3, [r9, #32]
   23b6c:	b973      	cbnz	r3, 23b8c <env_sensors_init_and_start+0x58>
   23b6e:	2390      	movs	r3, #144	; 0x90
   23b70:	4642      	mov	r2, r8
   23b72:	4651      	mov	r1, sl
   23b74:	4658      	mov	r0, fp
   23b76:	f020 fbab 	bl	442d0 <printk>
   23b7a:	f8d9 101c 	ldr.w	r1, [r9, #28]
   23b7e:	4812      	ldr	r0, [pc, #72]	; (23bc8 <env_sensors_init_and_start+0x94>)
   23b80:	f020 fba6 	bl	442d0 <printk>
   23b84:	2190      	movs	r1, #144	; 0x90
   23b86:	4640      	mov	r0, r8
   23b88:	f020 fdbc 	bl	44704 <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   23b8c:	3c01      	subs	r4, #1
   23b8e:	d1e1      	bne.n	23b54 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   23b90:	4b0e      	ldr	r3, [pc, #56]	; (23bcc <env_sensors_init_and_start+0x98>)

	data_ready_cb = cb;

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b92:	490f      	ldr	r1, [pc, #60]	; (23bd0 <env_sensors_init_and_start+0x9c>)
	env_sensors_work_q = work_q;
   23b94:	601f      	str	r7, [r3, #0]
	data_ready_cb = cb;
   23b96:	4b0f      	ldr	r3, [pc, #60]	; (23bd4 <env_sensors_init_and_start+0xa0>)
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b98:	480f      	ldr	r0, [pc, #60]	; (23bd8 <env_sensors_init_and_start+0xa4>)
	data_ready_cb = cb;
   23b9a:	601e      	str	r6, [r3, #0]
	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);
   23b9c:	f024 fa13 	bl	47fc6 <k_delayed_work_init>

	initialized = true;
   23ba0:	2201      	movs	r2, #1
   23ba2:	4b0e      	ldr	r3, [pc, #56]	; (23bdc <env_sensors_init_and_start+0xa8>)
   23ba4:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   23ba6:	4b0e      	ldr	r3, [pc, #56]	; (23be0 <env_sensors_init_and_start+0xac>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23ba8:	681b      	ldr	r3, [r3, #0]
   23baa:	b143      	cbz	r3, 23bbe <env_sensors_init_and_start+0x8a>
}
   23bac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23bb0:	2005      	movs	r0, #5
   23bb2:	f7ff bf93 	b.w	23adc <submit_poll_work>
		return -EINVAL;
   23bb6:	f06f 0015 	mvn.w	r0, #21
}
   23bba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   23bbe:	4620      	mov	r0, r4
   23bc0:	e7fb      	b.n	23bba <env_sensors_init_and_start+0x86>
   23bc2:	bf00      	nop
   23bc4:	00049b80 	.word	0x00049b80
   23bc8:	0004be1c 	.word	0x0004be1c
   23bcc:	20024a0c 	.word	0x20024a0c
   23bd0:	0001d4c1 	.word	0x0001d4c1
   23bd4:	20024a08 	.word	0x20024a08
   23bd8:	20021aa8 	.word	0x20021aa8
   23bdc:	2002b4ac 	.word	0x2002b4ac
   23be0:	20020728 	.word	0x20020728
   23be4:	0004bdbf 	.word	0x0004bdbf
   23be8:	0004be08 	.word	0x0004be08
   23bec:	0004b33b 	.word	0x0004b33b

00023bf0 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   23bf0:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23bf2:	4604      	mov	r4, r0
   23bf4:	2800      	cmp	r0, #0
   23bf6:	d041      	beq.n	23c7c <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   23bf8:	f04f 0320 	mov.w	r3, #32
   23bfc:	f3ef 8611 	mrs	r6, BASEPRI
   23c00:	f383 8811 	msr	BASEPRI, r3
   23c04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c08:	481e      	ldr	r0, [pc, #120]	; (23c84 <env_sensors_get_temperature+0x94>)
   23c0a:	f01d f877 	bl	40cfc <z_spin_lock_valid>
   23c0e:	b968      	cbnz	r0, 23c2c <env_sensors_get_temperature+0x3c>
   23c10:	235c      	movs	r3, #92	; 0x5c
   23c12:	4a1d      	ldr	r2, [pc, #116]	; (23c88 <env_sensors_get_temperature+0x98>)
   23c14:	491d      	ldr	r1, [pc, #116]	; (23c8c <env_sensors_get_temperature+0x9c>)
   23c16:	481e      	ldr	r0, [pc, #120]	; (23c90 <env_sensors_get_temperature+0xa0>)
   23c18:	f020 fb5a 	bl	442d0 <printk>
   23c1c:	4919      	ldr	r1, [pc, #100]	; (23c84 <env_sensors_get_temperature+0x94>)
   23c1e:	481d      	ldr	r0, [pc, #116]	; (23c94 <env_sensors_get_temperature+0xa4>)
   23c20:	f020 fb56 	bl	442d0 <printk>
   23c24:	215c      	movs	r1, #92	; 0x5c
   23c26:	4818      	ldr	r0, [pc, #96]	; (23c88 <env_sensors_get_temperature+0x98>)
   23c28:	f020 fd6c 	bl	44704 <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23c2c:	4d1a      	ldr	r5, [pc, #104]	; (23c98 <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   23c2e:	4815      	ldr	r0, [pc, #84]	; (23c84 <env_sensors_get_temperature+0x94>)
   23c30:	f01d f882 	bl	40d38 <z_spin_lock_set_owner>
   23c34:	4623      	mov	r3, r4
   23c36:	f105 0418 	add.w	r4, r5, #24
   23c3a:	462a      	mov	r2, r5
   23c3c:	ca03      	ldmia	r2!, {r0, r1}
   23c3e:	42a2      	cmp	r2, r4
   23c40:	6018      	str	r0, [r3, #0]
   23c42:	6059      	str	r1, [r3, #4]
   23c44:	4615      	mov	r5, r2
   23c46:	f103 0308 	add.w	r3, r3, #8
   23c4a:	d1f6      	bne.n	23c3a <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23c4c:	480d      	ldr	r0, [pc, #52]	; (23c84 <env_sensors_get_temperature+0x94>)
   23c4e:	f01d f863 	bl	40d18 <z_spin_unlock_valid>
   23c52:	b968      	cbnz	r0, 23c70 <env_sensors_get_temperature+0x80>
   23c54:	2384      	movs	r3, #132	; 0x84
   23c56:	4a0c      	ldr	r2, [pc, #48]	; (23c88 <env_sensors_get_temperature+0x98>)
   23c58:	4910      	ldr	r1, [pc, #64]	; (23c9c <env_sensors_get_temperature+0xac>)
   23c5a:	480d      	ldr	r0, [pc, #52]	; (23c90 <env_sensors_get_temperature+0xa0>)
   23c5c:	f020 fb38 	bl	442d0 <printk>
   23c60:	4908      	ldr	r1, [pc, #32]	; (23c84 <env_sensors_get_temperature+0x94>)
   23c62:	480f      	ldr	r0, [pc, #60]	; (23ca0 <env_sensors_get_temperature+0xb0>)
   23c64:	f020 fb34 	bl	442d0 <printk>
   23c68:	2184      	movs	r1, #132	; 0x84
   23c6a:	4807      	ldr	r0, [pc, #28]	; (23c88 <env_sensors_get_temperature+0x98>)
   23c6c:	f020 fd4a 	bl	44704 <assert_post_action>
	__asm__ volatile(
   23c70:	f386 8811 	msr	BASEPRI, r6
   23c74:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   23c78:	2000      	movs	r0, #0
}
   23c7a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c80:	e7fb      	b.n	23c7a <env_sensors_get_temperature+0x8a>
   23c82:	bf00      	nop
   23c84:	2002026c 	.word	0x2002026c
   23c88:	0004be5f 	.word	0x0004be5f
   23c8c:	0004be85 	.word	0x0004be85
   23c90:	0004b33b 	.word	0x0004b33b
   23c94:	0004be9a 	.word	0x0004be9a
   23c98:	20020248 	.word	0x20020248
   23c9c:	0004beb2 	.word	0x0004beb2
   23ca0:	0004bec9 	.word	0x0004bec9

00023ca4 <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   23ca4:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23ca6:	4604      	mov	r4, r0
   23ca8:	2800      	cmp	r0, #0
   23caa:	d041      	beq.n	23d30 <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   23cac:	f04f 0320 	mov.w	r3, #32
   23cb0:	f3ef 8611 	mrs	r6, BASEPRI
   23cb4:	f383 8811 	msr	BASEPRI, r3
   23cb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23cbc:	481e      	ldr	r0, [pc, #120]	; (23d38 <env_sensors_get_humidity+0x94>)
   23cbe:	f01d f81d 	bl	40cfc <z_spin_lock_valid>
   23cc2:	b968      	cbnz	r0, 23ce0 <env_sensors_get_humidity+0x3c>
   23cc4:	235c      	movs	r3, #92	; 0x5c
   23cc6:	4a1d      	ldr	r2, [pc, #116]	; (23d3c <env_sensors_get_humidity+0x98>)
   23cc8:	491d      	ldr	r1, [pc, #116]	; (23d40 <env_sensors_get_humidity+0x9c>)
   23cca:	481e      	ldr	r0, [pc, #120]	; (23d44 <env_sensors_get_humidity+0xa0>)
   23ccc:	f020 fb00 	bl	442d0 <printk>
   23cd0:	4919      	ldr	r1, [pc, #100]	; (23d38 <env_sensors_get_humidity+0x94>)
   23cd2:	481d      	ldr	r0, [pc, #116]	; (23d48 <env_sensors_get_humidity+0xa4>)
   23cd4:	f020 fafc 	bl	442d0 <printk>
   23cd8:	215c      	movs	r1, #92	; 0x5c
   23cda:	4818      	ldr	r0, [pc, #96]	; (23d3c <env_sensors_get_humidity+0x98>)
   23cdc:	f020 fd12 	bl	44704 <assert_post_action>
   23ce0:	4d1a      	ldr	r5, [pc, #104]	; (23d4c <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   23ce2:	4815      	ldr	r0, [pc, #84]	; (23d38 <env_sensors_get_humidity+0x94>)
   23ce4:	f01d f828 	bl	40d38 <z_spin_lock_set_owner>
   23ce8:	4623      	mov	r3, r4
   23cea:	f105 0418 	add.w	r4, r5, #24
   23cee:	462a      	mov	r2, r5
   23cf0:	ca03      	ldmia	r2!, {r0, r1}
   23cf2:	42a2      	cmp	r2, r4
   23cf4:	6018      	str	r0, [r3, #0]
   23cf6:	6059      	str	r1, [r3, #4]
   23cf8:	4615      	mov	r5, r2
   23cfa:	f103 0308 	add.w	r3, r3, #8
   23cfe:	d1f6      	bne.n	23cee <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23d00:	480d      	ldr	r0, [pc, #52]	; (23d38 <env_sensors_get_humidity+0x94>)
   23d02:	f01d f809 	bl	40d18 <z_spin_unlock_valid>
   23d06:	b968      	cbnz	r0, 23d24 <env_sensors_get_humidity+0x80>
   23d08:	2384      	movs	r3, #132	; 0x84
   23d0a:	4a0c      	ldr	r2, [pc, #48]	; (23d3c <env_sensors_get_humidity+0x98>)
   23d0c:	4910      	ldr	r1, [pc, #64]	; (23d50 <env_sensors_get_humidity+0xac>)
   23d0e:	480d      	ldr	r0, [pc, #52]	; (23d44 <env_sensors_get_humidity+0xa0>)
   23d10:	f020 fade 	bl	442d0 <printk>
   23d14:	4908      	ldr	r1, [pc, #32]	; (23d38 <env_sensors_get_humidity+0x94>)
   23d16:	480f      	ldr	r0, [pc, #60]	; (23d54 <env_sensors_get_humidity+0xb0>)
   23d18:	f020 fada 	bl	442d0 <printk>
   23d1c:	2184      	movs	r1, #132	; 0x84
   23d1e:	4807      	ldr	r0, [pc, #28]	; (23d3c <env_sensors_get_humidity+0x98>)
   23d20:	f020 fcf0 	bl	44704 <assert_post_action>
	__asm__ volatile(
   23d24:	f386 8811 	msr	BASEPRI, r6
   23d28:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   23d2c:	2000      	movs	r0, #0
}
   23d2e:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23d34:	e7fb      	b.n	23d2e <env_sensors_get_humidity+0x8a>
   23d36:	bf00      	nop
   23d38:	2002021c 	.word	0x2002021c
   23d3c:	0004be5f 	.word	0x0004be5f
   23d40:	0004be85 	.word	0x0004be85
   23d44:	0004b33b 	.word	0x0004b33b
   23d48:	0004be9a 	.word	0x0004be9a
   23d4c:	200201f8 	.word	0x200201f8
   23d50:	0004beb2 	.word	0x0004beb2
   23d54:	0004bec9 	.word	0x0004bec9

00023d58 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   23d58:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   23d5a:	4604      	mov	r4, r0
   23d5c:	2800      	cmp	r0, #0
   23d5e:	d041      	beq.n	23de4 <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   23d60:	f04f 0320 	mov.w	r3, #32
   23d64:	f3ef 8611 	mrs	r6, BASEPRI
   23d68:	f383 8811 	msr	BASEPRI, r3
   23d6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23d70:	481e      	ldr	r0, [pc, #120]	; (23dec <env_sensors_get_pressure+0x94>)
   23d72:	f01c ffc3 	bl	40cfc <z_spin_lock_valid>
   23d76:	b968      	cbnz	r0, 23d94 <env_sensors_get_pressure+0x3c>
   23d78:	235c      	movs	r3, #92	; 0x5c
   23d7a:	4a1d      	ldr	r2, [pc, #116]	; (23df0 <env_sensors_get_pressure+0x98>)
   23d7c:	491d      	ldr	r1, [pc, #116]	; (23df4 <env_sensors_get_pressure+0x9c>)
   23d7e:	481e      	ldr	r0, [pc, #120]	; (23df8 <env_sensors_get_pressure+0xa0>)
   23d80:	f020 faa6 	bl	442d0 <printk>
   23d84:	4919      	ldr	r1, [pc, #100]	; (23dec <env_sensors_get_pressure+0x94>)
   23d86:	481d      	ldr	r0, [pc, #116]	; (23dfc <env_sensors_get_pressure+0xa4>)
   23d88:	f020 faa2 	bl	442d0 <printk>
   23d8c:	215c      	movs	r1, #92	; 0x5c
   23d8e:	4818      	ldr	r0, [pc, #96]	; (23df0 <env_sensors_get_pressure+0x98>)
   23d90:	f020 fcb8 	bl	44704 <assert_post_action>
   23d94:	4d1a      	ldr	r5, [pc, #104]	; (23e00 <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   23d96:	4815      	ldr	r0, [pc, #84]	; (23dec <env_sensors_get_pressure+0x94>)
   23d98:	f01c ffce 	bl	40d38 <z_spin_lock_set_owner>
   23d9c:	4623      	mov	r3, r4
   23d9e:	f105 0418 	add.w	r4, r5, #24
   23da2:	462a      	mov	r2, r5
   23da4:	ca03      	ldmia	r2!, {r0, r1}
   23da6:	42a2      	cmp	r2, r4
   23da8:	6018      	str	r0, [r3, #0]
   23daa:	6059      	str	r1, [r3, #4]
   23dac:	4615      	mov	r5, r2
   23dae:	f103 0308 	add.w	r3, r3, #8
   23db2:	d1f6      	bne.n	23da2 <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23db4:	480d      	ldr	r0, [pc, #52]	; (23dec <env_sensors_get_pressure+0x94>)
   23db6:	f01c ffaf 	bl	40d18 <z_spin_unlock_valid>
   23dba:	b968      	cbnz	r0, 23dd8 <env_sensors_get_pressure+0x80>
   23dbc:	2384      	movs	r3, #132	; 0x84
   23dbe:	4a0c      	ldr	r2, [pc, #48]	; (23df0 <env_sensors_get_pressure+0x98>)
   23dc0:	4910      	ldr	r1, [pc, #64]	; (23e04 <env_sensors_get_pressure+0xac>)
   23dc2:	480d      	ldr	r0, [pc, #52]	; (23df8 <env_sensors_get_pressure+0xa0>)
   23dc4:	f020 fa84 	bl	442d0 <printk>
   23dc8:	4908      	ldr	r1, [pc, #32]	; (23dec <env_sensors_get_pressure+0x94>)
   23dca:	480f      	ldr	r0, [pc, #60]	; (23e08 <env_sensors_get_pressure+0xb0>)
   23dcc:	f020 fa80 	bl	442d0 <printk>
   23dd0:	2184      	movs	r1, #132	; 0x84
   23dd2:	4807      	ldr	r0, [pc, #28]	; (23df0 <env_sensors_get_pressure+0x98>)
   23dd4:	f020 fc96 	bl	44704 <assert_post_action>
	__asm__ volatile(
   23dd8:	f386 8811 	msr	BASEPRI, r6
   23ddc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   23de0:	2000      	movs	r0, #0
}
   23de2:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   23de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23de8:	e7fb      	b.n	23de2 <env_sensors_get_pressure+0x8a>
   23dea:	bf00      	nop
   23dec:	20020244 	.word	0x20020244
   23df0:	0004be5f 	.word	0x0004be5f
   23df4:	0004be85 	.word	0x0004be85
   23df8:	0004b33b 	.word	0x0004b33b
   23dfc:	0004be9a 	.word	0x0004be9a
   23e00:	20020220 	.word	0x20020220
   23e04:	0004beb2 	.word	0x0004beb2
   23e08:	0004bec9 	.word	0x0004bec9

00023e0c <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const uint32_t interval_s)
{
   23e0c:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   23e0e:	4b11      	ldr	r3, [pc, #68]	; (23e54 <env_sensors_set_send_interval+0x48>)
   23e10:	681a      	ldr	r2, [r3, #0]
   23e12:	4282      	cmp	r2, r0
   23e14:	d01c      	beq.n	23e50 <env_sensors_set_send_interval+0x44>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   23e16:	4a10      	ldr	r2, [pc, #64]	; (23e58 <env_sensors_set_send_interval+0x4c>)
   23e18:	4290      	cmp	r0, r2
   23e1a:	bf94      	ite	ls
   23e1c:	6018      	strls	r0, [r3, #0]
   23e1e:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   23e20:	4b0e      	ldr	r3, [pc, #56]	; (23e5c <env_sensors_set_send_interval+0x50>)
   23e22:	781b      	ldrb	r3, [r3, #0]
   23e24:	b1a3      	cbz	r3, 23e50 <env_sensors_set_send_interval+0x44>
		return;
	}

	if (data_send_interval_s) {
   23e26:	b118      	cbz	r0, 23e30 <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   23e28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   23e2c:	f7ff be76 	b.w	23b1c <env_sensors_poll>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   23e30:	480b      	ldr	r0, [pc, #44]	; (23e60 <env_sensors_set_send_interval+0x54>)
   23e32:	f01d fa1f 	bl	41274 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23e3a:	fba0 0103 	umull	r0, r1, r0, r3
   23e3e:	0bc3      	lsrs	r3, r0, #15
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   23e40:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   23e44:	d004      	beq.n	23e50 <env_sensors_set_send_interval+0x44>
}
   23e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   23e4a:	4806      	ldr	r0, [pc, #24]	; (23e64 <env_sensors_set_send_interval+0x58>)
   23e4c:	f01d b82a 	b.w	40ea4 <k_delayed_work_cancel>
}
   23e50:	bd08      	pop	{r3, pc}
   23e52:	bf00      	nop
   23e54:	20020728 	.word	0x20020728
   23e58:	0020c49b 	.word	0x0020c49b
   23e5c:	2002b4ac 	.word	0x2002b4ac
   23e60:	20021ab8 	.word	0x20021ab8
   23e64:	20021aa8 	.word	0x20021aa8

00023e68 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   23e68:	4b01      	ldr	r3, [pc, #4]	; (23e70 <env_sensors_set_backoff_enable+0x8>)
   23e6a:	7018      	strb	r0, [r3, #0]
}
   23e6c:	4770      	bx	lr
   23e6e:	bf00      	nop
   23e70:	2002b4ab 	.word	0x2002b4ab

00023e74 <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   23e74:	4b08      	ldr	r3, [pc, #32]	; (23e98 <primary_feed_worker+0x24>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23e76:	4909      	ldr	r1, [pc, #36]	; (23e9c <primary_feed_worker+0x28>)
   23e78:	6818      	ldr	r0, [r3, #0]
   23e7a:	e8d1 3fef 	ldaex	r3, [r1]
   23e7e:	f043 0201 	orr.w	r2, r3, #1
   23e82:	e8c1 2fec 	stlex	ip, r2, [r1]
   23e86:	f1bc 0f00 	cmp.w	ip, #0
   23e8a:	d1f6      	bne.n	23e7a <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   23e8c:	07db      	lsls	r3, r3, #31
   23e8e:	d402      	bmi.n	23e96 <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   23e90:	3908      	subs	r1, #8
   23e92:	f023 bfd1 	b.w	47e38 <k_queue_append>
}
   23e96:	4770      	bx	lr
   23e98:	20024a10 	.word	0x20024a10
   23e9c:	20021b18 	.word	0x20021b18

00023ea0 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   23ea0:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   23ea2:	4c11      	ldr	r4, [pc, #68]	; (23ee8 <secondary_feed_worker+0x48>)
   23ea4:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   23ea8:	6883      	ldr	r3, [r0, #8]
   23eaa:	68db      	ldr	r3, [r3, #12]
   23eac:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   23eae:	4602      	mov	r2, r0
   23eb0:	b178      	cbz	r0, 23ed2 <secondary_feed_worker+0x32>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   23eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23eb6:	2301      	movs	r3, #1
   23eb8:	f04f 0000 	mov.w	r0, #0
   23ebc:	490b      	ldr	r1, [pc, #44]	; (23eec <secondary_feed_worker+0x4c>)
   23ebe:	f363 0007 	bfi	r0, r3, #0, #8
   23ec2:	4b0b      	ldr	r3, [pc, #44]	; (23ef0 <secondary_feed_worker+0x50>)
   23ec4:	1a5b      	subs	r3, r3, r1
   23ec6:	08db      	lsrs	r3, r3, #3
   23ec8:	f363 108f 	bfi	r0, r3, #6, #10
   23ecc:	4909      	ldr	r1, [pc, #36]	; (23ef4 <secondary_feed_worker+0x54>)
   23ece:	f020 bc2a 	b.w	44726 <log_string_sync>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23ed2:	f104 0108 	add.w	r1, r4, #8
   23ed6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
}
   23eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23ede:	2300      	movs	r3, #0
   23ee0:	4805      	ldr	r0, [pc, #20]	; (23ef8 <secondary_feed_worker+0x58>)
   23ee2:	f01c bf57 	b.w	40d94 <k_delayed_work_submit_to_queue>
   23ee6:	bf00      	nop
   23ee8:	20021ad8 	.word	0x20021ad8
   23eec:	00049788 	.word	0x00049788
   23ef0:	000498e0 	.word	0x000498e0
   23ef4:	0004beea 	.word	0x0004beea
   23ef8:	20024888 	.word	0x20024888

00023efc <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   23efc:	b570      	push	{r4, r5, r6, lr}
	if (work_q == NULL) {
   23efe:	2800      	cmp	r0, #0
   23f00:	f000 808c 	beq.w	2401c <watchdog_init_and_start+0x120>
		return -EINVAL;
	}
	second_work_q = work_q;
   23f04:	4b47      	ldr	r3, [pc, #284]	; (24024 <watchdog_init_and_start+0x128>)
   23f06:	6018      	str	r0, [r3, #0]
   23f08:	4847      	ldr	r0, [pc, #284]	; (24028 <watchdog_init_and_start+0x12c>)
   23f0a:	f01a fc19 	bl	3e740 <z_impl_device_get_binding>
   23f0e:	4d47      	ldr	r5, [pc, #284]	; (2402c <watchdog_init_and_start+0x130>)
   23f10:	4a47      	ldr	r2, [pc, #284]	; (24030 <watchdog_init_and_start+0x134>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   23f12:	4e48      	ldr	r6, [pc, #288]	; (24034 <watchdog_init_and_start+0x138>)
   23f14:	1aad      	subs	r5, r5, r2
   23f16:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
   23f18:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   23f1c:	b968      	cbnz	r0, 23f3a <watchdog_init_and_start+0x3e>
		LOG_ERR("Cannot bind watchdog driver");
   23f1e:	2301      	movs	r3, #1
   23f20:	f04f 0000 	mov.w	r0, #0
   23f24:	f363 0007 	bfi	r0, r3, #0, #8
   23f28:	f365 108f 	bfi	r0, r5, #6, #10
   23f2c:	4942      	ldr	r1, [pc, #264]	; (24038 <watchdog_init_and_start+0x13c>)
   23f2e:	f020 fbfa 	bl	44726 <log_string_sync>
		return err;
   23f32:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
   23f36:	4620      	mov	r0, r4
   23f38:	bd70      	pop	{r4, r5, r6, pc}
	return api->install_timeout(dev, cfg);
   23f3a:	6883      	ldr	r3, [r0, #8]
   23f3c:	493f      	ldr	r1, [pc, #252]	; (2403c <watchdog_init_and_start+0x140>)
   23f3e:	689b      	ldr	r3, [r3, #8]
   23f40:	4798      	blx	r3
   23f42:	4602      	mov	r2, r0
	if (data->wdt_channel_id < 0) {
   23f44:	2a00      	cmp	r2, #0
	data->wdt_channel_id = wdt_install_timeout(
   23f46:	6070      	str	r0, [r6, #4]
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   23f48:	f04f 0000 	mov.w	r0, #0
	if (data->wdt_channel_id < 0) {
   23f4c:	da0a      	bge.n	23f64 <watchdog_init_and_start+0x68>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   23f4e:	2101      	movs	r1, #1
   23f50:	f361 0007 	bfi	r0, r1, #0, #8
   23f54:	f365 108f 	bfi	r0, r5, #6, #10
   23f58:	4939      	ldr	r1, [pc, #228]	; (24040 <watchdog_init_and_start+0x144>)
   23f5a:	f020 fbe4 	bl	44726 <log_string_sync>
		return -EFAULT;
   23f5e:	f06f 040d 	mvn.w	r4, #13
   23f62:	e7e8      	b.n	23f36 <watchdog_init_and_start+0x3a>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
   23f64:	2303      	movs	r3, #3
   23f66:	f363 0007 	bfi	r0, r3, #0, #8
   23f6a:	f365 108f 	bfi	r0, r5, #6, #10
   23f6e:	f64e 2260 	movw	r2, #60000	; 0xea60
   23f72:	4934      	ldr	r1, [pc, #208]	; (24044 <watchdog_init_and_start+0x148>)
   23f74:	f020 fbd7 	bl	44726 <log_string_sync>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   23f78:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
   23f7a:	6883      	ldr	r3, [r0, #8]
   23f7c:	2102      	movs	r1, #2
   23f7e:	681b      	ldr	r3, [r3, #0]
   23f80:	4798      	blx	r3
	if (err) {
   23f82:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   23f84:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23f88:	b14c      	cbz	r4, 23f9e <watchdog_init_and_start+0xa2>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   23f8a:	2301      	movs	r3, #1
   23f8c:	4622      	mov	r2, r4
   23f8e:	f363 0007 	bfi	r0, r3, #0, #8
   23f92:	492d      	ldr	r1, [pc, #180]	; (24048 <watchdog_init_and_start+0x14c>)
   23f94:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   23f98:	f020 fbc5 	bl	44726 <log_string_sync>
	if (err) {
   23f9c:	e7cb      	b.n	23f36 <watchdog_init_and_start+0x3a>
		LOG_INF("Watchdog started");
   23f9e:	2303      	movs	r3, #3
   23fa0:	f363 0007 	bfi	r0, r3, #0, #8
   23fa4:	f365 108f 	bfi	r0, r5, #6, #10
   23fa8:	4928      	ldr	r1, [pc, #160]	; (2404c <watchdog_init_and_start+0x150>)
   23faa:	f020 fbbc 	bl	44726 <log_string_sync>
	k_delayed_work_init(&data->system_workqueue_work, primary_feed_worker);
   23fae:	f106 0008 	add.w	r0, r6, #8
   23fb2:	4927      	ldr	r1, [pc, #156]	; (24050 <watchdog_init_and_start+0x154>)
   23fb4:	f024 f807 	bl	47fc6 <k_delayed_work_init>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   23fb8:	e9d6 0100 	ldrd	r0, r1, [r6]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   23fbc:	4b25      	ldr	r3, [pc, #148]	; (24054 <watchdog_init_and_start+0x158>)
   23fbe:	63b4      	str	r4, [r6, #56]	; 0x38
   23fc0:	e9c6 340f 	strd	r3, r4, [r6, #60]	; 0x3c
	return api->feed(dev, channel_id);
   23fc4:	6883      	ldr	r3, [r0, #8]
   23fc6:	68db      	ldr	r3, [r3, #12]
   23fc8:	4798      	blx	r3
	if (err) {
   23fca:	4604      	mov	r4, r0
   23fcc:	b148      	cbz	r0, 23fe2 <watchdog_init_and_start+0xe6>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   23fce:	f04f 0000 	mov.w	r0, #0
   23fd2:	2301      	movs	r3, #1
   23fd4:	f363 0007 	bfi	r0, r3, #0, #8
   23fd8:	f365 108f 	bfi	r0, r5, #6, #10
   23fdc:	4622      	mov	r2, r4
   23fde:	491e      	ldr	r1, [pc, #120]	; (24058 <watchdog_init_and_start+0x15c>)
   23fe0:	e7da      	b.n	23f98 <watchdog_init_and_start+0x9c>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   23fe2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23fe6:	2300      	movs	r3, #0
   23fe8:	f106 0108 	add.w	r1, r6, #8
   23fec:	481b      	ldr	r0, [pc, #108]	; (2405c <watchdog_init_and_start+0x160>)
   23fee:	f01c fed1 	bl	40d94 <k_delayed_work_submit_to_queue>
	if (err) {
   23ff2:	4604      	mov	r4, r0
		LOG_ERR("Cannot start watchdog feed worker!"
   23ff4:	f04f 0000 	mov.w	r0, #0
	if (err) {
   23ff8:	b13c      	cbz	r4, 2400a <watchdog_init_and_start+0x10e>
		LOG_ERR("Cannot start watchdog feed worker!"
   23ffa:	2301      	movs	r3, #1
   23ffc:	f363 0007 	bfi	r0, r3, #0, #8
   24000:	f365 108f 	bfi	r0, r5, #6, #10
   24004:	4622      	mov	r2, r4
   24006:	4916      	ldr	r1, [pc, #88]	; (24060 <watchdog_init_and_start+0x164>)
   24008:	e7c6      	b.n	23f98 <watchdog_init_and_start+0x9c>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   2400a:	2303      	movs	r3, #3
   2400c:	f363 0007 	bfi	r0, r3, #0, #8
   24010:	f365 108f 	bfi	r0, r5, #6, #10
   24014:	f247 5230 	movw	r2, #30000	; 0x7530
   24018:	4912      	ldr	r1, [pc, #72]	; (24064 <watchdog_init_and_start+0x168>)
   2401a:	e7bd      	b.n	23f98 <watchdog_init_and_start+0x9c>
		return -EINVAL;
   2401c:	f06f 0415 	mvn.w	r4, #21
   24020:	e789      	b.n	23f36 <watchdog_init_and_start+0x3a>
   24022:	bf00      	nop
   24024:	20024a10 	.word	0x20024a10
   24028:	0004bf18 	.word	0x0004bf18
   2402c:	000498e0 	.word	0x000498e0
   24030:	00049788 	.word	0x00049788
   24034:	20021ad8 	.word	0x20021ad8
   24038:	0004bf1c 	.word	0x0004bf1c
   2403c:	00049b8c 	.word	0x00049b8c
   24040:	0004bf38 	.word	0x0004bf38
   24044:	0004bf66 	.word	0x0004bf66
   24048:	0004bf8e 	.word	0x0004bf8e
   2404c:	0004bfb4 	.word	0x0004bfb4
   24050:	00023e75 	.word	0x00023e75
   24054:	00023ea1 	.word	0x00023ea1
   24058:	0004beea 	.word	0x0004beea
   2405c:	20024888 	.word	0x20024888
   24060:	0004bfc5 	.word	0x0004bfc5
   24064:	0004bff7 	.word	0x0004bff7

00024068 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   24068:	b510      	push	{r4, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2406a:	4c09      	ldr	r4, [pc, #36]	; (24090 <crc8_ccitt+0x28>)
   2406c:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   2406e:	4291      	cmp	r1, r2
   24070:	d100      	bne.n	24074 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   24072:	bd10      	pop	{r4, pc}
		val ^= p[i];
   24074:	f811 3b01 	ldrb.w	r3, [r1], #1
   24078:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   2407a:	0918      	lsrs	r0, r3, #4
   2407c:	5c20      	ldrb	r0, [r4, r0]
   2407e:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   24082:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   24084:	0918      	lsrs	r0, r3, #4
   24086:	5c20      	ldrb	r0, [r4, r0]
   24088:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   2408c:	b2c0      	uxtb	r0, r0
   2408e:	e7ee      	b.n	2406e <crc8_ccitt+0x6>
   24090:	0004c01a 	.word	0x0004c01a

00024094 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   24094:	2803      	cmp	r0, #3
{
   24096:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   24098:	d906      	bls.n	240a8 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   2409a:	f021 fca3 	bl	459e4 <__errno>
   2409e:	2309      	movs	r3, #9
   240a0:	6003      	str	r3, [r0, #0]
   240a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   240a6:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   240a8:	220c      	movs	r2, #12
   240aa:	4b05      	ldr	r3, [pc, #20]	; (240c0 <_check_fd+0x2c>)
   240ac:	fb02 3000 	mla	r0, r2, r0, r3
   240b0:	3008      	adds	r0, #8
   240b2:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   240b6:	2b00      	cmp	r3, #0
   240b8:	d0ef      	beq.n	2409a <_check_fd+0x6>
	return 0;
   240ba:	2000      	movs	r0, #0
   240bc:	e7f3      	b.n	240a6 <_check_fd+0x12>
   240be:	bf00      	nop
   240c0:	20024a14 	.word	0x20024a14

000240c4 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   240c4:	b570      	push	{r4, r5, r6, lr}
   240c6:	4604      	mov	r4, r0
   240c8:	460d      	mov	r5, r1
   240ca:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   240cc:	f7ff ffe2 	bl	24094 <_check_fd>
   240d0:	2800      	cmp	r0, #0
   240d2:	db0a      	blt.n	240ea <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   240d4:	4a08      	ldr	r2, [pc, #32]	; (240f8 <z_get_fd_obj+0x34>)
   240d6:	b155      	cbz	r5, 240ee <z_get_fd_obj+0x2a>
   240d8:	230c      	movs	r3, #12
   240da:	fb03 2304 	mla	r3, r3, r4, r2
   240de:	685b      	ldr	r3, [r3, #4]
   240e0:	42ab      	cmp	r3, r5
   240e2:	d004      	beq.n	240ee <z_get_fd_obj+0x2a>
		errno = err;
   240e4:	f021 fc7e 	bl	459e4 <__errno>
   240e8:	6006      	str	r6, [r0, #0]
		return NULL;
   240ea:	2000      	movs	r0, #0
   240ec:	e002      	b.n	240f4 <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   240ee:	200c      	movs	r0, #12
   240f0:	4360      	muls	r0, r4
   240f2:	5810      	ldr	r0, [r2, r0]
}
   240f4:	bd70      	pop	{r4, r5, r6, pc}
   240f6:	bf00      	nop
   240f8:	20024a14 	.word	0x20024a14

000240fc <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   240fc:	b538      	push	{r3, r4, r5, lr}
   240fe:	4605      	mov	r5, r0
   24100:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   24102:	f7ff ffc7 	bl	24094 <_check_fd>
   24106:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   24108:	bfa3      	ittte	ge
   2410a:	200c      	movge	r0, #12
   2410c:	4368      	mulge	r0, r5
   2410e:	4b04      	ldrge	r3, [pc, #16]	; (24120 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   24110:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   24112:	bfa1      	itttt	ge
   24114:	181a      	addge	r2, r3, r0
   24116:	6852      	ldrge	r2, [r2, #4]
   24118:	6022      	strge	r2, [r4, #0]

	return fd_entry->obj;
   2411a:	5818      	ldrge	r0, [r3, r0]
}
   2411c:	bd38      	pop	{r3, r4, r5, pc}
   2411e:	bf00      	nop
   24120:	20024a14 	.word	0x20024a14

00024124 <z_reserve_fd>:

int z_reserve_fd(void)
{
   24124:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   24126:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   24128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2412c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24130:	4812      	ldr	r0, [pc, #72]	; (2417c <z_reserve_fd+0x58>)
   24132:	f01a ff55 	bl	3efe0 <z_impl_k_mutex_lock>
static int _find_fd_entry(void)
   24136:	4b12      	ldr	r3, [pc, #72]	; (24180 <z_reserve_fd+0x5c>)
   24138:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   2413c:	b17a      	cbz	r2, 2415e <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   2413e:	3401      	adds	r4, #1
   24140:	2c04      	cmp	r4, #4
   24142:	f103 030c 	add.w	r3, r3, #12
   24146:	d1f7      	bne.n	24138 <z_reserve_fd+0x14>
	errno = ENFILE;
   24148:	f021 fc4c 	bl	459e4 <__errno>
   2414c:	2317      	movs	r3, #23
	return -1;
   2414e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   24152:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   24154:	4809      	ldr	r0, [pc, #36]	; (2417c <z_reserve_fd+0x58>)
   24156:	f01b f841 	bl	3f1dc <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   2415a:	4620      	mov	r0, r4
   2415c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2415e:	e8d3 1fef 	ldaex	r1, [r3]
   24162:	3101      	adds	r1, #1
   24164:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24168:	2800      	cmp	r0, #0
   2416a:	d1f8      	bne.n	2415e <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   2416c:	230c      	movs	r3, #12
   2416e:	4363      	muls	r3, r4
   24170:	4904      	ldr	r1, [pc, #16]	; (24184 <z_reserve_fd+0x60>)
   24172:	18c8      	adds	r0, r1, r3
   24174:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   24176:	6042      	str	r2, [r0, #4]
   24178:	e7ec      	b.n	24154 <z_reserve_fd+0x30>
   2417a:	bf00      	nop
   2417c:	20020c44 	.word	0x20020c44
   24180:	20024a1c 	.word	0x20024a1c
   24184:	20024a14 	.word	0x20024a14

00024188 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   24188:	230c      	movs	r3, #12
{
   2418a:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   2418c:	4358      	muls	r0, r3
   2418e:	4c02      	ldr	r4, [pc, #8]	; (24198 <z_finalize_fd+0x10>)
   24190:	1823      	adds	r3, r4, r0
   24192:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   24194:	605a      	str	r2, [r3, #4]
}
   24196:	bd10      	pop	{r4, pc}
   24198:	20024a14 	.word	0x20024a14

0002419c <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   2419c:	230c      	movs	r3, #12
   2419e:	4a0e      	ldr	r2, [pc, #56]	; (241d8 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   241a0:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   241a2:	fb03 2300 	mla	r3, r3, r0, r2
   241a6:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   241a8:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   241ac:	b191      	cbz	r1, 241d4 <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   241ae:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   241b0:	e8d3 5fef 	ldaex	r5, [r3]
   241b4:	428d      	cmp	r5, r1
   241b6:	d104      	bne.n	241c2 <z_free_fd+0x26>
   241b8:	e8c3 4fec 	stlex	ip, r4, [r3]
   241bc:	f1bc 0f00 	cmp.w	ip, #0
   241c0:	d1f6      	bne.n	241b0 <z_free_fd+0x14>
   241c2:	d1f1      	bne.n	241a8 <z_free_fd+0xc>
	if (old_rc != 1) {
   241c4:	2901      	cmp	r1, #1
   241c6:	d105      	bne.n	241d4 <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   241c8:	230c      	movs	r3, #12
   241ca:	4358      	muls	r0, r3
   241cc:	2300      	movs	r3, #0
   241ce:	1811      	adds	r1, r2, r0
   241d0:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   241d2:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   241d4:	bd30      	pop	{r4, r5, pc}
   241d6:	bf00      	nop
   241d8:	20024a14 	.word	0x20024a14

000241dc <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   241dc:	b570      	push	{r4, r5, r6, lr}
   241de:	4605      	mov	r5, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   241e0:	6843      	ldr	r3, [r0, #4]
   241e2:	460e      	mov	r6, r1

	return method & SYS_NOTIFY_METHOD_MASK;
   241e4:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   241e8:	2b02      	cmp	r3, #2
	notify->result = res;
   241ea:	60a9      	str	r1, [r5, #8]
	switch (method) {
   241ec:	d010      	beq.n	24210 <sys_notify_finalize+0x34>
   241ee:	2b03      	cmp	r3, #3
   241f0:	d004      	beq.n	241fc <sys_notify_finalize+0x20>
   241f2:	2b01      	cmp	r3, #1
   241f4:	d10f      	bne.n	24216 <sys_notify_finalize+0x3a>
	sys_notify_generic_callback rv = 0;
   241f6:	2400      	movs	r4, #0
	struct k_poll_signal *sig = NULL;
   241f8:	4620      	mov	r0, r4
   241fa:	e001      	b.n	24200 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   241fc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   241fe:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24200:	2300      	movs	r3, #0
   24202:	606b      	str	r3, [r5, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24204:	b110      	cbz	r0, 2420c <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   24206:	4631      	mov	r1, r6
   24208:	f01d fd34 	bl	41c74 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2420c:	4620      	mov	r0, r4
   2420e:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   24210:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   24212:	2400      	movs	r4, #0
		break;
   24214:	e7f4      	b.n	24200 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   24216:	2345      	movs	r3, #69	; 0x45
   24218:	4a05      	ldr	r2, [pc, #20]	; (24230 <sys_notify_finalize+0x54>)
   2421a:	4906      	ldr	r1, [pc, #24]	; (24234 <sys_notify_finalize+0x58>)
   2421c:	4806      	ldr	r0, [pc, #24]	; (24238 <sys_notify_finalize+0x5c>)
   2421e:	f020 f857 	bl	442d0 <printk>
   24222:	2145      	movs	r1, #69	; 0x45
   24224:	4802      	ldr	r0, [pc, #8]	; (24230 <sys_notify_finalize+0x54>)
   24226:	f020 fa6d 	bl	44704 <assert_post_action>
	sys_notify_generic_callback rv = 0;
   2422a:	2400      	movs	r4, #0
   2422c:	e7e7      	b.n	241fe <sys_notify_finalize+0x22>
   2422e:	bf00      	nop
   24230:	0004c02a 	.word	0x0004c02a
   24234:	00052672 	.word	0x00052672
   24238:	0004b33b 	.word	0x0004b33b

0002423c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   2423c:	680b      	ldr	r3, [r1, #0]
   2423e:	3301      	adds	r3, #1
   24240:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   24242:	4b01      	ldr	r3, [pc, #4]	; (24248 <char_out+0xc>)
   24244:	681b      	ldr	r3, [r3, #0]
   24246:	4718      	bx	r3
   24248:	2002072c 	.word	0x2002072c

0002424c <print_digits.part.0>:
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   2424c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24250:	b087      	sub	sp, #28
   24252:	460f      	mov	r7, r1
   24254:	4619      	mov	r1, r3
		buf[i] = "0123456789abcdef"[num % base];
   24256:	9b10      	ldr	r3, [sp, #64]	; 0x40
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   24258:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   2425a:	2514      	movs	r5, #20
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   2425c:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
   2425e:	4698      	mov	r8, r3
static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
   24260:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   24264:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
   24268:	4c1c      	ldr	r4, [pc, #112]	; (242dc <print_digits.part.0+0x90>)
   2426a:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   2426e:	ea50 0301 	orrs.w	r3, r0, r1
   24272:	d11a      	bne.n	242aa <print_digits.part.0+0x5e>
	if (i == DIGITS_BUFLEN - 1) {
   24274:	2d14      	cmp	r5, #20
		buf[i] = '0';
   24276:	bf08      	it	eq
   24278:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   2427a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
   2427c:	bf18      	it	ne
   2427e:	3501      	addne	r5, #1
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   24280:	442c      	add	r4, r5
		buf[i] = '0';
   24282:	bf08      	it	eq
   24284:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   24288:	2c15      	cmp	r4, #21
   2428a:	d017      	beq.n	242bc <print_digits.part.0+0x70>
   2428c:	3c15      	subs	r4, #21
	for (/**/; pad > 0 && pad_before; pad--) {
   2428e:	2c00      	cmp	r4, #0
   24290:	dc16      	bgt.n	242c0 <print_digits.part.0+0x74>
		out(buf[i], ctx);
   24292:	f81d 0005 	ldrb.w	r0, [sp, r5]
   24296:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
   24298:	3501      	adds	r5, #1
		out(buf[i], ctx);
   2429a:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
   2429c:	2d15      	cmp	r5, #21
   2429e:	d1f8      	bne.n	24292 <print_digits.part.0+0x46>
	for (/**/; pad > 0; pad--) {
   242a0:	2c00      	cmp	r4, #0
   242a2:	dc15      	bgt.n	242d0 <print_digits.part.0+0x84>
}
   242a4:	b007      	add	sp, #28
   242a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
   242aa:	4642      	mov	r2, r8
   242ac:	464b      	mov	r3, r9
   242ae:	f7f8 fe05 	bl	1cebc <__aeabi_uldivmod>
   242b2:	5ca3      	ldrb	r3, [r4, r2]
   242b4:	f80d 3005 	strb.w	r3, [sp, r5]
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   242b8:	3d01      	subs	r5, #1
   242ba:	e7d8      	b.n	2426e <print_digits.part.0+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
   242bc:	2400      	movs	r4, #0
   242be:	e7e8      	b.n	24292 <print_digits.part.0+0x46>
	for (/**/; pad > 0 && pad_before; pad--) {
   242c0:	f1bb 0f00 	cmp.w	fp, #0
   242c4:	d0e5      	beq.n	24292 <print_digits.part.0+0x46>
		out(pad_char, ctx);
   242c6:	4639      	mov	r1, r7
   242c8:	4650      	mov	r0, sl
   242ca:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
   242cc:	3c01      	subs	r4, #1
   242ce:	e7de      	b.n	2428e <print_digits.part.0+0x42>
		out(pad_char, ctx);
   242d0:	4639      	mov	r1, r7
   242d2:	4650      	mov	r0, sl
   242d4:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
   242d6:	3c01      	subs	r4, #1
   242d8:	e7e2      	b.n	242a0 <print_digits.part.0+0x54>
   242da:	bf00      	nop
   242dc:	0004c04d 	.word	0x0004c04d

000242e0 <__printk_hook_install>:
	_char_out = fn;
   242e0:	4b01      	ldr	r3, [pc, #4]	; (242e8 <__printk_hook_install+0x8>)
   242e2:	6018      	str	r0, [r3, #0]
}
   242e4:	4770      	bx	lr
   242e6:	bf00      	nop
   242e8:	2002072c 	.word	0x2002072c

000242ec <vprintk>:
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
	struct out_context ctx = { 0 };
   242ec:	2300      	movs	r3, #0
{
   242ee:	b507      	push	{r0, r1, r2, lr}
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
   242f0:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   242f2:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   242f4:	4803      	ldr	r0, [pc, #12]	; (24304 <vprintk+0x18>)
   242f6:	460b      	mov	r3, r1
   242f8:	a901      	add	r1, sp, #4
   242fa:	f01f fed5 	bl	440a8 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   242fe:	b003      	add	sp, #12
   24300:	f85d fb04 	ldr.w	pc, [sp], #4
   24304:	0002423d 	.word	0x0002423d

00024308 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   24308:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   2430a:	2500      	movs	r5, #0
{
   2430c:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   2430e:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   24312:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   24314:	a901      	add	r1, sp, #4
   24316:	4805      	ldr	r0, [pc, #20]	; (2432c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   24318:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   2431a:	f01f fec5 	bl	440a8 <z_vprintk>

	if (ctx.count < ctx.max) {
   2431e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   24322:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   24324:	bfb8      	it	lt
   24326:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   24328:	b005      	add	sp, #20
   2432a:	bd30      	pop	{r4, r5, pc}
   2432c:	00044083 	.word	0x00044083

00024330 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   24330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24334:	f8b0 b01c 	ldrh.w	fp, [r0, #28]
{
   24338:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   2433a:	f01b 0f08 	tst.w	fp, #8
{
   2433e:	4692      	mov	sl, r2
	if (processing) {
   24340:	d021      	beq.n	24386 <process_event+0x56>
		if (evt == EVT_COMPLETE) {
   24342:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   24344:	bf0c      	ite	eq
   24346:	f04b 0b10 	orreq.w	fp, fp, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   2434a:	f04b 0b20 	orrne.w	fp, fp, #32
   2434e:	f8a0 b01c 	strh.w	fp, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   24352:	3414      	adds	r4, #20
   24354:	4620      	mov	r0, r4
   24356:	f01c fcdf 	bl	40d18 <z_spin_unlock_valid>
   2435a:	b968      	cbnz	r0, 24378 <process_event+0x48>
   2435c:	2384      	movs	r3, #132	; 0x84
   2435e:	4aa7      	ldr	r2, [pc, #668]	; (245fc <process_event+0x2cc>)
   24360:	49a7      	ldr	r1, [pc, #668]	; (24600 <process_event+0x2d0>)
   24362:	48a8      	ldr	r0, [pc, #672]	; (24604 <process_event+0x2d4>)
   24364:	f01f ffb4 	bl	442d0 <printk>
   24368:	4621      	mov	r1, r4
   2436a:	48a7      	ldr	r0, [pc, #668]	; (24608 <process_event+0x2d8>)
   2436c:	f01f ffb0 	bl	442d0 <printk>
   24370:	2184      	movs	r1, #132	; 0x84
   24372:	48a2      	ldr	r0, [pc, #648]	; (245fc <process_event+0x2cc>)
   24374:	f020 f9c6 	bl	44704 <assert_post_action>
   24378:	f38a 8811 	msr	BASEPRI, sl
   2437c:	f3bf 8f6f 	isb	sy
}
   24380:	b003      	add	sp, #12
   24382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   24386:	4ea1      	ldr	r6, [pc, #644]	; (2460c <process_event+0x2dc>)
   24388:	f8df 8278 	ldr.w	r8, [pc, #632]	; 24604 <process_event+0x2d4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2438c:	f00b 0b07 	and.w	fp, fp, #7
		if (evt == EVT_RECHECK) {
   24390:	2902      	cmp	r1, #2
   24392:	d107      	bne.n	243a4 <process_event+0x74>
			evt = process_recheck(mgr);
   24394:	4620      	mov	r0, r4
   24396:	f01f ffb5 	bl	44304 <process_recheck>
		if (evt == EVT_NOP) {
   2439a:	2800      	cmp	r0, #0
   2439c:	d0d9      	beq.n	24352 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   2439e:	2801      	cmp	r0, #1
   243a0:	f040 80be 	bne.w	24520 <process_event+0x1f0>
			res = mgr->last_res;
   243a4:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   243a8:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   243aa:	f1b9 0f00 	cmp.w	r9, #0
   243ae:	da71      	bge.n	24494 <process_event+0x164>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   243b0:	2700      	movs	r7, #0
		*clients = mgr->clients;
   243b2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   243b4:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   243b8:	e9c4 7700 	strd	r7, r7, [r4]
   243bc:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   243c0:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   243c2:	9700      	str	r7, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   243c4:	8ba3      	ldrh	r3, [r4, #28]
   243c6:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   243ca:	455a      	cmp	r2, fp
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   243cc:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
   243ce:	d003      	beq.n	243d8 <process_event+0xa8>
		if (do_monitors
   243d0:	68a2      	ldr	r2, [r4, #8]
   243d2:	2a00      	cmp	r2, #0
   243d4:	f040 8176 	bne.w	246c4 <process_event+0x394>
		    || !sys_slist_is_empty(&clients)
   243d8:	2d00      	cmp	r5, #0
   243da:	f040 8176 	bne.w	246ca <process_event+0x39a>
		    || (transit != NULL)) {
   243de:	9a00      	ldr	r2, [sp, #0]
   243e0:	2a00      	cmp	r2, #0
   243e2:	d047      	beq.n	24474 <process_event+0x144>
   243e4:	462f      	mov	r7, r5
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   243e6:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   243ea:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   243ee:	83a3      	strh	r3, [r4, #28]
   243f0:	4658      	mov	r0, fp
   243f2:	f01c fc91 	bl	40d18 <z_spin_unlock_valid>
   243f6:	b968      	cbnz	r0, 24414 <process_event+0xe4>
   243f8:	2384      	movs	r3, #132	; 0x84
   243fa:	4a80      	ldr	r2, [pc, #512]	; (245fc <process_event+0x2cc>)
   243fc:	4980      	ldr	r1, [pc, #512]	; (24600 <process_event+0x2d0>)
   243fe:	4640      	mov	r0, r8
   24400:	f01f ff66 	bl	442d0 <printk>
   24404:	4659      	mov	r1, fp
   24406:	4880      	ldr	r0, [pc, #512]	; (24608 <process_event+0x2d8>)
   24408:	f01f ff62 	bl	442d0 <printk>
   2440c:	2184      	movs	r1, #132	; 0x84
   2440e:	487b      	ldr	r0, [pc, #492]	; (245fc <process_event+0x2cc>)
   24410:	f020 f978 	bl	44704 <assert_post_action>
   24414:	f38a 8811 	msr	BASEPRI, sl
   24418:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   2441c:	2f00      	cmp	r7, #0
   2441e:	f040 8156 	bne.w	246ce <process_event+0x39e>
	while (!sys_slist_is_empty(list)) {
   24422:	2d00      	cmp	r5, #0
   24424:	f040 8167 	bne.w	246f6 <process_event+0x3c6>
			if (transit != NULL) {
   24428:	9b00      	ldr	r3, [sp, #0]
   2442a:	b113      	cbz	r3, 24432 <process_event+0x102>
				transit(mgr, transition_complete);
   2442c:	4978      	ldr	r1, [pc, #480]	; (24610 <process_event+0x2e0>)
   2442e:	4620      	mov	r0, r4
   24430:	4798      	blx	r3
	__asm__ volatile(
   24432:	f04f 0320 	mov.w	r3, #32
   24436:	f3ef 8a11 	mrs	sl, BASEPRI
   2443a:	f383 8811 	msr	BASEPRI, r3
   2443e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24442:	4658      	mov	r0, fp
   24444:	f01c fc5a 	bl	40cfc <z_spin_lock_valid>
   24448:	b968      	cbnz	r0, 24466 <process_event+0x136>
   2444a:	235c      	movs	r3, #92	; 0x5c
   2444c:	4a6b      	ldr	r2, [pc, #428]	; (245fc <process_event+0x2cc>)
   2444e:	4971      	ldr	r1, [pc, #452]	; (24614 <process_event+0x2e4>)
   24450:	4640      	mov	r0, r8
   24452:	f01f ff3d 	bl	442d0 <printk>
   24456:	4659      	mov	r1, fp
   24458:	486f      	ldr	r0, [pc, #444]	; (24618 <process_event+0x2e8>)
   2445a:	f01f ff39 	bl	442d0 <printk>
   2445e:	215c      	movs	r1, #92	; 0x5c
   24460:	4866      	ldr	r0, [pc, #408]	; (245fc <process_event+0x2cc>)
   24462:	f020 f94f 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   24466:	4658      	mov	r0, fp
   24468:	f01c fc66 	bl	40d38 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   2446c:	8ba3      	ldrh	r3, [r4, #28]
   2446e:	f023 0308 	bic.w	r3, r3, #8
   24472:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   24474:	8ba3      	ldrh	r3, [r4, #28]
   24476:	06da      	lsls	r2, r3, #27
   24478:	f140 8147 	bpl.w	2470a <process_event+0x3da>
			evt = EVT_COMPLETE;
   2447c:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   2447e:	f023 0310 	bic.w	r3, r3, #16
   24482:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   24484:	f8b4 b01c 	ldrh.w	fp, [r4, #28]
   24488:	f00b 0b07 	and.w	fp, fp, #7
	} while (evt != EVT_NOP);
   2448c:	2900      	cmp	r1, #0
   2448e:	f47f af7f 	bne.w	24390 <process_event+0x60>
out:
   24492:	e75e      	b.n	24352 <process_event+0x22>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24494:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   24498:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   2449a:	2901      	cmp	r1, #1
   2449c:	d821      	bhi.n	244e2 <process_event+0x1b2>
	list->head = NULL;
   2449e:	2100      	movs	r1, #0
   244a0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   244a4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   244a6:	6825      	ldr	r5, [r4, #0]
   244a8:	b29b      	uxth	r3, r3
	list->tail = NULL;
   244aa:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   244ae:	d10a      	bne.n	244c6 <process_event+0x196>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   244b0:	b13d      	cbz	r5, 244c2 <process_event+0x192>
   244b2:	4629      	mov	r1, r5
   244b4:	8be2      	ldrh	r2, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   244b6:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
   244b8:	3201      	adds	r2, #1
   244ba:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   244bc:	2900      	cmp	r1, #0
   244be:	d1fa      	bne.n	244b6 <process_event+0x186>
   244c0:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   244c2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   244c6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   244c8:	4620      	mov	r0, r4
   244ca:	f01f ff1b 	bl	44304 <process_recheck>
   244ce:	2800      	cmp	r0, #0
   244d0:	f000 80f4 	beq.w	246bc <process_event+0x38c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   244d4:	8ba3      	ldrh	r3, [r4, #28]
   244d6:	f043 0320 	orr.w	r3, r3, #32
   244da:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   244dc:	2300      	movs	r3, #0
   244de:	9300      	str	r3, [sp, #0]
   244e0:	e770      	b.n	243c4 <process_event+0x94>
	} else if (state == ONOFF_STATE_TO_OFF) {
   244e2:	2a04      	cmp	r2, #4
   244e4:	d10f      	bne.n	24506 <process_event+0x1d6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   244e6:	f023 0307 	bic.w	r3, r3, #7
   244ea:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   244ec:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   244ee:	4620      	mov	r0, r4
   244f0:	f01f ff08 	bl	44304 <process_recheck>
   244f4:	2800      	cmp	r0, #0
   244f6:	f000 80e3 	beq.w	246c0 <process_event+0x390>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   244fa:	f042 0220 	orr.w	r2, r2, #32
   244fe:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   24500:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   24502:	9500      	str	r5, [sp, #0]
   24504:	e75e      	b.n	243c4 <process_event+0x94>
		__ASSERT_NO_MSG(false);
   24506:	4640      	mov	r0, r8
   24508:	f240 1319 	movw	r3, #281	; 0x119
   2450c:	4632      	mov	r2, r6
   2450e:	4943      	ldr	r1, [pc, #268]	; (2461c <process_event+0x2ec>)
   24510:	f01f fede 	bl	442d0 <printk>
   24514:	f240 1119 	movw	r1, #281	; 0x119
   24518:	4630      	mov	r0, r6
   2451a:	f020 f8f3 	bl	44704 <assert_post_action>
   2451e:	e7ef      	b.n	24500 <process_event+0x1d0>
		} else if (evt == EVT_START) {
   24520:	2803      	cmp	r0, #3
   24522:	d135      	bne.n	24590 <process_event+0x260>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   24524:	f1bb 0f00 	cmp.w	fp, #0
   24528:	d00b      	beq.n	24542 <process_event+0x212>
   2452a:	493d      	ldr	r1, [pc, #244]	; (24620 <process_event+0x2f0>)
   2452c:	4640      	mov	r0, r8
   2452e:	f44f 73aa 	mov.w	r3, #340	; 0x154
   24532:	4632      	mov	r2, r6
   24534:	f01f fecc 	bl	442d0 <printk>
   24538:	f44f 71aa 	mov.w	r1, #340	; 0x154
   2453c:	4630      	mov	r0, r6
   2453e:	f020 f8e1 	bl	44704 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24542:	6823      	ldr	r3, [r4, #0]
   24544:	b95b      	cbnz	r3, 2455e <process_event+0x22e>
   24546:	4937      	ldr	r1, [pc, #220]	; (24624 <process_event+0x2f4>)
   24548:	4640      	mov	r0, r8
   2454a:	f240 1355 	movw	r3, #341	; 0x155
   2454e:	4632      	mov	r2, r6
   24550:	f01f febe 	bl	442d0 <printk>
   24554:	f240 1155 	movw	r1, #341	; 0x155
   24558:	4630      	mov	r0, r6
   2455a:	f020 f8d3 	bl	44704 <assert_post_action>
			transit = mgr->transitions->start;
   2455e:	6923      	ldr	r3, [r4, #16]
   24560:	681b      	ldr	r3, [r3, #0]
   24562:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24564:	b95b      	cbnz	r3, 2457e <process_event+0x24e>
   24566:	4930      	ldr	r1, [pc, #192]	; (24628 <process_event+0x2f8>)
   24568:	4640      	mov	r0, r8
   2456a:	f44f 73ac 	mov.w	r3, #344	; 0x158
   2456e:	4632      	mov	r2, r6
   24570:	f01f feae 	bl	442d0 <printk>
   24574:	f44f 71ac 	mov.w	r1, #344	; 0x158
   24578:	4630      	mov	r0, r6
   2457a:	f020 f8c3 	bl	44704 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2457e:	8ba3      	ldrh	r3, [r4, #28]
   24580:	f023 0307 	bic.w	r3, r3, #7
   24584:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   24588:	2500      	movs	r5, #0
   2458a:	83a3      	strh	r3, [r4, #28]
		res = 0;
   2458c:	46a9      	mov	r9, r5
   2458e:	e719      	b.n	243c4 <process_event+0x94>
		} else if (evt == EVT_STOP) {
   24590:	2804      	cmp	r0, #4
   24592:	d14f      	bne.n	24634 <process_event+0x304>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   24594:	f1bb 0f02 	cmp.w	fp, #2
   24598:	d00b      	beq.n	245b2 <process_event+0x282>
   2459a:	4924      	ldr	r1, [pc, #144]	; (2462c <process_event+0x2fc>)
   2459c:	4640      	mov	r0, r8
   2459e:	f240 135b 	movw	r3, #347	; 0x15b
   245a2:	4632      	mov	r2, r6
   245a4:	f01f fe94 	bl	442d0 <printk>
   245a8:	f240 115b 	movw	r1, #347	; 0x15b
   245ac:	4630      	mov	r0, r6
   245ae:	f020 f8a9 	bl	44704 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   245b2:	8be3      	ldrh	r3, [r4, #30]
   245b4:	b15b      	cbz	r3, 245ce <process_event+0x29e>
   245b6:	491e      	ldr	r1, [pc, #120]	; (24630 <process_event+0x300>)
   245b8:	4640      	mov	r0, r8
   245ba:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   245be:	4632      	mov	r2, r6
   245c0:	f01f fe86 	bl	442d0 <printk>
   245c4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   245c8:	4630      	mov	r0, r6
   245ca:	f020 f89b 	bl	44704 <assert_post_action>
			transit = mgr->transitions->stop;
   245ce:	6923      	ldr	r3, [r4, #16]
   245d0:	685b      	ldr	r3, [r3, #4]
   245d2:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   245d4:	b95b      	cbnz	r3, 245ee <process_event+0x2be>
   245d6:	4914      	ldr	r1, [pc, #80]	; (24628 <process_event+0x2f8>)
   245d8:	4640      	mov	r0, r8
   245da:	f240 135f 	movw	r3, #351	; 0x15f
   245de:	4632      	mov	r2, r6
   245e0:	f01f fe76 	bl	442d0 <printk>
   245e4:	f240 115f 	movw	r1, #351	; 0x15f
   245e8:	4630      	mov	r0, r6
   245ea:	f020 f88b 	bl	44704 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   245ee:	8ba3      	ldrh	r3, [r4, #28]
   245f0:	f023 0307 	bic.w	r3, r3, #7
   245f4:	f043 0304 	orr.w	r3, r3, #4
   245f8:	e7c6      	b.n	24588 <process_event+0x258>
   245fa:	bf00      	nop
   245fc:	0004be5f 	.word	0x0004be5f
   24600:	0004beb2 	.word	0x0004beb2
   24604:	0004b33b 	.word	0x0004b33b
   24608:	0004bec9 	.word	0x0004bec9
   2460c:	0004c05e 	.word	0x0004c05e
   24610:	0002472d 	.word	0x0002472d
   24614:	0004be85 	.word	0x0004be85
   24618:	0004be9a 	.word	0x0004be9a
   2461c:	00052672 	.word	0x00052672
   24620:	0004c080 	.word	0x0004c080
   24624:	0004c08b 	.word	0x0004c08b
   24628:	0004c0ae 	.word	0x0004c0ae
   2462c:	0004c0c5 	.word	0x0004c0c5
   24630:	0004c0db 	.word	0x0004c0db
		} else if (evt == EVT_RESET) {
   24634:	2805      	cmp	r0, #5
   24636:	d132      	bne.n	2469e <process_event+0x36e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24638:	f1bb 0f01 	cmp.w	fp, #1
   2463c:	d00b      	beq.n	24656 <process_event+0x326>
   2463e:	4937      	ldr	r1, [pc, #220]	; (2471c <process_event+0x3ec>)
   24640:	4640      	mov	r0, r8
   24642:	f44f 73b1 	mov.w	r3, #354	; 0x162
   24646:	4632      	mov	r2, r6
   24648:	f01f fe42 	bl	442d0 <printk>
   2464c:	f44f 71b1 	mov.w	r1, #354	; 0x162
   24650:	4630      	mov	r0, r6
   24652:	f020 f857 	bl	44704 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   24656:	6823      	ldr	r3, [r4, #0]
   24658:	b95b      	cbnz	r3, 24672 <process_event+0x342>
   2465a:	4931      	ldr	r1, [pc, #196]	; (24720 <process_event+0x3f0>)
   2465c:	4640      	mov	r0, r8
   2465e:	f240 1363 	movw	r3, #355	; 0x163
   24662:	4632      	mov	r2, r6
   24664:	f01f fe34 	bl	442d0 <printk>
   24668:	f240 1163 	movw	r1, #355	; 0x163
   2466c:	4630      	mov	r0, r6
   2466e:	f020 f849 	bl	44704 <assert_post_action>
			transit = mgr->transitions->reset;
   24672:	6923      	ldr	r3, [r4, #16]
   24674:	689b      	ldr	r3, [r3, #8]
   24676:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   24678:	b95b      	cbnz	r3, 24692 <process_event+0x362>
   2467a:	492a      	ldr	r1, [pc, #168]	; (24724 <process_event+0x3f4>)
   2467c:	4640      	mov	r0, r8
   2467e:	f44f 73b3 	mov.w	r3, #358	; 0x166
   24682:	4632      	mov	r2, r6
   24684:	f01f fe24 	bl	442d0 <printk>
   24688:	f44f 71b3 	mov.w	r1, #358	; 0x166
   2468c:	4630      	mov	r0, r6
   2468e:	f020 f839 	bl	44704 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   24692:	8ba3      	ldrh	r3, [r4, #28]
   24694:	f023 0307 	bic.w	r3, r3, #7
   24698:	f043 0305 	orr.w	r3, r3, #5
   2469c:	e774      	b.n	24588 <process_event+0x258>
			__ASSERT_NO_MSG(false);
   2469e:	2500      	movs	r5, #0
   246a0:	f240 1369 	movw	r3, #361	; 0x169
   246a4:	4632      	mov	r2, r6
   246a6:	4920      	ldr	r1, [pc, #128]	; (24728 <process_event+0x3f8>)
   246a8:	4640      	mov	r0, r8
   246aa:	f01f fe11 	bl	442d0 <printk>
   246ae:	f240 1169 	movw	r1, #361	; 0x169
   246b2:	4630      	mov	r0, r6
   246b4:	f020 f826 	bl	44704 <assert_post_action>
		onoff_transition_fn transit = NULL;
   246b8:	9500      	str	r5, [sp, #0]
   246ba:	e767      	b.n	2458c <process_event+0x25c>
   246bc:	9000      	str	r0, [sp, #0]
   246be:	e681      	b.n	243c4 <process_event+0x94>
		if (process_recheck(mgr) != EVT_NOP) {
   246c0:	4605      	mov	r5, r0
   246c2:	e71e      	b.n	24502 <process_event+0x1d2>
				   && !sys_slist_is_empty(&mgr->monitors);
   246c4:	2201      	movs	r2, #1
   246c6:	4617      	mov	r7, r2
   246c8:	e68d      	b.n	243e6 <process_event+0xb6>
   246ca:	2200      	movs	r2, #0
   246cc:	e7fb      	b.n	246c6 <process_event+0x396>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   246ce:	68a1      	ldr	r1, [r4, #8]
   246d0:	2900      	cmp	r1, #0
   246d2:	f43f aea6 	beq.w	24422 <process_event+0xf2>
   246d6:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
   246da:	684b      	ldr	r3, [r1, #4]
   246dc:	9a01      	ldr	r2, [sp, #4]
   246de:	461f      	mov	r7, r3
   246e0:	4620      	mov	r0, r4
   246e2:	464b      	mov	r3, r9
   246e4:	47b8      	blx	r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   246e6:	f1ba 0f00 	cmp.w	sl, #0
   246ea:	f43f ae9a 	beq.w	24422 <process_event+0xf2>
   246ee:	4651      	mov	r1, sl
   246f0:	f8da a000 	ldr.w	sl, [sl]
   246f4:	e7f1      	b.n	246da <process_event+0x3aa>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   246f6:	f8d5 a000 	ldr.w	sl, [r5]
		notify_one(mgr, cli, state, res);
   246fa:	4629      	mov	r1, r5
   246fc:	464b      	mov	r3, r9
   246fe:	9a01      	ldr	r2, [sp, #4]
   24700:	4620      	mov	r0, r4
   24702:	f01f fe1b 	bl	4433c <notify_one>
	while (!sys_slist_is_empty(list)) {
   24706:	4655      	mov	r5, sl
   24708:	e68b      	b.n	24422 <process_event+0xf2>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   2470a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2470e:	bf1e      	ittt	ne
   24710:	f023 0320 	bicne.w	r3, r3, #32
   24714:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   24716:	2102      	movne	r1, #2
   24718:	e6b4      	b.n	24484 <process_event+0x154>
   2471a:	bf00      	nop
   2471c:	0004c0ea 	.word	0x0004c0ea
   24720:	0004c08b 	.word	0x0004c08b
   24724:	0004c0ae 	.word	0x0004c0ae
   24728:	00052672 	.word	0x00052672

0002472c <transition_complete>:
{
   2472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2472e:	4604      	mov	r4, r0
   24730:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   24732:	f100 0514 	add.w	r5, r0, #20
   24736:	f04f 0320 	mov.w	r3, #32
   2473a:	f3ef 8611 	mrs	r6, BASEPRI
   2473e:	f383 8811 	msr	BASEPRI, r3
   24742:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24746:	4628      	mov	r0, r5
   24748:	f01c fad8 	bl	40cfc <z_spin_lock_valid>
   2474c:	b968      	cbnz	r0, 2476a <transition_complete+0x3e>
   2474e:	235c      	movs	r3, #92	; 0x5c
   24750:	4a0b      	ldr	r2, [pc, #44]	; (24780 <transition_complete+0x54>)
   24752:	490c      	ldr	r1, [pc, #48]	; (24784 <transition_complete+0x58>)
   24754:	480c      	ldr	r0, [pc, #48]	; (24788 <transition_complete+0x5c>)
   24756:	f01f fdbb 	bl	442d0 <printk>
   2475a:	4629      	mov	r1, r5
   2475c:	480b      	ldr	r0, [pc, #44]	; (2478c <transition_complete+0x60>)
   2475e:	f01f fdb7 	bl	442d0 <printk>
   24762:	215c      	movs	r1, #92	; 0x5c
   24764:	4806      	ldr	r0, [pc, #24]	; (24780 <transition_complete+0x54>)
   24766:	f01f ffcd 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   2476a:	4628      	mov	r0, r5
   2476c:	f01c fae4 	bl	40d38 <z_spin_lock_set_owner>
	mgr->last_res = res;
   24770:	61a7      	str	r7, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   24772:	4632      	mov	r2, r6
   24774:	4620      	mov	r0, r4
}
   24776:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   2477a:	2101      	movs	r1, #1
   2477c:	f7ff bdd8 	b.w	24330 <process_event>
   24780:	0004be5f 	.word	0x0004be5f
   24784:	0004be85 	.word	0x0004be85
   24788:	0004b33b 	.word	0x0004b33b
   2478c:	0004be9a 	.word	0x0004be9a

00024790 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24794:	4604      	mov	r4, r0
   24796:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   24798:	f01f fde6 	bl	44368 <validate_args>

	if (rv < 0) {
   2479c:	1e06      	subs	r6, r0, #0
   2479e:	db5c      	blt.n	2485a <onoff_request+0xca>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   247a0:	f104 0914 	add.w	r9, r4, #20
   247a4:	f04f 0320 	mov.w	r3, #32
   247a8:	f3ef 8a11 	mrs	sl, BASEPRI
   247ac:	f383 8811 	msr	BASEPRI, r3
   247b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247b4:	4648      	mov	r0, r9
   247b6:	f01c faa1 	bl	40cfc <z_spin_lock_valid>
   247ba:	b968      	cbnz	r0, 247d8 <onoff_request+0x48>
   247bc:	235c      	movs	r3, #92	; 0x5c
   247be:	4a38      	ldr	r2, [pc, #224]	; (248a0 <onoff_request+0x110>)
   247c0:	4938      	ldr	r1, [pc, #224]	; (248a4 <onoff_request+0x114>)
   247c2:	4839      	ldr	r0, [pc, #228]	; (248a8 <onoff_request+0x118>)
   247c4:	f01f fd84 	bl	442d0 <printk>
   247c8:	4649      	mov	r1, r9
   247ca:	4838      	ldr	r0, [pc, #224]	; (248ac <onoff_request+0x11c>)
   247cc:	f01f fd80 	bl	442d0 <printk>
   247d0:	215c      	movs	r1, #92	; 0x5c
   247d2:	4833      	ldr	r0, [pc, #204]	; (248a0 <onoff_request+0x110>)
   247d4:	f01f ff96 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   247d8:	4648      	mov	r0, r9
   247da:	f01c faad 	bl	40d38 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   247de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   247e2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   247e4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   247e6:	428b      	cmp	r3, r1
   247e8:	f002 0507 	and.w	r5, r2, #7
   247ec:	d050      	beq.n	24890 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   247ee:	2d02      	cmp	r5, #2
   247f0:	d121      	bne.n	24836 <onoff_request+0xa6>
	rv = state;
   247f2:	462e      	mov	r6, r5
		/* Increment reference count, notify in exit */
		notify = true;
   247f4:	2701      	movs	r7, #1
		mgr->refs += 1U;
   247f6:	3301      	adds	r3, #1
   247f8:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   247fa:	4648      	mov	r0, r9
   247fc:	f01c fa8c 	bl	40d18 <z_spin_unlock_valid>
   24800:	b968      	cbnz	r0, 2481e <onoff_request+0x8e>
   24802:	2384      	movs	r3, #132	; 0x84
   24804:	4a26      	ldr	r2, [pc, #152]	; (248a0 <onoff_request+0x110>)
   24806:	492a      	ldr	r1, [pc, #168]	; (248b0 <onoff_request+0x120>)
   24808:	4827      	ldr	r0, [pc, #156]	; (248a8 <onoff_request+0x118>)
   2480a:	f01f fd61 	bl	442d0 <printk>
   2480e:	4649      	mov	r1, r9
   24810:	4828      	ldr	r0, [pc, #160]	; (248b4 <onoff_request+0x124>)
   24812:	f01f fd5d 	bl	442d0 <printk>
   24816:	2184      	movs	r1, #132	; 0x84
   24818:	4821      	ldr	r0, [pc, #132]	; (248a0 <onoff_request+0x110>)
   2481a:	f01f ff73 	bl	44704 <assert_post_action>
	__asm__ volatile(
   2481e:	f38a 8811 	msr	BASEPRI, sl
   24822:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   24826:	b1c7      	cbz	r7, 2485a <onoff_request+0xca>
			notify_one(mgr, cli, state, 0);
   24828:	2300      	movs	r3, #0
   2482a:	462a      	mov	r2, r5
   2482c:	4641      	mov	r1, r8
   2482e:	4620      	mov	r0, r4
   24830:	f01f fd84 	bl	4433c <notify_one>
   24834:	e011      	b.n	2485a <onoff_request+0xca>
	} else if ((state == ONOFF_STATE_OFF)
   24836:	0793      	lsls	r3, r2, #30
   24838:	d001      	beq.n	2483e <onoff_request+0xae>
		   || (state == ONOFF_STATE_TO_ON)) {
   2483a:	2d06      	cmp	r5, #6
   2483c:	d110      	bne.n	24860 <onoff_request+0xd0>
	parent->next = child;
   2483e:	2300      	movs	r3, #0
   24840:	f8c8 3000 	str.w	r3, [r8]
Z_GENLIST_APPEND(slist, snode)
   24844:	6863      	ldr	r3, [r4, #4]
   24846:	b9f3      	cbnz	r3, 24886 <onoff_request+0xf6>
	list->head = node;
   24848:	e9c4 8800 	strd	r8, r8, [r4]
	if (start) {
   2484c:	462e      	mov	r6, r5
   2484e:	bb0d      	cbnz	r5, 24894 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   24850:	4652      	mov	r2, sl
   24852:	2102      	movs	r1, #2
   24854:	4620      	mov	r0, r4
   24856:	f7ff fd6b 	bl	24330 <process_event>
		}
	}

	return rv;
}
   2485a:	4630      	mov	r0, r6
   2485c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   24860:	2d05      	cmp	r5, #5
   24862:	d019      	beq.n	24898 <onoff_request+0x108>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   24864:	2d01      	cmp	r5, #1
   24866:	d00b      	beq.n	24880 <onoff_request+0xf0>
   24868:	4913      	ldr	r1, [pc, #76]	; (248b8 <onoff_request+0x128>)
   2486a:	480f      	ldr	r0, [pc, #60]	; (248a8 <onoff_request+0x118>)
   2486c:	f240 13c5 	movw	r3, #453	; 0x1c5
   24870:	4a12      	ldr	r2, [pc, #72]	; (248bc <onoff_request+0x12c>)
   24872:	f01f fd2d 	bl	442d0 <printk>
   24876:	f240 11c5 	movw	r1, #453	; 0x1c5
   2487a:	4810      	ldr	r0, [pc, #64]	; (248bc <onoff_request+0x12c>)
   2487c:	f01f ff42 	bl	44704 <assert_post_action>
		rv = -EIO;
   24880:	f06f 0604 	mvn.w	r6, #4
   24884:	e006      	b.n	24894 <onoff_request+0x104>
	parent->next = child;
   24886:	f8c3 8000 	str.w	r8, [r3]
	list->tail = node;
   2488a:	f8c4 8004 	str.w	r8, [r4, #4]
   2488e:	e7dd      	b.n	2484c <onoff_request+0xbc>
		rv = -EAGAIN;
   24890:	f06f 060a 	mvn.w	r6, #10
   24894:	2700      	movs	r7, #0
   24896:	e7b0      	b.n	247fa <onoff_request+0x6a>
		rv = -ENOTSUP;
   24898:	f06f 0685 	mvn.w	r6, #133	; 0x85
   2489c:	e7fa      	b.n	24894 <onoff_request+0x104>
   2489e:	bf00      	nop
   248a0:	0004be5f 	.word	0x0004be5f
   248a4:	0004be85 	.word	0x0004be85
   248a8:	0004b33b 	.word	0x0004b33b
   248ac:	0004be9a 	.word	0x0004be9a
   248b0:	0004beb2 	.word	0x0004beb2
   248b4:	0004bec9 	.word	0x0004bec9
   248b8:	0004c0ea 	.word	0x0004c0ea
   248bc:	0004c05e 	.word	0x0004c05e

000248c0 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   248c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   248c4:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   248c6:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   248c8:	f103 0801 	add.w	r8, r3, #1
	unsigned int d = tm->tm_mday - 1;
   248cc:	1e63      	subs	r3, r4, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248ce:	f240 746c 	movw	r4, #1900	; 0x76c
   248d2:	2500      	movs	r5, #0
	unsigned int d = tm->tm_mday - 1;
   248d4:	461e      	mov	r6, r3
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248d6:	6943      	ldr	r3, [r0, #20]
{
   248d8:	4681      	mov	r9, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   248da:	18e1      	adds	r1, r4, r3
   248dc:	eb45 72e3 	adc.w	r2, r5, r3, asr #31
	y -= m <= 2;
   248e0:	f1b8 0f02 	cmp.w	r8, #2
   248e4:	bf8c      	ite	hi
   248e6:	2300      	movhi	r3, #0
   248e8:	2301      	movls	r3, #1
   248ea:	1acc      	subs	r4, r1, r3
   248ec:	f162 0500 	sbc.w	r5, r2, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   248f0:	2c00      	cmp	r4, #0
   248f2:	f175 0300 	sbcs.w	r3, r5, #0
   248f6:	da5c      	bge.n	249b2 <timeutil_timegm64+0xf2>
   248f8:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   248fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   24900:	2300      	movs	r3, #0
   24902:	1820      	adds	r0, r4, r0
   24904:	f145 31ff 	adc.w	r1, r5, #4294967295	; 0xffffffff
   24908:	f7f8 fa88 	bl	1ce1c <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   2490c:	4b2c      	ldr	r3, [pc, #176]	; (249c0 <timeutil_timegm64+0x100>)
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2490e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   24912:	fb03 4400 	mla	r4, r3, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   24916:	e9d9 5300 	ldrd	r5, r3, [r9]
   2491a:	469a      	mov	sl, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2491c:	f1b8 0f02 	cmp.w	r8, #2
   24920:	bf8c      	ite	hi
   24922:	f06f 0e02 	mvnhi.w	lr, #2
   24926:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2492a:	ea4f 7be3 	mov.w	fp, r3, asr #31
   2492e:	f8d9 3008 	ldr.w	r3, [r9, #8]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24932:	44f0      	add	r8, lr
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   24934:	fbcc ab03 	smlal	sl, fp, ip, r3
   24938:	fbaa 230c 	umull	r2, r3, sl, ip
   2493c:	fb0c 330b 	mla	r3, ip, fp, r3
   24940:	eb12 0905 	adds.w	r9, r2, r5
   24944:	eb43 7ae5 	adc.w	sl, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24948:	f240 156d 	movw	r5, #365	; 0x16d
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2494c:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24950:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   24954:	fb05 c504 	mla	r5, r5, r4, ip
   24958:	f04f 0c64 	mov.w	ip, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2495c:	fb0e fe08 	mul.w	lr, lr, r8
   24960:	f04f 0805 	mov.w	r8, #5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24964:	fbb4 f4fc 	udiv	r4, r4, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   24968:	f10e 0e02 	add.w	lr, lr, #2
   2496c:	fbbe fef8 	udiv	lr, lr, r8
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24970:	4435      	add	r5, r6
	return era * 146097 + (time_t)doe - 719468;
   24972:	f8df c058 	ldr.w	ip, [pc, #88]	; 249cc <timeutil_timegm64+0x10c>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   24976:	1b2c      	subs	r4, r5, r4
   24978:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   2497a:	fba0 450c 	umull	r4, r5, r0, ip
   2497e:	fb0c 5501 	mla	r5, ip, r1, r5
   24982:	4910      	ldr	r1, [pc, #64]	; (249c4 <timeutil_timegm64+0x104>)
   24984:	1863      	adds	r3, r4, r1
   24986:	9300      	str	r3, [sp, #0]
   24988:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
	time += 86400LL * ndays;
   2498c:	490e      	ldr	r1, [pc, #56]	; (249c8 <timeutil_timegm64+0x108>)
	return era * 146097 + (time_t)doe - 719468;
   2498e:	9301      	str	r3, [sp, #4]
   24990:	e9dd 6700 	ldrd	r6, r7, [sp]
   24994:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   24998:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   2499c:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   249a0:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   249a4:	eb14 0009 	adds.w	r0, r4, r9
   249a8:	eb45 010a 	adc.w	r1, r5, sl
   249ac:	b003      	add	sp, #12
   249ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   249b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
   249b6:	2300      	movs	r3, #0
   249b8:	4620      	mov	r0, r4
   249ba:	4629      	mov	r1, r5
   249bc:	e7a4      	b.n	24908 <timeutil_timegm64+0x48>
   249be:	bf00      	nop
   249c0:	fffffe70 	.word	0xfffffe70
   249c4:	fff50594 	.word	0xfff50594
   249c8:	00015180 	.word	0x00015180
   249cc:	00023ab1 	.word	0x00023ab1

000249d0 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   249d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   249d4:	4607      	mov	r7, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   249d6:	4d16      	ldr	r5, [pc, #88]	; (24a30 <z_work_q_main+0x60>)
   249d8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 24a3c <z_work_q_main+0x6c>
	return z_impl_k_queue_get(queue, timeout);
   249dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   249e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   249e4:	4638      	mov	r0, r7
   249e6:	f01a fdb7 	bl	3f558 <z_impl_k_queue_get>
		if (work == NULL) {
   249ea:	4604      	mov	r4, r0
   249ec:	2800      	cmp	r0, #0
   249ee:	d0f5      	beq.n	249dc <z_work_q_main+0xc>
		handler = work->handler;
   249f0:	6846      	ldr	r6, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   249f2:	b966      	cbnz	r6, 24a0e <z_work_q_main+0x3e>
   249f4:	4641      	mov	r1, r8
   249f6:	231c      	movs	r3, #28
   249f8:	462a      	mov	r2, r5
   249fa:	480e      	ldr	r0, [pc, #56]	; (24a34 <z_work_q_main+0x64>)
   249fc:	f01f fc68 	bl	442d0 <printk>
   24a00:	480d      	ldr	r0, [pc, #52]	; (24a38 <z_work_q_main+0x68>)
   24a02:	f01f fc65 	bl	442d0 <printk>
   24a06:	211c      	movs	r1, #28
   24a08:	4628      	mov	r0, r5
   24a0a:	f01f fe7b 	bl	44704 <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24a0e:	f104 0308 	add.w	r3, r4, #8
   24a12:	e8d3 2fef 	ldaex	r2, [r3]
   24a16:	f022 0101 	bic.w	r1, r2, #1
   24a1a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   24a1e:	2800      	cmp	r0, #0
   24a20:	d1f7      	bne.n	24a12 <z_work_q_main+0x42>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   24a22:	07d3      	lsls	r3, r2, #31
   24a24:	d501      	bpl.n	24a2a <z_work_q_main+0x5a>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   24a26:	4620      	mov	r0, r4
   24a28:	47b0      	blx	r6
	z_impl_k_yield();
   24a2a:	f01b fdc5 	bl	405b8 <z_impl_k_yield>
   24a2e:	e7d5      	b.n	249dc <z_work_q_main+0xc>
   24a30:	0004c100 	.word	0x0004c100
   24a34:	0004b33b 	.word	0x0004b33b
   24a38:	0004c13a 	.word	0x0004c13a
   24a3c:	0004c123 	.word	0x0004c123

00024a40 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   24a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   24a42:	460e      	mov	r6, r1
   24a44:	2900      	cmp	r1, #0
   24a46:	f000 8081 	beq.w	24b4c <sys_heap_free+0x10c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   24a4a:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a4c:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   24a4e:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a50:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   24a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   24a56:	bf2c      	ite	cs
   24a58:	2408      	movcs	r4, #8
   24a5a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   24a5c:	1b0c      	subs	r4, r1, r4
   24a5e:	1b64      	subs	r4, r4, r5
   24a60:	bf48      	it	mi
   24a62:	3407      	addmi	r4, #7
   24a64:	10e4      	asrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24a66:	4621      	mov	r1, r4
   24a68:	f01f fcbe 	bl	443e8 <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   24a6c:	07c2      	lsls	r2, r0, #31
   24a6e:	d40d      	bmi.n	24a8c <sys_heap_free+0x4c>
   24a70:	239a      	movs	r3, #154	; 0x9a
   24a72:	4a37      	ldr	r2, [pc, #220]	; (24b50 <sys_heap_free+0x110>)
   24a74:	4937      	ldr	r1, [pc, #220]	; (24b54 <sys_heap_free+0x114>)
   24a76:	4838      	ldr	r0, [pc, #224]	; (24b58 <sys_heap_free+0x118>)
   24a78:	f01f fc2a 	bl	442d0 <printk>
   24a7c:	4631      	mov	r1, r6
   24a7e:	4837      	ldr	r0, [pc, #220]	; (24b5c <sys_heap_free+0x11c>)
   24a80:	f01f fc26 	bl	442d0 <printk>
   24a84:	219a      	movs	r1, #154	; 0x9a
   24a86:	4832      	ldr	r0, [pc, #200]	; (24b50 <sys_heap_free+0x110>)
   24a88:	f01f fe3c 	bl	44704 <assert_post_action>
	return c + chunk_size(h, c);
   24a8c:	4621      	mov	r1, r4
   24a8e:	4628      	mov	r0, r5
   24a90:	f01f fcc0 	bl	44414 <chunk_size>
   24a94:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   24a96:	2200      	movs	r2, #0
   24a98:	4639      	mov	r1, r7
   24a9a:	4628      	mov	r0, r5
   24a9c:	f01f fca4 	bl	443e8 <chunk_field>
   24aa0:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   24aa2:	4284      	cmp	r4, r0
   24aa4:	d00d      	beq.n	24ac2 <sys_heap_free+0x82>
   24aa6:	23a3      	movs	r3, #163	; 0xa3
   24aa8:	4a29      	ldr	r2, [pc, #164]	; (24b50 <sys_heap_free+0x110>)
   24aaa:	492d      	ldr	r1, [pc, #180]	; (24b60 <sys_heap_free+0x120>)
   24aac:	482a      	ldr	r0, [pc, #168]	; (24b58 <sys_heap_free+0x118>)
   24aae:	f01f fc0f 	bl	442d0 <printk>
   24ab2:	4631      	mov	r1, r6
   24ab4:	482b      	ldr	r0, [pc, #172]	; (24b64 <sys_heap_free+0x124>)
   24ab6:	f01f fc0b 	bl	442d0 <printk>
   24aba:	21a3      	movs	r1, #163	; 0xa3
   24abc:	4824      	ldr	r0, [pc, #144]	; (24b50 <sys_heap_free+0x110>)
   24abe:	f01f fe21 	bl	44704 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   24ac2:	2200      	movs	r2, #0
   24ac4:	4621      	mov	r1, r4
   24ac6:	4628      	mov	r0, r5
   24ac8:	f01f fcaa 	bl	44420 <set_chunk_used>
	return c + chunk_size(h, c);
   24acc:	4621      	mov	r1, r4
   24ace:	f01f fca1 	bl	44414 <chunk_size>
   24ad2:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24ad4:	2201      	movs	r2, #1
   24ad6:	4631      	mov	r1, r6
   24ad8:	4628      	mov	r0, r5
   24ada:	f01f fc85 	bl	443e8 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   24ade:	07c3      	lsls	r3, r0, #31
   24ae0:	d40c      	bmi.n	24afc <sys_heap_free+0xbc>
		free_list_remove(h, right_chunk(h, c));
   24ae2:	4631      	mov	r1, r6
   24ae4:	4628      	mov	r0, r5
   24ae6:	f01f fd41 	bl	4456c <free_list_remove>
	return c + chunk_size(h, c);
   24aea:	4621      	mov	r1, r4
   24aec:	4628      	mov	r0, r5
   24aee:	f01f fc91 	bl	44414 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   24af2:	4621      	mov	r1, r4
   24af4:	1822      	adds	r2, r4, r0
   24af6:	4628      	mov	r0, r5
   24af8:	f01f fcc4 	bl	44484 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   24afc:	2200      	movs	r2, #0
   24afe:	4621      	mov	r1, r4
   24b00:	4628      	mov	r0, r5
   24b02:	f01f fc71 	bl	443e8 <chunk_field>
   24b06:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   24b08:	2201      	movs	r2, #1
   24b0a:	4639      	mov	r1, r7
   24b0c:	4628      	mov	r0, r5
   24b0e:	f01f fc6b 	bl	443e8 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   24b12:	f010 0601 	ands.w	r6, r0, #1
   24b16:	d113      	bne.n	24b40 <sys_heap_free+0x100>
		free_list_remove(h, left_chunk(h, c));
   24b18:	4639      	mov	r1, r7
   24b1a:	4628      	mov	r0, r5
   24b1c:	f01f fd26 	bl	4456c <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   24b20:	4621      	mov	r1, r4
   24b22:	4632      	mov	r2, r6
   24b24:	4628      	mov	r0, r5
   24b26:	f01f fc5f 	bl	443e8 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   24b2a:	4622      	mov	r2, r4
   24b2c:	1a21      	subs	r1, r4, r0
   24b2e:	4628      	mov	r0, r5
   24b30:	f01f fca8 	bl	44484 <merge_chunks>
   24b34:	4621      	mov	r1, r4
   24b36:	4632      	mov	r2, r6
   24b38:	4628      	mov	r0, r5
   24b3a:	f01f fc55 	bl	443e8 <chunk_field>
   24b3e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   24b40:	4621      	mov	r1, r4
   24b42:	4628      	mov	r0, r5
	free_chunk(h, c);
}
   24b44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   24b48:	f01f bd68 	b.w	4461c <free_list_add>
}
   24b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24b4e:	bf00      	nop
   24b50:	0004c155 	.word	0x0004c155
   24b54:	0004c176 	.word	0x0004c176
   24b58:	0004b33b 	.word	0x0004b33b
   24b5c:	0004c187 	.word	0x0004c187
   24b60:	0004c1bf 	.word	0x0004c1bf
   24b64:	0004c1e5 	.word	0x0004c1e5

00024b68 <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   24b68:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   24b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b6e:	4607      	mov	r7, r0
   24b70:	460d      	mov	r5, r1
   24b72:	4616      	mov	r6, r2
   24b74:	d212      	bcs.n	24b9c <sys_heap_init+0x34>
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   24b76:	2a04      	cmp	r2, #4
   24b78:	d80e      	bhi.n	24b98 <sys_heap_init+0x30>
   24b7a:	4943      	ldr	r1, [pc, #268]	; (24c88 <sys_heap_init+0x120>)
   24b7c:	f44f 7397 	mov.w	r3, #302	; 0x12e
   24b80:	4a42      	ldr	r2, [pc, #264]	; (24c8c <sys_heap_init+0x124>)
   24b82:	4843      	ldr	r0, [pc, #268]	; (24c90 <sys_heap_init+0x128>)
   24b84:	f01f fba4 	bl	442d0 <printk>
   24b88:	4842      	ldr	r0, [pc, #264]	; (24c94 <sys_heap_init+0x12c>)
   24b8a:	f01f fba1 	bl	442d0 <printk>
   24b8e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   24b92:	483e      	ldr	r0, [pc, #248]	; (24c8c <sys_heap_init+0x124>)
   24b94:	f01f fdb6 	bl	44704 <assert_post_action>
   24b98:	2304      	movs	r3, #4
   24b9a:	e000      	b.n	24b9e <sys_heap_init+0x36>
   24b9c:	2308      	movs	r3, #8
	bytes -= heap_footer_bytes(bytes);
   24b9e:	1af6      	subs	r6, r6, r3

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24ba0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24ba2:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   24ba4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   24ba8:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24bac:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24bae:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   24bb0:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   24bb4:	d80e      	bhi.n	24bd4 <sys_heap_init+0x6c>
   24bb6:	4938      	ldr	r1, [pc, #224]	; (24c98 <sys_heap_init+0x130>)
   24bb8:	f240 1337 	movw	r3, #311	; 0x137
   24bbc:	4a33      	ldr	r2, [pc, #204]	; (24c8c <sys_heap_init+0x124>)
   24bbe:	4834      	ldr	r0, [pc, #208]	; (24c90 <sys_heap_init+0x128>)
   24bc0:	f01f fb86 	bl	442d0 <printk>
   24bc4:	4833      	ldr	r0, [pc, #204]	; (24c94 <sys_heap_init+0x12c>)
   24bc6:	f01f fb83 	bl	442d0 <printk>
   24bca:	f240 1137 	movw	r1, #311	; 0x137
   24bce:	482f      	ldr	r0, [pc, #188]	; (24c8c <sys_heap_init+0x124>)
   24bd0:	f01f fd98 	bl	44704 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   24bd4:	2200      	movs	r2, #0
   24bd6:	2300      	movs	r3, #0
	heap->heap = h;
   24bd8:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   24bda:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   24bde:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24be0:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   24be2:	60e3      	str	r3, [r4, #12]
	h->len = buf_sz;
   24be4:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24be6:	4620      	mov	r0, r4
   24be8:	f01f fc40 	bl	4446c <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   24bec:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   24bee:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   24bf0:	1c47      	adds	r7, r0, #1
   24bf2:	4620      	mov	r0, r4
   24bf4:	f01f fc30 	bl	44458 <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   24bf8:	351b      	adds	r5, #27
   24bfa:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   24bfc:	4428      	add	r0, r5
   24bfe:	42b0      	cmp	r0, r6
   24c00:	d30e      	bcc.n	24c20 <sys_heap_init+0xb8>
   24c02:	4926      	ldr	r1, [pc, #152]	; (24c9c <sys_heap_init+0x134>)
   24c04:	f240 1343 	movw	r3, #323	; 0x143
   24c08:	4a20      	ldr	r2, [pc, #128]	; (24c8c <sys_heap_init+0x124>)
   24c0a:	4821      	ldr	r0, [pc, #132]	; (24c90 <sys_heap_init+0x128>)
   24c0c:	f01f fb60 	bl	442d0 <printk>
   24c10:	4820      	ldr	r0, [pc, #128]	; (24c94 <sys_heap_init+0x12c>)
   24c12:	f01f fb5d 	bl	442d0 <printk>
   24c16:	f240 1143 	movw	r1, #323	; 0x143
   24c1a:	481c      	ldr	r0, [pc, #112]	; (24c8c <sys_heap_init+0x124>)
   24c1c:	f01f fd72 	bl	44704 <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   24c20:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   24c22:	4619      	mov	r1, r3
   24c24:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   24c28:	42bb      	cmp	r3, r7
   24c2a:	db29      	blt.n	24c80 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   24c2c:	462a      	mov	r2, r5
   24c2e:	4620      	mov	r0, r4
   24c30:	2100      	movs	r1, #0
   24c32:	f01f fc0d 	bl	44450 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24c36:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   24c38:	4620      	mov	r0, r4
   24c3a:	2201      	movs	r2, #1
   24c3c:	2100      	movs	r1, #0
   24c3e:	f01f fbef 	bl	44420 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   24c42:	463a      	mov	r2, r7
   24c44:	4629      	mov	r1, r5
   24c46:	f01f fc03 	bl	44450 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   24c4a:	462b      	mov	r3, r5
   24c4c:	4629      	mov	r1, r5
   24c4e:	4620      	mov	r0, r4
   24c50:	2200      	movs	r2, #0
   24c52:	f01f fbd4 	bl	443fe <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   24c56:	4631      	mov	r1, r6
   24c58:	4620      	mov	r0, r4
   24c5a:	2200      	movs	r2, #0
   24c5c:	f01f fbf8 	bl	44450 <set_chunk_size>
   24c60:	463b      	mov	r3, r7
   24c62:	4631      	mov	r1, r6
   24c64:	4620      	mov	r0, r4
   24c66:	2200      	movs	r2, #0
   24c68:	f01f fbc9 	bl	443fe <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   24c6c:	4631      	mov	r1, r6
   24c6e:	4620      	mov	r0, r4
   24c70:	2201      	movs	r2, #1
   24c72:	f01f fbd5 	bl	44420 <set_chunk_used>

	free_list_add(h, chunk0_size);
   24c76:	4629      	mov	r1, r5
}
   24c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   24c7c:	f01f bcce 	b.w	4461c <free_list_add>
		h->buckets[i].next = 0;
   24c80:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   24c84:	3301      	adds	r3, #1
   24c86:	e7cf      	b.n	24c28 <sys_heap_init+0xc0>
   24c88:	0004c221 	.word	0x0004c221
   24c8c:	0004c155 	.word	0x0004c155
   24c90:	0004b33b 	.word	0x0004b33b
   24c94:	0004c242 	.word	0x0004c242
   24c98:	0004c25b 	.word	0x0004c25b
   24c9c:	0004c283 	.word	0x0004c283

00024ca0 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   24ca0:	f04f 0220 	mov.w	r2, #32
   24ca4:	f3ef 8311 	mrs	r3, BASEPRI
   24ca8:	f382 8811 	msr	BASEPRI, r2
   24cac:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   24cb0:	2101      	movs	r1, #1
   24cb2:	4a04      	ldr	r2, [pc, #16]	; (24cc4 <nordicsemi_nrf91_init+0x24>)
   24cb4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   24cb8:	f383 8811 	msr	BASEPRI, r3
   24cbc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   24cc0:	2000      	movs	r0, #0
   24cc2:	4770      	bx	lr
   24cc4:	40039000 	.word	0x40039000

00024cc8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   24cc8:	b120      	cbz	r0, 24cd4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   24cca:	4b03      	ldr	r3, [pc, #12]	; (24cd8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   24ccc:	0180      	lsls	r0, r0, #6
   24cce:	f043 0301 	orr.w	r3, r3, #1
   24cd2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   24cd4:	4770      	bx	lr
   24cd6:	bf00      	nop
   24cd8:	00049980 	.word	0x00049980

00024cdc <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   24cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   24ce0:	4b12      	ldr	r3, [pc, #72]	; (24d2c <log_generic+0x50>)
{
   24ce2:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   24ce4:	681b      	ldr	r3, [r3, #0]
{
   24ce6:	4681      	mov	r9, r0
   24ce8:	468a      	mov	sl, r1
   24cea:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   24cec:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   24cee:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   24cf0:	4680      	mov	r8, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   24cf2:	4c0f      	ldr	r4, [pc, #60]	; (24d30 <log_generic+0x54>)
   24cf4:	4d0f      	ldr	r5, [pc, #60]	; (24d34 <log_generic+0x58>)
   24cf6:	1b2d      	subs	r5, r5, r4
   24cf8:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   24cfa:	42ae      	cmp	r6, r5
   24cfc:	db02      	blt.n	24d04 <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   24cfe:	b005      	add	sp, #20
   24d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   24d04:	4620      	mov	r0, r4
   24d06:	f01f fd07 	bl	44718 <log_backend_is_active>
   24d0a:	b160      	cbz	r0, 24d26 <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   24d0c:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   24d0e:	9703      	str	r7, [sp, #12]
   24d10:	f8d3 b004 	ldr.w	fp, [r3, #4]
   24d14:	f1bb 0f00 	cmp.w	fp, #0
   24d18:	d005      	beq.n	24d26 <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   24d1a:	9700      	str	r7, [sp, #0]
   24d1c:	4653      	mov	r3, sl
   24d1e:	4642      	mov	r2, r8
   24d20:	4649      	mov	r1, r9
   24d22:	4620      	mov	r0, r4
   24d24:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   24d26:	3601      	adds	r6, #1
   24d28:	3410      	adds	r4, #16
   24d2a:	e7e6      	b.n	24cfa <log_generic+0x1e>
   24d2c:	20020730 	.word	0x20020730
   24d30:	000498f0 	.word	0x000498f0
   24d34:	00049900 	.word	0x00049900

00024d38 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   24d38:	4b03      	ldr	r3, [pc, #12]	; (24d48 <log_core_init+0x10>)
   24d3a:	4a04      	ldr	r2, [pc, #16]	; (24d4c <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   24d3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   24d40:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   24d42:	f000 ba35 	b.w	251b0 <log_output_timestamp_freq_set>
   24d46:	bf00      	nop
   24d48:	20020730 	.word	0x20020730
   24d4c:	0004471f 	.word	0x0004471f

00024d50 <log_source_name_get>:
   24d50:	4a04      	ldr	r2, [pc, #16]	; (24d64 <log_source_name_get+0x14>)
   24d52:	4b05      	ldr	r3, [pc, #20]	; (24d68 <log_source_name_get+0x18>)
   24d54:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   24d56:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   24d5a:	bf34      	ite	cc
   24d5c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   24d60:	2000      	movcs	r0, #0
}
   24d62:	4770      	bx	lr
   24d64:	00049788 	.word	0x00049788
   24d68:	000498f0 	.word	0x000498f0

00024d6c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   24d6c:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   24d6e:	4c10      	ldr	r4, [pc, #64]	; (24db0 <log_backend_enable+0x44>)
{
   24d70:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   24d72:	1b04      	subs	r4, r0, r4
   24d74:	1124      	asrs	r4, r4, #4
   24d76:	3401      	adds	r4, #1
{
   24d78:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   24d7a:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   24d7c:	b948      	cbnz	r0, 24d92 <log_backend_enable+0x26>
   24d7e:	490d      	ldr	r1, [pc, #52]	; (24db4 <log_backend_enable+0x48>)
   24d80:	480d      	ldr	r0, [pc, #52]	; (24db8 <log_backend_enable+0x4c>)
   24d82:	23c0      	movs	r3, #192	; 0xc0
   24d84:	4a0d      	ldr	r2, [pc, #52]	; (24dbc <log_backend_enable+0x50>)
   24d86:	f01f faa3 	bl	442d0 <printk>
   24d8a:	21c0      	movs	r1, #192	; 0xc0
   24d8c:	480b      	ldr	r0, [pc, #44]	; (24dbc <log_backend_enable+0x50>)
   24d8e:	f01f fcb9 	bl	44704 <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   24d92:	2201      	movs	r2, #1
	backend->cb->id = id;
   24d94:	686b      	ldr	r3, [r5, #4]
   24d96:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   24d98:	4c09      	ldr	r4, [pc, #36]	; (24dc0 <log_backend_enable+0x54>)
	backend->cb->active = true;
   24d9a:	715a      	strb	r2, [r3, #5]
   24d9c:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   24d9e:	601e      	str	r6, [r3, #0]
   24da0:	b912      	cbnz	r2, 24da8 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   24da2:	4808      	ldr	r0, [pc, #32]	; (24dc4 <log_backend_enable+0x58>)
   24da4:	f01b fd8a 	bl	408bc <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   24da8:	2301      	movs	r3, #1
   24daa:	7023      	strb	r3, [r4, #0]
}
   24dac:	bd70      	pop	{r4, r5, r6, pc}
   24dae:	bf00      	nop
   24db0:	000498f0 	.word	0x000498f0
   24db4:	0004b324 	.word	0x0004b324
   24db8:	0004b33b 	.word	0x0004b33b
   24dbc:	0004c2b9 	.word	0x0004c2b9
   24dc0:	2002b4ad 	.word	0x2002b4ad
   24dc4:	20020d74 	.word	0x20020d74

00024dc8 <log_init>:
{
   24dc8:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   24dca:	4c13      	ldr	r4, [pc, #76]	; (24e18 <log_init+0x50>)
   24dcc:	4d13      	ldr	r5, [pc, #76]	; (24e1c <log_init+0x54>)
   24dce:	1b2d      	subs	r5, r5, r4
   24dd0:	112d      	asrs	r5, r5, #4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   24dd2:	2d09      	cmp	r5, #9
   24dd4:	d906      	bls.n	24de4 <log_init+0x1c>
   24dd6:	4b12      	ldr	r3, [pc, #72]	; (24e20 <log_init+0x58>)
   24dd8:	4a12      	ldr	r2, [pc, #72]	; (24e24 <log_init+0x5c>)
   24dda:	f240 210b 	movw	r1, #523	; 0x20b
   24dde:	4812      	ldr	r0, [pc, #72]	; (24e28 <log_init+0x60>)
   24de0:	f01c ffca 	bl	41d78 <__assert_func>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24de4:	4b11      	ldr	r3, [pc, #68]	; (24e2c <log_init+0x64>)
   24de6:	e8d3 6fef 	ldaex	r6, [r3]
   24dea:	1c72      	adds	r2, r6, #1
   24dec:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24df0:	2900      	cmp	r1, #0
   24df2:	d1f8      	bne.n	24de6 <log_init+0x1e>
	if (atomic_inc(&initialized) != 0) {
   24df4:	b90e      	cbnz	r6, 24dfa <log_init+0x32>
	for (i = 0; i < log_backend_count_get(); i++) {
   24df6:	42ae      	cmp	r6, r5
   24df8:	d100      	bne.n	24dfc <log_init+0x34>
}
   24dfa:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   24dfc:	7b23      	ldrb	r3, [r4, #12]
   24dfe:	b143      	cbz	r3, 24e12 <log_init+0x4a>
			if (backend->api->init != NULL) {
   24e00:	6823      	ldr	r3, [r4, #0]
   24e02:	695b      	ldr	r3, [r3, #20]
   24e04:	b103      	cbz	r3, 24e08 <log_init+0x40>
				backend->api->init();
   24e06:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   24e08:	2204      	movs	r2, #4
   24e0a:	2100      	movs	r1, #0
   24e0c:	4620      	mov	r0, r4
   24e0e:	f7ff ffad 	bl	24d6c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   24e12:	3601      	adds	r6, #1
   24e14:	3410      	adds	r4, #16
   24e16:	e7ee      	b.n	24df6 <log_init+0x2e>
   24e18:	000498f0 	.word	0x000498f0
   24e1c:	00049900 	.word	0x00049900
   24e20:	0004c2ea 	.word	0x0004c2ea
   24e24:	0004c2b0 	.word	0x0004c2b0
   24e28:	0004c321 	.word	0x0004c321
   24e2c:	20024a44 	.word	0x20024a44

00024e30 <z_impl_log_panic>:
{
   24e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   24e32:	4f0c      	ldr	r7, [pc, #48]	; (24e64 <z_impl_log_panic+0x34>)
   24e34:	783d      	ldrb	r5, [r7, #0]
   24e36:	b94d      	cbnz	r5, 24e4c <z_impl_log_panic+0x1c>
	log_init();
   24e38:	f7ff ffc6 	bl	24dc8 <log_init>
   24e3c:	4c0a      	ldr	r4, [pc, #40]	; (24e68 <z_impl_log_panic+0x38>)
   24e3e:	4e0b      	ldr	r6, [pc, #44]	; (24e6c <z_impl_log_panic+0x3c>)
   24e40:	1b36      	subs	r6, r6, r4
   24e42:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   24e44:	42b5      	cmp	r5, r6
   24e46:	db02      	blt.n	24e4e <z_impl_log_panic+0x1e>
	panic_mode = true;
   24e48:	2301      	movs	r3, #1
   24e4a:	703b      	strb	r3, [r7, #0]
}
   24e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   24e4e:	4620      	mov	r0, r4
   24e50:	f01f fc62 	bl	44718 <log_backend_is_active>
   24e54:	b118      	cbz	r0, 24e5e <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   24e56:	6823      	ldr	r3, [r4, #0]
   24e58:	4620      	mov	r0, r4
   24e5a:	691b      	ldr	r3, [r3, #16]
   24e5c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24e5e:	3501      	adds	r5, #1
   24e60:	3410      	adds	r4, #16
   24e62:	e7ef      	b.n	24e44 <z_impl_log_panic+0x14>
   24e64:	2002b4ae 	.word	0x2002b4ae
   24e68:	000498f0 	.word	0x000498f0
   24e6c:	00049900 	.word	0x00049900

00024e70 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   24e70:	b40e      	push	{r1, r2, r3}
   24e72:	b503      	push	{r0, r1, lr}
   24e74:	ab03      	add	r3, sp, #12
   24e76:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24e7a:	4601      	mov	r1, r0
   24e7c:	4804      	ldr	r0, [pc, #16]	; (24e90 <print_formatted+0x20>)
	va_start(args, fmt);
   24e7e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   24e80:	f01f f912 	bl	440a8 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   24e84:	2000      	movs	r0, #0
   24e86:	b002      	add	sp, #8
   24e88:	f85d eb04 	ldr.w	lr, [sp], #4
   24e8c:	b003      	add	sp, #12
   24e8e:	4770      	bx	lr
   24e90:	0004474f 	.word	0x0004474f

00024e94 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   24e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   24e98:	f011 0402 	ands.w	r4, r1, #2
{
   24e9c:	b085      	sub	sp, #20
   24e9e:	4606      	mov	r6, r0
   24ea0:	4690      	mov	r8, r2
   24ea2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   24ea6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   24eaa:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   24eae:	d007      	beq.n	24ec0 <prefix_print+0x2c>
	if (!format) {
   24eb0:	f011 0f44 	tst.w	r1, #68	; 0x44
   24eb4:	d137      	bne.n	24f26 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   24eb6:	461a      	mov	r2, r3
   24eb8:	4932      	ldr	r1, [pc, #200]	; (24f84 <prefix_print+0xf0>)
   24eba:	f7ff ffd9 	bl	24e70 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   24ebe:	4604      	mov	r4, r0
	if (color) {
   24ec0:	f1b9 0f00 	cmp.w	r9, #0
   24ec4:	d00a      	beq.n	24edc <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   24ec6:	4b30      	ldr	r3, [pc, #192]	; (24f88 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   24ec8:	4930      	ldr	r1, [pc, #192]	; (24f8c <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
   24eca:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   24ece:	4b30      	ldr	r3, [pc, #192]	; (24f90 <prefix_print+0xfc>)
   24ed0:	4630      	mov	r0, r6
   24ed2:	2a00      	cmp	r2, #0
   24ed4:	bf08      	it	eq
   24ed6:	461a      	moveq	r2, r3
   24ed8:	f7ff ffca 	bl	24e70 <print_formatted>
	if (level_on) {
   24edc:	b13d      	cbz	r5, 24eee <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   24ede:	4b2d      	ldr	r3, [pc, #180]	; (24f94 <prefix_print+0x100>)
   24ee0:	492d      	ldr	r1, [pc, #180]	; (24f98 <prefix_print+0x104>)
   24ee2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   24ee6:	4630      	mov	r0, r6
   24ee8:	f7ff ffc2 	bl	24e70 <print_formatted>
   24eec:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   24eee:	f1b8 0f00 	cmp.w	r8, #0
   24ef2:	d044      	beq.n	24f7e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   24ef4:	2301      	movs	r3, #1
   24ef6:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   24efa:	4b28      	ldr	r3, [pc, #160]	; (24f9c <prefix_print+0x108>)
   24efc:	f017 0f10 	tst.w	r7, #16
   24f00:	4f27      	ldr	r7, [pc, #156]	; (24fa0 <prefix_print+0x10c>)
   24f02:	bf18      	it	ne
   24f04:	461f      	movne	r7, r3
   24f06:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   24f0a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   24f0e:	f7ff ff1f 	bl	24d50 <log_source_name_get>
   24f12:	4639      	mov	r1, r7
   24f14:	4602      	mov	r2, r0
   24f16:	4630      	mov	r0, r6
   24f18:	f7ff ffaa 	bl	24e70 <print_formatted>
   24f1c:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   24f1e:	4420      	add	r0, r4
   24f20:	b005      	add	sp, #20
   24f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   24f26:	4a1f      	ldr	r2, [pc, #124]	; (24fa4 <prefix_print+0x110>)
   24f28:	6811      	ldr	r1, [r2, #0]
   24f2a:	b331      	cbz	r1, 24f7a <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24f2c:	4a1e      	ldr	r2, [pc, #120]	; (24fa8 <prefix_print+0x114>)
   24f2e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   24f32:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   24f34:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24f38:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   24f3c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   24f40:	fbb4 f2fe 	udiv	r2, r4, lr
   24f44:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   24f48:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   24f4c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f50:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   24f54:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f58:	fb01 441b 	mls	r4, r1, fp, r4
   24f5c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   24f60:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24f64:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   24f68:	e9cd b101 	strd	fp, r1, [sp, #4]
   24f6c:	fb0a e113 	mls	r1, sl, r3, lr
   24f70:	9100      	str	r1, [sp, #0]
   24f72:	490e      	ldr	r1, [pc, #56]	; (24fac <prefix_print+0x118>)
   24f74:	f7ff ff7c 	bl	24e70 <print_formatted>
   24f78:	e7a1      	b.n	24ebe <prefix_print+0x2a>
		length = 0;
   24f7a:	4608      	mov	r0, r1
   24f7c:	e79f      	b.n	24ebe <prefix_print+0x2a>
	total += print_formatted(log_output,
   24f7e:	4f08      	ldr	r7, [pc, #32]	; (24fa0 <prefix_print+0x10c>)
   24f80:	e7c1      	b.n	24f06 <prefix_print+0x72>
   24f82:	bf00      	nop
   24f84:	0004c3c5 	.word	0x0004c3c5
   24f88:	00049b9c 	.word	0x00049b9c
   24f8c:	00051c52 	.word	0x00051c52
   24f90:	0004c3b7 	.word	0x0004c3b7
   24f94:	00049bb0 	.word	0x00049bb0
   24f98:	0004c3ea 	.word	0x0004c3ea
   24f9c:	0004c3c1 	.word	0x0004c3c1
   24fa0:	0004c3bc 	.word	0x0004c3bc
   24fa4:	20024a48 	.word	0x20024a48
   24fa8:	20024a4c 	.word	0x20024a4c
   24fac:	0004c3ce 	.word	0x0004c3ce

00024fb0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   24fb0:	b538      	push	{r3, r4, r5, lr}
   24fb2:	460c      	mov	r4, r1
	if (color) {
   24fb4:	07e1      	lsls	r1, r4, #31
{
   24fb6:	4605      	mov	r5, r0
	if (color) {
   24fb8:	d503      	bpl.n	24fc2 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   24fba:	4a08      	ldr	r2, [pc, #32]	; (24fdc <postfix_print+0x2c>)
   24fbc:	4908      	ldr	r1, [pc, #32]	; (24fe0 <postfix_print+0x30>)
   24fbe:	f7ff ff57 	bl	24e70 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24fc2:	06e2      	lsls	r2, r4, #27
   24fc4:	d408      	bmi.n	24fd8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24fc6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   24fc8:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   24fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   24fce:	bf4c      	ite	mi
   24fd0:	4904      	ldrmi	r1, [pc, #16]	; (24fe4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   24fd2:	4905      	ldrpl	r1, [pc, #20]	; (24fe8 <postfix_print+0x38>)
   24fd4:	f7ff bf4c 	b.w	24e70 <print_formatted>
}
   24fd8:	bd38      	pop	{r3, r4, r5, pc}
   24fda:	bf00      	nop
   24fdc:	0004c3b7 	.word	0x0004c3b7
   24fe0:	00051c52 	.word	0x00051c52
   24fe4:	0004c55c 	.word	0x0004c55c
   24fe8:	0005121d 	.word	0x0005121d

00024fec <hexdump_line_print>:
{
   24fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ff0:	4698      	mov	r8, r3
   24ff2:	9b08      	ldr	r3, [sp, #32]
   24ff4:	4604      	mov	r4, r0
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24ff6:	06dd      	lsls	r5, r3, #27
{
   24ff8:	460e      	mov	r6, r1
   24ffa:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24ffc:	d405      	bmi.n	2500a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24ffe:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   25000:	bf4c      	ite	mi
   25002:	492a      	ldrmi	r1, [pc, #168]	; (250ac <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
   25004:	492a      	ldrpl	r1, [pc, #168]	; (250b0 <hexdump_line_print+0xc4>)
   25006:	f7ff ff33 	bl	24e70 <print_formatted>
{
   2500a:	2500      	movs	r5, #0
		print_formatted(log_output, " ");
   2500c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 250b8 <hexdump_line_print+0xcc>
	for (int i = 0; i < prefix_offset; i++) {
   25010:	4545      	cmp	r5, r8
   25012:	db2d      	blt.n	25070 <hexdump_line_print+0x84>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25014:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   25016:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 250bc <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
   2501a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 250c0 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
   2501e:	f8df a098 	ldr.w	sl, [pc, #152]	; 250b8 <hexdump_line_print+0xcc>
		if (i < length) {
   25022:	42bd      	cmp	r5, r7
   25024:	d231      	bcs.n	2508a <hexdump_line_print+0x9e>
			print_formatted(log_output, "%02x ", data[i]);
   25026:	5d72      	ldrb	r2, [r6, r5]
   25028:	4649      	mov	r1, r9
   2502a:	4620      	mov	r0, r4
   2502c:	f7ff ff20 	bl	24e70 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25030:	3501      	adds	r5, #1
   25032:	2d10      	cmp	r5, #16
   25034:	d122      	bne.n	2507c <hexdump_line_print+0x90>
	print_formatted(log_output, "|");
   25036:	491f      	ldr	r1, [pc, #124]	; (250b4 <hexdump_line_print+0xc8>)
   25038:	4620      	mov	r0, r4
   2503a:	f7ff ff19 	bl	24e70 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2503e:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   25040:	f8df 8074 	ldr.w	r8, [pc, #116]	; 250b8 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
   25044:	f8df 907c 	ldr.w	r9, [pc, #124]	; 250c4 <hexdump_line_print+0xd8>
			print_formatted(log_output, "%c",
   25048:	f8df a07c 	ldr.w	sl, [pc, #124]	; 250c8 <hexdump_line_print+0xdc>
		if (i < length) {
   2504c:	42af      	cmp	r7, r5
   2504e:	d928      	bls.n	250a2 <hexdump_line_print+0xb6>
			char c = (char)data[i];
   25050:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   25052:	4651      	mov	r1, sl
   25054:	f812 3009 	ldrb.w	r3, [r2, r9]
   25058:	4620      	mov	r0, r4
   2505a:	f013 0f97 	tst.w	r3, #151	; 0x97
   2505e:	bf08      	it	eq
   25060:	222e      	moveq	r2, #46	; 0x2e
   25062:	f7ff ff05 	bl	24e70 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   25066:	3501      	adds	r5, #1
   25068:	2d10      	cmp	r5, #16
   2506a:	d113      	bne.n	25094 <hexdump_line_print+0xa8>
}
   2506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   25070:	4649      	mov	r1, r9
   25072:	4620      	mov	r0, r4
   25074:	f7ff fefc 	bl	24e70 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   25078:	3501      	adds	r5, #1
   2507a:	e7c9      	b.n	25010 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
   2507c:	076a      	lsls	r2, r5, #29
   2507e:	d1d0      	bne.n	25022 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
   25080:	4651      	mov	r1, sl
   25082:	4620      	mov	r0, r4
   25084:	f7ff fef4 	bl	24e70 <print_formatted>
   25088:	e7cb      	b.n	25022 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
   2508a:	4641      	mov	r1, r8
   2508c:	4620      	mov	r0, r4
   2508e:	f7ff feef 	bl	24e70 <print_formatted>
   25092:	e7cd      	b.n	25030 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
   25094:	076b      	lsls	r3, r5, #29
   25096:	d1d9      	bne.n	2504c <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   25098:	4641      	mov	r1, r8
   2509a:	4620      	mov	r0, r4
   2509c:	f7ff fee8 	bl	24e70 <print_formatted>
   250a0:	e7d4      	b.n	2504c <hexdump_line_print+0x60>
			print_formatted(log_output, " ");
   250a2:	4641      	mov	r1, r8
   250a4:	4620      	mov	r0, r4
   250a6:	f7ff fee3 	bl	24e70 <print_formatted>
   250aa:	e7dc      	b.n	25066 <hexdump_line_print+0x7a>
   250ac:	0004c55c 	.word	0x0004c55c
   250b0:	0005121d 	.word	0x0005121d
   250b4:	0004c370 	.word	0x0004c370
   250b8:	0004c36e 	.word	0x0004c36e
   250bc:	0004c36c 	.word	0x0004c36c
   250c0:	0004c366 	.word	0x0004c366
   250c4:	00052acf 	.word	0x00052acf
   250c8:	0004c372 	.word	0x0004c372

000250cc <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   250cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   250d0:	f011 0407 	ands.w	r4, r1, #7
{
   250d4:	4606      	mov	r6, r0
   250d6:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   250da:	461d      	mov	r5, r3
	if (!raw_string) {
   250dc:	d00b      	beq.n	250f6 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   250de:	f3c1 1389 	ubfx	r3, r1, #6, #10
   250e2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   250e6:	9302      	str	r3, [sp, #8]
   250e8:	e9cd 4100 	strd	r4, r1, [sp]
   250ec:	4613      	mov	r3, r2
   250ee:	4639      	mov	r1, r7
   250f0:	2201      	movs	r2, #1
   250f2:	f7ff fecf 	bl	24e94 <prefix_print>

#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, ap);
#else
	z_vprintk(out_func, (void *)log_output, fmt, ap);
   250f6:	4643      	mov	r3, r8
   250f8:	462a      	mov	r2, r5
   250fa:	4631      	mov	r1, r6
   250fc:	480d      	ldr	r0, [pc, #52]	; (25134 <log_output_string+0x68>)
   250fe:	f01e ffd3 	bl	440a8 <z_vprintk>
#endif

	(void)length;

	if (raw_string) {
   25102:	b98c      	cbnz	r4, 25128 <log_output_string+0x5c>
   25104:	3d01      	subs	r5, #1
	while (*fmt != '\0') {
   25106:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   2510a:	b95b      	cbnz	r3, 25124 <log_output_string+0x58>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   2510c:	2c0a      	cmp	r4, #10
   2510e:	d103      	bne.n	25118 <log_output_string+0x4c>
			print_formatted(log_output, "\r");
   25110:	4909      	ldr	r1, [pc, #36]	; (25138 <log_output_string+0x6c>)
   25112:	4630      	mov	r0, r6
   25114:	f7ff feac 	bl	24e70 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   25118:	4630      	mov	r0, r6
}
   2511a:	b004      	add	sp, #16
   2511c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   25120:	f01f bb2e 	b.w	44780 <log_output_flush>
	while (*fmt != '\0') {
   25124:	461c      	mov	r4, r3
   25126:	e7ee      	b.n	25106 <log_output_string+0x3a>
		postfix_print(log_output, flags, level);
   25128:	4622      	mov	r2, r4
   2512a:	4639      	mov	r1, r7
   2512c:	4630      	mov	r0, r6
   2512e:	f7ff ff3f 	bl	24fb0 <postfix_print>
   25132:	e7f1      	b.n	25118 <log_output_string+0x4c>
   25134:	0004474f 	.word	0x0004474f
   25138:	0004c3b5 	.word	0x0004c3b5

0002513c <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   2513c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25140:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   25142:	4698      	mov	r8, r3
   25144:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25148:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   2514c:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25150:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   25154:	9302      	str	r3, [sp, #8]
   25156:	e9cd 9100 	strd	r9, r1, [sp]
   2515a:	4613      	mov	r3, r2
   2515c:	4631      	mov	r1, r6
   2515e:	2201      	movs	r2, #1
{
   25160:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25162:	f7ff fe97 	bl	24e94 <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   25166:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   25168:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   2516a:	4910      	ldr	r1, [pc, #64]	; (251ac <log_output_hexdump+0x70>)
   2516c:	4620      	mov	r0, r4
   2516e:	f7ff fe7f 	bl	24e70 <print_formatted>

	while (length) {
   25172:	b955      	cbnz	r5, 2518a <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   25174:	4620      	mov	r0, r4
   25176:	464a      	mov	r2, r9
   25178:	4631      	mov	r1, r6
   2517a:	f7ff ff19 	bl	24fb0 <postfix_print>
	log_output_flush(log_output);
   2517e:	4620      	mov	r0, r4
}
   25180:	b004      	add	sp, #16
   25182:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   25186:	f01f bafb 	b.w	44780 <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   2518a:	2d10      	cmp	r5, #16
   2518c:	46a8      	mov	r8, r5
   2518e:	bf28      	it	cs
   25190:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   25194:	4639      	mov	r1, r7
   25196:	9600      	str	r6, [sp, #0]
   25198:	4653      	mov	r3, sl
   2519a:	4642      	mov	r2, r8
   2519c:	4620      	mov	r0, r4
   2519e:	f7ff ff25 	bl	24fec <hexdump_line_print>
		data += part_len;
   251a2:	4447      	add	r7, r8
		length -= part_len;
   251a4:	eba5 0508 	sub.w	r5, r5, r8
   251a8:	e7e3      	b.n	25172 <log_output_hexdump+0x36>
   251aa:	bf00      	nop
   251ac:	00051c52 	.word	0x00051c52

000251b0 <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   251b0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   251b2:	2100      	movs	r1, #0
	timestamp_div = 1U;
   251b4:	4a07      	ldr	r2, [pc, #28]	; (251d4 <log_output_timestamp_freq_set+0x24>)
{
   251b6:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   251b8:	4c07      	ldr	r4, [pc, #28]	; (251d8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   251ba:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   251bc:	42a0      	cmp	r0, r4
   251be:	d804      	bhi.n	251ca <log_output_timestamp_freq_set+0x1a>
   251c0:	b101      	cbz	r1, 251c4 <log_output_timestamp_freq_set+0x14>
   251c2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   251c4:	4b05      	ldr	r3, [pc, #20]	; (251dc <log_output_timestamp_freq_set+0x2c>)
   251c6:	6018      	str	r0, [r3, #0]
}
   251c8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   251ca:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   251cc:	005b      	lsls	r3, r3, #1
   251ce:	2101      	movs	r1, #1
   251d0:	e7f4      	b.n	251bc <log_output_timestamp_freq_set+0xc>
   251d2:	bf00      	nop
   251d4:	20024a4c 	.word	0x20024a4c
   251d8:	000f4240 	.word	0x000f4240
   251dc:	20024a48 	.word	0x20024a48

000251e0 <char_out>:
#include <assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   251e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   251e2:	460d      	mov	r5, r1
   251e4:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   251e6:	4f06      	ldr	r7, [pc, #24]	; (25200 <char_out+0x20>)
   251e8:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   251ea:	42b4      	cmp	r4, r6
   251ec:	d101      	bne.n	251f2 <char_out+0x12>
	}

	return length;
}
   251ee:	4628      	mov	r0, r5
   251f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   251f2:	6838      	ldr	r0, [r7, #0]
   251f4:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   251f8:	6883      	ldr	r3, [r0, #8]
   251fa:	685b      	ldr	r3, [r3, #4]
   251fc:	4798      	blx	r3
   251fe:	e7f4      	b.n	251ea <char_out+0xa>
   25200:	20024a64 	.word	0x20024a64

00025204 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   25204:	4801      	ldr	r0, [pc, #4]	; (2520c <panic+0x8>)
   25206:	f01f babb 	b.w	44780 <log_output_flush>
   2520a:	bf00      	nop
   2520c:	00049bdc 	.word	0x00049bdc

00025210 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   25210:	b508      	push	{r3, lr}
   25212:	4806      	ldr	r0, [pc, #24]	; (2522c <log_backend_uart_init+0x1c>)
   25214:	f019 fa94 	bl	3e740 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25218:	4b05      	ldr	r3, [pc, #20]	; (25230 <log_backend_uart_init+0x20>)
   2521a:	6018      	str	r0, [r3, #0]
	assert((void *)uart_dev);
   2521c:	b928      	cbnz	r0, 2522a <log_backend_uart_init+0x1a>
   2521e:	4b05      	ldr	r3, [pc, #20]	; (25234 <log_backend_uart_init+0x24>)
   25220:	4a05      	ldr	r2, [pc, #20]	; (25238 <log_backend_uart_init+0x28>)
   25222:	212d      	movs	r1, #45	; 0x2d
   25224:	4805      	ldr	r0, [pc, #20]	; (2523c <log_backend_uart_init+0x2c>)
   25226:	f01c fda7 	bl	41d78 <__assert_func>
}
   2522a:	bd08      	pop	{r3, pc}
   2522c:	0004c426 	.word	0x0004c426
   25230:	20024a64 	.word	0x20024a64
   25234:	0004c42d 	.word	0x0004c42d
   25238:	0004c410 	.word	0x0004c410
   2523c:	0004c43e 	.word	0x0004c43e

00025240 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   25240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   25242:	200f      	movs	r0, #15
   25244:	9002      	str	r0, [sp, #8]
   25246:	9807      	ldr	r0, [sp, #28]
   25248:	9001      	str	r0, [sp, #4]
   2524a:	9806      	ldr	r0, [sp, #24]
   2524c:	9000      	str	r0, [sp, #0]
   2524e:	4803      	ldr	r0, [pc, #12]	; (2525c <sync_hexdump+0x1c>)
   25250:	f7ff ff74 	bl	2513c <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   25254:	b005      	add	sp, #20
   25256:	f85d fb04 	ldr.w	pc, [sp], #4
   2525a:	bf00      	nop
   2525c:	00049bdc 	.word	0x00049bdc

00025260 <sync_string>:
{
   25260:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   25262:	200f      	movs	r0, #15
   25264:	9001      	str	r0, [sp, #4]
   25266:	9804      	ldr	r0, [sp, #16]
   25268:	9000      	str	r0, [sp, #0]
   2526a:	4803      	ldr	r0, [pc, #12]	; (25278 <sync_string+0x18>)
   2526c:	f7ff ff2e 	bl	250cc <log_output_string>
}
   25270:	b003      	add	sp, #12
   25272:	f85d fb04 	ldr.w	pc, [sp], #4
   25276:	bf00      	nop
   25278:	00049bdc 	.word	0x00049bdc

0002527c <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25280:	b085      	sub	sp, #20
   25282:	4604      	mov	r4, r0
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(tmp_str, len);
   25284:	a802      	add	r0, sp, #8
{
   25286:	460d      	mov	r5, r1
   25288:	4617      	mov	r7, r2
	cnt = fcb_put_len(tmp_str, len);
   2528a:	f01f fb1f 	bl	448cc <fcb_put_len>
	if (cnt < 0) {
   2528e:	f1b0 0800 	subs.w	r8, r0, #0
   25292:	db74      	blt.n	2537e <fcb_append+0x102>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   25294:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(uint8_t *buf, uint16_t len);
int fcb_get_len(uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   25298:	fa1f f688 	uxth.w	r6, r8
   2529c:	2b01      	cmp	r3, #1
   2529e:	d906      	bls.n	252ae <fcb_append+0x32>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   252a0:	1e59      	subs	r1, r3, #1
   252a2:	441d      	add	r5, r3
   252a4:	425a      	negs	r2, r3
   252a6:	440e      	add	r6, r1
   252a8:	3d01      	subs	r5, #1
   252aa:	4016      	ands	r6, r2
   252ac:	4015      	ands	r5, r2
	if (fcb->f_align <= 1U) {
   252ae:	2b01      	cmp	r3, #1
		return len;
   252b0:	bf92      	itee	ls
   252b2:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   252b4:	425a      	neghi	r2, r3
   252b6:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   252b8:	b22d      	sxth	r5, r5
   252ba:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   252bc:	2e08      	cmp	r6, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   252be:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   252c0:	dd09      	ble.n	252d6 <fcb_append+0x5a>
   252c2:	4936      	ldr	r1, [pc, #216]	; (2539c <fcb_append+0x120>)
   252c4:	4836      	ldr	r0, [pc, #216]	; (253a0 <fcb_append+0x124>)
   252c6:	234b      	movs	r3, #75	; 0x4b
   252c8:	4a36      	ldr	r2, [pc, #216]	; (253a4 <fcb_append+0x128>)
   252ca:	f01f f801 	bl	442d0 <printk>
   252ce:	214b      	movs	r1, #75	; 0x4b
   252d0:	4834      	ldr	r0, [pc, #208]	; (253a4 <fcb_append+0x128>)
   252d2:	f01f fa17 	bl	44704 <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   252d6:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   252da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   252de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   252e2:	4650      	mov	r0, sl
   252e4:	f019 fe7c 	bl	3efe0 <z_impl_k_mutex_lock>
	if (rc) {
   252e8:	4680      	mov	r8, r0
   252ea:	2800      	cmp	r0, #0
   252ec:	d153      	bne.n	25396 <fcb_append+0x11a>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   252ee:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   252f2:	4433      	add	r3, r6
   252f4:	684a      	ldr	r2, [r1, #4]
   252f6:	442b      	add	r3, r5
   252f8:	4293      	cmp	r3, r2
   252fa:	d92b      	bls.n	25354 <fcb_append+0xd8>
	prev = NULL;
   252fc:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   252fe:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   25302:	4620      	mov	r0, r4
   25304:	f01f fc5d 	bl	44bc2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   25308:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   2530a:	f1b9 0f00 	cmp.w	r9, #0
   2530e:	bf08      	it	eq
   25310:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   25312:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   25314:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   25316:	d038      	beq.n	2538a <fcb_append+0x10e>
	} while (i++ < cnt);
   25318:	45c3      	cmp	fp, r8
   2531a:	f108 0301 	add.w	r3, r8, #1
   2531e:	dc32      	bgt.n	25386 <fcb_append+0x10a>
		if (!sector || (sector->fs_size <
   25320:	f1b9 0f00 	cmp.w	r9, #0
   25324:	d031      	beq.n	2538a <fcb_append+0x10e>
			sizeof(struct fcb_disk_area) + len + cnt)) {
   25326:	f106 0308 	add.w	r3, r6, #8
		if (!sector || (sector->fs_size <
   2532a:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   2532e:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   25330:	429a      	cmp	r2, r3
   25332:	d32a      	bcc.n	2538a <fcb_append+0x10e>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   25334:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   25336:	4649      	mov	r1, r9
   25338:	3201      	adds	r2, #1
   2533a:	b292      	uxth	r2, r2
   2533c:	4620      	mov	r0, r4
   2533e:	f01f faed 	bl	4491c <fcb_sector_hdr_init>
		if (rc) {
   25342:	4680      	mov	r8, r0
   25344:	b9c0      	cbnz	r0, 25378 <fcb_append+0xfc>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   25346:	2308      	movs	r3, #8
   25348:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   2534a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   2534c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   25350:	3301      	adds	r3, #1
   25352:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   25354:	9600      	str	r6, [sp, #0]
   25356:	ab02      	add	r3, sp, #8
   25358:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   2535c:	4620      	mov	r0, r4
   2535e:	f01f fa83 	bl	44868 <fcb_flash_write>
	if (rc) {
   25362:	4680      	mov	r8, r0
   25364:	b9a0      	cbnz	r0, 25390 <fcb_append+0x114>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   25366:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25368:	603b      	str	r3, [r7, #0]
	append_loc->fe_elem_off = active->fe_elem_off;
   2536a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2536c:	607b      	str	r3, [r7, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   2536e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25370:	441e      	add	r6, r3
   25372:	60be      	str	r6, [r7, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   25374:	442e      	add	r6, r5
   25376:	62a6      	str	r6, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   25378:	4650      	mov	r0, sl
   2537a:	f019 ff2f 	bl	3f1dc <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   2537e:	4640      	mov	r0, r8
   25380:	b005      	add	sp, #20
   25382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   25386:	4698      	mov	r8, r3
   25388:	e7bb      	b.n	25302 <fcb_append+0x86>
			rc = -ENOSPC;
   2538a:	f06f 081b 	mvn.w	r8, #27
   2538e:	e7f3      	b.n	25378 <fcb_append+0xfc>
		rc = -EIO;
   25390:	f06f 0804 	mvn.w	r8, #4
   25394:	e7f0      	b.n	25378 <fcb_append+0xfc>
		return -EINVAL;
   25396:	f06f 0815 	mvn.w	r8, #21
   2539a:	e7f0      	b.n	2537e <fcb_append+0x102>
   2539c:	0004c4b2 	.word	0x0004c4b2
   253a0:	0004b33b 	.word	0x0004b33b
   253a4:	0004c484 	.word	0x0004c484

000253a8 <boot_write_trailer_byte>:
	}
}

static int boot_write_trailer_byte(const struct flash_area *fa, uint32_t off,
				   uint8_t val)
{
   253a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   253aa:	4604      	mov	r4, r0
   253ac:	460d      	mov	r5, r1
   253ae:	4616      	mov	r6, r2
	uint8_t buf[BOOT_MAX_ALIGN];
	uint8_t align;
	uint8_t erased_val;
	int rc;

	align = flash_area_align(fa);
   253b0:	f01f feb5 	bl	4511e <flash_area_align>
	assert(align <= BOOT_MAX_ALIGN);
   253b4:	2808      	cmp	r0, #8
	align = flash_area_align(fa);
   253b6:	4603      	mov	r3, r0
	assert(align <= BOOT_MAX_ALIGN);
   253b8:	d906      	bls.n	253c8 <boot_write_trailer_byte+0x20>
   253ba:	4b0c      	ldr	r3, [pc, #48]	; (253ec <boot_write_trailer_byte+0x44>)
   253bc:	4a0c      	ldr	r2, [pc, #48]	; (253f0 <boot_write_trailer_byte+0x48>)
   253be:	f240 112d 	movw	r1, #301	; 0x12d
   253c2:	480c      	ldr	r0, [pc, #48]	; (253f4 <boot_write_trailer_byte+0x4c>)
   253c4:	f01c fcd8 	bl	41d78 <__assert_func>
	erased_val = flash_area_erased_val(fa);
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   253c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	buf[0] = val;

	rc = flash_area_write(fa, off, buf, align);
   253cc:	466a      	mov	r2, sp
	memset(buf, erased_val, BOOT_MAX_ALIGN);
   253ce:	e9cd 0000 	strd	r0, r0, [sp]
	rc = flash_area_write(fa, off, buf, align);
   253d2:	4629      	mov	r1, r5
   253d4:	4620      	mov	r0, r4
	buf[0] = val;
   253d6:	f88d 6000 	strb.w	r6, [sp]
	rc = flash_area_write(fa, off, buf, align);
   253da:	f01f fe51 	bl	45080 <flash_area_write>
	if (rc != 0) {
   253de:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   253e0:	bf18      	it	ne
   253e2:	f06f 0004 	mvnne.w	r0, #4
   253e6:	b002      	add	sp, #8
   253e8:	bd70      	pop	{r4, r5, r6, pc}
   253ea:	bf00      	nop
   253ec:	0004c4e1 	.word	0x0004c4e1
   253f0:	0004c4c9 	.word	0x0004c4c9
   253f4:	0004c4f9 	.word	0x0004c4f9

000253f8 <boot_request_upgrade>:

	return BOOT_SWAP_TYPE_NONE;
}

int boot_request_upgrade(int permanent)
{
   253f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   253fa:	4605      	mov	r5, r0
	rc = flash_area_open(bank_id, &fa);
   253fc:	a901      	add	r1, sp, #4
   253fe:	2007      	movs	r0, #7
   25400:	f000 fa14 	bl	2582c <flash_area_open>
	if (rc) {
   25404:	4604      	mov	r4, r0
   25406:	bb10      	cbnz	r0, 2544e <boot_request_upgrade+0x56>
	offs = MAGIC_OFFS(fa);
   25408:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   2540a:	2310      	movs	r3, #16
	offs = MAGIC_OFFS(fa);
   2540c:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_write(fa, offs, boot_img_magic, BOOT_MAGIC_SZ);
   2540e:	4a12      	ldr	r2, [pc, #72]	; (25458 <boot_request_upgrade+0x60>)
   25410:	3910      	subs	r1, #16
   25412:	f01f fe35 	bl	45080 <flash_area_write>
   25416:	4604      	mov	r4, r0
	flash_area_close(fa);
   25418:	9801      	ldr	r0, [sp, #4]
   2541a:	f01f fe13 	bl	45044 <flash_area_close>
	uint8_t swap_type;
#endif
	int rc;

	rc = boot_magic_write(FLASH_AREA_IMAGE_SECONDARY);
	if (rc) {
   2541e:	b9b4      	cbnz	r4, 2544e <boot_request_upgrade+0x56>
		goto op_end;
	}

	if (permanent) {
   25420:	b1c5      	cbz	r5, 25454 <boot_request_upgrade+0x5c>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   25422:	2007      	movs	r0, #7
   25424:	f01f fc7e 	bl	44d24 <boot_flag_write.constprop.7>
		rc = boot_image_ok_write(FLASH_AREA_IMAGE_SECONDARY);

#ifdef CONFIG_MCUBOOT_TRAILER_SWAP_TYPE
		if (rc) {
   25428:	4604      	mov	r4, r0
   2542a:	b980      	cbnz	r0, 2544e <boot_request_upgrade+0x56>
			goto op_end;
		}

		swap_type = BOOT_SWAP_TYPE_PERM;
   2542c:	2503      	movs	r5, #3
	rc = flash_area_open(bank_id, &fa);
   2542e:	a901      	add	r1, sp, #4
   25430:	2007      	movs	r0, #7
   25432:	f000 f9fb 	bl	2582c <flash_area_open>
	if (rc) {
   25436:	4604      	mov	r4, r0
   25438:	b948      	cbnz	r0, 2544e <boot_request_upgrade+0x56>
	offs = SWAP_TYPE_OFFS(fa);
   2543a:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   2543c:	462a      	mov	r2, r5
	offs = SWAP_TYPE_OFFS(fa);
   2543e:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, swap_type);
   25440:	3928      	subs	r1, #40	; 0x28
   25442:	f7ff ffb1 	bl	253a8 <boot_write_trailer_byte>
   25446:	4604      	mov	r4, r0
	flash_area_close(fa);
   25448:	9801      	ldr	r0, [sp, #4]
   2544a:	f01f fdfb 	bl	45044 <flash_area_close>
#else
	}
#endif
op_end:
	return rc;
}
   2544e:	4620      	mov	r0, r4
   25450:	b003      	add	sp, #12
   25452:	bd30      	pop	{r4, r5, pc}
		swap_type = BOOT_SWAP_TYPE_TEST;
   25454:	2502      	movs	r5, #2
   25456:	e7ea      	b.n	2542e <boot_request_upgrade+0x36>
   25458:	00049bec 	.word	0x00049bec

0002545c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   2545c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   25460:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 25504 <z_impl_zsock_socket+0xa8>
{
   25464:	4606      	mov	r6, r0
   25466:	460f      	mov	r7, r1
   25468:	4690      	mov	r8, r2
   2546a:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   2546c:	4c1e      	ldr	r4, [pc, #120]	; (254e8 <z_impl_zsock_socket+0x8c>)
   2546e:	4d1f      	ldr	r5, [pc, #124]	; (254ec <z_impl_zsock_socket+0x90>)
   25470:	454c      	cmp	r4, r9
   25472:	d90c      	bls.n	2548e <z_impl_zsock_socket+0x32>
   25474:	491e      	ldr	r1, [pc, #120]	; (254f0 <z_impl_zsock_socket+0x94>)
   25476:	23c0      	movs	r3, #192	; 0xc0
   25478:	462a      	mov	r2, r5
   2547a:	481e      	ldr	r0, [pc, #120]	; (254f4 <z_impl_zsock_socket+0x98>)
   2547c:	f01e ff28 	bl	442d0 <printk>
   25480:	481d      	ldr	r0, [pc, #116]	; (254f8 <z_impl_zsock_socket+0x9c>)
   25482:	f01e ff25 	bl	442d0 <printk>
   25486:	21c0      	movs	r1, #192	; 0xc0
   25488:	4628      	mov	r0, r5
   2548a:	f01f f93b 	bl	44704 <assert_post_action>
   2548e:	4554      	cmp	r4, sl
   25490:	d307      	bcc.n	254a2 <z_impl_zsock_socket+0x46>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   25492:	f020 faa7 	bl	459e4 <__errno>
   25496:	236a      	movs	r3, #106	; 0x6a
   25498:	6003      	str	r3, [r0, #0]
	return -1;
}
   2549a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   254a2:	6823      	ldr	r3, [r4, #0]
   254a4:	42b3      	cmp	r3, r6
   254a6:	d000      	beq.n	254aa <z_impl_zsock_socket+0x4e>
   254a8:	b9db      	cbnz	r3, 254e2 <z_impl_zsock_socket+0x86>
		NET_ASSERT(sock_family->is_supported);
   254aa:	6863      	ldr	r3, [r4, #4]
   254ac:	b963      	cbnz	r3, 254c8 <z_impl_zsock_socket+0x6c>
   254ae:	4913      	ldr	r1, [pc, #76]	; (254fc <z_impl_zsock_socket+0xa0>)
   254b0:	23c6      	movs	r3, #198	; 0xc6
   254b2:	462a      	mov	r2, r5
   254b4:	480f      	ldr	r0, [pc, #60]	; (254f4 <z_impl_zsock_socket+0x98>)
   254b6:	f01e ff0b 	bl	442d0 <printk>
   254ba:	4811      	ldr	r0, [pc, #68]	; (25500 <z_impl_zsock_socket+0xa4>)
   254bc:	f01e ff08 	bl	442d0 <printk>
   254c0:	21c6      	movs	r1, #198	; 0xc6
   254c2:	4628      	mov	r0, r5
   254c4:	f01f f91e 	bl	44704 <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   254c8:	6863      	ldr	r3, [r4, #4]
   254ca:	4642      	mov	r2, r8
   254cc:	4639      	mov	r1, r7
   254ce:	4630      	mov	r0, r6
   254d0:	4798      	blx	r3
   254d2:	b130      	cbz	r0, 254e2 <z_impl_zsock_socket+0x86>
		return sock_family->handler(family, type, proto);
   254d4:	68a3      	ldr	r3, [r4, #8]
   254d6:	4642      	mov	r2, r8
   254d8:	4639      	mov	r1, r7
   254da:	4630      	mov	r0, r6
}
   254dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   254e0:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   254e2:	340c      	adds	r4, #12
   254e4:	e7c4      	b.n	25470 <z_impl_zsock_socket+0x14>
   254e6:	bf00      	nop
   254e8:	00049754 	.word	0x00049754
   254ec:	0004c55e 	.word	0x0004c55e
   254f0:	0004c5ac 	.word	0x0004c5ac
   254f4:	0004b33b 	.word	0x0004b33b
   254f8:	0004c5d9 	.word	0x0004c5d9
   254fc:	0004c592 	.word	0x0004c592
   25500:	0004c55b 	.word	0x0004c55b
   25504:	00049760 	.word	0x00049760

00025508 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   25508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   2550c:	f1b2 0800 	subs.w	r8, r2, #0
{
   25510:	b09b      	sub	sp, #108	; 0x6c
   25512:	9005      	str	r0, [sp, #20]
   25514:	460f      	mov	r7, r1
	if (poll_timeout < 0) {
   25516:	db2d      	blt.n	25574 <z_impl_zsock_poll+0x6c>
			return (t * to_hz + off) / from_hz;
   25518:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   2551c:	f240 30e7 	movw	r0, #999	; 0x3e7
   25520:	2100      	movs	r1, #0
   25522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25526:	2300      	movs	r3, #0
   25528:	fbc4 0108 	smlal	r0, r1, r4, r8
   2552c:	f7f7 fcc6 	bl	1cebc <__aeabi_uldivmod>
   25530:	4682      	mov	sl, r0
   25532:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   25534:	2400      	movs	r4, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   25536:	4650      	mov	r0, sl
   25538:	4659      	mov	r1, fp
   2553a:	f022 fd52 	bl	47fe2 <z_timeout_end_calc>
	const struct fd_op_vtable *offl_vtable = NULL;
   2553e:	4626      	mov	r6, r4
	bool offload = false;
   25540:	46a1      	mov	r9, r4
	end = z_timeout_end_calc(timeout);
   25542:	e9cd 0106 	strd	r0, r1, [sp, #24]

	pev = poll_events;
   25546:	ab0b      	add	r3, sp, #44	; 0x2c
	for (pfd = fds, i = nfds; i--; pfd++) {
   25548:	9d05      	ldr	r5, [sp, #20]
	pev = poll_events;
   2554a:	9309      	str	r3, [sp, #36]	; 0x24
	for (pfd = fds, i = nfds; i--; pfd++) {
   2554c:	9703      	str	r7, [sp, #12]
   2554e:	9b03      	ldr	r3, [sp, #12]
   25550:	b9bb      	cbnz	r3, 25582 <z_impl_zsock_poll+0x7a>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   25552:	f1b9 0f00 	cmp.w	r9, #0
   25556:	d045      	beq.n	255e4 <z_impl_zsock_poll+0xdc>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   25558:	4621      	mov	r1, r4
   2555a:	e9cd 7800 	strd	r7, r8, [sp]
   2555e:	9b05      	ldr	r3, [sp, #20]
   25560:	f44f 7282 	mov.w	r2, #260	; 0x104
   25564:	4630      	mov	r0, r6
   25566:	f01f fc8a 	bl	44e7e <z_fdtable_call_ioctl>
   2556a:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   2556c:	4620      	mov	r0, r4
   2556e:	b01b      	add	sp, #108	; 0x6c
   25570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   25574:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   25578:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
		poll_timeout = SYS_FOREVER_MS;
   2557c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25580:	e7d8      	b.n	25534 <z_impl_zsock_poll+0x2c>
		if (pfd->fd < 0) {
   25582:	6828      	ldr	r0, [r5, #0]
   25584:	2800      	cmp	r0, #0
   25586:	db28      	blt.n	255da <z_impl_zsock_poll+0xd2>
	ctx = z_get_fd_obj_and_vtable(sock,
   25588:	a90a      	add	r1, sp, #40	; 0x28
   2558a:	f7fe fdb7 	bl	240fc <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   2558e:	9004      	str	r0, [sp, #16]
   25590:	b318      	cbz	r0, 255da <z_impl_zsock_poll+0xd2>
		result = z_fdtable_call_ioctl(vtable, ctx,
   25592:	ab1a      	add	r3, sp, #104	; 0x68
   25594:	9301      	str	r3, [sp, #4]
   25596:	ab09      	add	r3, sp, #36	; 0x24
   25598:	9300      	str	r3, [sp, #0]
   2559a:	4601      	mov	r1, r0
   2559c:	462b      	mov	r3, r5
   2559e:	f44f 7281 	mov.w	r2, #258	; 0x102
   255a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   255a4:	f01f fc6b 	bl	44e7e <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   255a8:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   255ac:	4603      	mov	r3, r0
		if (result == -EALREADY) {
   255ae:	d010      	beq.n	255d2 <z_impl_zsock_poll+0xca>
		} else if (result == -EXDEV) {
   255b0:	f110 0f12 	cmn.w	r0, #18
   255b4:	d105      	bne.n	255c2 <z_impl_zsock_poll+0xba>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   255b6:	b90e      	cbnz	r6, 255bc <z_impl_zsock_poll+0xb4>
				offl_vtable = vtable;
   255b8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   255ba:	9c04      	ldr	r4, [sp, #16]
			offload = true;
   255bc:	f04f 0901 	mov.w	r9, #1
   255c0:	e00b      	b.n	255da <z_impl_zsock_poll+0xd2>
		} else if (result != 0) {
   255c2:	b150      	cbz	r0, 255da <z_impl_zsock_poll+0xd2>
   255c4:	9303      	str	r3, [sp, #12]
				errno = -result;
   255c6:	f020 fa0d 	bl	459e4 <__errno>
   255ca:	9b03      	ldr	r3, [sp, #12]
   255cc:	425b      	negs	r3, r3
   255ce:	6003      	str	r3, [r0, #0]
				return -1;
   255d0:	e03f      	b.n	25652 <z_impl_zsock_poll+0x14a>
			timeout = K_NO_WAIT;
   255d2:	f04f 0a00 	mov.w	sl, #0
   255d6:	f04f 0b00 	mov.w	fp, #0
   255da:	9b03      	ldr	r3, [sp, #12]
	for (pfd = fds, i = nfds; i--; pfd++) {
   255dc:	3508      	adds	r5, #8
   255de:	3b01      	subs	r3, #1
   255e0:	9303      	str	r3, [sp, #12]
   255e2:	e7b4      	b.n	2554e <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   255e4:	ea5a 030b 	orrs.w	r3, sl, fp
   255e8:	d016      	beq.n	25618 <z_impl_zsock_poll+0x110>
   255ea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   255ee:	bf08      	it	eq
   255f0:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   255f4:	d010      	beq.n	25618 <z_impl_zsock_poll+0x110>
		int64_t remaining = end - z_tick_get();
   255f6:	f01b ffe9 	bl	415cc <z_tick_get>
   255fa:	9b06      	ldr	r3, [sp, #24]
   255fc:	ebb3 0a00 	subs.w	sl, r3, r0
   25600:	9b07      	ldr	r3, [sp, #28]
   25602:	eb63 0b01 	sbc.w	fp, r3, r1
   25606:	f1ba 0f00 	cmp.w	sl, #0
   2560a:	f17b 0300 	sbcs.w	r3, fp, #0
   2560e:	bfbc      	itt	lt
   25610:	f04f 0a00 	movlt.w	sl, #0
   25614:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   25618:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   2561c:	9909      	ldr	r1, [sp, #36]	; 0x24
   2561e:	ac0b      	add	r4, sp, #44	; 0x2c
   25620:	1b09      	subs	r1, r1, r4
   25622:	4b33      	ldr	r3, [pc, #204]	; (256f0 <z_impl_zsock_poll+0x1e8>)
   25624:	1089      	asrs	r1, r1, #2
   25626:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   25628:	465b      	mov	r3, fp
   2562a:	4652      	mov	r2, sl
   2562c:	4620      	mov	r0, r4
   2562e:	f01c fa13 	bl	41a58 <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   25632:	f100 030b 	add.w	r3, r0, #11
   25636:	2b0b      	cmp	r3, #11
   25638:	4606      	mov	r6, r0
   2563a:	d806      	bhi.n	2564a <z_impl_zsock_poll+0x142>
   2563c:	f640 0581 	movw	r5, #2177	; 0x881
   25640:	40dd      	lsrs	r5, r3
   25642:	43ed      	mvns	r5, r5
   25644:	f015 0501 	ands.w	r5, r5, #1
   25648:	d006      	beq.n	25658 <z_impl_zsock_poll+0x150>
			errno = -ret;
   2564a:	f020 f9cb 	bl	459e4 <__errno>
   2564e:	4276      	negs	r6, r6
   25650:	6006      	str	r6, [r0, #0]
			return -1;
   25652:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25656:	e789      	b.n	2556c <z_impl_zsock_poll+0x64>
		pev = poll_events;
   25658:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   2565a:	46b8      	mov	r8, r7
		ret = 0;
   2565c:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   2565e:	9e05      	ldr	r6, [sp, #20]
   25660:	f1b8 0f00 	cmp.w	r8, #0
   25664:	d11c      	bne.n	256a0 <z_impl_zsock_poll+0x198>
		if (retry) {
   25666:	2d00      	cmp	r5, #0
   25668:	d080      	beq.n	2556c <z_impl_zsock_poll+0x64>
			if (ret > 0) {
   2566a:	2c00      	cmp	r4, #0
   2566c:	f73f af7e 	bgt.w	2556c <z_impl_zsock_poll+0x64>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25670:	ea5a 030b 	orrs.w	r3, sl, fp
   25674:	f43f af7a 	beq.w	2556c <z_impl_zsock_poll+0x64>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25678:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   2567c:	bf08      	it	eq
   2567e:	f1ba 3fff 	cmpeq.w	sl, #4294967295	; 0xffffffff
   25682:	d0cb      	beq.n	2561c <z_impl_zsock_poll+0x114>
				int64_t remaining = end - z_tick_get();
   25684:	f01b ffa2 	bl	415cc <z_tick_get>
   25688:	9b06      	ldr	r3, [sp, #24]
   2568a:	ebb3 0a00 	subs.w	sl, r3, r0
   2568e:	9b07      	ldr	r3, [sp, #28]
   25690:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   25694:	f1ba 0f01 	cmp.w	sl, #1
   25698:	f17b 0300 	sbcs.w	r3, fp, #0
   2569c:	dabe      	bge.n	2561c <z_impl_zsock_poll+0x114>
   2569e:	e765      	b.n	2556c <z_impl_zsock_poll+0x64>
			if (pfd->fd < 0) {
   256a0:	6830      	ldr	r0, [r6, #0]
			pfd->revents = 0;
   256a2:	f8a6 9006 	strh.w	r9, [r6, #6]
			if (pfd->fd < 0) {
   256a6:	2800      	cmp	r0, #0
   256a8:	db1b      	blt.n	256e2 <z_impl_zsock_poll+0x1da>
	ctx = z_get_fd_obj_and_vtable(sock,
   256aa:	a90a      	add	r1, sp, #40	; 0x28
   256ac:	f7fe fd26 	bl	240fc <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   256b0:	4601      	mov	r1, r0
   256b2:	b918      	cbnz	r0, 256bc <z_impl_zsock_poll+0x1b4>
				pfd->revents = ZSOCK_POLLNVAL;
   256b4:	2320      	movs	r3, #32
   256b6:	80f3      	strh	r3, [r6, #6]
				ret++;
   256b8:	3401      	adds	r4, #1
   256ba:	e012      	b.n	256e2 <z_impl_zsock_poll+0x1da>
			result = z_fdtable_call_ioctl(vtable, ctx,
   256bc:	ab09      	add	r3, sp, #36	; 0x24
   256be:	9300      	str	r3, [sp, #0]
   256c0:	f240 1203 	movw	r2, #259	; 0x103
   256c4:	4633      	mov	r3, r6
   256c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   256c8:	f01f fbd9 	bl	44e7e <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   256cc:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   256d0:	4603      	mov	r3, r0
			if (result == -EAGAIN) {
   256d2:	d00a      	beq.n	256ea <z_impl_zsock_poll+0x1e2>
			} else if (result != 0) {
   256d4:	2800      	cmp	r0, #0
   256d6:	f47f af75 	bne.w	255c4 <z_impl_zsock_poll+0xbc>
			if (pfd->revents != 0) {
   256da:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
   256de:	2b00      	cmp	r3, #0
   256e0:	d1ea      	bne.n	256b8 <z_impl_zsock_poll+0x1b0>
		for (pfd = fds, i = nfds; i--; pfd++) {
   256e2:	3608      	adds	r6, #8
   256e4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   256e8:	e7ba      	b.n	25660 <z_impl_zsock_poll+0x158>
				retry = true;
   256ea:	2501      	movs	r5, #1
   256ec:	e7f9      	b.n	256e2 <z_impl_zsock_poll+0x1da>
   256ee:	bf00      	nop
   256f0:	cccccccd 	.word	0xcccccccd

000256f4 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   256f4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   256f6:	4605      	mov	r5, r0
   256f8:	b948      	cbnz	r0, 2570e <socket_offload_dns_register+0x1a>
   256fa:	490c      	ldr	r1, [pc, #48]	; (2572c <socket_offload_dns_register+0x38>)
   256fc:	480c      	ldr	r0, [pc, #48]	; (25730 <socket_offload_dns_register+0x3c>)
   256fe:	2313      	movs	r3, #19
   25700:	4a0c      	ldr	r2, [pc, #48]	; (25734 <socket_offload_dns_register+0x40>)
   25702:	f01e fde5 	bl	442d0 <printk>
   25706:	2113      	movs	r1, #19
   25708:	480a      	ldr	r0, [pc, #40]	; (25734 <socket_offload_dns_register+0x40>)
   2570a:	f01e fffb 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   2570e:	4c0a      	ldr	r4, [pc, #40]	; (25738 <socket_offload_dns_register+0x44>)
   25710:	6822      	ldr	r2, [r4, #0]
   25712:	b14a      	cbz	r2, 25728 <socket_offload_dns_register+0x34>
   25714:	4909      	ldr	r1, [pc, #36]	; (2573c <socket_offload_dns_register+0x48>)
   25716:	4806      	ldr	r0, [pc, #24]	; (25730 <socket_offload_dns_register+0x3c>)
   25718:	2314      	movs	r3, #20
   2571a:	4a06      	ldr	r2, [pc, #24]	; (25734 <socket_offload_dns_register+0x40>)
   2571c:	f01e fdd8 	bl	442d0 <printk>
   25720:	2114      	movs	r1, #20
   25722:	4804      	ldr	r0, [pc, #16]	; (25734 <socket_offload_dns_register+0x40>)
   25724:	f01e ffee 	bl	44704 <assert_post_action>

	dns_offload = ops;
   25728:	6025      	str	r5, [r4, #0]
}
   2572a:	bd38      	pop	{r3, r4, r5, pc}
   2572c:	0005235d 	.word	0x0005235d
   25730:	0004b33b 	.word	0x0004b33b
   25734:	0004c5f8 	.word	0x0004c5f8
   25738:	20024a68 	.word	0x20024a68
   2573c:	0004c633 	.word	0x0004c633

00025740 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   25740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   25744:	4c13      	ldr	r4, [pc, #76]	; (25794 <socket_offload_getaddrinfo+0x54>)
{
   25746:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   25748:	6823      	ldr	r3, [r4, #0]
{
   2574a:	4605      	mov	r5, r0
   2574c:	460e      	mov	r6, r1
   2574e:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   25750:	b94b      	cbnz	r3, 25766 <socket_offload_getaddrinfo+0x26>
   25752:	4911      	ldr	r1, [pc, #68]	; (25798 <socket_offload_getaddrinfo+0x58>)
   25754:	4811      	ldr	r0, [pc, #68]	; (2579c <socket_offload_getaddrinfo+0x5c>)
   25756:	231d      	movs	r3, #29
   25758:	4a11      	ldr	r2, [pc, #68]	; (257a0 <socket_offload_getaddrinfo+0x60>)
   2575a:	f01e fdb9 	bl	442d0 <printk>
   2575e:	211d      	movs	r1, #29
   25760:	480f      	ldr	r0, [pc, #60]	; (257a0 <socket_offload_getaddrinfo+0x60>)
   25762:	f01e ffcf 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   25766:	6823      	ldr	r3, [r4, #0]
   25768:	681b      	ldr	r3, [r3, #0]
   2576a:	b94b      	cbnz	r3, 25780 <socket_offload_getaddrinfo+0x40>
   2576c:	490d      	ldr	r1, [pc, #52]	; (257a4 <socket_offload_getaddrinfo+0x64>)
   2576e:	480b      	ldr	r0, [pc, #44]	; (2579c <socket_offload_getaddrinfo+0x5c>)
   25770:	231e      	movs	r3, #30
   25772:	4a0b      	ldr	r2, [pc, #44]	; (257a0 <socket_offload_getaddrinfo+0x60>)
   25774:	f01e fdac 	bl	442d0 <printk>
   25778:	211e      	movs	r1, #30
   2577a:	4809      	ldr	r0, [pc, #36]	; (257a0 <socket_offload_getaddrinfo+0x60>)
   2577c:	f01e ffc2 	bl	44704 <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   25780:	6823      	ldr	r3, [r4, #0]
   25782:	463a      	mov	r2, r7
   25784:	681c      	ldr	r4, [r3, #0]
   25786:	4631      	mov	r1, r6
   25788:	4643      	mov	r3, r8
   2578a:	4628      	mov	r0, r5
   2578c:	46a4      	mov	ip, r4
}
   2578e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   25792:	4760      	bx	ip
   25794:	20024a68 	.word	0x20024a68
   25798:	0004c668 	.word	0x0004c668
   2579c:	0004b33b 	.word	0x0004b33b
   257a0:	0004c5f8 	.word	0x0004c5f8
   257a4:	0004c674 	.word	0x0004c674

000257a8 <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   257a8:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   257aa:	4c10      	ldr	r4, [pc, #64]	; (257ec <socket_offload_freeaddrinfo+0x44>)
{
   257ac:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   257ae:	6823      	ldr	r3, [r4, #0]
   257b0:	b94b      	cbnz	r3, 257c6 <socket_offload_freeaddrinfo+0x1e>
   257b2:	490f      	ldr	r1, [pc, #60]	; (257f0 <socket_offload_freeaddrinfo+0x48>)
   257b4:	480f      	ldr	r0, [pc, #60]	; (257f4 <socket_offload_freeaddrinfo+0x4c>)
   257b6:	2325      	movs	r3, #37	; 0x25
   257b8:	4a0f      	ldr	r2, [pc, #60]	; (257f8 <socket_offload_freeaddrinfo+0x50>)
   257ba:	f01e fd89 	bl	442d0 <printk>
   257be:	2125      	movs	r1, #37	; 0x25
   257c0:	480d      	ldr	r0, [pc, #52]	; (257f8 <socket_offload_freeaddrinfo+0x50>)
   257c2:	f01e ff9f 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   257c6:	6823      	ldr	r3, [r4, #0]
   257c8:	685b      	ldr	r3, [r3, #4]
   257ca:	b94b      	cbnz	r3, 257e0 <socket_offload_freeaddrinfo+0x38>
   257cc:	490b      	ldr	r1, [pc, #44]	; (257fc <socket_offload_freeaddrinfo+0x54>)
   257ce:	4809      	ldr	r0, [pc, #36]	; (257f4 <socket_offload_freeaddrinfo+0x4c>)
   257d0:	2326      	movs	r3, #38	; 0x26
   257d2:	4a09      	ldr	r2, [pc, #36]	; (257f8 <socket_offload_freeaddrinfo+0x50>)
   257d4:	f01e fd7c 	bl	442d0 <printk>
   257d8:	2126      	movs	r1, #38	; 0x26
   257da:	4807      	ldr	r0, [pc, #28]	; (257f8 <socket_offload_freeaddrinfo+0x50>)
   257dc:	f01e ff92 	bl	44704 <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   257e0:	6823      	ldr	r3, [r4, #0]
   257e2:	4628      	mov	r0, r5
}
   257e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   257e8:	685b      	ldr	r3, [r3, #4]
   257ea:	4718      	bx	r3
   257ec:	20024a68 	.word	0x20024a68
   257f0:	0004c668 	.word	0x0004c668
   257f4:	0004b33b 	.word	0x0004b33b
   257f8:	0004c5f8 	.word	0x0004c5f8
   257fc:	0004c64e 	.word	0x0004c64e

00025800 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   25800:	4b08      	ldr	r3, [pc, #32]	; (25824 <get_flash_area_from_id+0x24>)
{
   25802:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   25804:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   25806:	4b08      	ldr	r3, [pc, #32]	; (25828 <get_flash_area_from_id+0x28>)
   25808:	6819      	ldr	r1, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   2580a:	2300      	movs	r3, #0
   2580c:	429d      	cmp	r5, r3
   2580e:	dc02      	bgt.n	25816 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   25810:	2200      	movs	r2, #0
}
   25812:	4610      	mov	r0, r2
   25814:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   25816:	011c      	lsls	r4, r3, #4
   25818:	190a      	adds	r2, r1, r4
   2581a:	5d0c      	ldrb	r4, [r1, r4]
   2581c:	4284      	cmp	r4, r0
   2581e:	d0f8      	beq.n	25812 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   25820:	3301      	adds	r3, #1
   25822:	e7f3      	b.n	2580c <get_flash_area_from_id+0xc>
   25824:	00049c8c 	.word	0x00049c8c
   25828:	20020734 	.word	0x20020734

0002582c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   2582c:	4b08      	ldr	r3, [pc, #32]	; (25850 <flash_area_open+0x24>)
{
   2582e:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   25830:	681b      	ldr	r3, [r3, #0]
{
   25832:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   25834:	b12b      	cbz	r3, 25842 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   25836:	f7ff ffe3 	bl	25800 <get_flash_area_from_id>
	if (area == NULL) {
   2583a:	b128      	cbz	r0, 25848 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   2583c:	6020      	str	r0, [r4, #0]
	return 0;
   2583e:	2000      	movs	r0, #0
}
   25840:	bd10      	pop	{r4, pc}
		return -EACCES;
   25842:	f06f 000c 	mvn.w	r0, #12
   25846:	e7fb      	b.n	25840 <flash_area_open+0x14>
		return -ENOENT;
   25848:	f06f 0001 	mvn.w	r0, #1
   2584c:	e7f8      	b.n	25840 <flash_area_open+0x14>
   2584e:	bf00      	nop
   25850:	20020734 	.word	0x20020734

00025854 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   25854:	b530      	push	{r4, r5, lr}
   25856:	b089      	sub	sp, #36	; 0x24
   25858:	460c      	mov	r4, r1
   2585a:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   2585c:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   2585e:	f7ff ffcf 	bl	25800 <get_flash_area_from_id>
	if (fa == NULL) {
   25862:	b1b8      	cbz	r0, 25894 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   25864:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   25866:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   25868:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   2586a:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   2586c:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   2586e:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   25872:	2300      	movs	r3, #0
   25874:	9305      	str	r3, [sp, #20]
	cb_data->status = 0;
   25876:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2587a:	f018 ff61 	bl	3e740 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   2587e:	b160      	cbz	r0, 2589a <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   25880:	aa01      	add	r2, sp, #4
   25882:	4907      	ldr	r1, [pc, #28]	; (258a0 <flash_area_get_sectors+0x4c>)
   25884:	f021 f873 	bl	4696e <flash_page_foreach>
	if (cb_data->status == 0) {
   25888:	9807      	ldr	r0, [sp, #28]
   2588a:	b908      	cbnz	r0, 25890 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   2588c:	9b05      	ldr	r3, [sp, #20]
   2588e:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   25890:	b009      	add	sp, #36	; 0x24
   25892:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25894:	f06f 0015 	mvn.w	r0, #21
   25898:	e7fa      	b.n	25890 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   2589a:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   2589e:	e7f7      	b.n	25890 <flash_area_get_sectors+0x3c>
   258a0:	00045009 	.word	0x00045009

000258a4 <stream_flash_erase_page>:
#include <storage/stream_flash.h>

#ifdef CONFIG_STREAM_FLASH_ERASE

int stream_flash_erase_page(struct stream_flash_ctx *ctx, off_t off)
{
   258a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   258a6:	4606      	mov	r6, r0
	int rc;
	struct flash_pages_info page;

	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   258a8:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   258aa:	aa01      	add	r2, sp, #4
   258ac:	f021 f85b 	bl	46966 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   258b0:	4604      	mov	r4, r0
   258b2:	b188      	cbz	r0, 258d8 <stream_flash_erase_page+0x34>
		LOG_ERR("Error %d while getting page info", rc);
   258b4:	2301      	movs	r3, #1
   258b6:	f04f 0000 	mov.w	r0, #0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   258ba:	4a1f      	ldr	r2, [pc, #124]	; (25938 <stream_flash_erase_page+0x94>)
   258bc:	f363 0007 	bfi	r0, r3, #0, #8
   258c0:	4b1e      	ldr	r3, [pc, #120]	; (2593c <stream_flash_erase_page+0x98>)
   258c2:	491f      	ldr	r1, [pc, #124]	; (25940 <stream_flash_erase_page+0x9c>)
   258c4:	1a9b      	subs	r3, r3, r2
   258c6:	4622      	mov	r2, r4
   258c8:	08db      	lsrs	r3, r3, #3
   258ca:	f363 108f 	bfi	r0, r3, #6, #10
	flash_write_protection_set(ctx->fdev, false);
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
	flash_write_protection_set(ctx->fdev, true);

	if (rc != 0) {
		LOG_ERR("Error %d while erasing page", rc);
   258ce:	f01e ff2a 	bl	44726 <log_string_sync>
	}

	return rc;
}
   258d2:	4620      	mov	r0, r4
   258d4:	b004      	add	sp, #16
   258d6:	bd70      	pop	{r4, r5, r6, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   258d8:	9a01      	ldr	r2, [sp, #4]
   258da:	6a33      	ldr	r3, [r6, #32]
   258dc:	4293      	cmp	r3, r2
   258de:	d0f8      	beq.n	258d2 <stream_flash_erase_page+0x2e>
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   258e0:	2303      	movs	r3, #3
   258e2:	f04f 0000 	mov.w	r0, #0
   258e6:	4d15      	ldr	r5, [pc, #84]	; (2593c <stream_flash_erase_page+0x98>)
   258e8:	f363 0007 	bfi	r0, r3, #0, #8
   258ec:	4b12      	ldr	r3, [pc, #72]	; (25938 <stream_flash_erase_page+0x94>)
	ctx->last_erased_page_start_offset = page.start_offset;
   258ee:	6232      	str	r2, [r6, #32]
	LOG_INF("Erasing page at offset 0x%08lx", (long)page.start_offset);
   258f0:	1aed      	subs	r5, r5, r3
   258f2:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   258f6:	f365 108f 	bfi	r0, r5, #6, #10
   258fa:	4912      	ldr	r1, [pc, #72]	; (25944 <stream_flash_erase_page+0xa0>)
   258fc:	f01e ff13 	bl	44726 <log_string_sync>
	flash_write_protection_set(ctx->fdev, false);
   25900:	4621      	mov	r1, r4
   25902:	68f0      	ldr	r0, [r6, #12]
   25904:	f01f fc17 	bl	45136 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   25908:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   2590c:	68f0      	ldr	r0, [r6, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   2590e:	6883      	ldr	r3, [r0, #8]
   25910:	689b      	ldr	r3, [r3, #8]
   25912:	4798      	blx	r3
   25914:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   25916:	2101      	movs	r1, #1
   25918:	68f0      	ldr	r0, [r6, #12]
   2591a:	f01f fc0c 	bl	45136 <flash_write_protection_set>
	if (rc != 0) {
   2591e:	2c00      	cmp	r4, #0
   25920:	d0d7      	beq.n	258d2 <stream_flash_erase_page+0x2e>
		LOG_ERR("Error %d while erasing page", rc);
   25922:	f04f 0000 	mov.w	r0, #0
   25926:	2301      	movs	r3, #1
   25928:	f363 0007 	bfi	r0, r3, #0, #8
   2592c:	f365 108f 	bfi	r0, r5, #6, #10
   25930:	4622      	mov	r2, r4
   25932:	4905      	ldr	r1, [pc, #20]	; (25948 <stream_flash_erase_page+0xa4>)
   25934:	e7cb      	b.n	258ce <stream_flash_erase_page+0x2a>
   25936:	bf00      	nop
   25938:	00049788 	.word	0x00049788
   2593c:	00049788 	.word	0x00049788
   25940:	0004c729 	.word	0x0004c729
   25944:	0004c74a 	.word	0x0004c74a
   25948:	0004c769 	.word	0x0004c769

0002594c <flash_sync>:

#endif /* CONFIG_STREAM_FLASH_ERASE */

static int flash_sync(struct stream_flash_ctx *ctx)
{
   2594c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	size_t write_addr = ctx->offset + ctx->bytes_written;


	if (IS_ENABLED(CONFIG_STREAM_FLASH_ERASE)) {
		if (ctx->buf_bytes == 0) {
   2594e:	6884      	ldr	r4, [r0, #8]
{
   25950:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   25952:	b1c4      	cbz	r4, 25986 <flash_sync+0x3a>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   25954:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
			return 0;
		}

		rc = stream_flash_erase_page(ctx,
					     write_addr + ctx->buf_bytes - 1);
   25958:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2595a:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   2595c:	19a1      	adds	r1, r4, r6
   2595e:	f7ff ffa1 	bl	258a4 <stream_flash_erase_page>
		if (rc < 0) {
   25962:	1e04      	subs	r4, r0, #0
   25964:	da11      	bge.n	2598a <flash_sync+0x3e>
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   25966:	2301      	movs	r3, #1
   25968:	f04f 0000 	mov.w	r0, #0
   2596c:	4a37      	ldr	r2, [pc, #220]	; (25a4c <flash_sync+0x100>)
   2596e:	f363 0007 	bfi	r0, r3, #0, #8
   25972:	4b37      	ldr	r3, [pc, #220]	; (25a50 <flash_sync+0x104>)
   25974:	4937      	ldr	r1, [pc, #220]	; (25a54 <flash_sync+0x108>)
   25976:	1a9b      	subs	r3, r3, r2
   25978:	08db      	lsrs	r3, r3, #3
   2597a:	f363 108f 	bfi	r0, r3, #6, #10
   2597e:	4622      	mov	r2, r4
   25980:	4633      	mov	r3, r6
	flash_write_protection_set(ctx->fdev, false);
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
	flash_write_protection_set(ctx->fdev, true);

	if (rc != 0) {
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   25982:	f01e fed0 	bl	44726 <log_string_sync>

	ctx->bytes_written += ctx->buf_bytes;
	ctx->buf_bytes = 0U;

	return rc;
}
   25986:	4620      	mov	r0, r4
   25988:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2598a:	2100      	movs	r1, #0
   2598c:	68e8      	ldr	r0, [r5, #12]
   2598e:	f01f fbd2 	bl	45136 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   25992:	68e8      	ldr	r0, [r5, #12]
   25994:	682a      	ldr	r2, [r5, #0]
   25996:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   25998:	6881      	ldr	r1, [r0, #8]
   2599a:	684c      	ldr	r4, [r1, #4]
   2599c:	4631      	mov	r1, r6
   2599e:	47a0      	blx	r4
   259a0:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   259a2:	2101      	movs	r1, #1
   259a4:	68e8      	ldr	r0, [r5, #12]
   259a6:	f01f fbc6 	bl	45136 <flash_write_protection_set>
	if (rc != 0) {
   259aa:	b174      	cbz	r4, 259ca <flash_sync+0x7e>
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   259ac:	2301      	movs	r3, #1
   259ae:	f04f 0000 	mov.w	r0, #0
   259b2:	4a26      	ldr	r2, [pc, #152]	; (25a4c <flash_sync+0x100>)
   259b4:	f363 0007 	bfi	r0, r3, #0, #8
   259b8:	4b25      	ldr	r3, [pc, #148]	; (25a50 <flash_sync+0x104>)
   259ba:	4927      	ldr	r1, [pc, #156]	; (25a58 <flash_sync+0x10c>)
   259bc:	1a9b      	subs	r3, r3, r2
   259be:	08db      	lsrs	r3, r3, #3
   259c0:	f363 108f 	bfi	r0, r3, #6, #10
   259c4:	4622      	mov	r2, r4
   259c6:	4633      	mov	r3, r6
   259c8:	e7db      	b.n	25982 <flash_sync+0x36>
	if (ctx->callback) {
   259ca:	69eb      	ldr	r3, [r5, #28]
   259cc:	b953      	cbnz	r3, 259e4 <flash_sync+0x98>
	ctx->bytes_written += ctx->buf_bytes;
   259ce:	692b      	ldr	r3, [r5, #16]
   259d0:	68aa      	ldr	r2, [r5, #8]
   259d2:	4413      	add	r3, r2
   259d4:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   259d6:	2300      	movs	r3, #0
   259d8:	60ab      	str	r3, [r5, #8]
	return rc;
   259da:	e7d4      	b.n	25986 <flash_sync+0x3a>
			ctx->buf[i] = ~ctx->buf[i];
   259dc:	5d13      	ldrb	r3, [r2, r4]
   259de:	43db      	mvns	r3, r3
   259e0:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   259e2:	3401      	adds	r4, #1
   259e4:	68ab      	ldr	r3, [r5, #8]
   259e6:	682a      	ldr	r2, [r5, #0]
   259e8:	429c      	cmp	r4, r3
   259ea:	d3f7      	bcc.n	259dc <flash_sync+0x90>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   259ec:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   259ee:	6881      	ldr	r1, [r0, #8]
   259f0:	680c      	ldr	r4, [r1, #0]
   259f2:	4631      	mov	r1, r6
   259f4:	47a0      	blx	r4
		if (rc != 0) {
   259f6:	4604      	mov	r4, r0
   259f8:	b178      	cbz	r0, 25a1a <flash_sync+0xce>
			LOG_ERR("flash read failed: %d", rc);
   259fa:	2301      	movs	r3, #1
   259fc:	f04f 0000 	mov.w	r0, #0
   25a00:	4a12      	ldr	r2, [pc, #72]	; (25a4c <flash_sync+0x100>)
   25a02:	f363 0007 	bfi	r0, r3, #0, #8
   25a06:	4b12      	ldr	r3, [pc, #72]	; (25a50 <flash_sync+0x104>)
   25a08:	4914      	ldr	r1, [pc, #80]	; (25a5c <flash_sync+0x110>)
   25a0a:	1a9b      	subs	r3, r3, r2
   25a0c:	08db      	lsrs	r3, r3, #3
   25a0e:	f363 108f 	bfi	r0, r3, #6, #10
   25a12:	4622      	mov	r2, r4
   25a14:	f01e fe87 	bl	44726 <log_string_sync>
			return rc;
   25a18:	e7b5      	b.n	25986 <flash_sync+0x3a>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   25a1a:	69eb      	ldr	r3, [r5, #28]
   25a1c:	4632      	mov	r2, r6
   25a1e:	68a9      	ldr	r1, [r5, #8]
   25a20:	6828      	ldr	r0, [r5, #0]
   25a22:	4798      	blx	r3
		if (rc != 0) {
   25a24:	4604      	mov	r4, r0
   25a26:	2800      	cmp	r0, #0
   25a28:	d0d1      	beq.n	259ce <flash_sync+0x82>
			LOG_ERR("callback failed: %d", rc);
   25a2a:	2301      	movs	r3, #1
   25a2c:	f04f 0000 	mov.w	r0, #0
   25a30:	4a06      	ldr	r2, [pc, #24]	; (25a4c <flash_sync+0x100>)
   25a32:	f363 0007 	bfi	r0, r3, #0, #8
   25a36:	4b06      	ldr	r3, [pc, #24]	; (25a50 <flash_sync+0x104>)
   25a38:	4909      	ldr	r1, [pc, #36]	; (25a60 <flash_sync+0x114>)
   25a3a:	1a9b      	subs	r3, r3, r2
   25a3c:	08db      	lsrs	r3, r3, #3
   25a3e:	f363 108f 	bfi	r0, r3, #6, #10
   25a42:	4622      	mov	r2, r4
   25a44:	f01e fe6f 	bl	44726 <log_string_sync>
   25a48:	e7c1      	b.n	259ce <flash_sync+0x82>
   25a4a:	bf00      	nop
   25a4c:	00049788 	.word	0x00049788
   25a50:	00049788 	.word	0x00049788
   25a54:	0004c6a0 	.word	0x0004c6a0
   25a58:	0004c6ce 	.word	0x0004c6ce
   25a5c:	0004c6f2 	.word	0x0004c6f2
   25a60:	0004c708 	.word	0x0004c708

00025a64 <stream_flash_init>:
}

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   25a64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a68:	460e      	mov	r6, r1
   25a6a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
   25a6e:	4692      	mov	sl, r2
   25a70:	4699      	mov	r9, r3
	if (!ctx || !fdev || !buf) {
   25a72:	4604      	mov	r4, r0
   25a74:	b1d8      	cbz	r0, 25aae <stream_flash_init+0x4a>
   25a76:	b1d1      	cbz	r1, 25aae <stream_flash_init+0x4a>
   25a78:	b1ca      	cbz	r2, 25aae <stream_flash_init+0x4a>
		return -EFAULT;
	}

	size_t layout_size = 0;
   25a7a:	2300      	movs	r3, #0
	size_t total_size = 0;
	const struct flash_pages_layout *layout;
	const struct flash_driver_api *api = fdev->api;

	if (buf_len % flash_get_write_block_size(fdev)) {
   25a7c:	4608      	mov	r0, r1
	size_t layout_size = 0;
   25a7e:	9300      	str	r3, [sp, #0]
	const struct flash_driver_api *api = fdev->api;
   25a80:	f8d1 b008 	ldr.w	fp, [r1, #8]
	if (buf_len % flash_get_write_block_size(fdev)) {
   25a84:	f01f fb5a 	bl	4513c <flash_get_write_block_size>
   25a88:	fbb9 f5f0 	udiv	r5, r9, r0
   25a8c:	fb05 9510 	mls	r5, r5, r0, r9
   25a90:	b185      	cbz	r5, 25ab4 <stream_flash_init+0x50>
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   25a92:	2301      	movs	r3, #1
   25a94:	f04f 0000 	mov.w	r0, #0
   25a98:	4a33      	ldr	r2, [pc, #204]	; (25b68 <stream_flash_init+0x104>)
   25a9a:	f363 0007 	bfi	r0, r3, #0, #8
   25a9e:	4b33      	ldr	r3, [pc, #204]	; (25b6c <stream_flash_init+0x108>)
   25aa0:	4933      	ldr	r1, [pc, #204]	; (25b70 <stream_flash_init+0x10c>)
   25aa2:	1a9b      	subs	r3, r3, r2
   25aa4:	08db      	lsrs	r3, r3, #3
   25aa6:	f363 108f 	bfi	r0, r3, #6, #10

	}

	if ((offset + size) > total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
   25aaa:	f01e fe3c 	bl	44726 <log_string_sync>
		return -EFAULT;
   25aae:	f06f 000d 	mvn.w	r0, #13
   25ab2:	e056      	b.n	25b62 <stream_flash_init+0xfe>
	api->page_layout(fdev, &layout, &layout_size);
   25ab4:	f8db 3014 	ldr.w	r3, [fp, #20]
   25ab8:	466a      	mov	r2, sp
   25aba:	4630      	mov	r0, r6
   25abc:	a901      	add	r1, sp, #4
   25abe:	4798      	blx	r3
	for (int i = 0; i < layout_size; i++) {
   25ac0:	e9dd bc00 	ldrd	fp, ip, [sp]
   25ac4:	4628      	mov	r0, r5
   25ac6:	4663      	mov	r3, ip
   25ac8:	462a      	mov	r2, r5
   25aca:	4593      	cmp	fp, r2
   25acc:	d112      	bne.n	25af4 <stream_flash_init+0x90>
   25ace:	b100      	cbz	r0, 25ad2 <stream_flash_init+0x6e>
   25ad0:	9301      	str	r3, [sp, #4]
	if ((offset + size) > total_size ||
   25ad2:	eb07 0308 	add.w	r3, r7, r8
   25ad6:	42ab      	cmp	r3, r5
   25ad8:	d927      	bls.n	25b2a <stream_flash_init+0xc6>
		LOG_ERR("Incorrect parameter");
   25ada:	2301      	movs	r3, #1
   25adc:	f04f 0000 	mov.w	r0, #0
   25ae0:	4a21      	ldr	r2, [pc, #132]	; (25b68 <stream_flash_init+0x104>)
   25ae2:	f363 0007 	bfi	r0, r3, #0, #8
   25ae6:	4b21      	ldr	r3, [pc, #132]	; (25b6c <stream_flash_init+0x108>)
   25ae8:	4922      	ldr	r1, [pc, #136]	; (25b74 <stream_flash_init+0x110>)
   25aea:	1a9b      	subs	r3, r3, r2
   25aec:	08db      	lsrs	r3, r3, #3
   25aee:	f363 108f 	bfi	r0, r3, #6, #10
   25af2:	e7da      	b.n	25aaa <stream_flash_init+0x46>
		total_size += layout->pages_count * layout->pages_size;
   25af4:	f8d3 e004 	ldr.w	lr, [r3, #4]
   25af8:	f85c 1032 	ldr.w	r1, [ip, r2, lsl #3]
		if (buf_len > layout->pages_size) {
   25afc:	45ce      	cmp	lr, r9
		total_size += layout->pages_count * layout->pages_size;
   25afe:	fb01 550e 	mla	r5, r1, lr, r5
		if (buf_len > layout->pages_size) {
   25b02:	d20e      	bcs.n	25b22 <stream_flash_init+0xbe>
   25b04:	b100      	cbz	r0, 25b08 <stream_flash_init+0xa4>
   25b06:	9301      	str	r3, [sp, #4]
			LOG_ERR("Buffer size is bigger than page");
   25b08:	2301      	movs	r3, #1
   25b0a:	f04f 0000 	mov.w	r0, #0
   25b0e:	4a16      	ldr	r2, [pc, #88]	; (25b68 <stream_flash_init+0x104>)
   25b10:	f363 0007 	bfi	r0, r3, #0, #8
   25b14:	4b15      	ldr	r3, [pc, #84]	; (25b6c <stream_flash_init+0x108>)
   25b16:	4918      	ldr	r1, [pc, #96]	; (25b78 <stream_flash_init+0x114>)
   25b18:	1a9b      	subs	r3, r3, r2
   25b1a:	08db      	lsrs	r3, r3, #3
   25b1c:	f363 108f 	bfi	r0, r3, #6, #10
   25b20:	e7c3      	b.n	25aaa <stream_flash_init+0x46>
		layout++;
   25b22:	3308      	adds	r3, #8
	for (int i = 0; i < layout_size; i++) {
   25b24:	3201      	adds	r2, #1
   25b26:	2001      	movs	r0, #1
   25b28:	e7cf      	b.n	25aca <stream_flash_init+0x66>
	    offset % flash_get_write_block_size(fdev)) {
   25b2a:	4630      	mov	r0, r6
   25b2c:	f01f fb06 	bl	4513c <flash_get_write_block_size>
   25b30:	fbb7 f3f0 	udiv	r3, r7, r0
   25b34:	fb03 7010 	mls	r0, r3, r0, r7
	if ((offset + size) > total_size ||
   25b38:	2800      	cmp	r0, #0
   25b3a:	d1ce      	bne.n	25ada <stream_flash_init+0x76>
		return -EFAULT;
	}

	ctx->fdev = fdev;
   25b3c:	60e6      	str	r6, [r4, #12]
	ctx->buf = buf;
	ctx->buf_len = buf_len;
   25b3e:	e9c4 a900 	strd	sl, r9, [r4]
	ctx->bytes_written = 0;
   25b42:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   25b44:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   25b46:	6167      	str	r7, [r4, #20]
	ctx->available = (size == 0 ? total_size - offset : size);
   25b48:	f1b8 0f00 	cmp.w	r8, #0
   25b4c:	d101      	bne.n	25b52 <stream_flash_init+0xee>
   25b4e:	eba5 0807 	sub.w	r8, r5, r7
	ctx->callback = cb;
   25b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38

#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
   25b54:	2000      	movs	r0, #0
	ctx->callback = cb;
   25b56:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   25b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	ctx->available = (size == 0 ? total_size - offset : size);
   25b5c:	f8c4 8018 	str.w	r8, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   25b60:	6223      	str	r3, [r4, #32]
}
   25b62:	b003      	add	sp, #12
   25b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b68:	00049788 	.word	0x00049788
   25b6c:	00049788 	.word	0x00049788
   25b70:	0004c785 	.word	0x0004c785
   25b74:	0004c7dc 	.word	0x0004c7dc
   25b78:	0004c7bc 	.word	0x0004c7bc

00025b7c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   25b7c:	4b0f      	ldr	r3, [pc, #60]	; (25bbc <settings_save_one+0x40>)
{
   25b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   25b82:	681c      	ldr	r4, [r3, #0]
{
   25b84:	4606      	mov	r6, r0
   25b86:	460f      	mov	r7, r1
   25b88:	4690      	mov	r8, r2
	if (!cs) {
   25b8a:	b1a4      	cbz	r4, 25bb6 <settings_save_one+0x3a>
	return z_impl_k_mutex_lock(mutex, timeout);
   25b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25b94:	480a      	ldr	r0, [pc, #40]	; (25bc0 <settings_save_one+0x44>)
   25b96:	f019 fa23 	bl	3efe0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   25b9a:	6863      	ldr	r3, [r4, #4]
   25b9c:	463a      	mov	r2, r7
   25b9e:	689d      	ldr	r5, [r3, #8]
   25ba0:	4631      	mov	r1, r6
   25ba2:	4643      	mov	r3, r8
   25ba4:	4620      	mov	r0, r4
   25ba6:	47a8      	blx	r5
   25ba8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   25baa:	4805      	ldr	r0, [pc, #20]	; (25bc0 <settings_save_one+0x44>)
   25bac:	f019 fb16 	bl	3f1dc <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   25bb0:	4620      	mov	r0, r4
   25bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   25bb6:	f06f 0401 	mvn.w	r4, #1
   25bba:	e7f9      	b.n	25bb0 <settings_save_one+0x34>
   25bbc:	20024a74 	.word	0x20024a74
   25bc0:	20020c94 	.word	0x20020c94

00025bc4 <settings_src_register>:
	parent->next = child;
   25bc4:	2300      	movs	r3, #0
   25bc6:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   25bc8:	4b04      	ldr	r3, [pc, #16]	; (25bdc <settings_src_register+0x18>)
   25bca:	685a      	ldr	r2, [r3, #4]
   25bcc:	b912      	cbnz	r2, 25bd4 <settings_src_register+0x10>
	list->head = node;
   25bce:	e9c3 0000 	strd	r0, r0, [r3]
   25bd2:	4770      	bx	lr
	parent->next = child;
   25bd4:	6010      	str	r0, [r2, #0]
	list->tail = node;
   25bd6:	6058      	str	r0, [r3, #4]
}
   25bd8:	4770      	bx	lr
   25bda:	bf00      	nop
   25bdc:	20024a6c 	.word	0x20024a6c

00025be0 <settings_dst_register>:
	settings_save_dst = cs;
   25be0:	4b01      	ldr	r3, [pc, #4]	; (25be8 <settings_dst_register+0x8>)
   25be2:	6018      	str	r0, [r3, #0]
}
   25be4:	4770      	bx	lr
   25be6:	bf00      	nop
   25be8:	20024a74 	.word	0x20024a74

00025bec <settings_load_subtree>:
	const struct settings_load_arg arg = {
   25bec:	2300      	movs	r3, #0
{
   25bee:	b530      	push	{r4, r5, lr}
   25bf0:	b085      	sub	sp, #20
   25bf2:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   25bf4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   25bf8:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   25bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25c02:	480b      	ldr	r0, [pc, #44]	; (25c30 <settings_load_subtree+0x44>)
   25c04:	f019 f9ec 	bl	3efe0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   25c08:	4b0a      	ldr	r3, [pc, #40]	; (25c34 <settings_load_subtree+0x48>)
   25c0a:	681c      	ldr	r4, [r3, #0]
   25c0c:	b134      	cbz	r4, 25c1c <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   25c0e:	6863      	ldr	r3, [r4, #4]
   25c10:	4620      	mov	r0, r4
   25c12:	681b      	ldr	r3, [r3, #0]
   25c14:	a901      	add	r1, sp, #4
   25c16:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25c18:	6824      	ldr	r4, [r4, #0]
	return node->next;
   25c1a:	e7f7      	b.n	25c0c <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   25c1c:	4628      	mov	r0, r5
   25c1e:	f000 f8c7 	bl	25db0 <settings_commit_subtree>
   25c22:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   25c24:	4802      	ldr	r0, [pc, #8]	; (25c30 <settings_load_subtree+0x44>)
   25c26:	f019 fad9 	bl	3f1dc <z_impl_k_mutex_unlock>
}
   25c2a:	4620      	mov	r0, r4
   25c2c:	b005      	add	sp, #20
   25c2e:	bd30      	pop	{r4, r5, pc}
   25c30:	20020c94 	.word	0x20020c94
   25c34:	20024a6c 	.word	0x20024a6c

00025c38 <settings_store_init>:
	list->head = NULL;
   25c38:	2200      	movs	r2, #0
   25c3a:	4b02      	ldr	r3, [pc, #8]	; (25c44 <settings_store_init+0xc>)
	list->tail = NULL;
   25c3c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   25c40:	4770      	bx	lr
   25c42:	bf00      	nop
   25c44:	20024a6c 	.word	0x20024a6c

00025c48 <settings_init>:
	list->head = NULL;
   25c48:	2200      	movs	r2, #0
   25c4a:	4b02      	ldr	r3, [pc, #8]	; (25c54 <settings_init+0xc>)
	list->tail = NULL;
   25c4c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   25c50:	f7ff bff2 	b.w	25c38 <settings_store_init>
   25c54:	20024a78 	.word	0x20024a78

00025c58 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   25c58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25c5c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   25c5e:	460e      	mov	r6, r1
   25c60:	b109      	cbz	r1, 25c66 <settings_parse_and_lookup+0xe>
		*next = NULL;
   25c62:	2300      	movs	r3, #0
   25c64:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25c66:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 25d10 <settings_parse_and_lookup+0xb8>
   25c6a:	2500      	movs	r5, #0
   25c6c:	46c2      	mov	sl, r8
   25c6e:	4c23      	ldr	r4, [pc, #140]	; (25cfc <settings_parse_and_lookup+0xa4>)
   25c70:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 25d14 <settings_parse_and_lookup+0xbc>
   25c74:	4544      	cmp	r4, r8
   25c76:	d90c      	bls.n	25c92 <settings_parse_and_lookup+0x3a>
   25c78:	4921      	ldr	r1, [pc, #132]	; (25d00 <settings_parse_and_lookup+0xa8>)
   25c7a:	2394      	movs	r3, #148	; 0x94
   25c7c:	464a      	mov	r2, r9
   25c7e:	4821      	ldr	r0, [pc, #132]	; (25d04 <settings_parse_and_lookup+0xac>)
   25c80:	f01e fb26 	bl	442d0 <printk>
   25c84:	4820      	ldr	r0, [pc, #128]	; (25d08 <settings_parse_and_lookup+0xb0>)
   25c86:	f01e fb23 	bl	442d0 <printk>
   25c8a:	2194      	movs	r1, #148	; 0x94
   25c8c:	4648      	mov	r0, r9
   25c8e:	f01e fd39 	bl	44704 <assert_post_action>
   25c92:	4554      	cmp	r4, sl
   25c94:	d308      	bcc.n	25ca8 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25c96:	4b1d      	ldr	r3, [pc, #116]	; (25d0c <settings_parse_and_lookup+0xb4>)
   25c98:	681c      	ldr	r4, [r3, #0]
   25c9a:	b10c      	cbz	r4, 25ca0 <settings_parse_and_lookup+0x48>
   25c9c:	3c14      	subs	r4, #20
   25c9e:	b9c4      	cbnz	r4, 25cd2 <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   25ca0:	4628      	mov	r0, r5
   25ca2:	b002      	add	sp, #8
   25ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25ca8:	aa01      	add	r2, sp, #4
   25caa:	6821      	ldr	r1, [r4, #0]
   25cac:	4638      	mov	r0, r7
   25cae:	f01f fab7 	bl	45220 <settings_name_steq>
   25cb2:	b160      	cbz	r0, 25cce <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   25cb4:	b925      	cbnz	r5, 25cc0 <settings_parse_and_lookup+0x68>
			if (next) {
   25cb6:	b10e      	cbz	r6, 25cbc <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   25cb8:	9b01      	ldr	r3, [sp, #4]
   25cba:	6033      	str	r3, [r6, #0]
   25cbc:	4625      	mov	r5, r4
   25cbe:	e006      	b.n	25cce <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   25cc0:	2200      	movs	r2, #0
   25cc2:	6829      	ldr	r1, [r5, #0]
   25cc4:	6820      	ldr	r0, [r4, #0]
   25cc6:	f01f faab 	bl	45220 <settings_name_steq>
   25cca:	2800      	cmp	r0, #0
   25ccc:	d1f3      	bne.n	25cb6 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25cce:	3414      	adds	r4, #20
   25cd0:	e7d0      	b.n	25c74 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   25cd2:	aa01      	add	r2, sp, #4
   25cd4:	6821      	ldr	r1, [r4, #0]
   25cd6:	4638      	mov	r0, r7
   25cd8:	f01f faa2 	bl	45220 <settings_name_steq>
   25cdc:	b160      	cbz	r0, 25cf8 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   25cde:	b925      	cbnz	r5, 25cea <settings_parse_and_lookup+0x92>
			if (next) {
   25ce0:	b10e      	cbz	r6, 25ce6 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   25ce2:	9b01      	ldr	r3, [sp, #4]
   25ce4:	6033      	str	r3, [r6, #0]
   25ce6:	4625      	mov	r5, r4
   25ce8:	e006      	b.n	25cf8 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   25cea:	2200      	movs	r2, #0
   25cec:	6829      	ldr	r1, [r5, #0]
   25cee:	6820      	ldr	r0, [r4, #0]
   25cf0:	f01f fa96 	bl	45220 <settings_name_steq>
   25cf4:	2800      	cmp	r0, #0
   25cf6:	d1f3      	bne.n	25ce0 <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25cf8:	6964      	ldr	r4, [r4, #20]
   25cfa:	e7ce      	b.n	25c9a <settings_parse_and_lookup+0x42>
   25cfc:	00049760 	.word	0x00049760
   25d00:	0004c847 	.word	0x0004c847
   25d04:	0004b33b 	.word	0x0004b33b
   25d08:	0004c5d9 	.word	0x0004c5d9
   25d0c:	20024a78 	.word	0x20024a78
   25d10:	00049788 	.word	0x00049788
   25d14:	0004c815 	.word	0x0004c815

00025d18 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   25d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25d1c:	b085      	sub	sp, #20
   25d1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   25d20:	4605      	mov	r5, r0
   25d22:	460e      	mov	r6, r1
   25d24:	4617      	mov	r7, r2
   25d26:	4698      	mov	r8, r3
	int rc;
	const char *name_key = name;
   25d28:	9003      	str	r0, [sp, #12]

	if (load_arg && load_arg->subtree &&
   25d2a:	b1b4      	cbz	r4, 25d5a <settings_call_set_handler+0x42>
   25d2c:	6821      	ldr	r1, [r4, #0]
   25d2e:	b179      	cbz	r1, 25d50 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25d30:	aa03      	add	r2, sp, #12
   25d32:	f01f fa75 	bl	45220 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   25d36:	b958      	cbnz	r0, 25d50 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   25d38:	2000      	movs	r0, #0
   25d3a:	e006      	b.n	25d4a <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25d3c:	68a3      	ldr	r3, [r4, #8]
   25d3e:	463a      	mov	r2, r7
   25d40:	9300      	str	r3, [sp, #0]
   25d42:	4631      	mov	r1, r6
   25d44:	4643      	mov	r3, r8
   25d46:	9803      	ldr	r0, [sp, #12]
   25d48:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   25d4a:	b005      	add	sp, #20
   25d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
   25d50:	f8d4 9004 	ldr.w	r9, [r4, #4]
   25d54:	f1b9 0f00 	cmp.w	r9, #0
   25d58:	d1f0      	bne.n	25d3c <settings_call_set_handler+0x24>
		ch = settings_parse_and_lookup(name, &name_key);
   25d5a:	a903      	add	r1, sp, #12
   25d5c:	4628      	mov	r0, r5
   25d5e:	f7ff ff7b 	bl	25c58 <settings_parse_and_lookup>
		if (!ch) {
   25d62:	2800      	cmp	r0, #0
   25d64:	d0e8      	beq.n	25d38 <settings_call_set_handler+0x20>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   25d66:	6884      	ldr	r4, [r0, #8]
   25d68:	4631      	mov	r1, r6
   25d6a:	4643      	mov	r3, r8
   25d6c:	463a      	mov	r2, r7
   25d6e:	9803      	ldr	r0, [sp, #12]
   25d70:	47a0      	blx	r4
		if (rc != 0) {
   25d72:	4606      	mov	r6, r0
   25d74:	2800      	cmp	r0, #0
   25d76:	d0df      	beq.n	25d38 <settings_call_set_handler+0x20>
			LOG_ERR("set-value failure. key: %s error(%d)",
   25d78:	2301      	movs	r3, #1
   25d7a:	f04f 0400 	mov.w	r4, #0
   25d7e:	4a09      	ldr	r2, [pc, #36]	; (25da4 <settings_call_set_handler+0x8c>)
   25d80:	f363 0407 	bfi	r4, r3, #0, #8
   25d84:	4b08      	ldr	r3, [pc, #32]	; (25da8 <settings_call_set_handler+0x90>)
   25d86:	4628      	mov	r0, r5
   25d88:	1ad2      	subs	r2, r2, r3
   25d8a:	08d2      	lsrs	r2, r2, #3
   25d8c:	f362 148f 	bfi	r4, r2, #6, #10
   25d90:	f01e fcdc 	bl	4474c <log_strdup>
   25d94:	4633      	mov	r3, r6
   25d96:	4602      	mov	r2, r0
   25d98:	4904      	ldr	r1, [pc, #16]	; (25dac <settings_call_set_handler+0x94>)
   25d9a:	4620      	mov	r0, r4
   25d9c:	f01e fcc3 	bl	44726 <log_string_sync>
   25da0:	e7ca      	b.n	25d38 <settings_call_set_handler+0x20>
   25da2:	bf00      	nop
   25da4:	000498c0 	.word	0x000498c0
   25da8:	00049788 	.word	0x00049788
   25dac:	0004c7f0 	.word	0x0004c7f0

00025db0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   25db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25db4:	4f21      	ldr	r7, [pc, #132]	; (25e3c <settings_commit_subtree+0x8c>)
{
   25db6:	4606      	mov	r6, r0
	rc = 0;
   25db8:	2500      	movs	r5, #0
   25dba:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25dbc:	4c20      	ldr	r4, [pc, #128]	; (25e40 <settings_commit_subtree+0x90>)
   25dbe:	f8df 8094 	ldr.w	r8, [pc, #148]	; 25e54 <settings_commit_subtree+0xa4>
   25dc2:	42bc      	cmp	r4, r7
   25dc4:	d90c      	bls.n	25de0 <settings_commit_subtree+0x30>
   25dc6:	491f      	ldr	r1, [pc, #124]	; (25e44 <settings_commit_subtree+0x94>)
   25dc8:	23f4      	movs	r3, #244	; 0xf4
   25dca:	4642      	mov	r2, r8
   25dcc:	481e      	ldr	r0, [pc, #120]	; (25e48 <settings_commit_subtree+0x98>)
   25dce:	f01e fa7f 	bl	442d0 <printk>
   25dd2:	481e      	ldr	r0, [pc, #120]	; (25e4c <settings_commit_subtree+0x9c>)
   25dd4:	f01e fa7c 	bl	442d0 <printk>
   25dd8:	21f4      	movs	r1, #244	; 0xf4
   25dda:	4640      	mov	r0, r8
   25ddc:	f01e fc92 	bl	44704 <assert_post_action>
   25de0:	454c      	cmp	r4, r9
   25de2:	d307      	bcc.n	25df4 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25de4:	4b1a      	ldr	r3, [pc, #104]	; (25e50 <settings_commit_subtree+0xa0>)
   25de6:	681c      	ldr	r4, [r3, #0]
   25de8:	b10c      	cbz	r4, 25dee <settings_commit_subtree+0x3e>
   25dea:	3c14      	subs	r4, #20
   25dec:	b9a4      	cbnz	r4, 25e18 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   25dee:	4628      	mov	r0, r5
   25df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25df4:	b91e      	cbnz	r6, 25dfe <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   25df6:	68e3      	ldr	r3, [r4, #12]
   25df8:	b94b      	cbnz	r3, 25e0e <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25dfa:	3414      	adds	r4, #20
   25dfc:	e7e1      	b.n	25dc2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25dfe:	2200      	movs	r2, #0
   25e00:	4631      	mov	r1, r6
   25e02:	6820      	ldr	r0, [r4, #0]
   25e04:	f01f fa0c 	bl	45220 <settings_name_steq>
   25e08:	2800      	cmp	r0, #0
   25e0a:	d1f4      	bne.n	25df6 <settings_commit_subtree+0x46>
   25e0c:	e7f5      	b.n	25dfa <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   25e0e:	4798      	blx	r3
				rc = rc2;
   25e10:	2d00      	cmp	r5, #0
   25e12:	bf08      	it	eq
   25e14:	4605      	moveq	r5, r0
   25e16:	e7f0      	b.n	25dfa <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25e18:	b91e      	cbnz	r6, 25e22 <settings_commit_subtree+0x72>
		if (ch->h_commit) {
   25e1a:	68e3      	ldr	r3, [r4, #12]
   25e1c:	b94b      	cbnz	r3, 25e32 <settings_commit_subtree+0x82>
   25e1e:	6964      	ldr	r4, [r4, #20]
   25e20:	e7e2      	b.n	25de8 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25e22:	2200      	movs	r2, #0
   25e24:	4631      	mov	r1, r6
   25e26:	6820      	ldr	r0, [r4, #0]
   25e28:	f01f f9fa 	bl	45220 <settings_name_steq>
   25e2c:	2800      	cmp	r0, #0
   25e2e:	d1f4      	bne.n	25e1a <settings_commit_subtree+0x6a>
   25e30:	e7f5      	b.n	25e1e <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   25e32:	4798      	blx	r3
				rc = rc2;
   25e34:	2d00      	cmp	r5, #0
   25e36:	bf08      	it	eq
   25e38:	4605      	moveq	r5, r0
   25e3a:	e7f0      	b.n	25e1e <settings_commit_subtree+0x6e>
   25e3c:	00049788 	.word	0x00049788
   25e40:	00049760 	.word	0x00049760
   25e44:	0004c847 	.word	0x0004c847
   25e48:	0004b33b 	.word	0x0004b33b
   25e4c:	0004c5d9 	.word	0x0004c5d9
   25e50:	20024a78 	.word	0x20024a78
   25e54:	0004c815 	.word	0x0004c815

00025e58 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   25e58:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   25e5a:	4c06      	ldr	r4, [pc, #24]	; (25e74 <settings_subsys_init+0x1c>)
   25e5c:	7823      	ldrb	r3, [r4, #0]
   25e5e:	b93b      	cbnz	r3, 25e70 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   25e60:	f7ff fef2 	bl	25c48 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   25e64:	f000 fac8 	bl	263f8 <settings_backend_init>

	if (!err) {
   25e68:	b908      	cbnz	r0, 25e6e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   25e6a:	2301      	movs	r3, #1
   25e6c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   25e6e:	bd10      	pop	{r4, pc}
		return 0;
   25e70:	2000      	movs	r0, #0
   25e72:	e7fc      	b.n	25e6e <settings_subsys_init+0x16>
   25e74:	2002b4b0 	.word	0x2002b4b0

00025e78 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   25e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e7c:	b08b      	sub	sp, #44	; 0x2c
   25e7e:	9302      	str	r3, [sp, #8]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   25e80:	4b29      	ldr	r3, [pc, #164]	; (25f28 <settings_line_raw_read_until+0xb0>)
{
   25e82:	468a      	mov	sl, r1
	uint8_t rbs = settings_io_cb.rwbs;
   25e84:	7b19      	ldrb	r1, [r3, #12]
{
   25e86:	4680      	mov	r8, r0
	uint8_t rbs = settings_io_cb.rwbs;
   25e88:	9101      	str	r1, [sp, #4]
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   25e8a:	4615      	mov	r5, r2
   25e8c:	2a00      	cmp	r2, #0
   25e8e:	d045      	beq.n	25f1c <settings_line_raw_read_until+0xa4>
   25e90:	4616      	mov	r6, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25e92:	4699      	mov	r9, r3
		read_size = sizeof(temp_buf);
   25e94:	2310      	movs	r3, #16
   25e96:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   25e98:	9b01      	ldr	r3, [sp, #4]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25e9a:	f8d9 7000 	ldr.w	r7, [r9]
		off = seek / rbs * rbs;
   25e9e:	fb98 f4f3 	sdiv	r4, r8, r3
   25ea2:	435c      	muls	r4, r3
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25ea4:	aa06      	add	r2, sp, #24
   25ea6:	ab05      	add	r3, sp, #20
   25ea8:	4621      	mov	r1, r4
   25eaa:	9815      	ldr	r0, [sp, #84]	; 0x54
   25eac:	47b8      	blx	r7
		if (rc) {
   25eae:	4607      	mov	r7, r0
   25eb0:	2800      	cmp	r0, #0
   25eb2:	d136      	bne.n	25f22 <settings_line_raw_read_until+0xaa>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   25eb4:	eba8 0b04 	sub.w	fp, r8, r4
   25eb8:	9c05      	ldr	r4, [sp, #20]
   25eba:	ab06      	add	r3, sp, #24
   25ebc:	eba4 040b 	sub.w	r4, r4, fp
		len = MIN(rem_size, len);
   25ec0:	449b      	add	fp, r3

		if (until_char != NULL) {
   25ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   25ec4:	42b4      	cmp	r4, r6
   25ec6:	bf28      	it	cs
   25ec8:	4634      	movcs	r4, r6
		if (until_char != NULL) {
   25eca:	b31b      	cbz	r3, 25f14 <settings_line_raw_read_until+0x9c>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   25ecc:	4622      	mov	r2, r4
   25ece:	7819      	ldrb	r1, [r3, #0]
   25ed0:	4658      	mov	r0, fp
   25ed2:	f022 f93d 	bl	48150 <memchr>
			if (pend != NULL) {
   25ed6:	b1f8      	cbz	r0, 25f18 <settings_line_raw_read_until+0xa0>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   25ed8:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   25eda:	eba0 040b 	sub.w	r4, r0, fp
   25ede:	4622      	mov	r2, r4
   25ee0:	4659      	mov	r1, fp
   25ee2:	4650      	mov	r0, sl
   25ee4:	9303      	str	r3, [sp, #12]
   25ee6:	f022 f94f 	bl	48188 <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   25eea:	9a05      	ldr	r2, [sp, #20]
		rem_size -= len;
   25eec:	1b36      	subs	r6, r6, r4
		if (exp_size > read_size || rc) {
   25eee:	2a0f      	cmp	r2, #15
   25ef0:	9b03      	ldr	r3, [sp, #12]
   25ef2:	d904      	bls.n	25efe <settings_line_raw_read_until+0x86>
   25ef4:	b91b      	cbnz	r3, 25efe <settings_line_raw_read_until+0x86>
			break;
		}

		out += len;
   25ef6:	44a2      	add	sl, r4
		seek += len;
   25ef8:	44a0      	add	r8, r4
	while (rem_size) {
   25efa:	2e00      	cmp	r6, #0
   25efc:	d1ca      	bne.n	25e94 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   25efe:	9a02      	ldr	r2, [sp, #8]
   25f00:	1bad      	subs	r5, r5, r6
   25f02:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   25f04:	9a14      	ldr	r2, [sp, #80]	; 0x50
   25f06:	b10a      	cbz	r2, 25f0c <settings_line_raw_read_until+0x94>
		return (rc) ? 0 : 1;
   25f08:	f083 0701 	eor.w	r7, r3, #1
	}

	return 0;
}
   25f0c:	4638      	mov	r0, r7
   25f0e:	b00b      	add	sp, #44	; 0x2c
   25f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   25f14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   25f16:	e7e2      	b.n	25ede <settings_line_raw_read_until+0x66>
   25f18:	463b      	mov	r3, r7
   25f1a:	e7e0      	b.n	25ede <settings_line_raw_read_until+0x66>
		return -EINVAL;
   25f1c:	f06f 0715 	mvn.w	r7, #21
   25f20:	e7f4      	b.n	25f0c <settings_line_raw_read_until+0x94>
			return -EIO;
   25f22:	f06f 0704 	mvn.w	r7, #4
   25f26:	e7f1      	b.n	25f0c <settings_line_raw_read_until+0x94>
   25f28:	20024a80 	.word	0x20024a80

00025f2c <settings_line_write>:
{
   25f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   25f30:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 25ff0 <settings_line_write+0xc4>
{
   25f34:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   25f36:	f89a 700c 	ldrb.w	r7, [sl, #12]
{
   25f3a:	4683      	mov	fp, r0
   25f3c:	4689      	mov	r9, r1
   25f3e:	4690      	mov	r8, r2
   25f40:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   25f42:	f7f7 f98f 	bl	1d264 <strlen>
	w_size = rem - rem % wbs;
   25f46:	fbb0 f4f7 	udiv	r4, r0, r7
   25f4a:	fb07 0414 	mls	r4, r7, r4, r0
   25f4e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   25f50:	462b      	mov	r3, r5
   25f52:	465a      	mov	r2, fp
   25f54:	9901      	ldr	r1, [sp, #4]
   25f56:	9810      	ldr	r0, [sp, #64]	; 0x40
   25f58:	f8da 6004 	ldr.w	r6, [sl, #4]
   25f5c:	47b0      	blx	r6
	w_loc += w_size;
   25f5e:	9b01      	ldr	r3, [sp, #4]
   25f60:	442b      	add	r3, r5
   25f62:	9301      	str	r3, [sp, #4]
	if (rem) {
   25f64:	b134      	cbz	r4, 25f74 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   25f66:	2310      	movs	r3, #16
   25f68:	4622      	mov	r2, r4
   25f6a:	eb0b 0105 	add.w	r1, fp, r5
   25f6e:	a802      	add	r0, sp, #8
   25f70:	f022 f917 	bl	481a2 <__memcpy_chk>
	w_buf[rem] = '=';
   25f74:	223d      	movs	r2, #61	; 0x3d
   25f76:	ab06      	add	r3, sp, #24
   25f78:	4423      	add	r3, r4
   25f7a:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   25f7e:	3401      	adds	r4, #1
		while (w_size < sizeof(w_buf)) {
   25f80:	2c0f      	cmp	r4, #15
   25f82:	d90d      	bls.n	25fa0 <settings_line_write+0x74>
   25f84:	2500      	movs	r5, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   25f86:	4623      	mov	r3, r4
   25f88:	aa02      	add	r2, sp, #8
   25f8a:	9901      	ldr	r1, [sp, #4]
   25f8c:	9810      	ldr	r0, [sp, #64]	; 0x40
   25f8e:	f8da 6004 	ldr.w	r6, [sl, #4]
   25f92:	47b0      	blx	r6
		if (rc) {
   25f94:	bb30      	cbnz	r0, 25fe4 <settings_line_write+0xb8>
		if (done) {
   25f96:	bb3d      	cbnz	r5, 25fe8 <settings_line_write+0xbc>
		w_loc += w_size;
   25f98:	9b01      	ldr	r3, [sp, #4]
   25f9a:	4423      	add	r3, r4
		w_size = 0;
   25f9c:	462c      	mov	r4, r5
		w_loc += w_size;
   25f9e:	9301      	str	r3, [sp, #4]
				if (rem) {
   25fa0:	f1b8 0f00 	cmp.w	r8, #0
   25fa4:	d00f      	beq.n	25fc6 <settings_line_write+0x9a>
					add = MIN(rem, sizeof(w_buf) - w_size);
   25fa6:	f1c4 0510 	rsb	r5, r4, #16
   25faa:	4545      	cmp	r5, r8
   25fac:	bf28      	it	cs
   25fae:	4645      	movcs	r5, r8
   25fb0:	ab02      	add	r3, sp, #8
   25fb2:	4649      	mov	r1, r9
   25fb4:	1918      	adds	r0, r3, r4
   25fb6:	462a      	mov	r2, r5
   25fb8:	f022 f8e6 	bl	48188 <memcpy>
					value += add;
   25fbc:	44a9      	add	r9, r5
					rem -= add;
   25fbe:	eba8 0805 	sub.w	r8, r8, r5
					w_size += add;
   25fc2:	442c      	add	r4, r5
   25fc4:	e7dc      	b.n	25f80 <settings_line_write+0x54>
					add = (w_size) % wbs;
   25fc6:	fbb4 f5f7 	udiv	r5, r4, r7
   25fca:	fb07 4515 	mls	r5, r7, r5, r4
					if (add) {
   25fce:	b13d      	cbz	r5, 25fe0 <settings_line_write+0xb4>
						add = wbs - add;
   25fd0:	1b7d      	subs	r5, r7, r5
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   25fd2:	ab02      	add	r3, sp, #8
   25fd4:	1918      	adds	r0, r3, r4
   25fd6:	462a      	mov	r2, r5
   25fd8:	4641      	mov	r1, r8
   25fda:	f022 f8f5 	bl	481c8 <memset>
						w_size += add;
   25fde:	442c      	add	r4, r5
					done = true;
   25fe0:	2501      	movs	r5, #1
   25fe2:	e7d0      	b.n	25f86 <settings_line_write+0x5a>
			return -EIO;
   25fe4:	f06f 0004 	mvn.w	r0, #4
}
   25fe8:	b007      	add	sp, #28
   25fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25fee:	bf00      	nop
   25ff0:	20024a80 	.word	0x20024a80

00025ff4 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25ff4:	4b03      	ldr	r3, [pc, #12]	; (26004 <settings_line_val_get_len+0x10>)
{
   25ff6:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25ff8:	689b      	ldr	r3, [r3, #8]
{
   25ffa:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25ffc:	4608      	mov	r0, r1
   25ffe:	4798      	blx	r3
		return 0;
	}
#else
	return len - val_off;
#endif
}
   26000:	1b00      	subs	r0, r0, r4
   26002:	bd10      	pop	{r4, pc}
   26004:	20024a80 	.word	0x20024a80

00026008 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   26008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2600c:	4681      	mov	r9, r0
   2600e:	460d      	mov	r5, r1
   26010:	4692      	mov	sl, r2
   26012:	461e      	mov	r6, r3
	int rc = -EINVAL;
   26014:	f06f 0015 	mvn.w	r0, #21
{
   26018:	b086      	sub	sp, #24
   2601a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2601e:	4f11      	ldr	r7, [pc, #68]	; (26064 <settings_line_entry_copy+0x5c>)
	while (len) {
   26020:	f1b8 0f00 	cmp.w	r8, #0
   26024:	d102      	bne.n	2602c <settings_line_entry_copy+0x24>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   26026:	b006      	add	sp, #24
   26028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   2602c:	4643      	mov	r3, r8
   2602e:	2b10      	cmp	r3, #16
   26030:	bf28      	it	cs
   26032:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   26034:	aa02      	add	r2, sp, #8
		chunk_size = MIN(len, sizeof(buf));
   26036:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   26038:	4631      	mov	r1, r6
   2603a:	ab01      	add	r3, sp, #4
   2603c:	4650      	mov	r0, sl
   2603e:	683c      	ldr	r4, [r7, #0]
   26040:	47a0      	blx	r4
		if (rc) {
   26042:	2800      	cmp	r0, #0
   26044:	d1ef      	bne.n	26026 <settings_line_entry_copy+0x1e>
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, chunk_size);
   26046:	9b01      	ldr	r3, [sp, #4]
   26048:	aa02      	add	r2, sp, #8
   2604a:	4629      	mov	r1, r5
   2604c:	4648      	mov	r0, r9
   2604e:	687c      	ldr	r4, [r7, #4]
   26050:	47a0      	blx	r4
		if (rc) {
   26052:	2800      	cmp	r0, #0
   26054:	d1e7      	bne.n	26026 <settings_line_entry_copy+0x1e>
		src_off += chunk_size;
   26056:	9b01      	ldr	r3, [sp, #4]
   26058:	441e      	add	r6, r3
		dst_off += chunk_size;
   2605a:	441d      	add	r5, r3
		len -= chunk_size;
   2605c:	eba8 0803 	sub.w	r8, r8, r3
   26060:	e7de      	b.n	26020 <settings_line_entry_copy+0x18>
   26062:	bf00      	nop
   26064:	20024a80 	.word	0x20024a80

00026068 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   26068:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   2606a:	4c03      	ldr	r4, [pc, #12]	; (26078 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   2606c:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   26070:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   26072:	7323      	strb	r3, [r4, #12]
}
   26074:	bd10      	pop	{r4, pc}
   26076:	bf00      	nop
   26078:	20024a80 	.word	0x20024a80

0002607c <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   2607c:	b530      	push	{r4, r5, lr}
   2607e:	4604      	mov	r4, r0
   26080:	b085      	sub	sp, #20
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   26082:	4610      	mov	r0, r2
{
   26084:	461d      	mov	r5, r3
	value_ctx.off = off;
   26086:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   2608a:	f7ff ffb3 	bl	25ff4 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   2608e:	9500      	str	r5, [sp, #0]
   26090:	4601      	mov	r1, r0
   26092:	ab02      	add	r3, sp, #8
   26094:	4a02      	ldr	r2, [pc, #8]	; (260a0 <settings_line_load_cb+0x24>)
   26096:	4620      	mov	r0, r4
   26098:	f7ff fe3e 	bl	25d18 <settings_call_set_handler>
					 &value_ctx, arg);
}
   2609c:	b005      	add	sp, #20
   2609e:	bd30      	pop	{r4, r5, pc}
   260a0:	00045281 	.word	0x00045281

000260a4 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   260a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260a8:	4680      	mov	r8, r0
   260aa:	b0b3      	sub	sp, #204	; 0xcc
   260ac:	4689      	mov	r9, r1
   260ae:	4692      	mov	sl, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   260b0:	2100      	movs	r1, #0
   260b2:	2210      	movs	r2, #16
   260b4:	a802      	add	r0, sp, #8
{
   260b6:	469b      	mov	fp, r3
	struct fcb_entry_ctx entry_ctx = {
   260b8:	f022 f886 	bl	481c8 <memset>
   260bc:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
			LOG_ERR("failed to load line");
   260c0:	4c35      	ldr	r4, [pc, #212]	; (26198 <settings_fcb_load_priv+0xf4>)
	struct fcb_entry_ctx entry_ctx = {
   260c2:	9306      	str	r3, [sp, #24]
			LOG_ERR("failed to load line");
   260c4:	4b35      	ldr	r3, [pc, #212]	; (2619c <settings_fcb_load_priv+0xf8>)
   260c6:	1ae4      	subs	r4, r4, r3
   260c8:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   260cc:	f108 0708 	add.w	r7, r8, #8
   260d0:	a902      	add	r1, sp, #8
   260d2:	4638      	mov	r0, r7
   260d4:	f01e fdbf 	bl	44c56 <fcb_getnext>
   260d8:	b118      	cbz	r0, 260e2 <settings_fcb_load_priv+0x3e>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   260da:	2000      	movs	r0, #0
   260dc:	b033      	add	sp, #204	; 0xcc
   260de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   260e2:	466a      	mov	r2, sp
   260e4:	ab02      	add	r3, sp, #8
   260e6:	214a      	movs	r1, #74	; 0x4a
   260e8:	a80c      	add	r0, sp, #48	; 0x30
   260ea:	f01f f8d8 	bl	4529e <settings_line_name_read>
		if (rc) {
   260ee:	4602      	mov	r2, r0
   260f0:	b160      	cbz	r0, 2610c <settings_fcb_load_priv+0x68>
			LOG_ERR("Failed to load line name: %d", rc);
   260f2:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   260f6:	f043 0301 	orr.w	r3, r3, #1
   260fa:	f363 0607 	bfi	r6, r3, #0, #8
   260fe:	f364 168f 	bfi	r6, r4, #6, #10
   26102:	4927      	ldr	r1, [pc, #156]	; (261a0 <settings_fcb_load_priv+0xfc>)
   26104:	4630      	mov	r0, r6
   26106:	f01e fb0e 	bl	44726 <log_string_sync>
			continue;
   2610a:	e7df      	b.n	260cc <settings_fcb_load_priv+0x28>
		name[name_len] = '\0';
   2610c:	9b00      	ldr	r3, [sp, #0]
   2610e:	a932      	add	r1, sp, #200	; 0xc8
   26110:	4419      	add	r1, r3
   26112:	f801 0c98 	strb.w	r0, [r1, #-152]
		if (filter_duplicates &&
   26116:	f1bb 0f00 	cmp.w	fp, #0
   2611a:	d015      	beq.n	26148 <settings_fcb_load_priv+0xa4>
	if (off >= entry_ctx->loc.fe_data_len) {
   2611c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   26120:	3301      	adds	r3, #1
   26122:	4293      	cmp	r3, r2
   26124:	dad2      	bge.n	260cc <settings_fcb_load_priv+0x28>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   26126:	f10d 0c1c 	add.w	ip, sp, #28
   2612a:	f10d 0e08 	add.w	lr, sp, #8
   2612e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   26132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   26136:	f8de 3000 	ldr.w	r3, [lr]
   2613a:	f8cc 3000 	str.w	r3, [ip]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   2613e:	a907      	add	r1, sp, #28
   26140:	4638      	mov	r0, r7
   26142:	f01e fd88 	bl	44c56 <fcb_getnext>
   26146:	b130      	cbz	r0, 26156 <settings_fcb_load_priv+0xb2>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   26148:	9a00      	ldr	r2, [sp, #0]
   2614a:	4653      	mov	r3, sl
   2614c:	3201      	adds	r2, #1
   2614e:	a902      	add	r1, sp, #8
   26150:	a80c      	add	r0, sp, #48	; 0x30
   26152:	47c8      	blx	r9
   26154:	e7ba      	b.n	260cc <settings_fcb_load_priv+0x28>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   26156:	ab07      	add	r3, sp, #28
   26158:	aa01      	add	r2, sp, #4
   2615a:	214a      	movs	r1, #74	; 0x4a
   2615c:	a81f      	add	r0, sp, #124	; 0x7c
   2615e:	f01f f89e 	bl	4529e <settings_line_name_read>
   26162:	b160      	cbz	r0, 2617e <settings_fcb_load_priv+0xda>
			LOG_ERR("failed to load line");
   26164:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   26168:	f043 0301 	orr.w	r3, r3, #1
   2616c:	f363 0507 	bfi	r5, r3, #0, #8
   26170:	f364 158f 	bfi	r5, r4, #6, #10
   26174:	490b      	ldr	r1, [pc, #44]	; (261a4 <settings_fcb_load_priv+0x100>)
   26176:	4628      	mov	r0, r5
   26178:	f01e fad5 	bl	44726 <log_string_sync>
			continue;
   2617c:	e7df      	b.n	2613e <settings_fcb_load_priv+0x9a>
		name2[name2_len] = '\0';
   2617e:	9b01      	ldr	r3, [sp, #4]
   26180:	aa32      	add	r2, sp, #200	; 0xc8
   26182:	4413      	add	r3, r2
   26184:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   26188:	a91f      	add	r1, sp, #124	; 0x7c
   2618a:	a80c      	add	r0, sp, #48	; 0x30
   2618c:	f7f7 f860 	bl	1d250 <strcmp>
   26190:	2800      	cmp	r0, #0
   26192:	d1d4      	bne.n	2613e <settings_fcb_load_priv+0x9a>
   26194:	e79a      	b.n	260cc <settings_fcb_load_priv+0x28>
   26196:	bf00      	nop
   26198:	000498c0 	.word	0x000498c0
   2619c:	00049788 	.word	0x00049788
   261a0:	0004c878 	.word	0x0004c878
   261a4:	0004c895 	.word	0x0004c895

000261a8 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
	return settings_fcb_load_priv(
   261a8:	460a      	mov	r2, r1
   261aa:	2301      	movs	r3, #1
   261ac:	4901      	ldr	r1, [pc, #4]	; (261b4 <settings_fcb_load+0xc>)
   261ae:	f7ff bf79 	b.w	260a4 <settings_fcb_load_priv>
   261b2:	bf00      	nop
   261b4:	0002607d 	.word	0x0002607d

000261b8 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   261b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261bc:	b0c3      	sub	sp, #268	; 0x10c
   261be:	4606      	mov	r6, r0
   261c0:	460f      	mov	r7, r1
   261c2:	9203      	str	r2, [sp, #12]
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   261c4:	4698      	mov	r8, r3
   261c6:	b103      	cbz	r3, 261ca <settings_fcb_save+0x12>
   261c8:	b182      	cbz	r2, 261ec <settings_fcb_save+0x34>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   261ca:	2400      	movs	r4, #0
	cdca.val = (char *)value;
   261cc:	9b03      	ldr	r3, [sp, #12]
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   261ce:	aa09      	add	r2, sp, #36	; 0x24
	cdca.val = (char *)value;
   261d0:	930a      	str	r3, [sp, #40]	; 0x28
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   261d2:	4968      	ldr	r1, [pc, #416]	; (26374 <settings_fcb_save+0x1bc>)
   261d4:	4623      	mov	r3, r4
   261d6:	4630      	mov	r0, r6
	cdca.name = name;
   261d8:	9709      	str	r7, [sp, #36]	; 0x24
	cdca.val_len = val_len;
   261da:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   261de:	f7ff ff61 	bl	260a4 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   261e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   261e4:	2b01      	cmp	r3, #1
   261e6:	f000 80c0 	beq.w	2636a <settings_fcb_save+0x1b2>
	if (!name) {
   261ea:	b917      	cbnz	r7, 261f2 <settings_fcb_save+0x3a>
		return -EINVAL;
   261ec:	f06f 0415 	mvn.w	r4, #21
   261f0:	e0bb      	b.n	2636a <settings_fcb_save+0x1b2>
	len = settings_line_len_calc(name, val_len);
   261f2:	4641      	mov	r1, r8
   261f4:	4638      	mov	r0, r7
   261f6:	f01f f833 	bl	45260 <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   261fa:	4b5f      	ldr	r3, [pc, #380]	; (26378 <settings_fcb_save+0x1c0>)
   261fc:	4a5f      	ldr	r2, [pc, #380]	; (2637c <settings_fcb_save+0x1c4>)
	len = settings_line_len_calc(name, val_len);
   261fe:	9005      	str	r0, [sp, #20]
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   26200:	1a9b      	subs	r3, r3, r2
   26202:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   26206:	9304      	str	r3, [sp, #16]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   26208:	7b73      	ldrb	r3, [r6, #13]
   2620a:	429c      	cmp	r4, r3
   2620c:	daee      	bge.n	261ec <settings_fcb_save+0x34>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   2620e:	f106 0508 	add.w	r5, r6, #8
   26212:	f10d 0934 	add.w	r9, sp, #52	; 0x34
   26216:	464a      	mov	r2, r9
   26218:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2621c:	4628      	mov	r0, r5
   2621e:	f7ff f82d 	bl	2527c <fcb_append>
		if (rc != -ENOSPC) {
   26222:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   26226:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   26228:	f040 8089 	bne.w	2633e <settings_fcb_save+0x186>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   2622c:	7b73      	ldrb	r3, [r6, #13]
   2622e:	3b01      	subs	r3, #1
   26230:	42a3      	cmp	r3, r4
   26232:	dd24      	ble.n	2627e <settings_fcb_save+0xc6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   26234:	4628      	mov	r0, r5
   26236:	f01e fab0 	bl	4479a <fcb_append_to_scratch>
	if (rc) {
   2623a:	4681      	mov	r9, r0
   2623c:	b9f8      	cbnz	r0, 2627e <settings_fcb_save+0xc6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   2623e:	6c30      	ldr	r0, [r6, #64]	; 0x40
   26240:	f01e ff6d 	bl	4511e <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   26244:	6c33      	ldr	r3, [r6, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   26246:	e9cd 9912 	strd	r9, r9, [sp, #72]	; 0x48
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2624a:	f8df 9138 	ldr.w	r9, [pc, #312]	; 26384 <settings_fcb_save+0x1cc>
	loc1.fap = cf->cf_fcb.fap;
   2624e:	9316      	str	r3, [sp, #88]	; 0x58
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   26250:	a912      	add	r1, sp, #72	; 0x48
   26252:	4628      	mov	r0, r5
   26254:	f01e fcff 	bl	44c56 <fcb_getnext>
   26258:	b198      	cbz	r0, 26282 <settings_fcb_save+0xca>
	rc = fcb_rotate(&cf->cf_fcb);
   2625a:	4628      	mov	r0, r5
   2625c:	f01e fd15 	bl	44c8a <fcb_rotate>
	if (rc != 0) {
   26260:	4602      	mov	r2, r0
   26262:	b160      	cbz	r0, 2627e <settings_fcb_save+0xc6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   26264:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   26268:	f043 0301 	orr.w	r3, r3, #1
   2626c:	f363 0b07 	bfi	fp, r3, #0, #8
   26270:	9b04      	ldr	r3, [sp, #16]
   26272:	4943      	ldr	r1, [pc, #268]	; (26380 <settings_fcb_save+0x1c8>)
   26274:	f363 1b8f 	bfi	fp, r3, #6, #10
   26278:	4658      	mov	r0, fp
   2627a:	f01e fa54 	bl	44726 <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2627e:	3401      	adds	r4, #1
   26280:	e7c2      	b.n	26208 <settings_fcb_save+0x50>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   26282:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   26284:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26286:	429a      	cmp	r2, r3
   26288:	d1e7      	bne.n	2625a <settings_fcb_save+0xa2>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   2628a:	ab12      	add	r3, sp, #72	; 0x48
   2628c:	aa07      	add	r2, sp, #28
   2628e:	2149      	movs	r1, #73	; 0x49
   26290:	a81c      	add	r0, sp, #112	; 0x70
   26292:	f01f f804 	bl	4529e <settings_line_name_read>
		if (rc) {
   26296:	2800      	cmp	r0, #0
   26298:	d1da      	bne.n	26250 <settings_fcb_save+0x98>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   2629a:	9b07      	ldr	r3, [sp, #28]
   2629c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   262a0:	3301      	adds	r3, #1
   262a2:	4293      	cmp	r3, r2
   262a4:	d0d4      	beq.n	26250 <settings_fcb_save+0x98>
		loc2 = loc1;
   262a6:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   262aa:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   262ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   262b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   262b6:	f8de 3000 	ldr.w	r3, [lr]
   262ba:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   262be:	a917      	add	r1, sp, #92	; 0x5c
   262c0:	4628      	mov	r0, r5
   262c2:	f01e fcc8 	bl	44c56 <fcb_getnext>
   262c6:	b338      	cbz	r0, 26318 <settings_fcb_save+0x160>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   262c8:	aa17      	add	r2, sp, #92	; 0x5c
   262ca:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
   262ce:	4628      	mov	r0, r5
   262d0:	f7fe ffd4 	bl	2527c <fcb_append>
		if (rc) {
   262d4:	4603      	mov	r3, r0
   262d6:	2800      	cmp	r0, #0
   262d8:	d1ba      	bne.n	26250 <settings_fcb_save+0x98>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   262da:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   262de:	4601      	mov	r1, r0
   262e0:	9200      	str	r2, [sp, #0]
   262e2:	a817      	add	r0, sp, #92	; 0x5c
   262e4:	aa12      	add	r2, sp, #72	; 0x48
   262e6:	f7ff fe8f 	bl	26008 <settings_line_entry_copy>
		if (rc) {
   262ea:	2800      	cmp	r0, #0
   262ec:	d1b0      	bne.n	26250 <settings_fcb_save+0x98>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   262ee:	a917      	add	r1, sp, #92	; 0x5c
   262f0:	4628      	mov	r0, r5
   262f2:	f01e fa6e 	bl	447d2 <fcb_append_finish>
		if (rc != 0) {
   262f6:	4602      	mov	r2, r0
   262f8:	2800      	cmp	r0, #0
   262fa:	d0a9      	beq.n	26250 <settings_fcb_save+0x98>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   262fc:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26300:	f043 0301 	orr.w	r3, r3, #1
   26304:	f363 0a07 	bfi	sl, r3, #0, #8
   26308:	9b04      	ldr	r3, [sp, #16]
   2630a:	4649      	mov	r1, r9
   2630c:	f363 1a8f 	bfi	sl, r3, #6, #10
   26310:	4650      	mov	r0, sl
   26312:	f01e fa08 	bl	44726 <log_string_sync>
   26316:	e79b      	b.n	26250 <settings_fcb_save+0x98>
			rc = settings_line_name_read(name2, sizeof(name2),
   26318:	ab17      	add	r3, sp, #92	; 0x5c
   2631a:	aa08      	add	r2, sp, #32
   2631c:	2149      	movs	r1, #73	; 0x49
   2631e:	a82f      	add	r0, sp, #188	; 0xbc
   26320:	f01e ffbd 	bl	4529e <settings_line_name_read>
			if (rc) {
   26324:	2800      	cmp	r0, #0
   26326:	d1ca      	bne.n	262be <settings_fcb_save+0x106>
			if ((val1_off == val2_off) &&
   26328:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   2632c:	429a      	cmp	r2, r3
   2632e:	d1c6      	bne.n	262be <settings_fcb_save+0x106>
			    !memcmp(name1, name2, val1_off)) {
   26330:	a92f      	add	r1, sp, #188	; 0xbc
   26332:	a81c      	add	r0, sp, #112	; 0x70
   26334:	f021 ff1a 	bl	4816c <memcmp>
			if ((val1_off == val2_off) &&
   26338:	2800      	cmp	r0, #0
   2633a:	d1c0      	bne.n	262be <settings_fcb_save+0x106>
   2633c:	e788      	b.n	26250 <settings_fcb_save+0x98>
	if (rc) {
   2633e:	2800      	cmp	r0, #0
   26340:	f47f af54 	bne.w	261ec <settings_fcb_save+0x34>
	loc.fap = cf->cf_fcb.fap;
   26344:	6c32      	ldr	r2, [r6, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   26346:	f8cd 9000 	str.w	r9, [sp]
	loc.fap = cf->cf_fcb.fap;
   2634a:	9211      	str	r2, [sp, #68]	; 0x44
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2634c:	9903      	ldr	r1, [sp, #12]
   2634e:	4642      	mov	r2, r8
   26350:	4638      	mov	r0, r7
   26352:	f7ff fdeb 	bl	25f2c <settings_line_write>
	if (rc != -EIO) {
   26356:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   26358:	4604      	mov	r4, r0
	if (rc != -EIO) {
   2635a:	d006      	beq.n	2636a <settings_fcb_save+0x1b2>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   2635c:	4649      	mov	r1, r9
   2635e:	4628      	mov	r0, r5
   26360:	f01e fa37 	bl	447d2 <fcb_append_finish>
			rc = i;
   26364:	2c00      	cmp	r4, #0
   26366:	bf08      	it	eq
   26368:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   2636a:	4620      	mov	r0, r4
   2636c:	b043      	add	sp, #268	; 0x10c
   2636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26372:	bf00      	nop
   26374:	000452bf 	.word	0x000452bf
   26378:	000498c0 	.word	0x000498c0
   2637c:	00049788 	.word	0x00049788
   26380:	0004c8ca 	.word	0x0004c8ca
   26384:	0004c8a9 	.word	0x0004c8a9

00026388 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   26388:	2301      	movs	r3, #1
{
   2638a:	b570      	push	{r4, r5, r6, lr}
   2638c:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2638e:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   26390:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   26392:	f100 0608 	add.w	r6, r0, #8
   26396:	4631      	mov	r1, r6
   26398:	2008      	movs	r0, #8
   2639a:	f01e faf2 	bl	44982 <fcb_init>
		if (rc) {
   2639e:	4605      	mov	r5, r0
   263a0:	b9b0      	cbnz	r0, 263d0 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   263a2:	4630      	mov	r0, r6
   263a4:	f01e fa80 	bl	448a8 <fcb_free_sector_cnt>
   263a8:	2800      	cmp	r0, #0
   263aa:	dc0a      	bgt.n	263c2 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   263ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   263ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
   263b0:	e9d3 1200 	ldrd	r1, r2, [r3]
   263b4:	f01e fe8d 	bl	450d2 <flash_area_erase>
			if (rc) {
   263b8:	2800      	cmp	r0, #0
   263ba:	d0ec      	beq.n	26396 <settings_fcb_src+0xe>
				return -EIO;
   263bc:	f06f 0504 	mvn.w	r5, #4
   263c0:	e004      	b.n	263cc <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   263c2:	4b05      	ldr	r3, [pc, #20]	; (263d8 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   263c4:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   263c6:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   263c8:	f7ff fbfc 	bl	25bc4 <settings_src_register>
}
   263cc:	4628      	mov	r0, r5
   263ce:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   263d0:	f06f 0515 	mvn.w	r5, #21
   263d4:	e7fa      	b.n	263cc <settings_fcb_src+0x44>
   263d6:	bf00      	nop
   263d8:	00049c90 	.word	0x00049c90

000263dc <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   263dc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   263e0:	4a02      	ldr	r2, [pc, #8]	; (263ec <settings_mount_fcb_backend+0x10>)
   263e2:	4903      	ldr	r1, [pc, #12]	; (263f0 <settings_mount_fcb_backend+0x14>)
   263e4:	4803      	ldr	r0, [pc, #12]	; (263f4 <settings_mount_fcb_backend+0x18>)
   263e6:	f7ff be3f 	b.w	26068 <settings_line_io_init>
   263ea:	bf00      	nop
   263ec:	0004533b 	.word	0x0004533b
   263f0:	0004533f 	.word	0x0004533f
   263f4:	00045353 	.word	0x00045353

000263f8 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   263f8:	2309      	movs	r3, #9
{
   263fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   263fc:	4a22      	ldr	r2, [pc, #136]	; (26488 <settings_backend_init+0x90>)
   263fe:	4669      	mov	r1, sp
   26400:	2008      	movs	r0, #8
	uint32_t cnt = sizeof(settings_fcb_area) /
   26402:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   26404:	f7ff fa26 	bl	25854 <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   26408:	f110 0f13 	cmn.w	r0, #19
   2640c:	d03a      	beq.n	26484 <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   2640e:	b138      	cbz	r0, 26420 <settings_backend_init+0x28>
   26410:	300c      	adds	r0, #12
   26412:	d005      	beq.n	26420 <settings_backend_init+0x28>
		k_panic();
   26414:	4040      	eors	r0, r0
   26416:	f380 8811 	msr	BASEPRI, r0
   2641a:	f04f 0004 	mov.w	r0, #4
   2641e:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   26420:	4c1a      	ldr	r4, [pc, #104]	; (2648c <settings_backend_init+0x94>)
   26422:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   26424:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   26426:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   26428:	f7ff ffae 	bl	26388 <settings_fcb_src>

	if (rc != 0) {
   2642c:	b308      	cbz	r0, 26472 <settings_backend_init+0x7a>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   2642e:	a901      	add	r1, sp, #4
   26430:	2008      	movs	r0, #8
   26432:	f7ff f9fb 	bl	2582c <flash_area_open>

		if (rc == 0) {
   26436:	4601      	mov	r1, r0
   26438:	b160      	cbz	r0, 26454 <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   2643a:	4040      	eors	r0, r0
   2643c:	f380 8811 	msr	BASEPRI, r0
   26440:	f04f 0004 	mov.w	r0, #4
   26444:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   26446:	4040      	eors	r0, r0
   26448:	f380 8811 	msr	BASEPRI, r0
   2644c:	f04f 0004 	mov.w	r0, #4
   26450:	df02      	svc	2
   26452:	e00e      	b.n	26472 <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   26454:	9801      	ldr	r0, [sp, #4]
   26456:	6882      	ldr	r2, [r0, #8]
   26458:	f01e fe3b 	bl	450d2 <flash_area_erase>
   2645c:	4605      	mov	r5, r0
			flash_area_close(fap);
   2645e:	9801      	ldr	r0, [sp, #4]
   26460:	f01e fdf0 	bl	45044 <flash_area_close>
		if (rc != 0) {
   26464:	2d00      	cmp	r5, #0
   26466:	d1e8      	bne.n	2643a <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   26468:	4620      	mov	r0, r4
   2646a:	f7ff ff8d 	bl	26388 <settings_fcb_src>
	if (rc != 0) {
   2646e:	2800      	cmp	r0, #0
   26470:	d1e9      	bne.n	26446 <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   26472:	4b07      	ldr	r3, [pc, #28]	; (26490 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   26474:	4805      	ldr	r0, [pc, #20]	; (2648c <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   26476:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   26478:	f7ff fbb2 	bl	25be0 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   2647c:	4803      	ldr	r0, [pc, #12]	; (2648c <settings_backend_init+0x94>)
   2647e:	f7ff ffad 	bl	263dc <settings_mount_fcb_backend>

	return rc;
   26482:	2000      	movs	r0, #0
}
   26484:	b003      	add	sp, #12
   26486:	bd30      	pop	{r4, r5, pc}
   26488:	20024a90 	.word	0x20024a90
   2648c:	20020738 	.word	0x20020738
   26490:	00049c90 	.word	0x00049c90

00026494 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   26494:	b508      	push	{r3, lr}
   26496:	4604      	mov	r4, r0
	__asm__ volatile(
   26498:	f04f 0220 	mov.w	r2, #32
   2649c:	f3ef 8311 	mrs	r3, BASEPRI
   264a0:	f382 8811 	msr	BASEPRI, r2
   264a4:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   264a8:	f01f f812 	bl	454d0 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   264ac:	4620      	mov	r0, r4
   264ae:	f001 fdcb 	bl	28048 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   264b2:	4803      	ldr	r0, [pc, #12]	; (264c0 <sys_reboot+0x2c>)
   264b4:	f01d ff0c 	bl	442d0 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   264b8:	f001 f9b8 	bl	2782c <arch_cpu_idle>
   264bc:	e7fc      	b.n	264b8 <sys_reboot+0x24>
   264be:	bf00      	nop
   264c0:	0004c8ea 	.word	0x0004c8ea

000264c4 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   264c4:	4b0a      	ldr	r3, [pc, #40]	; (264f0 <console_out+0x2c>)
{
   264c6:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   264c8:	b2c6      	uxtb	r6, r0
{
   264ca:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   264cc:	681b      	ldr	r3, [r3, #0]
   264ce:	4630      	mov	r0, r6
   264d0:	4798      	blx	r3

	if (handled_by_debug_server) {
   264d2:	2801      	cmp	r0, #1
   264d4:	d00a      	beq.n	264ec <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   264d6:	2c0a      	cmp	r4, #10
   264d8:	4d06      	ldr	r5, [pc, #24]	; (264f4 <console_out+0x30>)
   264da:	d103      	bne.n	264e4 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   264dc:	210d      	movs	r1, #13
   264de:	6828      	ldr	r0, [r5, #0]
   264e0:	f01e ff4f 	bl	45382 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   264e4:	4631      	mov	r1, r6
   264e6:	6828      	ldr	r0, [r5, #0]
   264e8:	f01e ff4b 	bl	45382 <uart_poll_out>

	return c;
}
   264ec:	4620      	mov	r0, r4
   264ee:	bd70      	pop	{r4, r5, r6, pc}
   264f0:	2002077c 	.word	0x2002077c
   264f4:	20024ad8 	.word	0x20024ad8

000264f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   264f8:	b510      	push	{r4, lr}
   264fa:	4807      	ldr	r0, [pc, #28]	; (26518 <uart_console_init+0x20>)
   264fc:	f018 f920 	bl	3e740 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
   26500:	4c06      	ldr	r4, [pc, #24]	; (2651c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   26502:	4b07      	ldr	r3, [pc, #28]	; (26520 <uart_console_init+0x28>)
   26504:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   26506:	4620      	mov	r0, r4
   26508:	f002 f80a 	bl	28520 <__stdout_hook_install>
	__printk_hook_install(console_out);
   2650c:	4620      	mov	r0, r4
   2650e:	f7fd fee7 	bl	242e0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   26512:	2000      	movs	r0, #0
   26514:	bd10      	pop	{r4, pc}
   26516:	bf00      	nop
   26518:	0004c426 	.word	0x0004c426
   2651c:	000264c5 	.word	0x000264c5
   26520:	20024ad8 	.word	0x20024ad8

00026524 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   26524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   26528:	4c0e      	ldr	r4, [pc, #56]	; (26564 <onoff_start+0x40>)
{
   2652a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   2652c:	1b05      	subs	r5, r0, r4
   2652e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   26532:	250c      	movs	r5, #12
   26534:	435d      	muls	r5, r3
   26536:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   2653a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   2653c:	4420      	add	r0, r4
   2653e:	2140      	movs	r1, #64	; 0x40
   26540:	f01e ff24 	bl	4538c <set_starting_state>
	if (err < 0) {
   26544:	1e01      	subs	r1, r0, #0
   26546:	db08      	blt.n	2655a <onoff_start+0x36>
	subdata->cb = data->cb;
   26548:	4b07      	ldr	r3, [pc, #28]	; (26568 <onoff_start+0x44>)
   2654a:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
   2654c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   26550:	4b06      	ldr	r3, [pc, #24]	; (2656c <onoff_start+0x48>)
   26552:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   26554:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   26558:	4718      	bx	r3
		notify(mgr, err);
   2655a:	4638      	mov	r0, r7
   2655c:	4633      	mov	r3, r6
}
   2655e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   26562:	4718      	bx	r3
   26564:	20024aec 	.word	0x20024aec
   26568:	000453ef 	.word	0x000453ef
   2656c:	00049cb4 	.word	0x00049cb4

00026570 <get_status>:
{
   26570:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   26572:	b2cc      	uxtb	r4, r1
   26574:	2c01      	cmp	r4, #1
{
   26576:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   26578:	d909      	bls.n	2658e <get_status+0x1e>
   2657a:	4909      	ldr	r1, [pc, #36]	; (265a0 <get_status+0x30>)
   2657c:	4809      	ldr	r0, [pc, #36]	; (265a4 <get_status+0x34>)
   2657e:	237d      	movs	r3, #125	; 0x7d
   26580:	4a09      	ldr	r2, [pc, #36]	; (265a8 <get_status+0x38>)
   26582:	f01d fea5 	bl	442d0 <printk>
   26586:	217d      	movs	r1, #125	; 0x7d
   26588:	4807      	ldr	r0, [pc, #28]	; (265a8 <get_status+0x38>)
   2658a:	f01e f8bb 	bl	44704 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2658e:	210c      	movs	r1, #12
   26590:	68eb      	ldr	r3, [r5, #12]
   26592:	fb04 3101 	mla	r1, r4, r1, r3
   26596:	6c88      	ldr	r0, [r1, #72]	; 0x48
}
   26598:	f000 0007 	and.w	r0, r0, #7
   2659c:	bd38      	pop	{r3, r4, r5, pc}
   2659e:	bf00      	nop
   265a0:	0004c950 	.word	0x0004c950
   265a4:	0004b33b 	.word	0x0004b33b
   265a8:	0004c913 	.word	0x0004c913

000265ac <stop>:
{
   265ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265ae:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   265b0:	2c01      	cmp	r4, #1
{
   265b2:	4605      	mov	r5, r0
   265b4:	4617      	mov	r7, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   265b6:	68c6      	ldr	r6, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   265b8:	d90b      	bls.n	265d2 <stop+0x26>
   265ba:	4919      	ldr	r1, [pc, #100]	; (26620 <stop+0x74>)
   265bc:	4819      	ldr	r0, [pc, #100]	; (26624 <stop+0x78>)
   265be:	f240 1345 	movw	r3, #325	; 0x145
   265c2:	4a19      	ldr	r2, [pc, #100]	; (26628 <stop+0x7c>)
   265c4:	f01d fe84 	bl	442d0 <printk>
   265c8:	f240 1145 	movw	r1, #325	; 0x145
   265cc:	4816      	ldr	r0, [pc, #88]	; (26628 <stop+0x7c>)
   265ce:	f01e f899 	bl	44704 <assert_post_action>
   265d2:	f04f 0320 	mov.w	r3, #32
   265d6:	f3ef 8111 	mrs	r1, BASEPRI
   265da:	f383 8811 	msr	BASEPRI, r3
   265de:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   265e2:	230c      	movs	r3, #12
   265e4:	fb03 6204 	mla	r2, r3, r4, r6
   265e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   265ea:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
   265ee:	d001      	beq.n	265f4 <stop+0x48>
   265f0:	4297      	cmp	r7, r2
   265f2:	d111      	bne.n	26618 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   265f4:	2201      	movs	r2, #1
	int err = 0;
   265f6:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   265f8:	fb03 6304 	mla	r3, r3, r4, r6
   265fc:	649a      	str	r2, [r3, #72]	; 0x48
	__asm__ volatile(
   265fe:	f381 8811 	msr	BASEPRI, r1
   26602:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   26606:	b930      	cbnz	r0, 26616 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   26608:	220c      	movs	r2, #12
   2660a:	686b      	ldr	r3, [r5, #4]
   2660c:	fb02 3404 	mla	r4, r2, r4, r3
   26610:	6863      	ldr	r3, [r4, #4]
   26612:	4798      	blx	r3
	return 0;
   26614:	2000      	movs	r0, #0
}
   26616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   26618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2661c:	e7ef      	b.n	265fe <stop+0x52>
   2661e:	bf00      	nop
   26620:	0004c950 	.word	0x0004c950
   26624:	0004b33b 	.word	0x0004b33b
   26628:	0004c913 	.word	0x0004c913

0002662c <onoff_stop>:
{
   2662c:	b570      	push	{r4, r5, r6, lr}
   2662e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   26630:	4906      	ldr	r1, [pc, #24]	; (2664c <onoff_stop+0x20>)
{
   26632:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   26634:	1a41      	subs	r1, r0, r1
	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
   26636:	1149      	asrs	r1, r1, #5
   26638:	2240      	movs	r2, #64	; 0x40
   2663a:	4805      	ldr	r0, [pc, #20]	; (26650 <onoff_stop+0x24>)
   2663c:	f7ff ffb6 	bl	265ac <stop>
	notify(mgr, res);
   26640:	462b      	mov	r3, r5
   26642:	4601      	mov	r1, r0
   26644:	4620      	mov	r0, r4
}
   26646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2664a:	4718      	bx	r3
   2664c:	20024aec 	.word	0x20024aec
   26650:	20020af4 	.word	0x20020af4

00026654 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   26654:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   26656:	2200      	movs	r2, #0
   26658:	2101      	movs	r1, #1
{
   2665a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2665c:	2005      	movs	r0, #5
   2665e:	f001 f85b 	bl	27718 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   26662:	2005      	movs	r0, #5
   26664:	f001 f83a 	bl	276dc <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
   26668:	480f      	ldr	r0, [pc, #60]	; (266a8 <clk_init+0x54>)
   2666a:	f017 fd73 	bl	3e154 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   2666e:	4b0f      	ldr	r3, [pc, #60]	; (266ac <clk_init+0x58>)
   26670:	4298      	cmp	r0, r3
   26672:	d115      	bne.n	266a0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   26674:	f017 fd92 	bl	3e19c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   26678:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   2667a:	490d      	ldr	r1, [pc, #52]	; (266b0 <clk_init+0x5c>)
   2667c:	4630      	mov	r0, r6
   2667e:	f01d fe82 	bl	44386 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   26682:	2800      	cmp	r0, #0
   26684:	db0b      	blt.n	2669e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   26686:	2501      	movs	r5, #1
   26688:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   2668a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   2668c:	4908      	ldr	r1, [pc, #32]	; (266b0 <clk_init+0x5c>)
   2668e:	f104 0020 	add.w	r0, r4, #32
   26692:	f01d fe78 	bl	44386 <onoff_manager_init>
		if (err < 0) {
   26696:	2800      	cmp	r0, #0
   26698:	db01      	blt.n	2669e <clk_init+0x4a>
	}

	return 0;
   2669a:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2669c:	6565      	str	r5, [r4, #84]	; 0x54
}
   2669e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   266a0:	f06f 0004 	mvn.w	r0, #4
   266a4:	e7fb      	b.n	2669e <clk_init+0x4a>
   266a6:	bf00      	nop
   266a8:	0002674d 	.word	0x0002674d
   266ac:	0bad0000 	.word	0x0bad0000
   266b0:	00049ccc 	.word	0x00049ccc

000266b4 <clkstarted_handle.constprop.10>:
static void clkstarted_handle(const struct device *dev,
   266b4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   266b6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
   266b8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
   266ba:	434b      	muls	r3, r1
   266bc:	4808      	ldr	r0, [pc, #32]	; (266e0 <clkstarted_handle.constprop.10+0x2c>)
static void clkstarted_handle(const struct device *dev,
   266be:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   266c0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   266c2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   266c4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   266c8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   266ca:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   266cc:	f01e fe7c 	bl	453c8 <set_on_state>
	if (callback) {
   266d0:	b12d      	cbz	r5, 266de <clkstarted_handle.constprop.10+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   266d2:	4632      	mov	r2, r6
   266d4:	462b      	mov	r3, r5
}
   266d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   266da:	4802      	ldr	r0, [pc, #8]	; (266e4 <clkstarted_handle.constprop.10+0x30>)
   266dc:	4718      	bx	r3
}
   266de:	bd70      	pop	{r4, r5, r6, pc}
   266e0:	20024aec 	.word	0x20024aec
   266e4:	20020af4 	.word	0x20020af4

000266e8 <generic_hfclk_start>:
{
   266e8:	b508      	push	{r3, lr}
	__asm__ volatile(
   266ea:	f04f 0320 	mov.w	r3, #32
   266ee:	f3ef 8111 	mrs	r1, BASEPRI
   266f2:	f383 8811 	msr	BASEPRI, r3
   266f6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   266fa:	4a11      	ldr	r2, [pc, #68]	; (26740 <generic_hfclk_start+0x58>)
   266fc:	6813      	ldr	r3, [r2, #0]
   266fe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   26702:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   26706:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   26708:	d00b      	beq.n	26722 <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2670a:	4a0e      	ldr	r2, [pc, #56]	; (26744 <generic_hfclk_start+0x5c>)
   2670c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   26710:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   26714:	f013 0301 	ands.w	r3, r3, #1
   26718:	d003      	beq.n	26722 <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   2671a:	480b      	ldr	r0, [pc, #44]	; (26748 <generic_hfclk_start+0x60>)
   2671c:	f01e fe54 	bl	453c8 <set_on_state>
			already_started = true;
   26720:	2301      	movs	r3, #1
	__asm__ volatile(
   26722:	f381 8811 	msr	BASEPRI, r1
   26726:	f3bf 8f6f 	isb	sy
	if (already_started) {
   2672a:	b123      	cbz	r3, 26736 <generic_hfclk_start+0x4e>
}
   2672c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
   26730:	2000      	movs	r0, #0
   26732:	f7ff bfbf 	b.w	266b4 <clkstarted_handle.constprop.10>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   26736:	2001      	movs	r0, #1
}
   26738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2673c:	f017 bd4e 	b.w	3e1dc <nrfx_clock_start>
   26740:	20024b44 	.word	0x20024b44
   26744:	40005000 	.word	0x40005000
   26748:	20024b34 	.word	0x20024b34

0002674c <clock_event_handler>:
	switch (event) {
   2674c:	2801      	cmp	r0, #1
{
   2674e:	b508      	push	{r3, lr}
	switch (event) {
   26750:	d011      	beq.n	26776 <clock_event_handler+0x2a>
   26752:	b158      	cbz	r0, 2676c <clock_event_handler+0x20>
   26754:	2803      	cmp	r0, #3
   26756:	d012      	beq.n	2677e <clock_event_handler+0x32>
		__ASSERT_NO_MSG(0);
   26758:	4910      	ldr	r1, [pc, #64]	; (2679c <clock_event_handler+0x50>)
   2675a:	f240 235a 	movw	r3, #602	; 0x25a
   2675e:	4a10      	ldr	r2, [pc, #64]	; (267a0 <clock_event_handler+0x54>)
   26760:	4810      	ldr	r0, [pc, #64]	; (267a4 <clock_event_handler+0x58>)
   26762:	f01d fdb5 	bl	442d0 <printk>
   26766:	f240 215a 	movw	r1, #602	; 0x25a
   2676a:	e011      	b.n	26790 <clock_event_handler+0x44>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2676c:	4b0e      	ldr	r3, [pc, #56]	; (267a8 <clock_event_handler+0x5c>)
   2676e:	6c98      	ldr	r0, [r3, #72]	; 0x48
   26770:	f010 0007 	ands.w	r0, r0, #7
   26774:	d111      	bne.n	2679a <clock_event_handler+0x4e>
}
   26776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   2677a:	f7ff bf9b 	b.w	266b4 <clkstarted_handle.constprop.10>
			__ASSERT_NO_MSG(false);
   2677e:	4907      	ldr	r1, [pc, #28]	; (2679c <clock_event_handler+0x50>)
   26780:	f240 2356 	movw	r3, #598	; 0x256
   26784:	4a06      	ldr	r2, [pc, #24]	; (267a0 <clock_event_handler+0x54>)
   26786:	4807      	ldr	r0, [pc, #28]	; (267a4 <clock_event_handler+0x58>)
   26788:	f01d fda2 	bl	442d0 <printk>
   2678c:	f240 2156 	movw	r1, #598	; 0x256
}
   26790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   26794:	4802      	ldr	r0, [pc, #8]	; (267a0 <clock_event_handler+0x54>)
   26796:	f01d bfb5 	b.w	44704 <assert_post_action>
}
   2679a:	bd08      	pop	{r3, pc}
   2679c:	00052672 	.word	0x00052672
   267a0:	0004c913 	.word	0x0004c913
   267a4:	0004b33b 	.word	0x0004b33b
   267a8:	20024aec 	.word	0x20024aec

000267ac <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   267ac:	4b07      	ldr	r3, [pc, #28]	; (267cc <generic_hfclk_stop+0x20>)
   267ae:	e8d3 2fef 	ldaex	r2, [r3]
   267b2:	f022 0102 	bic.w	r1, r2, #2
   267b6:	e8c3 1fe0 	stlex	r0, r1, [r3]
   267ba:	2800      	cmp	r0, #0
   267bc:	d1f7      	bne.n	267ae <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   267be:	07d3      	lsls	r3, r2, #31
   267c0:	d402      	bmi.n	267c8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   267c2:	2001      	movs	r0, #1
   267c4:	f017 bd60 	b.w	3e288 <nrfx_clock_stop>
}
   267c8:	4770      	bx	lr
   267ca:	bf00      	nop
   267cc:	20024b44 	.word	0x20024b44

000267d0 <api_blocking_start>:
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   267d0:	2300      	movs	r3, #0
   267d2:	2201      	movs	r2, #1
{
   267d4:	b510      	push	{r4, lr}
   267d6:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   267d8:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
   267dc:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   267de:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
   267e0:	4b0a      	ldr	r3, [pc, #40]	; (2680c <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   267e2:	ac04      	add	r4, sp, #16
   267e4:	e9cd 2208 	strd	r2, r2, [sp, #32]
	err = api_start(dev, subsys, &data);
   267e8:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   267ea:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
   267ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
   267f2:	f01e fe0e 	bl	45412 <api_start>
	if (err < 0) {
   267f6:	2800      	cmp	r0, #0
   267f8:	db05      	blt.n	26806 <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
   267fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   267fe:	2300      	movs	r3, #0
   26800:	4620      	mov	r0, r4
   26802:	f01a f89f 	bl	40944 <z_impl_k_sem_take>
}
   26806:	b00a      	add	sp, #40	; 0x28
   26808:	bd10      	pop	{r4, pc}
   2680a:	bf00      	nop
   2680c:	00045401 	.word	0x00045401

00026810 <z_nrf_clock_control_lf_on>:
{
   26810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26814:	2201      	movs	r2, #1
   26816:	4606      	mov	r6, r0
   26818:	4942      	ldr	r1, [pc, #264]	; (26924 <z_nrf_clock_control_lf_on+0x114>)
   2681a:	e8d1 3fef 	ldaex	r3, [r1]
   2681e:	e8c1 2fe0 	stlex	r0, r2, [r1]
   26822:	2800      	cmp	r0, #0
   26824:	d1f9      	bne.n	2681a <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   26826:	b9a3      	cbnz	r3, 26852 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   26828:	493f      	ldr	r1, [pc, #252]	; (26928 <z_nrf_clock_control_lf_on+0x118>)
		err = onoff_request(mgr, &cli);
   2682a:	4840      	ldr	r0, [pc, #256]	; (2692c <z_nrf_clock_control_lf_on+0x11c>)
   2682c:	604b      	str	r3, [r1, #4]
   2682e:	60cb      	str	r3, [r1, #12]
   26830:	608a      	str	r2, [r1, #8]
   26832:	f7fd ffad 	bl	24790 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   26836:	2800      	cmp	r0, #0
   26838:	da0b      	bge.n	26852 <z_nrf_clock_control_lf_on+0x42>
   2683a:	493d      	ldr	r1, [pc, #244]	; (26930 <z_nrf_clock_control_lf_on+0x120>)
   2683c:	483d      	ldr	r0, [pc, #244]	; (26934 <z_nrf_clock_control_lf_on+0x124>)
   2683e:	f240 2321 	movw	r3, #545	; 0x221
   26842:	4a3d      	ldr	r2, [pc, #244]	; (26938 <z_nrf_clock_control_lf_on+0x128>)
   26844:	f01d fd44 	bl	442d0 <printk>
   26848:	f240 2121 	movw	r1, #545	; 0x221
   2684c:	483a      	ldr	r0, [pc, #232]	; (26938 <z_nrf_clock_control_lf_on+0x128>)
   2684e:	f01d ff59 	bl	44704 <assert_post_action>
	switch (start_mode) {
   26852:	b376      	cbz	r6, 268b2 <z_nrf_clock_control_lf_on+0xa2>
   26854:	2e02      	cmp	r6, #2
   26856:	d850      	bhi.n	268fa <z_nrf_clock_control_lf_on+0xea>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   26858:	2e01      	cmp	r6, #1
   2685a:	d106      	bne.n	2686a <z_nrf_clock_control_lf_on+0x5a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2685c:	4b37      	ldr	r3, [pc, #220]	; (2693c <z_nrf_clock_control_lf_on+0x12c>)
   2685e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   26862:	f003 0303 	and.w	r3, r3, #3
   26866:	2b02      	cmp	r3, #2
   26868:	d023      	beq.n	268b2 <z_nrf_clock_control_lf_on+0xa2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2686a:	f021 fb43 	bl	47ef4 <k_is_in_isr>
   2686e:	b918      	cbnz	r0, 26878 <z_nrf_clock_control_lf_on+0x68>
	return !z_sys_post_kernel;
   26870:	4b33      	ldr	r3, [pc, #204]	; (26940 <z_nrf_clock_control_lf_on+0x130>)
	int key = isr_mode ? irq_lock() : 0;
   26872:	781b      	ldrb	r3, [r3, #0]
   26874:	2b00      	cmp	r3, #0
   26876:	d14e      	bne.n	26916 <z_nrf_clock_control_lf_on+0x106>
	__asm__ volatile(
   26878:	f04f 0320 	mov.w	r3, #32
   2687c:	f3ef 8911 	mrs	r9, BASEPRI
   26880:	f383 8811 	msr	BASEPRI, r3
   26884:	f3bf 8f6f 	isb	sy
   26888:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2688a:	4d2c      	ldr	r5, [pc, #176]	; (2693c <z_nrf_clock_control_lf_on+0x12c>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2688c:	4f2d      	ldr	r7, [pc, #180]	; (26944 <z_nrf_clock_control_lf_on+0x134>)
   2688e:	46a8      	mov	r8, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   26890:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   26894:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   26898:	03d2      	lsls	r2, r2, #15
   2689a:	d50c      	bpl.n	268b6 <z_nrf_clock_control_lf_on+0xa6>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   2689c:	f003 0303 	and.w	r3, r3, #3
   268a0:	2b02      	cmp	r3, #2
   268a2:	d001      	beq.n	268a8 <z_nrf_clock_control_lf_on+0x98>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   268a4:	2e01      	cmp	r6, #1
   268a6:	d106      	bne.n	268b6 <z_nrf_clock_control_lf_on+0xa6>
	if (isr_mode) {
   268a8:	b31c      	cbz	r4, 268f2 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
   268aa:	f389 8811 	msr	BASEPRI, r9
   268ae:	f3bf 8f6f 	isb	sy
}
   268b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   268b6:	b1bc      	cbz	r4, 268e8 <z_nrf_clock_control_lf_on+0xd8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   268b8:	4648      	mov	r0, r9
   268ba:	f000 ffc5 	bl	27848 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   268be:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   268c2:	b2db      	uxtb	r3, r3
   268c4:	2b01      	cmp	r3, #1
   268c6:	d1e3      	bne.n	26890 <z_nrf_clock_control_lf_on+0x80>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   268c8:	683a      	ldr	r2, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   268ca:	2a00      	cmp	r2, #0
   268cc:	d0e0      	beq.n	26890 <z_nrf_clock_control_lf_on+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   268ce:	2200      	movs	r2, #0
   268d0:	603a      	str	r2, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   268d2:	683a      	ldr	r2, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   268d4:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   268d6:	2120      	movs	r1, #32
   268d8:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   268dc:	4a1a      	ldr	r2, [pc, #104]	; (26948 <z_nrf_clock_control_lf_on+0x138>)
   268de:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   268e2:	4a1a      	ldr	r2, [pc, #104]	; (2694c <z_nrf_clock_control_lf_on+0x13c>)
   268e4:	6013      	str	r3, [r2, #0]
   268e6:	e7d3      	b.n	26890 <z_nrf_clock_control_lf_on+0x80>
	return z_impl_k_sleep(timeout);
   268e8:	2100      	movs	r1, #0
   268ea:	2021      	movs	r0, #33	; 0x21
   268ec:	f019 ffaa 	bl	40844 <z_impl_k_sleep>
   268f0:	e7e5      	b.n	268be <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENSET = mask;
   268f2:	2302      	movs	r3, #2
   268f4:	f8c8 3304 	str.w	r3, [r8, #772]	; 0x304
   268f8:	e7db      	b.n	268b2 <z_nrf_clock_control_lf_on+0xa2>
		__ASSERT_NO_MSG(false);
   268fa:	f240 2333 	movw	r3, #563	; 0x233
   268fe:	4914      	ldr	r1, [pc, #80]	; (26950 <z_nrf_clock_control_lf_on+0x140>)
   26900:	480c      	ldr	r0, [pc, #48]	; (26934 <z_nrf_clock_control_lf_on+0x124>)
   26902:	4a0d      	ldr	r2, [pc, #52]	; (26938 <z_nrf_clock_control_lf_on+0x128>)
   26904:	f01d fce4 	bl	442d0 <printk>
}
   26908:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   2690c:	f240 2133 	movw	r1, #563	; 0x233
   26910:	4809      	ldr	r0, [pc, #36]	; (26938 <z_nrf_clock_control_lf_on+0x128>)
   26912:	f01d bef7 	b.w	44704 <assert_post_action>
    p_reg->INTENCLR = mask;
   26916:	2202      	movs	r2, #2
   26918:	4b08      	ldr	r3, [pc, #32]	; (2693c <z_nrf_clock_control_lf_on+0x12c>)
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2691a:	4604      	mov	r4, r0
   2691c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   26920:	4681      	mov	r9, r0
   26922:	e7b2      	b.n	2688a <z_nrf_clock_control_lf_on+0x7a>
   26924:	20024b48 	.word	0x20024b48
   26928:	20024adc 	.word	0x20024adc
   2692c:	20024b0c 	.word	0x20024b0c
   26930:	0004c994 	.word	0x0004c994
   26934:	0004b33b 	.word	0x0004b33b
   26938:	0004c913 	.word	0x0004c913
   2693c:	40005000 	.word	0x40005000
   26940:	2002d1c4 	.word	0x2002d1c4
   26944:	40005104 	.word	0x40005104
   26948:	e000e100 	.word	0xe000e100
   2694c:	40005008 	.word	0x40005008
   26950:	00052672 	.word	0x00052672

00026954 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   26954:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   26956:	7b0b      	ldrb	r3, [r1, #12]
{
   26958:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2695a:	2b02      	cmp	r3, #2
{
   2695c:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   2695e:	d128      	bne.n	269b2 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   26960:	680b      	ldr	r3, [r1, #0]
   26962:	bb1b      	cbnz	r3, 269ac <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26964:	68c2      	ldr	r2, [r0, #12]
	return dev->data;
   26966:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   26968:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   2696c:	b9d9      	cbnz	r1, 269a6 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   2696e:	4914      	ldr	r1, [pc, #80]	; (269c0 <wdt_nrf_install_timeout+0x6c>)
   26970:	1e58      	subs	r0, r3, #1
   26972:	4288      	cmp	r0, r1
   26974:	d81a      	bhi.n	269ac <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   26976:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   26978:	f10d 0107 	add.w	r1, sp, #7
   2697c:	6860      	ldr	r0, [r4, #4]
   2697e:	f017 fe21 	bl	3e5c4 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   26982:	4b10      	ldr	r3, [pc, #64]	; (269c4 <wdt_nrf_install_timeout+0x70>)
   26984:	4298      	cmp	r0, r3
   26986:	d017      	beq.n	269b8 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   26988:	68ab      	ldr	r3, [r5, #8]
   2698a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2698e:	b113      	cbz	r3, 26996 <wdt_nrf_install_timeout+0x42>
   26990:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   26992:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   26996:	68e2      	ldr	r2, [r4, #12]
   26998:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   2699c:	3301      	adds	r3, #1
   2699e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   269a2:	b003      	add	sp, #12
   269a4:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   269a6:	6a12      	ldr	r2, [r2, #32]
   269a8:	429a      	cmp	r2, r3
   269aa:	d0e5      	beq.n	26978 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   269ac:	f06f 0015 	mvn.w	r0, #21
   269b0:	e7f7      	b.n	269a2 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   269b2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   269b6:	e7f4      	b.n	269a2 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   269b8:	f06f 000b 	mvn.w	r0, #11
   269bc:	e7f1      	b.n	269a2 <wdt_nrf_install_timeout+0x4e>
   269be:	bf00      	nop
   269c0:	07cffffe 	.word	0x07cffffe
   269c4:	0bad0002 	.word	0x0bad0002

000269c8 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   269c8:	b510      	push	{r4, lr}
   269ca:	4604      	mov	r4, r0
   269cc:	2200      	movs	r2, #0
   269ce:	2101      	movs	r1, #1
   269d0:	2018      	movs	r0, #24
   269d2:	f000 fea1 	bl	27718 <z_arm_irq_priority_set>
   269d6:	6860      	ldr	r0, [r4, #4]
   269d8:	4a05      	ldr	r2, [pc, #20]	; (269f0 <wdt_0_init+0x28>)
   269da:	f100 0108 	add.w	r1, r0, #8
   269de:	f017 fd67 	bl	3e4b0 <nrfx_wdt_init>
   269e2:	4b04      	ldr	r3, [pc, #16]	; (269f4 <wdt_0_init+0x2c>)
   269e4:	4298      	cmp	r0, r3
   269e6:	bf14      	ite	ne
   269e8:	f06f 000f 	mvnne.w	r0, #15
   269ec:	2000      	moveq	r0, #0
   269ee:	bd10      	pop	{r4, pc}
   269f0:	000269f9 	.word	0x000269f9
   269f4:	0bad0000 	.word	0x0bad0000

000269f8 <wdt_0_event_handler>:
   269f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   269fa:	2400      	movs	r4, #0
   269fc:	4d0a      	ldr	r5, [pc, #40]	; (26a28 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   269fe:	4e0b      	ldr	r6, [pc, #44]	; (26a2c <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   26a00:	4f0b      	ldr	r7, [pc, #44]	; (26a30 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26a02:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   26a06:	429c      	cmp	r4, r3
   26a08:	db00      	blt.n	26a0c <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   26a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26a0c:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   26a10:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   26a12:	07db      	lsls	r3, r3, #31
   26a14:	d505      	bpl.n	26a22 <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   26a16:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   26a1a:	b113      	cbz	r3, 26a22 <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   26a1c:	4621      	mov	r1, r4
   26a1e:	4638      	mov	r0, r7
   26a20:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26a22:	3401      	adds	r4, #1
   26a24:	e7ed      	b.n	26a02 <wdt_0_event_handler+0xa>
   26a26:	bf00      	nop
   26a28:	20024b4c 	.word	0x20024b4c
   26a2c:	40018000 	.word	0x40018000
   26a30:	20020b04 	.word	0x20020b04

00026a34 <reset_rx>:
}

static void reset_rx(void)
{
	rx.type = H4_NONE;
	rx.remaining = 0U;
   26a34:	2200      	movs	r2, #0
   26a36:	4b02      	ldr	r3, [pc, #8]	; (26a40 <reset_rx+0xc>)
   26a38:	841a      	strh	r2, [r3, #32]
	rx.have_hdr = false;
   26a3a:	625a      	str	r2, [r3, #36]	; 0x24
	rx.hdr_len = 0U;
	rx.discardable = false;
}
   26a3c:	4770      	bx	lr
   26a3e:	bf00      	nop
   26a40:	20020780 	.word	0x20020780

00026a44 <h4_send>:
		}
	}
}

static int h4_send(struct net_buf *buf)
{
   26a44:	b508      	push	{r3, lr}
	BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	net_buf_put(&tx.fifo, buf);
   26a46:	4601      	mov	r1, r0
   26a48:	4805      	ldr	r0, [pc, #20]	; (26a60 <h4_send+0x1c>)
   26a4a:	f002 fe73 	bl	29734 <net_buf_put>
	uart_irq_tx_enable(h4_dev);
   26a4e:	4b05      	ldr	r3, [pc, #20]	; (26a64 <h4_send+0x20>)
   26a50:	6818      	ldr	r0, [r3, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_enable) {
   26a52:	6883      	ldr	r3, [r0, #8]
   26a54:	69db      	ldr	r3, [r3, #28]
   26a56:	b103      	cbz	r3, 26a5a <h4_send+0x16>
		api->irq_tx_enable(dev);
   26a58:	4798      	blx	r3

	return 0;
}
   26a5a:	2000      	movs	r0, #0
   26a5c:	bd08      	pop	{r3, pc}
   26a5e:	bf00      	nop
   26a60:	200207b4 	.word	0x200207b4
   26a64:	20024b74 	.word	0x20024b74

00026a68 <get_rx>:
{
   26a68:	b410      	push	{r4}
	switch (rx.type) {
   26a6a:	4c0d      	ldr	r4, [pc, #52]	; (26aa0 <get_rx+0x38>)
{
   26a6c:	460b      	mov	r3, r1
	switch (rx.type) {
   26a6e:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
{
   26a72:	4602      	mov	r2, r0
	switch (rx.type) {
   26a74:	2902      	cmp	r1, #2
   26a76:	d009      	beq.n	26a8c <get_rx+0x24>
   26a78:	2904      	cmp	r1, #4
   26a7a:	d10c      	bne.n	26a96 <get_rx+0x2e>
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   26a7c:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   26a80:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
}
   26a84:	f85d 4b04 	ldr.w	r4, [sp], #4
		return bt_buf_get_evt(rx.evt.evt, rx.discardable, timeout);
   26a88:	f002 bc26 	b.w	292d8 <bt_buf_get_evt>
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   26a8c:	2003      	movs	r0, #3
}
   26a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
		return bt_buf_get_rx(BT_BUF_ACL_IN, timeout);
   26a92:	f002 bbc7 	b.w	29224 <bt_buf_get_rx>
}
   26a96:	2000      	movs	r0, #0
   26a98:	f85d 4b04 	ldr.w	r4, [sp], #4
   26a9c:	4770      	bx	lr
   26a9e:	bf00      	nop
   26aa0:	20020780 	.word	0x20020780

00026aa4 <copy_hdr>:
	net_buf_add_mem(buf, rx.hdr, rx.hdr_len);
   26aa4:	4903      	ldr	r1, [pc, #12]	; (26ab4 <copy_hdr+0x10>)
   26aa6:	3008      	adds	r0, #8
   26aa8:	f891 2026 	ldrb.w	r2, [r1, #38]	; 0x26
   26aac:	3128      	adds	r1, #40	; 0x28
   26aae:	f01f b823 	b.w	45af8 <net_buf_simple_add_mem>
   26ab2:	bf00      	nop
   26ab4:	20020780 	.word	0x20020780

00026ab8 <bt_uart_init>:
	.open		= h4_open,
	.send		= h4_send,
};

static int bt_uart_init(const struct device *unused)
{
   26ab8:	b508      	push	{r3, lr}
   26aba:	4807      	ldr	r0, [pc, #28]	; (26ad8 <bt_uart_init+0x20>)
   26abc:	f017 fe40 	bl	3e740 <z_impl_device_get_binding>
	ARG_UNUSED(unused);

	h4_dev = device_get_binding(CONFIG_BT_UART_ON_DEV_NAME);
   26ac0:	4b06      	ldr	r3, [pc, #24]	; (26adc <bt_uart_init+0x24>)
   26ac2:	6018      	str	r0, [r3, #0]
	if (!h4_dev) {
   26ac4:	b120      	cbz	r0, 26ad0 <bt_uart_init+0x18>
		return -EINVAL;
	}

	bt_hci_driver_register(&drv);
   26ac6:	4806      	ldr	r0, [pc, #24]	; (26ae0 <bt_uart_init+0x28>)
   26ac8:	f002 f98c 	bl	28de4 <bt_hci_driver_register>

	return 0;
   26acc:	2000      	movs	r0, #0
}
   26ace:	bd08      	pop	{r3, pc}
		return -EINVAL;
   26ad0:	f06f 0015 	mvn.w	r0, #21
   26ad4:	e7fb      	b.n	26ace <bt_uart_init+0x16>
   26ad6:	bf00      	nop
   26ad8:	0004c55d 	.word	0x0004c55d
   26adc:	20024b74 	.word	0x20024b74
   26ae0:	00049cfc 	.word	0x00049cfc

00026ae4 <rx_thread>:
{
   26ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		uart_irq_rx_enable(h4_dev);
   26ae8:	4f28      	ldr	r7, [pc, #160]	; (26b8c <rx_thread+0xa8>)
   26aea:	4d29      	ldr	r5, [pc, #164]	; (26b90 <rx_thread+0xac>)
   26aec:	46b8      	mov	r8, r7
				BT_ERR("Not enough space in buffer");
   26aee:	4b29      	ldr	r3, [pc, #164]	; (26b94 <rx_thread+0xb0>)
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   26af0:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 26ba0 <rx_thread+0xbc>
				BT_ERR("Not enough space in buffer");
   26af4:	1aed      	subs	r5, r5, r3
   26af6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (rx.have_hdr && !rx.buf) {
   26afa:	4c27      	ldr	r4, [pc, #156]	; (26b98 <rx_thread+0xb4>)
   26afc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   26b00:	b1fb      	cbz	r3, 26b42 <rx_thread+0x5e>
   26b02:	6823      	ldr	r3, [r4, #0]
   26b04:	b9eb      	cbnz	r3, 26b42 <rx_thread+0x5e>
			rx.buf = get_rx(K_FOREVER);
   26b06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   26b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26b0e:	f7ff ffab 	bl	26a68 <get_rx>
   26b12:	6020      	str	r0, [r4, #0]
			if (rx.remaining > net_buf_tailroom(rx.buf)) {
   26b14:	3008      	adds	r0, #8
   26b16:	f8b4 a020 	ldrh.w	sl, [r4, #32]
   26b1a:	f01e ffe5 	bl	45ae8 <net_buf_simple_tailroom>
   26b1e:	4582      	cmp	sl, r0
   26b20:	d930      	bls.n	26b84 <rx_thread+0xa0>
				BT_ERR("Not enough space in buffer");
   26b22:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   26b26:	f043 0301 	orr.w	r3, r3, #1
   26b2a:	f363 0607 	bfi	r6, r3, #0, #8
   26b2e:	f365 168f 	bfi	r6, r5, #6, #10
   26b32:	491a      	ldr	r1, [pc, #104]	; (26b9c <rx_thread+0xb8>)
   26b34:	4630      	mov	r0, r6
   26b36:	f01d fdf6 	bl	44726 <log_string_sync>
				rx.discard = rx.remaining;
   26b3a:	8c23      	ldrh	r3, [r4, #32]
   26b3c:	8463      	strh	r3, [r4, #34]	; 0x22
				reset_rx();
   26b3e:	f7ff ff79 	bl	26a34 <reset_rx>
		uart_irq_rx_enable(h4_dev);
   26b42:	6838      	ldr	r0, [r7, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   26b44:	f01e fcb9 	bl	454ba <z_impl_uart_irq_rx_enable>
		buf = net_buf_get(&rx.fifo, K_FOREVER);
   26b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26b50:	4648      	mov	r0, r9
   26b52:	f002 fd91 	bl	29678 <net_buf_get>
   26b56:	4604      	mov	r4, r0
			uart_irq_rx_enable(h4_dev);
   26b58:	f8d8 0000 	ldr.w	r0, [r8]
   26b5c:	f01e fcad 	bl	454ba <z_impl_uart_irq_rx_enable>
			bt_recv(buf);
   26b60:	4620      	mov	r0, r4
   26b62:	f002 f8bb 	bl	28cdc <bt_recv>
	z_impl_k_yield();
   26b66:	f019 fd27 	bl	405b8 <z_impl_k_yield>
			uart_irq_rx_disable(h4_dev);
   26b6a:	f8d8 0000 	ldr.w	r0, [r8]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_disable(dev);
   26b6e:	f01e fca9 	bl	454c4 <z_impl_uart_irq_rx_disable>
			buf = net_buf_get(&rx.fifo, K_NO_WAIT);
   26b72:	2200      	movs	r2, #0
   26b74:	2300      	movs	r3, #0
   26b76:	4648      	mov	r0, r9
   26b78:	f002 fd7e 	bl	29678 <net_buf_get>
		} while (buf);
   26b7c:	4604      	mov	r4, r0
   26b7e:	2800      	cmp	r0, #0
   26b80:	d1ea      	bne.n	26b58 <rx_thread+0x74>
   26b82:	e7ba      	b.n	26afa <rx_thread+0x16>
				copy_hdr(rx.buf);
   26b84:	6820      	ldr	r0, [r4, #0]
   26b86:	f7ff ff8d 	bl	26aa4 <copy_hdr>
   26b8a:	e7da      	b.n	26b42 <rx_thread+0x5e>
   26b8c:	20024b74 	.word	0x20024b74
   26b90:	000497c8 	.word	0x000497c8
   26b94:	00049788 	.word	0x00049788
   26b98:	20020780 	.word	0x20020780
   26b9c:	0004ca70 	.word	0x0004ca70
   26ba0:	20020784 	.word	0x20020784

00026ba4 <bt_uart_isr>:
{
   26ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ba8:	4b9c      	ldr	r3, [pc, #624]	; (26e1c <bt_uart_isr+0x278>)
			BT_WARN("Unable to send H:4 type");
   26baa:	4a9d      	ldr	r2, [pc, #628]	; (26e20 <bt_uart_isr+0x27c>)
{
   26bac:	b091      	sub	sp, #68	; 0x44
			BT_WARN("Unable to send H:4 type");
   26bae:	1a9b      	subs	r3, r3, r2
   26bb0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   26bb4:	4d9b      	ldr	r5, [pc, #620]	; (26e24 <bt_uart_isr+0x280>)
			BT_WARN("Unable to send H:4 type");
   26bb6:	9301      	str	r3, [sp, #4]
	if (!tx.buf) {
   26bb8:	4c9b      	ldr	r4, [pc, #620]	; (26e28 <bt_uart_isr+0x284>)
	while (uart_irq_update(h4_dev) && uart_irq_is_pending(h4_dev)) {
   26bba:	6828      	ldr	r0, [r5, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   26bbc:	6883      	ldr	r3, [r0, #8]
   26bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26bc0:	b13b      	cbz	r3, 26bd2 <bt_uart_isr+0x2e>
		return api->irq_update(dev);
   26bc2:	4798      	blx	r3
   26bc4:	b128      	cbz	r0, 26bd2 <bt_uart_isr+0x2e>
   26bc6:	6828      	ldr	r0, [r5, #0]
	if (api->irq_is_pending)	{
   26bc8:	6883      	ldr	r3, [r0, #8]
   26bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   26bcc:	b10b      	cbz	r3, 26bd2 <bt_uart_isr+0x2e>
		return api->irq_is_pending(dev);
   26bce:	4798      	blx	r3
   26bd0:	b910      	cbnz	r0, 26bd8 <bt_uart_isr+0x34>
}
   26bd2:	b011      	add	sp, #68	; 0x44
   26bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (uart_irq_tx_ready(h4_dev)) {
   26bd8:	6828      	ldr	r0, [r5, #0]
	if (api->irq_tx_ready) {
   26bda:	6883      	ldr	r3, [r0, #8]
   26bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   26bde:	2b00      	cmp	r3, #0
   26be0:	d03b      	beq.n	26c5a <bt_uart_isr+0xb6>
		return api->irq_tx_ready(dev);
   26be2:	4798      	blx	r3
   26be4:	2800      	cmp	r0, #0
   26be6:	d038      	beq.n	26c5a <bt_uart_isr+0xb6>
	if (!tx.buf) {
   26be8:	6863      	ldr	r3, [r4, #4]
   26bea:	b9bb      	cbnz	r3, 26c1c <bt_uart_isr+0x78>
		tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   26bec:	2200      	movs	r2, #0
   26bee:	2300      	movs	r3, #0
   26bf0:	488e      	ldr	r0, [pc, #568]	; (26e2c <bt_uart_isr+0x288>)
   26bf2:	f002 fd41 	bl	29678 <net_buf_get>
   26bf6:	6060      	str	r0, [r4, #4]
		if (!tx.buf) {
   26bf8:	b980      	cbnz	r0, 26c1c <bt_uart_isr+0x78>
			BT_ERR("TX interrupt but no pending buffer!");
   26bfa:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   26bfe:	f043 0301 	orr.w	r3, r3, #1
   26c02:	f363 0907 	bfi	r9, r3, #0, #8
   26c06:	9b01      	ldr	r3, [sp, #4]
   26c08:	4989      	ldr	r1, [pc, #548]	; (26e30 <bt_uart_isr+0x28c>)
   26c0a:	f363 198f 	bfi	r9, r3, #6, #10
   26c0e:	4648      	mov	r0, r9
   26c10:	f01d fd89 	bl	44726 <log_string_sync>
		uart_irq_tx_disable(h4_dev);
   26c14:	6828      	ldr	r0, [r5, #0]
	z_impl_uart_irq_tx_disable(dev);
   26c16:	f01e fc4b 	bl	454b0 <z_impl_uart_irq_tx_disable>
   26c1a:	e01e      	b.n	26c5a <bt_uart_isr+0xb6>
	if (!tx.type) {
   26c1c:	7823      	ldrb	r3, [r4, #0]
   26c1e:	2b00      	cmp	r3, #0
   26c20:	d154      	bne.n	26ccc <bt_uart_isr+0x128>
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   26c22:	6863      	ldr	r3, [r4, #4]
   26c24:	7d1b      	ldrb	r3, [r3, #20]
		switch (bt_buf_get_type(tx.buf)) {
   26c26:	2b00      	cmp	r3, #0
   26c28:	d02e      	beq.n	26c88 <bt_uart_isr+0xe4>
   26c2a:	2b02      	cmp	r3, #2
   26c2c:	d12e      	bne.n	26c8c <bt_uart_isr+0xe8>
			tx.type = H4_CMD;
   26c2e:	7023      	strb	r3, [r4, #0]
		bytes = uart_fifo_fill(h4_dev, &tx.type, 1);
   26c30:	4b7c      	ldr	r3, [pc, #496]	; (26e24 <bt_uart_isr+0x280>)
   26c32:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_fill) {
   26c34:	6883      	ldr	r3, [r0, #8]
   26c36:	695b      	ldr	r3, [r3, #20]
   26c38:	2b00      	cmp	r3, #0
   26c3a:	d142      	bne.n	26cc2 <bt_uart_isr+0x11e>
			BT_WARN("Unable to send H:4 type");
   26c3c:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   26c40:	f043 0302 	orr.w	r3, r3, #2
   26c44:	f363 0b07 	bfi	fp, r3, #0, #8
   26c48:	9b01      	ldr	r3, [sp, #4]
   26c4a:	497a      	ldr	r1, [pc, #488]	; (26e34 <bt_uart_isr+0x290>)
   26c4c:	f363 1b8f 	bfi	fp, r3, #6, #10
   26c50:	4658      	mov	r0, fp
   26c52:	f01d fd68 	bl	44726 <log_string_sync>
			tx.type = H4_NONE;
   26c56:	2300      	movs	r3, #0
   26c58:	7023      	strb	r3, [r4, #0]
		if (uart_irq_rx_ready(h4_dev)) {
   26c5a:	6828      	ldr	r0, [r5, #0]
	if (api->irq_rx_ready) {
   26c5c:	6883      	ldr	r3, [r0, #8]
   26c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26c60:	2b00      	cmp	r3, #0
   26c62:	d0aa      	beq.n	26bba <bt_uart_isr+0x16>
		return api->irq_rx_ready(dev);
   26c64:	4798      	blx	r3
   26c66:	2800      	cmp	r0, #0
   26c68:	d0a7      	beq.n	26bba <bt_uart_isr+0x16>
	if (rx.discard) {
   26c6a:	4c73      	ldr	r4, [pc, #460]	; (26e38 <bt_uart_isr+0x294>)
   26c6c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   26c6e:	2a00      	cmp	r2, #0
   26c70:	d041      	beq.n	26cf6 <bt_uart_isr+0x152>
	return uart_fifo_read(uart, buf, MIN(len, sizeof(buf)));
   26c72:	2a21      	cmp	r2, #33	; 0x21
   26c74:	bf28      	it	cs
   26c76:	2221      	movcs	r2, #33	; 0x21
   26c78:	a907      	add	r1, sp, #28
   26c7a:	6828      	ldr	r0, [r5, #0]
   26c7c:	f01e fc12 	bl	454a4 <uart_fifo_read>
		rx.discard -= h4_discard(h4_dev, rx.discard);
   26c80:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   26c82:	1a18      	subs	r0, r3, r0
   26c84:	8460      	strh	r0, [r4, #34]	; 0x22
		return;
   26c86:	e797      	b.n	26bb8 <bt_uart_isr+0x14>
			tx.type = H4_CMD;
   26c88:	2301      	movs	r3, #1
   26c8a:	e7d0      	b.n	26c2e <bt_uart_isr+0x8a>
			BT_ERR("Unknown buffer type");
   26c8c:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   26c90:	f043 0301 	orr.w	r3, r3, #1
   26c94:	f363 0a07 	bfi	sl, r3, #0, #8
   26c98:	9b01      	ldr	r3, [sp, #4]
   26c9a:	4968      	ldr	r1, [pc, #416]	; (26e3c <bt_uart_isr+0x298>)
   26c9c:	f363 1a8f 	bfi	sl, r3, #6, #10
   26ca0:	4650      	mov	r0, sl
   26ca2:	f01d fd40 	bl	44726 <log_string_sync>
	tx.type = H4_NONE;
   26ca6:	2300      	movs	r3, #0
	net_buf_unref(tx.buf);
   26ca8:	6860      	ldr	r0, [r4, #4]
	tx.type = H4_NONE;
   26caa:	7023      	strb	r3, [r4, #0]
	net_buf_unref(tx.buf);
   26cac:	f002 fd76 	bl	2979c <net_buf_unref>
	tx.buf = net_buf_get(&tx.fifo, K_NO_WAIT);
   26cb0:	2200      	movs	r2, #0
   26cb2:	2300      	movs	r3, #0
   26cb4:	485d      	ldr	r0, [pc, #372]	; (26e2c <bt_uart_isr+0x288>)
   26cb6:	f002 fcdf 	bl	29678 <net_buf_get>
   26cba:	6060      	str	r0, [r4, #4]
	if (!tx.buf) {
   26cbc:	2800      	cmp	r0, #0
   26cbe:	d1cc      	bne.n	26c5a <bt_uart_isr+0xb6>
   26cc0:	e7a8      	b.n	26c14 <bt_uart_isr+0x70>
		return api->fifo_fill(dev, tx_data, size);
   26cc2:	2201      	movs	r2, #1
   26cc4:	4621      	mov	r1, r4
   26cc6:	4798      	blx	r3
		if (bytes != 1) {
   26cc8:	2801      	cmp	r0, #1
   26cca:	d1b7      	bne.n	26c3c <bt_uart_isr+0x98>
	bytes = uart_fifo_fill(h4_dev, tx.buf->data, tx.buf->len);
   26ccc:	4b55      	ldr	r3, [pc, #340]	; (26e24 <bt_uart_isr+0x280>)
   26cce:	6818      	ldr	r0, [r3, #0]
	if (api->fifo_fill) {
   26cd0:	6883      	ldr	r3, [r0, #8]
   26cd2:	695b      	ldr	r3, [r3, #20]
   26cd4:	b16b      	cbz	r3, 26cf2 <bt_uart_isr+0x14e>
   26cd6:	6861      	ldr	r1, [r4, #4]
		return api->fifo_fill(dev, tx_data, size);
   26cd8:	898a      	ldrh	r2, [r1, #12]
   26cda:	6889      	ldr	r1, [r1, #8]
   26cdc:	4798      	blx	r3
   26cde:	4601      	mov	r1, r0
	net_buf_pull(tx.buf, bytes);
   26ce0:	6860      	ldr	r0, [r4, #4]
   26ce2:	3008      	adds	r0, #8
   26ce4:	f002 fdba 	bl	2985c <net_buf_simple_pull>
	if (tx.buf->len) {
   26ce8:	6863      	ldr	r3, [r4, #4]
   26cea:	899b      	ldrh	r3, [r3, #12]
   26cec:	2b00      	cmp	r3, #0
   26cee:	d0da      	beq.n	26ca6 <bt_uart_isr+0x102>
   26cf0:	e7b3      	b.n	26c5a <bt_uart_isr+0xb6>
	return 0;
   26cf2:	4619      	mov	r1, r3
   26cf4:	e7f4      	b.n	26ce0 <bt_uart_isr+0x13c>
	if (rx.have_hdr) {
   26cf6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   26cfa:	2b00      	cmp	r3, #0
   26cfc:	f000 80a8 	beq.w	26e50 <bt_uart_isr+0x2ac>
	if (!rx.buf) {
   26d00:	6823      	ldr	r3, [r4, #0]
   26d02:	2b00      	cmp	r3, #0
   26d04:	d146      	bne.n	26d94 <bt_uart_isr+0x1f0>
		rx.buf = get_rx(K_NO_WAIT);
   26d06:	2000      	movs	r0, #0
   26d08:	2100      	movs	r1, #0
   26d0a:	f7ff fead 	bl	26a68 <get_rx>
   26d0e:	6020      	str	r0, [r4, #0]
		if (!rx.buf) {
   26d10:	bb38      	cbnz	r0, 26d62 <bt_uart_isr+0x1be>
			if (rx.discardable) {
   26d12:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   26d16:	b19b      	cbz	r3, 26d40 <bt_uart_isr+0x19c>
				BT_WARN("Discarding event 0x%02x", rx.evt.evt);
   26d18:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   26d1c:	f043 0302 	orr.w	r3, r3, #2
   26d20:	f363 0607 	bfi	r6, r3, #0, #8
   26d24:	9b01      	ldr	r3, [sp, #4]
   26d26:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   26d2a:	f363 168f 	bfi	r6, r3, #6, #10
   26d2e:	4944      	ldr	r1, [pc, #272]	; (26e40 <bt_uart_isr+0x29c>)
   26d30:	4630      	mov	r0, r6
   26d32:	f01d fcf8 	bl	44726 <log_string_sync>
			rx.discard = rx.remaining;
   26d36:	8c23      	ldrh	r3, [r4, #32]
   26d38:	8463      	strh	r3, [r4, #34]	; 0x22
			reset_rx();
   26d3a:	f7ff fe7b 	bl	26a34 <reset_rx>
   26d3e:	e73b      	b.n	26bb8 <bt_uart_isr+0x14>
			BT_WARN("Failed to allocate, deferring to rx_thread");
   26d40:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   26d44:	f043 0302 	orr.w	r3, r3, #2
   26d48:	f363 0707 	bfi	r7, r3, #0, #8
   26d4c:	9b01      	ldr	r3, [sp, #4]
   26d4e:	493d      	ldr	r1, [pc, #244]	; (26e44 <bt_uart_isr+0x2a0>)
   26d50:	f363 178f 	bfi	r7, r3, #6, #10
   26d54:	4638      	mov	r0, r7
   26d56:	f01d fce6 	bl	44726 <log_string_sync>
			uart_irq_rx_disable(h4_dev);
   26d5a:	6828      	ldr	r0, [r5, #0]
	z_impl_uart_irq_rx_disable(dev);
   26d5c:	f01e fbb2 	bl	454c4 <z_impl_uart_irq_rx_disable>
   26d60:	e72a      	b.n	26bb8 <bt_uart_isr+0x14>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   26d62:	8c23      	ldrh	r3, [r4, #32]
   26d64:	3008      	adds	r0, #8
   26d66:	9305      	str	r3, [sp, #20]
   26d68:	f01e febe 	bl	45ae8 <net_buf_simple_tailroom>
   26d6c:	9b05      	ldr	r3, [sp, #20]
   26d6e:	4283      	cmp	r3, r0
   26d70:	d90d      	bls.n	26d8e <bt_uart_isr+0x1ea>
			BT_ERR("Not enough space in buffer");
   26d72:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   26d76:	f043 0301 	orr.w	r3, r3, #1
   26d7a:	f363 0807 	bfi	r8, r3, #0, #8
   26d7e:	9b01      	ldr	r3, [sp, #4]
   26d80:	4931      	ldr	r1, [pc, #196]	; (26e48 <bt_uart_isr+0x2a4>)
   26d82:	f363 188f 	bfi	r8, r3, #6, #10
   26d86:	4640      	mov	r0, r8
			BT_ERR("Not enough space in buffer");
   26d88:	f01d fccd 	bl	44726 <log_string_sync>
   26d8c:	e7d3      	b.n	26d36 <bt_uart_isr+0x192>
		copy_hdr(rx.buf);
   26d8e:	6820      	ldr	r0, [r4, #0]
   26d90:	f7ff fe88 	bl	26aa4 <copy_hdr>
	read = uart_fifo_read(h4_dev, net_buf_tail(rx.buf), rx.remaining);
   26d94:	6823      	ldr	r3, [r4, #0]
   26d96:	8c22      	ldrh	r2, [r4, #32]
 *
 * @return Tail pointer for the buffer.
 */
static inline uint8_t *net_buf_simple_tail(struct net_buf_simple *buf)
{
	return buf->data + buf->len;
   26d98:	8999      	ldrh	r1, [r3, #12]
   26d9a:	689b      	ldr	r3, [r3, #8]
   26d9c:	6828      	ldr	r0, [r5, #0]
   26d9e:	4419      	add	r1, r3
   26da0:	f01e fb80 	bl	454a4 <uart_fifo_read>
   26da4:	4603      	mov	r3, r0
	net_buf_add(rx.buf, read);
   26da6:	6820      	ldr	r0, [r4, #0]
   26da8:	4619      	mov	r1, r3
   26daa:	3008      	adds	r0, #8
   26dac:	9305      	str	r3, [sp, #20]
   26dae:	f002 fd97 	bl	298e0 <net_buf_simple_add>
	rx.remaining -= read;
   26db2:	8c20      	ldrh	r0, [r4, #32]
   26db4:	9b05      	ldr	r3, [sp, #20]
   26db6:	1ac0      	subs	r0, r0, r3
   26db8:	b280      	uxth	r0, r0
   26dba:	8420      	strh	r0, [r4, #32]
	if (rx.remaining) {
   26dbc:	2800      	cmp	r0, #0
   26dbe:	f47f aefb 	bne.w	26bb8 <bt_uart_isr+0x14>
	if (rx.type == H4_EVT) {
   26dc2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	buf = rx.buf;
   26dc6:	6821      	ldr	r1, [r4, #0]
	if (rx.type == H4_EVT) {
   26dc8:	2b04      	cmp	r3, #4
	rx.buf = NULL;
   26dca:	6020      	str	r0, [r4, #0]
	if (rx.type == H4_EVT) {
   26dcc:	d121      	bne.n	26e12 <bt_uart_isr+0x26e>
		evt_flags = bt_hci_evt_get_flags(rx.evt.evt);
   26dce:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26dd2:	2b05      	cmp	r3, #5
   26dd4:	d019      	beq.n	26e0a <bt_uart_isr+0x266>
   26dd6:	d31a      	bcc.n	26e0e <bt_uart_isr+0x26a>
   26dd8:	3b0e      	subs	r3, #14
	case BT_HCI_EVT_DATA_BUF_OVERFLOW:
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   26dda:	2b01      	cmp	r3, #1
   26ddc:	bf8c      	ite	hi
   26dde:	2402      	movhi	r4, #2
   26de0:	2401      	movls	r4, #1
	*(uint8_t *)net_buf_user_data(buf) = type;
   26de2:	2301      	movs	r3, #1
   26de4:	750b      	strb	r3, [r1, #20]
   26de6:	9105      	str	r1, [sp, #20]
	reset_rx();
   26de8:	f7ff fe24 	bl	26a34 <reset_rx>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   26dec:	f014 0f01 	tst.w	r4, #1
   26df0:	9905      	ldr	r1, [sp, #20]
   26df2:	d003      	beq.n	26dfc <bt_uart_isr+0x258>
		bt_recv_prio(buf);
   26df4:	4608      	mov	r0, r1
   26df6:	f001 ffd7 	bl	28da8 <bt_recv_prio>
   26dfa:	9905      	ldr	r1, [sp, #20]
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   26dfc:	07a3      	lsls	r3, r4, #30
   26dfe:	f57f aedb 	bpl.w	26bb8 <bt_uart_isr+0x14>
		net_buf_put(&rx.fifo, buf);
   26e02:	4812      	ldr	r0, [pc, #72]	; (26e4c <bt_uart_isr+0x2a8>)
   26e04:	f002 fc96 	bl	29734 <net_buf_put>
   26e08:	e6d6      	b.n	26bb8 <bt_uart_isr+0x14>
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26e0a:	2403      	movs	r4, #3
   26e0c:	e7e9      	b.n	26de2 <bt_uart_isr+0x23e>
	default:
		return BT_HCI_EVT_FLAG_RECV;
   26e0e:	2402      	movs	r4, #2
   26e10:	e7e7      	b.n	26de2 <bt_uart_isr+0x23e>
   26e12:	2303      	movs	r3, #3
		evt_flags = BT_HCI_EVT_FLAG_RECV;
   26e14:	2402      	movs	r4, #2
   26e16:	750b      	strb	r3, [r1, #20]
   26e18:	e7e5      	b.n	26de6 <bt_uart_isr+0x242>
   26e1a:	bf00      	nop
   26e1c:	000497c8 	.word	0x000497c8
   26e20:	00049788 	.word	0x00049788
   26e24:	20024b74 	.word	0x20024b74
   26e28:	200207ac 	.word	0x200207ac
   26e2c:	200207b4 	.word	0x200207b4
   26e30:	0004c9a6 	.word	0x0004c9a6
   26e34:	0004c9de 	.word	0x0004c9de
   26e38:	20020780 	.word	0x20020780
   26e3c:	0004c9ca 	.word	0x0004c9ca
   26e40:	0004c9f6 	.word	0x0004c9f6
   26e44:	0004ca0e 	.word	0x0004ca0e
   26e48:	0004ca70 	.word	0x0004ca70
   26e4c:	20020784 	.word	0x20020784
	switch (rx.type) {
   26e50:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   26e54:	2b02      	cmp	r3, #2
   26e56:	f000 809b 	beq.w	26f90 <bt_uart_isr+0x3ec>
   26e5a:	2b04      	cmp	r3, #4
   26e5c:	d044      	beq.n	26ee8 <bt_uart_isr+0x344>
   26e5e:	9305      	str	r3, [sp, #20]
   26e60:	2b00      	cmp	r3, #0
   26e62:	f040 80a6 	bne.w	26fb2 <bt_uart_isr+0x40e>
	if (uart_fifo_read(h4_dev, &rx.type, 1) != 1) {
   26e66:	2201      	movs	r2, #1
   26e68:	f104 0127 	add.w	r1, r4, #39	; 0x27
   26e6c:	6828      	ldr	r0, [r5, #0]
   26e6e:	f01e fb19 	bl	454a4 <uart_fifo_read>
   26e72:	2801      	cmp	r0, #1
   26e74:	d015      	beq.n	26ea2 <bt_uart_isr+0x2fe>
		BT_WARN("Unable to read H:4 packet type");
   26e76:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   26e7a:	4953      	ldr	r1, [pc, #332]	; (26fc8 <bt_uart_isr+0x424>)
   26e7c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   26e80:	f042 0202 	orr.w	r2, r2, #2
   26e84:	f362 0307 	bfi	r3, r2, #0, #8
   26e88:	9a01      	ldr	r2, [sp, #4]
   26e8a:	b29b      	uxth	r3, r3
   26e8c:	f362 138f 	bfi	r3, r2, #6, #10
   26e90:	b298      	uxth	r0, r3
   26e92:	f8ad 3008 	strh.w	r3, [sp, #8]
   26e96:	f01d fc46 	bl	44726 <log_string_sync>
		rx.type = H4_NONE;
   26e9a:	9b05      	ldr	r3, [sp, #20]
		rx.type = H4_NONE;
   26e9c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
   26ea0:	e68a      	b.n	26bb8 <bt_uart_isr+0x14>
	switch (rx.type) {
   26ea2:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   26ea6:	2a02      	cmp	r2, #2
   26ea8:	d006      	beq.n	26eb8 <bt_uart_isr+0x314>
   26eaa:	2a04      	cmp	r2, #4
   26eac:	d106      	bne.n	26ebc <bt_uart_isr+0x318>
		rx.remaining = sizeof(rx.evt);
   26eae:	2302      	movs	r3, #2
		rx.remaining = sizeof(rx.acl);
   26eb0:	8423      	strh	r3, [r4, #32]
		rx.hdr_len = rx.remaining;
   26eb2:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		break;
   26eb6:	e67f      	b.n	26bb8 <bt_uart_isr+0x14>
		rx.remaining = sizeof(rx.acl);
   26eb8:	2304      	movs	r3, #4
   26eba:	e7f9      	b.n	26eb0 <bt_uart_isr+0x30c>
		BT_ERR("Unknown H:4 type 0x%02x", rx.type);
   26ebc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   26ec0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   26ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26ec8:	f043 0301 	orr.w	r3, r3, #1
   26ecc:	f363 0107 	bfi	r1, r3, #0, #8
   26ed0:	b28b      	uxth	r3, r1
   26ed2:	9901      	ldr	r1, [sp, #4]
   26ed4:	f361 138f 	bfi	r3, r1, #6, #10
   26ed8:	b298      	uxth	r0, r3
   26eda:	493c      	ldr	r1, [pc, #240]	; (26fcc <bt_uart_isr+0x428>)
   26edc:	f8ad 300c 	strh.w	r3, [sp, #12]
   26ee0:	f01d fc21 	bl	44726 <log_string_sync>
		rx.type = H4_NONE;
   26ee4:	2300      	movs	r3, #0
   26ee6:	e7d9      	b.n	26e9c <bt_uart_isr+0x2f8>
	int to_read = rx.hdr_len - rx.remaining;
   26ee8:	8c22      	ldrh	r2, [r4, #32]
   26eea:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26eee:	f104 0128 	add.w	r1, r4, #40	; 0x28
	int to_read = rx.hdr_len - rx.remaining;
   26ef2:	1a9b      	subs	r3, r3, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26ef4:	4419      	add	r1, r3
   26ef6:	6828      	ldr	r0, [r5, #0]
   26ef8:	f01e fad4 	bl	454a4 <uart_fifo_read>
   26efc:	8c23      	ldrh	r3, [r4, #32]
   26efe:	1a18      	subs	r0, r3, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   26f00:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26f04:	b280      	uxth	r0, r0
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   26f06:	2b02      	cmp	r3, #2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26f08:	8420      	strh	r0, [r4, #32]
	if (rx.hdr_len == sizeof(*hdr) && rx.remaining < sizeof(*hdr)) {
   26f0a:	d10a      	bne.n	26f22 <bt_uart_isr+0x37e>
   26f0c:	2801      	cmp	r0, #1
   26f0e:	d808      	bhi.n	26f22 <bt_uart_isr+0x37e>
		switch (rx.evt.evt) {
   26f10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   26f14:	2b3e      	cmp	r3, #62	; 0x3e
			rx.hdr_len++;
   26f16:	bf01      	itttt	eq
   26f18:	2303      	moveq	r3, #3
			rx.remaining++;
   26f1a:	3001      	addeq	r0, #1
   26f1c:	8420      	strheq	r0, [r4, #32]
			rx.hdr_len++;
   26f1e:	f884 3026 	strbeq.w	r3, [r4, #38]	; 0x26
	if (!rx.remaining) {
   26f22:	4b2b      	ldr	r3, [pc, #172]	; (26fd0 <bt_uart_isr+0x42c>)
   26f24:	8c1a      	ldrh	r2, [r3, #32]
   26f26:	2a00      	cmp	r2, #0
   26f28:	d143      	bne.n	26fb2 <bt_uart_isr+0x40e>
		if (rx.evt.evt == BT_HCI_EVT_LE_META_EVENT &&
   26f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26f2c:	4929      	ldr	r1, [pc, #164]	; (26fd4 <bt_uart_isr+0x430>)
   26f2e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
   26f32:	428a      	cmp	r2, r1
			rx.discardable = true;
   26f34:	bf04      	itt	eq
   26f36:	2201      	moveq	r2, #1
   26f38:	f883 2025 	strbeq.w	r2, [r3, #37]	; 0x25
		rx.remaining = hdr->len - (rx.hdr_len - sizeof(*hdr));
   26f3c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   26f40:	f893 1026 	ldrb.w	r1, [r3, #38]	; 0x26
   26f44:	3202      	adds	r2, #2
   26f46:	1a52      	subs	r2, r2, r1
   26f48:	841a      	strh	r2, [r3, #32]
		rx.have_hdr = true;
   26f4a:	2201      	movs	r2, #1
   26f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	if (rx.have_hdr && rx.buf) {
   26f50:	4c1f      	ldr	r4, [pc, #124]	; (26fd0 <bt_uart_isr+0x42c>)
   26f52:	6820      	ldr	r0, [r4, #0]
   26f54:	2800      	cmp	r0, #0
   26f56:	f43f ae2f 	beq.w	26bb8 <bt_uart_isr+0x14>
		if (rx.remaining > net_buf_tailroom(rx.buf)) {
   26f5a:	8c23      	ldrh	r3, [r4, #32]
   26f5c:	3008      	adds	r0, #8
   26f5e:	9305      	str	r3, [sp, #20]
   26f60:	f01e fdc2 	bl	45ae8 <net_buf_simple_tailroom>
   26f64:	9b05      	ldr	r3, [sp, #20]
   26f66:	4283      	cmp	r3, r0
   26f68:	d92a      	bls.n	26fc0 <bt_uart_isr+0x41c>
			BT_ERR("Not enough space in buffer");
   26f6a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   26f6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   26f72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   26f76:	f043 0301 	orr.w	r3, r3, #1
   26f7a:	f363 0207 	bfi	r2, r3, #0, #8
   26f7e:	b293      	uxth	r3, r2
   26f80:	9a01      	ldr	r2, [sp, #4]
   26f82:	4915      	ldr	r1, [pc, #84]	; (26fd8 <bt_uart_isr+0x434>)
   26f84:	f362 138f 	bfi	r3, r2, #6, #10
   26f88:	f8ad 3010 	strh.w	r3, [sp, #16]
   26f8c:	b298      	uxth	r0, r3
   26f8e:	e6fb      	b.n	26d88 <bt_uart_isr+0x1e4>
	int to_read = sizeof(*hdr) - rx.remaining;
   26f90:	8c22      	ldrh	r2, [r4, #32]
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26f92:	6828      	ldr	r0, [r5, #0]
	int to_read = sizeof(*hdr) - rx.remaining;
   26f94:	1aa1      	subs	r1, r4, r2
	rx.remaining -= uart_fifo_read(h4_dev, (uint8_t *)hdr + to_read,
   26f96:	312c      	adds	r1, #44	; 0x2c
   26f98:	f01e fa84 	bl	454a4 <uart_fifo_read>
   26f9c:	8c23      	ldrh	r3, [r4, #32]
   26f9e:	1a18      	subs	r0, r3, r0
   26fa0:	b280      	uxth	r0, r0
   26fa2:	8420      	strh	r0, [r4, #32]
	if (!rx.remaining) {
   26fa4:	b928      	cbnz	r0, 26fb2 <bt_uart_isr+0x40e>
		rx.remaining = sys_le16_to_cpu(hdr->len);
   26fa6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   26fa8:	8423      	strh	r3, [r4, #32]
		rx.have_hdr = true;
   26faa:	2301      	movs	r3, #1
   26fac:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   26fb0:	e7ce      	b.n	26f50 <bt_uart_isr+0x3ac>
	if (rx.have_hdr && rx.buf) {
   26fb2:	4b07      	ldr	r3, [pc, #28]	; (26fd0 <bt_uart_isr+0x42c>)
   26fb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   26fb8:	2b00      	cmp	r3, #0
   26fba:	f43f adfd 	beq.w	26bb8 <bt_uart_isr+0x14>
   26fbe:	e7c7      	b.n	26f50 <bt_uart_isr+0x3ac>
			copy_hdr(rx.buf);
   26fc0:	6820      	ldr	r0, [r4, #0]
   26fc2:	f7ff fd6f 	bl	26aa4 <copy_hdr>
   26fc6:	e5f7      	b.n	26bb8 <bt_uart_isr+0x14>
   26fc8:	0004ca39 	.word	0x0004ca39
   26fcc:	0004ca58 	.word	0x0004ca58
   26fd0:	20020780 	.word	0x20020780
   26fd4:	0002003e 	.word	0x0002003e
   26fd8:	0004ca70 	.word	0x0004ca70

00026fdc <h4_open>:
{
   26fdc:	b510      	push	{r4, lr}
	uart_irq_rx_disable(h4_dev);
   26fde:	4c17      	ldr	r4, [pc, #92]	; (2703c <h4_open+0x60>)
{
   26fe0:	b088      	sub	sp, #32
	uart_irq_rx_disable(h4_dev);
   26fe2:	6820      	ldr	r0, [r4, #0]
   26fe4:	f01e fa6e 	bl	454c4 <z_impl_uart_irq_rx_disable>
	uart_irq_tx_disable(h4_dev);
   26fe8:	6820      	ldr	r0, [r4, #0]
	z_impl_uart_irq_tx_disable(dev);
   26fea:	f01e fa61 	bl	454b0 <z_impl_uart_irq_tx_disable>
	ret = bt_hci_transport_setup(h4_dev);
   26fee:	6820      	ldr	r0, [r4, #0]
   26ff0:	f001 fb46 	bl	28680 <bt_hci_transport_setup>
	if (ret < 0) {
   26ff4:	2800      	cmp	r0, #0
   26ff6:	db1d      	blt.n	27034 <h4_open+0x58>
	uart_irq_callback_set(h4_dev, bt_uart_isr);
   26ff8:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   26ffa:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   26ffc:	b123      	cbz	r3, 27008 <h4_open+0x2c>
   26ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   27000:	b113      	cbz	r3, 27008 <h4_open+0x2c>
		api->irq_callback_set(dev, cb, user_data);
   27002:	2200      	movs	r2, #0
   27004:	490e      	ldr	r1, [pc, #56]	; (27040 <h4_open+0x64>)
   27006:	4798      	blx	r3
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   27008:	2200      	movs	r2, #0
   2700a:	2300      	movs	r3, #0
   2700c:	2400      	movs	r4, #0
   2700e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27012:	f06f 0307 	mvn.w	r3, #7
   27016:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2701a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   2701e:	9400      	str	r4, [sp, #0]
   27020:	4b08      	ldr	r3, [pc, #32]	; (27044 <h4_open+0x68>)
   27022:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27026:	4908      	ldr	r1, [pc, #32]	; (27048 <h4_open+0x6c>)
   27028:	4808      	ldr	r0, [pc, #32]	; (2704c <h4_open+0x70>)
   2702a:	f019 fd89 	bl	40b40 <z_impl_k_thread_create>
	return 0;
   2702e:	4620      	mov	r0, r4
}
   27030:	b008      	add	sp, #32
   27032:	bd10      	pop	{r4, pc}
		return -EIO;
   27034:	f06f 0004 	mvn.w	r0, #4
   27038:	e7fa      	b.n	27030 <h4_open+0x54>
   2703a:	bf00      	nop
   2703c:	20024b74 	.word	0x20024b74
   27040:	00026ba5 	.word	0x00026ba5
   27044:	00026ae5 	.word	0x00026ae5
   27048:	2002e340 	.word	0x2002e340
   2704c:	20021b20 	.word	0x20021b20

00027050 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   27050:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   27052:	4c06      	ldr	r4, [pc, #24]	; (2706c <z_clock_isr+0x1c>)
   27054:	4906      	ldr	r1, [pc, #24]	; (27070 <z_clock_isr+0x20>)
   27056:	4622      	mov	r2, r4
   27058:	4806      	ldr	r0, [pc, #24]	; (27074 <z_clock_isr+0x24>)
   2705a:	2317      	movs	r3, #23
   2705c:	f01d f938 	bl	442d0 <printk>
   27060:	4620      	mov	r0, r4
}
   27062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   27066:	2117      	movs	r1, #23
   27068:	f01d bb4c 	b.w	44704 <assert_post_action>
   2706c:	0004caa3 	.word	0x0004caa3
   27070:	00052672 	.word	0x00052672
   27074:	0004b33b 	.word	0x0004b33b

00027078 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
   27078:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   2707a:	4b08      	ldr	r3, [pc, #32]	; (2709c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2707c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   27080:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   27084:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   27088:	4290      	cmp	r0, r2
   2708a:	d100      	bne.n	2708e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   2708c:	4770      	bx	lr
   2708e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   27092:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   27094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   27098:	e7f2      	b.n	27080 <handle_next_cycle_case+0x8>
   2709a:	bf00      	nop
   2709c:	40015000 	.word	0x40015000

000270a0 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   270a0:	2200      	movs	r2, #0
   270a2:	4b07      	ldr	r3, [pc, #28]	; (270c0 <rtc_nrf_isr+0x20>)
   270a4:	601a      	str	r2, [r3, #0]
   270a6:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   270a8:	4a06      	ldr	r2, [pc, #24]	; (270c4 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
   270aa:	4b07      	ldr	r3, [pc, #28]	; (270c8 <rtc_nrf_isr+0x28>)
   270ac:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
   270b0:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   270b2:	1ac0      	subs	r0, r0, r3
   270b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   270b8:	4403      	add	r3, r0
   270ba:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
   270bc:	f01a b9be 	b.w	4143c <z_clock_announce>
   270c0:	40015140 	.word	0x40015140
   270c4:	20024b78 	.word	0x20024b78
   270c8:	40015000 	.word	0x40015000

000270cc <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
   270cc:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   270ce:	2400      	movs	r4, #0
   270d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   270d4:	4d0e      	ldr	r5, [pc, #56]	; (27110 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   270d6:	4b0f      	ldr	r3, [pc, #60]	; (27114 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
   270d8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   270dc:	601c      	str	r4, [r3, #0]
   270de:	681b      	ldr	r3, [r3, #0]
   270e0:	4b0d      	ldr	r3, [pc, #52]	; (27118 <z_clock_driver_init+0x4c>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
   270e2:	2101      	movs	r1, #1
   270e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   270e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   270ec:	4622      	mov	r2, r4
   270ee:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   270f2:	2015      	movs	r0, #21
   270f4:	f000 fb10 	bl	27718 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
   270f8:	2015      	movs	r0, #21
   270fa:	f000 faef 	bl	276dc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   270fe:	2301      	movs	r3, #1
   27100:	4a06      	ldr	r2, [pc, #24]	; (2711c <z_clock_driver_init+0x50>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
   27102:	2002      	movs	r0, #2
   27104:	6013      	str	r3, [r2, #0]
   27106:	602b      	str	r3, [r5, #0]
   27108:	f7ff fb82 	bl	26810 <z_nrf_clock_control_lf_on>

	return 0;
}
   2710c:	4620      	mov	r0, r4
   2710e:	bd38      	pop	{r3, r4, r5, pc}
   27110:	40015000 	.word	0x40015000
   27114:	40015140 	.word	0x40015140
   27118:	e000e100 	.word	0xe000e100
   2711c:	40015008 	.word	0x40015008

00027120 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
   27120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   27122:	4b2d      	ldr	r3, [pc, #180]	; (271d8 <z_clock_set_timeout+0xb8>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   27124:	4c2d      	ldr	r4, [pc, #180]	; (271dc <z_clock_set_timeout+0xbc>)
   27126:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
   2712a:	4b2d      	ldr	r3, [pc, #180]	; (271e0 <z_clock_set_timeout+0xc0>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2712c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27130:	bf08      	it	eq
   27132:	4620      	moveq	r0, r4
	uint32_t unannounced = counter_sub(counter(), last_count);
   27134:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   27136:	1a52      	subs	r2, r2, r1
   27138:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   2713c:	0212      	lsls	r2, r2, #8
   2713e:	d438      	bmi.n	271b2 <z_clock_set_timeout+0x92>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
   27140:	3801      	subs	r0, #1
   27142:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   27146:	42a0      	cmp	r0, r4
   27148:	bfa8      	it	ge
   2714a:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2714c:	3301      	adds	r3, #1
   2714e:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   27150:	42a0      	cmp	r0, r4
   27152:	bf94      	ite	ls
   27154:	180c      	addls	r4, r1, r0
   27156:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   27158:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2715c:	2600      	movs	r6, #0
    p_reg->INTENCLR = mask;
   2715e:	4a1e      	ldr	r2, [pc, #120]	; (271d8 <z_clock_set_timeout+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   27160:	4d20      	ldr	r5, [pc, #128]	; (271e4 <z_clock_set_timeout+0xc4>)
    p_reg->INTENCLR = mask;
   27162:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
     return p_reg->COUNTER;
   27166:	f8d2 1504 	ldr.w	r1, [r2, #1284]	; 0x504
    return p_reg->CC[ch];
   2716a:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2716e:	602e      	str	r6, [r5, #0]
	return (a - b) & COUNTER_MAX;
   27170:	1a5b      	subs	r3, r3, r1
   27172:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   27176:	682f      	ldr	r7, [r5, #0]
	if (counter_sub(prev_val, now) == 1) {
   27178:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   2717a:	f021 477f 	bic.w	r7, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   2717e:	f8c2 7540 	str.w	r7, [r2, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   27182:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
   27186:	d104      	bne.n	27192 <z_clock_set_timeout+0x72>
	z_impl_k_busy_wait(usec_to_wait);
   27188:	200f      	movs	r0, #15
   2718a:	f020 feb9 	bl	47f00 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2718e:	602e      	str	r6, [r5, #0]
   27190:	682b      	ldr	r3, [r5, #0]
   27192:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   27196:	4b14      	ldr	r3, [pc, #80]	; (271e8 <z_clock_set_timeout+0xc8>)
   27198:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   2719c:	4b0e      	ldr	r3, [pc, #56]	; (271d8 <z_clock_set_timeout+0xb8>)
   2719e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   271a2:	1a22      	subs	r2, r4, r0
   271a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (diff == 1) {
   271a8:	2a01      	cmp	r2, #1
   271aa:	d104      	bne.n	271b6 <z_clock_set_timeout+0x96>
		handle_next_cycle_case(t);
   271ac:	f7ff ff64 	bl	27078 <handle_next_cycle_case>
   271b0:	e00b      	b.n	271ca <z_clock_set_timeout+0xaa>
		ticks = 0;
   271b2:	2000      	movs	r0, #0
   271b4:	e7ca      	b.n	2714c <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   271b6:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   271ba:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
   271be:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   271c2:	1a24      	subs	r4, r4, r0
   271c4:	3c02      	subs	r4, #2
	if (diff > MAX_CYCLES) {
   271c6:	0223      	lsls	r3, r4, #8
   271c8:	d4f0      	bmi.n	271ac <z_clock_set_timeout+0x8c>
    p_reg->INTENSET = mask;
   271ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   271ce:	4b02      	ldr	r3, [pc, #8]	; (271d8 <z_clock_set_timeout+0xb8>)
   271d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
   271d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   271d6:	bf00      	nop
   271d8:	40015000 	.word	0x40015000
   271dc:	007fffff 	.word	0x007fffff
   271e0:	20024b78 	.word	0x20024b78
   271e4:	40015140 	.word	0x40015140
   271e8:	e000e100 	.word	0xe000e100

000271ec <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
   271ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   271ee:	f04f 0320 	mov.w	r3, #32
   271f2:	f3ef 8511 	mrs	r5, BASEPRI
   271f6:	f383 8811 	msr	BASEPRI, r3
   271fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271fe:	481a      	ldr	r0, [pc, #104]	; (27268 <z_clock_elapsed+0x7c>)
   27200:	f019 fd7c 	bl	40cfc <z_spin_lock_valid>
   27204:	b968      	cbnz	r0, 27222 <z_clock_elapsed+0x36>
   27206:	235c      	movs	r3, #92	; 0x5c
   27208:	4a18      	ldr	r2, [pc, #96]	; (2726c <z_clock_elapsed+0x80>)
   2720a:	4919      	ldr	r1, [pc, #100]	; (27270 <z_clock_elapsed+0x84>)
   2720c:	4819      	ldr	r0, [pc, #100]	; (27274 <z_clock_elapsed+0x88>)
   2720e:	f01d f85f 	bl	442d0 <printk>
   27212:	4915      	ldr	r1, [pc, #84]	; (27268 <z_clock_elapsed+0x7c>)
   27214:	4818      	ldr	r0, [pc, #96]	; (27278 <z_clock_elapsed+0x8c>)
   27216:	f01d f85b 	bl	442d0 <printk>
   2721a:	215c      	movs	r1, #92	; 0x5c
   2721c:	4813      	ldr	r0, [pc, #76]	; (2726c <z_clock_elapsed+0x80>)
   2721e:	f01d fa71 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   27222:	4811      	ldr	r0, [pc, #68]	; (27268 <z_clock_elapsed+0x7c>)
   27224:	f019 fd88 	bl	40d38 <z_spin_lock_set_owner>
     return p_reg->COUNTER;
   27228:	4b14      	ldr	r3, [pc, #80]	; (2727c <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2722a:	480f      	ldr	r0, [pc, #60]	; (27268 <z_clock_elapsed+0x7c>)
   2722c:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   27230:	4b13      	ldr	r3, [pc, #76]	; (27280 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   27232:	681b      	ldr	r3, [r3, #0]
   27234:	1ae4      	subs	r4, r4, r3
   27236:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   2723a:	f019 fd6d 	bl	40d18 <z_spin_unlock_valid>
   2723e:	b968      	cbnz	r0, 2725c <z_clock_elapsed+0x70>
   27240:	2384      	movs	r3, #132	; 0x84
   27242:	4a0a      	ldr	r2, [pc, #40]	; (2726c <z_clock_elapsed+0x80>)
   27244:	490f      	ldr	r1, [pc, #60]	; (27284 <z_clock_elapsed+0x98>)
   27246:	480b      	ldr	r0, [pc, #44]	; (27274 <z_clock_elapsed+0x88>)
   27248:	f01d f842 	bl	442d0 <printk>
   2724c:	4906      	ldr	r1, [pc, #24]	; (27268 <z_clock_elapsed+0x7c>)
   2724e:	480e      	ldr	r0, [pc, #56]	; (27288 <z_clock_elapsed+0x9c>)
   27250:	f01d f83e 	bl	442d0 <printk>
   27254:	2184      	movs	r1, #132	; 0x84
   27256:	4805      	ldr	r0, [pc, #20]	; (2726c <z_clock_elapsed+0x80>)
   27258:	f01d fa54 	bl	44704 <assert_post_action>
	__asm__ volatile(
   2725c:	f385 8811 	msr	BASEPRI, r5
   27260:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   27264:	4620      	mov	r0, r4
   27266:	bd38      	pop	{r3, r4, r5, pc}
   27268:	20024b7c 	.word	0x20024b7c
   2726c:	0004be5f 	.word	0x0004be5f
   27270:	0004be85 	.word	0x0004be85
   27274:	0004b33b 	.word	0x0004b33b
   27278:	0004be9a 	.word	0x0004be9a
   2727c:	40015000 	.word	0x40015000
   27280:	20024b78 	.word	0x20024b78
   27284:	0004beb2 	.word	0x0004beb2
   27288:	0004bec9 	.word	0x0004bec9

0002728c <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   2728c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2728e:	f04f 0320 	mov.w	r3, #32
   27292:	f3ef 8511 	mrs	r5, BASEPRI
   27296:	f383 8811 	msr	BASEPRI, r3
   2729a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2729e:	481b      	ldr	r0, [pc, #108]	; (2730c <z_timer_cycle_get_32+0x80>)
   272a0:	f019 fd2c 	bl	40cfc <z_spin_lock_valid>
   272a4:	b968      	cbnz	r0, 272c2 <z_timer_cycle_get_32+0x36>
   272a6:	235c      	movs	r3, #92	; 0x5c
   272a8:	4a19      	ldr	r2, [pc, #100]	; (27310 <z_timer_cycle_get_32+0x84>)
   272aa:	491a      	ldr	r1, [pc, #104]	; (27314 <z_timer_cycle_get_32+0x88>)
   272ac:	481a      	ldr	r0, [pc, #104]	; (27318 <z_timer_cycle_get_32+0x8c>)
   272ae:	f01d f80f 	bl	442d0 <printk>
   272b2:	4916      	ldr	r1, [pc, #88]	; (2730c <z_timer_cycle_get_32+0x80>)
   272b4:	4819      	ldr	r0, [pc, #100]	; (2731c <z_timer_cycle_get_32+0x90>)
   272b6:	f01d f80b 	bl	442d0 <printk>
   272ba:	215c      	movs	r1, #92	; 0x5c
   272bc:	4814      	ldr	r0, [pc, #80]	; (27310 <z_timer_cycle_get_32+0x84>)
   272be:	f01d fa21 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   272c2:	4812      	ldr	r0, [pc, #72]	; (2730c <z_timer_cycle_get_32+0x80>)
   272c4:	f019 fd38 	bl	40d38 <z_spin_lock_set_owner>
   272c8:	4b15      	ldr	r3, [pc, #84]	; (27320 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   272ca:	4810      	ldr	r0, [pc, #64]	; (2730c <z_timer_cycle_get_32+0x80>)
   272cc:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   272d0:	4b14      	ldr	r3, [pc, #80]	; (27324 <z_timer_cycle_get_32+0x98>)
   272d2:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   272d4:	1ae4      	subs	r4, r4, r3
   272d6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   272da:	441c      	add	r4, r3
   272dc:	f019 fd1c 	bl	40d18 <z_spin_unlock_valid>
   272e0:	b968      	cbnz	r0, 272fe <z_timer_cycle_get_32+0x72>
   272e2:	2384      	movs	r3, #132	; 0x84
   272e4:	4a0a      	ldr	r2, [pc, #40]	; (27310 <z_timer_cycle_get_32+0x84>)
   272e6:	4910      	ldr	r1, [pc, #64]	; (27328 <z_timer_cycle_get_32+0x9c>)
   272e8:	480b      	ldr	r0, [pc, #44]	; (27318 <z_timer_cycle_get_32+0x8c>)
   272ea:	f01c fff1 	bl	442d0 <printk>
   272ee:	4907      	ldr	r1, [pc, #28]	; (2730c <z_timer_cycle_get_32+0x80>)
   272f0:	480e      	ldr	r0, [pc, #56]	; (2732c <z_timer_cycle_get_32+0xa0>)
   272f2:	f01c ffed 	bl	442d0 <printk>
   272f6:	2184      	movs	r1, #132	; 0x84
   272f8:	4805      	ldr	r0, [pc, #20]	; (27310 <z_timer_cycle_get_32+0x84>)
   272fa:	f01d fa03 	bl	44704 <assert_post_action>
	__asm__ volatile(
   272fe:	f385 8811 	msr	BASEPRI, r5
   27302:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   27306:	4620      	mov	r0, r4
   27308:	bd38      	pop	{r3, r4, r5, pc}
   2730a:	bf00      	nop
   2730c:	20024b7c 	.word	0x20024b7c
   27310:	0004be5f 	.word	0x0004be5f
   27314:	0004be85 	.word	0x0004be85
   27318:	0004b33b 	.word	0x0004b33b
   2731c:	0004be9a 	.word	0x0004be9a
   27320:	40015000 	.word	0x40015000
   27324:	20024b78 	.word	0x20024b78
   27328:	0004beb2 	.word	0x0004beb2
   2732c:	0004bec9 	.word	0x0004bec9

00027330 <gps_agps_request>:
}

#endif /* CONFIG_AGPS_SRC_SUPL */

int gps_agps_request(struct gps_agps_request request, int socket)
{
   27330:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   27332:	ab01      	add	r3, sp, #4
   27334:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LOG_ERR("SUPL request failed, error: %d", err);
		return err;
	}

#elif defined(CONFIG_AGPS_SRC_NRF_CLOUD)
	err = nrf_cloud_agps_request(request);
   27338:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2733c:	f009 fef8 	bl	31130 <nrf_cloud_agps_request>
	if (err) {
   27340:	4604      	mov	r4, r0
   27342:	b170      	cbz	r0, 27362 <gps_agps_request+0x32>
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   27344:	2301      	movs	r3, #1
   27346:	f04f 0000 	mov.w	r0, #0
   2734a:	4a07      	ldr	r2, [pc, #28]	; (27368 <gps_agps_request+0x38>)
   2734c:	f363 0007 	bfi	r0, r3, #0, #8
   27350:	4b06      	ldr	r3, [pc, #24]	; (2736c <gps_agps_request+0x3c>)
   27352:	4907      	ldr	r1, [pc, #28]	; (27370 <gps_agps_request+0x40>)
   27354:	1a9b      	subs	r3, r3, r2
   27356:	08db      	lsrs	r3, r3, #3
   27358:	f363 108f 	bfi	r0, r3, #6, #10
   2735c:	4622      	mov	r2, r4
   2735e:	f01d f9e2 	bl	44726 <log_string_sync>
		return err;
	}
#endif /* CONFIG_AGPS_SRC_SUPL */

	return 0;
}
   27362:	4620      	mov	r0, r4
   27364:	b004      	add	sp, #16
   27366:	bd10      	pop	{r4, pc}
   27368:	00049788 	.word	0x00049788
   2736c:	00049790 	.word	0x00049790
   27370:	0004cad5 	.word	0x0004cad5

00027374 <gps_process_agps_data>:

int gps_process_agps_data(const uint8_t *buf, size_t len)
{
   27374:	b510      	push	{r4, lr}
	int err = 0;

#if defined(CONFIG_AGPS_SRC_NRF_CLOUD) && defined(CONFIG_NRF_CLOUD_AGPS)

	err = nrf_cloud_agps_process(buf, len, NULL);
   27376:	2200      	movs	r2, #0
   27378:	f009 fff4 	bl	31364 <nrf_cloud_agps_process>
	if (err) {
   2737c:	4604      	mov	r4, r0
   2737e:	4b0e      	ldr	r3, [pc, #56]	; (273b8 <gps_process_agps_data+0x44>)
   27380:	4a0e      	ldr	r2, [pc, #56]	; (273bc <gps_process_agps_data+0x48>)
		LOG_ERR("A-GPS failed, error: %d", err);
   27382:	f04f 0000 	mov.w	r0, #0
   27386:	1a9b      	subs	r3, r3, r2
   27388:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	if (err) {
   2738c:	b154      	cbz	r4, 273a4 <gps_process_agps_data+0x30>
		LOG_ERR("A-GPS failed, error: %d", err);
   2738e:	2201      	movs	r2, #1
   27390:	f362 0007 	bfi	r0, r2, #0, #8
   27394:	f363 108f 	bfi	r0, r3, #6, #10
   27398:	4622      	mov	r2, r4
   2739a:	4909      	ldr	r1, [pc, #36]	; (273c0 <gps_process_agps_data+0x4c>)
   2739c:	f01d f9c3 	bl	44726 <log_string_sync>
		LOG_INF("A-GPS data successfully processed");
	}
#endif /* CONFIG_AGPS_SRC_NRF_CLOUD && CONFIG_NRF_CLOUD_AGPS */

	return err;
}
   273a0:	4620      	mov	r0, r4
   273a2:	bd10      	pop	{r4, pc}
		LOG_INF("A-GPS data successfully processed");
   273a4:	2203      	movs	r2, #3
   273a6:	f362 0007 	bfi	r0, r2, #0, #8
   273aa:	f363 108f 	bfi	r0, r3, #6, #10
   273ae:	4905      	ldr	r1, [pc, #20]	; (273c4 <gps_process_agps_data+0x50>)
   273b0:	f01d f9b9 	bl	44726 <log_string_sync>
	return err;
   273b4:	e7f4      	b.n	273a0 <gps_process_agps_data+0x2c>
   273b6:	bf00      	nop
   273b8:	00049790 	.word	0x00049790
   273bc:	00049788 	.word	0x00049788
   273c0:	0004caff 	.word	0x0004caff
   273c4:	0004cb17 	.word	0x0004cb17

000273c8 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   273c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273cc:	6803      	ldr	r3, [r0, #0]
{
   273ce:	b09d      	sub	sp, #116	; 0x74
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273d0:	9302      	str	r3, [sp, #8]
   273d2:	6843      	ldr	r3, [r0, #4]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   273d4:	2700      	movs	r7, #0
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273d6:	9303      	str	r3, [sp, #12]
   273d8:	6883      	ldr	r3, [r0, #8]
{
   273da:	9100      	str	r1, [sp, #0]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273dc:	9304      	str	r3, [sp, #16]
   273de:	68c3      	ldr	r3, [r0, #12]
   273e0:	4965      	ldr	r1, [pc, #404]	; (27578 <compress+0x1b0>)
   273e2:	9305      	str	r3, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   273e4:	6903      	ldr	r3, [r0, #16]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273e6:	9c02      	ldr	r4, [sp, #8]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   273e8:	9306      	str	r3, [sp, #24]
   273ea:	6943      	ldr	r3, [r0, #20]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273ec:	e9dd e205 	ldrd	lr, r2, [sp, #20]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   273f0:	9307      	str	r3, [sp, #28]
   273f2:	6983      	ldr	r3, [r0, #24]
	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   273f4:	e9dd 6a03 	ldrd	r6, sl, [sp, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   273f8:	9308      	str	r3, [sp, #32]
   273fa:	69c3      	ldr	r3, [r0, #28]
   273fc:	e9dd cb07 	ldrd	ip, fp, [sp, #28]
   27400:	4698      	mov	r8, r3
   27402:	9309      	str	r3, [sp, #36]	; 0x24
	n = (((unsigned int)(*((*c)++))) << 24);
   27404:	9b00      	ldr	r3, [sp, #0]
   27406:	59dd      	ldr	r5, [r3, r7]

	for (i = 0; i < 16; ++i) {
		n = BigEndian(&data);
		t1 = work_space[i] = n;
   27408:	ab0c      	add	r3, sp, #48	; 0x30
   2740a:	ba2d      	rev	r5, r5
   2740c:	51dd      	str	r5, [r3, r7]
	return (((a) >> n) | ((a) << (32 - n)));
   2740e:	f851 3b04 	ldr.w	r3, [r1], #4
   27412:	3704      	adds	r7, #4
   27414:	eb05 0903 	add.w	r9, r5, r3
   27418:	ea4f 25f2 	mov.w	r5, r2, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   2741c:	ea85 15b2 	eor.w	r5, r5, r2, ror #6
   27420:	ea85 6572 	eor.w	r5, r5, r2, ror #25
   27424:	444d      	add	r5, r9
   27426:	ea2b 0302 	bic.w	r3, fp, r2
   2742a:	ea02 090c 	and.w	r9, r2, ip
   2742e:	ea83 0309 	eor.w	r3, r3, r9
   27432:	442b      	add	r3, r5
   27434:	4443      	add	r3, r8
		t2 = Sigma0(a) + Maj(a, b, c);
   27436:	ea86 050a 	eor.w	r5, r6, sl
	return (((a) >> n) | ((a) << (32 - n)));
   2743a:	ea4f 3874 	mov.w	r8, r4, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   2743e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
   27442:	4025      	ands	r5, r4
   27444:	ea06 090a 	and.w	r9, r6, sl
   27448:	ea85 0509 	eor.w	r5, r5, r9
   2744c:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
   27450:	44a8      	add	r8, r5
	for (i = 0; i < 16; ++i) {
   27452:	2f40      	cmp	r7, #64	; 0x40
		h = g; g = f; f = e; e = d + t1;
   27454:	eb03 050e 	add.w	r5, r3, lr
		d = c; c = b; b = a; a = t1 + t2;
   27458:	4443      	add	r3, r8
   2745a:	46d6      	mov	lr, sl
   2745c:	46d8      	mov	r8, fp
	for (i = 0; i < 16; ++i) {
   2745e:	d17d      	bne.n	2755c <compress+0x194>
   27460:	4946      	ldr	r1, [pc, #280]	; (2757c <compress+0x1b4>)
   27462:	910a      	str	r1, [sp, #40]	; 0x28
   27464:	2110      	movs	r1, #16
	}

	for ( ; i < 64; ++i) {
		s0 = work_space[(i+1)&0x0f];
   27466:	1c4f      	adds	r7, r1, #1
   27468:	f10d 0e70 	add.w	lr, sp, #112	; 0x70
   2746c:	970b      	str	r7, [sp, #44]	; 0x2c
   2746e:	f007 070f 	and.w	r7, r7, #15
   27472:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   27476:	f857 7c40 	ldr.w	r7, [r7, #-64]
		s0 = sigma0(s0);
		s1 = work_space[(i+14)&0x0f];
		s1 = sigma1(s1);

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   2747a:	f001 090f 	and.w	r9, r1, #15
	return (((a) >> n) | ((a) << (32 - n)));
   2747e:	ea4f 48b7 	mov.w	r8, r7, ror #18
		s0 = work_space[(i+1)&0x0f];
   27482:	9700      	str	r7, [sp, #0]
		s0 = sigma0(s0);
   27484:	ea88 18f7 	eor.w	r8, r8, r7, ror #7
		s1 = work_space[(i+14)&0x0f];
   27488:	f101 070e 	add.w	r7, r1, #14
   2748c:	f007 070f 	and.w	r7, r7, #15
   27490:	eb0e 0787 	add.w	r7, lr, r7, lsl #2
   27494:	f857 7c40 	ldr.w	r7, [r7, #-64]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   27498:	3109      	adds	r1, #9
	return (((a) >> n) | ((a) << (32 - n)));
   2749a:	ea4f 4ef7 	mov.w	lr, r7, ror #19
		s1 = work_space[(i+14)&0x0f];
   2749e:	9701      	str	r7, [sp, #4]
		s1 = sigma1(s1);
   274a0:	ea8e 4e77 	eor.w	lr, lr, r7, ror #17
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   274a4:	f001 010f 	and.w	r1, r1, #15
   274a8:	af1c      	add	r7, sp, #112	; 0x70
   274aa:	eb07 0989 	add.w	r9, r7, r9, lsl #2
   274ae:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   274b2:	f851 1c40 	ldr.w	r1, [r1, #-64]
   274b6:	f859 7c40 	ldr.w	r7, [r9, #-64]
   274ba:	4439      	add	r1, r7
		s0 = sigma0(s0);
   274bc:	9f00      	ldr	r7, [sp, #0]
   274be:	ea88 08d7 	eor.w	r8, r8, r7, lsr #3
		s1 = sigma1(s1);
   274c2:	9f01      	ldr	r7, [sp, #4]
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   274c4:	4441      	add	r1, r8
		s1 = sigma1(s1);
   274c6:	ea8e 2e97 	eor.w	lr, lr, r7, lsr #10
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   274ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   274cc:	4471      	add	r1, lr
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   274ce:	f857 eb04 	ldr.w	lr, [r7], #4
		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   274d2:	f849 1c40 	str.w	r1, [r9, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   274d6:	ea4f 29f5 	mov.w	r9, r5, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   274da:	970a      	str	r7, [sp, #40]	; 0x28
   274dc:	ea89 19b5 	eor.w	r9, r9, r5, ror #6
   274e0:	ea2c 0705 	bic.w	r7, ip, r5
   274e4:	ea05 0802 	and.w	r8, r5, r2
   274e8:	ea89 6975 	eor.w	r9, r9, r5, ror #25
   274ec:	ea87 0708 	eor.w	r7, r7, r8
   274f0:	444f      	add	r7, r9
   274f2:	4477      	add	r7, lr
   274f4:	4439      	add	r1, r7
   274f6:	4459      	add	r1, fp
	return (((a) >> n) | ((a) << (32 - n)));
   274f8:	ea4f 3773 	mov.w	r7, r3, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   274fc:	ea84 0b06 	eor.w	fp, r4, r6
   27500:	ea0b 0b03 	and.w	fp, fp, r3
   27504:	ea87 07b3 	eor.w	r7, r7, r3, ror #2
   27508:	ea04 0e06 	and.w	lr, r4, r6
   2750c:	ea87 57b3 	eor.w	r7, r7, r3, ror #22
   27510:	ea8b 0e0e 	eor.w	lr, fp, lr
   27514:	44be      	add	lr, r7
		h = g; g = f; f = e; e = d + t1;
		d = c; c = b; b = a; a = t1 + t2;
   27516:	448e      	add	lr, r1
		h = g; g = f; f = e; e = d + t1;
   27518:	eb01 070a 	add.w	r7, r1, sl
		d = c; c = b; b = a; a = t1 + t2;
   2751c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2751e:	46b2      	mov	sl, r6
	for ( ; i < 64; ++i) {
   27520:	2940      	cmp	r1, #64	; 0x40
   27522:	46e3      	mov	fp, ip
   27524:	d121      	bne.n	2756a <compress+0x1a2>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   27526:	9902      	ldr	r1, [sp, #8]
   27528:	4471      	add	r1, lr
   2752a:	6001      	str	r1, [r0, #0]
   2752c:	9903      	ldr	r1, [sp, #12]
   2752e:	4419      	add	r1, r3
   27530:	9b04      	ldr	r3, [sp, #16]
   27532:	6041      	str	r1, [r0, #4]
   27534:	4423      	add	r3, r4
   27536:	6083      	str	r3, [r0, #8]
   27538:	9b05      	ldr	r3, [sp, #20]
   2753a:	4433      	add	r3, r6
   2753c:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   2753e:	9b06      	ldr	r3, [sp, #24]
   27540:	443b      	add	r3, r7
   27542:	6103      	str	r3, [r0, #16]
   27544:	9b07      	ldr	r3, [sp, #28]
   27546:	442b      	add	r3, r5
   27548:	6143      	str	r3, [r0, #20]
   2754a:	9b08      	ldr	r3, [sp, #32]
   2754c:	4413      	add	r3, r2
   2754e:	6183      	str	r3, [r0, #24]
   27550:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27552:	4463      	add	r3, ip
   27554:	61c3      	str	r3, [r0, #28]
}
   27556:	b01d      	add	sp, #116	; 0x74
   27558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2755c:	46e3      	mov	fp, ip
   2755e:	46b2      	mov	sl, r6
   27560:	4694      	mov	ip, r2
   27562:	4626      	mov	r6, r4
		h = g; g = f; f = e; e = d + t1;
   27564:	462a      	mov	r2, r5
		d = c; c = b; b = a; a = t1 + t2;
   27566:	461c      	mov	r4, r3
   27568:	e74c      	b.n	27404 <compress+0x3c>
   2756a:	4694      	mov	ip, r2
   2756c:	4626      	mov	r6, r4
   2756e:	462a      	mov	r2, r5
   27570:	461c      	mov	r4, r3
		h = g; g = f; f = e; e = d + t1;
   27572:	463d      	mov	r5, r7
		d = c; c = b; b = a; a = t1 + t2;
   27574:	4673      	mov	r3, lr
   27576:	e776      	b.n	27466 <compress+0x9e>
   27578:	00049d10 	.word	0x00049d10
   2757c:	00049d50 	.word	0x00049d50

00027580 <tc_sha256_init>:
{
   27580:	b510      	push	{r4, lr}
	if (s == (TCSha256State_t) 0) {
   27582:	4604      	mov	r4, r0
   27584:	b1c8      	cbz	r0, 275ba <tc_sha256_init+0x3a>
	_set((uint8_t *) s, 0x00, sizeof(*s));
   27586:	2270      	movs	r2, #112	; 0x70
   27588:	2100      	movs	r1, #0
   2758a:	f01d ffaf 	bl	454ec <_set>
	s->iv[1] = 0xbb67ae85;
   2758e:	4b0b      	ldr	r3, [pc, #44]	; (275bc <tc_sha256_init+0x3c>)
   27590:	4a0b      	ldr	r2, [pc, #44]	; (275c0 <tc_sha256_init+0x40>)
	s->iv[3] = 0xa54ff53a;
   27592:	490c      	ldr	r1, [pc, #48]	; (275c4 <tc_sha256_init+0x44>)
	s->iv[1] = 0xbb67ae85;
   27594:	e9c4 2300 	strd	r2, r3, [r4]
	s->iv[3] = 0xa54ff53a;
   27598:	4b0b      	ldr	r3, [pc, #44]	; (275c8 <tc_sha256_init+0x48>)
	s->iv[5] = 0x9b05688c;
   2759a:	480c      	ldr	r0, [pc, #48]	; (275cc <tc_sha256_init+0x4c>)
	s->iv[3] = 0xa54ff53a;
   2759c:	e9c4 1302 	strd	r1, r3, [r4, #8]
	s->iv[5] = 0x9b05688c;
   275a0:	4b0b      	ldr	r3, [pc, #44]	; (275d0 <tc_sha256_init+0x50>)
   275a2:	e9c4 0304 	strd	r0, r3, [r4, #16]
	return TC_CRYPTO_SUCCESS;
   275a6:	2001      	movs	r0, #1
	s->iv[6] = 0x1f83d9ab;
   275a8:	4b0a      	ldr	r3, [pc, #40]	; (275d4 <tc_sha256_init+0x54>)
   275aa:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   275ac:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   275b0:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   275b4:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   275b8:	61e3      	str	r3, [r4, #28]
}
   275ba:	bd10      	pop	{r4, pc}
   275bc:	bb67ae85 	.word	0xbb67ae85
   275c0:	6a09e667 	.word	0x6a09e667
   275c4:	3c6ef372 	.word	0x3c6ef372
   275c8:	a54ff53a 	.word	0xa54ff53a
   275cc:	510e527f 	.word	0x510e527f
   275d0:	9b05688c 	.word	0x9b05688c
   275d4:	1f83d9ab 	.word	0x1f83d9ab

000275d8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   275d8:	4a09      	ldr	r2, [pc, #36]	; (27600 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   275da:	490a      	ldr	r1, [pc, #40]	; (27604 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   275dc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   275de:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   275e0:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   275e2:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   275e4:	4908      	ldr	r1, [pc, #32]	; (27608 <arch_swap+0x30>)
   275e6:	684b      	ldr	r3, [r1, #4]
   275e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   275ec:	604b      	str	r3, [r1, #4]
   275ee:	2300      	movs	r3, #0
   275f0:	f383 8811 	msr	BASEPRI, r3
   275f4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   275f8:	6893      	ldr	r3, [r2, #8]
}
   275fa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   275fc:	4770      	bx	lr
   275fe:	bf00      	nop
   27600:	2002611c 	.word	0x2002611c
   27604:	0004a7a0 	.word	0x0004a7a0
   27608:	e000ed00 	.word	0xe000ed00

0002760c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   2760c:	4929      	ldr	r1, [pc, #164]	; (276b4 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   2760e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   27610:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   27614:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   27616:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2761a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   2761e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   27622:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   27626:	d004      	beq.n	27632 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   27628:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   2762c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   27630:	e007      	b.n	27642 <out_fp_endif>

00027632 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   27632:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   27636:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   2763a:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   2763e:	f050 0004 	orrs.w	r0, r0, #4

00027642 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   27642:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27646:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27648:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   2764c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   27650:	4f19      	ldr	r7, [pc, #100]	; (276b8 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   27652:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   27656:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   27658:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2765a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   2765c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   2765e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27660:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   27662:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   27666:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   2766a:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   2766e:	d105      	bne.n	2767c <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   27670:	2300      	movs	r3, #0
    vmsr fpscr, r3
   27672:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   27676:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   2767a:	e005      	b.n	27688 <in_fp_endif>

0002767c <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   2767c:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   27680:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   27684:	ec90 8a10 	vldmia	r0, {s16-s31}

00027688 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   27688:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   2768c:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   27690:	f383 8814 	msr	CONTROL, r3
    isb
   27694:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   27698:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   2769c:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   276a0:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   276a4:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   276a8:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   276aa:	f01e f94b 	bl	45944 <configure_builtin_stack_guard>
    pop {r2, lr}
   276ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   276b2:	4770      	bx	lr
    ldr r1, =_kernel
   276b4:	2002611c 	.word	0x2002611c
    ldr v4, =_SCS_ICSR
   276b8:	e000ed04 	.word	0xe000ed04

000276bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   276bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   276c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   276c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   276c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   276ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   276cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   276d0:	2902      	cmp	r1, #2
    beq _oops
   276d2:	d0ff      	beq.n	276d4 <_oops>

000276d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   276d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   276d6:	f01e f939 	bl	4594c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   276da:	bd01      	pop	{r0, pc}

000276dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   276dc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   276de:	2b00      	cmp	r3, #0
   276e0:	db08      	blt.n	276f4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   276e2:	2201      	movs	r2, #1
   276e4:	f000 001f 	and.w	r0, r0, #31
   276e8:	fa02 f000 	lsl.w	r0, r2, r0
   276ec:	4a02      	ldr	r2, [pc, #8]	; (276f8 <arch_irq_enable+0x1c>)
   276ee:	095b      	lsrs	r3, r3, #5
   276f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   276f4:	4770      	bx	lr
   276f6:	bf00      	nop
   276f8:	e000e100 	.word	0xe000e100

000276fc <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   276fc:	4b05      	ldr	r3, [pc, #20]	; (27714 <arch_irq_is_enabled+0x18>)
   276fe:	0942      	lsrs	r2, r0, #5
   27700:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27704:	2301      	movs	r3, #1
   27706:	f000 001f 	and.w	r0, r0, #31
   2770a:	fa03 f000 	lsl.w	r0, r3, r0
}
   2770e:	4010      	ands	r0, r2
   27710:	4770      	bx	lr
   27712:	bf00      	nop
   27714:	e000e100 	.word	0xe000e100

00027718 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   27718:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   2771a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   2771c:	2c07      	cmp	r4, #7
{
   2771e:	4605      	mov	r5, r0
   27720:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   27722:	d90e      	bls.n	27742 <z_arm_irq_priority_set+0x2a>
   27724:	235e      	movs	r3, #94	; 0x5e
   27726:	4a10      	ldr	r2, [pc, #64]	; (27768 <z_arm_irq_priority_set+0x50>)
   27728:	4910      	ldr	r1, [pc, #64]	; (2776c <z_arm_irq_priority_set+0x54>)
   2772a:	4811      	ldr	r0, [pc, #68]	; (27770 <z_arm_irq_priority_set+0x58>)
   2772c:	f01c fdd0 	bl	442d0 <printk>
   27730:	4631      	mov	r1, r6
   27732:	4810      	ldr	r0, [pc, #64]	; (27774 <z_arm_irq_priority_set+0x5c>)
   27734:	2207      	movs	r2, #7
   27736:	f01c fdcb 	bl	442d0 <printk>
   2773a:	215e      	movs	r1, #94	; 0x5e
   2773c:	480a      	ldr	r0, [pc, #40]	; (27768 <z_arm_irq_priority_set+0x50>)
   2773e:	f01c ffe1 	bl	44704 <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27742:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   27744:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27746:	bfa8      	it	ge
   27748:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
   2774c:	ea4f 1444 	mov.w	r4, r4, lsl #5
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27750:	bfb8      	it	lt
   27752:	4b09      	ldrlt	r3, [pc, #36]	; (27778 <z_arm_irq_priority_set+0x60>)
   27754:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27756:	bfab      	itete	ge
   27758:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2775c:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27760:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27764:	555c      	strblt	r4, [r3, r5]
}
   27766:	bd70      	pop	{r4, r5, r6, pc}
   27768:	0004cb39 	.word	0x0004cb39
   2776c:	0004cb6f 	.word	0x0004cb6f
   27770:	0004b33b 	.word	0x0004b33b
   27774:	0004cb8a 	.word	0x0004cb8a
   27778:	e000ed14 	.word	0xe000ed14

0002777c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   2777c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   2777e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   27780:	4b04      	ldr	r3, [pc, #16]	; (27794 <_arch_isr_direct_pm+0x18>)
   27782:	6a18      	ldr	r0, [r3, #32]
   27784:	b118      	cbz	r0, 2778e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   27786:	2200      	movs	r2, #0
   27788:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
   2778a:	f020 fb0d 	bl	47da8 <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   2778e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   27790:	bd08      	pop	{r3, pc}
   27792:	bf00      	nop
   27794:	2002611c 	.word	0x2002611c

00027798 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   27798:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   2779c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   2779e:	490c      	ldr	r1, [pc, #48]	; (277d0 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   277a0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   277a4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   277a6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   277aa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   277ae:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   277b0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   277b4:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   277b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   277bc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   277c0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   277c2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   277c4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   277c6:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   277c8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   277cc:	4770      	bx	lr
   277ce:	bf00      	nop
   277d0:	000443d5 	.word	0x000443d5

000277d4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   277d4:	b508      	push	{r3, lr}
   277d6:	4604      	mov	r4, r0
   277d8:	460e      	mov	r6, r1
   277da:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   277dc:	2300      	movs	r3, #0
   277de:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   277e2:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   277e6:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   277ea:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   277ee:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   277f2:	f000 fc73 	bl	280dc <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   277f6:	4b09      	ldr	r3, [pc, #36]	; (2781c <arch_switch_to_main_thread+0x48>)
   277f8:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   277fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   277fc:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   27800:	4628      	mov	r0, r5
   27802:	f386 8809 	msr	PSP, r6
   27806:	2100      	movs	r1, #0
   27808:	b663      	cpsie	if
   2780a:	f381 8811 	msr	BASEPRI, r1
   2780e:	f3bf 8f6f 	isb	sy
   27812:	2200      	movs	r2, #0
   27814:	2300      	movs	r3, #0
   27816:	f01c fddd 	bl	443d4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   2781a:	bf00      	nop
   2781c:	2002611c 	.word	0x2002611c

00027820 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   27820:	4901      	ldr	r1, [pc, #4]	; (27828 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   27822:	2210      	movs	r2, #16
	str	r2, [r1]
   27824:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   27826:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   27828:	e000ed10 	.word	0xe000ed10

0002782c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   2782c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   2782e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   27830:	f380 8811 	msr	BASEPRI, r0
	isb
   27834:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   27838:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   2783c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   2783e:	b662      	cpsie	i
	isb
   27840:	f3bf 8f6f 	isb	sy

	bx	lr
   27844:	4770      	bx	lr
   27846:	bf00      	nop

00027848 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   27848:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   2784a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   2784c:	f381 8811 	msr	BASEPRI, r1

	wfe
   27850:	bf20      	wfe

	msr	BASEPRI, r0
   27852:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   27856:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   27858:	4770      	bx	lr
   2785a:	bf00      	nop

0002785c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27860:	4681      	mov	r9, r0
   27862:	b086      	sub	sp, #24

	if (esf != NULL) {
   27864:	460c      	mov	r4, r1
   27866:	2900      	cmp	r1, #0
   27868:	d075      	beq.n	27956 <z_arm_fatal_error+0xfa>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2786a:	2301      	movs	r3, #1
   2786c:	f04f 0000 	mov.w	r0, #0
   27870:	4d3c      	ldr	r5, [pc, #240]	; (27964 <z_arm_fatal_error+0x108>)
   27872:	f363 0007 	bfi	r0, r3, #0, #8
   27876:	4b3c      	ldr	r3, [pc, #240]	; (27968 <z_arm_fatal_error+0x10c>)
   27878:	4627      	mov	r7, r4
   2787a:	1aed      	subs	r5, r5, r3
   2787c:	688b      	ldr	r3, [r1, #8]
   2787e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   27882:	9300      	str	r3, [sp, #0]
   27884:	e9d1 2300 	ldrd	r2, r3, [r1]
   27888:	f365 108f 	bfi	r0, r5, #6, #10
   2788c:	4937      	ldr	r1, [pc, #220]	; (2796c <z_arm_fatal_error+0x110>)
   2788e:	f01c ff4a 	bl	44726 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   27892:	2301      	movs	r3, #1
   27894:	f04f 0000 	mov.w	r0, #0
   27898:	f363 0007 	bfi	r0, r3, #0, #8
   2789c:	6963      	ldr	r3, [r4, #20]
   2789e:	f365 108f 	bfi	r0, r5, #6, #10
   278a2:	9300      	str	r3, [sp, #0]
   278a4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   278a8:	4931      	ldr	r1, [pc, #196]	; (27970 <z_arm_fatal_error+0x114>)
   278aa:	f01c ff3c 	bl	44726 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   278ae:	2301      	movs	r3, #1
   278b0:	f04f 0000 	mov.w	r0, #0
   278b4:	f363 0007 	bfi	r0, r3, #0, #8
   278b8:	f365 108f 	bfi	r0, r5, #6, #10
   278bc:	69e2      	ldr	r2, [r4, #28]
   278be:	492d      	ldr	r1, [pc, #180]	; (27974 <z_arm_fatal_error+0x118>)
   278c0:	f01c ff31 	bl	44726 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   278c4:	2600      	movs	r6, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   278c6:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 27980 <z_arm_fatal_error+0x124>
   278ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   278ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   278d2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   278d6:	f043 0301 	orr.w	r3, r3, #1
   278da:	f363 0807 	bfi	r8, r3, #0, #8
   278de:	1cf3      	adds	r3, r6, #3
   278e0:	ed97 7a08 	vldr	s14, [r7, #32]
   278e4:	9304      	str	r3, [sp, #16]
   278e6:	edcd 7a05 	vstr	s15, [sp, #20]
   278ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   278ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   278f2:	1cb3      	adds	r3, r6, #2
   278f4:	9302      	str	r3, [sp, #8]
   278f6:	edcd 7a03 	vstr	s15, [sp, #12]
   278fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   278fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   27902:	edcd 7a01 	vstr	s15, [sp, #4]
   27906:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   2790a:	1c73      	adds	r3, r6, #1
   2790c:	f365 188f 	bfi	r8, r5, #6, #10
   27910:	9300      	str	r3, [sp, #0]
   27912:	4632      	mov	r2, r6
   27914:	ee17 3a90 	vmov	r3, s15
   27918:	4651      	mov	r1, sl
   2791a:	4640      	mov	r0, r8
	for (int i = 0; i < 16; i += 4) {
   2791c:	3604      	adds	r6, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   2791e:	f01c ff02 	bl	44726 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   27922:	2e10      	cmp	r6, #16
   27924:	f107 0710 	add.w	r7, r7, #16
   27928:	d1cf      	bne.n	278ca <z_arm_fatal_error+0x6e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   2792a:	2301      	movs	r3, #1
   2792c:	f04f 0000 	mov.w	r0, #0
   27930:	f363 0007 	bfi	r0, r3, #0, #8
   27934:	f365 108f 	bfi	r0, r5, #6, #10
   27938:	6e22      	ldr	r2, [r4, #96]	; 0x60
   2793a:	490f      	ldr	r1, [pc, #60]	; (27978 <z_arm_fatal_error+0x11c>)
   2793c:	f01c fef3 	bl	44726 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   27940:	f04f 0000 	mov.w	r0, #0
   27944:	2301      	movs	r3, #1
   27946:	f363 0007 	bfi	r0, r3, #0, #8
   2794a:	f365 108f 	bfi	r0, r5, #6, #10
   2794e:	69a2      	ldr	r2, [r4, #24]
   27950:	490a      	ldr	r1, [pc, #40]	; (2797c <z_arm_fatal_error+0x120>)
   27952:	f01c fee8 	bl	44726 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   27956:	4621      	mov	r1, r4
   27958:	4648      	mov	r0, r9
}
   2795a:	b006      	add	sp, #24
   2795c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   27960:	f016 bf1c 	b.w	3e79c <z_fatal_error>
   27964:	000498a8 	.word	0x000498a8
   27968:	00049788 	.word	0x00049788
   2796c:	0004cbbf 	.word	0x0004cbbf
   27970:	0004cbee 	.word	0x0004cbee
   27974:	0004cc1d 	.word	0x0004cc1d
   27978:	0004cc6f 	.word	0x0004cc6f
   2797c:	0004cc7e 	.word	0x0004cc7e
   27980:	0004cc2c 	.word	0x0004cc2c

00027984 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   27984:	bf30      	wfi
    b z_SysNmiOnReset
   27986:	f7ff bffd 	b.w	27984 <z_SysNmiOnReset>
   2798a:	bf00      	nop

0002798c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2798c:	4a14      	ldr	r2, [pc, #80]	; (279e0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2798e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27990:	4b14      	ldr	r3, [pc, #80]	; (279e4 <z_arm_prep_c+0x58>)
   27992:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   27996:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2799c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   279a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   279a4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   279a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   279ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   279b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   279b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   279b8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   279bc:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   279c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   279c4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   279c8:	2300      	movs	r3, #0
   279ca:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   279ce:	f016 ff87 	bl	3e8e0 <z_bss_zero>
	z_data_copy();
   279d2:	f016 ff8f 	bl	3e8f4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   279d6:	f000 fb49 	bl	2806c <z_arm_interrupt_init>
	z_cstart();
   279da:	f016 ffc9 	bl	3e970 <z_cstart>
   279de:	bf00      	nop
   279e0:	0001c200 	.word	0x0001c200
   279e4:	e000ed00 	.word	0xe000ed00

000279e8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   279e8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   279ea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   279ec:	4a0b      	ldr	r2, [pc, #44]	; (27a1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   279ee:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   279f0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   279f2:	bf1e      	ittt	ne
	movne	r1, #0
   279f4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   279f6:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   279f8:	f020 f9d6 	blne	47da8 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   279fc:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   279fe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   27a02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27a06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   27a0a:	4905      	ldr	r1, [pc, #20]	; (27a20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27a0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27a0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   27a10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   27a12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   27a16:	4903      	ldr	r1, [pc, #12]	; (27a24 <_isr_wrapper+0x3c>)
	bx r1
   27a18:	4708      	bx	r1
   27a1a:	0000      	.short	0x0000
	ldr r2, =_kernel
   27a1c:	2002611c 	.word	0x2002611c
	ldr r1, =_sw_isr_table
   27a20:	0004954c 	.word	0x0004954c
	ldr r1, =z_arm_int_exit
   27a24:	0002802d 	.word	0x0002802d

00027a28 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   27a28:	f01c fe74 	bl	44714 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27a2c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27a2e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   27a32:	4808      	ldr	r0, [pc, #32]	; (27a54 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   27a34:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27a38:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27a3a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   27a3e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   27a42:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   27a44:	4308      	orrs	r0, r1
    msr CONTROL, r0
   27a46:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   27a4a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   27a4e:	f7ff ff9d 	bl	2798c <z_arm_prep_c>
   27a52:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   27a54:	20031e80 	.word	0x20031e80

00027a58 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   27a58:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   27a5c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   27a60:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   27a62:	4672      	mov	r2, lr
	bl z_arm_fault
   27a64:	f000 f9ce 	bl	27e04 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   27a68:	bd01      	pop	{r0, pc}
   27a6a:	bf00      	nop

00027a6c <mem_manage_fault.isra.2>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   27a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   27a6e:	2301      	movs	r3, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   27a70:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   27a72:	f04f 0000 	mov.w	r0, #0
   27a76:	4c40      	ldr	r4, [pc, #256]	; (27b78 <mem_manage_fault.isra.2+0x10c>)
   27a78:	f363 0007 	bfi	r0, r3, #0, #8
   27a7c:	4b3f      	ldr	r3, [pc, #252]	; (27b7c <mem_manage_fault.isra.2+0x110>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   27a7e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   27a80:	1ae4      	subs	r4, r4, r3
   27a82:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27a86:	493e      	ldr	r1, [pc, #248]	; (27b80 <mem_manage_fault.isra.2+0x114>)
   27a88:	f364 108f 	bfi	r0, r4, #6, #10
   27a8c:	f01c fe4b 	bl	44726 <log_string_sync>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   27a90:	4b3c      	ldr	r3, [pc, #240]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27a94:	06d9      	lsls	r1, r3, #27
   27a96:	d509      	bpl.n	27aac <mem_manage_fault.isra.2+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   27a98:	f04f 0000 	mov.w	r0, #0
   27a9c:	2301      	movs	r3, #1
   27a9e:	f363 0007 	bfi	r0, r3, #0, #8
   27aa2:	f364 108f 	bfi	r0, r4, #6, #10
   27aa6:	4938      	ldr	r1, [pc, #224]	; (27b88 <mem_manage_fault.isra.2+0x11c>)
   27aa8:	f01c fe3d 	bl	44726 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   27aac:	4b35      	ldr	r3, [pc, #212]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27ab0:	071a      	lsls	r2, r3, #28
   27ab2:	d509      	bpl.n	27ac8 <mem_manage_fault.isra.2+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   27ab4:	f04f 0000 	mov.w	r0, #0
   27ab8:	2301      	movs	r3, #1
   27aba:	f363 0007 	bfi	r0, r3, #0, #8
   27abe:	f364 108f 	bfi	r0, r4, #6, #10
   27ac2:	4932      	ldr	r1, [pc, #200]	; (27b8c <mem_manage_fault.isra.2+0x120>)
   27ac4:	f01c fe2f 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   27ac8:	4d2e      	ldr	r5, [pc, #184]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27aca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27acc:	079b      	lsls	r3, r3, #30
   27ace:	d51c      	bpl.n	27b0a <mem_manage_fault.isra.2+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
   27ad0:	2301      	movs	r3, #1
   27ad2:	f04f 0000 	mov.w	r0, #0
   27ad6:	f363 0007 	bfi	r0, r3, #0, #8
   27ada:	f364 108f 	bfi	r0, r4, #6, #10
   27ade:	492c      	ldr	r1, [pc, #176]	; (27b90 <mem_manage_fault.isra.2+0x124>)
   27ae0:	f01c fe21 	bl	44726 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   27ae4:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   27ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27ae8:	0618      	lsls	r0, r3, #24
   27aea:	d50e      	bpl.n	27b0a <mem_manage_fault.isra.2+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   27aec:	f04f 0000 	mov.w	r0, #0
   27af0:	2301      	movs	r3, #1
   27af2:	f363 0007 	bfi	r0, r3, #0, #8
   27af6:	f364 108f 	bfi	r0, r4, #6, #10
   27afa:	4926      	ldr	r1, [pc, #152]	; (27b94 <mem_manage_fault.isra.2+0x128>)
   27afc:	f01c fe13 	bl	44726 <log_string_sync>
			if (from_hard_fault) {
   27b00:	b11f      	cbz	r7, 27b0a <mem_manage_fault.isra.2+0x9e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   27b02:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   27b08:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   27b0a:	4b1e      	ldr	r3, [pc, #120]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27b0e:	07d9      	lsls	r1, r3, #31
   27b10:	d509      	bpl.n	27b26 <mem_manage_fault.isra.2+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
   27b12:	f04f 0000 	mov.w	r0, #0
   27b16:	2301      	movs	r3, #1
   27b18:	f363 0007 	bfi	r0, r3, #0, #8
   27b1c:	f364 108f 	bfi	r0, r4, #6, #10
   27b20:	491d      	ldr	r1, [pc, #116]	; (27b98 <mem_manage_fault.isra.2+0x12c>)
   27b22:	f01c fe00 	bl	44726 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   27b26:	4b17      	ldr	r3, [pc, #92]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27b2a:	069a      	lsls	r2, r3, #26
   27b2c:	d509      	bpl.n	27b42 <mem_manage_fault.isra.2+0xd6>
		PR_FAULT_INFO(
   27b2e:	f04f 0000 	mov.w	r0, #0
   27b32:	2301      	movs	r3, #1
   27b34:	f363 0007 	bfi	r0, r3, #0, #8
   27b38:	f364 108f 	bfi	r0, r4, #6, #10
   27b3c:	4917      	ldr	r1, [pc, #92]	; (27b9c <mem_manage_fault.isra.2+0x130>)
   27b3e:	f01c fdf2 	bl	44726 <log_string_sync>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   27b42:	4b10      	ldr	r3, [pc, #64]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27b46:	06db      	lsls	r3, r3, #27
   27b48:	d50e      	bpl.n	27b68 <mem_manage_fault.isra.2+0xfc>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   27b4a:	4915      	ldr	r1, [pc, #84]	; (27ba0 <mem_manage_fault.isra.2+0x134>)
   27b4c:	f240 133f 	movw	r3, #319	; 0x13f
   27b50:	4a14      	ldr	r2, [pc, #80]	; (27ba4 <mem_manage_fault.isra.2+0x138>)
   27b52:	4815      	ldr	r0, [pc, #84]	; (27ba8 <mem_manage_fault.isra.2+0x13c>)
   27b54:	f01c fbbc 	bl	442d0 <printk>
   27b58:	4814      	ldr	r0, [pc, #80]	; (27bac <mem_manage_fault.isra.2+0x140>)
   27b5a:	f01c fbb9 	bl	442d0 <printk>
   27b5e:	f240 113f 	movw	r1, #319	; 0x13f
   27b62:	4810      	ldr	r0, [pc, #64]	; (27ba4 <mem_manage_fault.isra.2+0x138>)
   27b64:	f01c fdce 	bl	44704 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   27b68:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   27b6a:	4a06      	ldr	r2, [pc, #24]	; (27b84 <mem_manage_fault.isra.2+0x118>)
   27b6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27b6e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   27b72:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27b74:	7030      	strb	r0, [r6, #0]

	return reason;
}
   27b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27b78:	000498a8 	.word	0x000498a8
   27b7c:	00049788 	.word	0x00049788
   27b80:	0004cd34 	.word	0x0004cd34
   27b84:	e000ed00 	.word	0xe000ed00
   27b88:	0004cd4a 	.word	0x0004cd4a
   27b8c:	0004cd7d 	.word	0x0004cd7d
   27b90:	0004cd90 	.word	0x0004cd90
   27b94:	0004cda8 	.word	0x0004cda8
   27b98:	0004cdbe 	.word	0x0004cdbe
   27b9c:	0004cddd 	.word	0x0004cddd
   27ba0:	00052672 	.word	0x00052672
   27ba4:	0004ce0c 	.word	0x0004ce0c
   27ba8:	0004b33b 	.word	0x0004b33b
   27bac:	0004ce46 	.word	0x0004ce46

00027bb0 <bus_fault.isra.3>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   27bb2:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27bb4:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   27bb6:	f04f 0000 	mov.w	r0, #0
   27bba:	4c3d      	ldr	r4, [pc, #244]	; (27cb0 <bus_fault.isra.3+0x100>)
   27bbc:	f363 0007 	bfi	r0, r3, #0, #8
   27bc0:	4b3c      	ldr	r3, [pc, #240]	; (27cb4 <bus_fault.isra.3+0x104>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   27bc2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   27bc4:	1ae4      	subs	r4, r4, r3
   27bc6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27bca:	493b      	ldr	r1, [pc, #236]	; (27cb8 <bus_fault.isra.3+0x108>)
   27bcc:	f364 108f 	bfi	r0, r4, #6, #10
   27bd0:	f01c fda9 	bl	44726 <log_string_sync>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   27bd4:	4b39      	ldr	r3, [pc, #228]	; (27cbc <bus_fault.isra.3+0x10c>)
   27bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27bd8:	04d9      	lsls	r1, r3, #19
   27bda:	d509      	bpl.n	27bf0 <bus_fault.isra.3+0x40>
		PR_FAULT_INFO("  Stacking error");
   27bdc:	f04f 0000 	mov.w	r0, #0
   27be0:	2301      	movs	r3, #1
   27be2:	f363 0007 	bfi	r0, r3, #0, #8
   27be6:	f364 108f 	bfi	r0, r4, #6, #10
   27bea:	4935      	ldr	r1, [pc, #212]	; (27cc0 <bus_fault.isra.3+0x110>)
   27bec:	f01c fd9b 	bl	44726 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   27bf0:	4b32      	ldr	r3, [pc, #200]	; (27cbc <bus_fault.isra.3+0x10c>)
   27bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27bf4:	051a      	lsls	r2, r3, #20
   27bf6:	d509      	bpl.n	27c0c <bus_fault.isra.3+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   27bf8:	f04f 0000 	mov.w	r0, #0
   27bfc:	2301      	movs	r3, #1
   27bfe:	f363 0007 	bfi	r0, r3, #0, #8
   27c02:	f364 108f 	bfi	r0, r4, #6, #10
   27c06:	492f      	ldr	r1, [pc, #188]	; (27cc4 <bus_fault.isra.3+0x114>)
   27c08:	f01c fd8d 	bl	44726 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   27c0c:	4d2b      	ldr	r5, [pc, #172]	; (27cbc <bus_fault.isra.3+0x10c>)
   27c0e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27c10:	059b      	lsls	r3, r3, #22
   27c12:	d51c      	bpl.n	27c4e <bus_fault.isra.3+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
   27c14:	2301      	movs	r3, #1
   27c16:	f04f 0000 	mov.w	r0, #0
   27c1a:	f363 0007 	bfi	r0, r3, #0, #8
   27c1e:	f364 108f 	bfi	r0, r4, #6, #10
   27c22:	4929      	ldr	r1, [pc, #164]	; (27cc8 <bus_fault.isra.3+0x118>)
   27c24:	f01c fd7f 	bl	44726 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   27c28:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   27c2a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27c2c:	0418      	lsls	r0, r3, #16
   27c2e:	d50e      	bpl.n	27c4e <bus_fault.isra.3+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   27c30:	f04f 0000 	mov.w	r0, #0
   27c34:	2301      	movs	r3, #1
   27c36:	f363 0007 	bfi	r0, r3, #0, #8
   27c3a:	f364 108f 	bfi	r0, r4, #6, #10
   27c3e:	4923      	ldr	r1, [pc, #140]	; (27ccc <bus_fault.isra.3+0x11c>)
   27c40:	f01c fd71 	bl	44726 <log_string_sync>
			if (from_hard_fault) {
   27c44:	b11f      	cbz	r7, 27c4e <bus_fault.isra.3+0x9e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   27c46:	6aab      	ldr	r3, [r5, #40]	; 0x28
   27c48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27c4c:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   27c4e:	4b1b      	ldr	r3, [pc, #108]	; (27cbc <bus_fault.isra.3+0x10c>)
   27c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c52:	0559      	lsls	r1, r3, #21
   27c54:	d509      	bpl.n	27c6a <bus_fault.isra.3+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
   27c56:	f04f 0000 	mov.w	r0, #0
   27c5a:	2301      	movs	r3, #1
   27c5c:	f363 0007 	bfi	r0, r3, #0, #8
   27c60:	f364 108f 	bfi	r0, r4, #6, #10
   27c64:	491a      	ldr	r1, [pc, #104]	; (27cd0 <bus_fault.isra.3+0x120>)
   27c66:	f01c fd5e 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   27c6a:	4b14      	ldr	r3, [pc, #80]	; (27cbc <bus_fault.isra.3+0x10c>)
   27c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   27c6e:	05d2      	lsls	r2, r2, #23
   27c70:	d511      	bpl.n	27c96 <bus_fault.isra.3+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
   27c72:	f04f 0000 	mov.w	r0, #0
   27c76:	2301      	movs	r3, #1
   27c78:	4916      	ldr	r1, [pc, #88]	; (27cd4 <bus_fault.isra.3+0x124>)
   27c7a:	f363 0007 	bfi	r0, r3, #0, #8
   27c7e:	f364 108f 	bfi	r0, r4, #6, #10
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27c82:	f01c fd50 	bl	44726 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   27c86:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   27c88:	4a0c      	ldr	r2, [pc, #48]	; (27cbc <bus_fault.isra.3+0x10c>)
   27c8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27c8c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   27c90:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   27c92:	7030      	strb	r0, [r6, #0]

	return reason;
}
   27c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   27c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27c98:	049b      	lsls	r3, r3, #18
   27c9a:	d5f4      	bpl.n	27c86 <bus_fault.isra.3+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   27c9c:	f04f 0000 	mov.w	r0, #0
   27ca0:	2301      	movs	r3, #1
   27ca2:	f363 0007 	bfi	r0, r3, #0, #8
   27ca6:	f364 108f 	bfi	r0, r4, #6, #10
   27caa:	490b      	ldr	r1, [pc, #44]	; (27cd8 <bus_fault.isra.3+0x128>)
   27cac:	e7e9      	b.n	27c82 <bus_fault.isra.3+0xd2>
   27cae:	bf00      	nop
   27cb0:	000498a8 	.word	0x000498a8
   27cb4:	00049788 	.word	0x00049788
   27cb8:	0004ccac 	.word	0x0004ccac
   27cbc:	e000ed00 	.word	0xe000ed00
   27cc0:	0004ccc2 	.word	0x0004ccc2
   27cc4:	0004cd7d 	.word	0x0004cd7d
   27cc8:	0004ccd3 	.word	0x0004ccd3
   27ccc:	0004ccec 	.word	0x0004ccec
   27cd0:	0004cd01 	.word	0x0004cd01
   27cd4:	0004cd1c 	.word	0x0004cd1c
   27cd8:	0004cddd 	.word	0x0004cddd

00027cdc <usage_fault.isra.4>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   27cdc:	b538      	push	{r3, r4, r5, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   27cde:	f04f 0000 	mov.w	r0, #0
   27ce2:	2301      	movs	r3, #1
   27ce4:	4c3c      	ldr	r4, [pc, #240]	; (27dd8 <usage_fault.isra.4+0xfc>)
   27ce6:	f363 0007 	bfi	r0, r3, #0, #8
   27cea:	4b3c      	ldr	r3, [pc, #240]	; (27ddc <usage_fault.isra.4+0x100>)
   27cec:	493c      	ldr	r1, [pc, #240]	; (27de0 <usage_fault.isra.4+0x104>)
   27cee:	1ae4      	subs	r4, r4, r3
   27cf0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   27cf4:	f364 108f 	bfi	r0, r4, #6, #10
   27cf8:	f01c fd15 	bl	44726 <log_string_sync>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   27cfc:	4b39      	ldr	r3, [pc, #228]	; (27de4 <usage_fault.isra.4+0x108>)
   27cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d00:	019b      	lsls	r3, r3, #6
   27d02:	d509      	bpl.n	27d18 <usage_fault.isra.4+0x3c>
		PR_FAULT_INFO("  Division by zero");
   27d04:	f04f 0000 	mov.w	r0, #0
   27d08:	2301      	movs	r3, #1
   27d0a:	f363 0007 	bfi	r0, r3, #0, #8
   27d0e:	f364 108f 	bfi	r0, r4, #6, #10
   27d12:	4935      	ldr	r1, [pc, #212]	; (27de8 <usage_fault.isra.4+0x10c>)
   27d14:	f01c fd07 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   27d18:	4b32      	ldr	r3, [pc, #200]	; (27de4 <usage_fault.isra.4+0x108>)
   27d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d1c:	01dd      	lsls	r5, r3, #7
   27d1e:	d509      	bpl.n	27d34 <usage_fault.isra.4+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   27d20:	f04f 0000 	mov.w	r0, #0
   27d24:	2301      	movs	r3, #1
   27d26:	f363 0007 	bfi	r0, r3, #0, #8
   27d2a:	f364 108f 	bfi	r0, r4, #6, #10
   27d2e:	492f      	ldr	r1, [pc, #188]	; (27dec <usage_fault.isra.4+0x110>)
   27d30:	f01c fcf9 	bl	44726 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   27d34:	4b2b      	ldr	r3, [pc, #172]	; (27de4 <usage_fault.isra.4+0x108>)
   27d36:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   27d38:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   27d3c:	d00a      	beq.n	27d54 <usage_fault.isra.4+0x78>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   27d3e:	2301      	movs	r3, #1
   27d40:	f04f 0000 	mov.w	r0, #0
   27d44:	f363 0007 	bfi	r0, r3, #0, #8
   27d48:	f364 108f 	bfi	r0, r4, #6, #10
   27d4c:	4928      	ldr	r1, [pc, #160]	; (27df0 <usage_fault.isra.4+0x114>)
   27d4e:	f01c fcea 	bl	44726 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   27d52:	2502      	movs	r5, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   27d54:	4b23      	ldr	r3, [pc, #140]	; (27de4 <usage_fault.isra.4+0x108>)
   27d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d58:	0318      	lsls	r0, r3, #12
   27d5a:	d509      	bpl.n	27d70 <usage_fault.isra.4+0x94>
		PR_FAULT_INFO("  No coprocessor instructions");
   27d5c:	f04f 0000 	mov.w	r0, #0
   27d60:	2301      	movs	r3, #1
   27d62:	f363 0007 	bfi	r0, r3, #0, #8
   27d66:	f364 108f 	bfi	r0, r4, #6, #10
   27d6a:	4922      	ldr	r1, [pc, #136]	; (27df4 <usage_fault.isra.4+0x118>)
   27d6c:	f01c fcdb 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   27d70:	4b1c      	ldr	r3, [pc, #112]	; (27de4 <usage_fault.isra.4+0x108>)
   27d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d74:	0359      	lsls	r1, r3, #13
   27d76:	d509      	bpl.n	27d8c <usage_fault.isra.4+0xb0>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   27d78:	f04f 0000 	mov.w	r0, #0
   27d7c:	2301      	movs	r3, #1
   27d7e:	f363 0007 	bfi	r0, r3, #0, #8
   27d82:	f364 108f 	bfi	r0, r4, #6, #10
   27d86:	491c      	ldr	r1, [pc, #112]	; (27df8 <usage_fault.isra.4+0x11c>)
   27d88:	f01c fccd 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   27d8c:	4b15      	ldr	r3, [pc, #84]	; (27de4 <usage_fault.isra.4+0x108>)
   27d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27d90:	039a      	lsls	r2, r3, #14
   27d92:	d509      	bpl.n	27da8 <usage_fault.isra.4+0xcc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   27d94:	f04f 0000 	mov.w	r0, #0
   27d98:	2301      	movs	r3, #1
   27d9a:	f363 0007 	bfi	r0, r3, #0, #8
   27d9e:	f364 108f 	bfi	r0, r4, #6, #10
   27da2:	4916      	ldr	r1, [pc, #88]	; (27dfc <usage_fault.isra.4+0x120>)
   27da4:	f01c fcbf 	bl	44726 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   27da8:	4b0e      	ldr	r3, [pc, #56]	; (27de4 <usage_fault.isra.4+0x108>)
   27daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27dac:	03db      	lsls	r3, r3, #15
   27dae:	d509      	bpl.n	27dc4 <usage_fault.isra.4+0xe8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   27db0:	f04f 0000 	mov.w	r0, #0
   27db4:	2301      	movs	r3, #1
   27db6:	f363 0007 	bfi	r0, r3, #0, #8
   27dba:	f364 108f 	bfi	r0, r4, #6, #10
   27dbe:	4910      	ldr	r1, [pc, #64]	; (27e00 <usage_fault.isra.4+0x124>)
   27dc0:	f01c fcb1 	bl	44726 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27dc4:	4a07      	ldr	r2, [pc, #28]	; (27de4 <usage_fault.isra.4+0x108>)

	return reason;
}
   27dc6:	4628      	mov	r0, r5
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27dc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27dca:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   27dce:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   27dd2:	6293      	str	r3, [r2, #40]	; 0x28
}
   27dd4:	bd38      	pop	{r3, r4, r5, pc}
   27dd6:	bf00      	nop
   27dd8:	000498a8 	.word	0x000498a8
   27ddc:	00049788 	.word	0x00049788
   27de0:	0004ce80 	.word	0x0004ce80
   27de4:	e000ed00 	.word	0xe000ed00
   27de8:	0004ce98 	.word	0x0004ce98
   27dec:	0004ceab 	.word	0x0004ceab
   27df0:	0004cec5 	.word	0x0004cec5
   27df4:	0004ceef 	.word	0x0004ceef
   27df8:	0004cf0d 	.word	0x0004cf0d
   27dfc:	0004cf32 	.word	0x0004cf32
   27e00:	0004cf4c 	.word	0x0004cf4c

00027e04 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   27e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27e08:	4b70      	ldr	r3, [pc, #448]	; (27fcc <z_arm_fault+0x1c8>)
{
   27e0a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27e0c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   27e10:	4606      	mov	r6, r0
   27e12:	4689      	mov	r9, r1
   27e14:	4614      	mov	r4, r2
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27e16:	f3c8 0708 	ubfx	r7, r8, #0, #9
   27e1a:	2500      	movs	r5, #0
   27e1c:	f385 8811 	msr	BASEPRI, r5
   27e20:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   27e24:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   27e28:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   27e2c:	d11b      	bne.n	27e66 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   27e2e:	07d0      	lsls	r0, r2, #31
   27e30:	d419      	bmi.n	27e66 <z_arm_fault+0x62>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   27e32:	0651      	lsls	r1, r2, #25
   27e34:	d403      	bmi.n	27e3e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   27e36:	0722      	lsls	r2, r4, #28
   27e38:	d412      	bmi.n	27e60 <z_arm_fault+0x5c>
			*nested_exc = true;
   27e3a:	2501      	movs	r5, #1
   27e3c:	e012      	b.n	27e64 <z_arm_fault+0x60>
		PR_FAULT_INFO("Exception occurred in Secure State");
   27e3e:	2301      	movs	r3, #1
   27e40:	f04f 0000 	mov.w	r0, #0
   27e44:	4a62      	ldr	r2, [pc, #392]	; (27fd0 <z_arm_fault+0x1cc>)
   27e46:	f363 0007 	bfi	r0, r3, #0, #8
   27e4a:	4b62      	ldr	r3, [pc, #392]	; (27fd4 <z_arm_fault+0x1d0>)
   27e4c:	4962      	ldr	r1, [pc, #392]	; (27fd8 <z_arm_fault+0x1d4>)
   27e4e:	1a9b      	subs	r3, r3, r2
   27e50:	08db      	lsrs	r3, r3, #3
   27e52:	f363 108f 	bfi	r0, r3, #6, #10
   27e56:	f01c fc66 	bl	44726 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   27e5a:	f014 0504 	ands.w	r5, r4, #4
   27e5e:	d001      	beq.n	27e64 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)psp;
   27e60:	464e      	mov	r6, r9
	*nested_exc = false;
   27e62:	2500      	movs	r5, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   27e64:	b97e      	cbnz	r6, 27e86 <z_arm_fault+0x82>
   27e66:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   27e6a:	4a5c      	ldr	r2, [pc, #368]	; (27fdc <z_arm_fault+0x1d8>)
   27e6c:	495c      	ldr	r1, [pc, #368]	; (27fe0 <z_arm_fault+0x1dc>)
   27e6e:	485d      	ldr	r0, [pc, #372]	; (27fe4 <z_arm_fault+0x1e0>)
   27e70:	f01c fa2e 	bl	442d0 <printk>
   27e74:	485c      	ldr	r0, [pc, #368]	; (27fe8 <z_arm_fault+0x1e4>)
   27e76:	f01c fa2b 	bl	442d0 <printk>
   27e7a:	f44f 716f 	mov.w	r1, #956	; 0x3bc
   27e7e:	4857      	ldr	r0, [pc, #348]	; (27fdc <z_arm_fault+0x1d8>)
   27e80:	f01c fc40 	bl	44704 <assert_post_action>
   27e84:	2600      	movs	r6, #0
	*recoverable = false;
   27e86:	2300      	movs	r3, #0
   27e88:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   27e8c:	1efb      	subs	r3, r7, #3
   27e8e:	2b09      	cmp	r3, #9
   27e90:	d87f      	bhi.n	27f92 <z_arm_fault+0x18e>
   27e92:	e8df f003 	tbb	[pc, r3]
   27e96:	6905      	.short	0x6905
   27e98:	7e7e4c6d 	.word	0x7e7e4c6d
   27e9c:	717e7e7e 	.word	0x717e7e7e
	PR_FAULT_INFO("***** HARD FAULT *****");
   27ea0:	2301      	movs	r3, #1
   27ea2:	f04f 0000 	mov.w	r0, #0
	*recoverable = false;
   27ea6:	f04f 0800 	mov.w	r8, #0
	PR_FAULT_INFO("***** HARD FAULT *****");
   27eaa:	f363 0007 	bfi	r0, r3, #0, #8
   27eae:	4f49      	ldr	r7, [pc, #292]	; (27fd4 <z_arm_fault+0x1d0>)
   27eb0:	4b47      	ldr	r3, [pc, #284]	; (27fd0 <z_arm_fault+0x1cc>)
   27eb2:	494e      	ldr	r1, [pc, #312]	; (27fec <z_arm_fault+0x1e8>)
   27eb4:	1aff      	subs	r7, r7, r3
   27eb6:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   27eba:	f367 108f 	bfi	r0, r7, #6, #10
   27ebe:	f01c fc32 	bl	44726 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   27ec2:	4b42      	ldr	r3, [pc, #264]	; (27fcc <z_arm_fault+0x1c8>)
	*recoverable = false;
   27ec4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   27ec8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   27eca:	f014 0402 	ands.w	r4, r4, #2
   27ece:	d00b      	beq.n	27ee8 <z_arm_fault+0xe4>
		PR_EXC("  Bus fault on vector table read");
   27ed0:	f04f 0000 	mov.w	r0, #0
   27ed4:	2301      	movs	r3, #1
   27ed6:	4946      	ldr	r1, [pc, #280]	; (27ff0 <z_arm_fault+0x1ec>)
   27ed8:	f363 0007 	bfi	r0, r3, #0, #8
   27edc:	f367 108f 	bfi	r0, r7, #6, #10
	PR_FAULT_INFO(
   27ee0:	f01c fc21 	bl	44726 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   27ee4:	2400      	movs	r4, #0
   27ee6:	e025      	b.n	27f34 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   27ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27eea:	005b      	lsls	r3, r3, #1
   27eec:	d522      	bpl.n	27f34 <z_arm_fault+0x130>
		PR_EXC("  Fault escalation (see below)");
   27eee:	2301      	movs	r3, #1
   27ef0:	f04f 0000 	mov.w	r0, #0
   27ef4:	f363 0007 	bfi	r0, r3, #0, #8
   27ef8:	f367 108f 	bfi	r0, r7, #6, #10
   27efc:	493d      	ldr	r1, [pc, #244]	; (27ff4 <z_arm_fault+0x1f0>)
   27efe:	f01c fc12 	bl	44726 <log_string_sync>
		if (SCB_MMFSR != 0) {
   27f02:	4b3d      	ldr	r3, [pc, #244]	; (27ff8 <z_arm_fault+0x1f4>)
   27f04:	781b      	ldrb	r3, [r3, #0]
   27f06:	b12b      	cbz	r3, 27f14 <z_arm_fault+0x110>
			reason = mem_manage_fault(esf, 1, recoverable);
   27f08:	2001      	movs	r0, #1
   27f0a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   27f0e:	f7ff fdad 	bl	27a6c <mem_manage_fault.isra.2>
   27f12:	e00e      	b.n	27f32 <z_arm_fault+0x12e>
		} else if (SCB_BFSR != 0) {
   27f14:	4b39      	ldr	r3, [pc, #228]	; (27ffc <z_arm_fault+0x1f8>)
   27f16:	781b      	ldrb	r3, [r3, #0]
   27f18:	b12b      	cbz	r3, 27f26 <z_arm_fault+0x122>
			reason = bus_fault(esf, 1, recoverable);
   27f1a:	2001      	movs	r0, #1
   27f1c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   27f20:	f7ff fe46 	bl	27bb0 <bus_fault.isra.3>
   27f24:	e005      	b.n	27f32 <z_arm_fault+0x12e>
		} else if (SCB_UFSR != 0) {
   27f26:	4b36      	ldr	r3, [pc, #216]	; (28000 <z_arm_fault+0x1fc>)
   27f28:	881b      	ldrh	r3, [r3, #0]
   27f2a:	b29b      	uxth	r3, r3
   27f2c:	b113      	cbz	r3, 27f34 <z_arm_fault+0x130>
			reason = usage_fault(esf);
   27f2e:	f7ff fed5 	bl	27cdc <usage_fault.isra.4>
   27f32:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   27f34:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27f38:	b99b      	cbnz	r3, 27f62 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   27f3a:	2268      	movs	r2, #104	; 0x68
   27f3c:	4631      	mov	r1, r6
   27f3e:	a802      	add	r0, sp, #8
   27f40:	f020 f922 	bl	48188 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   27f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27f46:	2d00      	cmp	r5, #0
   27f48:	d03a      	beq.n	27fc0 <z_arm_fault+0x1bc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   27f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   27f4e:	b922      	cbnz	r2, 27f5a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   27f50:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   27f54:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   27f58:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   27f5a:	a902      	add	r1, sp, #8
   27f5c:	4620      	mov	r0, r4
   27f5e:	f7ff fc7d 	bl	2785c <z_arm_fatal_error>
}
   27f62:	b01d      	add	sp, #116	; 0x74
   27f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   27f68:	f10d 0107 	add.w	r1, sp, #7
   27f6c:	2000      	movs	r0, #0
   27f6e:	e7ce      	b.n	27f0e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   27f70:	f10d 0107 	add.w	r1, sp, #7
   27f74:	2000      	movs	r0, #0
   27f76:	e7d3      	b.n	27f20 <z_arm_fault+0x11c>
	PR_FAULT_INFO(
   27f78:	2301      	movs	r3, #1
   27f7a:	f04f 0000 	mov.w	r0, #0
   27f7e:	4a14      	ldr	r2, [pc, #80]	; (27fd0 <z_arm_fault+0x1cc>)
   27f80:	f363 0007 	bfi	r0, r3, #0, #8
   27f84:	4b13      	ldr	r3, [pc, #76]	; (27fd4 <z_arm_fault+0x1d0>)
   27f86:	491f      	ldr	r1, [pc, #124]	; (28004 <z_arm_fault+0x200>)
   27f88:	1a9b      	subs	r3, r3, r2
   27f8a:	08db      	lsrs	r3, r3, #3
   27f8c:	f363 108f 	bfi	r0, r3, #6, #10
   27f90:	e7a6      	b.n	27ee0 <z_arm_fault+0xdc>
	PR_FAULT_INFO("***** %s %d) *****",
   27f92:	2301      	movs	r3, #1
   27f94:	f04f 0000 	mov.w	r0, #0
   27f98:	4a0d      	ldr	r2, [pc, #52]	; (27fd0 <z_arm_fault+0x1cc>)
   27f9a:	f363 0007 	bfi	r0, r3, #0, #8
   27f9e:	4b0d      	ldr	r3, [pc, #52]	; (27fd4 <z_arm_fault+0x1d0>)
   27fa0:	4919      	ldr	r1, [pc, #100]	; (28008 <z_arm_fault+0x204>)
   27fa2:	1a9b      	subs	r3, r3, r2
   27fa4:	08db      	lsrs	r3, r3, #3
   27fa6:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   27faa:	f363 108f 	bfi	r0, r3, #6, #10
   27fae:	4a17      	ldr	r2, [pc, #92]	; (2800c <z_arm_fault+0x208>)
   27fb0:	f1a7 0310 	sub.w	r3, r7, #16
   27fb4:	bf08      	it	eq
   27fb6:	460a      	moveq	r2, r1
   27fb8:	4915      	ldr	r1, [pc, #84]	; (28010 <z_arm_fault+0x20c>)
   27fba:	f01c fbb4 	bl	44726 <log_string_sync>
   27fbe:	e791      	b.n	27ee4 <z_arm_fault+0xe0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   27fc0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   27fc4:	f023 0301 	bic.w	r3, r3, #1
   27fc8:	e7c6      	b.n	27f58 <z_arm_fault+0x154>
   27fca:	bf00      	nop
   27fcc:	e000ed00 	.word	0xe000ed00
   27fd0:	00049788 	.word	0x00049788
   27fd4:	000498a8 	.word	0x000498a8
   27fd8:	0004cfa5 	.word	0x0004cfa5
   27fdc:	0004ce0c 	.word	0x0004ce0c
   27fe0:	0004cfc8 	.word	0x0004cfc8
   27fe4:	0004b33b 	.word	0x0004b33b
   27fe8:	0004cfdb 	.word	0x0004cfdb
   27fec:	0004d019 	.word	0x0004d019
   27ff0:	0004d030 	.word	0x0004d030
   27ff4:	0004d051 	.word	0x0004d051
   27ff8:	e000ed28 	.word	0xe000ed28
   27ffc:	e000ed29 	.word	0xe000ed29
   28000:	e000ed2a 	.word	0xe000ed2a
   28004:	0004d070 	.word	0x0004d070
   28008:	0004cf77 	.word	0x0004cf77
   2800c:	0004cf8c 	.word	0x0004cf8c
   28010:	0004d0a6 	.word	0x0004d0a6

00028014 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   28014:	4b04      	ldr	r3, [pc, #16]	; (28028 <z_arm_fault_init+0x14>)
   28016:	695a      	ldr	r2, [r3, #20]
   28018:	f042 0210 	orr.w	r2, r2, #16
   2801c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2801e:	695a      	ldr	r2, [r3, #20]
   28020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   28024:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   28026:	4770      	bx	lr
   28028:	e000ed00 	.word	0xe000ed00

0002802c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   2802c:	4b04      	ldr	r3, [pc, #16]	; (28040 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   2802e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   28030:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   28032:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   28034:	d003      	beq.n	2803e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   28036:	4903      	ldr	r1, [pc, #12]	; (28044 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   28038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   2803c:	600a      	str	r2, [r1, #0]

0002803e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   2803e:	4770      	bx	lr
	ldr r3, =_kernel
   28040:	2002611c 	.word	0x2002611c
	ldr r1, =_SCS_ICSR
   28044:	e000ed04 	.word	0xe000ed04

00028048 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   28048:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   2804c:	4905      	ldr	r1, [pc, #20]	; (28064 <sys_arch_reboot+0x1c>)
   2804e:	4b06      	ldr	r3, [pc, #24]	; (28068 <sys_arch_reboot+0x20>)
   28050:	68ca      	ldr	r2, [r1, #12]
   28052:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   28056:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   28058:	60cb      	str	r3, [r1, #12]
   2805a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   2805e:	bf00      	nop
   28060:	e7fd      	b.n	2805e <sys_arch_reboot+0x16>
   28062:	bf00      	nop
   28064:	e000ed00 	.word	0xe000ed00
   28068:	05fa0004 	.word	0x05fa0004

0002806c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   2806c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2806e:	2120      	movs	r1, #32
   28070:	4803      	ldr	r0, [pc, #12]	; (28080 <z_arm_interrupt_init+0x14>)
   28072:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   28074:	3301      	adds	r3, #1
   28076:	2b41      	cmp	r3, #65	; 0x41
   28078:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   2807c:	d1f9      	bne.n	28072 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   2807e:	4770      	bx	lr
   28080:	e000e100 	.word	0xe000e100

00028084 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   28084:	b510      	push	{r4, lr}
   28086:	4604      	mov	r4, r0
	z_thread_single_abort(thread);
   28088:	f017 ffda 	bl	40040 <z_thread_single_abort>

	if (_current == thread) {
   2808c:	4b11      	ldr	r3, [pc, #68]	; (280d4 <z_impl_k_thread_abort+0x50>)
   2808e:	689b      	ldr	r3, [r3, #8]
   28090:	42a3      	cmp	r3, r4
   28092:	d107      	bne.n	280a4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28094:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   28098:	b183      	cbz	r3, 280bc <z_impl_k_thread_abort+0x38>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   2809a:	4a0f      	ldr	r2, [pc, #60]	; (280d8 <z_impl_k_thread_abort+0x54>)
   2809c:	6853      	ldr	r3, [r2, #4]
   2809e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   280a2:	6053      	str	r3, [r2, #4]
	__asm__ volatile(
   280a4:	f04f 0320 	mov.w	r3, #32
   280a8:	f3ef 8011 	mrs	r0, BASEPRI
   280ac:	f383 8811 	msr	BASEPRI, r3
   280b0:	f3bf 8f6f 	isb	sy
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   280b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   280b8:	f01f bed1 	b.w	47e5e <z_reschedule_irqlock>
   280bc:	f04f 0320 	mov.w	r3, #32
   280c0:	f3ef 8011 	mrs	r0, BASEPRI
   280c4:	f383 8811 	msr	BASEPRI, r3
   280c8:	f3bf 8f6f 	isb	sy

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
   280cc:	f7ff fa84 	bl	275d8 <arch_swap>
	return ret;
   280d0:	e7e8      	b.n	280a4 <z_impl_k_thread_abort+0x20>
   280d2:	bf00      	nop
   280d4:	2002611c 	.word	0x2002611c
   280d8:	e000ed00 	.word	0xe000ed00

000280dc <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   280dc:	b510      	push	{r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   280de:	4b0e      	ldr	r3, [pc, #56]	; (28118 <z_arm_configure_static_mpu_regions+0x3c>)
{
   280e0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   280e2:	9302      	str	r3, [sp, #8]
   280e4:	4b0d      	ldr	r3, [pc, #52]	; (2811c <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   280e6:	4c0e      	ldr	r4, [pc, #56]	; (28120 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   280e8:	9303      	str	r3, [sp, #12]
   280ea:	4b0e      	ldr	r3, [pc, #56]	; (28124 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   280ec:	4a0e      	ldr	r2, [pc, #56]	; (28128 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   280ee:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   280f0:	ab02      	add	r3, sp, #8
   280f2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   280f4:	a801      	add	r0, sp, #4
   280f6:	4623      	mov	r3, r4
   280f8:	2101      	movs	r1, #1
   280fa:	f000 f97d 	bl	283f8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   280fe:	2300      	movs	r3, #0
   28100:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   28102:	4b0a      	ldr	r3, [pc, #40]	; (2812c <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   28104:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   28106:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   28108:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   2810a:	9305      	str	r3, [sp, #20]
   2810c:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2810e:	f000 f999 	bl	28444 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   28112:	b008      	add	sp, #32
   28114:	bd10      	pop	{r4, pc}
   28116:	bf00      	nop
   28118:	20020000 	.word	0x20020000
   2811c:	00000000 	.word	0x00000000
   28120:	20040000 	.word	0x20040000
   28124:	00010006 	.word	0x00010006
   28128:	20020000 	.word	0x20020000
   2812c:	20020e60 	.word	0x20020e60

00028130 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   28130:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   28132:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   28134:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   28136:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   2813a:	f004 031f 	and.w	r3, r4, #31
   2813e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   28140:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   28142:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   28144:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   28148:	4904      	ldr	r1, [pc, #16]	; (2815c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   2814a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   2814e:	f043 0301 	orr.w	r3, r3, #1
   28152:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   28154:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   28156:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   28158:	bd10      	pop	{r4, pc}
   2815a:	bf00      	nop
   2815c:	e000ed90 	.word	0xe000ed90

00028160 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   28160:	280f      	cmp	r0, #15
{
   28162:	b510      	push	{r4, lr}
   28164:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1)) {
   28166:	d912      	bls.n	2818e <region_allocate_and_init+0x2e>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   28168:	2301      	movs	r3, #1
   2816a:	f04f 0000 	mov.w	r0, #0
   2816e:	4a09      	ldr	r2, [pc, #36]	; (28194 <region_allocate_and_init+0x34>)
   28170:	f363 0007 	bfi	r0, r3, #0, #8
   28174:	4b08      	ldr	r3, [pc, #32]	; (28198 <region_allocate_and_init+0x38>)
   28176:	4909      	ldr	r1, [pc, #36]	; (2819c <region_allocate_and_init+0x3c>)
   28178:	1a9b      	subs	r3, r3, r2
   2817a:	08db      	lsrs	r3, r3, #3
   2817c:	4622      	mov	r2, r4
   2817e:	f363 108f 	bfi	r0, r3, #6, #10
   28182:	f01c fad0 	bl	44726 <log_string_sync>
		return -EINVAL;
   28186:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   2818a:	4620      	mov	r0, r4
   2818c:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   2818e:	f7ff ffcf 	bl	28130 <region_init>
	return index;
   28192:	e7fa      	b.n	2818a <region_allocate_and_init+0x2a>
   28194:	00049788 	.word	0x00049788
   28198:	00049860 	.word	0x00049860
   2819c:	0004d244 	.word	0x0004d244

000281a0 <mpu_configure_regions_and_partition.constprop.2>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   281a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   281a4:	4607      	mov	r7, r0
   281a6:	4688      	mov	r8, r1
   281a8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   281aa:	2600      	movs	r6, #0
	MPU->RNR = index;
   281ac:	4d58      	ldr	r5, [pc, #352]	; (28310 <mpu_configure_regions_and_partition.constprop.2+0x170>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   281ae:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   281b0:	4546      	cmp	r6, r8
   281b2:	da3d      	bge.n	28230 <mpu_configure_regions_and_partition.constprop.2+0x90>
		if (regions[i]->size == 0U) {
   281b4:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   281b8:	f8d3 9004 	ldr.w	r9, [r3, #4]
   281bc:	f1b9 0f00 	cmp.w	r9, #0
   281c0:	d059      	beq.n	28276 <mpu_configure_regions_and_partition.constprop.2+0xd6>
		&&
   281c2:	f1b9 0f1f 	cmp.w	r9, #31
   281c6:	d922      	bls.n	2820e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		&&
   281c8:	f019 0f1f 	tst.w	r9, #31
   281cc:	d11f      	bne.n	2820e <mpu_configure_regions_and_partition.constprop.2+0x6e>
		((part->start &
   281ce:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   281d2:	f01a 0f1f 	tst.w	sl, #31
   281d6:	d11a      	bne.n	2820e <mpu_configure_regions_and_partition.constprop.2+0x6e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   281d8:	4650      	mov	r0, sl
   281da:	f01d fbdd 	bl	45998 <arm_cmse_mpu_region_get>
   281de:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   281e0:	eb09 000a 	add.w	r0, r9, sl
   281e4:	3801      	subs	r0, #1
   281e6:	f01d fbd7 	bl	45998 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   281ea:	4583      	cmp	fp, r0
   281ec:	d024      	beq.n	28238 <mpu_configure_regions_and_partition.constprop.2+0x98>
	return -EINVAL;
   281ee:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   281f2:	2301      	movs	r3, #1
   281f4:	f04f 0000 	mov.w	r0, #0
   281f8:	4a46      	ldr	r2, [pc, #280]	; (28314 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   281fa:	f363 0007 	bfi	r0, r3, #0, #8
   281fe:	4b46      	ldr	r3, [pc, #280]	; (28318 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   28200:	4946      	ldr	r1, [pc, #280]	; (2831c <mpu_configure_regions_and_partition.constprop.2+0x17c>)
   28202:	1a9b      	subs	r3, r3, r2
   28204:	08db      	lsrs	r3, r3, #3
   28206:	f363 108f 	bfi	r0, r3, #6, #10
   2820a:	465a      	mov	r2, fp
   2820c:	e00c      	b.n	28228 <mpu_configure_regions_and_partition.constprop.2+0x88>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2820e:	2301      	movs	r3, #1
   28210:	f04f 0000 	mov.w	r0, #0
   28214:	4a3f      	ldr	r2, [pc, #252]	; (28314 <mpu_configure_regions_and_partition.constprop.2+0x174>)
   28216:	f363 0007 	bfi	r0, r3, #0, #8
   2821a:	4b3f      	ldr	r3, [pc, #252]	; (28318 <mpu_configure_regions_and_partition.constprop.2+0x178>)
   2821c:	4940      	ldr	r1, [pc, #256]	; (28320 <mpu_configure_regions_and_partition.constprop.2+0x180>)
   2821e:	1a9b      	subs	r3, r3, r2
   28220:	4632      	mov	r2, r6
   28222:	08db      	lsrs	r3, r3, #3
   28224:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Invalid underlying region index %u",
   28228:	f01c fa7d 	bl	44726 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   2822c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   28230:	4620      	mov	r0, r4
   28232:	b005      	add	sp, #20
   28234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   28238:	f11b 0f16 	cmn.w	fp, #22
   2823c:	d0d9      	beq.n	281f2 <mpu_configure_regions_and_partition.constprop.2+0x52>
			(u_reg_index > (reg_index - 1))) {
   2823e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   28240:	455b      	cmp	r3, fp
   28242:	dbd6      	blt.n	281f2 <mpu_configure_regions_and_partition.constprop.2+0x52>
	MPU->RNR = index;
   28244:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   28248:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   2824a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   2824e:	692b      	ldr	r3, [r5, #16]
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   28250:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   28254:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   28258:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   2825c:	e9d1 3200 	ldrd	r3, r2, [r1]
   28260:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   28262:	4298      	cmp	r0, r3
		uint32_t reg_last = regions[i]->start + regions[i]->size - 1;
   28264:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   28268:	d118      	bne.n	2829c <mpu_configure_regions_and_partition.constprop.2+0xfc>
   2826a:	45ca      	cmp	sl, r9
   2826c:	d105      	bne.n	2827a <mpu_configure_regions_and_partition.constprop.2+0xda>
			mpu_configure_region(u_reg_index, regions[i]);
   2826e:	fa5f f08b 	uxtb.w	r0, fp
   28272:	f01d fb76 	bl	45962 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   28276:	3601      	adds	r6, #1
   28278:	e79a      	b.n	281b0 <mpu_configure_regions_and_partition.constprop.2+0x10>
	MPU->RNR = index;
   2827a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2827e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   28280:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   28284:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   28288:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   2828a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   2828c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   2828e:	f01d fb68 	bl	45962 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   28292:	f110 0f16 	cmn.w	r0, #22
   28296:	d0c9      	beq.n	2822c <mpu_configure_regions_and_partition.constprop.2+0x8c>
			reg_index++;
   28298:	1c44      	adds	r4, r0, #1
   2829a:	e7ec      	b.n	28276 <mpu_configure_regions_and_partition.constprop.2+0xd6>
	MPU->RNR = index;
   2829c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   282a0:	692a      	ldr	r2, [r5, #16]
   282a2:	3b01      	subs	r3, #1
   282a4:	f023 031f 	bic.w	r3, r3, #31
   282a8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   282ac:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   282ae:	45ca      	cmp	sl, r9
   282b0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   282b2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   282b4:	d0eb      	beq.n	2828e <mpu_configure_regions_and_partition.constprop.2+0xee>
				mpu_configure_region(reg_index, regions[i]);
   282b6:	f01d fb54 	bl	45962 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   282ba:	f110 0f16 	cmn.w	r0, #22
   282be:	d0b5      	beq.n	2822c <mpu_configure_regions_and_partition.constprop.2+0x8c>
	MPU->RNR = index;
   282c0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   282c4:	68ea      	ldr	r2, [r5, #12]
   282c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   282ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   282ce:	f362 0304 	bfi	r3, r2, #0, #5
   282d2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   282d6:	692b      	ldr	r3, [r5, #16]
   282d8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   282dc:	085b      	lsrs	r3, r3, #1
   282de:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   282e2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   282e6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   282ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   282ee:	4413      	add	r3, r2
   282f0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   282f2:	f023 031f 	bic.w	r3, r3, #31
   282f6:	4453      	add	r3, sl
   282f8:	eba3 0309 	sub.w	r3, r3, r9
			reg_index++;
   282fc:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   282fe:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   28302:	4669      	mov	r1, sp
   28304:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   28306:	9303      	str	r3, [sp, #12]
				region_allocate_and_init(reg_index,
   28308:	f7ff ff2a 	bl	28160 <region_allocate_and_init>
   2830c:	e7c1      	b.n	28292 <mpu_configure_regions_and_partition.constprop.2+0xf2>
   2830e:	bf00      	nop
   28310:	e000ed90 	.word	0xe000ed90
   28314:	00049788 	.word	0x00049788
   28318:	00049860 	.word	0x00049860
   2831c:	0004d221 	.word	0x0004d221
   28320:	0004d1fe 	.word	0x0004d1fe

00028324 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   28324:	2205      	movs	r2, #5
   28326:	4b03      	ldr	r3, [pc, #12]	; (28334 <arm_core_mpu_enable+0x10>)
   28328:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   2832a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2832e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   28332:	4770      	bx	lr
   28334:	e000ed90 	.word	0xe000ed90

00028338 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   28338:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   2833c:	2200      	movs	r2, #0
   2833e:	4b01      	ldr	r3, [pc, #4]	; (28344 <arm_core_mpu_disable+0xc>)
   28340:	605a      	str	r2, [r3, #4]
}
   28342:	4770      	bx	lr
   28344:	e000ed90 	.word	0xe000ed90

00028348 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   28348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   2834a:	4f21      	ldr	r7, [pc, #132]	; (283d0 <arm_mpu_init+0x88>)
   2834c:	683e      	ldr	r6, [r7, #0]
   2834e:	2e10      	cmp	r6, #16
   28350:	d913      	bls.n	2837a <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   28352:	f44f 739f 	mov.w	r3, #318	; 0x13e
   28356:	4a1f      	ldr	r2, [pc, #124]	; (283d4 <arm_mpu_init+0x8c>)
   28358:	491f      	ldr	r1, [pc, #124]	; (283d8 <arm_mpu_init+0x90>)
   2835a:	4820      	ldr	r0, [pc, #128]	; (283dc <arm_mpu_init+0x94>)
   2835c:	f01b ffb8 	bl	442d0 <printk>
   28360:	2210      	movs	r2, #16
   28362:	4631      	mov	r1, r6
   28364:	481e      	ldr	r0, [pc, #120]	; (283e0 <arm_mpu_init+0x98>)
   28366:	f01b ffb3 	bl	442d0 <printk>
   2836a:	481a      	ldr	r0, [pc, #104]	; (283d4 <arm_mpu_init+0x8c>)
   2836c:	f44f 719f 	mov.w	r1, #318	; 0x13e
   28370:	f01c f9c8 	bl	44704 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   28374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   28378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   2837a:	2400      	movs	r4, #0
	arm_core_mpu_disable();
   2837c:	f7ff ffdc 	bl	28338 <arm_core_mpu_disable>
	MPU->MAIR0 =
   28380:	4d18      	ldr	r5, [pc, #96]	; (283e4 <arm_mpu_init+0x9c>)
   28382:	4a19      	ldr	r2, [pc, #100]	; (283e8 <arm_mpu_init+0xa0>)
   28384:	632a      	str	r2, [r5, #48]	; 0x30
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   28386:	42a6      	cmp	r6, r4
   28388:	d119      	bne.n	283be <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   2838a:	4b18      	ldr	r3, [pc, #96]	; (283ec <arm_mpu_init+0xa4>)
   2838c:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
   2838e:	f7ff ffc9 	bl	28324 <arm_core_mpu_enable>
	__ASSERT(
   28392:	682b      	ldr	r3, [r5, #0]
   28394:	f3c3 2307 	ubfx	r3, r3, #8, #8
   28398:	2b10      	cmp	r3, #16
   2839a:	d00e      	beq.n	283ba <arm_mpu_init+0x72>
   2839c:	4914      	ldr	r1, [pc, #80]	; (283f0 <arm_mpu_init+0xa8>)
   2839e:	f240 1363 	movw	r3, #355	; 0x163
   283a2:	4a0c      	ldr	r2, [pc, #48]	; (283d4 <arm_mpu_init+0x8c>)
   283a4:	480d      	ldr	r0, [pc, #52]	; (283dc <arm_mpu_init+0x94>)
   283a6:	f01b ff93 	bl	442d0 <printk>
   283aa:	4812      	ldr	r0, [pc, #72]	; (283f4 <arm_mpu_init+0xac>)
   283ac:	f01b ff90 	bl	442d0 <printk>
   283b0:	f240 1163 	movw	r1, #355	; 0x163
   283b4:	4807      	ldr	r0, [pc, #28]	; (283d4 <arm_mpu_init+0x8c>)
   283b6:	f01c f9a5 	bl	44704 <assert_post_action>
	return 0;
   283ba:	2000      	movs	r0, #0
   283bc:	e7dc      	b.n	28378 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   283be:	6879      	ldr	r1, [r7, #4]
   283c0:	4620      	mov	r0, r4
   283c2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   283c6:	f7ff feb3 	bl	28130 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   283ca:	3401      	adds	r4, #1
   283cc:	e7db      	b.n	28386 <arm_mpu_init+0x3e>
   283ce:	bf00      	nop
   283d0:	00049e10 	.word	0x00049e10
   283d4:	0004d118 	.word	0x0004d118
   283d8:	00052672 	.word	0x00052672
   283dc:	0004b33b 	.word	0x0004b33b
   283e0:	0004d158 	.word	0x0004d158
   283e4:	e000ed90 	.word	0xe000ed90
   283e8:	0044ffaa 	.word	0x0044ffaa
   283ec:	2002b4b1 	.word	0x2002b4b1
   283f0:	0004d18c 	.word	0x0004d18c
   283f4:	0004d1dd 	.word	0x0004d1dd

000283f8 <arm_core_mpu_configure_static_mpu_regions>:
{
   283f8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   283fa:	4c0d      	ldr	r4, [pc, #52]	; (28430 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   283fc:	460d      	mov	r5, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   283fe:	7822      	ldrb	r2, [r4, #0]
   28400:	f7ff fece 	bl	281a0 <mpu_configure_regions_and_partition.constprop.2>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   28404:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   28406:	3016      	adds	r0, #22
   28408:	d111      	bne.n	2842e <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2840a:	f44f 7382 	mov.w	r3, #260	; 0x104
   2840e:	4a09      	ldr	r2, [pc, #36]	; (28434 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   28410:	4909      	ldr	r1, [pc, #36]	; (28438 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   28412:	480a      	ldr	r0, [pc, #40]	; (2843c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   28414:	f01b ff5c 	bl	442d0 <printk>
   28418:	4629      	mov	r1, r5
   2841a:	4809      	ldr	r0, [pc, #36]	; (28440 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   2841c:	f01b ff58 	bl	442d0 <printk>
}
   28420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   28424:	f44f 7182 	mov.w	r1, #260	; 0x104
   28428:	4802      	ldr	r0, [pc, #8]	; (28434 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   2842a:	f01c b96b 	b.w	44704 <assert_post_action>
}
   2842e:	bd38      	pop	{r3, r4, r5, pc}
   28430:	2002b4b1 	.word	0x2002b4b1
   28434:	0004d118 	.word	0x0004d118
   28438:	00052672 	.word	0x00052672
   2843c:	0004b33b 	.word	0x0004b33b
   28440:	0004d0bd 	.word	0x0004d0bd

00028444 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   28444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28448:	4c2e      	ldr	r4, [pc, #184]	; (28504 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
   2844a:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2844c:	4680      	mov	r8, r0
   2844e:	2700      	movs	r7, #0
   28450:	46a2      	mov	sl, r4
	attr->rbar = MPU->RBAR &
   28452:	f04f 0b14 	mov.w	fp, #20
	MPU->RNR = index;
   28456:	4d2c      	ldr	r5, [pc, #176]	; (28508 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   28458:	454f      	cmp	r7, r9
   2845a:	db02      	blt.n	28462 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1e>
}
   2845c:	b003      	add	sp, #12
   2845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   28462:	f8d8 3004 	ldr.w	r3, [r8, #4]
   28466:	9301      	str	r3, [sp, #4]
   28468:	2b00      	cmp	r3, #0
   2846a:	d046      	beq.n	284fa <arm_core_mpu_mark_areas_for_dynamic_regions+0xb6>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   2846c:	f8d8 1000 	ldr.w	r1, [r8]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   28470:	4608      	mov	r0, r1
   28472:	9100      	str	r1, [sp, #0]
   28474:	f01d fa90 	bl	45998 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   28478:	e9dd 1300 	ldrd	r1, r3, [sp]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2847c:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2847e:	1858      	adds	r0, r3, r1
   28480:	3801      	subs	r0, #1
   28482:	f01d fa89 	bl	45998 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   28486:	4286      	cmp	r6, r0
   28488:	4a20      	ldr	r2, [pc, #128]	; (2850c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
   2848a:	d018      	beq.n	284be <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   2848c:	2314      	movs	r3, #20
   2848e:	435f      	muls	r7, r3
   28490:	f06f 0315 	mvn.w	r3, #21
   28494:	f84a 3007 	str.w	r3, [sl, r7]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   28498:	f44f 738a 	mov.w	r3, #276	; 0x114
   2849c:	4a1c      	ldr	r2, [pc, #112]	; (28510 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2849e:	491d      	ldr	r1, [pc, #116]	; (28514 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   284a0:	481d      	ldr	r0, [pc, #116]	; (28518 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   284a2:	f01b ff15 	bl	442d0 <printk>
   284a6:	4649      	mov	r1, r9
   284a8:	481c      	ldr	r0, [pc, #112]	; (2851c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   284aa:	f01b ff11 	bl	442d0 <printk>
   284ae:	f44f 718a 	mov.w	r1, #276	; 0x114
   284b2:	4817      	ldr	r0, [pc, #92]	; (28510 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
}
   284b4:	b003      	add	sp, #12
   284b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   284ba:	f01c b923 	b.w	44704 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   284be:	f116 0f16 	cmn.w	r6, #22
		dyn_reg_info[i].index =
   284c2:	6026      	str	r6, [r4, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   284c4:	d0e8      	beq.n	28498 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   284c6:	7813      	ldrb	r3, [r2, #0]
   284c8:	42b3      	cmp	r3, r6
   284ca:	dde5      	ble.n	28498 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   284cc:	fb0b a307 	mla	r3, fp, r7, sl
	MPU->RNR = index;
   284d0:	60ae      	str	r6, [r5, #8]
	MPU->RNR = index;
   284d2:	60ae      	str	r6, [r5, #8]
	attr->rbar = MPU->RBAR &
   284d4:	68e8      	ldr	r0, [r5, #12]
   284d6:	7b19      	ldrb	r1, [r3, #12]
   284d8:	f360 0104 	bfi	r1, r0, #0, #5
   284dc:	7319      	strb	r1, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   284de:	6929      	ldr	r1, [r5, #16]
   284e0:	7b18      	ldrb	r0, [r3, #12]
   284e2:	0849      	lsrs	r1, r1, #1
   284e4:	f361 1047 	bfi	r0, r1, #5, #3
   284e8:	7318      	strb	r0, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   284ea:	68eb      	ldr	r3, [r5, #12]
   284ec:	f023 031f 	bic.w	r3, r3, #31
   284f0:	6063      	str	r3, [r4, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   284f2:	692b      	ldr	r3, [r5, #16]
   284f4:	f023 031f 	bic.w	r3, r3, #31
   284f8:	6123      	str	r3, [r4, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   284fa:	3701      	adds	r7, #1
   284fc:	3414      	adds	r4, #20
   284fe:	f108 080c 	add.w	r8, r8, #12
   28502:	e7a9      	b.n	28458 <arm_core_mpu_mark_areas_for_dynamic_regions+0x14>
   28504:	20024b80 	.word	0x20024b80
   28508:	e000ed90 	.word	0xe000ed90
   2850c:	2002b4b1 	.word	0x2002b4b1
   28510:	0004d118 	.word	0x0004d118
   28514:	00052672 	.word	0x00052672
   28518:	0004b33b 	.word	0x0004b33b
   2851c:	0004d0e9 	.word	0x0004d0e9

00028520 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   28520:	4b01      	ldr	r3, [pc, #4]	; (28528 <__stdout_hook_install+0x8>)
   28522:	6018      	str	r0, [r3, #0]
}
   28524:	4770      	bx	lr
   28526:	bf00      	nop
   28528:	200207d4 	.word	0x200207d4

0002852c <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   2852c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2852e:	4606      	mov	r6, r0
   28530:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   28532:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   28534:	4f06      	ldr	r7, [pc, #24]	; (28550 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   28536:	42ac      	cmp	r4, r5
   28538:	da08      	bge.n	2854c <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   2853a:	683b      	ldr	r3, [r7, #0]
   2853c:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2853e:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   28540:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   28542:	f104 0401 	add.w	r4, r4, #1
   28546:	d001      	beq.n	2854c <z_impl_zephyr_read_stdin+0x20>
   28548:	280d      	cmp	r0, #13
   2854a:	d1f4      	bne.n	28536 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   2854c:	4620      	mov	r0, r4
   2854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28550:	200207d0 	.word	0x200207d0

00028554 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   28554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28556:	460e      	mov	r6, r1
   28558:	4f09      	ldr	r7, [pc, #36]	; (28580 <z_impl_zephyr_write_stdout+0x2c>)
   2855a:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   2855c:	f1c0 0501 	rsb	r5, r0, #1
   28560:	192b      	adds	r3, r5, r4
   28562:	429e      	cmp	r6, r3
   28564:	dc01      	bgt.n	2856a <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   28566:	4630      	mov	r0, r6
   28568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   2856a:	7863      	ldrb	r3, [r4, #1]
   2856c:	2b0a      	cmp	r3, #10
   2856e:	d102      	bne.n	28576 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   28570:	683b      	ldr	r3, [r7, #0]
   28572:	200d      	movs	r0, #13
   28574:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   28576:	683b      	ldr	r3, [r7, #0]
   28578:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2857c:	4798      	blx	r3
   2857e:	e7ef      	b.n	28560 <z_impl_zephyr_write_stdout+0xc>
   28580:	200207d4 	.word	0x200207d4

00028584 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   28584:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   28586:	2105      	movs	r1, #5
   28588:	4801      	ldr	r0, [pc, #4]	; (28590 <_exit+0xc>)
   2858a:	f7ff ffe3 	bl	28554 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
		;
   2858e:	e7fe      	b.n	2858e <_exit+0xa>
   28590:	0004d26a 	.word	0x0004d26a

00028594 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   28594:	b538      	push	{r3, r4, r5, lr}
   28596:	4605      	mov	r5, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   28598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2859c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   285a0:	480b      	ldr	r0, [pc, #44]	; (285d0 <_sbrk+0x3c>)
   285a2:	f01b ff08 	bl	443b6 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   285a6:	4a0b      	ldr	r2, [pc, #44]	; (285d4 <_sbrk+0x40>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   285a8:	490b      	ldr	r1, [pc, #44]	; (285d8 <_sbrk+0x44>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
   285aa:	6814      	ldr	r4, [r2, #0]
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   285ac:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
   285b0:	4425      	add	r5, r4
   285b2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   285b6:	429d      	cmp	r5, r3
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   285b8:	bf2c      	ite	cs
   285ba:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   285be:	1864      	addcc	r4, r4, r1
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   285c0:	4803      	ldr	r0, [pc, #12]	; (285d0 <_sbrk+0x3c>)
		heap_sz += count;
   285c2:	bf38      	it	cc
   285c4:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
   285c6:	f01b fef1 	bl	443ac <sys_sem_give>

	return ret;
}
   285ca:	4620      	mov	r0, r4
   285cc:	bd38      	pop	{r3, r4, r5, pc}
   285ce:	bf00      	nop
   285d0:	20020d5c 	.word	0x20020d5c
   285d4:	20024b94 	.word	0x20024b94
   285d8:	2003328b 	.word	0x2003328b

000285dc <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   285dc:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   285de:	211d      	movs	r1, #29
   285e0:	4804      	ldr	r0, [pc, #16]	; (285f4 <__chk_fail+0x18>)
   285e2:	f7ff ffb7 	bl	28554 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   285e6:	4040      	eors	r0, r0
   285e8:	f380 8811 	msr	BASEPRI, r0
   285ec:	f04f 0003 	mov.w	r0, #3
   285f0:	df02      	svc	2
	CODE_UNREACHABLE;
   285f2:	bf00      	nop
   285f4:	0004d270 	.word	0x0004d270

000285f8 <gpio_pin_set.constprop.1>:
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   285f8:	6843      	ldr	r3, [r0, #4]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   285fa:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   285fc:	681b      	ldr	r3, [r3, #0]
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   285fe:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   28600:	0219      	lsls	r1, r3, #8
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
   28602:	4604      	mov	r4, r0
	const struct gpio_driver_data *const data =
   28604:	68c6      	ldr	r6, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   28606:	d40e      	bmi.n	28626 <gpio_pin_set.constprop.1+0x2e>
   28608:	4919      	ldr	r1, [pc, #100]	; (28670 <gpio_pin_set.constprop.1+0x78>)
   2860a:	f240 33eb 	movw	r3, #1003	; 0x3eb
   2860e:	4a19      	ldr	r2, [pc, #100]	; (28674 <gpio_pin_set.constprop.1+0x7c>)
   28610:	4819      	ldr	r0, [pc, #100]	; (28678 <gpio_pin_set.constprop.1+0x80>)
   28612:	f01b fe5d 	bl	442d0 <printk>
   28616:	4819      	ldr	r0, [pc, #100]	; (2867c <gpio_pin_set.constprop.1+0x84>)
   28618:	f01b fe5a 	bl	442d0 <printk>
   2861c:	f240 31eb 	movw	r1, #1003	; 0x3eb
   28620:	4814      	ldr	r0, [pc, #80]	; (28674 <gpio_pin_set.constprop.1+0x7c>)
   28622:	f01c f86f 	bl	44704 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   28626:	6833      	ldr	r3, [r6, #0]
   28628:	021a      	lsls	r2, r3, #8
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2862a:	6863      	ldr	r3, [r4, #4]
   2862c:	bf48      	it	mi
   2862e:	f085 0501 	eormi.w	r5, r5, #1
   28632:	681b      	ldr	r3, [r3, #0]
   28634:	021b      	lsls	r3, r3, #8
   28636:	d40e      	bmi.n	28656 <gpio_pin_set.constprop.1+0x5e>
   28638:	490d      	ldr	r1, [pc, #52]	; (28670 <gpio_pin_set.constprop.1+0x78>)
   2863a:	f240 33c1 	movw	r3, #961	; 0x3c1
   2863e:	4a0d      	ldr	r2, [pc, #52]	; (28674 <gpio_pin_set.constprop.1+0x7c>)
   28640:	480d      	ldr	r0, [pc, #52]	; (28678 <gpio_pin_set.constprop.1+0x80>)
   28642:	f01b fe45 	bl	442d0 <printk>
   28646:	480d      	ldr	r0, [pc, #52]	; (2867c <gpio_pin_set.constprop.1+0x84>)
   28648:	f01b fe42 	bl	442d0 <printk>
   2864c:	f240 31c1 	movw	r1, #961	; 0x3c1
   28650:	4808      	ldr	r0, [pc, #32]	; (28674 <gpio_pin_set.constprop.1+0x7c>)
   28652:	f01c f857 	bl	44704 <assert_post_action>
	if (value != 0)	{
   28656:	b13d      	cbz	r5, 28668 <gpio_pin_set.constprop.1+0x70>
	return api->port_set_bits_raw(port, pins);
   28658:	68a3      	ldr	r3, [r4, #8]
   2865a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2865c:	4620      	mov	r0, r4
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   2865e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   28662:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   28666:	4718      	bx	r3
   28668:	68a3      	ldr	r3, [r4, #8]
   2866a:	691b      	ldr	r3, [r3, #16]
   2866c:	e7f6      	b.n	2865c <gpio_pin_set.constprop.1+0x64>
   2866e:	bf00      	nop
   28670:	0004d2ce 	.word	0x0004d2ce
   28674:	0004d2a4 	.word	0x0004d2a4
   28678:	0004b33b 	.word	0x0004b33b
   2867c:	0004d30c 	.word	0x0004d30c

00028680 <bt_hci_transport_setup>:
 */
BUILD_ASSERT(RESET_PIN > 16 && RESET_PIN < 24,
	     "Selected pin is not connected to nRF52840");

int bt_hci_transport_setup(const struct device *h4)
{
   28680:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28682:	4605      	mov	r5, r0
   28684:	4821      	ldr	r0, [pc, #132]	; (2870c <bt_hci_transport_setup+0x8c>)
   28686:	f016 f85b 	bl	3e740 <z_impl_device_get_binding>
	int err;
	char c;
	const struct device *port;

	port = device_get_binding(DT_LABEL(DT_NODELABEL(gpio0)));
	if (!port) {
   2868a:	4604      	mov	r4, r0
   2868c:	2800      	cmp	r0, #0
   2868e:	d039      	beq.n	28704 <bt_hci_transport_setup+0x84>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   28690:	6843      	ldr	r3, [r0, #4]
	struct gpio_driver_data *data =
   28692:	68c6      	ldr	r6, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   28694:	681b      	ldr	r3, [r3, #0]
   28696:	021b      	lsls	r3, r3, #8
   28698:	d40e      	bmi.n	286b8 <bt_hci_transport_setup+0x38>
   2869a:	491d      	ldr	r1, [pc, #116]	; (28710 <bt_hci_transport_setup+0x90>)
   2869c:	f240 2345 	movw	r3, #581	; 0x245
   286a0:	4a1c      	ldr	r2, [pc, #112]	; (28714 <bt_hci_transport_setup+0x94>)
   286a2:	481d      	ldr	r0, [pc, #116]	; (28718 <bt_hci_transport_setup+0x98>)
   286a4:	f01b fe14 	bl	442d0 <printk>
   286a8:	481c      	ldr	r0, [pc, #112]	; (2871c <bt_hci_transport_setup+0x9c>)
   286aa:	f01b fe11 	bl	442d0 <printk>
   286ae:	f240 2145 	movw	r1, #581	; 0x245
   286b2:	4818      	ldr	r0, [pc, #96]	; (28714 <bt_hci_transport_setup+0x94>)
   286b4:	f01c f826 	bl	44704 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   286b8:	68a3      	ldr	r3, [r4, #8]
   286ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   286be:	681b      	ldr	r3, [r3, #0]
   286c0:	2117      	movs	r1, #23
   286c2:	4620      	mov	r0, r4
   286c4:	4798      	blx	r3
	if (ret != 0) {
   286c6:	b9d8      	cbnz	r0, 28700 <bt_hci_transport_setup+0x80>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   286c8:	6833      	ldr	r3, [r6, #0]
	/* Reset the nRF52840 and let it wait until the pin is
	 * pulled low again before running to main to ensure
	 * that it won't send any data until the H4 device
	 * is setup and ready to receive.
	 */
	err = gpio_pin_set(port, RESET_PIN, 1);
   286ca:	2101      	movs	r1, #1
   286cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   286d0:	6033      	str	r3, [r6, #0]
   286d2:	4620      	mov	r0, r4
   286d4:	f7ff ff90 	bl	285f8 <gpio_pin_set.constprop.1>
	if (err) {
   286d8:	b990      	cbnz	r0, 28700 <bt_hci_transport_setup+0x80>
	return z_impl_k_sleep(timeout);
   286da:	f44f 70a4 	mov.w	r0, #328	; 0x148
   286de:	2100      	movs	r1, #0
   286e0:	f018 f8b0 	bl	40844 <z_impl_k_sleep>
	if (api->fifo_read) {
   286e4:	68ab      	ldr	r3, [r5, #8]
   286e6:	699b      	ldr	r3, [r3, #24]
   286e8:	b133      	cbz	r3, 286f8 <bt_hci_transport_setup+0x78>
		return api->fifo_read(dev, rx_data, size);
   286ea:	2201      	movs	r2, #1
   286ec:	f10d 0107 	add.w	r1, sp, #7
   286f0:	4628      	mov	r0, r5
   286f2:	4798      	blx	r3
	 * on the lines are received and drained correctly.
	 */
	k_sleep(K_MSEC(10));

	/* Drain bytes */
	while (uart_fifo_read(h4, &c, 1)) {
   286f4:	2800      	cmp	r0, #0
   286f6:	d1f5      	bne.n	286e4 <bt_hci_transport_setup+0x64>
		continue;
	}

	/* We are ready, let the nRF52840 run to main */
	err = gpio_pin_set(port, RESET_PIN, 0);
   286f8:	2100      	movs	r1, #0
   286fa:	4620      	mov	r0, r4
   286fc:	f7ff ff7c 	bl	285f8 <gpio_pin_set.constprop.1>
	if (err) {
		return err;
	}

	return 0;
}
   28700:	b002      	add	sp, #8
   28702:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   28704:	f06f 0004 	mvn.w	r0, #4
   28708:	e7fa      	b.n	28700 <bt_hci_transport_setup+0x80>
   2870a:	bf00      	nop
   2870c:	0004d29d 	.word	0x0004d29d
   28710:	0004d2ce 	.word	0x0004d2ce
   28714:	0004d2a4 	.word	0x0004d2a4
   28718:	0004b33b 	.word	0x0004b33b
   2871c:	0004d30c 	.word	0x0004d30c

00028720 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   28720:	2940      	cmp	r1, #64	; 0x40
   28722:	4b0e      	ldr	r3, [pc, #56]	; (2875c <bt_hex_real+0x3c>)
   28724:	bf28      	it	cs
   28726:	2140      	movcs	r1, #64	; 0x40
{
   28728:	b570      	push	{r4, r5, r6, lr}
   2872a:	461d      	mov	r5, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   2872c:	4c0c      	ldr	r4, [pc, #48]	; (28760 <bt_hex_real+0x40>)
   2872e:	1846      	adds	r6, r0, r1
	for (i = 0; i < len; i++) {
   28730:	42b0      	cmp	r0, r6
   28732:	f103 0302 	add.w	r3, r3, #2
   28736:	d104      	bne.n	28742 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   28738:	2300      	movs	r3, #0
   2873a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   2873e:	4807      	ldr	r0, [pc, #28]	; (2875c <bt_hex_real+0x3c>)
   28740:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   28742:	7802      	ldrb	r2, [r0, #0]
   28744:	0912      	lsrs	r2, r2, #4
   28746:	5ca2      	ldrb	r2, [r4, r2]
   28748:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   2874c:	f810 2b01 	ldrb.w	r2, [r0], #1
   28750:	f002 020f 	and.w	r2, r2, #15
   28754:	5ca2      	ldrb	r2, [r4, r2]
   28756:	f803 2c01 	strb.w	r2, [r3, #-1]
   2875a:	e7e9      	b.n	28730 <bt_hex_real+0x10>
   2875c:	2002b4b2 	.word	0x2002b4b2
   28760:	0004d31e 	.word	0x0004d31e

00028764 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   28764:	b510      	push	{r4, lr}
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));
   28766:	2101      	movs	r1, #1
   28768:	3008      	adds	r0, #8
   2876a:	f001 f897 	bl	2989c <net_buf_simple_pull_mem>

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   2876e:	f04f 0400 	mov.w	r4, #0
   28772:	2301      	movs	r3, #1
   28774:	4a07      	ldr	r2, [pc, #28]	; (28794 <hci_hardware_error+0x30>)
   28776:	f363 0407 	bfi	r4, r3, #0, #8
   2877a:	4b07      	ldr	r3, [pc, #28]	; (28798 <hci_hardware_error+0x34>)
   2877c:	4907      	ldr	r1, [pc, #28]	; (2879c <hci_hardware_error+0x38>)
   2877e:	1a9b      	subs	r3, r3, r2
   28780:	08db      	lsrs	r3, r3, #3
   28782:	f363 148f 	bfi	r4, r3, #6, #10
   28786:	7802      	ldrb	r2, [r0, #0]
   28788:	4620      	mov	r0, r4
}
   2878a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   2878e:	f01b bfca 	b.w	44726 <log_string_sync>
   28792:	bf00      	nop
   28794:	00049788 	.word	0x00049788
   28798:	000497d0 	.word	0x000497d0
   2879c:	0004d59c 	.word	0x0004d59c

000287a0 <hci_cmd_done>:
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
	atomic_set(bt_dev.flags, flags);
}

static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
{
   287a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   287a4:	4606      	mov	r6, r0
	BT_DBG("opcode 0x%04x status 0x%02x buf %p", opcode, status, buf);

	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   287a6:	7990      	ldrb	r0, [r2, #6]
{
   287a8:	460f      	mov	r7, r1
   287aa:	4615      	mov	r5, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   287ac:	f000 fe58 	bl	29460 <net_buf_pool_get>
   287b0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2889c <hci_cmd_done+0xfc>
   287b4:	4580      	cmp	r8, r0
   287b6:	d019      	beq.n	287ec <hci_cmd_done+0x4c>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   287b8:	2302      	movs	r3, #2
   287ba:	f04f 0400 	mov.w	r4, #0
   287be:	4a32      	ldr	r2, [pc, #200]	; (28888 <hci_cmd_done+0xe8>)
   287c0:	f363 0407 	bfi	r4, r3, #0, #8
   287c4:	4b31      	ldr	r3, [pc, #196]	; (2888c <hci_cmd_done+0xec>)
   287c6:	79ad      	ldrb	r5, [r5, #6]
   287c8:	1a9b      	subs	r3, r3, r2
   287ca:	08db      	lsrs	r3, r3, #3
   287cc:	4628      	mov	r0, r5
   287ce:	f363 148f 	bfi	r4, r3, #6, #10
   287d2:	f000 fe45 	bl	29460 <net_buf_pool_get>
   287d6:	462b      	mov	r3, r5
   287d8:	e9cd 0800 	strd	r0, r8, [sp]
   287dc:	4632      	mov	r2, r6
   287de:	492c      	ldr	r1, [pc, #176]	; (28890 <hci_cmd_done+0xf0>)
   287e0:	4620      	mov	r0, r4
   287e2:	f01b ffa0 	bl	44726 <log_string_sync>
	/* If the command was synchronous wake up bt_hci_cmd_send_sync() */
	if (cmd(buf)->sync) {
		cmd(buf)->status = status;
		k_sem_give(cmd(buf)->sync);
	}
}
   287e6:	b003      	add	sp, #12
   287e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   287ec:	4628      	mov	r0, r5
   287ee:	f000 fe3f 	bl	29470 <net_buf_id>
   287f2:	f04f 090c 	mov.w	r9, #12
   287f6:	4c27      	ldr	r4, [pc, #156]	; (28894 <hci_cmd_done+0xf4>)
   287f8:	fb09 4000 	mla	r0, r9, r0, r4
   287fc:	8843      	ldrh	r3, [r0, #2]
   287fe:	42b3      	cmp	r3, r6
   28800:	d015      	beq.n	2882e <hci_cmd_done+0x8e>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   28802:	2302      	movs	r3, #2
   28804:	f04f 0800 	mov.w	r8, #0
   28808:	4a1f      	ldr	r2, [pc, #124]	; (28888 <hci_cmd_done+0xe8>)
   2880a:	f363 0807 	bfi	r8, r3, #0, #8
   2880e:	4b1f      	ldr	r3, [pc, #124]	; (2888c <hci_cmd_done+0xec>)
   28810:	4628      	mov	r0, r5
   28812:	1a9b      	subs	r3, r3, r2
   28814:	08db      	lsrs	r3, r3, #3
   28816:	f363 188f 	bfi	r8, r3, #6, #10
   2881a:	f000 fe29 	bl	29470 <net_buf_id>
   2881e:	fb09 4000 	mla	r0, r9, r0, r4
   28822:	4632      	mov	r2, r6
   28824:	8843      	ldrh	r3, [r0, #2]
   28826:	491c      	ldr	r1, [pc, #112]	; (28898 <hci_cmd_done+0xf8>)
   28828:	4640      	mov	r0, r8
   2882a:	f01b ff7c 	bl	44726 <log_string_sync>
	if (cmd(buf)->state && !status) {
   2882e:	4628      	mov	r0, r5
   28830:	f000 fe1e 	bl	29470 <net_buf_id>
   28834:	260c      	movs	r6, #12
   28836:	fb06 4000 	mla	r0, r6, r0, r4
   2883a:	6843      	ldr	r3, [r0, #4]
   2883c:	b15b      	cbz	r3, 28856 <hci_cmd_done+0xb6>
   2883e:	b957      	cbnz	r7, 28856 <hci_cmd_done+0xb6>
		struct cmd_state_set *update = cmd(buf)->state;
   28840:	4628      	mov	r0, r5
   28842:	f000 fe15 	bl	29470 <net_buf_id>
   28846:	fb06 4000 	mla	r0, r6, r0, r4
   2884a:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   2884c:	7a1a      	ldrb	r2, [r3, #8]
   2884e:	e9d3 0100 	ldrd	r0, r1, [r3]
   28852:	f01d f8d5 	bl	45a00 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
   28856:	4628      	mov	r0, r5
   28858:	f000 fe0a 	bl	29470 <net_buf_id>
   2885c:	260c      	movs	r6, #12
   2885e:	fb06 4000 	mla	r0, r6, r0, r4
   28862:	6883      	ldr	r3, [r0, #8]
   28864:	2b00      	cmp	r3, #0
   28866:	d0be      	beq.n	287e6 <hci_cmd_done+0x46>
		cmd(buf)->status = status;
   28868:	4628      	mov	r0, r5
   2886a:	f000 fe01 	bl	29470 <net_buf_id>
   2886e:	4370      	muls	r0, r6
   28870:	5427      	strb	r7, [r4, r0]
		k_sem_give(cmd(buf)->sync);
   28872:	4628      	mov	r0, r5
   28874:	f000 fdfc 	bl	29470 <net_buf_id>
   28878:	fb06 4000 	mla	r0, r6, r0, r4
   2887c:	6880      	ldr	r0, [r0, #8]
}
   2887e:	b003      	add	sp, #12
   28880:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
   28884:	f018 b81a 	b.w	408bc <z_impl_k_sem_give>
   28888:	00049788 	.word	0x00049788
   2888c:	000497d0 	.word	0x000497d0
   28890:	0004d502 	.word	0x0004d502
   28894:	20024b98 	.word	0x20024b98
   28898:	0004d537 	.word	0x0004d537
   2889c:	20020de8 	.word	0x20020de8

000288a0 <handle_event>:
{
   288a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   288a2:	4604      	mov	r4, r0
   288a4:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   288a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   288aa:	4293      	cmp	r3, r2
   288ac:	d11a      	bne.n	288e4 <handle_event+0x44>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   288ae:	2302      	movs	r3, #2
   288b0:	f04f 0500 	mov.w	r5, #0
   288b4:	4a1b      	ldr	r2, [pc, #108]	; (28924 <handle_event+0x84>)
   288b6:	f363 0507 	bfi	r5, r3, #0, #8
   288ba:	4b1b      	ldr	r3, [pc, #108]	; (28928 <handle_event+0x88>)
   288bc:	8986      	ldrh	r6, [r0, #12]
   288be:	1a9b      	subs	r3, r3, r2
   288c0:	08db      	lsrs	r3, r3, #3
   288c2:	4631      	mov	r1, r6
   288c4:	6880      	ldr	r0, [r0, #8]
   288c6:	f363 158f 	bfi	r5, r3, #6, #10
   288ca:	f7ff ff29 	bl	28720 <bt_hex_real>
   288ce:	f01b ff3d 	bl	4474c <log_strdup>
   288d2:	4633      	mov	r3, r6
   288d4:	9000      	str	r0, [sp, #0]
   288d6:	4622      	mov	r2, r4
   288d8:	4914      	ldr	r1, [pc, #80]	; (2892c <handle_event+0x8c>)
   288da:	4628      	mov	r0, r5
   288dc:	f01b ff23 	bl	44726 <log_string_sync>
}
   288e0:	b002      	add	sp, #8
   288e2:	bd70      	pop	{r4, r5, r6, pc}
		const struct event_handler *handler = &handlers[i];
   288e4:	4611      	mov	r1, r2
		if (handler->event != event) {
   288e6:	f812 5b08 	ldrb.w	r5, [r2], #8
   288ea:	42a5      	cmp	r5, r4
   288ec:	d1dd      	bne.n	288aa <handle_event+0xa>
		if (buf->len < handler->min_len) {
   288ee:	8982      	ldrh	r2, [r0, #12]
   288f0:	784b      	ldrb	r3, [r1, #1]
   288f2:	4293      	cmp	r3, r2
   288f4:	d911      	bls.n	2891a <handle_event+0x7a>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   288f6:	2301      	movs	r3, #1
   288f8:	f04f 0000 	mov.w	r0, #0
   288fc:	4909      	ldr	r1, [pc, #36]	; (28924 <handle_event+0x84>)
   288fe:	f363 0007 	bfi	r0, r3, #0, #8
   28902:	4b09      	ldr	r3, [pc, #36]	; (28928 <handle_event+0x88>)
   28904:	1a5b      	subs	r3, r3, r1
   28906:	08db      	lsrs	r3, r3, #3
   28908:	f363 108f 	bfi	r0, r3, #6, #10
   2890c:	4623      	mov	r3, r4
   2890e:	4908      	ldr	r1, [pc, #32]	; (28930 <handle_event+0x90>)
}
   28910:	b002      	add	sp, #8
   28912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   28916:	f01b bf06 	b.w	44726 <log_string_sync>
		handler->handler(buf);
   2891a:	684b      	ldr	r3, [r1, #4]
}
   2891c:	b002      	add	sp, #8
   2891e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   28922:	4718      	bx	r3
   28924:	00049788 	.word	0x00049788
   28928:	000497d0 	.word	0x000497d0
   2892c:	0004d4e0 	.word	0x0004d4e0
   28930:	0004d4be 	.word	0x0004d4be

00028934 <hci_le_meta_event>:
		      sizeof(struct bt_hci_evt_le_cis_req)),
#endif /* (CONFIG_BT_ISO) */
};

static void hci_le_meta_event(struct net_buf *buf)
{
   28934:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_meta_event *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));
   28936:	2101      	movs	r1, #1
{
   28938:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   2893a:	3008      	adds	r0, #8
   2893c:	f000 ffae 	bl	2989c <net_buf_simple_pull_mem>

	BT_DBG("subevent 0x%02x", evt->subevent);

	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   28940:	4621      	mov	r1, r4
}
   28942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   28946:	2300      	movs	r3, #0
   28948:	4a01      	ldr	r2, [pc, #4]	; (28950 <hci_le_meta_event+0x1c>)
   2894a:	7800      	ldrb	r0, [r0, #0]
   2894c:	f7ff bfa8 	b.w	288a0 <handle_event>
   28950:	00049e38 	.word	0x00049e38

00028954 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
   28954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28956:	4607      	mov	r7, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   28958:	2500      	movs	r5, #0
   2895a:	4e0a      	ldr	r6, [pc, #40]	; (28984 <id_find+0x30>)
   2895c:	79f3      	ldrb	r3, [r6, #7]
   2895e:	b2ec      	uxtb	r4, r5
   28960:	42a3      	cmp	r3, r4
   28962:	d802      	bhi.n	2896a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   28964:	f06f 0401 	mvn.w	r4, #1
   28968:	e009      	b.n	2897e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   2896a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
}

static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
{
	return memcmp(a, b, sizeof(*a));
   2896e:	2207      	movs	r2, #7
   28970:	4431      	add	r1, r6
   28972:	4638      	mov	r0, r7
   28974:	f01f fbfa 	bl	4816c <memcmp>
   28978:	3501      	adds	r5, #1
   2897a:	2800      	cmp	r0, #0
   2897c:	d1ee      	bne.n	2895c <id_find+0x8>
}
   2897e:	4620      	mov	r0, r4
   28980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28982:	bf00      	nop
   28984:	20020270 	.word	0x20020270

00028988 <hci_cmd_status>:
{
   28988:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   2898a:	2104      	movs	r1, #4
{
   2898c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   2898e:	3008      	adds	r0, #8
   28990:	f000 ff84 	bl	2989c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   28994:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   28996:	7801      	ldrb	r1, [r0, #0]
   28998:	4622      	mov	r2, r4
   2899a:	8840      	ldrh	r0, [r0, #2]
   2899c:	f7ff ff00 	bl	287a0 <hci_cmd_done>
	if (ncmd) {
   289a0:	b125      	cbz	r5, 289ac <hci_cmd_status+0x24>
}
   289a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   289a6:	4802      	ldr	r0, [pc, #8]	; (289b0 <hci_cmd_status+0x28>)
   289a8:	f017 bf88 	b.w	408bc <z_impl_k_sem_give>
   289ac:	bd38      	pop	{r3, r4, r5, pc}
   289ae:	bf00      	nop
   289b0:	20020318 	.word	0x20020318

000289b4 <hci_cmd_complete>:
{
   289b4:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   289b6:	2103      	movs	r1, #3
{
   289b8:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   289ba:	3008      	adds	r0, #8
   289bc:	f000 ff6e 	bl	2989c <net_buf_simple_pull_mem>
	status = buf->data[0];
   289c0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   289c2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   289c4:	4622      	mov	r2, r4
   289c6:	7819      	ldrb	r1, [r3, #0]
   289c8:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   289cc:	f7ff fee8 	bl	287a0 <hci_cmd_done>
	if (ncmd) {
   289d0:	b125      	cbz	r5, 289dc <hci_cmd_complete+0x28>
}
   289d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   289d6:	4802      	ldr	r0, [pc, #8]	; (289e0 <hci_cmd_complete+0x2c>)
   289d8:	f017 bf70 	b.w	408bc <z_impl_k_sem_give>
   289dc:	bd38      	pop	{r3, r4, r5, pc}
   289de:	bf00      	nop
   289e0:	20020318 	.word	0x20020318

000289e4 <bt_hci_cmd_create>:
{
   289e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   289e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   289ec:	4682      	mov	sl, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   289ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   289f2:	481d      	ldr	r0, [pc, #116]	; (28a68 <bt_hci_cmd_create+0x84>)
{
   289f4:	4689      	mov	r9, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
   289f6:	f01d f86e 	bl	45ad6 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   289fa:	4604      	mov	r4, r0
   289fc:	b958      	cbnz	r0, 28a16 <bt_hci_cmd_create+0x32>
   289fe:	491b      	ldr	r1, [pc, #108]	; (28a6c <bt_hci_cmd_create+0x88>)
   28a00:	481b      	ldr	r0, [pc, #108]	; (28a70 <bt_hci_cmd_create+0x8c>)
   28a02:	f44f 7396 	mov.w	r3, #300	; 0x12c
   28a06:	4a1b      	ldr	r2, [pc, #108]	; (28a74 <bt_hci_cmd_create+0x90>)
   28a08:	f01b fc62 	bl	442d0 <printk>
   28a0c:	f44f 7196 	mov.w	r1, #300	; 0x12c
   28a10:	4818      	ldr	r0, [pc, #96]	; (28a74 <bt_hci_cmd_create+0x90>)
   28a12:	f01b fe77 	bl	44704 <assert_post_action>
   28a16:	2600      	movs	r6, #0
	net_buf_reserve(buf, BT_BUF_RESERVE);
   28a18:	f104 0808 	add.w	r8, r4, #8
   28a1c:	2100      	movs	r1, #0
   28a1e:	4640      	mov	r0, r8
   28a20:	f000 fe5e 	bl	296e0 <net_buf_simple_reserve>
   28a24:	7526      	strb	r6, [r4, #20]
	cmd(buf)->opcode = opcode;
   28a26:	4620      	mov	r0, r4
   28a28:	f000 fd22 	bl	29470 <net_buf_id>
   28a2c:	250c      	movs	r5, #12
   28a2e:	4f12      	ldr	r7, [pc, #72]	; (28a78 <bt_hci_cmd_create+0x94>)
   28a30:	fb05 7000 	mla	r0, r5, r0, r7
   28a34:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   28a38:	4620      	mov	r0, r4
   28a3a:	f000 fd19 	bl	29470 <net_buf_id>
   28a3e:	fb05 7000 	mla	r0, r5, r0, r7
   28a42:	6086      	str	r6, [r0, #8]
	cmd(buf)->state = NULL;
   28a44:	4620      	mov	r0, r4
   28a46:	f000 fd13 	bl	29470 <net_buf_id>
   28a4a:	fb05 7000 	mla	r0, r5, r0, r7
	hdr = net_buf_add(buf, sizeof(*hdr));
   28a4e:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
   28a50:	6046      	str	r6, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
   28a52:	4640      	mov	r0, r8
   28a54:	f000 ff44 	bl	298e0 <net_buf_simple_add>
	hdr->param_len = param_len;
   28a58:	f880 9002 	strb.w	r9, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   28a5c:	f8a0 a000 	strh.w	sl, [r0]
}
   28a60:	4620      	mov	r0, r4
   28a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a66:	bf00      	nop
   28a68:	20020de8 	.word	0x20020de8
   28a6c:	0004d722 	.word	0x0004d722
   28a70:	0004b33b 	.word	0x0004b33b
   28a74:	0004d394 	.word	0x0004d394
   28a78:	20024b98 	.word	0x20024b98

00028a7c <bt_hci_cmd_send_sync>:
{
   28a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a80:	4607      	mov	r7, r0
   28a82:	b086      	sub	sp, #24
   28a84:	4615      	mov	r5, r2
	if (!buf) {
   28a86:	460c      	mov	r4, r1
   28a88:	b921      	cbnz	r1, 28a94 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   28a8a:	f7ff ffab 	bl	289e4 <bt_hci_cmd_create>
		if (!buf) {
   28a8e:	4604      	mov	r4, r0
   28a90:	2800      	cmp	r0, #0
   28a92:	d059      	beq.n	28b48 <bt_hci_cmd_send_sync+0xcc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   28a94:	2201      	movs	r2, #1
   28a96:	2100      	movs	r1, #0
   28a98:	4668      	mov	r0, sp
   28a9a:	f01f fa1b 	bl	47ed4 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   28a9e:	4620      	mov	r0, r4
   28aa0:	f000 fce6 	bl	29470 <net_buf_id>
   28aa4:	230c      	movs	r3, #12
   28aa6:	4e2a      	ldr	r6, [pc, #168]	; (28b50 <bt_hci_cmd_send_sync+0xd4>)
   28aa8:	fb03 6000 	mla	r0, r3, r0, r6
   28aac:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   28ab0:	4620      	mov	r0, r4
   28ab2:	f000 feb9 	bl	29828 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   28ab6:	4621      	mov	r1, r4
   28ab8:	4826      	ldr	r0, [pc, #152]	; (28b54 <bt_hci_cmd_send_sync+0xd8>)
   28aba:	f000 fe3b 	bl	29734 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   28abe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   28ac2:	2300      	movs	r3, #0
   28ac4:	4668      	mov	r0, sp
   28ac6:	f017 ff3d 	bl	40944 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   28aca:	4680      	mov	r8, r0
   28acc:	b180      	cbz	r0, 28af0 <bt_hci_cmd_send_sync+0x74>
   28ace:	f240 1377 	movw	r3, #375	; 0x177
   28ad2:	4a21      	ldr	r2, [pc, #132]	; (28b58 <bt_hci_cmd_send_sync+0xdc>)
   28ad4:	4921      	ldr	r1, [pc, #132]	; (28b5c <bt_hci_cmd_send_sync+0xe0>)
   28ad6:	4822      	ldr	r0, [pc, #136]	; (28b60 <bt_hci_cmd_send_sync+0xe4>)
   28ad8:	f01b fbfa 	bl	442d0 <printk>
   28adc:	4641      	mov	r1, r8
   28ade:	4821      	ldr	r0, [pc, #132]	; (28b64 <bt_hci_cmd_send_sync+0xe8>)
   28ae0:	f01b fbf6 	bl	442d0 <printk>
   28ae4:	4040      	eors	r0, r0
   28ae6:	f380 8811 	msr	BASEPRI, r0
   28aea:	f04f 0003 	mov.w	r0, #3
   28aee:	df02      	svc	2
	status = cmd(buf)->status;
   28af0:	4620      	mov	r0, r4
   28af2:	f000 fcbd 	bl	29470 <net_buf_id>
   28af6:	230c      	movs	r3, #12
   28af8:	4358      	muls	r0, r3
   28afa:	5c36      	ldrb	r6, [r6, r0]
	if (status) {
   28afc:	b1de      	cbz	r6, 28b36 <bt_hci_cmd_send_sync+0xba>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   28afe:	2302      	movs	r3, #2
   28b00:	f04f 0000 	mov.w	r0, #0
   28b04:	4a18      	ldr	r2, [pc, #96]	; (28b68 <bt_hci_cmd_send_sync+0xec>)
   28b06:	f363 0007 	bfi	r0, r3, #0, #8
   28b0a:	4b18      	ldr	r3, [pc, #96]	; (28b6c <bt_hci_cmd_send_sync+0xf0>)
   28b0c:	4918      	ldr	r1, [pc, #96]	; (28b70 <bt_hci_cmd_send_sync+0xf4>)
   28b0e:	1a9b      	subs	r3, r3, r2
   28b10:	08db      	lsrs	r3, r3, #3
   28b12:	f363 108f 	bfi	r0, r3, #6, #10
   28b16:	463a      	mov	r2, r7
   28b18:	4633      	mov	r3, r6
   28b1a:	f01b fe04 	bl	44726 <log_string_sync>
		net_buf_unref(buf);
   28b1e:	4620      	mov	r0, r4
   28b20:	f000 fe3c 	bl	2979c <net_buf_unref>
			return -EIO;
   28b24:	2e09      	cmp	r6, #9
   28b26:	bf0c      	ite	eq
   28b28:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   28b2c:	f06f 0004 	mvnne.w	r0, #4
}
   28b30:	b006      	add	sp, #24
   28b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   28b36:	b115      	cbz	r5, 28b3e <bt_hci_cmd_send_sync+0xc2>
		*rsp = buf;
   28b38:	602c      	str	r4, [r5, #0]
	return 0;
   28b3a:	4630      	mov	r0, r6
   28b3c:	e7f8      	b.n	28b30 <bt_hci_cmd_send_sync+0xb4>
		net_buf_unref(buf);
   28b3e:	4620      	mov	r0, r4
   28b40:	f000 fe2c 	bl	2979c <net_buf_unref>
	return 0;
   28b44:	4628      	mov	r0, r5
   28b46:	e7f3      	b.n	28b30 <bt_hci_cmd_send_sync+0xb4>
			return -ENOBUFS;
   28b48:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28b4c:	e7f0      	b.n	28b30 <bt_hci_cmd_send_sync+0xb4>
   28b4e:	bf00      	nop
   28b50:	20024b98 	.word	0x20024b98
   28b54:	20020334 	.word	0x20020334
   28b58:	0004d394 	.word	0x0004d394
   28b5c:	0004d3c8 	.word	0x0004d3c8
   28b60:	0004b33b 	.word	0x0004b33b
   28b64:	0004d3d1 	.word	0x0004d3d1
   28b68:	00049788 	.word	0x00049788
   28b6c:	000497d0 	.word	0x000497d0
   28b70:	0004d3f1 	.word	0x0004d3f1

00028b74 <set_random_address>:
{
   28b74:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
   28b76:	4c15      	ldr	r4, [pc, #84]	; (28bcc <set_random_address+0x58>)
   28b78:	2206      	movs	r2, #6
   28b7a:	f104 0131 	add.w	r1, r4, #49	; 0x31
   28b7e:	4606      	mov	r6, r0
   28b80:	f01f faf4 	bl	4816c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   28b84:	4602      	mov	r2, r0
   28b86:	b1d8      	cbz	r0, 28bc0 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   28b88:	2106      	movs	r1, #6
   28b8a:	f242 0005 	movw	r0, #8197	; 0x2005
   28b8e:	f7ff ff29 	bl	289e4 <bt_hci_cmd_create>
	if (!buf) {
   28b92:	4605      	mov	r5, r0
   28b94:	b1b0      	cbz	r0, 28bc4 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
   28b96:	2206      	movs	r2, #6
   28b98:	4631      	mov	r1, r6
   28b9a:	3008      	adds	r0, #8
   28b9c:	f01c ffac 	bl	45af8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   28ba0:	2200      	movs	r2, #0
   28ba2:	4629      	mov	r1, r5
   28ba4:	f242 0005 	movw	r0, #8197	; 0x2005
   28ba8:	f7ff ff68 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   28bac:	4602      	mov	r2, r0
   28bae:	b938      	cbnz	r0, 28bc0 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   28bb0:	4631      	mov	r1, r6
   28bb2:	f104 0031 	add.w	r0, r4, #49	; 0x31
   28bb6:	f01c ff3b 	bl	45a30 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   28bba:	2301      	movs	r3, #1
   28bbc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
   28bc0:	4610      	mov	r0, r2
   28bc2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   28bc4:	f06f 0268 	mvn.w	r2, #104	; 0x68
   28bc8:	e7fa      	b.n	28bc0 <set_random_address+0x4c>
   28bca:	bf00      	nop
   28bcc:	20020270 	.word	0x20020270

00028bd0 <id_create.isra.18>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   28bd0:	b530      	push	{r4, r5, lr}
   28bd2:	4d14      	ldr	r5, [pc, #80]	; (28c24 <id_create.isra.18+0x54>)
   28bd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   28bd8:	b085      	sub	sp, #20
   28bda:	4405      	add	r5, r0
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   28bdc:	460c      	mov	r4, r1
   28bde:	b179      	cbz	r1, 28c00 <id_create.isra.18+0x30>
   28be0:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   28be2:	2207      	movs	r2, #7
   28be4:	4669      	mov	r1, sp
   28be6:	4620      	mov	r0, r4
   28be8:	9300      	str	r3, [sp, #0]
   28bea:	f8cd 3003 	str.w	r3, [sp, #3]
   28bee:	f01f fabd 	bl	4816c <memcmp>
   28bf2:	b128      	cbz	r0, 28c00 <id_create.isra.18+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   28bf4:	4621      	mov	r1, r4
   28bf6:	4628      	mov	r0, r5
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   28bf8:	f01c ff1f 	bl	45a3a <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   28bfc:	b005      	add	sp, #20
   28bfe:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   28c00:	a802      	add	r0, sp, #8
   28c02:	f01c ff55 	bl	45ab0 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   28c06:	a802      	add	r0, sp, #8
   28c08:	f7ff fea4 	bl	28954 <id_find>
   28c0c:	2800      	cmp	r0, #0
   28c0e:	daf7      	bge.n	28c00 <id_create.isra.18+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   28c10:	a902      	add	r1, sp, #8
   28c12:	4628      	mov	r0, r5
   28c14:	f01c ff11 	bl	45a3a <bt_addr_le_copy>
		if (addr) {
   28c18:	2c00      	cmp	r4, #0
   28c1a:	d0ef      	beq.n	28bfc <id_create.isra.18+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   28c1c:	4629      	mov	r1, r5
   28c1e:	4620      	mov	r0, r4
   28c20:	e7ea      	b.n	28bf8 <id_create.isra.18+0x28>
   28c22:	bf00      	nop
   28c24:	20020270 	.word	0x20020270

00028c28 <hci_event_prio>:
{
   28c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c2c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   28c2e:	f100 0508 	add.w	r5, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   28c32:	4628      	mov	r0, r5
   28c34:	f01c ff54 	bl	45ae0 <net_buf_simple_headroom>
	state->len = buf->len;
   28c38:	89a7      	ldrh	r7, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   28c3a:	4606      	mov	r6, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   28c3c:	2f01      	cmp	r7, #1
   28c3e:	d80c      	bhi.n	28c5a <hci_event_prio+0x32>
   28c40:	f641 03c4 	movw	r3, #6340	; 0x18c4
   28c44:	4a20      	ldr	r2, [pc, #128]	; (28cc8 <hci_event_prio+0xa0>)
   28c46:	4921      	ldr	r1, [pc, #132]	; (28ccc <hci_event_prio+0xa4>)
   28c48:	4821      	ldr	r0, [pc, #132]	; (28cd0 <hci_event_prio+0xa8>)
   28c4a:	f01b fb41 	bl	442d0 <printk>
   28c4e:	4040      	eors	r0, r0
   28c50:	f380 8811 	msr	BASEPRI, r0
   28c54:	f04f 0003 	mov.w	r0, #3
   28c58:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   28c5a:	2102      	movs	r1, #2
   28c5c:	4628      	mov	r0, r5
   28c5e:	f000 fe1d 	bl	2989c <net_buf_simple_pull_mem>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   28c62:	7803      	ldrb	r3, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   28c64:	4680      	mov	r8, r0
	switch (evt) {
   28c66:	2b05      	cmp	r3, #5
   28c68:	d024      	beq.n	28cb4 <hci_event_prio+0x8c>
   28c6a:	d325      	bcc.n	28cb8 <hci_event_prio+0x90>
   28c6c:	3b0e      	subs	r3, #14
   28c6e:	2b01      	cmp	r3, #1
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   28c70:	bf8c      	ite	hi
   28c72:	2502      	movhi	r5, #2
   28c74:	2501      	movls	r5, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   28c76:	07ea      	lsls	r2, r5, #31
   28c78:	d40c      	bmi.n	28c94 <hci_event_prio+0x6c>
   28c7a:	f641 03c8 	movw	r3, #6344	; 0x18c8
   28c7e:	4a12      	ldr	r2, [pc, #72]	; (28cc8 <hci_event_prio+0xa0>)
   28c80:	4914      	ldr	r1, [pc, #80]	; (28cd4 <hci_event_prio+0xac>)
   28c82:	4813      	ldr	r0, [pc, #76]	; (28cd0 <hci_event_prio+0xa8>)
   28c84:	f01b fb24 	bl	442d0 <printk>
   28c88:	4040      	eors	r0, r0
   28c8a:	f380 8811 	msr	BASEPRI, r0
   28c8e:	f04f 0003 	mov.w	r0, #3
   28c92:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   28c94:	2302      	movs	r3, #2
   28c96:	4a10      	ldr	r2, [pc, #64]	; (28cd8 <hci_event_prio+0xb0>)
   28c98:	4621      	mov	r1, r4
   28c9a:	f898 0000 	ldrb.w	r0, [r8]
   28c9e:	f7ff fdff 	bl	288a0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   28ca2:	07ab      	lsls	r3, r5, #30
   28ca4:	d50a      	bpl.n	28cbc <hci_event_prio+0x94>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   28ca6:	6923      	ldr	r3, [r4, #16]
	buf->len = state->len;
   28ca8:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
   28caa:	fa13 f686 	uxtah	r6, r3, r6
   28cae:	60a6      	str	r6, [r4, #8]
}
   28cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   28cb4:	2503      	movs	r5, #3
   28cb6:	e7de      	b.n	28c76 <hci_event_prio+0x4e>
		return BT_HCI_EVT_FLAG_RECV;
   28cb8:	2502      	movs	r5, #2
   28cba:	e7dc      	b.n	28c76 <hci_event_prio+0x4e>
		net_buf_unref(buf);
   28cbc:	4620      	mov	r0, r4
}
   28cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   28cc2:	f000 bd6b 	b.w	2979c <net_buf_unref>
   28cc6:	bf00      	nop
   28cc8:	0004d394 	.word	0x0004d394
   28ccc:	0004d56a 	.word	0x0004d56a
   28cd0:	0004b33b 	.word	0x0004b33b
   28cd4:	0004d583 	.word	0x0004d583
   28cd8:	00049e80 	.word	0x00049e80

00028cdc <bt_recv>:
{
   28cdc:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   28cde:	7d04      	ldrb	r4, [r0, #20]
   28ce0:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   28ce2:	2c01      	cmp	r4, #1
   28ce4:	d13b      	bne.n	28d5e <bt_recv+0x82>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   28ce6:	8983      	ldrh	r3, [r0, #12]
   28ce8:	2b01      	cmp	r3, #1
   28cea:	d80c      	bhi.n	28d06 <bt_recv+0x2a>
   28cec:	f241 33f8 	movw	r3, #5112	; 0x13f8
   28cf0:	4a25      	ldr	r2, [pc, #148]	; (28d88 <bt_recv+0xac>)
   28cf2:	4926      	ldr	r1, [pc, #152]	; (28d8c <bt_recv+0xb0>)
   28cf4:	4826      	ldr	r0, [pc, #152]	; (28d90 <bt_recv+0xb4>)
   28cf6:	f01b faeb 	bl	442d0 <printk>
   28cfa:	4040      	eors	r0, r0
   28cfc:	f380 8811 	msr	BASEPRI, r0
   28d00:	f04f 0003 	mov.w	r0, #3
   28d04:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   28d06:	2102      	movs	r1, #2
   28d08:	f105 0008 	add.w	r0, r5, #8
   28d0c:	f000 fdc6 	bl	2989c <net_buf_simple_pull_mem>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   28d10:	7803      	ldrb	r3, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   28d12:	4606      	mov	r6, r0
	switch (evt) {
   28d14:	2b05      	cmp	r3, #5
   28d16:	d01e      	beq.n	28d56 <bt_recv+0x7a>
   28d18:	d31f      	bcc.n	28d5a <bt_recv+0x7e>
   28d1a:	3b0e      	subs	r3, #14
		return BT_HCI_EVT_FLAG_RECV;
   28d1c:	2b01      	cmp	r3, #1
   28d1e:	bf88      	it	hi
   28d20:	2402      	movhi	r4, #2
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   28d22:	07a3      	lsls	r3, r4, #30
   28d24:	d40c      	bmi.n	28d40 <bt_recv+0x64>
   28d26:	f241 33fc 	movw	r3, #5116	; 0x13fc
   28d2a:	4a17      	ldr	r2, [pc, #92]	; (28d88 <bt_recv+0xac>)
   28d2c:	4919      	ldr	r1, [pc, #100]	; (28d94 <bt_recv+0xb8>)
   28d2e:	4818      	ldr	r0, [pc, #96]	; (28d90 <bt_recv+0xb4>)
   28d30:	f01b face 	bl	442d0 <printk>
   28d34:	4040      	eors	r0, r0
   28d36:	f380 8811 	msr	BASEPRI, r0
   28d3a:	f04f 0003 	mov.w	r0, #3
   28d3e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   28d40:	2303      	movs	r3, #3
   28d42:	4a15      	ldr	r2, [pc, #84]	; (28d98 <bt_recv+0xbc>)
   28d44:	4629      	mov	r1, r5
   28d46:	7830      	ldrb	r0, [r6, #0]
   28d48:	f7ff fdaa 	bl	288a0 <handle_event>
	net_buf_unref(buf);
   28d4c:	4628      	mov	r0, r5
   28d4e:	f000 fd25 	bl	2979c <net_buf_unref>
		return 0;
   28d52:	2000      	movs	r0, #0
}
   28d54:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   28d56:	2403      	movs	r4, #3
   28d58:	e7e3      	b.n	28d22 <bt_recv+0x46>
		return BT_HCI_EVT_FLAG_RECV;
   28d5a:	2402      	movs	r4, #2
   28d5c:	e7e1      	b.n	28d22 <bt_recv+0x46>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   28d5e:	2301      	movs	r3, #1
   28d60:	f04f 0000 	mov.w	r0, #0
   28d64:	4a0d      	ldr	r2, [pc, #52]	; (28d9c <bt_recv+0xc0>)
   28d66:	f363 0007 	bfi	r0, r3, #0, #8
   28d6a:	4b0d      	ldr	r3, [pc, #52]	; (28da0 <bt_recv+0xc4>)
   28d6c:	490d      	ldr	r1, [pc, #52]	; (28da4 <bt_recv+0xc8>)
   28d6e:	1a9b      	subs	r3, r3, r2
   28d70:	08db      	lsrs	r3, r3, #3
   28d72:	f363 108f 	bfi	r0, r3, #6, #10
   28d76:	4622      	mov	r2, r4
   28d78:	f01b fcd5 	bl	44726 <log_string_sync>
		net_buf_unref(buf);
   28d7c:	4628      	mov	r0, r5
   28d7e:	f000 fd0d 	bl	2979c <net_buf_unref>
		return -EINVAL;
   28d82:	f06f 0015 	mvn.w	r0, #21
   28d86:	e7e5      	b.n	28d54 <bt_recv+0x78>
   28d88:	0004d394 	.word	0x0004d394
   28d8c:	0004d56a 	.word	0x0004d56a
   28d90:	0004b33b 	.word	0x0004b33b
   28d94:	0004d43b 	.word	0x0004d43b
   28d98:	00049e68 	.word	0x00049e68
   28d9c:	00049788 	.word	0x00049788
   28da0:	000497d0 	.word	0x000497d0
   28da4:	0004d469 	.word	0x0004d469

00028da8 <bt_recv_prio>:
{
   28da8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   28daa:	7d03      	ldrb	r3, [r0, #20]
{
   28dac:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   28dae:	2b01      	cmp	r3, #1
   28db0:	d00c      	beq.n	28dcc <bt_recv_prio+0x24>
   28db2:	f641 130b 	movw	r3, #6411	; 0x190b
   28db6:	4a08      	ldr	r2, [pc, #32]	; (28dd8 <bt_recv_prio+0x30>)
   28db8:	4908      	ldr	r1, [pc, #32]	; (28ddc <bt_recv_prio+0x34>)
   28dba:	4809      	ldr	r0, [pc, #36]	; (28de0 <bt_recv_prio+0x38>)
   28dbc:	f01b fa88 	bl	442d0 <printk>
   28dc0:	4040      	eors	r0, r0
   28dc2:	f380 8811 	msr	BASEPRI, r0
   28dc6:	f04f 0003 	mov.w	r0, #3
   28dca:	df02      	svc	2
	hci_event_prio(buf);
   28dcc:	4620      	mov	r0, r4
   28dce:	f7ff ff2b 	bl	28c28 <hci_event_prio>
}
   28dd2:	2000      	movs	r0, #0
   28dd4:	bd10      	pop	{r4, pc}
   28dd6:	bf00      	nop
   28dd8:	0004d394 	.word	0x0004d394
   28ddc:	0004d47d 	.word	0x0004d47d
   28de0:	0004b33b 	.word	0x0004b33b

00028de4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   28de4:	4a08      	ldr	r2, [pc, #32]	; (28e08 <bt_hci_driver_register+0x24>)
   28de6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   28dea:	b93b      	cbnz	r3, 28dfc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   28dec:	68c1      	ldr	r1, [r0, #12]
   28dee:	b141      	cbz	r1, 28e02 <bt_hci_driver_register+0x1e>
   28df0:	6901      	ldr	r1, [r0, #16]
   28df2:	b131      	cbz	r1, 28e02 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   28df4:	f8c2 00e0 	str.w	r0, [r2, #224]	; 0xe0
	return 0;
   28df8:	4618      	mov	r0, r3
   28dfa:	4770      	bx	lr
		return -EALREADY;
   28dfc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   28e00:	4770      	bx	lr
		return -EINVAL;
   28e02:	f06f 0015 	mvn.w	r0, #21
}
   28e06:	4770      	bx	lr
   28e08:	20020270 	.word	0x20020270

00028e0c <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28e0c:	4b04      	ldr	r3, [pc, #16]	; (28e20 <bt_finalize_init+0x14>)
   28e0e:	e8d3 2fef 	ldaex	r2, [r3]
   28e12:	f042 0202 	orr.w	r2, r2, #2
   28e16:	e8c3 2fe1 	stlex	r1, r2, [r3]
   28e1a:	2900      	cmp	r1, #0
   28e1c:	d1f7      	bne.n	28e0e <bt_finalize_init+0x2>
}
   28e1e:	4770      	bx	lr
   28e20:	20020304 	.word	0x20020304

00028e24 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   28e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28e26:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   28e28:	4605      	mov	r5, r0
   28e2a:	b918      	cbnz	r0, 28e34 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   28e2c:	b35c      	cbz	r4, 28e86 <bt_id_create+0x62>
		return -EINVAL;
   28e2e:	f06f 0415 	mvn.w	r4, #21
   28e32:	e032      	b.n	28e9a <bt_id_create+0x76>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   28e34:	2300      	movs	r3, #0
   28e36:	2207      	movs	r2, #7
   28e38:	4669      	mov	r1, sp
   28e3a:	9300      	str	r3, [sp, #0]
   28e3c:	f8cd 3003 	str.w	r3, [sp, #3]
   28e40:	f01f f994 	bl	4816c <memcmp>
   28e44:	2800      	cmp	r0, #0
   28e46:	d0f1      	beq.n	28e2c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   28e48:	782b      	ldrb	r3, [r5, #0]
   28e4a:	2b01      	cmp	r3, #1
   28e4c:	d104      	bne.n	28e58 <bt_id_create+0x34>
   28e4e:	79ab      	ldrb	r3, [r5, #6]
   28e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28e54:	2bc0      	cmp	r3, #192	; 0xc0
   28e56:	d00e      	beq.n	28e76 <bt_id_create+0x52>
			BT_ERR("Only static random identity address supported");
   28e58:	2301      	movs	r3, #1
   28e5a:	f04f 0000 	mov.w	r0, #0
   28e5e:	4a12      	ldr	r2, [pc, #72]	; (28ea8 <bt_id_create+0x84>)
   28e60:	f363 0007 	bfi	r0, r3, #0, #8
   28e64:	4b11      	ldr	r3, [pc, #68]	; (28eac <bt_id_create+0x88>)
   28e66:	4912      	ldr	r1, [pc, #72]	; (28eb0 <bt_id_create+0x8c>)
   28e68:	1a9b      	subs	r3, r3, r2
   28e6a:	08db      	lsrs	r3, r3, #3
   28e6c:	f363 108f 	bfi	r0, r3, #6, #10
   28e70:	f01b fc59 	bl	44726 <log_string_sync>
			return -EINVAL;
   28e74:	e7db      	b.n	28e2e <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   28e76:	4628      	mov	r0, r5
   28e78:	f7ff fd6c 	bl	28954 <id_find>
   28e7c:	2800      	cmp	r0, #0
   28e7e:	dbd5      	blt.n	28e2c <bt_id_create+0x8>
			return -EALREADY;
   28e80:	f06f 0477 	mvn.w	r4, #119	; 0x77
   28e84:	e009      	b.n	28e9a <bt_id_create+0x76>
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   28e86:	4b0b      	ldr	r3, [pc, #44]	; (28eb4 <bt_id_create+0x90>)
   28e88:	79dc      	ldrb	r4, [r3, #7]
   28e8a:	2c01      	cmp	r4, #1
   28e8c:	d008      	beq.n	28ea0 <bt_id_create+0x7c>
		return -ENOMEM;
	}

	new_id = bt_dev.id_count++;
   28e8e:	1c62      	adds	r2, r4, #1
	id_create(new_id, addr, irk);
   28e90:	4629      	mov	r1, r5
   28e92:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   28e94:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
   28e96:	f7ff fe9b 	bl	28bd0 <id_create.isra.18>

	return new_id;
}
   28e9a:	4620      	mov	r0, r4
   28e9c:	b003      	add	sp, #12
   28e9e:	bd30      	pop	{r4, r5, pc}
		return -ENOMEM;
   28ea0:	f06f 040b 	mvn.w	r4, #11
   28ea4:	e7f9      	b.n	28e9a <bt_id_create+0x76>
   28ea6:	bf00      	nop
   28ea8:	00049788 	.word	0x00049788
   28eac:	000497d0 	.word	0x000497d0
   28eb0:	0004d40d 	.word	0x0004d40d
   28eb4:	20020270 	.word	0x20020270

00028eb8 <bt_setup_public_id_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

void bt_setup_public_id_addr(void)
{
   28eb8:	b570      	push	{r4, r5, r6, lr}
   28eba:	b088      	sub	sp, #32
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   28ebc:	aa01      	add	r2, sp, #4
   28ebe:	2100      	movs	r1, #0
   28ec0:	f241 0009 	movw	r0, #4105	; 0x1009
   28ec4:	f7ff fdda 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   28ec8:	4e20      	ldr	r6, [pc, #128]	; (28f4c <bt_setup_public_id_addr+0x94>)
   28eca:	4604      	mov	r4, r0
   28ecc:	b188      	cbz	r0, 28ef2 <bt_setup_public_id_addr+0x3a>
		BT_WARN("Failed to read public address");
   28ece:	2302      	movs	r3, #2
   28ed0:	f04f 0000 	mov.w	r0, #0
   28ed4:	4a1e      	ldr	r2, [pc, #120]	; (28f50 <bt_setup_public_id_addr+0x98>)
   28ed6:	f363 0007 	bfi	r0, r3, #0, #8
   28eda:	4b1e      	ldr	r3, [pc, #120]	; (28f54 <bt_setup_public_id_addr+0x9c>)
   28edc:	491e      	ldr	r1, [pc, #120]	; (28f58 <bt_setup_public_id_addr+0xa0>)
   28ede:	1a9b      	subs	r3, r3, r2
   28ee0:	08db      	lsrs	r3, r3, #3
   28ee2:	f363 108f 	bfi	r0, r3, #6, #10
   28ee6:	f01b fc1e 	bl	44726 <log_string_sync>
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_read_public_addr(&addr);
   28eea:	2300      	movs	r3, #0
   28eec:	71f3      	strb	r3, [r6, #7]
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
}
   28eee:	b008      	add	sp, #32
   28ef0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   28ef2:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   28ef4:	9004      	str	r0, [sp, #16]
   28ef6:	689d      	ldr	r5, [r3, #8]
	return memcmp(a, b, sizeof(*a));
   28ef8:	2206      	movs	r2, #6
   28efa:	3501      	adds	r5, #1
   28efc:	f8ad 0014 	strh.w	r0, [sp, #20]
   28f00:	a904      	add	r1, sp, #16
   28f02:	4628      	mov	r0, r5
   28f04:	f01f f932 	bl	4816c <memcmp>
   28f08:	b918      	cbnz	r0, 28f12 <bt_setup_public_id_addr+0x5a>
		net_buf_unref(rsp);
   28f0a:	9801      	ldr	r0, [sp, #4]
   28f0c:	f000 fc46 	bl	2979c <net_buf_unref>
   28f10:	e7eb      	b.n	28eea <bt_setup_public_id_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   28f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f16:	2206      	movs	r2, #6
   28f18:	a902      	add	r1, sp, #8
   28f1a:	4628      	mov	r0, r5
   28f1c:	9302      	str	r3, [sp, #8]
   28f1e:	f8ad 300c 	strh.w	r3, [sp, #12]
   28f22:	f01f f923 	bl	4816c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   28f26:	2800      	cmp	r0, #0
   28f28:	d0ef      	beq.n	28f0a <bt_setup_public_id_addr+0x52>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   28f2a:	4629      	mov	r1, r5
   28f2c:	f10d 0019 	add.w	r0, sp, #25
   28f30:	f01c fd7e 	bl	45a30 <bt_addr_copy>
	net_buf_unref(rsp);
   28f34:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   28f36:	f88d 4018 	strb.w	r4, [sp, #24]
	net_buf_unref(rsp);
   28f3a:	f000 fc2f 	bl	2979c <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
   28f3e:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
   28f40:	a906      	add	r1, sp, #24
   28f42:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
   28f44:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
   28f46:	f7ff fe43 	bl	28bd0 <id_create.isra.18>
   28f4a:	e7d0      	b.n	28eee <bt_setup_public_id_addr+0x36>
   28f4c:	20020270 	.word	0x20020270
   28f50:	00049788 	.word	0x00049788
   28f54:	000497d0 	.word	0x000497d0
   28f58:	0004d4a0 	.word	0x0004d4a0

00028f5c <hci_init>:
{
   28f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   28f5e:	4da0      	ldr	r5, [pc, #640]	; (291e0 <hci_init+0x284>)
   28f60:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   28f64:	6899      	ldr	r1, [r3, #8]
   28f66:	f011 0101 	ands.w	r1, r1, #1
   28f6a:	d11a      	bne.n	28fa2 <hci_init+0x46>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   28f6c:	aa01      	add	r2, sp, #4
   28f6e:	f640 4003 	movw	r0, #3075	; 0xc03
   28f72:	f7ff fd83 	bl	28a7c <bt_hci_cmd_send_sync>
		if (err) {
   28f76:	4604      	mov	r4, r0
   28f78:	2800      	cmp	r0, #0
   28f7a:	d176      	bne.n	2906a <hci_init+0x10e>
		hci_reset_complete(rsp);
   28f7c:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
   28f7e:	689b      	ldr	r3, [r3, #8]
	if (status) {
   28f80:	781b      	ldrb	r3, [r3, #0]
   28f82:	b95b      	cbnz	r3, 28f9c <hci_init+0x40>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28f84:	f105 0394 	add.w	r3, r5, #148	; 0x94
   28f88:	e8d3 2faf 	lda	r2, [r3]
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   28f8c:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28f90:	e8d3 1fef 	ldaex	r1, [r3]
   28f94:	e8c3 2fe0 	stlex	r0, r2, [r3]
   28f98:	2800      	cmp	r0, #0
   28f9a:	d1f9      	bne.n	28f90 <hci_init+0x34>
		net_buf_unref(rsp);
   28f9c:	9801      	ldr	r0, [sp, #4]
   28f9e:	f000 fbfd 	bl	2979c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   28fa2:	aa01      	add	r2, sp, #4
   28fa4:	2100      	movs	r1, #0
   28fa6:	f241 0003 	movw	r0, #4099	; 0x1003
   28faa:	f7ff fd67 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   28fae:	4604      	mov	r4, r0
   28fb0:	2800      	cmp	r0, #0
   28fb2:	d15a      	bne.n	2906a <hci_init+0x10e>
	read_local_features_complete(rsp);
   28fb4:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   28fb6:	4e8b      	ldr	r6, [pc, #556]	; (291e4 <hci_init+0x288>)
   28fb8:	6893      	ldr	r3, [r2, #8]
   28fba:	f853 0f01 	ldr.w	r0, [r3, #1]!
   28fbe:	6859      	ldr	r1, [r3, #4]
   28fc0:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   28fc2:	4610      	mov	r0, r2
   28fc4:	f000 fbea 	bl	2979c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   28fc8:	4621      	mov	r1, r4
   28fca:	aa01      	add	r2, sp, #4
   28fcc:	f241 0001 	movw	r0, #4097	; 0x1001
   28fd0:	f7ff fd54 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   28fd4:	4604      	mov	r4, r0
   28fd6:	2800      	cmp	r0, #0
   28fd8:	d147      	bne.n	2906a <hci_init+0x10e>
	read_local_ver_complete(rsp);
   28fda:	9801      	ldr	r0, [sp, #4]
   28fdc:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   28fde:	785a      	ldrb	r2, [r3, #1]
   28fe0:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   28fe4:	78d9      	ldrb	r1, [r3, #3]
   28fe6:	789a      	ldrb	r2, [r3, #2]
   28fe8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28fec:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
   28fee:	791a      	ldrb	r2, [r3, #4]
   28ff0:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   28ff4:	7a19      	ldrb	r1, [r3, #8]
   28ff6:	79da      	ldrb	r2, [r3, #7]
   28ff8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   28ffc:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   28ffe:	795a      	ldrb	r2, [r3, #5]
   29000:	799b      	ldrb	r3, [r3, #6]
   29002:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   29006:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
   29008:	f000 fbc8 	bl	2979c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   2900c:	4621      	mov	r1, r4
   2900e:	aa01      	add	r2, sp, #4
   29010:	f241 0002 	movw	r0, #4098	; 0x1002
   29014:	f7ff fd32 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   29018:	4604      	mov	r4, r0
   2901a:	bb30      	cbnz	r0, 2906a <hci_init+0x10e>
	read_supported_commands_complete(rsp);
   2901c:	9f01      	ldr	r7, [sp, #4]
   2901e:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   29020:	1c53      	adds	r3, r2, #1
   29022:	3241      	adds	r2, #65	; 0x41
   29024:	4634      	mov	r4, r6
   29026:	6818      	ldr	r0, [r3, #0]
   29028:	6859      	ldr	r1, [r3, #4]
   2902a:	3308      	adds	r3, #8
   2902c:	c403      	stmia	r4!, {r0, r1}
   2902e:	4293      	cmp	r3, r2
   29030:	4626      	mov	r6, r4
   29032:	d1f7      	bne.n	29024 <hci_init+0xc8>
	net_buf_unref(rsp);
   29034:	4638      	mov	r0, r7
   29036:	f000 fbb1 	bl	2979c <net_buf_unref>
		err = prng_init();
   2903a:	f000 f9bd 	bl	293b8 <prng_init>
		if (err) {
   2903e:	4604      	mov	r4, r0
   29040:	b998      	cbnz	r0, 2906a <hci_init+0x10e>
	if (!BT_FEAT_LE(bt_dev.features)) {
   29042:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   29046:	0659      	lsls	r1, r3, #25
   29048:	d412      	bmi.n	29070 <hci_init+0x114>
		BT_ERR("Non-LE capable controller detected!");
   2904a:	2301      	movs	r3, #1
   2904c:	f04f 0000 	mov.w	r0, #0
   29050:	4a65      	ldr	r2, [pc, #404]	; (291e8 <hci_init+0x28c>)
   29052:	f363 0007 	bfi	r0, r3, #0, #8
   29056:	4b65      	ldr	r3, [pc, #404]	; (291ec <hci_init+0x290>)
   29058:	4965      	ldr	r1, [pc, #404]	; (291f0 <hci_init+0x294>)
   2905a:	1a9b      	subs	r3, r3, r2
   2905c:	08db      	lsrs	r3, r3, #3
   2905e:	f363 108f 	bfi	r0, r3, #6, #10
   29062:	f01b fb60 	bl	44726 <log_string_sync>
		return -ENODEV;
   29066:	f06f 0412 	mvn.w	r4, #18
}
   2906a:	4620      	mov	r0, r4
   2906c:	b003      	add	sp, #12
   2906e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   29070:	4601      	mov	r1, r0
   29072:	aa01      	add	r2, sp, #4
   29074:	f242 0003 	movw	r0, #8195	; 0x2003
   29078:	f7ff fd00 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   2907c:	4604      	mov	r4, r0
   2907e:	2800      	cmp	r0, #0
   29080:	d1f3      	bne.n	2906a <hci_init+0x10e>
	read_le_features_complete(rsp);
   29082:	9e01      	ldr	r6, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   29084:	4b5b      	ldr	r3, [pc, #364]	; (291f4 <hci_init+0x298>)
   29086:	68b2      	ldr	r2, [r6, #8]
   29088:	f852 0f01 	ldr.w	r0, [r2, #1]!
   2908c:	6851      	ldr	r1, [r2, #4]
   2908e:	c303      	stmia	r3!, {r0, r1}
	net_buf_unref(rsp);
   29090:	4630      	mov	r0, r6
   29092:	f000 fb83 	bl	2979c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   29096:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   2909a:	069a      	lsls	r2, r3, #26
   2909c:	d55c      	bpl.n	29158 <hci_init+0x1fc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   2909e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   290a2:	071b      	lsls	r3, r3, #28
   290a4:	d473      	bmi.n	2918e <hci_init+0x232>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   290a6:	2108      	movs	r1, #8
   290a8:	f242 0001 	movw	r0, #8193	; 0x2001
   290ac:	f7ff fc9a 	bl	289e4 <bt_hci_cmd_create>
	if (!buf) {
   290b0:	4604      	mov	r4, r0
   290b2:	2800      	cmp	r0, #0
   290b4:	d057      	beq.n	29166 <hci_init+0x20a>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
   290b6:	2108      	movs	r1, #8
   290b8:	4408      	add	r0, r1
   290ba:	f000 fc11 	bl	298e0 <net_buf_simple_add>
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   290be:	2702      	movs	r7, #2
	dst[1] = val >> 8;
   290c0:	2200      	movs	r2, #0
	dst[0] = val;
   290c2:	7007      	strb	r7, [r0, #0]
	dst[1] = val >> 8;
   290c4:	7042      	strb	r2, [r0, #1]
	dst[0] = val;
   290c6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   290c8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   290ca:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   290cc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   290ce:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   290d0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   290d2:	4621      	mov	r1, r4
   290d4:	f242 0001 	movw	r0, #8193	; 0x2001
   290d8:	f7ff fcd0 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   290dc:	4604      	mov	r4, r0
   290de:	2800      	cmp	r0, #0
   290e0:	d1c3      	bne.n	2906a <hci_init+0x10e>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   290e2:	2108      	movs	r1, #8
   290e4:	f640 4001 	movw	r0, #3073	; 0xc01
   290e8:	f7ff fc7c 	bl	289e4 <bt_hci_cmd_create>
	if (!buf) {
   290ec:	4606      	mov	r6, r0
   290ee:	2800      	cmp	r0, #0
   290f0:	d039      	beq.n	29166 <hci_init+0x20a>
	ev = net_buf_add(buf, sizeof(*ev));
   290f2:	2108      	movs	r1, #8
   290f4:	4408      	add	r0, r1
   290f6:	f000 fbf3 	bl	298e0 <net_buf_simple_add>
   290fa:	2380      	movs	r3, #128	; 0x80
   290fc:	7043      	strb	r3, [r0, #1]
   290fe:	2320      	movs	r3, #32
	dst[0] = val;
   29100:	7004      	strb	r4, [r0, #0]
   29102:	7084      	strb	r4, [r0, #2]
   29104:	7104      	strb	r4, [r0, #4]
	dst[1] = val >> 8;
   29106:	7144      	strb	r4, [r0, #5]
	dst[0] = val;
   29108:	7184      	strb	r4, [r0, #6]
	dst[1] = val >> 8;
   2910a:	70c7      	strb	r7, [r0, #3]
   2910c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   2910e:	4622      	mov	r2, r4
   29110:	4631      	mov	r1, r6
   29112:	f640 4001 	movw	r0, #3073	; 0xc01
   29116:	f7ff fcb1 	bl	28a7c <bt_hci_cmd_send_sync>
	if (err) {
   2911a:	4604      	mov	r4, r0
   2911c:	2800      	cmp	r0, #0
   2911e:	d1a4      	bne.n	2906a <hci_init+0x10e>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   29120:	79eb      	ldrb	r3, [r5, #7]
   29122:	2b00      	cmp	r3, #0
   29124:	d1a1      	bne.n	2906a <hci_init+0x10e>
		bt_setup_public_id_addr();
   29126:	f7ff fec7 	bl	28eb8 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   2912a:	79eb      	ldrb	r3, [r5, #7]
   2912c:	2b00      	cmp	r3, #0
   2912e:	d19c      	bne.n	2906a <hci_init+0x10e>
		err = bt_setup_random_id_addr();
   29130:	f01c fccc 	bl	45acc <bt_setup_random_id_addr>
		if (err) {
   29134:	4604      	mov	r4, r0
   29136:	2800      	cmp	r0, #0
   29138:	d03d      	beq.n	291b6 <hci_init+0x25a>
			BT_ERR("Unable to set identity address");
   2913a:	2301      	movs	r3, #1
   2913c:	f04f 0000 	mov.w	r0, #0
   29140:	4a29      	ldr	r2, [pc, #164]	; (291e8 <hci_init+0x28c>)
   29142:	f363 0007 	bfi	r0, r3, #0, #8
   29146:	4b29      	ldr	r3, [pc, #164]	; (291ec <hci_init+0x290>)
   29148:	492b      	ldr	r1, [pc, #172]	; (291f8 <hci_init+0x29c>)
   2914a:	1a9b      	subs	r3, r3, r2
   2914c:	08db      	lsrs	r3, r3, #3
   2914e:	f363 108f 	bfi	r0, r3, #6, #10
			BT_ERR("Unable to set random address");
   29152:	f01b fae8 	bl	44726 <log_string_sync>
			return err;
   29156:	e788      	b.n	2906a <hci_init+0x10e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   29158:	2102      	movs	r1, #2
   2915a:	f640 406d 	movw	r0, #3181	; 0xc6d
   2915e:	f7ff fc41 	bl	289e4 <bt_hci_cmd_create>
		if (!buf) {
   29162:	4606      	mov	r6, r0
   29164:	b910      	cbnz	r0, 2916c <hci_init+0x210>
		return -ENOBUFS;
   29166:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2916a:	e77e      	b.n	2906a <hci_init+0x10e>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
   2916c:	2102      	movs	r1, #2
   2916e:	3008      	adds	r0, #8
   29170:	f000 fbb6 	bl	298e0 <net_buf_simple_add>
		cp_le->le = 0x01;
   29174:	2301      	movs	r3, #1
		cp_le->simul = 0x00;
   29176:	7044      	strb	r4, [r0, #1]
		cp_le->le = 0x01;
   29178:	7003      	strb	r3, [r0, #0]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   2917a:	4622      	mov	r2, r4
   2917c:	4631      	mov	r1, r6
   2917e:	f640 406d 	movw	r0, #3181	; 0xc6d
   29182:	f7ff fc7b 	bl	28a7c <bt_hci_cmd_send_sync>
		if (err) {
   29186:	4604      	mov	r4, r0
   29188:	2800      	cmp	r0, #0
   2918a:	d088      	beq.n	2909e <hci_init+0x142>
   2918c:	e76d      	b.n	2906a <hci_init+0x10e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   2918e:	aa01      	add	r2, sp, #4
   29190:	2100      	movs	r1, #0
   29192:	f242 001c 	movw	r0, #8220	; 0x201c
   29196:	f7ff fc71 	bl	28a7c <bt_hci_cmd_send_sync>
		if (err) {
   2919a:	4604      	mov	r4, r0
   2919c:	2800      	cmp	r0, #0
   2919e:	f47f af64 	bne.w	2906a <hci_init+0x10e>
		le_read_supp_states_complete(rsp);
   291a2:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   291a4:	6883      	ldr	r3, [r0, #8]
   291a6:	f853 2f01 	ldr.w	r2, [r3, #1]!
   291aa:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   291ac:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
   291b0:	f000 faf4 	bl	2979c <net_buf_unref>
   291b4:	e777      	b.n	290a6 <hci_init+0x14a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   291b6:	4811      	ldr	r0, [pc, #68]	; (291fc <hci_init+0x2a0>)
   291b8:	f7ff fcdc 	bl	28b74 <set_random_address>
		if (err) {
   291bc:	4604      	mov	r4, r0
   291be:	2800      	cmp	r0, #0
   291c0:	f43f af53 	beq.w	2906a <hci_init+0x10e>
			BT_ERR("Unable to set random address");
   291c4:	2301      	movs	r3, #1
   291c6:	f04f 0000 	mov.w	r0, #0
   291ca:	4a07      	ldr	r2, [pc, #28]	; (291e8 <hci_init+0x28c>)
   291cc:	f363 0007 	bfi	r0, r3, #0, #8
   291d0:	4b06      	ldr	r3, [pc, #24]	; (291ec <hci_init+0x290>)
   291d2:	490b      	ldr	r1, [pc, #44]	; (29200 <hci_init+0x2a4>)
   291d4:	1a9b      	subs	r3, r3, r2
   291d6:	08db      	lsrs	r3, r3, #3
   291d8:	f363 108f 	bfi	r0, r3, #6, #10
   291dc:	e7b9      	b.n	29152 <hci_init+0x1f6>
   291de:	bf00      	nop
   291e0:	20020270 	.word	0x20020270
   291e4:	200202b0 	.word	0x200202b0
   291e8:	00049788 	.word	0x00049788
   291ec:	000497d0 	.word	0x000497d0
   291f0:	0004d5be 	.word	0x0004d5be
   291f4:	20020308 	.word	0x20020308
   291f8:	0004d5e2 	.word	0x0004d5e2
   291fc:	20020271 	.word	0x20020271
   29200:	0004d601 	.word	0x0004d601

00029204 <init_work>:
{
   29204:	b510      	push	{r4, lr}
	err = hci_init();
   29206:	f7ff fea9 	bl	28f5c <hci_init>
	if (err) {
   2920a:	b908      	cbnz	r0, 29210 <init_work+0xc>
	bt_finalize_init();
   2920c:	f7ff fdfe 	bl	28e0c <bt_finalize_init>
	if (ready_cb) {
   29210:	4b03      	ldr	r3, [pc, #12]	; (29220 <init_work+0x1c>)
   29212:	681b      	ldr	r3, [r3, #0]
   29214:	b113      	cbz	r3, 2921c <init_work+0x18>
}
   29216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   2921a:	4718      	bx	r3
}
   2921c:	bd10      	pop	{r4, pc}
   2921e:	bf00      	nop
   29220:	20024bb0 	.word	0x20024bb0

00029224 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   29224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29226:	461f      	mov	r7, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   29228:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   2922c:	2b01      	cmp	r3, #1
{
   2922e:	4605      	mov	r5, r0
   29230:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   29232:	d010      	beq.n	29256 <bt_buf_get_rx+0x32>
   29234:	2805      	cmp	r0, #5
   29236:	d00e      	beq.n	29256 <bt_buf_get_rx+0x32>
   29238:	490e      	ldr	r1, [pc, #56]	; (29274 <bt_buf_get_rx+0x50>)
   2923a:	f242 233c 	movw	r3, #8764	; 0x223c
   2923e:	4a0e      	ldr	r2, [pc, #56]	; (29278 <bt_buf_get_rx+0x54>)
   29240:	480e      	ldr	r0, [pc, #56]	; (2927c <bt_buf_get_rx+0x58>)
   29242:	f01b f845 	bl	442d0 <printk>
   29246:	480e      	ldr	r0, [pc, #56]	; (29280 <bt_buf_get_rx+0x5c>)
   29248:	f01b f842 	bl	442d0 <printk>
   2924c:	f242 213c 	movw	r1, #8764	; 0x223c
   29250:	4809      	ldr	r0, [pc, #36]	; (29278 <bt_buf_get_rx+0x54>)
   29252:	f01b fa57 	bl	44704 <assert_post_action>
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
   29256:	4632      	mov	r2, r6
   29258:	463b      	mov	r3, r7
   2925a:	480a      	ldr	r0, [pc, #40]	; (29284 <bt_buf_get_rx+0x60>)
   2925c:	f01c fc3b 	bl	45ad6 <net_buf_alloc_fixed>
#endif

	if (buf) {
   29260:	4604      	mov	r4, r0
   29262:	b120      	cbz	r0, 2926e <bt_buf_get_rx+0x4a>
		net_buf_reserve(buf, BT_BUF_RESERVE);
   29264:	2100      	movs	r1, #0
   29266:	3008      	adds	r0, #8
   29268:	f000 fa3a 	bl	296e0 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
   2926c:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   2926e:	4620      	mov	r0, r4
   29270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29272:	bf00      	nop
   29274:	0004d32f 	.word	0x0004d32f
   29278:	0004d394 	.word	0x0004d394
   2927c:	0004b33b 	.word	0x0004b33b
   29280:	0004d374 	.word	0x0004d374
   29284:	20020e14 	.word	0x20020e14

00029288 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   29288:	b5d0      	push	{r4, r6, r7, lr}
   2928a:	460f      	mov	r7, r1
   2928c:	f04f 0320 	mov.w	r3, #32
   29290:	f3ef 8211 	mrs	r2, BASEPRI
   29294:	f383 8811 	msr	BASEPRI, r3
   29298:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
	bt_dev.sent_cmd = NULL;
   2929c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   2929e:	4b0d      	ldr	r3, [pc, #52]	; (292d4 <bt_buf_get_cmd_complete+0x4c>)
   292a0:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
   292a4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	__asm__ volatile(
   292a8:	f382 8811 	msr	BASEPRI, r2
   292ac:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   292b0:	b934      	cbnz	r4, 292c0 <bt_buf_get_cmd_complete+0x38>
		net_buf_reserve(buf, BT_BUF_RESERVE);

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   292b2:	4602      	mov	r2, r0
   292b4:	463b      	mov	r3, r7
}
   292b6:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   292ba:	2001      	movs	r0, #1
   292bc:	f7ff bfb2 	b.w	29224 <bt_buf_get_rx>
   292c0:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
   292c2:	f104 0008 	add.w	r0, r4, #8
   292c6:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   292c8:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
   292ca:	f000 fa09 	bl	296e0 <net_buf_simple_reserve>
}
   292ce:	4620      	mov	r0, r4
   292d0:	bdd0      	pop	{r4, r6, r7, pc}
   292d2:	bf00      	nop
   292d4:	20020270 	.word	0x20020270

000292d8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
	switch (evt) {
   292d8:	380e      	subs	r0, #14
   292da:	2801      	cmp	r0, #1
{
   292dc:	b570      	push	{r4, r5, r6, lr}
	switch (evt) {
   292de:	d805      	bhi.n	292ec <bt_buf_get_evt+0x14>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   292e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   292e4:	4610      	mov	r0, r2
   292e6:	4619      	mov	r1, r3
   292e8:	f7ff bfce 	b.w	29288 <bt_buf_get_cmd_complete>
		if (discardable) {
   292ec:	b161      	cbz	r1, 29308 <bt_buf_get_evt+0x30>
			buf = net_buf_alloc(&discardable_pool, timeout);
   292ee:	4809      	ldr	r0, [pc, #36]	; (29314 <bt_buf_get_evt+0x3c>)
   292f0:	f01c fbf1 	bl	45ad6 <net_buf_alloc_fixed>
			if (buf) {
   292f4:	4604      	mov	r4, r0
   292f6:	b128      	cbz	r0, 29304 <bt_buf_get_evt+0x2c>
				net_buf_reserve(buf, BT_BUF_RESERVE);
   292f8:	2100      	movs	r1, #0
   292fa:	3008      	adds	r0, #8
   292fc:	f000 f9f0 	bl	296e0 <net_buf_simple_reserve>
   29300:	2301      	movs	r3, #1
   29302:	7523      	strb	r3, [r4, #20]
}
   29304:	4620      	mov	r0, r4
   29306:	bd70      	pop	{r4, r5, r6, pc}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   29308:	2001      	movs	r0, #1
}
   2930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   2930e:	f7ff bf89 	b.w	29224 <bt_buf_get_rx>
   29312:	bf00      	nop
   29314:	20020dbc 	.word	0x20020dbc

00029318 <prng_reseed.constprop.0>:

#include "hci_core.h"

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
   29318:	e92d 4870 	stmdb	sp!, {r4, r5, r6, fp, lr}
	uint8_t seed[32];
	int64_t extra;
	size_t i;
	int ret;

	for (i = 0; i < (sizeof(seed) / 8); i++) {
   2931c:	2400      	movs	r4, #0
static int prng_reseed(struct tc_hmac_prng_struct *h)
   2931e:	b08d      	sub	sp, #52	; 0x34
		struct bt_hci_rp_le_rand *rp;
		struct net_buf *rsp;

		ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   29320:	aa02      	add	r2, sp, #8
   29322:	2100      	movs	r1, #0
   29324:	f242 0018 	movw	r0, #8216	; 0x2018
   29328:	f7ff fba8 	bl	28a7c <bt_hci_cmd_send_sync>
		if (ret) {
   2932c:	4605      	mov	r5, r0
   2932e:	bbb0      	cbnz	r0, 2939e <prng_reseed.constprop.0+0x86>
			return ret;
		}

		rp = (void *)rsp->data;
   29330:	9802      	ldr	r0, [sp, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29332:	ae04      	add	r6, sp, #16
   29334:	6882      	ldr	r2, [r0, #8]
   29336:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
   2933a:	f852 3f01 	ldr.w	r3, [r2, #1]!
   2933e:	f846 3034 	str.w	r3, [r6, r4, lsl #3]
   29342:	6853      	ldr	r3, [r2, #4]
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   29344:	3401      	adds	r4, #1
   29346:	604b      	str	r3, [r1, #4]
		memcpy(&seed[i * 8], rp->rand, 8);

		net_buf_unref(rsp);
   29348:	f000 fa28 	bl	2979c <net_buf_unref>
	for (i = 0; i < (sizeof(seed) / 8); i++) {
   2934c:	2c04      	cmp	r4, #4
   2934e:	d1e7      	bne.n	29320 <prng_reseed.constprop.0+0x8>
	return z_impl_k_uptime_ticks();
   29350:	f01e fe45 	bl	47fde <z_impl_k_uptime_ticks>
   29354:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29358:	fba0 bc04 	umull	fp, ip, r0, r4
   2935c:	fb04 cc01 	mla	ip, r4, r1, ip
   29360:	ea4f 32db 	mov.w	r2, fp, lsr #15
   29364:	ea42 424c 	orr.w	r2, r2, ip, lsl #17
   29368:	ea4f 33dc 	mov.w	r3, ip, lsr #15
	}

	extra = k_uptime_get();
   2936c:	e9cd 2302 	strd	r2, r3, [sp, #8]

	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   29370:	2308      	movs	r3, #8
   29372:	2220      	movs	r2, #32
   29374:	9300      	str	r3, [sp, #0]
   29376:	4631      	mov	r1, r6
   29378:	446b      	add	r3, sp
   2937a:	480b      	ldr	r0, [pc, #44]	; (293a8 <prng_reseed.constprop.0+0x90>)
   2937c:	f01c fa7e 	bl	4587c <tc_hmac_prng_reseed>
				  sizeof(extra));
	if (ret == TC_CRYPTO_FAIL) {
   29380:	b968      	cbnz	r0, 2939e <prng_reseed.constprop.0+0x86>
		BT_ERR("Failed to re-seed PRNG");
   29382:	2301      	movs	r3, #1
   29384:	4a09      	ldr	r2, [pc, #36]	; (293ac <prng_reseed.constprop.0+0x94>)
   29386:	f363 0007 	bfi	r0, r3, #0, #8
   2938a:	4b09      	ldr	r3, [pc, #36]	; (293b0 <prng_reseed.constprop.0+0x98>)
   2938c:	4909      	ldr	r1, [pc, #36]	; (293b4 <prng_reseed.constprop.0+0x9c>)
   2938e:	1a9b      	subs	r3, r3, r2
   29390:	08db      	lsrs	r3, r3, #3
   29392:	f363 108f 	bfi	r0, r3, #6, #10
   29396:	f01b f9c6 	bl	44726 <log_string_sync>
		return -EIO;
   2939a:	f06f 0504 	mvn.w	r5, #4
	}

	return 0;
}
   2939e:	4628      	mov	r0, r5
   293a0:	b00d      	add	sp, #52	; 0x34
   293a2:	e8bd 8870 	ldmia.w	sp!, {r4, r5, r6, fp, pc}
   293a6:	bf00      	nop
   293a8:	20021be8 	.word	0x20021be8
   293ac:	00049788 	.word	0x00049788
   293b0:	000497c0 	.word	0x000497c0
   293b4:	0004d644 	.word	0x0004d644

000293b8 <prng_init>:

int prng_init(void)
{
   293b8:	b513      	push	{r0, r1, r4, lr}
	struct bt_hci_rp_le_rand *rp;
	struct net_buf *rsp;
	int ret;

	/* Check first that HCI_LE_Rand is supported */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   293ba:	4b18      	ldr	r3, [pc, #96]	; (2941c <prng_init+0x64>)
   293bc:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
   293c0:	2b00      	cmp	r3, #0
   293c2:	da27      	bge.n	29414 <prng_init+0x5c>
		return -ENOTSUP;
	}

	ret = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   293c4:	aa01      	add	r2, sp, #4
   293c6:	2100      	movs	r1, #0
   293c8:	f242 0018 	movw	r0, #8216	; 0x2018
   293cc:	f7ff fb56 	bl	28a7c <bt_hci_cmd_send_sync>
	if (ret) {
   293d0:	b9d8      	cbnz	r0, 2940a <prng_init+0x52>
		return ret;
	}

	rp = (void *)rsp->data;
   293d2:	9b01      	ldr	r3, [sp, #4]

	ret = tc_hmac_prng_init(&prng, rp->rand, sizeof(rp->rand));
   293d4:	2208      	movs	r2, #8
   293d6:	6899      	ldr	r1, [r3, #8]
   293d8:	4811      	ldr	r0, [pc, #68]	; (29420 <prng_init+0x68>)
   293da:	3101      	adds	r1, #1
   293dc:	f01c fa2e 	bl	4583c <tc_hmac_prng_init>
   293e0:	4604      	mov	r4, r0

	net_buf_unref(rsp);
   293e2:	9801      	ldr	r0, [sp, #4]
   293e4:	f000 f9da 	bl	2979c <net_buf_unref>

	if (ret == TC_CRYPTO_FAIL) {
   293e8:	b98c      	cbnz	r4, 2940e <prng_init+0x56>
		BT_ERR("Failed to initialize PRNG");
   293ea:	2301      	movs	r3, #1
   293ec:	f04f 0000 	mov.w	r0, #0
   293f0:	4a0c      	ldr	r2, [pc, #48]	; (29424 <prng_init+0x6c>)
   293f2:	f363 0007 	bfi	r0, r3, #0, #8
   293f6:	4b0c      	ldr	r3, [pc, #48]	; (29428 <prng_init+0x70>)
   293f8:	490c      	ldr	r1, [pc, #48]	; (2942c <prng_init+0x74>)
   293fa:	1a9b      	subs	r3, r3, r2
   293fc:	08db      	lsrs	r3, r3, #3
   293fe:	f363 108f 	bfi	r0, r3, #6, #10
   29402:	f01b f990 	bl	44726 <log_string_sync>
		return -EIO;
   29406:	f06f 0004 	mvn.w	r0, #4
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   2940a:	b002      	add	sp, #8
   2940c:	bd10      	pop	{r4, pc}
	return prng_reseed(&prng);
   2940e:	f7ff ff83 	bl	29318 <prng_reseed.constprop.0>
   29412:	e7fa      	b.n	2940a <prng_init+0x52>
		return -ENOTSUP;
   29414:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29418:	e7f7      	b.n	2940a <prng_init+0x52>
   2941a:	bf00      	nop
   2941c:	20020270 	.word	0x20020270
   29420:	20021be8 	.word	0x20021be8
   29424:	00049788 	.word	0x00049788
   29428:	000497c0 	.word	0x000497c0
   2942c:	0004d62a 	.word	0x0004d62a

00029430 <bt_rand>:

int bt_rand(void *buf, size_t len)
{
   29430:	b538      	push	{r3, r4, r5, lr}
	int ret;

	ret = tc_hmac_prng_generate(buf, len, &prng);
   29432:	4a0a      	ldr	r2, [pc, #40]	; (2945c <bt_rand+0x2c>)
{
   29434:	4604      	mov	r4, r0
   29436:	460d      	mov	r5, r1
	ret = tc_hmac_prng_generate(buf, len, &prng);
   29438:	f01c fa39 	bl	458ae <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   2943c:	1c43      	adds	r3, r0, #1
   2943e:	d107      	bne.n	29450 <bt_rand+0x20>
		ret = prng_reseed(&prng);
   29440:	f7ff ff6a 	bl	29318 <prng_reseed.constprop.0>
		if (ret) {
   29444:	b948      	cbnz	r0, 2945a <bt_rand+0x2a>
			return ret;
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
   29446:	4a05      	ldr	r2, [pc, #20]	; (2945c <bt_rand+0x2c>)
   29448:	4629      	mov	r1, r5
   2944a:	4620      	mov	r0, r4
   2944c:	f01c fa2f 	bl	458ae <tc_hmac_prng_generate>
	}

	if (ret == TC_CRYPTO_SUCCESS) {
		return 0;
   29450:	2801      	cmp	r0, #1
   29452:	bf14      	ite	ne
   29454:	f06f 0004 	mvnne.w	r0, #4
   29458:	2000      	moveq	r0, #0
	}

	return -EIO;
}
   2945a:	bd38      	pop	{r3, r4, r5, pc}
   2945c:	20021be8 	.word	0x20021be8

00029460 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   29460:	222c      	movs	r2, #44	; 0x2c
   29462:	4b02      	ldr	r3, [pc, #8]	; (2946c <net_buf_pool_get+0xc>)
   29464:	fb02 3000 	mla	r0, r2, r0, r3
   29468:	4770      	bx	lr
   2946a:	bf00      	nop
   2946c:	20020dbc 	.word	0x20020dbc

00029470 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	return buf - pool->__bufs;
   29470:	212c      	movs	r1, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29472:	7983      	ldrb	r3, [r0, #6]
	return buf - pool->__bufs;
   29474:	4a04      	ldr	r2, [pc, #16]	; (29488 <net_buf_id+0x18>)
   29476:	fb01 2303 	mla	r3, r1, r3, r2
   2947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2947c:	1ac0      	subs	r0, r0, r3
}
   2947e:	4b03      	ldr	r3, [pc, #12]	; (2948c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   29480:	10c0      	asrs	r0, r0, #3
}
   29482:	4358      	muls	r0, r3
   29484:	4770      	bx	lr
   29486:	bf00      	nop
   29488:	20020dbc 	.word	0x20020dbc
   2948c:	aaaaaaab 	.word	0xaaaaaaab

00029490 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   29490:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29492:	242c      	movs	r4, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29494:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29496:	4a09      	ldr	r2, [pc, #36]	; (294bc <fixed_data_alloc+0x2c>)
   29498:	fb04 2303 	mla	r3, r4, r3, r2
   2949c:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	*size = MIN(fixed->data_size, *size);
   2949e:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   294a0:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   294a2:	6823      	ldr	r3, [r4, #0]
   294a4:	429a      	cmp	r2, r3
   294a6:	bf94      	ite	ls
   294a8:	600a      	strls	r2, [r1, #0]
   294aa:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   294ac:	f7ff ffe0 	bl	29470 <net_buf_id>
   294b0:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   294b4:	fb02 3000 	mla	r0, r2, r0, r3
   294b8:	bd10      	pop	{r4, pc}
   294ba:	bf00      	nop
   294bc:	20020dbc 	.word	0x20020dbc

000294c0 <net_buf_reset>:
{
   294c0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   294c2:	7943      	ldrb	r3, [r0, #5]
{
   294c4:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   294c6:	b14b      	cbz	r3, 294dc <net_buf_reset+0x1c>
   294c8:	490d      	ldr	r1, [pc, #52]	; (29500 <net_buf_reset+0x40>)
   294ca:	480e      	ldr	r0, [pc, #56]	; (29504 <net_buf_reset+0x44>)
   294cc:	234f      	movs	r3, #79	; 0x4f
   294ce:	4a0e      	ldr	r2, [pc, #56]	; (29508 <net_buf_reset+0x48>)
   294d0:	f01a fefe 	bl	442d0 <printk>
   294d4:	214f      	movs	r1, #79	; 0x4f
   294d6:	480c      	ldr	r0, [pc, #48]	; (29508 <net_buf_reset+0x48>)
   294d8:	f01b f914 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   294dc:	6823      	ldr	r3, [r4, #0]
   294de:	b14b      	cbz	r3, 294f4 <net_buf_reset+0x34>
   294e0:	490a      	ldr	r1, [pc, #40]	; (2950c <net_buf_reset+0x4c>)
   294e2:	4808      	ldr	r0, [pc, #32]	; (29504 <net_buf_reset+0x44>)
   294e4:	2350      	movs	r3, #80	; 0x50
   294e6:	4a08      	ldr	r2, [pc, #32]	; (29508 <net_buf_reset+0x48>)
   294e8:	f01a fef2 	bl	442d0 <printk>
   294ec:	2150      	movs	r1, #80	; 0x50
   294ee:	4806      	ldr	r0, [pc, #24]	; (29508 <net_buf_reset+0x48>)
   294f0:	f01b f908 	bl	44704 <assert_post_action>
	buf->len  = 0U;
   294f4:	2300      	movs	r3, #0
   294f6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   294f8:	6923      	ldr	r3, [r4, #16]
   294fa:	60a3      	str	r3, [r4, #8]
}
   294fc:	bd10      	pop	{r4, pc}
   294fe:	bf00      	nop
   29500:	0004d6b0 	.word	0x0004d6b0
   29504:	0004b33b 	.word	0x0004b33b
   29508:	0004d68c 	.word	0x0004d68c
   2950c:	0004d6c1 	.word	0x0004d6c1

00029510 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   29510:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29514:	4605      	mov	r5, r0
   29516:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   29518:	4610      	mov	r0, r2
   2951a:	4619      	mov	r1, r3
{
   2951c:	4616      	mov	r6, r2
   2951e:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   29520:	f01e fd5f 	bl	47fe2 <z_timeout_end_calc>
   29524:	4680      	mov	r8, r0
   29526:	4689      	mov	r9, r1
	struct net_buf *buf;
	unsigned int key;

	__ASSERT_NO_MSG(pool);
   29528:	b94d      	cbnz	r5, 2953e <net_buf_alloc_len+0x2e>
   2952a:	494c      	ldr	r1, [pc, #304]	; (2965c <net_buf_alloc_len+0x14c>)
   2952c:	484c      	ldr	r0, [pc, #304]	; (29660 <net_buf_alloc_len+0x150>)
   2952e:	23f1      	movs	r3, #241	; 0xf1
   29530:	4a4c      	ldr	r2, [pc, #304]	; (29664 <net_buf_alloc_len+0x154>)
   29532:	f01a fecd 	bl	442d0 <printk>
   29536:	21f1      	movs	r1, #241	; 0xf1
   29538:	484a      	ldr	r0, [pc, #296]	; (29664 <net_buf_alloc_len+0x154>)
   2953a:	f01b f8e3 	bl	44704 <assert_post_action>
	__asm__ volatile(
   2953e:	f04f 0320 	mov.w	r3, #32
   29542:	f3ef 8a11 	mrs	sl, BASEPRI
   29546:	f383 8811 	msr	BASEPRI, r3
   2954a:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2954e:	8beb      	ldrh	r3, [r5, #30]
   29550:	2b00      	cmp	r3, #0
   29552:	d054      	beq.n	295fe <net_buf_alloc_len+0xee>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   29554:	8baa      	ldrh	r2, [r5, #28]
   29556:	429a      	cmp	r2, r3
   29558:	d93d      	bls.n	295d6 <net_buf_alloc_len+0xc6>
	return z_impl_k_queue_get(queue, timeout);
   2955a:	2200      	movs	r2, #0
   2955c:	2300      	movs	r3, #0
   2955e:	4628      	mov	r0, r5
   29560:	f015 fffa 	bl	3f558 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   29564:	4604      	mov	r4, r0
   29566:	2800      	cmp	r0, #0
   29568:	d035      	beq.n	295d6 <net_buf_alloc_len+0xc6>
	__asm__ volatile(
   2956a:	f38a 8811 	msr	BASEPRI, sl
   2956e:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   29572:	9d01      	ldr	r5, [sp, #4]
   29574:	2d00      	cmp	r5, #0
   29576:	d06e      	beq.n	29656 <net_buf_alloc_len+0x146>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29578:	ea56 0307 	orrs.w	r3, r6, r7
   2957c:	d010      	beq.n	295a0 <net_buf_alloc_len+0x90>
   2957e:	1c7b      	adds	r3, r7, #1
   29580:	bf08      	it	eq
   29582:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   29586:	d00b      	beq.n	295a0 <net_buf_alloc_len+0x90>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   29588:	f018 f820 	bl	415cc <z_tick_get>
   2958c:	ebb8 0600 	subs.w	r6, r8, r0
   29590:	eb69 0701 	sbc.w	r7, r9, r1
   29594:	2e00      	cmp	r6, #0
   29596:	f177 0300 	sbcs.w	r3, r7, #0
   2959a:	bfbc      	itt	lt
   2959c:	2600      	movlt	r6, #0
   2959e:	2700      	movlt	r7, #0
	return pool->alloc->cb->alloc(buf, size, timeout);
   295a0:	f04f 092c 	mov.w	r9, #44	; 0x2c
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   295a4:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   295a6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 29668 <net_buf_alloc_len+0x158>
   295aa:	4632      	mov	r2, r6
   295ac:	fb09 8303 	mla	r3, r9, r3, r8
   295b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   295b2:	a901      	add	r1, sp, #4
   295b4:	681b      	ldr	r3, [r3, #0]
   295b6:	4620      	mov	r0, r4
   295b8:	f8d3 a000 	ldr.w	sl, [r3]
   295bc:	463b      	mov	r3, r7
   295be:	47d0      	blx	sl
   295c0:	4606      	mov	r6, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   295c2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   295c4:	bb58      	cbnz	r0, 2961e <net_buf_alloc_len+0x10e>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   295c6:	79a0      	ldrb	r0, [r4, #6]
   295c8:	4621      	mov	r1, r4
   295ca:	fb00 8009 	mla	r0, r0, r9, r8
   295ce:	f01e fc38 	bl	47e42 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   295d2:	4634      	mov	r4, r6
   295d4:	e01f      	b.n	29616 <net_buf_alloc_len+0x106>
		uninit_count = pool->uninit_count--;
   295d6:	8beb      	ldrh	r3, [r5, #30]
   295d8:	1e5a      	subs	r2, r3, #1
   295da:	83ea      	strh	r2, [r5, #30]
   295dc:	f38a 8811 	msr	BASEPRI, sl
   295e0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   295e4:	2218      	movs	r2, #24
   295e6:	8bac      	ldrh	r4, [r5, #28]
   295e8:	1ae4      	subs	r4, r4, r3
   295ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   295ec:	fb02 3404 	mla	r4, r2, r4, r3
	return pool - _net_buf_pool_list;
   295f0:	4b1d      	ldr	r3, [pc, #116]	; (29668 <net_buf_alloc_len+0x158>)
   295f2:	1aed      	subs	r5, r5, r3
   295f4:	4b1d      	ldr	r3, [pc, #116]	; (2966c <net_buf_alloc_len+0x15c>)
   295f6:	10ad      	asrs	r5, r5, #2
   295f8:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   295fa:	71a5      	strb	r5, [r4, #6]
		goto success;
   295fc:	e7b9      	b.n	29572 <net_buf_alloc_len+0x62>
   295fe:	f38a 8811 	msr	BASEPRI, sl
   29602:	f3bf 8f6f 	isb	sy
   29606:	4632      	mov	r2, r6
   29608:	463b      	mov	r3, r7
   2960a:	4628      	mov	r0, r5
   2960c:	f015 ffa4 	bl	3f558 <z_impl_k_queue_get>
	if (!buf) {
   29610:	4604      	mov	r4, r0
   29612:	2800      	cmp	r0, #0
   29614:	d1ad      	bne.n	29572 <net_buf_alloc_len+0x62>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   29616:	4620      	mov	r0, r4
   29618:	b002      	add	sp, #8
   2961a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		NET_BUF_ASSERT(req_size <= size);
   2961e:	9b01      	ldr	r3, [sp, #4]
   29620:	429d      	cmp	r5, r3
   29622:	d90e      	bls.n	29642 <net_buf_alloc_len+0x132>
   29624:	4912      	ldr	r1, [pc, #72]	; (29670 <net_buf_alloc_len+0x160>)
   29626:	f240 1351 	movw	r3, #337	; 0x151
   2962a:	4a0e      	ldr	r2, [pc, #56]	; (29664 <net_buf_alloc_len+0x154>)
   2962c:	480c      	ldr	r0, [pc, #48]	; (29660 <net_buf_alloc_len+0x150>)
   2962e:	f01a fe4f 	bl	442d0 <printk>
   29632:	4810      	ldr	r0, [pc, #64]	; (29674 <net_buf_alloc_len+0x164>)
   29634:	f01a fe4c 	bl	442d0 <printk>
   29638:	f240 1151 	movw	r1, #337	; 0x151
   2963c:	4809      	ldr	r0, [pc, #36]	; (29664 <net_buf_alloc_len+0x154>)
   2963e:	f01b f861 	bl	44704 <assert_post_action>
	buf->frags = NULL;
   29642:	2300      	movs	r3, #0
   29644:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   29646:	2301      	movs	r3, #1
   29648:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   2964a:	9b01      	ldr	r3, [sp, #4]
	net_buf_reset(buf);
   2964c:	4620      	mov	r0, r4
	buf->size  = size;
   2964e:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   29650:	f7ff ff36 	bl	294c0 <net_buf_reset>
	return buf;
   29654:	e7df      	b.n	29616 <net_buf_alloc_len+0x106>
		buf->__buf = NULL;
   29656:	6125      	str	r5, [r4, #16]
   29658:	e7f3      	b.n	29642 <net_buf_alloc_len+0x132>
   2965a:	bf00      	nop
   2965c:	0004d665 	.word	0x0004d665
   29660:	0004b33b 	.word	0x0004b33b
   29664:	0004d68c 	.word	0x0004d68c
   29668:	20020dbc 	.word	0x20020dbc
   2966c:	ba2e8ba3 	.word	0xba2e8ba3
   29670:	0004d66a 	.word	0x0004d66a
   29674:	0004c55b 	.word	0x0004c55b

00029678 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   29678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2967c:	4607      	mov	r7, r0
   2967e:	f015 ff6b 	bl	3f558 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   29682:	4605      	mov	r5, r0
   29684:	b150      	cbz	r0, 2969c <net_buf_get+0x24>
   29686:	4604      	mov	r4, r0
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   29688:	4e12      	ldr	r6, [pc, #72]	; (296d4 <net_buf_get+0x5c>)
   2968a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 296d8 <net_buf_get+0x60>
   2968e:	f8df 904c 	ldr.w	r9, [pc, #76]	; 296dc <net_buf_get+0x64>
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29692:	7963      	ldrb	r3, [r4, #5]
   29694:	f013 0301 	ands.w	r3, r3, #1
   29698:	d103      	bne.n	296a2 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   2969a:	6023      	str	r3, [r4, #0]

	return buf;
}
   2969c:	4628      	mov	r0, r5
   2969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   296a2:	2200      	movs	r2, #0
   296a4:	2300      	movs	r3, #0
   296a6:	4638      	mov	r0, r7
   296a8:	f015 ff56 	bl	3f558 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   296ac:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   296ae:	b958      	cbnz	r0, 296c8 <net_buf_get+0x50>
   296b0:	4641      	mov	r1, r8
   296b2:	4648      	mov	r0, r9
   296b4:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   296b8:	4632      	mov	r2, r6
   296ba:	f01a fe09 	bl	442d0 <printk>
   296be:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   296c2:	4630      	mov	r0, r6
   296c4:	f01b f81e 	bl	44704 <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   296c8:	7963      	ldrb	r3, [r4, #5]
   296ca:	f023 0301 	bic.w	r3, r3, #1
   296ce:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   296d0:	6824      	ldr	r4, [r4, #0]
   296d2:	e7de      	b.n	29692 <net_buf_get+0x1a>
   296d4:	0004d68c 	.word	0x0004d68c
   296d8:	0004d67b 	.word	0x0004d67b
   296dc:	0004b33b 	.word	0x0004b33b

000296e0 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   296e0:	b538      	push	{r3, r4, r5, lr}
   296e2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   296e4:	4604      	mov	r4, r0
   296e6:	b958      	cbnz	r0, 29700 <net_buf_simple_reserve+0x20>
   296e8:	490e      	ldr	r1, [pc, #56]	; (29724 <net_buf_simple_reserve+0x44>)
   296ea:	480f      	ldr	r0, [pc, #60]	; (29728 <net_buf_simple_reserve+0x48>)
   296ec:	f240 13bf 	movw	r3, #447	; 0x1bf
   296f0:	4a0e      	ldr	r2, [pc, #56]	; (2972c <net_buf_simple_reserve+0x4c>)
   296f2:	f01a fded 	bl	442d0 <printk>
   296f6:	f240 11bf 	movw	r1, #447	; 0x1bf
   296fa:	480c      	ldr	r0, [pc, #48]	; (2972c <net_buf_simple_reserve+0x4c>)
   296fc:	f01b f802 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   29700:	88a3      	ldrh	r3, [r4, #4]
   29702:	b15b      	cbz	r3, 2971c <net_buf_simple_reserve+0x3c>
   29704:	490a      	ldr	r1, [pc, #40]	; (29730 <net_buf_simple_reserve+0x50>)
   29706:	4808      	ldr	r0, [pc, #32]	; (29728 <net_buf_simple_reserve+0x48>)
   29708:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   2970c:	4a07      	ldr	r2, [pc, #28]	; (2972c <net_buf_simple_reserve+0x4c>)
   2970e:	f01a fddf 	bl	442d0 <printk>
   29712:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   29716:	4805      	ldr	r0, [pc, #20]	; (2972c <net_buf_simple_reserve+0x4c>)
   29718:	f01a fff4 	bl	44704 <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2971c:	68a1      	ldr	r1, [r4, #8]
   2971e:	4429      	add	r1, r5
   29720:	6021      	str	r1, [r4, #0]
}
   29722:	bd38      	pop	{r3, r4, r5, pc}
   29724:	0004d722 	.word	0x0004d722
   29728:	0004b33b 	.word	0x0004b33b
   2972c:	0004d68c 	.word	0x0004d68c
   29730:	0004d70f 	.word	0x0004d70f

00029734 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   29734:	b538      	push	{r3, r4, r5, lr}
   29736:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   29738:	4605      	mov	r5, r0
   2973a:	b958      	cbnz	r0, 29754 <net_buf_put+0x20>
   2973c:	4913      	ldr	r1, [pc, #76]	; (2978c <net_buf_put+0x58>)
   2973e:	4814      	ldr	r0, [pc, #80]	; (29790 <net_buf_put+0x5c>)
   29740:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   29744:	4a13      	ldr	r2, [pc, #76]	; (29794 <net_buf_put+0x60>)
   29746:	f01a fdc3 	bl	442d0 <printk>
   2974a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   2974e:	4811      	ldr	r0, [pc, #68]	; (29794 <net_buf_put+0x60>)
   29750:	f01a ffd8 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   29754:	b95c      	cbnz	r4, 2976e <net_buf_put+0x3a>
   29756:	4910      	ldr	r1, [pc, #64]	; (29798 <net_buf_put+0x64>)
   29758:	480d      	ldr	r0, [pc, #52]	; (29790 <net_buf_put+0x5c>)
   2975a:	f240 13fd 	movw	r3, #509	; 0x1fd
   2975e:	4a0d      	ldr	r2, [pc, #52]	; (29794 <net_buf_put+0x60>)
   29760:	f01a fdb6 	bl	442d0 <printk>
   29764:	f240 11fd 	movw	r1, #509	; 0x1fd
   29768:	480a      	ldr	r0, [pc, #40]	; (29794 <net_buf_put+0x60>)
   2976a:	f01a ffcb 	bl	44704 <assert_post_action>
{
   2976e:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   29770:	6811      	ldr	r1, [r2, #0]
   29772:	b929      	cbnz	r1, 29780 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   29774:	4621      	mov	r1, r4
   29776:	4628      	mov	r0, r5
}
   29778:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   2977c:	f015 be8e 	b.w	3f49c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   29780:	7953      	ldrb	r3, [r2, #5]
   29782:	f043 0301 	orr.w	r3, r3, #1
   29786:	7153      	strb	r3, [r2, #5]
   29788:	460a      	mov	r2, r1
   2978a:	e7f1      	b.n	29770 <net_buf_put+0x3c>
   2978c:	0004d687 	.word	0x0004d687
   29790:	0004b33b 	.word	0x0004b33b
   29794:	0004d68c 	.word	0x0004d68c
   29798:	0004d722 	.word	0x0004d722

0002979c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   297a0:	4604      	mov	r4, r0
   297a2:	b328      	cbz	r0, 297f0 <net_buf_unref+0x54>
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   297a4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   297a6:	272c      	movs	r7, #44	; 0x2c
   297a8:	4d1b      	ldr	r5, [pc, #108]	; (29818 <net_buf_unref+0x7c>)
		if (--buf->ref > 0) {
   297aa:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   297ac:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   297b0:	3b01      	subs	r3, #1
   297b2:	b2db      	uxtb	r3, r3
   297b4:	7123      	strb	r3, [r4, #4]
   297b6:	b9cb      	cbnz	r3, 297ec <net_buf_unref+0x50>
		if (buf->__buf) {
   297b8:	6921      	ldr	r1, [r4, #16]
   297ba:	b159      	cbz	r1, 297d4 <net_buf_unref+0x38>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   297bc:	7963      	ldrb	r3, [r4, #5]
   297be:	079b      	lsls	r3, r3, #30
   297c0:	d407      	bmi.n	297d2 <net_buf_unref+0x36>
	pool->alloc->cb->unref(buf, data);
   297c2:	79a3      	ldrb	r3, [r4, #6]
   297c4:	4620      	mov	r0, r4
   297c6:	fb07 5303 	mla	r3, r7, r3, r5
   297ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   297cc:	681b      	ldr	r3, [r3, #0]
   297ce:	689b      	ldr	r3, [r3, #8]
   297d0:	4798      	blx	r3
			buf->__buf = NULL;
   297d2:	6126      	str	r6, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   297d4:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   297d6:	60a6      	str	r6, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		__ASSERT_NO_MSG(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   297d8:	fb07 5300 	mla	r3, r7, r0, r5
   297dc:	6a1b      	ldr	r3, [r3, #32]
		buf->frags = NULL;
   297de:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   297e0:	b1a3      	cbz	r3, 2980c <net_buf_unref+0x70>
			pool->destroy(buf);
   297e2:	4620      	mov	r0, r4
   297e4:	4798      	blx	r3
	while (buf) {
   297e6:	4644      	mov	r4, r8
   297e8:	2c00      	cmp	r4, #0
   297ea:	d1de      	bne.n	297aa <net_buf_unref+0xe>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   297ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   297f0:	490a      	ldr	r1, [pc, #40]	; (2981c <net_buf_unref+0x80>)
   297f2:	480b      	ldr	r0, [pc, #44]	; (29820 <net_buf_unref+0x84>)
   297f4:	f44f 7303 	mov.w	r3, #524	; 0x20c
   297f8:	4a0a      	ldr	r2, [pc, #40]	; (29824 <net_buf_unref+0x88>)
   297fa:	f01a fd69 	bl	442d0 <printk>
}
   297fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   29802:	f44f 7103 	mov.w	r1, #524	; 0x20c
   29806:	4807      	ldr	r0, [pc, #28]	; (29824 <net_buf_unref+0x88>)
   29808:	f01a bf7c 	b.w	44704 <assert_post_action>
   2980c:	4621      	mov	r1, r4
   2980e:	fb00 5007 	mla	r0, r0, r7, r5
   29812:	f01e fb16 	bl	47e42 <k_queue_prepend>
   29816:	e7e6      	b.n	297e6 <net_buf_unref+0x4a>
   29818:	20020dbc 	.word	0x20020dbc
   2981c:	0004d722 	.word	0x0004d722
   29820:	0004b33b 	.word	0x0004b33b
   29824:	0004d68c 	.word	0x0004d68c

00029828 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   29828:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   2982a:	4604      	mov	r4, r0
   2982c:	b958      	cbnz	r0, 29846 <net_buf_ref+0x1e>
   2982e:	4908      	ldr	r1, [pc, #32]	; (29850 <net_buf_ref+0x28>)
   29830:	4808      	ldr	r0, [pc, #32]	; (29854 <net_buf_ref+0x2c>)
   29832:	f240 233b 	movw	r3, #571	; 0x23b
   29836:	4a08      	ldr	r2, [pc, #32]	; (29858 <net_buf_ref+0x30>)
   29838:	f01a fd4a 	bl	442d0 <printk>
   2983c:	f240 213b 	movw	r1, #571	; 0x23b
   29840:	4805      	ldr	r0, [pc, #20]	; (29858 <net_buf_ref+0x30>)
   29842:	f01a ff5f 	bl	44704 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29846:	7923      	ldrb	r3, [r4, #4]
	return buf;
}
   29848:	4620      	mov	r0, r4
	buf->ref++;
   2984a:	3301      	adds	r3, #1
   2984c:	7123      	strb	r3, [r4, #4]
}
   2984e:	bd10      	pop	{r4, pc}
   29850:	0004d722 	.word	0x0004d722
   29854:	0004b33b 	.word	0x0004b33b
   29858:	0004d68c 	.word	0x0004d68c

0002985c <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2985c:	b538      	push	{r3, r4, r5, lr}
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   2985e:	8883      	ldrh	r3, [r0, #4]
{
   29860:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->len >= len);
   29862:	428b      	cmp	r3, r1
{
   29864:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   29866:	d20b      	bcs.n	29880 <net_buf_simple_pull+0x24>
   29868:	4909      	ldr	r1, [pc, #36]	; (29890 <net_buf_simple_pull+0x34>)
   2986a:	480a      	ldr	r0, [pc, #40]	; (29894 <net_buf_simple_pull+0x38>)
   2986c:	f240 33d5 	movw	r3, #981	; 0x3d5
   29870:	4a09      	ldr	r2, [pc, #36]	; (29898 <net_buf_simple_pull+0x3c>)
   29872:	f01a fd2d 	bl	442d0 <printk>
   29876:	f240 31d5 	movw	r1, #981	; 0x3d5
   2987a:	4807      	ldr	r0, [pc, #28]	; (29898 <net_buf_simple_pull+0x3c>)
   2987c:	f01a ff42 	bl	44704 <assert_post_action>

	buf->len -= len;
   29880:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   29882:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   29884:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   29886:	4428      	add	r0, r5
	buf->len -= len;
   29888:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   2988a:	6020      	str	r0, [r4, #0]
}
   2988c:	bd38      	pop	{r3, r4, r5, pc}
   2988e:	bf00      	nop
   29890:	0004d6ff 	.word	0x0004d6ff
   29894:	0004b33b 	.word	0x0004b33b
   29898:	0004d68c 	.word	0x0004d68c

0002989c <net_buf_simple_pull_mem>:
{
	void *data = buf->data;

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   2989c:	8883      	ldrh	r3, [r0, #4]
{
   2989e:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   298a0:	428b      	cmp	r3, r1
{
   298a2:	4604      	mov	r4, r0
   298a4:	460d      	mov	r5, r1
	void *data = buf->data;
   298a6:	6806      	ldr	r6, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   298a8:	d20b      	bcs.n	298c2 <net_buf_simple_pull_mem+0x26>
   298aa:	490a      	ldr	r1, [pc, #40]	; (298d4 <net_buf_simple_pull_mem+0x38>)
   298ac:	480a      	ldr	r0, [pc, #40]	; (298d8 <net_buf_simple_pull_mem+0x3c>)
   298ae:	f240 33e1 	movw	r3, #993	; 0x3e1
   298b2:	4a0a      	ldr	r2, [pc, #40]	; (298dc <net_buf_simple_pull_mem+0x40>)
   298b4:	f01a fd0c 	bl	442d0 <printk>
   298b8:	f240 31e1 	movw	r1, #993	; 0x3e1
   298bc:	4807      	ldr	r0, [pc, #28]	; (298dc <net_buf_simple_pull_mem+0x40>)
   298be:	f01a ff21 	bl	44704 <assert_post_action>

	buf->len -= len;
   298c2:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   298c4:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   298c6:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   298c8:	4429      	add	r1, r5
	buf->len -= len;
   298ca:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   298cc:	6021      	str	r1, [r4, #0]

	return data;
}
   298ce:	4630      	mov	r0, r6
   298d0:	bd70      	pop	{r4, r5, r6, pc}
   298d2:	bf00      	nop
   298d4:	0004d6ff 	.word	0x0004d6ff
   298d8:	0004b33b 	.word	0x0004b33b
   298dc:	0004d68c 	.word	0x0004d68c

000298e0 <net_buf_simple_add>:
{
   298e0:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   298e2:	6803      	ldr	r3, [r0, #0]
   298e4:	8886      	ldrh	r6, [r0, #4]
   298e6:	4604      	mov	r4, r0
   298e8:	460d      	mov	r5, r1
   298ea:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   298ec:	f01c f8fc 	bl	45ae8 <net_buf_simple_tailroom>
   298f0:	4288      	cmp	r0, r1
   298f2:	d20b      	bcs.n	2990c <net_buf_simple_add+0x2c>
   298f4:	4908      	ldr	r1, [pc, #32]	; (29918 <net_buf_simple_add+0x38>)
   298f6:	4809      	ldr	r0, [pc, #36]	; (2991c <net_buf_simple_add+0x3c>)
   298f8:	f240 3319 	movw	r3, #793	; 0x319
   298fc:	4a08      	ldr	r2, [pc, #32]	; (29920 <net_buf_simple_add+0x40>)
   298fe:	f01a fce7 	bl	442d0 <printk>
   29902:	f240 3119 	movw	r1, #793	; 0x319
   29906:	4806      	ldr	r0, [pc, #24]	; (29920 <net_buf_simple_add+0x40>)
   29908:	f01a fefc 	bl	44704 <assert_post_action>
	buf->len += len;
   2990c:	88a3      	ldrh	r3, [r4, #4]
}
   2990e:	4630      	mov	r0, r6
	buf->len += len;
   29910:	441d      	add	r5, r3
   29912:	80a5      	strh	r5, [r4, #4]
}
   29914:	bd70      	pop	{r4, r5, r6, pc}
   29916:	bf00      	nop
   29918:	0004d6db 	.word	0x0004d6db
   2991c:	0004b33b 	.word	0x0004b33b
   29920:	0004d68c 	.word	0x0004d68c

00029924 <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   29924:	b538      	push	{r3, r4, r5, lr}
   29926:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   29928:	4604      	mov	r4, r0
   2992a:	b970      	cbnz	r0, 2994a <net_if_flag_is_set+0x26>
   2992c:	490b      	ldr	r1, [pc, #44]	; (2995c <net_if_flag_is_set+0x38>)
   2992e:	f240 2312 	movw	r3, #530	; 0x212
   29932:	4a0b      	ldr	r2, [pc, #44]	; (29960 <net_if_flag_is_set+0x3c>)
   29934:	480b      	ldr	r0, [pc, #44]	; (29964 <net_if_flag_is_set+0x40>)
   29936:	f01a fccb 	bl	442d0 <printk>
   2993a:	480b      	ldr	r0, [pc, #44]	; (29968 <net_if_flag_is_set+0x44>)
   2993c:	f01a fcc8 	bl	442d0 <printk>
   29940:	f240 2112 	movw	r1, #530	; 0x212
   29944:	4806      	ldr	r0, [pc, #24]	; (29960 <net_if_flag_is_set+0x3c>)
   29946:	f01a fedd 	bl	44704 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2994a:	6823      	ldr	r3, [r4, #0]
   2994c:	330c      	adds	r3, #12
   2994e:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29952:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   29954:	f000 0001 	and.w	r0, r0, #1
   29958:	bd38      	pop	{r3, r4, r5, pc}
   2995a:	bf00      	nop
   2995c:	0004d74e 	.word	0x0004d74e
   29960:	0004d726 	.word	0x0004d726
   29964:	0004b33b 	.word	0x0004b33b
   29968:	0004c55b 	.word	0x0004c55b

0002996c <net_if_flag_set.constprop.24>:
static inline void net_if_flag_set(struct net_if *iface,
   2996c:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   2996e:	4604      	mov	r4, r0
   29970:	b970      	cbnz	r0, 29990 <net_if_flag_set.constprop.24+0x24>
   29972:	490d      	ldr	r1, [pc, #52]	; (299a8 <net_if_flag_set.constprop.24+0x3c>)
   29974:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
   29978:	4a0c      	ldr	r2, [pc, #48]	; (299ac <net_if_flag_set.constprop.24+0x40>)
   2997a:	480d      	ldr	r0, [pc, #52]	; (299b0 <net_if_flag_set.constprop.24+0x44>)
   2997c:	f01a fca8 	bl	442d0 <printk>
   29980:	480c      	ldr	r0, [pc, #48]	; (299b4 <net_if_flag_set.constprop.24+0x48>)
   29982:	f01a fca5 	bl	442d0 <printk>
   29986:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   2998a:	4808      	ldr	r0, [pc, #32]	; (299ac <net_if_flag_set.constprop.24+0x40>)
   2998c:	f01a feba 	bl	44704 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29990:	6823      	ldr	r3, [r4, #0]
   29992:	330c      	adds	r3, #12
   29994:	e8d3 2fef 	ldaex	r2, [r3]
   29998:	f042 0201 	orr.w	r2, r2, #1
   2999c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   299a0:	2900      	cmp	r1, #0
   299a2:	d1f7      	bne.n	29994 <net_if_flag_set.constprop.24+0x28>
}
   299a4:	bd10      	pop	{r4, pc}
   299a6:	bf00      	nop
   299a8:	0004d74e 	.word	0x0004d74e
   299ac:	0004d726 	.word	0x0004d726
   299b0:	0004b33b 	.word	0x0004b33b
   299b4:	0004c55b 	.word	0x0004c55b

000299b8 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   299b8:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   299ba:	2100      	movs	r1, #0
{
   299bc:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   299be:	f7ff ffb1 	bl	29924 <net_if_flag_is_set>
   299c2:	b928      	cbnz	r0, 299d0 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   299c4:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   299c6:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   299c8:	7e9b      	ldrb	r3, [r3, #26]
   299ca:	b11b      	cbz	r3, 299d4 <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   299cc:	f7ff ffce 	bl	2996c <net_if_flag_set.constprop.24>
		return 0;
   299d0:	2000      	movs	r0, #0
   299d2:	e023      	b.n	29a1c <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   299d4:	f01c f8a3 	bl	45b1e <net_if_l2>
   299d8:	b9c0      	cbnz	r0, 29a0c <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   299da:	682b      	ldr	r3, [r5, #0]
   299dc:	691b      	ldr	r3, [r3, #16]
   299de:	b973      	cbnz	r3, 299fe <net_if_up+0x46>
   299e0:	490f      	ldr	r1, [pc, #60]	; (29a20 <net_if_up+0x68>)
   299e2:	f640 53fd 	movw	r3, #3581	; 0xdfd
   299e6:	4a0f      	ldr	r2, [pc, #60]	; (29a24 <net_if_up+0x6c>)
   299e8:	480f      	ldr	r0, [pc, #60]	; (29a28 <net_if_up+0x70>)
   299ea:	f01a fc71 	bl	442d0 <printk>
   299ee:	480f      	ldr	r0, [pc, #60]	; (29a2c <net_if_up+0x74>)
   299f0:	f01a fc6e 	bl	442d0 <printk>
   299f4:	f640 51fd 	movw	r1, #3581	; 0xdfd
   299f8:	480a      	ldr	r0, [pc, #40]	; (29a24 <net_if_up+0x6c>)
   299fa:	f01a fe83 	bl	44704 <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   299fe:	4628      	mov	r0, r5
   29a00:	f7ff ffb4 	bl	2996c <net_if_flag_set.constprop.24>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   29a04:	4628      	mov	r0, r5
   29a06:	f01c f88f 	bl	45b28 <l2_flags_get>
   29a0a:	e7e1      	b.n	299d0 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   29a0c:	6883      	ldr	r3, [r0, #8]
   29a0e:	2b00      	cmp	r3, #0
   29a10:	d0e3      	beq.n	299da <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   29a12:	2101      	movs	r1, #1
   29a14:	4628      	mov	r0, r5
   29a16:	4798      	blx	r3
	if (status < 0) {
   29a18:	2800      	cmp	r0, #0
   29a1a:	dade      	bge.n	299da <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   29a1c:	bd38      	pop	{r3, r4, r5, pc}
   29a1e:	bf00      	nop
   29a20:	0004d76e 	.word	0x0004d76e
   29a24:	0004d79f 	.word	0x0004d79f
   29a28:	0004b33b 	.word	0x0004b33b
   29a2c:	0004c55b 	.word	0x0004c55b

00029a30 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   29a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   29a34:	4e12      	ldr	r6, [pc, #72]	; (29a80 <net_if_init+0x50>)
   29a36:	4c13      	ldr	r4, [pc, #76]	; (29a84 <net_if_init+0x54>)
   29a38:	46b0      	mov	r8, r6
   29a3a:	4f13      	ldr	r7, [pc, #76]	; (29a88 <net_if_init+0x58>)
   29a3c:	42b4      	cmp	r4, r6
   29a3e:	4625      	mov	r5, r4
   29a40:	d90e      	bls.n	29a60 <net_if_init+0x30>
   29a42:	4912      	ldr	r1, [pc, #72]	; (29a8c <net_if_init+0x5c>)
   29a44:	f640 63dc 	movw	r3, #3804	; 0xedc
   29a48:	463a      	mov	r2, r7
   29a4a:	4811      	ldr	r0, [pc, #68]	; (29a90 <net_if_init+0x60>)
   29a4c:	f01a fc40 	bl	442d0 <printk>
   29a50:	4810      	ldr	r0, [pc, #64]	; (29a94 <net_if_init+0x64>)
   29a52:	f01a fc3d 	bl	442d0 <printk>
   29a56:	f640 61dc 	movw	r1, #3804	; 0xedc
   29a5a:	4638      	mov	r0, r7
   29a5c:	f01a fe52 	bl	44704 <assert_post_action>
   29a60:	4544      	cmp	r4, r8
   29a62:	d301      	bcc.n	29a68 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   29a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   29a68:	682b      	ldr	r3, [r5, #0]
   29a6a:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   29a6c:	681b      	ldr	r3, [r3, #0]
   29a6e:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   29a70:	2b00      	cmp	r3, #0
   29a72:	d0e3      	beq.n	29a3c <net_if_init+0xc>
   29a74:	681b      	ldr	r3, [r3, #0]
   29a76:	2b00      	cmp	r3, #0
   29a78:	d0e0      	beq.n	29a3c <net_if_init+0xc>
	api->init(iface);
   29a7a:	4628      	mov	r0, r5
   29a7c:	4798      	blx	r3
		if_count++;
   29a7e:	e7dd      	b.n	29a3c <net_if_init+0xc>
   29a80:	20020e44 	.word	0x20020e44
   29a84:	20020e40 	.word	0x20020e40
   29a88:	0004d79f 	.word	0x0004d79f
   29a8c:	0004d754 	.word	0x0004d754
   29a90:	0004b33b 	.word	0x0004b33b
   29a94:	0004c5d9 	.word	0x0004c5d9

00029a98 <net_if_post_init>:

void net_if_post_init(void)
{
   29a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   29a9a:	4d11      	ldr	r5, [pc, #68]	; (29ae0 <net_if_post_init+0x48>)
   29a9c:	4c11      	ldr	r4, [pc, #68]	; (29ae4 <net_if_post_init+0x4c>)
   29a9e:	462f      	mov	r7, r5
   29aa0:	4e11      	ldr	r6, [pc, #68]	; (29ae8 <net_if_post_init+0x50>)
   29aa2:	42ac      	cmp	r4, r5
   29aa4:	d90e      	bls.n	29ac4 <net_if_post_init+0x2c>
   29aa6:	4911      	ldr	r1, [pc, #68]	; (29aec <net_if_post_init+0x54>)
   29aa8:	f640 730b 	movw	r3, #3851	; 0xf0b
   29aac:	4632      	mov	r2, r6
   29aae:	4810      	ldr	r0, [pc, #64]	; (29af0 <net_if_post_init+0x58>)
   29ab0:	f01a fc0e 	bl	442d0 <printk>
   29ab4:	480f      	ldr	r0, [pc, #60]	; (29af4 <net_if_post_init+0x5c>)
   29ab6:	f01a fc0b 	bl	442d0 <printk>
   29aba:	f640 710b 	movw	r1, #3851	; 0xf0b
   29abe:	4630      	mov	r0, r6
   29ac0:	f01a fe20 	bl	44704 <assert_post_action>
   29ac4:	42bc      	cmp	r4, r7
   29ac6:	d300      	bcc.n	29aca <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   29ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   29aca:	2103      	movs	r1, #3
   29acc:	4620      	mov	r0, r4
   29ace:	f7ff ff29 	bl	29924 <net_if_flag_is_set>
   29ad2:	b910      	cbnz	r0, 29ada <net_if_post_init+0x42>
			net_if_up(iface);
   29ad4:	4620      	mov	r0, r4
   29ad6:	f7ff ff6f 	bl	299b8 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   29ada:	3404      	adds	r4, #4
   29adc:	e7e1      	b.n	29aa2 <net_if_post_init+0xa>
   29ade:	bf00      	nop
   29ae0:	20020e44 	.word	0x20020e44
   29ae4:	20020e40 	.word	0x20020e40
   29ae8:	0004d79f 	.word	0x0004d79f
   29aec:	0004d754 	.word	0x0004d754
   29af0:	0004b33b 	.word	0x0004b33b
   29af4:	0004c5d9 	.word	0x0004c5d9

00029af8 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   29af8:	2300      	movs	r3, #0
{
   29afa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   29afe:	2802      	cmp	r0, #2
{
   29b00:	b089      	sub	sp, #36	; 0x24
   29b02:	4681      	mov	r9, r0
   29b04:	468a      	mov	sl, r1
   29b06:	4690      	mov	r8, r2
	unsigned char zeros[8] = { 0 };
   29b08:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (family == AF_INET6) {
   29b0c:	d13c      	bne.n	29b88 <z_impl_net_addr_ntop+0x90>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   29b0e:	aa06      	add	r2, sp, #24
   29b10:	4610      	mov	r0, r2
   29b12:	9104      	str	r1, [sp, #16]
{
   29b14:	4619      	mov	r1, r3
   29b16:	e006      	b.n	29b26 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   29b18:	7804      	ldrb	r4, [r0, #0]
   29b1a:	3101      	adds	r1, #1
   29b1c:	3401      	adds	r4, #1
   29b1e:	7004      	strb	r4, [r0, #0]
			for (j = i; j < 8; j++) {
   29b20:	b2cc      	uxtb	r4, r1
   29b22:	2c07      	cmp	r4, #7
   29b24:	d803      	bhi.n	29b2e <z_impl_net_addr_ntop+0x36>
				if (UNALIGNED_GET(&w[j]) != 0) {
   29b26:	f83a 4011 	ldrh.w	r4, [sl, r1, lsl #1]
   29b2a:	2c00      	cmp	r4, #0
   29b2c:	d0f4      	beq.n	29b18 <z_impl_net_addr_ntop+0x20>
   29b2e:	3301      	adds	r3, #1
		for (i = 0U; i < 8; i++) {
   29b30:	2b08      	cmp	r3, #8
   29b32:	f100 0001 	add.w	r0, r0, #1
   29b36:	d1ed      	bne.n	29b14 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   29b38:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   29b3c:	2701      	movs	r7, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   29b3e:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   29b40:	f812 1b01 	ldrb.w	r1, [r2], #1
   29b44:	42b9      	cmp	r1, r7
				longest = zeros[i];
				pos = i;
   29b46:	bf88      	it	hi
   29b48:	b25e      	sxtbhi	r6, r3
		for (i = 0U; i < 8; i++) {
   29b4a:	f103 0301 	add.w	r3, r3, #1
   29b4e:	b2db      	uxtb	r3, r3
				pos = i;
   29b50:	bf88      	it	hi
   29b52:	460f      	movhi	r7, r1
		for (i = 0U; i < 8; i++) {
   29b54:	2b08      	cmp	r3, #8
   29b56:	d1f3      	bne.n	29b40 <z_impl_net_addr_ntop+0x48>
		len = 8;
   29b58:	9303      	str	r3, [sp, #12]
   29b5a:	2f01      	cmp	r7, #1
   29b5c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   29b60:	bf08      	it	eq
   29b62:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   29b66:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   29b68:	2200      	movs	r2, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   29b6a:	4644      	mov	r4, r8
   29b6c:	4615      	mov	r5, r2
   29b6e:	9b03      	ldr	r3, [sp, #12]
   29b70:	429d      	cmp	r5, r3
   29b72:	db19      	blt.n	29ba8 <z_impl_net_addr_ntop+0xb0>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   29b74:	4544      	cmp	r4, r8
   29b76:	d009      	beq.n	29b8c <z_impl_net_addr_ntop+0x94>
		return NULL;
	}

	if (family == AF_INET) {
   29b78:	2300      	movs	r3, #0
   29b7a:	f1b9 0f01 	cmp.w	r9, #1
		*(ptr - 1) = '\0';
   29b7e:	bf0c      	ite	eq
   29b80:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   29b84:	7023      	strbne	r3, [r4, #0]
   29b86:	e003      	b.n	29b90 <z_impl_net_addr_ntop+0x98>
	} else if (family == AF_INET) {
   29b88:	2801      	cmp	r0, #1
   29b8a:	d005      	beq.n	29b98 <z_impl_net_addr_ntop+0xa0>
		return NULL;
   29b8c:	f04f 0800 	mov.w	r8, #0
	}

	return dst;
}
   29b90:	4640      	mov	r0, r8
   29b92:	b009      	add	sp, #36	; 0x24
   29b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   29b98:	232e      	movs	r3, #46	; 0x2e
   29b9a:	2204      	movs	r2, #4
	int8_t pos = -1;
   29b9c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		delim = '.';
   29ba0:	e9cd 3202 	strd	r3, r2, [sp, #8]
	uint8_t i, bl, bh, longest = 1U;
   29ba4:	4607      	mov	r7, r0
   29ba6:	e7df      	b.n	29b68 <z_impl_net_addr_ntop+0x70>
		if (len == 4) {
   29ba8:	9b03      	ldr	r3, [sp, #12]
   29baa:	2b04      	cmp	r3, #4
   29bac:	d134      	bne.n	29c18 <z_impl_net_addr_ntop+0x120>
			value = (uint32_t)addr->s4_addr[i];
   29bae:	f81a 1005 	ldrb.w	r1, [sl, r5]
			if (value == 0U) {
   29bb2:	b949      	cbnz	r1, 29bc8 <z_impl_net_addr_ntop+0xd0>
				*ptr++ = '0';
   29bb4:	2330      	movs	r3, #48	; 0x30
   29bb6:	4620      	mov	r0, r4
   29bb8:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   29bbc:	9b02      	ldr	r3, [sp, #8]
   29bbe:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   29bc0:	3501      	adds	r5, #1
   29bc2:	b2ed      	uxtb	r5, r5
   29bc4:	4604      	mov	r4, r0
   29bc6:	e7d2      	b.n	29b6e <z_impl_net_addr_ntop+0x76>
			l = net_value_to_udec(ptr, value, 0);
   29bc8:	2009      	movs	r0, #9
   29bca:	f04f 0b00 	mov.w	fp, #0
   29bce:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 29ca8 <z_impl_net_addr_ntop+0x1b0>
   29bd2:	9401      	str	r4, [sp, #4]
		temp = value / divisor;
   29bd4:	fbb1 fefc 	udiv	lr, r1, ip
		value = value % divisor;
   29bd8:	fb0c 131e 	mls	r3, ip, lr, r1
		if ((precision > i) || (temp != 0)) {
   29bdc:	4583      	cmp	fp, r0
		value = value % divisor;
   29bde:	9305      	str	r3, [sp, #20]
		if ((precision > i) || (temp != 0)) {
   29be0:	dc01      	bgt.n	29be6 <z_impl_net_addr_ntop+0xee>
   29be2:	4561      	cmp	r1, ip
   29be4:	d306      	bcc.n	29bf4 <z_impl_net_addr_ntop+0xfc>
			*buf++ = (char) (temp + '0');
   29be6:	4683      	mov	fp, r0
   29be8:	9b01      	ldr	r3, [sp, #4]
   29bea:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   29bee:	f803 eb01 	strb.w	lr, [r3], #1
   29bf2:	9301      	str	r3, [sp, #4]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   29bf4:	230a      	movs	r3, #10
   29bf6:	3801      	subs	r0, #1
   29bf8:	fbbc fcf3 	udiv	ip, ip, r3
   29bfc:	1c43      	adds	r3, r0, #1
		value = value % divisor;
   29bfe:	9905      	ldr	r1, [sp, #20]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   29c00:	d1e8      	bne.n	29bd4 <z_impl_net_addr_ntop+0xdc>
	*buf = 0;
   29c02:	f04f 0300 	mov.w	r3, #0
   29c06:	9901      	ldr	r1, [sp, #4]
   29c08:	700b      	strb	r3, [r1, #0]
	return buf - start;
   29c0a:	1b0b      	subs	r3, r1, r4
			ptr += l;
   29c0c:	b2db      	uxtb	r3, r3
			*ptr++ = delim;
   29c0e:	9902      	ldr	r1, [sp, #8]
			ptr += l;
   29c10:	18e0      	adds	r0, r4, r3
			*ptr++ = delim;
   29c12:	3001      	adds	r0, #1
   29c14:	54e1      	strb	r1, [r4, r3]
			continue;
   29c16:	e7d3      	b.n	29bc0 <z_impl_net_addr_ntop+0xc8>
		if (i == pos) {
   29c18:	42ae      	cmp	r6, r5
   29c1a:	d10d      	bne.n	29c38 <z_impl_net_addr_ntop+0x140>
			if (needcolon || i == 0U) {
   29c1c:	b902      	cbnz	r2, 29c20 <z_impl_net_addr_ntop+0x128>
   29c1e:	b916      	cbnz	r6, 29c26 <z_impl_net_addr_ntop+0x12e>
				*ptr++ = ':';
   29c20:	233a      	movs	r3, #58	; 0x3a
   29c22:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   29c26:	233a      	movs	r3, #58	; 0x3a
   29c28:	4620      	mov	r0, r4
   29c2a:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   29c2e:	1e7b      	subs	r3, r7, #1
   29c30:	441d      	add	r5, r3
   29c32:	b2ed      	uxtb	r5, r5
			needcolon = false;
   29c34:	2200      	movs	r2, #0
			continue;
   29c36:	e7c3      	b.n	29bc0 <z_impl_net_addr_ntop+0xc8>
		if (needcolon) {
   29c38:	b112      	cbz	r2, 29c40 <z_impl_net_addr_ntop+0x148>
			*ptr++ = ':';
   29c3a:	233a      	movs	r3, #58	; 0x3a
   29c3c:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   29c40:	9b04      	ldr	r3, [sp, #16]
   29c42:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   29c46:	021a      	lsls	r2, r3, #8
   29c48:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
   29c4c:	b212      	sxth	r2, r2
		bh = value >> 8;
   29c4e:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   29c52:	fa5f fb82 	uxtb.w	fp, r2
		if (bh) {
   29c56:	b1b3      	cbz	r3, 29c86 <z_impl_net_addr_ntop+0x18e>
			if (bh > 0x0f) {
   29c58:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   29c5a:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   29c5c:	d90b      	bls.n	29c76 <z_impl_net_addr_ntop+0x17e>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   29c5e:	2300      	movs	r3, #0
   29c60:	2261      	movs	r2, #97	; 0x61
   29c62:	4620      	mov	r0, r4
   29c64:	f01b ff6d 	bl	45b42 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   29c68:	2301      	movs	r3, #1
   29c6a:	2261      	movs	r2, #97	; 0x61
   29c6c:	4659      	mov	r1, fp
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   29c6e:	f01b ff68 	bl	45b42 <net_byte_to_hex>
		needcolon = true;
   29c72:	2201      	movs	r2, #1
   29c74:	e7a4      	b.n	29bc0 <z_impl_net_addr_ntop+0xc8>
				if (bh < 10) {
   29c76:	b25b      	sxtb	r3, r3
   29c78:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   29c7a:	bf94      	ite	ls
   29c7c:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   29c7e:	3357      	addhi	r3, #87	; 0x57
   29c80:	1c60      	adds	r0, r4, #1
   29c82:	7023      	strb	r3, [r4, #0]
   29c84:	e7f0      	b.n	29c68 <z_impl_net_addr_ntop+0x170>
		} else if (bl > 0x0f) {
   29c86:	f1bb 0f0f 	cmp.w	fp, #15
   29c8a:	d903      	bls.n	29c94 <z_impl_net_addr_ntop+0x19c>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   29c8c:	2261      	movs	r2, #97	; 0x61
   29c8e:	4659      	mov	r1, fp
   29c90:	4620      	mov	r0, r4
   29c92:	e7ec      	b.n	29c6e <z_impl_net_addr_ntop+0x176>
			if (bl < 10) {
   29c94:	b252      	sxtb	r2, r2
   29c96:	f1bb 0f09 	cmp.w	fp, #9
				*ptr++ = (char)(bl + '0');
   29c9a:	bf94      	ite	ls
   29c9c:	3230      	addls	r2, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   29c9e:	3257      	addhi	r2, #87	; 0x57
   29ca0:	1c60      	adds	r0, r4, #1
   29ca2:	7022      	strb	r2, [r4, #0]
   29ca4:	e7e5      	b.n	29c72 <z_impl_net_addr_ntop+0x17a>
   29ca6:	bf00      	nop
   29ca8:	3b9aca00 	.word	0x3b9aca00

00029cac <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   29cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   29cb0:	680f      	ldr	r7, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   29cb2:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   29cb6:	4b3b      	ldr	r3, [pc, #236]	; (29da4 <connect_request_encode+0xf8>)
   29cb8:	4a3b      	ldr	r2, [pc, #236]	; (29da8 <connect_request_encode+0xfc>)
{
   29cba:	4606      	mov	r6, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   29cbc:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   29cc0:	3705      	adds	r7, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   29cc2:	2804      	cmp	r0, #4
   29cc4:	bf0c      	ite	eq
   29cc6:	4610      	moveq	r0, r2
   29cc8:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   29cca:	600f      	str	r7, [r1, #0]
{
   29ccc:	460c      	mov	r4, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   29cce:	f01c f81c 	bl	45d0a <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   29cd2:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (err_code != 0) {
   29cd6:	4603      	mov	r3, r0
   29cd8:	b938      	cbnz	r0, 29cea <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29cda:	e9d4 2000 	ldrd	r2, r0, [r4]
   29cde:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   29ce0:	f896 107a 	ldrb.w	r1, [r6, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29ce4:	d104      	bne.n	29cf0 <connect_request_encode+0x44>
		return -ENOMEM;
   29ce6:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   29cea:	4618      	mov	r0, r3
   29cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   29cf0:	1c50      	adds	r0, r2, #1
   29cf2:	6020      	str	r0, [r4, #0]
   29cf4:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   29cf6:	e9d4 8200 	ldrd	r8, r2, [r4]
   29cfa:	4590      	cmp	r8, r2
   29cfc:	d0f3      	beq.n	29ce6 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   29cfe:	f108 0201 	add.w	r2, r8, #1
   29d02:	6022      	str	r2, [r4, #0]
   29d04:	f888 3000 	strb.w	r3, [r8]
	err_code = pack_uint16(client->keepalive, buf);
   29d08:	4621      	mov	r1, r4
   29d0a:	f8b6 0078 	ldrh.w	r0, [r6, #120]	; 0x78
   29d0e:	f01b ffea 	bl	45ce6 <pack_uint16>
	if (err_code != 0) {
   29d12:	4603      	mov	r3, r0
   29d14:	2800      	cmp	r0, #0
   29d16:	d1e8      	bne.n	29cea <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   29d18:	f106 0048 	add.w	r0, r6, #72	; 0x48
   29d1c:	f01b fff5 	bl	45d0a <pack_utf8_str>
	if (err_code != 0) {
   29d20:	4603      	mov	r3, r0
   29d22:	2800      	cmp	r0, #0
   29d24:	d1e1      	bne.n	29cea <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   29d26:	6df0      	ldr	r0, [r6, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   29d28:	006d      	lsls	r5, r5, #1
	if (client->will_topic != NULL) {
   29d2a:	b1d8      	cbz	r0, 29d64 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   29d2c:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   29d30:	f045 0504 	orr.w	r5, r5, #4
		connect_flags |= client->will_retain << 5;
   29d34:	f003 0301 	and.w	r3, r3, #1
   29d38:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   29d3c:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   29d3e:	4621      	mov	r1, r4
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   29d40:	00db      	lsls	r3, r3, #3
   29d42:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   29d46:	431d      	orrs	r5, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   29d48:	f01b ffdf 	bl	45d0a <pack_utf8_str>
		if (err_code != 0) {
   29d4c:	4603      	mov	r3, r0
   29d4e:	2800      	cmp	r0, #0
   29d50:	d1cb      	bne.n	29cea <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   29d52:	6e33      	ldr	r3, [r6, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   29d54:	4621      	mov	r1, r4
		if (client->will_message != NULL) {
   29d56:	b313      	cbz	r3, 29d9e <connect_request_encode+0xf2>
			err_code = pack_utf8_str(client->will_message, buf);
   29d58:	4618      	mov	r0, r3
   29d5a:	f01b ffd6 	bl	45d0a <pack_utf8_str>
			if (err_code != 0) {
   29d5e:	4603      	mov	r3, r0
   29d60:	2800      	cmp	r0, #0
   29d62:	d1c2      	bne.n	29cea <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   29d64:	6d70      	ldr	r0, [r6, #84]	; 0x54
   29d66:	b138      	cbz	r0, 29d78 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   29d68:	4621      	mov	r1, r4
   29d6a:	f01b ffce 	bl	45d0a <pack_utf8_str>
		if (err_code != 0) {
   29d6e:	4603      	mov	r3, r0
   29d70:	2800      	cmp	r0, #0
   29d72:	d1ba      	bne.n	29cea <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   29d74:	f045 0580 	orr.w	r5, r5, #128	; 0x80
	if (client->password != NULL) {
   29d78:	6db0      	ldr	r0, [r6, #88]	; 0x58
   29d7a:	b138      	cbz	r0, 29d8c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   29d7c:	4621      	mov	r1, r4
   29d7e:	f01b ffc4 	bl	45d0a <pack_utf8_str>
		if (err_code != 0) {
   29d82:	4603      	mov	r3, r0
   29d84:	2800      	cmp	r0, #0
   29d86:	d1b0      	bne.n	29cea <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   29d88:	f045 0540 	orr.w	r5, r5, #64	; 0x40
	*connect_flags_pos = connect_flags;
   29d8c:	f888 5000 	strb.w	r5, [r8]
	return mqtt_encode_fixed_header(message_type, start, buf);
   29d90:	4622      	mov	r2, r4
   29d92:	4639      	mov	r1, r7
}
   29d94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   29d98:	2010      	movs	r0, #16
   29d9a:	f01b bfd1 	b.w	45d40 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   29d9e:	f01b ffa2 	bl	45ce6 <pack_uint16>
   29da2:	e7dc      	b.n	29d5e <connect_request_encode+0xb2>
   29da4:	00049e9c 	.word	0x00049e9c
   29da8:	00049ea4 	.word	0x00049ea4

00029dac <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   29dac:	e9d0 2300 	ldrd	r2, r3, [r0]
   29db0:	1a9b      	subs	r3, r3, r2
   29db2:	2b01      	cmp	r3, #1
   29db4:	bf81      	itttt	hi
   29db6:	4b05      	ldrhi	r3, [pc, #20]	; (29dcc <disconnect_encode+0x20>)
   29db8:	881b      	ldrhhi	r3, [r3, #0]
   29dba:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   29dbc:	6803      	ldrhi	r3, [r0, #0]
   29dbe:	bf83      	ittte	hi
   29dc0:	3302      	addhi	r3, #2
   29dc2:	6043      	strhi	r3, [r0, #4]

	return 0;
   29dc4:	2000      	movhi	r0, #0
		return -ENOMEM;
   29dc6:	f06f 000b 	mvnls.w	r0, #11
}
   29dca:	4770      	bx	lr
   29dcc:	0004d7c9 	.word	0x0004d7c9

00029dd0 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   29dd0:	e9d0 2300 	ldrd	r2, r3, [r0]
   29dd4:	1a9b      	subs	r3, r3, r2
   29dd6:	2b01      	cmp	r3, #1
   29dd8:	bf81      	itttt	hi
   29dda:	4b05      	ldrhi	r3, [pc, #20]	; (29df0 <ping_request_encode+0x20>)
   29ddc:	881b      	ldrhhi	r3, [r3, #0]
   29dde:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   29de0:	6803      	ldrhi	r3, [r0, #0]
   29de2:	bf83      	ittte	hi
   29de4:	3302      	addhi	r3, #2
   29de6:	6043      	strhi	r3, [r0, #4]

	return 0;
   29de8:	2000      	movhi	r0, #0
		return -ENOMEM;
   29dea:	f06f 000b 	mvnls.w	r0, #11
}
   29dee:	4770      	bx	lr
   29df0:	0004d7cb 	.word	0x0004d7cb

00029df4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   29df4:	2314      	movs	r3, #20
   29df6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   29dfa:	4353      	muls	r3, r2
   29dfc:	4a01      	ldr	r2, [pc, #4]	; (29e04 <mqtt_transport_connect+0x10>)
   29dfe:	58d3      	ldr	r3, [r2, r3]
   29e00:	4718      	bx	r3
   29e02:	bf00      	nop
   29e04:	00049eac 	.word	0x00049eac

00029e08 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   29e08:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   29e0a:	2514      	movs	r5, #20
   29e0c:	4c03      	ldr	r4, [pc, #12]	; (29e1c <mqtt_transport_write+0x14>)
   29e0e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   29e12:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   29e16:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   29e18:	685b      	ldr	r3, [r3, #4]
   29e1a:	4718      	bx	r3
   29e1c:	00049eac 	.word	0x00049eac

00029e20 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   29e20:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   29e22:	2414      	movs	r4, #20
   29e24:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   29e28:	4a03      	ldr	r2, [pc, #12]	; (29e38 <mqtt_transport_write_msg+0x18>)
   29e2a:	fb04 2303 	mla	r3, r4, r3, r2
}
   29e2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   29e32:	689b      	ldr	r3, [r3, #8]
   29e34:	4718      	bx	r3
   29e36:	bf00      	nop
   29e38:	00049eac 	.word	0x00049eac

00029e3c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   29e3c:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   29e3e:	2614      	movs	r6, #20
   29e40:	4d04      	ldr	r5, [pc, #16]	; (29e54 <mqtt_transport_read+0x18>)
   29e42:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   29e46:	fb06 5404 	mla	r4, r6, r4, r5
   29e4a:	68e4      	ldr	r4, [r4, #12]
   29e4c:	46a4      	mov	ip, r4
							 shall_block);
}
   29e4e:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   29e50:	4760      	bx	ip
   29e52:	bf00      	nop
   29e54:	00049eac 	.word	0x00049eac

00029e58 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   29e58:	2114      	movs	r1, #20
   29e5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   29e5e:	4a02      	ldr	r2, [pc, #8]	; (29e68 <mqtt_transport_disconnect+0x10>)
   29e60:	fb01 2303 	mla	r3, r1, r3, r2
   29e64:	691b      	ldr	r3, [r3, #16]
   29e66:	4718      	bx	r3
   29e68:	00049eac 	.word	0x00049eac

00029e6c <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   29e6c:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   29e6e:	b510      	push	{r4, lr}
   29e70:	b142      	cbz	r2, 29e84 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   29e72:	4b0f      	ldr	r3, [pc, #60]	; (29eb0 <mqtt_mutex_unlock+0x44>)
   29e74:	6882      	ldr	r2, [r0, #8]
   29e76:	689b      	ldr	r3, [r3, #8]
   29e78:	429a      	cmp	r2, r3
   29e7a:	d115      	bne.n	29ea8 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   29e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   29e80:	f015 b9ac 	b.w	3f1dc <z_impl_k_mutex_unlock>
		return -EINVAL;
   29e84:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   29e88:	2343      	movs	r3, #67	; 0x43
   29e8a:	4a0a      	ldr	r2, [pc, #40]	; (29eb4 <mqtt_mutex_unlock+0x48>)
   29e8c:	490a      	ldr	r1, [pc, #40]	; (29eb8 <mqtt_mutex_unlock+0x4c>)
   29e8e:	480b      	ldr	r0, [pc, #44]	; (29ebc <mqtt_mutex_unlock+0x50>)
   29e90:	f01a fa1e 	bl	442d0 <printk>
   29e94:	4621      	mov	r1, r4
   29e96:	480a      	ldr	r0, [pc, #40]	; (29ec0 <mqtt_mutex_unlock+0x54>)
   29e98:	f01a fa1a 	bl	442d0 <printk>
}
   29e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   29ea0:	2143      	movs	r1, #67	; 0x43
   29ea2:	4804      	ldr	r0, [pc, #16]	; (29eb4 <mqtt_mutex_unlock+0x48>)
   29ea4:	f01a bc2e 	b.w	44704 <assert_post_action>
		return -EPERM;
   29ea8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   29eac:	e7ec      	b.n	29e88 <mqtt_mutex_unlock+0x1c>
   29eae:	bf00      	nop
   29eb0:	2002611c 	.word	0x2002611c
   29eb4:	0004d7f9 	.word	0x0004d7f9
   29eb8:	0004d82a 	.word	0x0004d82a
   29ebc:	0004b33b 	.word	0x0004b33b
   29ec0:	0004d833 	.word	0x0004d833

00029ec4 <mqtt_mutex_lock>:
{
   29ec4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   29ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29ece:	f015 f887 	bl	3efe0 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   29ed2:	4604      	mov	r4, r0
   29ed4:	b178      	cbz	r0, 29ef6 <mqtt_mutex_lock+0x32>
   29ed6:	2339      	movs	r3, #57	; 0x39
   29ed8:	4a07      	ldr	r2, [pc, #28]	; (29ef8 <mqtt_mutex_lock+0x34>)
   29eda:	4908      	ldr	r1, [pc, #32]	; (29efc <mqtt_mutex_lock+0x38>)
   29edc:	4808      	ldr	r0, [pc, #32]	; (29f00 <mqtt_mutex_lock+0x3c>)
   29ede:	f01a f9f7 	bl	442d0 <printk>
   29ee2:	4621      	mov	r1, r4
   29ee4:	4807      	ldr	r0, [pc, #28]	; (29f04 <mqtt_mutex_lock+0x40>)
   29ee6:	f01a f9f3 	bl	442d0 <printk>
}
   29eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   29eee:	2139      	movs	r1, #57	; 0x39
   29ef0:	4801      	ldr	r0, [pc, #4]	; (29ef8 <mqtt_mutex_lock+0x34>)
   29ef2:	f01a bc07 	b.w	44704 <assert_post_action>
}
   29ef6:	bd10      	pop	{r4, pc}
   29ef8:	0004d7f9 	.word	0x0004d7f9
   29efc:	0004d82a 	.word	0x0004d82a
   29f00:	0004b33b 	.word	0x0004b33b
   29f04:	0004d7d9 	.word	0x0004d7d9

00029f08 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   29f08:	b570      	push	{r4, r5, r6, lr}
   29f0a:	4616      	mov	r6, r2
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29f0c:	68c4      	ldr	r4, [r0, #12]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   29f0e:	460d      	mov	r5, r1
   29f10:	b961      	cbnz	r1, 29f2c <gpio_nrfx_manage_callback+0x24>
   29f12:	4922      	ldr	r1, [pc, #136]	; (29f9c <gpio_nrfx_manage_callback+0x94>)
   29f14:	2324      	movs	r3, #36	; 0x24
   29f16:	4a22      	ldr	r2, [pc, #136]	; (29fa0 <gpio_nrfx_manage_callback+0x98>)
   29f18:	4822      	ldr	r0, [pc, #136]	; (29fa4 <gpio_nrfx_manage_callback+0x9c>)
   29f1a:	f01a f9d9 	bl	442d0 <printk>
   29f1e:	4822      	ldr	r0, [pc, #136]	; (29fa8 <gpio_nrfx_manage_callback+0xa0>)
   29f20:	f01a f9d6 	bl	442d0 <printk>
   29f24:	2124      	movs	r1, #36	; 0x24
   29f26:	481e      	ldr	r0, [pc, #120]	; (29fa0 <gpio_nrfx_manage_callback+0x98>)
   29f28:	f01a fbec 	bl	44704 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   29f2c:	686b      	ldr	r3, [r5, #4]
   29f2e:	b963      	cbnz	r3, 29f4a <gpio_nrfx_manage_callback+0x42>
   29f30:	491e      	ldr	r1, [pc, #120]	; (29fac <gpio_nrfx_manage_callback+0xa4>)
   29f32:	2325      	movs	r3, #37	; 0x25
   29f34:	4a1a      	ldr	r2, [pc, #104]	; (29fa0 <gpio_nrfx_manage_callback+0x98>)
   29f36:	481b      	ldr	r0, [pc, #108]	; (29fa4 <gpio_nrfx_manage_callback+0x9c>)
   29f38:	f01a f9ca 	bl	442d0 <printk>
   29f3c:	481c      	ldr	r0, [pc, #112]	; (29fb0 <gpio_nrfx_manage_callback+0xa8>)
   29f3e:	f01a f9c7 	bl	442d0 <printk>
   29f42:	2125      	movs	r1, #37	; 0x25
   29f44:	4816      	ldr	r0, [pc, #88]	; (29fa0 <gpio_nrfx_manage_callback+0x98>)
   29f46:	f01a fbdd 	bl	44704 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   29f4a:	6863      	ldr	r3, [r4, #4]

	if (!sys_slist_is_empty(callbacks)) {
   29f4c:	b15b      	cbz	r3, 29f66 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f4e:	2200      	movs	r2, #0
   29f50:	429d      	cmp	r5, r3
   29f52:	d113      	bne.n	29f7c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   29f54:	682b      	ldr	r3, [r5, #0]
   29f56:	b95a      	cbnz	r2, 29f70 <gpio_nrfx_manage_callback+0x68>
   29f58:	68a2      	ldr	r2, [r4, #8]
	list->head = node;
   29f5a:	6063      	str	r3, [r4, #4]
Z_GENLIST_REMOVE(slist, snode)
   29f5c:	4295      	cmp	r5, r2
   29f5e:	d100      	bne.n	29f62 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   29f60:	60a3      	str	r3, [r4, #8]
	parent->next = child;
   29f62:	2300      	movs	r3, #0
   29f64:	602b      	str	r3, [r5, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   29f66:	b976      	cbnz	r6, 29f86 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   29f68:	2000      	movs	r0, #0
				     callback, set);
}
   29f6a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f6c:	460b      	mov	r3, r1
   29f6e:	e7ef      	b.n	29f50 <gpio_nrfx_manage_callback+0x48>
	parent->next = child;
   29f70:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   29f72:	68a3      	ldr	r3, [r4, #8]
   29f74:	429d      	cmp	r5, r3
	list->tail = node;
   29f76:	bf08      	it	eq
   29f78:	60a2      	streq	r2, [r4, #8]
   29f7a:	e7f2      	b.n	29f62 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29f7c:	6819      	ldr	r1, [r3, #0]
	return node->next;
   29f7e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29f80:	2900      	cmp	r1, #0
   29f82:	d1f3      	bne.n	29f6c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   29f84:	b13e      	cbz	r6, 29f96 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   29f86:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   29f88:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   29f8a:	68a0      	ldr	r0, [r4, #8]
	list->head = node;
   29f8c:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   29f8e:	2800      	cmp	r0, #0
   29f90:	d1ea      	bne.n	29f68 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   29f92:	60a5      	str	r5, [r4, #8]
   29f94:	e7e9      	b.n	29f6a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   29f96:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29f9a:	e7e6      	b.n	29f6a <gpio_nrfx_manage_callback+0x62>
   29f9c:	0004db31 	.word	0x0004db31
   29fa0:	0004d855 	.word	0x0004d855
   29fa4:	0004b33b 	.word	0x0004b33b
   29fa8:	0004d882 	.word	0x0004d882
   29fac:	0004d891 	.word	0x0004d891
   29fb0:	0004d8a3 	.word	0x0004d8a3

00029fb4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29fb4:	6803      	ldr	r3, [r0, #0]
{
   29fb6:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   29fb8:	095a      	lsrs	r2, r3, #5
   29fba:	bf0c      	ite	eq
   29fbc:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   29fc0:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   29fc2:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   29fc6:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29fca:	07db      	lsls	r3, r3, #31
{
   29fcc:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29fce:	d40b      	bmi.n	29fe8 <nrf_gpio_pin_port_decode+0x34>
   29fd0:	490f      	ldr	r1, [pc, #60]	; (2a010 <nrf_gpio_pin_port_decode+0x5c>)
   29fd2:	4810      	ldr	r0, [pc, #64]	; (2a014 <nrf_gpio_pin_port_decode+0x60>)
   29fd4:	f240 231a 	movw	r3, #538	; 0x21a
   29fd8:	4a0f      	ldr	r2, [pc, #60]	; (2a018 <nrf_gpio_pin_port_decode+0x64>)
   29fda:	f01a f979 	bl	442d0 <printk>
   29fde:	f240 211a 	movw	r1, #538	; 0x21a
   29fe2:	480d      	ldr	r0, [pc, #52]	; (2a018 <nrf_gpio_pin_port_decode+0x64>)
   29fe4:	f01a fb8e 	bl	44704 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   29fe8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   29fea:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29fee:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   29ff0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29ff2:	d00b      	beq.n	2a00c <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   29ff4:	4909      	ldr	r1, [pc, #36]	; (2a01c <nrf_gpio_pin_port_decode+0x68>)
   29ff6:	4807      	ldr	r0, [pc, #28]	; (2a014 <nrf_gpio_pin_port_decode+0x60>)
   29ff8:	f240 231f 	movw	r3, #543	; 0x21f
   29ffc:	4a06      	ldr	r2, [pc, #24]	; (2a018 <nrf_gpio_pin_port_decode+0x64>)
   29ffe:	f01a f967 	bl	442d0 <printk>
   2a002:	f240 211f 	movw	r1, #543	; 0x21f
   2a006:	4804      	ldr	r0, [pc, #16]	; (2a018 <nrf_gpio_pin_port_decode+0x64>)
   2a008:	f01a fb7c 	bl	44704 <assert_post_action>
}
   2a00c:	4804      	ldr	r0, [pc, #16]	; (2a020 <nrf_gpio_pin_port_decode+0x6c>)
   2a00e:	bd10      	pop	{r4, pc}
   2a010:	0004d8f9 	.word	0x0004d8f9
   2a014:	0004b33b 	.word	0x0004b33b
   2a018:	0004d8c6 	.word	0x0004d8c6
   2a01c:	00052672 	.word	0x00052672
   2a020:	40842500 	.word	0x40842500

0002a024 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2a024:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   2a026:	4b09      	ldr	r3, [pc, #36]	; (2a04c <gpio_nrfx_init+0x28>)
   2a028:	781a      	ldrb	r2, [r3, #0]
   2a02a:	b96a      	cbnz	r2, 2a048 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   2a02c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2a02e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   2a030:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2a032:	2105      	movs	r1, #5
   2a034:	f7fd fb70 	bl	27718 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   2a038:	2031      	movs	r0, #49	; 0x31
   2a03a:	f7fd fb4f 	bl	276dc <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   2a03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2a042:	4b03      	ldr	r3, [pc, #12]	; (2a050 <gpio_nrfx_init+0x2c>)
   2a044:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   2a048:	2000      	movs	r0, #0
   2a04a:	bd08      	pop	{r3, pc}
   2a04c:	2002b533 	.word	0x2002b533
   2a050:	40031000 	.word	0x40031000

0002a054 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a054:	4b2e      	ldr	r3, [pc, #184]	; (2a110 <gpio_nrfx_config+0xbc>)
{
   2a056:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a058:	4013      	ands	r3, r2
   2a05a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a05e:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a060:	d044      	beq.n	2a0ec <gpio_nrfx_config+0x98>
   2a062:	d808      	bhi.n	2a076 <gpio_nrfx_config+0x22>
   2a064:	2b02      	cmp	r3, #2
   2a066:	d043      	beq.n	2a0f0 <gpio_nrfx_config+0x9c>
   2a068:	2b06      	cmp	r3, #6
   2a06a:	d043      	beq.n	2a0f4 <gpio_nrfx_config+0xa0>
   2a06c:	2b00      	cmp	r3, #0
   2a06e:	d041      	beq.n	2a0f4 <gpio_nrfx_config+0xa0>
		return -EINVAL;
   2a070:	f06f 0015 	mvn.w	r0, #21
   2a074:	e038      	b.n	2a0e8 <gpio_nrfx_config+0x94>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   2a07a:	d03d      	beq.n	2a0f8 <gpio_nrfx_config+0xa4>
   2a07c:	d804      	bhi.n	2a088 <gpio_nrfx_config+0x34>
   2a07e:	4c25      	ldr	r4, [pc, #148]	; (2a114 <gpio_nrfx_config+0xc0>)
   2a080:	42a3      	cmp	r3, r4
   2a082:	d1f5      	bne.n	2a070 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0D1;
   2a084:	2407      	movs	r4, #7
   2a086:	e006      	b.n	2a096 <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   2a088:	4c23      	ldr	r4, [pc, #140]	; (2a118 <gpio_nrfx_config+0xc4>)
   2a08a:	42a3      	cmp	r3, r4
   2a08c:	d036      	beq.n	2a0fc <gpio_nrfx_config+0xa8>
   2a08e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2a092:	d1ed      	bne.n	2a070 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0H1;
   2a094:	2403      	movs	r4, #3
	if ((flags & GPIO_PULL_UP) != 0) {
   2a096:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a098:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_NOPULL;
   2a09c:	bf54      	ite	pl
   2a09e:	f3c2 1740 	ubfxpl	r7, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   2a0a2:	2703      	movmi	r7, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2a0a4:	f3c3 2600 	ubfx	r6, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   2a0a8:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   2a0aa:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   2a0ae:	d507      	bpl.n	2a0c0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2a0b0:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a0b2:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2a0b6:	d523      	bpl.n	2a100 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   2a0b8:	2301      	movs	r3, #1
   2a0ba:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   2a0bc:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   2a0c0:	7a03      	ldrb	r3, [r0, #8]
   2a0c2:	f001 011f 	and.w	r1, r1, #31
   2a0c6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a0ca:	a801      	add	r0, sp, #4
   2a0cc:	9101      	str	r1, [sp, #4]
   2a0ce:	f7ff ff71 	bl	29fb4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2a0d2:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   2a0d4:	ea45 0346 	orr.w	r3, r5, r6, lsl #1
   2a0d8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   2a0dc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2a0e0:	3280      	adds	r2, #128	; 0x80
   2a0e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   2a0e6:	2000      	movs	r0, #0
}
   2a0e8:	b003      	add	sp, #12
   2a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0S1;
   2a0ec:	2401      	movs	r4, #1
   2a0ee:	e7d2      	b.n	2a096 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   2a0f0:	2404      	movs	r4, #4
   2a0f2:	e7d0      	b.n	2a096 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0S1;
   2a0f4:	461c      	mov	r4, r3
   2a0f6:	e7ce      	b.n	2a096 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_S0H1;
   2a0f8:	2402      	movs	r4, #2
   2a0fa:	e7cc      	b.n	2a096 <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   2a0fc:	2405      	movs	r4, #5
   2a0fe:	e7ca      	b.n	2a096 <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   2a100:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   2a102:	bf42      	ittt	mi
   2a104:	2201      	movmi	r2, #1
   2a106:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   2a108:	f8cc 200c 	strmi.w	r2, [ip, #12]
   2a10c:	e7d8      	b.n	2a0c0 <gpio_nrfx_config+0x6c>
   2a10e:	bf00      	nop
   2a110:	00f00006 	.word	0x00f00006
   2a114:	00100006 	.word	0x00100006
   2a118:	00400002 	.word	0x00400002

0002a11c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   2a11c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   2a120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2a124:	4607      	mov	r7, r0
   2a126:	460e      	mov	r6, r1
   2a128:	4690      	mov	r8, r2
   2a12a:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   2a12c:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   2a12e:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   2a132:	f040 80b8 	bne.w	2a2a6 <gpio_nrfx_pin_interrupt_configure+0x18a>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2a136:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2a138:	a801      	add	r0, sp, #4
   2a13a:	7a1b      	ldrb	r3, [r3, #8]
   2a13c:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   2a140:	9301      	str	r3, [sp, #4]
   2a142:	f7ff ff37 	bl	29fb4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2a146:	9b01      	ldr	r3, [sp, #4]
   2a148:	3380      	adds	r3, #128	; 0x80
   2a14a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   2a14e:	07d8      	lsls	r0, r3, #31
   2a150:	f100 80cf 	bmi.w	2a2f2 <gpio_nrfx_pin_interrupt_configure+0x1d6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2a154:	2101      	movs	r1, #1
   2a156:	68e3      	ldr	r3, [r4, #12]
   2a158:	40b1      	lsls	r1, r6
   2a15a:	4319      	orrs	r1, r3
   2a15c:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2a15e:	2101      	movs	r1, #1
   2a160:	6963      	ldr	r3, [r4, #20]
   2a162:	40b1      	lsls	r1, r6
   2a164:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   2a168:	bf0c      	ite	eq
   2a16a:	430b      	orreq	r3, r1
   2a16c:	438b      	bicne	r3, r1
   2a16e:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   2a170:	69a3      	ldr	r3, [r4, #24]
   2a172:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   2a176:	bf0c      	ite	eq
   2a178:	430b      	orreq	r3, r1
   2a17a:	438b      	bicne	r3, r1
   2a17c:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2a17e:	6923      	ldr	r3, [r4, #16]
   2a180:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   2a184:	bf0c      	ite	eq
   2a186:	4319      	orreq	r1, r3
   2a188:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a18c:	687b      	ldr	r3, [r7, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   2a18e:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a190:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   2a192:	f8d7 800c 	ldr.w	r8, [r7, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a196:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2a19a:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   2a19c:	4f56      	ldr	r7, [pc, #344]	; (2a2f8 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   2a19e:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
   2a1a2:	b2d2      	uxtb	r2, r2
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2a1a4:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   2a1a8:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   2a1ac:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   2a1b0:	428d      	cmp	r5, r1
   2a1b2:	f040 8083 	bne.w	2a2bc <gpio_nrfx_pin_interrupt_configure+0x1a0>
		    && (intenset & BIT(i))) {
   2a1b6:	fa22 f103 	lsr.w	r1, r2, r3
   2a1ba:	07c9      	lsls	r1, r1, #31
   2a1bc:	d57e      	bpl.n	2a2bc <gpio_nrfx_pin_interrupt_configure+0x1a0>
			(void)atomic_and(mask, ~BIT(i));
   2a1be:	2201      	movs	r2, #1
   2a1c0:	409a      	lsls	r2, r3
   2a1c2:	43d0      	mvns	r0, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a1c4:	494d      	ldr	r1, [pc, #308]	; (2a2fc <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   2a1c6:	e8d1 4fef 	ldaex	r4, [r1]
   2a1ca:	4004      	ands	r4, r0
   2a1cc:	e8c1 4fec 	stlex	ip, r4, [r1]
   2a1d0:	f1bc 0f00 	cmp.w	ip, #0
   2a1d4:	d1f7      	bne.n	2a1c6 <gpio_nrfx_pin_interrupt_configure+0xaa>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   2a1d6:	009b      	lsls	r3, r3, #2
   2a1d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2a1dc:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   2a1e0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   2a1e4:	f021 0101 	bic.w	r1, r1, #1
   2a1e8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   2a1ec:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2a1f0:	4628      	mov	r0, r5
   2a1f2:	2100      	movs	r1, #0
   2a1f4:	f01c fb31 	bl	4685a <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   2a1f8:	f8d8 000c 	ldr.w	r0, [r8, #12]
   2a1fc:	40f0      	lsrs	r0, r6
   2a1fe:	f010 0001 	ands.w	r0, r0, #1
   2a202:	d04d      	beq.n	2a2a0 <gpio_nrfx_pin_interrupt_configure+0x184>
		if (data->trig_edge & BIT(pin)) {
   2a204:	f8d8 0014 	ldr.w	r0, [r8, #20]
   2a208:	40f0      	lsrs	r0, r6
   2a20a:	f010 0401 	ands.w	r4, r0, #1
   2a20e:	d062      	beq.n	2a2d6 <gpio_nrfx_pin_interrupt_configure+0x1ba>
			if (data->double_edge & BIT(pin)) {
   2a210:	f8d8 3018 	ldr.w	r3, [r8, #24]
   2a214:	40f3      	lsrs	r3, r6
   2a216:	07db      	lsls	r3, r3, #31
   2a218:	d455      	bmi.n	2a2c6 <gpio_nrfx_pin_interrupt_configure+0x1aa>
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   2a21a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2a21e:	fa23 f606 	lsr.w	r6, r3, r6
				pol = NRF_GPIOTE_POLARITY_HITOLO;
   2a222:	f016 0f01 	tst.w	r6, #1
   2a226:	bf14      	ite	ne
   2a228:	2601      	movne	r6, #1
   2a22a:	2602      	moveq	r6, #2
   2a22c:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   2a22e:	2401      	movs	r4, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a230:	4a32      	ldr	r2, [pc, #200]	; (2a2fc <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   2a232:	fa04 f103 	lsl.w	r1, r4, r3
   2a236:	e8d2 0fef 	ldaex	r0, [r2]
   2a23a:	ea40 0c01 	orr.w	ip, r0, r1
   2a23e:	e8c2 cfee 	stlex	lr, ip, [r2]
   2a242:	f1be 0f00 	cmp.w	lr, #0
   2a246:	d1f6      	bne.n	2a236 <gpio_nrfx_pin_interrupt_configure+0x11a>
		if ((prev & BIT(channel)) == 0) {
   2a248:	40d8      	lsrs	r0, r3
   2a24a:	f010 0001 	ands.w	r0, r0, #1
   2a24e:	d13c      	bne.n	2a2ca <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2a250:	009a      	lsls	r2, r3, #2
   2a252:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2a256:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   2a25a:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
			nrf_gpiote_event_t evt =
   2a25e:	3340      	adds	r3, #64	; 0x40
   2a260:	f424 3447 	bic.w	r4, r4, #203776	; 0x31c00
   2a264:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   2a268:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2a26c:	022d      	lsls	r5, r5, #8
   2a26e:	009b      	lsls	r3, r3, #2
   2a270:	f8d2 4510 	ldr.w	r4, [r2, #1296]	; 0x510
   2a274:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   2a278:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2a27a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
    return ((uint32_t)p_reg + event);
   2a27e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2a282:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2a286:	4325      	orrs	r5, r4
   2a288:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2a28c:	6018      	str	r0, [r3, #0]
   2a28e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2a290:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   2a294:	f043 0301 	orr.w	r3, r3, #1
   2a298:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
   2a29c:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
}
   2a2a0:	b003      	add	sp, #12
   2a2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   2a2a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   2a2aa:	f47f af53 	bne.w	2a154 <gpio_nrfx_pin_interrupt_configure+0x38>
   2a2ae:	2101      	movs	r1, #1
   2a2b0:	fa01 f306 	lsl.w	r3, r1, r6
   2a2b4:	68e1      	ldr	r1, [r4, #12]
   2a2b6:	ea21 0103 	bic.w	r1, r1, r3
   2a2ba:	e74f      	b.n	2a15c <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2a2bc:	3301      	adds	r3, #1
   2a2be:	2b08      	cmp	r3, #8
   2a2c0:	f47f af70 	bne.w	2a1a4 <gpio_nrfx_pin_interrupt_configure+0x88>
   2a2c4:	e794      	b.n	2a1f0 <gpio_nrfx_pin_interrupt_configure+0xd4>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   2a2c6:	2603      	movs	r6, #3
   2a2c8:	e7b0      	b.n	2a22c <gpio_nrfx_pin_interrupt_configure+0x110>
   2a2ca:	3301      	adds	r3, #1
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   2a2cc:	2b08      	cmp	r3, #8
   2a2ce:	d1b0      	bne.n	2a232 <gpio_nrfx_pin_interrupt_configure+0x116>
	return -ENODEV;
   2a2d0:	f06f 0012 	mvn.w	r0, #18
   2a2d4:	e7e4      	b.n	2a2a0 <gpio_nrfx_pin_interrupt_configure+0x184>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a2d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a2da:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a2dc:	fa23 f606 	lsr.w	r6, r3, r6
		return NRF_GPIO_PIN_SENSE_HIGH;
   2a2e0:	f016 0f01 	tst.w	r6, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a2e4:	bf0c      	ite	eq
   2a2e6:	2103      	moveq	r1, #3
   2a2e8:	2102      	movne	r1, #2
   2a2ea:	f01c fab6 	bl	4685a <nrf_gpio_cfg_sense_set>
	int res = 0;
   2a2ee:	4620      	mov	r0, r4
   2a2f0:	e7d6      	b.n	2a2a0 <gpio_nrfx_pin_interrupt_configure+0x184>
		return -ENOTSUP;
   2a2f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a2f6:	e7d3      	b.n	2a2a0 <gpio_nrfx_pin_interrupt_configure+0x184>
   2a2f8:	40031000 	.word	0x40031000
   2a2fc:	20024bd0 	.word	0x20024bd0

0002a300 <gpiote_event_handler>:
{
   2a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a304:	4f48      	ldr	r7, [pc, #288]	; (2a428 <gpiote_event_handler+0x128>)
   2a306:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
   2a308:	2e00      	cmp	r6, #0
   2a30a:	d050      	beq.n	2a3ae <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   2a30c:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   2a310:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   2a314:	4b45      	ldr	r3, [pc, #276]	; (2a42c <gpiote_event_handler+0x12c>)
   2a316:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2a318:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2a31c:	430a      	orrs	r2, r1
   2a31e:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   2a322:	4a43      	ldr	r2, [pc, #268]	; (2a430 <gpiote_event_handler+0x130>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2a324:	691b      	ldr	r3, [r3, #16]
   2a326:	6914      	ldr	r4, [r2, #16]
   2a328:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   2a32a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   2a32e:	bb7d      	cbnz	r5, 2a390 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2a330:	603d      	str	r5, [r7, #0]
   2a332:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   2a334:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   2a336:	2501      	movs	r5, #1
   2a338:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   2a33a:	483e      	ldr	r0, [pc, #248]	; (2a434 <gpiote_event_handler+0x134>)
   2a33c:	493e      	ldr	r1, [pc, #248]	; (2a438 <gpiote_event_handler+0x138>)
   2a33e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   2a342:	fa05 fc03 	lsl.w	ip, r5, r3
   2a346:	ea1c 0f02 	tst.w	ip, r2
   2a34a:	d00f      	beq.n	2a36c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a34c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   2a350:	b162      	cbz	r2, 2a36c <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2a352:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   2a356:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2a35a:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2a35e:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   2a362:	fa05 f202 	lsl.w	r2, r5, r2
   2a366:	4314      	orrs	r4, r2
   2a368:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   2a36c:	3301      	adds	r3, #1
   2a36e:	2b08      	cmp	r3, #8
   2a370:	d1e5      	bne.n	2a33e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   2a372:	b9f4      	cbnz	r4, 2a3b2 <gpiote_event_handler+0xb2>
	if (port_event) {
   2a374:	b156      	cbz	r6, 2a38c <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   2a376:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2a378:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   2a37a:	4d2c      	ldr	r5, [pc, #176]	; (2a42c <gpiote_event_handler+0x12c>)
   2a37c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2a37e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   2a382:	430a      	orrs	r2, r1
   2a384:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   2a388:	2c00      	cmp	r4, #0
   2a38a:	d13a      	bne.n	2a402 <gpiote_event_handler+0x102>
}
   2a38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   2a390:	ea15 0f08 	tst.w	r5, r8
   2a394:	d006      	beq.n	2a3a4 <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   2a396:	2100      	movs	r1, #0
   2a398:	f009 001f 	and.w	r0, r9, #31
   2a39c:	f01c fa5d 	bl	4685a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2a3a0:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   2a3a4:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   2a3a8:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2a3ac:	e7bf      	b.n	2a32e <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   2a3ae:	4634      	mov	r4, r6
   2a3b0:	e7c0      	b.n	2a334 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a3b2:	4b1e      	ldr	r3, [pc, #120]	; (2a42c <gpiote_event_handler+0x12c>)
   2a3b4:	685d      	ldr	r5, [r3, #4]
   2a3b6:	2d00      	cmp	r5, #0
   2a3b8:	d0dc      	beq.n	2a374 <gpiote_event_handler+0x74>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a3ba:	682f      	ldr	r7, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2a3bc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2a444 <gpiote_event_handler+0x144>
			__ASSERT(cb->handler, "No callback handler!");
   2a3c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2a448 <gpiote_event_handler+0x148>
   2a3c4:	f8df a084 	ldr.w	sl, [pc, #132]	; 2a44c <gpiote_event_handler+0x14c>
		if (cb->pin_mask & pins) {
   2a3c8:	68ab      	ldr	r3, [r5, #8]
   2a3ca:	421c      	tst	r4, r3
   2a3cc:	d014      	beq.n	2a3f8 <gpiote_event_handler+0xf8>
			__ASSERT(cb->handler, "No callback handler!");
   2a3ce:	686b      	ldr	r3, [r5, #4]
   2a3d0:	b963      	cbnz	r3, 2a3ec <gpiote_event_handler+0xec>
   2a3d2:	4651      	mov	r1, sl
   2a3d4:	2345      	movs	r3, #69	; 0x45
   2a3d6:	4642      	mov	r2, r8
   2a3d8:	4818      	ldr	r0, [pc, #96]	; (2a43c <gpiote_event_handler+0x13c>)
   2a3da:	f019 ff79 	bl	442d0 <printk>
   2a3de:	4818      	ldr	r0, [pc, #96]	; (2a440 <gpiote_event_handler+0x140>)
   2a3e0:	f019 ff76 	bl	442d0 <printk>
   2a3e4:	2145      	movs	r1, #69	; 0x45
   2a3e6:	4640      	mov	r0, r8
   2a3e8:	f01a f98c 	bl	44704 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   2a3ec:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   2a3f0:	4629      	mov	r1, r5
   2a3f2:	4022      	ands	r2, r4
   2a3f4:	4648      	mov	r0, r9
   2a3f6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a3f8:	2f00      	cmp	r7, #0
   2a3fa:	d0bb      	beq.n	2a374 <gpiote_event_handler+0x74>
   2a3fc:	463d      	mov	r5, r7
   2a3fe:	683f      	ldr	r7, [r7, #0]
   2a400:	e7e2      	b.n	2a3c8 <gpiote_event_handler+0xc8>
		if (level_pins & bit) {
   2a402:	4226      	tst	r6, r4
   2a404:	d00c      	beq.n	2a420 <gpiote_event_handler+0x120>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a406:	692b      	ldr	r3, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a408:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a40c:	40fb      	lsrs	r3, r7
		return NRF_GPIO_PIN_SENSE_HIGH;
   2a40e:	f013 0f01 	tst.w	r3, #1
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a412:	bf0c      	ite	eq
   2a414:	2103      	moveq	r1, #3
   2a416:	2102      	movne	r1, #2
   2a418:	f01c fa1f 	bl	4685a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2a41c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2a420:	3701      	adds	r7, #1
		bit <<= 1;
   2a422:	0076      	lsls	r6, r6, #1
   2a424:	e7b0      	b.n	2a388 <gpiote_event_handler+0x88>
   2a426:	bf00      	nop
   2a428:	4003117c 	.word	0x4003117c
   2a42c:	20024bb4 	.word	0x20024bb4
   2a430:	40842500 	.word	0x40842500
   2a434:	40031000 	.word	0x40031000
   2a438:	40031100 	.word	0x40031100
   2a43c:	0004b33b 	.word	0x0004b33b
   2a440:	0004d8a3 	.word	0x0004d8a3
   2a444:	20020b54 	.word	0x20020b54
   2a448:	0004d855 	.word	0x0004d855
   2a44c:	0004d8ba 	.word	0x0004d8ba

0002a450 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2a450:	4b02      	ldr	r3, [pc, #8]	; (2a45c <flash_nrf_pages_layout+0xc>)
   2a452:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2a454:	2301      	movs	r3, #1
   2a456:	6013      	str	r3, [r2, #0]
}
   2a458:	4770      	bx	lr
   2a45a:	bf00      	nop
   2a45c:	20024bd4 	.word	0x20024bd4

0002a460 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2a460:	4800      	ldr	r0, [pc, #0]	; (2a464 <flash_nrf_get_parameters+0x4>)
   2a462:	4770      	bx	lr
   2a464:	00049f1c 	.word	0x00049f1c

0002a468 <flash_nrf_erase>:
{
   2a468:	b570      	push	{r4, r5, r6, lr}
   2a46a:	460d      	mov	r5, r1
   2a46c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2a46e:	f01d fc95 	bl	47d9c <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   2a472:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2a474:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   2a476:	4628      	mov	r0, r5
   2a478:	f01c fa04 	bl	46884 <is_regular_addr_valid>
   2a47c:	b300      	cbz	r0, 2a4c0 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2a47e:	fbb5 f3f6 	udiv	r3, r5, r6
   2a482:	fb06 5313 	mls	r3, r6, r3, r5
   2a486:	b9db      	cbnz	r3, 2a4c0 <flash_nrf_erase+0x58>
   2a488:	fbb4 f0f6 	udiv	r0, r4, r6
   2a48c:	fb06 4010 	mls	r0, r6, r0, r4
   2a490:	b9b0      	cbnz	r0, 2a4c0 <flash_nrf_erase+0x58>
		if (!n_pages) {
   2a492:	42a6      	cmp	r6, r4
   2a494:	d813      	bhi.n	2a4be <flash_nrf_erase+0x56>
	return z_impl_k_sem_take(sem, timeout);
   2a496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a49e:	480a      	ldr	r0, [pc, #40]	; (2a4c8 <flash_nrf_erase+0x60>)
   2a4a0:	f016 fa50 	bl	40944 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2a4a4:	f01d fc7a 	bl	47d9c <nrfx_nvmc_flash_page_size_get>
   2a4a8:	4606      	mov	r6, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   2a4aa:	4628      	mov	r0, r5
   2a4ac:	f013 ff98 	bl	3e3e0 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   2a4b0:	1ba4      	subs	r4, r4, r6
   2a4b2:	4435      	add	r5, r6
   2a4b4:	d1f9      	bne.n	2a4aa <flash_nrf_erase+0x42>
	z_impl_k_sem_give(sem);
   2a4b6:	4804      	ldr	r0, [pc, #16]	; (2a4c8 <flash_nrf_erase+0x60>)
   2a4b8:	f016 fa00 	bl	408bc <z_impl_k_sem_give>
	return ret;
   2a4bc:	4620      	mov	r0, r4
}
   2a4be:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a4c0:	f06f 0015 	mvn.w	r0, #21
   2a4c4:	e7fb      	b.n	2a4be <flash_nrf_erase+0x56>
   2a4c6:	bf00      	nop
   2a4c8:	20024bdc 	.word	0x20024bdc

0002a4cc <nrf_flash_init>:
{
   2a4cc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2a4ce:	2201      	movs	r2, #1
   2a4d0:	4806      	ldr	r0, [pc, #24]	; (2a4ec <nrf_flash_init+0x20>)
   2a4d2:	4611      	mov	r1, r2
   2a4d4:	f01d fcfe 	bl	47ed4 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2a4d8:	f01d fc63 	bl	47da2 <nrfx_nvmc_flash_page_count_get>
   2a4dc:	4c04      	ldr	r4, [pc, #16]	; (2a4f0 <nrf_flash_init+0x24>)
   2a4de:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2a4e0:	f01d fc5c 	bl	47d9c <nrfx_nvmc_flash_page_size_get>
   2a4e4:	6060      	str	r0, [r4, #4]
}
   2a4e6:	2000      	movs	r0, #0
   2a4e8:	bd10      	pop	{r4, pc}
   2a4ea:	bf00      	nop
   2a4ec:	20024bdc 	.word	0x20024bdc
   2a4f0:	20024bd4 	.word	0x20024bd4

0002a4f4 <flash_nrf_write>:
{
   2a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a4f6:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   2a4f8:	4619      	mov	r1, r3
   2a4fa:	4630      	mov	r0, r6
{
   2a4fc:	4617      	mov	r7, r2
   2a4fe:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2a500:	f01c f9c0 	bl	46884 <is_regular_addr_valid>
   2a504:	b308      	cbz	r0, 2a54a <flash_nrf_write+0x56>
	return (data & 0x3) ? false : true;
   2a506:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2a50a:	f015 0503 	ands.w	r5, r5, #3
   2a50e:	d11c      	bne.n	2a54a <flash_nrf_write+0x56>
	if (!len) {
   2a510:	b1f4      	cbz	r4, 2a550 <flash_nrf_write+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   2a512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a51a:	480e      	ldr	r0, [pc, #56]	; (2a554 <flash_nrf_write+0x60>)
   2a51c:	f016 fa12 	bl	40944 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   2a520:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   2a524:	42a5      	cmp	r5, r4
   2a526:	eb06 0005 	add.w	r0, r6, r5
   2a52a:	d109      	bne.n	2a540 <flash_nrf_write+0x4c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2a52c:	4a0a      	ldr	r2, [pc, #40]	; (2a558 <flash_nrf_write+0x64>)
   2a52e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   2a532:	07db      	lsls	r3, r3, #31
   2a534:	d5fb      	bpl.n	2a52e <flash_nrf_write+0x3a>
	z_impl_k_sem_give(sem);
   2a536:	4807      	ldr	r0, [pc, #28]	; (2a554 <flash_nrf_write+0x60>)
   2a538:	f016 f9c0 	bl	408bc <z_impl_k_sem_give>
   2a53c:	2000      	movs	r0, #0
}
   2a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   2a540:	5979      	ldr	r1, [r7, r5]
   2a542:	f013 ff7f 	bl	3e444 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   2a546:	3504      	adds	r5, #4
   2a548:	e7ec      	b.n	2a524 <flash_nrf_write+0x30>
		return -EINVAL;
   2a54a:	f06f 0015 	mvn.w	r0, #21
   2a54e:	e7f6      	b.n	2a53e <flash_nrf_write+0x4a>
		return 0;
   2a550:	4620      	mov	r0, r4
   2a552:	e7f4      	b.n	2a53e <flash_nrf_write+0x4a>
   2a554:	20024bdc 	.word	0x20024bdc
   2a558:	40039000 	.word	0x40039000

0002a55c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   2a55c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2a55e:	794b      	ldrb	r3, [r1, #5]
   2a560:	2b01      	cmp	r3, #1
   2a562:	d027      	beq.n	2a5b4 <uarte_nrfx_configure+0x58>
   2a564:	2b03      	cmp	r3, #3
   2a566:	d122      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2a568:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2a56a:	798b      	ldrb	r3, [r1, #6]
   2a56c:	2b03      	cmp	r3, #3
   2a56e:	d11e      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2a570:	79cc      	ldrb	r4, [r1, #7]
   2a572:	b124      	cbz	r4, 2a57e <uarte_nrfx_configure+0x22>
   2a574:	2c01      	cmp	r4, #1
   2a576:	d11a      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   2a578:	6843      	ldr	r3, [r0, #4]
   2a57a:	791b      	ldrb	r3, [r3, #4]
   2a57c:	b1bb      	cbz	r3, 2a5ae <uarte_nrfx_configure+0x52>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2a57e:	790a      	ldrb	r2, [r1, #4]
   2a580:	b112      	cbz	r2, 2a588 <uarte_nrfx_configure+0x2c>
   2a582:	2a02      	cmp	r2, #2
   2a584:	d113      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2a586:	220e      	movs	r2, #14
	switch (baudrate) {
   2a588:	f647 2712 	movw	r7, #31250	; 0x7a12
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2a58c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   2a58e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   2a590:	42bb      	cmp	r3, r7
	return config->uarte_regs;
   2a592:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2a594:	d063      	beq.n	2a65e <uarte_nrfx_configure+0x102>
   2a596:	d829      	bhi.n	2a5ec <uarte_nrfx_configure+0x90>
   2a598:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2a59c:	d062      	beq.n	2a664 <uarte_nrfx_configure+0x108>
   2a59e:	d814      	bhi.n	2a5ca <uarte_nrfx_configure+0x6e>
   2a5a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2a5a4:	d060      	beq.n	2a668 <uarte_nrfx_configure+0x10c>
   2a5a6:	d807      	bhi.n	2a5b8 <uarte_nrfx_configure+0x5c>
   2a5a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   2a5ac:	d05f      	beq.n	2a66e <uarte_nrfx_configure+0x112>
		return -ENOTSUP;
   2a5ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a5b2:	e053      	b.n	2a65c <uarte_nrfx_configure+0x100>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2a5b4:	2600      	movs	r6, #0
   2a5b6:	e7d8      	b.n	2a56a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   2a5b8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2a5bc:	d05a      	beq.n	2a674 <uarte_nrfx_configure+0x118>
   2a5be:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2a5c2:	d1f4      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2a5c4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2a5c8:	e03c      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a5ca:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2a5ce:	d054      	beq.n	2a67a <uarte_nrfx_configure+0x11e>
   2a5d0:	d804      	bhi.n	2a5dc <uarte_nrfx_configure+0x80>
   2a5d2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   2a5d6:	d1ea      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2a5d8:	4b33      	ldr	r3, [pc, #204]	; (2a6a8 <uarte_nrfx_configure+0x14c>)
   2a5da:	e033      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a5dc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2a5e0:	d04d      	beq.n	2a67e <uarte_nrfx_configure+0x122>
   2a5e2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2a5e6:	d1e2      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2a5e8:	4b30      	ldr	r3, [pc, #192]	; (2a6ac <uarte_nrfx_configure+0x150>)
   2a5ea:	e02b      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a5ec:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   2a5f0:	d047      	beq.n	2a682 <uarte_nrfx_configure+0x126>
   2a5f2:	d812      	bhi.n	2a61a <uarte_nrfx_configure+0xbe>
   2a5f4:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   2a5f8:	42bb      	cmp	r3, r7
   2a5fa:	d045      	beq.n	2a688 <uarte_nrfx_configure+0x12c>
   2a5fc:	d805      	bhi.n	2a60a <uarte_nrfx_configure+0xae>
   2a5fe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   2a602:	d1d4      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2a604:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2a608:	e01c      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a60a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   2a60e:	d03e      	beq.n	2a68e <uarte_nrfx_configure+0x132>
   2a610:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   2a614:	d1cb      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2a616:	4b26      	ldr	r3, [pc, #152]	; (2a6b0 <uarte_nrfx_configure+0x154>)
   2a618:	e014      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a61a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   2a61e:	d039      	beq.n	2a694 <uarte_nrfx_configure+0x138>
   2a620:	d808      	bhi.n	2a634 <uarte_nrfx_configure+0xd8>
   2a622:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2a626:	d038      	beq.n	2a69a <uarte_nrfx_configure+0x13e>
   2a628:	4f22      	ldr	r7, [pc, #136]	; (2a6b4 <uarte_nrfx_configure+0x158>)
   2a62a:	42bb      	cmp	r3, r7
   2a62c:	d1bf      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2a62e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2a632:	e007      	b.n	2a644 <uarte_nrfx_configure+0xe8>
	switch (baudrate) {
   2a634:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   2a638:	d032      	beq.n	2a6a0 <uarte_nrfx_configure+0x144>
   2a63a:	4f1f      	ldr	r7, [pc, #124]	; (2a6b8 <uarte_nrfx_configure+0x15c>)
   2a63c:	42bb      	cmp	r3, r7
   2a63e:	d1b6      	bne.n	2a5ae <uarte_nrfx_configure+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2a640:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2a644:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   2a648:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   2a64a:	4334      	orrs	r4, r6
   2a64c:	4322      	orrs	r2, r4
   2a64e:	3304      	adds	r3, #4
   2a650:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2a652:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   2a656:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   2a65a:	2000      	movs	r0, #0
}
   2a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2a65e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2a662:	e7ef      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2a664:	4b15      	ldr	r3, [pc, #84]	; (2a6bc <uarte_nrfx_configure+0x160>)
   2a666:	e7ed      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00027000;
   2a668:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2a66c:	e7ea      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = 0x00014000;
   2a66e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2a672:	e7e7      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2a674:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2a678:	e7e4      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2a67a:	4b11      	ldr	r3, [pc, #68]	; (2a6c0 <uarte_nrfx_configure+0x164>)
   2a67c:	e7e2      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2a67e:	4b11      	ldr	r3, [pc, #68]	; (2a6c4 <uarte_nrfx_configure+0x168>)
   2a680:	e7e0      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2a682:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2a686:	e7dd      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2a688:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2a68c:	e7da      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2a68e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2a692:	e7d7      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2a694:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2a698:	e7d4      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2a69a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2a69e:	e7d1      	b.n	2a644 <uarte_nrfx_configure+0xe8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2a6a0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2a6a4:	e7ce      	b.n	2a644 <uarte_nrfx_configure+0xe8>
   2a6a6:	bf00      	nop
   2a6a8:	00275000 	.word	0x00275000
   2a6ac:	0075c000 	.word	0x0075c000
   2a6b0:	013a9000 	.word	0x013a9000
   2a6b4:	0003d090 	.word	0x0003d090
   2a6b8:	000f4240 	.word	0x000f4240
   2a6bc:	0013b000 	.word	0x0013b000
   2a6c0:	003af000 	.word	0x003af000
   2a6c4:	004ea000 	.word	0x004ea000

0002a6c8 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a6c8:	6803      	ldr	r3, [r0, #0]
{
   2a6ca:	b510      	push	{r4, lr}
    switch (port)
   2a6cc:	095a      	lsrs	r2, r3, #5
   2a6ce:	bf0c      	ite	eq
   2a6d0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2a6d4:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   2a6d6:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2a6da:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a6de:	07db      	lsls	r3, r3, #31
{
   2a6e0:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2a6e2:	d40b      	bmi.n	2a6fc <nrf_gpio_pin_port_decode+0x34>
   2a6e4:	490f      	ldr	r1, [pc, #60]	; (2a724 <nrf_gpio_pin_port_decode+0x5c>)
   2a6e6:	4810      	ldr	r0, [pc, #64]	; (2a728 <nrf_gpio_pin_port_decode+0x60>)
   2a6e8:	f240 231a 	movw	r3, #538	; 0x21a
   2a6ec:	4a0f      	ldr	r2, [pc, #60]	; (2a72c <nrf_gpio_pin_port_decode+0x64>)
   2a6ee:	f019 fdef 	bl	442d0 <printk>
   2a6f2:	f240 211a 	movw	r1, #538	; 0x21a
   2a6f6:	480d      	ldr	r0, [pc, #52]	; (2a72c <nrf_gpio_pin_port_decode+0x64>)
   2a6f8:	f01a f804 	bl	44704 <assert_post_action>
    uint32_t pin_number = *p_pin;
   2a6fc:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   2a6fe:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a702:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   2a704:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2a706:	d00b      	beq.n	2a720 <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   2a708:	4909      	ldr	r1, [pc, #36]	; (2a730 <nrf_gpio_pin_port_decode+0x68>)
   2a70a:	4807      	ldr	r0, [pc, #28]	; (2a728 <nrf_gpio_pin_port_decode+0x60>)
   2a70c:	f240 231f 	movw	r3, #543	; 0x21f
   2a710:	4a06      	ldr	r2, [pc, #24]	; (2a72c <nrf_gpio_pin_port_decode+0x64>)
   2a712:	f019 fddd 	bl	442d0 <printk>
   2a716:	f240 211f 	movw	r1, #543	; 0x21f
   2a71a:	4804      	ldr	r0, [pc, #16]	; (2a72c <nrf_gpio_pin_port_decode+0x64>)
   2a71c:	f019 fff2 	bl	44704 <assert_post_action>
}
   2a720:	4804      	ldr	r0, [pc, #16]	; (2a734 <nrf_gpio_pin_port_decode+0x6c>)
   2a722:	bd10      	pop	{r4, pc}
   2a724:	0004d8f9 	.word	0x0004d8f9
   2a728:	0004b33b 	.word	0x0004b33b
   2a72c:	0004d8c6 	.word	0x0004d8c6
   2a730:	00052672 	.word	0x00052672
   2a734:	40842500 	.word	0x40842500

0002a738 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2a738:	b530      	push	{r4, r5, lr}
   2a73a:	b085      	sub	sp, #20
   2a73c:	466c      	mov	r4, sp
   2a73e:	4605      	mov	r5, r0
   2a740:	4b08      	ldr	r3, [pc, #32]	; (2a764 <uarte_1_init+0x2c>)
   2a742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a748:	2200      	movs	r2, #0
   2a74a:	2101      	movs	r1, #1
   2a74c:	2009      	movs	r0, #9
   2a74e:	f7fc ffe3 	bl	27718 <z_arm_irq_priority_set>
   2a752:	2009      	movs	r0, #9
   2a754:	f7fc ffc2 	bl	276dc <arch_irq_enable>
   2a758:	4621      	mov	r1, r4
   2a75a:	4628      	mov	r0, r5
   2a75c:	f01c fa4e 	bl	46bfc <uarte_instance_init.constprop.4>
   2a760:	b005      	add	sp, #20
   2a762:	bd30      	pop	{r4, r5, pc}
   2a764:	00049918 	.word	0x00049918

0002a768 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   2a768:	b530      	push	{r4, r5, lr}
   2a76a:	b085      	sub	sp, #20
   2a76c:	466c      	mov	r4, sp
   2a76e:	4605      	mov	r5, r0
   2a770:	4b08      	ldr	r3, [pc, #32]	; (2a794 <uarte_0_init+0x2c>)
   2a772:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   2a774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   2a778:	2200      	movs	r2, #0
   2a77a:	2101      	movs	r1, #1
   2a77c:	2008      	movs	r0, #8
   2a77e:	f7fc ffcb 	bl	27718 <z_arm_irq_priority_set>
   2a782:	2008      	movs	r0, #8
   2a784:	f7fc ffaa 	bl	276dc <arch_irq_enable>
   2a788:	4621      	mov	r1, r4
   2a78a:	4628      	mov	r0, r5
   2a78c:	f01c fa36 	bl	46bfc <uarte_instance_init.constprop.4>
   2a790:	b005      	add	sp, #20
   2a792:	bd30      	pop	{r4, r5, pc}
   2a794:	00049928 	.word	0x00049928

0002a798 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2a798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a79c:	4688      	mov	r8, r1
   2a79e:	b0a6      	sub	sp, #152	; 0x98
   2a7a0:	4614      	mov	r4, r2
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   2a7a2:	b948      	cbnz	r0, 2a7b8 <entropy_cc3xx_rng_get_entropy+0x20>
   2a7a4:	491c      	ldr	r1, [pc, #112]	; (2a818 <entropy_cc3xx_rng_get_entropy+0x80>)
   2a7a6:	481d      	ldr	r0, [pc, #116]	; (2a81c <entropy_cc3xx_rng_get_entropy+0x84>)
   2a7a8:	231f      	movs	r3, #31
   2a7aa:	4a1d      	ldr	r2, [pc, #116]	; (2a820 <entropy_cc3xx_rng_get_entropy+0x88>)
   2a7ac:	f019 fd90 	bl	442d0 <printk>
   2a7b0:	211f      	movs	r1, #31
   2a7b2:	481b      	ldr	r0, [pc, #108]	; (2a820 <entropy_cc3xx_rng_get_entropy+0x88>)
   2a7b4:	f019 ffa6 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   2a7b8:	f1b8 0f00 	cmp.w	r8, #0
   2a7bc:	d109      	bne.n	2a7d2 <entropy_cc3xx_rng_get_entropy+0x3a>
   2a7be:	4919      	ldr	r1, [pc, #100]	; (2a824 <entropy_cc3xx_rng_get_entropy+0x8c>)
   2a7c0:	4816      	ldr	r0, [pc, #88]	; (2a81c <entropy_cc3xx_rng_get_entropy+0x84>)
   2a7c2:	2320      	movs	r3, #32
   2a7c4:	4a16      	ldr	r2, [pc, #88]	; (2a820 <entropy_cc3xx_rng_get_entropy+0x88>)
   2a7c6:	f019 fd83 	bl	442d0 <printk>
   2a7ca:	2120      	movs	r1, #32
   2a7cc:	4814      	ldr	r0, [pc, #80]	; (2a820 <entropy_cc3xx_rng_get_entropy+0x88>)
   2a7ce:	f019 ff99 	bl	44704 <assert_post_action>
{
   2a7d2:	2600      	movs	r6, #0
   2a7d4:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   2a7d8:	b91c      	cbnz	r4, 2a7e2 <entropy_cc3xx_rng_get_entropy+0x4a>
		return -EINVAL;
	}
#endif

	return res;
}
   2a7da:	4628      	mov	r0, r5
   2a7dc:	b026      	add	sp, #152	; 0x98
   2a7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   2a7e2:	aa01      	add	r2, sp, #4
   2a7e4:	2190      	movs	r1, #144	; 0x90
   2a7e6:	a802      	add	r0, sp, #8
   2a7e8:	f7ed fc02 	bl	17ff0 <spm_request_random_number>
		if (res < 0) {
   2a7ec:	1e05      	subs	r5, r0, #0
   2a7ee:	dbf4      	blt.n	2a7da <entropy_cc3xx_rng_get_entropy+0x42>
		if (olen != sizeof(spm_buf)) {
   2a7f0:	9b01      	ldr	r3, [sp, #4]
   2a7f2:	2b90      	cmp	r3, #144	; 0x90
   2a7f4:	d10d      	bne.n	2a812 <entropy_cc3xx_rng_get_entropy+0x7a>
		to_copy = MIN(length, sizeof(spm_buf));
   2a7f6:	2c90      	cmp	r4, #144	; 0x90
   2a7f8:	4627      	mov	r7, r4
   2a7fa:	bf28      	it	cs
   2a7fc:	2790      	movcs	r7, #144	; 0x90
   2a7fe:	eb08 0006 	add.w	r0, r8, r6
   2a802:	463a      	mov	r2, r7
   2a804:	a902      	add	r1, sp, #8
		length -= to_copy;
   2a806:	1be4      	subs	r4, r4, r7
   2a808:	f01d fcbe 	bl	48188 <memcpy>
   2a80c:	b2a4      	uxth	r4, r4
		offset += to_copy;
   2a80e:	443e      	add	r6, r7
   2a810:	e7e2      	b.n	2a7d8 <entropy_cc3xx_rng_get_entropy+0x40>
			return -EINVAL;
   2a812:	f06f 0515 	mvn.w	r5, #21
   2a816:	e7e0      	b.n	2a7da <entropy_cc3xx_rng_get_entropy+0x42>
   2a818:	0004d963 	.word	0x0004d963
   2a81c:	0004b33b 	.word	0x0004b33b
   2a820:	0004d933 	.word	0x0004d933
   2a824:	0004d976 	.word	0x0004d976

0002a828 <parse_string>:
{
   2a828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2a82c:	680a      	ldr	r2, [r1, #0]
   2a82e:	688b      	ldr	r3, [r1, #8]
{
   2a830:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2a832:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2a834:	18d0      	adds	r0, r2, r3
   2a836:	5cd3      	ldrb	r3, [r2, r3]
{
   2a838:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2a83a:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2a83c:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2a83e:	f040 80d6 	bne.w	2a9ee <parse_string+0x1c6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2a842:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   2a844:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   2a846:	684c      	ldr	r4, [r1, #4]
   2a848:	1ab9      	subs	r1, r7, r2
   2a84a:	42a1      	cmp	r1, r4
   2a84c:	f080 80cf 	bcs.w	2a9ee <parse_string+0x1c6>
   2a850:	7839      	ldrb	r1, [r7, #0]
   2a852:	2922      	cmp	r1, #34	; 0x22
   2a854:	d10e      	bne.n	2a874 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2a856:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   2a85a:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   2a85c:	f8da 2010 	ldr.w	r2, [sl, #16]
   2a860:	4418      	add	r0, r3
   2a862:	4790      	blx	r2
        if (output == NULL)
   2a864:	4683      	mov	fp, r0
   2a866:	2800      	cmp	r0, #0
   2a868:	f000 80c1 	beq.w	2a9ee <parse_string+0x1c6>
   2a86c:	4604      	mov	r4, r0
                    *output_pointer++ = '\f';
   2a86e:	f04f 090c 	mov.w	r9, #12
   2a872:	e00f      	b.n	2a894 <parse_string+0x6c>
            if (input_end[0] == '\\')
   2a874:	295c      	cmp	r1, #92	; 0x5c
   2a876:	d105      	bne.n	2a884 <parse_string+0x5c>
   2a878:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   2a87a:	1ab9      	subs	r1, r7, r2
   2a87c:	428c      	cmp	r4, r1
   2a87e:	f240 80b6 	bls.w	2a9ee <parse_string+0x1c6>
                skipped_bytes++;
   2a882:	3301      	adds	r3, #1
            input_end++;
   2a884:	3701      	adds	r7, #1
   2a886:	e7df      	b.n	2a848 <parse_string+0x20>
        if (*input_pointer != '\\')
   2a888:	782b      	ldrb	r3, [r5, #0]
   2a88a:	2b5c      	cmp	r3, #92	; 0x5c
   2a88c:	d012      	beq.n	2a8b4 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   2a88e:	3501      	adds	r5, #1
   2a890:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   2a894:	42bd      	cmp	r5, r7
   2a896:	d3f7      	bcc.n	2a888 <parse_string+0x60>
    *output_pointer = '\0';
   2a898:	2300      	movs	r3, #0
   2a89a:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   2a89c:	2310      	movs	r3, #16
    return true;
   2a89e:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   2a8a0:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   2a8a4:	f8da 3000 	ldr.w	r3, [sl]
   2a8a8:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   2a8aa:	3701      	adds	r7, #1
   2a8ac:	f8ca 7008 	str.w	r7, [sl, #8]
}
   2a8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   2a8b4:	1b7a      	subs	r2, r7, r5
   2a8b6:	2a00      	cmp	r2, #0
   2a8b8:	dd08      	ble.n	2a8cc <parse_string+0xa4>
            switch (input_pointer[1])
   2a8ba:	786b      	ldrb	r3, [r5, #1]
   2a8bc:	2b66      	cmp	r3, #102	; 0x66
   2a8be:	d063      	beq.n	2a988 <parse_string+0x160>
   2a8c0:	d816      	bhi.n	2a8f0 <parse_string+0xc8>
   2a8c2:	2b2f      	cmp	r3, #47	; 0x2f
   2a8c4:	d011      	beq.n	2a8ea <parse_string+0xc2>
   2a8c6:	d80b      	bhi.n	2a8e0 <parse_string+0xb8>
   2a8c8:	2b22      	cmp	r3, #34	; 0x22
   2a8ca:	d00e      	beq.n	2a8ea <parse_string+0xc2>
        input_buffer->hooks.deallocate(output);
   2a8cc:	f8da 3014 	ldr.w	r3, [sl, #20]
   2a8d0:	4658      	mov	r0, fp
   2a8d2:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2a8d4:	f8da 0000 	ldr.w	r0, [sl]
   2a8d8:	1a28      	subs	r0, r5, r0
   2a8da:	f8ca 0008 	str.w	r0, [sl, #8]
   2a8de:	e089      	b.n	2a9f4 <parse_string+0x1cc>
            switch (input_pointer[1])
   2a8e0:	2b5c      	cmp	r3, #92	; 0x5c
   2a8e2:	d002      	beq.n	2a8ea <parse_string+0xc2>
   2a8e4:	2b62      	cmp	r3, #98	; 0x62
   2a8e6:	d1f1      	bne.n	2a8cc <parse_string+0xa4>
                    *output_pointer++ = '\b';
   2a8e8:	2308      	movs	r3, #8
                    *output_pointer++ = input_pointer[1];
   2a8ea:	f804 3b01 	strb.w	r3, [r4], #1
                    break;
   2a8ee:	e04d      	b.n	2a98c <parse_string+0x164>
            switch (input_pointer[1])
   2a8f0:	2b72      	cmp	r3, #114	; 0x72
   2a8f2:	d04e      	beq.n	2a992 <parse_string+0x16a>
   2a8f4:	d803      	bhi.n	2a8fe <parse_string+0xd6>
   2a8f6:	2b6e      	cmp	r3, #110	; 0x6e
   2a8f8:	d1e8      	bne.n	2a8cc <parse_string+0xa4>
                    *output_pointer++ = '\n';
   2a8fa:	230a      	movs	r3, #10
   2a8fc:	e7f5      	b.n	2a8ea <parse_string+0xc2>
            switch (input_pointer[1])
   2a8fe:	2b74      	cmp	r3, #116	; 0x74
   2a900:	d04a      	beq.n	2a998 <parse_string+0x170>
   2a902:	2b75      	cmp	r3, #117	; 0x75
   2a904:	d1e2      	bne.n	2a8cc <parse_string+0xa4>
    if ((input_end - first_sequence) < 6)
   2a906:	2a05      	cmp	r2, #5
   2a908:	dde0      	ble.n	2a8cc <parse_string+0xa4>
    first_code = parse_hex4(first_sequence + 2);
   2a90a:	1ca8      	adds	r0, r5, #2
   2a90c:	f01c f9f4 	bl	46cf8 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2a910:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2a914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   2a918:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2a91a:	d3d7      	bcc.n	2a8cc <parse_string+0xa4>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   2a91c:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   2a920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a924:	d23b      	bcs.n	2a99e <parse_string+0x176>
        const unsigned char *second_sequence = first_sequence + 6;
   2a926:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   2a928:	1afb      	subs	r3, r7, r3
   2a92a:	2b05      	cmp	r3, #5
   2a92c:	ddce      	ble.n	2a8cc <parse_string+0xa4>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   2a92e:	79ab      	ldrb	r3, [r5, #6]
   2a930:	2b5c      	cmp	r3, #92	; 0x5c
   2a932:	d1cb      	bne.n	2a8cc <parse_string+0xa4>
   2a934:	79eb      	ldrb	r3, [r5, #7]
   2a936:	2b75      	cmp	r3, #117	; 0x75
   2a938:	d1c8      	bne.n	2a8cc <parse_string+0xa4>
        second_code = parse_hex4(second_sequence + 2);
   2a93a:	f105 0008 	add.w	r0, r5, #8
   2a93e:	f01c f9db 	bl	46cf8 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   2a942:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   2a946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a94a:	d2bf      	bcs.n	2a8cc <parse_string+0xa4>
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2a94c:	4b2a      	ldr	r3, [pc, #168]	; (2a9f8 <parse_string+0x1d0>)
   2a94e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   2a952:	ea03 2686 	and.w	r6, r3, r6, lsl #10
        sequence_length = 12; /* \uXXXX\uXXXX */
   2a956:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2a958:	4306      	orrs	r6, r0
   2a95a:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   2a95e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
        utf8_length = 4;
   2a962:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2a964:	1e48      	subs	r0, r1, #1
   2a966:	b240      	sxtb	r0, r0
   2a968:	fa5f fe80 	uxtb.w	lr, r0
   2a96c:	4420      	add	r0, r4
   2a96e:	b2f2      	uxtb	r2, r6
   2a970:	f1be 0f00 	cmp.w	lr, #0
   2a974:	d12f      	bne.n	2a9d6 <parse_string+0x1ae>
    if (utf8_length > 1)
   2a976:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   2a978:	bf14      	ite	ne
   2a97a:	ea4c 0202 	orrne.w	r2, ip, r2
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   2a97e:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   2a982:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   2a984:	440c      	add	r4, r1
                    if (sequence_length == 0)
   2a986:	e002      	b.n	2a98e <parse_string+0x166>
                    *output_pointer++ = '\f';
   2a988:	f804 9b01 	strb.w	r9, [r4], #1
            unsigned char sequence_length = 2;
   2a98c:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   2a98e:	441d      	add	r5, r3
   2a990:	e780      	b.n	2a894 <parse_string+0x6c>
                    *output_pointer++ = '\r';
   2a992:	f04f 030d 	mov.w	r3, #13
   2a996:	e7a8      	b.n	2a8ea <parse_string+0xc2>
                    *output_pointer++ = '\t';
   2a998:	f04f 0309 	mov.w	r3, #9
   2a99c:	e7a5      	b.n	2a8ea <parse_string+0xc2>
    if (codepoint < 0x80)
   2a99e:	287f      	cmp	r0, #127	; 0x7f
   2a9a0:	d90a      	bls.n	2a9b8 <parse_string+0x190>
    else if (codepoint < 0x800)
   2a9a2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   2a9a6:	d30c      	bcc.n	2a9c2 <parse_string+0x19a>
    else if (codepoint < 0x10000)
   2a9a8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   2a9ac:	d30e      	bcc.n	2a9cc <parse_string+0x1a4>
    else if (codepoint <= 0x10FFFF)
   2a9ae:	4b13      	ldr	r3, [pc, #76]	; (2a9fc <parse_string+0x1d4>)
   2a9b0:	4298      	cmp	r0, r3
   2a9b2:	d88b      	bhi.n	2a8cc <parse_string+0xa4>
        sequence_length = 6; /* \uXXXX */
   2a9b4:	2306      	movs	r3, #6
   2a9b6:	e7d2      	b.n	2a95e <parse_string+0x136>
   2a9b8:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   2a9ba:	f04f 0c00 	mov.w	ip, #0
        utf8_length = 1;
   2a9be:	2101      	movs	r1, #1
   2a9c0:	e7d0      	b.n	2a964 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   2a9c2:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   2a9c4:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
        utf8_length = 2;
   2a9c8:	2102      	movs	r1, #2
   2a9ca:	e7cb      	b.n	2a964 <parse_string+0x13c>
        sequence_length = 6; /* \uXXXX */
   2a9cc:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   2a9ce:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
        utf8_length = 3;
   2a9d2:	2103      	movs	r1, #3
   2a9d4:	e7c6      	b.n	2a964 <parse_string+0x13c>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2a9d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2a9da:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2a9de:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2a9e2:	f800 2901 	strb.w	r2, [r0], #-1
        codepoint >>= 6;
   2a9e6:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2a9e8:	fa5f fe8e 	uxtb.w	lr, lr
   2a9ec:	e7bf      	b.n	2a96e <parse_string+0x146>
    if (input_pointer != NULL)
   2a9ee:	2d00      	cmp	r5, #0
   2a9f0:	f47f af70 	bne.w	2a8d4 <parse_string+0xac>
    return false;
   2a9f4:	2000      	movs	r0, #0
   2a9f6:	e75b      	b.n	2a8b0 <parse_string+0x88>
   2a9f8:	000ffc00 	.word	0x000ffc00
   2a9fc:	0010ffff 	.word	0x0010ffff

0002aa00 <get_object_item>:
{
   2aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa02:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   2aa04:	b360      	cbz	r0, 2aa60 <get_object_item+0x60>
   2aa06:	b359      	cbz	r1, 2aa60 <get_object_item+0x60>
    current_element = object->child;
   2aa08:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   2aa0a:	b9fa      	cbnz	r2, 2aa4c <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2aa0c:	4e17      	ldr	r6, [pc, #92]	; (2aa6c <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   2aa0e:	b33c      	cbz	r4, 2aa60 <get_object_item+0x60>
   2aa10:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   2aa12:	b1c3      	cbz	r3, 2aa46 <get_object_item+0x46>
    if (string1 == string2)
   2aa14:	42ab      	cmp	r3, r5
   2aa16:	d021      	beq.n	2aa5c <get_object_item+0x5c>
   2aa18:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   2aa1c:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   2aa1e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   2aa22:	460f      	mov	r7, r1
   2aa24:	5d8a      	ldrb	r2, [r1, r6]
   2aa26:	f002 0203 	and.w	r2, r2, #3
   2aa2a:	2a01      	cmp	r2, #1
   2aa2c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2aa30:	bf08      	it	eq
   2aa32:	f101 0720 	addeq.w	r7, r1, #32
   2aa36:	5cb0      	ldrb	r0, [r6, r2]
   2aa38:	f000 0003 	and.w	r0, r0, #3
   2aa3c:	2801      	cmp	r0, #1
   2aa3e:	bf08      	it	eq
   2aa40:	3220      	addeq	r2, #32
   2aa42:	4297      	cmp	r7, r2
   2aa44:	d00f      	beq.n	2aa66 <get_object_item+0x66>
            current_element = current_element->next;
   2aa46:	6824      	ldr	r4, [r4, #0]
   2aa48:	e7e1      	b.n	2aa0e <get_object_item+0xe>
            current_element = current_element->next;
   2aa4a:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   2aa4c:	b144      	cbz	r4, 2aa60 <get_object_item+0x60>
   2aa4e:	6a21      	ldr	r1, [r4, #32]
   2aa50:	b121      	cbz	r1, 2aa5c <get_object_item+0x5c>
   2aa52:	4628      	mov	r0, r5
   2aa54:	f7f2 fbfc 	bl	1d250 <strcmp>
   2aa58:	2800      	cmp	r0, #0
   2aa5a:	d1f6      	bne.n	2aa4a <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   2aa5c:	6a23      	ldr	r3, [r4, #32]
   2aa5e:	b903      	cbnz	r3, 2aa62 <get_object_item+0x62>
        return NULL;
   2aa60:	2400      	movs	r4, #0
}
   2aa62:	4620      	mov	r0, r4
   2aa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   2aa66:	2900      	cmp	r1, #0
   2aa68:	d1d9      	bne.n	2aa1e <get_object_item+0x1e>
   2aa6a:	e7f7      	b.n	2aa5c <get_object_item+0x5c>
   2aa6c:	00052acf 	.word	0x00052acf

0002aa70 <print_string_ptr>:
{
   2aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa74:	4683      	mov	fp, r0
   2aa76:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   2aa78:	460f      	mov	r7, r1
   2aa7a:	b919      	cbnz	r1, 2aa84 <print_string_ptr+0x14>
        return false;
   2aa7c:	2000      	movs	r0, #0
}
   2aa7e:	b005      	add	sp, #20
   2aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   2aa84:	4b48      	ldr	r3, [pc, #288]	; (2aba8 <print_string_ptr+0x138>)
   2aa86:	881a      	ldrh	r2, [r3, #0]
   2aa88:	789b      	ldrb	r3, [r3, #2]
   2aa8a:	f8ad 200c 	strh.w	r2, [sp, #12]
   2aa8e:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   2aa92:	b318      	cbz	r0, 2aadc <print_string_ptr+0x6c>
   2aa94:	4602      	mov	r2, r0
    size_t escape_characters = 0;
   2aa96:	2500      	movs	r5, #0
   2aa98:	4692      	mov	sl, r2
    for (input_pointer = input; *input_pointer; input_pointer++)
   2aa9a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2aa9e:	bb5b      	cbnz	r3, 2aaf8 <print_string_ptr+0x88>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   2aaa0:	ebaa 0a0b 	sub.w	sl, sl, fp
   2aaa4:	44aa      	add	sl, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   2aaa6:	f10a 0103 	add.w	r1, sl, #3
   2aaaa:	4638      	mov	r0, r7
   2aaac:	f01c f98b 	bl	46dc6 <ensure>
    if (output == NULL)
   2aab0:	4606      	mov	r6, r0
   2aab2:	2800      	cmp	r0, #0
   2aab4:	d0e2      	beq.n	2aa7c <print_string_ptr+0xc>
    if (escape_characters == 0)
   2aab6:	2322      	movs	r3, #34	; 0x22
   2aab8:	1c44      	adds	r4, r0, #1
   2aaba:	f10a 0901 	add.w	r9, sl, #1
   2aabe:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   2aac2:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   2aac4:	bb55      	cbnz	r5, 2ab1c <print_string_ptr+0xac>
   2aac6:	4652      	mov	r2, sl
   2aac8:	4659      	mov	r1, fp
   2aaca:	4620      	mov	r0, r4
   2aacc:	f01d fb5c 	bl	48188 <memcpy>
        output[output_length + 1] = '\"';
   2aad0:	2322      	movs	r3, #34	; 0x22
   2aad2:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   2aad6:	f806 5008 	strb.w	r5, [r6, r8]
        return true;
   2aada:	e00b      	b.n	2aaf4 <print_string_ptr+0x84>
        output = ensure(output_buffer, sizeof(quotes));
   2aadc:	2103      	movs	r1, #3
   2aade:	4638      	mov	r0, r7
   2aae0:	f01c f971 	bl	46dc6 <ensure>
        if (output == NULL)
   2aae4:	2800      	cmp	r0, #0
   2aae6:	d0c9      	beq.n	2aa7c <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   2aae8:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2aaec:	a903      	add	r1, sp, #12
   2aaee:	1ad2      	subs	r2, r2, r3
   2aaf0:	f01d fd55 	bl	4859e <strncpy>
    return true;
   2aaf4:	2001      	movs	r0, #1
   2aaf6:	e7c2      	b.n	2aa7e <print_string_ptr+0xe>
        switch (*input_pointer)
   2aaf8:	2b0d      	cmp	r3, #13
   2aafa:	d807      	bhi.n	2ab0c <print_string_ptr+0x9c>
   2aafc:	2b0c      	cmp	r3, #12
   2aafe:	d203      	bcs.n	2ab08 <print_string_ptr+0x98>
   2ab00:	f1a3 0108 	sub.w	r1, r3, #8
   2ab04:	2902      	cmp	r1, #2
   2ab06:	d805      	bhi.n	2ab14 <print_string_ptr+0xa4>
                escape_characters++;
   2ab08:	3501      	adds	r5, #1
                break;
   2ab0a:	e7c5      	b.n	2aa98 <print_string_ptr+0x28>
        switch (*input_pointer)
   2ab0c:	2b22      	cmp	r3, #34	; 0x22
   2ab0e:	d0fb      	beq.n	2ab08 <print_string_ptr+0x98>
   2ab10:	2b5c      	cmp	r3, #92	; 0x5c
   2ab12:	d0f9      	beq.n	2ab08 <print_string_ptr+0x98>
                if (*input_pointer < 32)
   2ab14:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2ab16:	bf98      	it	ls
   2ab18:	3505      	addls	r5, #5
   2ab1a:	e7bd      	b.n	2aa98 <print_string_ptr+0x28>
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2ab1c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
                    *output_pointer = 'f';
   2ab20:	f04f 0a66 	mov.w	sl, #102	; 0x66
            *output_pointer++ = '\\';
   2ab24:	f04f 0b5c 	mov.w	fp, #92	; 0x5c
   2ab28:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2ab2a:	9a01      	ldr	r2, [sp, #4]
   2ab2c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2ab30:	9201      	str	r2, [sp, #4]
   2ab32:	b92b      	cbnz	r3, 2ab40 <print_string_ptr+0xd0>
    output[output_length + 1] = '\"';
   2ab34:	2222      	movs	r2, #34	; 0x22
   2ab36:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   2ab3a:	f806 3008 	strb.w	r3, [r6, r8]
   2ab3e:	e7d9      	b.n	2aaf4 <print_string_ptr+0x84>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   2ab40:	2b1f      	cmp	r3, #31
   2ab42:	d907      	bls.n	2ab54 <print_string_ptr+0xe4>
   2ab44:	2b22      	cmp	r3, #34	; 0x22
   2ab46:	d005      	beq.n	2ab54 <print_string_ptr+0xe4>
   2ab48:	2b5c      	cmp	r3, #92	; 0x5c
   2ab4a:	d003      	beq.n	2ab54 <print_string_ptr+0xe4>
            *output_pointer = *input_pointer;
   2ab4c:	4620      	mov	r0, r4
   2ab4e:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2ab50:	1c44      	adds	r4, r0, #1
   2ab52:	e7ea      	b.n	2ab2a <print_string_ptr+0xba>
            *output_pointer++ = '\\';
   2ab54:	4620      	mov	r0, r4
            switch (*input_pointer)
   2ab56:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   2ab58:	f800 bb01 	strb.w	fp, [r0], #1
            switch (*input_pointer)
   2ab5c:	781b      	ldrb	r3, [r3, #0]
   2ab5e:	2b0c      	cmp	r3, #12
   2ab60:	d011      	beq.n	2ab86 <print_string_ptr+0x116>
   2ab62:	d808      	bhi.n	2ab76 <print_string_ptr+0x106>
   2ab64:	2b09      	cmp	r3, #9
   2ab66:	d013      	beq.n	2ab90 <print_string_ptr+0x120>
   2ab68:	2b0a      	cmp	r3, #10
   2ab6a:	d00f      	beq.n	2ab8c <print_string_ptr+0x11c>
   2ab6c:	2b08      	cmp	r3, #8
   2ab6e:	d111      	bne.n	2ab94 <print_string_ptr+0x124>
                    *output_pointer = 'b';
   2ab70:	2362      	movs	r3, #98	; 0x62
                    *output_pointer = 't';
   2ab72:	7063      	strb	r3, [r4, #1]
                    break;
   2ab74:	e7ec      	b.n	2ab50 <print_string_ptr+0xe0>
            switch (*input_pointer)
   2ab76:	2b22      	cmp	r3, #34	; 0x22
   2ab78:	d0fb      	beq.n	2ab72 <print_string_ptr+0x102>
   2ab7a:	2b5c      	cmp	r3, #92	; 0x5c
   2ab7c:	d0f9      	beq.n	2ab72 <print_string_ptr+0x102>
   2ab7e:	2b0d      	cmp	r3, #13
   2ab80:	d108      	bne.n	2ab94 <print_string_ptr+0x124>
                    *output_pointer = 'r';
   2ab82:	2372      	movs	r3, #114	; 0x72
   2ab84:	e7f5      	b.n	2ab72 <print_string_ptr+0x102>
                    *output_pointer = 'f';
   2ab86:	f884 a001 	strb.w	sl, [r4, #1]
                    break;
   2ab8a:	e7e1      	b.n	2ab50 <print_string_ptr+0xe0>
                    *output_pointer = 'n';
   2ab8c:	236e      	movs	r3, #110	; 0x6e
   2ab8e:	e7f0      	b.n	2ab72 <print_string_ptr+0x102>
                    *output_pointer = 't';
   2ab90:	2374      	movs	r3, #116	; 0x74
   2ab92:	e7ee      	b.n	2ab72 <print_string_ptr+0x102>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   2ab94:	6839      	ldr	r1, [r7, #0]
   2ab96:	687d      	ldr	r5, [r7, #4]
   2ab98:	1a41      	subs	r1, r0, r1
   2ab9a:	4a04      	ldr	r2, [pc, #16]	; (2abac <print_string_ptr+0x13c>)
   2ab9c:	1a69      	subs	r1, r5, r1
   2ab9e:	f017 fea9 	bl	428f4 <sniprintf>
                    output_pointer += 4;
   2aba2:	1d60      	adds	r0, r4, #5
                    break;
   2aba4:	e7d4      	b.n	2ab50 <print_string_ptr+0xe0>
   2aba6:	bf00      	nop
   2aba8:	0004d9a4 	.word	0x0004d9a4
   2abac:	0004d99e 	.word	0x0004d99e

0002abb0 <print_value>:
{
   2abb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2abb4:	460c      	mov	r4, r1
   2abb6:	b08d      	sub	sp, #52	; 0x34
    if ((item == NULL) || (output_buffer == NULL))
   2abb8:	4606      	mov	r6, r0
   2abba:	b908      	cbnz	r0, 2abc0 <print_value+0x10>
        return false;
   2abbc:	2500      	movs	r5, #0
   2abbe:	e01d      	b.n	2abfc <print_value+0x4c>
    if ((item == NULL) || (output_buffer == NULL))
   2abc0:	2900      	cmp	r1, #0
   2abc2:	d0fb      	beq.n	2abbc <print_value+0xc>
    switch ((item->type) & 0xFF)
   2abc4:	7b05      	ldrb	r5, [r0, #12]
   2abc6:	2d08      	cmp	r5, #8
   2abc8:	d053      	beq.n	2ac72 <print_value+0xc2>
   2abca:	dc1b      	bgt.n	2ac04 <print_value+0x54>
   2abcc:	2d02      	cmp	r5, #2
   2abce:	d04e      	beq.n	2ac6e <print_value+0xbe>
   2abd0:	2d04      	cmp	r5, #4
   2abd2:	d037      	beq.n	2ac44 <print_value+0x94>
   2abd4:	2d01      	cmp	r5, #1
   2abd6:	d1f1      	bne.n	2abbc <print_value+0xc>
            const char buff[] = "false";
   2abd8:	4b87      	ldr	r3, [pc, #540]	; (2adf8 <print_value+0x248>)
            output = ensure(output_buffer, sizeof(buff));
   2abda:	2106      	movs	r1, #6
            const char buff[] = "false";
   2abdc:	6818      	ldr	r0, [r3, #0]
   2abde:	889b      	ldrh	r3, [r3, #4]
   2abe0:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   2abe2:	4620      	mov	r0, r4
            const char buff[] = "false";
   2abe4:	f8ad 3018 	strh.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   2abe8:	f01c f8ed 	bl	46dc6 <ensure>
            if (output == NULL)
   2abec:	2800      	cmp	r0, #0
   2abee:	d0e5      	beq.n	2abbc <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   2abf0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   2abf4:	a905      	add	r1, sp, #20
   2abf6:	1ad2      	subs	r2, r2, r3
   2abf8:	f01d fcd1 	bl	4859e <strncpy>
}
   2abfc:	4628      	mov	r0, r5
   2abfe:	b00d      	add	sp, #52	; 0x34
   2ac00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch ((item->type) & 0xFF)
   2ac04:	2d20      	cmp	r5, #32
   2ac06:	d07b      	beq.n	2ad00 <print_value+0x150>
   2ac08:	dc06      	bgt.n	2ac18 <print_value+0x68>
   2ac0a:	2d10      	cmp	r5, #16
   2ac0c:	d1d6      	bne.n	2abbc <print_value+0xc>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   2ac0e:	6900      	ldr	r0, [r0, #16]
   2ac10:	f7ff ff2e 	bl	2aa70 <print_string_ptr>
   2ac14:	4605      	mov	r5, r0
   2ac16:	e7f1      	b.n	2abfc <print_value+0x4c>
    switch ((item->type) & 0xFF)
   2ac18:	2d40      	cmp	r5, #64	; 0x40
   2ac1a:	f000 80bc 	beq.w	2ad96 <print_value+0x1e6>
   2ac1e:	2d80      	cmp	r5, #128	; 0x80
   2ac20:	d1cc      	bne.n	2abbc <print_value+0xc>
            if (item->valuestring == NULL)
   2ac22:	6900      	ldr	r0, [r0, #16]
   2ac24:	2800      	cmp	r0, #0
   2ac26:	d0c9      	beq.n	2abbc <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   2ac28:	f7f2 fb1c 	bl	1d264 <strlen>
   2ac2c:	1c45      	adds	r5, r0, #1
            output = ensure(output_buffer, raw_length);
   2ac2e:	4629      	mov	r1, r5
   2ac30:	4620      	mov	r0, r4
   2ac32:	f01c f8c8 	bl	46dc6 <ensure>
            if (output == NULL)
   2ac36:	2800      	cmp	r0, #0
   2ac38:	d0c0      	beq.n	2abbc <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ac3a:	462a      	mov	r2, r5
   2ac3c:	6931      	ldr	r1, [r6, #16]
   2ac3e:	f01d faa3 	bl	48188 <memcpy>
   2ac42:	e012      	b.n	2ac6a <print_value+0xba>
            const char buff[] = "null";
   2ac44:	4b6d      	ldr	r3, [pc, #436]	; (2adfc <print_value+0x24c>)
            const char buff[] = "true";
   2ac46:	6818      	ldr	r0, [r3, #0]
   2ac48:	791b      	ldrb	r3, [r3, #4]
   2ac4a:	9005      	str	r0, [sp, #20]
            output = ensure(output_buffer, sizeof(buff));
   2ac4c:	2105      	movs	r1, #5
   2ac4e:	4620      	mov	r0, r4
            const char buff[] = "true";
   2ac50:	f88d 3018 	strb.w	r3, [sp, #24]
            output = ensure(output_buffer, sizeof(buff));
   2ac54:	f01c f8b7 	bl	46dc6 <ensure>
            if (output == NULL)
   2ac58:	4605      	mov	r5, r0
   2ac5a:	2800      	cmp	r0, #0
   2ac5c:	d0ce      	beq.n	2abfc <print_value+0x4c>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   2ac5e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2ac62:	a905      	add	r1, sp, #20
   2ac64:	1ad2      	subs	r2, r2, r3
   2ac66:	f01d fc9a 	bl	4859e <strncpy>
    return true;
   2ac6a:	2501      	movs	r5, #1
   2ac6c:	e7c6      	b.n	2abfc <print_value+0x4c>
            const char buff[] = "true";
   2ac6e:	4b64      	ldr	r3, [pc, #400]	; (2ae00 <print_value+0x250>)
   2ac70:	e7e9      	b.n	2ac46 <print_value+0x96>
    double d = item->valuedouble;
   2ac72:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   2ac76:	2200      	movs	r2, #0
   2ac78:	2300      	movs	r3, #0
   2ac7a:	4640      	mov	r0, r8
   2ac7c:	4649      	mov	r1, r9
   2ac7e:	f7f1 fd9b 	bl	1c7b8 <__aeabi_dmul>
   2ac82:	2200      	movs	r2, #0
   2ac84:	2300      	movs	r3, #0
   2ac86:	f7f1 ffff 	bl	1cc88 <__aeabi_dcmpeq>
   2ac8a:	ae05      	add	r6, sp, #20
   2ac8c:	b9b0      	cbnz	r0, 2acbc <print_value+0x10c>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   2ac8e:	495b      	ldr	r1, [pc, #364]	; (2adfc <print_value+0x24c>)
   2ac90:	4630      	mov	r0, r6
   2ac92:	f01d fc4e 	bl	48532 <strcpy>
   2ac96:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   2ac98:	1c69      	adds	r1, r5, #1
   2ac9a:	4620      	mov	r0, r4
   2ac9c:	f01c f893 	bl	46dc6 <ensure>
    if (output_pointer == NULL)
   2aca0:	2800      	cmp	r0, #0
   2aca2:	d08b      	beq.n	2abbc <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   2aca4:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   2aca6:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   2aca8:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   2acaa:	3301      	adds	r3, #1
   2acac:	429d      	cmp	r5, r3
   2acae:	d1fa      	bne.n	2aca6 <print_value+0xf6>
    output_pointer[i] = '\0';
   2acb0:	2300      	movs	r3, #0
   2acb2:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   2acb4:	68a3      	ldr	r3, [r4, #8]
   2acb6:	441d      	add	r5, r3
   2acb8:	60a5      	str	r5, [r4, #8]
    return true;
   2acba:	e7d6      	b.n	2ac6a <print_value+0xba>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2acbc:	4a51      	ldr	r2, [pc, #324]	; (2ae04 <print_value+0x254>)
   2acbe:	211a      	movs	r1, #26
   2acc0:	e9cd 8900 	strd	r8, r9, [sp]
   2acc4:	4630      	mov	r0, r6
   2acc6:	f017 fe15 	bl	428f4 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   2acca:	aa02      	add	r2, sp, #8
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   2accc:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   2acce:	494e      	ldr	r1, [pc, #312]	; (2ae08 <print_value+0x258>)
   2acd0:	4630      	mov	r0, r6
   2acd2:	f017 fe43 	bl	4295c <siscanf>
   2acd6:	2801      	cmp	r0, #1
   2acd8:	d106      	bne.n	2ace8 <print_value+0x138>
   2acda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2acde:	4640      	mov	r0, r8
   2ace0:	4649      	mov	r1, r9
   2ace2:	f7f1 ffd1 	bl	1cc88 <__aeabi_dcmpeq>
   2ace6:	b938      	cbnz	r0, 2acf8 <print_value+0x148>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   2ace8:	e9cd 8900 	strd	r8, r9, [sp]
   2acec:	4a47      	ldr	r2, [pc, #284]	; (2ae0c <print_value+0x25c>)
   2acee:	211a      	movs	r1, #26
   2acf0:	4630      	mov	r0, r6
   2acf2:	f017 fdff 	bl	428f4 <sniprintf>
   2acf6:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   2acf8:	2d19      	cmp	r5, #25
   2acfa:	f73f af5f 	bgt.w	2abbc <print_value+0xc>
   2acfe:	e7cb      	b.n	2ac98 <print_value+0xe8>
            return print_array(item, output_buffer);
   2ad00:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   2ad02:	2101      	movs	r1, #1
   2ad04:	4620      	mov	r0, r4
   2ad06:	f01c f85e 	bl	46dc6 <ensure>
    if (output_pointer == NULL)
   2ad0a:	2800      	cmp	r0, #0
   2ad0c:	f43f af56 	beq.w	2abbc <print_value+0xc>
    *output_pointer = '[';
   2ad10:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   2ad12:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   2ad14:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   2ad18:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   2ad1a:	68a3      	ldr	r3, [r4, #8]
   2ad1c:	3301      	adds	r3, #1
   2ad1e:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   2ad20:	68e3      	ldr	r3, [r4, #12]
   2ad22:	3301      	adds	r3, #1
   2ad24:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   2ad26:	b96e      	cbnz	r6, 2ad44 <print_value+0x194>
    output_pointer = ensure(output_buffer, 2);
   2ad28:	2102      	movs	r1, #2
   2ad2a:	4620      	mov	r0, r4
   2ad2c:	f01c f84b 	bl	46dc6 <ensure>
    if (output_pointer == NULL)
   2ad30:	2800      	cmp	r0, #0
   2ad32:	f43f af43 	beq.w	2abbc <print_value+0xc>
    *output_pointer++ = ']';
   2ad36:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   2ad38:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   2ad3a:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   2ad3c:	68e3      	ldr	r3, [r4, #12]
   2ad3e:	3b01      	subs	r3, #1
   2ad40:	60e3      	str	r3, [r4, #12]
   2ad42:	e792      	b.n	2ac6a <print_value+0xba>
        if (!print_value(current_element, output_buffer))
   2ad44:	4621      	mov	r1, r4
   2ad46:	4630      	mov	r0, r6
   2ad48:	f7ff ff32 	bl	2abb0 <print_value>
   2ad4c:	2800      	cmp	r0, #0
   2ad4e:	f43f af35 	beq.w	2abbc <print_value+0xc>
        update_offset(output_buffer);
   2ad52:	4620      	mov	r0, r4
   2ad54:	f01c f80e 	bl	46d74 <update_offset>
        if (current_element->next)
   2ad58:	6833      	ldr	r3, [r6, #0]
   2ad5a:	b1bb      	cbz	r3, 2ad8c <print_value+0x1dc>
            length = (size_t) (output_buffer->format ? 2 : 1);
   2ad5c:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   2ad5e:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   2ad60:	2b00      	cmp	r3, #0
   2ad62:	bf14      	ite	ne
   2ad64:	f04f 0902 	movne.w	r9, #2
   2ad68:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   2ad6c:	f109 0101 	add.w	r1, r9, #1
   2ad70:	f01c f829 	bl	46dc6 <ensure>
            if (output_pointer == NULL)
   2ad74:	2800      	cmp	r0, #0
   2ad76:	f43f af21 	beq.w	2abbc <print_value+0xc>
            *output_pointer++ = ',';
   2ad7a:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   2ad7c:	6963      	ldr	r3, [r4, #20]
   2ad7e:	b93b      	cbnz	r3, 2ad90 <print_value+0x1e0>
            *output_pointer++ = ',';
   2ad80:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   2ad82:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   2ad86:	68a3      	ldr	r3, [r4, #8]
   2ad88:	444b      	add	r3, r9
   2ad8a:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   2ad8c:	6836      	ldr	r6, [r6, #0]
   2ad8e:	e7ca      	b.n	2ad26 <print_value+0x176>
                *output_pointer++ = ' ';
   2ad90:	1c83      	adds	r3, r0, #2
   2ad92:	7045      	strb	r5, [r0, #1]
   2ad94:	e7f5      	b.n	2ad82 <print_value+0x1d2>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   2ad96:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   2ad98:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   2ad9a:	2b00      	cmp	r3, #0
   2ad9c:	bf14      	ite	ne
   2ad9e:	2702      	movne	r7, #2
   2ada0:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   2ada2:	4620      	mov	r0, r4
   2ada4:	1c79      	adds	r1, r7, #1
   2ada6:	f01c f80e 	bl	46dc6 <ensure>
    if (output_pointer == NULL)
   2adaa:	2800      	cmp	r0, #0
   2adac:	f43f af06 	beq.w	2abbc <print_value+0xc>
    *output_pointer++ = '{';
   2adb0:	237b      	movs	r3, #123	; 0x7b
   2adb2:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   2adb4:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   2adb6:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   2adb8:	3201      	adds	r2, #1
   2adba:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   2adbc:	b10b      	cbz	r3, 2adc2 <print_value+0x212>
        *output_pointer++ = '\n';
   2adbe:	230a      	movs	r3, #10
   2adc0:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   2adc2:	68a3      	ldr	r3, [r4, #8]
        *output_pointer++ = ':';
   2adc4:	f04f 083a 	mov.w	r8, #58	; 0x3a
    output_buffer->offset += length;
   2adc8:	443b      	add	r3, r7
                *output_pointer++ = '\t';
   2adca:	2709      	movs	r7, #9
    output_buffer->offset += length;
   2adcc:	60a3      	str	r3, [r4, #8]
    while (current_item)
   2adce:	6963      	ldr	r3, [r4, #20]
   2add0:	b9f5      	cbnz	r5, 2ae10 <print_value+0x260>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2add2:	2b00      	cmp	r3, #0
   2add4:	d077      	beq.n	2aec6 <print_value+0x316>
   2add6:	68e1      	ldr	r1, [r4, #12]
   2add8:	3101      	adds	r1, #1
   2adda:	4620      	mov	r0, r4
   2addc:	f01b fff3 	bl	46dc6 <ensure>
    if (output_pointer == NULL)
   2ade0:	2800      	cmp	r0, #0
   2ade2:	f43f aeeb 	beq.w	2abbc <print_value+0xc>
    if (output_buffer->format)
   2ade6:	6963      	ldr	r3, [r4, #20]
   2ade8:	2b00      	cmp	r3, #0
   2adea:	d176      	bne.n	2aeda <print_value+0x32a>
   2adec:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   2adee:	227d      	movs	r2, #125	; 0x7d
   2adf0:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   2adf2:	2200      	movs	r2, #0
   2adf4:	705a      	strb	r2, [r3, #1]
   2adf6:	e7a1      	b.n	2ad3c <print_value+0x18c>
   2adf8:	0004d9be 	.word	0x0004d9be
   2adfc:	0004d9a7 	.word	0x0004d9a7
   2ae00:	0004d9c4 	.word	0x0004d9c4
   2ae04:	0004d9ac 	.word	0x0004d9ac
   2ae08:	0004d9b3 	.word	0x0004d9b3
   2ae0c:	0004d9b7 	.word	0x0004d9b7
        if (output_buffer->format)
   2ae10:	b173      	cbz	r3, 2ae30 <print_value+0x280>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   2ae12:	68e1      	ldr	r1, [r4, #12]
   2ae14:	4620      	mov	r0, r4
   2ae16:	f01b ffd6 	bl	46dc6 <ensure>
            if (output_pointer == NULL)
   2ae1a:	2800      	cmp	r0, #0
   2ae1c:	f43f aece 	beq.w	2abbc <print_value+0xc>
   2ae20:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   2ae22:	68e1      	ldr	r1, [r4, #12]
   2ae24:	1a13      	subs	r3, r2, r0
   2ae26:	428b      	cmp	r3, r1
   2ae28:	d34a      	bcc.n	2aec0 <print_value+0x310>
            output_buffer->offset += output_buffer->depth;
   2ae2a:	68a3      	ldr	r3, [r4, #8]
   2ae2c:	440b      	add	r3, r1
   2ae2e:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   2ae30:	4621      	mov	r1, r4
   2ae32:	6a28      	ldr	r0, [r5, #32]
   2ae34:	f7ff fe1c 	bl	2aa70 <print_string_ptr>
   2ae38:	2800      	cmp	r0, #0
   2ae3a:	f43f aebf 	beq.w	2abbc <print_value+0xc>
        update_offset(output_buffer);
   2ae3e:	4620      	mov	r0, r4
   2ae40:	f01b ff98 	bl	46d74 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   2ae44:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   2ae46:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   2ae48:	2b00      	cmp	r3, #0
   2ae4a:	bf14      	ite	ne
   2ae4c:	2602      	movne	r6, #2
   2ae4e:	2601      	moveq	r6, #1
        output_pointer = ensure(output_buffer, length);
   2ae50:	4631      	mov	r1, r6
   2ae52:	f01b ffb8 	bl	46dc6 <ensure>
        if (output_pointer == NULL)
   2ae56:	2800      	cmp	r0, #0
   2ae58:	f43f aeb0 	beq.w	2abbc <print_value+0xc>
        *output_pointer++ = ':';
   2ae5c:	f880 8000 	strb.w	r8, [r0]
        if (output_buffer->format)
   2ae60:	6963      	ldr	r3, [r4, #20]
   2ae62:	b103      	cbz	r3, 2ae66 <print_value+0x2b6>
            *output_pointer++ = '\t';
   2ae64:	7047      	strb	r7, [r0, #1]
        output_buffer->offset += length;
   2ae66:	68a1      	ldr	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2ae68:	4628      	mov	r0, r5
        output_buffer->offset += length;
   2ae6a:	4431      	add	r1, r6
   2ae6c:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   2ae6e:	4621      	mov	r1, r4
   2ae70:	f7ff fe9e 	bl	2abb0 <print_value>
   2ae74:	2800      	cmp	r0, #0
   2ae76:	f43f aea1 	beq.w	2abbc <print_value+0xc>
        update_offset(output_buffer);
   2ae7a:	4620      	mov	r0, r4
   2ae7c:	f01b ff7a 	bl	46d74 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   2ae80:	682e      	ldr	r6, [r5, #0]
   2ae82:	6963      	ldr	r3, [r4, #20]
   2ae84:	3600      	adds	r6, #0
   2ae86:	bf18      	it	ne
   2ae88:	2601      	movne	r6, #1
   2ae8a:	2b00      	cmp	r3, #0
   2ae8c:	bf18      	it	ne
   2ae8e:	3601      	addne	r6, #1
        output_pointer = ensure(output_buffer, length + 1);
   2ae90:	4620      	mov	r0, r4
   2ae92:	1c71      	adds	r1, r6, #1
   2ae94:	f01b ff97 	bl	46dc6 <ensure>
        if (output_pointer == NULL)
   2ae98:	2800      	cmp	r0, #0
   2ae9a:	f43f ae8f 	beq.w	2abbc <print_value+0xc>
        if (current_item->next)
   2ae9e:	682b      	ldr	r3, [r5, #0]
   2aea0:	b113      	cbz	r3, 2aea8 <print_value+0x2f8>
            *output_pointer++ = ',';
   2aea2:	232c      	movs	r3, #44	; 0x2c
   2aea4:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   2aea8:	6963      	ldr	r3, [r4, #20]
   2aeaa:	b113      	cbz	r3, 2aeb2 <print_value+0x302>
            *output_pointer++ = '\n';
   2aeac:	230a      	movs	r3, #10
   2aeae:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   2aeb2:	2300      	movs	r3, #0
   2aeb4:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   2aeb6:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   2aeb8:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   2aeba:	441e      	add	r6, r3
   2aebc:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   2aebe:	e786      	b.n	2adce <print_value+0x21e>
                *output_pointer++ = '\t';
   2aec0:	f802 7b01 	strb.w	r7, [r2], #1
   2aec4:	e7ad      	b.n	2ae22 <print_value+0x272>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2aec6:	2102      	movs	r1, #2
   2aec8:	e787      	b.n	2adda <print_value+0x22a>
            *output_pointer++ = '\t';
   2aeca:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   2aece:	68e2      	ldr	r2, [r4, #12]
   2aed0:	1a19      	subs	r1, r3, r0
   2aed2:	3a01      	subs	r2, #1
   2aed4:	4291      	cmp	r1, r2
   2aed6:	d3f8      	bcc.n	2aeca <print_value+0x31a>
   2aed8:	e789      	b.n	2adee <print_value+0x23e>
    if (output_buffer->format)
   2aeda:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   2aedc:	2509      	movs	r5, #9
   2aede:	e7f6      	b.n	2aece <print_value+0x31e>

0002aee0 <print.constprop.14>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2aee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2aee2:	4d24      	ldr	r5, [pc, #144]	; (2af74 <print.constprop.14+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2aee4:	b08b      	sub	sp, #44	; 0x2c
   2aee6:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   2aee8:	2224      	movs	r2, #36	; 0x24
   2aeea:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   2aeec:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   2aeee:	a801      	add	r0, sp, #4
   2aef0:	f01d f96a 	bl	481c8 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2aef4:	682b      	ldr	r3, [r5, #0]
   2aef6:	f44f 7080 	mov.w	r0, #256	; 0x100
   2aefa:	4798      	blx	r3
    buffer->length = default_buffer_size;
   2aefc:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2af00:	4603      	mov	r3, r0
    buffer->format = format;
   2af02:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   2af04:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   2af06:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   2af08:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   2af0a:	462f      	mov	r7, r5
   2af0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2af10:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   2af14:	b17b      	cbz	r3, 2af36 <print.constprop.14+0x56>
    if (!print_value(item, buffer))
   2af16:	a901      	add	r1, sp, #4
   2af18:	4620      	mov	r0, r4
   2af1a:	f7ff fe49 	bl	2abb0 <print_value>
   2af1e:	b150      	cbz	r0, 2af36 <print.constprop.14+0x56>
    update_offset(buffer);
   2af20:	a801      	add	r0, sp, #4
   2af22:	f01b ff27 	bl	46d74 <update_offset>
    if (hooks->reallocate != NULL)
   2af26:	68ae      	ldr	r6, [r5, #8]
   2af28:	9903      	ldr	r1, [sp, #12]
   2af2a:	b15e      	cbz	r6, 2af44 <print.constprop.14+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   2af2c:	3101      	adds	r1, #1
   2af2e:	9801      	ldr	r0, [sp, #4]
   2af30:	47b0      	blx	r6
        if (printed == NULL) {
   2af32:	4604      	mov	r4, r0
   2af34:	b9d0      	cbnz	r0, 2af6c <print.constprop.14+0x8c>
    if (buffer->buffer != NULL)
   2af36:	9c01      	ldr	r4, [sp, #4]
   2af38:	b1c4      	cbz	r4, 2af6c <print.constprop.14+0x8c>
        hooks->deallocate(buffer->buffer);
   2af3a:	4620      	mov	r0, r4
   2af3c:	687b      	ldr	r3, [r7, #4]
   2af3e:	4798      	blx	r3
    return NULL;
   2af40:	2400      	movs	r4, #0
   2af42:	e013      	b.n	2af6c <print.constprop.14+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   2af44:	682b      	ldr	r3, [r5, #0]
   2af46:	1c48      	adds	r0, r1, #1
   2af48:	4798      	blx	r3
        if (printed == NULL)
   2af4a:	4604      	mov	r4, r0
   2af4c:	2800      	cmp	r0, #0
   2af4e:	d0f2      	beq.n	2af36 <print.constprop.14+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   2af50:	9a03      	ldr	r2, [sp, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2af52:	9b02      	ldr	r3, [sp, #8]
   2af54:	3201      	adds	r2, #1
   2af56:	429a      	cmp	r2, r3
   2af58:	bf28      	it	cs
   2af5a:	461a      	movcs	r2, r3
   2af5c:	9901      	ldr	r1, [sp, #4]
   2af5e:	f01d f913 	bl	48188 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   2af62:	9b03      	ldr	r3, [sp, #12]
   2af64:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2af66:	686b      	ldr	r3, [r5, #4]
   2af68:	9801      	ldr	r0, [sp, #4]
   2af6a:	4798      	blx	r3
}
   2af6c:	4620      	mov	r0, r4
   2af6e:	b00b      	add	sp, #44	; 0x2c
   2af70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2af72:	bf00      	nop
   2af74:	20020828 	.word	0x20020828

0002af78 <cJSON_strdup.isra.2.constprop.16>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   2af78:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   2af7a:	4605      	mov	r5, r0
   2af7c:	b170      	cbz	r0, 2af9c <cJSON_strdup.isra.2.constprop.16+0x24>
    length = strlen((const char*)string) + sizeof("");
   2af7e:	f7f2 f971 	bl	1d264 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   2af82:	4b07      	ldr	r3, [pc, #28]	; (2afa0 <cJSON_strdup.isra.2.constprop.16+0x28>)
    length = strlen((const char*)string) + sizeof("");
   2af84:	1c46      	adds	r6, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   2af86:	681b      	ldr	r3, [r3, #0]
   2af88:	4630      	mov	r0, r6
   2af8a:	4798      	blx	r3
    if (copy == NULL)
   2af8c:	4604      	mov	r4, r0
   2af8e:	b118      	cbz	r0, 2af98 <cJSON_strdup.isra.2.constprop.16+0x20>
   2af90:	4632      	mov	r2, r6
   2af92:	4629      	mov	r1, r5
   2af94:	f01d f8f8 	bl	48188 <memcpy>
}
   2af98:	4620      	mov	r0, r4
   2af9a:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   2af9c:	4604      	mov	r4, r0
   2af9e:	e7fb      	b.n	2af98 <cJSON_strdup.isra.2.constprop.16+0x20>
   2afa0:	20020828 	.word	0x20020828

0002afa4 <add_item_to_object.constprop.12>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   2afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2afa6:	460e      	mov	r6, r1
   2afa8:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   2afaa:	4607      	mov	r7, r0
   2afac:	b1f0      	cbz	r0, 2afec <add_item_to_object.constprop.12+0x48>
   2afae:	b1e9      	cbz	r1, 2afec <add_item_to_object.constprop.12+0x48>
   2afb0:	b1e2      	cbz	r2, 2afec <add_item_to_object.constprop.12+0x48>
    if (constant_key)
   2afb2:	b193      	cbz	r3, 2afda <add_item_to_object.constprop.12+0x36>
        new_type = item->type | cJSON_StringIsConst;
   2afb4:	68d5      	ldr	r5, [r2, #12]
   2afb6:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2afba:	68e3      	ldr	r3, [r4, #12]
   2afbc:	059b      	lsls	r3, r3, #22
   2afbe:	d404      	bmi.n	2afca <add_item_to_object.constprop.12+0x26>
   2afc0:	6a20      	ldr	r0, [r4, #32]
   2afc2:	b110      	cbz	r0, 2afca <add_item_to_object.constprop.12+0x26>
        hooks->deallocate(item->string);
   2afc4:	4b0a      	ldr	r3, [pc, #40]	; (2aff0 <add_item_to_object.constprop.12+0x4c>)
   2afc6:	685b      	ldr	r3, [r3, #4]
   2afc8:	4798      	blx	r3
    item->string = new_key;
   2afca:	6226      	str	r6, [r4, #32]
    item->type = new_type;
   2afcc:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   2afce:	4621      	mov	r1, r4
   2afd0:	4638      	mov	r0, r7
}
   2afd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   2afd6:	f01b beda 	b.w	46d8e <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   2afda:	4608      	mov	r0, r1
   2afdc:	f7ff ffcc 	bl	2af78 <cJSON_strdup.isra.2.constprop.16>
        if (new_key == NULL)
   2afe0:	4606      	mov	r6, r0
   2afe2:	b118      	cbz	r0, 2afec <add_item_to_object.constprop.12+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   2afe4:	68e5      	ldr	r5, [r4, #12]
   2afe6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   2afea:	e7e6      	b.n	2afba <add_item_to_object.constprop.12+0x16>
}
   2afec:	2000      	movs	r0, #0
   2afee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2aff0:	20020828 	.word	0x20020828

0002aff4 <cJSON_InitHooks>:
{
   2aff4:	b530      	push	{r4, r5, lr}
   2aff6:	4b0d      	ldr	r3, [pc, #52]	; (2b02c <cJSON_InitHooks+0x38>)
   2aff8:	4d0d      	ldr	r5, [pc, #52]	; (2b030 <cJSON_InitHooks+0x3c>)
   2affa:	4c0e      	ldr	r4, [pc, #56]	; (2b034 <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   2affc:	b920      	cbnz	r0, 2b008 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   2affe:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   2b002:	4a0d      	ldr	r2, [pc, #52]	; (2b038 <cJSON_InitHooks+0x44>)
   2b004:	609a      	str	r2, [r3, #8]
   2b006:	e00f      	b.n	2b028 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   2b008:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   2b00a:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   2b00c:	2900      	cmp	r1, #0
   2b00e:	bf08      	it	eq
   2b010:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   2b012:	2a00      	cmp	r2, #0
   2b014:	bf08      	it	eq
   2b016:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   2b018:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2b01a:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   2b01c:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   2b01e:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   2b020:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   2b022:	d101      	bne.n	2b028 <cJSON_InitHooks+0x34>
   2b024:	42a2      	cmp	r2, r4
   2b026:	d0ec      	beq.n	2b002 <cJSON_InitHooks+0xe>
}
   2b028:	bd30      	pop	{r4, r5, pc}
   2b02a:	bf00      	nop
   2b02c:	20020828 	.word	0x20020828
   2b030:	00041dd9 	.word	0x00041dd9
   2b034:	00041de9 	.word	0x00041de9
   2b038:	000428c5 	.word	0x000428c5

0002b03c <cJSON_Delete>:
{
   2b03c:	b570      	push	{r4, r5, r6, lr}
   2b03e:	4604      	mov	r4, r0
   2b040:	4d0f      	ldr	r5, [pc, #60]	; (2b080 <cJSON_Delete+0x44>)
    while (item != NULL)
   2b042:	b904      	cbnz	r4, 2b046 <cJSON_Delete+0xa>
}
   2b044:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2b046:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   2b048:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2b04a:	05d9      	lsls	r1, r3, #23
   2b04c:	d403      	bmi.n	2b056 <cJSON_Delete+0x1a>
   2b04e:	68a0      	ldr	r0, [r4, #8]
   2b050:	b968      	cbnz	r0, 2b06e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2b052:	6920      	ldr	r0, [r4, #16]
   2b054:	b988      	cbnz	r0, 2b07a <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   2b056:	68e3      	ldr	r3, [r4, #12]
   2b058:	059b      	lsls	r3, r3, #22
   2b05a:	d403      	bmi.n	2b064 <cJSON_Delete+0x28>
   2b05c:	6a20      	ldr	r0, [r4, #32]
   2b05e:	b108      	cbz	r0, 2b064 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   2b060:	686b      	ldr	r3, [r5, #4]
   2b062:	4798      	blx	r3
        global_hooks.deallocate(item);
   2b064:	4620      	mov	r0, r4
   2b066:	686b      	ldr	r3, [r5, #4]
   2b068:	4798      	blx	r3
        item = next;
   2b06a:	4634      	mov	r4, r6
   2b06c:	e7e9      	b.n	2b042 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   2b06e:	f7ff ffe5 	bl	2b03c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   2b072:	68e3      	ldr	r3, [r4, #12]
   2b074:	05da      	lsls	r2, r3, #23
   2b076:	d5ec      	bpl.n	2b052 <cJSON_Delete+0x16>
   2b078:	e7ed      	b.n	2b056 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   2b07a:	686b      	ldr	r3, [r5, #4]
   2b07c:	4798      	blx	r3
   2b07e:	e7ea      	b.n	2b056 <cJSON_Delete+0x1a>
   2b080:	20020828 	.word	0x20020828

0002b084 <cJSON_ParseWithOpts>:
{
   2b084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b088:	4605      	mov	r5, r0
    global_error.json = NULL;
   2b08a:	f04f 0800 	mov.w	r8, #0
{
   2b08e:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   2b090:	4e31      	ldr	r6, [pc, #196]	; (2b158 <cJSON_ParseWithOpts+0xd4>)
{
   2b092:	460f      	mov	r7, r1
   2b094:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   2b096:	2100      	movs	r1, #0
   2b098:	221c      	movs	r2, #28
   2b09a:	a801      	add	r0, sp, #4
   2b09c:	f01d f894 	bl	481c8 <memset>
    global_error.position = 0;
   2b0a0:	e9c6 8800 	strd	r8, r8, [r6]
    if (value == NULL)
   2b0a4:	2d00      	cmp	r5, #0
   2b0a6:	d04d      	beq.n	2b144 <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   2b0a8:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   2b0aa:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   2b0ac:	f7f2 f8da 	bl	1d264 <strlen>
    buffer.hooks = global_hooks;
   2b0b0:	4b2a      	ldr	r3, [pc, #168]	; (2b15c <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   2b0b2:	3001      	adds	r0, #1
    buffer.offset = 0;
   2b0b4:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   2b0b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2b0bc:	ab08      	add	r3, sp, #32
   2b0be:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   2b0c2:	f01b fe74 	bl	46dae <cJSON_New_Item.isra.1>
    if (item == NULL) /* memory fail */
   2b0c6:	4604      	mov	r4, r0
   2b0c8:	2800      	cmp	r0, #0
   2b0ca:	d030      	beq.n	2b12e <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   2b0cc:	9801      	ldr	r0, [sp, #4]
   2b0ce:	b128      	cbz	r0, 2b0dc <cJSON_ParseWithOpts+0x58>
   2b0d0:	9b03      	ldr	r3, [sp, #12]
   2b0d2:	b9e3      	cbnz	r3, 2b10e <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2b0d4:	9b02      	ldr	r3, [sp, #8]
   2b0d6:	2b04      	cmp	r3, #4
   2b0d8:	d80f      	bhi.n	2b0fa <cJSON_ParseWithOpts+0x76>
    return buffer;
   2b0da:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   2b0dc:	f01b fe2d 	bl	46d3a <buffer_skip_whitespace>
   2b0e0:	4601      	mov	r1, r0
   2b0e2:	4620      	mov	r0, r4
   2b0e4:	f7f2 fb84 	bl	1d7f0 <parse_value>
   2b0e8:	b1f0      	cbz	r0, 2b128 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   2b0ea:	f1b9 0f00 	cmp.w	r9, #0
   2b0ee:	d110      	bne.n	2b112 <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   2b0f0:	bb57      	cbnz	r7, 2b148 <cJSON_ParseWithOpts+0xc4>
}
   2b0f2:	4620      	mov	r0, r4
   2b0f4:	b009      	add	sp, #36	; 0x24
   2b0f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   2b0fa:	2203      	movs	r2, #3
   2b0fc:	4918      	ldr	r1, [pc, #96]	; (2b160 <cJSON_ParseWithOpts+0xdc>)
   2b0fe:	f01d fa3c 	bl	4857a <strncmp>
   2b102:	2800      	cmp	r0, #0
   2b104:	d1e9      	bne.n	2b0da <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   2b106:	9b03      	ldr	r3, [sp, #12]
   2b108:	3303      	adds	r3, #3
   2b10a:	9303      	str	r3, [sp, #12]
   2b10c:	e7e5      	b.n	2b0da <cJSON_ParseWithOpts+0x56>
        return NULL;
   2b10e:	4640      	mov	r0, r8
   2b110:	e7e4      	b.n	2b0dc <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   2b112:	a801      	add	r0, sp, #4
   2b114:	f01b fe11 	bl	46d3a <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   2b118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2b11c:	4293      	cmp	r3, r2
   2b11e:	d203      	bcs.n	2b128 <cJSON_ParseWithOpts+0xa4>
   2b120:	9a01      	ldr	r2, [sp, #4]
   2b122:	5cd3      	ldrb	r3, [r2, r3]
   2b124:	2b00      	cmp	r3, #0
   2b126:	d0e3      	beq.n	2b0f0 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   2b128:	4620      	mov	r0, r4
   2b12a:	f7ff ff87 	bl	2b03c <cJSON_Delete>
        if (buffer.offset < buffer.length)
   2b12e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   2b132:	429a      	cmp	r2, r3
   2b134:	d30d      	bcc.n	2b152 <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   2b136:	b103      	cbz	r3, 2b13a <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   2b138:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   2b13a:	b10f      	cbz	r7, 2b140 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   2b13c:	18ea      	adds	r2, r5, r3
   2b13e:	603a      	str	r2, [r7, #0]
        global_error = local_error;
   2b140:	e9c6 5300 	strd	r5, r3, [r6]
    return NULL;
   2b144:	2400      	movs	r4, #0
   2b146:	e7d4      	b.n	2b0f2 <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   2b148:	9b01      	ldr	r3, [sp, #4]
   2b14a:	9a03      	ldr	r2, [sp, #12]
   2b14c:	4413      	add	r3, r2
   2b14e:	603b      	str	r3, [r7, #0]
   2b150:	e7cf      	b.n	2b0f2 <cJSON_ParseWithOpts+0x6e>
   2b152:	4613      	mov	r3, r2
   2b154:	e7f1      	b.n	2b13a <cJSON_ParseWithOpts+0xb6>
   2b156:	bf00      	nop
   2b158:	20024bf4 	.word	0x20024bf4
   2b15c:	20020828 	.word	0x20020828
   2b160:	0004d99a 	.word	0x0004d99a

0002b164 <cJSON_CreateNull>:
{
   2b164:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b166:	4b04      	ldr	r3, [pc, #16]	; (2b178 <cJSON_CreateNull+0x14>)
   2b168:	6818      	ldr	r0, [r3, #0]
   2b16a:	f01b fe20 	bl	46dae <cJSON_New_Item.isra.1>
    if(item)
   2b16e:	b108      	cbz	r0, 2b174 <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   2b170:	2304      	movs	r3, #4
   2b172:	60c3      	str	r3, [r0, #12]
}
   2b174:	bd08      	pop	{r3, pc}
   2b176:	bf00      	nop
   2b178:	20020828 	.word	0x20020828

0002b17c <cJSON_CreateBool>:
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b17c:	4b06      	ldr	r3, [pc, #24]	; (2b198 <cJSON_CreateBool+0x1c>)
{
   2b17e:	b510      	push	{r4, lr}
   2b180:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b182:	6818      	ldr	r0, [r3, #0]
   2b184:	f01b fe13 	bl	46dae <cJSON_New_Item.isra.1>
    if(item)
   2b188:	b120      	cbz	r0, 2b194 <cJSON_CreateBool+0x18>
        item->type = b ? cJSON_True : cJSON_False;
   2b18a:	2c00      	cmp	r4, #0
   2b18c:	bf14      	ite	ne
   2b18e:	2302      	movne	r3, #2
   2b190:	2301      	moveq	r3, #1
   2b192:	60c3      	str	r3, [r0, #12]
}
   2b194:	bd10      	pop	{r4, pc}
   2b196:	bf00      	nop
   2b198:	20020828 	.word	0x20020828

0002b19c <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   2b19c:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b19e:	4b0a      	ldr	r3, [pc, #40]	; (2b1c8 <cJSON_CreateString+0x2c>)
{
   2b1a0:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b1a2:	6818      	ldr	r0, [r3, #0]
   2b1a4:	f01b fe03 	bl	46dae <cJSON_New_Item.isra.1>
    if(item)
   2b1a8:	4604      	mov	r4, r0
   2b1aa:	b158      	cbz	r0, 2b1c4 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   2b1ac:	2310      	movs	r3, #16
   2b1ae:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   2b1b0:	4628      	mov	r0, r5
   2b1b2:	f7ff fee1 	bl	2af78 <cJSON_strdup.isra.2.constprop.16>
   2b1b6:	4605      	mov	r5, r0
   2b1b8:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   2b1ba:	b918      	cbnz	r0, 2b1c4 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   2b1bc:	4620      	mov	r0, r4
   2b1be:	f7ff ff3d 	bl	2b03c <cJSON_Delete>
            return NULL;
   2b1c2:	462c      	mov	r4, r5
        }
    }

    return item;
}
   2b1c4:	4620      	mov	r0, r4
   2b1c6:	bd38      	pop	{r3, r4, r5, pc}
   2b1c8:	20020828 	.word	0x20020828

0002b1cc <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   2b1cc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b1ce:	4b04      	ldr	r3, [pc, #16]	; (2b1e0 <cJSON_CreateArray+0x14>)
   2b1d0:	6818      	ldr	r0, [r3, #0]
   2b1d2:	f01b fdec 	bl	46dae <cJSON_New_Item.isra.1>
    if(item)
   2b1d6:	b108      	cbz	r0, 2b1dc <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   2b1d8:	2320      	movs	r3, #32
   2b1da:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2b1dc:	bd08      	pop	{r3, pc}
   2b1de:	bf00      	nop
   2b1e0:	20020828 	.word	0x20020828

0002b1e4 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   2b1e4:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   2b1e6:	4b04      	ldr	r3, [pc, #16]	; (2b1f8 <cJSON_CreateObject+0x14>)
   2b1e8:	6818      	ldr	r0, [r3, #0]
   2b1ea:	f01b fde0 	bl	46dae <cJSON_New_Item.isra.1>
    if (item)
   2b1ee:	b108      	cbz	r0, 2b1f4 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   2b1f0:	2340      	movs	r3, #64	; 0x40
   2b1f2:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   2b1f4:	bd08      	pop	{r3, pc}
   2b1f6:	bf00      	nop
   2b1f8:	20020828 	.word	0x20020828

0002b1fc <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   2b1fc:	4b01      	ldr	r3, [pc, #4]	; (2b204 <cJSON_free+0x8>)
   2b1fe:	685b      	ldr	r3, [r3, #4]
   2b200:	4718      	bx	r3
   2b202:	bf00      	nop
   2b204:	20020828 	.word	0x20020828

0002b208 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   2b208:	4803      	ldr	r0, [pc, #12]	; (2b218 <cJSON_Init+0x10>)
   2b20a:	4b04      	ldr	r3, [pc, #16]	; (2b21c <cJSON_Init+0x14>)
   2b20c:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   2b20e:	4b04      	ldr	r3, [pc, #16]	; (2b220 <cJSON_Init+0x18>)
   2b210:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   2b212:	f7ff beef 	b.w	2aff4 <cJSON_InitHooks>
   2b216:	bf00      	nop
   2b218:	20024bfc 	.word	0x20024bfc
   2b21c:	00046f65 	.word	0x00046f65
   2b220:	00046f61 	.word	0x00046f61

0002b224 <_bsdlib_init>:
extern void ipc_proxy_irq_handler(void);

static int init_ret;

static int _bsdlib_init(const struct device *unused)
{
   2b224:	b530      	push	{r4, r5, lr}
	if (!first_time_init) {
   2b226:	4d19      	ldr	r5, [pc, #100]	; (2b28c <_bsdlib_init+0x68>)
{
   2b228:	b085      	sub	sp, #20
	if (!first_time_init) {
   2b22a:	782b      	ldrb	r3, [r5, #0]
   2b22c:	4c18      	ldr	r4, [pc, #96]	; (2b290 <_bsdlib_init+0x6c>)
   2b22e:	b933      	cbnz	r3, 2b23e <_bsdlib_init+0x1a>
	list->tail = NULL;
   2b230:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   2b234:	4817      	ldr	r0, [pc, #92]	; (2b294 <_bsdlib_init+0x70>)
   2b236:	f01c fddf 	bl	47df8 <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   2b23a:	2301      	movs	r3, #1
   2b23c:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the BSD library.
	 * Note: No call to irq_enable() here, that is done through bsd_init().
	 */
	IRQ_DIRECT_CONNECT(BSD_NETWORK_IRQ, BSD_NETWORK_IRQ_PRIORITY,
   2b23e:	2200      	movs	r2, #0
   2b240:	202a      	movs	r0, #42	; 0x2a
   2b242:	4611      	mov	r1, r2
   2b244:	f7fc fa68 	bl	27718 <z_arm_irq_priority_set>
			   ipc_proxy_irq_handler, 0);

	const bsd_init_params_t init_params = {
   2b248:	4a13      	ldr	r2, [pc, #76]	; (2b298 <_bsdlib_init+0x74>)
   2b24a:	ab01      	add	r3, sp, #4
   2b24c:	ca07      	ldmia	r2, {r0, r1, r2}
   2b24e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		.trace_on = true,
		.bsd_memory_address = BSD_RESERVED_MEMORY_ADDRESS,
		.bsd_memory_size = BSD_RESERVED_MEMORY_SIZE
	};

	init_ret = bsd_init(&init_params);
   2b252:	4618      	mov	r0, r3
   2b254:	f010 fd4e 	bl	3bcf4 <bsd_init>
   2b258:	4b10      	ldr	r3, [pc, #64]	; (2b29c <_bsdlib_init+0x78>)
   2b25a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2b25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b264:	480b      	ldr	r0, [pc, #44]	; (2b294 <_bsdlib_init+0x70>)
   2b266:	f013 febb 	bl	3efe0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2b26a:	6820      	ldr	r0, [r4, #0]
   2b26c:	b138      	cbz	r0, 2b27e <_bsdlib_init+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b26e:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   2b270:	3004      	adds	r0, #4
   2b272:	f015 fb23 	bl	408bc <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   2b276:	b114      	cbz	r4, 2b27e <_bsdlib_init+0x5a>
   2b278:	4620      	mov	r0, r4
   2b27a:	6824      	ldr	r4, [r4, #0]
   2b27c:	e7f8      	b.n	2b270 <_bsdlib_init+0x4c>
	return z_impl_k_mutex_unlock(mutex);
   2b27e:	4805      	ldr	r0, [pc, #20]	; (2b294 <_bsdlib_init+0x70>)
   2b280:	f013 ffac 	bl	3f1dc <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   2b284:	2000      	movs	r0, #0
   2b286:	b005      	add	sp, #20
   2b288:	bd30      	pop	{r4, r5, pc}
   2b28a:	bf00      	nop
   2b28c:	2002b574 	.word	0x2002b574
   2b290:	20024c08 	.word	0x20024c08
   2b294:	20024c10 	.word	0x20024c10
   2b298:	00049938 	.word	0x00049938
   2b29c:	20024c04 	.word	0x20024c04

0002b2a0 <bsdlib_shutdown_wait>:

void bsdlib_shutdown_wait(void)
{
   2b2a0:	b530      	push	{r4, r5, lr}
   2b2a2:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b2a4:	2201      	movs	r2, #1
   2b2a6:	2100      	movs	r1, #0
   2b2a8:	a802      	add	r0, sp, #8
   2b2aa:	ad01      	add	r5, sp, #4
   2b2ac:	f01c fe12 	bl	47ed4 <z_impl_k_sem_init>
	return z_impl_k_mutex_lock(mutex, timeout);
   2b2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b2b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b2b8:	481c      	ldr	r0, [pc, #112]	; (2b32c <bsdlib_shutdown_wait+0x8c>)
   2b2ba:	f013 fe91 	bl	3efe0 <z_impl_k_mutex_lock>
	parent->next = child;
   2b2be:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   2b2c0:	4c1b      	ldr	r4, [pc, #108]	; (2b330 <bsdlib_shutdown_wait+0x90>)
	parent->next = child;
   2b2c2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2b2c4:	6863      	ldr	r3, [r4, #4]
   2b2c6:	bb2b      	cbnz	r3, 2b314 <bsdlib_shutdown_wait+0x74>
	list->head = node;
   2b2c8:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   2b2cc:	4817      	ldr	r0, [pc, #92]	; (2b32c <bsdlib_shutdown_wait+0x8c>)
   2b2ce:	f013 ff85 	bl	3f1dc <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2b2d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b2da:	a802      	add	r0, sp, #8
   2b2dc:	f015 fb32 	bl	40944 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   2b2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b2e8:	4810      	ldr	r0, [pc, #64]	; (2b32c <bsdlib_shutdown_wait+0x8c>)
   2b2ea:	f013 fe79 	bl	3efe0 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b2ee:	2200      	movs	r2, #0
   2b2f0:	6823      	ldr	r3, [r4, #0]
   2b2f2:	b153      	cbz	r3, 2b30a <bsdlib_shutdown_wait+0x6a>
   2b2f4:	42ab      	cmp	r3, r5
   2b2f6:	d116      	bne.n	2b326 <bsdlib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   2b2f8:	9901      	ldr	r1, [sp, #4]
   2b2fa:	b972      	cbnz	r2, 2b31a <bsdlib_shutdown_wait+0x7a>
   2b2fc:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   2b2fe:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b300:	429a      	cmp	r2, r3
   2b302:	d100      	bne.n	2b306 <bsdlib_shutdown_wait+0x66>
	list->tail = node;
   2b304:	6061      	str	r1, [r4, #4]
	parent->next = child;
   2b306:	2300      	movs	r3, #0
   2b308:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   2b30a:	4808      	ldr	r0, [pc, #32]	; (2b32c <bsdlib_shutdown_wait+0x8c>)
   2b30c:	f013 ff66 	bl	3f1dc <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   2b310:	b009      	add	sp, #36	; 0x24
   2b312:	bd30      	pop	{r4, r5, pc}
   2b314:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b316:	6065      	str	r5, [r4, #4]
   2b318:	e7d8      	b.n	2b2cc <bsdlib_shutdown_wait+0x2c>
	parent->next = child;
   2b31a:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b31c:	6861      	ldr	r1, [r4, #4]
   2b31e:	4299      	cmp	r1, r3
	list->tail = node;
   2b320:	bf08      	it	eq
   2b322:	6062      	streq	r2, [r4, #4]
   2b324:	e7ef      	b.n	2b306 <bsdlib_shutdown_wait+0x66>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b326:	461a      	mov	r2, r3
   2b328:	681b      	ldr	r3, [r3, #0]
   2b32a:	e7e2      	b.n	2b2f2 <bsdlib_shutdown_wait+0x52>
   2b32c:	20024c10 	.word	0x20024c10
   2b330:	20024c08 	.word	0x20024c08

0002b334 <bsdlib_get_init_ret>:
}

int bsdlib_get_init_ret(void)
{
	return init_ret;
}
   2b334:	4b01      	ldr	r3, [pc, #4]	; (2b33c <bsdlib_get_init_ret+0x8>)
   2b336:	6818      	ldr	r0, [r3, #0]
   2b338:	4770      	bx	lr
   2b33a:	bf00      	nop
   2b33c:	20024c04 	.word	0x20024c04

0002b340 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which bsdlib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   2b340:	b570      	push	{r4, r5, r6, lr}
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   2b342:	4b0d      	ldr	r3, [pc, #52]	; (2b378 <thread_monitor_entry_get+0x38>)
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   2b344:	4c0d      	ldr	r4, [pc, #52]	; (2b37c <thread_monitor_entry_get+0x3c>)
		entry_age = rpc_event_cnt - entry->cnt;
   2b346:	681a      	ldr	r2, [r3, #0]
   2b348:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   2b34a:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   2b34c:	4623      	mov	r3, r4
		if (entry->id == id) {
   2b34e:	6819      	ldr	r1, [r3, #0]
   2b350:	4281      	cmp	r1, r0
   2b352:	d00e      	beq.n	2b372 <thread_monitor_entry_get+0x32>
		} else if (entry->id == 0) {
   2b354:	b151      	cbz	r1, 2b36c <thread_monitor_entry_get+0x2c>
		entry_age = rpc_event_cnt - entry->cnt;
   2b356:	6859      	ldr	r1, [r3, #4]
   2b358:	1a51      	subs	r1, r2, r1
		if (entry_age > oldest_entry_age) {
   2b35a:	42b1      	cmp	r1, r6
   2b35c:	bfc4      	itt	gt
   2b35e:	461c      	movgt	r4, r3
   2b360:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   2b362:	3d01      	subs	r5, #1
   2b364:	f103 0308 	add.w	r3, r3, #8
   2b368:	d1f1      	bne.n	2b34e <thread_monitor_entry_get+0xe>
   2b36a:	4623      	mov	r3, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   2b36c:	3a01      	subs	r2, #1
	new_entry->id = id;
   2b36e:	6018      	str	r0, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   2b370:	605a      	str	r2, [r3, #4]

	return new_entry;
}
   2b372:	4618      	mov	r0, r3
   2b374:	bd70      	pop	{r4, r5, r6, pc}
   2b376:	bf00      	nop
   2b378:	20024c24 	.word	0x20024c24
   2b37c:	20024c30 	.word	0x20024c30

0002b380 <rpc_proxy_irq_handler>:
			  */

	return 1; /* We should check if scheduling decision should be made */
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2b380:	4668      	mov	r0, sp
   2b382:	f020 0107 	bic.w	r1, r0, #7
   2b386:	468d      	mov	sp, r1
   2b388:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2b38a:	4b0d      	ldr	r3, [pc, #52]	; (2b3c0 <rpc_proxy_irq_handler+0x40>)
   2b38c:	e8d3 2fef 	ldaex	r2, [r3]
   2b390:	3201      	adds	r2, #1
   2b392:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2b396:	2900      	cmp	r1, #0
   2b398:	d1f8      	bne.n	2b38c <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	bsd_os_application_irq_handler();
   2b39a:	f00b f80d 	bl	363b8 <bsd_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   2b39e:	4b09      	ldr	r3, [pc, #36]	; (2b3c4 <rpc_proxy_irq_handler+0x44>)
   2b3a0:	681c      	ldr	r4, [r3, #0]
   2b3a2:	b93c      	cbnz	r4, 2b3b4 <rpc_proxy_irq_handler+0x34>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2b3a4:	f7fc f9ea 	bl	2777c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   2b3a8:	f7fc fe40 	bl	2802c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   2b3ac:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2b3b0:	4685      	mov	sp, r0
   2b3b2:	4770      	bx	lr
	z_impl_k_sem_give(sem);
   2b3b4:	1d20      	adds	r0, r4, #4
   2b3b6:	f015 fa81 	bl	408bc <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b3ba:	6824      	ldr	r4, [r4, #0]
	return node->next;
   2b3bc:	e7f1      	b.n	2b3a2 <rpc_proxy_irq_handler+0x22>
   2b3be:	bf00      	nop
   2b3c0:	20024c24 	.word	0x20024c24
   2b3c4:	20024c28 	.word	0x20024c28

0002b3c8 <bsd_os_timedwait>:
{
   2b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b3cc:	4688      	mov	r8, r1
   2b3ce:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   2b3d0:	f01c fe05 	bl	47fde <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   2b3d4:	f8d8 3000 	ldr.w	r3, [r8]
   2b3d8:	4606      	mov	r6, r0
   2b3da:	2b00      	cmp	r3, #0
   2b3dc:	4689      	mov	r9, r1
   2b3de:	d103      	bne.n	2b3e8 <bsd_os_timedwait+0x20>
	z_impl_k_yield();
   2b3e0:	f015 f8ea 	bl	405b8 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   2b3e4:	203c      	movs	r0, #60	; 0x3c
   2b3e6:	e096      	b.n	2b516 <bsd_os_timedwait+0x14e>
		*timeout = SYS_FOREVER_MS;
   2b3e8:	bfbc      	itt	lt
   2b3ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2b3ee:	f8c8 3000 	strlt.w	r3, [r8]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2b3f2:	2201      	movs	r2, #1
   2b3f4:	2100      	movs	r1, #0
   2b3f6:	a802      	add	r0, sp, #8
   2b3f8:	f01c fd6c 	bl	47ed4 <z_impl_k_sem_init>
   2b3fc:	af01      	add	r7, sp, #4
	__asm__ volatile(
   2b3fe:	f04f 0320 	mov.w	r3, #32
   2b402:	f3ef 8b11 	mrs	fp, BASEPRI
   2b406:	f383 8811 	msr	BASEPRI, r3
   2b40a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2b40e:	f015 fa4f 	bl	408b0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2b412:	f7ff ff95 	bl	2b340 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   2b416:	494a      	ldr	r1, [pc, #296]	; (2b540 <bsd_os_timedwait+0x178>)
   2b418:	6843      	ldr	r3, [r0, #4]
   2b41a:	680a      	ldr	r2, [r1, #0]
   2b41c:	468a      	mov	sl, r1
   2b41e:	4293      	cmp	r3, r2
   2b420:	f04f 0300 	mov.w	r3, #0
   2b424:	d108      	bne.n	2b438 <bsd_os_timedwait+0x70>
	parent->next = child;
   2b426:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2b428:	4b46      	ldr	r3, [pc, #280]	; (2b544 <bsd_os_timedwait+0x17c>)
   2b42a:	685a      	ldr	r2, [r3, #4]
   2b42c:	2a00      	cmp	r2, #0
   2b42e:	d175      	bne.n	2b51c <bsd_os_timedwait+0x154>
	list->head = node;
   2b430:	e9c3 7700 	strd	r7, r7, [r3]
		allow_to_sleep = true;
   2b434:	2301      	movs	r3, #1
   2b436:	e000      	b.n	2b43a <bsd_os_timedwait+0x72>
	entry->cnt = rpc_event_cnt;
   2b438:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   2b43a:	f38b 8811 	msr	BASEPRI, fp
   2b43e:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   2b442:	2b00      	cmp	r3, #0
   2b444:	d066      	beq.n	2b514 <bsd_os_timedwait+0x14c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2b446:	f8d8 3000 	ldr.w	r3, [r8]
   2b44a:	1c5a      	adds	r2, r3, #1
   2b44c:	d069      	beq.n	2b522 <bsd_os_timedwait+0x15a>
   2b44e:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   2b452:	f240 30e7 	movw	r0, #999	; 0x3e7
   2b456:	2100      	movs	r1, #0
   2b458:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   2b45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2b460:	2300      	movs	r3, #0
   2b462:	fbce 010c 	smlal	r0, r1, lr, ip
   2b466:	f7f1 fd29 	bl	1cebc <__aeabi_uldivmod>
   2b46a:	4602      	mov	r2, r0
   2b46c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   2b46e:	a802      	add	r0, sp, #8
   2b470:	f015 fa68 	bl	40944 <z_impl_k_sem_take>
	__asm__ volatile(
   2b474:	f04f 0320 	mov.w	r3, #32
   2b478:	f3ef 8b11 	mrs	fp, BASEPRI
   2b47c:	f383 8811 	msr	BASEPRI, r3
   2b480:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b484:	2000      	movs	r0, #0
   2b486:	4b2f      	ldr	r3, [pc, #188]	; (2b544 <bsd_os_timedwait+0x17c>)
   2b488:	681a      	ldr	r2, [r3, #0]
   2b48a:	b15a      	cbz	r2, 2b4a4 <bsd_os_timedwait+0xdc>
   2b48c:	42ba      	cmp	r2, r7
   2b48e:	d153      	bne.n	2b538 <bsd_os_timedwait+0x170>
Z_GENLIST_REMOVE(slist, snode)
   2b490:	9f01      	ldr	r7, [sp, #4]
   2b492:	2800      	cmp	r0, #0
   2b494:	d14a      	bne.n	2b52c <bsd_os_timedwait+0x164>
   2b496:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   2b498:	601f      	str	r7, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b49a:	4291      	cmp	r1, r2
   2b49c:	d100      	bne.n	2b4a0 <bsd_os_timedwait+0xd8>
	list->tail = node;
   2b49e:	605f      	str	r7, [r3, #4]
	parent->next = child;
   2b4a0:	2300      	movs	r3, #0
   2b4a2:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   2b4a4:	f015 fa04 	bl	408b0 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2b4a8:	f7ff ff4a 	bl	2b340 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   2b4ac:	f8da 3000 	ldr.w	r3, [sl]
   2b4b0:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2b4b2:	f38b 8811 	msr	BASEPRI, fp
   2b4b6:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   2b4ba:	f8d8 a000 	ldr.w	sl, [r8]
   2b4be:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   2b4c2:	d027      	beq.n	2b514 <bsd_os_timedwait+0x14c>
	return z_impl_k_uptime_ticks();
   2b4c4:	f01c fd8b 	bl	47fde <z_impl_k_uptime_ticks>
   2b4c8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   2b4cc:	fba6 670c 	umull	r6, r7, r6, ip
   2b4d0:	fb0c 7709 	mla	r7, ip, r9, r7
   2b4d4:	0bf2      	lsrs	r2, r6, #15
   2b4d6:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   2b4da:	eb12 060a 	adds.w	r6, r2, sl
   2b4de:	ea4f 33d7 	mov.w	r3, r7, lsr #15
   2b4e2:	eb43 77ea 	adc.w	r7, r3, sl, asr #31
   2b4e6:	fba0 ab0c 	umull	sl, fp, r0, ip
   2b4ea:	fb0c bb01 	mla	fp, ip, r1, fp
   2b4ee:	ea4f 33da 	mov.w	r3, sl, lsr #15
   2b4f2:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   2b4f6:	1af4      	subs	r4, r6, r3
   2b4f8:	ea4f 32db 	mov.w	r2, fp, lsr #15
   2b4fc:	eb67 0502 	sbc.w	r5, r7, r2
	*timeout = remaining > 0 ? remaining : 0;
   2b500:	2c00      	cmp	r4, #0
   2b502:	f175 0300 	sbcs.w	r3, r5, #0
   2b506:	bfb8      	it	lt
   2b508:	2400      	movlt	r4, #0
   2b50a:	f8c8 4000 	str.w	r4, [r8]
	if (*timeout == 0) {
   2b50e:	2c00      	cmp	r4, #0
   2b510:	f43f af68 	beq.w	2b3e4 <bsd_os_timedwait+0x1c>
	return 0;
   2b514:	2000      	movs	r0, #0
}
   2b516:	b009      	add	sp, #36	; 0x24
   2b518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b51c:	6017      	str	r7, [r2, #0]
	list->tail = node;
   2b51e:	605f      	str	r7, [r3, #4]
   2b520:	e788      	b.n	2b434 <bsd_os_timedwait+0x6c>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2b522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b52a:	e7a0      	b.n	2b46e <bsd_os_timedwait+0xa6>
	parent->next = child;
   2b52c:	6007      	str	r7, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b52e:	6859      	ldr	r1, [r3, #4]
   2b530:	4291      	cmp	r1, r2
	list->tail = node;
   2b532:	bf08      	it	eq
   2b534:	6058      	streq	r0, [r3, #4]
   2b536:	e7b3      	b.n	2b4a0 <bsd_os_timedwait+0xd8>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b538:	4610      	mov	r0, r2
   2b53a:	6812      	ldr	r2, [r2, #0]
   2b53c:	e7a5      	b.n	2b48a <bsd_os_timedwait+0xc2>
   2b53e:	bf00      	nop
   2b540:	20024c24 	.word	0x20024c24
   2b544:	20024c28 	.word	0x20024c28

0002b548 <bsd_os_errno_set>:
	switch (err_code) {
   2b548:	282f      	cmp	r0, #47	; 0x2f
{
   2b54a:	b510      	push	{r4, lr}
   2b54c:	4604      	mov	r4, r0
	switch (err_code) {
   2b54e:	f000 80ab 	beq.w	2b6a8 <bsd_os_errno_set+0x160>
   2b552:	dc56      	bgt.n	2b602 <bsd_os_errno_set+0xba>
   2b554:	2816      	cmp	r0, #22
   2b556:	d009      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b558:	dc38      	bgt.n	2b5cc <bsd_os_errno_set+0x84>
   2b55a:	2808      	cmp	r0, #8
   2b55c:	d006      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b55e:	dc09      	bgt.n	2b574 <bsd_os_errno_set+0x2c>
   2b560:	2802      	cmp	r0, #2
   2b562:	d003      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b564:	2805      	cmp	r0, #5
   2b566:	d001      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b568:	2801      	cmp	r0, #1
   2b56a:	d10c      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = ENOBUFS;
   2b56c:	f01a fa3a 	bl	459e4 <__errno>
   2b570:	6004      	str	r4, [r0, #0]
}
   2b572:	bd10      	pop	{r4, pc}
	switch (err_code) {
   2b574:	280c      	cmp	r0, #12
   2b576:	d0f9      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b578:	dc01      	bgt.n	2b57e <bsd_os_errno_set+0x36>
   2b57a:	2809      	cmp	r0, #9
   2b57c:	e7f5      	b.n	2b56a <bsd_os_errno_set+0x22>
   2b57e:	280d      	cmp	r0, #13
   2b580:	d0f4      	beq.n	2b56c <bsd_os_errno_set+0x24>
   2b582:	280e      	cmp	r0, #14
   2b584:	d073      	beq.n	2b66e <bsd_os_errno_set+0x126>
		__ASSERT(false, "Untranslated errno %d set by bsdlib!", err_code);
   2b586:	f240 134d 	movw	r3, #333	; 0x14d
   2b58a:	4a65      	ldr	r2, [pc, #404]	; (2b720 <bsd_os_errno_set+0x1d8>)
   2b58c:	4965      	ldr	r1, [pc, #404]	; (2b724 <bsd_os_errno_set+0x1dc>)
   2b58e:	4866      	ldr	r0, [pc, #408]	; (2b728 <bsd_os_errno_set+0x1e0>)
   2b590:	f018 fe9e 	bl	442d0 <printk>
   2b594:	4621      	mov	r1, r4
   2b596:	4865      	ldr	r0, [pc, #404]	; (2b72c <bsd_os_errno_set+0x1e4>)
   2b598:	f018 fe9a 	bl	442d0 <printk>
   2b59c:	f240 114d 	movw	r1, #333	; 0x14d
   2b5a0:	485f      	ldr	r0, [pc, #380]	; (2b720 <bsd_os_errno_set+0x1d8>)
   2b5a2:	f019 f8af 	bl	44704 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by bsdlib!", err_code);
   2b5a6:	2301      	movs	r3, #1
   2b5a8:	f04f 0000 	mov.w	r0, #0
   2b5ac:	4a60      	ldr	r2, [pc, #384]	; (2b730 <bsd_os_errno_set+0x1e8>)
   2b5ae:	f363 0007 	bfi	r0, r3, #0, #8
   2b5b2:	4b60      	ldr	r3, [pc, #384]	; (2b734 <bsd_os_errno_set+0x1ec>)
   2b5b4:	4960      	ldr	r1, [pc, #384]	; (2b738 <bsd_os_errno_set+0x1f0>)
   2b5b6:	1a9b      	subs	r3, r3, r2
   2b5b8:	08db      	lsrs	r3, r3, #3
   2b5ba:	f363 108f 	bfi	r0, r3, #6, #10
   2b5be:	4622      	mov	r2, r4
   2b5c0:	f019 f8b1 	bl	44726 <log_string_sync>
		errno = 0xBAADBAAD;
   2b5c4:	f01a fa0e 	bl	459e4 <__errno>
   2b5c8:	4b5c      	ldr	r3, [pc, #368]	; (2b73c <bsd_os_errno_set+0x1f4>)
   2b5ca:	e053      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b5cc:	2829      	cmp	r0, #41	; 0x29
   2b5ce:	d05b      	beq.n	2b688 <bsd_os_errno_set+0x140>
   2b5d0:	dc0c      	bgt.n	2b5ec <bsd_os_errno_set+0xa4>
   2b5d2:	2823      	cmp	r0, #35	; 0x23
   2b5d4:	d050      	beq.n	2b678 <bsd_os_errno_set+0x130>
   2b5d6:	dc01      	bgt.n	2b5dc <bsd_os_errno_set+0x94>
   2b5d8:	2818      	cmp	r0, #24
   2b5da:	e7c6      	b.n	2b56a <bsd_os_errno_set+0x22>
   2b5dc:	2825      	cmp	r0, #37	; 0x25
   2b5de:	d04f      	beq.n	2b680 <bsd_os_errno_set+0x138>
   2b5e0:	2828      	cmp	r0, #40	; 0x28
   2b5e2:	d1d0      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = EMSGSIZE;
   2b5e4:	f01a f9fe 	bl	459e4 <__errno>
   2b5e8:	237a      	movs	r3, #122	; 0x7a
   2b5ea:	e043      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b5ec:	282b      	cmp	r0, #43	; 0x2b
   2b5ee:	d053      	beq.n	2b698 <bsd_os_errno_set+0x150>
   2b5f0:	db4e      	blt.n	2b690 <bsd_os_errno_set+0x148>
   2b5f2:	282c      	cmp	r0, #44	; 0x2c
   2b5f4:	d054      	beq.n	2b6a0 <bsd_os_errno_set+0x158>
   2b5f6:	282d      	cmp	r0, #45	; 0x2d
   2b5f8:	d1c5      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = EOPNOTSUPP;
   2b5fa:	f01a f9f3 	bl	459e4 <__errno>
   2b5fe:	235f      	movs	r3, #95	; 0x5f
   2b600:	e038      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b602:	283c      	cmp	r0, #60	; 0x3c
   2b604:	d068      	beq.n	2b6d8 <bsd_os_errno_set+0x190>
   2b606:	dc16      	bgt.n	2b636 <bsd_os_errno_set+0xee>
   2b608:	2834      	cmp	r0, #52	; 0x34
   2b60a:	d059      	beq.n	2b6c0 <bsd_os_errno_set+0x178>
   2b60c:	dc08      	bgt.n	2b620 <bsd_os_errno_set+0xd8>
   2b60e:	2832      	cmp	r0, #50	; 0x32
   2b610:	d04e      	beq.n	2b6b0 <bsd_os_errno_set+0x168>
   2b612:	dc51      	bgt.n	2b6b8 <bsd_os_errno_set+0x170>
   2b614:	2830      	cmp	r0, #48	; 0x30
   2b616:	d1b6      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = EADDRINUSE;
   2b618:	f01a f9e4 	bl	459e4 <__errno>
   2b61c:	2370      	movs	r3, #112	; 0x70
   2b61e:	e029      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b620:	2836      	cmp	r0, #54	; 0x36
   2b622:	d051      	beq.n	2b6c8 <bsd_os_errno_set+0x180>
   2b624:	db77      	blt.n	2b716 <bsd_os_errno_set+0x1ce>
   2b626:	2838      	cmp	r0, #56	; 0x38
   2b628:	d052      	beq.n	2b6d0 <bsd_os_errno_set+0x188>
   2b62a:	2839      	cmp	r0, #57	; 0x39
   2b62c:	d1ab      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = ENOTCONN;
   2b62e:	f01a f9d9 	bl	459e4 <__errno>
   2b632:	2380      	movs	r3, #128	; 0x80
   2b634:	e01e      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b636:	287d      	cmp	r0, #125	; 0x7d
   2b638:	d05a      	beq.n	2b6f0 <bsd_os_errno_set+0x1a8>
   2b63a:	dc0c      	bgt.n	2b656 <bsd_os_errno_set+0x10e>
   2b63c:	2870      	cmp	r0, #112	; 0x70
   2b63e:	d04f      	beq.n	2b6e0 <bsd_os_errno_set+0x198>
   2b640:	dc01      	bgt.n	2b646 <bsd_os_errno_set+0xfe>
   2b642:	2869      	cmp	r0, #105	; 0x69
   2b644:	e791      	b.n	2b56a <bsd_os_errno_set+0x22>
   2b646:	2872      	cmp	r0, #114	; 0x72
   2b648:	d04e      	beq.n	2b6e8 <bsd_os_errno_set+0x1a0>
   2b64a:	2873      	cmp	r0, #115	; 0x73
   2b64c:	d19b      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = EINPROGRESS;
   2b64e:	f01a f9c9 	bl	459e4 <__errno>
   2b652:	2377      	movs	r3, #119	; 0x77
   2b654:	e00e      	b.n	2b674 <bsd_os_errno_set+0x12c>
	switch (err_code) {
   2b656:	287f      	cmp	r0, #127	; 0x7f
   2b658:	d053      	beq.n	2b702 <bsd_os_errno_set+0x1ba>
   2b65a:	db4d      	blt.n	2b6f8 <bsd_os_errno_set+0x1b0>
   2b65c:	2880      	cmp	r0, #128	; 0x80
   2b65e:	d055      	beq.n	2b70c <bsd_os_errno_set+0x1c4>
   2b660:	2881      	cmp	r0, #129	; 0x81
   2b662:	d190      	bne.n	2b586 <bsd_os_errno_set+0x3e>
		errno = EKEYREJECTED;
   2b664:	f01a f9be 	bl	459e4 <__errno>
   2b668:	f240 73d4 	movw	r3, #2004	; 0x7d4
   2b66c:	e002      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EFAULT;
   2b66e:	f01a f9b9 	bl	459e4 <__errno>
   2b672:	230e      	movs	r3, #14
		errno = 0xBAADBAAD;
   2b674:	6003      	str	r3, [r0, #0]
}
   2b676:	e77c      	b.n	2b572 <bsd_os_errno_set+0x2a>
		errno = EAGAIN;
   2b678:	f01a f9b4 	bl	459e4 <__errno>
   2b67c:	230b      	movs	r3, #11
   2b67e:	e7f9      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EDOM;
   2b680:	f01a f9b0 	bl	459e4 <__errno>
   2b684:	2321      	movs	r3, #33	; 0x21
   2b686:	e7f5      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EPROTOTYPE;
   2b688:	f01a f9ac 	bl	459e4 <__errno>
   2b68c:	236b      	movs	r3, #107	; 0x6b
   2b68e:	e7f1      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ENOPROTOOPT;
   2b690:	f01a f9a8 	bl	459e4 <__errno>
   2b694:	236d      	movs	r3, #109	; 0x6d
   2b696:	e7ed      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EPROTONOSUPPORT;
   2b698:	f01a f9a4 	bl	459e4 <__errno>
   2b69c:	237b      	movs	r3, #123	; 0x7b
   2b69e:	e7e9      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ESOCKTNOSUPPORT;
   2b6a0:	f01a f9a0 	bl	459e4 <__errno>
   2b6a4:	237c      	movs	r3, #124	; 0x7c
   2b6a6:	e7e5      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EAFNOSUPPORT;
   2b6a8:	f01a f99c 	bl	459e4 <__errno>
   2b6ac:	236a      	movs	r3, #106	; 0x6a
   2b6ae:	e7e1      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ENETDOWN;
   2b6b0:	f01a f998 	bl	459e4 <__errno>
   2b6b4:	2373      	movs	r3, #115	; 0x73
   2b6b6:	e7dd      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ENETUNREACH;
   2b6b8:	f01a f994 	bl	459e4 <__errno>
   2b6bc:	2372      	movs	r3, #114	; 0x72
   2b6be:	e7d9      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ENETRESET;
   2b6c0:	f01a f990 	bl	459e4 <__errno>
   2b6c4:	237e      	movs	r3, #126	; 0x7e
   2b6c6:	e7d5      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ECONNRESET;
   2b6c8:	f01a f98c 	bl	459e4 <__errno>
   2b6cc:	2368      	movs	r3, #104	; 0x68
   2b6ce:	e7d1      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EISCONN;
   2b6d0:	f01a f988 	bl	459e4 <__errno>
   2b6d4:	237f      	movs	r3, #127	; 0x7f
   2b6d6:	e7cd      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ETIMEDOUT;
   2b6d8:	f01a f984 	bl	459e4 <__errno>
   2b6dc:	2374      	movs	r3, #116	; 0x74
   2b6de:	e7c9      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EHOSTDOWN;
   2b6e0:	f01a f980 	bl	459e4 <__errno>
   2b6e4:	2375      	movs	r3, #117	; 0x75
   2b6e6:	e7c5      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EALREADY;
   2b6e8:	f01a f97c 	bl	459e4 <__errno>
   2b6ec:	2378      	movs	r3, #120	; 0x78
   2b6ee:	e7c1      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ECANCELED;
   2b6f0:	f01a f978 	bl	459e4 <__errno>
   2b6f4:	238c      	movs	r3, #140	; 0x8c
   2b6f6:	e7bd      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ENOKEY;
   2b6f8:	f01a f974 	bl	459e4 <__errno>
   2b6fc:	f240 73d1 	movw	r3, #2001	; 0x7d1
   2b700:	e7b8      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EKEYEXPIRED;
   2b702:	f01a f96f 	bl	459e4 <__errno>
   2b706:	f240 73d2 	movw	r3, #2002	; 0x7d2
   2b70a:	e7b3      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = EKEYREVOKED;
   2b70c:	f01a f96a 	bl	459e4 <__errno>
   2b710:	f240 73d3 	movw	r3, #2003	; 0x7d3
   2b714:	e7ae      	b.n	2b674 <bsd_os_errno_set+0x12c>
		errno = ECONNABORTED;
   2b716:	f01a f965 	bl	459e4 <__errno>
   2b71a:	2371      	movs	r3, #113	; 0x71
   2b71c:	e7aa      	b.n	2b674 <bsd_os_errno_set+0x12c>
   2b71e:	bf00      	nop
   2b720:	0004d9c9 	.word	0x0004d9c9
   2b724:	00052672 	.word	0x00052672
   2b728:	0004b33b 	.word	0x0004b33b
   2b72c:	0004d9ed 	.word	0x0004d9ed
   2b730:	00049788 	.word	0x00049788
   2b734:	000497b8 	.word	0x000497b8
   2b738:	0004da14 	.word	0x0004da14
   2b73c:	baadbaad 	.word	0xbaadbaad

0002b740 <bsd_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2b744:	4b01      	ldr	r3, [pc, #4]	; (2b74c <bsd_os_application_irq_set+0xc>)
   2b746:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2b74a:	4770      	bx	lr
   2b74c:	e000e100 	.word	0xe000e100

0002b750 <bsd_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2b754:	4b01      	ldr	r3, [pc, #4]	; (2b75c <bsd_os_application_irq_clear+0xc>)
   2b756:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2b75a:	4770      	bx	lr
   2b75c:	e000e100 	.word	0xe000e100

0002b760 <bsd_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b760:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2b764:	4b01      	ldr	r3, [pc, #4]	; (2b76c <bsd_os_trace_irq_set+0xc>)
   2b766:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2b76a:	4770      	bx	lr
   2b76c:	e000e100 	.word	0xe000e100

0002b770 <bsd_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2b770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   2b774:	4b01      	ldr	r3, [pc, #4]	; (2b77c <bsd_os_trace_irq_clear+0xc>)
   2b776:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2b77a:	4770      	bx	lr
   2b77c:	e000e100 	.word	0xe000e100

0002b780 <bsd_os_init>:
#endif
}

/* This function is called by bsd_init and must not be called explicitly. */
void bsd_os_init(void)
{
   2b780:	b508      	push	{r3, lr}
	list->head = NULL;
   2b782:	2300      	movs	r3, #0
   2b784:	4a07      	ldr	r2, [pc, #28]	; (2b7a4 <bsd_os_init+0x24>)
	list->tail = NULL;
   2b786:	e9c2 3300 	strd	r3, r3, [r2]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2b78a:	4a07      	ldr	r2, [pc, #28]	; (2b7a8 <bsd_os_init+0x28>)
   2b78c:	e8d2 1fef 	ldaex	r1, [r2]
   2b790:	e8c2 3fe0 	stlex	r0, r3, [r2]
   2b794:	2800      	cmp	r0, #0
   2b796:	d1f9      	bne.n	2b78c <bsd_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   2b798:	f01b fc16 	bl	46fc8 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
}
   2b79c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	trace_task_create();
   2b7a0:	f01b bc07 	b.w	46fb2 <trace_task_create>
   2b7a4:	20024c28 	.word	0x20024c28
   2b7a8:	20024c24 	.word	0x20024c24

0002b7ac <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   2b7ac:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   2b7b0:	d03c      	beq.n	2b82c <z_to_nrf_optname+0x80>
   2b7b2:	dc04      	bgt.n	2b7be <z_to_nrf_optname+0x12>
   2b7b4:	2801      	cmp	r0, #1
   2b7b6:	d042      	beq.n	2b83e <z_to_nrf_optname+0x92>
			break;
		}
		break;

	default:
		retval = -1;
   2b7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		break;
	}

	return retval;
}
   2b7bc:	4770      	bx	lr
	switch (z_in_level) {
   2b7be:	f240 2302 	movw	r3, #514	; 0x202
   2b7c2:	4298      	cmp	r0, r3
   2b7c4:	d060      	beq.n	2b888 <z_to_nrf_optname+0xdc>
   2b7c6:	f240 2303 	movw	r3, #515	; 0x203
   2b7ca:	4298      	cmp	r0, r3
   2b7cc:	d1f4      	bne.n	2b7b8 <z_to_nrf_optname+0xc>
		switch (z_in_optname) {
   2b7ce:	3901      	subs	r1, #1
   2b7d0:	2913      	cmp	r1, #19
   2b7d2:	d8f1      	bhi.n	2b7b8 <z_to_nrf_optname+0xc>
   2b7d4:	a301      	add	r3, pc, #4	; (adr r3, 2b7dc <z_to_nrf_optname+0x30>)
   2b7d6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   2b7da:	bf00      	nop
   2b7dc:	0002b895 	.word	0x0002b895
   2b7e0:	0002b86d 	.word	0x0002b86d
   2b7e4:	0002b871 	.word	0x0002b871
   2b7e8:	0002b875 	.word	0x0002b875
   2b7ec:	0002b879 	.word	0x0002b879
   2b7f0:	0002b87d 	.word	0x0002b87d
   2b7f4:	0002b881 	.word	0x0002b881
   2b7f8:	0002b7b9 	.word	0x0002b7b9
   2b7fc:	0002b7b9 	.word	0x0002b7b9
   2b800:	0002b7b9 	.word	0x0002b7b9
   2b804:	0002b7b9 	.word	0x0002b7b9
   2b808:	0002b7b9 	.word	0x0002b7b9
   2b80c:	0002b7b9 	.word	0x0002b7b9
   2b810:	0002b7b9 	.word	0x0002b7b9
   2b814:	0002b7b9 	.word	0x0002b7b9
   2b818:	0002b7b9 	.word	0x0002b7b9
   2b81c:	0002b7b9 	.word	0x0002b7b9
   2b820:	0002b7b9 	.word	0x0002b7b9
   2b824:	0002b7b9 	.word	0x0002b7b9
   2b828:	0002b885 	.word	0x0002b885
		switch (z_in_optname) {
   2b82c:	3901      	subs	r1, #1
   2b82e:	2906      	cmp	r1, #6
   2b830:	d8c2      	bhi.n	2b7b8 <z_to_nrf_optname+0xc>
   2b832:	e8df f001 	tbb	[pc, r1]
   2b836:	211b      	.short	0x211b
   2b838:	2f1f2523 	.word	0x2f1f2523
   2b83c:	1d          	.byte	0x1d
   2b83d:	00          	.byte	0x00
		switch (z_in_optname) {
   2b83e:	2915      	cmp	r1, #21
   2b840:	d00d      	beq.n	2b85e <z_to_nrf_optname+0xb2>
   2b842:	dc07      	bgt.n	2b854 <z_to_nrf_optname+0xa8>
   2b844:	2904      	cmp	r1, #4
   2b846:	d015      	beq.n	2b874 <z_to_nrf_optname+0xc8>
   2b848:	2914      	cmp	r1, #20
   2b84a:	d008      	beq.n	2b85e <z_to_nrf_optname+0xb2>
   2b84c:	2902      	cmp	r1, #2
   2b84e:	d1b3      	bne.n	2b7b8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   2b850:	2328      	movs	r3, #40	; 0x28
   2b852:	e020      	b.n	2b896 <z_to_nrf_optname+0xea>
   2b854:	291e      	cmp	r1, #30
   2b856:	d002      	beq.n	2b85e <z_to_nrf_optname+0xb2>
   2b858:	dc04      	bgt.n	2b864 <z_to_nrf_optname+0xb8>
   2b85a:	2919      	cmp	r1, #25
   2b85c:	d1ac      	bne.n	2b7b8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   2b85e:	6011      	str	r1, [r2, #0]
	int retval = 0;
   2b860:	2000      	movs	r0, #0
			break;
   2b862:	4770      	bx	lr
   2b864:	291f      	cmp	r1, #31
   2b866:	d0fa      	beq.n	2b85e <z_to_nrf_optname+0xb2>
   2b868:	2920      	cmp	r1, #32
   2b86a:	e7f7      	b.n	2b85c <z_to_nrf_optname+0xb0>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   2b86c:	2302      	movs	r3, #2
   2b86e:	e012      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   2b870:	2303      	movs	r3, #3
   2b872:	e010      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   2b874:	2304      	movs	r3, #4
   2b876:	e00e      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   2b878:	2305      	movs	r3, #5
   2b87a:	e00c      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   2b87c:	2306      	movs	r3, #6
   2b87e:	e00a      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   2b880:	2307      	movs	r3, #7
   2b882:	e008      	b.n	2b896 <z_to_nrf_optname+0xea>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   2b884:	2314      	movs	r3, #20
   2b886:	e006      	b.n	2b896 <z_to_nrf_optname+0xea>
		switch (z_in_optname) {
   2b888:	2902      	cmp	r1, #2
   2b88a:	d0ef      	beq.n	2b86c <z_to_nrf_optname+0xc0>
   2b88c:	2903      	cmp	r1, #3
   2b88e:	d0ef      	beq.n	2b870 <z_to_nrf_optname+0xc4>
   2b890:	2901      	cmp	r1, #1
   2b892:	d191      	bne.n	2b7b8 <z_to_nrf_optname+0xc>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   2b894:	2301      	movs	r3, #1
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   2b896:	6013      	str	r3, [r2, #0]
   2b898:	e7e2      	b.n	2b860 <z_to_nrf_optname+0xb4>
   2b89a:	bf00      	nop

0002b89c <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   2b89c:	f240 1303 	movw	r3, #259	; 0x103
{
   2b8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   2b8a4:	4299      	cmp	r1, r3
{
   2b8a6:	b093      	sub	sp, #76	; 0x4c
	switch (request) {
   2b8a8:	f000 8098 	beq.w	2b9dc <nrf91_socket_offload_ioctl+0x140>
   2b8ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   2b8b0:	d005      	beq.n	2b8be <nrf91_socket_offload_ioctl+0x22>
   2b8b2:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   2b8b6:	d172      	bne.n	2b99e <nrf91_socket_offload_ioctl+0x102>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   2b8b8:	f06f 0411 	mvn.w	r4, #17
   2b8bc:	e01c      	b.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
	for (int i = 0; i < nfds; i++) {
   2b8be:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   2b8c2:	e9d2 a900 	ldrd	sl, r9, [r2]
		timeout = va_arg(args, int);
   2b8c6:	6893      	ldr	r3, [r2, #8]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   2b8c8:	2100      	movs	r1, #0
   2b8ca:	2240      	movs	r2, #64	; 0x40
   2b8cc:	a802      	add	r0, sp, #8
		timeout = va_arg(args, int);
   2b8ce:	9301      	str	r3, [sp, #4]
	struct nrf_pollfd tmp[BSD_MAX_SOCKET_COUNT] = { 0 };
   2b8d0:	4655      	mov	r5, sl
   2b8d2:	f01c fc79 	bl	481c8 <memset>
   2b8d6:	4657      	mov	r7, sl
	int retval = 0;
   2b8d8:	4644      	mov	r4, r8
		tmp[i].events = 0;
   2b8da:	46c3      	mov	fp, r8
   2b8dc:	ae02      	add	r6, sp, #8
	for (int i = 0; i < nfds; i++) {
   2b8de:	45c1      	cmp	r9, r8
   2b8e0:	dc0e      	bgt.n	2b900 <nrf91_socket_offload_ioctl+0x64>
	if (retval > 0) {
   2b8e2:	2c00      	cmp	r4, #0
   2b8e4:	dc08      	bgt.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2b8e6:	9a01      	ldr	r2, [sp, #4]
   2b8e8:	4649      	mov	r1, r9
   2b8ea:	a802      	add	r0, sp, #8
   2b8ec:	f010 fdd8 	bl	3c4a0 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   2b8f0:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2b8f2:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   2b8f4:	4599      	cmp	r9, r3
   2b8f6:	dc29      	bgt.n	2b94c <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   2b8f8:	4620      	mov	r0, r4
   2b8fa:	b013      	add	sp, #76	; 0x4c
   2b8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   2b900:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   2b902:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   2b906:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   2b908:	f8a7 b006 	strh.w	fp, [r7, #6]
		if (fds[i].fd < 0) {
   2b90c:	da05      	bge.n	2b91a <nrf91_socket_offload_ioctl+0x7e>
			tmp[i].fd = fds[i].fd;
   2b90e:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   2b910:	f108 0801 	add.w	r8, r8, #1
   2b914:	3608      	adds	r6, #8
   2b916:	3708      	adds	r7, #8
   2b918:	e7e1      	b.n	2b8de <nrf91_socket_offload_ioctl+0x42>
			obj = z_get_fd_obj(fds[i].fd,
   2b91a:	2286      	movs	r2, #134	; 0x86
   2b91c:	4931      	ldr	r1, [pc, #196]	; (2b9e4 <nrf91_socket_offload_ioctl+0x148>)
   2b91e:	f7f8 fbd1 	bl	240c4 <z_get_fd_obj>
			if (obj != NULL) {
   2b922:	b178      	cbz	r0, 2b944 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   2b924:	3801      	subs	r0, #1
   2b926:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   2b928:	88b9      	ldrh	r1, [r7, #4]
   2b92a:	07ca      	lsls	r2, r1, #31
			tmp[i].events |= NRF_POLLIN;
   2b92c:	bf42      	ittt	mi
   2b92e:	88b2      	ldrhmi	r2, [r6, #4]
   2b930:	f042 0201 	orrmi.w	r2, r2, #1
   2b934:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   2b936:	074b      	lsls	r3, r1, #29
			tmp[i].events |= NRF_POLLOUT;
   2b938:	bf42      	ittt	mi
   2b93a:	88b2      	ldrhmi	r2, [r6, #4]
   2b93c:	f042 0202 	orrmi.w	r2, r2, #2
   2b940:	80b2      	strhmi	r2, [r6, #4]
   2b942:	e7e5      	b.n	2b910 <nrf91_socket_offload_ioctl+0x74>
				fds[i].revents = POLLNVAL;
   2b944:	2220      	movs	r2, #32
				retval++;
   2b946:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   2b948:	80fa      	strh	r2, [r7, #6]
				retval++;
   2b94a:	e7ed      	b.n	2b928 <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   2b94c:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   2b950:	2a00      	cmp	r2, #0
   2b952:	db21      	blt.n	2b998 <nrf91_socket_offload_ioctl+0xfc>
		if (tmp[i].revents & NRF_POLLIN) {
   2b954:	aa02      	add	r2, sp, #8
   2b956:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2b95a:	88d2      	ldrh	r2, [r2, #6]
   2b95c:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   2b95e:	bf42      	ittt	mi
   2b960:	88e9      	ldrhmi	r1, [r5, #6]
   2b962:	f041 0101 	orrmi.w	r1, r1, #1
   2b966:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   2b968:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   2b96a:	bf42      	ittt	mi
   2b96c:	88e9      	ldrhmi	r1, [r5, #6]
   2b96e:	f041 0104 	orrmi.w	r1, r1, #4
   2b972:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   2b974:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   2b976:	bf42      	ittt	mi
   2b978:	88e9      	ldrhmi	r1, [r5, #6]
   2b97a:	f041 0108 	orrmi.w	r1, r1, #8
   2b97e:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   2b980:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   2b982:	bf42      	ittt	mi
   2b984:	88e9      	ldrhmi	r1, [r5, #6]
   2b986:	f041 0120 	orrmi.w	r1, r1, #32
   2b98a:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   2b98c:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   2b98e:	bf42      	ittt	mi
   2b990:	88ea      	ldrhmi	r2, [r5, #6]
   2b992:	f042 0210 	orrmi.w	r2, r2, #16
   2b996:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   2b998:	3301      	adds	r3, #1
   2b99a:	3508      	adds	r5, #8
   2b99c:	e7aa      	b.n	2b8f4 <nrf91_socket_offload_ioctl+0x58>
	switch (cmd) {
   2b99e:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   2b9a0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
	switch (cmd) {
   2b9a4:	d00b      	beq.n	2b9be <nrf91_socket_offload_ioctl+0x122>
   2b9a6:	2904      	cmp	r1, #4
   2b9a8:	d111      	bne.n	2b9ce <nrf91_socket_offload_ioctl+0x132>
		flags = va_arg(args, int);
   2b9aa:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2b9ac:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   2b9b0:	d10d      	bne.n	2b9ce <nrf91_socket_offload_ioctl+0x132>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   2b9b2:	1392      	asrs	r2, r2, #14
   2b9b4:	2101      	movs	r1, #1
   2b9b6:	f010 fd75 	bl	3c4a4 <nrf_fcntl>
   2b9ba:	4604      	mov	r4, r0
		break;
   2b9bc:	e79c      	b.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   2b9be:	2200      	movs	r2, #0
   2b9c0:	2102      	movs	r1, #2
   2b9c2:	f010 fd6f 	bl	3c4a4 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   2b9c6:	0380      	lsls	r0, r0, #14
   2b9c8:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   2b9cc:	e794      	b.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
	errno = EINVAL;
   2b9ce:	f01a f809 	bl	459e4 <__errno>
   2b9d2:	2316      	movs	r3, #22
	return retval;
   2b9d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   2b9d8:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   2b9da:	e78d      	b.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
		return -EOPNOTSUPP;
   2b9dc:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   2b9e0:	e78a      	b.n	2b8f8 <nrf91_socket_offload_ioctl+0x5c>
   2b9e2:	bf00      	nop
   2b9e4:	00049f90 	.word	0x00049f90

0002b9e8 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   2b9e8:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   2b9ea:	4b03      	ldr	r3, [pc, #12]	; (2b9f8 <nrf91_socket_iface_init+0x10>)
   2b9ec:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   2b9ee:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   2b9f0:	4802      	ldr	r0, [pc, #8]	; (2b9fc <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   2b9f2:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   2b9f4:	f7f9 be7e 	b.w	256f4 <socket_offload_dns_register>
   2b9f8:	20024c80 	.word	0x20024c80
   2b9fc:	00049f88 	.word	0x00049f88

0002ba00 <nrf91_socket_offload_accept>:
{
   2ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ba04:	b08a      	sub	sp, #40	; 0x28
   2ba06:	4605      	mov	r5, r0
   2ba08:	460c      	mov	r4, r1
   2ba0a:	4616      	mov	r6, r2
	int fd = z_reserve_fd();
   2ba0c:	f7f8 fb8a 	bl	24124 <z_reserve_fd>
	if (fd < 0) {
   2ba10:	1e07      	subs	r7, r0, #0
	int sd = OBJ_TO_SD(obj);
   2ba12:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
	if (fd < 0) {
   2ba16:	da05      	bge.n	2ba24 <nrf91_socket_offload_accept+0x24>
	return -1;
   2ba18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
}
   2ba1c:	4638      	mov	r0, r7
   2ba1e:	b00a      	add	sp, #40	; 0x28
   2ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   2ba24:	b324      	cbz	r4, 2ba70 <nrf91_socket_offload_accept+0x70>
   2ba26:	b336      	cbz	r6, 2ba76 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2ba28:	6832      	ldr	r2, [r6, #0]
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   2ba2a:	ad01      	add	r5, sp, #4
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2ba2c:	2a08      	cmp	r2, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   2ba2e:	bf0c      	ite	eq
   2ba30:	2210      	moveq	r2, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   2ba32:	2224      	movne	r2, #36	; 0x24
   2ba34:	9200      	str	r2, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2ba36:	466a      	mov	r2, sp
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   2ba38:	4629      	mov	r1, r5
   2ba3a:	4618      	mov	r0, r3
   2ba3c:	f010 fccc 	bl	3c3d8 <nrf_accept>
	if (new_sd < 0) {
   2ba40:	f1b0 0800 	subs.w	r8, r0, #0
   2ba44:	dbe8      	blt.n	2ba18 <nrf91_socket_offload_accept+0x18>
	if ((addr != NULL) && (addrlen != NULL)) {
   2ba46:	b164      	cbz	r4, 2ba62 <nrf91_socket_offload_accept+0x62>
   2ba48:	b15e      	cbz	r6, 2ba62 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   2ba4a:	686b      	ldr	r3, [r5, #4]
   2ba4c:	2b02      	cmp	r3, #2
   2ba4e:	d115      	bne.n	2ba7c <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   2ba50:	2308      	movs	r3, #8
   2ba52:	6033      	str	r3, [r6, #0]
	ptr->sin_port = nrf_in->sin_port;
   2ba54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   2ba58:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   2ba5a:	2301      	movs	r3, #1
   2ba5c:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   2ba5e:	9b04      	ldr	r3, [sp, #16]
   2ba60:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   2ba62:	4a0d      	ldr	r2, [pc, #52]	; (2ba98 <nrf91_socket_offload_accept+0x98>)
   2ba64:	f108 0101 	add.w	r1, r8, #1
   2ba68:	4638      	mov	r0, r7
   2ba6a:	f7f8 fb8d 	bl	24188 <z_finalize_fd>
	return fd;
   2ba6e:	e7d5      	b.n	2ba1c <nrf91_socket_offload_accept+0x1c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2ba70:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2ba72:	4625      	mov	r5, r4
   2ba74:	e7e0      	b.n	2ba38 <nrf91_socket_offload_accept+0x38>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   2ba76:	4632      	mov	r2, r6
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   2ba78:	4635      	mov	r5, r6
   2ba7a:	e7dd      	b.n	2ba38 <nrf91_socket_offload_accept+0x38>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   2ba7c:	2b0a      	cmp	r3, #10
   2ba7e:	d106      	bne.n	2ba8e <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   2ba80:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   2ba82:	a901      	add	r1, sp, #4
			*addrlen = sizeof(struct sockaddr_in6);
   2ba84:	6033      	str	r3, [r6, #0]
			nrf_to_z_ipv6(
   2ba86:	4620      	mov	r0, r4
   2ba88:	f01b fb93 	bl	471b2 <nrf_to_z_ipv6>
   2ba8c:	e7e9      	b.n	2ba62 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   2ba8e:	4638      	mov	r0, r7
   2ba90:	f7f8 fb84 	bl	2419c <z_free_fd>
   2ba94:	e7c0      	b.n	2ba18 <nrf91_socket_offload_accept+0x18>
   2ba96:	bf00      	nop
   2ba98:	00049f90 	.word	0x00049f90

0002ba9c <nrf91_socket_offload_sendmsg>:
{
   2ba9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2baa0:	4607      	mov	r7, r0
   2baa2:	4690      	mov	r8, r2
	if (msg == NULL) {
   2baa4:	460c      	mov	r4, r1
   2baa6:	b319      	cbz	r1, 2baf0 <nrf91_socket_offload_sendmsg+0x54>
	for (i = 0; i < msg->msg_iovlen; i++) {
   2baa8:	2300      	movs	r3, #0
	ssize_t len = 0;
   2baaa:	461a      	mov	r2, r3
   2baac:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   2baae:	4298      	cmp	r0, r3
   2bab0:	d128      	bne.n	2bb04 <nrf91_socket_offload_sendmsg+0x68>
	if (len <= sizeof(buf)) {
   2bab2:	2a80      	cmp	r2, #128	; 0x80
   2bab4:	d857      	bhi.n	2bb66 <nrf91_socket_offload_sendmsg+0xca>
		for (i = 0; i < msg->msg_iovlen; i++) {
   2bab6:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   2bab8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2babc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bac0:	482a      	ldr	r0, [pc, #168]	; (2bb6c <nrf91_socket_offload_sendmsg+0xd0>)
   2bac2:	f013 fa8d 	bl	3efe0 <z_impl_k_mutex_lock>
		len = 0;
   2bac6:	462e      	mov	r6, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2bac8:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2bb70 <nrf91_socket_offload_sendmsg+0xd4>
		for (i = 0; i < msg->msg_iovlen; i++) {
   2bacc:	68e3      	ldr	r3, [r4, #12]
   2bace:	42ab      	cmp	r3, r5
   2bad0:	d81f      	bhi.n	2bb12 <nrf91_socket_offload_sendmsg+0x76>
		ret = nrf91_socket_offload_sendto(obj, buf, len,
   2bad2:	6863      	ldr	r3, [r4, #4]
   2bad4:	4632      	mov	r2, r6
   2bad6:	9301      	str	r3, [sp, #4]
   2bad8:	6823      	ldr	r3, [r4, #0]
   2bada:	4925      	ldr	r1, [pc, #148]	; (2bb70 <nrf91_socket_offload_sendmsg+0xd4>)
   2badc:	9300      	str	r3, [sp, #0]
   2bade:	4638      	mov	r0, r7
   2bae0:	4643      	mov	r3, r8
   2bae2:	f01b fcc2 	bl	4746a <nrf91_socket_offload_sendto>
   2bae6:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   2bae8:	4820      	ldr	r0, [pc, #128]	; (2bb6c <nrf91_socket_offload_sendmsg+0xd0>)
   2baea:	f013 fb77 	bl	3f1dc <z_impl_k_mutex_unlock>
		return ret;
   2baee:	e005      	b.n	2bafc <nrf91_socket_offload_sendmsg+0x60>
		errno = EINVAL;
   2baf0:	f019 ff78 	bl	459e4 <__errno>
   2baf4:	2316      	movs	r3, #22
		return -1;
   2baf6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = EINVAL;
   2bafa:	6003      	str	r3, [r0, #0]
}
   2bafc:	4630      	mov	r0, r6
   2bafe:	b002      	add	sp, #8
   2bb00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   2bb04:	68a1      	ldr	r1, [r4, #8]
   2bb06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2bb0a:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   2bb0c:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   2bb0e:	440a      	add	r2, r1
   2bb10:	e7cd      	b.n	2baae <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   2bb12:	68a3      	ldr	r3, [r4, #8]
   2bb14:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   2bb18:	eb03 0209 	add.w	r2, r3, r9
   2bb1c:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
   2bb20:	eb0a 0006 	add.w	r0, sl, r6
   2bb24:	6852      	ldr	r2, [r2, #4]
   2bb26:	f01c fb2f 	bl	48188 <memcpy>
			len += msg->msg_iov[i].iov_len;
   2bb2a:	68a3      	ldr	r3, [r4, #8]
		for (i = 0; i < msg->msg_iovlen; i++) {
   2bb2c:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   2bb2e:	444b      	add	r3, r9
   2bb30:	685b      	ldr	r3, [r3, #4]
   2bb32:	441e      	add	r6, r3
   2bb34:	e7ca      	b.n	2bacc <nrf91_socket_offload_sendmsg+0x30>
		if (msg->msg_iov[i].iov_len == 0) {
   2bb36:	68a1      	ldr	r1, [r4, #8]
   2bb38:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   2bb3c:	685a      	ldr	r2, [r3, #4]
   2bb3e:	b162      	cbz	r2, 2bb5a <nrf91_socket_offload_sendmsg+0xbe>
		ret = nrf91_socket_offload_sendto(obj, msg->msg_iov[i].iov_base,
   2bb40:	6863      	ldr	r3, [r4, #4]
   2bb42:	4638      	mov	r0, r7
   2bb44:	9301      	str	r3, [sp, #4]
   2bb46:	6823      	ldr	r3, [r4, #0]
   2bb48:	9300      	str	r3, [sp, #0]
   2bb4a:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   2bb4e:	4643      	mov	r3, r8
   2bb50:	f01b fc8b 	bl	4746a <nrf91_socket_offload_sendto>
		if (ret < 0) {
   2bb54:	1e06      	subs	r6, r0, #0
   2bb56:	dbd1      	blt.n	2bafc <nrf91_socket_offload_sendmsg+0x60>
		len += ret;
   2bb58:	44b1      	add	r9, r6
	for (i = 0; i < msg->msg_iovlen; i++) {
   2bb5a:	3501      	adds	r5, #1
   2bb5c:	68e3      	ldr	r3, [r4, #12]
   2bb5e:	42ab      	cmp	r3, r5
   2bb60:	d8e9      	bhi.n	2bb36 <nrf91_socket_offload_sendmsg+0x9a>
   2bb62:	464e      	mov	r6, r9
   2bb64:	e7ca      	b.n	2bafc <nrf91_socket_offload_sendmsg+0x60>
   2bb66:	2500      	movs	r5, #0
	len = 0;
   2bb68:	46a9      	mov	r9, r5
   2bb6a:	e7f7      	b.n	2bb5c <nrf91_socket_offload_sendmsg+0xc0>
   2bb6c:	20020c80 	.word	0x20020c80
   2bb70:	2002b575 	.word	0x2002b575

0002bb74 <nrf91_socket_create>:
{
   2bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bb76:	4606      	mov	r6, r0
   2bb78:	460d      	mov	r5, r1
   2bb7a:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   2bb7c:	f7f8 fad2 	bl	24124 <z_reserve_fd>
	if (fd < 0) {
   2bb80:	1e04      	subs	r4, r0, #0
   2bb82:	db0d      	blt.n	2bba0 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   2bb84:	b2b0      	uxth	r0, r6
   2bb86:	f01b fa3a 	bl	46ffe <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   2bb8a:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   2bb8e:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   2bb90:	d109      	bne.n	2bba6 <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   2bb92:	f019 ff27 	bl	459e4 <__errno>
   2bb96:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   2bb98:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   2bb9a:	4620      	mov	r0, r4
   2bb9c:	f7f8 fafe 	bl	2419c <z_free_fd>
		return -1;
   2bba0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bba4:	e01b      	b.n	2bbde <nrf91_socket_create+0x6a>
	switch (socktype) {
   2bba6:	2d03      	cmp	r5, #3
   2bba8:	d003      	beq.n	2bbb2 <nrf91_socket_create+0x3e>
		return NRF_SOCK_MGMT;
   2bbaa:	2d04      	cmp	r5, #4
   2bbac:	bf08      	it	eq
   2bbae:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   2bbb2:	4638      	mov	r0, r7
   2bbb4:	f01b fa3b 	bl	4702e <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   2bbb8:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   2bbbc:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   2bbbe:	d103      	bne.n	2bbc8 <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   2bbc0:	f019 ff10 	bl	459e4 <__errno>
   2bbc4:	237b      	movs	r3, #123	; 0x7b
   2bbc6:	e7e7      	b.n	2bb98 <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   2bbc8:	4629      	mov	r1, r5
   2bbca:	4630      	mov	r0, r6
   2bbcc:	f010 fb44 	bl	3c258 <nrf_socket>
	if (sd < 0) {
   2bbd0:	1e01      	subs	r1, r0, #0
   2bbd2:	dbe2      	blt.n	2bb9a <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   2bbd4:	4a03      	ldr	r2, [pc, #12]	; (2bbe4 <nrf91_socket_create+0x70>)
   2bbd6:	3101      	adds	r1, #1
   2bbd8:	4620      	mov	r0, r4
   2bbda:	f7f8 fad5 	bl	24188 <z_finalize_fd>
}
   2bbde:	4620      	mov	r0, r4
   2bbe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bbe2:	bf00      	nop
   2bbe4:	00049f90 	.word	0x00049f90

0002bbe8 <z_impl_gpio_pin_interrupt_configure>:
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   2bbe8:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   2bbec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   2bbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   2bbf4:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   2bbf8:	4605      	mov	r5, r0
   2bbfa:	460f      	mov	r7, r1
   2bbfc:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   2bbfe:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   2bc02:	d15f      	bne.n	2bcc4 <z_impl_gpio_pin_interrupt_configure+0xdc>
   2bc04:	4937      	ldr	r1, [pc, #220]	; (2bce4 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   2bc06:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   2bc0a:	4a37      	ldr	r2, [pc, #220]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc0c:	4837      	ldr	r0, [pc, #220]	; (2bcec <z_impl_gpio_pin_interrupt_configure+0x104>)
   2bc0e:	f018 fb5f 	bl	442d0 <printk>
   2bc12:	4837      	ldr	r0, [pc, #220]	; (2bcf0 <z_impl_gpio_pin_interrupt_configure+0x108>)
   2bc14:	f018 fb5c 	bl	442d0 <printk>
   2bc18:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   2bc1c:	4832      	ldr	r0, [pc, #200]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc1e:	f018 fd71 	bl	44704 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   2bc22:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   2bc26:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   2bc2a:	d10e      	bne.n	2bc4a <z_impl_gpio_pin_interrupt_configure+0x62>
   2bc2c:	4931      	ldr	r1, [pc, #196]	; (2bcf4 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   2bc2e:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   2bc32:	4a2d      	ldr	r2, [pc, #180]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc34:	482d      	ldr	r0, [pc, #180]	; (2bcec <z_impl_gpio_pin_interrupt_configure+0x104>)
   2bc36:	f018 fb4b 	bl	442d0 <printk>
   2bc3a:	482f      	ldr	r0, [pc, #188]	; (2bcf8 <z_impl_gpio_pin_interrupt_configure+0x110>)
   2bc3c:	f018 fb48 	bl	442d0 <printk>
   2bc40:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
   2bc44:	4828      	ldr	r0, [pc, #160]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc46:	f018 fd5d 	bl	44704 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   2bc4a:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   2bc4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   2bc52:	d10e      	bne.n	2bc72 <z_impl_gpio_pin_interrupt_configure+0x8a>
   2bc54:	4929      	ldr	r1, [pc, #164]	; (2bcfc <z_impl_gpio_pin_interrupt_configure+0x114>)
   2bc56:	f240 13fb 	movw	r3, #507	; 0x1fb
   2bc5a:	4a23      	ldr	r2, [pc, #140]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc5c:	4823      	ldr	r0, [pc, #140]	; (2bcec <z_impl_gpio_pin_interrupt_configure+0x104>)
   2bc5e:	f018 fb37 	bl	442d0 <printk>
   2bc62:	4827      	ldr	r0, [pc, #156]	; (2bd00 <z_impl_gpio_pin_interrupt_configure+0x118>)
   2bc64:	f018 fb34 	bl	442d0 <printk>
   2bc68:	f240 11fb 	movw	r1, #507	; 0x1fb
   2bc6c:	481e      	ldr	r0, [pc, #120]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc6e:	f018 fd49 	bl	44704 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bc72:	2601      	movs	r6, #1
   2bc74:	f8da 3000 	ldr.w	r3, [sl]
   2bc78:	40be      	lsls	r6, r7
   2bc7a:	421e      	tst	r6, r3
   2bc7c:	d10e      	bne.n	2bc9c <z_impl_gpio_pin_interrupt_configure+0xb4>
   2bc7e:	4921      	ldr	r1, [pc, #132]	; (2bd04 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   2bc80:	f240 13ff 	movw	r3, #511	; 0x1ff
   2bc84:	4a18      	ldr	r2, [pc, #96]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc86:	4819      	ldr	r0, [pc, #100]	; (2bcec <z_impl_gpio_pin_interrupt_configure+0x104>)
   2bc88:	f018 fb22 	bl	442d0 <printk>
   2bc8c:	481e      	ldr	r0, [pc, #120]	; (2bd08 <z_impl_gpio_pin_interrupt_configure+0x120>)
   2bc8e:	f018 fb1f 	bl	442d0 <printk>
   2bc92:	f240 11ff 	movw	r1, #511	; 0x1ff
   2bc96:	4814      	ldr	r0, [pc, #80]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bc98:	f018 fd34 	bl	44704 <assert_post_action>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2bc9c:	0423      	lsls	r3, r4, #16
   2bc9e:	d505      	bpl.n	2bcac <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   2bca0:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   2bca4:	421e      	tst	r6, r3
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   2bca6:	bf18      	it	ne
   2bca8:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2bcac:	f8d8 6018 	ldr.w	r6, [r8, #24]
   2bcb0:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   2bcb4:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
   2bcb8:	4639      	mov	r1, r7
   2bcba:	4628      	mov	r0, r5
   2bcbc:	46b4      	mov	ip, r6
}
   2bcbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   2bcc2:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   2bcc4:	2b00      	cmp	r3, #0
   2bcc6:	d1ac      	bne.n	2bc22 <z_impl_gpio_pin_interrupt_configure+0x3a>
   2bcc8:	4910      	ldr	r1, [pc, #64]	; (2bd0c <z_impl_gpio_pin_interrupt_configure+0x124>)
   2bcca:	f240 13ef 	movw	r3, #495	; 0x1ef
   2bcce:	4a06      	ldr	r2, [pc, #24]	; (2bce8 <z_impl_gpio_pin_interrupt_configure+0x100>)
   2bcd0:	4806      	ldr	r0, [pc, #24]	; (2bcec <z_impl_gpio_pin_interrupt_configure+0x104>)
   2bcd2:	f018 fafd 	bl	442d0 <printk>
   2bcd6:	480e      	ldr	r0, [pc, #56]	; (2bd10 <z_impl_gpio_pin_interrupt_configure+0x128>)
   2bcd8:	f018 fafa 	bl	442d0 <printk>
   2bcdc:	f240 11ef 	movw	r1, #495	; 0x1ef
   2bce0:	e79c      	b.n	2bc1c <z_impl_gpio_pin_interrupt_configure+0x34>
   2bce2:	bf00      	nop
   2bce4:	0004db96 	.word	0x0004db96
   2bce8:	0004d2a4 	.word	0x0004d2a4
   2bcec:	0004b33b 	.word	0x0004b33b
   2bcf0:	0004dbd7 	.word	0x0004dbd7
   2bcf4:	0004dc58 	.word	0x0004dc58
   2bcf8:	0004dcd9 	.word	0x0004dcd9
   2bcfc:	0004dd2d 	.word	0x0004dd2d
   2bd00:	0004dd77 	.word	0x0004dd77
   2bd04:	0004d2ce 	.word	0x0004d2ce
   2bd08:	0004d30c 	.word	0x0004d30c
   2bd0c:	0004dc03 	.word	0x0004dc03
   2bd10:	0004dc2d 	.word	0x0004dc2d

0002bd14 <gpio_pin_configure>:
{
   2bd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd18:	2401      	movs	r4, #1
   2bd1a:	6843      	ldr	r3, [r0, #4]
   2bd1c:	408c      	lsls	r4, r1
   2bd1e:	681b      	ldr	r3, [r3, #0]
{
   2bd20:	4605      	mov	r5, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd22:	421c      	tst	r4, r3
{
   2bd24:	460f      	mov	r7, r1
   2bd26:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   2bd28:	68c6      	ldr	r6, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd2a:	d10e      	bne.n	2bd4a <gpio_pin_configure+0x36>
   2bd2c:	490d      	ldr	r1, [pc, #52]	; (2bd64 <gpio_pin_configure+0x50>)
   2bd2e:	f240 2345 	movw	r3, #581	; 0x245
   2bd32:	4a0d      	ldr	r2, [pc, #52]	; (2bd68 <gpio_pin_configure+0x54>)
   2bd34:	480d      	ldr	r0, [pc, #52]	; (2bd6c <gpio_pin_configure+0x58>)
   2bd36:	f018 facb 	bl	442d0 <printk>
   2bd3a:	480d      	ldr	r0, [pc, #52]	; (2bd70 <gpio_pin_configure+0x5c>)
   2bd3c:	f018 fac8 	bl	442d0 <printk>
   2bd40:	f240 2145 	movw	r1, #581	; 0x245
   2bd44:	4808      	ldr	r0, [pc, #32]	; (2bd68 <gpio_pin_configure+0x54>)
   2bd46:	f018 fcdd 	bl	44704 <assert_post_action>
	return api->pin_configure(port, pin, flags);
   2bd4a:	68ab      	ldr	r3, [r5, #8]
   2bd4c:	4642      	mov	r2, r8
   2bd4e:	681b      	ldr	r3, [r3, #0]
   2bd50:	4639      	mov	r1, r7
   2bd52:	4628      	mov	r0, r5
   2bd54:	4798      	blx	r3
	if (ret != 0) {
   2bd56:	b918      	cbnz	r0, 2bd60 <gpio_pin_configure+0x4c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2bd58:	6833      	ldr	r3, [r6, #0]
   2bd5a:	ea23 0404 	bic.w	r4, r3, r4
   2bd5e:	6034      	str	r4, [r6, #0]
}
   2bd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bd64:	0004d2ce 	.word	0x0004d2ce
   2bd68:	0004d2a4 	.word	0x0004d2a4
   2bd6c:	0004b33b 	.word	0x0004b33b
   2bd70:	0004d30c 	.word	0x0004d30c

0002bd74 <gpio_pin_set_raw>:
{
   2bd74:	b570      	push	{r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd76:	2501      	movs	r5, #1
   2bd78:	6843      	ldr	r3, [r0, #4]
   2bd7a:	408d      	lsls	r5, r1
   2bd7c:	681b      	ldr	r3, [r3, #0]
{
   2bd7e:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd80:	421d      	tst	r5, r3
{
   2bd82:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bd84:	d10e      	bne.n	2bda4 <gpio_pin_set_raw+0x30>
   2bd86:	490d      	ldr	r1, [pc, #52]	; (2bdbc <gpio_pin_set_raw+0x48>)
   2bd88:	f240 33c1 	movw	r3, #961	; 0x3c1
   2bd8c:	4a0c      	ldr	r2, [pc, #48]	; (2bdc0 <gpio_pin_set_raw+0x4c>)
   2bd8e:	480d      	ldr	r0, [pc, #52]	; (2bdc4 <gpio_pin_set_raw+0x50>)
   2bd90:	f018 fa9e 	bl	442d0 <printk>
   2bd94:	480c      	ldr	r0, [pc, #48]	; (2bdc8 <gpio_pin_set_raw+0x54>)
   2bd96:	f018 fa9b 	bl	442d0 <printk>
   2bd9a:	f240 31c1 	movw	r1, #961	; 0x3c1
   2bd9e:	4808      	ldr	r0, [pc, #32]	; (2bdc0 <gpio_pin_set_raw+0x4c>)
   2bda0:	f018 fcb0 	bl	44704 <assert_post_action>
	if (value != 0)	{
   2bda4:	b136      	cbz	r6, 2bdb4 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   2bda6:	68a3      	ldr	r3, [r4, #8]
   2bda8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2bdaa:	4629      	mov	r1, r5
   2bdac:	4620      	mov	r0, r4
}
   2bdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   2bdb2:	4718      	bx	r3
   2bdb4:	68a3      	ldr	r3, [r4, #8]
   2bdb6:	691b      	ldr	r3, [r3, #16]
   2bdb8:	e7f7      	b.n	2bdaa <gpio_pin_set_raw+0x36>
   2bdba:	bf00      	nop
   2bdbc:	0004d2ce 	.word	0x0004d2ce
   2bdc0:	0004d2a4 	.word	0x0004d2a4
   2bdc4:	0004b33b 	.word	0x0004b33b
   2bdc8:	0004d30c 	.word	0x0004d30c

0002bdcc <dk_set_leds_state.part.6>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   2bdcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bdd0:	4606      	mov	r6, r0
   2bdd2:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2bdd4:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   2bdd6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 2be3c <dk_set_leds_state.part.6+0x70>
   2bdda:	f8df 9064 	ldr.w	r9, [pc, #100]	; 2be40 <dk_set_leds_state.part.6+0x74>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   2bdde:	fa26 f204 	lsr.w	r2, r6, r4
   2bde2:	fa27 f304 	lsr.w	r3, r7, r4
   2bde6:	4313      	orrs	r3, r2
   2bde8:	07db      	lsls	r3, r3, #31
   2bdea:	d51b      	bpl.n	2be24 <dk_set_leds_state.part.6+0x58>
			int err = gpio_pin_set_raw(led_devs[i],
   2bdec:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   2bdf0:	f002 0201 	and.w	r2, r2, #1
   2bdf4:	7919      	ldrb	r1, [r3, #4]
   2bdf6:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   2bdfa:	f7ff ffbb 	bl	2bd74 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   2bdfe:	4605      	mov	r5, r0
   2be00:	b180      	cbz	r0, 2be24 <dk_set_leds_state.part.6+0x58>
				LOG_ERR("Cannot write LED gpio");
   2be02:	2301      	movs	r3, #1
   2be04:	f04f 0000 	mov.w	r0, #0
   2be08:	4a09      	ldr	r2, [pc, #36]	; (2be30 <dk_set_leds_state.part.6+0x64>)
   2be0a:	f363 0007 	bfi	r0, r3, #0, #8
   2be0e:	4b09      	ldr	r3, [pc, #36]	; (2be34 <dk_set_leds_state.part.6+0x68>)
   2be10:	4909      	ldr	r1, [pc, #36]	; (2be38 <dk_set_leds_state.part.6+0x6c>)
   2be12:	1a9b      	subs	r3, r3, r2
   2be14:	08db      	lsrs	r3, r3, #3
   2be16:	f363 108f 	bfi	r0, r3, #6, #10
   2be1a:	f018 fc84 	bl	44726 <log_string_sync>
			}
		}
	}

	return 0;
}
   2be1e:	4628      	mov	r0, r5
   2be20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2be24:	3401      	adds	r4, #1
   2be26:	2c04      	cmp	r4, #4
   2be28:	d1d9      	bne.n	2bdde <dk_set_leds_state.part.6+0x12>
	return 0;
   2be2a:	2500      	movs	r5, #0
   2be2c:	e7f7      	b.n	2be1e <dk_set_leds_state.part.6+0x52>
   2be2e:	bf00      	nop
   2be30:	00049788 	.word	0x00049788
   2be34:	00049808 	.word	0x00049808
   2be38:	0004db6c 	.word	0x0004db6c
   2be3c:	00049fe8 	.word	0x00049fe8
   2be40:	20024cc8 	.word	0x20024cc8

0002be44 <button_pressed>:
{
   2be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2be46:	f04f 0320 	mov.w	r3, #32
   2be4a:	f3ef 8511 	mrs	r5, BASEPRI
   2be4e:	f383 8811 	msr	BASEPRI, r3
   2be52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2be56:	4832      	ldr	r0, [pc, #200]	; (2bf20 <button_pressed+0xdc>)
   2be58:	f014 ff50 	bl	40cfc <z_spin_lock_valid>
   2be5c:	b968      	cbnz	r0, 2be7a <button_pressed+0x36>
   2be5e:	235c      	movs	r3, #92	; 0x5c
   2be60:	4a30      	ldr	r2, [pc, #192]	; (2bf24 <button_pressed+0xe0>)
   2be62:	4931      	ldr	r1, [pc, #196]	; (2bf28 <button_pressed+0xe4>)
   2be64:	4831      	ldr	r0, [pc, #196]	; (2bf2c <button_pressed+0xe8>)
   2be66:	f018 fa33 	bl	442d0 <printk>
   2be6a:	492d      	ldr	r1, [pc, #180]	; (2bf20 <button_pressed+0xdc>)
   2be6c:	4830      	ldr	r0, [pc, #192]	; (2bf30 <button_pressed+0xec>)
   2be6e:	f018 fa2f 	bl	442d0 <printk>
   2be72:	215c      	movs	r1, #92	; 0x5c
   2be74:	482b      	ldr	r0, [pc, #172]	; (2bf24 <button_pressed+0xe0>)
   2be76:	f018 fc45 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   2be7a:	4829      	ldr	r0, [pc, #164]	; (2bf20 <button_pressed+0xdc>)
   2be7c:	f014 ff5c 	bl	40d38 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2be80:	2400      	movs	r4, #0
   2be82:	4e2c      	ldr	r6, [pc, #176]	; (2bf34 <button_pressed+0xf0>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2be84:	4f2c      	ldr	r7, [pc, #176]	; (2bf38 <button_pressed+0xf4>)
   2be86:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2be8a:	f856 0b04 	ldr.w	r0, [r6], #4
   2be8e:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2be90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2be94:	3401      	adds	r4, #1
   2be96:	f7ff fea7 	bl	2bbe8 <z_impl_gpio_pin_interrupt_configure>
   2be9a:	2c04      	cmp	r4, #4
   2be9c:	d010      	beq.n	2bec0 <button_pressed+0x7c>
   2be9e:	2800      	cmp	r0, #0
   2bea0:	d0f1      	beq.n	2be86 <button_pressed+0x42>
		LOG_ERR("Cannot disable callbacks");
   2bea2:	2301      	movs	r3, #1
   2bea4:	f04f 0000 	mov.w	r0, #0
   2bea8:	4a24      	ldr	r2, [pc, #144]	; (2bf3c <button_pressed+0xf8>)
   2beaa:	f363 0007 	bfi	r0, r3, #0, #8
   2beae:	4b24      	ldr	r3, [pc, #144]	; (2bf40 <button_pressed+0xfc>)
   2beb0:	4924      	ldr	r1, [pc, #144]	; (2bf44 <button_pressed+0x100>)
   2beb2:	1a9b      	subs	r3, r3, r2
   2beb4:	08db      	lsrs	r3, r3, #3
   2beb6:	f363 108f 	bfi	r0, r3, #6, #10
   2beba:	f018 fc34 	bl	44726 <log_string_sync>
   2bebe:	e001      	b.n	2bec4 <button_pressed+0x80>
	if (err) {
   2bec0:	2800      	cmp	r0, #0
   2bec2:	d1ee      	bne.n	2bea2 <button_pressed+0x5e>
	switch (state) {
   2bec4:	4b20      	ldr	r3, [pc, #128]	; (2bf48 <button_pressed+0x104>)
   2bec6:	781a      	ldrb	r2, [r3, #0]
   2bec8:	b9f2      	cbnz	r2, 2bf08 <button_pressed+0xc4>
		state = STATE_SCANNING;
   2beca:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2becc:	491f      	ldr	r1, [pc, #124]	; (2bf4c <button_pressed+0x108>)
   2bece:	701a      	strb	r2, [r3, #0]
   2bed0:	481f      	ldr	r0, [pc, #124]	; (2bf50 <button_pressed+0x10c>)
   2bed2:	2221      	movs	r2, #33	; 0x21
   2bed4:	2300      	movs	r3, #0
   2bed6:	f014 ff5d 	bl	40d94 <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2beda:	4811      	ldr	r0, [pc, #68]	; (2bf20 <button_pressed+0xdc>)
   2bedc:	f014 ff1c 	bl	40d18 <z_spin_unlock_valid>
   2bee0:	b968      	cbnz	r0, 2befe <button_pressed+0xba>
   2bee2:	2384      	movs	r3, #132	; 0x84
   2bee4:	4a0f      	ldr	r2, [pc, #60]	; (2bf24 <button_pressed+0xe0>)
   2bee6:	491b      	ldr	r1, [pc, #108]	; (2bf54 <button_pressed+0x110>)
   2bee8:	4810      	ldr	r0, [pc, #64]	; (2bf2c <button_pressed+0xe8>)
   2beea:	f018 f9f1 	bl	442d0 <printk>
   2beee:	490c      	ldr	r1, [pc, #48]	; (2bf20 <button_pressed+0xdc>)
   2bef0:	4819      	ldr	r0, [pc, #100]	; (2bf58 <button_pressed+0x114>)
   2bef2:	f018 f9ed 	bl	442d0 <printk>
   2bef6:	2184      	movs	r1, #132	; 0x84
   2bef8:	480a      	ldr	r0, [pc, #40]	; (2bf24 <button_pressed+0xe0>)
   2befa:	f018 fc03 	bl	44704 <assert_post_action>
	__asm__ volatile(
   2befe:	f385 8811 	msr	BASEPRI, r5
   2bf02:	f3bf 8f6f 	isb	sy
}
   2bf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   2bf08:	23eb      	movs	r3, #235	; 0xeb
   2bf0a:	4a14      	ldr	r2, [pc, #80]	; (2bf5c <button_pressed+0x118>)
   2bf0c:	4914      	ldr	r1, [pc, #80]	; (2bf60 <button_pressed+0x11c>)
   2bf0e:	4807      	ldr	r0, [pc, #28]	; (2bf2c <button_pressed+0xe8>)
   2bf10:	f018 f9de 	bl	442d0 <printk>
   2bf14:	21eb      	movs	r1, #235	; 0xeb
   2bf16:	4811      	ldr	r0, [pc, #68]	; (2bf5c <button_pressed+0x118>)
   2bf18:	f018 fbf4 	bl	44704 <assert_post_action>
		break;
   2bf1c:	e7dd      	b.n	2beda <button_pressed+0x96>
   2bf1e:	bf00      	nop
   2bf20:	20024cd8 	.word	0x20024cd8
   2bf24:	0004be5f 	.word	0x0004be5f
   2bf28:	0004be85 	.word	0x0004be85
   2bf2c:	0004b33b 	.word	0x0004b33b
   2bf30:	0004be9a 	.word	0x0004be9a
   2bf34:	20024c84 	.word	0x20024c84
   2bf38:	00049fc8 	.word	0x00049fc8
   2bf3c:	00049788 	.word	0x00049788
   2bf40:	00049808 	.word	0x00049808
   2bf44:	0004da4d 	.word	0x0004da4d
   2bf48:	2002b5f5 	.word	0x2002b5f5
   2bf4c:	20021d20 	.word	0x20021d20
   2bf50:	20024888 	.word	0x20024888
   2bf54:	0004beb2 	.word	0x0004beb2
   2bf58:	0004bec9 	.word	0x0004bec9
   2bf5c:	0004da66 	.word	0x0004da66
   2bf60:	00052672 	.word	0x00052672

0002bf64 <buttons_scan_fn>:
{
   2bf64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   2bf68:	2400      	movs	r4, #0
   2bf6a:	4f7e      	ldr	r7, [pc, #504]	; (2c164 <buttons_scan_fn+0x200>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2bf6c:	4625      	mov	r5, r4
{
   2bf6e:	46b9      	mov	r9, r7
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2bf70:	f8df a214 	ldr.w	sl, [pc, #532]	; 2c188 <buttons_scan_fn+0x224>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2bf74:	f8df b254 	ldr.w	fp, [pc, #596]	; 2c1cc <buttons_scan_fn+0x268>
   2bf78:	2601      	movs	r6, #1
   2bf7a:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
   2bf7e:	791b      	ldrb	r3, [r3, #4]
   2bf80:	f859 8b04 	ldr.w	r8, [r9], #4
   2bf84:	409e      	lsls	r6, r3
   2bf86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2bf8a:	681b      	ldr	r3, [r3, #0]
   2bf8c:	421e      	tst	r6, r3
   2bf8e:	d10e      	bne.n	2bfae <buttons_scan_fn+0x4a>
   2bf90:	4975      	ldr	r1, [pc, #468]	; (2c168 <buttons_scan_fn+0x204>)
   2bf92:	f240 3379 	movw	r3, #889	; 0x379
   2bf96:	465a      	mov	r2, fp
   2bf98:	4874      	ldr	r0, [pc, #464]	; (2c16c <buttons_scan_fn+0x208>)
   2bf9a:	f018 f999 	bl	442d0 <printk>
   2bf9e:	4874      	ldr	r0, [pc, #464]	; (2c170 <buttons_scan_fn+0x20c>)
   2bfa0:	f018 f996 	bl	442d0 <printk>
   2bfa4:	f240 3179 	movw	r1, #889	; 0x379
   2bfa8:	4658      	mov	r0, fp
   2bfaa:	f018 fbab 	bl	44704 <assert_post_action>
	return api->port_get_raw(port, value);
   2bfae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2bfb2:	a901      	add	r1, sp, #4
   2bfb4:	685b      	ldr	r3, [r3, #4]
   2bfb6:	4640      	mov	r0, r8
   2bfb8:	4798      	blx	r3
	if (ret == 0) {
   2bfba:	2800      	cmp	r0, #0
   2bfbc:	d17b      	bne.n	2c0b6 <buttons_scan_fn+0x152>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2bfbe:	9b01      	ldr	r3, [sp, #4]
   2bfc0:	421e      	tst	r6, r3
   2bfc2:	d003      	beq.n	2bfcc <buttons_scan_fn+0x68>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2bfc4:	3501      	adds	r5, #1
   2bfc6:	2d04      	cmp	r5, #4
   2bfc8:	d1d6      	bne.n	2bf78 <buttons_scan_fn+0x14>
   2bfca:	e084      	b.n	2c0d6 <buttons_scan_fn+0x172>
			ret |= 1U << i;
   2bfcc:	2301      	movs	r3, #1
   2bfce:	40ab      	lsls	r3, r5
   2bfd0:	431c      	orrs	r4, r3
   2bfd2:	e7f7      	b.n	2bfc4 <buttons_scan_fn+0x60>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2bfd4:	3d04      	subs	r5, #4
   2bfd6:	2d00      	cmp	r5, #0
   2bfd8:	f000 80a2 	beq.w	2c120 <buttons_scan_fn+0x1bc>
			handler->cb(button_state, has_changed);
   2bfdc:	682b      	ldr	r3, [r5, #0]
   2bfde:	4631      	mov	r1, r6
   2bfe0:	4620      	mov	r0, r4
   2bfe2:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bfe4:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2bfe6:	e098      	b.n	2c11a <buttons_scan_fn+0x1b6>
		initial_run = false;
   2bfe8:	2200      	movs	r2, #0
   2bfea:	701a      	strb	r2, [r3, #0]
   2bfec:	e09b      	b.n	2c126 <buttons_scan_fn+0x1c2>
	__asm__ volatile(
   2bfee:	f04f 0320 	mov.w	r3, #32
   2bff2:	f3ef 8611 	mrs	r6, BASEPRI
   2bff6:	f383 8811 	msr	BASEPRI, r3
   2bffa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2bffe:	485d      	ldr	r0, [pc, #372]	; (2c174 <buttons_scan_fn+0x210>)
   2c000:	f014 fe7c 	bl	40cfc <z_spin_lock_valid>
   2c004:	b968      	cbnz	r0, 2c022 <buttons_scan_fn+0xbe>
   2c006:	235c      	movs	r3, #92	; 0x5c
   2c008:	4a5b      	ldr	r2, [pc, #364]	; (2c178 <buttons_scan_fn+0x214>)
   2c00a:	495c      	ldr	r1, [pc, #368]	; (2c17c <buttons_scan_fn+0x218>)
   2c00c:	4857      	ldr	r0, [pc, #348]	; (2c16c <buttons_scan_fn+0x208>)
   2c00e:	f018 f95f 	bl	442d0 <printk>
   2c012:	4958      	ldr	r1, [pc, #352]	; (2c174 <buttons_scan_fn+0x210>)
   2c014:	485a      	ldr	r0, [pc, #360]	; (2c180 <buttons_scan_fn+0x21c>)
   2c016:	f018 f95b 	bl	442d0 <printk>
   2c01a:	215c      	movs	r1, #92	; 0x5c
   2c01c:	4856      	ldr	r0, [pc, #344]	; (2c178 <buttons_scan_fn+0x214>)
   2c01e:	f018 fb71 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   2c022:	4854      	ldr	r0, [pc, #336]	; (2c174 <buttons_scan_fn+0x210>)
   2c024:	f014 fe88 	bl	40d38 <z_spin_lock_set_owner>
		switch (state) {
   2c028:	4b56      	ldr	r3, [pc, #344]	; (2c184 <buttons_scan_fn+0x220>)
   2c02a:	781a      	ldrb	r2, [r3, #0]
   2c02c:	2a01      	cmp	r2, #1
   2c02e:	d136      	bne.n	2c09e <buttons_scan_fn+0x13a>
			state = STATE_WAITING;
   2c030:	2200      	movs	r2, #0
   2c032:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   2c034:	4b54      	ldr	r3, [pc, #336]	; (2c188 <buttons_scan_fn+0x224>)
   2c036:	f857 0b04 	ldr.w	r0, [r7], #4
   2c03a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2c03e:	7919      	ldrb	r1, [r3, #4]
   2c040:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   2c044:	f7ff fdd0 	bl	2bbe8 <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2c048:	3401      	adds	r4, #1
   2c04a:	2c04      	cmp	r4, #4
   2c04c:	4605      	mov	r5, r0
   2c04e:	d001      	beq.n	2c054 <buttons_scan_fn+0xf0>
   2c050:	2800      	cmp	r0, #0
   2c052:	d0ef      	beq.n	2c034 <buttons_scan_fn+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2c054:	4847      	ldr	r0, [pc, #284]	; (2c174 <buttons_scan_fn+0x210>)
   2c056:	f014 fe5f 	bl	40d18 <z_spin_unlock_valid>
   2c05a:	b968      	cbnz	r0, 2c078 <buttons_scan_fn+0x114>
   2c05c:	2384      	movs	r3, #132	; 0x84
   2c05e:	4a46      	ldr	r2, [pc, #280]	; (2c178 <buttons_scan_fn+0x214>)
   2c060:	494a      	ldr	r1, [pc, #296]	; (2c18c <buttons_scan_fn+0x228>)
   2c062:	4842      	ldr	r0, [pc, #264]	; (2c16c <buttons_scan_fn+0x208>)
   2c064:	f018 f934 	bl	442d0 <printk>
   2c068:	4942      	ldr	r1, [pc, #264]	; (2c174 <buttons_scan_fn+0x210>)
   2c06a:	4849      	ldr	r0, [pc, #292]	; (2c190 <buttons_scan_fn+0x22c>)
   2c06c:	f018 f930 	bl	442d0 <printk>
   2c070:	2184      	movs	r1, #132	; 0x84
   2c072:	4841      	ldr	r0, [pc, #260]	; (2c178 <buttons_scan_fn+0x214>)
   2c074:	f018 fb46 	bl	44704 <assert_post_action>
	__asm__ volatile(
   2c078:	f386 8811 	msr	BASEPRI, r6
   2c07c:	f3bf 8f6f 	isb	sy
		if (err) {
   2c080:	2d00      	cmp	r5, #0
   2c082:	d06b      	beq.n	2c15c <buttons_scan_fn+0x1f8>
			LOG_ERR("Cannot enable callbacks");
   2c084:	2301      	movs	r3, #1
   2c086:	f04f 0000 	mov.w	r0, #0
   2c08a:	4a42      	ldr	r2, [pc, #264]	; (2c194 <buttons_scan_fn+0x230>)
   2c08c:	f363 0007 	bfi	r0, r3, #0, #8
   2c090:	4b41      	ldr	r3, [pc, #260]	; (2c198 <buttons_scan_fn+0x234>)
   2c092:	4942      	ldr	r1, [pc, #264]	; (2c19c <buttons_scan_fn+0x238>)
   2c094:	1a9b      	subs	r3, r3, r2
   2c096:	08db      	lsrs	r3, r3, #3
   2c098:	f363 108f 	bfi	r0, r3, #6, #10
   2c09c:	e05c      	b.n	2c158 <buttons_scan_fn+0x1f4>
			__ASSERT_NO_MSG(false);
   2c09e:	23b4      	movs	r3, #180	; 0xb4
   2c0a0:	4a3f      	ldr	r2, [pc, #252]	; (2c1a0 <buttons_scan_fn+0x23c>)
   2c0a2:	4940      	ldr	r1, [pc, #256]	; (2c1a4 <buttons_scan_fn+0x240>)
   2c0a4:	4831      	ldr	r0, [pc, #196]	; (2c16c <buttons_scan_fn+0x208>)
   2c0a6:	f018 f913 	bl	442d0 <printk>
   2c0aa:	21b4      	movs	r1, #180	; 0xb4
   2c0ac:	483c      	ldr	r0, [pc, #240]	; (2c1a0 <buttons_scan_fn+0x23c>)
   2c0ae:	f018 fb29 	bl	44704 <assert_post_action>
		int err = 0;
   2c0b2:	2500      	movs	r5, #0
			break;
   2c0b4:	e7ce      	b.n	2c054 <buttons_scan_fn+0xf0>
		if (val < 0) {
   2c0b6:	da85      	bge.n	2bfc4 <buttons_scan_fn+0x60>
			LOG_ERR("Cannot read gpio pin");
   2c0b8:	2301      	movs	r3, #1
   2c0ba:	f04f 0000 	mov.w	r0, #0
   2c0be:	4a35      	ldr	r2, [pc, #212]	; (2c194 <buttons_scan_fn+0x230>)
   2c0c0:	f363 0007 	bfi	r0, r3, #0, #8
   2c0c4:	4b34      	ldr	r3, [pc, #208]	; (2c198 <buttons_scan_fn+0x234>)
   2c0c6:	4938      	ldr	r1, [pc, #224]	; (2c1a8 <buttons_scan_fn+0x244>)
   2c0c8:	1a9b      	subs	r3, r3, r2
   2c0ca:	08db      	lsrs	r3, r3, #3
   2c0cc:	f363 108f 	bfi	r0, r3, #6, #10
   2c0d0:	f018 fb29 	bl	44726 <log_string_sync>
			return 0;
   2c0d4:	2400      	movs	r4, #0
   2c0d6:	4b35      	ldr	r3, [pc, #212]	; (2c1ac <buttons_scan_fn+0x248>)
   2c0d8:	e8d3 2fef 	ldaex	r2, [r3]
   2c0dc:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2c0e0:	2900      	cmp	r1, #0
   2c0e2:	d1f9      	bne.n	2c0d8 <buttons_scan_fn+0x174>
	if (!initial_run) {
   2c0e4:	4b32      	ldr	r3, [pc, #200]	; (2c1b0 <buttons_scan_fn+0x24c>)
   2c0e6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 2c1d0 <buttons_scan_fn+0x26c>
   2c0ea:	781a      	ldrb	r2, [r3, #0]
   2c0ec:	2a00      	cmp	r2, #0
   2c0ee:	f47f af7b 	bne.w	2bfe8 <buttons_scan_fn+0x84>
		if (button_scan != last_button_scan) {
   2c0f2:	f8d8 6000 	ldr.w	r6, [r8]
   2c0f6:	42a6      	cmp	r6, r4
   2c0f8:	d015      	beq.n	2c126 <buttons_scan_fn+0x1c2>
	if (button_handler_cb != NULL) {
   2c0fa:	4b2e      	ldr	r3, [pc, #184]	; (2c1b4 <buttons_scan_fn+0x250>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2c0fc:	4066      	eors	r6, r4
	if (button_handler_cb != NULL) {
   2c0fe:	681b      	ldr	r3, [r3, #0]
   2c100:	b113      	cbz	r3, 2c108 <buttons_scan_fn+0x1a4>
		button_handler_cb(button_state, has_changed);
   2c102:	4631      	mov	r1, r6
   2c104:	4620      	mov	r0, r4
   2c106:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2c108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c110:	4829      	ldr	r0, [pc, #164]	; (2c1b8 <buttons_scan_fn+0x254>)
   2c112:	f012 ff65 	bl	3efe0 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2c116:	4b29      	ldr	r3, [pc, #164]	; (2c1bc <buttons_scan_fn+0x258>)
   2c118:	681d      	ldr	r5, [r3, #0]
   2c11a:	2d00      	cmp	r5, #0
   2c11c:	f47f af5a 	bne.w	2bfd4 <buttons_scan_fn+0x70>
	return z_impl_k_mutex_unlock(mutex);
   2c120:	4825      	ldr	r0, [pc, #148]	; (2c1b8 <buttons_scan_fn+0x254>)
   2c122:	f013 f85b 	bl	3f1dc <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2c126:	f8c8 4000 	str.w	r4, [r8]
	if (button_scan != 0) {
   2c12a:	2c00      	cmp	r4, #0
   2c12c:	f43f af5f 	beq.w	2bfee <buttons_scan_fn+0x8a>
   2c130:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2c134:	2300      	movs	r3, #0
   2c136:	4922      	ldr	r1, [pc, #136]	; (2c1c0 <buttons_scan_fn+0x25c>)
   2c138:	4822      	ldr	r0, [pc, #136]	; (2c1c4 <buttons_scan_fn+0x260>)
   2c13a:	f014 fe2b 	bl	40d94 <k_delayed_work_submit_to_queue>
		if (err) {
   2c13e:	b168      	cbz	r0, 2c15c <buttons_scan_fn+0x1f8>
			LOG_ERR("Cannot add work to workqueue");
   2c140:	2301      	movs	r3, #1
   2c142:	f04f 0000 	mov.w	r0, #0
   2c146:	4a13      	ldr	r2, [pc, #76]	; (2c194 <buttons_scan_fn+0x230>)
   2c148:	f363 0007 	bfi	r0, r3, #0, #8
   2c14c:	4b12      	ldr	r3, [pc, #72]	; (2c198 <buttons_scan_fn+0x234>)
   2c14e:	491e      	ldr	r1, [pc, #120]	; (2c1c8 <buttons_scan_fn+0x264>)
   2c150:	1a9b      	subs	r3, r3, r2
   2c152:	08db      	lsrs	r3, r3, #3
   2c154:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Cannot enable callbacks");
   2c158:	f018 fae5 	bl	44726 <log_string_sync>
}
   2c15c:	b003      	add	sp, #12
   2c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c162:	bf00      	nop
   2c164:	20024c84 	.word	0x20024c84
   2c168:	0004d2ce 	.word	0x0004d2ce
   2c16c:	0004b33b 	.word	0x0004b33b
   2c170:	0004d30c 	.word	0x0004d30c
   2c174:	20024cd8 	.word	0x20024cd8
   2c178:	0004be5f 	.word	0x0004be5f
   2c17c:	0004be85 	.word	0x0004be85
   2c180:	0004be9a 	.word	0x0004be9a
   2c184:	2002b5f5 	.word	0x2002b5f5
   2c188:	00049fc8 	.word	0x00049fc8
   2c18c:	0004beb2 	.word	0x0004beb2
   2c190:	0004bec9 	.word	0x0004bec9
   2c194:	00049788 	.word	0x00049788
   2c198:	00049808 	.word	0x00049808
   2c19c:	0004dad6 	.word	0x0004dad6
   2c1a0:	0004da66 	.word	0x0004da66
   2c1a4:	00052672 	.word	0x00052672
   2c1a8:	0004daa4 	.word	0x0004daa4
   2c1ac:	20024cdc 	.word	0x20024cdc
   2c1b0:	20020ab5 	.word	0x20020ab5
   2c1b4:	20024c94 	.word	0x20024c94
   2c1b8:	20024c98 	.word	0x20024c98
   2c1bc:	20024cac 	.word	0x20024cac
   2c1c0:	20021d20 	.word	0x20021d20
   2c1c4:	20024888 	.word	0x20024888
   2c1c8:	0004dab9 	.word	0x0004dab9
   2c1cc:	0004d2a4 	.word	0x0004d2a4
   2c1d0:	20024cc0 	.word	0x20024cc0

0002c1d4 <dk_leds_init>:
{
   2c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c1d6:	2500      	movs	r5, #0
   2c1d8:	4c1c      	ldr	r4, [pc, #112]	; (2c24c <dk_leds_init+0x78>)
   2c1da:	4f1d      	ldr	r7, [pc, #116]	; (2c250 <dk_leds_init+0x7c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   2c1dc:	6820      	ldr	r0, [r4, #0]
   2c1de:	f012 faaf 	bl	3e740 <z_impl_device_get_binding>
   2c1e2:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2c1e6:	b988      	cbnz	r0, 2c20c <dk_leds_init+0x38>
			LOG_ERR("Cannot bind gpio device");
   2c1e8:	2301      	movs	r3, #1
   2c1ea:	f04f 0000 	mov.w	r0, #0
   2c1ee:	4a19      	ldr	r2, [pc, #100]	; (2c254 <dk_leds_init+0x80>)
   2c1f0:	f363 0007 	bfi	r0, r3, #0, #8
   2c1f4:	4b18      	ldr	r3, [pc, #96]	; (2c258 <dk_leds_init+0x84>)
   2c1f6:	4919      	ldr	r1, [pc, #100]	; (2c25c <dk_leds_init+0x88>)
   2c1f8:	1a9b      	subs	r3, r3, r2
   2c1fa:	08db      	lsrs	r3, r3, #3
   2c1fc:	f363 108f 	bfi	r0, r3, #6, #10
   2c200:	f018 fa91 	bl	44726 <log_string_sync>
			return -ENODEV;
   2c204:	f06f 0612 	mvn.w	r6, #18
}
   2c208:	4630      	mov	r0, r6
   2c20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2c20c:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c210:	7921      	ldrb	r1, [r4, #4]
   2c212:	f7ff fd7f 	bl	2bd14 <gpio_pin_configure>
		if (err) {
   2c216:	4606      	mov	r6, r0
   2c218:	b170      	cbz	r0, 2c238 <dk_leds_init+0x64>
			LOG_ERR("Cannot configure LED gpio");
   2c21a:	2301      	movs	r3, #1
   2c21c:	f04f 0000 	mov.w	r0, #0
   2c220:	4a0c      	ldr	r2, [pc, #48]	; (2c254 <dk_leds_init+0x80>)
   2c222:	f363 0007 	bfi	r0, r3, #0, #8
   2c226:	4b0c      	ldr	r3, [pc, #48]	; (2c258 <dk_leds_init+0x84>)
   2c228:	490d      	ldr	r1, [pc, #52]	; (2c260 <dk_leds_init+0x8c>)
   2c22a:	1a9b      	subs	r3, r3, r2
   2c22c:	08db      	lsrs	r3, r3, #3
   2c22e:	f363 108f 	bfi	r0, r3, #6, #10
   2c232:	f018 fa78 	bl	44726 <log_string_sync>
			return err;
   2c236:	e7e7      	b.n	2c208 <dk_leds_init+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2c238:	3501      	adds	r5, #1
   2c23a:	2d04      	cmp	r5, #4
   2c23c:	f104 0408 	add.w	r4, r4, #8
   2c240:	d1cc      	bne.n	2c1dc <dk_leds_init+0x8>
}
   2c242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2c246:	210f      	movs	r1, #15
   2c248:	f7ff bdc0 	b.w	2bdcc <dk_set_leds_state.part.6>
   2c24c:	00049fe8 	.word	0x00049fe8
   2c250:	20024cc8 	.word	0x20024cc8
   2c254:	00049788 	.word	0x00049788
   2c258:	00049808 	.word	0x00049808
   2c25c:	0004db3a 	.word	0x0004db3a
   2c260:	0004db52 	.word	0x0004db52

0002c264 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c264:	4b05      	ldr	r3, [pc, #20]	; (2c27c <dk_read_buttons+0x18>)
   2c266:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2c26a:	b100      	cbz	r0, 2c26e <dk_read_buttons+0xa>
		*button_state = current_state;
   2c26c:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   2c26e:	4804      	ldr	r0, [pc, #16]	; (2c280 <dk_read_buttons+0x1c>)
   2c270:	b111      	cbz	r1, 2c278 <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2c272:	6802      	ldr	r2, [r0, #0]
   2c274:	405a      	eors	r2, r3
   2c276:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2c278:	6003      	str	r3, [r0, #0]
}
   2c27a:	4770      	bx	lr
   2c27c:	20024cdc 	.word	0x20024cdc
   2c280:	20024cc4 	.word	0x20024cc4

0002c284 <dk_buttons_init>:
{
   2c284:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   2c288:	4b52      	ldr	r3, [pc, #328]	; (2c3d4 <dk_buttons_init+0x150>)
   2c28a:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2c28c:	4d52      	ldr	r5, [pc, #328]	; (2c3d8 <dk_buttons_init+0x154>)
   2c28e:	4f53      	ldr	r7, [pc, #332]	; (2c3dc <dk_buttons_init+0x158>)
   2c290:	4853      	ldr	r0, [pc, #332]	; (2c3e0 <dk_buttons_init+0x15c>)
   2c292:	f01b fdb1 	bl	47df8 <z_impl_k_mutex_init>
   2c296:	46b8      	mov	r8, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c298:	2600      	movs	r6, #0
   2c29a:	46a9      	mov	r9, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   2c29c:	6828      	ldr	r0, [r5, #0]
   2c29e:	f012 fa4f 	bl	3e740 <z_impl_device_get_binding>
   2c2a2:	f848 0b04 	str.w	r0, [r8], #4
		if (!button_devs[i]) {
   2c2a6:	b990      	cbnz	r0, 2c2ce <dk_buttons_init+0x4a>
			LOG_ERR("Cannot bind gpio device");
   2c2a8:	2301      	movs	r3, #1
   2c2aa:	f04f 0000 	mov.w	r0, #0
   2c2ae:	4a4d      	ldr	r2, [pc, #308]	; (2c3e4 <dk_buttons_init+0x160>)
   2c2b0:	f363 0007 	bfi	r0, r3, #0, #8
   2c2b4:	4b4c      	ldr	r3, [pc, #304]	; (2c3e8 <dk_buttons_init+0x164>)
   2c2b6:	494d      	ldr	r1, [pc, #308]	; (2c3ec <dk_buttons_init+0x168>)
   2c2b8:	1a9b      	subs	r3, r3, r2
   2c2ba:	08db      	lsrs	r3, r3, #3
   2c2bc:	f363 108f 	bfi	r0, r3, #6, #10
   2c2c0:	f018 fa31 	bl	44726 <log_string_sync>
			return -ENODEV;
   2c2c4:	f06f 0412 	mvn.w	r4, #18
}
   2c2c8:	4620      	mov	r0, r4
   2c2ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2c2ce:	f44f 7288 	mov.w	r2, #272	; 0x110
   2c2d2:	7929      	ldrb	r1, [r5, #4]
   2c2d4:	f7ff fd1e 	bl	2bd14 <gpio_pin_configure>
		if (err) {
   2c2d8:	4604      	mov	r4, r0
   2c2da:	b170      	cbz	r0, 2c2fa <dk_buttons_init+0x76>
			LOG_ERR("Cannot configure button gpio");
   2c2dc:	2301      	movs	r3, #1
   2c2de:	f04f 0000 	mov.w	r0, #0
   2c2e2:	4a40      	ldr	r2, [pc, #256]	; (2c3e4 <dk_buttons_init+0x160>)
   2c2e4:	f363 0007 	bfi	r0, r3, #0, #8
   2c2e8:	4b3f      	ldr	r3, [pc, #252]	; (2c3e8 <dk_buttons_init+0x164>)
   2c2ea:	4941      	ldr	r1, [pc, #260]	; (2c3f0 <dk_buttons_init+0x16c>)
   2c2ec:	1a9b      	subs	r3, r3, r2
   2c2ee:	08db      	lsrs	r3, r3, #3
   2c2f0:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot add work to workqueue");
   2c2f4:	f018 fa17 	bl	44726 <log_string_sync>
		return err;
   2c2f8:	e7e6      	b.n	2c2c8 <dk_buttons_init+0x44>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c2fa:	3601      	adds	r6, #1
   2c2fc:	2e04      	cmp	r6, #4
   2c2fe:	f105 0508 	add.w	r5, r5, #8
   2c302:	d1cb      	bne.n	2c29c <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c304:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   2c306:	4680      	mov	r8, r0
		pin_mask |= BIT(button_pins[i].number);
   2c308:	f04f 0b01 	mov.w	fp, #1
   2c30c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 2c3dc <dk_buttons_init+0x158>
		err = gpio_pin_interrupt_configure(button_devs[i],
   2c310:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
   2c314:	f85a 0b04 	ldr.w	r0, [sl], #4
   2c318:	791e      	ldrb	r6, [r3, #4]
   2c31a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2c31e:	4631      	mov	r1, r6
   2c320:	f7ff fc62 	bl	2bbe8 <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2c324:	4604      	mov	r4, r0
   2c326:	b160      	cbz	r0, 2c342 <dk_buttons_init+0xbe>
			LOG_ERR("Cannot disable callbacks()");
   2c328:	2301      	movs	r3, #1
   2c32a:	f04f 0000 	mov.w	r0, #0
   2c32e:	4a2d      	ldr	r2, [pc, #180]	; (2c3e4 <dk_buttons_init+0x160>)
   2c330:	f363 0007 	bfi	r0, r3, #0, #8
   2c334:	4b2c      	ldr	r3, [pc, #176]	; (2c3e8 <dk_buttons_init+0x164>)
   2c336:	492f      	ldr	r1, [pc, #188]	; (2c3f4 <dk_buttons_init+0x170>)
   2c338:	1a9b      	subs	r3, r3, r2
   2c33a:	08db      	lsrs	r3, r3, #3
   2c33c:	f363 108f 	bfi	r0, r3, #6, #10
   2c340:	e7d8      	b.n	2c2f4 <dk_buttons_init+0x70>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c342:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   2c344:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c348:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   2c34a:	ea48 0806 	orr.w	r8, r8, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c34e:	d1df      	bne.n	2c310 <dk_buttons_init+0x8c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c350:	4606      	mov	r6, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2c352:	4d29      	ldr	r5, [pc, #164]	; (2c3f8 <dk_buttons_init+0x174>)
   2c354:	4b29      	ldr	r3, [pc, #164]	; (2c3fc <dk_buttons_init+0x178>)
	callback->pin_mask = pin_mask;
   2c356:	e9c5 3801 	strd	r3, r8, [r5, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2c35a:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2c35e:	6883      	ldr	r3, [r0, #8]
   2c360:	69db      	ldr	r3, [r3, #28]
   2c362:	b18b      	cbz	r3, 2c388 <dk_buttons_init+0x104>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2c364:	2201      	movs	r2, #1
   2c366:	4629      	mov	r1, r5
   2c368:	4798      	blx	r3
		if (err) {
   2c36a:	4604      	mov	r4, r0
   2c36c:	b178      	cbz	r0, 2c38e <dk_buttons_init+0x10a>
			LOG_ERR("Cannot add callback");
   2c36e:	2301      	movs	r3, #1
   2c370:	f04f 0000 	mov.w	r0, #0
   2c374:	4a1b      	ldr	r2, [pc, #108]	; (2c3e4 <dk_buttons_init+0x160>)
   2c376:	f363 0007 	bfi	r0, r3, #0, #8
   2c37a:	4b1b      	ldr	r3, [pc, #108]	; (2c3e8 <dk_buttons_init+0x164>)
   2c37c:	4920      	ldr	r1, [pc, #128]	; (2c400 <dk_buttons_init+0x17c>)
   2c37e:	1a9b      	subs	r3, r3, r2
   2c380:	08db      	lsrs	r3, r3, #3
   2c382:	f363 108f 	bfi	r0, r3, #6, #10
   2c386:	e7b5      	b.n	2c2f4 <dk_buttons_init+0x70>
		return -ENOTSUP;
   2c388:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2c38c:	e7ef      	b.n	2c36e <dk_buttons_init+0xea>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2c38e:	3601      	adds	r6, #1
   2c390:	2e04      	cmp	r6, #4
   2c392:	d1e2      	bne.n	2c35a <dk_buttons_init+0xd6>
	k_delayed_work_init(&buttons_scan, buttons_scan_fn);
   2c394:	491b      	ldr	r1, [pc, #108]	; (2c404 <dk_buttons_init+0x180>)
   2c396:	481c      	ldr	r0, [pc, #112]	; (2c408 <dk_buttons_init+0x184>)
   2c398:	f01b fe15 	bl	47fc6 <k_delayed_work_init>
	state = STATE_SCANNING;
   2c39c:	2201      	movs	r2, #1
   2c39e:	4b1b      	ldr	r3, [pc, #108]	; (2c40c <dk_buttons_init+0x188>)
   2c3a0:	4919      	ldr	r1, [pc, #100]	; (2c408 <dk_buttons_init+0x184>)
   2c3a2:	701a      	strb	r2, [r3, #0]
   2c3a4:	481a      	ldr	r0, [pc, #104]	; (2c410 <dk_buttons_init+0x18c>)
   2c3a6:	2200      	movs	r2, #0
   2c3a8:	2300      	movs	r3, #0
   2c3aa:	f014 fcf3 	bl	40d94 <k_delayed_work_submit_to_queue>
	if (err) {
   2c3ae:	4604      	mov	r4, r0
   2c3b0:	b160      	cbz	r0, 2c3cc <dk_buttons_init+0x148>
		LOG_ERR("Cannot add work to workqueue");
   2c3b2:	2301      	movs	r3, #1
   2c3b4:	f04f 0000 	mov.w	r0, #0
   2c3b8:	4a0a      	ldr	r2, [pc, #40]	; (2c3e4 <dk_buttons_init+0x160>)
   2c3ba:	f363 0007 	bfi	r0, r3, #0, #8
   2c3be:	4b0a      	ldr	r3, [pc, #40]	; (2c3e8 <dk_buttons_init+0x164>)
   2c3c0:	4914      	ldr	r1, [pc, #80]	; (2c414 <dk_buttons_init+0x190>)
   2c3c2:	1a9b      	subs	r3, r3, r2
   2c3c4:	08db      	lsrs	r3, r3, #3
   2c3c6:	f363 108f 	bfi	r0, r3, #6, #10
   2c3ca:	e793      	b.n	2c2f4 <dk_buttons_init+0x70>
	dk_read_buttons(NULL, NULL);
   2c3cc:	4601      	mov	r1, r0
   2c3ce:	f7ff ff49 	bl	2c264 <dk_read_buttons>
	return 0;
   2c3d2:	e779      	b.n	2c2c8 <dk_buttons_init+0x44>
   2c3d4:	20024c94 	.word	0x20024c94
   2c3d8:	00049fc8 	.word	0x00049fc8
   2c3dc:	20024c84 	.word	0x20024c84
   2c3e0:	20024c98 	.word	0x20024c98
   2c3e4:	00049788 	.word	0x00049788
   2c3e8:	00049808 	.word	0x00049808
   2c3ec:	0004db3a 	.word	0x0004db3a
   2c3f0:	0004daee 	.word	0x0004daee
   2c3f4:	0004db0b 	.word	0x0004db0b
   2c3f8:	20024cb4 	.word	0x20024cb4
   2c3fc:	0002be45 	.word	0x0002be45
   2c400:	0004db26 	.word	0x0004db26
   2c404:	0002bf65 	.word	0x0002bf65
   2c408:	20021d20 	.word	0x20021d20
   2c40c:	2002b5f5 	.word	0x2002b5f5
   2c410:	20024888 	.word	0x20024888
   2c414:	0004dab9 	.word	0x0004dab9

0002c418 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   2c418:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   2c41a:	f240 2201 	movw	r2, #513	; 0x201
   2c41e:	2102      	movs	r1, #2
   2c420:	2066      	movs	r0, #102	; 0x66
   2c422:	f7f9 f81b 	bl	2545c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2c426:	4b05      	ldr	r3, [pc, #20]	; (2c43c <open_socket+0x24>)
   2c428:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   2c42a:	3001      	adds	r0, #1
   2c42c:	d104      	bne.n	2c438 <open_socket+0x20>
		return -errno;
   2c42e:	f019 fad9 	bl	459e4 <__errno>
   2c432:	6800      	ldr	r0, [r0, #0]
   2c434:	4240      	negs	r0, r0
	}

	return 0;
}
   2c436:	bd08      	pop	{r3, pc}
	return 0;
   2c438:	2000      	movs	r0, #0
   2c43a:	e7fc      	b.n	2c436 <open_socket+0x1e>
   2c43c:	20024ce4 	.word	0x20024ce4

0002c440 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   2c440:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   2c442:	4d1a      	ldr	r5, [pc, #104]	; (2c4ac <at_cmd_driver_init+0x6c>)
{
   2c444:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   2c446:	782b      	ldrb	r3, [r5, #0]
   2c448:	bb73      	cbnz	r3, 2c4a8 <at_cmd_driver_init+0x68>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2c44a:	f7ff ffe5 	bl	2c418 <open_socket>
	if (err) {
   2c44e:	4604      	mov	r4, r0
   2c450:	b188      	cbz	r0, 2c476 <at_cmd_driver_init+0x36>
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2c452:	2301      	movs	r3, #1
   2c454:	f04f 0000 	mov.w	r0, #0
   2c458:	4a15      	ldr	r2, [pc, #84]	; (2c4b0 <at_cmd_driver_init+0x70>)
   2c45a:	f363 0007 	bfi	r0, r3, #0, #8
   2c45e:	4b15      	ldr	r3, [pc, #84]	; (2c4b4 <at_cmd_driver_init+0x74>)
   2c460:	4915      	ldr	r1, [pc, #84]	; (2c4b8 <at_cmd_driver_init+0x78>)
   2c462:	1a9b      	subs	r3, r3, r2
   2c464:	08db      	lsrs	r3, r3, #3
   2c466:	f363 108f 	bfi	r0, r3, #6, #10
   2c46a:	4622      	mov	r2, r4
   2c46c:	f018 f95b 	bl	44726 <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2c470:	4620      	mov	r0, r4
   2c472:	b009      	add	sp, #36	; 0x24
   2c474:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c476:	2200      	movs	r2, #0
   2c478:	2300      	movs	r3, #0
   2c47a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2c47e:	230a      	movs	r3, #10
   2c480:	9004      	str	r0, [sp, #16]
   2c482:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2c486:	e9cd 0000 	strd	r0, r0, [sp]
   2c48a:	4b0c      	ldr	r3, [pc, #48]	; (2c4bc <at_cmd_driver_init+0x7c>)
   2c48c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2c490:	490b      	ldr	r1, [pc, #44]	; (2c4c0 <at_cmd_driver_init+0x80>)
   2c492:	480c      	ldr	r0, [pc, #48]	; (2c4c4 <at_cmd_driver_init+0x84>)
   2c494:	f014 fb54 	bl	40b40 <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   2c498:	4b0b      	ldr	r3, [pc, #44]	; (2c4c8 <at_cmd_driver_init+0x88>)
   2c49a:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   2c49c:	490b      	ldr	r1, [pc, #44]	; (2c4cc <at_cmd_driver_init+0x8c>)
   2c49e:	f01b fd31 	bl	47f04 <z_impl_k_thread_name_set>
	initialized = true;
   2c4a2:	2301      	movs	r3, #1
   2c4a4:	702b      	strb	r3, [r5, #0]
	return 0;
   2c4a6:	e7e3      	b.n	2c470 <at_cmd_driver_init+0x30>
		return 0;
   2c4a8:	2400      	movs	r4, #0
   2c4aa:	e7e1      	b.n	2c470 <at_cmd_driver_init+0x30>
   2c4ac:	2002c082 	.word	0x2002c082
   2c4b0:	00049788 	.word	0x00049788
   2c4b4:	000497a0 	.word	0x000497a0
   2c4b8:	0004ddbc 	.word	0x0004ddbc
   2c4bc:	0002c60d 	.word	0x0002c60d
   2c4c0:	2002e740 	.word	0x2002e740
   2c4c4:	20021d50 	.word	0x20021d50
   2c4c8:	20024d0c 	.word	0x20024d0c
   2c4cc:	0004ddde 	.word	0x0004ddde

0002c4d0 <complete_cmd>:
{
   2c4d0:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2c4d2:	4c08      	ldr	r4, [pc, #32]	; (2c4f4 <complete_cmd+0x24>)
   2c4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c4dc:	4620      	mov	r0, r4
   2c4de:	f012 fd7f 	bl	3efe0 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2c4e2:	2200      	movs	r2, #0
   2c4e4:	4b04      	ldr	r3, [pc, #16]	; (2c4f8 <complete_cmd+0x28>)
   2c4e6:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2c4e8:	4620      	mov	r0, r4
}
   2c4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c4ee:	f012 be75 	b.w	3f1dc <z_impl_k_mutex_unlock>
   2c4f2:	bf00      	nop
   2c4f4:	20020c30 	.word	0x20020c30
   2c4f8:	20024ce8 	.word	0x20024ce8

0002c4fc <load_cmd_and_write>:
{
   2c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c500:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   2c502:	4e39      	ldr	r6, [pc, #228]	; (2c5e8 <load_cmd_and_write+0xec>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2c504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c508:	46b1      	mov	r9, r6
   2c50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c50e:	4837      	ldr	r0, [pc, #220]	; (2c5ec <load_cmd_and_write+0xf0>)
   2c510:	f012 fd66 	bl	3efe0 <z_impl_k_mutex_lock>
   2c514:	4d36      	ldr	r5, [pc, #216]	; (2c5f0 <load_cmd_and_write+0xf4>)
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2c516:	4b37      	ldr	r3, [pc, #220]	; (2c5f4 <load_cmd_and_write+0xf8>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2c518:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 2c608 <load_cmd_and_write+0x10c>
   2c51c:	1aed      	subs	r5, r5, r3
   2c51e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
		if (current_cmd.cmd != NULL ||
   2c522:	6833      	ldr	r3, [r6, #0]
   2c524:	2b00      	cmp	r3, #0
   2c526:	d159      	bne.n	2c5dc <load_cmd_and_write+0xe0>
   2c528:	2200      	movs	r2, #0
   2c52a:	2300      	movs	r3, #0
   2c52c:	4631      	mov	r1, r6
   2c52e:	4658      	mov	r0, fp
   2c530:	f012 fca8 	bl	3ee84 <z_impl_k_msgq_get>
   2c534:	4604      	mov	r4, r0
   2c536:	2800      	cmp	r0, #0
   2c538:	d150      	bne.n	2c5dc <load_cmd_and_write+0xe0>
		ret = at_write(current_cmd.cmd);
   2c53a:	6831      	ldr	r1, [r6, #0]
	int bytes_to_send = strlen(cmd);
   2c53c:	4608      	mov	r0, r1
   2c53e:	9103      	str	r1, [sp, #12]
   2c540:	f7f0 fe90 	bl	1d264 <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2c544:	4b2c      	ldr	r3, [pc, #176]	; (2c5f8 <load_cmd_and_write+0xfc>)
	int bytes_to_send = strlen(cmd);
   2c546:	4682      	mov	sl, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2c548:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2c54a:	4652      	mov	r2, sl
   2c54c:	9903      	ldr	r1, [sp, #12]
   2c54e:	e9cd 4400 	strd	r4, r4, [sp]
   2c552:	4623      	mov	r3, r4
   2c554:	f018 fccf 	bl	44ef6 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   2c558:	1c41      	adds	r1, r0, #1
   2c55a:	4602      	mov	r2, r0
   2c55c:	d12e      	bne.n	2c5bc <load_cmd_and_write+0xc0>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2c55e:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2c562:	f043 0301 	orr.w	r3, r3, #1
   2c566:	f363 0707 	bfi	r7, r3, #0, #8
   2c56a:	f019 fa3b 	bl	459e4 <__errno>
   2c56e:	f365 178f 	bfi	r7, r5, #6, #10
   2c572:	6802      	ldr	r2, [r0, #0]
   2c574:	4921      	ldr	r1, [pc, #132]	; (2c5fc <load_cmd_and_write+0x100>)
   2c576:	4638      	mov	r0, r7
   2c578:	f018 f8d5 	bl	44726 <log_string_sync>
		return -errno;
   2c57c:	f019 fa32 	bl	459e4 <__errno>
   2c580:	6804      	ldr	r4, [r0, #0]
   2c582:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2c584:	f899 3010 	ldrb.w	r3, [r9, #16]
   2c588:	07da      	lsls	r2, r3, #31
   2c58a:	d503      	bpl.n	2c594 <load_cmd_and_write+0x98>
			k_free(current_cmd.cmd);
   2c58c:	f8d9 0000 	ldr.w	r0, [r9]
   2c590:	f01b fdbf 	bl	48112 <k_free>
		if (ret != 0) {
   2c594:	b314      	cbz	r4, 2c5dc <load_cmd_and_write+0xe0>
			resp.state = AT_CMD_ERROR_WRITE;
   2c596:	2305      	movs	r3, #5
   2c598:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2c59c:	f899 3010 	ldrb.w	r3, [r9, #16]
			resp.code = ret;
   2c5a0:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2c5a2:	079b      	lsls	r3, r3, #30
   2c5a4:	d507      	bpl.n	2c5b6 <load_cmd_and_write+0xba>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2c5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c5aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c5ae:	a904      	add	r1, sp, #16
   2c5b0:	4813      	ldr	r0, [pc, #76]	; (2c600 <load_cmd_and_write+0x104>)
   2c5b2:	f012 fbc5 	bl	3ed40 <z_impl_k_msgq_put>
			complete_cmd();
   2c5b6:	f7ff ff8b 	bl	2c4d0 <complete_cmd>
   2c5ba:	e7b2      	b.n	2c522 <load_cmd_and_write+0x26>
	if (bytes_sent != bytes_to_send) {
   2c5bc:	4582      	cmp	sl, r0
   2c5be:	d0e1      	beq.n	2c584 <load_cmd_and_write+0x88>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2c5c0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2c5c4:	f043 0302 	orr.w	r3, r3, #2
   2c5c8:	f363 0807 	bfi	r8, r3, #0, #8
   2c5cc:	f365 188f 	bfi	r8, r5, #6, #10
   2c5d0:	4653      	mov	r3, sl
   2c5d2:	490c      	ldr	r1, [pc, #48]	; (2c604 <load_cmd_and_write+0x108>)
   2c5d4:	4640      	mov	r0, r8
   2c5d6:	f018 f8a6 	bl	44726 <log_string_sync>
   2c5da:	e7d3      	b.n	2c584 <load_cmd_and_write+0x88>
	return z_impl_k_mutex_unlock(mutex);
   2c5dc:	4803      	ldr	r0, [pc, #12]	; (2c5ec <load_cmd_and_write+0xf0>)
   2c5de:	f012 fdfd 	bl	3f1dc <z_impl_k_mutex_unlock>
}
   2c5e2:	b007      	add	sp, #28
   2c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5e8:	20024ce8 	.word	0x20024ce8
   2c5ec:	20020c30 	.word	0x20020c30
   2c5f0:	000497a0 	.word	0x000497a0
   2c5f4:	00049788 	.word	0x00049788
   2c5f8:	20024ce4 	.word	0x20024ce4
   2c5fc:	0004deca 	.word	0x0004deca
   2c600:	20020ce8 	.word	0x20020ce8
   2c604:	0004deed 	.word	0x0004deed
   2c608:	20020cbc 	.word	0x20020cbc

0002c60c <socket_thread_fn>:
{
   2c60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c610:	4ba4      	ldr	r3, [pc, #656]	; (2c8a4 <socket_thread_fn+0x298>)
				LOG_ERR("Response buffer not large enough");
   2c612:	4aa5      	ldr	r2, [pc, #660]	; (2c8a8 <socket_thread_fn+0x29c>)
{
   2c614:	b087      	sub	sp, #28
				LOG_ERR("Response buffer not large enough");
   2c616:	1a9b      	subs	r3, r3, r2
   2c618:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2c61c:	4ea3      	ldr	r6, [pc, #652]	; (2c8ac <socket_thread_fn+0x2a0>)
   2c61e:	9303      	str	r3, [sp, #12]
		load_cmd_and_write();
   2c620:	f7ff ff6c 	bl	2c4fc <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2c624:	4ba2      	ldr	r3, [pc, #648]	; (2c8b0 <socket_thread_fn+0x2a4>)
   2c626:	6818      	ldr	r0, [r3, #0]
   2c628:	2500      	movs	r5, #0
   2c62a:	f640 228c 	movw	r2, #2700	; 0xa8c
   2c62e:	e9cd 5500 	strd	r5, r5, [sp]
   2c632:	462b      	mov	r3, r5
   2c634:	499d      	ldr	r1, [pc, #628]	; (2c8ac <socket_thread_fn+0x2a0>)
   2c636:	f018 fc91 	bl	44f5c <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2c63a:	4c9e      	ldr	r4, [pc, #632]	; (2c8b4 <socket_thread_fn+0x2a8>)
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2c63c:	4a9e      	ldr	r2, [pc, #632]	; (2c8b8 <socket_thread_fn+0x2ac>)
		if (bytes_read < 0) {
   2c63e:	42a8      	cmp	r0, r5
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2c640:	6010      	str	r0, [r2, #0]
		ret.code  = 0;
   2c642:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2c644:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2c646:	f280 8091 	bge.w	2c76c <socket_thread_fn+0x160>
			if (errno == EHOSTDOWN) {
   2c64a:	f019 f9cb 	bl	459e4 <__errno>
   2c64e:	6803      	ldr	r3, [r0, #0]
   2c650:	4a99      	ldr	r2, [pc, #612]	; (2c8b8 <socket_thread_fn+0x2ac>)
   2c652:	2b75      	cmp	r3, #117	; 0x75
   2c654:	d130      	bne.n	2c6b8 <socket_thread_fn+0xac>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c656:	2301      	movs	r3, #1
   2c658:	4c98      	ldr	r4, [pc, #608]	; (2c8bc <socket_thread_fn+0x2b0>)
   2c65a:	e8d4 2fef 	ldaex	r2, [r4]
   2c65e:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2c662:	2900      	cmp	r1, #0
   2c664:	d1f9      	bne.n	2c65a <socket_thread_fn+0x4e>
				close(common_socket_fd);
   2c666:	4b92      	ldr	r3, [pc, #584]	; (2c8b0 <socket_thread_fn+0x2a4>)
   2c668:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   2c66a:	f018 fc17 	bl	44e9c <z_impl_zsock_close>
				bsdlib_shutdown_wait();
   2c66e:	f7fe fe17 	bl	2b2a0 <bsdlib_shutdown_wait>
   2c672:	e8d4 3fef 	ldaex	r3, [r4]
   2c676:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2c67a:	2a00      	cmp	r2, #0
   2c67c:	d1f9      	bne.n	2c672 <socket_thread_fn+0x66>
				if (open_socket() != 0) {
   2c67e:	f7ff fecb 	bl	2c418 <open_socket>
   2c682:	2800      	cmp	r0, #0
   2c684:	d0cc      	beq.n	2c620 <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   2c686:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   2c68a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   2c68e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2c692:	f043 0301 	orr.w	r3, r3, #1
   2c696:	f363 0207 	bfi	r2, r3, #0, #8
   2c69a:	b293      	uxth	r3, r2
   2c69c:	9a03      	ldr	r2, [sp, #12]
   2c69e:	f362 138f 	bfi	r3, r2, #6, #10
   2c6a2:	f8ad 3010 	strh.w	r3, [sp, #16]
   2c6a6:	f019 f99d 	bl	459e4 <__errno>
   2c6aa:	4985      	ldr	r1, [pc, #532]	; (2c8c0 <socket_thread_fn+0x2b4>)
   2c6ac:	6802      	ldr	r2, [r0, #0]
   2c6ae:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   2c6b2:	f018 f838 	bl	44726 <log_string_sync>
   2c6b6:	e7b3      	b.n	2c620 <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   2c6b8:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2c6bc:	f043 0301 	orr.w	r3, r3, #1
   2c6c0:	f363 0707 	bfi	r7, r3, #0, #8
   2c6c4:	9b03      	ldr	r3, [sp, #12]
   2c6c6:	6812      	ldr	r2, [r2, #0]
   2c6c8:	f363 178f 	bfi	r7, r3, #6, #10
   2c6cc:	4638      	mov	r0, r7
   2c6ce:	497d      	ldr	r1, [pc, #500]	; (2c8c4 <socket_thread_fn+0x2b8>)
   2c6d0:	f018 f829 	bl	44726 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2c6d4:	4b76      	ldr	r3, [pc, #472]	; (2c8b0 <socket_thread_fn+0x2a4>)
   2c6d6:	6818      	ldr	r0, [r3, #0]
   2c6d8:	f018 fbe0 	bl	44e9c <z_impl_zsock_close>
   2c6dc:	bb80      	cbnz	r0, 2c740 <socket_thread_fn+0x134>
			    (open_socket() == 0)) {
   2c6de:	f7ff fe9b 	bl	2c418 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2c6e2:	bb68      	cbnz	r0, 2c740 <socket_thread_fn+0x134>
				LOG_INF("AT socket recovered");
   2c6e4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2c6e8:	f043 0303 	orr.w	r3, r3, #3
   2c6ec:	f363 0807 	bfi	r8, r3, #0, #8
   2c6f0:	9b03      	ldr	r3, [sp, #12]
   2c6f2:	4975      	ldr	r1, [pc, #468]	; (2c8c8 <socket_thread_fn+0x2bc>)
   2c6f4:	f363 188f 	bfi	r8, r3, #6, #10
   2c6f8:	4640      	mov	r0, r8
   2c6fa:	f018 f814 	bl	44726 <log_string_sync>
				ret.state = AT_CMD_ERROR_READ;
   2c6fe:	2306      	movs	r3, #6
   2c700:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2c702:	f019 f96f 	bl	459e4 <__errno>
   2c706:	6803      	ldr	r3, [r0, #0]
   2c708:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2c70a:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2c70c:	4b6f      	ldr	r3, [pc, #444]	; (2c8cc <socket_thread_fn+0x2c0>)
   2c70e:	4c69      	ldr	r4, [pc, #420]	; (2c8b4 <socket_thread_fn+0x2a8>)
   2c710:	681a      	ldr	r2, [r3, #0]
   2c712:	b172      	cbz	r2, 2c732 <socket_thread_fn+0x126>
   2c714:	7c1b      	ldrb	r3, [r3, #16]
   2c716:	079b      	lsls	r3, r3, #30
   2c718:	d50b      	bpl.n	2c732 <socket_thread_fn+0x126>
		    current_cmd.flags & AT_CMD_SYNC &&
   2c71a:	7923      	ldrb	r3, [r4, #4]
   2c71c:	2b07      	cmp	r3, #7
   2c71e:	f43f af7f 	beq.w	2c620 <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2c722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c72a:	4621      	mov	r1, r4
   2c72c:	4868      	ldr	r0, [pc, #416]	; (2c8d0 <socket_thread_fn+0x2c4>)
   2c72e:	f012 fb07 	bl	3ed40 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2c732:	7923      	ldrb	r3, [r4, #4]
   2c734:	2b07      	cmp	r3, #7
   2c736:	f43f af73 	beq.w	2c620 <socket_thread_fn+0x14>
			complete_cmd();
   2c73a:	f7ff fec9 	bl	2c4d0 <complete_cmd>
   2c73e:	e76f      	b.n	2c620 <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2c740:	2301      	movs	r3, #1
   2c742:	f04f 0400 	mov.w	r4, #0
   2c746:	f363 0407 	bfi	r4, r3, #0, #8
   2c74a:	9b03      	ldr	r3, [sp, #12]
   2c74c:	f363 148f 	bfi	r4, r3, #6, #10
   2c750:	f019 f948 	bl	459e4 <__errno>
   2c754:	495f      	ldr	r1, [pc, #380]	; (2c8d4 <socket_thread_fn+0x2c8>)
   2c756:	6802      	ldr	r2, [r0, #0]
   2c758:	4620      	mov	r0, r4
   2c75a:	f017 ffe4 	bl	44726 <log_string_sync>
			close(common_socket_fd);
   2c75e:	4b54      	ldr	r3, [pc, #336]	; (2c8b0 <socket_thread_fn+0x2a4>)
   2c760:	6818      	ldr	r0, [r3, #0]
}
   2c762:	b007      	add	sp, #28
   2c764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c768:	f018 bb98 	b.w	44e9c <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2c76c:	d111      	bne.n	2c792 <socket_thread_fn+0x186>
			LOG_ERR("AT message empty");
   2c76e:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2c772:	f043 0301 	orr.w	r3, r3, #1
   2c776:	f363 0907 	bfi	r9, r3, #0, #8
   2c77a:	9b03      	ldr	r3, [sp, #12]
   2c77c:	4956      	ldr	r1, [pc, #344]	; (2c8d8 <socket_thread_fn+0x2cc>)
   2c77e:	f363 198f 	bfi	r9, r3, #6, #10
   2c782:	4648      	mov	r0, r9
   2c784:	f017 ffcf 	bl	44726 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2c788:	2306      	movs	r3, #6
   2c78a:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2c78c:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2c790:	e7bb      	b.n	2c70a <socket_thread_fn+0xfe>
		} else if (buf[bytes_read - 1] != '\0') {
   2c792:	1832      	adds	r2, r6, r0
   2c794:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   2c798:	b18a      	cbz	r2, 2c7be <socket_thread_fn+0x1b2>
			LOG_ERR("AT message too large for reception buffer or "
   2c79a:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2c79e:	f043 0301 	orr.w	r3, r3, #1
   2c7a2:	f363 0a07 	bfi	sl, r3, #0, #8
   2c7a6:	9b03      	ldr	r3, [sp, #12]
   2c7a8:	494c      	ldr	r1, [pc, #304]	; (2c8dc <socket_thread_fn+0x2d0>)
   2c7aa:	f363 1a8f 	bfi	sl, r3, #6, #10
   2c7ae:	4650      	mov	r0, sl
   2c7b0:	f017 ffb9 	bl	44726 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2c7b4:	2306      	movs	r3, #6
   2c7b6:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2c7b8:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2c7bc:	e7a5      	b.n	2c70a <socket_thread_fn+0xfe>
	ret->state = AT_CMD_NOTIFICATION;
   2c7be:	2207      	movs	r2, #7
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2c7c0:	1f45      	subs	r5, r0, #5
   2c7c2:	9005      	str	r0, [sp, #20]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2c7c4:	4846      	ldr	r0, [pc, #280]	; (2c8e0 <socket_thread_fn+0x2d4>)
	ret->state = AT_CMD_NOTIFICATION;
   2c7c6:	7122      	strb	r2, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2c7c8:	f7f0 fd4c 	bl	1d264 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2c7cc:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2c7ce:	4602      	mov	r2, r0
   2c7d0:	4943      	ldr	r1, [pc, #268]	; (2c8e0 <socket_thread_fn+0x2d4>)
   2c7d2:	4628      	mov	r0, r5
   2c7d4:	f01b fed1 	bl	4857a <strncmp>
		if (match) {
   2c7d8:	9b05      	ldr	r3, [sp, #20]
   2c7da:	b9c8      	cbnz	r0, 2c810 <socket_thread_fn+0x204>
			ret->state = AT_CMD_OK;
   2c7dc:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2c7de:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2c7e0:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2c7e2:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   2c7e4:	3201      	adds	r2, #1
   2c7e6:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   2c7e8:	4c38      	ldr	r4, [pc, #224]	; (2c8cc <socket_thread_fn+0x2c0>)
   2c7ea:	4d32      	ldr	r5, [pc, #200]	; (2c8b4 <socket_thread_fn+0x2a8>)
   2c7ec:	6823      	ldr	r3, [r4, #0]
   2c7ee:	2b00      	cmp	r3, #0
   2c7f0:	d04f      	beq.n	2c892 <socket_thread_fn+0x286>
		    current_cmd.resp != NULL &&
   2c7f2:	6860      	ldr	r0, [r4, #4]
		if (current_cmd.cmd != NULL &&
   2c7f4:	2800      	cmp	r0, #0
   2c7f6:	d04c      	beq.n	2c892 <socket_thread_fn+0x286>
		    current_cmd.resp != NULL &&
   2c7f8:	792b      	ldrb	r3, [r5, #4]
   2c7fa:	2b07      	cmp	r3, #7
   2c7fc:	d132      	bne.n	2c864 <socket_thread_fn+0x258>
		    notification_handler != NULL) {
   2c7fe:	4b39      	ldr	r3, [pc, #228]	; (2c8e4 <socket_thread_fn+0x2d8>)
   2c800:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2c802:	b913      	cbnz	r3, 2c80a <socket_thread_fn+0x1fe>
		} else if (current_cmd.callback != NULL) {
   2c804:	68a3      	ldr	r3, [r4, #8]
   2c806:	2b00      	cmp	r3, #0
   2c808:	d080      	beq.n	2c70c <socket_thread_fn+0x100>
			current_cmd.callback(buf);
   2c80a:	4630      	mov	r0, r6
   2c80c:	4798      	blx	r3
   2c80e:	e77d      	b.n	2c70c <socket_thread_fn+0x100>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2c810:	4935      	ldr	r1, [pc, #212]	; (2c8e8 <socket_thread_fn+0x2dc>)
   2c812:	4630      	mov	r0, r6
   2c814:	9305      	str	r3, [sp, #20]
   2c816:	f01b fee1 	bl	485dc <strstr>
		if (tmpstr) {
   2c81a:	9b05      	ldr	r3, [sp, #20]
   2c81c:	4605      	mov	r5, r0
   2c81e:	b128      	cbz	r0, 2c82c <socket_thread_fn+0x220>
			ret->state = AT_CMD_ERROR_CMS;
   2c820:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2c822:	4832      	ldr	r0, [pc, #200]	; (2c8ec <socket_thread_fn+0x2e0>)
			ret->state = AT_CMD_ERROR_CMS;
   2c824:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2c826:	f01b fc8f 	bl	48148 <atoi>
   2c82a:	e7d8      	b.n	2c7de <socket_thread_fn+0x1d2>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2c82c:	4930      	ldr	r1, [pc, #192]	; (2c8f0 <socket_thread_fn+0x2e4>)
   2c82e:	4630      	mov	r0, r6
   2c830:	9305      	str	r3, [sp, #20]
   2c832:	f01b fed3 	bl	485dc <strstr>
		if (tmpstr) {
   2c836:	9b05      	ldr	r3, [sp, #20]
   2c838:	4605      	mov	r5, r0
   2c83a:	b108      	cbz	r0, 2c840 <socket_thread_fn+0x234>
			ret->state = AT_CMD_ERROR_CME;
   2c83c:	2303      	movs	r3, #3
   2c83e:	e7f0      	b.n	2c822 <socket_thread_fn+0x216>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2c840:	482c      	ldr	r0, [pc, #176]	; (2c8f4 <socket_thread_fn+0x2e8>)
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2c842:	f1a3 0508 	sub.w	r5, r3, #8
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2c846:	f7f0 fd0d 	bl	1d264 <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2c84a:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2c84c:	4602      	mov	r2, r0
   2c84e:	4929      	ldr	r1, [pc, #164]	; (2c8f4 <socket_thread_fn+0x2e8>)
   2c850:	4628      	mov	r0, r5
   2c852:	f01b fe92 	bl	4857a <strncmp>
		if (match) {
   2c856:	bb00      	cbnz	r0, 2c89a <socket_thread_fn+0x28e>
			ret->state = AT_CMD_ERROR;
   2c858:	2301      	movs	r3, #1
   2c85a:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   2c85c:	f06f 0307 	mvn.w	r3, #7
   2c860:	6023      	str	r3, [r4, #0]
			break;
   2c862:	e7bd      	b.n	2c7e0 <socket_thread_fn+0x1d4>
			if (current_cmd.resp_size < payload_len) {
   2c864:	68e3      	ldr	r3, [r4, #12]
   2c866:	429a      	cmp	r2, r3
   2c868:	d910      	bls.n	2c88c <socket_thread_fn+0x280>
				LOG_ERR("Response buffer not large enough");
   2c86a:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   2c86e:	f043 0301 	orr.w	r3, r3, #1
   2c872:	f363 0b07 	bfi	fp, r3, #0, #8
   2c876:	9b03      	ldr	r3, [sp, #12]
   2c878:	491f      	ldr	r1, [pc, #124]	; (2c8f8 <socket_thread_fn+0x2ec>)
   2c87a:	f363 1b8f 	bfi	fp, r3, #6, #10
   2c87e:	4658      	mov	r0, fp
   2c880:	f017 ff51 	bl	44726 <log_string_sync>
				ret.code  = -EMSGSIZE;
   2c884:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2c888:	602b      	str	r3, [r5, #0]
				goto next;
   2c88a:	e73f      	b.n	2c70c <socket_thread_fn+0x100>
   2c88c:	4631      	mov	r1, r6
   2c88e:	f01b fc7b 	bl	48188 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2c892:	792b      	ldrb	r3, [r5, #4]
   2c894:	2b07      	cmp	r3, #7
   2c896:	d1b5      	bne.n	2c804 <socket_thread_fn+0x1f8>
   2c898:	e7b1      	b.n	2c7fe <socket_thread_fn+0x1f2>
		new_len = strlen(buf) + 1;
   2c89a:	4630      	mov	r0, r6
   2c89c:	f7f0 fce2 	bl	1d264 <strlen>
   2c8a0:	1c42      	adds	r2, r0, #1
   2c8a2:	e7a1      	b.n	2c7e8 <socket_thread_fn+0x1dc>
   2c8a4:	000497a0 	.word	0x000497a0
   2c8a8:	00049788 	.word	0x00049788
   2c8ac:	2002b5f6 	.word	0x2002b5f6
   2c8b0:	20024ce4 	.word	0x20024ce4
   2c8b4:	20024d00 	.word	0x20024d00
   2c8b8:	20024ce0 	.word	0x20024ce0
   2c8bc:	20024d08 	.word	0x20024d08
   2c8c0:	0004df1f 	.word	0x0004df1f
   2c8c4:	0004df53 	.word	0x0004df53
   2c8c8:	0004df75 	.word	0x0004df75
   2c8cc:	20024ce8 	.word	0x20024ce8
   2c8d0:	20020ce8 	.word	0x20020ce8
   2c8d4:	0004df89 	.word	0x0004df89
   2c8d8:	0004dfc0 	.word	0x0004dfc0
   2c8dc:	0004dfd1 	.word	0x0004dfd1
   2c8e0:	0004b5fe 	.word	0x0004b5fe
   2c8e4:	20024cfc 	.word	0x20024cfc
   2c8e8:	0004e01c 	.word	0x0004e01c
   2c8ec:	2002b601 	.word	0x2002b601
   2c8f0:	0004e028 	.word	0x0004e028
   2c8f4:	0004e034 	.word	0x0004e034
   2c8f8:	0004e03c 	.word	0x0004e03c

0002c8fc <at_cmd_write>:
{
   2c8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c8fe:	4605      	mov	r5, r0
   2c900:	b089      	sub	sp, #36	; 0x24
   2c902:	460f      	mov	r7, r1
   2c904:	4616      	mov	r6, r2
   2c906:	461c      	mov	r4, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c908:	4b42      	ldr	r3, [pc, #264]	; (2ca14 <at_cmd_write+0x118>)
   2c90a:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2c90e:	2b01      	cmp	r3, #1
   2c910:	d07d      	beq.n	2ca0e <at_cmd_write+0x112>
	return z_impl_k_current_get();
   2c912:	f013 ffcd 	bl	408b0 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   2c916:	4b40      	ldr	r3, [pc, #256]	; (2ca18 <at_cmd_write+0x11c>)
   2c918:	681b      	ldr	r3, [r3, #0]
   2c91a:	4283      	cmp	r3, r0
   2c91c:	d10e      	bne.n	2c93c <at_cmd_write+0x40>
   2c91e:	493f      	ldr	r1, [pc, #252]	; (2ca1c <at_cmd_write+0x120>)
   2c920:	f240 1383 	movw	r3, #387	; 0x183
   2c924:	4a3e      	ldr	r2, [pc, #248]	; (2ca20 <at_cmd_write+0x124>)
   2c926:	483f      	ldr	r0, [pc, #252]	; (2ca24 <at_cmd_write+0x128>)
   2c928:	f017 fcd2 	bl	442d0 <printk>
   2c92c:	483e      	ldr	r0, [pc, #248]	; (2ca28 <at_cmd_write+0x12c>)
   2c92e:	f017 fccf 	bl	442d0 <printk>
   2c932:	f240 1183 	movw	r1, #387	; 0x183
   2c936:	483a      	ldr	r0, [pc, #232]	; (2ca20 <at_cmd_write+0x124>)
   2c938:	f017 fee4 	bl	44704 <assert_post_action>
	if (cmd == NULL) {
   2c93c:	b185      	cbz	r5, 2c960 <at_cmd_write+0x64>
   2c93e:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2c940:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2c944:	bb13      	cbnz	r3, 2c98c <at_cmd_write+0x90>
		LOG_ERR("Invalid command");
   2c946:	2301      	movs	r3, #1
   2c948:	f04f 0000 	mov.w	r0, #0
   2c94c:	4a37      	ldr	r2, [pc, #220]	; (2ca2c <at_cmd_write+0x130>)
   2c94e:	f363 0007 	bfi	r0, r3, #0, #8
   2c952:	4b37      	ldr	r3, [pc, #220]	; (2ca30 <at_cmd_write+0x134>)
   2c954:	4937      	ldr	r1, [pc, #220]	; (2ca34 <at_cmd_write+0x138>)
   2c956:	1a9b      	subs	r3, r3, r2
   2c958:	08db      	lsrs	r3, r3, #3
   2c95a:	f363 108f 	bfi	r0, r3, #6, #10
   2c95e:	e00b      	b.n	2c978 <at_cmd_write+0x7c>
		LOG_ERR("cmd is NULL");
   2c960:	2301      	movs	r3, #1
   2c962:	f04f 0000 	mov.w	r0, #0
   2c966:	4a31      	ldr	r2, [pc, #196]	; (2ca2c <at_cmd_write+0x130>)
   2c968:	f363 0007 	bfi	r0, r3, #0, #8
   2c96c:	4b30      	ldr	r3, [pc, #192]	; (2ca30 <at_cmd_write+0x134>)
   2c96e:	4932      	ldr	r1, [pc, #200]	; (2ca38 <at_cmd_write+0x13c>)
   2c970:	1a9b      	subs	r3, r3, r2
   2c972:	08db      	lsrs	r3, r3, #3
   2c974:	f363 108f 	bfi	r0, r3, #6, #10
   2c978:	f017 fed5 	bl	44726 <log_string_sync>
		if (state) {
   2c97c:	b91c      	cbnz	r4, 2c986 <at_cmd_write+0x8a>
		return -EINVAL;
   2c97e:	f06f 0015 	mvn.w	r0, #21
}
   2c982:	b009      	add	sp, #36	; 0x24
   2c984:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2c986:	2304      	movs	r3, #4
   2c988:	7023      	strb	r3, [r4, #0]
   2c98a:	e7f8      	b.n	2c97e <at_cmd_write+0x82>
		if (*c > ' ') {
   2c98c:	2b20      	cmp	r3, #32
   2c98e:	d9d7      	bls.n	2c940 <at_cmd_write+0x44>
	command.callback = NULL;
   2c990:	2300      	movs	r3, #0
   2c992:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2c994:	2302      	movs	r3, #2
	command.resp = buf;
   2c996:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   2c99a:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2c99c:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2c9a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c9a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9a8:	4824      	ldr	r0, [pc, #144]	; (2ca3c <at_cmd_write+0x140>)
   2c9aa:	f012 fb19 	bl	3efe0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2c9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c9b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9b6:	a903      	add	r1, sp, #12
   2c9b8:	4821      	ldr	r0, [pc, #132]	; (2ca40 <at_cmd_write+0x144>)
   2c9ba:	f012 f9c1 	bl	3ed40 <z_impl_k_msgq_put>
   2c9be:	4602      	mov	r2, r0
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2c9c0:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2c9c2:	b190      	cbz	r0, 2c9ea <at_cmd_write+0xee>
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2c9c4:	2301      	movs	r3, #1
   2c9c6:	f04f 0000 	mov.w	r0, #0
   2c9ca:	4918      	ldr	r1, [pc, #96]	; (2ca2c <at_cmd_write+0x130>)
   2c9cc:	f363 0007 	bfi	r0, r3, #0, #8
   2c9d0:	4b17      	ldr	r3, [pc, #92]	; (2ca30 <at_cmd_write+0x134>)
   2c9d2:	1a5b      	subs	r3, r3, r1
   2c9d4:	08db      	lsrs	r3, r3, #3
   2c9d6:	f363 108f 	bfi	r0, r3, #6, #10
   2c9da:	491a      	ldr	r1, [pc, #104]	; (2ca44 <at_cmd_write+0x148>)
   2c9dc:	f017 fea3 	bl	44726 <log_string_sync>
		if (state) {
   2c9e0:	b10c      	cbz	r4, 2c9e6 <at_cmd_write+0xea>
			*state = AT_CMD_ERROR_QUEUE;
   2c9e2:	2304      	movs	r3, #4
		*state = ret.state;
   2c9e4:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2c9e6:	9801      	ldr	r0, [sp, #4]
   2c9e8:	e7cb      	b.n	2c982 <at_cmd_write+0x86>
	load_cmd_and_write();
   2c9ea:	f7ff fd87 	bl	2c4fc <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2c9ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2c9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9f6:	a901      	add	r1, sp, #4
   2c9f8:	4813      	ldr	r0, [pc, #76]	; (2ca48 <at_cmd_write+0x14c>)
   2c9fa:	f012 fa43 	bl	3ee84 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   2c9fe:	480f      	ldr	r0, [pc, #60]	; (2ca3c <at_cmd_write+0x140>)
   2ca00:	f012 fbec 	bl	3f1dc <z_impl_k_mutex_unlock>
	if (state) {
   2ca04:	2c00      	cmp	r4, #0
   2ca06:	d0ee      	beq.n	2c9e6 <at_cmd_write+0xea>
		*state = ret.state;
   2ca08:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2ca0c:	e7ea      	b.n	2c9e4 <at_cmd_write+0xe8>
		return -EHOSTDOWN;
   2ca0e:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2ca12:	e7b6      	b.n	2c982 <at_cmd_write+0x86>
   2ca14:	20024d08 	.word	0x20024d08
   2ca18:	20024d0c 	.word	0x20024d0c
   2ca1c:	0004de40 	.word	0x0004de40
   2ca20:	0004de1c 	.word	0x0004de1c
   2ca24:	0004b33b 	.word	0x0004b33b
   2ca28:	0004de5e 	.word	0x0004de5e
   2ca2c:	00049788 	.word	0x00049788
   2ca30:	000497a0 	.word	0x000497a0
   2ca34:	0004deba 	.word	0x0004deba
   2ca38:	0004deae 	.word	0x0004deae
   2ca3c:	20020c6c 	.word	0x20020c6c
   2ca40:	20020cbc 	.word	0x20020cbc
   2ca44:	0004de8e 	.word	0x0004de8e
   2ca48:	20020ce8 	.word	0x20020ce8

0002ca4c <at_cmd_set_notification_handler>:
{
   2ca4c:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2ca4e:	4c0b      	ldr	r4, [pc, #44]	; (2ca7c <at_cmd_set_notification_handler+0x30>)
{
   2ca50:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2ca52:	6822      	ldr	r2, [r4, #0]
   2ca54:	b17a      	cbz	r2, 2ca76 <at_cmd_set_notification_handler+0x2a>
   2ca56:	4282      	cmp	r2, r0
   2ca58:	d00d      	beq.n	2ca76 <at_cmd_set_notification_handler+0x2a>
		LOG_WRN("Forgetting prior notification handler %p",
   2ca5a:	2302      	movs	r3, #2
   2ca5c:	f04f 0000 	mov.w	r0, #0
   2ca60:	4907      	ldr	r1, [pc, #28]	; (2ca80 <at_cmd_set_notification_handler+0x34>)
   2ca62:	f363 0007 	bfi	r0, r3, #0, #8
   2ca66:	4b07      	ldr	r3, [pc, #28]	; (2ca84 <at_cmd_set_notification_handler+0x38>)
   2ca68:	1a5b      	subs	r3, r3, r1
   2ca6a:	08db      	lsrs	r3, r3, #3
   2ca6c:	f363 108f 	bfi	r0, r3, #6, #10
   2ca70:	4905      	ldr	r1, [pc, #20]	; (2ca88 <at_cmd_set_notification_handler+0x3c>)
   2ca72:	f017 fe58 	bl	44726 <log_string_sync>
	notification_handler = handler;
   2ca76:	6025      	str	r5, [r4, #0]
}
   2ca78:	bd38      	pop	{r3, r4, r5, pc}
   2ca7a:	bf00      	nop
   2ca7c:	20024cfc 	.word	0x20024cfc
   2ca80:	00049788 	.word	0x00049788
   2ca84:	000497a0 	.word	0x000497a0
   2ca88:	0004ddf3 	.word	0x0004ddf3

0002ca8c <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ca8c:	4b0b      	ldr	r3, [pc, #44]	; (2cabc <find_node+0x30>)
{
   2ca8e:	b570      	push	{r4, r5, r6, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ca90:	681b      	ldr	r3, [r3, #0]
   2ca92:	b153      	cbz	r3, 2caaa <find_node+0x1e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ca94:	2500      	movs	r5, #0
   2ca96:	461c      	mov	r4, r3
   2ca98:	681b      	ldr	r3, [r3, #0]
		if (curr->ctx == ctx && curr->handler == handler) {
   2ca9a:	6866      	ldr	r6, [r4, #4]
   2ca9c:	428e      	cmp	r6, r1
   2ca9e:	d106      	bne.n	2caae <find_node+0x22>
   2caa0:	68a6      	ldr	r6, [r4, #8]
   2caa2:	4296      	cmp	r6, r2
   2caa4:	d103      	bne.n	2caae <find_node+0x22>
			*prev_out = prev;
			return curr;
   2caa6:	4623      	mov	r3, r4
			*prev_out = prev;
   2caa8:	6005      	str	r5, [r0, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2caaa:	4618      	mov	r0, r3
   2caac:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2caae:	2b00      	cmp	r3, #0
   2cab0:	d0fb      	beq.n	2caaa <find_node+0x1e>
   2cab2:	4625      	mov	r5, r4
   2cab4:	461c      	mov	r4, r3
   2cab6:	681b      	ldr	r3, [r3, #0]
   2cab8:	e7ef      	b.n	2ca9a <find_node+0xe>
   2caba:	bf00      	nop
   2cabc:	20024d10 	.word	0x20024d10

0002cac0 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2cac0:	4a0e      	ldr	r2, [pc, #56]	; (2cafc <module_init+0x3c>)
{
   2cac2:	b508      	push	{r3, lr}
	if (initialized) {
   2cac4:	7813      	ldrb	r3, [r2, #0]
   2cac6:	b17b      	cbz	r3, 2cae8 <module_init+0x28>
		LOG_WRN("Already initialized. Nothing to do");
   2cac8:	2302      	movs	r3, #2
   2caca:	f04f 0000 	mov.w	r0, #0
   2cace:	4a0c      	ldr	r2, [pc, #48]	; (2cb00 <module_init+0x40>)
   2cad0:	f363 0007 	bfi	r0, r3, #0, #8
   2cad4:	4b0b      	ldr	r3, [pc, #44]	; (2cb04 <module_init+0x44>)
   2cad6:	490c      	ldr	r1, [pc, #48]	; (2cb08 <module_init+0x48>)
   2cad8:	1a9b      	subs	r3, r3, r2
   2cada:	08db      	lsrs	r3, r3, #3
   2cadc:	f363 108f 	bfi	r0, r3, #6, #10
   2cae0:	f017 fe21 	bl	44726 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2cae4:	2000      	movs	r0, #0
   2cae6:	bd08      	pop	{r3, pc}
	initialized = true;
   2cae8:	2101      	movs	r1, #1
   2caea:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2caec:	4a07      	ldr	r2, [pc, #28]	; (2cb0c <module_init+0x4c>)
	at_cmd_set_notification_handler(notif_dispatch);
   2caee:	4808      	ldr	r0, [pc, #32]	; (2cb10 <module_init+0x50>)
	list->tail = NULL;
   2caf0:	e9c2 3300 	strd	r3, r3, [r2]
   2caf4:	f7ff ffaa 	bl	2ca4c <at_cmd_set_notification_handler>
	return 0;
   2caf8:	e7f4      	b.n	2cae4 <module_init+0x24>
   2cafa:	bf00      	nop
   2cafc:	2002c083 	.word	0x2002c083
   2cb00:	00049788 	.word	0x00049788
   2cb04:	000497b0 	.word	0x000497b0
   2cb08:	0004e0bb 	.word	0x0004e0bb
   2cb0c:	20024d10 	.word	0x20024d10
   2cb10:	0002cb21 	.word	0x0002cb21

0002cb14 <k_mutex_unlock.constprop.7>:
   2cb14:	4801      	ldr	r0, [pc, #4]	; (2cb1c <k_mutex_unlock.constprop.7+0x8>)
   2cb16:	f012 bb61 	b.w	3f1dc <z_impl_k_mutex_unlock>
   2cb1a:	bf00      	nop
   2cb1c:	20020c58 	.word	0x20020c58

0002cb20 <notif_dispatch>:
{
   2cb20:	b538      	push	{r3, r4, r5, lr}
   2cb22:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2cb24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cb28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cb2c:	4809      	ldr	r0, [pc, #36]	; (2cb54 <notif_dispatch+0x34>)
   2cb2e:	f012 fa57 	bl	3efe0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2cb32:	4b09      	ldr	r3, [pc, #36]	; (2cb58 <notif_dispatch+0x38>)
   2cb34:	681b      	ldr	r3, [r3, #0]
   2cb36:	b91b      	cbnz	r3, 2cb40 <notif_dispatch+0x20>
}
   2cb38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2cb3c:	f7ff bfea 	b.w	2cb14 <k_mutex_unlock.constprop.7>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2cb40:	681c      	ldr	r4, [r3, #0]
		curr->handler(curr->ctx, response);
   2cb42:	689a      	ldr	r2, [r3, #8]
   2cb44:	4629      	mov	r1, r5
   2cb46:	6858      	ldr	r0, [r3, #4]
   2cb48:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2cb4a:	2c00      	cmp	r4, #0
   2cb4c:	d0f4      	beq.n	2cb38 <notif_dispatch+0x18>
   2cb4e:	4623      	mov	r3, r4
   2cb50:	6824      	ldr	r4, [r4, #0]
   2cb52:	e7f6      	b.n	2cb42 <notif_dispatch+0x22>
   2cb54:	20020c58 	.word	0x20020c58
   2cb58:	20024d10 	.word	0x20024d10

0002cb5c <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   2cb5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2cb5e:	4606      	mov	r6, r0
	if (handler == NULL) {
   2cb60:	460d      	mov	r5, r1
   2cb62:	b999      	cbnz	r1, 2cb8c <at_notif_register_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2cb64:	2301      	movs	r3, #1
   2cb66:	f04f 0000 	mov.w	r0, #0
   2cb6a:	4a1e      	ldr	r2, [pc, #120]	; (2cbe4 <at_notif_register_handler+0x88>)
   2cb6c:	f363 0007 	bfi	r0, r3, #0, #8
   2cb70:	4b1d      	ldr	r3, [pc, #116]	; (2cbe8 <at_notif_register_handler+0x8c>)
   2cb72:	1a9b      	subs	r3, r3, r2
   2cb74:	08db      	lsrs	r3, r3, #3
   2cb76:	f363 108f 	bfi	r0, r3, #6, #10
   2cb7a:	4632      	mov	r2, r6
   2cb7c:	460b      	mov	r3, r1
   2cb7e:	491b      	ldr	r1, [pc, #108]	; (2cbec <at_notif_register_handler+0x90>)
   2cb80:	f017 fdd1 	bl	44726 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2cb84:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2cb88:	b002      	add	sp, #8
   2cb8a:	bd70      	pop	{r4, r5, r6, pc}
   2cb8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cb94:	4816      	ldr	r0, [pc, #88]	; (2cbf0 <at_notif_register_handler+0x94>)
   2cb96:	f012 fa23 	bl	3efe0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2cb9a:	462a      	mov	r2, r5
   2cb9c:	4631      	mov	r1, r6
   2cb9e:	a801      	add	r0, sp, #4
   2cba0:	f7ff ff74 	bl	2ca8c <find_node>
   2cba4:	4604      	mov	r4, r0
   2cba6:	b118      	cbz	r0, 2cbb0 <at_notif_register_handler+0x54>
		k_mutex_unlock(&list_mtx);
   2cba8:	f7ff ffb4 	bl	2cb14 <k_mutex_unlock.constprop.7>
		return 0;
   2cbac:	2000      	movs	r0, #0
   2cbae:	e7eb      	b.n	2cb88 <at_notif_register_handler+0x2c>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2cbb0:	200c      	movs	r0, #12
   2cbb2:	f015 f8bb 	bl	41d2c <k_malloc>
   2cbb6:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2cbb8:	b920      	cbnz	r0, 2cbc4 <at_notif_register_handler+0x68>
		k_mutex_unlock(&list_mtx);
   2cbba:	f7ff ffab 	bl	2cb14 <k_mutex_unlock.constprop.7>
		return -ENOBUFS;
   2cbbe:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2cbc2:	e7e1      	b.n	2cb88 <at_notif_register_handler+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   2cbc4:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2cbc6:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2cbc8:	4a0a      	ldr	r2, [pc, #40]	; (2cbf4 <at_notif_register_handler+0x98>)
   2cbca:	6044      	str	r4, [r0, #4]
   2cbcc:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2cbce:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2cbd0:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2cbd2:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2cbd6:	b911      	cbnz	r1, 2cbde <at_notif_register_handler+0x82>
	list->head = node;
   2cbd8:	e9c2 3300 	strd	r3, r3, [r2]
   2cbdc:	e7e4      	b.n	2cba8 <at_notif_register_handler+0x4c>
	parent->next = child;
   2cbde:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2cbe0:	6053      	str	r3, [r2, #4]
   2cbe2:	e7e1      	b.n	2cba8 <at_notif_register_handler+0x4c>
   2cbe4:	00049788 	.word	0x00049788
   2cbe8:	000497b0 	.word	0x000497b0
   2cbec:	0004e08a 	.word	0x0004e08a
   2cbf0:	20020c58 	.word	0x20020c58
   2cbf4:	20024d10 	.word	0x20024d10

0002cbf8 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2cbf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2cbfa:	4605      	mov	r5, r0
	if (handler == NULL) {
   2cbfc:	460c      	mov	r4, r1
   2cbfe:	b999      	cbnz	r1, 2cc28 <at_notif_deregister_handler+0x30>
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2cc00:	2301      	movs	r3, #1
   2cc02:	f04f 0000 	mov.w	r0, #0
   2cc06:	4a22      	ldr	r2, [pc, #136]	; (2cc90 <at_notif_deregister_handler+0x98>)
   2cc08:	f363 0007 	bfi	r0, r3, #0, #8
   2cc0c:	4b21      	ldr	r3, [pc, #132]	; (2cc94 <at_notif_deregister_handler+0x9c>)
   2cc0e:	1a9b      	subs	r3, r3, r2
   2cc10:	08db      	lsrs	r3, r3, #3
   2cc12:	f363 108f 	bfi	r0, r3, #6, #10
   2cc16:	462a      	mov	r2, r5
   2cc18:	460b      	mov	r3, r1
   2cc1a:	491f      	ldr	r1, [pc, #124]	; (2cc98 <at_notif_deregister_handler+0xa0>)
   2cc1c:	f017 fd83 	bl	44726 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2cc20:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   2cc24:	b003      	add	sp, #12
   2cc26:	bd30      	pop	{r4, r5, pc}
	struct notif_handler *curr, *prev = NULL;
   2cc28:	2300      	movs	r3, #0
   2cc2a:	9301      	str	r3, [sp, #4]
   2cc2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cc30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cc34:	4819      	ldr	r0, [pc, #100]	; (2cc9c <at_notif_deregister_handler+0xa4>)
   2cc36:	f012 f9d3 	bl	3efe0 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2cc3a:	4622      	mov	r2, r4
   2cc3c:	4629      	mov	r1, r5
   2cc3e:	a801      	add	r0, sp, #4
   2cc40:	f7ff ff24 	bl	2ca8c <find_node>
	if (curr == NULL) {
   2cc44:	b978      	cbnz	r0, 2cc66 <at_notif_deregister_handler+0x6e>
		LOG_WRN("Handler not registered. Nothing to do");
   2cc46:	2302      	movs	r3, #2
   2cc48:	4a11      	ldr	r2, [pc, #68]	; (2cc90 <at_notif_deregister_handler+0x98>)
   2cc4a:	f363 0007 	bfi	r0, r3, #0, #8
   2cc4e:	4b11      	ldr	r3, [pc, #68]	; (2cc94 <at_notif_deregister_handler+0x9c>)
   2cc50:	4913      	ldr	r1, [pc, #76]	; (2cca0 <at_notif_deregister_handler+0xa8>)
   2cc52:	1a9b      	subs	r3, r3, r2
   2cc54:	08db      	lsrs	r3, r3, #3
   2cc56:	f363 108f 	bfi	r0, r3, #6, #10
   2cc5a:	f017 fd64 	bl	44726 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   2cc5e:	f7ff ff59 	bl	2cb14 <k_mutex_unlock.constprop.7>
	return remove_notif_handler(context, handler);
   2cc62:	2000      	movs	r0, #0
   2cc64:	e7de      	b.n	2cc24 <at_notif_deregister_handler+0x2c>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2cc66:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2cc68:	6801      	ldr	r1, [r0, #0]
   2cc6a:	4b0e      	ldr	r3, [pc, #56]	; (2cca4 <at_notif_deregister_handler+0xac>)
   2cc6c:	b94a      	cbnz	r2, 2cc82 <at_notif_deregister_handler+0x8a>
   2cc6e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2cc70:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc72:	4290      	cmp	r0, r2
   2cc74:	d100      	bne.n	2cc78 <at_notif_deregister_handler+0x80>
	list->tail = node;
   2cc76:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2cc78:	2300      	movs	r3, #0
   2cc7a:	6003      	str	r3, [r0, #0]
	k_free(curr);
   2cc7c:	f01b fa49 	bl	48112 <k_free>
   2cc80:	e7ed      	b.n	2cc5e <at_notif_deregister_handler+0x66>
   2cc82:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2cc84:	6859      	ldr	r1, [r3, #4]
   2cc86:	4288      	cmp	r0, r1
	list->tail = node;
   2cc88:	bf08      	it	eq
   2cc8a:	605a      	streq	r2, [r3, #4]
   2cc8c:	e7f4      	b.n	2cc78 <at_notif_deregister_handler+0x80>
   2cc8e:	bf00      	nop
   2cc90:	00049788 	.word	0x00049788
   2cc94:	000497b0 	.word	0x000497b0
   2cc98:	0004e08a 	.word	0x0004e08a
   2cc9c:	20020c58 	.word	0x20020c58
   2cca0:	0004e064 	.word	0x0004e064
   2cca4:	20024d10 	.word	0x20024d10

0002cca8 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   2cca8:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2ccaa:	4d05      	ldr	r5, [pc, #20]	; (2ccc0 <write_uart_string+0x18>)
   2ccac:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2ccae:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2ccb2:	b901      	cbnz	r1, 2ccb6 <write_uart_string+0xe>
	}
}
   2ccb4:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2ccb6:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   2ccb8:	6883      	ldr	r3, [r0, #8]
   2ccba:	685b      	ldr	r3, [r3, #4]
   2ccbc:	4798      	blx	r3
   2ccbe:	e7f6      	b.n	2ccae <write_uart_string+0x6>
   2ccc0:	20024d28 	.word	0x20024d28

0002ccc4 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   2ccc4:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   2ccc6:	4923      	ldr	r1, [pc, #140]	; (2cd54 <cmd_send+0x90>)
{
   2ccc8:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   2ccca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2ccce:	f10d 030b 	add.w	r3, sp, #11
   2ccd2:	4608      	mov	r0, r1
   2ccd4:	f7ff fe12 	bl	2c8fc <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   2ccd8:	1e02      	subs	r2, r0, #0
   2ccda:	da12      	bge.n	2cd02 <cmd_send+0x3e>
		LOG_ERR("Error while processing AT command: %d", err);
   2ccdc:	2301      	movs	r3, #1
   2ccde:	f04f 0000 	mov.w	r0, #0
   2cce2:	491d      	ldr	r1, [pc, #116]	; (2cd58 <cmd_send+0x94>)
   2cce4:	f363 0007 	bfi	r0, r3, #0, #8
   2cce8:	4b1c      	ldr	r3, [pc, #112]	; (2cd5c <cmd_send+0x98>)
   2ccea:	1a5b      	subs	r3, r3, r1
   2ccec:	08db      	lsrs	r3, r3, #3
   2ccee:	f363 108f 	bfi	r0, r3, #6, #10
   2ccf2:	491b      	ldr	r1, [pc, #108]	; (2cd60 <cmd_send+0x9c>)
   2ccf4:	f017 fd17 	bl	44726 <log_string_sync>
		state = AT_CMD_ERROR;
   2ccf8:	2301      	movs	r3, #1
   2ccfa:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   2ccfe:	4819      	ldr	r0, [pc, #100]	; (2cd64 <cmd_send+0xa0>)
   2cd00:	e012      	b.n	2cd28 <cmd_send+0x64>
	switch (state) {
   2cd02:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2cd06:	2b03      	cmp	r3, #3
   2cd08:	d810      	bhi.n	2cd2c <cmd_send+0x68>
   2cd0a:	a101      	add	r1, pc, #4	; (adr r1, 2cd10 <cmd_send+0x4c>)
   2cd0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2cd10:	0002cd21 	.word	0x0002cd21
   2cd14:	0002ccff 	.word	0x0002ccff
   2cd18:	0002cd3b 	.word	0x0002cd3b
   2cd1c:	0002cd4d 	.word	0x0002cd4d
		write_uart_string(at_buf);
   2cd20:	480c      	ldr	r0, [pc, #48]	; (2cd54 <cmd_send+0x90>)
   2cd22:	f7ff ffc1 	bl	2cca8 <write_uart_string>
		write_uart_string(OK_STR);
   2cd26:	4810      	ldr	r0, [pc, #64]	; (2cd68 <cmd_send+0xa4>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   2cd28:	f7ff ffbe 	bl	2cca8 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   2cd2c:	4b0f      	ldr	r3, [pc, #60]	; (2cd6c <cmd_send+0xa8>)
   2cd2e:	6818      	ldr	r0, [r3, #0]
	z_impl_uart_irq_rx_enable(dev);
   2cd30:	f01a fc87 	bl	47642 <z_impl_uart_irq_rx_enable>
}
   2cd34:	b00b      	add	sp, #44	; 0x2c
   2cd36:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2cd3a:	4b0d      	ldr	r3, [pc, #52]	; (2cd70 <cmd_send+0xac>)
   2cd3c:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2cd3e:	2219      	movs	r2, #25
   2cd40:	2100      	movs	r1, #0
   2cd42:	a803      	add	r0, sp, #12
   2cd44:	f01b fb79 	bl	4843a <__sprintf_chk>
		write_uart_string(str);
   2cd48:	a803      	add	r0, sp, #12
   2cd4a:	e7ed      	b.n	2cd28 <cmd_send+0x64>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2cd4c:	9200      	str	r2, [sp, #0]
   2cd4e:	4b09      	ldr	r3, [pc, #36]	; (2cd74 <cmd_send+0xb0>)
   2cd50:	e7f5      	b.n	2cd3e <cmd_send+0x7a>
   2cd52:	bf00      	nop
   2cd54:	2002c084 	.word	0x2002c084
   2cd58:	00049788 	.word	0x00049788
   2cd5c:	000497a8 	.word	0x000497a8
   2cd60:	0004e1a2 	.word	0x0004e1a2
   2cd64:	0004e034 	.word	0x0004e034
   2cd68:	0004b5fe 	.word	0x0004b5fe
   2cd6c:	20024d28 	.word	0x20024d28
   2cd70:	0004e1c8 	.word	0x0004e1c8
   2cd74:	0004e1d9 	.word	0x0004e1d9

0002cd78 <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   2cd78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2cd7c:	4606      	mov	r6, r0
	if (api->irq_update) {
   2cd7e:	6883      	ldr	r3, [r0, #8]
   2cd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2cd82:	b103      	cbz	r3, 2cd86 <isr+0xe>
		return api->irq_update(dev);
   2cd84:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2cd86:	68b3      	ldr	r3, [r6, #8]
   2cd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2cd8a:	b1c3      	cbz	r3, 2cdbe <isr+0x46>
		return api->irq_rx_ready(dev);
   2cd8c:	4630      	mov	r0, r6
   2cd8e:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   2cd90:	b1a8      	cbz	r0, 2cdbe <isr+0x46>
   2cd92:	f8df a15c 	ldr.w	sl, [pc, #348]	; 2cef0 <isr+0x178>
   2cd96:	4d4b      	ldr	r5, [pc, #300]	; (2cec4 <isr+0x14c>)
   2cd98:	46d1      	mov	r9, sl
			LOG_WRN("Ignored null; would terminate string early.");
   2cd9a:	4b4b      	ldr	r3, [pc, #300]	; (2cec8 <isr+0x150>)
		if (at_cmd_len > 0) {
   2cd9c:	4c4b      	ldr	r4, [pc, #300]	; (2cecc <isr+0x154>)
			LOG_WRN("Ignored null; would terminate string early.");
   2cd9e:	1aed      	subs	r5, r5, r3
   2cda0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2cda4:	e8da 3faf 	lda	r3, [sl]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   2cda8:	07db      	lsls	r3, r3, #31
   2cdaa:	d408      	bmi.n	2cdbe <isr+0x46>
	if (api->fifo_read) {
   2cdac:	68b3      	ldr	r3, [r6, #8]
   2cdae:	699b      	ldr	r3, [r3, #24]
   2cdb0:	b12b      	cbz	r3, 2cdbe <isr+0x46>
		return api->fifo_read(dev, rx_data, size);
   2cdb2:	2201      	movs	r2, #1
   2cdb4:	f10d 0107 	add.w	r1, sp, #7
   2cdb8:	4630      	mov	r0, r6
   2cdba:	4798      	blx	r3
   2cdbc:	b910      	cbnz	r0, 2cdc4 <isr+0x4c>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2cdbe:	b002      	add	sp, #8
   2cdc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uart_rx_handler(character);
   2cdc4:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   2cdc8:	2a08      	cmp	r2, #8
   2cdca:	d001      	beq.n	2cdd0 <isr+0x58>
   2cdcc:	2a7f      	cmp	r2, #127	; 0x7f
   2cdce:	d105      	bne.n	2cddc <isr+0x64>
		if (at_cmd_len > 0) {
   2cdd0:	6823      	ldr	r3, [r4, #0]
   2cdd2:	2b00      	cmp	r3, #0
   2cdd4:	d0e6      	beq.n	2cda4 <isr+0x2c>
			at_cmd_len--;
   2cdd6:	3b01      	subs	r3, #1
   2cdd8:	6023      	str	r3, [r4, #0]
   2cdda:	e7e3      	b.n	2cda4 <isr+0x2c>
	if (!inside_quotes) {
   2cddc:	493c      	ldr	r1, [pc, #240]	; (2ced0 <isr+0x158>)
   2cdde:	780b      	ldrb	r3, [r1, #0]
   2cde0:	b9cb      	cbnz	r3, 2ce16 <isr+0x9e>
		switch (character) {
   2cde2:	2a0a      	cmp	r2, #10
   2cde4:	d02b      	beq.n	2ce3e <isr+0xc6>
   2cde6:	2a0d      	cmp	r2, #13
   2cde8:	d011      	beq.n	2ce0e <isr+0x96>
   2cdea:	b9a2      	cbnz	r2, 2ce16 <isr+0x9e>
			if (term_mode == MODE_NULL_TERM) {
   2cdec:	4b39      	ldr	r3, [pc, #228]	; (2ced4 <isr+0x15c>)
   2cdee:	781b      	ldrb	r3, [r3, #0]
   2cdf0:	2b00      	cmp	r3, #0
   2cdf2:	d040      	beq.n	2ce76 <isr+0xfe>
			LOG_WRN("Ignored null; would terminate string early.");
   2cdf4:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2cdf8:	f043 0302 	orr.w	r3, r3, #2
   2cdfc:	f363 0707 	bfi	r7, r3, #0, #8
   2ce00:	f365 178f 	bfi	r7, r5, #6, #10
   2ce04:	4934      	ldr	r1, [pc, #208]	; (2ced8 <isr+0x160>)
   2ce06:	4638      	mov	r0, r7
   2ce08:	f017 fc8d 	bl	44726 <log_string_sync>
			return;
   2ce0c:	e7ca      	b.n	2cda4 <isr+0x2c>
			if (term_mode == MODE_CR) {
   2ce0e:	4831      	ldr	r0, [pc, #196]	; (2ced4 <isr+0x15c>)
   2ce10:	7800      	ldrb	r0, [r0, #0]
   2ce12:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2ce14:	d02f      	beq.n	2ce76 <isr+0xfe>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2ce16:	f8d4 c000 	ldr.w	ip, [r4]
   2ce1a:	f10c 0001 	add.w	r0, ip, #1
   2ce1e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2ce22:	d31d      	bcc.n	2ce60 <isr+0xe8>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2ce24:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2ce28:	f043 0301 	orr.w	r3, r3, #1
   2ce2c:	f363 0807 	bfi	r8, r3, #0, #8
   2ce30:	f365 188f 	bfi	r8, r5, #6, #10
   2ce34:	4929      	ldr	r1, [pc, #164]	; (2cedc <isr+0x164>)
   2ce36:	4640      	mov	r0, r8
   2ce38:	f017 fc75 	bl	44726 <log_string_sync>
		return;
   2ce3c:	e7b2      	b.n	2cda4 <isr+0x2c>
			if (term_mode == MODE_LF) {
   2ce3e:	4825      	ldr	r0, [pc, #148]	; (2ced4 <isr+0x15c>)
   2ce40:	7800      	ldrb	r0, [r0, #0]
   2ce42:	2802      	cmp	r0, #2
   2ce44:	d017      	beq.n	2ce76 <isr+0xfe>
			if (term_mode == MODE_CR_LF &&
   2ce46:	2803      	cmp	r0, #3
   2ce48:	d1e5      	bne.n	2ce16 <isr+0x9e>
   2ce4a:	f8d4 c000 	ldr.w	ip, [r4]
   2ce4e:	f1bc 0f00 	cmp.w	ip, #0
   2ce52:	d0e0      	beq.n	2ce16 <isr+0x9e>
			    at_buf[at_cmd_len - 1] == '\r') {
   2ce54:	4822      	ldr	r0, [pc, #136]	; (2cee0 <isr+0x168>)
   2ce56:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   2ce58:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2ce5c:	280d      	cmp	r0, #13
   2ce5e:	e7d9      	b.n	2ce14 <isr+0x9c>
	at_buf[at_cmd_len] = character;
   2ce60:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2cee0 <isr+0x168>
	if (character == '"') {
   2ce64:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   2ce66:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   2ce6a:	6020      	str	r0, [r4, #0]
	if (character == '"') {
   2ce6c:	d19a      	bne.n	2cda4 <isr+0x2c>
	if (!inside_quotes) {
   2ce6e:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2ce72:	700b      	strb	r3, [r1, #0]
   2ce74:	e796      	b.n	2cda4 <isr+0x2c>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2ce76:	2200      	movs	r2, #0
   2ce78:	4b19      	ldr	r3, [pc, #100]	; (2cee0 <isr+0x168>)
	inside_quotes = false;
   2ce7a:	700a      	strb	r2, [r1, #0]
   2ce7c:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2ce7e:	6820      	ldr	r0, [r4, #0]
	at_cmd_len = 0;
   2ce80:	6022      	str	r2, [r4, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2ce82:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   2ce84:	f813 2b01 	ldrb.w	r2, [r3], #1
   2ce88:	2a20      	cmp	r2, #32
   2ce8a:	d802      	bhi.n	2ce92 <isr+0x11a>
		} else if (*c == '\0') {
   2ce8c:	2a00      	cmp	r2, #0
   2ce8e:	d1f9      	bne.n	2ce84 <isr+0x10c>
   2ce90:	e788      	b.n	2cda4 <isr+0x2c>
	if (at_buf[0]) {
   2ce92:	780b      	ldrb	r3, [r1, #0]
   2ce94:	2b00      	cmp	r3, #0
   2ce96:	d085      	beq.n	2cda4 <isr+0x2c>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   2ce98:	4b12      	ldr	r3, [pc, #72]	; (2cee4 <isr+0x16c>)
   2ce9a:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   2ce9c:	6883      	ldr	r3, [r0, #8]
   2ce9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2cea0:	b103      	cbz	r3, 2cea4 <isr+0x12c>
		api->irq_rx_disable(dev);
   2cea2:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2cea4:	e8d9 3fef 	ldaex	r3, [r9]
   2cea8:	f043 0201 	orr.w	r2, r3, #1
   2ceac:	e8c9 2fe1 	stlex	r1, r2, [r9]
   2ceb0:	2900      	cmp	r1, #0
   2ceb2:	d1f7      	bne.n	2cea4 <isr+0x12c>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2ceb4:	07da      	lsls	r2, r3, #31
   2ceb6:	f53f af75 	bmi.w	2cda4 <isr+0x2c>
		k_queue_append(&work_q->queue, work);
   2ceba:	490b      	ldr	r1, [pc, #44]	; (2cee8 <isr+0x170>)
   2cebc:	480b      	ldr	r0, [pc, #44]	; (2ceec <isr+0x174>)
   2cebe:	f01a ffbb 	bl	47e38 <k_queue_append>
   2cec2:	e76f      	b.n	2cda4 <isr+0x2c>
   2cec4:	000497a8 	.word	0x000497a8
   2cec8:	00049788 	.word	0x00049788
   2cecc:	20024d18 	.word	0x20024d18
   2ced0:	2002d084 	.word	0x2002d084
   2ced4:	2002d085 	.word	0x2002d085
   2ced8:	0004e1ea 	.word	0x0004e1ea
   2cedc:	0004e216 	.word	0x0004e216
   2cee0:	2002c084 	.word	0x2002c084
   2cee4:	20024d28 	.word	0x20024d28
   2cee8:	20024d1c 	.word	0x20024d1c
   2ceec:	20021e18 	.word	0x20021e18
   2cef0:	20024d24 	.word	0x20024d24

0002cef4 <at_host_init>:

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   2cef4:	2201      	movs	r2, #1
{
   2cef6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		term_mode = mode;
   2cefa:	4b52      	ldr	r3, [pc, #328]	; (2d044 <at_host_init+0x150>)
{
   2cefc:	b085      	sub	sp, #20
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2cefe:	4952      	ldr	r1, [pc, #328]	; (2d048 <at_host_init+0x154>)
   2cf00:	2000      	movs	r0, #0
		term_mode = mode;
   2cf02:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   2cf04:	f7ff fe2a 	bl	2cb5c <at_notif_register_handler>
	if (err != 0) {
   2cf08:	4c50      	ldr	r4, [pc, #320]	; (2d04c <at_host_init+0x158>)
   2cf0a:	4b51      	ldr	r3, [pc, #324]	; (2d050 <at_host_init+0x15c>)
   2cf0c:	4606      	mov	r6, r0
   2cf0e:	1ae4      	subs	r4, r4, r3
   2cf10:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2cf14:	b170      	cbz	r0, 2cf34 <at_host_init+0x40>
		LOG_ERR("Can't register handler err=%d", err);
   2cf16:	f04f 0000 	mov.w	r0, #0
   2cf1a:	2301      	movs	r3, #1
   2cf1c:	f363 0007 	bfi	r0, r3, #0, #8
   2cf20:	f364 108f 	bfi	r0, r4, #6, #10
   2cf24:	4632      	mov	r2, r6
   2cf26:	494b      	ldr	r1, [pc, #300]	; (2d054 <at_host_init+0x160>)
   2cf28:	f017 fbfd 	bl	44726 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2cf2c:	4630      	mov	r0, r6
   2cf2e:	b005      	add	sp, #20
   2cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf34:	4848      	ldr	r0, [pc, #288]	; (2d058 <at_host_init+0x164>)
   2cf36:	f011 fc03 	bl	3e740 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   2cf3a:	4d48      	ldr	r5, [pc, #288]	; (2d05c <at_host_init+0x168>)
   2cf3c:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   2cf3e:	b9b8      	cbnz	r0, 2cf70 <at_host_init+0x7c>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   2cf40:	2301      	movs	r3, #1
   2cf42:	f363 0007 	bfi	r0, r3, #0, #8
   2cf46:	4a44      	ldr	r2, [pc, #272]	; (2d058 <at_host_init+0x164>)
   2cf48:	f364 108f 	bfi	r0, r4, #6, #10
   2cf4c:	4944      	ldr	r1, [pc, #272]	; (2d060 <at_host_init+0x16c>)
   2cf4e:	f017 fbea 	bl	44726 <log_string_sync>
		return -EINVAL;
   2cf52:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   2cf56:	2301      	movs	r3, #1
   2cf58:	f04f 0000 	mov.w	r0, #0
   2cf5c:	f363 0007 	bfi	r0, r3, #0, #8
   2cf60:	f364 108f 	bfi	r0, r4, #6, #10
   2cf64:	493f      	ldr	r1, [pc, #252]	; (2d064 <at_host_init+0x170>)
   2cf66:	f017 fbde 	bl	44726 <log_string_sync>
		return -EFAULT;
   2cf6a:	f06f 060d 	mvn.w	r6, #13
   2cf6e:	e7dd      	b.n	2cf2c <at_host_init+0x38>
	return z_impl_k_uptime_ticks();
   2cf70:	f01b f835 	bl	47fde <z_impl_k_uptime_ticks>
   2cf74:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   2cf78:	fba0 2307 	umull	r2, r3, r0, r7
   2cf7c:	fb07 3301 	mla	r3, r7, r1, r3
			LOG_INF("UART check failed: %d. "
   2cf80:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2d080 <at_host_init+0x18c>
   2cf84:	0bd7      	lsrs	r7, r2, #15
   2cf86:	ea47 4743 	orr.w	r7, r7, r3, lsl #17
		err = uart_err_check(uart_dev);
   2cf8a:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   2cf8c:	6883      	ldr	r3, [r0, #8]
   2cf8e:	689b      	ldr	r3, [r3, #8]
   2cf90:	2b00      	cmp	r3, #0
   2cf92:	d03e      	beq.n	2d012 <at_host_init+0x11e>
		return api->err_check(dev);
   2cf94:	4798      	blx	r3
		if (err) {
   2cf96:	9001      	str	r0, [sp, #4]
   2cf98:	2800      	cmp	r0, #0
   2cf9a:	d03a      	beq.n	2d012 <at_host_init+0x11e>
   2cf9c:	f01b f81f 	bl	47fde <z_impl_k_uptime_ticks>
   2cfa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cfa4:	fba0 ab03 	umull	sl, fp, r0, r3
   2cfa8:	fb03 bb01 	mla	fp, r3, r1, fp
   2cfac:	ea4f 33da 	mov.w	r3, sl, lsr #15
   2cfb0:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
			if (k_uptime_get_32() - start_time >
   2cfb4:	1bdb      	subs	r3, r3, r7
   2cfb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2cfba:	9a01      	ldr	r2, [sp, #4]
   2cfbc:	d90c      	bls.n	2cfd8 <at_host_init+0xe4>
				LOG_ERR("UART check failed: %d. "
   2cfbe:	2301      	movs	r3, #1
   2cfc0:	f04f 0000 	mov.w	r0, #0
   2cfc4:	f363 0007 	bfi	r0, r3, #0, #8
   2cfc8:	f364 108f 	bfi	r0, r4, #6, #10
   2cfcc:	4926      	ldr	r1, [pc, #152]	; (2d068 <at_host_init+0x174>)
   2cfce:	f017 fbaa 	bl	44726 <log_string_sync>
				return -EIO;
   2cfd2:	f06f 0204 	mvn.w	r2, #4
   2cfd6:	e7be      	b.n	2cf56 <at_host_init+0x62>
			LOG_INF("UART check failed: %d. "
   2cfd8:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2cfdc:	f043 0303 	orr.w	r3, r3, #3
   2cfe0:	f363 0807 	bfi	r8, r3, #0, #8
   2cfe4:	f364 188f 	bfi	r8, r4, #6, #10
   2cfe8:	4649      	mov	r1, r9
   2cfea:	4640      	mov	r0, r8
   2cfec:	f017 fb9b 	bl	44726 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2cff0:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   2cff2:	6883      	ldr	r3, [r0, #8]
   2cff4:	699b      	ldr	r3, [r3, #24]
   2cff6:	b92b      	cbnz	r3, 2d004 <at_host_init+0x110>
	return z_impl_k_sleep(timeout);
   2cff8:	2100      	movs	r1, #0
   2cffa:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2cffe:	f013 fc21 	bl	40844 <z_impl_k_sleep>
   2d002:	e7c2      	b.n	2cf8a <at_host_init+0x96>
		return api->fifo_read(dev, rx_data, size);
   2d004:	2201      	movs	r2, #1
   2d006:	f10d 010f 	add.w	r1, sp, #15
   2d00a:	4798      	blx	r3
   2d00c:	2800      	cmp	r0, #0
   2d00e:	d1ef      	bne.n	2cff0 <at_host_init+0xfc>
   2d010:	e7f2      	b.n	2cff8 <at_host_init+0x104>
	uart_irq_callback_set(uart_dev, isr);
   2d012:	6828      	ldr	r0, [r5, #0]
	const struct uart_driver_api *api =
   2d014:	6883      	ldr	r3, [r0, #8]
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2d016:	b123      	cbz	r3, 2d022 <at_host_init+0x12e>
   2d018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2d01a:	b113      	cbz	r3, 2d022 <at_host_init+0x12e>
		api->irq_callback_set(dev, cb, user_data);
   2d01c:	2200      	movs	r2, #0
   2d01e:	4913      	ldr	r1, [pc, #76]	; (2d06c <at_host_init+0x178>)
   2d020:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2d022:	2200      	movs	r2, #0
   2d024:	4b12      	ldr	r3, [pc, #72]	; (2d070 <at_host_init+0x17c>)
   2d026:	4913      	ldr	r1, [pc, #76]	; (2d074 <at_host_init+0x180>)
   2d028:	601a      	str	r2, [r3, #0]
   2d02a:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   2d02e:	4812      	ldr	r0, [pc, #72]	; (2d078 <at_host_init+0x184>)
   2d030:	230a      	movs	r3, #10
   2d032:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2d036:	4911      	ldr	r1, [pc, #68]	; (2d07c <at_host_init+0x188>)
   2d038:	f013 fe86 	bl	40d48 <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   2d03c:	6828      	ldr	r0, [r5, #0]
   2d03e:	f01a fb00 	bl	47642 <z_impl_uart_irq_rx_enable>
	return err;
   2d042:	e773      	b.n	2cf2c <at_host_init+0x38>
   2d044:	2002d085 	.word	0x2002d085
   2d048:	0004764d 	.word	0x0004764d
   2d04c:	000497a8 	.word	0x000497a8
   2d050:	00049788 	.word	0x00049788
   2d054:	0004e0e7 	.word	0x0004e0e7
   2d058:	0004c426 	.word	0x0004c426
   2d05c:	20024d28 	.word	0x20024d28
   2d060:	0004e105 	.word	0x0004e105
   2d064:	0004e180 	.word	0x0004e180
   2d068:	0004e115 	.word	0x0004e115
   2d06c:	0002cd79 	.word	0x0002cd79
   2d070:	20024d1c 	.word	0x20024d1c
   2d074:	0002ccc5 	.word	0x0002ccc5
   2d078:	20021e18 	.word	0x20021e18
   2d07c:	2002eb40 	.word	0x2002eb40
   2d080:	0004e14b 	.word	0x0004e14b

0002d084 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2d084:	4b06      	ldr	r3, [pc, #24]	; (2d0a0 <is_valid_notification_char+0x1c>)
   2d086:	5cc3      	ldrb	r3, [r0, r3]
   2d088:	f003 0303 	and.w	r3, r3, #3
   2d08c:	2b02      	cmp	r3, #2
   2d08e:	bf08      	it	eq
   2d090:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2d092:	3841      	subs	r0, #65	; 0x41
   2d094:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2d096:	2819      	cmp	r0, #25
   2d098:	bf8c      	ite	hi
   2d09a:	2000      	movhi	r0, #0
   2d09c:	2001      	movls	r0, #1
   2d09e:	4770      	bx	lr
   2d0a0:	00052acf 	.word	0x00052acf

0002d0a4 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2d0a8:	6805      	ldr	r5, [r0, #0]
{
   2d0aa:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2d0ac:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d0ae:	782b      	ldrb	r3, [r5, #0]
{
   2d0b0:	4680      	mov	r8, r0
   2d0b2:	460f      	mov	r7, r1
   2d0b4:	4616      	mov	r6, r2
   2d0b6:	2b00      	cmp	r3, #0
   2d0b8:	f000 80c8 	beq.w	2d24c <at_parse_process_element+0x1a8>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2d0bc:	4b65      	ldr	r3, [pc, #404]	; (2d254 <at_parse_process_element+0x1b0>)
   2d0be:	781c      	ldrb	r4, [r3, #0]
   2d0c0:	2c06      	cmp	r4, #6
   2d0c2:	d110      	bne.n	2d0e6 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   2d0c4:	1c6b      	adds	r3, r5, #1
   2d0c6:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2d0c8:	9a00      	ldr	r2, [sp, #0]
   2d0ca:	7810      	ldrb	r0, [r2, #0]
   2d0cc:	f7ff ffda 	bl	2d084 <is_valid_notification_char>
   2d0d0:	b930      	cbnz	r0, 2d0e0 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2d0d2:	1b53      	subs	r3, r2, r5

		while (isxdigit((int)*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2d0d4:	462a      	mov	r2, r5
   2d0d6:	4639      	mov	r1, r7
   2d0d8:	4630      	mov	r0, r6
   2d0da:	f01a fb33 	bl	47744 <at_params_string_put>
   2d0de:	e01b      	b.n	2d118 <at_parse_process_element+0x74>
			tmpstr++;
   2d0e0:	3201      	adds	r2, #1
   2d0e2:	9200      	str	r2, [sp, #0]
   2d0e4:	e7f0      	b.n	2d0c8 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   2d0e6:	2c07      	cmp	r4, #7
   2d0e8:	d124      	bne.n	2d134 <at_parse_process_element+0x90>
		skip_command_prefix(&tmpstr);
   2d0ea:	4668      	mov	r0, sp
   2d0ec:	f01a faba 	bl	47664 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   2d0f0:	9a00      	ldr	r2, [sp, #0]
   2d0f2:	7810      	ldrb	r0, [r2, #0]
   2d0f4:	f7ff ffc6 	bl	2d084 <is_valid_notification_char>
   2d0f8:	b9a8      	cbnz	r0, 2d126 <at_parse_process_element+0x82>
		at_params_string_put(list, index, start_ptr,
   2d0fa:	1b53      	subs	r3, r2, r5
   2d0fc:	4639      	mov	r1, r7
   2d0fe:	462a      	mov	r2, r5
   2d100:	4630      	mov	r0, r6
   2d102:	f01a fb1f 	bl	47744 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2d106:	9b00      	ldr	r3, [sp, #0]
   2d108:	781a      	ldrb	r2, [r3, #0]
   2d10a:	2a3d      	cmp	r2, #61	; 0x3d
   2d10c:	d10e      	bne.n	2d12c <at_parse_process_element+0x88>
   2d10e:	785a      	ldrb	r2, [r3, #1]
   2d110:	2a3f      	cmp	r2, #63	; 0x3f
   2d112:	d101      	bne.n	2d118 <at_parse_process_element+0x74>
			tmpstr += 2;
   2d114:	3302      	adds	r3, #2
			tmpstr++;
   2d116:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2d118:	2000      	movs	r0, #0
	*str = tmpstr;
   2d11a:	9b00      	ldr	r3, [sp, #0]
   2d11c:	f8c8 3000 	str.w	r3, [r8]
}
   2d120:	b023      	add	sp, #140	; 0x8c
   2d122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   2d126:	3201      	adds	r2, #1
   2d128:	9200      	str	r2, [sp, #0]
   2d12a:	e7e1      	b.n	2d0f0 <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2d12c:	2a3f      	cmp	r2, #63	; 0x3f
   2d12e:	d1f3      	bne.n	2d118 <at_parse_process_element+0x74>
			tmpstr++;
   2d130:	3301      	adds	r3, #1
   2d132:	e7f0      	b.n	2d116 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2d134:	2c08      	cmp	r4, #8
   2d136:	d103      	bne.n	2d140 <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2d138:	4610      	mov	r0, r2
   2d13a:	f01a fada 	bl	476f2 <at_params_empty_put>
   2d13e:	e7eb      	b.n	2d118 <at_parse_process_element+0x74>
	} else if (state == STRING) {
   2d140:	2c02      	cmp	r4, #2
   2d142:	d111      	bne.n	2d168 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2d144:	9a00      	ldr	r2, [sp, #0]
   2d146:	7811      	ldrb	r1, [r2, #0]
   2d148:	4608      	mov	r0, r1
   2d14a:	f01a fa82 	bl	47652 <is_lfcr>
   2d14e:	b918      	cbnz	r0, 2d158 <at_parse_process_element+0xb4>
   2d150:	b111      	cbz	r1, 2d158 <at_parse_process_element+0xb4>
			tmpstr++;
   2d152:	3201      	adds	r2, #1
   2d154:	9200      	str	r2, [sp, #0]
   2d156:	e7f5      	b.n	2d144 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   2d158:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2d15a:	462a      	mov	r2, r5
   2d15c:	4639      	mov	r1, r7
   2d15e:	4630      	mov	r0, r6
   2d160:	f01a faf0 	bl	47744 <at_params_string_put>
		tmpstr++;
   2d164:	9b00      	ldr	r3, [sp, #0]
   2d166:	e7e3      	b.n	2d130 <at_parse_process_element+0x8c>
	} else if (state == QUOTED_STRING) {
   2d168:	2c03      	cmp	r4, #3
   2d16a:	d109      	bne.n	2d180 <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2d16c:	9b00      	ldr	r3, [sp, #0]
   2d16e:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2d170:	2a22      	cmp	r2, #34	; 0x22
   2d172:	d003      	beq.n	2d17c <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d174:	b112      	cbz	r2, 2d17c <at_parse_process_element+0xd8>
			tmpstr++;
   2d176:	3301      	adds	r3, #1
   2d178:	9300      	str	r3, [sp, #0]
   2d17a:	e7f7      	b.n	2d16c <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   2d17c:	1b5b      	subs	r3, r3, r5
   2d17e:	e7ec      	b.n	2d15a <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2d180:	2c01      	cmp	r4, #1
   2d182:	d13c      	bne.n	2d1fe <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2d184:	4628      	mov	r0, r5
   2d186:	220a      	movs	r2, #10
   2d188:	a901      	add	r1, sp, #4
   2d18a:	f015 fd13 	bl	42bb4 <strtoul>
		tmpstr = next;
   2d18e:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2d190:	4d31      	ldr	r5, [pc, #196]	; (2d258 <at_parse_process_element+0x1b4>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2d192:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2d194:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2d196:	9800      	ldr	r0, [sp, #0]
   2d198:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2d19a:	2b29      	cmp	r3, #41	; 0x29
   2d19c:	d028      	beq.n	2d1f0 <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d19e:	b33b      	cbz	r3, 2d1f0 <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2d1a0:	3b2c      	subs	r3, #44	; 0x2c
   2d1a2:	b2db      	uxtb	r3, r3
   2d1a4:	3001      	adds	r0, #1
   2d1a6:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2d1a8:	9000      	str	r0, [sp, #0]
   2d1aa:	d803      	bhi.n	2d1b4 <at_parse_process_element+0x110>
   2d1ac:	fa25 f303 	lsr.w	r3, r5, r3
   2d1b0:	07db      	lsls	r3, r3, #31
   2d1b2:	d408      	bmi.n	2d1c6 <at_parse_process_element+0x122>
				tmpstr++;
   2d1b4:	46a1      	mov	r9, r4
   2d1b6:	e004      	b.n	2d1c2 <at_parse_process_element+0x11e>
					tmpstr = next;
   2d1b8:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2d1ba:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2d1be:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2d1c0:	d015      	beq.n	2d1ee <at_parse_process_element+0x14a>
				tmpstr++;
   2d1c2:	464c      	mov	r4, r9
   2d1c4:	e7e7      	b.n	2d196 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2d1c6:	220a      	movs	r2, #10
   2d1c8:	a901      	add	r1, sp, #4
   2d1ca:	f015 fcf3 	bl	42bb4 <strtoul>
				tmparray[i++] =
   2d1ce:	ab22      	add	r3, sp, #136	; 0x88
   2d1d0:	f104 0901 	add.w	r9, r4, #1
   2d1d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2d1d8:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2d1dc:	9800      	ldr	r0, [sp, #0]
   2d1de:	f7f0 f841 	bl	1d264 <strlen>
   2d1e2:	4604      	mov	r4, r0
   2d1e4:	9801      	ldr	r0, [sp, #4]
   2d1e6:	f7f0 f83d 	bl	1d264 <strlen>
   2d1ea:	4284      	cmp	r4, r0
   2d1ec:	d1e4      	bne.n	2d1b8 <at_parse_process_element+0x114>
   2d1ee:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2d1f0:	00a3      	lsls	r3, r4, #2
   2d1f2:	aa02      	add	r2, sp, #8
   2d1f4:	4639      	mov	r1, r7
   2d1f6:	4630      	mov	r0, r6
   2d1f8:	f01a faca 	bl	47790 <at_params_array_put>
   2d1fc:	e7b2      	b.n	2d164 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   2d1fe:	2c04      	cmp	r4, #4
   2d200:	d115      	bne.n	2d22e <at_parse_process_element+0x18a>
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2d202:	220a      	movs	r2, #10
   2d204:	a902      	add	r1, sp, #8
   2d206:	4628      	mov	r0, r5
   2d208:	f015 fcd4 	bl	42bb4 <strtoul>
		tmpstr = next;
   2d20c:	9b02      	ldr	r3, [sp, #8]
		if (value <= USHRT_MAX) {
   2d20e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
		int value = (uint32_t)strtoul(tmpstr, &next, 10);
   2d212:	4602      	mov	r2, r0
		tmpstr = next;
   2d214:	9300      	str	r3, [sp, #0]
		if (value <= USHRT_MAX) {
   2d216:	da05      	bge.n	2d224 <at_parse_process_element+0x180>
			at_params_short_put(list, index, (uint16_t)value);
   2d218:	b282      	uxth	r2, r0
   2d21a:	4639      	mov	r1, r7
   2d21c:	4630      	mov	r0, r6
   2d21e:	f01a fa53 	bl	476c8 <at_params_short_put>
   2d222:	e779      	b.n	2d118 <at_parse_process_element+0x74>
			at_params_int_put(list, index, value);
   2d224:	4639      	mov	r1, r7
   2d226:	4630      	mov	r0, r6
   2d228:	f01a fa77 	bl	4771a <at_params_int_put>
   2d22c:	e774      	b.n	2d118 <at_parse_process_element+0x74>
	} else if (state == SMS_PDU) {
   2d22e:	2c05      	cmp	r4, #5
   2d230:	f47f af72 	bne.w	2d118 <at_parse_process_element+0x74>
		while (isxdigit((int)*tmpstr)) {
   2d234:	4909      	ldr	r1, [pc, #36]	; (2d25c <at_parse_process_element+0x1b8>)
   2d236:	9b00      	ldr	r3, [sp, #0]
   2d238:	781a      	ldrb	r2, [r3, #0]
   2d23a:	5c52      	ldrb	r2, [r2, r1]
   2d23c:	f012 0f44 	tst.w	r2, #68	; 0x44
   2d240:	d101      	bne.n	2d246 <at_parse_process_element+0x1a2>
		at_params_string_put(list, index, start_ptr,
   2d242:	1b5b      	subs	r3, r3, r5
   2d244:	e746      	b.n	2d0d4 <at_parse_process_element+0x30>
			tmpstr++;
   2d246:	3301      	adds	r3, #1
   2d248:	9300      	str	r3, [sp, #0]
   2d24a:	e7f4      	b.n	2d236 <at_parse_process_element+0x192>
		return -1;
   2d24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d250:	e766      	b.n	2d120 <at_parse_process_element+0x7c>
   2d252:	bf00      	nop
   2d254:	2002d086 	.word	0x2002d086
   2d258:	00024001 	.word	0x00024001
   2d25c:	00052acf 	.word	0x00052acf

0002d260 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2d260:	b510      	push	{r4, lr}
   2d262:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2d264:	f7ef fffe 	bl	1d264 <strlen>
   2d268:	2801      	cmp	r0, #1
   2d26a:	d922      	bls.n	2d2b2 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2d26c:	7821      	ldrb	r1, [r4, #0]
   2d26e:	4b13      	ldr	r3, [pc, #76]	; (2d2bc <is_command+0x5c>)
   2d270:	5cca      	ldrb	r2, [r1, r3]
   2d272:	f002 0203 	and.w	r2, r2, #3
   2d276:	2a02      	cmp	r2, #2
   2d278:	bf08      	it	eq
   2d27a:	3920      	subeq	r1, #32
   2d27c:	2941      	cmp	r1, #65	; 0x41
   2d27e:	461a      	mov	r2, r3
   2d280:	d117      	bne.n	2d2b2 <is_command+0x52>
   2d282:	7863      	ldrb	r3, [r4, #1]
   2d284:	5cd2      	ldrb	r2, [r2, r3]
   2d286:	f002 0203 	and.w	r2, r2, #3
   2d28a:	2a02      	cmp	r2, #2
   2d28c:	bf08      	it	eq
   2d28e:	3b20      	subeq	r3, #32
   2d290:	2b54      	cmp	r3, #84	; 0x54
   2d292:	d10e      	bne.n	2d2b2 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2d294:	78a2      	ldrb	r2, [r4, #2]
   2d296:	2a25      	cmp	r2, #37	; 0x25
   2d298:	d00d      	beq.n	2d2b6 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2d29a:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2d29e:	2b23      	cmp	r3, #35	; 0x23
   2d2a0:	d009      	beq.n	2d2b6 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2d2a2:	4610      	mov	r0, r2
   2d2a4:	f01a f9d5 	bl	47652 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2d2a8:	b910      	cbnz	r0, 2d2b0 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d2aa:	fab2 f082 	clz	r0, r2
   2d2ae:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2d2b0:	bd10      	pop	{r4, pc}
		return false;
   2d2b2:	2000      	movs	r0, #0
   2d2b4:	e7fc      	b.n	2d2b0 <is_command+0x50>
		return true;
   2d2b6:	2001      	movs	r0, #1
   2d2b8:	e7fa      	b.n	2d2b0 <is_command+0x50>
   2d2ba:	bf00      	nop
   2d2bc:	00052acf 	.word	0x00052acf

0002d2c0 <at_parse_detect_type>:
{
   2d2c0:	b570      	push	{r4, r5, r6, lr}
	const char *tmpstr = *str;
   2d2c2:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2d2c4:	2900      	cmp	r1, #0
{
   2d2c6:	4606      	mov	r6, r0
   2d2c8:	7822      	ldrb	r2, [r4, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2d2ca:	d141      	bne.n	2d350 <at_parse_detect_type+0x90>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2d2cc:	2a2b      	cmp	r2, #43	; 0x2b
   2d2ce:	4d29      	ldr	r5, [pc, #164]	; (2d374 <at_parse_detect_type+0xb4>)
   2d2d0:	d001      	beq.n	2d2d6 <at_parse_detect_type+0x16>
   2d2d2:	2a25      	cmp	r2, #37	; 0x25
   2d2d4:	d104      	bne.n	2d2e0 <at_parse_detect_type+0x20>
	state = new_state;
   2d2d6:	2306      	movs	r3, #6
   2d2d8:	702b      	strb	r3, [r5, #0]
	return 0;
   2d2da:	2000      	movs	r0, #0
	*str = tmpstr;
   2d2dc:	6034      	str	r4, [r6, #0]
}
   2d2de:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   2d2e0:	4620      	mov	r0, r4
   2d2e2:	f7ff ffbd 	bl	2d260 <is_command>
   2d2e6:	b388      	cbz	r0, 2d34c <at_parse_detect_type+0x8c>
	state = new_state;
   2d2e8:	2307      	movs	r3, #7
   2d2ea:	e7f5      	b.n	2d2d8 <at_parse_detect_type+0x18>
	if (chr == '"') {
   2d2ec:	2a22      	cmp	r2, #34	; 0x22
   2d2ee:	d006      	beq.n	2d2fe <at_parse_detect_type+0x3e>
	if (chr == '(') {
   2d2f0:	2a28      	cmp	r2, #40	; 0x28
   2d2f2:	d109      	bne.n	2d308 <at_parse_detect_type+0x48>
   2d2f4:	2201      	movs	r2, #1
   2d2f6:	4b1f      	ldr	r3, [pc, #124]	; (2d374 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2d2f8:	4414      	add	r4, r2
	state = new_state;
   2d2fa:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2d2fc:	e7ed      	b.n	2d2da <at_parse_detect_type+0x1a>
	state = new_state;
   2d2fe:	2203      	movs	r2, #3
   2d300:	4b1c      	ldr	r3, [pc, #112]	; (2d374 <at_parse_detect_type+0xb4>)
		tmpstr++;
   2d302:	3401      	adds	r4, #1
	state = new_state;
   2d304:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2d306:	e7e8      	b.n	2d2da <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2d308:	4610      	mov	r0, r2
   2d30a:	f01a f9a2 	bl	47652 <is_lfcr>
   2d30e:	b170      	cbz	r0, 2d32e <at_parse_detect_type+0x6e>
   2d310:	4918      	ldr	r1, [pc, #96]	; (2d374 <at_parse_detect_type+0xb4>)
   2d312:	7808      	ldrb	r0, [r1, #0]
   2d314:	2804      	cmp	r0, #4
   2d316:	d108      	bne.n	2d32a <at_parse_detect_type+0x6a>
		while (is_lfcr(*tmpstr)) {
   2d318:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2d31c:	f01a f999 	bl	47652 <is_lfcr>
   2d320:	2800      	cmp	r0, #0
   2d322:	d1f9      	bne.n	2d318 <at_parse_detect_type+0x58>
	state = new_state;
   2d324:	2305      	movs	r3, #5
   2d326:	700b      	strb	r3, [r1, #0]
   2d328:	e7d7      	b.n	2d2da <at_parse_detect_type+0x1a>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2d32a:	2808      	cmp	r0, #8
   2d32c:	d0d5      	beq.n	2d2da <at_parse_detect_type+0x1a>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2d32e:	3a2c      	subs	r2, #44	; 0x2c
   2d330:	b2d2      	uxtb	r2, r2
   2d332:	2a11      	cmp	r2, #17
   2d334:	d807      	bhi.n	2d346 <at_parse_detect_type+0x86>
   2d336:	4b10      	ldr	r3, [pc, #64]	; (2d378 <at_parse_detect_type+0xb8>)
   2d338:	fa23 f202 	lsr.w	r2, r3, r2
   2d33c:	07d3      	lsls	r3, r2, #31
   2d33e:	d502      	bpl.n	2d346 <at_parse_detect_type+0x86>
	state = new_state;
   2d340:	4b0c      	ldr	r3, [pc, #48]	; (2d374 <at_parse_detect_type+0xb4>)
   2d342:	2208      	movs	r2, #8
   2d344:	e013      	b.n	2d36e <at_parse_detect_type+0xae>
		return -1;
   2d346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d34a:	e7c8      	b.n	2d2de <at_parse_detect_type+0x1e>
	state = new_state;
   2d34c:	2302      	movs	r3, #2
   2d34e:	e7c3      	b.n	2d2d8 <at_parse_detect_type+0x18>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2d350:	dd03      	ble.n	2d35a <at_parse_detect_type+0x9a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2d352:	2a2b      	cmp	r2, #43	; 0x2b
   2d354:	d0f7      	beq.n	2d346 <at_parse_detect_type+0x86>
   2d356:	2a25      	cmp	r2, #37	; 0x25
   2d358:	d0f5      	beq.n	2d346 <at_parse_detect_type+0x86>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2d35a:	4b08      	ldr	r3, [pc, #32]	; (2d37c <at_parse_detect_type+0xbc>)
   2d35c:	5cd3      	ldrb	r3, [r2, r3]
   2d35e:	0759      	lsls	r1, r3, #29
   2d360:	d403      	bmi.n	2d36a <at_parse_detect_type+0xaa>
   2d362:	2a2d      	cmp	r2, #45	; 0x2d
   2d364:	d001      	beq.n	2d36a <at_parse_detect_type+0xaa>
   2d366:	2a2b      	cmp	r2, #43	; 0x2b
   2d368:	d1c0      	bne.n	2d2ec <at_parse_detect_type+0x2c>
	state = new_state;
   2d36a:	2204      	movs	r2, #4
   2d36c:	4b01      	ldr	r3, [pc, #4]	; (2d374 <at_parse_detect_type+0xb4>)
   2d36e:	701a      	strb	r2, [r3, #0]
   2d370:	e7b3      	b.n	2d2da <at_parse_detect_type+0x1a>
   2d372:	bf00      	nop
   2d374:	2002d086 	.word	0x2002d086
   2d378:	00024001 	.word	0x00024001
   2d37c:	00052acf 	.word	0x00052acf

0002d380 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2d380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d384:	4688      	mov	r8, r1
   2d386:	4616      	mov	r6, r2
   2d388:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2d38a:	4604      	mov	r4, r0
   2d38c:	2800      	cmp	r0, #0
   2d38e:	d07e      	beq.n	2d48e <at_parser_max_params_from_str+0x10e>
   2d390:	2a00      	cmp	r2, #0
   2d392:	d07c      	beq.n	2d48e <at_parser_max_params_from_str+0x10e>
   2d394:	6853      	ldr	r3, [r2, #4]
   2d396:	2b00      	cmp	r3, #0
   2d398:	d079      	beq.n	2d48e <at_parser_max_params_from_str+0x10e>
	state = IDLE;
   2d39a:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2d39c:	4610      	mov	r0, r2
   2d39e:	f000 f8eb 	bl	2d578 <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   2d3a2:	6832      	ldr	r2, [r6, #0]
	const char *str = *at_params_str;
   2d3a4:	9401      	str	r4, [sp, #4]
	max_params_count = MIN(max_params_count, list->param_count);
   2d3a6:	4297      	cmp	r7, r2
   2d3a8:	bf28      	it	cs
   2d3aa:	4617      	movcs	r7, r2
	int index = 0;
   2d3ac:	462c      	mov	r4, r5
	state = IDLE;
   2d3ae:	4b39      	ldr	r3, [pc, #228]	; (2d494 <at_parser_max_params_from_str+0x114>)
		if (isspace((int)*str)) {
   2d3b0:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2d498 <at_parser_max_params_from_str+0x118>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2d3b4:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2d49c <at_parser_max_params_from_str+0x11c>
	state = IDLE;
   2d3b8:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2d3ba:	9b01      	ldr	r3, [sp, #4]
   2d3bc:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d3be:	2a00      	cmp	r2, #0
   2d3c0:	d04b      	beq.n	2d45a <at_parser_max_params_from_str+0xda>
   2d3c2:	42a7      	cmp	r7, r4
   2d3c4:	d949      	bls.n	2d45a <at_parser_max_params_from_str+0xda>
		if (isspace((int)*str)) {
   2d3c6:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2d3ca:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   2d3cc:	0711      	lsls	r1, r2, #28
			str++;
   2d3ce:	bf48      	it	mi
   2d3d0:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   2d3d2:	4621      	mov	r1, r4
			str++;
   2d3d4:	bf48      	it	mi
   2d3d6:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2d3d8:	f7ff ff72 	bl	2d2c0 <at_parse_detect_type>
   2d3dc:	1c42      	adds	r2, r0, #1
   2d3de:	d03c      	beq.n	2d45a <at_parser_max_params_from_str+0xda>
		if (at_parse_process_element(&str, index, list) == -1) {
   2d3e0:	4632      	mov	r2, r6
   2d3e2:	4621      	mov	r1, r4
   2d3e4:	a801      	add	r0, sp, #4
   2d3e6:	f7ff fe5d 	bl	2d0a4 <at_parse_process_element>
   2d3ea:	1c43      	adds	r3, r0, #1
   2d3ec:	d035      	beq.n	2d45a <at_parser_max_params_from_str+0xda>
		if (is_separator(*str)) {
   2d3ee:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2d3f0:	781a      	ldrb	r2, [r3, #0]
   2d3f2:	3a2c      	subs	r2, #44	; 0x2c
   2d3f4:	b2d2      	uxtb	r2, r2
   2d3f6:	2a11      	cmp	r2, #17
   2d3f8:	d81a      	bhi.n	2d430 <at_parser_max_params_from_str+0xb0>
   2d3fa:	fa2a f202 	lsr.w	r2, sl, r2
   2d3fe:	07d1      	lsls	r1, r2, #31
   2d400:	d516      	bpl.n	2d430 <at_parser_max_params_from_str+0xb0>
			if (is_lfcr(*(str + 1))) {
   2d402:	7858      	ldrb	r0, [r3, #1]
   2d404:	f01a f925 	bl	47652 <is_lfcr>
   2d408:	b178      	cbz	r0, 2d42a <at_parser_max_params_from_str+0xaa>
				index++;
   2d40a:	3401      	adds	r4, #1
				if (index == max_params) {
   2d40c:	42bc      	cmp	r4, r7
   2d40e:	d039      	beq.n	2d484 <at_parser_max_params_from_str+0x104>
				if (at_parse_detect_type(&str, index) == -1) {
   2d410:	4621      	mov	r1, r4
   2d412:	a801      	add	r0, sp, #4
   2d414:	f7ff ff54 	bl	2d2c0 <at_parse_detect_type>
   2d418:	1c42      	adds	r2, r0, #1
   2d41a:	d01e      	beq.n	2d45a <at_parser_max_params_from_str+0xda>
				if (at_parse_process_element(&str, index,
   2d41c:	4632      	mov	r2, r6
   2d41e:	4621      	mov	r1, r4
   2d420:	a801      	add	r0, sp, #4
   2d422:	f7ff fe3f 	bl	2d0a4 <at_parse_process_element>
   2d426:	1c43      	adds	r3, r0, #1
   2d428:	d017      	beq.n	2d45a <at_parser_max_params_from_str+0xda>
			str++;
   2d42a:	9b01      	ldr	r3, [sp, #4]
   2d42c:	3301      	adds	r3, #1
   2d42e:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2d430:	9a01      	ldr	r2, [sp, #4]
   2d432:	7810      	ldrb	r0, [r2, #0]
   2d434:	f01a f90d 	bl	47652 <is_lfcr>
   2d438:	b1f8      	cbz	r0, 2d47a <at_parser_max_params_from_str+0xfa>
   2d43a:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2d43c:	7811      	ldrb	r1, [r2, #0]
   2d43e:	4693      	mov	fp, r2
   2d440:	4608      	mov	r0, r1
   2d442:	3201      	adds	r2, #1
   2d444:	f01a f905 	bl	47652 <is_lfcr>
   2d448:	2800      	cmp	r0, #0
   2d44a:	d1f7      	bne.n	2d43c <at_parser_max_params_from_str+0xbc>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d44c:	b119      	cbz	r1, 2d456 <at_parser_max_params_from_str+0xd6>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2d44e:	292b      	cmp	r1, #43	; 0x2b
   2d450:	d001      	beq.n	2d456 <at_parser_max_params_from_str+0xd6>
   2d452:	2925      	cmp	r1, #37	; 0x25
   2d454:	d111      	bne.n	2d47a <at_parser_max_params_from_str+0xfa>
				str += i;
   2d456:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2d45a:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2d45c:	b9a5      	cbnz	r5, 2d488 <at_parser_max_params_from_str+0x108>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2d45e:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2d460:	2a00      	cmp	r2, #0
   2d462:	bf0c      	ite	eq
   2d464:	2000      	moveq	r0, #0
   2d466:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2d46a:	f1b8 0f00 	cmp.w	r8, #0
   2d46e:	d001      	beq.n	2d474 <at_parser_max_params_from_str+0xf4>
		*next_param_str = (char *)at_params_str;
   2d470:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   2d474:	b003      	add	sp, #12
   2d476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2d47a:	3401      	adds	r4, #1
			oversized = true;
   2d47c:	42bc      	cmp	r4, r7
   2d47e:	bf08      	it	eq
   2d480:	2501      	moveq	r5, #1
   2d482:	e79a      	b.n	2d3ba <at_parser_max_params_from_str+0x3a>
					oversized = true;
   2d484:	4605      	mov	r5, r0
   2d486:	e7e8      	b.n	2d45a <at_parser_max_params_from_str+0xda>
		return -E2BIG;
   2d488:	f06f 0006 	mvn.w	r0, #6
   2d48c:	e7ed      	b.n	2d46a <at_parser_max_params_from_str+0xea>
		return -EINVAL;
   2d48e:	f06f 0015 	mvn.w	r0, #21
   2d492:	e7ef      	b.n	2d474 <at_parser_max_params_from_str+0xf4>
   2d494:	2002d086 	.word	0x2002d086
   2d498:	00052acf 	.word	0x00052acf
   2d49c:	00024001 	.word	0x00024001

0002d4a0 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2d4a0:	b538      	push	{r3, r4, r5, lr}
   2d4a2:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2d4a4:	4605      	mov	r5, r0
   2d4a6:	b960      	cbnz	r0, 2d4c2 <at_params_get+0x22>
   2d4a8:	490a      	ldr	r1, [pc, #40]	; (2d4d4 <at_params_get+0x34>)
   2d4aa:	232b      	movs	r3, #43	; 0x2b
   2d4ac:	4a0a      	ldr	r2, [pc, #40]	; (2d4d8 <at_params_get+0x38>)
   2d4ae:	480b      	ldr	r0, [pc, #44]	; (2d4dc <at_params_get+0x3c>)
   2d4b0:	f016 ff0e 	bl	442d0 <printk>
   2d4b4:	480a      	ldr	r0, [pc, #40]	; (2d4e0 <at_params_get+0x40>)
   2d4b6:	f016 ff0b 	bl	442d0 <printk>
   2d4ba:	212b      	movs	r1, #43	; 0x2b
   2d4bc:	4806      	ldr	r0, [pc, #24]	; (2d4d8 <at_params_get+0x38>)
   2d4be:	f017 f921 	bl	44704 <assert_post_action>

	if (index >= list->param_count) {
   2d4c2:	682b      	ldr	r3, [r5, #0]
   2d4c4:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2d4c6:	bf85      	ittet	hi
   2d4c8:	230c      	movhi	r3, #12
   2d4ca:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   2d4cc:	2000      	movls	r0, #0
	return &param[index];
   2d4ce:	fb03 0004 	mlahi	r0, r3, r4, r0
}
   2d4d2:	bd38      	pop	{r3, r4, r5, pc}
   2d4d4:	0004e29d 	.word	0x0004e29d
   2d4d8:	0004e26f 	.word	0x0004e26f
   2d4dc:	0004b33b 	.word	0x0004b33b
   2d4e0:	0004e2b1 	.word	0x0004e2b1

0002d4e4 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2d4e4:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2d4e6:	4604      	mov	r4, r0
   2d4e8:	b960      	cbnz	r0, 2d504 <at_param_size+0x20>
   2d4ea:	490e      	ldr	r1, [pc, #56]	; (2d524 <at_param_size+0x40>)
   2d4ec:	2339      	movs	r3, #57	; 0x39
   2d4ee:	4a0e      	ldr	r2, [pc, #56]	; (2d528 <at_param_size+0x44>)
   2d4f0:	480e      	ldr	r0, [pc, #56]	; (2d52c <at_param_size+0x48>)
   2d4f2:	f016 feed 	bl	442d0 <printk>
   2d4f6:	480e      	ldr	r0, [pc, #56]	; (2d530 <at_param_size+0x4c>)
   2d4f8:	f016 feea 	bl	442d0 <printk>
   2d4fc:	2139      	movs	r1, #57	; 0x39
   2d4fe:	480a      	ldr	r0, [pc, #40]	; (2d528 <at_param_size+0x44>)
   2d500:	f017 f900 	bl	44704 <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   2d504:	7823      	ldrb	r3, [r4, #0]
   2d506:	2b01      	cmp	r3, #1
   2d508:	d006      	beq.n	2d518 <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2d50a:	2b02      	cmp	r3, #2
   2d50c:	d006      	beq.n	2d51c <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2d50e:	3b03      	subs	r3, #3
   2d510:	2b01      	cmp	r3, #1
   2d512:	d805      	bhi.n	2d520 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2d514:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2d516:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   2d518:	2002      	movs	r0, #2
   2d51a:	e7fc      	b.n	2d516 <at_param_size+0x32>
		return sizeof(uint32_t);
   2d51c:	2004      	movs	r0, #4
   2d51e:	e7fa      	b.n	2d516 <at_param_size+0x32>
	return 0;
   2d520:	2000      	movs	r0, #0
   2d522:	e7f8      	b.n	2d516 <at_param_size+0x32>
   2d524:	0004e23e 	.word	0x0004e23e
   2d528:	0004e26f 	.word	0x0004e26f
   2d52c:	0004b33b 	.word	0x0004b33b
   2d530:	0004e253 	.word	0x0004e253

0002d534 <at_param_clear>:
{
   2d534:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2d536:	4604      	mov	r4, r0
   2d538:	b960      	cbnz	r0, 2d554 <at_param_clear+0x20>
   2d53a:	490b      	ldr	r1, [pc, #44]	; (2d568 <at_param_clear+0x34>)
   2d53c:	231d      	movs	r3, #29
   2d53e:	4a0b      	ldr	r2, [pc, #44]	; (2d56c <at_param_clear+0x38>)
   2d540:	480b      	ldr	r0, [pc, #44]	; (2d570 <at_param_clear+0x3c>)
   2d542:	f016 fec5 	bl	442d0 <printk>
   2d546:	480b      	ldr	r0, [pc, #44]	; (2d574 <at_param_clear+0x40>)
   2d548:	f016 fec2 	bl	442d0 <printk>
   2d54c:	211d      	movs	r1, #29
   2d54e:	4807      	ldr	r0, [pc, #28]	; (2d56c <at_param_clear+0x38>)
   2d550:	f017 f8d8 	bl	44704 <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2d554:	7823      	ldrb	r3, [r4, #0]
   2d556:	3b03      	subs	r3, #3
   2d558:	2b01      	cmp	r3, #1
   2d55a:	d802      	bhi.n	2d562 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2d55c:	68a0      	ldr	r0, [r4, #8]
   2d55e:	f01a fdd8 	bl	48112 <k_free>
	param->value.int_val = 0;
   2d562:	2300      	movs	r3, #0
   2d564:	60a3      	str	r3, [r4, #8]
}
   2d566:	bd10      	pop	{r4, pc}
   2d568:	0004e23e 	.word	0x0004e23e
   2d56c:	0004e26f 	.word	0x0004e26f
   2d570:	0004b33b 	.word	0x0004b33b
   2d574:	0004e253 	.word	0x0004e253

0002d578 <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2d578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   2d57c:	4605      	mov	r5, r0
   2d57e:	b158      	cbz	r0, 2d598 <at_params_list_clear+0x20>
   2d580:	6843      	ldr	r3, [r0, #4]
   2d582:	b14b      	cbz	r3, 2d598 <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2d584:	2400      	movs	r4, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2d586:	f8df 8054 	ldr.w	r8, [pc, #84]	; 2d5dc <at_params_list_clear+0x64>
   2d58a:	f8df a054 	ldr.w	sl, [pc, #84]	; 2d5e0 <at_params_list_clear+0x68>
   2d58e:	f8df b054 	ldr.w	fp, [pc, #84]	; 2d5e4 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2d592:	682b      	ldr	r3, [r5, #0]
   2d594:	429c      	cmp	r4, r3
   2d596:	d301      	bcc.n	2d59c <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2d598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   2d59c:	270c      	movs	r7, #12
   2d59e:	4367      	muls	r7, r4
   2d5a0:	f8d5 9004 	ldr.w	r9, [r5, #4]
   2d5a4:	eb09 0607 	add.w	r6, r9, r7
   2d5a8:	4630      	mov	r0, r6
   2d5aa:	f7ff ffc3 	bl	2d534 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2d5ae:	b966      	cbnz	r6, 2d5ca <at_params_list_clear+0x52>
   2d5b0:	4651      	mov	r1, sl
   2d5b2:	2314      	movs	r3, #20
   2d5b4:	4642      	mov	r2, r8
   2d5b6:	4658      	mov	r0, fp
   2d5b8:	f016 fe8a 	bl	442d0 <printk>
   2d5bc:	4806      	ldr	r0, [pc, #24]	; (2d5d8 <at_params_list_clear+0x60>)
   2d5be:	f016 fe87 	bl	442d0 <printk>
   2d5c2:	2114      	movs	r1, #20
   2d5c4:	4640      	mov	r0, r8
   2d5c6:	f017 f89d 	bl	44704 <assert_post_action>
   2d5ca:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   2d5cc:	3401      	adds	r4, #1
   2d5ce:	f849 3007 	str.w	r3, [r9, r7]
   2d5d2:	6073      	str	r3, [r6, #4]
   2d5d4:	60b3      	str	r3, [r6, #8]
   2d5d6:	e7dc      	b.n	2d592 <at_params_list_clear+0x1a>
   2d5d8:	0004e253 	.word	0x0004e253
   2d5dc:	0004e26f 	.word	0x0004e26f
   2d5e0:	0004e23e 	.word	0x0004e23e
   2d5e4:	0004b33b 	.word	0x0004b33b

0002d5e8 <parse_psm_cfg>:
	char timer_str[9] = {0};
   2d5e8:	2300      	movs	r3, #0
{
   2d5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d5ee:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   2d5f0:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2d5f4:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   2d5f8:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2d5fa:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2d5fc:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   2d5fe:	9302      	str	r3, [sp, #8]
{
   2d600:	4615      	mov	r5, r2
	err = at_params_string_get(at_params,
   2d602:	446b      	add	r3, sp
   2d604:	aa03      	add	r2, sp, #12
   2d606:	bf14      	ite	ne
   2d608:	2108      	movne	r1, #8
   2d60a:	2109      	moveq	r1, #9
{
   2d60c:	4606      	mov	r6, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2d60e:	bf14      	ite	ne
   2d610:	2707      	movne	r7, #7
   2d612:	2708      	moveq	r7, #8
	err = at_params_string_get(at_params,
   2d614:	f01a f90f 	bl	47836 <at_params_string_get>
	if (err) {
   2d618:	4604      	mov	r4, r0
   2d61a:	b190      	cbz	r0, 2d642 <parse_psm_cfg+0x5a>
		LOG_ERR("Could not get TAU, error: %d", err);
   2d61c:	2301      	movs	r3, #1
   2d61e:	f04f 0000 	mov.w	r0, #0
   2d622:	4a39      	ldr	r2, [pc, #228]	; (2d708 <parse_psm_cfg+0x120>)
   2d624:	f363 0007 	bfi	r0, r3, #0, #8
   2d628:	4b38      	ldr	r3, [pc, #224]	; (2d70c <parse_psm_cfg+0x124>)
   2d62a:	4939      	ldr	r1, [pc, #228]	; (2d710 <parse_psm_cfg+0x128>)
   2d62c:	1a9b      	subs	r3, r3, r2
   2d62e:	08db      	lsrs	r3, r3, #3
   2d630:	f363 108f 	bfi	r0, r3, #6, #10
   2d634:	4622      	mov	r2, r4
   2d636:	f017 f876 	bl	44726 <log_string_sync>
}
   2d63a:	4620      	mov	r0, r4
   2d63c:	b006      	add	sp, #24
   2d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2d642:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d644:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2d646:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d64a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2d64c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2d64e:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2d650:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d654:	f015 faae 	bl	42bb4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2d658:	2807      	cmp	r0, #7
   2d65a:	d910      	bls.n	2d67e <parse_psm_cfg+0x96>
		LOG_ERR("Unable to parse periodic TAU string");
   2d65c:	2301      	movs	r3, #1
   2d65e:	f04f 0000 	mov.w	r0, #0
   2d662:	4a29      	ldr	r2, [pc, #164]	; (2d708 <parse_psm_cfg+0x120>)
   2d664:	f363 0007 	bfi	r0, r3, #0, #8
   2d668:	4b28      	ldr	r3, [pc, #160]	; (2d70c <parse_psm_cfg+0x124>)
   2d66a:	492a      	ldr	r1, [pc, #168]	; (2d714 <parse_psm_cfg+0x12c>)
   2d66c:	1a9b      	subs	r3, r3, r2
   2d66e:	08db      	lsrs	r3, r3, #3
   2d670:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Unable to parse active time string");
   2d674:	f017 f857 	bl	44726 <log_string_sync>
		return err;
   2d678:	f06f 0415 	mvn.w	r4, #21
   2d67c:	e7dd      	b.n	2d63a <parse_psm_cfg+0x52>
	timer_unit = t3412_lookup[lut_idx];
   2d67e:	4b26      	ldr	r3, [pc, #152]	; (2d718 <parse_psm_cfg+0x130>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2d680:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   2d682:	f853 8020 	ldr.w	r8, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2d686:	4621      	mov	r1, r4
   2d688:	f10d 000f 	add.w	r0, sp, #15
   2d68c:	f015 fa92 	bl	42bb4 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2d690:	f1b8 0f00 	cmp.w	r8, #0
   2d694:	d025      	beq.n	2d6e2 <parse_psm_cfg+0xfa>
   2d696:	fb00 f008 	mul.w	r0, r0, r8
   2d69a:	6028      	str	r0, [r5, #0]
	err = at_params_string_get(at_params,
   2d69c:	ab02      	add	r3, sp, #8
   2d69e:	aa03      	add	r2, sp, #12
   2d6a0:	4639      	mov	r1, r7
   2d6a2:	4630      	mov	r0, r6
   2d6a4:	f01a f8c7 	bl	47836 <at_params_string_get>
	if (err) {
   2d6a8:	4604      	mov	r4, r0
   2d6aa:	2800      	cmp	r0, #0
   2d6ac:	d1b6      	bne.n	2d61c <parse_psm_cfg+0x34>
	memcpy(unit_str, timer_str, unit_str_len);
   2d6ae:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d6b0:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2d6b2:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d6b6:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2d6b8:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2d6ba:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2d6bc:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2d6c0:	f015 fa78 	bl	42bb4 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2d6c4:	2807      	cmp	r0, #7
   2d6c6:	d90f      	bls.n	2d6e8 <parse_psm_cfg+0x100>
		LOG_ERR("Unable to parse active time string");
   2d6c8:	2301      	movs	r3, #1
   2d6ca:	f04f 0000 	mov.w	r0, #0
   2d6ce:	4a0e      	ldr	r2, [pc, #56]	; (2d708 <parse_psm_cfg+0x120>)
   2d6d0:	f363 0007 	bfi	r0, r3, #0, #8
   2d6d4:	4b0d      	ldr	r3, [pc, #52]	; (2d70c <parse_psm_cfg+0x124>)
   2d6d6:	4911      	ldr	r1, [pc, #68]	; (2d71c <parse_psm_cfg+0x134>)
   2d6d8:	1a9b      	subs	r3, r3, r2
   2d6da:	08db      	lsrs	r3, r3, #3
   2d6dc:	f363 108f 	bfi	r0, r3, #6, #10
   2d6e0:	e7c8      	b.n	2d674 <parse_psm_cfg+0x8c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2d6e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d6e6:	e7d8      	b.n	2d69a <parse_psm_cfg+0xb2>
	timer_unit = t3324_lookup[lut_idx];
   2d6e8:	4b0d      	ldr	r3, [pc, #52]	; (2d720 <parse_psm_cfg+0x138>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2d6ea:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   2d6ec:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2d6f0:	4621      	mov	r1, r4
   2d6f2:	f10d 000f 	add.w	r0, sp, #15
   2d6f6:	f015 fa5d 	bl	42bb4 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2d6fa:	b116      	cbz	r6, 2d702 <parse_psm_cfg+0x11a>
   2d6fc:	4370      	muls	r0, r6
   2d6fe:	6068      	str	r0, [r5, #4]
	return 0;
   2d700:	e79b      	b.n	2d63a <parse_psm_cfg+0x52>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2d702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d706:	e7fa      	b.n	2d6fe <parse_psm_cfg+0x116>
   2d708:	00049788 	.word	0x00049788
   2d70c:	00049838 	.word	0x00049838
   2d710:	0004e8ab 	.word	0x0004e8ab
   2d714:	0004e8c8 	.word	0x0004e8c8
   2d718:	0004a04c 	.word	0x0004a04c
   2d71c:	0004e8ec 	.word	0x0004e8ec
   2d720:	0004a02c 	.word	0x0004a02c

0002d724 <lte_lc_register_handler>:
{
   2d724:	b538      	push	{r3, r4, r5, lr}
	if (handler == NULL) {
   2d726:	4604      	mov	r4, r0
   2d728:	4d13      	ldr	r5, [pc, #76]	; (2d778 <lte_lc_register_handler+0x54>)
   2d72a:	b988      	cbnz	r0, 2d750 <lte_lc_register_handler+0x2c>
		evt_handler = NULL;
   2d72c:	6028      	str	r0, [r5, #0]
		LOG_INF("Previously registered handler (%p) deregistered",
   2d72e:	2303      	movs	r3, #3
   2d730:	f04f 0000 	mov.w	r0, #0
   2d734:	4a11      	ldr	r2, [pc, #68]	; (2d77c <lte_lc_register_handler+0x58>)
   2d736:	f363 0007 	bfi	r0, r3, #0, #8
   2d73a:	4b11      	ldr	r3, [pc, #68]	; (2d780 <lte_lc_register_handler+0x5c>)
   2d73c:	4911      	ldr	r1, [pc, #68]	; (2d784 <lte_lc_register_handler+0x60>)
   2d73e:	1a9b      	subs	r3, r3, r2
   2d740:	08db      	lsrs	r3, r3, #3
   2d742:	f363 108f 	bfi	r0, r3, #6, #10
   2d746:	4622      	mov	r2, r4
}
   2d748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("Previously registered handler (%p) deregistered",
   2d74c:	f016 bfeb 	b.w	44726 <log_string_sync>
	if (evt_handler) {
   2d750:	682a      	ldr	r2, [r5, #0]
   2d752:	b172      	cbz	r2, 2d772 <lte_lc_register_handler+0x4e>
		LOG_WRN("Replacing previously registered handler (%p) with %p",
   2d754:	2302      	movs	r3, #2
   2d756:	f04f 0000 	mov.w	r0, #0
   2d75a:	4908      	ldr	r1, [pc, #32]	; (2d77c <lte_lc_register_handler+0x58>)
   2d75c:	f363 0007 	bfi	r0, r3, #0, #8
   2d760:	4b07      	ldr	r3, [pc, #28]	; (2d780 <lte_lc_register_handler+0x5c>)
   2d762:	1a5b      	subs	r3, r3, r1
   2d764:	08db      	lsrs	r3, r3, #3
   2d766:	f363 108f 	bfi	r0, r3, #6, #10
   2d76a:	4907      	ldr	r1, [pc, #28]	; (2d788 <lte_lc_register_handler+0x64>)
   2d76c:	4623      	mov	r3, r4
   2d76e:	f016 ffda 	bl	44726 <log_string_sync>
	evt_handler = handler;
   2d772:	602c      	str	r4, [r5, #0]
}
   2d774:	bd38      	pop	{r3, r4, r5, pc}
   2d776:	bf00      	nop
   2d778:	20024d2c 	.word	0x20024d2c
   2d77c:	00049788 	.word	0x00049788
   2d780:	00049838 	.word	0x00049838
   2d784:	0004e6c0 	.word	0x0004e6c0
   2d788:	0004e6f0 	.word	0x0004e6f0

0002d78c <lte_lc_offline>:
{
   2d78c:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2d78e:	2300      	movs	r3, #0
   2d790:	4804      	ldr	r0, [pc, #16]	; (2d7a4 <lte_lc_offline+0x18>)
   2d792:	461a      	mov	r2, r3
   2d794:	4619      	mov	r1, r3
   2d796:	f7ff f8b1 	bl	2c8fc <at_cmd_write>
   2d79a:	2800      	cmp	r0, #0
}
   2d79c:	bf18      	it	ne
   2d79e:	f06f 0004 	mvnne.w	r0, #4
   2d7a2:	bd08      	pop	{r3, pc}
   2d7a4:	0004e8a1 	.word	0x0004e8a1

0002d7a8 <lte_lc_power_off>:
{
   2d7a8:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2d7aa:	2300      	movs	r3, #0
   2d7ac:	4804      	ldr	r0, [pc, #16]	; (2d7c0 <lte_lc_power_off+0x18>)
   2d7ae:	461a      	mov	r2, r3
   2d7b0:	4619      	mov	r1, r3
   2d7b2:	f7ff f8a3 	bl	2c8fc <at_cmd_write>
   2d7b6:	2800      	cmp	r0, #0
}
   2d7b8:	bf18      	it	ne
   2d7ba:	f06f 0004 	mvnne.w	r0, #4
   2d7be:	bd08      	pop	{r3, pc}
   2d7c0:	0004e90f 	.word	0x0004e90f

0002d7c4 <lte_lc_deinit>:
{
   2d7c4:	b508      	push	{r3, lr}
	if (is_initialized) {
   2d7c6:	4b06      	ldr	r3, [pc, #24]	; (2d7e0 <lte_lc_deinit+0x1c>)
   2d7c8:	7818      	ldrb	r0, [r3, #0]
   2d7ca:	b140      	cbz	r0, 2d7de <lte_lc_deinit+0x1a>
		is_initialized = false;
   2d7cc:	2000      	movs	r0, #0
		at_notif_deregister_handler(NULL, at_handler);
   2d7ce:	4905      	ldr	r1, [pc, #20]	; (2d7e4 <lte_lc_deinit+0x20>)
		is_initialized = false;
   2d7d0:	7018      	strb	r0, [r3, #0]
		at_notif_deregister_handler(NULL, at_handler);
   2d7d2:	f7ff fa11 	bl	2cbf8 <at_notif_deregister_handler>
}
   2d7d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return lte_lc_power_off();
   2d7da:	f7ff bfe5 	b.w	2d7a8 <lte_lc_power_off>
}
   2d7de:	bd08      	pop	{r3, pc}
   2d7e0:	2002d087 	.word	0x2002d087
   2d7e4:	0001db51 	.word	0x0001db51

0002d7e8 <lte_lc_normal>:
{
   2d7e8:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2d7ea:	2300      	movs	r3, #0
   2d7ec:	4804      	ldr	r0, [pc, #16]	; (2d800 <lte_lc_normal+0x18>)
   2d7ee:	461a      	mov	r2, r3
   2d7f0:	4619      	mov	r1, r3
   2d7f2:	f7ff f883 	bl	2c8fc <at_cmd_write>
   2d7f6:	2800      	cmp	r0, #0
}
   2d7f8:	bf18      	it	ne
   2d7fa:	f06f 0004 	mvnne.w	r0, #4
   2d7fe:	bd08      	pop	{r3, pc}
   2d800:	0004e897 	.word	0x0004e897

0002d804 <lte_lc_psm_req>:
{
   2d804:	b500      	push	{lr}
	if (enable) {
   2d806:	4603      	mov	r3, r0
{
   2d808:	b08d      	sub	sp, #52	; 0x34
	if (enable) {
   2d80a:	b1a0      	cbz	r0, 2d836 <lte_lc_psm_req+0x32>
		snprintf(psm_req, sizeof(psm_req),
   2d80c:	4b0c      	ldr	r3, [pc, #48]	; (2d840 <lte_lc_psm_req+0x3c>)
   2d80e:	4a0d      	ldr	r2, [pc, #52]	; (2d844 <lte_lc_psm_req+0x40>)
   2d810:	9300      	str	r3, [sp, #0]
   2d812:	2128      	movs	r1, #40	; 0x28
   2d814:	4b0c      	ldr	r3, [pc, #48]	; (2d848 <lte_lc_psm_req+0x44>)
   2d816:	a802      	add	r0, sp, #8
   2d818:	f015 f86c 	bl	428f4 <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   2d81c:	2300      	movs	r3, #0
   2d81e:	461a      	mov	r2, r3
   2d820:	4619      	mov	r1, r3
   2d822:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2d824:	f7ff f86a 	bl	2c8fc <at_cmd_write>
		return -EIO;
   2d828:	2800      	cmp	r0, #0
}
   2d82a:	bf18      	it	ne
   2d82c:	f06f 0004 	mvnne.w	r0, #4
   2d830:	b00d      	add	sp, #52	; 0x34
   2d832:	f85d fb04 	ldr.w	pc, [sp], #4
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2d836:	4602      	mov	r2, r0
   2d838:	4601      	mov	r1, r0
   2d83a:	4804      	ldr	r0, [pc, #16]	; (2d84c <lte_lc_psm_req+0x48>)
   2d83c:	e7f2      	b.n	2d824 <lte_lc_psm_req+0x20>
   2d83e:	bf00      	nop
   2d840:	20020ab6 	.word	0x20020ab6
   2d844:	0004e6a9 	.word	0x0004e6a9
   2d848:	20020abf 	.word	0x20020abf
   2d84c:	0004e919 	.word	0x0004e919

0002d850 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   2d850:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   2d852:	4605      	mov	r5, r0
{
   2d854:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   2d856:	2800      	cmp	r0, #0
   2d858:	d04b      	beq.n	2d8f2 <lte_lc_system_mode_set+0xa2>
   2d85a:	2805      	cmp	r0, #5
   2d85c:	d912      	bls.n	2d884 <lte_lc_system_mode_set+0x34>
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   2d85e:	2301      	movs	r3, #1
   2d860:	f04f 0000 	mov.w	r0, #0
   2d864:	4a24      	ldr	r2, [pc, #144]	; (2d8f8 <lte_lc_system_mode_set+0xa8>)
   2d866:	f363 0007 	bfi	r0, r3, #0, #8
   2d86a:	4b24      	ldr	r3, [pc, #144]	; (2d8fc <lte_lc_system_mode_set+0xac>)
   2d86c:	4924      	ldr	r1, [pc, #144]	; (2d900 <lte_lc_system_mode_set+0xb0>)
   2d86e:	1a9b      	subs	r3, r3, r2
   2d870:	08db      	lsrs	r3, r3, #3
   2d872:	f363 108f 	bfi	r0, r3, #6, #10
   2d876:	f016 ff56 	bl	44726 <log_string_sync>
		return -EINVAL;
   2d87a:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   2d87e:	4620      	mov	r0, r4
   2d880:	b00f      	add	sp, #60	; 0x3c
   2d882:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   2d884:	4b1f      	ldr	r3, [pc, #124]	; (2d904 <lte_lc_system_mode_set+0xb4>)
   2d886:	4a20      	ldr	r2, [pc, #128]	; (2d908 <lte_lc_system_mode_set+0xb8>)
   2d888:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2d88c:	2132      	movs	r1, #50	; 0x32
   2d88e:	a801      	add	r0, sp, #4
   2d890:	f016 fd2b 	bl	442ea <snprintk>
	if (len < 0) {
   2d894:	2800      	cmp	r0, #0
   2d896:	da10      	bge.n	2d8ba <lte_lc_system_mode_set+0x6a>
		LOG_ERR("Could not construct system mode command");
   2d898:	2301      	movs	r3, #1
   2d89a:	f04f 0000 	mov.w	r0, #0
   2d89e:	4a16      	ldr	r2, [pc, #88]	; (2d8f8 <lte_lc_system_mode_set+0xa8>)
   2d8a0:	f363 0007 	bfi	r0, r3, #0, #8
   2d8a4:	4b15      	ldr	r3, [pc, #84]	; (2d8fc <lte_lc_system_mode_set+0xac>)
   2d8a6:	4919      	ldr	r1, [pc, #100]	; (2d90c <lte_lc_system_mode_set+0xbc>)
   2d8a8:	1a9b      	subs	r3, r3, r2
   2d8aa:	08db      	lsrs	r3, r3, #3
   2d8ac:	f363 108f 	bfi	r0, r3, #6, #10
   2d8b0:	f016 ff39 	bl	44726 <log_string_sync>
		return -EFAULT;
   2d8b4:	f06f 040d 	mvn.w	r4, #13
   2d8b8:	e7e1      	b.n	2d87e <lte_lc_system_mode_set+0x2e>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   2d8ba:	2300      	movs	r3, #0
   2d8bc:	a801      	add	r0, sp, #4
   2d8be:	461a      	mov	r2, r3
   2d8c0:	4619      	mov	r1, r3
   2d8c2:	f7ff f81b 	bl	2c8fc <at_cmd_write>
	if (err) {
   2d8c6:	4604      	mov	r4, r0
   2d8c8:	b170      	cbz	r0, 2d8e8 <lte_lc_system_mode_set+0x98>
		LOG_ERR("Could not send AT command, error: %d", err);
   2d8ca:	2301      	movs	r3, #1
   2d8cc:	f04f 0000 	mov.w	r0, #0
   2d8d0:	4a09      	ldr	r2, [pc, #36]	; (2d8f8 <lte_lc_system_mode_set+0xa8>)
   2d8d2:	f363 0007 	bfi	r0, r3, #0, #8
   2d8d6:	4b09      	ldr	r3, [pc, #36]	; (2d8fc <lte_lc_system_mode_set+0xac>)
   2d8d8:	490d      	ldr	r1, [pc, #52]	; (2d910 <lte_lc_system_mode_set+0xc0>)
   2d8da:	1a9b      	subs	r3, r3, r2
   2d8dc:	08db      	lsrs	r3, r3, #3
   2d8de:	f363 108f 	bfi	r0, r3, #6, #10
   2d8e2:	4622      	mov	r2, r4
   2d8e4:	f016 ff1f 	bl	44726 <log_string_sync>
	sys_mode_current = mode;
   2d8e8:	4b0a      	ldr	r3, [pc, #40]	; (2d914 <lte_lc_system_mode_set+0xc4>)
   2d8ea:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   2d8ec:	4b0a      	ldr	r3, [pc, #40]	; (2d918 <lte_lc_system_mode_set+0xc8>)
   2d8ee:	701d      	strb	r5, [r3, #0]
	return err;
   2d8f0:	e7c5      	b.n	2d87e <lte_lc_system_mode_set+0x2e>
		return 0;
   2d8f2:	4604      	mov	r4, r0
   2d8f4:	e7c3      	b.n	2d87e <lte_lc_system_mode_set+0x2e>
   2d8f6:	bf00      	nop
   2d8f8:	00049788 	.word	0x00049788
   2d8fc:	00049838 	.word	0x00049838
   2d900:	0004e819 	.word	0x0004e819
   2d904:	0004a014 	.word	0x0004a014
   2d908:	0004e837 	.word	0x0004e837
   2d90c:	0004e84a 	.word	0x0004e84a
   2d910:	0004e872 	.word	0x0004e872
   2d914:	2002d089 	.word	0x2002d089
   2d918:	20020ac8 	.word	0x20020ac8

0002d91c <w_lte_lc_connect>:
{
   2d91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d920:	4b2d      	ldr	r3, [pc, #180]	; (2d9d8 <w_lte_lc_connect+0xbc>)
   2d922:	4c2e      	ldr	r4, [pc, #184]	; (2d9dc <w_lte_lc_connect+0xc0>)
   2d924:	4680      	mov	r8, r0
   2d926:	1ae4      	subs	r4, r4, r3
	if (!is_initialized) {
   2d928:	4b2d      	ldr	r3, [pc, #180]	; (2d9e0 <w_lte_lc_connect+0xc4>)
   2d92a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2d92e:	781b      	ldrb	r3, [r3, #0]
   2d930:	b96b      	cbnz	r3, 2d94e <w_lte_lc_connect+0x32>
		LOG_ERR("The LTE link controller is not initialized");
   2d932:	2301      	movs	r3, #1
   2d934:	f04f 0000 	mov.w	r0, #0
   2d938:	f363 0007 	bfi	r0, r3, #0, #8
   2d93c:	f364 108f 	bfi	r0, r4, #6, #10
   2d940:	4928      	ldr	r1, [pc, #160]	; (2d9e4 <w_lte_lc_connect+0xc8>)
   2d942:	f016 fef0 	bl	44726 <log_string_sync>
		return -EPERM;
   2d946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2d94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2d94e:	2201      	movs	r2, #1
   2d950:	2100      	movs	r1, #0
   2d952:	4825      	ldr	r0, [pc, #148]	; (2d9e8 <w_lte_lc_connect+0xcc>)
   2d954:	f01a fabe 	bl	47ed4 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   2d958:	4f24      	ldr	r7, [pc, #144]	; (2d9ec <w_lte_lc_connect+0xd0>)
	return z_impl_k_sem_take(sem, timeout);
   2d95a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2d9e8 <w_lte_lc_connect+0xcc>
			LOG_INF("Network connection attempt timed out");
   2d95e:	f8df a094 	ldr.w	sl, [pc, #148]	; 2d9f4 <w_lte_lc_connect+0xd8>
		err = lte_lc_system_mode_set(sys_mode_target);
   2d962:	7838      	ldrb	r0, [r7, #0]
   2d964:	f7ff ff74 	bl	2d850 <lte_lc_system_mode_set>
		if (err) {
   2d968:	2800      	cmp	r0, #0
   2d96a:	d1ee      	bne.n	2d94a <w_lte_lc_connect+0x2e>
		err = lte_lc_normal();
   2d96c:	f7ff ff3c 	bl	2d7e8 <lte_lc_normal>
		if (err || !blocking) {
   2d970:	2800      	cmp	r0, #0
   2d972:	d1ea      	bne.n	2d94a <w_lte_lc_connect+0x2e>
   2d974:	f1b8 0f00 	cmp.w	r8, #0
   2d978:	d0e7      	beq.n	2d94a <w_lte_lc_connect+0x2e>
   2d97a:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2d97e:	2300      	movs	r3, #0
   2d980:	4648      	mov	r0, r9
   2d982:	f012 ffdf 	bl	40944 <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2d986:	f110 0f0b 	cmn.w	r0, #11
   2d98a:	d1de      	bne.n	2d94a <w_lte_lc_connect+0x2e>
			LOG_INF("Network connection attempt timed out");
   2d98c:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2d990:	f043 0303 	orr.w	r3, r3, #3
   2d994:	f363 0607 	bfi	r6, r3, #0, #8
   2d998:	f364 168f 	bfi	r6, r4, #6, #10
   2d99c:	4651      	mov	r1, sl
   2d99e:	4630      	mov	r0, r6
   2d9a0:	f016 fec1 	bl	44726 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2d9a4:	783b      	ldrb	r3, [r7, #0]
   2d9a6:	2b04      	cmp	r3, #4
   2d9a8:	d112      	bne.n	2d9d0 <w_lte_lc_connect+0xb4>
				sys_mode_target = sys_mode_fallback;
   2d9aa:	2305      	movs	r3, #5
   2d9ac:	703b      	strb	r3, [r7, #0]
				err = lte_lc_offline();
   2d9ae:	f7ff feed 	bl	2d78c <lte_lc_offline>
				if (err) {
   2d9b2:	2800      	cmp	r0, #0
   2d9b4:	d1c9      	bne.n	2d94a <w_lte_lc_connect+0x2e>
				LOG_INF("Using fallback network mode");
   2d9b6:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2d9ba:	f043 0303 	orr.w	r3, r3, #3
   2d9be:	f363 0507 	bfi	r5, r3, #0, #8
   2d9c2:	f364 158f 	bfi	r5, r4, #6, #10
   2d9c6:	490a      	ldr	r1, [pc, #40]	; (2d9f0 <w_lte_lc_connect+0xd4>)
   2d9c8:	4628      	mov	r0, r5
   2d9ca:	f016 feac 	bl	44726 <log_string_sync>
   2d9ce:	e7c8      	b.n	2d962 <w_lte_lc_connect+0x46>
				err = -ETIMEDOUT;
   2d9d0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2d9d4:	e7b9      	b.n	2d94a <w_lte_lc_connect+0x2e>
   2d9d6:	bf00      	nop
   2d9d8:	00049788 	.word	0x00049788
   2d9dc:	00049838 	.word	0x00049838
   2d9e0:	2002d087 	.word	0x2002d087
   2d9e4:	0004e961 	.word	0x0004e961
   2d9e8:	20024d30 	.word	0x20024d30
   2d9ec:	20020ac8 	.word	0x20020ac8
   2d9f0:	0004e9b1 	.word	0x0004e9b1
   2d9f4:	0004e98c 	.word	0x0004e98c

0002d9f8 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   2d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   2d9fc:	2400      	movs	r4, #0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2d9fe:	260d      	movs	r6, #13
{
   2da00:	4605      	mov	r5, r0
   2da02:	b090      	sub	sp, #64	; 0x40
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2da04:	221e      	movs	r2, #30
   2da06:	4621      	mov	r1, r4
   2da08:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   2da0a:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2da0e:	f01a fbdb 	bl	481c8 <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2da12:	4632      	mov	r2, r6
   2da14:	4621      	mov	r1, r4
   2da16:	a804      	add	r0, sp, #16
   2da18:	f01a fbd6 	bl	481c8 <memset>
	size_t response_prefix_len = sizeof(response_prefix);
   2da1c:	9600      	str	r6, [sp, #0]

	if (mode == NULL) {
   2da1e:	2d00      	cmp	r5, #0
   2da20:	f000 80c7 	beq.w	2dbb2 <lte_lc_system_mode_get+0x1ba>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   2da24:	4623      	mov	r3, r4
   2da26:	221e      	movs	r2, #30
   2da28:	a908      	add	r1, sp, #32
   2da2a:	4863      	ldr	r0, [pc, #396]	; (2dbb8 <lte_lc_system_mode_get+0x1c0>)
   2da2c:	f7fe ff66 	bl	2c8fc <at_cmd_write>
			   NULL);
	if (err) {
   2da30:	4604      	mov	r4, r0
   2da32:	b188      	cbz	r0, 2da58 <lte_lc_system_mode_get+0x60>
		LOG_ERR("Could not send AT command");
   2da34:	2301      	movs	r3, #1
   2da36:	f04f 0000 	mov.w	r0, #0
   2da3a:	4a60      	ldr	r2, [pc, #384]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2da3c:	f363 0007 	bfi	r0, r3, #0, #8
   2da40:	4b5f      	ldr	r3, [pc, #380]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2da42:	4960      	ldr	r1, [pc, #384]	; (2dbc4 <lte_lc_system_mode_get+0x1cc>)
   2da44:	1a9b      	subs	r3, r3, r2
   2da46:	08db      	lsrs	r3, r3, #3
   2da48:	f363 108f 	bfi	r0, r3, #6, #10
   2da4c:	f016 fe6b 	bl	44726 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2da50:	4620      	mov	r0, r4
   2da52:	b010      	add	sp, #64	; 0x40
   2da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2da58:	2105      	movs	r1, #5
   2da5a:	a802      	add	r0, sp, #8
   2da5c:	f019 fe13 	bl	47686 <at_params_list_init>
	if (err) {
   2da60:	4604      	mov	r4, r0
   2da62:	b178      	cbz	r0, 2da84 <lte_lc_system_mode_get+0x8c>
		LOG_ERR("Could init AT params list, error: %d", err);
   2da64:	2301      	movs	r3, #1
   2da66:	f04f 0000 	mov.w	r0, #0
   2da6a:	4a54      	ldr	r2, [pc, #336]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2da6c:	f363 0007 	bfi	r0, r3, #0, #8
   2da70:	4b53      	ldr	r3, [pc, #332]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2da72:	4955      	ldr	r1, [pc, #340]	; (2dbc8 <lte_lc_system_mode_get+0x1d0>)
   2da74:	1a9b      	subs	r3, r3, r2
   2da76:	08db      	lsrs	r3, r3, #3
   2da78:	f363 108f 	bfi	r0, r3, #6, #10
   2da7c:	4622      	mov	r2, r4
   2da7e:	f016 fe52 	bl	44726 <log_string_sync>
		return err;
   2da82:	e7e5      	b.n	2da50 <lte_lc_system_mode_get+0x58>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2da84:	4601      	mov	r1, r0
   2da86:	2305      	movs	r3, #5
   2da88:	aa02      	add	r2, sp, #8
   2da8a:	a808      	add	r0, sp, #32
   2da8c:	f7ff fc78 	bl	2d380 <at_parser_max_params_from_str>
	if (err) {
   2da90:	4604      	mov	r4, r0
   2da92:	b178      	cbz	r0, 2dab4 <lte_lc_system_mode_get+0xbc>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2da94:	2301      	movs	r3, #1
   2da96:	f04f 0000 	mov.w	r0, #0
   2da9a:	4a48      	ldr	r2, [pc, #288]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2da9c:	f363 0007 	bfi	r0, r3, #0, #8
   2daa0:	4b47      	ldr	r3, [pc, #284]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2daa2:	494a      	ldr	r1, [pc, #296]	; (2dbcc <lte_lc_system_mode_get+0x1d4>)
   2daa4:	1a9b      	subs	r3, r3, r2
   2daa6:	4622      	mov	r2, r4
   2daa8:	08db      	lsrs	r3, r3, #3
   2daaa:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2daae:	f016 fe3a 	bl	44726 <log_string_sync>
			goto clean_exit;
   2dab2:	e017      	b.n	2dae4 <lte_lc_system_mode_get+0xec>
	err = at_params_string_get(&resp_list,
   2dab4:	4601      	mov	r1, r0
   2dab6:	466b      	mov	r3, sp
   2dab8:	aa04      	add	r2, sp, #16
   2daba:	a802      	add	r0, sp, #8
   2dabc:	f019 febb 	bl	47836 <at_params_string_get>
	if (err) {
   2dac0:	4606      	mov	r6, r0
   2dac2:	b198      	cbz	r0, 2daec <lte_lc_system_mode_get+0xf4>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2dac4:	2301      	movs	r3, #1
   2dac6:	f04f 0000 	mov.w	r0, #0
   2daca:	4a3c      	ldr	r2, [pc, #240]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2dacc:	f363 0007 	bfi	r0, r3, #0, #8
   2dad0:	4b3b      	ldr	r3, [pc, #236]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2dad2:	493f      	ldr	r1, [pc, #252]	; (2dbd0 <lte_lc_system_mode_get+0x1d8>)
   2dad4:	1a9b      	subs	r3, r3, r2
   2dad6:	08db      	lsrs	r3, r3, #3
   2dad8:	f363 108f 	bfi	r0, r3, #6, #10
   2dadc:	4632      	mov	r2, r6
   2dade:	f016 fe22 	bl	44726 <log_string_sync>
		goto clean_exit;
   2dae2:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   2dae4:	a802      	add	r0, sp, #8
   2dae6:	f019 fde1 	bl	476ac <at_params_list_free>
	return err;
   2daea:	e7b1      	b.n	2da50 <lte_lc_system_mode_get+0x58>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2daec:	4a39      	ldr	r2, [pc, #228]	; (2dbd4 <lte_lc_system_mode_get+0x1dc>)
   2daee:	9900      	ldr	r1, [sp, #0]
   2daf0:	a804      	add	r0, sp, #16
   2daf2:	f019 fede 	bl	478b2 <response_is_valid>
   2daf6:	b970      	cbnz	r0, 2db16 <lte_lc_system_mode_get+0x11e>
		LOG_ERR("Invalid XSYSTEMMODE response");
   2daf8:	2301      	movs	r3, #1
   2dafa:	4a30      	ldr	r2, [pc, #192]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2dafc:	f363 0007 	bfi	r0, r3, #0, #8
   2db00:	4b2f      	ldr	r3, [pc, #188]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2db02:	4935      	ldr	r1, [pc, #212]	; (2dbd8 <lte_lc_system_mode_get+0x1e0>)
   2db04:	1a9b      	subs	r3, r3, r2
   2db06:	08db      	lsrs	r3, r3, #3
   2db08:	f363 108f 	bfi	r0, r3, #6, #10
   2db0c:	f016 fe0b 	bl	44726 <log_string_sync>
		err = -EIO;
   2db10:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2db14:	e7e6      	b.n	2dae4 <lte_lc_system_mode_get+0xec>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2db16:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2db18:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   2db1a:	aa01      	add	r2, sp, #4
   2db1c:	4639      	mov	r1, r7
   2db1e:	a802      	add	r0, sp, #8
   2db20:	f019 fe72 	bl	47808 <at_params_int_get>
		if (err) {
   2db24:	4604      	mov	r4, r0
   2db26:	b168      	cbz	r0, 2db44 <lte_lc_system_mode_get+0x14c>
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2db28:	2301      	movs	r3, #1
   2db2a:	f04f 0000 	mov.w	r0, #0
   2db2e:	4a23      	ldr	r2, [pc, #140]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2db30:	f363 0007 	bfi	r0, r3, #0, #8
   2db34:	4b22      	ldr	r3, [pc, #136]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2db36:	4929      	ldr	r1, [pc, #164]	; (2dbdc <lte_lc_system_mode_get+0x1e4>)
   2db38:	1a9b      	subs	r3, r3, r2
   2db3a:	08db      	lsrs	r3, r3, #3
   2db3c:	f363 108f 	bfi	r0, r3, #6, #10
   2db40:	4622      	mov	r2, r4
   2db42:	e7b4      	b.n	2daae <lte_lc_system_mode_get+0xb6>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2db44:	9b01      	ldr	r3, [sp, #4]
   2db46:	b113      	cbz	r3, 2db4e <lte_lc_system_mode_get+0x156>
   2db48:	fa08 f307 	lsl.w	r3, r8, r7
   2db4c:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT; i++) {
   2db4e:	3701      	adds	r7, #1
   2db50:	2f05      	cmp	r7, #5
   2db52:	d1e2      	bne.n	2db1a <lte_lc_system_mode_get+0x122>
	switch (bitmask) {
   2db54:	2e0c      	cmp	r6, #12
   2db56:	d81b      	bhi.n	2db90 <lte_lc_system_mode_get+0x198>
   2db58:	e8df f006 	tbb	[pc, r6]
   2db5c:	1a101a07 	.word	0x1a101a07
   2db60:	1a1a1a12 	.word	0x1a1a1a12
   2db64:	1a161a14 	.word	0x1a161a14
   2db68:	18          	.byte	0x18
   2db69:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2db6a:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2db6c:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   2db6e:	4b1c      	ldr	r3, [pc, #112]	; (2dbe0 <lte_lc_system_mode_get+0x1e8>)
   2db70:	782a      	ldrb	r2, [r5, #0]
   2db72:	7819      	ldrb	r1, [r3, #0]
   2db74:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   2db76:	bf18      	it	ne
   2db78:	701a      	strbne	r2, [r3, #0]
   2db7a:	e7b3      	b.n	2dae4 <lte_lc_system_mode_get+0xec>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2db7c:	2301      	movs	r3, #1
   2db7e:	e7f5      	b.n	2db6c <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2db80:	2302      	movs	r3, #2
   2db82:	e7f3      	b.n	2db6c <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2db84:	2303      	movs	r3, #3
   2db86:	e7f1      	b.n	2db6c <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2db88:	2304      	movs	r3, #4
   2db8a:	e7ef      	b.n	2db6c <lte_lc_system_mode_get+0x174>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2db8c:	2305      	movs	r3, #5
   2db8e:	e7ed      	b.n	2db6c <lte_lc_system_mode_get+0x174>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2db90:	2301      	movs	r3, #1
   2db92:	f04f 0000 	mov.w	r0, #0
   2db96:	4a09      	ldr	r2, [pc, #36]	; (2dbbc <lte_lc_system_mode_get+0x1c4>)
   2db98:	f363 0007 	bfi	r0, r3, #0, #8
   2db9c:	4b08      	ldr	r3, [pc, #32]	; (2dbc0 <lte_lc_system_mode_get+0x1c8>)
   2db9e:	4911      	ldr	r1, [pc, #68]	; (2dbe4 <lte_lc_system_mode_get+0x1ec>)
   2dba0:	1a9b      	subs	r3, r3, r2
   2dba2:	08db      	lsrs	r3, r3, #3
   2dba4:	f363 108f 	bfi	r0, r3, #6, #10
   2dba8:	f016 fdbd 	bl	44726 <log_string_sync>
		err = -EFAULT;
   2dbac:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   2dbb0:	e798      	b.n	2dae4 <lte_lc_system_mode_get+0xec>
		return -EINVAL;
   2dbb2:	f06f 0415 	mvn.w	r4, #21
   2dbb6:	e74b      	b.n	2da50 <lte_lc_system_mode_get+0x58>
   2dbb8:	0004e725 	.word	0x0004e725
   2dbbc:	00049788 	.word	0x00049788
   2dbc0:	00049838 	.word	0x00049838
   2dbc4:	0004e735 	.word	0x0004e735
   2dbc8:	0004e74f 	.word	0x0004e74f
   2dbcc:	0004e774 	.word	0x0004e774
   2dbd0:	0004e624 	.word	0x0004e624
   2dbd4:	0004e79b 	.word	0x0004e79b
   2dbd8:	0004e7a8 	.word	0x0004e7a8
   2dbdc:	0004e7c5 	.word	0x0004e7c5
   2dbe0:	2002d089 	.word	0x2002d089
   2dbe4:	0004e7ed 	.word	0x0004e7ed

0002dbe8 <w_lte_lc_init>:
{
   2dbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (is_initialized) {
   2dbea:	4f49      	ldr	r7, [pc, #292]	; (2dd10 <w_lte_lc_init+0x128>)
{
   2dbec:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   2dbee:	783b      	ldrb	r3, [r7, #0]
   2dbf0:	2b00      	cmp	r3, #0
   2dbf2:	f040 8087 	bne.w	2dd04 <w_lte_lc_init+0x11c>
	err = lte_lc_system_mode_get(&sys_mode_current);
   2dbf6:	4d47      	ldr	r5, [pc, #284]	; (2dd14 <w_lte_lc_init+0x12c>)
   2dbf8:	4628      	mov	r0, r5
   2dbfa:	f7ff fefd 	bl	2d9f8 <lte_lc_system_mode_get>
	if (err) {
   2dbfe:	4604      	mov	r4, r0
   2dc00:	b188      	cbz	r0, 2dc26 <w_lte_lc_init+0x3e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   2dc02:	2301      	movs	r3, #1
   2dc04:	f04f 0000 	mov.w	r0, #0
   2dc08:	4a43      	ldr	r2, [pc, #268]	; (2dd18 <w_lte_lc_init+0x130>)
   2dc0a:	f363 0007 	bfi	r0, r3, #0, #8
   2dc0e:	4b43      	ldr	r3, [pc, #268]	; (2dd1c <w_lte_lc_init+0x134>)
   2dc10:	4943      	ldr	r1, [pc, #268]	; (2dd20 <w_lte_lc_init+0x138>)
   2dc12:	1a9b      	subs	r3, r3, r2
   2dc14:	4622      	mov	r2, r4
   2dc16:	08db      	lsrs	r3, r3, #3
   2dc18:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Can't register AT handler, error: %d", err);
   2dc1c:	f016 fd83 	bl	44726 <log_string_sync>
}
   2dc20:	4620      	mov	r0, r4
   2dc22:	b00f      	add	sp, #60	; 0x3c
   2dc24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_notif_register_handler(NULL, at_handler);
   2dc26:	493f      	ldr	r1, [pc, #252]	; (2dd24 <w_lte_lc_init+0x13c>)
   2dc28:	f7fe ff98 	bl	2cb5c <at_notif_register_handler>
	if (err) {
   2dc2c:	4604      	mov	r4, r0
   2dc2e:	b168      	cbz	r0, 2dc4c <w_lte_lc_init+0x64>
		LOG_ERR("Can't register AT handler, error: %d", err);
   2dc30:	2301      	movs	r3, #1
   2dc32:	f04f 0000 	mov.w	r0, #0
   2dc36:	4a38      	ldr	r2, [pc, #224]	; (2dd18 <w_lte_lc_init+0x130>)
   2dc38:	f363 0007 	bfi	r0, r3, #0, #8
   2dc3c:	4b37      	ldr	r3, [pc, #220]	; (2dd1c <w_lte_lc_init+0x134>)
   2dc3e:	493a      	ldr	r1, [pc, #232]	; (2dd28 <w_lte_lc_init+0x140>)
   2dc40:	1a9b      	subs	r3, r3, r2
   2dc42:	08db      	lsrs	r3, r3, #3
   2dc44:	f363 108f 	bfi	r0, r3, #6, #10
   2dc48:	4622      	mov	r2, r4
   2dc4a:	e7e7      	b.n	2dc1c <w_lte_lc_init+0x34>
	if (sys_mode_current != sys_mode_target) {
   2dc4c:	4b37      	ldr	r3, [pc, #220]	; (2dd2c <w_lte_lc_init+0x144>)
   2dc4e:	7818      	ldrb	r0, [r3, #0]
   2dc50:	782b      	ldrb	r3, [r5, #0]
   2dc52:	4283      	cmp	r3, r0
   2dc54:	d011      	beq.n	2dc7a <w_lte_lc_init+0x92>
		err = lte_lc_system_mode_set(sys_mode_target);
   2dc56:	f7ff fdfb 	bl	2d850 <lte_lc_system_mode_set>
		if (err) {
   2dc5a:	4604      	mov	r4, r0
   2dc5c:	b168      	cbz	r0, 2dc7a <w_lte_lc_init+0x92>
			LOG_ERR("Could not set system mode, error: %d", err);
   2dc5e:	2301      	movs	r3, #1
   2dc60:	f04f 0000 	mov.w	r0, #0
   2dc64:	4a2c      	ldr	r2, [pc, #176]	; (2dd18 <w_lte_lc_init+0x130>)
   2dc66:	f363 0007 	bfi	r0, r3, #0, #8
   2dc6a:	4b2c      	ldr	r3, [pc, #176]	; (2dd1c <w_lte_lc_init+0x134>)
   2dc6c:	4930      	ldr	r1, [pc, #192]	; (2dd30 <w_lte_lc_init+0x148>)
   2dc6e:	1a9b      	subs	r3, r3, r2
   2dc70:	08db      	lsrs	r3, r3, #3
   2dc72:	f363 108f 	bfi	r0, r3, #6, #10
   2dc76:	4622      	mov	r2, r4
   2dc78:	e7d0      	b.n	2dc1c <w_lte_lc_init+0x34>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2dc7a:	2300      	movs	r3, #0
   2dc7c:	482d      	ldr	r0, [pc, #180]	; (2dd34 <w_lte_lc_init+0x14c>)
   2dc7e:	461a      	mov	r2, r3
   2dc80:	4619      	mov	r1, r3
   2dc82:	f7fe fe3b 	bl	2c8fc <at_cmd_write>
   2dc86:	4604      	mov	r4, r0
   2dc88:	2800      	cmp	r0, #0
   2dc8a:	d13e      	bne.n	2dd0a <w_lte_lc_init+0x122>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   2dc8c:	4603      	mov	r3, r0
   2dc8e:	4602      	mov	r2, r0
   2dc90:	4601      	mov	r1, r0
   2dc92:	4829      	ldr	r0, [pc, #164]	; (2dd38 <w_lte_lc_init+0x150>)
   2dc94:	f7fe fe32 	bl	2c8fc <at_cmd_write>
	if (err) {
   2dc98:	4603      	mov	r3, r0
   2dc9a:	b380      	cbz	r0, 2dcfe <w_lte_lc_init+0x116>
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   2dc9c:	2202      	movs	r2, #2
   2dc9e:	f04f 0000 	mov.w	r0, #0
   2dca2:	4d1e      	ldr	r5, [pc, #120]	; (2dd1c <w_lte_lc_init+0x134>)
   2dca4:	f362 0007 	bfi	r0, r2, #0, #8
   2dca8:	4a1b      	ldr	r2, [pc, #108]	; (2dd18 <w_lte_lc_init+0x130>)
   2dcaa:	4924      	ldr	r1, [pc, #144]	; (2dd3c <w_lte_lc_init+0x154>)
   2dcac:	1aad      	subs	r5, r5, r2
   2dcae:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2dcb2:	f365 108f 	bfi	r0, r5, #6, #10
   2dcb6:	4a20      	ldr	r2, [pc, #128]	; (2dd38 <w_lte_lc_init+0x150>)
   2dcb8:	f016 fd35 	bl	44726 <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   2dcbc:	2302      	movs	r3, #2
   2dcbe:	f04f 0000 	mov.w	r0, #0
   2dcc2:	f363 0007 	bfi	r0, r3, #0, #8
   2dcc6:	f365 108f 	bfi	r0, r5, #6, #10
   2dcca:	4a1b      	ldr	r2, [pc, #108]	; (2dd38 <w_lte_lc_init+0x150>)
   2dccc:	491c      	ldr	r1, [pc, #112]	; (2dd40 <w_lte_lc_init+0x158>)
   2dcce:	f016 fd2a 	bl	44726 <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   2dcd2:	4623      	mov	r3, r4
   2dcd4:	2232      	movs	r2, #50	; 0x32
   2dcd6:	a901      	add	r1, sp, #4
   2dcd8:	481a      	ldr	r0, [pc, #104]	; (2dd44 <w_lte_lc_init+0x15c>)
   2dcda:	f7fe fe0f 	bl	2c8fc <at_cmd_write>
		if (err == 0) {
   2dcde:	b970      	cbnz	r0, 2dcfe <w_lte_lc_init+0x116>
			LOG_WRN("Current modem firmware version: %s",
   2dce0:	2302      	movs	r3, #2
   2dce2:	f04f 0600 	mov.w	r6, #0
   2dce6:	a801      	add	r0, sp, #4
   2dce8:	f363 0607 	bfi	r6, r3, #0, #8
   2dcec:	f016 fd2e 	bl	4474c <log_strdup>
   2dcf0:	f365 168f 	bfi	r6, r5, #6, #10
   2dcf4:	4602      	mov	r2, r0
   2dcf6:	4914      	ldr	r1, [pc, #80]	; (2dd48 <w_lte_lc_init+0x160>)
   2dcf8:	4630      	mov	r0, r6
   2dcfa:	f016 fd14 	bl	44726 <log_string_sync>
	is_initialized = true;
   2dcfe:	2301      	movs	r3, #1
   2dd00:	703b      	strb	r3, [r7, #0]
	return 0;
   2dd02:	e78d      	b.n	2dc20 <w_lte_lc_init+0x38>
		return -EALREADY;
   2dd04:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2dd08:	e78a      	b.n	2dc20 <w_lte_lc_init+0x38>
		return -EIO;
   2dd0a:	f06f 0404 	mvn.w	r4, #4
   2dd0e:	e787      	b.n	2dc20 <w_lte_lc_init+0x38>
   2dd10:	2002d087 	.word	0x2002d087
   2dd14:	2002d089 	.word	0x2002d089
   2dd18:	00049788 	.word	0x00049788
   2dd1c:	00049838 	.word	0x00049838
   2dd20:	0004e9cd 	.word	0x0004e9cd
   2dd24:	0001db51 	.word	0x0001db51
   2dd28:	0004e9fa 	.word	0x0004e9fa
   2dd2c:	20020ac8 	.word	0x20020ac8
   2dd30:	0004ea1f 	.word	0x0004ea1f
   2dd34:	0004e5c2 	.word	0x0004e5c2
   2dd38:	0004e5cd 	.word	0x0004e5cd
   2dd3c:	0004ea44 	.word	0x0004ea44
   2dd40:	0004ea76 	.word	0x0004ea76
   2dd44:	0004eaa1 	.word	0x0004eaa1
   2dd48:	0004eaa9 	.word	0x0004eaa9

0002dd4c <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   2dd4c:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   2dd4e:	2400      	movs	r4, #0
{
   2dd50:	b08d      	sub	sp, #52	; 0x34
   2dd52:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2dd54:	2214      	movs	r2, #20
   2dd56:	4621      	mov	r1, r4
   2dd58:	a807      	add	r0, sp, #28
	struct at_param_list resp_list = {0};
   2dd5a:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2dd5e:	f01a fa33 	bl	481c8 <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2dd62:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   2dd64:	9403      	str	r4, [sp, #12]
   2dd66:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   2dd6a:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   2dd6c:	2d00      	cmp	r5, #0
   2dd6e:	f000 808d 	beq.w	2de8c <lte_lc_func_mode_get+0x140>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   2dd72:	4623      	mov	r3, r4
   2dd74:	2214      	movs	r2, #20
   2dd76:	a907      	add	r1, sp, #28
   2dd78:	4846      	ldr	r0, [pc, #280]	; (2de94 <lte_lc_func_mode_get+0x148>)
   2dd7a:	f7fe fdbf 	bl	2c8fc <at_cmd_write>
	if (err) {
   2dd7e:	4604      	mov	r4, r0
   2dd80:	b180      	cbz	r0, 2dda4 <lte_lc_func_mode_get+0x58>
		LOG_ERR("Could not send AT command");
   2dd82:	2301      	movs	r3, #1
   2dd84:	f04f 0000 	mov.w	r0, #0
   2dd88:	4a43      	ldr	r2, [pc, #268]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2dd8a:	f363 0007 	bfi	r0, r3, #0, #8
   2dd8e:	4b43      	ldr	r3, [pc, #268]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2dd90:	4943      	ldr	r1, [pc, #268]	; (2dea0 <lte_lc_func_mode_get+0x154>)
   2dd92:	1a9b      	subs	r3, r3, r2
   2dd94:	08db      	lsrs	r3, r3, #3
   2dd96:	f363 108f 	bfi	r0, r3, #6, #10
   2dd9a:	f016 fcc4 	bl	44726 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2dd9e:	4620      	mov	r0, r4
   2dda0:	b00d      	add	sp, #52	; 0x34
   2dda2:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   2dda4:	2102      	movs	r1, #2
   2dda6:	a805      	add	r0, sp, #20
   2dda8:	f019 fc6d 	bl	47686 <at_params_list_init>
	if (err) {
   2ddac:	4604      	mov	r4, r0
   2ddae:	b178      	cbz	r0, 2ddd0 <lte_lc_func_mode_get+0x84>
		LOG_ERR("Could init AT params list, error: %d", err);
   2ddb0:	2301      	movs	r3, #1
   2ddb2:	f04f 0000 	mov.w	r0, #0
   2ddb6:	4a38      	ldr	r2, [pc, #224]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2ddb8:	f363 0007 	bfi	r0, r3, #0, #8
   2ddbc:	4b37      	ldr	r3, [pc, #220]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2ddbe:	4939      	ldr	r1, [pc, #228]	; (2dea4 <lte_lc_func_mode_get+0x158>)
   2ddc0:	1a9b      	subs	r3, r3, r2
   2ddc2:	08db      	lsrs	r3, r3, #3
   2ddc4:	f363 108f 	bfi	r0, r3, #6, #10
   2ddc8:	4622      	mov	r2, r4
   2ddca:	f016 fcac 	bl	44726 <log_string_sync>
		return err;
   2ddce:	e7e6      	b.n	2dd9e <lte_lc_func_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2ddd0:	4601      	mov	r1, r0
   2ddd2:	2302      	movs	r3, #2
   2ddd4:	aa05      	add	r2, sp, #20
   2ddd6:	a807      	add	r0, sp, #28
   2ddd8:	f7ff fad2 	bl	2d380 <at_parser_max_params_from_str>
	if (err) {
   2dddc:	4604      	mov	r4, r0
   2ddde:	b190      	cbz	r0, 2de06 <lte_lc_func_mode_get+0xba>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2dde0:	2301      	movs	r3, #1
   2dde2:	f04f 0000 	mov.w	r0, #0
   2dde6:	4a2c      	ldr	r2, [pc, #176]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2dde8:	f363 0007 	bfi	r0, r3, #0, #8
   2ddec:	4b2b      	ldr	r3, [pc, #172]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2ddee:	492e      	ldr	r1, [pc, #184]	; (2dea8 <lte_lc_func_mode_get+0x15c>)
   2ddf0:	1a9b      	subs	r3, r3, r2
   2ddf2:	4622      	mov	r2, r4
   2ddf4:	08db      	lsrs	r3, r3, #3
   2ddf6:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not get response prefix, error: %d", err);
   2ddfa:	f016 fc94 	bl	44726 <log_string_sync>
	at_params_list_free(&resp_list);
   2ddfe:	a805      	add	r0, sp, #20
   2de00:	f019 fc54 	bl	476ac <at_params_list_free>
	return err;
   2de04:	e7cb      	b.n	2dd9e <lte_lc_func_mode_get+0x52>
	err = at_params_string_get(&resp_list,
   2de06:	4601      	mov	r1, r0
   2de08:	ab02      	add	r3, sp, #8
   2de0a:	aa03      	add	r2, sp, #12
   2de0c:	a805      	add	r0, sp, #20
   2de0e:	f019 fd12 	bl	47836 <at_params_string_get>
	if (err) {
   2de12:	4604      	mov	r4, r0
   2de14:	b168      	cbz	r0, 2de32 <lte_lc_func_mode_get+0xe6>
		LOG_ERR("Could not get response prefix, error: %d", err);
   2de16:	2301      	movs	r3, #1
   2de18:	f04f 0000 	mov.w	r0, #0
   2de1c:	4a1e      	ldr	r2, [pc, #120]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2de1e:	f363 0007 	bfi	r0, r3, #0, #8
   2de22:	4b1e      	ldr	r3, [pc, #120]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2de24:	4921      	ldr	r1, [pc, #132]	; (2deac <lte_lc_func_mode_get+0x160>)
   2de26:	1a9b      	subs	r3, r3, r2
   2de28:	08db      	lsrs	r3, r3, #3
   2de2a:	f363 108f 	bfi	r0, r3, #6, #10
   2de2e:	4622      	mov	r2, r4
   2de30:	e7e3      	b.n	2ddfa <lte_lc_func_mode_get+0xae>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2de32:	4a1f      	ldr	r2, [pc, #124]	; (2deb0 <lte_lc_func_mode_get+0x164>)
   2de34:	9902      	ldr	r1, [sp, #8]
   2de36:	a803      	add	r0, sp, #12
   2de38:	f019 fd3b 	bl	478b2 <response_is_valid>
   2de3c:	b970      	cbnz	r0, 2de5c <lte_lc_func_mode_get+0x110>
		LOG_ERR("Invalid CFUN response");
   2de3e:	2301      	movs	r3, #1
   2de40:	4a15      	ldr	r2, [pc, #84]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2de42:	f363 0007 	bfi	r0, r3, #0, #8
   2de46:	4b15      	ldr	r3, [pc, #84]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2de48:	491a      	ldr	r1, [pc, #104]	; (2deb4 <lte_lc_func_mode_get+0x168>)
   2de4a:	1a9b      	subs	r3, r3, r2
   2de4c:	08db      	lsrs	r3, r3, #3
   2de4e:	f363 108f 	bfi	r0, r3, #6, #10
   2de52:	f016 fc68 	bl	44726 <log_string_sync>
		err = -EIO;
   2de56:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2de5a:	e7d0      	b.n	2ddfe <lte_lc_func_mode_get+0xb2>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   2de5c:	aa01      	add	r2, sp, #4
   2de5e:	2101      	movs	r1, #1
   2de60:	a805      	add	r0, sp, #20
   2de62:	f019 fcd1 	bl	47808 <at_params_int_get>
	if (err) {
   2de66:	4604      	mov	r4, r0
   2de68:	b168      	cbz	r0, 2de86 <lte_lc_func_mode_get+0x13a>
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   2de6a:	2301      	movs	r3, #1
   2de6c:	f04f 0000 	mov.w	r0, #0
   2de70:	4a09      	ldr	r2, [pc, #36]	; (2de98 <lte_lc_func_mode_get+0x14c>)
   2de72:	f363 0007 	bfi	r0, r3, #0, #8
   2de76:	4b09      	ldr	r3, [pc, #36]	; (2de9c <lte_lc_func_mode_get+0x150>)
   2de78:	490f      	ldr	r1, [pc, #60]	; (2deb8 <lte_lc_func_mode_get+0x16c>)
   2de7a:	1a9b      	subs	r3, r3, r2
   2de7c:	08db      	lsrs	r3, r3, #3
   2de7e:	f363 108f 	bfi	r0, r3, #6, #10
   2de82:	4622      	mov	r2, r4
   2de84:	e7b9      	b.n	2ddfa <lte_lc_func_mode_get+0xae>
	*mode = resp_mode;
   2de86:	9b01      	ldr	r3, [sp, #4]
   2de88:	702b      	strb	r3, [r5, #0]
   2de8a:	e7b8      	b.n	2ddfe <lte_lc_func_mode_get+0xb2>
		return -EINVAL;
   2de8c:	f06f 0415 	mvn.w	r4, #21
   2de90:	e785      	b.n	2dd9e <lte_lc_func_mode_get+0x52>
   2de92:	bf00      	nop
   2de94:	0004e5d8 	.word	0x0004e5d8
   2de98:	00049788 	.word	0x00049788
   2de9c:	00049838 	.word	0x00049838
   2dea0:	0004e735 	.word	0x0004e735
   2dea4:	0004e74f 	.word	0x0004e74f
   2dea8:	0004e774 	.word	0x0004e774
   2deac:	0004e624 	.word	0x0004e624
   2deb0:	0004e5e1 	.word	0x0004e5e1
   2deb4:	0004e5e7 	.word	0x0004e5e7
   2deb8:	0004e7c5 	.word	0x0004e7c5

0002debc <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2debc:	b510      	push	{r4, lr}
   2debe:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2dec0:	4a09      	ldr	r2, [pc, #36]	; (2dee8 <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   2dec2:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2dec4:	7823      	ldrb	r3, [r4, #0]
   2dec6:	2100      	movs	r1, #0
   2dec8:	f7ff fa5a 	bl	2d380 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2decc:	f110 0f0b 	cmn.w	r0, #11
   2ded0:	d000      	beq.n	2ded4 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2ded2:	b940      	cbnz	r0, 2dee6 <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2ded4:	4804      	ldr	r0, [pc, #16]	; (2dee8 <modem_info_parse.isra.0+0x2c>)
   2ded6:	f019 fcd5 	bl	47884 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2deda:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   2dedc:	4298      	cmp	r0, r3
   2dede:	bf94      	ite	ls
   2dee0:	2000      	movls	r0, #0
   2dee2:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2dee6:	bd10      	pop	{r4, pc}
   2dee8:	20024d58 	.word	0x20024d58

0002deec <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   2deec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2deee:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	uint16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   2def0:	4608      	mov	r0, r1
   2def2:	f7ef f9b7 	bl	1d264 <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   2def6:	491f      	ldr	r1, [pc, #124]	; (2df74 <modem_info_rsrp_subscribe_handler+0x88>)
   2def8:	4620      	mov	r0, r4
   2defa:	f01a fb6f 	bl	485dc <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   2defe:	b1d0      	cbz	r0, 2df36 <modem_info_rsrp_subscribe_handler+0x4a>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   2df00:	4b1d      	ldr	r3, [pc, #116]	; (2df78 <modem_info_rsrp_subscribe_handler+0x8c>)
   2df02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2df06:	ab04      	add	r3, sp, #16
   2df08:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   2df0c:	4621      	mov	r1, r4
   2df0e:	f10d 000d 	add.w	r0, sp, #13
   2df12:	f7ff ffd3 	bl	2debc <modem_info_parse.isra.0>
	if (err != 0) {
   2df16:	4602      	mov	r2, r0
   2df18:	b178      	cbz	r0, 2df3a <modem_info_rsrp_subscribe_handler+0x4e>
		LOG_ERR("modem_info_parse failed to parse "
   2df1a:	2301      	movs	r3, #1
   2df1c:	f04f 0000 	mov.w	r0, #0
   2df20:	4916      	ldr	r1, [pc, #88]	; (2df7c <modem_info_rsrp_subscribe_handler+0x90>)
   2df22:	f363 0007 	bfi	r0, r3, #0, #8
   2df26:	4b16      	ldr	r3, [pc, #88]	; (2df80 <modem_info_rsrp_subscribe_handler+0x94>)
   2df28:	1a5b      	subs	r3, r3, r1
   2df2a:	08db      	lsrs	r3, r3, #3
   2df2c:	4915      	ldr	r1, [pc, #84]	; (2df84 <modem_info_rsrp_subscribe_handler+0x98>)
   2df2e:	f363 108f 	bfi	r0, r3, #6, #10

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2df32:	f016 fbf8 	bl	44726 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2df36:	b004      	add	sp, #16
   2df38:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2df3a:	f10d 0202 	add.w	r2, sp, #2
   2df3e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2df42:	4811      	ldr	r0, [pc, #68]	; (2df88 <modem_info_rsrp_subscribe_handler+0x9c>)
   2df44:	f019 fc4a 	bl	477dc <at_params_short_get>
	if (err != 0) {
   2df48:	4602      	mov	r2, r0
   2df4a:	b160      	cbz	r0, 2df66 <modem_info_rsrp_subscribe_handler+0x7a>
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2df4c:	2301      	movs	r3, #1
   2df4e:	f04f 0000 	mov.w	r0, #0
   2df52:	490a      	ldr	r1, [pc, #40]	; (2df7c <modem_info_rsrp_subscribe_handler+0x90>)
   2df54:	f363 0007 	bfi	r0, r3, #0, #8
   2df58:	4b09      	ldr	r3, [pc, #36]	; (2df80 <modem_info_rsrp_subscribe_handler+0x94>)
   2df5a:	1a5b      	subs	r3, r3, r1
   2df5c:	08db      	lsrs	r3, r3, #3
   2df5e:	f363 108f 	bfi	r0, r3, #6, #10
   2df62:	490a      	ldr	r1, [pc, #40]	; (2df8c <modem_info_rsrp_subscribe_handler+0xa0>)
   2df64:	e7e5      	b.n	2df32 <modem_info_rsrp_subscribe_handler+0x46>
	modem_info_rsrp_cb(param_value);
   2df66:	4b0a      	ldr	r3, [pc, #40]	; (2df90 <modem_info_rsrp_subscribe_handler+0xa4>)
   2df68:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2df6c:	681b      	ldr	r3, [r3, #0]
   2df6e:	4798      	blx	r3
   2df70:	e7e1      	b.n	2df36 <modem_info_rsrp_subscribe_handler+0x4a>
   2df72:	bf00      	nop
   2df74:	0004eaf3 	.word	0x0004eaf3
   2df78:	00049944 	.word	0x00049944
   2df7c:	00049788 	.word	0x00049788
   2df80:	00049840 	.word	0x00049840
   2df84:	0004eaf9 	.word	0x0004eaf9
   2df88:	20024d58 	.word	0x20024d58
   2df8c:	0004eb30 	.word	0x0004eb30
   2df90:	20024d60 	.word	0x20024d60

0002df94 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   2df94:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   2df96:	bf9d      	ittte	ls
   2df98:	4b02      	ldrls	r3, [pc, #8]	; (2dfa4 <modem_info_type_get+0x10>)
   2df9a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2df9e:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   2dfa0:	20ea      	movhi	r0, #234	; 0xea
}
   2dfa2:	4770      	bx	lr
   2dfa4:	0004a138 	.word	0x0004a138

0002dfa8 <modem_info_name_get>:
{
   2dfa8:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2dfaa:	460d      	mov	r5, r1
   2dfac:	b919      	cbnz	r1, 2dfb6 <modem_info_name_get+0xe>
		return -EINVAL;
   2dfae:	f06f 0415 	mvn.w	r4, #21
}
   2dfb2:	4620      	mov	r0, r4
   2dfb4:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   2dfb6:	4b07      	ldr	r3, [pc, #28]	; (2dfd4 <modem_info_name_get+0x2c>)
   2dfb8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2dfbc:	6870      	ldr	r0, [r6, #4]
   2dfbe:	f7ef f951 	bl	1d264 <strlen>
	if (len <= 0) {
   2dfc2:	1e04      	subs	r4, r0, #0
   2dfc4:	ddf3      	ble.n	2dfae <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dfc6:	4622      	mov	r2, r4
   2dfc8:	6871      	ldr	r1, [r6, #4]
   2dfca:	4628      	mov	r0, r5
   2dfcc:	f01a f8dc 	bl	48188 <memcpy>
   2dfd0:	e7ef      	b.n	2dfb2 <modem_info_name_get+0xa>
   2dfd2:	bf00      	nop
   2dfd4:	0004a138 	.word	0x0004a138

0002dfd8 <modem_info_short_get>:
{
   2dfd8:	b530      	push	{r4, r5, lr}
   2dfda:	460d      	mov	r5, r1
   2dfdc:	b0a1      	sub	sp, #132	; 0x84
   2dfde:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2dfe0:	2280      	movs	r2, #128	; 0x80
   2dfe2:	2100      	movs	r1, #0
   2dfe4:	4668      	mov	r0, sp
   2dfe6:	f01a f8ef 	bl	481c8 <memset>
	if (buf == NULL) {
   2dfea:	b1e5      	cbz	r5, 2e026 <modem_info_short_get+0x4e>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2dfec:	4b11      	ldr	r3, [pc, #68]	; (2e034 <modem_info_short_get+0x5c>)
   2dfee:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   2dff2:	7aa3      	ldrb	r3, [r4, #10]
   2dff4:	2b03      	cmp	r3, #3
   2dff6:	d016      	beq.n	2e026 <modem_info_short_get+0x4e>
	err = at_cmd_write(modem_data[info]->cmd,
   2dff8:	2300      	movs	r3, #0
   2dffa:	2280      	movs	r2, #128	; 0x80
   2dffc:	4669      	mov	r1, sp
   2dffe:	6820      	ldr	r0, [r4, #0]
   2e000:	f7fe fc7c 	bl	2c8fc <at_cmd_write>
	if (err != 0) {
   2e004:	b990      	cbnz	r0, 2e02c <modem_info_short_get+0x54>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2e006:	4669      	mov	r1, sp
   2e008:	f104 0009 	add.w	r0, r4, #9
   2e00c:	f7ff ff56 	bl	2debc <modem_info_parse.isra.0>
	if (err) {
   2e010:	b938      	cbnz	r0, 2e022 <modem_info_short_get+0x4a>
	err = at_params_short_get(&m_param_list,
   2e012:	462a      	mov	r2, r5
   2e014:	7a21      	ldrb	r1, [r4, #8]
   2e016:	4808      	ldr	r0, [pc, #32]	; (2e038 <modem_info_short_get+0x60>)
   2e018:	f019 fbe0 	bl	477dc <at_params_short_get>
	return sizeof(uint16_t);
   2e01c:	2800      	cmp	r0, #0
   2e01e:	bf08      	it	eq
   2e020:	2002      	moveq	r0, #2
}
   2e022:	b021      	add	sp, #132	; 0x84
   2e024:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2e026:	f06f 0015 	mvn.w	r0, #21
   2e02a:	e7fa      	b.n	2e022 <modem_info_short_get+0x4a>
		return -EIO;
   2e02c:	f06f 0004 	mvn.w	r0, #4
   2e030:	e7f7      	b.n	2e022 <modem_info_short_get+0x4a>
   2e032:	bf00      	nop
   2e034:	0004a138 	.word	0x0004a138
   2e038:	20024d58 	.word	0x20024d58

0002e03c <modem_info_string_get>:
{
   2e03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e040:	460e      	mov	r6, r1
	size_t len = 0;
   2e042:	2500      	movs	r5, #0
{
   2e044:	b0a5      	sub	sp, #148	; 0x94
   2e046:	4680      	mov	r8, r0
   2e048:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2e04a:	2100      	movs	r1, #0
   2e04c:	2280      	movs	r2, #128	; 0x80
   2e04e:	a804      	add	r0, sp, #16
   2e050:	f01a f8ba 	bl	481c8 <memset>
	size_t len = 0;
   2e054:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   2e056:	2e00      	cmp	r6, #0
   2e058:	f000 80e7 	beq.w	2e22a <modem_info_string_get+0x1ee>
   2e05c:	f1b9 0f00 	cmp.w	r9, #0
   2e060:	f000 80e3 	beq.w	2e22a <modem_info_string_get+0x1ee>
	err = at_cmd_write(modem_data[info]->cmd,
   2e064:	4b75      	ldr	r3, [pc, #468]	; (2e23c <modem_info_string_get+0x200>)
   2e066:	2280      	movs	r2, #128	; 0x80
   2e068:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2e06c:	a904      	add	r1, sp, #16
   2e06e:	462b      	mov	r3, r5
   2e070:	f8da 0000 	ldr.w	r0, [sl]
   2e074:	f7fe fc42 	bl	2c8fc <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   2e078:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   2e07c:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   2e07e:	d10c      	bne.n	2e09a <modem_info_string_get+0x5e>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2e080:	f10d 0119 	add.w	r1, sp, #25
   2e084:	4630      	mov	r0, r6
   2e086:	f01a fa54 	bl	48532 <strcpy>
		return strlen(buf);
   2e08a:	4630      	mov	r0, r6
   2e08c:	f7ef f8ea 	bl	1d264 <strlen>
   2e090:	4683      	mov	fp, r0
}
   2e092:	4658      	mov	r0, fp
   2e094:	b025      	add	sp, #148	; 0x94
   2e096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   2e09a:	f1b8 0f09 	cmp.w	r8, #9
   2e09e:	d039      	beq.n	2e114 <modem_info_string_get+0xd8>
	if (err != 0) {
   2e0a0:	2c00      	cmp	r4, #0
   2e0a2:	f040 80c5 	bne.w	2e230 <modem_info_string_get+0x1f4>
	size_t ip_str_len = 0;
   2e0a6:	4627      	mov	r7, r4
	size_t cmd_rsp_idx = 0;
   2e0a8:	9401      	str	r4, [sp, #4]
	if (info == MODEM_INFO_IP_ADDRESS) {
   2e0aa:	9b01      	ldr	r3, [sp, #4]
   2e0ac:	aa04      	add	r2, sp, #16
   2e0ae:	f1b8 0f09 	cmp.w	r8, #9
   2e0b2:	eb02 0b03 	add.w	fp, r2, r3
   2e0b6:	d10e      	bne.n	2e0d6 <modem_info_string_get+0x9a>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   2e0b8:	4961      	ldr	r1, [pc, #388]	; (2e240 <modem_info_string_get+0x204>)
   2e0ba:	4658      	mov	r0, fp
   2e0bc:	f01a fa8e 	bl	485dc <strstr>
		if (ip_str_end == NULL) {
   2e0c0:	2800      	cmp	r0, #0
   2e0c2:	f000 80b8 	beq.w	2e236 <modem_info_string_get+0x1fa>
		recv_buf[++ip_str_len] = 0;
   2e0c6:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2e0c8:	eba0 000b 	sub.w	r0, r0, fp
		recv_buf[++ip_str_len] = 0;
   2e0cc:	1c47      	adds	r7, r0, #1
   2e0ce:	ab24      	add	r3, sp, #144	; 0x90
   2e0d0:	19da      	adds	r2, r3, r7
   2e0d2:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   2e0d6:	4659      	mov	r1, fp
   2e0d8:	f10a 0009 	add.w	r0, sl, #9
   2e0dc:	f7ff feee 	bl	2debc <modem_info_parse.isra.0>
	if (err) {
   2e0e0:	4683      	mov	fp, r0
   2e0e2:	b1d0      	cbz	r0, 2e11a <modem_info_string_get+0xde>
		LOG_ERR("Unable to parse data: %d", err);
   2e0e4:	2201      	movs	r2, #1
   2e0e6:	f04f 0000 	mov.w	r0, #0
   2e0ea:	4956      	ldr	r1, [pc, #344]	; (2e244 <modem_info_string_get+0x208>)
   2e0ec:	f362 0007 	bfi	r0, r2, #0, #8
   2e0f0:	4a55      	ldr	r2, [pc, #340]	; (2e248 <modem_info_string_get+0x20c>)
   2e0f2:	1a52      	subs	r2, r2, r1
   2e0f4:	08d2      	lsrs	r2, r2, #3
   2e0f6:	f362 108f 	bfi	r0, r2, #6, #10
   2e0fa:	465a      	mov	r2, fp
   2e0fc:	4953      	ldr	r1, [pc, #332]	; (2e24c <modem_info_string_get+0x210>)
			LOG_ERR("Unable to obtain short: %d", err);
   2e0fe:	f016 fb12 	bl	44726 <log_string_sync>
			return err;
   2e102:	e7c6      	b.n	2e092 <modem_info_string_get+0x56>
			++ip_str_end;
   2e104:	3001      	adds	r0, #1
			++ip_cnt;
   2e106:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2e108:	4639      	mov	r1, r7
   2e10a:	f01a fa67 	bl	485dc <strstr>
   2e10e:	2800      	cmp	r0, #0
   2e110:	d1f8      	bne.n	2e104 <modem_info_string_get+0xc8>
   2e112:	e7c5      	b.n	2e0a0 <modem_info_string_get+0x64>
	char *ip_str_end = recv_buf;
   2e114:	a804      	add	r0, sp, #16
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2e116:	4f4a      	ldr	r7, [pc, #296]	; (2e240 <modem_info_string_get+0x204>)
   2e118:	e7f6      	b.n	2e108 <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2e11a:	f89a 300a 	ldrb.w	r3, [sl, #10]
   2e11e:	2b01      	cmp	r3, #1
   2e120:	d122      	bne.n	2e168 <modem_info_string_get+0x12c>
		err = at_params_short_get(&m_param_list,
   2e122:	f10d 020a 	add.w	r2, sp, #10
   2e126:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2e12a:	4849      	ldr	r0, [pc, #292]	; (2e250 <modem_info_string_get+0x214>)
   2e12c:	f019 fb56 	bl	477dc <at_params_short_get>
		if (err) {
   2e130:	4683      	mov	fp, r0
   2e132:	b168      	cbz	r0, 2e150 <modem_info_string_get+0x114>
			LOG_ERR("Unable to obtain short: %d", err);
   2e134:	2201      	movs	r2, #1
   2e136:	f04f 0000 	mov.w	r0, #0
   2e13a:	4942      	ldr	r1, [pc, #264]	; (2e244 <modem_info_string_get+0x208>)
   2e13c:	f362 0007 	bfi	r0, r2, #0, #8
   2e140:	4a41      	ldr	r2, [pc, #260]	; (2e248 <modem_info_string_get+0x20c>)
   2e142:	1a52      	subs	r2, r2, r1
   2e144:	08d2      	lsrs	r2, r2, #3
   2e146:	f362 108f 	bfi	r0, r2, #6, #10
   2e14a:	4942      	ldr	r1, [pc, #264]	; (2e254 <modem_info_string_get+0x218>)
   2e14c:	465a      	mov	r2, fp
   2e14e:	e7d6      	b.n	2e0fe <modem_info_string_get+0xc2>
		err = snprintf(buf, buf_size, "%d", param_value);
   2e150:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2e154:	4a40      	ldr	r2, [pc, #256]	; (2e258 <modem_info_string_get+0x21c>)
   2e156:	4649      	mov	r1, r9
   2e158:	4630      	mov	r0, r6
   2e15a:	f014 fbcb 	bl	428f4 <sniprintf>
		if ((err <= 0) || (err > buf_size)) {
   2e15e:	4548      	cmp	r0, r9
   2e160:	d915      	bls.n	2e18e <modem_info_string_get+0x152>
			return -EMSGSIZE;
   2e162:	f06f 0b79 	mvn.w	fp, #121	; 0x79
   2e166:	e794      	b.n	2e092 <modem_info_string_get+0x56>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2e168:	2b03      	cmp	r3, #3
   2e16a:	d110      	bne.n	2e18e <modem_info_string_get+0x152>
		len = buf_size - out_buf_len;
   2e16c:	eba9 0304 	sub.w	r3, r9, r4
   2e170:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   2e172:	1932      	adds	r2, r6, r4
   2e174:	ab03      	add	r3, sp, #12
   2e176:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2e17a:	4835      	ldr	r0, [pc, #212]	; (2e250 <modem_info_string_get+0x214>)
   2e17c:	f019 fb5b 	bl	47836 <at_params_string_get>
		if (err != 0) {
   2e180:	4683      	mov	fp, r0
   2e182:	2800      	cmp	r0, #0
   2e184:	d185      	bne.n	2e092 <modem_info_string_get+0x56>
		} else if (len >= buf_size) {
   2e186:	9a03      	ldr	r2, [sp, #12]
   2e188:	454a      	cmp	r2, r9
   2e18a:	d2ea      	bcs.n	2e162 <modem_info_string_get+0x126>
		buf[len] = 0;
   2e18c:	54b0      	strb	r0, [r6, r2]
	if (info == MODEM_INFO_ICCID) {
   2e18e:	f1b8 0f0e 	cmp.w	r8, #14
   2e192:	d122      	bne.n	2e1da <modem_info_string_get+0x19e>
   2e194:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2e196:	4630      	mov	r0, r6
   2e198:	f7ef f864 	bl	1d264 <strlen>
   2e19c:	1ca3      	adds	r3, r4, #2
   2e19e:	1ba4      	subs	r4, r4, r6
   2e1a0:	42a0      	cmp	r0, r4
   2e1a2:	d810      	bhi.n	2e1c6 <modem_info_string_get+0x18a>
		if ((len == ICCID_LEN) &&
   2e1a4:	9b03      	ldr	r3, [sp, #12]
   2e1a6:	2b14      	cmp	r3, #20
   2e1a8:	d106      	bne.n	2e1b8 <modem_info_string_get+0x17c>
   2e1aa:	7cf3      	ldrb	r3, [r6, #19]
   2e1ac:	2b46      	cmp	r3, #70	; 0x46
   2e1ae:	d103      	bne.n	2e1b8 <modem_info_string_get+0x17c>
			buf[len - 1] = '\0';
   2e1b0:	2300      	movs	r3, #0
   2e1b2:	74f3      	strb	r3, [r6, #19]
			--len;
   2e1b4:	2313      	movs	r3, #19
   2e1b6:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   2e1b8:	9b03      	ldr	r3, [sp, #12]
   2e1ba:	2b00      	cmp	r3, #0
   2e1bc:	bf14      	ite	ne
   2e1be:	469b      	movne	fp, r3
   2e1c0:	f06f 0b85 	mvneq.w	fp, #133	; 0x85
   2e1c4:	e765      	b.n	2e092 <modem_info_string_get+0x56>
		current_char = buf[i];
   2e1c6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   2e1ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   2e1ce:	461c      	mov	r4, r3
		buf[i] = next_char;
   2e1d0:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2e1d4:	f803 2c01 	strb.w	r2, [r3, #-1]
   2e1d8:	e7dd      	b.n	2e196 <modem_info_string_get+0x15a>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   2e1da:	f1b8 0f09 	cmp.w	r8, #9
   2e1de:	d1eb      	bne.n	2e1b8 <modem_info_string_get+0x17c>
   2e1e0:	2d00      	cmp	r5, #0
   2e1e2:	dde9      	ble.n	2e1b8 <modem_info_string_get+0x17c>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   2e1e4:	eb06 0b04 	add.w	fp, r6, r4
   2e1e8:	491c      	ldr	r1, [pc, #112]	; (2e25c <modem_info_string_get+0x220>)
   2e1ea:	4658      	mov	r0, fp
   2e1ec:	f01a f9f6 	bl	485dc <strstr>
		if (ip_v6_str) {
   2e1f0:	b128      	cbz	r0, 2e1fe <modem_info_string_get+0x1c2>
			*ip_v6_str = 0;
   2e1f2:	2200      	movs	r2, #0
   2e1f4:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   2e1f6:	4658      	mov	r0, fp
   2e1f8:	f7ef f834 	bl	1d264 <strlen>
   2e1fc:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   2e1fe:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   2e200:	2d01      	cmp	r5, #1
		out_buf_len += len;
   2e202:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   2e204:	d00c      	beq.n	2e220 <modem_info_string_get+0x1e4>
			err = snprintf(&buf[out_buf_len],
   2e206:	eba9 0b04 	sub.w	fp, r9, r4
   2e20a:	4a15      	ldr	r2, [pc, #84]	; (2e260 <modem_info_string_get+0x224>)
   2e20c:	4659      	mov	r1, fp
   2e20e:	1930      	adds	r0, r6, r4
   2e210:	f014 fb70 	bl	428f4 <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   2e214:	f1bb 0f01 	cmp.w	fp, #1
   2e218:	d9a3      	bls.n	2e162 <modem_info_string_get+0x126>
			cmd_rsp_idx = ip_str_len + 1;
   2e21a:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   2e21c:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   2e21e:	9301      	str	r3, [sp, #4]
		if (--ip_cnt) {
   2e220:	3d01      	subs	r5, #1
   2e222:	f47f af42 	bne.w	2e0aa <modem_info_string_get+0x6e>
			len = out_buf_len;
   2e226:	9403      	str	r4, [sp, #12]
   2e228:	e7c6      	b.n	2e1b8 <modem_info_string_get+0x17c>
		return -EINVAL;
   2e22a:	f06f 0b15 	mvn.w	fp, #21
   2e22e:	e730      	b.n	2e092 <modem_info_string_get+0x56>
		return -EIO;
   2e230:	f06f 0b04 	mvn.w	fp, #4
   2e234:	e72d      	b.n	2e092 <modem_info_string_get+0x56>
			return -EFAULT;
   2e236:	f06f 0b0d 	mvn.w	fp, #13
   2e23a:	e72a      	b.n	2e092 <modem_info_string_get+0x56>
   2e23c:	0004a138 	.word	0x0004a138
   2e240:	0005121d 	.word	0x0005121d
   2e244:	00049788 	.word	0x00049788
   2e248:	00049840 	.word	0x00049840
   2e24c:	0004eb50 	.word	0x0004eb50
   2e250:	20024d58 	.word	0x20024d58
   2e254:	0004eb69 	.word	0x0004eb69
   2e258:	0004fec5 	.word	0x0004fec5
   2e25c:	0004c36e 	.word	0x0004c36e
   2e260:	0004bd18 	.word	0x0004bd18

0002e264 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   2e264:	4b12      	ldr	r3, [pc, #72]	; (2e2b0 <modem_info_rsrp_register+0x4c>)
{
   2e266:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   2e268:	4912      	ldr	r1, [pc, #72]	; (2e2b4 <modem_info_rsrp_register+0x50>)
	modem_info_rsrp_cb = cb;
   2e26a:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   2e26c:	2000      	movs	r0, #0
   2e26e:	f7fe fc75 	bl	2cb5c <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   2e272:	4604      	mov	r4, r0
   2e274:	b180      	cbz	r0, 2e298 <modem_info_rsrp_register+0x34>
		LOG_ERR("Can't register handler rc=%d", rc);
   2e276:	2301      	movs	r3, #1
   2e278:	f04f 0000 	mov.w	r0, #0
   2e27c:	4a0e      	ldr	r2, [pc, #56]	; (2e2b8 <modem_info_rsrp_register+0x54>)
   2e27e:	f363 0007 	bfi	r0, r3, #0, #8
   2e282:	4b0e      	ldr	r3, [pc, #56]	; (2e2bc <modem_info_rsrp_register+0x58>)
   2e284:	490e      	ldr	r1, [pc, #56]	; (2e2c0 <modem_info_rsrp_register+0x5c>)
   2e286:	1a9b      	subs	r3, r3, r2
   2e288:	08db      	lsrs	r3, r3, #3
   2e28a:	f363 108f 	bfi	r0, r3, #6, #10
   2e28e:	4622      	mov	r2, r4
   2e290:	f016 fa49 	bl	44726 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   2e294:	4620      	mov	r0, r4
   2e296:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   2e298:	4603      	mov	r3, r0
   2e29a:	4602      	mov	r2, r0
   2e29c:	4601      	mov	r1, r0
   2e29e:	4809      	ldr	r0, [pc, #36]	; (2e2c4 <modem_info_rsrp_register+0x60>)
   2e2a0:	f7fe fb2c 	bl	2c8fc <at_cmd_write>
   2e2a4:	1e04      	subs	r4, r0, #0
		return -EIO;
   2e2a6:	bf18      	it	ne
   2e2a8:	f06f 0404 	mvnne.w	r4, #4
   2e2ac:	e7f2      	b.n	2e294 <modem_info_rsrp_register+0x30>
   2e2ae:	bf00      	nop
   2e2b0:	20024d60 	.word	0x20024d60
   2e2b4:	0002deed 	.word	0x0002deed
   2e2b8:	00049788 	.word	0x00049788
   2e2bc:	00049840 	.word	0x00049840
   2e2c0:	0004eacc 	.word	0x0004eacc
   2e2c4:	0004eae9 	.word	0x0004eae9

0002e2c8 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2e2c8:	210a      	movs	r1, #10
   2e2ca:	4801      	ldr	r0, [pc, #4]	; (2e2d0 <modem_info_init+0x8>)
   2e2cc:	f019 b9db 	b.w	47686 <at_params_list_init>
   2e2d0:	20024d58 	.word	0x20024d58

0002e2d4 <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2e2d4:	b538      	push	{r3, r4, r5, lr}
   2e2d6:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2e2d8:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   2e2dc:	f7ff fe5a 	bl	2df94 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2e2e0:	2803      	cmp	r0, #3
   2e2e2:	d11c      	bne.n	2e31e <modem_data_get+0x4a>
		ret = modem_info_string_get(param->type,
   2e2e4:	2264      	movs	r2, #100	; 0x64
   2e2e6:	1ca9      	adds	r1, r5, #2
   2e2e8:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2e2ec:	f7ff fea6 	bl	2e03c <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2e2f0:	1e04      	subs	r4, r0, #0
   2e2f2:	db02      	blt.n	2e2fa <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2e2f4:	2400      	movs	r4, #0
}
   2e2f6:	4620      	mov	r0, r4
   2e2f8:	bd38      	pop	{r3, r4, r5, pc}
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2e2fa:	2301      	movs	r3, #1
   2e2fc:	f04f 0000 	mov.w	r0, #0
   2e300:	4a13      	ldr	r2, [pc, #76]	; (2e350 <modem_data_get+0x7c>)
   2e302:	f363 0007 	bfi	r0, r3, #0, #8
   2e306:	4b13      	ldr	r3, [pc, #76]	; (2e354 <modem_data_get+0x80>)
   2e308:	4913      	ldr	r1, [pc, #76]	; (2e358 <modem_data_get+0x84>)
   2e30a:	1a9b      	subs	r3, r3, r2
   2e30c:	08db      	lsrs	r3, r3, #3
   2e30e:	f363 108f 	bfi	r0, r3, #6, #10
   2e312:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   2e316:	4623      	mov	r3, r4
   2e318:	f016 fa05 	bl	44726 <log_string_sync>
			return ret;
   2e31c:	e7eb      	b.n	2e2f6 <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2e31e:	2801      	cmp	r0, #1
   2e320:	d1e8      	bne.n	2e2f4 <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2e322:	4629      	mov	r1, r5
   2e324:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2e328:	f7ff fe56 	bl	2dfd8 <modem_info_short_get>
		if (ret < 0) {
   2e32c:	1e04      	subs	r4, r0, #0
   2e32e:	dae1      	bge.n	2e2f4 <modem_data_get+0x20>
			LOG_ERR("Link data not obtained: %d", ret);
   2e330:	2301      	movs	r3, #1
   2e332:	f04f 0000 	mov.w	r0, #0
   2e336:	4a06      	ldr	r2, [pc, #24]	; (2e350 <modem_data_get+0x7c>)
   2e338:	f363 0007 	bfi	r0, r3, #0, #8
   2e33c:	4b05      	ldr	r3, [pc, #20]	; (2e354 <modem_data_get+0x80>)
   2e33e:	4907      	ldr	r1, [pc, #28]	; (2e35c <modem_data_get+0x88>)
   2e340:	1a9b      	subs	r3, r3, r2
   2e342:	08db      	lsrs	r3, r3, #3
   2e344:	f363 108f 	bfi	r0, r3, #6, #10
   2e348:	4622      	mov	r2, r4
   2e34a:	f016 f9ec 	bl	44726 <log_string_sync>
			return ret;
   2e34e:	e7d2      	b.n	2e2f6 <modem_data_get+0x22>
   2e350:	00049788 	.word	0x00049788
   2e354:	00049850 	.word	0x00049850
   2e358:	0004ecda 	.word	0x0004ecda
   2e35c:	0004ecf8 	.word	0x0004ecf8

0002e360 <modem_info_params_init>:
	if (modem == NULL) {
   2e360:	2800      	cmp	r0, #0
   2e362:	d046      	beq.n	2e3f2 <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   2e364:	2301      	movs	r3, #1
   2e366:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2e36a:	2302      	movs	r3, #2
   2e36c:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2e370:	2303      	movs	r3, #3
   2e372:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2e376:	2305      	movs	r3, #5
   2e378:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   2e37c:	2306      	movs	r3, #6
   2e37e:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2e382:	2307      	movs	r3, #7
   2e384:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2e388:	2308      	movs	r3, #8
   2e38a:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2e38e:	2309      	movs	r3, #9
   2e390:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2e394:	2304      	movs	r3, #4
   2e396:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   2e39a:	230f      	movs	r3, #15
   2e39c:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2e3a0:	2310      	movs	r3, #16
   2e3a2:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   2e3a6:	2311      	movs	r3, #17
   2e3a8:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   2e3ac:	2314      	movs	r3, #20
   2e3ae:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   2e3b2:	2315      	movs	r3, #21
   2e3b4:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2e3b8:	230a      	movs	r3, #10
   2e3ba:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2e3be:	230e      	movs	r3, #14
   2e3c0:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2e3c4:	2312      	movs	r3, #18
   2e3c6:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   2e3ca:	230d      	movs	r3, #13
   2e3cc:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   2e3d0:	230b      	movs	r3, #11
   2e3d2:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2e3d6:	2313      	movs	r3, #19
   2e3d8:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   2e3dc:	4b06      	ldr	r3, [pc, #24]	; (2e3f8 <modem_info_params_init+0x98>)
   2e3de:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2e3e2:	4b06      	ldr	r3, [pc, #24]	; (2e3fc <modem_info_params_init+0x9c>)
   2e3e4:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2e3e8:	4b05      	ldr	r3, [pc, #20]	; (2e400 <modem_info_params_init+0xa0>)
   2e3ea:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   2e3ee:	2000      	movs	r0, #0
   2e3f0:	4770      	bx	lr
		return -EINVAL;
   2e3f2:	f06f 0015 	mvn.w	r0, #21
}
   2e3f6:	4770      	bx	lr
   2e3f8:	0004ed68 	.word	0x0004ed68
   2e3fc:	0004ed7a 	.word	0x0004ed7a
   2e400:	0004b7d4 	.word	0x0004b7d4

0002e404 <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2e404:	b570      	push	{r4, r5, r6, lr}
	int ret;

	if (modem == NULL) {
   2e406:	4604      	mov	r4, r0
   2e408:	2800      	cmp	r0, #0
   2e40a:	f000 80be 	beq.w	2e58a <modem_info_params_get+0x186>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2e40e:	f7ff ff61 	bl	2e2d4 <modem_data_get>
   2e412:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   2e414:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2e418:	f7ff ff5c 	bl	2e2d4 <modem_data_get>
   2e41c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2e41e:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2e422:	f7ff ff57 	bl	2e2d4 <modem_data_get>
   2e426:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   2e428:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2e42c:	f7ff ff52 	bl	2e2d4 <modem_data_get>
   2e430:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2e432:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2e436:	f7ff ff4d 	bl	2e2d4 <modem_data_get>
   2e43a:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2e43c:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2e440:	f7ff ff48 	bl	2e2d4 <modem_data_get>
   2e444:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2e446:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2e44a:	f7ff ff43 	bl	2e2d4 <modem_data_get>
   2e44e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2e450:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2e454:	f7ff ff3e 	bl	2e2d4 <modem_data_get>
   2e458:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2e45a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2e45e:	f7ff ff39 	bl	2e2d4 <modem_data_get>
   2e462:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2e464:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2e468:	f7ff ff34 	bl	2e2d4 <modem_data_get>
   2e46c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2e46e:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2e472:	f7ff ff2f 	bl	2e2d4 <modem_data_get>
   2e476:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
   2e478:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
   2e47c:	f7ff ff2a 	bl	2e2d4 <modem_data_get>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e480:	f8b4 2152 	ldrh.w	r2, [r4, #338]	; 0x152
   2e484:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
   2e488:	4405      	add	r5, r0
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2e48a:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2e48e:	f8a4 21c2 	strh.w	r2, [r4, #450]	; 0x1c2
   2e492:	7083      	strb	r3, [r0, #2]
   2e494:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
   2e498:	f8b4 2155 	ldrh.w	r2, [r4, #341]	; 0x155
   2e49c:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
   2e4a0:	f8a4 2232 	strh.w	r2, [r4, #562]	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2e4a4:	2100      	movs	r1, #0
   2e4a6:	220a      	movs	r2, #10
   2e4a8:	f014 fb06 	bl	42ab8 <strtol>
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2e4ac:	f204 2632 	addw	r6, r4, #562	; 0x232
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2e4b0:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2e4b4:	220a      	movs	r2, #10
   2e4b6:	2100      	movs	r1, #0
   2e4b8:	4630      	mov	r0, r6
   2e4ba:	f014 fafd 	bl	42ab8 <strtol>
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2e4be:	2210      	movs	r2, #16
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2e4c0:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2e4c4:	2100      	movs	r1, #0
   2e4c6:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   2e4ca:	f014 faf5 	bl	42ab8 <strtol>
   2e4ce:	f7ee f909 	bl	1c6e4 <__aeabi_i2d>
   2e4d2:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   2e4d6:	e9c6 0100 	strd	r0, r1, [r6]
	area_code->value_string[4] = '\0';
   2e4da:	2100      	movs	r1, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2e4dc:	2210      	movs	r2, #16
	area_code->value_string[4] = '\0';
   2e4de:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2e4e2:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2e4e6:	f014 fae7 	bl	42ab8 <strtol>
   2e4ea:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2e4ee:	b195      	cbz	r5, 2e516 <modem_info_params_get+0x112>
			LOG_ERR("Network data not obtained: %d", ret);
   2e4f0:	2301      	movs	r3, #1
   2e4f2:	f04f 0000 	mov.w	r0, #0
   2e4f6:	4a26      	ldr	r2, [pc, #152]	; (2e590 <modem_info_params_get+0x18c>)
   2e4f8:	f363 0007 	bfi	r0, r3, #0, #8
   2e4fc:	4b25      	ldr	r3, [pc, #148]	; (2e594 <modem_info_params_get+0x190>)
   2e4fe:	4926      	ldr	r1, [pc, #152]	; (2e598 <modem_info_params_get+0x194>)
   2e500:	1a9b      	subs	r3, r3, r2
   2e502:	462a      	mov	r2, r5
   2e504:	08db      	lsrs	r3, r3, #3
   2e506:	f363 108f 	bfi	r0, r3, #6, #10
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2e50a:	f016 f90c 	bl	44726 <log_string_sync>
			return -EAGAIN;
   2e50e:	f06f 020a 	mvn.w	r2, #10
		}
	}

	return 0;
}
   2e512:	4610      	mov	r0, r2
   2e514:	bd70      	pop	{r4, r5, r6, pc}
		ret = modem_data_get(&modem->sim.uicc);
   2e516:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2e51a:	f7ff fedb 	bl	2e2d4 <modem_data_get>
   2e51e:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   2e520:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2e524:	f7ff fed6 	bl	2e2d4 <modem_data_get>
   2e528:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2e52a:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2e52e:	f7ff fed1 	bl	2e2d4 <modem_data_get>
		if (ret) {
   2e532:	182a      	adds	r2, r5, r0
   2e534:	d00c      	beq.n	2e550 <modem_info_params_get+0x14c>
			LOG_ERR("Sim data not obtained: %d", ret);
   2e536:	2301      	movs	r3, #1
   2e538:	f04f 0000 	mov.w	r0, #0
   2e53c:	4914      	ldr	r1, [pc, #80]	; (2e590 <modem_info_params_get+0x18c>)
   2e53e:	f363 0007 	bfi	r0, r3, #0, #8
   2e542:	4b14      	ldr	r3, [pc, #80]	; (2e594 <modem_info_params_get+0x190>)
   2e544:	1a5b      	subs	r3, r3, r1
   2e546:	08db      	lsrs	r3, r3, #3
   2e548:	f363 108f 	bfi	r0, r3, #6, #10
   2e54c:	4913      	ldr	r1, [pc, #76]	; (2e59c <modem_info_params_get+0x198>)
   2e54e:	e7dc      	b.n	2e50a <modem_info_params_get+0x106>
		ret = modem_data_get(&modem->device.modem_fw);
   2e550:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2e554:	f7ff febe 	bl	2e2d4 <modem_data_get>
   2e558:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2e55a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2e55e:	f7ff feb9 	bl	2e2d4 <modem_data_get>
   2e562:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2e564:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2e568:	f7ff feb4 	bl	2e2d4 <modem_data_get>
		if (ret) {
   2e56c:	182a      	adds	r2, r5, r0
   2e56e:	d0d0      	beq.n	2e512 <modem_info_params_get+0x10e>
			LOG_ERR("Device data not obtained: %d", ret);
   2e570:	2301      	movs	r3, #1
   2e572:	f04f 0000 	mov.w	r0, #0
   2e576:	4906      	ldr	r1, [pc, #24]	; (2e590 <modem_info_params_get+0x18c>)
   2e578:	f363 0007 	bfi	r0, r3, #0, #8
   2e57c:	4b05      	ldr	r3, [pc, #20]	; (2e594 <modem_info_params_get+0x190>)
   2e57e:	1a5b      	subs	r3, r3, r1
   2e580:	08db      	lsrs	r3, r3, #3
   2e582:	f363 108f 	bfi	r0, r3, #6, #10
   2e586:	4906      	ldr	r1, [pc, #24]	; (2e5a0 <modem_info_params_get+0x19c>)
   2e588:	e7bf      	b.n	2e50a <modem_info_params_get+0x106>
		return -EINVAL;
   2e58a:	f06f 0215 	mvn.w	r2, #21
   2e58e:	e7c0      	b.n	2e512 <modem_info_params_get+0x10e>
   2e590:	00049788 	.word	0x00049788
   2e594:	00049850 	.word	0x00049850
   2e598:	0004ed13 	.word	0x0004ed13
   2e59c:	0004ed31 	.word	0x0004ed31
   2e5a0:	0004ed4b 	.word	0x0004ed4b

0002e5a4 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   2e5a4:	b570      	push	{r4, r5, r6, lr}
   2e5a6:	460e      	mov	r6, r1
   2e5a8:	b09a      	sub	sp, #104	; 0x68

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2e5aa:	4605      	mov	r5, r0
   2e5ac:	2800      	cmp	r0, #0
   2e5ae:	d065      	beq.n	2e67c <network_data_add+0xd8>
   2e5b0:	2900      	cmp	r1, #0
   2e5b2:	d063      	beq.n	2e67c <network_data_add+0xd8>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   2e5b4:	f019 f9b1 	bl	4791a <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   2e5b8:	4631      	mov	r1, r6
	total_len = json_add_data(&network->current_band, json_obj);
   2e5ba:	4604      	mov	r4, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2e5bc:	f105 0070 	add.w	r0, r5, #112	; 0x70
   2e5c0:	f019 f9ab 	bl	4791a <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   2e5c4:	4631      	mov	r1, r6
	total_len += json_add_data(&network->sup_band, json_obj);
   2e5c6:	4404      	add	r4, r0
	total_len += json_add_data(&network->area_code, json_obj);
   2e5c8:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   2e5cc:	f019 f9a5 	bl	4791a <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   2e5d0:	4631      	mov	r1, r6
	total_len += json_add_data(&network->area_code, json_obj);
   2e5d2:	4404      	add	r4, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   2e5d4:	f505 70a8 	add.w	r0, r5, #336	; 0x150
   2e5d8:	f019 f99f 	bl	4791a <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2e5dc:	4631      	mov	r1, r6
	total_len += json_add_data(&network->current_operator, json_obj);
   2e5de:	4404      	add	r4, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   2e5e0:	f505 7044 	add.w	r0, r5, #784	; 0x310
   2e5e4:	f019 f999 	bl	4791a <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2e5e8:	4631      	mov	r1, r6
	total_len += json_add_data(&network->ip_address, json_obj);
   2e5ea:	4404      	add	r4, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   2e5ec:	f505 7060 	add.w	r0, r5, #896	; 0x380
   2e5f0:	f019 f993 	bl	4791a <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2e5f4:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2e5f6:	4404      	add	r4, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2e5f8:	f895 030c 	ldrb.w	r0, [r5, #780]	; 0x30c
   2e5fc:	f7ff fcd4 	bl	2dfa8 <modem_info_name_get>
	data_name[len] =  '\0';
   2e600:	ab1a      	add	r3, sp, #104	; 0x68
   2e602:	4418      	add	r0, r3
   2e604:	2300      	movs	r3, #0
   2e606:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   2e60a:	f505 63c4 	add.w	r3, r5, #1568	; 0x620
	json_num = cJSON_CreateNumber(num);
   2e60e:	ed93 0b00 	vldr	d0, [r3]
   2e612:	f7ef fa69 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2e616:	4602      	mov	r2, r0
   2e618:	b120      	cbz	r0, 2e624 <network_data_add+0x80>
	cJSON_AddItemToObject(parent, str, item);
   2e61a:	a901      	add	r1, sp, #4
   2e61c:	4630      	mov	r0, r6
   2e61e:	f018 fc34 	bl	46e8a <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   2e622:	3408      	adds	r4, #8
	}

	if (network->lte_mode.value == 1) {
   2e624:	f8b5 33f0 	ldrh.w	r3, [r5, #1008]	; 0x3f0
   2e628:	f505 62c5 	add.w	r2, r5, #1576	; 0x628
   2e62c:	2b01      	cmp	r3, #1
   2e62e:	d11a      	bne.n	2e666 <network_data_add+0xc2>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2e630:	4610      	mov	r0, r2
   2e632:	4914      	ldr	r1, [pc, #80]	; (2e684 <network_data_add+0xe0>)
   2e634:	f019 ff60 	bl	484f8 <strcat>
   2e638:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   2e63a:	3406      	adds	r4, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   2e63c:	f8b5 34d0 	ldrh.w	r3, [r5, #1232]	; 0x4d0
   2e640:	2b01      	cmp	r3, #1
   2e642:	d105      	bne.n	2e650 <network_data_add+0xac>
   2e644:	4610      	mov	r0, r2
   2e646:	4910      	ldr	r1, [pc, #64]	; (2e688 <network_data_add+0xe4>)
   2e648:	f019 ff56 	bl	484f8 <strcat>
   2e64c:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   2e64e:	3405      	adds	r4, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2e650:	490e      	ldr	r1, [pc, #56]	; (2e68c <network_data_add+0xe8>)
   2e652:	4630      	mov	r0, r6
   2e654:	f019 f94b 	bl	478ee <json_add_str>

	if (ret) {
   2e658:	b110      	cbz	r0, 2e660 <network_data_add+0xbc>
		printk("Unable to add the network mode");
   2e65a:	480d      	ldr	r0, [pc, #52]	; (2e690 <network_data_add+0xec>)
   2e65c:	f015 fe38 	bl	442d0 <printk>
	}

	return total_len;
}
   2e660:	4620      	mov	r0, r4
   2e662:	b01a      	add	sp, #104	; 0x68
   2e664:	bd70      	pop	{r4, r5, r6, pc}
	} else if (network->nbiot_mode.value == 1) {
   2e666:	f8b5 3460 	ldrh.w	r3, [r5, #1120]	; 0x460
   2e66a:	2b01      	cmp	r3, #1
   2e66c:	d1e6      	bne.n	2e63c <network_data_add+0x98>
   2e66e:	4610      	mov	r0, r2
   2e670:	4908      	ldr	r1, [pc, #32]	; (2e694 <network_data_add+0xf0>)
   2e672:	f019 ff41 	bl	484f8 <strcat>
		total_len += sizeof(nbiot_string);
   2e676:	3407      	adds	r4, #7
   2e678:	4602      	mov	r2, r0
   2e67a:	e7df      	b.n	2e63c <network_data_add+0x98>
		return -EINVAL;
   2e67c:	f06f 0415 	mvn.w	r4, #21
   2e680:	e7ee      	b.n	2e660 <network_data_add+0xbc>
   2e682:	bf00      	nop
   2e684:	0004edc6 	.word	0x0004edc6
   2e688:	0004edc1 	.word	0x0004edc1
   2e68c:	0004edf2 	.word	0x0004edf2
   2e690:	0004edfe 	.word	0x0004edfe
   2e694:	0004edeb 	.word	0x0004edeb

0002e698 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   2e698:	b570      	push	{r4, r5, r6, lr}
   2e69a:	460d      	mov	r5, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2e69c:	4606      	mov	r6, r0
   2e69e:	b328      	cbz	r0, 2e6ec <device_data_add+0x54>
   2e6a0:	b321      	cbz	r1, 2e6ec <device_data_add+0x54>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2e6a2:	f019 f93a 	bl	4791a <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2e6a6:	4629      	mov	r1, r5
	total_len = json_add_data(&device->modem_fw, json_obj);
   2e6a8:	4604      	mov	r4, r0
	total_len += json_add_data(&device->battery, json_obj);
   2e6aa:	f106 0070 	add.w	r0, r6, #112	; 0x70
   2e6ae:	f019 f934 	bl	4791a <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2e6b2:	4629      	mov	r1, r5
	total_len += json_add_data(&device->battery, json_obj);
   2e6b4:	4404      	add	r4, r0
	total_len += json_add_data(&device->imei, json_obj);
   2e6b6:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   2e6ba:	f019 f92e 	bl	4791a <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2e6be:	f8d6 2150 	ldr.w	r2, [r6, #336]	; 0x150
	total_len += json_add_data(&device->imei, json_obj);
   2e6c2:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2e6c4:	490b      	ldr	r1, [pc, #44]	; (2e6f4 <device_data_add+0x5c>)
   2e6c6:	4628      	mov	r0, r5
   2e6c8:	f019 f911 	bl	478ee <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2e6cc:	f8d6 2154 	ldr.w	r2, [r6, #340]	; 0x154
	total_len += json_add_str(json_obj, "board", device->board);
   2e6d0:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2e6d2:	4909      	ldr	r1, [pc, #36]	; (2e6f8 <device_data_add+0x60>)
   2e6d4:	4628      	mov	r0, r5
   2e6d6:	f019 f90a 	bl	478ee <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2e6da:	f8d6 2158 	ldr.w	r2, [r6, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2e6de:	4404      	add	r4, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2e6e0:	4906      	ldr	r1, [pc, #24]	; (2e6fc <device_data_add+0x64>)
   2e6e2:	4628      	mov	r0, r5
   2e6e4:	f019 f903 	bl	478ee <json_add_str>
   2e6e8:	4420      	add	r0, r4

	return total_len;
}
   2e6ea:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e6ec:	f06f 0015 	mvn.w	r0, #21
   2e6f0:	e7fb      	b.n	2e6ea <device_data_add+0x52>
   2e6f2:	bf00      	nop
   2e6f4:	0004eda8 	.word	0x0004eda8
   2e6f8:	0004edae 	.word	0x0004edae
   2e6fc:	0004edb9 	.word	0x0004edb9

0002e700 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   2e700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e704:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   2e706:	460d      	mov	r5, r1
   2e708:	2900      	cmp	r1, #0
   2e70a:	d04f      	beq.n	2e7ac <modem_info_json_object_encode+0xac>
   2e70c:	2800      	cmp	r0, #0
   2e70e:	d04d      	beq.n	2e7ac <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   2e710:	4608      	mov	r0, r1
   2e712:	f018 fba0 	bl	46e56 <cJSON_GetArraySize>
   2e716:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   2e718:	f7fc fd64 	bl	2b1e4 <cJSON_CreateObject>
   2e71c:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   2e71e:	f7fc fd61 	bl	2b1e4 <cJSON_CreateObject>
   2e722:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   2e724:	f7fc fd5e 	bl	2b1e4 <cJSON_CreateObject>
   2e728:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   2e72a:	f1b8 0f00 	cmp.w	r8, #0
   2e72e:	d03a      	beq.n	2e7a6 <modem_info_json_object_encode+0xa6>
   2e730:	b3cf      	cbz	r7, 2e7a6 <modem_info_json_object_encode+0xa6>
   2e732:	b3c0      	cbz	r0, 2e7a6 <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   2e734:	4641      	mov	r1, r8
   2e736:	4648      	mov	r0, r9
   2e738:	f7ff ff34 	bl	2e5a4 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   2e73c:	2800      	cmp	r0, #0
   2e73e:	dd06      	ble.n	2e74e <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   2e740:	4642      	mov	r2, r8
   2e742:	491c      	ldr	r1, [pc, #112]	; (2e7b4 <modem_info_json_object_encode+0xb4>)
   2e744:	4628      	mov	r0, r5
   2e746:	f018 fba0 	bl	46e8a <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   2e74a:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   2e74e:	4639      	mov	r1, r7
   2e750:	f509 60c7 	add.w	r0, r9, #1592	; 0x638
   2e754:	f019 f925 	bl	479a2 <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   2e758:	2800      	cmp	r0, #0
   2e75a:	dd05      	ble.n	2e768 <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   2e75c:	463a      	mov	r2, r7
   2e75e:	4916      	ldr	r1, [pc, #88]	; (2e7b8 <modem_info_json_object_encode+0xb8>)
   2e760:	4628      	mov	r0, r5
   2e762:	f018 fb92 	bl	46e8a <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   2e766:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   2e768:	4631      	mov	r1, r6
   2e76a:	f509 60f1 	add.w	r0, r9, #1928	; 0x788
   2e76e:	f7ff ff93 	bl	2e698 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2e772:	2800      	cmp	r0, #0
   2e774:	dd05      	ble.n	2e782 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2e776:	4632      	mov	r2, r6
   2e778:	4910      	ldr	r1, [pc, #64]	; (2e7bc <modem_info_json_object_encode+0xbc>)
   2e77a:	4628      	mov	r0, r5
   2e77c:	f018 fb85 	bl	46e8a <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   2e780:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2e782:	4640      	mov	r0, r8
   2e784:	f7fc fc5a 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(sim_obj);
   2e788:	4638      	mov	r0, r7
   2e78a:	f7fc fc57 	bl	2b03c <cJSON_Delete>
	cJSON_Delete(device_obj);
   2e78e:	4630      	mov	r0, r6
   2e790:	f7fc fc54 	bl	2b03c <cJSON_Delete>

	if (obj_count >= 0) {
   2e794:	2c00      	cmp	r4, #0
   2e796:	db03      	blt.n	2e7a0 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   2e798:	4628      	mov	r0, r5
   2e79a:	f018 fb5c 	bl	46e56 <cJSON_GetArraySize>
   2e79e:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   2e7a0:	4620      	mov	r0, r4
   2e7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2e7a6:	f06f 040b 	mvn.w	r4, #11
   2e7aa:	e7ea      	b.n	2e782 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2e7ac:	f06f 0415 	mvn.w	r4, #21
   2e7b0:	e7f6      	b.n	2e7a0 <modem_info_json_object_encode+0xa0>
   2e7b2:	bf00      	nop
   2e7b4:	0004edcc 	.word	0x0004edcc
   2e7b8:	0004edd8 	.word	0x0004edd8
   2e7bc:	0004ede0 	.word	0x0004ede0

0002e7c0 <date_time_notify_event.constprop.1>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   2e7c0:	4b02      	ldr	r3, [pc, #8]	; (2e7cc <date_time_notify_event.constprop.1+0xc>)
   2e7c2:	681b      	ldr	r3, [r3, #0]
   2e7c4:	b10b      	cbz	r3, 2e7ca <date_time_notify_event.constprop.1+0xa>
		app_evt_handler(evt);
   2e7c6:	4802      	ldr	r0, [pc, #8]	; (2e7d0 <date_time_notify_event.constprop.1+0x10>)
   2e7c8:	4718      	bx	r3
	}
}
   2e7ca:	4770      	bx	lr
   2e7cc:	20024d64 	.word	0x20024d64
   2e7d0:	2002d08a 	.word	0x2002d08a

0002e7d4 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   2e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7d8:	4b80      	ldr	r3, [pc, #512]	; (2e9dc <new_date_time_get+0x208>)
		LOG_WRN("sntp_query, error: %d", err);
   2e7da:	4a81      	ldr	r2, [pc, #516]	; (2e9e0 <new_date_time_get+0x20c>)
{
   2e7dc:	b097      	sub	sp, #92	; 0x5c
		LOG_WRN("sntp_query, error: %d", err);
   2e7de:	1a9b      	subs	r3, r3, r2
   2e7e0:	f3c3 03c9 	ubfx	r3, r3, #3, #10
	if (time_aux.last_date_time_update == 0 ||
   2e7e4:	4d7f      	ldr	r5, [pc, #508]	; (2e9e4 <new_date_time_get+0x210>)
		LOG_WRN("sntp_query, error: %d", err);
   2e7e6:	9300      	str	r3, [sp, #0]
   2e7e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e7ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2e7f0:	487d      	ldr	r0, [pc, #500]	; (2e9e8 <new_date_time_get+0x214>)
   2e7f2:	f012 f8a7 	bl	40944 <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   2e7f6:	68ab      	ldr	r3, [r5, #8]
   2e7f8:	b19b      	cbz	r3, 2e822 <new_date_time_get+0x4e>
   2e7fa:	e9d5 2300 	ldrd	r2, r3, [r5]
   2e7fe:	4313      	orrs	r3, r2
   2e800:	d00f      	beq.n	2e822 <new_date_time_get+0x4e>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2e802:	f019 f8e6 	bl	479d2 <k_uptime_get>
   2e806:	2400      	movs	r4, #0
   2e808:	68ab      	ldr	r3, [r5, #8]
   2e80a:	1ac6      	subs	r6, r0, r3
   2e80c:	eb61 77e3 	sbc.w	r7, r1, r3, asr #31
   2e810:	4b76      	ldr	r3, [pc, #472]	; (2e9ec <new_date_time_get+0x218>)
   2e812:	42b3      	cmp	r3, r6
   2e814:	eb74 0307 	sbcs.w	r3, r4, r7
   2e818:	db03      	blt.n	2e822 <new_date_time_get+0x4e>
		LOG_DBG("Updating date time UTC...");

		err = current_time_check();
		if (err == 0) {
			LOG_DBG("Time successfully obtained");
			initial_valid_time = true;
   2e81a:	2201      	movs	r2, #1
   2e81c:	4b74      	ldr	r3, [pc, #464]	; (2e9f0 <new_date_time_get+0x21c>)

		LOG_DBG("Not getting time from NTP server");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   2e81e:	701a      	strb	r2, [r3, #0]
   2e820:	e05b      	b.n	2e8da <new_date_time_get+0x106>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   2e822:	2300      	movs	r3, #0
   2e824:	2221      	movs	r2, #33	; 0x21
   2e826:	a904      	add	r1, sp, #16
   2e828:	4872      	ldr	r0, [pc, #456]	; (2e9f4 <new_date_time_get+0x220>)
   2e82a:	f7fe f867 	bl	2c8fc <at_cmd_write>
	if (err) {
   2e82e:	2800      	cmp	r0, #0
   2e830:	d156      	bne.n	2e8e0 <new_date_time_get+0x10c>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   2e832:	2420      	movs	r4, #32
   2e834:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2e838:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   2e83c:	4620      	mov	r0, r4
   2e83e:	aa04      	add	r2, sp, #16
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2e840:	f812 3b01 	ldrb.w	r3, [r2], #1
   2e844:	3b2c      	subs	r3, #44	; 0x2c
   2e846:	b2db      	uxtb	r3, r3
   2e848:	2b0e      	cmp	r3, #14
   2e84a:	d805      	bhi.n	2e858 <new_date_time_get+0x84>
   2e84c:	fa21 f303 	lsr.w	r3, r1, r3
   2e850:	07de      	lsls	r6, r3, #31
			buf[i] = ' ';
   2e852:	bf48      	it	mi
   2e854:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2e858:	3c01      	subs	r4, #1
   2e85a:	d1f1      	bne.n	2e840 <new_date_time_get+0x6c>
	char *ptr_index = &buf[8];
   2e85c:	a806      	add	r0, sp, #24
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2e85e:	220a      	movs	r2, #10
   2e860:	a903      	add	r1, sp, #12
	char *ptr_index = &buf[8];
   2e862:	9003      	str	r0, [sp, #12]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2e864:	f014 f928 	bl	42ab8 <strtol>
   2e868:	3064      	adds	r0, #100	; 0x64
   2e86a:	9012      	str	r0, [sp, #72]	; 0x48
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2e86c:	220a      	movs	r2, #10
   2e86e:	a903      	add	r1, sp, #12
   2e870:	9803      	ldr	r0, [sp, #12]
   2e872:	f014 f921 	bl	42ab8 <strtol>
   2e876:	3801      	subs	r0, #1
   2e878:	9011      	str	r0, [sp, #68]	; 0x44
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2e87a:	220a      	movs	r2, #10
   2e87c:	a903      	add	r1, sp, #12
   2e87e:	9803      	ldr	r0, [sp, #12]
   2e880:	f014 f91a 	bl	42ab8 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2e884:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2e886:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2e888:	a903      	add	r1, sp, #12
   2e88a:	9803      	ldr	r0, [sp, #12]
   2e88c:	f014 f914 	bl	42ab8 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2e890:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2e892:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2e894:	a903      	add	r1, sp, #12
   2e896:	9803      	ldr	r0, [sp, #12]
   2e898:	f014 f90e 	bl	42ab8 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2e89c:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2e89e:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2e8a0:	a903      	add	r1, sp, #12
   2e8a2:	9803      	ldr	r0, [sp, #12]
   2e8a4:	f014 f908 	bl	42ab8 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2e8a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2e8aa:	900d      	str	r0, [sp, #52]	; 0x34
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2e8ac:	2b73      	cmp	r3, #115	; 0x73
   2e8ae:	d017      	beq.n	2e8e0 <new_date_time_get+0x10c>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2e8b0:	a80d      	add	r0, sp, #52	; 0x34
   2e8b2:	f7f6 f805 	bl	248c0 <timeutil_timegm64>
   2e8b6:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   2e8ba:	fba0 2307 	umull	r2, r3, r0, r7
   2e8be:	fb07 3301 	mla	r3, r7, r1, r3
   2e8c2:	4948      	ldr	r1, [pc, #288]	; (2e9e4 <new_date_time_get+0x210>)
   2e8c4:	e9c1 2300 	strd	r2, r3, [r1]
   2e8c8:	460e      	mov	r6, r1
	time_aux.last_date_time_update = k_uptime_get();
   2e8ca:	f019 f882 	bl	479d2 <k_uptime_get>
			initial_valid_time = true;
   2e8ce:	2201      	movs	r2, #1
   2e8d0:	4b47      	ldr	r3, [pc, #284]	; (2e9f0 <new_date_time_get+0x21c>)
	time_aux.last_date_time_update = k_uptime_get();
   2e8d2:	60b0      	str	r0, [r6, #8]
			initial_valid_time = true;
   2e8d4:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2e8d6:	4b48      	ldr	r3, [pc, #288]	; (2e9f8 <new_date_time_get+0x224>)
   2e8d8:	701c      	strb	r4, [r3, #0]
		date_time_notify_event(&evt);
   2e8da:	f7ff ff71 	bl	2e7c0 <date_time_notify_event.constprop.1>
   2e8de:	e783      	b.n	2e7e8 <new_date_time_get+0x14>
		if (err == 0) {
   2e8e0:	2300      	movs	r3, #0
   2e8e2:	4c46      	ldr	r4, [pc, #280]	; (2e9fc <new_date_time_get+0x228>)
	hints.ai_family = AF_INET;
   2e8e4:	4f46      	ldr	r7, [pc, #280]	; (2ea00 <new_date_time_get+0x22c>)
   2e8e6:	9301      	str	r3, [sp, #4]
	hints.ai_socktype = SOCK_DGRAM;
   2e8e8:	2302      	movs	r3, #2
   2e8ea:	2201      	movs	r2, #1
   2e8ec:	e9c7 2302 	strd	r2, r3, [r7, #8]
	hints.ai_protocol = 0;
   2e8f0:	2300      	movs	r3, #0
   2e8f2:	613b      	str	r3, [r7, #16]
	if (server->addr == NULL) {
   2e8f4:	6863      	ldr	r3, [r4, #4]
   2e8f6:	bb53      	cbnz	r3, 2e94e <new_date_time_get+0x17a>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2e8f8:	463a      	mov	r2, r7
   2e8fa:	1d23      	adds	r3, r4, #4
   2e8fc:	4941      	ldr	r1, [pc, #260]	; (2ea04 <new_date_time_get+0x230>)
   2e8fe:	6820      	ldr	r0, [r4, #0]
   2e900:	f016 fab9 	bl	44e76 <zsock_getaddrinfo>
		if (err) {
   2e904:	4602      	mov	r2, r0
   2e906:	b310      	cbz	r0, 2e94e <new_date_time_get+0x17a>
			LOG_WRN("getaddrinfo, error: %d", err);
   2e908:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2e90c:	f043 0302 	orr.w	r3, r3, #2
   2e910:	f363 0907 	bfi	r9, r3, #0, #8
   2e914:	9b00      	ldr	r3, [sp, #0]
   2e916:	493c      	ldr	r1, [pc, #240]	; (2ea08 <new_date_time_get+0x234>)
   2e918:	f363 198f 	bfi	r9, r3, #6, #10
   2e91c:	4648      	mov	r0, r9
   2e91e:	f015 ff02 	bl	44726 <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2e922:	9b01      	ldr	r3, [sp, #4]
   2e924:	3408      	adds	r4, #8
   2e926:	3301      	adds	r3, #1
   2e928:	2b05      	cmp	r3, #5
   2e92a:	9301      	str	r3, [sp, #4]
   2e92c:	d1dc      	bne.n	2e8e8 <new_date_time_get+0x114>
	LOG_WRN("Not getting time from any NTP server");
   2e92e:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2e932:	f043 0302 	orr.w	r3, r3, #2
   2e936:	f363 0807 	bfi	r8, r3, #0, #8
   2e93a:	9b00      	ldr	r3, [sp, #0]
   2e93c:	4933      	ldr	r1, [pc, #204]	; (2ea0c <new_date_time_get+0x238>)
   2e93e:	f363 188f 	bfi	r8, r3, #6, #10
   2e942:	4640      	mov	r0, r8
   2e944:	f015 feef 	bl	44726 <log_string_sync>
		evt.type = DATE_TIME_NOT_OBTAINED;
   2e948:	4b2b      	ldr	r3, [pc, #172]	; (2e9f8 <new_date_time_get+0x224>)
   2e94a:	2203      	movs	r2, #3
   2e94c:	e767      	b.n	2e81e <new_date_time_get+0x4a>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   2e94e:	6863      	ldr	r3, [r4, #4]
   2e950:	a80d      	add	r0, sp, #52	; 0x34
   2e952:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2e956:	f016 fa5a 	bl	44e0e <sntp_init>
	if (err) {
   2e95a:	4606      	mov	r6, r0
   2e95c:	b340      	cbz	r0, 2e9b0 <new_date_time_get+0x1dc>
		LOG_WRN("sntp_init, error: %d", err);
   2e95e:	f02a 023f 	bic.w	r2, sl, #63	; 0x3f
   2e962:	f042 0202 	orr.w	r2, r2, #2
   2e966:	9b00      	ldr	r3, [sp, #0]
   2e968:	f362 0a07 	bfi	sl, r2, #0, #8
   2e96c:	f363 1a8f 	bfi	sl, r3, #6, #10
   2e970:	4602      	mov	r2, r0
   2e972:	4650      	mov	r0, sl
   2e974:	4926      	ldr	r1, [pc, #152]	; (2ea10 <new_date_time_get+0x23c>)
		LOG_WRN("sntp_query, error: %d", err);
   2e976:	f015 fed6 	bl	44726 <log_string_sync>
	sntp_close(&sntp_ctx);
   2e97a:	a80d      	add	r0, sp, #52	; 0x34
   2e97c:	f016 fa76 	bl	44e6c <sntp_close>
		if (err) {
   2e980:	2e00      	cmp	r6, #0
   2e982:	d1ce      	bne.n	2e922 <new_date_time_get+0x14e>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2e984:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2e988:	4b22      	ldr	r3, [pc, #136]	; (2ea14 <new_date_time_get+0x240>)
   2e98a:	681a      	ldr	r2, [r3, #0]
   2e98c:	6858      	ldr	r0, [r3, #4]
   2e98e:	fba2 2301 	umull	r2, r3, r2, r1
   2e992:	fb01 3300 	mla	r3, r1, r0, r3
   2e996:	4913      	ldr	r1, [pc, #76]	; (2e9e4 <new_date_time_get+0x210>)
   2e998:	e9c1 2300 	strd	r2, r3, [r1]
   2e99c:	460c      	mov	r4, r1
		time_aux.last_date_time_update = k_uptime_get();
   2e99e:	f019 f818 	bl	479d2 <k_uptime_get>
			initial_valid_time = true;
   2e9a2:	2301      	movs	r3, #1
   2e9a4:	4a12      	ldr	r2, [pc, #72]	; (2e9f0 <new_date_time_get+0x21c>)
		time_aux.last_date_time_update = k_uptime_get();
   2e9a6:	60a0      	str	r0, [r4, #8]
			initial_valid_time = true;
   2e9a8:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   2e9aa:	4a13      	ldr	r2, [pc, #76]	; (2e9f8 <new_date_time_get+0x224>)
   2e9ac:	7013      	strb	r3, [r2, #0]
			date_time_notify_event(&evt);
   2e9ae:	e794      	b.n	2e8da <new_date_time_get+0x106>
	err = sntp_query(&sntp_ctx, timeout, time);
   2e9b0:	4a18      	ldr	r2, [pc, #96]	; (2ea14 <new_date_time_get+0x240>)
   2e9b2:	f241 3188 	movw	r1, #5000	; 0x1388
   2e9b6:	a80d      	add	r0, sp, #52	; 0x34
   2e9b8:	f7ee fe76 	bl	1d6a8 <sntp_query>
	if (err) {
   2e9bc:	4606      	mov	r6, r0
   2e9be:	2800      	cmp	r0, #0
   2e9c0:	d0db      	beq.n	2e97a <new_date_time_get+0x1a6>
		LOG_WRN("sntp_query, error: %d", err);
   2e9c2:	f02b 023f 	bic.w	r2, fp, #63	; 0x3f
   2e9c6:	f042 0202 	orr.w	r2, r2, #2
   2e9ca:	9b00      	ldr	r3, [sp, #0]
   2e9cc:	f362 0b07 	bfi	fp, r2, #0, #8
   2e9d0:	f363 1b8f 	bfi	fp, r3, #6, #10
   2e9d4:	4602      	mov	r2, r0
   2e9d6:	4910      	ldr	r1, [pc, #64]	; (2ea18 <new_date_time_get+0x244>)
   2e9d8:	4658      	mov	r0, fp
   2e9da:	e7cc      	b.n	2e976 <new_date_time_get+0x1a2>
   2e9dc:	000497e8 	.word	0x000497e8
   2e9e0:	00049788 	.word	0x00049788
   2e9e4:	20021fd8 	.word	0x20021fd8
   2e9e8:	20020da4 	.word	0x20020da4
   2e9ec:	0036ee80 	.word	0x0036ee80
   2e9f0:	2002d08b 	.word	0x2002d08b
   2e9f4:	0004eba1 	.word	0x0004eba1
   2e9f8:	2002d08a 	.word	0x2002d08a
   2e9fc:	20020838 	.word	0x20020838
   2ea00:	20024d68 	.word	0x20024d68
   2ea04:	0004f012 	.word	0x0004f012
   2ea08:	0004f016 	.word	0x0004f016
   2ea0c:	0004f058 	.word	0x0004f058
   2ea10:	0004f02d 	.word	0x0004f02d
   2ea14:	20021fc8 	.word	0x20021fc8
   2ea18:	0004f042 	.word	0x0004f042

0002ea1c <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   2ea1c:	b510      	push	{r4, lr}
	k_delayed_work_init(&time_work, date_time_handler);
   2ea1e:	4c07      	ldr	r4, [pc, #28]	; (2ea3c <date_time_init+0x20>)
   2ea20:	4907      	ldr	r1, [pc, #28]	; (2ea40 <date_time_init+0x24>)
   2ea22:	4620      	mov	r0, r4
   2ea24:	f019 facf 	bl	47fc6 <k_delayed_work_init>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2ea28:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2ea2c:	2300      	movs	r3, #0
   2ea2e:	4621      	mov	r1, r4
   2ea30:	4804      	ldr	r0, [pc, #16]	; (2ea44 <date_time_init+0x28>)
   2ea32:	f012 f9af 	bl	40d94 <k_delayed_work_submit_to_queue>
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   2ea36:	2000      	movs	r0, #0
   2ea38:	bd10      	pop	{r4, pc}
   2ea3a:	bf00      	nop
   2ea3c:	20021fe8 	.word	0x20021fe8
   2ea40:	0002ea49 	.word	0x0002ea49
   2ea44:	20024888 	.word	0x20024888

0002ea48 <date_time_handler>:
{
   2ea48:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   2ea4a:	4806      	ldr	r0, [pc, #24]	; (2ea64 <date_time_handler+0x1c>)
   2ea4c:	f011 ff36 	bl	408bc <z_impl_k_sem_give>
}
   2ea50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2ea54:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2ea58:	2300      	movs	r3, #0
   2ea5a:	4903      	ldr	r1, [pc, #12]	; (2ea68 <date_time_handler+0x20>)
   2ea5c:	4803      	ldr	r0, [pc, #12]	; (2ea6c <date_time_handler+0x24>)
   2ea5e:	f012 b999 	b.w	40d94 <k_delayed_work_submit_to_queue>
   2ea62:	bf00      	nop
   2ea64:	20020da4 	.word	0x20020da4
   2ea68:	20021fe8 	.word	0x20021fe8
   2ea6c:	20024888 	.word	0x20024888

0002ea70 <date_time_set>:

	/** Seconds after the minute. tm_sec is generally 0-59.
	 *  The extra range is to accommodate for leap seconds
	 *  in certain systems.
	 */
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ea70:	6803      	ldr	r3, [r0, #0]
{
   2ea72:	b570      	push	{r4, r5, r6, lr}
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ea74:	2b3d      	cmp	r3, #61	; 0x3d
{
   2ea76:	4605      	mov	r5, r0
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2ea78:	f240 809c 	bls.w	2ebb4 <date_time_set+0x144>
		LOG_ERR("Seconds in time structure not in correct format");
   2ea7c:	2301      	movs	r3, #1
   2ea7e:	f04f 0000 	mov.w	r0, #0
   2ea82:	4a5a      	ldr	r2, [pc, #360]	; (2ebec <date_time_set+0x17c>)
   2ea84:	f363 0007 	bfi	r0, r3, #0, #8
   2ea88:	4b59      	ldr	r3, [pc, #356]	; (2ebf0 <date_time_set+0x180>)
   2ea8a:	495a      	ldr	r1, [pc, #360]	; (2ebf4 <date_time_set+0x184>)
   2ea8c:	1a9b      	subs	r3, r3, r2
   2ea8e:	08db      	lsrs	r3, r3, #3
   2ea90:	f363 108f 	bfi	r0, r3, #6, #10
   2ea94:	f015 fe47 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2ea98:	f06f 0415 	mvn.w	r4, #21
	}

	/** Minutes after the hour. */
	if (new_date_time->tm_min < 0 || new_date_time->tm_min > 59) {
   2ea9c:	686b      	ldr	r3, [r5, #4]
   2ea9e:	2b3b      	cmp	r3, #59	; 0x3b
   2eaa0:	d90f      	bls.n	2eac2 <date_time_set+0x52>
		LOG_ERR("Minutes in time structure not in correct format");
   2eaa2:	2301      	movs	r3, #1
   2eaa4:	f04f 0000 	mov.w	r0, #0
   2eaa8:	4a50      	ldr	r2, [pc, #320]	; (2ebec <date_time_set+0x17c>)
   2eaaa:	f363 0007 	bfi	r0, r3, #0, #8
   2eaae:	4b50      	ldr	r3, [pc, #320]	; (2ebf0 <date_time_set+0x180>)
   2eab0:	4951      	ldr	r1, [pc, #324]	; (2ebf8 <date_time_set+0x188>)
   2eab2:	1a9b      	subs	r3, r3, r2
   2eab4:	08db      	lsrs	r3, r3, #3
   2eab6:	f363 108f 	bfi	r0, r3, #6, #10
   2eaba:	f015 fe34 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eabe:	f06f 0415 	mvn.w	r4, #21
	}

	/** Hours since midnight. */
	if (new_date_time->tm_hour < 0 || new_date_time->tm_hour > 23) {
   2eac2:	68ab      	ldr	r3, [r5, #8]
   2eac4:	2b17      	cmp	r3, #23
   2eac6:	d90f      	bls.n	2eae8 <date_time_set+0x78>
		LOG_ERR("Hours in time structure not in correct format");
   2eac8:	2301      	movs	r3, #1
   2eaca:	f04f 0000 	mov.w	r0, #0
   2eace:	4a47      	ldr	r2, [pc, #284]	; (2ebec <date_time_set+0x17c>)
   2ead0:	f363 0007 	bfi	r0, r3, #0, #8
   2ead4:	4b46      	ldr	r3, [pc, #280]	; (2ebf0 <date_time_set+0x180>)
   2ead6:	4949      	ldr	r1, [pc, #292]	; (2ebfc <date_time_set+0x18c>)
   2ead8:	1a9b      	subs	r3, r3, r2
   2eada:	08db      	lsrs	r3, r3, #3
   2eadc:	f363 108f 	bfi	r0, r3, #6, #10
   2eae0:	f015 fe21 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eae4:	f06f 0415 	mvn.w	r4, #21
	}

	/** Day of the month. */
	if (new_date_time->tm_mday < 1 || new_date_time->tm_mday > 31) {
   2eae8:	68eb      	ldr	r3, [r5, #12]
   2eaea:	3b01      	subs	r3, #1
   2eaec:	2b1e      	cmp	r3, #30
   2eaee:	d90f      	bls.n	2eb10 <date_time_set+0xa0>
		LOG_ERR("Day in time structure not in correct format");
   2eaf0:	2301      	movs	r3, #1
   2eaf2:	f04f 0000 	mov.w	r0, #0
   2eaf6:	4a3d      	ldr	r2, [pc, #244]	; (2ebec <date_time_set+0x17c>)
   2eaf8:	f363 0007 	bfi	r0, r3, #0, #8
   2eafc:	4b3c      	ldr	r3, [pc, #240]	; (2ebf0 <date_time_set+0x180>)
   2eafe:	4940      	ldr	r1, [pc, #256]	; (2ec00 <date_time_set+0x190>)
   2eb00:	1a9b      	subs	r3, r3, r2
   2eb02:	08db      	lsrs	r3, r3, #3
   2eb04:	f363 108f 	bfi	r0, r3, #6, #10
   2eb08:	f015 fe0d 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eb0c:	f06f 0415 	mvn.w	r4, #21
	}

	/** Months since January. */
	if (new_date_time->tm_mon < 0 || new_date_time->tm_mon > 11) {
   2eb10:	692b      	ldr	r3, [r5, #16]
   2eb12:	2b0b      	cmp	r3, #11
   2eb14:	d90f      	bls.n	2eb36 <date_time_set+0xc6>
		LOG_ERR("Month in time structure not in correct format");
   2eb16:	2301      	movs	r3, #1
   2eb18:	f04f 0000 	mov.w	r0, #0
   2eb1c:	4a33      	ldr	r2, [pc, #204]	; (2ebec <date_time_set+0x17c>)
   2eb1e:	f363 0007 	bfi	r0, r3, #0, #8
   2eb22:	4b33      	ldr	r3, [pc, #204]	; (2ebf0 <date_time_set+0x180>)
   2eb24:	4937      	ldr	r1, [pc, #220]	; (2ec04 <date_time_set+0x194>)
   2eb26:	1a9b      	subs	r3, r3, r2
   2eb28:	08db      	lsrs	r3, r3, #3
   2eb2a:	f363 108f 	bfi	r0, r3, #6, #10
   2eb2e:	f015 fdfa 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eb32:	f06f 0415 	mvn.w	r4, #21
	}

	/** Years since 1900. 115 corresponds to the year 2015. */
	if (new_date_time->tm_year < 115 || new_date_time->tm_year > 1900) {
   2eb36:	f240 62f9 	movw	r2, #1785	; 0x6f9
   2eb3a:	696b      	ldr	r3, [r5, #20]
   2eb3c:	3b73      	subs	r3, #115	; 0x73
   2eb3e:	4293      	cmp	r3, r2
   2eb40:	d90f      	bls.n	2eb62 <date_time_set+0xf2>
		LOG_ERR("Year in time structure not in correct format");
   2eb42:	2301      	movs	r3, #1
   2eb44:	f04f 0000 	mov.w	r0, #0
   2eb48:	4a28      	ldr	r2, [pc, #160]	; (2ebec <date_time_set+0x17c>)
   2eb4a:	f363 0007 	bfi	r0, r3, #0, #8
   2eb4e:	4b28      	ldr	r3, [pc, #160]	; (2ebf0 <date_time_set+0x180>)
   2eb50:	492d      	ldr	r1, [pc, #180]	; (2ec08 <date_time_set+0x198>)
   2eb52:	1a9b      	subs	r3, r3, r2
   2eb54:	08db      	lsrs	r3, r3, #3
   2eb56:	f363 108f 	bfi	r0, r3, #6, #10
   2eb5a:	f015 fde4 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eb5e:	f06f 0415 	mvn.w	r4, #21
	}

	/** Days since Sunday. */
	if (new_date_time->tm_wday < 0 || new_date_time->tm_wday > 6) {
   2eb62:	69ab      	ldr	r3, [r5, #24]
   2eb64:	2b06      	cmp	r3, #6
   2eb66:	d90f      	bls.n	2eb88 <date_time_set+0x118>
		LOG_ERR("Week day in time structure not in correct format");
   2eb68:	2301      	movs	r3, #1
   2eb6a:	f04f 0000 	mov.w	r0, #0
   2eb6e:	4a1f      	ldr	r2, [pc, #124]	; (2ebec <date_time_set+0x17c>)
   2eb70:	f363 0007 	bfi	r0, r3, #0, #8
   2eb74:	4b1e      	ldr	r3, [pc, #120]	; (2ebf0 <date_time_set+0x180>)
   2eb76:	4925      	ldr	r1, [pc, #148]	; (2ec0c <date_time_set+0x19c>)
   2eb78:	1a9b      	subs	r3, r3, r2
   2eb7a:	08db      	lsrs	r3, r3, #3
   2eb7c:	f363 108f 	bfi	r0, r3, #6, #10
   2eb80:	f015 fdd1 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2eb84:	f06f 0415 	mvn.w	r4, #21
	}

	/** Days since January 1. */
	if (new_date_time->tm_yday < 0 || new_date_time->tm_yday > 365) {
   2eb88:	69eb      	ldr	r3, [r5, #28]
   2eb8a:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
   2eb8e:	d313      	bcc.n	2ebb8 <date_time_set+0x148>
		LOG_ERR("Year day in time structure not in correct format");
   2eb90:	2301      	movs	r3, #1
   2eb92:	f04f 0000 	mov.w	r0, #0
   2eb96:	4a15      	ldr	r2, [pc, #84]	; (2ebec <date_time_set+0x17c>)
   2eb98:	f363 0007 	bfi	r0, r3, #0, #8
   2eb9c:	4b14      	ldr	r3, [pc, #80]	; (2ebf0 <date_time_set+0x180>)
   2eb9e:	491c      	ldr	r1, [pc, #112]	; (2ec10 <date_time_set+0x1a0>)
   2eba0:	1a9b      	subs	r3, r3, r2
   2eba2:	08db      	lsrs	r3, r3, #3
   2eba4:	f363 108f 	bfi	r0, r3, #6, #10
   2eba8:	f015 fdbd 	bl	44726 <log_string_sync>
		err = -EINVAL;
   2ebac:	f06f 0415 	mvn.w	r4, #21

	evt.type = DATE_TIME_OBTAINED_EXT;
	date_time_notify_event(&evt);

	return 0;
}
   2ebb0:	4620      	mov	r0, r4
   2ebb2:	bd70      	pop	{r4, r5, r6, pc}
	int err = 0;
   2ebb4:	2400      	movs	r4, #0
   2ebb6:	e771      	b.n	2ea9c <date_time_set+0x2c>
	if (err) {
   2ebb8:	2c00      	cmp	r4, #0
   2ebba:	d1f9      	bne.n	2ebb0 <date_time_set+0x140>
	initial_valid_time = true;
   2ebbc:	2201      	movs	r2, #1
   2ebbe:	4b15      	ldr	r3, [pc, #84]	; (2ec14 <date_time_set+0x1a4>)
	time_aux.last_date_time_update = k_uptime_get();
   2ebc0:	4e15      	ldr	r6, [pc, #84]	; (2ec18 <date_time_set+0x1a8>)
	initial_valid_time = true;
   2ebc2:	701a      	strb	r2, [r3, #0]
	time_aux.last_date_time_update = k_uptime_get();
   2ebc4:	f018 ff05 	bl	479d2 <k_uptime_get>
   2ebc8:	60b0      	str	r0, [r6, #8]
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2ebca:	4628      	mov	r0, r5
   2ebcc:	f7f5 fe78 	bl	248c0 <timeutil_timegm64>
   2ebd0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2ebd4:	fba0 2305 	umull	r2, r3, r0, r5
   2ebd8:	fb05 3301 	mla	r3, r5, r1, r3
   2ebdc:	e9c6 2300 	strd	r2, r3, [r6]
	evt.type = DATE_TIME_OBTAINED_EXT;
   2ebe0:	2202      	movs	r2, #2
   2ebe2:	4b0e      	ldr	r3, [pc, #56]	; (2ec1c <date_time_set+0x1ac>)
   2ebe4:	701a      	strb	r2, [r3, #0]
	date_time_notify_event(&evt);
   2ebe6:	f7ff fdeb 	bl	2e7c0 <date_time_notify_event.constprop.1>
	return 0;
   2ebea:	e7e1      	b.n	2ebb0 <date_time_set+0x140>
   2ebec:	00049788 	.word	0x00049788
   2ebf0:	000497e8 	.word	0x000497e8
   2ebf4:	0004ee2d 	.word	0x0004ee2d
   2ebf8:	0004ee5d 	.word	0x0004ee5d
   2ebfc:	0004ee8d 	.word	0x0004ee8d
   2ec00:	0004eebb 	.word	0x0004eebb
   2ec04:	0004eee7 	.word	0x0004eee7
   2ec08:	0004ef15 	.word	0x0004ef15
   2ec0c:	0004ef42 	.word	0x0004ef42
   2ec10:	0004ef73 	.word	0x0004ef73
   2ec14:	2002d08b 	.word	0x2002d08b
   2ec18:	20021fd8 	.word	0x20021fd8
   2ec1c:	2002d08a 	.word	0x2002d08a

0002ec20 <date_time_uptime_to_unix_time_ms>:

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   2ec20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   2ec24:	6803      	ldr	r3, [r0, #0]
{
   2ec26:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   2ec28:	9300      	str	r3, [sp, #0]
   2ec2a:	6843      	ldr	r3, [r0, #4]
   2ec2c:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   2ec2e:	4b2b      	ldr	r3, [pc, #172]	; (2ecdc <date_time_uptime_to_unix_time_ms+0xbc>)
   2ec30:	781b      	ldrb	r3, [r3, #0]
   2ec32:	b993      	cbnz	r3, 2ec5a <date_time_uptime_to_unix_time_ms+0x3a>
		LOG_WRN("Valid time not currently available");
   2ec34:	2302      	movs	r3, #2
   2ec36:	f04f 0000 	mov.w	r0, #0
   2ec3a:	4a29      	ldr	r2, [pc, #164]	; (2ece0 <date_time_uptime_to_unix_time_ms+0xc0>)
   2ec3c:	f363 0007 	bfi	r0, r3, #0, #8
   2ec40:	4b28      	ldr	r3, [pc, #160]	; (2ece4 <date_time_uptime_to_unix_time_ms+0xc4>)
   2ec42:	4929      	ldr	r1, [pc, #164]	; (2ece8 <date_time_uptime_to_unix_time_ms+0xc8>)
   2ec44:	1a9b      	subs	r3, r3, r2
   2ec46:	08db      	lsrs	r3, r3, #3
   2ec48:	f363 108f 	bfi	r0, r3, #6, #10
   2ec4c:	f015 fd6b 	bl	44726 <log_string_sync>
		return -ENODATA;
   2ec50:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   2ec54:	b003      	add	sp, #12
   2ec56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   2ec5a:	4d24      	ldr	r5, [pc, #144]	; (2ecec <date_time_uptime_to_unix_time_ms+0xcc>)
   2ec5c:	68a9      	ldr	r1, [r5, #8]
   2ec5e:	e9d5 2300 	ldrd	r2, r3, [r5]
   2ec62:	4692      	mov	sl, r2
   2ec64:	1a52      	subs	r2, r2, r1
   2ec66:	469b      	mov	fp, r3
   2ec68:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   2ec6c:	9900      	ldr	r1, [sp, #0]
   2ec6e:	1856      	adds	r6, r2, r1
   2ec70:	9901      	ldr	r1, [sp, #4]
   2ec72:	eb43 0701 	adc.w	r7, r3, r1
   2ec76:	e9c0 6700 	strd	r6, r7, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   2ec7a:	f018 feaa 	bl	479d2 <k_uptime_get>
   2ec7e:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   2ec80:	ebba 0a03 	subs.w	sl, sl, r3
   2ec84:	eb6b 7be3 	sbc.w	fp, fp, r3, asr #31
   2ec88:	eb1a 0800 	adds.w	r8, sl, r0
   2ec8c:	eb4b 0901 	adc.w	r9, fp, r1
   2ec90:	45b0      	cmp	r8, r6
   2ec92:	eb79 0307 	sbcs.w	r3, r9, r7
   2ec96:	da1f      	bge.n	2ecd8 <date_time_uptime_to_unix_time_ms+0xb8>
		LOG_WRN("Uptime to large or previously converted");
   2ec98:	2302      	movs	r3, #2
   2ec9a:	f04f 0000 	mov.w	r0, #0
   2ec9e:	4d11      	ldr	r5, [pc, #68]	; (2ece4 <date_time_uptime_to_unix_time_ms+0xc4>)
   2eca0:	f363 0007 	bfi	r0, r3, #0, #8
   2eca4:	4b0e      	ldr	r3, [pc, #56]	; (2ece0 <date_time_uptime_to_unix_time_ms+0xc0>)
   2eca6:	4912      	ldr	r1, [pc, #72]	; (2ecf0 <date_time_uptime_to_unix_time_ms+0xd0>)
   2eca8:	1aed      	subs	r5, r5, r3
   2ecaa:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   2ecae:	f365 108f 	bfi	r0, r5, #6, #10
   2ecb2:	f015 fd38 	bl	44726 <log_string_sync>
		LOG_WRN("Clear variable or set a new uptime");
   2ecb6:	2302      	movs	r3, #2
   2ecb8:	f04f 0000 	mov.w	r0, #0
   2ecbc:	f363 0007 	bfi	r0, r3, #0, #8
   2ecc0:	f365 108f 	bfi	r0, r5, #6, #10
   2ecc4:	490b      	ldr	r1, [pc, #44]	; (2ecf4 <date_time_uptime_to_unix_time_ms+0xd4>)
   2ecc6:	f015 fd2e 	bl	44726 <log_string_sync>
		*uptime = uptime_prev;
   2ecca:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   2eccc:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   2ecd0:	6023      	str	r3, [r4, #0]
   2ecd2:	9b01      	ldr	r3, [sp, #4]
   2ecd4:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   2ecd6:	e7bd      	b.n	2ec54 <date_time_uptime_to_unix_time_ms+0x34>
	return 0;
   2ecd8:	2000      	movs	r0, #0
   2ecda:	e7bb      	b.n	2ec54 <date_time_uptime_to_unix_time_ms+0x34>
   2ecdc:	2002d08b 	.word	0x2002d08b
   2ece0:	00049788 	.word	0x00049788
   2ece4:	000497e8 	.word	0x000497e8
   2ece8:	0004efa4 	.word	0x0004efa4
   2ecec:	20021fd8 	.word	0x20021fd8
   2ecf0:	0004efc7 	.word	0x0004efc7
   2ecf4:	0004efef 	.word	0x0004efef

0002ecf8 <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   2ecf8:	b508      	push	{r3, lr}
	if (evt_handler) {
   2ecfa:	b108      	cbz	r0, 2ed00 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   2ecfc:	4b03      	ldr	r3, [pc, #12]	; (2ed0c <date_time_update_async+0x14>)
   2ecfe:	6018      	str	r0, [r3, #0]
   2ed00:	4803      	ldr	r0, [pc, #12]	; (2ed10 <date_time_update_async+0x18>)
   2ed02:	f011 fddb 	bl	408bc <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2ed06:	2000      	movs	r0, #0
   2ed08:	bd08      	pop	{r3, pc}
   2ed0a:	bf00      	nop
   2ed0c:	20024d64 	.word	0x20024d64
   2ed10:	20020da4 	.word	0x20020da4

0002ed14 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   2ed14:	b570      	push	{r4, r5, r6, lr}
   2ed16:	4606      	mov	r6, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   2ed18:	4c09      	ldr	r4, [pc, #36]	; (2ed40 <cloud_get_binding+0x2c>)
   2ed1a:	4d0a      	ldr	r5, [pc, #40]	; (2ed44 <cloud_get_binding+0x30>)
   2ed1c:	42ac      	cmp	r4, r5
   2ed1e:	d101      	bne.n	2ed24 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2ed20:	2400      	movs	r4, #0
   2ed22:	e00a      	b.n	2ed3a <cloud_get_binding+0x26>
		if (info->api == NULL) {
   2ed24:	6823      	ldr	r3, [r4, #0]
   2ed26:	b90b      	cbnz	r3, 2ed2c <cloud_get_binding+0x18>
	     info++) {
   2ed28:	3408      	adds	r4, #8
   2ed2a:	e7f7      	b.n	2ed1c <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   2ed2c:	6863      	ldr	r3, [r4, #4]
   2ed2e:	4630      	mov	r0, r6
   2ed30:	6819      	ldr	r1, [r3, #0]
   2ed32:	f7ee fa8d 	bl	1d250 <strcmp>
   2ed36:	2800      	cmp	r0, #0
   2ed38:	d1f6      	bne.n	2ed28 <cloud_get_binding+0x14>
}
   2ed3a:	4620      	mov	r0, r4
   2ed3c:	bd70      	pop	{r4, r5, r6, pc}
   2ed3e:	bf00      	nop
   2ed40:	00053a8c 	.word	0x00053a8c
   2ed44:	00053a94 	.word	0x00053a94

0002ed48 <api_uninit>:

	return nrf_cloud_init(&params);
}

static int api_uninit(const struct cloud_backend *const backend)
{
   2ed48:	b508      	push	{r3, lr}
	LOG_INF("uninit() is not implemented");
   2ed4a:	f04f 0000 	mov.w	r0, #0
   2ed4e:	2303      	movs	r3, #3
   2ed50:	4a06      	ldr	r2, [pc, #24]	; (2ed6c <api_uninit+0x24>)
   2ed52:	f363 0007 	bfi	r0, r3, #0, #8
   2ed56:	4b06      	ldr	r3, [pc, #24]	; (2ed70 <api_uninit+0x28>)
   2ed58:	4906      	ldr	r1, [pc, #24]	; (2ed74 <api_uninit+0x2c>)
   2ed5a:	1a9b      	subs	r3, r3, r2
   2ed5c:	08db      	lsrs	r3, r3, #3
   2ed5e:	f363 108f 	bfi	r0, r3, #6, #10
   2ed62:	f015 fce0 	bl	44726 <log_string_sync>

	return 0;
}
   2ed66:	2000      	movs	r0, #0
   2ed68:	bd08      	pop	{r3, pc}
   2ed6a:	bf00      	nop
   2ed6c:	00049788 	.word	0x00049788
   2ed70:	00049878 	.word	0x00049878
   2ed74:	0004f32e 	.word	0x0004f32e

0002ed78 <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   2ed78:	b570      	push	{r4, r5, r6, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   2ed7a:	694c      	ldr	r4, [r1, #20]
{
   2ed7c:	b086      	sub	sp, #24
   2ed7e:	460e      	mov	r6, r1
	if (msg->endpoint.len != 0) {
   2ed80:	2c00      	cmp	r4, #0
   2ed82:	d15c      	bne.n	2ee3e <api_send+0xc6>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   2ed84:	898d      	ldrh	r5, [r1, #12]
   2ed86:	b195      	cbz	r5, 2edae <api_send+0x36>
   2ed88:	2d01      	cmp	r5, #1
   2ed8a:	d037      	beq.n	2edfc <api_send+0x84>
			return err;
		}
		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   2ed8c:	2304      	movs	r3, #4
   2ed8e:	f04f 0000 	mov.w	r0, #0
   2ed92:	4a2c      	ldr	r2, [pc, #176]	; (2ee44 <api_send+0xcc>)
   2ed94:	f363 0007 	bfi	r0, r3, #0, #8
   2ed98:	4b2b      	ldr	r3, [pc, #172]	; (2ee48 <api_send+0xd0>)
   2ed9a:	492c      	ldr	r1, [pc, #176]	; (2ee4c <api_send+0xd4>)
   2ed9c:	1a9b      	subs	r3, r3, r2
   2ed9e:	08db      	lsrs	r3, r3, #3
   2eda0:	f363 108f 	bfi	r0, r3, #6, #10
   2eda4:	4a2a      	ldr	r2, [pc, #168]	; (2ee50 <api_send+0xd8>)
   2eda6:	462b      	mov	r3, r5
   2eda8:	f015 fcbd 	bl	44726 <log_string_sync>
		break;
	}

	if (err) {
   2edac:	e00c      	b.n	2edc8 <api_send+0x50>
		const struct nct_dc_data buf = {
   2edae:	684b      	ldr	r3, [r1, #4]
   2edb0:	e9cd 5502 	strd	r5, r5, [sp, #8]
   2edb4:	9300      	str	r3, [sp, #0]
   2edb6:	680b      	ldr	r3, [r1, #0]
   2edb8:	9504      	str	r5, [sp, #16]
   2edba:	9301      	str	r3, [sp, #4]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   2edbc:	7a0b      	ldrb	r3, [r1, #8]
   2edbe:	b933      	cbnz	r3, 2edce <api_send+0x56>
			err = nct_dc_stream(&buf);
   2edc0:	4668      	mov	r0, sp
   2edc2:	f018 feda 	bl	47b7a <nct_dc_stream>
			err = nct_dc_send(&buf);
   2edc6:	4604      	mov	r4, r0
		return err;
	}

	return 0;
}
   2edc8:	4620      	mov	r0, r4
   2edca:	b006      	add	sp, #24
   2edcc:	bd70      	pop	{r4, r5, r6, pc}
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   2edce:	2b01      	cmp	r3, #1
   2edd0:	d103      	bne.n	2edda <api_send+0x62>
			err = nct_dc_send(&buf);
   2edd2:	4668      	mov	r0, sp
   2edd4:	f018 fece 	bl	47b74 <nct_dc_send>
   2edd8:	e7f5      	b.n	2edc6 <api_send+0x4e>
			LOG_ERR("Unsupported QoS setting.");
   2edda:	2301      	movs	r3, #1
   2eddc:	f04f 0000 	mov.w	r0, #0
   2ede0:	4a18      	ldr	r2, [pc, #96]	; (2ee44 <api_send+0xcc>)
   2ede2:	f363 0007 	bfi	r0, r3, #0, #8
   2ede6:	4b18      	ldr	r3, [pc, #96]	; (2ee48 <api_send+0xd0>)
   2ede8:	491a      	ldr	r1, [pc, #104]	; (2ee54 <api_send+0xdc>)
   2edea:	1a9b      	subs	r3, r3, r2
   2edec:	08db      	lsrs	r3, r3, #3
   2edee:	f363 108f 	bfi	r0, r3, #6, #10
   2edf2:	f015 fc98 	bl	44726 <log_string_sync>
			return err;
   2edf6:	f06f 0415 	mvn.w	r4, #21
   2edfa:	e7e5      	b.n	2edc8 <api_send+0x50>
		struct nct_cc_data shadow_data = {
   2edfc:	4621      	mov	r1, r4
   2edfe:	2210      	movs	r2, #16
   2ee00:	a802      	add	r0, sp, #8
   2ee02:	f019 f9e1 	bl	481c8 <memset>
   2ee06:	6873      	ldr	r3, [r6, #4]
		err = nct_cc_send(&shadow_data);
   2ee08:	4668      	mov	r0, sp
		struct nct_cc_data shadow_data = {
   2ee0a:	9300      	str	r3, [sp, #0]
   2ee0c:	6833      	ldr	r3, [r6, #0]
   2ee0e:	f88d 5014 	strb.w	r5, [sp, #20]
   2ee12:	9301      	str	r3, [sp, #4]
		err = nct_cc_send(&shadow_data);
   2ee14:	f001 ff98 	bl	30d48 <nct_cc_send>
		if (err) {
   2ee18:	4604      	mov	r4, r0
   2ee1a:	2800      	cmp	r0, #0
   2ee1c:	d0d4      	beq.n	2edc8 <api_send+0x50>
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2ee1e:	2301      	movs	r3, #1
   2ee20:	f04f 0000 	mov.w	r0, #0
   2ee24:	4a07      	ldr	r2, [pc, #28]	; (2ee44 <api_send+0xcc>)
   2ee26:	f363 0007 	bfi	r0, r3, #0, #8
   2ee2a:	4b07      	ldr	r3, [pc, #28]	; (2ee48 <api_send+0xd0>)
   2ee2c:	490a      	ldr	r1, [pc, #40]	; (2ee58 <api_send+0xe0>)
   2ee2e:	1a9b      	subs	r3, r3, r2
   2ee30:	08db      	lsrs	r3, r3, #3
   2ee32:	f363 108f 	bfi	r0, r3, #6, #10
   2ee36:	4622      	mov	r2, r4
   2ee38:	f015 fc75 	bl	44726 <log_string_sync>
			return err;
   2ee3c:	e7c4      	b.n	2edc8 <api_send+0x50>
		return -ENOTSUP;
   2ee3e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2ee42:	e7c1      	b.n	2edc8 <api_send+0x50>
   2ee44:	00049788 	.word	0x00049788
   2ee48:	00049878 	.word	0x00049878
   2ee4c:	0004f30a 	.word	0x0004f30a
   2ee50:	0004f136 	.word	0x0004f136
   2ee54:	0004f2d2 	.word	0x0004f2d2
   2ee58:	0004f2eb 	.word	0x0004f2eb

0002ee5c <translate_connect_error>:
	switch (err) {
   2ee5c:	f110 0f16 	cmn.w	r0, #22
{
   2ee60:	b508      	push	{r3, lr}
   2ee62:	4602      	mov	r2, r0
	switch (err) {
   2ee64:	d035      	beq.n	2eed2 <translate_connect_error+0x76>
   2ee66:	dc20      	bgt.n	2eeaa <translate_connect_error+0x4e>
   2ee68:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2ee6c:	d034      	beq.n	2eed8 <translate_connect_error+0x7c>
   2ee6e:	dc13      	bgt.n	2ee98 <translate_connect_error+0x3c>
   2ee70:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2ee74:	d033      	beq.n	2eede <translate_connect_error+0x82>
		LOG_ERR("nRF cloud connect failed %d", err);
   2ee76:	2301      	movs	r3, #1
   2ee78:	f04f 0000 	mov.w	r0, #0
   2ee7c:	491f      	ldr	r1, [pc, #124]	; (2eefc <translate_connect_error+0xa0>)
   2ee7e:	f363 0007 	bfi	r0, r3, #0, #8
   2ee82:	4b1f      	ldr	r3, [pc, #124]	; (2ef00 <translate_connect_error+0xa4>)
   2ee84:	1a5b      	subs	r3, r3, r1
   2ee86:	08db      	lsrs	r3, r3, #3
   2ee88:	f363 108f 	bfi	r0, r3, #6, #10
   2ee8c:	491d      	ldr	r1, [pc, #116]	; (2ef04 <translate_connect_error+0xa8>)
   2ee8e:	f015 fc4a 	bl	44726 <log_string_sync>
		return CLOUD_CONNECT_RES_ERR_MISC;
   2ee92:	f06f 0204 	mvn.w	r2, #4
   2ee96:	e01a      	b.n	2eece <translate_connect_error+0x72>
	switch (err) {
   2ee98:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2ee9c:	d022      	beq.n	2eee4 <translate_connect_error+0x88>
   2ee9e:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2eea2:	d1e8      	bne.n	2ee76 <translate_connect_error+0x1a>
		return CLOUD_CONNECT_RES_ERR_CERT;
   2eea4:	f06f 0207 	mvn.w	r2, #7
   2eea8:	e011      	b.n	2eece <translate_connect_error+0x72>
	switch (err) {
   2eeaa:	f110 0f0a 	cmn.w	r0, #10
   2eeae:	d01c      	beq.n	2eeea <translate_connect_error+0x8e>
   2eeb0:	dc08      	bgt.n	2eec4 <translate_connect_error+0x68>
   2eeb2:	f110 0f0d 	cmn.w	r0, #13
   2eeb6:	d01b      	beq.n	2eef0 <translate_connect_error+0x94>
   2eeb8:	f110 0f0c 	cmn.w	r0, #12
   2eebc:	d1db      	bne.n	2ee76 <translate_connect_error+0x1a>
		return CLOUD_CONNECT_RES_ERR_NO_MEM;
   2eebe:	f06f 0205 	mvn.w	r2, #5
   2eec2:	e004      	b.n	2eece <translate_connect_error+0x72>
	switch (err) {
   2eec4:	f110 0f08 	cmn.w	r0, #8
   2eec8:	d015      	beq.n	2eef6 <translate_connect_error+0x9a>
   2eeca:	2800      	cmp	r0, #0
   2eecc:	d1d3      	bne.n	2ee76 <translate_connect_error+0x1a>
}
   2eece:	4610      	mov	r0, r2
   2eed0:	bd08      	pop	{r3, pc}
		return CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2eed2:	f06f 0206 	mvn.w	r2, #6
   2eed6:	e7fa      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2eed8:	f06f 0209 	mvn.w	r2, #9
   2eedc:	e7f7      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2eede:	f06f 020a 	mvn.w	r2, #10
   2eee2:	e7f4      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2eee4:	f06f 0208 	mvn.w	r2, #8
   2eee8:	e7f1      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_NETWORK;
   2eeea:	f06f 0202 	mvn.w	r2, #2
   2eeee:	e7ee      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2eef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2eef4:	e7eb      	b.n	2eece <translate_connect_error+0x72>
		return CLOUD_CONNECT_RES_ERR_BACKEND;
   2eef6:	f06f 0203 	mvn.w	r2, #3
   2eefa:	e7e8      	b.n	2eece <translate_connect_error+0x72>
   2eefc:	00049788 	.word	0x00049788
   2ef00:	00049878 	.word	0x00049878
   2ef04:	0004f4e8 	.word	0x0004f4e8

0002ef08 <api_connect>:
	if (current_state == STATE_IDLE) {
   2ef08:	4b14      	ldr	r3, [pc, #80]	; (2ef5c <api_connect+0x54>)
{
   2ef0a:	b510      	push	{r4, lr}
	if (current_state == STATE_IDLE) {
   2ef0c:	781b      	ldrb	r3, [r3, #0]
   2ef0e:	b30b      	cbz	r3, 2ef54 <api_connect+0x4c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ef10:	4b13      	ldr	r3, [pc, #76]	; (2ef60 <api_connect+0x58>)
   2ef12:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   2ef16:	b1a4      	cbz	r4, 2ef42 <api_connect+0x3a>
		LOG_DBG("Connection poll in progress");
   2ef18:	2304      	movs	r3, #4
   2ef1a:	f04f 0000 	mov.w	r0, #0
   2ef1e:	4a11      	ldr	r2, [pc, #68]	; (2ef64 <api_connect+0x5c>)
   2ef20:	f363 0007 	bfi	r0, r3, #0, #8
   2ef24:	4b10      	ldr	r3, [pc, #64]	; (2ef68 <api_connect+0x60>)
   2ef26:	4911      	ldr	r1, [pc, #68]	; (2ef6c <api_connect+0x64>)
   2ef28:	1a9b      	subs	r3, r3, r2
   2ef2a:	08db      	lsrs	r3, r3, #3
   2ef2c:	f363 108f 	bfi	r0, r3, #6, #10
   2ef30:	4a0f      	ldr	r2, [pc, #60]	; (2ef70 <api_connect+0x68>)
   2ef32:	f015 fbf8 	bl	44726 <log_string_sync>
		return -EINPROGRESS;
   2ef36:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   2ef3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return translate_connect_error(err);
   2ef3e:	f7ff bf8d 	b.w	2ee5c <translate_connect_error>
	atomic_set(&disconnect_requested, 0);
   2ef42:	4621      	mov	r1, r4
   2ef44:	480b      	ldr	r0, [pc, #44]	; (2ef74 <api_connect+0x6c>)
   2ef46:	f018 fd65 	bl	47a14 <atomic_set>
   2ef4a:	480b      	ldr	r0, [pc, #44]	; (2ef78 <api_connect+0x70>)
   2ef4c:	f011 fcb6 	bl	408bc <z_impl_k_sem_give>
	return CLOUD_CONNECT_RES_SUCCESS;
   2ef50:	4620      	mov	r0, r4
   2ef52:	e7f2      	b.n	2ef3a <api_connect+0x32>
		return -EACCES;
   2ef54:	f06f 000c 	mvn.w	r0, #12
   2ef58:	e7ef      	b.n	2ef3a <api_connect+0x32>
   2ef5a:	bf00      	nop
   2ef5c:	2002d08c 	.word	0x2002d08c
   2ef60:	20024dbc 	.word	0x20024dbc
   2ef64:	00049788 	.word	0x00049788
   2ef68:	00049878 	.word	0x00049878
   2ef6c:	0004f14d 	.word	0x0004f14d
   2ef70:	0004f120 	.word	0x0004f120
   2ef74:	20024dc0 	.word	0x20024dc0
   2ef78:	20020d2c 	.word	0x20020d2c

0002ef7c <api_event_handler>:
{
   2ef7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ef80:	4607      	mov	r7, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2ef82:	4c78      	ldr	r4, [pc, #480]	; (2f164 <api_event_handler+0x1e8>)
{
   2ef84:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2ef86:	6823      	ldr	r3, [r4, #0]
	struct cloud_event evt = { 0 };
   2ef88:	221c      	movs	r2, #28
   2ef8a:	2100      	movs	r1, #0
   2ef8c:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2ef8e:	685d      	ldr	r5, [r3, #4]
	struct cloud_event evt = { 0 };
   2ef90:	f019 f91a 	bl	481c8 <memset>
	switch (nrf_cloud_evt->type) {
   2ef94:	783e      	ldrb	r6, [r7, #0]
   2ef96:	4a74      	ldr	r2, [pc, #464]	; (2f168 <api_event_handler+0x1ec>)
   2ef98:	4b74      	ldr	r3, [pc, #464]	; (2f16c <api_event_handler+0x1f0>)
   2ef9a:	2e05      	cmp	r6, #5
   2ef9c:	eba2 0203 	sub.w	r2, r2, r3
   2efa0:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   2efa4:	46a0      	mov	r8, r4
   2efa6:	f000 8084 	beq.w	2f0b2 <api_event_handler+0x136>
   2efaa:	d822      	bhi.n	2eff2 <api_event_handler+0x76>
   2efac:	2e02      	cmp	r6, #2
   2efae:	d064      	beq.n	2f07a <api_event_handler+0xfe>
   2efb0:	d80e      	bhi.n	2efd0 <api_event_handler+0x54>
   2efb2:	2e01      	cmp	r6, #1
   2efb4:	d04b      	beq.n	2f04e <api_event_handler+0xd2>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   2efb6:	2304      	movs	r3, #4
   2efb8:	f04f 0000 	mov.w	r0, #0
   2efbc:	f363 0007 	bfi	r0, r3, #0, #8
   2efc0:	f362 108f 	bfi	r0, r2, #6, #10
   2efc4:	4633      	mov	r3, r6
   2efc6:	4a6a      	ldr	r2, [pc, #424]	; (2f170 <api_event_handler+0x1f4>)
   2efc8:	496a      	ldr	r1, [pc, #424]	; (2f174 <api_event_handler+0x1f8>)
   2efca:	f015 fbac 	bl	44726 <log_string_sync>
}
   2efce:	e07b      	b.n	2f0c8 <api_event_handler+0x14c>
	switch (nrf_cloud_evt->type) {
   2efd0:	2e03      	cmp	r6, #3
   2efd2:	d061      	beq.n	2f098 <api_event_handler+0x11c>
   2efd4:	2e04      	cmp	r6, #4
   2efd6:	d1ee      	bne.n	2efb6 <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   2efd8:	2304      	movs	r3, #4
   2efda:	f04f 0000 	mov.w	r0, #0
   2efde:	f363 0007 	bfi	r0, r3, #0, #8
   2efe2:	f362 108f 	bfi	r0, r2, #6, #10
   2efe6:	4964      	ldr	r1, [pc, #400]	; (2f178 <api_event_handler+0x1fc>)
   2efe8:	4a61      	ldr	r2, [pc, #388]	; (2f170 <api_event_handler+0x1f4>)
   2efea:	f015 fb9c 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2efee:	2303      	movs	r3, #3
   2eff0:	e04f      	b.n	2f092 <api_event_handler+0x116>
	switch (nrf_cloud_evt->type) {
   2eff2:	2e08      	cmp	r6, #8
   2eff4:	d06b      	beq.n	2f0ce <api_event_handler+0x152>
   2eff6:	d811      	bhi.n	2f01c <api_event_handler+0xa0>
   2eff8:	2e06      	cmp	r6, #6
   2effa:	f000 808d 	beq.w	2f118 <api_event_handler+0x19c>
   2effe:	2e07      	cmp	r6, #7
   2f000:	d1d9      	bne.n	2efb6 <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   2f002:	2304      	movs	r3, #4
   2f004:	f04f 0000 	mov.w	r0, #0
   2f008:	f363 0007 	bfi	r0, r3, #0, #8
   2f00c:	f362 108f 	bfi	r0, r2, #6, #10
   2f010:	495a      	ldr	r1, [pc, #360]	; (2f17c <api_event_handler+0x200>)
   2f012:	4a57      	ldr	r2, [pc, #348]	; (2f170 <api_event_handler+0x1f4>)
   2f014:	f015 fb87 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2f018:	2305      	movs	r3, #5
   2f01a:	e03a      	b.n	2f092 <api_event_handler+0x116>
	switch (nrf_cloud_evt->type) {
   2f01c:	2e09      	cmp	r6, #9
   2f01e:	f000 8094 	beq.w	2f14a <api_event_handler+0x1ce>
   2f022:	2eff      	cmp	r6, #255	; 0xff
   2f024:	d1c7      	bne.n	2efb6 <api_event_handler+0x3a>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   2f026:	2304      	movs	r3, #4
   2f028:	f04f 0000 	mov.w	r0, #0
   2f02c:	f363 0007 	bfi	r0, r3, #0, #8
   2f030:	f362 108f 	bfi	r0, r2, #6, #10
   2f034:	687b      	ldr	r3, [r7, #4]
   2f036:	4a4e      	ldr	r2, [pc, #312]	; (2f170 <api_event_handler+0x1f4>)
   2f038:	4951      	ldr	r1, [pc, #324]	; (2f180 <api_event_handler+0x204>)
   2f03a:	f015 fb74 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   2f03e:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f040:	68ea      	ldr	r2, [r5, #12]
		evt.type = CLOUD_EVT_ERROR;
   2f042:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f046:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f04a:	6820      	ldr	r0, [r4, #0]
   2f04c:	e061      	b.n	2f112 <api_event_handler+0x196>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   2f04e:	2304      	movs	r3, #4
   2f050:	f04f 0000 	mov.w	r0, #0
   2f054:	f363 0007 	bfi	r0, r3, #0, #8
   2f058:	f362 108f 	bfi	r0, r2, #6, #10
   2f05c:	4949      	ldr	r1, [pc, #292]	; (2f184 <api_event_handler+0x208>)
   2f05e:	4a44      	ldr	r2, [pc, #272]	; (2f170 <api_event_handler+0x1f4>)
   2f060:	f015 fb61 	bl	44726 <log_string_sync>
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2f064:	687b      	ldr	r3, [r7, #4]
		evt.type = CLOUD_EVT_CONNECTED;
   2f066:	f88d 6004 	strb.w	r6, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2f06a:	3300      	adds	r3, #0
   2f06c:	bf18      	it	ne
   2f06e:	2301      	movne	r3, #1
   2f070:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f074:	68ea      	ldr	r2, [r5, #12]
   2f076:	a901      	add	r1, sp, #4
   2f078:	e7e7      	b.n	2f04a <api_event_handler+0xce>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   2f07a:	2304      	movs	r3, #4
   2f07c:	f04f 0000 	mov.w	r0, #0
   2f080:	f363 0007 	bfi	r0, r3, #0, #8
   2f084:	f362 108f 	bfi	r0, r2, #6, #10
   2f088:	493f      	ldr	r1, [pc, #252]	; (2f188 <api_event_handler+0x20c>)
   2f08a:	4a39      	ldr	r2, [pc, #228]	; (2f170 <api_event_handler+0x1f4>)
   2f08c:	f015 fb4b 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   2f090:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_FOTA_DONE;
   2f092:	f88d 3004 	strb.w	r3, [sp, #4]
   2f096:	e7ed      	b.n	2f074 <api_event_handler+0xf8>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   2f098:	2304      	movs	r3, #4
   2f09a:	f04f 0000 	mov.w	r0, #0
   2f09e:	f363 0007 	bfi	r0, r3, #0, #8
   2f0a2:	f362 108f 	bfi	r0, r2, #6, #10
   2f0a6:	4939      	ldr	r1, [pc, #228]	; (2f18c <api_event_handler+0x210>)
   2f0a8:	4a31      	ldr	r2, [pc, #196]	; (2f170 <api_event_handler+0x1f4>)
   2f0aa:	f015 fb3c 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   2f0ae:	2308      	movs	r3, #8
   2f0b0:	e7ef      	b.n	2f092 <api_event_handler+0x116>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   2f0b2:	f04f 0000 	mov.w	r0, #0
   2f0b6:	2304      	movs	r3, #4
   2f0b8:	f363 0007 	bfi	r0, r3, #0, #8
   2f0bc:	f362 108f 	bfi	r0, r2, #6, #10
   2f0c0:	4933      	ldr	r1, [pc, #204]	; (2f190 <api_event_handler+0x214>)
   2f0c2:	4a2b      	ldr	r2, [pc, #172]	; (2f170 <api_event_handler+0x1f4>)
   2f0c4:	f015 fb2f 	bl	44726 <log_string_sync>
}
   2f0c8:	b008      	add	sp, #32
   2f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   2f0ce:	2304      	movs	r3, #4
   2f0d0:	f04f 0000 	mov.w	r0, #0
   2f0d4:	f363 0007 	bfi	r0, r3, #0, #8
   2f0d8:	f362 108f 	bfi	r0, r2, #6, #10
   2f0dc:	492d      	ldr	r1, [pc, #180]	; (2f194 <api_event_handler+0x218>)
   2f0de:	4a24      	ldr	r2, [pc, #144]	; (2f170 <api_event_handler+0x1f4>)
   2f0e0:	f015 fb21 	bl	44726 <log_string_sync>
		evt.data.err = CLOUD_DISCONNECT_MISC;
   2f0e4:	2303      	movs	r3, #3
   2f0e6:	9302      	str	r3, [sp, #8]
   2f0e8:	4b2b      	ldr	r3, [pc, #172]	; (2f198 <api_event_handler+0x21c>)
   2f0ea:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&disconnect_requested)) {
   2f0ee:	b12b      	cbz	r3, 2f0fc <api_event_handler+0x180>
   2f0f0:	4b2a      	ldr	r3, [pc, #168]	; (2f19c <api_event_handler+0x220>)
   2f0f2:	e8d3 3faf 	lda	r3, [r3]
			if (atomic_get(&connection_poll_active)) {
   2f0f6:	2b00      	cmp	r3, #0
   2f0f8:	d1e6      	bne.n	2f0c8 <api_event_handler+0x14c>
			evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2f0fa:	9302      	str	r3, [sp, #8]
		atomic_set(&transport_disconnected, 1);
   2f0fc:	2101      	movs	r1, #1
   2f0fe:	4828      	ldr	r0, [pc, #160]	; (2f1a0 <api_event_handler+0x224>)
   2f100:	f018 fc88 	bl	47a14 <atomic_set>
		evt.type = CLOUD_EVT_DISCONNECTED;
   2f104:	2302      	movs	r3, #2
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f106:	68ea      	ldr	r2, [r5, #12]
   2f108:	f8d8 0000 	ldr.w	r0, [r8]
		evt.type = CLOUD_EVT_DISCONNECTED;
   2f10c:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f110:	a901      	add	r1, sp, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f112:	f018 fc76 	bl	47a02 <cloud_notify_event>
		break;
   2f116:	e7d7      	b.n	2f0c8 <api_event_handler+0x14c>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2f118:	2304      	movs	r3, #4
   2f11a:	f04f 0000 	mov.w	r0, #0
   2f11e:	f363 0007 	bfi	r0, r3, #0, #8
   2f122:	f362 108f 	bfi	r0, r2, #6, #10
   2f126:	491f      	ldr	r1, [pc, #124]	; (2f1a4 <api_event_handler+0x228>)
   2f128:	4a11      	ldr	r2, [pc, #68]	; (2f170 <api_event_handler+0x1f4>)
   2f12a:	f015 fafc 	bl	44726 <log_string_sync>
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2f12e:	68fb      	ldr	r3, [r7, #12]
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   2f130:	f88d 6004 	strb.w	r6, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2f134:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2f136:	68bb      	ldr	r3, [r7, #8]
   2f138:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_TOPIC_MSG;
   2f13a:	2300      	movs	r3, #0
   2f13c:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   2f140:	697b      	ldr	r3, [r7, #20]
   2f142:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   2f144:	693b      	ldr	r3, [r7, #16]
   2f146:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2f148:	e794      	b.n	2f074 <api_event_handler+0xf8>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   2f14a:	2304      	movs	r3, #4
   2f14c:	f04f 0000 	mov.w	r0, #0
   2f150:	f363 0007 	bfi	r0, r3, #0, #8
   2f154:	f362 108f 	bfi	r0, r2, #6, #10
   2f158:	4913      	ldr	r1, [pc, #76]	; (2f1a8 <api_event_handler+0x22c>)
   2f15a:	4a05      	ldr	r2, [pc, #20]	; (2f170 <api_event_handler+0x1f4>)
   2f15c:	f015 fae3 	bl	44726 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   2f160:	230a      	movs	r3, #10
   2f162:	e796      	b.n	2f092 <api_event_handler+0x116>
   2f164:	20024dc4 	.word	0x20024dc4
   2f168:	00049878 	.word	0x00049878
   2f16c:	00049788 	.word	0x00049788
   2f170:	0004f10e 	.word	0x0004f10e
   2f174:	0004f2b7 	.word	0x0004f2b7
   2f178:	0004f1e0 	.word	0x0004f1e0
   2f17c:	0004f21a 	.word	0x0004f21a
   2f180:	0004f265 	.word	0x0004f265
   2f184:	0004f16d 	.word	0x0004f16d
   2f188:	0004f193 	.word	0x0004f193
   2f18c:	0004f1be 	.word	0x0004f1be
   2f190:	0004f1f8 	.word	0x0004f1f8
   2f194:	0004f23c 	.word	0x0004f23c
   2f198:	20024dc0 	.word	0x20024dc0
   2f19c:	20024dbc 	.word	0x20024dbc
   2f1a0:	20024dc8 	.word	0x20024dc8
   2f1a4:	0004f281 	.word	0x0004f281
   2f1a8:	0004f29b 	.word	0x0004f29b

0002f1ac <nfsm_get_current_state>:
	return current_state;
   2f1ac:	4b01      	ldr	r3, [pc, #4]	; (2f1b4 <nfsm_get_current_state+0x8>)
   2f1ae:	7818      	ldrb	r0, [r3, #0]
}
   2f1b0:	4770      	bx	lr
   2f1b2:	bf00      	nop
   2f1b4:	2002d08c 	.word	0x2002d08c

0002f1b8 <nfsm_set_current_state_and_notify>:
{
   2f1b8:	b538      	push	{r3, r4, r5, lr}
   2f1ba:	4605      	mov	r5, r0
   2f1bc:	460c      	mov	r4, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2f1be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f1c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f1c6:	4810      	ldr	r0, [pc, #64]	; (2f208 <nfsm_set_current_state_and_notify+0x50>)
   2f1c8:	f00f ff0a 	bl	3efe0 <z_impl_k_mutex_lock>
	LOG_DBG("state: %d", state);
   2f1cc:	2304      	movs	r3, #4
   2f1ce:	f04f 0000 	mov.w	r0, #0
   2f1d2:	4a0e      	ldr	r2, [pc, #56]	; (2f20c <nfsm_set_current_state_and_notify+0x54>)
   2f1d4:	f363 0007 	bfi	r0, r3, #0, #8
   2f1d8:	4b0d      	ldr	r3, [pc, #52]	; (2f210 <nfsm_set_current_state_and_notify+0x58>)
   2f1da:	490e      	ldr	r1, [pc, #56]	; (2f214 <nfsm_set_current_state_and_notify+0x5c>)
   2f1dc:	1a9b      	subs	r3, r3, r2
   2f1de:	08db      	lsrs	r3, r3, #3
   2f1e0:	f363 108f 	bfi	r0, r3, #6, #10
   2f1e4:	4a0c      	ldr	r2, [pc, #48]	; (2f218 <nfsm_set_current_state_and_notify+0x60>)
   2f1e6:	462b      	mov	r3, r5
   2f1e8:	f015 fa9d 	bl	44726 <log_string_sync>
	current_state = state;
   2f1ec:	4b0b      	ldr	r3, [pc, #44]	; (2f21c <nfsm_set_current_state_and_notify+0x64>)
   2f1ee:	701d      	strb	r5, [r3, #0]
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2f1f0:	4b0b      	ldr	r3, [pc, #44]	; (2f220 <nfsm_set_current_state_and_notify+0x68>)
   2f1f2:	681b      	ldr	r3, [r3, #0]
   2f1f4:	b113      	cbz	r3, 2f1fc <nfsm_set_current_state_and_notify+0x44>
   2f1f6:	b10c      	cbz	r4, 2f1fc <nfsm_set_current_state_and_notify+0x44>
		app_event_handler(evt);
   2f1f8:	4620      	mov	r0, r4
   2f1fa:	4798      	blx	r3
}
   2f1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_mutex_unlock(mutex);
   2f200:	4801      	ldr	r0, [pc, #4]	; (2f208 <nfsm_set_current_state_and_notify+0x50>)
   2f202:	f00f bfeb 	b.w	3f1dc <z_impl_k_mutex_unlock>
   2f206:	bf00      	nop
   2f208:	20020ca8 	.word	0x20020ca8
   2f20c:	00049788 	.word	0x00049788
   2f210:	00049878 	.word	0x00049878
   2f214:	0004f34a 	.word	0x0004f34a
   2f218:	0004f0ec 	.word	0x0004f0ec
   2f21c:	2002d08c 	.word	0x2002d08c
   2f220:	20024db8 	.word	0x20024db8

0002f224 <nrf_cloud_init>:
{
   2f224:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE) {
   2f226:	4c0d      	ldr	r4, [pc, #52]	; (2f25c <nrf_cloud_init+0x38>)
{
   2f228:	4605      	mov	r5, r0
	if (current_state != STATE_IDLE) {
   2f22a:	7823      	ldrb	r3, [r4, #0]
   2f22c:	b983      	cbnz	r3, 2f250 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   2f22e:	6803      	ldr	r3, [r0, #0]
   2f230:	b18b      	cbz	r3, 2f256 <nrf_cloud_init+0x32>
	err = nfsm_init();
   2f232:	f000 fe83 	bl	2ff3c <nfsm_init>
	if (err) {
   2f236:	b950      	cbnz	r0, 2f24e <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   2f238:	f018 fc46 	bl	47ac8 <nrf_codec_init>
	if (err) {
   2f23c:	b938      	cbnz	r0, 2f24e <nrf_cloud_init+0x2a>
	err = nct_init();
   2f23e:	f001 fb3d 	bl	308bc <nct_init>
	if (err) {
   2f242:	b920      	cbnz	r0, 2f24e <nrf_cloud_init+0x2a>
	app_event_handler = param->event_handler;
   2f244:	4b06      	ldr	r3, [pc, #24]	; (2f260 <nrf_cloud_init+0x3c>)
   2f246:	682a      	ldr	r2, [r5, #0]
   2f248:	601a      	str	r2, [r3, #0]
	current_state = STATE_INITIALIZED;
   2f24a:	2301      	movs	r3, #1
   2f24c:	7023      	strb	r3, [r4, #0]
}
   2f24e:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   2f250:	f06f 000c 	mvn.w	r0, #12
   2f254:	e7fb      	b.n	2f24e <nrf_cloud_init+0x2a>
		return -EINVAL;
   2f256:	f06f 0015 	mvn.w	r0, #21
   2f25a:	e7f8      	b.n	2f24e <nrf_cloud_init+0x2a>
   2f25c:	2002d08c 	.word	0x2002d08c
   2f260:	20024db8 	.word	0x20024db8

0002f264 <api_init>:
{
   2f264:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2f266:	4b06      	ldr	r3, [pc, #24]	; (2f280 <api_init+0x1c>)
   2f268:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2f26a:	6843      	ldr	r3, [r0, #4]
   2f26c:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2f26e:	4b05      	ldr	r3, [pc, #20]	; (2f284 <api_init+0x20>)
   2f270:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   2f272:	a801      	add	r0, sp, #4
   2f274:	f7ff ffd6 	bl	2f224 <nrf_cloud_init>
}
   2f278:	b003      	add	sp, #12
   2f27a:	f85d fb04 	ldr.w	pc, [sp], #4
   2f27e:	bf00      	nop
   2f280:	0002ef7d 	.word	0x0002ef7d
   2f284:	20024dc4 	.word	0x20024dc4

0002f288 <nrf_cloud_connect>:
{
   2f288:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2f28a:	4b07      	ldr	r3, [pc, #28]	; (2f2a8 <nrf_cloud_connect+0x20>)
   2f28c:	781b      	ldrb	r3, [r3, #0]
   2f28e:	2b01      	cmp	r3, #1
   2f290:	d807      	bhi.n	2f2a2 <nrf_cloud_connect+0x1a>
	atomic_set(&disconnect_requested, 0);
   2f292:	2100      	movs	r1, #0
   2f294:	4805      	ldr	r0, [pc, #20]	; (2f2ac <nrf_cloud_connect+0x24>)
   2f296:	f018 fbbd 	bl	47a14 <atomic_set>
}
   2f29a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_connect();
   2f29e:	f001 bca9 	b.w	30bf4 <nct_connect>
}
   2f2a2:	f06f 000c 	mvn.w	r0, #12
   2f2a6:	bd08      	pop	{r3, pc}
   2f2a8:	2002d08c 	.word	0x2002d08c
   2f2ac:	20024dc0 	.word	0x20024dc0

0002f2b0 <nrf_cloud_disconnect>:
{
   2f2b0:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2f2b2:	4b09      	ldr	r3, [pc, #36]	; (2f2d8 <nrf_cloud_disconnect+0x28>)
   2f2b4:	781a      	ldrb	r2, [r3, #0]
   2f2b6:	2a09      	cmp	r2, #9
   2f2b8:	d902      	bls.n	2f2c0 <nrf_cloud_disconnect+0x10>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2f2ba:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2f2bc:	2b04      	cmp	r3, #4
   2f2be:	d807      	bhi.n	2f2d0 <nrf_cloud_disconnect+0x20>
	atomic_set(&disconnect_requested, 1);
   2f2c0:	2101      	movs	r1, #1
   2f2c2:	4806      	ldr	r0, [pc, #24]	; (2f2dc <nrf_cloud_disconnect+0x2c>)
   2f2c4:	f018 fba6 	bl	47a14 <atomic_set>
}
   2f2c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2f2cc:	f001 be9a 	b.w	31004 <nct_disconnect>
}
   2f2d0:	f06f 000c 	mvn.w	r0, #12
   2f2d4:	bd08      	pop	{r3, pc}
   2f2d6:	bf00      	nop
   2f2d8:	2002d08c 	.word	0x2002d08c
   2f2dc:	20024dc0 	.word	0x20024dc0

0002f2e0 <nrf_cloud_run>:

void nrf_cloud_run(void)
{
	int ret;
	struct pollfd fds[1];
	struct cloud_event cloud_evt = {
   2f2e0:	221c      	movs	r2, #28
{
   2f2e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f2e6:	b08f      	sub	sp, #60	; 0x3c
	struct cloud_event cloud_evt = {
   2f2e8:	eb0d 0002 	add.w	r0, sp, r2
   2f2ec:	2100      	movs	r1, #0
   2f2ee:	f018 ff6b 	bl	481c8 <memset>
   2f2f2:	2302      	movs	r3, #2
   2f2f4:	f88d 301c 	strb.w	r3, [sp, #28]
   2f2f8:	2303      	movs	r3, #3
		cloud_evt.data.err = ret;
		cloud_evt.type = CLOUD_EVT_CONNECTING;
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
		goto reset;
	} else {
		LOG_DBG("Cloud connection request sent.");
   2f2fa:	4a8e      	ldr	r2, [pc, #568]	; (2f534 <nrf_cloud_run+0x254>)
	struct cloud_event cloud_evt = {
   2f2fc:	9308      	str	r3, [sp, #32]
   2f2fe:	4b8e      	ldr	r3, [pc, #568]	; (2f538 <nrf_cloud_run+0x258>)
		LOG_DBG("Cloud connection request sent.");
   2f300:	1a9b      	subs	r3, r3, r2
   2f302:	f3c3 0bc9 	ubfx	fp, r3, #3, #10
	return z_impl_k_sem_take(sem, timeout);
   2f306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2f30a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2f30e:	488b      	ldr	r0, [pc, #556]	; (2f53c <nrf_cloud_run+0x25c>)
   2f310:	f011 fb18 	bl	40944 <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2f314:	2101      	movs	r1, #1
   2f316:	488a      	ldr	r0, [pc, #552]	; (2f540 <nrf_cloud_run+0x260>)
   2f318:	f018 fb7c 	bl	47a14 <atomic_set>
	cloud_evt.data.err = CLOUD_CONNECT_RES_SUCCESS;
   2f31c:	2300      	movs	r3, #0
   2f31e:	9308      	str	r3, [sp, #32]
	cloud_evt.type = CLOUD_EVT_CONNECTING;
   2f320:	f88d 301c 	strb.w	r3, [sp, #28]
	cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2f324:	4b87      	ldr	r3, [pc, #540]	; (2f544 <nrf_cloud_run+0x264>)
   2f326:	2200      	movs	r2, #0
   2f328:	6818      	ldr	r0, [r3, #0]
   2f32a:	a907      	add	r1, sp, #28
   2f32c:	f018 fb69 	bl	47a02 <cloud_notify_event>
	ret = nrf_cloud_connect(NULL);
   2f330:	2000      	movs	r0, #0
   2f332:	f7ff ffa9 	bl	2f288 <nrf_cloud_connect>
	ret = translate_connect_error(ret);
   2f336:	f7ff fd91 	bl	2ee5c <translate_connect_error>
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   2f33a:	b1a0      	cbz	r0, 2f366 <nrf_cloud_run+0x86>
		cloud_evt.type = CLOUD_EVT_CONNECTING;
   2f33c:	f04f 0200 	mov.w	r2, #0
		cloud_evt.data.err = ret;
   2f340:	9008      	str	r0, [sp, #32]
		cloud_evt.type = CLOUD_EVT_CONNECTING;
   2f342:	f88d 201c 	strb.w	r2, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2f346:	4b7f      	ldr	r3, [pc, #508]	; (2f544 <nrf_cloud_run+0x264>)
   2f348:	2200      	movs	r2, #0
   2f34a:	a907      	add	r1, sp, #28
   2f34c:	6818      	ldr	r0, [r3, #0]
   2f34e:	f018 fb58 	bl	47a02 <cloud_notify_event>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
		nrf_cloud_disconnect();
	}

reset:
	atomic_set(&connection_poll_active, 0);
   2f352:	2100      	movs	r1, #0
   2f354:	487a      	ldr	r0, [pc, #488]	; (2f540 <nrf_cloud_run+0x260>)
   2f356:	f018 fb5d 	bl	47a14 <atomic_set>
   2f35a:	2200      	movs	r2, #0
   2f35c:	2300      	movs	r3, #0
   2f35e:	4877      	ldr	r0, [pc, #476]	; (2f53c <nrf_cloud_run+0x25c>)
   2f360:	f011 faf0 	bl	40944 <z_impl_k_sem_take>
	k_sem_take(&connection_poll_sem, K_NO_WAIT);
	goto start;
   2f364:	e7cf      	b.n	2f306 <nrf_cloud_run+0x26>
		LOG_DBG("Cloud connection request sent.");
   2f366:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2f36a:	4977      	ldr	r1, [pc, #476]	; (2f548 <nrf_cloud_run+0x268>)
   2f36c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
   2f370:	f042 0204 	orr.w	r2, r2, #4
   2f374:	f362 0307 	bfi	r3, r2, #0, #8
   2f378:	b29b      	uxth	r3, r3
   2f37a:	f36b 138f 	bfi	r3, fp, #6, #10
   2f37e:	4a73      	ldr	r2, [pc, #460]	; (2f54c <nrf_cloud_run+0x26c>)
   2f380:	9003      	str	r0, [sp, #12]
   2f382:	b298      	uxth	r0, r3
   2f384:	f8ad 3004 	strh.w	r3, [sp, #4]
   2f388:	f015 f9cd 	bl	44726 <log_string_sync>
	fds[0].fd = nct_socket_get();
   2f38c:	f001 fe6e 	bl	3106c <nct_socket_get>
	fds[0].events = POLLIN;
   2f390:	2201      	movs	r2, #1
   2f392:	f8ad 2018 	strh.w	r2, [sp, #24]
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2f396:	2202      	movs	r2, #2
	atomic_set(&transport_disconnected, 0);
   2f398:	9b03      	ldr	r3, [sp, #12]
	fds[0].fd = nct_socket_get();
   2f39a:	9005      	str	r0, [sp, #20]
	atomic_set(&transport_disconnected, 0);
   2f39c:	4619      	mov	r1, r3
   2f39e:	486c      	ldr	r0, [pc, #432]	; (2f550 <nrf_cloud_run+0x270>)
	cloud_evt.type = CLOUD_EVT_DISCONNECTED;
   2f3a0:	f88d 201c 	strb.w	r2, [sp, #28]
	atomic_set(&transport_disconnected, 0);
   2f3a4:	f018 fb36 	bl	47a14 <atomic_set>
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2f3a8:	4b66      	ldr	r3, [pc, #408]	; (2f544 <nrf_cloud_run+0x264>)
   2f3aa:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_poll(fds, nfds, timeout);
   2f3ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   2f3b0:	2101      	movs	r1, #1
   2f3b2:	a805      	add	r0, sp, #20
   2f3b4:	f7f6 f8a8 	bl	25508 <z_impl_zsock_poll>
		if (ret == 0) {
   2f3b8:	4602      	mov	r2, r0
   2f3ba:	b9e8      	cbnz	r0, 2f3f8 <nrf_cloud_run+0x118>
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2f3bc:	9b03      	ldr	r3, [sp, #12]
   2f3be:	6818      	ldr	r0, [r3, #0]
 * @return Time in milliseconds until next keep alive message is expected to
 *         be sent.
 */
static inline int cloud_keepalive_time_left(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   2f3c0:	b118      	cbz	r0, 2f3ca <nrf_cloud_run+0xea>
   2f3c2:	6803      	ldr	r3, [r0, #0]
   2f3c4:	b10b      	cbz	r3, 2f3ca <nrf_cloud_run+0xea>
	    backend->api->keepalive_time_left == NULL) {
   2f3c6:	699b      	ldr	r3, [r3, #24]
	if (backend == NULL || backend->api == NULL ||
   2f3c8:	b98b      	cbnz	r3, 2f3ee <nrf_cloud_run+0x10e>
		__ASSERT(0, "Missing cloud backend functionality");
   2f3ca:	4962      	ldr	r1, [pc, #392]	; (2f554 <nrf_cloud_run+0x274>)
   2f3cc:	f44f 739f 	mov.w	r3, #318	; 0x13e
   2f3d0:	4a61      	ldr	r2, [pc, #388]	; (2f558 <nrf_cloud_run+0x278>)
   2f3d2:	4862      	ldr	r0, [pc, #392]	; (2f55c <nrf_cloud_run+0x27c>)
   2f3d4:	f014 ff7c 	bl	442d0 <printk>
   2f3d8:	4861      	ldr	r0, [pc, #388]	; (2f560 <nrf_cloud_run+0x280>)
   2f3da:	f014 ff79 	bl	442d0 <printk>
   2f3de:	f44f 719f 	mov.w	r1, #318	; 0x13e
   2f3e2:	485d      	ldr	r0, [pc, #372]	; (2f558 <nrf_cloud_run+0x278>)
   2f3e4:	f015 f98e 	bl	44704 <assert_post_action>
	nct_process();
   2f3e8:	f001 fe2e 	bl	31048 <nct_process>
	return 0;
   2f3ec:	e7de      	b.n	2f3ac <nrf_cloud_run+0xcc>
		return SYS_FOREVER_MS;
	}

	return backend->api->keepalive_time_left(backend);
   2f3ee:	4798      	blx	r3
			if (cloud_keepalive_time_left(nrf_cloud_backend) <
   2f3f0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   2f3f4:	dada      	bge.n	2f3ac <nrf_cloud_run+0xcc>
   2f3f6:	e7f7      	b.n	2f3e8 <nrf_cloud_run+0x108>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2f3f8:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2f3fc:	f013 0301 	ands.w	r3, r3, #1
   2f400:	d1f2      	bne.n	2f3e8 <nrf_cloud_run+0x108>
		if (ret < 0) {
   2f402:	2800      	cmp	r0, #0
   2f404:	da14      	bge.n	2f430 <nrf_cloud_run+0x150>
			LOG_ERR("poll() returned an error: %d", ret);
   2f406:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2f40a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   2f40e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   2f412:	f043 0301 	orr.w	r3, r3, #1
   2f416:	f363 0107 	bfi	r1, r3, #0, #8
   2f41a:	b28b      	uxth	r3, r1
   2f41c:	f36b 138f 	bfi	r3, fp, #6, #10
   2f420:	4950      	ldr	r1, [pc, #320]	; (2f564 <nrf_cloud_run+0x284>)
   2f422:	f8ad 3008 	strh.w	r3, [sp, #8]
   2f426:	b298      	uxth	r0, r3
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2f428:	f015 f97d 	bl	44726 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2f42c:	2303      	movs	r3, #3
   2f42e:	e037      	b.n	2f4a0 <nrf_cloud_run+0x1c0>
   2f430:	4a4d      	ldr	r2, [pc, #308]	; (2f568 <nrf_cloud_run+0x288>)
   2f432:	e8d2 2faf 	lda	r2, [r2]
		if (atomic_get(&disconnect_requested)) {
   2f436:	b1a2      	cbz	r2, 2f462 <nrf_cloud_run+0x182>
			atomic_set(&disconnect_requested, 0);
   2f438:	4619      	mov	r1, r3
   2f43a:	484b      	ldr	r0, [pc, #300]	; (2f568 <nrf_cloud_run+0x288>)
   2f43c:	9303      	str	r3, [sp, #12]
   2f43e:	f018 fae9 	bl	47a14 <atomic_set>
			LOG_DBG("Expected disconnect event.");
   2f442:	f024 023f 	bic.w	r2, r4, #63	; 0x3f
   2f446:	f042 0204 	orr.w	r2, r2, #4
   2f44a:	f362 0407 	bfi	r4, r2, #0, #8
   2f44e:	f36b 148f 	bfi	r4, fp, #6, #10
   2f452:	4a3e      	ldr	r2, [pc, #248]	; (2f54c <nrf_cloud_run+0x26c>)
   2f454:	4945      	ldr	r1, [pc, #276]	; (2f56c <nrf_cloud_run+0x28c>)
   2f456:	4620      	mov	r0, r4
   2f458:	f015 f965 	bl	44726 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_USER_REQUEST;
   2f45c:	9b03      	ldr	r3, [sp, #12]
   2f45e:	9308      	str	r3, [sp, #32]
			cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2f460:	e771      	b.n	2f346 <nrf_cloud_run+0x66>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2f462:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   2f466:	0699      	lsls	r1, r3, #26
   2f468:	d529      	bpl.n	2f4be <nrf_cloud_run+0x1de>
			LOG_DBG("Socket error: POLLNVAL");
   2f46a:	f025 033f 	bic.w	r3, r5, #63	; 0x3f
   2f46e:	f043 0304 	orr.w	r3, r3, #4
   2f472:	f363 0507 	bfi	r5, r3, #0, #8
   2f476:	f36b 158f 	bfi	r5, fp, #6, #10
   2f47a:	4a34      	ldr	r2, [pc, #208]	; (2f54c <nrf_cloud_run+0x26c>)
   2f47c:	493c      	ldr	r1, [pc, #240]	; (2f570 <nrf_cloud_run+0x290>)
   2f47e:	4628      	mov	r0, r5
   2f480:	f015 f951 	bl	44726 <log_string_sync>
			LOG_DBG("The cloud socket was unexpectedly closed.");
   2f484:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   2f488:	f043 0304 	orr.w	r3, r3, #4
   2f48c:	f363 0607 	bfi	r6, r3, #0, #8
   2f490:	f36b 168f 	bfi	r6, fp, #6, #10
   2f494:	4a2d      	ldr	r2, [pc, #180]	; (2f54c <nrf_cloud_run+0x26c>)
   2f496:	4937      	ldr	r1, [pc, #220]	; (2f574 <nrf_cloud_run+0x294>)
   2f498:	4630      	mov	r0, r6
   2f49a:	f015 f944 	bl	44726 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_INVALID_REQUEST;
   2f49e:	2302      	movs	r3, #2
			cloud_evt.data.err = CLOUD_DISCONNECT_MISC;
   2f4a0:	9308      	str	r3, [sp, #32]
   2f4a2:	4b2b      	ldr	r3, [pc, #172]	; (2f550 <nrf_cloud_run+0x270>)
   2f4a4:	e8d3 2faf 	lda	r2, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2f4a8:	2a00      	cmp	r2, #0
   2f4aa:	f47f af52 	bne.w	2f352 <nrf_cloud_run+0x72>
		cloud_notify_event(nrf_cloud_backend, &cloud_evt, NULL);
   2f4ae:	4b25      	ldr	r3, [pc, #148]	; (2f544 <nrf_cloud_run+0x264>)
   2f4b0:	a907      	add	r1, sp, #28
   2f4b2:	6818      	ldr	r0, [r3, #0]
   2f4b4:	f018 faa5 	bl	47a02 <cloud_notify_event>
		nrf_cloud_disconnect();
   2f4b8:	f7ff fefa 	bl	2f2b0 <nrf_cloud_disconnect>
   2f4bc:	e749      	b.n	2f352 <nrf_cloud_run+0x72>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2f4be:	06da      	lsls	r2, r3, #27
   2f4c0:	d51b      	bpl.n	2f4fa <nrf_cloud_run+0x21a>
			LOG_DBG("Socket error: POLLHUP");
   2f4c2:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   2f4c6:	f043 0304 	orr.w	r3, r3, #4
   2f4ca:	f363 0707 	bfi	r7, r3, #0, #8
   2f4ce:	f36b 178f 	bfi	r7, fp, #6, #10
   2f4d2:	4a1e      	ldr	r2, [pc, #120]	; (2f54c <nrf_cloud_run+0x26c>)
   2f4d4:	4928      	ldr	r1, [pc, #160]	; (2f578 <nrf_cloud_run+0x298>)
   2f4d6:	4638      	mov	r0, r7
   2f4d8:	f015 f925 	bl	44726 <log_string_sync>
			LOG_DBG("Connection was closed by the cloud.");
   2f4dc:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   2f4e0:	f043 0304 	orr.w	r3, r3, #4
   2f4e4:	f363 0807 	bfi	r8, r3, #0, #8
   2f4e8:	f36b 188f 	bfi	r8, fp, #6, #10
   2f4ec:	4a17      	ldr	r2, [pc, #92]	; (2f54c <nrf_cloud_run+0x26c>)
   2f4ee:	4923      	ldr	r1, [pc, #140]	; (2f57c <nrf_cloud_run+0x29c>)
   2f4f0:	4640      	mov	r0, r8
   2f4f2:	f015 f918 	bl	44726 <log_string_sync>
			cloud_evt.data.err = CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2f4f6:	2301      	movs	r3, #1
   2f4f8:	e7d2      	b.n	2f4a0 <nrf_cloud_run+0x1c0>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2f4fa:	071b      	lsls	r3, r3, #28
   2f4fc:	f57f af56 	bpl.w	2f3ac <nrf_cloud_run+0xcc>
			LOG_DBG("Socket error: POLLERR");
   2f500:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   2f504:	f043 0304 	orr.w	r3, r3, #4
   2f508:	f363 0907 	bfi	r9, r3, #0, #8
   2f50c:	f36b 198f 	bfi	r9, fp, #6, #10
   2f510:	4a0e      	ldr	r2, [pc, #56]	; (2f54c <nrf_cloud_run+0x26c>)
   2f512:	491b      	ldr	r1, [pc, #108]	; (2f580 <nrf_cloud_run+0x2a0>)
   2f514:	4648      	mov	r0, r9
   2f516:	f015 f906 	bl	44726 <log_string_sync>
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2f51a:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   2f51e:	f043 0304 	orr.w	r3, r3, #4
   2f522:	f363 0a07 	bfi	sl, r3, #0, #8
   2f526:	f36b 1a8f 	bfi	sl, fp, #6, #10
   2f52a:	4a08      	ldr	r2, [pc, #32]	; (2f54c <nrf_cloud_run+0x26c>)
   2f52c:	4915      	ldr	r1, [pc, #84]	; (2f584 <nrf_cloud_run+0x2a4>)
   2f52e:	4650      	mov	r0, sl
   2f530:	e77a      	b.n	2f428 <nrf_cloud_run+0x148>
   2f532:	bf00      	nop
   2f534:	00049788 	.word	0x00049788
   2f538:	00049878 	.word	0x00049878
   2f53c:	20020d2c 	.word	0x20020d2c
   2f540:	20024dbc 	.word	0x20024dbc
   2f544:	20024dc4 	.word	0x20024dc4
   2f548:	0004f358 	.word	0x0004f358
   2f54c:	0004f13f 	.word	0x0004f13f
   2f550:	20024dc8 	.word	0x20024dc8
   2f554:	00052672 	.word	0x00052672
   2f558:	0004f37b 	.word	0x0004f37b
   2f55c:	0004b33b 	.word	0x0004b33b
   2f560:	0004f392 	.word	0x0004f392
   2f564:	0004f3b8 	.word	0x0004f3b8
   2f568:	20024dc0 	.word	0x20024dc0
   2f56c:	0004f3d5 	.word	0x0004f3d5
   2f570:	0004f3f4 	.word	0x0004f3f4
   2f574:	0004f40f 	.word	0x0004f40f
   2f578:	0004f43d 	.word	0x0004f43d
   2f57c:	0004f457 	.word	0x0004f457
   2f580:	0004f47f 	.word	0x0004f47f
   2f584:	0004f499 	.word	0x0004f499

0002f588 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2f588:	4b01      	ldr	r3, [pc, #4]	; (2f590 <nct_input+0x8>)
   2f58a:	7819      	ldrb	r1, [r3, #0]
   2f58c:	f000 bcdc 	b.w	2ff48 <nfsm_handle_incoming_event>
   2f590:	2002d08c 	.word	0x2002d08c

0002f594 <nct_apply_update>:
	app_event_handler(&evt);
   2f594:	4b01      	ldr	r3, [pc, #4]	; (2f59c <nct_apply_update+0x8>)
   2f596:	4802      	ldr	r0, [pc, #8]	; (2f5a0 <nct_apply_update+0xc>)
   2f598:	681b      	ldr	r3, [r3, #0]
   2f59a:	4718      	bx	r3
   2f59c:	20024db8 	.word	0x20024db8
   2f5a0:	0004a1cc 	.word	0x0004a1cc

0002f5a4 <nrf_cloud_decode_desired_obj>:
	return !strncmp(s1, s2, strlen(s2));
}

static void nrf_cloud_decode_desired_obj(cJSON *const root_obj,
					 cJSON **desired_obj)
{
   2f5a4:	b538      	push	{r3, r4, r5, lr}
   2f5a6:	460c      	mov	r4, r1
	cJSON *state_obj;

	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2f5a8:	4605      	mov	r5, r0
   2f5aa:	b140      	cbz	r0, 2f5be <nrf_cloud_decode_desired_obj+0x1a>
		/* On initial pairing, a shadow delta event is sent */
		/* which does not include the "desired" JSON key, */
		/* "state" is used instead */
		state_obj = json_object_decode(root_obj, "state");
   2f5ac:	4904      	ldr	r1, [pc, #16]	; (2f5c0 <nrf_cloud_decode_desired_obj+0x1c>)
   2f5ae:	f018 fa58 	bl	47a62 <json_object_decode>
		if (state_obj == NULL) {
   2f5b2:	b918      	cbnz	r0, 2f5bc <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2f5b4:	4903      	ldr	r1, [pc, #12]	; (2f5c4 <nrf_cloud_decode_desired_obj+0x20>)
   2f5b6:	4628      	mov	r0, r5
   2f5b8:	f018 fa53 	bl	47a62 <json_object_decode>
		} else {
			*desired_obj = state_obj;
   2f5bc:	6020      	str	r0, [r4, #0]
		}
	}
}
   2f5be:	bd38      	pop	{r3, r4, r5, pc}
   2f5c0:	00051bb9 	.word	0x00051bb9
   2f5c4:	0004f53a 	.word	0x0004f53a

0002f5c8 <nrf_cloud_decode_requested_state>:
	return 0;
}

int nrf_cloud_decode_requested_state(const struct nrf_cloud_data *input,
				     enum nfsm_state *requested_state)
{
   2f5c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f5ca:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2f5cc:	460e      	mov	r6, r1
   2f5ce:	b949      	cbnz	r1, 2f5e4 <nrf_cloud_decode_requested_state+0x1c>
   2f5d0:	4959      	ldr	r1, [pc, #356]	; (2f738 <nrf_cloud_decode_requested_state+0x170>)
   2f5d2:	485a      	ldr	r0, [pc, #360]	; (2f73c <nrf_cloud_decode_requested_state+0x174>)
   2f5d4:	23cb      	movs	r3, #203	; 0xcb
   2f5d6:	4a5a      	ldr	r2, [pc, #360]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f5d8:	f014 fe7a 	bl	442d0 <printk>
   2f5dc:	21cb      	movs	r1, #203	; 0xcb
   2f5de:	4858      	ldr	r0, [pc, #352]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f5e0:	f015 f890 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2f5e4:	b94c      	cbnz	r4, 2f5fa <nrf_cloud_decode_requested_state+0x32>
   2f5e6:	4957      	ldr	r1, [pc, #348]	; (2f744 <nrf_cloud_decode_requested_state+0x17c>)
   2f5e8:	4854      	ldr	r0, [pc, #336]	; (2f73c <nrf_cloud_decode_requested_state+0x174>)
   2f5ea:	23cc      	movs	r3, #204	; 0xcc
   2f5ec:	4a54      	ldr	r2, [pc, #336]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f5ee:	f014 fe6f 	bl	442d0 <printk>
   2f5f2:	21cc      	movs	r1, #204	; 0xcc
   2f5f4:	4852      	ldr	r0, [pc, #328]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f5f6:	f015 f885 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2f5fa:	6863      	ldr	r3, [r4, #4]
   2f5fc:	b94b      	cbnz	r3, 2f612 <nrf_cloud_decode_requested_state+0x4a>
   2f5fe:	4952      	ldr	r1, [pc, #328]	; (2f748 <nrf_cloud_decode_requested_state+0x180>)
   2f600:	484e      	ldr	r0, [pc, #312]	; (2f73c <nrf_cloud_decode_requested_state+0x174>)
   2f602:	23cd      	movs	r3, #205	; 0xcd
   2f604:	4a4e      	ldr	r2, [pc, #312]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f606:	f014 fe63 	bl	442d0 <printk>
   2f60a:	21cd      	movs	r1, #205	; 0xcd
   2f60c:	484c      	ldr	r0, [pc, #304]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f60e:	f015 f879 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2f612:	6823      	ldr	r3, [r4, #0]
   2f614:	b94b      	cbnz	r3, 2f62a <nrf_cloud_decode_requested_state+0x62>
   2f616:	494d      	ldr	r1, [pc, #308]	; (2f74c <nrf_cloud_decode_requested_state+0x184>)
   2f618:	4848      	ldr	r0, [pc, #288]	; (2f73c <nrf_cloud_decode_requested_state+0x174>)
   2f61a:	23ce      	movs	r3, #206	; 0xce
   2f61c:	4a48      	ldr	r2, [pc, #288]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f61e:	f014 fe57 	bl	442d0 <printk>
   2f622:	21ce      	movs	r1, #206	; 0xce
   2f624:	4846      	ldr	r0, [pc, #280]	; (2f740 <nrf_cloud_decode_requested_state+0x178>)
   2f626:	f015 f86d 	bl	44704 <assert_post_action>
	cJSON *desired_obj;
	cJSON *pairing_obj;
	cJSON *pairing_state_obj;
	cJSON *topic_prefix_obj;

	root_obj = cJSON_Parse(input->ptr);
   2f62a:	6860      	ldr	r0, [r4, #4]
   2f62c:	f017 fc0c 	bl	46e48 <cJSON_Parse>
	if (root_obj == NULL) {
   2f630:	4605      	mov	r5, r0
   2f632:	b9a8      	cbnz	r0, 2f660 <nrf_cloud_decode_requested_state+0x98>
		LOG_ERR("cJSON_Parse failed: %s",
   2f634:	2301      	movs	r3, #1
   2f636:	f04f 0500 	mov.w	r5, #0
   2f63a:	4a45      	ldr	r2, [pc, #276]	; (2f750 <nrf_cloud_decode_requested_state+0x188>)
   2f63c:	f363 0507 	bfi	r5, r3, #0, #8
   2f640:	4b44      	ldr	r3, [pc, #272]	; (2f754 <nrf_cloud_decode_requested_state+0x18c>)
   2f642:	6860      	ldr	r0, [r4, #4]
   2f644:	1a9b      	subs	r3, r3, r2
   2f646:	08db      	lsrs	r3, r3, #3
   2f648:	f363 158f 	bfi	r5, r3, #6, #10
   2f64c:	f015 f87e 	bl	4474c <log_strdup>
   2f650:	4941      	ldr	r1, [pc, #260]	; (2f758 <nrf_cloud_decode_requested_state+0x190>)
   2f652:	4602      	mov	r2, r0
   2f654:	4628      	mov	r0, r5
   2f656:	f015 f866 	bl	44726 <log_string_sync>
			LOG_WRN("Unhandled data received from nRF Cloud.");
			LOG_INF("Ensure device firmware is up to date.");
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
		}
		cJSON_Delete(root_obj);
		return -ENOENT;
   2f65a:	f06f 0401 	mvn.w	r4, #1
   2f65e:	e00d      	b.n	2f67c <nrf_cloud_decode_requested_state+0xb4>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2f660:	a901      	add	r1, sp, #4
   2f662:	f7ff ff9f 	bl	2f5a4 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2f666:	493d      	ldr	r1, [pc, #244]	; (2f75c <nrf_cloud_decode_requested_state+0x194>)
   2f668:	9801      	ldr	r0, [sp, #4]
   2f66a:	f018 f9fa 	bl	47a62 <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2f66e:	b140      	cbz	r0, 2f682 <nrf_cloud_decode_requested_state+0xba>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2f670:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2f672:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2f674:	7033      	strb	r3, [r6, #0]
		cJSON_Delete(root_obj);
   2f676:	f7fb fce1 	bl	2b03c <cJSON_Delete>
		return 0;
   2f67a:	2400      	movs	r4, #0
	}

	cJSON_Delete(root_obj);

	return 0;
}
   2f67c:	4620      	mov	r0, r4
   2f67e:	b002      	add	sp, #8
   2f680:	bd70      	pop	{r4, r5, r6, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2f682:	4937      	ldr	r1, [pc, #220]	; (2f760 <nrf_cloud_decode_requested_state+0x198>)
   2f684:	9801      	ldr	r0, [sp, #4]
   2f686:	f018 f9ec 	bl	47a62 <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   2f68a:	4936      	ldr	r1, [pc, #216]	; (2f764 <nrf_cloud_decode_requested_state+0x19c>)
   2f68c:	f018 f9e9 	bl	47a62 <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2f690:	b110      	cbz	r0, 2f698 <nrf_cloud_decode_requested_state+0xd0>
   2f692:	68c3      	ldr	r3, [r0, #12]
   2f694:	2b10      	cmp	r3, #16
   2f696:	d029      	beq.n	2f6ec <nrf_cloud_decode_requested_state+0x124>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   2f698:	4933      	ldr	r1, [pc, #204]	; (2f768 <nrf_cloud_decode_requested_state+0x1a0>)
   2f69a:	9801      	ldr	r0, [sp, #4]
   2f69c:	f017 fbec 	bl	46e78 <cJSON_HasObjectItem>
   2f6a0:	bb00      	cbnz	r0, 2f6e4 <nrf_cloud_decode_requested_state+0x11c>
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2f6a2:	2302      	movs	r3, #2
   2f6a4:	4c2b      	ldr	r4, [pc, #172]	; (2f754 <nrf_cloud_decode_requested_state+0x18c>)
   2f6a6:	f363 0007 	bfi	r0, r3, #0, #8
   2f6aa:	4b29      	ldr	r3, [pc, #164]	; (2f750 <nrf_cloud_decode_requested_state+0x188>)
   2f6ac:	492f      	ldr	r1, [pc, #188]	; (2f76c <nrf_cloud_decode_requested_state+0x1a4>)
   2f6ae:	1ae4      	subs	r4, r4, r3
   2f6b0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   2f6b4:	f364 108f 	bfi	r0, r4, #6, #10
   2f6b8:	f015 f835 	bl	44726 <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   2f6bc:	2303      	movs	r3, #3
   2f6be:	f04f 0000 	mov.w	r0, #0
   2f6c2:	f363 0007 	bfi	r0, r3, #0, #8
   2f6c6:	f364 108f 	bfi	r0, r4, #6, #10
   2f6ca:	4929      	ldr	r1, [pc, #164]	; (2f770 <nrf_cloud_decode_requested_state+0x1a8>)
   2f6cc:	f015 f82b 	bl	44726 <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2f6d0:	f04f 0000 	mov.w	r0, #0
   2f6d4:	2303      	movs	r3, #3
   2f6d6:	f363 0007 	bfi	r0, r3, #0, #8
   2f6da:	f364 108f 	bfi	r0, r4, #6, #10
   2f6de:	4925      	ldr	r1, [pc, #148]	; (2f774 <nrf_cloud_decode_requested_state+0x1ac>)
   2f6e0:	f015 f821 	bl	44726 <log_string_sync>
		cJSON_Delete(root_obj);
   2f6e4:	4628      	mov	r0, r5
   2f6e6:	f7fb fca9 	bl	2b03c <cJSON_Delete>
   2f6ea:	e7b6      	b.n	2f65a <nrf_cloud_decode_requested_state+0x92>
	const char *state_str = pairing_state_obj->valuestring;
   2f6ec:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2f6ee:	4822      	ldr	r0, [pc, #136]	; (2f778 <nrf_cloud_decode_requested_state+0x1b0>)
   2f6f0:	f7ed fdb8 	bl	1d264 <strlen>
   2f6f4:	4920      	ldr	r1, [pc, #128]	; (2f778 <nrf_cloud_decode_requested_state+0x1b0>)
   2f6f6:	4602      	mov	r2, r0
   2f6f8:	4620      	mov	r0, r4
   2f6fa:	f018 ff3e 	bl	4857a <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2f6fe:	4604      	mov	r4, r0
   2f700:	b928      	cbnz	r0, 2f70e <nrf_cloud_decode_requested_state+0x146>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2f702:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2f704:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2f706:	7033      	strb	r3, [r6, #0]
	cJSON_Delete(root_obj);
   2f708:	f7fb fc98 	bl	2b03c <cJSON_Delete>
	return 0;
   2f70c:	e7b6      	b.n	2f67c <nrf_cloud_decode_requested_state+0xb4>
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2f70e:	2301      	movs	r3, #1
   2f710:	f04f 0000 	mov.w	r0, #0
   2f714:	4a0e      	ldr	r2, [pc, #56]	; (2f750 <nrf_cloud_decode_requested_state+0x188>)
   2f716:	f363 0007 	bfi	r0, r3, #0, #8
   2f71a:	4b0e      	ldr	r3, [pc, #56]	; (2f754 <nrf_cloud_decode_requested_state+0x18c>)
   2f71c:	4917      	ldr	r1, [pc, #92]	; (2f77c <nrf_cloud_decode_requested_state+0x1b4>)
   2f71e:	1a9b      	subs	r3, r3, r2
   2f720:	08db      	lsrs	r3, r3, #3
   2f722:	f363 108f 	bfi	r0, r3, #6, #10
   2f726:	f014 fffe 	bl	44726 <log_string_sync>
		cJSON_Delete(root_obj);
   2f72a:	4628      	mov	r0, r5
   2f72c:	f7fb fc86 	bl	2b03c <cJSON_Delete>
		return -ENOTSUP;
   2f730:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2f734:	e7a2      	b.n	2f67c <nrf_cloud_decode_requested_state+0xb4>
   2f736:	bf00      	nop
   2f738:	0004f542 	.word	0x0004f542
   2f73c:	0004b33b 	.word	0x0004b33b
   2f740:	0004f6cb 	.word	0x0004f6cb
   2f744:	0004f561 	.word	0x0004f561
   2f748:	0004f576 	.word	0x0004f576
   2f74c:	0004f590 	.word	0x0004f590
   2f750:	00049788 	.word	0x00049788
   2f754:	00049888 	.word	0x00049888
   2f758:	0004f5a0 	.word	0x0004f5a0
   2f75c:	0004f5b7 	.word	0x0004f5b7
   2f760:	0004f5d2 	.word	0x0004f5d2
   2f764:	00051bb9 	.word	0x00051bb9
   2f768:	00052307 	.word	0x00052307
   2f76c:	0004f5da 	.word	0x0004f5da
   2f770:	0004f602 	.word	0x0004f602
   2f774:	0004f628 	.word	0x0004f628
   2f778:	0004f663 	.word	0x0004f663
   2f77c:	0004f672 	.word	0x0004f672

0002f780 <nrf_cloud_encode_config_response>:

int nrf_cloud_encode_config_response(struct nrf_cloud_data const *const input,
				     struct nrf_cloud_data *const output,
				     bool *const has_config)
{
   2f780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f784:	4605      	mov	r5, r0
   2f786:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2f788:	460c      	mov	r4, r1
   2f78a:	b959      	cbnz	r1, 2f7a4 <nrf_cloud_encode_config_response+0x24>
   2f78c:	494e      	ldr	r1, [pc, #312]	; (2f8c8 <nrf_cloud_encode_config_response+0x148>)
   2f78e:	484f      	ldr	r0, [pc, #316]	; (2f8cc <nrf_cloud_encode_config_response+0x14c>)
   2f790:	f240 1307 	movw	r3, #263	; 0x107
   2f794:	4a4e      	ldr	r2, [pc, #312]	; (2f8d0 <nrf_cloud_encode_config_response+0x150>)
   2f796:	f014 fd9b 	bl	442d0 <printk>
   2f79a:	f240 1107 	movw	r1, #263	; 0x107
   2f79e:	484c      	ldr	r0, [pc, #304]	; (2f8d0 <nrf_cloud_encode_config_response+0x150>)
   2f7a0:	f014 ffb0 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2f7a4:	2d00      	cmp	r5, #0
   2f7a6:	d164      	bne.n	2f872 <nrf_cloud_encode_config_response+0xf2>
   2f7a8:	494a      	ldr	r1, [pc, #296]	; (2f8d4 <nrf_cloud_encode_config_response+0x154>)
   2f7aa:	4848      	ldr	r0, [pc, #288]	; (2f8cc <nrf_cloud_encode_config_response+0x14c>)
   2f7ac:	f44f 7384 	mov.w	r3, #264	; 0x108
   2f7b0:	4a47      	ldr	r2, [pc, #284]	; (2f8d0 <nrf_cloud_encode_config_response+0x150>)
   2f7b2:	f014 fd8d 	bl	442d0 <printk>
   2f7b6:	f44f 7184 	mov.w	r1, #264	; 0x108
   2f7ba:	4845      	ldr	r0, [pc, #276]	; (2f8d0 <nrf_cloud_encode_config_response+0x150>)
   2f7bc:	f014 ffa2 	bl	44704 <assert_post_action>
	cJSON *state_obj = NULL;
	cJSON *config_obj = NULL;
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;

	if (input_obj == NULL) {
		return -ESRCH; /* invalid input or no JSON parsed */
   2f7c0:	f06f 0002 	mvn.w	r0, #2
   2f7c4:	e07d      	b.n	2f8c2 <nrf_cloud_encode_config_response+0x142>
		output->len = 0;
		return 0;
	}

	/* Prepare JSON response for the delta */
	root_obj = cJSON_CreateObject();
   2f7c6:	f7fb fd0d 	bl	2b1e4 <cJSON_CreateObject>
   2f7ca:	4605      	mov	r5, r0
	desired_obj = cJSON_CreateObject();
   2f7cc:	f7fb fd0a 	bl	2b1e4 <cJSON_CreateObject>
   2f7d0:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2f7d2:	f7fb fcc7 	bl	2b164 <cJSON_CreateNull>
   2f7d6:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   2f7d8:	f7fb fd04 	bl	2b1e4 <cJSON_CreateObject>
   2f7dc:	4682      	mov	sl, r0

	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2f7de:	b135      	cbz	r5, 2f7ee <nrf_cloud_encode_config_response+0x6e>
   2f7e0:	f1b8 0f00 	cmp.w	r8, #0
   2f7e4:	d003      	beq.n	2f7ee <nrf_cloud_encode_config_response+0x6e>
   2f7e6:	f1b9 0f00 	cmp.w	r9, #0
   2f7ea:	d000      	beq.n	2f7ee <nrf_cloud_encode_config_response+0x6e>
   2f7ec:	b9a0      	cbnz	r0, 2f818 <nrf_cloud_encode_config_response+0x98>
		(reported_obj == NULL)) {
		cJSON_Delete(root_obj);
   2f7ee:	4628      	mov	r0, r5
   2f7f0:	f7fb fc24 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(desired_obj);
   2f7f4:	4640      	mov	r0, r8
   2f7f6:	f7fb fc21 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(null_obj);
   2f7fa:	4648      	mov	r0, r9
   2f7fc:	f7fb fc1e 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2f800:	4650      	mov	r0, sl
   2f802:	f7fb fc1b 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2f806:	4638      	mov	r0, r7
   2f808:	f7fb fc18 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(state_obj);
   2f80c:	4630      	mov	r0, r6
   2f80e:	f7fb fc15 	bl	2b03c <cJSON_Delete>
	(void)json_add_obj(state_obj, "state", root_obj);
	buffer = cJSON_PrintUnformatted(state_obj);
	cJSON_Delete(state_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2f812:	f06f 000b 	mvn.w	r0, #11
   2f816:	e054      	b.n	2f8c2 <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   2f818:	463a      	mov	r2, r7
   2f81a:	492f      	ldr	r1, [pc, #188]	; (2f8d8 <nrf_cloud_encode_config_response+0x158>)
   2f81c:	f017 fb35 	bl	46e8a <cJSON_AddItemToObject>
   2f820:	4628      	mov	r0, r5
   2f822:	4652      	mov	r2, sl
   2f824:	492d      	ldr	r1, [pc, #180]	; (2f8dc <nrf_cloud_encode_config_response+0x15c>)
   2f826:	f017 fb30 	bl	46e8a <cJSON_AddItemToObject>
   2f82a:	464a      	mov	r2, r9
   2f82c:	492a      	ldr	r1, [pc, #168]	; (2f8d8 <nrf_cloud_encode_config_response+0x158>)
   2f82e:	4640      	mov	r0, r8
   2f830:	f017 fb2b 	bl	46e8a <cJSON_AddItemToObject>
   2f834:	4642      	mov	r2, r8
   2f836:	492a      	ldr	r1, [pc, #168]	; (2f8e0 <nrf_cloud_encode_config_response+0x160>)
   2f838:	4628      	mov	r0, r5
   2f83a:	f017 fb26 	bl	46e8a <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   2f83e:	4630      	mov	r0, r6
   2f840:	f7fb fbfc 	bl	2b03c <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2f844:	f7fb fcce 	bl	2b1e4 <cJSON_CreateObject>
   2f848:	4606      	mov	r6, r0
	cJSON_AddItemToObject(parent, str, item);
   2f84a:	462a      	mov	r2, r5
   2f84c:	4925      	ldr	r1, [pc, #148]	; (2f8e4 <nrf_cloud_encode_config_response+0x164>)
   2f84e:	f017 fb1c 	bl	46e8a <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   2f852:	4630      	mov	r0, r6
   2f854:	f017 fafc 	bl	46e50 <cJSON_PrintUnformatted>
   2f858:	4605      	mov	r5, r0
	cJSON_Delete(state_obj);
   2f85a:	4630      	mov	r0, r6
   2f85c:	f7fb fbee 	bl	2b03c <cJSON_Delete>
	if (buffer == NULL) {
   2f860:	2d00      	cmp	r5, #0
   2f862:	d0d6      	beq.n	2f812 <nrf_cloud_encode_config_response+0x92>
	}

	output->ptr = buffer;
   2f864:	6065      	str	r5, [r4, #4]
	output->len = strlen(buffer);
   2f866:	4628      	mov	r0, r5
   2f868:	f7ed fcfc 	bl	1d264 <strlen>
   2f86c:	6020      	str	r0, [r4, #0]

	return 0;
   2f86e:	2000      	movs	r0, #0
   2f870:	e027      	b.n	2f8c2 <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2f872:	6868      	ldr	r0, [r5, #4]
   2f874:	f017 fae8 	bl	46e48 <cJSON_Parse>
	if (input_obj == NULL) {
   2f878:	4605      	mov	r5, r0
   2f87a:	2800      	cmp	r0, #0
   2f87c:	d0a0      	beq.n	2f7c0 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   2f87e:	4919      	ldr	r1, [pc, #100]	; (2f8e4 <nrf_cloud_encode_config_response+0x164>)
   2f880:	f017 fb1a 	bl	46eb8 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2f884:	1e06      	subs	r6, r0, #0
   2f886:	bf14      	ite	ne
   2f888:	4630      	movne	r0, r6
   2f88a:	4628      	moveq	r0, r5
   2f88c:	4912      	ldr	r1, [pc, #72]	; (2f8d8 <nrf_cloud_encode_config_response+0x158>)
   2f88e:	f017 fb13 	bl	46eb8 <cJSON_DetachItemFromObject>
   2f892:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2f894:	4628      	mov	r0, r5
   2f896:	f7fb fbd1 	bl	2b03c <cJSON_Delete>
	if (has_config) {
   2f89a:	f1b8 0f00 	cmp.w	r8, #0
   2f89e:	d004      	beq.n	2f8aa <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2f8a0:	1c3b      	adds	r3, r7, #0
   2f8a2:	bf18      	it	ne
   2f8a4:	2301      	movne	r3, #1
   2f8a6:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2f8aa:	b10e      	cbz	r6, 2f8b0 <nrf_cloud_encode_config_response+0x130>
   2f8ac:	2f00      	cmp	r7, #0
   2f8ae:	d18a      	bne.n	2f7c6 <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2f8b0:	4630      	mov	r0, r6
   2f8b2:	f7fb fbc3 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(config_obj);
   2f8b6:	4638      	mov	r0, r7
   2f8b8:	f7fb fbc0 	bl	2b03c <cJSON_Delete>
		output->ptr = NULL;
   2f8bc:	2000      	movs	r0, #0
		output->len = 0;
   2f8be:	e9c4 0000 	strd	r0, r0, [r4]
}
   2f8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f8c6:	bf00      	nop
   2f8c8:	0004baa6 	.word	0x0004baa6
   2f8cc:	0004b33b 	.word	0x0004b33b
   2f8d0:	0004f6cb 	.word	0x0004f6cb
   2f8d4:	0004f561 	.word	0x0004f561
   2f8d8:	00052307 	.word	0x00052307
   2f8dc:	0004ba32 	.word	0x0004ba32
   2f8e0:	0004f53a 	.word	0x0004f53a
   2f8e4:	00051bb9 	.word	0x00051bb9

0002f8e8 <nrf_cloud_encode_state>:

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   2f8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f8ec:	4604      	mov	r4, r0
   2f8ee:	b086      	sub	sp, #24
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   2f8f0:	4689      	mov	r9, r1
   2f8f2:	b959      	cbnz	r1, 2f90c <nrf_cloud_encode_state+0x24>
   2f8f4:	495a      	ldr	r1, [pc, #360]	; (2fa60 <nrf_cloud_encode_state+0x178>)
   2f8f6:	485b      	ldr	r0, [pc, #364]	; (2fa64 <nrf_cloud_encode_state+0x17c>)
   2f8f8:	f240 1359 	movw	r3, #345	; 0x159
   2f8fc:	4a5a      	ldr	r2, [pc, #360]	; (2fa68 <nrf_cloud_encode_state+0x180>)
   2f8fe:	f014 fce7 	bl	442d0 <printk>
   2f902:	f240 1159 	movw	r1, #345	; 0x159
   2f906:	4858      	ldr	r0, [pc, #352]	; (2fa68 <nrf_cloud_encode_state+0x180>)
   2f908:	f014 fefc 	bl	44704 <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   2f90c:	f7fb fc6a 	bl	2b1e4 <cJSON_CreateObject>
   2f910:	4607      	mov	r7, r0
	cJSON *state_obj = cJSON_CreateObject();
   2f912:	f7fb fc67 	bl	2b1e4 <cJSON_CreateObject>
   2f916:	4680      	mov	r8, r0
	cJSON *reported_obj = cJSON_CreateObject();
   2f918:	f7fb fc64 	bl	2b1e4 <cJSON_CreateObject>
   2f91c:	4606      	mov	r6, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   2f91e:	f7fb fc61 	bl	2b1e4 <cJSON_CreateObject>
   2f922:	4605      	mov	r5, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   2f924:	b127      	cbz	r7, 2f930 <nrf_cloud_encode_state+0x48>
   2f926:	f1b8 0f00 	cmp.w	r8, #0
   2f92a:	d001      	beq.n	2f930 <nrf_cloud_encode_state+0x48>
   2f92c:	b106      	cbz	r6, 2f930 <nrf_cloud_encode_state+0x48>
	    (reported_obj == NULL) || (pairing_obj == NULL)) {
   2f92e:	b970      	cbnz	r0, 2f94e <nrf_cloud_encode_state+0x66>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   2f930:	4638      	mov	r0, r7
	ret += json_add_obj(reported_obj, "pairing", pairing_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   2f932:	f7fb fb83 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(state_obj);
   2f936:	4640      	mov	r0, r8
   2f938:	f7fb fb80 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2f93c:	4630      	mov	r0, r6
   2f93e:	f7fb fb7d 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2f942:	4628      	mov	r0, r5
   2f944:	f7fb fb7a 	bl	2b03c <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   2f948:	f06f 040b 	mvn.w	r4, #11
   2f94c:	e011      	b.n	2f972 <nrf_cloud_encode_state+0x8a>
	switch (reported_state) {
   2f94e:	2c06      	cmp	r4, #6
   2f950:	d013      	beq.n	2f97a <nrf_cloud_encode_state+0x92>
   2f952:	2c07      	cmp	r4, #7
   2f954:	d04c      	beq.n	2f9f0 <nrf_cloud_encode_state+0x108>
		cJSON_Delete(root_obj);
   2f956:	4638      	mov	r0, r7
   2f958:	f7fb fb70 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(state_obj);
   2f95c:	4640      	mov	r0, r8
   2f95e:	f7fb fb6d 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2f962:	4630      	mov	r0, r6
   2f964:	f7fb fb6a 	bl	2b03c <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   2f968:	4628      	mov	r0, r5
   2f96a:	f7fb fb67 	bl	2b03c <cJSON_Delete>
		return -ENOTSUP;
   2f96e:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   2f972:	4620      	mov	r0, r4
   2f974:	b006      	add	sp, #24
   2f976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2f97a:	4a3c      	ldr	r2, [pc, #240]	; (2fa6c <nrf_cloud_encode_state+0x184>)
   2f97c:	493c      	ldr	r1, [pc, #240]	; (2fa70 <nrf_cloud_encode_state+0x188>)
   2f97e:	f018 f85f 	bl	47a40 <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   2f982:	493c      	ldr	r1, [pc, #240]	; (2fa74 <nrf_cloud_encode_state+0x18c>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   2f984:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   2f986:	4628      	mov	r0, r5
   2f988:	f018 f86f 	bl	47a6a <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   2f98c:	493a      	ldr	r1, [pc, #232]	; (2fa78 <nrf_cloud_encode_state+0x190>)
		ret += json_add_null(pairing_obj, "topics");
   2f98e:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2f990:	4628      	mov	r0, r5
   2f992:	f018 f86a 	bl	47a6a <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   2f996:	4939      	ldr	r1, [pc, #228]	; (2fa7c <nrf_cloud_encode_state+0x194>)
		ret += json_add_null(pairing_obj, "config");
   2f998:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   2f99a:	4630      	mov	r0, r6
   2f99c:	f018 f865 	bl	47a6a <json_add_null>
		ret += json_add_null(reported_obj,
   2f9a0:	4937      	ldr	r1, [pc, #220]	; (2fa80 <nrf_cloud_encode_state+0x198>)
		ret += json_add_null(reported_obj, "stage");
   2f9a2:	4404      	add	r4, r0
		ret += json_add_null(reported_obj,
   2f9a4:	4630      	mov	r0, r6
   2f9a6:	f018 f860 	bl	47a6a <json_add_null>
   2f9aa:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2f9ac:	462a      	mov	r2, r5
   2f9ae:	4935      	ldr	r1, [pc, #212]	; (2fa84 <nrf_cloud_encode_state+0x19c>)
   2f9b0:	4630      	mov	r0, r6
   2f9b2:	f017 fa6a 	bl	46e8a <cJSON_AddItemToObject>
   2f9b6:	4632      	mov	r2, r6
   2f9b8:	4933      	ldr	r1, [pc, #204]	; (2fa88 <nrf_cloud_encode_state+0x1a0>)
   2f9ba:	4640      	mov	r0, r8
   2f9bc:	f017 fa65 	bl	46e8a <cJSON_AddItemToObject>
   2f9c0:	4638      	mov	r0, r7
   2f9c2:	4642      	mov	r2, r8
   2f9c4:	492a      	ldr	r1, [pc, #168]	; (2fa70 <nrf_cloud_encode_state+0x188>)
   2f9c6:	f017 fa60 	bl	46e8a <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   2f9ca:	4638      	mov	r0, r7
	if (ret != 0) {
   2f9cc:	2c00      	cmp	r4, #0
   2f9ce:	d1b0      	bne.n	2f932 <nrf_cloud_encode_state+0x4a>
	buffer = cJSON_PrintUnformatted(root_obj);
   2f9d0:	f017 fa3e 	bl	46e50 <cJSON_PrintUnformatted>
   2f9d4:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   2f9d6:	4638      	mov	r0, r7
   2f9d8:	f7fb fb30 	bl	2b03c <cJSON_Delete>
	if (buffer == NULL) {
   2f9dc:	2d00      	cmp	r5, #0
   2f9de:	d0b3      	beq.n	2f948 <nrf_cloud_encode_state+0x60>
	output->ptr = buffer;
   2f9e0:	f8c9 5004 	str.w	r5, [r9, #4]
	output->len = strlen(buffer);
   2f9e4:	4628      	mov	r0, r5
   2f9e6:	f7ed fc3d 	bl	1d264 <strlen>
   2f9ea:	f8c9 0000 	str.w	r0, [r9]
	return 0;
   2f9ee:	e7c0      	b.n	2f972 <nrf_cloud_encode_state+0x8a>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   2f9f0:	aa04      	add	r2, sp, #16
   2f9f2:	4669      	mov	r1, sp
   2f9f4:	a802      	add	r0, sp, #8
   2f9f6:	f001 fa63 	bl	30ec0 <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2f9fa:	9a05      	ldr	r2, [sp, #20]
   2f9fc:	4920      	ldr	r1, [pc, #128]	; (2fa80 <nrf_cloud_encode_state+0x198>)
   2f9fe:	4630      	mov	r0, r6
   2fa00:	f018 f81e 	bl	47a40 <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2fa04:	4a21      	ldr	r2, [pc, #132]	; (2fa8c <nrf_cloud_encode_state+0x1a4>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   2fa06:	4604      	mov	r4, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2fa08:	4919      	ldr	r1, [pc, #100]	; (2fa70 <nrf_cloud_encode_state+0x188>)
   2fa0a:	4628      	mov	r0, r5
   2fa0c:	f018 f818 	bl	47a40 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   2fa10:	4919      	ldr	r1, [pc, #100]	; (2fa78 <nrf_cloud_encode_state+0x190>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   2fa12:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   2fa14:	4628      	mov	r0, r5
   2fa16:	f018 f828 	bl	47a6a <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   2fa1a:	491d      	ldr	r1, [pc, #116]	; (2fa90 <nrf_cloud_encode_state+0x1a8>)
		ret += json_add_null(pairing_obj, "config");
   2fa1c:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "pairingStatus");
   2fa1e:	4630      	mov	r0, r6
   2fa20:	f018 f823 	bl	47a6a <json_add_null>
   2fa24:	4404      	add	r4, r0
		cJSON *topics_obj = cJSON_CreateObject();
   2fa26:	f7fb fbdd 	bl	2b1e4 <cJSON_CreateObject>
		if (topics_obj == NULL) {
   2fa2a:	4682      	mov	sl, r0
   2fa2c:	2800      	cmp	r0, #0
   2fa2e:	f43f af7f 	beq.w	2f930 <nrf_cloud_encode_state+0x48>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2fa32:	9a03      	ldr	r2, [sp, #12]
   2fa34:	4917      	ldr	r1, [pc, #92]	; (2fa94 <nrf_cloud_encode_state+0x1ac>)
   2fa36:	f018 f803 	bl	47a40 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2fa3a:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   2fa3c:	4404      	add	r4, r0
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2fa3e:	4916      	ldr	r1, [pc, #88]	; (2fa98 <nrf_cloud_encode_state+0x1b0>)
   2fa40:	4650      	mov	r0, sl
   2fa42:	f017 fffd 	bl	47a40 <json_add_str>
	cJSON_AddItemToObject(parent, str, item);
   2fa46:	4652      	mov	r2, sl
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   2fa48:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   2fa4a:	490a      	ldr	r1, [pc, #40]	; (2fa74 <nrf_cloud_encode_state+0x18c>)
   2fa4c:	4628      	mov	r0, r5
   2fa4e:	f017 fa1c 	bl	46e8a <cJSON_AddItemToObject>
		if (ret != 0) {
   2fa52:	2c00      	cmp	r4, #0
   2fa54:	d0aa      	beq.n	2f9ac <nrf_cloud_encode_state+0xc4>
			cJSON_Delete(topics_obj);
   2fa56:	4650      	mov	r0, sl
   2fa58:	f7fb faf0 	bl	2b03c <cJSON_Delete>
		break;
   2fa5c:	e7a6      	b.n	2f9ac <nrf_cloud_encode_state+0xc4>
   2fa5e:	bf00      	nop
   2fa60:	0004baa6 	.word	0x0004baa6
   2fa64:	0004b33b 	.word	0x0004b33b
   2fa68:	0004f6cb 	.word	0x0004f6cb
   2fa6c:	0004f663 	.word	0x0004f663
   2fa70:	00051bb9 	.word	0x00051bb9
   2fa74:	0004f756 	.word	0x0004f756
   2fa78:	00052307 	.word	0x00052307
   2fa7c:	0004f75d 	.word	0x0004f75d
   2fa80:	0004f5b7 	.word	0x0004f5b7
   2fa84:	0004f5d2 	.word	0x0004f5d2
   2fa88:	0004ba32 	.word	0x0004ba32
   2fa8c:	0004f763 	.word	0x0004f763
   2fa90:	0004f76a 	.word	0x0004f76a
   2fa94:	0004f778 	.word	0x0004f778
   2fa98:	0004f77c 	.word	0x0004f77c

0002fa9c <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   2fa9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2faa0:	4689      	mov	r9, r1
   2faa2:	4690      	mov	r8, r2
   2faa4:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(input != NULL);
   2faa6:	4604      	mov	r4, r0
   2faa8:	b958      	cbnz	r0, 2fac2 <nrf_cloud_decode_data_endpoint+0x26>
   2faaa:	4950      	ldr	r1, [pc, #320]	; (2fbec <nrf_cloud_decode_data_endpoint+0x150>)
   2faac:	4850      	ldr	r0, [pc, #320]	; (2fbf0 <nrf_cloud_decode_data_endpoint+0x154>)
   2faae:	f240 13cb 	movw	r3, #459	; 0x1cb
   2fab2:	4a50      	ldr	r2, [pc, #320]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fab4:	f014 fc0c 	bl	442d0 <printk>
   2fab8:	f240 11cb 	movw	r1, #459	; 0x1cb
   2fabc:	484d      	ldr	r0, [pc, #308]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fabe:	f014 fe21 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2fac2:	6863      	ldr	r3, [r4, #4]
   2fac4:	b95b      	cbnz	r3, 2fade <nrf_cloud_decode_data_endpoint+0x42>
   2fac6:	494c      	ldr	r1, [pc, #304]	; (2fbf8 <nrf_cloud_decode_data_endpoint+0x15c>)
   2fac8:	4849      	ldr	r0, [pc, #292]	; (2fbf0 <nrf_cloud_decode_data_endpoint+0x154>)
   2faca:	f44f 73e6 	mov.w	r3, #460	; 0x1cc
   2face:	4a49      	ldr	r2, [pc, #292]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fad0:	f014 fbfe 	bl	442d0 <printk>
   2fad4:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
   2fad8:	4846      	ldr	r0, [pc, #280]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fada:	f014 fe13 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2fade:	6823      	ldr	r3, [r4, #0]
   2fae0:	b95b      	cbnz	r3, 2fafa <nrf_cloud_decode_data_endpoint+0x5e>
   2fae2:	4946      	ldr	r1, [pc, #280]	; (2fbfc <nrf_cloud_decode_data_endpoint+0x160>)
   2fae4:	4842      	ldr	r0, [pc, #264]	; (2fbf0 <nrf_cloud_decode_data_endpoint+0x154>)
   2fae6:	f240 13cd 	movw	r3, #461	; 0x1cd
   2faea:	4a42      	ldr	r2, [pc, #264]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2faec:	f014 fbf0 	bl	442d0 <printk>
   2faf0:	f240 11cd 	movw	r1, #461	; 0x1cd
   2faf4:	483f      	ldr	r0, [pc, #252]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2faf6:	f014 fe05 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2fafa:	f1b9 0f00 	cmp.w	r9, #0
   2fafe:	d10b      	bne.n	2fb18 <nrf_cloud_decode_data_endpoint+0x7c>
   2fb00:	493f      	ldr	r1, [pc, #252]	; (2fc00 <nrf_cloud_decode_data_endpoint+0x164>)
   2fb02:	483b      	ldr	r0, [pc, #236]	; (2fbf0 <nrf_cloud_decode_data_endpoint+0x154>)
   2fb04:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   2fb08:	4a3a      	ldr	r2, [pc, #232]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fb0a:	f014 fbe1 	bl	442d0 <printk>
   2fb0e:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   2fb12:	4838      	ldr	r0, [pc, #224]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fb14:	f014 fdf6 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2fb18:	f1b8 0f00 	cmp.w	r8, #0
   2fb1c:	d10b      	bne.n	2fb36 <nrf_cloud_decode_data_endpoint+0x9a>
   2fb1e:	4939      	ldr	r1, [pc, #228]	; (2fc04 <nrf_cloud_decode_data_endpoint+0x168>)
   2fb20:	4833      	ldr	r0, [pc, #204]	; (2fbf0 <nrf_cloud_decode_data_endpoint+0x154>)
   2fb22:	f240 13cf 	movw	r3, #463	; 0x1cf
   2fb26:	4a33      	ldr	r2, [pc, #204]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fb28:	f014 fbd2 	bl	442d0 <printk>
   2fb2c:	f240 11cf 	movw	r1, #463	; 0x1cf
   2fb30:	4830      	ldr	r0, [pc, #192]	; (2fbf4 <nrf_cloud_decode_data_endpoint+0x158>)
   2fb32:	f014 fde7 	bl	44704 <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2fb36:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   2fb38:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2fb3a:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   2fb3c:	f017 f984 	bl	46e48 <cJSON_Parse>
	if (root_obj == NULL) {
   2fb40:	4605      	mov	r5, r0
   2fb42:	b308      	cbz	r0, 2fb88 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2fb44:	a901      	add	r1, sp, #4
   2fb46:	f7ff fd2d 	bl	2f5a4 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   2fb4a:	b307      	cbz	r7, 2fb8e <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   2fb4c:	492e      	ldr	r1, [pc, #184]	; (2fc08 <nrf_cloud_decode_data_endpoint+0x16c>)
   2fb4e:	9801      	ldr	r0, [sp, #4]
   2fb50:	f017 ff87 	bl	47a62 <json_object_decode>
   2fb54:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2fb56:	492d      	ldr	r1, [pc, #180]	; (2fc0c <nrf_cloud_decode_data_endpoint+0x170>)
   2fb58:	9801      	ldr	r0, [sp, #4]
   2fb5a:	f017 ff82 	bl	47a62 <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2fb5e:	492c      	ldr	r1, [pc, #176]	; (2fc10 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2fb60:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2fb62:	f017 ff7e 	bl	47a62 <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2fb66:	492b      	ldr	r1, [pc, #172]	; (2fc14 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2fb68:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2fb6a:	4630      	mov	r0, r6
   2fb6c:	f017 ff79 	bl	47a62 <json_object_decode>
   2fb70:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2fb72:	f1ba 0f00 	cmp.w	sl, #0
   2fb76:	d004      	beq.n	2fb82 <nrf_cloud_decode_data_endpoint+0xe6>
   2fb78:	b118      	cbz	r0, 2fb82 <nrf_cloud_decode_data_endpoint+0xe6>
   2fb7a:	f8da 300c 	ldr.w	r3, [sl, #12]
   2fb7e:	2b10      	cmp	r3, #16
   2fb80:	d007      	beq.n	2fb92 <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2fb82:	4628      	mov	r0, r5
   2fb84:	f7fb fa5a 	bl	2b03c <cJSON_Delete>
		return -ENOENT;
   2fb88:	f06f 0401 	mvn.w	r4, #1
   2fb8c:	e017      	b.n	2fbbe <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   2fb8e:	463c      	mov	r4, r7
   2fb90:	e7e1      	b.n	2fb56 <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   2fb92:	4821      	ldr	r0, [pc, #132]	; (2fc18 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   2fb94:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   2fb98:	f7ed fb64 	bl	1d264 <strlen>
   2fb9c:	491e      	ldr	r1, [pc, #120]	; (2fc18 <nrf_cloud_decode_data_endpoint+0x17c>)
   2fb9e:	4602      	mov	r2, r0
   2fba0:	4650      	mov	r0, sl
   2fba2:	f018 fcea 	bl	4857a <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2fba6:	2800      	cmp	r0, #0
   2fba8:	d1eb      	bne.n	2fb82 <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2fbaa:	b164      	cbz	r4, 2fbc6 <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2fbac:	4620      	mov	r0, r4
   2fbae:	4639      	mov	r1, r7
   2fbb0:	f017 ff6b 	bl	47a8a <json_decode_and_alloc>
		if (err) {
   2fbb4:	4604      	mov	r4, r0
   2fbb6:	b130      	cbz	r0, 2fbc6 <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   2fbb8:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2fbba:	f7fb fa3f 	bl	2b03c <cJSON_Delete>

	return err;
}
   2fbbe:	4620      	mov	r0, r4
   2fbc0:	b002      	add	sp, #8
   2fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2fbc6:	4915      	ldr	r1, [pc, #84]	; (2fc1c <nrf_cloud_decode_data_endpoint+0x180>)
   2fbc8:	4630      	mov	r0, r6
   2fbca:	f017 ff4a 	bl	47a62 <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2fbce:	4649      	mov	r1, r9
   2fbd0:	f017 ff5b 	bl	47a8a <json_decode_and_alloc>
	if (err) {
   2fbd4:	4604      	mov	r4, r0
   2fbd6:	2800      	cmp	r0, #0
   2fbd8:	d1ee      	bne.n	2fbb8 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   2fbda:	4911      	ldr	r1, [pc, #68]	; (2fc20 <nrf_cloud_decode_data_endpoint+0x184>)
   2fbdc:	4630      	mov	r0, r6
   2fbde:	f017 ff40 	bl	47a62 <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2fbe2:	4641      	mov	r1, r8
   2fbe4:	f017 ff51 	bl	47a8a <json_decode_and_alloc>
	if (err) {
   2fbe8:	4604      	mov	r4, r0
   2fbea:	e7e5      	b.n	2fbb8 <nrf_cloud_decode_data_endpoint+0x11c>
   2fbec:	0004f561 	.word	0x0004f561
   2fbf0:	0004b33b 	.word	0x0004b33b
   2fbf4:	0004f6cb 	.word	0x0004f6cb
   2fbf8:	0004f576 	.word	0x0004f576
   2fbfc:	0004f590 	.word	0x0004f590
   2fc00:	0004f504 	.word	0x0004f504
   2fc04:	0004f51f 	.word	0x0004f51f
   2fc08:	0004f5b7 	.word	0x0004f5b7
   2fc0c:	0004f5d2 	.word	0x0004f5d2
   2fc10:	00051bb9 	.word	0x00051bb9
   2fc14:	0004f756 	.word	0x0004f756
   2fc18:	0004f763 	.word	0x0004f763
   2fc1c:	0004f778 	.word	0x0004f778
   2fc20:	0004f77c 	.word	0x0004f77c

0002fc24 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2fc24:	b510      	push	{r4, lr}
   2fc26:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   2fc28:	2218      	movs	r2, #24
   2fc2a:	2100      	movs	r1, #0
   2fc2c:	4668      	mov	r0, sp
   2fc2e:	f018 facb 	bl	481c8 <memset>
   2fc32:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2fc34:	4669      	mov	r1, sp
   2fc36:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   2fc38:	9304      	str	r3, [sp, #16]
   2fc3a:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2fc3e:	f7ff fe53 	bl	2f8e8 <nrf_cloud_encode_state>
	if (err) {
   2fc42:	4604      	mov	r4, r0
   2fc44:	b188      	cbz	r0, 2fc6a <state_ua_pin_wait+0x46>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2fc46:	2301      	movs	r3, #1
   2fc48:	f04f 0000 	mov.w	r0, #0
   2fc4c:	4a1b      	ldr	r2, [pc, #108]	; (2fcbc <state_ua_pin_wait+0x98>)
   2fc4e:	f363 0007 	bfi	r0, r3, #0, #8
   2fc52:	4b1b      	ldr	r3, [pc, #108]	; (2fcc0 <state_ua_pin_wait+0x9c>)
   2fc54:	491b      	ldr	r1, [pc, #108]	; (2fcc4 <state_ua_pin_wait+0xa0>)
   2fc56:	1a9b      	subs	r3, r3, r2
   2fc58:	08db      	lsrs	r3, r3, #3
   2fc5a:	f363 108f 	bfi	r0, r3, #6, #10
   2fc5e:	4622      	mov	r2, r4
   2fc60:	f014 fd61 	bl	44726 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   2fc64:	4620      	mov	r0, r4
   2fc66:	b00c      	add	sp, #48	; 0x30
   2fc68:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2fc6a:	4668      	mov	r0, sp
   2fc6c:	f001 f86c 	bl	30d48 <nct_cc_send>
	if (err) {
   2fc70:	4604      	mov	r4, r0
   2fc72:	b190      	cbz	r0, 2fc9a <state_ua_pin_wait+0x76>
		LOG_ERR("nct_cc_send failed %d", err);
   2fc74:	2301      	movs	r3, #1
   2fc76:	f04f 0000 	mov.w	r0, #0
   2fc7a:	4a10      	ldr	r2, [pc, #64]	; (2fcbc <state_ua_pin_wait+0x98>)
   2fc7c:	f363 0007 	bfi	r0, r3, #0, #8
   2fc80:	4b0f      	ldr	r3, [pc, #60]	; (2fcc0 <state_ua_pin_wait+0x9c>)
   2fc82:	4911      	ldr	r1, [pc, #68]	; (2fcc8 <state_ua_pin_wait+0xa4>)
   2fc84:	1a9b      	subs	r3, r3, r2
   2fc86:	08db      	lsrs	r3, r3, #3
   2fc88:	f363 108f 	bfi	r0, r3, #6, #10
   2fc8c:	4622      	mov	r2, r4
   2fc8e:	f014 fd4a 	bl	44726 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2fc92:	9801      	ldr	r0, [sp, #4]
   2fc94:	f018 fa3d 	bl	48112 <k_free>
		return err;
   2fc98:	e7e4      	b.n	2fc64 <state_ua_pin_wait+0x40>
	nrf_cloud_free((void *)msg.data.ptr);
   2fc9a:	9801      	ldr	r0, [sp, #4]
   2fc9c:	f018 fa39 	bl	48112 <k_free>
	struct nrf_cloud_evt evt = {
   2fca0:	2218      	movs	r2, #24
   2fca2:	4621      	mov	r1, r4
   2fca4:	eb0d 0002 	add.w	r0, sp, r2
   2fca8:	f018 fa8e 	bl	481c8 <memset>
   2fcac:	2302      	movs	r3, #2
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2fcae:	a906      	add	r1, sp, #24
   2fcb0:	2006      	movs	r0, #6
	struct nrf_cloud_evt evt = {
   2fcb2:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2fcb6:	f7ff fa7f 	bl	2f1b8 <nfsm_set_current_state_and_notify>
	return 0;
   2fcba:	e7d3      	b.n	2fc64 <state_ua_pin_wait+0x40>
   2fcbc:	00049788 	.word	0x00049788
   2fcc0:	00049898 	.word	0x00049898
   2fcc4:	0004f945 	.word	0x0004f945
   2fcc8:	0004f966 	.word	0x0004f966

0002fccc <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   2fccc:	b510      	push	{r4, lr}
   2fcce:	4604      	mov	r4, r0
   2fcd0:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   2fcd2:	2100      	movs	r1, #0
   2fcd4:	2218      	movs	r2, #24
   2fcd6:	4668      	mov	r0, sp
   2fcd8:	f018 fa76 	bl	481c8 <memset>
   2fcdc:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   2fcde:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2fce0:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2fce4:	b139      	cbz	r1, 2fcf6 <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2fce6:	4669      	mov	r1, sp
   2fce8:	200c      	movs	r0, #12
   2fcea:	f7ff fa65 	bl	2f1b8 <nfsm_set_current_state_and_notify>
		return 0;
   2fcee:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   2fcf0:	4620      	mov	r0, r4
   2fcf2:	b006      	add	sp, #24
   2fcf4:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2fcf6:	2004      	movs	r0, #4
   2fcf8:	f7ff fa5e 	bl	2f1b8 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2fcfc:	4806      	ldr	r0, [pc, #24]	; (2fd18 <cc_connection_handler+0x4c>)
   2fcfe:	f001 f823 	bl	30d48 <nct_cc_send>
	if (err) {
   2fd02:	4604      	mov	r4, r0
   2fd04:	b120      	cbz	r0, 2fd10 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2fd06:	4669      	mov	r1, sp
   2fd08:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2fd0a:	f7ff fa55 	bl	2f1b8 <nfsm_set_current_state_and_notify>
	return 0;
   2fd0e:	e7ef      	b.n	2fcf0 <cc_connection_handler+0x24>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2fd10:	4601      	mov	r1, r0
   2fd12:	2005      	movs	r0, #5
   2fd14:	e7f9      	b.n	2fd0a <cc_connection_handler+0x3e>
   2fd16:	bf00      	nop
   2fd18:	0004a300 	.word	0x0004a300

0002fd1c <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2fd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   2fd1e:	2700      	movs	r7, #0
{
   2fd20:	b095      	sub	sp, #84	; 0x54
   2fd22:	4605      	mov	r5, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2fd24:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   2fd26:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2fd2a:	f7ff fa3f 	bl	2f1ac <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2fd2e:	2218      	movs	r2, #24
   2fd30:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   2fd32:	4606      	mov	r6, r0
	struct nct_cc_data msg = {
   2fd34:	a808      	add	r0, sp, #32
   2fd36:	f018 fa47 	bl	481c8 <memset>
   2fd3a:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   2fd3c:	2218      	movs	r2, #24
   2fd3e:	4639      	mov	r1, r7
   2fd40:	a80e      	add	r0, sp, #56	; 0x38
	struct nct_cc_data msg = {
   2fd42:	930c      	str	r3, [sp, #48]	; 0x30
   2fd44:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	struct nrf_cloud_evt cloud_evt = {
   2fd48:	f018 fa3e 	bl	481c8 <memset>
   2fd4c:	2306      	movs	r3, #6
	if (evt->param.cc == NULL) {
   2fd4e:	6868      	ldr	r0, [r5, #4]
	struct nrf_cloud_evt cloud_evt = {
   2fd50:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (evt->param.cc == NULL) {
   2fd54:	b1b0      	cbz	r0, 2fd84 <cc_rx_data_handler+0x68>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2fd56:	f10d 0207 	add.w	r2, sp, #7
   2fd5a:	a908      	add	r1, sp, #32
   2fd5c:	f7ff fd10 	bl	2f780 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2fd60:	4602      	mov	r2, r0
   2fd62:	b370      	cbz	r0, 2fdc2 <cc_rx_data_handler+0xa6>
   2fd64:	1cc3      	adds	r3, r0, #3
   2fd66:	d02c      	beq.n	2fdc2 <cc_rx_data_handler+0xa6>
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2fd68:	2301      	movs	r3, #1
   2fd6a:	f04f 0000 	mov.w	r0, #0
   2fd6e:	496c      	ldr	r1, [pc, #432]	; (2ff20 <cc_rx_data_handler+0x204>)
   2fd70:	f363 0007 	bfi	r0, r3, #0, #8
   2fd74:	4b6b      	ldr	r3, [pc, #428]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fd76:	1a5b      	subs	r3, r3, r1
   2fd78:	08db      	lsrs	r3, r3, #3
   2fd7a:	f363 108f 	bfi	r0, r3, #6, #10
   2fd7e:	496a      	ldr	r1, [pc, #424]	; (2ff28 <cc_rx_data_handler+0x20c>)
   2fd80:	f014 fcd1 	bl	44726 <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2fd84:	4620      	mov	r0, r4
   2fd86:	f10d 0106 	add.w	r1, sp, #6
   2fd8a:	f7ff fc1d 	bl	2f5c8 <nrf_cloud_decode_requested_state>

	if (err) {
   2fd8e:	4604      	mov	r4, r0
   2fd90:	2800      	cmp	r0, #0
   2fd92:	d045      	beq.n	2fe20 <cc_rx_data_handler+0x104>
		if (!config_found) {
   2fd94:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fd98:	2b00      	cmp	r3, #0
   2fd9a:	f040 80be 	bne.w	2ff1a <cc_rx_data_handler+0x1fe>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2fd9e:	2301      	movs	r3, #1
   2fda0:	f04f 0000 	mov.w	r0, #0
   2fda4:	4a5e      	ldr	r2, [pc, #376]	; (2ff20 <cc_rx_data_handler+0x204>)
   2fda6:	f363 0007 	bfi	r0, r3, #0, #8
   2fdaa:	4b5e      	ldr	r3, [pc, #376]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fdac:	495f      	ldr	r1, [pc, #380]	; (2ff2c <cc_rx_data_handler+0x210>)
   2fdae:	1a9b      	subs	r3, r3, r2
   2fdb0:	4622      	mov	r2, r4
   2fdb2:	08db      	lsrs	r3, r3, #3
   2fdb4:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2fdb8:	f014 fcb5 	bl	44726 <log_string_sync>
	default:
		break;
	}

	return 0;
}
   2fdbc:	4620      	mov	r0, r4
   2fdbe:	b015      	add	sp, #84	; 0x54
   2fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (*config_found == false) {
   2fdc2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2fdc6:	2b00      	cmp	r3, #0
   2fdc8:	d0dc      	beq.n	2fd84 <cc_rx_data_handler+0x68>
	if (msg.data.ptr) {
   2fdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2fdcc:	b1b3      	cbz	r3, 2fdfc <cc_rx_data_handler+0xe0>
		err = nct_cc_send(&msg);
   2fdce:	a808      	add	r0, sp, #32
   2fdd0:	f000 ffba 	bl	30d48 <nct_cc_send>
   2fdd4:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2fdd6:	9809      	ldr	r0, [sp, #36]	; 0x24
   2fdd8:	f018 f99b 	bl	48112 <k_free>
		if (err) {
   2fddc:	b177      	cbz	r7, 2fdfc <cc_rx_data_handler+0xe0>
			LOG_ERR("nct_cc_send failed %d", err);
   2fdde:	2301      	movs	r3, #1
   2fde0:	f04f 0000 	mov.w	r0, #0
   2fde4:	4a4e      	ldr	r2, [pc, #312]	; (2ff20 <cc_rx_data_handler+0x204>)
   2fde6:	f363 0007 	bfi	r0, r3, #0, #8
   2fdea:	4b4e      	ldr	r3, [pc, #312]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fdec:	4950      	ldr	r1, [pc, #320]	; (2ff30 <cc_rx_data_handler+0x214>)
   2fdee:	1a9b      	subs	r3, r3, r2
   2fdf0:	08db      	lsrs	r3, r3, #3
   2fdf2:	f363 108f 	bfi	r0, r3, #6, #10
   2fdf6:	463a      	mov	r2, r7
   2fdf8:	f014 fc95 	bl	44726 <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   2fdfc:	686b      	ldr	r3, [r5, #4]
   2fdfe:	aa10      	add	r2, sp, #64	; 0x40
   2fe00:	e893 0003 	ldmia.w	r3, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2fe04:	3308      	adds	r3, #8
	cloud_evt.data = evt->param.cc->data;
   2fe06:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2fe0a:	e893 0003 	ldmia.w	r3, {r0, r1}
   2fe0e:	ab14      	add	r3, sp, #80	; 0x50
   2fe10:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2fe14:	f7ff f9ca 	bl	2f1ac <nfsm_get_current_state>
   2fe18:	a90e      	add	r1, sp, #56	; 0x38
   2fe1a:	f7ff f9cd 	bl	2f1b8 <nfsm_set_current_state_and_notify>
	return err;
   2fe1e:	e7b1      	b.n	2fd84 <cc_rx_data_handler+0x68>
	switch (current_state) {
   2fe20:	3e04      	subs	r6, #4
   2fe22:	2e05      	cmp	r6, #5
   2fe24:	d8ca      	bhi.n	2fdbc <cc_rx_data_handler+0xa0>
   2fe26:	e8df f006 	tbb	[pc, r6]
   2fe2a:	0303      	.short	0x0303
   2fe2c:	70700303 	.word	0x70700303
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2fe30:	f89d 6006 	ldrb.w	r6, [sp, #6]
   2fe34:	2e07      	cmp	r6, #7
   2fe36:	d161      	bne.n	2fefc <cc_rx_data_handler+0x1e0>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   2fe38:	ab06      	add	r3, sp, #24
   2fe3a:	aa02      	add	r2, sp, #8
   2fe3c:	a904      	add	r1, sp, #16
   2fe3e:	6868      	ldr	r0, [r5, #4]
   2fe40:	f7ff fe2c 	bl	2fa9c <nrf_cloud_decode_data_endpoint>
	if (err) {
   2fe44:	4604      	mov	r4, r0
   2fe46:	b168      	cbz	r0, 2fe64 <cc_rx_data_handler+0x148>
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2fe48:	2301      	movs	r3, #1
   2fe4a:	f04f 0000 	mov.w	r0, #0
   2fe4e:	4a34      	ldr	r2, [pc, #208]	; (2ff20 <cc_rx_data_handler+0x204>)
   2fe50:	f363 0007 	bfi	r0, r3, #0, #8
   2fe54:	4b33      	ldr	r3, [pc, #204]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fe56:	4937      	ldr	r1, [pc, #220]	; (2ff34 <cc_rx_data_handler+0x218>)
   2fe58:	1a9b      	subs	r3, r3, r2
   2fe5a:	08db      	lsrs	r3, r3, #3
   2fe5c:	f363 108f 	bfi	r0, r3, #6, #10
   2fe60:	4622      	mov	r2, r4
   2fe62:	e7a9      	b.n	2fdb8 <cc_rx_data_handler+0x9c>
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   2fe64:	aa06      	add	r2, sp, #24
   2fe66:	a902      	add	r1, sp, #8
   2fe68:	a804      	add	r0, sp, #16
   2fe6a:	f000 ffeb 	bl	30e44 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2fe6e:	4621      	mov	r1, r4
   2fe70:	2218      	movs	r2, #24
   2fe72:	a808      	add	r0, sp, #32
   2fe74:	f018 f9a8 	bl	481c8 <memset>
   2fe78:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2fe7c:	930c      	str	r3, [sp, #48]	; 0x30
   2fe7e:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2fe80:	a908      	add	r1, sp, #32
   2fe82:	4630      	mov	r0, r6
	struct nct_cc_data msg = {
   2fe84:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2fe88:	f7ff fd2e 	bl	2f8e8 <nrf_cloud_encode_state>
	if (err) {
   2fe8c:	4604      	mov	r4, r0
   2fe8e:	b168      	cbz	r0, 2feac <cc_rx_data_handler+0x190>
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2fe90:	2301      	movs	r3, #1
   2fe92:	f04f 0000 	mov.w	r0, #0
   2fe96:	4a22      	ldr	r2, [pc, #136]	; (2ff20 <cc_rx_data_handler+0x204>)
   2fe98:	f363 0007 	bfi	r0, r3, #0, #8
   2fe9c:	4b21      	ldr	r3, [pc, #132]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fe9e:	4926      	ldr	r1, [pc, #152]	; (2ff38 <cc_rx_data_handler+0x21c>)
   2fea0:	1a9b      	subs	r3, r3, r2
   2fea2:	08db      	lsrs	r3, r3, #3
   2fea4:	f363 108f 	bfi	r0, r3, #6, #10
   2fea8:	4622      	mov	r2, r4
   2feaa:	e785      	b.n	2fdb8 <cc_rx_data_handler+0x9c>
	err = nct_cc_send(&msg);
   2feac:	a808      	add	r0, sp, #32
   2feae:	f000 ff4b 	bl	30d48 <nct_cc_send>
	if (err) {
   2feb2:	4604      	mov	r4, r0
   2feb4:	b190      	cbz	r0, 2fedc <cc_rx_data_handler+0x1c0>
		LOG_ERR("nct_cc_send failed %d", err);
   2feb6:	2301      	movs	r3, #1
   2feb8:	f04f 0000 	mov.w	r0, #0
   2febc:	4a18      	ldr	r2, [pc, #96]	; (2ff20 <cc_rx_data_handler+0x204>)
   2febe:	f363 0007 	bfi	r0, r3, #0, #8
   2fec2:	4b18      	ldr	r3, [pc, #96]	; (2ff24 <cc_rx_data_handler+0x208>)
   2fec4:	491a      	ldr	r1, [pc, #104]	; (2ff30 <cc_rx_data_handler+0x214>)
   2fec6:	1a9b      	subs	r3, r3, r2
   2fec8:	08db      	lsrs	r3, r3, #3
   2feca:	f363 108f 	bfi	r0, r3, #6, #10
   2fece:	4622      	mov	r2, r4
   2fed0:	f014 fc29 	bl	44726 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2fed4:	9809      	ldr	r0, [sp, #36]	; 0x24
   2fed6:	f018 f91c 	bl	48112 <k_free>
		return err;
   2feda:	e76f      	b.n	2fdbc <cc_rx_data_handler+0xa0>
	nrf_cloud_free((void *)msg.data.ptr);
   2fedc:	9809      	ldr	r0, [sp, #36]	; 0x24
   2fede:	f018 f918 	bl	48112 <k_free>
	struct nrf_cloud_evt evt = {
   2fee2:	4621      	mov	r1, r4
   2fee4:	2218      	movs	r2, #24
   2fee6:	a80e      	add	r0, sp, #56	; 0x38
   2fee8:	f018 f96e 	bl	481c8 <memset>
   2feec:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2feee:	a90e      	add	r1, sp, #56	; 0x38
   2fef0:	4630      	mov	r0, r6
	struct nrf_cloud_evt evt = {
   2fef2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2fef6:	f7ff f95f 	bl	2f1b8 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2fefa:	e75f      	b.n	2fdbc <cc_rx_data_handler+0xa0>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2fefc:	2e06      	cmp	r6, #6
   2fefe:	f47f af5d 	bne.w	2fdbc <cc_rx_data_handler+0xa0>
			return state_ua_pin_wait();
   2ff02:	f7ff fe8f 	bl	2fc24 <state_ua_pin_wait>
   2ff06:	4604      	mov	r4, r0
   2ff08:	e758      	b.n	2fdbc <cc_rx_data_handler+0xa0>
		if (new_state == STATE_UA_PIN_WAIT) {
   2ff0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2ff0e:	2b06      	cmp	r3, #6
   2ff10:	f47f af54 	bne.w	2fdbc <cc_rx_data_handler+0xa0>
			(void)nct_dc_disconnect();
   2ff14:	f001 f838 	bl	30f88 <nct_dc_disconnect>
   2ff18:	e7f3      	b.n	2ff02 <cc_rx_data_handler+0x1e6>
		return 0;
   2ff1a:	2400      	movs	r4, #0
   2ff1c:	e74e      	b.n	2fdbc <cc_rx_data_handler+0xa0>
   2ff1e:	bf00      	nop
   2ff20:	00049788 	.word	0x00049788
   2ff24:	00049898 	.word	0x00049898
   2ff28:	0004f7c8 	.word	0x0004f7c8
   2ff2c:	0004f7f3 	.word	0x0004f7f3
   2ff30:	0004f966 	.word	0x0004f966
   2ff34:	0004f81e 	.word	0x0004f81e
   2ff38:	0004f945 	.word	0x0004f945

0002ff3c <nfsm_init>:
	persistent_session = false;
   2ff3c:	2000      	movs	r0, #0
   2ff3e:	4b01      	ldr	r3, [pc, #4]	; (2ff44 <nfsm_init+0x8>)
   2ff40:	7018      	strb	r0, [r3, #0]
}
   2ff42:	4770      	bx	lr
   2ff44:	2002d08d 	.word	0x2002d08d

0002ff48 <nfsm_handle_incoming_event>:
{
   2ff48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ff4a:	460d      	mov	r5, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2ff4c:	4607      	mov	r7, r0
   2ff4e:	b120      	cbz	r0, 2ff5a <nfsm_handle_incoming_event+0x12>
   2ff50:	7a06      	ldrb	r6, [r0, #8]
   2ff52:	2e09      	cmp	r6, #9
   2ff54:	d801      	bhi.n	2ff5a <nfsm_handle_incoming_event+0x12>
   2ff56:	290c      	cmp	r1, #12
   2ff58:	d90e      	bls.n	2ff78 <nfsm_handle_incoming_event+0x30>
		__ASSERT_NO_MSG(false);
   2ff5a:	2378      	movs	r3, #120	; 0x78
   2ff5c:	4a1e      	ldr	r2, [pc, #120]	; (2ffd8 <nfsm_handle_incoming_event+0x90>)
   2ff5e:	491f      	ldr	r1, [pc, #124]	; (2ffdc <nfsm_handle_incoming_event+0x94>)
   2ff60:	481f      	ldr	r0, [pc, #124]	; (2ffe0 <nfsm_handle_incoming_event+0x98>)
   2ff62:	f014 f9b5 	bl	442d0 <printk>
   2ff66:	2178      	movs	r1, #120	; 0x78
   2ff68:	481b      	ldr	r0, [pc, #108]	; (2ffd8 <nfsm_handle_incoming_event+0x90>)
   2ff6a:	f014 fbcb 	bl	44704 <assert_post_action>
   2ff6e:	f06f 0415 	mvn.w	r4, #21
}
   2ff72:	4620      	mov	r0, r4
   2ff74:	b003      	add	sp, #12
   2ff76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2ff78:	4b1a      	ldr	r3, [pc, #104]	; (2ffe4 <nfsm_handle_incoming_event+0x9c>)
   2ff7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2ff7e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   2ff82:	b1a4      	cbz	r4, 2ffae <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2ff84:	47a0      	blx	r4
		if (err) {
   2ff86:	4604      	mov	r4, r0
   2ff88:	2800      	cmp	r0, #0
   2ff8a:	d0f2      	beq.n	2ff72 <nfsm_handle_incoming_event+0x2a>
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2ff8c:	2301      	movs	r3, #1
   2ff8e:	f04f 0000 	mov.w	r0, #0
   2ff92:	4a15      	ldr	r2, [pc, #84]	; (2ffe8 <nfsm_handle_incoming_event+0xa0>)
   2ff94:	f363 0007 	bfi	r0, r3, #0, #8
   2ff98:	4b14      	ldr	r3, [pc, #80]	; (2ffec <nfsm_handle_incoming_event+0xa4>)
   2ff9a:	4915      	ldr	r1, [pc, #84]	; (2fff0 <nfsm_handle_incoming_event+0xa8>)
   2ff9c:	1a9b      	subs	r3, r3, r2
   2ff9e:	08db      	lsrs	r3, r3, #3
   2ffa0:	f363 108f 	bfi	r0, r3, #6, #10
   2ffa4:	462a      	mov	r2, r5
   2ffa6:	7a3b      	ldrb	r3, [r7, #8]
   2ffa8:	f014 fbbd 	bl	44726 <log_string_sync>
   2ffac:	e7e1      	b.n	2ff72 <nfsm_handle_incoming_event+0x2a>
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2ffae:	2304      	movs	r3, #4
   2ffb0:	f04f 0500 	mov.w	r5, #0
   2ffb4:	4a0d      	ldr	r2, [pc, #52]	; (2ffec <nfsm_handle_incoming_event+0xa4>)
   2ffb6:	f363 0507 	bfi	r5, r3, #0, #8
   2ffba:	4b0b      	ldr	r3, [pc, #44]	; (2ffe8 <nfsm_handle_incoming_event+0xa0>)
   2ffbc:	1ad2      	subs	r2, r2, r3
   2ffbe:	08d2      	lsrs	r2, r2, #3
   2ffc0:	f362 158f 	bfi	r5, r2, #6, #10
   2ffc4:	f7ff f8f2 	bl	2f1ac <nfsm_get_current_state>
   2ffc8:	4633      	mov	r3, r6
   2ffca:	9000      	str	r0, [sp, #0]
   2ffcc:	4a09      	ldr	r2, [pc, #36]	; (2fff4 <nfsm_handle_incoming_event+0xac>)
   2ffce:	490a      	ldr	r1, [pc, #40]	; (2fff8 <nfsm_handle_incoming_event+0xb0>)
   2ffd0:	4628      	mov	r0, r5
   2ffd2:	f014 fba8 	bl	44726 <log_string_sync>
	return 0;
   2ffd6:	e7cc      	b.n	2ff72 <nfsm_handle_incoming_event+0x2a>
   2ffd8:	0004f8b3 	.word	0x0004f8b3
   2ffdc:	00052672 	.word	0x00052672
   2ffe0:	0004b33b 	.word	0x0004b33b
   2ffe4:	0004a368 	.word	0x0004a368
   2ffe8:	00049788 	.word	0x00049788
   2ffec:	00049898 	.word	0x00049898
   2fff0:	0004f8f0 	.word	0x0004f8f0
   2fff4:	0004f790 	.word	0x0004f790
   2fff8:	0004f914 	.word	0x0004f914

0002fffc <cc_tx_ack_handler>:

static int cc_tx_ack_handler(const struct nct_evt *nct_evt)
{
   2fffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   2fffe:	f241 622e 	movw	r2, #5678	; 0x162e
   30002:	6843      	ldr	r3, [r0, #4]
   30004:	4293      	cmp	r3, r2
   30006:	d105      	bne.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   30008:	2100      	movs	r1, #0
   3000a:	2005      	movs	r0, #5
   3000c:	f7ff f8d4 	bl	2f1b8 <nfsm_set_current_state_and_notify>
				" skipping nct_dc_connect()");
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
		}
	}

	return 0;
   30010:	2400      	movs	r4, #0
   30012:	e00e      	b.n	30032 <CONFIG_FLASH_LOAD_SIZE+0x32>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   30014:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   30018:	4293      	cmp	r3, r2
   3001a:	d1f9      	bne.n	30010 <CONFIG_FLASH_LOAD_SIZE+0x10>
		if (!persistent_session) {
   3001c:	4b14      	ldr	r3, [pc, #80]	; (30070 <CONFIG_FLASH_LOAD_SIZE+0x70>)
   3001e:	781b      	ldrb	r3, [r3, #0]
   30020:	b953      	cbnz	r3, 30038 <CONFIG_FLASH_LOAD_SIZE+0x38>
			err = nct_dc_connect();
   30022:	f000 ff7f 	bl	30f24 <nct_dc_connect>
			if (err) {
   30026:	4604      	mov	r4, r0
   30028:	b918      	cbnz	r0, 30032 <CONFIG_FLASH_LOAD_SIZE+0x32>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   3002a:	4601      	mov	r1, r0
   3002c:	2008      	movs	r0, #8
   3002e:	f7ff f8c3 	bl	2f1b8 <nfsm_set_current_state_and_notify>
}
   30032:	4620      	mov	r0, r4
   30034:	b004      	add	sp, #16
   30036:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   30038:	2400      	movs	r4, #0
   3003a:	2302      	movs	r3, #2
   3003c:	9403      	str	r4, [sp, #12]
			LOG_DBG("Previous session valid;"
   3003e:	f04f 0000 	mov.w	r0, #0
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   30042:	f88d 300c 	strb.w	r3, [sp, #12]
			LOG_DBG("Previous session valid;"
   30046:	2304      	movs	r3, #4
   30048:	4a0a      	ldr	r2, [pc, #40]	; (30074 <CONFIG_FLASH_LOAD_SIZE+0x74>)
   3004a:	f363 0007 	bfi	r0, r3, #0, #8
   3004e:	4b0a      	ldr	r3, [pc, #40]	; (30078 <CONFIG_FLASH_LOAD_SIZE+0x78>)
   30050:	490a      	ldr	r1, [pc, #40]	; (3007c <CONFIG_FLASH_LOAD_SIZE+0x7c>)
   30052:	1a9b      	subs	r3, r3, r2
   30054:	08db      	lsrs	r3, r3, #3
   30056:	f363 108f 	bfi	r0, r3, #6, #10
   3005a:	4a09      	ldr	r2, [pc, #36]	; (30080 <CONFIG_FLASH_LOAD_SIZE+0x80>)
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   3005c:	e9cd 4401 	strd	r4, r4, [sp, #4]
			LOG_DBG("Previous session valid;"
   30060:	f014 fb61 	bl	44726 <log_string_sync>
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   30064:	2108      	movs	r1, #8
   30066:	a801      	add	r0, sp, #4
   30068:	f7ff ff6e 	bl	2ff48 <nfsm_handle_incoming_event>
   3006c:	e7e1      	b.n	30032 <CONFIG_FLASH_LOAD_SIZE+0x32>
   3006e:	bf00      	nop
   30070:	2002d08d 	.word	0x2002d08d
   30074:	00049788 	.word	0x00049788
   30078:	00049898 	.word	0x00049898
   3007c:	0004f847 	.word	0x0004f847
   30080:	0004f7b6 	.word	0x0004f7b6

00030084 <connection_handler>:
{
   30084:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   30086:	6804      	ldr	r4, [r0, #0]
{
   30088:	b08a      	sub	sp, #40	; 0x28
   3008a:	4605      	mov	r5, r0
	if (nct_evt->status != 0) {
   3008c:	b164      	cbz	r4, 300a8 <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   3008e:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   30090:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   30092:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   30096:	f7ff f889 	bl	2f1ac <nfsm_get_current_state>
   3009a:	a904      	add	r1, sp, #16
   3009c:	f7ff f88c 	bl	2f1b8 <nfsm_set_current_state_and_notify>
		return 0;
   300a0:	2400      	movs	r4, #0
}
   300a2:	4620      	mov	r0, r4
   300a4:	b00a      	add	sp, #40	; 0x28
   300a6:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   300a8:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   300aa:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   300ac:	a904      	add	r1, sp, #16
   300ae:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   300b0:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   300b2:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   300b6:	f7ff f87f 	bl	2f1b8 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   300ba:	792b      	ldrb	r3, [r5, #4]
   300bc:	2b00      	cmp	r3, #0
   300be:	bf14      	ite	ne
   300c0:	4632      	movne	r2, r6
   300c2:	2200      	moveq	r2, #0
   300c4:	4b12      	ldr	r3, [pc, #72]	; (30110 <connection_handler+0x8c>)
   300c6:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   300c8:	d109      	bne.n	300de <connection_handler+0x5a>
		err = nct_cc_connect();
   300ca:	f000 fe13 	bl	30cf4 <nct_cc_connect>
		if (err) {
   300ce:	4604      	mov	r4, r0
   300d0:	2800      	cmp	r0, #0
   300d2:	d1e6      	bne.n	300a2 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   300d4:	4601      	mov	r1, r0
   300d6:	2003      	movs	r0, #3
   300d8:	f7ff f86e 	bl	2f1b8 <nfsm_set_current_state_and_notify>
   300dc:	e7e1      	b.n	300a2 <connection_handler+0x1e>
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   300de:	2304      	movs	r3, #4
   300e0:	f04f 0000 	mov.w	r0, #0
   300e4:	4a0b      	ldr	r2, [pc, #44]	; (30114 <connection_handler+0x90>)
   300e6:	f363 0007 	bfi	r0, r3, #0, #8
   300ea:	4b0b      	ldr	r3, [pc, #44]	; (30118 <connection_handler+0x94>)
   300ec:	490b      	ldr	r1, [pc, #44]	; (3011c <connection_handler+0x98>)
   300ee:	1a9b      	subs	r3, r3, r2
   300f0:	08db      	lsrs	r3, r3, #3
   300f2:	f363 108f 	bfi	r0, r3, #6, #10
   300f6:	4a0a      	ldr	r2, [pc, #40]	; (30120 <connection_handler+0x9c>)
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   300f8:	9403      	str	r4, [sp, #12]
   300fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   300fe:	f88d 600c 	strb.w	r6, [sp, #12]
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   30102:	f014 fb10 	bl	44726 <log_string_sync>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   30106:	2103      	movs	r1, #3
   30108:	a801      	add	r0, sp, #4
   3010a:	f7ff ff1d 	bl	2ff48 <nfsm_handle_incoming_event>
   3010e:	e7c8      	b.n	300a2 <connection_handler+0x1e>
   30110:	2002d08d 	.word	0x2002d08d
   30114:	00049788 	.word	0x00049788
   30118:	00049898 	.word	0x00049898
   3011c:	0004f87d 	.word	0x0004f87d
   30120:	0004f7a3 	.word	0x0004f7a3

00030124 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   30124:	2200      	movs	r2, #0
   30126:	4b05      	ldr	r3, [pc, #20]	; (3013c <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   30128:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   3012c:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   30130:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   30134:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc
}
   30138:	4770      	bx	lr
   3013a:	bf00      	nop
   3013c:	20024dd0 	.word	0x20024dd0

00030140 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   30140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30144:	460e      	mov	r6, r1
   30146:	b085      	sub	sp, #20
   30148:	4617      	mov	r7, r2
   3014a:	4698      	mov	r8, r3
	if (!key) {
   3014c:	4681      	mov	r9, r0
   3014e:	2800      	cmp	r0, #0
   30150:	d03e      	beq.n	301d0 <nct_settings_set+0x90>
		return -EINVAL;
	}

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   30152:	2304      	movs	r3, #4
   30154:	f04f 0500 	mov.w	r5, #0
   30158:	4c1f      	ldr	r4, [pc, #124]	; (301d8 <nct_settings_set+0x98>)
   3015a:	f363 0507 	bfi	r5, r3, #0, #8
   3015e:	4b1f      	ldr	r3, [pc, #124]	; (301dc <nct_settings_set+0x9c>)
   30160:	1ae4      	subs	r4, r4, r3
   30162:	f014 faf3 	bl	4474c <log_strdup>
   30166:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3016a:	f364 158f 	bfi	r5, r4, #6, #10
   3016e:	4603      	mov	r3, r0
   30170:	4a1b      	ldr	r2, [pc, #108]	; (301e0 <nct_settings_set+0xa0>)
   30172:	491c      	ldr	r1, [pc, #112]	; (301e4 <nct_settings_set+0xa4>)
   30174:	4628      	mov	r0, r5
   30176:	9600      	str	r6, [sp, #0]
   30178:	f014 fad5 	bl	44726 <log_string_sync>

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   3017c:	481a      	ldr	r0, [pc, #104]	; (301e8 <nct_settings_set+0xa8>)
   3017e:	f7ed f871 	bl	1d264 <strlen>
   30182:	4919      	ldr	r1, [pc, #100]	; (301e8 <nct_settings_set+0xa8>)
   30184:	4602      	mov	r2, r0
   30186:	4648      	mov	r0, r9
   30188:	f018 f9f7 	bl	4857a <strncmp>
   3018c:	4605      	mov	r5, r0
   3018e:	b128      	cbz	r0, 3019c <nct_settings_set+0x5c>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   30190:	f06f 0585 	mvn.w	r5, #133	; 0x85
}
   30194:	4628      	mov	r0, r5
   30196:	b005      	add	sp, #20
   30198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   3019c:	2e04      	cmp	r6, #4
   3019e:	d1f7      	bne.n	30190 <nct_settings_set+0x50>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   301a0:	4632      	mov	r2, r6
   301a2:	a903      	add	r1, sp, #12
   301a4:	4640      	mov	r0, r8
   301a6:	47b8      	blx	r7
   301a8:	2804      	cmp	r0, #4
   301aa:	d1f1      	bne.n	30190 <nct_settings_set+0x50>
			persistent_session = (bool)read_val;
   301ac:	9b03      	ldr	r3, [sp, #12]
   301ae:	4a0f      	ldr	r2, [pc, #60]	; (301ec <nct_settings_set+0xac>)
   301b0:	1c19      	adds	r1, r3, #0
   301b2:	bf18      	it	ne
   301b4:	2101      	movne	r1, #1
			LOG_DBG("Read setting val: %d", read_val);
   301b6:	f04f 0000 	mov.w	r0, #0
			persistent_session = (bool)read_val;
   301ba:	7011      	strb	r1, [r2, #0]
			LOG_DBG("Read setting val: %d", read_val);
   301bc:	2204      	movs	r2, #4
   301be:	f362 0007 	bfi	r0, r2, #0, #8
   301c2:	f364 108f 	bfi	r0, r4, #6, #10
   301c6:	4a06      	ldr	r2, [pc, #24]	; (301e0 <nct_settings_set+0xa0>)
   301c8:	4909      	ldr	r1, [pc, #36]	; (301f0 <nct_settings_set+0xb0>)
   301ca:	f014 faac 	bl	44726 <log_string_sync>
			return 0;
   301ce:	e7e1      	b.n	30194 <nct_settings_set+0x54>
		return -EINVAL;
   301d0:	f06f 0515 	mvn.w	r5, #21
   301d4:	e7de      	b.n	30194 <nct_settings_set+0x54>
   301d6:	bf00      	nop
   301d8:	000498a0 	.word	0x000498a0
   301dc:	00049788 	.word	0x00049788
   301e0:	0004f9b0 	.word	0x0004f9b0
   301e4:	00050010 	.word	0x00050010
   301e8:	00050169 	.word	0x00050169
   301ec:	2002d0cb 	.word	0x2002d0cb
   301f0:	0005002f 	.word	0x0005002f

000301f4 <nrf_cloud_fota_ble_cb_handler>:
#if defined(CONFIG_NRF_CLOUD_FOTA)
/* TODO: remove after testing */
#if defined(CONFIG_NRF_CLOUD_FOTA_BLE_DEVICES)
static void nrf_cloud_fota_ble_cb_handler(const struct nrf_cloud_fota_ble_job *
					  const ble_job)
{
   301f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   301f6:	4604      	mov	r4, r0
	LOG_INF("FOTA for BLE ID: %X:%X:%X:%X:%X:%X",
   301f8:	2303      	movs	r3, #3
   301fa:	f04f 0000 	mov.w	r0, #0
   301fe:	4d21      	ldr	r5, [pc, #132]	; (30284 <nrf_cloud_fota_ble_cb_handler+0x90>)
   30200:	f363 0007 	bfi	r0, r3, #0, #8
   30204:	4b20      	ldr	r3, [pc, #128]	; (30288 <nrf_cloud_fota_ble_cb_handler+0x94>)
   30206:	7962      	ldrb	r2, [r4, #5]
   30208:	1aed      	subs	r5, r5, r3
   3020a:	7823      	ldrb	r3, [r4, #0]
   3020c:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   30210:	9303      	str	r3, [sp, #12]
   30212:	7863      	ldrb	r3, [r4, #1]
   30214:	f365 108f 	bfi	r0, r5, #6, #10
   30218:	9302      	str	r3, [sp, #8]
   3021a:	78a3      	ldrb	r3, [r4, #2]
   3021c:	491b      	ldr	r1, [pc, #108]	; (3028c <nrf_cloud_fota_ble_cb_handler+0x98>)
   3021e:	9301      	str	r3, [sp, #4]
   30220:	78e3      	ldrb	r3, [r4, #3]
		ble_job->ble_id.val[4],
		ble_job->ble_id.val[3],
		ble_job->ble_id.val[2],
		ble_job->ble_id.val[1],
		ble_job->ble_id.val[0]);
	LOG_INF("Job ID: %s, type: 0x%X, size: %d",
   30222:	f04f 0600 	mov.w	r6, #0
	LOG_INF("FOTA for BLE ID: %X:%X:%X:%X:%X:%X",
   30226:	9300      	str	r3, [sp, #0]
   30228:	7923      	ldrb	r3, [r4, #4]
   3022a:	f014 fa7c 	bl	44726 <log_string_sync>
	LOG_INF("Job ID: %s, type: 0x%X, size: %d",
   3022e:	2303      	movs	r3, #3
   30230:	68e0      	ldr	r0, [r4, #12]
   30232:	f363 0607 	bfi	r6, r3, #0, #8
   30236:	f014 fa89 	bl	4474c <log_strdup>
   3023a:	69a3      	ldr	r3, [r4, #24]
   3023c:	f365 168f 	bfi	r6, r5, #6, #10
   30240:	4602      	mov	r2, r0
   30242:	4913      	ldr	r1, [pc, #76]	; (30290 <nrf_cloud_fota_ble_cb_handler+0x9c>)
   30244:	9300      	str	r3, [sp, #0]
   30246:	4630      	mov	r0, r6
   30248:	7a23      	ldrb	r3, [r4, #8]
   3024a:	f014 fa6c 	bl	44726 <log_string_sync>
		log_strdup(ble_job->info.id),
		ble_job->info.type,
		ble_job->info.file_size);
	LOG_INF("File path: %s/%s",
   3024e:	f04f 0600 	mov.w	r6, #0
   30252:	2303      	movs	r3, #3
   30254:	6920      	ldr	r0, [r4, #16]
   30256:	f363 0607 	bfi	r6, r3, #0, #8
   3025a:	f014 fa77 	bl	4474c <log_strdup>
   3025e:	f365 168f 	bfi	r6, r5, #6, #10
   30262:	4605      	mov	r5, r0
   30264:	6960      	ldr	r0, [r4, #20]
   30266:	f014 fa71 	bl	4474c <log_strdup>
   3026a:	462a      	mov	r2, r5
   3026c:	4603      	mov	r3, r0
   3026e:	4909      	ldr	r1, [pc, #36]	; (30294 <nrf_cloud_fota_ble_cb_handler+0xa0>)
   30270:	4630      	mov	r0, r6
   30272:	f014 fa58 	bl	44726 <log_string_sync>
		log_strdup(ble_job->info.host),
		log_strdup(ble_job->info.path));
	nrf_cloud_fota_ble_job_update(ble_job, NRF_CLOUD_FOTA_SUCCEEDED);
   30276:	2103      	movs	r1, #3
   30278:	4620      	mov	r0, r4
}
   3027a:	b004      	add	sp, #16
   3027c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	nrf_cloud_fota_ble_job_update(ble_job, NRF_CLOUD_FOTA_SUCCEEDED);
   30280:	f002 bc04 	b.w	32a8c <nrf_cloud_fota_ble_job_update>
   30284:	000498a0 	.word	0x000498a0
   30288:	00049788 	.word	0x00049788
   3028c:	00050048 	.word	0x00050048
   30290:	0005006b 	.word	0x0005006b
   30294:	0005008c 	.word	0x0005008c

00030298 <nrf_cloud_fota_cb_handler>:
#endif
/* ^ remove ^ */

static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   30298:	b508      	push	{r3, lr}
	switch (evt->id) {
   3029a:	7803      	ldrb	r3, [r0, #0]
   3029c:	2b04      	cmp	r3, #4
   3029e:	d854      	bhi.n	3034a <nrf_cloud_fota_cb_handler+0xb2>
   302a0:	e8df f003 	tbb	[pc, r3]
   302a4:	37271403 	.word	0x37271403
   302a8:	45          	.byte	0x45
   302a9:	00          	.byte	0x00
	case NRF_CLOUD_FOTA_EVT_START:
	{
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
   302aa:	2304      	movs	r3, #4
   302ac:	f04f 0000 	mov.w	r0, #0
   302b0:	4a26      	ldr	r2, [pc, #152]	; (3034c <nrf_cloud_fota_cb_handler+0xb4>)
   302b2:	f363 0007 	bfi	r0, r3, #0, #8
   302b6:	4b26      	ldr	r3, [pc, #152]	; (30350 <nrf_cloud_fota_cb_handler+0xb8>)
   302b8:	4926      	ldr	r1, [pc, #152]	; (30354 <nrf_cloud_fota_cb_handler+0xbc>)
   302ba:	1a9b      	subs	r3, r3, r2
   302bc:	08db      	lsrs	r3, r3, #3
   302be:	4a26      	ldr	r2, [pc, #152]	; (30358 <nrf_cloud_fota_cb_handler+0xc0>)
   302c0:	f363 108f 	bfi	r0, r3, #6, #10
	default:
	{
		break;
	}
	}
}
   302c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   302c8:	f014 ba2d 	b.w	44726 <log_string_sync>
		LOG_DBG("NRF_CLOUD_FOTA_EVT_DONE: rebooting");
   302cc:	2304      	movs	r3, #4
   302ce:	f04f 0000 	mov.w	r0, #0
   302d2:	4a1e      	ldr	r2, [pc, #120]	; (3034c <nrf_cloud_fota_cb_handler+0xb4>)
   302d4:	f363 0007 	bfi	r0, r3, #0, #8
   302d8:	4b1d      	ldr	r3, [pc, #116]	; (30350 <nrf_cloud_fota_cb_handler+0xb8>)
   302da:	4920      	ldr	r1, [pc, #128]	; (3035c <nrf_cloud_fota_cb_handler+0xc4>)
   302dc:	1a9b      	subs	r3, r3, r2
   302de:	08db      	lsrs	r3, r3, #3
   302e0:	f363 108f 	bfi	r0, r3, #6, #10
   302e4:	4a1c      	ldr	r2, [pc, #112]	; (30358 <nrf_cloud_fota_cb_handler+0xc0>)
   302e6:	f014 fa1e 	bl	44726 <log_string_sync>
}
   302ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   302ee:	f7ff b951 	b.w	2f594 <nct_apply_update>
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   302f2:	2301      	movs	r3, #1
   302f4:	f04f 0000 	mov.w	r0, #0
   302f8:	4a14      	ldr	r2, [pc, #80]	; (3034c <nrf_cloud_fota_cb_handler+0xb4>)
   302fa:	f363 0007 	bfi	r0, r3, #0, #8
   302fe:	4b14      	ldr	r3, [pc, #80]	; (30350 <nrf_cloud_fota_cb_handler+0xb8>)
   30300:	4917      	ldr	r1, [pc, #92]	; (30360 <nrf_cloud_fota_cb_handler+0xc8>)
   30302:	1a9b      	subs	r3, r3, r2
   30304:	08db      	lsrs	r3, r3, #3
   30306:	f363 108f 	bfi	r0, r3, #6, #10
}
   3030a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   3030e:	f014 ba0a 	b.w	44726 <log_string_sync>
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_PENDING");
   30312:	2304      	movs	r3, #4
   30314:	f04f 0000 	mov.w	r0, #0
   30318:	4a0c      	ldr	r2, [pc, #48]	; (3034c <nrf_cloud_fota_cb_handler+0xb4>)
   3031a:	f363 0007 	bfi	r0, r3, #0, #8
   3031e:	4b0c      	ldr	r3, [pc, #48]	; (30350 <nrf_cloud_fota_cb_handler+0xb8>)
   30320:	4910      	ldr	r1, [pc, #64]	; (30364 <nrf_cloud_fota_cb_handler+0xcc>)
   30322:	1a9b      	subs	r3, r3, r2
   30324:	08db      	lsrs	r3, r3, #3
   30326:	f363 108f 	bfi	r0, r3, #6, #10
   3032a:	4a0b      	ldr	r2, [pc, #44]	; (30358 <nrf_cloud_fota_cb_handler+0xc0>)
   3032c:	e7ca      	b.n	302c4 <nrf_cloud_fota_cb_handler+0x2c>
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   3032e:	2304      	movs	r3, #4
   30330:	f04f 0000 	mov.w	r0, #0
   30334:	4a05      	ldr	r2, [pc, #20]	; (3034c <nrf_cloud_fota_cb_handler+0xb4>)
   30336:	f363 0007 	bfi	r0, r3, #0, #8
   3033a:	4b05      	ldr	r3, [pc, #20]	; (30350 <nrf_cloud_fota_cb_handler+0xb8>)
   3033c:	490a      	ldr	r1, [pc, #40]	; (30368 <nrf_cloud_fota_cb_handler+0xd0>)
   3033e:	1a9b      	subs	r3, r3, r2
   30340:	08db      	lsrs	r3, r3, #3
   30342:	f363 108f 	bfi	r0, r3, #6, #10
   30346:	4a04      	ldr	r2, [pc, #16]	; (30358 <nrf_cloud_fota_cb_handler+0xc0>)
   30348:	e7bc      	b.n	302c4 <nrf_cloud_fota_cb_handler+0x2c>
}
   3034a:	bd08      	pop	{r3, pc}
   3034c:	00049788 	.word	0x00049788
   30350:	000498a0 	.word	0x000498a0
   30354:	0005009d 	.word	0x0005009d
   30358:	0004f9d4 	.word	0x0004f9d4
   3035c:	000500ba 	.word	0x000500ba
   30360:	000500e1 	.word	0x000500e1
   30364:	000500fa 	.word	0x000500fa
   30368:	0005011f 	.word	0x0005011f

0003036c <dc_send>:
{
   3036c:	b530      	push	{r4, r5, lr}
   3036e:	460d      	mov	r5, r1
   30370:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   30372:	4604      	mov	r4, r0
   30374:	b368      	cbz	r0, 303d2 <dc_send+0x66>
	struct mqtt_publish_param publish = {
   30376:	2210      	movs	r2, #16
   30378:	2100      	movs	r1, #0
   3037a:	a802      	add	r0, sp, #8
   3037c:	f017 ff24 	bl	481c8 <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   30380:	4b15      	ldr	r3, [pc, #84]	; (303d8 <dc_send+0x6c>)
	struct mqtt_publish_param publish = {
   30382:	f88d 5008 	strb.w	r5, [sp, #8]
   30386:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   3038a:	9200      	str	r2, [sp, #0]
   3038c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   30390:	9201      	str	r2, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   30392:	6822      	ldr	r2, [r4, #0]
   30394:	b11a      	cbz	r2, 3039e <dc_send+0x32>
   30396:	6861      	ldr	r1, [r4, #4]
   30398:	b109      	cbz	r1, 3039e <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   3039a:	e9cd 1203 	strd	r1, r2, [sp, #12]
	if (dc_data->id != 0) {
   3039e:	6922      	ldr	r2, [r4, #16]
   303a0:	b13a      	cbz	r2, 303b2 <dc_send+0x46>
		publish.message_id = dc_data->id;
   303a2:	f8ad 2014 	strh.w	r2, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   303a6:	4669      	mov	r1, sp
   303a8:	480c      	ldr	r0, [pc, #48]	; (303dc <dc_send+0x70>)
   303aa:	f015 fff5 	bl	46398 <mqtt_publish>
}
   303ae:	b007      	add	sp, #28
   303b0:	bd30      	pop	{r4, r5, pc}
	nct.message_id++;
   303b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   303b6:	1c51      	adds	r1, r2, #1
	if ((uint16_t)nct.message_id == 0) {
   303b8:	b288      	uxth	r0, r1
   303ba:	b130      	cbz	r0, 303ca <dc_send+0x5e>
	nct.message_id++;
   303bc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		publish.message_id = dc_get_next_message_id();
   303c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
   303c4:	f8ad 3014 	strh.w	r3, [sp, #20]
   303c8:	e7ed      	b.n	303a6 <dc_send+0x3a>
		nct.message_id++;
   303ca:	3202      	adds	r2, #2
   303cc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   303d0:	e7f6      	b.n	303c0 <dc_send+0x54>
		return -EINVAL;
   303d2:	f06f 0015 	mvn.w	r0, #21
   303d6:	e7ea      	b.n	303ae <dc_send+0x42>
   303d8:	20024dd0 	.word	0x20024dd0
   303dc:	20024dec 	.word	0x20024dec

000303e0 <dc_endpoint_free>:
{
   303e0:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   303e2:	4c0d      	ldr	r4, [pc, #52]	; (30418 <dc_endpoint_free+0x38>)
   303e4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   303e8:	b108      	cbz	r0, 303ee <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   303ea:	f017 fe92 	bl	48112 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   303ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   303f2:	b108      	cbz	r0, 303f8 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   303f4:	f017 fe8d 	bl	48112 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   303f8:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   303fc:	b108      	cbz	r0, 30402 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   303fe:	f017 fe88 	bl	48112 <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   30402:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   30406:	b108      	cbz	r0, 3040c <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.job_status_endp.utf8);
   30408:	f017 fe83 	bl	48112 <k_free>
	dc_endpoint_reset();
   3040c:	f7ff fe8a 	bl	30124 <dc_endpoint_reset>
}
   30410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   30414:	f002 b846 	b.w	324a4 <nrf_cloud_fota_endpoint_clear>
   30418:	20024dd0 	.word	0x20024dd0

0003041c <save_session_state>:
{
   3041c:	b513      	push	{r0, r1, r4, lr}
	LOG_DBG("Setting session state: %d", session_valid);
   3041e:	2304      	movs	r3, #4
   30420:	f04f 0400 	mov.w	r4, #0
   30424:	4a0e      	ldr	r2, [pc, #56]	; (30460 <save_session_state+0x44>)
   30426:	f363 0407 	bfi	r4, r3, #0, #8
   3042a:	4b0e      	ldr	r3, [pc, #56]	; (30464 <save_session_state+0x48>)
{
   3042c:	9001      	str	r0, [sp, #4]
   3042e:	1a9b      	subs	r3, r3, r2
   30430:	08db      	lsrs	r3, r3, #3
	LOG_DBG("Setting session state: %d", session_valid);
   30432:	f363 148f 	bfi	r4, r3, #6, #10
   30436:	4a0c      	ldr	r2, [pc, #48]	; (30468 <save_session_state+0x4c>)
   30438:	4603      	mov	r3, r0
   3043a:	490c      	ldr	r1, [pc, #48]	; (3046c <save_session_state+0x50>)
   3043c:	4620      	mov	r0, r4
   3043e:	f014 f972 	bl	44726 <log_string_sync>
	persistent_session = (bool)session_valid;
   30442:	9b01      	ldr	r3, [sp, #4]
   30444:	4a0a      	ldr	r2, [pc, #40]	; (30470 <save_session_state+0x54>)
   30446:	3300      	adds	r3, #0
   30448:	bf18      	it	ne
   3044a:	2301      	movne	r3, #1
   3044c:	7013      	strb	r3, [r2, #0]
	ret = settings_save_one(SETTINGS_FULL_PERSISTENT_SESSION,
   3044e:	2204      	movs	r2, #4
   30450:	4808      	ldr	r0, [pc, #32]	; (30474 <save_session_state+0x58>)
   30452:	eb0d 0102 	add.w	r1, sp, r2
   30456:	f7f5 fb91 	bl	25b7c <settings_save_one>
}
   3045a:	b002      	add	sp, #8
   3045c:	bd10      	pop	{r4, pc}
   3045e:	bf00      	nop
   30460:	00049788 	.word	0x00049788
   30464:	000498a0 	.word	0x000498a0
   30468:	0004f9c1 	.word	0x0004f9c1
   3046c:	00050141 	.word	0x00050141
   30470:	2002d0cb 	.word	0x2002d0cb
   30474:	0005015f 	.word	0x0005015f

00030478 <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   30478:	2300      	movs	r3, #0
{
   3047a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3047c:	b093      	sub	sp, #76	; 0x4c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   3047e:	e9cd 3305 	strd	r3, r3, [sp, #20]
   30482:	69cb      	ldr	r3, [r1, #28]
{
   30484:	4607      	mov	r7, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   30486:	4608      	mov	r0, r1
{
   30488:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   3048a:	9304      	str	r3, [sp, #16]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   3048c:	f002 f8a0 	bl	325d0 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   30490:	1e02      	subs	r2, r0, #0
   30492:	d068      	beq.n	30566 <nct_mqtt_evt_handler+0xee>
		return;
	} else if (err < 0) {
   30494:	da0e      	bge.n	304b4 <nct_mqtt_evt_handler+0x3c>
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   30496:	2301      	movs	r3, #1
   30498:	f04f 0000 	mov.w	r0, #0
   3049c:	499f      	ldr	r1, [pc, #636]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   3049e:	f363 0007 	bfi	r0, r3, #0, #8
   304a2:	4b9f      	ldr	r3, [pc, #636]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   304a4:	1a5b      	subs	r3, r3, r1
   304a6:	08db      	lsrs	r3, r3, #3
   304a8:	499e      	ldr	r1, [pc, #632]	; (30724 <nct_mqtt_evt_handler+0x2ac>)
   304aa:	f363 108f 	bfi	r0, r3, #6, #10

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   304ae:	f014 f93a 	bl	44726 <log_string_sync>
   304b2:	e058      	b.n	30566 <nct_mqtt_evt_handler+0xee>
	switch (_mqtt_evt->type) {
   304b4:	7823      	ldrb	r3, [r4, #0]
   304b6:	2b08      	cmp	r3, #8
   304b8:	d855      	bhi.n	30566 <nct_mqtt_evt_handler+0xee>
   304ba:	e8df f013 	tbh	[pc, r3, lsl #1]
   304be:	0009      	.short	0x0009
   304c0:	002a00f4 	.word	0x002a00f4
   304c4:	005400dc 	.word	0x005400dc
   304c8:	00540054 	.word	0x00540054
   304cc:	00c500ab 	.word	0x00c500ab
		LOG_DBG("MQTT_EVT_CONNACK: result %d", _mqtt_evt->result);
   304d0:	2304      	movs	r3, #4
   304d2:	f04f 0000 	mov.w	r0, #0
   304d6:	4a91      	ldr	r2, [pc, #580]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   304d8:	f363 0007 	bfi	r0, r3, #0, #8
   304dc:	4b90      	ldr	r3, [pc, #576]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   304de:	4992      	ldr	r1, [pc, #584]	; (30728 <nct_mqtt_evt_handler+0x2b0>)
   304e0:	1a9b      	subs	r3, r3, r2
   304e2:	08db      	lsrs	r3, r3, #3
   304e4:	f363 108f 	bfi	r0, r3, #6, #10
   304e8:	4a90      	ldr	r2, [pc, #576]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   304ea:	69e3      	ldr	r3, [r4, #28]
   304ec:	f014 f91b 	bl	44726 <log_string_sync>
		evt.param.flag = (p->session_present_flag != 0) &&
   304f0:	7920      	ldrb	r0, [r4, #4]
   304f2:	4b8f      	ldr	r3, [pc, #572]	; (30730 <nct_mqtt_evt_handler+0x2b8>)
   304f4:	b158      	cbz	r0, 3050e <nct_mqtt_evt_handler+0x96>
   304f6:	781a      	ldrb	r2, [r3, #0]
		if (persistent_session && (p->session_present_flag == 0)) {
   304f8:	781b      	ldrb	r3, [r3, #0]
		evt.param.flag = (p->session_present_flag != 0) &&
   304fa:	f88d 2014 	strb.w	r2, [sp, #20]
		if (persistent_session && (p->session_present_flag == 0)) {
   304fe:	b113      	cbz	r3, 30506 <nct_mqtt_evt_handler+0x8e>
   30500:	b908      	cbnz	r0, 30506 <nct_mqtt_evt_handler+0x8e>
			save_session_state(0);
   30502:	f7ff ff8b 	bl	3041c <save_session_state>
		evt.type = NCT_EVT_CONNECTED;
   30506:	2300      	movs	r3, #0
		evt.type = NCT_EVT_DISCONNECTED;
   30508:	f88d 3018 	strb.w	r3, [sp, #24]
	if (event_notify) {
   3050c:	e05b      	b.n	305c6 <nct_mqtt_evt_handler+0x14e>
		evt.param.flag = (p->session_present_flag != 0) &&
   3050e:	4602      	mov	r2, r0
   30510:	e7f2      	b.n	304f8 <nct_mqtt_evt_handler+0x80>
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   30512:	2304      	movs	r3, #4
   30514:	f04f 0000 	mov.w	r0, #0
   30518:	4d81      	ldr	r5, [pc, #516]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   3051a:	f363 0007 	bfi	r0, r3, #0, #8
   3051e:	4b7f      	ldr	r3, [pc, #508]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   30520:	4a82      	ldr	r2, [pc, #520]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   30522:	1aed      	subs	r5, r5, r3
   30524:	6963      	ldr	r3, [r4, #20]
   30526:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   3052a:	9300      	str	r3, [sp, #0]
   3052c:	f365 108f 	bfi	r0, r5, #6, #10
   30530:	8b23      	ldrh	r3, [r4, #24]
   30532:	4980      	ldr	r1, [pc, #512]	; (30734 <nct_mqtt_evt_handler+0x2bc>)
   30534:	f014 f8f7 	bl	44726 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   30538:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   3053a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   3053e:	d814      	bhi.n	3056a <nct_mqtt_evt_handler+0xf2>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   30540:	497d      	ldr	r1, [pc, #500]	; (30738 <nct_mqtt_evt_handler+0x2c0>)
   30542:	4638      	mov	r0, r7
   30544:	f016 f898 	bl	46678 <mqtt_readall_publish_payload>
		if (err < 0) {
   30548:	1e02      	subs	r2, r0, #0
   3054a:	da11      	bge.n	30570 <nct_mqtt_evt_handler+0xf8>
			LOG_ERR("publish_get_payload: failed %d", err);
   3054c:	2301      	movs	r3, #1
   3054e:	f04f 0000 	mov.w	r0, #0
   30552:	f363 0007 	bfi	r0, r3, #0, #8
   30556:	f365 108f 	bfi	r0, r5, #6, #10
   3055a:	4978      	ldr	r1, [pc, #480]	; (3073c <nct_mqtt_evt_handler+0x2c4>)
   3055c:	f014 f8e3 	bl	44726 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   30560:	4638      	mov	r0, r7
   30562:	f015 ff85 	bl	46470 <mqtt_disconnect>
		}
	}
}
   30566:	b013      	add	sp, #76	; 0x4c
   30568:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   3056a:	f06f 0279 	mvn.w	r2, #121	; 0x79
   3056e:	e7ed      	b.n	3054c <nct_mqtt_evt_handler+0xd4>
	for (uint32_t index = 0; index < list_size; index++) {
   30570:	2500      	movs	r5, #0
   30572:	4e73      	ldr	r6, [pc, #460]	; (30740 <nct_mqtt_evt_handler+0x2c8>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   30574:	68a2      	ldr	r2, [r4, #8]
   30576:	6873      	ldr	r3, [r6, #4]
   30578:	6831      	ldr	r1, [r6, #0]
   3057a:	429a      	cmp	r2, r3
   3057c:	bf28      	it	cs
   3057e:	461a      	movcs	r2, r3
   30580:	6860      	ldr	r0, [r4, #4]
   30582:	f017 fffa 	bl	4857a <strncmp>
		if (strings_compare(
   30586:	2800      	cmp	r0, #0
   30588:	d130      	bne.n	305ec <nct_mqtt_evt_handler+0x174>
			*opcode = nct_cc_rx_opcode_map[index];
   3058a:	4b6e      	ldr	r3, [pc, #440]	; (30744 <nct_mqtt_evt_handler+0x2cc>)
   3058c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   30590:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			cc.id = p->message_id;
   30594:	8b23      	ldrh	r3, [r4, #24]
   30596:	9310      	str	r3, [sp, #64]	; 0x40
			cc.data.ptr = nct.payload_buf;
   30598:	4b67      	ldr	r3, [pc, #412]	; (30738 <nct_mqtt_evt_handler+0x2c0>)
   3059a:	930d      	str	r3, [sp, #52]	; 0x34
			cc.data.len = p->message.payload.len;
   3059c:	6963      	ldr	r3, [r4, #20]
   3059e:	930c      	str	r3, [sp, #48]	; 0x30
			cc.topic.len = p->message.topic.topic.size;
   305a0:	68a3      	ldr	r3, [r4, #8]
   305a2:	930e      	str	r3, [sp, #56]	; 0x38
			cc.topic.ptr = p->message.topic.topic.utf8;
   305a4:	6863      	ldr	r3, [r4, #4]
   305a6:	930f      	str	r3, [sp, #60]	; 0x3c
			evt.type = NCT_EVT_CC_RX_DATA;
   305a8:	2303      	movs	r3, #3
   305aa:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   305ae:	ab0c      	add	r3, sp, #48	; 0x30
			evt.param.dc = &dc;
   305b0:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   305b2:	7b23      	ldrb	r3, [r4, #12]
   305b4:	2b01      	cmp	r3, #1
   305b6:	d106      	bne.n	305c6 <nct_mqtt_evt_handler+0x14e>
			const struct mqtt_puback_param ack = {
   305b8:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   305ba:	a903      	add	r1, sp, #12
   305bc:	4638      	mov	r0, r7
			const struct mqtt_puback_param ack = {
   305be:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   305c2:	f015 ff2e 	bl	46422 <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   305c6:	a804      	add	r0, sp, #16
   305c8:	f7fe ffde 	bl	2f588 <nct_input>
		if (err != 0) {
   305cc:	4602      	mov	r2, r0
   305ce:	2800      	cmp	r0, #0
   305d0:	d0c9      	beq.n	30566 <nct_mqtt_evt_handler+0xee>
			LOG_ERR("nct_input: failed %d", err);
   305d2:	2301      	movs	r3, #1
   305d4:	f04f 0000 	mov.w	r0, #0
   305d8:	4950      	ldr	r1, [pc, #320]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   305da:	f363 0007 	bfi	r0, r3, #0, #8
   305de:	4b50      	ldr	r3, [pc, #320]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   305e0:	1a5b      	subs	r3, r3, r1
   305e2:	08db      	lsrs	r3, r3, #3
   305e4:	f363 108f 	bfi	r0, r3, #6, #10
   305e8:	4957      	ldr	r1, [pc, #348]	; (30748 <nct_mqtt_evt_handler+0x2d0>)
   305ea:	e760      	b.n	304ae <nct_mqtt_evt_handler+0x36>
	for (uint32_t index = 0; index < list_size; index++) {
   305ec:	3501      	adds	r5, #1
   305ee:	2d03      	cmp	r5, #3
   305f0:	f106 060c 	add.w	r6, r6, #12
   305f4:	d1be      	bne.n	30574 <nct_mqtt_evt_handler+0xfc>
			dc.id = p->message_id;
   305f6:	8b23      	ldrh	r3, [r4, #24]
   305f8:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.data.ptr = nct.payload_buf;
   305fa:	4b4f      	ldr	r3, [pc, #316]	; (30738 <nct_mqtt_evt_handler+0x2c0>)
   305fc:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   305fe:	6963      	ldr	r3, [r4, #20]
   30600:	9307      	str	r3, [sp, #28]
			dc.topic.len = p->message.topic.topic.size;
   30602:	68a3      	ldr	r3, [r4, #8]
   30604:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.ptr = p->message.topic.topic.utf8;
   30606:	6863      	ldr	r3, [r4, #4]
   30608:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_DC_RX_DATA;
   3060a:	2305      	movs	r3, #5
   3060c:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   30610:	ab07      	add	r3, sp, #28
   30612:	e7cd      	b.n	305b0 <nct_mqtt_evt_handler+0x138>
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   30614:	2304      	movs	r3, #4
   30616:	f04f 0000 	mov.w	r0, #0
   3061a:	4d41      	ldr	r5, [pc, #260]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   3061c:	f363 0007 	bfi	r0, r3, #0, #8
   30620:	4b3e      	ldr	r3, [pc, #248]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   30622:	4a42      	ldr	r2, [pc, #264]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   30624:	1aed      	subs	r5, r5, r3
   30626:	69e3      	ldr	r3, [r4, #28]
   30628:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   3062c:	9300      	str	r3, [sp, #0]
   3062e:	f365 108f 	bfi	r0, r5, #6, #10
   30632:	88a3      	ldrh	r3, [r4, #4]
   30634:	4945      	ldr	r1, [pc, #276]	; (3074c <nct_mqtt_evt_handler+0x2d4>)
   30636:	f014 f876 	bl	44726 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   3063a:	f240 42d2 	movw	r2, #1234	; 0x4d2
   3063e:	88a3      	ldrh	r3, [r4, #4]
   30640:	4293      	cmp	r3, r2
   30642:	d142      	bne.n	306ca <nct_mqtt_evt_handler+0x252>
			evt.type = NCT_EVT_CC_CONNECTED;
   30644:	2301      	movs	r3, #1
   30646:	e75f      	b.n	30508 <nct_mqtt_evt_handler+0x90>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   30648:	2304      	movs	r3, #4
   3064a:	f04f 0000 	mov.w	r0, #0
   3064e:	4a33      	ldr	r2, [pc, #204]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   30650:	f363 0007 	bfi	r0, r3, #0, #8
   30654:	4b32      	ldr	r3, [pc, #200]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   30656:	493e      	ldr	r1, [pc, #248]	; (30750 <nct_mqtt_evt_handler+0x2d8>)
   30658:	1a9b      	subs	r3, r3, r2
   3065a:	08db      	lsrs	r3, r3, #3
   3065c:	f363 108f 	bfi	r0, r3, #6, #10
   30660:	4a32      	ldr	r2, [pc, #200]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   30662:	f014 f860 	bl	44726 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   30666:	f240 43d2 	movw	r3, #1234	; 0x4d2
   3066a:	88a2      	ldrh	r2, [r4, #4]
   3066c:	429a      	cmp	r2, r3
   3066e:	f47f af7a 	bne.w	30566 <nct_mqtt_evt_handler+0xee>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   30672:	2307      	movs	r3, #7
   30674:	e748      	b.n	30508 <nct_mqtt_evt_handler+0x90>
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   30676:	2304      	movs	r3, #4
   30678:	f04f 0000 	mov.w	r0, #0
   3067c:	4a27      	ldr	r2, [pc, #156]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   3067e:	f363 0007 	bfi	r0, r3, #0, #8
   30682:	4b27      	ldr	r3, [pc, #156]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   30684:	4933      	ldr	r1, [pc, #204]	; (30754 <nct_mqtt_evt_handler+0x2dc>)
   30686:	1a9b      	subs	r3, r3, r2
   30688:	08db      	lsrs	r3, r3, #3
   3068a:	f363 108f 	bfi	r0, r3, #6, #10
   3068e:	69e3      	ldr	r3, [r4, #28]
   30690:	4a26      	ldr	r2, [pc, #152]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   30692:	9300      	str	r3, [sp, #0]
   30694:	88a3      	ldrh	r3, [r4, #4]
   30696:	f014 f846 	bl	44726 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   3069a:	2304      	movs	r3, #4
   3069c:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   306a0:	88a3      	ldrh	r3, [r4, #4]
   306a2:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   306a4:	e78f      	b.n	305c6 <nct_mqtt_evt_handler+0x14e>
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   306a6:	2304      	movs	r3, #4
   306a8:	f04f 0000 	mov.w	r0, #0
   306ac:	4a1b      	ldr	r2, [pc, #108]	; (3071c <nct_mqtt_evt_handler+0x2a4>)
   306ae:	f363 0007 	bfi	r0, r3, #0, #8
   306b2:	4b1b      	ldr	r3, [pc, #108]	; (30720 <nct_mqtt_evt_handler+0x2a8>)
   306b4:	4928      	ldr	r1, [pc, #160]	; (30758 <nct_mqtt_evt_handler+0x2e0>)
   306b6:	1a9b      	subs	r3, r3, r2
   306b8:	08db      	lsrs	r3, r3, #3
   306ba:	f363 108f 	bfi	r0, r3, #6, #10
   306be:	4a1b      	ldr	r2, [pc, #108]	; (3072c <nct_mqtt_evt_handler+0x2b4>)
   306c0:	69e3      	ldr	r3, [r4, #28]
   306c2:	f014 f830 	bl	44726 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   306c6:	2309      	movs	r3, #9
   306c8:	e71e      	b.n	30508 <nct_mqtt_evt_handler+0x90>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   306ca:	f242 223d 	movw	r2, #8765	; 0x223d
   306ce:	4293      	cmp	r3, r2
   306d0:	f47f af49 	bne.w	30566 <nct_mqtt_evt_handler+0xee>
			evt.type = NCT_EVT_DC_CONNECTED;
   306d4:	2302      	movs	r3, #2
			err = save_session_state(1);
   306d6:	2001      	movs	r0, #1
			evt.type = NCT_EVT_DC_CONNECTED;
   306d8:	f88d 3018 	strb.w	r3, [sp, #24]
			err = save_session_state(1);
   306dc:	f7ff fe9e 	bl	3041c <save_session_state>
			if (err) {
   306e0:	4602      	mov	r2, r0
   306e2:	b148      	cbz	r0, 306f8 <nct_mqtt_evt_handler+0x280>
				LOG_ERR("Failed to save session state: %d",
   306e4:	2101      	movs	r1, #1
   306e6:	f04f 0000 	mov.w	r0, #0
   306ea:	f361 0007 	bfi	r0, r1, #0, #8
   306ee:	f365 108f 	bfi	r0, r5, #6, #10
   306f2:	491a      	ldr	r1, [pc, #104]	; (3075c <nct_mqtt_evt_handler+0x2e4>)
   306f4:	f014 f817 	bl	44726 <log_string_sync>
			err = nrf_cloud_fota_subscribe();
   306f8:	f001 fedc 	bl	324b4 <nrf_cloud_fota_subscribe>
			if (err) {
   306fc:	4602      	mov	r2, r0
   306fe:	2800      	cmp	r0, #0
   30700:	f43f af61 	beq.w	305c6 <nct_mqtt_evt_handler+0x14e>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   30704:	2101      	movs	r1, #1
   30706:	f04f 0000 	mov.w	r0, #0
   3070a:	f361 0007 	bfi	r0, r1, #0, #8
   3070e:	f365 108f 	bfi	r0, r5, #6, #10
   30712:	4913      	ldr	r1, [pc, #76]	; (30760 <nct_mqtt_evt_handler+0x2e8>)
   30714:	f014 f807 	bl	44726 <log_string_sync>
	if (event_notify) {
   30718:	e755      	b.n	305c6 <nct_mqtt_evt_handler+0x14e>
   3071a:	bf00      	nop
   3071c:	00049788 	.word	0x00049788
   30720:	000498a0 	.word	0x000498a0
   30724:	0004fe9c 	.word	0x0004fe9c
   30728:	0004fec8 	.word	0x0004fec8
   3072c:	0004f9ff 	.word	0x0004f9ff
   30730:	2002d0cb 	.word	0x2002d0cb
   30734:	0004fee8 	.word	0x0004fee8
   30738:	200250a8 	.word	0x200250a8
   3073c:	0004ff0f 	.word	0x0004ff0f
   30740:	0004a3c4 	.word	0x0004a3c4
   30744:	0004a3e8 	.word	0x0004a3e8
   30748:	0004fffb 	.word	0x0004fffb
   3074c:	0004ff2e 	.word	0x0004ff2e
   30750:	0004ff97 	.word	0x0004ff97
   30754:	0004ffad 	.word	0x0004ffad
   30758:	0004ffd6 	.word	0x0004ffd6
   3075c:	0004ff57 	.word	0x0004ff57
   30760:	0004ff78 	.word	0x0004ff78

00030764 <nct_mqtt_connect>:
{
   30764:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (!initialized) {
   30768:	f8df 814c 	ldr.w	r8, [pc, #332]	; 308b8 <nct_mqtt_connect+0x154>
   3076c:	4f46      	ldr	r7, [pc, #280]	; (30888 <nct_mqtt_connect+0x124>)
   3076e:	4b47      	ldr	r3, [pc, #284]	; (3088c <nct_mqtt_connect+0x128>)
   30770:	f898 5000 	ldrb.w	r5, [r8]
   30774:	1aff      	subs	r7, r7, r3
   30776:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   3077a:	4c45      	ldr	r4, [pc, #276]	; (30890 <nct_mqtt_connect+0x12c>)
   3077c:	2d00      	cmp	r5, #0
   3077e:	d143      	bne.n	30808 <nct_mqtt_connect+0xa4>
		mqtt_client_init(&nct.client);
   30780:	f104 001c 	add.w	r0, r4, #28
   30784:	f015 fdac 	bl	462e0 <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   30788:	f104 039c 	add.w	r3, r4, #156	; 0x9c
   3078c:	66e3      	str	r3, [r4, #108]	; 0x6c
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   3078e:	4841      	ldr	r0, [pc, #260]	; (30894 <nct_mqtt_connect+0x130>)
		nct.client.evt_cb = nct_mqtt_evt_handler;
   30790:	4b41      	ldr	r3, [pc, #260]	; (30898 <nct_mqtt_connect+0x134>)
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   30792:	6660      	str	r0, [r4, #100]	; 0x64
		nct.client.evt_cb = nct_mqtt_evt_handler;
   30794:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		nct.client.client_id.size = strlen(client_id_buf);
   30798:	f7ec fd64 	bl	1d264 <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   3079c:	2304      	movs	r3, #4
   3079e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		nct.client.clean_session = persistent_session ? 0U : 1U;
   307a2:	4b3e      	ldr	r3, [pc, #248]	; (3089c <nct_mqtt_connect+0x138>)
   307a4:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
   307a8:	781b      	ldrb	r3, [r3, #0]
		nct.client.client_id.size = strlen(client_id_buf);
   307aa:	66a0      	str	r0, [r4, #104]	; 0x68
		nct.client.clean_session = persistent_session ? 0U : 1U;
   307ac:	f083 0301 	eor.w	r3, r3, #1
   307b0:	f363 0241 	bfi	r2, r3, #1, #1
   307b4:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   307b8:	f04f 0000 	mov.w	r0, #0
   307bc:	2204      	movs	r2, #4
   307be:	f362 0007 	bfi	r0, r2, #0, #8
   307c2:	f367 108f 	bfi	r0, r7, #6, #10
   307c6:	4a36      	ldr	r2, [pc, #216]	; (308a0 <nct_mqtt_connect+0x13c>)
   307c8:	4936      	ldr	r1, [pc, #216]	; (308a4 <nct_mqtt_connect+0x140>)
		nct.client.user_name = NULL;
   307ca:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
		LOG_DBG("MQTT clean session flag: %u",
   307ce:	f013 ffaa 	bl	44726 <log_string_sync>
		nct.client.rx_buf = nct.rx_buf;
   307d2:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   307d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   307da:	4626      	mov	r6, r4
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   307dc:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   307e0:	f04f 0c01 	mov.w	ip, #1
		nct.client.tx_buf = nct.tx_buf;
   307e4:	f504 72ec 	add.w	r2, r4, #472	; 0x1d8
   307e8:	f104 0548 	add.w	r5, r4, #72	; 0x48
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   307ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   307f0:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
   307f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   307f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   307f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   307fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   30800:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
		initialized = true;
   30804:	f888 c000 	strb.w	ip, [r8]
	err = mqtt_connect(&nct.client);
   30808:	4827      	ldr	r0, [pc, #156]	; (308a8 <nct_mqtt_connect+0x144>)
   3080a:	f015 fd82 	bl	46312 <mqtt_connect>
	if (err != 0) {
   3080e:	4605      	mov	r5, r0
   30810:	b178      	cbz	r0, 30832 <nct_mqtt_connect+0xce>
		LOG_DBG("mqtt_connect failed %d", err);
   30812:	2304      	movs	r3, #4
   30814:	f04f 0000 	mov.w	r0, #0
   30818:	f363 0007 	bfi	r0, r3, #0, #8
   3081c:	f367 108f 	bfi	r0, r7, #6, #10
   30820:	462b      	mov	r3, r5
   30822:	4a1f      	ldr	r2, [pc, #124]	; (308a0 <nct_mqtt_connect+0x13c>)
   30824:	4921      	ldr	r1, [pc, #132]	; (308ac <nct_mqtt_connect+0x148>)
   30826:	f013 ff7e 	bl	44726 <log_string_sync>
}
   3082a:	4628      	mov	r0, r5
   3082c:	b004      	add	sp, #16
   3082e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct timeval timeout = {
   30832:	263c      	movs	r6, #60	; 0x3c
   30834:	9003      	str	r0, [sp, #12]
   30836:	9602      	str	r6, [sp, #8]
	return (int)mqtt_keepalive_time_left(&nct.client);
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
   30838:	6c60      	ldr	r0, [r4, #68]	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3083a:	2308      	movs	r3, #8
   3083c:	2215      	movs	r2, #21
   3083e:	9300      	str	r3, [sp, #0]
   30840:	2101      	movs	r1, #1
   30842:	446b      	add	r3, sp
   30844:	f014 fbc2 	bl	44fcc <z_impl_zsock_setsockopt>
		if (err == -1) {
   30848:	1c43      	adds	r3, r0, #1
   3084a:	4604      	mov	r4, r0
   3084c:	d10e      	bne.n	3086c <nct_mqtt_connect+0x108>
			LOG_ERR("Failed to set timeout, errno: %d", errno);
   3084e:	2301      	movs	r3, #1
   30850:	f04f 0400 	mov.w	r4, #0
   30854:	f363 0407 	bfi	r4, r3, #0, #8
   30858:	f015 f8c4 	bl	459e4 <__errno>
   3085c:	f367 148f 	bfi	r4, r7, #6, #10
   30860:	6802      	ldr	r2, [r0, #0]
   30862:	4913      	ldr	r1, [pc, #76]	; (308b0 <nct_mqtt_connect+0x14c>)
   30864:	4620      	mov	r0, r4
   30866:	f013 ff5e 	bl	44726 <log_string_sync>
			err = 0;
   3086a:	e7de      	b.n	3082a <nct_mqtt_connect+0xc6>
			LOG_INF("Using socket send timeout of %d seconds",
   3086c:	2303      	movs	r3, #3
   3086e:	f04f 0000 	mov.w	r0, #0
   30872:	f363 0007 	bfi	r0, r3, #0, #8
   30876:	f367 108f 	bfi	r0, r7, #6, #10
   3087a:	4632      	mov	r2, r6
   3087c:	490d      	ldr	r1, [pc, #52]	; (308b4 <nct_mqtt_connect+0x150>)
   3087e:	f013 ff52 	bl	44726 <log_string_sync>
   30882:	4625      	mov	r5, r4
	return err;
   30884:	e7d1      	b.n	3082a <nct_mqtt_connect+0xc6>
   30886:	bf00      	nop
   30888:	000498a0 	.word	0x000498a0
   3088c:	00049788 	.word	0x00049788
   30890:	20024dd0 	.word	0x20024dd0
   30894:	2002d0b6 	.word	0x2002d0b6
   30898:	00030479 	.word	0x00030479
   3089c:	2002d0cb 	.word	0x2002d0cb
   308a0:	0004f9ee 	.word	0x0004f9ee
   308a4:	0004fe18 	.word	0x0004fe18
   308a8:	20024dec 	.word	0x20024dec
   308ac:	0004fe38 	.word	0x0004fe38
   308b0:	0004fe53 	.word	0x0004fe53
   308b4:	0004fe74 	.word	0x0004fe74
   308b8:	2002d0ca 	.word	0x2002d0ca

000308bc <nct_init>:
{
   308bc:	b570      	push	{r4, r5, r6, lr}
   308be:	b086      	sub	sp, #24
	ret = settings_subsys_init();
   308c0:	f7f5 faca 	bl	25e58 <settings_subsys_init>
	if (ret) {
   308c4:	4605      	mov	r5, r0
   308c6:	b188      	cbz	r0, 308ec <nct_init+0x30>
		LOG_ERR("Settings init failed: %d", ret);
   308c8:	2301      	movs	r3, #1
   308ca:	f04f 0000 	mov.w	r0, #0
   308ce:	4aa0      	ldr	r2, [pc, #640]	; (30b50 <nct_init+0x294>)
   308d0:	f363 0007 	bfi	r0, r3, #0, #8
   308d4:	4b9f      	ldr	r3, [pc, #636]	; (30b54 <nct_init+0x298>)
   308d6:	49a0      	ldr	r1, [pc, #640]	; (30b58 <nct_init+0x29c>)
   308d8:	1a9b      	subs	r3, r3, r2
   308da:	462a      	mov	r2, r5
   308dc:	08db      	lsrs	r3, r3, #3
   308de:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Cannot load settings: %d", ret);
   308e2:	f013 ff20 	bl	44726 <log_string_sync>
}
   308e6:	4628      	mov	r0, r5
   308e8:	b006      	add	sp, #24
   308ea:	bd70      	pop	{r4, r5, r6, pc}
	ret = settings_load_subtree(settings_handler_nrf_cloud.name);
   308ec:	489b      	ldr	r0, [pc, #620]	; (30b5c <nct_init+0x2a0>)
   308ee:	f7f5 f97d 	bl	25bec <settings_load_subtree>
	if (ret) {
   308f2:	4605      	mov	r5, r0
   308f4:	2800      	cmp	r0, #0
   308f6:	f000 80a8 	beq.w	30a4a <nct_init+0x18e>
		LOG_ERR("Cannot load settings: %d", ret);
   308fa:	2301      	movs	r3, #1
   308fc:	f04f 0000 	mov.w	r0, #0
   30900:	4a93      	ldr	r2, [pc, #588]	; (30b50 <nct_init+0x294>)
   30902:	f363 0007 	bfi	r0, r3, #0, #8
   30906:	4b93      	ldr	r3, [pc, #588]	; (30b54 <nct_init+0x298>)
   30908:	4995      	ldr	r1, [pc, #596]	; (30b60 <nct_init+0x2a4>)
   3090a:	1a9b      	subs	r3, r3, r2
   3090c:	08db      	lsrs	r3, r3, #3
   3090e:	f363 108f 	bfi	r0, r3, #6, #10
   30912:	462a      	mov	r2, r5
   30914:	e7e5      	b.n	308e2 <nct_init+0x26>
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   30916:	2304      	movs	r3, #4
   30918:	f04f 0600 	mov.w	r6, #0
   3091c:	4891      	ldr	r0, [pc, #580]	; (30b64 <nct_init+0x2a8>)
   3091e:	f363 0607 	bfi	r6, r3, #0, #8
   30922:	f013 ff13 	bl	4474c <log_strdup>
   30926:	f364 168f 	bfi	r6, r4, #6, #10
   3092a:	4603      	mov	r3, r0
   3092c:	4a8e      	ldr	r2, [pc, #568]	; (30b68 <nct_init+0x2ac>)
   3092e:	498f      	ldr	r1, [pc, #572]	; (30b6c <nct_init+0x2b0>)
   30930:	4630      	mov	r0, r6
   30932:	f013 fef8 	bl	44726 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   30936:	4b8e      	ldr	r3, [pc, #568]	; (30b70 <nct_init+0x2b4>)
   30938:	4a8e      	ldr	r2, [pc, #568]	; (30b74 <nct_init+0x2b8>)
   3093a:	2128      	movs	r1, #40	; 0x28
   3093c:	488e      	ldr	r0, [pc, #568]	; (30b78 <nct_init+0x2bc>)
   3093e:	f011 ffd9 	bl	428f4 <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   30942:	2827      	cmp	r0, #39	; 0x27
   30944:	f040 8100 	bne.w	30b48 <nct_init+0x28c>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   30948:	2304      	movs	r3, #4
   3094a:	f04f 0600 	mov.w	r6, #0
   3094e:	488a      	ldr	r0, [pc, #552]	; (30b78 <nct_init+0x2bc>)
   30950:	f363 0607 	bfi	r6, r3, #0, #8
   30954:	f013 fefa 	bl	4474c <log_strdup>
   30958:	f364 168f 	bfi	r6, r4, #6, #10
   3095c:	4603      	mov	r3, r0
   3095e:	4a82      	ldr	r2, [pc, #520]	; (30b68 <nct_init+0x2ac>)
   30960:	4986      	ldr	r1, [pc, #536]	; (30b7c <nct_init+0x2c0>)
   30962:	4630      	mov	r0, r6
   30964:	f013 fedf 	bl	44726 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   30968:	4b81      	ldr	r3, [pc, #516]	; (30b70 <nct_init+0x2b4>)
   3096a:	4a85      	ldr	r2, [pc, #532]	; (30b80 <nct_init+0x2c4>)
   3096c:	2134      	movs	r1, #52	; 0x34
   3096e:	4885      	ldr	r0, [pc, #532]	; (30b84 <nct_init+0x2c8>)
   30970:	f011 ffc0 	bl	428f4 <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   30974:	2833      	cmp	r0, #51	; 0x33
   30976:	f040 80e7 	bne.w	30b48 <nct_init+0x28c>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   3097a:	2304      	movs	r3, #4
   3097c:	f04f 0600 	mov.w	r6, #0
   30980:	4880      	ldr	r0, [pc, #512]	; (30b84 <nct_init+0x2c8>)
   30982:	f363 0607 	bfi	r6, r3, #0, #8
   30986:	f013 fee1 	bl	4474c <log_strdup>
   3098a:	f364 168f 	bfi	r6, r4, #6, #10
   3098e:	4603      	mov	r3, r0
   30990:	4a75      	ldr	r2, [pc, #468]	; (30b68 <nct_init+0x2ac>)
   30992:	497d      	ldr	r1, [pc, #500]	; (30b88 <nct_init+0x2cc>)
   30994:	4630      	mov	r0, r6
   30996:	f013 fec6 	bl	44726 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   3099a:	4b75      	ldr	r3, [pc, #468]	; (30b70 <nct_init+0x2b4>)
   3099c:	4a7b      	ldr	r2, [pc, #492]	; (30b8c <nct_init+0x2d0>)
   3099e:	2134      	movs	r1, #52	; 0x34
   309a0:	487b      	ldr	r0, [pc, #492]	; (30b90 <nct_init+0x2d4>)
   309a2:	f011 ffa7 	bl	428f4 <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   309a6:	2833      	cmp	r0, #51	; 0x33
   309a8:	f040 80ce 	bne.w	30b48 <nct_init+0x28c>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   309ac:	2304      	movs	r3, #4
   309ae:	f04f 0600 	mov.w	r6, #0
   309b2:	4877      	ldr	r0, [pc, #476]	; (30b90 <nct_init+0x2d4>)
   309b4:	f363 0607 	bfi	r6, r3, #0, #8
   309b8:	f013 fec8 	bl	4474c <log_strdup>
   309bc:	f364 168f 	bfi	r6, r4, #6, #10
   309c0:	4603      	mov	r3, r0
   309c2:	4a69      	ldr	r2, [pc, #420]	; (30b68 <nct_init+0x2ac>)
   309c4:	4973      	ldr	r1, [pc, #460]	; (30b94 <nct_init+0x2d8>)
   309c6:	4630      	mov	r0, r6
   309c8:	f013 fead 	bl	44726 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   309cc:	4b68      	ldr	r3, [pc, #416]	; (30b70 <nct_init+0x2b4>)
   309ce:	4a72      	ldr	r2, [pc, #456]	; (30b98 <nct_init+0x2dc>)
   309d0:	212e      	movs	r1, #46	; 0x2e
   309d2:	4872      	ldr	r0, [pc, #456]	; (30b9c <nct_init+0x2e0>)
   309d4:	f011 ff8e 	bl	428f4 <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   309d8:	282d      	cmp	r0, #45	; 0x2d
   309da:	f040 80b5 	bne.w	30b48 <nct_init+0x28c>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   309de:	2304      	movs	r3, #4
   309e0:	f04f 0600 	mov.w	r6, #0
   309e4:	486d      	ldr	r0, [pc, #436]	; (30b9c <nct_init+0x2e0>)
   309e6:	f363 0607 	bfi	r6, r3, #0, #8
   309ea:	f013 feaf 	bl	4474c <log_strdup>
   309ee:	f364 168f 	bfi	r6, r4, #6, #10
   309f2:	4603      	mov	r3, r0
   309f4:	4a5c      	ldr	r2, [pc, #368]	; (30b68 <nct_init+0x2ac>)
   309f6:	496a      	ldr	r1, [pc, #424]	; (30ba0 <nct_init+0x2e4>)
   309f8:	4630      	mov	r0, r6
   309fa:	f013 fe94 	bl	44726 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   309fe:	4b5c      	ldr	r3, [pc, #368]	; (30b70 <nct_init+0x2b4>)
   30a00:	4a68      	ldr	r2, [pc, #416]	; (30ba4 <nct_init+0x2e8>)
   30a02:	212b      	movs	r1, #43	; 0x2b
   30a04:	4868      	ldr	r0, [pc, #416]	; (30ba8 <nct_init+0x2ec>)
   30a06:	f011 ff75 	bl	428f4 <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   30a0a:	282a      	cmp	r0, #42	; 0x2a
   30a0c:	f040 809c 	bne.w	30b48 <nct_init+0x28c>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   30a10:	2304      	movs	r3, #4
   30a12:	f04f 0600 	mov.w	r6, #0
   30a16:	4864      	ldr	r0, [pc, #400]	; (30ba8 <nct_init+0x2ec>)
   30a18:	f363 0607 	bfi	r6, r3, #0, #8
   30a1c:	f013 fe96 	bl	4474c <log_strdup>
   30a20:	f364 168f 	bfi	r6, r4, #6, #10
   30a24:	4603      	mov	r3, r0
   30a26:	4a50      	ldr	r2, [pc, #320]	; (30b68 <nct_init+0x2ac>)
   30a28:	4960      	ldr	r1, [pc, #384]	; (30bac <nct_init+0x2f0>)
   30a2a:	4630      	mov	r0, r6
   30a2c:	f013 fe7b 	bl	44726 <log_string_sync>
	nct.tls_config.cipher_count = 0;
   30a30:	2200      	movs	r2, #0
   30a32:	2102      	movs	r1, #2
	nct.tls_config.peer_verify = 2;
   30a34:	4b5e      	ldr	r3, [pc, #376]	; (30bb0 <nct_init+0x2f4>)
	nct.tls_config.cipher_count = 0;
   30a36:	e9c3 1200 	strd	r1, r2, [r3]
	nct.tls_config.cipher_list = NULL;
   30a3a:	609a      	str	r2, [r3, #8]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   30a3c:	2201      	movs	r2, #1
   30a3e:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   30a40:	4a5c      	ldr	r2, [pc, #368]	; (30bb4 <nct_init+0x2f8>)
   30a42:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   30a44:	4a5c      	ldr	r2, [pc, #368]	; (30bb8 <nct_init+0x2fc>)
   30a46:	615a      	str	r2, [r3, #20]
	return nct_provision();
   30a48:	e74d      	b.n	308e6 <nct_init+0x2a>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   30a4a:	485c      	ldr	r0, [pc, #368]	; (30bbc <nct_init+0x300>)
   30a4c:	f001 fb70 	bl	32130 <nrf_cloud_fota_init>
	if (err) {
   30a50:	4605      	mov	r5, r0
   30a52:	2800      	cmp	r0, #0
   30a54:	f47f af47 	bne.w	308e6 <nct_init+0x2a>
	nrf_cloud_fota_ble_set_handler(nrf_cloud_fota_ble_cb_handler);
   30a58:	4859      	ldr	r0, [pc, #356]	; (30bc0 <nct_init+0x304>)
   30a5a:	f002 f80d 	bl	32a78 <nrf_cloud_fota_ble_set_handler>
	dc_endpoint_reset();
   30a5e:	f7ff fb61 	bl	30124 <dc_endpoint_reset>
	at_socket_fd = nrf_socket(NRF_AF_LTE, NRF_SOCK_DGRAM, NRF_PROTO_AT);
   30a62:	f240 2201 	movw	r2, #513	; 0x201
   30a66:	2102      	movs	r1, #2
   30a68:	2066      	movs	r0, #102	; 0x66
   30a6a:	f00b fbf5 	bl	3c258 <nrf_socket>
	__ASSERT_NO_MSG(at_socket_fd >= 0);
   30a6e:	1e04      	subs	r4, r0, #0
   30a70:	da0b      	bge.n	30a8a <nct_init+0x1ce>
   30a72:	4954      	ldr	r1, [pc, #336]	; (30bc4 <nct_init+0x308>)
   30a74:	4854      	ldr	r0, [pc, #336]	; (30bc8 <nct_init+0x30c>)
   30a76:	f44f 739a 	mov.w	r3, #308	; 0x134
   30a7a:	4a54      	ldr	r2, [pc, #336]	; (30bcc <nct_init+0x310>)
   30a7c:	f013 fc28 	bl	442d0 <printk>
   30a80:	f44f 719a 	mov.w	r1, #308	; 0x134
   30a84:	4851      	ldr	r0, [pc, #324]	; (30bcc <nct_init+0x310>)
   30a86:	f013 fe3d 	bl	44704 <assert_post_action>
	bytes_written = nrf_write(at_socket_fd, "AT+CGSN", 7);
   30a8a:	2207      	movs	r2, #7
   30a8c:	4950      	ldr	r1, [pc, #320]	; (30bd0 <nct_init+0x314>)
   30a8e:	4620      	mov	r0, r4
   30a90:	f00b fc1e 	bl	3c2d0 <nrf_write>
	__ASSERT_NO_MSG(bytes_written == 7);
   30a94:	2807      	cmp	r0, #7
   30a96:	d00b      	beq.n	30ab0 <nct_init+0x1f4>
   30a98:	494e      	ldr	r1, [pc, #312]	; (30bd4 <nct_init+0x318>)
   30a9a:	484b      	ldr	r0, [pc, #300]	; (30bc8 <nct_init+0x30c>)
   30a9c:	f240 1337 	movw	r3, #311	; 0x137
   30aa0:	4a4a      	ldr	r2, [pc, #296]	; (30bcc <nct_init+0x310>)
   30aa2:	f013 fc15 	bl	442d0 <printk>
   30aa6:	f240 1137 	movw	r1, #311	; 0x137
   30aaa:	4848      	ldr	r0, [pc, #288]	; (30bcc <nct_init+0x310>)
   30aac:	f013 fe2a 	bl	44704 <assert_post_action>
	bytes_read = nrf_read(at_socket_fd, imei_buf, NRF_IMEI_LEN);
   30ab0:	ae02      	add	r6, sp, #8
   30ab2:	220f      	movs	r2, #15
   30ab4:	4631      	mov	r1, r6
   30ab6:	4620      	mov	r0, r4
   30ab8:	f00b fc56 	bl	3c368 <nrf_read>
	__ASSERT_NO_MSG(bytes_read == NRF_IMEI_LEN);
   30abc:	280f      	cmp	r0, #15
   30abe:	d00b      	beq.n	30ad8 <nct_init+0x21c>
   30ac0:	4945      	ldr	r1, [pc, #276]	; (30bd8 <nct_init+0x31c>)
   30ac2:	4841      	ldr	r0, [pc, #260]	; (30bc8 <nct_init+0x30c>)
   30ac4:	f44f 739d 	mov.w	r3, #314	; 0x13a
   30ac8:	4a40      	ldr	r2, [pc, #256]	; (30bcc <nct_init+0x310>)
   30aca:	f013 fc01 	bl	442d0 <printk>
   30ace:	f44f 719d 	mov.w	r1, #314	; 0x13a
   30ad2:	483e      	ldr	r0, [pc, #248]	; (30bcc <nct_init+0x310>)
   30ad4:	f013 fe16 	bl	44704 <assert_post_action>
	imei_buf[NRF_IMEI_LEN] = 0;
   30ad8:	2300      	movs	r3, #0
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   30ada:	9600      	str	r6, [sp, #0]
	imei_buf[NRF_IMEI_LEN] = 0;
   30adc:	f88d 3017 	strb.w	r3, [sp, #23]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%s", CONFIG_NRF_CLOUD_CLIENT_ID_PREFIX, imei_buf);
   30ae0:	4a3e      	ldr	r2, [pc, #248]	; (30bdc <nct_init+0x320>)
   30ae2:	4b3f      	ldr	r3, [pc, #252]	; (30be0 <nct_init+0x324>)
   30ae4:	2114      	movs	r1, #20
   30ae6:	4822      	ldr	r0, [pc, #136]	; (30b70 <nct_init+0x2b4>)
   30ae8:	f011 ff04 	bl	428f4 <sniprintf>
	ret = nrf_close(at_socket_fd);
   30aec:	4620      	mov	r0, r4
   30aee:	f00b fbc5 	bl	3c27c <nrf_close>
	__ASSERT_NO_MSG(ret == 0);
   30af2:	b158      	cbz	r0, 30b0c <nct_init+0x250>
   30af4:	493b      	ldr	r1, [pc, #236]	; (30be4 <nct_init+0x328>)
   30af6:	4834      	ldr	r0, [pc, #208]	; (30bc8 <nct_init+0x30c>)
   30af8:	f44f 73a0 	mov.w	r3, #320	; 0x140
   30afc:	4a33      	ldr	r2, [pc, #204]	; (30bcc <nct_init+0x310>)
   30afe:	f013 fbe7 	bl	442d0 <printk>
   30b02:	f44f 71a0 	mov.w	r1, #320	; 0x140
   30b06:	4831      	ldr	r0, [pc, #196]	; (30bcc <nct_init+0x310>)
   30b08:	f013 fdfc 	bl	44704 <assert_post_action>
	LOG_DBG("client_id = %s", log_strdup(id));
   30b0c:	2304      	movs	r3, #4
   30b0e:	f04f 0600 	mov.w	r6, #0
   30b12:	4c10      	ldr	r4, [pc, #64]	; (30b54 <nct_init+0x298>)
   30b14:	f363 0607 	bfi	r6, r3, #0, #8
   30b18:	4b0d      	ldr	r3, [pc, #52]	; (30b50 <nct_init+0x294>)
   30b1a:	4815      	ldr	r0, [pc, #84]	; (30b70 <nct_init+0x2b4>)
   30b1c:	1ae4      	subs	r4, r4, r3
   30b1e:	f013 fe15 	bl	4474c <log_strdup>
   30b22:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   30b26:	f364 168f 	bfi	r6, r4, #6, #10
   30b2a:	4603      	mov	r3, r0
   30b2c:	4a2e      	ldr	r2, [pc, #184]	; (30be8 <nct_init+0x32c>)
   30b2e:	492f      	ldr	r1, [pc, #188]	; (30bec <nct_init+0x330>)
   30b30:	4630      	mov	r0, r6
   30b32:	f013 fdf8 	bl	44726 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   30b36:	4b0e      	ldr	r3, [pc, #56]	; (30b70 <nct_init+0x2b4>)
   30b38:	4a2d      	ldr	r2, [pc, #180]	; (30bf0 <nct_init+0x334>)
   30b3a:	2127      	movs	r1, #39	; 0x27
   30b3c:	4809      	ldr	r0, [pc, #36]	; (30b64 <nct_init+0x2a8>)
   30b3e:	f011 fed9 	bl	428f4 <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   30b42:	2826      	cmp	r0, #38	; 0x26
   30b44:	f43f aee7 	beq.w	30916 <nct_init+0x5a>
		return -ENOMEM;
   30b48:	f06f 050b 	mvn.w	r5, #11
   30b4c:	e6cb      	b.n	308e6 <nct_init+0x2a>
   30b4e:	bf00      	nop
   30b50:	00049788 	.word	0x00049788
   30b54:	000498a0 	.word	0x000498a0
   30b58:	0004fbeb 	.word	0x0004fbeb
   30b5c:	0004f4de 	.word	0x0004f4de
   30b60:	0004fc04 	.word	0x0004fc04
   30b64:	2002d100 	.word	0x2002d100
   30b68:	0004f99c 	.word	0x0004f99c
   30b6c:	0004fcc4 	.word	0x0004fcc4
   30b70:	2002d0b6 	.word	0x2002d0b6
   30b74:	0004fcde 	.word	0x0004fcde
   30b78:	2002d08e 	.word	0x2002d08e
   30b7c:	0004fcf5 	.word	0x0004fcf5
   30b80:	0004fd0c 	.word	0x0004fd0c
   30b84:	2002d0cc 	.word	0x2002d0cc
   30b88:	0004fd2f 	.word	0x0004fd2f
   30b8c:	0004fd46 	.word	0x0004fd46
   30b90:	2002d152 	.word	0x2002d152
   30b94:	0004fd69 	.word	0x0004fd69
   30b98:	0004fd84 	.word	0x0004fd84
   30b9c:	2002d186 	.word	0x2002d186
   30ba0:	0004fda1 	.word	0x0004fda1
   30ba4:	0004fdb6 	.word	0x0004fdb6
   30ba8:	2002d127 	.word	0x2002d127
   30bac:	0004fdd0 	.word	0x0004fdd0
   30bb0:	20024dd0 	.word	0x20024dd0
   30bb4:	20020878 	.word	0x20020878
   30bb8:	0004fde9 	.word	0x0004fde9
   30bbc:	00030299 	.word	0x00030299
   30bc0:	000301f5 	.word	0x000301f5
   30bc4:	0004fc60 	.word	0x0004fc60
   30bc8:	0004b33b 	.word	0x0004b33b
   30bcc:	0004fc1d 	.word	0x0004fc1d
   30bd0:	0004ebb3 	.word	0x0004ebb3
   30bd4:	0004fc72 	.word	0x0004fc72
   30bd8:	0004fc85 	.word	0x0004fc85
   30bdc:	00050899 	.word	0x00050899
   30be0:	0004fc96 	.word	0x0004fc96
   30be4:	0004d82a 	.word	0x0004d82a
   30be8:	0004f98a 	.word	0x0004f98a
   30bec:	0004fc9b 	.word	0x0004fc9b
   30bf0:	0004fcae 	.word	0x0004fcae

00030bf4 <nct_connect>:
{
   30bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30bf8:	b09d      	sub	sp, #116	; 0x74
	struct addrinfo hints = {
   30bfa:	2250      	movs	r2, #80	; 0x50
   30bfc:	2100      	movs	r1, #0
   30bfe:	a808      	add	r0, sp, #32
   30c00:	f017 fae2 	bl	481c8 <memset>
   30c04:	2301      	movs	r3, #1
   30c06:	aa08      	add	r2, sp, #32
   30c08:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   30c0c:	2100      	movs	r1, #0
   30c0e:	ab03      	add	r3, sp, #12
   30c10:	482f      	ldr	r0, [pc, #188]	; (30cd0 <nct_connect+0xdc>)
   30c12:	f014 f930 	bl	44e76 <zsock_getaddrinfo>
	if (err) {
   30c16:	4c2f      	ldr	r4, [pc, #188]	; (30cd4 <nct_connect+0xe0>)
   30c18:	4b2f      	ldr	r3, [pc, #188]	; (30cd8 <nct_connect+0xe4>)
   30c1a:	1ae4      	subs	r4, r4, r3
   30c1c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   30c20:	4603      	mov	r3, r0
   30c22:	b180      	cbz	r0, 30c46 <nct_connect+0x52>
		LOG_DBG("getaddrinfo failed %d", err);
   30c24:	2204      	movs	r2, #4
   30c26:	f04f 0000 	mov.w	r0, #0
   30c2a:	f362 0007 	bfi	r0, r2, #0, #8
   30c2e:	f364 108f 	bfi	r0, r4, #6, #10
   30c32:	4a2a      	ldr	r2, [pc, #168]	; (30cdc <nct_connect+0xe8>)
   30c34:	492a      	ldr	r1, [pc, #168]	; (30ce0 <nct_connect+0xec>)
   30c36:	f013 fd76 	bl	44726 <log_string_sync>
		return -ECHILD;
   30c3a:	f06f 0409 	mvn.w	r4, #9
}
   30c3e:	4620      	mov	r0, r4
   30c40:	b01d      	add	sp, #116	; 0x74
   30c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   30c46:	2718      	movs	r7, #24
	addr = result;
   30c48:	9d03      	ldr	r5, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   30c4a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 30cdc <nct_connect+0xe8>
   30c4e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 30cf0 <nct_connect+0xfc>
	while (addr != NULL) {
   30c52:	b915      	cbnz	r5, 30c5a <nct_connect+0x66>
	err = -ECHILD;
   30c54:	f06f 0409 	mvn.w	r4, #9
   30c58:	e024      	b.n	30ca4 <nct_connect+0xb0>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   30c5a:	696b      	ldr	r3, [r5, #20]
   30c5c:	2b08      	cmp	r3, #8
   30c5e:	d125      	bne.n	30cac <nct_connect+0xb8>
					->sin_addr.s_addr;
   30c60:	69ab      	ldr	r3, [r5, #24]
			broker->sin_addr.s_addr =
   30c62:	4920      	ldr	r1, [pc, #128]	; (30ce4 <nct_connect+0xf0>)
					->sin_addr.s_addr;
   30c64:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   30c66:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
			broker->sin_family = AF_INET;
   30c6a:	4b1f      	ldr	r3, [pc, #124]	; (30ce8 <nct_connect+0xf4>)
   30c6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   30c70:	2310      	movs	r3, #16
   30c72:	31a0      	adds	r1, #160	; 0xa0
   30c74:	eb0d 0203 	add.w	r2, sp, r3
   30c78:	2001      	movs	r0, #1
   30c7a:	f7f8 ff3d 	bl	29af8 <z_impl_net_addr_ntop>
			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));
   30c7e:	f04f 0500 	mov.w	r5, #0
   30c82:	2304      	movs	r3, #4
   30c84:	a804      	add	r0, sp, #16
   30c86:	f363 0507 	bfi	r5, r3, #0, #8
   30c8a:	f013 fd5f 	bl	4474c <log_strdup>
   30c8e:	f364 158f 	bfi	r5, r4, #6, #10
   30c92:	4603      	mov	r3, r0
   30c94:	4a11      	ldr	r2, [pc, #68]	; (30cdc <nct_connect+0xe8>)
   30c96:	4915      	ldr	r1, [pc, #84]	; (30cec <nct_connect+0xf8>)
   30c98:	4628      	mov	r0, r5
   30c9a:	f013 fd44 	bl	44726 <log_string_sync>
			err = nct_mqtt_connect();
   30c9e:	f7ff fd61 	bl	30764 <nct_mqtt_connect>
   30ca2:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   30ca4:	9803      	ldr	r0, [sp, #12]
   30ca6:	f014 f8e8 	bl	44e7a <zsock_freeaddrinfo>
	return err;
   30caa:	e7c8      	b.n	30c3e <nct_connect+0x4a>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   30cac:	f026 023f 	bic.w	r2, r6, #63	; 0x3f
   30cb0:	f042 0204 	orr.w	r2, r2, #4
   30cb4:	f362 0607 	bfi	r6, r2, #0, #8
   30cb8:	2208      	movs	r2, #8
   30cba:	f364 168f 	bfi	r6, r4, #6, #10
   30cbe:	9200      	str	r2, [sp, #0]
   30cc0:	9701      	str	r7, [sp, #4]
   30cc2:	4642      	mov	r2, r8
   30cc4:	4649      	mov	r1, r9
   30cc6:	4630      	mov	r0, r6
   30cc8:	f013 fd2d 	bl	44726 <log_string_sync>
		addr = addr->ai_next;
   30ccc:	682d      	ldr	r5, [r5, #0]
   30cce:	e7c0      	b.n	30c52 <nct_connect+0x5e>
   30cd0:	0004fde9 	.word	0x0004fde9
   30cd4:	000498a0 	.word	0x000498a0
   30cd8:	00049788 	.word	0x00049788
   30cdc:	0004fa14 	.word	0x0004fa14
   30ce0:	0004fb08 	.word	0x0004fb08
   30ce4:	20024dd0 	.word	0x20024dd0
   30ce8:	b3220001 	.word	0xb3220001
   30cec:	0004fb22 	.word	0x0004fb22
   30cf0:	0004fb37 	.word	0x0004fb37

00030cf4 <nct_cc_connect>:
{
   30cf4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("nct_cc_connect");
   30cf6:	2304      	movs	r3, #4
   30cf8:	f04f 0000 	mov.w	r0, #0
   30cfc:	4a0b      	ldr	r2, [pc, #44]	; (30d2c <nct_cc_connect+0x38>)
   30cfe:	f363 0007 	bfi	r0, r3, #0, #8
   30d02:	4b0b      	ldr	r3, [pc, #44]	; (30d30 <nct_cc_connect+0x3c>)
   30d04:	490b      	ldr	r1, [pc, #44]	; (30d34 <nct_cc_connect+0x40>)
   30d06:	1a9b      	subs	r3, r3, r2
   30d08:	08db      	lsrs	r3, r3, #3
   30d0a:	f363 108f 	bfi	r0, r3, #6, #10
   30d0e:	4a0a      	ldr	r2, [pc, #40]	; (30d38 <nct_cc_connect+0x44>)
   30d10:	f013 fd09 	bl	44726 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   30d14:	4b09      	ldr	r3, [pc, #36]	; (30d3c <nct_cc_connect+0x48>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   30d16:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   30d18:	9300      	str	r3, [sp, #0]
   30d1a:	4b09      	ldr	r3, [pc, #36]	; (30d40 <nct_cc_connect+0x4c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   30d1c:	4809      	ldr	r0, [pc, #36]	; (30d44 <nct_cc_connect+0x50>)
	const struct mqtt_subscription_list subscription_list = {
   30d1e:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   30d20:	f015 fbcf 	bl	464c2 <mqtt_subscribe>
}
   30d24:	b003      	add	sp, #12
   30d26:	f85d fb04 	ldr.w	pc, [sp], #4
   30d2a:	bf00      	nop
   30d2c:	00049788 	.word	0x00049788
   30d30:	000498a0 	.word	0x000498a0
   30d34:	0004fa93 	.word	0x0004fa93
   30d38:	0004fa20 	.word	0x0004fa20
   30d3c:	0004a3c4 	.word	0x0004a3c4
   30d40:	04d20003 	.word	0x04d20003
   30d44:	20024dec 	.word	0x20024dec

00030d48 <nct_cc_send>:
{
   30d48:	b570      	push	{r4, r5, r6, lr}
   30d4a:	4b34      	ldr	r3, [pc, #208]	; (30e1c <nct_cc_send+0xd4>)
   30d4c:	4c34      	ldr	r4, [pc, #208]	; (30e20 <nct_cc_send+0xd8>)
   30d4e:	b088      	sub	sp, #32
   30d50:	1ae4      	subs	r4, r4, r3
   30d52:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (cc_data == NULL) {
   30d56:	4605      	mov	r5, r0
   30d58:	b970      	cbnz	r0, 30d78 <nct_cc_send+0x30>
		LOG_ERR("cc_data == NULL");
   30d5a:	2301      	movs	r3, #1
   30d5c:	f04f 0000 	mov.w	r0, #0
   30d60:	f363 0007 	bfi	r0, r3, #0, #8
   30d64:	f364 108f 	bfi	r0, r4, #6, #10
   30d68:	492e      	ldr	r1, [pc, #184]	; (30e24 <nct_cc_send+0xdc>)
   30d6a:	f013 fcdc 	bl	44726 <log_string_sync>
		return -EINVAL;
   30d6e:	f06f 0515 	mvn.w	r5, #21
}
   30d72:	4628      	mov	r0, r5
   30d74:	b008      	add	sp, #32
   30d76:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   30d78:	7d06      	ldrb	r6, [r0, #20]
   30d7a:	2e01      	cmp	r6, #1
   30d7c:	d90d      	bls.n	30d9a <nct_cc_send+0x52>
		LOG_ERR("opcode = %d", cc_data->opcode);
   30d7e:	2301      	movs	r3, #1
   30d80:	f04f 0000 	mov.w	r0, #0
   30d84:	f363 0007 	bfi	r0, r3, #0, #8
   30d88:	f364 108f 	bfi	r0, r4, #6, #10
   30d8c:	4632      	mov	r2, r6
   30d8e:	4926      	ldr	r1, [pc, #152]	; (30e28 <nct_cc_send+0xe0>)
   30d90:	f013 fcc9 	bl	44726 <log_string_sync>
		return -ENOTSUP;
   30d94:	f06f 0585 	mvn.w	r5, #133	; 0x85
   30d98:	e7eb      	b.n	30d72 <nct_cc_send+0x2a>
	struct mqtt_publish_param publish = {
   30d9a:	2210      	movs	r2, #16
   30d9c:	2100      	movs	r1, #0
   30d9e:	eb0d 0002 	add.w	r0, sp, r2
   30da2:	f017 fa11 	bl	481c8 <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   30da6:	230c      	movs	r3, #12
   30da8:	4373      	muls	r3, r6
   30daa:	4920      	ldr	r1, [pc, #128]	; (30e2c <nct_cc_send+0xe4>)
   30dac:	18ca      	adds	r2, r1, r3
	struct mqtt_publish_param publish = {
   30dae:	58cb      	ldr	r3, [r1, r3]
   30db0:	9302      	str	r3, [sp, #8]
   30db2:	6853      	ldr	r3, [r2, #4]
   30db4:	9303      	str	r3, [sp, #12]
   30db6:	7a13      	ldrb	r3, [r2, #8]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   30db8:	682a      	ldr	r2, [r5, #0]
	struct mqtt_publish_param publish = {
   30dba:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   30dbe:	b11a      	cbz	r2, 30dc8 <nct_cc_send+0x80>
   30dc0:	686b      	ldr	r3, [r5, #4]
   30dc2:	b10b      	cbz	r3, 30dc8 <nct_cc_send+0x80>
		publish.message.payload.len = cc_data->data.len;
   30dc4:	e9cd 3205 	strd	r3, r2, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   30dc8:	692b      	ldr	r3, [r5, #16]
   30dca:	b313      	cbz	r3, 30e12 <nct_cc_send+0xca>
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   30dcc:	2104      	movs	r1, #4
   30dce:	f04f 0000 	mov.w	r0, #0
   30dd2:	f361 0007 	bfi	r0, r1, #0, #8
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   30dd6:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   30dd8:	f364 108f 	bfi	r0, r4, #6, #10
   30ddc:	e9cd 6200 	strd	r6, r2, [sp]
   30de0:	4913      	ldr	r1, [pc, #76]	; (30e30 <nct_cc_send+0xe8>)
   30de2:	4a14      	ldr	r2, [pc, #80]	; (30e34 <nct_cc_send+0xec>)
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   30de4:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   30de8:	f013 fc9d 	bl	44726 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   30dec:	a902      	add	r1, sp, #8
   30dee:	4812      	ldr	r0, [pc, #72]	; (30e38 <nct_cc_send+0xf0>)
   30df0:	f015 fad2 	bl	46398 <mqtt_publish>
	if (err) {
   30df4:	4605      	mov	r5, r0
   30df6:	2800      	cmp	r0, #0
   30df8:	d0bb      	beq.n	30d72 <nct_cc_send+0x2a>
		LOG_ERR("mqtt_publish failed %d", err);
   30dfa:	2301      	movs	r3, #1
   30dfc:	f04f 0000 	mov.w	r0, #0
   30e00:	f363 0007 	bfi	r0, r3, #0, #8
   30e04:	f364 108f 	bfi	r0, r4, #6, #10
   30e08:	462a      	mov	r2, r5
   30e0a:	490c      	ldr	r1, [pc, #48]	; (30e3c <nct_cc_send+0xf4>)
   30e0c:	f013 fc8b 	bl	44726 <log_string_sync>
   30e10:	e7af      	b.n	30d72 <nct_cc_send+0x2a>
	publish.message_id = cc_data->id ? cc_data->id : ++msg_id;
   30e12:	490b      	ldr	r1, [pc, #44]	; (30e40 <nct_cc_send+0xf8>)
   30e14:	680b      	ldr	r3, [r1, #0]
   30e16:	3301      	adds	r3, #1
   30e18:	600b      	str	r3, [r1, #0]
   30e1a:	e7d7      	b.n	30dcc <nct_cc_send+0x84>
   30e1c:	00049788 	.word	0x00049788
   30e20:	000498a0 	.word	0x000498a0
   30e24:	0004faa6 	.word	0x0004faa6
   30e28:	0004fab6 	.word	0x0004fab6
   30e2c:	0004a3f4 	.word	0x0004a3f4
   30e30:	0004fac2 	.word	0x0004fac2
   30e34:	0004fa2f 	.word	0x0004fa2f
   30e38:	20024dec 	.word	0x20024dec
   30e3c:	0004faf1 	.word	0x0004faf1
   30e40:	20024dcc 	.word	0x20024dcc

00030e44 <nct_dc_endpoint_set>:
{
   30e44:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_set");
   30e46:	2304      	movs	r3, #4
{
   30e48:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_set");
   30e4a:	f04f 0000 	mov.w	r0, #0
{
   30e4e:	460d      	mov	r5, r1
   30e50:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_set");
   30e52:	f363 0007 	bfi	r0, r3, #0, #8
   30e56:	4a14      	ldr	r2, [pc, #80]	; (30ea8 <nct_dc_endpoint_set+0x64>)
   30e58:	4b14      	ldr	r3, [pc, #80]	; (30eac <nct_dc_endpoint_set+0x68>)
   30e5a:	4915      	ldr	r1, [pc, #84]	; (30eb0 <nct_dc_endpoint_set+0x6c>)
   30e5c:	1a9b      	subs	r3, r3, r2
   30e5e:	08db      	lsrs	r3, r3, #3
   30e60:	f363 108f 	bfi	r0, r3, #6, #10
   30e64:	4a13      	ldr	r2, [pc, #76]	; (30eb4 <nct_dc_endpoint_set+0x70>)
   30e66:	f013 fc5e 	bl	44726 <log_string_sync>
	dc_endpoint_free();
   30e6a:	f7ff fab9 	bl	303e0 <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   30e6e:	6873      	ldr	r3, [r6, #4]
   30e70:	4811      	ldr	r0, [pc, #68]	; (30eb8 <nct_dc_endpoint_set+0x74>)
   30e72:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
	nct.dc_tx_endp.size = tx_endp->len;
   30e76:	6833      	ldr	r3, [r6, #0]
   30e78:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   30e7c:	686b      	ldr	r3, [r5, #4]
   30e7e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	nct.dc_rx_endp.size = rx_endp->len;
   30e82:	682b      	ldr	r3, [r5, #0]
   30e84:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (m_endp != NULL) {
   30e88:	b16c      	cbz	r4, 30ea6 <nct_dc_endpoint_set+0x62>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   30e8a:	6863      	ldr	r3, [r4, #4]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   30e8c:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   30e90:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
		nct.dc_m_endp.size = m_endp->len;
   30e94:	6823      	ldr	r3, [r4, #0]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   30e96:	4909      	ldr	r1, [pc, #36]	; (30ebc <nct_dc_endpoint_set+0x78>)
		nct.dc_m_endp.size = m_endp->len;
   30e98:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
}
   30e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   30ea0:	301c      	adds	r0, #28
   30ea2:	f001 ba95 	b.w	323d0 <nrf_cloud_fota_endpoint_set_and_report>
}
   30ea6:	bd70      	pop	{r4, r5, r6, pc}
   30ea8:	00049788 	.word	0x00049788
   30eac:	000498a0 	.word	0x000498a0
   30eb0:	0004fbc0 	.word	0x0004fbc0
   30eb4:	0004fa3b 	.word	0x0004fa3b
   30eb8:	20024dd0 	.word	0x20024dd0
   30ebc:	2002d0b6 	.word	0x2002d0b6

00030ec0 <nct_dc_endpoint_get>:
{
   30ec0:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("nct_dc_endpoint_get");
   30ec2:	2304      	movs	r3, #4
{
   30ec4:	4606      	mov	r6, r0
	LOG_DBG("nct_dc_endpoint_get");
   30ec6:	f04f 0000 	mov.w	r0, #0
{
   30eca:	460d      	mov	r5, r1
   30ecc:	4614      	mov	r4, r2
	LOG_DBG("nct_dc_endpoint_get");
   30ece:	f363 0007 	bfi	r0, r3, #0, #8
   30ed2:	4a0f      	ldr	r2, [pc, #60]	; (30f10 <nct_dc_endpoint_get+0x50>)
   30ed4:	4b0f      	ldr	r3, [pc, #60]	; (30f14 <nct_dc_endpoint_get+0x54>)
   30ed6:	4910      	ldr	r1, [pc, #64]	; (30f18 <nct_dc_endpoint_get+0x58>)
   30ed8:	1a9b      	subs	r3, r3, r2
   30eda:	08db      	lsrs	r3, r3, #3
   30edc:	f363 108f 	bfi	r0, r3, #6, #10
   30ee0:	4a0e      	ldr	r2, [pc, #56]	; (30f1c <nct_dc_endpoint_get+0x5c>)
   30ee2:	f013 fc20 	bl	44726 <log_string_sync>
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   30ee6:	4b0e      	ldr	r3, [pc, #56]	; (30f20 <nct_dc_endpoint_get+0x60>)
   30ee8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   30eec:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   30eee:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   30ef2:	6032      	str	r2, [r6, #0]
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   30ef4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   30ef8:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   30efa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   30efe:	602a      	str	r2, [r5, #0]
	if (m_endp != NULL) {
   30f00:	b12c      	cbz	r4, 30f0e <nct_dc_endpoint_get+0x4e>
		m_endp->ptr = nct.dc_m_endp.utf8;
   30f02:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		m_endp->len = nct.dc_m_endp.size;
   30f06:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		m_endp->ptr = nct.dc_m_endp.utf8;
   30f0a:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   30f0c:	6023      	str	r3, [r4, #0]
}
   30f0e:	bd70      	pop	{r4, r5, r6, pc}
   30f10:	00049788 	.word	0x00049788
   30f14:	000498a0 	.word	0x000498a0
   30f18:	0004fba8 	.word	0x0004fba8
   30f1c:	0004fa4f 	.word	0x0004fa4f
   30f20:	20024dd0 	.word	0x20024dd0

00030f24 <nct_dc_connect>:
{
   30f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("nct_dc_connect");
   30f26:	2304      	movs	r3, #4
   30f28:	f04f 0000 	mov.w	r0, #0
   30f2c:	4a10      	ldr	r2, [pc, #64]	; (30f70 <nct_dc_connect+0x4c>)
   30f2e:	f363 0007 	bfi	r0, r3, #0, #8
   30f32:	4b10      	ldr	r3, [pc, #64]	; (30f74 <nct_dc_connect+0x50>)
   30f34:	4910      	ldr	r1, [pc, #64]	; (30f78 <nct_dc_connect+0x54>)
   30f36:	1a9b      	subs	r3, r3, r2
   30f38:	08db      	lsrs	r3, r3, #3
   30f3a:	f363 108f 	bfi	r0, r3, #6, #10
   30f3e:	4a0f      	ldr	r2, [pc, #60]	; (30f7c <nct_dc_connect+0x58>)
   30f40:	f013 fbf1 	bl	44726 <log_string_sync>
			.utf8 = nct.dc_rx_endp.utf8,
   30f44:	480e      	ldr	r0, [pc, #56]	; (30f80 <nct_dc_connect+0x5c>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   30f46:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   30f48:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	return mqtt_subscribe(&nct.client, &subscription_list);
   30f4c:	301c      	adds	r0, #28
	struct mqtt_topic subscribe_topic = {
   30f4e:	9303      	str	r3, [sp, #12]
   30f50:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   30f54:	9304      	str	r3, [sp, #16]
   30f56:	2301      	movs	r3, #1
   30f58:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   30f5c:	ab03      	add	r3, sp, #12
   30f5e:	9301      	str	r3, [sp, #4]
   30f60:	4b08      	ldr	r3, [pc, #32]	; (30f84 <nct_dc_connect+0x60>)
   30f62:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   30f64:	f015 faad 	bl	464c2 <mqtt_subscribe>
}
   30f68:	b007      	add	sp, #28
   30f6a:	f85d fb04 	ldr.w	pc, [sp], #4
   30f6e:	bf00      	nop
   30f70:	00049788 	.word	0x00049788
   30f74:	000498a0 	.word	0x000498a0
   30f78:	0004fb5e 	.word	0x0004fb5e
   30f7c:	0004fa63 	.word	0x0004fa63
   30f80:	20024dd0 	.word	0x20024dd0
   30f84:	223d0001 	.word	0x223d0001

00030f88 <nct_dc_disconnect>:
{
   30f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("nct_dc_disconnect");
   30f8a:	2304      	movs	r3, #4
   30f8c:	f04f 0000 	mov.w	r0, #0
   30f90:	4c15      	ldr	r4, [pc, #84]	; (30fe8 <nct_dc_disconnect+0x60>)
   30f92:	f363 0007 	bfi	r0, r3, #0, #8
   30f96:	4b15      	ldr	r3, [pc, #84]	; (30fec <nct_dc_disconnect+0x64>)
   30f98:	4a15      	ldr	r2, [pc, #84]	; (30ff0 <nct_dc_disconnect+0x68>)
   30f9a:	1ae4      	subs	r4, r4, r3
   30f9c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   30fa0:	f364 108f 	bfi	r0, r4, #6, #10
   30fa4:	4913      	ldr	r1, [pc, #76]	; (30ff4 <nct_dc_disconnect+0x6c>)
   30fa6:	f013 fbbe 	bl	44726 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   30faa:	4813      	ldr	r0, [pc, #76]	; (30ff8 <nct_dc_disconnect+0x70>)
   30fac:	4b13      	ldr	r3, [pc, #76]	; (30ffc <nct_dc_disconnect+0x74>)
   30fae:	9000      	str	r0, [sp, #0]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   30fb0:	4669      	mov	r1, sp
   30fb2:	38a0      	subs	r0, #160	; 0xa0
	const struct mqtt_subscription_list subscription_list = {
   30fb4:	9301      	str	r3, [sp, #4]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   30fb6:	f015 faab 	bl	46510 <mqtt_unsubscribe>
   30fba:	4605      	mov	r5, r0
	int err = nrf_cloud_fota_unsubscribe();
   30fbc:	f001 fabe 	bl	3253c <nrf_cloud_fota_unsubscribe>
	if (err) {
   30fc0:	4606      	mov	r6, r0
   30fc2:	b168      	cbz	r0, 30fe0 <nct_dc_disconnect+0x58>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   30fc4:	2301      	movs	r3, #1
   30fc6:	f04f 0000 	mov.w	r0, #0
   30fca:	f363 0007 	bfi	r0, r3, #0, #8
   30fce:	f364 108f 	bfi	r0, r4, #6, #10
   30fd2:	4632      	mov	r2, r6
   30fd4:	490a      	ldr	r1, [pc, #40]	; (31000 <nct_dc_disconnect+0x78>)
   30fd6:	f013 fba6 	bl	44726 <log_string_sync>
		if (ret == 0) {
   30fda:	2d00      	cmp	r5, #0
   30fdc:	bf08      	it	eq
   30fde:	4635      	moveq	r5, r6
}
   30fe0:	4628      	mov	r0, r5
   30fe2:	b002      	add	sp, #8
   30fe4:	bd70      	pop	{r4, r5, r6, pc}
   30fe6:	bf00      	nop
   30fe8:	000498a0 	.word	0x000498a0
   30fec:	00049788 	.word	0x00049788
   30ff0:	0004fa72 	.word	0x0004fa72
   30ff4:	0004fb71 	.word	0x0004fb71
   30ff8:	20024e8c 	.word	0x20024e8c
   30ffc:	223d0001 	.word	0x223d0001
   31000:	0004fb87 	.word	0x0004fb87

00031004 <nct_disconnect>:
{
   31004:	b508      	push	{r3, lr}
	LOG_DBG("nct_disconnect");
   31006:	f04f 0000 	mov.w	r0, #0
   3100a:	2304      	movs	r3, #4
   3100c:	4a09      	ldr	r2, [pc, #36]	; (31034 <nct_disconnect+0x30>)
   3100e:	f363 0007 	bfi	r0, r3, #0, #8
   31012:	4b09      	ldr	r3, [pc, #36]	; (31038 <nct_disconnect+0x34>)
   31014:	4909      	ldr	r1, [pc, #36]	; (3103c <nct_disconnect+0x38>)
   31016:	1a9b      	subs	r3, r3, r2
   31018:	08db      	lsrs	r3, r3, #3
   3101a:	f363 108f 	bfi	r0, r3, #6, #10
   3101e:	4a08      	ldr	r2, [pc, #32]	; (31040 <nct_disconnect+0x3c>)
   31020:	f013 fb81 	bl	44726 <log_string_sync>
	dc_endpoint_free();
   31024:	f7ff f9dc 	bl	303e0 <dc_endpoint_free>
}
   31028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   3102c:	4805      	ldr	r0, [pc, #20]	; (31044 <nct_disconnect+0x40>)
   3102e:	f015 ba1f 	b.w	46470 <mqtt_disconnect>
   31032:	bf00      	nop
   31034:	00049788 	.word	0x00049788
   31038:	000498a0 	.word	0x000498a0
   3103c:	0004fbd8 	.word	0x0004fbd8
   31040:	0004fa84 	.word	0x0004fa84
   31044:	20024dec 	.word	0x20024dec

00031048 <nct_process>:
{
   31048:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   3104a:	4c04      	ldr	r4, [pc, #16]	; (3105c <nct_process+0x14>)
   3104c:	4620      	mov	r0, r4
   3104e:	f015 faef 	bl	46630 <mqtt_input>
	mqtt_live(&nct.client);
   31052:	4620      	mov	r0, r4
}
   31054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   31058:	f015 baac 	b.w	465b4 <mqtt_live>
   3105c:	20024dec 	.word	0x20024dec

00031060 <nct_keepalive_time_left>:
	return (int)mqtt_keepalive_time_left(&nct.client);
   31060:	4801      	ldr	r0, [pc, #4]	; (31068 <nct_keepalive_time_left+0x8>)
   31062:	f015 bace 	b.w	46602 <mqtt_keepalive_time_left>
   31066:	bf00      	nop
   31068:	20024dec 	.word	0x20024dec

0003106c <nct_socket_get>:
}
   3106c:	4b01      	ldr	r3, [pc, #4]	; (31074 <nct_socket_get+0x8>)
   3106e:	6c58      	ldr	r0, [r3, #68]	; 0x44
   31070:	4770      	bx	lr
   31072:	bf00      	nop
   31074:	20024dd0 	.word	0x20024dd0

00031078 <send_to_modem>:
	return type_lookup_socket2gps[type];
}

static int send_to_modem(void *data, size_t data_len,
			 nrf_gnss_agps_data_type_t type)
{
   31078:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	/* At this point, GPS driver or app-provided socket is assumed. */
	if (gps_dev) {
   3107a:	4b26      	ldr	r3, [pc, #152]	; (31114 <send_to_modem+0x9c>)
{
   3107c:	4605      	mov	r5, r0
	if (gps_dev) {
   3107e:	681c      	ldr	r4, [r3, #0]
{
   31080:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (gps_dev) {
   31084:	b18c      	cbz	r4, 310aa <send_to_modem+0x32>
	return type_lookup_socket2gps[type];
   31086:	b293      	uxth	r3, r2
   31088:	4a23      	ldr	r2, [pc, #140]	; (31118 <send_to_modem+0xa0>)
   3108a:	5cd0      	ldrb	r0, [r2, r3]
				 enum gps_agps_type type,
				 void *data, size_t data_len)
{
	struct gps_driver_api *api;

	if ((data == NULL) || (dev == NULL)) {
   3108c:	2d00      	cmp	r5, #0
   3108e:	d03a      	beq.n	31106 <send_to_modem+0x8e>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->agps_write == NULL) {
   31090:	68a3      	ldr	r3, [r4, #8]
   31092:	689e      	ldr	r6, [r3, #8]
   31094:	2e00      	cmp	r6, #0
   31096:	d039      	beq.n	3110c <send_to_modem+0x94>
		return -ENOTSUP;
	}

	return api->agps_write(dev, type, data, data_len);
   31098:	460b      	mov	r3, r1
   3109a:	462a      	mov	r2, r5
   3109c:	4601      	mov	r1, r0
   3109e:	4620      	mov	r0, r4
   310a0:	47b0      	blx	r6
   310a2:	4604      	mov	r4, r0
	if (agps_print_enabled) {
		agps_print(type, data);
	}

	return err;
}
   310a4:	4620      	mov	r0, r4
   310a6:	b004      	add	sp, #16
   310a8:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_sendto(fd, data, data_len, 0, &type, sizeof(type));
   310aa:	2302      	movs	r3, #2
   310ac:	460a      	mov	r2, r1
   310ae:	9301      	str	r3, [sp, #4]
   310b0:	4601      	mov	r1, r0
   310b2:	f10d 030e 	add.w	r3, sp, #14
   310b6:	4819      	ldr	r0, [pc, #100]	; (3111c <send_to_modem+0xa4>)
   310b8:	9300      	str	r3, [sp, #0]
   310ba:	6800      	ldr	r0, [r0, #0]
   310bc:	4623      	mov	r3, r4
   310be:	f00b f8eb 	bl	3c298 <nrf_sendto>
	if (err < 0) {
   310c2:	2800      	cmp	r0, #0
   310c4:	da15      	bge.n	310f2 <send_to_modem+0x7a>
		LOG_ERR("Failed to send AGPS data to modem, errno: %d", errno);
   310c6:	2301      	movs	r3, #1
   310c8:	f04f 0400 	mov.w	r4, #0
   310cc:	4a14      	ldr	r2, [pc, #80]	; (31120 <send_to_modem+0xa8>)
   310ce:	f363 0407 	bfi	r4, r3, #0, #8
   310d2:	4b14      	ldr	r3, [pc, #80]	; (31124 <send_to_modem+0xac>)
   310d4:	1a9b      	subs	r3, r3, r2
   310d6:	08db      	lsrs	r3, r3, #3
   310d8:	f363 148f 	bfi	r4, r3, #6, #10
   310dc:	f014 fc82 	bl	459e4 <__errno>
   310e0:	4911      	ldr	r1, [pc, #68]	; (31128 <send_to_modem+0xb0>)
   310e2:	6802      	ldr	r2, [r0, #0]
   310e4:	4620      	mov	r0, r4
   310e6:	f013 fb1e 	bl	44726 <log_string_sync>
		err = -errno;
   310ea:	f014 fc7b 	bl	459e4 <__errno>
   310ee:	6804      	ldr	r4, [r0, #0]
   310f0:	4264      	negs	r4, r4
	if (agps_print_enabled) {
   310f2:	4b0e      	ldr	r3, [pc, #56]	; (3112c <send_to_modem+0xb4>)
   310f4:	781b      	ldrb	r3, [r3, #0]
   310f6:	2b00      	cmp	r3, #0
   310f8:	d0d4      	beq.n	310a4 <send_to_modem+0x2c>
		agps_print(type, data);
   310fa:	4629      	mov	r1, r5
   310fc:	f89d 000e 	ldrb.w	r0, [sp, #14]
   31100:	f000 fb5e 	bl	317c0 <agps_print>
   31104:	e7ce      	b.n	310a4 <send_to_modem+0x2c>
		return -EINVAL;
   31106:	f06f 0415 	mvn.w	r4, #21
   3110a:	e7cb      	b.n	310a4 <send_to_modem+0x2c>
		return -ENOTSUP;
   3110c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   31110:	e7c8      	b.n	310a4 <send_to_modem+0x2c>
   31112:	bf00      	nop
   31114:	200258a8 	.word	0x200258a8
   31118:	00050418 	.word	0x00050418
   3111c:	2002087c 	.word	0x2002087c
   31120:	00049788 	.word	0x00049788
   31124:	00049880 	.word	0x00049880
   31128:	000503dc 	.word	0x000503dc
   3112c:	2002d1b4 	.word	0x2002d1b4

00031130 <nrf_cloud_agps_request>:
{
   31130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31134:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
   31138:	ad05      	add	r5, sp, #20
   3113a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	struct modem_param_info modem_info = {0};
   3113e:	f640 02e8 	movw	r2, #2280	; 0x8e8
   31142:	2100      	movs	r1, #0
   31144:	a85c      	add	r0, sp, #368	; 0x170
   31146:	f017 f83f 	bl	481c8 <memset>
	struct nct_dc_data msg = {
   3114a:	2214      	movs	r2, #20
   3114c:	2100      	movs	r1, #0
   3114e:	a810      	add	r0, sp, #64	; 0x40
   31150:	f017 f83a 	bl	481c8 <memset>
	if (request.utc) {
   31154:	7a2b      	ldrb	r3, [r5, #8]
	if (request.sv_mask_ephe) {
   31156:	682a      	ldr	r2, [r5, #0]
	if (request.utc) {
   31158:	f013 0401 	ands.w	r4, r3, #1
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   3115c:	bf18      	it	ne
   3115e:	2401      	movne	r4, #1
	struct nct_dc_data msg = {
   31160:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   31164:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   31168:	bf18      	it	ne
   3116a:	f88d 4020 	strbne.w	r4, [sp, #32]
	if (request.sv_mask_ephe) {
   3116e:	b11a      	cbz	r2, 31178 <nrf_cloud_agps_request+0x48>
		types[type_count] = GPS_AGPS_EPHEMERIDES;
   31170:	2102      	movs	r1, #2
   31172:	aa08      	add	r2, sp, #32
   31174:	5511      	strb	r1, [r2, r4]
		type_count += 1;
   31176:	3401      	adds	r4, #1
	if (request.sv_mask_alm) {
   31178:	686a      	ldr	r2, [r5, #4]
   3117a:	b11a      	cbz	r2, 31184 <nrf_cloud_agps_request+0x54>
		types[type_count] = GPS_AGPS_ALMANAC;
   3117c:	2103      	movs	r1, #3
   3117e:	aa08      	add	r2, sp, #32
   31180:	5511      	strb	r1, [r2, r4]
		type_count += 1;
   31182:	3401      	adds	r4, #1
	if (request.klobuchar) {
   31184:	079d      	lsls	r5, r3, #30
		types[type_count] = GPS_AGPS_KLOBUCHAR_CORRECTION;
   31186:	bf41      	itttt	mi
   31188:	2104      	movmi	r1, #4
   3118a:	aa08      	addmi	r2, sp, #32
   3118c:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   3118e:	3401      	addmi	r4, #1
	if (request.nequick) {
   31190:	0758      	lsls	r0, r3, #29
		types[type_count] = GPS_AGPS_NEQUICK_CORRECTION;
   31192:	bf41      	itttt	mi
   31194:	2105      	movmi	r1, #5
   31196:	aa08      	addmi	r2, sp, #32
   31198:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   3119a:	3401      	addmi	r4, #1
	if (request.system_time_tow) {
   3119c:	0719      	lsls	r1, r3, #28
		types[type_count] = GPS_AGPS_GPS_SYSTEM_CLOCK_AND_TOWS;
   3119e:	bf41      	itttt	mi
   311a0:	2107      	movmi	r1, #7
   311a2:	aa08      	addmi	r2, sp, #32
   311a4:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   311a6:	3401      	addmi	r4, #1
	if (request.position) {
   311a8:	06da      	lsls	r2, r3, #27
		types[type_count] = GPS_AGPS_LOCATION;
   311aa:	bf41      	itttt	mi
   311ac:	2108      	movmi	r1, #8
   311ae:	aa08      	addmi	r2, sp, #32
   311b0:	5511      	strbmi	r1, [r2, r4]
		type_count += 1;
   311b2:	3401      	addmi	r4, #1
	if (request.integrity) {
   311b4:	069b      	lsls	r3, r3, #26
   311b6:	d516      	bpl.n	311e6 <nrf_cloud_agps_request+0xb6>
		types[type_count] = GPS_AGPS_INTEGRITY;
   311b8:	2209      	movs	r2, #9
   311ba:	ab08      	add	r3, sp, #32
   311bc:	551a      	strb	r2, [r3, r4]
		type_count += 1;
   311be:	3401      	adds	r4, #1
	err = modem_info_init();
   311c0:	f7fd f882 	bl	2e2c8 <modem_info_init>
	if (err) {
   311c4:	4605      	mov	r5, r0
   311c6:	b320      	cbz	r0, 31212 <nrf_cloud_agps_request+0xe2>
		LOG_ERR("Could not initialize modem info module");
   311c8:	2301      	movs	r3, #1
   311ca:	f04f 0000 	mov.w	r0, #0
   311ce:	4a59      	ldr	r2, [pc, #356]	; (31334 <nrf_cloud_agps_request+0x204>)
   311d0:	f363 0007 	bfi	r0, r3, #0, #8
   311d4:	4b58      	ldr	r3, [pc, #352]	; (31338 <nrf_cloud_agps_request+0x208>)
   311d6:	4959      	ldr	r1, [pc, #356]	; (3133c <nrf_cloud_agps_request+0x20c>)
   311d8:	1a9b      	subs	r3, r3, r2
   311da:	08db      	lsrs	r3, r3, #3
   311dc:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Could not initialize modem info parameters");
   311e0:	f013 faa1 	bl	44726 <log_string_sync>
		return err;
   311e4:	e010      	b.n	31208 <nrf_cloud_agps_request+0xd8>
	if (type_count == 0) {
   311e6:	2c00      	cmp	r4, #0
   311e8:	d1ea      	bne.n	311c0 <nrf_cloud_agps_request+0x90>
		LOG_INF("No A-GPS data types requested");
   311ea:	2303      	movs	r3, #3
   311ec:	f04f 0000 	mov.w	r0, #0
   311f0:	4a50      	ldr	r2, [pc, #320]	; (31334 <nrf_cloud_agps_request+0x204>)
   311f2:	f363 0007 	bfi	r0, r3, #0, #8
   311f6:	4b50      	ldr	r3, [pc, #320]	; (31338 <nrf_cloud_agps_request+0x208>)
   311f8:	4951      	ldr	r1, [pc, #324]	; (31340 <nrf_cloud_agps_request+0x210>)
   311fa:	1a9b      	subs	r3, r3, r2
   311fc:	08db      	lsrs	r3, r3, #3
   311fe:	f363 108f 	bfi	r0, r3, #6, #10
   31202:	f013 fa90 	bl	44726 <log_string_sync>
		return 0;
   31206:	4625      	mov	r5, r4
}
   31208:	4628      	mov	r0, r5
   3120a:	f60d 2d58 	addw	sp, sp, #2648	; 0xa58
   3120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = modem_info_params_init(&modem_info);
   31212:	a85c      	add	r0, sp, #368	; 0x170
   31214:	f7fd f8a4 	bl	2e360 <modem_info_params_init>
	if (err) {
   31218:	4605      	mov	r5, r0
   3121a:	b160      	cbz	r0, 31236 <nrf_cloud_agps_request+0x106>
		LOG_ERR("Could not initialize modem info parameters");
   3121c:	2301      	movs	r3, #1
   3121e:	f04f 0000 	mov.w	r0, #0
   31222:	4a44      	ldr	r2, [pc, #272]	; (31334 <nrf_cloud_agps_request+0x204>)
   31224:	f363 0007 	bfi	r0, r3, #0, #8
   31228:	4b43      	ldr	r3, [pc, #268]	; (31338 <nrf_cloud_agps_request+0x208>)
   3122a:	4946      	ldr	r1, [pc, #280]	; (31344 <nrf_cloud_agps_request+0x214>)
   3122c:	1a9b      	subs	r3, r3, r2
   3122e:	08db      	lsrs	r3, r3, #3
   31230:	f363 108f 	bfi	r0, r3, #6, #10
   31234:	e7d4      	b.n	311e0 <nrf_cloud_agps_request+0xb0>
	err = modem_info_params_get(&modem_info);
   31236:	a85c      	add	r0, sp, #368	; 0x170
   31238:	f7fd f8e4 	bl	2e404 <modem_info_params_get>
	if (err) {
   3123c:	4605      	mov	r5, r0
   3123e:	b160      	cbz	r0, 3125a <nrf_cloud_agps_request+0x12a>
		LOG_ERR("Could not obtain cell information");
   31240:	2301      	movs	r3, #1
   31242:	f04f 0000 	mov.w	r0, #0
   31246:	4a3b      	ldr	r2, [pc, #236]	; (31334 <nrf_cloud_agps_request+0x204>)
   31248:	f363 0007 	bfi	r0, r3, #0, #8
   3124c:	4b3a      	ldr	r3, [pc, #232]	; (31338 <nrf_cloud_agps_request+0x208>)
   3124e:	493e      	ldr	r1, [pc, #248]	; (31348 <nrf_cloud_agps_request+0x218>)
   31250:	1a9b      	subs	r3, r3, r2
   31252:	08db      	lsrs	r3, r3, #3
   31254:	f363 108f 	bfi	r0, r3, #6, #10
   31258:	e7c2      	b.n	311e0 <nrf_cloud_agps_request+0xb0>
	size_t len = 0;
   3125a:	4606      	mov	r6, r0
	for (size_t i = 0; i < type_count; i++) {
   3125c:	4607      	mov	r7, r0
		err = snprintk(&type_array[len], type_array_len,
   3125e:	f8df a100 	ldr.w	sl, [pc, #256]	; 31360 <nrf_cloud_agps_request+0x230>
   31262:	f10d 0920 	add.w	r9, sp, #32
   31266:	a80b      	add	r0, sp, #44	; 0x2c
   31268:	f819 3b01 	ldrb.w	r3, [r9], #1
   3126c:	4652      	mov	r2, sl
   3126e:	2114      	movs	r1, #20
   31270:	4430      	add	r0, r6
   31272:	f013 f83a 	bl	442ea <snprintk>
		if (err < 0) {
   31276:	1e05      	subs	r5, r0, #0
   31278:	db10      	blt.n	3129c <nrf_cloud_agps_request+0x16c>
	for (size_t i = 0; i < type_count; i++) {
   3127a:	3701      	adds	r7, #1
   3127c:	42a7      	cmp	r7, r4
		len += err;
   3127e:	442e      	add	r6, r5
	for (size_t i = 0; i < type_count; i++) {
   31280:	d3f1      	bcc.n	31266 <nrf_cloud_agps_request+0x136>
	type_array[len - 1] = '\0';
   31282:	2200      	movs	r2, #0
   31284:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
	err = snprintk(types_array, sizeof(types_array),
   31288:	ac15      	add	r4, sp, #84	; 0x54
	type_array[len - 1] = '\0';
   3128a:	559a      	strb	r2, [r3, r6]
	err = snprintk(types_array, sizeof(types_array),
   3128c:	211e      	movs	r1, #30
   3128e:	ab0b      	add	r3, sp, #44	; 0x2c
   31290:	4a2e      	ldr	r2, [pc, #184]	; (3134c <nrf_cloud_agps_request+0x21c>)
   31292:	4620      	mov	r0, r4
   31294:	f013 f829 	bl	442ea <snprintk>
	if (err < 0) {
   31298:	1e05      	subs	r5, r0, #0
   3129a:	da0f      	bge.n	312bc <nrf_cloud_agps_request+0x18c>
		LOG_ERR("Error when creating type array: %d", err);
   3129c:	2301      	movs	r3, #1
   3129e:	f04f 0000 	mov.w	r0, #0
   312a2:	4a24      	ldr	r2, [pc, #144]	; (31334 <nrf_cloud_agps_request+0x204>)
   312a4:	f363 0007 	bfi	r0, r3, #0, #8
   312a8:	4b23      	ldr	r3, [pc, #140]	; (31338 <nrf_cloud_agps_request+0x208>)
   312aa:	4929      	ldr	r1, [pc, #164]	; (31350 <nrf_cloud_agps_request+0x220>)
   312ac:	1a9b      	subs	r3, r3, r2
   312ae:	462a      	mov	r2, r5
   312b0:	08db      	lsrs	r3, r3, #3
   312b2:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   312b6:	f013 fa36 	bl	44726 <log_string_sync>
		return err;
   312ba:	e7a5      	b.n	31208 <nrf_cloud_agps_request+0xd8>
		(uint32_t)modem_info.network.cellid_dec,
   312bc:	f50d 63f2 	add.w	r3, sp, #1936	; 0x790
	len = snprintk(request_buf, sizeof(request_buf),
   312c0:	9403      	str	r4, [sp, #12]
   312c2:	e9d3 0100 	ldrd	r0, r1, [r3]
   312c6:	f7eb fd39 	bl	1cd3c <__aeabi_d2uiz>
   312ca:	f8bd 3250 	ldrh.w	r3, [sp, #592]	; 0x250
   312ce:	f8bd 5330 	ldrh.w	r5, [sp, #816]	; 0x330
   312d2:	9301      	str	r3, [sp, #4]
   312d4:	f8bd 33a0 	ldrh.w	r3, [sp, #928]	; 0x3a0
   312d8:	9002      	str	r0, [sp, #8]
   312da:	9300      	str	r3, [sp, #0]
   312dc:	4a1d      	ldr	r2, [pc, #116]	; (31354 <nrf_cloud_agps_request+0x224>)
   312de:	462b      	mov	r3, r5
   312e0:	21fa      	movs	r1, #250	; 0xfa
   312e2:	4640      	mov	r0, r8
   312e4:	f013 f801 	bl	442ea <snprintk>
	if (len < 0) {
   312e8:	1e05      	subs	r5, r0, #0
   312ea:	da0d      	bge.n	31308 <nrf_cloud_agps_request+0x1d8>
		LOG_ERR("Failed to create A-GPS request, error: %d", len);
   312ec:	2301      	movs	r3, #1
   312ee:	f04f 0000 	mov.w	r0, #0
   312f2:	4a10      	ldr	r2, [pc, #64]	; (31334 <nrf_cloud_agps_request+0x204>)
   312f4:	f363 0007 	bfi	r0, r3, #0, #8
   312f8:	4b0f      	ldr	r3, [pc, #60]	; (31338 <nrf_cloud_agps_request+0x208>)
   312fa:	4917      	ldr	r1, [pc, #92]	; (31358 <nrf_cloud_agps_request+0x228>)
   312fc:	1a9b      	subs	r3, r3, r2
   312fe:	08db      	lsrs	r3, r3, #3
   31300:	f363 108f 	bfi	r0, r3, #6, #10
   31304:	462a      	mov	r2, r5
   31306:	e7d6      	b.n	312b6 <nrf_cloud_agps_request+0x186>
	err = nct_dc_send(&msg);
   31308:	a810      	add	r0, sp, #64	; 0x40
	msg.data.len = len;
   3130a:	9510      	str	r5, [sp, #64]	; 0x40
	err = nct_dc_send(&msg);
   3130c:	f016 fc32 	bl	47b74 <nct_dc_send>
	if (err) {
   31310:	4605      	mov	r5, r0
   31312:	2800      	cmp	r0, #0
   31314:	f43f af78 	beq.w	31208 <nrf_cloud_agps_request+0xd8>
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   31318:	2301      	movs	r3, #1
   3131a:	f04f 0000 	mov.w	r0, #0
   3131e:	4a05      	ldr	r2, [pc, #20]	; (31334 <nrf_cloud_agps_request+0x204>)
   31320:	f363 0007 	bfi	r0, r3, #0, #8
   31324:	4b04      	ldr	r3, [pc, #16]	; (31338 <nrf_cloud_agps_request+0x208>)
   31326:	490d      	ldr	r1, [pc, #52]	; (3135c <nrf_cloud_agps_request+0x22c>)
   31328:	1a9b      	subs	r3, r3, r2
   3132a:	08db      	lsrs	r3, r3, #3
   3132c:	f363 108f 	bfi	r0, r3, #6, #10
   31330:	462a      	mov	r2, r5
   31332:	e7c0      	b.n	312b6 <nrf_cloud_agps_request+0x186>
   31334:	00049788 	.word	0x00049788
   31338:	00049880 	.word	0x00049880
   3133c:	00050281 	.word	0x00050281
   31340:	00050263 	.word	0x00050263
   31344:	000502a8 	.word	0x000502a8
   31348:	000502d3 	.word	0x000502d3
   3134c:	000502f9 	.word	0x000502f9
   31350:	00050307 	.word	0x00050307
   31354:	0005032a 	.word	0x0005032a
   31358:	0005038a 	.word	0x0005038a
   3135c:	000503b4 	.word	0x000503b4
   31360:	000502f5 	.word	0x000502f5

00031364 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len, const int *socket)
{
   31364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nrf_cloud_apgs_element element = {};
	struct nrf_cloud_agps_system_time sys_time;
	size_t parsed_len = 0;
	uint8_t version;

	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   31368:	7804      	ldrb	r4, [r0, #0]
{
   3136a:	b0cb      	sub	sp, #300	; 0x12c
	parsed_len += NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_SIZE;

	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   3136c:	2c01      	cmp	r4, #1
{
   3136e:	4607      	mov	r7, r0
   31370:	468a      	mov	sl, r1
   31372:	4690      	mov	r8, r2
	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   31374:	d00f      	beq.n	31396 <nrf_cloud_agps_process+0x32>
   31376:	f240 2326 	movw	r3, #550	; 0x226
   3137a:	4ab5      	ldr	r2, [pc, #724]	; (31650 <nrf_cloud_agps_process+0x2ec>)
   3137c:	49b5      	ldr	r1, [pc, #724]	; (31654 <nrf_cloud_agps_process+0x2f0>)
   3137e:	48b6      	ldr	r0, [pc, #728]	; (31658 <nrf_cloud_agps_process+0x2f4>)
   31380:	f012 ffa6 	bl	442d0 <printk>
   31384:	4621      	mov	r1, r4
   31386:	48b5      	ldr	r0, [pc, #724]	; (3165c <nrf_cloud_agps_process+0x2f8>)
   31388:	f012 ffa2 	bl	442d0 <printk>
   3138c:	f240 2126 	movw	r1, #550	; 0x226
   31390:	48af      	ldr	r0, [pc, #700]	; (31650 <nrf_cloud_agps_process+0x2ec>)
   31392:	f013 f9b7 	bl	44704 <assert_post_action>
		 "Cannot parse schema version: %d", version);

	LOG_DBG("Receievd AGPS data. Schema version: %d, length: %d",
		version, buf_len);

	if (socket) {
   31396:	4cb2      	ldr	r4, [pc, #712]	; (31660 <nrf_cloud_agps_process+0x2fc>)
   31398:	4bb2      	ldr	r3, [pc, #712]	; (31664 <nrf_cloud_agps_process+0x300>)
   3139a:	4db3      	ldr	r5, [pc, #716]	; (31668 <nrf_cloud_agps_process+0x304>)
   3139c:	1ae4      	subs	r4, r4, r3
   3139e:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   313a2:	f1b8 0f00 	cmp.w	r8, #0
   313a6:	d010      	beq.n	313ca <nrf_cloud_agps_process+0x66>
		LOG_DBG("Using user-provided socket, fd %d", fd);

		gps_dev = NULL;
   313a8:	2300      	movs	r3, #0
		fd = *socket;
   313aa:	f8d8 2000 	ldr.w	r2, [r8]
		gps_dev = NULL;
   313ae:	602b      	str	r3, [r5, #0]
		fd = *socket;
   313b0:	4bae      	ldr	r3, [pc, #696]	; (3166c <nrf_cloud_agps_process+0x308>)
   313b2:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   313b4:	2501      	movs	r5, #1
	if (elements_left_to_process == 0) {
   313b6:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 3167c <nrf_cloud_agps_process+0x318>
   313ba:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 31680 <nrf_cloud_agps_process+0x31c>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   313be:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 31684 <nrf_cloud_agps_process+0x320>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
			return -ENODEV;
		}
	}

	while (parsed_len < buf_len) {
   313c2:	4555      	cmp	r5, sl
   313c4:	d318      	bcc.n	313f8 <nrf_cloud_agps_process+0x94>
			LOG_ERR("Failed to send data to modem, error: %d", err);
			return err;
		}
	}

	return 0;
   313c6:	2300      	movs	r3, #0
   313c8:	e012      	b.n	313f0 <nrf_cloud_agps_process+0x8c>
	} else if (gps_dev == NULL) {
   313ca:	682b      	ldr	r3, [r5, #0]
   313cc:	2b00      	cmp	r3, #0
   313ce:	d1f1      	bne.n	313b4 <nrf_cloud_agps_process+0x50>
   313d0:	48a7      	ldr	r0, [pc, #668]	; (31670 <nrf_cloud_agps_process+0x30c>)
   313d2:	f00d f9b5 	bl	3e740 <z_impl_device_get_binding>
		gps_dev = device_get_binding("NRF9160_GPS");
   313d6:	6028      	str	r0, [r5, #0]
		if (gps_dev == NULL) {
   313d8:	2800      	cmp	r0, #0
   313da:	d1eb      	bne.n	313b4 <nrf_cloud_agps_process+0x50>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
   313dc:	2301      	movs	r3, #1
   313de:	f363 0007 	bfi	r0, r3, #0, #8
   313e2:	f364 108f 	bfi	r0, r4, #6, #10
   313e6:	49a3      	ldr	r1, [pc, #652]	; (31674 <nrf_cloud_agps_process+0x310>)
   313e8:	f013 f99d 	bl	44726 <log_string_sync>
			return -ENODEV;
   313ec:	f06f 0312 	mvn.w	r3, #18
}
   313f0:	4618      	mov	r0, r3
   313f2:	b04b      	add	sp, #300	; 0x12c
   313f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (elements_left_to_process == 0) {
   313f8:	f8b8 1000 	ldrh.w	r1, [r8]
			get_next_agps_element(&element, &buf[parsed_len]);
   313fc:	197b      	adds	r3, r7, r5
	if (elements_left_to_process == 0) {
   313fe:	bb09      	cbnz	r1, 31444 <nrf_cloud_agps_process+0xe0>
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   31400:	f8b3 1001 	ldrh.w	r1, [r3, #1]
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   31404:	5d7a      	ldrb	r2, [r7, r5]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   31406:	3901      	subs	r1, #1
		elements_left_to_process =
   31408:	f8a8 1000 	strh.w	r1, [r8]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   3140c:	2103      	movs	r1, #3
		element_type = element->type;
   3140e:	f889 2000 	strb.w	r2, [r9]
	switch (element->type) {
   31412:	1e50      	subs	r0, r2, #1
   31414:	2808      	cmp	r0, #8
   31416:	d8d6      	bhi.n	313c6 <nrf_cloud_agps_process+0x62>
   31418:	f20f 0c04 	addw	ip, pc, #4
   3141c:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   31420:	00031453 	.word	0x00031453
   31424:	0003146f 	.word	0x0003146f
   31428:	00031475 	.word	0x00031475
   3142c:	0003147b 	.word	0x0003147b
   31430:	000313c7 	.word	0x000313c7
   31434:	0003148d 	.word	0x0003148d
   31438:	00031481 	.word	0x00031481
   3143c:	00031487 	.word	0x00031487
   31440:	0003148d 	.word	0x0003148d
		elements_left_to_process -= 1;
   31444:	3901      	subs	r1, #1
   31446:	f8a8 1000 	strh.w	r1, [r8]
		element->type = element_type;
   3144a:	f899 2000 	ldrb.w	r2, [r9]
	size_t len = 0;
   3144e:	2100      	movs	r1, #0
   31450:	e7df      	b.n	31412 <nrf_cloud_agps_process+0xae>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   31452:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_utc);
   31454:	310e      	adds	r1, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   31456:	2a06      	cmp	r2, #6
		parsed_len += element_size;
   31458:	440d      	add	r5, r1
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   3145a:	d11a      	bne.n	31492 <nrf_cloud_agps_process+0x12e>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   3145c:	781a      	ldrb	r2, [r3, #0]
   3145e:	a94a      	add	r1, sp, #296	; 0x128
   31460:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   31464:	681b      	ldr	r3, [r3, #0]
   31466:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
   3146a:	6013      	str	r3, [r2, #0]
			continue;
   3146c:	e7a9      	b.n	313c2 <nrf_cloud_agps_process+0x5e>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   3146e:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   31470:	313e      	adds	r1, #62	; 0x3e
		break;
   31472:	e7f0      	b.n	31456 <nrf_cloud_agps_process+0xf2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   31474:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_almanac);
   31476:	311f      	adds	r1, #31
		break;
   31478:	e7ed      	b.n	31456 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   3147a:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   3147c:	3108      	adds	r1, #8
		break;
   3147e:	e7ea      	b.n	31456 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   31480:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_system_time) -
   31482:	3110      	adds	r1, #16
		break;
   31484:	e7e7      	b.n	31456 <nrf_cloud_agps_process+0xf2>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   31486:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_location);
   31488:	310f      	adds	r1, #15
		break;
   3148a:	e7e4      	b.n	31456 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   3148c:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_integrity);
   3148e:	3104      	adds	r1, #4
		break;
   31490:	e7e1      	b.n	31456 <nrf_cloud_agps_process+0xf2>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   31492:	2a07      	cmp	r2, #7
   31494:	d120      	bne.n	314d8 <nrf_cloud_agps_process+0x174>
			memcpy(&sys_time, element.time_and_tow,
   31496:	6818      	ldr	r0, [r3, #0]
   31498:	6859      	ldr	r1, [r3, #4]
   3149a:	aa03      	add	r2, sp, #12
   3149c:	c203      	stmia	r2!, {r0, r1}
   3149e:	6898      	ldr	r0, [r3, #8]
	dst->date_day		= src->time_and_tow->date_day;
   314a0:	7859      	ldrb	r1, [r3, #1]
			memcpy(&sys_time, element.time_and_tow,
   314a2:	6010      	str	r0, [r2, #0]
	dst->date_day		= src->time_and_tow->date_day;
   314a4:	781a      	ldrb	r2, [r3, #0]
   314a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   314aa:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->time_full_s	= src->time_and_tow->time_full_s;
   314ae:	f8d3 2002 	ldr.w	r2, [r3, #2]
   314b2:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   314b4:	79d9      	ldrb	r1, [r3, #7]
   314b6:	799a      	ldrb	r2, [r3, #6]
	dst->sv_mask		= src->time_and_tow->sv_mask;
   314b8:	9029      	str	r0, [sp, #164]	; 0xa4
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   314ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   314be:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_mask		= src->time_and_tow->sv_mask;
   314c2:	4601      	mov	r1, r0
	if (src->time_and_tow->sv_mask == 0U) {
   314c4:	2800      	cmp	r0, #0
   314c6:	f040 8136 	bne.w	31736 <nrf_cloud_agps_process+0x3d2>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   314ca:	2280      	movs	r2, #128	; 0x80
   314cc:	a82a      	add	r0, sp, #168	; 0xa8
   314ce:	f016 fe7b 	bl	481c8 <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   314d2:	2206      	movs	r2, #6
   314d4:	2190      	movs	r1, #144	; 0x90
   314d6:	e0a5      	b.n	31624 <nrf_cloud_agps_process+0x2c0>
	switch (agps_data->type) {
   314d8:	2808      	cmp	r0, #8
   314da:	f200 8163 	bhi.w	317a4 <nrf_cloud_agps_process+0x440>
   314de:	e8df f010 	tbh	[pc, r0, lsl #1]
   314e2:	0009      	.short	0x0009
   314e4:	00d30022 	.word	0x00d30022
   314e8:	0161010f 	.word	0x0161010f
   314ec:	01610161 	.word	0x01610161
   314f0:	015d013f 	.word	0x015d013f
	dst->a1		= src->utc->a1;
   314f4:	681a      	ldr	r2, [r3, #0]
   314f6:	9226      	str	r2, [sp, #152]	; 0x98
	dst->a0		= src->utc->a0;
   314f8:	685a      	ldr	r2, [r3, #4]
   314fa:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->tot	= src->utc->tot;
   314fc:	7a1a      	ldrb	r2, [r3, #8]
   314fe:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
	dst->wn_t	= src->utc->wn_t;
   31502:	7a5a      	ldrb	r2, [r3, #9]
   31504:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
	dst->delta_tls	= src->utc->delta_tls;
   31508:	7a9a      	ldrb	r2, [r3, #10]
   3150a:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->wn_lsf	= src->utc->wn_lsf;
   3150e:	7ada      	ldrb	r2, [r3, #11]
   31510:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->dn		= src->utc->dn;
   31514:	7b1a      	ldrb	r2, [r3, #12]
	dst->delta_tlsf	= src->utc->delta_tlsf;
   31516:	7b5b      	ldrb	r3, [r3, #13]
	dst->dn		= src->utc->dn;
   31518:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
		return send_to_modem(&utc, sizeof(utc),
   3151c:	2201      	movs	r2, #1
	dst->delta_tlsf	= src->utc->delta_tlsf;
   3151e:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
		return send_to_modem(&location, sizeof(location),
   31522:	2110      	movs	r1, #16
   31524:	e07e      	b.n	31624 <nrf_cloud_agps_process+0x2c0>
	dst->sv_id	= src->ephemeris->sv_id;
   31526:	781a      	ldrb	r2, [r3, #0]
   31528:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->health	= src->ephemeris->health;
   3152c:	785a      	ldrb	r2, [r3, #1]
   3152e:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->iodc	= src->ephemeris->iodc;
   31532:	78d9      	ldrb	r1, [r3, #3]
   31534:	789a      	ldrb	r2, [r3, #2]
   31536:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3153a:	f8ad 209a 	strh.w	r2, [sp, #154]	; 0x9a
	dst->toc	= src->ephemeris->toc;
   3153e:	7959      	ldrb	r1, [r3, #5]
   31540:	791a      	ldrb	r2, [r3, #4]
   31542:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   31546:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->af2	= src->ephemeris->af2;
   3154a:	799a      	ldrb	r2, [r3, #6]
   3154c:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->af1	= src->ephemeris->af1;
   31550:	7a19      	ldrb	r1, [r3, #8]
   31552:	79da      	ldrb	r2, [r3, #7]
   31554:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   31558:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->af0	= src->ephemeris->af0;
   3155c:	f8d3 2009 	ldr.w	r2, [r3, #9]
   31560:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->tgd	= src->ephemeris->tgd;
   31562:	7b5a      	ldrb	r2, [r3, #13]
   31564:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
	dst->ura	= src->ephemeris->ura;
   31568:	7b9a      	ldrb	r2, [r3, #14]
   3156a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
	dst->fit_int	= src->ephemeris->fit_int;
   3156e:	7bda      	ldrb	r2, [r3, #15]
   31570:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
	dst->toe	= src->ephemeris->toe;
   31574:	7c59      	ldrb	r1, [r3, #17]
   31576:	7c1a      	ldrb	r2, [r3, #16]
   31578:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3157c:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->w		= src->ephemeris->w;
   31580:	f8d3 2012 	ldr.w	r2, [r3, #18]
   31584:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->delta_n	= src->ephemeris->delta_n;
   31586:	7dd9      	ldrb	r1, [r3, #23]
   31588:	7d9a      	ldrb	r2, [r3, #22]
   3158a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3158e:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->m0		= src->ephemeris->m0;
   31592:	699a      	ldr	r2, [r3, #24]
   31594:	922e      	str	r2, [sp, #184]	; 0xb8
	dst->omega_dot	= src->ephemeris->omega_dot;
   31596:	69da      	ldr	r2, [r3, #28]
   31598:	922f      	str	r2, [sp, #188]	; 0xbc
	dst->e		= src->ephemeris->e;
   3159a:	6a1a      	ldr	r2, [r3, #32]
   3159c:	9230      	str	r2, [sp, #192]	; 0xc0
	dst->idot	= src->ephemeris->idot;
   3159e:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   315a2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   315a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   315aa:	f8ad 20c4 	strh.w	r2, [sp, #196]	; 0xc4
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   315ae:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   315b2:	9232      	str	r2, [sp, #200]	; 0xc8
	dst->i0		= src->ephemeris->i0;
   315b4:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
   315b8:	9233      	str	r2, [sp, #204]	; 0xcc
	dst->omega0	= src->ephemeris->omega0;
   315ba:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
   315be:	9234      	str	r2, [sp, #208]	; 0xd0
	dst->crs	= src->ephemeris->crs;
   315c0:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
   315c4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   315c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   315cc:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	dst->cis	= src->ephemeris->cis;
   315d0:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   315d4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   315d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   315dc:	f8ad 20d6 	strh.w	r2, [sp, #214]	; 0xd6
	dst->cus	= src->ephemeris->cus;
   315e0:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
   315e4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   315e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   315ec:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
	dst->crc	= src->ephemeris->crc;
   315f0:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   315f4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   315f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   315fc:	f8ad 20da 	strh.w	r2, [sp, #218]	; 0xda
	dst->cic	= src->ephemeris->cic;
   31600:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
   31604:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   31608:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   3160c:	f8ad 20dc 	strh.w	r2, [sp, #220]	; 0xdc
	dst->cuc	= src->ephemeris->cuc;
   31610:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   31614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   31618:	2148      	movs	r1, #72	; 0x48
	dst->cuc	= src->ephemeris->cuc;
   3161a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   3161e:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   31620:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
		return send_to_modem(&location, sizeof(location),
   31624:	a826      	add	r0, sp, #152	; 0x98
		return send_to_modem(agps_data->integrity,
   31626:	f7ff fd27 	bl	31078 <send_to_modem>
   3162a:	4603      	mov	r3, r0
		if (err) {
   3162c:	2800      	cmp	r0, #0
   3162e:	f43f aec8 	beq.w	313c2 <nrf_cloud_agps_process+0x5e>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   31632:	2201      	movs	r2, #1
   31634:	f04f 0000 	mov.w	r0, #0
   31638:	f362 0007 	bfi	r0, r2, #0, #8
   3163c:	f364 108f 	bfi	r0, r4, #6, #10
   31640:	461a      	mov	r2, r3
   31642:	490d      	ldr	r1, [pc, #52]	; (31678 <nrf_cloud_agps_process+0x314>)
   31644:	9301      	str	r3, [sp, #4]
   31646:	f013 f86e 	bl	44726 <log_string_sync>
			return err;
   3164a:	9b01      	ldr	r3, [sp, #4]
   3164c:	e6d0      	b.n	313f0 <nrf_cloud_agps_process+0x8c>
   3164e:	bf00      	nop
   31650:	00050184 	.word	0x00050184
   31654:	000501c2 	.word	0x000501c2
   31658:	0004b33b 	.word	0x0004b33b
   3165c:	000501d1 	.word	0x000501d1
   31660:	00049880 	.word	0x00049880
   31664:	00049788 	.word	0x00049788
   31668:	200258a8 	.word	0x200258a8
   3166c:	2002087c 	.word	0x2002087c
   31670:	0004bbbb 	.word	0x0004bbbb
   31674:	000501f3 	.word	0x000501f3
   31678:	0005023b 	.word	0x0005023b
   3167c:	2002a9ba 	.word	0x2002a9ba
   31680:	2002d1b5 	.word	0x2002d1b5
   31684:	00050220 	.word	0x00050220
	dst->sv_id	= src->almanac->sv_id;
   31688:	781a      	ldrb	r2, [r3, #0]
   3168a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->wn		= src->almanac->wn;
   3168e:	785a      	ldrb	r2, [r3, #1]
   31690:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->toa	= src->almanac->toa;
   31694:	789a      	ldrb	r2, [r3, #2]
   31696:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->ioda	= src->almanac->ioda;
   3169a:	78da      	ldrb	r2, [r3, #3]
   3169c:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->e		= src->almanac->e;
   316a0:	7959      	ldrb	r1, [r3, #5]
   316a2:	791a      	ldrb	r2, [r3, #4]
   316a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   316a8:	f8ad 209c 	strh.w	r2, [sp, #156]	; 0x9c
	dst->delta_i	= src->almanac->delta_i;
   316ac:	79d9      	ldrb	r1, [r3, #7]
   316ae:	799a      	ldrb	r2, [r3, #6]
   316b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   316b4:	f8ad 209e 	strh.w	r2, [sp, #158]	; 0x9e
	dst->omega_dot	= src->almanac->omega_dot;
   316b8:	7a59      	ldrb	r1, [r3, #9]
   316ba:	7a1a      	ldrb	r2, [r3, #8]
   316bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   316c0:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->sv_health	= src->almanac->sv_health;
   316c4:	7a9a      	ldrb	r2, [r3, #10]
   316c6:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->sqrt_a	= src->almanac->sqrt_a;
   316ca:	f8d3 200b 	ldr.w	r2, [r3, #11]
   316ce:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->omega0	= src->almanac->omega0;
   316d0:	f8d3 200f 	ldr.w	r2, [r3, #15]
   316d4:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->w		= src->almanac->w;
   316d6:	f8d3 2013 	ldr.w	r2, [r3, #19]
   316da:	922b      	str	r2, [sp, #172]	; 0xac
	dst->m0		= src->almanac->m0;
   316dc:	f8d3 2017 	ldr.w	r2, [r3, #23]
   316e0:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->af0	= src->almanac->af0;
   316e2:	7f19      	ldrb	r1, [r3, #28]
   316e4:	7eda      	ldrb	r2, [r3, #27]
   316e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   316ea:	f8ad 20b4 	strh.w	r2, [sp, #180]	; 0xb4
	dst->af1	= src->almanac->af1;
   316ee:	7f5a      	ldrb	r2, [r3, #29]
   316f0:	7f9b      	ldrb	r3, [r3, #30]
		return send_to_modem(&almanac, sizeof(almanac),
   316f2:	2120      	movs	r1, #32
	dst->af1	= src->almanac->af1;
   316f4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   316f8:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
		return send_to_modem(&almanac, sizeof(almanac),
   316fc:	2203      	movs	r2, #3
   316fe:	e791      	b.n	31624 <nrf_cloud_agps_process+0x2c0>
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   31700:	781a      	ldrb	r2, [r3, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   31702:	2108      	movs	r1, #8
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   31704:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   31708:	785a      	ldrb	r2, [r3, #1]
   3170a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   3170e:	789a      	ldrb	r2, [r3, #2]
   31710:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   31714:	78da      	ldrb	r2, [r3, #3]
   31716:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   3171a:	791a      	ldrb	r2, [r3, #4]
   3171c:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   31720:	795a      	ldrb	r2, [r3, #5]
   31722:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   31726:	799a      	ldrb	r2, [r3, #6]
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   31728:	79db      	ldrb	r3, [r3, #7]
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   3172a:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   3172e:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   31732:	2204      	movs	r2, #4
   31734:	e776      	b.n	31624 <nrf_cloud_agps_process+0x2c0>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   31736:	2200      	movs	r2, #0
   31738:	a926      	add	r1, sp, #152	; 0x98
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   3173a:	f103 0c0f 	add.w	ip, r3, #15
   3173e:	f81c 0022 	ldrb.w	r0, [ip, r2, lsl #2]
   31742:	3104      	adds	r1, #4
   31744:	7388      	strb	r0, [r1, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   31746:	1c90      	adds	r0, r2, #2
   31748:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   3174c:	f890 e005 	ldrb.w	lr, [r0, #5]
   31750:	7980      	ldrb	r0, [r0, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   31752:	3201      	adds	r2, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   31754:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   31758:	2a20      	cmp	r2, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   3175a:	8188      	strh	r0, [r1, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   3175c:	d1ef      	bne.n	3173e <nrf_cloud_agps_process+0x3da>
   3175e:	e6b8      	b.n	314d2 <nrf_cloud_agps_process+0x16e>
		nrf_gnss_agps_data_location_t location = {0};
   31760:	2200      	movs	r2, #0
   31762:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
	dst->latitude		= src->location->latitude;
   31766:	681a      	ldr	r2, [r3, #0]
   31768:	9226      	str	r2, [sp, #152]	; 0x98
	dst->longitude		= src->location->longitude;
   3176a:	685a      	ldr	r2, [r3, #4]
   3176c:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->altitude		= src->location->altitude;
   3176e:	7a1a      	ldrb	r2, [r3, #8]
   31770:	7a59      	ldrb	r1, [r3, #9]
   31772:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   31776:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
	dst->unc_semimajor	= src->location->unc_semimajor;
   3177a:	7a9a      	ldrb	r2, [r3, #10]
   3177c:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->unc_semiminor	= src->location->unc_semiminor;
   31780:	7ada      	ldrb	r2, [r3, #11]
   31782:	f88d 20a3 	strb.w	r2, [sp, #163]	; 0xa3
	dst->orientation_major	= src->location->orientation_major;
   31786:	7b1a      	ldrb	r2, [r3, #12]
   31788:	f88d 20a4 	strb.w	r2, [sp, #164]	; 0xa4
	dst->unc_altitude	= src->location->unc_altitude;
   3178c:	7b5a      	ldrb	r2, [r3, #13]
	dst->confidence		= src->location->confidence;
   3178e:	7b9b      	ldrb	r3, [r3, #14]
	dst->unc_altitude	= src->location->unc_altitude;
   31790:	f88d 20a5 	strb.w	r2, [sp, #165]	; 0xa5
	dst->confidence		= src->location->confidence;
   31794:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
		return send_to_modem(&location, sizeof(location),
   31798:	2207      	movs	r2, #7
   3179a:	e6c2      	b.n	31522 <nrf_cloud_agps_process+0x1be>
		return send_to_modem(agps_data->integrity,
   3179c:	2208      	movs	r2, #8
   3179e:	2104      	movs	r1, #4
   317a0:	4618      	mov	r0, r3
   317a2:	e740      	b.n	31626 <nrf_cloud_agps_process+0x2c2>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   317a4:	f026 033f 	bic.w	r3, r6, #63	; 0x3f
   317a8:	f043 0302 	orr.w	r3, r3, #2
   317ac:	f363 0607 	bfi	r6, r3, #0, #8
   317b0:	f364 168f 	bfi	r6, r4, #6, #10
   317b4:	4659      	mov	r1, fp
   317b6:	4630      	mov	r0, r6
   317b8:	f012 ffb5 	bl	44726 <log_string_sync>
		if (err) {
   317bc:	e601      	b.n	313c2 <nrf_cloud_agps_process+0x5e>
   317be:	bf00      	nop

000317c0 <agps_print>:
}

void agps_print(nrf_gnss_agps_data_type_t type, void *data)
{

	switch (type) {
   317c0:	3801      	subs	r0, #1
{
   317c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   317c6:	460c      	mov	r4, r1
	switch (type) {
   317c8:	2807      	cmp	r0, #7
   317ca:	f200 816b 	bhi.w	31aa4 <agps_print+0x2e4>
   317ce:	e8df f010 	tbh	[pc, r0, lsl #1]
   317d2:	0008      	.short	0x0008
   317d4:	00a50030 	.word	0x00a50030
   317d8:	010d00e3 	.word	0x010d00e3
   317dc:	01400112 	.word	0x01400112
   317e0:	0163      	.short	0x0163
	printk("utc:\n");
   317e2:	48b1      	ldr	r0, [pc, #708]	; (31aa8 <agps_print+0x2e8>)
   317e4:	f012 fd74 	bl	442d0 <printk>
	printk("\ta1: %d\n", data->a1);
   317e8:	6821      	ldr	r1, [r4, #0]
   317ea:	48b0      	ldr	r0, [pc, #704]	; (31aac <agps_print+0x2ec>)
   317ec:	f012 fd70 	bl	442d0 <printk>
	printk("\ta0: %d\n", data->a0);
   317f0:	6861      	ldr	r1, [r4, #4]
   317f2:	48af      	ldr	r0, [pc, #700]	; (31ab0 <agps_print+0x2f0>)
   317f4:	f012 fd6c 	bl	442d0 <printk>
	printk("\ttot: %d\n", data->tot);
   317f8:	7a21      	ldrb	r1, [r4, #8]
   317fa:	48ae      	ldr	r0, [pc, #696]	; (31ab4 <agps_print+0x2f4>)
   317fc:	f012 fd68 	bl	442d0 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   31800:	7a61      	ldrb	r1, [r4, #9]
   31802:	48ad      	ldr	r0, [pc, #692]	; (31ab8 <agps_print+0x2f8>)
   31804:	f012 fd64 	bl	442d0 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   31808:	f994 100a 	ldrsb.w	r1, [r4, #10]
   3180c:	48ab      	ldr	r0, [pc, #684]	; (31abc <agps_print+0x2fc>)
   3180e:	f012 fd5f 	bl	442d0 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   31812:	7ae1      	ldrb	r1, [r4, #11]
   31814:	48aa      	ldr	r0, [pc, #680]	; (31ac0 <agps_print+0x300>)
   31816:	f012 fd5b 	bl	442d0 <printk>
	printk("\tdn: %d\n", data->dn);
   3181a:	f994 100c 	ldrsb.w	r1, [r4, #12]
   3181e:	48a9      	ldr	r0, [pc, #676]	; (31ac4 <agps_print+0x304>)
   31820:	f012 fd56 	bl	442d0 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   31824:	f994 100d 	ldrsb.w	r1, [r4, #13]
   31828:	48a7      	ldr	r0, [pc, #668]	; (31ac8 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   3182a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   3182e:	f012 bd4f 	b.w	442d0 <printk>
	printk("ephemeris:\n");
   31832:	48a6      	ldr	r0, [pc, #664]	; (31acc <agps_print+0x30c>)
   31834:	f012 fd4c 	bl	442d0 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   31838:	7821      	ldrb	r1, [r4, #0]
   3183a:	48a5      	ldr	r0, [pc, #660]	; (31ad0 <agps_print+0x310>)
   3183c:	f012 fd48 	bl	442d0 <printk>
	printk("\thealth: %d\n", data->health);
   31840:	7861      	ldrb	r1, [r4, #1]
   31842:	48a4      	ldr	r0, [pc, #656]	; (31ad4 <agps_print+0x314>)
   31844:	f012 fd44 	bl	442d0 <printk>
	printk("\tiodc: %d\n", data->iodc);
   31848:	8861      	ldrh	r1, [r4, #2]
   3184a:	48a3      	ldr	r0, [pc, #652]	; (31ad8 <agps_print+0x318>)
   3184c:	f012 fd40 	bl	442d0 <printk>
	printk("\ttoc: %d\n", data->toc);
   31850:	88a1      	ldrh	r1, [r4, #4]
   31852:	48a2      	ldr	r0, [pc, #648]	; (31adc <agps_print+0x31c>)
   31854:	f012 fd3c 	bl	442d0 <printk>
	printk("\taf2: %d\n", data->af2);
   31858:	f994 1006 	ldrsb.w	r1, [r4, #6]
   3185c:	48a0      	ldr	r0, [pc, #640]	; (31ae0 <agps_print+0x320>)
   3185e:	f012 fd37 	bl	442d0 <printk>
	printk("\taf1: %d\n", data->af1);
   31862:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   31866:	489f      	ldr	r0, [pc, #636]	; (31ae4 <agps_print+0x324>)
   31868:	f012 fd32 	bl	442d0 <printk>
	printk("\taf0: %d\n", data->af0);
   3186c:	68e1      	ldr	r1, [r4, #12]
   3186e:	489e      	ldr	r0, [pc, #632]	; (31ae8 <agps_print+0x328>)
   31870:	f012 fd2e 	bl	442d0 <printk>
	printk("\ttgd: %d\n", data->tgd);
   31874:	f994 1010 	ldrsb.w	r1, [r4, #16]
   31878:	489c      	ldr	r0, [pc, #624]	; (31aec <agps_print+0x32c>)
   3187a:	f012 fd29 	bl	442d0 <printk>
	printk("\tura: %d\n", data->ura);
   3187e:	7c61      	ldrb	r1, [r4, #17]
   31880:	489b      	ldr	r0, [pc, #620]	; (31af0 <agps_print+0x330>)
   31882:	f012 fd25 	bl	442d0 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   31886:	7ca1      	ldrb	r1, [r4, #18]
   31888:	489a      	ldr	r0, [pc, #616]	; (31af4 <agps_print+0x334>)
   3188a:	f012 fd21 	bl	442d0 <printk>
	printk("\ttoe: %d\n", data->toe);
   3188e:	8aa1      	ldrh	r1, [r4, #20]
   31890:	4899      	ldr	r0, [pc, #612]	; (31af8 <agps_print+0x338>)
   31892:	f012 fd1d 	bl	442d0 <printk>
	printk("\tw: %d\n", data->w);
   31896:	69a1      	ldr	r1, [r4, #24]
   31898:	4898      	ldr	r0, [pc, #608]	; (31afc <agps_print+0x33c>)
   3189a:	f012 fd19 	bl	442d0 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   3189e:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   318a2:	4897      	ldr	r0, [pc, #604]	; (31b00 <agps_print+0x340>)
   318a4:	f012 fd14 	bl	442d0 <printk>
	printk("\tm0: %d\n", data->m0);
   318a8:	6a21      	ldr	r1, [r4, #32]
   318aa:	4896      	ldr	r0, [pc, #600]	; (31b04 <agps_print+0x344>)
   318ac:	f012 fd10 	bl	442d0 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   318b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   318b2:	4895      	ldr	r0, [pc, #596]	; (31b08 <agps_print+0x348>)
   318b4:	f012 fd0c 	bl	442d0 <printk>
	printk("\te: %d\n", data->e);
   318b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   318ba:	4894      	ldr	r0, [pc, #592]	; (31b0c <agps_print+0x34c>)
   318bc:	f012 fd08 	bl	442d0 <printk>
	printk("\tidot: %d\n", data->idot);
   318c0:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   318c4:	4892      	ldr	r0, [pc, #584]	; (31b10 <agps_print+0x350>)
   318c6:	f012 fd03 	bl	442d0 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   318ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   318cc:	4891      	ldr	r0, [pc, #580]	; (31b14 <agps_print+0x354>)
   318ce:	f012 fcff 	bl	442d0 <printk>
	printk("\ti0: %d\n", data->i0);
   318d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   318d4:	4890      	ldr	r0, [pc, #576]	; (31b18 <agps_print+0x358>)
   318d6:	f012 fcfb 	bl	442d0 <printk>
	printk("\tomega0: %d\n", data->omega0);
   318da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   318dc:	488f      	ldr	r0, [pc, #572]	; (31b1c <agps_print+0x35c>)
   318de:	f012 fcf7 	bl	442d0 <printk>
	printk("\tcrs: %d\n", data->crs);
   318e2:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   318e6:	488e      	ldr	r0, [pc, #568]	; (31b20 <agps_print+0x360>)
   318e8:	f012 fcf2 	bl	442d0 <printk>
	printk("\tcis: %d\n", data->cis);
   318ec:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   318f0:	488c      	ldr	r0, [pc, #560]	; (31b24 <agps_print+0x364>)
   318f2:	f012 fced 	bl	442d0 <printk>
	printk("\tcus: %d\n", data->cus);
   318f6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   318fa:	488b      	ldr	r0, [pc, #556]	; (31b28 <agps_print+0x368>)
   318fc:	f012 fce8 	bl	442d0 <printk>
	printk("\tcrc: %d\n", data->crc);
   31900:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   31904:	4889      	ldr	r0, [pc, #548]	; (31b2c <agps_print+0x36c>)
   31906:	f012 fce3 	bl	442d0 <printk>
	printk("\tcic: %d\n", data->cic);
   3190a:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   3190e:	4888      	ldr	r0, [pc, #544]	; (31b30 <agps_print+0x370>)
   31910:	f012 fcde 	bl	442d0 <printk>
	printk("\tcuc: %d\n", data->cuc);
   31914:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   31918:	4886      	ldr	r0, [pc, #536]	; (31b34 <agps_print+0x374>)
   3191a:	e786      	b.n	3182a <agps_print+0x6a>
	printk("almanac\n");
   3191c:	4886      	ldr	r0, [pc, #536]	; (31b38 <agps_print+0x378>)
   3191e:	f012 fcd7 	bl	442d0 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   31922:	7821      	ldrb	r1, [r4, #0]
   31924:	486a      	ldr	r0, [pc, #424]	; (31ad0 <agps_print+0x310>)
   31926:	f012 fcd3 	bl	442d0 <printk>
	printk("\twn: %d\n", data->wn);
   3192a:	7861      	ldrb	r1, [r4, #1]
   3192c:	4883      	ldr	r0, [pc, #524]	; (31b3c <agps_print+0x37c>)
   3192e:	f012 fccf 	bl	442d0 <printk>
	printk("\ttoa: %d\n", data->toa);
   31932:	78a1      	ldrb	r1, [r4, #2]
   31934:	4882      	ldr	r0, [pc, #520]	; (31b40 <agps_print+0x380>)
   31936:	f012 fccb 	bl	442d0 <printk>
	printk("\tioda: %d\n", data->ioda);
   3193a:	78e1      	ldrb	r1, [r4, #3]
   3193c:	4881      	ldr	r0, [pc, #516]	; (31b44 <agps_print+0x384>)
   3193e:	f012 fcc7 	bl	442d0 <printk>
	printk("\te: %d\n", data->e);
   31942:	88a1      	ldrh	r1, [r4, #4]
   31944:	4871      	ldr	r0, [pc, #452]	; (31b0c <agps_print+0x34c>)
   31946:	f012 fcc3 	bl	442d0 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   3194a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   3194e:	487e      	ldr	r0, [pc, #504]	; (31b48 <agps_print+0x388>)
   31950:	f012 fcbe 	bl	442d0 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   31954:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   31958:	486b      	ldr	r0, [pc, #428]	; (31b08 <agps_print+0x348>)
   3195a:	f012 fcb9 	bl	442d0 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   3195e:	7aa1      	ldrb	r1, [r4, #10]
   31960:	487a      	ldr	r0, [pc, #488]	; (31b4c <agps_print+0x38c>)
   31962:	f012 fcb5 	bl	442d0 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   31966:	68e1      	ldr	r1, [r4, #12]
   31968:	486a      	ldr	r0, [pc, #424]	; (31b14 <agps_print+0x354>)
   3196a:	f012 fcb1 	bl	442d0 <printk>
	printk("\tomega0: %d\n", data->omega0);
   3196e:	6921      	ldr	r1, [r4, #16]
   31970:	486a      	ldr	r0, [pc, #424]	; (31b1c <agps_print+0x35c>)
   31972:	f012 fcad 	bl	442d0 <printk>
	printk("\tw: %d\n", data->w);
   31976:	6961      	ldr	r1, [r4, #20]
   31978:	4860      	ldr	r0, [pc, #384]	; (31afc <agps_print+0x33c>)
   3197a:	f012 fca9 	bl	442d0 <printk>
	printk("\tm0: %d\n", data->m0);
   3197e:	69a1      	ldr	r1, [r4, #24]
   31980:	4860      	ldr	r0, [pc, #384]	; (31b04 <agps_print+0x344>)
   31982:	f012 fca5 	bl	442d0 <printk>
	printk("\taf0: %d\n", data->af0);
   31986:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   3198a:	4857      	ldr	r0, [pc, #348]	; (31ae8 <agps_print+0x328>)
   3198c:	f012 fca0 	bl	442d0 <printk>
	printk("\taf1: %d\n", data->af1);
   31990:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   31994:	4853      	ldr	r0, [pc, #332]	; (31ae4 <agps_print+0x324>)
   31996:	e748      	b.n	3182a <agps_print+0x6a>
	printk("klobuchar\n");
   31998:	486d      	ldr	r0, [pc, #436]	; (31b50 <agps_print+0x390>)
   3199a:	f012 fc99 	bl	442d0 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   3199e:	f994 1000 	ldrsb.w	r1, [r4]
   319a2:	486c      	ldr	r0, [pc, #432]	; (31b54 <agps_print+0x394>)
   319a4:	f012 fc94 	bl	442d0 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   319a8:	f994 1001 	ldrsb.w	r1, [r4, #1]
   319ac:	486a      	ldr	r0, [pc, #424]	; (31b58 <agps_print+0x398>)
   319ae:	f012 fc8f 	bl	442d0 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   319b2:	f994 1002 	ldrsb.w	r1, [r4, #2]
   319b6:	4869      	ldr	r0, [pc, #420]	; (31b5c <agps_print+0x39c>)
   319b8:	f012 fc8a 	bl	442d0 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   319bc:	f994 1003 	ldrsb.w	r1, [r4, #3]
   319c0:	4867      	ldr	r0, [pc, #412]	; (31b60 <agps_print+0x3a0>)
   319c2:	f012 fc85 	bl	442d0 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   319c6:	f994 1004 	ldrsb.w	r1, [r4, #4]
   319ca:	4866      	ldr	r0, [pc, #408]	; (31b64 <agps_print+0x3a4>)
   319cc:	f012 fc80 	bl	442d0 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   319d0:	f994 1005 	ldrsb.w	r1, [r4, #5]
   319d4:	4864      	ldr	r0, [pc, #400]	; (31b68 <agps_print+0x3a8>)
   319d6:	f012 fc7b 	bl	442d0 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   319da:	f994 1006 	ldrsb.w	r1, [r4, #6]
   319de:	4863      	ldr	r0, [pc, #396]	; (31b6c <agps_print+0x3ac>)
   319e0:	f012 fc76 	bl	442d0 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   319e4:	f994 1007 	ldrsb.w	r1, [r4, #7]
   319e8:	4861      	ldr	r0, [pc, #388]	; (31b70 <agps_print+0x3b0>)
   319ea:	e71e      	b.n	3182a <agps_print+0x6a>
		printk("nequick unhandled\n");
   319ec:	4861      	ldr	r0, [pc, #388]	; (31b74 <agps_print+0x3b4>)
}
   319ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   319f2:	f012 bc6d 	b.w	442d0 <printk>
	printk("clock_and_tows\n");
   319f6:	4860      	ldr	r0, [pc, #384]	; (31b78 <agps_print+0x3b8>)
   319f8:	f012 fc6a 	bl	442d0 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   319fc:	8821      	ldrh	r1, [r4, #0]
   319fe:	485f      	ldr	r0, [pc, #380]	; (31b7c <agps_print+0x3bc>)
   31a00:	f012 fc66 	bl	442d0 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   31a04:	6861      	ldr	r1, [r4, #4]
   31a06:	485e      	ldr	r0, [pc, #376]	; (31b80 <agps_print+0x3c0>)
   31a08:	f012 fc62 	bl	442d0 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   31a0c:	8921      	ldrh	r1, [r4, #8]
   31a0e:	485d      	ldr	r0, [pc, #372]	; (31b84 <agps_print+0x3c4>)
   31a10:	f012 fc5e 	bl	442d0 <printk>
	printk("\tsv_mask: %d\n", data->sv_mask);
   31a14:	68e1      	ldr	r1, [r4, #12]
   31a16:	485c      	ldr	r0, [pc, #368]	; (31b88 <agps_print+0x3c8>)
   31a18:	f012 fc5a 	bl	442d0 <printk>
	printk("\tsv_tow\n");
   31a1c:	485b      	ldr	r0, [pc, #364]	; (31b8c <agps_print+0x3cc>)
   31a1e:	f012 fc57 	bl	442d0 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   31a22:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   31a24:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 31bc8 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   31a28:	4f59      	ldr	r7, [pc, #356]	; (31b90 <agps_print+0x3d0>)
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   31a2a:	4e5a      	ldr	r6, [pc, #360]	; (31b94 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   31a2c:	4629      	mov	r1, r5
   31a2e:	4640      	mov	r0, r8
   31a30:	f012 fc4e 	bl	442d0 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   31a34:	8a21      	ldrh	r1, [r4, #16]
   31a36:	4638      	mov	r0, r7
   31a38:	f012 fc4a 	bl	442d0 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   31a3c:	3501      	adds	r5, #1
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   31a3e:	7ca1      	ldrb	r1, [r4, #18]
   31a40:	4630      	mov	r0, r6
   31a42:	f012 fc45 	bl	442d0 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   31a46:	2d20      	cmp	r5, #32
   31a48:	f104 0404 	add.w	r4, r4, #4
   31a4c:	d1ee      	bne.n	31a2c <agps_print+0x26c>
}
   31a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   31a52:	4851      	ldr	r0, [pc, #324]	; (31b98 <agps_print+0x3d8>)
   31a54:	f012 fc3c 	bl	442d0 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   31a58:	6821      	ldr	r1, [r4, #0]
   31a5a:	4850      	ldr	r0, [pc, #320]	; (31b9c <agps_print+0x3dc>)
   31a5c:	f012 fc38 	bl	442d0 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   31a60:	6861      	ldr	r1, [r4, #4]
   31a62:	484f      	ldr	r0, [pc, #316]	; (31ba0 <agps_print+0x3e0>)
   31a64:	f012 fc34 	bl	442d0 <printk>
	printk("\taltitude: %d\n", data->altitude);
   31a68:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   31a6c:	484d      	ldr	r0, [pc, #308]	; (31ba4 <agps_print+0x3e4>)
   31a6e:	f012 fc2f 	bl	442d0 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   31a72:	7aa1      	ldrb	r1, [r4, #10]
   31a74:	484c      	ldr	r0, [pc, #304]	; (31ba8 <agps_print+0x3e8>)
   31a76:	f012 fc2b 	bl	442d0 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   31a7a:	7ae1      	ldrb	r1, [r4, #11]
   31a7c:	484b      	ldr	r0, [pc, #300]	; (31bac <agps_print+0x3ec>)
   31a7e:	f012 fc27 	bl	442d0 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   31a82:	7b21      	ldrb	r1, [r4, #12]
   31a84:	484a      	ldr	r0, [pc, #296]	; (31bb0 <agps_print+0x3f0>)
   31a86:	f012 fc23 	bl	442d0 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   31a8a:	7b61      	ldrb	r1, [r4, #13]
   31a8c:	4849      	ldr	r0, [pc, #292]	; (31bb4 <agps_print+0x3f4>)
   31a8e:	f012 fc1f 	bl	442d0 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   31a92:	7ba1      	ldrb	r1, [r4, #14]
   31a94:	4848      	ldr	r0, [pc, #288]	; (31bb8 <agps_print+0x3f8>)
   31a96:	e6c8      	b.n	3182a <agps_print+0x6a>
	printk("integrity\n");
   31a98:	4848      	ldr	r0, [pc, #288]	; (31bbc <agps_print+0x3fc>)
   31a9a:	f012 fc19 	bl	442d0 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   31a9e:	6821      	ldr	r1, [r4, #0]
   31aa0:	4847      	ldr	r0, [pc, #284]	; (31bc0 <agps_print+0x400>)
   31aa2:	e6c2      	b.n	3182a <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   31aa4:	4847      	ldr	r0, [pc, #284]	; (31bc4 <agps_print+0x404>)
   31aa6:	e7a2      	b.n	319ee <agps_print+0x22e>
   31aa8:	00050421 	.word	0x00050421
   31aac:	00050427 	.word	0x00050427
   31ab0:	00050430 	.word	0x00050430
   31ab4:	00050439 	.word	0x00050439
   31ab8:	00050443 	.word	0x00050443
   31abc:	0005044e 	.word	0x0005044e
   31ac0:	0005045e 	.word	0x0005045e
   31ac4:	0005046b 	.word	0x0005046b
   31ac8:	00050474 	.word	0x00050474
   31acc:	00050485 	.word	0x00050485
   31ad0:	00050491 	.word	0x00050491
   31ad4:	0005049d 	.word	0x0005049d
   31ad8:	000504aa 	.word	0x000504aa
   31adc:	000504b5 	.word	0x000504b5
   31ae0:	000504bf 	.word	0x000504bf
   31ae4:	000504c9 	.word	0x000504c9
   31ae8:	000504d3 	.word	0x000504d3
   31aec:	000504dd 	.word	0x000504dd
   31af0:	000504e7 	.word	0x000504e7
   31af4:	000504f1 	.word	0x000504f1
   31af8:	000504ff 	.word	0x000504ff
   31afc:	00050509 	.word	0x00050509
   31b00:	00050511 	.word	0x00050511
   31b04:	0005051f 	.word	0x0005051f
   31b08:	00050528 	.word	0x00050528
   31b0c:	00050538 	.word	0x00050538
   31b10:	00050540 	.word	0x00050540
   31b14:	0005054b 	.word	0x0005054b
   31b18:	00050558 	.word	0x00050558
   31b1c:	00050561 	.word	0x00050561
   31b20:	0005056e 	.word	0x0005056e
   31b24:	00050578 	.word	0x00050578
   31b28:	00050582 	.word	0x00050582
   31b2c:	0005058c 	.word	0x0005058c
   31b30:	00050596 	.word	0x00050596
   31b34:	000505a0 	.word	0x000505a0
   31b38:	000505aa 	.word	0x000505aa
   31b3c:	000505b3 	.word	0x000505b3
   31b40:	000505bc 	.word	0x000505bc
   31b44:	000505c6 	.word	0x000505c6
   31b48:	000505d1 	.word	0x000505d1
   31b4c:	000505df 	.word	0x000505df
   31b50:	000505ef 	.word	0x000505ef
   31b54:	000505fa 	.word	0x000505fa
   31b58:	00050607 	.word	0x00050607
   31b5c:	00050614 	.word	0x00050614
   31b60:	00050621 	.word	0x00050621
   31b64:	0005062e 	.word	0x0005062e
   31b68:	0005063a 	.word	0x0005063a
   31b6c:	00050646 	.word	0x00050646
   31b70:	00050652 	.word	0x00050652
   31b74:	0005065e 	.word	0x0005065e
   31b78:	00050671 	.word	0x00050671
   31b7c:	00050681 	.word	0x00050681
   31b80:	00050690 	.word	0x00050690
   31b84:	000506a2 	.word	0x000506a2
   31b88:	000506b5 	.word	0x000506b5
   31b8c:	000506c3 	.word	0x000506c3
   31b90:	000506da 	.word	0x000506da
   31b94:	000506e6 	.word	0x000506e6
   31b98:	0004c5ee 	.word	0x0004c5ee
   31b9c:	000506f4 	.word	0x000506f4
   31ba0:	00050703 	.word	0x00050703
   31ba4:	00050713 	.word	0x00050713
   31ba8:	00050722 	.word	0x00050722
   31bac:	00050736 	.word	0x00050736
   31bb0:	0005074a 	.word	0x0005074a
   31bb4:	00050762 	.word	0x00050762
   31bb8:	00050775 	.word	0x00050775
   31bbc:	00050786 	.word	0x00050786
   31bc0:	00050791 	.word	0x00050791
   31bc4:	000507a6 	.word	0x000507a6
   31bc8:	000506cc 	.word	0x000506cc

00031bcc <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   31bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   31bd0:	4699      	mov	r9, r3
   31bd2:	4c29      	ldr	r4, [pc, #164]	; (31c78 <fota_settings_set+0xac>)
   31bd4:	4b29      	ldr	r3, [pc, #164]	; (31c7c <fota_settings_set+0xb0>)
   31bd6:	460f      	mov	r7, r1
   31bd8:	1ae4      	subs	r4, r4, r3
   31bda:	4690      	mov	r8, r2
   31bdc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	if (!key) {
   31be0:	4606      	mov	r6, r0
   31be2:	b970      	cbnz	r0, 31c02 <fota_settings_set+0x36>
		LOG_DBG("Key is NULL");
   31be4:	2304      	movs	r3, #4
   31be6:	f363 0007 	bfi	r0, r3, #0, #8
   31bea:	f364 108f 	bfi	r0, r4, #6, #10
   31bee:	4a24      	ldr	r2, [pc, #144]	; (31c80 <fota_settings_set+0xb4>)
   31bf0:	4924      	ldr	r1, [pc, #144]	; (31c84 <fota_settings_set+0xb8>)
   31bf2:	f012 fd98 	bl	44726 <log_string_sync>
		return -EINVAL;
   31bf6:	f06f 0515 	mvn.w	r5, #21
				saved_job.validate);
			return 0;
		}
	}
	return -ENOTSUP;
}
   31bfa:	4628      	mov	r0, r5
   31bfc:	b003      	add	sp, #12
   31bfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   31c02:	2304      	movs	r3, #4
   31c04:	f04f 0500 	mov.w	r5, #0
   31c08:	f363 0507 	bfi	r5, r3, #0, #8
   31c0c:	f012 fd9e 	bl	4474c <log_strdup>
   31c10:	f364 158f 	bfi	r5, r4, #6, #10
   31c14:	4603      	mov	r3, r0
   31c16:	4a1a      	ldr	r2, [pc, #104]	; (31c80 <fota_settings_set+0xb4>)
   31c18:	491b      	ldr	r1, [pc, #108]	; (31c88 <fota_settings_set+0xbc>)
   31c1a:	4628      	mov	r0, r5
   31c1c:	9700      	str	r7, [sp, #0]
   31c1e:	f012 fd82 	bl	44726 <log_string_sync>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   31c22:	481a      	ldr	r0, [pc, #104]	; (31c8c <fota_settings_set+0xc0>)
   31c24:	f7eb fb1e 	bl	1d264 <strlen>
   31c28:	4918      	ldr	r1, [pc, #96]	; (31c8c <fota_settings_set+0xc0>)
   31c2a:	4602      	mov	r2, r0
   31c2c:	4630      	mov	r0, r6
   31c2e:	f016 fca4 	bl	4857a <strncmp>
   31c32:	4605      	mov	r5, r0
   31c34:	b110      	cbz	r0, 31c3c <fota_settings_set+0x70>
	return -ENOTSUP;
   31c36:	f06f 0585 	mvn.w	r5, #133	; 0x85
   31c3a:	e7de      	b.n	31bfa <fota_settings_set+0x2e>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   31c3c:	2f27      	cmp	r7, #39	; 0x27
   31c3e:	d1fa      	bne.n	31c36 <fota_settings_set+0x6a>
		if (read_cb(cb_arg, (void *)&saved_job, len_rd) == len_rd) {
   31c40:	4e13      	ldr	r6, [pc, #76]	; (31c90 <fota_settings_set+0xc4>)
   31c42:	463a      	mov	r2, r7
   31c44:	4631      	mov	r1, r6
   31c46:	4648      	mov	r0, r9
   31c48:	47c0      	blx	r8
   31c4a:	2827      	cmp	r0, #39	; 0x27
   31c4c:	d1f3      	bne.n	31c36 <fota_settings_set+0x6a>
			LOG_DBG("Saved job: %s, type: %d, validate: %d",
   31c4e:	2304      	movs	r3, #4
   31c50:	f04f 0700 	mov.w	r7, #0
   31c54:	1cb0      	adds	r0, r6, #2
   31c56:	f363 0707 	bfi	r7, r3, #0, #8
   31c5a:	f012 fd77 	bl	4474c <log_strdup>
   31c5e:	7833      	ldrb	r3, [r6, #0]
   31c60:	f364 178f 	bfi	r7, r4, #6, #10
   31c64:	9301      	str	r3, [sp, #4]
   31c66:	7873      	ldrb	r3, [r6, #1]
   31c68:	4a05      	ldr	r2, [pc, #20]	; (31c80 <fota_settings_set+0xb4>)
   31c6a:	9300      	str	r3, [sp, #0]
   31c6c:	4909      	ldr	r1, [pc, #36]	; (31c94 <fota_settings_set+0xc8>)
   31c6e:	4603      	mov	r3, r0
   31c70:	4638      	mov	r0, r7
   31c72:	f012 fd58 	bl	44726 <log_string_sync>
			return 0;
   31c76:	e7c0      	b.n	31bfa <fota_settings_set+0x2e>
   31c78:	00049890 	.word	0x00049890
   31c7c:	00049788 	.word	0x00049788
   31c80:	000507be 	.word	0x000507be
   31c84:	000508b4 	.word	0x000508b4
   31c88:	00050010 	.word	0x00050010
   31c8c:	00050afa 	.word	0x00050afa
   31c90:	20020aca 	.word	0x20020aca
   31c94:	000508c4 	.word	0x000508c4

00031c98 <publish>:
	memset(job, 0, sizeof(*job));
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
}

static int publish(const struct mqtt_publish_param * const pub)
{
   31c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(pub != NULL);

	int ret;

	LOG_DBG("Topic: %s",
   31c9a:	2304      	movs	r3, #4
   31c9c:	f04f 0600 	mov.w	r6, #0
   31ca0:	4c1c      	ldr	r4, [pc, #112]	; (31d14 <publish+0x7c>)
   31ca2:	f363 0607 	bfi	r6, r3, #0, #8
   31ca6:	4b1c      	ldr	r3, [pc, #112]	; (31d18 <publish+0x80>)
{
   31ca8:	4605      	mov	r5, r0
	LOG_DBG("Topic: %s",
   31caa:	6800      	ldr	r0, [r0, #0]
   31cac:	1ae4      	subs	r4, r4, r3
   31cae:	f012 fd4d 	bl	4474c <log_strdup>
   31cb2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   31cb6:	f364 168f 	bfi	r6, r4, #6, #10
   31cba:	4603      	mov	r3, r0
   31cbc:	4a17      	ldr	r2, [pc, #92]	; (31d1c <publish+0x84>)
   31cbe:	4918      	ldr	r1, [pc, #96]	; (31d20 <publish+0x88>)
   31cc0:	4630      	mov	r0, r6
   31cc2:	f012 fd30 	bl	44726 <log_string_sync>
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
   31cc6:	e9d5 0703 	ldrd	r0, r7, [r5, #12]
   31cca:	2304      	movs	r3, #4
   31ccc:	f04f 0600 	mov.w	r6, #0
   31cd0:	f363 0607 	bfi	r6, r3, #0, #8
   31cd4:	f012 fd3a 	bl	4474c <log_strdup>
   31cd8:	f364 168f 	bfi	r6, r4, #6, #10
   31cdc:	9000      	str	r0, [sp, #0]
   31cde:	463b      	mov	r3, r7
   31ce0:	4a0e      	ldr	r2, [pc, #56]	; (31d1c <publish+0x84>)
   31ce2:	4910      	ldr	r1, [pc, #64]	; (31d24 <publish+0x8c>)
   31ce4:	4630      	mov	r0, r6
   31ce6:	f012 fd1e 	bl	44726 <log_string_sync>
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   31cea:	4b0f      	ldr	r3, [pc, #60]	; (31d28 <publish+0x90>)
   31cec:	4629      	mov	r1, r5
   31cee:	6818      	ldr	r0, [r3, #0]
   31cf0:	f014 fb52 	bl	46398 <mqtt_publish>
	if (ret) {
   31cf4:	4605      	mov	r5, r0
   31cf6:	b150      	cbz	r0, 31d0e <publish+0x76>
		LOG_ERR("Publish failed: %d", ret);
   31cf8:	f04f 0000 	mov.w	r0, #0
   31cfc:	2301      	movs	r3, #1
   31cfe:	f363 0007 	bfi	r0, r3, #0, #8
   31d02:	f364 108f 	bfi	r0, r4, #6, #10
   31d06:	462a      	mov	r2, r5
   31d08:	4908      	ldr	r1, [pc, #32]	; (31d2c <publish+0x94>)
   31d0a:	f012 fd0c 	bl	44726 <log_string_sync>
	}
	return ret;
}
   31d0e:	4628      	mov	r0, r5
   31d10:	b003      	add	sp, #12
   31d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31d14:	00049890 	.word	0x00049890
   31d18:	00049788 	.word	0x00049788
   31d1c:	00050857 	.word	0x00050857
   31d20:	00050c2a 	.word	0x00050c2a
   31d24:	00050c38 	.word	0x00050c38
   31d28:	200258b0 	.word	0x200258b0
   31d2c:	00050c53 	.word	0x00050c53

00031d30 <save_validate_status>:
{
   31d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31d34:	4688      	mov	r8, r1
   31d36:	b085      	sub	sp, #20
   31d38:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(job_id != NULL);
   31d3a:	4606      	mov	r6, r0
   31d3c:	b958      	cbnz	r0, 31d56 <save_validate_status+0x26>
   31d3e:	492a      	ldr	r1, [pc, #168]	; (31de8 <save_validate_status+0xb8>)
   31d40:	482a      	ldr	r0, [pc, #168]	; (31dec <save_validate_status+0xbc>)
   31d42:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   31d46:	4a2a      	ldr	r2, [pc, #168]	; (31df0 <save_validate_status+0xc0>)
   31d48:	f012 fac2 	bl	442d0 <printk>
   31d4c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   31d50:	4827      	ldr	r0, [pc, #156]	; (31df0 <save_validate_status+0xc0>)
   31d52:	f012 fcd7 	bl	44704 <assert_post_action>
	LOG_DBG("%s() - %s, %d, %d",
   31d56:	2304      	movs	r3, #4
   31d58:	f04f 0500 	mov.w	r5, #0
   31d5c:	4c25      	ldr	r4, [pc, #148]	; (31df4 <save_validate_status+0xc4>)
   31d5e:	f363 0507 	bfi	r5, r3, #0, #8
   31d62:	4b25      	ldr	r3, [pc, #148]	; (31df8 <save_validate_status+0xc8>)
   31d64:	4825      	ldr	r0, [pc, #148]	; (31dfc <save_validate_status+0xcc>)
   31d66:	1ae4      	subs	r4, r4, r3
   31d68:	f012 fcf0 	bl	4474c <log_strdup>
   31d6c:	4681      	mov	r9, r0
   31d6e:	4630      	mov	r0, r6
   31d70:	f012 fcec 	bl	4474c <log_strdup>
   31d74:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   31d78:	f364 158f 	bfi	r5, r4, #6, #10
   31d7c:	9000      	str	r0, [sp, #0]
   31d7e:	e9cd 8701 	strd	r8, r7, [sp, #4]
   31d82:	4628      	mov	r0, r5
   31d84:	464b      	mov	r3, r9
   31d86:	4a1d      	ldr	r2, [pc, #116]	; (31dfc <save_validate_status+0xcc>)
   31d88:	491d      	ldr	r1, [pc, #116]	; (31e00 <save_validate_status+0xd0>)
   31d8a:	f012 fccc 	bl	44726 <log_string_sync>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   31d8e:	2f05      	cmp	r7, #5
   31d90:	481c      	ldr	r0, [pc, #112]	; (31e04 <save_validate_status+0xd4>)
   31d92:	d11d      	bne.n	31dd0 <save_validate_status+0xa0>
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   31d94:	2303      	movs	r3, #3
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   31d96:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   31d98:	7043      	strb	r3, [r0, #1]
		memset(saved_job.id, 0, sizeof(saved_job.id));
   31d9a:	2225      	movs	r2, #37	; 0x25
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   31d9c:	f800 1b02 	strb.w	r1, [r0], #2
		memset(saved_job.id, 0, sizeof(saved_job.id));
   31da0:	f016 fa12 	bl	481c8 <memset>
	ret = settings_save_one(SETTINGS_FULL_FOTA_JOB, &saved_job,
   31da4:	2227      	movs	r2, #39	; 0x27
   31da6:	4917      	ldr	r1, [pc, #92]	; (31e04 <save_validate_status+0xd4>)
   31da8:	4817      	ldr	r0, [pc, #92]	; (31e08 <save_validate_status+0xd8>)
   31daa:	f7f3 fee7 	bl	25b7c <settings_save_one>
	if (ret) {
   31dae:	4605      	mov	r5, r0
   31db0:	b150      	cbz	r0, 31dc8 <save_validate_status+0x98>
		LOG_ERR("settings_save_one failed: %d", ret);
   31db2:	f04f 0000 	mov.w	r0, #0
   31db6:	2301      	movs	r3, #1
   31db8:	f363 0007 	bfi	r0, r3, #0, #8
   31dbc:	f364 108f 	bfi	r0, r4, #6, #10
   31dc0:	462a      	mov	r2, r5
   31dc2:	4912      	ldr	r1, [pc, #72]	; (31e0c <save_validate_status+0xdc>)
   31dc4:	f012 fcaf 	bl	44726 <log_string_sync>
}
   31dc8:	4628      	mov	r0, r5
   31dca:	b005      	add	sp, #20
   31dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		saved_job.type = job_type;
   31dd0:	f880 8001 	strb.w	r8, [r0, #1]
		saved_job.validate = validate;
   31dd4:	f800 7b02 	strb.w	r7, [r0], #2
		if (job_id != saved_job.id) {
   31dd8:	4286      	cmp	r6, r0
   31dda:	d0e3      	beq.n	31da4 <save_validate_status+0x74>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id));
   31ddc:	2225      	movs	r2, #37	; 0x25
   31dde:	4631      	mov	r1, r6
   31de0:	f016 fbdd 	bl	4859e <strncpy>
   31de4:	e7de      	b.n	31da4 <save_validate_status+0x74>
   31de6:	bf00      	nop
   31de8:	00050ca4 	.word	0x00050ca4
   31dec:	0004b33b 	.word	0x0004b33b
   31df0:	00050c66 	.word	0x00050c66
   31df4:	00049890 	.word	0x00049890
   31df8:	00049788 	.word	0x00049788
   31dfc:	00050815 	.word	0x00050815
   31e00:	00050cba 	.word	0x00050cba
   31e04:	20020aca 	.word	0x20020aca
   31e08:	00050cd0 	.word	0x00050cd0
   31e0c:	00050ce3 	.word	0x00050ce3

00031e10 <reset_topics>:
{
   31e10:	b510      	push	{r4, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   31e12:	4c0b      	ldr	r4, [pc, #44]	; (31e40 <reset_topics+0x30>)
   31e14:	4620      	mov	r0, r4
   31e16:	f015 fef9 	bl	47c0c <reset_topic>
	reset_topic(&topic_updt.topic);
   31e1a:	480a      	ldr	r0, [pc, #40]	; (31e44 <reset_topics+0x34>)
   31e1c:	f015 fef6 	bl	47c0c <reset_topic>
	reset_topic(&topic_req.topic);
   31e20:	4809      	ldr	r0, [pc, #36]	; (31e48 <reset_topics+0x38>)
   31e22:	f015 fef3 	bl	47c0c <reset_topic>
	reset_topic(&sub_topics[SUB_TOPIC_IDX_BLE_RCV].topic);
   31e26:	f104 000c 	add.w	r0, r4, #12
   31e2a:	f015 feef 	bl	47c0c <reset_topic>
	reset_topic(&topic_ble_updt.topic);
   31e2e:	4807      	ldr	r0, [pc, #28]	; (31e4c <reset_topics+0x3c>)
   31e30:	f015 feec 	bl	47c0c <reset_topic>
}
   31e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	reset_topic(&topic_ble_req.topic);
   31e38:	4805      	ldr	r0, [pc, #20]	; (31e50 <reset_topics+0x40>)
   31e3a:	f015 bee7 	b.w	47c0c <reset_topic>
   31e3e:	bf00      	nop
   31e40:	20020880 	.word	0x20020880
   31e44:	200208bc 	.word	0x200208bc
   31e48:	200208b0 	.word	0x200208b0
   31e4c:	200208a4 	.word	0x200208a4
   31e50:	20020898 	.word	0x20020898

00031e54 <build_topic>:
{
   31e54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   31e58:	4690      	mov	r8, r2
	size_t size = endpoint->size + strlen(client_id) +
   31e5a:	684c      	ldr	r4, [r1, #4]
{
   31e5c:	460f      	mov	r7, r1
   31e5e:	461e      	mov	r6, r3
   31e60:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   31e62:	f7eb f9ff 	bl	1d264 <strlen>
   31e66:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   31e68:	4640      	mov	r0, r8
   31e6a:	f7eb f9fb 	bl	1d264 <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   31e6e:	3401      	adds	r4, #1
   31e70:	4454      	add	r4, sl
   31e72:	4404      	add	r4, r0
	buf = nrf_cloud_calloc(size, 1);
   31e74:	2101      	movs	r1, #1
   31e76:	4620      	mov	r0, r4
   31e78:	f016 f950 	bl	4811c <k_calloc>
	if (!buf) {
   31e7c:	4605      	mov	r5, r0
   31e7e:	b938      	cbnz	r0, 31e90 <build_topic+0x3c>
		reset_topic(topic_out);
   31e80:	4630      	mov	r0, r6
   31e82:	f015 fec3 	bl	47c0c <reset_topic>
		return ret;
   31e86:	f06f 000b 	mvn.w	r0, #11
}
   31e8a:	b002      	add	sp, #8
   31e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintf(buf, size, "%s%s%s",
   31e90:	e9cd 9800 	strd	r9, r8, [sp]
   31e94:	683b      	ldr	r3, [r7, #0]
   31e96:	4a09      	ldr	r2, [pc, #36]	; (31ebc <build_topic+0x68>)
   31e98:	4621      	mov	r1, r4
   31e9a:	f010 fd2b 	bl	428f4 <sniprintf>
	if (ret <= 0 || ret >= size) {
   31e9e:	2800      	cmp	r0, #0
   31ea0:	dd01      	ble.n	31ea6 <build_topic+0x52>
   31ea2:	42a0      	cmp	r0, r4
   31ea4:	d305      	bcc.n	31eb2 <build_topic+0x5e>
		nrf_cloud_free(buf);
   31ea6:	4628      	mov	r0, r5
   31ea8:	f016 f933 	bl	48112 <k_free>
		return ret;
   31eac:	f06f 0006 	mvn.w	r0, #6
   31eb0:	e7eb      	b.n	31e8a <build_topic+0x36>
	topic_out->size = ret;
   31eb2:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   31eb6:	2000      	movs	r0, #0
   31eb8:	e7e7      	b.n	31e8a <build_topic+0x36>
   31eba:	bf00      	nop
   31ebc:	00050897 	.word	0x00050897

00031ec0 <send_event.constprop.1>:
	struct nrf_cloud_fota_evt evt = {
   31ec0:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   31ec2:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   31ec4:	f8cd 3002 	str.w	r3, [sp, #2]
   31ec8:	f8ad 3006 	strh.w	r3, [sp, #6]
		.status = job->status,
   31ecc:	4b0b      	ldr	r3, [pc, #44]	; (31efc <send_event.constprop.1+0x3c>)
	switch (id) {
   31ece:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   31ed0:	791a      	ldrb	r2, [r3, #4]
   31ed2:	f88d 0000 	strb.w	r0, [sp]
   31ed6:	f88d 2001 	strb.w	r2, [sp, #1]
   31eda:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   31edc:	bf08      	it	eq
   31ede:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   31ee0:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   31ee4:	bf08      	it	eq
   31ee6:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   31eea:	4b05      	ldr	r3, [pc, #20]	; (31f00 <send_event.constprop.1+0x40>)
   31eec:	681b      	ldr	r3, [r3, #0]
   31eee:	b10b      	cbz	r3, 31ef4 <send_event.constprop.1+0x34>
		event_cb(&evt);
   31ef0:	4668      	mov	r0, sp
   31ef2:	4798      	blx	r3
}
   31ef4:	b003      	add	sp, #12
   31ef6:	f85d fb04 	ldr.w	pc, [sp], #4
   31efa:	bf00      	nop
   31efc:	200258b4 	.word	0x200258b4
   31f00:	200258dc 	.word	0x200258dc

00031f04 <cleanup_job.constprop.2>:
static void cleanup_job(struct nrf_cloud_fota_job * const job)
   31f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	LOG_DBG("%s() - ID: %s", log_strdup(__func__),
   31f06:	2304      	movs	r3, #4
   31f08:	f04f 0500 	mov.w	r5, #0
   31f0c:	4a13      	ldr	r2, [pc, #76]	; (31f5c <cleanup_job.constprop.2+0x58>)
   31f0e:	f363 0507 	bfi	r5, r3, #0, #8
   31f12:	4b13      	ldr	r3, [pc, #76]	; (31f60 <cleanup_job.constprop.2+0x5c>)
   31f14:	4813      	ldr	r0, [pc, #76]	; (31f64 <cleanup_job.constprop.2+0x60>)
   31f16:	1a9b      	subs	r3, r3, r2
   31f18:	08db      	lsrs	r3, r3, #3
   31f1a:	f363 158f 	bfi	r5, r3, #6, #10
   31f1e:	f012 fc15 	bl	4474c <log_strdup>
   31f22:	4c11      	ldr	r4, [pc, #68]	; (31f68 <cleanup_job.constprop.2+0x64>)
   31f24:	4606      	mov	r6, r0
   31f26:	68e0      	ldr	r0, [r4, #12]
   31f28:	b1a8      	cbz	r0, 31f56 <cleanup_job.constprop.2+0x52>
   31f2a:	f012 fc0f 	bl	4474c <log_strdup>
   31f2e:	9000      	str	r0, [sp, #0]
   31f30:	4633      	mov	r3, r6
   31f32:	4628      	mov	r0, r5
   31f34:	4a0b      	ldr	r2, [pc, #44]	; (31f64 <cleanup_job.constprop.2+0x60>)
   31f36:	490d      	ldr	r1, [pc, #52]	; (31f6c <cleanup_job.constprop.2+0x68>)
   31f38:	f012 fbf5 	bl	44726 <log_string_sync>
	if (job->parsed_payload) {
   31f3c:	6820      	ldr	r0, [r4, #0]
   31f3e:	b108      	cbz	r0, 31f44 <cleanup_job.constprop.2+0x40>
		cJSON_free(job->parsed_payload);
   31f40:	f7f9 f95c 	bl	2b1fc <cJSON_free>
	memset(job, 0, sizeof(*job));
   31f44:	2228      	movs	r2, #40	; 0x28
   31f46:	2100      	movs	r1, #0
   31f48:	4807      	ldr	r0, [pc, #28]	; (31f68 <cleanup_job.constprop.2+0x64>)
   31f4a:	f016 f93d 	bl	481c8 <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   31f4e:	2303      	movs	r3, #3
   31f50:	7223      	strb	r3, [r4, #8]
}
   31f52:	b002      	add	sp, #8
   31f54:	bd70      	pop	{r4, r5, r6, pc}
	LOG_DBG("%s() - ID: %s", log_strdup(__func__),
   31f56:	4806      	ldr	r0, [pc, #24]	; (31f70 <cleanup_job.constprop.2+0x6c>)
   31f58:	e7e9      	b.n	31f2e <cleanup_job.constprop.2+0x2a>
   31f5a:	bf00      	nop
   31f5c:	00049788 	.word	0x00049788
   31f60:	00049890 	.word	0x00049890
   31f64:	0005084b 	.word	0x0005084b
   31f68:	200258b4 	.word	0x200258b4
   31f6c:	000508a2 	.word	0x000508a2
   31f70:	0005089e 	.word	0x0005089e

00031f74 <send_job_update>:
		return "";
	}
}

static int send_job_update(struct nrf_cloud_fota_job * const job)
{
   31f74:	b570      	push	{r4, r5, r6, lr}
	if (job == NULL) {
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   31f76:	4b25      	ldr	r3, [pc, #148]	; (3200c <send_job_update+0x98>)
{
   31f78:	b086      	sub	sp, #24
	} else if (client_mqtt == NULL) {
   31f7a:	681b      	ldr	r3, [r3, #0]
{
   31f7c:	4606      	mov	r6, r0
	} else if (client_mqtt == NULL) {
   31f7e:	2b00      	cmp	r3, #0
   31f80:	d03b      	beq.n	31ffa <send_job_update+0x86>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   31f82:	4b23      	ldr	r3, [pc, #140]	; (32010 <send_job_update+0x9c>)
   31f84:	681b      	ldr	r3, [r3, #0]
   31f86:	2b00      	cmp	r3, #0
   31f88:	d03a      	beq.n	32000 <send_job_update+0x8c>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   31f8a:	2218      	movs	r2, #24
   31f8c:	2100      	movs	r1, #0
   31f8e:	4668      	mov	r0, sp
   31f90:	f016 f91a 	bl	481c8 <memset>
   31f94:	f44f 5309 	mov.w	r3, #8768	; 0x2240
   31f98:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NRF_CLOUD_FOTA_UPDATE_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON * array = cJSON_CreateArray();
   31f9c:	f7f9 f916 	bl	2b1cc <cJSON_CreateArray>

	if (!array) {
   31fa0:	4605      	mov	r5, r0
   31fa2:	b380      	cbz	r0, 32006 <send_job_update+0x92>
		return -ENOMEM;
	}

	result = add_string_to_array(array, job->info.id) &&
   31fa4:	68f1      	ldr	r1, [r6, #12]
   31fa6:	f015 fdfe 	bl	47ba6 <add_string_to_array>
   31faa:	b118      	cbz	r0, 31fb4 <send_job_update+0x40>
		 add_number_to_array(array, job->status);
   31fac:	7931      	ldrb	r1, [r6, #4]
   31fae:	4628      	mov	r0, r5
   31fb0:	f015 fde6 	bl	47b80 <add_number_to_array>

	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   31fb4:	7933      	ldrb	r3, [r6, #4]
	result = add_string_to_array(array, job->info.id) &&
   31fb6:	4604      	mov	r4, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   31fb8:	2b07      	cmp	r3, #7
   31fba:	d111      	bne.n	31fe0 <send_job_update+0x6c>
		result &= add_number_to_array(array, job->dl_progress);
   31fbc:	6a31      	ldr	r1, [r6, #32]
   31fbe:	4628      	mov	r0, r5
   31fc0:	f015 fdde 	bl	47b80 <add_number_to_array>
	} else {
		result &= add_string_to_array(array,
   31fc4:	4020      	ands	r0, r4
   31fc6:	f000 0001 	and.w	r0, r0, #1
					     get_error_string(job->error));
	}

	if (!result) {
   31fca:	b910      	cbnz	r0, 31fd2 <send_job_update+0x5e>
		cJSON_free(array);
   31fcc:	4628      	mov	r0, r5
   31fce:	f7f9 f915 	bl	2b1fc <cJSON_free>
		ret = -ENOMEM;
	}

	return publish_and_free_array(array, &topic_updt, &param);
   31fd2:	466a      	mov	r2, sp
   31fd4:	490e      	ldr	r1, [pc, #56]	; (32010 <send_job_update+0x9c>)
   31fd6:	4628      	mov	r0, r5
   31fd8:	f015 fdf4 	bl	47bc4 <publish_and_free_array>
}
   31fdc:	b006      	add	sp, #24
   31fde:	bd70      	pop	{r4, r5, r6, pc}
	switch (err) {
   31fe0:	7f33      	ldrb	r3, [r6, #28]
		result &= add_string_to_array(array,
   31fe2:	4628      	mov	r0, r5
   31fe4:	3b01      	subs	r3, #1
   31fe6:	b2db      	uxtb	r3, r3
   31fe8:	2b03      	cmp	r3, #3
   31fea:	bf96      	itet	ls
   31fec:	4a09      	ldrls	r2, [pc, #36]	; (32014 <send_job_update+0xa0>)
   31fee:	490a      	ldrhi	r1, [pc, #40]	; (32018 <send_job_update+0xa4>)
   31ff0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   31ff4:	f015 fdd7 	bl	47ba6 <add_string_to_array>
   31ff8:	e7e4      	b.n	31fc4 <send_job_update+0x50>
		return -ENXIO;
   31ffa:	f06f 0005 	mvn.w	r0, #5
   31ffe:	e7ed      	b.n	31fdc <send_job_update+0x68>
		return -EHOSTUNREACH;
   32000:	f06f 0075 	mvn.w	r0, #117	; 0x75
   32004:	e7ea      	b.n	31fdc <send_job_update+0x68>
		return -ENOMEM;
   32006:	f06f 000b 	mvn.w	r0, #11
   3200a:	e7e7      	b.n	31fdc <send_job_update+0x68>
   3200c:	200258b0 	.word	0x200258b0
   32010:	200208bc 	.word	0x200208bc
   32014:	0004a40c 	.word	0x0004a40c
   32018:	0004c55d 	.word	0x0004c55d

0003201c <http_fota_handler>:
{
   3201c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(evt != NULL);
   3201e:	4604      	mov	r4, r0
   32020:	b958      	cbnz	r0, 3203a <http_fota_handler+0x1e>
   32022:	493a      	ldr	r1, [pc, #232]	; (3210c <http_fota_handler+0xf0>)
   32024:	483a      	ldr	r0, [pc, #232]	; (32110 <http_fota_handler+0xf4>)
   32026:	f240 2309 	movw	r3, #521	; 0x209
   3202a:	4a3a      	ldr	r2, [pc, #232]	; (32114 <http_fota_handler+0xf8>)
   3202c:	f012 f950 	bl	442d0 <printk>
   32030:	f240 2109 	movw	r1, #521	; 0x209
   32034:	4837      	ldr	r0, [pc, #220]	; (32114 <http_fota_handler+0xf8>)
   32036:	f012 fb65 	bl	44704 <assert_post_action>
	LOG_DBG("evt: %d", evt->id);
   3203a:	2304      	movs	r3, #4
   3203c:	f04f 0000 	mov.w	r0, #0
   32040:	4a35      	ldr	r2, [pc, #212]	; (32118 <http_fota_handler+0xfc>)
   32042:	f363 0007 	bfi	r0, r3, #0, #8
   32046:	4b35      	ldr	r3, [pc, #212]	; (3211c <http_fota_handler+0x100>)
   32048:	4935      	ldr	r1, [pc, #212]	; (32120 <http_fota_handler+0x104>)
   3204a:	1a9b      	subs	r3, r3, r2
   3204c:	08db      	lsrs	r3, r3, #3
   3204e:	f363 108f 	bfi	r0, r3, #6, #10
   32052:	4a34      	ldr	r2, [pc, #208]	; (32124 <http_fota_handler+0x108>)
   32054:	7823      	ldrb	r3, [r4, #0]
   32056:	f012 fb66 	bl	44726 <log_string_sync>
	switch (evt->id) {
   3205a:	7823      	ldrb	r3, [r4, #0]
   3205c:	4e32      	ldr	r6, [pc, #200]	; (32128 <http_fota_handler+0x10c>)
   3205e:	2b04      	cmp	r3, #4
   32060:	d81c      	bhi.n	3209c <http_fota_handler+0x80>
   32062:	e8df f003 	tbb	[pc, r3]
   32066:	0338      	.short	0x0338
   32068:	1e0e      	.short	0x1e0e
   3206a:	20          	.byte	0x20
   3206b:	00          	.byte	0x00
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   3206c:	2201      	movs	r2, #1
   3206e:	4d2f      	ldr	r5, [pc, #188]	; (3212c <http_fota_handler+0x110>)
		save_validate_status(current_fota.info.id,
   32070:	7a29      	ldrb	r1, [r5, #8]
   32072:	68e8      	ldr	r0, [r5, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   32074:	712a      	strb	r2, [r5, #4]
		save_validate_status(current_fota.info.id,
   32076:	f7ff fe5b 	bl	31d30 <save_validate_status>
		send_job_update(&current_fota);
   3207a:	4628      	mov	r0, r5
		send_job_update(&current_fota);
   3207c:	f7ff ff7a 	bl	31f74 <send_job_update>
		break;
   32080:	e00c      	b.n	3209c <http_fota_handler+0x80>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   32082:	2201      	movs	r2, #1
   32084:	4d29      	ldr	r5, [pc, #164]	; (3212c <http_fota_handler+0x110>)
		save_validate_status(current_fota.info.id,
   32086:	7a29      	ldrb	r1, [r5, #8]
   32088:	68e8      	ldr	r0, [r5, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   3208a:	712a      	strb	r2, [r5, #4]
		save_validate_status(current_fota.info.id,
   3208c:	f7ff fe50 	bl	31d30 <save_validate_status>
		send_job_update(&current_fota);
   32090:	4628      	mov	r0, r5
   32092:	f7ff ff6f 	bl	31f74 <send_job_update>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   32096:	2003      	movs	r0, #3
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   32098:	f7ff ff12 	bl	31ec0 <send_event.constprop.1>
	last_fota_dl_evt = evt->id;
   3209c:	7823      	ldrb	r3, [r4, #0]
   3209e:	7033      	strb	r3, [r6, #0]
}
   320a0:	bd70      	pop	{r4, r5, r6, pc}
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   320a2:	2004      	movs	r0, #4
   320a4:	e7f8      	b.n	32098 <http_fota_handler+0x7c>
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE) {
   320a6:	7833      	ldrb	r3, [r6, #0]
   320a8:	2b03      	cmp	r3, #3
			current_fota.status = NRF_CLOUD_FOTA_FAILED;
   320aa:	bf14      	ite	ne
   320ac:	2202      	movne	r2, #2
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   320ae:	2206      	moveq	r2, #6
   320b0:	4b1e      	ldr	r3, [pc, #120]	; (3212c <http_fota_handler+0x110>)
   320b2:	bf0e      	itee	eq
   320b4:	711a      	strbeq	r2, [r3, #4]
			current_fota.status = NRF_CLOUD_FOTA_FAILED;
   320b6:	711a      	strbne	r2, [r3, #4]
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   320b8:	771a      	strbne	r2, [r3, #28]
		save_validate_status(current_fota.info.id,
   320ba:	7a19      	ldrb	r1, [r3, #8]
   320bc:	2205      	movs	r2, #5
   320be:	68d8      	ldr	r0, [r3, #12]
   320c0:	f7ff fe36 	bl	31d30 <save_validate_status>
		send_job_update(&current_fota);
   320c4:	4819      	ldr	r0, [pc, #100]	; (3212c <http_fota_handler+0x110>)
   320c6:	f7ff ff55 	bl	31f74 <send_job_update>
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   320ca:	2002      	movs	r0, #2
   320cc:	f7ff fef8 	bl	31ec0 <send_event.constprop.1>
		cleanup_job(&current_fota);
   320d0:	f7ff ff18 	bl	31f04 <cleanup_job.constprop.2>
		break;
   320d4:	e7e2      	b.n	3209c <http_fota_handler+0x80>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   320d6:	2207      	movs	r2, #7
   320d8:	4b14      	ldr	r3, [pc, #80]	; (3212c <http_fota_handler+0x110>)
		if ((current_fota.sent_dl_progress == 100) &&
   320da:	6a59      	ldr	r1, [r3, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   320dc:	711a      	strb	r2, [r3, #4]
		current_fota.dl_progress = evt->progress;
   320de:	6862      	ldr	r2, [r4, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   320e0:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   320e2:	621a      	str	r2, [r3, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   320e4:	d108      	bne.n	320f8 <http_fota_handler+0xdc>
   320e6:	2a64      	cmp	r2, #100	; 0x64
   320e8:	d0d8      	beq.n	3209c <http_fota_handler+0x80>
		if (current_fota.sent_dl_progress >
   320ea:	2a63      	cmp	r2, #99	; 0x63
   320ec:	dd06      	ble.n	320fc <http_fota_handler+0xe0>
		    ((current_fota.dl_progress -
   320ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
   320f0:	1a51      	subs	r1, r2, r1
		if (current_fota.dl_progress != 100 &&
   320f2:	2909      	cmp	r1, #9
   320f4:	dc06      	bgt.n	32104 <http_fota_handler+0xe8>
	last_fota_dl_evt = evt->id;
   320f6:	e7d1      	b.n	3209c <http_fota_handler+0x80>
		if (current_fota.sent_dl_progress >
   320f8:	428a      	cmp	r2, r1
   320fa:	da01      	bge.n	32100 <http_fota_handler+0xe4>
			current_fota.sent_dl_progress = 0;
   320fc:	2100      	movs	r1, #0
   320fe:	6259      	str	r1, [r3, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   32100:	2a64      	cmp	r2, #100	; 0x64
   32102:	d1f4      	bne.n	320ee <http_fota_handler+0xd2>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   32104:	625a      	str	r2, [r3, #36]	; 0x24
		send_job_update(&current_fota);
   32106:	4809      	ldr	r0, [pc, #36]	; (3212c <http_fota_handler+0x110>)
   32108:	e7b8      	b.n	3207c <http_fota_handler+0x60>
   3210a:	bf00      	nop
   3210c:	000508ee 	.word	0x000508ee
   32110:	0004b33b 	.word	0x0004b33b
   32114:	00050c66 	.word	0x00050c66
   32118:	00049788 	.word	0x00049788
   3211c:	00049890 	.word	0x00049890
   32120:	00050901 	.word	0x00050901
   32124:	0005082a 	.word	0x0005082a
   32128:	20020ac9 	.word	0x20020ac9
   3212c:	200258b4 	.word	0x200258b4

00032130 <nrf_cloud_fota_init>:
{
   32130:	b570      	push	{r4, r5, r6, lr}
	if (cb == NULL) {
   32132:	b978      	cbnz	r0, 32154 <nrf_cloud_fota_init+0x24>
		LOG_ERR("Invalid parameter");
   32134:	2301      	movs	r3, #1
   32136:	4a61      	ldr	r2, [pc, #388]	; (322bc <nrf_cloud_fota_init+0x18c>)
   32138:	f363 0007 	bfi	r0, r3, #0, #8
   3213c:	4b60      	ldr	r3, [pc, #384]	; (322c0 <nrf_cloud_fota_init+0x190>)
   3213e:	4961      	ldr	r1, [pc, #388]	; (322c4 <nrf_cloud_fota_init+0x194>)
   32140:	1a9b      	subs	r3, r3, r2
   32142:	08db      	lsrs	r3, r3, #3
   32144:	f363 108f 	bfi	r0, r3, #6, #10
   32148:	f012 faed 	bl	44726 <log_string_sync>
		return -EINVAL;
   3214c:	f06f 0415 	mvn.w	r4, #21
}
   32150:	4620      	mov	r0, r4
   32152:	bd70      	pop	{r4, r5, r6, pc}
	event_cb = cb;
   32154:	4b5c      	ldr	r3, [pc, #368]	; (322c8 <nrf_cloud_fota_init+0x198>)
	if (initialized) {
   32156:	4e5d      	ldr	r6, [pc, #372]	; (322cc <nrf_cloud_fota_init+0x19c>)
	event_cb = cb;
   32158:	6018      	str	r0, [r3, #0]
	if (initialized) {
   3215a:	7833      	ldrb	r3, [r6, #0]
   3215c:	2b00      	cmp	r3, #0
   3215e:	f040 80aa 	bne.w	322b6 <nrf_cloud_fota_init+0x186>
	err = fota_download_init(http_fota_handler);
   32162:	485b      	ldr	r0, [pc, #364]	; (322d0 <nrf_cloud_fota_init+0x1a0>)
   32164:	f001 fe0a 	bl	33d7c <fota_download_init>
	if (err != 0) {
   32168:	4604      	mov	r4, r0
   3216a:	b178      	cbz	r0, 3218c <nrf_cloud_fota_init+0x5c>
		LOG_ERR("fota_download_init error %d", err);
   3216c:	2301      	movs	r3, #1
   3216e:	f04f 0000 	mov.w	r0, #0
   32172:	4a52      	ldr	r2, [pc, #328]	; (322bc <nrf_cloud_fota_init+0x18c>)
   32174:	f363 0007 	bfi	r0, r3, #0, #8
   32178:	4b51      	ldr	r3, [pc, #324]	; (322c0 <nrf_cloud_fota_init+0x190>)
   3217a:	4956      	ldr	r1, [pc, #344]	; (322d4 <nrf_cloud_fota_init+0x1a4>)
   3217c:	1a9b      	subs	r3, r3, r2
   3217e:	08db      	lsrs	r3, r3, #3
   32180:	f363 108f 	bfi	r0, r3, #6, #10
   32184:	4622      	mov	r2, r4
   32186:	f012 face 	bl	44726 <log_string_sync>
		return err;
   3218a:	e7e1      	b.n	32150 <nrf_cloud_fota_init+0x20>
	err = settings_load_subtree(settings_handler_fota.name);
   3218c:	4852      	ldr	r0, [pc, #328]	; (322d8 <nrf_cloud_fota_init+0x1a8>)
   3218e:	f7f3 fd2d 	bl	25bec <settings_load_subtree>
	if (err) {
   32192:	4604      	mov	r4, r0
   32194:	b170      	cbz	r0, 321b4 <nrf_cloud_fota_init+0x84>
		LOG_ERR("Cannot load settings: %d", err);
   32196:	2301      	movs	r3, #1
   32198:	f04f 0000 	mov.w	r0, #0
   3219c:	4a47      	ldr	r2, [pc, #284]	; (322bc <nrf_cloud_fota_init+0x18c>)
   3219e:	f363 0007 	bfi	r0, r3, #0, #8
   321a2:	4b47      	ldr	r3, [pc, #284]	; (322c0 <nrf_cloud_fota_init+0x190>)
   321a4:	494d      	ldr	r1, [pc, #308]	; (322dc <nrf_cloud_fota_init+0x1ac>)
   321a6:	1a9b      	subs	r3, r3, r2
   321a8:	08db      	lsrs	r3, r3, #3
   321aa:	f363 108f 	bfi	r0, r3, #6, #10
   321ae:	4622      	mov	r2, r4
   321b0:	f012 fab9 	bl	44726 <log_string_sync>
	if (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   321b4:	4d4a      	ldr	r5, [pc, #296]	; (322e0 <nrf_cloud_fota_init+0x1b0>)
   321b6:	782b      	ldrb	r3, [r5, #0]
   321b8:	2b01      	cmp	r3, #1
   321ba:	d152      	bne.n	32262 <nrf_cloud_fota_init+0x132>
		if (!boot_is_img_confirmed()) {
   321bc:	f012 fdc5 	bl	44d4a <boot_is_img_confirmed>
   321c0:	2800      	cmp	r0, #0
   321c2:	d15c      	bne.n	3227e <nrf_cloud_fota_init+0x14e>
			err = boot_write_img_confirmed();
   321c4:	f012 fdc8 	bl	44d58 <boot_write_img_confirmed>
			if (err) {
   321c8:	4604      	mov	r4, r0
   321ca:	4b3d      	ldr	r3, [pc, #244]	; (322c0 <nrf_cloud_fota_init+0x190>)
   321cc:	4a3b      	ldr	r2, [pc, #236]	; (322bc <nrf_cloud_fota_init+0x18c>)
				LOG_ERR("FOTA update confirmation failed: %d",
   321ce:	f04f 0000 	mov.w	r0, #0
   321d2:	1a9b      	subs	r3, r3, r2
   321d4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
			if (err) {
   321d8:	2c00      	cmp	r4, #0
   321da:	d045      	beq.n	32268 <nrf_cloud_fota_init+0x138>
				LOG_ERR("FOTA update confirmation failed: %d",
   321dc:	2201      	movs	r2, #1
   321de:	f362 0007 	bfi	r0, r2, #0, #8
   321e2:	f363 108f 	bfi	r0, r3, #6, #10
   321e6:	4622      	mov	r2, r4
   321e8:	493e      	ldr	r1, [pc, #248]	; (322e4 <nrf_cloud_fota_init+0x1b4>)
   321ea:	f012 fa9c 	bl	44726 <log_string_sync>
				validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   321ee:	2203      	movs	r2, #3
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   321f0:	786b      	ldrb	r3, [r5, #1]
   321f2:	2b01      	cmp	r3, #1
   321f4:	d11d      	bne.n	32232 <nrf_cloud_fota_init+0x102>
	int modem_dfu_res = bsdlib_get_init_ret();
   321f6:	f7f9 f89d 	bl	2b334 <bsdlib_get_init_ret>
   321fa:	4931      	ldr	r1, [pc, #196]	; (322c0 <nrf_cloud_fota_init+0x190>)
   321fc:	4a2f      	ldr	r2, [pc, #188]	; (322bc <nrf_cloud_fota_init+0x18c>)
	switch (modem_dfu_res) {
   321fe:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   32202:	eba1 0102 	sub.w	r1, r1, r2
	int modem_dfu_res = bsdlib_get_init_ret();
   32206:	4603      	mov	r3, r0
	switch (modem_dfu_res) {
   32208:	f3c1 01c9 	ubfx	r1, r1, #3, #10
   3220c:	dd46      	ble.n	3229c <nrf_cloud_fota_init+0x16c>
   3220e:	4a36      	ldr	r2, [pc, #216]	; (322e8 <nrf_cloud_fota_init+0x1b8>)
   32210:	4290      	cmp	r0, r2
   32212:	dd36      	ble.n	32282 <nrf_cloud_fota_init+0x152>
   32214:	4a35      	ldr	r2, [pc, #212]	; (322ec <nrf_cloud_fota_init+0x1bc>)
   32216:	4290      	cmp	r0, r2
   32218:	d140      	bne.n	3229c <nrf_cloud_fota_init+0x16c>
		LOG_DBG("Modem FOTA OK");
   3221a:	2304      	movs	r3, #4
   3221c:	f04f 0000 	mov.w	r0, #0
   32220:	f363 0007 	bfi	r0, r3, #0, #8
   32224:	f361 108f 	bfi	r0, r1, #6, #10
   32228:	4a31      	ldr	r2, [pc, #196]	; (322f0 <nrf_cloud_fota_init+0x1c0>)
   3222a:	4932      	ldr	r1, [pc, #200]	; (322f4 <nrf_cloud_fota_init+0x1c4>)
   3222c:	f012 fa7b 	bl	44726 <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_PASS;
   32230:	2202      	movs	r2, #2
		save_validate_status(saved_job.id, saved_job.type, validate);
   32232:	7869      	ldrb	r1, [r5, #1]
   32234:	4830      	ldr	r0, [pc, #192]	; (322f8 <nrf_cloud_fota_init+0x1c8>)
   32236:	f7ff fd7b 	bl	31d30 <save_validate_status>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   3223a:	786d      	ldrb	r5, [r5, #1]
   3223c:	2d01      	cmp	r5, #1
   3223e:	d110      	bne.n	32262 <nrf_cloud_fota_init+0x132>
			LOG_INF("Rebooting to complete modem FOTA");
   32240:	2303      	movs	r3, #3
   32242:	f04f 0000 	mov.w	r0, #0
   32246:	4a1d      	ldr	r2, [pc, #116]	; (322bc <nrf_cloud_fota_init+0x18c>)
   32248:	f363 0007 	bfi	r0, r3, #0, #8
   3224c:	4b1c      	ldr	r3, [pc, #112]	; (322c0 <nrf_cloud_fota_init+0x190>)
   3224e:	492b      	ldr	r1, [pc, #172]	; (322fc <nrf_cloud_fota_init+0x1cc>)
   32250:	1a9b      	subs	r3, r3, r2
   32252:	08db      	lsrs	r3, r3, #3
   32254:	f363 108f 	bfi	r0, r3, #6, #10
   32258:	f012 fa65 	bl	44726 <log_string_sync>
			sys_reboot(SYS_REBOOT_COLD);
   3225c:	4628      	mov	r0, r5
   3225e:	f7f4 f919 	bl	26494 <sys_reboot>
	initialized = true;
   32262:	2301      	movs	r3, #1
   32264:	7033      	strb	r3, [r6, #0]
	return err;
   32266:	e773      	b.n	32150 <nrf_cloud_fota_init+0x20>
				LOG_DBG("FOTA update confirmed");
   32268:	2204      	movs	r2, #4
   3226a:	f362 0007 	bfi	r0, r2, #0, #8
   3226e:	f363 108f 	bfi	r0, r3, #6, #10
   32272:	4a23      	ldr	r2, [pc, #140]	; (32300 <nrf_cloud_fota_init+0x1d0>)
   32274:	4923      	ldr	r1, [pc, #140]	; (32304 <nrf_cloud_fota_init+0x1d4>)
   32276:	f012 fa56 	bl	44726 <log_string_sync>
				validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   3227a:	2202      	movs	r2, #2
   3227c:	e7b8      	b.n	321f0 <nrf_cloud_fota_init+0xc0>
	enum fota_validate_status validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   3227e:	2204      	movs	r2, #4
   32280:	e7b6      	b.n	321f0 <nrf_cloud_fota_init+0xc0>
		LOG_ERR("Modem FOTA error: %d", modem_dfu_res);
   32282:	2201      	movs	r2, #1
   32284:	f04f 0000 	mov.w	r0, #0
   32288:	f362 0007 	bfi	r0, r2, #0, #8
   3228c:	f361 108f 	bfi	r0, r1, #6, #10
   32290:	461a      	mov	r2, r3
   32292:	491d      	ldr	r1, [pc, #116]	; (32308 <nrf_cloud_fota_init+0x1d8>)
   32294:	f012 fa47 	bl	44726 <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   32298:	2203      	movs	r2, #3
   3229a:	e7ca      	b.n	32232 <nrf_cloud_fota_init+0x102>
		LOG_DBG("Modem FOTA result unknown: %d", modem_dfu_res);
   3229c:	2204      	movs	r2, #4
   3229e:	f04f 0000 	mov.w	r0, #0
   322a2:	f362 0007 	bfi	r0, r2, #0, #8
   322a6:	f361 108f 	bfi	r0, r1, #6, #10
   322aa:	4a11      	ldr	r2, [pc, #68]	; (322f0 <nrf_cloud_fota_init+0x1c0>)
   322ac:	4917      	ldr	r1, [pc, #92]	; (3230c <nrf_cloud_fota_init+0x1dc>)
   322ae:	f012 fa3a 	bl	44726 <log_string_sync>
	enum fota_validate_status ret = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   322b2:	2204      	movs	r2, #4
   322b4:	e7bd      	b.n	32232 <nrf_cloud_fota_init+0x102>
		return 0;
   322b6:	2400      	movs	r4, #0
   322b8:	e74a      	b.n	32150 <nrf_cloud_fota_init+0x20>
   322ba:	bf00      	nop
   322bc:	00049788 	.word	0x00049788
   322c0:	00049890 	.word	0x00049890
   322c4:	000509db 	.word	0x000509db
   322c8:	200258dc 	.word	0x200258dc
   322cc:	2002d1b6 	.word	0x2002d1b6
   322d0:	0003201d 	.word	0x0003201d
   322d4:	000509ed 	.word	0x000509ed
   322d8:	00050a09 	.word	0x00050a09
   322dc:	0004fc04 	.word	0x0004fc04
   322e0:	20020aca 	.word	0x20020aca
   322e4:	00050a18 	.word	0x00050a18
   322e8:	04400004 	.word	0x04400004
   322ec:	05500001 	.word	0x05500001
   322f0:	000507d0 	.word	0x000507d0
   322f4:	00050a56 	.word	0x00050a56
   322f8:	20020acc 	.word	0x20020acc
   322fc:	00050a9f 	.word	0x00050a9f
   32300:	000507e8 	.word	0x000507e8
   32304:	00050a3c 	.word	0x00050a3c
   32308:	00050a68 	.word	0x00050a68
   3230c:	00050a7d 	.word	0x00050a7d

00032310 <nrf_cloud_fota_endpoint_set>:
{
   32310:	b537      	push	{r0, r1, r2, r4, r5, lr}
   32312:	460d      	mov	r5, r1
   32314:	4614      	mov	r4, r2
	if (client == NULL || endpoint == NULL ||
   32316:	2800      	cmp	r0, #0
   32318:	d03d      	beq.n	32396 <nrf_cloud_fota_endpoint_set+0x86>
   3231a:	2a00      	cmp	r2, #0
   3231c:	d03b      	beq.n	32396 <nrf_cloud_fota_endpoint_set+0x86>
   3231e:	6813      	ldr	r3, [r2, #0]
   32320:	2b00      	cmp	r3, #0
   32322:	d038      	beq.n	32396 <nrf_cloud_fota_endpoint_set+0x86>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   32324:	6853      	ldr	r3, [r2, #4]
   32326:	2b00      	cmp	r3, #0
   32328:	d035      	beq.n	32396 <nrf_cloud_fota_endpoint_set+0x86>
   3232a:	2900      	cmp	r1, #0
   3232c:	d033      	beq.n	32396 <nrf_cloud_fota_endpoint_set+0x86>
	client_mqtt = client;
   3232e:	4b1b      	ldr	r3, [pc, #108]	; (3239c <nrf_cloud_fota_endpoint_set+0x8c>)
   32330:	6018      	str	r0, [r3, #0]
	reset_topics();
   32332:	f7ff fd6d 	bl	31e10 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   32336:	4b1a      	ldr	r3, [pc, #104]	; (323a0 <nrf_cloud_fota_endpoint_set+0x90>)
   32338:	4a1a      	ldr	r2, [pc, #104]	; (323a4 <nrf_cloud_fota_endpoint_set+0x94>)
   3233a:	4621      	mov	r1, r4
   3233c:	4628      	mov	r0, r5
   3233e:	f7ff fd89 	bl	31e54 <build_topic>
	if (ret) {
   32342:	bb10      	cbnz	r0, 3238a <nrf_cloud_fota_endpoint_set+0x7a>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   32344:	4b18      	ldr	r3, [pc, #96]	; (323a8 <nrf_cloud_fota_endpoint_set+0x98>)
   32346:	4a19      	ldr	r2, [pc, #100]	; (323ac <nrf_cloud_fota_endpoint_set+0x9c>)
   32348:	4621      	mov	r1, r4
   3234a:	4628      	mov	r0, r5
   3234c:	f7ff fd82 	bl	31e54 <build_topic>
	if (ret) {
   32350:	b9d8      	cbnz	r0, 3238a <nrf_cloud_fota_endpoint_set+0x7a>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   32352:	4b17      	ldr	r3, [pc, #92]	; (323b0 <nrf_cloud_fota_endpoint_set+0xa0>)
   32354:	4a17      	ldr	r2, [pc, #92]	; (323b4 <nrf_cloud_fota_endpoint_set+0xa4>)
   32356:	4621      	mov	r1, r4
   32358:	4628      	mov	r0, r5
   3235a:	f7ff fd7b 	bl	31e54 <build_topic>
	if (ret) {
   3235e:	b9a0      	cbnz	r0, 3238a <nrf_cloud_fota_endpoint_set+0x7a>
	ret = build_topic(client_id, endpoint, BLE_TOPIC_FOTA_RCV,
   32360:	4b15      	ldr	r3, [pc, #84]	; (323b8 <nrf_cloud_fota_endpoint_set+0xa8>)
   32362:	4a16      	ldr	r2, [pc, #88]	; (323bc <nrf_cloud_fota_endpoint_set+0xac>)
   32364:	4621      	mov	r1, r4
   32366:	4628      	mov	r0, r5
   32368:	f7ff fd74 	bl	31e54 <build_topic>
	if (ret) {
   3236c:	b968      	cbnz	r0, 3238a <nrf_cloud_fota_endpoint_set+0x7a>
	ret = build_topic(client_id, endpoint, BLE_TOPIC_FOTA_UPDATE,
   3236e:	4b14      	ldr	r3, [pc, #80]	; (323c0 <nrf_cloud_fota_endpoint_set+0xb0>)
   32370:	4a14      	ldr	r2, [pc, #80]	; (323c4 <nrf_cloud_fota_endpoint_set+0xb4>)
   32372:	4621      	mov	r1, r4
   32374:	4628      	mov	r0, r5
   32376:	f7ff fd6d 	bl	31e54 <build_topic>
	if (ret) {
   3237a:	b930      	cbnz	r0, 3238a <nrf_cloud_fota_endpoint_set+0x7a>
	ret = build_topic(client_id, endpoint, BLE_TOPIC_FOTA_REQ,
   3237c:	4b12      	ldr	r3, [pc, #72]	; (323c8 <nrf_cloud_fota_endpoint_set+0xb8>)
   3237e:	4a13      	ldr	r2, [pc, #76]	; (323cc <nrf_cloud_fota_endpoint_set+0xbc>)
   32380:	4621      	mov	r1, r4
   32382:	4628      	mov	r0, r5
   32384:	f7ff fd66 	bl	31e54 <build_topic>
	if (ret) {
   32388:	b118      	cbz	r0, 32392 <nrf_cloud_fota_endpoint_set+0x82>
   3238a:	9001      	str	r0, [sp, #4]
	reset_topics();
   3238c:	f7ff fd40 	bl	31e10 <reset_topics>
	return ret;
   32390:	9801      	ldr	r0, [sp, #4]
}
   32392:	b003      	add	sp, #12
   32394:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   32396:	f06f 0015 	mvn.w	r0, #21
   3239a:	e7fa      	b.n	32392 <nrf_cloud_fota_endpoint_set+0x82>
   3239c:	200258b0 	.word	0x200258b0
   323a0:	20020880 	.word	0x20020880
   323a4:	0005092b 	.word	0x0005092b
   323a8:	200208bc 	.word	0x200208bc
   323ac:	00050935 	.word	0x00050935
   323b0:	200208b0 	.word	0x200208b0
   323b4:	00050942 	.word	0x00050942
   323b8:	2002088c 	.word	0x2002088c
   323bc:	0005094c 	.word	0x0005094c
   323c0:	200208a4 	.word	0x200208a4
   323c4:	0005095a 	.word	0x0005095a
   323c8:	20020898 	.word	0x20020898
   323cc:	0005096b 	.word	0x0005096b

000323d0 <nrf_cloud_fota_endpoint_set_and_report>:
{
   323d0:	b570      	push	{r4, r5, r6, lr}
   323d2:	b08a      	sub	sp, #40	; 0x28
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   323d4:	f7ff ff9c 	bl	32310 <nrf_cloud_fota_endpoint_set>
	if (ret) {
   323d8:	4604      	mov	r4, r0
   323da:	b178      	cbz	r0, 323fc <nrf_cloud_fota_endpoint_set_and_report+0x2c>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   323dc:	2301      	movs	r3, #1
   323de:	f04f 0000 	mov.w	r0, #0
   323e2:	4a2a      	ldr	r2, [pc, #168]	; (3248c <nrf_cloud_fota_endpoint_set_and_report+0xbc>)
   323e4:	f363 0007 	bfi	r0, r3, #0, #8
   323e8:	4b29      	ldr	r3, [pc, #164]	; (32490 <nrf_cloud_fota_endpoint_set_and_report+0xc0>)
   323ea:	492a      	ldr	r1, [pc, #168]	; (32494 <nrf_cloud_fota_endpoint_set_and_report+0xc4>)
   323ec:	1a9b      	subs	r3, r3, r2
   323ee:	4622      	mov	r2, r4
   323f0:	08db      	lsrs	r3, r3, #3
   323f2:	f363 108f 	bfi	r0, r3, #6, #10
				LOG_ERR("Error sending job update: %d", ret);
   323f6:	f012 f996 	bl	44726 <log_string_sync>
   323fa:	e01b      	b.n	32434 <nrf_cloud_fota_endpoint_set_and_report+0x64>
	if (saved_job.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   323fc:	4d26      	ldr	r5, [pc, #152]	; (32498 <nrf_cloud_fota_endpoint_set_and_report+0xc8>)
   323fe:	786e      	ldrb	r6, [r5, #1]
   32400:	2e03      	cmp	r6, #3
   32402:	d017      	beq.n	32434 <nrf_cloud_fota_endpoint_set_and_report+0x64>
		struct nrf_cloud_fota_job job = {
   32404:	2228      	movs	r2, #40	; 0x28
   32406:	4601      	mov	r1, r0
   32408:	4668      	mov	r0, sp
   3240a:	f015 fedd 	bl	481c8 <memset>
		switch (saved_job.validate) {
   3240e:	782a      	ldrb	r2, [r5, #0]
		struct nrf_cloud_fota_job job = {
   32410:	1cab      	adds	r3, r5, #2
		switch (saved_job.validate) {
   32412:	2a03      	cmp	r2, #3
		struct nrf_cloud_fota_job job = {
   32414:	f88d 6008 	strb.w	r6, [sp, #8]
   32418:	9303      	str	r3, [sp, #12]
		switch (saved_job.validate) {
   3241a:	d012      	beq.n	32442 <nrf_cloud_fota_endpoint_set_and_report+0x72>
   3241c:	2a04      	cmp	r2, #4
   3241e:	d00c      	beq.n	3243a <nrf_cloud_fota_endpoint_set_and_report+0x6a>
   32420:	2a02      	cmp	r2, #2
   32422:	d110      	bne.n	32446 <nrf_cloud_fota_endpoint_set_and_report+0x76>
			job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   32424:	2303      	movs	r3, #3
			ret = send_job_update(&job);
   32426:	4668      	mov	r0, sp
			job.status = NRF_CLOUD_FOTA_FAILED;
   32428:	f88d 3004 	strb.w	r3, [sp, #4]
			ret = send_job_update(&job);
   3242c:	f7ff fda2 	bl	31f74 <send_job_update>
			if (ret) {
   32430:	4604      	mov	r4, r0
   32432:	b9e8      	cbnz	r0, 32470 <nrf_cloud_fota_endpoint_set_and_report+0xa0>
}
   32434:	4620      	mov	r0, r4
   32436:	b00a      	add	sp, #40	; 0x28
   32438:	bd70      	pop	{r4, r5, r6, pc}
			job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   3243a:	2303      	movs	r3, #3
   3243c:	f88d 301c 	strb.w	r3, [sp, #28]
   32440:	e7f0      	b.n	32424 <nrf_cloud_fota_endpoint_set_and_report+0x54>
			job.status = NRF_CLOUD_FOTA_FAILED;
   32442:	2302      	movs	r3, #2
   32444:	e7ef      	b.n	32426 <nrf_cloud_fota_endpoint_set_and_report+0x56>
			LOG_ERR("Unexpected job validation status: %d",
   32446:	2301      	movs	r3, #1
   32448:	f04f 0000 	mov.w	r0, #0
   3244c:	490f      	ldr	r1, [pc, #60]	; (3248c <nrf_cloud_fota_endpoint_set_and_report+0xbc>)
   3244e:	f363 0007 	bfi	r0, r3, #0, #8
   32452:	4b0f      	ldr	r3, [pc, #60]	; (32490 <nrf_cloud_fota_endpoint_set_and_report+0xc0>)
   32454:	1a5b      	subs	r3, r3, r1
   32456:	08db      	lsrs	r3, r3, #3
   32458:	f363 108f 	bfi	r0, r3, #6, #10
   3245c:	490f      	ldr	r1, [pc, #60]	; (3249c <nrf_cloud_fota_endpoint_set_and_report+0xcc>)
   3245e:	f012 f962 	bl	44726 <log_string_sync>
			save_validate_status(job.info.id, job.info.type,
   32462:	2205      	movs	r2, #5
   32464:	f89d 1008 	ldrb.w	r1, [sp, #8]
   32468:	9803      	ldr	r0, [sp, #12]
   3246a:	f7ff fc61 	bl	31d30 <save_validate_status>
		if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   3246e:	e7e1      	b.n	32434 <nrf_cloud_fota_endpoint_set_and_report+0x64>
				LOG_ERR("Error sending job update: %d", ret);
   32470:	2301      	movs	r3, #1
   32472:	f04f 0000 	mov.w	r0, #0
   32476:	4a05      	ldr	r2, [pc, #20]	; (3248c <nrf_cloud_fota_endpoint_set_and_report+0xbc>)
   32478:	f363 0007 	bfi	r0, r3, #0, #8
   3247c:	4b04      	ldr	r3, [pc, #16]	; (32490 <nrf_cloud_fota_endpoint_set_and_report+0xc0>)
   3247e:	4908      	ldr	r1, [pc, #32]	; (324a0 <nrf_cloud_fota_endpoint_set_and_report+0xd0>)
   32480:	1a9b      	subs	r3, r3, r2
   32482:	08db      	lsrs	r3, r3, #3
   32484:	f363 108f 	bfi	r0, r3, #6, #10
   32488:	4622      	mov	r2, r4
   3248a:	e7b4      	b.n	323f6 <nrf_cloud_fota_endpoint_set_and_report+0x26>
   3248c:	00049788 	.word	0x00049788
   32490:	00049890 	.word	0x00049890
   32494:	00050979 	.word	0x00050979
   32498:	20020aca 	.word	0x20020aca
   3249c:	00050999 	.word	0x00050999
   324a0:	000509be 	.word	0x000509be

000324a4 <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   324a4:	2200      	movs	r2, #0
   324a6:	4b02      	ldr	r3, [pc, #8]	; (324b0 <nrf_cloud_fota_endpoint_clear+0xc>)
   324a8:	601a      	str	r2, [r3, #0]
	reset_topics();
   324aa:	f7ff bcb1 	b.w	31e10 <reset_topics>
   324ae:	bf00      	nop
   324b0:	200258b0 	.word	0x200258b0

000324b4 <nrf_cloud_fota_subscribe>:
{
   324b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	for (int i = 0; i < sub_list.list_count; ++i) {
   324b8:	2500      	movs	r5, #0
		if (sub_list.list[i].topic.size == 0 ||
   324ba:	f04f 090c 	mov.w	r9, #12
	struct mqtt_subscription_list sub_list = {
   324be:	4b18      	ldr	r3, [pc, #96]	; (32520 <nrf_cloud_fota_subscribe+0x6c>)
   324c0:	4c18      	ldr	r4, [pc, #96]	; (32524 <nrf_cloud_fota_subscribe+0x70>)
   324c2:	9300      	str	r3, [sp, #0]
   324c4:	4b18      	ldr	r3, [pc, #96]	; (32528 <nrf_cloud_fota_subscribe+0x74>)
		LOG_DBG("Subscribing to topic: %s",
   324c6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 32538 <nrf_cloud_fota_subscribe+0x84>
	struct mqtt_subscription_list sub_list = {
   324ca:	9301      	str	r3, [sp, #4]
		LOG_DBG("Subscribing to topic: %s",
   324cc:	4b17      	ldr	r3, [pc, #92]	; (3252c <nrf_cloud_fota_subscribe+0x78>)
   324ce:	4f18      	ldr	r7, [pc, #96]	; (32530 <nrf_cloud_fota_subscribe+0x7c>)
   324d0:	1ae4      	subs	r4, r4, r3
   324d2:	f3c4 04c9 	ubfx	r4, r4, #3, #10
		if (sub_list.list[i].topic.size == 0 ||
   324d6:	fb09 f305 	mul.w	r3, r9, r5
   324da:	9a00      	ldr	r2, [sp, #0]
   324dc:	18d1      	adds	r1, r2, r3
   324de:	6849      	ldr	r1, [r1, #4]
   324e0:	b1d9      	cbz	r1, 3251a <nrf_cloud_fota_subscribe+0x66>
		    sub_list.list[i].topic.utf8 == NULL) {
   324e2:	58d3      	ldr	r3, [r2, r3]
		if (sub_list.list[i].topic.size == 0 ||
   324e4:	b1cb      	cbz	r3, 3251a <nrf_cloud_fota_subscribe+0x66>
		LOG_DBG("Subscribing to topic: %s",
   324e6:	f026 023f 	bic.w	r2, r6, #63	; 0x3f
   324ea:	f042 0204 	orr.w	r2, r2, #4
   324ee:	f362 0607 	bfi	r6, r2, #0, #8
   324f2:	f364 168f 	bfi	r6, r4, #6, #10
   324f6:	4642      	mov	r2, r8
   324f8:	4639      	mov	r1, r7
   324fa:	4630      	mov	r0, r6
   324fc:	f012 f913 	bl	44726 <log_string_sync>
	for (int i = 0; i < sub_list.list_count; ++i) {
   32500:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   32504:	3501      	adds	r5, #1
   32506:	429d      	cmp	r5, r3
   32508:	dbe5      	blt.n	324d6 <nrf_cloud_fota_subscribe+0x22>
	return mqtt_subscribe(client_mqtt, &sub_list);
   3250a:	4b0a      	ldr	r3, [pc, #40]	; (32534 <nrf_cloud_fota_subscribe+0x80>)
   3250c:	4669      	mov	r1, sp
   3250e:	6818      	ldr	r0, [r3, #0]
   32510:	f013 ffd7 	bl	464c2 <mqtt_subscribe>
}
   32514:	b003      	add	sp, #12
   32516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return -EFAULT;
   3251a:	f06f 000d 	mvn.w	r0, #13
   3251e:	e7f9      	b.n	32514 <nrf_cloud_fota_subscribe+0x60>
   32520:	20020880 	.word	0x20020880
   32524:	00049890 	.word	0x00049890
   32528:	223e0002 	.word	0x223e0002
   3252c:	00049788 	.word	0x00049788
   32530:	00050c08 	.word	0x00050c08
   32534:	200258b0 	.word	0x200258b0
   32538:	000507fc 	.word	0x000507fc

0003253c <nrf_cloud_fota_unsubscribe>:
{
   3253c:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   3253e:	466a      	mov	r2, sp
   32540:	4b0c      	ldr	r3, [pc, #48]	; (32574 <nrf_cloud_fota_unsubscribe+0x38>)
   32542:	e893 0003 	ldmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   32546:	4b0c      	ldr	r3, [pc, #48]	; (32578 <nrf_cloud_fota_unsubscribe+0x3c>)
	struct mqtt_subscription_list sub_list = {
   32548:	e882 0003 	stmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   3254c:	6859      	ldr	r1, [r3, #4]
   3254e:	b169      	cbz	r1, 3256c <nrf_cloud_fota_unsubscribe+0x30>
   32550:	6819      	ldr	r1, [r3, #0]
   32552:	b159      	cbz	r1, 3256c <nrf_cloud_fota_unsubscribe+0x30>
   32554:	6919      	ldr	r1, [r3, #16]
   32556:	b149      	cbz	r1, 3256c <nrf_cloud_fota_unsubscribe+0x30>
   32558:	68db      	ldr	r3, [r3, #12]
   3255a:	b13b      	cbz	r3, 3256c <nrf_cloud_fota_unsubscribe+0x30>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   3255c:	4b07      	ldr	r3, [pc, #28]	; (3257c <nrf_cloud_fota_unsubscribe+0x40>)
   3255e:	4611      	mov	r1, r2
   32560:	6818      	ldr	r0, [r3, #0]
   32562:	f013 ffd5 	bl	46510 <mqtt_unsubscribe>
}
   32566:	b003      	add	sp, #12
   32568:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   3256c:	f06f 000d 	mvn.w	r0, #13
   32570:	e7f9      	b.n	32566 <nrf_cloud_fota_unsubscribe+0x2a>
   32572:	bf00      	nop
   32574:	00049950 	.word	0x00049950
   32578:	20020880 	.word	0x20020880
   3257c:	200258b0 	.word	0x200258b0

00032580 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   32580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   32582:	4b10      	ldr	r3, [pc, #64]	; (325c4 <nrf_cloud_fota_update_check+0x44>)
   32584:	681b      	ldr	r3, [r3, #0]
   32586:	b1bb      	cbz	r3, 325b8 <nrf_cloud_fota_update_check+0x38>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   32588:	4a0f      	ldr	r2, [pc, #60]	; (325c8 <nrf_cloud_fota_update_check+0x48>)
   3258a:	6813      	ldr	r3, [r2, #0]
   3258c:	b1bb      	cbz	r3, 325be <nrf_cloud_fota_update_check+0x3e>
		.message_id = NRF_CLOUD_FOTA_REQUEST_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   3258e:	ca07      	ldmia	r2, {r0, r1, r2}
	struct mqtt_publish_param param = {
   32590:	2300      	movs	r3, #0
   32592:	f8ad 3016 	strh.w	r3, [sp, #22]
   32596:	f242 233f 	movw	r3, #8767	; 0x223f
   3259a:	f8ad 3014 	strh.w	r3, [sp, #20]
	param.message.topic = topic_req;
   3259e:	466b      	mov	r3, sp
   325a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   325a4:	4a09      	ldr	r2, [pc, #36]	; (325cc <nrf_cloud_fota_update_check+0x4c>)
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   325a6:	4618      	mov	r0, r3
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   325a8:	9203      	str	r2, [sp, #12]
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;
   325aa:	2204      	movs	r2, #4
   325ac:	9204      	str	r2, [sp, #16]
	return publish(&param);
   325ae:	f7ff fb73 	bl	31c98 <publish>
}
   325b2:	b007      	add	sp, #28
   325b4:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   325b8:	f06f 0005 	mvn.w	r0, #5
   325bc:	e7f9      	b.n	325b2 <nrf_cloud_fota_update_check+0x32>
		return -EHOSTUNREACH;
   325be:	f06f 0075 	mvn.w	r0, #117	; 0x75
   325c2:	e7f6      	b.n	325b2 <nrf_cloud_fota_update_check+0x32>
   325c4:	200258b0 	.word	0x200258b0
   325c8:	200208b0 	.word	0x200208b0
   325cc:	00050c25 	.word	0x00050c25

000325d0 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   325d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   325d4:	4caf      	ldr	r4, [pc, #700]	; (32894 <nrf_cloud_fota_mqtt_evt_handler+0x2c4>)
{
   325d6:	b091      	sub	sp, #68	; 0x44
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   325d8:	6823      	ldr	r3, [r4, #0]
{
   325da:	4680      	mov	r8, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   325dc:	2b00      	cmp	r3, #0
   325de:	f000 822f 	beq.w	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
   325e2:	6863      	ldr	r3, [r4, #4]
   325e4:	2b00      	cmp	r3, #0
   325e6:	f000 822b 	beq.w	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   325ea:	7803      	ldrb	r3, [r0, #0]
   325ec:	2b09      	cmp	r3, #9
   325ee:	f200 8198 	bhi.w	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
   325f2:	e8df f013 	tbh	[pc, r3, lsl #1]
   325f6:	0225      	.short	0x0225
   325f8:	000a0225 	.word	0x000a0225
   325fc:	022501f3 	.word	0x022501f3
   32600:	02250225 	.word	0x02250225
   32604:	01de01c7 	.word	0x01de01c7
   32608:	0225      	.short	0x0225
	struct mqtt_puback_param ack = {
   3260a:	8b03      	ldrh	r3, [r0, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_BLE_RCV].topic.utf8,
   3260c:	6841      	ldr	r1, [r0, #4]
   3260e:	68e0      	ldr	r0, [r4, #12]
	struct mqtt_puback_param ack = {
   32610:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (strstr(sub_topics[SUB_TOPIC_IDX_BLE_RCV].topic.utf8,
   32614:	f015 ffe2 	bl	485dc <strstr>
   32618:	4682      	mov	sl, r0
   3261a:	2800      	cmp	r0, #0
   3261c:	d04f      	beq.n	326be <nrf_cloud_fota_mqtt_evt_handler+0xee>
		job_info = &ble_job.info;
   3261e:	af09      	add	r7, sp, #36	; 0x24
		ble_id = &ble_job.ble_id;
   32620:	f10d 0a1c 	add.w	sl, sp, #28
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   32624:	f8d8 1004 	ldr.w	r1, [r8, #4]
   32628:	6820      	ldr	r0, [r4, #0]
   3262a:	f015 ffd7 	bl	485dc <strstr>
   3262e:	b918      	cbnz	r0, 32638 <nrf_cloud_fota_mqtt_evt_handler+0x68>
	    p->message.topic.topic.utf8) == NULL && !ble_id) {
   32630:	f1ba 0f00 	cmp.w	sl, #0
   32634:	f000 8204 	beq.w	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
	LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   32638:	2304      	movs	r3, #4
   3263a:	f04f 0000 	mov.w	r0, #0
   3263e:	4d96      	ldr	r5, [pc, #600]	; (32898 <nrf_cloud_fota_mqtt_evt_handler+0x2c8>)
   32640:	f363 0007 	bfi	r0, r3, #0, #8
   32644:	4b95      	ldr	r3, [pc, #596]	; (3289c <nrf_cloud_fota_mqtt_evt_handler+0x2cc>)
   32646:	4a96      	ldr	r2, [pc, #600]	; (328a0 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   32648:	1aed      	subs	r5, r5, r3
   3264a:	f8d8 3014 	ldr.w	r3, [r8, #20]
   3264e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   32652:	9300      	str	r3, [sp, #0]
   32654:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   32658:	f365 108f 	bfi	r0, r5, #6, #10
   3265c:	4991      	ldr	r1, [pc, #580]	; (328a4 <nrf_cloud_fota_mqtt_evt_handler+0x2d4>)
   3265e:	f012 f862 	bl	44726 <log_string_sync>
	return current_fota.parsed_payload != NULL;
   32662:	4b91      	ldr	r3, [pc, #580]	; (328a8 <nrf_cloud_fota_mqtt_evt_handler+0x2d8>)
	if (is_fota_active() && !ble_id) {
   32664:	681a      	ldr	r2, [r3, #0]
   32666:	4699      	mov	r9, r3
   32668:	b35a      	cbz	r2, 326c2 <nrf_cloud_fota_mqtt_evt_handler+0xf2>
   3266a:	f1ba 0f00 	cmp.w	sl, #0
   3266e:	d128      	bne.n	326c2 <nrf_cloud_fota_mqtt_evt_handler+0xf2>
		LOG_INF("Job in progress... skipping");
   32670:	2303      	movs	r3, #3
   32672:	f04f 0000 	mov.w	r0, #0
   32676:	f363 0007 	bfi	r0, r3, #0, #8
   3267a:	f365 108f 	bfi	r0, r5, #6, #10
   3267e:	498b      	ldr	r1, [pc, #556]	; (328ac <nrf_cloud_fota_mqtt_evt_handler+0x2dc>)
   32680:	f012 f851 	bl	44726 <log_string_sync>
	cJSON * payload_array = NULL;
   32684:	4656      	mov	r6, sl
	int ret = 0;
   32686:	4654      	mov	r4, sl
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   32688:	f898 300c 	ldrb.w	r3, [r8, #12]
   3268c:	2b00      	cmp	r3, #0
   3268e:	f040 8125 	bne.w	328dc <nrf_cloud_fota_mqtt_evt_handler+0x30c>
		LOG_DBG("No ack required");
   32692:	f04f 0000 	mov.w	r0, #0
   32696:	2304      	movs	r3, #4
   32698:	f363 0007 	bfi	r0, r3, #0, #8
   3269c:	f365 108f 	bfi	r0, r5, #6, #10
   326a0:	4a7f      	ldr	r2, [pc, #508]	; (328a0 <nrf_cloud_fota_mqtt_evt_handler+0x2d0>)
   326a2:	4983      	ldr	r1, [pc, #524]	; (328b0 <nrf_cloud_fota_mqtt_evt_handler+0x2e0>)
   326a4:	f012 f83f 	bl	44726 <log_string_sync>
	if (job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   326a8:	783b      	ldrb	r3, [r7, #0]
   326aa:	2b03      	cmp	r3, #3
   326ac:	f040 812e 	bne.w	3290c <nrf_cloud_fota_mqtt_evt_handler+0x33c>
		cJSON_free(payload_array);
   326b0:	4630      	mov	r0, r6
   326b2:	f7f8 fda3 	bl	2b1fc <cJSON_free>
		return 1;
	break;
	}

	return 0;
}
   326b6:	4620      	mov	r0, r4
   326b8:	b011      	add	sp, #68	; 0x44
   326ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	struct nrf_cloud_fota_job_info * job_info = &current_fota.info;
   326be:	4f7d      	ldr	r7, [pc, #500]	; (328b4 <nrf_cloud_fota_mqtt_evt_handler+0x2e4>)
   326c0:	e7b0      	b.n	32624 <nrf_cloud_fota_mqtt_evt_handler+0x54>
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   326c2:	2101      	movs	r1, #1
   326c4:	f8d8 0014 	ldr.w	r0, [r8, #20]
   326c8:	4408      	add	r0, r1
   326ca:	f015 fd27 	bl	4811c <k_calloc>
	if (!payload) {
   326ce:	9002      	str	r0, [sp, #8]
   326d0:	b968      	cbnz	r0, 326ee <nrf_cloud_fota_mqtt_evt_handler+0x11e>
		LOG_ERR("Unable to allocate memory for job");
   326d2:	2301      	movs	r3, #1
   326d4:	f04f 0000 	mov.w	r0, #0
   326d8:	f363 0007 	bfi	r0, r3, #0, #8
   326dc:	f365 108f 	bfi	r0, r5, #6, #10
   326e0:	4975      	ldr	r1, [pc, #468]	; (328b8 <nrf_cloud_fota_mqtt_evt_handler+0x2e8>)
   326e2:	f012 f820 	bl	44726 <log_string_sync>
		ret = -ENOMEM;
   326e6:	f06f 040b 	mvn.w	r4, #11
	cJSON * payload_array = NULL;
   326ea:	9e02      	ldr	r6, [sp, #8]
   326ec:	e7cc      	b.n	32688 <nrf_cloud_fota_mqtt_evt_handler+0xb8>
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   326ee:	4b73      	ldr	r3, [pc, #460]	; (328bc <nrf_cloud_fota_mqtt_evt_handler+0x2ec>)
   326f0:	f8d8 2014 	ldr.w	r2, [r8, #20]
   326f4:	9902      	ldr	r1, [sp, #8]
   326f6:	6818      	ldr	r0, [r3, #0]
   326f8:	f013 ffbe 	bl	46678 <mqtt_readall_publish_payload>
	if (ret) {
   326fc:	4604      	mov	r4, r0
   326fe:	b160      	cbz	r0, 3271a <nrf_cloud_fota_mqtt_evt_handler+0x14a>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   32700:	f04f 0000 	mov.w	r0, #0
   32704:	2301      	movs	r3, #1
   32706:	f363 0007 	bfi	r0, r3, #0, #8
   3270a:	f365 108f 	bfi	r0, r5, #6, #10
   3270e:	4622      	mov	r2, r4
   32710:	496b      	ldr	r1, [pc, #428]	; (328c0 <nrf_cloud_fota_mqtt_evt_handler+0x2f0>)
   32712:	f012 f808 	bl	44726 <log_string_sync>
		cJSON_free(array);
   32716:	2600      	movs	r6, #0
   32718:	e7b6      	b.n	32688 <nrf_cloud_fota_mqtt_evt_handler+0xb8>
	cJSON * array = cJSON_Parse(payload_in);
   3271a:	9802      	ldr	r0, [sp, #8]
   3271c:	f014 fb94 	bl	46e48 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   32720:	4606      	mov	r6, r0
   32722:	b9c0      	cbnz	r0, 32756 <nrf_cloud_fota_mqtt_evt_handler+0x186>
		LOG_ERR("Invalid JSON array");
   32724:	2301      	movs	r3, #1
   32726:	f04f 0000 	mov.w	r0, #0
   3272a:	f363 0007 	bfi	r0, r3, #0, #8
   3272e:	f365 108f 	bfi	r0, r5, #6, #10
   32732:	4964      	ldr	r1, [pc, #400]	; (328c4 <nrf_cloud_fota_mqtt_evt_handler+0x2f4>)
   32734:	f011 fff7 	bl	44726 <log_string_sync>
		err = -EINVAL;
   32738:	f06f 0415 	mvn.w	r4, #21
	memset(job_info,0,sizeof(*job_info));
   3273c:	2214      	movs	r2, #20
   3273e:	2100      	movs	r1, #0
   32740:	4638      	mov	r0, r7
   32742:	f015 fd41 	bl	481c8 <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   32746:	2303      	movs	r3, #3
   32748:	703b      	strb	r3, [r7, #0]
	if (array) {
   3274a:	2e00      	cmp	r6, #0
   3274c:	d09c      	beq.n	32688 <nrf_cloud_fota_mqtt_evt_handler+0xb8>
		cJSON_free(array);
   3274e:	4630      	mov	r0, r6
   32750:	f7f8 fd54 	bl	2b1fc <cJSON_free>
   32754:	e7df      	b.n	32716 <nrf_cloud_fota_mqtt_evt_handler+0x146>
	if (!array || !cJSON_IsArray(array)) {
   32756:	f014 fbf5 	bl	46f44 <cJSON_IsArray>
   3275a:	2800      	cmp	r0, #0
   3275c:	d0e2      	beq.n	32724 <nrf_cloud_fota_mqtt_evt_handler+0x154>
	char * temp = cJSON_PrintUnformatted(array);
   3275e:	4630      	mov	r0, r6
   32760:	f014 fb76 	bl	46e50 <cJSON_PrintUnformatted>
	if (temp){
   32764:	4683      	mov	fp, r0
   32766:	b188      	cbz	r0, 3278c <nrf_cloud_fota_mqtt_evt_handler+0x1bc>
		LOG_DBG("JSON array: %s", log_strdup(temp));
   32768:	2304      	movs	r3, #4
   3276a:	f04f 0400 	mov.w	r4, #0
   3276e:	f363 0407 	bfi	r4, r3, #0, #8
   32772:	f011 ffeb 	bl	4474c <log_strdup>
   32776:	f365 148f 	bfi	r4, r5, #6, #10
   3277a:	4603      	mov	r3, r0
   3277c:	4a52      	ldr	r2, [pc, #328]	; (328c8 <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   3277e:	4620      	mov	r0, r4
   32780:	4952      	ldr	r1, [pc, #328]	; (328cc <nrf_cloud_fota_mqtt_evt_handler+0x2fc>)
   32782:	f011 ffd0 	bl	44726 <log_string_sync>
		cJSON_free(temp);
   32786:	4658      	mov	r0, fp
   32788:	f7f8 fd38 	bl	2b1fc <cJSON_free>
	if (ble_id) {
   3278c:	f1ba 0f00 	cmp.w	sl, #0
   32790:	d00e      	beq.n	327b0 <nrf_cloud_fota_mqtt_evt_handler+0x1e0>
		if (get_string_from_array(array, RCV_ITEM_IDX_BLE_ID,
   32792:	aa06      	add	r2, sp, #24
   32794:	2100      	movs	r1, #0
   32796:	4630      	mov	r0, r6
   32798:	f015 fa43 	bl	47c22 <get_string_from_array>
   3279c:	2800      	cmp	r0, #0
   3279e:	d148      	bne.n	32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
		if (bt_addr_from_str(ble_str, ble_id)) {
   327a0:	4651      	mov	r1, sl
   327a2:	9806      	ldr	r0, [sp, #24]
   327a4:	f013 f950 	bl	45a48 <bt_addr_from_str>
   327a8:	b110      	cbz	r0, 327b0 <nrf_cloud_fota_mqtt_evt_handler+0x1e0>
			err = -EADDRNOTAVAIL;
   327aa:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   327ae:	e7c5      	b.n	3273c <nrf_cloud_fota_mqtt_evt_handler+0x16c>
	int offset = !ble_id ? 1 : 0;
   327b0:	faba fb8a 	clz	fp, sl
   327b4:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   327b8:	1d3a      	adds	r2, r7, #4
   327ba:	f1cb 0101 	rsb	r1, fp, #1
   327be:	4630      	mov	r0, r6
   327c0:	f015 fa2f 	bl	47c22 <get_string_from_array>
   327c4:	bba8      	cbnz	r0, 32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   327c6:	f107 0208 	add.w	r2, r7, #8
   327ca:	f1cb 0104 	rsb	r1, fp, #4
   327ce:	4630      	mov	r0, r6
   327d0:	f015 fa27 	bl	47c22 <get_string_from_array>
				  &job_info->id) ||
   327d4:	bb68      	cbnz	r0, 32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   327d6:	f107 020c 	add.w	r2, r7, #12
   327da:	f1cb 0105 	rsb	r1, fp, #5
   327de:	4630      	mov	r0, r6
   327e0:	f015 fa1f 	bl	47c22 <get_string_from_array>
				  &job_info->host) ||
   327e4:	4604      	mov	r4, r0
   327e6:	bb20      	cbnz	r0, 32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
	cJSON * item = cJSON_GetArrayItem(array, index);
   327e8:	f1cb 0102 	rsb	r1, fp, #2
   327ec:	4630      	mov	r0, r6
   327ee:	f014 fb3a 	bl	46e66 <cJSON_GetArrayItem>
   327f2:	9003      	str	r0, [sp, #12]
	if(!cJSON_IsNumber(item)) {
   327f4:	f014 fb91 	bl	46f1a <cJSON_IsNumber>
   327f8:	b1d8      	cbz	r0, 32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
	*number_out = item->valueint;
   327fa:	9b03      	ldr	r3, [sp, #12]
	cJSON * item = cJSON_GetArrayItem(array, index);
   327fc:	f1cb 0103 	rsb	r1, fp, #3
	*number_out = item->valueint;
   32800:	695b      	ldr	r3, [r3, #20]
	cJSON * item = cJSON_GetArrayItem(array, index);
   32802:	4630      	mov	r0, r6
	*number_out = item->valueint;
   32804:	603b      	str	r3, [r7, #0]
	cJSON * item = cJSON_GetArrayItem(array, index);
   32806:	f014 fb2e 	bl	46e66 <cJSON_GetArrayItem>
   3280a:	4683      	mov	fp, r0
	if(!cJSON_IsNumber(item)) {
   3280c:	f014 fb85 	bl	46f1a <cJSON_IsNumber>
   32810:	b178      	cbz	r0, 32832 <nrf_cloud_fota_mqtt_evt_handler+0x262>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   32812:	783a      	ldrb	r2, [r7, #0]
	*number_out = item->valueint;
   32814:	f8db 3014 	ldr.w	r3, [fp, #20]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   32818:	2a02      	cmp	r2, #2
	*number_out = item->valueint;
   3281a:	613b      	str	r3, [r7, #16]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   3281c:	d90c      	bls.n	32838 <nrf_cloud_fota_mqtt_evt_handler+0x268>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   3281e:	f04f 0000 	mov.w	r0, #0
   32822:	2301      	movs	r3, #1
   32824:	f363 0007 	bfi	r0, r3, #0, #8
   32828:	f365 108f 	bfi	r0, r5, #6, #10
   3282c:	4928      	ldr	r1, [pc, #160]	; (328d0 <nrf_cloud_fota_mqtt_evt_handler+0x300>)
   3282e:	f011 ff7a 	bl	44726 <log_string_sync>
	int err = -ENOMSG;
   32832:	f06f 0422 	mvn.w	r4, #34	; 0x22
   32836:	e781      	b.n	3273c <nrf_cloud_fota_mqtt_evt_handler+0x16c>
	LOG_DBG("Job ID: %s, type: %d, size: %d",
   32838:	2304      	movs	r3, #4
   3283a:	f04f 0b00 	mov.w	fp, #0
   3283e:	6878      	ldr	r0, [r7, #4]
   32840:	f363 0b07 	bfi	fp, r3, #0, #8
   32844:	f011 ff82 	bl	4474c <log_strdup>
   32848:	693b      	ldr	r3, [r7, #16]
   3284a:	f365 1b8f 	bfi	fp, r5, #6, #10
   3284e:	9301      	str	r3, [sp, #4]
   32850:	783b      	ldrb	r3, [r7, #0]
   32852:	4a1d      	ldr	r2, [pc, #116]	; (328c8 <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   32854:	491f      	ldr	r1, [pc, #124]	; (328d4 <nrf_cloud_fota_mqtt_evt_handler+0x304>)
   32856:	9300      	str	r3, [sp, #0]
   32858:	4603      	mov	r3, r0
   3285a:	4658      	mov	r0, fp
   3285c:	f011 ff63 	bl	44726 <log_string_sync>
	LOG_DBG("File: %s/%s",
   32860:	f04f 0b00 	mov.w	fp, #0
   32864:	2304      	movs	r3, #4
   32866:	68b8      	ldr	r0, [r7, #8]
   32868:	f363 0b07 	bfi	fp, r3, #0, #8
   3286c:	f011 ff6e 	bl	4474c <log_strdup>
   32870:	9003      	str	r0, [sp, #12]
   32872:	68f8      	ldr	r0, [r7, #12]
   32874:	f011 ff6a 	bl	4474c <log_strdup>
   32878:	f365 1b8f 	bfi	fp, r5, #6, #10
   3287c:	9000      	str	r0, [sp, #0]
   3287e:	9b03      	ldr	r3, [sp, #12]
   32880:	4658      	mov	r0, fp
   32882:	4a11      	ldr	r2, [pc, #68]	; (328c8 <nrf_cloud_fota_mqtt_evt_handler+0x2f8>)
   32884:	4914      	ldr	r1, [pc, #80]	; (328d8 <nrf_cloud_fota_mqtt_evt_handler+0x308>)
   32886:	f011 ff4e 	bl	44726 <log_string_sync>
	nrf_cloud_free(payload);
   3288a:	9802      	ldr	r0, [sp, #8]
   3288c:	f015 fc41 	bl	48112 <k_free>
   32890:	e6fa      	b.n	32688 <nrf_cloud_fota_mqtt_evt_handler+0xb8>
   32892:	bf00      	nop
   32894:	20020880 	.word	0x20020880
   32898:	00049890 	.word	0x00049890
   3289c:	00049788 	.word	0x00049788
   328a0:	0005085f 	.word	0x0005085f
   328a4:	0004fee8 	.word	0x0004fee8
   328a8:	200258b4 	.word	0x200258b4
   328ac:	00050ac0 	.word	0x00050ac0
   328b0:	00050b8c 	.word	0x00050b8c
   328b4:	200258bc 	.word	0x200258bc
   328b8:	00050adc 	.word	0x00050adc
   328bc:	200258b0 	.word	0x200258b0
   328c0:	00050afe 	.word	0x00050afe
   328c4:	00050b1d 	.word	0x00050b1d
   328c8:	0005083c 	.word	0x0005083c
   328cc:	00050b30 	.word	0x00050b30
   328d0:	00050b43 	.word	0x00050b43
   328d4:	00050b59 	.word	0x00050b59
   328d8:	00050b7c 	.word	0x00050b7c
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   328dc:	4b59      	ldr	r3, [pc, #356]	; (32a44 <nrf_cloud_fota_mqtt_evt_handler+0x474>)
   328de:	a905      	add	r1, sp, #20
   328e0:	6818      	ldr	r0, [r3, #0]
   328e2:	f013 fd9e 	bl	46422 <mqtt_publish_qos1_ack>
		if (ack_res) {
   328e6:	4680      	mov	r8, r0
   328e8:	2800      	cmp	r0, #0
   328ea:	f43f aedd 	beq.w	326a8 <nrf_cloud_fota_mqtt_evt_handler+0xd8>
			LOG_ERR("MQTT ACK failed %d", ack_res);
   328ee:	2301      	movs	r3, #1
   328f0:	f04f 0000 	mov.w	r0, #0
   328f4:	f363 0007 	bfi	r0, r3, #0, #8
   328f8:	f365 108f 	bfi	r0, r5, #6, #10
   328fc:	4642      	mov	r2, r8
   328fe:	4952      	ldr	r1, [pc, #328]	; (32a48 <nrf_cloud_fota_mqtt_evt_handler+0x478>)
   32900:	f011 ff11 	bl	44726 <log_string_sync>
			if (!ret) {
   32904:	2c00      	cmp	r4, #0
   32906:	bf08      	it	eq
   32908:	4644      	moveq	r4, r8
   3290a:	e6cd      	b.n	326a8 <nrf_cloud_fota_mqtt_evt_handler+0xd8>
	if (ble_id) {
   3290c:	f1ba 0f00 	cmp.w	sl, #0
   32910:	d009      	beq.n	32926 <nrf_cloud_fota_mqtt_evt_handler+0x356>
		if (ble_cb) {
   32912:	4b4e      	ldr	r3, [pc, #312]	; (32a4c <nrf_cloud_fota_mqtt_evt_handler+0x47c>)
   32914:	681b      	ldr	r3, [r3, #0]
   32916:	b10b      	cbz	r3, 3291c <nrf_cloud_fota_mqtt_evt_handler+0x34c>
			ble_cb(&ble_job);
   32918:	a807      	add	r0, sp, #28
   3291a:	4798      	blx	r3
		cJSON_free(payload_array);
   3291c:	4630      	mov	r0, r6
   3291e:	f7f8 fc6d 	bl	2b1fc <cJSON_free>
	return 0;
   32922:	2400      	movs	r4, #0
   32924:	e6c7      	b.n	326b6 <nrf_cloud_fota_mqtt_evt_handler+0xe6>
	int ret = fota_download_start(job->info.host, job->info.path,
   32926:	f44f 6380 	mov.w	r3, #1024	; 0x400
		current_fota.parsed_payload = payload_array;
   3292a:	f8c9 6000 	str.w	r6, [r9]
	int ret = fota_download_start(job->info.host, job->info.path,
   3292e:	9300      	str	r3, [sp, #0]
   32930:	4a47      	ldr	r2, [pc, #284]	; (32a50 <nrf_cloud_fota_mqtt_evt_handler+0x480>)
   32932:	4653      	mov	r3, sl
   32934:	e9d9 0104 	ldrd	r0, r1, [r9, #16]
   32938:	f001 f9f4 	bl	33d24 <fota_download_start>
	if (ret) {
   3293c:	4604      	mov	r4, r0
   3293e:	b1d8      	cbz	r0, 32978 <nrf_cloud_fota_mqtt_evt_handler+0x3a8>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   32940:	2301      	movs	r3, #1
   32942:	f04f 0000 	mov.w	r0, #0
   32946:	f363 0007 	bfi	r0, r3, #0, #8
   3294a:	f365 108f 	bfi	r0, r5, #6, #10
   3294e:	4622      	mov	r2, r4
   32950:	4940      	ldr	r1, [pc, #256]	; (32a54 <nrf_cloud_fota_mqtt_evt_handler+0x484>)
   32952:	f011 fee8 	bl	44726 <log_string_sync>
		job->status = NRF_CLOUD_FOTA_FAILED;
   32956:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   32958:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   3295a:	f889 0004 	strb.w	r0, [r9, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   3295e:	f889 301c 	strb.w	r3, [r9, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   32962:	f7ff faad 	bl	31ec0 <send_event.constprop.1>
		(void)send_job_update(&current_fota);
   32966:	483c      	ldr	r0, [pc, #240]	; (32a58 <nrf_cloud_fota_mqtt_evt_handler+0x488>)
   32968:	f7ff fb04 	bl	31f74 <send_job_update>
		if (ret) {
   3296c:	2c00      	cmp	r4, #0
   3296e:	f43f aea2 	beq.w	326b6 <nrf_cloud_fota_mqtt_evt_handler+0xe6>
			cleanup_job(&current_fota);
   32972:	f7ff fac7 	bl	31f04 <cleanup_job.constprop.2>
			break;
   32976:	e7d4      	b.n	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   32978:	2307      	movs	r3, #7
		job->sent_dl_progress = 0;
   3297a:	e9c9 0008 	strd	r0, r0, [r9, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   3297e:	f889 3004 	strb.w	r3, [r9, #4]
   32982:	e7ee      	b.n	32962 <nrf_cloud_fota_mqtt_evt_handler+0x392>
		if (evt->param.suback.message_id !=
   32984:	f242 233e 	movw	r3, #8766	; 0x223e
   32988:	8882      	ldrh	r2, [r0, #4]
   3298a:	429a      	cmp	r2, r3
   3298c:	d158      	bne.n	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
		LOG_DBG("MQTT_EVT_SUBACK");
   3298e:	2304      	movs	r3, #4
   32990:	f04f 0000 	mov.w	r0, #0
   32994:	4a31      	ldr	r2, [pc, #196]	; (32a5c <nrf_cloud_fota_mqtt_evt_handler+0x48c>)
   32996:	f363 0007 	bfi	r0, r3, #0, #8
   3299a:	4b31      	ldr	r3, [pc, #196]	; (32a60 <nrf_cloud_fota_mqtt_evt_handler+0x490>)
   3299c:	4931      	ldr	r1, [pc, #196]	; (32a64 <nrf_cloud_fota_mqtt_evt_handler+0x494>)
   3299e:	1a9b      	subs	r3, r3, r2
   329a0:	08db      	lsrs	r3, r3, #3
   329a2:	f363 108f 	bfi	r0, r3, #6, #10
   329a6:	4a30      	ldr	r2, [pc, #192]	; (32a68 <nrf_cloud_fota_mqtt_evt_handler+0x498>)
   329a8:	f011 febd 	bl	44726 <log_string_sync>
		nrf_cloud_fota_update_check();
   329ac:	f7ff fde8 	bl	32580 <nrf_cloud_fota_update_check>
		break;
   329b0:	e7b7      	b.n	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
		if (evt->param.unsuback.message_id !=
   329b2:	f242 233e 	movw	r3, #8766	; 0x223e
   329b6:	8882      	ldrh	r2, [r0, #4]
   329b8:	429a      	cmp	r2, r3
   329ba:	d141      	bne.n	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
		LOG_DBG("MQTT_EVT_UNSUBACK");
   329bc:	2304      	movs	r3, #4
   329be:	f04f 0000 	mov.w	r0, #0
   329c2:	4a26      	ldr	r2, [pc, #152]	; (32a5c <nrf_cloud_fota_mqtt_evt_handler+0x48c>)
   329c4:	f363 0007 	bfi	r0, r3, #0, #8
   329c8:	4b25      	ldr	r3, [pc, #148]	; (32a60 <nrf_cloud_fota_mqtt_evt_handler+0x490>)
   329ca:	4928      	ldr	r1, [pc, #160]	; (32a6c <nrf_cloud_fota_mqtt_evt_handler+0x49c>)
   329cc:	1a9b      	subs	r3, r3, r2
   329ce:	08db      	lsrs	r3, r3, #3
   329d0:	f363 108f 	bfi	r0, r3, #6, #10
   329d4:	4a24      	ldr	r2, [pc, #144]	; (32a68 <nrf_cloud_fota_mqtt_evt_handler+0x498>)
   329d6:	f011 fea6 	bl	44726 <log_string_sync>
   329da:	e7a2      	b.n	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
		switch (evt->param.puback.message_id)
   329dc:	8883      	ldrh	r3, [r0, #4]
   329de:	f5a3 5208 	sub.w	r2, r3, #8704	; 0x2200
   329e2:	3a3f      	subs	r2, #63	; 0x3f
   329e4:	2a03      	cmp	r2, #3
   329e6:	d82b      	bhi.n	32a40 <nrf_cloud_fota_mqtt_evt_handler+0x470>
   329e8:	e8df f002 	tbb	[pc, r2]
   329ec:	02022502 	.word	0x02022502
		bool do_update_check = false;
   329f0:	2400      	movs	r4, #0
		LOG_DBG("MQTT_EVT_PUBACK: msg id %d",
   329f2:	2204      	movs	r2, #4
   329f4:	f04f 0000 	mov.w	r0, #0
   329f8:	4918      	ldr	r1, [pc, #96]	; (32a5c <nrf_cloud_fota_mqtt_evt_handler+0x48c>)
   329fa:	f362 0007 	bfi	r0, r2, #0, #8
   329fe:	4a18      	ldr	r2, [pc, #96]	; (32a60 <nrf_cloud_fota_mqtt_evt_handler+0x490>)
   32a00:	1a52      	subs	r2, r2, r1
   32a02:	08d2      	lsrs	r2, r2, #3
   32a04:	f362 108f 	bfi	r0, r2, #6, #10
   32a08:	4919      	ldr	r1, [pc, #100]	; (32a70 <nrf_cloud_fota_mqtt_evt_handler+0x4a0>)
   32a0a:	4a17      	ldr	r2, [pc, #92]	; (32a68 <nrf_cloud_fota_mqtt_evt_handler+0x498>)
   32a0c:	f011 fe8b 	bl	44726 <log_string_sync>
		if (!do_update_check) {
   32a10:	2c00      	cmp	r4, #0
   32a12:	f43f ae50 	beq.w	326b6 <nrf_cloud_fota_mqtt_evt_handler+0xe6>
		switch (saved_job.validate) {
   32a16:	4b17      	ldr	r3, [pc, #92]	; (32a74 <nrf_cloud_fota_mqtt_evt_handler+0x4a4>)
   32a18:	7818      	ldrb	r0, [r3, #0]
   32a1a:	2801      	cmp	r0, #1
   32a1c:	d00d      	beq.n	32a3a <nrf_cloud_fota_mqtt_evt_handler+0x46a>
   32a1e:	2800      	cmp	r0, #0
   32a20:	f43f af7f 	beq.w	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
   32a24:	2804      	cmp	r0, #4
   32a26:	f63f af7c 	bhi.w	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
			save_validate_status(saved_job.id, saved_job.type,
   32a2a:	2205      	movs	r2, #5
   32a2c:	7859      	ldrb	r1, [r3, #1]
   32a2e:	1c98      	adds	r0, r3, #2
   32a30:	f7ff f97e 	bl	31d30 <save_validate_status>
			break;
   32a34:	e775      	b.n	32922 <nrf_cloud_fota_mqtt_evt_handler+0x352>
				do_update_check = true;
   32a36:	2401      	movs	r4, #1
   32a38:	e7db      	b.n	329f2 <nrf_cloud_fota_mqtt_evt_handler+0x422>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   32a3a:	f7ff fa41 	bl	31ec0 <send_event.constprop.1>
   32a3e:	e798      	b.n	32972 <nrf_cloud_fota_mqtt_evt_handler+0x3a2>
		return 1;
   32a40:	2401      	movs	r4, #1
   32a42:	e638      	b.n	326b6 <nrf_cloud_fota_mqtt_evt_handler+0xe6>
   32a44:	200258b0 	.word	0x200258b0
   32a48:	00050ba0 	.word	0x00050ba0
   32a4c:	200258ac 	.word	0x200258ac
   32a50:	01010001 	.word	0x01010001
   32a54:	00050bb3 	.word	0x00050bb3
   32a58:	200258b4 	.word	0x200258b4
   32a5c:	00049788 	.word	0x00049788
   32a60:	00049890 	.word	0x00049890
   32a64:	00050bd5 	.word	0x00050bd5
   32a68:	00050877 	.word	0x00050877
   32a6c:	0004ff97 	.word	0x0004ff97
   32a70:	00050be9 	.word	0x00050be9
   32a74:	20020aca 	.word	0x20020aca

00032a78 <nrf_cloud_fota_ble_set_handler>:

#if defined(CONFIG_NRF_CLOUD_FOTA_BLE_DEVICES)
int nrf_cloud_fota_ble_set_handler(nrf_cloud_fota_ble_callback_t cb)
{
	if (!cb) {
   32a78:	b118      	cbz	r0, 32a82 <nrf_cloud_fota_ble_set_handler+0xa>
		return -EINVAL;
	}

	ble_cb = cb;
   32a7a:	4b03      	ldr	r3, [pc, #12]	; (32a88 <nrf_cloud_fota_ble_set_handler+0x10>)
   32a7c:	6018      	str	r0, [r3, #0]
	return 0;
   32a7e:	2000      	movs	r0, #0
   32a80:	4770      	bx	lr
		return -EINVAL;
   32a82:	f06f 0015 	mvn.w	r0, #21
}
   32a86:	4770      	bx	lr
   32a88:	200258ac 	.word	0x200258ac

00032a8c <nrf_cloud_fota_ble_job_update>:
}

int nrf_cloud_fota_ble_job_update(const struct nrf_cloud_fota_ble_job
				  * const ble_job,
				  const enum nrf_cloud_fota_status status)
{
   32a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32a8e:	460f      	mov	r7, r1
   32a90:	b095      	sub	sp, #84	; 0x54
	if (ble_job == NULL) {
   32a92:	4605      	mov	r5, r0
   32a94:	2800      	cmp	r0, #0
   32a96:	d05c      	beq.n	32b52 <nrf_cloud_fota_ble_job_update+0xc6>
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   32a98:	4b34      	ldr	r3, [pc, #208]	; (32b6c <nrf_cloud_fota_ble_job_update+0xe0>)
   32a9a:	681b      	ldr	r3, [r3, #0]
   32a9c:	2b00      	cmp	r3, #0
   32a9e:	d05b      	beq.n	32b58 <nrf_cloud_fota_ble_job_update+0xcc>
		return -ENXIO;
	} else if (topic_ble_updt.topic.utf8 == NULL) {
   32aa0:	4b33      	ldr	r3, [pc, #204]	; (32b70 <nrf_cloud_fota_ble_job_update+0xe4>)
   32aa2:	681b      	ldr	r3, [r3, #0]
   32aa4:	2b00      	cmp	r3, #0
   32aa6:	d05a      	beq.n	32b5e <nrf_cloud_fota_ble_job_update+0xd2>
	}

	int ret;
	cJSON * array;
	char ble_id_str[BT_ADDR_LE_STR_LEN];
	struct mqtt_publish_param param = {
   32aa8:	2218      	movs	r2, #24
   32aaa:	2100      	movs	r1, #0
   32aac:	eb0d 0002 	add.w	r0, sp, r2
   32ab0:	f015 fb8a 	bl	481c8 <memset>
   32ab4:	f242 2342 	movw	r3, #8770	; 0x2242
   32ab8:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 *
 * @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_to_str(const bt_addr_t *addr, char *str, size_t len)
{
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X",
   32abc:	782b      	ldrb	r3, [r5, #0]
   32abe:	4a2d      	ldr	r2, [pc, #180]	; (32b74 <nrf_cloud_fota_ble_job_update+0xe8>)
   32ac0:	9304      	str	r3, [sp, #16]
   32ac2:	786b      	ldrb	r3, [r5, #1]
   32ac4:	211e      	movs	r1, #30
   32ac6:	9303      	str	r3, [sp, #12]
   32ac8:	78ab      	ldrb	r3, [r5, #2]
   32aca:	a80c      	add	r0, sp, #48	; 0x30
   32acc:	9302      	str	r3, [sp, #8]
   32ace:	78eb      	ldrb	r3, [r5, #3]
   32ad0:	9301      	str	r3, [sp, #4]
   32ad2:	792b      	ldrb	r3, [r5, #4]
   32ad4:	9300      	str	r3, [sp, #0]
   32ad6:	796b      	ldrb	r3, [r5, #5]
   32ad8:	f011 fc07 	bl	442ea <snprintk>
		.retain_flag = 0,
	};
	bool result;

	ret = bt_addr_to_str(&ble_job->ble_id, ble_id_str, BT_ADDR_LE_STR_LEN);
	if (ret < 0 || ret >= BT_ADDR_LE_STR_LEN) {
   32adc:	281d      	cmp	r0, #29
   32ade:	d841      	bhi.n	32b64 <nrf_cloud_fota_ble_job_update+0xd8>
		return -EADDRNOTAVAIL;
	}

	array = cJSON_CreateArray();
   32ae0:	f7f8 fb74 	bl	2b1cc <cJSON_CreateArray>
	if (!array) {
   32ae4:	4606      	mov	r6, r0
   32ae6:	b188      	cbz	r0, 32b0c <nrf_cloud_fota_ble_job_update+0x80>
		return -ENOMEM;
	}

	result = add_string_to_array(array, ble_id_str) &&
   32ae8:	a90c      	add	r1, sp, #48	; 0x30
   32aea:	f015 f85c 	bl	47ba6 <add_string_to_array>
		 add_string_to_array(array, ble_job->info.id) &&
   32aee:	b980      	cbnz	r0, 32b12 <nrf_cloud_fota_ble_job_update+0x86>
   32af0:	2400      	movs	r4, #0
		 add_number_to_array(array, status);

	if (status == NRF_CLOUD_FOTA_DOWNLOADING) {
   32af2:	2f07      	cmp	r7, #7
   32af4:	d119      	bne.n	32b2a <nrf_cloud_fota_ble_job_update+0x9e>
		result &= add_number_to_array(array, ble_job->dl_progress);
   32af6:	6a29      	ldr	r1, [r5, #32]
   32af8:	4630      	mov	r0, r6
   32afa:	f015 f841 	bl	47b80 <add_number_to_array>
	} else {
		result &= add_string_to_array(array,
   32afe:	4020      	ands	r0, r4
   32b00:	f000 0001 	and.w	r0, r0, #1
			get_error_string(ble_job->error));
	}

	if (!result) {
   32b04:	b9f0      	cbnz	r0, 32b44 <nrf_cloud_fota_ble_job_update+0xb8>
		cJSON_free(array);
   32b06:	4630      	mov	r0, r6
   32b08:	f7f8 fb78 	bl	2b1fc <cJSON_free>
		return -ENOMEM;
   32b0c:	f06f 000b 	mvn.w	r0, #11
   32b10:	e01d      	b.n	32b4e <nrf_cloud_fota_ble_job_update+0xc2>
		 add_string_to_array(array, ble_job->info.id) &&
   32b12:	68e9      	ldr	r1, [r5, #12]
   32b14:	4630      	mov	r0, r6
   32b16:	f015 f846 	bl	47ba6 <add_string_to_array>
	result = add_string_to_array(array, ble_id_str) &&
   32b1a:	2800      	cmp	r0, #0
   32b1c:	d0e8      	beq.n	32af0 <nrf_cloud_fota_ble_job_update+0x64>
		 add_number_to_array(array, status);
   32b1e:	4639      	mov	r1, r7
   32b20:	4630      	mov	r0, r6
   32b22:	f015 f82d 	bl	47b80 <add_number_to_array>
   32b26:	4604      	mov	r4, r0
   32b28:	e7e3      	b.n	32af2 <nrf_cloud_fota_ble_job_update+0x66>
	switch (err) {
   32b2a:	7f2b      	ldrb	r3, [r5, #28]
		result &= add_string_to_array(array,
   32b2c:	4630      	mov	r0, r6
   32b2e:	3b01      	subs	r3, #1
   32b30:	b2db      	uxtb	r3, r3
   32b32:	2b03      	cmp	r3, #3
   32b34:	bf96      	itet	ls
   32b36:	4a10      	ldrls	r2, [pc, #64]	; (32b78 <nrf_cloud_fota_ble_job_update+0xec>)
   32b38:	4910      	ldrhi	r1, [pc, #64]	; (32b7c <nrf_cloud_fota_ble_job_update+0xf0>)
   32b3a:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   32b3e:	f015 f832 	bl	47ba6 <add_string_to_array>
   32b42:	e7dc      	b.n	32afe <nrf_cloud_fota_ble_job_update+0x72>
		return -ENOMEM;
	}

	return publish_and_free_array(array, &topic_ble_updt, &param);
   32b44:	aa06      	add	r2, sp, #24
   32b46:	490a      	ldr	r1, [pc, #40]	; (32b70 <nrf_cloud_fota_ble_job_update+0xe4>)
   32b48:	4630      	mov	r0, r6
   32b4a:	f015 f83b 	bl	47bc4 <publish_and_free_array>
}
   32b4e:	b015      	add	sp, #84	; 0x54
   32b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   32b52:	f06f 0015 	mvn.w	r0, #21
   32b56:	e7fa      	b.n	32b4e <nrf_cloud_fota_ble_job_update+0xc2>
		return -ENXIO;
   32b58:	f06f 0005 	mvn.w	r0, #5
   32b5c:	e7f7      	b.n	32b4e <nrf_cloud_fota_ble_job_update+0xc2>
		return -EHOSTUNREACH;
   32b5e:	f06f 0075 	mvn.w	r0, #117	; 0x75
   32b62:	e7f4      	b.n	32b4e <nrf_cloud_fota_ble_job_update+0xc2>
		return -EADDRNOTAVAIL;
   32b64:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   32b68:	e7f1      	b.n	32b4e <nrf_cloud_fota_ble_job_update+0xc2>
   32b6a:	bf00      	nop
   32b6c:	200258b0 	.word	0x200258b0
   32b70:	200208a4 	.word	0x200208a4
   32b74:	0005090d 	.word	0x0005090d
   32b78:	0004a40c 	.word	0x0004a40c
   32b7c:	0004c55d 	.word	0x0004c55d

00032b80 <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   32b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   32b82:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   32b86:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   32b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   32b8c:	d90e      	bls.n	32bac <fragment_evt_send+0x2c>
   32b8e:	490f      	ldr	r1, [pc, #60]	; (32bcc <fragment_evt_send+0x4c>)
   32b90:	f240 1339 	movw	r3, #313	; 0x139
   32b94:	4a0e      	ldr	r2, [pc, #56]	; (32bd0 <fragment_evt_send+0x50>)
   32b96:	480f      	ldr	r0, [pc, #60]	; (32bd4 <fragment_evt_send+0x54>)
   32b98:	f011 fb9a 	bl	442d0 <printk>
   32b9c:	480e      	ldr	r0, [pc, #56]	; (32bd8 <fragment_evt_send+0x58>)
   32b9e:	f011 fb97 	bl	442d0 <printk>
   32ba2:	f240 1139 	movw	r1, #313	; 0x139
   32ba6:	480a      	ldr	r0, [pc, #40]	; (32bd0 <fragment_evt_send+0x50>)
   32ba8:	f011 fdac 	bl	44704 <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   32bac:	2300      	movs	r3, #0
   32bae:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   32bb2:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   32bb4:	9302      	str	r3, [sp, #8]
   32bb6:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   32bba:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   32bbc:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   32bbe:	f641 1308 	movw	r3, #6408	; 0x1908
   32bc2:	58e3      	ldr	r3, [r4, r3]
   32bc4:	4798      	blx	r3
}
   32bc6:	b004      	add	sp, #16
   32bc8:	bd10      	pop	{r4, pc}
   32bca:	bf00      	nop
   32bcc:	000510d5 	.word	0x000510d5
   32bd0:	00051090 	.word	0x00051090
   32bd4:	0004b33b 	.word	0x0004b33b
   32bd8:	000510ec 	.word	0x000510ec

00032bdc <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   32bdc:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   32bde:	4605      	mov	r5, r0
{
   32be0:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   32be2:	b1f8      	cbz	r0, 32c24 <download_client_init+0x48>
   32be4:	b1f1      	cbz	r1, 32c24 <download_client_init+0x48>
		return -EINVAL;
	}

	client->fd = -1;
   32be6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32bea:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   32bec:	f641 1308 	movw	r3, #6408	; 0x1908
   32bf0:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   32bf2:	2200      	movs	r2, #0
   32bf4:	2300      	movs	r3, #0
   32bf6:	2400      	movs	r4, #0
   32bf8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   32bfc:	230e      	movs	r3, #14
   32bfe:	9000      	str	r0, [sp, #0]
   32c00:	e9cd 3403 	strd	r3, r4, [sp, #12]
   32c04:	f600 1108 	addw	r1, r0, #2312	; 0x908
   32c08:	e9cd 4401 	strd	r4, r4, [sp, #4]
   32c0c:	4b07      	ldr	r3, [pc, #28]	; (32c2c <download_client_init+0x50>)
   32c0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   32c12:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   32c16:	f00d ff93 	bl	40b40 <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   32c1a:	f8c5 0838 	str.w	r0, [r5, #2104]	; 0x838
		k_thread_create(&client->thread, client->thread_stack,
				K_THREAD_STACK_SIZEOF(client->thread_stack),
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	return 0;
   32c1e:	4620      	mov	r0, r4
}
   32c20:	b009      	add	sp, #36	; 0x24
   32c22:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   32c24:	f06f 0015 	mvn.w	r0, #21
   32c28:	e7fa      	b.n	32c20 <download_client_init+0x44>
   32c2a:	bf00      	nop
   32c2c:	0003318d 	.word	0x0003318d

00032c30 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   32c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32c34:	4688      	mov	r8, r1
   32c36:	b0c5      	sub	sp, #276	; 0x114
   32c38:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   32c3a:	4605      	mov	r5, r0
   32c3c:	2800      	cmp	r0, #0
   32c3e:	f000 8244 	beq.w	330ca <download_client_connect+0x49a>
   32c42:	2900      	cmp	r1, #0
   32c44:	f000 8241 	beq.w	330ca <download_client_connect+0x49a>
   32c48:	2a00      	cmp	r2, #0
   32c4a:	f000 823e 	beq.w	330ca <download_client_connect+0x49a>
		return -EINVAL;
	}

	if (client->fd != -1) {
   32c4e:	6803      	ldr	r3, [r0, #0]
   32c50:	3301      	adds	r3, #1
   32c52:	f040 823d 	bne.w	330d0 <download_client_connect+0x4a0>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   32c56:	6893      	ldr	r3, [r2, #8]
   32c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   32c5c:	d913      	bls.n	32c86 <download_client_connect+0x56>
		LOG_ERR("The configured fragment size is larger than buffer");
   32c5e:	2301      	movs	r3, #1
   32c60:	f04f 0000 	mov.w	r0, #0
   32c64:	4ac5      	ldr	r2, [pc, #788]	; (32f7c <download_client_connect+0x34c>)
   32c66:	f363 0007 	bfi	r0, r3, #0, #8
   32c6a:	4bc5      	ldr	r3, [pc, #788]	; (32f80 <download_client_connect+0x350>)
   32c6c:	49c5      	ldr	r1, [pc, #788]	; (32f84 <download_client_connect+0x354>)
   32c6e:	1a9b      	subs	r3, r3, r2
   32c70:	08db      	lsrs	r3, r3, #3
   32c72:	f363 108f 	bfi	r0, r3, #6, #10
   32c76:	f011 fd56 	bl	44726 <log_string_sync>
		return -E2BIG;
   32c7a:	f06f 0406 	mvn.w	r4, #6
	if (err) {
		return err;
	}

	return 0;
}
   32c7e:	4620      	mov	r0, r4
   32c80:	b045      	add	sp, #276	; 0x114
   32c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   32c86:	6854      	ldr	r4, [r2, #4]
	struct addrinfo hints = {
   32c88:	2100      	movs	r1, #0
   32c8a:	2250      	movs	r2, #80	; 0x50
   32c8c:	a81c      	add	r0, sp, #112	; 0x70
   32c8e:	f015 fa9b 	bl	481c8 <memset>
			} : NULL,
   32c92:	b16c      	cbz	r4, 32cb0 <download_client_connect+0x80>
			&(struct addrinfo) {
   32c94:	2250      	movs	r2, #80	; 0x50
   32c96:	2100      	movs	r1, #0
   32c98:	a830      	add	r0, sp, #192	; 0xc0
   32c9a:	f015 fa95 	bl	481c8 <memset>
   32c9e:	2304      	movs	r3, #4
   32ca0:	2266      	movs	r2, #102	; 0x66
   32ca2:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   32ca6:	f240 2302 	movw	r3, #514	; 0x202
   32caa:	9437      	str	r4, [sp, #220]	; 0xdc
   32cac:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   32cae:	ac30      	add	r4, sp, #192	; 0xc0
	struct addrinfo hints = {
   32cb0:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   32cb2:	2240      	movs	r2, #64	; 0x40
   32cb4:	a90c      	add	r1, sp, #48	; 0x30
   32cb6:	4640      	mov	r0, r8
	struct addrinfo hints = {
   32cb8:	941c      	str	r4, [sp, #112]	; 0x70
   32cba:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   32cbc:	f000 fc3c 	bl	33538 <url_parse_host>
	if (err) {
   32cc0:	4604      	mov	r4, r0
   32cc2:	2800      	cmp	r0, #0
   32cc4:	d1db      	bne.n	32c7e <download_client_connect+0x4e>
	return zsock_getaddrinfo(host, service, hints, res);
   32cc6:	4601      	mov	r1, r0
   32cc8:	ab05      	add	r3, sp, #20
   32cca:	aa1c      	add	r2, sp, #112	; 0x70
   32ccc:	a80c      	add	r0, sp, #48	; 0x30
   32cce:	f012 f8d2 	bl	44e76 <zsock_getaddrinfo>
	if (err) {
   32cd2:	4604      	mov	r4, r0
   32cd4:	b1b0      	cbz	r0, 32d04 <download_client_connect+0xd4>
		LOG_WRN("Failed to resolve hostname %s on %s",
   32cd6:	2302      	movs	r3, #2
   32cd8:	f04f 0400 	mov.w	r4, #0
   32cdc:	4aa7      	ldr	r2, [pc, #668]	; (32f7c <download_client_connect+0x34c>)
   32cde:	f363 0407 	bfi	r4, r3, #0, #8
   32ce2:	4ba7      	ldr	r3, [pc, #668]	; (32f80 <download_client_connect+0x350>)
   32ce4:	a80c      	add	r0, sp, #48	; 0x30
   32ce6:	1a9b      	subs	r3, r3, r2
   32ce8:	08db      	lsrs	r3, r3, #3
   32cea:	f363 148f 	bfi	r4, r3, #6, #10
   32cee:	f011 fd2d 	bl	4474c <log_strdup>
   32cf2:	4ba5      	ldr	r3, [pc, #660]	; (32f88 <download_client_connect+0x358>)
   32cf4:	4602      	mov	r2, r0
   32cf6:	49a5      	ldr	r1, [pc, #660]	; (32f8c <download_client_connect+0x35c>)
   32cf8:	4620      	mov	r0, r4
   32cfa:	f011 fd14 	bl	44726 <log_string_sync>
		return -EHOSTUNREACH;
   32cfe:	f06f 0475 	mvn.w	r4, #117	; 0x75
   32d02:	e7bc      	b.n	32c7e <download_client_connect+0x4e>
	*sa = *(ai->ai_addr);
   32d04:	f8dd c014 	ldr.w	ip, [sp, #20]
   32d08:	af06      	add	r7, sp, #24
   32d0a:	f8dc 3018 	ldr.w	r3, [ip, #24]
   32d0e:	f103 0e18 	add.w	lr, r3, #24
   32d12:	463a      	mov	r2, r7
   32d14:	6818      	ldr	r0, [r3, #0]
   32d16:	6859      	ldr	r1, [r3, #4]
   32d18:	3308      	adds	r3, #8
   32d1a:	c203      	stmia	r2!, {r0, r1}
   32d1c:	4573      	cmp	r3, lr
   32d1e:	4617      	mov	r7, r2
   32d20:	d1f7      	bne.n	32d12 <download_client_connect+0xe2>
	zsock_freeaddrinfo(ai);
   32d22:	4660      	mov	r0, ip
   32d24:	f012 f8a9 	bl	44e7a <zsock_freeaddrinfo>
	client->config = *config;
   32d28:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   32d2c:	f605 0318 	addw	r3, r5, #2072	; 0x818
   32d30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	client->host = host;
   32d34:	f8c5 8810 	str.w	r8, [r5, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   32d38:	aa05      	add	r2, sp, #20
   32d3a:	f605 0124 	addw	r1, r5, #2084	; 0x824
   32d3e:	4640      	mov	r0, r8
   32d40:	f000 fbc4 	bl	334cc <url_parse_proto>
	if (err) {
   32d44:	b150      	cbz	r0, 32d5c <download_client_connect+0x12c>
		type = SOCK_STREAM;
   32d46:	2301      	movs	r3, #1
   32d48:	9305      	str	r3, [sp, #20]
		if (dl->config.sec_tag != -1) {
   32d4a:	f8d5 3818 	ldr.w	r3, [r5, #2072]	; 0x818
   32d4e:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   32d50:	bf14      	ite	ne
   32d52:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   32d56:	2306      	moveq	r3, #6
   32d58:	f8c5 3824 	str.w	r3, [r5, #2084]	; 0x824
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   32d5c:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   32d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
   32d64:	2a11      	cmp	r2, #17
   32d66:	f000 81aa 	beq.w	330be <download_client_connect+0x48e>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   32d6a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   32d6e:	d149      	bne.n	32e04 <download_client_connect+0x1d4>
		if (dl->config.sec_tag == -1) {
   32d70:	f8d5 3818 	ldr.w	r3, [r5, #2072]	; 0x818
   32d74:	3301      	adds	r3, #1
   32d76:	d145      	bne.n	32e04 <download_client_connect+0x1d4>
			LOG_WRN("No security tag provided for TLS/DTLS");
   32d78:	2302      	movs	r3, #2
   32d7a:	f04f 0000 	mov.w	r0, #0
   32d7e:	4a7f      	ldr	r2, [pc, #508]	; (32f7c <download_client_connect+0x34c>)
   32d80:	f363 0007 	bfi	r0, r3, #0, #8
   32d84:	4b7e      	ldr	r3, [pc, #504]	; (32f80 <download_client_connect+0x350>)
   32d86:	4982      	ldr	r1, [pc, #520]	; (32f90 <download_client_connect+0x360>)
   32d88:	1a9b      	subs	r3, r3, r2
   32d8a:	08db      	lsrs	r3, r3, #3
   32d8c:	f363 108f 	bfi	r0, r3, #6, #10
   32d90:	f011 fcc9 	bl	44726 <log_string_sync>
			return -EINVAL;
   32d94:	f06f 0415 	mvn.w	r4, #21
	if (client->fd < 0) {
   32d98:	682e      	ldr	r6, [r5, #0]
   32d9a:	2e00      	cmp	r6, #0
   32d9c:	f6ff af6f 	blt.w	32c7e <download_client_connect+0x4e>
	struct timeval timeo = {
   32da0:	2204      	movs	r2, #4
   32da2:	2300      	movs	r3, #0
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   32da4:	f04f 0000 	mov.w	r0, #0
	struct timeval timeo = {
   32da8:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   32dac:	2303      	movs	r3, #3
   32dae:	4d74      	ldr	r5, [pc, #464]	; (32f80 <download_client_connect+0x350>)
   32db0:	f363 0007 	bfi	r0, r3, #0, #8
   32db4:	4b71      	ldr	r3, [pc, #452]	; (32f7c <download_client_connect+0x34c>)
   32db6:	4977      	ldr	r1, [pc, #476]	; (32f94 <download_client_connect+0x364>)
   32db8:	1aed      	subs	r5, r5, r3
   32dba:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   32dbe:	f365 108f 	bfi	r0, r5, #6, #10
   32dc2:	f011 fcb0 	bl	44726 <log_string_sync>
   32dc6:	2308      	movs	r3, #8
   32dc8:	2214      	movs	r2, #20
   32dca:	9300      	str	r3, [sp, #0]
   32dcc:	2101      	movs	r1, #1
   32dce:	ab1c      	add	r3, sp, #112	; 0x70
   32dd0:	4630      	mov	r0, r6
   32dd2:	f012 f8fb 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err) {
   32dd6:	4604      	mov	r4, r0
   32dd8:	2800      	cmp	r0, #0
   32dda:	f43f af50 	beq.w	32c7e <download_client_connect+0x4e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   32dde:	2302      	movs	r3, #2
   32de0:	f04f 0400 	mov.w	r4, #0
   32de4:	f363 0407 	bfi	r4, r3, #0, #8
   32de8:	f012 fdfc 	bl	459e4 <__errno>
   32dec:	f365 148f 	bfi	r4, r5, #6, #10
   32df0:	6802      	ldr	r2, [r0, #0]
   32df2:	4969      	ldr	r1, [pc, #420]	; (32f98 <download_client_connect+0x368>)
   32df4:	4620      	mov	r0, r4
   32df6:	f011 fc96 	bl	44726 <log_string_sync>
		return -errno;
   32dfa:	f012 fdf3 	bl	459e4 <__errno>
   32dfe:	6804      	ldr	r4, [r0, #0]
   32e00:	4264      	negs	r4, r4
	if (err) {
   32e02:	e73c      	b.n	32c7e <download_client_connect+0x4e>
	err = url_parse_port(host, &port);
   32e04:	f10d 0112 	add.w	r1, sp, #18
   32e08:	4640      	mov	r0, r8
   32e0a:	f000 fbbf 	bl	3358c <url_parse_port>
	if (err) {
   32e0e:	b130      	cbz	r0, 32e1e <download_client_connect+0x1ee>
		switch (dl->proto) {
   32e10:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   32e14:	2b11      	cmp	r3, #17
   32e16:	d044      	beq.n	32ea2 <download_client_connect+0x272>
   32e18:	dc32      	bgt.n	32e80 <download_client_connect+0x250>
   32e1a:	2b06      	cmp	r3, #6
   32e1c:	d03f      	beq.n	32e9e <download_client_connect+0x26e>
	switch (sa->sa_family) {
   32e1e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   32e22:	2801      	cmp	r0, #1
   32e24:	d040      	beq.n	32ea8 <download_client_connect+0x278>
   32e26:	2802      	cmp	r0, #2
   32e28:	f040 814c 	bne.w	330c4 <download_client_connect+0x494>
		addrlen = sizeof(struct sockaddr_in6);
   32e2c:	f04f 0918 	mov.w	r9, #24
		SIN6(sa)->sin6_port = htons(port);
   32e30:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   32e34:	0213      	lsls	r3, r2, #8
   32e36:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   32e3a:	f8ad 301a 	strh.w	r3, [sp, #26]
	*fd = socket(sa->sa_family, type, dl->proto);
   32e3e:	9905      	ldr	r1, [sp, #20]
   32e40:	f8d5 2824 	ldr.w	r2, [r5, #2084]	; 0x824
	return z_impl_zsock_socket(family, type, proto);
   32e44:	f7f2 fb0a 	bl	2545c <z_impl_zsock_socket>
   32e48:	4f4d      	ldr	r7, [pc, #308]	; (32f80 <download_client_connect+0x350>)
   32e4a:	4b4c      	ldr	r3, [pc, #304]	; (32f7c <download_client_connect+0x34c>)
	if (*fd < 0) {
   32e4c:	2800      	cmp	r0, #0
   32e4e:	eba7 0703 	sub.w	r7, r7, r3
	*fd = socket(sa->sa_family, type, dl->proto);
   32e52:	6028      	str	r0, [r5, #0]
	if (*fd < 0) {
   32e54:	f3c7 07c9 	ubfx	r7, r7, #3, #10
   32e58:	da30      	bge.n	32ebc <download_client_connect+0x28c>
		LOG_ERR("Failed to create socket, err %d", errno);
   32e5a:	2301      	movs	r3, #1
   32e5c:	f04f 0400 	mov.w	r4, #0
   32e60:	f363 0407 	bfi	r4, r3, #0, #8
   32e64:	f012 fdbe 	bl	459e4 <__errno>
   32e68:	f367 148f 	bfi	r4, r7, #6, #10
   32e6c:	6802      	ldr	r2, [r0, #0]
   32e6e:	494b      	ldr	r1, [pc, #300]	; (32f9c <download_client_connect+0x36c>)
   32e70:	4620      	mov	r0, r4
   32e72:	f011 fc58 	bl	44726 <log_string_sync>
		return -errno;
   32e76:	f012 fdb5 	bl	459e4 <__errno>
   32e7a:	6804      	ldr	r4, [r0, #0]
   32e7c:	4264      	negs	r4, r4
   32e7e:	e78b      	b.n	32d98 <download_client_connect+0x168>
		switch (dl->proto) {
   32e80:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   32e84:	d006      	beq.n	32e94 <download_client_connect+0x264>
   32e86:	f240 1211 	movw	r2, #273	; 0x111
   32e8a:	4293      	cmp	r3, r2
   32e8c:	d1c7      	bne.n	32e1e <download_client_connect+0x1ee>
			port = 5684;
   32e8e:	f241 6334 	movw	r3, #5684	; 0x1634
   32e92:	e001      	b.n	32e98 <download_client_connect+0x268>
			port = 443;
   32e94:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   32e98:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   32e9c:	e7bf      	b.n	32e1e <download_client_connect+0x1ee>
			port = 80;
   32e9e:	2350      	movs	r3, #80	; 0x50
   32ea0:	e7fa      	b.n	32e98 <download_client_connect+0x268>
			port = 5683;
   32ea2:	f241 6333 	movw	r3, #5683	; 0x1633
   32ea6:	e7f7      	b.n	32e98 <download_client_connect+0x268>
		SIN(sa)->sin_port = htons(port);
   32ea8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		addrlen = sizeof(struct sockaddr_in);
   32eac:	f04f 0908 	mov.w	r9, #8
		SIN(sa)->sin_port = htons(port);
   32eb0:	0213      	lsls	r3, r2, #8
   32eb2:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   32eb6:	f8ad 301a 	strh.w	r3, [sp, #26]
		break;
   32eba:	e7c0      	b.n	32e3e <download_client_connect+0x20e>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   32ebc:	f8d5 081c 	ldr.w	r0, [r5, #2076]	; 0x81c
   32ec0:	2800      	cmp	r0, #0
   32ec2:	d079      	beq.n	32fb8 <download_client_connect+0x388>
   32ec4:	f7ea f9ce 	bl	1d264 <strlen>
   32ec8:	2800      	cmp	r0, #0
   32eca:	d075      	beq.n	32fb8 <download_client_connect+0x388>
		err = socket_apn_set(*fd, dl->config.apn);
   32ecc:	f8d5 681c 	ldr.w	r6, [r5, #2076]	; 0x81c
   32ed0:	f8d5 b000 	ldr.w	fp, [r5]
	__ASSERT_NO_MSG(apn);
   32ed4:	b94e      	cbnz	r6, 32eea <download_client_connect+0x2ba>
   32ed6:	4932      	ldr	r1, [pc, #200]	; (32fa0 <download_client_connect+0x370>)
   32ed8:	4832      	ldr	r0, [pc, #200]	; (32fa4 <download_client_connect+0x374>)
   32eda:	236f      	movs	r3, #111	; 0x6f
   32edc:	4a32      	ldr	r2, [pc, #200]	; (32fa8 <download_client_connect+0x378>)
   32ede:	f011 f9f7 	bl	442d0 <printk>
   32ee2:	216f      	movs	r1, #111	; 0x6f
   32ee4:	4830      	ldr	r0, [pc, #192]	; (32fa8 <download_client_connect+0x378>)
   32ee6:	f011 fc0d 	bl	44704 <assert_post_action>
	len = strlen(apn);
   32eea:	4630      	mov	r0, r6
   32eec:	f7ea f9ba 	bl	1d264 <strlen>
	if (len >= IFNAMSIZ) {
   32ef0:	283f      	cmp	r0, #63	; 0x3f
   32ef2:	d913      	bls.n	32f1c <download_client_connect+0x2ec>
		LOG_ERR("Access point name is too long.");
   32ef4:	2301      	movs	r3, #1
   32ef6:	f04f 0000 	mov.w	r0, #0
   32efa:	f363 0007 	bfi	r0, r3, #0, #8
   32efe:	f367 108f 	bfi	r0, r7, #6, #10
   32f02:	492a      	ldr	r1, [pc, #168]	; (32fac <download_client_connect+0x37c>)
   32f04:	f011 fc0f 	bl	44726 <log_string_sync>
		return -EINVAL;
   32f08:	f06f 0615 	mvn.w	r6, #21
		close(*fd);
   32f0c:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   32f0e:	f011 ffc5 	bl	44e9c <z_impl_zsock_close>
		*fd = -1;
   32f12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32f16:	4634      	mov	r4, r6
   32f18:	602b      	str	r3, [r5, #0]
   32f1a:	e73d      	b.n	32d98 <download_client_connect+0x168>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   32f1c:	2203      	movs	r2, #3
   32f1e:	f04f 0a00 	mov.w	sl, #0
   32f22:	9003      	str	r0, [sp, #12]
   32f24:	4630      	mov	r0, r6
   32f26:	f362 0a07 	bfi	sl, r2, #0, #8
   32f2a:	f011 fc0f 	bl	4474c <log_strdup>
   32f2e:	f367 1a8f 	bfi	sl, r7, #6, #10
   32f32:	4602      	mov	r2, r0
   32f34:	491e      	ldr	r1, [pc, #120]	; (32fb0 <download_client_connect+0x380>)
   32f36:	4650      	mov	r0, sl
   32f38:	f011 fbf5 	bl	44726 <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   32f3c:	9b03      	ldr	r3, [sp, #12]
   32f3e:	2219      	movs	r2, #25
   32f40:	9300      	str	r3, [sp, #0]
   32f42:	2101      	movs	r1, #1
   32f44:	4633      	mov	r3, r6
   32f46:	4658      	mov	r0, fp
   32f48:	f012 f840 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err) {
   32f4c:	b3a0      	cbz	r0, 32fb8 <download_client_connect+0x388>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   32f4e:	2301      	movs	r3, #1
   32f50:	f04f 0400 	mov.w	r4, #0
   32f54:	4630      	mov	r0, r6
   32f56:	f363 0407 	bfi	r4, r3, #0, #8
   32f5a:	f011 fbf7 	bl	4474c <log_strdup>
   32f5e:	4606      	mov	r6, r0
   32f60:	f012 fd40 	bl	459e4 <__errno>
   32f64:	f367 148f 	bfi	r4, r7, #6, #10
   32f68:	6803      	ldr	r3, [r0, #0]
   32f6a:	4632      	mov	r2, r6
   32f6c:	4911      	ldr	r1, [pc, #68]	; (32fb4 <download_client_connect+0x384>)
   32f6e:	4620      	mov	r0, r4
   32f70:	f011 fbd9 	bl	44726 <log_string_sync>
		return -ENETUNREACH;
   32f74:	f06f 0671 	mvn.w	r6, #113	; 0x71
   32f78:	e7c8      	b.n	32f0c <download_client_connect+0x2dc>
   32f7a:	bf00      	nop
   32f7c:	00049788 	.word	0x00049788
   32f80:	00049810 	.word	0x00049810
   32f84:	00050d6e 	.word	0x00050d6e
   32f88:	00050da1 	.word	0x00050da1
   32f8c:	00050da6 	.word	0x00050da6
   32f90:	00050dca 	.word	0x00050dca
   32f94:	00050f1a 	.word	0x00050f1a
   32f98:	00050f3d 	.word	0x00050f3d
   32f9c:	00050df0 	.word	0x00050df0
   32fa0:	0004eb9d 	.word	0x0004eb9d
   32fa4:	0004b33b 	.word	0x0004b33b
   32fa8:	00051090 	.word	0x00051090
   32fac:	00050e10 	.word	0x00050e10
   32fb0:	00050e2f 	.word	0x00050e2f
   32fb4:	00050e42 	.word	0x00050e42
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   32fb8:	f8d5 3824 	ldr.w	r3, [r5, #2084]	; 0x824
   32fbc:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   32fc0:	d003      	beq.n	32fca <download_client_connect+0x39a>
   32fc2:	f240 1211 	movw	r2, #273	; 0x111
   32fc6:	4293      	cmp	r3, r2
   32fc8:	d12a      	bne.n	33020 <download_client_connect+0x3f0>
	     && (dl->config.sec_tag != -1)) {
   32fca:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
   32fce:	1c73      	adds	r3, r6, #1
   32fd0:	d026      	beq.n	33020 <download_client_connect+0x3f0>
	verify = REQUIRED;
   32fd2:	2302      	movs	r3, #2
		err = socket_sectag_set(*fd, dl->config.sec_tag);
   32fd4:	f8d5 a000 	ldr.w	sl, [r5]
	sec_tag_t sec_tag_list[] = { sec_tag };
   32fd8:	961c      	str	r6, [sp, #112]	; 0x70
	verify = REQUIRED;
   32fda:	930c      	str	r3, [sp, #48]	; 0x30
   32fdc:	f04f 0b04 	mov.w	fp, #4
   32fe0:	ab0c      	add	r3, sp, #48	; 0x30
   32fe2:	f8cd b000 	str.w	fp, [sp]
   32fe6:	2205      	movs	r2, #5
   32fe8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   32fec:	4650      	mov	r0, sl
   32fee:	f011 ffed 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err) {
   32ff2:	2800      	cmp	r0, #0
   32ff4:	d041      	beq.n	3307a <download_client_connect+0x44a>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   32ff6:	2301      	movs	r3, #1
   32ff8:	f04f 0600 	mov.w	r6, #0
   32ffc:	f363 0607 	bfi	r6, r3, #0, #8
   33000:	f012 fcf0 	bl	459e4 <__errno>
   33004:	4933      	ldr	r1, [pc, #204]	; (330d4 <download_client_connect+0x4a4>)
   33006:	6802      	ldr	r2, [r0, #0]
   33008:	f367 168f 	bfi	r6, r7, #6, #10
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   3300c:	4630      	mov	r0, r6
   3300e:	f011 fb8a 	bl	44726 <log_string_sync>
		return -errno;
   33012:	f012 fce7 	bl	459e4 <__errno>
   33016:	6806      	ldr	r6, [r0, #0]
   33018:	4276      	negs	r6, r6
		if (err) {
   3301a:	2e00      	cmp	r6, #0
   3301c:	f47f af76 	bne.w	32f0c <download_client_connect+0x2dc>
	LOG_INF("Connecting to %s", log_strdup(host));
   33020:	2303      	movs	r3, #3
   33022:	f04f 0600 	mov.w	r6, #0
   33026:	4640      	mov	r0, r8
   33028:	f363 0607 	bfi	r6, r3, #0, #8
   3302c:	f011 fb8e 	bl	4474c <log_strdup>
   33030:	f367 168f 	bfi	r6, r7, #6, #10
   33034:	4602      	mov	r2, r0
   33036:	4928      	ldr	r1, [pc, #160]	; (330d8 <download_client_connect+0x4a8>)
   33038:	4630      	mov	r0, r6
   3303a:	f011 fb74 	bl	44726 <log_string_sync>
	err = connect(*fd, sa, addrlen);
   3303e:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   33040:	464a      	mov	r2, r9
   33042:	a906      	add	r1, sp, #24
   33044:	f011 ff41 	bl	44eca <z_impl_zsock_connect>
	if (err) {
   33048:	2800      	cmp	r0, #0
   3304a:	f43f aea5 	beq.w	32d98 <download_client_connect+0x168>
		LOG_ERR("Unable to connect, errno %d", errno);
   3304e:	2301      	movs	r3, #1
   33050:	f04f 0600 	mov.w	r6, #0
   33054:	f363 0607 	bfi	r6, r3, #0, #8
   33058:	f012 fcc4 	bl	459e4 <__errno>
   3305c:	f367 168f 	bfi	r6, r7, #6, #10
   33060:	6802      	ldr	r2, [r0, #0]
   33062:	491e      	ldr	r1, [pc, #120]	; (330dc <download_client_connect+0x4ac>)
   33064:	4630      	mov	r0, r6
   33066:	f011 fb5e 	bl	44726 <log_string_sync>
		err = -errno;
   3306a:	f012 fcbb 	bl	459e4 <__errno>
   3306e:	6806      	ldr	r6, [r0, #0]
   33070:	4276      	negs	r6, r6
	if (err) {
   33072:	2e00      	cmp	r6, #0
   33074:	f47f af4a 	bne.w	32f0c <download_client_connect+0x2dc>
   33078:	e68e      	b.n	32d98 <download_client_connect+0x168>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   3307a:	2303      	movs	r3, #3
   3307c:	f04f 0000 	mov.w	r0, #0
   33080:	f363 0007 	bfi	r0, r3, #0, #8
   33084:	f367 108f 	bfi	r0, r7, #6, #10
   33088:	4632      	mov	r2, r6
   3308a:	4915      	ldr	r1, [pc, #84]	; (330e0 <download_client_connect+0x4b0>)
   3308c:	f011 fb4b 	bl	44726 <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   33090:	2201      	movs	r2, #1
   33092:	f8cd b000 	str.w	fp, [sp]
   33096:	ab1c      	add	r3, sp, #112	; 0x70
   33098:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3309c:	4650      	mov	r0, sl
   3309e:	f011 ff95 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err) {
   330a2:	2800      	cmp	r0, #0
   330a4:	d0bc      	beq.n	33020 <download_client_connect+0x3f0>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   330a6:	2301      	movs	r3, #1
   330a8:	f04f 0600 	mov.w	r6, #0
   330ac:	f363 0607 	bfi	r6, r3, #0, #8
   330b0:	f012 fc98 	bl	459e4 <__errno>
   330b4:	f367 168f 	bfi	r6, r7, #6, #10
   330b8:	6802      	ldr	r2, [r0, #0]
   330ba:	490a      	ldr	r1, [pc, #40]	; (330e4 <download_client_connect+0x4b4>)
   330bc:	e7a6      	b.n	3300c <download_client_connect+0x3dc>
			return -EPROTONOSUPPORT;
   330be:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   330c2:	e669      	b.n	32d98 <download_client_connect+0x168>
		return -EAFNOSUPPORT;
   330c4:	f06f 0469 	mvn.w	r4, #105	; 0x69
   330c8:	e666      	b.n	32d98 <download_client_connect+0x168>
		return -EINVAL;
   330ca:	f06f 0415 	mvn.w	r4, #21
   330ce:	e5d6      	b.n	32c7e <download_client_connect+0x4e>
		return 0;
   330d0:	2400      	movs	r4, #0
   330d2:	e5d4      	b.n	32c7e <download_client_connect+0x4e>
   330d4:	00050e70 	.word	0x00050e70
   330d8:	00050eed 	.word	0x00050eed
   330dc:	00050efe 	.word	0x00050efe
   330e0:	00050e9c 	.word	0x00050e9c
   330e4:	00050ebf 	.word	0x00050ebf

000330e8 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   330e8:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   330ea:	4604      	mov	r4, r0
   330ec:	b300      	cbz	r0, 33130 <download_client_disconnect+0x48>
   330ee:	6800      	ldr	r0, [r0, #0]
   330f0:	2800      	cmp	r0, #0
   330f2:	db1d      	blt.n	33130 <download_client_disconnect+0x48>
	return z_impl_zsock_close(sock);
   330f4:	f011 fed2 	bl	44e9c <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   330f8:	b1b0      	cbz	r0, 33128 <download_client_disconnect+0x40>
		LOG_ERR("Failed to close socket, errno %d", errno);
   330fa:	2301      	movs	r3, #1
   330fc:	f04f 0400 	mov.w	r4, #0
   33100:	4a0d      	ldr	r2, [pc, #52]	; (33138 <download_client_disconnect+0x50>)
   33102:	f363 0407 	bfi	r4, r3, #0, #8
   33106:	4b0d      	ldr	r3, [pc, #52]	; (3313c <download_client_disconnect+0x54>)
   33108:	1a9b      	subs	r3, r3, r2
   3310a:	08db      	lsrs	r3, r3, #3
   3310c:	f363 148f 	bfi	r4, r3, #6, #10
   33110:	f012 fc68 	bl	459e4 <__errno>
   33114:	490a      	ldr	r1, [pc, #40]	; (33140 <download_client_disconnect+0x58>)
   33116:	6802      	ldr	r2, [r0, #0]
   33118:	4620      	mov	r0, r4
   3311a:	f011 fb04 	bl	44726 <log_string_sync>
		return -errno;
   3311e:	f012 fc61 	bl	459e4 <__errno>
   33122:	6800      	ldr	r0, [r0, #0]
   33124:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   33126:	bd10      	pop	{r4, pc}
	client->fd = -1;
   33128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3312c:	6023      	str	r3, [r4, #0]
	return 0;
   3312e:	e7fa      	b.n	33126 <download_client_disconnect+0x3e>
		return -EINVAL;
   33130:	f06f 0015 	mvn.w	r0, #21
   33134:	e7f7      	b.n	33126 <download_client_disconnect+0x3e>
   33136:	bf00      	nop
   33138:	00049788 	.word	0x00049788
   3313c:	00049810 	.word	0x00049810
   33140:	00050f64 	.word	0x00050f64

00033144 <reconnect>:
{
   33144:	b510      	push	{r4, lr}
	LOG_INF("Reconnecting..");
   33146:	2303      	movs	r3, #3
{
   33148:	4604      	mov	r4, r0
	LOG_INF("Reconnecting..");
   3314a:	f04f 0000 	mov.w	r0, #0
   3314e:	4a0c      	ldr	r2, [pc, #48]	; (33180 <reconnect+0x3c>)
   33150:	f363 0007 	bfi	r0, r3, #0, #8
   33154:	4b0b      	ldr	r3, [pc, #44]	; (33184 <reconnect+0x40>)
   33156:	490c      	ldr	r1, [pc, #48]	; (33188 <reconnect+0x44>)
   33158:	1a9b      	subs	r3, r3, r2
   3315a:	08db      	lsrs	r3, r3, #3
   3315c:	f363 108f 	bfi	r0, r3, #6, #10
   33160:	f011 fae1 	bl	44726 <log_string_sync>
	err = download_client_disconnect(dl);
   33164:	4620      	mov	r0, r4
   33166:	f7ff ffbf 	bl	330e8 <download_client_disconnect>
	if (err) {
   3316a:	b940      	cbnz	r0, 3317e <reconnect+0x3a>
	err = download_client_connect(dl, dl->host, &dl->config);
   3316c:	f604 0218 	addw	r2, r4, #2072	; 0x818
   33170:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   33174:	4620      	mov	r0, r4
}
   33176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   3317a:	f7ff bd59 	b.w	32c30 <download_client_connect>
}
   3317e:	bd10      	pop	{r4, pc}
   33180:	00049788 	.word	0x00049788
   33184:	00049810 	.word	0x00049810
   33188:	000510ff 	.word	0x000510ff

0003318c <download_thread>:
{
   3318c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33190:	4604      	mov	r4, r0
	int rc = 0;
   33192:	2500      	movs	r5, #0
   33194:	4ba1      	ldr	r3, [pc, #644]	; (3341c <download_thread+0x290>)
			LOG_INF("Downloaded %u bytes", dl->progress);
   33196:	4aa2      	ldr	r2, [pc, #648]	; (33420 <download_thread+0x294>)
{
   33198:	b08d      	sub	sp, #52	; 0x34
			LOG_INF("Downloaded %u bytes", dl->progress);
   3319a:	1a9b      	subs	r3, r3, r2
   3319c:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   331a0:	f500 56c8 	add.w	r6, r0, #6400	; 0x1900
   331a4:	9303      	str	r3, [sp, #12]
   331a6:	3608      	adds	r6, #8
	k_thread_suspend(dl->tid);
   331a8:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_suspend(thread);
   331ac:	f00c fede 	bl	3ff6c <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   331b0:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   331b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   331b8:	d30e      	bcc.n	331d8 <download_thread+0x4c>
   331ba:	499a      	ldr	r1, [pc, #616]	; (33424 <download_thread+0x298>)
   331bc:	f240 136f 	movw	r3, #367	; 0x16f
   331c0:	4a99      	ldr	r2, [pc, #612]	; (33428 <download_thread+0x29c>)
   331c2:	489a      	ldr	r0, [pc, #616]	; (3342c <download_thread+0x2a0>)
   331c4:	f011 f884 	bl	442d0 <printk>
   331c8:	4899      	ldr	r0, [pc, #612]	; (33430 <download_thread+0x2a4>)
   331ca:	f011 f881 	bl	442d0 <printk>
   331ce:	f240 116f 	movw	r1, #367	; 0x16f
   331d2:	4895      	ldr	r0, [pc, #596]	; (33428 <download_thread+0x29c>)
   331d4:	f011 fa96 	bl	44704 <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   331d8:	f8d4 1804 	ldr.w	r1, [r4, #2052]	; 0x804
   331dc:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   331e0:	d112      	bne.n	33208 <download_thread+0x7c>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   331e2:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   331e6:	f043 0301 	orr.w	r3, r3, #1
   331ea:	f363 0707 	bfi	r7, r3, #0, #8
   331ee:	9b03      	ldr	r3, [sp, #12]
   331f0:	460a      	mov	r2, r1
   331f2:	f363 178f 	bfi	r7, r3, #6, #10
   331f6:	498f      	ldr	r1, [pc, #572]	; (33434 <download_thread+0x2a8>)
   331f8:	4638      	mov	r0, r7
   331fa:	f011 fa94 	bl	44726 <log_string_sync>
			error_evt_send(dl, E2BIG);
   331fe:	2107      	movs	r1, #7
				error_evt_send(dl, EHOSTDOWN);
   33200:	4630      	mov	r0, r6
   33202:	f014 fd28 	bl	47c56 <error_evt_send.isra.0>
				break;
   33206:	e7cf      	b.n	331a8 <download_thread+0x1c>
		len = recv(dl->fd, dl->buf + dl->offset,
   33208:	46a4      	mov	ip, r4
   3320a:	f85c 0b04 	ldr.w	r0, [ip], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3320e:	2300      	movs	r3, #0
   33210:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   33214:	e9cd 3300 	strd	r3, r3, [sp]
   33218:	4461      	add	r1, ip
   3321a:	f011 fe9f 	bl	44f5c <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   3321e:	1e43      	subs	r3, r0, #1
   33220:	3303      	adds	r3, #3
   33222:	9007      	str	r0, [sp, #28]
   33224:	f240 8082 	bls.w	3332c <download_thread+0x1a0>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   33228:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   3322c:	b1ab      	cbz	r3, 3325a <download_thread+0xce>
   3322e:	f894 3828 	ldrb.w	r3, [r4, #2088]	; 0x828
   33232:	b193      	cbz	r3, 3325a <download_thread+0xce>
				rc = fragment_evt_send(dl);
   33234:	4620      	mov	r0, r4
   33236:	f7ff fca3 	bl	32b80 <fragment_evt_send>
				if (rc) {
   3323a:	4605      	mov	r5, r0
   3323c:	b168      	cbz	r0, 3325a <download_thread+0xce>
					LOG_INF("Fragment refused, download stopped.");
   3323e:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   33242:	f043 0303 	orr.w	r3, r3, #3
   33246:	f363 0b07 	bfi	fp, r3, #0, #8
   3324a:	9b03      	ldr	r3, [sp, #12]
   3324c:	497a      	ldr	r1, [pc, #488]	; (33438 <download_thread+0x2ac>)
   3324e:	f363 1b8f 	bfi	fp, r3, #6, #10
   33252:	4658      	mov	r0, fp
			LOG_INF("Fragment refused, download stopped.");
   33254:	f011 fa67 	bl	44726 <log_string_sync>
   33258:	e7a6      	b.n	331a8 <download_thread+0x1c>
			if (len == -1) {
   3325a:	9b07      	ldr	r3, [sp, #28]
   3325c:	3301      	adds	r3, #1
   3325e:	d150      	bne.n	33302 <download_thread+0x176>
				if (errno == ETIMEDOUT) {
   33260:	f012 fbc0 	bl	459e4 <__errno>
   33264:	6803      	ldr	r3, [r0, #0]
   33266:	2b74      	cmp	r3, #116	; 0x74
   33268:	d025      	beq.n	332b6 <download_thread+0x12a>
				LOG_ERR("Error in recv(), errno %d", errno);
   3326a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   3326e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   33272:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   33276:	f043 0301 	orr.w	r3, r3, #1
   3327a:	f363 0207 	bfi	r2, r3, #0, #8
   3327e:	b293      	uxth	r3, r2
   33280:	9a03      	ldr	r2, [sp, #12]
   33282:	f362 138f 	bfi	r3, r2, #6, #10
   33286:	f8ad 3010 	strh.w	r3, [sp, #16]
   3328a:	f012 fbab 	bl	459e4 <__errno>
   3328e:	496b      	ldr	r1, [pc, #428]	; (3343c <download_thread+0x2b0>)
   33290:	6802      	ldr	r2, [r0, #0]
   33292:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   33296:	f011 fa46 	bl	44726 <log_string_sync>
			rc = error_evt_send(dl, ECONNRESET);
   3329a:	2168      	movs	r1, #104	; 0x68
   3329c:	4630      	mov	r0, r6
   3329e:	f014 fcda 	bl	47c56 <error_evt_send.isra.0>
			if (rc) {
   332a2:	4605      	mov	r5, r0
   332a4:	2800      	cmp	r0, #0
   332a6:	f47f af7f 	bne.w	331a8 <download_thread+0x1c>
			rc = reconnect(dl);
   332aa:	4620      	mov	r0, r4
   332ac:	f7ff ff4a 	bl	33144 <reconnect>
			if (rc) {
   332b0:	4605      	mov	r5, r0
   332b2:	bb20      	cbnz	r0, 332fe <download_thread+0x172>
			rc = reconnect(dl);
   332b4:	2500      	movs	r5, #0
		dl->offset = 0;
   332b6:	2300      	movs	r3, #0
   332b8:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
		if (dl->proto != IPPROTO_TCP || len == 0) {
   332bc:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   332c0:	2b06      	cmp	r3, #6
   332c2:	d103      	bne.n	332cc <download_thread+0x140>
   332c4:	9b07      	ldr	r3, [sp, #28]
   332c6:	2b00      	cmp	r3, #0
   332c8:	f47f af72 	bne.w	331b0 <download_thread+0x24>
			dl->http.has_header = false;
   332cc:	f04f 0300 	mov.w	r3, #0
			rc = request_send(dl);
   332d0:	4620      	mov	r0, r4
			dl->http.has_header = false;
   332d2:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
			rc = request_send(dl);
   332d6:	f014 fcb3 	bl	47c40 <request_send>
			if (rc) {
   332da:	4605      	mov	r5, r0
   332dc:	2800      	cmp	r0, #0
   332de:	f43f af67 	beq.w	331b0 <download_thread+0x24>
				rc = error_evt_send(dl, ECONNRESET);
   332e2:	2168      	movs	r1, #104	; 0x68
   332e4:	4630      	mov	r0, r6
   332e6:	f014 fcb6 	bl	47c56 <error_evt_send.isra.0>
				if (rc) {
   332ea:	4605      	mov	r5, r0
   332ec:	2800      	cmp	r0, #0
   332ee:	f47f af5b 	bne.w	331a8 <download_thread+0x1c>
				rc = reconnect(dl);
   332f2:	4620      	mov	r0, r4
   332f4:	f7ff ff26 	bl	33144 <reconnect>
				if (rc) {
   332f8:	4605      	mov	r5, r0
   332fa:	2800      	cmp	r0, #0
   332fc:	d0db      	beq.n	332b6 <download_thread+0x12a>
				error_evt_send(dl, EHOSTDOWN);
   332fe:	2175      	movs	r1, #117	; 0x75
   33300:	e77e      	b.n	33200 <download_thread+0x74>
				LOG_WRN("Peer closed connection!");
   33302:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   33306:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   3330a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   3330e:	f043 0302 	orr.w	r3, r3, #2
   33312:	f363 0207 	bfi	r2, r3, #0, #8
   33316:	b293      	uxth	r3, r2
   33318:	9a03      	ldr	r2, [sp, #12]
   3331a:	4949      	ldr	r1, [pc, #292]	; (33440 <download_thread+0x2b4>)
   3331c:	f362 138f 	bfi	r3, r2, #6, #10
   33320:	b298      	uxth	r0, r3
   33322:	f8ad 3014 	strh.w	r3, [sp, #20]
   33326:	f011 f9fe 	bl	44726 <log_string_sync>
   3332a:	e7b6      	b.n	3329a <download_thread+0x10e>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   3332c:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   33330:	2b06      	cmp	r3, #6
   33332:	d002      	beq.n	3333a <download_thread+0x1ae>
   33334:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   33338:	d106      	bne.n	33348 <download_thread+0x1bc>
			rc = http_parse(client, len);
   3333a:	9907      	ldr	r1, [sp, #28]
   3333c:	4620      	mov	r0, r4
   3333e:	f000 fa13 	bl	33768 <http_parse>
			if (rc > 0) {
   33342:	1e05      	subs	r5, r0, #0
   33344:	f73f af34 	bgt.w	331b0 <download_thread+0x24>
		if (rc < 0) {
   33348:	2d00      	cmp	r5, #0
   3334a:	da01      	bge.n	33350 <download_thread+0x1c4>
			error_evt_send(dl, EBADMSG);
   3334c:	214d      	movs	r1, #77	; 0x4d
   3334e:	e757      	b.n	33200 <download_thread+0x74>
		if (dl->file_size) {
   33350:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   33354:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   33358:	b353      	cbz	r3, 333b0 <download_thread+0x224>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   3335a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   3335e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   33362:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
   33366:	f041 0103 	orr.w	r1, r1, #3
   3336a:	f361 0007 	bfi	r0, r1, #0, #8
   3336e:	b281      	uxth	r1, r0
   33370:	9803      	ldr	r0, [sp, #12]
   33372:	f360 118f 	bfi	r1, r0, #6, #10
   33376:	f8ad 1018 	strh.w	r1, [sp, #24]
   3337a:	2164      	movs	r1, #100	; 0x64
   3337c:	4351      	muls	r1, r2
   3337e:	fbb1 f1f3 	udiv	r1, r1, r3
   33382:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   33386:	9100      	str	r1, [sp, #0]
   33388:	492e      	ldr	r1, [pc, #184]	; (33444 <download_thread+0x2b8>)
   3338a:	f011 f9cc 	bl	44726 <log_string_sync>
		rc = fragment_evt_send(dl);
   3338e:	4620      	mov	r0, r4
   33390:	f7ff fbf6 	bl	32b80 <fragment_evt_send>
		if (rc) {
   33394:	4605      	mov	r5, r0
   33396:	b1c8      	cbz	r0, 333cc <download_thread+0x240>
			LOG_INF("Fragment refused, download stopped.");
   33398:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   3339c:	f043 0303 	orr.w	r3, r3, #3
   333a0:	f363 0907 	bfi	r9, r3, #0, #8
   333a4:	9b03      	ldr	r3, [sp, #12]
   333a6:	4924      	ldr	r1, [pc, #144]	; (33438 <download_thread+0x2ac>)
   333a8:	f363 198f 	bfi	r9, r3, #6, #10
   333ac:	4648      	mov	r0, r9
   333ae:	e751      	b.n	33254 <download_thread+0xc8>
			LOG_INF("Downloaded %u bytes", dl->progress);
   333b0:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   333b4:	f043 0303 	orr.w	r3, r3, #3
   333b8:	f363 0807 	bfi	r8, r3, #0, #8
   333bc:	9b03      	ldr	r3, [sp, #12]
   333be:	4922      	ldr	r1, [pc, #136]	; (33448 <download_thread+0x2bc>)
   333c0:	f363 188f 	bfi	r8, r3, #6, #10
   333c4:	4640      	mov	r0, r8
   333c6:	f011 f9ae 	bl	44726 <log_string_sync>
   333ca:	e7e0      	b.n	3338e <download_thread+0x202>
		if (dl->progress == dl->file_size) {
   333cc:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   333d0:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   333d4:	429a      	cmp	r2, r3
   333d6:	d116      	bne.n	33406 <download_thread+0x27a>
			LOG_INF("Download complete");
   333d8:	f02a 033f 	bic.w	r3, sl, #63	; 0x3f
   333dc:	f043 0303 	orr.w	r3, r3, #3
   333e0:	f363 0a07 	bfi	sl, r3, #0, #8
   333e4:	9b03      	ldr	r3, [sp, #12]
   333e6:	4919      	ldr	r1, [pc, #100]	; (3344c <download_thread+0x2c0>)
   333e8:	f363 1a8f 	bfi	sl, r3, #6, #10
   333ec:	4650      	mov	r0, sl
   333ee:	f011 f99a 	bl	44726 <log_string_sync>
			const struct download_client_evt evt = {
   333f2:	2302      	movs	r3, #2
   333f4:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
   333f8:	950b      	str	r5, [sp, #44]	; 0x2c
   333fa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			dl->callback(&evt);
   333fe:	a809      	add	r0, sp, #36	; 0x24
   33400:	6833      	ldr	r3, [r6, #0]
   33402:	4798      	blx	r3
			break;
   33404:	e6d0      	b.n	331a8 <download_thread+0x1c>
		if (dl->http.connection_close) {
   33406:	f894 3829 	ldrb.w	r3, [r4, #2089]	; 0x829
   3340a:	2b00      	cmp	r3, #0
   3340c:	f43f af52 	beq.w	332b4 <download_thread+0x128>
			dl->http.connection_close = false;
   33410:	f884 0829 	strb.w	r0, [r4, #2089]	; 0x829
			reconnect(dl);
   33414:	4620      	mov	r0, r4
   33416:	f7ff fe95 	bl	33144 <reconnect>
   3341a:	e74c      	b.n	332b6 <download_thread+0x12a>
   3341c:	00049810 	.word	0x00049810
   33420:	00049788 	.word	0x00049788
   33424:	00050f9a 	.word	0x00050f9a
   33428:	00051090 	.word	0x00051090
   3342c:	0004b33b 	.word	0x0004b33b
   33430:	00050fb7 	.word	0x00050fb7
   33434:	00050fc9 	.word	0x00050fc9
   33438:	00050ff6 	.word	0x00050ff6
   3343c:	0005101a 	.word	0x0005101a
   33440:	00051034 	.word	0x00051034
   33444:	0005104c 	.word	0x0005104c
   33448:	0005106a 	.word	0x0005106a
   3344c:	0005107e 	.word	0x0005107e

00033450 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   33450:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   33452:	4604      	mov	r4, r0
   33454:	b368      	cbz	r0, 334b2 <download_client_start+0x62>
		return -EINVAL;
	}

	if (client->fd < 0) {
   33456:	6803      	ldr	r3, [r0, #0]
   33458:	2b00      	cmp	r3, #0
   3345a:	db2d      	blt.n	334b8 <download_client_start+0x68>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   3345c:	2300      	movs	r3, #0
	client->file = file;
   3345e:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   33462:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   33466:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   3346a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   3346e:	f880 3828 	strb.w	r3, [r0, #2088]	; 0x828

	if (IS_ENABLED(CONFIG_COAP)) {
		coap_block_init(client, from);
	}

	err = request_send(client);
   33472:	f014 fbe5 	bl	47c40 <request_send>
	if (err) {
   33476:	4605      	mov	r5, r0
   33478:	b9c8      	cbnz	r0, 334ae <download_client_start+0x5e>
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   3347a:	2303      	movs	r3, #3
   3347c:	f04f 0600 	mov.w	r6, #0
   33480:	4a0f      	ldr	r2, [pc, #60]	; (334c0 <download_client_start+0x70>)
   33482:	f363 0607 	bfi	r6, r3, #0, #8
   33486:	4b0f      	ldr	r3, [pc, #60]	; (334c4 <download_client_start+0x74>)
   33488:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   3348c:	1a9b      	subs	r3, r3, r2
   3348e:	08db      	lsrs	r3, r3, #3
   33490:	f363 168f 	bfi	r6, r3, #6, #10
   33494:	f011 f95a 	bl	4474c <log_strdup>
   33498:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   3349c:	4602      	mov	r2, r0
   3349e:	490a      	ldr	r1, [pc, #40]	; (334c8 <download_client_start+0x78>)
   334a0:	4630      	mov	r0, r6
   334a2:	f011 f940 	bl	44726 <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   334a6:	f8d4 0838 	ldr.w	r0, [r4, #2104]	; 0x838
	z_impl_k_thread_resume(thread);
   334aa:	f00c fc0b 	bl	3fcc4 <z_impl_k_thread_resume>

	return 0;
}
   334ae:	4628      	mov	r0, r5
   334b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   334b2:	f06f 0515 	mvn.w	r5, #21
   334b6:	e7fa      	b.n	334ae <download_client_start+0x5e>
		return -ENOTCONN;
   334b8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   334bc:	e7f7      	b.n	334ae <download_client_start+0x5e>
   334be:	bf00      	nop
   334c0:	00049788 	.word	0x00049788
   334c4:	00049810 	.word	0x00049810
   334c8:	00050f85 	.word	0x00050f85

000334cc <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   334cc:	b570      	push	{r4, r5, r6, lr}
   334ce:	460d      	mov	r5, r1
   334d0:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   334d2:	4915      	ldr	r1, [pc, #84]	; (33528 <url_parse_proto+0x5c>)
   334d4:	2205      	movs	r2, #5
{
   334d6:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   334d8:	f015 f84f 	bl	4857a <strncmp>
   334dc:	b928      	cbnz	r0, 334ea <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   334de:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   334e2:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   334e4:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   334e6:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   334e8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   334ea:	2204      	movs	r2, #4
   334ec:	490f      	ldr	r1, [pc, #60]	; (3352c <url_parse_proto+0x60>)
   334ee:	4630      	mov	r0, r6
   334f0:	f015 f843 	bl	4857a <strncmp>
   334f4:	b908      	cbnz	r0, 334fa <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   334f6:	2306      	movs	r3, #6
   334f8:	e7f3      	b.n	334e2 <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   334fa:	2205      	movs	r2, #5
   334fc:	490c      	ldr	r1, [pc, #48]	; (33530 <url_parse_proto+0x64>)
   334fe:	4630      	mov	r0, r6
   33500:	f015 f83b 	bl	4857a <strncmp>
   33504:	b920      	cbnz	r0, 33510 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   33506:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   3350a:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   3350c:	2302      	movs	r3, #2
   3350e:	e7ea      	b.n	334e6 <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   33510:	2204      	movs	r2, #4
   33512:	4908      	ldr	r1, [pc, #32]	; (33534 <url_parse_proto+0x68>)
   33514:	4630      	mov	r0, r6
   33516:	f015 f830 	bl	4857a <strncmp>
   3351a:	b908      	cbnz	r0, 33520 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   3351c:	2311      	movs	r3, #17
   3351e:	e7f4      	b.n	3350a <url_parse_proto+0x3e>
		return -EINVAL;
   33520:	f06f 0015 	mvn.w	r0, #21
   33524:	e7e0      	b.n	334e8 <url_parse_proto+0x1c>
   33526:	bf00      	nop
   33528:	00051122 	.word	0x00051122
   3352c:	00051128 	.word	0x00051128
   33530:	0005112d 	.word	0x0005112d
   33534:	00051133 	.word	0x00051133

00033538 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   33538:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3353a:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   3353c:	9001      	str	r0, [sp, #4]
{
   3353e:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   33540:	a801      	add	r0, sp, #4
   33542:	4911      	ldr	r1, [pc, #68]	; (33588 <url_parse_host+0x50>)
{
   33544:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   33546:	f014 fbbf 	bl	47cc8 <swallow>

	end = strchr(cur, ':');
   3354a:	213a      	movs	r1, #58	; 0x3a
   3354c:	9801      	ldr	r0, [sp, #4]
   3354e:	f014 ffe3 	bl	48518 <strchr>
	if (!end) {
   33552:	b948      	cbnz	r0, 33568 <url_parse_host+0x30>
		end = strchr(cur, '/');
   33554:	212f      	movs	r1, #47	; 0x2f
   33556:	9801      	ldr	r0, [sp, #4]
   33558:	f014 ffde 	bl	48518 <strchr>
		if (!end) {
   3355c:	b920      	cbnz	r0, 33568 <url_parse_host+0x30>
			end = url + strlen(url) + 1;
   3355e:	4620      	mov	r0, r4
   33560:	f7e9 fe80 	bl	1d264 <strlen>
   33564:	3001      	adds	r0, #1
   33566:	4420      	add	r0, r4
		}
	}

	if (end - cur + 1 > len) {
   33568:	9901      	ldr	r1, [sp, #4]
   3356a:	1a44      	subs	r4, r0, r1
   3356c:	1c63      	adds	r3, r4, #1
   3356e:	42b3      	cmp	r3, r6
   33570:	d807      	bhi.n	33582 <url_parse_host+0x4a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   33572:	4622      	mov	r2, r4
   33574:	4628      	mov	r0, r5
   33576:	f014 fe07 	bl	48188 <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   3357a:	2000      	movs	r0, #0
   3357c:	5528      	strb	r0, [r5, r4]

	return 0;
}
   3357e:	b002      	add	sp, #8
   33580:	bd70      	pop	{r4, r5, r6, pc}
		return -E2BIG;
   33582:	f06f 0006 	mvn.w	r0, #6
   33586:	e7fa      	b.n	3357e <url_parse_host+0x46>
   33588:	0005111e 	.word	0x0005111e

0003358c <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   3358c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   3358e:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   33590:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   33592:	4917      	ldr	r1, [pc, #92]	; (335f0 <url_parse_port+0x64>)
   33594:	a801      	add	r0, sp, #4
   33596:	f014 fb97 	bl	47cc8 <swallow>

	err = swallow(&cur, ":");
   3359a:	4916      	ldr	r1, [pc, #88]	; (335f4 <url_parse_port+0x68>)
   3359c:	a801      	add	r0, sp, #4
   3359e:	f014 fb93 	bl	47cc8 <swallow>
	if (err) {
   335a2:	4605      	mov	r5, r0
   335a4:	bb08      	cbnz	r0, 335ea <url_parse_port+0x5e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   335a6:	212f      	movs	r1, #47	; 0x2f
   335a8:	9801      	ldr	r0, [sp, #4]
   335aa:	f014 ffb5 	bl	48518 <strchr>
	if (!end) {
   335ae:	b9c8      	cbnz	r0, 335e4 <url_parse_port+0x58>
		len = strlen(cur);
   335b0:	9801      	ldr	r0, [sp, #4]
   335b2:	f7e9 fe57 	bl	1d264 <strlen>
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   335b6:	2807      	cmp	r0, #7
   335b8:	bf38      	it	cc
   335ba:	2007      	movcc	r0, #7

	memcpy(aport, cur, len);
   335bc:	2308      	movs	r3, #8
	len = MAX(len, sizeof(aport) - 1);
   335be:	4604      	mov	r4, r0
	memcpy(aport, cur, len);
   335c0:	4602      	mov	r2, r0
   335c2:	9901      	ldr	r1, [sp, #4]
   335c4:	eb0d 0003 	add.w	r0, sp, r3
   335c8:	f014 fdeb 	bl	481a2 <__memcpy_chk>
	aport[len] = '\0';
   335cc:	ab04      	add	r3, sp, #16
   335ce:	441c      	add	r4, r3
   335d0:	2300      	movs	r3, #0

	*port = atoi(aport);
   335d2:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   335d4:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   335d8:	f014 fdb6 	bl	48148 <atoi>
   335dc:	8030      	strh	r0, [r6, #0]

	return 0;
}
   335de:	4628      	mov	r0, r5
   335e0:	b004      	add	sp, #16
   335e2:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   335e4:	9c01      	ldr	r4, [sp, #4]
   335e6:	1b00      	subs	r0, r0, r4
   335e8:	e7e5      	b.n	335b6 <url_parse_port+0x2a>
		return -EINVAL;
   335ea:	f06f 0515 	mvn.w	r5, #21
   335ee:	e7f6      	b.n	335de <url_parse_port+0x52>
   335f0:	0005111e 	.word	0x0005111e
   335f4:	0004e032 	.word	0x0004e032

000335f8 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   335f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   335fa:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   335fc:	4915      	ldr	r1, [pc, #84]	; (33654 <url_parse_file+0x5c>)
{
   335fe:	4614      	mov	r4, r2
	cur = url;
   33600:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   33602:	f014 ffeb 	bl	485dc <strstr>
   33606:	b940      	cbnz	r0, 3361a <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   33608:	9801      	ldr	r0, [sp, #4]
   3360a:	f7e9 fe2b 	bl	1d264 <strlen>
   3360e:	3001      	adds	r0, #1
   33610:	42a0      	cmp	r0, r4
   33612:	d912      	bls.n	3363a <url_parse_file+0x42>
		return -E2BIG;
   33614:	f06f 0006 	mvn.w	r0, #6
   33618:	e006      	b.n	33628 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   3361a:	490f      	ldr	r1, [pc, #60]	; (33658 <url_parse_file+0x60>)
   3361c:	a801      	add	r0, sp, #4
   3361e:	f014 fb53 	bl	47cc8 <swallow>
		if (err) {
   33622:	b118      	cbz	r0, 3362c <url_parse_file+0x34>
			return -EINVAL;
   33624:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   33628:	b003      	add	sp, #12
   3362a:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   3362c:	490b      	ldr	r1, [pc, #44]	; (3365c <url_parse_file+0x64>)
   3362e:	a801      	add	r0, sp, #4
   33630:	f014 fb4a 	bl	47cc8 <swallow>
		if (err) {
   33634:	2800      	cmp	r0, #0
   33636:	d0e7      	beq.n	33608 <url_parse_file+0x10>
   33638:	e7f4      	b.n	33624 <url_parse_file+0x2c>
	len = strlen(cur);
   3363a:	9801      	ldr	r0, [sp, #4]
   3363c:	f7e9 fe12 	bl	1d264 <strlen>
   33640:	9901      	ldr	r1, [sp, #4]
   33642:	4604      	mov	r4, r0
   33644:	4602      	mov	r2, r0
   33646:	4628      	mov	r0, r5
   33648:	f014 fd9e 	bl	48188 <memcpy>
	file[len] = '\0';
   3364c:	2000      	movs	r0, #0
   3364e:	5528      	strb	r0, [r5, r4]
	return 0;
   33650:	e7ea      	b.n	33628 <url_parse_file+0x30>
   33652:	bf00      	nop
   33654:	0005111f 	.word	0x0005111f
   33658:	0005111e 	.word	0x0005111e
   3365c:	00051120 	.word	0x00051120

00033660 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   33660:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   33662:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
{
   33666:	b0c4      	sub	sp, #272	; 0x110
   33668:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(client->host);
   3366a:	b94b      	cbnz	r3, 33680 <http_get_request_send+0x20>
   3366c:	4935      	ldr	r1, [pc, #212]	; (33744 <http_get_request_send+0xe4>)
   3366e:	4836      	ldr	r0, [pc, #216]	; (33748 <http_get_request_send+0xe8>)
   33670:	232e      	movs	r3, #46	; 0x2e
   33672:	4a36      	ldr	r2, [pc, #216]	; (3374c <http_get_request_send+0xec>)
   33674:	f010 fe2c 	bl	442d0 <printk>
   33678:	212e      	movs	r1, #46	; 0x2e
   3367a:	4834      	ldr	r0, [pc, #208]	; (3374c <http_get_request_send+0xec>)
   3367c:	f011 f842 	bl	44704 <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   33680:	f8d4 3814 	ldr.w	r3, [r4, #2068]	; 0x814
   33684:	b94b      	cbnz	r3, 3369a <http_get_request_send+0x3a>
   33686:	4932      	ldr	r1, [pc, #200]	; (33750 <http_get_request_send+0xf0>)
   33688:	482f      	ldr	r0, [pc, #188]	; (33748 <http_get_request_send+0xe8>)
   3368a:	232f      	movs	r3, #47	; 0x2f
   3368c:	4a2f      	ldr	r2, [pc, #188]	; (3374c <http_get_request_send+0xec>)
   3368e:	f010 fe1f 	bl	442d0 <printk>
   33692:	212f      	movs	r1, #47	; 0x2f
   33694:	482d      	ldr	r0, [pc, #180]	; (3374c <http_get_request_send+0xec>)
   33696:	f011 f835 	bl	44704 <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   3369a:	ad04      	add	r5, sp, #16
   3369c:	2240      	movs	r2, #64	; 0x40
   3369e:	4629      	mov	r1, r5
   336a0:	f8d4 0810 	ldr.w	r0, [r4, #2064]	; 0x810
   336a4:	f7ff ff48 	bl	33538 <url_parse_host>
	if (err) {
   336a8:	4606      	mov	r6, r0
   336aa:	2800      	cmp	r0, #0
   336ac:	d13b      	bne.n	33726 <http_get_request_send+0xc6>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   336ae:	22c0      	movs	r2, #192	; 0xc0
   336b0:	a914      	add	r1, sp, #80	; 0x50
   336b2:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   336b6:	f7ff ff9f 	bl	335f8 <url_parse_file>
	if (err) {
   336ba:	4606      	mov	r6, r0
   336bc:	bb98      	cbnz	r0, 33726 <http_get_request_send+0xc6>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   336be:	f8d4 3820 	ldr.w	r3, [r4, #2080]	; 0x820
   336c2:	f8d4 280c 	ldr.w	r2, [r4, #2060]	; 0x80c
   336c6:	b38b      	cbz	r3, 3372c <http_get_request_send+0xcc>
		off = client->progress + client->config.frag_size_override - 1;
   336c8:	4413      	add	r3, r2
   336ca:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   336cc:	f8d4 1808 	ldr.w	r1, [r4, #2056]	; 0x808
   336d0:	b111      	cbz	r1, 336d8 <http_get_request_send+0x78>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   336d2:	428b      	cmp	r3, r1
   336d4:	bf28      	it	cs
   336d6:	460b      	movcs	r3, r1

	/* We use range requests only for HTTPS, due to memory limitations.
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2) {
   336d8:	f8d4 1824 	ldr.w	r1, [r4, #2084]	; 0x824
   336dc:	1d20      	adds	r0, r4, #4
   336de:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   336e2:	d126      	bne.n	33732 <http_get_request_send+0xd2>
		len = snprintf(client->buf,
   336e4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   336e8:	9500      	str	r5, [sp, #0]
   336ea:	ab14      	add	r3, sp, #80	; 0x50
   336ec:	4a19      	ldr	r2, [pc, #100]	; (33754 <http_get_request_send+0xf4>)
   336ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
   336f2:	f00f f8ff 	bl	428f4 <sniprintf>

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   336f6:	4601      	mov	r1, r0
   336f8:	4620      	mov	r0, r4
   336fa:	f014 fabb 	bl	47c74 <socket_send>
	if (err) {
   336fe:	4606      	mov	r6, r0
   33700:	b188      	cbz	r0, 33726 <http_get_request_send+0xc6>
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   33702:	2301      	movs	r3, #1
   33704:	f04f 0400 	mov.w	r4, #0
   33708:	4a13      	ldr	r2, [pc, #76]	; (33758 <http_get_request_send+0xf8>)
   3370a:	f363 0407 	bfi	r4, r3, #0, #8
   3370e:	4b13      	ldr	r3, [pc, #76]	; (3375c <http_get_request_send+0xfc>)
   33710:	1a9b      	subs	r3, r3, r2
   33712:	08db      	lsrs	r3, r3, #3
   33714:	f363 148f 	bfi	r4, r3, #6, #10
   33718:	f012 f964 	bl	459e4 <__errno>
   3371c:	4910      	ldr	r1, [pc, #64]	; (33760 <http_get_request_send+0x100>)
   3371e:	6802      	ldr	r2, [r0, #0]
   33720:	4620      	mov	r0, r4
   33722:	f011 f800 	bl	44726 <log_string_sync>
		return err;
	}

	return 0;
}
   33726:	4630      	mov	r0, r6
   33728:	b044      	add	sp, #272	; 0x110
   3372a:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   3372c:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   33730:	e7cc      	b.n	336cc <http_get_request_send+0x6c>
		len = snprintf(client->buf,
   33732:	e9cd 5200 	strd	r5, r2, [sp]
   33736:	ab14      	add	r3, sp, #80	; 0x50
   33738:	4a0a      	ldr	r2, [pc, #40]	; (33764 <http_get_request_send+0x104>)
   3373a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   3373e:	f00f f8d9 	bl	428f4 <sniprintf>
   33742:	e7d8      	b.n	336f6 <http_get_request_send+0x96>
   33744:	00051172 	.word	0x00051172
   33748:	0004b33b 	.word	0x0004b33b
   3374c:	00051138 	.word	0x00051138
   33750:	0005117f 	.word	0x0005117f
   33754:	0005118c 	.word	0x0005118c
   33758:	00049788 	.word	0x00049788
   3375c:	00049810 	.word	0x00049810
   33760:	00051220 	.word	0x00051220
   33764:	000511d7 	.word	0x000511d7

00033768 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   33768:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   3376c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   33770:	440b      	add	r3, r1
   33772:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   33776:	f890 3828 	ldrb.w	r3, [r0, #2088]	; 0x828
{
   3377a:	4604      	mov	r4, r0
   3377c:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   3377e:	2b00      	cmp	r3, #0
   33780:	f040 80bd 	bne.w	338fe <http_parse+0x196>
	p = strstr(client->buf, "\r\n\r\n");
   33784:	1d05      	adds	r5, r0, #4
   33786:	496a      	ldr	r1, [pc, #424]	; (33930 <http_parse+0x1c8>)
   33788:	4628      	mov	r0, r5
   3378a:	f014 ff27 	bl	485dc <strstr>
	if (!p) {
   3378e:	4606      	mov	r6, r0
   33790:	2800      	cmp	r0, #0
   33792:	f000 80c9 	beq.w	33928 <http_parse+0x1c0>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   33796:	4866      	ldr	r0, [pc, #408]	; (33930 <http_parse+0x1c8>)
   33798:	f7e9 fd64 	bl	1d264 <strlen>
   3379c:	462b      	mov	r3, r5
   3379e:	4406      	add	r6, r0
   337a0:	eba6 0805 	sub.w	r8, r6, r5
		client->buf[i] = tolower(client->buf[i]);
   337a4:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 33970 <http_parse+0x208>
   337a8:	eb05 0008 	add.w	r0, r5, r8
	for (size_t i = 0; i < *hdr_len; i++) {
   337ac:	4298      	cmp	r0, r3
   337ae:	d119      	bne.n	337e4 <http_parse+0x7c>
	p = strstr(client->buf, "http/1.1 206");
   337b0:	4960      	ldr	r1, [pc, #384]	; (33934 <http_parse+0x1cc>)
   337b2:	4628      	mov	r0, r5
   337b4:	f014 ff12 	bl	485dc <strstr>
	if (!p) {
   337b8:	bb78      	cbnz	r0, 3381a <http_parse+0xb2>
		if (client->proto == IPPROTO_TLS_1_2) {
   337ba:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   337be:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   337c2:	d11a      	bne.n	337fa <http_parse+0x92>
			LOG_ERR("Server did not honor partial content request");
   337c4:	2301      	movs	r3, #1
   337c6:	4a5c      	ldr	r2, [pc, #368]	; (33938 <http_parse+0x1d0>)
   337c8:	f363 0007 	bfi	r0, r3, #0, #8
   337cc:	4b5b      	ldr	r3, [pc, #364]	; (3393c <http_parse+0x1d4>)
   337ce:	495c      	ldr	r1, [pc, #368]	; (33940 <http_parse+0x1d8>)
   337d0:	1a9b      	subs	r3, r3, r2
   337d2:	08db      	lsrs	r3, r3, #3
   337d4:	f363 108f 	bfi	r0, r3, #6, #10
			LOG_ERR("Server response is not 200 Success");
   337d8:	f010 ffa5 	bl	44726 <log_string_sync>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   337dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	    (client->progress != client->file_size)) {
		return 1;
	}

	return 0;
}
   337e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   337e4:	781a      	ldrb	r2, [r3, #0]
   337e6:	f812 100c 	ldrb.w	r1, [r2, ip]
   337ea:	f001 0103 	and.w	r1, r1, #3
   337ee:	2901      	cmp	r1, #1
   337f0:	bf08      	it	eq
   337f2:	3220      	addeq	r2, #32
   337f4:	f803 2b01 	strb.w	r2, [r3], #1
   337f8:	e7d8      	b.n	337ac <http_parse+0x44>
		p = strstr(client->buf, "http/1.1 200");
   337fa:	4952      	ldr	r1, [pc, #328]	; (33944 <http_parse+0x1dc>)
   337fc:	4628      	mov	r0, r5
   337fe:	f014 feed 	bl	485dc <strstr>
		if (!p) {
   33802:	b950      	cbnz	r0, 3381a <http_parse+0xb2>
			LOG_ERR("Server response is not 200 Success");
   33804:	2301      	movs	r3, #1
   33806:	4a4c      	ldr	r2, [pc, #304]	; (33938 <http_parse+0x1d0>)
   33808:	f363 0007 	bfi	r0, r3, #0, #8
   3380c:	4b4b      	ldr	r3, [pc, #300]	; (3393c <http_parse+0x1d4>)
   3380e:	494e      	ldr	r1, [pc, #312]	; (33948 <http_parse+0x1e0>)
   33810:	1a9b      	subs	r3, r3, r2
   33812:	08db      	lsrs	r3, r3, #3
   33814:	f363 108f 	bfi	r0, r3, #6, #10
   33818:	e7de      	b.n	337d8 <http_parse+0x70>
	if (client->file_size == 0) {
   3381a:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   3381e:	2b00      	cmp	r3, #0
   33820:	d144      	bne.n	338ac <http_parse+0x144>
		if (client->proto == IPPROTO_TLS_1_2) {
   33822:	f8d4 3824 	ldr.w	r3, [r4, #2084]	; 0x824
   33826:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3382a:	d11e      	bne.n	3386a <http_parse+0x102>
			p = strstr(client->buf, "content-range");
   3382c:	4947      	ldr	r1, [pc, #284]	; (3394c <http_parse+0x1e4>)
   3382e:	4628      	mov	r0, r5
   33830:	f014 fed4 	bl	485dc <strstr>
			if (!p) {
   33834:	b950      	cbnz	r0, 3384c <http_parse+0xe4>
				LOG_ERR("Server did not send "
   33836:	2301      	movs	r3, #1
   33838:	4a3f      	ldr	r2, [pc, #252]	; (33938 <http_parse+0x1d0>)
   3383a:	f363 0007 	bfi	r0, r3, #0, #8
   3383e:	4b3f      	ldr	r3, [pc, #252]	; (3393c <http_parse+0x1d4>)
   33840:	4943      	ldr	r1, [pc, #268]	; (33950 <http_parse+0x1e8>)
   33842:	1a9b      	subs	r3, r3, r2
   33844:	08db      	lsrs	r3, r3, #3
   33846:	f363 108f 	bfi	r0, r3, #6, #10
   3384a:	e7c5      	b.n	337d8 <http_parse+0x70>
			p = strstr(p, "/");
   3384c:	4941      	ldr	r1, [pc, #260]	; (33954 <http_parse+0x1ec>)
   3384e:	f014 fec5 	bl	485dc <strstr>
			if (!p) {
   33852:	bb18      	cbnz	r0, 3389c <http_parse+0x134>
				LOG_ERR("No file size in response");
   33854:	2301      	movs	r3, #1
   33856:	4a38      	ldr	r2, [pc, #224]	; (33938 <http_parse+0x1d0>)
   33858:	f363 0007 	bfi	r0, r3, #0, #8
   3385c:	4b37      	ldr	r3, [pc, #220]	; (3393c <http_parse+0x1d4>)
   3385e:	493e      	ldr	r1, [pc, #248]	; (33958 <http_parse+0x1f0>)
   33860:	1a9b      	subs	r3, r3, r2
   33862:	08db      	lsrs	r3, r3, #3
   33864:	f363 108f 	bfi	r0, r3, #6, #10
   33868:	e7b6      	b.n	337d8 <http_parse+0x70>
			p = strstr(client->buf, "content-length");
   3386a:	493c      	ldr	r1, [pc, #240]	; (3395c <http_parse+0x1f4>)
   3386c:	4628      	mov	r0, r5
   3386e:	f014 feb5 	bl	485dc <strstr>
			if (!p) {
   33872:	b950      	cbnz	r0, 3388a <http_parse+0x122>
				LOG_WRN("Server did not send "
   33874:	2302      	movs	r3, #2
   33876:	4a30      	ldr	r2, [pc, #192]	; (33938 <http_parse+0x1d0>)
   33878:	f363 0007 	bfi	r0, r3, #0, #8
   3387c:	4b2f      	ldr	r3, [pc, #188]	; (3393c <http_parse+0x1d4>)
   3387e:	4938      	ldr	r1, [pc, #224]	; (33960 <http_parse+0x1f8>)
   33880:	1a9b      	subs	r3, r3, r2
   33882:	08db      	lsrs	r3, r3, #3
   33884:	f363 108f 	bfi	r0, r3, #6, #10
   33888:	e7a6      	b.n	337d8 <http_parse+0x70>
			p = strstr(p, ":");
   3388a:	4936      	ldr	r1, [pc, #216]	; (33964 <http_parse+0x1fc>)
   3388c:	f014 fea6 	bl	485dc <strstr>
			if (!p) {
   33890:	2800      	cmp	r0, #0
   33892:	d0df      	beq.n	33854 <http_parse+0xec>
			client->file_size = client->progress;
   33894:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   33898:	f8c4 3808 	str.w	r3, [r4, #2056]	; 0x808
		client->file_size += atoi(p + 1);
   3389c:	3001      	adds	r0, #1
   3389e:	f014 fc53 	bl	48148 <atoi>
   338a2:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   338a6:	4418      	add	r0, r3
   338a8:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   338ac:	492e      	ldr	r1, [pc, #184]	; (33968 <http_parse+0x200>)
   338ae:	4628      	mov	r0, r5
   338b0:	f014 fe94 	bl	485dc <strstr>
	if (p) {
   338b4:	b180      	cbz	r0, 338d8 <http_parse+0x170>
		LOG_WRN("Peer closed connection, will re-connect");
   338b6:	2302      	movs	r3, #2
   338b8:	f04f 0000 	mov.w	r0, #0
   338bc:	4a1e      	ldr	r2, [pc, #120]	; (33938 <http_parse+0x1d0>)
   338be:	f363 0007 	bfi	r0, r3, #0, #8
   338c2:	4b1e      	ldr	r3, [pc, #120]	; (3393c <http_parse+0x1d4>)
   338c4:	4929      	ldr	r1, [pc, #164]	; (3396c <http_parse+0x204>)
   338c6:	1a9b      	subs	r3, r3, r2
   338c8:	08db      	lsrs	r3, r3, #3
   338ca:	f363 108f 	bfi	r0, r3, #6, #10
   338ce:	f010 ff2a 	bl	44726 <log_string_sync>
		client->http.connection_close = true;
   338d2:	2301      	movs	r3, #1
   338d4:	f884 3829 	strb.w	r3, [r4, #2089]	; 0x829
	client->http.has_header = true;
   338d8:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   338da:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   338de:	f884 3828 	strb.w	r3, [r4, #2088]	; 0x828
		if (client->offset != hdr_len) {
   338e2:	4542      	cmp	r2, r8
   338e4:	d01e      	beq.n	33924 <http_parse+0x1bc>
   338e6:	eba2 0208 	sub.w	r2, r2, r8
   338ea:	4631      	mov	r1, r6
   338ec:	4628      	mov	r0, r5
   338ee:	f014 fc4b 	bl	48188 <memcpy>
			client->offset -= hdr_len;
   338f2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   338f6:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   338fa:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   338fe:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   33902:	f8d4 080c 	ldr.w	r0, [r4, #2060]	; 0x80c
   33906:	429f      	cmp	r7, r3
   33908:	bf94      	ite	ls
   3390a:	19c7      	addls	r7, r0, r7
   3390c:	18c7      	addhi	r7, r0, r3
	if ((client->offset < CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE) &&
   3390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
	client->progress += MIN(client->offset, len);
   33912:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if ((client->offset < CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE) &&
   33916:	d209      	bcs.n	3392c <http_parse+0x1c4>
   33918:	f8d4 0808 	ldr.w	r0, [r4, #2056]	; 0x808
   3391c:	1bc0      	subs	r0, r0, r7
   3391e:	bf18      	it	ne
   33920:	2001      	movne	r0, #1
   33922:	e75d      	b.n	337e0 <http_parse+0x78>
			client->offset = 0;
   33924:	2300      	movs	r3, #0
   33926:	e7e8      	b.n	338fa <http_parse+0x192>
			return 1;
   33928:	2001      	movs	r0, #1
   3392a:	e759      	b.n	337e0 <http_parse+0x78>
	return 0;
   3392c:	2000      	movs	r0, #0
   3392e:	e757      	b.n	337e0 <http_parse+0x78>
   33930:	0005121b 	.word	0x0005121b
   33934:	00051246 	.word	0x00051246
   33938:	00049788 	.word	0x00049788
   3393c:	00049810 	.word	0x00049810
   33940:	00051253 	.word	0x00051253
   33944:	00051280 	.word	0x00051280
   33948:	0005128d 	.word	0x0005128d
   3394c:	000512b0 	.word	0x000512b0
   33950:	000512be 	.word	0x000512be
   33954:	00051120 	.word	0x00051120
   33958:	000512ee 	.word	0x000512ee
   3395c:	00051307 	.word	0x00051307
   33960:	00051316 	.word	0x00051316
   33964:	0004e032 	.word	0x0004e032
   33968:	00051347 	.word	0x00051347
   3396c:	00051359 	.word	0x00051359
   33970:	00052acf 	.word	0x00052acf

00033974 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   33974:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   33976:	a801      	add	r0, sp, #4
   33978:	f000 fa7a 	bl	33e70 <dfu_target_offset_get>
	if (err != 0) {
   3397c:	4c21      	ldr	r4, [pc, #132]	; (33a04 <download_with_offset+0x90>)
   3397e:	4b22      	ldr	r3, [pc, #136]	; (33a08 <download_with_offset+0x94>)
   33980:	1ae4      	subs	r4, r4, r3
   33982:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   33986:	4603      	mov	r3, r0
   33988:	b160      	cbz	r0, 339a4 <download_with_offset+0x30>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   3398a:	2201      	movs	r2, #1
   3398c:	f04f 0000 	mov.w	r0, #0
   33990:	491e      	ldr	r1, [pc, #120]	; (33a0c <download_with_offset+0x98>)
   33992:	f362 0007 	bfi	r0, r2, #0, #8
   33996:	4a1e      	ldr	r2, [pc, #120]	; (33a10 <download_with_offset+0x9c>)
   33998:	f364 108f 	bfi	r0, r4, #6, #10
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   3399c:	f010 fec3 	bl	44726 <log_string_sync>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   339a0:	b003      	add	sp, #12
   339a2:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   339a4:	4d1b      	ldr	r5, [pc, #108]	; (33a14 <download_with_offset+0xa0>)
   339a6:	f605 0218 	addw	r2, r5, #2072	; 0x818
   339aa:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   339ae:	4628      	mov	r0, r5
   339b0:	f7ff f93e 	bl	32c30 <download_client_connect>
	if (err != 0) {
   339b4:	4603      	mov	r3, r0
   339b6:	b148      	cbz	r0, 339cc <download_with_offset+0x58>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   339b8:	2201      	movs	r2, #1
   339ba:	f04f 0000 	mov.w	r0, #0
   339be:	f362 0007 	bfi	r0, r2, #0, #8
   339c2:	f364 108f 	bfi	r0, r4, #6, #10
   339c6:	4a12      	ldr	r2, [pc, #72]	; (33a10 <download_with_offset+0x9c>)
   339c8:	4913      	ldr	r1, [pc, #76]	; (33a18 <download_with_offset+0xa4>)
   339ca:	e7e7      	b.n	3399c <download_with_offset+0x28>
	err = download_client_start(&dlc, dlc.file, offset);
   339cc:	9a01      	ldr	r2, [sp, #4]
   339ce:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   339d2:	4628      	mov	r0, r5
   339d4:	f7ff fd3c 	bl	33450 <download_client_start>
	if (err != 0) {
   339d8:	4603      	mov	r3, r0
		LOG_ERR("%s failed to start download  with error %d", __func__,
   339da:	f04f 0000 	mov.w	r0, #0
	if (err != 0) {
   339de:	b13b      	cbz	r3, 339f0 <download_with_offset+0x7c>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   339e0:	2201      	movs	r2, #1
   339e2:	f362 0007 	bfi	r0, r2, #0, #8
   339e6:	f364 108f 	bfi	r0, r4, #6, #10
   339ea:	4a09      	ldr	r2, [pc, #36]	; (33a10 <download_with_offset+0x9c>)
   339ec:	490b      	ldr	r1, [pc, #44]	; (33a1c <download_with_offset+0xa8>)
   339ee:	e7d5      	b.n	3399c <download_with_offset+0x28>
	LOG_INF("Downloading from offset: 0x%x", offset);
   339f0:	2303      	movs	r3, #3
   339f2:	f363 0007 	bfi	r0, r3, #0, #8
   339f6:	f364 108f 	bfi	r0, r4, #6, #10
   339fa:	9a01      	ldr	r2, [sp, #4]
   339fc:	4908      	ldr	r1, [pc, #32]	; (33a20 <download_with_offset+0xac>)
   339fe:	f010 fe92 	bl	44726 <log_string_sync>
   33a02:	e7cd      	b.n	339a0 <download_with_offset+0x2c>
   33a04:	00049820 	.word	0x00049820
   33a08:	00049788 	.word	0x00049788
   33a0c:	000514bb 	.word	0x000514bb
   33a10:	00051381 	.word	0x00051381
   33a14:	200220e0 	.word	0x200220e0
   33a18:	000514e1 	.word	0x000514e1
   33a1c:	00051504 	.word	0x00051504
   33a20:	0005152f 	.word	0x0005152f

00033a24 <send_error_evt>:
	const struct fota_download_evt evt = {
   33a24:	2300      	movs	r3, #0
{
   33a26:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   33a28:	e9cd 3300 	strd	r3, r3, [sp]
   33a2c:	2304      	movs	r3, #4
   33a2e:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   33a32:	4b04      	ldr	r3, [pc, #16]	; (33a44 <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   33a34:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   33a38:	681b      	ldr	r3, [r3, #0]
   33a3a:	4668      	mov	r0, sp
   33a3c:	4798      	blx	r3
}
   33a3e:	b003      	add	sp, #12
   33a40:	f85d fb04 	ldr.w	pc, [sp], #4
   33a44:	200258e0 	.word	0x200258e0

00033a48 <download_client_callback>:
{
   33a48:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   33a4a:	4605      	mov	r5, r0
{
   33a4c:	b085      	sub	sp, #20
	if (event == NULL) {
   33a4e:	2800      	cmp	r0, #0
   33a50:	f000 8122 	beq.w	33c98 <download_client_callback+0x250>
	switch (event->id) {
   33a54:	7803      	ldrb	r3, [r0, #0]
   33a56:	2b01      	cmp	r3, #1
   33a58:	f000 80db 	beq.w	33c12 <download_client_callback+0x1ca>
   33a5c:	b123      	cbz	r3, 33a68 <download_client_callback+0x20>
   33a5e:	2b02      	cmp	r3, #2
   33a60:	f000 80af 	beq.w	33bc2 <download_client_callback+0x17a>
	return 0;
   33a64:	2400      	movs	r4, #0
			socket_retries_left--;
   33a66:	e03c      	b.n	33ae2 <download_client_callback+0x9a>
		if (first_fragment) {
   33a68:	4e8d      	ldr	r6, [pc, #564]	; (33ca0 <download_client_callback+0x258>)
   33a6a:	7833      	ldrb	r3, [r6, #0]
   33a6c:	2b00      	cmp	r3, #0
   33a6e:	d05f      	beq.n	33b30 <download_client_callback+0xe8>
			err = download_client_file_size_get(&dlc, &file_size);
   33a70:	4f8c      	ldr	r7, [pc, #560]	; (33ca4 <download_client_callback+0x25c>)
   33a72:	488d      	ldr	r0, [pc, #564]	; (33ca8 <download_client_callback+0x260>)
   33a74:	4639      	mov	r1, r7
   33a76:	f014 f91d 	bl	47cb4 <download_client_file_size_get>
			if (err != 0) {
   33a7a:	4604      	mov	r4, r0
   33a7c:	b108      	cbz	r0, 33a82 <download_client_callback+0x3a>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33a7e:	2001      	movs	r0, #1
   33a80:	e080      	b.n	33b84 <download_client_callback+0x13c>
			first_fragment = false;
   33a82:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   33a84:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   33a88:	f000 f994 	bl	33db4 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   33a8c:	4a87      	ldr	r2, [pc, #540]	; (33cac <download_client_callback+0x264>)
   33a8e:	6839      	ldr	r1, [r7, #0]
   33a90:	f000 f9b8 	bl	33e04 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   33a94:	1e04      	subs	r4, r0, #0
   33a96:	da27      	bge.n	33ae8 <download_client_callback+0xa0>
   33a98:	f114 0f10 	cmn.w	r4, #16
   33a9c:	d024      	beq.n	33ae8 <download_client_callback+0xa0>
				LOG_ERR("dfu_target_init error %d", err);
   33a9e:	2301      	movs	r3, #1
   33aa0:	f04f 0000 	mov.w	r0, #0
   33aa4:	4d82      	ldr	r5, [pc, #520]	; (33cb0 <download_client_callback+0x268>)
   33aa6:	f363 0007 	bfi	r0, r3, #0, #8
   33aaa:	4b82      	ldr	r3, [pc, #520]	; (33cb4 <download_client_callback+0x26c>)
   33aac:	4622      	mov	r2, r4
   33aae:	1aed      	subs	r5, r5, r3
   33ab0:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   33ab4:	f365 108f 	bfi	r0, r5, #6, #10
   33ab8:	497f      	ldr	r1, [pc, #508]	; (33cb8 <download_client_callback+0x270>)
   33aba:	f010 fe34 	bl	44726 <log_string_sync>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33abe:	2001      	movs	r0, #1
   33ac0:	f7ff ffb0 	bl	33a24 <send_error_evt>
				int res = dfu_target_reset();
   33ac4:	f000 fa12 	bl	33eec <dfu_target_reset>
				if (res != 0) {
   33ac8:	b148      	cbz	r0, 33ade <download_client_callback+0x96>
					LOG_ERR("Unable to reset DFU target");
   33aca:	f04f 0000 	mov.w	r0, #0
   33ace:	2301      	movs	r3, #1
   33ad0:	f363 0007 	bfi	r0, r3, #0, #8
   33ad4:	f365 108f 	bfi	r0, r5, #6, #10
   33ad8:	4978      	ldr	r1, [pc, #480]	; (33cbc <download_client_callback+0x274>)
   33ada:	f010 fe24 	bl	44726 <log_string_sync>
				first_fragment = true;
   33ade:	2301      	movs	r3, #1
   33ae0:	7033      	strb	r3, [r6, #0]
}
   33ae2:	4620      	mov	r0, r4
   33ae4:	b005      	add	sp, #20
   33ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   33ae8:	a801      	add	r0, sp, #4
   33aea:	f000 f9c1 	bl	33e70 <dfu_target_offset_get>
			if (err != 0) {
   33aee:	b110      	cbz	r0, 33af6 <download_client_callback+0xae>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33af0:	2001      	movs	r0, #1
   33af2:	f7ff ff97 	bl	33a24 <send_error_evt>
			if (offset != 0) {
   33af6:	9b01      	ldr	r3, [sp, #4]
   33af8:	b1d3      	cbz	r3, 33b30 <download_client_callback+0xe8>
				(void)download_client_disconnect(&dlc);
   33afa:	486b      	ldr	r0, [pc, #428]	; (33ca8 <download_client_callback+0x260>)
   33afc:	f7ff faf4 	bl	330e8 <download_client_disconnect>
   33b00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   33b04:	2300      	movs	r3, #0
   33b06:	496e      	ldr	r1, [pc, #440]	; (33cc0 <download_client_callback+0x278>)
   33b08:	486e      	ldr	r0, [pc, #440]	; (33cc4 <download_client_callback+0x27c>)
   33b0a:	f00d f943 	bl	40d94 <k_delayed_work_submit_to_queue>
				LOG_INF("Refuse fragment, restart with offset");
   33b0e:	2303      	movs	r3, #3
   33b10:	f04f 0000 	mov.w	r0, #0
   33b14:	4a67      	ldr	r2, [pc, #412]	; (33cb4 <download_client_callback+0x26c>)
   33b16:	f363 0007 	bfi	r0, r3, #0, #8
   33b1a:	4b65      	ldr	r3, [pc, #404]	; (33cb0 <download_client_callback+0x268>)
   33b1c:	496a      	ldr	r1, [pc, #424]	; (33cc8 <download_client_callback+0x280>)
   33b1e:	1a9b      	subs	r3, r3, r2
   33b20:	08db      	lsrs	r3, r3, #3
   33b22:	f363 108f 	bfi	r0, r3, #6, #10
   33b26:	f010 fdfe 	bl	44726 <log_string_sync>
				return -1;
   33b2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   33b2e:	e7d8      	b.n	33ae2 <download_client_callback+0x9a>
		err = dfu_target_write(event->fragment.buf,
   33b30:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   33b34:	f000 f9a6 	bl	33e84 <dfu_target_write>
		if (err != 0) {
   33b38:	4604      	mov	r4, r0
   33b3a:	b330      	cbz	r0, 33b8a <download_client_callback+0x142>
			LOG_ERR("dfu_target_write error %d", err);
   33b3c:	2301      	movs	r3, #1
   33b3e:	f04f 0000 	mov.w	r0, #0
   33b42:	4d5b      	ldr	r5, [pc, #364]	; (33cb0 <download_client_callback+0x268>)
   33b44:	f363 0007 	bfi	r0, r3, #0, #8
   33b48:	4b5a      	ldr	r3, [pc, #360]	; (33cb4 <download_client_callback+0x26c>)
   33b4a:	4622      	mov	r2, r4
   33b4c:	1aed      	subs	r5, r5, r3
   33b4e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   33b52:	f365 108f 	bfi	r0, r5, #6, #10
   33b56:	495d      	ldr	r1, [pc, #372]	; (33ccc <download_client_callback+0x284>)
   33b58:	f010 fde5 	bl	44726 <log_string_sync>
			int res = dfu_target_done(false);
   33b5c:	2000      	movs	r0, #0
   33b5e:	f000 f99d 	bl	33e9c <dfu_target_done>
			if (res != 0) {
   33b62:	b148      	cbz	r0, 33b78 <download_client_callback+0x130>
				LOG_ERR("Unable to free DFU target resources");
   33b64:	f04f 0000 	mov.w	r0, #0
   33b68:	2301      	movs	r3, #1
   33b6a:	f363 0007 	bfi	r0, r3, #0, #8
   33b6e:	f365 108f 	bfi	r0, r5, #6, #10
   33b72:	4957      	ldr	r1, [pc, #348]	; (33cd0 <download_client_callback+0x288>)
   33b74:	f010 fdd7 	bl	44726 <log_string_sync>
			first_fragment = true;
   33b78:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   33b7a:	484b      	ldr	r0, [pc, #300]	; (33ca8 <download_client_callback+0x260>)
			first_fragment = true;
   33b7c:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   33b7e:	f7ff fab3 	bl	330e8 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   33b82:	2002      	movs	r0, #2
   33b84:	f7ff ff4e 	bl	33a24 <send_error_evt>
			return err;
   33b88:	e7ab      	b.n	33ae2 <download_client_callback+0x9a>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   33b8a:	7833      	ldrb	r3, [r6, #0]
   33b8c:	2b00      	cmp	r3, #0
   33b8e:	d1a8      	bne.n	33ae2 <download_client_callback+0x9a>
			err = dfu_target_offset_get(&offset);
   33b90:	a801      	add	r0, sp, #4
   33b92:	f000 f96d 	bl	33e70 <dfu_target_offset_get>
			if (err != 0) {
   33b96:	4604      	mov	r4, r0
   33b98:	2800      	cmp	r0, #0
   33b9a:	f47f af70 	bne.w	33a7e <download_client_callback+0x36>
			if (file_size == 0) {
   33b9e:	4b41      	ldr	r3, [pc, #260]	; (33ca4 <download_client_callback+0x25c>)
   33ba0:	681a      	ldr	r2, [r3, #0]
   33ba2:	2a00      	cmp	r2, #0
   33ba4:	f43f af6b 	beq.w	33a7e <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   33ba8:	2364      	movs	r3, #100	; 0x64
   33baa:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   33bac:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   33bb0:	434b      	muls	r3, r1
   33bb2:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   33bb6:	9303      	str	r3, [sp, #12]
	callback(&evt);
   33bb8:	4b46      	ldr	r3, [pc, #280]	; (33cd4 <download_client_callback+0x28c>)
   33bba:	a802      	add	r0, sp, #8
   33bbc:	681b      	ldr	r3, [r3, #0]
   33bbe:	4798      	blx	r3
   33bc0:	e78f      	b.n	33ae2 <download_client_callback+0x9a>
		err = dfu_target_done(true);
   33bc2:	2001      	movs	r0, #1
   33bc4:	f000 f96a 	bl	33e9c <dfu_target_done>
		if (err != 0) {
   33bc8:	4604      	mov	r4, r0
   33bca:	b178      	cbz	r0, 33bec <download_client_callback+0x1a4>
			LOG_ERR("dfu_target_done error: %d", err);
   33bcc:	2301      	movs	r3, #1
   33bce:	f04f 0000 	mov.w	r0, #0
   33bd2:	4a38      	ldr	r2, [pc, #224]	; (33cb4 <download_client_callback+0x26c>)
   33bd4:	f363 0007 	bfi	r0, r3, #0, #8
   33bd8:	4b35      	ldr	r3, [pc, #212]	; (33cb0 <download_client_callback+0x268>)
   33bda:	493f      	ldr	r1, [pc, #252]	; (33cd8 <download_client_callback+0x290>)
   33bdc:	1a9b      	subs	r3, r3, r2
   33bde:	08db      	lsrs	r3, r3, #3
   33be0:	f363 108f 	bfi	r0, r3, #6, #10
   33be4:	4622      	mov	r2, r4
   33be6:	f010 fd9e 	bl	44726 <log_string_sync>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33bea:	e748      	b.n	33a7e <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   33bec:	482e      	ldr	r0, [pc, #184]	; (33ca8 <download_client_callback+0x260>)
   33bee:	f7ff fa7b 	bl	330e8 <download_client_disconnect>
		if (err != 0) {
   33bf2:	4604      	mov	r4, r0
   33bf4:	2800      	cmp	r0, #0
   33bf6:	f47f af42 	bne.w	33a7e <download_client_callback+0x36>
	const struct fota_download_evt evt = {
   33bfa:	2501      	movs	r5, #1
	callback(&evt);
   33bfc:	4b35      	ldr	r3, [pc, #212]	; (33cd4 <download_client_callback+0x28c>)
	const struct fota_download_evt evt = {
   33bfe:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   33c02:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   33c04:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   33c08:	a802      	add	r0, sp, #8
   33c0a:	4798      	blx	r3
		first_fragment = true;
   33c0c:	4b24      	ldr	r3, [pc, #144]	; (33ca0 <download_client_callback+0x258>)
   33c0e:	701d      	strb	r5, [r3, #0]
		break;
   33c10:	e767      	b.n	33ae2 <download_client_callback+0x9a>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   33c12:	4e32      	ldr	r6, [pc, #200]	; (33cdc <download_client_callback+0x294>)
   33c14:	4c26      	ldr	r4, [pc, #152]	; (33cb0 <download_client_callback+0x268>)
   33c16:	6832      	ldr	r2, [r6, #0]
   33c18:	4f26      	ldr	r7, [pc, #152]	; (33cb4 <download_client_callback+0x26c>)
   33c1a:	b1aa      	cbz	r2, 33c48 <download_client_callback+0x200>
   33c1c:	6843      	ldr	r3, [r0, #4]
   33c1e:	f113 0f80 	cmn.w	r3, #128	; 0x80
   33c22:	d001      	beq.n	33c28 <download_client_callback+0x1e0>
   33c24:	3368      	adds	r3, #104	; 0x68
   33c26:	d10f      	bne.n	33c48 <download_client_callback+0x200>
			LOG_WRN("Download socket error. %d retries left...",
   33c28:	2302      	movs	r3, #2
   33c2a:	f04f 0000 	mov.w	r0, #0
   33c2e:	1be4      	subs	r4, r4, r7
   33c30:	f363 0007 	bfi	r0, r3, #0, #8
   33c34:	08e4      	lsrs	r4, r4, #3
   33c36:	f364 108f 	bfi	r0, r4, #6, #10
   33c3a:	4929      	ldr	r1, [pc, #164]	; (33ce0 <download_client_callback+0x298>)
   33c3c:	f010 fd73 	bl	44726 <log_string_sync>
			socket_retries_left--;
   33c40:	6833      	ldr	r3, [r6, #0]
   33c42:	3b01      	subs	r3, #1
   33c44:	6033      	str	r3, [r6, #0]
   33c46:	e70d      	b.n	33a64 <download_client_callback+0x1c>
			download_client_disconnect(&dlc);
   33c48:	4817      	ldr	r0, [pc, #92]	; (33ca8 <download_client_callback+0x260>)
   33c4a:	f7ff fa4d 	bl	330e8 <download_client_disconnect>
			LOG_ERR("Download client error");
   33c4e:	2301      	movs	r3, #1
   33c50:	f04f 0000 	mov.w	r0, #0
   33c54:	1be4      	subs	r4, r4, r7
   33c56:	f363 0007 	bfi	r0, r3, #0, #8
   33c5a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   33c5e:	f364 108f 	bfi	r0, r4, #6, #10
   33c62:	4920      	ldr	r1, [pc, #128]	; (33ce4 <download_client_callback+0x29c>)
   33c64:	f010 fd5f 	bl	44726 <log_string_sync>
			err = dfu_target_done(false);
   33c68:	2000      	movs	r0, #0
   33c6a:	f000 f917 	bl	33e9c <dfu_target_done>
			if (err == -EACCES) {
   33c6e:	f110 0f0d 	cmn.w	r0, #13
   33c72:	d00a      	beq.n	33c8a <download_client_callback+0x242>
			} else if (err != 0) {
   33c74:	b148      	cbz	r0, 33c8a <download_client_callback+0x242>
				LOG_ERR("Unable to deinitialze resources "
   33c76:	f04f 0000 	mov.w	r0, #0
   33c7a:	2301      	movs	r3, #1
   33c7c:	f363 0007 	bfi	r0, r3, #0, #8
   33c80:	f364 108f 	bfi	r0, r4, #6, #10
   33c84:	4918      	ldr	r1, [pc, #96]	; (33ce8 <download_client_callback+0x2a0>)
   33c86:	f010 fd4e 	bl	44726 <log_string_sync>
			first_fragment = true;
   33c8a:	2001      	movs	r0, #1
   33c8c:	4b04      	ldr	r3, [pc, #16]	; (33ca0 <download_client_callback+0x258>)
   33c8e:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33c90:	f7ff fec8 	bl	33a24 <send_error_evt>
			return event->error;
   33c94:	686c      	ldr	r4, [r5, #4]
   33c96:	e724      	b.n	33ae2 <download_client_callback+0x9a>
		return -EINVAL;
   33c98:	f06f 0415 	mvn.w	r4, #21
   33c9c:	e721      	b.n	33ae2 <download_client_callback+0x9a>
   33c9e:	bf00      	nop
   33ca0:	20020af1 	.word	0x20020af1
   33ca4:	200258e4 	.word	0x200258e4
   33ca8:	200220e0 	.word	0x200220e0
   33cac:	00033ced 	.word	0x00033ced
   33cb0:	00049820 	.word	0x00049820
   33cb4:	00049788 	.word	0x00049788
   33cb8:	00051396 	.word	0x00051396
   33cbc:	000513af 	.word	0x000513af
   33cc0:	200239f0 	.word	0x200239f0
   33cc4:	20024888 	.word	0x20024888
   33cc8:	000513ca 	.word	0x000513ca
   33ccc:	000513ef 	.word	0x000513ef
   33cd0:	00051409 	.word	0x00051409
   33cd4:	200258e0 	.word	0x200258e0
   33cd8:	0005142d 	.word	0x0005142d
   33cdc:	200258e8 	.word	0x200258e8
   33ce0:	00051447 	.word	0x00051447
   33ce4:	00051471 	.word	0x00051471
   33ce8:	00051487 	.word	0x00051487

00033cec <dfu_target_callback_handler>:
{
   33cec:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   33cee:	b128      	cbz	r0, 33cfc <dfu_target_callback_handler+0x10>
   33cf0:	2801      	cmp	r0, #1
   33cf2:	d00f      	beq.n	33d14 <dfu_target_callback_handler+0x28>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   33cf4:	2001      	movs	r0, #1
   33cf6:	f7ff fe95 	bl	33a24 <send_error_evt>
}
   33cfa:	e008      	b.n	33d0e <dfu_target_callback_handler+0x22>
	const struct fota_download_evt evt = {
   33cfc:	2302      	movs	r3, #2
   33cfe:	e9cd 0000 	strd	r0, r0, [sp]
   33d02:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   33d06:	4b06      	ldr	r3, [pc, #24]	; (33d20 <dfu_target_callback_handler+0x34>)
   33d08:	4668      	mov	r0, sp
   33d0a:	681b      	ldr	r3, [r3, #0]
   33d0c:	4798      	blx	r3
}
   33d0e:	b003      	add	sp, #12
   33d10:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   33d14:	2300      	movs	r3, #0
   33d16:	e9cd 3300 	strd	r3, r3, [sp]
   33d1a:	2303      	movs	r3, #3
   33d1c:	e7f1      	b.n	33d02 <dfu_target_callback_handler+0x16>
   33d1e:	bf00      	nop
   33d20:	200258e0 	.word	0x200258e0

00033d24 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   33d24:	b530      	push	{r4, r5, lr}
   33d26:	b085      	sub	sp, #20
	int err = -1;

	struct download_client_cfg config = {
   33d28:	e9cd 2301 	strd	r2, r3, [sp, #4]
   33d2c:	9b08      	ldr	r3, [sp, #32]
{
   33d2e:	460d      	mov	r5, r1
	struct download_client_cfg config = {
   33d30:	9303      	str	r3, [sp, #12]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
	};

	if (host == NULL || file == NULL || callback == NULL) {
   33d32:	4601      	mov	r1, r0
   33d34:	b1c8      	cbz	r0, 33d6a <fota_download_start+0x46>
   33d36:	b1c5      	cbz	r5, 33d6a <fota_download_start+0x46>
   33d38:	4b0d      	ldr	r3, [pc, #52]	; (33d70 <fota_download_start+0x4c>)
   33d3a:	681b      	ldr	r3, [r3, #0]
   33d3c:	b1ab      	cbz	r3, 33d6a <fota_download_start+0x46>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   33d3e:	2202      	movs	r2, #2
   33d40:	4b0c      	ldr	r3, [pc, #48]	; (33d74 <fota_download_start+0x50>)
		LOG_INF("B1 update, selected file:\n%s", update);
		file = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   33d42:	480d      	ldr	r0, [pc, #52]	; (33d78 <fota_download_start+0x54>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   33d44:	601a      	str	r2, [r3, #0]
	err = download_client_connect(&dlc, host, &config);
   33d46:	aa01      	add	r2, sp, #4
   33d48:	f7fe ff72 	bl	32c30 <download_client_connect>
	if (err != 0) {
   33d4c:	4604      	mov	r4, r0
   33d4e:	b948      	cbnz	r0, 33d64 <fota_download_start+0x40>
		return err;
	}

	err = download_client_start(&dlc, file, 0);
   33d50:	4602      	mov	r2, r0
   33d52:	4629      	mov	r1, r5
   33d54:	4808      	ldr	r0, [pc, #32]	; (33d78 <fota_download_start+0x54>)
   33d56:	f7ff fb7b 	bl	33450 <download_client_start>
	if (err != 0) {
   33d5a:	4604      	mov	r4, r0
   33d5c:	b110      	cbz	r0, 33d64 <fota_download_start+0x40>
		download_client_disconnect(&dlc);
   33d5e:	4806      	ldr	r0, [pc, #24]	; (33d78 <fota_download_start+0x54>)
   33d60:	f7ff f9c2 	bl	330e8 <download_client_disconnect>
		return err;
	}

	return 0;
}
   33d64:	4620      	mov	r0, r4
   33d66:	b005      	add	sp, #20
   33d68:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   33d6a:	f06f 0415 	mvn.w	r4, #21
   33d6e:	e7f9      	b.n	33d64 <fota_download_start+0x40>
   33d70:	200258e0 	.word	0x200258e0
   33d74:	200258e8 	.word	0x200258e8
   33d78:	200220e0 	.word	0x200220e0

00033d7c <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   33d7c:	b508      	push	{r3, lr}
	if (client_callback == NULL) {
   33d7e:	b158      	cbz	r0, 33d98 <fota_download_init+0x1c>
		return -EINVAL;
	}

	callback = client_callback;
   33d80:	4b07      	ldr	r3, [pc, #28]	; (33da0 <fota_download_init+0x24>)

	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   33d82:	4908      	ldr	r1, [pc, #32]	; (33da4 <fota_download_init+0x28>)
	callback = client_callback;
   33d84:	6018      	str	r0, [r3, #0]
	k_delayed_work_init(&dlc_with_offset_work, download_with_offset);
   33d86:	4808      	ldr	r0, [pc, #32]	; (33da8 <fota_download_init+0x2c>)
   33d88:	f014 f91d 	bl	47fc6 <k_delayed_work_init>
	if (err != 0) {
		return err;
	}

	return 0;
}
   33d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	int err = download_client_init(&dlc, download_client_callback);
   33d90:	4906      	ldr	r1, [pc, #24]	; (33dac <fota_download_init+0x30>)
   33d92:	4807      	ldr	r0, [pc, #28]	; (33db0 <fota_download_init+0x34>)
   33d94:	f7fe bf22 	b.w	32bdc <download_client_init>
}
   33d98:	f06f 0015 	mvn.w	r0, #21
   33d9c:	bd08      	pop	{r3, pc}
   33d9e:	bf00      	nop
   33da0:	200258e0 	.word	0x200258e0
   33da4:	00033975 	.word	0x00033975
   33da8:	200239f0 	.word	0x200239f0
   33dac:	00033a49 	.word	0x00033a49
   33db0:	200220e0 	.word	0x200220e0

00033db4 <dfu_target_img_type>:
LOG_MODULE_REGISTER(dfu_target, CONFIG_DFU_TARGET_LOG_LEVEL);

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
   33db4:	b538      	push	{r3, r4, r5, lr}
   33db6:	4605      	mov	r5, r0
   33db8:	460c      	mov	r4, r1
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   33dba:	f000 fb6f 	bl	3449c <dfu_target_mcuboot_identify>
   33dbe:	b9a0      	cbnz	r0, 33dea <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (dfu_target_modem_identify(buf)) {
   33dc0:	4628      	mov	r0, r5
   33dc2:	f000 f96f 	bl	340a4 <dfu_target_modem_identify>
   33dc6:	b990      	cbnz	r0, 33dee <dfu_target_img_type+0x3a>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
	}
#endif
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   33dc8:	2c1f      	cmp	r4, #31
   33dca:	d912      	bls.n	33df2 <dfu_target_img_type+0x3e>
		return -EAGAIN;
	}

	LOG_ERR("No supported image type found");
   33dcc:	2301      	movs	r3, #1
   33dce:	4a0a      	ldr	r2, [pc, #40]	; (33df8 <dfu_target_img_type+0x44>)
   33dd0:	f363 0007 	bfi	r0, r3, #0, #8
   33dd4:	4b09      	ldr	r3, [pc, #36]	; (33dfc <dfu_target_img_type+0x48>)
   33dd6:	490a      	ldr	r1, [pc, #40]	; (33e00 <dfu_target_img_type+0x4c>)
   33dd8:	1a9b      	subs	r3, r3, r2
   33dda:	08db      	lsrs	r3, r3, #3
   33ddc:	f363 108f 	bfi	r0, r3, #6, #10
   33de0:	f010 fca1 	bl	44726 <log_string_sync>
	return -ENOTSUP;
   33de4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   33de8:	bd38      	pop	{r3, r4, r5, pc}
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   33dea:	2001      	movs	r0, #1
   33dec:	e7fc      	b.n	33de8 <dfu_target_img_type+0x34>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   33dee:	2002      	movs	r0, #2
   33df0:	e7fa      	b.n	33de8 <dfu_target_img_type+0x34>
		return -EAGAIN;
   33df2:	f06f 000a 	mvn.w	r0, #10
   33df6:	e7f7      	b.n	33de8 <dfu_target_img_type+0x34>
   33df8:	00049788 	.word	0x00049788
   33dfc:	000497f0 	.word	0x000497f0
   33e00:	00051579 	.word	0x00051579

00033e04 <dfu_target_init>:
int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   33e04:	2801      	cmp	r0, #1
{
   33e06:	b570      	push	{r4, r5, r6, lr}
   33e08:	460d      	mov	r5, r1
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   33e0a:	d012      	beq.n	33e32 <dfu_target_init+0x2e>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   33e0c:	2802      	cmp	r0, #2
   33e0e:	d01e      	beq.n	33e4e <dfu_target_init+0x4a>
		new_target = &dfu_target_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   33e10:	2301      	movs	r3, #1
   33e12:	f04f 0000 	mov.w	r0, #0
   33e16:	4a10      	ldr	r2, [pc, #64]	; (33e58 <dfu_target_init+0x54>)
   33e18:	f363 0007 	bfi	r0, r3, #0, #8
   33e1c:	4b0f      	ldr	r3, [pc, #60]	; (33e5c <dfu_target_init+0x58>)
   33e1e:	4910      	ldr	r1, [pc, #64]	; (33e60 <dfu_target_init+0x5c>)
   33e20:	1a9b      	subs	r3, r3, r2
   33e22:	08db      	lsrs	r3, r3, #3
   33e24:	f363 108f 	bfi	r0, r3, #6, #10
   33e28:	f010 fc7d 	bl	44726 <log_string_sync>
		return -ENOTSUP;
   33e2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   33e30:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   33e32:	4b0c      	ldr	r3, [pc, #48]	; (33e64 <dfu_target_init+0x60>)
	if (new_target == current_target
   33e34:	4c0c      	ldr	r4, [pc, #48]	; (33e68 <dfu_target_init+0x64>)
   33e36:	6821      	ldr	r1, [r4, #0]
   33e38:	4299      	cmp	r1, r3
   33e3a:	d101      	bne.n	33e40 <dfu_target_init+0x3c>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   33e3c:	2802      	cmp	r0, #2
   33e3e:	d108      	bne.n	33e52 <dfu_target_init+0x4e>
	current_target = new_target;
   33e40:	6023      	str	r3, [r4, #0]
	return current_target->init(file_size, cb);
   33e42:	4628      	mov	r0, r5
}
   33e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   33e48:	681b      	ldr	r3, [r3, #0]
   33e4a:	4611      	mov	r1, r2
   33e4c:	4718      	bx	r3
		new_target = &dfu_target_modem;
   33e4e:	4b07      	ldr	r3, [pc, #28]	; (33e6c <dfu_target_init+0x68>)
   33e50:	e7f0      	b.n	33e34 <dfu_target_init+0x30>
		return 0;
   33e52:	2000      	movs	r0, #0
   33e54:	e7ec      	b.n	33e30 <dfu_target_init+0x2c>
   33e56:	bf00      	nop
   33e58:	00049788 	.word	0x00049788
   33e5c:	000497f0 	.word	0x000497f0
   33e60:	00051597 	.word	0x00051597
   33e64:	0004a41c 	.word	0x0004a41c
   33e68:	200258ec 	.word	0x200258ec
   33e6c:	0004a42c 	.word	0x0004a42c

00033e70 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   33e70:	4b03      	ldr	r3, [pc, #12]	; (33e80 <dfu_target_offset_get+0x10>)
   33e72:	681b      	ldr	r3, [r3, #0]
   33e74:	b10b      	cbz	r3, 33e7a <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   33e76:	685b      	ldr	r3, [r3, #4]
   33e78:	4718      	bx	r3
}
   33e7a:	f06f 000c 	mvn.w	r0, #12
   33e7e:	4770      	bx	lr
   33e80:	200258ec 	.word	0x200258ec

00033e84 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   33e84:	4b04      	ldr	r3, [pc, #16]	; (33e98 <dfu_target_write+0x14>)
   33e86:	681b      	ldr	r3, [r3, #0]
   33e88:	b113      	cbz	r3, 33e90 <dfu_target_write+0xc>
   33e8a:	b108      	cbz	r0, 33e90 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   33e8c:	689b      	ldr	r3, [r3, #8]
   33e8e:	4718      	bx	r3
}
   33e90:	f06f 000c 	mvn.w	r0, #12
   33e94:	4770      	bx	lr
   33e96:	bf00      	nop
   33e98:	200258ec 	.word	0x200258ec

00033e9c <dfu_target_done>:

int dfu_target_done(bool successful)
{
   33e9c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   33e9e:	4d0f      	ldr	r5, [pc, #60]	; (33edc <dfu_target_done+0x40>)
{
   33ea0:	4606      	mov	r6, r0
	if (current_target == NULL) {
   33ea2:	682b      	ldr	r3, [r5, #0]
   33ea4:	b1bb      	cbz	r3, 33ed6 <dfu_target_done+0x3a>
		return -EACCES;
	}

	err = current_target->done(successful);
   33ea6:	68db      	ldr	r3, [r3, #12]
   33ea8:	4798      	blx	r3
	if (err != 0) {
   33eaa:	4604      	mov	r4, r0
   33eac:	b178      	cbz	r0, 33ece <dfu_target_done+0x32>
		LOG_ERR("Unable to clean up dfu_target");
   33eae:	2301      	movs	r3, #1
   33eb0:	f04f 0000 	mov.w	r0, #0
   33eb4:	4a0a      	ldr	r2, [pc, #40]	; (33ee0 <dfu_target_done+0x44>)
   33eb6:	f363 0007 	bfi	r0, r3, #0, #8
   33eba:	4b0a      	ldr	r3, [pc, #40]	; (33ee4 <dfu_target_done+0x48>)
   33ebc:	490a      	ldr	r1, [pc, #40]	; (33ee8 <dfu_target_done+0x4c>)
   33ebe:	1a9b      	subs	r3, r3, r2
   33ec0:	08db      	lsrs	r3, r3, #3
   33ec2:	f363 108f 	bfi	r0, r3, #6, #10
   33ec6:	f010 fc2e 	bl	44726 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   33eca:	4620      	mov	r0, r4
   33ecc:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   33ece:	2e00      	cmp	r6, #0
   33ed0:	d0fb      	beq.n	33eca <dfu_target_done+0x2e>
		current_target = NULL;
   33ed2:	6028      	str	r0, [r5, #0]
   33ed4:	e7f9      	b.n	33eca <dfu_target_done+0x2e>
		return -EACCES;
   33ed6:	f06f 040c 	mvn.w	r4, #12
   33eda:	e7f6      	b.n	33eca <dfu_target_done+0x2e>
   33edc:	200258ec 	.word	0x200258ec
   33ee0:	00049788 	.word	0x00049788
   33ee4:	000497f0 	.word	0x000497f0
   33ee8:	0005155b 	.word	0x0005155b

00033eec <dfu_target_reset>:

int dfu_target_reset(void)
{
   33eec:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   33eee:	4d0d      	ldr	r5, [pc, #52]	; (33f24 <dfu_target_reset+0x38>)
   33ef0:	682a      	ldr	r2, [r5, #0]
   33ef2:	b1a2      	cbz	r2, 33f1e <dfu_target_reset+0x32>
		int err = current_target->done(false);
   33ef4:	68d3      	ldr	r3, [r2, #12]
   33ef6:	2000      	movs	r0, #0
   33ef8:	4798      	blx	r3

		if (err != 0) {
   33efa:	4604      	mov	r4, r0
   33efc:	b178      	cbz	r0, 33f1e <dfu_target_reset+0x32>
			LOG_ERR("Unable to clean up dfu_target");
   33efe:	2301      	movs	r3, #1
   33f00:	f04f 0000 	mov.w	r0, #0
   33f04:	4a08      	ldr	r2, [pc, #32]	; (33f28 <dfu_target_reset+0x3c>)
   33f06:	f363 0007 	bfi	r0, r3, #0, #8
   33f0a:	4b08      	ldr	r3, [pc, #32]	; (33f2c <dfu_target_reset+0x40>)
   33f0c:	4908      	ldr	r1, [pc, #32]	; (33f30 <dfu_target_reset+0x44>)
   33f0e:	1a9b      	subs	r3, r3, r2
   33f10:	08db      	lsrs	r3, r3, #3
   33f12:	f363 108f 	bfi	r0, r3, #6, #10
   33f16:	f010 fc06 	bl	44726 <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   33f1a:	4620      	mov	r0, r4
   33f1c:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   33f1e:	2400      	movs	r4, #0
   33f20:	602c      	str	r4, [r5, #0]
	return 0;
   33f22:	e7fa      	b.n	33f1a <dfu_target_reset+0x2e>
   33f24:	200258ec 	.word	0x200258ec
   33f28:	00049788 	.word	0x00049788
   33f2c:	000497f0 	.word	0x000497f0
   33f30:	0005155b 	.word	0x0005155b

00033f34 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   33f34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   33f36:	2200      	movs	r2, #0
   33f38:	2304      	movs	r3, #4
   33f3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   33f3e:	4b10      	ldr	r3, [pc, #64]	; (33f80 <get_modem_error+0x4c>)
   33f40:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   33f42:	ab03      	add	r3, sp, #12
   33f44:	9300      	str	r3, [sp, #0]
   33f46:	2214      	movs	r2, #20
   33f48:	ab02      	add	r3, sp, #8
   33f4a:	f240 2103 	movw	r1, #515	; 0x203
   33f4e:	f011 f822 	bl	44f96 <z_impl_zsock_getsockopt>
	if (rc) {
   33f52:	b188      	cbz	r0, 33f78 <get_modem_error+0x44>
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   33f54:	2301      	movs	r3, #1
   33f56:	f04f 0400 	mov.w	r4, #0
   33f5a:	4a0a      	ldr	r2, [pc, #40]	; (33f84 <get_modem_error+0x50>)
   33f5c:	f363 0407 	bfi	r4, r3, #0, #8
   33f60:	4b09      	ldr	r3, [pc, #36]	; (33f88 <get_modem_error+0x54>)
   33f62:	1a9b      	subs	r3, r3, r2
   33f64:	08db      	lsrs	r3, r3, #3
   33f66:	f363 148f 	bfi	r4, r3, #6, #10
   33f6a:	f011 fd3b 	bl	459e4 <__errno>
   33f6e:	4907      	ldr	r1, [pc, #28]	; (33f8c <get_modem_error+0x58>)
   33f70:	6802      	ldr	r2, [r0, #0]
   33f72:	4620      	mov	r0, r4
   33f74:	f010 fbd7 	bl	44726 <log_string_sync>
	}

	return err;
}
   33f78:	9802      	ldr	r0, [sp, #8]
   33f7a:	b004      	add	sp, #16
   33f7c:	bd10      	pop	{r4, pc}
   33f7e:	bf00      	nop
   33f80:	200258f4 	.word	0x200258f4
   33f84:	00049788 	.word	0x00049788
   33f88:	00049800 	.word	0x00049800
   33f8c:	000517f4 	.word	0x000517f4

00033f90 <delete_banked_modem_fw>:
	}
	return 0;
}
#define SLEEP_TIME 1
static int delete_banked_modem_fw(void)
{
   33f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	int err;
	socklen_t len = sizeof(offset);
   33f94:	2304      	movs	r3, #4
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
   33f96:	f04f 0000 	mov.w	r0, #0
	socklen_t len = sizeof(offset);
   33f9a:	9303      	str	r3, [sp, #12]
	LOG_INF("Deleting firmware image, this can take several minutes");
   33f9c:	2303      	movs	r3, #3
   33f9e:	4c38      	ldr	r4, [pc, #224]	; (34080 <delete_banked_modem_fw+0xf0>)
   33fa0:	f363 0007 	bfi	r0, r3, #0, #8
   33fa4:	4b37      	ldr	r3, [pc, #220]	; (34084 <delete_banked_modem_fw+0xf4>)
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   33fa6:	4e38      	ldr	r6, [pc, #224]	; (34088 <delete_banked_modem_fw+0xf8>)
	LOG_INF("Deleting firmware image, this can take several minutes");
   33fa8:	1ae4      	subs	r4, r4, r3
   33faa:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   33fae:	f364 108f 	bfi	r0, r4, #6, #10
   33fb2:	4936      	ldr	r1, [pc, #216]	; (3408c <delete_banked_modem_fw+0xfc>)
   33fb4:	f010 fbb7 	bl	44726 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   33fb8:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   33fba:	2300      	movs	r3, #0
   33fbc:	2206      	movs	r2, #6
   33fbe:	9300      	str	r3, [sp, #0]
   33fc0:	f240 2103 	movw	r1, #515	; 0x203
   33fc4:	f011 f802 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err < 0) {
   33fc8:	2800      	cmp	r0, #0
   33fca:	da12      	bge.n	33ff2 <delete_banked_modem_fw+0x62>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   33fcc:	2301      	movs	r3, #1
   33fce:	f04f 0500 	mov.w	r5, #0
   33fd2:	f363 0507 	bfi	r5, r3, #0, #8
   33fd6:	f011 fd05 	bl	459e4 <__errno>
   33fda:	f364 158f 	bfi	r5, r4, #6, #10
   33fde:	6802      	ldr	r2, [r0, #0]
   33fe0:	492b      	ldr	r1, [pc, #172]	; (34090 <delete_banked_modem_fw+0x100>)
   33fe2:	4628      	mov	r0, r5
   33fe4:	f010 fb9f 	bl	44726 <log_string_sync>
		return -EFAULT;
   33fe8:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   33fec:	b004      	add	sp, #16
   33fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   33ff2:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   33ff4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 3409c <delete_banked_modem_fw+0x10c>
				callback(DFU_TARGET_EVT_TIMEOUT);
   33ff8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 34094 <delete_banked_modem_fw+0x104>
					LOG_ERR("DFU error: %d", err);
   33ffc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 340a0 <delete_banked_modem_fw+0x110>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   34000:	6830      	ldr	r0, [r6, #0]
   34002:	ab03      	add	r3, sp, #12
   34004:	9300      	str	r3, [sp, #0]
   34006:	2207      	movs	r2, #7
   34008:	4643      	mov	r3, r8
   3400a:	f240 2103 	movw	r1, #515	; 0x203
   3400e:	f010 ffc2 	bl	44f96 <z_impl_zsock_getsockopt>
		if (err < 0) {
   34012:	2800      	cmp	r0, #0
   34014:	da24      	bge.n	34060 <delete_banked_modem_fw+0xd0>
			if (timeout < 0) {
   34016:	2d00      	cmp	r5, #0
   34018:	da04      	bge.n	34024 <delete_banked_modem_fw+0x94>
				callback(DFU_TARGET_EVT_TIMEOUT);
   3401a:	f8d9 3000 	ldr.w	r3, [r9]
   3401e:	2000      	movs	r0, #0
   34020:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   34022:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   34024:	f011 fcde 	bl	459e4 <__errno>
   34028:	6803      	ldr	r3, [r0, #0]
   3402a:	2b08      	cmp	r3, #8
   3402c:	d116      	bne.n	3405c <delete_banked_modem_fw+0xcc>
				err = get_modem_error();
   3402e:	f7ff ff81 	bl	33f34 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   34032:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   34036:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   34038:	d00b      	beq.n	34052 <delete_banked_modem_fw+0xc2>
					LOG_ERR("DFU error: %d", err);
   3403a:	f027 033f 	bic.w	r3, r7, #63	; 0x3f
   3403e:	f043 0301 	orr.w	r3, r3, #1
   34042:	f363 0707 	bfi	r7, r3, #0, #8
   34046:	f364 178f 	bfi	r7, r4, #6, #10
   3404a:	4651      	mov	r1, sl
   3404c:	4638      	mov	r0, r7
   3404e:	f010 fb6a 	bl	44726 <log_string_sync>
	return z_impl_k_sleep(timeout);
   34052:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   34056:	2100      	movs	r1, #0
   34058:	f00c fbf4 	bl	40844 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   3405c:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   3405e:	e7cf      	b.n	34000 <delete_banked_modem_fw+0x70>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   34060:	4b0c      	ldr	r3, [pc, #48]	; (34094 <delete_banked_modem_fw+0x104>)
   34062:	2001      	movs	r0, #1
   34064:	681b      	ldr	r3, [r3, #0]
   34066:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   34068:	2303      	movs	r3, #3
   3406a:	f04f 0000 	mov.w	r0, #0
   3406e:	f363 0007 	bfi	r0, r3, #0, #8
   34072:	f364 108f 	bfi	r0, r4, #6, #10
   34076:	4908      	ldr	r1, [pc, #32]	; (34098 <delete_banked_modem_fw+0x108>)
   34078:	f010 fb55 	bl	44726 <log_string_sync>
	return 0;
   3407c:	2000      	movs	r0, #0
   3407e:	e7b5      	b.n	33fec <delete_banked_modem_fw+0x5c>
   34080:	00049800 	.word	0x00049800
   34084:	00049788 	.word	0x00049788
   34088:	200258f4 	.word	0x200258f4
   3408c:	000515aa 	.word	0x000515aa
   34090:	000515e1 	.word	0x000515e1
   34094:	200258f0 	.word	0x200258f0
   34098:	00051611 	.word	0x00051611
   3409c:	200258f8 	.word	0x200258f8
   340a0:	00051603 	.word	0x00051603

000340a4 <dfu_target_modem_identify>:
	return err;
}

bool dfu_target_modem_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   340a4:	6840      	ldr	r0, [r0, #4]

}
   340a6:	4b02      	ldr	r3, [pc, #8]	; (340b0 <dfu_target_modem_identify+0xc>)
   340a8:	1ac3      	subs	r3, r0, r3
   340aa:	4258      	negs	r0, r3
   340ac:	4158      	adcs	r0, r3
   340ae:	4770      	bx	lr
   340b0:	7544656d 	.word	0x7544656d

000340b4 <dfu_target_modem_init>:

int dfu_target_modem_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   340b4:	2304      	movs	r3, #4
{
   340b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   340ba:	b098      	sub	sp, #96	; 0x60
	socklen_t len = sizeof(offset);
   340bc:	9303      	str	r3, [sp, #12]

	callback = cb;
   340be:	4b72      	ldr	r3, [pc, #456]	; (34288 <dfu_target_modem_init+0x1d4>)
{
   340c0:	4680      	mov	r8, r0
	callback = cb;
   340c2:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   340c4:	f240 2203 	movw	r2, #515	; 0x203
   340c8:	2101      	movs	r1, #1
   340ca:	2006      	movs	r0, #6
   340cc:	f7f1 f9c6 	bl	2545c <z_impl_zsock_socket>
   340d0:	4c6e      	ldr	r4, [pc, #440]	; (3428c <dfu_target_modem_init+0x1d8>)
   340d2:	4b6f      	ldr	r3, [pc, #444]	; (34290 <dfu_target_modem_init+0x1dc>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   340d4:	4e6f      	ldr	r6, [pc, #444]	; (34294 <dfu_target_modem_init+0x1e0>)
   340d6:	1ae4      	subs	r4, r4, r3
	if (fd < 0) {
   340d8:	2800      	cmp	r0, #0
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   340da:	6030      	str	r0, [r6, #0]
	if (fd < 0) {
   340dc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   340e0:	4635      	mov	r5, r6
		LOG_ERR("Failed to open Modem DFU socket.");
   340e2:	f04f 0000 	mov.w	r0, #0
	if (fd < 0) {
   340e6:	da3a      	bge.n	3415e <dfu_target_modem_init+0xaa>
		LOG_ERR("Failed to open Modem DFU socket.");
   340e8:	2301      	movs	r3, #1
   340ea:	f363 0007 	bfi	r0, r3, #0, #8
   340ee:	f364 108f 	bfi	r0, r4, #6, #10
   340f2:	4969      	ldr	r1, [pc, #420]	; (34298 <dfu_target_modem_init+0x1e4>)
   340f4:	f010 fb17 	bl	44726 <log_string_sync>
		return fd;
   340f8:	6830      	ldr	r0, [r6, #0]

	err = modem_dfu_socket_init();
	if (err < 0) {
   340fa:	2800      	cmp	r0, #0
   340fc:	db55      	blt.n	341aa <dfu_target_modem_init+0xf6>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   340fe:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   34100:	af03      	add	r7, sp, #12
   34102:	9700      	str	r7, [sp, #0]
   34104:	ab0e      	add	r3, sp, #56	; 0x38
   34106:	2202      	movs	r2, #2
   34108:	f240 2103 	movw	r1, #515	; 0x203
   3410c:	f010 ff43 	bl	44f96 <z_impl_zsock_getsockopt>
	if (err < 0) {
   34110:	2800      	cmp	r0, #0
   34112:	da13      	bge.n	3413c <dfu_target_modem_init+0x88>
		if (errno == ENOEXEC) {
   34114:	f011 fc66 	bl	459e4 <__errno>
   34118:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   3411a:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   3411e:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   34120:	f04f 0301 	mov.w	r3, #1
   34124:	f363 0607 	bfi	r6, r3, #0, #8
   34128:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   3412c:	d157      	bne.n	341de <dfu_target_modem_init+0x12a>
			LOG_ERR("Modem error: %d", get_modem_error());
   3412e:	f7ff ff01 	bl	33f34 <get_modem_error>
   34132:	4602      	mov	r2, r0
   34134:	4959      	ldr	r1, [pc, #356]	; (3429c <dfu_target_modem_init+0x1e8>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   34136:	4630      	mov	r0, r6
   34138:	f010 faf5 	bl	44726 <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   3413c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3413e:	4543      	cmp	r3, r8
   34140:	d252      	bcs.n	341e8 <dfu_target_modem_init+0x134>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   34142:	2201      	movs	r2, #1
   34144:	f04f 0000 	mov.w	r0, #0
   34148:	f362 0007 	bfi	r0, r2, #0, #8
   3414c:	f364 108f 	bfi	r0, r4, #6, #10
   34150:	4642      	mov	r2, r8
   34152:	4953      	ldr	r1, [pc, #332]	; (342a0 <dfu_target_modem_init+0x1ec>)
   34154:	f010 fae7 	bl	44726 <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   34158:	f06f 001a 	mvn.w	r0, #26
   3415c:	e025      	b.n	341aa <dfu_target_modem_init+0xf6>
	LOG_INF("Modem DFU Socket created");
   3415e:	2303      	movs	r3, #3
	len = sizeof(version);
   34160:	2724      	movs	r7, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   34162:	f363 0007 	bfi	r0, r3, #0, #8
   34166:	f364 108f 	bfi	r0, r4, #6, #10
   3416a:	494e      	ldr	r1, [pc, #312]	; (342a4 <dfu_target_modem_init+0x1f0>)
   3416c:	f010 fadb 	bl	44726 <log_string_sync>
	len = sizeof(version);
   34170:	9704      	str	r7, [sp, #16]
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   34172:	6830      	ldr	r0, [r6, #0]
   34174:	ab04      	add	r3, sp, #16
   34176:	ae05      	add	r6, sp, #20
   34178:	9300      	str	r3, [sp, #0]
   3417a:	2201      	movs	r2, #1
   3417c:	4633      	mov	r3, r6
   3417e:	f240 2103 	movw	r1, #515	; 0x203
   34182:	f010 ff08 	bl	44f96 <z_impl_zsock_getsockopt>
	if (err < 0) {
   34186:	2800      	cmp	r0, #0
   34188:	da12      	bge.n	341b0 <dfu_target_modem_init+0xfc>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   3418a:	2301      	movs	r3, #1
   3418c:	f04f 0500 	mov.w	r5, #0
   34190:	f363 0507 	bfi	r5, r3, #0, #8
   34194:	f011 fc26 	bl	459e4 <__errno>
   34198:	f364 158f 	bfi	r5, r4, #6, #10
   3419c:	6802      	ldr	r2, [r0, #0]
   3419e:	4942      	ldr	r1, [pc, #264]	; (342a8 <dfu_target_modem_init+0x1f4>)
   341a0:	4628      	mov	r0, r5
   341a2:	f010 fac0 	bl	44726 <log_string_sync>
		return -1;
   341a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   341aa:	b018      	add	sp, #96	; 0x60
   341ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   341b0:	9600      	str	r6, [sp, #0]
   341b2:	463b      	mov	r3, r7
   341b4:	4a3d      	ldr	r2, [pc, #244]	; (342ac <dfu_target_modem_init+0x1f8>)
   341b6:	2125      	movs	r1, #37	; 0x25
   341b8:	a80e      	add	r0, sp, #56	; 0x38
   341ba:	f00e fb9b 	bl	428f4 <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   341be:	f04f 0600 	mov.w	r6, #0
   341c2:	2303      	movs	r3, #3
   341c4:	a80e      	add	r0, sp, #56	; 0x38
   341c6:	f363 0607 	bfi	r6, r3, #0, #8
   341ca:	f010 fabf 	bl	4474c <log_strdup>
   341ce:	f364 168f 	bfi	r6, r4, #6, #10
   341d2:	4602      	mov	r2, r0
   341d4:	4936      	ldr	r1, [pc, #216]	; (342b0 <dfu_target_modem_init+0x1fc>)
   341d6:	4630      	mov	r0, r6
   341d8:	f010 faa5 	bl	44726 <log_string_sync>
	if (err < 0) {
   341dc:	e78f      	b.n	340fe <dfu_target_modem_init+0x4a>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   341de:	f011 fc01 	bl	459e4 <__errno>
   341e2:	4934      	ldr	r1, [pc, #208]	; (342b4 <dfu_target_modem_init+0x200>)
   341e4:	6802      	ldr	r2, [r0, #0]
   341e6:	e7a6      	b.n	34136 <dfu_target_modem_init+0x82>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   341e8:	6828      	ldr	r0, [r5, #0]
   341ea:	4b33      	ldr	r3, [pc, #204]	; (342b8 <dfu_target_modem_init+0x204>)
   341ec:	9700      	str	r7, [sp, #0]
   341ee:	2207      	movs	r2, #7
   341f0:	f240 2103 	movw	r1, #515	; 0x203
   341f4:	f010 fecf 	bl	44f96 <z_impl_zsock_getsockopt>
	if (err < 0) {
   341f8:	2800      	cmp	r0, #0
   341fa:	da13      	bge.n	34224 <dfu_target_modem_init+0x170>
		if (errno == ENOEXEC) {
   341fc:	f011 fbf2 	bl	459e4 <__errno>
   34200:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   34202:	f04f 0600 	mov.w	r6, #0
		if (errno == ENOEXEC) {
   34206:	2b08      	cmp	r3, #8
			LOG_ERR("Modem error: %d", get_modem_error());
   34208:	f04f 0301 	mov.w	r3, #1
   3420c:	f363 0607 	bfi	r6, r3, #0, #8
   34210:	f364 168f 	bfi	r6, r4, #6, #10
		if (errno == ENOEXEC) {
   34214:	d10f      	bne.n	34236 <dfu_target_modem_init+0x182>
			LOG_ERR("Modem error: %d", get_modem_error());
   34216:	f7ff fe8d 	bl	33f34 <get_modem_error>
   3421a:	4602      	mov	r2, r0
   3421c:	491f      	ldr	r1, [pc, #124]	; (3429c <dfu_target_modem_init+0x1e8>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   3421e:	4630      	mov	r0, r6
   34220:	f010 fa81 	bl	44726 <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   34224:	4e24      	ldr	r6, [pc, #144]	; (342b8 <dfu_target_modem_init+0x204>)
   34226:	6832      	ldr	r2, [r6, #0]
   34228:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   3422c:	d108      	bne.n	34240 <dfu_target_modem_init+0x18c>
		delete_banked_modem_fw();
   3422e:	f7ff feaf 	bl	33f90 <delete_banked_modem_fw>
	return 0;
   34232:	2000      	movs	r0, #0
   34234:	e7b9      	b.n	341aa <dfu_target_modem_init+0xf6>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   34236:	f011 fbd5 	bl	459e4 <__errno>
   3423a:	491e      	ldr	r1, [pc, #120]	; (342b4 <dfu_target_modem_init+0x200>)
   3423c:	6802      	ldr	r2, [r0, #0]
   3423e:	e7ee      	b.n	3421e <dfu_target_modem_init+0x16a>
	} else if (offset != 0) {
   34240:	2a00      	cmp	r2, #0
   34242:	d0f6      	beq.n	34232 <dfu_target_modem_init+0x17e>
		LOG_INF("Setting offset to 0x%x", offset);
   34244:	2303      	movs	r3, #3
   34246:	f04f 0000 	mov.w	r0, #0
   3424a:	f363 0007 	bfi	r0, r3, #0, #8
   3424e:	f364 108f 	bfi	r0, r4, #6, #10
   34252:	491a      	ldr	r1, [pc, #104]	; (342bc <dfu_target_modem_init+0x208>)
   34254:	f010 fa67 	bl	44726 <log_string_sync>
		len = sizeof(offset);
   34258:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   3425a:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   3425c:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3425e:	2207      	movs	r2, #7
   34260:	9300      	str	r3, [sp, #0]
   34262:	f240 2103 	movw	r1, #515	; 0x203
   34266:	4633      	mov	r3, r6
   34268:	f010 feb0 	bl	44fcc <z_impl_zsock_setsockopt>
		if (err != 0) {
   3426c:	2800      	cmp	r0, #0
   3426e:	d0e0      	beq.n	34232 <dfu_target_modem_init+0x17e>
			LOG_INF("Error while setting offset: %d", offset);
   34270:	2303      	movs	r3, #3
   34272:	f04f 0000 	mov.w	r0, #0
   34276:	f363 0007 	bfi	r0, r3, #0, #8
   3427a:	f364 108f 	bfi	r0, r4, #6, #10
   3427e:	6832      	ldr	r2, [r6, #0]
   34280:	490f      	ldr	r1, [pc, #60]	; (342c0 <dfu_target_modem_init+0x20c>)
   34282:	f010 fa50 	bl	44726 <log_string_sync>
   34286:	e7d4      	b.n	34232 <dfu_target_modem_init+0x17e>
   34288:	200258f0 	.word	0x200258f0
   3428c:	00049800 	.word	0x00049800
   34290:	00049788 	.word	0x00049788
   34294:	200258f4 	.word	0x200258f4
   34298:	000516b6 	.word	0x000516b6
   3429c:	0005173a 	.word	0x0005173a
   342a0:	00051767 	.word	0x00051767
   342a4:	000516d7 	.word	0x000516d7
   342a8:	000516f0 	.word	0x000516f0
   342ac:	0005171a 	.word	0x0005171a
   342b0:	0005171f 	.word	0x0005171f
   342b4:	0005174a 	.word	0x0005174a
   342b8:	200258f8 	.word	0x200258f8
   342bc:	00051796 	.word	0x00051796
   342c0:	000517ad 	.word	0x000517ad

000342c4 <dfu_target_modem_offset_get>:

int dfu_target_modem_offset_get(size_t *out)
{
	*out = offset;
   342c4:	4b02      	ldr	r3, [pc, #8]	; (342d0 <dfu_target_modem_offset_get+0xc>)
   342c6:	681b      	ldr	r3, [r3, #0]
   342c8:	6003      	str	r3, [r0, #0]
	return 0;
}
   342ca:	2000      	movs	r0, #0
   342cc:	4770      	bx	lr
   342ce:	bf00      	nop
   342d0:	200258f8 	.word	0x200258f8

000342d4 <dfu_target_modem_write>:

int dfu_target_modem_write(const void *const buf, size_t len)
{
   342d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   342d8:	2400      	movs	r4, #0
{
   342da:	4607      	mov	r7, r0
   342dc:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   342de:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   342e0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3438c <dfu_target_modem_write+0xb8>
   342e4:	f8d8 0000 	ldr.w	r0, [r8]
   342e8:	2300      	movs	r3, #0
   342ea:	e9cd 6600 	strd	r6, r6, [sp]
   342ee:	1b2a      	subs	r2, r5, r4
   342f0:	1939      	adds	r1, r7, r4
   342f2:	f010 fe00 	bl	44ef6 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   342f6:	2800      	cmp	r0, #0
   342f8:	dd0a      	ble.n	34310 <dfu_target_modem_write+0x3c>
			sent += send_result;
   342fa:	4404      	add	r4, r0
			if (sent >= len) {
   342fc:	42ac      	cmp	r4, r5
   342fe:	d3f1      	bcc.n	342e4 <dfu_target_modem_write+0x10>
				offset += len;
				return 0;
   34300:	2000      	movs	r0, #0
				offset += len;
   34302:	4a1e      	ldr	r2, [pc, #120]	; (3437c <dfu_target_modem_write+0xa8>)
   34304:	6813      	ldr	r3, [r2, #0]
   34306:	441d      	add	r5, r3
   34308:	6015      	str	r5, [r2, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   3430a:	b002      	add	sp, #8
   3430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   34310:	d0e8      	beq.n	342e4 <dfu_target_modem_write+0x10>
	if (errno != ENOEXEC) {
   34312:	f011 fb67 	bl	459e4 <__errno>
   34316:	6803      	ldr	r3, [r0, #0]
   34318:	2b08      	cmp	r3, #8
   3431a:	d12c      	bne.n	34376 <dfu_target_modem_write+0xa2>
	modem_error = get_modem_error();
   3431c:	f7ff fe0a 	bl	33f34 <get_modem_error>
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   34320:	f04f 0600 	mov.w	r6, #0
   34324:	2301      	movs	r3, #1
   34326:	4a16      	ldr	r2, [pc, #88]	; (34380 <dfu_target_modem_write+0xac>)
   34328:	f363 0607 	bfi	r6, r3, #0, #8
   3432c:	4b15      	ldr	r3, [pc, #84]	; (34384 <dfu_target_modem_write+0xb0>)
	modem_error = get_modem_error();
   3432e:	4604      	mov	r4, r0
   34330:	1a9b      	subs	r3, r3, r2
   34332:	08db      	lsrs	r3, r3, #3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   34334:	f363 168f 	bfi	r6, r3, #6, #10
   34338:	f011 fb54 	bl	459e4 <__errno>
   3433c:	4623      	mov	r3, r4
   3433e:	6802      	ldr	r2, [r0, #0]
   34340:	4911      	ldr	r1, [pc, #68]	; (34388 <dfu_target_modem_write+0xb4>)
   34342:	4630      	mov	r0, r6
   34344:	f010 f9ef 	bl	44726 <log_string_sync>
	switch (modem_error) {
   34348:	f114 0f0b 	cmn.w	r4, #11
   3434c:	d004      	beq.n	34358 <dfu_target_modem_write+0x84>
   3434e:	f114 0f09 	cmn.w	r4, #9
   34352:	d00d      	beq.n	34370 <dfu_target_modem_write+0x9c>
   34354:	340e      	adds	r4, #14
   34356:	d10e      	bne.n	34376 <dfu_target_modem_write+0xa2>
		delete_banked_modem_fw();
   34358:	f7ff fe1a 	bl	33f90 <delete_banked_modem_fw>
		err = dfu_target_modem_write(buf, len);
   3435c:	4629      	mov	r1, r5
   3435e:	4638      	mov	r0, r7
   34360:	f7ff ffb8 	bl	342d4 <dfu_target_modem_write>
			return 0;
   34364:	2800      	cmp	r0, #0
   34366:	bfb4      	ite	lt
   34368:	f06f 0015 	mvnlt.w	r0, #21
   3436c:	2000      	movge	r0, #0
   3436e:	e7cc      	b.n	3430a <dfu_target_modem_write+0x36>
		return -EINVAL;
   34370:	f06f 0015 	mvn.w	r0, #21
   34374:	e7c9      	b.n	3430a <dfu_target_modem_write+0x36>
		return -EFAULT;
   34376:	f06f 000d 	mvn.w	r0, #13
   3437a:	e7c6      	b.n	3430a <dfu_target_modem_write+0x36>
   3437c:	200258f8 	.word	0x200258f8
   34380:	00049788 	.word	0x00049788
   34384:	00049800 	.word	0x00049800
   34388:	000517cc 	.word	0x000517cc
   3438c:	200258f4 	.word	0x200258f4

00034390 <dfu_target_modem_done>:

int dfu_target_modem_done(bool successful)
{
   34390:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34392:	4b2c      	ldr	r3, [pc, #176]	; (34444 <dfu_target_modem_done+0xb4>)
   34394:	4c2c      	ldr	r4, [pc, #176]	; (34448 <dfu_target_modem_done+0xb8>)
   34396:	4e2d      	ldr	r6, [pc, #180]	; (3444c <dfu_target_modem_done+0xbc>)
   34398:	1ae4      	subs	r4, r4, r3
   3439a:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   3439e:	2800      	cmp	r0, #0
   343a0:	d042      	beq.n	34428 <dfu_target_modem_done+0x98>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   343a2:	2303      	movs	r3, #3
   343a4:	f04f 0000 	mov.w	r0, #0
   343a8:	f363 0007 	bfi	r0, r3, #0, #8
   343ac:	f364 108f 	bfi	r0, r4, #6, #10
   343b0:	4927      	ldr	r1, [pc, #156]	; (34450 <dfu_target_modem_done+0xc0>)
   343b2:	f010 f9b8 	bl	44726 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   343b6:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   343b8:	2300      	movs	r3, #0
   343ba:	2204      	movs	r2, #4
   343bc:	9300      	str	r3, [sp, #0]
   343be:	f240 2103 	movw	r1, #515	; 0x203
   343c2:	f010 fe03 	bl	44fcc <z_impl_zsock_setsockopt>
	if (err < 0) {
   343c6:	1e05      	subs	r5, r0, #0
   343c8:	da12      	bge.n	343f0 <dfu_target_modem_done+0x60>
		if (errno == ENOEXEC) {
   343ca:	f011 fb0b 	bl	459e4 <__errno>
   343ce:	6803      	ldr	r3, [r0, #0]
   343d0:	2b08      	cmp	r3, #8
   343d2:	d11f      	bne.n	34414 <dfu_target_modem_done+0x84>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   343d4:	2301      	movs	r3, #1
   343d6:	f04f 0500 	mov.w	r5, #0
   343da:	f363 0507 	bfi	r5, r3, #0, #8
   343de:	f7ff fda9 	bl	33f34 <get_modem_error>
   343e2:	f364 158f 	bfi	r5, r4, #6, #10
   343e6:	4602      	mov	r2, r0
   343e8:	4628      	mov	r0, r5
   343ea:	491a      	ldr	r1, [pc, #104]	; (34454 <dfu_target_modem_done+0xc4>)
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   343ec:	f010 f99b 	bl	44726 <log_string_sync>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   343f0:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_close(sock);
   343f2:	f010 fd53 	bl	44e9c <z_impl_zsock_close>
	if (err < 0) {
   343f6:	1e05      	subs	r5, r0, #0
   343f8:	da21      	bge.n	3443e <dfu_target_modem_done+0xae>
		LOG_ERR("Failed to close modem DFU socket.");
   343fa:	f04f 0000 	mov.w	r0, #0
   343fe:	2301      	movs	r3, #1
   34400:	f363 0007 	bfi	r0, r3, #0, #8
   34404:	f364 108f 	bfi	r0, r4, #6, #10
   34408:	4913      	ldr	r1, [pc, #76]	; (34458 <dfu_target_modem_done+0xc8>)
   3440a:	f010 f98c 	bl	44726 <log_string_sync>
		return err;
	}

	return 0;
}
   3440e:	4628      	mov	r0, r5
   34410:	b002      	add	sp, #8
   34412:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   34414:	f04f 0000 	mov.w	r0, #0
   34418:	2301      	movs	r3, #1
   3441a:	f363 0007 	bfi	r0, r3, #0, #8
   3441e:	f364 108f 	bfi	r0, r4, #6, #10
   34422:	462a      	mov	r2, r5
   34424:	490b      	ldr	r1, [pc, #44]	; (34454 <dfu_target_modem_done+0xc4>)
   34426:	e7e1      	b.n	343ec <dfu_target_modem_done+0x5c>
		LOG_INF("Modem upgrade aborted.");
   34428:	2303      	movs	r3, #3
   3442a:	f04f 0000 	mov.w	r0, #0
   3442e:	f363 0007 	bfi	r0, r3, #0, #8
   34432:	f364 108f 	bfi	r0, r4, #6, #10
   34436:	4909      	ldr	r1, [pc, #36]	; (3445c <dfu_target_modem_done+0xcc>)
   34438:	f010 f975 	bl	44726 <log_string_sync>
   3443c:	e7d8      	b.n	343f0 <dfu_target_modem_done+0x60>
	return 0;
   3443e:	2500      	movs	r5, #0
   34440:	e7e5      	b.n	3440e <dfu_target_modem_done+0x7e>
   34442:	bf00      	nop
   34444:	00049788 	.word	0x00049788
   34448:	00049800 	.word	0x00049800
   3444c:	200258f4 	.word	0x200258f4
   34450:	0005162a 	.word	0x0005162a
   34454:	00051659 	.word	0x00051659
   34458:	00051694 	.word	0x00051694
   3445c:	0005167d 	.word	0x0005167d

00034460 <reset_flash_context>:

	return 0;
}

static void reset_flash_context(void)
{
   34460:	b508      	push	{r3, lr}
	/* Need to set bytes_written to 0 */
	int err = flash_img_init(&flash_img);
   34462:	480a      	ldr	r0, [pc, #40]	; (3448c <reset_flash_context+0x2c>)
   34464:	f010 fcd0 	bl	44e08 <flash_img_init>

	if (err) {
   34468:	b178      	cbz	r0, 3448a <reset_flash_context+0x2a>
		LOG_ERR("Unable to re-initialize flash_img");
   3446a:	2301      	movs	r3, #1
   3446c:	f04f 0000 	mov.w	r0, #0
   34470:	4a07      	ldr	r2, [pc, #28]	; (34490 <reset_flash_context+0x30>)
   34472:	f363 0007 	bfi	r0, r3, #0, #8
   34476:	4b07      	ldr	r3, [pc, #28]	; (34494 <reset_flash_context+0x34>)
   34478:	4907      	ldr	r1, [pc, #28]	; (34498 <reset_flash_context+0x38>)
   3447a:	1a9b      	subs	r3, r3, r2
   3447c:	08db      	lsrs	r3, r3, #3
   3447e:	f363 108f 	bfi	r0, r3, #6, #10
	}
	err = store_flash_img_context();
	if (err != 0) {
		LOG_ERR("Unable to reset write progress: %d", err);
	}
}
   34482:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Unable to re-initialize flash_img");
   34486:	f010 b94e 	b.w	44726 <log_string_sync>
}
   3448a:	bd08      	pop	{r3, pc}
   3448c:	200258fc 	.word	0x200258fc
   34490:	00049788 	.word	0x00049788
   34494:	000497f8 	.word	0x000497f8
   34498:	0005190f 	.word	0x0005190f

0003449c <dfu_target_mcuboot_identify>:
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   3449c:	6800      	ldr	r0, [r0, #0]
}
   3449e:	4b02      	ldr	r3, [pc, #8]	; (344a8 <dfu_target_mcuboot_identify+0xc>)
   344a0:	1ac3      	subs	r3, r0, r3
   344a2:	4258      	negs	r0, r3
   344a4:	4158      	adcs	r0, r3
   344a6:	4770      	bx	lr
   344a8:	96f3b83d 	.word	0x96f3b83d

000344ac <dfu_target_mcuboot_init>:
{
   344ac:	b538      	push	{r3, r4, r5, lr}
   344ae:	4605      	mov	r5, r0
	int err = flash_img_init(&flash_img);
   344b0:	4816      	ldr	r0, [pc, #88]	; (3450c <dfu_target_mcuboot_init+0x60>)
   344b2:	f010 fca9 	bl	44e08 <flash_img_init>
	if (err != 0) {
   344b6:	4604      	mov	r4, r0
   344b8:	b180      	cbz	r0, 344dc <dfu_target_mcuboot_init+0x30>
		LOG_ERR("flash_img_init error %d", err);
   344ba:	2301      	movs	r3, #1
   344bc:	f04f 0000 	mov.w	r0, #0
   344c0:	4a13      	ldr	r2, [pc, #76]	; (34510 <dfu_target_mcuboot_init+0x64>)
   344c2:	f363 0007 	bfi	r0, r3, #0, #8
   344c6:	4b13      	ldr	r3, [pc, #76]	; (34514 <dfu_target_mcuboot_init+0x68>)
   344c8:	4913      	ldr	r1, [pc, #76]	; (34518 <dfu_target_mcuboot_init+0x6c>)
   344ca:	1a9b      	subs	r3, r3, r2
   344cc:	08db      	lsrs	r3, r3, #3
   344ce:	f363 108f 	bfi	r0, r3, #6, #10
   344d2:	4622      	mov	r2, r4
   344d4:	f010 f927 	bl	44726 <log_string_sync>
}
   344d8:	4620      	mov	r0, r4
   344da:	bd38      	pop	{r3, r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   344dc:	f5b5 2fee 	cmp.w	r5, #487424	; 0x77000
   344e0:	d9fa      	bls.n	344d8 <dfu_target_mcuboot_init+0x2c>
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   344e2:	2301      	movs	r3, #1
   344e4:	f04f 0000 	mov.w	r0, #0
   344e8:	4a09      	ldr	r2, [pc, #36]	; (34510 <dfu_target_mcuboot_init+0x64>)
   344ea:	f363 0007 	bfi	r0, r3, #0, #8
   344ee:	4b09      	ldr	r3, [pc, #36]	; (34514 <dfu_target_mcuboot_init+0x68>)
   344f0:	490a      	ldr	r1, [pc, #40]	; (3451c <dfu_target_mcuboot_init+0x70>)
   344f2:	1a9b      	subs	r3, r3, r2
   344f4:	08db      	lsrs	r3, r3, #3
   344f6:	f363 108f 	bfi	r0, r3, #6, #10
   344fa:	462a      	mov	r2, r5
   344fc:	f44f 23ee 	mov.w	r3, #487424	; 0x77000
   34500:	f010 f911 	bl	44726 <log_string_sync>
		return -EFBIG;
   34504:	f06f 041a 	mvn.w	r4, #26
   34508:	e7e6      	b.n	344d8 <dfu_target_mcuboot_init+0x2c>
   3450a:	bf00      	nop
   3450c:	200258fc 	.word	0x200258fc
   34510:	00049788 	.word	0x00049788
   34514:	000497f8 	.word	0x000497f8
   34518:	000518a3 	.word	0x000518a3
   3451c:	000518bb 	.word	0x000518bb

00034520 <dfu_target_mcuboot_offset_get>:
{
   34520:	b510      	push	{r4, lr}
   34522:	4604      	mov	r4, r0
	*out = flash_img_bytes_written(&flash_img);
   34524:	4802      	ldr	r0, [pc, #8]	; (34530 <dfu_target_mcuboot_offset_get+0x10>)
   34526:	f010 fc4a 	bl	44dbe <flash_img_bytes_written>
   3452a:	6020      	str	r0, [r4, #0]
}
   3452c:	2000      	movs	r0, #0
   3452e:	bd10      	pop	{r4, pc}
   34530:	200258fc 	.word	0x200258fc

00034534 <dfu_target_mcuboot_write>:
{
   34534:	b510      	push	{r4, lr}
	int err = flash_img_buffered_write(&flash_img, (uint8_t *)buf, len, false);
   34536:	460a      	mov	r2, r1
   34538:	2300      	movs	r3, #0
   3453a:	4601      	mov	r1, r0
   3453c:	480a      	ldr	r0, [pc, #40]	; (34568 <dfu_target_mcuboot_write+0x34>)
   3453e:	f010 fc21 	bl	44d84 <flash_img_buffered_write>
	if (err != 0) {
   34542:	4604      	mov	r4, r0
   34544:	b170      	cbz	r0, 34564 <dfu_target_mcuboot_write+0x30>
		LOG_ERR("flash_img_buffered_write error %d", err);
   34546:	2301      	movs	r3, #1
   34548:	f04f 0000 	mov.w	r0, #0
   3454c:	4a07      	ldr	r2, [pc, #28]	; (3456c <dfu_target_mcuboot_write+0x38>)
   3454e:	f363 0007 	bfi	r0, r3, #0, #8
   34552:	4b07      	ldr	r3, [pc, #28]	; (34570 <dfu_target_mcuboot_write+0x3c>)
   34554:	4907      	ldr	r1, [pc, #28]	; (34574 <dfu_target_mcuboot_write+0x40>)
   34556:	1a9b      	subs	r3, r3, r2
   34558:	08db      	lsrs	r3, r3, #3
   3455a:	f363 108f 	bfi	r0, r3, #6, #10
   3455e:	4622      	mov	r2, r4
   34560:	f010 f8e1 	bl	44726 <log_string_sync>
}
   34564:	4620      	mov	r0, r4
   34566:	bd10      	pop	{r4, pc}
   34568:	200258fc 	.word	0x200258fc
   3456c:	00049788 	.word	0x00049788
   34570:	000497f8 	.word	0x000497f8
   34574:	000518ed 	.word	0x000518ed

00034578 <dfu_target_mcuboot_done>:

int dfu_target_mcuboot_done(bool successful)
{
   34578:	b538      	push	{r3, r4, r5, lr}
   3457a:	4c20      	ldr	r4, [pc, #128]	; (345fc <dfu_target_mcuboot_done+0x84>)
   3457c:	4b20      	ldr	r3, [pc, #128]	; (34600 <dfu_target_mcuboot_done+0x88>)
   3457e:	1ae4      	subs	r4, r4, r3
   34580:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	int err = 0;

	if (successful) {
   34584:	b380      	cbz	r0, 345e8 <dfu_target_mcuboot_done+0x70>
		err = flash_img_buffered_write(&flash_img, NULL, 0, true);
   34586:	2200      	movs	r2, #0
   34588:	2301      	movs	r3, #1
   3458a:	4611      	mov	r1, r2
   3458c:	481d      	ldr	r0, [pc, #116]	; (34604 <dfu_target_mcuboot_done+0x8c>)
   3458e:	f010 fbf9 	bl	44d84 <flash_img_buffered_write>
		if (err != 0) {
   34592:	4605      	mov	r5, r0
   34594:	b170      	cbz	r0, 345b4 <dfu_target_mcuboot_done+0x3c>
			LOG_ERR("flash_img_buffered_write error %d", err);
   34596:	f04f 0000 	mov.w	r0, #0
   3459a:	2301      	movs	r3, #1
   3459c:	462a      	mov	r2, r5
   3459e:	f363 0007 	bfi	r0, r3, #0, #8
   345a2:	4919      	ldr	r1, [pc, #100]	; (34608 <dfu_target_mcuboot_done+0x90>)
   345a4:	f364 108f 	bfi	r0, r4, #6, #10
			return err;
		}

		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   345a8:	f010 f8bd 	bl	44726 <log_string_sync>
			reset_flash_context();
   345ac:	f7ff ff58 	bl	34460 <reset_flash_context>
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	reset_flash_context();
	return err;
}
   345b0:	4628      	mov	r0, r5
   345b2:	bd38      	pop	{r3, r4, r5, pc}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   345b4:	f7f0 ff20 	bl	253f8 <boot_request_upgrade>
		if (err != 0) {
   345b8:	4605      	mov	r5, r0
			LOG_ERR("boot_request_upgrade error %d", err);
   345ba:	f04f 0000 	mov.w	r0, #0
		if (err != 0) {
   345be:	b13d      	cbz	r5, 345d0 <dfu_target_mcuboot_done+0x58>
			LOG_ERR("boot_request_upgrade error %d", err);
   345c0:	2301      	movs	r3, #1
   345c2:	f363 0007 	bfi	r0, r3, #0, #8
   345c6:	f364 108f 	bfi	r0, r4, #6, #10
   345ca:	462a      	mov	r2, r5
   345cc:	490f      	ldr	r1, [pc, #60]	; (3460c <dfu_target_mcuboot_done+0x94>)
   345ce:	e7eb      	b.n	345a8 <dfu_target_mcuboot_done+0x30>
		LOG_INF("MCUBoot image upgrade scheduled. Reset the device to "
   345d0:	2303      	movs	r3, #3
   345d2:	490f      	ldr	r1, [pc, #60]	; (34610 <dfu_target_mcuboot_done+0x98>)
   345d4:	f363 0007 	bfi	r0, r3, #0, #8
   345d8:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_INF("MCUBoot image upgrade aborted.");
   345dc:	f010 f8a3 	bl	44726 <log_string_sync>
	return err;
   345e0:	2500      	movs	r5, #0
	reset_flash_context();
   345e2:	f7ff ff3d 	bl	34460 <reset_flash_context>
	return err;
   345e6:	e7e3      	b.n	345b0 <dfu_target_mcuboot_done+0x38>
		LOG_INF("MCUBoot image upgrade aborted.");
   345e8:	f04f 0000 	mov.w	r0, #0
   345ec:	2303      	movs	r3, #3
   345ee:	f363 0007 	bfi	r0, r3, #0, #8
   345f2:	f364 108f 	bfi	r0, r4, #6, #10
   345f6:	4907      	ldr	r1, [pc, #28]	; (34614 <dfu_target_mcuboot_done+0x9c>)
   345f8:	e7f0      	b.n	345dc <dfu_target_mcuboot_done+0x64>
   345fa:	bf00      	nop
   345fc:	000497f8 	.word	0x000497f8
   34600:	00049788 	.word	0x00049788
   34604:	200258fc 	.word	0x200258fc
   34608:	000518ed 	.word	0x000518ed
   3460c:	0005182b 	.word	0x0005182b
   34610:	00051849 	.word	0x00051849
   34614:	00051884 	.word	0x00051884

00034618 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   34618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3461c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   3461e:	4c21      	ldr	r4, [pc, #132]	; (346a4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   34620:	4e21      	ldr	r6, [pc, #132]	; (346a8 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   34622:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   34626:	f8df 9088 	ldr.w	r9, [pc, #136]	; 346b0 <check_ext_api_requests+0x98>
{
   3462a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   3462c:	45a8      	cmp	r8, r5
   3462e:	d803      	bhi.n	34638 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   34630:	2000      	movs	r0, #0
   34632:	b005      	add	sp, #20
   34634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   34638:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3463a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   3463e:	681f      	ldr	r7, [r3, #0]
   34640:	ab01      	add	r3, sp, #4
   34642:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   34646:	220c      	movs	r2, #12
   34648:	4619      	mov	r1, r3
   3464a:	4638      	mov	r0, r7
   3464c:	f013 fd8e 	bl	4816c <memcmp>
   34650:	b990      	cbnz	r0, 34678 <check_ext_api_requests+0x60>
   34652:	b18f      	cbz	r7, 34678 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   34654:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   34656:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   34658:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   3465a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   3465c:	4291      	cmp	r1, r2
   3465e:	d10b      	bne.n	34678 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   34660:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   34662:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   34664:	4291      	cmp	r1, r2
   34666:	d807      	bhi.n	34678 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   34668:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   3466a:	4291      	cmp	r1, r2
   3466c:	d904      	bls.n	34678 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   3466e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   34670:	695b      	ldr	r3, [r3, #20]
   34672:	ea32 0303 	bics.w	r3, r2, r3
   34676:	d00a      	beq.n	3468e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   34678:	6a27      	ldr	r7, [r4, #32]
   3467a:	b167      	cbz	r7, 34696 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   3467c:	480b      	ldr	r0, [pc, #44]	; (346ac <check_ext_api_requests+0x94>)
   3467e:	f00f fe27 	bl	442d0 <printk>
			k_panic();
   34682:	4040      	eors	r0, r0
   34684:	f380 8811 	msr	BASEPRI, r0
   34688:	f04f 0004 	mov.w	r0, #4
   3468c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   3468e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   34690:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   34692:	441c      	add	r4, r3
   34694:	e7ca      	b.n	3462c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   34696:	4648      	mov	r0, r9
   34698:	f00f fe1a 	bl	442d0 <printk>
			*ext_api_req->ext_api = NULL;
   3469c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3469e:	601f      	str	r7, [r3, #0]
   346a0:	e7f5      	b.n	3468e <check_ext_api_requests+0x76>
   346a2:	bf00      	nop
   346a4:	0001c43c 	.word	0x0001c43c
   346a8:	00049958 	.word	0x00049958
   346ac:	00051944 	.word	0x00051944
   346b0:	0005196d 	.word	0x0005196d

000346b4 <sensor_sim_channel_get>:

static int sensor_sim_channel_get(const struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   346b4:	b538      	push	{r3, r4, r5, lr}
   346b6:	4614      	mov	r4, r2
	switch (chan) {
   346b8:	2910      	cmp	r1, #16
   346ba:	d82f      	bhi.n	3471c <sensor_sim_channel_get+0x68>
   346bc:	e8df f001 	tbb	[pc, r1]
   346c0:	18140d09 	.word	0x18140d09
   346c4:	2e2e2e2e 	.word	0x2e2e2e2e
   346c8:	2e2e2e2e 	.word	0x2e2e2e2e
   346cc:	2e2c282e 	.word	0x2e2c282e
   346d0:	2a          	.byte	0x2a
   346d1:	00          	.byte	0x00
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   346d2:	4b14      	ldr	r3, [pc, #80]	; (34724 <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   346d4:	e9d3 0100 	ldrd	r0, r1, [r3]
   346d8:	e002      	b.n	346e0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   346da:	4b12      	ldr	r3, [pc, #72]	; (34724 <sensor_sim_channel_get+0x70>)
   346dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   346e0:	f7e9 fd52 	bl	1e188 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   346e4:	2000      	movs	r0, #0
}
   346e6:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   346e8:	4b0e      	ldr	r3, [pc, #56]	; (34724 <sensor_sim_channel_get+0x70>)
   346ea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   346ee:	e7f7      	b.n	346e0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   346f0:	4d0c      	ldr	r5, [pc, #48]	; (34724 <sensor_sim_channel_get+0x70>)
   346f2:	e9d5 0100 	ldrd	r0, r1, [r5]
   346f6:	f7e9 fd47 	bl	1e188 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   346fa:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   346fe:	f104 0208 	add.w	r2, r4, #8
   34702:	f7e9 fd41 	bl	1e188 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   34706:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   3470a:	f104 0210 	add.w	r2, r4, #16
   3470e:	e7e7      	b.n	346e0 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   34710:	4b05      	ldr	r3, [pc, #20]	; (34728 <sensor_sim_channel_get+0x74>)
   34712:	e7df      	b.n	346d4 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   34714:	4b05      	ldr	r3, [pc, #20]	; (3472c <sensor_sim_channel_get+0x78>)
   34716:	e7dd      	b.n	346d4 <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   34718:	4b05      	ldr	r3, [pc, #20]	; (34730 <sensor_sim_channel_get+0x7c>)
   3471a:	e7db      	b.n	346d4 <sensor_sim_channel_get+0x20>
		return -ENOTSUP;
   3471c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   34720:	e7e1      	b.n	346e6 <sensor_sim_channel_get+0x32>
   34722:	bf00      	nop
   34724:	20023a20 	.word	0x20023a20
   34728:	20023d48 	.word	0x20023d48
   3472c:	20023a38 	.word	0x20023a38
   34730:	20023a40 	.word	0x20023a40

00034734 <sensor_sim_trigger_set>:
{
   34734:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->data;
   34736:	68c3      	ldr	r3, [r0, #12]
	switch (trig->type) {
   34738:	8808      	ldrh	r0, [r1, #0]
   3473a:	2801      	cmp	r0, #1
   3473c:	d104      	bne.n	34748 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   3473e:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   34740:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   34742:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   34744:	2000      	movs	r0, #0
}
   34746:	bd08      	pop	{r3, pc}
		LOG_ERR("Unsupported sensor trigger");
   34748:	2301      	movs	r3, #1
   3474a:	f04f 0000 	mov.w	r0, #0
   3474e:	4a07      	ldr	r2, [pc, #28]	; (3476c <sensor_sim_trigger_set+0x38>)
   34750:	f363 0007 	bfi	r0, r3, #0, #8
   34754:	4b06      	ldr	r3, [pc, #24]	; (34770 <sensor_sim_trigger_set+0x3c>)
   34756:	4907      	ldr	r1, [pc, #28]	; (34774 <sensor_sim_trigger_set+0x40>)
   34758:	1a9b      	subs	r3, r3, r2
   3475a:	08db      	lsrs	r3, r3, #3
   3475c:	f363 108f 	bfi	r0, r3, #6, #10
   34760:	f00f ffe1 	bl	44726 <log_string_sync>
	return ret;
   34764:	f06f 0085 	mvn.w	r0, #133	; 0x85
   34768:	e7ed      	b.n	34746 <sensor_sim_trigger_set+0x12>
   3476a:	bf00      	nop
   3476c:	00049788 	.word	0x00049788
   34770:	000498b8 	.word	0x000498b8
   34774:	000519a0 	.word	0x000519a0

00034778 <generate_sine.constprop.2>:
static double generate_sine(double offset, double amplitude)
   34778:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3477a:	f013 fc30 	bl	47fde <z_impl_k_uptime_ticks>
   3477e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   34782:	fba0 2304 	umull	r2, r3, r0, r4
   34786:	fb04 3301 	mla	r3, r4, r1, r3
   3478a:	0bd0      	lsrs	r0, r2, #15
   3478c:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return offset + amplitude * sin(time % 65535);
   34790:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34794:	fbb0 f3f3 	udiv	r3, r0, r3
   34798:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
   3479c:	1ac0      	subs	r0, r0, r3
   3479e:	f7e7 ff91 	bl	1c6c4 <__aeabi_ui2d>
   347a2:	ec41 0b10 	vmov	d0, r0, r1
   347a6:	f7e9 fdd7 	bl	1e358 <sin>
   347aa:	2200      	movs	r2, #0
   347ac:	4b04      	ldr	r3, [pc, #16]	; (347c0 <generate_sine.constprop.2+0x48>)
   347ae:	ec51 0b10 	vmov	r0, r1, d0
   347b2:	f7e8 f801 	bl	1c7b8 <__aeabi_dmul>
   347b6:	2200      	movs	r2, #0
   347b8:	2300      	movs	r3, #0
   347ba:	f7e7 fe47 	bl	1c44c <__adddf3>
}
   347be:	bd10      	pop	{r4, pc}
   347c0:	40340000 	.word	0x40340000

000347c4 <sensor_sim_init>:
{
   347c4:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->data;
   347c6:	68c5      	ldr	r5, [r0, #12]
{
   347c8:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   347ca:	2200      	movs	r2, #0
   347cc:	2300      	movs	r3, #0
   347ce:	2400      	movs	r4, #0
   347d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   347d4:	f06f 0305 	mvn.w	r3, #5
   347d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   347dc:	f105 0138 	add.w	r1, r5, #56	; 0x38
   347e0:	e9cd 3403 	strd	r3, r4, [sp, #12]
   347e4:	9000      	str	r0, [sp, #0]
   347e6:	4b07      	ldr	r3, [pc, #28]	; (34804 <sensor_sim_init+0x40>)
   347e8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   347ec:	f505 700e 	add.w	r0, r5, #568	; 0x238
   347f0:	f00c f9a6 	bl	40b40 <z_impl_k_thread_create>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   347f4:	f7f2 fd4a 	bl	2728c <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   347f8:	f00e f80c 	bl	42814 <srand>
}
   347fc:	4620      	mov	r0, r4
   347fe:	b009      	add	sp, #36	; 0x24
   34800:	bd30      	pop	{r4, r5, pc}
   34802:	bf00      	nop
   34804:	00047cef 	.word	0x00047cef

00034808 <gps_priority_set.isra.3>:
{
	k_delayed_work_cancel(&drv_data->timeout_work);
	k_delayed_work_cancel(&drv_data->blocked_work);
}

static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   34808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	int retval;
	nrf_gnss_delete_mask_t delete_mask = 0;
   3480a:	2300      	movs	r3, #0
static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   3480c:	4604      	mov	r4, r0
	nrf_gnss_delete_mask_t delete_mask = 0;
   3480e:	9303      	str	r3, [sp, #12]

	if (enable) {
   34810:	6800      	ldr	r0, [r0, #0]
   34812:	2900      	cmp	r1, #0
   34814:	d033      	beq.n	3487e <gps_priority_set.isra.3+0x76>
		retval = nrf_setsockopt(drv_data->socket,
   34816:	9300      	str	r3, [sp, #0]
   34818:	220a      	movs	r2, #10
   3481a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3481e:	f007 fe03 	bl	3c428 <nrf_setsockopt>
					NRF_SOL_GNSS,
					NRF_SO_GNSS_ENABLE_PRIORITY, NULL, 0);
		if (retval != 0) {
   34822:	b118      	cbz	r0, 3482c <gps_priority_set.isra.3+0x24>
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));
	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
		return -EIO;
   34824:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   34828:	b004      	add	sp, #16
   3482a:	bd10      	pop	{r4, pc}
		LOG_DBG("GPS priority enabled");
   3482c:	2304      	movs	r3, #4
   3482e:	f04f 0000 	mov.w	r0, #0
   34832:	4a1d      	ldr	r2, [pc, #116]	; (348a8 <gps_priority_set.isra.3+0xa0>)
   34834:	f363 0007 	bfi	r0, r3, #0, #8
   34838:	4b1c      	ldr	r3, [pc, #112]	; (348ac <gps_priority_set.isra.3+0xa4>)
   3483a:	491d      	ldr	r1, [pc, #116]	; (348b0 <gps_priority_set.isra.3+0xa8>)
   3483c:	1a9b      	subs	r3, r3, r2
   3483e:	08db      	lsrs	r3, r3, #3
   34840:	4a1c      	ldr	r2, [pc, #112]	; (348b4 <gps_priority_set.isra.3+0xac>)
   34842:	f363 108f 	bfi	r0, r3, #6, #10
		LOG_DBG("GPS priority disabled");
   34846:	f00f ff6e 	bl	44726 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   3484a:	2304      	movs	r3, #4
   3484c:	2207      	movs	r2, #7
   3484e:	9300      	str	r3, [sp, #0]
   34850:	f44f 7101 	mov.w	r1, #516	; 0x204
   34854:	ab03      	add	r3, sp, #12
   34856:	6820      	ldr	r0, [r4, #0]
   34858:	f007 fde6 	bl	3c428 <nrf_setsockopt>
	if (retval != 0) {
   3485c:	2800      	cmp	r0, #0
   3485e:	d0e3      	beq.n	34828 <gps_priority_set.isra.3+0x20>
		LOG_ERR("Failed to start GPS");
   34860:	2301      	movs	r3, #1
   34862:	f04f 0000 	mov.w	r0, #0
   34866:	4a10      	ldr	r2, [pc, #64]	; (348a8 <gps_priority_set.isra.3+0xa0>)
   34868:	f363 0007 	bfi	r0, r3, #0, #8
   3486c:	4b0f      	ldr	r3, [pc, #60]	; (348ac <gps_priority_set.isra.3+0xa4>)
   3486e:	4912      	ldr	r1, [pc, #72]	; (348b8 <gps_priority_set.isra.3+0xb0>)
   34870:	1a9b      	subs	r3, r3, r2
   34872:	08db      	lsrs	r3, r3, #3
   34874:	f363 108f 	bfi	r0, r3, #6, #10
   34878:	f00f ff55 	bl	44726 <log_string_sync>
   3487c:	e7d2      	b.n	34824 <gps_priority_set.isra.3+0x1c>
		retval = nrf_setsockopt(drv_data->socket,
   3487e:	9100      	str	r1, [sp, #0]
   34880:	460b      	mov	r3, r1
   34882:	220b      	movs	r2, #11
   34884:	f44f 7101 	mov.w	r1, #516	; 0x204
   34888:	f007 fdce 	bl	3c428 <nrf_setsockopt>
		if (retval != 0) {
   3488c:	2800      	cmp	r0, #0
   3488e:	d1c9      	bne.n	34824 <gps_priority_set.isra.3+0x1c>
		LOG_DBG("GPS priority disabled");
   34890:	2304      	movs	r3, #4
   34892:	4a05      	ldr	r2, [pc, #20]	; (348a8 <gps_priority_set.isra.3+0xa0>)
   34894:	f363 0007 	bfi	r0, r3, #0, #8
   34898:	4b04      	ldr	r3, [pc, #16]	; (348ac <gps_priority_set.isra.3+0xa4>)
   3489a:	4908      	ldr	r1, [pc, #32]	; (348bc <gps_priority_set.isra.3+0xb4>)
   3489c:	1a9b      	subs	r3, r3, r2
   3489e:	08db      	lsrs	r3, r3, #3
   348a0:	f363 108f 	bfi	r0, r3, #6, #10
   348a4:	4a03      	ldr	r2, [pc, #12]	; (348b4 <gps_priority_set.isra.3+0xac>)
   348a6:	e7ce      	b.n	34846 <gps_priority_set.isra.3+0x3e>
   348a8:	00049788 	.word	0x00049788
   348ac:	00049870 	.word	0x00049870
   348b0:	00051ab6 	.word	0x00051ab6
   348b4:	000519e8 	.word	0x000519e8
   348b8:	00051ae9 	.word	0x00051ae9
   348bc:	00051acf 	.word	0x00051acf

000348c0 <blocked_work_fn>:

	notify_event(dev, &evt);
}

static void blocked_work_fn(struct k_work *work)
{
   348c0:	b508      	push	{r3, lr}
	int retval;
	struct gps_drv_data *drv_data =
		CONTAINER_OF(work, struct gps_drv_data, blocked_work);

	retval = gps_priority_set(drv_data, true);
   348c2:	2101      	movs	r1, #1
   348c4:	f6a0 104c 	subw	r0, r0, #2380	; 0x94c
   348c8:	f7ff ff9e 	bl	34808 <gps_priority_set.isra.3>
	if (retval != 0) {
   348cc:	4602      	mov	r2, r0
   348ce:	b178      	cbz	r0, 348f0 <blocked_work_fn+0x30>
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   348d0:	2301      	movs	r3, #1
   348d2:	f04f 0000 	mov.w	r0, #0
   348d6:	4907      	ldr	r1, [pc, #28]	; (348f4 <blocked_work_fn+0x34>)
   348d8:	f363 0007 	bfi	r0, r3, #0, #8
   348dc:	4b06      	ldr	r3, [pc, #24]	; (348f8 <blocked_work_fn+0x38>)
   348de:	1a5b      	subs	r3, r3, r1
   348e0:	08db      	lsrs	r3, r3, #3
   348e2:	f363 108f 	bfi	r0, r3, #6, #10
   348e6:	4905      	ldr	r1, [pc, #20]	; (348fc <blocked_work_fn+0x3c>)
	}
}
   348e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   348ec:	f00f bf1b 	b.w	44726 <log_string_sync>
}
   348f0:	bd08      	pop	{r3, pc}
   348f2:	bf00      	nop
   348f4:	00049788 	.word	0x00049788
   348f8:	00049870 	.word	0x00049870
   348fc:	00051a90 	.word	0x00051a90

00034900 <open_socket.isra.4>:
static int open_socket(struct gps_drv_data *drv_data)
   34900:	b510      	push	{r4, lr}
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   34902:	f44f 7201 	mov.w	r2, #516	; 0x204
static int open_socket(struct gps_drv_data *drv_data)
   34906:	4604      	mov	r4, r0
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   34908:	2102      	movs	r1, #2
   3490a:	2001      	movs	r0, #1
   3490c:	f007 fca4 	bl	3c258 <nrf_socket>
   34910:	4a13      	ldr	r2, [pc, #76]	; (34960 <open_socket.isra.4+0x60>)
   34912:	4914      	ldr	r1, [pc, #80]	; (34964 <open_socket.isra.4+0x64>)
	if (drv_data->socket >= 0) {
   34914:	2800      	cmp	r0, #0
   34916:	eba2 0201 	sub.w	r2, r2, r1
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   3491a:	4603      	mov	r3, r0
   3491c:	6020      	str	r0, [r4, #0]
	if (drv_data->socket >= 0) {
   3491e:	f3c2 02c9 	ubfx	r2, r2, #3, #10
   34922:	db0c      	blt.n	3493e <open_socket.isra.4+0x3e>
		LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   34924:	2104      	movs	r1, #4
   34926:	f04f 0000 	mov.w	r0, #0
   3492a:	f361 0007 	bfi	r0, r1, #0, #8
   3492e:	f362 108f 	bfi	r0, r2, #6, #10
   34932:	490d      	ldr	r1, [pc, #52]	; (34968 <open_socket.isra.4+0x68>)
   34934:	4a0d      	ldr	r2, [pc, #52]	; (3496c <open_socket.isra.4+0x6c>)
   34936:	f00f fef6 	bl	44726 <log_string_sync>
	return 0;
   3493a:	2000      	movs	r0, #0
}
   3493c:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not initialize socket, error: %d)",
   3493e:	2301      	movs	r3, #1
   34940:	f04f 0400 	mov.w	r4, #0
   34944:	f363 0407 	bfi	r4, r3, #0, #8
   34948:	f362 148f 	bfi	r4, r2, #6, #10
   3494c:	f011 f84a 	bl	459e4 <__errno>
   34950:	4907      	ldr	r1, [pc, #28]	; (34970 <open_socket.isra.4+0x70>)
   34952:	6802      	ldr	r2, [r0, #0]
   34954:	4620      	mov	r0, r4
   34956:	f00f fee6 	bl	44726 <log_string_sync>
		return -EIO;
   3495a:	f06f 0004 	mvn.w	r0, #4
   3495e:	e7ed      	b.n	3493c <open_socket.isra.4+0x3c>
   34960:	00049870 	.word	0x00049870
   34964:	00049788 	.word	0x00049788
   34968:	00051dae 	.word	0x00051dae
   3496c:	000519dc 	.word	0x000519dc
   34970:	00051dcd 	.word	0x00051dcd

00034974 <agps_write>:

static int agps_write(const struct device *dev, enum gps_agps_type type,
		      void *data, size_t data_len)
{
   34974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   34976:	460c      	mov	r4, r1
   34978:	4611      	mov	r1, r2
   3497a:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   3497c:	4b1c      	ldr	r3, [pc, #112]	; (349f0 <agps_write+0x7c>)
	struct gps_drv_data *drv_data = dev->data;
   3497e:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   34980:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   34984:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   34988:	2302      	movs	r3, #2
   3498a:	9301      	str	r3, [sp, #4]
   3498c:	f10d 030e 	add.w	r3, sp, #14
   34990:	9300      	str	r3, [sp, #0]
   34992:	6a40      	ldr	r0, [r0, #36]	; 0x24
   34994:	2300      	movs	r3, #0
   34996:	f007 fc7f 	bl	3c298 <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   3499a:	4b16      	ldr	r3, [pc, #88]	; (349f4 <agps_write+0x80>)
   3499c:	4a16      	ldr	r2, [pc, #88]	; (349f8 <agps_write+0x84>)
   3499e:	2800      	cmp	r0, #0
   349a0:	eba3 0302 	sub.w	r3, r3, r2
   349a4:	f3c3 03c9 	ubfx	r3, r3, #3, #10
   349a8:	da13      	bge.n	349d2 <agps_write+0x5e>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   349aa:	2201      	movs	r2, #1
   349ac:	f04f 0400 	mov.w	r4, #0
   349b0:	f362 0407 	bfi	r4, r2, #0, #8
   349b4:	f363 148f 	bfi	r4, r3, #6, #10
   349b8:	f011 f814 	bl	459e4 <__errno>
   349bc:	490f      	ldr	r1, [pc, #60]	; (349fc <agps_write+0x88>)
   349be:	6802      	ldr	r2, [r0, #0]
   349c0:	4620      	mov	r0, r4
   349c2:	f00f feb0 	bl	44726 <log_string_sync>
		return -errno;
   349c6:	f011 f80d 	bl	459e4 <__errno>
   349ca:	6800      	ldr	r0, [r0, #0]
   349cc:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   349ce:	b004      	add	sp, #16
   349d0:	bd10      	pop	{r4, pc}
	LOG_DBG("Sent A-GPS data to modem, type: %d", type);
   349d2:	2204      	movs	r2, #4
   349d4:	f04f 0000 	mov.w	r0, #0
   349d8:	f362 0007 	bfi	r0, r2, #0, #8
   349dc:	f363 108f 	bfi	r0, r3, #6, #10
   349e0:	4a07      	ldr	r2, [pc, #28]	; (34a00 <agps_write+0x8c>)
   349e2:	4623      	mov	r3, r4
   349e4:	4907      	ldr	r1, [pc, #28]	; (34a04 <agps_write+0x90>)
   349e6:	f00f fe9e 	bl	44726 <log_string_sync>
	return 0;
   349ea:	2000      	movs	r0, #0
   349ec:	e7ef      	b.n	349ce <agps_write+0x5a>
   349ee:	bf00      	nop
   349f0:	0004aa34 	.word	0x0004aa34
   349f4:	00049870 	.word	0x00049870
   349f8:	00049788 	.word	0x00049788
   349fc:	00051a3b 	.word	0x00051a3b
   34a00:	00051a30 	.word	0x00051a30
   34a04:	00051a69 	.word	0x00051a69

00034a08 <init>:

static int init(const struct device *dev, gps_event_handler_t handler)
{
   34a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->data;
   34a0c:	68c6      	ldr	r6, [r0, #12]
{
   34a0e:	b089      	sub	sp, #36	; 0x24
   34a10:	4607      	mov	r7, r0
	int err;

	if (atomic_get(&drv_data->is_init)) {
   34a12:	f106 0918 	add.w	r9, r6, #24
   34a16:	e8d9 3faf 	lda	r3, [r9]
   34a1a:	4d53      	ldr	r5, [pc, #332]	; (34b68 <init+0x160>)
   34a1c:	4a53      	ldr	r2, [pc, #332]	; (34b6c <init+0x164>)
   34a1e:	1aad      	subs	r5, r5, r2
   34a20:	f3c5 05c9 	ubfx	r5, r5, #3, #10
   34a24:	b17b      	cbz	r3, 34a46 <init+0x3e>
		LOG_WRN("GPS is already initialized");
   34a26:	2302      	movs	r3, #2
   34a28:	f04f 0000 	mov.w	r0, #0
   34a2c:	f363 0007 	bfi	r0, r3, #0, #8
   34a30:	f365 108f 	bfi	r0, r5, #6, #10
   34a34:	494e      	ldr	r1, [pc, #312]	; (34b70 <init+0x168>)
   34a36:	f00f fe76 	bl	44726 <log_string_sync>

		return -EALREADY;
   34a3a:	f06f 0477 	mvn.w	r4, #119	; 0x77
	}

	atomic_set(&drv_data->is_init, 1);

	return 0;
}
   34a3e:	4620      	mov	r0, r4
   34a40:	b009      	add	sp, #36	; 0x24
   34a42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (handler == NULL) {
   34a46:	b961      	cbnz	r1, 34a62 <init+0x5a>
		LOG_ERR("No event handler provided");
   34a48:	2301      	movs	r3, #1
   34a4a:	f04f 0000 	mov.w	r0, #0
   34a4e:	f363 0007 	bfi	r0, r3, #0, #8
   34a52:	f365 108f 	bfi	r0, r5, #6, #10
   34a56:	4947      	ldr	r1, [pc, #284]	; (34b74 <init+0x16c>)
   34a58:	f00f fe65 	bl	44726 <log_string_sync>
		return -EINVAL;
   34a5c:	f06f 0415 	mvn.w	r4, #21
   34a60:	e7ed      	b.n	34a3e <init+0x36>
	drv_data->handler = handler;
   34a62:	6071      	str	r1, [r6, #4]
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   34a64:	461a      	mov	r2, r3
   34a66:	4619      	mov	r1, r3
   34a68:	4843      	ldr	r0, [pc, #268]	; (34b78 <init+0x170>)
   34a6a:	f7f7 ff47 	bl	2c8fc <at_cmd_write>
	if (err) {
   34a6e:	4604      	mov	r4, r0
   34a70:	b158      	cbz	r0, 34a8a <init+0x82>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   34a72:	f04f 0000 	mov.w	r0, #0
   34a76:	2301      	movs	r3, #1
   34a78:	4622      	mov	r2, r4
   34a7a:	f363 0007 	bfi	r0, r3, #0, #8
   34a7e:	493f      	ldr	r1, [pc, #252]	; (34b7c <init+0x174>)
   34a80:	f365 108f 	bfi	r0, r5, #6, #10
		LOG_ERR("Could not configure COEX0, error: %d", err);
   34a84:	f00f fe4f 	bl	44726 <log_string_sync>
		return err;
   34a88:	e7d9      	b.n	34a3e <init+0x36>
	LOG_DBG("MAGPIO set: %s",
   34a8a:	2304      	movs	r3, #4
   34a8c:	f04f 0800 	mov.w	r8, #0
   34a90:	4839      	ldr	r0, [pc, #228]	; (34b78 <init+0x170>)
   34a92:	f363 0807 	bfi	r8, r3, #0, #8
   34a96:	f00f fe59 	bl	4474c <log_strdup>
   34a9a:	f365 188f 	bfi	r8, r5, #6, #10
   34a9e:	4603      	mov	r3, r0
   34aa0:	4a37      	ldr	r2, [pc, #220]	; (34b80 <init+0x178>)
   34aa2:	4938      	ldr	r1, [pc, #224]	; (34b84 <init+0x17c>)
   34aa4:	4640      	mov	r0, r8
   34aa6:	f00f fe3e 	bl	44726 <log_string_sync>
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   34aaa:	4623      	mov	r3, r4
   34aac:	4622      	mov	r2, r4
   34aae:	4621      	mov	r1, r4
   34ab0:	4835      	ldr	r0, [pc, #212]	; (34b88 <init+0x180>)
   34ab2:	f7f7 ff23 	bl	2c8fc <at_cmd_write>
	if (err) {
   34ab6:	4604      	mov	r4, r0
   34ab8:	b148      	cbz	r0, 34ace <init+0xc6>
		LOG_ERR("Could not configure COEX0, error: %d", err);
   34aba:	f04f 0000 	mov.w	r0, #0
   34abe:	2301      	movs	r3, #1
   34ac0:	f363 0007 	bfi	r0, r3, #0, #8
   34ac4:	f365 108f 	bfi	r0, r5, #6, #10
   34ac8:	4622      	mov	r2, r4
   34aca:	4930      	ldr	r1, [pc, #192]	; (34b8c <init+0x184>)
   34acc:	e7da      	b.n	34a84 <init+0x7c>
	LOG_DBG("COEX0 set: %s",
   34ace:	2304      	movs	r3, #4
   34ad0:	f04f 0800 	mov.w	r8, #0
   34ad4:	482c      	ldr	r0, [pc, #176]	; (34b88 <init+0x180>)
   34ad6:	f363 0807 	bfi	r8, r3, #0, #8
   34ada:	f00f fe37 	bl	4474c <log_strdup>
   34ade:	f365 188f 	bfi	r8, r5, #6, #10
   34ae2:	4603      	mov	r3, r0
   34ae4:	4a26      	ldr	r2, [pc, #152]	; (34b80 <init+0x178>)
   34ae6:	492a      	ldr	r1, [pc, #168]	; (34b90 <init+0x188>)
   34ae8:	4640      	mov	r0, r8
   34aea:	f00f fe1c 	bl	44726 <log_string_sync>
	if (drv_data->socket < 0) {
   34aee:	6a73      	ldr	r3, [r6, #36]	; 0x24
   34af0:	2b00      	cmp	r3, #0
   34af2:	db30      	blt.n	34b56 <init+0x14e>
	k_delayed_work_init(&drv_data->stop_work, stop_work_fn);
   34af4:	f506 6011 	add.w	r0, r6, #2320	; 0x910
   34af8:	4926      	ldr	r1, [pc, #152]	; (34b94 <init+0x18c>)
   34afa:	f013 fa64 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->timeout_work, timeout_work_fn);
   34afe:	f506 6014 	add.w	r0, r6, #2368	; 0x940
   34b02:	4925      	ldr	r1, [pc, #148]	; (34b98 <init+0x190>)
   34b04:	f013 fa5f 	bl	47fc6 <k_delayed_work_init>
	k_delayed_work_init(&drv_data->blocked_work, blocked_work_fn);
   34b08:	4924      	ldr	r1, [pc, #144]	; (34b9c <init+0x194>)
   34b0a:	f506 6017 	add.w	r0, r6, #2416	; 0x970
   34b0e:	f013 fa5a 	bl	47fc6 <k_delayed_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   34b12:	2201      	movs	r2, #1
   34b14:	2100      	movs	r1, #0
   34b16:	f606 00f4 	addw	r0, r6, #2292	; 0x8f4
   34b1a:	f013 f9db 	bl	47ed4 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->data;
   34b1e:	68fd      	ldr	r5, [r7, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   34b20:	2200      	movs	r2, #0
   34b22:	2300      	movs	r3, #0
   34b24:	e9cd 2306 	strd	r2, r3, [sp, #24]
   34b28:	2300      	movs	r3, #0
   34b2a:	220a      	movs	r2, #10
   34b2c:	e9cd 3301 	strd	r3, r3, [sp, #4]
   34b30:	e9cd 2303 	strd	r2, r3, [sp, #12]
   34b34:	f105 0128 	add.w	r1, r5, #40	; 0x28
   34b38:	9700      	str	r7, [sp, #0]
   34b3a:	4b19      	ldr	r3, [pc, #100]	; (34ba0 <init+0x198>)
   34b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   34b40:	f605 0028 	addw	r0, r5, #2088	; 0x828
   34b44:	f00b fffc 	bl	40b40 <z_impl_k_thread_create>
	atomic_set(&drv_data->is_init, 1);
   34b48:	2101      	movs	r1, #1
	drv_data->thread_id = k_thread_create(
   34b4a:	f8c5 08f0 	str.w	r0, [r5, #2288]	; 0x8f0
	atomic_set(&drv_data->is_init, 1);
   34b4e:	4648      	mov	r0, r9
   34b50:	f013 f909 	bl	47d66 <atomic_set>
	return 0;
   34b54:	e773      	b.n	34a3e <init+0x36>
		int ret = open_socket(drv_data);
   34b56:	f106 0024 	add.w	r0, r6, #36	; 0x24
   34b5a:	f7ff fed1 	bl	34900 <open_socket.isra.4>
		if (ret != 0) {
   34b5e:	2800      	cmp	r0, #0
   34b60:	d0c8      	beq.n	34af4 <init+0xec>
   34b62:	4604      	mov	r4, r0
   34b64:	e76b      	b.n	34a3e <init+0x36>
   34b66:	bf00      	nop
   34b68:	00049870 	.word	0x00049870
   34b6c:	00049788 	.word	0x00049788
   34b70:	00051cd2 	.word	0x00051cd2
   34b74:	00051ced 	.word	0x00051ced
   34b78:	00051d07 	.word	0x00051d07
   34b7c:	00051d26 	.word	0x00051d26
   34b80:	00051a15 	.word	0x00051a15
   34b84:	00051d4c 	.word	0x00051d4c
   34b88:	00051d5f 	.word	0x00051d5f
   34b8c:	00051d77 	.word	0x00051d77
   34b90:	00051d9c 	.word	0x00051d9c
   34b94:	00047d1b 	.word	0x00047d1b
   34b98:	00047d41 	.word	0x00047d41
   34b9c:	000348c1 	.word	0x000348c1
   34ba0:	00034fb5 	.word	0x00034fb5

00034ba4 <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   34ba4:	2210      	movs	r2, #16
{
   34ba6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34baa:	b089      	sub	sp, #36	; 0x24
	struct gps_drv_data *drv_data = dev->data;
   34bac:	68c6      	ldr	r6, [r0, #12]
{
   34bae:	460d      	mov	r5, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   34bb0:	eb0d 0002 	add.w	r0, sp, r2
   34bb4:	2100      	movs	r1, #0
   34bb6:	f013 fb07 	bl	481c8 <memset>
   34bba:	f106 0320 	add.w	r3, r6, #32
   34bbe:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   34bc2:	2b01      	cmp	r3, #1
   34bc4:	f000 81eb 	beq.w	34f9e <start+0x3fa>
	if (atomic_get(&drv_data->is_active)) {
   34bc8:	f106 071c 	add.w	r7, r6, #28
   34bcc:	e8d7 3faf 	lda	r3, [r7]
   34bd0:	4cbd      	ldr	r4, [pc, #756]	; (34ec8 <start+0x324>)
   34bd2:	4abe      	ldr	r2, [pc, #760]	; (34ecc <start+0x328>)
   34bd4:	1aa4      	subs	r4, r4, r2
   34bd6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   34bda:	b193      	cbz	r3, 34c02 <start+0x5e>
		LOG_DBG("GPS is already active. Clean up before restart");
   34bdc:	2304      	movs	r3, #4
   34bde:	f04f 0000 	mov.w	r0, #0
   34be2:	f363 0007 	bfi	r0, r3, #0, #8
   34be6:	f364 108f 	bfi	r0, r4, #6, #10
   34bea:	4ab9      	ldr	r2, [pc, #740]	; (34ed0 <start+0x32c>)
   34bec:	49b9      	ldr	r1, [pc, #740]	; (34ed4 <start+0x330>)
   34bee:	f00f fd9a 	bl	44726 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   34bf2:	f506 6014 	add.w	r0, r6, #2368	; 0x940
   34bf6:	f00c f955 	bl	40ea4 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   34bfa:	f506 6017 	add.w	r0, r6, #2416	; 0x970
   34bfe:	f00c f951 	bl	40ea4 <k_delayed_work_cancel>
   34c02:	f106 0318 	add.w	r3, r6, #24
   34c06:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_init) != 1) {
   34c0a:	2b01      	cmp	r3, #1
   34c0c:	d00f      	beq.n	34c2e <start+0x8a>
		LOG_WRN("GPS must be initialized first");
   34c0e:	2302      	movs	r3, #2
   34c10:	f04f 0000 	mov.w	r0, #0
   34c14:	f363 0007 	bfi	r0, r3, #0, #8
   34c18:	f364 108f 	bfi	r0, r4, #6, #10
   34c1c:	49ae      	ldr	r1, [pc, #696]	; (34ed8 <start+0x334>)
   34c1e:	f00f fd82 	bl	44726 <log_string_sync>
		return -ENODEV;
   34c22:	f06f 0512 	mvn.w	r5, #18
}
   34c26:	4628      	mov	r0, r5
   34c28:	b009      	add	sp, #36	; 0x24
   34c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (cfg_src->nav_mode) {
   34c2e:	782a      	ldrb	r2, [r5, #0]
   34c30:	2a01      	cmp	r2, #1
   34c32:	d022      	beq.n	34c7a <start+0xd6>
   34c34:	b253      	sxtb	r3, r2
   34c36:	b163      	cbz	r3, 34c52 <start+0xae>
   34c38:	2a02      	cmp	r2, #2
   34c3a:	d022      	beq.n	34c82 <start+0xde>
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   34c3c:	2301      	movs	r3, #1
   34c3e:	f04f 0000 	mov.w	r0, #0
   34c42:	f363 0007 	bfi	r0, r3, #0, #8
   34c46:	f364 108f 	bfi	r0, r4, #6, #10
   34c4a:	49a4      	ldr	r1, [pc, #656]	; (34edc <start+0x338>)
   34c4c:	f00f fd6b 	bl	44726 <log_string_sync>
	if (err) {
   34c50:	e024      	b.n	34c9c <start+0xf8>
		cfg_dst->interval = 0;
   34c52:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   34c56:	68ab      	ldr	r3, [r5, #8]
   34c58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   34c5c:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   34c60:	7b2b      	ldrb	r3, [r5, #12]
   34c62:	b10b      	cbz	r3, 34c68 <start+0xc4>
		cfg_dst->delete_mask = 0xFF;
   34c64:	23ff      	movs	r3, #255	; 0xff
   34c66:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   34c68:	2301      	movs	r3, #1
   34c6a:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   34c6e:	786b      	ldrb	r3, [r5, #1]
   34c70:	2b01      	cmp	r3, #1
   34c72:	d126      	bne.n	34cc2 <start+0x11e>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   34c74:	f88d 301c 	strb.w	r3, [sp, #28]
   34c78:	e025      	b.n	34cc6 <start+0x122>
		cfg_dst->retry = 0;
   34c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   34c7e:	9304      	str	r3, [sp, #16]
		break;
   34c80:	e7ee      	b.n	34c60 <start+0xbc>
		if (cfg_src->interval < 10) {
   34c82:	686b      	ldr	r3, [r5, #4]
   34c84:	2b09      	cmp	r3, #9
   34c86:	d816      	bhi.n	34cb6 <start+0x112>
			LOG_ERR("Minimum periodic interval is 10 sec");
   34c88:	f04f 0000 	mov.w	r0, #0
   34c8c:	2301      	movs	r3, #1
   34c8e:	f363 0007 	bfi	r0, r3, #0, #8
   34c92:	f364 108f 	bfi	r0, r4, #6, #10
   34c96:	4992      	ldr	r1, [pc, #584]	; (34ee0 <start+0x33c>)
   34c98:	f00f fd45 	bl	44726 <log_string_sync>
		LOG_ERR("Invalid GPS configuration");
   34c9c:	2301      	movs	r3, #1
   34c9e:	f04f 0000 	mov.w	r0, #0
   34ca2:	f363 0007 	bfi	r0, r3, #0, #8
   34ca6:	f364 108f 	bfi	r0, r4, #6, #10
   34caa:	498e      	ldr	r1, [pc, #568]	; (34ee4 <start+0x340>)
   34cac:	f00f fd3b 	bl	44726 <log_string_sync>
		return err;
   34cb0:	f06f 0515 	mvn.w	r5, #21
   34cb4:	e7b7      	b.n	34c26 <start+0x82>
		cfg_dst->retry = cfg_src->timeout;
   34cb6:	68aa      	ldr	r2, [r5, #8]
		cfg_dst->interval = cfg_src->interval;
   34cb8:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout;
   34cbc:	f8ad 2010 	strh.w	r2, [sp, #16]
		break;
   34cc0:	e7ce      	b.n	34c60 <start+0xbc>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   34cc2:	2b02      	cmp	r3, #2
   34cc4:	d0d6      	beq.n	34c74 <start+0xd0>
	cfg_dst->priority = cfg_src->priority;
   34cc6:	7b6b      	ldrb	r3, [r5, #13]
   34cc8:	f88d 301d 	strb.w	r3, [sp, #29]
	if (cfg != &drv_data->current_cfg) {
   34ccc:	f106 0308 	add.w	r3, r6, #8
   34cd0:	429d      	cmp	r5, r3
   34cd2:	d11a      	bne.n	34d0a <start+0x166>
	err = lte_lc_system_mode_get(&system_mode);
   34cd4:	f10d 000e 	add.w	r0, sp, #14
   34cd8:	f7f8 fe8e 	bl	2d9f8 <lte_lc_system_mode_get>
	if (err) {
   34cdc:	4602      	mov	r2, r0
   34cde:	b1e8      	cbz	r0, 34d1c <start+0x178>
		LOG_ERR("Could not get modem system mode, error: %d", err);
   34ce0:	2101      	movs	r1, #1
   34ce2:	f04f 0000 	mov.w	r0, #0
   34ce6:	f361 0007 	bfi	r0, r1, #0, #8
   34cea:	497f      	ldr	r1, [pc, #508]	; (34ee8 <start+0x344>)
   34cec:	f364 108f 	bfi	r0, r4, #6, #10
		LOG_ERR("Could not get modem's functional mode, error: %d",
   34cf0:	f00f fd19 	bl	44726 <log_string_sync>
		LOG_ERR("Failed to enable GPS");
   34cf4:	f04f 0000 	mov.w	r0, #0
   34cf8:	2301      	movs	r3, #1
   34cfa:	497c      	ldr	r1, [pc, #496]	; (34eec <start+0x348>)
   34cfc:	f363 0007 	bfi	r0, r3, #0, #8
   34d00:	f364 108f 	bfi	r0, r4, #6, #10
			LOG_ERR("Failed to re-init GPS service");
   34d04:	f00f fd0f 	bl	44726 <log_string_sync>
			return -EIO;
   34d08:	e09c      	b.n	34e44 <start+0x2a0>
   34d0a:	f105 0210 	add.w	r2, r5, #16
   34d0e:	f855 1b04 	ldr.w	r1, [r5], #4
   34d12:	4295      	cmp	r5, r2
   34d14:	f843 1b04 	str.w	r1, [r3], #4
   34d18:	d1f9      	bne.n	34d0e <start+0x16a>
   34d1a:	e7db      	b.n	34cd4 <start+0x130>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   34d1c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   34d20:	1eda      	subs	r2, r3, #3
   34d22:	2a02      	cmp	r2, #2
   34d24:	d920      	bls.n	34d68 <start+0x1c4>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   34d26:	2b01      	cmp	r3, #1
   34d28:	d01c      	beq.n	34d64 <start+0x1c0>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   34d2a:	2b02      	cmp	r3, #2
   34d2c:	bf14      	ite	ne
   34d2e:	2503      	movne	r5, #3
   34d30:	2505      	moveq	r5, #5
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   34d32:	2304      	movs	r3, #4
   34d34:	f04f 0000 	mov.w	r0, #0
   34d38:	f363 0007 	bfi	r0, r3, #0, #8
   34d3c:	4a6c      	ldr	r2, [pc, #432]	; (34ef0 <start+0x34c>)
   34d3e:	f364 108f 	bfi	r0, r4, #6, #10
   34d42:	496c      	ldr	r1, [pc, #432]	; (34ef4 <start+0x350>)
   34d44:	f00f fcef 	bl	44726 <log_string_sync>
		err = lte_lc_system_mode_set(new_mode);
   34d48:	4628      	mov	r0, r5
   34d4a:	f7f8 fd81 	bl	2d850 <lte_lc_system_mode_set>
		if (err) {
   34d4e:	4602      	mov	r2, r0
   34d50:	b150      	cbz	r0, 34d68 <start+0x1c4>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   34d52:	2101      	movs	r1, #1
   34d54:	f04f 0000 	mov.w	r0, #0
   34d58:	f361 0007 	bfi	r0, r1, #0, #8
   34d5c:	f364 108f 	bfi	r0, r4, #6, #10
   34d60:	4965      	ldr	r1, [pc, #404]	; (34ef8 <start+0x354>)
   34d62:	e7c5      	b.n	34cf0 <start+0x14c>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   34d64:	2504      	movs	r5, #4
   34d66:	e7e4      	b.n	34d32 <start+0x18e>
	LOG_DBG("GPS mode is enabled");
   34d68:	2304      	movs	r3, #4
   34d6a:	f04f 0000 	mov.w	r0, #0
   34d6e:	f363 0007 	bfi	r0, r3, #0, #8
   34d72:	4a5f      	ldr	r2, [pc, #380]	; (34ef0 <start+0x34c>)
   34d74:	f364 108f 	bfi	r0, r4, #6, #10
   34d78:	4960      	ldr	r1, [pc, #384]	; (34efc <start+0x358>)
   34d7a:	f00f fcd4 	bl	44726 <log_string_sync>
	err = lte_lc_func_mode_get(&functional_mode);
   34d7e:	f10d 000f 	add.w	r0, sp, #15
   34d82:	f7f8 ffe3 	bl	2dd4c <lte_lc_func_mode_get>
	if (err) {
   34d86:	4602      	mov	r2, r0
   34d88:	b140      	cbz	r0, 34d9c <start+0x1f8>
		LOG_ERR("Could not get modem's functional mode, error: %d",
   34d8a:	2101      	movs	r1, #1
   34d8c:	f04f 0000 	mov.w	r0, #0
   34d90:	f361 0007 	bfi	r0, r1, #0, #8
   34d94:	f364 108f 	bfi	r0, r4, #6, #10
   34d98:	4959      	ldr	r1, [pc, #356]	; (34f00 <start+0x35c>)
   34d9a:	e7a9      	b.n	34cf0 <start+0x14c>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   34d9c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   34da0:	2b01      	cmp	r3, #1
   34da2:	d00a      	beq.n	34dba <start+0x216>
		LOG_ERR("GPS is not supported in current functional mode");
   34da4:	2301      	movs	r3, #1
   34da6:	f04f 0000 	mov.w	r0, #0
   34daa:	f363 0007 	bfi	r0, r3, #0, #8
   34dae:	f364 108f 	bfi	r0, r4, #6, #10
   34db2:	4954      	ldr	r1, [pc, #336]	; (34f04 <start+0x360>)
   34db4:	f00f fcb7 	bl	44726 <log_string_sync>
		return -EIO;
   34db8:	e79c      	b.n	34cf4 <start+0x150>
	retval = nrf_setsockopt(drv_data->socket,
   34dba:	2502      	movs	r5, #2
		LOG_DBG("Failed to set fix retry value, "
   34dbc:	f8df a110 	ldr.w	sl, [pc, #272]	; 34ed0 <start+0x32c>
   34dc0:	f8df b158 	ldr.w	fp, [pc, #344]	; 34f1c <start+0x378>
	retval = nrf_setsockopt(drv_data->socket,
   34dc4:	9500      	str	r5, [sp, #0]
   34dc6:	ab04      	add	r3, sp, #16
   34dc8:	2202      	movs	r2, #2
   34dca:	f44f 7101 	mov.w	r1, #516	; 0x204
   34dce:	6a70      	ldr	r0, [r6, #36]	; 0x24
   34dd0:	f007 fb2a 	bl	3c428 <nrf_setsockopt>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   34dd4:	1c43      	adds	r3, r0, #1
   34dd6:	d138      	bne.n	34e4a <start+0x2a6>
   34dd8:	f010 fe04 	bl	459e4 <__errno>
   34ddc:	6803      	ldr	r3, [r0, #0]
   34dde:	2b0e      	cmp	r3, #14
   34de0:	d11f      	bne.n	34e22 <start+0x27e>
		nrf_close(drv_data->socket);
   34de2:	46b1      	mov	r9, r6
		LOG_DBG("Failed to set fix retry value, "
   34de4:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   34de8:	f043 0304 	orr.w	r3, r3, #4
   34dec:	f363 0807 	bfi	r8, r3, #0, #8
   34df0:	f364 188f 	bfi	r8, r4, #6, #10
   34df4:	4652      	mov	r2, sl
   34df6:	4659      	mov	r1, fp
   34df8:	4640      	mov	r0, r8
   34dfa:	f00f fc94 	bl	44726 <log_string_sync>
		nrf_close(drv_data->socket);
   34dfe:	f859 0f24 	ldr.w	r0, [r9, #36]!
   34e02:	f007 fa3b 	bl	3c27c <nrf_close>
		if (open_socket(drv_data) != 0) {
   34e06:	4648      	mov	r0, r9
   34e08:	f7ff fd7a 	bl	34900 <open_socket.isra.4>
   34e0c:	2800      	cmp	r0, #0
   34e0e:	d0d9      	beq.n	34dc4 <start+0x220>
			LOG_ERR("Failed to re-init GPS service");
   34e10:	f04f 0000 	mov.w	r0, #0
   34e14:	2301      	movs	r3, #1
   34e16:	f363 0007 	bfi	r0, r3, #0, #8
   34e1a:	f364 108f 	bfi	r0, r4, #6, #10
   34e1e:	493a      	ldr	r1, [pc, #232]	; (34f08 <start+0x364>)
   34e20:	e770      	b.n	34d04 <start+0x160>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   34e22:	f010 fddf 	bl	459e4 <__errno>
   34e26:	6803      	ldr	r3, [r0, #0]
   34e28:	2b09      	cmp	r3, #9
   34e2a:	d0da      	beq.n	34de2 <start+0x23e>
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   34e2c:	f04f 0000 	mov.w	r0, #0
   34e30:	2301      	movs	r3, #1
   34e32:	f363 0007 	bfi	r0, r3, #0, #8
   34e36:	f364 108f 	bfi	r0, r4, #6, #10
   34e3a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   34e3e:	4933      	ldr	r1, [pc, #204]	; (34f0c <start+0x368>)
   34e40:	f00f fc71 	bl	44726 <log_string_sync>
		return -EIO;
   34e44:	f06f 0504 	mvn.w	r5, #4
   34e48:	e6ed      	b.n	34c26 <start+0x82>
	} else if (retval != 0) {
   34e4a:	2800      	cmp	r0, #0
   34e4c:	d1ee      	bne.n	34e2c <start+0x288>
	retval = nrf_setsockopt(drv_data->socket,
   34e4e:	9500      	str	r5, [sp, #0]
   34e50:	f10d 0312 	add.w	r3, sp, #18
   34e54:	2201      	movs	r2, #1
   34e56:	f44f 7101 	mov.w	r1, #516	; 0x204
   34e5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
   34e5c:	f007 fae4 	bl	3c428 <nrf_setsockopt>
	if (retval != 0) {
   34e60:	b140      	cbz	r0, 34e74 <start+0x2d0>
		LOG_ERR("Failed to set fix interval value");
   34e62:	f04f 0000 	mov.w	r0, #0
   34e66:	2301      	movs	r3, #1
   34e68:	f363 0007 	bfi	r0, r3, #0, #8
   34e6c:	f364 108f 	bfi	r0, r4, #6, #10
   34e70:	4927      	ldr	r1, [pc, #156]	; (34f10 <start+0x36c>)
   34e72:	e747      	b.n	34d04 <start+0x160>
	retval = nrf_setsockopt(drv_data->socket,
   34e74:	9500      	str	r5, [sp, #0]
   34e76:	ab05      	add	r3, sp, #20
   34e78:	2204      	movs	r2, #4
   34e7a:	f44f 7101 	mov.w	r1, #516	; 0x204
   34e7e:	6a70      	ldr	r0, [r6, #36]	; 0x24
   34e80:	f007 fad2 	bl	3c428 <nrf_setsockopt>
	if (retval != 0) {
   34e84:	b140      	cbz	r0, 34e98 <start+0x2f4>
		LOG_ERR("Failed to set nmea mask");
   34e86:	f04f 0000 	mov.w	r0, #0
   34e8a:	2301      	movs	r3, #1
   34e8c:	f363 0007 	bfi	r0, r3, #0, #8
   34e90:	f364 108f 	bfi	r0, r4, #6, #10
   34e94:	491f      	ldr	r1, [pc, #124]	; (34f14 <start+0x370>)
   34e96:	e735      	b.n	34d04 <start+0x160>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   34e98:	f89d 301c 	ldrb.w	r3, [sp, #28]
   34e9c:	2b00      	cmp	r3, #0
   34e9e:	d03f      	beq.n	34f20 <start+0x37c>
		retval = nrf_setsockopt(drv_data->socket,
   34ea0:	2301      	movs	r3, #1
   34ea2:	9300      	str	r3, [sp, #0]
   34ea4:	2209      	movs	r2, #9
   34ea6:	ab07      	add	r3, sp, #28
   34ea8:	f44f 7101 	mov.w	r1, #516	; 0x204
   34eac:	6a70      	ldr	r0, [r6, #36]	; 0x24
   34eae:	f007 fabb 	bl	3c428 <nrf_setsockopt>
		if (retval != 0) {
   34eb2:	b3a8      	cbz	r0, 34f20 <start+0x37c>
			LOG_ERR("Failed to set GPS power mode");
   34eb4:	f04f 0000 	mov.w	r0, #0
   34eb8:	2301      	movs	r3, #1
   34eba:	f363 0007 	bfi	r0, r3, #0, #8
   34ebe:	f364 108f 	bfi	r0, r4, #6, #10
   34ec2:	4915      	ldr	r1, [pc, #84]	; (34f18 <start+0x374>)
   34ec4:	e71e      	b.n	34d04 <start+0x160>
   34ec6:	bf00      	nop
   34ec8:	00049870 	.word	0x00049870
   34ecc:	00049788 	.word	0x00049788
   34ed0:	00051a0f 	.word	0x00051a0f
   34ed4:	00051df5 	.word	0x00051df5
   34ed8:	00051e28 	.word	0x00051e28
   34edc:	00051e6a 	.word	0x00051e6a
   34ee0:	00051e46 	.word	0x00051e46
   34ee4:	00051e9a 	.word	0x00051e9a
   34ee8:	00051eb4 	.word	0x00051eb4
   34eec:	00051fb2 	.word	0x00051fb2
   34ef0:	00051a04 	.word	0x00051a04
   34ef4:	00051edf 	.word	0x00051edf
   34ef8:	00051f14 	.word	0x00051f14
   34efc:	00051f39 	.word	0x00051f39
   34f00:	00051f51 	.word	0x00051f51
   34f04:	00051f82 	.word	0x00051f82
   34f08:	0005202c 	.word	0x0005202c
   34f0c:	0005200a 	.word	0x0005200a
   34f10:	0005204a 	.word	0x0005204a
   34f14:	0005206b 	.word	0x0005206b
   34f18:	00052083 	.word	0x00052083
   34f1c:	00051fc7 	.word	0x00051fc7
	retval = nrf_setsockopt(drv_data->socket,
   34f20:	2304      	movs	r3, #4
   34f22:	9300      	str	r3, [sp, #0]
   34f24:	2207      	movs	r2, #7
   34f26:	ab06      	add	r3, sp, #24
   34f28:	f44f 7101 	mov.w	r1, #516	; 0x204
   34f2c:	6a70      	ldr	r0, [r6, #36]	; 0x24
   34f2e:	f007 fa7b 	bl	3c428 <nrf_setsockopt>
	if (retval != 0) {
   34f32:	4605      	mov	r5, r0
   34f34:	b140      	cbz	r0, 34f48 <start+0x3a4>
		LOG_ERR("Failed to start GPS");
   34f36:	f04f 0000 	mov.w	r0, #0
   34f3a:	2301      	movs	r3, #1
   34f3c:	f363 0007 	bfi	r0, r3, #0, #8
   34f40:	f364 108f 	bfi	r0, r4, #6, #10
   34f44:	4917      	ldr	r1, [pc, #92]	; (34fa4 <start+0x400>)
   34f46:	e6dd      	b.n	34d04 <start+0x160>
	if (!gps_cfg.priority) {
   34f48:	f89d 301d 	ldrb.w	r3, [sp, #29]
   34f4c:	b99b      	cbnz	r3, 34f76 <start+0x3d2>
		retval = gps_priority_set(drv_data, false);
   34f4e:	4601      	mov	r1, r0
   34f50:	f106 0024 	add.w	r0, r6, #36	; 0x24
   34f54:	f7ff fc58 	bl	34808 <gps_priority_set.isra.3>
		if (retval != 0) {
   34f58:	4680      	mov	r8, r0
   34f5a:	b160      	cbz	r0, 34f76 <start+0x3d2>
			LOG_ERR("Failed to set GPS priority, error: %d",
   34f5c:	2301      	movs	r3, #1
   34f5e:	f04f 0000 	mov.w	r0, #0
   34f62:	f363 0007 	bfi	r0, r3, #0, #8
   34f66:	f364 108f 	bfi	r0, r4, #6, #10
   34f6a:	4642      	mov	r2, r8
   34f6c:	490e      	ldr	r1, [pc, #56]	; (34fa8 <start+0x404>)
   34f6e:	f00f fbda 	bl	44726 <log_string_sync>
			return retval;
   34f72:	4645      	mov	r5, r8
   34f74:	e657      	b.n	34c26 <start+0x82>
	atomic_set(&drv_data->is_active, 1);
   34f76:	2101      	movs	r1, #1
   34f78:	4638      	mov	r0, r7
   34f7a:	f012 fef4 	bl	47d66 <atomic_set>
	z_impl_k_sem_give(sem);
   34f7e:	f606 00f4 	addw	r0, r6, #2292	; 0x8f4
   34f82:	f00b fc9b 	bl	408bc <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   34f86:	2304      	movs	r3, #4
   34f88:	f04f 0000 	mov.w	r0, #0
   34f8c:	f363 0007 	bfi	r0, r3, #0, #8
   34f90:	f364 108f 	bfi	r0, r4, #6, #10
   34f94:	4a05      	ldr	r2, [pc, #20]	; (34fac <start+0x408>)
   34f96:	4906      	ldr	r1, [pc, #24]	; (34fb0 <start+0x40c>)
   34f98:	f00f fbc5 	bl	44726 <log_string_sync>
	return retval;
   34f9c:	e643      	b.n	34c26 <start+0x82>
		return -EHOSTDOWN;
   34f9e:	f06f 0574 	mvn.w	r5, #116	; 0x74
   34fa2:	e640      	b.n	34c26 <start+0x82>
   34fa4:	00051ae9 	.word	0x00051ae9
   34fa8:	00051a90 	.word	0x00051a90
   34fac:	00051a0f 	.word	0x00051a0f
   34fb0:	000520a0 	.word	0x000520a0

00034fb4 <gps_thread>:
{
   34fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gps_drv_data *drv_data = dev->data;
   34fb8:	68c3      	ldr	r3, [r0, #12]
{
   34fba:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
   34fbe:	9006      	str	r0, [sp, #24]
	struct gps_event evt = {
   34fc0:	22c0      	movs	r2, #192	; 0xc0
   34fc2:	2100      	movs	r1, #0
   34fc4:	a810      	add	r0, sp, #64	; 0x40
	struct gps_drv_data *drv_data = dev->data;
   34fc6:	9303      	str	r3, [sp, #12]
   34fc8:	4c76      	ldr	r4, [pc, #472]	; (351a4 <gps_thread+0x1f0>)
	struct gps_event evt = {
   34fca:	f013 f8fd 	bl	481c8 <memset>
			LOG_DBG("A-GPS data update needed");
   34fce:	4b76      	ldr	r3, [pc, #472]	; (351a8 <gps_thread+0x1f4>)
   34fd0:	1ae4      	subs	r4, r4, r3
	bool has_fix = false;
   34fd2:	2300      	movs	r3, #0
	bool operation_blocked = false;
   34fd4:	461d      	mov	r5, r3
			LOG_DBG("A-GPS data update needed");
   34fd6:	f3c4 04c9 	ubfx	r4, r4, #3, #10
	bool has_fix = false;
   34fda:	9304      	str	r3, [sp, #16]
	return z_impl_k_sem_take(sem, timeout);
   34fdc:	9903      	ldr	r1, [sp, #12]
   34fde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34fe2:	f601 00f4 	addw	r0, r1, #2292	; 0x8f4
   34fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   34fea:	f00b fcab 	bl	40944 <z_impl_k_sem_take>
	notify_event(dev, &evt);
   34fee:	a910      	add	r1, sp, #64	; 0x40
   34ff0:	9806      	ldr	r0, [sp, #24]
   34ff2:	f012 fe8d 	bl	47d10 <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   34ff6:	22d8      	movs	r2, #216	; 0xd8
   34ff8:	2100      	movs	r1, #0
   34ffa:	a870      	add	r0, sp, #448	; 0x1c0
   34ffc:	f013 f8e4 	bl	481c8 <memset>
		struct gps_event evt = {0};
   35000:	22c0      	movs	r2, #192	; 0xc0
   35002:	2100      	movs	r1, #0
   35004:	a840      	add	r0, sp, #256	; 0x100
   35006:	f013 f8df 	bl	481c8 <memset>
		if (!has_fix) {
   3500a:	9b03      	ldr	r3, [sp, #12]
   3500c:	f503 6314 	add.w	r3, r3, #2368	; 0x940
   35010:	930e      	str	r3, [sp, #56]	; 0x38
   35012:	9b04      	ldr	r3, [sp, #16]
   35014:	b933      	cbnz	r3, 35024 <gps_thread+0x70>
   35016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3501a:	2300      	movs	r3, #0
   3501c:	990e      	ldr	r1, [sp, #56]	; 0x38
   3501e:	4863      	ldr	r0, [pc, #396]	; (351ac <gps_thread+0x1f8>)
   35020:	f00b feb8 	bl	40d94 <k_delayed_work_submit_to_queue>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   35024:	9803      	ldr	r0, [sp, #12]
   35026:	2300      	movs	r3, #0
   35028:	22d8      	movs	r2, #216	; 0xd8
   3502a:	a970      	add	r1, sp, #448	; 0x1c0
   3502c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   3502e:	f007 f981 	bl	3c334 <nrf_recv>
   35032:	4606      	mov	r6, r0
		k_delayed_work_cancel(&drv_data->timeout_work);
   35034:	980e      	ldr	r0, [sp, #56]	; 0x38
   35036:	f00b ff35 	bl	40ea4 <k_delayed_work_cancel>
		if (len <= 0) {
   3503a:	9b03      	ldr	r3, [sp, #12]
   3503c:	2e00      	cmp	r6, #0
   3503e:	f503 6717 	add.w	r7, r3, #2416	; 0x970
   35042:	dc70      	bgt.n	35126 <gps_thread+0x172>
   35044:	331c      	adds	r3, #28
   35046:	930f      	str	r3, [sp, #60]	; 0x3c
   35048:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3504a:	e8d3 3faf 	lda	r3, [r3]
			if (!atomic_get(&drv_data->is_active)) {
   3504e:	2b00      	cmp	r3, #0
   35050:	d0c4      	beq.n	34fdc <gps_thread+0x28>
			if (errno == EHOSTDOWN) {
   35052:	f010 fcc7 	bl	459e4 <__errno>
   35056:	6803      	ldr	r3, [r0, #0]
   35058:	2b75      	cmp	r3, #117	; 0x75
   3505a:	d14f      	bne.n	350fc <gps_thread+0x148>
				LOG_DBG("GPS host is going down, sleeping");
   3505c:	f029 033f 	bic.w	r3, r9, #63	; 0x3f
   35060:	f043 0304 	orr.w	r3, r3, #4
   35064:	f363 0907 	bfi	r9, r3, #0, #8
   35068:	f364 198f 	bfi	r9, r4, #6, #10
   3506c:	4a50      	ldr	r2, [pc, #320]	; (351b0 <gps_thread+0x1fc>)
   3506e:	4951      	ldr	r1, [pc, #324]	; (351b4 <gps_thread+0x200>)
   35070:	4648      	mov	r0, r9
   35072:	f00f fb58 	bl	44726 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   35076:	980e      	ldr	r0, [sp, #56]	; 0x38
   35078:	f00b ff14 	bl	40ea4 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   3507c:	4638      	mov	r0, r7
   3507e:	f00b ff11 	bl	40ea4 <k_delayed_work_cancel>
	return atomic_set(target, 0);
   35082:	2100      	movs	r1, #0
   35084:	980f      	ldr	r0, [sp, #60]	; 0x3c
   35086:	f012 fe6e 	bl	47d66 <atomic_set>
				atomic_set(&drv_data->is_shutdown, 1);
   3508a:	9b03      	ldr	r3, [sp, #12]
   3508c:	2101      	movs	r1, #1
   3508e:	f103 0720 	add.w	r7, r3, #32
   35092:	4638      	mov	r0, r7
   35094:	f012 fe67 	bl	47d66 <atomic_set>
				nrf_close(drv_data->socket);
   35098:	9e03      	ldr	r6, [sp, #12]
   3509a:	f856 0f24 	ldr.w	r0, [r6, #36]!
   3509e:	f007 f8ed 	bl	3c27c <nrf_close>
				bsdlib_shutdown_wait();
   350a2:	f7f6 f8fd 	bl	2b2a0 <bsdlib_shutdown_wait>
				if (open_socket(drv_data) != 0) {
   350a6:	4630      	mov	r0, r6
   350a8:	f7ff fc2a 	bl	34900 <open_socket.isra.4>
   350ac:	4601      	mov	r1, r0
   350ae:	b168      	cbz	r0, 350cc <gps_thread+0x118>
					LOG_ERR("Failed to open socket after "
   350b0:	2301      	movs	r3, #1
   350b2:	f04f 0000 	mov.w	r0, #0
   350b6:	f363 0007 	bfi	r0, r3, #0, #8
   350ba:	f364 108f 	bfi	r0, r4, #6, #10
   350be:	493e      	ldr	r1, [pc, #248]	; (351b8 <gps_thread+0x204>)
   350c0:	f00f fb31 	bl	44726 <log_string_sync>
}
   350c4:	f50d 7d27 	add.w	sp, sp, #668	; 0x29c
   350c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350cc:	4638      	mov	r0, r7
   350ce:	f012 fe4a 	bl	47d66 <atomic_set>
				LOG_DBG("GPS host available, going back to "
   350d2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   350d6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   350da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   350de:	f043 0304 	orr.w	r3, r3, #4
   350e2:	f363 0207 	bfi	r2, r3, #0, #8
   350e6:	b293      	uxth	r3, r2
   350e8:	f364 138f 	bfi	r3, r4, #6, #10
   350ec:	4a30      	ldr	r2, [pc, #192]	; (351b0 <gps_thread+0x1fc>)
   350ee:	4933      	ldr	r1, [pc, #204]	; (351bc <gps_thread+0x208>)
   350f0:	b298      	uxth	r0, r3
   350f2:	f8ad 301c 	strh.w	r3, [sp, #28]
   350f6:	f00f fb16 	bl	44726 <log_string_sync>
				goto wait;
   350fa:	e76f      	b.n	34fdc <gps_thread+0x28>
				LOG_ERR("recv() returned error: %d", len);
   350fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   35100:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   35104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   35108:	f043 0301 	orr.w	r3, r3, #1
   3510c:	f363 0207 	bfi	r2, r3, #0, #8
   35110:	b293      	uxth	r3, r2
   35112:	f364 138f 	bfi	r3, r4, #6, #10
   35116:	4632      	mov	r2, r6
   35118:	4929      	ldr	r1, [pc, #164]	; (351c0 <gps_thread+0x20c>)
   3511a:	b298      	uxth	r0, r3
   3511c:	f8ad 3020 	strh.w	r3, [sp, #32]
   35120:	f00f fb01 	bl	44726 <log_string_sync>
			continue;
   35124:	e767      	b.n	34ff6 <gps_thread+0x42>
		switch (raw_gps_data.data_id) {
   35126:	f89d 31c0 	ldrb.w	r3, [sp, #448]	; 0x1c0
   3512a:	2b02      	cmp	r3, #2
   3512c:	f000 815e 	beq.w	353ec <gps_thread+0x438>
   35130:	2b03      	cmp	r3, #3
   35132:	f000 8187 	beq.w	35444 <gps_thread+0x490>
   35136:	2b01      	cmp	r3, #1
   35138:	f47f af5d 	bne.w	34ff6 <gps_thread+0x42>
	return ((pvt->flags & NRF_GNSS_PVT_FLAG_DEADLINE_MISSED)
   3513c:	f89d 3204 	ldrb.w	r3, [sp, #516]	; 0x204
			if (has_no_time_window(&raw_gps_data.pvt) ||
   35140:	f013 0318 	ands.w	r3, r3, #24
   35144:	930e      	str	r3, [sp, #56]	; 0x38
   35146:	d03f      	beq.n	351c8 <gps_thread+0x214>
				if (operation_blocked) {
   35148:	b11d      	cbz	r5, 35152 <gps_thread+0x19e>
			has_fix = false;
   3514a:	2300      	movs	r3, #0
   3514c:	2501      	movs	r5, #1
   3514e:	9304      	str	r3, [sp, #16]
   35150:	e751      	b.n	34ff6 <gps_thread+0x42>
				LOG_DBG("Waiting for time window to operate");
   35152:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   35156:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   3515a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   3515e:	f043 0304 	orr.w	r3, r3, #4
   35162:	f363 0207 	bfi	r2, r3, #0, #8
   35166:	b293      	uxth	r3, r2
   35168:	f364 138f 	bfi	r3, r4, #6, #10
   3516c:	b298      	uxth	r0, r3
   3516e:	4a10      	ldr	r2, [pc, #64]	; (351b0 <gps_thread+0x1fc>)
   35170:	4914      	ldr	r1, [pc, #80]	; (351c4 <gps_thread+0x210>)
   35172:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   35176:	f00f fad6 	bl	44726 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   3517a:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   3517c:	a940      	add	r1, sp, #256	; 0x100
   3517e:	9806      	ldr	r0, [sp, #24]
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   35180:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				notify_event(dev, &evt);
   35184:	f012 fdc4 	bl	47d10 <notify_event>
				if (drv_data->current_cfg.priority) {
   35188:	9b03      	ldr	r3, [sp, #12]
   3518a:	7d5e      	ldrb	r6, [r3, #21]
   3518c:	2e00      	cmp	r6, #0
   3518e:	d0dc      	beq.n	3514a <gps_thread+0x196>
   35190:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   35194:	2300      	movs	r3, #0
   35196:	4639      	mov	r1, r7
   35198:	4804      	ldr	r0, [pc, #16]	; (351ac <gps_thread+0x1f8>)
   3519a:	f00b fdfb 	bl	40d94 <k_delayed_work_submit_to_queue>
			has_fix = false;
   3519e:	9504      	str	r5, [sp, #16]
				operation_blocked = true;
   351a0:	4635      	mov	r5, r6
   351a2:	e728      	b.n	34ff6 <gps_thread+0x42>
   351a4:	00049870 	.word	0x00049870
   351a8:	00049788 	.word	0x00049788
   351ac:	20024888 	.word	0x20024888
   351b0:	000519f9 	.word	0x000519f9
   351b4:	00051b27 	.word	0x00051b27
   351b8:	00051b4c 	.word	0x00051b4c
   351bc:	00051b87 	.word	0x00051b87
   351c0:	00051bbf 	.word	0x00051bbf
   351c4:	00051bd9 	.word	0x00051bd9
			} else if (operation_blocked) {
   351c8:	b1ed      	cbz	r5, 35206 <gps_thread+0x252>
				LOG_DBG("GPS has time window to operate");
   351ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   351ce:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   351d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   351d6:	f043 0304 	orr.w	r3, r3, #4
   351da:	f363 0207 	bfi	r2, r3, #0, #8
   351de:	b293      	uxth	r3, r2
   351e0:	f364 138f 	bfi	r3, r4, #6, #10
   351e4:	b298      	uxth	r0, r3
   351e6:	4ab1      	ldr	r2, [pc, #708]	; (354ac <gps_thread+0x4f8>)
   351e8:	49b1      	ldr	r1, [pc, #708]	; (354b0 <gps_thread+0x4fc>)
   351ea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
   351ee:	f00f fa9a 	bl	44726 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   351f2:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   351f4:	9806      	ldr	r0, [sp, #24]
   351f6:	a940      	add	r1, sp, #256	; 0x100
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   351f8:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
				notify_event(dev, &evt);
   351fc:	f012 fd88 	bl	47d10 <notify_event>
				k_delayed_work_cancel(&drv_data->blocked_work);
   35200:	4638      	mov	r0, r7
   35202:	f00b fe4f 	bl	40ea4 <k_delayed_work_cancel>
	dest->latitude = src->latitude;
   35206:	e9dd 2372 	ldrd	r2, r3, [sp, #456]	; 0x1c8
   3520a:	e9cd 2342 	strd	r2, r3, [sp, #264]	; 0x108
	dest->longitude = src->longitude;
   3520e:	e9dd 2374 	ldrd	r2, r3, [sp, #464]	; 0x1d0
   35212:	e9cd 2344 	strd	r2, r3, [sp, #272]	; 0x110
	dest->datetime.year = src->datetime.year;
   35216:	9a7a      	ldr	r2, [sp, #488]	; 0x1e8
   35218:	af70      	add	r7, sp, #448	; 0x1c0
   3521a:	924f      	str	r2, [sp, #316]	; 0x13c
	dest->datetime.hour = src->datetime.hour;
   3521c:	f8bd 21ec 	ldrh.w	r2, [sp, #492]	; 0x1ec
	for (size_t i = 0;
   35220:	2100      	movs	r1, #0
	dest->datetime.hour = src->datetime.hour;
   35222:	f8ad 2140 	strh.w	r2, [sp, #320]	; 0x140
	dest->tdop = src->tdop;
   35226:	463a      	mov	r2, r7
	dest->altitude = src->altitude;
   35228:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
   3522a:	9346      	str	r3, [sp, #280]	; 0x118
	dest->accuracy = src->accuracy;
   3522c:	9b77      	ldr	r3, [sp, #476]	; 0x1dc
   3522e:	9347      	str	r3, [sp, #284]	; 0x11c
	dest->speed = src->speed;
   35230:	9b78      	ldr	r3, [sp, #480]	; 0x1e0
   35232:	9348      	str	r3, [sp, #288]	; 0x120
	dest->heading = src->heading;
   35234:	9b79      	ldr	r3, [sp, #484]	; 0x1e4
   35236:	9349      	str	r3, [sp, #292]	; 0x124
	dest->datetime.seconds = src->datetime.seconds;
   35238:	f89d 31ee 	ldrb.w	r3, [sp, #494]	; 0x1ee
   3523c:	f88d 3142 	strb.w	r3, [sp, #322]	; 0x142
	dest->datetime.ms = src->datetime.ms;
   35240:	f8bd 31f0 	ldrh.w	r3, [sp, #496]	; 0x1f0
   35244:	f8ad 3144 	strh.w	r3, [sp, #324]	; 0x144
	dest->pdop = src->pdop;
   35248:	9b7d      	ldr	r3, [sp, #500]	; 0x1f4
   3524a:	934a      	str	r3, [sp, #296]	; 0x128
	dest->hdop = src->hdop;
   3524c:	9b7e      	ldr	r3, [sp, #504]	; 0x1f8
   3524e:	934b      	str	r3, [sp, #300]	; 0x12c
	dest->vdop = src->vdop;
   35250:	9b7f      	ldr	r3, [sp, #508]	; 0x1fc
   35252:	934c      	str	r3, [sp, #304]	; 0x130
	dest->tdop = src->tdop;
   35254:	9b80      	ldr	r3, [sp, #512]	; 0x200
   35256:	934d      	str	r3, [sp, #308]	; 0x134
	for (size_t i = 0;
   35258:	ab40      	add	r3, sp, #256	; 0x100
		dest->sv[i].sv = src->sv[i].sv;
   3525a:	f8b2 0046 	ldrh.w	r0, [r2, #70]	; 0x46
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   3525e:	3101      	adds	r1, #1
		dest->sv[i].sv = src->sv[i].sv;
   35260:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   35264:	f8b2 004a 	ldrh.w	r0, [r2, #74]	; 0x4a
	for (size_t i = 0;
   35268:	290c      	cmp	r1, #12
		dest->sv[i].cn0 = src->sv[i].cn0;
   3526a:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   3526e:	f8b2 004c 	ldrh.w	r0, [r2, #76]	; 0x4c
   35272:	f103 030a 	add.w	r3, r3, #10
   35276:	f8a3 0040 	strh.w	r0, [r3, #64]	; 0x40
		dest->sv[i].azimuth = src->sv[i].azimuth;
   3527a:	f8b2 004e 	ldrh.w	r0, [r2, #78]	; 0x4e
   3527e:	f102 020c 	add.w	r2, r2, #12
   35282:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
		dest->sv[i].signal = src->sv[i].signal;
   35286:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
   3528a:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
	for (size_t i = 0;
   3528e:	d1e4      	bne.n	3525a <gps_thread+0x2a6>
			if (is_fix(&raw_gps_data.pvt)) {
   35290:	f89d 3204 	ldrb.w	r3, [sp, #516]	; 0x204
   35294:	f013 0301 	ands.w	r3, r3, #1
   35298:	f000 80a4 	beq.w	353e4 <gps_thread+0x430>
				LOG_DBG("PVT: Position fix");
   3529c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   352a0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   352a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   352a8:	f043 0304 	orr.w	r3, r3, #4
   352ac:	f363 0207 	bfi	r2, r3, #0, #8
   352b0:	b293      	uxth	r3, r2
   352b2:	f364 138f 	bfi	r3, r4, #6, #10
   352b6:	b298      	uxth	r0, r3
   352b8:	4a7c      	ldr	r2, [pc, #496]	; (354ac <gps_thread+0x4f8>)
   352ba:	497e      	ldr	r1, [pc, #504]	; (354b4 <gps_thread+0x500>)
   352bc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
   352c0:	f00f fa31 	bl	44726 <log_string_sync>
				evt.type = GPS_EVT_PVT_FIX;
   352c4:	2304      	movs	r3, #4
   352c6:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
	return z_impl_k_uptime_ticks();
   352ca:	f012 fe88 	bl	47fde <z_impl_k_uptime_ticks>
   352ce:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   352d2:	fba0 2306 	umull	r2, r3, r0, r6
   352d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   352da:	9b05      	ldr	r3, [sp, #20]
				fix_timestamp = k_uptime_get();
   352dc:	4d76      	ldr	r5, [pc, #472]	; (354b8 <gps_thread+0x504>)
   352de:	fb06 3301 	mla	r3, r6, r1, r3
   352e2:	9305      	str	r3, [sp, #20]
   352e4:	9b04      	ldr	r3, [sp, #16]
   352e6:	0bda      	lsrs	r2, r3, #15
   352e8:	9b05      	ldr	r3, [sp, #20]
   352ea:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
   352ee:	0bdb      	lsrs	r3, r3, #15
   352f0:	e9c5 2300 	strd	r2, r3, [r5]
				has_fix = true;
   352f4:	2301      	movs	r3, #1
	uint8_t  n_unhealthy = 0;
   352f6:	2500      	movs	r5, #0
	uint8_t  n_used = 0;
   352f8:	462e      	mov	r6, r5
			notify_event(dev, &evt);
   352fa:	a940      	add	r1, sp, #256	; 0x100
   352fc:	9806      	ldr	r0, [sp, #24]
			has_fix = false;
   352fe:	9304      	str	r3, [sp, #16]
			notify_event(dev, &evt);
   35300:	f012 fd06 	bl	47d10 <notify_event>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   35304:	950f      	str	r5, [sp, #60]	; 0x3c
		uint8_t sv = pvt_data->pvt.sv[i].sv;
   35306:	f897 c046 	ldrb.w	ip, [r7, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   3530a:	f1bc 0f00 	cmp.w	ip, #0
   3530e:	d02a      	beq.n	35366 <gps_thread+0x3b2>
			n_tracked++;
   35310:	980e      	ldr	r0, [sp, #56]	; 0x38
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   35312:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
			n_tracked++;
   35316:	3001      	adds	r0, #1
   35318:	b2c3      	uxtb	r3, r0
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   3531a:	f3c2 0140 	ubfx	r1, r2, #1, #1
			n_tracked++;
   3531e:	930e      	str	r3, [sp, #56]	; 0x38
			if (used) {
   35320:	b109      	cbz	r1, 35326 <gps_thread+0x372>
				n_used++;
   35322:	3601      	adds	r6, #1
   35324:	b2f6      	uxtb	r6, r6
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   35326:	f3c2 02c0 	ubfx	r2, r2, #3, #1
			if (unhealthy) {
   3532a:	b10a      	cbz	r2, 35330 <gps_thread+0x37c>
				n_unhealthy++;
   3532c:	3501      	adds	r5, #1
   3532e:	b2ed      	uxtb	r5, r5
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   35330:	f02a 003f 	bic.w	r0, sl, #63	; 0x3f
   35334:	f040 0004 	orr.w	r0, r0, #4
   35338:	f360 0a07 	bfi	sl, r0, #0, #8
   3533c:	4b5f      	ldr	r3, [pc, #380]	; (354bc <gps_thread+0x508>)
   3533e:	4860      	ldr	r0, [pc, #384]	; (354c0 <gps_thread+0x50c>)
   35340:	f364 1a8f 	bfi	sl, r4, #6, #10
   35344:	2900      	cmp	r1, #0
   35346:	bf08      	it	eq
   35348:	4618      	moveq	r0, r3
   3534a:	4b5e      	ldr	r3, [pc, #376]	; (354c4 <gps_thread+0x510>)
   3534c:	4601      	mov	r1, r0
   3534e:	485e      	ldr	r0, [pc, #376]	; (354c8 <gps_thread+0x514>)
   35350:	2a00      	cmp	r2, #0
   35352:	bf08      	it	eq
   35354:	4603      	moveq	r3, r0
   35356:	4a5d      	ldr	r2, [pc, #372]	; (354cc <gps_thread+0x518>)
   35358:	e9cd 1300 	strd	r1, r3, [sp]
   3535c:	4650      	mov	r0, sl
   3535e:	4663      	mov	r3, ip
   35360:	495b      	ldr	r1, [pc, #364]	; (354d0 <gps_thread+0x51c>)
   35362:	f00f f9e0 	bl	44726 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   35366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35368:	370c      	adds	r7, #12
   3536a:	3301      	adds	r3, #1
   3536c:	2b0c      	cmp	r3, #12
   3536e:	930f      	str	r3, [sp, #60]	; 0x3c
   35370:	d1c9      	bne.n	35306 <gps_thread+0x352>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   35372:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
   35376:	f043 0304 	orr.w	r3, r3, #4
   3537a:	f363 0807 	bfi	r8, r3, #0, #8
   3537e:	f364 188f 	bfi	r8, r4, #6, #10
   35382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   35384:	e9cd 6500 	strd	r6, r5, [sp]
   35388:	4a50      	ldr	r2, [pc, #320]	; (354cc <gps_thread+0x518>)
   3538a:	4952      	ldr	r1, [pc, #328]	; (354d4 <gps_thread+0x520>)
   3538c:	4640      	mov	r0, r8
   3538e:	f00f f9ca 	bl	44726 <log_string_sync>
	LOG_DBG("Seconds since last fix %lld",
   35392:	f02b 033f 	bic.w	r3, fp, #63	; 0x3f
   35396:	f043 0304 	orr.w	r3, r3, #4
   3539a:	f363 0b07 	bfi	fp, r3, #0, #8
   3539e:	f364 1b8f 	bfi	fp, r4, #6, #10
   353a2:	f012 fe1c 	bl	47fde <z_impl_k_uptime_ticks>
   353a6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   353aa:	fba0 2305 	umull	r2, r3, r0, r5
   353ae:	fb05 3301 	mla	r3, r5, r1, r3
   353b2:	0bd5      	lsrs	r5, r2, #15
   353b4:	ea45 4543 	orr.w	r5, r5, r3, lsl #17
   353b8:	0bd9      	lsrs	r1, r3, #15
   353ba:	4b3f      	ldr	r3, [pc, #252]	; (354b8 <gps_thread+0x504>)
   353bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   353c0:	e9d3 0600 	ldrd	r0, r6, [r3]
   353c4:	1a28      	subs	r0, r5, r0
   353c6:	f04f 0300 	mov.w	r3, #0
   353ca:	eb61 0106 	sbc.w	r1, r1, r6
   353ce:	f7e7 fd75 	bl	1cebc <__aeabi_uldivmod>
   353d2:	4a3e      	ldr	r2, [pc, #248]	; (354cc <gps_thread+0x518>)
   353d4:	e9cd 0100 	strd	r0, r1, [sp]
   353d8:	493f      	ldr	r1, [pc, #252]	; (354d8 <gps_thread+0x524>)
   353da:	4658      	mov	r0, fp
   353dc:	f00f f9a3 	bl	44726 <log_string_sync>
   353e0:	2500      	movs	r5, #0
   353e2:	e608      	b.n	34ff6 <gps_thread+0x42>
				evt.type = GPS_EVT_PVT;
   353e4:	2203      	movs	r2, #3
   353e6:	f88d 2100 	strb.w	r2, [sp, #256]	; 0x100
   353ea:	e784      	b.n	352f6 <gps_thread+0x342>
			if (operation_blocked) {
   353ec:	2d00      	cmp	r5, #0
   353ee:	f47f ae02 	bne.w	34ff6 <gps_thread+0x42>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   353f2:	23b8      	movs	r3, #184	; 0xb8
   353f4:	4632      	mov	r2, r6
   353f6:	a972      	add	r1, sp, #456	; 0x1c8
   353f8:	a842      	add	r0, sp, #264	; 0x108
   353fa:	f012 fed2 	bl	481a2 <__memcpy_chk>
			if (has_fix) {
   353fe:	9b04      	ldr	r3, [sp, #16]
			evt.nmea.len = len - 1;
   35400:	3e01      	subs	r6, #1
   35402:	f88d 615b 	strb.w	r6, [sp, #347]	; 0x15b
			if (has_fix) {
   35406:	b1db      	cbz	r3, 35440 <gps_thread+0x48c>
				LOG_DBG("NMEA: Position fix");
   35408:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   3540c:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   35410:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   35414:	f043 0304 	orr.w	r3, r3, #4
   35418:	f363 0207 	bfi	r2, r3, #0, #8
   3541c:	b293      	uxth	r3, r2
   3541e:	f364 138f 	bfi	r3, r4, #6, #10
   35422:	b298      	uxth	r0, r3
   35424:	4a21      	ldr	r2, [pc, #132]	; (354ac <gps_thread+0x4f8>)
   35426:	492d      	ldr	r1, [pc, #180]	; (354dc <gps_thread+0x528>)
   35428:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   3542c:	f00f f97b 	bl	44726 <log_string_sync>
				evt.type = GPS_EVT_NMEA_FIX;
   35430:	2306      	movs	r3, #6
			notify_event(dev, &evt);
   35432:	a940      	add	r1, sp, #256	; 0x100
   35434:	9806      	ldr	r0, [sp, #24]
				evt.type = GPS_EVT_NMEA;
   35436:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			notify_event(dev, &evt);
   3543a:	f012 fc69 	bl	47d10 <notify_event>
			break;
   3543e:	e7cf      	b.n	353e0 <gps_thread+0x42c>
				evt.type = GPS_EVT_NMEA;
   35440:	2305      	movs	r3, #5
   35442:	e7f6      	b.n	35432 <gps_thread+0x47e>
			LOG_DBG("A-GPS data update needed");
   35444:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   35448:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   3544c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   35450:	f043 0304 	orr.w	r3, r3, #4
   35454:	f363 0207 	bfi	r2, r3, #0, #8
   35458:	b293      	uxth	r3, r2
   3545a:	f364 138f 	bfi	r3, r4, #6, #10
   3545e:	4a13      	ldr	r2, [pc, #76]	; (354ac <gps_thread+0x4f8>)
   35460:	491f      	ldr	r1, [pc, #124]	; (354e0 <gps_thread+0x52c>)
   35462:	b298      	uxth	r0, r3
   35464:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   35468:	f00f f95d 	bl	44726 <log_string_sync>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   3546c:	2309      	movs	r3, #9
   3546e:	f88d 3100 	strb.w	r3, [sp, #256]	; 0x100
			evt.agps_request.sv_mask_ephe =
   35472:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
				raw_gps_data.agps.data_flags &
   35474:	9a74      	ldr	r2, [sp, #464]	; 0x1d0
			evt.agps_request.sv_mask_ephe =
   35476:	9342      	str	r3, [sp, #264]	; 0x108
			evt.agps_request.sv_mask_alm =
   35478:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
				BIT(NRF_GNSS_AGPS_KLOBUCHAR_REQUEST) ? 1 : 0;
   3547a:	0851      	lsrs	r1, r2, #1
			evt.agps_request.sv_mask_alm =
   3547c:	9343      	str	r3, [sp, #268]	; 0x10c
			evt.agps_request.utc =
   3547e:	f89d 3110 	ldrb.w	r3, [sp, #272]	; 0x110
   35482:	f362 0300 	bfi	r3, r2, #0, #1
			evt.agps_request.klobuchar =
   35486:	f361 0341 	bfi	r3, r1, #1, #1
				BIT(NRF_GNSS_AGPS_NEQUICK_REQUEST) ? 1 : 0;
   3548a:	0891      	lsrs	r1, r2, #2
			evt.agps_request.nequick =
   3548c:	f361 0382 	bfi	r3, r1, #2, #1
				1 : 0;
   35490:	08d1      	lsrs	r1, r2, #3
			evt.agps_request.system_time_tow =
   35492:	f361 03c3 	bfi	r3, r1, #3, #1
				BIT(NRF_GNSS_AGPS_POSITION_REQUEST) ? 1 : 0;
   35496:	0911      	lsrs	r1, r2, #4
			evt.agps_request.position =
   35498:	f361 1304 	bfi	r3, r1, #4, #1
				BIT(NRF_GNSS_AGPS_INTEGRITY_REQUEST) ? 1 : 0;
   3549c:	0952      	lsrs	r2, r2, #5
			evt.agps_request.integrity =
   3549e:	f362 1345 	bfi	r3, r2, #5, #1
   354a2:	f88d 3110 	strb.w	r3, [sp, #272]	; 0x110
			notify_event(dev, &evt);
   354a6:	a940      	add	r1, sp, #256	; 0x100
   354a8:	e5a2      	b.n	34ff0 <gps_thread+0x3c>
   354aa:	bf00      	nop
   354ac:	000519f9 	.word	0x000519f9
   354b0:	00051c00 	.word	0x00051c00
   354b4:	00051c23 	.word	0x00051c23
   354b8:	20023d50 	.word	0x20023d50
   354bc:	00051b06 	.word	0x00051b06
   354c0:	00051afd 	.word	0x00051afd
   354c4:	00051b0f 	.word	0x00051b0f
   354c8:	00051b1b 	.word	0x00051b1b
   354cc:	000519c6 	.word	0x000519c6
   354d0:	00051c39 	.word	0x00051c39
   354d4:	00051c55 	.word	0x00051c55
   354d8:	00051c7e 	.word	0x00051c7e
   354dc:	00051c9e 	.word	0x00051c9e
   354e0:	00051cb5 	.word	0x00051cb5

000354e4 <stop>:
{
   354e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   354e6:	4604      	mov	r4, r0
   354e8:	b085      	sub	sp, #20
	struct gps_drv_data *drv_data = dev->data;
   354ea:	68c5      	ldr	r5, [r0, #12]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   354ec:	f105 0320 	add.w	r3, r5, #32
   354f0:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   354f4:	2b01      	cmp	r3, #1
   354f6:	d045      	beq.n	35584 <stop+0xa0>
	k_delayed_work_cancel(&drv_data->timeout_work);
   354f8:	f505 6014 	add.w	r0, r5, #2368	; 0x940
   354fc:	f00b fcd2 	bl	40ea4 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   35500:	f505 6017 	add.w	r0, r5, #2416	; 0x970
   35504:	f00b fcce 	bl	40ea4 <k_delayed_work_cancel>
   35508:	f105 031c 	add.w	r3, r5, #28
   3550c:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&drv_data->is_active) == 0) {
   35510:	b37b      	cbz	r3, 35572 <stop+0x8e>
		LOG_DBG("Stopping GPS");
   35512:	2304      	movs	r3, #4
   35514:	f04f 0000 	mov.w	r0, #0
	nrf_gnss_delete_mask_t delete_mask = 0;
   35518:	2700      	movs	r7, #0
	err = stop_gps(dev, false);
   3551a:	68e6      	ldr	r6, [r4, #12]
		LOG_DBG("Stopping GPS");
   3551c:	f363 0007 	bfi	r0, r3, #0, #8
   35520:	4c1a      	ldr	r4, [pc, #104]	; (3558c <stop+0xa8>)
   35522:	4b1b      	ldr	r3, [pc, #108]	; (35590 <stop+0xac>)
   35524:	4a1b      	ldr	r2, [pc, #108]	; (35594 <stop+0xb0>)
   35526:	1ae4      	subs	r4, r4, r3
   35528:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3552c:	f364 108f 	bfi	r0, r4, #6, #10
   35530:	4919      	ldr	r1, [pc, #100]	; (35598 <stop+0xb4>)
	nrf_gnss_delete_mask_t delete_mask = 0;
   35532:	9703      	str	r7, [sp, #12]
		LOG_DBG("Stopping GPS");
   35534:	f00f f8f7 	bl	44726 <log_string_sync>
	atomic_set(&drv_data->is_active, 0);
   35538:	4639      	mov	r1, r7
   3553a:	f106 001c 	add.w	r0, r6, #28
   3553e:	f012 fc12 	bl	47d66 <atomic_set>
	retval = nrf_setsockopt(drv_data->socket,
   35542:	2304      	movs	r3, #4
   35544:	9300      	str	r3, [sp, #0]
   35546:	2208      	movs	r2, #8
   35548:	ab03      	add	r3, sp, #12
   3554a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3554e:	6a70      	ldr	r0, [r6, #36]	; 0x24
   35550:	f006 ff6a 	bl	3c428 <nrf_setsockopt>
	if (retval != 0) {
   35554:	b168      	cbz	r0, 35572 <stop+0x8e>
		LOG_ERR("Failed to stop GPS");
   35556:	2301      	movs	r3, #1
   35558:	f04f 0000 	mov.w	r0, #0
   3555c:	f363 0007 	bfi	r0, r3, #0, #8
   35560:	f364 108f 	bfi	r0, r4, #6, #10
   35564:	490d      	ldr	r1, [pc, #52]	; (3559c <stop+0xb8>)
   35566:	f00f f8de 	bl	44726 <log_string_sync>
		return -EIO;
   3556a:	f06f 0004 	mvn.w	r0, #4
}
   3556e:	b005      	add	sp, #20
   35570:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35572:	2200      	movs	r2, #0
   35574:	2300      	movs	r3, #0
   35576:	f505 6111 	add.w	r1, r5, #2320	; 0x910
   3557a:	4809      	ldr	r0, [pc, #36]	; (355a0 <stop+0xbc>)
   3557c:	f00b fc0a 	bl	40d94 <k_delayed_work_submit_to_queue>
	return 0;
   35580:	2000      	movs	r0, #0
   35582:	e7f4      	b.n	3556e <stop+0x8a>
		return -EHOSTDOWN;
   35584:	f06f 0074 	mvn.w	r0, #116	; 0x74
   35588:	e7f1      	b.n	3556e <stop+0x8a>
   3558a:	bf00      	nop
   3558c:	00049870 	.word	0x00049870
   35590:	00049788 	.word	0x00049788
   35594:	00051a27 	.word	0x00051a27
   35598:	000520b4 	.word	0x000520b4
   3559c:	000520c5 	.word	0x000520c5
   355a0:	20024888 	.word	0x20024888

000355a4 <packet_free_cb>:
   355a4:	b510      	push	{r4, lr}
   355a6:	4604      	mov	r4, r0
   355a8:	6800      	ldr	r0, [r0, #0]
   355aa:	f004 ffc5 	bl	3a538 <rpc_logobj_client_data_free>
   355ae:	68a0      	ldr	r0, [r4, #8]
   355b0:	b118      	cbz	r0, 355ba <packet_free_cb+0x16>
   355b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   355b6:	f007 bee1 	b.w	3d37c <nrf_free>
   355ba:	bd10      	pop	{r4, pc}

000355bc <logobj_event_handler>:
   355bc:	b530      	push	{r4, r5, lr}
   355be:	4b3b      	ldr	r3, [pc, #236]	; (356ac <logobj_event_handler+0xf0>)
   355c0:	b085      	sub	sp, #20
   355c2:	681d      	ldr	r5, [r3, #0]
   355c4:	2d00      	cmp	r5, #0
   355c6:	d04c      	beq.n	35662 <logobj_event_handler+0xa6>
   355c8:	f248 0302 	movw	r3, #32770	; 0x8002
   355cc:	4299      	cmp	r1, r3
   355ce:	d053      	beq.n	35678 <logobj_event_handler+0xbc>
   355d0:	d91c      	bls.n	3560c <logobj_event_handler+0x50>
   355d2:	f248 0303 	movw	r3, #32771	; 0x8003
   355d6:	4299      	cmp	r1, r3
   355d8:	d05a      	beq.n	35690 <logobj_event_handler+0xd4>
   355da:	f249 0301 	movw	r3, #36865	; 0x9001
   355de:	4299      	cmp	r1, r3
   355e0:	d147      	bne.n	35672 <logobj_event_handler+0xb6>
   355e2:	2400      	movs	r4, #0
   355e4:	6843      	ldr	r3, [r0, #4]
   355e6:	6802      	ldr	r2, [r0, #0]
   355e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
   355ec:	e9cd 2300 	strd	r2, r3, [sp]
   355f0:	69e8      	ldr	r0, [r5, #28]
   355f2:	4669      	mov	r1, sp
   355f4:	6803      	ldr	r3, [r0, #0]
   355f6:	685b      	ldr	r3, [r3, #4]
   355f8:	4798      	blx	r3
   355fa:	3001      	adds	r0, #1
   355fc:	d04e      	beq.n	3569c <logobj_event_handler+0xe0>
   355fe:	4620      	mov	r0, r4
   35600:	682b      	ldr	r3, [r5, #0]
   35602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35606:	602b      	str	r3, [r5, #0]
   35608:	b005      	add	sp, #20
   3560a:	bd30      	pop	{r4, r5, pc}
   3560c:	f248 0301 	movw	r3, #32769	; 0x8001
   35610:	4299      	cmp	r1, r3
   35612:	d12e      	bne.n	35672 <logobj_event_handler+0xb6>
   35614:	68c3      	ldr	r3, [r0, #12]
   35616:	2b00      	cmp	r3, #0
   35618:	d135      	bne.n	35686 <logobj_event_handler+0xca>
   3561a:	6828      	ldr	r0, [r5, #0]
   3561c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   35620:	d03e      	beq.n	356a0 <logobj_event_handler+0xe4>
   35622:	682b      	ldr	r3, [r5, #0]
   35624:	b29b      	uxth	r3, r3
   35626:	2b01      	cmp	r3, #1
   35628:	d105      	bne.n	35636 <logobj_event_handler+0x7a>
   3562a:	682b      	ldr	r3, [r5, #0]
   3562c:	0c1b      	lsrs	r3, r3, #16
   3562e:	041b      	lsls	r3, r3, #16
   35630:	f043 0302 	orr.w	r3, r3, #2
   35634:	602b      	str	r3, [r5, #0]
   35636:	4b1e      	ldr	r3, [pc, #120]	; (356b0 <logobj_event_handler+0xf4>)
   35638:	781a      	ldrb	r2, [r3, #0]
   3563a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3563e:	2a00      	cmp	r2, #0
   35640:	d031      	beq.n	356a6 <logobj_event_handler+0xea>
   35642:	4a1c      	ldr	r2, [pc, #112]	; (356b4 <logobj_event_handler+0xf8>)
   35644:	7811      	ldrb	r1, [r2, #0]
   35646:	b909      	cbnz	r1, 3564c <logobj_event_handler+0x90>
   35648:	2101      	movs	r1, #1
   3564a:	7011      	strb	r1, [r2, #0]
   3564c:	2000      	movs	r0, #0
   3564e:	7018      	strb	r0, [r3, #0]
   35650:	682b      	ldr	r3, [r5, #0]
   35652:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35656:	602b      	str	r3, [r5, #0]
   35658:	682b      	ldr	r3, [r5, #0]
   3565a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3565e:	602b      	str	r3, [r5, #0]
   35660:	e7d2      	b.n	35608 <logobj_event_handler+0x4c>
   35662:	6800      	ldr	r0, [r0, #0]
   35664:	2800      	cmp	r0, #0
   35666:	d0cf      	beq.n	35608 <logobj_event_handler+0x4c>
   35668:	f004 ff66 	bl	3a538 <rpc_logobj_client_data_free>
   3566c:	4628      	mov	r0, r5
   3566e:	b005      	add	sp, #20
   35670:	bd30      	pop	{r4, r5, pc}
   35672:	2000      	movs	r0, #0
   35674:	b005      	add	sp, #20
   35676:	bd30      	pop	{r4, r5, pc}
   35678:	682b      	ldr	r3, [r5, #0]
   3567a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
   3567e:	d00b      	beq.n	35698 <logobj_event_handler+0xdc>
   35680:	68c0      	ldr	r0, [r0, #12]
   35682:	2800      	cmp	r0, #0
   35684:	d0e4      	beq.n	35650 <logobj_event_handler+0x94>
   35686:	230e      	movs	r3, #14
   35688:	2000      	movs	r0, #0
   3568a:	606b      	str	r3, [r5, #4]
   3568c:	b005      	add	sp, #20
   3568e:	bd30      	pop	{r4, r5, pc}
   35690:	68c3      	ldr	r3, [r0, #12]
   35692:	2b01      	cmp	r3, #1
   35694:	d1a5      	bne.n	355e2 <logobj_event_handler+0x26>
   35696:	e7f6      	b.n	35686 <logobj_event_handler+0xca>
   35698:	4618      	mov	r0, r3
   3569a:	e7b5      	b.n	35608 <logobj_event_handler+0x4c>
   3569c:	2002      	movs	r0, #2
   3569e:	e7b3      	b.n	35608 <logobj_event_handler+0x4c>
   356a0:	230e      	movs	r3, #14
   356a2:	606b      	str	r3, [r5, #4]
   356a4:	e7b0      	b.n	35608 <logobj_event_handler+0x4c>
   356a6:	4a03      	ldr	r2, [pc, #12]	; (356b4 <logobj_event_handler+0xf8>)
   356a8:	7011      	strb	r1, [r2, #0]
   356aa:	e7cf      	b.n	3564c <logobj_event_handler+0x90>
   356ac:	20025b28 	.word	0x20025b28
   356b0:	2002d1b7 	.word	0x2002d1b7
   356b4:	2002d1b8 	.word	0x2002d1b8

000356b8 <logobj_interface_init>:
   356b8:	2300      	movs	r3, #0
   356ba:	b510      	push	{r4, lr}
   356bc:	4808      	ldr	r0, [pc, #32]	; (356e0 <logobj_interface_init+0x28>)
   356be:	4c09      	ldr	r4, [pc, #36]	; (356e4 <logobj_interface_init+0x2c>)
   356c0:	4909      	ldr	r1, [pc, #36]	; (356e8 <logobj_interface_init+0x30>)
   356c2:	4a0a      	ldr	r2, [pc, #40]	; (356ec <logobj_interface_init+0x34>)
   356c4:	7023      	strb	r3, [r4, #0]
   356c6:	6003      	str	r3, [r0, #0]
   356c8:	700b      	strb	r3, [r1, #0]
   356ca:	6013      	str	r3, [r2, #0]
   356cc:	f004 fef4 	bl	3a4b8 <rpc_logobj_client_init>
   356d0:	b918      	cbnz	r0, 356da <logobj_interface_init+0x22>
   356d2:	2201      	movs	r2, #1
   356d4:	4b06      	ldr	r3, [pc, #24]	; (356f0 <logobj_interface_init+0x38>)
   356d6:	701a      	strb	r2, [r3, #0]
   356d8:	bd10      	pop	{r4, pc}
   356da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   356de:	bd10      	pop	{r4, pc}
   356e0:	20025b28 	.word	0x20025b28
   356e4:	2002d1b8 	.word	0x2002d1b8
   356e8:	2002d1b7 	.word	0x2002d1b7
   356ec:	20025b24 	.word	0x20025b24
   356f0:	2002d1b9 	.word	0x2002d1b9

000356f4 <logobj_interface_deinit>:
   356f4:	b510      	push	{r4, lr}
   356f6:	4c05      	ldr	r4, [pc, #20]	; (3570c <logobj_interface_deinit+0x18>)
   356f8:	7820      	ldrb	r0, [r4, #0]
   356fa:	b900      	cbnz	r0, 356fe <logobj_interface_deinit+0xa>
   356fc:	bd10      	pop	{r4, pc}
   356fe:	f004 fee1 	bl	3a4c4 <rpc_logobj_client_deinit>
   35702:	b908      	cbnz	r0, 35708 <logobj_interface_deinit+0x14>
   35704:	7020      	strb	r0, [r4, #0]
   35706:	bd10      	pop	{r4, pc}
   35708:	2003      	movs	r0, #3
   3570a:	bd10      	pop	{r4, pc}
   3570c:	2002d1b9 	.word	0x2002d1b9

00035710 <logobj_interface_open>:
   35710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35714:	2400      	movs	r4, #0
   35716:	4b5b      	ldr	r3, [pc, #364]	; (35884 <logobj_interface_open+0x174>)
   35718:	b084      	sub	sp, #16
   3571a:	781b      	ldrb	r3, [r3, #0]
   3571c:	9401      	str	r4, [sp, #4]
   3571e:	2b00      	cmp	r3, #0
   35720:	f000 809f 	beq.w	35862 <logobj_interface_open+0x152>
   35724:	2866      	cmp	r0, #102	; 0x66
   35726:	4680      	mov	r8, r0
   35728:	f040 808f 	bne.w	3584a <logobj_interface_open+0x13a>
   3572c:	2902      	cmp	r1, #2
   3572e:	4689      	mov	r9, r1
   35730:	f040 808b 	bne.w	3584a <logobj_interface_open+0x13a>
   35734:	f240 2305 	movw	r3, #517	; 0x205
   35738:	429a      	cmp	r2, r3
   3573a:	4692      	mov	sl, r2
   3573c:	f040 8085 	bne.w	3584a <logobj_interface_open+0x13a>
   35740:	4f51      	ldr	r7, [pc, #324]	; (35888 <logobj_interface_open+0x178>)
   35742:	683d      	ldr	r5, [r7, #0]
   35744:	2d00      	cmp	r5, #0
   35746:	f040 8086 	bne.w	35856 <logobj_interface_open+0x146>
   3574a:	4a50      	ldr	r2, [pc, #320]	; (3588c <logobj_interface_open+0x17c>)
   3574c:	a801      	add	r0, sp, #4
   3574e:	f008 f9fd 	bl	3db4c <interface_socket_allocate>
   35752:	9b01      	ldr	r3, [sp, #4]
   35754:	4606      	mov	r6, r0
   35756:	2b00      	cmp	r3, #0
   35758:	f000 808d 	beq.w	35876 <logobj_interface_open+0x166>
   3575c:	4629      	mov	r1, r5
   3575e:	2204      	movs	r2, #4
   35760:	484b      	ldr	r0, [pc, #300]	; (35890 <logobj_interface_open+0x180>)
   35762:	603b      	str	r3, [r7, #0]
   35764:	f012 fd30 	bl	481c8 <memset>
   35768:	9c01      	ldr	r4, [sp, #4]
   3576a:	4629      	mov	r1, r5
   3576c:	e9c4 8903 	strd	r8, r9, [r4, #12]
   35770:	f8c4 a014 	str.w	sl, [r4, #20]
   35774:	a802      	add	r0, sp, #8
   35776:	f004 fea9 	bl	3a4cc <rpc_logobj_client_request_alloc>
   3577a:	2800      	cmp	r0, #0
   3577c:	d142      	bne.n	35804 <logobj_interface_open+0xf4>
   3577e:	2201      	movs	r2, #1
   35780:	2104      	movs	r1, #4
   35782:	9b02      	ldr	r3, [sp, #8]
   35784:	4d43      	ldr	r5, [pc, #268]	; (35894 <logobj_interface_open+0x184>)
   35786:	7358      	strb	r0, [r3, #13]
   35788:	7398      	strb	r0, [r3, #14]
   3578a:	73d8      	strb	r0, [r3, #15]
   3578c:	7258      	strb	r0, [r3, #9]
   3578e:	7298      	strb	r0, [r3, #10]
   35790:	72d8      	strb	r0, [r3, #11]
   35792:	7219      	strb	r1, [r3, #8]
   35794:	702a      	strb	r2, [r5, #0]
   35796:	731a      	strb	r2, [r3, #12]
   35798:	6822      	ldr	r2, [r4, #0]
   3579a:	4618      	mov	r0, r3
   3579c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
   357a0:	6022      	str	r2, [r4, #0]
   357a2:	f247 0101 	movw	r1, #28673	; 0x7001
   357a6:	f004 fea9 	bl	3a4fc <rpc_logobj_client_request_send>
   357aa:	bb68      	cbnz	r0, 35808 <logobj_interface_open+0xf8>
   357ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   357ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   357b2:	2900      	cmp	r1, #0
   357b4:	bf08      	it	eq
   357b6:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   357ba:	ab04      	add	r3, sp, #16
   357bc:	f843 1d04 	str.w	r1, [r3, #-4]!
   357c0:	4630      	mov	r0, r6
   357c2:	4611      	mov	r1, r2
   357c4:	f008 fa74 	bl	3dcb0 <interface_socket_wait>
   357c8:	4604      	mov	r4, r0
   357ca:	b310      	cbz	r0, 35812 <logobj_interface_open+0x102>
   357cc:	9a01      	ldr	r2, [sp, #4]
   357ce:	2e00      	cmp	r6, #0
   357d0:	6813      	ldr	r3, [r2, #0]
   357d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   357d6:	6013      	str	r3, [r2, #0]
   357d8:	9a01      	ldr	r2, [sp, #4]
   357da:	6813      	ldr	r3, [r2, #0]
   357dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   357e0:	6013      	str	r3, [r2, #0]
   357e2:	9a01      	ldr	r2, [sp, #4]
   357e4:	6813      	ldr	r3, [r2, #0]
   357e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   357ea:	6013      	str	r3, [r2, #0]
   357ec:	da3f      	bge.n	3586e <logobj_interface_open+0x15e>
   357ee:	2300      	movs	r3, #0
   357f0:	4620      	mov	r0, r4
   357f2:	603b      	str	r3, [r7, #0]
   357f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   357f8:	f7f5 fea6 	bl	2b548 <bsd_os_errno_set>
   357fc:	4630      	mov	r0, r6
   357fe:	b004      	add	sp, #16
   35800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35804:	240c      	movs	r4, #12
   35806:	e7e1      	b.n	357cc <logobj_interface_open+0xbc>
   35808:	9802      	ldr	r0, [sp, #8]
   3580a:	f004 fe8d 	bl	3a528 <rpc_logobj_client_message_free>
   3580e:	2405      	movs	r4, #5
   35810:	e7dc      	b.n	357cc <logobj_interface_open+0xbc>
   35812:	4630      	mov	r0, r6
   35814:	f008 fac0 	bl	3dd98 <interface_socket_from_handle_get>
   35818:	b120      	cbz	r0, 35824 <logobj_interface_open+0x114>
   3581a:	6844      	ldr	r4, [r0, #4]
   3581c:	b114      	cbz	r4, 35824 <logobj_interface_open+0x114>
   3581e:	2300      	movs	r3, #0
   35820:	6043      	str	r3, [r0, #4]
   35822:	e7d3      	b.n	357cc <logobj_interface_open+0xbc>
   35824:	4630      	mov	r0, r6
   35826:	9a01      	ldr	r2, [sp, #4]
   35828:	6813      	ldr	r3, [r2, #0]
   3582a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3582e:	6013      	str	r3, [r2, #0]
   35830:	9a01      	ldr	r2, [sp, #4]
   35832:	6813      	ldr	r3, [r2, #0]
   35834:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35838:	6013      	str	r3, [r2, #0]
   3583a:	9a01      	ldr	r2, [sp, #4]
   3583c:	6813      	ldr	r3, [r2, #0]
   3583e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   35842:	6013      	str	r3, [r2, #0]
   35844:	b004      	add	sp, #16
   35846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3584a:	2016      	movs	r0, #22
   3584c:	f7f5 fe7c 	bl	2b548 <bsd_os_errno_set>
   35850:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   35854:	e7d2      	b.n	357fc <logobj_interface_open+0xec>
   35856:	2001      	movs	r0, #1
   35858:	f7f5 fe76 	bl	2b548 <bsd_os_errno_set>
   3585c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   35860:	e7cc      	b.n	357fc <logobj_interface_open+0xec>
   35862:	2070      	movs	r0, #112	; 0x70
   35864:	f7f5 fe70 	bl	2b548 <bsd_os_errno_set>
   35868:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   3586c:	e7c6      	b.n	357fc <logobj_interface_open+0xec>
   3586e:	4630      	mov	r0, r6
   35870:	f008 f9d0 	bl	3dc14 <interface_socket_free>
   35874:	e7bb      	b.n	357ee <logobj_interface_open+0xde>
   35876:	2018      	movs	r0, #24
   35878:	f7f5 fe66 	bl	2b548 <bsd_os_errno_set>
   3587c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   35880:	e7bc      	b.n	357fc <logobj_interface_open+0xec>
   35882:	bf00      	nop
   35884:	2002d1b9 	.word	0x2002d1b9
   35888:	20025b28 	.word	0x20025b28
   3588c:	000355a5 	.word	0x000355a5
   35890:	20025b24 	.word	0x20025b24
   35894:	2002d1b7 	.word	0x2002d1b7

00035898 <logobj_interface_read>:
   35898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3589c:	b087      	sub	sp, #28
   3589e:	2900      	cmp	r1, #0
   358a0:	d06b      	beq.n	3597a <logobj_interface_read+0xe2>
   358a2:	2a00      	cmp	r2, #0
   358a4:	4617      	mov	r7, r2
   358a6:	dd68      	ble.n	3597a <logobj_interface_read+0xe2>
   358a8:	461d      	mov	r5, r3
   358aa:	4680      	mov	r8, r0
   358ac:	460e      	mov	r6, r1
   358ae:	f008 fa73 	bl	3dd98 <interface_socket_from_handle_get>
   358b2:	4604      	mov	r4, r0
   358b4:	2800      	cmp	r0, #0
   358b6:	d066      	beq.n	35986 <logobj_interface_read+0xee>
   358b8:	bb4d      	cbnz	r5, 3590e <logobj_interface_read+0x76>
   358ba:	69e0      	ldr	r0, [r4, #28]
   358bc:	07aa      	lsls	r2, r5, #30
   358be:	6803      	ldr	r3, [r0, #0]
   358c0:	68db      	ldr	r3, [r3, #12]
   358c2:	d52d      	bpl.n	35920 <logobj_interface_read+0x88>
   358c4:	4798      	blx	r3
   358c6:	3001      	adds	r0, #1
   358c8:	d047      	beq.n	3595a <logobj_interface_read+0xc2>
   358ca:	6823      	ldr	r3, [r4, #0]
   358cc:	69e0      	ldr	r0, [r4, #28]
   358ce:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
   358d2:	d044      	beq.n	3595e <logobj_interface_read+0xc6>
   358d4:	2100      	movs	r1, #0
   358d6:	6823      	ldr	r3, [r4, #0]
   358d8:	462a      	mov	r2, r5
   358da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   358de:	6023      	str	r3, [r4, #0]
   358e0:	e9cd 1104 	strd	r1, r1, [sp, #16]
   358e4:	e9cd 6702 	strd	r6, r7, [sp, #8]
   358e8:	6803      	ldr	r3, [r0, #0]
   358ea:	a902      	add	r1, sp, #8
   358ec:	689b      	ldr	r3, [r3, #8]
   358ee:	4798      	blx	r3
   358f0:	4605      	mov	r5, r0
   358f2:	69e0      	ldr	r0, [r4, #28]
   358f4:	6803      	ldr	r3, [r0, #0]
   358f6:	68db      	ldr	r3, [r3, #12]
   358f8:	4798      	blx	r3
   358fa:	3001      	adds	r0, #1
   358fc:	d003      	beq.n	35906 <logobj_interface_read+0x6e>
   358fe:	6823      	ldr	r3, [r4, #0]
   35900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35904:	6023      	str	r3, [r4, #0]
   35906:	4628      	mov	r0, r5
   35908:	b007      	add	sp, #28
   3590a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3590e:	f015 0f2a 	tst.w	r5, #42	; 0x2a
   35912:	d1d2      	bne.n	358ba <logobj_interface_read+0x22>
   35914:	202d      	movs	r0, #45	; 0x2d
   35916:	f7f5 fe17 	bl	2b548 <bsd_os_errno_set>
   3591a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3591e:	e7f2      	b.n	35906 <logobj_interface_read+0x6e>
   35920:	6822      	ldr	r2, [r4, #0]
   35922:	f012 5980 	ands.w	r9, r2, #268435456	; 0x10000000
   35926:	d1cd      	bne.n	358c4 <logobj_interface_read+0x2c>
   35928:	4798      	blx	r3
   3592a:	1c43      	adds	r3, r0, #1
   3592c:	d1cd      	bne.n	358ca <logobj_interface_read+0x32>
   3592e:	6a22      	ldr	r2, [r4, #32]
   35930:	ab06      	add	r3, sp, #24
   35932:	2a00      	cmp	r2, #0
   35934:	bf18      	it	ne
   35936:	4610      	movne	r0, r2
   35938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3593c:	f843 0d14 	str.w	r0, [r3, #-20]!
   35940:	4611      	mov	r1, r2
   35942:	4640      	mov	r0, r8
   35944:	f008 f9b4 	bl	3dcb0 <interface_socket_wait>
   35948:	b158      	cbz	r0, 35962 <logobj_interface_read+0xca>
   3594a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3594e:	f7f5 fdfb 	bl	2b548 <bsd_os_errno_set>
   35952:	4628      	mov	r0, r5
   35954:	b007      	add	sp, #28
   35956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3595a:	2023      	movs	r0, #35	; 0x23
   3595c:	e7f5      	b.n	3594a <logobj_interface_read+0xb2>
   3595e:	461d      	mov	r5, r3
   35960:	e7c8      	b.n	358f4 <logobj_interface_read+0x5c>
   35962:	4640      	mov	r0, r8
   35964:	f008 fa18 	bl	3dd98 <interface_socket_from_handle_get>
   35968:	4603      	mov	r3, r0
   3596a:	2800      	cmp	r0, #0
   3596c:	d0ad      	beq.n	358ca <logobj_interface_read+0x32>
   3596e:	6840      	ldr	r0, [r0, #4]
   35970:	2800      	cmp	r0, #0
   35972:	d0aa      	beq.n	358ca <logobj_interface_read+0x32>
   35974:	f8c3 9004 	str.w	r9, [r3, #4]
   35978:	e7e7      	b.n	3594a <logobj_interface_read+0xb2>
   3597a:	2016      	movs	r0, #22
   3597c:	f7f5 fde4 	bl	2b548 <bsd_os_errno_set>
   35980:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35984:	e7bf      	b.n	35906 <logobj_interface_read+0x6e>
   35986:	2009      	movs	r0, #9
   35988:	f7f5 fdde 	bl	2b548 <bsd_os_errno_set>
   3598c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35990:	e7b9      	b.n	35906 <logobj_interface_read+0x6e>
   35992:	bf00      	nop

00035994 <logobj_interface_write>:
   35994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35998:	b082      	sub	sp, #8
   3599a:	2900      	cmp	r1, #0
   3599c:	d06b      	beq.n	35a76 <logobj_interface_write+0xe2>
   3599e:	2a04      	cmp	r2, #4
   359a0:	d169      	bne.n	35a76 <logobj_interface_write+0xe2>
   359a2:	461f      	mov	r7, r3
   359a4:	4606      	mov	r6, r0
   359a6:	460d      	mov	r5, r1
   359a8:	f008 f9f6 	bl	3dd98 <interface_socket_from_handle_get>
   359ac:	4604      	mov	r4, r0
   359ae:	2800      	cmp	r0, #0
   359b0:	d074      	beq.n	35a9c <logobj_interface_write+0x108>
   359b2:	b1e7      	cbz	r7, 359ee <logobj_interface_write+0x5a>
   359b4:	07b8      	lsls	r0, r7, #30
   359b6:	d56b      	bpl.n	35a90 <logobj_interface_write+0xfc>
   359b8:	6823      	ldr	r3, [r4, #0]
   359ba:	039b      	lsls	r3, r3, #14
   359bc:	d564      	bpl.n	35a88 <logobj_interface_write+0xf4>
   359be:	2700      	movs	r7, #0
   359c0:	6823      	ldr	r3, [r4, #0]
   359c2:	2100      	movs	r1, #0
   359c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   359c8:	6023      	str	r3, [r4, #0]
   359ca:	4668      	mov	r0, sp
   359cc:	f8d5 8000 	ldr.w	r8, [r5]
   359d0:	f004 fd7c 	bl	3a4cc <rpc_logobj_client_request_alloc>
   359d4:	b198      	cbz	r0, 359fe <logobj_interface_write+0x6a>
   359d6:	200c      	movs	r0, #12
   359d8:	6823      	ldr	r3, [r4, #0]
   359da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   359de:	6023      	str	r3, [r4, #0]
   359e0:	f7f5 fdb2 	bl	2b548 <bsd_os_errno_set>
   359e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   359e8:	b002      	add	sp, #8
   359ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   359ee:	6803      	ldr	r3, [r0, #0]
   359f0:	00d9      	lsls	r1, r3, #3
   359f2:	d4e1      	bmi.n	359b8 <logobj_interface_write+0x24>
   359f4:	6803      	ldr	r3, [r0, #0]
   359f6:	039a      	lsls	r2, r3, #14
   359f8:	d548      	bpl.n	35a8c <logobj_interface_write+0xf8>
   359fa:	2701      	movs	r7, #1
   359fc:	e7e0      	b.n	359c0 <logobj_interface_write+0x2c>
   359fe:	2504      	movs	r5, #4
   35a00:	9b00      	ldr	r3, [sp, #0]
   35a02:	f247 0103 	movw	r1, #28675	; 0x7003
   35a06:	f8c3 800c 	str.w	r8, [r3, #12]
   35a0a:	7258      	strb	r0, [r3, #9]
   35a0c:	7298      	strb	r0, [r3, #10]
   35a0e:	72d8      	strb	r0, [r3, #11]
   35a10:	721d      	strb	r5, [r3, #8]
   35a12:	4618      	mov	r0, r3
   35a14:	f004 fd72 	bl	3a4fc <rpc_logobj_client_request_send>
   35a18:	4680      	mov	r8, r0
   35a1a:	bb18      	cbnz	r0, 35a64 <logobj_interface_write+0xd0>
   35a1c:	b1d7      	cbz	r7, 35a54 <logobj_interface_write+0xc0>
   35a1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   35a20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   35a24:	2900      	cmp	r1, #0
   35a26:	bf08      	it	eq
   35a28:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   35a2c:	ab02      	add	r3, sp, #8
   35a2e:	f843 1d04 	str.w	r1, [r3, #-4]!
   35a32:	4630      	mov	r0, r6
   35a34:	4611      	mov	r1, r2
   35a36:	f008 f93b 	bl	3dcb0 <interface_socket_wait>
   35a3a:	b120      	cbz	r0, 35a46 <logobj_interface_write+0xb2>
   35a3c:	6823      	ldr	r3, [r4, #0]
   35a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35a42:	6023      	str	r3, [r4, #0]
   35a44:	e7cc      	b.n	359e0 <logobj_interface_write+0x4c>
   35a46:	4630      	mov	r0, r6
   35a48:	f008 f9a6 	bl	3dd98 <interface_socket_from_handle_get>
   35a4c:	4603      	mov	r3, r0
   35a4e:	b108      	cbz	r0, 35a54 <logobj_interface_write+0xc0>
   35a50:	6840      	ldr	r0, [r0, #4]
   35a52:	b9b0      	cbnz	r0, 35a82 <logobj_interface_write+0xee>
   35a54:	4628      	mov	r0, r5
   35a56:	6823      	ldr	r3, [r4, #0]
   35a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35a5c:	6023      	str	r3, [r4, #0]
   35a5e:	b002      	add	sp, #8
   35a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35a64:	9800      	ldr	r0, [sp, #0]
   35a66:	f004 fd5f 	bl	3a528 <rpc_logobj_client_message_free>
   35a6a:	6823      	ldr	r3, [r4, #0]
   35a6c:	2005      	movs	r0, #5
   35a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   35a72:	6023      	str	r3, [r4, #0]
   35a74:	e7b4      	b.n	359e0 <logobj_interface_write+0x4c>
   35a76:	2016      	movs	r0, #22
   35a78:	f7f5 fd66 	bl	2b548 <bsd_os_errno_set>
   35a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35a80:	e7b2      	b.n	359e8 <logobj_interface_write+0x54>
   35a82:	f8c3 8004 	str.w	r8, [r3, #4]
   35a86:	e7d9      	b.n	35a3c <logobj_interface_write+0xa8>
   35a88:	2073      	movs	r0, #115	; 0x73
   35a8a:	e7a9      	b.n	359e0 <logobj_interface_write+0x4c>
   35a8c:	2009      	movs	r0, #9
   35a8e:	e7a7      	b.n	359e0 <logobj_interface_write+0x4c>
   35a90:	202d      	movs	r0, #45	; 0x2d
   35a92:	f7f5 fd59 	bl	2b548 <bsd_os_errno_set>
   35a96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35a9a:	e7a5      	b.n	359e8 <logobj_interface_write+0x54>
   35a9c:	2009      	movs	r0, #9
   35a9e:	f7f5 fd53 	bl	2b548 <bsd_os_errno_set>
   35aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35aa6:	e79f      	b.n	359e8 <logobj_interface_write+0x54>

00035aa8 <logobj_interface_setopt>:
   35aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   35aaa:	2901      	cmp	r1, #1
   35aac:	b085      	sub	sp, #20
   35aae:	d06d      	beq.n	35b8c <logobj_interface_setopt+0xe4>
   35ab0:	461e      	mov	r6, r3
   35ab2:	f240 2305 	movw	r3, #517	; 0x205
   35ab6:	4299      	cmp	r1, r3
   35ab8:	f040 80a0 	bne.w	35bfc <logobj_interface_setopt+0x154>
   35abc:	4607      	mov	r7, r0
   35abe:	4615      	mov	r5, r2
   35ac0:	f008 f96a 	bl	3dd98 <interface_socket_from_handle_get>
   35ac4:	4604      	mov	r4, r0
   35ac6:	2800      	cmp	r0, #0
   35ac8:	f000 80c3 	beq.w	35c52 <logobj_interface_setopt+0x1aa>
   35acc:	2d01      	cmp	r5, #1
   35ace:	d019      	beq.n	35b04 <logobj_interface_setopt+0x5c>
   35ad0:	2d02      	cmp	r5, #2
   35ad2:	d010      	beq.n	35af6 <logobj_interface_setopt+0x4e>
   35ad4:	252a      	movs	r5, #42	; 0x2a
   35ad6:	6803      	ldr	r3, [r0, #0]
   35ad8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35adc:	6023      	str	r3, [r4, #0]
   35ade:	6823      	ldr	r3, [r4, #0]
   35ae0:	4628      	mov	r0, r5
   35ae2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   35ae6:	6023      	str	r3, [r4, #0]
   35ae8:	f7f5 fd2e 	bl	2b548 <bsd_os_errno_set>
   35aec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35af0:	4628      	mov	r0, r5
   35af2:	b005      	add	sp, #20
   35af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35af6:	b116      	cbz	r6, 35afe <logobj_interface_setopt+0x56>
   35af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35afa:	2b01      	cmp	r3, #1
   35afc:	d04e      	beq.n	35b9c <logobj_interface_setopt+0xf4>
   35afe:	6823      	ldr	r3, [r4, #0]
   35b00:	2516      	movs	r5, #22
   35b02:	e7e9      	b.n	35ad8 <logobj_interface_setopt+0x30>
   35b04:	2e00      	cmp	r6, #0
   35b06:	d0fa      	beq.n	35afe <logobj_interface_setopt+0x56>
   35b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   35b0a:	2b04      	cmp	r3, #4
   35b0c:	d1f7      	bne.n	35afe <logobj_interface_setopt+0x56>
   35b0e:	2100      	movs	r1, #0
   35b10:	a803      	add	r0, sp, #12
   35b12:	f004 fcdb 	bl	3a4cc <rpc_logobj_client_request_alloc>
   35b16:	4605      	mov	r5, r0
   35b18:	2800      	cmp	r0, #0
   35b1a:	d175      	bne.n	35c08 <logobj_interface_setopt+0x160>
   35b1c:	9803      	ldr	r0, [sp, #12]
   35b1e:	2208      	movs	r2, #8
   35b20:	4629      	mov	r1, r5
   35b22:	300c      	adds	r0, #12
   35b24:	f012 fb50 	bl	481c8 <memset>
   35b28:	9803      	ldr	r0, [sp, #12]
   35b2a:	4631      	mov	r1, r6
   35b2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   35b2e:	300c      	adds	r0, #12
   35b30:	f012 fb2a 	bl	48188 <memcpy>
   35b34:	2308      	movs	r3, #8
   35b36:	9803      	ldr	r0, [sp, #12]
   35b38:	f247 0102 	movw	r1, #28674	; 0x7002
   35b3c:	7203      	strb	r3, [r0, #8]
   35b3e:	7245      	strb	r5, [r0, #9]
   35b40:	7285      	strb	r5, [r0, #10]
   35b42:	72c5      	strb	r5, [r0, #11]
   35b44:	6823      	ldr	r3, [r4, #0]
   35b46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   35b4a:	6023      	str	r3, [r4, #0]
   35b4c:	f004 fcd6 	bl	3a4fc <rpc_logobj_client_request_send>
   35b50:	2800      	cmp	r0, #0
   35b52:	d178      	bne.n	35c46 <logobj_interface_setopt+0x19e>
   35b54:	6a61      	ldr	r1, [r4, #36]	; 0x24
   35b56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   35b5a:	2900      	cmp	r1, #0
   35b5c:	bf08      	it	eq
   35b5e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   35b62:	ab04      	add	r3, sp, #16
   35b64:	f843 1d08 	str.w	r1, [r3, #-8]!
   35b68:	4638      	mov	r0, r7
   35b6a:	4611      	mov	r1, r2
   35b6c:	f008 f8a0 	bl	3dcb0 <interface_socket_wait>
   35b70:	4605      	mov	r5, r0
   35b72:	2800      	cmp	r0, #0
   35b74:	d140      	bne.n	35bf8 <logobj_interface_setopt+0x150>
   35b76:	4638      	mov	r0, r7
   35b78:	f008 f90e 	bl	3dd98 <interface_socket_from_handle_get>
   35b7c:	2800      	cmp	r0, #0
   35b7e:	d04e      	beq.n	35c1e <logobj_interface_setopt+0x176>
   35b80:	6843      	ldr	r3, [r0, #4]
   35b82:	2b00      	cmp	r3, #0
   35b84:	d04b      	beq.n	35c1e <logobj_interface_setopt+0x176>
   35b86:	6045      	str	r5, [r0, #4]
   35b88:	461d      	mov	r5, r3
   35b8a:	e035      	b.n	35bf8 <logobj_interface_setopt+0x150>
   35b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   35b8e:	9400      	str	r4, [sp, #0]
   35b90:	f008 f92a 	bl	3dde8 <interface_socket_setopt>
   35b94:	4605      	mov	r5, r0
   35b96:	4628      	mov	r0, r5
   35b98:	b005      	add	sp, #20
   35b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35b9c:	2100      	movs	r1, #0
   35b9e:	a802      	add	r0, sp, #8
   35ba0:	7835      	ldrb	r5, [r6, #0]
   35ba2:	f004 fc93 	bl	3a4cc <rpc_logobj_client_request_alloc>
   35ba6:	bb78      	cbnz	r0, 35c08 <logobj_interface_setopt+0x160>
   35ba8:	2d01      	cmp	r5, #1
   35baa:	bf08      	it	eq
   35bac:	4b2c      	ldreq	r3, [pc, #176]	; (35c60 <logobj_interface_setopt+0x1b8>)
   35bae:	f04f 0204 	mov.w	r2, #4
   35bb2:	bf08      	it	eq
   35bb4:	701d      	strbeq	r5, [r3, #0]
   35bb6:	2300      	movs	r3, #0
   35bb8:	9802      	ldr	r0, [sp, #8]
   35bba:	f247 0101 	movw	r1, #28673	; 0x7001
   35bbe:	7243      	strb	r3, [r0, #9]
   35bc0:	60c5      	str	r5, [r0, #12]
   35bc2:	7283      	strb	r3, [r0, #10]
   35bc4:	72c3      	strb	r3, [r0, #11]
   35bc6:	7202      	strb	r2, [r0, #8]
   35bc8:	6823      	ldr	r3, [r4, #0]
   35bca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   35bce:	6023      	str	r3, [r4, #0]
   35bd0:	f004 fc94 	bl	3a4fc <rpc_logobj_client_request_send>
   35bd4:	4606      	mov	r6, r0
   35bd6:	bb80      	cbnz	r0, 35c3a <logobj_interface_setopt+0x192>
   35bd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   35bda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   35bde:	2900      	cmp	r1, #0
   35be0:	bf08      	it	eq
   35be2:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   35be6:	ab04      	add	r3, sp, #16
   35be8:	f843 1d04 	str.w	r1, [r3, #-4]!
   35bec:	4638      	mov	r0, r7
   35bee:	4611      	mov	r1, r2
   35bf0:	f008 f85e 	bl	3dcb0 <interface_socket_wait>
   35bf4:	4605      	mov	r5, r0
   35bf6:	b150      	cbz	r0, 35c0e <logobj_interface_setopt+0x166>
   35bf8:	6823      	ldr	r3, [r4, #0]
   35bfa:	e76d      	b.n	35ad8 <logobj_interface_setopt+0x30>
   35bfc:	202a      	movs	r0, #42	; 0x2a
   35bfe:	f7f5 fca3 	bl	2b548 <bsd_os_errno_set>
   35c02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35c06:	e773      	b.n	35af0 <logobj_interface_setopt+0x48>
   35c08:	6823      	ldr	r3, [r4, #0]
   35c0a:	250c      	movs	r5, #12
   35c0c:	e764      	b.n	35ad8 <logobj_interface_setopt+0x30>
   35c0e:	4638      	mov	r0, r7
   35c10:	f008 f8c2 	bl	3dd98 <interface_socket_from_handle_get>
   35c14:	b140      	cbz	r0, 35c28 <logobj_interface_setopt+0x180>
   35c16:	6845      	ldr	r5, [r0, #4]
   35c18:	b135      	cbz	r5, 35c28 <logobj_interface_setopt+0x180>
   35c1a:	6046      	str	r6, [r0, #4]
   35c1c:	e7ec      	b.n	35bf8 <logobj_interface_setopt+0x150>
   35c1e:	4631      	mov	r1, r6
   35c20:	2204      	movs	r2, #4
   35c22:	4810      	ldr	r0, [pc, #64]	; (35c64 <logobj_interface_setopt+0x1bc>)
   35c24:	f012 fab0 	bl	48188 <memcpy>
   35c28:	6823      	ldr	r3, [r4, #0]
   35c2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35c2e:	6023      	str	r3, [r4, #0]
   35c30:	6823      	ldr	r3, [r4, #0]
   35c32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   35c36:	6023      	str	r3, [r4, #0]
   35c38:	e75a      	b.n	35af0 <logobj_interface_setopt+0x48>
   35c3a:	9802      	ldr	r0, [sp, #8]
   35c3c:	f004 fc74 	bl	3a528 <rpc_logobj_client_message_free>
   35c40:	2505      	movs	r5, #5
   35c42:	6823      	ldr	r3, [r4, #0]
   35c44:	e748      	b.n	35ad8 <logobj_interface_setopt+0x30>
   35c46:	9803      	ldr	r0, [sp, #12]
   35c48:	f004 fc6e 	bl	3a528 <rpc_logobj_client_message_free>
   35c4c:	2505      	movs	r5, #5
   35c4e:	6823      	ldr	r3, [r4, #0]
   35c50:	e742      	b.n	35ad8 <logobj_interface_setopt+0x30>
   35c52:	2009      	movs	r0, #9
   35c54:	f7f5 fc78 	bl	2b548 <bsd_os_errno_set>
   35c58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   35c5c:	e748      	b.n	35af0 <logobj_interface_setopt+0x48>
   35c5e:	bf00      	nop
   35c60:	2002d1b7 	.word	0x2002d1b7
   35c64:	20025b24 	.word	0x20025b24

00035c68 <logobj_interface_getopt>:
   35c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c6a:	2901      	cmp	r1, #1
   35c6c:	b083      	sub	sp, #12
   35c6e:	9e08      	ldr	r6, [sp, #32]
   35c70:	d030      	beq.n	35cd4 <logobj_interface_getopt+0x6c>
   35c72:	461f      	mov	r7, r3
   35c74:	f240 2305 	movw	r3, #517	; 0x205
   35c78:	4299      	cmp	r1, r3
   35c7a:	d134      	bne.n	35ce6 <logobj_interface_getopt+0x7e>
   35c7c:	4615      	mov	r5, r2
   35c7e:	f008 f88b 	bl	3dd98 <interface_socket_from_handle_get>
   35c82:	2800      	cmp	r0, #0
   35c84:	d037      	beq.n	35cf6 <logobj_interface_getopt+0x8e>
   35c86:	2d01      	cmp	r5, #1
   35c88:	d015      	beq.n	35cb6 <logobj_interface_getopt+0x4e>
   35c8a:	2d02      	cmp	r5, #2
   35c8c:	d10b      	bne.n	35ca6 <logobj_interface_getopt+0x3e>
   35c8e:	b387      	cbz	r7, 35cf2 <logobj_interface_getopt+0x8a>
   35c90:	6833      	ldr	r3, [r6, #0]
   35c92:	b373      	cbz	r3, 35cf2 <logobj_interface_getopt+0x8a>
   35c94:	2300      	movs	r3, #0
   35c96:	2201      	movs	r2, #1
   35c98:	4618      	mov	r0, r3
   35c9a:	491a      	ldr	r1, [pc, #104]	; (35d04 <logobj_interface_getopt+0x9c>)
   35c9c:	7809      	ldrb	r1, [r1, #0]
   35c9e:	7039      	strb	r1, [r7, #0]
   35ca0:	6032      	str	r2, [r6, #0]
   35ca2:	b003      	add	sp, #12
   35ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35ca6:	2009      	movs	r0, #9
   35ca8:	f7f5 fc4e 	bl	2b548 <bsd_os_errno_set>
   35cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35cb0:	4618      	mov	r0, r3
   35cb2:	b003      	add	sp, #12
   35cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35cb6:	b1e7      	cbz	r7, 35cf2 <logobj_interface_getopt+0x8a>
   35cb8:	6833      	ldr	r3, [r6, #0]
   35cba:	2b03      	cmp	r3, #3
   35cbc:	d919      	bls.n	35cf2 <logobj_interface_getopt+0x8a>
   35cbe:	4638      	mov	r0, r7
   35cc0:	2204      	movs	r2, #4
   35cc2:	4911      	ldr	r1, [pc, #68]	; (35d08 <logobj_interface_getopt+0xa0>)
   35cc4:	f012 fa60 	bl	48188 <memcpy>
   35cc8:	2300      	movs	r3, #0
   35cca:	2204      	movs	r2, #4
   35ccc:	4618      	mov	r0, r3
   35cce:	6032      	str	r2, [r6, #0]
   35cd0:	b003      	add	sp, #12
   35cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35cd4:	9600      	str	r6, [sp, #0]
   35cd6:	f008 f8cd 	bl	3de74 <interface_socket_getopt>
   35cda:	4603      	mov	r3, r0
   35cdc:	2800      	cmp	r0, #0
   35cde:	d1e3      	bne.n	35ca8 <logobj_interface_getopt+0x40>
   35ce0:	4618      	mov	r0, r3
   35ce2:	b003      	add	sp, #12
   35ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35ce6:	202a      	movs	r0, #42	; 0x2a
   35ce8:	f7f5 fc2e 	bl	2b548 <bsd_os_errno_set>
   35cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35cf0:	e7de      	b.n	35cb0 <logobj_interface_getopt+0x48>
   35cf2:	2016      	movs	r0, #22
   35cf4:	e7d8      	b.n	35ca8 <logobj_interface_getopt+0x40>
   35cf6:	2009      	movs	r0, #9
   35cf8:	f7f5 fc26 	bl	2b548 <bsd_os_errno_set>
   35cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   35d00:	e7d6      	b.n	35cb0 <logobj_interface_getopt+0x48>
   35d02:	bf00      	nop
   35d04:	2002d1b8 	.word	0x2002d1b8
   35d08:	20025b24 	.word	0x20025b24

00035d0c <logobj_interface_close>:
   35d0c:	b510      	push	{r4, lr}
   35d0e:	4604      	mov	r4, r0
   35d10:	f008 f842 	bl	3dd98 <interface_socket_from_handle_get>
   35d14:	b138      	cbz	r0, 35d26 <logobj_interface_close+0x1a>
   35d16:	4620      	mov	r0, r4
   35d18:	f007 ff7c 	bl	3dc14 <interface_socket_free>
   35d1c:	2300      	movs	r3, #0
   35d1e:	4a05      	ldr	r2, [pc, #20]	; (35d34 <logobj_interface_close+0x28>)
   35d20:	4618      	mov	r0, r3
   35d22:	6013      	str	r3, [r2, #0]
   35d24:	bd10      	pop	{r4, pc}
   35d26:	2009      	movs	r0, #9
   35d28:	f7f5 fc0e 	bl	2b548 <bsd_os_errno_set>
   35d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   35d30:	bd10      	pop	{r4, pc}
   35d32:	bf00      	nop
   35d34:	20025b28 	.word	0x20025b28

00035d38 <rpc_transport_send>:
   35d38:	f000 bee2 	b.w	36b00 <rpc_transport_ipc_send>

00035d3c <rpc_transport_rpc_alloc>:
   35d3c:	f000 bf62 	b.w	36c04 <rpc_transport_ipc_tx_rpc_data_alloc>

00035d40 <rpc_transport_data_alloc>:
   35d40:	f000 bfc8 	b.w	36cd4 <rpc_transport_ipc_tx_data_alloc>

00035d44 <rpc_transport_rpc_free>:
   35d44:	f000 bdb6 	b.w	368b4 <rpc_transport_ipc_msg_free>

00035d48 <rpc_transport_data_free>:
   35d48:	f000 ba64 	b.w	36214 <rpc_transport_ipc_data_free>

00035d4c <ipc_trace_init>:
   35d4c:	4b01      	ldr	r3, [pc, #4]	; (35d54 <ipc_trace_init+0x8>)
   35d4e:	6018      	str	r0, [r3, #0]
   35d50:	4770      	bx	lr
   35d52:	bf00      	nop
   35d54:	20025b38 	.word	0x20025b38

00035d58 <bsd_os_trace_irq_handler>:
   35d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   35d5a:	4b6e      	ldr	r3, [pc, #440]	; (35f14 <bsd_os_trace_irq_handler+0x1bc>)
   35d5c:	b083      	sub	sp, #12
   35d5e:	781b      	ldrb	r3, [r3, #0]
   35d60:	2b00      	cmp	r3, #0
   35d62:	f000 80d3 	beq.w	35f0c <bsd_os_trace_irq_handler+0x1b4>
   35d66:	4b6c      	ldr	r3, [pc, #432]	; (35f18 <bsd_os_trace_irq_handler+0x1c0>)
   35d68:	681c      	ldr	r4, [r3, #0]
   35d6a:	b124      	cbz	r4, 35d76 <bsd_os_trace_irq_handler+0x1e>
   35d6c:	68a3      	ldr	r3, [r4, #8]
   35d6e:	6862      	ldr	r2, [r4, #4]
   35d70:	4293      	cmp	r3, r2
   35d72:	f040 808c 	bne.w	35e8e <bsd_os_trace_irq_handler+0x136>
   35d76:	4b69      	ldr	r3, [pc, #420]	; (35f1c <bsd_os_trace_irq_handler+0x1c4>)
   35d78:	681c      	ldr	r4, [r3, #0]
   35d7a:	b11c      	cbz	r4, 35d84 <bsd_os_trace_irq_handler+0x2c>
   35d7c:	68a3      	ldr	r3, [r4, #8]
   35d7e:	6862      	ldr	r2, [r4, #4]
   35d80:	4293      	cmp	r3, r2
   35d82:	d146      	bne.n	35e12 <bsd_os_trace_irq_handler+0xba>
   35d84:	4b66      	ldr	r3, [pc, #408]	; (35f20 <bsd_os_trace_irq_handler+0x1c8>)
   35d86:	681c      	ldr	r4, [r3, #0]
   35d88:	b11c      	cbz	r4, 35d92 <bsd_os_trace_irq_handler+0x3a>
   35d8a:	68a3      	ldr	r3, [r4, #8]
   35d8c:	6862      	ldr	r2, [r4, #4]
   35d8e:	4293      	cmp	r3, r2
   35d90:	d101      	bne.n	35d96 <bsd_os_trace_irq_handler+0x3e>
   35d92:	b003      	add	sp, #12
   35d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d96:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   35d9a:	f8ad 2000 	strh.w	r2, [sp]
   35d9e:	7822      	ldrb	r2, [r4, #0]
   35da0:	466e      	mov	r6, sp
   35da2:	f88d 2004 	strb.w	r2, [sp, #4]
   35da6:	6862      	ldr	r2, [r4, #4]
   35da8:	2105      	movs	r1, #5
   35daa:	4293      	cmp	r3, r2
   35dac:	bf2a      	itet	cs
   35dae:	6927      	ldrcs	r7, [r4, #16]
   35db0:	1ad7      	subcc	r7, r2, r3
   35db2:	1aff      	subcs	r7, r7, r3
   35db4:	4293      	cmp	r3, r2
   35db6:	bf94      	ite	ls
   35db8:	2500      	movls	r5, #0
   35dba:	68e5      	ldrhi	r5, [r4, #12]
   35dbc:	b2bf      	uxth	r7, r7
   35dbe:	bf88      	it	hi
   35dc0:	1b52      	subhi	r2, r2, r5
   35dc2:	4630      	mov	r0, r6
   35dc4:	bf88      	it	hi
   35dc6:	b295      	uxthhi	r5, r2
   35dc8:	f8ad 7002 	strh.w	r7, [sp, #2]
   35dcc:	f011 f907 	bl	46fde <bsd_os_trace_put>
   35dd0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35dd4:	68a0      	ldr	r0, [r4, #8]
   35dd6:	f011 f902 	bl	46fde <bsd_os_trace_put>
   35dda:	68a3      	ldr	r3, [r4, #8]
   35ddc:	6922      	ldr	r2, [r4, #16]
   35dde:	441f      	add	r7, r3
   35de0:	4297      	cmp	r7, r2
   35de2:	bf08      	it	eq
   35de4:	68e3      	ldreq	r3, [r4, #12]
   35de6:	60a7      	str	r7, [r4, #8]
   35de8:	bf08      	it	eq
   35dea:	60a3      	streq	r3, [r4, #8]
   35dec:	2d00      	cmp	r5, #0
   35dee:	d0d0      	beq.n	35d92 <bsd_os_trace_irq_handler+0x3a>
   35df0:	2105      	movs	r1, #5
   35df2:	4630      	mov	r0, r6
   35df4:	f8ad 5002 	strh.w	r5, [sp, #2]
   35df8:	f011 f8f1 	bl	46fde <bsd_os_trace_put>
   35dfc:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35e00:	68e0      	ldr	r0, [r4, #12]
   35e02:	f011 f8ec 	bl	46fde <bsd_os_trace_put>
   35e06:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35e0a:	68e3      	ldr	r3, [r4, #12]
   35e0c:	4413      	add	r3, r2
   35e0e:	60a3      	str	r3, [r4, #8]
   35e10:	e7bf      	b.n	35d92 <bsd_os_trace_irq_handler+0x3a>
   35e12:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   35e16:	f8ad 2000 	strh.w	r2, [sp]
   35e1a:	7822      	ldrb	r2, [r4, #0]
   35e1c:	466e      	mov	r6, sp
   35e1e:	f88d 2004 	strb.w	r2, [sp, #4]
   35e22:	6862      	ldr	r2, [r4, #4]
   35e24:	2105      	movs	r1, #5
   35e26:	4293      	cmp	r3, r2
   35e28:	bf2a      	itet	cs
   35e2a:	6927      	ldrcs	r7, [r4, #16]
   35e2c:	1ad7      	subcc	r7, r2, r3
   35e2e:	1aff      	subcs	r7, r7, r3
   35e30:	4293      	cmp	r3, r2
   35e32:	bf94      	ite	ls
   35e34:	2500      	movls	r5, #0
   35e36:	68e5      	ldrhi	r5, [r4, #12]
   35e38:	b2bf      	uxth	r7, r7
   35e3a:	bf88      	it	hi
   35e3c:	1b52      	subhi	r2, r2, r5
   35e3e:	4630      	mov	r0, r6
   35e40:	bf88      	it	hi
   35e42:	b295      	uxthhi	r5, r2
   35e44:	f8ad 7002 	strh.w	r7, [sp, #2]
   35e48:	f011 f8c9 	bl	46fde <bsd_os_trace_put>
   35e4c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35e50:	68a0      	ldr	r0, [r4, #8]
   35e52:	f011 f8c4 	bl	46fde <bsd_os_trace_put>
   35e56:	68a3      	ldr	r3, [r4, #8]
   35e58:	6922      	ldr	r2, [r4, #16]
   35e5a:	441f      	add	r7, r3
   35e5c:	4297      	cmp	r7, r2
   35e5e:	bf08      	it	eq
   35e60:	68e3      	ldreq	r3, [r4, #12]
   35e62:	60a7      	str	r7, [r4, #8]
   35e64:	bf08      	it	eq
   35e66:	60a3      	streq	r3, [r4, #8]
   35e68:	2d00      	cmp	r5, #0
   35e6a:	d08b      	beq.n	35d84 <bsd_os_trace_irq_handler+0x2c>
   35e6c:	2105      	movs	r1, #5
   35e6e:	4630      	mov	r0, r6
   35e70:	f8ad 5002 	strh.w	r5, [sp, #2]
   35e74:	f011 f8b3 	bl	46fde <bsd_os_trace_put>
   35e78:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35e7c:	68e0      	ldr	r0, [r4, #12]
   35e7e:	f011 f8ae 	bl	46fde <bsd_os_trace_put>
   35e82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35e86:	68e3      	ldr	r3, [r4, #12]
   35e88:	4413      	add	r3, r2
   35e8a:	60a3      	str	r3, [r4, #8]
   35e8c:	e77a      	b.n	35d84 <bsd_os_trace_irq_handler+0x2c>
   35e8e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   35e92:	f8ad 2000 	strh.w	r2, [sp]
   35e96:	7822      	ldrb	r2, [r4, #0]
   35e98:	466e      	mov	r6, sp
   35e9a:	f88d 2004 	strb.w	r2, [sp, #4]
   35e9e:	6862      	ldr	r2, [r4, #4]
   35ea0:	2105      	movs	r1, #5
   35ea2:	4293      	cmp	r3, r2
   35ea4:	bf2a      	itet	cs
   35ea6:	6927      	ldrcs	r7, [r4, #16]
   35ea8:	1ad7      	subcc	r7, r2, r3
   35eaa:	1aff      	subcs	r7, r7, r3
   35eac:	4293      	cmp	r3, r2
   35eae:	bf94      	ite	ls
   35eb0:	2500      	movls	r5, #0
   35eb2:	68e5      	ldrhi	r5, [r4, #12]
   35eb4:	b2bf      	uxth	r7, r7
   35eb6:	bf88      	it	hi
   35eb8:	1b52      	subhi	r2, r2, r5
   35eba:	4630      	mov	r0, r6
   35ebc:	bf88      	it	hi
   35ebe:	b295      	uxthhi	r5, r2
   35ec0:	f8ad 7002 	strh.w	r7, [sp, #2]
   35ec4:	f011 f88b 	bl	46fde <bsd_os_trace_put>
   35ec8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35ecc:	68a0      	ldr	r0, [r4, #8]
   35ece:	f011 f886 	bl	46fde <bsd_os_trace_put>
   35ed2:	68a3      	ldr	r3, [r4, #8]
   35ed4:	6922      	ldr	r2, [r4, #16]
   35ed6:	441f      	add	r7, r3
   35ed8:	4297      	cmp	r7, r2
   35eda:	bf08      	it	eq
   35edc:	68e3      	ldreq	r3, [r4, #12]
   35ede:	60a7      	str	r7, [r4, #8]
   35ee0:	bf08      	it	eq
   35ee2:	60a3      	streq	r3, [r4, #8]
   35ee4:	2d00      	cmp	r5, #0
   35ee6:	f43f af46 	beq.w	35d76 <bsd_os_trace_irq_handler+0x1e>
   35eea:	2105      	movs	r1, #5
   35eec:	4630      	mov	r0, r6
   35eee:	f8ad 5002 	strh.w	r5, [sp, #2]
   35ef2:	f011 f874 	bl	46fde <bsd_os_trace_put>
   35ef6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   35efa:	68e0      	ldr	r0, [r4, #12]
   35efc:	f011 f86f 	bl	46fde <bsd_os_trace_put>
   35f00:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   35f04:	68e3      	ldr	r3, [r4, #12]
   35f06:	4413      	add	r3, r2
   35f08:	60a3      	str	r3, [r4, #8]
   35f0a:	e734      	b.n	35d76 <bsd_os_trace_irq_handler+0x1e>
   35f0c:	f7f5 fc30 	bl	2b770 <bsd_os_trace_irq_clear>
   35f10:	e729      	b.n	35d66 <bsd_os_trace_irq_handler+0xe>
   35f12:	bf00      	nop
   35f14:	2002d1ba 	.word	0x2002d1ba
   35f18:	20025b34 	.word	0x20025b34
   35f1c:	20025b2c 	.word	0x20025b2c
   35f20:	20025b30 	.word	0x20025b30

00035f24 <ipc_trace_handle>:
   35f24:	2200      	movs	r2, #0
   35f26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35f2a:	4bb2      	ldr	r3, [pc, #712]	; (361f4 <ipc_trace_handle+0x2d0>)
   35f2c:	b083      	sub	sp, #12
   35f2e:	681b      	ldr	r3, [r3, #0]
   35f30:	6919      	ldr	r1, [r3, #16]
   35f32:	695c      	ldr	r4, [r3, #20]
   35f34:	7c18      	ldrb	r0, [r3, #16]
   35f36:	741a      	strb	r2, [r3, #16]
   35f38:	7c58      	ldrb	r0, [r3, #17]
   35f3a:	745a      	strb	r2, [r3, #17]
   35f3c:	7c98      	ldrb	r0, [r3, #18]
   35f3e:	749a      	strb	r2, [r3, #18]
   35f40:	7cd8      	ldrb	r0, [r3, #19]
   35f42:	74da      	strb	r2, [r3, #19]
   35f44:	7d18      	ldrb	r0, [r3, #20]
   35f46:	751a      	strb	r2, [r3, #20]
   35f48:	7d58      	ldrb	r0, [r3, #21]
   35f4a:	755a      	strb	r2, [r3, #21]
   35f4c:	7d98      	ldrb	r0, [r3, #22]
   35f4e:	759a      	strb	r2, [r3, #22]
   35f50:	7dd8      	ldrb	r0, [r3, #23]
   35f52:	75da      	strb	r2, [r3, #23]
   35f54:	b1a9      	cbz	r1, 35f82 <ipc_trace_handle+0x5e>
   35f56:	3901      	subs	r1, #1
   35f58:	2903      	cmp	r1, #3
   35f5a:	d812      	bhi.n	35f82 <ipc_trace_handle+0x5e>
   35f5c:	e8df f001 	tbb	[pc, r1]
   35f60:	1402a97c 	.word	0x1402a97c
   35f64:	2501      	movs	r5, #1
   35f66:	2003      	movs	r0, #3
   35f68:	2200      	movs	r2, #0
   35f6a:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   35f6e:	4ca2      	ldr	r4, [pc, #648]	; (361f8 <ipc_trace_handle+0x2d4>)
   35f70:	7025      	strb	r5, [r4, #0]
   35f72:	7a1c      	ldrb	r4, [r3, #8]
   35f74:	7218      	strb	r0, [r3, #8]
   35f76:	7a58      	ldrb	r0, [r3, #9]
   35f78:	725a      	strb	r2, [r3, #9]
   35f7a:	7a98      	ldrb	r0, [r3, #10]
   35f7c:	729a      	strb	r2, [r3, #10]
   35f7e:	7ada      	ldrb	r2, [r3, #11]
   35f80:	72d9      	strb	r1, [r3, #11]
   35f82:	b003      	add	sp, #12
   35f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f88:	2104      	movs	r1, #4
   35f8a:	2200      	movs	r2, #0
   35f8c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   35f90:	7a1c      	ldrb	r4, [r3, #8]
   35f92:	7219      	strb	r1, [r3, #8]
   35f94:	7a59      	ldrb	r1, [r3, #9]
   35f96:	725a      	strb	r2, [r3, #9]
   35f98:	4997      	ldr	r1, [pc, #604]	; (361f8 <ipc_trace_handle+0x2d4>)
   35f9a:	7a9c      	ldrb	r4, [r3, #10]
   35f9c:	729a      	strb	r2, [r3, #10]
   35f9e:	7adc      	ldrb	r4, [r3, #11]
   35fa0:	72d8      	strb	r0, [r3, #11]
   35fa2:	700a      	strb	r2, [r1, #0]
   35fa4:	780b      	ldrb	r3, [r1, #0]
   35fa6:	2b00      	cmp	r3, #0
   35fa8:	f000 809f 	beq.w	360ea <ipc_trace_handle+0x1c6>
   35fac:	4b93      	ldr	r3, [pc, #588]	; (361fc <ipc_trace_handle+0x2d8>)
   35fae:	681c      	ldr	r4, [r3, #0]
   35fb0:	b124      	cbz	r4, 35fbc <ipc_trace_handle+0x98>
   35fb2:	68a3      	ldr	r3, [r4, #8]
   35fb4:	6862      	ldr	r2, [r4, #4]
   35fb6:	4293      	cmp	r3, r2
   35fb8:	f040 80d9 	bne.w	3616e <ipc_trace_handle+0x24a>
   35fbc:	4b90      	ldr	r3, [pc, #576]	; (36200 <ipc_trace_handle+0x2dc>)
   35fbe:	681c      	ldr	r4, [r3, #0]
   35fc0:	b124      	cbz	r4, 35fcc <ipc_trace_handle+0xa8>
   35fc2:	68a3      	ldr	r3, [r4, #8]
   35fc4:	6862      	ldr	r2, [r4, #4]
   35fc6:	4293      	cmp	r3, r2
   35fc8:	f040 8092 	bne.w	360f0 <ipc_trace_handle+0x1cc>
   35fcc:	4b8d      	ldr	r3, [pc, #564]	; (36204 <ipc_trace_handle+0x2e0>)
   35fce:	681c      	ldr	r4, [r3, #0]
   35fd0:	2c00      	cmp	r4, #0
   35fd2:	d0d6      	beq.n	35f82 <ipc_trace_handle+0x5e>
   35fd4:	68a3      	ldr	r3, [r4, #8]
   35fd6:	6862      	ldr	r2, [r4, #4]
   35fd8:	4293      	cmp	r3, r2
   35fda:	d0d2      	beq.n	35f82 <ipc_trace_handle+0x5e>
   35fdc:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   35fe0:	f8ad 2000 	strh.w	r2, [sp]
   35fe4:	7822      	ldrb	r2, [r4, #0]
   35fe6:	466e      	mov	r6, sp
   35fe8:	f88d 2004 	strb.w	r2, [sp, #4]
   35fec:	6862      	ldr	r2, [r4, #4]
   35fee:	2105      	movs	r1, #5
   35ff0:	4293      	cmp	r3, r2
   35ff2:	bf2a      	itet	cs
   35ff4:	6927      	ldrcs	r7, [r4, #16]
   35ff6:	1ad7      	subcc	r7, r2, r3
   35ff8:	1aff      	subcs	r7, r7, r3
   35ffa:	4293      	cmp	r3, r2
   35ffc:	bf94      	ite	ls
   35ffe:	2500      	movls	r5, #0
   36000:	68e5      	ldrhi	r5, [r4, #12]
   36002:	b2bf      	uxth	r7, r7
   36004:	bf88      	it	hi
   36006:	1b52      	subhi	r2, r2, r5
   36008:	4630      	mov	r0, r6
   3600a:	bf88      	it	hi
   3600c:	b295      	uxthhi	r5, r2
   3600e:	f8ad 7002 	strh.w	r7, [sp, #2]
   36012:	f010 ffe4 	bl	46fde <bsd_os_trace_put>
   36016:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3601a:	68a0      	ldr	r0, [r4, #8]
   3601c:	f010 ffdf 	bl	46fde <bsd_os_trace_put>
   36020:	68a3      	ldr	r3, [r4, #8]
   36022:	6922      	ldr	r2, [r4, #16]
   36024:	441f      	add	r7, r3
   36026:	4297      	cmp	r7, r2
   36028:	bf08      	it	eq
   3602a:	68e3      	ldreq	r3, [r4, #12]
   3602c:	60a7      	str	r7, [r4, #8]
   3602e:	bf08      	it	eq
   36030:	60a3      	streq	r3, [r4, #8]
   36032:	2d00      	cmp	r5, #0
   36034:	d0a5      	beq.n	35f82 <ipc_trace_handle+0x5e>
   36036:	2105      	movs	r1, #5
   36038:	4630      	mov	r0, r6
   3603a:	f8ad 5002 	strh.w	r5, [sp, #2]
   3603e:	f010 ffce 	bl	46fde <bsd_os_trace_put>
   36042:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   36046:	68e0      	ldr	r0, [r4, #12]
   36048:	f010 ffc9 	bl	46fde <bsd_os_trace_put>
   3604c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   36050:	68e3      	ldr	r3, [r4, #12]
   36052:	4413      	add	r3, r2
   36054:	60a3      	str	r3, [r4, #8]
   36056:	e794      	b.n	35f82 <ipc_trace_handle+0x5e>
   36058:	4a67      	ldr	r2, [pc, #412]	; (361f8 <ipc_trace_handle+0x2d4>)
   3605a:	7811      	ldrb	r1, [r2, #0]
   3605c:	b109      	cbz	r1, 36062 <ipc_trace_handle+0x13e>
   3605e:	2100      	movs	r1, #0
   36060:	7011      	strb	r1, [r2, #0]
   36062:	68a5      	ldr	r5, [r4, #8]
   36064:	2d00      	cmp	r5, #0
   36066:	d03b      	beq.n	360e0 <ipc_trace_handle+0x1bc>
   36068:	f04f 0c00 	mov.w	ip, #0
   3606c:	f8df a190 	ldr.w	sl, [pc, #400]	; 36200 <ipc_trace_handle+0x2dc>
   36070:	f8df b188 	ldr.w	fp, [pc, #392]	; 361fc <ipc_trace_handle+0x2d8>
   36074:	4963      	ldr	r1, [pc, #396]	; (36204 <ipc_trace_handle+0x2e0>)
   36076:	46e1      	mov	r9, ip
   36078:	4666      	mov	r6, ip
   3607a:	4662      	mov	r2, ip
   3607c:	f8d1 e000 	ldr.w	lr, [r1]
   36080:	f8da 8000 	ldr.w	r8, [sl]
   36084:	f8db 7000 	ldr.w	r7, [fp]
   36088:	e008      	b.n	3609c <ipc_trace_handle+0x178>
   3608a:	2963      	cmp	r1, #99	; 0x63
   3608c:	d016      	beq.n	360bc <ipc_trace_handle+0x198>
   3608e:	2961      	cmp	r1, #97	; 0x61
   36090:	bf04      	itt	eq
   36092:	4607      	moveq	r7, r0
   36094:	2601      	moveq	r6, #1
   36096:	3201      	adds	r2, #1
   36098:	42aa      	cmp	r2, r5
   3609a:	d013      	beq.n	360c4 <ipc_trace_handle+0x1a0>
   3609c:	1c91      	adds	r1, r2, #2
   3609e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   360a2:	6848      	ldr	r0, [r1, #4]
   360a4:	7801      	ldrb	r1, [r0, #0]
   360a6:	2962      	cmp	r1, #98	; 0x62
   360a8:	d1ef      	bne.n	3608a <ipc_trace_handle+0x166>
   360aa:	4680      	mov	r8, r0
   360ac:	f04f 0901 	mov.w	r9, #1
   360b0:	e7f1      	b.n	36096 <ipc_trace_handle+0x172>
   360b2:	f7f5 fb55 	bl	2b760 <bsd_os_trace_irq_set>
   360b6:	b003      	add	sp, #12
   360b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   360bc:	4686      	mov	lr, r0
   360be:	f04f 0c01 	mov.w	ip, #1
   360c2:	e7e8      	b.n	36096 <ipc_trace_handle+0x172>
   360c4:	2e00      	cmp	r6, #0
   360c6:	f040 8091 	bne.w	361ec <ipc_trace_handle+0x2c8>
   360ca:	f1b9 0f00 	cmp.w	r9, #0
   360ce:	d001      	beq.n	360d4 <ipc_trace_handle+0x1b0>
   360d0:	f8ca 8000 	str.w	r8, [sl]
   360d4:	f1bc 0f00 	cmp.w	ip, #0
   360d8:	d002      	beq.n	360e0 <ipc_trace_handle+0x1bc>
   360da:	4a4a      	ldr	r2, [pc, #296]	; (36204 <ipc_trace_handle+0x2e0>)
   360dc:	f8c2 e000 	str.w	lr, [r2]
   360e0:	2001      	movs	r0, #1
   360e2:	2200      	movs	r2, #0
   360e4:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   360e8:	e743      	b.n	35f72 <ipc_trace_handle+0x4e>
   360ea:	f7f5 fb41 	bl	2b770 <bsd_os_trace_irq_clear>
   360ee:	e75d      	b.n	35fac <ipc_trace_handle+0x88>
   360f0:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   360f4:	f8ad 2000 	strh.w	r2, [sp]
   360f8:	7822      	ldrb	r2, [r4, #0]
   360fa:	466e      	mov	r6, sp
   360fc:	f88d 2004 	strb.w	r2, [sp, #4]
   36100:	6862      	ldr	r2, [r4, #4]
   36102:	2105      	movs	r1, #5
   36104:	4293      	cmp	r3, r2
   36106:	bf2a      	itet	cs
   36108:	6927      	ldrcs	r7, [r4, #16]
   3610a:	1ad7      	subcc	r7, r2, r3
   3610c:	1aff      	subcs	r7, r7, r3
   3610e:	4293      	cmp	r3, r2
   36110:	bf94      	ite	ls
   36112:	2500      	movls	r5, #0
   36114:	68e5      	ldrhi	r5, [r4, #12]
   36116:	b2bf      	uxth	r7, r7
   36118:	bf88      	it	hi
   3611a:	1b52      	subhi	r2, r2, r5
   3611c:	4630      	mov	r0, r6
   3611e:	bf88      	it	hi
   36120:	b295      	uxthhi	r5, r2
   36122:	f8ad 7002 	strh.w	r7, [sp, #2]
   36126:	f010 ff5a 	bl	46fde <bsd_os_trace_put>
   3612a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3612e:	68a0      	ldr	r0, [r4, #8]
   36130:	f010 ff55 	bl	46fde <bsd_os_trace_put>
   36134:	68a3      	ldr	r3, [r4, #8]
   36136:	6922      	ldr	r2, [r4, #16]
   36138:	441f      	add	r7, r3
   3613a:	4297      	cmp	r7, r2
   3613c:	bf08      	it	eq
   3613e:	68e3      	ldreq	r3, [r4, #12]
   36140:	60a7      	str	r7, [r4, #8]
   36142:	bf08      	it	eq
   36144:	60a3      	streq	r3, [r4, #8]
   36146:	2d00      	cmp	r5, #0
   36148:	f43f af40 	beq.w	35fcc <ipc_trace_handle+0xa8>
   3614c:	2105      	movs	r1, #5
   3614e:	4630      	mov	r0, r6
   36150:	f8ad 5002 	strh.w	r5, [sp, #2]
   36154:	f010 ff43 	bl	46fde <bsd_os_trace_put>
   36158:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   3615c:	68e0      	ldr	r0, [r4, #12]
   3615e:	f010 ff3e 	bl	46fde <bsd_os_trace_put>
   36162:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   36166:	68e3      	ldr	r3, [r4, #12]
   36168:	4413      	add	r3, r2
   3616a:	60a3      	str	r3, [r4, #8]
   3616c:	e72e      	b.n	35fcc <ipc_trace_handle+0xa8>
   3616e:	f64b 62ef 	movw	r2, #48879	; 0xbeef
   36172:	f8ad 2000 	strh.w	r2, [sp]
   36176:	7822      	ldrb	r2, [r4, #0]
   36178:	466e      	mov	r6, sp
   3617a:	f88d 2004 	strb.w	r2, [sp, #4]
   3617e:	6862      	ldr	r2, [r4, #4]
   36180:	2105      	movs	r1, #5
   36182:	4293      	cmp	r3, r2
   36184:	bf2a      	itet	cs
   36186:	6927      	ldrcs	r7, [r4, #16]
   36188:	1ad7      	subcc	r7, r2, r3
   3618a:	1aff      	subcs	r7, r7, r3
   3618c:	4293      	cmp	r3, r2
   3618e:	bf94      	ite	ls
   36190:	2500      	movls	r5, #0
   36192:	68e5      	ldrhi	r5, [r4, #12]
   36194:	b2bf      	uxth	r7, r7
   36196:	bf88      	it	hi
   36198:	1b52      	subhi	r2, r2, r5
   3619a:	4630      	mov	r0, r6
   3619c:	bf88      	it	hi
   3619e:	b295      	uxthhi	r5, r2
   361a0:	f8ad 7002 	strh.w	r7, [sp, #2]
   361a4:	f010 ff1b 	bl	46fde <bsd_os_trace_put>
   361a8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   361ac:	68a0      	ldr	r0, [r4, #8]
   361ae:	f010 ff16 	bl	46fde <bsd_os_trace_put>
   361b2:	68a3      	ldr	r3, [r4, #8]
   361b4:	6922      	ldr	r2, [r4, #16]
   361b6:	441f      	add	r7, r3
   361b8:	4297      	cmp	r7, r2
   361ba:	bf08      	it	eq
   361bc:	68e3      	ldreq	r3, [r4, #12]
   361be:	60a7      	str	r7, [r4, #8]
   361c0:	bf08      	it	eq
   361c2:	60a3      	streq	r3, [r4, #8]
   361c4:	2d00      	cmp	r5, #0
   361c6:	f43f aef9 	beq.w	35fbc <ipc_trace_handle+0x98>
   361ca:	2105      	movs	r1, #5
   361cc:	4630      	mov	r0, r6
   361ce:	f8ad 5002 	strh.w	r5, [sp, #2]
   361d2:	f010 ff04 	bl	46fde <bsd_os_trace_put>
   361d6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   361da:	68e0      	ldr	r0, [r4, #12]
   361dc:	f010 feff 	bl	46fde <bsd_os_trace_put>
   361e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   361e4:	68e3      	ldr	r3, [r4, #12]
   361e6:	4413      	add	r3, r2
   361e8:	60a3      	str	r3, [r4, #8]
   361ea:	e6e7      	b.n	35fbc <ipc_trace_handle+0x98>
   361ec:	f8cb 7000 	str.w	r7, [fp]
   361f0:	e76b      	b.n	360ca <ipc_trace_handle+0x1a6>
   361f2:	bf00      	nop
   361f4:	20025b38 	.word	0x20025b38
   361f8:	2002d1ba 	.word	0x2002d1ba
   361fc:	20025b34 	.word	0x20025b34
   36200:	20025b2c 	.word	0x20025b2c
   36204:	20025b30 	.word	0x20025b30

00036208 <rpc_trace_coredump_in_progress>:
   36208:	4b01      	ldr	r3, [pc, #4]	; (36210 <rpc_trace_coredump_in_progress+0x8>)
   3620a:	7818      	ldrb	r0, [r3, #0]
   3620c:	4770      	bx	lr
   3620e:	bf00      	nop
   36210:	2002d1ba 	.word	0x2002d1ba

00036214 <rpc_transport_ipc_data_free>:
   36214:	b510      	push	{r4, lr}
   36216:	4b0e      	ldr	r3, [pc, #56]	; (36250 <rpc_transport_ipc_data_free+0x3c>)
   36218:	4604      	mov	r4, r0
   3621a:	e9d3 2300 	ldrd	r2, r3, [r3]
   3621e:	4413      	add	r3, r2
   36220:	4298      	cmp	r0, r3
   36222:	d20d      	bcs.n	36240 <rpc_transport_ipc_data_free+0x2c>
   36224:	4282      	cmp	r2, r0
   36226:	d80b      	bhi.n	36240 <rpc_transport_ipc_data_free+0x2c>
   36228:	f000 fd24 	bl	36c74 <rpc_transport_ipc_tx_rpc_ctrl_alloc>
   3622c:	b158      	cbz	r0, 36246 <rpc_transport_ipc_data_free+0x32>
   3622e:	4a09      	ldr	r2, [pc, #36]	; (36254 <rpc_transport_ipc_data_free+0x40>)
   36230:	6084      	str	r4, [r0, #8]
   36232:	6002      	str	r2, [r0, #0]
   36234:	f7ff fd80 	bl	35d38 <rpc_transport_send>
   36238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3623c:	f7f5 ba80 	b.w	2b740 <bsd_os_application_irq_set>
   36240:	4620      	mov	r0, r4
   36242:	f007 f961 	bl	3d508 <nrf_shared_free>
   36246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3624a:	f7f5 ba79 	b.w	2b740 <bsd_os_application_irq_set>
   3624e:	bf00      	nop
   36250:	20025b3c 	.word	0x20025b3c
   36254:	00020001 	.word	0x00020001

00036258 <rpc_transport_ipc_init>:
   36258:	b188      	cbz	r0, 3627e <rpc_transport_ipc_init+0x26>
   3625a:	b510      	push	{r4, lr}
   3625c:	b082      	sub	sp, #8
   3625e:	aa01      	add	r2, sp, #4
   36260:	4669      	mov	r1, sp
   36262:	4604      	mov	r4, r0
   36264:	f000 fb62 	bl	3692c <rpc_transport_ipc_tx_init>
   36268:	4602      	mov	r2, r0
   3626a:	b148      	cbz	r0, 36280 <rpc_transport_ipc_init+0x28>
   3626c:	4b12      	ldr	r3, [pc, #72]	; (362b8 <rpc_transport_ipc_init+0x60>)
   3626e:	3428      	adds	r4, #40	; 0x28
   36270:	e894 0003 	ldmia.w	r4, {r0, r1}
   36274:	e883 0003 	stmia.w	r3, {r0, r1}
   36278:	4610      	mov	r0, r2
   3627a:	b002      	add	sp, #8
   3627c:	bd10      	pop	{r4, pc}
   3627e:	e7fe      	b.n	3627e <rpc_transport_ipc_init+0x26>
   36280:	e9dd 1200 	ldrd	r1, r2, [sp]
   36284:	4620      	mov	r0, r4
   36286:	f000 f9ef 	bl	36668 <rpc_transport_ipc_rx_init>
   3628a:	4602      	mov	r2, r0
   3628c:	4b0a      	ldr	r3, [pc, #40]	; (362b8 <rpc_transport_ipc_init+0x60>)
   3628e:	f104 0128 	add.w	r1, r4, #40	; 0x28
   36292:	c903      	ldmia	r1, {r0, r1}
   36294:	e883 0003 	stmia.w	r3, {r0, r1}
   36298:	2a00      	cmp	r2, #0
   3629a:	d1ed      	bne.n	36278 <rpc_transport_ipc_init+0x20>
   3629c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   362a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   362a2:	4906      	ldr	r1, [pc, #24]	; (362bc <rpc_transport_ipc_init+0x64>)
   362a4:	015b      	lsls	r3, r3, #5
   362a6:	b2db      	uxtb	r3, r3
   362a8:	f881 332a 	strb.w	r3, [r1, #810]	; 0x32a
   362ac:	f8c1 0184 	str.w	r0, [r1, #388]	; 0x184
   362b0:	6048      	str	r0, [r1, #4]
   362b2:	4610      	mov	r0, r2
   362b4:	b002      	add	sp, #8
   362b6:	bd10      	pop	{r4, pc}
   362b8:	20025b3c 	.word	0x20025b3c
   362bc:	e000e100 	.word	0xe000e100

000362c0 <rpc_transport_ipc_shutdown>:
   362c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   362c4:	b08c      	sub	sp, #48	; 0x30
   362c6:	f000 fd0f 	bl	36ce8 <rpc_transport_ipc_tx_suspend>
   362ca:	2200      	movs	r2, #0
   362cc:	2010      	movs	r0, #16
   362ce:	4b31      	ldr	r3, [pc, #196]	; (36394 <rpc_transport_ipc_shutdown+0xd4>)
   362d0:	f04f 0c01 	mov.w	ip, #1
   362d4:	4c30      	ldr	r4, [pc, #192]	; (36398 <rpc_transport_ipc_shutdown+0xd8>)
   362d6:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   362da:	6821      	ldr	r1, [r4, #0]
   362dc:	2704      	movs	r7, #4
   362de:	910a      	str	r1, [sp, #40]	; 0x28
   362e0:	492e      	ldr	r1, [pc, #184]	; (3639c <rpc_transport_ipc_shutdown+0xdc>)
   362e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   362e4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   362e8:	680d      	ldr	r5, [r1, #0]
   362ea:	950b      	str	r5, [sp, #44]	; 0x2c
   362ec:	4d2c      	ldr	r5, [pc, #176]	; (363a0 <rpc_transport_ipc_shutdown+0xe0>)
   362ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   362f0:	f8c3 2590 	str.w	r2, [r3, #1424]	; 0x590
   362f4:	682d      	ldr	r5, [r5, #0]
   362f6:	2640      	movs	r6, #64	; 0x40
   362f8:	9509      	str	r5, [sp, #36]	; 0x24
   362fa:	4d2a      	ldr	r5, [pc, #168]	; (363a4 <rpc_transport_ipc_shutdown+0xe4>)
   362fc:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   36300:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
   36304:	f8d5 e000 	ldr.w	lr, [r5]
   36308:	2580      	movs	r5, #128	; 0x80
   3630a:	f8cd e020 	str.w	lr, [sp, #32]
   3630e:	f8dd e020 	ldr.w	lr, [sp, #32]
   36312:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
   36316:	f8d4 e000 	ldr.w	lr, [r4]
   3631a:	2405      	movs	r4, #5
   3631c:	f8cd e01c 	str.w	lr, [sp, #28]
   36320:	f8df e08c 	ldr.w	lr, [pc, #140]	; 363b0 <rpc_transport_ipc_shutdown+0xf0>
   36324:	f8dd 801c 	ldr.w	r8, [sp, #28]
   36328:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
   3632c:	f8de e000 	ldr.w	lr, [lr]
   36330:	f8cd e018 	str.w	lr, [sp, #24]
   36334:	f8df e07c 	ldr.w	lr, [pc, #124]	; 363b4 <rpc_transport_ipc_shutdown+0xf4>
   36338:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3633c:	f8c3 25ac 	str.w	r2, [r3, #1452]	; 0x5ac
   36340:	f8de e000 	ldr.w	lr, [lr]
   36344:	f8cd e014 	str.w	lr, [sp, #20]
   36348:	f8dd e014 	ldr.w	lr, [sp, #20]
   3634c:	f8c3 c308 	str.w	ip, [r3, #776]	; 0x308
   36350:	f8d1 c000 	ldr.w	ip, [r1]
   36354:	f8cd c010 	str.w	ip, [sp, #16]
   36358:	f8dd c010 	ldr.w	ip, [sp, #16]
   3635c:	f8c3 7308 	str.w	r7, [r3, #776]	; 0x308
   36360:	680f      	ldr	r7, [r1, #0]
   36362:	9703      	str	r7, [sp, #12]
   36364:	9f03      	ldr	r7, [sp, #12]
   36366:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   3636a:	6808      	ldr	r0, [r1, #0]
   3636c:	9002      	str	r0, [sp, #8]
   3636e:	9802      	ldr	r0, [sp, #8]
   36370:	f8c3 6308 	str.w	r6, [r3, #776]	; 0x308
   36374:	680e      	ldr	r6, [r1, #0]
   36376:	480c      	ldr	r0, [pc, #48]	; (363a8 <rpc_transport_ipc_shutdown+0xe8>)
   36378:	9601      	str	r6, [sp, #4]
   3637a:	9e01      	ldr	r6, [sp, #4]
   3637c:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
   36380:	6809      	ldr	r1, [r1, #0]
   36382:	4b0a      	ldr	r3, [pc, #40]	; (363ac <rpc_transport_ipc_shutdown+0xec>)
   36384:	9100      	str	r1, [sp, #0]
   36386:	9900      	ldr	r1, [sp, #0]
   36388:	8002      	strh	r2, [r0, #0]
   3638a:	601c      	str	r4, [r3, #0]
   3638c:	b00c      	add	sp, #48	; 0x30
   3638e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36392:	bf00      	nop
   36394:	4002a000 	.word	0x4002a000
   36398:	4002a5a0 	.word	0x4002a5a0
   3639c:	4002a308 	.word	0x4002a308
   363a0:	4002a590 	.word	0x4002a590
   363a4:	4002a598 	.word	0x4002a598
   363a8:	2002a9bc 	.word	0x2002a9bc
   363ac:	20025b54 	.word	0x20025b54
   363b0:	4002a5a8 	.word	0x4002a5a8
   363b4:	4002a5ac 	.word	0x4002a5ac

000363b8 <bsd_os_application_irq_handler>:
   363b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   363bc:	f7f5 f9c8 	bl	2b750 <bsd_os_application_irq_clear>
   363c0:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 36498 <bsd_os_application_irq_handler+0xe0>
   363c4:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 3649c <bsd_os_application_irq_handler+0xe4>
   363c8:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 364a0 <bsd_os_application_irq_handler+0xe8>
   363cc:	f108 0908 	add.w	r9, r8, #8
   363d0:	f858 7b04 	ldr.w	r7, [r8], #4
   363d4:	6839      	ldr	r1, [r7, #0]
   363d6:	b361      	cbz	r1, 36432 <bsd_os_application_irq_handler+0x7a>
   363d8:	2400      	movs	r4, #0
   363da:	e002      	b.n	363e2 <bsd_os_application_irq_handler+0x2a>
   363dc:	3401      	adds	r4, #1
   363de:	428c      	cmp	r4, r1
   363e0:	d227      	bcs.n	36432 <bsd_os_application_irq_handler+0x7a>
   363e2:	00e6      	lsls	r6, r4, #3
   363e4:	19bd      	adds	r5, r7, r6
   363e6:	68aa      	ldr	r2, [r5, #8]
   363e8:	2a00      	cmp	r2, #0
   363ea:	d0f7      	beq.n	363dc <bsd_os_application_irq_handler+0x24>
   363ec:	686a      	ldr	r2, [r5, #4]
   363ee:	b2d2      	uxtb	r2, r2
   363f0:	2a01      	cmp	r2, #1
   363f2:	d1f3      	bne.n	363dc <bsd_os_application_irq_handler+0x24>
   363f4:	6868      	ldr	r0, [r5, #4]
   363f6:	f8bb 2000 	ldrh.w	r2, [fp]
   363fa:	ebb2 4f10 	cmp.w	r2, r0, lsr #16
   363fe:	d1ed      	bne.n	363dc <bsd_os_application_irq_handler+0x24>
   36400:	68a8      	ldr	r0, [r5, #8]
   36402:	6841      	ldr	r1, [r0, #4]
   36404:	b2c9      	uxtb	r1, r1
   36406:	2902      	cmp	r1, #2
   36408:	d02c      	beq.n	36464 <bsd_os_application_irq_handler+0xac>
   3640a:	2901      	cmp	r1, #1
   3640c:	d015      	beq.n	3643a <bsd_os_application_irq_handler+0x82>
   3640e:	3604      	adds	r6, #4
   36410:	59b9      	ldr	r1, [r7, r6]
   36412:	3201      	adds	r2, #1
   36414:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   36418:	f041 0103 	orr.w	r1, r1, #3
   3641c:	51b9      	str	r1, [r7, r6]
   3641e:	f8ab 2000 	strh.w	r2, [fp]
   36422:	f7f5 f98d 	bl	2b740 <bsd_os_application_irq_set>
   36426:	f858 7c04 	ldr.w	r7, [r8, #-4]
   3642a:	3401      	adds	r4, #1
   3642c:	6839      	ldr	r1, [r7, #0]
   3642e:	428c      	cmp	r4, r1
   36430:	d3d7      	bcc.n	363e2 <bsd_os_application_irq_handler+0x2a>
   36432:	45c1      	cmp	r9, r8
   36434:	d1cc      	bne.n	363d0 <bsd_os_application_irq_handler+0x18>
   36436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3643a:	6801      	ldr	r1, [r0, #0]
   3643c:	0c09      	lsrs	r1, r1, #16
   3643e:	f002 ff9d 	bl	3937c <rpc_handle_ctrl_message>
   36442:	2801      	cmp	r0, #1
   36444:	d014      	beq.n	36470 <bsd_os_application_irq_handler+0xb8>
   36446:	d310      	bcc.n	3646a <bsd_os_application_irq_handler+0xb2>
   36448:	2802      	cmp	r0, #2
   3644a:	d007      	beq.n	3645c <bsd_os_application_irq_handler+0xa4>
   3644c:	2203      	movs	r2, #3
   3644e:	4b11      	ldr	r3, [pc, #68]	; (36494 <bsd_os_application_irq_handler+0xdc>)
   36450:	4610      	mov	r0, r2
   36452:	f8ca 2000 	str.w	r2, [sl]
   36456:	601a      	str	r2, [r3, #0]
   36458:	f005 fc7a 	bl	3bd50 <rpc_transport_ipc_fault_handler>
   3645c:	f858 7c04 	ldr.w	r7, [r8, #-4]
   36460:	6839      	ldr	r1, [r7, #0]
   36462:	e7bb      	b.n	363dc <bsd_os_application_irq_handler+0x24>
   36464:	f002 ffa2 	bl	393ac <rpc_handle_data_message>
   36468:	e7eb      	b.n	36442 <bsd_os_application_irq_handler+0x8a>
   3646a:	f8bb 2000 	ldrh.w	r2, [fp]
   3646e:	e7ce      	b.n	3640e <bsd_os_application_irq_handler+0x56>
   36470:	686a      	ldr	r2, [r5, #4]
   36472:	f8bb 1000 	ldrh.w	r1, [fp]
   36476:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   3647a:	f042 0202 	orr.w	r2, r2, #2
   3647e:	606a      	str	r2, [r5, #4]
   36480:	1c4a      	adds	r2, r1, #1
   36482:	f8ab 2000 	strh.w	r2, [fp]
   36486:	f7f5 f95b 	bl	2b740 <bsd_os_application_irq_set>
   3648a:	f858 7c04 	ldr.w	r7, [r8, #-4]
   3648e:	6839      	ldr	r1, [r7, #0]
   36490:	e7a4      	b.n	363dc <bsd_os_application_irq_handler+0x24>
   36492:	bf00      	nop
   36494:	20025b44 	.word	0x20025b44
   36498:	20025b4c 	.word	0x20025b4c
   3649c:	2002a9bc 	.word	0x2002a9bc
   364a0:	20025b54 	.word	0x20025b54

000364a4 <IPC_IRQHandler>:
   364a4:	b570      	push	{r4, r5, r6, lr}
   364a6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   364aa:	4d62      	ldr	r5, [pc, #392]	; (36634 <IPC_IRQHandler+0x190>)
   364ac:	4c62      	ldr	r4, [pc, #392]	; (36638 <IPC_IRQHandler+0x194>)
   364ae:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
   364b2:	f8d4 330c 	ldr.w	r3, [r4, #780]	; 0x30c
   364b6:	b086      	sub	sp, #24
   364b8:	061b      	lsls	r3, r3, #24
   364ba:	d50b      	bpl.n	364d4 <IPC_IRQHandler+0x30>
   364bc:	f7ff fd32 	bl	35f24 <ipc_trace_handle>
   364c0:	f7ff fea2 	bl	36208 <rpc_trace_coredump_in_progress>
   364c4:	2800      	cmp	r0, #0
   364c6:	d151      	bne.n	3656c <IPC_IRQHandler+0xc8>
   364c8:	4b5c      	ldr	r3, [pc, #368]	; (3663c <IPC_IRQHandler+0x198>)
   364ca:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
   364ce:	681b      	ldr	r3, [r3, #0]
   364d0:	9301      	str	r3, [sp, #4]
   364d2:	9b01      	ldr	r3, [sp, #4]
   364d4:	4b58      	ldr	r3, [pc, #352]	; (36638 <IPC_IRQHandler+0x194>)
   364d6:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   364da:	f012 0201 	ands.w	r2, r2, #1
   364de:	d11c      	bne.n	3651a <IPC_IRQHandler+0x76>
   364e0:	f8d3 130c 	ldr.w	r1, [r3, #780]	; 0x30c
   364e4:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   364e8:	d145      	bne.n	36576 <IPC_IRQHandler+0xd2>
   364ea:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   364ee:	0750      	lsls	r0, r2, #29
   364f0:	d50c      	bpl.n	3650c <IPC_IRQHandler+0x68>
   364f2:	4a53      	ldr	r2, [pc, #332]	; (36640 <IPC_IRQHandler+0x19c>)
   364f4:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   364f8:	6812      	ldr	r2, [r2, #0]
   364fa:	4b52      	ldr	r3, [pc, #328]	; (36644 <IPC_IRQHandler+0x1a0>)
   364fc:	9204      	str	r2, [sp, #16]
   364fe:	9a04      	ldr	r2, [sp, #16]
   36500:	681a      	ldr	r2, [r3, #0]
   36502:	2a02      	cmp	r2, #2
   36504:	d079      	beq.n	365fa <IPC_IRQHandler+0x156>
   36506:	681a      	ldr	r2, [r3, #0]
   36508:	2a01      	cmp	r2, #1
   3650a:	d05b      	beq.n	365c4 <IPC_IRQHandler+0x120>
   3650c:	4b4a      	ldr	r3, [pc, #296]	; (36638 <IPC_IRQHandler+0x194>)
   3650e:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
   36512:	06d2      	lsls	r2, r2, #27
   36514:	d41e      	bmi.n	36554 <IPC_IRQHandler+0xb0>
   36516:	b006      	add	sp, #24
   36518:	bd70      	pop	{r4, r5, r6, pc}
   3651a:	2000      	movs	r0, #0
   3651c:	f248 0202 	movw	r2, #32770	; 0x8002
   36520:	4949      	ldr	r1, [pc, #292]	; (36648 <IPC_IRQHandler+0x1a4>)
   36522:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   36526:	6809      	ldr	r1, [r1, #0]
   36528:	9102      	str	r1, [sp, #8]
   3652a:	9902      	ldr	r1, [sp, #8]
   3652c:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   36530:	4293      	cmp	r3, r2
   36532:	d06b      	beq.n	3660c <IPC_IRQHandler+0x168>
   36534:	d82a      	bhi.n	3658c <IPC_IRQHandler+0xe8>
   36536:	2b00      	cmp	r3, #0
   36538:	d062      	beq.n	36600 <IPC_IRQHandler+0x15c>
   3653a:	2b02      	cmp	r3, #2
   3653c:	d937      	bls.n	365ae <IPC_IRQHandler+0x10a>
   3653e:	f248 0201 	movw	r2, #32769	; 0x8001
   36542:	4293      	cmp	r3, r2
   36544:	d15c      	bne.n	36600 <IPC_IRQHandler+0x15c>
   36546:	2003      	movs	r0, #3
   36548:	2207      	movs	r2, #7
   3654a:	493e      	ldr	r1, [pc, #248]	; (36644 <IPC_IRQHandler+0x1a0>)
   3654c:	4b3f      	ldr	r3, [pc, #252]	; (3664c <IPC_IRQHandler+0x1a8>)
   3654e:	6008      	str	r0, [r1, #0]
   36550:	601a      	str	r2, [r3, #0]
   36552:	e7e0      	b.n	36516 <IPC_IRQHandler+0x72>
   36554:	2100      	movs	r1, #0
   36556:	4a3e      	ldr	r2, [pc, #248]	; (36650 <IPC_IRQHandler+0x1ac>)
   36558:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
   3655c:	6813      	ldr	r3, [r2, #0]
   3655e:	9305      	str	r3, [sp, #20]
   36560:	9b05      	ldr	r3, [sp, #20]
   36562:	b006      	add	sp, #24
   36564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36568:	f7f5 b8ea 	b.w	2b740 <bsd_os_application_irq_set>
   3656c:	23e0      	movs	r3, #224	; 0xe0
   3656e:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   36572:	606e      	str	r6, [r5, #4]
   36574:	e7cf      	b.n	36516 <IPC_IRQHandler+0x72>
   36576:	4937      	ldr	r1, [pc, #220]	; (36654 <IPC_IRQHandler+0x1b0>)
   36578:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   3657c:	680b      	ldr	r3, [r1, #0]
   3657e:	9303      	str	r3, [sp, #12]
   36580:	9b03      	ldr	r3, [sp, #12]
   36582:	b006      	add	sp, #24
   36584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   36588:	f7ff be9a 	b.w	362c0 <rpc_transport_ipc_shutdown>
   3658c:	4a32      	ldr	r2, [pc, #200]	; (36658 <IPC_IRQHandler+0x1b4>)
   3658e:	4293      	cmp	r3, r2
   36590:	d82a      	bhi.n	365e8 <IPC_IRQHandler+0x144>
   36592:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   36596:	d82a      	bhi.n	365ee <IPC_IRQHandler+0x14a>
   36598:	f248 0203 	movw	r2, #32771	; 0x8003
   3659c:	4293      	cmp	r3, r2
   3659e:	d12f      	bne.n	36600 <IPC_IRQHandler+0x15c>
   365a0:	2003      	movs	r0, #3
   365a2:	2204      	movs	r2, #4
   365a4:	4927      	ldr	r1, [pc, #156]	; (36644 <IPC_IRQHandler+0x1a0>)
   365a6:	4b29      	ldr	r3, [pc, #164]	; (3664c <IPC_IRQHandler+0x1a8>)
   365a8:	6008      	str	r0, [r1, #0]
   365aa:	601a      	str	r2, [r3, #0]
   365ac:	e7b3      	b.n	36516 <IPC_IRQHandler+0x72>
   365ae:	2303      	movs	r3, #3
   365b0:	4618      	mov	r0, r3
   365b2:	4924      	ldr	r1, [pc, #144]	; (36644 <IPC_IRQHandler+0x1a0>)
   365b4:	4a25      	ldr	r2, [pc, #148]	; (3664c <IPC_IRQHandler+0x1a8>)
   365b6:	600b      	str	r3, [r1, #0]
   365b8:	6013      	str	r3, [r2, #0]
   365ba:	b006      	add	sp, #24
   365bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   365c0:	f005 bbc6 	b.w	3bd50 <rpc_transport_ipc_fault_handler>
   365c4:	4a25      	ldr	r2, [pc, #148]	; (3665c <IPC_IRQHandler+0x1b8>)
   365c6:	4826      	ldr	r0, [pc, #152]	; (36660 <IPC_IRQHandler+0x1bc>)
   365c8:	6811      	ldr	r1, [r2, #0]
   365ca:	688a      	ldr	r2, [r1, #8]
   365cc:	6002      	str	r2, [r0, #0]
   365ce:	6849      	ldr	r1, [r1, #4]
   365d0:	6041      	str	r1, [r0, #4]
   365d2:	b312      	cbz	r2, 3661a <IPC_IRQHandler+0x176>
   365d4:	b309      	cbz	r1, 3661a <IPC_IRQHandler+0x176>
   365d6:	6812      	ldr	r2, [r2, #0]
   365d8:	2a10      	cmp	r2, #16
   365da:	d824      	bhi.n	36626 <IPC_IRQHandler+0x182>
   365dc:	680a      	ldr	r2, [r1, #0]
   365de:	2a10      	cmp	r2, #16
   365e0:	d821      	bhi.n	36626 <IPC_IRQHandler+0x182>
   365e2:	2202      	movs	r2, #2
   365e4:	601a      	str	r2, [r3, #0]
   365e6:	e791      	b.n	3650c <IPC_IRQHandler+0x68>
   365e8:	4a1e      	ldr	r2, [pc, #120]	; (36664 <IPC_IRQHandler+0x1c0>)
   365ea:	4293      	cmp	r3, r2
   365ec:	d108      	bne.n	36600 <IPC_IRQHandler+0x15c>
   365ee:	2003      	movs	r0, #3
   365f0:	4914      	ldr	r1, [pc, #80]	; (36644 <IPC_IRQHandler+0x1a0>)
   365f2:	4a16      	ldr	r2, [pc, #88]	; (3664c <IPC_IRQHandler+0x1a8>)
   365f4:	6008      	str	r0, [r1, #0]
   365f6:	6013      	str	r3, [r2, #0]
   365f8:	e78d      	b.n	36516 <IPC_IRQHandler+0x72>
   365fa:	f7f5 f8a1 	bl	2b740 <bsd_os_application_irq_set>
   365fe:	e785      	b.n	3650c <IPC_IRQHandler+0x68>
   36600:	2303      	movs	r3, #3
   36602:	4910      	ldr	r1, [pc, #64]	; (36644 <IPC_IRQHandler+0x1a0>)
   36604:	4a11      	ldr	r2, [pc, #68]	; (3664c <IPC_IRQHandler+0x1a8>)
   36606:	600b      	str	r3, [r1, #0]
   36608:	6013      	str	r3, [r2, #0]
   3660a:	e784      	b.n	36516 <IPC_IRQHandler+0x72>
   3660c:	2003      	movs	r0, #3
   3660e:	2206      	movs	r2, #6
   36610:	490c      	ldr	r1, [pc, #48]	; (36644 <IPC_IRQHandler+0x1a0>)
   36612:	4b0e      	ldr	r3, [pc, #56]	; (3664c <IPC_IRQHandler+0x1a8>)
   36614:	6008      	str	r0, [r1, #0]
   36616:	601a      	str	r2, [r3, #0]
   36618:	e77d      	b.n	36516 <IPC_IRQHandler+0x72>
   3661a:	2003      	movs	r0, #3
   3661c:	2110      	movs	r1, #16
   3661e:	4a0b      	ldr	r2, [pc, #44]	; (3664c <IPC_IRQHandler+0x1a8>)
   36620:	6018      	str	r0, [r3, #0]
   36622:	6011      	str	r1, [r2, #0]
   36624:	e772      	b.n	3650c <IPC_IRQHandler+0x68>
   36626:	2003      	movs	r0, #3
   36628:	f24c 0106 	movw	r1, #49158	; 0xc006
   3662c:	4a07      	ldr	r2, [pc, #28]	; (3664c <IPC_IRQHandler+0x1a8>)
   3662e:	6018      	str	r0, [r3, #0]
   36630:	6011      	str	r1, [r2, #0]
   36632:	e76b      	b.n	3650c <IPC_IRQHandler+0x68>
   36634:	e000e100 	.word	0xe000e100
   36638:	4002a000 	.word	0x4002a000
   3663c:	4002a11c 	.word	0x4002a11c
   36640:	4002a108 	.word	0x4002a108
   36644:	20025b54 	.word	0x20025b54
   36648:	4002a100 	.word	0x4002a100
   3664c:	20025b44 	.word	0x20025b44
   36650:	4002a110 	.word	0x4002a110
   36654:	4002a118 	.word	0x4002a118
   36658:	04400004 	.word	0x04400004
   3665c:	20025b58 	.word	0x20025b58
   36660:	20025b4c 	.word	0x20025b4c
   36664:	05500001 	.word	0x05500001

00036668 <rpc_transport_ipc_rx_init>:
   36668:	2800      	cmp	r0, #0
   3666a:	f000 8109 	beq.w	36880 <rpc_transport_ipc_rx_init+0x218>
   3666e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36672:	6805      	ldr	r5, [r0, #0]
   36674:	b097      	sub	sp, #92	; 0x5c
   36676:	2d00      	cmp	r5, #0
   36678:	f000 80f8 	beq.w	3686c <rpc_transport_ipc_rx_init+0x204>
   3667c:	6883      	ldr	r3, [r0, #8]
   3667e:	2b00      	cmp	r3, #0
   36680:	f000 80f4 	beq.w	3686c <rpc_transport_ipc_rx_init+0x204>
   36684:	6906      	ldr	r6, [r0, #16]
   36686:	2e00      	cmp	r6, #0
   36688:	f000 80f0 	beq.w	3686c <rpc_transport_ipc_rx_init+0x204>
   3668c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   3668e:	2c00      	cmp	r4, #0
   36690:	f000 80ec 	beq.w	3686c <rpc_transport_ipc_rx_init+0x204>
   36694:	6844      	ldr	r4, [r0, #4]
   36696:	2c1b      	cmp	r4, #27
   36698:	f240 80ed 	bls.w	36876 <rpc_transport_ipc_rx_init+0x20e>
   3669c:	68c4      	ldr	r4, [r0, #12]
   3669e:	2c0b      	cmp	r4, #11
   366a0:	f240 80e9 	bls.w	36876 <rpc_transport_ipc_rx_init+0x20e>
   366a4:	f8d0 e014 	ldr.w	lr, [r0, #20]
   366a8:	f1be 0f17 	cmp.w	lr, #23
   366ac:	f240 80e3 	bls.w	36876 <rpc_transport_ipc_rx_init+0x20e>
   366b0:	4604      	mov	r4, r0
   366b2:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 368a8 <rpc_transport_ipc_rx_init+0x240>
   366b6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
   366b8:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 368ac <rpc_transport_ipc_rx_init+0x244>
   366bc:	4690      	mov	r8, r2
   366be:	9101      	str	r1, [sp, #4]
   366c0:	4672      	mov	r2, lr
   366c2:	2100      	movs	r1, #0
   366c4:	4630      	mov	r0, r6
   366c6:	f8ca 7000 	str.w	r7, [sl]
   366ca:	f8cb 3000 	str.w	r3, [fp]
   366ce:	f011 fd7b 	bl	481c8 <memset>
   366d2:	69e3      	ldr	r3, [r4, #28]
   366d4:	4630      	mov	r0, r6
   366d6:	6033      	str	r3, [r6, #0]
   366d8:	69a3      	ldr	r3, [r4, #24]
   366da:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 368b0 <rpc_transport_ipc_rx_init+0x248>
   366de:	6073      	str	r3, [r6, #4]
   366e0:	f7ff fb34 	bl	35d4c <ipc_trace_init>
   366e4:	2200      	movs	r2, #0
   366e6:	2001      	movs	r0, #1
   366e8:	4b67      	ldr	r3, [pc, #412]	; (36888 <rpc_transport_ipc_rx_init+0x220>)
   366ea:	4968      	ldr	r1, [pc, #416]	; (3688c <rpc_transport_ipc_rx_init+0x224>)
   366ec:	f8c3 5610 	str.w	r5, [r3, #1552]	; 0x610
   366f0:	6809      	ldr	r1, [r1, #0]
   366f2:	f04f 0c80 	mov.w	ip, #128	; 0x80
   366f6:	9106      	str	r1, [sp, #24]
   366f8:	4965      	ldr	r1, [pc, #404]	; (36890 <rpc_transport_ipc_rx_init+0x228>)
   366fa:	f8dd e018 	ldr.w	lr, [sp, #24]
   366fe:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   36702:	6809      	ldr	r1, [r1, #0]
   36704:	702a      	strb	r2, [r5, #0]
   36706:	9105      	str	r1, [sp, #20]
   36708:	706a      	strb	r2, [r5, #1]
   3670a:	70ea      	strb	r2, [r5, #3]
   3670c:	70a8      	strb	r0, [r5, #2]
   3670e:	9905      	ldr	r1, [sp, #20]
   36710:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   36712:	f8db e000 	ldr.w	lr, [fp]
   36716:	6069      	str	r1, [r5, #4]
   36718:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   3671a:	61ae      	str	r6, [r5, #24]
   3671c:	60a9      	str	r1, [r5, #8]
   3671e:	9901      	ldr	r1, [sp, #4]
   36720:	f8c5 e014 	str.w	lr, [r5, #20]
   36724:	6129      	str	r1, [r5, #16]
   36726:	495b      	ldr	r1, [pc, #364]	; (36894 <rpc_transport_ipc_rx_init+0x22c>)
   36728:	f8c5 800c 	str.w	r8, [r5, #12]
   3672c:	f8c3 0590 	str.w	r0, [r3, #1424]	; 0x590
   36730:	680c      	ldr	r4, [r1, #0]
   36732:	f5a1 6192 	sub.w	r1, r1, #1168	; 0x490
   36736:	9407      	str	r4, [sp, #28]
   36738:	9c07      	ldr	r4, [sp, #28]
   3673a:	2404      	movs	r4, #4
   3673c:	f8c3 4598 	str.w	r4, [r3, #1432]	; 0x598
   36740:	f8d1 4498 	ldr.w	r4, [r1, #1176]	; 0x498
   36744:	4f54      	ldr	r7, [pc, #336]	; (36898 <rpc_transport_ipc_rx_init+0x230>)
   36746:	9408      	str	r4, [sp, #32]
   36748:	9c08      	ldr	r4, [sp, #32]
   3674a:	2410      	movs	r4, #16
   3674c:	f8c3 45a0 	str.w	r4, [r3, #1440]	; 0x5a0
   36750:	f8d1 44a0 	ldr.w	r4, [r1, #1184]	; 0x4a0
   36754:	9409      	str	r4, [sp, #36]	; 0x24
   36756:	9c09      	ldr	r4, [sp, #36]	; 0x24
   36758:	2440      	movs	r4, #64	; 0x40
   3675a:	f8c3 45a8 	str.w	r4, [r3, #1448]	; 0x5a8
   3675e:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	; 0x4a8
   36762:	940a      	str	r4, [sp, #40]	; 0x28
   36764:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   36766:	f8c3 c5ac 	str.w	ip, [r3, #1452]	; 0x5ac
   3676a:	f8d1 44ac 	ldr.w	r4, [r1, #1196]	; 0x4ac
   3676e:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   36772:	940b      	str	r4, [sp, #44]	; 0x2c
   36774:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   36776:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3677a:	680c      	ldr	r4, [r1, #0]
   3677c:	940c      	str	r4, [sp, #48]	; 0x30
   3677e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   36780:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   36784:	688c      	ldr	r4, [r1, #8]
   36786:	940d      	str	r4, [sp, #52]	; 0x34
   36788:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   3678a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   3678e:	690c      	ldr	r4, [r1, #16]
   36790:	940e      	str	r4, [sp, #56]	; 0x38
   36792:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   36794:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   36798:	698c      	ldr	r4, [r1, #24]
   3679a:	940f      	str	r4, [sp, #60]	; 0x3c
   3679c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   3679e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   367a2:	69cc      	ldr	r4, [r1, #28]
   367a4:	f501 7101 	add.w	r1, r1, #516	; 0x204
   367a8:	9410      	str	r4, [sp, #64]	; 0x40
   367aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
   367ac:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   367b0:	4304      	orrs	r4, r0
   367b2:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
   367b6:	680d      	ldr	r5, [r1, #0]
   367b8:	4c38      	ldr	r4, [pc, #224]	; (3689c <rpc_transport_ipc_rx_init+0x234>)
   367ba:	9511      	str	r5, [sp, #68]	; 0x44
   367bc:	9d11      	ldr	r5, [sp, #68]	; 0x44
   367be:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   367c2:	4d37      	ldr	r5, [pc, #220]	; (368a0 <rpc_transport_ipc_rx_init+0x238>)
   367c4:	f046 0604 	orr.w	r6, r6, #4
   367c8:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   367cc:	680e      	ldr	r6, [r1, #0]
   367ce:	9612      	str	r6, [sp, #72]	; 0x48
   367d0:	9e12      	ldr	r6, [sp, #72]	; 0x48
   367d2:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   367d6:	f046 0610 	orr.w	r6, r6, #16
   367da:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   367de:	680e      	ldr	r6, [r1, #0]
   367e0:	9613      	str	r6, [sp, #76]	; 0x4c
   367e2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   367e4:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   367e8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   367ec:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   367f0:	680e      	ldr	r6, [r1, #0]
   367f2:	9614      	str	r6, [sp, #80]	; 0x50
   367f4:	9e14      	ldr	r6, [sp, #80]	; 0x50
   367f6:	f8d3 6304 	ldr.w	r6, [r3, #772]	; 0x304
   367fa:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   367fe:	f8c3 6304 	str.w	r6, [r3, #772]	; 0x304
   36802:	f8da 3000 	ldr.w	r3, [sl]
   36806:	6809      	ldr	r1, [r1, #0]
   36808:	015b      	lsls	r3, r3, #5
   3680a:	9115      	str	r1, [sp, #84]	; 0x54
   3680c:	b2db      	uxtb	r3, r3
   3680e:	9915      	ldr	r1, [sp, #84]	; 0x54
   36810:	6022      	str	r2, [r4, #0]
   36812:	f8c9 0000 	str.w	r0, [r9]
   36816:	f885 332a 	strb.w	r3, [r5, #810]	; 0x32a
   3681a:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
   3681e:	f8c5 c004 	str.w	ip, [r5, #4]
   36822:	9204      	str	r2, [sp, #16]
   36824:	f8c7 2610 	str.w	r2, [r7, #1552]	; 0x610
   36828:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
   3682c:	9304      	str	r3, [sp, #16]
   3682e:	9b04      	ldr	r3, [sp, #16]
   36830:	f8d9 3000 	ldr.w	r3, [r9]
   36834:	4283      	cmp	r3, r0
   36836:	d10f      	bne.n	36858 <rpc_transport_ipc_rx_init+0x1f0>
   36838:	2614      	movs	r6, #20
   3683a:	4d1a      	ldr	r5, [pc, #104]	; (368a4 <rpc_transport_ipc_rx_init+0x23c>)
   3683c:	e000      	b.n	36840 <rpc_transport_ipc_rx_init+0x1d8>
   3683e:	b15d      	cbz	r5, 36858 <rpc_transport_ipc_rx_init+0x1f0>
   36840:	a903      	add	r1, sp, #12
   36842:	2000      	movs	r0, #0
   36844:	9603      	str	r6, [sp, #12]
   36846:	f7f4 fdbf 	bl	2b3c8 <bsd_os_timedwait>
   3684a:	9b03      	ldr	r3, [sp, #12]
   3684c:	f8d9 2000 	ldr.w	r2, [r9]
   36850:	3b14      	subs	r3, #20
   36852:	2a01      	cmp	r2, #1
   36854:	441d      	add	r5, r3
   36856:	d0f2      	beq.n	3683e <rpc_transport_ipc_rx_init+0x1d6>
   36858:	f8d9 3000 	ldr.w	r3, [r9]
   3685c:	2b01      	cmp	r3, #1
   3685e:	bf0a      	itet	eq
   36860:	200d      	moveq	r0, #13
   36862:	6820      	ldrne	r0, [r4, #0]
   36864:	6020      	streq	r0, [r4, #0]
   36866:	b017      	add	sp, #92	; 0x5c
   36868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3686c:	f24c 000e 	movw	r0, #49166	; 0xc00e
   36870:	b017      	add	sp, #92	; 0x5c
   36872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36876:	f24c 0009 	movw	r0, #49161	; 0xc009
   3687a:	b017      	add	sp, #92	; 0x5c
   3687c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36880:	f24c 000e 	movw	r0, #49166	; 0xc00e
   36884:	4770      	bx	lr
   36886:	bf00      	nop
   36888:	4002a000 	.word	0x4002a000
   3688c:	4002a610 	.word	0x4002a610
   36890:	4002a614 	.word	0x4002a614
   36894:	4002a590 	.word	0x4002a590
   36898:	40005000 	.word	0x40005000
   3689c:	20025b44 	.word	0x20025b44
   368a0:	e000e100 	.word	0xe000e100
   368a4:	000249f0 	.word	0x000249f0
   368a8:	20025b48 	.word	0x20025b48
   368ac:	20025b58 	.word	0x20025b58
   368b0:	20025b54 	.word	0x20025b54

000368b4 <rpc_transport_ipc_msg_free>:
   368b4:	b470      	push	{r4, r5, r6}
   368b6:	4e17      	ldr	r6, [pc, #92]	; (36914 <rpc_transport_ipc_msg_free+0x60>)
   368b8:	6831      	ldr	r1, [r6, #0]
   368ba:	680d      	ldr	r5, [r1, #0]
   368bc:	b1ad      	cbz	r5, 368ea <rpc_transport_ipc_msg_free+0x36>
   368be:	688b      	ldr	r3, [r1, #8]
   368c0:	4283      	cmp	r3, r0
   368c2:	d024      	beq.n	3690e <rpc_transport_ipc_msg_free+0x5a>
   368c4:	2300      	movs	r3, #0
   368c6:	3301      	adds	r3, #1
   368c8:	00da      	lsls	r2, r3, #3
   368ca:	429d      	cmp	r5, r3
   368cc:	eb01 0402 	add.w	r4, r1, r2
   368d0:	d00b      	beq.n	368ea <rpc_transport_ipc_msg_free+0x36>
   368d2:	68a4      	ldr	r4, [r4, #8]
   368d4:	42a0      	cmp	r0, r4
   368d6:	d1f6      	bne.n	368c6 <rpc_transport_ipc_msg_free+0x12>
   368d8:	3204      	adds	r2, #4
   368da:	588b      	ldr	r3, [r1, r2]
   368dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   368e0:	f043 0303 	orr.w	r3, r3, #3
   368e4:	508b      	str	r3, [r1, r2]
   368e6:	bc70      	pop	{r4, r5, r6}
   368e8:	4770      	bx	lr
   368ea:	6871      	ldr	r1, [r6, #4]
   368ec:	680d      	ldr	r5, [r1, #0]
   368ee:	2d00      	cmp	r5, #0
   368f0:	d0f9      	beq.n	368e6 <rpc_transport_ipc_msg_free+0x32>
   368f2:	688b      	ldr	r3, [r1, #8]
   368f4:	4283      	cmp	r3, r0
   368f6:	d00a      	beq.n	3690e <rpc_transport_ipc_msg_free+0x5a>
   368f8:	2300      	movs	r3, #0
   368fa:	3301      	adds	r3, #1
   368fc:	00da      	lsls	r2, r3, #3
   368fe:	429d      	cmp	r5, r3
   36900:	eb01 0402 	add.w	r4, r1, r2
   36904:	d0ef      	beq.n	368e6 <rpc_transport_ipc_msg_free+0x32>
   36906:	68a4      	ldr	r4, [r4, #8]
   36908:	42a0      	cmp	r0, r4
   3690a:	d1f6      	bne.n	368fa <rpc_transport_ipc_msg_free+0x46>
   3690c:	e7e4      	b.n	368d8 <rpc_transport_ipc_msg_free+0x24>
   3690e:	2204      	movs	r2, #4
   36910:	e7e3      	b.n	368da <rpc_transport_ipc_msg_free+0x26>
   36912:	bf00      	nop
   36914:	20025b4c 	.word	0x20025b4c

00036918 <rpc_transport_ipc_shutdown_done>:
   36918:	4b03      	ldr	r3, [pc, #12]	; (36928 <rpc_transport_ipc_shutdown_done+0x10>)
   3691a:	6818      	ldr	r0, [r3, #0]
   3691c:	f1a0 0005 	sub.w	r0, r0, #5
   36920:	fab0 f080 	clz	r0, r0
   36924:	0940      	lsrs	r0, r0, #5
   36926:	4770      	bx	lr
   36928:	20025b54 	.word	0x20025b54

0003692c <rpc_transport_ipc_tx_init>:
   3692c:	2800      	cmp	r0, #0
   3692e:	f000 80b8 	beq.w	36aa2 <rpc_transport_ipc_tx_init+0x176>
   36932:	2900      	cmp	r1, #0
   36934:	f000 80b5 	beq.w	36aa2 <rpc_transport_ipc_tx_init+0x176>
   36938:	2a00      	cmp	r2, #0
   3693a:	f000 80b2 	beq.w	36aa2 <rpc_transport_ipc_tx_init+0x176>
   3693e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36942:	6a04      	ldr	r4, [r0, #32]
   36944:	b085      	sub	sp, #20
   36946:	2c00      	cmp	r4, #0
   36948:	f000 80a6 	beq.w	36a98 <rpc_transport_ipc_tx_init+0x16c>
   3694c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   3694e:	2800      	cmp	r0, #0
   36950:	f000 80a2 	beq.w	36a98 <rpc_transport_ipc_tx_init+0x16c>
   36954:	f642 4587 	movw	r5, #11399	; 0x2c87
   36958:	f04f 0a00 	mov.w	sl, #0
   3695c:	4e55      	ldr	r6, [pc, #340]	; (36ab4 <rpc_transport_ipc_tx_init+0x188>)
   3695e:	42a8      	cmp	r0, r5
   36960:	f886 a000 	strb.w	sl, [r6]
   36964:	f240 80a0 	bls.w	36aa8 <rpc_transport_ipc_tx_init+0x17c>
   36968:	2708      	movs	r7, #8
   3696a:	f8df 9180 	ldr.w	r9, [pc, #384]	; 36aec <rpc_transport_ipc_tx_init+0x1c0>
   3696e:	4620      	mov	r0, r4
   36970:	4616      	mov	r6, r2
   36972:	460d      	mov	r5, r1
   36974:	2244      	movs	r2, #68	; 0x44
   36976:	4651      	mov	r1, sl
   36978:	f8c9 4000 	str.w	r4, [r9]
   3697c:	f011 fc24 	bl	481c8 <memset>
   36980:	f8d9 2000 	ldr.w	r2, [r9]
   36984:	f104 0344 	add.w	r3, r4, #68	; 0x44
   36988:	f8df 8164 	ldr.w	r8, [pc, #356]	; 36af0 <rpc_transport_ipc_tx_init+0x1c4>
   3698c:	f882 a001 	strb.w	sl, [r2, #1]
   36990:	f882 a002 	strb.w	sl, [r2, #2]
   36994:	f882 a003 	strb.w	sl, [r2, #3]
   36998:	7017      	strb	r7, [r2, #0]
   3699a:	4618      	mov	r0, r3
   3699c:	2244      	movs	r2, #68	; 0x44
   3699e:	4651      	mov	r1, sl
   369a0:	f8c8 3000 	str.w	r3, [r8]
   369a4:	f011 fc10 	bl	481c8 <memset>
   369a8:	f8d8 2000 	ldr.w	r2, [r8]
   369ac:	f104 0388 	add.w	r3, r4, #136	; 0x88
   369b0:	f8df b140 	ldr.w	fp, [pc, #320]	; 36af4 <rpc_transport_ipc_tx_init+0x1c8>
   369b4:	7017      	strb	r7, [r2, #0]
   369b6:	f882 a001 	strb.w	sl, [r2, #1]
   369ba:	f882 a002 	strb.w	sl, [r2, #2]
   369be:	f882 a003 	strb.w	sl, [r2, #3]
   369c2:	4618      	mov	r0, r3
   369c4:	f44f 7200 	mov.w	r2, #512	; 0x200
   369c8:	4651      	mov	r1, sl
   369ca:	f8cb 3000 	str.w	r3, [fp]
   369ce:	f011 fbfb 	bl	481c8 <memset>
   369d2:	4b39      	ldr	r3, [pc, #228]	; (36ab8 <rpc_transport_ipc_tx_init+0x18c>)
   369d4:	f504 7c22 	add.w	ip, r4, #648	; 0x288
   369d8:	f8c3 c000 	str.w	ip, [r3]
   369dc:	4651      	mov	r1, sl
   369de:	4660      	mov	r0, ip
   369e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   369e4:	f011 fbf0 	bl	481c8 <memset>
   369e8:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
   369ec:	2106      	movs	r1, #6
   369ee:	f04f 0e01 	mov.w	lr, #1
   369f2:	f44f 3001 	mov.w	r0, #132096	; 0x20400
   369f6:	f44f 3288 	mov.w	r2, #69632	; 0x11000
   369fa:	4b30      	ldr	r3, [pc, #192]	; (36abc <rpc_transport_ipc_tx_init+0x190>)
   369fc:	f504 6491 	add.w	r4, r4, #1160	; 0x488
   36a00:	605c      	str	r4, [r3, #4]
   36a02:	4c2f      	ldr	r4, [pc, #188]	; (36ac0 <rpc_transport_ipc_tx_init+0x194>)
   36a04:	f8c3 c008 	str.w	ip, [r3, #8]
   36a08:	8199      	strh	r1, [r3, #12]
   36a0a:	f8a3 e000 	strh.w	lr, [r3]
   36a0e:	4619      	mov	r1, r3
   36a10:	611c      	str	r4, [r3, #16]
   36a12:	4b2c      	ldr	r3, [pc, #176]	; (36ac4 <rpc_transport_ipc_tx_init+0x198>)
   36a14:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 36af8 <rpc_transport_ipc_tx_init+0x1cc>
   36a18:	6120      	str	r0, [r4, #16]
   36a1a:	482b      	ldr	r0, [pc, #172]	; (36ac8 <rpc_transport_ipc_tx_init+0x19c>)
   36a1c:	6063      	str	r3, [r4, #4]
   36a1e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
   36a22:	60a0      	str	r0, [r4, #8]
   36a24:	f8c4 c000 	str.w	ip, [r4]
   36a28:	4828      	ldr	r0, [pc, #160]	; (36acc <rpc_transport_ipc_tx_init+0x1a0>)
   36a2a:	60e3      	str	r3, [r4, #12]
   36a2c:	6162      	str	r2, [r4, #20]
   36a2e:	f006 fb81 	bl	3d134 <nrf_mem_register>
   36a32:	2800      	cmp	r0, #0
   36a34:	d132      	bne.n	36a9c <rpc_transport_ipc_tx_init+0x170>
   36a36:	f04f 0c02 	mov.w	ip, #2
   36a3a:	2420      	movs	r4, #32
   36a3c:	f8d9 1000 	ldr.w	r1, [r9]
   36a40:	f8db 2000 	ldr.w	r2, [fp]
   36a44:	6029      	str	r1, [r5, #0]
   36a46:	4b1c      	ldr	r3, [pc, #112]	; (36ab8 <rpc_transport_ipc_tx_init+0x18c>)
   36a48:	f8d8 1000 	ldr.w	r1, [r8]
   36a4c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 36afc <rpc_transport_ipc_tx_init+0x1d0>
   36a50:	4d1f      	ldr	r5, [pc, #124]	; (36ad0 <rpc_transport_ipc_tx_init+0x1a4>)
   36a52:	6031      	str	r1, [r6, #0]
   36a54:	f8ce 2000 	str.w	r2, [lr]
   36a58:	681b      	ldr	r3, [r3, #0]
   36a5a:	491e      	ldr	r1, [pc, #120]	; (36ad4 <rpc_transport_ipc_tx_init+0x1a8>)
   36a5c:	f502 7200 	add.w	r2, r2, #512	; 0x200
   36a60:	602a      	str	r2, [r5, #0]
   36a62:	4e1d      	ldr	r6, [pc, #116]	; (36ad8 <rpc_transport_ipc_tx_init+0x1ac>)
   36a64:	4a1d      	ldr	r2, [pc, #116]	; (36adc <rpc_transport_ipc_tx_init+0x1b0>)
   36a66:	4d1e      	ldr	r5, [pc, #120]	; (36ae0 <rpc_transport_ipc_tx_init+0x1b4>)
   36a68:	600b      	str	r3, [r1, #0]
   36a6a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   36a6e:	491d      	ldr	r1, [pc, #116]	; (36ae4 <rpc_transport_ipc_tx_init+0x1b8>)
   36a70:	6033      	str	r3, [r6, #0]
   36a72:	8028      	strh	r0, [r5, #0]
   36a74:	f8c2 c514 	str.w	ip, [r2, #1300]	; 0x514
   36a78:	6809      	ldr	r1, [r1, #0]
   36a7a:	4b1b      	ldr	r3, [pc, #108]	; (36ae8 <rpc_transport_ipc_tx_init+0x1bc>)
   36a7c:	9103      	str	r1, [sp, #12]
   36a7e:	9903      	ldr	r1, [sp, #12]
   36a80:	f8c2 751c 	str.w	r7, [r2, #1308]	; 0x51c
   36a84:	6819      	ldr	r1, [r3, #0]
   36a86:	443b      	add	r3, r7
   36a88:	9102      	str	r1, [sp, #8]
   36a8a:	9902      	ldr	r1, [sp, #8]
   36a8c:	f8c2 4524 	str.w	r4, [r2, #1316]	; 0x524
   36a90:	681b      	ldr	r3, [r3, #0]
   36a92:	9301      	str	r3, [sp, #4]
   36a94:	9b01      	ldr	r3, [sp, #4]
   36a96:	e001      	b.n	36a9c <rpc_transport_ipc_tx_init+0x170>
   36a98:	f24c 0007 	movw	r0, #49159	; 0xc007
   36a9c:	b005      	add	sp, #20
   36a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36aa2:	f24c 000e 	movw	r0, #49166	; 0xc00e
   36aa6:	4770      	bx	lr
   36aa8:	f24c 0004 	movw	r0, #49156	; 0xc004
   36aac:	b005      	add	sp, #20
   36aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ab2:	bf00      	nop
   36ab4:	2002d1bb 	.word	0x2002d1bb
   36ab8:	20025b84 	.word	0x20025b84
   36abc:	20025b70 	.word	0x20025b70
   36ac0:	20025b94 	.word	0x20025b94
   36ac4:	00040080 	.word	0x00040080
   36ac8:	00040100 	.word	0x00040100
   36acc:	20025b5c 	.word	0x20025b5c
   36ad0:	20025b68 	.word	0x20025b68
   36ad4:	20025b64 	.word	0x20025b64
   36ad8:	20025b60 	.word	0x20025b60
   36adc:	4002a000 	.word	0x4002a000
   36ae0:	2002a9be 	.word	0x2002a9be
   36ae4:	4002a514 	.word	0x4002a514
   36ae8:	4002a51c 	.word	0x4002a51c
   36aec:	20025b90 	.word	0x20025b90
   36af0:	20025b88 	.word	0x20025b88
   36af4:	20025b8c 	.word	0x20025b8c
   36af8:	00080040 	.word	0x00080040
   36afc:	20025b6c 	.word	0x20025b6c

00036b00 <rpc_transport_ipc_send>:
   36b00:	2800      	cmp	r0, #0
   36b02:	d061      	beq.n	36bc8 <rpc_transport_ipc_send+0xc8>
   36b04:	b4f0      	push	{r4, r5, r6, r7}
   36b06:	4b34      	ldr	r3, [pc, #208]	; (36bd8 <rpc_transport_ipc_send+0xd8>)
   36b08:	b082      	sub	sp, #8
   36b0a:	681a      	ldr	r2, [r3, #0]
   36b0c:	4b33      	ldr	r3, [pc, #204]	; (36bdc <rpc_transport_ipc_send+0xdc>)
   36b0e:	4282      	cmp	r2, r0
   36b10:	d81e      	bhi.n	36b50 <rpc_transport_ipc_send+0x50>
   36b12:	681b      	ldr	r3, [r3, #0]
   36b14:	4932      	ldr	r1, [pc, #200]	; (36be0 <rpc_transport_ipc_send+0xe0>)
   36b16:	4283      	cmp	r3, r0
   36b18:	6809      	ldr	r1, [r1, #0]
   36b1a:	d803      	bhi.n	36b24 <rpc_transport_ipc_send+0x24>
   36b1c:	4c31      	ldr	r4, [pc, #196]	; (36be4 <rpc_transport_ipc_send+0xe4>)
   36b1e:	6824      	ldr	r4, [r4, #0]
   36b20:	4284      	cmp	r4, r0
   36b22:	d849      	bhi.n	36bb8 <rpc_transport_ipc_send+0xb8>
   36b24:	4281      	cmp	r1, r0
   36b26:	d90e      	bls.n	36b46 <rpc_transport_ipc_send+0x46>
   36b28:	4b2f      	ldr	r3, [pc, #188]	; (36be8 <rpc_transport_ipc_send+0xe8>)
   36b2a:	781b      	ldrb	r3, [r3, #0]
   36b2c:	2b00      	cmp	r3, #0
   36b2e:	d14e      	bne.n	36bce <rpc_transport_ipc_send+0xce>
   36b30:	1a83      	subs	r3, r0, r2
   36b32:	492e      	ldr	r1, [pc, #184]	; (36bec <rpc_transport_ipc_send+0xec>)
   36b34:	099f      	lsrs	r7, r3, #6
   36b36:	069b      	lsls	r3, r3, #26
   36b38:	680a      	ldr	r2, [r1, #0]
   36b3a:	4d2d      	ldr	r5, [pc, #180]	; (36bf0 <rpc_transport_ipc_send+0xf0>)
   36b3c:	f04f 0403 	mov.w	r4, #3
   36b40:	f04f 0602 	mov.w	r6, #2
   36b44:	d014      	beq.n	36b70 <rpc_transport_ipc_send+0x70>
   36b46:	f24c 0010 	movw	r0, #49168	; 0xc010
   36b4a:	b002      	add	sp, #8
   36b4c:	bcf0      	pop	{r4, r5, r6, r7}
   36b4e:	4770      	bx	lr
   36b50:	681b      	ldr	r3, [r3, #0]
   36b52:	4298      	cmp	r0, r3
   36b54:	d3f7      	bcc.n	36b46 <rpc_transport_ipc_send+0x46>
   36b56:	4a23      	ldr	r2, [pc, #140]	; (36be4 <rpc_transport_ipc_send+0xe4>)
   36b58:	6812      	ldr	r2, [r2, #0]
   36b5a:	4290      	cmp	r0, r2
   36b5c:	d2f3      	bcs.n	36b46 <rpc_transport_ipc_send+0x46>
   36b5e:	2401      	movs	r4, #1
   36b60:	1ac3      	subs	r3, r0, r3
   36b62:	4a24      	ldr	r2, [pc, #144]	; (36bf4 <rpc_transport_ipc_send+0xf4>)
   36b64:	099f      	lsrs	r7, r3, #6
   36b66:	069b      	lsls	r3, r3, #26
   36b68:	4626      	mov	r6, r4
   36b6a:	6812      	ldr	r2, [r2, #0]
   36b6c:	4d22      	ldr	r5, [pc, #136]	; (36bf8 <rpc_transport_ipc_send+0xf8>)
   36b6e:	d1ea      	bne.n	36b46 <rpc_transport_ipc_send+0x46>
   36b70:	6841      	ldr	r1, [r0, #4]
   36b72:	b2c9      	uxtb	r1, r1
   36b74:	428e      	cmp	r6, r1
   36b76:	d122      	bne.n	36bbe <rpc_transport_ipc_send+0xbe>
   36b78:	2020      	movs	r0, #32
   36b7a:	eb02 03c7 	add.w	r3, r2, r7, lsl #3
   36b7e:	491f      	ldr	r1, [pc, #124]	; (36bfc <rpc_transport_ipc_send+0xfc>)
   36b80:	685a      	ldr	r2, [r3, #4]
   36b82:	880e      	ldrh	r6, [r1, #0]
   36b84:	b292      	uxth	r2, r2
   36b86:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
   36b8a:	605a      	str	r2, [r3, #4]
   36b8c:	685a      	ldr	r2, [r3, #4]
   36b8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   36b92:	f042 0201 	orr.w	r2, r2, #1
   36b96:	605a      	str	r2, [r3, #4]
   36b98:	bf00      	nop
   36b9a:	3801      	subs	r0, #1
   36b9c:	d1fc      	bne.n	36b98 <rpc_transport_ipc_send+0x98>
   36b9e:	2201      	movs	r2, #1
   36ba0:	4b17      	ldr	r3, [pc, #92]	; (36c00 <rpc_transport_ipc_send+0x100>)
   36ba2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   36ba6:	682a      	ldr	r2, [r5, #0]
   36ba8:	880b      	ldrh	r3, [r1, #0]
   36baa:	9201      	str	r2, [sp, #4]
   36bac:	9a01      	ldr	r2, [sp, #4]
   36bae:	3301      	adds	r3, #1
   36bb0:	800b      	strh	r3, [r1, #0]
   36bb2:	b002      	add	sp, #8
   36bb4:	bcf0      	pop	{r4, r5, r6, r7}
   36bb6:	4770      	bx	lr
   36bb8:	4281      	cmp	r1, r0
   36bba:	d9d0      	bls.n	36b5e <rpc_transport_ipc_send+0x5e>
   36bbc:	e7b4      	b.n	36b28 <rpc_transport_ipc_send+0x28>
   36bbe:	f24c 0007 	movw	r0, #49159	; 0xc007
   36bc2:	b002      	add	sp, #8
   36bc4:	bcf0      	pop	{r4, r5, r6, r7}
   36bc6:	4770      	bx	lr
   36bc8:	f24c 000e 	movw	r0, #49166	; 0xc00e
   36bcc:	4770      	bx	lr
   36bce:	f24c 000f 	movw	r0, #49167	; 0xc00f
   36bd2:	b002      	add	sp, #8
   36bd4:	bcf0      	pop	{r4, r5, r6, r7}
   36bd6:	4770      	bx	lr
   36bd8:	20025b6c 	.word	0x20025b6c
   36bdc:	20025b64 	.word	0x20025b64
   36be0:	20025b68 	.word	0x20025b68
   36be4:	20025b60 	.word	0x20025b60
   36be8:	2002d1bb 	.word	0x2002d1bb
   36bec:	20025b90 	.word	0x20025b90
   36bf0:	4002a00c 	.word	0x4002a00c
   36bf4:	20025b88 	.word	0x20025b88
   36bf8:	4002a004 	.word	0x4002a004
   36bfc:	2002a9be 	.word	0x2002a9be
   36c00:	4002a000 	.word	0x4002a000

00036c04 <rpc_transport_ipc_tx_rpc_data_alloc>:
   36c04:	4b18      	ldr	r3, [pc, #96]	; (36c68 <rpc_transport_ipc_tx_rpc_data_alloc+0x64>)
   36c06:	781b      	ldrb	r3, [r3, #0]
   36c08:	bb63      	cbnz	r3, 36c64 <rpc_transport_ipc_tx_rpc_data_alloc+0x60>
   36c0a:	b4f0      	push	{r4, r5, r6, r7}
   36c0c:	4a17      	ldr	r2, [pc, #92]	; (36c6c <rpc_transport_ipc_tx_rpc_data_alloc+0x68>)
   36c0e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   36c12:	6814      	ldr	r4, [r2, #0]
   36c14:	4b16      	ldr	r3, [pc, #88]	; (36c70 <rpc_transport_ipc_tx_rpc_data_alloc+0x6c>)
   36c16:	6825      	ldr	r5, [r4, #0]
   36c18:	681e      	ldr	r6, [r3, #0]
   36c1a:	b1a5      	cbz	r5, 36c46 <rpc_transport_ipc_tx_rpc_data_alloc+0x42>
   36c1c:	4607      	mov	r7, r0
   36c1e:	00c1      	lsls	r1, r0, #3
   36c20:	1863      	adds	r3, r4, r1
   36c22:	685a      	ldr	r2, [r3, #4]
   36c24:	b2d2      	uxtb	r2, r2
   36c26:	2a03      	cmp	r2, #3
   36c28:	d104      	bne.n	36c34 <rpc_transport_ipc_tx_rpc_data_alloc+0x30>
   36c2a:	609f      	str	r7, [r3, #8]
   36c2c:	685a      	ldr	r2, [r3, #4]
   36c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   36c32:	605a      	str	r2, [r3, #4]
   36c34:	685a      	ldr	r2, [r3, #4]
   36c36:	f012 0fff 	tst.w	r2, #255	; 0xff
   36c3a:	d101      	bne.n	36c40 <rpc_transport_ipc_tx_rpc_data_alloc+0x3c>
   36c3c:	689b      	ldr	r3, [r3, #8]
   36c3e:	b12b      	cbz	r3, 36c4c <rpc_transport_ipc_tx_rpc_data_alloc+0x48>
   36c40:	3001      	adds	r0, #1
   36c42:	42a8      	cmp	r0, r5
   36c44:	d1eb      	bne.n	36c1e <rpc_transport_ipc_tx_rpc_data_alloc+0x1a>
   36c46:	2000      	movs	r0, #0
   36c48:	bcf0      	pop	{r4, r5, r6, r7}
   36c4a:	4770      	bx	lr
   36c4c:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   36c50:	4421      	add	r1, r4
   36c52:	6088      	str	r0, [r1, #8]
   36c54:	6843      	ldr	r3, [r0, #4]
   36c56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   36c5a:	f043 0302 	orr.w	r3, r3, #2
   36c5e:	6043      	str	r3, [r0, #4]
   36c60:	bcf0      	pop	{r4, r5, r6, r7}
   36c62:	4770      	bx	lr
   36c64:	2000      	movs	r0, #0
   36c66:	4770      	bx	lr
   36c68:	2002d1bb 	.word	0x2002d1bb
   36c6c:	20025b90 	.word	0x20025b90
   36c70:	20025b8c 	.word	0x20025b8c

00036c74 <rpc_transport_ipc_tx_rpc_ctrl_alloc>:
   36c74:	b4f0      	push	{r4, r5, r6, r7}
   36c76:	4a15      	ldr	r2, [pc, #84]	; (36ccc <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x58>)
   36c78:	4b15      	ldr	r3, [pc, #84]	; (36cd0 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x5c>)
   36c7a:	6814      	ldr	r4, [r2, #0]
   36c7c:	681e      	ldr	r6, [r3, #0]
   36c7e:	6825      	ldr	r5, [r4, #0]
   36c80:	b1ad      	cbz	r5, 36cae <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x3a>
   36c82:	2000      	movs	r0, #0
   36c84:	4607      	mov	r7, r0
   36c86:	00c1      	lsls	r1, r0, #3
   36c88:	1863      	adds	r3, r4, r1
   36c8a:	685a      	ldr	r2, [r3, #4]
   36c8c:	b2d2      	uxtb	r2, r2
   36c8e:	2a03      	cmp	r2, #3
   36c90:	d104      	bne.n	36c9c <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x28>
   36c92:	609f      	str	r7, [r3, #8]
   36c94:	685a      	ldr	r2, [r3, #4]
   36c96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   36c9a:	605a      	str	r2, [r3, #4]
   36c9c:	685a      	ldr	r2, [r3, #4]
   36c9e:	f012 0fff 	tst.w	r2, #255	; 0xff
   36ca2:	d101      	bne.n	36ca8 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x34>
   36ca4:	689b      	ldr	r3, [r3, #8]
   36ca6:	b12b      	cbz	r3, 36cb4 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x40>
   36ca8:	3001      	adds	r0, #1
   36caa:	4285      	cmp	r5, r0
   36cac:	d1eb      	bne.n	36c86 <rpc_transport_ipc_tx_rpc_ctrl_alloc+0x12>
   36cae:	2000      	movs	r0, #0
   36cb0:	bcf0      	pop	{r4, r5, r6, r7}
   36cb2:	4770      	bx	lr
   36cb4:	eb06 1080 	add.w	r0, r6, r0, lsl #6
   36cb8:	4421      	add	r1, r4
   36cba:	6088      	str	r0, [r1, #8]
   36cbc:	6843      	ldr	r3, [r0, #4]
   36cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   36cc2:	f043 0301 	orr.w	r3, r3, #1
   36cc6:	6043      	str	r3, [r0, #4]
   36cc8:	bcf0      	pop	{r4, r5, r6, r7}
   36cca:	4770      	bx	lr
   36ccc:	20025b88 	.word	0x20025b88
   36cd0:	20025b84 	.word	0x20025b84

00036cd4 <rpc_transport_ipc_tx_data_alloc>:
   36cd4:	4b03      	ldr	r3, [pc, #12]	; (36ce4 <rpc_transport_ipc_tx_data_alloc+0x10>)
   36cd6:	781b      	ldrb	r3, [r3, #0]
   36cd8:	b90b      	cbnz	r3, 36cde <rpc_transport_ipc_tx_data_alloc+0xa>
   36cda:	f006 bc0b 	b.w	3d4f4 <nrf_shared_malloc>
   36cde:	2000      	movs	r0, #0
   36ce0:	4770      	bx	lr
   36ce2:	bf00      	nop
   36ce4:	2002d1bb 	.word	0x2002d1bb

00036ce8 <rpc_transport_ipc_tx_suspend>:
   36ce8:	2201      	movs	r2, #1
   36cea:	4b01      	ldr	r3, [pc, #4]	; (36cf0 <rpc_transport_ipc_tx_suspend+0x8>)
   36cec:	701a      	strb	r2, [r3, #0]
   36cee:	4770      	bx	lr
   36cf0:	2002d1bb 	.word	0x2002d1bb

00036cf4 <rpc_transport_ipc_request_shutdown>:
   36cf4:	b4f0      	push	{r4, r5, r6, r7}
   36cf6:	4a16      	ldr	r2, [pc, #88]	; (36d50 <rpc_transport_ipc_request_shutdown+0x5c>)
   36cf8:	4b16      	ldr	r3, [pc, #88]	; (36d54 <rpc_transport_ipc_request_shutdown+0x60>)
   36cfa:	6814      	ldr	r4, [r2, #0]
   36cfc:	681e      	ldr	r6, [r3, #0]
   36cfe:	6825      	ldr	r5, [r4, #0]
   36d00:	b1ad      	cbz	r5, 36d2e <rpc_transport_ipc_request_shutdown+0x3a>
   36d02:	2200      	movs	r2, #0
   36d04:	4617      	mov	r7, r2
   36d06:	00d0      	lsls	r0, r2, #3
   36d08:	1823      	adds	r3, r4, r0
   36d0a:	6859      	ldr	r1, [r3, #4]
   36d0c:	b2c9      	uxtb	r1, r1
   36d0e:	2903      	cmp	r1, #3
   36d10:	d104      	bne.n	36d1c <rpc_transport_ipc_request_shutdown+0x28>
   36d12:	609f      	str	r7, [r3, #8]
   36d14:	6859      	ldr	r1, [r3, #4]
   36d16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   36d1a:	6059      	str	r1, [r3, #4]
   36d1c:	6859      	ldr	r1, [r3, #4]
   36d1e:	f011 0fff 	tst.w	r1, #255	; 0xff
   36d22:	d101      	bne.n	36d28 <rpc_transport_ipc_request_shutdown+0x34>
   36d24:	689b      	ldr	r3, [r3, #8]
   36d26:	b123      	cbz	r3, 36d32 <rpc_transport_ipc_request_shutdown+0x3e>
   36d28:	3201      	adds	r2, #1
   36d2a:	42aa      	cmp	r2, r5
   36d2c:	d1eb      	bne.n	36d06 <rpc_transport_ipc_request_shutdown+0x12>
   36d2e:	bcf0      	pop	{r4, r5, r6, r7}
   36d30:	4770      	bx	lr
   36d32:	0192      	lsls	r2, r2, #6
   36d34:	4404      	add	r4, r0
   36d36:	18b0      	adds	r0, r6, r2
   36d38:	60a0      	str	r0, [r4, #8]
   36d3a:	6843      	ldr	r3, [r0, #4]
   36d3c:	4906      	ldr	r1, [pc, #24]	; (36d58 <rpc_transport_ipc_request_shutdown+0x64>)
   36d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   36d42:	f043 0301 	orr.w	r3, r3, #1
   36d46:	6043      	str	r3, [r0, #4]
   36d48:	50b1      	str	r1, [r6, r2]
   36d4a:	bcf0      	pop	{r4, r5, r6, r7}
   36d4c:	f7ff bed8 	b.w	36b00 <rpc_transport_ipc_send>
   36d50:	20025b88 	.word	0x20025b88
   36d54:	20025b84 	.word	0x20025b84
   36d58:	00030001 	.word	0x00030001

00036d5c <secure_client_socket>:
   36d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36d60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   36d64:	460c      	mov	r4, r1
   36d66:	680b      	ldr	r3, [r1, #0]
   36d68:	4f45      	ldr	r7, [pc, #276]	; (36e80 <secure_client_socket+0x124>)
   36d6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   36d6e:	600b      	str	r3, [r1, #0]
   36d70:	680b      	ldr	r3, [r1, #0]
   36d72:	00c6      	lsls	r6, r0, #3
   36d74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   36d78:	600b      	str	r3, [r1, #0]
   36d7a:	eb07 0a06 	add.w	sl, r7, r6
   36d7e:	b084      	sub	sp, #16
   36d80:	f8da 3004 	ldr.w	r3, [sl, #4]
   36d84:	6989      	ldr	r1, [r1, #24]
   36d86:	f247 0281 	movw	r2, #28801	; 0x7081
   36d8a:	4605      	mov	r5, r0
   36d8c:	f8d4 8000 	ldr.w	r8, [r4]
   36d90:	e9cd cc02 	strd	ip, ip, [sp, #8]
   36d94:	f000 fd82 	bl	3789c <ip_interface_request_create>
   36d98:	2800      	cmp	r0, #0
   36d9a:	d06c      	beq.n	36e76 <secure_client_socket+0x11a>
   36d9c:	f8da 2004 	ldr.w	r2, [sl, #4]
   36da0:	4681      	mov	r9, r0
   36da2:	2a00      	cmp	r2, #0
   36da4:	d15c      	bne.n	36e60 <secure_client_socket+0x104>
   36da6:	4b37      	ldr	r3, [pc, #220]	; (36e84 <secure_client_socket+0x128>)
   36da8:	1971      	adds	r1, r6, r5
   36daa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   36dae:	2224      	movs	r2, #36	; 0x24
   36db0:	f109 0014 	add.w	r0, r9, #20
   36db4:	f011 f9e8 	bl	48188 <memcpy>
   36db8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   36dbc:	4649      	mov	r1, r9
   36dbe:	3324      	adds	r3, #36	; 0x24
   36dc0:	f8c9 3008 	str.w	r3, [r9, #8]
   36dc4:	6822      	ldr	r2, [r4, #0]
   36dc6:	4643      	mov	r3, r8
   36dc8:	0c12      	lsrs	r2, r2, #16
   36dca:	0412      	lsls	r2, r2, #16
   36dcc:	f042 020a 	orr.w	r2, r2, #10
   36dd0:	6022      	str	r2, [r4, #0]
   36dd2:	4620      	mov	r0, r4
   36dd4:	f247 0281 	movw	r2, #28801	; 0x7081
   36dd8:	f000 fd80 	bl	378dc <ip_interface_request_send>
   36ddc:	4603      	mov	r3, r0
   36dde:	b968      	cbnz	r0, 36dfc <secure_client_socket+0xa0>
   36de0:	6823      	ldr	r3, [r4, #0]
   36de2:	00db      	lsls	r3, r3, #3
   36de4:	d40e      	bmi.n	36e04 <secure_client_socket+0xa8>
   36de6:	ab03      	add	r3, sp, #12
   36de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   36dec:	210b      	movs	r1, #11
   36dee:	4628      	mov	r0, r5
   36df0:	f000 fd88 	bl	37904 <ip_interface_wait>
   36df4:	4603      	mov	r3, r0
   36df6:	b150      	cbz	r0, 36e0e <secure_client_socket+0xb2>
   36df8:	f8c4 8000 	str.w	r8, [r4]
   36dfc:	4618      	mov	r0, r3
   36dfe:	b004      	add	sp, #16
   36e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36e04:	2373      	movs	r3, #115	; 0x73
   36e06:	4618      	mov	r0, r3
   36e08:	b004      	add	sp, #16
   36e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36e0e:	220c      	movs	r2, #12
   36e10:	ab02      	add	r3, sp, #8
   36e12:	4611      	mov	r1, r2
   36e14:	4628      	mov	r0, r5
   36e16:	f000 fd75 	bl	37904 <ip_interface_wait>
   36e1a:	4603      	mov	r3, r0
   36e1c:	bb30      	cbnz	r0, 36e6c <secure_client_socket+0x110>
   36e1e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   36e22:	b138      	cbz	r0, 36e34 <secure_client_socket+0xd8>
   36e24:	9301      	str	r3, [sp, #4]
   36e26:	f006 faa9 	bl	3d37c <nrf_free>
   36e2a:	9b01      	ldr	r3, [sp, #4]
   36e2c:	443e      	add	r6, r7
   36e2e:	6073      	str	r3, [r6, #4]
   36e30:	f847 3035 	str.w	r3, [r7, r5, lsl #3]
   36e34:	4618      	mov	r0, r3
   36e36:	6822      	ldr	r2, [r4, #0]
   36e38:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   36e3c:	6022      	str	r2, [r4, #0]
   36e3e:	6822      	ldr	r2, [r4, #0]
   36e40:	0c12      	lsrs	r2, r2, #16
   36e42:	0412      	lsls	r2, r2, #16
   36e44:	f042 020c 	orr.w	r2, r2, #12
   36e48:	6022      	str	r2, [r4, #0]
   36e4a:	6822      	ldr	r2, [r4, #0]
   36e4c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   36e50:	6022      	str	r2, [r4, #0]
   36e52:	6822      	ldr	r2, [r4, #0]
   36e54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   36e58:	6022      	str	r2, [r4, #0]
   36e5a:	b004      	add	sp, #16
   36e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36e60:	f857 1035 	ldr.w	r1, [r7, r5, lsl #3]
   36e64:	6800      	ldr	r0, [r0, #0]
   36e66:	f011 f98f 	bl	48188 <memcpy>
   36e6a:	e79c      	b.n	36da6 <secure_client_socket+0x4a>
   36e6c:	2b73      	cmp	r3, #115	; 0x73
   36e6e:	d0c5      	beq.n	36dfc <secure_client_socket+0xa0>
   36e70:	f8c4 8000 	str.w	r8, [r4]
   36e74:	e7c2      	b.n	36dfc <secure_client_socket+0xa0>
   36e76:	230c      	movs	r3, #12
   36e78:	4618      	mov	r0, r3
   36e7a:	b004      	add	sp, #16
   36e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36e80:	20025cf0 	.word	0x20025cf0
   36e84:	20025bac 	.word	0x20025bac

00036e88 <tls_interface_init>:
   36e88:	2201      	movs	r2, #1
   36e8a:	4b02      	ldr	r3, [pc, #8]	; (36e94 <tls_interface_init+0xc>)
   36e8c:	2000      	movs	r0, #0
   36e8e:	701a      	strb	r2, [r3, #0]
   36e90:	4770      	bx	lr
   36e92:	bf00      	nop
   36e94:	2002d1bc 	.word	0x2002d1bc

00036e98 <tls_interface_deinit>:
   36e98:	2300      	movs	r3, #0
   36e9a:	4a02      	ldr	r2, [pc, #8]	; (36ea4 <tls_interface_deinit+0xc>)
   36e9c:	4618      	mov	r0, r3
   36e9e:	7013      	strb	r3, [r2, #0]
   36ea0:	4770      	bx	lr
   36ea2:	bf00      	nop
   36ea4:	2002d1bc 	.word	0x2002d1bc

00036ea8 <tls_interface_open>:
   36ea8:	b538      	push	{r3, r4, r5, lr}
   36eaa:	4b23      	ldr	r3, [pc, #140]	; (36f38 <tls_interface_open+0x90>)
   36eac:	781b      	ldrb	r3, [r3, #0]
   36eae:	2b00      	cmp	r3, #0
   36eb0:	d03c      	beq.n	36f2c <tls_interface_open+0x84>
   36eb2:	1e4b      	subs	r3, r1, #1
   36eb4:	2b01      	cmp	r3, #1
   36eb6:	d808      	bhi.n	36eca <tls_interface_open+0x22>
   36eb8:	4614      	mov	r4, r2
   36eba:	b162      	cbz	r2, 36ed6 <tls_interface_open+0x2e>
   36ebc:	2901      	cmp	r1, #1
   36ebe:	d02d      	beq.n	36f1c <tls_interface_open+0x74>
   36ec0:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   36ec4:	bf08      	it	eq
   36ec6:	2202      	moveq	r2, #2
   36ec8:	d00d      	beq.n	36ee6 <tls_interface_open+0x3e>
   36eca:	2029      	movs	r0, #41	; 0x29
   36ecc:	f7f4 fb3c 	bl	2b548 <bsd_os_errno_set>
   36ed0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36ed4:	e020      	b.n	36f18 <tls_interface_open+0x70>
   36ed6:	2901      	cmp	r1, #1
   36ed8:	bf0b      	itete	eq
   36eda:	2201      	moveq	r2, #1
   36edc:	2202      	movne	r2, #2
   36ede:	f44f 7482 	moveq.w	r4, #260	; 0x104
   36ee2:	f44f 7487 	movne.w	r4, #270	; 0x10e
   36ee6:	f000 fd4d 	bl	37984 <ip_interface_open>
   36eea:	1e05      	subs	r5, r0, #0
   36eec:	db1b      	blt.n	36f26 <tls_interface_open+0x7e>
   36eee:	4b13      	ldr	r3, [pc, #76]	; (36f3c <tls_interface_open+0x94>)
   36ef0:	eb05 00c5 	add.w	r0, r5, r5, lsl #3
   36ef4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   36ef8:	2224      	movs	r2, #36	; 0x24
   36efa:	4911      	ldr	r1, [pc, #68]	; (36f40 <tls_interface_open+0x98>)
   36efc:	f011 f944 	bl	48188 <memcpy>
   36f00:	4628      	mov	r0, r5
   36f02:	f006 ff49 	bl	3dd98 <interface_socket_from_handle_get>
   36f06:	6803      	ldr	r3, [r0, #0]
   36f08:	6144      	str	r4, [r0, #20]
   36f0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   36f0e:	6003      	str	r3, [r0, #0]
   36f10:	6803      	ldr	r3, [r0, #0]
   36f12:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   36f16:	6003      	str	r3, [r0, #0]
   36f18:	4628      	mov	r0, r5
   36f1a:	bd38      	pop	{r3, r4, r5, pc}
   36f1c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   36f20:	d1d3      	bne.n	36eca <tls_interface_open+0x22>
   36f22:	460a      	mov	r2, r1
   36f24:	e7df      	b.n	36ee6 <tls_interface_open+0x3e>
   36f26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36f2a:	e7f5      	b.n	36f18 <tls_interface_open+0x70>
   36f2c:	2070      	movs	r0, #112	; 0x70
   36f2e:	f7f4 fb0b 	bl	2b548 <bsd_os_errno_set>
   36f32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   36f36:	e7ef      	b.n	36f18 <tls_interface_open+0x70>
   36f38:	2002d1bc 	.word	0x2002d1bc
   36f3c:	20025bac 	.word	0x20025bac
   36f40:	0004a464 	.word	0x0004a464

00036f44 <tls_interface_close>:
   36f44:	b538      	push	{r3, r4, r5, lr}
   36f46:	4604      	mov	r4, r0
   36f48:	f006 ff26 	bl	3dd98 <interface_socket_from_handle_get>
   36f4c:	b180      	cbz	r0, 36f70 <tls_interface_close+0x2c>
   36f4e:	4d0b      	ldr	r5, [pc, #44]	; (36f7c <tls_interface_close+0x38>)
   36f50:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
   36f54:	b138      	cbz	r0, 36f66 <tls_interface_close+0x22>
   36f56:	f006 fa11 	bl	3d37c <nrf_free>
   36f5a:	2300      	movs	r3, #0
   36f5c:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
   36f60:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
   36f64:	6053      	str	r3, [r2, #4]
   36f66:	4620      	mov	r0, r4
   36f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   36f6c:	f000 bdd0 	b.w	37b10 <ip_interface_close>
   36f70:	2009      	movs	r0, #9
   36f72:	f7f4 fae9 	bl	2b548 <bsd_os_errno_set>
   36f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   36f7a:	bd38      	pop	{r3, r4, r5, pc}
   36f7c:	20025cf0 	.word	0x20025cf0

00036f80 <tls_interface_sendto>:
   36f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f84:	b087      	sub	sp, #28
   36f86:	9103      	str	r1, [sp, #12]
   36f88:	4616      	mov	r6, r2
   36f8a:	469b      	mov	fp, r3
   36f8c:	4682      	mov	sl, r0
   36f8e:	f006 ff03 	bl	3dd98 <interface_socket_from_handle_get>
   36f92:	2800      	cmp	r0, #0
   36f94:	f000 8082 	beq.w	3709c <tls_interface_sendto+0x11c>
   36f98:	2400      	movs	r4, #0
   36f9a:	f01b 0f02 	tst.w	fp, #2
   36f9e:	bf08      	it	eq
   36fa0:	6807      	ldreq	r7, [r0, #0]
   36fa2:	4a40      	ldr	r2, [pc, #256]	; (370a4 <tls_interface_sendto+0x124>)
   36fa4:	bf08      	it	eq
   36fa6:	f087 5780 	eoreq.w	r7, r7, #268435456	; 0x10000000
   36faa:	eb0a 09ca 	add.w	r9, sl, sl, lsl #3
   36fae:	4605      	mov	r5, r0
   36fb0:	bf0c      	ite	eq
   36fb2:	f3c7 7700 	ubfxeq	r7, r7, #28, #1
   36fb6:	2700      	movne	r7, #0
   36fb8:	46a0      	mov	r8, r4
   36fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   36fbe:	eb02 0989 	add.w	r9, r2, r9, lsl #2
   36fc2:	e00f      	b.n	36fe4 <tls_interface_sendto+0x64>
   36fc4:	f899 2000 	ldrb.w	r2, [r9]
   36fc8:	2a02      	cmp	r2, #2
   36fca:	d061      	beq.n	37090 <tls_interface_sendto+0x110>
   36fcc:	692a      	ldr	r2, [r5, #16]
   36fce:	2a01      	cmp	r2, #1
   36fd0:	d061      	beq.n	37096 <tls_interface_sendto+0x116>
   36fd2:	2b00      	cmp	r3, #0
   36fd4:	db30      	blt.n	37038 <tls_interface_sendto+0xb8>
   36fd6:	f1b8 0f00 	cmp.w	r8, #0
   36fda:	dc18      	bgt.n	3700e <tls_interface_sendto+0x8e>
   36fdc:	441c      	add	r4, r3
   36fde:	b1df      	cbz	r7, 37018 <tls_interface_sendto+0x98>
   36fe0:	42a6      	cmp	r6, r4
   36fe2:	dd19      	ble.n	37018 <tls_interface_sendto+0x98>
   36fe4:	6829      	ldr	r1, [r5, #0]
   36fe6:	1b32      	subs	r2, r6, r4
   36fe8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   36fec:	b289      	uxth	r1, r1
   36fee:	bfa8      	it	ge
   36ff0:	f44f 6200 	movge.w	r2, #2048	; 0x800
   36ff4:	290c      	cmp	r1, #12
   36ff6:	d013      	beq.n	37020 <tls_interface_sendto+0xa0>
   36ff8:	6829      	ldr	r1, [r5, #0]
   36ffa:	b289      	uxth	r1, r1
   36ffc:	290b      	cmp	r1, #11
   36ffe:	d0e1      	beq.n	36fc4 <tls_interface_sendto+0x44>
   37000:	6929      	ldr	r1, [r5, #16]
   37002:	2901      	cmp	r1, #1
   37004:	d024      	beq.n	37050 <tls_interface_sendto+0xd0>
   37006:	2902      	cmp	r1, #2
   37008:	d01a      	beq.n	37040 <tls_interface_sendto+0xc0>
   3700a:	f04f 0839 	mov.w	r8, #57	; 0x39
   3700e:	4640      	mov	r0, r8
   37010:	f7f4 fa9a 	bl	2b548 <bsd_os_errno_set>
   37014:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   37018:	4620      	mov	r0, r4
   3701a:	b007      	add	sp, #28
   3701c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37020:	9b11      	ldr	r3, [sp, #68]	; 0x44
   37022:	9903      	ldr	r1, [sp, #12]
   37024:	9301      	str	r3, [sp, #4]
   37026:	9b10      	ldr	r3, [sp, #64]	; 0x40
   37028:	4421      	add	r1, r4
   3702a:	9300      	str	r3, [sp, #0]
   3702c:	4650      	mov	r0, sl
   3702e:	465b      	mov	r3, fp
   37030:	f000 fde0 	bl	37bf4 <ip_interface_sendto>
   37034:	1e03      	subs	r3, r0, #0
   37036:	dad1      	bge.n	36fdc <tls_interface_sendto+0x5c>
   37038:	f1b8 0f00 	cmp.w	r8, #0
   3703c:	ddea      	ble.n	37014 <tls_interface_sendto+0x94>
   3703e:	e7e6      	b.n	3700e <tls_interface_sendto+0x8e>
   37040:	6829      	ldr	r1, [r5, #0]
   37042:	b289      	uxth	r1, r1
   37044:	2902      	cmp	r1, #2
   37046:	d007      	beq.n	37058 <tls_interface_sendto+0xd8>
   37048:	6829      	ldr	r1, [r5, #0]
   3704a:	b289      	uxth	r1, r1
   3704c:	2904      	cmp	r1, #4
   3704e:	d003      	beq.n	37058 <tls_interface_sendto+0xd8>
   37050:	6829      	ldr	r1, [r5, #0]
   37052:	b289      	uxth	r1, r1
   37054:	2905      	cmp	r1, #5
   37056:	d1d8      	bne.n	3700a <tls_interface_sendto+0x8a>
   37058:	f899 1000 	ldrb.w	r1, [r9]
   3705c:	2902      	cmp	r1, #2
   3705e:	d1b8      	bne.n	36fd2 <tls_interface_sendto+0x52>
   37060:	4629      	mov	r1, r5
   37062:	4650      	mov	r0, sl
   37064:	e9cd 2304 	strd	r2, r3, [sp, #16]
   37068:	f7ff fe78 	bl	36d5c <secure_client_socket>
   3706c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   37070:	4680      	mov	r8, r0
   37072:	2800      	cmp	r0, #0
   37074:	d1ad      	bne.n	36fd2 <tls_interface_sendto+0x52>
   37076:	9b11      	ldr	r3, [sp, #68]	; 0x44
   37078:	9903      	ldr	r1, [sp, #12]
   3707a:	9301      	str	r3, [sp, #4]
   3707c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3707e:	4421      	add	r1, r4
   37080:	9300      	str	r3, [sp, #0]
   37082:	4650      	mov	r0, sl
   37084:	465b      	mov	r3, fp
   37086:	f000 fdb5 	bl	37bf4 <ip_interface_sendto>
   3708a:	1e03      	subs	r3, r0, #0
   3708c:	daa6      	bge.n	36fdc <tls_interface_sendto+0x5c>
   3708e:	e7c1      	b.n	37014 <tls_interface_sendto+0x94>
   37090:	f04f 0823 	mov.w	r8, #35	; 0x23
   37094:	e7bb      	b.n	3700e <tls_interface_sendto+0x8e>
   37096:	f04f 082a 	mov.w	r8, #42	; 0x2a
   3709a:	e7b8      	b.n	3700e <tls_interface_sendto+0x8e>
   3709c:	f04f 0809 	mov.w	r8, #9
   370a0:	e7b5      	b.n	3700e <tls_interface_sendto+0x8e>
   370a2:	bf00      	nop
   370a4:	20025bac 	.word	0x20025bac

000370a8 <tls_interface_recvfrom>:
   370a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   370ac:	460d      	mov	r5, r1
   370ae:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   370b2:	4616      	mov	r6, r2
   370b4:	461f      	mov	r7, r3
   370b6:	4604      	mov	r4, r0
   370b8:	f006 fe6e 	bl	3dd98 <interface_socket_from_handle_get>
   370bc:	2800      	cmp	r0, #0
   370be:	d038      	beq.n	37132 <tls_interface_recvfrom+0x8a>
   370c0:	6803      	ldr	r3, [r0, #0]
   370c2:	b29b      	uxth	r3, r3
   370c4:	2b0c      	cmp	r3, #12
   370c6:	d00f      	beq.n	370e8 <tls_interface_recvfrom+0x40>
   370c8:	6803      	ldr	r3, [r0, #0]
   370ca:	b29b      	uxth	r3, r3
   370cc:	2b0d      	cmp	r3, #13
   370ce:	d00b      	beq.n	370e8 <tls_interface_recvfrom+0x40>
   370d0:	6903      	ldr	r3, [r0, #16]
   370d2:	2b01      	cmp	r3, #1
   370d4:	d01a      	beq.n	3710c <tls_interface_recvfrom+0x64>
   370d6:	2b02      	cmp	r3, #2
   370d8:	d010      	beq.n	370fc <tls_interface_recvfrom+0x54>
   370da:	2023      	movs	r0, #35	; 0x23
   370dc:	f7f4 fa34 	bl	2b548 <bsd_os_errno_set>
   370e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   370e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   370e8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   370ec:	463b      	mov	r3, r7
   370ee:	4632      	mov	r2, r6
   370f0:	4629      	mov	r1, r5
   370f2:	4620      	mov	r0, r4
   370f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   370f8:	f000 bef8 	b.w	37eec <ip_interface_recvfrom>
   370fc:	6803      	ldr	r3, [r0, #0]
   370fe:	b29b      	uxth	r3, r3
   37100:	2b02      	cmp	r3, #2
   37102:	d007      	beq.n	37114 <tls_interface_recvfrom+0x6c>
   37104:	6803      	ldr	r3, [r0, #0]
   37106:	b29b      	uxth	r3, r3
   37108:	2b04      	cmp	r3, #4
   3710a:	d003      	beq.n	37114 <tls_interface_recvfrom+0x6c>
   3710c:	6803      	ldr	r3, [r0, #0]
   3710e:	b29b      	uxth	r3, r3
   37110:	2b05      	cmp	r3, #5
   37112:	d1e2      	bne.n	370da <tls_interface_recvfrom+0x32>
   37114:	4b08      	ldr	r3, [pc, #32]	; (37138 <tls_interface_recvfrom+0x90>)
   37116:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   3711a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   3711e:	2b02      	cmp	r3, #2
   37120:	d1db      	bne.n	370da <tls_interface_recvfrom+0x32>
   37122:	4601      	mov	r1, r0
   37124:	4620      	mov	r0, r4
   37126:	f7ff fe19 	bl	36d5c <secure_client_socket>
   3712a:	2800      	cmp	r0, #0
   3712c:	d0dc      	beq.n	370e8 <tls_interface_recvfrom+0x40>
   3712e:	dcd5      	bgt.n	370dc <tls_interface_recvfrom+0x34>
   37130:	e7d6      	b.n	370e0 <tls_interface_recvfrom+0x38>
   37132:	2009      	movs	r0, #9
   37134:	e7d2      	b.n	370dc <tls_interface_recvfrom+0x34>
   37136:	bf00      	nop
   37138:	20025bac 	.word	0x20025bac

0003713c <tls_interface_bind>:
   3713c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37140:	b082      	sub	sp, #8
   37142:	460e      	mov	r6, r1
   37144:	4617      	mov	r7, r2
   37146:	4605      	mov	r5, r0
   37148:	f006 fe26 	bl	3dd98 <interface_socket_from_handle_get>
   3714c:	2800      	cmp	r0, #0
   3714e:	d069      	beq.n	37224 <tls_interface_bind+0xe8>
   37150:	6803      	ldr	r3, [r0, #0]
   37152:	4604      	mov	r4, r0
   37154:	b29b      	uxth	r3, r3
   37156:	2b02      	cmp	r3, #2
   37158:	d158      	bne.n	3720c <tls_interface_bind+0xd0>
   3715a:	463a      	mov	r2, r7
   3715c:	4631      	mov	r1, r6
   3715e:	4628      	mov	r0, r5
   37160:	f001 f9d4 	bl	3850c <ip_interface_bind>
   37164:	2800      	cmp	r0, #0
   37166:	d148      	bne.n	371fa <tls_interface_bind+0xbe>
   37168:	00ee      	lsls	r6, r5, #3
   3716a:	4f2f      	ldr	r7, [pc, #188]	; (37228 <tls_interface_bind+0xec>)
   3716c:	1973      	adds	r3, r6, r5
   3716e:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   37172:	2b01      	cmp	r3, #1
   37174:	d002      	beq.n	3717c <tls_interface_bind+0x40>
   37176:	b002      	add	sp, #8
   37178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3717c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   37180:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 3722c <tls_interface_bind+0xf0>
   37184:	f247 0281 	movw	r2, #28801	; 0x7081
   37188:	eb0a 0906 	add.w	r9, sl, r6
   3718c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   37190:	69a1      	ldr	r1, [r4, #24]
   37192:	4628      	mov	r0, r5
   37194:	f8cd c004 	str.w	ip, [sp, #4]
   37198:	f000 fb80 	bl	3789c <ip_interface_request_create>
   3719c:	4680      	mov	r8, r0
   3719e:	2800      	cmp	r0, #0
   371a0:	d03e      	beq.n	37220 <tls_interface_bind+0xe4>
   371a2:	f8d9 2004 	ldr.w	r2, [r9, #4]
   371a6:	bbaa      	cbnz	r2, 37214 <tls_interface_bind+0xd8>
   371a8:	1971      	adds	r1, r6, r5
   371aa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   371ae:	2224      	movs	r2, #36	; 0x24
   371b0:	f108 0014 	add.w	r0, r8, #20
   371b4:	f010 ffe8 	bl	48188 <memcpy>
   371b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   371bc:	4641      	mov	r1, r8
   371be:	3324      	adds	r3, #36	; 0x24
   371c0:	f8c8 3008 	str.w	r3, [r8, #8]
   371c4:	6822      	ldr	r2, [r4, #0]
   371c6:	2304      	movs	r3, #4
   371c8:	0c12      	lsrs	r2, r2, #16
   371ca:	0412      	lsls	r2, r2, #16
   371cc:	f042 020a 	orr.w	r2, r2, #10
   371d0:	6022      	str	r2, [r4, #0]
   371d2:	4620      	mov	r0, r4
   371d4:	f247 0281 	movw	r2, #28801	; 0x7081
   371d8:	f000 fb80 	bl	378dc <ip_interface_request_send>
   371dc:	b968      	cbnz	r0, 371fa <tls_interface_bind+0xbe>
   371de:	6823      	ldr	r3, [r4, #0]
   371e0:	00db      	lsls	r3, r3, #3
   371e2:	d415      	bmi.n	37210 <tls_interface_bind+0xd4>
   371e4:	4628      	mov	r0, r5
   371e6:	ab01      	add	r3, sp, #4
   371e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   371ec:	210b      	movs	r1, #11
   371ee:	f000 fb89 	bl	37904 <ip_interface_wait>
   371f2:	2800      	cmp	r0, #0
   371f4:	d0bf      	beq.n	37176 <tls_interface_bind+0x3a>
   371f6:	2304      	movs	r3, #4
   371f8:	6023      	str	r3, [r4, #0]
   371fa:	2800      	cmp	r0, #0
   371fc:	ddbb      	ble.n	37176 <tls_interface_bind+0x3a>
   371fe:	f7f4 f9a3 	bl	2b548 <bsd_os_errno_set>
   37202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37206:	b002      	add	sp, #8
   37208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3720c:	202d      	movs	r0, #45	; 0x2d
   3720e:	e7f6      	b.n	371fe <tls_interface_bind+0xc2>
   37210:	2073      	movs	r0, #115	; 0x73
   37212:	e7f4      	b.n	371fe <tls_interface_bind+0xc2>
   37214:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   37218:	6800      	ldr	r0, [r0, #0]
   3721a:	f010 ffb5 	bl	48188 <memcpy>
   3721e:	e7c3      	b.n	371a8 <tls_interface_bind+0x6c>
   37220:	200c      	movs	r0, #12
   37222:	e7ec      	b.n	371fe <tls_interface_bind+0xc2>
   37224:	2009      	movs	r0, #9
   37226:	e7ea      	b.n	371fe <tls_interface_bind+0xc2>
   37228:	20025bac 	.word	0x20025bac
   3722c:	20025cf0 	.word	0x20025cf0

00037230 <tls_interface_connect>:
   37230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37232:	460e      	mov	r6, r1
   37234:	4617      	mov	r7, r2
   37236:	4604      	mov	r4, r0
   37238:	f006 fdae 	bl	3dd98 <interface_socket_from_handle_get>
   3723c:	b1e8      	cbz	r0, 3727a <tls_interface_connect+0x4a>
   3723e:	4b13      	ldr	r3, [pc, #76]	; (3728c <tls_interface_connect+0x5c>)
   37240:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   37244:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   37248:	2b02      	cmp	r3, #2
   3724a:	d11c      	bne.n	37286 <tls_interface_connect+0x56>
   3724c:	6803      	ldr	r3, [r0, #0]
   3724e:	4605      	mov	r5, r0
   37250:	b29b      	uxth	r3, r3
   37252:	2b02      	cmp	r3, #2
   37254:	d003      	beq.n	3725e <tls_interface_connect+0x2e>
   37256:	6803      	ldr	r3, [r0, #0]
   37258:	b29b      	uxth	r3, r3
   3725a:	2b04      	cmp	r3, #4
   3725c:	d113      	bne.n	37286 <tls_interface_connect+0x56>
   3725e:	463a      	mov	r2, r7
   37260:	4631      	mov	r1, r6
   37262:	4620      	mov	r0, r4
   37264:	f000 ff6a 	bl	3813c <ip_interface_connect>
   37268:	b110      	cbz	r0, 37270 <tls_interface_connect+0x40>
   3726a:	2800      	cmp	r0, #0
   3726c:	dc06      	bgt.n	3727c <tls_interface_connect+0x4c>
   3726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37270:	4629      	mov	r1, r5
   37272:	4620      	mov	r0, r4
   37274:	f7ff fd72 	bl	36d5c <secure_client_socket>
   37278:	e7f7      	b.n	3726a <tls_interface_connect+0x3a>
   3727a:	2009      	movs	r0, #9
   3727c:	f7f4 f964 	bl	2b548 <bsd_os_errno_set>
   37280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37286:	202d      	movs	r0, #45	; 0x2d
   37288:	e7f8      	b.n	3727c <tls_interface_connect+0x4c>
   3728a:	bf00      	nop
   3728c:	20025bac 	.word	0x20025bac

00037290 <tls_interface_listen>:
   37290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37294:	b085      	sub	sp, #20
   37296:	4689      	mov	r9, r1
   37298:	4605      	mov	r5, r0
   3729a:	f006 fd7d 	bl	3dd98 <interface_socket_from_handle_get>
   3729e:	2800      	cmp	r0, #0
   372a0:	f000 8084 	beq.w	373ac <tls_interface_listen+0x11c>
   372a4:	6803      	ldr	r3, [r0, #0]
   372a6:	4604      	mov	r4, r0
   372a8:	00da      	lsls	r2, r3, #3
   372aa:	d47d      	bmi.n	373a8 <tls_interface_listen+0x118>
   372ac:	6903      	ldr	r3, [r0, #16]
   372ae:	2b01      	cmp	r3, #1
   372b0:	d17a      	bne.n	373a8 <tls_interface_listen+0x118>
   372b2:	6803      	ldr	r3, [r0, #0]
   372b4:	b29b      	uxth	r3, r3
   372b6:	2b04      	cmp	r3, #4
   372b8:	d05d      	beq.n	37376 <tls_interface_listen+0xe6>
   372ba:	6823      	ldr	r3, [r4, #0]
   372bc:	b29b      	uxth	r3, r3
   372be:	2b0b      	cmp	r3, #11
   372c0:	d172      	bne.n	373a8 <tls_interface_listen+0x118>
   372c2:	4a3b      	ldr	r2, [pc, #236]	; (373b0 <tls_interface_listen+0x120>)
   372c4:	00ee      	lsls	r6, r5, #3
   372c6:	1973      	adds	r3, r6, r5
   372c8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   372cc:	9201      	str	r2, [sp, #4]
   372ce:	2b01      	cmp	r3, #1
   372d0:	d16a      	bne.n	373a8 <tls_interface_listen+0x118>
   372d2:	2201      	movs	r2, #1
   372d4:	9901      	ldr	r1, [sp, #4]
   372d6:	1973      	adds	r3, r6, r5
   372d8:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
   372dc:	6823      	ldr	r3, [r4, #0]
   372de:	2b0b      	cmp	r3, #11
   372e0:	d040      	beq.n	37364 <tls_interface_listen+0xd4>
   372e2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   372e6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 373b4 <tls_interface_listen+0x124>
   372ea:	f247 0281 	movw	r2, #28801	; 0x7081
   372ee:	eb0a 0806 	add.w	r8, sl, r6
   372f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   372f6:	69a1      	ldr	r1, [r4, #24]
   372f8:	4628      	mov	r0, r5
   372fa:	6827      	ldr	r7, [r4, #0]
   372fc:	f8cd c00c 	str.w	ip, [sp, #12]
   37300:	f000 facc 	bl	3789c <ip_interface_request_create>
   37304:	4683      	mov	fp, r0
   37306:	2800      	cmp	r0, #0
   37308:	d046      	beq.n	37398 <tls_interface_listen+0x108>
   3730a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   3730e:	2a00      	cmp	r2, #0
   37310:	d144      	bne.n	3739c <tls_interface_listen+0x10c>
   37312:	9b01      	ldr	r3, [sp, #4]
   37314:	1971      	adds	r1, r6, r5
   37316:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   3731a:	2224      	movs	r2, #36	; 0x24
   3731c:	f10b 0014 	add.w	r0, fp, #20
   37320:	f010 ff32 	bl	48188 <memcpy>
   37324:	f8db 2008 	ldr.w	r2, [fp, #8]
   37328:	4659      	mov	r1, fp
   3732a:	3224      	adds	r2, #36	; 0x24
   3732c:	f8cb 2008 	str.w	r2, [fp, #8]
   37330:	6822      	ldr	r2, [r4, #0]
   37332:	463b      	mov	r3, r7
   37334:	0c12      	lsrs	r2, r2, #16
   37336:	0412      	lsls	r2, r2, #16
   37338:	f042 020a 	orr.w	r2, r2, #10
   3733c:	6022      	str	r2, [r4, #0]
   3733e:	4620      	mov	r0, r4
   37340:	f247 0281 	movw	r2, #28801	; 0x7081
   37344:	f000 faca 	bl	378dc <ip_interface_request_send>
   37348:	b980      	cbnz	r0, 3736c <tls_interface_listen+0xdc>
   3734a:	6823      	ldr	r3, [r4, #0]
   3734c:	00db      	lsls	r3, r3, #3
   3734e:	d41b      	bmi.n	37388 <tls_interface_listen+0xf8>
   37350:	ab03      	add	r3, sp, #12
   37352:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37356:	210b      	movs	r1, #11
   37358:	4628      	mov	r0, r5
   3735a:	f000 fad3 	bl	37904 <ip_interface_wait>
   3735e:	b108      	cbz	r0, 37364 <tls_interface_listen+0xd4>
   37360:	6027      	str	r7, [r4, #0]
   37362:	e003      	b.n	3736c <tls_interface_listen+0xdc>
   37364:	4649      	mov	r1, r9
   37366:	4628      	mov	r0, r5
   37368:	f001 f972 	bl	38650 <ip_interface_listen>
   3736c:	2800      	cmp	r0, #0
   3736e:	dc0c      	bgt.n	3738a <tls_interface_listen+0xfa>
   37370:	b005      	add	sp, #20
   37372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37376:	4a0e      	ldr	r2, [pc, #56]	; (373b0 <tls_interface_listen+0x120>)
   37378:	00ee      	lsls	r6, r5, #3
   3737a:	1973      	adds	r3, r6, r5
   3737c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   37380:	9201      	str	r2, [sp, #4]
   37382:	2b02      	cmp	r3, #2
   37384:	d199      	bne.n	372ba <tls_interface_listen+0x2a>
   37386:	e7a4      	b.n	372d2 <tls_interface_listen+0x42>
   37388:	2073      	movs	r0, #115	; 0x73
   3738a:	f7f4 f8dd 	bl	2b548 <bsd_os_errno_set>
   3738e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37392:	b005      	add	sp, #20
   37394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37398:	200c      	movs	r0, #12
   3739a:	e7f6      	b.n	3738a <tls_interface_listen+0xfa>
   3739c:	f85a 1035 	ldr.w	r1, [sl, r5, lsl #3]
   373a0:	6800      	ldr	r0, [r0, #0]
   373a2:	f010 fef1 	bl	48188 <memcpy>
   373a6:	e7b4      	b.n	37312 <tls_interface_listen+0x82>
   373a8:	202d      	movs	r0, #45	; 0x2d
   373aa:	e7ee      	b.n	3738a <tls_interface_listen+0xfa>
   373ac:	2009      	movs	r0, #9
   373ae:	e7ec      	b.n	3738a <tls_interface_listen+0xfa>
   373b0:	20025bac 	.word	0x20025bac
   373b4:	20025cf0 	.word	0x20025cf0

000373b8 <tls_interface_accept>:
   373b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   373bc:	b083      	sub	sp, #12
   373be:	460f      	mov	r7, r1
   373c0:	4690      	mov	r8, r2
   373c2:	4699      	mov	r9, r3
   373c4:	4606      	mov	r6, r0
   373c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   373ca:	f006 fce5 	bl	3dd98 <interface_socket_from_handle_get>
   373ce:	9401      	str	r4, [sp, #4]
   373d0:	2800      	cmp	r0, #0
   373d2:	d048      	beq.n	37466 <tls_interface_accept+0xae>
   373d4:	6805      	ldr	r5, [r0, #0]
   373d6:	b2ad      	uxth	r5, r5
   373d8:	2d07      	cmp	r5, #7
   373da:	d144      	bne.n	37466 <tls_interface_accept+0xae>
   373dc:	6803      	ldr	r3, [r0, #0]
   373de:	00db      	lsls	r3, r3, #3
   373e0:	d443      	bmi.n	3746a <tls_interface_accept+0xb2>
   373e2:	464b      	mov	r3, r9
   373e4:	4642      	mov	r2, r8
   373e6:	4639      	mov	r1, r7
   373e8:	4630      	mov	r0, r6
   373ea:	f001 f9ad 	bl	38748 <ip_interface_accept>
   373ee:	1e04      	subs	r4, r0, #0
   373f0:	da08      	bge.n	37404 <tls_interface_accept+0x4c>
   373f2:	4620      	mov	r0, r4
   373f4:	f7f4 f8a8 	bl	2b548 <bsd_os_errno_set>
   373f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   373fc:	4620      	mov	r0, r4
   373fe:	b003      	add	sp, #12
   37400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   37404:	f006 fcc8 	bl	3dd98 <interface_socket_from_handle_get>
   37408:	6803      	ldr	r3, [r0, #0]
   3740a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 37474 <tls_interface_accept+0xbc>
   3740e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37412:	6003      	str	r3, [r0, #0]
   37414:	6803      	ldr	r3, [r0, #0]
   37416:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
   3741a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3741e:	00bf      	lsls	r7, r7, #2
   37420:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   37424:	4605      	mov	r5, r0
   37426:	6003      	str	r3, [r0, #0]
   37428:	eb08 0186 	add.w	r1, r8, r6, lsl #2
   3742c:	2224      	movs	r2, #36	; 0x24
   3742e:	eb08 0007 	add.w	r0, r8, r7
   37432:	f010 fea9 	bl	48188 <memcpy>
   37436:	2302      	movs	r3, #2
   37438:	f808 3007 	strb.w	r3, [r8, r7]
   3743c:	682a      	ldr	r2, [r5, #0]
   3743e:	ab01      	add	r3, sp, #4
   37440:	0c12      	lsrs	r2, r2, #16
   37442:	0412      	lsls	r2, r2, #16
   37444:	f042 020b 	orr.w	r2, r2, #11
   37448:	602a      	str	r2, [r5, #0]
   3744a:	210c      	movs	r1, #12
   3744c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37450:	4620      	mov	r0, r4
   37452:	f000 fa57 	bl	37904 <ip_interface_wait>
   37456:	4605      	mov	r5, r0
   37458:	2800      	cmp	r0, #0
   3745a:	d0cf      	beq.n	373fc <tls_interface_accept+0x44>
   3745c:	4620      	mov	r0, r4
   3745e:	f000 fb57 	bl	37b10 <ip_interface_close>
   37462:	462c      	mov	r4, r5
   37464:	e7c5      	b.n	373f2 <tls_interface_accept+0x3a>
   37466:	2409      	movs	r4, #9
   37468:	e7c3      	b.n	373f2 <tls_interface_accept+0x3a>
   3746a:	202d      	movs	r0, #45	; 0x2d
   3746c:	f7f4 f86c 	bl	2b548 <bsd_os_errno_set>
   37470:	e7c4      	b.n	373fc <tls_interface_accept+0x44>
   37472:	bf00      	nop
   37474:	20025bac 	.word	0x20025bac

00037478 <tls_interface_setopt>:
   37478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3747c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   37480:	b082      	sub	sp, #8
   37482:	9e08      	ldr	r6, [sp, #32]
   37484:	d120      	bne.n	374c8 <tls_interface_setopt+0x50>
   37486:	4698      	mov	r8, r3
   37488:	4617      	mov	r7, r2
   3748a:	4605      	mov	r5, r0
   3748c:	2b00      	cmp	r3, #0
   3748e:	f000 80a0 	beq.w	375d2 <tls_interface_setopt+0x15a>
   37492:	f006 fc81 	bl	3dd98 <interface_socket_from_handle_get>
   37496:	2800      	cmp	r0, #0
   37498:	f000 8097 	beq.w	375ca <tls_interface_setopt+0x152>
   3749c:	6804      	ldr	r4, [r0, #0]
   3749e:	b2a4      	uxth	r4, r4
   374a0:	2c02      	cmp	r4, #2
   374a2:	d008      	beq.n	374b6 <tls_interface_setopt+0x3e>
   374a4:	6803      	ldr	r3, [r0, #0]
   374a6:	b29b      	uxth	r3, r3
   374a8:	2b04      	cmp	r3, #4
   374aa:	d004      	beq.n	374b6 <tls_interface_setopt+0x3e>
   374ac:	6803      	ldr	r3, [r0, #0]
   374ae:	b29b      	uxth	r3, r3
   374b0:	2b05      	cmp	r3, #5
   374b2:	f040 808a 	bne.w	375ca <tls_interface_setopt+0x152>
   374b6:	1e7a      	subs	r2, r7, #1
   374b8:	2a05      	cmp	r2, #5
   374ba:	f200 8090 	bhi.w	375de <tls_interface_setopt+0x166>
   374be:	e8df f002 	tbb	[pc, r2]
   374c2:	2718      	.short	0x2718
   374c4:	08594b3c 	.word	0x08594b3c
   374c8:	b002      	add	sp, #8
   374ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   374ce:	f001 ba7d 	b.w	389cc <ip_interface_setopt>
   374d2:	4601      	mov	r1, r0
   374d4:	e9cd 8600 	strd	r8, r6, [sp]
   374d8:	4628      	mov	r0, r5
   374da:	f247 0301 	movw	r3, #28673	; 0x7001
   374de:	f44f 7280 	mov.w	r2, #256	; 0x100
   374e2:	f000 ff9d 	bl	38420 <ip_interface_socketoption_send>
   374e6:	2800      	cmp	r0, #0
   374e8:	d161      	bne.n	375ae <tls_interface_setopt+0x136>
   374ea:	2000      	movs	r0, #0
   374ec:	b002      	add	sp, #8
   374ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   374f2:	2e04      	cmp	r6, #4
   374f4:	d15a      	bne.n	375ac <tls_interface_setopt+0x134>
   374f6:	f8d8 0000 	ldr.w	r0, [r8]
   374fa:	2800      	cmp	r0, #0
   374fc:	d05e      	beq.n	375bc <tls_interface_setopt+0x144>
   374fe:	2801      	cmp	r0, #1
   37500:	d154      	bne.n	375ac <tls_interface_setopt+0x134>
   37502:	4b38      	ldr	r3, [pc, #224]	; (375e4 <tls_interface_setopt+0x16c>)
   37504:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   37508:	f803 0024 	strb.w	r0, [r3, r4, lsl #2]
   3750c:	2000      	movs	r0, #0
   3750e:	e7ed      	b.n	374ec <tls_interface_setopt+0x74>
   37510:	ea5f 0c96 	movs.w	ip, r6, lsr #2
   37514:	d04a      	beq.n	375ac <tls_interface_setopt+0x134>
   37516:	f016 0703 	ands.w	r7, r6, #3
   3751a:	d147      	bne.n	375ac <tls_interface_setopt+0x134>
   3751c:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   37520:	00a4      	lsls	r4, r4, #2
   37522:	4b30      	ldr	r3, [pc, #192]	; (375e4 <tls_interface_setopt+0x16c>)
   37524:	1d20      	adds	r0, r4, #4
   37526:	4418      	add	r0, r3
   37528:	4423      	add	r3, r4
   3752a:	4632      	mov	r2, r6
   3752c:	4641      	mov	r1, r8
   3752e:	f883 c003 	strb.w	ip, [r3, #3]
   37532:	f010 fe29 	bl	48188 <memcpy>
   37536:	4638      	mov	r0, r7
   37538:	e7d8      	b.n	374ec <tls_interface_setopt+0x74>
   3753a:	2e01      	cmp	r6, #1
   3753c:	d136      	bne.n	375ac <tls_interface_setopt+0x134>
   3753e:	f898 2000 	ldrb.w	r2, [r8]
   37542:	4b28      	ldr	r3, [pc, #160]	; (375e4 <tls_interface_setopt+0x16c>)
   37544:	3200      	adds	r2, #0
   37546:	bf18      	it	ne
   37548:	2201      	movne	r2, #1
   3754a:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3754e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   37552:	7062      	strb	r2, [r4, #1]
   37554:	2000      	movs	r0, #0
   37556:	e7c9      	b.n	374ec <tls_interface_setopt+0x74>
   37558:	2e04      	cmp	r6, #4
   3755a:	d127      	bne.n	375ac <tls_interface_setopt+0x134>
   3755c:	f8d8 2000 	ldr.w	r2, [r8]
   37560:	2a02      	cmp	r2, #2
   37562:	d823      	bhi.n	375ac <tls_interface_setopt+0x134>
   37564:	4b1f      	ldr	r3, [pc, #124]	; (375e4 <tls_interface_setopt+0x16c>)
   37566:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   3756a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   3756e:	70a2      	strb	r2, [r4, #2]
   37570:	2000      	movs	r0, #0
   37572:	e7bb      	b.n	374ec <tls_interface_setopt+0x74>
   37574:	4c1c      	ldr	r4, [pc, #112]	; (375e8 <tls_interface_setopt+0x170>)
   37576:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
   3757a:	b138      	cbz	r0, 3758c <tls_interface_setopt+0x114>
   3757c:	f005 fefe 	bl	3d37c <nrf_free>
   37580:	2200      	movs	r2, #0
   37582:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   37586:	f844 2035 	str.w	r2, [r4, r5, lsl #3]
   3758a:	605a      	str	r2, [r3, #4]
   3758c:	2e00      	cmp	r6, #0
   3758e:	d0ac      	beq.n	374ea <tls_interface_setopt+0x72>
   37590:	4630      	mov	r0, r6
   37592:	f005 fee9 	bl	3d368 <nrf_malloc>
   37596:	f844 0035 	str.w	r0, [r4, r5, lsl #3]
   3759a:	b1c0      	cbz	r0, 375ce <tls_interface_setopt+0x156>
   3759c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   375a0:	4632      	mov	r2, r6
   375a2:	4641      	mov	r1, r8
   375a4:	6066      	str	r6, [r4, #4]
   375a6:	f010 fdef 	bl	48188 <memcpy>
   375aa:	e79e      	b.n	374ea <tls_interface_setopt+0x72>
   375ac:	2016      	movs	r0, #22
   375ae:	f7f3 ffcb 	bl	2b548 <bsd_os_errno_set>
   375b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   375b6:	b002      	add	sp, #8
   375b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   375bc:	2202      	movs	r2, #2
   375be:	4b09      	ldr	r3, [pc, #36]	; (375e4 <tls_interface_setopt+0x16c>)
   375c0:	eb05 04c5 	add.w	r4, r5, r5, lsl #3
   375c4:	f803 2024 	strb.w	r2, [r3, r4, lsl #2]
   375c8:	e790      	b.n	374ec <tls_interface_setopt+0x74>
   375ca:	2009      	movs	r0, #9
   375cc:	e7ef      	b.n	375ae <tls_interface_setopt+0x136>
   375ce:	200c      	movs	r0, #12
   375d0:	e7ed      	b.n	375ae <tls_interface_setopt+0x136>
   375d2:	200e      	movs	r0, #14
   375d4:	f7f3 ffb8 	bl	2b548 <bsd_os_errno_set>
   375d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   375dc:	e786      	b.n	374ec <tls_interface_setopt+0x74>
   375de:	202a      	movs	r0, #42	; 0x2a
   375e0:	e7e5      	b.n	375ae <tls_interface_setopt+0x136>
   375e2:	bf00      	nop
   375e4:	20025bac 	.word	0x20025bac
   375e8:	20025cf0 	.word	0x20025cf0

000375ec <tls_interface_getopt>:
   375ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   375ee:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   375f2:	b083      	sub	sp, #12
   375f4:	9f08      	ldr	r7, [sp, #32]
   375f6:	d112      	bne.n	3761e <tls_interface_getopt+0x32>
   375f8:	461d      	mov	r5, r3
   375fa:	b16b      	cbz	r3, 37618 <tls_interface_getopt+0x2c>
   375fc:	b167      	cbz	r7, 37618 <tls_interface_getopt+0x2c>
   375fe:	4606      	mov	r6, r0
   37600:	4614      	mov	r4, r2
   37602:	f006 fbc9 	bl	3dd98 <interface_socket_from_handle_get>
   37606:	b178      	cbz	r0, 37628 <tls_interface_getopt+0x3c>
   37608:	3c01      	subs	r4, #1
   3760a:	2c05      	cmp	r4, #5
   3760c:	d859      	bhi.n	376c2 <tls_interface_getopt+0xd6>
   3760e:	e8df f004 	tbb	[pc, r4]
   37612:	2818      	.short	0x2818
   37614:	0d584c40 	.word	0x0d584c40
   37618:	200e      	movs	r0, #14
   3761a:	b003      	add	sp, #12
   3761c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3761e:	b003      	add	sp, #12
   37620:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   37624:	f001 ba74 	b.w	38b10 <ip_interface_getopt>
   37628:	2009      	movs	r0, #9
   3762a:	e7f6      	b.n	3761a <tls_interface_getopt+0x2e>
   3762c:	4601      	mov	r1, r0
   3762e:	e9cd 5700 	strd	r5, r7, [sp]
   37632:	4630      	mov	r0, r6
   37634:	f247 0301 	movw	r3, #28673	; 0x7001
   37638:	f44f 7280 	mov.w	r2, #256	; 0x100
   3763c:	f000 fe40 	bl	382c0 <ip_interface_socketoption_get>
   37640:	e7eb      	b.n	3761a <tls_interface_getopt+0x2e>
   37642:	683b      	ldr	r3, [r7, #0]
   37644:	2b04      	cmp	r3, #4
   37646:	d13e      	bne.n	376c6 <tls_interface_getopt+0xda>
   37648:	4b22      	ldr	r3, [pc, #136]	; (376d4 <tls_interface_getopt+0xe8>)
   3764a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3764e:	f813 3026 	ldrb.w	r3, [r3, r6, lsl #2]
   37652:	2000      	movs	r0, #0
   37654:	f1a3 0301 	sub.w	r3, r3, #1
   37658:	fab3 f383 	clz	r3, r3
   3765c:	095b      	lsrs	r3, r3, #5
   3765e:	602b      	str	r3, [r5, #0]
   37660:	e7db      	b.n	3761a <tls_interface_getopt+0x2e>
   37662:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   37666:	491b      	ldr	r1, [pc, #108]	; (376d4 <tls_interface_getopt+0xe8>)
   37668:	683b      	ldr	r3, [r7, #0]
   3766a:	00b6      	lsls	r6, r6, #2
   3766c:	198a      	adds	r2, r1, r6
   3766e:	f013 0403 	ands.w	r4, r3, #3
   37672:	78d0      	ldrb	r0, [r2, #3]
   37674:	d129      	bne.n	376ca <tls_interface_getopt+0xde>
   37676:	089b      	lsrs	r3, r3, #2
   37678:	4283      	cmp	r3, r0
   3767a:	bf28      	it	cs
   3767c:	4603      	movcs	r3, r0
   3767e:	009a      	lsls	r2, r3, #2
   37680:	b31b      	cbz	r3, 376ca <tls_interface_getopt+0xde>
   37682:	3604      	adds	r6, #4
   37684:	4431      	add	r1, r6
   37686:	603a      	str	r2, [r7, #0]
   37688:	4628      	mov	r0, r5
   3768a:	f010 fd7d 	bl	48188 <memcpy>
   3768e:	4620      	mov	r0, r4
   37690:	e7c3      	b.n	3761a <tls_interface_getopt+0x2e>
   37692:	683b      	ldr	r3, [r7, #0]
   37694:	2b01      	cmp	r3, #1
   37696:	d116      	bne.n	376c6 <tls_interface_getopt+0xda>
   37698:	4b0e      	ldr	r3, [pc, #56]	; (376d4 <tls_interface_getopt+0xe8>)
   3769a:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   3769e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   376a2:	7873      	ldrb	r3, [r6, #1]
   376a4:	2000      	movs	r0, #0
   376a6:	702b      	strb	r3, [r5, #0]
   376a8:	e7b7      	b.n	3761a <tls_interface_getopt+0x2e>
   376aa:	683b      	ldr	r3, [r7, #0]
   376ac:	2b04      	cmp	r3, #4
   376ae:	d10a      	bne.n	376c6 <tls_interface_getopt+0xda>
   376b0:	4b08      	ldr	r3, [pc, #32]	; (376d4 <tls_interface_getopt+0xe8>)
   376b2:	eb06 06c6 	add.w	r6, r6, r6, lsl #3
   376b6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   376ba:	78b3      	ldrb	r3, [r6, #2]
   376bc:	2000      	movs	r0, #0
   376be:	602b      	str	r3, [r5, #0]
   376c0:	e7ab      	b.n	3761a <tls_interface_getopt+0x2e>
   376c2:	202a      	movs	r0, #42	; 0x2a
   376c4:	e7a9      	b.n	3761a <tls_interface_getopt+0x2e>
   376c6:	2016      	movs	r0, #22
   376c8:	e7a7      	b.n	3761a <tls_interface_getopt+0x2e>
   376ca:	2800      	cmp	r0, #0
   376cc:	d1fb      	bne.n	376c6 <tls_interface_getopt+0xda>
   376ce:	6038      	str	r0, [r7, #0]
   376d0:	e7a3      	b.n	3761a <tls_interface_getopt+0x2e>
   376d2:	bf00      	nop
   376d4:	20025bac 	.word	0x20025bac

000376d8 <tls_rpc_ip_event_handler>:
   376d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   376da:	f248 0581 	movw	r5, #32897	; 0x8081
   376de:	42ab      	cmp	r3, r5
   376e0:	460c      	mov	r4, r1
   376e2:	d044      	beq.n	3776e <tls_rpc_ip_event_handler+0x96>
   376e4:	f249 0182 	movw	r1, #36994	; 0x9082
   376e8:	428b      	cmp	r3, r1
   376ea:	4606      	mov	r6, r0
   376ec:	d02d      	beq.n	3774a <tls_rpc_ip_event_handler+0x72>
   376ee:	f248 0102 	movw	r1, #32770	; 0x8002
   376f2:	428b      	cmp	r3, r1
   376f4:	d001      	beq.n	376fa <tls_rpc_ip_event_handler+0x22>
   376f6:	2001      	movs	r0, #1
   376f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   376fa:	2c00      	cmp	r4, #0
   376fc:	d0fb      	beq.n	376f6 <tls_rpc_ip_event_handler+0x1e>
   376fe:	6963      	ldr	r3, [r4, #20]
   37700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   37704:	d002      	beq.n	3770c <tls_rpc_ip_event_handler+0x34>
   37706:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   3770a:	d1f4      	bne.n	376f6 <tls_rpc_ip_event_handler+0x1e>
   3770c:	6823      	ldr	r3, [r4, #0]
   3770e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   37712:	6023      	str	r3, [r4, #0]
   37714:	6955      	ldr	r5, [r2, #20]
   37716:	bb05      	cbnz	r5, 3775a <tls_rpc_ip_event_handler+0x82>
   37718:	6823      	ldr	r3, [r4, #0]
   3771a:	0c1b      	lsrs	r3, r3, #16
   3771c:	041b      	lsls	r3, r3, #16
   3771e:	f043 0305 	orr.w	r3, r3, #5
   37722:	6023      	str	r3, [r4, #0]
   37724:	6823      	ldr	r3, [r4, #0]
   37726:	00db      	lsls	r3, r3, #3
   37728:	d50d      	bpl.n	37746 <tls_rpc_ip_event_handler+0x6e>
   3772a:	4b2a      	ldr	r3, [pc, #168]	; (377d4 <tls_rpc_ip_event_handler+0xfc>)
   3772c:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
   37730:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   37734:	2b02      	cmp	r3, #2
   37736:	d106      	bne.n	37746 <tls_rpc_ip_event_handler+0x6e>
   37738:	4630      	mov	r0, r6
   3773a:	4621      	mov	r1, r4
   3773c:	f7ff fb0e 	bl	36d5c <secure_client_socket>
   37740:	b108      	cbz	r0, 37746 <tls_rpc_ip_event_handler+0x6e>
   37742:	2873      	cmp	r0, #115	; 0x73
   37744:	d10c      	bne.n	37760 <tls_rpc_ip_event_handler+0x88>
   37746:	2000      	movs	r0, #0
   37748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3774a:	2c00      	cmp	r4, #0
   3774c:	d0fb      	beq.n	37746 <tls_rpc_ip_event_handler+0x6e>
   3774e:	6823      	ldr	r3, [r4, #0]
   37750:	b29b      	uxth	r3, r3
   37752:	2b0b      	cmp	r3, #11
   37754:	d1f7      	bne.n	37746 <tls_rpc_ip_event_handler+0x6e>
   37756:	6915      	ldr	r5, [r2, #16]
   37758:	b1cd      	cbz	r5, 3778e <tls_rpc_ip_event_handler+0xb6>
   3775a:	4628      	mov	r0, r5
   3775c:	f000 f894 	bl	37888 <rpc_error_to_nrf_bsd_error>
   37760:	6060      	str	r0, [r4, #4]
   37762:	6823      	ldr	r3, [r4, #0]
   37764:	2000      	movs	r0, #0
   37766:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   3776a:	6023      	str	r3, [r4, #0]
   3776c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3776e:	2900      	cmp	r1, #0
   37770:	d0e9      	beq.n	37746 <tls_rpc_ip_event_handler+0x6e>
   37772:	680b      	ldr	r3, [r1, #0]
   37774:	b29b      	uxth	r3, r3
   37776:	2b0a      	cmp	r3, #10
   37778:	d1e5      	bne.n	37746 <tls_rpc_ip_event_handler+0x6e>
   3777a:	6950      	ldr	r0, [r2, #20]
   3777c:	2800      	cmp	r0, #0
   3777e:	d1ed      	bne.n	3775c <tls_rpc_ip_event_handler+0x84>
   37780:	680b      	ldr	r3, [r1, #0]
   37782:	0c1b      	lsrs	r3, r3, #16
   37784:	041b      	lsls	r3, r3, #16
   37786:	f043 030b 	orr.w	r3, r3, #11
   3778a:	600b      	str	r3, [r1, #0]
   3778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3778e:	6823      	ldr	r3, [r4, #0]
   37790:	4f11      	ldr	r7, [pc, #68]	; (377d8 <tls_rpc_ip_event_handler+0x100>)
   37792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   37796:	6023      	str	r3, [r4, #0]
   37798:	f857 0030 	ldr.w	r0, [r7, r0, lsl #3]
   3779c:	b130      	cbz	r0, 377ac <tls_rpc_ip_event_handler+0xd4>
   3779e:	f005 fded 	bl	3d37c <nrf_free>
   377a2:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   377a6:	f847 5036 	str.w	r5, [r7, r6, lsl #3]
   377aa:	605d      	str	r5, [r3, #4]
   377ac:	6823      	ldr	r3, [r4, #0]
   377ae:	2000      	movs	r0, #0
   377b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   377b4:	6023      	str	r3, [r4, #0]
   377b6:	6823      	ldr	r3, [r4, #0]
   377b8:	0c1b      	lsrs	r3, r3, #16
   377ba:	041b      	lsls	r3, r3, #16
   377bc:	f043 030c 	orr.w	r3, r3, #12
   377c0:	6023      	str	r3, [r4, #0]
   377c2:	6823      	ldr	r3, [r4, #0]
   377c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   377c8:	6023      	str	r3, [r4, #0]
   377ca:	6823      	ldr	r3, [r4, #0]
   377cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   377d0:	6023      	str	r3, [r4, #0]
   377d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   377d4:	20025bac 	.word	0x20025bac
   377d8:	20025cf0 	.word	0x20025cf0

000377dc <ip_client_event_handler>:
   377dc:	f850 1b08 	ldr.w	r1, [r0], #8
   377e0:	0c09      	lsrs	r1, r1, #16
   377e2:	f001 bb35 	b.w	38e50 <rpc_ip_event_handler>
   377e6:	bf00      	nop

000377e8 <rpc_ip_client_init>:
   377e8:	4801      	ldr	r0, [pc, #4]	; (377f0 <rpc_ip_client_init+0x8>)
   377ea:	f001 be33 	b.w	39454 <rpc_client_register>
   377ee:	bf00      	nop
   377f0:	0004a488 	.word	0x0004a488

000377f4 <rpc_ip_client_deinit>:
   377f4:	2004      	movs	r0, #4
   377f6:	f001 be97 	b.w	39528 <rpc_client_unregister>
   377fa:	bf00      	nop

000377fc <rpc_ip_client_request_alloc>:
   377fc:	2300      	movs	r3, #0
   377fe:	b510      	push	{r4, lr}
   37800:	b082      	sub	sp, #8
   37802:	9301      	str	r3, [sp, #4]
   37804:	b158      	cbz	r0, 3781e <rpc_ip_client_request_alloc+0x22>
   37806:	4604      	mov	r4, r0
   37808:	aa01      	add	r2, sp, #4
   3780a:	2004      	movs	r0, #4
   3780c:	f001 fee2 	bl	395d4 <rpc_message_alloc>
   37810:	b918      	cbnz	r0, 3781a <rpc_ip_client_request_alloc+0x1e>
   37812:	9b01      	ldr	r3, [sp, #4]
   37814:	b10b      	cbz	r3, 3781a <rpc_ip_client_request_alloc+0x1e>
   37816:	3308      	adds	r3, #8
   37818:	6023      	str	r3, [r4, #0]
   3781a:	b002      	add	sp, #8
   3781c:	bd10      	pop	{r4, pc}
   3781e:	2007      	movs	r0, #7
   37820:	b002      	add	sp, #8
   37822:	bd10      	pop	{r4, pc}

00037824 <rpc_ip_client_request_send>:
   37824:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   37828:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   3782c:	d10b      	bne.n	37846 <rpc_ip_client_request_send+0x22>
   3782e:	b160      	cbz	r0, 3784a <rpc_ip_client_request_send+0x26>
   37830:	4603      	mov	r3, r0
   37832:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   37836:	2004      	movs	r0, #4
   37838:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3783c:	f843 1d08 	str.w	r1, [r3, #-8]!
   37840:	4619      	mov	r1, r3
   37842:	f001 beb7 	b.w	395b4 <rpc_message_send>
   37846:	200f      	movs	r0, #15
   37848:	4770      	bx	lr
   3784a:	2007      	movs	r0, #7
   3784c:	4770      	bx	lr
   3784e:	bf00      	nop

00037850 <rpc_ip_client_message_free>:
   37850:	b120      	cbz	r0, 3785c <rpc_ip_client_message_free+0xc>
   37852:	f1a0 0108 	sub.w	r1, r0, #8
   37856:	2004      	movs	r0, #4
   37858:	f001 bee8 	b.w	3962c <rpc_message_free>
   3785c:	2007      	movs	r0, #7
   3785e:	4770      	bx	lr

00037860 <rpc_ip_client_data_free>:
   37860:	b118      	cbz	r0, 3786a <rpc_ip_client_data_free+0xa>
   37862:	4601      	mov	r1, r0
   37864:	2004      	movs	r0, #4
   37866:	f001 beed 	b.w	39644 <rpc_message_data_free>
   3786a:	2007      	movs	r0, #7
   3786c:	4770      	bx	lr
   3786e:	bf00      	nop

00037870 <ip_recvd_packet_free_cb>:
   37870:	b510      	push	{r4, lr}
   37872:	4604      	mov	r4, r0
   37874:	6800      	ldr	r0, [r0, #0]
   37876:	f7ff fff3 	bl	37860 <rpc_ip_client_data_free>
   3787a:	68a0      	ldr	r0, [r4, #8]
   3787c:	b118      	cbz	r0, 37886 <ip_recvd_packet_free_cb+0x16>
   3787e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   37882:	f005 bd7b 	b.w	3d37c <nrf_free>
   37886:	bd10      	pop	{r4, pc}

00037888 <rpc_error_to_nrf_bsd_error>:
   37888:	2810      	cmp	r0, #16
   3788a:	bf9a      	itte	ls
   3788c:	4b02      	ldrls	r3, [pc, #8]	; (37898 <_flash_used+0x4>)
   3788e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   37892:	202d      	movhi	r0, #45	; 0x2d
   37894:	4770      	bx	lr
   37896:	bf00      	nop
   37898:	0004a498 	.word	0x0004a498

0003789c <ip_interface_request_create>:
   3789c:	b570      	push	{r4, r5, r6, lr}
   3789e:	2500      	movs	r5, #0
   378a0:	b082      	sub	sp, #8
   378a2:	ac02      	add	r4, sp, #8
   378a4:	f844 5d04 	str.w	r5, [r4, #-4]!
   378a8:	4606      	mov	r6, r0
   378aa:	460d      	mov	r5, r1
   378ac:	4620      	mov	r0, r4
   378ae:	4619      	mov	r1, r3
   378b0:	4614      	mov	r4, r2
   378b2:	f7ff ffa3 	bl	377fc <rpc_ip_client_request_alloc>
   378b6:	b960      	cbnz	r0, 378d2 <ip_interface_request_create+0x36>
   378b8:	9b01      	ldr	r3, [sp, #4]
   378ba:	2208      	movs	r2, #8
   378bc:	7258      	strb	r0, [r3, #9]
   378be:	7298      	strb	r0, [r3, #10]
   378c0:	72d8      	strb	r0, [r3, #11]
   378c2:	4618      	mov	r0, r3
   378c4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   378c8:	60dc      	str	r4, [r3, #12]
   378ca:	611d      	str	r5, [r3, #16]
   378cc:	721a      	strb	r2, [r3, #8]
   378ce:	b002      	add	sp, #8
   378d0:	bd70      	pop	{r4, r5, r6, pc}
   378d2:	9b01      	ldr	r3, [sp, #4]
   378d4:	4618      	mov	r0, r3
   378d6:	b002      	add	sp, #8
   378d8:	bd70      	pop	{r4, r5, r6, pc}
   378da:	bf00      	nop

000378dc <ip_interface_request_send>:
   378dc:	b570      	push	{r4, r5, r6, lr}
   378de:	460c      	mov	r4, r1
   378e0:	4605      	mov	r5, r0
   378e2:	4611      	mov	r1, r2
   378e4:	4620      	mov	r0, r4
   378e6:	461e      	mov	r6, r3
   378e8:	f7ff ff9c 	bl	37824 <rpc_ip_client_request_send>
   378ec:	b900      	cbnz	r0, 378f0 <ip_interface_request_send+0x14>
   378ee:	bd70      	pop	{r4, r5, r6, pc}
   378f0:	6820      	ldr	r0, [r4, #0]
   378f2:	b108      	cbz	r0, 378f8 <ip_interface_request_send+0x1c>
   378f4:	f7ff ffb4 	bl	37860 <rpc_ip_client_data_free>
   378f8:	4620      	mov	r0, r4
   378fa:	f7ff ffa9 	bl	37850 <rpc_ip_client_message_free>
   378fe:	602e      	str	r6, [r5, #0]
   37900:	2023      	movs	r0, #35	; 0x23
   37902:	bd70      	pop	{r4, r5, r6, pc}

00037904 <ip_interface_wait>:
   37904:	b538      	push	{r3, r4, r5, lr}
   37906:	4605      	mov	r5, r0
   37908:	f006 f9d2 	bl	3dcb0 <interface_socket_wait>
   3790c:	4604      	mov	r4, r0
   3790e:	b108      	cbz	r0, 37914 <ip_interface_wait+0x10>
   37910:	4620      	mov	r0, r4
   37912:	bd38      	pop	{r3, r4, r5, pc}
   37914:	4628      	mov	r0, r5
   37916:	f006 fa3f 	bl	3dd98 <interface_socket_from_handle_get>
   3791a:	2800      	cmp	r0, #0
   3791c:	d0f8      	beq.n	37910 <ip_interface_wait+0xc>
   3791e:	6844      	ldr	r4, [r0, #4]
   37920:	2c00      	cmp	r4, #0
   37922:	d0f5      	beq.n	37910 <ip_interface_wait+0xc>
   37924:	2300      	movs	r3, #0
   37926:	6043      	str	r3, [r0, #4]
   37928:	4620      	mov	r0, r4
   3792a:	bd38      	pop	{r3, r4, r5, pc}

0003792c <ip_interface_init>:
   3792c:	b538      	push	{r3, r4, r5, lr}
   3792e:	2300      	movs	r3, #0
   37930:	4d09      	ldr	r5, [pc, #36]	; (37958 <ip_interface_init+0x2c>)
   37932:	4c0a      	ldr	r4, [pc, #40]	; (3795c <ip_interface_init+0x30>)
   37934:	4619      	mov	r1, r3
   37936:	2224      	movs	r2, #36	; 0x24
   37938:	4809      	ldr	r0, [pc, #36]	; (37960 <ip_interface_init+0x34>)
   3793a:	602b      	str	r3, [r5, #0]
   3793c:	6023      	str	r3, [r4, #0]
   3793e:	f010 fc43 	bl	481c8 <memset>
   37942:	f7ff ff51 	bl	377e8 <rpc_ip_client_init>
   37946:	b918      	cbnz	r0, 37950 <ip_interface_init+0x24>
   37948:	2201      	movs	r2, #1
   3794a:	4b06      	ldr	r3, [pc, #24]	; (37964 <ip_interface_init+0x38>)
   3794c:	701a      	strb	r2, [r3, #0]
   3794e:	bd38      	pop	{r3, r4, r5, pc}
   37950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37954:	bd38      	pop	{r3, r4, r5, pc}
   37956:	bf00      	nop
   37958:	20025d40 	.word	0x20025d40
   3795c:	20025d3c 	.word	0x20025d3c
   37960:	20025d44 	.word	0x20025d44
   37964:	2002d1bd 	.word	0x2002d1bd

00037968 <ip_interface_deinit>:
   37968:	b510      	push	{r4, lr}
   3796a:	4c05      	ldr	r4, [pc, #20]	; (37980 <ip_interface_deinit+0x18>)
   3796c:	7820      	ldrb	r0, [r4, #0]
   3796e:	b900      	cbnz	r0, 37972 <ip_interface_deinit+0xa>
   37970:	bd10      	pop	{r4, pc}
   37972:	f7ff ff3f 	bl	377f4 <rpc_ip_client_deinit>
   37976:	b908      	cbnz	r0, 3797c <ip_interface_deinit+0x14>
   37978:	7020      	strb	r0, [r4, #0]
   3797a:	bd10      	pop	{r4, pc}
   3797c:	2003      	movs	r0, #3
   3797e:	bd10      	pop	{r4, pc}
   37980:	2002d1bd 	.word	0x2002d1bd

00037984 <ip_interface_open>:
   37984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37988:	2500      	movs	r5, #0
   3798a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3798e:	4c5e      	ldr	r4, [pc, #376]	; (37b08 <ip_interface_open+0x184>)
   37990:	4606      	mov	r6, r0
   37992:	7820      	ldrb	r0, [r4, #0]
   37994:	b084      	sub	sp, #16
   37996:	e9cd 5701 	strd	r5, r7, [sp, #4]
   3799a:	2800      	cmp	r0, #0
   3799c:	f000 80b0 	beq.w	37b00 <ip_interface_open+0x17c>
   379a0:	4690      	mov	r8, r2
   379a2:	f026 0208 	bic.w	r2, r6, #8
   379a6:	2a02      	cmp	r2, #2
   379a8:	460c      	mov	r4, r1
   379aa:	d002      	beq.n	379b2 <ip_interface_open+0x2e>
   379ac:	2e05      	cmp	r6, #5
   379ae:	f040 808d 	bne.w	37acc <ip_interface_open+0x148>
   379b2:	1e63      	subs	r3, r4, #1
   379b4:	2b02      	cmp	r3, #2
   379b6:	f200 809d 	bhi.w	37af4 <ip_interface_open+0x170>
   379ba:	f1b8 0f00 	cmp.w	r8, #0
   379be:	d159      	bne.n	37a74 <ip_interface_open+0xf0>
   379c0:	2c01      	cmp	r4, #1
   379c2:	d06f      	beq.n	37aa4 <ip_interface_open+0x120>
   379c4:	2c03      	cmp	r4, #3
   379c6:	bf18      	it	ne
   379c8:	f04f 0802 	movne.w	r8, #2
   379cc:	4a4f      	ldr	r2, [pc, #316]	; (37b0c <ip_interface_open+0x188>)
   379ce:	4621      	mov	r1, r4
   379d0:	a801      	add	r0, sp, #4
   379d2:	f006 f8bb 	bl	3db4c <interface_socket_allocate>
   379d6:	9b01      	ldr	r3, [sp, #4]
   379d8:	4607      	mov	r7, r0
   379da:	2b00      	cmp	r3, #0
   379dc:	d060      	beq.n	37aa0 <ip_interface_open+0x11c>
   379de:	2100      	movs	r1, #0
   379e0:	a804      	add	r0, sp, #16
   379e2:	f840 1d04 	str.w	r1, [r0, #-4]!
   379e6:	e9c3 6403 	strd	r6, r4, [r3, #12]
   379ea:	f8c3 8014 	str.w	r8, [r3, #20]
   379ee:	f7ff ff05 	bl	377fc <rpc_ip_client_request_alloc>
   379f2:	2800      	cmp	r0, #0
   379f4:	d151      	bne.n	37a9a <ip_interface_open+0x116>
   379f6:	f247 0201 	movw	r2, #28673	; 0x7001
   379fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   379fe:	2108      	movs	r1, #8
   37a00:	9d03      	ldr	r5, [sp, #12]
   37a02:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   37a06:	60ea      	str	r2, [r5, #12]
   37a08:	7268      	strb	r0, [r5, #9]
   37a0a:	72a8      	strb	r0, [r5, #10]
   37a0c:	72e8      	strb	r0, [r5, #11]
   37a0e:	7229      	strb	r1, [r5, #8]
   37a10:	742b      	strb	r3, [r5, #16]
   37a12:	746b      	strb	r3, [r5, #17]
   37a14:	74ab      	strb	r3, [r5, #18]
   37a16:	74eb      	strb	r3, [r5, #19]
   37a18:	68ab      	ldr	r3, [r5, #8]
   37a1a:	2e05      	cmp	r6, #5
   37a1c:	f103 030c 	add.w	r3, r3, #12
   37a20:	60ab      	str	r3, [r5, #8]
   37a22:	d003      	beq.n	37a2c <ip_interface_open+0xa8>
   37a24:	2e0a      	cmp	r6, #10
   37a26:	bf14      	ite	ne
   37a28:	2601      	movne	r6, #1
   37a2a:	2602      	moveq	r6, #2
   37a2c:	616e      	str	r6, [r5, #20]
   37a2e:	f8c5 801c 	str.w	r8, [r5, #28]
   37a32:	61ac      	str	r4, [r5, #24]
   37a34:	f247 0101 	movw	r1, #28673	; 0x7001
   37a38:	4628      	mov	r0, r5
   37a3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   37a3e:	f7ff fef1 	bl	37824 <rpc_ip_client_request_send>
   37a42:	4606      	mov	r6, r0
   37a44:	b380      	cbz	r0, 37aa8 <ip_interface_open+0x124>
   37a46:	6828      	ldr	r0, [r5, #0]
   37a48:	b108      	cbz	r0, 37a4e <ip_interface_open+0xca>
   37a4a:	f7ff ff09 	bl	37860 <rpc_ip_client_data_free>
   37a4e:	4628      	mov	r0, r5
   37a50:	f7ff fefe 	bl	37850 <rpc_ip_client_message_free>
   37a54:	2301      	movs	r3, #1
   37a56:	2523      	movs	r5, #35	; 0x23
   37a58:	f8c8 3000 	str.w	r3, [r8]
   37a5c:	4638      	mov	r0, r7
   37a5e:	f006 f8d9 	bl	3dc14 <interface_socket_free>
   37a62:	4628      	mov	r0, r5
   37a64:	f7f3 fd70 	bl	2b548 <bsd_os_errno_set>
   37a68:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   37a6c:	4638      	mov	r0, r7
   37a6e:	b004      	add	sp, #16
   37a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37a74:	2c01      	cmp	r4, #1
   37a76:	d00a      	beq.n	37a8e <ip_interface_open+0x10a>
   37a78:	2c02      	cmp	r4, #2
   37a7a:	d10b      	bne.n	37a94 <ip_interface_open+0x110>
   37a7c:	f1b8 0f02 	cmp.w	r8, #2
   37a80:	d0a4      	beq.n	379cc <ip_interface_open+0x48>
   37a82:	2029      	movs	r0, #41	; 0x29
   37a84:	f7f3 fd60 	bl	2b548 <bsd_os_errno_set>
   37a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   37a8c:	e7ee      	b.n	37a6c <ip_interface_open+0xe8>
   37a8e:	f1b8 0f01 	cmp.w	r8, #1
   37a92:	d1f6      	bne.n	37a82 <ip_interface_open+0xfe>
   37a94:	f04f 0802 	mov.w	r8, #2
   37a98:	e798      	b.n	379cc <ip_interface_open+0x48>
   37a9a:	9d03      	ldr	r5, [sp, #12]
   37a9c:	2d00      	cmp	r5, #0
   37a9e:	d1bb      	bne.n	37a18 <ip_interface_open+0x94>
   37aa0:	2569      	movs	r5, #105	; 0x69
   37aa2:	e7db      	b.n	37a5c <ip_interface_open+0xd8>
   37aa4:	46a0      	mov	r8, r4
   37aa6:	e791      	b.n	379cc <ip_interface_open+0x48>
   37aa8:	ab02      	add	r3, sp, #8
   37aaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37aae:	2102      	movs	r1, #2
   37ab0:	4638      	mov	r0, r7
   37ab2:	f006 f8fd 	bl	3dcb0 <interface_socket_wait>
   37ab6:	4605      	mov	r5, r0
   37ab8:	2800      	cmp	r0, #0
   37aba:	d1cf      	bne.n	37a5c <ip_interface_open+0xd8>
   37abc:	4638      	mov	r0, r7
   37abe:	f006 f96b 	bl	3dd98 <interface_socket_from_handle_get>
   37ac2:	b138      	cbz	r0, 37ad4 <ip_interface_open+0x150>
   37ac4:	6845      	ldr	r5, [r0, #4]
   37ac6:	b12d      	cbz	r5, 37ad4 <ip_interface_open+0x150>
   37ac8:	6046      	str	r6, [r0, #4]
   37aca:	e7c7      	b.n	37a5c <ip_interface_open+0xd8>
   37acc:	202f      	movs	r0, #47	; 0x2f
   37ace:	f7f3 fd3b 	bl	2b548 <bsd_os_errno_set>
   37ad2:	e7cb      	b.n	37a6c <ip_interface_open+0xe8>
   37ad4:	3c02      	subs	r4, #2
   37ad6:	2c01      	cmp	r4, #1
   37ad8:	d8c8      	bhi.n	37a6c <ip_interface_open+0xe8>
   37ada:	4638      	mov	r0, r7
   37adc:	9b01      	ldr	r3, [sp, #4]
   37ade:	681a      	ldr	r2, [r3, #0]
   37ae0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   37ae4:	601a      	str	r2, [r3, #0]
   37ae6:	681a      	ldr	r2, [r3, #0]
   37ae8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   37aec:	601a      	str	r2, [r3, #0]
   37aee:	b004      	add	sp, #16
   37af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37af4:	2016      	movs	r0, #22
   37af6:	f7f3 fd27 	bl	2b548 <bsd_os_errno_set>
   37afa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   37afe:	e7b5      	b.n	37a6c <ip_interface_open+0xe8>
   37b00:	2070      	movs	r0, #112	; 0x70
   37b02:	f7f3 fd21 	bl	2b548 <bsd_os_errno_set>
   37b06:	e7b1      	b.n	37a6c <ip_interface_open+0xe8>
   37b08:	2002d1bd 	.word	0x2002d1bd
   37b0c:	00037871 	.word	0x00037871

00037b10 <ip_interface_close>:
   37b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37b18:	b082      	sub	sp, #8
   37b1a:	4606      	mov	r6, r0
   37b1c:	9300      	str	r3, [sp, #0]
   37b1e:	f006 f93b 	bl	3dd98 <interface_socket_from_handle_get>
   37b22:	2800      	cmp	r0, #0
   37b24:	d062      	beq.n	37bec <ip_interface_close+0xdc>
   37b26:	4604      	mov	r4, r0
   37b28:	2100      	movs	r1, #0
   37b2a:	a802      	add	r0, sp, #8
   37b2c:	6827      	ldr	r7, [r4, #0]
   37b2e:	f840 1d04 	str.w	r1, [r0, #-4]!
   37b32:	f8d4 8018 	ldr.w	r8, [r4, #24]
   37b36:	f7ff fe61 	bl	377fc <rpc_ip_client_request_alloc>
   37b3a:	2800      	cmp	r0, #0
   37b3c:	d139      	bne.n	37bb2 <ip_interface_close+0xa2>
   37b3e:	f247 0309 	movw	r3, #28681	; 0x7009
   37b42:	2208      	movs	r2, #8
   37b44:	9d01      	ldr	r5, [sp, #4]
   37b46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   37b4a:	60eb      	str	r3, [r5, #12]
   37b4c:	f8c5 8010 	str.w	r8, [r5, #16]
   37b50:	7268      	strb	r0, [r5, #9]
   37b52:	72a8      	strb	r0, [r5, #10]
   37b54:	72e8      	strb	r0, [r5, #11]
   37b56:	722a      	strb	r2, [r5, #8]
   37b58:	6823      	ldr	r3, [r4, #0]
   37b5a:	f247 0109 	movw	r1, #28681	; 0x7009
   37b5e:	0c1b      	lsrs	r3, r3, #16
   37b60:	041b      	lsls	r3, r3, #16
   37b62:	f043 030d 	orr.w	r3, r3, #13
   37b66:	6023      	str	r3, [r4, #0]
   37b68:	6823      	ldr	r3, [r4, #0]
   37b6a:	4628      	mov	r0, r5
   37b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37b70:	6023      	str	r3, [r4, #0]
   37b72:	6823      	ldr	r3, [r4, #0]
   37b74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   37b78:	6023      	str	r3, [r4, #0]
   37b7a:	f7ff fe53 	bl	37824 <rpc_ip_client_request_send>
   37b7e:	bb38      	cbnz	r0, 37bd0 <ip_interface_close+0xc0>
   37b80:	466b      	mov	r3, sp
   37b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
   37b86:	210e      	movs	r1, #14
   37b88:	4630      	mov	r0, r6
   37b8a:	f006 f891 	bl	3dcb0 <interface_socket_wait>
   37b8e:	4604      	mov	r4, r0
   37b90:	b1a0      	cbz	r0, 37bbc <ip_interface_close+0xac>
   37b92:	4c17      	ldr	r4, [pc, #92]	; (37bf0 <ip_interface_close+0xe0>)
   37b94:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   37b98:	b120      	cbz	r0, 37ba4 <ip_interface_close+0x94>
   37b9a:	f7ff fe59 	bl	37850 <rpc_ip_client_message_free>
   37b9e:	2300      	movs	r3, #0
   37ba0:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   37ba4:	4630      	mov	r0, r6
   37ba6:	f006 f835 	bl	3dc14 <interface_socket_free>
   37baa:	2000      	movs	r0, #0
   37bac:	b002      	add	sp, #8
   37bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   37bb2:	9d01      	ldr	r5, [sp, #4]
   37bb4:	200c      	movs	r0, #12
   37bb6:	2d00      	cmp	r5, #0
   37bb8:	d1ce      	bne.n	37b58 <ip_interface_close+0x48>
   37bba:	e012      	b.n	37be2 <ip_interface_close+0xd2>
   37bbc:	4630      	mov	r0, r6
   37bbe:	f006 f8eb 	bl	3dd98 <interface_socket_from_handle_get>
   37bc2:	2800      	cmp	r0, #0
   37bc4:	d0e5      	beq.n	37b92 <ip_interface_close+0x82>
   37bc6:	6843      	ldr	r3, [r0, #4]
   37bc8:	2b00      	cmp	r3, #0
   37bca:	d0e2      	beq.n	37b92 <ip_interface_close+0x82>
   37bcc:	6044      	str	r4, [r0, #4]
   37bce:	e7e0      	b.n	37b92 <ip_interface_close+0x82>
   37bd0:	6828      	ldr	r0, [r5, #0]
   37bd2:	b108      	cbz	r0, 37bd8 <ip_interface_close+0xc8>
   37bd4:	f7ff fe44 	bl	37860 <rpc_ip_client_data_free>
   37bd8:	4628      	mov	r0, r5
   37bda:	f7ff fe39 	bl	37850 <rpc_ip_client_message_free>
   37bde:	2023      	movs	r0, #35	; 0x23
   37be0:	6027      	str	r7, [r4, #0]
   37be2:	f7f3 fcb1 	bl	2b548 <bsd_os_errno_set>
   37be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   37bea:	e7df      	b.n	37bac <ip_interface_close+0x9c>
   37bec:	2009      	movs	r0, #9
   37bee:	e7f8      	b.n	37be2 <ip_interface_close+0xd2>
   37bf0:	20025d44 	.word	0x20025d44

00037bf4 <ip_interface_sendto>:
   37bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37bf8:	2400      	movs	r4, #0
   37bfa:	b08b      	sub	sp, #44	; 0x2c
   37bfc:	9102      	str	r1, [sp, #8]
   37bfe:	4615      	mov	r5, r2
   37c00:	4699      	mov	r9, r3
   37c02:	9407      	str	r4, [sp, #28]
   37c04:	4607      	mov	r7, r0
   37c06:	9e14      	ldr	r6, [sp, #80]	; 0x50
   37c08:	f006 f8c6 	bl	3dd98 <interface_socket_from_handle_get>
   37c0c:	2800      	cmp	r0, #0
   37c0e:	f000 8163 	beq.w	37ed8 <ip_interface_sendto+0x2e4>
   37c12:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   37c16:	f300 8150 	bgt.w	37eba <ip_interface_sendto+0x2c6>
   37c1a:	6903      	ldr	r3, [r0, #16]
   37c1c:	4604      	mov	r4, r0
   37c1e:	2b01      	cmp	r3, #1
   37c20:	f000 8109 	beq.w	37e36 <ip_interface_sendto+0x242>
   37c24:	6822      	ldr	r2, [r4, #0]
   37c26:	0391      	lsls	r1, r2, #14
   37c28:	d569      	bpl.n	37cfe <ip_interface_sendto+0x10a>
   37c2a:	f1b9 0f00 	cmp.w	r9, #0
   37c2e:	f000 8112 	beq.w	37e56 <ip_interface_sendto+0x262>
   37c32:	f019 0f02 	tst.w	r9, #2
   37c36:	f000 814a 	beq.w	37ece <ip_interface_sendto+0x2da>
   37c3a:	2300      	movs	r3, #0
   37c3c:	9303      	str	r3, [sp, #12]
   37c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37c40:	f247 0806 	movw	r8, #28678	; 0x7006
   37c44:	2b00      	cmp	r3, #0
   37c46:	bf08      	it	eq
   37c48:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   37c4c:	f04f 0b0c 	mov.w	fp, #12
   37c50:	4aa5      	ldr	r2, [pc, #660]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37c52:	9308      	str	r3, [sp, #32]
   37c54:	043b      	lsls	r3, r7, #16
   37c56:	9200      	str	r2, [sp, #0]
   37c58:	9304      	str	r3, [sp, #16]
   37c5a:	4629      	mov	r1, r5
   37c5c:	a807      	add	r0, sp, #28
   37c5e:	f7ff fdcd 	bl	377fc <rpc_ip_client_request_alloc>
   37c62:	2804      	cmp	r0, #4
   37c64:	d05e      	beq.n	37d24 <ip_interface_sendto+0x130>
   37c66:	2800      	cmp	r0, #0
   37c68:	f040 813b 	bne.w	37ee2 <ip_interface_sendto+0x2ee>
   37c6c:	9b07      	ldr	r3, [sp, #28]
   37c6e:	f883 b008 	strb.w	fp, [r3, #8]
   37c72:	7258      	strb	r0, [r3, #9]
   37c74:	7298      	strb	r0, [r3, #10]
   37c76:	72d8      	strb	r0, [r3, #11]
   37c78:	2e00      	cmp	r6, #0
   37c7a:	d06b      	beq.n	37d54 <ip_interface_sendto+0x160>
   37c7c:	68e2      	ldr	r2, [r4, #12]
   37c7e:	6871      	ldr	r1, [r6, #4]
   37c80:	428a      	cmp	r2, r1
   37c82:	f040 80a8 	bne.w	37dd6 <ip_interface_sendto+0x1e2>
   37c86:	7831      	ldrb	r1, [r6, #0]
   37c88:	9815      	ldr	r0, [sp, #84]	; 0x54
   37c8a:	4288      	cmp	r0, r1
   37c8c:	d10a      	bne.n	37ca4 <ip_interface_sendto+0xb0>
   37c8e:	2a02      	cmp	r2, #2
   37c90:	f103 001c 	add.w	r0, r3, #28
   37c94:	f000 80ff 	beq.w	37e96 <ip_interface_sendto+0x2a2>
   37c98:	2a0a      	cmp	r2, #10
   37c9a:	d103      	bne.n	37ca4 <ip_interface_sendto+0xb0>
   37c9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   37c9e:	2a24      	cmp	r2, #36	; 0x24
   37ca0:	f000 80e6 	beq.w	37e70 <ip_interface_sendto+0x27c>
   37ca4:	f04f 0a16 	mov.w	sl, #22
   37ca8:	6818      	ldr	r0, [r3, #0]
   37caa:	b110      	cbz	r0, 37cb2 <ip_interface_sendto+0xbe>
   37cac:	f7ff fdd8 	bl	37860 <rpc_ip_client_data_free>
   37cb0:	9b07      	ldr	r3, [sp, #28]
   37cb2:	4618      	mov	r0, r3
   37cb4:	f7ff fdcc 	bl	37850 <rpc_ip_client_message_free>
   37cb8:	6823      	ldr	r3, [r4, #0]
   37cba:	0318      	lsls	r0, r3, #12
   37cbc:	d40b      	bmi.n	37cd6 <ip_interface_sendto+0xe2>
   37cbe:	6823      	ldr	r3, [r4, #0]
   37cc0:	b29b      	uxth	r3, r3
   37cc2:	2b0d      	cmp	r3, #13
   37cc4:	d007      	beq.n	37cd6 <ip_interface_sendto+0xe2>
   37cc6:	6823      	ldr	r3, [r4, #0]
   37cc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   37ccc:	6023      	str	r3, [r4, #0]
   37cce:	6823      	ldr	r3, [r4, #0]
   37cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   37cd4:	6023      	str	r3, [r4, #0]
   37cd6:	f1ba 0f00 	cmp.w	sl, #0
   37cda:	f040 80b3 	bne.w	37e44 <ip_interface_sendto+0x250>
   37cde:	6823      	ldr	r3, [r4, #0]
   37ce0:	0119      	lsls	r1, r3, #4
   37ce2:	d57b      	bpl.n	37ddc <ip_interface_sendto+0x1e8>
   37ce4:	6823      	ldr	r3, [r4, #0]
   37ce6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   37cea:	6023      	str	r3, [r4, #0]
   37cec:	9b00      	ldr	r3, [sp, #0]
   37cee:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37cf2:	2800      	cmp	r0, #0
   37cf4:	d176      	bne.n	37de4 <ip_interface_sendto+0x1f0>
   37cf6:	4628      	mov	r0, r5
   37cf8:	b00b      	add	sp, #44	; 0x2c
   37cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37cfe:	6822      	ldr	r2, [r4, #0]
   37d00:	0092      	lsls	r2, r2, #2
   37d02:	d406      	bmi.n	37d12 <ip_interface_sendto+0x11e>
   37d04:	2b01      	cmp	r3, #1
   37d06:	f000 80ad 	beq.w	37e64 <ip_interface_sendto+0x270>
   37d0a:	6823      	ldr	r3, [r4, #0]
   37d0c:	031b      	lsls	r3, r3, #12
   37d0e:	f140 80cf 	bpl.w	37eb0 <ip_interface_sendto+0x2bc>
   37d12:	6823      	ldr	r3, [r4, #0]
   37d14:	031e      	lsls	r6, r3, #12
   37d16:	f140 80d5 	bpl.w	37ec4 <ip_interface_sendto+0x2d0>
   37d1a:	4b73      	ldr	r3, [pc, #460]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37d1c:	f8d4 a008 	ldr.w	sl, [r4, #8]
   37d20:	9300      	str	r3, [sp, #0]
   37d22:	e7d8      	b.n	37cd6 <ip_interface_sendto+0xe2>
   37d24:	9b03      	ldr	r3, [sp, #12]
   37d26:	2b00      	cmp	r3, #0
   37d28:	d052      	beq.n	37dd0 <ip_interface_sendto+0x1dc>
   37d2a:	9b08      	ldr	r3, [sp, #32]
   37d2c:	3301      	adds	r3, #1
   37d2e:	d094      	beq.n	37c5a <ip_interface_sendto+0x66>
   37d30:	230a      	movs	r3, #10
   37d32:	a90a      	add	r1, sp, #40	; 0x28
   37d34:	f841 3d04 	str.w	r3, [r1, #-4]!
   37d38:	2000      	movs	r0, #0
   37d3a:	f7f3 fb45 	bl	2b3c8 <bsd_os_timedwait>
   37d3e:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   37d42:	f1c2 020a 	rsb	r2, r2, #10
   37d46:	1a9b      	subs	r3, r3, r2
   37d48:	2b00      	cmp	r3, #0
   37d4a:	9308      	str	r3, [sp, #32]
   37d4c:	dc85      	bgt.n	37c5a <ip_interface_sendto+0x66>
   37d4e:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   37d52:	e7b1      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37d54:	4642      	mov	r2, r8
   37d56:	f8c3 9014 	str.w	r9, [r3, #20]
   37d5a:	69a1      	ldr	r1, [r4, #24]
   37d5c:	9804      	ldr	r0, [sp, #16]
   37d5e:	6119      	str	r1, [r3, #16]
   37d60:	9902      	ldr	r1, [sp, #8]
   37d62:	4302      	orrs	r2, r0
   37d64:	60da      	str	r2, [r3, #12]
   37d66:	605d      	str	r5, [r3, #4]
   37d68:	b119      	cbz	r1, 37d72 <ip_interface_sendto+0x17e>
   37d6a:	6818      	ldr	r0, [r3, #0]
   37d6c:	462a      	mov	r2, r5
   37d6e:	f010 fa0b 	bl	48188 <memcpy>
   37d72:	6823      	ldr	r3, [r4, #0]
   37d74:	4641      	mov	r1, r8
   37d76:	9305      	str	r3, [sp, #20]
   37d78:	6823      	ldr	r3, [r4, #0]
   37d7a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   37d7e:	6023      	str	r3, [r4, #0]
   37d80:	6823      	ldr	r3, [r4, #0]
   37d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   37d86:	6023      	str	r3, [r4, #0]
   37d88:	9b07      	ldr	r3, [sp, #28]
   37d8a:	4618      	mov	r0, r3
   37d8c:	9301      	str	r3, [sp, #4]
   37d8e:	f7ff fd49 	bl	37824 <rpc_ip_client_request_send>
   37d92:	9b01      	ldr	r3, [sp, #4]
   37d94:	4682      	mov	sl, r0
   37d96:	bb78      	cbnz	r0, 37df8 <ip_interface_sendto+0x204>
   37d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   37d9c:	ab08      	add	r3, sp, #32
   37d9e:	4611      	mov	r1, r2
   37da0:	4638      	mov	r0, r7
   37da2:	f005 ff85 	bl	3dcb0 <interface_socket_wait>
   37da6:	4603      	mov	r3, r0
   37da8:	b398      	cbz	r0, 37e12 <ip_interface_sendto+0x21e>
   37daa:	6822      	ldr	r2, [r4, #0]
   37dac:	0312      	lsls	r2, r2, #12
   37dae:	d43f      	bmi.n	37e30 <ip_interface_sendto+0x23c>
   37db0:	2b3c      	cmp	r3, #60	; 0x3c
   37db2:	d001      	beq.n	37db8 <ip_interface_sendto+0x1c4>
   37db4:	2b0c      	cmp	r3, #12
   37db6:	d001      	beq.n	37dbc <ip_interface_sendto+0x1c8>
   37db8:	469a      	mov	sl, r3
   37dba:	e77d      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37dbc:	9b00      	ldr	r3, [sp, #0]
   37dbe:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37dc2:	b108      	cbz	r0, 37dc8 <ip_interface_sendto+0x1d4>
   37dc4:	f7ff fd44 	bl	37850 <rpc_ip_client_message_free>
   37dc8:	9b03      	ldr	r3, [sp, #12]
   37dca:	2b00      	cmp	r3, #0
   37dcc:	f47f af45 	bne.w	37c5a <ip_interface_sendto+0x66>
   37dd0:	f04f 0a23 	mov.w	sl, #35	; 0x23
   37dd4:	e770      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37dd6:	f04f 0a2f 	mov.w	sl, #47	; 0x2f
   37dda:	e765      	b.n	37ca8 <ip_interface_sendto+0xb4>
   37ddc:	9b00      	ldr	r3, [sp, #0]
   37dde:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37de2:	6985      	ldr	r5, [r0, #24]
   37de4:	f7ff fd34 	bl	37850 <rpc_ip_client_message_free>
   37de8:	2300      	movs	r3, #0
   37dea:	4628      	mov	r0, r5
   37dec:	9a00      	ldr	r2, [sp, #0]
   37dee:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
   37df2:	b00b      	add	sp, #44	; 0x2c
   37df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37df8:	6818      	ldr	r0, [r3, #0]
   37dfa:	469a      	mov	sl, r3
   37dfc:	b108      	cbz	r0, 37e02 <ip_interface_sendto+0x20e>
   37dfe:	f7ff fd2f 	bl	37860 <rpc_ip_client_data_free>
   37e02:	4650      	mov	r0, sl
   37e04:	f7ff fd24 	bl	37850 <rpc_ip_client_message_free>
   37e08:	9b05      	ldr	r3, [sp, #20]
   37e0a:	f04f 0a23 	mov.w	sl, #35	; 0x23
   37e0e:	6023      	str	r3, [r4, #0]
   37e10:	e752      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37e12:	9001      	str	r0, [sp, #4]
   37e14:	4638      	mov	r0, r7
   37e16:	f005 ffbf 	bl	3dd98 <interface_socket_from_handle_get>
   37e1a:	9b01      	ldr	r3, [sp, #4]
   37e1c:	2800      	cmp	r0, #0
   37e1e:	d0cb      	beq.n	37db8 <ip_interface_sendto+0x1c4>
   37e20:	6843      	ldr	r3, [r0, #4]
   37e22:	2b00      	cmp	r3, #0
   37e24:	d0c8      	beq.n	37db8 <ip_interface_sendto+0x1c4>
   37e26:	f8c0 a004 	str.w	sl, [r0, #4]
   37e2a:	6822      	ldr	r2, [r4, #0]
   37e2c:	0312      	lsls	r2, r2, #12
   37e2e:	d5bf      	bpl.n	37db0 <ip_interface_sendto+0x1bc>
   37e30:	f8d4 a008 	ldr.w	sl, [r4, #8]
   37e34:	e740      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37e36:	2e00      	cmp	r6, #0
   37e38:	f43f aef4 	beq.w	37c24 <ip_interface_sendto+0x30>
   37e3c:	f04f 0a38 	mov.w	sl, #56	; 0x38
   37e40:	4b29      	ldr	r3, [pc, #164]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37e42:	9300      	str	r3, [sp, #0]
   37e44:	4650      	mov	r0, sl
   37e46:	f7f3 fb7f 	bl	2b548 <bsd_os_errno_set>
   37e4a:	9b00      	ldr	r3, [sp, #0]
   37e4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37e50:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
   37e54:	e74d      	b.n	37cf2 <ip_interface_sendto+0xfe>
   37e56:	6823      	ldr	r3, [r4, #0]
   37e58:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   37e5c:	f3c3 7300 	ubfx	r3, r3, #28, #1
   37e60:	9303      	str	r3, [sp, #12]
   37e62:	e6ec      	b.n	37c3e <ip_interface_sendto+0x4a>
   37e64:	6823      	ldr	r3, [r4, #0]
   37e66:	b29b      	uxth	r3, r3
   37e68:	2b05      	cmp	r3, #5
   37e6a:	f47f af52 	bne.w	37d12 <ip_interface_sendto+0x11e>
   37e6e:	e74c      	b.n	37d0a <ip_interface_sendto+0x116>
   37e70:	2210      	movs	r2, #16
   37e72:	8931      	ldrh	r1, [r6, #8]
   37e74:	835a      	strh	r2, [r3, #26]
   37e76:	8319      	strh	r1, [r3, #24]
   37e78:	18b1      	adds	r1, r6, r2
   37e7a:	f010 f985 	bl	48188 <memcpy>
   37e7e:	f247 0207 	movw	r2, #28679	; 0x7007
   37e82:	9b07      	ldr	r3, [sp, #28]
   37e84:	4690      	mov	r8, r2
   37e86:	6899      	ldr	r1, [r3, #8]
   37e88:	8b58      	ldrh	r0, [r3, #26]
   37e8a:	3104      	adds	r1, #4
   37e8c:	4401      	add	r1, r0
   37e8e:	f8c3 9014 	str.w	r9, [r3, #20]
   37e92:	6099      	str	r1, [r3, #8]
   37e94:	e761      	b.n	37d5a <ip_interface_sendto+0x166>
   37e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
   37e98:	2a10      	cmp	r2, #16
   37e9a:	f47f af03 	bne.w	37ca4 <ip_interface_sendto+0xb0>
   37e9e:	2204      	movs	r2, #4
   37ea0:	8931      	ldrh	r1, [r6, #8]
   37ea2:	835a      	strh	r2, [r3, #26]
   37ea4:	8319      	strh	r1, [r3, #24]
   37ea6:	f106 010c 	add.w	r1, r6, #12
   37eaa:	f010 f96d 	bl	48188 <memcpy>
   37eae:	e7e6      	b.n	37e7e <ip_interface_sendto+0x28a>
   37eb0:	4b0d      	ldr	r3, [pc, #52]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37eb2:	f04f 0a23 	mov.w	sl, #35	; 0x23
   37eb6:	9300      	str	r3, [sp, #0]
   37eb8:	e7c4      	b.n	37e44 <ip_interface_sendto+0x250>
   37eba:	4b0b      	ldr	r3, [pc, #44]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37ebc:	f04f 0a28 	mov.w	sl, #40	; 0x28
   37ec0:	9300      	str	r3, [sp, #0]
   37ec2:	e7bf      	b.n	37e44 <ip_interface_sendto+0x250>
   37ec4:	4b08      	ldr	r3, [pc, #32]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37ec6:	f04f 0a39 	mov.w	sl, #57	; 0x39
   37eca:	9300      	str	r3, [sp, #0]
   37ecc:	e7ba      	b.n	37e44 <ip_interface_sendto+0x250>
   37ece:	4b06      	ldr	r3, [pc, #24]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37ed0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   37ed4:	9300      	str	r3, [sp, #0]
   37ed6:	e7b5      	b.n	37e44 <ip_interface_sendto+0x250>
   37ed8:	4b03      	ldr	r3, [pc, #12]	; (37ee8 <ip_interface_sendto+0x2f4>)
   37eda:	f04f 0a09 	mov.w	sl, #9
   37ede:	9300      	str	r3, [sp, #0]
   37ee0:	e7b0      	b.n	37e44 <ip_interface_sendto+0x250>
   37ee2:	f04f 0a0c 	mov.w	sl, #12
   37ee6:	e6e7      	b.n	37cb8 <ip_interface_sendto+0xc4>
   37ee8:	20025d44 	.word	0x20025d44

00037eec <ip_interface_recvfrom>:
   37eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ef0:	b087      	sub	sp, #28
   37ef2:	2a00      	cmp	r2, #0
   37ef4:	f000 8112 	beq.w	3811c <ip_interface_recvfrom+0x230>
   37ef8:	4680      	mov	r8, r0
   37efa:	468b      	mov	fp, r1
   37efc:	469a      	mov	sl, r3
   37efe:	4691      	mov	r9, r2
   37f00:	b11b      	cbz	r3, 37f0a <ip_interface_recvfrom+0x1e>
   37f02:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   37f06:	f000 8107 	beq.w	38118 <ip_interface_recvfrom+0x22c>
   37f0a:	4640      	mov	r0, r8
   37f0c:	f005 ff44 	bl	3dd98 <interface_socket_from_handle_get>
   37f10:	4604      	mov	r4, r0
   37f12:	2800      	cmp	r0, #0
   37f14:	f000 8104 	beq.w	38120 <ip_interface_recvfrom+0x234>
   37f18:	6803      	ldr	r3, [r0, #0]
   37f1a:	02db      	lsls	r3, r3, #11
   37f1c:	d562      	bpl.n	37fe4 <ip_interface_recvfrom+0xf8>
   37f1e:	f01a 0f02 	tst.w	sl, #2
   37f22:	bf18      	it	ne
   37f24:	2600      	movne	r6, #0
   37f26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   37f2a:	bf08      	it	eq
   37f2c:	6806      	ldreq	r6, [r0, #0]
   37f2e:	f00a 0310 	and.w	r3, sl, #16
   37f32:	bf04      	itt	eq
   37f34:	f086 5680 	eoreq.w	r6, r6, #268435456	; 0x10000000
   37f38:	f3c6 7600 	ubfxeq	r6, r6, #28, #1
   37f3c:	9301      	str	r3, [sp, #4]
   37f3e:	6823      	ldr	r3, [r4, #0]
   37f40:	03df      	lsls	r7, r3, #15
   37f42:	d567      	bpl.n	38014 <ip_interface_recvfrom+0x128>
   37f44:	6823      	ldr	r3, [r4, #0]
   37f46:	69e0      	ldr	r0, [r4, #28]
   37f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   37f4c:	6023      	str	r3, [r4, #0]
   37f4e:	6803      	ldr	r3, [r0, #0]
   37f50:	68db      	ldr	r3, [r3, #12]
   37f52:	4798      	blx	r3
   37f54:	4605      	mov	r5, r0
   37f56:	3001      	adds	r0, #1
   37f58:	d07d      	beq.n	38056 <ip_interface_recvfrom+0x16a>
   37f5a:	45a9      	cmp	r9, r5
   37f5c:	dd03      	ble.n	37f66 <ip_interface_recvfrom+0x7a>
   37f5e:	6923      	ldr	r3, [r4, #16]
   37f60:	2b01      	cmp	r3, #1
   37f62:	f000 80a3 	beq.w	380ac <ip_interface_recvfrom+0x1c0>
   37f66:	f04f 0800 	mov.w	r8, #0
   37f6a:	af02      	add	r7, sp, #8
   37f6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   37f6e:	b103      	cbz	r3, 37f72 <ip_interface_recvfrom+0x86>
   37f70:	681b      	ldr	r3, [r3, #0]
   37f72:	9a10      	ldr	r2, [sp, #64]	; 0x40
   37f74:	e9cd b902 	strd	fp, r9, [sp, #8]
   37f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
   37f7c:	69e0      	ldr	r0, [r4, #28]
   37f7e:	4639      	mov	r1, r7
   37f80:	6803      	ldr	r3, [r0, #0]
   37f82:	4652      	mov	r2, sl
   37f84:	689b      	ldr	r3, [r3, #8]
   37f86:	4798      	blx	r3
   37f88:	4605      	mov	r5, r0
   37f8a:	69e0      	ldr	r0, [r4, #28]
   37f8c:	1c6b      	adds	r3, r5, #1
   37f8e:	6803      	ldr	r3, [r0, #0]
   37f90:	bf18      	it	ne
   37f92:	2701      	movne	r7, #1
   37f94:	68db      	ldr	r3, [r3, #12]
   37f96:	bf0a      	itet	eq
   37f98:	2700      	moveq	r7, #0
   37f9a:	2600      	movne	r6, #0
   37f9c:	2623      	moveq	r6, #35	; 0x23
   37f9e:	4798      	blx	r3
   37fa0:	3001      	adds	r0, #1
   37fa2:	d132      	bne.n	3800a <ip_interface_recvfrom+0x11e>
   37fa4:	f1b8 0f00 	cmp.w	r8, #0
   37fa8:	f000 80b0 	beq.w	3810c <ip_interface_recvfrom+0x220>
   37fac:	2f00      	cmp	r7, #0
   37fae:	f000 80a1 	beq.w	380f4 <ip_interface_recvfrom+0x208>
   37fb2:	6823      	ldr	r3, [r4, #0]
   37fb4:	0318      	lsls	r0, r3, #12
   37fb6:	d506      	bpl.n	37fc6 <ip_interface_recvfrom+0xda>
   37fb8:	6823      	ldr	r3, [r4, #0]
   37fba:	b29b      	uxth	r3, r3
   37fbc:	2b0d      	cmp	r3, #13
   37fbe:	d002      	beq.n	37fc6 <ip_interface_recvfrom+0xda>
   37fc0:	6923      	ldr	r3, [r4, #16]
   37fc2:	2b01      	cmp	r3, #1
   37fc4:	d021      	beq.n	3800a <ip_interface_recvfrom+0x11e>
   37fc6:	6823      	ldr	r3, [r4, #0]
   37fc8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   37fcc:	6823      	ldr	r3, [r4, #0]
   37fce:	f040 80a9 	bne.w	38124 <ip_interface_recvfrom+0x238>
   37fd2:	0319      	lsls	r1, r3, #12
   37fd4:	d473      	bmi.n	380be <ip_interface_recvfrom+0x1d2>
   37fd6:	2e00      	cmp	r6, #0
   37fd8:	f040 8086 	bne.w	380e8 <ip_interface_recvfrom+0x1fc>
   37fdc:	4628      	mov	r0, r5
   37fde:	b007      	add	sp, #28
   37fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37fe4:	6803      	ldr	r3, [r0, #0]
   37fe6:	b29b      	uxth	r3, r3
   37fe8:	2b06      	cmp	r3, #6
   37fea:	d071      	beq.n	380d0 <ip_interface_recvfrom+0x1e4>
   37fec:	6803      	ldr	r3, [r0, #0]
   37fee:	b29b      	uxth	r3, r3
   37ff0:	2b07      	cmp	r3, #7
   37ff2:	bf0c      	ite	eq
   37ff4:	2609      	moveq	r6, #9
   37ff6:	2639      	movne	r6, #57	; 0x39
   37ff8:	69e0      	ldr	r0, [r4, #28]
   37ffa:	6803      	ldr	r3, [r0, #0]
   37ffc:	68db      	ldr	r3, [r3, #12]
   37ffe:	4798      	blx	r3
   38000:	1c43      	adds	r3, r0, #1
   38002:	4605      	mov	r5, r0
   38004:	d0df      	beq.n	37fc6 <ip_interface_recvfrom+0xda>
   38006:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3800a:	6823      	ldr	r3, [r4, #0]
   3800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   38010:	6023      	str	r3, [r4, #0]
   38012:	e7e0      	b.n	37fd6 <ip_interface_recvfrom+0xea>
   38014:	2e00      	cmp	r6, #0
   38016:	d07d      	beq.n	38114 <ip_interface_recvfrom+0x228>
   38018:	6a26      	ldr	r6, [r4, #32]
   3801a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3801e:	2e00      	cmp	r6, #0
   38020:	bf08      	it	eq
   38022:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
   38026:	af02      	add	r7, sp, #8
   38028:	463b      	mov	r3, r7
   3802a:	4611      	mov	r1, r2
   3802c:	4640      	mov	r0, r8
   3802e:	9602      	str	r6, [sp, #8]
   38030:	f005 fe3e 	bl	3dcb0 <interface_socket_wait>
   38034:	4606      	mov	r6, r0
   38036:	b350      	cbz	r0, 3808e <ip_interface_recvfrom+0x1a2>
   38038:	6823      	ldr	r3, [r4, #0]
   3803a:	031a      	lsls	r2, r3, #12
   3803c:	d532      	bpl.n	380a4 <ip_interface_recvfrom+0x1b8>
   3803e:	6823      	ldr	r3, [r4, #0]
   38040:	b29b      	uxth	r3, r3
   38042:	2b0d      	cmp	r3, #13
   38044:	d02e      	beq.n	380a4 <ip_interface_recvfrom+0x1b8>
   38046:	6923      	ldr	r3, [r4, #16]
   38048:	f1a3 0801 	sub.w	r8, r3, #1
   3804c:	fab8 f888 	clz	r8, r8
   38050:	ea4f 1858 	mov.w	r8, r8, lsr #5
   38054:	e78a      	b.n	37f6c <ip_interface_recvfrom+0x80>
   38056:	6823      	ldr	r3, [r4, #0]
   38058:	031a      	lsls	r2, r3, #12
   3805a:	d5db      	bpl.n	38014 <ip_interface_recvfrom+0x128>
   3805c:	6823      	ldr	r3, [r4, #0]
   3805e:	b29b      	uxth	r3, r3
   38060:	2b0d      	cmp	r3, #13
   38062:	d0d7      	beq.n	38014 <ip_interface_recvfrom+0x128>
   38064:	6923      	ldr	r3, [r4, #16]
   38066:	69e0      	ldr	r0, [r4, #28]
   38068:	2b01      	cmp	r3, #1
   3806a:	d033      	beq.n	380d4 <ip_interface_recvfrom+0x1e8>
   3806c:	2639      	movs	r6, #57	; 0x39
   3806e:	6823      	ldr	r3, [r4, #0]
   38070:	0c1b      	lsrs	r3, r3, #16
   38072:	041b      	lsls	r3, r3, #16
   38074:	f043 030d 	orr.w	r3, r3, #13
   38078:	6023      	str	r3, [r4, #0]
   3807a:	6823      	ldr	r3, [r4, #0]
   3807c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   38080:	6023      	str	r3, [r4, #0]
   38082:	6803      	ldr	r3, [r0, #0]
   38084:	68db      	ldr	r3, [r3, #12]
   38086:	4798      	blx	r3
   38088:	3001      	adds	r0, #1
   3808a:	d1be      	bne.n	3800a <ip_interface_recvfrom+0x11e>
   3808c:	e79b      	b.n	37fc6 <ip_interface_recvfrom+0xda>
   3808e:	4640      	mov	r0, r8
   38090:	f005 fe82 	bl	3dd98 <interface_socket_from_handle_get>
   38094:	b140      	cbz	r0, 380a8 <ip_interface_recvfrom+0x1bc>
   38096:	6846      	ldr	r6, [r0, #4]
   38098:	b136      	cbz	r6, 380a8 <ip_interface_recvfrom+0x1bc>
   3809a:	2300      	movs	r3, #0
   3809c:	6043      	str	r3, [r0, #4]
   3809e:	6823      	ldr	r3, [r4, #0]
   380a0:	031a      	lsls	r2, r3, #12
   380a2:	d4cc      	bmi.n	3803e <ip_interface_recvfrom+0x152>
   380a4:	69e0      	ldr	r0, [r4, #28]
   380a6:	e7ec      	b.n	38082 <ip_interface_recvfrom+0x196>
   380a8:	2601      	movs	r6, #1
   380aa:	e748      	b.n	37f3e <ip_interface_recvfrom+0x52>
   380ac:	9b01      	ldr	r3, [sp, #4]
   380ae:	b11b      	cbz	r3, 380b8 <ip_interface_recvfrom+0x1cc>
   380b0:	6823      	ldr	r3, [r4, #0]
   380b2:	00d9      	lsls	r1, r3, #3
   380b4:	d5b0      	bpl.n	38018 <ip_interface_recvfrom+0x12c>
   380b6:	e756      	b.n	37f66 <ip_interface_recvfrom+0x7a>
   380b8:	4698      	mov	r8, r3
   380ba:	af02      	add	r7, sp, #8
   380bc:	e756      	b.n	37f6c <ip_interface_recvfrom+0x80>
   380be:	6823      	ldr	r3, [r4, #0]
   380c0:	b29b      	uxth	r3, r3
   380c2:	2b0d      	cmp	r3, #13
   380c4:	d187      	bne.n	37fd6 <ip_interface_recvfrom+0xea>
   380c6:	68a3      	ldr	r3, [r4, #8]
   380c8:	2b00      	cmp	r3, #0
   380ca:	d084      	beq.n	37fd6 <ip_interface_recvfrom+0xea>
   380cc:	68a6      	ldr	r6, [r4, #8]
   380ce:	e782      	b.n	37fd6 <ip_interface_recvfrom+0xea>
   380d0:	2609      	movs	r6, #9
   380d2:	e791      	b.n	37ff8 <ip_interface_recvfrom+0x10c>
   380d4:	6803      	ldr	r3, [r0, #0]
   380d6:	68db      	ldr	r3, [r3, #12]
   380d8:	4798      	blx	r3
   380da:	3001      	adds	r0, #1
   380dc:	d00a      	beq.n	380f4 <ip_interface_recvfrom+0x208>
   380de:	2623      	movs	r6, #35	; 0x23
   380e0:	6823      	ldr	r3, [r4, #0]
   380e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   380e6:	6023      	str	r3, [r4, #0]
   380e8:	4630      	mov	r0, r6
   380ea:	f7f3 fa2d 	bl	2b548 <bsd_os_errno_set>
   380ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   380f2:	e773      	b.n	37fdc <ip_interface_recvfrom+0xf0>
   380f4:	6823      	ldr	r3, [r4, #0]
   380f6:	2500      	movs	r5, #0
   380f8:	0c1b      	lsrs	r3, r3, #16
   380fa:	041b      	lsls	r3, r3, #16
   380fc:	f043 030d 	orr.w	r3, r3, #13
   38100:	6023      	str	r3, [r4, #0]
   38102:	6823      	ldr	r3, [r4, #0]
   38104:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   38108:	6023      	str	r3, [r4, #0]
   3810a:	e767      	b.n	37fdc <ip_interface_recvfrom+0xf0>
   3810c:	2f00      	cmp	r7, #0
   3810e:	f47f af50 	bne.w	37fb2 <ip_interface_recvfrom+0xc6>
   38112:	e758      	b.n	37fc6 <ip_interface_recvfrom+0xda>
   38114:	2623      	movs	r6, #35	; 0x23
   38116:	e7c5      	b.n	380a4 <ip_interface_recvfrom+0x1b8>
   38118:	262d      	movs	r6, #45	; 0x2d
   3811a:	e7e5      	b.n	380e8 <ip_interface_recvfrom+0x1fc>
   3811c:	2616      	movs	r6, #22
   3811e:	e7e3      	b.n	380e8 <ip_interface_recvfrom+0x1fc>
   38120:	2609      	movs	r6, #9
   38122:	e7e1      	b.n	380e8 <ip_interface_recvfrom+0x1fc>
   38124:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   38128:	6023      	str	r3, [r4, #0]
   3812a:	6823      	ldr	r3, [r4, #0]
   3812c:	2669      	movs	r6, #105	; 0x69
   3812e:	0c1b      	lsrs	r3, r3, #16
   38130:	041b      	lsls	r3, r3, #16
   38132:	f043 030d 	orr.w	r3, r3, #13
   38136:	6023      	str	r3, [r4, #0]
   38138:	e7d6      	b.n	380e8 <ip_interface_recvfrom+0x1fc>
   3813a:	bf00      	nop

0003813c <ip_interface_connect>:
   3813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38140:	b082      	sub	sp, #8
   38142:	2900      	cmp	r1, #0
   38144:	d04b      	beq.n	381de <ip_interface_connect+0xa2>
   38146:	4617      	mov	r7, r2
   38148:	2a00      	cmp	r2, #0
   3814a:	d048      	beq.n	381de <ip_interface_connect+0xa2>
   3814c:	4680      	mov	r8, r0
   3814e:	4689      	mov	r9, r1
   38150:	f005 fe22 	bl	3dd98 <interface_socket_from_handle_get>
   38154:	4605      	mov	r5, r0
   38156:	2800      	cmp	r0, #0
   38158:	f000 80af 	beq.w	382ba <ip_interface_connect+0x17e>
   3815c:	6803      	ldr	r3, [r0, #0]
   3815e:	b29b      	uxth	r3, r3
   38160:	2b02      	cmp	r3, #2
   38162:	d004      	beq.n	3816e <ip_interface_connect+0x32>
   38164:	6803      	ldr	r3, [r0, #0]
   38166:	b29b      	uxth	r3, r3
   38168:	2b04      	cmp	r3, #4
   3816a:	f040 809d 	bne.w	382a8 <ip_interface_connect+0x16c>
   3816e:	6829      	ldr	r1, [r5, #0]
   38170:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
   38174:	f040 8089 	bne.w	3828a <ip_interface_connect+0x14e>
   38178:	ae02      	add	r6, sp, #8
   3817a:	f8d5 a018 	ldr.w	sl, [r5, #24]
   3817e:	f846 1d04 	str.w	r1, [r6, #-4]!
   38182:	4630      	mov	r0, r6
   38184:	f7ff fb3a 	bl	377fc <rpc_ip_client_request_alloc>
   38188:	bb98      	cbnz	r0, 381f2 <ip_interface_connect+0xb6>
   3818a:	2108      	movs	r1, #8
   3818c:	ea4f 4208 	mov.w	r2, r8, lsl #16
   38190:	9c01      	ldr	r4, [sp, #4]
   38192:	f442 43e0 	orr.w	r3, r2, #28672	; 0x7000
   38196:	f043 0302 	orr.w	r3, r3, #2
   3819a:	60e3      	str	r3, [r4, #12]
   3819c:	f8c4 a010 	str.w	sl, [r4, #16]
   381a0:	7260      	strb	r0, [r4, #9]
   381a2:	72a0      	strb	r0, [r4, #10]
   381a4:	72e0      	strb	r0, [r4, #11]
   381a6:	7221      	strb	r1, [r4, #8]
   381a8:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
   381ac:	f042 0202 	orr.w	r2, r2, #2
   381b0:	60e2      	str	r2, [r4, #12]
   381b2:	68a3      	ldr	r3, [r4, #8]
   381b4:	69aa      	ldr	r2, [r5, #24]
   381b6:	3304      	adds	r3, #4
   381b8:	6122      	str	r2, [r4, #16]
   381ba:	60a3      	str	r3, [r4, #8]
   381bc:	68eb      	ldr	r3, [r5, #12]
   381be:	f8d9 2004 	ldr.w	r2, [r9, #4]
   381c2:	4293      	cmp	r3, r2
   381c4:	d11b      	bne.n	381fe <ip_interface_connect+0xc2>
   381c6:	f899 2000 	ldrb.w	r2, [r9]
   381ca:	4297      	cmp	r7, r2
   381cc:	d107      	bne.n	381de <ip_interface_connect+0xa2>
   381ce:	2b02      	cmp	r3, #2
   381d0:	f104 0018 	add.w	r0, r4, #24
   381d4:	d015      	beq.n	38202 <ip_interface_connect+0xc6>
   381d6:	2b0a      	cmp	r3, #10
   381d8:	d101      	bne.n	381de <ip_interface_connect+0xa2>
   381da:	2f24      	cmp	r7, #36	; 0x24
   381dc:	d01d      	beq.n	3821a <ip_interface_connect+0xde>
   381de:	2416      	movs	r4, #22
   381e0:	4620      	mov	r0, r4
   381e2:	f7f3 f9b1 	bl	2b548 <bsd_os_errno_set>
   381e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   381ea:	4620      	mov	r0, r4
   381ec:	b002      	add	sp, #8
   381ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   381f2:	9c01      	ldr	r4, [sp, #4]
   381f4:	2c00      	cmp	r4, #0
   381f6:	d05e      	beq.n	382b6 <ip_interface_connect+0x17a>
   381f8:	ea4f 4208 	mov.w	r2, r8, lsl #16
   381fc:	e7d4      	b.n	381a8 <ip_interface_connect+0x6c>
   381fe:	242f      	movs	r4, #47	; 0x2f
   38200:	e7ee      	b.n	381e0 <ip_interface_connect+0xa4>
   38202:	2f10      	cmp	r7, #16
   38204:	d1eb      	bne.n	381de <ip_interface_connect+0xa2>
   38206:	2204      	movs	r2, #4
   38208:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   3820c:	f109 010c 	add.w	r1, r9, #12
   38210:	82e2      	strh	r2, [r4, #22]
   38212:	82a3      	strh	r3, [r4, #20]
   38214:	f00f ffb8 	bl	48188 <memcpy>
   38218:	e008      	b.n	3822c <ip_interface_connect+0xf0>
   3821a:	2210      	movs	r2, #16
   3821c:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   38220:	eb09 0102 	add.w	r1, r9, r2
   38224:	82e2      	strh	r2, [r4, #22]
   38226:	82a3      	strh	r3, [r4, #20]
   38228:	f00f ffae 	bl	48188 <memcpy>
   3822c:	68a3      	ldr	r3, [r4, #8]
   3822e:	8ae2      	ldrh	r2, [r4, #22]
   38230:	f247 0102 	movw	r1, #28674	; 0x7002
   38234:	4413      	add	r3, r2
   38236:	60a3      	str	r3, [r4, #8]
   38238:	682f      	ldr	r7, [r5, #0]
   3823a:	682b      	ldr	r3, [r5, #0]
   3823c:	4620      	mov	r0, r4
   3823e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   38242:	602b      	str	r3, [r5, #0]
   38244:	f7ff faee 	bl	37824 <rpc_ip_client_request_send>
   38248:	b9a8      	cbnz	r0, 38276 <ip_interface_connect+0x13a>
   3824a:	682b      	ldr	r3, [r5, #0]
   3824c:	00db      	lsls	r3, r3, #3
   3824e:	d429      	bmi.n	382a4 <ip_interface_connect+0x168>
   38250:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   38252:	4633      	mov	r3, r6
   38254:	2c00      	cmp	r4, #0
   38256:	bf08      	it	eq
   38258:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   3825c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38260:	2105      	movs	r1, #5
   38262:	4640      	mov	r0, r8
   38264:	9401      	str	r4, [sp, #4]
   38266:	f005 fd23 	bl	3dcb0 <interface_socket_wait>
   3826a:	4604      	mov	r4, r0
   3826c:	b178      	cbz	r0, 3828e <ip_interface_connect+0x152>
   3826e:	2c73      	cmp	r4, #115	; 0x73
   38270:	d0b6      	beq.n	381e0 <ip_interface_connect+0xa4>
   38272:	602f      	str	r7, [r5, #0]
   38274:	e7b4      	b.n	381e0 <ip_interface_connect+0xa4>
   38276:	6820      	ldr	r0, [r4, #0]
   38278:	b108      	cbz	r0, 3827e <ip_interface_connect+0x142>
   3827a:	f7ff faf1 	bl	37860 <rpc_ip_client_data_free>
   3827e:	4620      	mov	r0, r4
   38280:	f7ff fae6 	bl	37850 <rpc_ip_client_message_free>
   38284:	2423      	movs	r4, #35	; 0x23
   38286:	602f      	str	r7, [r5, #0]
   38288:	e7aa      	b.n	381e0 <ip_interface_connect+0xa4>
   3828a:	2472      	movs	r4, #114	; 0x72
   3828c:	e7a8      	b.n	381e0 <ip_interface_connect+0xa4>
   3828e:	4640      	mov	r0, r8
   38290:	f005 fd82 	bl	3dd98 <interface_socket_from_handle_get>
   38294:	2800      	cmp	r0, #0
   38296:	d0a8      	beq.n	381ea <ip_interface_connect+0xae>
   38298:	6843      	ldr	r3, [r0, #4]
   3829a:	2b00      	cmp	r3, #0
   3829c:	d0a5      	beq.n	381ea <ip_interface_connect+0xae>
   3829e:	6044      	str	r4, [r0, #4]
   382a0:	461c      	mov	r4, r3
   382a2:	e7e4      	b.n	3826e <ip_interface_connect+0x132>
   382a4:	2473      	movs	r4, #115	; 0x73
   382a6:	e79b      	b.n	381e0 <ip_interface_connect+0xa4>
   382a8:	6803      	ldr	r3, [r0, #0]
   382aa:	b29b      	uxth	r3, r3
   382ac:	2b05      	cmp	r3, #5
   382ae:	bf14      	ite	ne
   382b0:	2409      	movne	r4, #9
   382b2:	2438      	moveq	r4, #56	; 0x38
   382b4:	e794      	b.n	381e0 <ip_interface_connect+0xa4>
   382b6:	240c      	movs	r4, #12
   382b8:	e792      	b.n	381e0 <ip_interface_connect+0xa4>
   382ba:	2409      	movs	r4, #9
   382bc:	e790      	b.n	381e0 <ip_interface_connect+0xa4>
   382be:	bf00      	nop

000382c0 <ip_interface_socketoption_get>:
   382c0:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   382c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   382c8:	b082      	sub	sp, #8
   382ca:	9400      	str	r4, [sp, #0]
   382cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   382ce:	2c00      	cmp	r4, #0
   382d0:	d05b      	beq.n	3838a <ip_interface_socketoption_get+0xca>
   382d2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   382d4:	6824      	ldr	r4, [r4, #0]
   382d6:	2c00      	cmp	r4, #0
   382d8:	d057      	beq.n	3838a <ip_interface_socketoption_get+0xca>
   382da:	680c      	ldr	r4, [r1, #0]
   382dc:	0266      	lsls	r6, r4, #9
   382de:	d44f      	bmi.n	38380 <ip_interface_socketoption_get+0xc0>
   382e0:	680c      	ldr	r4, [r1, #0]
   382e2:	0225      	lsls	r5, r4, #8
   382e4:	d44c      	bmi.n	38380 <ip_interface_socketoption_get+0xc0>
   382e6:	680c      	ldr	r4, [r1, #0]
   382e8:	01e4      	lsls	r4, r4, #7
   382ea:	d449      	bmi.n	38380 <ip_interface_socketoption_get+0xc0>
   382ec:	680c      	ldr	r4, [r1, #0]
   382ee:	f014 7c00 	ands.w	ip, r4, #33554432	; 0x2000000
   382f2:	d145      	bne.n	38380 <ip_interface_socketoption_get+0xc0>
   382f4:	460c      	mov	r4, r1
   382f6:	680e      	ldr	r6, [r1, #0]
   382f8:	461f      	mov	r7, r3
   382fa:	680b      	ldr	r3, [r1, #0]
   382fc:	4681      	mov	r9, r0
   382fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   38302:	600b      	str	r3, [r1, #0]
   38304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   38306:	a802      	add	r0, sp, #8
   38308:	f840 cd04 	str.w	ip, [r0, #-4]!
   3830c:	6819      	ldr	r1, [r3, #0]
   3830e:	4615      	mov	r5, r2
   38310:	f8d4 b018 	ldr.w	fp, [r4, #24]
   38314:	f7ff fa72 	bl	377fc <rpc_ip_client_request_alloc>
   38318:	2800      	cmp	r0, #0
   3831a:	d146      	bne.n	383aa <ip_interface_socketoption_get+0xea>
   3831c:	f247 0304 	movw	r3, #28676	; 0x7004
   38320:	2208      	movs	r2, #8
   38322:	f8dd a004 	ldr.w	sl, [sp, #4]
   38326:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
   3832a:	f8ca 300c 	str.w	r3, [sl, #12]
   3832e:	f8ca b010 	str.w	fp, [sl, #16]
   38332:	f88a 0009 	strb.w	r0, [sl, #9]
   38336:	f88a 000a 	strb.w	r0, [sl, #10]
   3833a:	f88a 000b 	strb.w	r0, [sl, #11]
   3833e:	f88a 2008 	strb.w	r2, [sl, #8]
   38342:	f8da 3008 	ldr.w	r3, [sl, #8]
   38346:	f8ca 7018 	str.w	r7, [sl, #24]
   3834a:	3308      	adds	r3, #8
   3834c:	f8ca 5014 	str.w	r5, [sl, #20]
   38350:	f8ca 3008 	str.w	r3, [sl, #8]
   38354:	f247 0104 	movw	r1, #28676	; 0x7004
   38358:	4650      	mov	r0, sl
   3835a:	f8da 7000 	ldr.w	r7, [sl]
   3835e:	f7ff fa61 	bl	37824 <rpc_ip_client_request_send>
   38362:	b9b8      	cbnz	r0, 38394 <ip_interface_socketoption_get+0xd4>
   38364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   38368:	466b      	mov	r3, sp
   3836a:	4611      	mov	r1, r2
   3836c:	4648      	mov	r0, r9
   3836e:	f005 fc9f 	bl	3dcb0 <interface_socket_wait>
   38372:	4605      	mov	r5, r0
   38374:	b300      	cbz	r0, 383b8 <ip_interface_socketoption_get+0xf8>
   38376:	4638      	mov	r0, r7
   38378:	f7ff fa72 	bl	37860 <rpc_ip_client_data_free>
   3837c:	6026      	str	r6, [r4, #0]
   3837e:	e000      	b.n	38382 <ip_interface_socketoption_get+0xc2>
   38380:	2523      	movs	r5, #35	; 0x23
   38382:	4628      	mov	r0, r5
   38384:	b002      	add	sp, #8
   38386:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   3838a:	2516      	movs	r5, #22
   3838c:	4628      	mov	r0, r5
   3838e:	b002      	add	sp, #8
   38390:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
   38394:	f8da 0000 	ldr.w	r0, [sl]
   38398:	b108      	cbz	r0, 3839e <ip_interface_socketoption_get+0xde>
   3839a:	f7ff fa61 	bl	37860 <rpc_ip_client_data_free>
   3839e:	4650      	mov	r0, sl
   383a0:	f7ff fa56 	bl	37850 <rpc_ip_client_message_free>
   383a4:	2523      	movs	r5, #35	; 0x23
   383a6:	6026      	str	r6, [r4, #0]
   383a8:	e7e5      	b.n	38376 <ip_interface_socketoption_get+0xb6>
   383aa:	f8dd a004 	ldr.w	sl, [sp, #4]
   383ae:	f1ba 0f00 	cmp.w	sl, #0
   383b2:	d1c6      	bne.n	38342 <ip_interface_socketoption_get+0x82>
   383b4:	250c      	movs	r5, #12
   383b6:	e7e1      	b.n	3837c <ip_interface_socketoption_get+0xbc>
   383b8:	4648      	mov	r0, r9
   383ba:	f005 fced 	bl	3dd98 <interface_socket_from_handle_get>
   383be:	b120      	cbz	r0, 383ca <ip_interface_socketoption_get+0x10a>
   383c0:	6843      	ldr	r3, [r0, #4]
   383c2:	b113      	cbz	r3, 383ca <ip_interface_socketoption_get+0x10a>
   383c4:	6045      	str	r5, [r0, #4]
   383c6:	461d      	mov	r5, r3
   383c8:	e7d5      	b.n	38376 <ip_interface_socketoption_get+0xb6>
   383ca:	f8df b050 	ldr.w	fp, [pc, #80]	; 3841c <ip_interface_socketoption_get+0x15c>
   383ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   383d0:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   383d4:	681b      	ldr	r3, [r3, #0]
   383d6:	b1b0      	cbz	r0, 38406 <ip_interface_socketoption_get+0x146>
   383d8:	6842      	ldr	r2, [r0, #4]
   383da:	429a      	cmp	r2, r3
   383dc:	d811      	bhi.n	38402 <ip_interface_socketoption_get+0x142>
   383de:	6801      	ldr	r1, [r0, #0]
   383e0:	b179      	cbz	r1, 38402 <ip_interface_socketoption_get+0x142>
   383e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   383e4:	f00f fed0 	bl	48188 <memcpy>
   383e8:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
   383ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   383ee:	685b      	ldr	r3, [r3, #4]
   383f0:	6013      	str	r3, [r2, #0]
   383f2:	f85b 0029 	ldr.w	r0, [fp, r9, lsl #2]
   383f6:	f7ff fa2b 	bl	37850 <rpc_ip_client_message_free>
   383fa:	2300      	movs	r3, #0
   383fc:	f84b 3029 	str.w	r3, [fp, r9, lsl #2]
   38400:	e7b9      	b.n	38376 <ip_interface_socketoption_get+0xb6>
   38402:	2516      	movs	r5, #22
   38404:	e7f7      	b.n	383f6 <ip_interface_socketoption_get+0x136>
   38406:	461a      	mov	r2, r3
   38408:	980a      	ldr	r0, [sp, #40]	; 0x28
   3840a:	4639      	mov	r1, r7
   3840c:	f00f febc 	bl	48188 <memcpy>
   38410:	f8da 3004 	ldr.w	r3, [sl, #4]
   38414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   38416:	6013      	str	r3, [r2, #0]
   38418:	e7ad      	b.n	38376 <ip_interface_socketoption_get+0xb6>
   3841a:	bf00      	nop
   3841c:	20025d44 	.word	0x20025d44

00038420 <ip_interface_socketoption_send>:
   38420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   38424:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   38428:	680c      	ldr	r4, [r1, #0]
   3842a:	b082      	sub	sp, #8
   3842c:	0266      	lsls	r6, r4, #9
   3842e:	9500      	str	r5, [sp, #0]
   38430:	d44d      	bmi.n	384ce <ip_interface_socketoption_send+0xae>
   38432:	680c      	ldr	r4, [r1, #0]
   38434:	0225      	lsls	r5, r4, #8
   38436:	d44a      	bmi.n	384ce <ip_interface_socketoption_send+0xae>
   38438:	680c      	ldr	r4, [r1, #0]
   3843a:	01e4      	lsls	r4, r4, #7
   3843c:	d447      	bmi.n	384ce <ip_interface_socketoption_send+0xae>
   3843e:	680c      	ldr	r4, [r1, #0]
   38440:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
   38444:	d143      	bne.n	384ce <ip_interface_socketoption_send+0xae>
   38446:	4688      	mov	r8, r1
   38448:	f8d1 9000 	ldr.w	r9, [r1]
   3844c:	461f      	mov	r7, r3
   3844e:	680b      	ldr	r3, [r1, #0]
   38450:	4605      	mov	r5, r0
   38452:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   38456:	a802      	add	r0, sp, #8
   38458:	600b      	str	r3, [r1, #0]
   3845a:	f840 4d04 	str.w	r4, [r0, #-4]!
   3845e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   38460:	4616      	mov	r6, r2
   38462:	f8d8 a018 	ldr.w	sl, [r8, #24]
   38466:	f7ff f9c9 	bl	377fc <rpc_ip_client_request_alloc>
   3846a:	bba8      	cbnz	r0, 384d8 <ip_interface_socketoption_send+0xb8>
   3846c:	f247 0303 	movw	r3, #28675	; 0x7003
   38470:	2208      	movs	r2, #8
   38472:	9c01      	ldr	r4, [sp, #4]
   38474:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   38478:	60e3      	str	r3, [r4, #12]
   3847a:	f8c4 a010 	str.w	sl, [r4, #16]
   3847e:	7260      	strb	r0, [r4, #9]
   38480:	72a0      	strb	r0, [r4, #10]
   38482:	72e0      	strb	r0, [r4, #11]
   38484:	7222      	strb	r2, [r4, #8]
   38486:	68a3      	ldr	r3, [r4, #8]
   38488:	6166      	str	r6, [r4, #20]
   3848a:	3308      	adds	r3, #8
   3848c:	60a3      	str	r3, [r4, #8]
   3848e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   38490:	61a7      	str	r7, [r4, #24]
   38492:	b133      	cbz	r3, 384a2 <ip_interface_socketoption_send+0x82>
   38494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   38496:	b123      	cbz	r3, 384a2 <ip_interface_socketoption_send+0x82>
   38498:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   3849a:	4619      	mov	r1, r3
   3849c:	6820      	ldr	r0, [r4, #0]
   3849e:	f00f fe73 	bl	48188 <memcpy>
   384a2:	f247 0103 	movw	r1, #28675	; 0x7003
   384a6:	4620      	mov	r0, r4
   384a8:	f7ff f9bc 	bl	37824 <rpc_ip_client_request_send>
   384ac:	4606      	mov	r6, r0
   384ae:	b9c0      	cbnz	r0, 384e2 <ip_interface_socketoption_send+0xc2>
   384b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   384b4:	466b      	mov	r3, sp
   384b6:	4611      	mov	r1, r2
   384b8:	4628      	mov	r0, r5
   384ba:	f005 fbf9 	bl	3dcb0 <interface_socket_wait>
   384be:	4604      	mov	r4, r0
   384c0:	b1d0      	cbz	r0, 384f8 <ip_interface_socketoption_send+0xd8>
   384c2:	4620      	mov	r0, r4
   384c4:	f8c8 9000 	str.w	r9, [r8]
   384c8:	b002      	add	sp, #8
   384ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   384ce:	2423      	movs	r4, #35	; 0x23
   384d0:	4620      	mov	r0, r4
   384d2:	b002      	add	sp, #8
   384d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   384d8:	9c01      	ldr	r4, [sp, #4]
   384da:	2c00      	cmp	r4, #0
   384dc:	d1d3      	bne.n	38486 <ip_interface_socketoption_send+0x66>
   384de:	240c      	movs	r4, #12
   384e0:	e7ef      	b.n	384c2 <ip_interface_socketoption_send+0xa2>
   384e2:	6820      	ldr	r0, [r4, #0]
   384e4:	b108      	cbz	r0, 384ea <ip_interface_socketoption_send+0xca>
   384e6:	f7ff f9bb 	bl	37860 <rpc_ip_client_data_free>
   384ea:	4620      	mov	r0, r4
   384ec:	f7ff f9b0 	bl	37850 <rpc_ip_client_message_free>
   384f0:	2423      	movs	r4, #35	; 0x23
   384f2:	f8c8 9000 	str.w	r9, [r8]
   384f6:	e7e4      	b.n	384c2 <ip_interface_socketoption_send+0xa2>
   384f8:	4628      	mov	r0, r5
   384fa:	f005 fc4d 	bl	3dd98 <interface_socket_from_handle_get>
   384fe:	2800      	cmp	r0, #0
   38500:	d0df      	beq.n	384c2 <ip_interface_socketoption_send+0xa2>
   38502:	6844      	ldr	r4, [r0, #4]
   38504:	2c00      	cmp	r4, #0
   38506:	d0dc      	beq.n	384c2 <ip_interface_socketoption_send+0xa2>
   38508:	6046      	str	r6, [r0, #4]
   3850a:	e7da      	b.n	384c2 <ip_interface_socketoption_send+0xa2>

0003850c <ip_interface_bind>:
   3850c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   38514:	b083      	sub	sp, #12
   38516:	9300      	str	r3, [sp, #0]
   38518:	b3b1      	cbz	r1, 38588 <ip_interface_bind+0x7c>
   3851a:	4616      	mov	r6, r2
   3851c:	b3a2      	cbz	r2, 38588 <ip_interface_bind+0x7c>
   3851e:	4607      	mov	r7, r0
   38520:	4688      	mov	r8, r1
   38522:	f005 fc39 	bl	3dd98 <interface_socket_from_handle_get>
   38526:	4605      	mov	r5, r0
   38528:	2800      	cmp	r0, #0
   3852a:	d04a      	beq.n	385c2 <ip_interface_bind+0xb6>
   3852c:	6803      	ldr	r3, [r0, #0]
   3852e:	b29b      	uxth	r3, r3
   38530:	2b02      	cmp	r3, #2
   38532:	d146      	bne.n	385c2 <ip_interface_bind+0xb6>
   38534:	2100      	movs	r1, #0
   38536:	a802      	add	r0, sp, #8
   38538:	f840 1d04 	str.w	r1, [r0, #-4]!
   3853c:	f8d5 9018 	ldr.w	r9, [r5, #24]
   38540:	f7ff f95c 	bl	377fc <rpc_ip_client_request_alloc>
   38544:	bb50      	cbnz	r0, 3859c <ip_interface_bind+0x90>
   38546:	f247 0305 	movw	r3, #28677	; 0x7005
   3854a:	2208      	movs	r2, #8
   3854c:	9c01      	ldr	r4, [sp, #4]
   3854e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
   38552:	60e3      	str	r3, [r4, #12]
   38554:	f8c4 9010 	str.w	r9, [r4, #16]
   38558:	7260      	strb	r0, [r4, #9]
   3855a:	72a0      	strb	r0, [r4, #10]
   3855c:	72e0      	strb	r0, [r4, #11]
   3855e:	7222      	strb	r2, [r4, #8]
   38560:	68a3      	ldr	r3, [r4, #8]
   38562:	3304      	adds	r3, #4
   38564:	60a3      	str	r3, [r4, #8]
   38566:	68eb      	ldr	r3, [r5, #12]
   38568:	f8d8 2004 	ldr.w	r2, [r8, #4]
   3856c:	4293      	cmp	r3, r2
   3856e:	d11a      	bne.n	385a6 <ip_interface_bind+0x9a>
   38570:	f898 2000 	ldrb.w	r2, [r8]
   38574:	4296      	cmp	r6, r2
   38576:	d107      	bne.n	38588 <ip_interface_bind+0x7c>
   38578:	2b02      	cmp	r3, #2
   3857a:	f104 0018 	add.w	r0, r4, #24
   3857e:	d014      	beq.n	385aa <ip_interface_bind+0x9e>
   38580:	2b0a      	cmp	r3, #10
   38582:	d101      	bne.n	38588 <ip_interface_bind+0x7c>
   38584:	2e24      	cmp	r6, #36	; 0x24
   38586:	d01e      	beq.n	385c6 <ip_interface_bind+0xba>
   38588:	2416      	movs	r4, #22
   3858a:	4620      	mov	r0, r4
   3858c:	f7f2 ffdc 	bl	2b548 <bsd_os_errno_set>
   38590:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   38594:	4620      	mov	r0, r4
   38596:	b003      	add	sp, #12
   38598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3859c:	9c01      	ldr	r4, [sp, #4]
   3859e:	2c00      	cmp	r4, #0
   385a0:	d1de      	bne.n	38560 <ip_interface_bind+0x54>
   385a2:	240c      	movs	r4, #12
   385a4:	e7f1      	b.n	3858a <ip_interface_bind+0x7e>
   385a6:	242f      	movs	r4, #47	; 0x2f
   385a8:	e7ef      	b.n	3858a <ip_interface_bind+0x7e>
   385aa:	2e10      	cmp	r6, #16
   385ac:	d1ec      	bne.n	38588 <ip_interface_bind+0x7c>
   385ae:	2204      	movs	r2, #4
   385b0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   385b4:	f108 010c 	add.w	r1, r8, #12
   385b8:	82e2      	strh	r2, [r4, #22]
   385ba:	82a3      	strh	r3, [r4, #20]
   385bc:	f00f fde4 	bl	48188 <memcpy>
   385c0:	e00a      	b.n	385d8 <ip_interface_bind+0xcc>
   385c2:	2409      	movs	r4, #9
   385c4:	e7e1      	b.n	3858a <ip_interface_bind+0x7e>
   385c6:	2210      	movs	r2, #16
   385c8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   385cc:	eb08 0102 	add.w	r1, r8, r2
   385d0:	82e2      	strh	r2, [r4, #22]
   385d2:	82a3      	strh	r3, [r4, #20]
   385d4:	f00f fdd8 	bl	48188 <memcpy>
   385d8:	68a3      	ldr	r3, [r4, #8]
   385da:	8ae2      	ldrh	r2, [r4, #22]
   385dc:	f247 0105 	movw	r1, #28677	; 0x7005
   385e0:	4413      	add	r3, r2
   385e2:	60a3      	str	r3, [r4, #8]
   385e4:	682b      	ldr	r3, [r5, #0]
   385e6:	4620      	mov	r0, r4
   385e8:	0c1b      	lsrs	r3, r3, #16
   385ea:	041b      	lsls	r3, r3, #16
   385ec:	f043 0303 	orr.w	r3, r3, #3
   385f0:	602b      	str	r3, [r5, #0]
   385f2:	682e      	ldr	r6, [r5, #0]
   385f4:	f7ff f916 	bl	37824 <rpc_ip_client_request_send>
   385f8:	4680      	mov	r8, r0
   385fa:	b978      	cbnz	r0, 3861c <ip_interface_bind+0x110>
   385fc:	466b      	mov	r3, sp
   385fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38602:	2104      	movs	r1, #4
   38604:	4638      	mov	r0, r7
   38606:	f005 fb53 	bl	3dcb0 <interface_socket_wait>
   3860a:	4604      	mov	r4, r0
   3860c:	b1a0      	cbz	r0, 38638 <ip_interface_bind+0x12c>
   3860e:	682b      	ldr	r3, [r5, #0]
   38610:	0c1b      	lsrs	r3, r3, #16
   38612:	041b      	lsls	r3, r3, #16
   38614:	f043 0302 	orr.w	r3, r3, #2
   38618:	602b      	str	r3, [r5, #0]
   3861a:	e7b6      	b.n	3858a <ip_interface_bind+0x7e>
   3861c:	6820      	ldr	r0, [r4, #0]
   3861e:	b108      	cbz	r0, 38624 <ip_interface_bind+0x118>
   38620:	f7ff f91e 	bl	37860 <rpc_ip_client_data_free>
   38624:	0c36      	lsrs	r6, r6, #16
   38626:	0436      	lsls	r6, r6, #16
   38628:	4620      	mov	r0, r4
   3862a:	f046 0602 	orr.w	r6, r6, #2
   3862e:	f7ff f90f 	bl	37850 <rpc_ip_client_message_free>
   38632:	2423      	movs	r4, #35	; 0x23
   38634:	602e      	str	r6, [r5, #0]
   38636:	e7a8      	b.n	3858a <ip_interface_bind+0x7e>
   38638:	4638      	mov	r0, r7
   3863a:	f005 fbad 	bl	3dd98 <interface_socket_from_handle_get>
   3863e:	2800      	cmp	r0, #0
   38640:	d0a8      	beq.n	38594 <ip_interface_bind+0x88>
   38642:	6844      	ldr	r4, [r0, #4]
   38644:	2c00      	cmp	r4, #0
   38646:	d0a5      	beq.n	38594 <ip_interface_bind+0x88>
   38648:	f8c0 8004 	str.w	r8, [r0, #4]
   3864c:	e7df      	b.n	3860e <ip_interface_bind+0x102>
   3864e:	bf00      	nop

00038650 <ip_interface_listen>:
   38650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38658:	b082      	sub	sp, #8
   3865a:	4606      	mov	r6, r0
   3865c:	9300      	str	r3, [sp, #0]
   3865e:	f005 fb9b 	bl	3dd98 <interface_socket_from_handle_get>
   38662:	2800      	cmp	r0, #0
   38664:	d06c      	beq.n	38740 <ip_interface_listen+0xf0>
   38666:	6803      	ldr	r3, [r0, #0]
   38668:	4604      	mov	r4, r0
   3866a:	b29b      	uxth	r3, r3
   3866c:	2b04      	cmp	r3, #4
   3866e:	d003      	beq.n	38678 <ip_interface_listen+0x28>
   38670:	6803      	ldr	r3, [r0, #0]
   38672:	b29b      	uxth	r3, r3
   38674:	2b0b      	cmp	r3, #11
   38676:	d163      	bne.n	38740 <ip_interface_listen+0xf0>
   38678:	2100      	movs	r1, #0
   3867a:	4a32      	ldr	r2, [pc, #200]	; (38744 <ip_interface_listen+0xf4>)
   3867c:	4630      	mov	r0, r6
   3867e:	f005 fadf 	bl	3dc40 <interface_socket_packet_handler_update>
   38682:	4601      	mov	r1, r0
   38684:	2800      	cmp	r0, #0
   38686:	d159      	bne.n	3873c <ip_interface_listen+0xec>
   38688:	a802      	add	r0, sp, #8
   3868a:	f840 1d04 	str.w	r1, [r0, #-4]!
   3868e:	69a7      	ldr	r7, [r4, #24]
   38690:	f7ff f8b4 	bl	377fc <rpc_ip_client_request_alloc>
   38694:	bba0      	cbnz	r0, 38700 <ip_interface_listen+0xb0>
   38696:	f247 0308 	movw	r3, #28680	; 0x7008
   3869a:	2208      	movs	r2, #8
   3869c:	9d01      	ldr	r5, [sp, #4]
   3869e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   386a2:	60eb      	str	r3, [r5, #12]
   386a4:	612f      	str	r7, [r5, #16]
   386a6:	7268      	strb	r0, [r5, #9]
   386a8:	72a8      	strb	r0, [r5, #10]
   386aa:	72e8      	strb	r0, [r5, #11]
   386ac:	722a      	strb	r2, [r5, #8]
   386ae:	68ab      	ldr	r3, [r5, #8]
   386b0:	f247 0108 	movw	r1, #28680	; 0x7008
   386b4:	3304      	adds	r3, #4
   386b6:	60ab      	str	r3, [r5, #8]
   386b8:	6823      	ldr	r3, [r4, #0]
   386ba:	4628      	mov	r0, r5
   386bc:	0c1b      	lsrs	r3, r3, #16
   386be:	041b      	lsls	r3, r3, #16
   386c0:	f043 0306 	orr.w	r3, r3, #6
   386c4:	6023      	str	r3, [r4, #0]
   386c6:	6827      	ldr	r7, [r4, #0]
   386c8:	f7ff f8ac 	bl	37824 <rpc_ip_client_request_send>
   386cc:	4680      	mov	r8, r0
   386ce:	b9e0      	cbnz	r0, 3870a <ip_interface_listen+0xba>
   386d0:	466b      	mov	r3, sp
   386d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   386d6:	2107      	movs	r1, #7
   386d8:	4630      	mov	r0, r6
   386da:	f005 fae9 	bl	3dcb0 <interface_socket_wait>
   386de:	4605      	mov	r5, r0
   386e0:	b308      	cbz	r0, 38726 <ip_interface_listen+0xd6>
   386e2:	6823      	ldr	r3, [r4, #0]
   386e4:	0c1b      	lsrs	r3, r3, #16
   386e6:	041b      	lsls	r3, r3, #16
   386e8:	f043 0304 	orr.w	r3, r3, #4
   386ec:	6023      	str	r3, [r4, #0]
   386ee:	4628      	mov	r0, r5
   386f0:	f7f2 ff2a 	bl	2b548 <bsd_os_errno_set>
   386f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   386f8:	4628      	mov	r0, r5
   386fa:	b002      	add	sp, #8
   386fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38700:	9d01      	ldr	r5, [sp, #4]
   38702:	2d00      	cmp	r5, #0
   38704:	d1d3      	bne.n	386ae <ip_interface_listen+0x5e>
   38706:	250c      	movs	r5, #12
   38708:	e7f1      	b.n	386ee <ip_interface_listen+0x9e>
   3870a:	6828      	ldr	r0, [r5, #0]
   3870c:	b108      	cbz	r0, 38712 <ip_interface_listen+0xc2>
   3870e:	f7ff f8a7 	bl	37860 <rpc_ip_client_data_free>
   38712:	0c3f      	lsrs	r7, r7, #16
   38714:	043f      	lsls	r7, r7, #16
   38716:	4628      	mov	r0, r5
   38718:	f047 0704 	orr.w	r7, r7, #4
   3871c:	f7ff f898 	bl	37850 <rpc_ip_client_message_free>
   38720:	2523      	movs	r5, #35	; 0x23
   38722:	6027      	str	r7, [r4, #0]
   38724:	e7e3      	b.n	386ee <ip_interface_listen+0x9e>
   38726:	4630      	mov	r0, r6
   38728:	f005 fb36 	bl	3dd98 <interface_socket_from_handle_get>
   3872c:	2800      	cmp	r0, #0
   3872e:	d0e3      	beq.n	386f8 <ip_interface_listen+0xa8>
   38730:	6845      	ldr	r5, [r0, #4]
   38732:	2d00      	cmp	r5, #0
   38734:	d0e0      	beq.n	386f8 <ip_interface_listen+0xa8>
   38736:	f8c0 8004 	str.w	r8, [r0, #4]
   3873a:	e7d2      	b.n	386e2 <ip_interface_listen+0x92>
   3873c:	2523      	movs	r5, #35	; 0x23
   3873e:	e7d6      	b.n	386ee <ip_interface_listen+0x9e>
   38740:	2509      	movs	r5, #9
   38742:	e7d4      	b.n	386ee <ip_interface_listen+0x9e>
   38744:	00037871 	.word	0x00037871

00038748 <ip_interface_accept>:
   38748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3874c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38750:	2500      	movs	r5, #0
   38752:	b087      	sub	sp, #28
   38754:	460f      	mov	r7, r1
   38756:	4690      	mov	r8, r2
   38758:	e9cd 5303 	strd	r5, r3, [sp, #12]
   3875c:	4606      	mov	r6, r0
   3875e:	f005 fb1b 	bl	3dd98 <interface_socket_from_handle_get>
   38762:	4604      	mov	r4, r0
   38764:	2800      	cmp	r0, #0
   38766:	f000 8123 	beq.w	389b0 <ip_interface_accept+0x268>
   3876a:	6803      	ldr	r3, [r0, #0]
   3876c:	b29b      	uxth	r3, r3
   3876e:	2b07      	cmp	r3, #7
   38770:	d10a      	bne.n	38788 <ip_interface_accept+0x40>
   38772:	6803      	ldr	r3, [r0, #0]
   38774:	6805      	ldr	r5, [r0, #0]
   38776:	00db      	lsls	r3, r3, #3
   38778:	d416      	bmi.n	387a8 <ip_interface_accept+0x60>
   3877a:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   3877e:	d019      	beq.n	387b4 <ip_interface_accept+0x6c>
   38780:	6805      	ldr	r5, [r0, #0]
   38782:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   38786:	d124      	bne.n	387d2 <ip_interface_accept+0x8a>
   38788:	f04f 0909 	mov.w	r9, #9
   3878c:	9b03      	ldr	r3, [sp, #12]
   3878e:	b113      	cbz	r3, 38796 <ip_interface_accept+0x4e>
   38790:	4628      	mov	r0, r5
   38792:	f005 fa3f 	bl	3dc14 <interface_socket_free>
   38796:	4648      	mov	r0, r9
   38798:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   3879c:	f7f2 fed4 	bl	2b548 <bsd_os_errno_set>
   387a0:	4648      	mov	r0, r9
   387a2:	b007      	add	sp, #28
   387a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   387a8:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   387ac:	d170      	bne.n	38890 <ip_interface_accept+0x148>
   387ae:	f04f 0923 	mov.w	r9, #35	; 0x23
   387b2:	e7eb      	b.n	3878c <ip_interface_accept+0x44>
   387b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   387b8:	ab04      	add	r3, sp, #16
   387ba:	4611      	mov	r1, r2
   387bc:	4630      	mov	r0, r6
   387be:	f005 fa77 	bl	3dcb0 <interface_socket_wait>
   387c2:	4681      	mov	r9, r0
   387c4:	2800      	cmp	r0, #0
   387c6:	f000 8082 	beq.w	388ce <ip_interface_accept+0x186>
   387ca:	6825      	ldr	r5, [r4, #0]
   387cc:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   387d0:	d0dc      	beq.n	3878c <ip_interface_accept+0x44>
   387d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   387d6:	2300      	movs	r3, #0
   387d8:	e9cd 0300 	strd	r0, r3, [sp]
   387dc:	4a78      	ldr	r2, [pc, #480]	; (389c0 <ip_interface_accept+0x278>)
   387de:	6921      	ldr	r1, [r4, #16]
   387e0:	a803      	add	r0, sp, #12
   387e2:	f005 f9b3 	bl	3db4c <interface_socket_allocate>
   387e6:	9b03      	ldr	r3, [sp, #12]
   387e8:	4605      	mov	r5, r0
   387ea:	2b00      	cmp	r3, #0
   387ec:	f000 80e4 	beq.w	389b8 <ip_interface_accept+0x270>
   387f0:	2100      	movs	r1, #0
   387f2:	6962      	ldr	r2, [r4, #20]
   387f4:	a806      	add	r0, sp, #24
   387f6:	615a      	str	r2, [r3, #20]
   387f8:	68e2      	ldr	r2, [r4, #12]
   387fa:	f840 1d04 	str.w	r1, [r0, #-4]!
   387fe:	60da      	str	r2, [r3, #12]
   38800:	6922      	ldr	r2, [r4, #16]
   38802:	611a      	str	r2, [r3, #16]
   38804:	f8d4 9018 	ldr.w	r9, [r4, #24]
   38808:	f7fe fff8 	bl	377fc <rpc_ip_client_request_alloc>
   3880c:	2800      	cmp	r0, #0
   3880e:	d146      	bne.n	3889e <ip_interface_accept+0x156>
   38810:	f247 030c 	movw	r3, #28684	; 0x700c
   38814:	2108      	movs	r1, #8
   38816:	f8dd b014 	ldr.w	fp, [sp, #20]
   3881a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   3881e:	f8cb 300c 	str.w	r3, [fp, #12]
   38822:	f8cb 9010 	str.w	r9, [fp, #16]
   38826:	f88b 0009 	strb.w	r0, [fp, #9]
   3882a:	f88b 000a 	strb.w	r0, [fp, #10]
   3882e:	f88b 000b 	strb.w	r0, [fp, #11]
   38832:	f88b 1008 	strb.w	r1, [fp, #8]
   38836:	6823      	ldr	r3, [r4, #0]
   38838:	f247 010c 	movw	r1, #28684	; 0x700c
   3883c:	0c1b      	lsrs	r3, r3, #16
   3883e:	041b      	lsls	r3, r3, #16
   38840:	f043 0308 	orr.w	r3, r3, #8
   38844:	6023      	str	r3, [r4, #0]
   38846:	4658      	mov	r0, fp
   38848:	f8d4 9000 	ldr.w	r9, [r4]
   3884c:	f7fe ffea 	bl	37824 <rpc_ip_client_request_send>
   38850:	4682      	mov	sl, r0
   38852:	bb60      	cbnz	r0, 388ae <ip_interface_accept+0x166>
   38854:	6822      	ldr	r2, [r4, #0]
   38856:	9900      	ldr	r1, [sp, #0]
   38858:	ab04      	add	r3, sp, #16
   3885a:	400a      	ands	r2, r1
   3885c:	6022      	str	r2, [r4, #0]
   3885e:	2109      	movs	r1, #9
   38860:	f64f 72ff 	movw	r2, #65535	; 0xffff
   38864:	4630      	mov	r0, r6
   38866:	f005 fa23 	bl	3dcb0 <interface_socket_wait>
   3886a:	4681      	mov	r9, r0
   3886c:	2800      	cmp	r0, #0
   3886e:	f000 808d 	beq.w	3898c <ip_interface_accept+0x244>
   38872:	6823      	ldr	r3, [r4, #0]
   38874:	9a01      	ldr	r2, [sp, #4]
   38876:	431a      	orrs	r2, r3
   38878:	6022      	str	r2, [r4, #0]
   3887a:	6823      	ldr	r3, [r4, #0]
   3887c:	0c1b      	lsrs	r3, r3, #16
   3887e:	041b      	lsls	r3, r3, #16
   38880:	f043 0307 	orr.w	r3, r3, #7
   38884:	6023      	str	r3, [r4, #0]
   38886:	6823      	ldr	r3, [r4, #0]
   38888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3888c:	6023      	str	r3, [r4, #0]
   3888e:	e77d      	b.n	3878c <ip_interface_accept+0x44>
   38890:	f06f 5280 	mvn.w	r2, #268435456	; 0x10000000
   38894:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   38898:	e9cd 2300 	strd	r2, r3, [sp]
   3889c:	e79e      	b.n	387dc <ip_interface_accept+0x94>
   3889e:	f8dd b014 	ldr.w	fp, [sp, #20]
   388a2:	f04f 090c 	mov.w	r9, #12
   388a6:	f1bb 0f00 	cmp.w	fp, #0
   388aa:	d1c4      	bne.n	38836 <ip_interface_accept+0xee>
   388ac:	e76e      	b.n	3878c <ip_interface_accept+0x44>
   388ae:	f8db 0000 	ldr.w	r0, [fp]
   388b2:	b108      	cbz	r0, 388b8 <ip_interface_accept+0x170>
   388b4:	f7fe ffd4 	bl	37860 <rpc_ip_client_data_free>
   388b8:	ea4f 4919 	mov.w	r9, r9, lsr #16
   388bc:	4658      	mov	r0, fp
   388be:	ea4f 4909 	mov.w	r9, r9, lsl #16
   388c2:	f7fe ffc5 	bl	37850 <rpc_ip_client_message_free>
   388c6:	f049 0307 	orr.w	r3, r9, #7
   388ca:	6023      	str	r3, [r4, #0]
   388cc:	e76f      	b.n	387ae <ip_interface_accept+0x66>
   388ce:	4630      	mov	r0, r6
   388d0:	f005 fa62 	bl	3dd98 <interface_socket_from_handle_get>
   388d4:	b130      	cbz	r0, 388e4 <ip_interface_accept+0x19c>
   388d6:	f8d0 9004 	ldr.w	r9, [r0, #4]
   388da:	f1b9 0f00 	cmp.w	r9, #0
   388de:	d001      	beq.n	388e4 <ip_interface_accept+0x19c>
   388e0:	6045      	str	r5, [r0, #4]
   388e2:	e772      	b.n	387ca <ip_interface_accept+0x82>
   388e4:	6823      	ldr	r3, [r4, #0]
   388e6:	03d9      	lsls	r1, r3, #15
   388e8:	f53f af73 	bmi.w	387d2 <ip_interface_accept+0x8a>
   388ec:	4d35      	ldr	r5, [pc, #212]	; (389c4 <ip_interface_accept+0x27c>)
   388ee:	9903      	ldr	r1, [sp, #12]
   388f0:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   388f4:	699b      	ldr	r3, [r3, #24]
   388f6:	618b      	str	r3, [r1, #24]
   388f8:	b147      	cbz	r7, 3890c <ip_interface_accept+0x1c4>
   388fa:	68cb      	ldr	r3, [r1, #12]
   388fc:	2b0a      	cmp	r3, #10
   388fe:	d028      	beq.n	38952 <ip_interface_accept+0x20a>
   38900:	2b02      	cmp	r3, #2
   38902:	d103      	bne.n	3890c <ip_interface_accept+0x1c4>
   38904:	f8d8 2000 	ldr.w	r2, [r8]
   38908:	2a10      	cmp	r2, #16
   3890a:	d036      	beq.n	3897a <ip_interface_accept+0x232>
   3890c:	680a      	ldr	r2, [r1, #0]
   3890e:	482e      	ldr	r0, [pc, #184]	; (389c8 <ip_interface_accept+0x280>)
   38910:	4002      	ands	r2, r0
   38912:	f042 0205 	orr.w	r2, r2, #5
   38916:	600a      	str	r2, [r1, #0]
   38918:	9a03      	ldr	r2, [sp, #12]
   3891a:	6811      	ldr	r1, [r2, #0]
   3891c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
   38920:	6011      	str	r1, [r2, #0]
   38922:	6811      	ldr	r1, [r2, #0]
   38924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   38928:	6011      	str	r1, [r2, #0]
   3892a:	6823      	ldr	r3, [r4, #0]
   3892c:	4003      	ands	r3, r0
   3892e:	f043 0307 	orr.w	r3, r3, #7
   38932:	6023      	str	r3, [r4, #0]
   38934:	6823      	ldr	r3, [r4, #0]
   38936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3893a:	6023      	str	r3, [r4, #0]
   3893c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   38940:	f7fe ff86 	bl	37850 <rpc_ip_client_message_free>
   38944:	2300      	movs	r3, #0
   38946:	4648      	mov	r0, r9
   38948:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
   3894c:	b007      	add	sp, #28
   3894e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38952:	f8d8 2000 	ldr.w	r2, [r8]
   38956:	2a24      	cmp	r2, #36	; 0x24
   38958:	d1d8      	bne.n	3890c <ip_interface_accept+0x1c4>
   3895a:	703a      	strb	r2, [r7, #0]
   3895c:	2210      	movs	r2, #16
   3895e:	607b      	str	r3, [r7, #4]
   38960:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   38964:	f107 0010 	add.w	r0, r7, #16
   38968:	8b9b      	ldrh	r3, [r3, #28]
   3896a:	813b      	strh	r3, [r7, #8]
   3896c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
   38970:	3120      	adds	r1, #32
   38972:	f00f fc09 	bl	48188 <memcpy>
   38976:	9903      	ldr	r1, [sp, #12]
   38978:	e7c8      	b.n	3890c <ip_interface_accept+0x1c4>
   3897a:	703a      	strb	r2, [r7, #0]
   3897c:	607b      	str	r3, [r7, #4]
   3897e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
   38982:	f107 000c 	add.w	r0, r7, #12
   38986:	8b9b      	ldrh	r3, [r3, #28]
   38988:	2204      	movs	r2, #4
   3898a:	e7ee      	b.n	3896a <ip_interface_accept+0x222>
   3898c:	4630      	mov	r0, r6
   3898e:	f005 fa03 	bl	3dd98 <interface_socket_from_handle_get>
   38992:	b138      	cbz	r0, 389a4 <ip_interface_accept+0x25c>
   38994:	f8d0 9004 	ldr.w	r9, [r0, #4]
   38998:	f1b9 0f00 	cmp.w	r9, #0
   3899c:	d002      	beq.n	389a4 <ip_interface_accept+0x25c>
   3899e:	f8c0 a004 	str.w	sl, [r0, #4]
   389a2:	e766      	b.n	38872 <ip_interface_accept+0x12a>
   389a4:	6823      	ldr	r3, [r4, #0]
   389a6:	9a01      	ldr	r2, [sp, #4]
   389a8:	46a9      	mov	r9, r5
   389aa:	4313      	orrs	r3, r2
   389ac:	6023      	str	r3, [r4, #0]
   389ae:	e79d      	b.n	388ec <ip_interface_accept+0x1a4>
   389b0:	4605      	mov	r5, r0
   389b2:	f04f 0909 	mov.w	r9, #9
   389b6:	e6e9      	b.n	3878c <ip_interface_accept+0x44>
   389b8:	f04f 090c 	mov.w	r9, #12
   389bc:	e6eb      	b.n	38796 <ip_interface_accept+0x4e>
   389be:	bf00      	nop
   389c0:	00037871 	.word	0x00037871
   389c4:	20025d44 	.word	0x20025d44
   389c8:	ffff0000 	.word	0xffff0000

000389cc <ip_interface_setopt>:
   389cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   389d0:	2901      	cmp	r1, #1
   389d2:	b084      	sub	sp, #16
   389d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   389d6:	f040 808a 	bne.w	38aee <ip_interface_setopt+0x122>
   389da:	4617      	mov	r7, r2
   389dc:	461d      	mov	r5, r3
   389de:	4680      	mov	r8, r0
   389e0:	f005 f9da 	bl	3dd98 <interface_socket_from_handle_get>
   389e4:	4604      	mov	r4, r0
   389e6:	2800      	cmp	r0, #0
   389e8:	f000 808d 	beq.w	38b06 <ip_interface_setopt+0x13a>
   389ec:	f1a7 0119 	sub.w	r1, r7, #25
   389f0:	290f      	cmp	r1, #15
   389f2:	d872      	bhi.n	38ada <ip_interface_setopt+0x10e>
   389f4:	e8df f001 	tbb	[pc, r1]
   389f8:	7171711a 	.word	0x7171711a
   389fc:	61514071 	.word	0x61514071
   38a00:	71717171 	.word	0x71717171
   38a04:	08717171 	.word	0x08717171
   38a08:	2e04      	cmp	r6, #4
   38a0a:	d176      	bne.n	38afa <ip_interface_setopt+0x12e>
   38a0c:	2d00      	cmp	r5, #0
   38a0e:	d074      	beq.n	38afa <ip_interface_setopt+0x12e>
   38a10:	4601      	mov	r1, r0
   38a12:	e9cd 5600 	strd	r5, r6, [sp]
   38a16:	4640      	mov	r0, r8
   38a18:	f241 0304 	movw	r3, #4100	; 0x1004
   38a1c:	2208      	movs	r2, #8
   38a1e:	f7ff fcff 	bl	38420 <ip_interface_socketoption_send>
   38a22:	bb20      	cbnz	r0, 38a6e <ip_interface_setopt+0xa2>
   38a24:	2000      	movs	r0, #0
   38a26:	b004      	add	sp, #16
   38a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38a2c:	2d00      	cmp	r5, #0
   38a2e:	d06c      	beq.n	38b0a <ip_interface_setopt+0x13e>
   38a30:	4628      	mov	r0, r5
   38a32:	f7e4 fc17 	bl	1d264 <strlen>
   38a36:	42b0      	cmp	r0, r6
   38a38:	d167      	bne.n	38b0a <ip_interface_setopt+0x13e>
   38a3a:	6823      	ldr	r3, [r4, #0]
   38a3c:	b29b      	uxth	r3, r3
   38a3e:	2b02      	cmp	r3, #2
   38a40:	d161      	bne.n	38b06 <ip_interface_setopt+0x13a>
   38a42:	4629      	mov	r1, r5
   38a44:	68e0      	ldr	r0, [r4, #12]
   38a46:	f002 fe43 	bl	3b6d0 <pdn_interface_pdn_id_get>
   38a4a:	9003      	str	r0, [sp, #12]
   38a4c:	3001      	adds	r0, #1
   38a4e:	bf08      	it	eq
   38a50:	2016      	moveq	r0, #22
   38a52:	d00c      	beq.n	38a6e <ip_interface_setopt+0xa2>
   38a54:	2204      	movs	r2, #4
   38a56:	ab03      	add	r3, sp, #12
   38a58:	e9cd 3200 	strd	r3, r2, [sp]
   38a5c:	4621      	mov	r1, r4
   38a5e:	4640      	mov	r0, r8
   38a60:	f243 0310 	movw	r3, #12304	; 0x3010
   38a64:	2208      	movs	r2, #8
   38a66:	f7ff fcdb 	bl	38420 <ip_interface_socketoption_send>
   38a6a:	2800      	cmp	r0, #0
   38a6c:	d0da      	beq.n	38a24 <ip_interface_setopt+0x58>
   38a6e:	f7f2 fd6b 	bl	2b548 <bsd_os_errno_set>
   38a72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38a76:	e7d6      	b.n	38a26 <ip_interface_setopt+0x5a>
   38a78:	2e04      	cmp	r6, #4
   38a7a:	d13e      	bne.n	38afa <ip_interface_setopt+0x12e>
   38a7c:	2d00      	cmp	r5, #0
   38a7e:	d03c      	beq.n	38afa <ip_interface_setopt+0x12e>
   38a80:	4601      	mov	r1, r0
   38a82:	e9cd 5600 	strd	r5, r6, [sp]
   38a86:	4640      	mov	r0, r8
   38a88:	f248 0301 	movw	r3, #32769	; 0x8001
   38a8c:	f44f 7200 	mov.w	r2, #512	; 0x200
   38a90:	f7ff fcc6 	bl	38420 <ip_interface_socketoption_send>
   38a94:	2800      	cmp	r0, #0
   38a96:	d0c5      	beq.n	38a24 <ip_interface_setopt+0x58>
   38a98:	e7e9      	b.n	38a6e <ip_interface_setopt+0xa2>
   38a9a:	2e04      	cmp	r6, #4
   38a9c:	d12d      	bne.n	38afa <ip_interface_setopt+0x12e>
   38a9e:	b365      	cbz	r5, 38afa <ip_interface_setopt+0x12e>
   38aa0:	4601      	mov	r1, r0
   38aa2:	e9cd 5600 	strd	r5, r6, [sp]
   38aa6:	4640      	mov	r0, r8
   38aa8:	f244 0310 	movw	r3, #16400	; 0x4010
   38aac:	f44f 7200 	mov.w	r2, #512	; 0x200
   38ab0:	f7ff fcb6 	bl	38420 <ip_interface_socketoption_send>
   38ab4:	2800      	cmp	r0, #0
   38ab6:	d0b5      	beq.n	38a24 <ip_interface_setopt+0x58>
   38ab8:	e7d9      	b.n	38a6e <ip_interface_setopt+0xa2>
   38aba:	2e04      	cmp	r6, #4
   38abc:	d11d      	bne.n	38afa <ip_interface_setopt+0x12e>
   38abe:	b1e5      	cbz	r5, 38afa <ip_interface_setopt+0x12e>
   38ac0:	4601      	mov	r1, r0
   38ac2:	e9cd 5600 	strd	r5, r6, [sp]
   38ac6:	4640      	mov	r0, r8
   38ac8:	f246 0310 	movw	r3, #24592	; 0x6010
   38acc:	f44f 7200 	mov.w	r2, #512	; 0x200
   38ad0:	f7ff fca6 	bl	38420 <ip_interface_socketoption_send>
   38ad4:	2800      	cmp	r0, #0
   38ad6:	d0a5      	beq.n	38a24 <ip_interface_setopt+0x58>
   38ad8:	e7c9      	b.n	38a6e <ip_interface_setopt+0xa2>
   38ada:	9600      	str	r6, [sp, #0]
   38adc:	462b      	mov	r3, r5
   38ade:	463a      	mov	r2, r7
   38ae0:	4640      	mov	r0, r8
   38ae2:	2101      	movs	r1, #1
   38ae4:	f005 f980 	bl	3dde8 <interface_socket_setopt>
   38ae8:	b004      	add	sp, #16
   38aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38aee:	202a      	movs	r0, #42	; 0x2a
   38af0:	f7f2 fd2a 	bl	2b548 <bsd_os_errno_set>
   38af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38af8:	e795      	b.n	38a26 <ip_interface_setopt+0x5a>
   38afa:	2016      	movs	r0, #22
   38afc:	f7f2 fd24 	bl	2b548 <bsd_os_errno_set>
   38b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38b04:	e78f      	b.n	38a26 <ip_interface_setopt+0x5a>
   38b06:	2009      	movs	r0, #9
   38b08:	e7b1      	b.n	38a6e <ip_interface_setopt+0xa2>
   38b0a:	200e      	movs	r0, #14
   38b0c:	e7af      	b.n	38a6e <ip_interface_setopt+0xa2>
   38b0e:	bf00      	nop

00038b10 <ip_interface_getopt>:
   38b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38b14:	2901      	cmp	r1, #1
   38b16:	b082      	sub	sp, #8
   38b18:	9c08      	ldr	r4, [sp, #32]
   38b1a:	d173      	bne.n	38c04 <ip_interface_getopt+0xf4>
   38b1c:	4617      	mov	r7, r2
   38b1e:	461e      	mov	r6, r3
   38b20:	4680      	mov	r8, r0
   38b22:	f005 f939 	bl	3dd98 <interface_socket_from_handle_get>
   38b26:	2800      	cmp	r0, #0
   38b28:	d072      	beq.n	38c10 <ip_interface_getopt+0x100>
   38b2a:	f1a7 051e 	sub.w	r5, r7, #30
   38b2e:	2d0a      	cmp	r5, #10
   38b30:	d858      	bhi.n	38be4 <ip_interface_getopt+0xd4>
   38b32:	e8df f005 	tbb	[pc, r5]
   38b36:	331b      	.short	0x331b
   38b38:	57575745 	.word	0x57575745
   38b3c:	57575757 	.word	0x57575757
   38b40:	06          	.byte	0x06
   38b41:	00          	.byte	0x00
   38b42:	2c00      	cmp	r4, #0
   38b44:	d058      	beq.n	38bf8 <ip_interface_getopt+0xe8>
   38b46:	6823      	ldr	r3, [r4, #0]
   38b48:	2b04      	cmp	r3, #4
   38b4a:	d155      	bne.n	38bf8 <ip_interface_getopt+0xe8>
   38b4c:	2e00      	cmp	r6, #0
   38b4e:	d053      	beq.n	38bf8 <ip_interface_getopt+0xe8>
   38b50:	4601      	mov	r1, r0
   38b52:	e9cd 6400 	strd	r6, r4, [sp]
   38b56:	4640      	mov	r0, r8
   38b58:	f241 0304 	movw	r3, #4100	; 0x1004
   38b5c:	2208      	movs	r2, #8
   38b5e:	f7ff fbaf 	bl	382c0 <ip_interface_socketoption_get>
   38b62:	b9b0      	cbnz	r0, 38b92 <ip_interface_getopt+0x82>
   38b64:	2000      	movs	r0, #0
   38b66:	b002      	add	sp, #8
   38b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38b6c:	2c00      	cmp	r4, #0
   38b6e:	d043      	beq.n	38bf8 <ip_interface_getopt+0xe8>
   38b70:	6823      	ldr	r3, [r4, #0]
   38b72:	2b04      	cmp	r3, #4
   38b74:	d140      	bne.n	38bf8 <ip_interface_getopt+0xe8>
   38b76:	2e00      	cmp	r6, #0
   38b78:	d03e      	beq.n	38bf8 <ip_interface_getopt+0xe8>
   38b7a:	4601      	mov	r1, r0
   38b7c:	e9cd 6400 	strd	r6, r4, [sp]
   38b80:	4640      	mov	r0, r8
   38b82:	f248 0301 	movw	r3, #32769	; 0x8001
   38b86:	f44f 7200 	mov.w	r2, #512	; 0x200
   38b8a:	f7ff fb99 	bl	382c0 <ip_interface_socketoption_get>
   38b8e:	2800      	cmp	r0, #0
   38b90:	d0e8      	beq.n	38b64 <ip_interface_getopt+0x54>
   38b92:	f7f2 fcd9 	bl	2b548 <bsd_os_errno_set>
   38b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38b9a:	e7e4      	b.n	38b66 <ip_interface_getopt+0x56>
   38b9c:	b364      	cbz	r4, 38bf8 <ip_interface_getopt+0xe8>
   38b9e:	6823      	ldr	r3, [r4, #0]
   38ba0:	2b04      	cmp	r3, #4
   38ba2:	d129      	bne.n	38bf8 <ip_interface_getopt+0xe8>
   38ba4:	b346      	cbz	r6, 38bf8 <ip_interface_getopt+0xe8>
   38ba6:	4601      	mov	r1, r0
   38ba8:	e9cd 6400 	strd	r6, r4, [sp]
   38bac:	4640      	mov	r0, r8
   38bae:	f244 0310 	movw	r3, #16400	; 0x4010
   38bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
   38bb6:	f7ff fb83 	bl	382c0 <ip_interface_socketoption_get>
   38bba:	2800      	cmp	r0, #0
   38bbc:	d0d2      	beq.n	38b64 <ip_interface_getopt+0x54>
   38bbe:	e7e8      	b.n	38b92 <ip_interface_getopt+0x82>
   38bc0:	b1d4      	cbz	r4, 38bf8 <ip_interface_getopt+0xe8>
   38bc2:	6823      	ldr	r3, [r4, #0]
   38bc4:	2b04      	cmp	r3, #4
   38bc6:	d117      	bne.n	38bf8 <ip_interface_getopt+0xe8>
   38bc8:	b1b6      	cbz	r6, 38bf8 <ip_interface_getopt+0xe8>
   38bca:	4601      	mov	r1, r0
   38bcc:	e9cd 6400 	strd	r6, r4, [sp]
   38bd0:	4640      	mov	r0, r8
   38bd2:	f246 0310 	movw	r3, #24592	; 0x6010
   38bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
   38bda:	f7ff fb71 	bl	382c0 <ip_interface_socketoption_get>
   38bde:	2800      	cmp	r0, #0
   38be0:	d0c0      	beq.n	38b64 <ip_interface_getopt+0x54>
   38be2:	e7d6      	b.n	38b92 <ip_interface_getopt+0x82>
   38be4:	4633      	mov	r3, r6
   38be6:	463a      	mov	r2, r7
   38be8:	4640      	mov	r0, r8
   38bea:	2101      	movs	r1, #1
   38bec:	9408      	str	r4, [sp, #32]
   38bee:	b002      	add	sp, #8
   38bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38bf4:	f005 b93e 	b.w	3de74 <interface_socket_getopt>
   38bf8:	2016      	movs	r0, #22
   38bfa:	f7f2 fca5 	bl	2b548 <bsd_os_errno_set>
   38bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38c02:	e7b0      	b.n	38b66 <ip_interface_getopt+0x56>
   38c04:	202a      	movs	r0, #42	; 0x2a
   38c06:	f7f2 fc9f 	bl	2b548 <bsd_os_errno_set>
   38c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38c0e:	e7aa      	b.n	38b66 <ip_interface_getopt+0x56>
   38c10:	2009      	movs	r0, #9
   38c12:	f7f2 fc99 	bl	2b548 <bsd_os_errno_set>
   38c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38c1a:	e7a4      	b.n	38b66 <ip_interface_getopt+0x56>

00038c1c <ip_interface_getaddrinfo>:
   38c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c20:	f04f 0c00 	mov.w	ip, #0
   38c24:	2401      	movs	r4, #1
   38c26:	4e75      	ldr	r6, [pc, #468]	; (38dfc <ip_interface_getaddrinfo+0x1e0>)
   38c28:	4d75      	ldr	r5, [pc, #468]	; (38e00 <ip_interface_getaddrinfo+0x1e4>)
   38c2a:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 38e10 <ip_interface_getaddrinfo+0x1f4>
   38c2e:	4f75      	ldr	r7, [pc, #468]	; (38e04 <ip_interface_getaddrinfo+0x1e8>)
   38c30:	7836      	ldrb	r6, [r6, #0]
   38c32:	b085      	sub	sp, #20
   38c34:	f8a5 c000 	strh.w	ip, [r5]
   38c38:	f8c8 4000 	str.w	r4, [r8]
   38c3c:	603c      	str	r4, [r7, #0]
   38c3e:	2e00      	cmp	r6, #0
   38c40:	d05b      	beq.n	38cfa <ip_interface_getaddrinfo+0xde>
   38c42:	9301      	str	r3, [sp, #4]
   38c44:	4614      	mov	r4, r2
   38c46:	460b      	mov	r3, r1
   38c48:	4606      	mov	r6, r0
   38c4a:	b171      	cbz	r1, 38c6a <ip_interface_getaddrinfo+0x4e>
   38c4c:	4618      	mov	r0, r3
   38c4e:	220a      	movs	r2, #10
   38c50:	4661      	mov	r1, ip
   38c52:	f009 ff31 	bl	42ab8 <strtol>
   38c56:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   38c5a:	1e42      	subs	r2, r0, #1
   38c5c:	429a      	cmp	r2, r3
   38c5e:	f200 8097 	bhi.w	38d90 <ip_interface_getaddrinfo+0x174>
   38c62:	0203      	lsls	r3, r0, #8
   38c64:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   38c68:	8028      	strh	r0, [r5, #0]
   38c6a:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 38e14 <ip_interface_getaddrinfo+0x1f8>
   38c6e:	f8da 3000 	ldr.w	r3, [sl]
   38c72:	2b00      	cmp	r3, #0
   38c74:	d145      	bne.n	38d02 <ip_interface_getaddrinfo+0xe6>
   38c76:	4a64      	ldr	r2, [pc, #400]	; (38e08 <ip_interface_getaddrinfo+0x1ec>)
   38c78:	6013      	str	r3, [r2, #0]
   38c7a:	4a64      	ldr	r2, [pc, #400]	; (38e0c <ip_interface_getaddrinfo+0x1f0>)
   38c7c:	6013      	str	r3, [r2, #0]
   38c7e:	2e00      	cmp	r6, #0
   38c80:	d07a      	beq.n	38d78 <ip_interface_getaddrinfo+0x15c>
   38c82:	4630      	mov	r0, r6
   38c84:	f7e4 faee 	bl	1d264 <strlen>
   38c88:	4683      	mov	fp, r0
   38c8a:	b144      	cbz	r4, 38c9e <ip_interface_getaddrinfo+0x82>
   38c8c:	69e2      	ldr	r2, [r4, #28]
   38c8e:	b132      	cbz	r2, 38c9e <ip_interface_getaddrinfo+0x82>
   38c90:	6851      	ldr	r1, [r2, #4]
   38c92:	2966      	cmp	r1, #102	; 0x66
   38c94:	d103      	bne.n	38c9e <ip_interface_getaddrinfo+0x82>
   38c96:	6891      	ldr	r1, [r2, #8]
   38c98:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   38c9c:	d07e      	beq.n	38d9c <ip_interface_getaddrinfo+0x180>
   38c9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   38ca2:	2100      	movs	r1, #0
   38ca4:	f10d 0910 	add.w	r9, sp, #16
   38ca8:	f849 1d04 	str.w	r1, [r9, #-4]!
   38cac:	4648      	mov	r0, r9
   38cae:	4659      	mov	r1, fp
   38cb0:	9200      	str	r2, [sp, #0]
   38cb2:	f7fe fda3 	bl	377fc <rpc_ip_client_request_alloc>
   38cb6:	9a00      	ldr	r2, [sp, #0]
   38cb8:	2800      	cmp	r0, #0
   38cba:	d15f      	bne.n	38d7c <ip_interface_getaddrinfo+0x160>
   38cbc:	f247 010d 	movw	r1, #28685	; 0x700d
   38cc0:	f04f 0c08 	mov.w	ip, #8
   38cc4:	9d03      	ldr	r5, [sp, #12]
   38cc6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   38cca:	60e9      	str	r1, [r5, #12]
   38ccc:	612a      	str	r2, [r5, #16]
   38cce:	7268      	strb	r0, [r5, #9]
   38cd0:	72a8      	strb	r0, [r5, #10]
   38cd2:	72e8      	strb	r0, [r5, #11]
   38cd4:	f885 c008 	strb.w	ip, [r5, #8]
   38cd8:	2c00      	cmp	r4, #0
   38cda:	d076      	beq.n	38dca <ip_interface_getaddrinfo+0x1ae>
   38cdc:	6862      	ldr	r2, [r4, #4]
   38cde:	f022 0108 	bic.w	r1, r2, #8
   38ce2:	2902      	cmp	r1, #2
   38ce4:	d011      	beq.n	38d0a <ip_interface_getaddrinfo+0xee>
   38ce6:	2a05      	cmp	r2, #5
   38ce8:	d176      	bne.n	38dd8 <ip_interface_getaddrinfo+0x1bc>
   38cea:	68a1      	ldr	r1, [r4, #8]
   38cec:	2902      	cmp	r1, #2
   38cee:	6039      	str	r1, [r7, #0]
   38cf0:	d115      	bne.n	38d1e <ip_interface_getaddrinfo+0x102>
   38cf2:	2102      	movs	r1, #2
   38cf4:	f8c8 1000 	str.w	r1, [r8]
   38cf8:	e00b      	b.n	38d12 <ip_interface_getaddrinfo+0xf6>
   38cfa:	2070      	movs	r0, #112	; 0x70
   38cfc:	b005      	add	sp, #20
   38cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d02:	2073      	movs	r0, #115	; 0x73
   38d04:	b005      	add	sp, #20
   38d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d0a:	68a1      	ldr	r1, [r4, #8]
   38d0c:	2902      	cmp	r1, #2
   38d0e:	6039      	str	r1, [r7, #0]
   38d10:	d0ef      	beq.n	38cf2 <ip_interface_getaddrinfo+0xd6>
   38d12:	2a05      	cmp	r2, #5
   38d14:	d003      	beq.n	38d1e <ip_interface_getaddrinfo+0x102>
   38d16:	2a0a      	cmp	r2, #10
   38d18:	bf14      	ite	ne
   38d1a:	2201      	movne	r2, #1
   38d1c:	2202      	moveq	r2, #2
   38d1e:	61aa      	str	r2, [r5, #24]
   38d20:	68e2      	ldr	r2, [r4, #12]
   38d22:	622a      	str	r2, [r5, #32]
   38d24:	68a2      	ldr	r2, [r4, #8]
   38d26:	61ea      	str	r2, [r5, #28]
   38d28:	6822      	ldr	r2, [r4, #0]
   38d2a:	616a      	str	r2, [r5, #20]
   38d2c:	68aa      	ldr	r2, [r5, #8]
   38d2e:	3210      	adds	r2, #16
   38d30:	60aa      	str	r2, [r5, #8]
   38d32:	b12e      	cbz	r6, 38d40 <ip_interface_getaddrinfo+0x124>
   38d34:	6828      	ldr	r0, [r5, #0]
   38d36:	b118      	cbz	r0, 38d40 <ip_interface_getaddrinfo+0x124>
   38d38:	465a      	mov	r2, fp
   38d3a:	4631      	mov	r1, r6
   38d3c:	f00f fa24 	bl	48188 <memcpy>
   38d40:	2301      	movs	r3, #1
   38d42:	f247 010d 	movw	r1, #28685	; 0x700d
   38d46:	4628      	mov	r0, r5
   38d48:	f8ca 3000 	str.w	r3, [sl]
   38d4c:	f7fe fd6a 	bl	37824 <rpc_ip_client_request_send>
   38d50:	bb10      	cbnz	r0, 38d98 <ip_interface_getaddrinfo+0x17c>
   38d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   38d56:	9303      	str	r3, [sp, #12]
   38d58:	4649      	mov	r1, r9
   38d5a:	4628      	mov	r0, r5
   38d5c:	f7f2 fb34 	bl	2b3c8 <bsd_os_timedwait>
   38d60:	f8da 3000 	ldr.w	r3, [sl]
   38d64:	2b01      	cmp	r3, #1
   38d66:	d0f7      	beq.n	38d58 <ip_interface_getaddrinfo+0x13c>
   38d68:	4b28      	ldr	r3, [pc, #160]	; (38e0c <ip_interface_getaddrinfo+0x1f0>)
   38d6a:	6818      	ldr	r0, [r3, #0]
   38d6c:	bb40      	cbnz	r0, 38dc0 <ip_interface_getaddrinfo+0x1a4>
   38d6e:	4b26      	ldr	r3, [pc, #152]	; (38e08 <ip_interface_getaddrinfo+0x1ec>)
   38d70:	9a01      	ldr	r2, [sp, #4]
   38d72:	681b      	ldr	r3, [r3, #0]
   38d74:	6013      	str	r3, [r2, #0]
   38d76:	e7c1      	b.n	38cfc <ip_interface_getaddrinfo+0xe0>
   38d78:	46b3      	mov	fp, r6
   38d7a:	e786      	b.n	38c8a <ip_interface_getaddrinfo+0x6e>
   38d7c:	9d03      	ldr	r5, [sp, #12]
   38d7e:	2d00      	cmp	r5, #0
   38d80:	d1aa      	bne.n	38cd8 <ip_interface_getaddrinfo+0xbc>
   38d82:	200c      	movs	r0, #12
   38d84:	2300      	movs	r3, #0
   38d86:	f8ca 3000 	str.w	r3, [sl]
   38d8a:	b005      	add	sp, #20
   38d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d90:	2016      	movs	r0, #22
   38d92:	b005      	add	sp, #20
   38d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38d98:	2023      	movs	r0, #35	; 0x23
   38d9a:	e7f3      	b.n	38d84 <ip_interface_getaddrinfo+0x168>
   38d9c:	f240 2002 	movw	r0, #514	; 0x202
   38da0:	68d1      	ldr	r1, [r2, #12]
   38da2:	4281      	cmp	r1, r0
   38da4:	f47f af7b 	bne.w	38c9e <ip_interface_getaddrinfo+0x82>
   38da8:	6991      	ldr	r1, [r2, #24]
   38daa:	2900      	cmp	r1, #0
   38dac:	f43f af77 	beq.w	38c9e <ip_interface_getaddrinfo+0x82>
   38db0:	6860      	ldr	r0, [r4, #4]
   38db2:	f002 fc8d 	bl	3b6d0 <pdn_interface_pdn_id_get>
   38db6:	1c43      	adds	r3, r0, #1
   38db8:	f43f af71 	beq.w	38c9e <ip_interface_getaddrinfo+0x82>
   38dbc:	4602      	mov	r2, r0
   38dbe:	e770      	b.n	38ca2 <ip_interface_getaddrinfo+0x86>
   38dc0:	4b12      	ldr	r3, [pc, #72]	; (38e0c <ip_interface_getaddrinfo+0x1f0>)
   38dc2:	6818      	ldr	r0, [r3, #0]
   38dc4:	2800      	cmp	r0, #0
   38dc6:	d099      	beq.n	38cfc <ip_interface_getaddrinfo+0xe0>
   38dc8:	e7dc      	b.n	38d84 <ip_interface_getaddrinfo+0x168>
   38dca:	4621      	mov	r1, r4
   38dcc:	2210      	movs	r2, #16
   38dce:	f105 0014 	add.w	r0, r5, #20
   38dd2:	f00f f9f9 	bl	481c8 <memset>
   38dd6:	e7a9      	b.n	38d2c <ip_interface_getaddrinfo+0x110>
   38dd8:	202f      	movs	r0, #47	; 0x2f
   38dda:	f7f2 fbb5 	bl	2b548 <bsd_os_errno_set>
   38dde:	68aa      	ldr	r2, [r5, #8]
   38de0:	3210      	adds	r2, #16
   38de2:	60aa      	str	r2, [r5, #8]
   38de4:	b916      	cbnz	r6, 38dec <ip_interface_getaddrinfo+0x1d0>
   38de6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38dea:	e7cb      	b.n	38d84 <ip_interface_getaddrinfo+0x168>
   38dec:	6828      	ldr	r0, [r5, #0]
   38dee:	2800      	cmp	r0, #0
   38df0:	d0f9      	beq.n	38de6 <ip_interface_getaddrinfo+0x1ca>
   38df2:	465a      	mov	r2, fp
   38df4:	4631      	mov	r1, r6
   38df6:	f00f f9c7 	bl	48188 <memcpy>
   38dfa:	e7f4      	b.n	38de6 <ip_interface_getaddrinfo+0x1ca>
   38dfc:	2002d1bd 	.word	0x2002d1bd
   38e00:	2002a9c0 	.word	0x2002a9c0
   38e04:	20025d34 	.word	0x20025d34
   38e08:	20025d40 	.word	0x20025d40
   38e0c:	20025d38 	.word	0x20025d38
   38e10:	20025d30 	.word	0x20025d30
   38e14:	20025d3c 	.word	0x20025d3c

00038e18 <ip_interface_freeaddrinfo>:
   38e18:	b538      	push	{r3, r4, r5, lr}
   38e1a:	4d0b      	ldr	r5, [pc, #44]	; (38e48 <ip_interface_freeaddrinfo+0x30>)
   38e1c:	682b      	ldr	r3, [r5, #0]
   38e1e:	2b02      	cmp	r3, #2
   38e20:	d000      	beq.n	38e24 <ip_interface_freeaddrinfo+0xc>
   38e22:	bd38      	pop	{r3, r4, r5, pc}
   38e24:	b150      	cbz	r0, 38e3c <ip_interface_freeaddrinfo+0x24>
   38e26:	4604      	mov	r4, r0
   38e28:	6940      	ldr	r0, [r0, #20]
   38e2a:	f004 faa7 	bl	3d37c <nrf_free>
   38e2e:	69a0      	ldr	r0, [r4, #24]
   38e30:	b108      	cbz	r0, 38e36 <ip_interface_freeaddrinfo+0x1e>
   38e32:	f004 faa3 	bl	3d37c <nrf_free>
   38e36:	4620      	mov	r0, r4
   38e38:	f004 faa0 	bl	3d37c <nrf_free>
   38e3c:	2300      	movs	r3, #0
   38e3e:	4a03      	ldr	r2, [pc, #12]	; (38e4c <ip_interface_freeaddrinfo+0x34>)
   38e40:	602b      	str	r3, [r5, #0]
   38e42:	6013      	str	r3, [r2, #0]
   38e44:	bd38      	pop	{r3, r4, r5, pc}
   38e46:	bf00      	nop
   38e48:	20025d3c 	.word	0x20025d3c
   38e4c:	20025d38 	.word	0x20025d38

00038e50 <rpc_ip_event_handler>:
   38e50:	f248 030d 	movw	r3, #32781	; 0x800d
   38e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38e58:	4299      	cmp	r1, r3
   38e5a:	b089      	sub	sp, #36	; 0x24
   38e5c:	4604      	mov	r4, r0
   38e5e:	d05c      	beq.n	38f1a <rpc_ip_event_handler+0xca>
   38e60:	f248 030f 	movw	r3, #32783	; 0x800f
   38e64:	4299      	cmp	r1, r3
   38e66:	460d      	mov	r5, r1
   38e68:	d045      	beq.n	38ef6 <rpc_ip_event_handler+0xa6>
   38e6a:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   38e6e:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   38e72:	68c0      	ldr	r0, [r0, #12]
   38e74:	d075      	beq.n	38f62 <rpc_ip_event_handler+0x112>
   38e76:	0c06      	lsrs	r6, r0, #16
   38e78:	4630      	mov	r0, r6
   38e7a:	f004 ff8d 	bl	3dd98 <interface_socket_from_handle_get>
   38e7e:	4607      	mov	r7, r0
   38e80:	2800      	cmp	r0, #0
   38e82:	d059      	beq.n	38f38 <rpc_ip_event_handler+0xe8>
   38e84:	4601      	mov	r1, r0
   38e86:	462b      	mov	r3, r5
   38e88:	4622      	mov	r2, r4
   38e8a:	4630      	mov	r0, r6
   38e8c:	f7fe fc24 	bl	376d8 <tls_rpc_ip_event_handler>
   38e90:	2800      	cmp	r0, #0
   38e92:	d04d      	beq.n	38f30 <rpc_ip_event_handler+0xe0>
   38e94:	f248 0307 	movw	r3, #32775	; 0x8007
   38e98:	429d      	cmp	r5, r3
   38e9a:	d866      	bhi.n	38f6a <rpc_ip_event_handler+0x11a>
   38e9c:	f248 0306 	movw	r3, #32774	; 0x8006
   38ea0:	429d      	cmp	r5, r3
   38ea2:	f080 81e7 	bcs.w	39274 <rpc_ip_event_handler+0x424>
   38ea6:	f248 0303 	movw	r3, #32771	; 0x8003
   38eaa:	429d      	cmp	r5, r3
   38eac:	f000 81c5 	beq.w	3923a <rpc_ip_event_handler+0x3ea>
   38eb0:	f200 811b 	bhi.w	390ea <rpc_ip_event_handler+0x29a>
   38eb4:	f248 0301 	movw	r3, #32769	; 0x8001
   38eb8:	429d      	cmp	r5, r3
   38eba:	f000 8154 	beq.w	39166 <rpc_ip_event_handler+0x316>
   38ebe:	f248 0302 	movw	r3, #32770	; 0x8002
   38ec2:	429d      	cmp	r5, r3
   38ec4:	d138      	bne.n	38f38 <rpc_ip_event_handler+0xe8>
   38ec6:	683b      	ldr	r3, [r7, #0]
   38ec8:	0098      	lsls	r0, r3, #2
   38eca:	d531      	bpl.n	38f30 <rpc_ip_event_handler+0xe0>
   38ecc:	683b      	ldr	r3, [r7, #0]
   38ece:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   38ed2:	603b      	str	r3, [r7, #0]
   38ed4:	6963      	ldr	r3, [r4, #20]
   38ed6:	2b00      	cmp	r3, #0
   38ed8:	f000 81ea 	beq.w	392b0 <rpc_ip_event_handler+0x460>
   38edc:	2b10      	cmp	r3, #16
   38ede:	bf8e      	itee	hi
   38ee0:	232d      	movhi	r3, #45	; 0x2d
   38ee2:	4ab9      	ldrls	r2, [pc, #740]	; (391c8 <rpc_ip_event_handler+0x378>)
   38ee4:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   38ee8:	607b      	str	r3, [r7, #4]
   38eea:	683b      	ldr	r3, [r7, #0]
   38eec:	2000      	movs	r0, #0
   38eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   38ef2:	603b      	str	r3, [r7, #0]
   38ef4:	e00e      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   38ef6:	6943      	ldr	r3, [r0, #20]
   38ef8:	2001      	movs	r0, #1
   38efa:	2b10      	cmp	r3, #16
   38efc:	49b3      	ldr	r1, [pc, #716]	; (391cc <rpc_ip_event_handler+0x37c>)
   38efe:	bf88      	it	hi
   38f00:	222d      	movhi	r2, #45	; 0x2d
   38f02:	7008      	strb	r0, [r1, #0]
   38f04:	f04f 0000 	mov.w	r0, #0
   38f08:	bf9c      	itt	ls
   38f0a:	4aaf      	ldrls	r2, [pc, #700]	; (391c8 <rpc_ip_event_handler+0x378>)
   38f0c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
   38f10:	4baf      	ldr	r3, [pc, #700]	; (391d0 <rpc_ip_event_handler+0x380>)
   38f12:	601a      	str	r2, [r3, #0]
   38f14:	b009      	add	sp, #36	; 0x24
   38f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f1a:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 391e4 <rpc_ip_event_handler+0x394>
   38f1e:	6807      	ldr	r7, [r0, #0]
   38f20:	f8da 2000 	ldr.w	r2, [sl]
   38f24:	2a01      	cmp	r2, #1
   38f26:	d00b      	beq.n	38f40 <rpc_ip_event_handler+0xf0>
   38f28:	b117      	cbz	r7, 38f30 <rpc_ip_event_handler+0xe0>
   38f2a:	4638      	mov	r0, r7
   38f2c:	f7fe fc98 	bl	37860 <rpc_ip_client_data_free>
   38f30:	2000      	movs	r0, #0
   38f32:	b009      	add	sp, #36	; 0x24
   38f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38f38:	6820      	ldr	r0, [r4, #0]
   38f3a:	2800      	cmp	r0, #0
   38f3c:	d1f6      	bne.n	38f2c <rpc_ip_event_handler+0xdc>
   38f3e:	e7f7      	b.n	38f30 <rpc_ip_event_handler+0xe0>
   38f40:	6942      	ldr	r2, [r0, #20]
   38f42:	2a00      	cmp	r2, #0
   38f44:	d045      	beq.n	38fd2 <rpc_ip_event_handler+0x182>
   38f46:	2a10      	cmp	r2, #16
   38f48:	bf8e      	itee	hi
   38f4a:	222d      	movhi	r2, #45	; 0x2d
   38f4c:	499e      	ldrls	r1, [pc, #632]	; (391c8 <rpc_ip_event_handler+0x378>)
   38f4e:	f851 2022 	ldrls.w	r2, [r1, r2, lsl #2]
   38f52:	49a0      	ldr	r1, [pc, #640]	; (391d4 <rpc_ip_event_handler+0x384>)
   38f54:	600a      	str	r2, [r1, #0]
   38f56:	2202      	movs	r2, #2
   38f58:	f8ca 2000 	str.w	r2, [sl]
   38f5c:	2f00      	cmp	r7, #0
   38f5e:	d1e4      	bne.n	38f2a <rpc_ip_event_handler+0xda>
   38f60:	e7e6      	b.n	38f30 <rpc_ip_event_handler+0xe0>
   38f62:	f004 fec7 	bl	3dcf4 <interface_from_internal_id_search>
   38f66:	4606      	mov	r6, r0
   38f68:	e786      	b.n	38e78 <rpc_ip_event_handler+0x28>
   38f6a:	f248 030c 	movw	r3, #32780	; 0x800c
   38f6e:	429d      	cmp	r5, r3
   38f70:	f000 813c 	beq.w	391ec <rpc_ip_event_handler+0x39c>
   38f74:	f240 80d5 	bls.w	39122 <rpc_ip_event_handler+0x2d2>
   38f78:	f249 0302 	movw	r3, #36866	; 0x9002
   38f7c:	429d      	cmp	r5, r3
   38f7e:	f000 811d 	beq.w	391bc <rpc_ip_event_handler+0x36c>
   38f82:	f249 0303 	movw	r3, #36867	; 0x9003
   38f86:	429d      	cmp	r5, r3
   38f88:	f000 80f9 	beq.w	3917e <rpc_ip_event_handler+0x32e>
   38f8c:	f249 0301 	movw	r3, #36865	; 0x9001
   38f90:	429d      	cmp	r5, r3
   38f92:	d1d1      	bne.n	38f38 <rpc_ip_event_handler+0xe8>
   38f94:	683d      	ldr	r5, [r7, #0]
   38f96:	f415 1580 	ands.w	r5, r5, #1048576	; 0x100000
   38f9a:	f000 8184 	beq.w	392a6 <rpc_ip_event_handler+0x456>
   38f9e:	68a3      	ldr	r3, [r4, #8]
   38fa0:	2b04      	cmp	r3, #4
   38fa2:	f200 81af 	bhi.w	39304 <rpc_ip_event_handler+0x4b4>
   38fa6:	2500      	movs	r5, #0
   38fa8:	462e      	mov	r6, r5
   38faa:	6821      	ldr	r1, [r4, #0]
   38fac:	6862      	ldr	r2, [r4, #4]
   38fae:	e9cd 6506 	strd	r6, r5, [sp, #24]
   38fb2:	e9cd 1204 	strd	r1, r2, [sp, #16]
   38fb6:	69f8      	ldr	r0, [r7, #28]
   38fb8:	a904      	add	r1, sp, #16
   38fba:	6803      	ldr	r3, [r0, #0]
   38fbc:	685b      	ldr	r3, [r3, #4]
   38fbe:	4798      	blx	r3
   38fc0:	3001      	adds	r0, #1
   38fc2:	f000 818e 	beq.w	392e2 <rpc_ip_event_handler+0x492>
   38fc6:	683b      	ldr	r3, [r7, #0]
   38fc8:	2000      	movs	r0, #0
   38fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   38fce:	603b      	str	r3, [r7, #0]
   38fd0:	e7a0      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   38fd2:	6985      	ldr	r5, [r0, #24]
   38fd4:	016b      	lsls	r3, r5, #5
   38fd6:	4618      	mov	r0, r3
   38fd8:	9303      	str	r3, [sp, #12]
   38fda:	f004 f9c5 	bl	3d368 <nrf_malloc>
   38fde:	9002      	str	r0, [sp, #8]
   38fe0:	2800      	cmp	r0, #0
   38fe2:	d078      	beq.n	390d6 <rpc_ip_event_handler+0x286>
   38fe4:	00ee      	lsls	r6, r5, #3
   38fe6:	1970      	adds	r0, r6, r5
   38fe8:	0080      	lsls	r0, r0, #2
   38fea:	f004 f9bd 	bl	3d368 <nrf_malloc>
   38fee:	2800      	cmp	r0, #0
   38ff0:	d073      	beq.n	390da <rpc_ip_event_handler+0x28a>
   38ff2:	2d00      	cmp	r5, #0
   38ff4:	d074      	beq.n	390e0 <rpc_ip_event_handler+0x290>
   38ff6:	3610      	adds	r6, #16
   38ff8:	1983      	adds	r3, r0, r6
   38ffa:	9301      	str	r3, [sp, #4]
   38ffc:	9b02      	ldr	r3, [sp, #8]
   38ffe:	2204      	movs	r2, #4
   39000:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 391e8 <rpc_ip_event_handler+0x398>
   39004:	f100 0810 	add.w	r8, r0, #16
   39008:	f103 0520 	add.w	r5, r3, #32
   3900c:	e013      	b.n	39036 <rpc_ip_event_handler+0x1e6>
   3900e:	464a      	mov	r2, r9
   39010:	f00f f8ba 	bl	48188 <memcpy>
   39014:	2100      	movs	r1, #0
   39016:	f855 3c08 	ldr.w	r3, [r5, #-8]
   3901a:	f108 0808 	add.w	r8, r8, #8
   3901e:	eb09 0206 	add.w	r2, r9, r6
   39022:	f803 1009 	strb.w	r1, [r3, r9]
   39026:	9b01      	ldr	r3, [sp, #4]
   39028:	f845 5c04 	str.w	r5, [r5, #-4]
   3902c:	4598      	cmp	r8, r3
   3902e:	f105 0520 	add.w	r5, r5, #32
   39032:	f000 8090 	beq.w	39156 <rpc_ip_event_handler+0x306>
   39036:	58bb      	ldr	r3, [r7, r2]
   39038:	18b9      	adds	r1, r7, r2
   3903a:	f845 3c20 	str.w	r3, [r5, #-32]
   3903e:	684b      	ldr	r3, [r1, #4]
   39040:	f8db 0000 	ldr.w	r0, [fp]
   39044:	2b02      	cmp	r3, #2
   39046:	bf14      	ite	ne
   39048:	2602      	movne	r6, #2
   3904a:	260a      	moveq	r6, #10
   3904c:	4b62      	ldr	r3, [pc, #392]	; (391d8 <rpc_ip_event_handler+0x388>)
   3904e:	e945 6007 	strd	r6, r0, [r5, #-28]
   39052:	681b      	ldr	r3, [r3, #0]
   39054:	f102 0614 	add.w	r6, r2, #20
   39058:	f845 3c14 	str.w	r3, [r5, #-20]
   3905c:	8a08      	ldrh	r0, [r1, #16]
   3905e:	f1a8 0310 	sub.w	r3, r8, #16
   39062:	f845 0c10 	str.w	r0, [r5, #-16]
   39066:	f8b1 9012 	ldrh.w	r9, [r1, #18]
   3906a:	f845 3c0c 	str.w	r3, [r5, #-12]
   3906e:	4b5b      	ldr	r3, [pc, #364]	; (391dc <rpc_ip_event_handler+0x38c>)
   39070:	2804      	cmp	r0, #4
   39072:	eb07 0106 	add.w	r1, r7, r6
   39076:	881b      	ldrh	r3, [r3, #0]
   39078:	d01e      	beq.n	390b8 <rpc_ip_event_handler+0x268>
   3907a:	220a      	movs	r2, #10
   3907c:	f848 2c0c 	str.w	r2, [r8, #-12]
   39080:	f04f 0224 	mov.w	r2, #36	; 0x24
   39084:	f828 3c08 	strh.w	r3, [r8, #-8]
   39088:	f808 2c10 	strb.w	r2, [r8, #-16]
   3908c:	f855 2c10 	ldr.w	r2, [r5, #-16]
   39090:	4640      	mov	r0, r8
   39092:	f00f f879 	bl	48188 <memcpy>
   39096:	f855 3c10 	ldr.w	r3, [r5, #-16]
   3909a:	f109 0001 	add.w	r0, r9, #1
   3909e:	441e      	add	r6, r3
   390a0:	f004 f962 	bl	3d368 <nrf_malloc>
   390a4:	19b9      	adds	r1, r7, r6
   390a6:	eb09 0206 	add.w	r2, r9, r6
   390aa:	f845 0c08 	str.w	r0, [r5, #-8]
   390ae:	2800      	cmp	r0, #0
   390b0:	d1ad      	bne.n	3900e <rpc_ip_event_handler+0x1be>
   390b2:	f108 0808 	add.w	r8, r8, #8
   390b6:	e7b6      	b.n	39026 <rpc_ip_event_handler+0x1d6>
   390b8:	2210      	movs	r2, #16
   390ba:	2002      	movs	r0, #2
   390bc:	f828 3c08 	strh.w	r3, [r8, #-8]
   390c0:	f848 0c0c 	str.w	r0, [r8, #-12]
   390c4:	f808 2c10 	strb.w	r2, [r8, #-16]
   390c8:	f855 2c10 	ldr.w	r2, [r5, #-16]
   390cc:	f1a8 0004 	sub.w	r0, r8, #4
   390d0:	f00f f85a 	bl	48188 <memcpy>
   390d4:	e7df      	b.n	39096 <rpc_ip_event_handler+0x246>
   390d6:	f004 f951 	bl	3d37c <nrf_free>
   390da:	210c      	movs	r1, #12
   390dc:	4a3d      	ldr	r2, [pc, #244]	; (391d4 <rpc_ip_event_handler+0x384>)
   390de:	6011      	str	r1, [r2, #0]
   390e0:	9b02      	ldr	r3, [sp, #8]
   390e2:	4a3f      	ldr	r2, [pc, #252]	; (391e0 <rpc_ip_event_handler+0x390>)
   390e4:	6827      	ldr	r7, [r4, #0]
   390e6:	6013      	str	r3, [r2, #0]
   390e8:	e735      	b.n	38f56 <rpc_ip_event_handler+0x106>
   390ea:	f248 0304 	movw	r3, #32772	; 0x8004
   390ee:	429d      	cmp	r5, r3
   390f0:	f000 808f 	beq.w	39212 <rpc_ip_event_handler+0x3c2>
   390f4:	f248 0305 	movw	r3, #32773	; 0x8005
   390f8:	429d      	cmp	r5, r3
   390fa:	f47f af1d 	bne.w	38f38 <rpc_ip_event_handler+0xe8>
   390fe:	683b      	ldr	r3, [r7, #0]
   39100:	b29b      	uxth	r3, r3
   39102:	2b03      	cmp	r3, #3
   39104:	f47f af14 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   39108:	6963      	ldr	r3, [r4, #20]
   3910a:	2b00      	cmp	r3, #0
   3910c:	f000 80eb 	beq.w	392e6 <rpc_ip_event_handler+0x496>
   39110:	2b10      	cmp	r3, #16
   39112:	f200 80bd 	bhi.w	39290 <rpc_ip_event_handler+0x440>
   39116:	4a2c      	ldr	r2, [pc, #176]	; (391c8 <rpc_ip_event_handler+0x378>)
   39118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   3911c:	607b      	str	r3, [r7, #4]
   3911e:	2000      	movs	r0, #0
   39120:	e6f8      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39122:	f248 0308 	movw	r3, #32776	; 0x8008
   39126:	429d      	cmp	r5, r3
   39128:	f000 8094 	beq.w	39254 <rpc_ip_event_handler+0x404>
   3912c:	f248 0309 	movw	r3, #32777	; 0x8009
   39130:	429d      	cmp	r5, r3
   39132:	f47f af01 	bne.w	38f38 <rpc_ip_event_handler+0xe8>
   39136:	683b      	ldr	r3, [r7, #0]
   39138:	b29b      	uxth	r3, r3
   3913a:	2b0d      	cmp	r3, #13
   3913c:	f47f aef8 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   39140:	6960      	ldr	r0, [r4, #20]
   39142:	2800      	cmp	r0, #0
   39144:	f000 80d7 	beq.w	392f6 <rpc_ip_event_handler+0x4a6>
   39148:	2810      	cmp	r0, #16
   3914a:	f200 80a1 	bhi.w	39290 <rpc_ip_event_handler+0x440>
   3914e:	4b1e      	ldr	r3, [pc, #120]	; (391c8 <rpc_ip_event_handler+0x378>)
   39150:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   39154:	e7e2      	b.n	3911c <rpc_ip_event_handler+0x2cc>
   39156:	2100      	movs	r1, #0
   39158:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
   3915c:	4403      	add	r3, r0
   3915e:	f843 1c04 	str.w	r1, [r3, #-4]
   39162:	4603      	mov	r3, r0
   39164:	e7bd      	b.n	390e2 <rpc_ip_event_handler+0x292>
   39166:	683b      	ldr	r3, [r7, #0]
   39168:	2b01      	cmp	r3, #1
   3916a:	f47f aee1 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   3916e:	6960      	ldr	r0, [r4, #20]
   39170:	2800      	cmp	r0, #0
   39172:	d1e9      	bne.n	39148 <rpc_ip_event_handler+0x2f8>
   39174:	2302      	movs	r3, #2
   39176:	603b      	str	r3, [r7, #0]
   39178:	69a3      	ldr	r3, [r4, #24]
   3917a:	61bb      	str	r3, [r7, #24]
   3917c:	e6ca      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   3917e:	683b      	ldr	r3, [r7, #0]
   39180:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   39184:	603b      	str	r3, [r7, #0]
   39186:	683b      	ldr	r3, [r7, #0]
   39188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3918c:	603b      	str	r3, [r7, #0]
   3918e:	683b      	ldr	r3, [r7, #0]
   39190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   39194:	603b      	str	r3, [r7, #0]
   39196:	683b      	ldr	r3, [r7, #0]
   39198:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3919c:	603b      	str	r3, [r7, #0]
   3919e:	6923      	ldr	r3, [r4, #16]
   391a0:	2b6c      	cmp	r3, #108	; 0x6c
   391a2:	d077      	beq.n	39294 <rpc_ip_event_handler+0x444>
   391a4:	2b10      	cmp	r3, #16
   391a6:	bf8c      	ite	hi
   391a8:	232d      	movhi	r3, #45	; 0x2d
   391aa:	4a07      	ldrls	r2, [pc, #28]	; (391c8 <rpc_ip_event_handler+0x378>)
   391ac:	f04f 0000 	mov.w	r0, #0
   391b0:	bf98      	it	ls
   391b2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   391b6:	607b      	str	r3, [r7, #4]
   391b8:	60bb      	str	r3, [r7, #8]
   391ba:	e6ab      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   391bc:	683b      	ldr	r3, [r7, #0]
   391be:	b29b      	uxth	r3, r3
   391c0:	2b07      	cmp	r3, #7
   391c2:	f47f aeb5 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   391c6:	e6fe      	b.n	38fc6 <rpc_ip_event_handler+0x176>
   391c8:	0004a498 	.word	0x0004a498
   391cc:	2002d1be 	.word	0x2002d1be
   391d0:	20025d68 	.word	0x20025d68
   391d4:	20025d38 	.word	0x20025d38
   391d8:	20025d30 	.word	0x20025d30
   391dc:	2002a9c0 	.word	0x2002a9c0
   391e0:	20025d40 	.word	0x20025d40
   391e4:	20025d3c 	.word	0x20025d3c
   391e8:	20025d34 	.word	0x20025d34
   391ec:	683b      	ldr	r3, [r7, #0]
   391ee:	b29b      	uxth	r3, r3
   391f0:	2b08      	cmp	r3, #8
   391f2:	f47f ae9d 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   391f6:	6963      	ldr	r3, [r4, #20]
   391f8:	2b00      	cmp	r3, #0
   391fa:	d189      	bne.n	39110 <rpc_ip_event_handler+0x2c0>
   391fc:	4b5e      	ldr	r3, [pc, #376]	; (39378 <rpc_ip_event_handler+0x528>)
   391fe:	2001      	movs	r0, #1
   39200:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   39204:	683b      	ldr	r3, [r7, #0]
   39206:	0c1b      	lsrs	r3, r3, #16
   39208:	041b      	lsls	r3, r3, #16
   3920a:	f043 0309 	orr.w	r3, r3, #9
   3920e:	603b      	str	r3, [r7, #0]
   39210:	e680      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39212:	683b      	ldr	r3, [r7, #0]
   39214:	01db      	lsls	r3, r3, #7
   39216:	f57f ae8b 	bpl.w	38f30 <rpc_ip_event_handler+0xe0>
   3921a:	6963      	ldr	r3, [r4, #20]
   3921c:	2b00      	cmp	r3, #0
   3921e:	f47f af77 	bne.w	39110 <rpc_ip_event_handler+0x2c0>
   39222:	6823      	ldr	r3, [r4, #0]
   39224:	2b00      	cmp	r3, #0
   39226:	d071      	beq.n	3930c <rpc_ip_event_handler+0x4bc>
   39228:	2001      	movs	r0, #1
   3922a:	4b53      	ldr	r3, [pc, #332]	; (39378 <rpc_ip_event_handler+0x528>)
   3922c:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
   39230:	683b      	ldr	r3, [r7, #0]
   39232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   39236:	603b      	str	r3, [r7, #0]
   39238:	e66c      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   3923a:	683b      	ldr	r3, [r7, #0]
   3923c:	025a      	lsls	r2, r3, #9
   3923e:	f57f ae77 	bpl.w	38f30 <rpc_ip_event_handler+0xe0>
   39242:	6960      	ldr	r0, [r4, #20]
   39244:	2800      	cmp	r0, #0
   39246:	f47f af7f 	bne.w	39148 <rpc_ip_event_handler+0x2f8>
   3924a:	683b      	ldr	r3, [r7, #0]
   3924c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   39250:	603b      	str	r3, [r7, #0]
   39252:	e65f      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39254:	683b      	ldr	r3, [r7, #0]
   39256:	b29b      	uxth	r3, r3
   39258:	2b06      	cmp	r3, #6
   3925a:	f47f ae69 	bne.w	38f30 <rpc_ip_event_handler+0xe0>
   3925e:	6960      	ldr	r0, [r4, #20]
   39260:	2800      	cmp	r0, #0
   39262:	f47f af71 	bne.w	39148 <rpc_ip_event_handler+0x2f8>
   39266:	683b      	ldr	r3, [r7, #0]
   39268:	0c1b      	lsrs	r3, r3, #16
   3926a:	041b      	lsls	r3, r3, #16
   3926c:	f043 0307 	orr.w	r3, r3, #7
   39270:	603b      	str	r3, [r7, #0]
   39272:	e64f      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39274:	683b      	ldr	r3, [r7, #0]
   39276:	0299      	lsls	r1, r3, #10
   39278:	f57f ae5a 	bpl.w	38f30 <rpc_ip_event_handler+0xe0>
   3927c:	6963      	ldr	r3, [r4, #20]
   3927e:	b33b      	cbz	r3, 392d0 <rpc_ip_event_handler+0x480>
   39280:	2b6b      	cmp	r3, #107	; 0x6b
   39282:	f47f ae2b 	bne.w	38edc <rpc_ip_event_handler+0x8c>
   39286:	693b      	ldr	r3, [r7, #16]
   39288:	2b01      	cmp	r3, #1
   3928a:	d041      	beq.n	39310 <rpc_ip_event_handler+0x4c0>
   3928c:	230c      	movs	r3, #12
   3928e:	e62b      	b.n	38ee8 <rpc_ip_event_handler+0x98>
   39290:	232d      	movs	r3, #45	; 0x2d
   39292:	e743      	b.n	3911c <rpc_ip_event_handler+0x2cc>
   39294:	2239      	movs	r2, #57	; 0x39
   39296:	683b      	ldr	r3, [r7, #0]
   39298:	2000      	movs	r0, #0
   3929a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   3929e:	603b      	str	r3, [r7, #0]
   392a0:	607a      	str	r2, [r7, #4]
   392a2:	60ba      	str	r2, [r7, #8]
   392a4:	e636      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392a6:	6820      	ldr	r0, [r4, #0]
   392a8:	f7fe fada 	bl	37860 <rpc_ip_client_data_free>
   392ac:	4628      	mov	r0, r5
   392ae:	e631      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392b0:	683b      	ldr	r3, [r7, #0]
   392b2:	2000      	movs	r0, #0
   392b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   392b8:	603b      	str	r3, [r7, #0]
   392ba:	683b      	ldr	r3, [r7, #0]
   392bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   392c0:	603b      	str	r3, [r7, #0]
   392c2:	683b      	ldr	r3, [r7, #0]
   392c4:	0c1b      	lsrs	r3, r3, #16
   392c6:	041b      	lsls	r3, r3, #16
   392c8:	f043 0305 	orr.w	r3, r3, #5
   392cc:	603b      	str	r3, [r7, #0]
   392ce:	e621      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392d0:	683b      	ldr	r3, [r7, #0]
   392d2:	4a29      	ldr	r2, [pc, #164]	; (39378 <rpc_ip_event_handler+0x528>)
   392d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   392d8:	603b      	str	r3, [r7, #0]
   392da:	2001      	movs	r0, #1
   392dc:	f842 4026 	str.w	r4, [r2, r6, lsl #2]
   392e0:	e618      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392e2:	2002      	movs	r0, #2
   392e4:	e616      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392e6:	683b      	ldr	r3, [r7, #0]
   392e8:	2000      	movs	r0, #0
   392ea:	0c1b      	lsrs	r3, r3, #16
   392ec:	041b      	lsls	r3, r3, #16
   392ee:	f043 0304 	orr.w	r3, r3, #4
   392f2:	603b      	str	r3, [r7, #0]
   392f4:	e60e      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   392f6:	683b      	ldr	r3, [r7, #0]
   392f8:	0c1b      	lsrs	r3, r3, #16
   392fa:	041b      	lsls	r3, r3, #16
   392fc:	f043 030e 	orr.w	r3, r3, #14
   39300:	603b      	str	r3, [r7, #0]
   39302:	e607      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39304:	8a65      	ldrh	r5, [r4, #18]
   39306:	b95d      	cbnz	r5, 39320 <rpc_ip_event_handler+0x4d0>
   39308:	462e      	mov	r6, r5
   3930a:	e64e      	b.n	38faa <rpc_ip_event_handler+0x15a>
   3930c:	2000      	movs	r0, #0
   3930e:	e78f      	b.n	39230 <rpc_ip_event_handler+0x3e0>
   39310:	220c      	movs	r2, #12
   39312:	683b      	ldr	r3, [r7, #0]
   39314:	2000      	movs	r0, #0
   39316:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   3931a:	603b      	str	r3, [r7, #0]
   3931c:	607a      	str	r2, [r7, #4]
   3931e:	e5f9      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39320:	2024      	movs	r0, #36	; 0x24
   39322:	f004 f821 	bl	3d368 <nrf_malloc>
   39326:	4606      	mov	r6, r0
   39328:	2800      	cmp	r0, #0
   3932a:	d0da      	beq.n	392e2 <rpc_ip_event_handler+0x492>
   3932c:	8a62      	ldrh	r2, [r4, #18]
   3932e:	2a10      	cmp	r2, #16
   39330:	d009      	beq.n	39346 <rpc_ip_event_handler+0x4f6>
   39332:	2a04      	cmp	r2, #4
   39334:	d013      	beq.n	3935e <rpc_ip_event_handler+0x50e>
   39336:	6820      	ldr	r0, [r4, #0]
   39338:	f7fe fa92 	bl	37860 <rpc_ip_client_data_free>
   3933c:	4630      	mov	r0, r6
   3933e:	f004 f81d 	bl	3d37c <nrf_free>
   39342:	2000      	movs	r0, #0
   39344:	e5e6      	b.n	38f14 <rpc_ip_event_handler+0xc4>
   39346:	230a      	movs	r3, #10
   39348:	2524      	movs	r5, #36	; 0x24
   3934a:	6043      	str	r3, [r0, #4]
   3934c:	7005      	strb	r5, [r0, #0]
   3934e:	8a23      	ldrh	r3, [r4, #16]
   39350:	f104 0114 	add.w	r1, r4, #20
   39354:	8103      	strh	r3, [r0, #8]
   39356:	3010      	adds	r0, #16
   39358:	f00e ff16 	bl	48188 <memcpy>
   3935c:	e625      	b.n	38faa <rpc_ip_event_handler+0x15a>
   3935e:	2302      	movs	r3, #2
   39360:	2510      	movs	r5, #16
   39362:	6043      	str	r3, [r0, #4]
   39364:	7005      	strb	r5, [r0, #0]
   39366:	8a23      	ldrh	r3, [r4, #16]
   39368:	f104 0114 	add.w	r1, r4, #20
   3936c:	8103      	strh	r3, [r0, #8]
   3936e:	300c      	adds	r0, #12
   39370:	f00e ff0a 	bl	48188 <memcpy>
   39374:	e619      	b.n	38faa <rpc_ip_event_handler+0x15a>
   39376:	bf00      	nop
   39378:	20025d44 	.word	0x20025d44

0003937c <rpc_handle_ctrl_message>:
   3937c:	2902      	cmp	r1, #2
   3937e:	b510      	push	{r4, lr}
   39380:	4604      	mov	r4, r0
   39382:	d00c      	beq.n	3939e <rpc_handle_ctrl_message+0x22>
   39384:	2904      	cmp	r1, #4
   39386:	d008      	beq.n	3939a <rpc_handle_ctrl_message+0x1e>
   39388:	2901      	cmp	r1, #1
   3938a:	d006      	beq.n	3939a <rpc_handle_ctrl_message+0x1e>
   3938c:	6880      	ldr	r0, [r0, #8]
   3938e:	b108      	cbz	r0, 39394 <rpc_handle_ctrl_message+0x18>
   39390:	f7fc fcda 	bl	35d48 <rpc_transport_data_free>
   39394:	4620      	mov	r0, r4
   39396:	f7fc fcd5 	bl	35d44 <rpc_transport_rpc_free>
   3939a:	2000      	movs	r0, #0
   3939c:	bd10      	pop	{r4, pc}
   3939e:	6880      	ldr	r0, [r0, #8]
   393a0:	2800      	cmp	r0, #0
   393a2:	d0fa      	beq.n	3939a <rpc_handle_ctrl_message+0x1e>
   393a4:	f7fc fcd0 	bl	35d48 <rpc_transport_data_free>
   393a8:	2000      	movs	r0, #0
   393aa:	bd10      	pop	{r4, pc}

000393ac <rpc_handle_data_message>:
   393ac:	4b23      	ldr	r3, [pc, #140]	; (3943c <rpc_handle_data_message+0x90>)
   393ae:	6802      	ldr	r2, [r0, #0]
   393b0:	8819      	ldrh	r1, [r3, #0]
   393b2:	b292      	uxth	r2, r2
   393b4:	4291      	cmp	r1, r2
   393b6:	d027      	beq.n	39408 <rpc_handle_data_message+0x5c>
   393b8:	8a19      	ldrh	r1, [r3, #16]
   393ba:	4291      	cmp	r1, r2
   393bc:	d02a      	beq.n	39414 <rpc_handle_data_message+0x68>
   393be:	8c19      	ldrh	r1, [r3, #32]
   393c0:	4291      	cmp	r1, r2
   393c2:	d02b      	beq.n	3941c <rpc_handle_data_message+0x70>
   393c4:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   393c6:	4291      	cmp	r1, r2
   393c8:	d02a      	beq.n	39420 <rpc_handle_data_message+0x74>
   393ca:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
   393ce:	4291      	cmp	r1, r2
   393d0:	d028      	beq.n	39424 <rpc_handle_data_message+0x78>
   393d2:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
   393d6:	4291      	cmp	r1, r2
   393d8:	d026      	beq.n	39428 <rpc_handle_data_message+0x7c>
   393da:	f8b3 1060 	ldrh.w	r1, [r3, #96]	; 0x60
   393de:	4291      	cmp	r1, r2
   393e0:	d026      	beq.n	39430 <rpc_handle_data_message+0x84>
   393e2:	f8b3 1070 	ldrh.w	r1, [r3, #112]	; 0x70
   393e6:	4291      	cmp	r1, r2
   393e8:	d024      	beq.n	39434 <rpc_handle_data_message+0x88>
   393ea:	f8b3 1080 	ldrh.w	r1, [r3, #128]	; 0x80
   393ee:	4291      	cmp	r1, r2
   393f0:	d01c      	beq.n	3942c <rpc_handle_data_message+0x80>
   393f2:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
   393f6:	4291      	cmp	r1, r2
   393f8:	d01e      	beq.n	39438 <rpc_handle_data_message+0x8c>
   393fa:	6880      	ldr	r0, [r0, #8]
   393fc:	b160      	cbz	r0, 39418 <rpc_handle_data_message+0x6c>
   393fe:	b510      	push	{r4, lr}
   39400:	f7fc fca2 	bl	35d48 <rpc_transport_data_free>
   39404:	2000      	movs	r0, #0
   39406:	bd10      	pop	{r4, pc}
   39408:	2200      	movs	r2, #0
   3940a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   3940e:	685a      	ldr	r2, [r3, #4]
   39410:	68d9      	ldr	r1, [r3, #12]
   39412:	4710      	bx	r2
   39414:	2201      	movs	r2, #1
   39416:	e7f8      	b.n	3940a <rpc_handle_data_message+0x5e>
   39418:	2000      	movs	r0, #0
   3941a:	4770      	bx	lr
   3941c:	2202      	movs	r2, #2
   3941e:	e7f4      	b.n	3940a <rpc_handle_data_message+0x5e>
   39420:	2203      	movs	r2, #3
   39422:	e7f2      	b.n	3940a <rpc_handle_data_message+0x5e>
   39424:	2204      	movs	r2, #4
   39426:	e7f0      	b.n	3940a <rpc_handle_data_message+0x5e>
   39428:	2205      	movs	r2, #5
   3942a:	e7ee      	b.n	3940a <rpc_handle_data_message+0x5e>
   3942c:	2208      	movs	r2, #8
   3942e:	e7ec      	b.n	3940a <rpc_handle_data_message+0x5e>
   39430:	2206      	movs	r2, #6
   39432:	e7ea      	b.n	3940a <rpc_handle_data_message+0x5e>
   39434:	2207      	movs	r2, #7
   39436:	e7e8      	b.n	3940a <rpc_handle_data_message+0x5e>
   39438:	2209      	movs	r2, #9
   3943a:	e7e6      	b.n	3940a <rpc_handle_data_message+0x5e>
   3943c:	20025d6c 	.word	0x20025d6c

00039440 <rpc_framework_init>:
   39440:	b508      	push	{r3, lr}
   39442:	22a0      	movs	r2, #160	; 0xa0
   39444:	2100      	movs	r1, #0
   39446:	4802      	ldr	r0, [pc, #8]	; (39450 <rpc_framework_init+0x10>)
   39448:	f00e febe 	bl	481c8 <memset>
   3944c:	2000      	movs	r0, #0
   3944e:	bd08      	pop	{r3, pc}
   39450:	20025d6c 	.word	0x20025d6c

00039454 <rpc_client_register>:
   39454:	8803      	ldrh	r3, [r0, #0]
   39456:	2b00      	cmp	r3, #0
   39458:	d045      	beq.n	394e6 <rpc_client_register+0x92>
   3945a:	6842      	ldr	r2, [r0, #4]
   3945c:	4601      	mov	r1, r0
   3945e:	2a00      	cmp	r2, #0
   39460:	d050      	beq.n	39504 <rpc_client_register+0xb0>
   39462:	4a30      	ldr	r2, [pc, #192]	; (39524 <rpc_client_register+0xd0>)
   39464:	8810      	ldrh	r0, [r2, #0]
   39466:	4283      	cmp	r3, r0
   39468:	d03d      	beq.n	394e6 <rpc_client_register+0x92>
   3946a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3946e:	8a14      	ldrh	r4, [r2, #16]
   39470:	42a3      	cmp	r3, r4
   39472:	d035      	beq.n	394e0 <rpc_client_register+0x8c>
   39474:	8c15      	ldrh	r5, [r2, #32]
   39476:	42ab      	cmp	r3, r5
   39478:	d032      	beq.n	394e0 <rpc_client_register+0x8c>
   3947a:	8e16      	ldrh	r6, [r2, #48]	; 0x30
   3947c:	42b3      	cmp	r3, r6
   3947e:	d02f      	beq.n	394e0 <rpc_client_register+0x8c>
   39480:	f8b2 7040 	ldrh.w	r7, [r2, #64]	; 0x40
   39484:	42bb      	cmp	r3, r7
   39486:	d02b      	beq.n	394e0 <rpc_client_register+0x8c>
   39488:	f8b2 c050 	ldrh.w	ip, [r2, #80]	; 0x50
   3948c:	4563      	cmp	r3, ip
   3948e:	d027      	beq.n	394e0 <rpc_client_register+0x8c>
   39490:	f8b2 e060 	ldrh.w	lr, [r2, #96]	; 0x60
   39494:	4573      	cmp	r3, lr
   39496:	d023      	beq.n	394e0 <rpc_client_register+0x8c>
   39498:	f8b2 8070 	ldrh.w	r8, [r2, #112]	; 0x70
   3949c:	4543      	cmp	r3, r8
   3949e:	d01f      	beq.n	394e0 <rpc_client_register+0x8c>
   394a0:	f8b2 9080 	ldrh.w	r9, [r2, #128]	; 0x80
   394a4:	454b      	cmp	r3, r9
   394a6:	d01b      	beq.n	394e0 <rpc_client_register+0x8c>
   394a8:	f8b2 a090 	ldrh.w	sl, [r2, #144]	; 0x90
   394ac:	4553      	cmp	r3, sl
   394ae:	d017      	beq.n	394e0 <rpc_client_register+0x8c>
   394b0:	b1e0      	cbz	r0, 394ec <rpc_client_register+0x98>
   394b2:	b35c      	cbz	r4, 3950c <rpc_client_register+0xb8>
   394b4:	b365      	cbz	r5, 39510 <rpc_client_register+0xbc>
   394b6:	b36e      	cbz	r6, 39514 <rpc_client_register+0xc0>
   394b8:	b377      	cbz	r7, 39518 <rpc_client_register+0xc4>
   394ba:	f1bc 0f00 	cmp.w	ip, #0
   394be:	d02d      	beq.n	3951c <rpc_client_register+0xc8>
   394c0:	f1be 0f00 	cmp.w	lr, #0
   394c4:	d020      	beq.n	39508 <rpc_client_register+0xb4>
   394c6:	f1b8 0f00 	cmp.w	r8, #0
   394ca:	d029      	beq.n	39520 <rpc_client_register+0xcc>
   394cc:	f1b9 0f00 	cmp.w	r9, #0
   394d0:	d00b      	beq.n	394ea <rpc_client_register+0x96>
   394d2:	2009      	movs	r0, #9
   394d4:	f1ba 0f00 	cmp.w	sl, #0
   394d8:	d008      	beq.n	394ec <rpc_client_register+0x98>
   394da:	2004      	movs	r0, #4
   394dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   394e0:	2007      	movs	r0, #7
   394e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   394e6:	2007      	movs	r0, #7
   394e8:	4770      	bx	lr
   394ea:	2008      	movs	r0, #8
   394ec:	0100      	lsls	r0, r0, #4
   394ee:	5213      	strh	r3, [r2, r0]
   394f0:	684b      	ldr	r3, [r1, #4]
   394f2:	4402      	add	r2, r0
   394f4:	6053      	str	r3, [r2, #4]
   394f6:	688b      	ldr	r3, [r1, #8]
   394f8:	2000      	movs	r0, #0
   394fa:	6093      	str	r3, [r2, #8]
   394fc:	68cb      	ldr	r3, [r1, #12]
   394fe:	60d3      	str	r3, [r2, #12]
   39500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   39504:	200e      	movs	r0, #14
   39506:	4770      	bx	lr
   39508:	2006      	movs	r0, #6
   3950a:	e7ef      	b.n	394ec <rpc_client_register+0x98>
   3950c:	2001      	movs	r0, #1
   3950e:	e7ed      	b.n	394ec <rpc_client_register+0x98>
   39510:	2002      	movs	r0, #2
   39512:	e7eb      	b.n	394ec <rpc_client_register+0x98>
   39514:	2003      	movs	r0, #3
   39516:	e7e9      	b.n	394ec <rpc_client_register+0x98>
   39518:	2004      	movs	r0, #4
   3951a:	e7e7      	b.n	394ec <rpc_client_register+0x98>
   3951c:	2005      	movs	r0, #5
   3951e:	e7e5      	b.n	394ec <rpc_client_register+0x98>
   39520:	2007      	movs	r0, #7
   39522:	e7e3      	b.n	394ec <rpc_client_register+0x98>
   39524:	20025d6c 	.word	0x20025d6c

00039528 <rpc_client_unregister>:
   39528:	b340      	cbz	r0, 3957c <rpc_client_unregister+0x54>
   3952a:	4b21      	ldr	r3, [pc, #132]	; (395b0 <rpc_client_unregister+0x88>)
   3952c:	881a      	ldrh	r2, [r3, #0]
   3952e:	4282      	cmp	r2, r0
   39530:	d02e      	beq.n	39590 <rpc_client_unregister+0x68>
   39532:	8a1a      	ldrh	r2, [r3, #16]
   39534:	4282      	cmp	r2, r0
   39536:	d02f      	beq.n	39598 <rpc_client_unregister+0x70>
   39538:	8c1a      	ldrh	r2, [r3, #32]
   3953a:	4282      	cmp	r2, r0
   3953c:	d02e      	beq.n	3959c <rpc_client_unregister+0x74>
   3953e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
   39540:	4282      	cmp	r2, r0
   39542:	d02d      	beq.n	395a0 <rpc_client_unregister+0x78>
   39544:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   39548:	4282      	cmp	r2, r0
   3954a:	d023      	beq.n	39594 <rpc_client_unregister+0x6c>
   3954c:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
   39550:	4282      	cmp	r2, r0
   39552:	d027      	beq.n	395a4 <rpc_client_unregister+0x7c>
   39554:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
   39558:	4282      	cmp	r2, r0
   3955a:	d025      	beq.n	395a8 <rpc_client_unregister+0x80>
   3955c:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
   39560:	4282      	cmp	r2, r0
   39562:	d023      	beq.n	395ac <rpc_client_unregister+0x84>
   39564:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
   39568:	4282      	cmp	r2, r0
   3956a:	d009      	beq.n	39580 <rpc_client_unregister+0x58>
   3956c:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
   39570:	4282      	cmp	r2, r0
   39572:	bf08      	it	eq
   39574:	2209      	moveq	r2, #9
   39576:	d004      	beq.n	39582 <rpc_client_unregister+0x5a>
   39578:	2005      	movs	r0, #5
   3957a:	4770      	bx	lr
   3957c:	2007      	movs	r0, #7
   3957e:	4770      	bx	lr
   39580:	2208      	movs	r2, #8
   39582:	2000      	movs	r0, #0
   39584:	0112      	lsls	r2, r2, #4
   39586:	1899      	adds	r1, r3, r2
   39588:	5298      	strh	r0, [r3, r2]
   3958a:	6048      	str	r0, [r1, #4]
   3958c:	60c8      	str	r0, [r1, #12]
   3958e:	4770      	bx	lr
   39590:	2200      	movs	r2, #0
   39592:	e7f6      	b.n	39582 <rpc_client_unregister+0x5a>
   39594:	2204      	movs	r2, #4
   39596:	e7f4      	b.n	39582 <rpc_client_unregister+0x5a>
   39598:	2201      	movs	r2, #1
   3959a:	e7f2      	b.n	39582 <rpc_client_unregister+0x5a>
   3959c:	2202      	movs	r2, #2
   3959e:	e7f0      	b.n	39582 <rpc_client_unregister+0x5a>
   395a0:	2203      	movs	r2, #3
   395a2:	e7ee      	b.n	39582 <rpc_client_unregister+0x5a>
   395a4:	2205      	movs	r2, #5
   395a6:	e7ec      	b.n	39582 <rpc_client_unregister+0x5a>
   395a8:	2206      	movs	r2, #6
   395aa:	e7ea      	b.n	39582 <rpc_client_unregister+0x5a>
   395ac:	2207      	movs	r2, #7
   395ae:	e7e8      	b.n	39582 <rpc_client_unregister+0x5a>
   395b0:	20025d6c 	.word	0x20025d6c

000395b4 <rpc_message_send>:
   395b4:	b150      	cbz	r0, 395cc <rpc_message_send+0x18>
   395b6:	b159      	cbz	r1, 395d0 <rpc_message_send+0x1c>
   395b8:	684b      	ldr	r3, [r1, #4]
   395ba:	8008      	strh	r0, [r1, #0]
   395bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   395c0:	f043 0302 	orr.w	r3, r3, #2
   395c4:	604b      	str	r3, [r1, #4]
   395c6:	4608      	mov	r0, r1
   395c8:	f7fc bbb6 	b.w	35d38 <rpc_transport_send>
   395cc:	2007      	movs	r0, #7
   395ce:	4770      	bx	lr
   395d0:	200e      	movs	r0, #14
   395d2:	4770      	bx	lr

000395d4 <rpc_message_alloc>:
   395d4:	b342      	cbz	r2, 39628 <rpc_message_alloc+0x54>
   395d6:	b328      	cbz	r0, 39624 <rpc_message_alloc+0x50>
   395d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   395da:	2300      	movs	r3, #0
   395dc:	4616      	mov	r6, r2
   395de:	460c      	mov	r4, r1
   395e0:	4605      	mov	r5, r0
   395e2:	6013      	str	r3, [r2, #0]
   395e4:	b171      	cbz	r1, 39604 <rpc_message_alloc+0x30>
   395e6:	4608      	mov	r0, r1
   395e8:	f7fc fbaa 	bl	35d40 <rpc_transport_data_alloc>
   395ec:	4607      	mov	r7, r0
   395ee:	b1b8      	cbz	r0, 39620 <rpc_message_alloc+0x4c>
   395f0:	f7fc fba4 	bl	35d3c <rpc_transport_rpc_alloc>
   395f4:	4603      	mov	r3, r0
   395f6:	b180      	cbz	r0, 3961a <rpc_message_alloc+0x46>
   395f8:	2000      	movs	r0, #0
   395fa:	60dc      	str	r4, [r3, #12]
   395fc:	609f      	str	r7, [r3, #8]
   395fe:	801d      	strh	r5, [r3, #0]
   39600:	6033      	str	r3, [r6, #0]
   39602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39604:	f7fc fb9a 	bl	35d3c <rpc_transport_rpc_alloc>
   39608:	4603      	mov	r3, r0
   3960a:	b148      	cbz	r0, 39620 <rpc_message_alloc+0x4c>
   3960c:	4627      	mov	r7, r4
   3960e:	60dc      	str	r4, [r3, #12]
   39610:	609f      	str	r7, [r3, #8]
   39612:	801d      	strh	r5, [r3, #0]
   39614:	2000      	movs	r0, #0
   39616:	6033      	str	r3, [r6, #0]
   39618:	e7f3      	b.n	39602 <rpc_message_alloc+0x2e>
   3961a:	4638      	mov	r0, r7
   3961c:	f7fc fb94 	bl	35d48 <rpc_transport_data_free>
   39620:	2004      	movs	r0, #4
   39622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   39624:	2007      	movs	r0, #7
   39626:	4770      	bx	lr
   39628:	200e      	movs	r0, #14
   3962a:	4770      	bx	lr

0003962c <rpc_message_free>:
   3962c:	b130      	cbz	r0, 3963c <rpc_message_free+0x10>
   3962e:	b139      	cbz	r1, 39640 <rpc_message_free+0x14>
   39630:	b508      	push	{r3, lr}
   39632:	4608      	mov	r0, r1
   39634:	f7fc fb86 	bl	35d44 <rpc_transport_rpc_free>
   39638:	2000      	movs	r0, #0
   3963a:	bd08      	pop	{r3, pc}
   3963c:	2007      	movs	r0, #7
   3963e:	4770      	bx	lr
   39640:	200e      	movs	r0, #14
   39642:	4770      	bx	lr

00039644 <rpc_message_data_free>:
   39644:	b130      	cbz	r0, 39654 <rpc_message_data_free+0x10>
   39646:	b139      	cbz	r1, 39658 <rpc_message_data_free+0x14>
   39648:	b508      	push	{r3, lr}
   3964a:	4608      	mov	r0, r1
   3964c:	f7fc fb7c 	bl	35d48 <rpc_transport_data_free>
   39650:	2000      	movs	r0, #0
   39652:	bd08      	pop	{r3, pc}
   39654:	2007      	movs	r0, #7
   39656:	4770      	bx	lr
   39658:	200e      	movs	r0, #14
   3965a:	4770      	bx	lr

0003965c <packet_free_cb>:
   3965c:	b510      	push	{r4, lr}
   3965e:	4604      	mov	r4, r0
   39660:	b118      	cbz	r0, 3966a <packet_free_cb+0xe>
   39662:	6800      	ldr	r0, [r0, #0]
   39664:	b108      	cbz	r0, 3966a <packet_free_cb+0xe>
   39666:	f003 f89b 	bl	3c7a0 <rpc_gnss_client_data_free>
   3966a:	68a0      	ldr	r0, [r4, #8]
   3966c:	b118      	cbz	r0, 39676 <packet_free_cb+0x1a>
   3966e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   39672:	f003 be83 	b.w	3d37c <nrf_free>
   39676:	bd10      	pop	{r4, pc}

00039678 <rpc_gnss_event_handler>:
   39678:	b5f0      	push	{r4, r5, r6, r7, lr}
   3967a:	4b64      	ldr	r3, [pc, #400]	; (3980c <rpc_gnss_event_handler+0x194>)
   3967c:	4606      	mov	r6, r0
   3967e:	6800      	ldr	r0, [r0, #0]
   39680:	881b      	ldrh	r3, [r3, #0]
   39682:	6802      	ldr	r2, [r0, #0]
   39684:	b085      	sub	sp, #20
   39686:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   3968a:	460d      	mov	r5, r1
   3968c:	d037      	beq.n	396fe <rpc_gnss_event_handler+0x86>
   3968e:	f505 433f 	add.w	r3, r5, #48896	; 0xbf00
   39692:	33ff      	adds	r3, #255	; 0xff
   39694:	b29b      	uxth	r3, r3
   39696:	2b02      	cmp	r3, #2
   39698:	d811      	bhi.n	396be <rpc_gnss_event_handler+0x46>
   3969a:	4c5d      	ldr	r4, [pc, #372]	; (39810 <rpc_gnss_event_handler+0x198>)
   3969c:	6823      	ldr	r3, [r4, #0]
   3969e:	075a      	lsls	r2, r3, #29
   396a0:	d410      	bmi.n	396c4 <rpc_gnss_event_handler+0x4c>
   396a2:	6823      	ldr	r3, [r4, #0]
   396a4:	079b      	lsls	r3, r3, #30
   396a6:	d503      	bpl.n	396b0 <rpc_gnss_event_handler+0x38>
   396a8:	f244 0303 	movw	r3, #16387	; 0x4003
   396ac:	429d      	cmp	r5, r3
   396ae:	d009      	beq.n	396c4 <rpc_gnss_event_handler+0x4c>
   396b0:	6830      	ldr	r0, [r6, #0]
   396b2:	b120      	cbz	r0, 396be <rpc_gnss_event_handler+0x46>
   396b4:	f003 f874 	bl	3c7a0 <rpc_gnss_client_data_free>
   396b8:	2200      	movs	r2, #0
   396ba:	4b56      	ldr	r3, [pc, #344]	; (39814 <rpc_gnss_event_handler+0x19c>)
   396bc:	601a      	str	r2, [r3, #0]
   396be:	2000      	movs	r0, #0
   396c0:	b005      	add	sp, #20
   396c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   396c4:	2002      	movs	r0, #2
   396c6:	f003 fe4f 	bl	3d368 <nrf_malloc>
   396ca:	4607      	mov	r7, r0
   396cc:	2800      	cmp	r0, #0
   396ce:	f000 8094 	beq.w	397fa <rpc_gnss_event_handler+0x182>
   396d2:	2302      	movs	r3, #2
   396d4:	8005      	strh	r5, [r0, #0]
   396d6:	6831      	ldr	r1, [r6, #0]
   396d8:	6872      	ldr	r2, [r6, #4]
   396da:	484f      	ldr	r0, [pc, #316]	; (39818 <rpc_gnss_event_handler+0x1a0>)
   396dc:	e88d 0086 	stmia.w	sp, {r1, r2, r7}
   396e0:	6800      	ldr	r0, [r0, #0]
   396e2:	9303      	str	r3, [sp, #12]
   396e4:	6803      	ldr	r3, [r0, #0]
   396e6:	4669      	mov	r1, sp
   396e8:	685b      	ldr	r3, [r3, #4]
   396ea:	4798      	blx	r3
   396ec:	3001      	adds	r0, #1
   396ee:	d071      	beq.n	397d4 <rpc_gnss_event_handler+0x15c>
   396f0:	2000      	movs	r0, #0
   396f2:	6823      	ldr	r3, [r4, #0]
   396f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   396f8:	6023      	str	r3, [r4, #0]
   396fa:	b005      	add	sp, #20
   396fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   396fe:	4c44      	ldr	r4, [pc, #272]	; (39810 <rpc_gnss_event_handler+0x198>)
   39700:	4f44      	ldr	r7, [pc, #272]	; (39814 <rpc_gnss_event_handler+0x19c>)
   39702:	6823      	ldr	r3, [r4, #0]
   39704:	6038      	str	r0, [r7, #0]
   39706:	01d9      	lsls	r1, r3, #7
   39708:	d523      	bpl.n	39752 <rpc_gnss_event_handler+0xda>
   3970a:	f242 1302 	movw	r3, #8450	; 0x2102
   3970e:	429d      	cmp	r5, r3
   39710:	d11f      	bne.n	39752 <rpc_gnss_event_handler+0xda>
   39712:	6843      	ldr	r3, [r0, #4]
   39714:	b91b      	cbnz	r3, 3971e <rpc_gnss_event_handler+0xa6>
   39716:	6823      	ldr	r3, [r4, #0]
   39718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   3971c:	6023      	str	r3, [r4, #0]
   3971e:	6823      	ldr	r3, [r4, #0]
   39720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   39724:	6023      	str	r3, [r4, #0]
   39726:	6823      	ldr	r3, [r4, #0]
   39728:	025a      	lsls	r2, r3, #9
   3972a:	d430      	bmi.n	3978e <rpc_gnss_event_handler+0x116>
   3972c:	f242 0305 	movw	r3, #8197	; 0x2005
   39730:	429d      	cmp	r5, r3
   39732:	d12c      	bne.n	3978e <rpc_gnss_event_handler+0x116>
   39734:	6823      	ldr	r3, [r4, #0]
   39736:	0299      	lsls	r1, r3, #10
   39738:	d529      	bpl.n	3978e <rpc_gnss_event_handler+0x116>
   3973a:	6843      	ldr	r3, [r0, #4]
   3973c:	2b00      	cmp	r3, #0
   3973e:	d157      	bne.n	397f0 <rpc_gnss_event_handler+0x178>
   39740:	6823      	ldr	r3, [r4, #0]
   39742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   39746:	6023      	str	r3, [r4, #0]
   39748:	6823      	ldr	r3, [r4, #0]
   3974a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3974e:	6023      	str	r3, [r4, #0]
   39750:	e01d      	b.n	3978e <rpc_gnss_event_handler+0x116>
   39752:	6823      	ldr	r3, [r4, #0]
   39754:	025b      	lsls	r3, r3, #9
   39756:	d50e      	bpl.n	39776 <rpc_gnss_event_handler+0xfe>
   39758:	f242 1303 	movw	r3, #8451	; 0x2103
   3975c:	429d      	cmp	r5, r3
   3975e:	d10a      	bne.n	39776 <rpc_gnss_event_handler+0xfe>
   39760:	6843      	ldr	r3, [r0, #4]
   39762:	b91b      	cbnz	r3, 3976c <rpc_gnss_event_handler+0xf4>
   39764:	6823      	ldr	r3, [r4, #0]
   39766:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3976a:	6023      	str	r3, [r4, #0]
   3976c:	6823      	ldr	r3, [r4, #0]
   3976e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   39772:	6023      	str	r3, [r4, #0]
   39774:	e00b      	b.n	3978e <rpc_gnss_event_handler+0x116>
   39776:	f242 0301 	movw	r3, #8193	; 0x2001
   3977a:	429d      	cmp	r5, r3
   3977c:	d10c      	bne.n	39798 <rpc_gnss_event_handler+0x120>
   3977e:	6843      	ldr	r3, [r0, #4]
   39780:	b92b      	cbnz	r3, 3978e <rpc_gnss_event_handler+0x116>
   39782:	6823      	ldr	r3, [r4, #0]
   39784:	0c1b      	lsrs	r3, r3, #16
   39786:	041b      	lsls	r3, r3, #16
   39788:	f043 0302 	orr.w	r3, r3, #2
   3978c:	6023      	str	r3, [r4, #0]
   3978e:	f003 f807 	bl	3c7a0 <rpc_gnss_client_data_free>
   39792:	2300      	movs	r3, #0
   39794:	603b      	str	r3, [r7, #0]
   39796:	e77a      	b.n	3968e <rpc_gnss_event_handler+0x16>
   39798:	f242 0304 	movw	r3, #8196	; 0x2004
   3979c:	429d      	cmp	r5, r3
   3979e:	d1c5      	bne.n	3972c <rpc_gnss_event_handler+0xb4>
   397a0:	6843      	ldr	r3, [r0, #4]
   397a2:	b993      	cbnz	r3, 397ca <rpc_gnss_event_handler+0x152>
   397a4:	6823      	ldr	r3, [r4, #0]
   397a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   397aa:	6023      	str	r3, [r4, #0]
   397ac:	6823      	ldr	r3, [r4, #0]
   397ae:	b29b      	uxth	r3, r3
   397b0:	2b03      	cmp	r3, #3
   397b2:	6823      	ldr	r3, [r4, #0]
   397b4:	d016      	beq.n	397e4 <rpc_gnss_event_handler+0x16c>
   397b6:	b29b      	uxth	r3, r3
   397b8:	2b04      	cmp	r3, #4
   397ba:	d1d7      	bne.n	3976c <rpc_gnss_event_handler+0xf4>
   397bc:	6823      	ldr	r3, [r4, #0]
   397be:	0c1b      	lsrs	r3, r3, #16
   397c0:	041b      	lsls	r3, r3, #16
   397c2:	f043 0302 	orr.w	r3, r3, #2
   397c6:	6023      	str	r3, [r4, #0]
   397c8:	e7d0      	b.n	3976c <rpc_gnss_event_handler+0xf4>
   397ca:	6823      	ldr	r3, [r4, #0]
   397cc:	b29b      	uxth	r3, r3
   397ce:	2b03      	cmp	r3, #3
   397d0:	d1cc      	bne.n	3976c <rpc_gnss_event_handler+0xf4>
   397d2:	e7f3      	b.n	397bc <rpc_gnss_event_handler+0x144>
   397d4:	4638      	mov	r0, r7
   397d6:	f003 fdd1 	bl	3d37c <nrf_free>
   397da:	6830      	ldr	r0, [r6, #0]
   397dc:	2800      	cmp	r0, #0
   397de:	f47f af69 	bne.w	396b4 <rpc_gnss_event_handler+0x3c>
   397e2:	e76c      	b.n	396be <rpc_gnss_event_handler+0x46>
   397e4:	0c1b      	lsrs	r3, r3, #16
   397e6:	041b      	lsls	r3, r3, #16
   397e8:	f043 0304 	orr.w	r3, r3, #4
   397ec:	6023      	str	r3, [r4, #0]
   397ee:	e7bd      	b.n	3976c <rpc_gnss_event_handler+0xf4>
   397f0:	6823      	ldr	r3, [r4, #0]
   397f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   397f6:	6023      	str	r3, [r4, #0]
   397f8:	e7c9      	b.n	3978e <rpc_gnss_event_handler+0x116>
   397fa:	6830      	ldr	r0, [r6, #0]
   397fc:	2800      	cmp	r0, #0
   397fe:	f43f af5e 	beq.w	396be <rpc_gnss_event_handler+0x46>
   39802:	f002 ffcd 	bl	3c7a0 <rpc_gnss_client_data_free>
   39806:	4b03      	ldr	r3, [pc, #12]	; (39814 <rpc_gnss_event_handler+0x19c>)
   39808:	601f      	str	r7, [r3, #0]
   3980a:	e758      	b.n	396be <rpc_gnss_event_handler+0x46>
   3980c:	2002a9c2 	.word	0x2002a9c2
   39810:	20025e0c 	.word	0x20025e0c
   39814:	20025e10 	.word	0x20025e10
   39818:	20025e14 	.word	0x20025e14

0003981c <gnss_interface_write>:
   3981c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39820:	4a74      	ldr	r2, [pc, #464]	; (399f4 <gnss_interface_write+0x1d8>)
   39822:	b09f      	sub	sp, #124	; 0x7c
   39824:	4290      	cmp	r0, r2
   39826:	9d26      	ldr	r5, [sp, #152]	; 0x98
   39828:	f040 80d7 	bne.w	399da <gnss_interface_write+0x1be>
   3982c:	2900      	cmp	r1, #0
   3982e:	f000 80c6 	beq.w	399be <gnss_interface_write+0x1a2>
   39832:	2d00      	cmp	r5, #0
   39834:	f000 80c3 	beq.w	399be <gnss_interface_write+0x1a2>
   39838:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   3983a:	2a02      	cmp	r2, #2
   3983c:	f040 80bf 	bne.w	399be <gnss_interface_write+0x1a2>
   39840:	4c6d      	ldr	r4, [pc, #436]	; (399f8 <gnss_interface_write+0x1dc>)
   39842:	6822      	ldr	r2, [r4, #0]
   39844:	b292      	uxth	r2, r2
   39846:	2a02      	cmp	r2, #2
   39848:	d004      	beq.n	39854 <gnss_interface_write+0x38>
   3984a:	6822      	ldr	r2, [r4, #0]
   3984c:	b292      	uxth	r2, r2
   3984e:	2a04      	cmp	r2, #4
   39850:	f040 80bd 	bne.w	399ce <gnss_interface_write+0x1b2>
   39854:	2b00      	cmp	r3, #0
   39856:	f040 80c6 	bne.w	399e6 <gnss_interface_write+0x1ca>
   3985a:	6822      	ldr	r2, [r4, #0]
   3985c:	0390      	lsls	r0, r2, #14
   3985e:	d512      	bpl.n	39886 <gnss_interface_write+0x6a>
   39860:	6822      	ldr	r2, [r4, #0]
   39862:	882b      	ldrh	r3, [r5, #0]
   39864:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   39868:	6022      	str	r2, [r4, #0]
   3986a:	6822      	ldr	r2, [r4, #0]
   3986c:	3b01      	subs	r3, #1
   3986e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   39872:	6022      	str	r2, [r4, #0]
   39874:	2b07      	cmp	r3, #7
   39876:	f200 80a2 	bhi.w	399be <gnss_interface_write+0x1a2>
   3987a:	e8df f003 	tbb	[pc, r3]
   3987e:	7d82      	.short	0x7d82
   39880:	646e7378 	.word	0x646e7378
   39884:	0869      	.short	0x0869
   39886:	2000      	movs	r0, #0
   39888:	b01f      	add	sp, #124	; 0x7c
   3988a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3988e:	4608      	mov	r0, r1
   39890:	a902      	add	r1, sp, #8
   39892:	f002 ff35 	bl	3c700 <rpc_gnss_serialize_integrity>
   39896:	2172      	movs	r1, #114	; 0x72
   39898:	4668      	mov	r0, sp
   3989a:	f002 ff4f 	bl	3c73c <rpc_gnss_client_request_alloc>
   3989e:	4605      	mov	r5, r0
   398a0:	9800      	ldr	r0, [sp, #0]
   398a2:	2d00      	cmp	r5, #0
   398a4:	d172      	bne.n	3998c <gnss_interface_write+0x170>
   398a6:	2800      	cmp	r0, #0
   398a8:	d077      	beq.n	3999a <gnss_interface_write+0x17e>
   398aa:	f241 0605 	movw	r6, #4101	; 0x1005
   398ae:	f04f 0c49 	mov.w	ip, #73	; 0x49
   398b2:	2272      	movs	r2, #114	; 0x72
   398b4:	f04f 0e76 	mov.w	lr, #118	; 0x76
   398b8:	f04f 0943 	mov.w	r9, #67	; 0x43
   398bc:	f04f 0854 	mov.w	r8, #84	; 0x54
   398c0:	4f4e      	ldr	r7, [pc, #312]	; (399fc <gnss_interface_write+0x1e0>)
   398c2:	a91e      	add	r1, sp, #120	; 0x78
   398c4:	883b      	ldrh	r3, [r7, #0]
   398c6:	f880 c00f 	strb.w	ip, [r0, #15]
   398ca:	3301      	adds	r3, #1
   398cc:	b29b      	uxth	r3, r3
   398ce:	ea46 4c03 	orr.w	ip, r6, r3, lsl #16
   398d2:	f841 cd74 	str.w	ip, [r1, #-116]!
   398d6:	7145      	strb	r5, [r0, #5]
   398d8:	7185      	strb	r5, [r0, #6]
   398da:	71c5      	strb	r5, [r0, #7]
   398dc:	7205      	strb	r5, [r0, #8]
   398de:	7245      	strb	r5, [r0, #9]
   398e0:	7285      	strb	r5, [r0, #10]
   398e2:	72c5      	strb	r5, [r0, #11]
   398e4:	7102      	strb	r2, [r0, #4]
   398e6:	f880 900c 	strb.w	r9, [r0, #12]
   398ea:	f880 800d 	strb.w	r8, [r0, #13]
   398ee:	f880 e00e 	strb.w	lr, [r0, #14]
   398f2:	6800      	ldr	r0, [r0, #0]
   398f4:	803b      	strh	r3, [r7, #0]
   398f6:	f00e fc47 	bl	48188 <memcpy>
   398fa:	4b41      	ldr	r3, [pc, #260]	; (39a00 <gnss_interface_write+0x1e4>)
   398fc:	4631      	mov	r1, r6
   398fe:	9800      	ldr	r0, [sp, #0]
   39900:	601d      	str	r5, [r3, #0]
   39902:	f002 ff2f 	bl	3c764 <rpc_gnss_client_request_send>
   39906:	2800      	cmp	r0, #0
   39908:	d14e      	bne.n	399a8 <gnss_interface_write+0x18c>
   3990a:	6823      	ldr	r3, [r4, #0]
   3990c:	0299      	lsls	r1, r3, #10
   3990e:	d50b      	bpl.n	39928 <gnss_interface_write+0x10c>
   39910:	4e3c      	ldr	r6, [pc, #240]	; (39a04 <gnss_interface_write+0x1e8>)
   39912:	4d38      	ldr	r5, [pc, #224]	; (399f4 <gnss_interface_write+0x1d8>)
   39914:	e000      	b.n	39918 <gnss_interface_write+0xfc>
   39916:	b978      	cbnz	r0, 39938 <gnss_interface_write+0x11c>
   39918:	4631      	mov	r1, r6
   3991a:	4628      	mov	r0, r5
   3991c:	f7f1 fd54 	bl	2b3c8 <bsd_os_timedwait>
   39920:	6823      	ldr	r3, [r4, #0]
   39922:	029a      	lsls	r2, r3, #10
   39924:	d4f7      	bmi.n	39916 <gnss_interface_write+0xfa>
   39926:	b938      	cbnz	r0, 39938 <gnss_interface_write+0x11c>
   39928:	6823      	ldr	r3, [r4, #0]
   3992a:	039b      	lsls	r3, r3, #14
   3992c:	d4ab      	bmi.n	39886 <gnss_interface_write+0x6a>
   3992e:	2005      	movs	r0, #5
   39930:	6823      	ldr	r3, [r4, #0]
   39932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   39936:	6023      	str	r3, [r4, #0]
   39938:	f7f1 fe06 	bl	2b548 <bsd_os_errno_set>
   3993c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39940:	b01f      	add	sp, #124	; 0x7c
   39942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   39946:	4608      	mov	r0, r1
   39948:	a902      	add	r1, sp, #8
   3994a:	f002 fe91 	bl	3c670 <rpc_gnss_serialize_time_and_sv_tow>
   3994e:	e7a2      	b.n	39896 <gnss_interface_write+0x7a>
   39950:	4608      	mov	r0, r1
   39952:	a902      	add	r1, sp, #8
   39954:	f002 feb4 	bl	3c6c0 <rpc_gnss_serialize_location>
   39958:	e79d      	b.n	39896 <gnss_interface_write+0x7a>
   3995a:	4608      	mov	r0, r1
   3995c:	a902      	add	r1, sp, #8
   3995e:	f002 fe6d 	bl	3c63c <rpc_gnss_serialize_nequick>
   39962:	e798      	b.n	39896 <gnss_interface_write+0x7a>
   39964:	4608      	mov	r0, r1
   39966:	a902      	add	r1, sp, #8
   39968:	f002 fe44 	bl	3c5f4 <rpc_gnss_serialize_klob>
   3996c:	e793      	b.n	39896 <gnss_interface_write+0x7a>
   3996e:	4608      	mov	r0, r1
   39970:	a902      	add	r1, sp, #8
   39972:	f002 fe0d 	bl	3c590 <rpc_gnss_serialize_alm>
   39976:	e78e      	b.n	39896 <gnss_interface_write+0x7a>
   39978:	4608      	mov	r0, r1
   3997a:	a902      	add	r1, sp, #8
   3997c:	f002 fdb6 	bl	3c4ec <rpc_gnss_serialize_ephe>
   39980:	e789      	b.n	39896 <gnss_interface_write+0x7a>
   39982:	4608      	mov	r0, r1
   39984:	a902      	add	r1, sp, #8
   39986:	f002 fd8f 	bl	3c4a8 <rpc_gnss_serialize_utc>
   3998a:	e784      	b.n	39896 <gnss_interface_write+0x7a>
   3998c:	b128      	cbz	r0, 3999a <gnss_interface_write+0x17e>
   3998e:	6803      	ldr	r3, [r0, #0]
   39990:	b11b      	cbz	r3, 3999a <gnss_interface_write+0x17e>
   39992:	4618      	mov	r0, r3
   39994:	f002 ff04 	bl	3c7a0 <rpc_gnss_client_data_free>
   39998:	9800      	ldr	r0, [sp, #0]
   3999a:	f002 fef9 	bl	3c790 <rpc_gnss_client_message_free>
   3999e:	2023      	movs	r0, #35	; 0x23
   399a0:	f7f1 fdd2 	bl	2b548 <bsd_os_errno_set>
   399a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399a8:	6823      	ldr	r3, [r4, #0]
   399aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   399ae:	6023      	str	r3, [r4, #0]
   399b0:	6823      	ldr	r3, [r4, #0]
   399b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   399b6:	6023      	str	r3, [r4, #0]
   399b8:	b01f      	add	sp, #124	; 0x7c
   399ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   399be:	2016      	movs	r0, #22
   399c0:	f7f1 fdc2 	bl	2b548 <bsd_os_errno_set>
   399c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399c8:	b01f      	add	sp, #124	; 0x7c
   399ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   399ce:	2039      	movs	r0, #57	; 0x39
   399d0:	f7f1 fdba 	bl	2b548 <bsd_os_errno_set>
   399d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399d8:	e756      	b.n	39888 <gnss_interface_write+0x6c>
   399da:	2009      	movs	r0, #9
   399dc:	f7f1 fdb4 	bl	2b548 <bsd_os_errno_set>
   399e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399e4:	e750      	b.n	39888 <gnss_interface_write+0x6c>
   399e6:	202d      	movs	r0, #45	; 0x2d
   399e8:	f7f1 fdae 	bl	2b548 <bsd_os_errno_set>
   399ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   399f0:	e74a      	b.n	39888 <gnss_interface_write+0x6c>
   399f2:	bf00      	nop
   399f4:	49765443 	.word	0x49765443
   399f8:	20025e0c 	.word	0x20025e0c
   399fc:	2002a9c2 	.word	0x2002a9c2
   39a00:	20025e10 	.word	0x20025e10
   39a04:	200208cc 	.word	0x200208cc

00039a08 <gnss_interface_read>:
   39a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39a0c:	4c55      	ldr	r4, [pc, #340]	; (39b64 <gnss_interface_read+0x15c>)
   39a0e:	b0b7      	sub	sp, #220	; 0xdc
   39a10:	42a0      	cmp	r0, r4
   39a12:	f040 81fa 	bne.w	39e0a <gnss_interface_read+0x402>
   39a16:	460e      	mov	r6, r1
   39a18:	2900      	cmp	r1, #0
   39a1a:	f000 81f0 	beq.w	39dfe <gnss_interface_read+0x3f6>
   39a1e:	2ad7      	cmp	r2, #215	; 0xd7
   39a20:	f240 81ed 	bls.w	39dfe <gnss_interface_read+0x3f6>
   39a24:	4d50      	ldr	r5, [pc, #320]	; (39b68 <gnss_interface_read+0x160>)
   39a26:	469a      	mov	sl, r3
   39a28:	682b      	ldr	r3, [r5, #0]
   39a2a:	b29b      	uxth	r3, r3
   39a2c:	2b04      	cmp	r3, #4
   39a2e:	d004      	beq.n	39a3a <gnss_interface_read+0x32>
   39a30:	682b      	ldr	r3, [r5, #0]
   39a32:	b29b      	uxth	r3, r3
   39a34:	2b02      	cmp	r3, #2
   39a36:	f040 81dc 	bne.w	39df2 <gnss_interface_read+0x3ea>
   39a3a:	f1ba 0f00 	cmp.w	sl, #0
   39a3e:	d178      	bne.n	39b32 <gnss_interface_read+0x12a>
   39a40:	2102      	movs	r1, #2
   39a42:	20b6      	movs	r0, #182	; 0xb6
   39a44:	2400      	movs	r4, #0
   39a46:	682b      	ldr	r3, [r5, #0]
   39a48:	f10d 020e 	add.w	r2, sp, #14
   39a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   39a50:	602b      	str	r3, [r5, #0]
   39a52:	ab08      	add	r3, sp, #32
   39a54:	9304      	str	r3, [sp, #16]
   39a56:	f8df b118 	ldr.w	fp, [pc, #280]	; 39b70 <gnss_interface_read+0x168>
   39a5a:	ea0a 0301 	and.w	r3, sl, r1
   39a5e:	4f43      	ldr	r7, [pc, #268]	; (39b6c <gnss_interface_read+0x164>)
   39a60:	f8df 9110 	ldr.w	r9, [pc, #272]	; 39b74 <gnss_interface_read+0x16c>
   39a64:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 39b64 <gnss_interface_read+0x15c>
   39a68:	9005      	str	r0, [sp, #20]
   39a6a:	9107      	str	r1, [sp, #28]
   39a6c:	9206      	str	r2, [sp, #24]
   39a6e:	9301      	str	r3, [sp, #4]
   39a70:	f8db 0000 	ldr.w	r0, [fp]
   39a74:	4652      	mov	r2, sl
   39a76:	6803      	ldr	r3, [r0, #0]
   39a78:	a904      	add	r1, sp, #16
   39a7a:	689b      	ldr	r3, [r3, #8]
   39a7c:	4798      	blx	r3
   39a7e:	2800      	cmp	r0, #0
   39a80:	da2a      	bge.n	39ad8 <gnss_interface_read+0xd0>
   39a82:	9b01      	ldr	r3, [sp, #4]
   39a84:	b15b      	cbz	r3, 39a9e <gnss_interface_read+0x96>
   39a86:	1c42      	adds	r2, r0, #1
   39a88:	4603      	mov	r3, r0
   39a8a:	d125      	bne.n	39ad8 <gnss_interface_read+0xd0>
   39a8c:	b9dc      	cbnz	r4, 39ac6 <gnss_interface_read+0xbe>
   39a8e:	2023      	movs	r0, #35	; 0x23
   39a90:	461c      	mov	r4, r3
   39a92:	f7f1 fd59 	bl	2b548 <bsd_os_errno_set>
   39a96:	4620      	mov	r0, r4
   39a98:	b037      	add	sp, #220	; 0xdc
   39a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39a9e:	682a      	ldr	r2, [r5, #0]
   39aa0:	783b      	ldrb	r3, [r7, #0]
   39aa2:	03d1      	lsls	r1, r2, #15
   39aa4:	d40c      	bmi.n	39ac0 <gnss_interface_read+0xb8>
   39aa6:	b95c      	cbnz	r4, 39ac0 <gnss_interface_read+0xb8>
   39aa8:	b163      	cbz	r3, 39ac4 <gnss_interface_read+0xbc>
   39aaa:	4649      	mov	r1, r9
   39aac:	4640      	mov	r0, r8
   39aae:	f7f1 fc8b 	bl	2b3c8 <bsd_os_timedwait>
   39ab2:	682b      	ldr	r3, [r5, #0]
   39ab4:	03db      	lsls	r3, r3, #15
   39ab6:	d437      	bmi.n	39b28 <gnss_interface_read+0x120>
   39ab8:	783b      	ldrb	r3, [r7, #0]
   39aba:	2800      	cmp	r0, #0
   39abc:	d0f4      	beq.n	39aa8 <gnss_interface_read+0xa0>
   39abe:	4604      	mov	r4, r0
   39ac0:	2b00      	cmp	r3, #0
   39ac2:	d1d5      	bne.n	39a70 <gnss_interface_read+0x68>
   39ac4:	2470      	movs	r4, #112	; 0x70
   39ac6:	4620      	mov	r0, r4
   39ac8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   39acc:	f7f1 fd3c 	bl	2b548 <bsd_os_errno_set>
   39ad0:	4620      	mov	r0, r4
   39ad2:	b037      	add	sp, #220	; 0xdc
   39ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39ad8:	f244 0202 	movw	r2, #16386	; 0x4002
   39adc:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   39ae0:	4293      	cmp	r3, r2
   39ae2:	d02f      	beq.n	39b44 <gnss_interface_read+0x13c>
   39ae4:	f244 0201 	movw	r2, #16385	; 0x4001
   39ae8:	4293      	cmp	r3, r2
   39aea:	d045      	beq.n	39b78 <gnss_interface_read+0x170>
   39aec:	f244 0203 	movw	r2, #16387	; 0x4003
   39af0:	4293      	cmp	r3, r2
   39af2:	f040 8184 	bne.w	39dfe <gnss_interface_read+0x3f6>
   39af6:	2203      	movs	r2, #3
   39af8:	2414      	movs	r4, #20
   39afa:	9b08      	ldr	r3, [sp, #32]
   39afc:	7032      	strb	r2, [r6, #0]
   39afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   39b00:	60b3      	str	r3, [r6, #8]
   39b02:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   39b06:	e9c6 2303 	strd	r2, r3, [r6, #12]
   39b0a:	f8db 0000 	ldr.w	r0, [fp]
   39b0e:	6803      	ldr	r3, [r0, #0]
   39b10:	68db      	ldr	r3, [r3, #12]
   39b12:	4798      	blx	r3
   39b14:	2800      	cmp	r0, #0
   39b16:	ddbe      	ble.n	39a96 <gnss_interface_read+0x8e>
   39b18:	4620      	mov	r0, r4
   39b1a:	682b      	ldr	r3, [r5, #0]
   39b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   39b20:	602b      	str	r3, [r5, #0]
   39b22:	b037      	add	sp, #220	; 0xdc
   39b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b28:	783b      	ldrb	r3, [r7, #0]
   39b2a:	4604      	mov	r4, r0
   39b2c:	2b00      	cmp	r3, #0
   39b2e:	d19f      	bne.n	39a70 <gnss_interface_read+0x68>
   39b30:	e7c8      	b.n	39ac4 <gnss_interface_read+0xbc>
   39b32:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   39b36:	d183      	bne.n	39a40 <gnss_interface_read+0x38>
   39b38:	202d      	movs	r0, #45	; 0x2d
   39b3a:	f7f1 fd05 	bl	2b548 <bsd_os_errno_set>
   39b3e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   39b42:	e7a8      	b.n	39a96 <gnss_interface_read+0x8e>
   39b44:	a808      	add	r0, sp, #32
   39b46:	f7e3 fb8d 	bl	1d264 <strlen>
   39b4a:	2302      	movs	r3, #2
   39b4c:	1c44      	adds	r4, r0, #1
   39b4e:	b2a4      	uxth	r4, r4
   39b50:	f806 3b08 	strb.w	r3, [r6], #8
   39b54:	4622      	mov	r2, r4
   39b56:	a908      	add	r1, sp, #32
   39b58:	4630      	mov	r0, r6
   39b5a:	f00e fb15 	bl	48188 <memcpy>
   39b5e:	3408      	adds	r4, #8
   39b60:	e7d3      	b.n	39b0a <gnss_interface_read+0x102>
   39b62:	bf00      	nop
   39b64:	49765443 	.word	0x49765443
   39b68:	20025e0c 	.word	0x20025e0c
   39b6c:	2002d1bf 	.word	0x2002d1bf
   39b70:	20025e14 	.word	0x20025e14
   39b74:	200208cc 	.word	0x200208cc
   39b78:	2401      	movs	r4, #1
   39b7a:	a809      	add	r0, sp, #36	; 0x24
   39b7c:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   39b7e:	e9c6 0102 	strd	r0, r1, [r6, #8]
   39b82:	e9c6 2304 	strd	r2, r3, [r6, #16]
   39b86:	990d      	ldr	r1, [sp, #52]	; 0x34
   39b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   39b8a:	7034      	strb	r4, [r6, #0]
   39b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   39b8e:	61b1      	str	r1, [r6, #24]
   39b90:	9910      	ldr	r1, [sp, #64]	; 0x40
   39b92:	61f2      	str	r2, [r6, #28]
   39b94:	6233      	str	r3, [r6, #32]
   39b96:	f89d 205d 	ldrb.w	r2, [sp, #93]	; 0x5d
   39b9a:	f8dd 304d 	ldr.w	r3, [sp, #77]	; 0x4d
   39b9e:	6271      	str	r1, [r6, #36]	; 0x24
   39ba0:	f8dd 1051 	ldr.w	r1, [sp, #81]	; 0x51
   39ba4:	f886 2044 	strb.w	r2, [r6, #68]	; 0x44
   39ba8:	f8dd 2055 	ldr.w	r2, [sp, #85]	; 0x55
   39bac:	6373      	str	r3, [r6, #52]	; 0x34
   39bae:	f8dd 3059 	ldr.w	r3, [sp, #89]	; 0x59
   39bb2:	63b1      	str	r1, [r6, #56]	; 0x38
   39bb4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   39bb8:	63f2      	str	r2, [r6, #60]	; 0x3c
   39bba:	6433      	str	r3, [r6, #64]	; 0x40
   39bbc:	f8dd 2046 	ldr.w	r2, [sp, #70]	; 0x46
   39bc0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   39bc4:	8531      	strh	r1, [r6, #40]	; 0x28
   39bc6:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
   39bca:	f8c6 202a 	str.w	r2, [r6, #42]	; 0x2a
   39bce:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   39bd2:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
   39bd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   39bd8:	f89d 406c 	ldrb.w	r4, [sp, #108]	; 0x6c
   39bdc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   39be0:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
   39be4:	f3c3 210f 	ubfx	r1, r3, #8, #16
   39be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   39bea:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   39bee:	8630      	strh	r0, [r6, #48]	; 0x30
   39bf0:	f8a6 104a 	strh.w	r1, [r6, #74]	; 0x4a
   39bf4:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   39bf8:	f3c3 230f 	ubfx	r3, r3, #8, #16
   39bfc:	f8a6 2056 	strh.w	r2, [r6, #86]	; 0x56
   39c00:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   39c04:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
   39c08:	f8dd 3063 	ldr.w	r3, [sp, #99]	; 0x63
   39c0c:	f8a6 1046 	strh.w	r1, [r6, #70]	; 0x46
   39c10:	f886 2048 	strb.w	r2, [r6, #72]	; 0x48
   39c14:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   39c18:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   39c1c:	64f3      	str	r3, [r6, #76]	; 0x4c
   39c1e:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
   39c22:	f886 1050 	strb.w	r1, [r6, #80]	; 0x50
   39c26:	f8a6 2052 	strh.w	r2, [r6, #82]	; 0x52
   39c2a:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
   39c2e:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
   39c32:	f8dd 106d 	ldr.w	r1, [sp, #109]	; 0x6d
   39c36:	f89d 2071 	ldrb.w	r2, [sp, #113]	; 0x71
   39c3a:	65b1      	str	r1, [r6, #88]	; 0x58
   39c3c:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
   39c40:	f89d 1074 	ldrb.w	r1, [sp, #116]	; 0x74
   39c44:	f8dd 2077 	ldr.w	r2, [sp, #119]	; 0x77
   39c48:	f8a6 305e 	strh.w	r3, [r6, #94]	; 0x5e
   39c4c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
   39c50:	f886 1060 	strb.w	r1, [r6, #96]	; 0x60
   39c54:	6672      	str	r2, [r6, #100]	; 0x64
   39c56:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
   39c5a:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
   39c5e:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
   39c62:	9a22      	ldr	r2, [sp, #136]	; 0x88
   39c64:	f89d 0094 	ldrb.w	r0, [sp, #148]	; 0x94
   39c68:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   39c6c:	f89d 3093 	ldrb.w	r3, [sp, #147]	; 0x93
   39c70:	f3c2 220f 	ubfx	r2, r2, #8, #16
   39c74:	f8a6 106e 	strh.w	r1, [r6, #110]	; 0x6e
   39c78:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
   39c7c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   39c80:	f8a6 207a 	strh.w	r2, [r6, #122]	; 0x7a
   39c84:	f89d 207e 	ldrb.w	r2, [sp, #126]	; 0x7e
   39c88:	f8a6 3086 	strh.w	r3, [r6, #134]	; 0x86
   39c8c:	f8dd 3081 	ldr.w	r3, [sp, #129]	; 0x81
   39c90:	f8a6 106a 	strh.w	r1, [r6, #106]	; 0x6a
   39c94:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
   39c98:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   39c9c:	f89d 1085 	ldrb.w	r1, [sp, #133]	; 0x85
   39ca0:	6733      	str	r3, [r6, #112]	; 0x70
   39ca2:	f89d 3088 	ldrb.w	r3, [sp, #136]	; 0x88
   39ca6:	f886 1074 	strb.w	r1, [r6, #116]	; 0x74
   39caa:	f8a6 2076 	strh.w	r2, [r6, #118]	; 0x76
   39cae:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
   39cb2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
   39cb6:	f8dd 108b 	ldr.w	r1, [sp, #139]	; 0x8b
   39cba:	f89d 208f 	ldrb.w	r2, [sp, #143]	; 0x8f
   39cbe:	67f1      	str	r1, [r6, #124]	; 0x7c
   39cc0:	f886 2080 	strb.w	r2, [r6, #128]	; 0x80
   39cc4:	f89d 1092 	ldrb.w	r1, [sp, #146]	; 0x92
   39cc8:	f8dd 2095 	ldr.w	r2, [sp, #149]	; 0x95
   39ccc:	f8a6 3082 	strh.w	r3, [r6, #130]	; 0x82
   39cd0:	f89d 3099 	ldrb.w	r3, [sp, #153]	; 0x99
   39cd4:	f886 1084 	strb.w	r1, [r6, #132]	; 0x84
   39cd8:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
   39cdc:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
   39ce0:	f8bd 009a 	ldrh.w	r0, [sp, #154]	; 0x9a
   39ce4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   39ce6:	f89d 40a8 	ldrb.w	r4, [sp, #168]	; 0xa8
   39cea:	f89d 20a7 	ldrb.w	r2, [sp, #167]	; 0xa7
   39cee:	f3c3 210f 	ubfx	r1, r3, #8, #16
   39cf2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   39cf4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
   39cf8:	f8a6 1092 	strh.w	r1, [r6, #146]	; 0x92
   39cfc:	f89d 109c 	ldrb.w	r1, [sp, #156]	; 0x9c
   39d00:	f8a6 209e 	strh.w	r2, [r6, #158]	; 0x9e
   39d04:	f3c3 230f 	ubfx	r3, r3, #8, #16
   39d08:	f8dd 209f 	ldr.w	r2, [sp, #159]	; 0x9f
   39d0c:	f8a6 008e 	strh.w	r0, [r6, #142]	; 0x8e
   39d10:	f8a6 30aa 	strh.w	r3, [r6, #170]	; 0xaa
   39d14:	f886 1090 	strb.w	r1, [r6, #144]	; 0x90
   39d18:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
   39d1c:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
   39d20:	f8c6 2094 	str.w	r2, [r6, #148]	; 0x94
   39d24:	f89d 20a6 	ldrb.w	r2, [sp, #166]	; 0xa6
   39d28:	f886 3098 	strb.w	r3, [r6, #152]	; 0x98
   39d2c:	f8dd 30a9 	ldr.w	r3, [sp, #169]	; 0xa9
   39d30:	f8a6 109a 	strh.w	r1, [r6, #154]	; 0x9a
   39d34:	f886 209c 	strb.w	r2, [r6, #156]	; 0x9c
   39d38:	f8bd 20ae 	ldrh.w	r2, [sp, #174]	; 0xae
   39d3c:	f89d 10ad 	ldrb.w	r1, [sp, #173]	; 0xad
   39d40:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
   39d44:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
   39d48:	f886 10a4 	strb.w	r1, [r6, #164]	; 0xa4
   39d4c:	f8a6 20a6 	strh.w	r2, [r6, #166]	; 0xa6
   39d50:	f886 30a8 	strb.w	r3, [r6, #168]	; 0xa8
   39d54:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
   39d58:	f8dd 10b3 	ldr.w	r1, [sp, #179]	; 0xb3
   39d5c:	f89d 20b7 	ldrb.w	r2, [sp, #183]	; 0xb7
   39d60:	f8c6 10ac 	str.w	r1, [r6, #172]	; 0xac
   39d64:	f886 20b0 	strb.w	r2, [r6, #176]	; 0xb0
   39d68:	f8a6 30b2 	strh.w	r3, [r6, #178]	; 0xb2
   39d6c:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
   39d70:	f89d 10bb 	ldrb.w	r1, [sp, #187]	; 0xbb
   39d74:	f89d 00d0 	ldrb.w	r0, [sp, #208]	; 0xd0
   39d78:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   39d7a:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   39d7e:	f89d 30cf 	ldrb.w	r3, [sp, #207]	; 0xcf
   39d82:	f89d 40ba 	ldrb.w	r4, [sp, #186]	; 0xba
   39d86:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   39d8a:	f3c2 220f 	ubfx	r2, r2, #8, #16
   39d8e:	f8a6 10b6 	strh.w	r1, [r6, #182]	; 0xb6
   39d92:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
   39d96:	f886 40b4 	strb.w	r4, [r6, #180]	; 0xb4
   39d9a:	f8a6 20c2 	strh.w	r2, [r6, #194]	; 0xc2
   39d9e:	f8bd 20c2 	ldrh.w	r2, [sp, #194]	; 0xc2
   39da2:	f89d 10c1 	ldrb.w	r1, [sp, #193]	; 0xc1
   39da6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
   39daa:	f8dd 00bd 	ldr.w	r0, [sp, #189]	; 0xbd
   39dae:	f886 10bc 	strb.w	r1, [r6, #188]	; 0xbc
   39db2:	f8a6 20be 	strh.w	r2, [r6, #190]	; 0xbe
   39db6:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
   39dba:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
   39dbe:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   39dc2:	f8dd 10c7 	ldr.w	r1, [sp, #199]	; 0xc7
   39dc6:	f89d 20cb 	ldrb.w	r2, [sp, #203]	; 0xcb
   39dca:	f8c6 10c4 	str.w	r1, [r6, #196]	; 0xc4
   39dce:	f886 20c8 	strb.w	r2, [r6, #200]	; 0xc8
   39dd2:	f89d 10ce 	ldrb.w	r1, [sp, #206]	; 0xce
   39dd6:	f8dd 20d1 	ldr.w	r2, [sp, #209]	; 0xd1
   39dda:	f8a6 30ca 	strh.w	r3, [r6, #202]	; 0xca
   39dde:	f89d 30d5 	ldrb.w	r3, [sp, #213]	; 0xd5
   39de2:	f886 10cc 	strb.w	r1, [r6, #204]	; 0xcc
   39de6:	f8c6 20d0 	str.w	r2, [r6, #208]	; 0xd0
   39dea:	f886 30d4 	strb.w	r3, [r6, #212]	; 0xd4
   39dee:	24d8      	movs	r4, #216	; 0xd8
   39df0:	e68b      	b.n	39b0a <gnss_interface_read+0x102>
   39df2:	2039      	movs	r0, #57	; 0x39
   39df4:	f7f1 fba8 	bl	2b548 <bsd_os_errno_set>
   39df8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   39dfc:	e64b      	b.n	39a96 <gnss_interface_read+0x8e>
   39dfe:	2016      	movs	r0, #22
   39e00:	f7f1 fba2 	bl	2b548 <bsd_os_errno_set>
   39e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   39e08:	e645      	b.n	39a96 <gnss_interface_read+0x8e>
   39e0a:	2009      	movs	r0, #9
   39e0c:	f7f1 fb9c 	bl	2b548 <bsd_os_errno_set>
   39e10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   39e14:	e63f      	b.n	39a96 <gnss_interface_read+0x8e>
   39e16:	bf00      	nop

00039e18 <gnss_interface_setopt>:
   39e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39e1c:	4db9      	ldr	r5, [pc, #740]	; (3a104 <gnss_interface_setopt+0x2ec>)
   39e1e:	b087      	sub	sp, #28
   39e20:	682c      	ldr	r4, [r5, #0]
   39e22:	4690      	mov	r8, r2
   39e24:	b2a4      	uxth	r4, r4
   39e26:	2c02      	cmp	r4, #2
   39e28:	d00c      	beq.n	39e44 <gnss_interface_setopt+0x2c>
   39e2a:	2a08      	cmp	r2, #8
   39e2c:	d00a      	beq.n	39e44 <gnss_interface_setopt+0x2c>
   39e2e:	3a0a      	subs	r2, #10
   39e30:	2a01      	cmp	r2, #1
   39e32:	d907      	bls.n	39e44 <gnss_interface_setopt+0x2c>
   39e34:	200e      	movs	r0, #14
   39e36:	f7f1 fb87 	bl	2b548 <bsd_os_errno_set>
   39e3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   39e3e:	b007      	add	sp, #28
   39e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e44:	682a      	ldr	r2, [r5, #0]
   39e46:	0252      	lsls	r2, r2, #9
   39e48:	f100 8155 	bmi.w	3a0f6 <gnss_interface_setopt+0x2de>
   39e4c:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   39e50:	f040 8145 	bne.w	3a0de <gnss_interface_setopt+0x2c6>
   39e54:	4aac      	ldr	r2, [pc, #688]	; (3a108 <gnss_interface_setopt+0x2f0>)
   39e56:	4290      	cmp	r0, r2
   39e58:	f040 8147 	bne.w	3a0ea <gnss_interface_setopt+0x2d2>
   39e5c:	f1a8 020a 	sub.w	r2, r8, #10
   39e60:	2a01      	cmp	r2, #1
   39e62:	d902      	bls.n	39e6a <gnss_interface_setopt+0x52>
   39e64:	2b00      	cmp	r3, #0
   39e66:	f000 811e 	beq.w	3a0a6 <gnss_interface_setopt+0x28e>
   39e6a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   39e6e:	2a0a      	cmp	r2, #10
   39e70:	f200 8119 	bhi.w	3a0a6 <gnss_interface_setopt+0x28e>
   39e74:	e8df f012 	tbh	[pc, r2, lsl #1]
   39e78:	00950088 	.word	0x00950088
   39e7c:	00ab00a1 	.word	0x00ab00a1
   39e80:	00c200b7 	.word	0x00c200b7
   39e84:	00e600ce 	.word	0x00e600ce
   39e88:	010800fc 	.word	0x010800fc
   39e8c:	000b      	.short	0x000b
   39e8e:	682b      	ldr	r3, [r5, #0]
   39e90:	b29b      	uxth	r3, r3
   39e92:	2b04      	cmp	r3, #4
   39e94:	d1ce      	bne.n	39e34 <gnss_interface_setopt+0x1c>
   39e96:	2203      	movs	r2, #3
   39e98:	f241 0604 	movw	r6, #4100	; 0x1004
   39e9c:	2300      	movs	r3, #0
   39e9e:	4637      	mov	r7, r6
   39ea0:	f88d 2008 	strb.w	r2, [sp, #8]
   39ea4:	f88d 3009 	strb.w	r3, [sp, #9]
   39ea8:	f88d 300a 	strb.w	r3, [sp, #10]
   39eac:	f88d 300b 	strb.w	r3, [sp, #11]
   39eb0:	f88d 300c 	strb.w	r3, [sp, #12]
   39eb4:	682b      	ldr	r3, [r5, #0]
   39eb6:	2112      	movs	r1, #18
   39eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   39ebc:	4668      	mov	r0, sp
   39ebe:	602b      	str	r3, [r5, #0]
   39ec0:	f002 fc3c 	bl	3c73c <rpc_gnss_client_request_alloc>
   39ec4:	4604      	mov	r4, r0
   39ec6:	9800      	ldr	r0, [sp, #0]
   39ec8:	2c00      	cmp	r4, #0
   39eca:	f040 80f2 	bne.w	3a0b2 <gnss_interface_setopt+0x29a>
   39ece:	2800      	cmp	r0, #0
   39ed0:	f000 80f6 	beq.w	3a0c0 <gnss_interface_setopt+0x2a8>
   39ed4:	2212      	movs	r2, #18
   39ed6:	f04f 0976 	mov.w	r9, #118	; 0x76
   39eda:	f04f 0e49 	mov.w	lr, #73	; 0x49
   39ede:	f04f 0b43 	mov.w	fp, #67	; 0x43
   39ee2:	f04f 0a54 	mov.w	sl, #84	; 0x54
   39ee6:	f8df c22c 	ldr.w	ip, [pc, #556]	; 3a114 <gnss_interface_setopt+0x2fc>
   39eea:	a906      	add	r1, sp, #24
   39eec:	f8bc 3000 	ldrh.w	r3, [ip]
   39ef0:	f880 900e 	strb.w	r9, [r0, #14]
   39ef4:	3301      	adds	r3, #1
   39ef6:	b29b      	uxth	r3, r3
   39ef8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
   39efc:	f841 6d14 	str.w	r6, [r1, #-20]!
   39f00:	7144      	strb	r4, [r0, #5]
   39f02:	7184      	strb	r4, [r0, #6]
   39f04:	71c4      	strb	r4, [r0, #7]
   39f06:	7204      	strb	r4, [r0, #8]
   39f08:	7244      	strb	r4, [r0, #9]
   39f0a:	7284      	strb	r4, [r0, #10]
   39f0c:	72c4      	strb	r4, [r0, #11]
   39f0e:	7102      	strb	r2, [r0, #4]
   39f10:	f880 b00c 	strb.w	fp, [r0, #12]
   39f14:	f880 a00d 	strb.w	sl, [r0, #13]
   39f18:	f880 e00f 	strb.w	lr, [r0, #15]
   39f1c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 3a118 <gnss_interface_setopt+0x300>
   39f20:	6800      	ldr	r0, [r0, #0]
   39f22:	f8ac 3000 	strh.w	r3, [ip]
   39f26:	f00e f92f 	bl	48188 <memcpy>
   39f2a:	4639      	mov	r1, r7
   39f2c:	9800      	ldr	r0, [sp, #0]
   39f2e:	f8c9 4000 	str.w	r4, [r9]
   39f32:	f002 fc17 	bl	3c764 <rpc_gnss_client_request_send>
   39f36:	2800      	cmp	r0, #0
   39f38:	f040 80c7 	bne.w	3a0ca <gnss_interface_setopt+0x2b2>
   39f3c:	4f73      	ldr	r7, [pc, #460]	; (3a10c <gnss_interface_setopt+0x2f4>)
   39f3e:	4e72      	ldr	r6, [pc, #456]	; (3a108 <gnss_interface_setopt+0x2f0>)
   39f40:	4639      	mov	r1, r7
   39f42:	4630      	mov	r0, r6
   39f44:	f7f1 fa40 	bl	2b3c8 <bsd_os_timedwait>
   39f48:	682c      	ldr	r4, [r5, #0]
   39f4a:	f414 0480 	ands.w	r4, r4, #4194304	; 0x400000
   39f4e:	d1f7      	bne.n	39f40 <gnss_interface_setopt+0x128>
   39f50:	f8d9 0000 	ldr.w	r0, [r9]
   39f54:	b118      	cbz	r0, 39f5e <gnss_interface_setopt+0x146>
   39f56:	f002 fc23 	bl	3c7a0 <rpc_gnss_client_data_free>
   39f5a:	f8c9 4000 	str.w	r4, [r9]
   39f5e:	682b      	ldr	r3, [r5, #0]
   39f60:	021b      	lsls	r3, r3, #8
   39f62:	f140 8098 	bpl.w	3a096 <gnss_interface_setopt+0x27e>
   39f66:	f1b8 0f08 	cmp.w	r8, #8
   39f6a:	f040 809a 	bne.w	3a0a2 <gnss_interface_setopt+0x28a>
   39f6e:	4b68      	ldr	r3, [pc, #416]	; (3a110 <gnss_interface_setopt+0x2f8>)
   39f70:	6818      	ldr	r0, [r3, #0]
   39f72:	6803      	ldr	r3, [r0, #0]
   39f74:	691b      	ldr	r3, [r3, #16]
   39f76:	4798      	blx	r3
   39f78:	2000      	movs	r0, #0
   39f7a:	682b      	ldr	r3, [r5, #0]
   39f7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   39f80:	602b      	str	r3, [r5, #0]
   39f82:	b007      	add	sp, #28
   39f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f88:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39f8a:	2a02      	cmp	r2, #2
   39f8c:	f040 808b 	bne.w	3a0a6 <gnss_interface_setopt+0x28e>
   39f90:	2208      	movs	r2, #8
   39f92:	f241 1603 	movw	r6, #4355	; 0x1103
   39f96:	881b      	ldrh	r3, [r3, #0]
   39f98:	9202      	str	r2, [sp, #8]
   39f9a:	f8ad 300f 	strh.w	r3, [sp, #15]
   39f9e:	4637      	mov	r7, r6
   39fa0:	e788      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   39fa2:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39fa4:	2a02      	cmp	r2, #2
   39fa6:	d17e      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   39fa8:	2210      	movs	r2, #16
   39faa:	f241 1603 	movw	r6, #4355	; 0x1103
   39fae:	881b      	ldrh	r3, [r3, #0]
   39fb0:	9202      	str	r2, [sp, #8]
   39fb2:	f8ad 3011 	strh.w	r3, [sp, #17]
   39fb6:	4637      	mov	r7, r6
   39fb8:	e77c      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   39fba:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39fbc:	2a01      	cmp	r2, #1
   39fbe:	d172      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   39fc0:	781b      	ldrb	r3, [r3, #0]
   39fc2:	2b01      	cmp	r3, #1
   39fc4:	d16f      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   39fc6:	f241 1603 	movw	r6, #4355	; 0x1103
   39fca:	4637      	mov	r7, r6
   39fcc:	e772      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   39fce:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39fd0:	2a02      	cmp	r2, #2
   39fd2:	d168      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   39fd4:	2220      	movs	r2, #32
   39fd6:	f241 1603 	movw	r6, #4355	; 0x1103
   39fda:	881b      	ldrh	r3, [r3, #0]
   39fdc:	9202      	str	r2, [sp, #8]
   39fde:	f8ad 3013 	strh.w	r3, [sp, #19]
   39fe2:	4637      	mov	r7, r6
   39fe4:	e766      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   39fe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39fe8:	2a01      	cmp	r2, #1
   39fea:	d15c      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   39fec:	f241 1603 	movw	r6, #4355	; 0x1103
   39ff0:	781b      	ldrb	r3, [r3, #0]
   39ff2:	9202      	str	r2, [sp, #8]
   39ff4:	f88d 300c 	strb.w	r3, [sp, #12]
   39ff8:	4637      	mov	r7, r6
   39ffa:	e75b      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   39ffc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   39ffe:	2a01      	cmp	r2, #1
   3a000:	d151      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   3a002:	2202      	movs	r2, #2
   3a004:	f241 1603 	movw	r6, #4355	; 0x1103
   3a008:	781b      	ldrb	r3, [r3, #0]
   3a00a:	9202      	str	r2, [sp, #8]
   3a00c:	f88d 300d 	strb.w	r3, [sp, #13]
   3a010:	4637      	mov	r7, r6
   3a012:	e74f      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   3a014:	682a      	ldr	r2, [r5, #0]
   3a016:	b292      	uxth	r2, r2
   3a018:	2a02      	cmp	r2, #2
   3a01a:	f47f af0b 	bne.w	39e34 <gnss_interface_setopt+0x1c>
   3a01e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3a020:	2a04      	cmp	r2, #4
   3a022:	d140      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   3a024:	2101      	movs	r1, #1
   3a026:	f241 0604 	movw	r6, #4100	; 0x1004
   3a02a:	682a      	ldr	r2, [r5, #0]
   3a02c:	6818      	ldr	r0, [r3, #0]
   3a02e:	0c13      	lsrs	r3, r2, #16
   3a030:	041b      	lsls	r3, r3, #16
   3a032:	f043 0303 	orr.w	r3, r3, #3
   3a036:	f8cd 0009 	str.w	r0, [sp, #9]
   3a03a:	602b      	str	r3, [r5, #0]
   3a03c:	f88d 1008 	strb.w	r1, [sp, #8]
   3a040:	4637      	mov	r7, r6
   3a042:	e737      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   3a044:	682a      	ldr	r2, [r5, #0]
   3a046:	b292      	uxth	r2, r2
   3a048:	2a04      	cmp	r2, #4
   3a04a:	d004      	beq.n	3a056 <gnss_interface_setopt+0x23e>
   3a04c:	682a      	ldr	r2, [r5, #0]
   3a04e:	b292      	uxth	r2, r2
   3a050:	2a02      	cmp	r2, #2
   3a052:	f47f aeef 	bne.w	39e34 <gnss_interface_setopt+0x1c>
   3a056:	2200      	movs	r2, #0
   3a058:	f88d 2008 	strb.w	r2, [sp, #8]
   3a05c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3a05e:	2a04      	cmp	r2, #4
   3a060:	d121      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   3a062:	f241 0604 	movw	r6, #4100	; 0x1004
   3a066:	681b      	ldr	r3, [r3, #0]
   3a068:	4637      	mov	r7, r6
   3a06a:	f8cd 3009 	str.w	r3, [sp, #9]
   3a06e:	e721      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   3a070:	9a10      	ldr	r2, [sp, #64]	; 0x40
   3a072:	2a01      	cmp	r2, #1
   3a074:	d117      	bne.n	3a0a6 <gnss_interface_setopt+0x28e>
   3a076:	2240      	movs	r2, #64	; 0x40
   3a078:	f241 1603 	movw	r6, #4355	; 0x1103
   3a07c:	781b      	ldrb	r3, [r3, #0]
   3a07e:	9202      	str	r2, [sp, #8]
   3a080:	f88d 3015 	strb.w	r3, [sp, #21]
   3a084:	4637      	mov	r7, r6
   3a086:	e715      	b.n	39eb4 <gnss_interface_setopt+0x9c>
   3a088:	682b      	ldr	r3, [r5, #0]
   3a08a:	b29b      	uxth	r3, r3
   3a08c:	2b04      	cmp	r3, #4
   3a08e:	f47f aed1 	bne.w	39e34 <gnss_interface_setopt+0x1c>
   3a092:	2202      	movs	r2, #2
   3a094:	e700      	b.n	39e98 <gnss_interface_setopt+0x80>
   3a096:	200e      	movs	r0, #14
   3a098:	f7f1 fa56 	bl	2b548 <bsd_os_errno_set>
   3a09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0a0:	e76b      	b.n	39f7a <gnss_interface_setopt+0x162>
   3a0a2:	2000      	movs	r0, #0
   3a0a4:	e769      	b.n	39f7a <gnss_interface_setopt+0x162>
   3a0a6:	2016      	movs	r0, #22
   3a0a8:	f7f1 fa4e 	bl	2b548 <bsd_os_errno_set>
   3a0ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0b0:	e6c5      	b.n	39e3e <gnss_interface_setopt+0x26>
   3a0b2:	b128      	cbz	r0, 3a0c0 <gnss_interface_setopt+0x2a8>
   3a0b4:	6803      	ldr	r3, [r0, #0]
   3a0b6:	b11b      	cbz	r3, 3a0c0 <gnss_interface_setopt+0x2a8>
   3a0b8:	4618      	mov	r0, r3
   3a0ba:	f002 fb71 	bl	3c7a0 <rpc_gnss_client_data_free>
   3a0be:	9800      	ldr	r0, [sp, #0]
   3a0c0:	f002 fb66 	bl	3c790 <rpc_gnss_client_message_free>
   3a0c4:	2023      	movs	r0, #35	; 0x23
   3a0c6:	f7f1 fa3f 	bl	2b548 <bsd_os_errno_set>
   3a0ca:	682b      	ldr	r3, [r5, #0]
   3a0cc:	200e      	movs	r0, #14
   3a0ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   3a0d2:	602b      	str	r3, [r5, #0]
   3a0d4:	f7f1 fa38 	bl	2b548 <bsd_os_errno_set>
   3a0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0dc:	e6af      	b.n	39e3e <gnss_interface_setopt+0x26>
   3a0de:	202a      	movs	r0, #42	; 0x2a
   3a0e0:	f7f1 fa32 	bl	2b548 <bsd_os_errno_set>
   3a0e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0e8:	e6a9      	b.n	39e3e <gnss_interface_setopt+0x26>
   3a0ea:	2009      	movs	r0, #9
   3a0ec:	f7f1 fa2c 	bl	2b548 <bsd_os_errno_set>
   3a0f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a0f4:	e6a3      	b.n	39e3e <gnss_interface_setopt+0x26>
   3a0f6:	2073      	movs	r0, #115	; 0x73
   3a0f8:	f7f1 fa26 	bl	2b548 <bsd_os_errno_set>
   3a0fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a100:	e69d      	b.n	39e3e <gnss_interface_setopt+0x26>
   3a102:	bf00      	nop
   3a104:	20025e0c 	.word	0x20025e0c
   3a108:	49765443 	.word	0x49765443
   3a10c:	200208cc 	.word	0x200208cc
   3a110:	20025e14 	.word	0x20025e14
   3a114:	2002a9c2 	.word	0x2002a9c2
   3a118:	20025e10 	.word	0x20025e10

0003a11c <gnss_interface_getopt>:
   3a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a120:	4c81      	ldr	r4, [pc, #516]	; (3a328 <gnss_interface_getopt+0x20c>)
   3a122:	b087      	sub	sp, #28
   3a124:	6825      	ldr	r5, [r4, #0]
   3a126:	4698      	mov	r8, r3
   3a128:	b2ad      	uxth	r5, r5
   3a12a:	2d02      	cmp	r5, #2
   3a12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3a12e:	f040 80dd 	bne.w	3a2ec <gnss_interface_getopt+0x1d0>
   3a132:	6825      	ldr	r5, [r4, #0]
   3a134:	03ee      	lsls	r6, r5, #15
   3a136:	f100 80eb 	bmi.w	3a310 <gnss_interface_getopt+0x1f4>
   3a13a:	6825      	ldr	r5, [r4, #0]
   3a13c:	01ed      	lsls	r5, r5, #7
   3a13e:	f100 80ed 	bmi.w	3a31c <gnss_interface_getopt+0x200>
   3a142:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   3a146:	f040 80d7 	bne.w	3a2f8 <gnss_interface_getopt+0x1dc>
   3a14a:	4978      	ldr	r1, [pc, #480]	; (3a32c <gnss_interface_getopt+0x210>)
   3a14c:	4288      	cmp	r0, r1
   3a14e:	f040 80d9 	bne.w	3a304 <gnss_interface_getopt+0x1e8>
   3a152:	f1b8 0f00 	cmp.w	r8, #0
   3a156:	d00b      	beq.n	3a170 <gnss_interface_getopt+0x54>
   3a158:	b153      	cbz	r3, 3a170 <gnss_interface_getopt+0x54>
   3a15a:	1e57      	subs	r7, r2, #1
   3a15c:	2f05      	cmp	r7, #5
   3a15e:	d807      	bhi.n	3a170 <gnss_interface_getopt+0x54>
   3a160:	e8df f007 	tbb	[pc, r7]
   3a164:	0f030f0f 	.word	0x0f030f0f
   3a168:	0303      	.short	0x0303
   3a16a:	681b      	ldr	r3, [r3, #0]
   3a16c:	2b01      	cmp	r3, #1
   3a16e:	d00b      	beq.n	3a188 <gnss_interface_getopt+0x6c>
   3a170:	2016      	movs	r0, #22
   3a172:	f7f1 f9e9 	bl	2b548 <bsd_os_errno_set>
   3a176:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a17a:	4628      	mov	r0, r5
   3a17c:	b007      	add	sp, #28
   3a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a182:	681b      	ldr	r3, [r3, #0]
   3a184:	2b02      	cmp	r3, #2
   3a186:	d1f3      	bne.n	3a170 <gnss_interface_getopt+0x54>
   3a188:	6823      	ldr	r3, [r4, #0]
   3a18a:	2212      	movs	r2, #18
   3a18c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3a190:	2100      	movs	r1, #0
   3a192:	a801      	add	r0, sp, #4
   3a194:	6023      	str	r3, [r4, #0]
   3a196:	f00e f817 	bl	481c8 <memset>
   3a19a:	2112      	movs	r1, #18
   3a19c:	4668      	mov	r0, sp
   3a19e:	f002 facd 	bl	3c73c <rpc_gnss_client_request_alloc>
   3a1a2:	4605      	mov	r5, r0
   3a1a4:	9800      	ldr	r0, [sp, #0]
   3a1a6:	2d00      	cmp	r5, #0
   3a1a8:	f040 808a 	bne.w	3a2c0 <gnss_interface_getopt+0x1a4>
   3a1ac:	2800      	cmp	r0, #0
   3a1ae:	f000 808e 	beq.w	3a2ce <gnss_interface_getopt+0x1b2>
   3a1b2:	f241 1602 	movw	r6, #4354	; 0x1102
   3a1b6:	f04f 0e49 	mov.w	lr, #73	; 0x49
   3a1ba:	2212      	movs	r2, #18
   3a1bc:	f04f 0976 	mov.w	r9, #118	; 0x76
   3a1c0:	f04f 0b43 	mov.w	fp, #67	; 0x43
   3a1c4:	f04f 0a54 	mov.w	sl, #84	; 0x54
   3a1c8:	f8df c168 	ldr.w	ip, [pc, #360]	; 3a334 <gnss_interface_getopt+0x218>
   3a1cc:	f880 e00f 	strb.w	lr, [r0, #15]
   3a1d0:	f8bc 3000 	ldrh.w	r3, [ip]
   3a1d4:	f880 900e 	strb.w	r9, [r0, #14]
   3a1d8:	3301      	adds	r3, #1
   3a1da:	b29b      	uxth	r3, r3
   3a1dc:	ea46 4e03 	orr.w	lr, r6, r3, lsl #16
   3a1e0:	f8cd e004 	str.w	lr, [sp, #4]
   3a1e4:	7145      	strb	r5, [r0, #5]
   3a1e6:	7185      	strb	r5, [r0, #6]
   3a1e8:	71c5      	strb	r5, [r0, #7]
   3a1ea:	7205      	strb	r5, [r0, #8]
   3a1ec:	7245      	strb	r5, [r0, #9]
   3a1ee:	7285      	strb	r5, [r0, #10]
   3a1f0:	72c5      	strb	r5, [r0, #11]
   3a1f2:	a901      	add	r1, sp, #4
   3a1f4:	7102      	strb	r2, [r0, #4]
   3a1f6:	f880 b00c 	strb.w	fp, [r0, #12]
   3a1fa:	f880 a00d 	strb.w	sl, [r0, #13]
   3a1fe:	f8df 9138 	ldr.w	r9, [pc, #312]	; 3a338 <gnss_interface_getopt+0x21c>
   3a202:	6800      	ldr	r0, [r0, #0]
   3a204:	f8ac 3000 	strh.w	r3, [ip]
   3a208:	f00d ffbe 	bl	48188 <memcpy>
   3a20c:	4631      	mov	r1, r6
   3a20e:	9800      	ldr	r0, [sp, #0]
   3a210:	f8c9 5000 	str.w	r5, [r9]
   3a214:	f002 faa6 	bl	3c764 <rpc_gnss_client_request_send>
   3a218:	2800      	cmp	r0, #0
   3a21a:	d15d      	bne.n	3a2d8 <gnss_interface_getopt+0x1bc>
   3a21c:	4e44      	ldr	r6, [pc, #272]	; (3a330 <gnss_interface_getopt+0x214>)
   3a21e:	4d43      	ldr	r5, [pc, #268]	; (3a32c <gnss_interface_getopt+0x210>)
   3a220:	4631      	mov	r1, r6
   3a222:	4628      	mov	r0, r5
   3a224:	f7f1 f8d0 	bl	2b3c8 <bsd_os_timedwait>
   3a228:	6823      	ldr	r3, [r4, #0]
   3a22a:	01db      	lsls	r3, r3, #7
   3a22c:	d4f8      	bmi.n	3a220 <gnss_interface_getopt+0x104>
   3a22e:	f8d9 0000 	ldr.w	r0, [r9]
   3a232:	b1d8      	cbz	r0, 3a26c <gnss_interface_getopt+0x150>
   3a234:	6825      	ldr	r5, [r4, #0]
   3a236:	f015 7500 	ands.w	r5, r5, #33554432	; 0x2000000
   3a23a:	d00f      	beq.n	3a25c <gnss_interface_getopt+0x140>
   3a23c:	2f05      	cmp	r7, #5
   3a23e:	d837      	bhi.n	3a2b0 <gnss_interface_getopt+0x194>
   3a240:	e8df f007 	tbb	[pc, r7]
   3a244:	2b26201a 	.word	0x2b26201a
   3a248:	0331      	.short	0x0331
   3a24a:	2500      	movs	r5, #0
   3a24c:	7b43      	ldrb	r3, [r0, #13]
   3a24e:	f888 3000 	strb.w	r3, [r8]
   3a252:	f002 faa5 	bl	3c7a0 <rpc_gnss_client_data_free>
   3a256:	2300      	movs	r3, #0
   3a258:	f8c9 3000 	str.w	r3, [r9]
   3a25c:	6823      	ldr	r3, [r4, #0]
   3a25e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3a262:	6023      	str	r3, [r4, #0]
   3a264:	4628      	mov	r0, r5
   3a266:	b007      	add	sp, #28
   3a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a26c:	6823      	ldr	r3, [r4, #0]
   3a26e:	4605      	mov	r5, r0
   3a270:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   3a274:	6023      	str	r3, [r4, #0]
   3a276:	e7f5      	b.n	3a264 <gnss_interface_getopt+0x148>
   3a278:	f8b0 300f 	ldrh.w	r3, [r0, #15]
   3a27c:	2500      	movs	r5, #0
   3a27e:	f8a8 3000 	strh.w	r3, [r8]
   3a282:	e7e6      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a284:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   3a288:	2500      	movs	r5, #0
   3a28a:	f8a8 3000 	strh.w	r3, [r8]
   3a28e:	e7e0      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a290:	7b83      	ldrb	r3, [r0, #14]
   3a292:	2500      	movs	r5, #0
   3a294:	f888 3000 	strb.w	r3, [r8]
   3a298:	e7db      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a29a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
   3a29e:	2500      	movs	r5, #0
   3a2a0:	f8a8 3000 	strh.w	r3, [r8]
   3a2a4:	e7d5      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a2a6:	7b03      	ldrb	r3, [r0, #12]
   3a2a8:	2500      	movs	r5, #0
   3a2aa:	f888 3000 	strb.w	r3, [r8]
   3a2ae:	e7d0      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a2b0:	2016      	movs	r0, #22
   3a2b2:	f7f1 f949 	bl	2b548 <bsd_os_errno_set>
   3a2b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a2ba:	f8d9 0000 	ldr.w	r0, [r9]
   3a2be:	e7c8      	b.n	3a252 <gnss_interface_getopt+0x136>
   3a2c0:	b128      	cbz	r0, 3a2ce <gnss_interface_getopt+0x1b2>
   3a2c2:	6803      	ldr	r3, [r0, #0]
   3a2c4:	b11b      	cbz	r3, 3a2ce <gnss_interface_getopt+0x1b2>
   3a2c6:	4618      	mov	r0, r3
   3a2c8:	f002 fa6a 	bl	3c7a0 <rpc_gnss_client_data_free>
   3a2cc:	9800      	ldr	r0, [sp, #0]
   3a2ce:	f002 fa5f 	bl	3c790 <rpc_gnss_client_message_free>
   3a2d2:	2023      	movs	r0, #35	; 0x23
   3a2d4:	f7f1 f938 	bl	2b548 <bsd_os_errno_set>
   3a2d8:	6823      	ldr	r3, [r4, #0]
   3a2da:	200e      	movs	r0, #14
   3a2dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3a2e0:	6023      	str	r3, [r4, #0]
   3a2e2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a2e6:	f7f1 f92f 	bl	2b548 <bsd_os_errno_set>
   3a2ea:	e746      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a2ec:	200e      	movs	r0, #14
   3a2ee:	f7f1 f92b 	bl	2b548 <bsd_os_errno_set>
   3a2f2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a2f6:	e740      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a2f8:	202a      	movs	r0, #42	; 0x2a
   3a2fa:	f7f1 f925 	bl	2b548 <bsd_os_errno_set>
   3a2fe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a302:	e73a      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a304:	2009      	movs	r0, #9
   3a306:	f7f1 f91f 	bl	2b548 <bsd_os_errno_set>
   3a30a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a30e:	e734      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a310:	2005      	movs	r0, #5
   3a312:	f7f1 f919 	bl	2b548 <bsd_os_errno_set>
   3a316:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a31a:	e72e      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a31c:	2073      	movs	r0, #115	; 0x73
   3a31e:	f7f1 f913 	bl	2b548 <bsd_os_errno_set>
   3a322:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a326:	e728      	b.n	3a17a <gnss_interface_getopt+0x5e>
   3a328:	20025e0c 	.word	0x20025e0c
   3a32c:	49765443 	.word	0x49765443
   3a330:	200208cc 	.word	0x200208cc
   3a334:	2002a9c2 	.word	0x2002a9c2
   3a338:	20025e10 	.word	0x20025e10

0003a33c <gnss_interface_init>:
   3a33c:	2100      	movs	r1, #0
   3a33e:	b538      	push	{r3, r4, r5, lr}
   3a340:	4c0a      	ldr	r4, [pc, #40]	; (3a36c <gnss_interface_init+0x30>)
   3a342:	4d0b      	ldr	r5, [pc, #44]	; (3a370 <gnss_interface_init+0x34>)
   3a344:	6822      	ldr	r2, [r4, #0]
   3a346:	480b      	ldr	r0, [pc, #44]	; (3a374 <gnss_interface_init+0x38>)
   3a348:	4b0b      	ldr	r3, [pc, #44]	; (3a378 <gnss_interface_init+0x3c>)
   3a34a:	402a      	ands	r2, r5
   3a34c:	6022      	str	r2, [r4, #0]
   3a34e:	8001      	strh	r1, [r0, #0]
   3a350:	6019      	str	r1, [r3, #0]
   3a352:	f002 f9e9 	bl	3c728 <rpc_gnss_client_init>
   3a356:	b938      	cbnz	r0, 3a368 <gnss_interface_init+0x2c>
   3a358:	2101      	movs	r1, #1
   3a35a:	6823      	ldr	r3, [r4, #0]
   3a35c:	4a07      	ldr	r2, [pc, #28]	; (3a37c <gnss_interface_init+0x40>)
   3a35e:	402b      	ands	r3, r5
   3a360:	430b      	orrs	r3, r1
   3a362:	7011      	strb	r1, [r2, #0]
   3a364:	6023      	str	r3, [r4, #0]
   3a366:	bd38      	pop	{r3, r4, r5, pc}
   3a368:	2003      	movs	r0, #3
   3a36a:	bd38      	pop	{r3, r4, r5, pc}
   3a36c:	20025e0c 	.word	0x20025e0c
   3a370:	ffff0000 	.word	0xffff0000
   3a374:	2002a9c2 	.word	0x2002a9c2
   3a378:	20025e10 	.word	0x20025e10
   3a37c:	2002d1bf 	.word	0x2002d1bf

0003a380 <gnss_interface_deinit>:
   3a380:	b538      	push	{r3, r4, r5, lr}
   3a382:	4b0b      	ldr	r3, [pc, #44]	; (3a3b0 <gnss_interface_deinit+0x30>)
   3a384:	681b      	ldr	r3, [r3, #0]
   3a386:	b29b      	uxth	r3, r3
   3a388:	b90b      	cbnz	r3, 3a38e <gnss_interface_deinit+0xe>
   3a38a:	2000      	movs	r0, #0
   3a38c:	bd38      	pop	{r3, r4, r5, pc}
   3a38e:	f002 f9d1 	bl	3c734 <rpc_gnss_client_deinit>
   3a392:	4604      	mov	r4, r0
   3a394:	b950      	cbnz	r0, 3a3ac <gnss_interface_deinit+0x2c>
   3a396:	4d07      	ldr	r5, [pc, #28]	; (3a3b4 <gnss_interface_deinit+0x34>)
   3a398:	4b07      	ldr	r3, [pc, #28]	; (3a3b8 <gnss_interface_deinit+0x38>)
   3a39a:	6828      	ldr	r0, [r5, #0]
   3a39c:	701c      	strb	r4, [r3, #0]
   3a39e:	2800      	cmp	r0, #0
   3a3a0:	d0f3      	beq.n	3a38a <gnss_interface_deinit+0xa>
   3a3a2:	f002 fb07 	bl	3c9b4 <packet_handler_delete>
   3a3a6:	602c      	str	r4, [r5, #0]
   3a3a8:	4620      	mov	r0, r4
   3a3aa:	bd38      	pop	{r3, r4, r5, pc}
   3a3ac:	2003      	movs	r0, #3
   3a3ae:	bd38      	pop	{r3, r4, r5, pc}
   3a3b0:	20025e0c 	.word	0x20025e0c
   3a3b4:	20025e14 	.word	0x20025e14
   3a3b8:	2002d1bf 	.word	0x2002d1bf

0003a3bc <gnss_interface_open>:
   3a3bc:	b510      	push	{r4, lr}
   3a3be:	4b1c      	ldr	r3, [pc, #112]	; (3a430 <gnss_interface_open+0x74>)
   3a3c0:	781b      	ldrb	r3, [r3, #0]
   3a3c2:	b34b      	cbz	r3, 3a418 <gnss_interface_open+0x5c>
   3a3c4:	2902      	cmp	r1, #2
   3a3c6:	d121      	bne.n	3a40c <gnss_interface_open+0x50>
   3a3c8:	4c1a      	ldr	r4, [pc, #104]	; (3a434 <gnss_interface_open+0x78>)
   3a3ca:	6823      	ldr	r3, [r4, #0]
   3a3cc:	b29b      	uxth	r3, r3
   3a3ce:	2b01      	cmp	r3, #1
   3a3d0:	d116      	bne.n	3a400 <gnss_interface_open+0x44>
   3a3d2:	6823      	ldr	r3, [r4, #0]
   3a3d4:	4608      	mov	r0, r1
   3a3d6:	0c1b      	lsrs	r3, r3, #16
   3a3d8:	041b      	lsls	r3, r3, #16
   3a3da:	f043 0302 	orr.w	r3, r3, #2
   3a3de:	2200      	movs	r2, #0
   3a3e0:	4915      	ldr	r1, [pc, #84]	; (3a438 <gnss_interface_open+0x7c>)
   3a3e2:	6023      	str	r3, [r4, #0]
   3a3e4:	f002 fac6 	bl	3c974 <packet_handler_create>
   3a3e8:	4a14      	ldr	r2, [pc, #80]	; (3a43c <gnss_interface_open+0x80>)
   3a3ea:	6010      	str	r0, [r2, #0]
   3a3ec:	b1d0      	cbz	r0, 3a424 <gnss_interface_open+0x68>
   3a3ee:	6823      	ldr	r3, [r4, #0]
   3a3f0:	6802      	ldr	r2, [r0, #0]
   3a3f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3a3f6:	6812      	ldr	r2, [r2, #0]
   3a3f8:	6023      	str	r3, [r4, #0]
   3a3fa:	4790      	blx	r2
   3a3fc:	4810      	ldr	r0, [pc, #64]	; (3a440 <gnss_interface_open+0x84>)
   3a3fe:	bd10      	pop	{r4, pc}
   3a400:	2005      	movs	r0, #5
   3a402:	f7f1 f8a1 	bl	2b548 <bsd_os_errno_set>
   3a406:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a40a:	bd10      	pop	{r4, pc}
   3a40c:	2029      	movs	r0, #41	; 0x29
   3a40e:	f7f1 f89b 	bl	2b548 <bsd_os_errno_set>
   3a412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a416:	bd10      	pop	{r4, pc}
   3a418:	2070      	movs	r0, #112	; 0x70
   3a41a:	f7f1 f895 	bl	2b548 <bsd_os_errno_set>
   3a41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a422:	bd10      	pop	{r4, pc}
   3a424:	200e      	movs	r0, #14
   3a426:	f7f1 f88f 	bl	2b548 <bsd_os_errno_set>
   3a42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a42e:	bd10      	pop	{r4, pc}
   3a430:	2002d1bf 	.word	0x2002d1bf
   3a434:	20025e0c 	.word	0x20025e0c
   3a438:	0003965d 	.word	0x0003965d
   3a43c:	20025e14 	.word	0x20025e14
   3a440:	49765443 	.word	0x49765443

0003a444 <gnss_interface_close>:
   3a444:	b530      	push	{r4, r5, lr}
   3a446:	4b15      	ldr	r3, [pc, #84]	; (3a49c <gnss_interface_close+0x58>)
   3a448:	b085      	sub	sp, #20
   3a44a:	4298      	cmp	r0, r3
   3a44c:	d11f      	bne.n	3a48e <gnss_interface_close+0x4a>
   3a44e:	4c14      	ldr	r4, [pc, #80]	; (3a4a0 <gnss_interface_close+0x5c>)
   3a450:	6822      	ldr	r2, [r4, #0]
   3a452:	b292      	uxth	r2, r2
   3a454:	2a04      	cmp	r2, #4
   3a456:	d00f      	beq.n	3a478 <gnss_interface_close+0x34>
   3a458:	4d12      	ldr	r5, [pc, #72]	; (3a4a4 <gnss_interface_close+0x60>)
   3a45a:	6828      	ldr	r0, [r5, #0]
   3a45c:	b118      	cbz	r0, 3a466 <gnss_interface_close+0x22>
   3a45e:	f002 faa9 	bl	3c9b4 <packet_handler_delete>
   3a462:	2300      	movs	r3, #0
   3a464:	602b      	str	r3, [r5, #0]
   3a466:	2000      	movs	r0, #0
   3a468:	6823      	ldr	r3, [r4, #0]
   3a46a:	0c1b      	lsrs	r3, r3, #16
   3a46c:	041b      	lsls	r3, r3, #16
   3a46e:	f043 0301 	orr.w	r3, r3, #1
   3a472:	6023      	str	r3, [r4, #0]
   3a474:	b005      	add	sp, #20
   3a476:	bd30      	pop	{r4, r5, pc}
   3a478:	2100      	movs	r1, #0
   3a47a:	ab04      	add	r3, sp, #16
   3a47c:	f843 1d04 	str.w	r1, [r3, #-4]!
   3a480:	9200      	str	r2, [sp, #0]
   3a482:	f44f 7101 	mov.w	r1, #516	; 0x204
   3a486:	2208      	movs	r2, #8
   3a488:	f001 ffce 	bl	3c428 <nrf_setsockopt>
   3a48c:	e7e4      	b.n	3a458 <gnss_interface_close+0x14>
   3a48e:	2009      	movs	r0, #9
   3a490:	f7f1 f85a 	bl	2b548 <bsd_os_errno_set>
   3a494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a498:	e7ec      	b.n	3a474 <gnss_interface_close+0x30>
   3a49a:	bf00      	nop
   3a49c:	49765443 	.word	0x49765443
   3a4a0:	20025e0c 	.word	0x20025e0c
   3a4a4:	20025e14 	.word	0x20025e14

0003a4a8 <rpc_logobj_client_evt_handler>:
   3a4a8:	b120      	cbz	r0, 3a4b4 <rpc_logobj_client_evt_handler+0xc>
   3a4aa:	f850 1b08 	ldr.w	r1, [r0], #8
   3a4ae:	0c09      	lsrs	r1, r1, #16
   3a4b0:	f7fb b884 	b.w	355bc <logobj_event_handler>
   3a4b4:	4770      	bx	lr
   3a4b6:	bf00      	nop

0003a4b8 <rpc_logobj_client_init>:
   3a4b8:	4801      	ldr	r0, [pc, #4]	; (3a4c0 <rpc_logobj_client_init+0x8>)
   3a4ba:	f7fe bfcb 	b.w	39454 <rpc_client_register>
   3a4be:	bf00      	nop
   3a4c0:	0004a4dc 	.word	0x0004a4dc

0003a4c4 <rpc_logobj_client_deinit>:
   3a4c4:	2009      	movs	r0, #9
   3a4c6:	f7ff b82f 	b.w	39528 <rpc_client_unregister>
   3a4ca:	bf00      	nop

0003a4cc <rpc_logobj_client_request_alloc>:
   3a4cc:	2300      	movs	r3, #0
   3a4ce:	b510      	push	{r4, lr}
   3a4d0:	b082      	sub	sp, #8
   3a4d2:	9301      	str	r3, [sp, #4]
   3a4d4:	b961      	cbnz	r1, 3a4f0 <rpc_logobj_client_request_alloc+0x24>
   3a4d6:	b170      	cbz	r0, 3a4f6 <rpc_logobj_client_request_alloc+0x2a>
   3a4d8:	4604      	mov	r4, r0
   3a4da:	aa01      	add	r2, sp, #4
   3a4dc:	2009      	movs	r0, #9
   3a4de:	f7ff f879 	bl	395d4 <rpc_message_alloc>
   3a4e2:	b918      	cbnz	r0, 3a4ec <rpc_logobj_client_request_alloc+0x20>
   3a4e4:	9b01      	ldr	r3, [sp, #4]
   3a4e6:	b10b      	cbz	r3, 3a4ec <rpc_logobj_client_request_alloc+0x20>
   3a4e8:	3308      	adds	r3, #8
   3a4ea:	6023      	str	r3, [r4, #0]
   3a4ec:	b002      	add	sp, #8
   3a4ee:	bd10      	pop	{r4, pc}
   3a4f0:	200f      	movs	r0, #15
   3a4f2:	b002      	add	sp, #8
   3a4f4:	bd10      	pop	{r4, pc}
   3a4f6:	200e      	movs	r0, #14
   3a4f8:	b002      	add	sp, #8
   3a4fa:	bd10      	pop	{r4, pc}

0003a4fc <rpc_logobj_client_request_send>:
   3a4fc:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3a500:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   3a504:	d10b      	bne.n	3a51e <rpc_logobj_client_request_send+0x22>
   3a506:	b160      	cbz	r0, 3a522 <rpc_logobj_client_request_send+0x26>
   3a508:	4603      	mov	r3, r0
   3a50a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3a50e:	2009      	movs	r0, #9
   3a510:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3a514:	f843 1d08 	str.w	r1, [r3, #-8]!
   3a518:	4619      	mov	r1, r3
   3a51a:	f7ff b84b 	b.w	395b4 <rpc_message_send>
   3a51e:	200f      	movs	r0, #15
   3a520:	4770      	bx	lr
   3a522:	200e      	movs	r0, #14
   3a524:	4770      	bx	lr
   3a526:	bf00      	nop

0003a528 <rpc_logobj_client_message_free>:
   3a528:	b120      	cbz	r0, 3a534 <rpc_logobj_client_message_free+0xc>
   3a52a:	f1a0 0108 	sub.w	r1, r0, #8
   3a52e:	2009      	movs	r0, #9
   3a530:	f7ff b87c 	b.w	3962c <rpc_message_free>
   3a534:	200e      	movs	r0, #14
   3a536:	4770      	bx	lr

0003a538 <rpc_logobj_client_data_free>:
   3a538:	b118      	cbz	r0, 3a542 <rpc_logobj_client_data_free+0xa>
   3a53a:	4601      	mov	r1, r0
   3a53c:	2009      	movs	r0, #9
   3a53e:	f7ff b881 	b.w	39644 <rpc_message_data_free>
   3a542:	200e      	movs	r0, #14
   3a544:	4770      	bx	lr
   3a546:	bf00      	nop

0003a548 <dfu_client_event_handler>:
   3a548:	f850 1b08 	ldr.w	r1, [r0], #8
   3a54c:	0c09      	lsrs	r1, r1, #16
   3a54e:	f002 bfe7 	b.w	3d520 <rpc_dfu_event_handler>
   3a552:	bf00      	nop

0003a554 <rpc_dfu_client_init>:
   3a554:	4801      	ldr	r0, [pc, #4]	; (3a55c <rpc_dfu_client_init+0x8>)
   3a556:	f7fe bf7d 	b.w	39454 <rpc_client_register>
   3a55a:	bf00      	nop
   3a55c:	0004a4ec 	.word	0x0004a4ec

0003a560 <rpc_dfu_client_deinit>:
   3a560:	2006      	movs	r0, #6
   3a562:	f7fe bfe1 	b.w	39528 <rpc_client_unregister>
   3a566:	bf00      	nop

0003a568 <rpc_dfu_client_request_alloc>:
   3a568:	2300      	movs	r3, #0
   3a56a:	b510      	push	{r4, lr}
   3a56c:	b082      	sub	sp, #8
   3a56e:	9301      	str	r3, [sp, #4]
   3a570:	b158      	cbz	r0, 3a58a <rpc_dfu_client_request_alloc+0x22>
   3a572:	4604      	mov	r4, r0
   3a574:	aa01      	add	r2, sp, #4
   3a576:	2006      	movs	r0, #6
   3a578:	f7ff f82c 	bl	395d4 <rpc_message_alloc>
   3a57c:	b918      	cbnz	r0, 3a586 <rpc_dfu_client_request_alloc+0x1e>
   3a57e:	9b01      	ldr	r3, [sp, #4]
   3a580:	b10b      	cbz	r3, 3a586 <rpc_dfu_client_request_alloc+0x1e>
   3a582:	3308      	adds	r3, #8
   3a584:	6023      	str	r3, [r4, #0]
   3a586:	b002      	add	sp, #8
   3a588:	bd10      	pop	{r4, pc}
   3a58a:	2007      	movs	r0, #7
   3a58c:	b002      	add	sp, #8
   3a58e:	bd10      	pop	{r4, pc}

0003a590 <rpc_dfu_client_request_send>:
   3a590:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   3a594:	d10b      	bne.n	3a5ae <rpc_dfu_client_request_send+0x1e>
   3a596:	b160      	cbz	r0, 3a5b2 <rpc_dfu_client_request_send+0x22>
   3a598:	4603      	mov	r3, r0
   3a59a:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3a59e:	2006      	movs	r0, #6
   3a5a0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3a5a4:	f843 1d08 	str.w	r1, [r3, #-8]!
   3a5a8:	4619      	mov	r1, r3
   3a5aa:	f7ff b803 	b.w	395b4 <rpc_message_send>
   3a5ae:	200f      	movs	r0, #15
   3a5b0:	4770      	bx	lr
   3a5b2:	2007      	movs	r0, #7
   3a5b4:	4770      	bx	lr
   3a5b6:	bf00      	nop

0003a5b8 <rpc_dfu_client_message_free>:
   3a5b8:	b120      	cbz	r0, 3a5c4 <rpc_dfu_client_message_free+0xc>
   3a5ba:	f1a0 0108 	sub.w	r1, r0, #8
   3a5be:	2006      	movs	r0, #6
   3a5c0:	f7ff b834 	b.w	3962c <rpc_message_free>
   3a5c4:	2007      	movs	r0, #7
   3a5c6:	4770      	bx	lr

0003a5c8 <rpc_dfu_client_data_free>:
   3a5c8:	b118      	cbz	r0, 3a5d2 <rpc_dfu_client_data_free+0xa>
   3a5ca:	4601      	mov	r1, r0
   3a5cc:	2006      	movs	r0, #6
   3a5ce:	f7ff b839 	b.w	39644 <rpc_message_data_free>
   3a5d2:	2007      	movs	r0, #7
   3a5d4:	4770      	bx	lr
   3a5d6:	bf00      	nop

0003a5d8 <packet_free_cb>:
   3a5d8:	6800      	ldr	r0, [r0, #0]
   3a5da:	f003 bd6d 	b.w	3e0b8 <rpc_at_client_data_free>
   3a5de:	bf00      	nop

0003a5e0 <at_interface_write>:
   3a5e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a5e4:	b083      	sub	sp, #12
   3a5e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   3a5e8:	2c00      	cmp	r4, #0
   3a5ea:	d16c      	bne.n	3a6c6 <at_interface_write+0xe6>
   3a5ec:	4688      	mov	r8, r1
   3a5ee:	4615      	mov	r5, r2
   3a5f0:	461e      	mov	r6, r3
   3a5f2:	4607      	mov	r7, r0
   3a5f4:	f003 fbd0 	bl	3dd98 <interface_socket_from_handle_get>
   3a5f8:	4604      	mov	r4, r0
   3a5fa:	2e00      	cmp	r6, #0
   3a5fc:	d137      	bne.n	3a66e <at_interface_write+0x8e>
   3a5fe:	2800      	cmp	r0, #0
   3a600:	d067      	beq.n	3a6d2 <at_interface_write+0xf2>
   3a602:	6803      	ldr	r3, [r0, #0]
   3a604:	039b      	lsls	r3, r3, #14
   3a606:	d564      	bpl.n	3a6d2 <at_interface_write+0xf2>
   3a608:	6803      	ldr	r3, [r0, #0]
   3a60a:	4629      	mov	r1, r5
   3a60c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3a610:	6003      	str	r3, [r0, #0]
   3a612:	6803      	ldr	r3, [r0, #0]
   3a614:	4668      	mov	r0, sp
   3a616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   3a61a:	6023      	str	r3, [r4, #0]
   3a61c:	f003 fd22 	bl	3e064 <rpc_at_client_request_alloc>
   3a620:	4606      	mov	r6, r0
   3a622:	4638      	mov	r0, r7
   3a624:	f003 fbb8 	bl	3dd98 <interface_socket_from_handle_get>
   3a628:	4681      	mov	r9, r0
   3a62a:	bb56      	cbnz	r6, 3a682 <at_interface_write+0xa2>
   3a62c:	2304      	movs	r3, #4
   3a62e:	9800      	ldr	r0, [sp, #0]
   3a630:	7203      	strb	r3, [r0, #8]
   3a632:	7246      	strb	r6, [r0, #9]
   3a634:	7286      	strb	r6, [r0, #10]
   3a636:	72c6      	strb	r6, [r0, #11]
   3a638:	60c7      	str	r7, [r0, #12]
   3a63a:	bb25      	cbnz	r5, 3a686 <at_interface_write+0xa6>
   3a63c:	2101      	movs	r1, #1
   3a63e:	f003 fd25 	bl	3e08c <rpc_at_client_request_send>
   3a642:	bb78      	cbnz	r0, 3a6a4 <at_interface_write+0xc4>
   3a644:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
   3a648:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   3a64c:	2900      	cmp	r1, #0
   3a64e:	bf08      	it	eq
   3a650:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   3a654:	ab02      	add	r3, sp, #8
   3a656:	f843 1d04 	str.w	r1, [r3, #-4]!
   3a65a:	4638      	mov	r0, r7
   3a65c:	4611      	mov	r1, r2
   3a65e:	f003 fb27 	bl	3dcb0 <interface_socket_wait>
   3a662:	b320      	cbz	r0, 3a6ae <at_interface_write+0xce>
   3a664:	6823      	ldr	r3, [r4, #0]
   3a666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3a66a:	6023      	str	r3, [r4, #0]
   3a66c:	e002      	b.n	3a674 <at_interface_write+0x94>
   3a66e:	b390      	cbz	r0, 3a6d6 <at_interface_write+0xf6>
   3a670:	6803      	ldr	r3, [r0, #0]
   3a672:	202d      	movs	r0, #45	; 0x2d
   3a674:	f7f0 ff68 	bl	2b548 <bsd_os_errno_set>
   3a678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a67c:	b003      	add	sp, #12
   3a67e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a682:	200c      	movs	r0, #12
   3a684:	e7ee      	b.n	3a664 <at_interface_write+0x84>
   3a686:	4641      	mov	r1, r8
   3a688:	6800      	ldr	r0, [r0, #0]
   3a68a:	462a      	mov	r2, r5
   3a68c:	f00d fd7c 	bl	48188 <memcpy>
   3a690:	2101      	movs	r1, #1
   3a692:	9800      	ldr	r0, [sp, #0]
   3a694:	f003 fcfa 	bl	3e08c <rpc_at_client_request_send>
   3a698:	2800      	cmp	r0, #0
   3a69a:	d0d3      	beq.n	3a644 <at_interface_write+0x64>
   3a69c:	9b00      	ldr	r3, [sp, #0]
   3a69e:	6818      	ldr	r0, [r3, #0]
   3a6a0:	f003 fd0a 	bl	3e0b8 <rpc_at_client_data_free>
   3a6a4:	9800      	ldr	r0, [sp, #0]
   3a6a6:	f003 fcff 	bl	3e0a8 <rpc_at_client_message_free>
   3a6aa:	2023      	movs	r0, #35	; 0x23
   3a6ac:	e7da      	b.n	3a664 <at_interface_write+0x84>
   3a6ae:	4638      	mov	r0, r7
   3a6b0:	f003 fb72 	bl	3dd98 <interface_socket_from_handle_get>
   3a6b4:	4603      	mov	r3, r0
   3a6b6:	b120      	cbz	r0, 3a6c2 <at_interface_write+0xe2>
   3a6b8:	6840      	ldr	r0, [r0, #4]
   3a6ba:	b110      	cbz	r0, 3a6c2 <at_interface_write+0xe2>
   3a6bc:	2200      	movs	r2, #0
   3a6be:	605a      	str	r2, [r3, #4]
   3a6c0:	e7d0      	b.n	3a664 <at_interface_write+0x84>
   3a6c2:	4628      	mov	r0, r5
   3a6c4:	e7da      	b.n	3a67c <at_interface_write+0x9c>
   3a6c6:	2038      	movs	r0, #56	; 0x38
   3a6c8:	f7f0 ff3e 	bl	2b548 <bsd_os_errno_set>
   3a6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3a6d0:	e7d4      	b.n	3a67c <at_interface_write+0x9c>
   3a6d2:	2016      	movs	r0, #22
   3a6d4:	e7ce      	b.n	3a674 <at_interface_write+0x94>
   3a6d6:	202d      	movs	r0, #45	; 0x2d
   3a6d8:	e7cc      	b.n	3a674 <at_interface_write+0x94>
   3a6da:	bf00      	nop

0003a6dc <at_interface_init>:
   3a6dc:	b508      	push	{r3, lr}
   3a6de:	f003 fcb7 	bl	3e050 <rpc_at_client_init>
   3a6e2:	b910      	cbnz	r0, 3a6ea <at_interface_init+0xe>
   3a6e4:	2201      	movs	r2, #1
   3a6e6:	4b01      	ldr	r3, [pc, #4]	; (3a6ec <at_interface_init+0x10>)
   3a6e8:	701a      	strb	r2, [r3, #0]
   3a6ea:	bd08      	pop	{r3, pc}
   3a6ec:	2002d1c0 	.word	0x2002d1c0

0003a6f0 <at_interface_deinit>:
   3a6f0:	b510      	push	{r4, lr}
   3a6f2:	4c05      	ldr	r4, [pc, #20]	; (3a708 <at_interface_deinit+0x18>)
   3a6f4:	7820      	ldrb	r0, [r4, #0]
   3a6f6:	b900      	cbnz	r0, 3a6fa <at_interface_deinit+0xa>
   3a6f8:	bd10      	pop	{r4, pc}
   3a6fa:	f003 fcaf 	bl	3e05c <rpc_at_client_deinit>
   3a6fe:	b908      	cbnz	r0, 3a704 <at_interface_deinit+0x14>
   3a700:	7020      	strb	r0, [r4, #0]
   3a702:	bd10      	pop	{r4, pc}
   3a704:	2003      	movs	r0, #3
   3a706:	bd10      	pop	{r4, pc}
   3a708:	2002d1c0 	.word	0x2002d1c0

0003a70c <at_interface_open>:
   3a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a710:	2600      	movs	r6, #0
   3a712:	4b34      	ldr	r3, [pc, #208]	; (3a7e4 <at_interface_open+0xd8>)
   3a714:	b084      	sub	sp, #16
   3a716:	781b      	ldrb	r3, [r3, #0]
   3a718:	9601      	str	r6, [sp, #4]
   3a71a:	2b00      	cmp	r3, #0
   3a71c:	d05c      	beq.n	3a7d8 <at_interface_open+0xcc>
   3a71e:	2902      	cmp	r1, #2
   3a720:	460d      	mov	r5, r1
   3a722:	d153      	bne.n	3a7cc <at_interface_open+0xc0>
   3a724:	4680      	mov	r8, r0
   3a726:	4617      	mov	r7, r2
   3a728:	a801      	add	r0, sp, #4
   3a72a:	4a2f      	ldr	r2, [pc, #188]	; (3a7e8 <at_interface_open+0xdc>)
   3a72c:	f003 fa0e 	bl	3db4c <interface_socket_allocate>
   3a730:	9b01      	ldr	r3, [sp, #4]
   3a732:	4604      	mov	r4, r0
   3a734:	b3c3      	cbz	r3, 3a7a8 <at_interface_open+0x9c>
   3a736:	615f      	str	r7, [r3, #20]
   3a738:	4631      	mov	r1, r6
   3a73a:	e9c3 8503 	strd	r8, r5, [r3, #12]
   3a73e:	a802      	add	r0, sp, #8
   3a740:	f003 fc90 	bl	3e064 <rpc_at_client_request_alloc>
   3a744:	4606      	mov	r6, r0
   3a746:	4620      	mov	r0, r4
   3a748:	f003 fb26 	bl	3dd98 <interface_socket_from_handle_get>
   3a74c:	4607      	mov	r7, r0
   3a74e:	bb16      	cbnz	r6, 3a796 <at_interface_open+0x8a>
   3a750:	2304      	movs	r3, #4
   3a752:	9802      	ldr	r0, [sp, #8]
   3a754:	2105      	movs	r1, #5
   3a756:	7246      	strb	r6, [r0, #9]
   3a758:	7286      	strb	r6, [r0, #10]
   3a75a:	72c6      	strb	r6, [r0, #11]
   3a75c:	7203      	strb	r3, [r0, #8]
   3a75e:	60c4      	str	r4, [r0, #12]
   3a760:	f003 fc94 	bl	3e08c <rpc_at_client_request_send>
   3a764:	4606      	mov	r6, r0
   3a766:	bb60      	cbnz	r0, 3a7c2 <at_interface_open+0xb6>
   3a768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3a76a:	ab04      	add	r3, sp, #16
   3a76c:	2a00      	cmp	r2, #0
   3a76e:	bf08      	it	eq
   3a770:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   3a774:	4629      	mov	r1, r5
   3a776:	f843 2d04 	str.w	r2, [r3, #-4]!
   3a77a:	4620      	mov	r0, r4
   3a77c:	462a      	mov	r2, r5
   3a77e:	f003 fa97 	bl	3dcb0 <interface_socket_wait>
   3a782:	4605      	mov	r5, r0
   3a784:	b940      	cbnz	r0, 3a798 <at_interface_open+0x8c>
   3a786:	4620      	mov	r0, r4
   3a788:	f003 fb06 	bl	3dd98 <interface_socket_from_handle_get>
   3a78c:	b180      	cbz	r0, 3a7b0 <at_interface_open+0xa4>
   3a78e:	6845      	ldr	r5, [r0, #4]
   3a790:	b175      	cbz	r5, 3a7b0 <at_interface_open+0xa4>
   3a792:	6046      	str	r6, [r0, #4]
   3a794:	e000      	b.n	3a798 <at_interface_open+0x8c>
   3a796:	250c      	movs	r5, #12
   3a798:	4620      	mov	r0, r4
   3a79a:	f003 fa3b 	bl	3dc14 <interface_socket_free>
   3a79e:	4628      	mov	r0, r5
   3a7a0:	f7f0 fed2 	bl	2b548 <bsd_os_errno_set>
   3a7a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3a7a8:	4620      	mov	r0, r4
   3a7aa:	b004      	add	sp, #16
   3a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a7b0:	4620      	mov	r0, r4
   3a7b2:	9a01      	ldr	r2, [sp, #4]
   3a7b4:	6813      	ldr	r3, [r2, #0]
   3a7b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3a7ba:	6013      	str	r3, [r2, #0]
   3a7bc:	b004      	add	sp, #16
   3a7be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a7c2:	9802      	ldr	r0, [sp, #8]
   3a7c4:	f003 fc70 	bl	3e0a8 <rpc_at_client_message_free>
   3a7c8:	2523      	movs	r5, #35	; 0x23
   3a7ca:	e7e5      	b.n	3a798 <at_interface_open+0x8c>
   3a7cc:	2029      	movs	r0, #41	; 0x29
   3a7ce:	f7f0 febb 	bl	2b548 <bsd_os_errno_set>
   3a7d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3a7d6:	e7e7      	b.n	3a7a8 <at_interface_open+0x9c>
   3a7d8:	2070      	movs	r0, #112	; 0x70
   3a7da:	f7f0 feb5 	bl	2b548 <bsd_os_errno_set>
   3a7de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3a7e2:	e7e1      	b.n	3a7a8 <at_interface_open+0x9c>
   3a7e4:	2002d1c0 	.word	0x2002d1c0
   3a7e8:	0003a5d9 	.word	0x0003a5d9

0003a7ec <at_interface_close>:
   3a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a7f0:	b082      	sub	sp, #8
   3a7f2:	4606      	mov	r6, r0
   3a7f4:	f003 fad0 	bl	3dd98 <interface_socket_from_handle_get>
   3a7f8:	2800      	cmp	r0, #0
   3a7fa:	d051      	beq.n	3a8a0 <at_interface_close+0xb4>
   3a7fc:	230d      	movs	r3, #13
   3a7fe:	6807      	ldr	r7, [r0, #0]
   3a800:	6003      	str	r3, [r0, #0]
   3a802:	6803      	ldr	r3, [r0, #0]
   3a804:	4604      	mov	r4, r0
   3a806:	039b      	lsls	r3, r3, #14
   3a808:	d42e      	bmi.n	3a868 <at_interface_close+0x7c>
   3a80a:	2100      	movs	r1, #0
   3a80c:	4668      	mov	r0, sp
   3a80e:	f003 fc29 	bl	3e064 <rpc_at_client_request_alloc>
   3a812:	4605      	mov	r5, r0
   3a814:	4630      	mov	r0, r6
   3a816:	f003 fabf 	bl	3dd98 <interface_socket_from_handle_get>
   3a81a:	4680      	mov	r8, r0
   3a81c:	bb75      	cbnz	r5, 3a87c <at_interface_close+0x90>
   3a81e:	2304      	movs	r3, #4
   3a820:	9800      	ldr	r0, [sp, #0]
   3a822:	2106      	movs	r1, #6
   3a824:	7203      	strb	r3, [r0, #8]
   3a826:	7245      	strb	r5, [r0, #9]
   3a828:	7285      	strb	r5, [r0, #10]
   3a82a:	72c5      	strb	r5, [r0, #11]
   3a82c:	60c6      	str	r6, [r0, #12]
   3a82e:	f003 fc2d 	bl	3e08c <rpc_at_client_request_send>
   3a832:	b9f0      	cbnz	r0, 3a872 <at_interface_close+0x86>
   3a834:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
   3a838:	220e      	movs	r2, #14
   3a83a:	2900      	cmp	r1, #0
   3a83c:	bf08      	it	eq
   3a83e:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   3a842:	ab02      	add	r3, sp, #8
   3a844:	f843 1d04 	str.w	r1, [r3, #-4]!
   3a848:	4630      	mov	r0, r6
   3a84a:	4611      	mov	r1, r2
   3a84c:	f003 fa30 	bl	3dcb0 <interface_socket_wait>
   3a850:	4605      	mov	r5, r0
   3a852:	b1a8      	cbz	r0, 3a880 <at_interface_close+0x94>
   3a854:	6027      	str	r7, [r4, #0]
   3a856:	4628      	mov	r0, r5
   3a858:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3a85c:	f7f0 fe74 	bl	2b548 <bsd_os_errno_set>
   3a860:	4628      	mov	r0, r5
   3a862:	b002      	add	sp, #8
   3a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a868:	6803      	ldr	r3, [r0, #0]
   3a86a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3a86e:	6003      	str	r3, [r0, #0]
   3a870:	e7cb      	b.n	3a80a <at_interface_close+0x1e>
   3a872:	9800      	ldr	r0, [sp, #0]
   3a874:	f003 fc18 	bl	3e0a8 <rpc_at_client_message_free>
   3a878:	2523      	movs	r5, #35	; 0x23
   3a87a:	e7eb      	b.n	3a854 <at_interface_close+0x68>
   3a87c:	250c      	movs	r5, #12
   3a87e:	e7e9      	b.n	3a854 <at_interface_close+0x68>
   3a880:	4630      	mov	r0, r6
   3a882:	f003 fa89 	bl	3dd98 <interface_socket_from_handle_get>
   3a886:	b120      	cbz	r0, 3a892 <at_interface_close+0xa6>
   3a888:	6843      	ldr	r3, [r0, #4]
   3a88a:	b113      	cbz	r3, 3a892 <at_interface_close+0xa6>
   3a88c:	6045      	str	r5, [r0, #4]
   3a88e:	461d      	mov	r5, r3
   3a890:	e7e0      	b.n	3a854 <at_interface_close+0x68>
   3a892:	4630      	mov	r0, r6
   3a894:	f003 f9be 	bl	3dc14 <interface_socket_free>
   3a898:	4628      	mov	r0, r5
   3a89a:	b002      	add	sp, #8
   3a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3a8a0:	2516      	movs	r5, #22
   3a8a2:	e7d8      	b.n	3a856 <at_interface_close+0x6a>

0003a8a4 <at_interface_read>:
   3a8a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a8a8:	b087      	sub	sp, #28
   3a8aa:	4688      	mov	r8, r1
   3a8ac:	4615      	mov	r5, r2
   3a8ae:	461e      	mov	r6, r3
   3a8b0:	4607      	mov	r7, r0
   3a8b2:	f003 fa71 	bl	3dd98 <interface_socket_from_handle_get>
   3a8b6:	2800      	cmp	r0, #0
   3a8b8:	f000 8084 	beq.w	3a9c4 <at_interface_read+0x120>
   3a8bc:	2300      	movs	r3, #0
   3a8be:	4604      	mov	r4, r0
   3a8c0:	e9cd 8502 	strd	r8, r5, [sp, #8]
   3a8c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
   3a8c8:	2e00      	cmp	r6, #0
   3a8ca:	d12d      	bne.n	3a928 <at_interface_read+0x84>
   3a8cc:	f016 0502 	ands.w	r5, r6, #2
   3a8d0:	d148      	bne.n	3a964 <at_interface_read+0xc0>
   3a8d2:	46a8      	mov	r8, r5
   3a8d4:	6823      	ldr	r3, [r4, #0]
   3a8d6:	69e0      	ldr	r0, [r4, #28]
   3a8d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3a8dc:	6023      	str	r3, [r4, #0]
   3a8de:	6803      	ldr	r3, [r0, #0]
   3a8e0:	4632      	mov	r2, r6
   3a8e2:	689b      	ldr	r3, [r3, #8]
   3a8e4:	a902      	add	r1, sp, #8
   3a8e6:	4798      	blx	r3
   3a8e8:	f1b0 0900 	subs.w	r9, r0, #0
   3a8ec:	da2a      	bge.n	3a944 <at_interface_read+0xa0>
   3a8ee:	2d00      	cmp	r5, #0
   3a8f0:	d15e      	bne.n	3a9b0 <at_interface_read+0x10c>
   3a8f2:	6a25      	ldr	r5, [r4, #32]
   3a8f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   3a8f8:	2d00      	cmp	r5, #0
   3a8fa:	bf08      	it	eq
   3a8fc:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   3a900:	4611      	mov	r1, r2
   3a902:	ab01      	add	r3, sp, #4
   3a904:	4638      	mov	r0, r7
   3a906:	9501      	str	r5, [sp, #4]
   3a908:	f003 f9d2 	bl	3dcb0 <interface_socket_wait>
   3a90c:	4605      	mov	r5, r0
   3a90e:	2800      	cmp	r0, #0
   3a910:	d1e0      	bne.n	3a8d4 <at_interface_read+0x30>
   3a912:	4638      	mov	r0, r7
   3a914:	f003 fa40 	bl	3dd98 <interface_socket_from_handle_get>
   3a918:	2800      	cmp	r0, #0
   3a91a:	d0db      	beq.n	3a8d4 <at_interface_read+0x30>
   3a91c:	6845      	ldr	r5, [r0, #4]
   3a91e:	2d00      	cmp	r5, #0
   3a920:	d0d8      	beq.n	3a8d4 <at_interface_read+0x30>
   3a922:	f8c0 8004 	str.w	r8, [r0, #4]
   3a926:	e7d5      	b.n	3a8d4 <at_interface_read+0x30>
   3a928:	f016 0f2a 	tst.w	r6, #42	; 0x2a
   3a92c:	d1ce      	bne.n	3a8cc <at_interface_read+0x28>
   3a92e:	252d      	movs	r5, #45	; 0x2d
   3a930:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   3a934:	4628      	mov	r0, r5
   3a936:	f7f0 fe07 	bl	2b548 <bsd_os_errno_set>
   3a93a:	4648      	mov	r0, r9
   3a93c:	b007      	add	sp, #28
   3a93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a942:	2500      	movs	r5, #0
   3a944:	69e0      	ldr	r0, [r4, #28]
   3a946:	6803      	ldr	r3, [r0, #0]
   3a948:	68db      	ldr	r3, [r3, #12]
   3a94a:	4798      	blx	r3
   3a94c:	3001      	adds	r0, #1
   3a94e:	d003      	beq.n	3a958 <at_interface_read+0xb4>
   3a950:	6823      	ldr	r3, [r4, #0]
   3a952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3a956:	6023      	str	r3, [r4, #0]
   3a958:	2d00      	cmp	r5, #0
   3a95a:	d1eb      	bne.n	3a934 <at_interface_read+0x90>
   3a95c:	4648      	mov	r0, r9
   3a95e:	b007      	add	sp, #28
   3a960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3a964:	6823      	ldr	r3, [r4, #0]
   3a966:	69e0      	ldr	r0, [r4, #28]
   3a968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3a96c:	6023      	str	r3, [r4, #0]
   3a96e:	6803      	ldr	r3, [r0, #0]
   3a970:	4632      	mov	r2, r6
   3a972:	689b      	ldr	r3, [r3, #8]
   3a974:	a902      	add	r1, sp, #8
   3a976:	4798      	blx	r3
   3a978:	f1b0 0900 	subs.w	r9, r0, #0
   3a97c:	dae1      	bge.n	3a942 <at_interface_read+0x9e>
   3a97e:	69e0      	ldr	r0, [r4, #28]
   3a980:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   3a984:	6803      	ldr	r3, [r0, #0]
   3a986:	68db      	ldr	r3, [r3, #12]
   3a988:	d10a      	bne.n	3a9a0 <at_interface_read+0xfc>
   3a98a:	2523      	movs	r5, #35	; 0x23
   3a98c:	4798      	blx	r3
   3a98e:	3001      	adds	r0, #1
   3a990:	d0ce      	beq.n	3a930 <at_interface_read+0x8c>
   3a992:	6823      	ldr	r3, [r4, #0]
   3a994:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   3a998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3a99c:	6023      	str	r3, [r4, #0]
   3a99e:	e7db      	b.n	3a958 <at_interface_read+0xb4>
   3a9a0:	4798      	blx	r3
   3a9a2:	3001      	adds	r0, #1
   3a9a4:	d0c9      	beq.n	3a93a <at_interface_read+0x96>
   3a9a6:	6823      	ldr	r3, [r4, #0]
   3a9a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3a9ac:	6023      	str	r3, [r4, #0]
   3a9ae:	e7c4      	b.n	3a93a <at_interface_read+0x96>
   3a9b0:	69e0      	ldr	r0, [r4, #28]
   3a9b2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   3a9b6:	6803      	ldr	r3, [r0, #0]
   3a9b8:	68db      	ldr	r3, [r3, #12]
   3a9ba:	d0e7      	beq.n	3a98c <at_interface_read+0xe8>
   3a9bc:	4798      	blx	r3
   3a9be:	3001      	adds	r0, #1
   3a9c0:	d1c6      	bne.n	3a950 <at_interface_read+0xac>
   3a9c2:	e7b7      	b.n	3a934 <at_interface_read+0x90>
   3a9c4:	2516      	movs	r5, #22
   3a9c6:	e7b3      	b.n	3a930 <at_interface_read+0x8c>

0003a9c8 <at_interface_getopt>:
   3a9c8:	f003 ba54 	b.w	3de74 <interface_socket_getopt>

0003a9cc <at_interface_setopt>:
   3a9cc:	f003 ba0c 	b.w	3dde8 <interface_socket_setopt>

0003a9d0 <rpc_at_event_handler>:
   3a9d0:	b570      	push	{r4, r5, r6, lr}
   3a9d2:	4606      	mov	r6, r0
   3a9d4:	b084      	sub	sp, #16
   3a9d6:	68c0      	ldr	r0, [r0, #12]
   3a9d8:	460d      	mov	r5, r1
   3a9da:	f003 f9dd 	bl	3dd98 <interface_socket_from_handle_get>
   3a9de:	4604      	mov	r4, r0
   3a9e0:	b348      	cbz	r0, 3aa36 <rpc_at_event_handler+0x66>
   3a9e2:	6803      	ldr	r3, [r0, #0]
   3a9e4:	b29b      	uxth	r3, r3
   3a9e6:	2b01      	cmp	r3, #1
   3a9e8:	d01f      	beq.n	3aa2a <rpc_at_event_handler+0x5a>
   3a9ea:	6803      	ldr	r3, [r0, #0]
   3a9ec:	b29b      	uxth	r3, r3
   3a9ee:	2b0d      	cmp	r3, #13
   3a9f0:	d029      	beq.n	3aa46 <rpc_at_event_handler+0x76>
   3a9f2:	6803      	ldr	r3, [r0, #0]
   3a9f4:	b29b      	uxth	r3, r3
   3a9f6:	2b02      	cmp	r3, #2
   3a9f8:	d02d      	beq.n	3aa56 <rpc_at_event_handler+0x86>
   3a9fa:	3d03      	subs	r5, #3
   3a9fc:	2d01      	cmp	r5, #1
   3a9fe:	d817      	bhi.n	3aa30 <rpc_at_event_handler+0x60>
   3aa00:	2500      	movs	r5, #0
   3aa02:	6873      	ldr	r3, [r6, #4]
   3aa04:	6832      	ldr	r2, [r6, #0]
   3aa06:	e9cd 5502 	strd	r5, r5, [sp, #8]
   3aa0a:	e9cd 2300 	strd	r2, r3, [sp]
   3aa0e:	69e0      	ldr	r0, [r4, #28]
   3aa10:	4669      	mov	r1, sp
   3aa12:	6803      	ldr	r3, [r0, #0]
   3aa14:	685b      	ldr	r3, [r3, #4]
   3aa16:	4798      	blx	r3
   3aa18:	3001      	adds	r0, #1
   3aa1a:	d019      	beq.n	3aa50 <rpc_at_event_handler+0x80>
   3aa1c:	4628      	mov	r0, r5
   3aa1e:	6823      	ldr	r3, [r4, #0]
   3aa20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   3aa24:	6023      	str	r3, [r4, #0]
   3aa26:	b004      	add	sp, #16
   3aa28:	bd70      	pop	{r4, r5, r6, pc}
   3aa2a:	2d02      	cmp	r5, #2
   3aa2c:	d1e5      	bne.n	3a9fa <rpc_at_event_handler+0x2a>
   3aa2e:	6005      	str	r5, [r0, #0]
   3aa30:	2000      	movs	r0, #0
   3aa32:	b004      	add	sp, #16
   3aa34:	bd70      	pop	{r4, r5, r6, pc}
   3aa36:	6830      	ldr	r0, [r6, #0]
   3aa38:	2800      	cmp	r0, #0
   3aa3a:	d0f9      	beq.n	3aa30 <rpc_at_event_handler+0x60>
   3aa3c:	f003 fb3c 	bl	3e0b8 <rpc_at_client_data_free>
   3aa40:	4620      	mov	r0, r4
   3aa42:	b004      	add	sp, #16
   3aa44:	bd70      	pop	{r4, r5, r6, pc}
   3aa46:	2d02      	cmp	r5, #2
   3aa48:	d1d7      	bne.n	3a9fa <rpc_at_event_handler+0x2a>
   3aa4a:	230e      	movs	r3, #14
   3aa4c:	6003      	str	r3, [r0, #0]
   3aa4e:	e7ef      	b.n	3aa30 <rpc_at_event_handler+0x60>
   3aa50:	2002      	movs	r0, #2
   3aa52:	b004      	add	sp, #16
   3aa54:	bd70      	pop	{r4, r5, r6, pc}
   3aa56:	6803      	ldr	r3, [r0, #0]
   3aa58:	029b      	lsls	r3, r3, #10
   3aa5a:	d5ce      	bpl.n	3a9fa <rpc_at_event_handler+0x2a>
   3aa5c:	2d02      	cmp	r5, #2
   3aa5e:	d1cc      	bne.n	3a9fa <rpc_at_event_handler+0x2a>
   3aa60:	6803      	ldr	r3, [r0, #0]
   3aa62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   3aa66:	6003      	str	r3, [r0, #0]
   3aa68:	6803      	ldr	r3, [r0, #0]
   3aa6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3aa6e:	6003      	str	r3, [r0, #0]
   3aa70:	e7de      	b.n	3aa30 <rpc_at_event_handler+0x60>
   3aa72:	bf00      	nop

0003aa74 <ok_rsp_parser>:
   3aa74:	2000      	movs	r0, #0
   3aa76:	4770      	bx	lr

0003aa78 <pdn_state_get_parser>:
   3aa78:	2200      	movs	r2, #0
   3aa7a:	b570      	push	{r4, r5, r6, lr}
   3aa7c:	780b      	ldrb	r3, [r1, #0]
   3aa7e:	b084      	sub	sp, #16
   3aa80:	460e      	mov	r6, r1
   3aa82:	e9cd 2200 	strd	r2, r2, [sp]
   3aa86:	e9cd 2202 	strd	r2, r2, [sp, #8]
   3aa8a:	b323      	cbz	r3, 3aad6 <pdn_state_get_parser+0x5e>
   3aa8c:	460c      	mov	r4, r1
   3aa8e:	2b20      	cmp	r3, #32
   3aa90:	460d      	mov	r5, r1
   3aa92:	d01b      	beq.n	3aacc <pdn_state_get_parser+0x54>
   3aa94:	700b      	strb	r3, [r1, #0]
   3aa96:	3201      	adds	r2, #1
   3aa98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3aa9c:	18b1      	adds	r1, r6, r2
   3aa9e:	460d      	mov	r5, r1
   3aaa0:	2b00      	cmp	r3, #0
   3aaa2:	d1f4      	bne.n	3aa8e <pdn_state_get_parser+0x16>
   3aaa4:	2200      	movs	r2, #0
   3aaa6:	4b0d      	ldr	r3, [pc, #52]	; (3aadc <pdn_state_get_parser+0x64>)
   3aaa8:	702a      	strb	r2, [r5, #0]
   3aaaa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   3aaae:	4a0c      	ldr	r2, [pc, #48]	; (3aae0 <pdn_state_get_parser+0x68>)
   3aab0:	681b      	ldr	r3, [r3, #0]
   3aab2:	2110      	movs	r1, #16
   3aab4:	4668      	mov	r0, sp
   3aab6:	f007 ff1d 	bl	428f4 <sniprintf>
   3aaba:	4669      	mov	r1, sp
   3aabc:	4630      	mov	r0, r6
   3aabe:	f00d fd8d 	bl	485dc <strstr>
   3aac2:	3000      	adds	r0, #0
   3aac4:	bf18      	it	ne
   3aac6:	2001      	movne	r0, #1
   3aac8:	b004      	add	sp, #16
   3aaca:	bd70      	pop	{r4, r5, r6, pc}
   3aacc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3aad0:	2b00      	cmp	r3, #0
   3aad2:	d1dc      	bne.n	3aa8e <pdn_state_get_parser+0x16>
   3aad4:	e7e6      	b.n	3aaa4 <pdn_state_get_parser+0x2c>
   3aad6:	460d      	mov	r5, r1
   3aad8:	e7e4      	b.n	3aaa4 <pdn_state_get_parser+0x2c>
   3aada:	bf00      	nop
   3aadc:	20025f1c 	.word	0x20025f1c
   3aae0:	0004a5c0 	.word	0x0004a5c0

0003aae4 <pdn_id_get_parser>:
   3aae4:	b570      	push	{r4, r5, r6, lr}
   3aae6:	780b      	ldrb	r3, [r1, #0]
   3aae8:	4606      	mov	r6, r0
   3aaea:	b313      	cbz	r3, 3ab32 <pdn_id_get_parser+0x4e>
   3aaec:	4608      	mov	r0, r1
   3aaee:	2400      	movs	r4, #0
   3aaf0:	460a      	mov	r2, r1
   3aaf2:	2b20      	cmp	r3, #32
   3aaf4:	4615      	mov	r5, r2
   3aaf6:	d017      	beq.n	3ab28 <pdn_id_get_parser+0x44>
   3aaf8:	7013      	strb	r3, [r2, #0]
   3aafa:	3401      	adds	r4, #1
   3aafc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3ab00:	190a      	adds	r2, r1, r4
   3ab02:	4615      	mov	r5, r2
   3ab04:	2b00      	cmp	r3, #0
   3ab06:	d1f4      	bne.n	3aaf2 <pdn_id_get_parser+0xe>
   3ab08:	2300      	movs	r3, #0
   3ab0a:	4608      	mov	r0, r1
   3ab0c:	702b      	strb	r3, [r5, #0]
   3ab0e:	213a      	movs	r1, #58	; 0x3a
   3ab10:	f00d fd02 	bl	48518 <strchr>
   3ab14:	b130      	cbz	r0, 3ab24 <pdn_id_get_parser+0x40>
   3ab16:	3001      	adds	r0, #1
   3ab18:	f00d fb16 	bl	48148 <atoi>
   3ab1c:	4b06      	ldr	r3, [pc, #24]	; (3ab38 <pdn_id_get_parser+0x54>)
   3ab1e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   3ab22:	6058      	str	r0, [r3, #4]
   3ab24:	2000      	movs	r0, #0
   3ab26:	bd70      	pop	{r4, r5, r6, pc}
   3ab28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3ab2c:	2b00      	cmp	r3, #0
   3ab2e:	d1e0      	bne.n	3aaf2 <pdn_id_get_parser+0xe>
   3ab30:	e7ea      	b.n	3ab08 <pdn_id_get_parser+0x24>
   3ab32:	460d      	mov	r5, r1
   3ab34:	e7e8      	b.n	3ab08 <pdn_id_get_parser+0x24>
   3ab36:	bf00      	nop
   3ab38:	20025f1c 	.word	0x20025f1c

0003ab3c <context_create_parser>:
   3ab3c:	b570      	push	{r4, r5, r6, lr}
   3ab3e:	780b      	ldrb	r3, [r1, #0]
   3ab40:	4606      	mov	r6, r0
   3ab42:	b313      	cbz	r3, 3ab8a <context_create_parser+0x4e>
   3ab44:	4608      	mov	r0, r1
   3ab46:	2400      	movs	r4, #0
   3ab48:	460a      	mov	r2, r1
   3ab4a:	2b20      	cmp	r3, #32
   3ab4c:	4615      	mov	r5, r2
   3ab4e:	d017      	beq.n	3ab80 <context_create_parser+0x44>
   3ab50:	7013      	strb	r3, [r2, #0]
   3ab52:	3401      	adds	r4, #1
   3ab54:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3ab58:	190a      	adds	r2, r1, r4
   3ab5a:	4615      	mov	r5, r2
   3ab5c:	2b00      	cmp	r3, #0
   3ab5e:	d1f4      	bne.n	3ab4a <context_create_parser+0xe>
   3ab60:	2300      	movs	r3, #0
   3ab62:	4608      	mov	r0, r1
   3ab64:	702b      	strb	r3, [r5, #0]
   3ab66:	213a      	movs	r1, #58	; 0x3a
   3ab68:	f00d fcd6 	bl	48518 <strchr>
   3ab6c:	b130      	cbz	r0, 3ab7c <context_create_parser+0x40>
   3ab6e:	4b08      	ldr	r3, [pc, #32]	; (3ab90 <context_create_parser+0x54>)
   3ab70:	3001      	adds	r0, #1
   3ab72:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
   3ab76:	f00d fae7 	bl	48148 <atoi>
   3ab7a:	6020      	str	r0, [r4, #0]
   3ab7c:	2000      	movs	r0, #0
   3ab7e:	bd70      	pop	{r4, r5, r6, pc}
   3ab80:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   3ab84:	2b00      	cmp	r3, #0
   3ab86:	d1e0      	bne.n	3ab4a <context_create_parser+0xe>
   3ab88:	e7ea      	b.n	3ab60 <context_create_parser+0x24>
   3ab8a:	460d      	mov	r5, r1
   3ab8c:	e7e8      	b.n	3ab60 <context_create_parser+0x24>
   3ab8e:	bf00      	nop
   3ab90:	20025f1c 	.word	0x20025f1c

0003ab94 <pdn_interface_init>:
   3ab94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ab98:	b510      	push	{r4, lr}
   3ab9a:	4c0b      	ldr	r4, [pc, #44]	; (3abc8 <pdn_interface_init+0x34>)
   3ab9c:	2228      	movs	r2, #40	; 0x28
   3ab9e:	2100      	movs	r1, #0
   3aba0:	480a      	ldr	r0, [pc, #40]	; (3abcc <pdn_interface_init+0x38>)
   3aba2:	6023      	str	r3, [r4, #0]
   3aba4:	f00d fb10 	bl	481c8 <memset>
   3aba8:	f240 2201 	movw	r2, #513	; 0x201
   3abac:	2102      	movs	r1, #2
   3abae:	2066      	movs	r0, #102	; 0x66
   3abb0:	f7ff fdac 	bl	3a70c <at_interface_open>
   3abb4:	2800      	cmp	r0, #0
   3abb6:	6020      	str	r0, [r4, #0]
   3abb8:	db04      	blt.n	3abc4 <pdn_interface_init+0x30>
   3abba:	2201      	movs	r2, #1
   3abbc:	4b04      	ldr	r3, [pc, #16]	; (3abd0 <pdn_interface_init+0x3c>)
   3abbe:	2000      	movs	r0, #0
   3abc0:	701a      	strb	r2, [r3, #0]
   3abc2:	bd10      	pop	{r4, pc}
   3abc4:	2003      	movs	r0, #3
   3abc6:	bd10      	pop	{r4, pc}
   3abc8:	20025e18 	.word	0x20025e18
   3abcc:	20025f1c 	.word	0x20025f1c
   3abd0:	2002d1c1 	.word	0x2002d1c1

0003abd4 <pdn_interface_deinit>:
   3abd4:	4b05      	ldr	r3, [pc, #20]	; (3abec <pdn_interface_deinit+0x18>)
   3abd6:	781a      	ldrb	r2, [r3, #0]
   3abd8:	b12a      	cbz	r2, 3abe6 <pdn_interface_deinit+0x12>
   3abda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3abde:	2000      	movs	r0, #0
   3abe0:	4a03      	ldr	r2, [pc, #12]	; (3abf0 <pdn_interface_deinit+0x1c>)
   3abe2:	7018      	strb	r0, [r3, #0]
   3abe4:	6011      	str	r1, [r2, #0]
   3abe6:	2000      	movs	r0, #0
   3abe8:	4770      	bx	lr
   3abea:	bf00      	nop
   3abec:	2002d1c1 	.word	0x2002d1c1
   3abf0:	20025e18 	.word	0x20025e18

0003abf4 <pdn_interface_open>:
   3abf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3abf8:	4b68      	ldr	r3, [pc, #416]	; (3ad9c <pdn_interface_open+0x1a8>)
   3abfa:	b083      	sub	sp, #12
   3abfc:	781b      	ldrb	r3, [r3, #0]
   3abfe:	2b00      	cmp	r3, #0
   3ac00:	f000 80c5 	beq.w	3ad8e <pdn_interface_open+0x19a>
   3ac04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3ac08:	f040 80b0 	bne.w	3ad6c <pdn_interface_open+0x178>
   3ac0c:	4c64      	ldr	r4, [pc, #400]	; (3ada0 <pdn_interface_open+0x1ac>)
   3ac0e:	6825      	ldr	r5, [r4, #0]
   3ac10:	b34d      	cbz	r5, 3ac66 <pdn_interface_open+0x72>
   3ac12:	6863      	ldr	r3, [r4, #4]
   3ac14:	2b00      	cmp	r3, #0
   3ac16:	f000 809b 	beq.w	3ad50 <pdn_interface_open+0x15c>
   3ac1a:	68a3      	ldr	r3, [r4, #8]
   3ac1c:	2b00      	cmp	r3, #0
   3ac1e:	f000 8099 	beq.w	3ad54 <pdn_interface_open+0x160>
   3ac22:	68e3      	ldr	r3, [r4, #12]
   3ac24:	2b00      	cmp	r3, #0
   3ac26:	f000 8097 	beq.w	3ad58 <pdn_interface_open+0x164>
   3ac2a:	6923      	ldr	r3, [r4, #16]
   3ac2c:	2b00      	cmp	r3, #0
   3ac2e:	f000 8095 	beq.w	3ad5c <pdn_interface_open+0x168>
   3ac32:	6963      	ldr	r3, [r4, #20]
   3ac34:	2b00      	cmp	r3, #0
   3ac36:	f000 8093 	beq.w	3ad60 <pdn_interface_open+0x16c>
   3ac3a:	69a3      	ldr	r3, [r4, #24]
   3ac3c:	2b00      	cmp	r3, #0
   3ac3e:	f000 8091 	beq.w	3ad64 <pdn_interface_open+0x170>
   3ac42:	69e3      	ldr	r3, [r4, #28]
   3ac44:	2b00      	cmp	r3, #0
   3ac46:	f000 808f 	beq.w	3ad68 <pdn_interface_open+0x174>
   3ac4a:	6a23      	ldr	r3, [r4, #32]
   3ac4c:	b153      	cbz	r3, 3ac64 <pdn_interface_open+0x70>
   3ac4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3ac50:	2509      	movs	r5, #9
   3ac52:	b143      	cbz	r3, 3ac66 <pdn_interface_open+0x72>
   3ac54:	200c      	movs	r0, #12
   3ac56:	f7f0 fc77 	bl	2b548 <bsd_os_errno_set>
   3ac5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ac5e:	b003      	add	sp, #12
   3ac60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ac64:	2508      	movs	r5, #8
   3ac66:	2020      	movs	r0, #32
   3ac68:	f002 fb7e 	bl	3d368 <nrf_malloc>
   3ac6c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
   3ac70:	2800      	cmp	r0, #0
   3ac72:	d0ef      	beq.n	3ac54 <pdn_interface_open+0x60>
   3ac74:	2220      	movs	r2, #32
   3ac76:	2100      	movs	r1, #0
   3ac78:	f00d faa6 	bl	481c8 <memset>
   3ac7c:	2101      	movs	r1, #1
   3ac7e:	2003      	movs	r0, #3
   3ac80:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3ac84:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   3ac88:	4b46      	ldr	r3, [pc, #280]	; (3ada4 <pdn_interface_open+0x1b0>)
   3ac8a:	6091      	str	r1, [r2, #8]
   3ac8c:	f854 1025 	ldr.w	r1, [r4, r5, lsl #2]
   3ac90:	4a45      	ldr	r2, [pc, #276]	; (3ada8 <pdn_interface_open+0x1b4>)
   3ac92:	60c8      	str	r0, [r1, #12]
   3ac94:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   3ac98:	f44f 7180 	mov.w	r1, #256	; 0x100
   3ac9c:	6047      	str	r7, [r0, #4]
   3ac9e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 3adb8 <pdn_interface_open+0x1c4>
   3aca2:	4842      	ldr	r0, [pc, #264]	; (3adac <pdn_interface_open+0x1b8>)
   3aca4:	f007 fe26 	bl	428f4 <sniprintf>
   3aca8:	4840      	ldr	r0, [pc, #256]	; (3adac <pdn_interface_open+0x1b8>)
   3acaa:	f8d8 9000 	ldr.w	r9, [r8]
   3acae:	2600      	movs	r6, #0
   3acb0:	f7e2 fad8 	bl	1d264 <strlen>
   3acb4:	4633      	mov	r3, r6
   3acb6:	4602      	mov	r2, r0
   3acb8:	493c      	ldr	r1, [pc, #240]	; (3adac <pdn_interface_open+0x1b8>)
   3acba:	4648      	mov	r0, r9
   3acbc:	9601      	str	r6, [sp, #4]
   3acbe:	9600      	str	r6, [sp, #0]
   3acc0:	f7ff fc8e 	bl	3a5e0 <at_interface_write>
   3acc4:	4681      	mov	r9, r0
   3acc6:	4839      	ldr	r0, [pc, #228]	; (3adac <pdn_interface_open+0x1b8>)
   3acc8:	f7e2 facc 	bl	1d264 <strlen>
   3accc:	4548      	cmp	r0, r9
   3acce:	d153      	bne.n	3ad78 <pdn_interface_open+0x184>
   3acd0:	4633      	mov	r3, r6
   3acd2:	e9cd 6600 	strd	r6, r6, [sp]
   3acd6:	f44f 7280 	mov.w	r2, #256	; 0x100
   3acda:	4934      	ldr	r1, [pc, #208]	; (3adac <pdn_interface_open+0x1b8>)
   3acdc:	f8d8 0000 	ldr.w	r0, [r8]
   3ace0:	f7ff fde0 	bl	3a8a4 <at_interface_read>
   3ace4:	4606      	mov	r6, r0
   3ace6:	4832      	ldr	r0, [pc, #200]	; (3adb0 <pdn_interface_open+0x1bc>)
   3ace8:	f7e2 fabc 	bl	1d264 <strlen>
   3acec:	4286      	cmp	r6, r0
   3acee:	db15      	blt.n	3ad1c <pdn_interface_open+0x128>
   3acf0:	4602      	mov	r2, r0
   3acf2:	492e      	ldr	r1, [pc, #184]	; (3adac <pdn_interface_open+0x1b8>)
   3acf4:	482e      	ldr	r0, [pc, #184]	; (3adb0 <pdn_interface_open+0x1bc>)
   3acf6:	f00d fc40 	bl	4857a <strncmp>
   3acfa:	b978      	cbnz	r0, 3ad1c <pdn_interface_open+0x128>
   3acfc:	492b      	ldr	r1, [pc, #172]	; (3adac <pdn_interface_open+0x1b8>)
   3acfe:	4628      	mov	r0, r5
   3ad00:	f7ff ff1c 	bl	3ab3c <context_create_parser>
   3ad04:	b9b0      	cbnz	r0, 3ad34 <pdn_interface_open+0x140>
   3ad06:	2202      	movs	r2, #2
   3ad08:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
   3ad0c:	f045 40f1 	orr.w	r0, r5, #2021654528	; 0x78800000
   3ad10:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   3ad14:	609a      	str	r2, [r3, #8]
   3ad16:	b003      	add	sp, #12
   3ad18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3ad1c:	4825      	ldr	r0, [pc, #148]	; (3adb4 <pdn_interface_open+0x1c0>)
   3ad1e:	f7e2 faa1 	bl	1d264 <strlen>
   3ad22:	4922      	ldr	r1, [pc, #136]	; (3adac <pdn_interface_open+0x1b8>)
   3ad24:	4602      	mov	r2, r0
   3ad26:	4823      	ldr	r0, [pc, #140]	; (3adb4 <pdn_interface_open+0x1c0>)
   3ad28:	f00d fc27 	bl	4857a <strncmp>
   3ad2c:	b960      	cbnz	r0, 3ad48 <pdn_interface_open+0x154>
   3ad2e:	2008      	movs	r0, #8
   3ad30:	f7f0 fc0a 	bl	2b548 <bsd_os_errno_set>
   3ad34:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   3ad38:	f002 fb20 	bl	3d37c <nrf_free>
   3ad3c:	2300      	movs	r3, #0
   3ad3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ad42:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   3ad46:	e78a      	b.n	3ac5e <pdn_interface_open+0x6a>
   3ad48:	2005      	movs	r0, #5
   3ad4a:	f7f0 fbfd 	bl	2b548 <bsd_os_errno_set>
   3ad4e:	e7f1      	b.n	3ad34 <pdn_interface_open+0x140>
   3ad50:	2501      	movs	r5, #1
   3ad52:	e788      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad54:	2502      	movs	r5, #2
   3ad56:	e786      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad58:	2503      	movs	r5, #3
   3ad5a:	e784      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad5c:	2504      	movs	r5, #4
   3ad5e:	e782      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad60:	2505      	movs	r5, #5
   3ad62:	e780      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad64:	2506      	movs	r5, #6
   3ad66:	e77e      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad68:	2507      	movs	r5, #7
   3ad6a:	e77c      	b.n	3ac66 <pdn_interface_open+0x72>
   3ad6c:	2029      	movs	r0, #41	; 0x29
   3ad6e:	f7f0 fbeb 	bl	2b548 <bsd_os_errno_set>
   3ad72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ad76:	e772      	b.n	3ac5e <pdn_interface_open+0x6a>
   3ad78:	2005      	movs	r0, #5
   3ad7a:	f7f0 fbe5 	bl	2b548 <bsd_os_errno_set>
   3ad7e:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   3ad82:	f002 fafb 	bl	3d37c <nrf_free>
   3ad86:	f844 6025 	str.w	r6, [r4, r5, lsl #2]
   3ad8a:	4638      	mov	r0, r7
   3ad8c:	e767      	b.n	3ac5e <pdn_interface_open+0x6a>
   3ad8e:	2070      	movs	r0, #112	; 0x70
   3ad90:	f7f0 fbda 	bl	2b548 <bsd_os_errno_set>
   3ad94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ad98:	e761      	b.n	3ac5e <pdn_interface_open+0x6a>
   3ad9a:	bf00      	nop
   3ad9c:	2002d1c1 	.word	0x2002d1c1
   3ada0:	20025f1c 	.word	0x20025f1c
   3ada4:	0004a59c 	.word	0x0004a59c
   3ada8:	0004a5a8 	.word	0x0004a5a8
   3adac:	20025e1c 	.word	0x20025e1c
   3adb0:	0004a5ac 	.word	0x0004a5ac
   3adb4:	0004a5b8 	.word	0x0004a5b8
   3adb8:	20025e18 	.word	0x20025e18

0003adbc <pdn_interface_connect>:
   3adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3adc0:	b085      	sub	sp, #20
   3adc2:	2900      	cmp	r1, #0
   3adc4:	f000 81e8 	beq.w	3b198 <pdn_interface_connect+0x3dc>
   3adc8:	2a64      	cmp	r2, #100	; 0x64
   3adca:	4690      	mov	r8, r2
   3adcc:	f200 81e4 	bhi.w	3b198 <pdn_interface_connect+0x3dc>
   3add0:	0c03      	lsrs	r3, r0, #16
   3add2:	4aac      	ldr	r2, [pc, #688]	; (3b084 <pdn_interface_connect+0x2c8>)
   3add4:	041b      	lsls	r3, r3, #16
   3add6:	4293      	cmp	r3, r2
   3add8:	f040 814b 	bne.w	3b072 <pdn_interface_connect+0x2b6>
   3addc:	f020 45f1 	bic.w	r5, r0, #2021654528	; 0x78800000
   3ade0:	f425 15d0 	bic.w	r5, r5, #1703936	; 0x1a0000
   3ade4:	2d09      	cmp	r5, #9
   3ade6:	f300 8144 	bgt.w	3b072 <pdn_interface_connect+0x2b6>
   3adea:	4fa7      	ldr	r7, [pc, #668]	; (3b088 <pdn_interface_connect+0x2cc>)
   3adec:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3adf0:	2b00      	cmp	r3, #0
   3adf2:	f000 813e 	beq.w	3b072 <pdn_interface_connect+0x2b6>
   3adf6:	689a      	ldr	r2, [r3, #8]
   3adf8:	2a00      	cmp	r2, #0
   3adfa:	f000 813a 	beq.w	3b072 <pdn_interface_connect+0x2b6>
   3adfe:	689b      	ldr	r3, [r3, #8]
   3ae00:	2b02      	cmp	r3, #2
   3ae02:	f040 8136 	bne.w	3b072 <pdn_interface_connect+0x2b6>
   3ae06:	4ea1      	ldr	r6, [pc, #644]	; (3b08c <pdn_interface_connect+0x2d0>)
   3ae08:	4ba1      	ldr	r3, [pc, #644]	; (3b090 <pdn_interface_connect+0x2d4>)
   3ae0a:	4aa2      	ldr	r2, [pc, #648]	; (3b094 <pdn_interface_connect+0x2d8>)
   3ae0c:	4689      	mov	r9, r1
   3ae0e:	4630      	mov	r0, r6
   3ae10:	f44f 7180 	mov.w	r1, #256	; 0x100
   3ae14:	f007 fd6e 	bl	428f4 <sniprintf>
   3ae18:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3ae1c:	4604      	mov	r4, r0
   3ae1e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3ae22:	681b      	ldr	r3, [r3, #0]
   3ae24:	4a9c      	ldr	r2, [pc, #624]	; (3b098 <pdn_interface_connect+0x2dc>)
   3ae26:	1830      	adds	r0, r6, r0
   3ae28:	f007 fd64 	bl	428f4 <sniprintf>
   3ae2c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3ae30:	4404      	add	r4, r0
   3ae32:	68db      	ldr	r3, [r3, #12]
   3ae34:	f003 0203 	and.w	r2, r3, #3
   3ae38:	2a03      	cmp	r2, #3
   3ae3a:	f000 8111 	beq.w	3b060 <pdn_interface_connect+0x2a4>
   3ae3e:	079b      	lsls	r3, r3, #30
   3ae40:	eb06 0004 	add.w	r0, r6, r4
   3ae44:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3ae48:	bf4c      	ite	mi
   3ae4a:	4b94      	ldrmi	r3, [pc, #592]	; (3b09c <pdn_interface_connect+0x2e0>)
   3ae4c:	4b94      	ldrpl	r3, [pc, #592]	; (3b0a0 <pdn_interface_connect+0x2e4>)
   3ae4e:	4a95      	ldr	r2, [pc, #596]	; (3b0a4 <pdn_interface_connect+0x2e8>)
   3ae50:	f007 fd50 	bl	428f4 <sniprintf>
   3ae54:	4404      	add	r4, r0
   3ae56:	f8cd 9000 	str.w	r9, [sp]
   3ae5a:	4643      	mov	r3, r8
   3ae5c:	4a92      	ldr	r2, [pc, #584]	; (3b0a8 <pdn_interface_connect+0x2ec>)
   3ae5e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3ae62:	1930      	adds	r0, r6, r4
   3ae64:	f007 fd46 	bl	428f4 <sniprintf>
   3ae68:	4420      	add	r0, r4
   3ae6a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   3ae6e:	f300 8199 	bgt.w	3b1a4 <pdn_interface_connect+0x3e8>
   3ae72:	f8df a254 	ldr.w	sl, [pc, #596]	; 3b0c8 <pdn_interface_connect+0x30c>
   3ae76:	4885      	ldr	r0, [pc, #532]	; (3b08c <pdn_interface_connect+0x2d0>)
   3ae78:	f8da b000 	ldr.w	fp, [sl]
   3ae7c:	2400      	movs	r4, #0
   3ae7e:	f7e2 f9f1 	bl	1d264 <strlen>
   3ae82:	4623      	mov	r3, r4
   3ae84:	4602      	mov	r2, r0
   3ae86:	4981      	ldr	r1, [pc, #516]	; (3b08c <pdn_interface_connect+0x2d0>)
   3ae88:	4658      	mov	r0, fp
   3ae8a:	9401      	str	r4, [sp, #4]
   3ae8c:	9400      	str	r4, [sp, #0]
   3ae8e:	f7ff fba7 	bl	3a5e0 <at_interface_write>
   3ae92:	4683      	mov	fp, r0
   3ae94:	487d      	ldr	r0, [pc, #500]	; (3b08c <pdn_interface_connect+0x2d0>)
   3ae96:	f7e2 f9e5 	bl	1d264 <strlen>
   3ae9a:	4558      	cmp	r0, fp
   3ae9c:	d008      	beq.n	3aeb0 <pdn_interface_connect+0xf4>
   3ae9e:	2005      	movs	r0, #5
   3aea0:	f7f0 fb52 	bl	2b548 <bsd_os_errno_set>
   3aea4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3aea8:	4658      	mov	r0, fp
   3aeaa:	b005      	add	sp, #20
   3aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aeb0:	4623      	mov	r3, r4
   3aeb2:	e9cd 4400 	strd	r4, r4, [sp]
   3aeb6:	f44f 7280 	mov.w	r2, #256	; 0x100
   3aeba:	4974      	ldr	r1, [pc, #464]	; (3b08c <pdn_interface_connect+0x2d0>)
   3aebc:	f8da 0000 	ldr.w	r0, [sl]
   3aec0:	f7ff fcf0 	bl	3a8a4 <at_interface_read>
   3aec4:	4604      	mov	r4, r0
   3aec6:	4879      	ldr	r0, [pc, #484]	; (3b0ac <pdn_interface_connect+0x2f0>)
   3aec8:	f7e2 f9cc 	bl	1d264 <strlen>
   3aecc:	4284      	cmp	r4, r0
   3aece:	da0f      	bge.n	3aef0 <pdn_interface_connect+0x134>
   3aed0:	4877      	ldr	r0, [pc, #476]	; (3b0b0 <pdn_interface_connect+0x2f4>)
   3aed2:	f7e2 f9c7 	bl	1d264 <strlen>
   3aed6:	496d      	ldr	r1, [pc, #436]	; (3b08c <pdn_interface_connect+0x2d0>)
   3aed8:	4602      	mov	r2, r0
   3aeda:	4875      	ldr	r0, [pc, #468]	; (3b0b0 <pdn_interface_connect+0x2f4>)
   3aedc:	f00d fb4d 	bl	4857a <strncmp>
   3aee0:	2800      	cmp	r0, #0
   3aee2:	d1dc      	bne.n	3ae9e <pdn_interface_connect+0xe2>
   3aee4:	2008      	movs	r0, #8
   3aee6:	f7f0 fb2f 	bl	2b548 <bsd_os_errno_set>
   3aeea:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3aeee:	e7db      	b.n	3aea8 <pdn_interface_connect+0xec>
   3aef0:	4602      	mov	r2, r0
   3aef2:	4966      	ldr	r1, [pc, #408]	; (3b08c <pdn_interface_connect+0x2d0>)
   3aef4:	486d      	ldr	r0, [pc, #436]	; (3b0ac <pdn_interface_connect+0x2f0>)
   3aef6:	f00d fb40 	bl	4857a <strncmp>
   3aefa:	2800      	cmp	r0, #0
   3aefc:	d1e8      	bne.n	3aed0 <pdn_interface_connect+0x114>
   3aefe:	4963      	ldr	r1, [pc, #396]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af00:	4628      	mov	r0, r5
   3af02:	f7ff fdb7 	bl	3aa74 <ok_rsp_parser>
   3af06:	4683      	mov	fp, r0
   3af08:	2800      	cmp	r0, #0
   3af0a:	d1cd      	bne.n	3aea8 <pdn_interface_connect+0xec>
   3af0c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3af10:	7c1b      	ldrb	r3, [r3, #16]
   3af12:	2b00      	cmp	r3, #0
   3af14:	f040 80da 	bne.w	3b0cc <pdn_interface_connect+0x310>
   3af18:	4b66      	ldr	r3, [pc, #408]	; (3b0b4 <pdn_interface_connect+0x2f8>)
   3af1a:	4a5e      	ldr	r2, [pc, #376]	; (3b094 <pdn_interface_connect+0x2d8>)
   3af1c:	f44f 7180 	mov.w	r1, #256	; 0x100
   3af20:	485a      	ldr	r0, [pc, #360]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af22:	f007 fce7 	bl	428f4 <sniprintf>
   3af26:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3af2a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3af2e:	4a62      	ldr	r2, [pc, #392]	; (3b0b8 <pdn_interface_connect+0x2fc>)
   3af30:	681b      	ldr	r3, [r3, #0]
   3af32:	4430      	add	r0, r6
   3af34:	f007 fcde 	bl	428f4 <sniprintf>
   3af38:	f8da 3000 	ldr.w	r3, [sl]
   3af3c:	4853      	ldr	r0, [pc, #332]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af3e:	2400      	movs	r4, #0
   3af40:	9303      	str	r3, [sp, #12]
   3af42:	f7e2 f98f 	bl	1d264 <strlen>
   3af46:	9b03      	ldr	r3, [sp, #12]
   3af48:	4602      	mov	r2, r0
   3af4a:	4950      	ldr	r1, [pc, #320]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af4c:	4618      	mov	r0, r3
   3af4e:	9401      	str	r4, [sp, #4]
   3af50:	4623      	mov	r3, r4
   3af52:	9400      	str	r4, [sp, #0]
   3af54:	f7ff fb44 	bl	3a5e0 <at_interface_write>
   3af58:	9003      	str	r0, [sp, #12]
   3af5a:	484c      	ldr	r0, [pc, #304]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af5c:	f7e2 f982 	bl	1d264 <strlen>
   3af60:	9b03      	ldr	r3, [sp, #12]
   3af62:	4298      	cmp	r0, r3
   3af64:	d19b      	bne.n	3ae9e <pdn_interface_connect+0xe2>
   3af66:	4623      	mov	r3, r4
   3af68:	e9cd 4400 	strd	r4, r4, [sp]
   3af6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   3af70:	4946      	ldr	r1, [pc, #280]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af72:	f8da 0000 	ldr.w	r0, [sl]
   3af76:	f7ff fc95 	bl	3a8a4 <at_interface_read>
   3af7a:	4604      	mov	r4, r0
   3af7c:	484b      	ldr	r0, [pc, #300]	; (3b0ac <pdn_interface_connect+0x2f0>)
   3af7e:	f7e2 f971 	bl	1d264 <strlen>
   3af82:	4284      	cmp	r4, r0
   3af84:	dba4      	blt.n	3aed0 <pdn_interface_connect+0x114>
   3af86:	4602      	mov	r2, r0
   3af88:	4940      	ldr	r1, [pc, #256]	; (3b08c <pdn_interface_connect+0x2d0>)
   3af8a:	4848      	ldr	r0, [pc, #288]	; (3b0ac <pdn_interface_connect+0x2f0>)
   3af8c:	f00d faf5 	bl	4857a <strncmp>
   3af90:	4604      	mov	r4, r0
   3af92:	2800      	cmp	r0, #0
   3af94:	d19c      	bne.n	3aed0 <pdn_interface_connect+0x114>
   3af96:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   3af9a:	f108 0320 	add.w	r3, r8, #32
   3af9e:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   3afa2:	4413      	add	r3, r2
   3afa4:	4419      	add	r1, r3
   3afa6:	f002 f9f5 	bl	3d394 <nrf_realloc>
   3afaa:	2800      	cmp	r0, #0
   3afac:	f000 80fd 	beq.w	3b1aa <pdn_interface_connect+0x3ee>
   3afb0:	2303      	movs	r3, #3
   3afb2:	f847 0025 	str.w	r0, [r7, r5, lsl #2]
   3afb6:	6083      	str	r3, [r0, #8]
   3afb8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3afbc:	4649      	mov	r1, r9
   3afbe:	f8c3 801c 	str.w	r8, [r3, #28]
   3afc2:	f857 c025 	ldr.w	ip, [r7, r5, lsl #2]
   3afc6:	4642      	mov	r2, r8
   3afc8:	e9dc 0305 	ldrd	r0, r3, [ip, #20]
   3afcc:	4418      	add	r0, r3
   3afce:	4603      	mov	r3, r0
   3afd0:	3320      	adds	r3, #32
   3afd2:	eb0c 0003 	add.w	r0, ip, r3
   3afd6:	f00d f8d7 	bl	48188 <memcpy>
   3afda:	4b38      	ldr	r3, [pc, #224]	; (3b0bc <pdn_interface_connect+0x300>)
   3afdc:	4a2d      	ldr	r2, [pc, #180]	; (3b094 <pdn_interface_connect+0x2d8>)
   3afde:	f44f 7180 	mov.w	r1, #256	; 0x100
   3afe2:	482a      	ldr	r0, [pc, #168]	; (3b08c <pdn_interface_connect+0x2d0>)
   3afe4:	f007 fc86 	bl	428f4 <sniprintf>
   3afe8:	4601      	mov	r1, r0
   3afea:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3afee:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
   3aff2:	681b      	ldr	r3, [r3, #0]
   3aff4:	4a30      	ldr	r2, [pc, #192]	; (3b0b8 <pdn_interface_connect+0x2fc>)
   3aff6:	1830      	adds	r0, r6, r0
   3aff8:	f007 fc7c 	bl	428f4 <sniprintf>
   3affc:	4823      	ldr	r0, [pc, #140]	; (3b08c <pdn_interface_connect+0x2d0>)
   3affe:	f8da 6000 	ldr.w	r6, [sl]
   3b002:	f7e2 f92f 	bl	1d264 <strlen>
   3b006:	4623      	mov	r3, r4
   3b008:	4602      	mov	r2, r0
   3b00a:	4920      	ldr	r1, [pc, #128]	; (3b08c <pdn_interface_connect+0x2d0>)
   3b00c:	4630      	mov	r0, r6
   3b00e:	9401      	str	r4, [sp, #4]
   3b010:	9400      	str	r4, [sp, #0]
   3b012:	f7ff fae5 	bl	3a5e0 <at_interface_write>
   3b016:	4606      	mov	r6, r0
   3b018:	481c      	ldr	r0, [pc, #112]	; (3b08c <pdn_interface_connect+0x2d0>)
   3b01a:	f7e2 f923 	bl	1d264 <strlen>
   3b01e:	42b0      	cmp	r0, r6
   3b020:	f040 80d3 	bne.w	3b1ca <pdn_interface_connect+0x40e>
   3b024:	4623      	mov	r3, r4
   3b026:	e9cd 4400 	strd	r4, r4, [sp]
   3b02a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b02e:	4917      	ldr	r1, [pc, #92]	; (3b08c <pdn_interface_connect+0x2d0>)
   3b030:	f8da 0000 	ldr.w	r0, [sl]
   3b034:	f7ff fc36 	bl	3a8a4 <at_interface_read>
   3b038:	4604      	mov	r4, r0
   3b03a:	4821      	ldr	r0, [pc, #132]	; (3b0c0 <pdn_interface_connect+0x304>)
   3b03c:	f7e2 f912 	bl	1d264 <strlen>
   3b040:	4284      	cmp	r4, r0
   3b042:	f2c0 80b5 	blt.w	3b1b0 <pdn_interface_connect+0x3f4>
   3b046:	4602      	mov	r2, r0
   3b048:	4910      	ldr	r1, [pc, #64]	; (3b08c <pdn_interface_connect+0x2d0>)
   3b04a:	481d      	ldr	r0, [pc, #116]	; (3b0c0 <pdn_interface_connect+0x304>)
   3b04c:	f00d fa95 	bl	4857a <strncmp>
   3b050:	2800      	cmp	r0, #0
   3b052:	f040 80ad 	bne.w	3b1b0 <pdn_interface_connect+0x3f4>
   3b056:	4628      	mov	r0, r5
   3b058:	490c      	ldr	r1, [pc, #48]	; (3b08c <pdn_interface_connect+0x2d0>)
   3b05a:	f7ff fd43 	bl	3aae4 <pdn_id_get_parser>
   3b05e:	e723      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b060:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3b064:	1930      	adds	r0, r6, r4
   3b066:	4b17      	ldr	r3, [pc, #92]	; (3b0c4 <pdn_interface_connect+0x308>)
   3b068:	4a0e      	ldr	r2, [pc, #56]	; (3b0a4 <pdn_interface_connect+0x2e8>)
   3b06a:	f007 fc43 	bl	428f4 <sniprintf>
   3b06e:	4404      	add	r4, r0
   3b070:	e6f1      	b.n	3ae56 <pdn_interface_connect+0x9a>
   3b072:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3b076:	2009      	movs	r0, #9
   3b078:	f7f0 fa66 	bl	2b548 <bsd_os_errno_set>
   3b07c:	4658      	mov	r0, fp
   3b07e:	b005      	add	sp, #20
   3b080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b084:	789a0000 	.word	0x789a0000
   3b088:	20025f1c 	.word	0x20025f1c
   3b08c:	20025e1c 	.word	0x20025e1c
   3b090:	0004a508 	.word	0x0004a508
   3b094:	0004a5a8 	.word	0x0004a5a8
   3b098:	0004a514 	.word	0x0004a514
   3b09c:	0004a528 	.word	0x0004a528
   3b0a0:	0004a530 	.word	0x0004a530
   3b0a4:	0004a520 	.word	0x0004a520
   3b0a8:	0004a580 	.word	0x0004a580
   3b0ac:	0004a534 	.word	0x0004a534
   3b0b0:	0004a5b8 	.word	0x0004a5b8
   3b0b4:	0004a554 	.word	0x0004a554
   3b0b8:	0004a560 	.word	0x0004a560
   3b0bc:	0004a564 	.word	0x0004a564
   3b0c0:	0004a574 	.word	0x0004a574
   3b0c4:	0004a518 	.word	0x0004a518
   3b0c8:	20025e18 	.word	0x20025e18
   3b0cc:	4b41      	ldr	r3, [pc, #260]	; (3b1d4 <pdn_interface_connect+0x418>)
   3b0ce:	4a42      	ldr	r2, [pc, #264]	; (3b1d8 <pdn_interface_connect+0x41c>)
   3b0d0:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b0d4:	4841      	ldr	r0, [pc, #260]	; (3b1dc <pdn_interface_connect+0x420>)
   3b0d6:	f007 fc0d 	bl	428f4 <sniprintf>
   3b0da:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3b0de:	4a40      	ldr	r2, [pc, #256]	; (3b1e0 <pdn_interface_connect+0x424>)
   3b0e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3b0e4:	4604      	mov	r4, r0
   3b0e6:	681b      	ldr	r3, [r3, #0]
   3b0e8:	1830      	adds	r0, r6, r0
   3b0ea:	f007 fc03 	bl	428f4 <sniprintf>
   3b0ee:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3b0f2:	4404      	add	r4, r0
   3b0f4:	7c1b      	ldrb	r3, [r3, #16]
   3b0f6:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3b0fa:	2b01      	cmp	r3, #1
   3b0fc:	bf0c      	ite	eq
   3b0fe:	4a39      	ldreq	r2, [pc, #228]	; (3b1e4 <pdn_interface_connect+0x428>)
   3b100:	4a39      	ldrne	r2, [pc, #228]	; (3b1e8 <pdn_interface_connect+0x42c>)
   3b102:	1930      	adds	r0, r6, r4
   3b104:	f007 fbf6 	bl	428f4 <sniprintf>
   3b108:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3b10c:	4404      	add	r4, r0
   3b10e:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   3b112:	4a36      	ldr	r2, [pc, #216]	; (3b1ec <pdn_interface_connect+0x430>)
   3b114:	3320      	adds	r3, #32
   3b116:	1930      	adds	r0, r6, r4
   3b118:	f007 fbec 	bl	428f4 <sniprintf>
   3b11c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3b120:	4420      	add	r0, r4
   3b122:	695a      	ldr	r2, [r3, #20]
   3b124:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3b128:	3220      	adds	r2, #32
   3b12a:	4413      	add	r3, r2
   3b12c:	4430      	add	r0, r6
   3b12e:	4a30      	ldr	r2, [pc, #192]	; (3b1f0 <pdn_interface_connect+0x434>)
   3b130:	f007 fbe0 	bl	428f4 <sniprintf>
   3b134:	f8da 3000 	ldr.w	r3, [sl]
   3b138:	4828      	ldr	r0, [pc, #160]	; (3b1dc <pdn_interface_connect+0x420>)
   3b13a:	2400      	movs	r4, #0
   3b13c:	9303      	str	r3, [sp, #12]
   3b13e:	f7e2 f891 	bl	1d264 <strlen>
   3b142:	9b03      	ldr	r3, [sp, #12]
   3b144:	4602      	mov	r2, r0
   3b146:	4925      	ldr	r1, [pc, #148]	; (3b1dc <pdn_interface_connect+0x420>)
   3b148:	4618      	mov	r0, r3
   3b14a:	9401      	str	r4, [sp, #4]
   3b14c:	4623      	mov	r3, r4
   3b14e:	9400      	str	r4, [sp, #0]
   3b150:	f7ff fa46 	bl	3a5e0 <at_interface_write>
   3b154:	9003      	str	r0, [sp, #12]
   3b156:	4821      	ldr	r0, [pc, #132]	; (3b1dc <pdn_interface_connect+0x420>)
   3b158:	f7e2 f884 	bl	1d264 <strlen>
   3b15c:	9b03      	ldr	r3, [sp, #12]
   3b15e:	4298      	cmp	r0, r3
   3b160:	f47f ae9d 	bne.w	3ae9e <pdn_interface_connect+0xe2>
   3b164:	4623      	mov	r3, r4
   3b166:	e9cd 4400 	strd	r4, r4, [sp]
   3b16a:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b16e:	491b      	ldr	r1, [pc, #108]	; (3b1dc <pdn_interface_connect+0x420>)
   3b170:	f8da 0000 	ldr.w	r0, [sl]
   3b174:	f7ff fb96 	bl	3a8a4 <at_interface_read>
   3b178:	4604      	mov	r4, r0
   3b17a:	481e      	ldr	r0, [pc, #120]	; (3b1f4 <pdn_interface_connect+0x438>)
   3b17c:	f7e2 f872 	bl	1d264 <strlen>
   3b180:	4284      	cmp	r4, r0
   3b182:	f6ff aea5 	blt.w	3aed0 <pdn_interface_connect+0x114>
   3b186:	4602      	mov	r2, r0
   3b188:	4914      	ldr	r1, [pc, #80]	; (3b1dc <pdn_interface_connect+0x420>)
   3b18a:	481a      	ldr	r0, [pc, #104]	; (3b1f4 <pdn_interface_connect+0x438>)
   3b18c:	f00d f9f5 	bl	4857a <strncmp>
   3b190:	2800      	cmp	r0, #0
   3b192:	f43f aec1 	beq.w	3af18 <pdn_interface_connect+0x15c>
   3b196:	e69b      	b.n	3aed0 <pdn_interface_connect+0x114>
   3b198:	2016      	movs	r0, #22
   3b19a:	f7f0 f9d5 	bl	2b548 <bsd_os_errno_set>
   3b19e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3b1a2:	e681      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b1a4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   3b1a8:	e67e      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b1aa:	f04f 0b0c 	mov.w	fp, #12
   3b1ae:	e67b      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b1b0:	4811      	ldr	r0, [pc, #68]	; (3b1f8 <pdn_interface_connect+0x43c>)
   3b1b2:	f7e2 f857 	bl	1d264 <strlen>
   3b1b6:	4909      	ldr	r1, [pc, #36]	; (3b1dc <pdn_interface_connect+0x420>)
   3b1b8:	4602      	mov	r2, r0
   3b1ba:	480f      	ldr	r0, [pc, #60]	; (3b1f8 <pdn_interface_connect+0x43c>)
   3b1bc:	f00d f9dd 	bl	4857a <strncmp>
   3b1c0:	b918      	cbnz	r0, 3b1ca <pdn_interface_connect+0x40e>
   3b1c2:	2008      	movs	r0, #8
   3b1c4:	f7f0 f9c0 	bl	2b548 <bsd_os_errno_set>
   3b1c8:	e66e      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b1ca:	2005      	movs	r0, #5
   3b1cc:	f7f0 f9bc 	bl	2b548 <bsd_os_errno_set>
   3b1d0:	e66a      	b.n	3aea8 <pdn_interface_connect+0xec>
   3b1d2:	bf00      	nop
   3b1d4:	0004a538 	.word	0x0004a538
   3b1d8:	0004a5a8 	.word	0x0004a5a8
   3b1dc:	20025e1c 	.word	0x20025e1c
   3b1e0:	0004a514 	.word	0x0004a514
   3b1e4:	0004a544 	.word	0x0004a544
   3b1e8:	0004a548 	.word	0x0004a548
   3b1ec:	0004a520 	.word	0x0004a520
   3b1f0:	0004a54c 	.word	0x0004a54c
   3b1f4:	0004a534 	.word	0x0004a534
   3b1f8:	0004a5b8 	.word	0x0004a5b8

0003b1fc <pdn_interface_close>:
   3b1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b200:	4a6c      	ldr	r2, [pc, #432]	; (3b3b4 <pdn_interface_close+0x1b8>)
   3b202:	0c03      	lsrs	r3, r0, #16
   3b204:	041b      	lsls	r3, r3, #16
   3b206:	4293      	cmp	r3, r2
   3b208:	b083      	sub	sp, #12
   3b20a:	f040 80ae 	bne.w	3b36a <pdn_interface_close+0x16e>
   3b20e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3b212:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3b216:	2c09      	cmp	r4, #9
   3b218:	f300 80a7 	bgt.w	3b36a <pdn_interface_close+0x16e>
   3b21c:	4d66      	ldr	r5, [pc, #408]	; (3b3b8 <pdn_interface_close+0x1bc>)
   3b21e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3b222:	2800      	cmp	r0, #0
   3b224:	f000 80a1 	beq.w	3b36a <pdn_interface_close+0x16e>
   3b228:	6883      	ldr	r3, [r0, #8]
   3b22a:	2b00      	cmp	r3, #0
   3b22c:	f000 809d 	beq.w	3b36a <pdn_interface_close+0x16e>
   3b230:	6883      	ldr	r3, [r0, #8]
   3b232:	2b03      	cmp	r3, #3
   3b234:	d00b      	beq.n	3b24e <pdn_interface_close+0x52>
   3b236:	6883      	ldr	r3, [r0, #8]
   3b238:	2b02      	cmp	r3, #2
   3b23a:	d056      	beq.n	3b2ea <pdn_interface_close+0xee>
   3b23c:	f002 f89e 	bl	3d37c <nrf_free>
   3b240:	2300      	movs	r3, #0
   3b242:	4618      	mov	r0, r3
   3b244:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   3b248:	b003      	add	sp, #12
   3b24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b24e:	4e5b      	ldr	r6, [pc, #364]	; (3b3bc <pdn_interface_close+0x1c0>)
   3b250:	4b5b      	ldr	r3, [pc, #364]	; (3b3c0 <pdn_interface_close+0x1c4>)
   3b252:	4a5c      	ldr	r2, [pc, #368]	; (3b3c4 <pdn_interface_close+0x1c8>)
   3b254:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b258:	4630      	mov	r0, r6
   3b25a:	f007 fb4b 	bl	428f4 <sniprintf>
   3b25e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   3b262:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3b266:	681b      	ldr	r3, [r3, #0]
   3b268:	4a57      	ldr	r2, [pc, #348]	; (3b3c8 <pdn_interface_close+0x1cc>)
   3b26a:	4430      	add	r0, r6
   3b26c:	f8df 8168 	ldr.w	r8, [pc, #360]	; 3b3d8 <pdn_interface_close+0x1dc>
   3b270:	f007 fb40 	bl	428f4 <sniprintf>
   3b274:	4630      	mov	r0, r6
   3b276:	f8d8 9000 	ldr.w	r9, [r8]
   3b27a:	2700      	movs	r7, #0
   3b27c:	f7e1 fff2 	bl	1d264 <strlen>
   3b280:	4631      	mov	r1, r6
   3b282:	4602      	mov	r2, r0
   3b284:	463b      	mov	r3, r7
   3b286:	4648      	mov	r0, r9
   3b288:	9701      	str	r7, [sp, #4]
   3b28a:	9700      	str	r7, [sp, #0]
   3b28c:	f7ff f9a8 	bl	3a5e0 <at_interface_write>
   3b290:	4681      	mov	r9, r0
   3b292:	4630      	mov	r0, r6
   3b294:	f7e1 ffe6 	bl	1d264 <strlen>
   3b298:	4548      	cmp	r0, r9
   3b29a:	f040 8083 	bne.w	3b3a4 <pdn_interface_close+0x1a8>
   3b29e:	463b      	mov	r3, r7
   3b2a0:	e9cd 7700 	strd	r7, r7, [sp]
   3b2a4:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b2a8:	4631      	mov	r1, r6
   3b2aa:	f8d8 0000 	ldr.w	r0, [r8]
   3b2ae:	f7ff faf9 	bl	3a8a4 <at_interface_read>
   3b2b2:	4607      	mov	r7, r0
   3b2b4:	4845      	ldr	r0, [pc, #276]	; (3b3cc <pdn_interface_close+0x1d0>)
   3b2b6:	f7e1 ffd5 	bl	1d264 <strlen>
   3b2ba:	4287      	cmp	r7, r0
   3b2bc:	da5b      	bge.n	3b376 <pdn_interface_close+0x17a>
   3b2be:	4844      	ldr	r0, [pc, #272]	; (3b3d0 <pdn_interface_close+0x1d4>)
   3b2c0:	f7e1 ffd0 	bl	1d264 <strlen>
   3b2c4:	493d      	ldr	r1, [pc, #244]	; (3b3bc <pdn_interface_close+0x1c0>)
   3b2c6:	4602      	mov	r2, r0
   3b2c8:	4841      	ldr	r0, [pc, #260]	; (3b3d0 <pdn_interface_close+0x1d4>)
   3b2ca:	f00d f956 	bl	4857a <strncmp>
   3b2ce:	2800      	cmp	r0, #0
   3b2d0:	d168      	bne.n	3b3a4 <pdn_interface_close+0x1a8>
   3b2d2:	2008      	movs	r0, #8
   3b2d4:	f7f0 f938 	bl	2b548 <bsd_os_errno_set>
   3b2d8:	2202      	movs	r2, #2
   3b2da:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   3b2de:	609a      	str	r2, [r3, #8]
   3b2e0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3b2e4:	6883      	ldr	r3, [r0, #8]
   3b2e6:	2b02      	cmp	r3, #2
   3b2e8:	d1a8      	bne.n	3b23c <pdn_interface_close+0x40>
   3b2ea:	4e34      	ldr	r6, [pc, #208]	; (3b3bc <pdn_interface_close+0x1c0>)
   3b2ec:	4b39      	ldr	r3, [pc, #228]	; (3b3d4 <pdn_interface_close+0x1d8>)
   3b2ee:	4a35      	ldr	r2, [pc, #212]	; (3b3c4 <pdn_interface_close+0x1c8>)
   3b2f0:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b2f4:	4630      	mov	r0, r6
   3b2f6:	f007 fafd 	bl	428f4 <sniprintf>
   3b2fa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   3b2fe:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3b302:	681b      	ldr	r3, [r3, #0]
   3b304:	4a30      	ldr	r2, [pc, #192]	; (3b3c8 <pdn_interface_close+0x1cc>)
   3b306:	4430      	add	r0, r6
   3b308:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 3b3d8 <pdn_interface_close+0x1dc>
   3b30c:	f007 faf2 	bl	428f4 <sniprintf>
   3b310:	4630      	mov	r0, r6
   3b312:	f8d8 9000 	ldr.w	r9, [r8]
   3b316:	2700      	movs	r7, #0
   3b318:	f7e1 ffa4 	bl	1d264 <strlen>
   3b31c:	4631      	mov	r1, r6
   3b31e:	4602      	mov	r2, r0
   3b320:	463b      	mov	r3, r7
   3b322:	4648      	mov	r0, r9
   3b324:	9701      	str	r7, [sp, #4]
   3b326:	9700      	str	r7, [sp, #0]
   3b328:	f7ff f95a 	bl	3a5e0 <at_interface_write>
   3b32c:	4681      	mov	r9, r0
   3b32e:	4630      	mov	r0, r6
   3b330:	f7e1 ff98 	bl	1d264 <strlen>
   3b334:	4548      	cmp	r0, r9
   3b336:	d139      	bne.n	3b3ac <pdn_interface_close+0x1b0>
   3b338:	463b      	mov	r3, r7
   3b33a:	e9cd 7700 	strd	r7, r7, [sp]
   3b33e:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b342:	4631      	mov	r1, r6
   3b344:	f8d8 0000 	ldr.w	r0, [r8]
   3b348:	f7ff faac 	bl	3a8a4 <at_interface_read>
   3b34c:	4607      	mov	r7, r0
   3b34e:	481f      	ldr	r0, [pc, #124]	; (3b3cc <pdn_interface_close+0x1d0>)
   3b350:	f7e1 ff88 	bl	1d264 <strlen>
   3b354:	4287      	cmp	r7, r0
   3b356:	db16      	blt.n	3b386 <pdn_interface_close+0x18a>
   3b358:	4602      	mov	r2, r0
   3b35a:	4631      	mov	r1, r6
   3b35c:	481b      	ldr	r0, [pc, #108]	; (3b3cc <pdn_interface_close+0x1d0>)
   3b35e:	f00d f90c 	bl	4857a <strncmp>
   3b362:	b980      	cbnz	r0, 3b386 <pdn_interface_close+0x18a>
   3b364:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3b368:	e768      	b.n	3b23c <pdn_interface_close+0x40>
   3b36a:	2009      	movs	r0, #9
   3b36c:	f7f0 f8ec 	bl	2b548 <bsd_os_errno_set>
   3b370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b374:	e768      	b.n	3b248 <pdn_interface_close+0x4c>
   3b376:	4602      	mov	r2, r0
   3b378:	4631      	mov	r1, r6
   3b37a:	4814      	ldr	r0, [pc, #80]	; (3b3cc <pdn_interface_close+0x1d0>)
   3b37c:	f00d f8fd 	bl	4857a <strncmp>
   3b380:	2800      	cmp	r0, #0
   3b382:	d0a9      	beq.n	3b2d8 <pdn_interface_close+0xdc>
   3b384:	e79b      	b.n	3b2be <pdn_interface_close+0xc2>
   3b386:	4812      	ldr	r0, [pc, #72]	; (3b3d0 <pdn_interface_close+0x1d4>)
   3b388:	f7e1 ff6c 	bl	1d264 <strlen>
   3b38c:	490b      	ldr	r1, [pc, #44]	; (3b3bc <pdn_interface_close+0x1c0>)
   3b38e:	4602      	mov	r2, r0
   3b390:	480f      	ldr	r0, [pc, #60]	; (3b3d0 <pdn_interface_close+0x1d4>)
   3b392:	f00d f8f2 	bl	4857a <strncmp>
   3b396:	b948      	cbnz	r0, 3b3ac <pdn_interface_close+0x1b0>
   3b398:	2008      	movs	r0, #8
   3b39a:	f7f0 f8d5 	bl	2b548 <bsd_os_errno_set>
   3b39e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   3b3a2:	e74b      	b.n	3b23c <pdn_interface_close+0x40>
   3b3a4:	2005      	movs	r0, #5
   3b3a6:	f7f0 f8cf 	bl	2b548 <bsd_os_errno_set>
   3b3aa:	e795      	b.n	3b2d8 <pdn_interface_close+0xdc>
   3b3ac:	2005      	movs	r0, #5
   3b3ae:	f7f0 f8cb 	bl	2b548 <bsd_os_errno_set>
   3b3b2:	e7d7      	b.n	3b364 <pdn_interface_close+0x168>
   3b3b4:	789a0000 	.word	0x789a0000
   3b3b8:	20025f1c 	.word	0x20025f1c
   3b3bc:	20025e1c 	.word	0x20025e1c
   3b3c0:	0004a4fc 	.word	0x0004a4fc
   3b3c4:	0004a5a8 	.word	0x0004a5a8
   3b3c8:	0004a560 	.word	0x0004a560
   3b3cc:	0004a534 	.word	0x0004a534
   3b3d0:	0004a5b8 	.word	0x0004a5b8
   3b3d4:	0004a508 	.word	0x0004a508
   3b3d8:	20025e18 	.word	0x20025e18

0003b3dc <pdn_interface_setopt>:
   3b3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b3de:	f240 2402 	movw	r4, #514	; 0x202
   3b3e2:	42a1      	cmp	r1, r4
   3b3e4:	9e06      	ldr	r6, [sp, #24]
   3b3e6:	f040 8090 	bne.w	3b50a <pdn_interface_setopt+0x12e>
   3b3ea:	461d      	mov	r5, r3
   3b3ec:	2b00      	cmp	r3, #0
   3b3ee:	f000 808c 	beq.w	3b50a <pdn_interface_setopt+0x12e>
   3b3f2:	2e00      	cmp	r6, #0
   3b3f4:	f000 8089 	beq.w	3b50a <pdn_interface_setopt+0x12e>
   3b3f8:	0c03      	lsrs	r3, r0, #16
   3b3fa:	494d      	ldr	r1, [pc, #308]	; (3b530 <pdn_interface_setopt+0x154>)
   3b3fc:	041b      	lsls	r3, r3, #16
   3b3fe:	428b      	cmp	r3, r1
   3b400:	d005      	beq.n	3b40e <pdn_interface_setopt+0x32>
   3b402:	2009      	movs	r0, #9
   3b404:	f7f0 f8a0 	bl	2b548 <bsd_os_errno_set>
   3b408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b40e:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3b412:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3b416:	2c09      	cmp	r4, #9
   3b418:	dcf3      	bgt.n	3b402 <pdn_interface_setopt+0x26>
   3b41a:	4f46      	ldr	r7, [pc, #280]	; (3b534 <pdn_interface_setopt+0x158>)
   3b41c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3b420:	2b00      	cmp	r3, #0
   3b422:	d0ee      	beq.n	3b402 <pdn_interface_setopt+0x26>
   3b424:	6899      	ldr	r1, [r3, #8]
   3b426:	2900      	cmp	r1, #0
   3b428:	d0eb      	beq.n	3b402 <pdn_interface_setopt+0x26>
   3b42a:	2a01      	cmp	r2, #1
   3b42c:	d049      	beq.n	3b4c2 <pdn_interface_setopt+0xe6>
   3b42e:	2a04      	cmp	r2, #4
   3b430:	d145      	bne.n	3b4be <pdn_interface_setopt+0xe2>
   3b432:	689a      	ldr	r2, [r3, #8]
   3b434:	2a00      	cmp	r2, #0
   3b436:	d04c      	beq.n	3b4d2 <pdn_interface_setopt+0xf6>
   3b438:	689a      	ldr	r2, [r3, #8]
   3b43a:	2a03      	cmp	r2, #3
   3b43c:	d049      	beq.n	3b4d2 <pdn_interface_setopt+0xf6>
   3b43e:	689b      	ldr	r3, [r3, #8]
   3b440:	2b04      	cmp	r3, #4
   3b442:	d046      	beq.n	3b4d2 <pdn_interface_setopt+0xf6>
   3b444:	4628      	mov	r0, r5
   3b446:	f7e1 ff0d 	bl	1d264 <strlen>
   3b44a:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3b44e:	3001      	adds	r0, #1
   3b450:	f105 0664 	add.w	r6, r5, #100	; 0x64
   3b454:	6158      	str	r0, [r3, #20]
   3b456:	4630      	mov	r0, r6
   3b458:	f7e1 ff04 	bl	1d264 <strlen>
   3b45c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3b460:	3001      	adds	r0, #1
   3b462:	6198      	str	r0, [r3, #24]
   3b464:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
   3b468:	3b01      	subs	r3, #1
   3b46a:	2b01      	cmp	r3, #1
   3b46c:	d84b      	bhi.n	3b506 <pdn_interface_setopt+0x12a>
   3b46e:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   3b472:	6943      	ldr	r3, [r0, #20]
   3b474:	2b63      	cmp	r3, #99	; 0x63
   3b476:	dc46      	bgt.n	3b506 <pdn_interface_setopt+0x12a>
   3b478:	6982      	ldr	r2, [r0, #24]
   3b47a:	2a63      	cmp	r2, #99	; 0x63
   3b47c:	dc43      	bgt.n	3b506 <pdn_interface_setopt+0x12a>
   3b47e:	4413      	add	r3, r2
   3b480:	f103 0120 	add.w	r1, r3, #32
   3b484:	f001 ff86 	bl	3d394 <nrf_realloc>
   3b488:	4603      	mov	r3, r0
   3b48a:	2800      	cmp	r0, #0
   3b48c:	d048      	beq.n	3b520 <pdn_interface_setopt+0x144>
   3b48e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
   3b492:	6941      	ldr	r1, [r0, #20]
   3b494:	462b      	mov	r3, r5
   3b496:	4a28      	ldr	r2, [pc, #160]	; (3b538 <pdn_interface_setopt+0x15c>)
   3b498:	3020      	adds	r0, #32
   3b49a:	f007 fa2b 	bl	428f4 <sniprintf>
   3b49e:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   3b4a2:	3021      	adds	r0, #33	; 0x21
   3b4a4:	4633      	mov	r3, r6
   3b4a6:	6991      	ldr	r1, [r2, #24]
   3b4a8:	4410      	add	r0, r2
   3b4aa:	4a23      	ldr	r2, [pc, #140]	; (3b538 <pdn_interface_setopt+0x15c>)
   3b4ac:	f007 fa22 	bl	428f4 <sniprintf>
   3b4b0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   3b4b4:	f895 20c8 	ldrb.w	r2, [r5, #200]	; 0xc8
   3b4b8:	2000      	movs	r0, #0
   3b4ba:	741a      	strb	r2, [r3, #16]
   3b4bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b4be:	202d      	movs	r0, #45	; 0x2d
   3b4c0:	e7a0      	b.n	3b404 <pdn_interface_setopt+0x28>
   3b4c2:	689a      	ldr	r2, [r3, #8]
   3b4c4:	b12a      	cbz	r2, 3b4d2 <pdn_interface_setopt+0xf6>
   3b4c6:	689a      	ldr	r2, [r3, #8]
   3b4c8:	2a03      	cmp	r2, #3
   3b4ca:	d002      	beq.n	3b4d2 <pdn_interface_setopt+0xf6>
   3b4cc:	689a      	ldr	r2, [r3, #8]
   3b4ce:	2a04      	cmp	r2, #4
   3b4d0:	d101      	bne.n	3b4d6 <pdn_interface_setopt+0xfa>
   3b4d2:	200e      	movs	r0, #14
   3b4d4:	e796      	b.n	3b404 <pdn_interface_setopt+0x28>
   3b4d6:	08b2      	lsrs	r2, r6, #2
   3b4d8:	1e51      	subs	r1, r2, #1
   3b4da:	2901      	cmp	r1, #1
   3b4dc:	d813      	bhi.n	3b506 <pdn_interface_setopt+0x12a>
   3b4de:	07b1      	lsls	r1, r6, #30
   3b4e0:	d111      	bne.n	3b506 <pdn_interface_setopt+0x12a>
   3b4e2:	6829      	ldr	r1, [r5, #0]
   3b4e4:	2902      	cmp	r1, #2
   3b4e6:	d016      	beq.n	3b516 <pdn_interface_setopt+0x13a>
   3b4e8:	290a      	cmp	r1, #10
   3b4ea:	d10c      	bne.n	3b506 <pdn_interface_setopt+0x12a>
   3b4ec:	2102      	movs	r1, #2
   3b4ee:	2a02      	cmp	r2, #2
   3b4f0:	d106      	bne.n	3b500 <pdn_interface_setopt+0x124>
   3b4f2:	686a      	ldr	r2, [r5, #4]
   3b4f4:	2a02      	cmp	r2, #2
   3b4f6:	d010      	beq.n	3b51a <pdn_interface_setopt+0x13e>
   3b4f8:	2a0a      	cmp	r2, #10
   3b4fa:	d104      	bne.n	3b506 <pdn_interface_setopt+0x12a>
   3b4fc:	f041 0102 	orr.w	r1, r1, #2
   3b500:	60d9      	str	r1, [r3, #12]
   3b502:	2000      	movs	r0, #0
   3b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b506:	2016      	movs	r0, #22
   3b508:	e77c      	b.n	3b404 <pdn_interface_setopt+0x28>
   3b50a:	2016      	movs	r0, #22
   3b50c:	f7f0 f81c 	bl	2b548 <bsd_os_errno_set>
   3b510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b516:	2101      	movs	r1, #1
   3b518:	e7e9      	b.n	3b4ee <pdn_interface_setopt+0x112>
   3b51a:	f041 0101 	orr.w	r1, r1, #1
   3b51e:	e7ef      	b.n	3b500 <pdn_interface_setopt+0x124>
   3b520:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   3b524:	200c      	movs	r0, #12
   3b526:	6153      	str	r3, [r2, #20]
   3b528:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   3b52c:	6193      	str	r3, [r2, #24]
   3b52e:	e769      	b.n	3b404 <pdn_interface_setopt+0x28>
   3b530:	789a0000 	.word	0x789a0000
   3b534:	20025f1c 	.word	0x20025f1c
   3b538:	0004a5a8 	.word	0x0004a5a8

0003b53c <pdn_interface_getopt>:
   3b53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b540:	f240 2402 	movw	r4, #514	; 0x202
   3b544:	b083      	sub	sp, #12
   3b546:	42a1      	cmp	r1, r4
   3b548:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   3b54a:	f040 808f 	bne.w	3b66c <pdn_interface_getopt+0x130>
   3b54e:	461e      	mov	r6, r3
   3b550:	2b00      	cmp	r3, #0
   3b552:	f000 808b 	beq.w	3b66c <pdn_interface_getopt+0x130>
   3b556:	2d00      	cmp	r5, #0
   3b558:	f000 8088 	beq.w	3b66c <pdn_interface_getopt+0x130>
   3b55c:	0c03      	lsrs	r3, r0, #16
   3b55e:	4954      	ldr	r1, [pc, #336]	; (3b6b0 <pdn_interface_getopt+0x174>)
   3b560:	041b      	lsls	r3, r3, #16
   3b562:	428b      	cmp	r3, r1
   3b564:	f040 8084 	bne.w	3b670 <pdn_interface_getopt+0x134>
   3b568:	f020 44f1 	bic.w	r4, r0, #2021654528	; 0x78800000
   3b56c:	f424 14d0 	bic.w	r4, r4, #1703936	; 0x1a0000
   3b570:	2c09      	cmp	r4, #9
   3b572:	dc7d      	bgt.n	3b670 <pdn_interface_getopt+0x134>
   3b574:	4b4f      	ldr	r3, [pc, #316]	; (3b6b4 <pdn_interface_getopt+0x178>)
   3b576:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   3b57a:	2b00      	cmp	r3, #0
   3b57c:	d078      	beq.n	3b670 <pdn_interface_getopt+0x134>
   3b57e:	6899      	ldr	r1, [r3, #8]
   3b580:	2900      	cmp	r1, #0
   3b582:	d075      	beq.n	3b670 <pdn_interface_getopt+0x134>
   3b584:	2a02      	cmp	r2, #2
   3b586:	d04e      	beq.n	3b626 <pdn_interface_getopt+0xea>
   3b588:	2a03      	cmp	r2, #3
   3b58a:	d009      	beq.n	3b5a0 <pdn_interface_getopt+0x64>
   3b58c:	2a01      	cmp	r2, #1
   3b58e:	d054      	beq.n	3b63a <pdn_interface_getopt+0xfe>
   3b590:	202d      	movs	r0, #45	; 0x2d
   3b592:	f7ef ffd9 	bl	2b548 <bsd_os_errno_set>
   3b596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b59a:	b003      	add	sp, #12
   3b59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b5a0:	682b      	ldr	r3, [r5, #0]
   3b5a2:	2b00      	cmp	r3, #0
   3b5a4:	d062      	beq.n	3b66c <pdn_interface_getopt+0x130>
   3b5a6:	4b44      	ldr	r3, [pc, #272]	; (3b6b8 <pdn_interface_getopt+0x17c>)
   3b5a8:	4a44      	ldr	r2, [pc, #272]	; (3b6bc <pdn_interface_getopt+0x180>)
   3b5aa:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b5ae:	4844      	ldr	r0, [pc, #272]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b5b0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 3b6cc <pdn_interface_getopt+0x190>
   3b5b4:	f007 f99e 	bl	428f4 <sniprintf>
   3b5b8:	4841      	ldr	r0, [pc, #260]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b5ba:	f8d8 9000 	ldr.w	r9, [r8]
   3b5be:	2700      	movs	r7, #0
   3b5c0:	f7e1 fe50 	bl	1d264 <strlen>
   3b5c4:	463b      	mov	r3, r7
   3b5c6:	4602      	mov	r2, r0
   3b5c8:	493d      	ldr	r1, [pc, #244]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b5ca:	4648      	mov	r0, r9
   3b5cc:	9701      	str	r7, [sp, #4]
   3b5ce:	9700      	str	r7, [sp, #0]
   3b5d0:	f7ff f806 	bl	3a5e0 <at_interface_write>
   3b5d4:	4681      	mov	r9, r0
   3b5d6:	483a      	ldr	r0, [pc, #232]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b5d8:	f7e1 fe44 	bl	1d264 <strlen>
   3b5dc:	4548      	cmp	r0, r9
   3b5de:	d161      	bne.n	3b6a4 <pdn_interface_getopt+0x168>
   3b5e0:	463b      	mov	r3, r7
   3b5e2:	e9cd 7700 	strd	r7, r7, [sp]
   3b5e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b5ea:	4935      	ldr	r1, [pc, #212]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b5ec:	f8d8 0000 	ldr.w	r0, [r8]
   3b5f0:	f7ff f958 	bl	3a8a4 <at_interface_read>
   3b5f4:	4607      	mov	r7, r0
   3b5f6:	4833      	ldr	r0, [pc, #204]	; (3b6c4 <pdn_interface_getopt+0x188>)
   3b5f8:	f7e1 fe34 	bl	1d264 <strlen>
   3b5fc:	4287      	cmp	r7, r0
   3b5fe:	db3d      	blt.n	3b67c <pdn_interface_getopt+0x140>
   3b600:	4602      	mov	r2, r0
   3b602:	492f      	ldr	r1, [pc, #188]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b604:	482f      	ldr	r0, [pc, #188]	; (3b6c4 <pdn_interface_getopt+0x188>)
   3b606:	f00c ffb8 	bl	4857a <strncmp>
   3b60a:	4607      	mov	r7, r0
   3b60c:	2800      	cmp	r0, #0
   3b60e:	d135      	bne.n	3b67c <pdn_interface_getopt+0x140>
   3b610:	4620      	mov	r0, r4
   3b612:	492b      	ldr	r1, [pc, #172]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b614:	f7ff fa30 	bl	3aa78 <pdn_state_get_parser>
   3b618:	2800      	cmp	r0, #0
   3b61a:	dbba      	blt.n	3b592 <pdn_interface_getopt+0x56>
   3b61c:	2301      	movs	r3, #1
   3b61e:	7030      	strb	r0, [r6, #0]
   3b620:	4638      	mov	r0, r7
   3b622:	602b      	str	r3, [r5, #0]
   3b624:	e7b9      	b.n	3b59a <pdn_interface_getopt+0x5e>
   3b626:	682a      	ldr	r2, [r5, #0]
   3b628:	b302      	cbz	r2, 3b66c <pdn_interface_getopt+0x130>
   3b62a:	2201      	movs	r2, #1
   3b62c:	2000      	movs	r0, #0
   3b62e:	681b      	ldr	r3, [r3, #0]
   3b630:	7033      	strb	r3, [r6, #0]
   3b632:	602a      	str	r2, [r5, #0]
   3b634:	b003      	add	sp, #12
   3b636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b63a:	689a      	ldr	r2, [r3, #8]
   3b63c:	b1a2      	cbz	r2, 3b668 <pdn_interface_getopt+0x12c>
   3b63e:	689a      	ldr	r2, [r3, #8]
   3b640:	2a04      	cmp	r2, #4
   3b642:	d011      	beq.n	3b668 <pdn_interface_getopt+0x12c>
   3b644:	682a      	ldr	r2, [r5, #0]
   3b646:	2a07      	cmp	r2, #7
   3b648:	d910      	bls.n	3b66c <pdn_interface_getopt+0x130>
   3b64a:	f012 0203 	ands.w	r2, r2, #3
   3b64e:	d10d      	bne.n	3b66c <pdn_interface_getopt+0x130>
   3b650:	68db      	ldr	r3, [r3, #12]
   3b652:	0799      	lsls	r1, r3, #30
   3b654:	d421      	bmi.n	3b69a <pdn_interface_getopt+0x15e>
   3b656:	2104      	movs	r1, #4
   3b658:	07db      	lsls	r3, r3, #31
   3b65a:	d502      	bpl.n	3b662 <pdn_interface_getopt+0x126>
   3b65c:	2302      	movs	r3, #2
   3b65e:	50b3      	str	r3, [r6, r2]
   3b660:	460a      	mov	r2, r1
   3b662:	602a      	str	r2, [r5, #0]
   3b664:	2000      	movs	r0, #0
   3b666:	e798      	b.n	3b59a <pdn_interface_getopt+0x5e>
   3b668:	200e      	movs	r0, #14
   3b66a:	e792      	b.n	3b592 <pdn_interface_getopt+0x56>
   3b66c:	2016      	movs	r0, #22
   3b66e:	e790      	b.n	3b592 <pdn_interface_getopt+0x56>
   3b670:	2009      	movs	r0, #9
   3b672:	f7ef ff69 	bl	2b548 <bsd_os_errno_set>
   3b676:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b67a:	e78e      	b.n	3b59a <pdn_interface_getopt+0x5e>
   3b67c:	4812      	ldr	r0, [pc, #72]	; (3b6c8 <pdn_interface_getopt+0x18c>)
   3b67e:	f7e1 fdf1 	bl	1d264 <strlen>
   3b682:	490f      	ldr	r1, [pc, #60]	; (3b6c0 <pdn_interface_getopt+0x184>)
   3b684:	4602      	mov	r2, r0
   3b686:	4810      	ldr	r0, [pc, #64]	; (3b6c8 <pdn_interface_getopt+0x18c>)
   3b688:	f00c ff77 	bl	4857a <strncmp>
   3b68c:	b950      	cbnz	r0, 3b6a4 <pdn_interface_getopt+0x168>
   3b68e:	2008      	movs	r0, #8
   3b690:	f7ef ff5a 	bl	2b548 <bsd_os_errno_set>
   3b694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b698:	e77b      	b.n	3b592 <pdn_interface_getopt+0x56>
   3b69a:	220a      	movs	r2, #10
   3b69c:	2108      	movs	r1, #8
   3b69e:	6032      	str	r2, [r6, #0]
   3b6a0:	2204      	movs	r2, #4
   3b6a2:	e7d9      	b.n	3b658 <pdn_interface_getopt+0x11c>
   3b6a4:	2005      	movs	r0, #5
   3b6a6:	f7ef ff4f 	bl	2b548 <bsd_os_errno_set>
   3b6aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b6ae:	e770      	b.n	3b592 <pdn_interface_getopt+0x56>
   3b6b0:	789a0000 	.word	0x789a0000
   3b6b4:	20025f1c 	.word	0x20025f1c
   3b6b8:	0004a588 	.word	0x0004a588
   3b6bc:	0004a5a8 	.word	0x0004a5a8
   3b6c0:	20025e1c 	.word	0x20025e1c
   3b6c4:	0004a594 	.word	0x0004a594
   3b6c8:	0004a5b8 	.word	0x0004a5b8
   3b6cc:	20025e18 	.word	0x20025e18

0003b6d0 <pdn_interface_pdn_id_get>:
   3b6d0:	2900      	cmp	r1, #0
   3b6d2:	f000 82e0 	beq.w	3bc96 <pdn_interface_pdn_id_get+0x5c6>
   3b6d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b6da:	4ca5      	ldr	r4, [pc, #660]	; (3b970 <pdn_interface_pdn_id_get+0x2a0>)
   3b6dc:	2802      	cmp	r0, #2
   3b6de:	b083      	sub	sp, #12
   3b6e0:	460d      	mov	r5, r1
   3b6e2:	6823      	ldr	r3, [r4, #0]
   3b6e4:	f000 808f 	beq.w	3b806 <pdn_interface_pdn_id_get+0x136>
   3b6e8:	280a      	cmp	r0, #10
   3b6ea:	d03f      	beq.n	3b76c <pdn_interface_pdn_id_get+0x9c>
   3b6ec:	b11b      	cbz	r3, 3b6f6 <pdn_interface_pdn_id_get+0x26>
   3b6ee:	689a      	ldr	r2, [r3, #8]
   3b6f0:	2a03      	cmp	r2, #3
   3b6f2:	f000 80e2 	beq.w	3b8ba <pdn_interface_pdn_id_get+0x1ea>
   3b6f6:	6863      	ldr	r3, [r4, #4]
   3b6f8:	b11b      	cbz	r3, 3b702 <pdn_interface_pdn_id_get+0x32>
   3b6fa:	689a      	ldr	r2, [r3, #8]
   3b6fc:	2a03      	cmp	r2, #3
   3b6fe:	f000 80d2 	beq.w	3b8a6 <pdn_interface_pdn_id_get+0x1d6>
   3b702:	68a3      	ldr	r3, [r4, #8]
   3b704:	b11b      	cbz	r3, 3b70e <pdn_interface_pdn_id_get+0x3e>
   3b706:	689a      	ldr	r2, [r3, #8]
   3b708:	2a03      	cmp	r2, #3
   3b70a:	f000 80ff 	beq.w	3b90c <pdn_interface_pdn_id_get+0x23c>
   3b70e:	68e3      	ldr	r3, [r4, #12]
   3b710:	b11b      	cbz	r3, 3b71a <pdn_interface_pdn_id_get+0x4a>
   3b712:	689a      	ldr	r2, [r3, #8]
   3b714:	2a03      	cmp	r2, #3
   3b716:	f000 8121 	beq.w	3b95c <pdn_interface_pdn_id_get+0x28c>
   3b71a:	6923      	ldr	r3, [r4, #16]
   3b71c:	b11b      	cbz	r3, 3b726 <pdn_interface_pdn_id_get+0x56>
   3b71e:	689a      	ldr	r2, [r3, #8]
   3b720:	2a03      	cmp	r2, #3
   3b722:	f000 8111 	beq.w	3b948 <pdn_interface_pdn_id_get+0x278>
   3b726:	6963      	ldr	r3, [r4, #20]
   3b728:	b11b      	cbz	r3, 3b732 <pdn_interface_pdn_id_get+0x62>
   3b72a:	689a      	ldr	r2, [r3, #8]
   3b72c:	2a03      	cmp	r2, #3
   3b72e:	f000 8101 	beq.w	3b934 <pdn_interface_pdn_id_get+0x264>
   3b732:	69a3      	ldr	r3, [r4, #24]
   3b734:	b11b      	cbz	r3, 3b73e <pdn_interface_pdn_id_get+0x6e>
   3b736:	689a      	ldr	r2, [r3, #8]
   3b738:	2a03      	cmp	r2, #3
   3b73a:	f000 80f1 	beq.w	3b920 <pdn_interface_pdn_id_get+0x250>
   3b73e:	69e3      	ldr	r3, [r4, #28]
   3b740:	b11b      	cbz	r3, 3b74a <pdn_interface_pdn_id_get+0x7a>
   3b742:	689a      	ldr	r2, [r3, #8]
   3b744:	2a03      	cmp	r2, #3
   3b746:	f000 80cc 	beq.w	3b8e2 <pdn_interface_pdn_id_get+0x212>
   3b74a:	6a23      	ldr	r3, [r4, #32]
   3b74c:	b11b      	cbz	r3, 3b756 <pdn_interface_pdn_id_get+0x86>
   3b74e:	689a      	ldr	r2, [r3, #8]
   3b750:	2a03      	cmp	r2, #3
   3b752:	f000 80bc 	beq.w	3b8ce <pdn_interface_pdn_id_get+0x1fe>
   3b756:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b758:	b11b      	cbz	r3, 3b762 <pdn_interface_pdn_id_get+0x92>
   3b75a:	689a      	ldr	r2, [r3, #8]
   3b75c:	2a03      	cmp	r2, #3
   3b75e:	f000 80ca 	beq.w	3b8f6 <pdn_interface_pdn_id_get+0x226>
   3b762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3b766:	b003      	add	sp, #12
   3b768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b76c:	b11b      	cbz	r3, 3b776 <pdn_interface_pdn_id_get+0xa6>
   3b76e:	689a      	ldr	r2, [r3, #8]
   3b770:	2a03      	cmp	r2, #3
   3b772:	f000 80ff 	beq.w	3b974 <pdn_interface_pdn_id_get+0x2a4>
   3b776:	6863      	ldr	r3, [r4, #4]
   3b778:	b11b      	cbz	r3, 3b782 <pdn_interface_pdn_id_get+0xb2>
   3b77a:	689a      	ldr	r2, [r3, #8]
   3b77c:	2a03      	cmp	r2, #3
   3b77e:	f000 8158 	beq.w	3ba32 <pdn_interface_pdn_id_get+0x362>
   3b782:	68a3      	ldr	r3, [r4, #8]
   3b784:	b11b      	cbz	r3, 3b78e <pdn_interface_pdn_id_get+0xbe>
   3b786:	689a      	ldr	r2, [r3, #8]
   3b788:	2a03      	cmp	r2, #3
   3b78a:	f000 81e3 	beq.w	3bb54 <pdn_interface_pdn_id_get+0x484>
   3b78e:	68e3      	ldr	r3, [r4, #12]
   3b790:	b11b      	cbz	r3, 3b79a <pdn_interface_pdn_id_get+0xca>
   3b792:	689e      	ldr	r6, [r3, #8]
   3b794:	2e03      	cmp	r6, #3
   3b796:	f000 8195 	beq.w	3bac4 <pdn_interface_pdn_id_get+0x3f4>
   3b79a:	6923      	ldr	r3, [r4, #16]
   3b79c:	b11b      	cbz	r3, 3b7a6 <pdn_interface_pdn_id_get+0xd6>
   3b79e:	689a      	ldr	r2, [r3, #8]
   3b7a0:	2a03      	cmp	r2, #3
   3b7a2:	f000 81a1 	beq.w	3bae8 <pdn_interface_pdn_id_get+0x418>
   3b7a6:	6963      	ldr	r3, [r4, #20]
   3b7a8:	b11b      	cbz	r3, 3b7b2 <pdn_interface_pdn_id_get+0xe2>
   3b7aa:	689a      	ldr	r2, [r3, #8]
   3b7ac:	2a03      	cmp	r2, #3
   3b7ae:	f000 81e2 	beq.w	3bb76 <pdn_interface_pdn_id_get+0x4a6>
   3b7b2:	69a3      	ldr	r3, [r4, #24]
   3b7b4:	b11b      	cbz	r3, 3b7be <pdn_interface_pdn_id_get+0xee>
   3b7b6:	689a      	ldr	r2, [r3, #8]
   3b7b8:	2a03      	cmp	r2, #3
   3b7ba:	f000 825b 	beq.w	3bc74 <pdn_interface_pdn_id_get+0x5a4>
   3b7be:	69e3      	ldr	r3, [r4, #28]
   3b7c0:	b11b      	cbz	r3, 3b7ca <pdn_interface_pdn_id_get+0xfa>
   3b7c2:	689a      	ldr	r2, [r3, #8]
   3b7c4:	2a03      	cmp	r2, #3
   3b7c6:	f000 8233 	beq.w	3bc30 <pdn_interface_pdn_id_get+0x560>
   3b7ca:	6a23      	ldr	r3, [r4, #32]
   3b7cc:	b11b      	cbz	r3, 3b7d6 <pdn_interface_pdn_id_get+0x106>
   3b7ce:	689a      	ldr	r2, [r3, #8]
   3b7d0:	2a03      	cmp	r2, #3
   3b7d2:	f000 823e 	beq.w	3bc52 <pdn_interface_pdn_id_get+0x582>
   3b7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b7d8:	2b00      	cmp	r3, #0
   3b7da:	d0c2      	beq.n	3b762 <pdn_interface_pdn_id_get+0x92>
   3b7dc:	689a      	ldr	r2, [r3, #8]
   3b7de:	2a03      	cmp	r2, #3
   3b7e0:	d1bf      	bne.n	3b762 <pdn_interface_pdn_id_get+0x92>
   3b7e2:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
   3b7e6:	440a      	add	r2, r1
   3b7e8:	f102 0120 	add.w	r1, r2, #32
   3b7ec:	4628      	mov	r0, r5
   3b7ee:	4419      	add	r1, r3
   3b7f0:	2264      	movs	r2, #100	; 0x64
   3b7f2:	f00c fec2 	bl	4857a <strncmp>
   3b7f6:	2800      	cmp	r0, #0
   3b7f8:	d1b3      	bne.n	3b762 <pdn_interface_pdn_id_get+0x92>
   3b7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b7fc:	68da      	ldr	r2, [r3, #12]
   3b7fe:	0792      	lsls	r2, r2, #30
   3b800:	d5af      	bpl.n	3b762 <pdn_interface_pdn_id_get+0x92>
   3b802:	2609      	movs	r6, #9
   3b804:	e0c8      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3b806:	b11b      	cbz	r3, 3b810 <pdn_interface_pdn_id_get+0x140>
   3b808:	689a      	ldr	r2, [r3, #8]
   3b80a:	2a03      	cmp	r2, #3
   3b80c:	f000 8124 	beq.w	3ba58 <pdn_interface_pdn_id_get+0x388>
   3b810:	6863      	ldr	r3, [r4, #4]
   3b812:	b11b      	cbz	r3, 3b81c <pdn_interface_pdn_id_get+0x14c>
   3b814:	689a      	ldr	r2, [r3, #8]
   3b816:	2a03      	cmp	r2, #3
   3b818:	f000 8130 	beq.w	3ba7c <pdn_interface_pdn_id_get+0x3ac>
   3b81c:	68a3      	ldr	r3, [r4, #8]
   3b81e:	b11b      	cbz	r3, 3b828 <pdn_interface_pdn_id_get+0x158>
   3b820:	689a      	ldr	r2, [r3, #8]
   3b822:	2a03      	cmp	r2, #3
   3b824:	f000 8183 	beq.w	3bb2e <pdn_interface_pdn_id_get+0x45e>
   3b828:	68e3      	ldr	r3, [r4, #12]
   3b82a:	b11b      	cbz	r3, 3b834 <pdn_interface_pdn_id_get+0x164>
   3b82c:	689e      	ldr	r6, [r3, #8]
   3b82e:	2e03      	cmp	r6, #3
   3b830:	f000 816b 	beq.w	3bb0a <pdn_interface_pdn_id_get+0x43a>
   3b834:	6923      	ldr	r3, [r4, #16]
   3b836:	b11b      	cbz	r3, 3b840 <pdn_interface_pdn_id_get+0x170>
   3b838:	689a      	ldr	r2, [r3, #8]
   3b83a:	2a03      	cmp	r2, #3
   3b83c:	f000 812f 	beq.w	3ba9e <pdn_interface_pdn_id_get+0x3ce>
   3b840:	6963      	ldr	r3, [r4, #20]
   3b842:	b11b      	cbz	r3, 3b84c <pdn_interface_pdn_id_get+0x17c>
   3b844:	689a      	ldr	r2, [r3, #8]
   3b846:	2a03      	cmp	r2, #3
   3b848:	f000 81a8 	beq.w	3bb9c <pdn_interface_pdn_id_get+0x4cc>
   3b84c:	69a3      	ldr	r3, [r4, #24]
   3b84e:	b11b      	cbz	r3, 3b858 <pdn_interface_pdn_id_get+0x188>
   3b850:	689a      	ldr	r2, [r3, #8]
   3b852:	2a03      	cmp	r2, #3
   3b854:	f000 81b3 	beq.w	3bbbe <pdn_interface_pdn_id_get+0x4ee>
   3b858:	69e3      	ldr	r3, [r4, #28]
   3b85a:	b11b      	cbz	r3, 3b864 <pdn_interface_pdn_id_get+0x194>
   3b85c:	689a      	ldr	r2, [r3, #8]
   3b85e:	2a03      	cmp	r2, #3
   3b860:	f000 81c0 	beq.w	3bbe4 <pdn_interface_pdn_id_get+0x514>
   3b864:	6a23      	ldr	r3, [r4, #32]
   3b866:	b11b      	cbz	r3, 3b870 <pdn_interface_pdn_id_get+0x1a0>
   3b868:	689a      	ldr	r2, [r3, #8]
   3b86a:	2a03      	cmp	r2, #3
   3b86c:	f000 81cd 	beq.w	3bc0a <pdn_interface_pdn_id_get+0x53a>
   3b870:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b872:	2b00      	cmp	r3, #0
   3b874:	f43f af75 	beq.w	3b762 <pdn_interface_pdn_id_get+0x92>
   3b878:	689a      	ldr	r2, [r3, #8]
   3b87a:	2a03      	cmp	r2, #3
   3b87c:	f47f af71 	bne.w	3b762 <pdn_interface_pdn_id_get+0x92>
   3b880:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   3b884:	440a      	add	r2, r1
   3b886:	f102 0120 	add.w	r1, r2, #32
   3b88a:	4628      	mov	r0, r5
   3b88c:	4419      	add	r1, r3
   3b88e:	2264      	movs	r2, #100	; 0x64
   3b890:	f00c fe73 	bl	4857a <strncmp>
   3b894:	2800      	cmp	r0, #0
   3b896:	f47f af64 	bne.w	3b762 <pdn_interface_pdn_id_get+0x92>
   3b89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3b89c:	68da      	ldr	r2, [r3, #12]
   3b89e:	07d2      	lsls	r2, r2, #31
   3b8a0:	f57f af5f 	bpl.w	3b762 <pdn_interface_pdn_id_get+0x92>
   3b8a4:	e7ad      	b.n	3b802 <pdn_interface_pdn_id_get+0x132>
   3b8a6:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b8aa:	4401      	add	r1, r0
   3b8ac:	3120      	adds	r1, #32
   3b8ae:	2264      	movs	r2, #100	; 0x64
   3b8b0:	4419      	add	r1, r3
   3b8b2:	4628      	mov	r0, r5
   3b8b4:	f00c fe61 	bl	4857a <strncmp>
   3b8b8:	e723      	b.n	3b702 <pdn_interface_pdn_id_get+0x32>
   3b8ba:	e9d3 0105 	ldrd	r0, r1, [r3, #20]
   3b8be:	4401      	add	r1, r0
   3b8c0:	3120      	adds	r1, #32
   3b8c2:	2264      	movs	r2, #100	; 0x64
   3b8c4:	4419      	add	r1, r3
   3b8c6:	4628      	mov	r0, r5
   3b8c8:	f00c fe57 	bl	4857a <strncmp>
   3b8cc:	e713      	b.n	3b6f6 <pdn_interface_pdn_id_get+0x26>
   3b8ce:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b8d2:	4401      	add	r1, r0
   3b8d4:	3120      	adds	r1, #32
   3b8d6:	2264      	movs	r2, #100	; 0x64
   3b8d8:	4419      	add	r1, r3
   3b8da:	4628      	mov	r0, r5
   3b8dc:	f00c fe4d 	bl	4857a <strncmp>
   3b8e0:	e739      	b.n	3b756 <pdn_interface_pdn_id_get+0x86>
   3b8e2:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b8e6:	4401      	add	r1, r0
   3b8e8:	3120      	adds	r1, #32
   3b8ea:	2264      	movs	r2, #100	; 0x64
   3b8ec:	4419      	add	r1, r3
   3b8ee:	4628      	mov	r0, r5
   3b8f0:	f00c fe43 	bl	4857a <strncmp>
   3b8f4:	e729      	b.n	3b74a <pdn_interface_pdn_id_get+0x7a>
   3b8f6:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   3b8fa:	440a      	add	r2, r1
   3b8fc:	f102 0120 	add.w	r1, r2, #32
   3b900:	4628      	mov	r0, r5
   3b902:	4419      	add	r1, r3
   3b904:	2264      	movs	r2, #100	; 0x64
   3b906:	f00c fe38 	bl	4857a <strncmp>
   3b90a:	e72a      	b.n	3b762 <pdn_interface_pdn_id_get+0x92>
   3b90c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b910:	4401      	add	r1, r0
   3b912:	3120      	adds	r1, #32
   3b914:	2264      	movs	r2, #100	; 0x64
   3b916:	4419      	add	r1, r3
   3b918:	4628      	mov	r0, r5
   3b91a:	f00c fe2e 	bl	4857a <strncmp>
   3b91e:	e6f6      	b.n	3b70e <pdn_interface_pdn_id_get+0x3e>
   3b920:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b924:	4401      	add	r1, r0
   3b926:	3120      	adds	r1, #32
   3b928:	2264      	movs	r2, #100	; 0x64
   3b92a:	4419      	add	r1, r3
   3b92c:	4628      	mov	r0, r5
   3b92e:	f00c fe24 	bl	4857a <strncmp>
   3b932:	e704      	b.n	3b73e <pdn_interface_pdn_id_get+0x6e>
   3b934:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b938:	4401      	add	r1, r0
   3b93a:	3120      	adds	r1, #32
   3b93c:	2264      	movs	r2, #100	; 0x64
   3b93e:	4419      	add	r1, r3
   3b940:	4628      	mov	r0, r5
   3b942:	f00c fe1a 	bl	4857a <strncmp>
   3b946:	e6f4      	b.n	3b732 <pdn_interface_pdn_id_get+0x62>
   3b948:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b94c:	4401      	add	r1, r0
   3b94e:	3120      	adds	r1, #32
   3b950:	2264      	movs	r2, #100	; 0x64
   3b952:	4419      	add	r1, r3
   3b954:	4628      	mov	r0, r5
   3b956:	f00c fe10 	bl	4857a <strncmp>
   3b95a:	e6e4      	b.n	3b726 <pdn_interface_pdn_id_get+0x56>
   3b95c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b960:	4401      	add	r1, r0
   3b962:	3120      	adds	r1, #32
   3b964:	2264      	movs	r2, #100	; 0x64
   3b966:	4419      	add	r1, r3
   3b968:	4628      	mov	r0, r5
   3b96a:	f00c fe06 	bl	4857a <strncmp>
   3b96e:	e6d4      	b.n	3b71a <pdn_interface_pdn_id_get+0x4a>
   3b970:	20025f1c 	.word	0x20025f1c
   3b974:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3b978:	4401      	add	r1, r0
   3b97a:	3120      	adds	r1, #32
   3b97c:	2264      	movs	r2, #100	; 0x64
   3b97e:	4419      	add	r1, r3
   3b980:	4628      	mov	r0, r5
   3b982:	f00c fdfa 	bl	4857a <strncmp>
   3b986:	4606      	mov	r6, r0
   3b988:	2800      	cmp	r0, #0
   3b98a:	f47f aef4 	bne.w	3b776 <pdn_interface_pdn_id_get+0xa6>
   3b98e:	6823      	ldr	r3, [r4, #0]
   3b990:	68da      	ldr	r2, [r3, #12]
   3b992:	0797      	lsls	r7, r2, #30
   3b994:	f57f aeef 	bpl.w	3b776 <pdn_interface_pdn_id_get+0xa6>
   3b998:	6858      	ldr	r0, [r3, #4]
   3b99a:	1c43      	adds	r3, r0, #1
   3b99c:	f47f aee3 	bne.w	3b766 <pdn_interface_pdn_id_get+0x96>
   3b9a0:	4dbe      	ldr	r5, [pc, #760]	; (3bc9c <pdn_interface_pdn_id_get+0x5cc>)
   3b9a2:	4bbf      	ldr	r3, [pc, #764]	; (3bca0 <pdn_interface_pdn_id_get+0x5d0>)
   3b9a4:	4abf      	ldr	r2, [pc, #764]	; (3bca4 <pdn_interface_pdn_id_get+0x5d4>)
   3b9a6:	f44f 7180 	mov.w	r1, #256	; 0x100
   3b9aa:	4628      	mov	r0, r5
   3b9ac:	f006 ffa2 	bl	428f4 <sniprintf>
   3b9b0:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   3b9b4:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   3b9b8:	681b      	ldr	r3, [r3, #0]
   3b9ba:	4abb      	ldr	r2, [pc, #748]	; (3bca8 <pdn_interface_pdn_id_get+0x5d8>)
   3b9bc:	4428      	add	r0, r5
   3b9be:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 3bcb0 <pdn_interface_pdn_id_get+0x5e0>
   3b9c2:	f006 ff97 	bl	428f4 <sniprintf>
   3b9c6:	4628      	mov	r0, r5
   3b9c8:	f8d8 9000 	ldr.w	r9, [r8]
   3b9cc:	2700      	movs	r7, #0
   3b9ce:	f7e1 fc49 	bl	1d264 <strlen>
   3b9d2:	4629      	mov	r1, r5
   3b9d4:	4602      	mov	r2, r0
   3b9d6:	463b      	mov	r3, r7
   3b9d8:	4648      	mov	r0, r9
   3b9da:	9701      	str	r7, [sp, #4]
   3b9dc:	9700      	str	r7, [sp, #0]
   3b9de:	f7fe fdff 	bl	3a5e0 <at_interface_write>
   3b9e2:	4681      	mov	r9, r0
   3b9e4:	4628      	mov	r0, r5
   3b9e6:	f7e1 fc3d 	bl	1d264 <strlen>
   3b9ea:	4548      	cmp	r0, r9
   3b9ec:	f040 8172 	bne.w	3bcd4 <pdn_interface_pdn_id_get+0x604>
   3b9f0:	463b      	mov	r3, r7
   3b9f2:	f44f 7280 	mov.w	r2, #256	; 0x100
   3b9f6:	e9cd 7700 	strd	r7, r7, [sp]
   3b9fa:	4629      	mov	r1, r5
   3b9fc:	f8d8 0000 	ldr.w	r0, [r8]
   3ba00:	f7fe ff50 	bl	3a8a4 <at_interface_read>
   3ba04:	4607      	mov	r7, r0
   3ba06:	48a9      	ldr	r0, [pc, #676]	; (3bcac <pdn_interface_pdn_id_get+0x5dc>)
   3ba08:	f7e1 fc2c 	bl	1d264 <strlen>
   3ba0c:	4287      	cmp	r7, r0
   3ba0e:	4602      	mov	r2, r0
   3ba10:	f2c0 8150 	blt.w	3bcb4 <pdn_interface_pdn_id_get+0x5e4>
   3ba14:	4629      	mov	r1, r5
   3ba16:	48a5      	ldr	r0, [pc, #660]	; (3bcac <pdn_interface_pdn_id_get+0x5dc>)
   3ba18:	f00c fdaf 	bl	4857a <strncmp>
   3ba1c:	2800      	cmp	r0, #0
   3ba1e:	f040 8149 	bne.w	3bcb4 <pdn_interface_pdn_id_get+0x5e4>
   3ba22:	4629      	mov	r1, r5
   3ba24:	4630      	mov	r0, r6
   3ba26:	f7ff f85d 	bl	3aae4 <pdn_id_get_parser>
   3ba2a:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   3ba2e:	6858      	ldr	r0, [r3, #4]
   3ba30:	e699      	b.n	3b766 <pdn_interface_pdn_id_get+0x96>
   3ba32:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3ba36:	4401      	add	r1, r0
   3ba38:	3120      	adds	r1, #32
   3ba3a:	2264      	movs	r2, #100	; 0x64
   3ba3c:	4419      	add	r1, r3
   3ba3e:	4628      	mov	r0, r5
   3ba40:	f00c fd9b 	bl	4857a <strncmp>
   3ba44:	2800      	cmp	r0, #0
   3ba46:	f47f ae9c 	bne.w	3b782 <pdn_interface_pdn_id_get+0xb2>
   3ba4a:	6863      	ldr	r3, [r4, #4]
   3ba4c:	68da      	ldr	r2, [r3, #12]
   3ba4e:	0796      	lsls	r6, r2, #30
   3ba50:	f57f ae97 	bpl.w	3b782 <pdn_interface_pdn_id_get+0xb2>
   3ba54:	2601      	movs	r6, #1
   3ba56:	e79f      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3ba58:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3ba5c:	4401      	add	r1, r0
   3ba5e:	3120      	adds	r1, #32
   3ba60:	2264      	movs	r2, #100	; 0x64
   3ba62:	4419      	add	r1, r3
   3ba64:	4628      	mov	r0, r5
   3ba66:	f00c fd88 	bl	4857a <strncmp>
   3ba6a:	4606      	mov	r6, r0
   3ba6c:	2800      	cmp	r0, #0
   3ba6e:	f47f aecf 	bne.w	3b810 <pdn_interface_pdn_id_get+0x140>
   3ba72:	6823      	ldr	r3, [r4, #0]
   3ba74:	68da      	ldr	r2, [r3, #12]
   3ba76:	07d7      	lsls	r7, r2, #31
   3ba78:	d48e      	bmi.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3ba7a:	e6c9      	b.n	3b810 <pdn_interface_pdn_id_get+0x140>
   3ba7c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3ba80:	4401      	add	r1, r0
   3ba82:	3120      	adds	r1, #32
   3ba84:	2264      	movs	r2, #100	; 0x64
   3ba86:	4419      	add	r1, r3
   3ba88:	4628      	mov	r0, r5
   3ba8a:	f00c fd76 	bl	4857a <strncmp>
   3ba8e:	2800      	cmp	r0, #0
   3ba90:	f47f aec4 	bne.w	3b81c <pdn_interface_pdn_id_get+0x14c>
   3ba94:	6863      	ldr	r3, [r4, #4]
   3ba96:	68da      	ldr	r2, [r3, #12]
   3ba98:	07d6      	lsls	r6, r2, #31
   3ba9a:	d4db      	bmi.n	3ba54 <pdn_interface_pdn_id_get+0x384>
   3ba9c:	e6be      	b.n	3b81c <pdn_interface_pdn_id_get+0x14c>
   3ba9e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3baa2:	4401      	add	r1, r0
   3baa4:	3120      	adds	r1, #32
   3baa6:	2264      	movs	r2, #100	; 0x64
   3baa8:	4419      	add	r1, r3
   3baaa:	4628      	mov	r0, r5
   3baac:	f00c fd65 	bl	4857a <strncmp>
   3bab0:	2800      	cmp	r0, #0
   3bab2:	f47f aec5 	bne.w	3b840 <pdn_interface_pdn_id_get+0x170>
   3bab6:	6923      	ldr	r3, [r4, #16]
   3bab8:	68da      	ldr	r2, [r3, #12]
   3baba:	07d2      	lsls	r2, r2, #31
   3babc:	f57f aec0 	bpl.w	3b840 <pdn_interface_pdn_id_get+0x170>
   3bac0:	2604      	movs	r6, #4
   3bac2:	e769      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bac4:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bac8:	4401      	add	r1, r0
   3baca:	3120      	adds	r1, #32
   3bacc:	2264      	movs	r2, #100	; 0x64
   3bace:	4419      	add	r1, r3
   3bad0:	4628      	mov	r0, r5
   3bad2:	f00c fd52 	bl	4857a <strncmp>
   3bad6:	2800      	cmp	r0, #0
   3bad8:	f47f ae5f 	bne.w	3b79a <pdn_interface_pdn_id_get+0xca>
   3badc:	68e3      	ldr	r3, [r4, #12]
   3bade:	68da      	ldr	r2, [r3, #12]
   3bae0:	0791      	lsls	r1, r2, #30
   3bae2:	f53f af59 	bmi.w	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bae6:	e658      	b.n	3b79a <pdn_interface_pdn_id_get+0xca>
   3bae8:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3baec:	4401      	add	r1, r0
   3baee:	3120      	adds	r1, #32
   3baf0:	2264      	movs	r2, #100	; 0x64
   3baf2:	4419      	add	r1, r3
   3baf4:	4628      	mov	r0, r5
   3baf6:	f00c fd40 	bl	4857a <strncmp>
   3bafa:	2800      	cmp	r0, #0
   3bafc:	f47f ae53 	bne.w	3b7a6 <pdn_interface_pdn_id_get+0xd6>
   3bb00:	6923      	ldr	r3, [r4, #16]
   3bb02:	68da      	ldr	r2, [r3, #12]
   3bb04:	0792      	lsls	r2, r2, #30
   3bb06:	d4db      	bmi.n	3bac0 <pdn_interface_pdn_id_get+0x3f0>
   3bb08:	e64d      	b.n	3b7a6 <pdn_interface_pdn_id_get+0xd6>
   3bb0a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bb0e:	4401      	add	r1, r0
   3bb10:	3120      	adds	r1, #32
   3bb12:	2264      	movs	r2, #100	; 0x64
   3bb14:	4419      	add	r1, r3
   3bb16:	4628      	mov	r0, r5
   3bb18:	f00c fd2f 	bl	4857a <strncmp>
   3bb1c:	2800      	cmp	r0, #0
   3bb1e:	f47f ae89 	bne.w	3b834 <pdn_interface_pdn_id_get+0x164>
   3bb22:	68e3      	ldr	r3, [r4, #12]
   3bb24:	68da      	ldr	r2, [r3, #12]
   3bb26:	07d1      	lsls	r1, r2, #31
   3bb28:	f53f af36 	bmi.w	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bb2c:	e682      	b.n	3b834 <pdn_interface_pdn_id_get+0x164>
   3bb2e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bb32:	4401      	add	r1, r0
   3bb34:	3120      	adds	r1, #32
   3bb36:	2264      	movs	r2, #100	; 0x64
   3bb38:	4419      	add	r1, r3
   3bb3a:	4628      	mov	r0, r5
   3bb3c:	f00c fd1d 	bl	4857a <strncmp>
   3bb40:	2800      	cmp	r0, #0
   3bb42:	f47f ae71 	bne.w	3b828 <pdn_interface_pdn_id_get+0x158>
   3bb46:	68a3      	ldr	r3, [r4, #8]
   3bb48:	68da      	ldr	r2, [r3, #12]
   3bb4a:	07d0      	lsls	r0, r2, #31
   3bb4c:	f57f ae6c 	bpl.w	3b828 <pdn_interface_pdn_id_get+0x158>
   3bb50:	2602      	movs	r6, #2
   3bb52:	e721      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bb54:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bb58:	4401      	add	r1, r0
   3bb5a:	3120      	adds	r1, #32
   3bb5c:	2264      	movs	r2, #100	; 0x64
   3bb5e:	4419      	add	r1, r3
   3bb60:	4628      	mov	r0, r5
   3bb62:	f00c fd0a 	bl	4857a <strncmp>
   3bb66:	2800      	cmp	r0, #0
   3bb68:	f47f ae11 	bne.w	3b78e <pdn_interface_pdn_id_get+0xbe>
   3bb6c:	68a3      	ldr	r3, [r4, #8]
   3bb6e:	68da      	ldr	r2, [r3, #12]
   3bb70:	0790      	lsls	r0, r2, #30
   3bb72:	d4ed      	bmi.n	3bb50 <pdn_interface_pdn_id_get+0x480>
   3bb74:	e60b      	b.n	3b78e <pdn_interface_pdn_id_get+0xbe>
   3bb76:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bb7a:	4401      	add	r1, r0
   3bb7c:	3120      	adds	r1, #32
   3bb7e:	2264      	movs	r2, #100	; 0x64
   3bb80:	4419      	add	r1, r3
   3bb82:	4628      	mov	r0, r5
   3bb84:	f00c fcf9 	bl	4857a <strncmp>
   3bb88:	2800      	cmp	r0, #0
   3bb8a:	f47f ae12 	bne.w	3b7b2 <pdn_interface_pdn_id_get+0xe2>
   3bb8e:	6963      	ldr	r3, [r4, #20]
   3bb90:	68da      	ldr	r2, [r3, #12]
   3bb92:	0797      	lsls	r7, r2, #30
   3bb94:	f57f ae0d 	bpl.w	3b7b2 <pdn_interface_pdn_id_get+0xe2>
   3bb98:	2605      	movs	r6, #5
   3bb9a:	e6fd      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bb9c:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bba0:	4401      	add	r1, r0
   3bba2:	3120      	adds	r1, #32
   3bba4:	2264      	movs	r2, #100	; 0x64
   3bba6:	4419      	add	r1, r3
   3bba8:	4628      	mov	r0, r5
   3bbaa:	f00c fce6 	bl	4857a <strncmp>
   3bbae:	2800      	cmp	r0, #0
   3bbb0:	f47f ae4c 	bne.w	3b84c <pdn_interface_pdn_id_get+0x17c>
   3bbb4:	6963      	ldr	r3, [r4, #20]
   3bbb6:	68da      	ldr	r2, [r3, #12]
   3bbb8:	07d7      	lsls	r7, r2, #31
   3bbba:	d4ed      	bmi.n	3bb98 <pdn_interface_pdn_id_get+0x4c8>
   3bbbc:	e646      	b.n	3b84c <pdn_interface_pdn_id_get+0x17c>
   3bbbe:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bbc2:	4401      	add	r1, r0
   3bbc4:	3120      	adds	r1, #32
   3bbc6:	2264      	movs	r2, #100	; 0x64
   3bbc8:	4419      	add	r1, r3
   3bbca:	4628      	mov	r0, r5
   3bbcc:	f00c fcd5 	bl	4857a <strncmp>
   3bbd0:	2800      	cmp	r0, #0
   3bbd2:	f47f ae41 	bne.w	3b858 <pdn_interface_pdn_id_get+0x188>
   3bbd6:	69a3      	ldr	r3, [r4, #24]
   3bbd8:	68da      	ldr	r2, [r3, #12]
   3bbda:	07d6      	lsls	r6, r2, #31
   3bbdc:	f57f ae3c 	bpl.w	3b858 <pdn_interface_pdn_id_get+0x188>
   3bbe0:	2606      	movs	r6, #6
   3bbe2:	e6d9      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bbe4:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bbe8:	4401      	add	r1, r0
   3bbea:	3120      	adds	r1, #32
   3bbec:	2264      	movs	r2, #100	; 0x64
   3bbee:	4419      	add	r1, r3
   3bbf0:	4628      	mov	r0, r5
   3bbf2:	f00c fcc2 	bl	4857a <strncmp>
   3bbf6:	2800      	cmp	r0, #0
   3bbf8:	f47f ae34 	bne.w	3b864 <pdn_interface_pdn_id_get+0x194>
   3bbfc:	69e3      	ldr	r3, [r4, #28]
   3bbfe:	68da      	ldr	r2, [r3, #12]
   3bc00:	07d0      	lsls	r0, r2, #31
   3bc02:	f57f ae2f 	bpl.w	3b864 <pdn_interface_pdn_id_get+0x194>
   3bc06:	2607      	movs	r6, #7
   3bc08:	e6c6      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bc0a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bc0e:	4401      	add	r1, r0
   3bc10:	3120      	adds	r1, #32
   3bc12:	2264      	movs	r2, #100	; 0x64
   3bc14:	4419      	add	r1, r3
   3bc16:	4628      	mov	r0, r5
   3bc18:	f00c fcaf 	bl	4857a <strncmp>
   3bc1c:	2800      	cmp	r0, #0
   3bc1e:	f47f ae27 	bne.w	3b870 <pdn_interface_pdn_id_get+0x1a0>
   3bc22:	6a23      	ldr	r3, [r4, #32]
   3bc24:	68da      	ldr	r2, [r3, #12]
   3bc26:	07d1      	lsls	r1, r2, #31
   3bc28:	f57f ae22 	bpl.w	3b870 <pdn_interface_pdn_id_get+0x1a0>
   3bc2c:	2608      	movs	r6, #8
   3bc2e:	e6b3      	b.n	3b998 <pdn_interface_pdn_id_get+0x2c8>
   3bc30:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bc34:	4401      	add	r1, r0
   3bc36:	3120      	adds	r1, #32
   3bc38:	2264      	movs	r2, #100	; 0x64
   3bc3a:	4419      	add	r1, r3
   3bc3c:	4628      	mov	r0, r5
   3bc3e:	f00c fc9c 	bl	4857a <strncmp>
   3bc42:	2800      	cmp	r0, #0
   3bc44:	f47f adc1 	bne.w	3b7ca <pdn_interface_pdn_id_get+0xfa>
   3bc48:	69e3      	ldr	r3, [r4, #28]
   3bc4a:	68da      	ldr	r2, [r3, #12]
   3bc4c:	0790      	lsls	r0, r2, #30
   3bc4e:	d4da      	bmi.n	3bc06 <pdn_interface_pdn_id_get+0x536>
   3bc50:	e5bb      	b.n	3b7ca <pdn_interface_pdn_id_get+0xfa>
   3bc52:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bc56:	4401      	add	r1, r0
   3bc58:	3120      	adds	r1, #32
   3bc5a:	2264      	movs	r2, #100	; 0x64
   3bc5c:	4419      	add	r1, r3
   3bc5e:	4628      	mov	r0, r5
   3bc60:	f00c fc8b 	bl	4857a <strncmp>
   3bc64:	2800      	cmp	r0, #0
   3bc66:	f47f adb6 	bne.w	3b7d6 <pdn_interface_pdn_id_get+0x106>
   3bc6a:	6a23      	ldr	r3, [r4, #32]
   3bc6c:	68da      	ldr	r2, [r3, #12]
   3bc6e:	0791      	lsls	r1, r2, #30
   3bc70:	d4dc      	bmi.n	3bc2c <pdn_interface_pdn_id_get+0x55c>
   3bc72:	e5b0      	b.n	3b7d6 <pdn_interface_pdn_id_get+0x106>
   3bc74:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
   3bc78:	4401      	add	r1, r0
   3bc7a:	3120      	adds	r1, #32
   3bc7c:	2264      	movs	r2, #100	; 0x64
   3bc7e:	4419      	add	r1, r3
   3bc80:	4628      	mov	r0, r5
   3bc82:	f00c fc7a 	bl	4857a <strncmp>
   3bc86:	2800      	cmp	r0, #0
   3bc88:	f47f ad99 	bne.w	3b7be <pdn_interface_pdn_id_get+0xee>
   3bc8c:	69a3      	ldr	r3, [r4, #24]
   3bc8e:	68da      	ldr	r2, [r3, #12]
   3bc90:	0796      	lsls	r6, r2, #30
   3bc92:	d4a5      	bmi.n	3bbe0 <pdn_interface_pdn_id_get+0x510>
   3bc94:	e593      	b.n	3b7be <pdn_interface_pdn_id_get+0xee>
   3bc96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3bc9a:	4770      	bx	lr
   3bc9c:	20025e1c 	.word	0x20025e1c
   3bca0:	0004a564 	.word	0x0004a564
   3bca4:	0004a5a8 	.word	0x0004a5a8
   3bca8:	0004a560 	.word	0x0004a560
   3bcac:	0004a574 	.word	0x0004a574
   3bcb0:	20025e18 	.word	0x20025e18
   3bcb4:	480b      	ldr	r0, [pc, #44]	; (3bce4 <pdn_interface_pdn_id_get+0x614>)
   3bcb6:	f7e1 fad5 	bl	1d264 <strlen>
   3bcba:	490b      	ldr	r1, [pc, #44]	; (3bce8 <pdn_interface_pdn_id_get+0x618>)
   3bcbc:	4602      	mov	r2, r0
   3bcbe:	4809      	ldr	r0, [pc, #36]	; (3bce4 <pdn_interface_pdn_id_get+0x614>)
   3bcc0:	f00c fc5b 	bl	4857a <strncmp>
   3bcc4:	b930      	cbnz	r0, 3bcd4 <pdn_interface_pdn_id_get+0x604>
   3bcc6:	2008      	movs	r0, #8
   3bcc8:	f7ef fc3e 	bl	2b548 <bsd_os_errno_set>
   3bccc:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   3bcd0:	6858      	ldr	r0, [r3, #4]
   3bcd2:	e548      	b.n	3b766 <pdn_interface_pdn_id_get+0x96>
   3bcd4:	2005      	movs	r0, #5
   3bcd6:	f7ef fc37 	bl	2b548 <bsd_os_errno_set>
   3bcda:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
   3bcde:	6858      	ldr	r0, [r3, #4]
   3bce0:	e541      	b.n	3b766 <pdn_interface_pdn_id_get+0x96>
   3bce2:	bf00      	nop
   3bce4:	0004a5b8 	.word	0x0004a5b8
   3bce8:	20025e1c 	.word	0x20025e1c

0003bcec <bsd_platform_error_handler>:
   3bcec:	b508      	push	{r3, lr}
   3bcee:	f008 f946 	bl	43f7e <bsd_recoverable_error_handler>
   3bcf2:	bd08      	pop	{r3, pc}

0003bcf4 <bsd_init>:
   3bcf4:	b160      	cbz	r0, 3bd10 <bsd_init+0x1c>
   3bcf6:	b510      	push	{r4, lr}
   3bcf8:	4c07      	ldr	r4, [pc, #28]	; (3bd18 <bsd_init+0x24>)
   3bcfa:	7823      	ldrb	r3, [r4, #0]
   3bcfc:	b92b      	cbnz	r3, 3bd0a <bsd_init+0x16>
   3bcfe:	f000 f829 	bl	3bd54 <bsd_platform_init>
   3bd02:	b908      	cbnz	r0, 3bd08 <bsd_init+0x14>
   3bd04:	2301      	movs	r3, #1
   3bd06:	7023      	strb	r3, [r4, #0]
   3bd08:	bd10      	pop	{r4, pc}
   3bd0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3bd0e:	bd10      	pop	{r4, pc}
   3bd10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3bd14:	4770      	bx	lr
   3bd16:	bf00      	nop
   3bd18:	2002d1c2 	.word	0x2002d1c2

0003bd1c <bsd_shutdown>:
   3bd1c:	b510      	push	{r4, lr}
   3bd1e:	4c05      	ldr	r4, [pc, #20]	; (3bd34 <bsd_shutdown+0x18>)
   3bd20:	7823      	ldrb	r3, [r4, #0]
   3bd22:	b123      	cbz	r3, 3bd2e <bsd_shutdown+0x12>
   3bd24:	f000 f89a 	bl	3be5c <bsd_platform_shutdown>
   3bd28:	b900      	cbnz	r0, 3bd2c <bsd_shutdown+0x10>
   3bd2a:	7020      	strb	r0, [r4, #0]
   3bd2c:	bd10      	pop	{r4, pc}
   3bd2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3bd32:	bd10      	pop	{r4, pc}
   3bd34:	2002d1c2 	.word	0x2002d1c2

0003bd38 <unimplemented_method>:
   3bd38:	b40f      	push	{r0, r1, r2, r3}
   3bd3a:	b508      	push	{r3, lr}
   3bd3c:	202d      	movs	r0, #45	; 0x2d
   3bd3e:	f7ef fc03 	bl	2b548 <bsd_os_errno_set>
   3bd42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3bd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3bd4a:	b004      	add	sp, #16
   3bd4c:	4770      	bx	lr
   3bd4e:	bf00      	nop

0003bd50 <rpc_transport_ipc_fault_handler>:
   3bd50:	f7ff bfcc 	b.w	3bcec <bsd_platform_error_handler>

0003bd54 <bsd_platform_init>:
   3bd54:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bd56:	f04f 0c00 	mov.w	ip, #0
   3bd5a:	f247 0660 	movw	r6, #28768	; 0x7060
   3bd5e:	f24b 0260 	movw	r2, #45152	; 0xb060
   3bd62:	6843      	ldr	r3, [r0, #4]
   3bd64:	4d3a      	ldr	r5, [pc, #232]	; (3be50 <bsd_platform_init+0xfc>)
   3bd66:	4607      	mov	r7, r0
   3bd68:	602b      	str	r3, [r5, #0]
   3bd6a:	7801      	ldrb	r1, [r0, #0]
   3bd6c:	2006      	movs	r0, #6
   3bd6e:	4561      	cmp	r1, ip
   3bd70:	bf08      	it	eq
   3bd72:	4632      	moveq	r2, r6
   3bd74:	4413      	add	r3, r2
   3bd76:	4c37      	ldr	r4, [pc, #220]	; (3be54 <bsd_platform_init+0x100>)
   3bd78:	60ab      	str	r3, [r5, #8]
   3bd7a:	68b9      	ldr	r1, [r7, #8]
   3bd7c:	6063      	str	r3, [r4, #4]
   3bd7e:	4b36      	ldr	r3, [pc, #216]	; (3be58 <bsd_platform_init+0x104>)
   3bd80:	b093      	sub	sp, #76	; 0x4c
   3bd82:	606a      	str	r2, [r5, #4]
   3bd84:	f8a4 c000 	strh.w	ip, [r4]
   3bd88:	1a8a      	subs	r2, r1, r2
   3bd8a:	60ea      	str	r2, [r5, #12]
   3bd8c:	60a2      	str	r2, [r4, #8]
   3bd8e:	81a0      	strh	r0, [r4, #12]
   3bd90:	6123      	str	r3, [r4, #16]
   3bd92:	f001 f95b 	bl	3d04c <nrf_mem_init>
   3bd96:	2800      	cmp	r0, #0
   3bd98:	d156      	bne.n	3be48 <bsd_platform_init+0xf4>
   3bd9a:	4621      	mov	r1, r4
   3bd9c:	a801      	add	r0, sp, #4
   3bd9e:	f001 f9c9 	bl	3d134 <nrf_mem_register>
   3bda2:	2800      	cmp	r0, #0
   3bda4:	d150      	bne.n	3be48 <bsd_platform_init+0xf4>
   3bda6:	f7ef fceb 	bl	2b780 <bsd_os_init>
   3bdaa:	f7fd fb49 	bl	39440 <rpc_framework_init>
   3bdae:	2800      	cmp	r0, #0
   3bdb0:	d14a      	bne.n	3be48 <bsd_platform_init+0xf4>
   3bdb2:	783a      	ldrb	r2, [r7, #0]
   3bdb4:	682b      	ldr	r3, [r5, #0]
   3bdb6:	bb32      	cbnz	r2, 3be06 <bsd_platform_init+0xb2>
   3bdb8:	4606      	mov	r6, r0
   3bdba:	2220      	movs	r2, #32
   3bdbc:	2408      	movs	r4, #8
   3bdbe:	2500      	movs	r5, #0
   3bdc0:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
   3bdc4:	f44f 4780 	mov.w	r7, #16384	; 0x4000
   3bdc8:	f503 5141 	add.w	r1, r3, #12352	; 0x3040
   3bdcc:	4411      	add	r1, r2
   3bdce:	9302      	str	r3, [sp, #8]
   3bdd0:	e9cd 6008 	strd	r6, r0, [sp, #32]
   3bdd4:	910c      	str	r1, [sp, #48]	; 0x30
   3bdd6:	9203      	str	r2, [sp, #12]
   3bdd8:	f103 0140 	add.w	r1, r3, #64	; 0x40
   3bddc:	9205      	str	r2, [sp, #20]
   3bdde:	9207      	str	r2, [sp, #28]
   3bde0:	eb0d 0004 	add.w	r0, sp, r4
   3bde4:	189a      	adds	r2, r3, r2
   3bde6:	3360      	adds	r3, #96	; 0x60
   3bde8:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
   3bdec:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   3bdf0:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
   3bdf4:	940f      	str	r4, [sp, #60]	; 0x3c
   3bdf6:	9104      	str	r1, [sp, #16]
   3bdf8:	9206      	str	r2, [sp, #24]
   3bdfa:	930a      	str	r3, [sp, #40]	; 0x28
   3bdfc:	f7fa fa2c 	bl	36258 <rpc_transport_ipc_init>
   3be00:	b128      	cbz	r0, 3be0e <bsd_platform_init+0xba>
   3be02:	b013      	add	sp, #76	; 0x4c
   3be04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3be06:	441e      	add	r6, r3
   3be08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   3be0c:	e7d5      	b.n	3bdba <bsd_platform_init+0x66>
   3be0e:	f001 fe91 	bl	3db34 <interface_init>
   3be12:	b9c8      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be14:	f7fe fc62 	bl	3a6dc <at_interface_init>
   3be18:	b9b0      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be1a:	f7fb fd87 	bl	3792c <ip_interface_init>
   3be1e:	b998      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be20:	f7fb f832 	bl	36e88 <tls_interface_init>
   3be24:	b980      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be26:	f001 fb91 	bl	3d54c <mfu_interface_init>
   3be2a:	b968      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be2c:	f7fe feb2 	bl	3ab94 <pdn_interface_init>
   3be30:	b950      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be32:	f7fe fa83 	bl	3a33c <gnss_interface_init>
   3be36:	b938      	cbnz	r0, 3be48 <bsd_platform_init+0xf4>
   3be38:	f7f9 fc3e 	bl	356b8 <logobj_interface_init>
   3be3c:	1b40      	subs	r0, r0, r5
   3be3e:	bf18      	it	ne
   3be40:	2001      	movne	r0, #1
   3be42:	4240      	negs	r0, r0
   3be44:	b013      	add	sp, #76	; 0x4c
   3be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3be48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3be4c:	b013      	add	sp, #76	; 0x4c
   3be4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3be50:	20025f58 	.word	0x20025f58
   3be54:	20025f44 	.word	0x20025f44
   3be58:	0004a70c 	.word	0x0004a70c

0003be5c <bsd_platform_shutdown>:
   3be5c:	b570      	push	{r4, r5, r6, lr}
   3be5e:	b084      	sub	sp, #16
   3be60:	f002 f852 	bl	3df08 <interface_shutdown>
   3be64:	f7fe fa8c 	bl	3a380 <gnss_interface_deinit>
   3be68:	2800      	cmp	r0, #0
   3be6a:	bf14      	ite	ne
   3be6c:	2416      	movne	r4, #22
   3be6e:	2400      	moveq	r4, #0
   3be70:	f7fb fd7a 	bl	37968 <ip_interface_deinit>
   3be74:	2800      	cmp	r0, #0
   3be76:	bf18      	it	ne
   3be78:	2416      	movne	r4, #22
   3be7a:	f7f9 fc3b 	bl	356f4 <logobj_interface_deinit>
   3be7e:	2800      	cmp	r0, #0
   3be80:	bf18      	it	ne
   3be82:	2416      	movne	r4, #22
   3be84:	f001 fb7e 	bl	3d584 <mfu_interface_deinit>
   3be88:	2800      	cmp	r0, #0
   3be8a:	bf18      	it	ne
   3be8c:	2416      	movne	r4, #22
   3be8e:	f7fe fea1 	bl	3abd4 <pdn_interface_deinit>
   3be92:	2800      	cmp	r0, #0
   3be94:	bf18      	it	ne
   3be96:	2416      	movne	r4, #22
   3be98:	f7fa fffe 	bl	36e98 <tls_interface_deinit>
   3be9c:	2800      	cmp	r0, #0
   3be9e:	bf18      	it	ne
   3bea0:	2416      	movne	r4, #22
   3bea2:	f7fe fc25 	bl	3a6f0 <at_interface_deinit>
   3bea6:	2800      	cmp	r0, #0
   3bea8:	bf18      	it	ne
   3beaa:	2416      	movne	r4, #22
   3beac:	f7fa ff22 	bl	36cf4 <rpc_transport_ipc_request_shutdown>
   3beb0:	f247 5330 	movw	r3, #30000	; 0x7530
   3beb4:	2564      	movs	r5, #100	; 0x64
   3beb6:	9301      	str	r3, [sp, #4]
   3beb8:	e00b      	b.n	3bed2 <bsd_platform_shutdown+0x76>
   3beba:	2b00      	cmp	r3, #0
   3bebc:	dd0e      	ble.n	3bedc <bsd_platform_shutdown+0x80>
   3bebe:	a903      	add	r1, sp, #12
   3bec0:	9503      	str	r5, [sp, #12]
   3bec2:	f7ef fa81 	bl	2b3c8 <bsd_os_timedwait>
   3bec6:	9a03      	ldr	r2, [sp, #12]
   3bec8:	9b01      	ldr	r3, [sp, #4]
   3beca:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   3bece:	1a9b      	subs	r3, r3, r2
   3bed0:	9301      	str	r3, [sp, #4]
   3bed2:	f7fa fd21 	bl	36918 <rpc_transport_ipc_shutdown_done>
   3bed6:	9b01      	ldr	r3, [sp, #4]
   3bed8:	2800      	cmp	r0, #0
   3beda:	d0ee      	beq.n	3beba <bsd_platform_shutdown+0x5e>
   3bedc:	2b00      	cmp	r3, #0
   3bede:	d045      	beq.n	3bf6c <bsd_platform_shutdown+0x110>
   3bee0:	f64b 3380 	movw	r3, #48000	; 0xbb80
   3bee4:	4d23      	ldr	r5, [pc, #140]	; (3bf74 <bsd_platform_shutdown+0x118>)
   3bee6:	9301      	str	r3, [sp, #4]
   3bee8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   3beec:	2b01      	cmp	r3, #1
   3beee:	d112      	bne.n	3bf16 <bsd_platform_shutdown+0xba>
   3bef0:	2664      	movs	r6, #100	; 0x64
   3bef2:	e003      	b.n	3befc <bsd_platform_shutdown+0xa0>
   3bef4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
   3bef8:	2b01      	cmp	r3, #1
   3befa:	d10c      	bne.n	3bf16 <bsd_platform_shutdown+0xba>
   3befc:	a903      	add	r1, sp, #12
   3befe:	2000      	movs	r0, #0
   3bf00:	9603      	str	r6, [sp, #12]
   3bf02:	f7ef fa61 	bl	2b3c8 <bsd_os_timedwait>
   3bf06:	9a03      	ldr	r2, [sp, #12]
   3bf08:	9b01      	ldr	r3, [sp, #4]
   3bf0a:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
   3bf0e:	1a9b      	subs	r3, r3, r2
   3bf10:	2b00      	cmp	r3, #0
   3bf12:	9301      	str	r3, [sp, #4]
   3bf14:	dcee      	bgt.n	3bef4 <bsd_platform_shutdown+0x98>
   3bf16:	230a      	movs	r3, #10
   3bf18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3bf1c:	2101      	movs	r1, #1
   3bf1e:	4a15      	ldr	r2, [pc, #84]	; (3bf74 <bsd_platform_shutdown+0x118>)
   3bf20:	9001      	str	r0, [sp, #4]
   3bf22:	f8c2 1614 	str.w	r1, [r2, #1556]	; 0x614
   3bf26:	9302      	str	r3, [sp, #8]
   3bf28:	9b02      	ldr	r3, [sp, #8]
   3bf2a:	b12b      	cbz	r3, 3bf38 <bsd_platform_shutdown+0xdc>
   3bf2c:	9b02      	ldr	r3, [sp, #8]
   3bf2e:	3b01      	subs	r3, #1
   3bf30:	9302      	str	r3, [sp, #8]
   3bf32:	9b02      	ldr	r3, [sp, #8]
   3bf34:	2b00      	cmp	r3, #0
   3bf36:	d1f9      	bne.n	3bf2c <bsd_platform_shutdown+0xd0>
   3bf38:	2200      	movs	r2, #0
   3bf3a:	4b0e      	ldr	r3, [pc, #56]	; (3bf74 <bsd_platform_shutdown+0x118>)
   3bf3c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   3bf40:	a901      	add	r1, sp, #4
   3bf42:	2000      	movs	r0, #0
   3bf44:	f7ef fa40 	bl	2b3c8 <bsd_os_timedwait>
   3bf48:	9b01      	ldr	r3, [sp, #4]
   3bf4a:	2b00      	cmp	r3, #0
   3bf4c:	dcf8      	bgt.n	3bf40 <bsd_platform_shutdown+0xe4>
   3bf4e:	2200      	movs	r2, #0
   3bf50:	2101      	movs	r1, #1
   3bf52:	4620      	mov	r0, r4
   3bf54:	4b07      	ldr	r3, [pc, #28]	; (3bf74 <bsd_platform_shutdown+0x118>)
   3bf56:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
   3bf5a:	9203      	str	r2, [sp, #12]
   3bf5c:	f8c3 1610 	str.w	r1, [r3, #1552]	; 0x610
   3bf60:	f8d3 3610 	ldr.w	r3, [r3, #1552]	; 0x610
   3bf64:	9303      	str	r3, [sp, #12]
   3bf66:	9b03      	ldr	r3, [sp, #12]
   3bf68:	b004      	add	sp, #16
   3bf6a:	bd70      	pop	{r4, r5, r6, pc}
   3bf6c:	f7fa f9a8 	bl	362c0 <rpc_transport_ipc_shutdown>
   3bf70:	e7b6      	b.n	3bee0 <bsd_platform_shutdown+0x84>
   3bf72:	bf00      	nop
   3bf74:	40005000 	.word	0x40005000

0003bf78 <bsd_platform_af_method_table_get>:
   3bf78:	2805      	cmp	r0, #5
   3bf7a:	d02a      	beq.n	3bfd2 <bsd_platform_af_method_table_get+0x5a>
   3bf7c:	b508      	push	{r3, lr}
   3bf7e:	d914      	bls.n	3bfaa <bsd_platform_af_method_table_get+0x32>
   3bf80:	280a      	cmp	r0, #10
   3bf82:	d016      	beq.n	3bfb2 <bsd_platform_af_method_table_get+0x3a>
   3bf84:	2866      	cmp	r0, #102	; 0x66
   3bf86:	d11f      	bne.n	3bfc8 <bsd_platform_af_method_table_get+0x50>
   3bf88:	f240 2302 	movw	r3, #514	; 0x202
   3bf8c:	429a      	cmp	r2, r3
   3bf8e:	d035      	beq.n	3bffc <bsd_platform_af_method_table_get+0x84>
   3bf90:	f240 2305 	movw	r3, #517	; 0x205
   3bf94:	429a      	cmp	r2, r3
   3bf96:	d035      	beq.n	3c004 <bsd_platform_af_method_table_get+0x8c>
   3bf98:	f240 2301 	movw	r3, #513	; 0x201
   3bf9c:	429a      	cmp	r2, r3
   3bf9e:	d02f      	beq.n	3c000 <bsd_platform_af_method_table_get+0x88>
   3bfa0:	202b      	movs	r0, #43	; 0x2b
   3bfa2:	f7ef fad1 	bl	2b548 <bsd_os_errno_set>
   3bfa6:	2000      	movs	r0, #0
   3bfa8:	bd08      	pop	{r3, pc}
   3bfaa:	2801      	cmp	r0, #1
   3bfac:	d016      	beq.n	3bfdc <bsd_platform_af_method_table_get+0x64>
   3bfae:	2802      	cmp	r0, #2
   3bfb0:	d10a      	bne.n	3bfc8 <bsd_platform_af_method_table_get+0x50>
   3bfb2:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   3bfb6:	d21a      	bcs.n	3bfee <bsd_platform_af_method_table_get+0x76>
   3bfb8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3bfbc:	d21a      	bcs.n	3bff4 <bsd_platform_af_method_table_get+0x7c>
   3bfbe:	3a01      	subs	r2, #1
   3bfc0:	2a01      	cmp	r2, #1
   3bfc2:	d8ed      	bhi.n	3bfa0 <bsd_platform_af_method_table_get+0x28>
   3bfc4:	4810      	ldr	r0, [pc, #64]	; (3c008 <bsd_platform_af_method_table_get+0x90>)
   3bfc6:	bd08      	pop	{r3, pc}
   3bfc8:	2016      	movs	r0, #22
   3bfca:	f7ef fabd 	bl	2b548 <bsd_os_errno_set>
   3bfce:	2000      	movs	r0, #0
   3bfd0:	bd08      	pop	{r3, pc}
   3bfd2:	2903      	cmp	r1, #3
   3bfd4:	480d      	ldr	r0, [pc, #52]	; (3c00c <bsd_platform_af_method_table_get+0x94>)
   3bfd6:	bf18      	it	ne
   3bfd8:	2000      	movne	r0, #0
   3bfda:	4770      	bx	lr
   3bfdc:	f240 2303 	movw	r3, #515	; 0x203
   3bfe0:	429a      	cmp	r2, r3
   3bfe2:	d009      	beq.n	3bff8 <bsd_platform_af_method_table_get+0x80>
   3bfe4:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   3bfe8:	d1da      	bne.n	3bfa0 <bsd_platform_af_method_table_get+0x28>
   3bfea:	4809      	ldr	r0, [pc, #36]	; (3c010 <bsd_platform_af_method_table_get+0x98>)
   3bfec:	bd08      	pop	{r3, pc}
   3bfee:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3bff2:	d1d5      	bne.n	3bfa0 <bsd_platform_af_method_table_get+0x28>
   3bff4:	4807      	ldr	r0, [pc, #28]	; (3c014 <bsd_platform_af_method_table_get+0x9c>)
   3bff6:	bd08      	pop	{r3, pc}
   3bff8:	4807      	ldr	r0, [pc, #28]	; (3c018 <bsd_platform_af_method_table_get+0xa0>)
   3bffa:	bd08      	pop	{r3, pc}
   3bffc:	4807      	ldr	r0, [pc, #28]	; (3c01c <bsd_platform_af_method_table_get+0xa4>)
   3bffe:	bd08      	pop	{r3, pc}
   3c000:	4807      	ldr	r0, [pc, #28]	; (3c020 <bsd_platform_af_method_table_get+0xa8>)
   3c002:	bd08      	pop	{r3, pc}
   3c004:	4807      	ldr	r0, [pc, #28]	; (3c024 <bsd_platform_af_method_table_get+0xac>)
   3c006:	bd08      	pop	{r3, pc}
   3c008:	0004a5f4 	.word	0x0004a5f4
   3c00c:	0004a6e4 	.word	0x0004a6e4
   3c010:	0004a694 	.word	0x0004a694
   3c014:	0004a61c 	.word	0x0004a61c
   3c018:	0004a644 	.word	0x0004a644
   3c01c:	0004a66c 	.word	0x0004a66c
   3c020:	0004a5cc 	.word	0x0004a5cc
   3c024:	0004a6bc 	.word	0x0004a6bc

0003c028 <bsd_platform_fd_method_table_get>:
   3c028:	b538      	push	{r3, r4, r5, lr}
   3c02a:	4605      	mov	r5, r0
   3c02c:	f001 feb4 	bl	3dd98 <interface_socket_from_handle_get>
   3c030:	4604      	mov	r4, r0
   3c032:	b960      	cbnz	r0, 3c04e <bsd_platform_fd_method_table_get+0x26>
   3c034:	4b2c      	ldr	r3, [pc, #176]	; (3c0e8 <bsd_platform_fd_method_table_get+0xc0>)
   3c036:	429d      	cmp	r5, r3
   3c038:	d02f      	beq.n	3c09a <bsd_platform_fd_method_table_get+0x72>
   3c03a:	0c2b      	lsrs	r3, r5, #16
   3c03c:	4a2b      	ldr	r2, [pc, #172]	; (3c0ec <bsd_platform_fd_method_table_get+0xc4>)
   3c03e:	041b      	lsls	r3, r3, #16
   3c040:	4293      	cmp	r3, r2
   3c042:	d03d      	beq.n	3c0c0 <bsd_platform_fd_method_table_get+0x98>
   3c044:	4b2a      	ldr	r3, [pc, #168]	; (3c0f0 <bsd_platform_fd_method_table_get+0xc8>)
   3c046:	429d      	cmp	r5, r3
   3c048:	d149      	bne.n	3c0de <bsd_platform_fd_method_table_get+0xb6>
   3c04a:	482a      	ldr	r0, [pc, #168]	; (3c0f4 <bsd_platform_fd_method_table_get+0xcc>)
   3c04c:	bd38      	pop	{r3, r4, r5, pc}
   3c04e:	68c3      	ldr	r3, [r0, #12]
   3c050:	6942      	ldr	r2, [r0, #20]
   3c052:	2b05      	cmp	r3, #5
   3c054:	d036      	beq.n	3c0c4 <bsd_platform_fd_method_table_get+0x9c>
   3c056:	d911      	bls.n	3c07c <bsd_platform_fd_method_table_get+0x54>
   3c058:	2b0a      	cmp	r3, #10
   3c05a:	d013      	beq.n	3c084 <bsd_platform_fd_method_table_get+0x5c>
   3c05c:	2b66      	cmp	r3, #102	; 0x66
   3c05e:	d11e      	bne.n	3c09e <bsd_platform_fd_method_table_get+0x76>
   3c060:	f240 2302 	movw	r3, #514	; 0x202
   3c064:	429a      	cmp	r2, r3
   3c066:	d02b      	beq.n	3c0c0 <bsd_platform_fd_method_table_get+0x98>
   3c068:	f240 2305 	movw	r3, #517	; 0x205
   3c06c:	429a      	cmp	r2, r3
   3c06e:	d02f      	beq.n	3c0d0 <bsd_platform_fd_method_table_get+0xa8>
   3c070:	f240 2301 	movw	r3, #513	; 0x201
   3c074:	429a      	cmp	r2, r3
   3c076:	d11e      	bne.n	3c0b6 <bsd_platform_fd_method_table_get+0x8e>
   3c078:	481f      	ldr	r0, [pc, #124]	; (3c0f8 <bsd_platform_fd_method_table_get+0xd0>)
   3c07a:	bd38      	pop	{r3, r4, r5, pc}
   3c07c:	2b01      	cmp	r3, #1
   3c07e:	d013      	beq.n	3c0a8 <bsd_platform_fd_method_table_get+0x80>
   3c080:	2b02      	cmp	r3, #2
   3c082:	d10c      	bne.n	3c09e <bsd_platform_fd_method_table_get+0x76>
   3c084:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   3c088:	d224      	bcs.n	3c0d4 <bsd_platform_fd_method_table_get+0xac>
   3c08a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   3c08e:	d224      	bcs.n	3c0da <bsd_platform_fd_method_table_get+0xb2>
   3c090:	3a01      	subs	r2, #1
   3c092:	2a01      	cmp	r2, #1
   3c094:	d80f      	bhi.n	3c0b6 <bsd_platform_fd_method_table_get+0x8e>
   3c096:	4819      	ldr	r0, [pc, #100]	; (3c0fc <bsd_platform_fd_method_table_get+0xd4>)
   3c098:	bd38      	pop	{r3, r4, r5, pc}
   3c09a:	4819      	ldr	r0, [pc, #100]	; (3c100 <bsd_platform_fd_method_table_get+0xd8>)
   3c09c:	bd38      	pop	{r3, r4, r5, pc}
   3c09e:	2016      	movs	r0, #22
   3c0a0:	f7ef fa52 	bl	2b548 <bsd_os_errno_set>
   3c0a4:	2000      	movs	r0, #0
   3c0a6:	bd38      	pop	{r3, r4, r5, pc}
   3c0a8:	f240 2303 	movw	r3, #515	; 0x203
   3c0ac:	429a      	cmp	r2, r3
   3c0ae:	d0f4      	beq.n	3c09a <bsd_platform_fd_method_table_get+0x72>
   3c0b0:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   3c0b4:	d0c9      	beq.n	3c04a <bsd_platform_fd_method_table_get+0x22>
   3c0b6:	202b      	movs	r0, #43	; 0x2b
   3c0b8:	f7ef fa46 	bl	2b548 <bsd_os_errno_set>
   3c0bc:	2000      	movs	r0, #0
   3c0be:	bd38      	pop	{r3, r4, r5, pc}
   3c0c0:	4810      	ldr	r0, [pc, #64]	; (3c104 <bsd_platform_fd_method_table_get+0xdc>)
   3c0c2:	bd38      	pop	{r3, r4, r5, pc}
   3c0c4:	6903      	ldr	r3, [r0, #16]
   3c0c6:	4810      	ldr	r0, [pc, #64]	; (3c108 <bsd_platform_fd_method_table_get+0xe0>)
   3c0c8:	2b03      	cmp	r3, #3
   3c0ca:	bf18      	it	ne
   3c0cc:	2000      	movne	r0, #0
   3c0ce:	bd38      	pop	{r3, r4, r5, pc}
   3c0d0:	480e      	ldr	r0, [pc, #56]	; (3c10c <bsd_platform_fd_method_table_get+0xe4>)
   3c0d2:	bd38      	pop	{r3, r4, r5, pc}
   3c0d4:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3c0d8:	d1ed      	bne.n	3c0b6 <bsd_platform_fd_method_table_get+0x8e>
   3c0da:	480d      	ldr	r0, [pc, #52]	; (3c110 <bsd_platform_fd_method_table_get+0xe8>)
   3c0dc:	bd38      	pop	{r3, r4, r5, pc}
   3c0de:	2009      	movs	r0, #9
   3c0e0:	f7ef fa32 	bl	2b548 <bsd_os_errno_set>
   3c0e4:	4620      	mov	r0, r4
   3c0e6:	bd38      	pop	{r3, r4, r5, pc}
   3c0e8:	49765432 	.word	0x49765432
   3c0ec:	789a0000 	.word	0x789a0000
   3c0f0:	49765443 	.word	0x49765443
   3c0f4:	0004a694 	.word	0x0004a694
   3c0f8:	0004a5cc 	.word	0x0004a5cc
   3c0fc:	0004a5f4 	.word	0x0004a5f4
   3c100:	0004a644 	.word	0x0004a644
   3c104:	0004a66c 	.word	0x0004a66c
   3c108:	0004a6e4 	.word	0x0004a6e4
   3c10c:	0004a6bc 	.word	0x0004a6bc
   3c110:	0004a61c 	.word	0x0004a61c

0003c114 <bsd_platform_getaddrinfo>:
   3c114:	f7fc bd82 	b.w	38c1c <ip_interface_getaddrinfo>

0003c118 <bsd_platform_freeaddrinfo>:
   3c118:	f7fc be7e 	b.w	38e18 <ip_interface_freeaddrinfo>

0003c11c <bsd_platform_poll>:
   3c11c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3c120:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   3c124:	b083      	sub	sp, #12
   3c126:	9200      	str	r2, [sp, #0]
   3c128:	2800      	cmp	r0, #0
   3c12a:	d048      	beq.n	3c1be <bsd_platform_poll+0xa2>
   3c12c:	1e4b      	subs	r3, r1, #1
   3c12e:	2b08      	cmp	r3, #8
   3c130:	d845      	bhi.n	3c1be <bsd_platform_poll+0xa2>
   3c132:	4680      	mov	r8, r0
   3c134:	4605      	mov	r5, r0
   3c136:	2400      	movs	r4, #0
   3c138:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
   3c13c:	88ab      	ldrh	r3, [r5, #4]
   3c13e:	6828      	ldr	r0, [r5, #0]
   3c140:	f003 0303 	and.w	r3, r3, #3
   3c144:	a901      	add	r1, sp, #4
   3c146:	f043 061c 	orr.w	r6, r3, #28
   3c14a:	f001 fe33 	bl	3ddb4 <interface_socket_event_get>
   3c14e:	9b01      	ldr	r3, [sp, #4]
   3c150:	3508      	adds	r5, #8
   3c152:	4033      	ands	r3, r6
   3c154:	f825 3c02 	strh.w	r3, [r5, #-2]
   3c158:	b103      	cbz	r3, 3c15c <bsd_platform_poll+0x40>
   3c15a:	3401      	adds	r4, #1
   3c15c:	42af      	cmp	r7, r5
   3c15e:	d1ed      	bne.n	3c13c <bsd_platform_poll+0x20>
   3c160:	bb9c      	cbnz	r4, 3c1ca <bsd_platform_poll+0xae>
   3c162:	4669      	mov	r1, sp
   3c164:	4640      	mov	r0, r8
   3c166:	f7ef f92f 	bl	2b3c8 <bsd_os_timedwait>
   3c16a:	4607      	mov	r7, r0
   3c16c:	b108      	cbz	r0, 3c172 <bsd_platform_poll+0x56>
   3c16e:	283c      	cmp	r0, #60	; 0x3c
   3c170:	d11d      	bne.n	3c1ae <bsd_platform_poll+0x92>
   3c172:	46c1      	mov	r9, r8
   3c174:	2600      	movs	r6, #0
   3c176:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3c17a:	f8d9 0000 	ldr.w	r0, [r9]
   3c17e:	f003 0303 	and.w	r3, r3, #3
   3c182:	a901      	add	r1, sp, #4
   3c184:	f043 041c 	orr.w	r4, r3, #28
   3c188:	f001 fe14 	bl	3ddb4 <interface_socket_event_get>
   3c18c:	9b01      	ldr	r3, [sp, #4]
   3c18e:	f109 0908 	add.w	r9, r9, #8
   3c192:	4023      	ands	r3, r4
   3c194:	f829 3c02 	strh.w	r3, [r9, #-2]
   3c198:	b103      	cbz	r3, 3c19c <bsd_platform_poll+0x80>
   3c19a:	3601      	adds	r6, #1
   3c19c:	454d      	cmp	r5, r9
   3c19e:	d1ea      	bne.n	3c176 <bsd_platform_poll+0x5a>
   3c1a0:	b90e      	cbnz	r6, 3c1a6 <bsd_platform_poll+0x8a>
   3c1a2:	2f00      	cmp	r7, #0
   3c1a4:	d0dd      	beq.n	3c162 <bsd_platform_poll+0x46>
   3c1a6:	4630      	mov	r0, r6
   3c1a8:	b003      	add	sp, #12
   3c1aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c1ae:	2023      	movs	r0, #35	; 0x23
   3c1b0:	f7ef f9ca 	bl	2b548 <bsd_os_errno_set>
   3c1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c1b8:	b003      	add	sp, #12
   3c1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3c1be:	2016      	movs	r0, #22
   3c1c0:	f7ef f9c2 	bl	2b548 <bsd_os_errno_set>
   3c1c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c1c8:	e7ee      	b.n	3c1a8 <bsd_platform_poll+0x8c>
   3c1ca:	4620      	mov	r0, r4
   3c1cc:	e7ec      	b.n	3c1a8 <bsd_platform_poll+0x8c>
   3c1ce:	bf00      	nop

0003c1d0 <bsd_platform_fcntl>:
   3c1d0:	b508      	push	{r3, lr}
   3c1d2:	4b06      	ldr	r3, [pc, #24]	; (3c1ec <bsd_platform_fcntl+0x1c>)
   3c1d4:	4298      	cmp	r0, r3
   3c1d6:	d003      	beq.n	3c1e0 <bsd_platform_fcntl+0x10>
   3c1d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3c1dc:	f001 bef2 	b.w	3dfc4 <interface_socket_fcntl>
   3c1e0:	202d      	movs	r0, #45	; 0x2d
   3c1e2:	f7ef f9b1 	bl	2b548 <bsd_os_errno_set>
   3c1e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c1ea:	bd08      	pop	{r3, pc}
   3c1ec:	49765432 	.word	0x49765432

0003c1f0 <linked_list_init>:
   3c1f0:	b128      	cbz	r0, 3c1fe <linked_list_init+0xe>
   3c1f2:	2300      	movs	r3, #0
   3c1f4:	6003      	str	r3, [r0, #0]
   3c1f6:	e9c0 3301 	strd	r3, r3, [r0, #4]
   3c1fa:	4618      	mov	r0, r3
   3c1fc:	4770      	bx	lr
   3c1fe:	2007      	movs	r0, #7
   3c200:	4770      	bx	lr
   3c202:	bf00      	nop

0003c204 <linked_list_push>:
   3c204:	6802      	ldr	r2, [r0, #0]
   3c206:	4603      	mov	r3, r0
   3c208:	3201      	adds	r2, #1
   3c20a:	d00e      	beq.n	3c22a <linked_list_push+0x26>
   3c20c:	2200      	movs	r2, #0
   3c20e:	600a      	str	r2, [r1, #0]
   3c210:	6802      	ldr	r2, [r0, #0]
   3c212:	b13a      	cbz	r2, 3c224 <linked_list_push+0x20>
   3c214:	6882      	ldr	r2, [r0, #8]
   3c216:	6011      	str	r1, [r2, #0]
   3c218:	6081      	str	r1, [r0, #8]
   3c21a:	681a      	ldr	r2, [r3, #0]
   3c21c:	2000      	movs	r0, #0
   3c21e:	3201      	adds	r2, #1
   3c220:	601a      	str	r2, [r3, #0]
   3c222:	4770      	bx	lr
   3c224:	e9c0 1101 	strd	r1, r1, [r0, #4]
   3c228:	e7f7      	b.n	3c21a <linked_list_push+0x16>
   3c22a:	2004      	movs	r0, #4
   3c22c:	4770      	bx	lr
   3c22e:	bf00      	nop

0003c230 <linked_list_pop>:
   3c230:	4603      	mov	r3, r0
   3c232:	6800      	ldr	r0, [r0, #0]
   3c234:	b128      	cbz	r0, 3c242 <linked_list_pop+0x12>
   3c236:	6858      	ldr	r0, [r3, #4]
   3c238:	681a      	ldr	r2, [r3, #0]
   3c23a:	6801      	ldr	r1, [r0, #0]
   3c23c:	3a01      	subs	r2, #1
   3c23e:	6059      	str	r1, [r3, #4]
   3c240:	601a      	str	r2, [r3, #0]
   3c242:	4770      	bx	lr

0003c244 <linked_list_peek>:
   3c244:	6803      	ldr	r3, [r0, #0]
   3c246:	b10b      	cbz	r3, 3c24c <linked_list_peek+0x8>
   3c248:	6840      	ldr	r0, [r0, #4]
   3c24a:	4770      	bx	lr
   3c24c:	4618      	mov	r0, r3
   3c24e:	4770      	bx	lr

0003c250 <linked_list_size_get>:
   3c250:	6800      	ldr	r0, [r0, #0]
   3c252:	4770      	bx	lr

0003c254 <linked_list_get_next>:
   3c254:	6800      	ldr	r0, [r0, #0]
   3c256:	4770      	bx	lr

0003c258 <nrf_socket>:
   3c258:	b570      	push	{r4, r5, r6, lr}
   3c25a:	4604      	mov	r4, r0
   3c25c:	460d      	mov	r5, r1
   3c25e:	4616      	mov	r6, r2
   3c260:	f7ff fe8a 	bl	3bf78 <bsd_platform_af_method_table_get>
   3c264:	b130      	cbz	r0, 3c274 <nrf_socket+0x1c>
   3c266:	6803      	ldr	r3, [r0, #0]
   3c268:	4632      	mov	r2, r6
   3c26a:	4629      	mov	r1, r5
   3c26c:	4620      	mov	r0, r4
   3c26e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3c272:	4718      	bx	r3
   3c274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c278:	bd70      	pop	{r4, r5, r6, pc}
   3c27a:	bf00      	nop

0003c27c <nrf_close>:
   3c27c:	b510      	push	{r4, lr}
   3c27e:	4604      	mov	r4, r0
   3c280:	f7ff fed2 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c284:	b120      	cbz	r0, 3c290 <nrf_close+0x14>
   3c286:	6843      	ldr	r3, [r0, #4]
   3c288:	4620      	mov	r0, r4
   3c28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c28e:	4718      	bx	r3
   3c290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c294:	bd10      	pop	{r4, pc}
   3c296:	bf00      	nop

0003c298 <nrf_sendto>:
   3c298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c29c:	460d      	mov	r5, r1
   3c29e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3c2a2:	4616      	mov	r6, r2
   3c2a4:	461f      	mov	r7, r3
   3c2a6:	4604      	mov	r4, r0
   3c2a8:	f7ff febe 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c2ac:	b158      	cbz	r0, 3c2c6 <nrf_sendto+0x2e>
   3c2ae:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3c2b2:	f8d0 e008 	ldr.w	lr, [r0, #8]
   3c2b6:	463b      	mov	r3, r7
   3c2b8:	4632      	mov	r2, r6
   3c2ba:	4629      	mov	r1, r5
   3c2bc:	4620      	mov	r0, r4
   3c2be:	46f4      	mov	ip, lr
   3c2c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c2c4:	4760      	bx	ip
   3c2c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c2ce:	bf00      	nop

0003c2d0 <nrf_write>:
   3c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c2d2:	b083      	sub	sp, #12
   3c2d4:	460e      	mov	r6, r1
   3c2d6:	4617      	mov	r7, r2
   3c2d8:	4605      	mov	r5, r0
   3c2da:	f7ff fea5 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c2de:	b150      	cbz	r0, 3c2f6 <nrf_write+0x26>
   3c2e0:	2300      	movs	r3, #0
   3c2e2:	4604      	mov	r4, r0
   3c2e4:	e9cd 3300 	strd	r3, r3, [sp]
   3c2e8:	463a      	mov	r2, r7
   3c2ea:	4631      	mov	r1, r6
   3c2ec:	4628      	mov	r0, r5
   3c2ee:	68a4      	ldr	r4, [r4, #8]
   3c2f0:	47a0      	blx	r4
   3c2f2:	b003      	add	sp, #12
   3c2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3c2f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c2fa:	e7fa      	b.n	3c2f2 <nrf_write+0x22>

0003c2fc <nrf_recvfrom>:
   3c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c300:	460d      	mov	r5, r1
   3c302:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   3c306:	4616      	mov	r6, r2
   3c308:	461f      	mov	r7, r3
   3c30a:	4604      	mov	r4, r0
   3c30c:	f7ff fe8c 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c310:	b158      	cbz	r0, 3c32a <nrf_recvfrom+0x2e>
   3c312:	e9cd 8908 	strd	r8, r9, [sp, #32]
   3c316:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   3c31a:	463b      	mov	r3, r7
   3c31c:	4632      	mov	r2, r6
   3c31e:	4629      	mov	r1, r5
   3c320:	4620      	mov	r0, r4
   3c322:	46f4      	mov	ip, lr
   3c324:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c328:	4760      	bx	ip
   3c32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3c332:	bf00      	nop

0003c334 <nrf_recv>:
   3c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c338:	b082      	sub	sp, #8
   3c33a:	460e      	mov	r6, r1
   3c33c:	4617      	mov	r7, r2
   3c33e:	4698      	mov	r8, r3
   3c340:	4605      	mov	r5, r0
   3c342:	f7ff fe71 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c346:	b160      	cbz	r0, 3c362 <nrf_recv+0x2e>
   3c348:	4604      	mov	r4, r0
   3c34a:	2000      	movs	r0, #0
   3c34c:	e9cd 0000 	strd	r0, r0, [sp]
   3c350:	4643      	mov	r3, r8
   3c352:	463a      	mov	r2, r7
   3c354:	4631      	mov	r1, r6
   3c356:	4628      	mov	r0, r5
   3c358:	68e4      	ldr	r4, [r4, #12]
   3c35a:	47a0      	blx	r4
   3c35c:	b002      	add	sp, #8
   3c35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c366:	e7f9      	b.n	3c35c <nrf_recv+0x28>

0003c368 <nrf_read>:
   3c368:	b5f0      	push	{r4, r5, r6, r7, lr}
   3c36a:	b083      	sub	sp, #12
   3c36c:	460e      	mov	r6, r1
   3c36e:	4617      	mov	r7, r2
   3c370:	4605      	mov	r5, r0
   3c372:	f7ff fe59 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c376:	b150      	cbz	r0, 3c38e <nrf_read+0x26>
   3c378:	2300      	movs	r3, #0
   3c37a:	4604      	mov	r4, r0
   3c37c:	e9cd 3300 	strd	r3, r3, [sp]
   3c380:	463a      	mov	r2, r7
   3c382:	4631      	mov	r1, r6
   3c384:	4628      	mov	r0, r5
   3c386:	68e4      	ldr	r4, [r4, #12]
   3c388:	47a0      	blx	r4
   3c38a:	b003      	add	sp, #12
   3c38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3c38e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c392:	e7fa      	b.n	3c38a <nrf_read+0x22>

0003c394 <nrf_connect>:
   3c394:	b570      	push	{r4, r5, r6, lr}
   3c396:	460d      	mov	r5, r1
   3c398:	4616      	mov	r6, r2
   3c39a:	4604      	mov	r4, r0
   3c39c:	f7ff fe44 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c3a0:	b130      	cbz	r0, 3c3b0 <nrf_connect+0x1c>
   3c3a2:	6943      	ldr	r3, [r0, #20]
   3c3a4:	4632      	mov	r2, r6
   3c3a6:	4629      	mov	r1, r5
   3c3a8:	4620      	mov	r0, r4
   3c3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3c3ae:	4718      	bx	r3
   3c3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c3b4:	bd70      	pop	{r4, r5, r6, pc}
   3c3b6:	bf00      	nop

0003c3b8 <nrf_listen>:
   3c3b8:	b570      	push	{r4, r5, r6, lr}
   3c3ba:	460d      	mov	r5, r1
   3c3bc:	4604      	mov	r4, r0
   3c3be:	f7ff fe33 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c3c2:	b128      	cbz	r0, 3c3d0 <nrf_listen+0x18>
   3c3c4:	6983      	ldr	r3, [r0, #24]
   3c3c6:	4629      	mov	r1, r5
   3c3c8:	4620      	mov	r0, r4
   3c3ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3c3ce:	4718      	bx	r3
   3c3d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c3d4:	bd70      	pop	{r4, r5, r6, pc}
   3c3d6:	bf00      	nop

0003c3d8 <nrf_accept>:
   3c3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c3dc:	460d      	mov	r5, r1
   3c3de:	4616      	mov	r6, r2
   3c3e0:	4604      	mov	r4, r0
   3c3e2:	f7ff fe21 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c3e6:	b140      	cbz	r0, 3c3fa <nrf_accept+0x22>
   3c3e8:	69c7      	ldr	r7, [r0, #28]
   3c3ea:	4632      	mov	r2, r6
   3c3ec:	4629      	mov	r1, r5
   3c3ee:	4620      	mov	r0, r4
   3c3f0:	46bc      	mov	ip, r7
   3c3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3c3f6:	2300      	movs	r3, #0
   3c3f8:	4760      	bx	ip
   3c3fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c402:	bf00      	nop

0003c404 <nrf_bind>:
   3c404:	b570      	push	{r4, r5, r6, lr}
   3c406:	460d      	mov	r5, r1
   3c408:	4616      	mov	r6, r2
   3c40a:	4604      	mov	r4, r0
   3c40c:	f7ff fe0c 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c410:	b130      	cbz	r0, 3c420 <nrf_bind+0x1c>
   3c412:	6903      	ldr	r3, [r0, #16]
   3c414:	4632      	mov	r2, r6
   3c416:	4629      	mov	r1, r5
   3c418:	4620      	mov	r0, r4
   3c41a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3c41e:	4718      	bx	r3
   3c420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c424:	bd70      	pop	{r4, r5, r6, pc}
   3c426:	bf00      	nop

0003c428 <nrf_setsockopt>:
   3c428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c42c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3c430:	460d      	mov	r5, r1
   3c432:	4616      	mov	r6, r2
   3c434:	461f      	mov	r7, r3
   3c436:	4604      	mov	r4, r0
   3c438:	f7ff fdf6 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c43c:	b158      	cbz	r0, 3c456 <nrf_setsockopt+0x2e>
   3c43e:	f8cd 8018 	str.w	r8, [sp, #24]
   3c442:	f8d0 e020 	ldr.w	lr, [r0, #32]
   3c446:	463b      	mov	r3, r7
   3c448:	4632      	mov	r2, r6
   3c44a:	4629      	mov	r1, r5
   3c44c:	4620      	mov	r0, r4
   3c44e:	46f4      	mov	ip, lr
   3c450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3c454:	4760      	bx	ip
   3c456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c45e:	bf00      	nop

0003c460 <nrf_getsockopt>:
   3c460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c464:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3c468:	460d      	mov	r5, r1
   3c46a:	4616      	mov	r6, r2
   3c46c:	461f      	mov	r7, r3
   3c46e:	4604      	mov	r4, r0
   3c470:	f7ff fdda 	bl	3c028 <bsd_platform_fd_method_table_get>
   3c474:	b158      	cbz	r0, 3c48e <nrf_getsockopt+0x2e>
   3c476:	f8cd 8018 	str.w	r8, [sp, #24]
   3c47a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
   3c47e:	463b      	mov	r3, r7
   3c480:	4632      	mov	r2, r6
   3c482:	4629      	mov	r1, r5
   3c484:	4620      	mov	r0, r4
   3c486:	46f4      	mov	ip, lr
   3c488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3c48c:	4760      	bx	ip
   3c48e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c496:	bf00      	nop

0003c498 <nrf_getaddrinfo>:
   3c498:	f7ff be3c 	b.w	3c114 <bsd_platform_getaddrinfo>

0003c49c <nrf_freeaddrinfo>:
   3c49c:	f7ff be3c 	b.w	3c118 <bsd_platform_freeaddrinfo>

0003c4a0 <nrf_poll>:
   3c4a0:	f7ff be3c 	b.w	3c11c <bsd_platform_poll>

0003c4a4 <nrf_fcntl>:
   3c4a4:	f7ff be94 	b.w	3c1d0 <bsd_platform_fcntl>

0003c4a8 <rpc_gnss_serialize_utc>:
   3c4a8:	4603      	mov	r3, r0
   3c4aa:	b1d8      	cbz	r0, 3c4e4 <rpc_gnss_serialize_utc+0x3c>
   3c4ac:	b1d1      	cbz	r1, 3c4e4 <rpc_gnss_serialize_utc+0x3c>
   3c4ae:	2000      	movs	r0, #0
   3c4b0:	2201      	movs	r2, #1
   3c4b2:	7048      	strb	r0, [r1, #1]
   3c4b4:	700a      	strb	r2, [r1, #0]
   3c4b6:	685a      	ldr	r2, [r3, #4]
   3c4b8:	2010      	movs	r0, #16
   3c4ba:	f8c1 2006 	str.w	r2, [r1, #6]
   3c4be:	681a      	ldr	r2, [r3, #0]
   3c4c0:	f8c1 2002 	str.w	r2, [r1, #2]
   3c4c4:	f993 200a 	ldrsb.w	r2, [r3, #10]
   3c4c8:	730a      	strb	r2, [r1, #12]
   3c4ca:	f993 200d 	ldrsb.w	r2, [r3, #13]
   3c4ce:	73ca      	strb	r2, [r1, #15]
   3c4d0:	f993 200c 	ldrsb.w	r2, [r3, #12]
   3c4d4:	738a      	strb	r2, [r1, #14]
   3c4d6:	7a1a      	ldrb	r2, [r3, #8]
   3c4d8:	728a      	strb	r2, [r1, #10]
   3c4da:	7ada      	ldrb	r2, [r3, #11]
   3c4dc:	734a      	strb	r2, [r1, #13]
   3c4de:	7a5b      	ldrb	r3, [r3, #9]
   3c4e0:	72cb      	strb	r3, [r1, #11]
   3c4e2:	4770      	bx	lr
   3c4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c4e8:	4770      	bx	lr
   3c4ea:	bf00      	nop

0003c4ec <rpc_gnss_serialize_ephe>:
   3c4ec:	4603      	mov	r3, r0
   3c4ee:	2800      	cmp	r0, #0
   3c4f0:	d04b      	beq.n	3c58a <rpc_gnss_serialize_ephe+0x9e>
   3c4f2:	2900      	cmp	r1, #0
   3c4f4:	d049      	beq.n	3c58a <rpc_gnss_serialize_ephe+0x9e>
   3c4f6:	2000      	movs	r0, #0
   3c4f8:	2202      	movs	r2, #2
   3c4fa:	7048      	strb	r0, [r1, #1]
   3c4fc:	700a      	strb	r2, [r1, #0]
   3c4fe:	68da      	ldr	r2, [r3, #12]
   3c500:	2040      	movs	r0, #64	; 0x40
   3c502:	f8c1 200b 	str.w	r2, [r1, #11]
   3c506:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3c50a:	f8a1 2009 	strh.w	r2, [r1, #9]
   3c50e:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3c512:	720a      	strb	r2, [r1, #8]
   3c514:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
   3c518:	878a      	strh	r2, [r1, #60]	; 0x3c
   3c51a:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
   3c51e:	86ca      	strh	r2, [r1, #54]	; 0x36
   3c520:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
   3c524:	874a      	strh	r2, [r1, #58]	; 0x3a
   3c526:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
   3c52a:	868a      	strh	r2, [r1, #52]	; 0x34
   3c52c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
   3c530:	87ca      	strh	r2, [r1, #62]	; 0x3e
   3c532:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
   3c536:	870a      	strh	r2, [r1, #56]	; 0x38
   3c538:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3c53c:	830a      	strh	r2, [r1, #24]
   3c53e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3c540:	f8c1 2022 	str.w	r2, [r1, #34]	; 0x22
   3c544:	7c9a      	ldrb	r2, [r3, #18]
   3c546:	744a      	strb	r2, [r1, #17]
   3c548:	785a      	ldrb	r2, [r3, #1]
   3c54a:	70ca      	strb	r2, [r1, #3]
   3c54c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3c54e:	62ca      	str	r2, [r1, #44]	; 0x2c
   3c550:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
   3c554:	84ca      	strh	r2, [r1, #38]	; 0x26
   3c556:	885a      	ldrh	r2, [r3, #2]
   3c558:	808a      	strh	r2, [r1, #4]
   3c55a:	6a1a      	ldr	r2, [r3, #32]
   3c55c:	f8c1 201a 	str.w	r2, [r1, #26]
   3c560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3c562:	630a      	str	r2, [r1, #48]	; 0x30
   3c564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3c566:	f8c1 201e 	str.w	r2, [r1, #30]
   3c56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   3c56c:	628a      	str	r2, [r1, #40]	; 0x28
   3c56e:	781a      	ldrb	r2, [r3, #0]
   3c570:	708a      	strb	r2, [r1, #2]
   3c572:	f993 2010 	ldrsb.w	r2, [r3, #16]
   3c576:	73ca      	strb	r2, [r1, #15]
   3c578:	889a      	ldrh	r2, [r3, #4]
   3c57a:	80ca      	strh	r2, [r1, #6]
   3c57c:	8a9a      	ldrh	r2, [r3, #20]
   3c57e:	824a      	strh	r2, [r1, #18]
   3c580:	7c5a      	ldrb	r2, [r3, #17]
   3c582:	740a      	strb	r2, [r1, #16]
   3c584:	699b      	ldr	r3, [r3, #24]
   3c586:	614b      	str	r3, [r1, #20]
   3c588:	4770      	bx	lr
   3c58a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c58e:	4770      	bx	lr

0003c590 <rpc_gnss_serialize_alm>:
   3c590:	4603      	mov	r3, r0
   3c592:	b360      	cbz	r0, 3c5ee <rpc_gnss_serialize_alm+0x5e>
   3c594:	b359      	cbz	r1, 3c5ee <rpc_gnss_serialize_alm+0x5e>
   3c596:	2000      	movs	r0, #0
   3c598:	2203      	movs	r2, #3
   3c59a:	7048      	strb	r0, [r1, #1]
   3c59c:	700a      	strb	r2, [r1, #0]
   3c59e:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
   3c5a2:	2021      	movs	r0, #33	; 0x21
   3c5a4:	f8a1 201d 	strh.w	r2, [r1, #29]
   3c5a8:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
   3c5ac:	f8a1 201f 	strh.w	r2, [r1, #31]
   3c5b0:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
   3c5b4:	810a      	strh	r2, [r1, #8]
   3c5b6:	889a      	ldrh	r2, [r3, #4]
   3c5b8:	80ca      	strh	r2, [r1, #6]
   3c5ba:	78da      	ldrb	r2, [r3, #3]
   3c5bc:	714a      	strb	r2, [r1, #5]
   3c5be:	699a      	ldr	r2, [r3, #24]
   3c5c0:	f8c1 2019 	str.w	r2, [r1, #25]
   3c5c4:	691a      	ldr	r2, [r3, #16]
   3c5c6:	f8c1 2011 	str.w	r2, [r1, #17]
   3c5ca:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3c5ce:	814a      	strh	r2, [r1, #10]
   3c5d0:	68da      	ldr	r2, [r3, #12]
   3c5d2:	f8c1 200d 	str.w	r2, [r1, #13]
   3c5d6:	7a9a      	ldrb	r2, [r3, #10]
   3c5d8:	730a      	strb	r2, [r1, #12]
   3c5da:	781a      	ldrb	r2, [r3, #0]
   3c5dc:	708a      	strb	r2, [r1, #2]
   3c5de:	789a      	ldrb	r2, [r3, #2]
   3c5e0:	710a      	strb	r2, [r1, #4]
   3c5e2:	695a      	ldr	r2, [r3, #20]
   3c5e4:	f8c1 2015 	str.w	r2, [r1, #21]
   3c5e8:	785b      	ldrb	r3, [r3, #1]
   3c5ea:	70cb      	strb	r3, [r1, #3]
   3c5ec:	4770      	bx	lr
   3c5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c5f2:	4770      	bx	lr

0003c5f4 <rpc_gnss_serialize_klob>:
   3c5f4:	4603      	mov	r3, r0
   3c5f6:	b1f0      	cbz	r0, 3c636 <rpc_gnss_serialize_klob+0x42>
   3c5f8:	b1e9      	cbz	r1, 3c636 <rpc_gnss_serialize_klob+0x42>
   3c5fa:	2000      	movs	r0, #0
   3c5fc:	2204      	movs	r2, #4
   3c5fe:	7048      	strb	r0, [r1, #1]
   3c600:	700a      	strb	r2, [r1, #0]
   3c602:	f993 2000 	ldrsb.w	r2, [r3]
   3c606:	200a      	movs	r0, #10
   3c608:	708a      	strb	r2, [r1, #2]
   3c60a:	f993 2001 	ldrsb.w	r2, [r3, #1]
   3c60e:	70ca      	strb	r2, [r1, #3]
   3c610:	f993 2002 	ldrsb.w	r2, [r3, #2]
   3c614:	710a      	strb	r2, [r1, #4]
   3c616:	f993 2003 	ldrsb.w	r2, [r3, #3]
   3c61a:	714a      	strb	r2, [r1, #5]
   3c61c:	f993 2004 	ldrsb.w	r2, [r3, #4]
   3c620:	718a      	strb	r2, [r1, #6]
   3c622:	f993 2005 	ldrsb.w	r2, [r3, #5]
   3c626:	71ca      	strb	r2, [r1, #7]
   3c628:	f993 2006 	ldrsb.w	r2, [r3, #6]
   3c62c:	720a      	strb	r2, [r1, #8]
   3c62e:	f993 3007 	ldrsb.w	r3, [r3, #7]
   3c632:	724b      	strb	r3, [r1, #9]
   3c634:	4770      	bx	lr
   3c636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c63a:	4770      	bx	lr

0003c63c <rpc_gnss_serialize_nequick>:
   3c63c:	4603      	mov	r3, r0
   3c63e:	b198      	cbz	r0, 3c668 <rpc_gnss_serialize_nequick+0x2c>
   3c640:	b191      	cbz	r1, 3c668 <rpc_gnss_serialize_nequick+0x2c>
   3c642:	2000      	movs	r0, #0
   3c644:	2205      	movs	r2, #5
   3c646:	7048      	strb	r0, [r1, #1]
   3c648:	700a      	strb	r2, [r1, #0]
   3c64a:	f9b3 2000 	ldrsh.w	r2, [r3]
   3c64e:	200a      	movs	r0, #10
   3c650:	804a      	strh	r2, [r1, #2]
   3c652:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
   3c656:	808a      	strh	r2, [r1, #4]
   3c658:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
   3c65c:	80ca      	strh	r2, [r1, #6]
   3c65e:	799a      	ldrb	r2, [r3, #6]
   3c660:	720a      	strb	r2, [r1, #8]
   3c662:	79db      	ldrb	r3, [r3, #7]
   3c664:	724b      	strb	r3, [r1, #9]
   3c666:	4770      	bx	lr
   3c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c66c:	4770      	bx	lr
   3c66e:	bf00      	nop

0003c670 <rpc_gnss_serialize_time_and_sv_tow>:
   3c670:	b310      	cbz	r0, 3c6b8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3c672:	b309      	cbz	r1, 3c6b8 <rpc_gnss_serialize_time_and_sv_tow+0x48>
   3c674:	b470      	push	{r4, r5, r6}
   3c676:	2500      	movs	r5, #0
   3c678:	2606      	movs	r6, #6
   3c67a:	460c      	mov	r4, r1
   3c67c:	704d      	strb	r5, [r1, #1]
   3c67e:	700e      	strb	r6, [r1, #0]
   3c680:	462b      	mov	r3, r5
   3c682:	8805      	ldrh	r5, [r0, #0]
   3c684:	4602      	mov	r2, r0
   3c686:	804d      	strh	r5, [r1, #2]
   3c688:	68c5      	ldr	r5, [r0, #12]
   3c68a:	f8c1 500a 	str.w	r5, [r1, #10]
   3c68e:	8905      	ldrh	r5, [r0, #8]
   3c690:	810d      	strh	r5, [r1, #8]
   3c692:	6840      	ldr	r0, [r0, #4]
   3c694:	6048      	str	r0, [r1, #4]
   3c696:	8a15      	ldrh	r5, [r2, #16]
   3c698:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   3c69c:	4408      	add	r0, r1
   3c69e:	81c5      	strh	r5, [r0, #14]
   3c6a0:	7c90      	ldrb	r0, [r2, #18]
   3c6a2:	3301      	adds	r3, #1
   3c6a4:	2b20      	cmp	r3, #32
   3c6a6:	7420      	strb	r0, [r4, #16]
   3c6a8:	f102 0204 	add.w	r2, r2, #4
   3c6ac:	f104 0403 	add.w	r4, r4, #3
   3c6b0:	d1f1      	bne.n	3c696 <rpc_gnss_serialize_time_and_sv_tow+0x26>
   3c6b2:	206e      	movs	r0, #110	; 0x6e
   3c6b4:	bc70      	pop	{r4, r5, r6}
   3c6b6:	4770      	bx	lr
   3c6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c6bc:	4770      	bx	lr
   3c6be:	bf00      	nop

0003c6c0 <rpc_gnss_serialize_location>:
   3c6c0:	4603      	mov	r3, r0
   3c6c2:	b1c8      	cbz	r0, 3c6f8 <rpc_gnss_serialize_location+0x38>
   3c6c4:	b1c1      	cbz	r1, 3c6f8 <rpc_gnss_serialize_location+0x38>
   3c6c6:	2000      	movs	r0, #0
   3c6c8:	2207      	movs	r2, #7
   3c6ca:	7048      	strb	r0, [r1, #1]
   3c6cc:	700a      	strb	r2, [r1, #0]
   3c6ce:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
   3c6d2:	2011      	movs	r0, #17
   3c6d4:	814a      	strh	r2, [r1, #10]
   3c6d6:	7b9a      	ldrb	r2, [r3, #14]
   3c6d8:	740a      	strb	r2, [r1, #16]
   3c6da:	681a      	ldr	r2, [r3, #0]
   3c6dc:	f8c1 2002 	str.w	r2, [r1, #2]
   3c6e0:	685a      	ldr	r2, [r3, #4]
   3c6e2:	f8c1 2006 	str.w	r2, [r1, #6]
   3c6e6:	7b1a      	ldrb	r2, [r3, #12]
   3c6e8:	738a      	strb	r2, [r1, #14]
   3c6ea:	7b5a      	ldrb	r2, [r3, #13]
   3c6ec:	73ca      	strb	r2, [r1, #15]
   3c6ee:	7a9a      	ldrb	r2, [r3, #10]
   3c6f0:	730a      	strb	r2, [r1, #12]
   3c6f2:	7adb      	ldrb	r3, [r3, #11]
   3c6f4:	734b      	strb	r3, [r1, #13]
   3c6f6:	4770      	bx	lr
   3c6f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c6fc:	4770      	bx	lr
   3c6fe:	bf00      	nop

0003c700 <rpc_gnss_serialize_integrity>:
   3c700:	b148      	cbz	r0, 3c716 <rpc_gnss_serialize_integrity+0x16>
   3c702:	b141      	cbz	r1, 3c716 <rpc_gnss_serialize_integrity+0x16>
   3c704:	2200      	movs	r2, #0
   3c706:	2308      	movs	r3, #8
   3c708:	704a      	strb	r2, [r1, #1]
   3c70a:	700b      	strb	r3, [r1, #0]
   3c70c:	6803      	ldr	r3, [r0, #0]
   3c70e:	2006      	movs	r0, #6
   3c710:	f8c1 3002 	str.w	r3, [r1, #2]
   3c714:	4770      	bx	lr
   3c716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c71a:	4770      	bx	lr

0003c71c <gnss_client_event_handler>:
   3c71c:	f850 1b08 	ldr.w	r1, [r0], #8
   3c720:	0c09      	lsrs	r1, r1, #16
   3c722:	f7fc bfa9 	b.w	39678 <rpc_gnss_event_handler>
   3c726:	bf00      	nop

0003c728 <rpc_gnss_client_init>:
   3c728:	4801      	ldr	r0, [pc, #4]	; (3c730 <rpc_gnss_client_init+0x8>)
   3c72a:	f7fc be93 	b.w	39454 <rpc_client_register>
   3c72e:	bf00      	nop
   3c730:	0004a724 	.word	0x0004a724

0003c734 <rpc_gnss_client_deinit>:
   3c734:	2007      	movs	r0, #7
   3c736:	f7fc bef7 	b.w	39528 <rpc_client_unregister>
   3c73a:	bf00      	nop

0003c73c <rpc_gnss_client_request_alloc>:
   3c73c:	2300      	movs	r3, #0
   3c73e:	b510      	push	{r4, lr}
   3c740:	b082      	sub	sp, #8
   3c742:	9301      	str	r3, [sp, #4]
   3c744:	b158      	cbz	r0, 3c75e <rpc_gnss_client_request_alloc+0x22>
   3c746:	4604      	mov	r4, r0
   3c748:	aa01      	add	r2, sp, #4
   3c74a:	2007      	movs	r0, #7
   3c74c:	f7fc ff42 	bl	395d4 <rpc_message_alloc>
   3c750:	b918      	cbnz	r0, 3c75a <rpc_gnss_client_request_alloc+0x1e>
   3c752:	9b01      	ldr	r3, [sp, #4]
   3c754:	b10b      	cbz	r3, 3c75a <rpc_gnss_client_request_alloc+0x1e>
   3c756:	3308      	adds	r3, #8
   3c758:	6023      	str	r3, [r4, #0]
   3c75a:	b002      	add	sp, #8
   3c75c:	bd10      	pop	{r4, pc}
   3c75e:	2007      	movs	r0, #7
   3c760:	b002      	add	sp, #8
   3c762:	bd10      	pop	{r4, pc}

0003c764 <rpc_gnss_client_request_send>:
   3c764:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   3c768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   3c76c:	d10b      	bne.n	3c786 <rpc_gnss_client_request_send+0x22>
   3c76e:	b160      	cbz	r0, 3c78a <rpc_gnss_client_request_send+0x26>
   3c770:	4603      	mov	r3, r0
   3c772:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3c776:	2007      	movs	r0, #7
   3c778:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3c77c:	f843 1d08 	str.w	r1, [r3, #-8]!
   3c780:	4619      	mov	r1, r3
   3c782:	f7fc bf17 	b.w	395b4 <rpc_message_send>
   3c786:	200f      	movs	r0, #15
   3c788:	4770      	bx	lr
   3c78a:	2007      	movs	r0, #7
   3c78c:	4770      	bx	lr
   3c78e:	bf00      	nop

0003c790 <rpc_gnss_client_message_free>:
   3c790:	b120      	cbz	r0, 3c79c <rpc_gnss_client_message_free+0xc>
   3c792:	f1a0 0108 	sub.w	r1, r0, #8
   3c796:	2007      	movs	r0, #7
   3c798:	f7fc bf48 	b.w	3962c <rpc_message_free>
   3c79c:	2007      	movs	r0, #7
   3c79e:	4770      	bx	lr

0003c7a0 <rpc_gnss_client_data_free>:
   3c7a0:	b118      	cbz	r0, 3c7aa <rpc_gnss_client_data_free+0xa>
   3c7a2:	4601      	mov	r1, r0
   3c7a4:	2007      	movs	r0, #7
   3c7a6:	f7fc bf4d 	b.w	39644 <rpc_message_data_free>
   3c7aa:	2007      	movs	r0, #7
   3c7ac:	4770      	bx	lr
   3c7ae:	bf00      	nop

0003c7b0 <datagram_handler_init>:
   3c7b0:	b510      	push	{r4, lr}
   3c7b2:	4604      	mov	r4, r0
   3c7b4:	200c      	movs	r0, #12
   3c7b6:	f000 fdd7 	bl	3d368 <nrf_malloc>
   3c7ba:	60e0      	str	r0, [r4, #12]
   3c7bc:	b118      	cbz	r0, 3c7c6 <datagram_handler_init+0x16>
   3c7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c7c2:	f7ff bd15 	b.w	3c1f0 <linked_list_init>
   3c7c6:	2004      	movs	r0, #4
   3c7c8:	bd10      	pop	{r4, pc}
   3c7ca:	bf00      	nop

0003c7cc <datagram_handler_put>:
   3c7cc:	b570      	push	{r4, r5, r6, lr}
   3c7ce:	4606      	mov	r6, r0
   3c7d0:	2014      	movs	r0, #20
   3c7d2:	460d      	mov	r5, r1
   3c7d4:	f000 fdc8 	bl	3d368 <nrf_malloc>
   3c7d8:	b178      	cbz	r0, 3c7fa <datagram_handler_put+0x2e>
   3c7da:	682b      	ldr	r3, [r5, #0]
   3c7dc:	4604      	mov	r4, r0
   3c7de:	6043      	str	r3, [r0, #4]
   3c7e0:	686b      	ldr	r3, [r5, #4]
   3c7e2:	4601      	mov	r1, r0
   3c7e4:	6083      	str	r3, [r0, #8]
   3c7e6:	68eb      	ldr	r3, [r5, #12]
   3c7e8:	60c3      	str	r3, [r0, #12]
   3c7ea:	68ab      	ldr	r3, [r5, #8]
   3c7ec:	6103      	str	r3, [r0, #16]
   3c7ee:	68f0      	ldr	r0, [r6, #12]
   3c7f0:	f7ff fd08 	bl	3c204 <linked_list_push>
   3c7f4:	b920      	cbnz	r0, 3c800 <datagram_handler_put+0x34>
   3c7f6:	6868      	ldr	r0, [r5, #4]
   3c7f8:	bd70      	pop	{r4, r5, r6, pc}
   3c7fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c7fe:	bd70      	pop	{r4, r5, r6, pc}
   3c800:	4620      	mov	r0, r4
   3c802:	f000 fdbb 	bl	3d37c <nrf_free>
   3c806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c80a:	bd70      	pop	{r4, r5, r6, pc}

0003c80c <datagram_handler_get>:
   3c80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c810:	4607      	mov	r7, r0
   3c812:	b084      	sub	sp, #16
   3c814:	68c0      	ldr	r0, [r0, #12]
   3c816:	460c      	mov	r4, r1
   3c818:	4616      	mov	r6, r2
   3c81a:	f7ff fd13 	bl	3c244 <linked_list_peek>
   3c81e:	2800      	cmp	r0, #0
   3c820:	d03b      	beq.n	3c89a <datagram_handler_get+0x8e>
   3c822:	6882      	ldr	r2, [r0, #8]
   3c824:	4605      	mov	r5, r0
   3c826:	e9d4 0300 	ldrd	r0, r3, [r4]
   3c82a:	429a      	cmp	r2, r3
   3c82c:	bf28      	it	cs
   3c82e:	461a      	movcs	r2, r3
   3c830:	6062      	str	r2, [r4, #4]
   3c832:	b110      	cbz	r0, 3c83a <datagram_handler_get+0x2e>
   3c834:	6869      	ldr	r1, [r5, #4]
   3c836:	f00b fca7 	bl	48188 <memcpy>
   3c83a:	68a0      	ldr	r0, [r4, #8]
   3c83c:	b118      	cbz	r0, 3c846 <datagram_handler_get+0x3a>
   3c83e:	692b      	ldr	r3, [r5, #16]
   3c840:	b10b      	cbz	r3, 3c846 <datagram_handler_get+0x3a>
   3c842:	68ea      	ldr	r2, [r5, #12]
   3c844:	bb02      	cbnz	r2, 3c888 <datagram_handler_get+0x7c>
   3c846:	2300      	movs	r3, #0
   3c848:	60e3      	str	r3, [r4, #12]
   3c84a:	0732      	lsls	r2, r6, #28
   3c84c:	d506      	bpl.n	3c85c <datagram_handler_get+0x50>
   3c84e:	06b3      	lsls	r3, r6, #26
   3c850:	bf4c      	ite	mi
   3c852:	68a8      	ldrmi	r0, [r5, #8]
   3c854:	6860      	ldrpl	r0, [r4, #4]
   3c856:	b004      	add	sp, #16
   3c858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3c85c:	68f8      	ldr	r0, [r7, #12]
   3c85e:	f7ff fce7 	bl	3c230 <linked_list_pop>
   3c862:	4680      	mov	r8, r0
   3c864:	2800      	cmp	r0, #0
   3c866:	d0f2      	beq.n	3c84e <datagram_handler_get+0x42>
   3c868:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3c86c:	6902      	ldr	r2, [r0, #16]
   3c86e:	9300      	str	r3, [sp, #0]
   3c870:	68c3      	ldr	r3, [r0, #12]
   3c872:	e9cd 1201 	strd	r1, r2, [sp, #4]
   3c876:	9303      	str	r3, [sp, #12]
   3c878:	4668      	mov	r0, sp
   3c87a:	e9d7 3101 	ldrd	r3, r1, [r7, #4]
   3c87e:	4798      	blx	r3
   3c880:	4640      	mov	r0, r8
   3c882:	f000 fd7b 	bl	3d37c <nrf_free>
   3c886:	e7e2      	b.n	3c84e <datagram_handler_get+0x42>
   3c888:	68e3      	ldr	r3, [r4, #12]
   3c88a:	429a      	cmp	r2, r3
   3c88c:	bf28      	it	cs
   3c88e:	461a      	movcs	r2, r3
   3c890:	60e2      	str	r2, [r4, #12]
   3c892:	6929      	ldr	r1, [r5, #16]
   3c894:	f00b fc78 	bl	48188 <memcpy>
   3c898:	e7d7      	b.n	3c84a <datagram_handler_get+0x3e>
   3c89a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c89e:	e7da      	b.n	3c856 <datagram_handler_get+0x4a>

0003c8a0 <datagram_handler_available>:
   3c8a0:	b508      	push	{r3, lr}
   3c8a2:	68c0      	ldr	r0, [r0, #12]
   3c8a4:	f7ff fcce 	bl	3c244 <linked_list_peek>
   3c8a8:	b108      	cbz	r0, 3c8ae <datagram_handler_available+0xe>
   3c8aa:	6880      	ldr	r0, [r0, #8]
   3c8ac:	bd08      	pop	{r3, pc}
   3c8ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c8b2:	bd08      	pop	{r3, pc}

0003c8b4 <datagram_handler_flush>:
   3c8b4:	b530      	push	{r4, r5, lr}
   3c8b6:	4605      	mov	r5, r0
   3c8b8:	68c0      	ldr	r0, [r0, #12]
   3c8ba:	b085      	sub	sp, #20
   3c8bc:	b9a8      	cbnz	r0, 3c8ea <datagram_handler_flush+0x36>
   3c8be:	e01a      	b.n	3c8f6 <datagram_handler_flush+0x42>
   3c8c0:	68e8      	ldr	r0, [r5, #12]
   3c8c2:	f7ff fcb5 	bl	3c230 <linked_list_pop>
   3c8c6:	4604      	mov	r4, r0
   3c8c8:	b170      	cbz	r0, 3c8e8 <datagram_handler_flush+0x34>
   3c8ca:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3c8ce:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3c8d2:	e9cd 0100 	strd	r0, r1, [sp]
   3c8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3c8da:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3c8de:	4668      	mov	r0, sp
   3c8e0:	4798      	blx	r3
   3c8e2:	4620      	mov	r0, r4
   3c8e4:	f000 fd4a 	bl	3d37c <nrf_free>
   3c8e8:	68e8      	ldr	r0, [r5, #12]
   3c8ea:	f7ff fcb1 	bl	3c250 <linked_list_size_get>
   3c8ee:	2800      	cmp	r0, #0
   3c8f0:	d1e6      	bne.n	3c8c0 <datagram_handler_flush+0xc>
   3c8f2:	b005      	add	sp, #20
   3c8f4:	bd30      	pop	{r4, r5, pc}
   3c8f6:	2008      	movs	r0, #8
   3c8f8:	b005      	add	sp, #20
   3c8fa:	bd30      	pop	{r4, r5, pc}

0003c8fc <datagram_handler_free>:
   3c8fc:	b530      	push	{r4, r5, lr}
   3c8fe:	4605      	mov	r5, r0
   3c900:	68c0      	ldr	r0, [r0, #12]
   3c902:	b085      	sub	sp, #20
   3c904:	b9a0      	cbnz	r0, 3c930 <datagram_handler_free+0x34>
   3c906:	e01c      	b.n	3c942 <datagram_handler_free+0x46>
   3c908:	f7ff fc92 	bl	3c230 <linked_list_pop>
   3c90c:	4604      	mov	r4, r0
   3c90e:	b170      	cbz	r0, 3c92e <datagram_handler_free+0x32>
   3c910:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3c914:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3c918:	e9cd 0100 	strd	r0, r1, [sp]
   3c91c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3c920:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3c924:	4668      	mov	r0, sp
   3c926:	4798      	blx	r3
   3c928:	4620      	mov	r0, r4
   3c92a:	f000 fd27 	bl	3d37c <nrf_free>
   3c92e:	68e8      	ldr	r0, [r5, #12]
   3c930:	f7ff fc8e 	bl	3c250 <linked_list_size_get>
   3c934:	4604      	mov	r4, r0
   3c936:	68e8      	ldr	r0, [r5, #12]
   3c938:	2c00      	cmp	r4, #0
   3c93a:	d1e5      	bne.n	3c908 <datagram_handler_free+0xc>
   3c93c:	f000 fd1e 	bl	3d37c <nrf_free>
   3c940:	60ec      	str	r4, [r5, #12]
   3c942:	b005      	add	sp, #20
   3c944:	bd30      	pop	{r4, r5, pc}
   3c946:	bf00      	nop

0003c948 <null_handler_init>:
   3c948:	2000      	movs	r0, #0
   3c94a:	4770      	bx	lr

0003c94c <null_handler_put>:
   3c94c:	b510      	push	{r4, lr}
   3c94e:	460c      	mov	r4, r1
   3c950:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   3c954:	4620      	mov	r0, r4
   3c956:	4798      	blx	r3
   3c958:	6860      	ldr	r0, [r4, #4]
   3c95a:	bd10      	pop	{r4, pc}

0003c95c <null_handler_get>:
   3c95c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c960:	4770      	bx	lr
   3c962:	bf00      	nop

0003c964 <null_handler_available>:
   3c964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3c968:	4770      	bx	lr
   3c96a:	bf00      	nop

0003c96c <null_handler_flush>:
   3c96c:	2000      	movs	r0, #0
   3c96e:	4770      	bx	lr

0003c970 <null_handler_free>:
   3c970:	4770      	bx	lr
   3c972:	bf00      	nop

0003c974 <packet_handler_create>:
   3c974:	2801      	cmp	r0, #1
   3c976:	b538      	push	{r3, r4, r5, lr}
   3c978:	460d      	mov	r5, r1
   3c97a:	4614      	mov	r4, r2
   3c97c:	d00d      	beq.n	3c99a <packet_handler_create+0x26>
   3c97e:	db11      	blt.n	3c9a4 <packet_handler_create+0x30>
   3c980:	2803      	cmp	r0, #3
   3c982:	dc0f      	bgt.n	3c9a4 <packet_handler_create+0x30>
   3c984:	2010      	movs	r0, #16
   3c986:	f000 fcef 	bl	3d368 <nrf_malloc>
   3c98a:	2218      	movs	r2, #24
   3c98c:	b120      	cbz	r0, 3c998 <packet_handler_create+0x24>
   3c98e:	4b08      	ldr	r3, [pc, #32]	; (3c9b0 <packet_handler_create+0x3c>)
   3c990:	6045      	str	r5, [r0, #4]
   3c992:	4413      	add	r3, r2
   3c994:	6084      	str	r4, [r0, #8]
   3c996:	6003      	str	r3, [r0, #0]
   3c998:	bd38      	pop	{r3, r4, r5, pc}
   3c99a:	2014      	movs	r0, #20
   3c99c:	f000 fce4 	bl	3d368 <nrf_malloc>
   3c9a0:	2230      	movs	r2, #48	; 0x30
   3c9a2:	e7f3      	b.n	3c98c <packet_handler_create+0x18>
   3c9a4:	200c      	movs	r0, #12
   3c9a6:	f000 fcdf 	bl	3d368 <nrf_malloc>
   3c9aa:	2200      	movs	r2, #0
   3c9ac:	e7ee      	b.n	3c98c <packet_handler_create+0x18>
   3c9ae:	bf00      	nop
   3c9b0:	0004a734 	.word	0x0004a734

0003c9b4 <packet_handler_delete>:
   3c9b4:	b510      	push	{r4, lr}
   3c9b6:	4604      	mov	r4, r0
   3c9b8:	6803      	ldr	r3, [r0, #0]
   3c9ba:	691b      	ldr	r3, [r3, #16]
   3c9bc:	4798      	blx	r3
   3c9be:	6823      	ldr	r3, [r4, #0]
   3c9c0:	4620      	mov	r0, r4
   3c9c2:	695b      	ldr	r3, [r3, #20]
   3c9c4:	4798      	blx	r3
   3c9c6:	4620      	mov	r0, r4
   3c9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c9cc:	f000 bcd6 	b.w	3d37c <nrf_free>

0003c9d0 <stream_handler_init>:
   3c9d0:	b510      	push	{r4, lr}
   3c9d2:	4604      	mov	r4, r0
   3c9d4:	200c      	movs	r0, #12
   3c9d6:	f000 fcc7 	bl	3d368 <nrf_malloc>
   3c9da:	60e0      	str	r0, [r4, #12]
   3c9dc:	b128      	cbz	r0, 3c9ea <stream_handler_init+0x1a>
   3c9de:	2300      	movs	r3, #0
   3c9e0:	6123      	str	r3, [r4, #16]
   3c9e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3c9e6:	f7ff bc03 	b.w	3c1f0 <linked_list_init>
   3c9ea:	2004      	movs	r0, #4
   3c9ec:	bd10      	pop	{r4, pc}
   3c9ee:	bf00      	nop

0003c9f0 <stream_handler_put>:
   3c9f0:	b570      	push	{r4, r5, r6, lr}
   3c9f2:	4606      	mov	r6, r0
   3c9f4:	2014      	movs	r0, #20
   3c9f6:	460d      	mov	r5, r1
   3c9f8:	f000 fcb6 	bl	3d368 <nrf_malloc>
   3c9fc:	b178      	cbz	r0, 3ca1e <stream_handler_put+0x2e>
   3c9fe:	682b      	ldr	r3, [r5, #0]
   3ca00:	4604      	mov	r4, r0
   3ca02:	6043      	str	r3, [r0, #4]
   3ca04:	686b      	ldr	r3, [r5, #4]
   3ca06:	4601      	mov	r1, r0
   3ca08:	6083      	str	r3, [r0, #8]
   3ca0a:	68eb      	ldr	r3, [r5, #12]
   3ca0c:	60c3      	str	r3, [r0, #12]
   3ca0e:	68ab      	ldr	r3, [r5, #8]
   3ca10:	6103      	str	r3, [r0, #16]
   3ca12:	68f0      	ldr	r0, [r6, #12]
   3ca14:	f7ff fbf6 	bl	3c204 <linked_list_push>
   3ca18:	b920      	cbnz	r0, 3ca24 <stream_handler_put+0x34>
   3ca1a:	6868      	ldr	r0, [r5, #4]
   3ca1c:	bd70      	pop	{r4, r5, r6, pc}
   3ca1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ca22:	bd70      	pop	{r4, r5, r6, pc}
   3ca24:	4620      	mov	r0, r4
   3ca26:	f000 fca9 	bl	3d37c <nrf_free>
   3ca2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ca2e:	bd70      	pop	{r4, r5, r6, pc}

0003ca30 <stream_handler_get>:
   3ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ca34:	4682      	mov	sl, r0
   3ca36:	b089      	sub	sp, #36	; 0x24
   3ca38:	68c0      	ldr	r0, [r0, #12]
   3ca3a:	4689      	mov	r9, r1
   3ca3c:	4693      	mov	fp, r2
   3ca3e:	f7ff fc01 	bl	3c244 <linked_list_peek>
   3ca42:	2800      	cmp	r0, #0
   3ca44:	d071      	beq.n	3cb2a <stream_handler_get+0xfa>
   3ca46:	4605      	mov	r5, r0
   3ca48:	f8d9 0008 	ldr.w	r0, [r9, #8]
   3ca4c:	b120      	cbz	r0, 3ca58 <stream_handler_get+0x28>
   3ca4e:	692b      	ldr	r3, [r5, #16]
   3ca50:	b113      	cbz	r3, 3ca58 <stream_handler_get+0x28>
   3ca52:	68ea      	ldr	r2, [r5, #12]
   3ca54:	2a00      	cmp	r2, #0
   3ca56:	d15d      	bne.n	3cb14 <stream_handler_get+0xe4>
   3ca58:	2300      	movs	r3, #0
   3ca5a:	f8c9 300c 	str.w	r3, [r9, #12]
   3ca5e:	f8d9 2000 	ldr.w	r2, [r9]
   3ca62:	f8d9 8004 	ldr.w	r8, [r9, #4]
   3ca66:	f8da 1010 	ldr.w	r1, [sl, #16]
   3ca6a:	9203      	str	r2, [sp, #12]
   3ca6c:	f1b8 0f00 	cmp.w	r8, #0
   3ca70:	d030      	beq.n	3cad4 <stream_handler_get+0xa4>
   3ca72:	2400      	movs	r4, #0
   3ca74:	f00b 0320 	and.w	r3, fp, #32
   3ca78:	9301      	str	r3, [sp, #4]
   3ca7a:	f00b 0b08 	and.w	fp, fp, #8
   3ca7e:	68ae      	ldr	r6, [r5, #8]
   3ca80:	eba8 0304 	sub.w	r3, r8, r4
   3ca84:	1a76      	subs	r6, r6, r1
   3ca86:	429e      	cmp	r6, r3
   3ca88:	4637      	mov	r7, r6
   3ca8a:	bf28      	it	cs
   3ca8c:	461f      	movcs	r7, r3
   3ca8e:	b10a      	cbz	r2, 3ca94 <stream_handler_get+0x64>
   3ca90:	9a01      	ldr	r2, [sp, #4]
   3ca92:	b1aa      	cbz	r2, 3cac0 <stream_handler_get+0x90>
   3ca94:	f1bb 0f00 	cmp.w	fp, #0
   3ca98:	d106      	bne.n	3caa8 <stream_handler_get+0x78>
   3ca9a:	429e      	cmp	r6, r3
   3ca9c:	d921      	bls.n	3cae2 <stream_handler_get+0xb2>
   3ca9e:	f8da 3010 	ldr.w	r3, [sl, #16]
   3caa2:	443b      	add	r3, r7
   3caa4:	f8ca 3010 	str.w	r3, [sl, #16]
   3caa8:	4628      	mov	r0, r5
   3caaa:	f7ff fbd3 	bl	3c254 <linked_list_get_next>
   3caae:	443c      	add	r4, r7
   3cab0:	4605      	mov	r5, r0
   3cab2:	b180      	cbz	r0, 3cad6 <stream_handler_get+0xa6>
   3cab4:	45a0      	cmp	r8, r4
   3cab6:	d90e      	bls.n	3cad6 <stream_handler_get+0xa6>
   3cab8:	f8d9 2000 	ldr.w	r2, [r9]
   3cabc:	2100      	movs	r1, #0
   3cabe:	e7de      	b.n	3ca7e <stream_handler_get+0x4e>
   3cac0:	6868      	ldr	r0, [r5, #4]
   3cac2:	9302      	str	r3, [sp, #8]
   3cac4:	9b03      	ldr	r3, [sp, #12]
   3cac6:	4401      	add	r1, r0
   3cac8:	463a      	mov	r2, r7
   3caca:	1918      	adds	r0, r3, r4
   3cacc:	f00b fb5c 	bl	48188 <memcpy>
   3cad0:	9b02      	ldr	r3, [sp, #8]
   3cad2:	e7df      	b.n	3ca94 <stream_handler_get+0x64>
   3cad4:	4644      	mov	r4, r8
   3cad6:	4620      	mov	r0, r4
   3cad8:	f8c9 4004 	str.w	r4, [r9, #4]
   3cadc:	b009      	add	sp, #36	; 0x24
   3cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cae2:	f8da 000c 	ldr.w	r0, [sl, #12]
   3cae6:	f7ff fba3 	bl	3c230 <linked_list_pop>
   3caea:	4606      	mov	r6, r0
   3caec:	b170      	cbz	r0, 3cb0c <stream_handler_get+0xdc>
   3caee:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   3caf2:	e9d0 0103 	ldrd	r0, r1, [r0, #12]
   3caf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   3cafa:	e9cd 1006 	strd	r1, r0, [sp, #24]
   3cafe:	e9da 3101 	ldrd	r3, r1, [sl, #4]
   3cb02:	a804      	add	r0, sp, #16
   3cb04:	4798      	blx	r3
   3cb06:	4630      	mov	r0, r6
   3cb08:	f000 fc38 	bl	3d37c <nrf_free>
   3cb0c:	2300      	movs	r3, #0
   3cb0e:	f8ca 3010 	str.w	r3, [sl, #16]
   3cb12:	e7c9      	b.n	3caa8 <stream_handler_get+0x78>
   3cb14:	f8d9 300c 	ldr.w	r3, [r9, #12]
   3cb18:	429a      	cmp	r2, r3
   3cb1a:	bf28      	it	cs
   3cb1c:	461a      	movcs	r2, r3
   3cb1e:	f8c9 200c 	str.w	r2, [r9, #12]
   3cb22:	6929      	ldr	r1, [r5, #16]
   3cb24:	f00b fb30 	bl	48188 <memcpy>
   3cb28:	e799      	b.n	3ca5e <stream_handler_get+0x2e>
   3cb2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cb2e:	e7d5      	b.n	3cadc <stream_handler_get+0xac>

0003cb30 <stream_handler_available>:
   3cb30:	b510      	push	{r4, lr}
   3cb32:	4604      	mov	r4, r0
   3cb34:	68c0      	ldr	r0, [r0, #12]
   3cb36:	f7ff fb85 	bl	3c244 <linked_list_peek>
   3cb3a:	b150      	cbz	r0, 3cb52 <stream_handler_available+0x22>
   3cb3c:	6924      	ldr	r4, [r4, #16]
   3cb3e:	4264      	negs	r4, r4
   3cb40:	6883      	ldr	r3, [r0, #8]
   3cb42:	441c      	add	r4, r3
   3cb44:	f7ff fb86 	bl	3c254 <linked_list_get_next>
   3cb48:	2800      	cmp	r0, #0
   3cb4a:	d1f9      	bne.n	3cb40 <stream_handler_available+0x10>
   3cb4c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   3cb50:	bd10      	pop	{r4, pc}
   3cb52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3cb56:	bd10      	pop	{r4, pc}

0003cb58 <stream_handler_flush>:
   3cb58:	b530      	push	{r4, r5, lr}
   3cb5a:	4605      	mov	r5, r0
   3cb5c:	68c0      	ldr	r0, [r0, #12]
   3cb5e:	b085      	sub	sp, #20
   3cb60:	b9a8      	cbnz	r0, 3cb8e <stream_handler_flush+0x36>
   3cb62:	e01a      	b.n	3cb9a <stream_handler_flush+0x42>
   3cb64:	68e8      	ldr	r0, [r5, #12]
   3cb66:	f7ff fb63 	bl	3c230 <linked_list_pop>
   3cb6a:	4604      	mov	r4, r0
   3cb6c:	b170      	cbz	r0, 3cb8c <stream_handler_flush+0x34>
   3cb6e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3cb72:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3cb76:	e9cd 0100 	strd	r0, r1, [sp]
   3cb7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3cb7e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3cb82:	4668      	mov	r0, sp
   3cb84:	4798      	blx	r3
   3cb86:	4620      	mov	r0, r4
   3cb88:	f000 fbf8 	bl	3d37c <nrf_free>
   3cb8c:	68e8      	ldr	r0, [r5, #12]
   3cb8e:	f7ff fb5f 	bl	3c250 <linked_list_size_get>
   3cb92:	2800      	cmp	r0, #0
   3cb94:	d1e6      	bne.n	3cb64 <stream_handler_flush+0xc>
   3cb96:	b005      	add	sp, #20
   3cb98:	bd30      	pop	{r4, r5, pc}
   3cb9a:	2008      	movs	r0, #8
   3cb9c:	b005      	add	sp, #20
   3cb9e:	bd30      	pop	{r4, r5, pc}

0003cba0 <stream_handler_free>:
   3cba0:	b530      	push	{r4, r5, lr}
   3cba2:	4605      	mov	r5, r0
   3cba4:	68c0      	ldr	r0, [r0, #12]
   3cba6:	b085      	sub	sp, #20
   3cba8:	b9a0      	cbnz	r0, 3cbd4 <stream_handler_free+0x34>
   3cbaa:	e01c      	b.n	3cbe6 <stream_handler_free+0x46>
   3cbac:	f7ff fb40 	bl	3c230 <linked_list_pop>
   3cbb0:	4604      	mov	r4, r0
   3cbb2:	b170      	cbz	r0, 3cbd2 <stream_handler_free+0x32>
   3cbb4:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   3cbb8:	e9d4 3203 	ldrd	r3, r2, [r4, #12]
   3cbbc:	e9cd 0100 	strd	r0, r1, [sp]
   3cbc0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   3cbc4:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   3cbc8:	4668      	mov	r0, sp
   3cbca:	4798      	blx	r3
   3cbcc:	4620      	mov	r0, r4
   3cbce:	f000 fbd5 	bl	3d37c <nrf_free>
   3cbd2:	68e8      	ldr	r0, [r5, #12]
   3cbd4:	f7ff fb3c 	bl	3c250 <linked_list_size_get>
   3cbd8:	4604      	mov	r4, r0
   3cbda:	68e8      	ldr	r0, [r5, #12]
   3cbdc:	2c00      	cmp	r4, #0
   3cbde:	d1e5      	bne.n	3cbac <stream_handler_free+0xc>
   3cbe0:	f000 fbcc 	bl	3d37c <nrf_free>
   3cbe4:	60ec      	str	r4, [r5, #12]
   3cbe6:	b005      	add	sp, #20
   3cbe8:	bd30      	pop	{r4, r5, pc}
   3cbea:	bf00      	nop

0003cbec <mem_free>:
   3cbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cbf0:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3ccc0 <mem_free+0xd4>
   3cbf4:	b083      	sub	sp, #12
   3cbf6:	9000      	str	r0, [sp, #0]
   3cbf8:	f10c 0b3c 	add.w	fp, ip, #60	; 0x3c
   3cbfc:	f8dc 3008 	ldr.w	r3, [ip, #8]
   3cc00:	b12b      	cbz	r3, 3cc0e <mem_free+0x22>
   3cc02:	f8dc 2000 	ldr.w	r2, [ip]
   3cc06:	9c00      	ldr	r4, [sp, #0]
   3cc08:	7810      	ldrb	r0, [r2, #0]
   3cc0a:	42a0      	cmp	r0, r4
   3cc0c:	d006      	beq.n	3cc1c <mem_free+0x30>
   3cc0e:	f10c 0c0c 	add.w	ip, ip, #12
   3cc12:	45e3      	cmp	fp, ip
   3cc14:	d1f2      	bne.n	3cbfc <mem_free+0x10>
   3cc16:	b003      	add	sp, #12
   3cc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cc1c:	f8dc a004 	ldr.w	sl, [ip, #4]
   3cc20:	eb03 080a 	add.w	r8, r3, sl
   3cc24:	45c2      	cmp	sl, r8
   3cc26:	d2f2      	bcs.n	3cc0e <mem_free+0x22>
   3cc28:	6853      	ldr	r3, [r2, #4]
   3cc2a:	f8cd c004 	str.w	ip, [sp, #4]
   3cc2e:	46d6      	mov	lr, sl
   3cc30:	469c      	mov	ip, r3
   3cc32:	f8d2 9010 	ldr.w	r9, [r2, #16]
   3cc36:	8997      	ldrh	r7, [r2, #12]
   3cc38:	ebae 000a 	sub.w	r0, lr, sl
   3cc3c:	b3df      	cbz	r7, 3ccb6 <mem_free+0xca>
   3cc3e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   3cc42:	4290      	cmp	r0, r2
   3cc44:	d31c      	bcc.n	3cc80 <mem_free+0x94>
   3cc46:	4665      	mov	r5, ip
   3cc48:	2400      	movs	r4, #0
   3cc4a:	f109 0304 	add.w	r3, r9, #4
   3cc4e:	e003      	b.n	3cc58 <mem_free+0x6c>
   3cc50:	885a      	ldrh	r2, [r3, #2]
   3cc52:	3304      	adds	r3, #4
   3cc54:	4282      	cmp	r2, r0
   3cc56:	d815      	bhi.n	3cc84 <mem_free+0x98>
   3cc58:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   3cc5c:	3401      	adds	r4, #1
   3cc5e:	42a7      	cmp	r7, r4
   3cc60:	fb02 5506 	mla	r5, r2, r6, r5
   3cc64:	eba0 0002 	sub.w	r0, r0, r2
   3cc68:	461e      	mov	r6, r3
   3cc6a:	d1f1      	bne.n	3cc50 <mem_free+0x64>
   3cc6c:	2000      	movs	r0, #0
   3cc6e:	4281      	cmp	r1, r0
   3cc70:	d00d      	beq.n	3cc8e <mem_free+0xa2>
   3cc72:	f10e 0e01 	add.w	lr, lr, #1
   3cc76:	45f0      	cmp	r8, lr
   3cc78:	d1de      	bne.n	3cc38 <mem_free+0x4c>
   3cc7a:	f8dd c004 	ldr.w	ip, [sp, #4]
   3cc7e:	e7c6      	b.n	3cc0e <mem_free+0x22>
   3cc80:	4665      	mov	r5, ip
   3cc82:	464e      	mov	r6, r9
   3cc84:	8833      	ldrh	r3, [r6, #0]
   3cc86:	fb00 5003 	mla	r0, r0, r3, r5
   3cc8a:	4281      	cmp	r1, r0
   3cc8c:	d1f1      	bne.n	3cc72 <mem_free+0x86>
   3cc8e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   3cc92:	f8dd c004 	ldr.w	ip, [sp, #4]
   3cc96:	d0ba      	beq.n	3cc0e <mem_free+0x22>
   3cc98:	2301      	movs	r3, #1
   3cc9a:	4a08      	ldr	r2, [pc, #32]	; (3ccbc <mem_free+0xd0>)
   3cc9c:	ea4f 115e 	mov.w	r1, lr, lsr #5
   3cca0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3cca4:	f00e 0e1f 	and.w	lr, lr, #31
   3cca8:	fa03 fe0e 	lsl.w	lr, r3, lr
   3ccac:	ea4e 0000 	orr.w	r0, lr, r0
   3ccb0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   3ccb4:	e7af      	b.n	3cc16 <mem_free+0x2a>
   3ccb6:	4638      	mov	r0, r7
   3ccb8:	e7d9      	b.n	3cc6e <mem_free+0x82>
   3ccba:	bf00      	nop
   3ccbc:	20025f68 	.word	0x20025f68
   3ccc0:	20025fac 	.word	0x20025fac

0003ccc4 <mem_alloc.constprop.5>:
   3ccc4:	2800      	cmp	r0, #0
   3ccc6:	d050      	beq.n	3cd6a <mem_alloc.constprop.5+0xa6>
   3ccc8:	4b6d      	ldr	r3, [pc, #436]	; (3ce80 <mem_alloc.constprop.5+0x1bc>)
   3ccca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   3ccce:	4290      	cmp	r0, r2
   3ccd0:	d84b      	bhi.n	3cd6a <mem_alloc.constprop.5+0xa6>
   3ccd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ccd6:	f8d3 b08c 	ldr.w	fp, [r3, #140]	; 0x8c
   3ccda:	b083      	sub	sp, #12
   3ccdc:	f1bb 0f00 	cmp.w	fp, #0
   3cce0:	d054      	beq.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3cce2:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   3cce6:	4691      	mov	r9, r2
   3cce8:	2600      	movs	r6, #0
   3ccea:	f04f 0812 	mov.w	r8, #18
   3ccee:	4f65      	ldr	r7, [pc, #404]	; (3ce84 <mem_alloc.constprop.5+0x1c0>)
   3ccf0:	9201      	str	r2, [sp, #4]
   3ccf2:	f10b 0e11 	add.w	lr, fp, #17
   3ccf6:	eb06 0209 	add.w	r2, r6, r9
   3ccfa:	f853 4038 	ldr.w	r4, [r3, r8, lsl #3]
   3ccfe:	3201      	adds	r2, #1
   3cd00:	0852      	lsrs	r2, r2, #1
   3cd02:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
   3cd06:	f102 0112 	add.w	r1, r2, #18
   3cd0a:	f853 5031 	ldr.w	r5, [r3, r1, lsl #3]
   3cd0e:	f857 a02c 	ldr.w	sl, [r7, ip, lsl #2]
   3cd12:	f853 403e 	ldr.w	r4, [r3, lr, lsl #3]
   3cd16:	eb03 0cc8 	add.w	ip, r3, r8, lsl #3
   3cd1a:	f8dc c004 	ldr.w	ip, [ip, #4]
   3cd1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3cd22:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3cd26:	f8da a010 	ldr.w	sl, [sl, #16]
   3cd2a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
   3cd2e:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
   3cd32:	f83a a02c 	ldrh.w	sl, [sl, ip, lsl #2]
   3cd36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   3cd3a:	eb03 0cce 	add.w	ip, r3, lr, lsl #3
   3cd3e:	6849      	ldr	r1, [r1, #4]
   3cd40:	692d      	ldr	r5, [r5, #16]
   3cd42:	6924      	ldr	r4, [r4, #16]
   3cd44:	f8dc c004 	ldr.w	ip, [ip, #4]
   3cd48:	4550      	cmp	r0, sl
   3cd4a:	f835 5021 	ldrh.w	r5, [r5, r1, lsl #2]
   3cd4e:	f834 102c 	ldrh.w	r1, [r4, ip, lsl #2]
   3cd52:	d915      	bls.n	3cd80 <mem_alloc.constprop.5+0xbc>
   3cd54:	4288      	cmp	r0, r1
   3cd56:	d211      	bcs.n	3cd7c <mem_alloc.constprop.5+0xb8>
   3cd58:	42a8      	cmp	r0, r5
   3cd5a:	d908      	bls.n	3cd6e <mem_alloc.constprop.5+0xaa>
   3cd5c:	1c56      	adds	r6, r2, #1
   3cd5e:	45b1      	cmp	r9, r6
   3cd60:	f0c0 8087 	bcc.w	3ce72 <mem_alloc.constprop.5+0x1ae>
   3cd64:	f102 0813 	add.w	r8, r2, #19
   3cd68:	e7c5      	b.n	3ccf6 <mem_alloc.constprop.5+0x32>
   3cd6a:	2000      	movs	r0, #0
   3cd6c:	4770      	bx	lr
   3cd6e:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   3cd72:	454e      	cmp	r6, r9
   3cd74:	d87d      	bhi.n	3ce72 <mem_alloc.constprop.5+0x1ae>
   3cd76:	f102 0e11 	add.w	lr, r2, #17
   3cd7a:	e7bc      	b.n	3ccf6 <mem_alloc.constprop.5+0x32>
   3cd7c:	f109 0601 	add.w	r6, r9, #1
   3cd80:	45b3      	cmp	fp, r6
   3cd82:	d007      	beq.n	3cd94 <mem_alloc.constprop.5+0xd0>
   3cd84:	2e10      	cmp	r6, #16
   3cd86:	d001      	beq.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3cd88:	45b3      	cmp	fp, r6
   3cd8a:	d808      	bhi.n	3cd9e <mem_alloc.constprop.5+0xda>
   3cd8c:	2000      	movs	r0, #0
   3cd8e:	b003      	add	sp, #12
   3cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cd94:	9a01      	ldr	r2, [sp, #4]
   3cd96:	2a10      	cmp	r2, #16
   3cd98:	bf18      	it	ne
   3cd9a:	4616      	movne	r6, r2
   3cd9c:	d0f6      	beq.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3cd9e:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3ce88 <mem_alloc.constprop.5+0x1c4>
   3cda2:	eb03 08c6 	add.w	r8, r3, r6, lsl #3
   3cda6:	e9d8 2424 	ldrd	r2, r4, [r8, #144]	; 0x90
   3cdaa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3cdae:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   3cdb2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
   3cdb6:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3cdba:	691d      	ldr	r5, [r3, #16]
   3cdbc:	2c00      	cmp	r4, #0
   3cdbe:	d056      	beq.n	3ce6e <mem_alloc.constprop.5+0x1aa>
   3cdc0:	462a      	mov	r2, r5
   3cdc2:	4670      	mov	r0, lr
   3cdc4:	00a4      	lsls	r4, r4, #2
   3cdc6:	eb05 0904 	add.w	r9, r5, r4
   3cdca:	8851      	ldrh	r1, [r2, #2]
   3cdcc:	3204      	adds	r2, #4
   3cdce:	4591      	cmp	r9, r2
   3cdd0:	4408      	add	r0, r1
   3cdd2:	d1fa      	bne.n	3cdca <mem_alloc.constprop.5+0x106>
   3cdd4:	1929      	adds	r1, r5, r4
   3cdd6:	f8b1 a002 	ldrh.w	sl, [r1, #2]
   3cdda:	4482      	add	sl, r0
   3cddc:	4582      	cmp	sl, r0
   3cdde:	d918      	bls.n	3ce12 <mem_alloc.constprop.5+0x14e>
   3cde0:	0941      	lsrs	r1, r0, #5
   3cde2:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3cde6:	f000 041f 	and.w	r4, r0, #31
   3cdea:	fa22 f904 	lsr.w	r9, r2, r4
   3cdee:	f019 0f01 	tst.w	r9, #1
   3cdf2:	d007      	beq.n	3ce04 <mem_alloc.constprop.5+0x140>
   3cdf4:	e013      	b.n	3ce1e <mem_alloc.constprop.5+0x15a>
   3cdf6:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
   3cdfa:	fa22 f904 	lsr.w	r9, r2, r4
   3cdfe:	f019 0f01 	tst.w	r9, #1
   3ce02:	d10c      	bne.n	3ce1e <mem_alloc.constprop.5+0x15a>
   3ce04:	3001      	adds	r0, #1
   3ce06:	4582      	cmp	sl, r0
   3ce08:	ea4f 1150 	mov.w	r1, r0, lsr #5
   3ce0c:	f000 041f 	and.w	r4, r0, #31
   3ce10:	d1f1      	bne.n	3cdf6 <mem_alloc.constprop.5+0x132>
   3ce12:	3601      	adds	r6, #1
   3ce14:	455e      	cmp	r6, fp
   3ce16:	f108 0808 	add.w	r8, r8, #8
   3ce1a:	d3c4      	bcc.n	3cda6 <mem_alloc.constprop.5+0xe2>
   3ce1c:	e7b6      	b.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3ce1e:	2601      	movs	r6, #1
   3ce20:	fa06 f404 	lsl.w	r4, r6, r4
   3ce24:	899e      	ldrh	r6, [r3, #12]
   3ce26:	ea22 0204 	bic.w	r2, r2, r4
   3ce2a:	eba0 000e 	sub.w	r0, r0, lr
   3ce2e:	f84c 2021 	str.w	r2, [ip, r1, lsl #2]
   3ce32:	685c      	ldr	r4, [r3, #4]
   3ce34:	2e00      	cmp	r6, #0
   3ce36:	d0a9      	beq.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3ce38:	886a      	ldrh	r2, [r5, #2]
   3ce3a:	4282      	cmp	r2, r0
   3ce3c:	d811      	bhi.n	3ce62 <mem_alloc.constprop.5+0x19e>
   3ce3e:	2100      	movs	r1, #0
   3ce40:	1d2b      	adds	r3, r5, #4
   3ce42:	e003      	b.n	3ce4c <mem_alloc.constprop.5+0x188>
   3ce44:	885a      	ldrh	r2, [r3, #2]
   3ce46:	3304      	adds	r3, #4
   3ce48:	4282      	cmp	r2, r0
   3ce4a:	d80a      	bhi.n	3ce62 <mem_alloc.constprop.5+0x19e>
   3ce4c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3ce50:	3101      	adds	r1, #1
   3ce52:	428e      	cmp	r6, r1
   3ce54:	fb02 4405 	mla	r4, r2, r5, r4
   3ce58:	eba0 0002 	sub.w	r0, r0, r2
   3ce5c:	461d      	mov	r5, r3
   3ce5e:	d1f1      	bne.n	3ce44 <mem_alloc.constprop.5+0x180>
   3ce60:	e794      	b.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3ce62:	882b      	ldrh	r3, [r5, #0]
   3ce64:	fb00 4003 	mla	r0, r0, r3, r4
   3ce68:	b003      	add	sp, #12
   3ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ce6e:	4670      	mov	r0, lr
   3ce70:	e7b0      	b.n	3cdd4 <mem_alloc.constprop.5+0x110>
   3ce72:	f1bb 0f10 	cmp.w	fp, #16
   3ce76:	bf08      	it	eq
   3ce78:	260f      	moveq	r6, #15
   3ce7a:	d090      	beq.n	3cd9e <mem_alloc.constprop.5+0xda>
   3ce7c:	e786      	b.n	3cd8c <mem_alloc.constprop.5+0xc8>
   3ce7e:	bf00      	nop
   3ce80:	20025fe8 	.word	0x20025fe8
   3ce84:	20025fac 	.word	0x20025fac
   3ce88:	20025f68 	.word	0x20025f68

0003ce8c <mem_alloc.constprop.4>:
   3ce8c:	2800      	cmp	r0, #0
   3ce8e:	d04c      	beq.n	3cf2a <mem_alloc.constprop.4+0x9e>
   3ce90:	4b6b      	ldr	r3, [pc, #428]	; (3d040 <mem_alloc.constprop.4+0x1b4>)
   3ce92:	681a      	ldr	r2, [r3, #0]
   3ce94:	4290      	cmp	r0, r2
   3ce96:	d848      	bhi.n	3cf2a <mem_alloc.constprop.4+0x9e>
   3ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ce9c:	685f      	ldr	r7, [r3, #4]
   3ce9e:	b083      	sub	sp, #12
   3cea0:	9700      	str	r7, [sp, #0]
   3cea2:	2f00      	cmp	r7, #0
   3cea4:	d051      	beq.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3cea6:	1e7a      	subs	r2, r7, #1
   3cea8:	4696      	mov	lr, r2
   3ceaa:	2100      	movs	r1, #0
   3ceac:	f04f 0c01 	mov.w	ip, #1
   3ceb0:	4c64      	ldr	r4, [pc, #400]	; (3d044 <mem_alloc.constprop.4+0x1b8>)
   3ceb2:	9201      	str	r2, [sp, #4]
   3ceb4:	eb01 020e 	add.w	r2, r1, lr
   3ceb8:	3201      	adds	r2, #1
   3ceba:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
   3cebe:	0852      	lsrs	r2, r2, #1
   3cec0:	f102 0801 	add.w	r8, r2, #1
   3cec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3cec8:	f853 9037 	ldr.w	r9, [r3, r7, lsl #3]
   3cecc:	f854 a025 	ldr.w	sl, [r4, r5, lsl #2]
   3ced0:	f853 6038 	ldr.w	r6, [r3, r8, lsl #3]
   3ced4:	eb09 0549 	add.w	r5, r9, r9, lsl #1
   3ced8:	eb03 09cc 	add.w	r9, r3, ip, lsl #3
   3cedc:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3cee0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   3cee4:	f8da a010 	ldr.w	sl, [sl, #16]
   3cee8:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
   3ceec:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   3cef0:	f83a a029 	ldrh.w	sl, [sl, r9, lsl #2]
   3cef4:	eb03 0bc8 	add.w	fp, r3, r8, lsl #3
   3cef8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
   3cefc:	6936      	ldr	r6, [r6, #16]
   3cefe:	f8db b004 	ldr.w	fp, [fp, #4]
   3cf02:	692d      	ldr	r5, [r5, #16]
   3cf04:	f8d9 9004 	ldr.w	r9, [r9, #4]
   3cf08:	4550      	cmp	r0, sl
   3cf0a:	f836 602b 	ldrh.w	r6, [r6, fp, lsl #2]
   3cf0e:	f835 5029 	ldrh.w	r5, [r5, r9, lsl #2]
   3cf12:	d913      	bls.n	3cf3c <mem_alloc.constprop.4+0xb0>
   3cf14:	42a8      	cmp	r0, r5
   3cf16:	d210      	bcs.n	3cf3a <mem_alloc.constprop.4+0xae>
   3cf18:	42b0      	cmp	r0, r6
   3cf1a:	d908      	bls.n	3cf2e <mem_alloc.constprop.4+0xa2>
   3cf1c:	45c6      	cmp	lr, r8
   3cf1e:	4641      	mov	r1, r8
   3cf20:	f0c0 8087 	bcc.w	3d032 <mem_alloc.constprop.4+0x1a6>
   3cf24:	f108 0c01 	add.w	ip, r8, #1
   3cf28:	e7c4      	b.n	3ceb4 <mem_alloc.constprop.4+0x28>
   3cf2a:	2000      	movs	r0, #0
   3cf2c:	4770      	bx	lr
   3cf2e:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
   3cf32:	4571      	cmp	r1, lr
   3cf34:	d87d      	bhi.n	3d032 <mem_alloc.constprop.4+0x1a6>
   3cf36:	4617      	mov	r7, r2
   3cf38:	e7bc      	b.n	3ceb4 <mem_alloc.constprop.4+0x28>
   3cf3a:	4639      	mov	r1, r7
   3cf3c:	9a00      	ldr	r2, [sp, #0]
   3cf3e:	428a      	cmp	r2, r1
   3cf40:	d007      	beq.n	3cf52 <mem_alloc.constprop.4+0xc6>
   3cf42:	2910      	cmp	r1, #16
   3cf44:	d001      	beq.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3cf46:	428a      	cmp	r2, r1
   3cf48:	d808      	bhi.n	3cf5c <mem_alloc.constprop.4+0xd0>
   3cf4a:	2000      	movs	r0, #0
   3cf4c:	b003      	add	sp, #12
   3cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cf52:	9a01      	ldr	r2, [sp, #4]
   3cf54:	2a10      	cmp	r2, #16
   3cf56:	bf18      	it	ne
   3cf58:	4611      	movne	r1, r2
   3cf5a:	d0f6      	beq.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3cf5c:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 3d048 <mem_alloc.constprop.4+0x1bc>
   3cf60:	f8dd 9000 	ldr.w	r9, [sp]
   3cf64:	eb03 08c1 	add.w	r8, r3, r1, lsl #3
   3cf68:	e9d8 2602 	ldrd	r2, r6, [r8, #8]
   3cf6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   3cf70:	f854 3022 	ldr.w	r3, [r4, r2, lsl #2]
   3cf74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   3cf78:	f8d2 e004 	ldr.w	lr, [r2, #4]
   3cf7c:	691f      	ldr	r7, [r3, #16]
   3cf7e:	2e00      	cmp	r6, #0
   3cf80:	d055      	beq.n	3d02e <mem_alloc.constprop.4+0x1a2>
   3cf82:	463a      	mov	r2, r7
   3cf84:	4670      	mov	r0, lr
   3cf86:	00b6      	lsls	r6, r6, #2
   3cf88:	eb07 0a06 	add.w	sl, r7, r6
   3cf8c:	8855      	ldrh	r5, [r2, #2]
   3cf8e:	3204      	adds	r2, #4
   3cf90:	4592      	cmp	sl, r2
   3cf92:	4428      	add	r0, r5
   3cf94:	d1fa      	bne.n	3cf8c <mem_alloc.constprop.4+0x100>
   3cf96:	19bd      	adds	r5, r7, r6
   3cf98:	f8b5 b002 	ldrh.w	fp, [r5, #2]
   3cf9c:	4483      	add	fp, r0
   3cf9e:	4583      	cmp	fp, r0
   3cfa0:	d918      	bls.n	3cfd4 <mem_alloc.constprop.4+0x148>
   3cfa2:	0945      	lsrs	r5, r0, #5
   3cfa4:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3cfa8:	f000 061f 	and.w	r6, r0, #31
   3cfac:	fa22 fa06 	lsr.w	sl, r2, r6
   3cfb0:	f01a 0f01 	tst.w	sl, #1
   3cfb4:	d007      	beq.n	3cfc6 <mem_alloc.constprop.4+0x13a>
   3cfb6:	e013      	b.n	3cfe0 <mem_alloc.constprop.4+0x154>
   3cfb8:	f85c 2025 	ldr.w	r2, [ip, r5, lsl #2]
   3cfbc:	fa22 fa06 	lsr.w	sl, r2, r6
   3cfc0:	f01a 0f01 	tst.w	sl, #1
   3cfc4:	d10c      	bne.n	3cfe0 <mem_alloc.constprop.4+0x154>
   3cfc6:	3001      	adds	r0, #1
   3cfc8:	4583      	cmp	fp, r0
   3cfca:	ea4f 1550 	mov.w	r5, r0, lsr #5
   3cfce:	f000 061f 	and.w	r6, r0, #31
   3cfd2:	d1f1      	bne.n	3cfb8 <mem_alloc.constprop.4+0x12c>
   3cfd4:	3101      	adds	r1, #1
   3cfd6:	4549      	cmp	r1, r9
   3cfd8:	f108 0808 	add.w	r8, r8, #8
   3cfdc:	d3c4      	bcc.n	3cf68 <mem_alloc.constprop.4+0xdc>
   3cfde:	e7b4      	b.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3cfe0:	2101      	movs	r1, #1
   3cfe2:	40b1      	lsls	r1, r6
   3cfe4:	899e      	ldrh	r6, [r3, #12]
   3cfe6:	ea22 0201 	bic.w	r2, r2, r1
   3cfea:	eba0 000e 	sub.w	r0, r0, lr
   3cfee:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
   3cff2:	685c      	ldr	r4, [r3, #4]
   3cff4:	2e00      	cmp	r6, #0
   3cff6:	d0a8      	beq.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3cff8:	887a      	ldrh	r2, [r7, #2]
   3cffa:	4282      	cmp	r2, r0
   3cffc:	d811      	bhi.n	3d022 <mem_alloc.constprop.4+0x196>
   3cffe:	2100      	movs	r1, #0
   3d000:	1d3b      	adds	r3, r7, #4
   3d002:	e003      	b.n	3d00c <mem_alloc.constprop.4+0x180>
   3d004:	885a      	ldrh	r2, [r3, #2]
   3d006:	3304      	adds	r3, #4
   3d008:	4282      	cmp	r2, r0
   3d00a:	d80a      	bhi.n	3d022 <mem_alloc.constprop.4+0x196>
   3d00c:	f833 5c04 	ldrh.w	r5, [r3, #-4]
   3d010:	3101      	adds	r1, #1
   3d012:	428e      	cmp	r6, r1
   3d014:	eba0 0002 	sub.w	r0, r0, r2
   3d018:	fb02 4405 	mla	r4, r2, r5, r4
   3d01c:	461f      	mov	r7, r3
   3d01e:	d1f1      	bne.n	3d004 <mem_alloc.constprop.4+0x178>
   3d020:	e793      	b.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3d022:	883b      	ldrh	r3, [r7, #0]
   3d024:	fb00 4003 	mla	r0, r0, r3, r4
   3d028:	b003      	add	sp, #12
   3d02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d02e:	4670      	mov	r0, lr
   3d030:	e7b1      	b.n	3cf96 <mem_alloc.constprop.4+0x10a>
   3d032:	9a00      	ldr	r2, [sp, #0]
   3d034:	2a10      	cmp	r2, #16
   3d036:	bf08      	it	eq
   3d038:	210f      	moveq	r1, #15
   3d03a:	d08f      	beq.n	3cf5c <mem_alloc.constprop.4+0xd0>
   3d03c:	e785      	b.n	3cf4a <mem_alloc.constprop.4+0xbe>
   3d03e:	bf00      	nop
   3d040:	20025fe8 	.word	0x20025fe8
   3d044:	20025fac 	.word	0x20025fac
   3d048:	20025f68 	.word	0x20025f68

0003d04c <nrf_mem_init>:
   3d04c:	b570      	push	{r4, r5, r6, lr}
   3d04e:	2200      	movs	r2, #0
   3d050:	2501      	movs	r5, #1
   3d052:	4833      	ldr	r0, [pc, #204]	; (3d120 <nrf_mem_init+0xd4>)
   3d054:	0951      	lsrs	r1, r2, #5
   3d056:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3d05a:	f002 031f 	and.w	r3, r2, #31
   3d05e:	fa05 f303 	lsl.w	r3, r5, r3
   3d062:	3201      	adds	r2, #1
   3d064:	4323      	orrs	r3, r4
   3d066:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   3d06a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   3d06e:	d1f1      	bne.n	3d054 <nrf_mem_init+0x8>
   3d070:	2400      	movs	r4, #0
   3d072:	4b2c      	ldr	r3, [pc, #176]	; (3d124 <nrf_mem_init+0xd8>)
   3d074:	4621      	mov	r1, r4
   3d076:	223c      	movs	r2, #60	; 0x3c
   3d078:	482b      	ldr	r0, [pc, #172]	; (3d128 <nrf_mem_init+0xdc>)
   3d07a:	601c      	str	r4, [r3, #0]
   3d07c:	f00b f8a4 	bl	481c8 <memset>
   3d080:	2110      	movs	r1, #16
   3d082:	2205      	movs	r2, #5
   3d084:	4b29      	ldr	r3, [pc, #164]	; (3d12c <nrf_mem_init+0xe0>)
   3d086:	4e2a      	ldr	r6, [pc, #168]	; (3d130 <nrf_mem_init+0xe4>)
   3d088:	e9c3 4400 	strd	r4, r4, [r3]
   3d08c:	60d9      	str	r1, [r3, #12]
   3d08e:	6159      	str	r1, [r3, #20]
   3d090:	61d9      	str	r1, [r3, #28]
   3d092:	6259      	str	r1, [r3, #36]	; 0x24
   3d094:	62d9      	str	r1, [r3, #44]	; 0x2c
   3d096:	6359      	str	r1, [r3, #52]	; 0x34
   3d098:	63d9      	str	r1, [r3, #60]	; 0x3c
   3d09a:	6459      	str	r1, [r3, #68]	; 0x44
   3d09c:	64d9      	str	r1, [r3, #76]	; 0x4c
   3d09e:	6559      	str	r1, [r3, #84]	; 0x54
   3d0a0:	65d9      	str	r1, [r3, #92]	; 0x5c
   3d0a2:	6659      	str	r1, [r3, #100]	; 0x64
   3d0a4:	66d9      	str	r1, [r3, #108]	; 0x6c
   3d0a6:	6759      	str	r1, [r3, #116]	; 0x74
   3d0a8:	67d9      	str	r1, [r3, #124]	; 0x7c
   3d0aa:	609a      	str	r2, [r3, #8]
   3d0ac:	611a      	str	r2, [r3, #16]
   3d0ae:	619a      	str	r2, [r3, #24]
   3d0b0:	621a      	str	r2, [r3, #32]
   3d0b2:	629a      	str	r2, [r3, #40]	; 0x28
   3d0b4:	631a      	str	r2, [r3, #48]	; 0x30
   3d0b6:	639a      	str	r2, [r3, #56]	; 0x38
   3d0b8:	641a      	str	r2, [r3, #64]	; 0x40
   3d0ba:	649a      	str	r2, [r3, #72]	; 0x48
   3d0bc:	651a      	str	r2, [r3, #80]	; 0x50
   3d0be:	659a      	str	r2, [r3, #88]	; 0x58
   3d0c0:	661a      	str	r2, [r3, #96]	; 0x60
   3d0c2:	669a      	str	r2, [r3, #104]	; 0x68
   3d0c4:	671a      	str	r2, [r3, #112]	; 0x70
   3d0c6:	679a      	str	r2, [r3, #120]	; 0x78
   3d0c8:	e9c3 2120 	strd	r2, r1, [r3, #128]	; 0x80
   3d0cc:	e9c3 4422 	strd	r4, r4, [r3, #136]	; 0x88
   3d0d0:	e9c3 2124 	strd	r2, r1, [r3, #144]	; 0x90
   3d0d4:	e9c3 2126 	strd	r2, r1, [r3, #152]	; 0x98
   3d0d8:	e9c3 2128 	strd	r2, r1, [r3, #160]	; 0xa0
   3d0dc:	e9c3 212a 	strd	r2, r1, [r3, #168]	; 0xa8
   3d0e0:	e9c3 212c 	strd	r2, r1, [r3, #176]	; 0xb0
   3d0e4:	e9c3 212e 	strd	r2, r1, [r3, #184]	; 0xb8
   3d0e8:	e9c3 2130 	strd	r2, r1, [r3, #192]	; 0xc0
   3d0ec:	e9c3 2132 	strd	r2, r1, [r3, #200]	; 0xc8
   3d0f0:	e9c3 2134 	strd	r2, r1, [r3, #208]	; 0xd0
   3d0f4:	e9c3 2136 	strd	r2, r1, [r3, #216]	; 0xd8
   3d0f8:	e9c3 2138 	strd	r2, r1, [r3, #224]	; 0xe0
   3d0fc:	e9c3 213a 	strd	r2, r1, [r3, #232]	; 0xe8
   3d100:	e9c3 213c 	strd	r2, r1, [r3, #240]	; 0xf0
   3d104:	e9c3 213e 	strd	r2, r1, [r3, #248]	; 0xf8
   3d108:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   3d10c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3d110:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
   3d114:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   3d118:	4620      	mov	r0, r4
   3d11a:	7035      	strb	r5, [r6, #0]
   3d11c:	bd70      	pop	{r4, r5, r6, pc}
   3d11e:	bf00      	nop
   3d120:	20025f68 	.word	0x20025f68
   3d124:	20025fa8 	.word	0x20025fa8
   3d128:	20025fac 	.word	0x20025fac
   3d12c:	20025fe8 	.word	0x20025fe8
   3d130:	2002d1c3 	.word	0x2002d1c3

0003d134 <nrf_mem_register>:
   3d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d138:	4b87      	ldr	r3, [pc, #540]	; (3d358 <nrf_mem_register+0x224>)
   3d13a:	b087      	sub	sp, #28
   3d13c:	781b      	ldrb	r3, [r3, #0]
   3d13e:	2b00      	cmp	r3, #0
   3d140:	f000 808c 	beq.w	3d25c <nrf_mem_register+0x128>
   3d144:	b328      	cbz	r0, 3d192 <nrf_mem_register+0x5e>
   3d146:	b321      	cbz	r1, 3d192 <nrf_mem_register+0x5e>
   3d148:	780b      	ldrb	r3, [r1, #0]
   3d14a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 3d364 <nrf_mem_register+0x230>
   3d14e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   3d152:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3d156:	685b      	ldr	r3, [r3, #4]
   3d158:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   3d15c:	4463      	add	r3, ip
   3d15e:	2b10      	cmp	r3, #16
   3d160:	d811      	bhi.n	3d186 <nrf_mem_register+0x52>
   3d162:	f04f 0a00 	mov.w	sl, #0
   3d166:	4689      	mov	r9, r1
   3d168:	4b7c      	ldr	r3, [pc, #496]	; (3d35c <nrf_mem_register+0x228>)
   3d16a:	4f7d      	ldr	r7, [pc, #500]	; (3d360 <nrf_mem_register+0x22c>)
   3d16c:	681b      	ldr	r3, [r3, #0]
   3d16e:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
   3d172:	9300      	str	r3, [sp, #0]
   3d174:	68b9      	ldr	r1, [r7, #8]
   3d176:	b191      	cbz	r1, 3d19e <nrf_mem_register+0x6a>
   3d178:	f10a 0a01 	add.w	sl, sl, #1
   3d17c:	f1ba 0f05 	cmp.w	sl, #5
   3d180:	f107 070c 	add.w	r7, r7, #12
   3d184:	d1f6      	bne.n	3d174 <nrf_mem_register+0x40>
   3d186:	f248 1b07 	movw	fp, #33031	; 0x8107
   3d18a:	4658      	mov	r0, fp
   3d18c:	b007      	add	sp, #28
   3d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d192:	f248 1b0e 	movw	fp, #33038	; 0x810e
   3d196:	4658      	mov	r0, fp
   3d198:	b007      	add	sp, #28
   3d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d19e:	f1bc 0f00 	cmp.w	ip, #0
   3d1a2:	d061      	beq.n	3d268 <nrf_mem_register+0x134>
   3d1a4:	460d      	mov	r5, r1
   3d1a6:	460c      	mov	r4, r1
   3d1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   3d1ac:	eb0e 0b03 	add.w	fp, lr, r3
   3d1b0:	885a      	ldrh	r2, [r3, #2]
   3d1b2:	f833 6b04 	ldrh.w	r6, [r3], #4
   3d1b6:	4415      	add	r5, r2
   3d1b8:	459b      	cmp	fp, r3
   3d1ba:	fb02 4406 	mla	r4, r2, r6, r4
   3d1be:	d1f7      	bne.n	3d1b0 <nrf_mem_register+0x7c>
   3d1c0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   3d1c4:	42a3      	cmp	r3, r4
   3d1c6:	d3d7      	bcc.n	3d178 <nrf_mem_register+0x44>
   3d1c8:	9b00      	ldr	r3, [sp, #0]
   3d1ca:	442b      	add	r3, r5
   3d1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3d1d0:	d2d2      	bcs.n	3d178 <nrf_mem_register+0x44>
   3d1d2:	4c63      	ldr	r4, [pc, #396]	; (3d360 <nrf_mem_register+0x22c>)
   3d1d4:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
   3d1d8:	0092      	lsls	r2, r2, #2
   3d1da:	f8c0 a000 	str.w	sl, [r0]
   3d1de:	18a0      	adds	r0, r4, r2
   3d1e0:	f844 9002 	str.w	r9, [r4, r2]
   3d1e4:	9a00      	ldr	r2, [sp, #0]
   3d1e6:	468b      	mov	fp, r1
   3d1e8:	e9c0 2501 	strd	r2, r5, [r0, #4]
   3d1ec:	f899 2001 	ldrb.w	r2, [r9, #1]
   3d1f0:	485a      	ldr	r0, [pc, #360]	; (3d35c <nrf_mem_register+0x228>)
   3d1f2:	2a01      	cmp	r2, #1
   3d1f4:	6003      	str	r3, [r0, #0]
   3d1f6:	d0c8      	beq.n	3d18a <nrf_mem_register+0x56>
   3d1f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
   3d1fc:	2b00      	cmp	r3, #0
   3d1fe:	d0c4      	beq.n	3d18a <nrf_mem_register+0x56>
   3d200:	2500      	movs	r5, #0
   3d202:	f8cd 9004 	str.w	r9, [sp, #4]
   3d206:	f8cd a00c 	str.w	sl, [sp, #12]
   3d20a:	f8cd b014 	str.w	fp, [sp, #20]
   3d20e:	9b01      	ldr	r3, [sp, #4]
   3d210:	781f      	ldrb	r7, [r3, #0]
   3d212:	691a      	ldr	r2, [r3, #16]
   3d214:	013b      	lsls	r3, r7, #4
   3d216:	eb03 0907 	add.w	r9, r3, r7
   3d21a:	9300      	str	r3, [sp, #0]
   3d21c:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   3d220:	6859      	ldr	r1, [r3, #4]
   3d222:	f832 4025 	ldrh.w	r4, [r2, r5, lsl #2]
   3d226:	9102      	str	r1, [sp, #8]
   3d228:	bb39      	cbnz	r1, 3d27a <nrf_mem_register+0x146>
   3d22a:	9a03      	ldr	r2, [sp, #12]
   3d22c:	60dd      	str	r5, [r3, #12]
   3d22e:	609a      	str	r2, [r3, #8]
   3d230:	9b00      	ldr	r3, [sp, #0]
   3d232:	443b      	add	r3, r7
   3d234:	461f      	mov	r7, r3
   3d236:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   3d23a:	684b      	ldr	r3, [r1, #4]
   3d23c:	f858 2037 	ldr.w	r2, [r8, r7, lsl #3]
   3d240:	3301      	adds	r3, #1
   3d242:	4294      	cmp	r4, r2
   3d244:	604b      	str	r3, [r1, #4]
   3d246:	d912      	bls.n	3d26e <nrf_mem_register+0x13a>
   3d248:	9b01      	ldr	r3, [sp, #4]
   3d24a:	f848 4037 	str.w	r4, [r8, r7, lsl #3]
   3d24e:	899b      	ldrh	r3, [r3, #12]
   3d250:	3501      	adds	r5, #1
   3d252:	429d      	cmp	r5, r3
   3d254:	d3db      	bcc.n	3d20e <nrf_mem_register+0xda>
   3d256:	f8dd b014 	ldr.w	fp, [sp, #20]
   3d25a:	e796      	b.n	3d18a <nrf_mem_register+0x56>
   3d25c:	f248 1b08 	movw	fp, #33032	; 0x8108
   3d260:	4658      	mov	r0, fp
   3d262:	b007      	add	sp, #28
   3d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d268:	9b00      	ldr	r3, [sp, #0]
   3d26a:	4665      	mov	r5, ip
   3d26c:	e7ae      	b.n	3d1cc <nrf_mem_register+0x98>
   3d26e:	9b01      	ldr	r3, [sp, #4]
   3d270:	3501      	adds	r5, #1
   3d272:	899b      	ldrh	r3, [r3, #12]
   3d274:	42ab      	cmp	r3, r5
   3d276:	d8ca      	bhi.n	3d20e <nrf_mem_register+0xda>
   3d278:	e7ed      	b.n	3d256 <nrf_mem_register+0x122>
   3d27a:	2600      	movs	r6, #0
   3d27c:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
   3d280:	9504      	str	r5, [sp, #16]
   3d282:	eb06 000a 	add.w	r0, r6, sl
   3d286:	eb09 0206 	add.w	r2, r9, r6
   3d28a:	3201      	adds	r2, #1
   3d28c:	3001      	adds	r0, #1
   3d28e:	f858 c032 	ldr.w	ip, [r8, r2, lsl #3]
   3d292:	0840      	lsrs	r0, r0, #1
   3d294:	4d32      	ldr	r5, [pc, #200]	; (3d360 <nrf_mem_register+0x22c>)
   3d296:	eb09 0100 	add.w	r1, r9, r0
   3d29a:	eb09 030a 	add.w	r3, r9, sl
   3d29e:	3101      	adds	r1, #1
   3d2a0:	3301      	adds	r3, #1
   3d2a2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3d2a6:	f858 e031 	ldr.w	lr, [r8, r1, lsl #3]
   3d2aa:	f855 b02c 	ldr.w	fp, [r5, ip, lsl #2]
   3d2ae:	f858 c033 	ldr.w	ip, [r8, r3, lsl #3]
   3d2b2:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
   3d2b6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   3d2ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   3d2be:	f8db b010 	ldr.w	fp, [fp, #16]
   3d2c2:	6852      	ldr	r2, [r2, #4]
   3d2c4:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
   3d2c8:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
   3d2cc:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
   3d2d0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3d2d4:	f83b 2022 	ldrh.w	r2, [fp, r2, lsl #2]
   3d2d8:	f8de e010 	ldr.w	lr, [lr, #16]
   3d2dc:	6849      	ldr	r1, [r1, #4]
   3d2de:	f8dc c010 	ldr.w	ip, [ip, #16]
   3d2e2:	685b      	ldr	r3, [r3, #4]
   3d2e4:	4294      	cmp	r4, r2
   3d2e6:	f83e 1021 	ldrh.w	r1, [lr, r1, lsl #2]
   3d2ea:	f83c 3023 	ldrh.w	r3, [ip, r3, lsl #2]
   3d2ee:	d92d      	bls.n	3d34c <nrf_mem_register+0x218>
   3d2f0:	429c      	cmp	r4, r3
   3d2f2:	d22d      	bcs.n	3d350 <nrf_mem_register+0x21c>
   3d2f4:	428c      	cmp	r4, r1
   3d2f6:	d924      	bls.n	3d342 <nrf_mem_register+0x20e>
   3d2f8:	1c46      	adds	r6, r0, #1
   3d2fa:	45b2      	cmp	sl, r6
   3d2fc:	d2c1      	bcs.n	3d282 <nrf_mem_register+0x14e>
   3d2fe:	2610      	movs	r6, #16
   3d300:	9d04      	ldr	r5, [sp, #16]
   3d302:	9a02      	ldr	r2, [sp, #8]
   3d304:	42b2      	cmp	r2, r6
   3d306:	d911      	bls.n	3d32c <nrf_mem_register+0x1f8>
   3d308:	9b00      	ldr	r3, [sp, #0]
   3d30a:	443b      	add	r3, r7
   3d30c:	441a      	add	r2, r3
   3d30e:	4433      	add	r3, r6
   3d310:	eb08 0ac2 	add.w	sl, r8, r2, lsl #3
   3d314:	eb08 09c3 	add.w	r9, r8, r3, lsl #3
   3d318:	2208      	movs	r2, #8
   3d31a:	4651      	mov	r1, sl
   3d31c:	eb0a 0002 	add.w	r0, sl, r2
   3d320:	f1aa 0a08 	sub.w	sl, sl, #8
   3d324:	f00a ff30 	bl	48188 <memcpy>
   3d328:	45d1      	cmp	r9, sl
   3d32a:	d1f5      	bne.n	3d318 <nrf_mem_register+0x1e4>
   3d32c:	9b00      	ldr	r3, [sp, #0]
   3d32e:	9903      	ldr	r1, [sp, #12]
   3d330:	443b      	add	r3, r7
   3d332:	4433      	add	r3, r6
   3d334:	3301      	adds	r3, #1
   3d336:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   3d33a:	f848 1033 	str.w	r1, [r8, r3, lsl #3]
   3d33e:	6055      	str	r5, [r2, #4]
   3d340:	e776      	b.n	3d230 <nrf_mem_register+0xfc>
   3d342:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   3d346:	4556      	cmp	r6, sl
   3d348:	d99b      	bls.n	3d282 <nrf_mem_register+0x14e>
   3d34a:	e7d8      	b.n	3d2fe <nrf_mem_register+0x1ca>
   3d34c:	9d04      	ldr	r5, [sp, #16]
   3d34e:	e7d8      	b.n	3d302 <nrf_mem_register+0x1ce>
   3d350:	9d04      	ldr	r5, [sp, #16]
   3d352:	f10a 0601 	add.w	r6, sl, #1
   3d356:	e7d4      	b.n	3d302 <nrf_mem_register+0x1ce>
   3d358:	2002d1c3 	.word	0x2002d1c3
   3d35c:	20025fa8 	.word	0x20025fa8
   3d360:	20025fac 	.word	0x20025fac
   3d364:	20025fe8 	.word	0x20025fe8

0003d368 <nrf_malloc>:
   3d368:	4b03      	ldr	r3, [pc, #12]	; (3d378 <nrf_malloc+0x10>)
   3d36a:	781b      	ldrb	r3, [r3, #0]
   3d36c:	b10b      	cbz	r3, 3d372 <nrf_malloc+0xa>
   3d36e:	f7ff bd8d 	b.w	3ce8c <mem_alloc.constprop.4>
   3d372:	4618      	mov	r0, r3
   3d374:	4770      	bx	lr
   3d376:	bf00      	nop
   3d378:	2002d1c3 	.word	0x2002d1c3

0003d37c <nrf_free>:
   3d37c:	4b04      	ldr	r3, [pc, #16]	; (3d390 <nrf_free+0x14>)
   3d37e:	781b      	ldrb	r3, [r3, #0]
   3d380:	b123      	cbz	r3, 3d38c <nrf_free+0x10>
   3d382:	b118      	cbz	r0, 3d38c <nrf_free+0x10>
   3d384:	4601      	mov	r1, r0
   3d386:	2000      	movs	r0, #0
   3d388:	f7ff bc30 	b.w	3cbec <mem_free>
   3d38c:	4770      	bx	lr
   3d38e:	bf00      	nop
   3d390:	2002d1c3 	.word	0x2002d1c3

0003d394 <nrf_realloc>:
   3d394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d398:	4b52      	ldr	r3, [pc, #328]	; (3d4e4 <nrf_realloc+0x150>)
   3d39a:	b087      	sub	sp, #28
   3d39c:	781b      	ldrb	r3, [r3, #0]
   3d39e:	b173      	cbz	r3, 3d3be <nrf_realloc+0x2a>
   3d3a0:	b168      	cbz	r0, 3d3be <nrf_realloc+0x2a>
   3d3a2:	e9cd 0101 	strd	r0, r1, [sp, #4]
   3d3a6:	f8df a148 	ldr.w	sl, [pc, #328]	; 3d4f0 <nrf_realloc+0x15c>
   3d3aa:	f8da 3000 	ldr.w	r3, [sl]
   3d3ae:	b10b      	cbz	r3, 3d3b4 <nrf_realloc+0x20>
   3d3b0:	781a      	ldrb	r2, [r3, #0]
   3d3b2:	b14a      	cbz	r2, 3d3c8 <nrf_realloc+0x34>
   3d3b4:	4b4c      	ldr	r3, [pc, #304]	; (3d4e8 <nrf_realloc+0x154>)
   3d3b6:	f10a 0a0c 	add.w	sl, sl, #12
   3d3ba:	4553      	cmp	r3, sl
   3d3bc:	d1f5      	bne.n	3d3aa <nrf_realloc+0x16>
   3d3be:	2400      	movs	r4, #0
   3d3c0:	4620      	mov	r0, r4
   3d3c2:	b007      	add	sp, #28
   3d3c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d3c8:	e9da 9201 	ldrd	r9, r2, [sl, #4]
   3d3cc:	444a      	add	r2, r9
   3d3ce:	4591      	cmp	r9, r2
   3d3d0:	9200      	str	r2, [sp, #0]
   3d3d2:	d2ef      	bcs.n	3d3b4 <nrf_realloc+0x20>
   3d3d4:	685a      	ldr	r2, [r3, #4]
   3d3d6:	f8cd a00c 	str.w	sl, [sp, #12]
   3d3da:	46cb      	mov	fp, r9
   3d3dc:	4692      	mov	sl, r2
   3d3de:	f8d3 8010 	ldr.w	r8, [r3, #16]
   3d3e2:	899f      	ldrh	r7, [r3, #12]
   3d3e4:	ebab 0e09 	sub.w	lr, fp, r9
   3d3e8:	b1d7      	cbz	r7, 3d420 <nrf_realloc+0x8c>
   3d3ea:	f8b8 c002 	ldrh.w	ip, [r8, #2]
   3d3ee:	45e6      	cmp	lr, ip
   3d3f0:	4662      	mov	r2, ip
   3d3f2:	d31d      	bcc.n	3d430 <nrf_realloc+0x9c>
   3d3f4:	4654      	mov	r4, sl
   3d3f6:	4671      	mov	r1, lr
   3d3f8:	4665      	mov	r5, ip
   3d3fa:	2000      	movs	r0, #0
   3d3fc:	f108 0304 	add.w	r3, r8, #4
   3d400:	e004      	b.n	3d40c <nrf_realloc+0x78>
   3d402:	885a      	ldrh	r2, [r3, #2]
   3d404:	3304      	adds	r3, #4
   3d406:	428a      	cmp	r2, r1
   3d408:	4615      	mov	r5, r2
   3d40a:	d814      	bhi.n	3d436 <nrf_realloc+0xa2>
   3d40c:	f833 6c04 	ldrh.w	r6, [r3, #-4]
   3d410:	3001      	adds	r0, #1
   3d412:	4287      	cmp	r7, r0
   3d414:	fb02 4406 	mla	r4, r2, r6, r4
   3d418:	eba1 0105 	sub.w	r1, r1, r5
   3d41c:	461e      	mov	r6, r3
   3d41e:	d1f0      	bne.n	3d402 <nrf_realloc+0x6e>
   3d420:	9b00      	ldr	r3, [sp, #0]
   3d422:	f10b 0b01 	add.w	fp, fp, #1
   3d426:	455b      	cmp	r3, fp
   3d428:	d1dc      	bne.n	3d3e4 <nrf_realloc+0x50>
   3d42a:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3d42e:	e7c1      	b.n	3d3b4 <nrf_realloc+0x20>
   3d430:	4654      	mov	r4, sl
   3d432:	4671      	mov	r1, lr
   3d434:	4646      	mov	r6, r8
   3d436:	8833      	ldrh	r3, [r6, #0]
   3d438:	fb01 4103 	mla	r1, r1, r3, r4
   3d43c:	9b01      	ldr	r3, [sp, #4]
   3d43e:	428b      	cmp	r3, r1
   3d440:	d1ee      	bne.n	3d420 <nrf_realloc+0x8c>
   3d442:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
   3d446:	f8dd a00c 	ldr.w	sl, [sp, #12]
   3d44a:	d0b3      	beq.n	3d3b4 <nrf_realloc+0x20>
   3d44c:	45e6      	cmp	lr, ip
   3d44e:	d334      	bcc.n	3d4ba <nrf_realloc+0x126>
   3d450:	2200      	movs	r2, #0
   3d452:	f108 0304 	add.w	r3, r8, #4
   3d456:	e006      	b.n	3d466 <nrf_realloc+0xd2>
   3d458:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   3d45c:	4698      	mov	r8, r3
   3d45e:	45f4      	cmp	ip, lr
   3d460:	f103 0304 	add.w	r3, r3, #4
   3d464:	d829      	bhi.n	3d4ba <nrf_realloc+0x126>
   3d466:	3201      	adds	r2, #1
   3d468:	42ba      	cmp	r2, r7
   3d46a:	ebae 0e0c 	sub.w	lr, lr, ip
   3d46e:	d1f3      	bne.n	3d458 <nrf_realloc+0xc4>
   3d470:	2300      	movs	r3, #0
   3d472:	9a02      	ldr	r2, [sp, #8]
   3d474:	429a      	cmp	r2, r3
   3d476:	d923      	bls.n	3d4c0 <nrf_realloc+0x12c>
   3d478:	4610      	mov	r0, r2
   3d47a:	f7ff fd07 	bl	3ce8c <mem_alloc.constprop.4>
   3d47e:	4604      	mov	r4, r0
   3d480:	2800      	cmp	r0, #0
   3d482:	d097      	beq.n	3d3b4 <nrf_realloc+0x20>
   3d484:	e9dd 1501 	ldrd	r1, r5, [sp, #4]
   3d488:	462a      	mov	r2, r5
   3d48a:	f00a fe7d 	bl	48188 <memcpy>
   3d48e:	462b      	mov	r3, r5
   3d490:	2201      	movs	r2, #1
   3d492:	3303      	adds	r3, #3
   3d494:	4915      	ldr	r1, [pc, #84]	; (3d4ec <nrf_realloc+0x158>)
   3d496:	4423      	add	r3, r4
   3d498:	f023 0303 	bic.w	r3, r3, #3
   3d49c:	ea4f 105b 	mov.w	r0, fp, lsr #5
   3d4a0:	681e      	ldr	r6, [r3, #0]
   3d4a2:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
   3d4a6:	f00b 031f 	and.w	r3, fp, #31
   3d4aa:	fa02 f303 	lsl.w	r3, r2, r3
   3d4ae:	9605      	str	r6, [sp, #20]
   3d4b0:	432b      	orrs	r3, r5
   3d4b2:	9a05      	ldr	r2, [sp, #20]
   3d4b4:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   3d4b8:	e782      	b.n	3d3c0 <nrf_realloc+0x2c>
   3d4ba:	f8b8 3000 	ldrh.w	r3, [r8]
   3d4be:	e7d8      	b.n	3d472 <nrf_realloc+0xde>
   3d4c0:	4615      	mov	r5, r2
   3d4c2:	b96a      	cbnz	r2, 3d4e0 <nrf_realloc+0x14c>
   3d4c4:	2301      	movs	r3, #1
   3d4c6:	4a09      	ldr	r2, [pc, #36]	; (3d4ec <nrf_realloc+0x158>)
   3d4c8:	ea4f 115b 	mov.w	r1, fp, lsr #5
   3d4cc:	f00b 041f 	and.w	r4, fp, #31
   3d4d0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   3d4d4:	40a3      	lsls	r3, r4
   3d4d6:	4303      	orrs	r3, r0
   3d4d8:	462c      	mov	r4, r5
   3d4da:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
   3d4de:	e76f      	b.n	3d3c0 <nrf_realloc+0x2c>
   3d4e0:	9c01      	ldr	r4, [sp, #4]
   3d4e2:	e76d      	b.n	3d3c0 <nrf_realloc+0x2c>
   3d4e4:	2002d1c3 	.word	0x2002d1c3
   3d4e8:	20025fe8 	.word	0x20025fe8
   3d4ec:	20025f68 	.word	0x20025f68
   3d4f0:	20025fac 	.word	0x20025fac

0003d4f4 <nrf_shared_malloc>:
   3d4f4:	4b03      	ldr	r3, [pc, #12]	; (3d504 <nrf_shared_malloc+0x10>)
   3d4f6:	781b      	ldrb	r3, [r3, #0]
   3d4f8:	b10b      	cbz	r3, 3d4fe <nrf_shared_malloc+0xa>
   3d4fa:	f7ff bbe3 	b.w	3ccc4 <mem_alloc.constprop.5>
   3d4fe:	4618      	mov	r0, r3
   3d500:	4770      	bx	lr
   3d502:	bf00      	nop
   3d504:	2002d1c3 	.word	0x2002d1c3

0003d508 <nrf_shared_free>:
   3d508:	4b04      	ldr	r3, [pc, #16]	; (3d51c <nrf_shared_free+0x14>)
   3d50a:	781b      	ldrb	r3, [r3, #0]
   3d50c:	b123      	cbz	r3, 3d518 <nrf_shared_free+0x10>
   3d50e:	b118      	cbz	r0, 3d518 <nrf_shared_free+0x10>
   3d510:	4601      	mov	r1, r0
   3d512:	2001      	movs	r0, #1
   3d514:	f7ff bb6a 	b.w	3cbec <mem_free>
   3d518:	4770      	bx	lr
   3d51a:	bf00      	nop
   3d51c:	2002d1c3 	.word	0x2002d1c3

0003d520 <rpc_dfu_event_handler>:
   3d520:	b508      	push	{r3, lr}
   3d522:	4a08      	ldr	r2, [pc, #32]	; (3d544 <rpc_dfu_event_handler+0x24>)
   3d524:	68c1      	ldr	r1, [r0, #12]
   3d526:	8812      	ldrh	r2, [r2, #0]
   3d528:	4603      	mov	r3, r0
   3d52a:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   3d52e:	d005      	beq.n	3d53c <rpc_dfu_event_handler+0x1c>
   3d530:	6800      	ldr	r0, [r0, #0]
   3d532:	b110      	cbz	r0, 3d53a <rpc_dfu_event_handler+0x1a>
   3d534:	f7fd f848 	bl	3a5c8 <rpc_dfu_client_data_free>
   3d538:	2000      	movs	r0, #0
   3d53a:	bd08      	pop	{r3, pc}
   3d53c:	4a02      	ldr	r2, [pc, #8]	; (3d548 <rpc_dfu_event_handler+0x28>)
   3d53e:	2001      	movs	r0, #1
   3d540:	6013      	str	r3, [r2, #0]
   3d542:	bd08      	pop	{r3, pc}
   3d544:	2002a9c4 	.word	0x2002a9c4
   3d548:	20026104 	.word	0x20026104

0003d54c <mfu_interface_init>:
   3d54c:	2300      	movs	r3, #0
   3d54e:	b510      	push	{r4, lr}
   3d550:	4808      	ldr	r0, [pc, #32]	; (3d574 <mfu_interface_init+0x28>)
   3d552:	4909      	ldr	r1, [pc, #36]	; (3d578 <mfu_interface_init+0x2c>)
   3d554:	4a09      	ldr	r2, [pc, #36]	; (3d57c <mfu_interface_init+0x30>)
   3d556:	4c0a      	ldr	r4, [pc, #40]	; (3d580 <mfu_interface_init+0x34>)
   3d558:	8003      	strh	r3, [r0, #0]
   3d55a:	600b      	str	r3, [r1, #0]
   3d55c:	6013      	str	r3, [r2, #0]
   3d55e:	6023      	str	r3, [r4, #0]
   3d560:	f7fc fff8 	bl	3a554 <rpc_dfu_client_init>
   3d564:	b910      	cbnz	r0, 3d56c <mfu_interface_init+0x20>
   3d566:	2301      	movs	r3, #1
   3d568:	6023      	str	r3, [r4, #0]
   3d56a:	bd10      	pop	{r4, pc}
   3d56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d570:	bd10      	pop	{r4, pc}
   3d572:	bf00      	nop
   3d574:	2002a9c4 	.word	0x2002a9c4
   3d578:	20026104 	.word	0x20026104
   3d57c:	20026100 	.word	0x20026100
   3d580:	200260f8 	.word	0x200260f8

0003d584 <mfu_interface_deinit>:
   3d584:	b510      	push	{r4, lr}
   3d586:	4c06      	ldr	r4, [pc, #24]	; (3d5a0 <mfu_interface_deinit+0x1c>)
   3d588:	6820      	ldr	r0, [r4, #0]
   3d58a:	b900      	cbnz	r0, 3d58e <mfu_interface_deinit+0xa>
   3d58c:	bd10      	pop	{r4, pc}
   3d58e:	f7fc ffe7 	bl	3a560 <rpc_dfu_client_deinit>
   3d592:	b908      	cbnz	r0, 3d598 <mfu_interface_deinit+0x14>
   3d594:	6020      	str	r0, [r4, #0]
   3d596:	bd10      	pop	{r4, pc}
   3d598:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d59c:	bd10      	pop	{r4, pc}
   3d59e:	bf00      	nop
   3d5a0:	200260f8 	.word	0x200260f8

0003d5a4 <mfu_interface_open>:
   3d5a4:	b508      	push	{r3, lr}
   3d5a6:	4b07      	ldr	r3, [pc, #28]	; (3d5c4 <mfu_interface_open+0x20>)
   3d5a8:	681a      	ldr	r2, [r3, #0]
   3d5aa:	2a01      	cmp	r2, #1
   3d5ac:	d103      	bne.n	3d5b6 <mfu_interface_open+0x12>
   3d5ae:	2202      	movs	r2, #2
   3d5b0:	601a      	str	r2, [r3, #0]
   3d5b2:	4805      	ldr	r0, [pc, #20]	; (3d5c8 <mfu_interface_open+0x24>)
   3d5b4:	bd08      	pop	{r3, pc}
   3d5b6:	2001      	movs	r0, #1
   3d5b8:	f7ed ffc6 	bl	2b548 <bsd_os_errno_set>
   3d5bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d5c0:	bd08      	pop	{r3, pc}
   3d5c2:	bf00      	nop
   3d5c4:	200260f8 	.word	0x200260f8
   3d5c8:	49765432 	.word	0x49765432

0003d5cc <mfu_interface_close>:
   3d5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d5ce:	4c32      	ldr	r4, [pc, #200]	; (3d698 <mfu_interface_close+0xcc>)
   3d5d0:	b083      	sub	sp, #12
   3d5d2:	6823      	ldr	r3, [r4, #0]
   3d5d4:	1e9a      	subs	r2, r3, #2
   3d5d6:	2a01      	cmp	r2, #1
   3d5d8:	d857      	bhi.n	3d68a <mfu_interface_close+0xbe>
   3d5da:	2b03      	cmp	r3, #3
   3d5dc:	d004      	beq.n	3d5e8 <mfu_interface_close+0x1c>
   3d5de:	2301      	movs	r3, #1
   3d5e0:	2000      	movs	r0, #0
   3d5e2:	6023      	str	r3, [r4, #0]
   3d5e4:	b003      	add	sp, #12
   3d5e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d5e8:	2100      	movs	r1, #0
   3d5ea:	4668      	mov	r0, sp
   3d5ec:	f7fc ffbc 	bl	3a568 <rpc_dfu_client_request_alloc>
   3d5f0:	4603      	mov	r3, r0
   3d5f2:	2800      	cmp	r0, #0
   3d5f4:	d13d      	bne.n	3d672 <mfu_interface_close+0xa6>
   3d5f6:	2104      	movs	r1, #4
   3d5f8:	4e28      	ldr	r6, [pc, #160]	; (3d69c <mfu_interface_close+0xd0>)
   3d5fa:	9800      	ldr	r0, [sp, #0]
   3d5fc:	8832      	ldrh	r2, [r6, #0]
   3d5fe:	7201      	strb	r1, [r0, #8]
   3d600:	3201      	adds	r2, #1
   3d602:	b292      	uxth	r2, r2
   3d604:	0411      	lsls	r1, r2, #16
   3d606:	f041 0106 	orr.w	r1, r1, #6
   3d60a:	4d25      	ldr	r5, [pc, #148]	; (3d6a0 <mfu_interface_close+0xd4>)
   3d60c:	60c1      	str	r1, [r0, #12]
   3d60e:	7103      	strb	r3, [r0, #4]
   3d610:	7143      	strb	r3, [r0, #5]
   3d612:	7183      	strb	r3, [r0, #6]
   3d614:	71c3      	strb	r3, [r0, #7]
   3d616:	7243      	strb	r3, [r0, #9]
   3d618:	7283      	strb	r3, [r0, #10]
   3d61a:	72c3      	strb	r3, [r0, #11]
   3d61c:	2106      	movs	r1, #6
   3d61e:	8032      	strh	r2, [r6, #0]
   3d620:	602b      	str	r3, [r5, #0]
   3d622:	f7fc ffb5 	bl	3a590 <rpc_dfu_client_request_send>
   3d626:	b9d8      	cbnz	r0, 3d660 <mfu_interface_close+0x94>
   3d628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d62c:	ae02      	add	r6, sp, #8
   3d62e:	4627      	mov	r7, r4
   3d630:	f846 3d04 	str.w	r3, [r6, #-4]!
   3d634:	e004      	b.n	3d640 <mfu_interface_close+0x74>
   3d636:	4631      	mov	r1, r6
   3d638:	4638      	mov	r0, r7
   3d63a:	f7ed fec5 	bl	2b3c8 <bsd_os_timedwait>
   3d63e:	b9f0      	cbnz	r0, 3d67e <mfu_interface_close+0xb2>
   3d640:	6828      	ldr	r0, [r5, #0]
   3d642:	2800      	cmp	r0, #0
   3d644:	d0f7      	beq.n	3d636 <mfu_interface_close+0x6a>
   3d646:	6905      	ldr	r5, [r0, #16]
   3d648:	f7fc ffb6 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d64c:	2d00      	cmp	r5, #0
   3d64e:	d0c6      	beq.n	3d5de <mfu_interface_close+0x12>
   3d650:	4b14      	ldr	r3, [pc, #80]	; (3d6a4 <mfu_interface_close+0xd8>)
   3d652:	2008      	movs	r0, #8
   3d654:	601d      	str	r5, [r3, #0]
   3d656:	f7ed ff77 	bl	2b548 <bsd_os_errno_set>
   3d65a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d65e:	e7c1      	b.n	3d5e4 <mfu_interface_close+0x18>
   3d660:	9800      	ldr	r0, [sp, #0]
   3d662:	6803      	ldr	r3, [r0, #0]
   3d664:	b11b      	cbz	r3, 3d66e <mfu_interface_close+0xa2>
   3d666:	4618      	mov	r0, r3
   3d668:	f7fc ffae 	bl	3a5c8 <rpc_dfu_client_data_free>
   3d66c:	9800      	ldr	r0, [sp, #0]
   3d66e:	f7fc ffa3 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d672:	200c      	movs	r0, #12
   3d674:	f7ed ff68 	bl	2b548 <bsd_os_errno_set>
   3d678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d67c:	e7b2      	b.n	3d5e4 <mfu_interface_close+0x18>
   3d67e:	203c      	movs	r0, #60	; 0x3c
   3d680:	f7ed ff62 	bl	2b548 <bsd_os_errno_set>
   3d684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d688:	e7ac      	b.n	3d5e4 <mfu_interface_close+0x18>
   3d68a:	2001      	movs	r0, #1
   3d68c:	f7ed ff5c 	bl	2b548 <bsd_os_errno_set>
   3d690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d694:	e7a6      	b.n	3d5e4 <mfu_interface_close+0x18>
   3d696:	bf00      	nop
   3d698:	200260f8 	.word	0x200260f8
   3d69c:	2002a9c4 	.word	0x2002a9c4
   3d6a0:	20026104 	.word	0x20026104
   3d6a4:	200260fc 	.word	0x200260fc

0003d6a8 <mfu_interface_sendto>:
   3d6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d6ac:	4e64      	ldr	r6, [pc, #400]	; (3d840 <mfu_interface_sendto+0x198>)
   3d6ae:	460f      	mov	r7, r1
   3d6b0:	6831      	ldr	r1, [r6, #0]
   3d6b2:	4615      	mov	r5, r2
   3d6b4:	1e8a      	subs	r2, r1, #2
   3d6b6:	2a01      	cmp	r2, #1
   3d6b8:	b082      	sub	sp, #8
   3d6ba:	f200 80b4 	bhi.w	3d826 <mfu_interface_sendto+0x17e>
   3d6be:	2f00      	cmp	r7, #0
   3d6c0:	f000 80a5 	beq.w	3d80e <mfu_interface_sendto+0x166>
   3d6c4:	2d00      	cmp	r5, #0
   3d6c6:	f000 80a2 	beq.w	3d80e <mfu_interface_sendto+0x166>
   3d6ca:	2b00      	cmp	r3, #0
   3d6cc:	f040 80b1 	bne.w	3d832 <mfu_interface_sendto+0x18a>
   3d6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3d6d2:	2b00      	cmp	r3, #0
   3d6d4:	f040 80a1 	bne.w	3d81a <mfu_interface_sendto+0x172>
   3d6d8:	2902      	cmp	r1, #2
   3d6da:	d04f      	beq.n	3d77c <mfu_interface_sendto+0xd4>
   3d6dc:	46e8      	mov	r8, sp
   3d6de:	4640      	mov	r0, r8
   3d6e0:	4629      	mov	r1, r5
   3d6e2:	f7fc ff41 	bl	3a568 <rpc_dfu_client_request_alloc>
   3d6e6:	4606      	mov	r6, r0
   3d6e8:	b140      	cbz	r0, 3d6fc <mfu_interface_sendto+0x54>
   3d6ea:	200c      	movs	r0, #12
   3d6ec:	f7ed ff2c 	bl	2b548 <bsd_os_errno_set>
   3d6f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d6f4:	4628      	mov	r0, r5
   3d6f6:	b002      	add	sp, #8
   3d6f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3d6fc:	9b00      	ldr	r3, [sp, #0]
   3d6fe:	4639      	mov	r1, r7
   3d700:	6818      	ldr	r0, [r3, #0]
   3d702:	462a      	mov	r2, r5
   3d704:	f00a fd40 	bl	48188 <memcpy>
   3d708:	2104      	movs	r1, #4
   3d70a:	4c4e      	ldr	r4, [pc, #312]	; (3d844 <mfu_interface_sendto+0x19c>)
   3d70c:	9800      	ldr	r0, [sp, #0]
   3d70e:	8823      	ldrh	r3, [r4, #0]
   3d710:	6045      	str	r5, [r0, #4]
   3d712:	3301      	adds	r3, #1
   3d714:	b29b      	uxth	r3, r3
   3d716:	041a      	lsls	r2, r3, #16
   3d718:	8023      	strh	r3, [r4, #0]
   3d71a:	430a      	orrs	r2, r1
   3d71c:	4c4a      	ldr	r4, [pc, #296]	; (3d848 <mfu_interface_sendto+0x1a0>)
   3d71e:	60c2      	str	r2, [r0, #12]
   3d720:	7246      	strb	r6, [r0, #9]
   3d722:	7286      	strb	r6, [r0, #10]
   3d724:	72c6      	strb	r6, [r0, #11]
   3d726:	7201      	strb	r1, [r0, #8]
   3d728:	6026      	str	r6, [r4, #0]
   3d72a:	f7fc ff31 	bl	3a590 <rpc_dfu_client_request_send>
   3d72e:	2800      	cmp	r0, #0
   3d730:	d163      	bne.n	3d7fa <mfu_interface_sendto+0x152>
   3d732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d736:	ae02      	add	r6, sp, #8
   3d738:	4f41      	ldr	r7, [pc, #260]	; (3d840 <mfu_interface_sendto+0x198>)
   3d73a:	f846 3d04 	str.w	r3, [r6, #-4]!
   3d73e:	e004      	b.n	3d74a <mfu_interface_sendto+0xa2>
   3d740:	4631      	mov	r1, r6
   3d742:	4638      	mov	r0, r7
   3d744:	f7ed fe40 	bl	2b3c8 <bsd_os_timedwait>
   3d748:	b978      	cbnz	r0, 3d76a <mfu_interface_sendto+0xc2>
   3d74a:	6820      	ldr	r0, [r4, #0]
   3d74c:	2800      	cmp	r0, #0
   3d74e:	d0f7      	beq.n	3d740 <mfu_interface_sendto+0x98>
   3d750:	6904      	ldr	r4, [r0, #16]
   3d752:	f7fc ff31 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d756:	2c00      	cmp	r4, #0
   3d758:	d0cc      	beq.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d75a:	4b3c      	ldr	r3, [pc, #240]	; (3d84c <mfu_interface_sendto+0x1a4>)
   3d75c:	2008      	movs	r0, #8
   3d75e:	601c      	str	r4, [r3, #0]
   3d760:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d764:	f7ed fef0 	bl	2b548 <bsd_os_errno_set>
   3d768:	e7c4      	b.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d76a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d76e:	203c      	movs	r0, #60	; 0x3c
   3d770:	f7ed feea 	bl	2b548 <bsd_os_errno_set>
   3d774:	4628      	mov	r0, r5
   3d776:	b002      	add	sp, #8
   3d778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3d77c:	46e8      	mov	r8, sp
   3d77e:	4619      	mov	r1, r3
   3d780:	4640      	mov	r0, r8
   3d782:	f7fc fef1 	bl	3a568 <rpc_dfu_client_request_alloc>
   3d786:	4602      	mov	r2, r0
   3d788:	2800      	cmp	r0, #0
   3d78a:	d1ae      	bne.n	3d6ea <mfu_interface_sendto+0x42>
   3d78c:	f04f 0c08 	mov.w	ip, #8
   3d790:	492c      	ldr	r1, [pc, #176]	; (3d844 <mfu_interface_sendto+0x19c>)
   3d792:	482f      	ldr	r0, [pc, #188]	; (3d850 <mfu_interface_sendto+0x1a8>)
   3d794:	880b      	ldrh	r3, [r1, #0]
   3d796:	6804      	ldr	r4, [r0, #0]
   3d798:	3301      	adds	r3, #1
   3d79a:	9800      	ldr	r0, [sp, #0]
   3d79c:	b29b      	uxth	r3, r3
   3d79e:	800b      	strh	r3, [r1, #0]
   3d7a0:	041b      	lsls	r3, r3, #16
   3d7a2:	f043 0303 	orr.w	r3, r3, #3
   3d7a6:	6104      	str	r4, [r0, #16]
   3d7a8:	4c27      	ldr	r4, [pc, #156]	; (3d848 <mfu_interface_sendto+0x1a0>)
   3d7aa:	60c3      	str	r3, [r0, #12]
   3d7ac:	7102      	strb	r2, [r0, #4]
   3d7ae:	7142      	strb	r2, [r0, #5]
   3d7b0:	7182      	strb	r2, [r0, #6]
   3d7b2:	71c2      	strb	r2, [r0, #7]
   3d7b4:	7242      	strb	r2, [r0, #9]
   3d7b6:	7282      	strb	r2, [r0, #10]
   3d7b8:	72c2      	strb	r2, [r0, #11]
   3d7ba:	f880 c008 	strb.w	ip, [r0, #8]
   3d7be:	2103      	movs	r1, #3
   3d7c0:	6022      	str	r2, [r4, #0]
   3d7c2:	f7fc fee5 	bl	3a590 <rpc_dfu_client_request_send>
   3d7c6:	b9c0      	cbnz	r0, 3d7fa <mfu_interface_sendto+0x152>
   3d7c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7cc:	f10d 0908 	add.w	r9, sp, #8
   3d7d0:	f849 3d04 	str.w	r3, [r9, #-4]!
   3d7d4:	46b2      	mov	sl, r6
   3d7d6:	e005      	b.n	3d7e4 <mfu_interface_sendto+0x13c>
   3d7d8:	4649      	mov	r1, r9
   3d7da:	4650      	mov	r0, sl
   3d7dc:	f7ed fdf4 	bl	2b3c8 <bsd_os_timedwait>
   3d7e0:	2800      	cmp	r0, #0
   3d7e2:	d1c2      	bne.n	3d76a <mfu_interface_sendto+0xc2>
   3d7e4:	6820      	ldr	r0, [r4, #0]
   3d7e6:	2800      	cmp	r0, #0
   3d7e8:	d0f6      	beq.n	3d7d8 <mfu_interface_sendto+0x130>
   3d7ea:	6904      	ldr	r4, [r0, #16]
   3d7ec:	f7fc fee4 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d7f0:	2c00      	cmp	r4, #0
   3d7f2:	d1b2      	bne.n	3d75a <mfu_interface_sendto+0xb2>
   3d7f4:	2303      	movs	r3, #3
   3d7f6:	6033      	str	r3, [r6, #0]
   3d7f8:	e771      	b.n	3d6de <mfu_interface_sendto+0x36>
   3d7fa:	9800      	ldr	r0, [sp, #0]
   3d7fc:	6803      	ldr	r3, [r0, #0]
   3d7fe:	b11b      	cbz	r3, 3d808 <mfu_interface_sendto+0x160>
   3d800:	4618      	mov	r0, r3
   3d802:	f7fc fee1 	bl	3a5c8 <rpc_dfu_client_data_free>
   3d806:	9800      	ldr	r0, [sp, #0]
   3d808:	f7fc fed6 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d80c:	e76d      	b.n	3d6ea <mfu_interface_sendto+0x42>
   3d80e:	2016      	movs	r0, #22
   3d810:	f7ed fe9a 	bl	2b548 <bsd_os_errno_set>
   3d814:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d818:	e76c      	b.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d81a:	2038      	movs	r0, #56	; 0x38
   3d81c:	f7ed fe94 	bl	2b548 <bsd_os_errno_set>
   3d820:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d824:	e766      	b.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d826:	2001      	movs	r0, #1
   3d828:	f7ed fe8e 	bl	2b548 <bsd_os_errno_set>
   3d82c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d830:	e760      	b.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d832:	202d      	movs	r0, #45	; 0x2d
   3d834:	f7ed fe88 	bl	2b548 <bsd_os_errno_set>
   3d838:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3d83c:	e75a      	b.n	3d6f4 <mfu_interface_sendto+0x4c>
   3d83e:	bf00      	nop
   3d840:	200260f8 	.word	0x200260f8
   3d844:	2002a9c4 	.word	0x2002a9c4
   3d848:	20026104 	.word	0x20026104
   3d84c:	200260fc 	.word	0x200260fc
   3d850:	20026100 	.word	0x20026100

0003d854 <mfu_interface_setopt>:
   3d854:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d856:	4846      	ldr	r0, [pc, #280]	; (3d970 <mfu_interface_setopt+0x11c>)
   3d858:	b083      	sub	sp, #12
   3d85a:	6800      	ldr	r0, [r0, #0]
   3d85c:	3802      	subs	r0, #2
   3d85e:	2801      	cmp	r0, #1
   3d860:	d877      	bhi.n	3d952 <mfu_interface_setopt+0xfe>
   3d862:	f240 2003 	movw	r0, #515	; 0x203
   3d866:	4281      	cmp	r1, r0
   3d868:	d16d      	bne.n	3d946 <mfu_interface_setopt+0xf2>
   3d86a:	3a04      	subs	r2, #4
   3d86c:	2a03      	cmp	r2, #3
   3d86e:	d85c      	bhi.n	3d92a <mfu_interface_setopt+0xd6>
   3d870:	e8df f002 	tbb	[pc, r2]
   3d874:	514e024b 	.word	0x514e024b
   3d878:	2407      	movs	r4, #7
   3d87a:	4625      	mov	r5, r4
   3d87c:	2100      	movs	r1, #0
   3d87e:	4668      	mov	r0, sp
   3d880:	f7fc fe72 	bl	3a568 <rpc_dfu_client_request_alloc>
   3d884:	4603      	mov	r3, r0
   3d886:	2800      	cmp	r0, #0
   3d888:	d138      	bne.n	3d8fc <mfu_interface_setopt+0xa8>
   3d88a:	2704      	movs	r7, #4
   3d88c:	4e39      	ldr	r6, [pc, #228]	; (3d974 <mfu_interface_setopt+0x120>)
   3d88e:	9800      	ldr	r0, [sp, #0]
   3d890:	8832      	ldrh	r2, [r6, #0]
   3d892:	4629      	mov	r1, r5
   3d894:	3201      	adds	r2, #1
   3d896:	b292      	uxth	r2, r2
   3d898:	ea44 4502 	orr.w	r5, r4, r2, lsl #16
   3d89c:	4c36      	ldr	r4, [pc, #216]	; (3d978 <mfu_interface_setopt+0x124>)
   3d89e:	60c5      	str	r5, [r0, #12]
   3d8a0:	7103      	strb	r3, [r0, #4]
   3d8a2:	7143      	strb	r3, [r0, #5]
   3d8a4:	7183      	strb	r3, [r0, #6]
   3d8a6:	71c3      	strb	r3, [r0, #7]
   3d8a8:	7243      	strb	r3, [r0, #9]
   3d8aa:	7283      	strb	r3, [r0, #10]
   3d8ac:	72c3      	strb	r3, [r0, #11]
   3d8ae:	7207      	strb	r7, [r0, #8]
   3d8b0:	8032      	strh	r2, [r6, #0]
   3d8b2:	6023      	str	r3, [r4, #0]
   3d8b4:	f7fc fe6c 	bl	3a590 <rpc_dfu_client_request_send>
   3d8b8:	b9b8      	cbnz	r0, 3d8ea <mfu_interface_setopt+0x96>
   3d8ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d8be:	ad02      	add	r5, sp, #8
   3d8c0:	4e2b      	ldr	r6, [pc, #172]	; (3d970 <mfu_interface_setopt+0x11c>)
   3d8c2:	f845 3d04 	str.w	r3, [r5, #-4]!
   3d8c6:	e005      	b.n	3d8d4 <mfu_interface_setopt+0x80>
   3d8c8:	4629      	mov	r1, r5
   3d8ca:	4630      	mov	r0, r6
   3d8cc:	f7ed fd7c 	bl	2b3c8 <bsd_os_timedwait>
   3d8d0:	2800      	cmp	r0, #0
   3d8d2:	d131      	bne.n	3d938 <mfu_interface_setopt+0xe4>
   3d8d4:	6820      	ldr	r0, [r4, #0]
   3d8d6:	2800      	cmp	r0, #0
   3d8d8:	d0f6      	beq.n	3d8c8 <mfu_interface_setopt+0x74>
   3d8da:	6904      	ldr	r4, [r0, #16]
   3d8dc:	f7fc fe6c 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d8e0:	2c00      	cmp	r4, #0
   3d8e2:	d13c      	bne.n	3d95e <mfu_interface_setopt+0x10a>
   3d8e4:	4620      	mov	r0, r4
   3d8e6:	b003      	add	sp, #12
   3d8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d8ea:	9800      	ldr	r0, [sp, #0]
   3d8ec:	6803      	ldr	r3, [r0, #0]
   3d8ee:	b11b      	cbz	r3, 3d8f8 <mfu_interface_setopt+0xa4>
   3d8f0:	4618      	mov	r0, r3
   3d8f2:	f7fc fe69 	bl	3a5c8 <rpc_dfu_client_data_free>
   3d8f6:	9800      	ldr	r0, [sp, #0]
   3d8f8:	f7fc fe5e 	bl	3a5b8 <rpc_dfu_client_message_free>
   3d8fc:	200c      	movs	r0, #12
   3d8fe:	f7ed fe23 	bl	2b548 <bsd_os_errno_set>
   3d902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d906:	b003      	add	sp, #12
   3d908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d90a:	2405      	movs	r4, #5
   3d90c:	4625      	mov	r5, r4
   3d90e:	e7b5      	b.n	3d87c <mfu_interface_setopt+0x28>
   3d910:	2408      	movs	r4, #8
   3d912:	4625      	mov	r5, r4
   3d914:	e7b2      	b.n	3d87c <mfu_interface_setopt+0x28>
   3d916:	b1b3      	cbz	r3, 3d946 <mfu_interface_setopt+0xf2>
   3d918:	9a08      	ldr	r2, [sp, #32]
   3d91a:	2a04      	cmp	r2, #4
   3d91c:	d113      	bne.n	3d946 <mfu_interface_setopt+0xf2>
   3d91e:	2000      	movs	r0, #0
   3d920:	681a      	ldr	r2, [r3, #0]
   3d922:	4b16      	ldr	r3, [pc, #88]	; (3d97c <mfu_interface_setopt+0x128>)
   3d924:	601a      	str	r2, [r3, #0]
   3d926:	b003      	add	sp, #12
   3d928:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d92a:	202a      	movs	r0, #42	; 0x2a
   3d92c:	f7ed fe0c 	bl	2b548 <bsd_os_errno_set>
   3d930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d934:	b003      	add	sp, #12
   3d936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d938:	203c      	movs	r0, #60	; 0x3c
   3d93a:	f7ed fe05 	bl	2b548 <bsd_os_errno_set>
   3d93e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d942:	b003      	add	sp, #12
   3d944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3d946:	2016      	movs	r0, #22
   3d948:	f7ed fdfe 	bl	2b548 <bsd_os_errno_set>
   3d94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d950:	e7c9      	b.n	3d8e6 <mfu_interface_setopt+0x92>
   3d952:	2001      	movs	r0, #1
   3d954:	f7ed fdf8 	bl	2b548 <bsd_os_errno_set>
   3d958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d95c:	e7c3      	b.n	3d8e6 <mfu_interface_setopt+0x92>
   3d95e:	4b08      	ldr	r3, [pc, #32]	; (3d980 <mfu_interface_setopt+0x12c>)
   3d960:	2008      	movs	r0, #8
   3d962:	601c      	str	r4, [r3, #0]
   3d964:	f7ed fdf0 	bl	2b548 <bsd_os_errno_set>
   3d968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3d96c:	e7bb      	b.n	3d8e6 <mfu_interface_setopt+0x92>
   3d96e:	bf00      	nop
   3d970:	200260f8 	.word	0x200260f8
   3d974:	2002a9c4 	.word	0x2002a9c4
   3d978:	20026104 	.word	0x20026104
   3d97c:	20026100 	.word	0x20026100
   3d980:	200260fc 	.word	0x200260fc

0003d984 <mfu_interface_getopt>:
   3d984:	f240 2003 	movw	r0, #515	; 0x203
   3d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d98c:	4281      	cmp	r1, r0
   3d98e:	b082      	sub	sp, #8
   3d990:	9e08      	ldr	r6, [sp, #32]
   3d992:	f040 80ae 	bne.w	3daf2 <mfu_interface_getopt+0x16e>
   3d996:	461d      	mov	r5, r3
   3d998:	2b00      	cmp	r3, #0
   3d99a:	f000 80aa 	beq.w	3daf2 <mfu_interface_getopt+0x16e>
   3d99e:	2e00      	cmp	r6, #0
   3d9a0:	f000 80a7 	beq.w	3daf2 <mfu_interface_getopt+0x16e>
   3d9a4:	4b5e      	ldr	r3, [pc, #376]	; (3db20 <mfu_interface_getopt+0x19c>)
   3d9a6:	681b      	ldr	r3, [r3, #0]
   3d9a8:	3b02      	subs	r3, #2
   3d9aa:	2b01      	cmp	r3, #1
   3d9ac:	f200 80a7 	bhi.w	3dafe <mfu_interface_getopt+0x17a>
   3d9b0:	3a01      	subs	r2, #1
   3d9b2:	2a13      	cmp	r2, #19
   3d9b4:	d879      	bhi.n	3daaa <mfu_interface_getopt+0x126>
   3d9b6:	e8df f002 	tbb	[pc, r2]
   3d9ba:	5f17      	.short	0x5f17
   3d9bc:	78787878 	.word	0x78787878
   3d9c0:	78787872 	.word	0x78787872
   3d9c4:	78787878 	.word	0x78787878
   3d9c8:	78787878 	.word	0x78787878
   3d9cc:	0a78      	.short	0x0a78
   3d9ce:	6833      	ldr	r3, [r6, #0]
   3d9d0:	2b04      	cmp	r3, #4
   3d9d2:	f040 808e 	bne.w	3daf2 <mfu_interface_getopt+0x16e>
   3d9d6:	2200      	movs	r2, #0
   3d9d8:	4610      	mov	r0, r2
   3d9da:	4b52      	ldr	r3, [pc, #328]	; (3db24 <mfu_interface_getopt+0x1a0>)
   3d9dc:	6819      	ldr	r1, [r3, #0]
   3d9de:	601a      	str	r2, [r3, #0]
   3d9e0:	6029      	str	r1, [r5, #0]
   3d9e2:	b002      	add	sp, #8
   3d9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3d9e8:	6833      	ldr	r3, [r6, #0]
   3d9ea:	2b24      	cmp	r3, #36	; 0x24
   3d9ec:	f040 8081 	bne.w	3daf2 <mfu_interface_getopt+0x16e>
   3d9f0:	2401      	movs	r4, #1
   3d9f2:	46a0      	mov	r8, r4
   3d9f4:	2100      	movs	r1, #0
   3d9f6:	4668      	mov	r0, sp
   3d9f8:	f7fc fdb6 	bl	3a568 <rpc_dfu_client_request_alloc>
   3d9fc:	2800      	cmp	r0, #0
   3d9fe:	d146      	bne.n	3da8e <mfu_interface_getopt+0x10a>
   3da00:	4949      	ldr	r1, [pc, #292]	; (3db28 <mfu_interface_getopt+0x1a4>)
   3da02:	9b00      	ldr	r3, [sp, #0]
   3da04:	880a      	ldrh	r2, [r1, #0]
   3da06:	f1b8 0f03 	cmp.w	r8, #3
   3da0a:	f102 0201 	add.w	r2, r2, #1
   3da0e:	b292      	uxth	r2, r2
   3da10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   3da14:	7118      	strb	r0, [r3, #4]
   3da16:	800a      	strh	r2, [r1, #0]
   3da18:	60dc      	str	r4, [r3, #12]
   3da1a:	7158      	strb	r0, [r3, #5]
   3da1c:	7198      	strb	r0, [r3, #6]
   3da1e:	71d8      	strb	r0, [r3, #7]
   3da20:	d04b      	beq.n	3daba <mfu_interface_getopt+0x136>
   3da22:	2104      	movs	r1, #4
   3da24:	2200      	movs	r2, #0
   3da26:	4f41      	ldr	r7, [pc, #260]	; (3db2c <mfu_interface_getopt+0x1a8>)
   3da28:	6099      	str	r1, [r3, #8]
   3da2a:	4618      	mov	r0, r3
   3da2c:	4641      	mov	r1, r8
   3da2e:	603a      	str	r2, [r7, #0]
   3da30:	f7fc fdae 	bl	3a590 <rpc_dfu_client_request_send>
   3da34:	2800      	cmp	r0, #0
   3da36:	d14d      	bne.n	3dad4 <mfu_interface_getopt+0x150>
   3da38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3da3c:	ac02      	add	r4, sp, #8
   3da3e:	f844 3d04 	str.w	r3, [r4, #-4]!
   3da42:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3db20 <mfu_interface_getopt+0x19c>
   3da46:	e005      	b.n	3da54 <mfu_interface_getopt+0xd0>
   3da48:	4621      	mov	r1, r4
   3da4a:	4640      	mov	r0, r8
   3da4c:	f7ed fcbc 	bl	2b3c8 <bsd_os_timedwait>
   3da50:	2800      	cmp	r0, #0
   3da52:	d137      	bne.n	3dac4 <mfu_interface_getopt+0x140>
   3da54:	6839      	ldr	r1, [r7, #0]
   3da56:	2900      	cmp	r1, #0
   3da58:	d0f6      	beq.n	3da48 <mfu_interface_getopt+0xc4>
   3da5a:	690c      	ldr	r4, [r1, #16]
   3da5c:	2c00      	cmp	r4, #0
   3da5e:	d154      	bne.n	3db0a <mfu_interface_getopt+0x186>
   3da60:	6832      	ldr	r2, [r6, #0]
   3da62:	3114      	adds	r1, #20
   3da64:	4628      	mov	r0, r5
   3da66:	f00a fb8f 	bl	48188 <memcpy>
   3da6a:	6838      	ldr	r0, [r7, #0]
   3da6c:	f7fc fda4 	bl	3a5b8 <rpc_dfu_client_message_free>
   3da70:	4620      	mov	r0, r4
   3da72:	b002      	add	sp, #8
   3da74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3da78:	6833      	ldr	r3, [r6, #0]
   3da7a:	2b04      	cmp	r3, #4
   3da7c:	d139      	bne.n	3daf2 <mfu_interface_getopt+0x16e>
   3da7e:	2402      	movs	r4, #2
   3da80:	2100      	movs	r1, #0
   3da82:	4668      	mov	r0, sp
   3da84:	46a0      	mov	r8, r4
   3da86:	f7fc fd6f 	bl	3a568 <rpc_dfu_client_request_alloc>
   3da8a:	2800      	cmp	r0, #0
   3da8c:	d0b8      	beq.n	3da00 <mfu_interface_getopt+0x7c>
   3da8e:	200c      	movs	r0, #12
   3da90:	f7ed fd5a 	bl	2b548 <bsd_os_errno_set>
   3da94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3da98:	b002      	add	sp, #8
   3da9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3da9e:	6833      	ldr	r3, [r6, #0]
   3daa0:	2b04      	cmp	r3, #4
   3daa2:	d126      	bne.n	3daf2 <mfu_interface_getopt+0x16e>
   3daa4:	2409      	movs	r4, #9
   3daa6:	46a0      	mov	r8, r4
   3daa8:	e7a4      	b.n	3d9f4 <mfu_interface_getopt+0x70>
   3daaa:	202a      	movs	r0, #42	; 0x2a
   3daac:	f7ed fd4c 	bl	2b548 <bsd_os_errno_set>
   3dab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dab4:	b002      	add	sp, #8
   3dab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3daba:	4a1d      	ldr	r2, [pc, #116]	; (3db30 <mfu_interface_getopt+0x1ac>)
   3dabc:	2108      	movs	r1, #8
   3dabe:	6812      	ldr	r2, [r2, #0]
   3dac0:	611a      	str	r2, [r3, #16]
   3dac2:	e7af      	b.n	3da24 <mfu_interface_getopt+0xa0>
   3dac4:	203c      	movs	r0, #60	; 0x3c
   3dac6:	f7ed fd3f 	bl	2b548 <bsd_os_errno_set>
   3daca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dace:	b002      	add	sp, #8
   3dad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3dad4:	9800      	ldr	r0, [sp, #0]
   3dad6:	6803      	ldr	r3, [r0, #0]
   3dad8:	b11b      	cbz	r3, 3dae2 <mfu_interface_getopt+0x15e>
   3dada:	4618      	mov	r0, r3
   3dadc:	f7fc fd74 	bl	3a5c8 <rpc_dfu_client_data_free>
   3dae0:	9800      	ldr	r0, [sp, #0]
   3dae2:	f7fc fd69 	bl	3a5b8 <rpc_dfu_client_message_free>
   3dae6:	200c      	movs	r0, #12
   3dae8:	f7ed fd2e 	bl	2b548 <bsd_os_errno_set>
   3daec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3daf0:	e7d2      	b.n	3da98 <mfu_interface_getopt+0x114>
   3daf2:	2016      	movs	r0, #22
   3daf4:	f7ed fd28 	bl	2b548 <bsd_os_errno_set>
   3daf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dafc:	e771      	b.n	3d9e2 <mfu_interface_getopt+0x5e>
   3dafe:	2001      	movs	r0, #1
   3db00:	f7ed fd22 	bl	2b548 <bsd_os_errno_set>
   3db04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3db08:	e76b      	b.n	3d9e2 <mfu_interface_getopt+0x5e>
   3db0a:	4b06      	ldr	r3, [pc, #24]	; (3db24 <mfu_interface_getopt+0x1a0>)
   3db0c:	2008      	movs	r0, #8
   3db0e:	601c      	str	r4, [r3, #0]
   3db10:	f7ed fd1a 	bl	2b548 <bsd_os_errno_set>
   3db14:	6838      	ldr	r0, [r7, #0]
   3db16:	f7fc fd4f 	bl	3a5b8 <rpc_dfu_client_message_free>
   3db1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3db1e:	e760      	b.n	3d9e2 <mfu_interface_getopt+0x5e>
   3db20:	200260f8 	.word	0x200260f8
   3db24:	200260fc 	.word	0x200260fc
   3db28:	2002a9c4 	.word	0x2002a9c4
   3db2c:	20026104 	.word	0x20026104
   3db30:	20026100 	.word	0x20026100

0003db34 <interface_init>:
   3db34:	b508      	push	{r3, lr}
   3db36:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3db3a:	2100      	movs	r1, #0
   3db3c:	4802      	ldr	r0, [pc, #8]	; (3db48 <interface_init+0x14>)
   3db3e:	f00a fb43 	bl	481c8 <memset>
   3db42:	2000      	movs	r0, #0
   3db44:	bd08      	pop	{r3, pc}
   3db46:	bf00      	nop
   3db48:	2002d1c8 	.word	0x2002d1c8

0003db4c <interface_socket_allocate>:
   3db4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3db4e:	4b30      	ldr	r3, [pc, #192]	; (3dc10 <interface_socket_allocate+0xc4>)
   3db50:	4606      	mov	r6, r0
   3db52:	681d      	ldr	r5, [r3, #0]
   3db54:	4608      	mov	r0, r1
   3db56:	b31d      	cbz	r5, 3dba0 <interface_socket_allocate+0x54>
   3db58:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   3db5a:	2c00      	cmp	r4, #0
   3db5c:	d04a      	beq.n	3dbf4 <interface_socket_allocate+0xa8>
   3db5e:	6d1c      	ldr	r4, [r3, #80]	; 0x50
   3db60:	2c00      	cmp	r4, #0
   3db62:	d049      	beq.n	3dbf8 <interface_socket_allocate+0xac>
   3db64:	6f9c      	ldr	r4, [r3, #120]	; 0x78
   3db66:	2c00      	cmp	r4, #0
   3db68:	d048      	beq.n	3dbfc <interface_socket_allocate+0xb0>
   3db6a:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   3db6e:	2900      	cmp	r1, #0
   3db70:	d046      	beq.n	3dc00 <interface_socket_allocate+0xb4>
   3db72:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
   3db76:	b191      	cbz	r1, 3db9e <interface_socket_allocate+0x52>
   3db78:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
   3db7c:	2900      	cmp	r1, #0
   3db7e:	d043      	beq.n	3dc08 <interface_socket_allocate+0xbc>
   3db80:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
   3db84:	2900      	cmp	r1, #0
   3db86:	d041      	beq.n	3dc0c <interface_socket_allocate+0xc0>
   3db88:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   3db8c:	2900      	cmp	r1, #0
   3db8e:	d039      	beq.n	3dc04 <interface_socket_allocate+0xb8>
   3db90:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3db94:	2069      	movs	r0, #105	; 0x69
   3db96:	f7ed fcd7 	bl	2b548 <bsd_os_errno_set>
   3db9a:	4628      	mov	r0, r5
   3db9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3db9e:	2505      	movs	r5, #5
   3dba0:	f04f 0c01 	mov.w	ip, #1
   3dba4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   3dba8:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   3dbac:	00e4      	lsls	r4, r4, #3
   3dbae:	f843 c004 	str.w	ip, [r3, r4]
   3dbb2:	441c      	add	r4, r3
   3dbb4:	4611      	mov	r1, r2
   3dbb6:	61a7      	str	r7, [r4, #24]
   3dbb8:	4622      	mov	r2, r4
   3dbba:	f7fe fedb 	bl	3c974 <packet_handler_create>
   3dbbe:	4603      	mov	r3, r0
   3dbc0:	61e0      	str	r0, [r4, #28]
   3dbc2:	b158      	cbz	r0, 3dbdc <interface_socket_allocate+0x90>
   3dbc4:	681b      	ldr	r3, [r3, #0]
   3dbc6:	681b      	ldr	r3, [r3, #0]
   3dbc8:	4798      	blx	r3
   3dbca:	b910      	cbnz	r0, 3dbd2 <interface_socket_allocate+0x86>
   3dbcc:	6034      	str	r4, [r6, #0]
   3dbce:	4628      	mov	r0, r5
   3dbd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3dbd2:	69e0      	ldr	r0, [r4, #28]
   3dbd4:	f7fe feee 	bl	3c9b4 <packet_handler_delete>
   3dbd8:	2300      	movs	r3, #0
   3dbda:	61e3      	str	r3, [r4, #28]
   3dbdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   3dbe0:	2228      	movs	r2, #40	; 0x28
   3dbe2:	2100      	movs	r1, #0
   3dbe4:	4620      	mov	r0, r4
   3dbe6:	f00a faef 	bl	481c8 <memset>
   3dbea:	200c      	movs	r0, #12
   3dbec:	f7ed fcac 	bl	2b548 <bsd_os_errno_set>
   3dbf0:	4628      	mov	r0, r5
   3dbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3dbf4:	2501      	movs	r5, #1
   3dbf6:	e7d3      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dbf8:	2502      	movs	r5, #2
   3dbfa:	e7d1      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dbfc:	2503      	movs	r5, #3
   3dbfe:	e7cf      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dc00:	2504      	movs	r5, #4
   3dc02:	e7cd      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dc04:	2508      	movs	r5, #8
   3dc06:	e7cb      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dc08:	2506      	movs	r5, #6
   3dc0a:	e7c9      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dc0c:	2507      	movs	r5, #7
   3dc0e:	e7c7      	b.n	3dba0 <interface_socket_allocate+0x54>
   3dc10:	2002d1c8 	.word	0x2002d1c8

0003dc14 <interface_socket_free>:
   3dc14:	2808      	cmp	r0, #8
   3dc16:	d900      	bls.n	3dc1a <interface_socket_free+0x6>
   3dc18:	4770      	bx	lr
   3dc1a:	b510      	push	{r4, lr}
   3dc1c:	4c07      	ldr	r4, [pc, #28]	; (3dc3c <interface_socket_free+0x28>)
   3dc1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3dc22:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   3dc26:	69e0      	ldr	r0, [r4, #28]
   3dc28:	b108      	cbz	r0, 3dc2e <interface_socket_free+0x1a>
   3dc2a:	f7fe fec3 	bl	3c9b4 <packet_handler_delete>
   3dc2e:	4620      	mov	r0, r4
   3dc30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3dc34:	2228      	movs	r2, #40	; 0x28
   3dc36:	2100      	movs	r1, #0
   3dc38:	f00a bac6 	b.w	481c8 <memset>
   3dc3c:	2002d1c8 	.word	0x2002d1c8

0003dc40 <interface_socket_packet_handler_update>:
   3dc40:	2808      	cmp	r0, #8
   3dc42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3dc46:	d81e      	bhi.n	3dc86 <interface_socket_packet_handler_update+0x46>
   3dc48:	ea4f 0880 	mov.w	r8, r0, lsl #2
   3dc4c:	4e17      	ldr	r6, [pc, #92]	; (3dcac <interface_socket_packet_handler_update+0x6c>)
   3dc4e:	eb08 0300 	add.w	r3, r8, r0
   3dc52:	00db      	lsls	r3, r3, #3
   3dc54:	58f4      	ldr	r4, [r6, r3]
   3dc56:	18f5      	adds	r5, r6, r3
   3dc58:	b1ac      	cbz	r4, 3dc86 <interface_socket_packet_handler_update+0x46>
   3dc5a:	460b      	mov	r3, r1
   3dc5c:	4604      	mov	r4, r0
   3dc5e:	4611      	mov	r1, r2
   3dc60:	4618      	mov	r0, r3
   3dc62:	462a      	mov	r2, r5
   3dc64:	f8d5 901c 	ldr.w	r9, [r5, #28]
   3dc68:	f7fe fe84 	bl	3c974 <packet_handler_create>
   3dc6c:	61e8      	str	r0, [r5, #28]
   3dc6e:	b1d0      	cbz	r0, 3dca6 <interface_socket_packet_handler_update+0x66>
   3dc70:	6803      	ldr	r3, [r0, #0]
   3dc72:	681b      	ldr	r3, [r3, #0]
   3dc74:	4798      	blx	r3
   3dc76:	4607      	mov	r7, r0
   3dc78:	b948      	cbnz	r0, 3dc8e <interface_socket_packet_handler_update+0x4e>
   3dc7a:	4648      	mov	r0, r9
   3dc7c:	f7fe fe9a 	bl	3c9b4 <packet_handler_delete>
   3dc80:	4638      	mov	r0, r7
   3dc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dc86:	2705      	movs	r7, #5
   3dc88:	4638      	mov	r0, r7
   3dc8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dc8e:	69e8      	ldr	r0, [r5, #28]
   3dc90:	f7fe fe90 	bl	3c9b4 <packet_handler_delete>
   3dc94:	eb08 0004 	add.w	r0, r8, r4
   3dc98:	eb06 06c0 	add.w	r6, r6, r0, lsl #3
   3dc9c:	f8c6 901c 	str.w	r9, [r6, #28]
   3dca0:	4638      	mov	r0, r7
   3dca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3dca6:	2704      	movs	r7, #4
   3dca8:	e7f4      	b.n	3dc94 <interface_socket_packet_handler_update+0x54>
   3dcaa:	bf00      	nop
   3dcac:	2002d1c8 	.word	0x2002d1c8

0003dcb0 <interface_socket_wait>:
   3dcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dcb4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3dcb8:	4c0d      	ldr	r4, [pc, #52]	; (3dcf0 <interface_socket_wait+0x40>)
   3dcba:	00c0      	lsls	r0, r0, #3
   3dcbc:	5825      	ldr	r5, [r4, r0]
   3dcbe:	4404      	add	r4, r0
   3dcc0:	4015      	ands	r5, r2
   3dcc2:	428d      	cmp	r5, r1
   3dcc4:	d011      	beq.n	3dcea <interface_socket_wait+0x3a>
   3dcc6:	6860      	ldr	r0, [r4, #4]
   3dcc8:	b978      	cbnz	r0, 3dcea <interface_socket_wait+0x3a>
   3dcca:	4698      	mov	r8, r3
   3dccc:	460f      	mov	r7, r1
   3dcce:	4616      	mov	r6, r2
   3dcd0:	4625      	mov	r5, r4
   3dcd2:	e006      	b.n	3dce2 <interface_socket_wait+0x32>
   3dcd4:	686b      	ldr	r3, [r5, #4]
   3dcd6:	b943      	cbnz	r3, 3dcea <interface_socket_wait+0x3a>
   3dcd8:	4641      	mov	r1, r8
   3dcda:	4620      	mov	r0, r4
   3dcdc:	f7ed fb74 	bl	2b3c8 <bsd_os_timedwait>
   3dce0:	b920      	cbnz	r0, 3dcec <interface_socket_wait+0x3c>
   3dce2:	6828      	ldr	r0, [r5, #0]
   3dce4:	4030      	ands	r0, r6
   3dce6:	42b8      	cmp	r0, r7
   3dce8:	d1f4      	bne.n	3dcd4 <interface_socket_wait+0x24>
   3dcea:	2000      	movs	r0, #0
   3dcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3dcf0:	2002d1c8 	.word	0x2002d1c8

0003dcf4 <interface_from_internal_id_search>:
   3dcf4:	4b27      	ldr	r3, [pc, #156]	; (3dd94 <interface_from_internal_id_search+0xa0>)
   3dcf6:	681a      	ldr	r2, [r3, #0]
   3dcf8:	b112      	cbz	r2, 3dd00 <interface_from_internal_id_search+0xc>
   3dcfa:	699a      	ldr	r2, [r3, #24]
   3dcfc:	4282      	cmp	r2, r0
   3dcfe:	d039      	beq.n	3dd74 <interface_from_internal_id_search+0x80>
   3dd00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3dd02:	b112      	cbz	r2, 3dd0a <interface_from_internal_id_search+0x16>
   3dd04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   3dd06:	4282      	cmp	r2, r0
   3dd08:	d036      	beq.n	3dd78 <interface_from_internal_id_search+0x84>
   3dd0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3dd0c:	b112      	cbz	r2, 3dd14 <interface_from_internal_id_search+0x20>
   3dd0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   3dd10:	4282      	cmp	r2, r0
   3dd12:	d033      	beq.n	3dd7c <interface_from_internal_id_search+0x88>
   3dd14:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3dd16:	b11a      	cbz	r2, 3dd20 <interface_from_internal_id_search+0x2c>
   3dd18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
   3dd1c:	4282      	cmp	r2, r0
   3dd1e:	d02f      	beq.n	3dd80 <interface_from_internal_id_search+0x8c>
   3dd20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3dd24:	b11a      	cbz	r2, 3dd2e <interface_from_internal_id_search+0x3a>
   3dd26:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   3dd2a:	4282      	cmp	r2, r0
   3dd2c:	d02a      	beq.n	3dd84 <interface_from_internal_id_search+0x90>
   3dd2e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3dd32:	b11a      	cbz	r2, 3dd3c <interface_from_internal_id_search+0x48>
   3dd34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
   3dd38:	4282      	cmp	r2, r0
   3dd3a:	d025      	beq.n	3dd88 <interface_from_internal_id_search+0x94>
   3dd3c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3dd40:	b11a      	cbz	r2, 3dd4a <interface_from_internal_id_search+0x56>
   3dd42:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   3dd46:	4282      	cmp	r2, r0
   3dd48:	d020      	beq.n	3dd8c <interface_from_internal_id_search+0x98>
   3dd4a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3dd4e:	b11a      	cbz	r2, 3dd58 <interface_from_internal_id_search+0x64>
   3dd50:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   3dd54:	4282      	cmp	r2, r0
   3dd56:	d01b      	beq.n	3dd90 <interface_from_internal_id_search+0x9c>
   3dd58:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3dd5c:	b13a      	cbz	r2, 3dd6e <interface_from_internal_id_search+0x7a>
   3dd5e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
   3dd62:	4283      	cmp	r3, r0
   3dd64:	bf14      	ite	ne
   3dd66:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3dd6a:	2008      	moveq	r0, #8
   3dd6c:	4770      	bx	lr
   3dd6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dd72:	4770      	bx	lr
   3dd74:	2000      	movs	r0, #0
   3dd76:	4770      	bx	lr
   3dd78:	2001      	movs	r0, #1
   3dd7a:	4770      	bx	lr
   3dd7c:	2002      	movs	r0, #2
   3dd7e:	4770      	bx	lr
   3dd80:	2003      	movs	r0, #3
   3dd82:	4770      	bx	lr
   3dd84:	2004      	movs	r0, #4
   3dd86:	4770      	bx	lr
   3dd88:	2005      	movs	r0, #5
   3dd8a:	4770      	bx	lr
   3dd8c:	2006      	movs	r0, #6
   3dd8e:	4770      	bx	lr
   3dd90:	2007      	movs	r0, #7
   3dd92:	4770      	bx	lr
   3dd94:	2002d1c8 	.word	0x2002d1c8

0003dd98 <interface_socket_from_handle_get>:
   3dd98:	2808      	cmp	r0, #8
   3dd9a:	d807      	bhi.n	3ddac <interface_socket_from_handle_get+0x14>
   3dd9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3dda0:	4b03      	ldr	r3, [pc, #12]	; (3ddb0 <interface_socket_from_handle_get+0x18>)
   3dda2:	00c0      	lsls	r0, r0, #3
   3dda4:	581a      	ldr	r2, [r3, r0]
   3dda6:	b10a      	cbz	r2, 3ddac <interface_socket_from_handle_get+0x14>
   3dda8:	4418      	add	r0, r3
   3ddaa:	4770      	bx	lr
   3ddac:	2000      	movs	r0, #0
   3ddae:	4770      	bx	lr
   3ddb0:	2002d1c8 	.word	0x2002d1c8

0003ddb4 <interface_socket_event_get>:
   3ddb4:	b119      	cbz	r1, 3ddbe <interface_socket_event_get+0xa>
   3ddb6:	2808      	cmp	r0, #8
   3ddb8:	d902      	bls.n	3ddc0 <interface_socket_event_get+0xc>
   3ddba:	2310      	movs	r3, #16
   3ddbc:	600b      	str	r3, [r1, #0]
   3ddbe:	4770      	bx	lr
   3ddc0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3ddc4:	4b07      	ldr	r3, [pc, #28]	; (3dde4 <interface_socket_event_get+0x30>)
   3ddc6:	00c0      	lsls	r0, r0, #3
   3ddc8:	581a      	ldr	r2, [r3, r0]
   3ddca:	2a00      	cmp	r2, #0
   3ddcc:	d0f5      	beq.n	3ddba <interface_socket_event_get+0x6>
   3ddce:	581b      	ldr	r3, [r3, r0]
   3ddd0:	0c1b      	lsrs	r3, r3, #16
   3ddd2:	f003 020a 	and.w	r2, r3, #10
   3ddd6:	2a0a      	cmp	r2, #10
   3ddd8:	bf14      	ite	ne
   3ddda:	f003 030f 	andne.w	r3, r3, #15
   3ddde:	f003 030d 	andeq.w	r3, r3, #13
   3dde2:	e7eb      	b.n	3ddbc <interface_socket_event_get+0x8>
   3dde4:	2002d1c8 	.word	0x2002d1c8

0003dde8 <interface_socket_setopt>:
   3dde8:	2808      	cmp	r0, #8
   3ddea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ddec:	d82c      	bhi.n	3de48 <interface_socket_setopt+0x60>
   3ddee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3ddf2:	4e1e      	ldr	r6, [pc, #120]	; (3de6c <interface_socket_setopt+0x84>)
   3ddf4:	00c0      	lsls	r0, r0, #3
   3ddf6:	5834      	ldr	r4, [r6, r0]
   3ddf8:	b334      	cbz	r4, 3de48 <interface_socket_setopt+0x60>
   3ddfa:	2901      	cmp	r1, #1
   3ddfc:	d11e      	bne.n	3de3c <interface_socket_setopt+0x54>
   3ddfe:	f1a2 0114 	sub.w	r1, r2, #20
   3de02:	2901      	cmp	r1, #1
   3de04:	d81a      	bhi.n	3de3c <interface_socket_setopt+0x54>
   3de06:	9906      	ldr	r1, [sp, #24]
   3de08:	2908      	cmp	r1, #8
   3de0a:	d123      	bne.n	3de54 <interface_socket_setopt+0x6c>
   3de0c:	b313      	cbz	r3, 3de54 <interface_socket_setopt+0x6c>
   3de0e:	6859      	ldr	r1, [r3, #4]
   3de10:	4c17      	ldr	r4, [pc, #92]	; (3de70 <interface_socket_setopt+0x88>)
   3de12:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   3de16:	fba4 4101 	umull	r4, r1, r4, r1
   3de1a:	0989      	lsrs	r1, r1, #6
   3de1c:	460c      	mov	r4, r1
   3de1e:	2500      	movs	r5, #0
   3de20:	681b      	ldr	r3, [r3, #0]
   3de22:	fbe7 4503 	umlal	r4, r5, r7, r3
   3de26:	2d01      	cmp	r5, #1
   3de28:	bf08      	it	eq
   3de2a:	2c00      	cmpeq	r4, #0
   3de2c:	d218      	bcs.n	3de60 <interface_socket_setopt+0x78>
   3de2e:	4430      	add	r0, r6
   3de30:	2a14      	cmp	r2, #20
   3de32:	bf0c      	ite	eq
   3de34:	6204      	streq	r4, [r0, #32]
   3de36:	6244      	strne	r4, [r0, #36]	; 0x24
   3de38:	2000      	movs	r0, #0
   3de3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de3c:	202a      	movs	r0, #42	; 0x2a
   3de3e:	f7ed fb83 	bl	2b548 <bsd_os_errno_set>
   3de42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3de46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de48:	2009      	movs	r0, #9
   3de4a:	f7ed fb7d 	bl	2b548 <bsd_os_errno_set>
   3de4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3de52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de54:	2016      	movs	r0, #22
   3de56:	f7ed fb77 	bl	2b548 <bsd_os_errno_set>
   3de5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3de5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de60:	2025      	movs	r0, #37	; 0x25
   3de62:	f7ed fb71 	bl	2b548 <bsd_os_errno_set>
   3de66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3de6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3de6c:	2002d1c8 	.word	0x2002d1c8
   3de70:	10624dd3 	.word	0x10624dd3

0003de74 <interface_socket_getopt>:
   3de74:	b570      	push	{r4, r5, r6, lr}
   3de76:	2808      	cmp	r0, #8
   3de78:	9d04      	ldr	r5, [sp, #16]
   3de7a:	d835      	bhi.n	3dee8 <interface_socket_getopt+0x74>
   3de7c:	4c20      	ldr	r4, [pc, #128]	; (3df00 <interface_socket_getopt+0x8c>)
   3de7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3de82:	00c0      	lsls	r0, r0, #3
   3de84:	5826      	ldr	r6, [r4, r0]
   3de86:	4404      	add	r4, r0
   3de88:	b376      	cbz	r6, 3dee8 <interface_socket_getopt+0x74>
   3de8a:	2901      	cmp	r1, #1
   3de8c:	d132      	bne.n	3def4 <interface_socket_getopt+0x80>
   3de8e:	b32b      	cbz	r3, 3dedc <interface_socket_getopt+0x68>
   3de90:	b325      	cbz	r5, 3dedc <interface_socket_getopt+0x68>
   3de92:	2a04      	cmp	r2, #4
   3de94:	d019      	beq.n	3deca <interface_socket_getopt+0x56>
   3de96:	f1a2 0114 	sub.w	r1, r2, #20
   3de9a:	2901      	cmp	r1, #1
   3de9c:	d82a      	bhi.n	3def4 <interface_socket_getopt+0x80>
   3de9e:	6829      	ldr	r1, [r5, #0]
   3dea0:	2908      	cmp	r1, #8
   3dea2:	d11b      	bne.n	3dedc <interface_socket_getopt+0x68>
   3dea4:	e9d4 1008 	ldrd	r1, r0, [r4, #32]
   3dea8:	2a14      	cmp	r2, #20
   3deaa:	bf18      	it	ne
   3deac:	4601      	movne	r1, r0
   3deae:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3deb2:	4a14      	ldr	r2, [pc, #80]	; (3df04 <interface_socket_getopt+0x90>)
   3deb4:	2000      	movs	r0, #0
   3deb6:	fba2 5201 	umull	r5, r2, r2, r1
   3deba:	0992      	lsrs	r2, r2, #6
   3debc:	fb04 1112 	mls	r1, r4, r2, r1
   3dec0:	fb04 f101 	mul.w	r1, r4, r1
   3dec4:	e9c3 2100 	strd	r2, r1, [r3]
   3dec8:	bd70      	pop	{r4, r5, r6, pc}
   3deca:	682a      	ldr	r2, [r5, #0]
   3decc:	2a04      	cmp	r2, #4
   3dece:	d105      	bne.n	3dedc <interface_socket_getopt+0x68>
   3ded0:	2200      	movs	r2, #0
   3ded2:	6861      	ldr	r1, [r4, #4]
   3ded4:	4610      	mov	r0, r2
   3ded6:	6019      	str	r1, [r3, #0]
   3ded8:	6062      	str	r2, [r4, #4]
   3deda:	bd70      	pop	{r4, r5, r6, pc}
   3dedc:	2016      	movs	r0, #22
   3dede:	f7ed fb33 	bl	2b548 <bsd_os_errno_set>
   3dee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dee6:	bd70      	pop	{r4, r5, r6, pc}
   3dee8:	2009      	movs	r0, #9
   3deea:	f7ed fb2d 	bl	2b548 <bsd_os_errno_set>
   3deee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3def2:	bd70      	pop	{r4, r5, r6, pc}
   3def4:	202a      	movs	r0, #42	; 0x2a
   3def6:	f7ed fb27 	bl	2b548 <bsd_os_errno_set>
   3defa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3defe:	bd70      	pop	{r4, r5, r6, pc}
   3df00:	2002d1c8 	.word	0x2002d1c8
   3df04:	10624dd3 	.word	0x10624dd3

0003df08 <interface_shutdown>:
   3df08:	b530      	push	{r4, r5, lr}
   3df0a:	4b2d      	ldr	r3, [pc, #180]	; (3dfc0 <interface_shutdown+0xb8>)
   3df0c:	b083      	sub	sp, #12
   3df0e:	681a      	ldr	r2, [r3, #0]
   3df10:	b10a      	cbz	r2, 3df16 <interface_shutdown+0xe>
   3df12:	2270      	movs	r2, #112	; 0x70
   3df14:	605a      	str	r2, [r3, #4]
   3df16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3df18:	b10a      	cbz	r2, 3df1e <interface_shutdown+0x16>
   3df1a:	2270      	movs	r2, #112	; 0x70
   3df1c:	62da      	str	r2, [r3, #44]	; 0x2c
   3df1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3df20:	b10a      	cbz	r2, 3df26 <interface_shutdown+0x1e>
   3df22:	2270      	movs	r2, #112	; 0x70
   3df24:	655a      	str	r2, [r3, #84]	; 0x54
   3df26:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   3df28:	b10a      	cbz	r2, 3df2e <interface_shutdown+0x26>
   3df2a:	2270      	movs	r2, #112	; 0x70
   3df2c:	67da      	str	r2, [r3, #124]	; 0x7c
   3df2e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   3df32:	b112      	cbz	r2, 3df3a <interface_shutdown+0x32>
   3df34:	2270      	movs	r2, #112	; 0x70
   3df36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
   3df3a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   3df3e:	b112      	cbz	r2, 3df46 <interface_shutdown+0x3e>
   3df40:	2270      	movs	r2, #112	; 0x70
   3df42:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
   3df46:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
   3df4a:	b112      	cbz	r2, 3df52 <interface_shutdown+0x4a>
   3df4c:	2270      	movs	r2, #112	; 0x70
   3df4e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
   3df52:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
   3df56:	b112      	cbz	r2, 3df5e <interface_shutdown+0x56>
   3df58:	2270      	movs	r2, #112	; 0x70
   3df5a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
   3df5e:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   3df62:	b112      	cbz	r2, 3df6a <interface_shutdown+0x62>
   3df64:	2270      	movs	r2, #112	; 0x70
   3df66:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   3df6a:	f7ed fbe9 	bl	2b740 <bsd_os_application_irq_set>
   3df6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3df72:	ac02      	add	r4, sp, #8
   3df74:	f844 3d04 	str.w	r3, [r4, #-4]!
   3df78:	4621      	mov	r1, r4
   3df7a:	2000      	movs	r0, #0
   3df7c:	f7ed fa24 	bl	2b3c8 <bsd_os_timedwait>
   3df80:	9b01      	ldr	r3, [sp, #4]
   3df82:	2b00      	cmp	r3, #0
   3df84:	dcf8      	bgt.n	3df78 <interface_shutdown+0x70>
   3df86:	4c0e      	ldr	r4, [pc, #56]	; (3dfc0 <interface_shutdown+0xb8>)
   3df88:	f504 75b4 	add.w	r5, r4, #360	; 0x168
   3df8c:	e009      	b.n	3dfa2 <interface_shutdown+0x9a>
   3df8e:	f7fe fd11 	bl	3c9b4 <packet_handler_delete>
   3df92:	2228      	movs	r2, #40	; 0x28
   3df94:	4620      	mov	r0, r4
   3df96:	2100      	movs	r1, #0
   3df98:	4414      	add	r4, r2
   3df9a:	f00a f915 	bl	481c8 <memset>
   3df9e:	42ac      	cmp	r4, r5
   3dfa0:	d00a      	beq.n	3dfb8 <interface_shutdown+0xb0>
   3dfa2:	69e0      	ldr	r0, [r4, #28]
   3dfa4:	2800      	cmp	r0, #0
   3dfa6:	d1f2      	bne.n	3df8e <interface_shutdown+0x86>
   3dfa8:	2228      	movs	r2, #40	; 0x28
   3dfaa:	4601      	mov	r1, r0
   3dfac:	4620      	mov	r0, r4
   3dfae:	4414      	add	r4, r2
   3dfb0:	f00a f90a 	bl	481c8 <memset>
   3dfb4:	42ac      	cmp	r4, r5
   3dfb6:	d1f4      	bne.n	3dfa2 <interface_shutdown+0x9a>
   3dfb8:	2000      	movs	r0, #0
   3dfba:	b003      	add	sp, #12
   3dfbc:	bd30      	pop	{r4, r5, pc}
   3dfbe:	bf00      	nop
   3dfc0:	2002d1c8 	.word	0x2002d1c8

0003dfc4 <interface_socket_fcntl>:
   3dfc4:	2808      	cmp	r0, #8
   3dfc6:	b510      	push	{r4, lr}
   3dfc8:	d826      	bhi.n	3e018 <interface_socket_fcntl+0x54>
   3dfca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   3dfce:	4c1b      	ldr	r4, [pc, #108]	; (3e03c <interface_socket_fcntl+0x78>)
   3dfd0:	00c3      	lsls	r3, r0, #3
   3dfd2:	58e0      	ldr	r0, [r4, r3]
   3dfd4:	b300      	cbz	r0, 3e018 <interface_socket_fcntl+0x54>
   3dfd6:	2901      	cmp	r1, #1
   3dfd8:	d005      	beq.n	3dfe6 <interface_socket_fcntl+0x22>
   3dfda:	2902      	cmp	r1, #2
   3dfdc:	d122      	bne.n	3e024 <interface_socket_fcntl+0x60>
   3dfde:	58e0      	ldr	r0, [r4, r3]
   3dfe0:	f3c0 7000 	ubfx	r0, r0, #28, #1
   3dfe4:	bd10      	pop	{r4, pc}
   3dfe6:	07d2      	lsls	r2, r2, #31
   3dfe8:	d410      	bmi.n	3e00c <interface_socket_fcntl+0x48>
   3dfea:	58e0      	ldr	r0, [r4, r3]
   3dfec:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
   3dff0:	d11e      	bne.n	3e030 <interface_socket_fcntl+0x6c>
   3dff2:	58e2      	ldr	r2, [r4, r3]
   3dff4:	b292      	uxth	r2, r2
   3dff6:	2a0a      	cmp	r2, #10
   3dff8:	d01a      	beq.n	3e030 <interface_socket_fcntl+0x6c>
   3dffa:	58e2      	ldr	r2, [r4, r3]
   3dffc:	b292      	uxth	r2, r2
   3dffe:	2a0b      	cmp	r2, #11
   3e000:	d016      	beq.n	3e030 <interface_socket_fcntl+0x6c>
   3e002:	58e2      	ldr	r2, [r4, r3]
   3e004:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   3e008:	50e2      	str	r2, [r4, r3]
   3e00a:	bd10      	pop	{r4, pc}
   3e00c:	58e2      	ldr	r2, [r4, r3]
   3e00e:	2000      	movs	r0, #0
   3e010:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   3e014:	50e2      	str	r2, [r4, r3]
   3e016:	bd10      	pop	{r4, pc}
   3e018:	2009      	movs	r0, #9
   3e01a:	f7ed fa95 	bl	2b548 <bsd_os_errno_set>
   3e01e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e022:	bd10      	pop	{r4, pc}
   3e024:	2016      	movs	r0, #22
   3e026:	f7ed fa8f 	bl	2b548 <bsd_os_errno_set>
   3e02a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e02e:	bd10      	pop	{r4, pc}
   3e030:	2023      	movs	r0, #35	; 0x23
   3e032:	f7ed fa89 	bl	2b548 <bsd_os_errno_set>
   3e036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3e03a:	bd10      	pop	{r4, pc}
   3e03c:	2002d1c8 	.word	0x2002d1c8

0003e040 <at_client_evt_handler>:
   3e040:	b120      	cbz	r0, 3e04c <at_client_evt_handler+0xc>
   3e042:	f850 1b08 	ldr.w	r1, [r0], #8
   3e046:	0c09      	lsrs	r1, r1, #16
   3e048:	f7fc bcc2 	b.w	3a9d0 <rpc_at_event_handler>
   3e04c:	4770      	bx	lr
   3e04e:	bf00      	nop

0003e050 <rpc_at_client_init>:
   3e050:	4801      	ldr	r0, [pc, #4]	; (3e058 <rpc_at_client_init+0x8>)
   3e052:	f7fb b9ff 	b.w	39454 <rpc_client_register>
   3e056:	bf00      	nop
   3e058:	0004a77c 	.word	0x0004a77c

0003e05c <rpc_at_client_deinit>:
   3e05c:	2003      	movs	r0, #3
   3e05e:	f7fb ba63 	b.w	39528 <rpc_client_unregister>
   3e062:	bf00      	nop

0003e064 <rpc_at_client_request_alloc>:
   3e064:	b180      	cbz	r0, 3e088 <rpc_at_client_request_alloc+0x24>
   3e066:	2300      	movs	r3, #0
   3e068:	b510      	push	{r4, lr}
   3e06a:	b082      	sub	sp, #8
   3e06c:	aa02      	add	r2, sp, #8
   3e06e:	4604      	mov	r4, r0
   3e070:	f842 3d04 	str.w	r3, [r2, #-4]!
   3e074:	2003      	movs	r0, #3
   3e076:	f7fb faad 	bl	395d4 <rpc_message_alloc>
   3e07a:	b918      	cbnz	r0, 3e084 <rpc_at_client_request_alloc+0x20>
   3e07c:	9b01      	ldr	r3, [sp, #4]
   3e07e:	b10b      	cbz	r3, 3e084 <rpc_at_client_request_alloc+0x20>
   3e080:	3308      	adds	r3, #8
   3e082:	6023      	str	r3, [r4, #0]
   3e084:	b002      	add	sp, #8
   3e086:	bd10      	pop	{r4, pc}
   3e088:	200e      	movs	r0, #14
   3e08a:	4770      	bx	lr

0003e08c <rpc_at_client_request_send>:
   3e08c:	b150      	cbz	r0, 3e0a4 <rpc_at_client_request_send+0x18>
   3e08e:	4603      	mov	r3, r0
   3e090:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   3e094:	2003      	movs	r0, #3
   3e096:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   3e09a:	f843 1d08 	str.w	r1, [r3, #-8]!
   3e09e:	4619      	mov	r1, r3
   3e0a0:	f7fb ba88 	b.w	395b4 <rpc_message_send>
   3e0a4:	200e      	movs	r0, #14
   3e0a6:	4770      	bx	lr

0003e0a8 <rpc_at_client_message_free>:
   3e0a8:	b120      	cbz	r0, 3e0b4 <rpc_at_client_message_free+0xc>
   3e0aa:	f1a0 0108 	sub.w	r1, r0, #8
   3e0ae:	2003      	movs	r0, #3
   3e0b0:	f7fb babc 	b.w	3962c <rpc_message_free>
   3e0b4:	200e      	movs	r0, #14
   3e0b6:	4770      	bx	lr

0003e0b8 <rpc_at_client_data_free>:
   3e0b8:	b118      	cbz	r0, 3e0c2 <rpc_at_client_data_free+0xa>
   3e0ba:	4601      	mov	r1, r0
   3e0bc:	2003      	movs	r0, #3
   3e0be:	f7fb bac1 	b.w	39644 <rpc_message_data_free>
   3e0c2:	200e      	movs	r0, #14
   3e0c4:	4770      	bx	lr
   3e0c6:	bf00      	nop

0003e0c8 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   3e0c8:	4a07      	ldr	r2, [pc, #28]	; (3e0e8 <SystemInit+0x20>)
   3e0ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   3e0ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   3e0d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   3e0d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   3e0da:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   3e0de:	4b03      	ldr	r3, [pc, #12]	; (3e0ec <SystemInit+0x24>)
   3e0e0:	4a03      	ldr	r2, [pc, #12]	; (3e0f0 <SystemInit+0x28>)
   3e0e2:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3e0e4:	4770      	bx	lr
   3e0e6:	bf00      	nop
   3e0e8:	e000ed00 	.word	0xe000ed00
   3e0ec:	200208d0 	.word	0x200208d0
   3e0f0:	03d09000 	.word	0x03d09000

0003e0f4 <nrf_clock_is_running.constprop.2>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   3e0f4:	b508      	push	{r3, lr}
    switch (domain)
   3e0f6:	b178      	cbz	r0, 3e118 <nrf_clock_is_running.constprop.2+0x24>
   3e0f8:	2801      	cmp	r0, #1
   3e0fa:	d019      	beq.n	3e130 <nrf_clock_is_running.constprop.2+0x3c>
            NRFX_ASSERT(0);
   3e0fc:	f240 3342 	movw	r3, #834	; 0x342
   3e100:	4a10      	ldr	r2, [pc, #64]	; (3e144 <nrf_clock_is_running.constprop.2+0x50>)
   3e102:	4911      	ldr	r1, [pc, #68]	; (3e148 <nrf_clock_is_running.constprop.2+0x54>)
   3e104:	4811      	ldr	r0, [pc, #68]	; (3e14c <nrf_clock_is_running.constprop.2+0x58>)
   3e106:	f006 f8e3 	bl	442d0 <printk>
   3e10a:	480e      	ldr	r0, [pc, #56]	; (3e144 <nrf_clock_is_running.constprop.2+0x50>)
   3e10c:	f240 3142 	movw	r1, #834	; 0x342
   3e110:	f006 faf8 	bl	44704 <assert_post_action>
            return false;
   3e114:	2000      	movs	r0, #0
   3e116:	e00a      	b.n	3e12e <nrf_clock_is_running.constprop.2+0x3a>
            if (p_clk_src != NULL)
   3e118:	4a0d      	ldr	r2, [pc, #52]	; (3e150 <nrf_clock_is_running.constprop.2+0x5c>)
   3e11a:	b121      	cbz	r1, 3e126 <nrf_clock_is_running.constprop.2+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   3e11c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   3e120:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3e124:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3e126:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e12a:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   3e12e:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   3e130:	4a07      	ldr	r2, [pc, #28]	; (3e150 <nrf_clock_is_running.constprop.2+0x5c>)
   3e132:	b121      	cbz	r1, 3e13e <nrf_clock_is_running.constprop.2+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3e134:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   3e138:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   3e13c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   3e13e:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   3e142:	e7f2      	b.n	3e12a <nrf_clock_is_running.constprop.2+0x36>
   3e144:	000520e4 	.word	0x000520e4
   3e148:	00052672 	.word	0x00052672
   3e14c:	0004b33b 	.word	0x0004b33b
   3e150:	40005000 	.word	0x40005000

0003e154 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   3e154:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   3e156:	4604      	mov	r4, r0
   3e158:	b948      	cbnz	r0, 3e16e <nrfx_clock_init+0x1a>
   3e15a:	490a      	ldr	r1, [pc, #40]	; (3e184 <nrfx_clock_init+0x30>)
   3e15c:	480a      	ldr	r0, [pc, #40]	; (3e188 <nrfx_clock_init+0x34>)
   3e15e:	23b3      	movs	r3, #179	; 0xb3
   3e160:	4a0a      	ldr	r2, [pc, #40]	; (3e18c <nrfx_clock_init+0x38>)
   3e162:	f006 f8b5 	bl	442d0 <printk>
   3e166:	21b3      	movs	r1, #179	; 0xb3
   3e168:	4808      	ldr	r0, [pc, #32]	; (3e18c <nrfx_clock_init+0x38>)
   3e16a:	f006 facb 	bl	44704 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   3e16e:	4b08      	ldr	r3, [pc, #32]	; (3e190 <nrfx_clock_init+0x3c>)
   3e170:	791a      	ldrb	r2, [r3, #4]
   3e172:	b922      	cbnz	r2, 3e17e <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3e174:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   3e176:	4807      	ldr	r0, [pc, #28]	; (3e194 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   3e178:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   3e17a:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   3e17c:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   3e17e:	4806      	ldr	r0, [pc, #24]	; (3e198 <nrfx_clock_init+0x44>)
    return err_code;
   3e180:	e7fc      	b.n	3e17c <nrfx_clock_init+0x28>
   3e182:	bf00      	nop
   3e184:	00052173 	.word	0x00052173
   3e188:	0004b33b 	.word	0x0004b33b
   3e18c:	00052136 	.word	0x00052136
   3e190:	20026108 	.word	0x20026108
   3e194:	0bad0000 	.word	0x0bad0000
   3e198:	0bad000c 	.word	0x0bad000c

0003e19c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   3e19c:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e19e:	4b0b      	ldr	r3, [pc, #44]	; (3e1cc <nrfx_clock_enable+0x30>)
   3e1a0:	791b      	ldrb	r3, [r3, #4]
   3e1a2:	b94b      	cbnz	r3, 3e1b8 <nrfx_clock_enable+0x1c>
   3e1a4:	490a      	ldr	r1, [pc, #40]	; (3e1d0 <nrfx_clock_enable+0x34>)
   3e1a6:	480b      	ldr	r0, [pc, #44]	; (3e1d4 <nrfx_clock_enable+0x38>)
   3e1a8:	23cc      	movs	r3, #204	; 0xcc
   3e1aa:	4a0b      	ldr	r2, [pc, #44]	; (3e1d8 <nrfx_clock_enable+0x3c>)
   3e1ac:	f006 f890 	bl	442d0 <printk>
   3e1b0:	21cc      	movs	r1, #204	; 0xcc
   3e1b2:	4809      	ldr	r0, [pc, #36]	; (3e1d8 <nrfx_clock_enable+0x3c>)
   3e1b4:	f006 faa6 	bl	44704 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3e1b8:	2005      	movs	r0, #5
   3e1ba:	f7e9 fa9f 	bl	276fc <arch_irq_is_enabled>
   3e1be:	b920      	cbnz	r0, 3e1ca <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   3e1c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3e1c4:	2005      	movs	r0, #5
   3e1c6:	f7e9 ba89 	b.w	276dc <arch_irq_enable>
   3e1ca:	bd08      	pop	{r3, pc}
   3e1cc:	20026108 	.word	0x20026108
   3e1d0:	00052118 	.word	0x00052118
   3e1d4:	0004b33b 	.word	0x0004b33b
   3e1d8:	00052136 	.word	0x00052136

0003e1dc <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e1dc:	4b22      	ldr	r3, [pc, #136]	; (3e268 <nrfx_clock_start+0x8c>)
{
   3e1de:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e1e0:	791b      	ldrb	r3, [r3, #4]
{
   3e1e2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e1e4:	b95b      	cbnz	r3, 3e1fe <nrfx_clock_start+0x22>
   3e1e6:	4921      	ldr	r1, [pc, #132]	; (3e26c <nrfx_clock_start+0x90>)
   3e1e8:	4821      	ldr	r0, [pc, #132]	; (3e270 <nrfx_clock_start+0x94>)
   3e1ea:	f44f 7384 	mov.w	r3, #264	; 0x108
   3e1ee:	4a21      	ldr	r2, [pc, #132]	; (3e274 <nrfx_clock_start+0x98>)
   3e1f0:	f006 f86e 	bl	442d0 <printk>
   3e1f4:	f44f 7184 	mov.w	r1, #264	; 0x108
   3e1f8:	481e      	ldr	r0, [pc, #120]	; (3e274 <nrfx_clock_start+0x98>)
   3e1fa:	f006 fa83 	bl	44704 <assert_post_action>
    switch (domain)
   3e1fe:	b174      	cbz	r4, 3e21e <nrfx_clock_start+0x42>
   3e200:	2c01      	cmp	r4, #1
   3e202:	d027      	beq.n	3e254 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3e204:	f44f 739d 	mov.w	r3, #314	; 0x13a
   3e208:	4a1a      	ldr	r2, [pc, #104]	; (3e274 <nrfx_clock_start+0x98>)
   3e20a:	491b      	ldr	r1, [pc, #108]	; (3e278 <nrfx_clock_start+0x9c>)
   3e20c:	4818      	ldr	r0, [pc, #96]	; (3e270 <nrfx_clock_start+0x94>)
   3e20e:	f006 f85f 	bl	442d0 <printk>
   3e212:	f44f 719d 	mov.w	r1, #314	; 0x13a
   3e216:	4817      	ldr	r0, [pc, #92]	; (3e274 <nrfx_clock_start+0x98>)
   3e218:	f006 fa74 	bl	44704 <assert_post_action>
            break;
    }
}
   3e21c:	e016      	b.n	3e24c <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   3e21e:	f10d 0107 	add.w	r1, sp, #7
   3e222:	4620      	mov	r0, r4
   3e224:	f7ff ff66 	bl	3e0f4 <nrf_clock_is_running.constprop.2>
   3e228:	4b14      	ldr	r3, [pc, #80]	; (3e27c <nrfx_clock_start+0xa0>)
   3e22a:	b188      	cbz	r0, 3e250 <nrfx_clock_start+0x74>
   3e22c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   3e230:	2a02      	cmp	r2, #2
   3e232:	d10d      	bne.n	3e250 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e234:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e238:	2200      	movs	r2, #0
   3e23a:	4b11      	ldr	r3, [pc, #68]	; (3e280 <nrfx_clock_start+0xa4>)
   3e23c:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   3e23e:	2202      	movs	r2, #2
   3e240:	681b      	ldr	r3, [r3, #0]
   3e242:	4b0e      	ldr	r3, [pc, #56]	; (3e27c <nrfx_clock_start+0xa0>)
   3e244:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e248:	2201      	movs	r2, #1
   3e24a:	609a      	str	r2, [r3, #8]
}
   3e24c:	b002      	add	sp, #8
   3e24e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e250:	2201      	movs	r2, #1
   3e252:	e7ef      	b.n	3e234 <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e254:	2200      	movs	r2, #0
   3e256:	4b0b      	ldr	r3, [pc, #44]	; (3e284 <nrfx_clock_start+0xa8>)
   3e258:	601a      	str	r2, [r3, #0]
   3e25a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3e25c:	4b07      	ldr	r3, [pc, #28]	; (3e27c <nrfx_clock_start+0xa0>)
   3e25e:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e262:	601c      	str	r4, [r3, #0]
   3e264:	e7f2      	b.n	3e24c <nrfx_clock_start+0x70>
   3e266:	bf00      	nop
   3e268:	20026108 	.word	0x20026108
   3e26c:	00052118 	.word	0x00052118
   3e270:	0004b33b 	.word	0x0004b33b
   3e274:	00052136 	.word	0x00052136
   3e278:	00052672 	.word	0x00052672
   3e27c:	40005000 	.word	0x40005000
   3e280:	40005104 	.word	0x40005104
   3e284:	40005100 	.word	0x40005100

0003e288 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e288:	4b2d      	ldr	r3, [pc, #180]	; (3e340 <nrfx_clock_stop+0xb8>)
{
   3e28a:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e28c:	791b      	ldrb	r3, [r3, #4]
{
   3e28e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3e290:	b95b      	cbnz	r3, 3e2aa <nrfx_clock_stop+0x22>
   3e292:	492c      	ldr	r1, [pc, #176]	; (3e344 <nrfx_clock_stop+0xbc>)
   3e294:	482c      	ldr	r0, [pc, #176]	; (3e348 <nrfx_clock_stop+0xc0>)
   3e296:	f240 1341 	movw	r3, #321	; 0x141
   3e29a:	4a2c      	ldr	r2, [pc, #176]	; (3e34c <nrfx_clock_stop+0xc4>)
   3e29c:	f006 f818 	bl	442d0 <printk>
   3e2a0:	f240 1141 	movw	r1, #321	; 0x141
   3e2a4:	4829      	ldr	r0, [pc, #164]	; (3e34c <nrfx_clock_stop+0xc4>)
   3e2a6:	f006 fa2d 	bl	44704 <assert_post_action>
    switch (domain)
   3e2aa:	b17c      	cbz	r4, 3e2cc <nrfx_clock_stop+0x44>
   3e2ac:	2c01      	cmp	r4, #1
   3e2ae:	d027      	beq.n	3e300 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3e2b0:	4927      	ldr	r1, [pc, #156]	; (3e350 <nrfx_clock_stop+0xc8>)
   3e2b2:	4825      	ldr	r0, [pc, #148]	; (3e348 <nrfx_clock_stop+0xc0>)
   3e2b4:	f240 135d 	movw	r3, #349	; 0x15d
   3e2b8:	4a24      	ldr	r2, [pc, #144]	; (3e34c <nrfx_clock_stop+0xc4>)
   3e2ba:	f006 f809 	bl	442d0 <printk>
   3e2be:	f240 115d 	movw	r1, #349	; 0x15d
   3e2c2:	4822      	ldr	r0, [pc, #136]	; (3e34c <nrfx_clock_stop+0xc4>)
   3e2c4:	f006 fa1e 	bl	44704 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   3e2c8:	b002      	add	sp, #8
   3e2ca:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   3e2cc:	2202      	movs	r2, #2
   3e2ce:	4b21      	ldr	r3, [pc, #132]	; (3e354 <nrfx_clock_stop+0xcc>)
   3e2d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e2d4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e2d6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e2da:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e2de:	f503 7382 	add.w	r3, r3, #260	; 0x104
   3e2e2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e2e4:	4b1c      	ldr	r3, [pc, #112]	; (3e358 <nrfx_clock_stop+0xd0>)
   3e2e6:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   3e2e8:	2100      	movs	r1, #0
   3e2ea:	4608      	mov	r0, r1
   3e2ec:	f7ff ff02 	bl	3e0f4 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   3e2f0:	2800      	cmp	r0, #0
   3e2f2:	d0e9      	beq.n	3e2c8 <nrfx_clock_stop+0x40>
   3e2f4:	2001      	movs	r0, #1
   3e2f6:	f009 fd4c 	bl	47d92 <nrfx_busy_wait>
   3e2fa:	3c01      	subs	r4, #1
   3e2fc:	d1f4      	bne.n	3e2e8 <nrfx_clock_stop+0x60>
   3e2fe:	e7e3      	b.n	3e2c8 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e300:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3e302:	4b14      	ldr	r3, [pc, #80]	; (3e354 <nrfx_clock_stop+0xcc>)
   3e304:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e308:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   3e30c:	f503 7380 	add.w	r3, r3, #256	; 0x100
   3e310:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e312:	4b12      	ldr	r3, [pc, #72]	; (3e35c <nrfx_clock_stop+0xd4>)
   3e314:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3e316:	f88d 4007 	strb.w	r4, [sp, #7]
   3e31a:	f242 7410 	movw	r4, #10000	; 0x2710
   3e31e:	f10d 0107 	add.w	r1, sp, #7
   3e322:	2001      	movs	r0, #1
   3e324:	f7ff fee6 	bl	3e0f4 <nrf_clock_is_running.constprop.2>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   3e328:	2800      	cmp	r0, #0
   3e32a:	d0cd      	beq.n	3e2c8 <nrfx_clock_stop+0x40>
   3e32c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   3e330:	2801      	cmp	r0, #1
   3e332:	d1c9      	bne.n	3e2c8 <nrfx_clock_stop+0x40>
   3e334:	f009 fd2d 	bl	47d92 <nrfx_busy_wait>
   3e338:	3c01      	subs	r4, #1
   3e33a:	d1f0      	bne.n	3e31e <nrfx_clock_stop+0x96>
   3e33c:	e7c4      	b.n	3e2c8 <nrfx_clock_stop+0x40>
   3e33e:	bf00      	nop
   3e340:	20026108 	.word	0x20026108
   3e344:	00052118 	.word	0x00052118
   3e348:	0004b33b 	.word	0x0004b33b
   3e34c:	00052136 	.word	0x00052136
   3e350:	00052672 	.word	0x00052672
   3e354:	40005000 	.word	0x40005000
   3e358:	4000500c 	.word	0x4000500c
   3e35c:	40005004 	.word	0x40005004

0003e360 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3e360:	4b15      	ldr	r3, [pc, #84]	; (3e3b8 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3e362:	b507      	push	{r0, r1, r2, lr}
   3e364:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3e366:	b14a      	cbz	r2, 3e37c <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e368:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   3e36a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e36c:	6018      	str	r0, [r3, #0]
   3e36e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   3e370:	4b12      	ldr	r3, [pc, #72]	; (3e3bc <nrfx_power_clock_irq_handler+0x5c>)
   3e372:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3e376:	4b12      	ldr	r3, [pc, #72]	; (3e3c0 <nrfx_power_clock_irq_handler+0x60>)
   3e378:	681b      	ldr	r3, [r3, #0]
   3e37a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   3e37c:	4b11      	ldr	r3, [pc, #68]	; (3e3c4 <nrfx_power_clock_irq_handler+0x64>)
   3e37e:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   3e380:	b182      	cbz	r2, 3e3a4 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e382:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   3e384:	f10d 0107 	add.w	r1, sp, #7
   3e388:	6018      	str	r0, [r3, #0]
   3e38a:	681b      	ldr	r3, [r3, #0]
   3e38c:	f7ff feb2 	bl	3e0f4 <nrf_clock_is_running.constprop.2>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   3e390:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3e394:	4b09      	ldr	r3, [pc, #36]	; (3e3bc <nrfx_power_clock_irq_handler+0x5c>)
   3e396:	2901      	cmp	r1, #1
   3e398:	f04f 0202 	mov.w	r2, #2
   3e39c:	d105      	bne.n	3e3aa <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3e39e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3e3a2:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   3e3a4:	b003      	add	sp, #12
   3e3a6:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   3e3aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   3e3ae:	4b04      	ldr	r3, [pc, #16]	; (3e3c0 <nrfx_power_clock_irq_handler+0x60>)
   3e3b0:	2001      	movs	r0, #1
   3e3b2:	681b      	ldr	r3, [r3, #0]
   3e3b4:	4798      	blx	r3
}
   3e3b6:	e7f5      	b.n	3e3a4 <nrfx_power_clock_irq_handler+0x44>
   3e3b8:	40005100 	.word	0x40005100
   3e3bc:	40005000 	.word	0x40005000
   3e3c0:	20026108 	.word	0x20026108
   3e3c4:	40005104 	.word	0x40005104

0003e3c8 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   3e3c8:	4a04      	ldr	r2, [pc, #16]	; (3e3dc <nvmc_word_write+0x14>)
   3e3ca:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   3e3ce:	07db      	lsls	r3, r3, #31
   3e3d0:	d5fb      	bpl.n	3e3ca <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   3e3d2:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   3e3d4:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   3e3d8:	4770      	bx	lr
   3e3da:	bf00      	nop
   3e3dc:	40039000 	.word	0x40039000

0003e3e0 <nrfx_nvmc_page_erase>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3e3e0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   3e3e4:	b510      	push	{r4, lr}
   3e3e6:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3e3e8:	d30b      	bcc.n	3e402 <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   3e3ea:	4910      	ldr	r1, [pc, #64]	; (3e42c <nrfx_nvmc_page_erase+0x4c>)
   3e3ec:	4810      	ldr	r0, [pc, #64]	; (3e430 <nrfx_nvmc_page_erase+0x50>)
   3e3ee:	f44f 7382 	mov.w	r3, #260	; 0x104
   3e3f2:	4a10      	ldr	r2, [pc, #64]	; (3e434 <nrfx_nvmc_page_erase+0x54>)
   3e3f4:	f005 ff6c 	bl	442d0 <printk>
   3e3f8:	f44f 7182 	mov.w	r1, #260	; 0x104
   3e3fc:	480d      	ldr	r0, [pc, #52]	; (3e434 <nrfx_nvmc_page_erase+0x54>)
   3e3fe:	f006 f981 	bl	44704 <assert_post_action>
    return !(addr % flash_page_size_get());
   3e402:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   3e406:	b97b      	cbnz	r3, 3e428 <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   3e408:	2202      	movs	r2, #2
   3e40a:	4b0b      	ldr	r3, [pc, #44]	; (3e438 <nrfx_nvmc_page_erase+0x58>)
   3e40c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   3e410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e414:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   3e416:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   3e41a:	07d2      	lsls	r2, r2, #31
   3e41c:	d5fb      	bpl.n	3e416 <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   3e41e:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   3e420:	4806      	ldr	r0, [pc, #24]	; (3e43c <nrfx_nvmc_page_erase+0x5c>)
   3e422:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   3e426:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   3e428:	4805      	ldr	r0, [pc, #20]	; (3e440 <nrfx_nvmc_page_erase+0x60>)
   3e42a:	e7fc      	b.n	3e426 <nrfx_nvmc_page_erase+0x46>
   3e42c:	0005219b 	.word	0x0005219b
   3e430:	0004b33b 	.word	0x0004b33b
   3e434:	000521de 	.word	0x000521de
   3e438:	40039000 	.word	0x40039000
   3e43c:	0bad0000 	.word	0x0bad0000
   3e440:	0bad000a 	.word	0x0bad000a

0003e444 <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3e444:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   3e448:	b570      	push	{r4, r5, r6, lr}
   3e44a:	4604      	mov	r4, r0
   3e44c:	460e      	mov	r6, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   3e44e:	d30b      	bcc.n	3e468 <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   3e450:	4912      	ldr	r1, [pc, #72]	; (3e49c <nrfx_nvmc_word_write+0x58>)
   3e452:	4813      	ldr	r0, [pc, #76]	; (3e4a0 <nrfx_nvmc_word_write+0x5c>)
   3e454:	f44f 73c9 	mov.w	r3, #402	; 0x192
   3e458:	4a12      	ldr	r2, [pc, #72]	; (3e4a4 <nrfx_nvmc_word_write+0x60>)
   3e45a:	f005 ff39 	bl	442d0 <printk>
   3e45e:	f44f 71c9 	mov.w	r1, #402	; 0x192
   3e462:	4810      	ldr	r0, [pc, #64]	; (3e4a4 <nrfx_nvmc_word_write+0x60>)
   3e464:	f006 f94e 	bl	44704 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   3e468:	07a3      	lsls	r3, r4, #30
   3e46a:	d00b      	beq.n	3e484 <nrfx_nvmc_word_write+0x40>
   3e46c:	490e      	ldr	r1, [pc, #56]	; (3e4a8 <nrfx_nvmc_word_write+0x64>)
   3e46e:	480c      	ldr	r0, [pc, #48]	; (3e4a0 <nrfx_nvmc_word_write+0x5c>)
   3e470:	f240 1393 	movw	r3, #403	; 0x193
   3e474:	4a0b      	ldr	r2, [pc, #44]	; (3e4a4 <nrfx_nvmc_word_write+0x60>)
   3e476:	f005 ff2b 	bl	442d0 <printk>
   3e47a:	f240 1193 	movw	r1, #403	; 0x193
   3e47e:	4809      	ldr	r0, [pc, #36]	; (3e4a4 <nrfx_nvmc_word_write+0x60>)
   3e480:	f006 f940 	bl	44704 <assert_post_action>
   3e484:	2301      	movs	r3, #1
   3e486:	4d09      	ldr	r5, [pc, #36]	; (3e4ac <nrfx_nvmc_word_write+0x68>)

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   3e488:	4631      	mov	r1, r6
   3e48a:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584
   3e48e:	4620      	mov	r0, r4
   3e490:	f7ff ff9a 	bl	3e3c8 <nvmc_word_write>
   3e494:	2300      	movs	r3, #0
   3e496:	f8c5 3584 	str.w	r3, [r5, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   3e49a:	bd70      	pop	{r4, r5, r6, pc}
   3e49c:	00052181 	.word	0x00052181
   3e4a0:	0004b33b 	.word	0x0004b33b
   3e4a4:	000521de 	.word	0x000521de
   3e4a8:	000521b5 	.word	0x000521b5
   3e4ac:	40039000 	.word	0x40039000

0003e4b0 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   3e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e4b4:	4606      	mov	r6, r0
   3e4b6:	4617      	mov	r7, r2
    NRFX_ASSERT(p_config);
   3e4b8:	460c      	mov	r4, r1
   3e4ba:	b949      	cbnz	r1, 3e4d0 <nrfx_wdt_init+0x20>
   3e4bc:	4921      	ldr	r1, [pc, #132]	; (3e544 <nrfx_wdt_init+0x94>)
   3e4be:	4822      	ldr	r0, [pc, #136]	; (3e548 <nrfx_wdt_init+0x98>)
   3e4c0:	233d      	movs	r3, #61	; 0x3d
   3e4c2:	4a22      	ldr	r2, [pc, #136]	; (3e54c <nrfx_wdt_init+0x9c>)
   3e4c4:	f005 ff04 	bl	442d0 <printk>
   3e4c8:	213d      	movs	r1, #61	; 0x3d
   3e4ca:	4820      	ldr	r0, [pc, #128]	; (3e54c <nrfx_wdt_init+0x9c>)
   3e4cc:	f006 f91a 	bl	44704 <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3e4d0:	7932      	ldrb	r2, [r6, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   3e4d2:	4b1f      	ldr	r3, [pc, #124]	; (3e550 <nrfx_wdt_init+0xa0>)
   3e4d4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   3e4d8:	604f      	str	r7, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   3e4da:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   3e4de:	bb69      	cbnz	r1, 3e53c <nrfx_wdt_init+0x8c>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   3e4e0:	2001      	movs	r0, #1
   3e4e2:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   3e4e6:	7822      	ldrb	r2, [r4, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   3e4e8:	6833      	ldr	r3, [r6, #0]
   3e4ea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3e4ee:	6863      	ldr	r3, [r4, #4]
   3e4f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3e4f4:	0c5d      	lsrs	r5, r3, #17
   3e4f6:	03dc      	lsls	r4, r3, #15
   3e4f8:	4620      	mov	r0, r4
   3e4fa:	2300      	movs	r3, #0
   3e4fc:	4629      	mov	r1, r5
   3e4fe:	f7de fcdd 	bl	1cebc <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3e502:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   3e506:	bf08      	it	eq
   3e508:	2c00      	cmpeq	r4, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   3e50a:	4680      	mov	r8, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   3e50c:	d309      	bcc.n	3e522 <nrfx_wdt_init+0x72>
   3e50e:	4911      	ldr	r1, [pc, #68]	; (3e554 <nrfx_wdt_init+0xa4>)
   3e510:	480d      	ldr	r0, [pc, #52]	; (3e548 <nrfx_wdt_init+0x98>)
   3e512:	2358      	movs	r3, #88	; 0x58
   3e514:	4a0d      	ldr	r2, [pc, #52]	; (3e54c <nrfx_wdt_init+0x9c>)
   3e516:	f005 fedb 	bl	442d0 <printk>
   3e51a:	2158      	movs	r1, #88	; 0x58
   3e51c:	480b      	ldr	r0, [pc, #44]	; (3e54c <nrfx_wdt_init+0x9c>)
   3e51e:	f006 f8f1 	bl	44704 <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   3e522:	6830      	ldr	r0, [r6, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   3e524:	f8c0 8504 	str.w	r8, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   3e528:	b137      	cbz	r7, 3e538 <nrfx_wdt_init+0x88>
    p_reg->INTENSET = mask;
   3e52a:	2301      	movs	r3, #1
   3e52c:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   3e530:	f340 3007 	sbfx	r0, r0, #12, #8
   3e534:	f7e9 f8d2 	bl	276dc <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   3e538:	4807      	ldr	r0, [pc, #28]	; (3e558 <nrfx_wdt_init+0xa8>)
   3e53a:	e000      	b.n	3e53e <nrfx_wdt_init+0x8e>
        return err_code;
   3e53c:	4807      	ldr	r0, [pc, #28]	; (3e55c <nrfx_wdt_init+0xac>)
}
   3e53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e542:	bf00      	nop
   3e544:	00052305 	.word	0x00052305
   3e548:	0004b33b 	.word	0x0004b33b
   3e54c:	000522ca 	.word	0x000522ca
   3e550:	20026110 	.word	0x20026110
   3e554:	0005230e 	.word	0x0005230e
   3e558:	0bad0000 	.word	0x0bad0000
   3e55c:	0bad0005 	.word	0x0bad0005

0003e560 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   3e560:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3e562:	4c13      	ldr	r4, [pc, #76]	; (3e5b0 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3e564:	7905      	ldrb	r5, [r0, #4]
{
   3e566:	4606      	mov	r6, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   3e568:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   3e56c:	785b      	ldrb	r3, [r3, #1]
   3e56e:	b94b      	cbnz	r3, 3e584 <nrfx_wdt_enable+0x24>
   3e570:	4910      	ldr	r1, [pc, #64]	; (3e5b4 <nrfx_wdt_enable+0x54>)
   3e572:	4811      	ldr	r0, [pc, #68]	; (3e5b8 <nrfx_wdt_enable+0x58>)
   3e574:	236e      	movs	r3, #110	; 0x6e
   3e576:	4a11      	ldr	r2, [pc, #68]	; (3e5bc <nrfx_wdt_enable+0x5c>)
   3e578:	f005 feaa 	bl	442d0 <printk>
   3e57c:	216e      	movs	r1, #110	; 0x6e
   3e57e:	480f      	ldr	r0, [pc, #60]	; (3e5bc <nrfx_wdt_enable+0x5c>)
   3e580:	f006 f8c0 	bl	44704 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3e584:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   3e588:	2b01      	cmp	r3, #1
   3e58a:	d009      	beq.n	3e5a0 <nrfx_wdt_enable+0x40>
   3e58c:	490c      	ldr	r1, [pc, #48]	; (3e5c0 <nrfx_wdt_enable+0x60>)
   3e58e:	480a      	ldr	r0, [pc, #40]	; (3e5b8 <nrfx_wdt_enable+0x58>)
   3e590:	236f      	movs	r3, #111	; 0x6f
   3e592:	4a0a      	ldr	r2, [pc, #40]	; (3e5bc <nrfx_wdt_enable+0x5c>)
   3e594:	f005 fe9c 	bl	442d0 <printk>
   3e598:	216f      	movs	r1, #111	; 0x6f
   3e59a:	4808      	ldr	r0, [pc, #32]	; (3e5bc <nrfx_wdt_enable+0x5c>)
   3e59c:	f006 f8b2 	bl	44704 <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   3e5a0:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   3e5a2:	6833      	ldr	r3, [r6, #0]
   3e5a4:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   3e5a6:	2302      	movs	r3, #2
   3e5a8:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   3e5ac:	bd70      	pop	{r4, r5, r6, pc}
   3e5ae:	bf00      	nop
   3e5b0:	20026110 	.word	0x20026110
   3e5b4:	00052289 	.word	0x00052289
   3e5b8:	0004b33b 	.word	0x0004b33b
   3e5bc:	000522ca 	.word	0x000522ca
   3e5c0:	000522a0 	.word	0x000522a0

0003e5c4 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   3e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e5c6:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   3e5c8:	7907      	ldrb	r7, [r0, #4]

    NRFX_ASSERT(p_channel_id);
   3e5ca:	460e      	mov	r6, r1
   3e5cc:	b949      	cbnz	r1, 3e5e2 <nrfx_wdt_channel_alloc+0x1e>
   3e5ce:	491c      	ldr	r1, [pc, #112]	; (3e640 <nrfx_wdt_channel_alloc+0x7c>)
   3e5d0:	481c      	ldr	r0, [pc, #112]	; (3e644 <nrfx_wdt_channel_alloc+0x80>)
   3e5d2:	2385      	movs	r3, #133	; 0x85
   3e5d4:	4a1c      	ldr	r2, [pc, #112]	; (3e648 <nrfx_wdt_channel_alloc+0x84>)
   3e5d6:	f005 fe7b 	bl	442d0 <printk>
   3e5da:	2185      	movs	r1, #133	; 0x85
   3e5dc:	481a      	ldr	r0, [pc, #104]	; (3e648 <nrfx_wdt_channel_alloc+0x84>)
   3e5de:	f006 f891 	bl	44704 <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   3e5e2:	4c1a      	ldr	r4, [pc, #104]	; (3e64c <nrfx_wdt_channel_alloc+0x88>)
   3e5e4:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   3e5e8:	2a01      	cmp	r2, #1
   3e5ea:	d009      	beq.n	3e600 <nrfx_wdt_channel_alloc+0x3c>
   3e5ec:	4918      	ldr	r1, [pc, #96]	; (3e650 <nrfx_wdt_channel_alloc+0x8c>)
   3e5ee:	4815      	ldr	r0, [pc, #84]	; (3e644 <nrfx_wdt_channel_alloc+0x80>)
   3e5f0:	2386      	movs	r3, #134	; 0x86
   3e5f2:	4a15      	ldr	r2, [pc, #84]	; (3e648 <nrfx_wdt_channel_alloc+0x84>)
   3e5f4:	f005 fe6c 	bl	442d0 <printk>
   3e5f8:	2186      	movs	r1, #134	; 0x86
   3e5fa:	4813      	ldr	r0, [pc, #76]	; (3e648 <nrfx_wdt_channel_alloc+0x84>)
   3e5fc:	f006 f882 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3e600:	f04f 0320 	mov.w	r3, #32
   3e604:	f3ef 8c11 	mrs	ip, BASEPRI
   3e608:	f383 8811 	msr	BASEPRI, r3
   3e60c:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   3e610:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   3e614:	785a      	ldrb	r2, [r3, #1]
   3e616:	2a07      	cmp	r2, #7
   3e618:	d810      	bhi.n	3e63c <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   3e61a:	1c51      	adds	r1, r2, #1
   3e61c:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   3e61e:	2301      	movs	r3, #1
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   3e620:	6829      	ldr	r1, [r5, #0]
   3e622:	4093      	lsls	r3, r2
   3e624:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   3e628:	7032      	strb	r2, [r6, #0]
   3e62a:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   3e62c:	4809      	ldr	r0, [pc, #36]	; (3e654 <nrfx_wdt_channel_alloc+0x90>)
   3e62e:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   3e632:	f38c 8811 	msr	BASEPRI, ip
   3e636:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   3e63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   3e63c:	4806      	ldr	r0, [pc, #24]	; (3e658 <nrfx_wdt_channel_alloc+0x94>)
   3e63e:	e7f8      	b.n	3e632 <nrfx_wdt_channel_alloc+0x6e>
   3e640:	0005223a 	.word	0x0005223a
   3e644:	0004b33b 	.word	0x0004b33b
   3e648:	000522ca 	.word	0x000522ca
   3e64c:	20026110 	.word	0x20026110
   3e650:	000522a0 	.word	0x000522a0
   3e654:	0bad0000 	.word	0x0bad0000
   3e658:	0bad0002 	.word	0x0bad0002

0003e65c <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   3e65c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3e65e:	4b0c      	ldr	r3, [pc, #48]	; (3e690 <nrfx_wdt_channel_feed+0x34>)
   3e660:	7902      	ldrb	r2, [r0, #4]
{
   3e662:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3e664:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   3e668:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   3e66a:	2b02      	cmp	r3, #2
   3e66c:	d009      	beq.n	3e682 <nrfx_wdt_channel_feed+0x26>
   3e66e:	4909      	ldr	r1, [pc, #36]	; (3e694 <nrfx_wdt_channel_feed+0x38>)
   3e670:	4809      	ldr	r0, [pc, #36]	; (3e698 <nrfx_wdt_channel_feed+0x3c>)
   3e672:	239b      	movs	r3, #155	; 0x9b
   3e674:	4a09      	ldr	r2, [pc, #36]	; (3e69c <nrfx_wdt_channel_feed+0x40>)
   3e676:	f005 fe2b 	bl	442d0 <printk>
   3e67a:	219b      	movs	r1, #155	; 0x9b
   3e67c:	4807      	ldr	r0, [pc, #28]	; (3e69c <nrfx_wdt_channel_feed+0x40>)
   3e67e:	f006 f841 	bl	44704 <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   3e682:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   3e684:	4a06      	ldr	r2, [pc, #24]	; (3e6a0 <nrfx_wdt_channel_feed+0x44>)
   3e686:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   3e68a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   3e68e:	bd38      	pop	{r3, r4, r5, pc}
   3e690:	20026110 	.word	0x20026110
   3e694:	00052247 	.word	0x00052247
   3e698:	0004b33b 	.word	0x0004b33b
   3e69c:	000522ca 	.word	0x000522ca
   3e6a0:	6e524635 	.word	0x6e524635

0003e6a4 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   3e6a4:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   3e6a6:	4c05      	ldr	r4, [pc, #20]	; (3e6bc <nrfx_wdt_0_irq_handler+0x18>)
   3e6a8:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   3e6aa:	b12b      	cbz	r3, 3e6b8 <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   3e6ac:	4b04      	ldr	r3, [pc, #16]	; (3e6c0 <nrfx_wdt_0_irq_handler+0x1c>)
   3e6ae:	685b      	ldr	r3, [r3, #4]
   3e6b0:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3e6b2:	2300      	movs	r3, #0
   3e6b4:	6023      	str	r3, [r4, #0]
   3e6b6:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   3e6b8:	bd10      	pop	{r4, pc}
   3e6ba:	bf00      	nop
   3e6bc:	40018100 	.word	0x40018100
   3e6c0:	20026110 	.word	0x20026110

0003e6c4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   3e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3e6c6:	4b10      	ldr	r3, [pc, #64]	; (3e708 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   3e6c8:	4f10      	ldr	r7, [pc, #64]	; (3e70c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3e6ca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   3e6ce:	3001      	adds	r0, #1
   3e6d0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   3e6d4:	42ae      	cmp	r6, r5
   3e6d6:	d800      	bhi.n	3e6da <z_sys_init_run_level+0x16>
		}
	}
}
   3e6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   3e6da:	e9d5 3400 	ldrd	r3, r4, [r5]
   3e6de:	4620      	mov	r0, r4
   3e6e0:	4798      	blx	r3
   3e6e2:	b170      	cbz	r0, 3e702 <z_sys_init_run_level+0x3e>
   3e6e4:	b16c      	cbz	r4, 3e702 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   3e6e6:	2301      	movs	r3, #1
				(dev - __device_start));
   3e6e8:	1be4      	subs	r4, r4, r7
   3e6ea:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3e6ec:	4a08      	ldr	r2, [pc, #32]	; (3e710 <z_sys_init_run_level+0x4c>)
   3e6ee:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3e6f0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3e6f4:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   3e6f8:	fa03 f404 	lsl.w	r4, r3, r4
   3e6fc:	4304      	orrs	r4, r0
   3e6fe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   3e702:	3508      	adds	r5, #8
   3e704:	e7e6      	b.n	3e6d4 <z_sys_init_run_level+0x10>
   3e706:	bf00      	nop
   3e708:	0004a78c 	.word	0x0004a78c
   3e70c:	20020af4 	.word	0x20020af4
   3e710:	20020bb4 	.word	0x20020bb4

0003e714 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   3e714:	4b08      	ldr	r3, [pc, #32]	; (3e738 <z_device_ready+0x24>)
   3e716:	1ac0      	subs	r0, r0, r3
   3e718:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3e71a:	4b08      	ldr	r3, [pc, #32]	; (3e73c <z_device_ready+0x28>)
   3e71c:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   3e71e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   3e722:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3e724:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   3e728:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   3e72c:	4210      	tst	r0, r2
}
   3e72e:	bf0c      	ite	eq
   3e730:	4618      	moveq	r0, r3
   3e732:	2000      	movne	r0, #0
   3e734:	4770      	bx	lr
   3e736:	bf00      	nop
   3e738:	20020af4 	.word	0x20020af4
   3e73c:	20020bb4 	.word	0x20020bb4

0003e740 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   3e740:	4911      	ldr	r1, [pc, #68]	; (3e788 <z_impl_device_get_binding+0x48>)
{
   3e742:	b570      	push	{r4, r5, r6, lr}
   3e744:	4605      	mov	r5, r0
   3e746:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   3e748:	4c10      	ldr	r4, [pc, #64]	; (3e78c <z_impl_device_get_binding+0x4c>)
   3e74a:	428c      	cmp	r4, r1
   3e74c:	d104      	bne.n	3e758 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   3e74e:	4c0f      	ldr	r4, [pc, #60]	; (3e78c <z_impl_device_get_binding+0x4c>)
   3e750:	42b4      	cmp	r4, r6
   3e752:	d10a      	bne.n	3e76a <z_impl_device_get_binding+0x2a>
	return NULL;
   3e754:	2400      	movs	r4, #0
   3e756:	e014      	b.n	3e782 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   3e758:	4620      	mov	r0, r4
   3e75a:	f7ff ffdb 	bl	3e714 <z_device_ready>
   3e75e:	b110      	cbz	r0, 3e766 <z_impl_device_get_binding+0x26>
   3e760:	6823      	ldr	r3, [r4, #0]
   3e762:	42ab      	cmp	r3, r5
   3e764:	d00d      	beq.n	3e782 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   3e766:	3410      	adds	r4, #16
   3e768:	e7ef      	b.n	3e74a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3e76a:	4620      	mov	r0, r4
   3e76c:	f7ff ffd2 	bl	3e714 <z_device_ready>
   3e770:	b908      	cbnz	r0, 3e776 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   3e772:	3410      	adds	r4, #16
   3e774:	e7ec      	b.n	3e750 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3e776:	6821      	ldr	r1, [r4, #0]
   3e778:	4628      	mov	r0, r5
   3e77a:	f7de fd69 	bl	1d250 <strcmp>
   3e77e:	2800      	cmp	r0, #0
   3e780:	d1f7      	bne.n	3e772 <z_impl_device_get_binding+0x32>
}
   3e782:	4620      	mov	r0, r4
   3e784:	bd70      	pop	{r4, r5, r6, pc}
   3e786:	bf00      	nop
   3e788:	20020bb4 	.word	0x20020bb4
   3e78c:	20020af4 	.word	0x20020af4

0003e790 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   3e790:	4b01      	ldr	r3, [pc, #4]	; (3e798 <z_impl_z_errno+0x8>)
   3e792:	6898      	ldr	r0, [r3, #8]
}
   3e794:	3064      	adds	r0, #100	; 0x64
   3e796:	4770      	bx	lr
   3e798:	2002611c 	.word	0x2002611c

0003e79c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   3e79c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3e7a0:	4605      	mov	r5, r0
   3e7a2:	460f      	mov	r7, r1
	__asm__ volatile(
   3e7a4:	f04f 0320 	mov.w	r3, #32
   3e7a8:	f3ef 8911 	mrs	r9, BASEPRI
   3e7ac:	f383 8811 	msr	BASEPRI, r3
   3e7b0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   3e7b4:	f002 f87c 	bl	408b0 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   3e7b8:	2301      	movs	r3, #1
   3e7ba:	4606      	mov	r6, r0
   3e7bc:	f04f 0000 	mov.w	r0, #0
   3e7c0:	2200      	movs	r2, #0
   3e7c2:	f363 0007 	bfi	r0, r3, #0, #8
   3e7c6:	4c2d      	ldr	r4, [pc, #180]	; (3e87c <z_fatal_error+0xe0>)
   3e7c8:	4b2d      	ldr	r3, [pc, #180]	; (3e880 <z_fatal_error+0xe4>)
   3e7ca:	2d04      	cmp	r5, #4
   3e7cc:	eba4 0403 	sub.w	r4, r4, r3
   3e7d0:	bf98      	it	ls
   3e7d2:	4b2c      	ldrls	r3, [pc, #176]	; (3e884 <z_fatal_error+0xe8>)
   3e7d4:	f3c4 04c9 	ubfx	r4, r4, #3, #10
   3e7d8:	bf94      	ite	ls
   3e7da:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   3e7de:	4b2a      	ldrhi	r3, [pc, #168]	; (3e888 <z_fatal_error+0xec>)
   3e7e0:	9200      	str	r2, [sp, #0]
   3e7e2:	f364 108f 	bfi	r0, r4, #6, #10
   3e7e6:	462a      	mov	r2, r5
   3e7e8:	4928      	ldr	r1, [pc, #160]	; (3e88c <z_fatal_error+0xf0>)
   3e7ea:	f005 ff9c 	bl	44726 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3e7ee:	b16f      	cbz	r7, 3e80c <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3e7f0:	69fb      	ldr	r3, [r7, #28]
   3e7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   3e7f6:	b14b      	cbz	r3, 3e80c <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   3e7f8:	f04f 0000 	mov.w	r0, #0
   3e7fc:	2301      	movs	r3, #1
   3e7fe:	f363 0007 	bfi	r0, r3, #0, #8
   3e802:	f364 108f 	bfi	r0, r4, #6, #10
   3e806:	4922      	ldr	r1, [pc, #136]	; (3e890 <z_fatal_error+0xf4>)
   3e808:	f005 ff8d 	bl	44726 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   3e80c:	f04f 0800 	mov.w	r8, #0
   3e810:	2301      	movs	r3, #1
	const char *thread_name = k_thread_name_get(thread);
   3e812:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
   3e814:	f363 0807 	bfi	r8, r3, #0, #8
   3e818:	f364 188f 	bfi	r8, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
   3e81c:	f009 fb75 	bl	47f0a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3e820:	b348      	cbz	r0, 3e876 <z_fatal_error+0xda>
   3e822:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   3e824:	4b1b      	ldr	r3, [pc, #108]	; (3e894 <z_fatal_error+0xf8>)
   3e826:	2a00      	cmp	r2, #0
   3e828:	bf08      	it	eq
   3e82a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   3e82c:	f005 ff8e 	bl	4474c <log_strdup>
   3e830:	4632      	mov	r2, r6
   3e832:	4603      	mov	r3, r0
   3e834:	4918      	ldr	r1, [pc, #96]	; (3e898 <z_fatal_error+0xfc>)
   3e836:	4640      	mov	r0, r8
   3e838:	f005 ff75 	bl	44726 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   3e83c:	4639      	mov	r1, r7
   3e83e:	4628      	mov	r0, r5
   3e840:	f7e3 f8c4 	bl	219cc <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3e844:	2d04      	cmp	r5, #4
   3e846:	d10c      	bne.n	3e862 <z_fatal_error+0xc6>
   3e848:	4914      	ldr	r1, [pc, #80]	; (3e89c <z_fatal_error+0x100>)
   3e84a:	238f      	movs	r3, #143	; 0x8f
   3e84c:	4a14      	ldr	r2, [pc, #80]	; (3e8a0 <z_fatal_error+0x104>)
   3e84e:	4815      	ldr	r0, [pc, #84]	; (3e8a4 <z_fatal_error+0x108>)
   3e850:	f005 fd3e 	bl	442d0 <printk>
   3e854:	4814      	ldr	r0, [pc, #80]	; (3e8a8 <z_fatal_error+0x10c>)
   3e856:	f005 fd3b 	bl	442d0 <printk>
   3e85a:	218f      	movs	r1, #143	; 0x8f
   3e85c:	4810      	ldr	r0, [pc, #64]	; (3e8a0 <z_fatal_error+0x104>)
   3e85e:	f005 ff51 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3e862:	f389 8811 	msr	BASEPRI, r9
   3e866:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   3e86a:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   3e86c:	b003      	add	sp, #12
   3e86e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3e872:	f7e9 bc07 	b.w	28084 <z_impl_k_thread_abort>
		thread_name = "unknown";
   3e876:	4807      	ldr	r0, [pc, #28]	; (3e894 <z_fatal_error+0xf8>)
   3e878:	e7d8      	b.n	3e82c <z_fatal_error+0x90>
   3e87a:	bf00      	nop
   3e87c:	000498a8 	.word	0x000498a8
   3e880:	00049788 	.word	0x00049788
   3e884:	0004a7a4 	.word	0x0004a7a4
   3e888:	0005236e 	.word	0x0005236e
   3e88c:	00052384 	.word	0x00052384
   3e890:	000523ac 	.word	0x000523ac
   3e894:	0005237c 	.word	0x0005237c
   3e898:	000523cd 	.word	0x000523cd
   3e89c:	00052407 	.word	0x00052407
   3e8a0:	000523e5 	.word	0x000523e5
   3e8a4:	0004b33b 	.word	0x0004b33b
   3e8a8:	00052424 	.word	0x00052424

0003e8ac <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   3e8ac:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   3e8ae:	4d0b      	ldr	r5, [pc, #44]	; (3e8dc <idle+0x30>)
	__asm__ volatile(
   3e8b0:	f04f 0220 	mov.w	r2, #32
   3e8b4:	f3ef 8311 	mrs	r3, BASEPRI
   3e8b8:	f382 8811 	msr	BASEPRI, r2
   3e8bc:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   3e8c0:	f002 fd24 	bl	4130c <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3e8c4:	2101      	movs	r1, #1
	int32_t ticks = z_get_next_timeout_expiry();
   3e8c6:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   3e8c8:	2802      	cmp	r0, #2
   3e8ca:	bfd8      	it	le
   3e8cc:	4608      	movle	r0, r1
   3e8ce:	f002 fd65 	bl	4139c <z_set_timeout_expiry>
	_kernel.idle = ticks;
   3e8d2:	622c      	str	r4, [r5, #32]
	arch_cpu_idle();
   3e8d4:	f7e8 ffaa 	bl	2782c <arch_cpu_idle>
   3e8d8:	e7ea      	b.n	3e8b0 <idle+0x4>
   3e8da:	bf00      	nop
   3e8dc:	2002611c 	.word	0x2002611c

0003e8e0 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   3e8e0:	4802      	ldr	r0, [pc, #8]	; (3e8ec <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   3e8e2:	4a03      	ldr	r2, [pc, #12]	; (3e8f0 <z_bss_zero+0x10>)
   3e8e4:	2100      	movs	r1, #0
   3e8e6:	1a12      	subs	r2, r2, r0
   3e8e8:	f009 bc6e 	b.w	481c8 <memset>
   3e8ec:	20020e60 	.word	0x20020e60
   3e8f0:	2002d340 	.word	0x2002d340

0003e8f4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   3e8f4:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3e8f6:	4806      	ldr	r0, [pc, #24]	; (3e910 <z_data_copy+0x1c>)
   3e8f8:	4a06      	ldr	r2, [pc, #24]	; (3e914 <z_data_copy+0x20>)
   3e8fa:	4907      	ldr	r1, [pc, #28]	; (3e918 <z_data_copy+0x24>)
   3e8fc:	1a12      	subs	r2, r2, r0
   3e8fe:	f009 fc43 	bl	48188 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3e902:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   3e906:	4a05      	ldr	r2, [pc, #20]	; (3e91c <z_data_copy+0x28>)
   3e908:	4905      	ldr	r1, [pc, #20]	; (3e920 <z_data_copy+0x2c>)
   3e90a:	4806      	ldr	r0, [pc, #24]	; (3e924 <z_data_copy+0x30>)
   3e90c:	f009 bc3c 	b.w	48188 <memcpy>
   3e910:	20020000 	.word	0x20020000
   3e914:	20020e60 	.word	0x20020e60
   3e918:	00052c2c 	.word	0x00052c2c
   3e91c:	00000000 	.word	0x00000000
   3e920:	00052c2c 	.word	0x00052c2c
   3e924:	20020000 	.word	0x20020000

0003e928 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   3e928:	2201      	movs	r2, #1
{
   3e92a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   3e92c:	4b0b      	ldr	r3, [pc, #44]	; (3e95c <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3e92e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3e930:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3e932:	f7ff fec7 	bl	3e6c4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   3e936:	4a0a      	ldr	r2, [pc, #40]	; (3e960 <bg_thread_main+0x38>)
   3e938:	490a      	ldr	r1, [pc, #40]	; (3e964 <bg_thread_main+0x3c>)
   3e93a:	480b      	ldr	r0, [pc, #44]	; (3e968 <bg_thread_main+0x40>)
   3e93c:	f005 fcc8 	bl	442d0 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   3e940:	2003      	movs	r0, #3
   3e942:	f7ff febf 	bl	3e6c4 <z_sys_init_run_level>

	z_init_static_threads();
   3e946:	f002 f949 	bl	40bdc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   3e94a:	f7e3 fe15 	bl	22578 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   3e94e:	4a07      	ldr	r2, [pc, #28]	; (3e96c <bg_thread_main+0x44>)
   3e950:	7b13      	ldrb	r3, [r2, #12]
   3e952:	f023 0301 	bic.w	r3, r3, #1
   3e956:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3e958:	bd08      	pop	{r3, pc}
   3e95a:	bf00      	nop
   3e95c:	2002d1c4 	.word	0x2002d1c4
   3e960:	0004c55d 	.word	0x0004c55d
   3e964:	00052459 	.word	0x00052459
   3e968:	00052469 	.word	0x00052469
   3e96c:	200247c0 	.word	0x200247c0

0003e970 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   3e970:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   3e974:	b0b9      	sub	sp, #228	; 0xe4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3e976:	f7e6 f9df 	bl	24d38 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   3e97a:	4b34      	ldr	r3, [pc, #208]	; (3ea4c <z_cstart+0xdc>)
	uint32_t msp =
   3e97c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   3e980:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3e984:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3e988:	2400      	movs	r4, #0
   3e98a:	23e0      	movs	r3, #224	; 0xe0
   3e98c:	4d30      	ldr	r5, [pc, #192]	; (3ea50 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3e98e:	f04f 0b01 	mov.w	fp, #1
   3e992:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3e996:	77ec      	strb	r4, [r5, #31]
   3e998:	762c      	strb	r4, [r5, #24]
   3e99a:	766c      	strb	r4, [r5, #25]
   3e99c:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   3e99e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   3e9a0:	4e2c      	ldr	r6, [pc, #176]	; (3ea54 <z_cstart+0xe4>)
   3e9a2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3e9a6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3e9a8:	f7e9 fb34 	bl	28014 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   3e9ac:	f7e8 ff38 	bl	27820 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   3e9b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e9b4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3e9b6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3e9b8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   3e9bc:	4d26      	ldr	r5, [pc, #152]	; (3ea58 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   3e9be:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   3e9c2:	ab06      	add	r3, sp, #24
   3e9c4:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   3e9c6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   3e9c8:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   3e9cc:	f7ff fe7a 	bl	3e6c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   3e9d0:	2001      	movs	r0, #1
   3e9d2:	f7ff fe77 	bl	3e6c4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3e9d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 3ea70 <z_cstart+0x100>
	z_sched_init();
   3e9da:	f001 fde1 	bl	405a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3e9de:	4b1f      	ldr	r3, [pc, #124]	; (3ea5c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   3e9e0:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   3e9e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3e9e6:	491e      	ldr	r1, [pc, #120]	; (3ea60 <z_cstart+0xf0>)
   3e9e8:	9305      	str	r3, [sp, #20]
   3e9ea:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   3e9ee:	4643      	mov	r3, r8
   3e9f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   3e9f4:	9400      	str	r4, [sp, #0]
   3e9f6:	4630      	mov	r0, r6
   3e9f8:	f002 f846 	bl	40a88 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3e9fc:	7b73      	ldrb	r3, [r6, #13]
   3e9fe:	4682      	mov	sl, r0
   3ea00:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   3ea04:	4630      	mov	r0, r6
   3ea06:	7373      	strb	r3, [r6, #13]
   3ea08:	f001 f8c0 	bl	3fb8c <z_ready_thread>
	z_setup_new_thread(thread, stack,
   3ea0c:	230f      	movs	r3, #15
   3ea0e:	4f15      	ldr	r7, [pc, #84]	; (3ea64 <z_cstart+0xf4>)
   3ea10:	e9cd 4302 	strd	r4, r3, [sp, #8]
   3ea14:	f44f 72a0 	mov.w	r2, #320	; 0x140
   3ea18:	4b13      	ldr	r3, [pc, #76]	; (3ea68 <z_cstart+0xf8>)
   3ea1a:	4914      	ldr	r1, [pc, #80]	; (3ea6c <z_cstart+0xfc>)
   3ea1c:	e9cd b404 	strd	fp, r4, [sp, #16]
   3ea20:	e9cd 4400 	strd	r4, r4, [sp]
   3ea24:	4638      	mov	r0, r7
   3ea26:	f002 f82f 	bl	40a88 <z_setup_new_thread>
   3ea2a:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   3ea2c:	60ef      	str	r7, [r5, #12]
   3ea2e:	f023 0304 	bic.w	r3, r3, #4
   3ea32:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3ea34:	f105 0318 	add.w	r3, r5, #24
		_kernel.cpus[i].id = i;
   3ea38:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   3ea3a:	f8c5 9004 	str.w	r9, [r5, #4]
	list->tail = (sys_dnode_t *)list;
   3ea3e:	e9c5 3306 	strd	r3, r3, [r5, #24]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3ea42:	4642      	mov	r2, r8
   3ea44:	4651      	mov	r1, sl
   3ea46:	4630      	mov	r0, r6
   3ea48:	f7e8 fec4 	bl	277d4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   3ea4c:	20031e80 	.word	0x20031e80
   3ea50:	e000ed00 	.word	0xe000ed00
   3ea54:	200247c0 	.word	0x200247c0
   3ea58:	2002611c 	.word	0x2002611c
   3ea5c:	00052493 	.word	0x00052493
   3ea60:	2002fd40 	.word	0x2002fd40
   3ea64:	200246f8 	.word	0x200246f8
   3ea68:	0003e8ad 	.word	0x0003e8ad
   3ea6c:	20031d40 	.word	0x20031d40
   3ea70:	0003e929 	.word	0x0003e929

0003ea74 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   3ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3ea76:	4d0f      	ldr	r5, [pc, #60]	; (3eab4 <statics_init+0x40>)
   3ea78:	4c0f      	ldr	r4, [pc, #60]	; (3eab8 <statics_init+0x44>)
   3ea7a:	462f      	mov	r7, r5
   3ea7c:	4e0f      	ldr	r6, [pc, #60]	; (3eabc <statics_init+0x48>)
   3ea7e:	42ac      	cmp	r4, r5
   3ea80:	d90c      	bls.n	3ea9c <statics_init+0x28>
   3ea82:	490f      	ldr	r1, [pc, #60]	; (3eac0 <statics_init+0x4c>)
   3ea84:	2315      	movs	r3, #21
   3ea86:	4632      	mov	r2, r6
   3ea88:	480e      	ldr	r0, [pc, #56]	; (3eac4 <statics_init+0x50>)
   3ea8a:	f005 fc21 	bl	442d0 <printk>
   3ea8e:	480e      	ldr	r0, [pc, #56]	; (3eac8 <statics_init+0x54>)
   3ea90:	f005 fc1e 	bl	442d0 <printk>
   3ea94:	2115      	movs	r1, #21
   3ea96:	4630      	mov	r0, r6
   3ea98:	f005 fe34 	bl	44704 <assert_post_action>
   3ea9c:	42bc      	cmp	r4, r7
   3ea9e:	d301      	bcc.n	3eaa4 <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   3eaa0:	2000      	movs	r0, #0
   3eaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   3eaa4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   3eaa8:	4620      	mov	r0, r4
   3eaaa:	f009 f97f 	bl	47dac <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3eaae:	3418      	adds	r4, #24
   3eab0:	e7e5      	b.n	3ea7e <statics_init+0xa>
   3eab2:	bf00      	nop
   3eab4:	20020c30 	.word	0x20020c30
   3eab8:	20020c18 	.word	0x20020c18
   3eabc:	000524dd 	.word	0x000524dd
   3eac0:	000524ff 	.word	0x000524ff
   3eac4:	0004b33b 	.word	0x0004b33b
   3eac8:	0004c5d9 	.word	0x0004c5d9

0003eacc <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   3eacc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ead0:	4606      	mov	r6, r0
   3ead2:	b085      	sub	sp, #20
   3ead4:	468a      	mov	sl, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   3ead6:	4610      	mov	r0, r2
   3ead8:	4619      	mov	r1, r3
{
   3eada:	4690      	mov	r8, r2
   3eadc:	4699      	mov	r9, r3
	int64_t now, end = z_timeout_end_calc(timeout);
   3eade:	f009 fa80 	bl	47fe2 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3eae2:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   3eae6:	4607      	mov	r7, r0
   3eae8:	468b      	mov	fp, r1
   3eaea:	f04f 0320 	mov.w	r3, #32
   3eaee:	f3ef 8511 	mrs	r5, BASEPRI
   3eaf2:	f383 8811 	msr	BASEPRI, r3
   3eaf6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eafa:	4620      	mov	r0, r4
   3eafc:	f002 f8fe 	bl	40cfc <z_spin_lock_valid>
   3eb00:	b968      	cbnz	r0, 3eb1e <k_heap_alloc+0x52>
   3eb02:	235c      	movs	r3, #92	; 0x5c
   3eb04:	4a3d      	ldr	r2, [pc, #244]	; (3ebfc <k_heap_alloc+0x130>)
   3eb06:	493e      	ldr	r1, [pc, #248]	; (3ec00 <k_heap_alloc+0x134>)
   3eb08:	483e      	ldr	r0, [pc, #248]	; (3ec04 <k_heap_alloc+0x138>)
   3eb0a:	f005 fbe1 	bl	442d0 <printk>
   3eb0e:	4621      	mov	r1, r4
   3eb10:	483d      	ldr	r0, [pc, #244]	; (3ec08 <k_heap_alloc+0x13c>)
   3eb12:	f005 fbdd 	bl	442d0 <printk>
   3eb16:	215c      	movs	r1, #92	; 0x5c
   3eb18:	4838      	ldr	r0, [pc, #224]	; (3ebfc <k_heap_alloc+0x130>)
   3eb1a:	f005 fdf3 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eb1e:	4620      	mov	r0, r4
   3eb20:	f002 f90a 	bl	40d38 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3eb24:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3eb28:	b17b      	cbz	r3, 3eb4a <k_heap_alloc+0x7e>
   3eb2a:	ea58 0309 	orrs.w	r3, r8, r9
   3eb2e:	d00c      	beq.n	3eb4a <k_heap_alloc+0x7e>
   3eb30:	4936      	ldr	r1, [pc, #216]	; (3ec0c <k_heap_alloc+0x140>)
   3eb32:	2323      	movs	r3, #35	; 0x23
   3eb34:	4a36      	ldr	r2, [pc, #216]	; (3ec10 <k_heap_alloc+0x144>)
   3eb36:	4833      	ldr	r0, [pc, #204]	; (3ec04 <k_heap_alloc+0x138>)
   3eb38:	f005 fbca 	bl	442d0 <printk>
   3eb3c:	4835      	ldr	r0, [pc, #212]	; (3ec14 <k_heap_alloc+0x148>)
   3eb3e:	f005 fbc7 	bl	442d0 <printk>
   3eb42:	2123      	movs	r1, #35	; 0x23
   3eb44:	4832      	ldr	r0, [pc, #200]	; (3ec10 <k_heap_alloc+0x144>)
   3eb46:	f005 fddd 	bl	44704 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eb4a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3ebfc <k_heap_alloc+0x130>

	while (ret == NULL) {
		ret = sys_heap_alloc(&h->heap, bytes);
   3eb4e:	4651      	mov	r1, sl
   3eb50:	4630      	mov	r0, r6
   3eb52:	f005 fda8 	bl	446a6 <sys_heap_alloc>
   3eb56:	4680      	mov	r8, r0

		now = z_tick_get();
   3eb58:	f002 fd38 	bl	415cc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3eb5c:	f1b8 0f00 	cmp.w	r8, #0
   3eb60:	d019      	beq.n	3eb96 <k_heap_alloc+0xca>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3eb62:	4620      	mov	r0, r4
   3eb64:	f002 f8d8 	bl	40d18 <z_spin_unlock_valid>
   3eb68:	b968      	cbnz	r0, 3eb86 <k_heap_alloc+0xba>
   3eb6a:	2384      	movs	r3, #132	; 0x84
   3eb6c:	4a23      	ldr	r2, [pc, #140]	; (3ebfc <k_heap_alloc+0x130>)
   3eb6e:	492a      	ldr	r1, [pc, #168]	; (3ec18 <k_heap_alloc+0x14c>)
   3eb70:	4824      	ldr	r0, [pc, #144]	; (3ec04 <k_heap_alloc+0x138>)
   3eb72:	f005 fbad 	bl	442d0 <printk>
   3eb76:	4621      	mov	r1, r4
   3eb78:	4828      	ldr	r0, [pc, #160]	; (3ec1c <k_heap_alloc+0x150>)
   3eb7a:	f005 fba9 	bl	442d0 <printk>
   3eb7e:	2184      	movs	r1, #132	; 0x84
   3eb80:	481e      	ldr	r0, [pc, #120]	; (3ebfc <k_heap_alloc+0x130>)
   3eb82:	f005 fdbf 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3eb86:	f385 8811 	msr	BASEPRI, r5
   3eb8a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3eb8e:	4640      	mov	r0, r8
   3eb90:	b005      	add	sp, #20
   3eb92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   3eb96:	1a3b      	subs	r3, r7, r0
   3eb98:	9302      	str	r3, [sp, #8]
   3eb9a:	eb6b 0301 	sbc.w	r3, fp, r1
   3eb9e:	9303      	str	r3, [sp, #12]
   3eba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3eba4:	2a01      	cmp	r2, #1
   3eba6:	f173 0300 	sbcs.w	r3, r3, #0
   3ebaa:	dbda      	blt.n	3eb62 <k_heap_alloc+0x96>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3ebac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   3ebb0:	4629      	mov	r1, r5
   3ebb2:	e9cd 2300 	strd	r2, r3, [sp]
   3ebb6:	4620      	mov	r0, r4
   3ebb8:	f106 020c 	add.w	r2, r6, #12
   3ebbc:	f001 fbaa 	bl	40314 <z_pend_curr>
	__asm__ volatile(
   3ebc0:	f04f 0320 	mov.w	r3, #32
   3ebc4:	f3ef 8511 	mrs	r5, BASEPRI
   3ebc8:	f383 8811 	msr	BASEPRI, r3
   3ebcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ebd0:	4620      	mov	r0, r4
   3ebd2:	f002 f893 	bl	40cfc <z_spin_lock_valid>
   3ebd6:	b968      	cbnz	r0, 3ebf4 <k_heap_alloc+0x128>
   3ebd8:	235c      	movs	r3, #92	; 0x5c
   3ebda:	464a      	mov	r2, r9
   3ebdc:	4908      	ldr	r1, [pc, #32]	; (3ec00 <k_heap_alloc+0x134>)
   3ebde:	4809      	ldr	r0, [pc, #36]	; (3ec04 <k_heap_alloc+0x138>)
   3ebe0:	f005 fb76 	bl	442d0 <printk>
   3ebe4:	4621      	mov	r1, r4
   3ebe6:	4808      	ldr	r0, [pc, #32]	; (3ec08 <k_heap_alloc+0x13c>)
   3ebe8:	f005 fb72 	bl	442d0 <printk>
   3ebec:	215c      	movs	r1, #92	; 0x5c
   3ebee:	4648      	mov	r0, r9
   3ebf0:	f005 fd88 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ebf4:	4620      	mov	r0, r4
   3ebf6:	f002 f89f 	bl	40d38 <z_spin_lock_set_owner>
	return k;
   3ebfa:	e7a8      	b.n	3eb4e <k_heap_alloc+0x82>
   3ebfc:	0004be5f 	.word	0x0004be5f
   3ec00:	0004be85 	.word	0x0004be85
   3ec04:	0004b33b 	.word	0x0004b33b
   3ec08:	0004be9a 	.word	0x0004be9a
   3ec0c:	00052498 	.word	0x00052498
   3ec10:	000524dd 	.word	0x000524dd
   3ec14:	0004c55b 	.word	0x0004c55b
   3ec18:	0004beb2 	.word	0x0004beb2
   3ec1c:	0004bec9 	.word	0x0004bec9

0003ec20 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   3ec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3ec22:	4605      	mov	r5, r0
   3ec24:	460f      	mov	r7, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3ec26:	f100 0414 	add.w	r4, r0, #20
   3ec2a:	f04f 0320 	mov.w	r3, #32
   3ec2e:	f3ef 8611 	mrs	r6, BASEPRI
   3ec32:	f383 8811 	msr	BASEPRI, r3
   3ec36:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ec3a:	4620      	mov	r0, r4
   3ec3c:	f002 f85e 	bl	40cfc <z_spin_lock_valid>
   3ec40:	b968      	cbnz	r0, 3ec5e <k_heap_free+0x3e>
   3ec42:	235c      	movs	r3, #92	; 0x5c
   3ec44:	4a1a      	ldr	r2, [pc, #104]	; (3ecb0 <k_heap_free+0x90>)
   3ec46:	491b      	ldr	r1, [pc, #108]	; (3ecb4 <k_heap_free+0x94>)
   3ec48:	481b      	ldr	r0, [pc, #108]	; (3ecb8 <k_heap_free+0x98>)
   3ec4a:	f005 fb41 	bl	442d0 <printk>
   3ec4e:	4621      	mov	r1, r4
   3ec50:	481a      	ldr	r0, [pc, #104]	; (3ecbc <k_heap_free+0x9c>)
   3ec52:	f005 fb3d 	bl	442d0 <printk>
   3ec56:	215c      	movs	r1, #92	; 0x5c
   3ec58:	4815      	ldr	r0, [pc, #84]	; (3ecb0 <k_heap_free+0x90>)
   3ec5a:	f005 fd53 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ec5e:	4620      	mov	r0, r4
   3ec60:	f002 f86a 	bl	40d38 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   3ec64:	4628      	mov	r0, r5
   3ec66:	4639      	mov	r1, r7
   3ec68:	f7e5 feea 	bl	24a40 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   3ec6c:	f105 000c 	add.w	r0, r5, #12
   3ec70:	f009 f920 	bl	47eb4 <z_unpend_all>
   3ec74:	b128      	cbz	r0, 3ec82 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   3ec76:	4631      	mov	r1, r6
   3ec78:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3ec7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   3ec7e:	f000 bd65 	b.w	3f74c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ec82:	4620      	mov	r0, r4
   3ec84:	f002 f848 	bl	40d18 <z_spin_unlock_valid>
   3ec88:	b968      	cbnz	r0, 3eca6 <k_heap_free+0x86>
   3ec8a:	2384      	movs	r3, #132	; 0x84
   3ec8c:	4a08      	ldr	r2, [pc, #32]	; (3ecb0 <k_heap_free+0x90>)
   3ec8e:	490c      	ldr	r1, [pc, #48]	; (3ecc0 <k_heap_free+0xa0>)
   3ec90:	4809      	ldr	r0, [pc, #36]	; (3ecb8 <k_heap_free+0x98>)
   3ec92:	f005 fb1d 	bl	442d0 <printk>
   3ec96:	4621      	mov	r1, r4
   3ec98:	480a      	ldr	r0, [pc, #40]	; (3ecc4 <k_heap_free+0xa4>)
   3ec9a:	f005 fb19 	bl	442d0 <printk>
   3ec9e:	2184      	movs	r1, #132	; 0x84
   3eca0:	4803      	ldr	r0, [pc, #12]	; (3ecb0 <k_heap_free+0x90>)
   3eca2:	f005 fd2f 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3eca6:	f386 8811 	msr	BASEPRI, r6
   3ecaa:	f3bf 8f6f 	isb	sy
}
   3ecae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3ecb0:	0004be5f 	.word	0x0004be5f
   3ecb4:	0004be85 	.word	0x0004be85
   3ecb8:	0004b33b 	.word	0x0004b33b
   3ecbc:	0004be9a 	.word	0x0004be9a
   3ecc0:	0004beb2 	.word	0x0004beb2
   3ecc4:	0004bec9 	.word	0x0004bec9

0003ecc8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   3ecc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3eccc:	4d16      	ldr	r5, [pc, #88]	; (3ed28 <init_mem_slab_module+0x60>)
   3ecce:	4c17      	ldr	r4, [pc, #92]	; (3ed2c <init_mem_slab_module+0x64>)
   3ecd0:	46a8      	mov	r8, r5
   3ecd2:	4e17      	ldr	r6, [pc, #92]	; (3ed30 <init_mem_slab_module+0x68>)
   3ecd4:	42ac      	cmp	r4, r5
   3ecd6:	d90c      	bls.n	3ecf2 <init_mem_slab_module+0x2a>
   3ecd8:	4916      	ldr	r1, [pc, #88]	; (3ed34 <init_mem_slab_module+0x6c>)
   3ecda:	2342      	movs	r3, #66	; 0x42
   3ecdc:	4632      	mov	r2, r6
   3ecde:	4816      	ldr	r0, [pc, #88]	; (3ed38 <init_mem_slab_module+0x70>)
   3ece0:	f005 faf6 	bl	442d0 <printk>
   3ece4:	4815      	ldr	r0, [pc, #84]	; (3ed3c <init_mem_slab_module+0x74>)
   3ece6:	f005 faf3 	bl	442d0 <printk>
   3ecea:	2142      	movs	r1, #66	; 0x42
   3ecec:	4630      	mov	r0, r6
   3ecee:	f005 fd09 	bl	44704 <assert_post_action>
   3ecf2:	4544      	cmp	r4, r8
   3ecf4:	d302      	bcc.n	3ecfc <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   3ecf6:	2000      	movs	r0, #0
	return rc;
}
   3ecf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3ecfc:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   3ed00:	ea42 0301 	orr.w	r3, r2, r1
   3ed04:	f013 0303 	ands.w	r3, r3, #3
   3ed08:	d10b      	bne.n	3ed22 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   3ed0a:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   3ed0c:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3ed0e:	4283      	cmp	r3, r0
   3ed10:	d101      	bne.n	3ed16 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   3ed12:	341c      	adds	r4, #28
   3ed14:	e7de      	b.n	3ecd4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   3ed16:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   3ed18:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3ed1a:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
   3ed1c:	6162      	str	r2, [r4, #20]
		p += slab->block_size;
   3ed1e:	440a      	add	r2, r1
   3ed20:	e7f5      	b.n	3ed0e <init_mem_slab_module+0x46>
		return -EINVAL;
   3ed22:	f06f 0015 	mvn.w	r0, #21
	return rc;
   3ed26:	e7e7      	b.n	3ecf8 <init_mem_slab_module+0x30>
   3ed28:	20020c18 	.word	0x20020c18
   3ed2c:	20020c18 	.word	0x20020c18
   3ed30:	00052515 	.word	0x00052515
   3ed34:	0005253a 	.word	0x0005253a
   3ed38:	0004b33b 	.word	0x0004b33b
   3ed3c:	0004c5d9 	.word	0x0004c5d9

0003ed40 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   3ed40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3ed44:	4604      	mov	r4, r0
   3ed46:	468a      	mov	sl, r1
   3ed48:	4690      	mov	r8, r2
   3ed4a:	4699      	mov	r9, r3
   3ed4c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3ed50:	b17b      	cbz	r3, 3ed72 <z_impl_k_msgq_put+0x32>
   3ed52:	ea58 0309 	orrs.w	r3, r8, r9
   3ed56:	d00c      	beq.n	3ed72 <z_impl_k_msgq_put+0x32>
   3ed58:	4940      	ldr	r1, [pc, #256]	; (3ee5c <z_impl_k_msgq_put+0x11c>)
   3ed5a:	2376      	movs	r3, #118	; 0x76
   3ed5c:	4a40      	ldr	r2, [pc, #256]	; (3ee60 <z_impl_k_msgq_put+0x120>)
   3ed5e:	4841      	ldr	r0, [pc, #260]	; (3ee64 <z_impl_k_msgq_put+0x124>)
   3ed60:	f005 fab6 	bl	442d0 <printk>
   3ed64:	4840      	ldr	r0, [pc, #256]	; (3ee68 <z_impl_k_msgq_put+0x128>)
   3ed66:	f005 fab3 	bl	442d0 <printk>
   3ed6a:	2176      	movs	r1, #118	; 0x76
   3ed6c:	483c      	ldr	r0, [pc, #240]	; (3ee60 <z_impl_k_msgq_put+0x120>)
   3ed6e:	f005 fcc9 	bl	44704 <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   3ed72:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   3ed76:	f04f 0320 	mov.w	r3, #32
   3ed7a:	f3ef 8711 	mrs	r7, BASEPRI
   3ed7e:	f383 8811 	msr	BASEPRI, r3
   3ed82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ed86:	4628      	mov	r0, r5
   3ed88:	f001 ffb8 	bl	40cfc <z_spin_lock_valid>
   3ed8c:	b968      	cbnz	r0, 3edaa <z_impl_k_msgq_put+0x6a>
   3ed8e:	235c      	movs	r3, #92	; 0x5c
   3ed90:	4a36      	ldr	r2, [pc, #216]	; (3ee6c <z_impl_k_msgq_put+0x12c>)
   3ed92:	4937      	ldr	r1, [pc, #220]	; (3ee70 <z_impl_k_msgq_put+0x130>)
   3ed94:	4833      	ldr	r0, [pc, #204]	; (3ee64 <z_impl_k_msgq_put+0x124>)
   3ed96:	f005 fa9b 	bl	442d0 <printk>
   3ed9a:	4629      	mov	r1, r5
   3ed9c:	4835      	ldr	r0, [pc, #212]	; (3ee74 <z_impl_k_msgq_put+0x134>)
   3ed9e:	f005 fa97 	bl	442d0 <printk>
   3eda2:	215c      	movs	r1, #92	; 0x5c
   3eda4:	4831      	ldr	r0, [pc, #196]	; (3ee6c <z_impl_k_msgq_put+0x12c>)
   3eda6:	f005 fcad 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3edaa:	4628      	mov	r0, r5
   3edac:	f001 ffc4 	bl	40d38 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   3edb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3edb2:	6923      	ldr	r3, [r4, #16]
   3edb4:	429a      	cmp	r2, r3
   3edb6:	d23d      	bcs.n	3ee34 <z_impl_k_msgq_put+0xf4>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3edb8:	4620      	mov	r0, r4
   3edba:	f001 fb6b 	bl	40494 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3edbe:	68e2      	ldr	r2, [r4, #12]
   3edc0:	4606      	mov	r6, r0
   3edc2:	4651      	mov	r1, sl
   3edc4:	b178      	cbz	r0, 3ede6 <z_impl_k_msgq_put+0xa6>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3edc6:	2400      	movs	r4, #0
   3edc8:	6940      	ldr	r0, [r0, #20]
   3edca:	f009 f9dd 	bl	48188 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3edce:	4630      	mov	r0, r6
   3edd0:	67f4      	str	r4, [r6, #124]	; 0x7c
   3edd2:	f000 fedb 	bl	3fb8c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3edd6:	4639      	mov	r1, r7
   3edd8:	4628      	mov	r0, r5
   3edda:	f000 fcb7 	bl	3f74c <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3edde:	4620      	mov	r0, r4
   3ede0:	b002      	add	sp, #8
   3ede2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3ede6:	6a20      	ldr	r0, [r4, #32]
   3ede8:	f009 f9ce 	bl	48188 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   3edec:	6a23      	ldr	r3, [r4, #32]
   3edee:	68e2      	ldr	r2, [r4, #12]
   3edf0:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3edf2:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3edf4:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3edf6:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3edf8:	bf04      	itt	eq
   3edfa:	6963      	ldreq	r3, [r4, #20]
   3edfc:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3edfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3ee00:	3301      	adds	r3, #1
   3ee02:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   3ee04:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ee06:	4628      	mov	r0, r5
   3ee08:	f001 ff86 	bl	40d18 <z_spin_unlock_valid>
   3ee0c:	b968      	cbnz	r0, 3ee2a <z_impl_k_msgq_put+0xea>
   3ee0e:	2384      	movs	r3, #132	; 0x84
   3ee10:	4a16      	ldr	r2, [pc, #88]	; (3ee6c <z_impl_k_msgq_put+0x12c>)
   3ee12:	4919      	ldr	r1, [pc, #100]	; (3ee78 <z_impl_k_msgq_put+0x138>)
   3ee14:	4813      	ldr	r0, [pc, #76]	; (3ee64 <z_impl_k_msgq_put+0x124>)
   3ee16:	f005 fa5b 	bl	442d0 <printk>
   3ee1a:	4629      	mov	r1, r5
   3ee1c:	4817      	ldr	r0, [pc, #92]	; (3ee7c <z_impl_k_msgq_put+0x13c>)
   3ee1e:	f005 fa57 	bl	442d0 <printk>
   3ee22:	2184      	movs	r1, #132	; 0x84
   3ee24:	4811      	ldr	r0, [pc, #68]	; (3ee6c <z_impl_k_msgq_put+0x12c>)
   3ee26:	f005 fc6d 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3ee2a:	f387 8811 	msr	BASEPRI, r7
   3ee2e:	f3bf 8f6f 	isb	sy
	return result;
   3ee32:	e7d4      	b.n	3edde <z_impl_k_msgq_put+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3ee34:	ea58 0309 	orrs.w	r3, r8, r9
   3ee38:	d00c      	beq.n	3ee54 <z_impl_k_msgq_put+0x114>
		_current->base.swap_data = (void *) data;
   3ee3a:	4b11      	ldr	r3, [pc, #68]	; (3ee80 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ee3c:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   3ee3e:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ee40:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   3ee42:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ee46:	4628      	mov	r0, r5
   3ee48:	e9cd 8900 	strd	r8, r9, [sp]
   3ee4c:	f001 fa62 	bl	40314 <z_pend_curr>
   3ee50:	4604      	mov	r4, r0
   3ee52:	e7c4      	b.n	3edde <z_impl_k_msgq_put+0x9e>
		result = -ENOMSG;
   3ee54:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3ee58:	e7d5      	b.n	3ee06 <z_impl_k_msgq_put+0xc6>
   3ee5a:	bf00      	nop
   3ee5c:	00052498 	.word	0x00052498
   3ee60:	00052557 	.word	0x00052557
   3ee64:	0004b33b 	.word	0x0004b33b
   3ee68:	0004c55b 	.word	0x0004c55b
   3ee6c:	0004be5f 	.word	0x0004be5f
   3ee70:	0004be85 	.word	0x0004be85
   3ee74:	0004be9a 	.word	0x0004be9a
   3ee78:	0004beb2 	.word	0x0004beb2
   3ee7c:	0004bec9 	.word	0x0004bec9
   3ee80:	2002611c 	.word	0x2002611c

0003ee84 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   3ee84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3ee88:	4604      	mov	r4, r0
   3ee8a:	460d      	mov	r5, r1
   3ee8c:	4690      	mov	r8, r2
   3ee8e:	4699      	mov	r9, r3
   3ee90:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   3ee94:	b17b      	cbz	r3, 3eeb6 <z_impl_k_msgq_get+0x32>
   3ee96:	ea58 0309 	orrs.w	r3, r8, r9
   3ee9a:	d00c      	beq.n	3eeb6 <z_impl_k_msgq_get+0x32>
   3ee9c:	4946      	ldr	r1, [pc, #280]	; (3efb8 <z_impl_k_msgq_get+0x134>)
   3ee9e:	23c2      	movs	r3, #194	; 0xc2
   3eea0:	4a46      	ldr	r2, [pc, #280]	; (3efbc <z_impl_k_msgq_get+0x138>)
   3eea2:	4847      	ldr	r0, [pc, #284]	; (3efc0 <z_impl_k_msgq_get+0x13c>)
   3eea4:	f005 fa14 	bl	442d0 <printk>
   3eea8:	4846      	ldr	r0, [pc, #280]	; (3efc4 <z_impl_k_msgq_get+0x140>)
   3eeaa:	f005 fa11 	bl	442d0 <printk>
   3eeae:	21c2      	movs	r1, #194	; 0xc2
   3eeb0:	4842      	ldr	r0, [pc, #264]	; (3efbc <z_impl_k_msgq_get+0x138>)
   3eeb2:	f005 fc27 	bl	44704 <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   3eeb6:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   3eeba:	f04f 0320 	mov.w	r3, #32
   3eebe:	f3ef 8711 	mrs	r7, BASEPRI
   3eec2:	f383 8811 	msr	BASEPRI, r3
   3eec6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3eeca:	4630      	mov	r0, r6
   3eecc:	f001 ff16 	bl	40cfc <z_spin_lock_valid>
   3eed0:	b968      	cbnz	r0, 3eeee <z_impl_k_msgq_get+0x6a>
   3eed2:	235c      	movs	r3, #92	; 0x5c
   3eed4:	4a3c      	ldr	r2, [pc, #240]	; (3efc8 <z_impl_k_msgq_get+0x144>)
   3eed6:	493d      	ldr	r1, [pc, #244]	; (3efcc <z_impl_k_msgq_get+0x148>)
   3eed8:	4839      	ldr	r0, [pc, #228]	; (3efc0 <z_impl_k_msgq_get+0x13c>)
   3eeda:	f005 f9f9 	bl	442d0 <printk>
   3eede:	4631      	mov	r1, r6
   3eee0:	483b      	ldr	r0, [pc, #236]	; (3efd0 <z_impl_k_msgq_get+0x14c>)
   3eee2:	f005 f9f5 	bl	442d0 <printk>
   3eee6:	215c      	movs	r1, #92	; 0x5c
   3eee8:	4837      	ldr	r0, [pc, #220]	; (3efc8 <z_impl_k_msgq_get+0x144>)
   3eeea:	f005 fc0b 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3eeee:	4630      	mov	r0, r6
   3eef0:	f001 ff22 	bl	40d38 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   3eef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3eef6:	2b00      	cmp	r3, #0
   3eef8:	d035      	beq.n	3ef66 <z_impl_k_msgq_get+0xe2>
   3eefa:	68e2      	ldr	r2, [r4, #12]
   3eefc:	69e1      	ldr	r1, [r4, #28]
   3eefe:	4628      	mov	r0, r5
   3ef00:	f009 f942 	bl	48188 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   3ef04:	69e3      	ldr	r3, [r4, #28]
   3ef06:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3ef08:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   3ef0a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   3ef0c:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   3ef0e:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   3ef10:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   3ef12:	bf04      	itt	eq
   3ef14:	6963      	ldreq	r3, [r4, #20]
   3ef16:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   3ef18:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3ef1a:	3b01      	subs	r3, #1
   3ef1c:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3ef1e:	f001 fab9 	bl	40494 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   3ef22:	4605      	mov	r5, r0
   3ef24:	2800      	cmp	r0, #0
   3ef26:	d02f      	beq.n	3ef88 <z_impl_k_msgq_get+0x104>
   3ef28:	6941      	ldr	r1, [r0, #20]
   3ef2a:	68e2      	ldr	r2, [r4, #12]
   3ef2c:	6a20      	ldr	r0, [r4, #32]
   3ef2e:	f009 f92b 	bl	48188 <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   3ef32:	6a23      	ldr	r3, [r4, #32]
   3ef34:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   3ef36:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   3ef38:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3ef3a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3ef3c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3ef3e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   3ef40:	bf04      	itt	eq
   3ef42:	6963      	ldreq	r3, [r4, #20]
   3ef44:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   3ef46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3ef48:	3301      	adds	r3, #1
   3ef4a:	6263      	str	r3, [r4, #36]	; 0x24
   3ef4c:	2400      	movs	r4, #0
   3ef4e:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   3ef50:	f000 fe1c 	bl	3fb8c <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   3ef54:	4639      	mov	r1, r7
   3ef56:	4630      	mov	r0, r6
   3ef58:	f000 fbf8 	bl	3f74c <z_reschedule>
			return 0;
   3ef5c:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   3ef5e:	4628      	mov	r0, r5
   3ef60:	b003      	add	sp, #12
   3ef62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3ef66:	ea58 0309 	orrs.w	r3, r8, r9
   3ef6a:	d00b      	beq.n	3ef84 <z_impl_k_msgq_get+0x100>
		_current->base.swap_data = data;
   3ef6c:	4b19      	ldr	r3, [pc, #100]	; (3efd4 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ef6e:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   3ef70:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ef72:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   3ef74:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3ef76:	4630      	mov	r0, r6
   3ef78:	e9cd 8900 	strd	r8, r9, [sp]
   3ef7c:	f001 f9ca 	bl	40314 <z_pend_curr>
   3ef80:	4605      	mov	r5, r0
   3ef82:	e7ec      	b.n	3ef5e <z_impl_k_msgq_get+0xda>
		result = -ENOMSG;
   3ef84:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ef88:	4630      	mov	r0, r6
   3ef8a:	f001 fec5 	bl	40d18 <z_spin_unlock_valid>
   3ef8e:	b968      	cbnz	r0, 3efac <z_impl_k_msgq_get+0x128>
   3ef90:	2384      	movs	r3, #132	; 0x84
   3ef92:	4a0d      	ldr	r2, [pc, #52]	; (3efc8 <z_impl_k_msgq_get+0x144>)
   3ef94:	4910      	ldr	r1, [pc, #64]	; (3efd8 <z_impl_k_msgq_get+0x154>)
   3ef96:	480a      	ldr	r0, [pc, #40]	; (3efc0 <z_impl_k_msgq_get+0x13c>)
   3ef98:	f005 f99a 	bl	442d0 <printk>
   3ef9c:	4631      	mov	r1, r6
   3ef9e:	480f      	ldr	r0, [pc, #60]	; (3efdc <z_impl_k_msgq_get+0x158>)
   3efa0:	f005 f996 	bl	442d0 <printk>
   3efa4:	2184      	movs	r1, #132	; 0x84
   3efa6:	4808      	ldr	r0, [pc, #32]	; (3efc8 <z_impl_k_msgq_get+0x144>)
   3efa8:	f005 fbac 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3efac:	f387 8811 	msr	BASEPRI, r7
   3efb0:	f3bf 8f6f 	isb	sy
	return result;
   3efb4:	e7d3      	b.n	3ef5e <z_impl_k_msgq_get+0xda>
   3efb6:	bf00      	nop
   3efb8:	00052498 	.word	0x00052498
   3efbc:	00052557 	.word	0x00052557
   3efc0:	0004b33b 	.word	0x0004b33b
   3efc4:	0004c55b 	.word	0x0004c55b
   3efc8:	0004be5f 	.word	0x0004be5f
   3efcc:	0004be85 	.word	0x0004be85
   3efd0:	0004be9a 	.word	0x0004be9a
   3efd4:	2002611c 	.word	0x2002611c
   3efd8:	0004beb2 	.word	0x0004beb2
   3efdc:	0004bec9 	.word	0x0004bec9

0003efe0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   3efe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3efe4:	4604      	mov	r4, r0
   3efe6:	4616      	mov	r6, r2
   3efe8:	461f      	mov	r7, r3
   3efea:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3efee:	b163      	cbz	r3, 3f00a <z_impl_k_mutex_lock+0x2a>
   3eff0:	496f      	ldr	r1, [pc, #444]	; (3f1b0 <z_impl_k_mutex_lock+0x1d0>)
   3eff2:	237d      	movs	r3, #125	; 0x7d
   3eff4:	4a6f      	ldr	r2, [pc, #444]	; (3f1b4 <z_impl_k_mutex_lock+0x1d4>)
   3eff6:	4870      	ldr	r0, [pc, #448]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3eff8:	f005 f96a 	bl	442d0 <printk>
   3effc:	486f      	ldr	r0, [pc, #444]	; (3f1bc <z_impl_k_mutex_lock+0x1dc>)
   3effe:	f005 f967 	bl	442d0 <printk>
   3f002:	217d      	movs	r1, #125	; 0x7d
   3f004:	486b      	ldr	r0, [pc, #428]	; (3f1b4 <z_impl_k_mutex_lock+0x1d4>)
   3f006:	f005 fb7d 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f00a:	f04f 0320 	mov.w	r3, #32
   3f00e:	f3ef 8511 	mrs	r5, BASEPRI
   3f012:	f383 8811 	msr	BASEPRI, r3
   3f016:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f01a:	4869      	ldr	r0, [pc, #420]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f01c:	f001 fe6e 	bl	40cfc <z_spin_lock_valid>
   3f020:	b968      	cbnz	r0, 3f03e <z_impl_k_mutex_lock+0x5e>
   3f022:	235c      	movs	r3, #92	; 0x5c
   3f024:	4a67      	ldr	r2, [pc, #412]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f026:	4968      	ldr	r1, [pc, #416]	; (3f1c8 <z_impl_k_mutex_lock+0x1e8>)
   3f028:	4863      	ldr	r0, [pc, #396]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3f02a:	f005 f951 	bl	442d0 <printk>
   3f02e:	4964      	ldr	r1, [pc, #400]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f030:	4866      	ldr	r0, [pc, #408]	; (3f1cc <z_impl_k_mutex_lock+0x1ec>)
   3f032:	f005 f94d 	bl	442d0 <printk>
   3f036:	215c      	movs	r1, #92	; 0x5c
   3f038:	4862      	ldr	r0, [pc, #392]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f03a:	f005 fb63 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f03e:	4860      	ldr	r0, [pc, #384]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f040:	f001 fe7a 	bl	40d38 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   3f044:	68e3      	ldr	r3, [r4, #12]
   3f046:	4a62      	ldr	r2, [pc, #392]	; (3f1d0 <z_impl_k_mutex_lock+0x1f0>)
   3f048:	b1fb      	cbz	r3, 3f08a <z_impl_k_mutex_lock+0xaa>
   3f04a:	68a0      	ldr	r0, [r4, #8]
   3f04c:	6891      	ldr	r1, [r2, #8]
   3f04e:	4288      	cmp	r0, r1
   3f050:	d03d      	beq.n	3f0ce <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   3f052:	ea56 0307 	orrs.w	r3, r6, r7
   3f056:	d13c      	bne.n	3f0d2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f058:	4859      	ldr	r0, [pc, #356]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f05a:	f001 fe5d 	bl	40d18 <z_spin_unlock_valid>
   3f05e:	b968      	cbnz	r0, 3f07c <z_impl_k_mutex_lock+0x9c>
   3f060:	2384      	movs	r3, #132	; 0x84
   3f062:	4a58      	ldr	r2, [pc, #352]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f064:	495b      	ldr	r1, [pc, #364]	; (3f1d4 <z_impl_k_mutex_lock+0x1f4>)
   3f066:	4854      	ldr	r0, [pc, #336]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3f068:	f005 f932 	bl	442d0 <printk>
   3f06c:	4954      	ldr	r1, [pc, #336]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f06e:	485a      	ldr	r0, [pc, #360]	; (3f1d8 <z_impl_k_mutex_lock+0x1f8>)
   3f070:	f005 f92e 	bl	442d0 <printk>
   3f074:	2184      	movs	r1, #132	; 0x84
   3f076:	4853      	ldr	r0, [pc, #332]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f078:	f005 fb44 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f07c:	f385 8811 	msr	BASEPRI, r5
   3f080:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   3f084:	f06f 000f 	mvn.w	r0, #15
   3f088:	e01e      	b.n	3f0c8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3f08a:	6891      	ldr	r1, [r2, #8]
   3f08c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   3f090:	3301      	adds	r3, #1
   3f092:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   3f094:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   3f096:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3f098:	60a3      	str	r3, [r4, #8]
   3f09a:	4849      	ldr	r0, [pc, #292]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f09c:	f001 fe3c 	bl	40d18 <z_spin_unlock_valid>
   3f0a0:	b968      	cbnz	r0, 3f0be <z_impl_k_mutex_lock+0xde>
   3f0a2:	2384      	movs	r3, #132	; 0x84
   3f0a4:	4a47      	ldr	r2, [pc, #284]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f0a6:	494b      	ldr	r1, [pc, #300]	; (3f1d4 <z_impl_k_mutex_lock+0x1f4>)
   3f0a8:	4843      	ldr	r0, [pc, #268]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3f0aa:	f005 f911 	bl	442d0 <printk>
   3f0ae:	4944      	ldr	r1, [pc, #272]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f0b0:	4849      	ldr	r0, [pc, #292]	; (3f1d8 <z_impl_k_mutex_lock+0x1f8>)
   3f0b2:	f005 f90d 	bl	442d0 <printk>
   3f0b6:	2184      	movs	r1, #132	; 0x84
   3f0b8:	4842      	ldr	r0, [pc, #264]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f0ba:	f005 fb23 	bl	44704 <assert_post_action>
   3f0be:	f385 8811 	msr	BASEPRI, r5
   3f0c2:	f3bf 8f6f 	isb	sy
		return 0;
   3f0c6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   3f0c8:	b002      	add	sp, #8
   3f0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   3f0ce:	6921      	ldr	r1, [r4, #16]
   3f0d0:	e7de      	b.n	3f090 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3f0d2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3f0d6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   3f0da:	4299      	cmp	r1, r3
   3f0dc:	bfa8      	it	ge
   3f0de:	4619      	movge	r1, r3
   3f0e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   3f0e4:	4299      	cmp	r1, r3
   3f0e6:	da43      	bge.n	3f170 <z_impl_k_mutex_lock+0x190>
		return z_set_prio(mutex->owner, new_prio);
   3f0e8:	f001 f944 	bl	40374 <z_set_prio>
   3f0ec:	4680      	mov	r8, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3f0ee:	e9cd 6700 	strd	r6, r7, [sp]
   3f0f2:	4622      	mov	r2, r4
   3f0f4:	4629      	mov	r1, r5
   3f0f6:	4832      	ldr	r0, [pc, #200]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f0f8:	f001 f90c 	bl	40314 <z_pend_curr>
	if (got_mutex == 0) {
   3f0fc:	2800      	cmp	r0, #0
   3f0fe:	d0e3      	beq.n	3f0c8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   3f100:	f04f 0320 	mov.w	r3, #32
   3f104:	f3ef 8511 	mrs	r5, BASEPRI
   3f108:	f383 8811 	msr	BASEPRI, r3
   3f10c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f110:	482b      	ldr	r0, [pc, #172]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f112:	f001 fdf3 	bl	40cfc <z_spin_lock_valid>
   3f116:	b968      	cbnz	r0, 3f134 <z_impl_k_mutex_lock+0x154>
   3f118:	235c      	movs	r3, #92	; 0x5c
   3f11a:	4a2a      	ldr	r2, [pc, #168]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f11c:	492a      	ldr	r1, [pc, #168]	; (3f1c8 <z_impl_k_mutex_lock+0x1e8>)
   3f11e:	4826      	ldr	r0, [pc, #152]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3f120:	f005 f8d6 	bl	442d0 <printk>
   3f124:	4926      	ldr	r1, [pc, #152]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f126:	4829      	ldr	r0, [pc, #164]	; (3f1cc <z_impl_k_mutex_lock+0x1ec>)
   3f128:	f005 f8d2 	bl	442d0 <printk>
   3f12c:	215c      	movs	r1, #92	; 0x5c
   3f12e:	4825      	ldr	r0, [pc, #148]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f130:	f005 fae8 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f134:	4822      	ldr	r0, [pc, #136]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f136:	f001 fdff 	bl	40d38 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   3f13a:	6823      	ldr	r3, [r4, #0]
   3f13c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3f13e:	42a3      	cmp	r3, r4
   3f140:	d007      	beq.n	3f152 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3f142:	b133      	cbz	r3, 3f152 <z_impl_k_mutex_lock+0x172>
   3f144:	f993 300e 	ldrsb.w	r3, [r3, #14]
   3f148:	4299      	cmp	r1, r3
   3f14a:	bfa8      	it	ge
   3f14c:	4619      	movge	r1, r3
   3f14e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3f152:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   3f154:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3f158:	4299      	cmp	r1, r3
   3f15a:	d10c      	bne.n	3f176 <z_impl_k_mutex_lock+0x196>
	if (resched) {
   3f15c:	f1b8 0f00 	cmp.w	r8, #0
   3f160:	d00e      	beq.n	3f180 <z_impl_k_mutex_lock+0x1a0>
		z_reschedule(&lock, key);
   3f162:	4629      	mov	r1, r5
   3f164:	4816      	ldr	r0, [pc, #88]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f166:	f000 faf1 	bl	3f74c <z_reschedule>
	return -EAGAIN;
   3f16a:	f06f 000a 	mvn.w	r0, #10
   3f16e:	e7ab      	b.n	3f0c8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   3f170:	f04f 0800 	mov.w	r8, #0
   3f174:	e7bb      	b.n	3f0ee <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   3f176:	f001 f8fd 	bl	40374 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   3f17a:	2800      	cmp	r0, #0
   3f17c:	d1f1      	bne.n	3f162 <z_impl_k_mutex_lock+0x182>
   3f17e:	e7ed      	b.n	3f15c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f180:	480f      	ldr	r0, [pc, #60]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f182:	f001 fdc9 	bl	40d18 <z_spin_unlock_valid>
   3f186:	b968      	cbnz	r0, 3f1a4 <z_impl_k_mutex_lock+0x1c4>
   3f188:	2384      	movs	r3, #132	; 0x84
   3f18a:	4a0e      	ldr	r2, [pc, #56]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f18c:	4911      	ldr	r1, [pc, #68]	; (3f1d4 <z_impl_k_mutex_lock+0x1f4>)
   3f18e:	480a      	ldr	r0, [pc, #40]	; (3f1b8 <z_impl_k_mutex_lock+0x1d8>)
   3f190:	f005 f89e 	bl	442d0 <printk>
   3f194:	490a      	ldr	r1, [pc, #40]	; (3f1c0 <z_impl_k_mutex_lock+0x1e0>)
   3f196:	4810      	ldr	r0, [pc, #64]	; (3f1d8 <z_impl_k_mutex_lock+0x1f8>)
   3f198:	f005 f89a 	bl	442d0 <printk>
   3f19c:	2184      	movs	r1, #132	; 0x84
   3f19e:	4809      	ldr	r0, [pc, #36]	; (3f1c4 <z_impl_k_mutex_lock+0x1e4>)
   3f1a0:	f005 fab0 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f1a4:	f385 8811 	msr	BASEPRI, r5
   3f1a8:	f3bf 8f6f 	isb	sy
   3f1ac:	e7dd      	b.n	3f16a <z_impl_k_mutex_lock+0x18a>
   3f1ae:	bf00      	nop
   3f1b0:	0005259b 	.word	0x0005259b
   3f1b4:	00052579 	.word	0x00052579
   3f1b8:	0004b33b 	.word	0x0004b33b
   3f1bc:	000525ad 	.word	0x000525ad
   3f1c0:	20026118 	.word	0x20026118
   3f1c4:	0004be5f 	.word	0x0004be5f
   3f1c8:	0004be85 	.word	0x0004be85
   3f1cc:	0004be9a 	.word	0x0004be9a
   3f1d0:	2002611c 	.word	0x2002611c
   3f1d4:	0004beb2 	.word	0x0004beb2
   3f1d8:	0004bec9 	.word	0x0004bec9

0003f1dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   3f1dc:	b538      	push	{r3, r4, r5, lr}
   3f1de:	4604      	mov	r4, r0
   3f1e0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   3f1e4:	b163      	cbz	r3, 3f200 <z_impl_k_mutex_unlock+0x24>
   3f1e6:	4954      	ldr	r1, [pc, #336]	; (3f338 <z_impl_k_mutex_unlock+0x15c>)
   3f1e8:	23d8      	movs	r3, #216	; 0xd8
   3f1ea:	4a54      	ldr	r2, [pc, #336]	; (3f33c <z_impl_k_mutex_unlock+0x160>)
   3f1ec:	4854      	ldr	r0, [pc, #336]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f1ee:	f005 f86f 	bl	442d0 <printk>
   3f1f2:	4854      	ldr	r0, [pc, #336]	; (3f344 <z_impl_k_mutex_unlock+0x168>)
   3f1f4:	f005 f86c 	bl	442d0 <printk>
   3f1f8:	21d8      	movs	r1, #216	; 0xd8
   3f1fa:	4850      	ldr	r0, [pc, #320]	; (3f33c <z_impl_k_mutex_unlock+0x160>)
   3f1fc:	f005 fa82 	bl	44704 <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   3f200:	68a3      	ldr	r3, [r4, #8]
   3f202:	2b00      	cmp	r3, #0
   3f204:	f000 8091 	beq.w	3f32a <z_impl_k_mutex_unlock+0x14e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   3f208:	4d4f      	ldr	r5, [pc, #316]	; (3f348 <z_impl_k_mutex_unlock+0x16c>)
   3f20a:	68aa      	ldr	r2, [r5, #8]
   3f20c:	4293      	cmp	r3, r2
   3f20e:	f040 808f 	bne.w	3f330 <z_impl_k_mutex_unlock+0x154>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   3f212:	68e3      	ldr	r3, [r4, #12]
   3f214:	b94b      	cbnz	r3, 3f22a <z_impl_k_mutex_unlock+0x4e>
   3f216:	494d      	ldr	r1, [pc, #308]	; (3f34c <z_impl_k_mutex_unlock+0x170>)
   3f218:	4849      	ldr	r0, [pc, #292]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f21a:	23ea      	movs	r3, #234	; 0xea
   3f21c:	4a47      	ldr	r2, [pc, #284]	; (3f33c <z_impl_k_mutex_unlock+0x160>)
   3f21e:	f005 f857 	bl	442d0 <printk>
   3f222:	21ea      	movs	r1, #234	; 0xea
   3f224:	4845      	ldr	r0, [pc, #276]	; (3f33c <z_impl_k_mutex_unlock+0x160>)
   3f226:	f005 fa6d 	bl	44704 <assert_post_action>
   3f22a:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   3f22e:	b173      	cbz	r3, 3f24e <z_impl_k_mutex_unlock+0x72>
   3f230:	4941      	ldr	r1, [pc, #260]	; (3f338 <z_impl_k_mutex_unlock+0x15c>)
   3f232:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3f236:	4a46      	ldr	r2, [pc, #280]	; (3f350 <z_impl_k_mutex_unlock+0x174>)
   3f238:	4841      	ldr	r0, [pc, #260]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f23a:	f005 f849 	bl	442d0 <printk>
   3f23e:	4845      	ldr	r0, [pc, #276]	; (3f354 <z_impl_k_mutex_unlock+0x178>)
   3f240:	f005 f846 	bl	442d0 <printk>
   3f244:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3f248:	4841      	ldr	r0, [pc, #260]	; (3f350 <z_impl_k_mutex_unlock+0x174>)
   3f24a:	f005 fa5b 	bl	44704 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3f24e:	68ab      	ldr	r3, [r5, #8]
   3f250:	7bdb      	ldrb	r3, [r3, #15]
   3f252:	2b01      	cmp	r3, #1
   3f254:	d10e      	bne.n	3f274 <z_impl_k_mutex_unlock+0x98>
   3f256:	4940      	ldr	r1, [pc, #256]	; (3f358 <z_impl_k_mutex_unlock+0x17c>)
   3f258:	f240 130d 	movw	r3, #269	; 0x10d
   3f25c:	4a3c      	ldr	r2, [pc, #240]	; (3f350 <z_impl_k_mutex_unlock+0x174>)
   3f25e:	4838      	ldr	r0, [pc, #224]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f260:	f005 f836 	bl	442d0 <printk>
   3f264:	483b      	ldr	r0, [pc, #236]	; (3f354 <z_impl_k_mutex_unlock+0x178>)
   3f266:	f005 f833 	bl	442d0 <printk>
   3f26a:	f240 110d 	movw	r1, #269	; 0x10d
   3f26e:	4838      	ldr	r0, [pc, #224]	; (3f350 <z_impl_k_mutex_unlock+0x174>)
   3f270:	f005 fa48 	bl	44704 <assert_post_action>

	--_current->base.sched_locked;
   3f274:	68aa      	ldr	r2, [r5, #8]
   3f276:	7bd3      	ldrb	r3, [r2, #15]
   3f278:	3b01      	subs	r3, #1
   3f27a:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   3f27c:	68e3      	ldr	r3, [r4, #12]
   3f27e:	2b01      	cmp	r3, #1
   3f280:	d005      	beq.n	3f28e <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   3f282:	3b01      	subs	r3, #1
   3f284:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   3f286:	f000 fbbb 	bl	3fa00 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   3f28a:	2000      	movs	r0, #0
}
   3f28c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   3f28e:	f04f 0320 	mov.w	r3, #32
   3f292:	f3ef 8511 	mrs	r5, BASEPRI
   3f296:	f383 8811 	msr	BASEPRI, r3
   3f29a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f29e:	482f      	ldr	r0, [pc, #188]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f2a0:	f001 fd2c 	bl	40cfc <z_spin_lock_valid>
   3f2a4:	b968      	cbnz	r0, 3f2c2 <z_impl_k_mutex_unlock+0xe6>
   3f2a6:	235c      	movs	r3, #92	; 0x5c
   3f2a8:	4a2d      	ldr	r2, [pc, #180]	; (3f360 <z_impl_k_mutex_unlock+0x184>)
   3f2aa:	492e      	ldr	r1, [pc, #184]	; (3f364 <z_impl_k_mutex_unlock+0x188>)
   3f2ac:	4824      	ldr	r0, [pc, #144]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f2ae:	f005 f80f 	bl	442d0 <printk>
   3f2b2:	492a      	ldr	r1, [pc, #168]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f2b4:	482c      	ldr	r0, [pc, #176]	; (3f368 <z_impl_k_mutex_unlock+0x18c>)
   3f2b6:	f005 f80b 	bl	442d0 <printk>
   3f2ba:	215c      	movs	r1, #92	; 0x5c
   3f2bc:	4828      	ldr	r0, [pc, #160]	; (3f360 <z_impl_k_mutex_unlock+0x184>)
   3f2be:	f005 fa21 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f2c2:	4826      	ldr	r0, [pc, #152]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f2c4:	f001 fd38 	bl	40d38 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   3f2c8:	68a0      	ldr	r0, [r4, #8]
   3f2ca:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   3f2cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3f2d0:	4299      	cmp	r1, r3
   3f2d2:	d001      	beq.n	3f2d8 <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   3f2d4:	f001 f84e 	bl	40374 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   3f2d8:	4620      	mov	r0, r4
   3f2da:	f001 f8db 	bl	40494 <z_unpend_first_thread>
	mutex->owner = new_owner;
   3f2de:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   3f2e0:	b158      	cbz	r0, 3f2fa <z_impl_k_mutex_unlock+0x11e>
		mutex->owner_orig_prio = new_owner->base.prio;
   3f2e2:	f990 200e 	ldrsb.w	r2, [r0, #14]
   3f2e6:	6122      	str	r2, [r4, #16]
   3f2e8:	2200      	movs	r2, #0
   3f2ea:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   3f2ec:	f000 fc4e 	bl	3fb8c <z_ready_thread>
		z_reschedule(&lock, key);
   3f2f0:	4629      	mov	r1, r5
   3f2f2:	481a      	ldr	r0, [pc, #104]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f2f4:	f000 fa2a 	bl	3f74c <z_reschedule>
   3f2f8:	e7c5      	b.n	3f286 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   3f2fa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f2fc:	4817      	ldr	r0, [pc, #92]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f2fe:	f001 fd0b 	bl	40d18 <z_spin_unlock_valid>
   3f302:	b968      	cbnz	r0, 3f320 <z_impl_k_mutex_unlock+0x144>
   3f304:	2384      	movs	r3, #132	; 0x84
   3f306:	4a16      	ldr	r2, [pc, #88]	; (3f360 <z_impl_k_mutex_unlock+0x184>)
   3f308:	4918      	ldr	r1, [pc, #96]	; (3f36c <z_impl_k_mutex_unlock+0x190>)
   3f30a:	480d      	ldr	r0, [pc, #52]	; (3f340 <z_impl_k_mutex_unlock+0x164>)
   3f30c:	f004 ffe0 	bl	442d0 <printk>
   3f310:	4912      	ldr	r1, [pc, #72]	; (3f35c <z_impl_k_mutex_unlock+0x180>)
   3f312:	4817      	ldr	r0, [pc, #92]	; (3f370 <z_impl_k_mutex_unlock+0x194>)
   3f314:	f004 ffdc 	bl	442d0 <printk>
   3f318:	2184      	movs	r1, #132	; 0x84
   3f31a:	4811      	ldr	r0, [pc, #68]	; (3f360 <z_impl_k_mutex_unlock+0x184>)
   3f31c:	f005 f9f2 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f320:	f385 8811 	msr	BASEPRI, r5
   3f324:	f3bf 8f6f 	isb	sy
   3f328:	e7ad      	b.n	3f286 <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   3f32a:	f06f 0015 	mvn.w	r0, #21
   3f32e:	e7ad      	b.n	3f28c <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   3f330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3f334:	e7aa      	b.n	3f28c <z_impl_k_mutex_unlock+0xb0>
   3f336:	bf00      	nop
   3f338:	0005259b 	.word	0x0005259b
   3f33c:	00052579 	.word	0x00052579
   3f340:	0004b33b 	.word	0x0004b33b
   3f344:	000525ad 	.word	0x000525ad
   3f348:	2002611c 	.word	0x2002611c
   3f34c:	000525d2 	.word	0x000525d2
   3f350:	000525e9 	.word	0x000525e9
   3f354:	0004c55b 	.word	0x0004c55b
   3f358:	00052614 	.word	0x00052614
   3f35c:	20026118 	.word	0x20026118
   3f360:	0004be5f 	.word	0x0004be5f
   3f364:	0004be85 	.word	0x0004be85
   3f368:	0004be9a 	.word	0x0004be9a
   3f36c:	0004beb2 	.word	0x0004beb2
   3f370:	0004bec9 	.word	0x0004bec9

0003f374 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			  bool alloc)
{
   3f374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3f378:	4604      	mov	r4, r0
   3f37a:	460e      	mov	r6, r1
   3f37c:	4690      	mov	r8, r2
   3f37e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3f380:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3f384:	f04f 0320 	mov.w	r3, #32
   3f388:	f3ef 8711 	mrs	r7, BASEPRI
   3f38c:	f383 8811 	msr	BASEPRI, r3
   3f390:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f394:	4628      	mov	r0, r5
   3f396:	f001 fcb1 	bl	40cfc <z_spin_lock_valid>
   3f39a:	b968      	cbnz	r0, 3f3b8 <queue_insert+0x44>
   3f39c:	235c      	movs	r3, #92	; 0x5c
   3f39e:	4a39      	ldr	r2, [pc, #228]	; (3f484 <queue_insert+0x110>)
   3f3a0:	4939      	ldr	r1, [pc, #228]	; (3f488 <queue_insert+0x114>)
   3f3a2:	483a      	ldr	r0, [pc, #232]	; (3f48c <queue_insert+0x118>)
   3f3a4:	f004 ff94 	bl	442d0 <printk>
   3f3a8:	4629      	mov	r1, r5
   3f3aa:	4839      	ldr	r0, [pc, #228]	; (3f490 <queue_insert+0x11c>)
   3f3ac:	f004 ff90 	bl	442d0 <printk>
   3f3b0:	215c      	movs	r1, #92	; 0x5c
   3f3b2:	4834      	ldr	r0, [pc, #208]	; (3f484 <queue_insert+0x110>)
   3f3b4:	f005 f9a6 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f3b8:	4628      	mov	r0, r5
   3f3ba:	f001 fcbd 	bl	40d38 <z_spin_lock_set_owner>
	struct k_thread *first_pending_thread;

	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   3f3be:	f104 000c 	add.w	r0, r4, #12
   3f3c2:	f001 f867 	bl	40494 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   3f3c6:	b158      	cbz	r0, 3f3e0 <queue_insert+0x6c>
   3f3c8:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   3f3ca:	f8c0 8014 	str.w	r8, [r0, #20]
   3f3ce:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   3f3d0:	f000 fbdc 	bl	3fb8c <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   3f3d4:	4628      	mov	r0, r5
   3f3d6:	4639      	mov	r1, r7
   3f3d8:	f000 f9b8 	bl	3f74c <z_reschedule>
	return 0;
   3f3dc:	2000      	movs	r0, #0
   3f3de:	e01e      	b.n	3f41e <queue_insert+0xaa>
	if (alloc) {
   3f3e0:	f1b9 0f00 	cmp.w	r9, #0
   3f3e4:	d02d      	beq.n	3f442 <queue_insert+0xce>
		anode = z_thread_malloc(sizeof(*anode));
   3f3e6:	2008      	movs	r0, #8
   3f3e8:	f002 fca6 	bl	41d38 <z_thread_malloc>
		if (anode == NULL) {
   3f3ec:	b9c8      	cbnz	r0, 3f422 <queue_insert+0xae>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f3ee:	4628      	mov	r0, r5
   3f3f0:	f001 fc92 	bl	40d18 <z_spin_unlock_valid>
   3f3f4:	b968      	cbnz	r0, 3f412 <queue_insert+0x9e>
   3f3f6:	2384      	movs	r3, #132	; 0x84
   3f3f8:	4a22      	ldr	r2, [pc, #136]	; (3f484 <queue_insert+0x110>)
   3f3fa:	4926      	ldr	r1, [pc, #152]	; (3f494 <queue_insert+0x120>)
   3f3fc:	4823      	ldr	r0, [pc, #140]	; (3f48c <queue_insert+0x118>)
   3f3fe:	f004 ff67 	bl	442d0 <printk>
   3f402:	4629      	mov	r1, r5
   3f404:	4824      	ldr	r0, [pc, #144]	; (3f498 <queue_insert+0x124>)
   3f406:	f004 ff63 	bl	442d0 <printk>
   3f40a:	2184      	movs	r1, #132	; 0x84
   3f40c:	481d      	ldr	r0, [pc, #116]	; (3f484 <queue_insert+0x110>)
   3f40e:	f005 f979 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f412:	f387 8811 	msr	BASEPRI, r7
   3f416:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   3f41a:	f06f 000b 	mvn.w	r0, #11
}
   3f41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   3f422:	2301      	movs	r3, #1
		anode->data = data;
   3f424:	f8c0 8004 	str.w	r8, [r0, #4]
   3f428:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   3f42a:	6803      	ldr	r3, [r0, #0]
   3f42c:	f003 0303 	and.w	r3, r3, #3
   3f430:	b95e      	cbnz	r6, 3f44a <queue_insert+0xd6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f432:	6822      	ldr	r2, [r4, #0]
   3f434:	4313      	orrs	r3, r2
   3f436:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3f438:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   3f43a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3f43c:	b973      	cbnz	r3, 3f45c <queue_insert+0xe8>
	list->tail = node;
   3f43e:	6060      	str	r0, [r4, #4]
   3f440:	e00c      	b.n	3f45c <queue_insert+0xe8>
	node->next_and_flags = flags;
   3f442:	f8c8 9000 	str.w	r9, [r8]
   3f446:	4640      	mov	r0, r8
   3f448:	e7ef      	b.n	3f42a <queue_insert+0xb6>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3f44a:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3f44c:	f032 0203 	bics.w	r2, r2, #3
   3f450:	d110      	bne.n	3f474 <queue_insert+0x100>
Z_GENLIST_APPEND(sflist, sfnode)
   3f452:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f454:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   3f456:	b93a      	cbnz	r2, 3f468 <queue_insert+0xf4>
	list->head = node;
   3f458:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3f45c:	2104      	movs	r1, #4
   3f45e:	f104 0014 	add.w	r0, r4, #20
   3f462:	f008 fe30 	bl	480c6 <z_handle_obj_poll_events>
   3f466:	e7b5      	b.n	3f3d4 <queue_insert+0x60>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3f468:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f46a:	f003 0303 	and.w	r3, r3, #3
   3f46e:	4303      	orrs	r3, r0
   3f470:	6013      	str	r3, [r2, #0]
   3f472:	e7e4      	b.n	3f43e <queue_insert+0xca>
   3f474:	4313      	orrs	r3, r2
   3f476:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3f478:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f47a:	f003 0303 	and.w	r3, r3, #3
   3f47e:	4318      	orrs	r0, r3
   3f480:	6030      	str	r0, [r6, #0]
   3f482:	e7eb      	b.n	3f45c <queue_insert+0xe8>
   3f484:	0004be5f 	.word	0x0004be5f
   3f488:	0004be85 	.word	0x0004be85
   3f48c:	0004b33b 	.word	0x0004b33b
   3f490:	0004be9a 	.word	0x0004be9a
   3f494:	0004beb2 	.word	0x0004beb2
   3f498:	0004bec9 	.word	0x0004bec9

0003f49c <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   3f49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3f4a0:	4605      	mov	r5, r0
   3f4a2:	4617      	mov	r7, r2
	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   3f4a4:	460c      	mov	r4, r1
   3f4a6:	2900      	cmp	r1, #0
   3f4a8:	d04a      	beq.n	3f540 <k_queue_append_list+0xa4>
   3f4aa:	2a00      	cmp	r2, #0
   3f4ac:	d048      	beq.n	3f540 <k_queue_append_list+0xa4>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3f4ae:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   3f4b2:	f04f 0320 	mov.w	r3, #32
   3f4b6:	f3ef 8811 	mrs	r8, BASEPRI
   3f4ba:	f383 8811 	msr	BASEPRI, r3
   3f4be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f4c2:	4630      	mov	r0, r6
   3f4c4:	f001 fc1a 	bl	40cfc <z_spin_lock_valid>
   3f4c8:	b968      	cbnz	r0, 3f4e6 <k_queue_append_list+0x4a>
   3f4ca:	235c      	movs	r3, #92	; 0x5c
   3f4cc:	4a1e      	ldr	r2, [pc, #120]	; (3f548 <k_queue_append_list+0xac>)
   3f4ce:	491f      	ldr	r1, [pc, #124]	; (3f54c <k_queue_append_list+0xb0>)
   3f4d0:	481f      	ldr	r0, [pc, #124]	; (3f550 <k_queue_append_list+0xb4>)
   3f4d2:	f004 fefd 	bl	442d0 <printk>
   3f4d6:	4631      	mov	r1, r6
   3f4d8:	481e      	ldr	r0, [pc, #120]	; (3f554 <k_queue_append_list+0xb8>)
   3f4da:	f004 fef9 	bl	442d0 <printk>
   3f4de:	215c      	movs	r1, #92	; 0x5c
   3f4e0:	4819      	ldr	r0, [pc, #100]	; (3f548 <k_queue_append_list+0xac>)
   3f4e2:	f005 f90f 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f4e6:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   3f4e8:	f105 090c 	add.w	r9, r5, #12
   3f4ec:	f001 fc24 	bl	40d38 <z_spin_lock_set_owner>
   3f4f0:	4648      	mov	r0, r9
   3f4f2:	f000 ffcf 	bl	40494 <z_unpend_first_thread>
   3f4f6:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   3f4fa:	b920      	cbnz	r0, 3f506 <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   3f4fc:	686a      	ldr	r2, [r5, #4]
   3f4fe:	b9ca      	cbnz	r2, 3f534 <k_queue_append_list+0x98>
	list->head = node;
   3f500:	602c      	str	r4, [r5, #0]
	list->tail = node;
   3f502:	606f      	str	r7, [r5, #4]
   3f504:	e00a      	b.n	3f51c <k_queue_append_list+0x80>
   3f506:	6144      	str	r4, [r0, #20]
   3f508:	f8c0 a07c 	str.w	sl, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   3f50c:	f000 fb3e 	bl	3fb8c <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   3f510:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   3f512:	4648      	mov	r0, r9
   3f514:	f000 ffbe 	bl	40494 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   3f518:	2c00      	cmp	r4, #0
   3f51a:	d1ee      	bne.n	3f4fa <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   3f51c:	2104      	movs	r1, #4
   3f51e:	f105 0014 	add.w	r0, r5, #20
   3f522:	f008 fdd0 	bl	480c6 <z_handle_obj_poll_events>
	if (head != NULL) {
		sys_sflist_append_list(&queue->data_q, head, tail);
	}

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   3f526:	4630      	mov	r0, r6
   3f528:	4641      	mov	r1, r8
   3f52a:	f000 f90f 	bl	3f74c <z_reschedule>
	return 0;
   3f52e:	2000      	movs	r0, #0
}
   3f530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3f534:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3f536:	f003 0303 	and.w	r3, r3, #3
   3f53a:	431c      	orrs	r4, r3
   3f53c:	6014      	str	r4, [r2, #0]
   3f53e:	e7e0      	b.n	3f502 <k_queue_append_list+0x66>
		return -EINVAL;
   3f540:	f06f 0015 	mvn.w	r0, #21
   3f544:	e7f4      	b.n	3f530 <k_queue_append_list+0x94>
   3f546:	bf00      	nop
   3f548:	0004be5f 	.word	0x0004be5f
   3f54c:	0004be85 	.word	0x0004be85
   3f550:	0004b33b 	.word	0x0004b33b
   3f554:	0004be9a 	.word	0x0004be9a

0003f558 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   3f558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3f55c:	4606      	mov	r6, r0
   3f55e:	4690      	mov	r8, r2
   3f560:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   3f562:	f100 0408 	add.w	r4, r0, #8
   3f566:	f04f 0320 	mov.w	r3, #32
   3f56a:	f3ef 8711 	mrs	r7, BASEPRI
   3f56e:	f383 8811 	msr	BASEPRI, r3
   3f572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f576:	4620      	mov	r0, r4
   3f578:	f001 fbc0 	bl	40cfc <z_spin_lock_valid>
   3f57c:	b968      	cbnz	r0, 3f59a <z_impl_k_queue_get+0x42>
   3f57e:	235c      	movs	r3, #92	; 0x5c
   3f580:	4a24      	ldr	r2, [pc, #144]	; (3f614 <z_impl_k_queue_get+0xbc>)
   3f582:	4925      	ldr	r1, [pc, #148]	; (3f618 <z_impl_k_queue_get+0xc0>)
   3f584:	4825      	ldr	r0, [pc, #148]	; (3f61c <z_impl_k_queue_get+0xc4>)
   3f586:	f004 fea3 	bl	442d0 <printk>
   3f58a:	4621      	mov	r1, r4
   3f58c:	4824      	ldr	r0, [pc, #144]	; (3f620 <z_impl_k_queue_get+0xc8>)
   3f58e:	f004 fe9f 	bl	442d0 <printk>
   3f592:	215c      	movs	r1, #92	; 0x5c
   3f594:	481f      	ldr	r0, [pc, #124]	; (3f614 <z_impl_k_queue_get+0xbc>)
   3f596:	f005 f8b5 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f59a:	4620      	mov	r0, r4
   3f59c:	f001 fbcc 	bl	40d38 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   3f5a0:	6835      	ldr	r5, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   3f5a2:	b335      	cbz	r5, 3f5f2 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3f5a4:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3f5a6:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3f5a8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   3f5ac:	4295      	cmp	r5, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   3f5ae:	4628      	mov	r0, r5
	list->head = node;
   3f5b0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   3f5b2:	bf08      	it	eq
   3f5b4:	6073      	streq	r3, [r6, #4]
   3f5b6:	2101      	movs	r1, #1
   3f5b8:	f008 fc25 	bl	47e06 <z_queue_node_peek>
   3f5bc:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f5be:	4620      	mov	r0, r4
   3f5c0:	f001 fbaa 	bl	40d18 <z_spin_unlock_valid>
   3f5c4:	b968      	cbnz	r0, 3f5e2 <z_impl_k_queue_get+0x8a>
   3f5c6:	2384      	movs	r3, #132	; 0x84
   3f5c8:	4a12      	ldr	r2, [pc, #72]	; (3f614 <z_impl_k_queue_get+0xbc>)
   3f5ca:	4916      	ldr	r1, [pc, #88]	; (3f624 <z_impl_k_queue_get+0xcc>)
   3f5cc:	4813      	ldr	r0, [pc, #76]	; (3f61c <z_impl_k_queue_get+0xc4>)
   3f5ce:	f004 fe7f 	bl	442d0 <printk>
   3f5d2:	4621      	mov	r1, r4
   3f5d4:	4814      	ldr	r0, [pc, #80]	; (3f628 <z_impl_k_queue_get+0xd0>)
   3f5d6:	f004 fe7b 	bl	442d0 <printk>
   3f5da:	2184      	movs	r1, #132	; 0x84
   3f5dc:	480d      	ldr	r0, [pc, #52]	; (3f614 <z_impl_k_queue_get+0xbc>)
   3f5de:	f005 f891 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f5e2:	f387 8811 	msr	BASEPRI, r7
   3f5e6:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   3f5ea:	4628      	mov	r0, r5
   3f5ec:	b003      	add	sp, #12
   3f5ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3f5f2:	ea58 0309 	orrs.w	r3, r8, r9
   3f5f6:	d0e2      	beq.n	3f5be <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   3f5f8:	e9cd 8900 	strd	r8, r9, [sp]
   3f5fc:	f106 020c 	add.w	r2, r6, #12
   3f600:	4639      	mov	r1, r7
   3f602:	4620      	mov	r0, r4
   3f604:	f000 fe86 	bl	40314 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   3f608:	2800      	cmp	r0, #0
   3f60a:	d1ee      	bne.n	3f5ea <z_impl_k_queue_get+0x92>
   3f60c:	4b07      	ldr	r3, [pc, #28]	; (3f62c <z_impl_k_queue_get+0xd4>)
   3f60e:	689b      	ldr	r3, [r3, #8]
   3f610:	695d      	ldr	r5, [r3, #20]
   3f612:	e7ea      	b.n	3f5ea <z_impl_k_queue_get+0x92>
   3f614:	0004be5f 	.word	0x0004be5f
   3f618:	0004be85 	.word	0x0004be85
   3f61c:	0004b33b 	.word	0x0004b33b
   3f620:	0004be9a 	.word	0x0004be9a
   3f624:	0004beb2 	.word	0x0004beb2
   3f628:	0004bec9 	.word	0x0004bec9
   3f62c:	2002611c 	.word	0x2002611c

0003f630 <pended_on.isra.18>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   3f630:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   3f632:	b510      	push	{r4, lr}
   3f634:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   3f636:	b95b      	cbnz	r3, 3f650 <pended_on.isra.18+0x20>
   3f638:	4906      	ldr	r1, [pc, #24]	; (3f654 <pended_on.isra.18+0x24>)
   3f63a:	4807      	ldr	r0, [pc, #28]	; (3f658 <pended_on.isra.18+0x28>)
   3f63c:	f240 13ed 	movw	r3, #493	; 0x1ed
   3f640:	4a06      	ldr	r2, [pc, #24]	; (3f65c <pended_on.isra.18+0x2c>)
   3f642:	f004 fe45 	bl	442d0 <printk>
   3f646:	f240 11ed 	movw	r1, #493	; 0x1ed
   3f64a:	4804      	ldr	r0, [pc, #16]	; (3f65c <pended_on.isra.18+0x2c>)
   3f64c:	f005 f85a 	bl	44704 <assert_post_action>

	return thread->base.pended_on;
}
   3f650:	6820      	ldr	r0, [r4, #0]
   3f652:	bd10      	pop	{r4, pc}
   3f654:	00052696 	.word	0x00052696
   3f658:	0004b33b 	.word	0x0004b33b
   3f65c:	00052674 	.word	0x00052674

0003f660 <z_reset_time_slice>:
{
   3f660:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   3f662:	4c08      	ldr	r4, [pc, #32]	; (3f684 <z_reset_time_slice+0x24>)
   3f664:	6823      	ldr	r3, [r4, #0]
   3f666:	b15b      	cbz	r3, 3f680 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   3f668:	f7e7 fdc0 	bl	271ec <z_clock_elapsed>
   3f66c:	6823      	ldr	r3, [r4, #0]
   3f66e:	4a06      	ldr	r2, [pc, #24]	; (3f688 <z_reset_time_slice+0x28>)
   3f670:	4418      	add	r0, r3
   3f672:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   3f674:	2100      	movs	r1, #0
}
   3f676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   3f67a:	4618      	mov	r0, r3
   3f67c:	f001 be8e 	b.w	4139c <z_set_timeout_expiry>
}
   3f680:	bd10      	pop	{r4, pc}
   3f682:	bf00      	nop
   3f684:	2002615c 	.word	0x2002615c
   3f688:	2002611c 	.word	0x2002611c

0003f68c <k_sched_time_slice_set>:
{
   3f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3f68e:	4607      	mov	r7, r0
   3f690:	460d      	mov	r5, r1
	__asm__ volatile(
   3f692:	f04f 0320 	mov.w	r3, #32
   3f696:	f3ef 8411 	mrs	r4, BASEPRI
   3f69a:	f383 8811 	msr	BASEPRI, r3
   3f69e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f6a2:	4820      	ldr	r0, [pc, #128]	; (3f724 <k_sched_time_slice_set+0x98>)
   3f6a4:	f001 fb2a 	bl	40cfc <z_spin_lock_valid>
   3f6a8:	b968      	cbnz	r0, 3f6c6 <k_sched_time_slice_set+0x3a>
   3f6aa:	235c      	movs	r3, #92	; 0x5c
   3f6ac:	4a1e      	ldr	r2, [pc, #120]	; (3f728 <k_sched_time_slice_set+0x9c>)
   3f6ae:	491f      	ldr	r1, [pc, #124]	; (3f72c <k_sched_time_slice_set+0xa0>)
   3f6b0:	481f      	ldr	r0, [pc, #124]	; (3f730 <k_sched_time_slice_set+0xa4>)
   3f6b2:	f004 fe0d 	bl	442d0 <printk>
   3f6b6:	491b      	ldr	r1, [pc, #108]	; (3f724 <k_sched_time_slice_set+0x98>)
   3f6b8:	481e      	ldr	r0, [pc, #120]	; (3f734 <k_sched_time_slice_set+0xa8>)
   3f6ba:	f004 fe09 	bl	442d0 <printk>
   3f6be:	215c      	movs	r1, #92	; 0x5c
   3f6c0:	4819      	ldr	r0, [pc, #100]	; (3f728 <k_sched_time_slice_set+0x9c>)
   3f6c2:	f005 f81f 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f6c6:	4817      	ldr	r0, [pc, #92]	; (3f724 <k_sched_time_slice_set+0x98>)
   3f6c8:	f001 fb36 	bl	40d38 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   3f6cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   3f6d0:	2200      	movs	r2, #0
   3f6d2:	f240 30e7 	movw	r0, #999	; 0x3e7
   3f6d6:	2100      	movs	r1, #0
   3f6d8:	4b17      	ldr	r3, [pc, #92]	; (3f738 <k_sched_time_slice_set+0xac>)
   3f6da:	fbe6 0107 	umlal	r0, r1, r6, r7
   3f6de:	611a      	str	r2, [r3, #16]
   3f6e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3f6e4:	2300      	movs	r3, #0
   3f6e6:	f7dd fbe9 	bl	1cebc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   3f6ea:	4b14      	ldr	r3, [pc, #80]	; (3f73c <k_sched_time_slice_set+0xb0>)
   3f6ec:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   3f6ee:	4b14      	ldr	r3, [pc, #80]	; (3f740 <k_sched_time_slice_set+0xb4>)
   3f6f0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   3f6f2:	f7ff ffb5 	bl	3f660 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f6f6:	480b      	ldr	r0, [pc, #44]	; (3f724 <k_sched_time_slice_set+0x98>)
   3f6f8:	f001 fb0e 	bl	40d18 <z_spin_unlock_valid>
   3f6fc:	b968      	cbnz	r0, 3f71a <k_sched_time_slice_set+0x8e>
   3f6fe:	2384      	movs	r3, #132	; 0x84
   3f700:	4a09      	ldr	r2, [pc, #36]	; (3f728 <k_sched_time_slice_set+0x9c>)
   3f702:	4910      	ldr	r1, [pc, #64]	; (3f744 <k_sched_time_slice_set+0xb8>)
   3f704:	480a      	ldr	r0, [pc, #40]	; (3f730 <k_sched_time_slice_set+0xa4>)
   3f706:	f004 fde3 	bl	442d0 <printk>
   3f70a:	4906      	ldr	r1, [pc, #24]	; (3f724 <k_sched_time_slice_set+0x98>)
   3f70c:	480e      	ldr	r0, [pc, #56]	; (3f748 <k_sched_time_slice_set+0xbc>)
   3f70e:	f004 fddf 	bl	442d0 <printk>
   3f712:	2184      	movs	r1, #132	; 0x84
   3f714:	4804      	ldr	r0, [pc, #16]	; (3f728 <k_sched_time_slice_set+0x9c>)
   3f716:	f004 fff5 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f71a:	f384 8811 	msr	BASEPRI, r4
   3f71e:	f3bf 8f6f 	isb	sy
}
   3f722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3f724:	20026154 	.word	0x20026154
   3f728:	0004be5f 	.word	0x0004be5f
   3f72c:	0004be85 	.word	0x0004be85
   3f730:	0004b33b 	.word	0x0004b33b
   3f734:	0004be9a 	.word	0x0004be9a
   3f738:	2002611c 	.word	0x2002611c
   3f73c:	2002615c 	.word	0x2002615c
   3f740:	20026158 	.word	0x20026158
   3f744:	0004beb2 	.word	0x0004beb2
   3f748:	0004bec9 	.word	0x0004bec9

0003f74c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   3f74c:	b538      	push	{r3, r4, r5, lr}
   3f74e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3f750:	460d      	mov	r5, r1
   3f752:	b9e9      	cbnz	r1, 3f790 <z_reschedule+0x44>
   3f754:	f3ef 8305 	mrs	r3, IPSR
   3f758:	b9d3      	cbnz	r3, 3f790 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   3f75a:	4b19      	ldr	r3, [pc, #100]	; (3f7c0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   3f75c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   3f75e:	689b      	ldr	r3, [r3, #8]
   3f760:	429a      	cmp	r2, r3
   3f762:	d015      	beq.n	3f790 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f764:	f001 fad8 	bl	40d18 <z_spin_unlock_valid>
   3f768:	b968      	cbnz	r0, 3f786 <z_reschedule+0x3a>
   3f76a:	239b      	movs	r3, #155	; 0x9b
   3f76c:	4a15      	ldr	r2, [pc, #84]	; (3f7c4 <z_reschedule+0x78>)
   3f76e:	4916      	ldr	r1, [pc, #88]	; (3f7c8 <z_reschedule+0x7c>)
   3f770:	4816      	ldr	r0, [pc, #88]	; (3f7cc <z_reschedule+0x80>)
   3f772:	f004 fdad 	bl	442d0 <printk>
   3f776:	4621      	mov	r1, r4
   3f778:	4815      	ldr	r0, [pc, #84]	; (3f7d0 <z_reschedule+0x84>)
   3f77a:	f004 fda9 	bl	442d0 <printk>
   3f77e:	219b      	movs	r1, #155	; 0x9b
   3f780:	4810      	ldr	r0, [pc, #64]	; (3f7c4 <z_reschedule+0x78>)
   3f782:	f004 ffbf 	bl	44704 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   3f786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   3f78a:	2000      	movs	r0, #0
   3f78c:	f7e7 bf24 	b.w	275d8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f790:	4620      	mov	r0, r4
   3f792:	f001 fac1 	bl	40d18 <z_spin_unlock_valid>
   3f796:	b968      	cbnz	r0, 3f7b4 <z_reschedule+0x68>
   3f798:	2384      	movs	r3, #132	; 0x84
   3f79a:	4a0a      	ldr	r2, [pc, #40]	; (3f7c4 <z_reschedule+0x78>)
   3f79c:	490a      	ldr	r1, [pc, #40]	; (3f7c8 <z_reschedule+0x7c>)
   3f79e:	480b      	ldr	r0, [pc, #44]	; (3f7cc <z_reschedule+0x80>)
   3f7a0:	f004 fd96 	bl	442d0 <printk>
   3f7a4:	4621      	mov	r1, r4
   3f7a6:	480a      	ldr	r0, [pc, #40]	; (3f7d0 <z_reschedule+0x84>)
   3f7a8:	f004 fd92 	bl	442d0 <printk>
   3f7ac:	2184      	movs	r1, #132	; 0x84
   3f7ae:	4805      	ldr	r0, [pc, #20]	; (3f7c4 <z_reschedule+0x78>)
   3f7b0:	f004 ffa8 	bl	44704 <assert_post_action>
   3f7b4:	f385 8811 	msr	BASEPRI, r5
   3f7b8:	f3bf 8f6f 	isb	sy
   3f7bc:	bd38      	pop	{r3, r4, r5, pc}
   3f7be:	bf00      	nop
   3f7c0:	2002611c 	.word	0x2002611c
   3f7c4:	0004be5f 	.word	0x0004be5f
   3f7c8:	0004beb2 	.word	0x0004beb2
   3f7cc:	0004b33b 	.word	0x0004b33b
   3f7d0:	0004bec9 	.word	0x0004bec9

0003f7d4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   3f7d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3f7d6:	f04f 0320 	mov.w	r3, #32
   3f7da:	f3ef 8511 	mrs	r5, BASEPRI
   3f7de:	f383 8811 	msr	BASEPRI, r3
   3f7e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f7e6:	482b      	ldr	r0, [pc, #172]	; (3f894 <k_sched_lock+0xc0>)
   3f7e8:	f001 fa88 	bl	40cfc <z_spin_lock_valid>
   3f7ec:	b968      	cbnz	r0, 3f80a <k_sched_lock+0x36>
   3f7ee:	235c      	movs	r3, #92	; 0x5c
   3f7f0:	4a29      	ldr	r2, [pc, #164]	; (3f898 <k_sched_lock+0xc4>)
   3f7f2:	492a      	ldr	r1, [pc, #168]	; (3f89c <k_sched_lock+0xc8>)
   3f7f4:	482a      	ldr	r0, [pc, #168]	; (3f8a0 <k_sched_lock+0xcc>)
   3f7f6:	f004 fd6b 	bl	442d0 <printk>
   3f7fa:	4926      	ldr	r1, [pc, #152]	; (3f894 <k_sched_lock+0xc0>)
   3f7fc:	4829      	ldr	r0, [pc, #164]	; (3f8a4 <k_sched_lock+0xd0>)
   3f7fe:	f004 fd67 	bl	442d0 <printk>
   3f802:	215c      	movs	r1, #92	; 0x5c
   3f804:	4824      	ldr	r0, [pc, #144]	; (3f898 <k_sched_lock+0xc4>)
   3f806:	f004 ff7d 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f80a:	4822      	ldr	r0, [pc, #136]	; (3f894 <k_sched_lock+0xc0>)
   3f80c:	f001 fa94 	bl	40d38 <z_spin_lock_set_owner>
   3f810:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3f814:	b173      	cbz	r3, 3f834 <k_sched_lock+0x60>
   3f816:	4924      	ldr	r1, [pc, #144]	; (3f8a8 <k_sched_lock+0xd4>)
   3f818:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3f81c:	4a23      	ldr	r2, [pc, #140]	; (3f8ac <k_sched_lock+0xd8>)
   3f81e:	4820      	ldr	r0, [pc, #128]	; (3f8a0 <k_sched_lock+0xcc>)
   3f820:	f004 fd56 	bl	442d0 <printk>
   3f824:	4822      	ldr	r0, [pc, #136]	; (3f8b0 <k_sched_lock+0xdc>)
   3f826:	f004 fd53 	bl	442d0 <printk>
   3f82a:	f44f 7186 	mov.w	r1, #268	; 0x10c
   3f82e:	481f      	ldr	r0, [pc, #124]	; (3f8ac <k_sched_lock+0xd8>)
   3f830:	f004 ff68 	bl	44704 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   3f834:	4c1f      	ldr	r4, [pc, #124]	; (3f8b4 <k_sched_lock+0xe0>)
   3f836:	68a2      	ldr	r2, [r4, #8]
   3f838:	7bd2      	ldrb	r2, [r2, #15]
   3f83a:	2a01      	cmp	r2, #1
   3f83c:	d10e      	bne.n	3f85c <k_sched_lock+0x88>
   3f83e:	491e      	ldr	r1, [pc, #120]	; (3f8b8 <k_sched_lock+0xe4>)
   3f840:	f240 130d 	movw	r3, #269	; 0x10d
   3f844:	4a19      	ldr	r2, [pc, #100]	; (3f8ac <k_sched_lock+0xd8>)
   3f846:	4816      	ldr	r0, [pc, #88]	; (3f8a0 <k_sched_lock+0xcc>)
   3f848:	f004 fd42 	bl	442d0 <printk>
   3f84c:	4818      	ldr	r0, [pc, #96]	; (3f8b0 <k_sched_lock+0xdc>)
   3f84e:	f004 fd3f 	bl	442d0 <printk>
   3f852:	f240 110d 	movw	r1, #269	; 0x10d
   3f856:	4815      	ldr	r0, [pc, #84]	; (3f8ac <k_sched_lock+0xd8>)
   3f858:	f004 ff54 	bl	44704 <assert_post_action>
	--_current->base.sched_locked;
   3f85c:	68a2      	ldr	r2, [r4, #8]
   3f85e:	7bd3      	ldrb	r3, [r2, #15]
   3f860:	3b01      	subs	r3, #1
   3f862:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f864:	480b      	ldr	r0, [pc, #44]	; (3f894 <k_sched_lock+0xc0>)
   3f866:	f001 fa57 	bl	40d18 <z_spin_unlock_valid>
   3f86a:	b968      	cbnz	r0, 3f888 <k_sched_lock+0xb4>
   3f86c:	2384      	movs	r3, #132	; 0x84
   3f86e:	4a0a      	ldr	r2, [pc, #40]	; (3f898 <k_sched_lock+0xc4>)
   3f870:	4912      	ldr	r1, [pc, #72]	; (3f8bc <k_sched_lock+0xe8>)
   3f872:	480b      	ldr	r0, [pc, #44]	; (3f8a0 <k_sched_lock+0xcc>)
   3f874:	f004 fd2c 	bl	442d0 <printk>
   3f878:	4906      	ldr	r1, [pc, #24]	; (3f894 <k_sched_lock+0xc0>)
   3f87a:	4811      	ldr	r0, [pc, #68]	; (3f8c0 <k_sched_lock+0xec>)
   3f87c:	f004 fd28 	bl	442d0 <printk>
   3f880:	2184      	movs	r1, #132	; 0x84
   3f882:	4805      	ldr	r0, [pc, #20]	; (3f898 <k_sched_lock+0xc4>)
   3f884:	f004 ff3e 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f888:	f385 8811 	msr	BASEPRI, r5
   3f88c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   3f890:	bd38      	pop	{r3, r4, r5, pc}
   3f892:	bf00      	nop
   3f894:	20026154 	.word	0x20026154
   3f898:	0004be5f 	.word	0x0004be5f
   3f89c:	0004be85 	.word	0x0004be85
   3f8a0:	0004b33b 	.word	0x0004b33b
   3f8a4:	0004be9a 	.word	0x0004be9a
   3f8a8:	0005259b 	.word	0x0005259b
   3f8ac:	000525e9 	.word	0x000525e9
   3f8b0:	0004c55b 	.word	0x0004c55b
   3f8b4:	2002611c 	.word	0x2002611c
   3f8b8:	00052614 	.word	0x00052614
   3f8bc:	0004beb2 	.word	0x0004beb2
   3f8c0:	0004bec9 	.word	0x0004bec9

0003f8c4 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3f8c4:	4b11      	ldr	r3, [pc, #68]	; (3f90c <z_priq_dumb_remove+0x48>)
{
   3f8c6:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3f8c8:	f103 0228 	add.w	r2, r3, #40	; 0x28
   3f8cc:	4282      	cmp	r2, r0
{
   3f8ce:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   3f8d0:	d105      	bne.n	3f8de <z_priq_dumb_remove+0x1a>
   3f8d2:	689b      	ldr	r3, [r3, #8]
   3f8d4:	428b      	cmp	r3, r1
   3f8d6:	d102      	bne.n	3f8de <z_priq_dumb_remove+0x1a>
   3f8d8:	7b4b      	ldrb	r3, [r1, #13]
   3f8da:	06db      	lsls	r3, r3, #27
   3f8dc:	d115      	bne.n	3f90a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3f8de:	4b0c      	ldr	r3, [pc, #48]	; (3f910 <z_priq_dumb_remove+0x4c>)
   3f8e0:	429c      	cmp	r4, r3
   3f8e2:	d10b      	bne.n	3f8fc <z_priq_dumb_remove+0x38>
   3f8e4:	490b      	ldr	r1, [pc, #44]	; (3f914 <z_priq_dumb_remove+0x50>)
   3f8e6:	480c      	ldr	r0, [pc, #48]	; (3f918 <z_priq_dumb_remove+0x54>)
   3f8e8:	f240 339f 	movw	r3, #927	; 0x39f
   3f8ec:	4a0b      	ldr	r2, [pc, #44]	; (3f91c <z_priq_dumb_remove+0x58>)
   3f8ee:	f004 fcef 	bl	442d0 <printk>
   3f8f2:	f240 319f 	movw	r1, #927	; 0x39f
   3f8f6:	4809      	ldr	r0, [pc, #36]	; (3f91c <z_priq_dumb_remove+0x58>)
   3f8f8:	f004 ff04 	bl	44704 <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   3f8fc:	e9d4 3200 	ldrd	r3, r2, [r4]
   3f900:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3f902:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3f904:	2300      	movs	r3, #0
	node->prev = NULL;
   3f906:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3f90a:	bd10      	pop	{r4, pc}
   3f90c:	2002611c 	.word	0x2002611c
   3f910:	200246f8 	.word	0x200246f8
   3f914:	000526ad 	.word	0x000526ad
   3f918:	0004b33b 	.word	0x0004b33b
   3f91c:	00052674 	.word	0x00052674

0003f920 <z_unpend_thread>:
{
   3f920:	b538      	push	{r3, r4, r5, lr}
   3f922:	4604      	mov	r4, r0
	__asm__ volatile(
   3f924:	f04f 0320 	mov.w	r3, #32
   3f928:	f3ef 8511 	mrs	r5, BASEPRI
   3f92c:	f383 8811 	msr	BASEPRI, r3
   3f930:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3f934:	4819      	ldr	r0, [pc, #100]	; (3f99c <z_unpend_thread+0x7c>)
   3f936:	f001 f9e1 	bl	40cfc <z_spin_lock_valid>
   3f93a:	b968      	cbnz	r0, 3f958 <z_unpend_thread+0x38>
   3f93c:	235c      	movs	r3, #92	; 0x5c
   3f93e:	4a18      	ldr	r2, [pc, #96]	; (3f9a0 <z_unpend_thread+0x80>)
   3f940:	4918      	ldr	r1, [pc, #96]	; (3f9a4 <z_unpend_thread+0x84>)
   3f942:	4819      	ldr	r0, [pc, #100]	; (3f9a8 <z_unpend_thread+0x88>)
   3f944:	f004 fcc4 	bl	442d0 <printk>
   3f948:	4914      	ldr	r1, [pc, #80]	; (3f99c <z_unpend_thread+0x7c>)
   3f94a:	4818      	ldr	r0, [pc, #96]	; (3f9ac <z_unpend_thread+0x8c>)
   3f94c:	f004 fcc0 	bl	442d0 <printk>
   3f950:	215c      	movs	r1, #92	; 0x5c
   3f952:	4813      	ldr	r0, [pc, #76]	; (3f9a0 <z_unpend_thread+0x80>)
   3f954:	f004 fed6 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3f958:	4810      	ldr	r0, [pc, #64]	; (3f99c <z_unpend_thread+0x7c>)
   3f95a:	f001 f9ed 	bl	40d38 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3f95e:	4620      	mov	r0, r4
   3f960:	f008 fa93 	bl	47e8a <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3f964:	480d      	ldr	r0, [pc, #52]	; (3f99c <z_unpend_thread+0x7c>)
   3f966:	f001 f9d7 	bl	40d18 <z_spin_unlock_valid>
   3f96a:	b968      	cbnz	r0, 3f988 <z_unpend_thread+0x68>
   3f96c:	2384      	movs	r3, #132	; 0x84
   3f96e:	4a0c      	ldr	r2, [pc, #48]	; (3f9a0 <z_unpend_thread+0x80>)
   3f970:	490f      	ldr	r1, [pc, #60]	; (3f9b0 <z_unpend_thread+0x90>)
   3f972:	480d      	ldr	r0, [pc, #52]	; (3f9a8 <z_unpend_thread+0x88>)
   3f974:	f004 fcac 	bl	442d0 <printk>
   3f978:	4908      	ldr	r1, [pc, #32]	; (3f99c <z_unpend_thread+0x7c>)
   3f97a:	480e      	ldr	r0, [pc, #56]	; (3f9b4 <z_unpend_thread+0x94>)
   3f97c:	f004 fca8 	bl	442d0 <printk>
   3f980:	2184      	movs	r1, #132	; 0x84
   3f982:	4807      	ldr	r0, [pc, #28]	; (3f9a0 <z_unpend_thread+0x80>)
   3f984:	f004 febe 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3f988:	f385 8811 	msr	BASEPRI, r5
   3f98c:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   3f990:	f104 0018 	add.w	r0, r4, #24
}
   3f994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   3f998:	f001 bc1e 	b.w	411d8 <z_abort_timeout>
   3f99c:	20026154 	.word	0x20026154
   3f9a0:	0004be5f 	.word	0x0004be5f
   3f9a4:	0004be85 	.word	0x0004be85
   3f9a8:	0004b33b 	.word	0x0004b33b
   3f9ac:	0004be9a 	.word	0x0004be9a
   3f9b0:	0004beb2 	.word	0x0004beb2
   3f9b4:	0004bec9 	.word	0x0004bec9

0003f9b8 <update_cache>:
{
   3f9b8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3f9ba:	4c10      	ldr	r4, [pc, #64]	; (3f9fc <update_cache+0x44>)
{
   3f9bc:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   3f9be:	f104 0028 	add.w	r0, r4, #40	; 0x28
   3f9c2:	f008 fa71 	bl	47ea8 <z_priq_dumb_best>
   3f9c6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   3f9c8:	68a3      	ldr	r3, [r4, #8]
   3f9ca:	7b59      	ldrb	r1, [r3, #13]
   3f9cc:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   3f9ce:	bf44      	itt	mi
   3f9d0:	f041 0108 	orrmi.w	r1, r1, #8
   3f9d4:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   3f9d6:	b905      	cbnz	r5, 3f9da <update_cache+0x22>
   3f9d8:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   3f9da:	b94e      	cbnz	r6, 3f9f0 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   3f9dc:	7b5a      	ldrb	r2, [r3, #13]
   3f9de:	06d2      	lsls	r2, r2, #27
   3f9e0:	d106      	bne.n	3f9f0 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   3f9e2:	69aa      	ldr	r2, [r5, #24]
   3f9e4:	b922      	cbnz	r2, 3f9f0 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   3f9e6:	89da      	ldrh	r2, [r3, #14]
   3f9e8:	2a7f      	cmp	r2, #127	; 0x7f
   3f9ea:	d901      	bls.n	3f9f0 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   3f9ec:	6263      	str	r3, [r4, #36]	; 0x24
}
   3f9ee:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   3f9f0:	42ab      	cmp	r3, r5
   3f9f2:	d001      	beq.n	3f9f8 <update_cache+0x40>
			z_reset_time_slice();
   3f9f4:	f7ff fe34 	bl	3f660 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3f9f8:	6265      	str	r5, [r4, #36]	; 0x24
}
   3f9fa:	e7f8      	b.n	3f9ee <update_cache+0x36>
   3f9fc:	2002611c 	.word	0x2002611c

0003fa00 <k_sched_unlock>:
{
   3fa00:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3fa02:	f04f 0320 	mov.w	r3, #32
   3fa06:	f3ef 8511 	mrs	r5, BASEPRI
   3fa0a:	f383 8811 	msr	BASEPRI, r3
   3fa0e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fa12:	482d      	ldr	r0, [pc, #180]	; (3fac8 <k_sched_unlock+0xc8>)
   3fa14:	f001 f972 	bl	40cfc <z_spin_lock_valid>
   3fa18:	b968      	cbnz	r0, 3fa36 <k_sched_unlock+0x36>
   3fa1a:	235c      	movs	r3, #92	; 0x5c
   3fa1c:	4a2b      	ldr	r2, [pc, #172]	; (3facc <k_sched_unlock+0xcc>)
   3fa1e:	492c      	ldr	r1, [pc, #176]	; (3fad0 <k_sched_unlock+0xd0>)
   3fa20:	482c      	ldr	r0, [pc, #176]	; (3fad4 <k_sched_unlock+0xd4>)
   3fa22:	f004 fc55 	bl	442d0 <printk>
   3fa26:	4928      	ldr	r1, [pc, #160]	; (3fac8 <k_sched_unlock+0xc8>)
   3fa28:	482b      	ldr	r0, [pc, #172]	; (3fad8 <k_sched_unlock+0xd8>)
   3fa2a:	f004 fc51 	bl	442d0 <printk>
   3fa2e:	215c      	movs	r1, #92	; 0x5c
   3fa30:	4826      	ldr	r0, [pc, #152]	; (3facc <k_sched_unlock+0xcc>)
   3fa32:	f004 fe67 	bl	44704 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   3fa36:	4c29      	ldr	r4, [pc, #164]	; (3fadc <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   3fa38:	4823      	ldr	r0, [pc, #140]	; (3fac8 <k_sched_unlock+0xc8>)
   3fa3a:	f001 f97d 	bl	40d38 <z_spin_lock_set_owner>
   3fa3e:	68a2      	ldr	r2, [r4, #8]
   3fa40:	7bd2      	ldrb	r2, [r2, #15]
   3fa42:	b972      	cbnz	r2, 3fa62 <k_sched_unlock+0x62>
   3fa44:	4926      	ldr	r1, [pc, #152]	; (3fae0 <k_sched_unlock+0xe0>)
   3fa46:	f240 333a 	movw	r3, #826	; 0x33a
   3fa4a:	4a26      	ldr	r2, [pc, #152]	; (3fae4 <k_sched_unlock+0xe4>)
   3fa4c:	4821      	ldr	r0, [pc, #132]	; (3fad4 <k_sched_unlock+0xd4>)
   3fa4e:	f004 fc3f 	bl	442d0 <printk>
   3fa52:	4825      	ldr	r0, [pc, #148]	; (3fae8 <k_sched_unlock+0xe8>)
   3fa54:	f004 fc3c 	bl	442d0 <printk>
   3fa58:	f240 313a 	movw	r1, #826	; 0x33a
   3fa5c:	4821      	ldr	r0, [pc, #132]	; (3fae4 <k_sched_unlock+0xe4>)
   3fa5e:	f004 fe51 	bl	44704 <assert_post_action>
   3fa62:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   3fa66:	b173      	cbz	r3, 3fa86 <k_sched_unlock+0x86>
   3fa68:	4920      	ldr	r1, [pc, #128]	; (3faec <k_sched_unlock+0xec>)
   3fa6a:	f240 333b 	movw	r3, #827	; 0x33b
   3fa6e:	4a1d      	ldr	r2, [pc, #116]	; (3fae4 <k_sched_unlock+0xe4>)
   3fa70:	4818      	ldr	r0, [pc, #96]	; (3fad4 <k_sched_unlock+0xd4>)
   3fa72:	f004 fc2d 	bl	442d0 <printk>
   3fa76:	481c      	ldr	r0, [pc, #112]	; (3fae8 <k_sched_unlock+0xe8>)
   3fa78:	f004 fc2a 	bl	442d0 <printk>
   3fa7c:	f240 313b 	movw	r1, #827	; 0x33b
   3fa80:	4818      	ldr	r0, [pc, #96]	; (3fae4 <k_sched_unlock+0xe4>)
   3fa82:	f004 fe3f 	bl	44704 <assert_post_action>
		++_current->base.sched_locked;
   3fa86:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   3fa88:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   3fa8a:	7bd3      	ldrb	r3, [r2, #15]
   3fa8c:	3301      	adds	r3, #1
   3fa8e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3fa90:	f7ff ff92 	bl	3f9b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3fa94:	480c      	ldr	r0, [pc, #48]	; (3fac8 <k_sched_unlock+0xc8>)
   3fa96:	f001 f93f 	bl	40d18 <z_spin_unlock_valid>
   3fa9a:	b968      	cbnz	r0, 3fab8 <k_sched_unlock+0xb8>
   3fa9c:	2384      	movs	r3, #132	; 0x84
   3fa9e:	4a0b      	ldr	r2, [pc, #44]	; (3facc <k_sched_unlock+0xcc>)
   3faa0:	4913      	ldr	r1, [pc, #76]	; (3faf0 <k_sched_unlock+0xf0>)
   3faa2:	480c      	ldr	r0, [pc, #48]	; (3fad4 <k_sched_unlock+0xd4>)
   3faa4:	f004 fc14 	bl	442d0 <printk>
   3faa8:	4907      	ldr	r1, [pc, #28]	; (3fac8 <k_sched_unlock+0xc8>)
   3faaa:	4812      	ldr	r0, [pc, #72]	; (3faf4 <k_sched_unlock+0xf4>)
   3faac:	f004 fc10 	bl	442d0 <printk>
   3fab0:	2184      	movs	r1, #132	; 0x84
   3fab2:	4806      	ldr	r0, [pc, #24]	; (3facc <k_sched_unlock+0xcc>)
   3fab4:	f004 fe26 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3fab8:	f385 8811 	msr	BASEPRI, r5
   3fabc:	f3bf 8f6f 	isb	sy
}
   3fac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   3fac4:	f008 b9d7 	b.w	47e76 <z_reschedule_unlocked>
   3fac8:	20026154 	.word	0x20026154
   3facc:	0004be5f 	.word	0x0004be5f
   3fad0:	0004be85 	.word	0x0004be85
   3fad4:	0004b33b 	.word	0x0004b33b
   3fad8:	0004be9a 	.word	0x0004be9a
   3fadc:	2002611c 	.word	0x2002611c
   3fae0:	00052644 	.word	0x00052644
   3fae4:	00052674 	.word	0x00052674
   3fae8:	0004c55b 	.word	0x0004c55b
   3faec:	0005259b 	.word	0x0005259b
   3faf0:	0004beb2 	.word	0x0004beb2
   3faf4:	0004bec9 	.word	0x0004bec9

0003faf8 <ready_thread>:
{
   3faf8:	b570      	push	{r4, r5, r6, lr}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   3fafa:	7b43      	ldrb	r3, [r0, #13]
   3fafc:	4604      	mov	r4, r0
   3fafe:	06db      	lsls	r3, r3, #27
   3fb00:	d138      	bne.n	3fb74 <ready_thread+0x7c>
	if (z_is_thread_ready(thread)) {
   3fb02:	6983      	ldr	r3, [r0, #24]
   3fb04:	2b00      	cmp	r3, #0
   3fb06:	d135      	bne.n	3fb74 <ready_thread+0x7c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3fb08:	4b1b      	ldr	r3, [pc, #108]	; (3fb78 <ready_thread+0x80>)
   3fb0a:	4298      	cmp	r0, r3
   3fb0c:	d10b      	bne.n	3fb26 <ready_thread+0x2e>
   3fb0e:	491b      	ldr	r1, [pc, #108]	; (3fb7c <ready_thread+0x84>)
   3fb10:	481b      	ldr	r0, [pc, #108]	; (3fb80 <ready_thread+0x88>)
   3fb12:	f240 3389 	movw	r3, #905	; 0x389
   3fb16:	4a1b      	ldr	r2, [pc, #108]	; (3fb84 <ready_thread+0x8c>)
   3fb18:	f004 fbda 	bl	442d0 <printk>
   3fb1c:	f240 3189 	movw	r1, #905	; 0x389
   3fb20:	4818      	ldr	r0, [pc, #96]	; (3fb84 <ready_thread+0x8c>)
   3fb22:	f004 fdef 	bl	44704 <assert_post_action>
	return list->head == list;
   3fb26:	4a18      	ldr	r2, [pc, #96]	; (3fb88 <ready_thread+0x90>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3fb28:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3fb2c:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3fb30:	428b      	cmp	r3, r1
   3fb32:	d019      	beq.n	3fb68 <ready_thread+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3fb34:	b1c3      	cbz	r3, 3fb68 <ready_thread+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   3fb36:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3fb3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3fb3e:	42ae      	cmp	r6, r5
   3fb40:	dd0d      	ble.n	3fb5e <ready_thread+0x66>
	node->prev = successor->prev;
   3fb42:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   3fb44:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   3fb48:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3fb4a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3fb4c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   3fb4e:	2000      	movs	r0, #0
   3fb50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3fb54:	7363      	strb	r3, [r4, #13]
}
   3fb56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   3fb5a:	f7ff bf2d 	b.w	3f9b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3fb5e:	4298      	cmp	r0, r3
   3fb60:	d002      	beq.n	3fb68 <ready_thread+0x70>
   3fb62:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3fb64:	2b00      	cmp	r3, #0
   3fb66:	d1e8      	bne.n	3fb3a <ready_thread+0x42>
	node->prev = list->tail;
   3fb68:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3fb6c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3fb6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3fb70:	62d4      	str	r4, [r2, #44]	; 0x2c
   3fb72:	e7eb      	b.n	3fb4c <ready_thread+0x54>
}
   3fb74:	bd70      	pop	{r4, r5, r6, pc}
   3fb76:	bf00      	nop
   3fb78:	200246f8 	.word	0x200246f8
   3fb7c:	000526ad 	.word	0x000526ad
   3fb80:	0004b33b 	.word	0x0004b33b
   3fb84:	00052674 	.word	0x00052674
   3fb88:	2002611c 	.word	0x2002611c

0003fb8c <z_ready_thread>:
{
   3fb8c:	b538      	push	{r3, r4, r5, lr}
   3fb8e:	4605      	mov	r5, r0
	__asm__ volatile(
   3fb90:	f04f 0320 	mov.w	r3, #32
   3fb94:	f3ef 8411 	mrs	r4, BASEPRI
   3fb98:	f383 8811 	msr	BASEPRI, r3
   3fb9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fba0:	4817      	ldr	r0, [pc, #92]	; (3fc00 <z_ready_thread+0x74>)
   3fba2:	f001 f8ab 	bl	40cfc <z_spin_lock_valid>
   3fba6:	b968      	cbnz	r0, 3fbc4 <z_ready_thread+0x38>
   3fba8:	235c      	movs	r3, #92	; 0x5c
   3fbaa:	4a16      	ldr	r2, [pc, #88]	; (3fc04 <z_ready_thread+0x78>)
   3fbac:	4916      	ldr	r1, [pc, #88]	; (3fc08 <z_ready_thread+0x7c>)
   3fbae:	4817      	ldr	r0, [pc, #92]	; (3fc0c <z_ready_thread+0x80>)
   3fbb0:	f004 fb8e 	bl	442d0 <printk>
   3fbb4:	4912      	ldr	r1, [pc, #72]	; (3fc00 <z_ready_thread+0x74>)
   3fbb6:	4816      	ldr	r0, [pc, #88]	; (3fc10 <z_ready_thread+0x84>)
   3fbb8:	f004 fb8a 	bl	442d0 <printk>
   3fbbc:	215c      	movs	r1, #92	; 0x5c
   3fbbe:	4811      	ldr	r0, [pc, #68]	; (3fc04 <z_ready_thread+0x78>)
   3fbc0:	f004 fda0 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fbc4:	480e      	ldr	r0, [pc, #56]	; (3fc00 <z_ready_thread+0x74>)
   3fbc6:	f001 f8b7 	bl	40d38 <z_spin_lock_set_owner>
		ready_thread(thread);
   3fbca:	4628      	mov	r0, r5
   3fbcc:	f7ff ff94 	bl	3faf8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3fbd0:	480b      	ldr	r0, [pc, #44]	; (3fc00 <z_ready_thread+0x74>)
   3fbd2:	f001 f8a1 	bl	40d18 <z_spin_unlock_valid>
   3fbd6:	b968      	cbnz	r0, 3fbf4 <z_ready_thread+0x68>
   3fbd8:	2384      	movs	r3, #132	; 0x84
   3fbda:	4a0a      	ldr	r2, [pc, #40]	; (3fc04 <z_ready_thread+0x78>)
   3fbdc:	490d      	ldr	r1, [pc, #52]	; (3fc14 <z_ready_thread+0x88>)
   3fbde:	480b      	ldr	r0, [pc, #44]	; (3fc0c <z_ready_thread+0x80>)
   3fbe0:	f004 fb76 	bl	442d0 <printk>
   3fbe4:	4906      	ldr	r1, [pc, #24]	; (3fc00 <z_ready_thread+0x74>)
   3fbe6:	480c      	ldr	r0, [pc, #48]	; (3fc18 <z_ready_thread+0x8c>)
   3fbe8:	f004 fb72 	bl	442d0 <printk>
   3fbec:	2184      	movs	r1, #132	; 0x84
   3fbee:	4805      	ldr	r0, [pc, #20]	; (3fc04 <z_ready_thread+0x78>)
   3fbf0:	f004 fd88 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3fbf4:	f384 8811 	msr	BASEPRI, r4
   3fbf8:	f3bf 8f6f 	isb	sy
}
   3fbfc:	bd38      	pop	{r3, r4, r5, pc}
   3fbfe:	bf00      	nop
   3fc00:	20026154 	.word	0x20026154
   3fc04:	0004be5f 	.word	0x0004be5f
   3fc08:	0004be85 	.word	0x0004be85
   3fc0c:	0004b33b 	.word	0x0004b33b
   3fc10:	0004be9a 	.word	0x0004be9a
   3fc14:	0004beb2 	.word	0x0004beb2
   3fc18:	0004bec9 	.word	0x0004bec9

0003fc1c <z_sched_start>:
{
   3fc1c:	b538      	push	{r3, r4, r5, lr}
   3fc1e:	4604      	mov	r4, r0
	__asm__ volatile(
   3fc20:	f04f 0320 	mov.w	r3, #32
   3fc24:	f3ef 8511 	mrs	r5, BASEPRI
   3fc28:	f383 8811 	msr	BASEPRI, r3
   3fc2c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fc30:	481d      	ldr	r0, [pc, #116]	; (3fca8 <z_sched_start+0x8c>)
   3fc32:	f001 f863 	bl	40cfc <z_spin_lock_valid>
   3fc36:	b968      	cbnz	r0, 3fc54 <z_sched_start+0x38>
   3fc38:	235c      	movs	r3, #92	; 0x5c
   3fc3a:	4a1c      	ldr	r2, [pc, #112]	; (3fcac <z_sched_start+0x90>)
   3fc3c:	491c      	ldr	r1, [pc, #112]	; (3fcb0 <z_sched_start+0x94>)
   3fc3e:	481d      	ldr	r0, [pc, #116]	; (3fcb4 <z_sched_start+0x98>)
   3fc40:	f004 fb46 	bl	442d0 <printk>
   3fc44:	4918      	ldr	r1, [pc, #96]	; (3fca8 <z_sched_start+0x8c>)
   3fc46:	481c      	ldr	r0, [pc, #112]	; (3fcb8 <z_sched_start+0x9c>)
   3fc48:	f004 fb42 	bl	442d0 <printk>
   3fc4c:	215c      	movs	r1, #92	; 0x5c
   3fc4e:	4817      	ldr	r0, [pc, #92]	; (3fcac <z_sched_start+0x90>)
   3fc50:	f004 fd58 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fc54:	4814      	ldr	r0, [pc, #80]	; (3fca8 <z_sched_start+0x8c>)
   3fc56:	f001 f86f 	bl	40d38 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   3fc5a:	7b63      	ldrb	r3, [r4, #13]
   3fc5c:	075a      	lsls	r2, r3, #29
   3fc5e:	d416      	bmi.n	3fc8e <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3fc60:	4811      	ldr	r0, [pc, #68]	; (3fca8 <z_sched_start+0x8c>)
   3fc62:	f001 f859 	bl	40d18 <z_spin_unlock_valid>
   3fc66:	b968      	cbnz	r0, 3fc84 <z_sched_start+0x68>
   3fc68:	2384      	movs	r3, #132	; 0x84
   3fc6a:	4a10      	ldr	r2, [pc, #64]	; (3fcac <z_sched_start+0x90>)
   3fc6c:	4913      	ldr	r1, [pc, #76]	; (3fcbc <z_sched_start+0xa0>)
   3fc6e:	4811      	ldr	r0, [pc, #68]	; (3fcb4 <z_sched_start+0x98>)
   3fc70:	f004 fb2e 	bl	442d0 <printk>
   3fc74:	490c      	ldr	r1, [pc, #48]	; (3fca8 <z_sched_start+0x8c>)
   3fc76:	4812      	ldr	r0, [pc, #72]	; (3fcc0 <z_sched_start+0xa4>)
   3fc78:	f004 fb2a 	bl	442d0 <printk>
   3fc7c:	2184      	movs	r1, #132	; 0x84
   3fc7e:	480b      	ldr	r0, [pc, #44]	; (3fcac <z_sched_start+0x90>)
   3fc80:	f004 fd40 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3fc84:	f385 8811 	msr	BASEPRI, r5
   3fc88:	f3bf 8f6f 	isb	sy
}
   3fc8c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3fc8e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3fc92:	4620      	mov	r0, r4
   3fc94:	7363      	strb	r3, [r4, #13]
   3fc96:	f7ff ff2f 	bl	3faf8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3fc9a:	4629      	mov	r1, r5
}
   3fc9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3fca0:	4801      	ldr	r0, [pc, #4]	; (3fca8 <z_sched_start+0x8c>)
   3fca2:	f7ff bd53 	b.w	3f74c <z_reschedule>
   3fca6:	bf00      	nop
   3fca8:	20026154 	.word	0x20026154
   3fcac:	0004be5f 	.word	0x0004be5f
   3fcb0:	0004be85 	.word	0x0004be85
   3fcb4:	0004b33b 	.word	0x0004b33b
   3fcb8:	0004be9a 	.word	0x0004be9a
   3fcbc:	0004beb2 	.word	0x0004beb2
   3fcc0:	0004bec9 	.word	0x0004bec9

0003fcc4 <z_impl_k_thread_resume>:
{
   3fcc4:	b538      	push	{r3, r4, r5, lr}
   3fcc6:	4604      	mov	r4, r0
	__asm__ volatile(
   3fcc8:	f04f 0320 	mov.w	r3, #32
   3fccc:	f3ef 8511 	mrs	r5, BASEPRI
   3fcd0:	f383 8811 	msr	BASEPRI, r3
   3fcd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fcd8:	4810      	ldr	r0, [pc, #64]	; (3fd1c <z_impl_k_thread_resume+0x58>)
   3fcda:	f001 f80f 	bl	40cfc <z_spin_lock_valid>
   3fcde:	b968      	cbnz	r0, 3fcfc <z_impl_k_thread_resume+0x38>
   3fce0:	235c      	movs	r3, #92	; 0x5c
   3fce2:	4a0f      	ldr	r2, [pc, #60]	; (3fd20 <z_impl_k_thread_resume+0x5c>)
   3fce4:	490f      	ldr	r1, [pc, #60]	; (3fd24 <z_impl_k_thread_resume+0x60>)
   3fce6:	4810      	ldr	r0, [pc, #64]	; (3fd28 <z_impl_k_thread_resume+0x64>)
   3fce8:	f004 faf2 	bl	442d0 <printk>
   3fcec:	490b      	ldr	r1, [pc, #44]	; (3fd1c <z_impl_k_thread_resume+0x58>)
   3fcee:	480f      	ldr	r0, [pc, #60]	; (3fd2c <z_impl_k_thread_resume+0x68>)
   3fcf0:	f004 faee 	bl	442d0 <printk>
   3fcf4:	215c      	movs	r1, #92	; 0x5c
   3fcf6:	480a      	ldr	r0, [pc, #40]	; (3fd20 <z_impl_k_thread_resume+0x5c>)
   3fcf8:	f004 fd04 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fcfc:	4807      	ldr	r0, [pc, #28]	; (3fd1c <z_impl_k_thread_resume+0x58>)
   3fcfe:	f001 f81b 	bl	40d38 <z_spin_lock_set_owner>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3fd02:	7b63      	ldrb	r3, [r4, #13]
	ready_thread(thread);
   3fd04:	4620      	mov	r0, r4
   3fd06:	f023 0310 	bic.w	r3, r3, #16
   3fd0a:	7363      	strb	r3, [r4, #13]
   3fd0c:	f7ff fef4 	bl	3faf8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3fd10:	4629      	mov	r1, r5
}
   3fd12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3fd16:	4801      	ldr	r0, [pc, #4]	; (3fd1c <z_impl_k_thread_resume+0x58>)
   3fd18:	f7ff bd18 	b.w	3f74c <z_reschedule>
   3fd1c:	20026154 	.word	0x20026154
   3fd20:	0004be5f 	.word	0x0004be5f
   3fd24:	0004be85 	.word	0x0004be85
   3fd28:	0004b33b 	.word	0x0004b33b
   3fd2c:	0004be9a 	.word	0x0004be9a

0003fd30 <z_thread_timeout>:
{
   3fd30:	b570      	push	{r4, r5, r6, lr}
   3fd32:	4604      	mov	r4, r0
   3fd34:	f04f 0320 	mov.w	r3, #32
   3fd38:	f3ef 8611 	mrs	r6, BASEPRI
   3fd3c:	f383 8811 	msr	BASEPRI, r3
   3fd40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fd44:	481e      	ldr	r0, [pc, #120]	; (3fdc0 <z_thread_timeout+0x90>)
   3fd46:	f000 ffd9 	bl	40cfc <z_spin_lock_valid>
   3fd4a:	b968      	cbnz	r0, 3fd68 <z_thread_timeout+0x38>
   3fd4c:	235c      	movs	r3, #92	; 0x5c
   3fd4e:	4a1d      	ldr	r2, [pc, #116]	; (3fdc4 <z_thread_timeout+0x94>)
   3fd50:	491d      	ldr	r1, [pc, #116]	; (3fdc8 <z_thread_timeout+0x98>)
   3fd52:	481e      	ldr	r0, [pc, #120]	; (3fdcc <z_thread_timeout+0x9c>)
   3fd54:	f004 fabc 	bl	442d0 <printk>
   3fd58:	4919      	ldr	r1, [pc, #100]	; (3fdc0 <z_thread_timeout+0x90>)
   3fd5a:	481d      	ldr	r0, [pc, #116]	; (3fdd0 <z_thread_timeout+0xa0>)
   3fd5c:	f004 fab8 	bl	442d0 <printk>
   3fd60:	215c      	movs	r1, #92	; 0x5c
   3fd62:	4818      	ldr	r0, [pc, #96]	; (3fdc4 <z_thread_timeout+0x94>)
   3fd64:	f004 fcce 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3fd68:	4815      	ldr	r0, [pc, #84]	; (3fdc0 <z_thread_timeout+0x90>)
   3fd6a:	f000 ffe5 	bl	40d38 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   3fd6e:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   3fd72:	f1a4 0518 	sub.w	r5, r4, #24
		if (thread->base.pended_on != NULL) {
   3fd76:	b113      	cbz	r3, 3fd7e <z_thread_timeout+0x4e>
			unpend_thread_no_timeout(thread);
   3fd78:	4628      	mov	r0, r5
   3fd7a:	f008 f886 	bl	47e8a <unpend_thread_no_timeout>
   3fd7e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
   3fd82:	4628      	mov	r0, r5
   3fd84:	f023 0314 	bic.w	r3, r3, #20
   3fd88:	f804 3c0b 	strb.w	r3, [r4, #-11]
   3fd8c:	f7ff feb4 	bl	3faf8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3fd90:	480b      	ldr	r0, [pc, #44]	; (3fdc0 <z_thread_timeout+0x90>)
   3fd92:	f000 ffc1 	bl	40d18 <z_spin_unlock_valid>
   3fd96:	b968      	cbnz	r0, 3fdb4 <z_thread_timeout+0x84>
   3fd98:	2384      	movs	r3, #132	; 0x84
   3fd9a:	4a0a      	ldr	r2, [pc, #40]	; (3fdc4 <z_thread_timeout+0x94>)
   3fd9c:	490d      	ldr	r1, [pc, #52]	; (3fdd4 <z_thread_timeout+0xa4>)
   3fd9e:	480b      	ldr	r0, [pc, #44]	; (3fdcc <z_thread_timeout+0x9c>)
   3fda0:	f004 fa96 	bl	442d0 <printk>
   3fda4:	4906      	ldr	r1, [pc, #24]	; (3fdc0 <z_thread_timeout+0x90>)
   3fda6:	480c      	ldr	r0, [pc, #48]	; (3fdd8 <z_thread_timeout+0xa8>)
   3fda8:	f004 fa92 	bl	442d0 <printk>
   3fdac:	2184      	movs	r1, #132	; 0x84
   3fdae:	4805      	ldr	r0, [pc, #20]	; (3fdc4 <z_thread_timeout+0x94>)
   3fdb0:	f004 fca8 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3fdb4:	f386 8811 	msr	BASEPRI, r6
   3fdb8:	f3bf 8f6f 	isb	sy
}
   3fdbc:	bd70      	pop	{r4, r5, r6, pc}
   3fdbe:	bf00      	nop
   3fdc0:	20026154 	.word	0x20026154
   3fdc4:	0004be5f 	.word	0x0004be5f
   3fdc8:	0004be85 	.word	0x0004be85
   3fdcc:	0004b33b 	.word	0x0004b33b
   3fdd0:	0004be9a 	.word	0x0004be9a
   3fdd4:	0004beb2 	.word	0x0004beb2
   3fdd8:	0004bec9 	.word	0x0004bec9

0003fddc <move_thread_to_end_of_prio_q>:
{
   3fddc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   3fdde:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   3fde2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   3fde4:	2b00      	cmp	r3, #0
   3fde6:	da03      	bge.n	3fdf0 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   3fde8:	4601      	mov	r1, r0
   3fdea:	481e      	ldr	r0, [pc, #120]	; (3fe64 <move_thread_to_end_of_prio_q+0x88>)
   3fdec:	f7ff fd6a 	bl	3f8c4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3fdf0:	4b1d      	ldr	r3, [pc, #116]	; (3fe68 <move_thread_to_end_of_prio_q+0x8c>)
   3fdf2:	429c      	cmp	r4, r3
   3fdf4:	d10b      	bne.n	3fe0e <move_thread_to_end_of_prio_q+0x32>
   3fdf6:	491d      	ldr	r1, [pc, #116]	; (3fe6c <move_thread_to_end_of_prio_q+0x90>)
   3fdf8:	481d      	ldr	r0, [pc, #116]	; (3fe70 <move_thread_to_end_of_prio_q+0x94>)
   3fdfa:	f240 3389 	movw	r3, #905	; 0x389
   3fdfe:	4a1d      	ldr	r2, [pc, #116]	; (3fe74 <move_thread_to_end_of_prio_q+0x98>)
   3fe00:	f004 fa66 	bl	442d0 <printk>
   3fe04:	f240 3189 	movw	r1, #905	; 0x389
   3fe08:	481a      	ldr	r0, [pc, #104]	; (3fe74 <move_thread_to_end_of_prio_q+0x98>)
   3fe0a:	f004 fc7b 	bl	44704 <assert_post_action>
	return list->head == list;
   3fe0e:	4a1a      	ldr	r2, [pc, #104]	; (3fe78 <move_thread_to_end_of_prio_q+0x9c>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3fe10:	f102 0128 	add.w	r1, r2, #40	; 0x28
   3fe14:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   3fe18:	428b      	cmp	r3, r1
   3fe1a:	d01c      	beq.n	3fe56 <move_thread_to_end_of_prio_q+0x7a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3fe1c:	b1db      	cbz	r3, 3fe56 <move_thread_to_end_of_prio_q+0x7a>
	if (thread_1->base.prio < thread_2->base.prio) {
   3fe1e:	f994 500e 	ldrsb.w	r5, [r4, #14]
   3fe22:	f993 600e 	ldrsb.w	r6, [r3, #14]
   3fe26:	42ae      	cmp	r6, r5
   3fe28:	dd10      	ble.n	3fe4c <move_thread_to_end_of_prio_q+0x70>
	node->prev = successor->prev;
   3fe2a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   3fe2c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   3fe30:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3fe32:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3fe34:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   3fe36:	6890      	ldr	r0, [r2, #8]
   3fe38:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3fe3c:	7363      	strb	r3, [r4, #13]
   3fe3e:	1b03      	subs	r3, r0, r4
   3fe40:	4258      	negs	r0, r3
   3fe42:	4158      	adcs	r0, r3
}
   3fe44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   3fe48:	f7ff bdb6 	b.w	3f9b8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   3fe4c:	4298      	cmp	r0, r3
   3fe4e:	d002      	beq.n	3fe56 <move_thread_to_end_of_prio_q+0x7a>
   3fe50:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3fe52:	2b00      	cmp	r3, #0
   3fe54:	d1e5      	bne.n	3fe22 <move_thread_to_end_of_prio_q+0x46>
	node->prev = list->tail;
   3fe56:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   3fe5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   3fe5c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3fe5e:	62d4      	str	r4, [r2, #44]	; 0x2c
   3fe60:	e7e8      	b.n	3fe34 <move_thread_to_end_of_prio_q+0x58>
   3fe62:	bf00      	nop
   3fe64:	20026144 	.word	0x20026144
   3fe68:	200246f8 	.word	0x200246f8
   3fe6c:	000526ad 	.word	0x000526ad
   3fe70:	0004b33b 	.word	0x0004b33b
   3fe74:	00052674 	.word	0x00052674
   3fe78:	2002611c 	.word	0x2002611c

0003fe7c <z_time_slice>:
{
   3fe7c:	b570      	push	{r4, r5, r6, lr}
   3fe7e:	4605      	mov	r5, r0
	__asm__ volatile(
   3fe80:	f04f 0320 	mov.w	r3, #32
   3fe84:	f3ef 8411 	mrs	r4, BASEPRI
   3fe88:	f383 8811 	msr	BASEPRI, r3
   3fe8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3fe90:	482a      	ldr	r0, [pc, #168]	; (3ff3c <z_time_slice+0xc0>)
   3fe92:	f000 ff33 	bl	40cfc <z_spin_lock_valid>
   3fe96:	b968      	cbnz	r0, 3feb4 <z_time_slice+0x38>
   3fe98:	235c      	movs	r3, #92	; 0x5c
   3fe9a:	4a29      	ldr	r2, [pc, #164]	; (3ff40 <z_time_slice+0xc4>)
   3fe9c:	4929      	ldr	r1, [pc, #164]	; (3ff44 <z_time_slice+0xc8>)
   3fe9e:	482a      	ldr	r0, [pc, #168]	; (3ff48 <z_time_slice+0xcc>)
   3fea0:	f004 fa16 	bl	442d0 <printk>
   3fea4:	4925      	ldr	r1, [pc, #148]	; (3ff3c <z_time_slice+0xc0>)
   3fea6:	4829      	ldr	r0, [pc, #164]	; (3ff4c <z_time_slice+0xd0>)
   3fea8:	f004 fa12 	bl	442d0 <printk>
   3feac:	215c      	movs	r1, #92	; 0x5c
   3feae:	4824      	ldr	r0, [pc, #144]	; (3ff40 <z_time_slice+0xc4>)
   3feb0:	f004 fc28 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3feb4:	4821      	ldr	r0, [pc, #132]	; (3ff3c <z_time_slice+0xc0>)
   3feb6:	f000 ff3f 	bl	40d38 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   3feba:	4b25      	ldr	r3, [pc, #148]	; (3ff50 <z_time_slice+0xd4>)
   3febc:	4a25      	ldr	r2, [pc, #148]	; (3ff54 <z_time_slice+0xd8>)
   3febe:	6898      	ldr	r0, [r3, #8]
   3fec0:	6811      	ldr	r1, [r2, #0]
   3fec2:	4288      	cmp	r0, r1
   3fec4:	4619      	mov	r1, r3
   3fec6:	d118      	bne.n	3fefa <z_time_slice+0x7e>
			z_reset_time_slice();
   3fec8:	f7ff fbca 	bl	3f660 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3fecc:	481b      	ldr	r0, [pc, #108]	; (3ff3c <z_time_slice+0xc0>)
   3fece:	f000 ff23 	bl	40d18 <z_spin_unlock_valid>
   3fed2:	b968      	cbnz	r0, 3fef0 <z_time_slice+0x74>
   3fed4:	2384      	movs	r3, #132	; 0x84
   3fed6:	4a1a      	ldr	r2, [pc, #104]	; (3ff40 <z_time_slice+0xc4>)
   3fed8:	491f      	ldr	r1, [pc, #124]	; (3ff58 <z_time_slice+0xdc>)
   3feda:	481b      	ldr	r0, [pc, #108]	; (3ff48 <z_time_slice+0xcc>)
   3fedc:	f004 f9f8 	bl	442d0 <printk>
   3fee0:	4916      	ldr	r1, [pc, #88]	; (3ff3c <z_time_slice+0xc0>)
   3fee2:	481e      	ldr	r0, [pc, #120]	; (3ff5c <z_time_slice+0xe0>)
   3fee4:	f004 f9f4 	bl	442d0 <printk>
   3fee8:	2184      	movs	r1, #132	; 0x84
   3feea:	4815      	ldr	r0, [pc, #84]	; (3ff40 <z_time_slice+0xc4>)
   3feec:	f004 fc0a 	bl	44704 <assert_post_action>
	__asm__ volatile(
   3fef0:	f384 8811 	msr	BASEPRI, r4
   3fef4:	f3bf 8f6f 	isb	sy
}
   3fef8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   3fefa:	2600      	movs	r6, #0
   3fefc:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   3fefe:	4a18      	ldr	r2, [pc, #96]	; (3ff60 <z_time_slice+0xe4>)
   3ff00:	6812      	ldr	r2, [r2, #0]
   3ff02:	b1ba      	cbz	r2, 3ff34 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3ff04:	89c2      	ldrh	r2, [r0, #14]
   3ff06:	2a7f      	cmp	r2, #127	; 0x7f
   3ff08:	d814      	bhi.n	3ff34 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   3ff0a:	7b42      	ldrb	r2, [r0, #13]
   3ff0c:	06d2      	lsls	r2, r2, #27
   3ff0e:	d111      	bne.n	3ff34 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   3ff10:	4a14      	ldr	r2, [pc, #80]	; (3ff64 <z_time_slice+0xe8>)
   3ff12:	f990 600e 	ldrsb.w	r6, [r0, #14]
   3ff16:	6812      	ldr	r2, [r2, #0]
   3ff18:	4296      	cmp	r6, r2
   3ff1a:	db0b      	blt.n	3ff34 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   3ff1c:	4a12      	ldr	r2, [pc, #72]	; (3ff68 <z_time_slice+0xec>)
   3ff1e:	4290      	cmp	r0, r2
   3ff20:	d008      	beq.n	3ff34 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   3ff22:	691a      	ldr	r2, [r3, #16]
   3ff24:	42aa      	cmp	r2, r5
   3ff26:	dc02      	bgt.n	3ff2e <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   3ff28:	f7ff ff58 	bl	3fddc <move_thread_to_end_of_prio_q>
   3ff2c:	e7cc      	b.n	3fec8 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   3ff2e:	1b52      	subs	r2, r2, r5
   3ff30:	611a      	str	r2, [r3, #16]
   3ff32:	e7cb      	b.n	3fecc <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   3ff34:	2300      	movs	r3, #0
   3ff36:	610b      	str	r3, [r1, #16]
   3ff38:	e7c8      	b.n	3fecc <z_time_slice+0x50>
   3ff3a:	bf00      	nop
   3ff3c:	20026154 	.word	0x20026154
   3ff40:	0004be5f 	.word	0x0004be5f
   3ff44:	0004be85 	.word	0x0004be85
   3ff48:	0004b33b 	.word	0x0004b33b
   3ff4c:	0004be9a 	.word	0x0004be9a
   3ff50:	2002611c 	.word	0x2002611c
   3ff54:	20026150 	.word	0x20026150
   3ff58:	0004beb2 	.word	0x0004beb2
   3ff5c:	0004bec9 	.word	0x0004bec9
   3ff60:	2002615c 	.word	0x2002615c
   3ff64:	20026158 	.word	0x20026158
   3ff68:	200246f8 	.word	0x200246f8

0003ff6c <z_impl_k_thread_suspend>:
{
   3ff6c:	b570      	push	{r4, r5, r6, lr}
   3ff6e:	4604      	mov	r4, r0
   3ff70:	3018      	adds	r0, #24
   3ff72:	f001 f931 	bl	411d8 <z_abort_timeout>
	__asm__ volatile(
   3ff76:	f04f 0320 	mov.w	r3, #32
   3ff7a:	f3ef 8611 	mrs	r6, BASEPRI
   3ff7e:	f383 8811 	msr	BASEPRI, r3
   3ff82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3ff86:	4825      	ldr	r0, [pc, #148]	; (4001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   3ff88:	f000 feb8 	bl	40cfc <z_spin_lock_valid>
   3ff8c:	b968      	cbnz	r0, 3ffaa <z_impl_k_thread_suspend+0x3e>
   3ff8e:	235c      	movs	r3, #92	; 0x5c
   3ff90:	4a23      	ldr	r2, [pc, #140]	; (40020 <CONFIG_PM_SRAM_SIZE+0x20>)
   3ff92:	4924      	ldr	r1, [pc, #144]	; (40024 <CONFIG_PM_SRAM_SIZE+0x24>)
   3ff94:	4824      	ldr	r0, [pc, #144]	; (40028 <CONFIG_PM_SRAM_SIZE+0x28>)
   3ff96:	f004 f99b 	bl	442d0 <printk>
   3ff9a:	4920      	ldr	r1, [pc, #128]	; (4001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   3ff9c:	4823      	ldr	r0, [pc, #140]	; (4002c <CONFIG_PM_SRAM_SIZE+0x2c>)
   3ff9e:	f004 f997 	bl	442d0 <printk>
   3ffa2:	215c      	movs	r1, #92	; 0x5c
   3ffa4:	481e      	ldr	r0, [pc, #120]	; (40020 <CONFIG_PM_SRAM_SIZE+0x20>)
   3ffa6:	f004 fbad 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   3ffaa:	481c      	ldr	r0, [pc, #112]	; (4001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   3ffac:	f000 fec4 	bl	40d38 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3ffb0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   3ffb4:	2b00      	cmp	r3, #0
   3ffb6:	da07      	bge.n	3ffc8 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   3ffb8:	4621      	mov	r1, r4
   3ffba:	481d      	ldr	r0, [pc, #116]	; (40030 <CONFIG_PM_SRAM_SIZE+0x30>)
   3ffbc:	f7ff fc82 	bl	3f8c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3ffc0:	7b63      	ldrb	r3, [r4, #13]
   3ffc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   3ffc6:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3ffc8:	4d1a      	ldr	r5, [pc, #104]	; (40034 <CONFIG_PM_SRAM_SIZE+0x34>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   3ffca:	7b63      	ldrb	r3, [r4, #13]
   3ffcc:	68a8      	ldr	r0, [r5, #8]
   3ffce:	f043 0310 	orr.w	r3, r3, #16
   3ffd2:	7363      	strb	r3, [r4, #13]
   3ffd4:	1b03      	subs	r3, r0, r4
   3ffd6:	4258      	negs	r0, r3
   3ffd8:	4158      	adcs	r0, r3
   3ffda:	f7ff fced 	bl	3f9b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3ffde:	480f      	ldr	r0, [pc, #60]	; (4001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   3ffe0:	f000 fe9a 	bl	40d18 <z_spin_unlock_valid>
   3ffe4:	b968      	cbnz	r0, 40002 <CONFIG_PM_SRAM_SIZE+0x2>
   3ffe6:	2384      	movs	r3, #132	; 0x84
   3ffe8:	4a0d      	ldr	r2, [pc, #52]	; (40020 <CONFIG_PM_SRAM_SIZE+0x20>)
   3ffea:	4913      	ldr	r1, [pc, #76]	; (40038 <CONFIG_PM_SRAM_SIZE+0x38>)
   3ffec:	480e      	ldr	r0, [pc, #56]	; (40028 <CONFIG_PM_SRAM_SIZE+0x28>)
   3ffee:	f004 f96f 	bl	442d0 <printk>
   3fff2:	490a      	ldr	r1, [pc, #40]	; (4001c <CONFIG_PM_SRAM_SIZE+0x1c>)
   3fff4:	4811      	ldr	r0, [pc, #68]	; (4003c <CONFIG_PM_SRAM_SIZE+0x3c>)
   3fff6:	f004 f96b 	bl	442d0 <printk>
   3fffa:	2184      	movs	r1, #132	; 0x84
   3fffc:	4808      	ldr	r0, [pc, #32]	; (40020 <CONFIG_PM_SRAM_SIZE+0x20>)
   3fffe:	f004 fb81 	bl	44704 <assert_post_action>
	__asm__ volatile(
   40002:	f386 8811 	msr	BASEPRI, r6
   40006:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   4000a:	68ab      	ldr	r3, [r5, #8]
   4000c:	42a3      	cmp	r3, r4
   4000e:	d103      	bne.n	40018 <CONFIG_PM_SRAM_SIZE+0x18>
}
   40010:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   40014:	f007 bf2f 	b.w	47e76 <z_reschedule_unlocked>
}
   40018:	bd70      	pop	{r4, r5, r6, pc}
   4001a:	bf00      	nop
   4001c:	20026154 	.word	0x20026154
   40020:	0004be5f 	.word	0x0004be5f
   40024:	0004be85 	.word	0x0004be85
   40028:	0004b33b 	.word	0x0004b33b
   4002c:	0004be9a 	.word	0x0004be9a
   40030:	20026144 	.word	0x20026144
   40034:	2002611c 	.word	0x2002611c
   40038:	0004beb2 	.word	0x0004beb2
   4003c:	0004bec9 	.word	0x0004bec9

00040040 <z_thread_single_abort>:
{
   40040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   40044:	7b03      	ldrb	r3, [r0, #12]
{
   40046:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   40048:	07dd      	lsls	r5, r3, #31
   4004a:	d50e      	bpl.n	4006a <z_thread_single_abort+0x2a>
   4004c:	4948      	ldr	r1, [pc, #288]	; (40170 <z_thread_single_abort+0x130>)
   4004e:	f240 13f5 	movw	r3, #501	; 0x1f5
   40052:	4a48      	ldr	r2, [pc, #288]	; (40174 <z_thread_single_abort+0x134>)
   40054:	4848      	ldr	r0, [pc, #288]	; (40178 <z_thread_single_abort+0x138>)
   40056:	f004 f93b 	bl	442d0 <printk>
   4005a:	4848      	ldr	r0, [pc, #288]	; (4017c <z_thread_single_abort+0x13c>)
   4005c:	f004 f938 	bl	442d0 <printk>
   40060:	f240 11f5 	movw	r1, #501	; 0x1f5
   40064:	4843      	ldr	r0, [pc, #268]	; (40174 <z_thread_single_abort+0x134>)
   40066:	f004 fb4d 	bl	44704 <assert_post_action>
	if (thread->fn_abort != NULL) {
   4006a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   4006c:	b103      	cbz	r3, 40070 <z_thread_single_abort+0x30>
		thread->fn_abort();
   4006e:	4798      	blx	r3
   40070:	f104 0018 	add.w	r0, r4, #24
   40074:	f001 f8b0 	bl	411d8 <z_abort_timeout>
	__asm__ volatile(
   40078:	f04f 0320 	mov.w	r3, #32
   4007c:	f3ef 8611 	mrs	r6, BASEPRI
   40080:	f383 8811 	msr	BASEPRI, r3
   40084:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40088:	483d      	ldr	r0, [pc, #244]	; (40180 <z_thread_single_abort+0x140>)
   4008a:	f000 fe37 	bl	40cfc <z_spin_lock_valid>
   4008e:	b968      	cbnz	r0, 400ac <z_thread_single_abort+0x6c>
   40090:	235c      	movs	r3, #92	; 0x5c
   40092:	4a3c      	ldr	r2, [pc, #240]	; (40184 <z_thread_single_abort+0x144>)
   40094:	493c      	ldr	r1, [pc, #240]	; (40188 <z_thread_single_abort+0x148>)
   40096:	4838      	ldr	r0, [pc, #224]	; (40178 <z_thread_single_abort+0x138>)
   40098:	f004 f91a 	bl	442d0 <printk>
   4009c:	4938      	ldr	r1, [pc, #224]	; (40180 <z_thread_single_abort+0x140>)
   4009e:	483b      	ldr	r0, [pc, #236]	; (4018c <z_thread_single_abort+0x14c>)
   400a0:	f004 f916 	bl	442d0 <printk>
   400a4:	215c      	movs	r1, #92	; 0x5c
   400a6:	4837      	ldr	r0, [pc, #220]	; (40184 <z_thread_single_abort+0x144>)
   400a8:	f004 fb2c 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   400ac:	4834      	ldr	r0, [pc, #208]	; (40180 <z_thread_single_abort+0x140>)
   400ae:	f000 fe43 	bl	40d38 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   400b2:	7b63      	ldrb	r3, [r4, #13]
   400b4:	06d8      	lsls	r0, r3, #27
   400b6:	d136      	bne.n	40126 <z_thread_single_abort+0xe6>
		if (z_is_thread_ready(thread)) {
   400b8:	69a2      	ldr	r2, [r4, #24]
   400ba:	2a00      	cmp	r2, #0
   400bc:	d133      	bne.n	40126 <z_thread_single_abort+0xe6>
			if (z_is_thread_queued(thread)) {
   400be:	0619      	lsls	r1, r3, #24
   400c0:	d507      	bpl.n	400d2 <z_thread_single_abort+0x92>
				_priq_run_remove(&_kernel.ready_q.runq,
   400c2:	4621      	mov	r1, r4
   400c4:	4832      	ldr	r0, [pc, #200]	; (40190 <z_thread_single_abort+0x150>)
   400c6:	f7ff fbfd 	bl	3f8c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   400ca:	7b63      	ldrb	r3, [r4, #13]
   400cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   400d0:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   400d2:	4b30      	ldr	r3, [pc, #192]	; (40194 <z_thread_single_abort+0x154>)
   400d4:	6898      	ldr	r0, [r3, #8]
   400d6:	1b02      	subs	r2, r0, r4
   400d8:	4250      	negs	r0, r2
   400da:	4150      	adcs	r0, r2
   400dc:	f7ff fc6c 	bl	3f9b8 <update_cache>
			waiter->base.pended_on = NULL;
   400e0:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   400e2:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   400e4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   400e8:	f043 0308 	orr.w	r3, r3, #8
   400ec:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   400ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   400f0:	4545      	cmp	r5, r8
   400f2:	d000      	beq.n	400f6 <z_thread_single_abort+0xb6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   400f4:	bb3d      	cbnz	r5, 40146 <z_thread_single_abort+0x106>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   400f6:	4822      	ldr	r0, [pc, #136]	; (40180 <z_thread_single_abort+0x140>)
   400f8:	f000 fe0e 	bl	40d18 <z_spin_unlock_valid>
   400fc:	b968      	cbnz	r0, 4011a <z_thread_single_abort+0xda>
   400fe:	2384      	movs	r3, #132	; 0x84
   40100:	4a20      	ldr	r2, [pc, #128]	; (40184 <z_thread_single_abort+0x144>)
   40102:	4925      	ldr	r1, [pc, #148]	; (40198 <z_thread_single_abort+0x158>)
   40104:	481c      	ldr	r0, [pc, #112]	; (40178 <z_thread_single_abort+0x138>)
   40106:	f004 f8e3 	bl	442d0 <printk>
   4010a:	491d      	ldr	r1, [pc, #116]	; (40180 <z_thread_single_abort+0x140>)
   4010c:	4823      	ldr	r0, [pc, #140]	; (4019c <z_thread_single_abort+0x15c>)
   4010e:	f004 f8df 	bl	442d0 <printk>
   40112:	2184      	movs	r1, #132	; 0x84
   40114:	481b      	ldr	r0, [pc, #108]	; (40184 <z_thread_single_abort+0x144>)
   40116:	f004 faf5 	bl	44704 <assert_post_action>
	__asm__ volatile(
   4011a:	f386 8811 	msr	BASEPRI, r6
   4011e:	f3bf 8f6f 	isb	sy
}
   40122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   40126:	079b      	lsls	r3, r3, #30
   40128:	d5da      	bpl.n	400e0 <z_thread_single_abort+0xa0>
				_priq_wait_remove(&pended_on(thread)->waitq,
   4012a:	f104 0008 	add.w	r0, r4, #8
   4012e:	f7ff fa7f 	bl	3f630 <pended_on.isra.18>
   40132:	4621      	mov	r1, r4
   40134:	f7ff fbc6 	bl	3f8c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   40138:	7b63      	ldrb	r3, [r4, #13]
   4013a:	f023 0302 	bic.w	r3, r3, #2
   4013e:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   40140:	2300      	movs	r3, #0
   40142:	60a3      	str	r3, [r4, #8]
   40144:	e7cc      	b.n	400e0 <z_thread_single_abort+0xa0>
   40146:	f105 0018 	add.w	r0, r5, #24
   4014a:	f001 f845 	bl	411d8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   4014e:	f105 0008 	add.w	r0, r5, #8
   40152:	f7ff fa6d 	bl	3f630 <pended_on.isra.18>
   40156:	4629      	mov	r1, r5
   40158:	f7ff fbb4 	bl	3f8c4 <z_priq_dumb_remove>
   4015c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   4015e:	60af      	str	r7, [r5, #8]
   40160:	f023 0302 	bic.w	r3, r3, #2
   40164:	736b      	strb	r3, [r5, #13]
   40166:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   40168:	4628      	mov	r0, r5
   4016a:	f7ff fcc5 	bl	3faf8 <ready_thread>
   4016e:	e7be      	b.n	400ee <z_thread_single_abort+0xae>
   40170:	000526ce 	.word	0x000526ce
   40174:	00052674 	.word	0x00052674
   40178:	0004b33b 	.word	0x0004b33b
   4017c:	000526fc 	.word	0x000526fc
   40180:	20026154 	.word	0x20026154
   40184:	0004be5f 	.word	0x0004be5f
   40188:	0004be85 	.word	0x0004be85
   4018c:	0004be9a 	.word	0x0004be9a
   40190:	20026144 	.word	0x20026144
   40194:	2002611c 	.word	0x2002611c
   40198:	0004beb2 	.word	0x0004beb2
   4019c:	0004bec9 	.word	0x0004bec9

000401a0 <unready_thread>:
{
   401a0:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   401a2:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   401a6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   401a8:	2b00      	cmp	r3, #0
   401aa:	da07      	bge.n	401bc <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   401ac:	4601      	mov	r1, r0
   401ae:	4808      	ldr	r0, [pc, #32]	; (401d0 <unready_thread+0x30>)
   401b0:	f7ff fb88 	bl	3f8c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   401b4:	7b63      	ldrb	r3, [r4, #13]
   401b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   401ba:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   401bc:	4b05      	ldr	r3, [pc, #20]	; (401d4 <unready_thread+0x34>)
   401be:	6898      	ldr	r0, [r3, #8]
   401c0:	1b03      	subs	r3, r0, r4
   401c2:	4258      	negs	r0, r3
   401c4:	4158      	adcs	r0, r3
}
   401c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   401ca:	f7ff bbf5 	b.w	3f9b8 <update_cache>
   401ce:	bf00      	nop
   401d0:	20026144 	.word	0x20026144
   401d4:	2002611c 	.word	0x2002611c

000401d8 <add_to_waitq_locked>:
{
   401d8:	b538      	push	{r3, r4, r5, lr}
   401da:	4604      	mov	r4, r0
   401dc:	460d      	mov	r5, r1
	unready_thread(thread);
   401de:	f7ff ffdf 	bl	401a0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   401e2:	7b63      	ldrb	r3, [r4, #13]
   401e4:	f043 0302 	orr.w	r3, r3, #2
   401e8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   401ea:	b1f5      	cbz	r5, 4022a <add_to_waitq_locked+0x52>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   401ec:	4b16      	ldr	r3, [pc, #88]	; (40248 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
   401ee:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   401f0:	429c      	cmp	r4, r3
   401f2:	d10b      	bne.n	4020c <add_to_waitq_locked+0x34>
   401f4:	4915      	ldr	r1, [pc, #84]	; (4024c <add_to_waitq_locked+0x74>)
   401f6:	4816      	ldr	r0, [pc, #88]	; (40250 <add_to_waitq_locked+0x78>)
   401f8:	f240 3389 	movw	r3, #905	; 0x389
   401fc:	4a15      	ldr	r2, [pc, #84]	; (40254 <add_to_waitq_locked+0x7c>)
   401fe:	f004 f867 	bl	442d0 <printk>
   40202:	f240 3189 	movw	r1, #905	; 0x389
   40206:	4813      	ldr	r0, [pc, #76]	; (40254 <add_to_waitq_locked+0x7c>)
   40208:	f004 fa7c 	bl	44704 <assert_post_action>
	return list->head == list;
   4020c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4020e:	429d      	cmp	r5, r3
   40210:	d012      	beq.n	40238 <add_to_waitq_locked+0x60>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   40212:	b18b      	cbz	r3, 40238 <add_to_waitq_locked+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   40214:	f994 200e 	ldrsb.w	r2, [r4, #14]
   40218:	f993 100e 	ldrsb.w	r1, [r3, #14]
   4021c:	4291      	cmp	r1, r2
   4021e:	dd05      	ble.n	4022c <add_to_waitq_locked+0x54>
	node->prev = successor->prev;
   40220:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   40222:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   40226:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   40228:	605c      	str	r4, [r3, #4]
}
   4022a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   4022c:	6869      	ldr	r1, [r5, #4]
   4022e:	428b      	cmp	r3, r1
   40230:	d002      	beq.n	40238 <add_to_waitq_locked+0x60>
   40232:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   40234:	2b00      	cmp	r3, #0
   40236:	d1ef      	bne.n	40218 <add_to_waitq_locked+0x40>
	node->prev = list->tail;
   40238:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   4023a:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   4023c:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   4023e:	686b      	ldr	r3, [r5, #4]
   40240:	601c      	str	r4, [r3, #0]
	list->tail = node;
   40242:	606c      	str	r4, [r5, #4]
}
   40244:	e7f1      	b.n	4022a <add_to_waitq_locked+0x52>
   40246:	bf00      	nop
   40248:	200246f8 	.word	0x200246f8
   4024c:	000526ad 	.word	0x000526ad
   40250:	0004b33b 	.word	0x0004b33b
   40254:	00052674 	.word	0x00052674

00040258 <pend>:
{
   40258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4025c:	4604      	mov	r4, r0
   4025e:	4688      	mov	r8, r1
   40260:	4616      	mov	r6, r2
   40262:	461f      	mov	r7, r3
	__asm__ volatile(
   40264:	f04f 0320 	mov.w	r3, #32
   40268:	f3ef 8511 	mrs	r5, BASEPRI
   4026c:	f383 8811 	msr	BASEPRI, r3
   40270:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40274:	481f      	ldr	r0, [pc, #124]	; (402f4 <pend+0x9c>)
   40276:	f000 fd41 	bl	40cfc <z_spin_lock_valid>
   4027a:	b968      	cbnz	r0, 40298 <pend+0x40>
   4027c:	235c      	movs	r3, #92	; 0x5c
   4027e:	4a1e      	ldr	r2, [pc, #120]	; (402f8 <pend+0xa0>)
   40280:	491e      	ldr	r1, [pc, #120]	; (402fc <pend+0xa4>)
   40282:	481f      	ldr	r0, [pc, #124]	; (40300 <pend+0xa8>)
   40284:	f004 f824 	bl	442d0 <printk>
   40288:	491a      	ldr	r1, [pc, #104]	; (402f4 <pend+0x9c>)
   4028a:	481e      	ldr	r0, [pc, #120]	; (40304 <pend+0xac>)
   4028c:	f004 f820 	bl	442d0 <printk>
   40290:	215c      	movs	r1, #92	; 0x5c
   40292:	4819      	ldr	r0, [pc, #100]	; (402f8 <pend+0xa0>)
   40294:	f004 fa36 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   40298:	4816      	ldr	r0, [pc, #88]	; (402f4 <pend+0x9c>)
   4029a:	f000 fd4d 	bl	40d38 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   4029e:	4620      	mov	r0, r4
   402a0:	4641      	mov	r1, r8
   402a2:	f7ff ff99 	bl	401d8 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   402a6:	4813      	ldr	r0, [pc, #76]	; (402f4 <pend+0x9c>)
   402a8:	f000 fd36 	bl	40d18 <z_spin_unlock_valid>
   402ac:	b968      	cbnz	r0, 402ca <pend+0x72>
   402ae:	2384      	movs	r3, #132	; 0x84
   402b0:	4a11      	ldr	r2, [pc, #68]	; (402f8 <pend+0xa0>)
   402b2:	4915      	ldr	r1, [pc, #84]	; (40308 <pend+0xb0>)
   402b4:	4812      	ldr	r0, [pc, #72]	; (40300 <pend+0xa8>)
   402b6:	f004 f80b 	bl	442d0 <printk>
   402ba:	490e      	ldr	r1, [pc, #56]	; (402f4 <pend+0x9c>)
   402bc:	4813      	ldr	r0, [pc, #76]	; (4030c <pend+0xb4>)
   402be:	f004 f807 	bl	442d0 <printk>
   402c2:	2184      	movs	r1, #132	; 0x84
   402c4:	480c      	ldr	r0, [pc, #48]	; (402f8 <pend+0xa0>)
   402c6:	f004 fa1d 	bl	44704 <assert_post_action>
	__asm__ volatile(
   402ca:	f385 8811 	msr	BASEPRI, r5
   402ce:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   402d2:	1c7b      	adds	r3, r7, #1
   402d4:	bf08      	it	eq
   402d6:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   402da:	d008      	beq.n	402ee <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   402dc:	4632      	mov	r2, r6
   402de:	463b      	mov	r3, r7
   402e0:	f104 0018 	add.w	r0, r4, #24
   402e4:	490a      	ldr	r1, [pc, #40]	; (40310 <pend+0xb8>)
}
   402e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   402ea:	f000 be9f 	b.w	4102c <z_add_timeout>
   402ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   402f2:	bf00      	nop
   402f4:	20026154 	.word	0x20026154
   402f8:	0004be5f 	.word	0x0004be5f
   402fc:	0004be85 	.word	0x0004be85
   40300:	0004b33b 	.word	0x0004b33b
   40304:	0004be9a 	.word	0x0004be9a
   40308:	0004beb2 	.word	0x0004beb2
   4030c:	0004bec9 	.word	0x0004bec9
   40310:	0003fd31 	.word	0x0003fd31

00040314 <z_pend_curr>:
{
   40314:	b538      	push	{r3, r4, r5, lr}
   40316:	4604      	mov	r4, r0
	pending_current = _current;
   40318:	4b10      	ldr	r3, [pc, #64]	; (4035c <z_pend_curr+0x48>)
{
   4031a:	460d      	mov	r5, r1
	pending_current = _current;
   4031c:	6898      	ldr	r0, [r3, #8]
   4031e:	4b10      	ldr	r3, [pc, #64]	; (40360 <z_pend_curr+0x4c>)
{
   40320:	4611      	mov	r1, r2
	pending_current = _current;
   40322:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   40324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   40328:	f7ff ff96 	bl	40258 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   4032c:	4620      	mov	r0, r4
   4032e:	f000 fcf3 	bl	40d18 <z_spin_unlock_valid>
   40332:	b968      	cbnz	r0, 40350 <z_pend_curr+0x3c>
   40334:	239b      	movs	r3, #155	; 0x9b
   40336:	4a0b      	ldr	r2, [pc, #44]	; (40364 <z_pend_curr+0x50>)
   40338:	490b      	ldr	r1, [pc, #44]	; (40368 <z_pend_curr+0x54>)
   4033a:	480c      	ldr	r0, [pc, #48]	; (4036c <z_pend_curr+0x58>)
   4033c:	f003 ffc8 	bl	442d0 <printk>
   40340:	4621      	mov	r1, r4
   40342:	480b      	ldr	r0, [pc, #44]	; (40370 <z_pend_curr+0x5c>)
   40344:	f003 ffc4 	bl	442d0 <printk>
   40348:	219b      	movs	r1, #155	; 0x9b
   4034a:	4806      	ldr	r0, [pc, #24]	; (40364 <z_pend_curr+0x50>)
   4034c:	f004 f9da 	bl	44704 <assert_post_action>
   40350:	4628      	mov	r0, r5
}
   40352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   40356:	f7e7 b93f 	b.w	275d8 <arch_swap>
   4035a:	bf00      	nop
   4035c:	2002611c 	.word	0x2002611c
   40360:	20026150 	.word	0x20026150
   40364:	0004be5f 	.word	0x0004be5f
   40368:	0004beb2 	.word	0x0004beb2
   4036c:	0004b33b 	.word	0x0004b33b
   40370:	0004bec9 	.word	0x0004bec9

00040374 <z_set_prio>:
{
   40374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   40376:	4604      	mov	r4, r0
   40378:	460d      	mov	r5, r1
	__asm__ volatile(
   4037a:	f04f 0320 	mov.w	r3, #32
   4037e:	f3ef 8611 	mrs	r6, BASEPRI
   40382:	f383 8811 	msr	BASEPRI, r3
   40386:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   4038a:	4836      	ldr	r0, [pc, #216]	; (40464 <z_set_prio+0xf0>)
   4038c:	f000 fcb6 	bl	40cfc <z_spin_lock_valid>
   40390:	b968      	cbnz	r0, 403ae <z_set_prio+0x3a>
   40392:	235c      	movs	r3, #92	; 0x5c
   40394:	4a34      	ldr	r2, [pc, #208]	; (40468 <z_set_prio+0xf4>)
   40396:	4935      	ldr	r1, [pc, #212]	; (4046c <z_set_prio+0xf8>)
   40398:	4835      	ldr	r0, [pc, #212]	; (40470 <z_set_prio+0xfc>)
   4039a:	f003 ff99 	bl	442d0 <printk>
   4039e:	4931      	ldr	r1, [pc, #196]	; (40464 <z_set_prio+0xf0>)
   403a0:	4834      	ldr	r0, [pc, #208]	; (40474 <z_set_prio+0x100>)
   403a2:	f003 ff95 	bl	442d0 <printk>
   403a6:	215c      	movs	r1, #92	; 0x5c
   403a8:	482f      	ldr	r0, [pc, #188]	; (40468 <z_set_prio+0xf4>)
   403aa:	f004 f9ab 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   403ae:	482d      	ldr	r0, [pc, #180]	; (40464 <z_set_prio+0xf0>)
   403b0:	f000 fcc2 	bl	40d38 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   403b4:	7b63      	ldrb	r3, [r4, #13]
   403b6:	b26d      	sxtb	r5, r5
   403b8:	06db      	lsls	r3, r3, #27
   403ba:	d150      	bne.n	4045e <z_set_prio+0xea>
		if (need_sched) {
   403bc:	69a3      	ldr	r3, [r4, #24]
   403be:	2b00      	cmp	r3, #0
   403c0:	d14d      	bne.n	4045e <z_set_prio+0xea>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   403c2:	4621      	mov	r1, r4
   403c4:	482c      	ldr	r0, [pc, #176]	; (40478 <z_set_prio+0x104>)
   403c6:	f7ff fa7d 	bl	3f8c4 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   403ca:	4b2c      	ldr	r3, [pc, #176]	; (4047c <z_set_prio+0x108>)
				thread->base.prio = prio;
   403cc:	73a5      	strb	r5, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   403ce:	429c      	cmp	r4, r3
   403d0:	d10b      	bne.n	403ea <z_set_prio+0x76>
   403d2:	492b      	ldr	r1, [pc, #172]	; (40480 <z_set_prio+0x10c>)
   403d4:	4826      	ldr	r0, [pc, #152]	; (40470 <z_set_prio+0xfc>)
   403d6:	f240 3389 	movw	r3, #905	; 0x389
   403da:	4a2a      	ldr	r2, [pc, #168]	; (40484 <z_set_prio+0x110>)
   403dc:	f003 ff78 	bl	442d0 <printk>
   403e0:	f240 3189 	movw	r1, #905	; 0x389
   403e4:	4827      	ldr	r0, [pc, #156]	; (40484 <z_set_prio+0x110>)
   403e6:	f004 f98d 	bl	44704 <assert_post_action>
	return list->head == list;
   403ea:	4a27      	ldr	r2, [pc, #156]	; (40488 <z_set_prio+0x114>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
   403ec:	f102 0128 	add.w	r1, r2, #40	; 0x28
   403f0:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
   403f4:	428b      	cmp	r3, r1
   403f6:	d02c      	beq.n	40452 <z_set_prio+0xde>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   403f8:	b35b      	cbz	r3, 40452 <z_set_prio+0xde>
	if (thread_1->base.prio < thread_2->base.prio) {
   403fa:	f994 500e 	ldrsb.w	r5, [r4, #14]
   403fe:	f993 700e 	ldrsb.w	r7, [r3, #14]
   40402:	42af      	cmp	r7, r5
   40404:	dd20      	ble.n	40448 <z_set_prio+0xd4>
	node->prev = successor->prev;
   40406:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   40408:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   4040c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   4040e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   40410:	2001      	movs	r0, #1
   40412:	f7ff fad1 	bl	3f9b8 <update_cache>
   40416:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   40418:	4812      	ldr	r0, [pc, #72]	; (40464 <z_set_prio+0xf0>)
   4041a:	f000 fc7d 	bl	40d18 <z_spin_unlock_valid>
   4041e:	b968      	cbnz	r0, 4043c <z_set_prio+0xc8>
   40420:	2384      	movs	r3, #132	; 0x84
   40422:	4a11      	ldr	r2, [pc, #68]	; (40468 <z_set_prio+0xf4>)
   40424:	4919      	ldr	r1, [pc, #100]	; (4048c <z_set_prio+0x118>)
   40426:	4812      	ldr	r0, [pc, #72]	; (40470 <z_set_prio+0xfc>)
   40428:	f003 ff52 	bl	442d0 <printk>
   4042c:	490d      	ldr	r1, [pc, #52]	; (40464 <z_set_prio+0xf0>)
   4042e:	4818      	ldr	r0, [pc, #96]	; (40490 <z_set_prio+0x11c>)
   40430:	f003 ff4e 	bl	442d0 <printk>
   40434:	2184      	movs	r1, #132	; 0x84
   40436:	480c      	ldr	r0, [pc, #48]	; (40468 <z_set_prio+0xf4>)
   40438:	f004 f964 	bl	44704 <assert_post_action>
	__asm__ volatile(
   4043c:	f386 8811 	msr	BASEPRI, r6
   40440:	f3bf 8f6f 	isb	sy
}
   40444:	4620      	mov	r0, r4
   40446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   40448:	4298      	cmp	r0, r3
   4044a:	d002      	beq.n	40452 <z_set_prio+0xde>
   4044c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   4044e:	2b00      	cmp	r3, #0
   40450:	d1d5      	bne.n	403fe <z_set_prio+0x8a>
	node->prev = list->tail;
   40452:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   40456:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   40458:	601c      	str	r4, [r3, #0]
	list->tail = node;
   4045a:	62d4      	str	r4, [r2, #44]	; 0x2c
   4045c:	e7d8      	b.n	40410 <z_set_prio+0x9c>
			thread->base.prio = prio;
   4045e:	73a5      	strb	r5, [r4, #14]
   40460:	2400      	movs	r4, #0
   40462:	e7d9      	b.n	40418 <z_set_prio+0xa4>
   40464:	20026154 	.word	0x20026154
   40468:	0004be5f 	.word	0x0004be5f
   4046c:	0004be85 	.word	0x0004be85
   40470:	0004b33b 	.word	0x0004b33b
   40474:	0004be9a 	.word	0x0004be9a
   40478:	20026144 	.word	0x20026144
   4047c:	200246f8 	.word	0x200246f8
   40480:	000526ad 	.word	0x000526ad
   40484:	00052674 	.word	0x00052674
   40488:	2002611c 	.word	0x2002611c
   4048c:	0004beb2 	.word	0x0004beb2
   40490:	0004bec9 	.word	0x0004bec9

00040494 <z_unpend_first_thread>:
{
   40494:	b538      	push	{r3, r4, r5, lr}
   40496:	4604      	mov	r4, r0
	__asm__ volatile(
   40498:	f04f 0320 	mov.w	r3, #32
   4049c:	f3ef 8511 	mrs	r5, BASEPRI
   404a0:	f383 8811 	msr	BASEPRI, r3
   404a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   404a8:	4836      	ldr	r0, [pc, #216]	; (40584 <z_unpend_first_thread+0xf0>)
   404aa:	f000 fc27 	bl	40cfc <z_spin_lock_valid>
   404ae:	b968      	cbnz	r0, 404cc <z_unpend_first_thread+0x38>
   404b0:	235c      	movs	r3, #92	; 0x5c
   404b2:	4a35      	ldr	r2, [pc, #212]	; (40588 <z_unpend_first_thread+0xf4>)
   404b4:	4935      	ldr	r1, [pc, #212]	; (4058c <z_unpend_first_thread+0xf8>)
   404b6:	4836      	ldr	r0, [pc, #216]	; (40590 <z_unpend_first_thread+0xfc>)
   404b8:	f003 ff0a 	bl	442d0 <printk>
   404bc:	4931      	ldr	r1, [pc, #196]	; (40584 <z_unpend_first_thread+0xf0>)
   404be:	4835      	ldr	r0, [pc, #212]	; (40594 <z_unpend_first_thread+0x100>)
   404c0:	f003 ff06 	bl	442d0 <printk>
   404c4:	215c      	movs	r1, #92	; 0x5c
   404c6:	4830      	ldr	r0, [pc, #192]	; (40588 <z_unpend_first_thread+0xf4>)
   404c8:	f004 f91c 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   404cc:	482d      	ldr	r0, [pc, #180]	; (40584 <z_unpend_first_thread+0xf0>)
   404ce:	f000 fc33 	bl	40d38 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   404d2:	4620      	mov	r0, r4
   404d4:	f007 fce8 	bl	47ea8 <z_priq_dumb_best>
   404d8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   404da:	482a      	ldr	r0, [pc, #168]	; (40584 <z_unpend_first_thread+0xf0>)
   404dc:	f000 fc1c 	bl	40d18 <z_spin_unlock_valid>
   404e0:	b968      	cbnz	r0, 404fe <z_unpend_first_thread+0x6a>
   404e2:	2384      	movs	r3, #132	; 0x84
   404e4:	4a28      	ldr	r2, [pc, #160]	; (40588 <z_unpend_first_thread+0xf4>)
   404e6:	492c      	ldr	r1, [pc, #176]	; (40598 <z_unpend_first_thread+0x104>)
   404e8:	4829      	ldr	r0, [pc, #164]	; (40590 <z_unpend_first_thread+0xfc>)
   404ea:	f003 fef1 	bl	442d0 <printk>
   404ee:	4925      	ldr	r1, [pc, #148]	; (40584 <z_unpend_first_thread+0xf0>)
   404f0:	482a      	ldr	r0, [pc, #168]	; (4059c <z_unpend_first_thread+0x108>)
   404f2:	f003 feed 	bl	442d0 <printk>
   404f6:	2184      	movs	r1, #132	; 0x84
   404f8:	4823      	ldr	r0, [pc, #140]	; (40588 <z_unpend_first_thread+0xf4>)
   404fa:	f004 f903 	bl	44704 <assert_post_action>
	__asm__ volatile(
   404fe:	f385 8811 	msr	BASEPRI, r5
   40502:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   40506:	2c00      	cmp	r4, #0
   40508:	d039      	beq.n	4057e <z_unpend_first_thread+0xea>
	__asm__ volatile(
   4050a:	f04f 0320 	mov.w	r3, #32
   4050e:	f3ef 8511 	mrs	r5, BASEPRI
   40512:	f383 8811 	msr	BASEPRI, r3
   40516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   4051a:	481a      	ldr	r0, [pc, #104]	; (40584 <z_unpend_first_thread+0xf0>)
   4051c:	f000 fbee 	bl	40cfc <z_spin_lock_valid>
   40520:	b968      	cbnz	r0, 4053e <z_unpend_first_thread+0xaa>
   40522:	235c      	movs	r3, #92	; 0x5c
   40524:	4a18      	ldr	r2, [pc, #96]	; (40588 <z_unpend_first_thread+0xf4>)
   40526:	4919      	ldr	r1, [pc, #100]	; (4058c <z_unpend_first_thread+0xf8>)
   40528:	4819      	ldr	r0, [pc, #100]	; (40590 <z_unpend_first_thread+0xfc>)
   4052a:	f003 fed1 	bl	442d0 <printk>
   4052e:	4915      	ldr	r1, [pc, #84]	; (40584 <z_unpend_first_thread+0xf0>)
   40530:	4818      	ldr	r0, [pc, #96]	; (40594 <z_unpend_first_thread+0x100>)
   40532:	f003 fecd 	bl	442d0 <printk>
   40536:	215c      	movs	r1, #92	; 0x5c
   40538:	4813      	ldr	r0, [pc, #76]	; (40588 <z_unpend_first_thread+0xf4>)
   4053a:	f004 f8e3 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   4053e:	4811      	ldr	r0, [pc, #68]	; (40584 <z_unpend_first_thread+0xf0>)
   40540:	f000 fbfa 	bl	40d38 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   40544:	4620      	mov	r0, r4
   40546:	f007 fca0 	bl	47e8a <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   4054a:	480e      	ldr	r0, [pc, #56]	; (40584 <z_unpend_first_thread+0xf0>)
   4054c:	f000 fbe4 	bl	40d18 <z_spin_unlock_valid>
   40550:	b968      	cbnz	r0, 4056e <z_unpend_first_thread+0xda>
   40552:	2384      	movs	r3, #132	; 0x84
   40554:	4a0c      	ldr	r2, [pc, #48]	; (40588 <z_unpend_first_thread+0xf4>)
   40556:	4910      	ldr	r1, [pc, #64]	; (40598 <z_unpend_first_thread+0x104>)
   40558:	480d      	ldr	r0, [pc, #52]	; (40590 <z_unpend_first_thread+0xfc>)
   4055a:	f003 feb9 	bl	442d0 <printk>
   4055e:	4909      	ldr	r1, [pc, #36]	; (40584 <z_unpend_first_thread+0xf0>)
   40560:	480e      	ldr	r0, [pc, #56]	; (4059c <z_unpend_first_thread+0x108>)
   40562:	f003 feb5 	bl	442d0 <printk>
   40566:	2184      	movs	r1, #132	; 0x84
   40568:	4807      	ldr	r0, [pc, #28]	; (40588 <z_unpend_first_thread+0xf4>)
   4056a:	f004 f8cb 	bl	44704 <assert_post_action>
	__asm__ volatile(
   4056e:	f385 8811 	msr	BASEPRI, r5
   40572:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   40576:	f104 0018 	add.w	r0, r4, #24
   4057a:	f000 fe2d 	bl	411d8 <z_abort_timeout>
}
   4057e:	4620      	mov	r0, r4
   40580:	bd38      	pop	{r3, r4, r5, pc}
   40582:	bf00      	nop
   40584:	20026154 	.word	0x20026154
   40588:	0004be5f 	.word	0x0004be5f
   4058c:	0004be85 	.word	0x0004be85
   40590:	0004b33b 	.word	0x0004b33b
   40594:	0004be9a 	.word	0x0004be9a
   40598:	0004beb2 	.word	0x0004beb2
   4059c:	0004bec9 	.word	0x0004bec9

000405a0 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   405a0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   405a2:	4b04      	ldr	r3, [pc, #16]	; (405b4 <z_sched_init+0x14>)
   405a4:	4608      	mov	r0, r1
   405a6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   405aa:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   405ae:	f7ff b86d 	b.w	3f68c <k_sched_time_slice_set>
   405b2:	bf00      	nop
   405b4:	2002611c 	.word	0x2002611c

000405b8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   405b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   405ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   405be:	b173      	cbz	r3, 405de <z_impl_k_yield+0x26>
   405c0:	4945      	ldr	r1, [pc, #276]	; (406d8 <z_impl_k_yield+0x120>)
   405c2:	f240 4394 	movw	r3, #1172	; 0x494
   405c6:	4a45      	ldr	r2, [pc, #276]	; (406dc <z_impl_k_yield+0x124>)
   405c8:	4845      	ldr	r0, [pc, #276]	; (406e0 <z_impl_k_yield+0x128>)
   405ca:	f003 fe81 	bl	442d0 <printk>
   405ce:	4845      	ldr	r0, [pc, #276]	; (406e4 <z_impl_k_yield+0x12c>)
   405d0:	f003 fe7e 	bl	442d0 <printk>
   405d4:	f240 4194 	movw	r1, #1172	; 0x494
   405d8:	4840      	ldr	r0, [pc, #256]	; (406dc <z_impl_k_yield+0x124>)
   405da:	f004 f893 	bl	44704 <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   405de:	4c42      	ldr	r4, [pc, #264]	; (406e8 <z_impl_k_yield+0x130>)
   405e0:	4e42      	ldr	r6, [pc, #264]	; (406ec <z_impl_k_yield+0x134>)
   405e2:	68a2      	ldr	r2, [r4, #8]
   405e4:	42b2      	cmp	r2, r6
   405e6:	d05f      	beq.n	406a8 <z_impl_k_yield+0xf0>
	__asm__ volatile(
   405e8:	f04f 0320 	mov.w	r3, #32
   405ec:	f3ef 8711 	mrs	r7, BASEPRI
   405f0:	f383 8811 	msr	BASEPRI, r3
   405f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   405f8:	483d      	ldr	r0, [pc, #244]	; (406f0 <z_impl_k_yield+0x138>)
   405fa:	f000 fb7f 	bl	40cfc <z_spin_lock_valid>
   405fe:	b968      	cbnz	r0, 4061c <z_impl_k_yield+0x64>
   40600:	235c      	movs	r3, #92	; 0x5c
   40602:	4a3c      	ldr	r2, [pc, #240]	; (406f4 <z_impl_k_yield+0x13c>)
   40604:	493c      	ldr	r1, [pc, #240]	; (406f8 <z_impl_k_yield+0x140>)
   40606:	4836      	ldr	r0, [pc, #216]	; (406e0 <z_impl_k_yield+0x128>)
   40608:	f003 fe62 	bl	442d0 <printk>
   4060c:	4938      	ldr	r1, [pc, #224]	; (406f0 <z_impl_k_yield+0x138>)
   4060e:	483b      	ldr	r0, [pc, #236]	; (406fc <z_impl_k_yield+0x144>)
   40610:	f003 fe5e 	bl	442d0 <printk>
   40614:	215c      	movs	r1, #92	; 0x5c
   40616:	4837      	ldr	r0, [pc, #220]	; (406f4 <z_impl_k_yield+0x13c>)
   40618:	f004 f874 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   4061c:	4834      	ldr	r0, [pc, #208]	; (406f0 <z_impl_k_yield+0x138>)
   4061e:	f000 fb8b 	bl	40d38 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   40622:	68a1      	ldr	r1, [r4, #8]
   40624:	4836      	ldr	r0, [pc, #216]	; (40700 <z_impl_k_yield+0x148>)
   40626:	f7ff f94d 	bl	3f8c4 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   4062a:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   4062c:	42b5      	cmp	r5, r6
   4062e:	d10b      	bne.n	40648 <z_impl_k_yield+0x90>
   40630:	4934      	ldr	r1, [pc, #208]	; (40704 <z_impl_k_yield+0x14c>)
   40632:	482b      	ldr	r0, [pc, #172]	; (406e0 <z_impl_k_yield+0x128>)
   40634:	f240 3389 	movw	r3, #905	; 0x389
   40638:	4a28      	ldr	r2, [pc, #160]	; (406dc <z_impl_k_yield+0x124>)
   4063a:	f003 fe49 	bl	442d0 <printk>
   4063e:	f240 3189 	movw	r1, #905	; 0x389
   40642:	4826      	ldr	r0, [pc, #152]	; (406dc <z_impl_k_yield+0x124>)
   40644:	f004 f85e 	bl	44704 <assert_post_action>
	return list->head == list;
   40648:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4064c:	4a2c      	ldr	r2, [pc, #176]	; (40700 <z_impl_k_yield+0x148>)
   4064e:	4293      	cmp	r3, r2
   40650:	d03b      	beq.n	406ca <z_impl_k_yield+0x112>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   40652:	2b00      	cmp	r3, #0
   40654:	d039      	beq.n	406ca <z_impl_k_yield+0x112>
	if (thread_1->base.prio < thread_2->base.prio) {
   40656:	f995 000e 	ldrsb.w	r0, [r5, #14]
   4065a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   4065e:	4286      	cmp	r6, r0
   40660:	dd2e      	ble.n	406c0 <z_impl_k_yield+0x108>
	node->prev = successor->prev;
   40662:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   40664:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   40668:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   4066a:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   4066c:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   4066e:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   40670:	7b53      	ldrb	r3, [r2, #13]
   40672:	f063 037f 	orn	r3, r3, #127	; 0x7f
   40676:	7353      	strb	r3, [r2, #13]
   40678:	f7ff f99e 	bl	3f9b8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   4067c:	481c      	ldr	r0, [pc, #112]	; (406f0 <z_impl_k_yield+0x138>)
   4067e:	f000 fb4b 	bl	40d18 <z_spin_unlock_valid>
   40682:	b968      	cbnz	r0, 406a0 <z_impl_k_yield+0xe8>
   40684:	2384      	movs	r3, #132	; 0x84
   40686:	4a1b      	ldr	r2, [pc, #108]	; (406f4 <z_impl_k_yield+0x13c>)
   40688:	491f      	ldr	r1, [pc, #124]	; (40708 <z_impl_k_yield+0x150>)
   4068a:	4815      	ldr	r0, [pc, #84]	; (406e0 <z_impl_k_yield+0x128>)
   4068c:	f003 fe20 	bl	442d0 <printk>
   40690:	4917      	ldr	r1, [pc, #92]	; (406f0 <z_impl_k_yield+0x138>)
   40692:	481e      	ldr	r0, [pc, #120]	; (4070c <z_impl_k_yield+0x154>)
   40694:	f003 fe1c 	bl	442d0 <printk>
   40698:	2184      	movs	r1, #132	; 0x84
   4069a:	4816      	ldr	r0, [pc, #88]	; (406f4 <z_impl_k_yield+0x13c>)
   4069c:	f004 f832 	bl	44704 <assert_post_action>
	__asm__ volatile(
   406a0:	f387 8811 	msr	BASEPRI, r7
   406a4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   406a8:	f04f 0320 	mov.w	r3, #32
   406ac:	f3ef 8011 	mrs	r0, BASEPRI
   406b0:	f383 8811 	msr	BASEPRI, r3
   406b4:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   406b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   406bc:	f7e6 bf8c 	b.w	275d8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   406c0:	4299      	cmp	r1, r3
   406c2:	d002      	beq.n	406ca <z_impl_k_yield+0x112>
   406c4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   406c6:	2b00      	cmp	r3, #0
   406c8:	d1c7      	bne.n	4065a <z_impl_k_yield+0xa2>
	node->prev = list->tail;
   406ca:	e9c5 2100 	strd	r2, r1, [r5]
	list->tail->next = node;
   406ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   406d0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   406d2:	62e5      	str	r5, [r4, #44]	; 0x2c
   406d4:	e7ca      	b.n	4066c <z_impl_k_yield+0xb4>
   406d6:	bf00      	nop
   406d8:	0005259b 	.word	0x0005259b
   406dc:	00052674 	.word	0x00052674
   406e0:	0004b33b 	.word	0x0004b33b
   406e4:	0004c55b 	.word	0x0004c55b
   406e8:	2002611c 	.word	0x2002611c
   406ec:	200246f8 	.word	0x200246f8
   406f0:	20026154 	.word	0x20026154
   406f4:	0004be5f 	.word	0x0004be5f
   406f8:	0004be85 	.word	0x0004be85
   406fc:	0004be9a 	.word	0x0004be9a
   40700:	20026144 	.word	0x20026144
   40704:	000526ad 	.word	0x000526ad
   40708:	0004beb2 	.word	0x0004beb2
   4070c:	0004bec9 	.word	0x0004bec9

00040710 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
{
   40710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40714:	4604      	mov	r4, r0
   40716:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_time;

	__ASSERT(!arch_is_in_isr(), "");
   4071a:	b173      	cbz	r3, 4073a <z_tick_sleep+0x2a>
   4071c:	493b      	ldr	r1, [pc, #236]	; (4080c <z_tick_sleep+0xfc>)
   4071e:	f240 43b2 	movw	r3, #1202	; 0x4b2
   40722:	4a3b      	ldr	r2, [pc, #236]	; (40810 <z_tick_sleep+0x100>)
   40724:	483b      	ldr	r0, [pc, #236]	; (40814 <z_tick_sleep+0x104>)
   40726:	f003 fdd3 	bl	442d0 <printk>
   4072a:	483b      	ldr	r0, [pc, #236]	; (40818 <z_tick_sleep+0x108>)
   4072c:	f003 fdd0 	bl	442d0 <printk>
   40730:	f240 41b2 	movw	r1, #1202	; 0x4b2
   40734:	4836      	ldr	r0, [pc, #216]	; (40810 <z_tick_sleep+0x100>)
   40736:	f003 ffe5 	bl	44704 <assert_post_action>

	LOG_DBG("thread %p for %d ticks", _current, ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   4073a:	b924      	cbnz	r4, 40746 <z_tick_sleep+0x36>
	z_impl_k_yield();
   4073c:	f7ff ff3c 	bl	405b8 <z_impl_k_yield>
		return ticks;
	}
#endif

	return 0;
}
   40740:	4620      	mov	r0, r4
   40742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_time = ticks + z_tick_get_32();
   40746:	f007 fc46 	bl	47fd6 <z_tick_get_32>
	timeout = Z_TIMEOUT_TICKS(ticks);
   4074a:	4626      	mov	r6, r4
   4074c:	17e7      	asrs	r7, r4, #31
	expected_wakeup_time = ticks + z_tick_get_32();
   4074e:	4404      	add	r4, r0
   40750:	f04f 0320 	mov.w	r3, #32
   40754:	f3ef 8811 	mrs	r8, BASEPRI
   40758:	f383 8811 	msr	BASEPRI, r3
   4075c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40760:	482e      	ldr	r0, [pc, #184]	; (4081c <z_tick_sleep+0x10c>)
   40762:	f000 facb 	bl	40cfc <z_spin_lock_valid>
   40766:	b968      	cbnz	r0, 40784 <z_tick_sleep+0x74>
   40768:	235c      	movs	r3, #92	; 0x5c
   4076a:	4a2d      	ldr	r2, [pc, #180]	; (40820 <z_tick_sleep+0x110>)
   4076c:	492d      	ldr	r1, [pc, #180]	; (40824 <z_tick_sleep+0x114>)
   4076e:	4829      	ldr	r0, [pc, #164]	; (40814 <z_tick_sleep+0x104>)
   40770:	f003 fdae 	bl	442d0 <printk>
   40774:	4929      	ldr	r1, [pc, #164]	; (4081c <z_tick_sleep+0x10c>)
   40776:	482c      	ldr	r0, [pc, #176]	; (40828 <z_tick_sleep+0x118>)
   40778:	f003 fdaa 	bl	442d0 <printk>
   4077c:	215c      	movs	r1, #92	; 0x5c
   4077e:	4828      	ldr	r0, [pc, #160]	; (40820 <z_tick_sleep+0x110>)
   40780:	f003 ffc0 	bl	44704 <assert_post_action>
	pending_current = _current;
   40784:	4d29      	ldr	r5, [pc, #164]	; (4082c <z_tick_sleep+0x11c>)
	z_spin_lock_set_owner(l);
   40786:	4825      	ldr	r0, [pc, #148]	; (4081c <z_tick_sleep+0x10c>)
   40788:	f000 fad6 	bl	40d38 <z_spin_lock_set_owner>
   4078c:	68a8      	ldr	r0, [r5, #8]
   4078e:	4b28      	ldr	r3, [pc, #160]	; (40830 <z_tick_sleep+0x120>)
   40790:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   40792:	f7ff fd05 	bl	401a0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   40796:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   40798:	4632      	mov	r2, r6
   4079a:	463b      	mov	r3, r7
   4079c:	3018      	adds	r0, #24
   4079e:	4925      	ldr	r1, [pc, #148]	; (40834 <z_tick_sleep+0x124>)
   407a0:	f000 fc44 	bl	4102c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   407a4:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   407a6:	481d      	ldr	r0, [pc, #116]	; (4081c <z_tick_sleep+0x10c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   407a8:	7b53      	ldrb	r3, [r2, #13]
   407aa:	f043 0310 	orr.w	r3, r3, #16
   407ae:	7353      	strb	r3, [r2, #13]
   407b0:	f000 fab2 	bl	40d18 <z_spin_unlock_valid>
   407b4:	b968      	cbnz	r0, 407d2 <z_tick_sleep+0xc2>
   407b6:	239b      	movs	r3, #155	; 0x9b
   407b8:	4a19      	ldr	r2, [pc, #100]	; (40820 <z_tick_sleep+0x110>)
   407ba:	491f      	ldr	r1, [pc, #124]	; (40838 <z_tick_sleep+0x128>)
   407bc:	4815      	ldr	r0, [pc, #84]	; (40814 <z_tick_sleep+0x104>)
   407be:	f003 fd87 	bl	442d0 <printk>
   407c2:	4916      	ldr	r1, [pc, #88]	; (4081c <z_tick_sleep+0x10c>)
   407c4:	481d      	ldr	r0, [pc, #116]	; (4083c <z_tick_sleep+0x12c>)
   407c6:	f003 fd83 	bl	442d0 <printk>
   407ca:	219b      	movs	r1, #155	; 0x9b
   407cc:	4814      	ldr	r0, [pc, #80]	; (40820 <z_tick_sleep+0x110>)
   407ce:	f003 ff99 	bl	44704 <assert_post_action>
   407d2:	4640      	mov	r0, r8
   407d4:	f7e6 ff00 	bl	275d8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   407d8:	68ab      	ldr	r3, [r5, #8]
   407da:	7b5b      	ldrb	r3, [r3, #13]
   407dc:	06db      	lsls	r3, r3, #27
   407de:	d50e      	bpl.n	407fe <z_tick_sleep+0xee>
   407e0:	4917      	ldr	r1, [pc, #92]	; (40840 <z_tick_sleep+0x130>)
   407e2:	f240 43d2 	movw	r3, #1234	; 0x4d2
   407e6:	4a0a      	ldr	r2, [pc, #40]	; (40810 <z_tick_sleep+0x100>)
   407e8:	480a      	ldr	r0, [pc, #40]	; (40814 <z_tick_sleep+0x104>)
   407ea:	f003 fd71 	bl	442d0 <printk>
   407ee:	480a      	ldr	r0, [pc, #40]	; (40818 <z_tick_sleep+0x108>)
   407f0:	f003 fd6e 	bl	442d0 <printk>
   407f4:	f240 41d2 	movw	r1, #1234	; 0x4d2
   407f8:	4805      	ldr	r0, [pc, #20]	; (40810 <z_tick_sleep+0x100>)
   407fa:	f003 ff83 	bl	44704 <assert_post_action>
	ticks = expected_wakeup_time - z_tick_get_32();
   407fe:	f007 fbea 	bl	47fd6 <z_tick_get_32>
   40802:	1a24      	subs	r4, r4, r0
   40804:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   40808:	e79a      	b.n	40740 <z_tick_sleep+0x30>
   4080a:	bf00      	nop
   4080c:	0005259b 	.word	0x0005259b
   40810:	00052674 	.word	0x00052674
   40814:	0004b33b 	.word	0x0004b33b
   40818:	0004c55b 	.word	0x0004c55b
   4081c:	20026154 	.word	0x20026154
   40820:	0004be5f 	.word	0x0004be5f
   40824:	0004be85 	.word	0x0004be85
   40828:	0004be9a 	.word	0x0004be9a
   4082c:	2002611c 	.word	0x2002611c
   40830:	20026150 	.word	0x20026150
   40834:	0003fd31 	.word	0x0003fd31
   40838:	0004beb2 	.word	0x0004beb2
   4083c:	0004bec9 	.word	0x0004bec9
   40840:	00052717 	.word	0x00052717

00040844 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   40844:	b538      	push	{r3, r4, r5, lr}
   40846:	4604      	mov	r4, r0
   40848:	460d      	mov	r5, r1
   4084a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   4084e:	b173      	cbz	r3, 4086e <z_impl_k_sleep+0x2a>
   40850:	4912      	ldr	r1, [pc, #72]	; (4089c <z_impl_k_sleep+0x58>)
   40852:	f240 43e1 	movw	r3, #1249	; 0x4e1
   40856:	4a12      	ldr	r2, [pc, #72]	; (408a0 <z_impl_k_sleep+0x5c>)
   40858:	4812      	ldr	r0, [pc, #72]	; (408a4 <z_impl_k_sleep+0x60>)
   4085a:	f003 fd39 	bl	442d0 <printk>
   4085e:	4812      	ldr	r0, [pc, #72]	; (408a8 <z_impl_k_sleep+0x64>)
   40860:	f003 fd36 	bl	442d0 <printk>
   40864:	f240 41e1 	movw	r1, #1249	; 0x4e1
   40868:	480d      	ldr	r0, [pc, #52]	; (408a0 <z_impl_k_sleep+0x5c>)
   4086a:	f003 ff4b 	bl	44704 <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4086e:	3501      	adds	r5, #1
   40870:	bf08      	it	eq
   40872:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   40876:	d106      	bne.n	40886 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   40878:	4b0c      	ldr	r3, [pc, #48]	; (408ac <z_impl_k_sleep+0x68>)
   4087a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   4087c:	f7ff fb76 	bl	3ff6c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   40880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   40884:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   40886:	4620      	mov	r0, r4
   40888:	f7ff ff42 	bl	40710 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   4088c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   40890:	fb80 3403 	smull	r3, r4, r0, r3
   40894:	0bd8      	lsrs	r0, r3, #15
   40896:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   4089a:	e7f3      	b.n	40884 <z_impl_k_sleep+0x40>
   4089c:	0005259b 	.word	0x0005259b
   408a0:	00052674 	.word	0x00052674
   408a4:	0004b33b 	.word	0x0004b33b
   408a8:	0004c55b 	.word	0x0004c55b
   408ac:	2002611c 	.word	0x2002611c

000408b0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   408b0:	4b01      	ldr	r3, [pc, #4]	; (408b8 <z_impl_k_current_get+0x8>)
   408b2:	6898      	ldr	r0, [r3, #8]
   408b4:	4770      	bx	lr
   408b6:	bf00      	nop
   408b8:	2002611c 	.word	0x2002611c

000408bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   408bc:	b538      	push	{r3, r4, r5, lr}
   408be:	4604      	mov	r4, r0
   408c0:	f04f 0320 	mov.w	r3, #32
   408c4:	f3ef 8511 	mrs	r5, BASEPRI
   408c8:	f383 8811 	msr	BASEPRI, r3
   408cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   408d0:	4817      	ldr	r0, [pc, #92]	; (40930 <z_impl_k_sem_give+0x74>)
   408d2:	f000 fa13 	bl	40cfc <z_spin_lock_valid>
   408d6:	b968      	cbnz	r0, 408f4 <z_impl_k_sem_give+0x38>
   408d8:	235c      	movs	r3, #92	; 0x5c
   408da:	4a16      	ldr	r2, [pc, #88]	; (40934 <z_impl_k_sem_give+0x78>)
   408dc:	4916      	ldr	r1, [pc, #88]	; (40938 <z_impl_k_sem_give+0x7c>)
   408de:	4817      	ldr	r0, [pc, #92]	; (4093c <z_impl_k_sem_give+0x80>)
   408e0:	f003 fcf6 	bl	442d0 <printk>
   408e4:	4912      	ldr	r1, [pc, #72]	; (40930 <z_impl_k_sem_give+0x74>)
   408e6:	4816      	ldr	r0, [pc, #88]	; (40940 <z_impl_k_sem_give+0x84>)
   408e8:	f003 fcf2 	bl	442d0 <printk>
   408ec:	215c      	movs	r1, #92	; 0x5c
   408ee:	4811      	ldr	r0, [pc, #68]	; (40934 <z_impl_k_sem_give+0x78>)
   408f0:	f003 ff08 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   408f4:	480e      	ldr	r0, [pc, #56]	; (40930 <z_impl_k_sem_give+0x74>)
   408f6:	f000 fa1f 	bl	40d38 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   408fa:	4620      	mov	r0, r4
   408fc:	f7ff fdca 	bl	40494 <z_unpend_first_thread>

	if (thread != NULL) {
   40900:	b148      	cbz	r0, 40916 <z_impl_k_sem_give+0x5a>
   40902:	2200      	movs	r2, #0
   40904:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   40906:	f7ff f941 	bl	3fb8c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   4090a:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   4090c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   40910:	4807      	ldr	r0, [pc, #28]	; (40930 <z_impl_k_sem_give+0x74>)
   40912:	f7fe bf1b 	b.w	3f74c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   40916:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   4091a:	429a      	cmp	r2, r3
   4091c:	bf18      	it	ne
   4091e:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   40920:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   40922:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   40924:	f104 0010 	add.w	r0, r4, #16
   40928:	f007 fbcd 	bl	480c6 <z_handle_obj_poll_events>
   4092c:	e7ed      	b.n	4090a <z_impl_k_sem_give+0x4e>
   4092e:	bf00      	nop
   40930:	20026160 	.word	0x20026160
   40934:	0004be5f 	.word	0x0004be5f
   40938:	0004be85 	.word	0x0004be85
   4093c:	0004b33b 	.word	0x0004b33b
   40940:	0004be9a 	.word	0x0004be9a

00040944 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   40944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40946:	4605      	mov	r5, r0
   40948:	4616      	mov	r6, r2
   4094a:	461f      	mov	r7, r3
   4094c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   40950:	b17b      	cbz	r3, 40972 <z_impl_k_sem_take+0x2e>
   40952:	ea56 0307 	orrs.w	r3, r6, r7
   40956:	d00c      	beq.n	40972 <z_impl_k_sem_take+0x2e>
   40958:	4935      	ldr	r1, [pc, #212]	; (40a30 <z_impl_k_sem_take+0xec>)
   4095a:	238d      	movs	r3, #141	; 0x8d
   4095c:	4a35      	ldr	r2, [pc, #212]	; (40a34 <z_impl_k_sem_take+0xf0>)
   4095e:	4836      	ldr	r0, [pc, #216]	; (40a38 <z_impl_k_sem_take+0xf4>)
   40960:	f003 fcb6 	bl	442d0 <printk>
   40964:	4835      	ldr	r0, [pc, #212]	; (40a3c <z_impl_k_sem_take+0xf8>)
   40966:	f003 fcb3 	bl	442d0 <printk>
   4096a:	218d      	movs	r1, #141	; 0x8d
   4096c:	4831      	ldr	r0, [pc, #196]	; (40a34 <z_impl_k_sem_take+0xf0>)
   4096e:	f003 fec9 	bl	44704 <assert_post_action>
   40972:	f04f 0320 	mov.w	r3, #32
   40976:	f3ef 8411 	mrs	r4, BASEPRI
   4097a:	f383 8811 	msr	BASEPRI, r3
   4097e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40982:	482f      	ldr	r0, [pc, #188]	; (40a40 <z_impl_k_sem_take+0xfc>)
   40984:	f000 f9ba 	bl	40cfc <z_spin_lock_valid>
   40988:	b968      	cbnz	r0, 409a6 <z_impl_k_sem_take+0x62>
   4098a:	235c      	movs	r3, #92	; 0x5c
   4098c:	4a2d      	ldr	r2, [pc, #180]	; (40a44 <z_impl_k_sem_take+0x100>)
   4098e:	492e      	ldr	r1, [pc, #184]	; (40a48 <z_impl_k_sem_take+0x104>)
   40990:	4829      	ldr	r0, [pc, #164]	; (40a38 <z_impl_k_sem_take+0xf4>)
   40992:	f003 fc9d 	bl	442d0 <printk>
   40996:	492a      	ldr	r1, [pc, #168]	; (40a40 <z_impl_k_sem_take+0xfc>)
   40998:	482c      	ldr	r0, [pc, #176]	; (40a4c <z_impl_k_sem_take+0x108>)
   4099a:	f003 fc99 	bl	442d0 <printk>
   4099e:	215c      	movs	r1, #92	; 0x5c
   409a0:	4828      	ldr	r0, [pc, #160]	; (40a44 <z_impl_k_sem_take+0x100>)
   409a2:	f003 feaf 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   409a6:	4826      	ldr	r0, [pc, #152]	; (40a40 <z_impl_k_sem_take+0xfc>)
   409a8:	f000 f9c6 	bl	40d38 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   409ac:	68ab      	ldr	r3, [r5, #8]
   409ae:	b1d3      	cbz	r3, 409e6 <z_impl_k_sem_take+0xa2>
		sem->count--;
   409b0:	3b01      	subs	r3, #1
   409b2:	60ab      	str	r3, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   409b4:	4822      	ldr	r0, [pc, #136]	; (40a40 <z_impl_k_sem_take+0xfc>)
   409b6:	f000 f9af 	bl	40d18 <z_spin_unlock_valid>
   409ba:	b968      	cbnz	r0, 409d8 <z_impl_k_sem_take+0x94>
   409bc:	2384      	movs	r3, #132	; 0x84
   409be:	4a21      	ldr	r2, [pc, #132]	; (40a44 <z_impl_k_sem_take+0x100>)
   409c0:	4923      	ldr	r1, [pc, #140]	; (40a50 <z_impl_k_sem_take+0x10c>)
   409c2:	481d      	ldr	r0, [pc, #116]	; (40a38 <z_impl_k_sem_take+0xf4>)
   409c4:	f003 fc84 	bl	442d0 <printk>
   409c8:	491d      	ldr	r1, [pc, #116]	; (40a40 <z_impl_k_sem_take+0xfc>)
   409ca:	4822      	ldr	r0, [pc, #136]	; (40a54 <z_impl_k_sem_take+0x110>)
   409cc:	f003 fc80 	bl	442d0 <printk>
   409d0:	2184      	movs	r1, #132	; 0x84
   409d2:	481c      	ldr	r0, [pc, #112]	; (40a44 <z_impl_k_sem_take+0x100>)
   409d4:	f003 fe96 	bl	44704 <assert_post_action>
	__asm__ volatile(
   409d8:	f384 8811 	msr	BASEPRI, r4
   409dc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   409e0:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   409e2:	b003      	add	sp, #12
   409e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   409e6:	ea56 0307 	orrs.w	r3, r6, r7
   409ea:	d118      	bne.n	40a1e <z_impl_k_sem_take+0xda>
   409ec:	4814      	ldr	r0, [pc, #80]	; (40a40 <z_impl_k_sem_take+0xfc>)
   409ee:	f000 f993 	bl	40d18 <z_spin_unlock_valid>
   409f2:	b968      	cbnz	r0, 40a10 <z_impl_k_sem_take+0xcc>
   409f4:	2384      	movs	r3, #132	; 0x84
   409f6:	4a13      	ldr	r2, [pc, #76]	; (40a44 <z_impl_k_sem_take+0x100>)
   409f8:	4915      	ldr	r1, [pc, #84]	; (40a50 <z_impl_k_sem_take+0x10c>)
   409fa:	480f      	ldr	r0, [pc, #60]	; (40a38 <z_impl_k_sem_take+0xf4>)
   409fc:	f003 fc68 	bl	442d0 <printk>
   40a00:	490f      	ldr	r1, [pc, #60]	; (40a40 <z_impl_k_sem_take+0xfc>)
   40a02:	4814      	ldr	r0, [pc, #80]	; (40a54 <z_impl_k_sem_take+0x110>)
   40a04:	f003 fc64 	bl	442d0 <printk>
   40a08:	2184      	movs	r1, #132	; 0x84
   40a0a:	480e      	ldr	r0, [pc, #56]	; (40a44 <z_impl_k_sem_take+0x100>)
   40a0c:	f003 fe7a 	bl	44704 <assert_post_action>
   40a10:	f384 8811 	msr	BASEPRI, r4
   40a14:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   40a18:	f06f 000f 	mvn.w	r0, #15
		goto out;
   40a1c:	e7e1      	b.n	409e2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   40a1e:	e9cd 6700 	strd	r6, r7, [sp]
   40a22:	462a      	mov	r2, r5
   40a24:	4621      	mov	r1, r4
   40a26:	4806      	ldr	r0, [pc, #24]	; (40a40 <z_impl_k_sem_take+0xfc>)
   40a28:	f7ff fc74 	bl	40314 <z_pend_curr>
	return ret;
   40a2c:	e7d9      	b.n	409e2 <z_impl_k_sem_take+0x9e>
   40a2e:	bf00      	nop
   40a30:	00052777 	.word	0x00052777
   40a34:	00052757 	.word	0x00052757
   40a38:	0004b33b 	.word	0x0004b33b
   40a3c:	0004c55b 	.word	0x0004c55b
   40a40:	20026160 	.word	0x20026160
   40a44:	0004be5f 	.word	0x0004be5f
   40a48:	0004be85 	.word	0x0004be85
   40a4c:	0004be9a 	.word	0x0004be9a
   40a50:	0004beb2 	.word	0x0004beb2
   40a54:	0004bec9 	.word	0x0004bec9

00040a58 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   40a58:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   40a5a:	4c08      	ldr	r4, [pc, #32]	; (40a7c <k_sys_work_q_init+0x24>)
   40a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   40a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
   40a64:	4906      	ldr	r1, [pc, #24]	; (40a80 <k_sys_work_q_init+0x28>)
   40a66:	4620      	mov	r0, r4
   40a68:	f000 f96e 	bl	40d48 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   40a6c:	4905      	ldr	r1, [pc, #20]	; (40a84 <k_sys_work_q_init+0x2c>)
   40a6e:	f104 0020 	add.w	r0, r4, #32
   40a72:	f007 fa47 	bl	47f04 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   40a76:	2000      	movs	r0, #0
   40a78:	bd10      	pop	{r4, pc}
   40a7a:	bf00      	nop
   40a7c:	20024888 	.word	0x20024888
   40a80:	20032680 	.word	0x20032680
   40a84:	000527c4 	.word	0x000527c4

00040a88 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   40a88:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   40a8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   40a8e:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   40a90:	2d0f      	cmp	r5, #15
{
   40a92:	460f      	mov	r7, r1
   40a94:	4616      	mov	r6, r2
   40a96:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   40a98:	d12d      	bne.n	40af6 <z_setup_new_thread+0x6e>
   40a9a:	4b23      	ldr	r3, [pc, #140]	; (40b28 <z_setup_new_thread+0xa0>)
   40a9c:	4598      	cmp	r8, r3
   40a9e:	d12e      	bne.n	40afe <z_setup_new_thread+0x76>
	sys_dlist_init(&w->waitq);
   40aa0:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   40aa4:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   40aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   40aaa:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   40aac:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   40aae:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   40ab0:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   40ab2:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   40ab6:	1df2      	adds	r2, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40ab8:	9302      	str	r3, [sp, #8]
   40aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   40abc:	f022 0207 	bic.w	r2, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40ac0:	9301      	str	r3, [sp, #4]
   40ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   40ac4:	18be      	adds	r6, r7, r2
	new_thread->stack_info.size = stack_buf_size;
   40ac6:	e9c4 721a 	strd	r7, r2, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40aca:	9300      	str	r3, [sp, #0]
	thread_base->sched_locked = 0U;
   40acc:	73e5      	strb	r5, [r4, #15]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40ace:	4643      	mov	r3, r8
	node->prev = NULL;
   40ad0:	e9c4 5506 	strd	r5, r5, [r4, #24]
	new_thread->stack_info.delta = delta;
   40ad4:	6725      	str	r5, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   40ad6:	4632      	mov	r2, r6
   40ad8:	4639      	mov	r1, r7
   40ada:	4620      	mov	r0, r4
   40adc:	f7e6 fe5c 	bl	27798 <arch_new_thread>
	if (!_current) {
   40ae0:	4b12      	ldr	r3, [pc, #72]	; (40b2c <z_setup_new_thread+0xa4>)
	new_thread->fn_abort = NULL;
   40ae2:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   40ae6:	689b      	ldr	r3, [r3, #8]
   40ae8:	b103      	cbz	r3, 40aec <z_setup_new_thread+0x64>
	new_thread->resource_pool = _current->resource_pool;
   40aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   40aec:	4630      	mov	r0, r6
   40aee:	6763      	str	r3, [r4, #116]	; 0x74
   40af0:	b004      	add	sp, #16
   40af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   40af6:	f105 0310 	add.w	r3, r5, #16
   40afa:	2b1e      	cmp	r3, #30
   40afc:	d9d0      	bls.n	40aa0 <z_setup_new_thread+0x18>
   40afe:	f240 2313 	movw	r3, #531	; 0x213
   40b02:	4a0b      	ldr	r2, [pc, #44]	; (40b30 <z_setup_new_thread+0xa8>)
   40b04:	490b      	ldr	r1, [pc, #44]	; (40b34 <z_setup_new_thread+0xac>)
   40b06:	480c      	ldr	r0, [pc, #48]	; (40b38 <z_setup_new_thread+0xb0>)
   40b08:	f003 fbe2 	bl	442d0 <printk>
   40b0c:	4629      	mov	r1, r5
   40b0e:	f06f 030f 	mvn.w	r3, #15
   40b12:	220e      	movs	r2, #14
   40b14:	4809      	ldr	r0, [pc, #36]	; (40b3c <z_setup_new_thread+0xb4>)
   40b16:	f003 fbdb 	bl	442d0 <printk>
   40b1a:	f240 2113 	movw	r1, #531	; 0x213
   40b1e:	4804      	ldr	r0, [pc, #16]	; (40b30 <z_setup_new_thread+0xa8>)
   40b20:	f003 fdf0 	bl	44704 <assert_post_action>
   40b24:	e7bc      	b.n	40aa0 <z_setup_new_thread+0x18>
   40b26:	bf00      	nop
   40b28:	0003e8ad 	.word	0x0003e8ad
   40b2c:	2002611c 	.word	0x2002611c
   40b30:	0005281f 	.word	0x0005281f
   40b34:	00052842 	.word	0x00052842
   40b38:	0004b33b 	.word	0x0004b33b
   40b3c:	000528c2 	.word	0x000528c2

00040b40 <z_impl_k_thread_create>:
{
   40b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40b44:	b087      	sub	sp, #28
   40b46:	4604      	mov	r4, r0
   40b48:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   40b4c:	460d      	mov	r5, r1
   40b4e:	4690      	mov	r8, r2
   40b50:	4699      	mov	r9, r3
   40b52:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   40b56:	b173      	cbz	r3, 40b76 <z_impl_k_thread_create+0x36>
   40b58:	491b      	ldr	r1, [pc, #108]	; (40bc8 <z_impl_k_thread_create+0x88>)
   40b5a:	f240 2373 	movw	r3, #627	; 0x273
   40b5e:	4a1b      	ldr	r2, [pc, #108]	; (40bcc <z_impl_k_thread_create+0x8c>)
   40b60:	481b      	ldr	r0, [pc, #108]	; (40bd0 <z_impl_k_thread_create+0x90>)
   40b62:	f003 fbb5 	bl	442d0 <printk>
   40b66:	481b      	ldr	r0, [pc, #108]	; (40bd4 <z_impl_k_thread_create+0x94>)
   40b68:	f003 fbb2 	bl	442d0 <printk>
   40b6c:	f240 2173 	movw	r1, #627	; 0x273
   40b70:	4816      	ldr	r0, [pc, #88]	; (40bcc <z_impl_k_thread_create+0x8c>)
   40b72:	f003 fdc7 	bl	44704 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   40b76:	2300      	movs	r3, #0
   40b78:	9305      	str	r3, [sp, #20]
   40b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   40b7c:	4642      	mov	r2, r8
   40b7e:	9304      	str	r3, [sp, #16]
   40b80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   40b82:	4629      	mov	r1, r5
   40b84:	9303      	str	r3, [sp, #12]
   40b86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   40b88:	4620      	mov	r0, r4
   40b8a:	9302      	str	r3, [sp, #8]
   40b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   40b8e:	9301      	str	r3, [sp, #4]
   40b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   40b92:	9300      	str	r3, [sp, #0]
   40b94:	464b      	mov	r3, r9
   40b96:	f7ff ff77 	bl	40a88 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   40b9a:	1c7b      	adds	r3, r7, #1
   40b9c:	bf08      	it	eq
   40b9e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   40ba2:	d005      	beq.n	40bb0 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40ba4:	ea56 0307 	orrs.w	r3, r6, r7
   40ba8:	d106      	bne.n	40bb8 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   40baa:	4620      	mov	r0, r4
   40bac:	f7ff f836 	bl	3fc1c <z_sched_start>
}
   40bb0:	4620      	mov	r0, r4
   40bb2:	b007      	add	sp, #28
   40bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40bb8:	4632      	mov	r2, r6
   40bba:	463b      	mov	r3, r7
   40bbc:	4906      	ldr	r1, [pc, #24]	; (40bd8 <z_impl_k_thread_create+0x98>)
   40bbe:	f104 0018 	add.w	r0, r4, #24
   40bc2:	f000 fa33 	bl	4102c <z_add_timeout>
   40bc6:	e7f3      	b.n	40bb0 <z_impl_k_thread_create+0x70>
   40bc8:	0005259b 	.word	0x0005259b
   40bcc:	0005281f 	.word	0x0005281f
   40bd0:	0004b33b 	.word	0x0004b33b
   40bd4:	000527cd 	.word	0x000527cd
   40bd8:	0003fd31 	.word	0x0003fd31

00040bdc <z_init_static_threads>:
{
   40bdc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   40be0:	4f3f      	ldr	r7, [pc, #252]	; (40ce0 <z_init_static_threads+0x104>)
   40be2:	4d40      	ldr	r5, [pc, #256]	; (40ce4 <z_init_static_threads+0x108>)
   40be4:	463e      	mov	r6, r7
   40be6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 40cf4 <z_init_static_threads+0x118>
{
   40bea:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   40bec:	42bd      	cmp	r5, r7
   40bee:	d90e      	bls.n	40c0e <z_init_static_threads+0x32>
   40bf0:	493d      	ldr	r1, [pc, #244]	; (40ce8 <z_init_static_threads+0x10c>)
   40bf2:	f240 23e1 	movw	r3, #737	; 0x2e1
   40bf6:	4642      	mov	r2, r8
   40bf8:	483c      	ldr	r0, [pc, #240]	; (40cec <z_init_static_threads+0x110>)
   40bfa:	f003 fb69 	bl	442d0 <printk>
   40bfe:	483c      	ldr	r0, [pc, #240]	; (40cf0 <z_init_static_threads+0x114>)
   40c00:	f003 fb66 	bl	442d0 <printk>
   40c04:	f240 21e1 	movw	r1, #737	; 0x2e1
   40c08:	4640      	mov	r0, r8
   40c0a:	f003 fd7b 	bl	44704 <assert_post_action>
   40c0e:	42b5      	cmp	r5, r6
   40c10:	f105 0430 	add.w	r4, r5, #48	; 0x30
   40c14:	d31f      	bcc.n	40c56 <z_init_static_threads+0x7a>
	k_sched_lock();
   40c16:	f7fe fddd 	bl	3f7d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   40c1a:	4c32      	ldr	r4, [pc, #200]	; (40ce4 <z_init_static_threads+0x108>)
   40c1c:	4d35      	ldr	r5, [pc, #212]	; (40cf4 <z_init_static_threads+0x118>)
   40c1e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 40ce8 <z_init_static_threads+0x10c>
   40c22:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 40cec <z_init_static_threads+0x110>
   40c26:	42b4      	cmp	r4, r6
   40c28:	d90e      	bls.n	40c48 <z_init_static_threads+0x6c>
   40c2a:	4641      	mov	r1, r8
   40c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
   40c30:	462a      	mov	r2, r5
   40c32:	4648      	mov	r0, r9
   40c34:	f003 fb4c 	bl	442d0 <printk>
   40c38:	482d      	ldr	r0, [pc, #180]	; (40cf0 <z_init_static_threads+0x114>)
   40c3a:	f003 fb49 	bl	442d0 <printk>
   40c3e:	f44f 7140 	mov.w	r1, #768	; 0x300
   40c42:	4628      	mov	r0, r5
   40c44:	f003 fd5e 	bl	44704 <assert_post_action>
   40c48:	42b4      	cmp	r4, r6
   40c4a:	d321      	bcc.n	40c90 <z_init_static_threads+0xb4>
}
   40c4c:	b006      	add	sp, #24
   40c4e:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   40c52:	f7fe bed5 	b.w	3fa00 <k_sched_unlock>
		z_setup_new_thread(
   40c56:	f854 3c04 	ldr.w	r3, [r4, #-4]
   40c5a:	9305      	str	r3, [sp, #20]
   40c5c:	f854 3c10 	ldr.w	r3, [r4, #-16]
   40c60:	9304      	str	r3, [sp, #16]
   40c62:	f854 3c14 	ldr.w	r3, [r4, #-20]
   40c66:	9303      	str	r3, [sp, #12]
   40c68:	f854 3c18 	ldr.w	r3, [r4, #-24]
   40c6c:	9302      	str	r3, [sp, #8]
   40c6e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   40c72:	9301      	str	r3, [sp, #4]
   40c74:	f854 3c20 	ldr.w	r3, [r4, #-32]
   40c78:	9300      	str	r3, [sp, #0]
   40c7a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   40c7e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   40c82:	f7ff ff01 	bl	40a88 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   40c86:	f854 3c30 	ldr.w	r3, [r4, #-48]
   40c8a:	65dd      	str	r5, [r3, #92]	; 0x5c
   40c8c:	4625      	mov	r5, r4
   40c8e:	e7ad      	b.n	40bec <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   40c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
   40c92:	1c4b      	adds	r3, r1, #1
   40c94:	d014      	beq.n	40cc0 <z_init_static_threads+0xe4>
   40c96:	f240 32e7 	movw	r2, #999	; 0x3e7
   40c9a:	2300      	movs	r3, #0
   40c9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   40ca0:	4693      	mov	fp, r2
   40ca2:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   40ca4:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   40ca8:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40cac:	459c      	cmp	ip, r3
   40cae:	bf08      	it	eq
   40cb0:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   40cb2:	6827      	ldr	r7, [r4, #0]
   40cb4:	4658      	mov	r0, fp
   40cb6:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40cb8:	d104      	bne.n	40cc4 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   40cba:	4638      	mov	r0, r7
   40cbc:	f7fe ffae 	bl	3fc1c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   40cc0:	3430      	adds	r4, #48	; 0x30
   40cc2:	e7b0      	b.n	40c26 <z_init_static_threads+0x4a>
   40cc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   40cc8:	2300      	movs	r3, #0
   40cca:	f7dc f8f7 	bl	1cebc <__aeabi_uldivmod>
   40cce:	4602      	mov	r2, r0
   40cd0:	460b      	mov	r3, r1
   40cd2:	f107 0018 	add.w	r0, r7, #24
   40cd6:	4908      	ldr	r1, [pc, #32]	; (40cf8 <z_init_static_threads+0x11c>)
   40cd8:	f000 f9a8 	bl	4102c <z_add_timeout>
   40cdc:	e7f0      	b.n	40cc0 <z_init_static_threads+0xe4>
   40cde:	bf00      	nop
   40ce0:	20020c18 	.word	0x20020c18
   40ce4:	20020bb8 	.word	0x20020bb8
   40ce8:	000527f2 	.word	0x000527f2
   40cec:	0004b33b 	.word	0x0004b33b
   40cf0:	0004c5d9 	.word	0x0004c5d9
   40cf4:	0005281f 	.word	0x0005281f
   40cf8:	0003fd31 	.word	0x0003fd31

00040cfc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   40cfc:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   40cfe:	b138      	cbz	r0, 40d10 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3) == _current_cpu->id) {
   40d00:	4b04      	ldr	r3, [pc, #16]	; (40d14 <z_spin_lock_valid+0x18>)
   40d02:	f000 0003 	and.w	r0, r0, #3
   40d06:	7d1b      	ldrb	r3, [r3, #20]
   40d08:	1ac0      	subs	r0, r0, r3
   40d0a:	bf18      	it	ne
   40d0c:	2001      	movne	r0, #1
   40d0e:	4770      	bx	lr
			return false;
		}
	}
	return true;
   40d10:	2001      	movs	r0, #1
}
   40d12:	4770      	bx	lr
   40d14:	2002611c 	.word	0x2002611c

00040d18 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   40d18:	4a06      	ldr	r2, [pc, #24]	; (40d34 <z_spin_unlock_valid+0x1c>)
   40d1a:	7d11      	ldrb	r1, [r2, #20]
   40d1c:	6893      	ldr	r3, [r2, #8]
   40d1e:	6802      	ldr	r2, [r0, #0]
   40d20:	430b      	orrs	r3, r1
   40d22:	429a      	cmp	r2, r3
   40d24:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   40d28:	bf06      	itte	eq
   40d2a:	6003      	streq	r3, [r0, #0]
	return true;
   40d2c:	2001      	moveq	r0, #1
		return false;
   40d2e:	4618      	movne	r0, r3
}
   40d30:	4770      	bx	lr
   40d32:	bf00      	nop
   40d34:	2002611c 	.word	0x2002611c

00040d38 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   40d38:	4a02      	ldr	r2, [pc, #8]	; (40d44 <z_spin_lock_set_owner+0xc>)
   40d3a:	7d11      	ldrb	r1, [r2, #20]
   40d3c:	6893      	ldr	r3, [r2, #8]
   40d3e:	430b      	orrs	r3, r1
   40d40:	6003      	str	r3, [r0, #0]
}
   40d42:	4770      	bx	lr
   40d44:	2002611c 	.word	0x2002611c

00040d48 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   40d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   40d4c:	4605      	mov	r5, r0
   40d4e:	b088      	sub	sp, #32
   40d50:	460e      	mov	r6, r1
   40d52:	4617      	mov	r7, r2
   40d54:	4698      	mov	r8, r3
	z_impl_k_queue_init(queue);
   40d56:	f007 f862 	bl	47e1e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   40d5a:	f105 0420 	add.w	r4, r5, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   40d5e:	2000      	movs	r0, #0
   40d60:	2200      	movs	r2, #0
   40d62:	2300      	movs	r3, #0
   40d64:	e9cd 8003 	strd	r8, r0, [sp, #12]
   40d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
   40d6c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   40d70:	9500      	str	r5, [sp, #0]
   40d72:	4b06      	ldr	r3, [pc, #24]	; (40d8c <k_work_q_start+0x44>)
   40d74:	463a      	mov	r2, r7
   40d76:	4631      	mov	r1, r6
   40d78:	4620      	mov	r0, r4
   40d7a:	f7ff fee1 	bl	40b40 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   40d7e:	4620      	mov	r0, r4
   40d80:	4903      	ldr	r1, [pc, #12]	; (40d90 <k_work_q_start+0x48>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   40d82:	b008      	add	sp, #32
   40d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   40d88:	f007 b8bc 	b.w	47f04 <z_impl_k_thread_name_set>
   40d8c:	000249d1 	.word	0x000249d1
   40d90:	0004dacc 	.word	0x0004dacc

00040d94 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   40d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   40d98:	4606      	mov	r6, r0
   40d9a:	460d      	mov	r5, r1
   40d9c:	4690      	mov	r8, r2
   40d9e:	4699      	mov	r9, r3
	__asm__ volatile(
   40da0:	f04f 0320 	mov.w	r3, #32
   40da4:	f3ef 8711 	mrs	r7, BASEPRI
   40da8:	f383 8811 	msr	BASEPRI, r3
   40dac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40db0:	4834      	ldr	r0, [pc, #208]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40db2:	f7ff ffa3 	bl	40cfc <z_spin_lock_valid>
   40db6:	b968      	cbnz	r0, 40dd4 <k_delayed_work_submit_to_queue+0x40>
   40db8:	235c      	movs	r3, #92	; 0x5c
   40dba:	4a33      	ldr	r2, [pc, #204]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40dbc:	4933      	ldr	r1, [pc, #204]	; (40e8c <k_delayed_work_submit_to_queue+0xf8>)
   40dbe:	4834      	ldr	r0, [pc, #208]	; (40e90 <k_delayed_work_submit_to_queue+0xfc>)
   40dc0:	f003 fa86 	bl	442d0 <printk>
   40dc4:	492f      	ldr	r1, [pc, #188]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40dc6:	4833      	ldr	r0, [pc, #204]	; (40e94 <k_delayed_work_submit_to_queue+0x100>)
   40dc8:	f003 fa82 	bl	442d0 <printk>
   40dcc:	215c      	movs	r1, #92	; 0x5c
   40dce:	482e      	ldr	r0, [pc, #184]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40dd0:	f003 fc98 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   40dd4:	482b      	ldr	r0, [pc, #172]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40dd6:	f7ff ffaf 	bl	40d38 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   40dda:	6aab      	ldr	r3, [r5, #40]	; 0x28
   40ddc:	b30b      	cbz	r3, 40e22 <k_delayed_work_submit_to_queue+0x8e>
   40dde:	42b3      	cmp	r3, r6
   40de0:	d14c      	bne.n	40e7c <k_delayed_work_submit_to_queue+0xe8>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   40de2:	4628      	mov	r0, r5
   40de4:	f007 f8ac 	bl	47f40 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   40de8:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   40dec:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   40dee:	d01a      	beq.n	40e26 <k_delayed_work_submit_to_queue+0x92>
			err = 0;
		} else if (err < 0) {
   40df0:	2800      	cmp	r0, #0
   40df2:	da19      	bge.n	40e28 <k_delayed_work_submit_to_queue+0x94>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   40df4:	4823      	ldr	r0, [pc, #140]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40df6:	f7ff ff8f 	bl	40d18 <z_spin_unlock_valid>
   40dfa:	b968      	cbnz	r0, 40e18 <k_delayed_work_submit_to_queue+0x84>
   40dfc:	2384      	movs	r3, #132	; 0x84
   40dfe:	4a22      	ldr	r2, [pc, #136]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40e00:	4925      	ldr	r1, [pc, #148]	; (40e98 <k_delayed_work_submit_to_queue+0x104>)
   40e02:	4823      	ldr	r0, [pc, #140]	; (40e90 <k_delayed_work_submit_to_queue+0xfc>)
   40e04:	f003 fa64 	bl	442d0 <printk>
   40e08:	491e      	ldr	r1, [pc, #120]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40e0a:	4824      	ldr	r0, [pc, #144]	; (40e9c <k_delayed_work_submit_to_queue+0x108>)
   40e0c:	f003 fa60 	bl	442d0 <printk>
   40e10:	2184      	movs	r1, #132	; 0x84
   40e12:	481d      	ldr	r0, [pc, #116]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40e14:	f003 fc76 	bl	44704 <assert_post_action>
	__asm__ volatile(
   40e18:	f387 8811 	msr	BASEPRI, r7
   40e1c:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   40e20:	e021      	b.n	40e66 <k_delayed_work_submit_to_queue+0xd2>
	if (work->work_q == work_q) {
   40e22:	2e00      	cmp	r6, #0
   40e24:	d0dd      	beq.n	40de2 <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   40e26:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40e28:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   40e2c:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   40e2e:	d11d      	bne.n	40e6c <k_delayed_work_submit_to_queue+0xd8>
   40e30:	4814      	ldr	r0, [pc, #80]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40e32:	f7ff ff71 	bl	40d18 <z_spin_unlock_valid>
   40e36:	b968      	cbnz	r0, 40e54 <k_delayed_work_submit_to_queue+0xc0>
   40e38:	2384      	movs	r3, #132	; 0x84
   40e3a:	4a13      	ldr	r2, [pc, #76]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40e3c:	4916      	ldr	r1, [pc, #88]	; (40e98 <k_delayed_work_submit_to_queue+0x104>)
   40e3e:	4814      	ldr	r0, [pc, #80]	; (40e90 <k_delayed_work_submit_to_queue+0xfc>)
   40e40:	f003 fa46 	bl	442d0 <printk>
   40e44:	490f      	ldr	r1, [pc, #60]	; (40e84 <k_delayed_work_submit_to_queue+0xf0>)
   40e46:	4815      	ldr	r0, [pc, #84]	; (40e9c <k_delayed_work_submit_to_queue+0x108>)
   40e48:	f003 fa42 	bl	442d0 <printk>
   40e4c:	2184      	movs	r1, #132	; 0x84
   40e4e:	480e      	ldr	r0, [pc, #56]	; (40e88 <k_delayed_work_submit_to_queue+0xf4>)
   40e50:	f003 fc58 	bl	44704 <assert_post_action>
   40e54:	f387 8811 	msr	BASEPRI, r7
   40e58:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   40e5c:	4629      	mov	r1, r5
   40e5e:	4630      	mov	r0, r6
   40e60:	f007 f855 	bl	47f0e <k_work_submit_to_queue>
		return 0;
   40e64:	2400      	movs	r4, #0
}
   40e66:	4620      	mov	r0, r4
   40e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   40e6c:	4642      	mov	r2, r8
   40e6e:	464b      	mov	r3, r9
   40e70:	490b      	ldr	r1, [pc, #44]	; (40ea0 <k_delayed_work_submit_to_queue+0x10c>)
   40e72:	f105 0010 	add.w	r0, r5, #16
   40e76:	f000 f8d9 	bl	4102c <z_add_timeout>
   40e7a:	e7bb      	b.n	40df4 <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   40e7c:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   40e80:	e7b8      	b.n	40df4 <k_delayed_work_submit_to_queue+0x60>
   40e82:	bf00      	nop
   40e84:	20026164 	.word	0x20026164
   40e88:	0004be5f 	.word	0x0004be5f
   40e8c:	0004be85 	.word	0x0004be85
   40e90:	0004b33b 	.word	0x0004b33b
   40e94:	0004be9a 	.word	0x0004be9a
   40e98:	0004beb2 	.word	0x0004beb2
   40e9c:	0004bec9 	.word	0x0004bec9
   40ea0:	00047f37 	.word	0x00047f37

00040ea4 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   40ea4:	b538      	push	{r3, r4, r5, lr}
	if (!work->work_q) {
   40ea6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   40ea8:	4604      	mov	r4, r0
	if (!work->work_q) {
   40eaa:	2b00      	cmp	r3, #0
   40eac:	d038      	beq.n	40f20 <k_delayed_work_cancel+0x7c>
	__asm__ volatile(
   40eae:	f04f 0320 	mov.w	r3, #32
   40eb2:	f3ef 8511 	mrs	r5, BASEPRI
   40eb6:	f383 8811 	msr	BASEPRI, r3
   40eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   40ebe:	481a      	ldr	r0, [pc, #104]	; (40f28 <k_delayed_work_cancel+0x84>)
   40ec0:	f7ff ff1c 	bl	40cfc <z_spin_lock_valid>
   40ec4:	b968      	cbnz	r0, 40ee2 <k_delayed_work_cancel+0x3e>
   40ec6:	235c      	movs	r3, #92	; 0x5c
   40ec8:	4a18      	ldr	r2, [pc, #96]	; (40f2c <k_delayed_work_cancel+0x88>)
   40eca:	4919      	ldr	r1, [pc, #100]	; (40f30 <k_delayed_work_cancel+0x8c>)
   40ecc:	4819      	ldr	r0, [pc, #100]	; (40f34 <k_delayed_work_cancel+0x90>)
   40ece:	f003 f9ff 	bl	442d0 <printk>
   40ed2:	4915      	ldr	r1, [pc, #84]	; (40f28 <k_delayed_work_cancel+0x84>)
   40ed4:	4818      	ldr	r0, [pc, #96]	; (40f38 <k_delayed_work_cancel+0x94>)
   40ed6:	f003 f9fb 	bl	442d0 <printk>
   40eda:	215c      	movs	r1, #92	; 0x5c
   40edc:	4813      	ldr	r0, [pc, #76]	; (40f2c <k_delayed_work_cancel+0x88>)
   40ede:	f003 fc11 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   40ee2:	4811      	ldr	r0, [pc, #68]	; (40f28 <k_delayed_work_cancel+0x84>)
   40ee4:	f7ff ff28 	bl	40d38 <z_spin_lock_set_owner>
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   40ee8:	4620      	mov	r0, r4
   40eea:	f007 f829 	bl	47f40 <work_cancel>
   40eee:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   40ef0:	480d      	ldr	r0, [pc, #52]	; (40f28 <k_delayed_work_cancel+0x84>)
   40ef2:	f7ff ff11 	bl	40d18 <z_spin_unlock_valid>
   40ef6:	b968      	cbnz	r0, 40f14 <k_delayed_work_cancel+0x70>
   40ef8:	2384      	movs	r3, #132	; 0x84
   40efa:	4a0c      	ldr	r2, [pc, #48]	; (40f2c <k_delayed_work_cancel+0x88>)
   40efc:	490f      	ldr	r1, [pc, #60]	; (40f3c <k_delayed_work_cancel+0x98>)
   40efe:	480d      	ldr	r0, [pc, #52]	; (40f34 <k_delayed_work_cancel+0x90>)
   40f00:	f003 f9e6 	bl	442d0 <printk>
   40f04:	4908      	ldr	r1, [pc, #32]	; (40f28 <k_delayed_work_cancel+0x84>)
   40f06:	480e      	ldr	r0, [pc, #56]	; (40f40 <k_delayed_work_cancel+0x9c>)
   40f08:	f003 f9e2 	bl	442d0 <printk>
   40f0c:	2184      	movs	r1, #132	; 0x84
   40f0e:	4807      	ldr	r0, [pc, #28]	; (40f2c <k_delayed_work_cancel+0x88>)
   40f10:	f003 fbf8 	bl	44704 <assert_post_action>
	__asm__ volatile(
   40f14:	f385 8811 	msr	BASEPRI, r5
   40f18:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   40f1c:	4620      	mov	r0, r4
   40f1e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   40f20:	f06f 0415 	mvn.w	r4, #21
   40f24:	e7fa      	b.n	40f1c <k_delayed_work_cancel+0x78>
   40f26:	bf00      	nop
   40f28:	20026164 	.word	0x20026164
   40f2c:	0004be5f 	.word	0x0004be5f
   40f30:	0004be85 	.word	0x0004be85
   40f34:	0004b33b 	.word	0x0004b33b
   40f38:	0004be9a 	.word	0x0004be9a
   40f3c:	0004beb2 	.word	0x0004beb2
   40f40:	0004bec9 	.word	0x0004bec9

00040f44 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   40f44:	4b03      	ldr	r3, [pc, #12]	; (40f54 <elapsed+0x10>)
   40f46:	681b      	ldr	r3, [r3, #0]
   40f48:	b90b      	cbnz	r3, 40f4e <elapsed+0xa>
   40f4a:	f7e6 b94f 	b.w	271ec <z_clock_elapsed>
}
   40f4e:	2000      	movs	r0, #0
   40f50:	4770      	bx	lr
   40f52:	bf00      	nop
   40f54:	20026168 	.word	0x20026168

00040f58 <remove_timeout>:
{
   40f58:	b530      	push	{r4, r5, lr}
   40f5a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   40f5c:	b168      	cbz	r0, 40f7a <remove_timeout+0x22>
   40f5e:	4a0a      	ldr	r2, [pc, #40]	; (40f88 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   40f60:	6852      	ldr	r2, [r2, #4]
   40f62:	4290      	cmp	r0, r2
   40f64:	d009      	beq.n	40f7a <remove_timeout+0x22>
	if (next(t) != NULL) {
   40f66:	b143      	cbz	r3, 40f7a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   40f68:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   40f6c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   40f70:	1912      	adds	r2, r2, r4
   40f72:	eb45 0101 	adc.w	r1, r5, r1
   40f76:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   40f7a:	6842      	ldr	r2, [r0, #4]
   40f7c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   40f7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   40f80:	2300      	movs	r3, #0
	node->prev = NULL;
   40f82:	e9c0 3300 	strd	r3, r3, [r0]
}
   40f86:	bd30      	pop	{r4, r5, pc}
   40f88:	200208d4 	.word	0x200208d4

00040f8c <next_timeout>:

static int32_t next_timeout(void)
{
   40f8c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   40f8e:	4b11      	ldr	r3, [pc, #68]	; (40fd4 <next_timeout+0x48>)
   40f90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40f92:	429c      	cmp	r4, r3
   40f94:	bf08      	it	eq
   40f96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   40f98:	f7ff ffd4 	bl	40f44 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   40f9c:	b1b4      	cbz	r4, 40fcc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   40f9e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   40fa2:	1a14      	subs	r4, r2, r0
   40fa4:	eb63 75e0 	sbc.w	r5, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   40fa8:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   40fac:	f175 0300 	sbcs.w	r3, r5, #0
   40fb0:	da0c      	bge.n	40fcc <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   40fb2:	2c00      	cmp	r4, #0
   40fb4:	f175 0300 	sbcs.w	r3, r5, #0
   40fb8:	4620      	mov	r0, r4
   40fba:	da00      	bge.n	40fbe <next_timeout+0x32>
   40fbc:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   40fbe:	4b06      	ldr	r3, [pc, #24]	; (40fd8 <next_timeout+0x4c>)
   40fc0:	691b      	ldr	r3, [r3, #16]
   40fc2:	b113      	cbz	r3, 40fca <next_timeout+0x3e>
   40fc4:	4298      	cmp	r0, r3
   40fc6:	bfa8      	it	ge
   40fc8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   40fca:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   40fcc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   40fd0:	e7f5      	b.n	40fbe <next_timeout+0x32>
   40fd2:	bf00      	nop
   40fd4:	200208d4 	.word	0x200208d4
   40fd8:	2002611c 	.word	0x2002611c

00040fdc <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   40fdc:	6803      	ldr	r3, [r0, #0]
{
   40fde:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   40fe0:	b1fb      	cbz	r3, 41022 <timeout_rem+0x46>
	return list->head == list;
   40fe2:	4a11      	ldr	r2, [pc, #68]	; (41028 <timeout_rem+0x4c>)
   40fe4:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   40fe6:	4293      	cmp	r3, r2
   40fe8:	d018      	beq.n	4101c <timeout_rem+0x40>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   40fea:	2400      	movs	r4, #0
   40fec:	2500      	movs	r5, #0
   40fee:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   40ff0:	b93b      	cbnz	r3, 41002 <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   40ff2:	f7ff ffa7 	bl	40f44 <elapsed>
   40ff6:	1a22      	subs	r2, r4, r0
   40ff8:	eb65 73e0 	sbc.w	r3, r5, r0, asr #31
   40ffc:	4619      	mov	r1, r3
   40ffe:	4610      	mov	r0, r2
}
   41000:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   41002:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   41006:	18a4      	adds	r4, r4, r2
   41008:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   4100c:	4283      	cmp	r3, r0
   4100e:	d0f0      	beq.n	40ff2 <timeout_rem+0x16>
   41010:	2b00      	cmp	r3, #0
   41012:	d0ee      	beq.n	40ff2 <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   41014:	428b      	cmp	r3, r1
   41016:	d0ec      	beq.n	40ff2 <timeout_rem+0x16>
   41018:	681b      	ldr	r3, [r3, #0]
   4101a:	e7e9      	b.n	40ff0 <timeout_rem+0x14>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4101c:	2400      	movs	r4, #0
   4101e:	2500      	movs	r5, #0
   41020:	e7e7      	b.n	40ff2 <timeout_rem+0x16>
		return 0;
   41022:	2000      	movs	r0, #0
   41024:	2100      	movs	r1, #0
   41026:	e7eb      	b.n	41000 <timeout_rem+0x24>
   41028:	200208d4 	.word	0x200208d4

0004102c <z_add_timeout>:
{
   4102c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41030:	9101      	str	r1, [sp, #4]
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41032:	1c59      	adds	r1, r3, #1
   41034:	bf08      	it	eq
   41036:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   4103a:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   4103c:	f000 80a6 	beq.w	4118c <z_add_timeout+0x160>
	k_ticks_t ticks = timeout.ticks + 1;
   41040:	1c54      	adds	r4, r2, #1
   41042:	f143 0500 	adc.w	r5, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   41046:	f06f 0301 	mvn.w	r3, #1
   4104a:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   4104e:	ebb3 0804 	subs.w	r8, r3, r4
   41052:	eb6b 0905 	sbc.w	r9, fp, r5
   41056:	f1b8 0f00 	cmp.w	r8, #0
   4105a:	f179 0300 	sbcs.w	r3, r9, #0
   4105e:	db0f      	blt.n	41080 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   41060:	f7ff ff70 	bl	40f44 <elapsed>
   41064:	f06f 0301 	mvn.w	r3, #1
   41068:	4a4f      	ldr	r2, [pc, #316]	; (411a8 <z_add_timeout+0x17c>)
   4106a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   4106e:	1a5b      	subs	r3, r3, r1
   41070:	eb6b 020c 	sbc.w	r2, fp, ip
   41074:	1b1e      	subs	r6, r3, r4
   41076:	eb62 0705 	sbc.w	r7, r2, r5
   4107a:	1a34      	subs	r4, r6, r0
   4107c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   41080:	f8da 3000 	ldr.w	r3, [sl]
   41084:	b163      	cbz	r3, 410a0 <z_add_timeout+0x74>
   41086:	4949      	ldr	r1, [pc, #292]	; (411ac <z_add_timeout+0x180>)
   41088:	2368      	movs	r3, #104	; 0x68
   4108a:	4a49      	ldr	r2, [pc, #292]	; (411b0 <z_add_timeout+0x184>)
   4108c:	4849      	ldr	r0, [pc, #292]	; (411b4 <z_add_timeout+0x188>)
   4108e:	f003 f91f 	bl	442d0 <printk>
   41092:	4849      	ldr	r0, [pc, #292]	; (411b8 <z_add_timeout+0x18c>)
   41094:	f003 f91c 	bl	442d0 <printk>
   41098:	2168      	movs	r1, #104	; 0x68
   4109a:	4845      	ldr	r0, [pc, #276]	; (411b0 <z_add_timeout+0x184>)
   4109c:	f003 fb32 	bl	44704 <assert_post_action>
	to->fn = fn;
   410a0:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   410a2:	2c01      	cmp	r4, #1
	to->fn = fn;
   410a4:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   410a8:	f175 0300 	sbcs.w	r3, r5, #0
   410ac:	4627      	mov	r7, r4
   410ae:	46a8      	mov	r8, r5
   410b0:	bfbc      	itt	lt
   410b2:	2701      	movlt	r7, #1
   410b4:	f04f 0800 	movlt.w	r8, #0
	__asm__ volatile(
   410b8:	f04f 0320 	mov.w	r3, #32
   410bc:	f3ef 8611 	mrs	r6, BASEPRI
   410c0:	f383 8811 	msr	BASEPRI, r3
   410c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   410c8:	483c      	ldr	r0, [pc, #240]	; (411bc <z_add_timeout+0x190>)
   410ca:	f7ff fe17 	bl	40cfc <z_spin_lock_valid>
   410ce:	b968      	cbnz	r0, 410ec <z_add_timeout+0xc0>
   410d0:	235c      	movs	r3, #92	; 0x5c
   410d2:	4a3b      	ldr	r2, [pc, #236]	; (411c0 <z_add_timeout+0x194>)
   410d4:	493b      	ldr	r1, [pc, #236]	; (411c4 <z_add_timeout+0x198>)
   410d6:	4837      	ldr	r0, [pc, #220]	; (411b4 <z_add_timeout+0x188>)
   410d8:	f003 f8fa 	bl	442d0 <printk>
   410dc:	4937      	ldr	r1, [pc, #220]	; (411bc <z_add_timeout+0x190>)
   410de:	483a      	ldr	r0, [pc, #232]	; (411c8 <z_add_timeout+0x19c>)
   410e0:	f003 f8f6 	bl	442d0 <printk>
   410e4:	215c      	movs	r1, #92	; 0x5c
   410e6:	4836      	ldr	r0, [pc, #216]	; (411c0 <z_add_timeout+0x194>)
   410e8:	f003 fb0c 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   410ec:	4833      	ldr	r0, [pc, #204]	; (411bc <z_add_timeout+0x190>)
   410ee:	f7ff fe23 	bl	40d38 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   410f2:	f7ff ff27 	bl	40f44 <elapsed>
	return list->head == list;
   410f6:	4b35      	ldr	r3, [pc, #212]	; (411cc <z_add_timeout+0x1a0>)
   410f8:	183c      	adds	r4, r7, r0
   410fa:	681a      	ldr	r2, [r3, #0]
   410fc:	eb48 75e0 	adc.w	r5, r8, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41100:	429a      	cmp	r2, r3
   41102:	e9ca 4504 	strd	r4, r5, [sl, #16]
   41106:	d001      	beq.n	4110c <z_add_timeout+0xe0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   41108:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   4110a:	b952      	cbnz	r2, 41122 <z_add_timeout+0xf6>
	node->prev = list->tail;
   4110c:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   4110e:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   41112:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   41116:	685a      	ldr	r2, [r3, #4]
   41118:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   4111c:	f8c3 a004 	str.w	sl, [r3, #4]
   41120:	e014      	b.n	4114c <z_add_timeout+0x120>
			if (t->dticks > to->dticks) {
   41122:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   41126:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   4112a:	4544      	cmp	r4, r8
   4112c:	eb75 0109 	sbcs.w	r1, r5, r9
   41130:	da2f      	bge.n	41192 <z_add_timeout+0x166>
				t->dticks -= to->dticks;
   41132:	ebb8 0004 	subs.w	r0, r8, r4
   41136:	eb69 0105 	sbc.w	r1, r9, r5
   4113a:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   4113e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   41140:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   41144:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   41148:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   4114c:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4114e:	429a      	cmp	r2, r3
   41150:	d006      	beq.n	41160 <z_add_timeout+0x134>
		if (to == first()) {
   41152:	4592      	cmp	sl, r2
   41154:	d104      	bne.n	41160 <z_add_timeout+0x134>
			z_clock_set_timeout(next_timeout(), false);
   41156:	f7ff ff19 	bl	40f8c <next_timeout>
   4115a:	2100      	movs	r1, #0
   4115c:	f7e5 ffe0 	bl	27120 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41160:	4816      	ldr	r0, [pc, #88]	; (411bc <z_add_timeout+0x190>)
   41162:	f7ff fdd9 	bl	40d18 <z_spin_unlock_valid>
   41166:	b968      	cbnz	r0, 41184 <z_add_timeout+0x158>
   41168:	2384      	movs	r3, #132	; 0x84
   4116a:	4a15      	ldr	r2, [pc, #84]	; (411c0 <z_add_timeout+0x194>)
   4116c:	4918      	ldr	r1, [pc, #96]	; (411d0 <z_add_timeout+0x1a4>)
   4116e:	4811      	ldr	r0, [pc, #68]	; (411b4 <z_add_timeout+0x188>)
   41170:	f003 f8ae 	bl	442d0 <printk>
   41174:	4911      	ldr	r1, [pc, #68]	; (411bc <z_add_timeout+0x190>)
   41176:	4817      	ldr	r0, [pc, #92]	; (411d4 <z_add_timeout+0x1a8>)
   41178:	f003 f8aa 	bl	442d0 <printk>
   4117c:	2184      	movs	r1, #132	; 0x84
   4117e:	4810      	ldr	r0, [pc, #64]	; (411c0 <z_add_timeout+0x194>)
   41180:	f003 fac0 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41184:	f386 8811 	msr	BASEPRI, r6
   41188:	f3bf 8f6f 	isb	sy
}
   4118c:	b003      	add	sp, #12
   4118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   41192:	ebb4 0008 	subs.w	r0, r4, r8
   41196:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   4119a:	42ba      	cmp	r2, r7
   4119c:	e9ca 0104 	strd	r0, r1, [sl, #16]
   411a0:	d0b4      	beq.n	4110c <z_add_timeout+0xe0>
   411a2:	6812      	ldr	r2, [r2, #0]
   411a4:	e7b1      	b.n	4110a <z_add_timeout+0xde>
   411a6:	bf00      	nop
   411a8:	20024970 	.word	0x20024970
   411ac:	00052917 	.word	0x00052917
   411b0:	000528f3 	.word	0x000528f3
   411b4:	0004b33b 	.word	0x0004b33b
   411b8:	0004c55b 	.word	0x0004c55b
   411bc:	2002616c 	.word	0x2002616c
   411c0:	0004be5f 	.word	0x0004be5f
   411c4:	0004be85 	.word	0x0004be85
   411c8:	0004be9a 	.word	0x0004be9a
   411cc:	200208d4 	.word	0x200208d4
   411d0:	0004beb2 	.word	0x0004beb2
   411d4:	0004bec9 	.word	0x0004bec9

000411d8 <z_abort_timeout>:
{
   411d8:	b538      	push	{r3, r4, r5, lr}
   411da:	4604      	mov	r4, r0
	__asm__ volatile(
   411dc:	f04f 0320 	mov.w	r3, #32
   411e0:	f3ef 8511 	mrs	r5, BASEPRI
   411e4:	f383 8811 	msr	BASEPRI, r3
   411e8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   411ec:	481a      	ldr	r0, [pc, #104]	; (41258 <z_abort_timeout+0x80>)
   411ee:	f7ff fd85 	bl	40cfc <z_spin_lock_valid>
   411f2:	b968      	cbnz	r0, 41210 <z_abort_timeout+0x38>
   411f4:	235c      	movs	r3, #92	; 0x5c
   411f6:	4a19      	ldr	r2, [pc, #100]	; (4125c <z_abort_timeout+0x84>)
   411f8:	4919      	ldr	r1, [pc, #100]	; (41260 <z_abort_timeout+0x88>)
   411fa:	481a      	ldr	r0, [pc, #104]	; (41264 <z_abort_timeout+0x8c>)
   411fc:	f003 f868 	bl	442d0 <printk>
   41200:	4915      	ldr	r1, [pc, #84]	; (41258 <z_abort_timeout+0x80>)
   41202:	4819      	ldr	r0, [pc, #100]	; (41268 <z_abort_timeout+0x90>)
   41204:	f003 f864 	bl	442d0 <printk>
   41208:	215c      	movs	r1, #92	; 0x5c
   4120a:	4814      	ldr	r0, [pc, #80]	; (4125c <z_abort_timeout+0x84>)
   4120c:	f003 fa7a 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41210:	4811      	ldr	r0, [pc, #68]	; (41258 <z_abort_timeout+0x80>)
   41212:	f7ff fd91 	bl	40d38 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   41216:	6823      	ldr	r3, [r4, #0]
   41218:	b1db      	cbz	r3, 41252 <z_abort_timeout+0x7a>
			remove_timeout(to);
   4121a:	4620      	mov	r0, r4
   4121c:	f7ff fe9c 	bl	40f58 <remove_timeout>
			ret = 0;
   41220:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41222:	480d      	ldr	r0, [pc, #52]	; (41258 <z_abort_timeout+0x80>)
   41224:	f7ff fd78 	bl	40d18 <z_spin_unlock_valid>
   41228:	b968      	cbnz	r0, 41246 <z_abort_timeout+0x6e>
   4122a:	2384      	movs	r3, #132	; 0x84
   4122c:	4a0b      	ldr	r2, [pc, #44]	; (4125c <z_abort_timeout+0x84>)
   4122e:	490f      	ldr	r1, [pc, #60]	; (4126c <z_abort_timeout+0x94>)
   41230:	480c      	ldr	r0, [pc, #48]	; (41264 <z_abort_timeout+0x8c>)
   41232:	f003 f84d 	bl	442d0 <printk>
   41236:	4908      	ldr	r1, [pc, #32]	; (41258 <z_abort_timeout+0x80>)
   41238:	480d      	ldr	r0, [pc, #52]	; (41270 <z_abort_timeout+0x98>)
   4123a:	f003 f849 	bl	442d0 <printk>
   4123e:	2184      	movs	r1, #132	; 0x84
   41240:	4806      	ldr	r0, [pc, #24]	; (4125c <z_abort_timeout+0x84>)
   41242:	f003 fa5f 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41246:	f385 8811 	msr	BASEPRI, r5
   4124a:	f3bf 8f6f 	isb	sy
}
   4124e:	4620      	mov	r0, r4
   41250:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   41252:	f06f 0415 	mvn.w	r4, #21
   41256:	e7e4      	b.n	41222 <z_abort_timeout+0x4a>
   41258:	2002616c 	.word	0x2002616c
   4125c:	0004be5f 	.word	0x0004be5f
   41260:	0004be85 	.word	0x0004be85
   41264:	0004b33b 	.word	0x0004b33b
   41268:	0004be9a 	.word	0x0004be9a
   4126c:	0004beb2 	.word	0x0004beb2
   41270:	0004bec9 	.word	0x0004bec9

00041274 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(struct _timeout *timeout)
{
   41274:	b570      	push	{r4, r5, r6, lr}
   41276:	4604      	mov	r4, r0
	__asm__ volatile(
   41278:	f04f 0320 	mov.w	r3, #32
   4127c:	f3ef 8611 	mrs	r6, BASEPRI
   41280:	f383 8811 	msr	BASEPRI, r3
   41284:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41288:	4819      	ldr	r0, [pc, #100]	; (412f0 <z_timeout_remaining+0x7c>)
   4128a:	f7ff fd37 	bl	40cfc <z_spin_lock_valid>
   4128e:	b968      	cbnz	r0, 412ac <z_timeout_remaining+0x38>
   41290:	235c      	movs	r3, #92	; 0x5c
   41292:	4a18      	ldr	r2, [pc, #96]	; (412f4 <z_timeout_remaining+0x80>)
   41294:	4918      	ldr	r1, [pc, #96]	; (412f8 <z_timeout_remaining+0x84>)
   41296:	4819      	ldr	r0, [pc, #100]	; (412fc <z_timeout_remaining+0x88>)
   41298:	f003 f81a 	bl	442d0 <printk>
   4129c:	4914      	ldr	r1, [pc, #80]	; (412f0 <z_timeout_remaining+0x7c>)
   4129e:	4818      	ldr	r0, [pc, #96]	; (41300 <z_timeout_remaining+0x8c>)
   412a0:	f003 f816 	bl	442d0 <printk>
   412a4:	215c      	movs	r1, #92	; 0x5c
   412a6:	4813      	ldr	r0, [pc, #76]	; (412f4 <z_timeout_remaining+0x80>)
   412a8:	f003 fa2c 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   412ac:	4810      	ldr	r0, [pc, #64]	; (412f0 <z_timeout_remaining+0x7c>)
   412ae:	f7ff fd43 	bl	40d38 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   412b2:	4620      	mov	r0, r4
   412b4:	f7ff fe92 	bl	40fdc <timeout_rem>
   412b8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   412ba:	480d      	ldr	r0, [pc, #52]	; (412f0 <z_timeout_remaining+0x7c>)
   412bc:	460d      	mov	r5, r1
   412be:	f7ff fd2b 	bl	40d18 <z_spin_unlock_valid>
   412c2:	b968      	cbnz	r0, 412e0 <z_timeout_remaining+0x6c>
   412c4:	2384      	movs	r3, #132	; 0x84
   412c6:	4a0b      	ldr	r2, [pc, #44]	; (412f4 <z_timeout_remaining+0x80>)
   412c8:	490e      	ldr	r1, [pc, #56]	; (41304 <z_timeout_remaining+0x90>)
   412ca:	480c      	ldr	r0, [pc, #48]	; (412fc <z_timeout_remaining+0x88>)
   412cc:	f003 f800 	bl	442d0 <printk>
   412d0:	4907      	ldr	r1, [pc, #28]	; (412f0 <z_timeout_remaining+0x7c>)
   412d2:	480d      	ldr	r0, [pc, #52]	; (41308 <z_timeout_remaining+0x94>)
   412d4:	f002 fffc 	bl	442d0 <printk>
   412d8:	2184      	movs	r1, #132	; 0x84
   412da:	4806      	ldr	r0, [pc, #24]	; (412f4 <z_timeout_remaining+0x80>)
   412dc:	f003 fa12 	bl	44704 <assert_post_action>
	__asm__ volatile(
   412e0:	f386 8811 	msr	BASEPRI, r6
   412e4:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   412e8:	4620      	mov	r0, r4
   412ea:	4629      	mov	r1, r5
   412ec:	bd70      	pop	{r4, r5, r6, pc}
   412ee:	bf00      	nop
   412f0:	2002616c 	.word	0x2002616c
   412f4:	0004be5f 	.word	0x0004be5f
   412f8:	0004be85 	.word	0x0004be85
   412fc:	0004b33b 	.word	0x0004b33b
   41300:	0004be9a 	.word	0x0004be9a
   41304:	0004beb2 	.word	0x0004beb2
   41308:	0004bec9 	.word	0x0004bec9

0004130c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   4130c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   4130e:	f04f 0320 	mov.w	r3, #32
   41312:	f3ef 8511 	mrs	r5, BASEPRI
   41316:	f383 8811 	msr	BASEPRI, r3
   4131a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   4131e:	4818      	ldr	r0, [pc, #96]	; (41380 <z_get_next_timeout_expiry+0x74>)
   41320:	f7ff fcec 	bl	40cfc <z_spin_lock_valid>
   41324:	b968      	cbnz	r0, 41342 <z_get_next_timeout_expiry+0x36>
   41326:	235c      	movs	r3, #92	; 0x5c
   41328:	4a16      	ldr	r2, [pc, #88]	; (41384 <z_get_next_timeout_expiry+0x78>)
   4132a:	4917      	ldr	r1, [pc, #92]	; (41388 <z_get_next_timeout_expiry+0x7c>)
   4132c:	4817      	ldr	r0, [pc, #92]	; (4138c <z_get_next_timeout_expiry+0x80>)
   4132e:	f002 ffcf 	bl	442d0 <printk>
   41332:	4913      	ldr	r1, [pc, #76]	; (41380 <z_get_next_timeout_expiry+0x74>)
   41334:	4816      	ldr	r0, [pc, #88]	; (41390 <z_get_next_timeout_expiry+0x84>)
   41336:	f002 ffcb 	bl	442d0 <printk>
   4133a:	215c      	movs	r1, #92	; 0x5c
   4133c:	4811      	ldr	r0, [pc, #68]	; (41384 <z_get_next_timeout_expiry+0x78>)
   4133e:	f003 f9e1 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41342:	480f      	ldr	r0, [pc, #60]	; (41380 <z_get_next_timeout_expiry+0x74>)
   41344:	f7ff fcf8 	bl	40d38 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   41348:	f7ff fe20 	bl	40f8c <next_timeout>
   4134c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   4134e:	480c      	ldr	r0, [pc, #48]	; (41380 <z_get_next_timeout_expiry+0x74>)
   41350:	f7ff fce2 	bl	40d18 <z_spin_unlock_valid>
   41354:	b968      	cbnz	r0, 41372 <z_get_next_timeout_expiry+0x66>
   41356:	2384      	movs	r3, #132	; 0x84
   41358:	4a0a      	ldr	r2, [pc, #40]	; (41384 <z_get_next_timeout_expiry+0x78>)
   4135a:	490e      	ldr	r1, [pc, #56]	; (41394 <z_get_next_timeout_expiry+0x88>)
   4135c:	480b      	ldr	r0, [pc, #44]	; (4138c <z_get_next_timeout_expiry+0x80>)
   4135e:	f002 ffb7 	bl	442d0 <printk>
   41362:	4907      	ldr	r1, [pc, #28]	; (41380 <z_get_next_timeout_expiry+0x74>)
   41364:	480c      	ldr	r0, [pc, #48]	; (41398 <z_get_next_timeout_expiry+0x8c>)
   41366:	f002 ffb3 	bl	442d0 <printk>
   4136a:	2184      	movs	r1, #132	; 0x84
   4136c:	4805      	ldr	r0, [pc, #20]	; (41384 <z_get_next_timeout_expiry+0x78>)
   4136e:	f003 f9c9 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41372:	f385 8811 	msr	BASEPRI, r5
   41376:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   4137a:	4620      	mov	r0, r4
   4137c:	bd38      	pop	{r3, r4, r5, pc}
   4137e:	bf00      	nop
   41380:	2002616c 	.word	0x2002616c
   41384:	0004be5f 	.word	0x0004be5f
   41388:	0004be85 	.word	0x0004be85
   4138c:	0004b33b 	.word	0x0004b33b
   41390:	0004be9a 	.word	0x0004be9a
   41394:	0004beb2 	.word	0x0004beb2
   41398:	0004bec9 	.word	0x0004bec9

0004139c <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   4139c:	b570      	push	{r4, r5, r6, lr}
   4139e:	4604      	mov	r4, r0
   413a0:	460e      	mov	r6, r1
	__asm__ volatile(
   413a2:	f04f 0320 	mov.w	r3, #32
   413a6:	f3ef 8511 	mrs	r5, BASEPRI
   413aa:	f383 8811 	msr	BASEPRI, r3
   413ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   413b2:	481b      	ldr	r0, [pc, #108]	; (41420 <z_set_timeout_expiry+0x84>)
   413b4:	f7ff fca2 	bl	40cfc <z_spin_lock_valid>
   413b8:	b968      	cbnz	r0, 413d6 <z_set_timeout_expiry+0x3a>
   413ba:	235c      	movs	r3, #92	; 0x5c
   413bc:	4a19      	ldr	r2, [pc, #100]	; (41424 <z_set_timeout_expiry+0x88>)
   413be:	491a      	ldr	r1, [pc, #104]	; (41428 <z_set_timeout_expiry+0x8c>)
   413c0:	481a      	ldr	r0, [pc, #104]	; (4142c <z_set_timeout_expiry+0x90>)
   413c2:	f002 ff85 	bl	442d0 <printk>
   413c6:	4916      	ldr	r1, [pc, #88]	; (41420 <z_set_timeout_expiry+0x84>)
   413c8:	4819      	ldr	r0, [pc, #100]	; (41430 <z_set_timeout_expiry+0x94>)
   413ca:	f002 ff81 	bl	442d0 <printk>
   413ce:	215c      	movs	r1, #92	; 0x5c
   413d0:	4814      	ldr	r0, [pc, #80]	; (41424 <z_set_timeout_expiry+0x88>)
   413d2:	f003 f997 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   413d6:	4812      	ldr	r0, [pc, #72]	; (41420 <z_set_timeout_expiry+0x84>)
   413d8:	f7ff fcae 	bl	40d38 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   413dc:	f7ff fdd6 	bl	40f8c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   413e0:	2801      	cmp	r0, #1
   413e2:	dd05      	ble.n	413f0 <z_set_timeout_expiry+0x54>
   413e4:	42a0      	cmp	r0, r4
   413e6:	dd03      	ble.n	413f0 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   413e8:	4631      	mov	r1, r6
   413ea:	4620      	mov	r0, r4
   413ec:	f7e5 fe98 	bl	27120 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   413f0:	480b      	ldr	r0, [pc, #44]	; (41420 <z_set_timeout_expiry+0x84>)
   413f2:	f7ff fc91 	bl	40d18 <z_spin_unlock_valid>
   413f6:	b968      	cbnz	r0, 41414 <z_set_timeout_expiry+0x78>
   413f8:	2384      	movs	r3, #132	; 0x84
   413fa:	4a0a      	ldr	r2, [pc, #40]	; (41424 <z_set_timeout_expiry+0x88>)
   413fc:	490d      	ldr	r1, [pc, #52]	; (41434 <z_set_timeout_expiry+0x98>)
   413fe:	480b      	ldr	r0, [pc, #44]	; (4142c <z_set_timeout_expiry+0x90>)
   41400:	f002 ff66 	bl	442d0 <printk>
   41404:	4906      	ldr	r1, [pc, #24]	; (41420 <z_set_timeout_expiry+0x84>)
   41406:	480c      	ldr	r0, [pc, #48]	; (41438 <z_set_timeout_expiry+0x9c>)
   41408:	f002 ff62 	bl	442d0 <printk>
   4140c:	2184      	movs	r1, #132	; 0x84
   4140e:	4805      	ldr	r0, [pc, #20]	; (41424 <z_set_timeout_expiry+0x88>)
   41410:	f003 f978 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41414:	f385 8811 	msr	BASEPRI, r5
   41418:	f3bf 8f6f 	isb	sy
		}
	}
}
   4141c:	bd70      	pop	{r4, r5, r6, pc}
   4141e:	bf00      	nop
   41420:	2002616c 	.word	0x2002616c
   41424:	0004be5f 	.word	0x0004be5f
   41428:	0004be85 	.word	0x0004be85
   4142c:	0004b33b 	.word	0x0004b33b
   41430:	0004be9a 	.word	0x0004be9a
   41434:	0004beb2 	.word	0x0004beb2
   41438:	0004bec9 	.word	0x0004bec9

0004143c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   4143c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41440:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   41442:	f7fe fd1b 	bl	3fe7c <z_time_slice>
	__asm__ volatile(
   41446:	f04f 0320 	mov.w	r3, #32
   4144a:	f3ef 8711 	mrs	r7, BASEPRI
   4144e:	f383 8811 	msr	BASEPRI, r3
   41452:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41456:	4853      	ldr	r0, [pc, #332]	; (415a4 <z_clock_announce+0x168>)
   41458:	f7ff fc50 	bl	40cfc <z_spin_lock_valid>
   4145c:	b968      	cbnz	r0, 4147a <z_clock_announce+0x3e>
   4145e:	235c      	movs	r3, #92	; 0x5c
   41460:	4a51      	ldr	r2, [pc, #324]	; (415a8 <z_clock_announce+0x16c>)
   41462:	4952      	ldr	r1, [pc, #328]	; (415ac <z_clock_announce+0x170>)
   41464:	4852      	ldr	r0, [pc, #328]	; (415b0 <z_clock_announce+0x174>)
   41466:	f002 ff33 	bl	442d0 <printk>
   4146a:	494e      	ldr	r1, [pc, #312]	; (415a4 <z_clock_announce+0x168>)
   4146c:	4851      	ldr	r0, [pc, #324]	; (415b4 <z_clock_announce+0x178>)
   4146e:	f002 ff2f 	bl	442d0 <printk>
   41472:	215c      	movs	r1, #92	; 0x5c
   41474:	484c      	ldr	r0, [pc, #304]	; (415a8 <z_clock_announce+0x16c>)
   41476:	f003 f945 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   4147a:	4e4f      	ldr	r6, [pc, #316]	; (415b8 <z_clock_announce+0x17c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   4147c:	4d4f      	ldr	r5, [pc, #316]	; (415bc <z_clock_announce+0x180>)
   4147e:	46b3      	mov	fp, r6
   41480:	4848      	ldr	r0, [pc, #288]	; (415a4 <z_clock_announce+0x168>)
	return list->head == list;
   41482:	f8df a144 	ldr.w	sl, [pc, #324]	; 415c8 <z_clock_announce+0x18c>
   41486:	f7ff fc57 	bl	40d38 <z_spin_lock_set_owner>
   4148a:	602c      	str	r4, [r5, #0]
   4148c:	f8da 4000 	ldr.w	r4, [sl]
   41490:	f8d5 c000 	ldr.w	ip, [r5]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41494:	4554      	cmp	r4, sl
   41496:	e9d6 2300 	ldrd	r2, r3, [r6]
   4149a:	46e0      	mov	r8, ip
   4149c:	e9cd 2300 	strd	r2, r3, [sp]
   414a0:	ea4f 79ec 	mov.w	r9, ip, asr #31
   414a4:	d00c      	beq.n	414c0 <z_clock_announce+0x84>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   414a6:	b15c      	cbz	r4, 414c0 <z_clock_announce+0x84>
   414a8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   414ac:	458c      	cmp	ip, r1
   414ae:	eb79 0302 	sbcs.w	r3, r9, r2
   414b2:	da2d      	bge.n	41510 <z_clock_announce+0xd4>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   414b4:	ebb1 000c 	subs.w	r0, r1, ip
   414b8:	eb62 0109 	sbc.w	r1, r2, r9
   414bc:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   414c0:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   414c2:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   414c4:	602c      	str	r4, [r5, #0]
	curr_tick += announce_remaining;
   414c6:	eb18 0203 	adds.w	r2, r8, r3
   414ca:	9b01      	ldr	r3, [sp, #4]
   414cc:	eb49 0303 	adc.w	r3, r9, r3
   414d0:	e9cb 2300 	strd	r2, r3, [fp]

	z_clock_set_timeout(next_timeout(), false);
   414d4:	f7ff fd5a 	bl	40f8c <next_timeout>
   414d8:	4621      	mov	r1, r4
   414da:	f7e5 fe21 	bl	27120 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   414de:	4831      	ldr	r0, [pc, #196]	; (415a4 <z_clock_announce+0x168>)
   414e0:	f7ff fc1a 	bl	40d18 <z_spin_unlock_valid>
   414e4:	b968      	cbnz	r0, 41502 <z_clock_announce+0xc6>
   414e6:	2384      	movs	r3, #132	; 0x84
   414e8:	4a2f      	ldr	r2, [pc, #188]	; (415a8 <z_clock_announce+0x16c>)
   414ea:	4935      	ldr	r1, [pc, #212]	; (415c0 <z_clock_announce+0x184>)
   414ec:	4830      	ldr	r0, [pc, #192]	; (415b0 <z_clock_announce+0x174>)
   414ee:	f002 feef 	bl	442d0 <printk>
   414f2:	492c      	ldr	r1, [pc, #176]	; (415a4 <z_clock_announce+0x168>)
   414f4:	4833      	ldr	r0, [pc, #204]	; (415c4 <z_clock_announce+0x188>)
   414f6:	f002 feeb 	bl	442d0 <printk>
   414fa:	2184      	movs	r1, #132	; 0x84
   414fc:	482a      	ldr	r0, [pc, #168]	; (415a8 <z_clock_announce+0x16c>)
   414fe:	f003 f901 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41502:	f387 8811 	msr	BASEPRI, r7
   41506:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   4150a:	b003      	add	sp, #12
   4150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   41510:	2200      	movs	r2, #0
		curr_tick += dt;
   41512:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   41516:	2300      	movs	r3, #0
		curr_tick += dt;
   41518:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   4151c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   41520:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   41524:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   41526:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   4152a:	4620      	mov	r0, r4
		curr_tick += dt;
   4152c:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   41530:	f7ff fd12 	bl	40f58 <remove_timeout>
   41534:	481b      	ldr	r0, [pc, #108]	; (415a4 <z_clock_announce+0x168>)
   41536:	f7ff fbef 	bl	40d18 <z_spin_unlock_valid>
   4153a:	b968      	cbnz	r0, 41558 <z_clock_announce+0x11c>
   4153c:	2384      	movs	r3, #132	; 0x84
   4153e:	4a1a      	ldr	r2, [pc, #104]	; (415a8 <z_clock_announce+0x16c>)
   41540:	491f      	ldr	r1, [pc, #124]	; (415c0 <z_clock_announce+0x184>)
   41542:	481b      	ldr	r0, [pc, #108]	; (415b0 <z_clock_announce+0x174>)
   41544:	f002 fec4 	bl	442d0 <printk>
   41548:	4916      	ldr	r1, [pc, #88]	; (415a4 <z_clock_announce+0x168>)
   4154a:	481e      	ldr	r0, [pc, #120]	; (415c4 <z_clock_announce+0x188>)
   4154c:	f002 fec0 	bl	442d0 <printk>
   41550:	2184      	movs	r1, #132	; 0x84
   41552:	4815      	ldr	r0, [pc, #84]	; (415a8 <z_clock_announce+0x16c>)
   41554:	f003 f8d6 	bl	44704 <assert_post_action>
   41558:	f387 8811 	msr	BASEPRI, r7
   4155c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   41560:	68a3      	ldr	r3, [r4, #8]
   41562:	4620      	mov	r0, r4
   41564:	4798      	blx	r3
	__asm__ volatile(
   41566:	f04f 0320 	mov.w	r3, #32
   4156a:	f3ef 8711 	mrs	r7, BASEPRI
   4156e:	f383 8811 	msr	BASEPRI, r3
   41572:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41576:	480b      	ldr	r0, [pc, #44]	; (415a4 <z_clock_announce+0x168>)
   41578:	f7ff fbc0 	bl	40cfc <z_spin_lock_valid>
   4157c:	b968      	cbnz	r0, 4159a <z_clock_announce+0x15e>
   4157e:	235c      	movs	r3, #92	; 0x5c
   41580:	4a09      	ldr	r2, [pc, #36]	; (415a8 <z_clock_announce+0x16c>)
   41582:	490a      	ldr	r1, [pc, #40]	; (415ac <z_clock_announce+0x170>)
   41584:	480a      	ldr	r0, [pc, #40]	; (415b0 <z_clock_announce+0x174>)
   41586:	f002 fea3 	bl	442d0 <printk>
   4158a:	4906      	ldr	r1, [pc, #24]	; (415a4 <z_clock_announce+0x168>)
   4158c:	4809      	ldr	r0, [pc, #36]	; (415b4 <z_clock_announce+0x178>)
   4158e:	f002 fe9f 	bl	442d0 <printk>
   41592:	215c      	movs	r1, #92	; 0x5c
   41594:	4804      	ldr	r0, [pc, #16]	; (415a8 <z_clock_announce+0x16c>)
   41596:	f003 f8b5 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   4159a:	4802      	ldr	r0, [pc, #8]	; (415a4 <z_clock_announce+0x168>)
   4159c:	f7ff fbcc 	bl	40d38 <z_spin_lock_set_owner>
	return k;
   415a0:	e774      	b.n	4148c <z_clock_announce+0x50>
   415a2:	bf00      	nop
   415a4:	2002616c 	.word	0x2002616c
   415a8:	0004be5f 	.word	0x0004be5f
   415ac:	0004be85 	.word	0x0004be85
   415b0:	0004b33b 	.word	0x0004b33b
   415b4:	0004be9a 	.word	0x0004be9a
   415b8:	20024970 	.word	0x20024970
   415bc:	20026168 	.word	0x20026168
   415c0:	0004beb2 	.word	0x0004beb2
   415c4:	0004bec9 	.word	0x0004bec9
   415c8:	200208d4 	.word	0x200208d4

000415cc <z_tick_get>:

int64_t z_tick_get(void)
{
   415cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   415d0:	f04f 0320 	mov.w	r3, #32
   415d4:	f3ef 8611 	mrs	r6, BASEPRI
   415d8:	f383 8811 	msr	BASEPRI, r3
   415dc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   415e0:	481b      	ldr	r0, [pc, #108]	; (41650 <z_tick_get+0x84>)
   415e2:	f7ff fb8b 	bl	40cfc <z_spin_lock_valid>
   415e6:	b968      	cbnz	r0, 41604 <z_tick_get+0x38>
   415e8:	235c      	movs	r3, #92	; 0x5c
   415ea:	4a1a      	ldr	r2, [pc, #104]	; (41654 <z_tick_get+0x88>)
   415ec:	491a      	ldr	r1, [pc, #104]	; (41658 <z_tick_get+0x8c>)
   415ee:	481b      	ldr	r0, [pc, #108]	; (4165c <z_tick_get+0x90>)
   415f0:	f002 fe6e 	bl	442d0 <printk>
   415f4:	4916      	ldr	r1, [pc, #88]	; (41650 <z_tick_get+0x84>)
   415f6:	481a      	ldr	r0, [pc, #104]	; (41660 <z_tick_get+0x94>)
   415f8:	f002 fe6a 	bl	442d0 <printk>
   415fc:	215c      	movs	r1, #92	; 0x5c
   415fe:	4815      	ldr	r0, [pc, #84]	; (41654 <z_tick_get+0x88>)
   41600:	f003 f880 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41604:	4812      	ldr	r0, [pc, #72]	; (41650 <z_tick_get+0x84>)
   41606:	f7ff fb97 	bl	40d38 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   4160a:	f7e5 fdef 	bl	271ec <z_clock_elapsed>
   4160e:	4b15      	ldr	r3, [pc, #84]	; (41664 <z_tick_get+0x98>)
   41610:	e9d3 4500 	ldrd	r4, r5, [r3]
   41614:	1827      	adds	r7, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41616:	480e      	ldr	r0, [pc, #56]	; (41650 <z_tick_get+0x84>)
   41618:	f145 0800 	adc.w	r8, r5, #0
   4161c:	f7ff fb7c 	bl	40d18 <z_spin_unlock_valid>
   41620:	b968      	cbnz	r0, 4163e <z_tick_get+0x72>
   41622:	2384      	movs	r3, #132	; 0x84
   41624:	4a0b      	ldr	r2, [pc, #44]	; (41654 <z_tick_get+0x88>)
   41626:	4910      	ldr	r1, [pc, #64]	; (41668 <z_tick_get+0x9c>)
   41628:	480c      	ldr	r0, [pc, #48]	; (4165c <z_tick_get+0x90>)
   4162a:	f002 fe51 	bl	442d0 <printk>
   4162e:	4908      	ldr	r1, [pc, #32]	; (41650 <z_tick_get+0x84>)
   41630:	480e      	ldr	r0, [pc, #56]	; (4166c <z_tick_get+0xa0>)
   41632:	f002 fe4d 	bl	442d0 <printk>
   41636:	2184      	movs	r1, #132	; 0x84
   41638:	4806      	ldr	r0, [pc, #24]	; (41654 <z_tick_get+0x88>)
   4163a:	f003 f863 	bl	44704 <assert_post_action>
	__asm__ volatile(
   4163e:	f386 8811 	msr	BASEPRI, r6
   41642:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   41646:	4638      	mov	r0, r7
   41648:	4641      	mov	r1, r8
   4164a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   4164e:	bf00      	nop
   41650:	2002616c 	.word	0x2002616c
   41654:	0004be5f 	.word	0x0004be5f
   41658:	0004be85 	.word	0x0004be85
   4165c:	0004b33b 	.word	0x0004b33b
   41660:	0004be9a 	.word	0x0004be9a
   41664:	20024970 	.word	0x20024970
   41668:	0004beb2 	.word	0x0004beb2
   4166c:	0004bec9 	.word	0x0004bec9

00041670 <k_poll_poller_cb>:

	return events_registered;
}

static int k_poll_poller_cb(struct k_poll_event *event, uint32_t state)
{
   41670:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   41672:	6883      	ldr	r3, [r0, #8]
{
   41674:	460d      	mov	r5, r1
	struct k_thread *thread = event->poller->thread;
   41676:	685c      	ldr	r4, [r3, #4]

	__ASSERT(thread != NULL, "poller should have a thread\n");
   41678:	b964      	cbnz	r4, 41694 <k_poll_poller_cb+0x24>
   4167a:	4919      	ldr	r1, [pc, #100]	; (416e0 <k_poll_poller_cb+0x70>)
   4167c:	23df      	movs	r3, #223	; 0xdf
   4167e:	4a19      	ldr	r2, [pc, #100]	; (416e4 <k_poll_poller_cb+0x74>)
   41680:	4819      	ldr	r0, [pc, #100]	; (416e8 <k_poll_poller_cb+0x78>)
   41682:	f002 fe25 	bl	442d0 <printk>
   41686:	4819      	ldr	r0, [pc, #100]	; (416ec <k_poll_poller_cb+0x7c>)
   41688:	f002 fe22 	bl	442d0 <printk>
   4168c:	21df      	movs	r1, #223	; 0xdf
   4168e:	4815      	ldr	r0, [pc, #84]	; (416e4 <k_poll_poller_cb+0x74>)
   41690:	f003 f838 	bl	44704 <assert_post_action>

	if (!z_is_thread_pending(thread)) {
   41694:	7b63      	ldrb	r3, [r4, #13]
   41696:	079a      	lsls	r2, r3, #30
   41698:	d401      	bmi.n	4169e <k_poll_poller_cb+0x2e>
		return 0;
   4169a:	2000      	movs	r0, #0
	}

	z_ready_thread(thread);

	return 0;
}
   4169c:	bd38      	pop	{r3, r4, r5, pc}
	if (z_is_thread_timeout_expired(thread)) {
   4169e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   416a2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   416a6:	f06f 0001 	mvn.w	r0, #1
   416aa:	428b      	cmp	r3, r1
   416ac:	bf08      	it	eq
   416ae:	4282      	cmpeq	r2, r0
   416b0:	d012      	beq.n	416d8 <k_poll_poller_cb+0x68>
	z_unpend_thread(thread);
   416b2:	4620      	mov	r0, r4
   416b4:	f7fe f934 	bl	3f920 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   416b8:	2d08      	cmp	r5, #8
   416ba:	bf0c      	ite	eq
   416bc:	f06f 0303 	mvneq.w	r3, #3
   416c0:	2300      	movne	r3, #0
   416c2:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   416c4:	7b63      	ldrb	r3, [r4, #13]
   416c6:	06db      	lsls	r3, r3, #27
   416c8:	d1e7      	bne.n	4169a <k_poll_poller_cb+0x2a>
	if (!z_is_thread_ready(thread)) {
   416ca:	69a5      	ldr	r5, [r4, #24]
   416cc:	2d00      	cmp	r5, #0
   416ce:	d1e4      	bne.n	4169a <k_poll_poller_cb+0x2a>
	z_ready_thread(thread);
   416d0:	4620      	mov	r0, r4
   416d2:	f7fe fa5b 	bl	3fb8c <z_ready_thread>
	return 0;
   416d6:	e7e0      	b.n	4169a <k_poll_poller_cb+0x2a>
		return -EAGAIN;
   416d8:	f06f 000a 	mvn.w	r0, #10
   416dc:	e7de      	b.n	4169c <k_poll_poller_cb+0x2c>
   416de:	bf00      	nop
   416e0:	000529fe 	.word	0x000529fe
   416e4:	000529dd 	.word	0x000529dd
   416e8:	0004b33b 	.word	0x0004b33b
   416ec:	00052a14 	.word	0x00052a14

000416f0 <clear_event_registrations>:
{
   416f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   416f4:	2414      	movs	r4, #20
   416f6:	4680      	mov	r8, r0
   416f8:	4617      	mov	r7, r2
	while (num_events--) {
   416fa:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   416fe:	4d48      	ldr	r5, [pc, #288]	; (41820 <clear_event_registrations+0x130>)
   41700:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4185c <clear_event_registrations+0x16c>
   41704:	4e47      	ldr	r6, [pc, #284]	; (41824 <clear_event_registrations+0x134>)
	while (num_events--) {
   41706:	4544      	cmp	r4, r8
   41708:	d101      	bne.n	4170e <clear_event_registrations+0x1e>
}
   4170a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   4170e:	2300      	movs	r3, #0
   41710:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   41714:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   41718:	f003 030f 	and.w	r3, r3, #15
   4171c:	2b04      	cmp	r3, #4
   4171e:	d83d      	bhi.n	4179c <clear_event_registrations+0xac>
   41720:	e8df f003 	tbb	[pc, r3]
   41724:	3c032d49 	.word	0x3c032d49
   41728:	1e          	.byte	0x1e
   41729:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   4172a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   4172e:	b963      	cbnz	r3, 4174a <clear_event_registrations+0x5a>
   41730:	493d      	ldr	r1, [pc, #244]	; (41828 <clear_event_registrations+0x138>)
   41732:	2395      	movs	r3, #149	; 0x95
   41734:	462a      	mov	r2, r5
   41736:	4630      	mov	r0, r6
   41738:	f002 fdca 	bl	442d0 <printk>
   4173c:	483b      	ldr	r0, [pc, #236]	; (4182c <clear_event_registrations+0x13c>)
   4173e:	f002 fdc7 	bl	442d0 <printk>
   41742:	2195      	movs	r1, #149	; 0x95
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   41744:	4628      	mov	r0, r5
   41746:	f002 ffdd 	bl	44704 <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   4174a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   4174e:	b393      	cbz	r3, 417b6 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   41750:	f854 2c10 	ldr.w	r2, [r4, #-16]
   41754:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   41756:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41758:	2300      	movs	r3, #0
	node->prev = NULL;
   4175a:	e944 3305 	strd	r3, r3, [r4, #-20]
   4175e:	e02a      	b.n	417b6 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   41760:	f854 3c04 	ldr.w	r3, [r4, #-4]
   41764:	2b00      	cmp	r3, #0
   41766:	d1f0      	bne.n	4174a <clear_event_registrations+0x5a>
   41768:	4931      	ldr	r1, [pc, #196]	; (41830 <clear_event_registrations+0x140>)
   4176a:	2399      	movs	r3, #153	; 0x99
   4176c:	462a      	mov	r2, r5
   4176e:	4630      	mov	r0, r6
   41770:	f002 fdae 	bl	442d0 <printk>
   41774:	482f      	ldr	r0, [pc, #188]	; (41834 <clear_event_registrations+0x144>)
   41776:	f002 fdab 	bl	442d0 <printk>
   4177a:	2199      	movs	r1, #153	; 0x99
   4177c:	e7e2      	b.n	41744 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   4177e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   41782:	2b00      	cmp	r3, #0
   41784:	d1e1      	bne.n	4174a <clear_event_registrations+0x5a>
   41786:	492c      	ldr	r1, [pc, #176]	; (41838 <clear_event_registrations+0x148>)
   41788:	239d      	movs	r3, #157	; 0x9d
   4178a:	462a      	mov	r2, r5
   4178c:	4630      	mov	r0, r6
   4178e:	f002 fd9f 	bl	442d0 <printk>
   41792:	482a      	ldr	r0, [pc, #168]	; (4183c <clear_event_registrations+0x14c>)
   41794:	f002 fd9c 	bl	442d0 <printk>
   41798:	219d      	movs	r1, #157	; 0x9d
   4179a:	e7d3      	b.n	41744 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   4179c:	4649      	mov	r1, r9
   4179e:	23a4      	movs	r3, #164	; 0xa4
   417a0:	462a      	mov	r2, r5
   417a2:	4630      	mov	r0, r6
   417a4:	f002 fd94 	bl	442d0 <printk>
   417a8:	4825      	ldr	r0, [pc, #148]	; (41840 <clear_event_registrations+0x150>)
   417aa:	f002 fd91 	bl	442d0 <printk>
   417ae:	21a4      	movs	r1, #164	; 0xa4
   417b0:	4628      	mov	r0, r5
   417b2:	f002 ffa7 	bl	44704 <assert_post_action>
   417b6:	4823      	ldr	r0, [pc, #140]	; (41844 <clear_event_registrations+0x154>)
   417b8:	f7ff faae 	bl	40d18 <z_spin_unlock_valid>
   417bc:	b968      	cbnz	r0, 417da <clear_event_registrations+0xea>
   417be:	2384      	movs	r3, #132	; 0x84
   417c0:	4a21      	ldr	r2, [pc, #132]	; (41848 <clear_event_registrations+0x158>)
   417c2:	4922      	ldr	r1, [pc, #136]	; (4184c <clear_event_registrations+0x15c>)
   417c4:	4630      	mov	r0, r6
   417c6:	f002 fd83 	bl	442d0 <printk>
   417ca:	491e      	ldr	r1, [pc, #120]	; (41844 <clear_event_registrations+0x154>)
   417cc:	4820      	ldr	r0, [pc, #128]	; (41850 <clear_event_registrations+0x160>)
   417ce:	f002 fd7f 	bl	442d0 <printk>
   417d2:	2184      	movs	r1, #132	; 0x84
   417d4:	481c      	ldr	r0, [pc, #112]	; (41848 <clear_event_registrations+0x158>)
   417d6:	f002 ff95 	bl	44704 <assert_post_action>
   417da:	f387 8811 	msr	BASEPRI, r7
   417de:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   417e2:	f04f 0320 	mov.w	r3, #32
   417e6:	f3ef 8711 	mrs	r7, BASEPRI
   417ea:	f383 8811 	msr	BASEPRI, r3
   417ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   417f2:	4814      	ldr	r0, [pc, #80]	; (41844 <clear_event_registrations+0x154>)
   417f4:	f7ff fa82 	bl	40cfc <z_spin_lock_valid>
   417f8:	b968      	cbnz	r0, 41816 <clear_event_registrations+0x126>
   417fa:	235c      	movs	r3, #92	; 0x5c
   417fc:	4a12      	ldr	r2, [pc, #72]	; (41848 <clear_event_registrations+0x158>)
   417fe:	4915      	ldr	r1, [pc, #84]	; (41854 <clear_event_registrations+0x164>)
   41800:	4630      	mov	r0, r6
   41802:	f002 fd65 	bl	442d0 <printk>
   41806:	490f      	ldr	r1, [pc, #60]	; (41844 <clear_event_registrations+0x154>)
   41808:	4813      	ldr	r0, [pc, #76]	; (41858 <clear_event_registrations+0x168>)
   4180a:	f002 fd61 	bl	442d0 <printk>
   4180e:	215c      	movs	r1, #92	; 0x5c
   41810:	480d      	ldr	r0, [pc, #52]	; (41848 <clear_event_registrations+0x158>)
   41812:	f002 ff77 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41816:	480b      	ldr	r0, [pc, #44]	; (41844 <clear_event_registrations+0x154>)
   41818:	f7ff fa8e 	bl	40d38 <z_spin_lock_set_owner>
	return k;
   4181c:	3c14      	subs	r4, #20
   4181e:	e772      	b.n	41706 <clear_event_registrations+0x16>
   41820:	000529dd 	.word	0x000529dd
   41824:	0004b33b 	.word	0x0004b33b
   41828:	00052937 	.word	0x00052937
   4182c:	00052951 	.word	0x00052951
   41830:	00052966 	.word	0x00052966
   41834:	00052982 	.word	0x00052982
   41838:	00052993 	.word	0x00052993
   4183c:	000529b0 	.word	0x000529b0
   41840:	000529c7 	.word	0x000529c7
   41844:	20026170 	.word	0x20026170
   41848:	0004be5f 	.word	0x0004be5f
   4184c:	0004beb2 	.word	0x0004beb2
   41850:	0004bec9 	.word	0x0004bec9
   41854:	0004be85 	.word	0x0004be85
   41858:	0004be9a 	.word	0x0004be9a
   4185c:	00052672 	.word	0x00052672

00041860 <register_events>:
{
   41860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   41864:	2700      	movs	r7, #0
{
   41866:	468a      	mov	sl, r1
   41868:	4615      	mov	r5, r2
   4186a:	4604      	mov	r4, r0
	int events_registered = 0;
   4186c:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   4186e:	4e69      	ldr	r6, [pc, #420]	; (41a14 <register_events+0x1b4>)
   41870:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 41a54 <register_events+0x1f4>
{
   41874:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   41876:	4557      	cmp	r7, sl
   41878:	db03      	blt.n	41882 <register_events+0x22>
}
   4187a:	4648      	mov	r0, r9
   4187c:	b003      	add	sp, #12
   4187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41882:	f04f 0320 	mov.w	r3, #32
   41886:	f3ef 8b11 	mrs	fp, BASEPRI
   4188a:	f383 8811 	msr	BASEPRI, r3
   4188e:	f3bf 8f6f 	isb	sy
   41892:	4630      	mov	r0, r6
   41894:	f7ff fa32 	bl	40cfc <z_spin_lock_valid>
   41898:	b968      	cbnz	r0, 418b6 <register_events+0x56>
   4189a:	235c      	movs	r3, #92	; 0x5c
   4189c:	4642      	mov	r2, r8
   4189e:	495e      	ldr	r1, [pc, #376]	; (41a18 <register_events+0x1b8>)
   418a0:	485e      	ldr	r0, [pc, #376]	; (41a1c <register_events+0x1bc>)
   418a2:	f002 fd15 	bl	442d0 <printk>
   418a6:	4631      	mov	r1, r6
   418a8:	485d      	ldr	r0, [pc, #372]	; (41a20 <register_events+0x1c0>)
   418aa:	f002 fd11 	bl	442d0 <printk>
   418ae:	215c      	movs	r1, #92	; 0x5c
   418b0:	4640      	mov	r0, r8
   418b2:	f002 ff27 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   418b6:	4630      	mov	r0, r6
   418b8:	f7ff fa3e 	bl	40d38 <z_spin_lock_set_owner>
	switch (event->type) {
   418bc:	7b63      	ldrb	r3, [r4, #13]
   418be:	f003 030f 	and.w	r3, r3, #15
   418c2:	2b04      	cmp	r3, #4
   418c4:	d844      	bhi.n	41950 <register_events+0xf0>
   418c6:	e8df f003 	tbb	[pc, r3]
   418ca:	3d2d      	.short	0x3d2d
   418cc:	4303      	.short	0x4303
   418ce:	2a          	.byte	0x2a
   418cf:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0) {
   418d0:	6923      	ldr	r3, [r4, #16]
   418d2:	689b      	ldr	r3, [r3, #8]
   418d4:	b333      	cbz	r3, 41924 <register_events+0xc4>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   418d6:	2202      	movs	r2, #2
	event->poller = NULL;
   418d8:	2100      	movs	r1, #0
	event->state |= state;
   418da:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   418dc:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   418de:	f3c3 3004 	ubfx	r0, r3, #12, #5
   418e2:	4302      	orrs	r2, r0
   418e4:	f362 3310 	bfi	r3, r2, #12, #5
   418e8:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   418ea:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   418ec:	4630      	mov	r0, r6
   418ee:	f7ff fa13 	bl	40d18 <z_spin_unlock_valid>
   418f2:	b968      	cbnz	r0, 41910 <register_events+0xb0>
   418f4:	2384      	movs	r3, #132	; 0x84
   418f6:	4642      	mov	r2, r8
   418f8:	494a      	ldr	r1, [pc, #296]	; (41a24 <register_events+0x1c4>)
   418fa:	4848      	ldr	r0, [pc, #288]	; (41a1c <register_events+0x1bc>)
   418fc:	f002 fce8 	bl	442d0 <printk>
   41900:	4631      	mov	r1, r6
   41902:	4849      	ldr	r0, [pc, #292]	; (41a28 <register_events+0x1c8>)
   41904:	f002 fce4 	bl	442d0 <printk>
   41908:	2184      	movs	r1, #132	; 0x84
   4190a:	4640      	mov	r0, r8
   4190c:	f002 fefa 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41910:	f38b 8811 	msr	BASEPRI, fp
   41914:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   41918:	3701      	adds	r7, #1
   4191a:	3414      	adds	r4, #20
   4191c:	e7ab      	b.n	41876 <register_events+0x16>
		if (!k_queue_is_empty(event->queue)) {
   4191e:	6923      	ldr	r3, [r4, #16]
   41920:	681b      	ldr	r3, [r3, #0]
   41922:	bb33      	cbnz	r3, 41972 <register_events+0x112>
		} else if (!just_check && poller->is_polling) {
   41924:	9b01      	ldr	r3, [sp, #4]
   41926:	2b00      	cmp	r3, #0
   41928:	d1e0      	bne.n	418ec <register_events+0x8c>
   4192a:	782b      	ldrb	r3, [r5, #0]
   4192c:	2b00      	cmp	r3, #0
   4192e:	d0dd      	beq.n	418ec <register_events+0x8c>
	switch (event->type) {
   41930:	7b63      	ldrb	r3, [r4, #13]
   41932:	f003 030f 	and.w	r3, r3, #15
   41936:	2b04      	cmp	r3, #4
   41938:	d85d      	bhi.n	419f6 <register_events+0x196>
   4193a:	e8df f003 	tbb	[pc, r3]
   4193e:	4931      	.short	0x4931
   41940:	5c1c      	.short	0x5c1c
   41942:	35          	.byte	0x35
   41943:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   41944:	6923      	ldr	r3, [r4, #16]
   41946:	689b      	ldr	r3, [r3, #8]
   41948:	2b00      	cmp	r3, #0
   4194a:	d0eb      	beq.n	41924 <register_events+0xc4>
			*state = K_POLL_STATE_SIGNALED;
   4194c:	2201      	movs	r2, #1
   4194e:	e7c3      	b.n	418d8 <register_events+0x78>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   41950:	234f      	movs	r3, #79	; 0x4f
   41952:	4a36      	ldr	r2, [pc, #216]	; (41a2c <register_events+0x1cc>)
   41954:	4936      	ldr	r1, [pc, #216]	; (41a30 <register_events+0x1d0>)
   41956:	4831      	ldr	r0, [pc, #196]	; (41a1c <register_events+0x1bc>)
   41958:	f002 fcba 	bl	442d0 <printk>
   4195c:	7b61      	ldrb	r1, [r4, #13]
   4195e:	4835      	ldr	r0, [pc, #212]	; (41a34 <register_events+0x1d4>)
   41960:	f001 010f 	and.w	r1, r1, #15
   41964:	f002 fcb4 	bl	442d0 <printk>
   41968:	214f      	movs	r1, #79	; 0x4f
   4196a:	4830      	ldr	r0, [pc, #192]	; (41a2c <register_events+0x1cc>)
   4196c:	f002 feca 	bl	44704 <assert_post_action>
		break;
   41970:	e7d8      	b.n	41924 <register_events+0xc4>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   41972:	2204      	movs	r2, #4
   41974:	e7b0      	b.n	418d8 <register_events+0x78>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   41976:	6923      	ldr	r3, [r4, #16]
   41978:	b963      	cbnz	r3, 41994 <register_events+0x134>
   4197a:	492f      	ldr	r1, [pc, #188]	; (41a38 <register_events+0x1d8>)
   4197c:	2374      	movs	r3, #116	; 0x74
   4197e:	4a2b      	ldr	r2, [pc, #172]	; (41a2c <register_events+0x1cc>)
   41980:	4826      	ldr	r0, [pc, #152]	; (41a1c <register_events+0x1bc>)
   41982:	f002 fca5 	bl	442d0 <printk>
   41986:	482d      	ldr	r0, [pc, #180]	; (41a3c <register_events+0x1dc>)
   41988:	f002 fca2 	bl	442d0 <printk>
   4198c:	2174      	movs	r1, #116	; 0x74
   4198e:	4827      	ldr	r0, [pc, #156]	; (41a2c <register_events+0x1cc>)
   41990:	f002 feb8 	bl	44704 <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   41994:	462a      	mov	r2, r5
   41996:	4621      	mov	r1, r4
   41998:	6920      	ldr	r0, [r4, #16]
   4199a:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   4199c:	f006 fb65 	bl	4806a <add_event>
	event->poller = poller;
   419a0:	60a5      	str	r5, [r4, #8]
				events_registered += 1;
   419a2:	f109 0901 	add.w	r9, r9, #1
   419a6:	e7a1      	b.n	418ec <register_events+0x8c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   419a8:	6923      	ldr	r3, [r4, #16]
   419aa:	b963      	cbnz	r3, 419c6 <register_events+0x166>
   419ac:	4924      	ldr	r1, [pc, #144]	; (41a40 <register_events+0x1e0>)
   419ae:	2378      	movs	r3, #120	; 0x78
   419b0:	4a1e      	ldr	r2, [pc, #120]	; (41a2c <register_events+0x1cc>)
   419b2:	481a      	ldr	r0, [pc, #104]	; (41a1c <register_events+0x1bc>)
   419b4:	f002 fc8c 	bl	442d0 <printk>
   419b8:	4822      	ldr	r0, [pc, #136]	; (41a44 <register_events+0x1e4>)
   419ba:	f002 fc89 	bl	442d0 <printk>
   419be:	2178      	movs	r1, #120	; 0x78
   419c0:	481a      	ldr	r0, [pc, #104]	; (41a2c <register_events+0x1cc>)
   419c2:	f002 fe9f 	bl	44704 <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   419c6:	6920      	ldr	r0, [r4, #16]
   419c8:	462a      	mov	r2, r5
   419ca:	4621      	mov	r1, r4
   419cc:	3014      	adds	r0, #20
   419ce:	e7e5      	b.n	4199c <register_events+0x13c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   419d0:	6923      	ldr	r3, [r4, #16]
   419d2:	b963      	cbnz	r3, 419ee <register_events+0x18e>
   419d4:	491c      	ldr	r1, [pc, #112]	; (41a48 <register_events+0x1e8>)
   419d6:	237c      	movs	r3, #124	; 0x7c
   419d8:	4a14      	ldr	r2, [pc, #80]	; (41a2c <register_events+0x1cc>)
   419da:	4810      	ldr	r0, [pc, #64]	; (41a1c <register_events+0x1bc>)
   419dc:	f002 fc78 	bl	442d0 <printk>
   419e0:	481a      	ldr	r0, [pc, #104]	; (41a4c <register_events+0x1ec>)
   419e2:	f002 fc75 	bl	442d0 <printk>
   419e6:	217c      	movs	r1, #124	; 0x7c
   419e8:	4810      	ldr	r0, [pc, #64]	; (41a2c <register_events+0x1cc>)
   419ea:	f002 fe8b 	bl	44704 <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   419ee:	462a      	mov	r2, r5
   419f0:	4621      	mov	r1, r4
   419f2:	6920      	ldr	r0, [r4, #16]
   419f4:	e7d2      	b.n	4199c <register_events+0x13c>
		__ASSERT(false, "invalid event type\n");
   419f6:	2383      	movs	r3, #131	; 0x83
   419f8:	4a0c      	ldr	r2, [pc, #48]	; (41a2c <register_events+0x1cc>)
   419fa:	490d      	ldr	r1, [pc, #52]	; (41a30 <register_events+0x1d0>)
   419fc:	4807      	ldr	r0, [pc, #28]	; (41a1c <register_events+0x1bc>)
   419fe:	f002 fc67 	bl	442d0 <printk>
   41a02:	4813      	ldr	r0, [pc, #76]	; (41a50 <register_events+0x1f0>)
   41a04:	f002 fc64 	bl	442d0 <printk>
   41a08:	2183      	movs	r1, #131	; 0x83
   41a0a:	4808      	ldr	r0, [pc, #32]	; (41a2c <register_events+0x1cc>)
   41a0c:	f002 fe7a 	bl	44704 <assert_post_action>
		break;
   41a10:	e7c6      	b.n	419a0 <register_events+0x140>
   41a12:	bf00      	nop
   41a14:	20026170 	.word	0x20026170
   41a18:	0004be85 	.word	0x0004be85
   41a1c:	0004b33b 	.word	0x0004b33b
   41a20:	0004be9a 	.word	0x0004be9a
   41a24:	0004beb2 	.word	0x0004beb2
   41a28:	0004bec9 	.word	0x0004bec9
   41a2c:	000529dd 	.word	0x000529dd
   41a30:	00052672 	.word	0x00052672
   41a34:	00052a33 	.word	0x00052a33
   41a38:	00052937 	.word	0x00052937
   41a3c:	00052951 	.word	0x00052951
   41a40:	00052966 	.word	0x00052966
   41a44:	00052982 	.word	0x00052982
   41a48:	00052993 	.word	0x00052993
   41a4c:	000529b0 	.word	0x000529b0
   41a50:	000529c7 	.word	0x000529c7
   41a54:	0004be5f 	.word	0x0004be5f

00041a58 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   41a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41a5c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   41a5e:	2301      	movs	r3, #1
{
   41a60:	b088      	sub	sp, #32
	struct _poller poller = { .is_polling = true,
   41a62:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   41a66:	4b73      	ldr	r3, [pc, #460]	; (41c34 <z_impl_k_poll+0x1dc>)
{
   41a68:	4604      	mov	r4, r0
	struct _poller poller = { .is_polling = true,
   41a6a:	689b      	ldr	r3, [r3, #8]
{
   41a6c:	460d      	mov	r5, r1
	struct _poller poller = { .is_polling = true,
   41a6e:	9306      	str	r3, [sp, #24]
   41a70:	4b71      	ldr	r3, [pc, #452]	; (41c38 <z_impl_k_poll+0x1e0>)
{
   41a72:	4616      	mov	r6, r2
	struct _poller poller = { .is_polling = true,
   41a74:	9307      	str	r3, [sp, #28]
   41a76:	f3ef 8305 	mrs	r3, IPSR
				  .cb         = k_poll_poller_cb };

	__ASSERT(!arch_is_in_isr(), "");
   41a7a:	b163      	cbz	r3, 41a96 <z_impl_k_poll+0x3e>
   41a7c:	496f      	ldr	r1, [pc, #444]	; (41c3c <z_impl_k_poll+0x1e4>)
   41a7e:	23ff      	movs	r3, #255	; 0xff
   41a80:	4a6f      	ldr	r2, [pc, #444]	; (41c40 <z_impl_k_poll+0x1e8>)
   41a82:	4870      	ldr	r0, [pc, #448]	; (41c44 <z_impl_k_poll+0x1ec>)
   41a84:	f002 fc24 	bl	442d0 <printk>
   41a88:	486f      	ldr	r0, [pc, #444]	; (41c48 <z_impl_k_poll+0x1f0>)
   41a8a:	f002 fc21 	bl	442d0 <printk>
   41a8e:	21ff      	movs	r1, #255	; 0xff
   41a90:	486b      	ldr	r0, [pc, #428]	; (41c40 <z_impl_k_poll+0x1e8>)
   41a92:	f002 fe37 	bl	44704 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   41a96:	b974      	cbnz	r4, 41ab6 <z_impl_k_poll+0x5e>
   41a98:	496c      	ldr	r1, [pc, #432]	; (41c4c <z_impl_k_poll+0x1f4>)
   41a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
   41a9e:	4a68      	ldr	r2, [pc, #416]	; (41c40 <z_impl_k_poll+0x1e8>)
   41aa0:	4868      	ldr	r0, [pc, #416]	; (41c44 <z_impl_k_poll+0x1ec>)
   41aa2:	f002 fc15 	bl	442d0 <printk>
   41aa6:	486a      	ldr	r0, [pc, #424]	; (41c50 <z_impl_k_poll+0x1f8>)
   41aa8:	f002 fc12 	bl	442d0 <printk>
   41aac:	f44f 7180 	mov.w	r1, #256	; 0x100
   41ab0:	4863      	ldr	r0, [pc, #396]	; (41c40 <z_impl_k_poll+0x1e8>)
   41ab2:	f002 fe27 	bl	44704 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   41ab6:	2d00      	cmp	r5, #0
   41ab8:	da0e      	bge.n	41ad8 <z_impl_k_poll+0x80>
   41aba:	4966      	ldr	r1, [pc, #408]	; (41c54 <z_impl_k_poll+0x1fc>)
   41abc:	f240 1301 	movw	r3, #257	; 0x101
   41ac0:	4a5f      	ldr	r2, [pc, #380]	; (41c40 <z_impl_k_poll+0x1e8>)
   41ac2:	4860      	ldr	r0, [pc, #384]	; (41c44 <z_impl_k_poll+0x1ec>)
   41ac4:	f002 fc04 	bl	442d0 <printk>
   41ac8:	4863      	ldr	r0, [pc, #396]	; (41c58 <z_impl_k_poll+0x200>)
   41aca:	f002 fc01 	bl	442d0 <printk>
   41ace:	f240 1101 	movw	r1, #257	; 0x101
   41ad2:	485b      	ldr	r0, [pc, #364]	; (41c40 <z_impl_k_poll+0x1e8>)
   41ad4:	f002 fe16 	bl	44704 <assert_post_action>

	events_registered = register_events(events, num_events, &poller,
   41ad8:	ea56 0307 	orrs.w	r3, r6, r7
   41adc:	bf0c      	ite	eq
   41ade:	2301      	moveq	r3, #1
   41ae0:	2300      	movne	r3, #0
   41ae2:	aa05      	add	r2, sp, #20
   41ae4:	4629      	mov	r1, r5
   41ae6:	4620      	mov	r0, r4
   41ae8:	f7ff feba 	bl	41860 <register_events>
   41aec:	4680      	mov	r8, r0
	__asm__ volatile(
   41aee:	f04f 0320 	mov.w	r3, #32
   41af2:	f3ef 8511 	mrs	r5, BASEPRI
   41af6:	f383 8811 	msr	BASEPRI, r3
   41afa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41afe:	4857      	ldr	r0, [pc, #348]	; (41c5c <z_impl_k_poll+0x204>)
   41b00:	f7ff f8fc 	bl	40cfc <z_spin_lock_valid>
   41b04:	b968      	cbnz	r0, 41b22 <z_impl_k_poll+0xca>
   41b06:	235c      	movs	r3, #92	; 0x5c
   41b08:	4a55      	ldr	r2, [pc, #340]	; (41c60 <z_impl_k_poll+0x208>)
   41b0a:	4956      	ldr	r1, [pc, #344]	; (41c64 <z_impl_k_poll+0x20c>)
   41b0c:	484d      	ldr	r0, [pc, #308]	; (41c44 <z_impl_k_poll+0x1ec>)
   41b0e:	f002 fbdf 	bl	442d0 <printk>
   41b12:	4952      	ldr	r1, [pc, #328]	; (41c5c <z_impl_k_poll+0x204>)
   41b14:	4854      	ldr	r0, [pc, #336]	; (41c68 <z_impl_k_poll+0x210>)
   41b16:	f002 fbdb 	bl	442d0 <printk>
   41b1a:	215c      	movs	r1, #92	; 0x5c
   41b1c:	4850      	ldr	r0, [pc, #320]	; (41c60 <z_impl_k_poll+0x208>)
   41b1e:	f002 fdf1 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41b22:	484e      	ldr	r0, [pc, #312]	; (41c5c <z_impl_k_poll+0x204>)
   41b24:	f7ff f908 	bl	40d38 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   41b28:	f89d 3014 	ldrb.w	r3, [sp, #20]
   41b2c:	b9fb      	cbnz	r3, 41b6e <z_impl_k_poll+0x116>
		clear_event_registrations(events, events_registered, key);
   41b2e:	4620      	mov	r0, r4
   41b30:	462a      	mov	r2, r5
   41b32:	4641      	mov	r1, r8
   41b34:	f7ff fddc 	bl	416f0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41b38:	4848      	ldr	r0, [pc, #288]	; (41c5c <z_impl_k_poll+0x204>)
   41b3a:	f7ff f8ed 	bl	40d18 <z_spin_unlock_valid>
   41b3e:	b968      	cbnz	r0, 41b5c <z_impl_k_poll+0x104>
   41b40:	2384      	movs	r3, #132	; 0x84
   41b42:	4a47      	ldr	r2, [pc, #284]	; (41c60 <z_impl_k_poll+0x208>)
   41b44:	4949      	ldr	r1, [pc, #292]	; (41c6c <z_impl_k_poll+0x214>)
   41b46:	483f      	ldr	r0, [pc, #252]	; (41c44 <z_impl_k_poll+0x1ec>)
   41b48:	f002 fbc2 	bl	442d0 <printk>
   41b4c:	4943      	ldr	r1, [pc, #268]	; (41c5c <z_impl_k_poll+0x204>)
   41b4e:	4848      	ldr	r0, [pc, #288]	; (41c70 <z_impl_k_poll+0x218>)
   41b50:	f002 fbbe 	bl	442d0 <printk>
   41b54:	2184      	movs	r1, #132	; 0x84
   41b56:	4842      	ldr	r0, [pc, #264]	; (41c60 <z_impl_k_poll+0x208>)
   41b58:	f002 fdd4 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41b5c:	f385 8811 	msr	BASEPRI, r5
   41b60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		return 0;
   41b64:	2500      	movs	r5, #0
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   41b66:	4628      	mov	r0, r5
   41b68:	b008      	add	sp, #32
   41b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	poller.is_polling = false;
   41b6e:	2300      	movs	r3, #0
   41b70:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41b74:	ea56 0307 	orrs.w	r3, r6, r7
   41b78:	d118      	bne.n	41bac <z_impl_k_poll+0x154>
   41b7a:	4838      	ldr	r0, [pc, #224]	; (41c5c <z_impl_k_poll+0x204>)
   41b7c:	f7ff f8cc 	bl	40d18 <z_spin_unlock_valid>
   41b80:	b968      	cbnz	r0, 41b9e <z_impl_k_poll+0x146>
   41b82:	2384      	movs	r3, #132	; 0x84
   41b84:	4a36      	ldr	r2, [pc, #216]	; (41c60 <z_impl_k_poll+0x208>)
   41b86:	4939      	ldr	r1, [pc, #228]	; (41c6c <z_impl_k_poll+0x214>)
   41b88:	482e      	ldr	r0, [pc, #184]	; (41c44 <z_impl_k_poll+0x1ec>)
   41b8a:	f002 fba1 	bl	442d0 <printk>
   41b8e:	4933      	ldr	r1, [pc, #204]	; (41c5c <z_impl_k_poll+0x204>)
   41b90:	4837      	ldr	r0, [pc, #220]	; (41c70 <z_impl_k_poll+0x218>)
   41b92:	f002 fb9d 	bl	442d0 <printk>
   41b96:	2184      	movs	r1, #132	; 0x84
   41b98:	4831      	ldr	r0, [pc, #196]	; (41c60 <z_impl_k_poll+0x208>)
   41b9a:	f002 fdb3 	bl	44704 <assert_post_action>
   41b9e:	f385 8811 	msr	BASEPRI, r5
   41ba2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   41ba6:	f06f 050a 	mvn.w	r5, #10
   41baa:	e7dc      	b.n	41b66 <z_impl_k_poll+0x10e>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   41bac:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   41bae:	4629      	mov	r1, r5
   41bb0:	e9cd 6700 	strd	r6, r7, [sp]
   41bb4:	4829      	ldr	r0, [pc, #164]	; (41c5c <z_impl_k_poll+0x204>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   41bb6:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   41bba:	f7fe fbab 	bl	40314 <z_pend_curr>
   41bbe:	4605      	mov	r5, r0
	__asm__ volatile(
   41bc0:	f04f 0320 	mov.w	r3, #32
   41bc4:	f3ef 8611 	mrs	r6, BASEPRI
   41bc8:	f383 8811 	msr	BASEPRI, r3
   41bcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41bd0:	4822      	ldr	r0, [pc, #136]	; (41c5c <z_impl_k_poll+0x204>)
   41bd2:	f7ff f893 	bl	40cfc <z_spin_lock_valid>
   41bd6:	b968      	cbnz	r0, 41bf4 <z_impl_k_poll+0x19c>
   41bd8:	235c      	movs	r3, #92	; 0x5c
   41bda:	4a21      	ldr	r2, [pc, #132]	; (41c60 <z_impl_k_poll+0x208>)
   41bdc:	4921      	ldr	r1, [pc, #132]	; (41c64 <z_impl_k_poll+0x20c>)
   41bde:	4819      	ldr	r0, [pc, #100]	; (41c44 <z_impl_k_poll+0x1ec>)
   41be0:	f002 fb76 	bl	442d0 <printk>
   41be4:	491d      	ldr	r1, [pc, #116]	; (41c5c <z_impl_k_poll+0x204>)
   41be6:	4820      	ldr	r0, [pc, #128]	; (41c68 <z_impl_k_poll+0x210>)
   41be8:	f002 fb72 	bl	442d0 <printk>
   41bec:	215c      	movs	r1, #92	; 0x5c
   41bee:	481c      	ldr	r0, [pc, #112]	; (41c60 <z_impl_k_poll+0x208>)
   41bf0:	f002 fd88 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41bf4:	4819      	ldr	r0, [pc, #100]	; (41c5c <z_impl_k_poll+0x204>)
   41bf6:	f7ff f89f 	bl	40d38 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   41bfa:	4620      	mov	r0, r4
   41bfc:	4632      	mov	r2, r6
   41bfe:	4641      	mov	r1, r8
   41c00:	f7ff fd76 	bl	416f0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41c04:	4815      	ldr	r0, [pc, #84]	; (41c5c <z_impl_k_poll+0x204>)
   41c06:	f7ff f887 	bl	40d18 <z_spin_unlock_valid>
   41c0a:	b968      	cbnz	r0, 41c28 <z_impl_k_poll+0x1d0>
   41c0c:	2384      	movs	r3, #132	; 0x84
   41c0e:	4a14      	ldr	r2, [pc, #80]	; (41c60 <z_impl_k_poll+0x208>)
   41c10:	4916      	ldr	r1, [pc, #88]	; (41c6c <z_impl_k_poll+0x214>)
   41c12:	480c      	ldr	r0, [pc, #48]	; (41c44 <z_impl_k_poll+0x1ec>)
   41c14:	f002 fb5c 	bl	442d0 <printk>
   41c18:	4910      	ldr	r1, [pc, #64]	; (41c5c <z_impl_k_poll+0x204>)
   41c1a:	4815      	ldr	r0, [pc, #84]	; (41c70 <z_impl_k_poll+0x218>)
   41c1c:	f002 fb58 	bl	442d0 <printk>
   41c20:	2184      	movs	r1, #132	; 0x84
   41c22:	480f      	ldr	r0, [pc, #60]	; (41c60 <z_impl_k_poll+0x208>)
   41c24:	f002 fd6e 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41c28:	f386 8811 	msr	BASEPRI, r6
   41c2c:	f3bf 8f6f 	isb	sy
	return swap_rc;
   41c30:	e799      	b.n	41b66 <z_impl_k_poll+0x10e>
   41c32:	bf00      	nop
   41c34:	2002611c 	.word	0x2002611c
   41c38:	00041671 	.word	0x00041671
   41c3c:	0005259b 	.word	0x0005259b
   41c40:	000529dd 	.word	0x000529dd
   41c44:	0004b33b 	.word	0x0004b33b
   41c48:	0004c55b 	.word	0x0004c55b
   41c4c:	00052a50 	.word	0x00052a50
   41c50:	00052a66 	.word	0x00052a66
   41c54:	00052a75 	.word	0x00052a75
   41c58:	00052a85 	.word	0x00052a85
   41c5c:	20026170 	.word	0x20026170
   41c60:	0004be5f 	.word	0x0004be5f
   41c64:	0004be85 	.word	0x0004be85
   41c68:	0004be9a 	.word	0x0004be9a
   41c6c:	0004beb2 	.word	0x0004beb2
   41c70:	0004bec9 	.word	0x0004bec9

00041c74 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   41c74:	b570      	push	{r4, r5, r6, lr}
   41c76:	4604      	mov	r4, r0
   41c78:	460e      	mov	r6, r1
	__asm__ volatile(
   41c7a:	f04f 0320 	mov.w	r3, #32
   41c7e:	f3ef 8511 	mrs	r5, BASEPRI
   41c82:	f383 8811 	msr	BASEPRI, r3
   41c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   41c8a:	4821      	ldr	r0, [pc, #132]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41c8c:	f7ff f836 	bl	40cfc <z_spin_lock_valid>
   41c90:	b968      	cbnz	r0, 41cae <z_impl_k_poll_signal_raise+0x3a>
   41c92:	235c      	movs	r3, #92	; 0x5c
   41c94:	4a1f      	ldr	r2, [pc, #124]	; (41d14 <z_impl_k_poll_signal_raise+0xa0>)
   41c96:	4920      	ldr	r1, [pc, #128]	; (41d18 <z_impl_k_poll_signal_raise+0xa4>)
   41c98:	4820      	ldr	r0, [pc, #128]	; (41d1c <z_impl_k_poll_signal_raise+0xa8>)
   41c9a:	f002 fb19 	bl	442d0 <printk>
   41c9e:	491c      	ldr	r1, [pc, #112]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41ca0:	481f      	ldr	r0, [pc, #124]	; (41d20 <z_impl_k_poll_signal_raise+0xac>)
   41ca2:	f002 fb15 	bl	442d0 <printk>
   41ca6:	215c      	movs	r1, #92	; 0x5c
   41ca8:	481a      	ldr	r0, [pc, #104]	; (41d14 <z_impl_k_poll_signal_raise+0xa0>)
   41caa:	f002 fd2b 	bl	44704 <assert_post_action>
	z_spin_lock_set_owner(l);
   41cae:	4818      	ldr	r0, [pc, #96]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41cb0:	f7ff f842 	bl	40d38 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
	signal->signaled = 1U;
   41cb4:	2101      	movs	r1, #1
	return list->head == list;
   41cb6:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   41cb8:	60e6      	str	r6, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   41cba:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   41cbc:	60a1      	str	r1, [r4, #8]
   41cbe:	d117      	bne.n	41cf0 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   41cc0:	4813      	ldr	r0, [pc, #76]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41cc2:	f7ff f829 	bl	40d18 <z_spin_unlock_valid>
   41cc6:	b968      	cbnz	r0, 41ce4 <z_impl_k_poll_signal_raise+0x70>
   41cc8:	2384      	movs	r3, #132	; 0x84
   41cca:	4a12      	ldr	r2, [pc, #72]	; (41d14 <z_impl_k_poll_signal_raise+0xa0>)
   41ccc:	4915      	ldr	r1, [pc, #84]	; (41d24 <z_impl_k_poll_signal_raise+0xb0>)
   41cce:	4813      	ldr	r0, [pc, #76]	; (41d1c <z_impl_k_poll_signal_raise+0xa8>)
   41cd0:	f002 fafe 	bl	442d0 <printk>
   41cd4:	490e      	ldr	r1, [pc, #56]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41cd6:	4814      	ldr	r0, [pc, #80]	; (41d28 <z_impl_k_poll_signal_raise+0xb4>)
   41cd8:	f002 fafa 	bl	442d0 <printk>
   41cdc:	2184      	movs	r1, #132	; 0x84
   41cde:	480d      	ldr	r0, [pc, #52]	; (41d14 <z_impl_k_poll_signal_raise+0xa0>)
   41ce0:	f002 fd10 	bl	44704 <assert_post_action>
	__asm__ volatile(
   41ce4:	f385 8811 	msr	BASEPRI, r5
   41ce8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   41cec:	2400      	movs	r4, #0
   41cee:	e00d      	b.n	41d0c <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   41cf0:	e9d0 3200 	ldrd	r3, r2, [r0]
   41cf4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   41cf6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41cf8:	2300      	movs	r3, #0
	node->prev = NULL;
   41cfa:	e9c0 3300 	strd	r3, r3, [r0]
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41cfe:	f006 f999 	bl	48034 <signal_poll_event>

	z_reschedule(&lock, key);
   41d02:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   41d04:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   41d06:	4802      	ldr	r0, [pc, #8]	; (41d10 <z_impl_k_poll_signal_raise+0x9c>)
   41d08:	f7fd fd20 	bl	3f74c <z_reschedule>
	return rc;
}
   41d0c:	4620      	mov	r0, r4
   41d0e:	bd70      	pop	{r4, r5, r6, pc}
   41d10:	20026170 	.word	0x20026170
   41d14:	0004be5f 	.word	0x0004be5f
   41d18:	0004be85 	.word	0x0004be85
   41d1c:	0004b33b 	.word	0x0004b33b
   41d20:	0004be9a 	.word	0x0004be9a
   41d24:	0004beb2 	.word	0x0004beb2
   41d28:	0004bec9 	.word	0x0004bec9

00041d2c <k_malloc>:
		  CONFIG_HEAP_MEM_POOL_SIZE, 1, 4);
#define _HEAP_MEM_POOL (&_heap_mem_pool)

void *k_malloc(size_t size)
{
	return k_mem_pool_malloc(_HEAP_MEM_POOL, size);
   41d2c:	4601      	mov	r1, r0
   41d2e:	4801      	ldr	r0, [pc, #4]	; (41d34 <k_malloc+0x8>)
   41d30:	f006 b9d7 	b.w	480e2 <k_mem_pool_malloc>
   41d34:	200208dc 	.word	0x200208dc

00041d38 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   41d38:	b510      	push	{r4, lr}
   41d3a:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   41d3c:	f006 f8da 	bl	47ef4 <k_is_in_isr>
   41d40:	b948      	cbnz	r0, 41d56 <z_thread_malloc+0x1e>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   41d42:	4b06      	ldr	r3, [pc, #24]	; (41d5c <z_thread_malloc+0x24>)
   41d44:	689b      	ldr	r3, [r3, #8]
   41d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (pool) {
   41d48:	b13b      	cbz	r3, 41d5a <z_thread_malloc+0x22>
		ret = k_mem_pool_malloc(pool, size);
   41d4a:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   41d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   41d50:	4618      	mov	r0, r3
   41d52:	f006 b9c6 	b.w	480e2 <k_mem_pool_malloc>
		pool = _HEAP_MEM_POOL;
   41d56:	4b02      	ldr	r3, [pc, #8]	; (41d60 <z_thread_malloc+0x28>)
   41d58:	e7f7      	b.n	41d4a <z_thread_malloc+0x12>
}
   41d5a:	bd10      	pop	{r4, pc}
   41d5c:	2002611c 	.word	0x2002611c
   41d60:	200208dc 	.word	0x200208dc

00041d64 <fabs>:
   41d64:	ec51 0b10 	vmov	r0, r1, d0
   41d68:	ee10 2a10 	vmov	r2, s0
   41d6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   41d70:	ec43 2b10 	vmov	d0, r2, r3
   41d74:	4770      	bx	lr
   41d76:	bf00      	nop

00041d78 <__assert_func>:
   41d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   41d7a:	461c      	mov	r4, r3
   41d7c:	4b09      	ldr	r3, [pc, #36]	; (41da4 <__assert_func+0x2c>)
   41d7e:	4605      	mov	r5, r0
   41d80:	681b      	ldr	r3, [r3, #0]
   41d82:	68d8      	ldr	r0, [r3, #12]
   41d84:	b152      	cbz	r2, 41d9c <__assert_func+0x24>
   41d86:	4b08      	ldr	r3, [pc, #32]	; (41da8 <__assert_func+0x30>)
   41d88:	9100      	str	r1, [sp, #0]
   41d8a:	4908      	ldr	r1, [pc, #32]	; (41dac <__assert_func+0x34>)
   41d8c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   41d90:	462b      	mov	r3, r5
   41d92:	4622      	mov	r2, r4
   41d94:	f000 f80e 	bl	41db4 <fiprintf>
   41d98:	f006 fc83 	bl	486a2 <abort>
   41d9c:	4b04      	ldr	r3, [pc, #16]	; (41db0 <__assert_func+0x38>)
   41d9e:	461a      	mov	r2, r3
   41da0:	e7f2      	b.n	41d88 <__assert_func+0x10>
   41da2:	bf00      	nop
   41da4:	200208e0 	.word	0x200208e0
   41da8:	00052a92 	.word	0x00052a92
   41dac:	00052a9f 	.word	0x00052a9f
   41db0:	0004c55d 	.word	0x0004c55d

00041db4 <fiprintf>:
   41db4:	b40e      	push	{r1, r2, r3}
   41db6:	b503      	push	{r0, r1, lr}
   41db8:	ab03      	add	r3, sp, #12
   41dba:	4601      	mov	r1, r0
   41dbc:	4805      	ldr	r0, [pc, #20]	; (41dd4 <fiprintf+0x20>)
   41dbe:	f853 2b04 	ldr.w	r2, [r3], #4
   41dc2:	6800      	ldr	r0, [r0, #0]
   41dc4:	9301      	str	r3, [sp, #4]
   41dc6:	f000 f8bf 	bl	41f48 <_vfiprintf_r>
   41dca:	b002      	add	sp, #8
   41dcc:	f85d eb04 	ldr.w	lr, [sp], #4
   41dd0:	b003      	add	sp, #12
   41dd2:	4770      	bx	lr
   41dd4:	200208e0 	.word	0x200208e0

00041dd8 <malloc>:
   41dd8:	4b02      	ldr	r3, [pc, #8]	; (41de4 <malloc+0xc>)
   41dda:	4601      	mov	r1, r0
   41ddc:	6818      	ldr	r0, [r3, #0]
   41dde:	f000 b859 	b.w	41e94 <_malloc_r>
   41de2:	bf00      	nop
   41de4:	200208e0 	.word	0x200208e0

00041de8 <free>:
   41de8:	4b02      	ldr	r3, [pc, #8]	; (41df4 <free+0xc>)
   41dea:	4601      	mov	r1, r0
   41dec:	6818      	ldr	r0, [r3, #0]
   41dee:	f000 b803 	b.w	41df8 <_free_r>
   41df2:	bf00      	nop
   41df4:	200208e0 	.word	0x200208e0

00041df8 <_free_r>:
   41df8:	b538      	push	{r3, r4, r5, lr}
   41dfa:	4605      	mov	r5, r0
   41dfc:	2900      	cmp	r1, #0
   41dfe:	d045      	beq.n	41e8c <_free_r+0x94>
   41e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
   41e04:	1f0c      	subs	r4, r1, #4
   41e06:	2b00      	cmp	r3, #0
   41e08:	bfb8      	it	lt
   41e0a:	18e4      	addlt	r4, r4, r3
   41e0c:	f001 fbe4 	bl	435d8 <__malloc_lock>
   41e10:	4a1f      	ldr	r2, [pc, #124]	; (41e90 <_free_r+0x98>)
   41e12:	6813      	ldr	r3, [r2, #0]
   41e14:	4610      	mov	r0, r2
   41e16:	b933      	cbnz	r3, 41e26 <_free_r+0x2e>
   41e18:	6063      	str	r3, [r4, #4]
   41e1a:	6014      	str	r4, [r2, #0]
   41e1c:	4628      	mov	r0, r5
   41e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   41e22:	f001 bbdf 	b.w	435e4 <__malloc_unlock>
   41e26:	42a3      	cmp	r3, r4
   41e28:	d90c      	bls.n	41e44 <_free_r+0x4c>
   41e2a:	6821      	ldr	r1, [r4, #0]
   41e2c:	1862      	adds	r2, r4, r1
   41e2e:	4293      	cmp	r3, r2
   41e30:	bf02      	ittt	eq
   41e32:	681a      	ldreq	r2, [r3, #0]
   41e34:	685b      	ldreq	r3, [r3, #4]
   41e36:	1852      	addeq	r2, r2, r1
   41e38:	6063      	str	r3, [r4, #4]
   41e3a:	bf08      	it	eq
   41e3c:	6022      	streq	r2, [r4, #0]
   41e3e:	6004      	str	r4, [r0, #0]
   41e40:	e7ec      	b.n	41e1c <_free_r+0x24>
   41e42:	4613      	mov	r3, r2
   41e44:	685a      	ldr	r2, [r3, #4]
   41e46:	b10a      	cbz	r2, 41e4c <_free_r+0x54>
   41e48:	42a2      	cmp	r2, r4
   41e4a:	d9fa      	bls.n	41e42 <_free_r+0x4a>
   41e4c:	6819      	ldr	r1, [r3, #0]
   41e4e:	1858      	adds	r0, r3, r1
   41e50:	42a0      	cmp	r0, r4
   41e52:	d10b      	bne.n	41e6c <_free_r+0x74>
   41e54:	6820      	ldr	r0, [r4, #0]
   41e56:	4401      	add	r1, r0
   41e58:	1858      	adds	r0, r3, r1
   41e5a:	6019      	str	r1, [r3, #0]
   41e5c:	4282      	cmp	r2, r0
   41e5e:	d1dd      	bne.n	41e1c <_free_r+0x24>
   41e60:	6810      	ldr	r0, [r2, #0]
   41e62:	6852      	ldr	r2, [r2, #4]
   41e64:	4401      	add	r1, r0
   41e66:	605a      	str	r2, [r3, #4]
   41e68:	6019      	str	r1, [r3, #0]
   41e6a:	e7d7      	b.n	41e1c <_free_r+0x24>
   41e6c:	d902      	bls.n	41e74 <_free_r+0x7c>
   41e6e:	230c      	movs	r3, #12
   41e70:	602b      	str	r3, [r5, #0]
   41e72:	e7d3      	b.n	41e1c <_free_r+0x24>
   41e74:	6820      	ldr	r0, [r4, #0]
   41e76:	1821      	adds	r1, r4, r0
   41e78:	428a      	cmp	r2, r1
   41e7a:	bf02      	ittt	eq
   41e7c:	6811      	ldreq	r1, [r2, #0]
   41e7e:	6852      	ldreq	r2, [r2, #4]
   41e80:	1809      	addeq	r1, r1, r0
   41e82:	6062      	str	r2, [r4, #4]
   41e84:	bf08      	it	eq
   41e86:	6021      	streq	r1, [r4, #0]
   41e88:	605c      	str	r4, [r3, #4]
   41e8a:	e7c7      	b.n	41e1c <_free_r+0x24>
   41e8c:	bd38      	pop	{r3, r4, r5, pc}
   41e8e:	bf00      	nop
   41e90:	2002a9b0 	.word	0x2002a9b0

00041e94 <_malloc_r>:
   41e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41e96:	1ccd      	adds	r5, r1, #3
   41e98:	4606      	mov	r6, r0
   41e9a:	f025 0503 	bic.w	r5, r5, #3
   41e9e:	3508      	adds	r5, #8
   41ea0:	2d0c      	cmp	r5, #12
   41ea2:	bf38      	it	cc
   41ea4:	250c      	movcc	r5, #12
   41ea6:	2d00      	cmp	r5, #0
   41ea8:	db01      	blt.n	41eae <_malloc_r+0x1a>
   41eaa:	42a9      	cmp	r1, r5
   41eac:	d903      	bls.n	41eb6 <_malloc_r+0x22>
   41eae:	230c      	movs	r3, #12
   41eb0:	6033      	str	r3, [r6, #0]
   41eb2:	2000      	movs	r0, #0
   41eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   41eb6:	f001 fb8f 	bl	435d8 <__malloc_lock>
   41eba:	4921      	ldr	r1, [pc, #132]	; (41f40 <_malloc_r+0xac>)
   41ebc:	680a      	ldr	r2, [r1, #0]
   41ebe:	4614      	mov	r4, r2
   41ec0:	b99c      	cbnz	r4, 41eea <_malloc_r+0x56>
   41ec2:	4f20      	ldr	r7, [pc, #128]	; (41f44 <_malloc_r+0xb0>)
   41ec4:	683b      	ldr	r3, [r7, #0]
   41ec6:	b923      	cbnz	r3, 41ed2 <_malloc_r+0x3e>
   41ec8:	4621      	mov	r1, r4
   41eca:	4630      	mov	r0, r6
   41ecc:	f000 fd02 	bl	428d4 <_sbrk_r>
   41ed0:	6038      	str	r0, [r7, #0]
   41ed2:	4629      	mov	r1, r5
   41ed4:	4630      	mov	r0, r6
   41ed6:	f000 fcfd 	bl	428d4 <_sbrk_r>
   41eda:	1c43      	adds	r3, r0, #1
   41edc:	d123      	bne.n	41f26 <_malloc_r+0x92>
   41ede:	230c      	movs	r3, #12
   41ee0:	4630      	mov	r0, r6
   41ee2:	6033      	str	r3, [r6, #0]
   41ee4:	f001 fb7e 	bl	435e4 <__malloc_unlock>
   41ee8:	e7e3      	b.n	41eb2 <_malloc_r+0x1e>
   41eea:	6823      	ldr	r3, [r4, #0]
   41eec:	1b5b      	subs	r3, r3, r5
   41eee:	d417      	bmi.n	41f20 <_malloc_r+0x8c>
   41ef0:	2b0b      	cmp	r3, #11
   41ef2:	d903      	bls.n	41efc <_malloc_r+0x68>
   41ef4:	6023      	str	r3, [r4, #0]
   41ef6:	441c      	add	r4, r3
   41ef8:	6025      	str	r5, [r4, #0]
   41efa:	e004      	b.n	41f06 <_malloc_r+0x72>
   41efc:	6863      	ldr	r3, [r4, #4]
   41efe:	42a2      	cmp	r2, r4
   41f00:	bf0c      	ite	eq
   41f02:	600b      	streq	r3, [r1, #0]
   41f04:	6053      	strne	r3, [r2, #4]
   41f06:	4630      	mov	r0, r6
   41f08:	f001 fb6c 	bl	435e4 <__malloc_unlock>
   41f0c:	f104 000b 	add.w	r0, r4, #11
   41f10:	1d23      	adds	r3, r4, #4
   41f12:	f020 0007 	bic.w	r0, r0, #7
   41f16:	1ac2      	subs	r2, r0, r3
   41f18:	d0cc      	beq.n	41eb4 <_malloc_r+0x20>
   41f1a:	1a1b      	subs	r3, r3, r0
   41f1c:	50a3      	str	r3, [r4, r2]
   41f1e:	e7c9      	b.n	41eb4 <_malloc_r+0x20>
   41f20:	4622      	mov	r2, r4
   41f22:	6864      	ldr	r4, [r4, #4]
   41f24:	e7cc      	b.n	41ec0 <_malloc_r+0x2c>
   41f26:	1cc4      	adds	r4, r0, #3
   41f28:	f024 0403 	bic.w	r4, r4, #3
   41f2c:	42a0      	cmp	r0, r4
   41f2e:	d0e3      	beq.n	41ef8 <_malloc_r+0x64>
   41f30:	1a21      	subs	r1, r4, r0
   41f32:	4630      	mov	r0, r6
   41f34:	f000 fcce 	bl	428d4 <_sbrk_r>
   41f38:	3001      	adds	r0, #1
   41f3a:	d1dd      	bne.n	41ef8 <_malloc_r+0x64>
   41f3c:	e7cf      	b.n	41ede <_malloc_r+0x4a>
   41f3e:	bf00      	nop
   41f40:	2002a9b0 	.word	0x2002a9b0
   41f44:	2002a9b4 	.word	0x2002a9b4

00041f48 <_vfiprintf_r>:
   41f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41f4c:	460d      	mov	r5, r1
   41f4e:	b09d      	sub	sp, #116	; 0x74
   41f50:	4614      	mov	r4, r2
   41f52:	461e      	mov	r6, r3
   41f54:	4607      	mov	r7, r0
   41f56:	b118      	cbz	r0, 41f60 <_vfiprintf_r+0x18>
   41f58:	6983      	ldr	r3, [r0, #24]
   41f5a:	b90b      	cbnz	r3, 41f60 <_vfiprintf_r+0x18>
   41f5c:	f001 f846 	bl	42fec <__sinit>
   41f60:	4b85      	ldr	r3, [pc, #532]	; (42178 <_vfiprintf_r+0x230>)
   41f62:	429d      	cmp	r5, r3
   41f64:	d11b      	bne.n	41f9e <_vfiprintf_r+0x56>
   41f66:	687d      	ldr	r5, [r7, #4]
   41f68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   41f6a:	07d9      	lsls	r1, r3, #31
   41f6c:	d405      	bmi.n	41f7a <_vfiprintf_r+0x32>
   41f6e:	89ab      	ldrh	r3, [r5, #12]
   41f70:	059a      	lsls	r2, r3, #22
   41f72:	d402      	bmi.n	41f7a <_vfiprintf_r+0x32>
   41f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
   41f76:	f006 fd63 	bl	48a40 <__retarget_lock_acquire_recursive>
   41f7a:	89ab      	ldrh	r3, [r5, #12]
   41f7c:	071b      	lsls	r3, r3, #28
   41f7e:	d501      	bpl.n	41f84 <_vfiprintf_r+0x3c>
   41f80:	692b      	ldr	r3, [r5, #16]
   41f82:	b9eb      	cbnz	r3, 41fc0 <_vfiprintf_r+0x78>
   41f84:	4629      	mov	r1, r5
   41f86:	4638      	mov	r0, r7
   41f88:	f000 feb0 	bl	42cec <__swsetup_r>
   41f8c:	b1c0      	cbz	r0, 41fc0 <_vfiprintf_r+0x78>
   41f8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   41f90:	07d8      	lsls	r0, r3, #31
   41f92:	d50e      	bpl.n	41fb2 <_vfiprintf_r+0x6a>
   41f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   41f98:	b01d      	add	sp, #116	; 0x74
   41f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41f9e:	4b77      	ldr	r3, [pc, #476]	; (4217c <_vfiprintf_r+0x234>)
   41fa0:	429d      	cmp	r5, r3
   41fa2:	d101      	bne.n	41fa8 <_vfiprintf_r+0x60>
   41fa4:	68bd      	ldr	r5, [r7, #8]
   41fa6:	e7df      	b.n	41f68 <_vfiprintf_r+0x20>
   41fa8:	4b75      	ldr	r3, [pc, #468]	; (42180 <_vfiprintf_r+0x238>)
   41faa:	429d      	cmp	r5, r3
   41fac:	bf08      	it	eq
   41fae:	68fd      	ldreq	r5, [r7, #12]
   41fb0:	e7da      	b.n	41f68 <_vfiprintf_r+0x20>
   41fb2:	89ab      	ldrh	r3, [r5, #12]
   41fb4:	0599      	lsls	r1, r3, #22
   41fb6:	d4ed      	bmi.n	41f94 <_vfiprintf_r+0x4c>
   41fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   41fba:	f006 fd42 	bl	48a42 <__retarget_lock_release_recursive>
   41fbe:	e7e9      	b.n	41f94 <_vfiprintf_r+0x4c>
   41fc0:	2300      	movs	r3, #0
   41fc2:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 42184 <_vfiprintf_r+0x23c>
   41fc6:	f04f 0a01 	mov.w	sl, #1
   41fca:	9603      	str	r6, [sp, #12]
   41fcc:	9309      	str	r3, [sp, #36]	; 0x24
   41fce:	2320      	movs	r3, #32
   41fd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   41fd4:	2330      	movs	r3, #48	; 0x30
   41fd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   41fda:	4623      	mov	r3, r4
   41fdc:	461e      	mov	r6, r3
   41fde:	f813 2b01 	ldrb.w	r2, [r3], #1
   41fe2:	b10a      	cbz	r2, 41fe8 <_vfiprintf_r+0xa0>
   41fe4:	2a25      	cmp	r2, #37	; 0x25
   41fe6:	d1f9      	bne.n	41fdc <_vfiprintf_r+0x94>
   41fe8:	ebb6 0b04 	subs.w	fp, r6, r4
   41fec:	d00b      	beq.n	42006 <_vfiprintf_r+0xbe>
   41fee:	465b      	mov	r3, fp
   41ff0:	4622      	mov	r2, r4
   41ff2:	4629      	mov	r1, r5
   41ff4:	4638      	mov	r0, r7
   41ff6:	f006 f906 	bl	48206 <__sfputs_r>
   41ffa:	3001      	adds	r0, #1
   41ffc:	f000 80a3 	beq.w	42146 <_vfiprintf_r+0x1fe>
   42000:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42002:	445b      	add	r3, fp
   42004:	9309      	str	r3, [sp, #36]	; 0x24
   42006:	7833      	ldrb	r3, [r6, #0]
   42008:	2b00      	cmp	r3, #0
   4200a:	f000 809c 	beq.w	42146 <_vfiprintf_r+0x1fe>
   4200e:	2300      	movs	r3, #0
   42010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   42014:	3601      	adds	r6, #1
   42016:	9304      	str	r3, [sp, #16]
   42018:	9307      	str	r3, [sp, #28]
   4201a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   4201e:	931a      	str	r3, [sp, #104]	; 0x68
   42020:	e9cd 2305 	strd	r2, r3, [sp, #20]
   42024:	4634      	mov	r4, r6
   42026:	2205      	movs	r2, #5
   42028:	4856      	ldr	r0, [pc, #344]	; (42184 <_vfiprintf_r+0x23c>)
   4202a:	f814 1b01 	ldrb.w	r1, [r4], #1
   4202e:	f006 f88f 	bl	48150 <memchr>
   42032:	9b04      	ldr	r3, [sp, #16]
   42034:	b9c0      	cbnz	r0, 42068 <_vfiprintf_r+0x120>
   42036:	06da      	lsls	r2, r3, #27
   42038:	bf44      	itt	mi
   4203a:	2220      	movmi	r2, #32
   4203c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   42040:	0718      	lsls	r0, r3, #28
   42042:	bf44      	itt	mi
   42044:	222b      	movmi	r2, #43	; 0x2b
   42046:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   4204a:	7832      	ldrb	r2, [r6, #0]
   4204c:	2a2a      	cmp	r2, #42	; 0x2a
   4204e:	d013      	beq.n	42078 <_vfiprintf_r+0x130>
   42050:	4634      	mov	r4, r6
   42052:	9a07      	ldr	r2, [sp, #28]
   42054:	2000      	movs	r0, #0
   42056:	260a      	movs	r6, #10
   42058:	4621      	mov	r1, r4
   4205a:	f811 3b01 	ldrb.w	r3, [r1], #1
   4205e:	3b30      	subs	r3, #48	; 0x30
   42060:	2b09      	cmp	r3, #9
   42062:	d94b      	bls.n	420fc <_vfiprintf_r+0x1b4>
   42064:	b970      	cbnz	r0, 42084 <_vfiprintf_r+0x13c>
   42066:	e014      	b.n	42092 <_vfiprintf_r+0x14a>
   42068:	eba0 0009 	sub.w	r0, r0, r9
   4206c:	4626      	mov	r6, r4
   4206e:	fa0a f000 	lsl.w	r0, sl, r0
   42072:	4318      	orrs	r0, r3
   42074:	9004      	str	r0, [sp, #16]
   42076:	e7d5      	b.n	42024 <_vfiprintf_r+0xdc>
   42078:	9a03      	ldr	r2, [sp, #12]
   4207a:	1d11      	adds	r1, r2, #4
   4207c:	6812      	ldr	r2, [r2, #0]
   4207e:	2a00      	cmp	r2, #0
   42080:	9103      	str	r1, [sp, #12]
   42082:	db01      	blt.n	42088 <_vfiprintf_r+0x140>
   42084:	9207      	str	r2, [sp, #28]
   42086:	e004      	b.n	42092 <_vfiprintf_r+0x14a>
   42088:	4252      	negs	r2, r2
   4208a:	f043 0302 	orr.w	r3, r3, #2
   4208e:	9207      	str	r2, [sp, #28]
   42090:	9304      	str	r3, [sp, #16]
   42092:	7823      	ldrb	r3, [r4, #0]
   42094:	2b2e      	cmp	r3, #46	; 0x2e
   42096:	d10c      	bne.n	420b2 <_vfiprintf_r+0x16a>
   42098:	7863      	ldrb	r3, [r4, #1]
   4209a:	2b2a      	cmp	r3, #42	; 0x2a
   4209c:	d133      	bne.n	42106 <_vfiprintf_r+0x1be>
   4209e:	9b03      	ldr	r3, [sp, #12]
   420a0:	3402      	adds	r4, #2
   420a2:	1d1a      	adds	r2, r3, #4
   420a4:	681b      	ldr	r3, [r3, #0]
   420a6:	2b00      	cmp	r3, #0
   420a8:	9203      	str	r2, [sp, #12]
   420aa:	bfb8      	it	lt
   420ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   420b0:	9305      	str	r3, [sp, #20]
   420b2:	4e35      	ldr	r6, [pc, #212]	; (42188 <_vfiprintf_r+0x240>)
   420b4:	2203      	movs	r2, #3
   420b6:	7821      	ldrb	r1, [r4, #0]
   420b8:	4630      	mov	r0, r6
   420ba:	f006 f849 	bl	48150 <memchr>
   420be:	b138      	cbz	r0, 420d0 <_vfiprintf_r+0x188>
   420c0:	2340      	movs	r3, #64	; 0x40
   420c2:	1b80      	subs	r0, r0, r6
   420c4:	3401      	adds	r4, #1
   420c6:	fa03 f000 	lsl.w	r0, r3, r0
   420ca:	9b04      	ldr	r3, [sp, #16]
   420cc:	4303      	orrs	r3, r0
   420ce:	9304      	str	r3, [sp, #16]
   420d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   420d4:	2206      	movs	r2, #6
   420d6:	482d      	ldr	r0, [pc, #180]	; (4218c <_vfiprintf_r+0x244>)
   420d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   420dc:	f006 f838 	bl	48150 <memchr>
   420e0:	2800      	cmp	r0, #0
   420e2:	d03f      	beq.n	42164 <_vfiprintf_r+0x21c>
   420e4:	4b2a      	ldr	r3, [pc, #168]	; (42190 <_vfiprintf_r+0x248>)
   420e6:	bb13      	cbnz	r3, 4212e <_vfiprintf_r+0x1e6>
   420e8:	9b03      	ldr	r3, [sp, #12]
   420ea:	3307      	adds	r3, #7
   420ec:	f023 0307 	bic.w	r3, r3, #7
   420f0:	3308      	adds	r3, #8
   420f2:	9303      	str	r3, [sp, #12]
   420f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   420f6:	4443      	add	r3, r8
   420f8:	9309      	str	r3, [sp, #36]	; 0x24
   420fa:	e76e      	b.n	41fda <_vfiprintf_r+0x92>
   420fc:	fb06 3202 	mla	r2, r6, r2, r3
   42100:	2001      	movs	r0, #1
   42102:	460c      	mov	r4, r1
   42104:	e7a8      	b.n	42058 <_vfiprintf_r+0x110>
   42106:	2300      	movs	r3, #0
   42108:	3401      	adds	r4, #1
   4210a:	260a      	movs	r6, #10
   4210c:	4619      	mov	r1, r3
   4210e:	9305      	str	r3, [sp, #20]
   42110:	4620      	mov	r0, r4
   42112:	f810 2b01 	ldrb.w	r2, [r0], #1
   42116:	3a30      	subs	r2, #48	; 0x30
   42118:	2a09      	cmp	r2, #9
   4211a:	d903      	bls.n	42124 <_vfiprintf_r+0x1dc>
   4211c:	2b00      	cmp	r3, #0
   4211e:	d0c8      	beq.n	420b2 <_vfiprintf_r+0x16a>
   42120:	9105      	str	r1, [sp, #20]
   42122:	e7c6      	b.n	420b2 <_vfiprintf_r+0x16a>
   42124:	fb06 2101 	mla	r1, r6, r1, r2
   42128:	2301      	movs	r3, #1
   4212a:	4604      	mov	r4, r0
   4212c:	e7f0      	b.n	42110 <_vfiprintf_r+0x1c8>
   4212e:	ab03      	add	r3, sp, #12
   42130:	462a      	mov	r2, r5
   42132:	a904      	add	r1, sp, #16
   42134:	4638      	mov	r0, r7
   42136:	9300      	str	r3, [sp, #0]
   42138:	4b16      	ldr	r3, [pc, #88]	; (42194 <_vfiprintf_r+0x24c>)
   4213a:	f000 f82d 	bl	42198 <_printf_float>
   4213e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   42142:	4680      	mov	r8, r0
   42144:	d1d6      	bne.n	420f4 <_vfiprintf_r+0x1ac>
   42146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   42148:	07d9      	lsls	r1, r3, #31
   4214a:	d405      	bmi.n	42158 <_vfiprintf_r+0x210>
   4214c:	89ab      	ldrh	r3, [r5, #12]
   4214e:	059a      	lsls	r2, r3, #22
   42150:	d402      	bmi.n	42158 <_vfiprintf_r+0x210>
   42152:	6da8      	ldr	r0, [r5, #88]	; 0x58
   42154:	f006 fc75 	bl	48a42 <__retarget_lock_release_recursive>
   42158:	89ab      	ldrh	r3, [r5, #12]
   4215a:	065b      	lsls	r3, r3, #25
   4215c:	f53f af1a 	bmi.w	41f94 <_vfiprintf_r+0x4c>
   42160:	9809      	ldr	r0, [sp, #36]	; 0x24
   42162:	e719      	b.n	41f98 <_vfiprintf_r+0x50>
   42164:	ab03      	add	r3, sp, #12
   42166:	462a      	mov	r2, r5
   42168:	a904      	add	r1, sp, #16
   4216a:	4638      	mov	r0, r7
   4216c:	9300      	str	r3, [sp, #0]
   4216e:	4b09      	ldr	r3, [pc, #36]	; (42194 <_vfiprintf_r+0x24c>)
   42170:	f000 fa3c 	bl	425ec <_printf_i>
   42174:	e7e3      	b.n	4213e <_vfiprintf_r+0x1f6>
   42176:	bf00      	nop
   42178:	0004a99c 	.word	0x0004a99c
   4217c:	0004a9bc 	.word	0x0004a9bc
   42180:	0004a97c 	.word	0x0004a97c
   42184:	00052bcf 	.word	0x00052bcf
   42188:	00052bd5 	.word	0x00052bd5
   4218c:	00052bd9 	.word	0x00052bd9
   42190:	00042199 	.word	0x00042199
   42194:	00048207 	.word	0x00048207

00042198 <_printf_float>:
   42198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4219c:	b08d      	sub	sp, #52	; 0x34
   4219e:	460c      	mov	r4, r1
   421a0:	4616      	mov	r6, r2
   421a2:	461f      	mov	r7, r3
   421a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   421a8:	4605      	mov	r5, r0
   421aa:	f001 f9bf 	bl	4352c <_localeconv_r>
   421ae:	6803      	ldr	r3, [r0, #0]
   421b0:	4618      	mov	r0, r3
   421b2:	9306      	str	r3, [sp, #24]
   421b4:	f7db f856 	bl	1d264 <strlen>
   421b8:	2300      	movs	r3, #0
   421ba:	9007      	str	r0, [sp, #28]
   421bc:	930a      	str	r3, [sp, #40]	; 0x28
   421be:	f8d8 3000 	ldr.w	r3, [r8]
   421c2:	f894 a018 	ldrb.w	sl, [r4, #24]
   421c6:	3307      	adds	r3, #7
   421c8:	f8d4 b000 	ldr.w	fp, [r4]
   421cc:	f023 0307 	bic.w	r3, r3, #7
   421d0:	f103 0208 	add.w	r2, r3, #8
   421d4:	f8c8 2000 	str.w	r2, [r8]
   421d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   421dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   421e0:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
   421e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   421e8:	ed8d 7b04 	vstr	d7, [sp, #16]
   421ec:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
   421f0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   421f4:	4640      	mov	r0, r8
   421f6:	4ba6      	ldr	r3, [pc, #664]	; (42490 <_printf_float+0x2f8>)
   421f8:	4649      	mov	r1, r9
   421fa:	f7da ffdd 	bl	1d1b8 <__aeabi_dcmpun>
   421fe:	bb70      	cbnz	r0, 4225e <_printf_float+0xc6>
   42200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   42204:	4ba2      	ldr	r3, [pc, #648]	; (42490 <_printf_float+0x2f8>)
   42206:	4640      	mov	r0, r8
   42208:	4649      	mov	r1, r9
   4220a:	f7da fd51 	bl	1ccb0 <__aeabi_dcmple>
   4220e:	bb30      	cbnz	r0, 4225e <_printf_float+0xc6>
   42210:	2200      	movs	r2, #0
   42212:	2300      	movs	r3, #0
   42214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   42218:	f7da fd40 	bl	1cc9c <__aeabi_dcmplt>
   4221c:	b110      	cbz	r0, 42224 <_printf_float+0x8c>
   4221e:	232d      	movs	r3, #45	; 0x2d
   42220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   42224:	4a9b      	ldr	r2, [pc, #620]	; (42494 <_printf_float+0x2fc>)
   42226:	4b9c      	ldr	r3, [pc, #624]	; (42498 <_printf_float+0x300>)
   42228:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   4222c:	bf94      	ite	ls
   4222e:	4690      	movls	r8, r2
   42230:	4698      	movhi	r8, r3
   42232:	f04f 0900 	mov.w	r9, #0
   42236:	2303      	movs	r3, #3
   42238:	f02b 0204 	bic.w	r2, fp, #4
   4223c:	6123      	str	r3, [r4, #16]
   4223e:	6022      	str	r2, [r4, #0]
   42240:	9700      	str	r7, [sp, #0]
   42242:	4633      	mov	r3, r6
   42244:	aa0b      	add	r2, sp, #44	; 0x2c
   42246:	4621      	mov	r1, r4
   42248:	4628      	mov	r0, r5
   4224a:	f006 f87e 	bl	4834a <_printf_common>
   4224e:	3001      	adds	r0, #1
   42250:	f040 808c 	bne.w	4236c <_printf_float+0x1d4>
   42254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42258:	b00d      	add	sp, #52	; 0x34
   4225a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4225e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   42262:	4610      	mov	r0, r2
   42264:	4619      	mov	r1, r3
   42266:	f7da ffa7 	bl	1d1b8 <__aeabi_dcmpun>
   4226a:	b140      	cbz	r0, 4227e <_printf_float+0xe6>
   4226c:	9b05      	ldr	r3, [sp, #20]
   4226e:	4a8b      	ldr	r2, [pc, #556]	; (4249c <_printf_float+0x304>)
   42270:	2b00      	cmp	r3, #0
   42272:	bfbc      	itt	lt
   42274:	232d      	movlt	r3, #45	; 0x2d
   42276:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   4227a:	4b89      	ldr	r3, [pc, #548]	; (424a0 <_printf_float+0x308>)
   4227c:	e7d4      	b.n	42228 <_printf_float+0x90>
   4227e:	6863      	ldr	r3, [r4, #4]
   42280:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
   42284:	1c5a      	adds	r2, r3, #1
   42286:	d13e      	bne.n	42306 <_printf_float+0x16e>
   42288:	2306      	movs	r3, #6
   4228a:	6063      	str	r3, [r4, #4]
   4228c:	2300      	movs	r3, #0
   4228e:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
   42292:	6861      	ldr	r1, [r4, #4]
   42294:	4628      	mov	r0, r5
   42296:	9303      	str	r3, [sp, #12]
   42298:	ab0a      	add	r3, sp, #40	; 0x28
   4229a:	6022      	str	r2, [r4, #0]
   4229c:	e9cd a301 	strd	sl, r3, [sp, #4]
   422a0:	ab09      	add	r3, sp, #36	; 0x24
   422a2:	ed9d 0b04 	vldr	d0, [sp, #16]
   422a6:	9300      	str	r3, [sp, #0]
   422a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   422ac:	f005 ffbd 	bl	4822a <__cvt>
   422b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   422b4:	4680      	mov	r8, r0
   422b6:	9909      	ldr	r1, [sp, #36]	; 0x24
   422b8:	d108      	bne.n	422cc <_printf_float+0x134>
   422ba:	1cc8      	adds	r0, r1, #3
   422bc:	db02      	blt.n	422c4 <_printf_float+0x12c>
   422be:	6863      	ldr	r3, [r4, #4]
   422c0:	4299      	cmp	r1, r3
   422c2:	dd41      	ble.n	42348 <_printf_float+0x1b0>
   422c4:	f1aa 0a02 	sub.w	sl, sl, #2
   422c8:	fa5f fa8a 	uxtb.w	sl, sl
   422cc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   422d0:	d820      	bhi.n	42314 <_printf_float+0x17c>
   422d2:	3901      	subs	r1, #1
   422d4:	4652      	mov	r2, sl
   422d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
   422da:	9109      	str	r1, [sp, #36]	; 0x24
   422dc:	f006 f802 	bl	482e4 <__exponent>
   422e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   422e2:	4681      	mov	r9, r0
   422e4:	1813      	adds	r3, r2, r0
   422e6:	2a01      	cmp	r2, #1
   422e8:	6123      	str	r3, [r4, #16]
   422ea:	dc02      	bgt.n	422f2 <_printf_float+0x15a>
   422ec:	6822      	ldr	r2, [r4, #0]
   422ee:	07d2      	lsls	r2, r2, #31
   422f0:	d501      	bpl.n	422f6 <_printf_float+0x15e>
   422f2:	3301      	adds	r3, #1
   422f4:	6123      	str	r3, [r4, #16]
   422f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   422fa:	2b00      	cmp	r3, #0
   422fc:	d0a0      	beq.n	42240 <_printf_float+0xa8>
   422fe:	232d      	movs	r3, #45	; 0x2d
   42300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   42304:	e79c      	b.n	42240 <_printf_float+0xa8>
   42306:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   4230a:	d1bf      	bne.n	4228c <_printf_float+0xf4>
   4230c:	2b00      	cmp	r3, #0
   4230e:	d1bd      	bne.n	4228c <_printf_float+0xf4>
   42310:	2301      	movs	r3, #1
   42312:	e7ba      	b.n	4228a <_printf_float+0xf2>
   42314:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
   42318:	d118      	bne.n	4234c <_printf_float+0x1b4>
   4231a:	2900      	cmp	r1, #0
   4231c:	6863      	ldr	r3, [r4, #4]
   4231e:	dd0b      	ble.n	42338 <_printf_float+0x1a0>
   42320:	6121      	str	r1, [r4, #16]
   42322:	b913      	cbnz	r3, 4232a <_printf_float+0x192>
   42324:	6822      	ldr	r2, [r4, #0]
   42326:	07d0      	lsls	r0, r2, #31
   42328:	d502      	bpl.n	42330 <_printf_float+0x198>
   4232a:	3301      	adds	r3, #1
   4232c:	440b      	add	r3, r1
   4232e:	6123      	str	r3, [r4, #16]
   42330:	65a1      	str	r1, [r4, #88]	; 0x58
   42332:	f04f 0900 	mov.w	r9, #0
   42336:	e7de      	b.n	422f6 <_printf_float+0x15e>
   42338:	b913      	cbnz	r3, 42340 <_printf_float+0x1a8>
   4233a:	6822      	ldr	r2, [r4, #0]
   4233c:	07d2      	lsls	r2, r2, #31
   4233e:	d501      	bpl.n	42344 <_printf_float+0x1ac>
   42340:	3302      	adds	r3, #2
   42342:	e7f4      	b.n	4232e <_printf_float+0x196>
   42344:	2301      	movs	r3, #1
   42346:	e7f2      	b.n	4232e <_printf_float+0x196>
   42348:	f04f 0a67 	mov.w	sl, #103	; 0x67
   4234c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4234e:	4299      	cmp	r1, r3
   42350:	db05      	blt.n	4235e <_printf_float+0x1c6>
   42352:	6823      	ldr	r3, [r4, #0]
   42354:	6121      	str	r1, [r4, #16]
   42356:	07d8      	lsls	r0, r3, #31
   42358:	d5ea      	bpl.n	42330 <_printf_float+0x198>
   4235a:	1c4b      	adds	r3, r1, #1
   4235c:	e7e7      	b.n	4232e <_printf_float+0x196>
   4235e:	2900      	cmp	r1, #0
   42360:	bfd4      	ite	le
   42362:	f1c1 0202 	rsble	r2, r1, #2
   42366:	2201      	movgt	r2, #1
   42368:	4413      	add	r3, r2
   4236a:	e7e0      	b.n	4232e <_printf_float+0x196>
   4236c:	6823      	ldr	r3, [r4, #0]
   4236e:	055a      	lsls	r2, r3, #21
   42370:	d407      	bmi.n	42382 <_printf_float+0x1ea>
   42372:	6923      	ldr	r3, [r4, #16]
   42374:	4642      	mov	r2, r8
   42376:	4631      	mov	r1, r6
   42378:	4628      	mov	r0, r5
   4237a:	47b8      	blx	r7
   4237c:	3001      	adds	r0, #1
   4237e:	d12b      	bne.n	423d8 <_printf_float+0x240>
   42380:	e768      	b.n	42254 <_printf_float+0xbc>
   42382:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
   42386:	f240 80dc 	bls.w	42542 <_printf_float+0x3aa>
   4238a:	2200      	movs	r2, #0
   4238c:	2300      	movs	r3, #0
   4238e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42392:	f7da fc79 	bl	1cc88 <__aeabi_dcmpeq>
   42396:	2800      	cmp	r0, #0
   42398:	d033      	beq.n	42402 <_printf_float+0x26a>
   4239a:	2301      	movs	r3, #1
   4239c:	4a41      	ldr	r2, [pc, #260]	; (424a4 <_printf_float+0x30c>)
   4239e:	4631      	mov	r1, r6
   423a0:	4628      	mov	r0, r5
   423a2:	47b8      	blx	r7
   423a4:	3001      	adds	r0, #1
   423a6:	f43f af55 	beq.w	42254 <_printf_float+0xbc>
   423aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   423ae:	429a      	cmp	r2, r3
   423b0:	db02      	blt.n	423b8 <_printf_float+0x220>
   423b2:	6823      	ldr	r3, [r4, #0]
   423b4:	07d8      	lsls	r0, r3, #31
   423b6:	d50f      	bpl.n	423d8 <_printf_float+0x240>
   423b8:	4631      	mov	r1, r6
   423ba:	4628      	mov	r0, r5
   423bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   423c0:	47b8      	blx	r7
   423c2:	3001      	adds	r0, #1
   423c4:	f43f af46 	beq.w	42254 <_printf_float+0xbc>
   423c8:	f04f 0800 	mov.w	r8, #0
   423cc:	f104 091a 	add.w	r9, r4, #26
   423d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   423d2:	3b01      	subs	r3, #1
   423d4:	4543      	cmp	r3, r8
   423d6:	dc09      	bgt.n	423ec <_printf_float+0x254>
   423d8:	6823      	ldr	r3, [r4, #0]
   423da:	079b      	lsls	r3, r3, #30
   423dc:	f100 8101 	bmi.w	425e2 <_printf_float+0x44a>
   423e0:	68e0      	ldr	r0, [r4, #12]
   423e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   423e4:	4298      	cmp	r0, r3
   423e6:	bfb8      	it	lt
   423e8:	4618      	movlt	r0, r3
   423ea:	e735      	b.n	42258 <_printf_float+0xc0>
   423ec:	2301      	movs	r3, #1
   423ee:	464a      	mov	r2, r9
   423f0:	4631      	mov	r1, r6
   423f2:	4628      	mov	r0, r5
   423f4:	47b8      	blx	r7
   423f6:	3001      	adds	r0, #1
   423f8:	f43f af2c 	beq.w	42254 <_printf_float+0xbc>
   423fc:	f108 0801 	add.w	r8, r8, #1
   42400:	e7e6      	b.n	423d0 <_printf_float+0x238>
   42402:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42404:	2b00      	cmp	r3, #0
   42406:	dc2b      	bgt.n	42460 <_printf_float+0x2c8>
   42408:	2301      	movs	r3, #1
   4240a:	4a26      	ldr	r2, [pc, #152]	; (424a4 <_printf_float+0x30c>)
   4240c:	4631      	mov	r1, r6
   4240e:	4628      	mov	r0, r5
   42410:	47b8      	blx	r7
   42412:	3001      	adds	r0, #1
   42414:	f43f af1e 	beq.w	42254 <_printf_float+0xbc>
   42418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   4241c:	4313      	orrs	r3, r2
   4241e:	d102      	bne.n	42426 <_printf_float+0x28e>
   42420:	6823      	ldr	r3, [r4, #0]
   42422:	07d9      	lsls	r1, r3, #31
   42424:	d5d8      	bpl.n	423d8 <_printf_float+0x240>
   42426:	4631      	mov	r1, r6
   42428:	4628      	mov	r0, r5
   4242a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   4242e:	47b8      	blx	r7
   42430:	3001      	adds	r0, #1
   42432:	f43f af0f 	beq.w	42254 <_printf_float+0xbc>
   42436:	f04f 0900 	mov.w	r9, #0
   4243a:	f104 0a1a 	add.w	sl, r4, #26
   4243e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   42440:	425b      	negs	r3, r3
   42442:	454b      	cmp	r3, r9
   42444:	dc01      	bgt.n	4244a <_printf_float+0x2b2>
   42446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   42448:	e794      	b.n	42374 <_printf_float+0x1dc>
   4244a:	2301      	movs	r3, #1
   4244c:	4652      	mov	r2, sl
   4244e:	4631      	mov	r1, r6
   42450:	4628      	mov	r0, r5
   42452:	47b8      	blx	r7
   42454:	3001      	adds	r0, #1
   42456:	f43f aefd 	beq.w	42254 <_printf_float+0xbc>
   4245a:	f109 0901 	add.w	r9, r9, #1
   4245e:	e7ee      	b.n	4243e <_printf_float+0x2a6>
   42460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   42462:	6da3      	ldr	r3, [r4, #88]	; 0x58
   42464:	429a      	cmp	r2, r3
   42466:	bfa8      	it	ge
   42468:	461a      	movge	r2, r3
   4246a:	2a00      	cmp	r2, #0
   4246c:	4691      	mov	r9, r2
   4246e:	dd07      	ble.n	42480 <_printf_float+0x2e8>
   42470:	4613      	mov	r3, r2
   42472:	4631      	mov	r1, r6
   42474:	4642      	mov	r2, r8
   42476:	4628      	mov	r0, r5
   42478:	47b8      	blx	r7
   4247a:	3001      	adds	r0, #1
   4247c:	f43f aeea 	beq.w	42254 <_printf_float+0xbc>
   42480:	f104 031a 	add.w	r3, r4, #26
   42484:	f04f 0b00 	mov.w	fp, #0
   42488:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   4248c:	9304      	str	r3, [sp, #16]
   4248e:	e015      	b.n	424bc <_printf_float+0x324>
   42490:	7fefffff 	.word	0x7fefffff
   42494:	00052be0 	.word	0x00052be0
   42498:	0004c408 	.word	0x0004c408
   4249c:	00052be4 	.word	0x00052be4
   424a0:	00052be8 	.word	0x00052be8
   424a4:	00052672 	.word	0x00052672
   424a8:	2301      	movs	r3, #1
   424aa:	9a04      	ldr	r2, [sp, #16]
   424ac:	4631      	mov	r1, r6
   424ae:	4628      	mov	r0, r5
   424b0:	47b8      	blx	r7
   424b2:	3001      	adds	r0, #1
   424b4:	f43f aece 	beq.w	42254 <_printf_float+0xbc>
   424b8:	f10b 0b01 	add.w	fp, fp, #1
   424bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   424c0:	ebaa 0309 	sub.w	r3, sl, r9
   424c4:	455b      	cmp	r3, fp
   424c6:	dcef      	bgt.n	424a8 <_printf_float+0x310>
   424c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   424cc:	429a      	cmp	r2, r3
   424ce:	db1b      	blt.n	42508 <_printf_float+0x370>
   424d0:	6823      	ldr	r3, [r4, #0]
   424d2:	07da      	lsls	r2, r3, #31
   424d4:	d418      	bmi.n	42508 <_printf_float+0x370>
   424d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   424da:	4592      	cmp	sl, r2
   424dc:	db1c      	blt.n	42518 <_printf_float+0x380>
   424de:	eba3 090a 	sub.w	r9, r3, sl
   424e2:	f1b9 0f00 	cmp.w	r9, #0
   424e6:	dd08      	ble.n	424fa <_printf_float+0x362>
   424e8:	464b      	mov	r3, r9
   424ea:	eb08 020a 	add.w	r2, r8, sl
   424ee:	4631      	mov	r1, r6
   424f0:	4628      	mov	r0, r5
   424f2:	47b8      	blx	r7
   424f4:	3001      	adds	r0, #1
   424f6:	f43f aead 	beq.w	42254 <_printf_float+0xbc>
   424fa:	f04f 0800 	mov.w	r8, #0
   424fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   42502:	f104 0a1a 	add.w	sl, r4, #26
   42506:	e014      	b.n	42532 <_printf_float+0x39a>
   42508:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   4250c:	4631      	mov	r1, r6
   4250e:	4628      	mov	r0, r5
   42510:	47b8      	blx	r7
   42512:	3001      	adds	r0, #1
   42514:	d1df      	bne.n	424d6 <_printf_float+0x33e>
   42516:	e69d      	b.n	42254 <_printf_float+0xbc>
   42518:	eba3 0902 	sub.w	r9, r3, r2
   4251c:	e7e1      	b.n	424e2 <_printf_float+0x34a>
   4251e:	2301      	movs	r3, #1
   42520:	4652      	mov	r2, sl
   42522:	4631      	mov	r1, r6
   42524:	4628      	mov	r0, r5
   42526:	47b8      	blx	r7
   42528:	3001      	adds	r0, #1
   4252a:	f43f ae93 	beq.w	42254 <_printf_float+0xbc>
   4252e:	f108 0801 	add.w	r8, r8, #1
   42532:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   42536:	1a9b      	subs	r3, r3, r2
   42538:	eba3 0309 	sub.w	r3, r3, r9
   4253c:	4543      	cmp	r3, r8
   4253e:	dcee      	bgt.n	4251e <_printf_float+0x386>
   42540:	e74a      	b.n	423d8 <_printf_float+0x240>
   42542:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   42544:	2a01      	cmp	r2, #1
   42546:	dc01      	bgt.n	4254c <_printf_float+0x3b4>
   42548:	07db      	lsls	r3, r3, #31
   4254a:	d537      	bpl.n	425bc <_printf_float+0x424>
   4254c:	2301      	movs	r3, #1
   4254e:	4642      	mov	r2, r8
   42550:	4631      	mov	r1, r6
   42552:	4628      	mov	r0, r5
   42554:	47b8      	blx	r7
   42556:	3001      	adds	r0, #1
   42558:	f43f ae7c 	beq.w	42254 <_printf_float+0xbc>
   4255c:	4631      	mov	r1, r6
   4255e:	4628      	mov	r0, r5
   42560:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   42564:	47b8      	blx	r7
   42566:	3001      	adds	r0, #1
   42568:	f43f ae74 	beq.w	42254 <_printf_float+0xbc>
   4256c:	2200      	movs	r2, #0
   4256e:	2300      	movs	r3, #0
   42570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   42574:	f7da fb88 	bl	1cc88 <__aeabi_dcmpeq>
   42578:	b9d8      	cbnz	r0, 425b2 <_printf_float+0x41a>
   4257a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   4257c:	f108 0201 	add.w	r2, r8, #1
   42580:	3b01      	subs	r3, #1
   42582:	4631      	mov	r1, r6
   42584:	4628      	mov	r0, r5
   42586:	47b8      	blx	r7
   42588:	3001      	adds	r0, #1
   4258a:	d10e      	bne.n	425aa <_printf_float+0x412>
   4258c:	e662      	b.n	42254 <_printf_float+0xbc>
   4258e:	2301      	movs	r3, #1
   42590:	4652      	mov	r2, sl
   42592:	4631      	mov	r1, r6
   42594:	4628      	mov	r0, r5
   42596:	47b8      	blx	r7
   42598:	3001      	adds	r0, #1
   4259a:	f43f ae5b 	beq.w	42254 <_printf_float+0xbc>
   4259e:	f108 0801 	add.w	r8, r8, #1
   425a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   425a4:	3b01      	subs	r3, #1
   425a6:	4543      	cmp	r3, r8
   425a8:	dcf1      	bgt.n	4258e <_printf_float+0x3f6>
   425aa:	464b      	mov	r3, r9
   425ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
   425b0:	e6e1      	b.n	42376 <_printf_float+0x1de>
   425b2:	f04f 0800 	mov.w	r8, #0
   425b6:	f104 0a1a 	add.w	sl, r4, #26
   425ba:	e7f2      	b.n	425a2 <_printf_float+0x40a>
   425bc:	2301      	movs	r3, #1
   425be:	4642      	mov	r2, r8
   425c0:	e7df      	b.n	42582 <_printf_float+0x3ea>
   425c2:	2301      	movs	r3, #1
   425c4:	464a      	mov	r2, r9
   425c6:	4631      	mov	r1, r6
   425c8:	4628      	mov	r0, r5
   425ca:	47b8      	blx	r7
   425cc:	3001      	adds	r0, #1
   425ce:	f43f ae41 	beq.w	42254 <_printf_float+0xbc>
   425d2:	f108 0801 	add.w	r8, r8, #1
   425d6:	68e3      	ldr	r3, [r4, #12]
   425d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   425da:	1a9b      	subs	r3, r3, r2
   425dc:	4543      	cmp	r3, r8
   425de:	dcf0      	bgt.n	425c2 <_printf_float+0x42a>
   425e0:	e6fe      	b.n	423e0 <_printf_float+0x248>
   425e2:	f04f 0800 	mov.w	r8, #0
   425e6:	f104 0919 	add.w	r9, r4, #25
   425ea:	e7f4      	b.n	425d6 <_printf_float+0x43e>

000425ec <_printf_i>:
   425ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   425f0:	4606      	mov	r6, r0
   425f2:	460c      	mov	r4, r1
   425f4:	f101 0043 	add.w	r0, r1, #67	; 0x43
   425f8:	7e09      	ldrb	r1, [r1, #24]
   425fa:	b085      	sub	sp, #20
   425fc:	4698      	mov	r8, r3
   425fe:	296e      	cmp	r1, #110	; 0x6e
   42600:	4617      	mov	r7, r2
   42602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   42604:	f000 80ba 	beq.w	4277c <_printf_i+0x190>
   42608:	d824      	bhi.n	42654 <_printf_i+0x68>
   4260a:	2963      	cmp	r1, #99	; 0x63
   4260c:	d039      	beq.n	42682 <_printf_i+0x96>
   4260e:	d80a      	bhi.n	42626 <_printf_i+0x3a>
   42610:	2900      	cmp	r1, #0
   42612:	f000 80c3 	beq.w	4279c <_printf_i+0x1b0>
   42616:	2958      	cmp	r1, #88	; 0x58
   42618:	f000 8091 	beq.w	4273e <_printf_i+0x152>
   4261c:	f104 0542 	add.w	r5, r4, #66	; 0x42
   42620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
   42624:	e035      	b.n	42692 <_printf_i+0xa6>
   42626:	2964      	cmp	r1, #100	; 0x64
   42628:	d001      	beq.n	4262e <_printf_i+0x42>
   4262a:	2969      	cmp	r1, #105	; 0x69
   4262c:	d1f6      	bne.n	4261c <_printf_i+0x30>
   4262e:	6825      	ldr	r5, [r4, #0]
   42630:	681a      	ldr	r2, [r3, #0]
   42632:	f015 0f80 	tst.w	r5, #128	; 0x80
   42636:	f102 0104 	add.w	r1, r2, #4
   4263a:	d02c      	beq.n	42696 <_printf_i+0xaa>
   4263c:	6812      	ldr	r2, [r2, #0]
   4263e:	6019      	str	r1, [r3, #0]
   42640:	2a00      	cmp	r2, #0
   42642:	da03      	bge.n	4264c <_printf_i+0x60>
   42644:	232d      	movs	r3, #45	; 0x2d
   42646:	4252      	negs	r2, r2
   42648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   4264c:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 4280c <_printf_i+0x220>
   42650:	230a      	movs	r3, #10
   42652:	e03f      	b.n	426d4 <_printf_i+0xe8>
   42654:	2973      	cmp	r1, #115	; 0x73
   42656:	f000 80a5 	beq.w	427a4 <_printf_i+0x1b8>
   4265a:	d808      	bhi.n	4266e <_printf_i+0x82>
   4265c:	296f      	cmp	r1, #111	; 0x6f
   4265e:	d021      	beq.n	426a4 <_printf_i+0xb8>
   42660:	2970      	cmp	r1, #112	; 0x70
   42662:	d1db      	bne.n	4261c <_printf_i+0x30>
   42664:	6822      	ldr	r2, [r4, #0]
   42666:	f042 0220 	orr.w	r2, r2, #32
   4266a:	6022      	str	r2, [r4, #0]
   4266c:	e003      	b.n	42676 <_printf_i+0x8a>
   4266e:	2975      	cmp	r1, #117	; 0x75
   42670:	d018      	beq.n	426a4 <_printf_i+0xb8>
   42672:	2978      	cmp	r1, #120	; 0x78
   42674:	d1d2      	bne.n	4261c <_printf_i+0x30>
   42676:	2278      	movs	r2, #120	; 0x78
   42678:	f8df c194 	ldr.w	ip, [pc, #404]	; 42810 <_printf_i+0x224>
   4267c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
   42680:	e061      	b.n	42746 <_printf_i+0x15a>
   42682:	681a      	ldr	r2, [r3, #0]
   42684:	f104 0542 	add.w	r5, r4, #66	; 0x42
   42688:	1d11      	adds	r1, r2, #4
   4268a:	6019      	str	r1, [r3, #0]
   4268c:	6813      	ldr	r3, [r2, #0]
   4268e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   42692:	2301      	movs	r3, #1
   42694:	e093      	b.n	427be <_printf_i+0x1d2>
   42696:	6812      	ldr	r2, [r2, #0]
   42698:	f015 0f40 	tst.w	r5, #64	; 0x40
   4269c:	6019      	str	r1, [r3, #0]
   4269e:	bf18      	it	ne
   426a0:	b212      	sxthne	r2, r2
   426a2:	e7cd      	b.n	42640 <_printf_i+0x54>
   426a4:	f8d4 c000 	ldr.w	ip, [r4]
   426a8:	681a      	ldr	r2, [r3, #0]
   426aa:	f01c 0f80 	tst.w	ip, #128	; 0x80
   426ae:	f102 0504 	add.w	r5, r2, #4
   426b2:	601d      	str	r5, [r3, #0]
   426b4:	d001      	beq.n	426ba <_printf_i+0xce>
   426b6:	6812      	ldr	r2, [r2, #0]
   426b8:	e003      	b.n	426c2 <_printf_i+0xd6>
   426ba:	f01c 0f40 	tst.w	ip, #64	; 0x40
   426be:	d0fa      	beq.n	426b6 <_printf_i+0xca>
   426c0:	8812      	ldrh	r2, [r2, #0]
   426c2:	296f      	cmp	r1, #111	; 0x6f
   426c4:	f8df c144 	ldr.w	ip, [pc, #324]	; 4280c <_printf_i+0x220>
   426c8:	bf0c      	ite	eq
   426ca:	2308      	moveq	r3, #8
   426cc:	230a      	movne	r3, #10
   426ce:	2100      	movs	r1, #0
   426d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   426d4:	6865      	ldr	r5, [r4, #4]
   426d6:	2d00      	cmp	r5, #0
   426d8:	60a5      	str	r5, [r4, #8]
   426da:	bfa2      	ittt	ge
   426dc:	6821      	ldrge	r1, [r4, #0]
   426de:	f021 0104 	bicge.w	r1, r1, #4
   426e2:	6021      	strge	r1, [r4, #0]
   426e4:	b90a      	cbnz	r2, 426ea <_printf_i+0xfe>
   426e6:	2d00      	cmp	r5, #0
   426e8:	d046      	beq.n	42778 <_printf_i+0x18c>
   426ea:	4605      	mov	r5, r0
   426ec:	4293      	cmp	r3, r2
   426ee:	fbb2 f1f3 	udiv	r1, r2, r3
   426f2:	fb03 2e11 	mls	lr, r3, r1, r2
   426f6:	f81c e00e 	ldrb.w	lr, [ip, lr]
   426fa:	f805 ed01 	strb.w	lr, [r5, #-1]!
   426fe:	d939      	bls.n	42774 <_printf_i+0x188>
   42700:	2b08      	cmp	r3, #8
   42702:	d10b      	bne.n	4271c <_printf_i+0x130>
   42704:	6823      	ldr	r3, [r4, #0]
   42706:	07da      	lsls	r2, r3, #31
   42708:	d508      	bpl.n	4271c <_printf_i+0x130>
   4270a:	6923      	ldr	r3, [r4, #16]
   4270c:	6862      	ldr	r2, [r4, #4]
   4270e:	429a      	cmp	r2, r3
   42710:	bfde      	ittt	le
   42712:	2330      	movle	r3, #48	; 0x30
   42714:	f805 3c01 	strble.w	r3, [r5, #-1]
   42718:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   4271c:	1b40      	subs	r0, r0, r5
   4271e:	6120      	str	r0, [r4, #16]
   42720:	f8cd 8000 	str.w	r8, [sp]
   42724:	463b      	mov	r3, r7
   42726:	aa03      	add	r2, sp, #12
   42728:	4621      	mov	r1, r4
   4272a:	4630      	mov	r0, r6
   4272c:	f005 fe0d 	bl	4834a <_printf_common>
   42730:	3001      	adds	r0, #1
   42732:	d149      	bne.n	427c8 <_printf_i+0x1dc>
   42734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42738:	b005      	add	sp, #20
   4273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4273e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 4280c <_printf_i+0x220>
   42742:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
   42746:	681d      	ldr	r5, [r3, #0]
   42748:	6821      	ldr	r1, [r4, #0]
   4274a:	f855 2b04 	ldr.w	r2, [r5], #4
   4274e:	601d      	str	r5, [r3, #0]
   42750:	060d      	lsls	r5, r1, #24
   42752:	d50b      	bpl.n	4276c <_printf_i+0x180>
   42754:	07cd      	lsls	r5, r1, #31
   42756:	bf44      	itt	mi
   42758:	f041 0120 	orrmi.w	r1, r1, #32
   4275c:	6021      	strmi	r1, [r4, #0]
   4275e:	b91a      	cbnz	r2, 42768 <_printf_i+0x17c>
   42760:	6823      	ldr	r3, [r4, #0]
   42762:	f023 0320 	bic.w	r3, r3, #32
   42766:	6023      	str	r3, [r4, #0]
   42768:	2310      	movs	r3, #16
   4276a:	e7b0      	b.n	426ce <_printf_i+0xe2>
   4276c:	064b      	lsls	r3, r1, #25
   4276e:	bf48      	it	mi
   42770:	b292      	uxthmi	r2, r2
   42772:	e7ef      	b.n	42754 <_printf_i+0x168>
   42774:	460a      	mov	r2, r1
   42776:	e7b9      	b.n	426ec <_printf_i+0x100>
   42778:	4605      	mov	r5, r0
   4277a:	e7c1      	b.n	42700 <_printf_i+0x114>
   4277c:	681a      	ldr	r2, [r3, #0]
   4277e:	f8d4 c000 	ldr.w	ip, [r4]
   42782:	1d15      	adds	r5, r2, #4
   42784:	6961      	ldr	r1, [r4, #20]
   42786:	f01c 0f80 	tst.w	ip, #128	; 0x80
   4278a:	601d      	str	r5, [r3, #0]
   4278c:	6813      	ldr	r3, [r2, #0]
   4278e:	d001      	beq.n	42794 <_printf_i+0x1a8>
   42790:	6019      	str	r1, [r3, #0]
   42792:	e003      	b.n	4279c <_printf_i+0x1b0>
   42794:	f01c 0f40 	tst.w	ip, #64	; 0x40
   42798:	d0fa      	beq.n	42790 <_printf_i+0x1a4>
   4279a:	8019      	strh	r1, [r3, #0]
   4279c:	2300      	movs	r3, #0
   4279e:	4605      	mov	r5, r0
   427a0:	6123      	str	r3, [r4, #16]
   427a2:	e7bd      	b.n	42720 <_printf_i+0x134>
   427a4:	681a      	ldr	r2, [r3, #0]
   427a6:	1d11      	adds	r1, r2, #4
   427a8:	6019      	str	r1, [r3, #0]
   427aa:	2100      	movs	r1, #0
   427ac:	6815      	ldr	r5, [r2, #0]
   427ae:	6862      	ldr	r2, [r4, #4]
   427b0:	4628      	mov	r0, r5
   427b2:	f005 fccd 	bl	48150 <memchr>
   427b6:	b108      	cbz	r0, 427bc <_printf_i+0x1d0>
   427b8:	1b40      	subs	r0, r0, r5
   427ba:	6060      	str	r0, [r4, #4]
   427bc:	6863      	ldr	r3, [r4, #4]
   427be:	6123      	str	r3, [r4, #16]
   427c0:	2300      	movs	r3, #0
   427c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   427c6:	e7ab      	b.n	42720 <_printf_i+0x134>
   427c8:	6923      	ldr	r3, [r4, #16]
   427ca:	462a      	mov	r2, r5
   427cc:	4639      	mov	r1, r7
   427ce:	4630      	mov	r0, r6
   427d0:	47c0      	blx	r8
   427d2:	3001      	adds	r0, #1
   427d4:	d0ae      	beq.n	42734 <_printf_i+0x148>
   427d6:	6823      	ldr	r3, [r4, #0]
   427d8:	079b      	lsls	r3, r3, #30
   427da:	d413      	bmi.n	42804 <_printf_i+0x218>
   427dc:	68e0      	ldr	r0, [r4, #12]
   427de:	9b03      	ldr	r3, [sp, #12]
   427e0:	4298      	cmp	r0, r3
   427e2:	bfb8      	it	lt
   427e4:	4618      	movlt	r0, r3
   427e6:	e7a7      	b.n	42738 <_printf_i+0x14c>
   427e8:	2301      	movs	r3, #1
   427ea:	464a      	mov	r2, r9
   427ec:	4639      	mov	r1, r7
   427ee:	4630      	mov	r0, r6
   427f0:	47c0      	blx	r8
   427f2:	3001      	adds	r0, #1
   427f4:	d09e      	beq.n	42734 <_printf_i+0x148>
   427f6:	3501      	adds	r5, #1
   427f8:	68e3      	ldr	r3, [r4, #12]
   427fa:	9a03      	ldr	r2, [sp, #12]
   427fc:	1a9b      	subs	r3, r3, r2
   427fe:	42ab      	cmp	r3, r5
   42800:	dcf2      	bgt.n	427e8 <_printf_i+0x1fc>
   42802:	e7eb      	b.n	427dc <_printf_i+0x1f0>
   42804:	2500      	movs	r5, #0
   42806:	f104 0919 	add.w	r9, r4, #25
   4280a:	e7f5      	b.n	427f8 <_printf_i+0x20c>
   4280c:	00052bec 	.word	0x00052bec
   42810:	0004c04d 	.word	0x0004c04d

00042814 <srand>:
   42814:	b538      	push	{r3, r4, r5, lr}
   42816:	4b0d      	ldr	r3, [pc, #52]	; (4284c <srand+0x38>)
   42818:	4605      	mov	r5, r0
   4281a:	681c      	ldr	r4, [r3, #0]
   4281c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   4281e:	b97b      	cbnz	r3, 42840 <srand+0x2c>
   42820:	2018      	movs	r0, #24
   42822:	f7ff fad9 	bl	41dd8 <malloc>
   42826:	4a0a      	ldr	r2, [pc, #40]	; (42850 <srand+0x3c>)
   42828:	4b0a      	ldr	r3, [pc, #40]	; (42854 <srand+0x40>)
   4282a:	63a0      	str	r0, [r4, #56]	; 0x38
   4282c:	e9c0 2300 	strd	r2, r3, [r0]
   42830:	4b09      	ldr	r3, [pc, #36]	; (42858 <srand+0x44>)
   42832:	2201      	movs	r2, #1
   42834:	6083      	str	r3, [r0, #8]
   42836:	230b      	movs	r3, #11
   42838:	8183      	strh	r3, [r0, #12]
   4283a:	2300      	movs	r3, #0
   4283c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   42840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42842:	2200      	movs	r2, #0
   42844:	611d      	str	r5, [r3, #16]
   42846:	615a      	str	r2, [r3, #20]
   42848:	bd38      	pop	{r3, r4, r5, pc}
   4284a:	bf00      	nop
   4284c:	200208e0 	.word	0x200208e0
   42850:	abcd330e 	.word	0xabcd330e
   42854:	e66d1234 	.word	0xe66d1234
   42858:	0005deec 	.word	0x0005deec

0004285c <rand>:
   4285c:	4b13      	ldr	r3, [pc, #76]	; (428ac <rand+0x50>)
   4285e:	b510      	push	{r4, lr}
   42860:	681c      	ldr	r4, [r3, #0]
   42862:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42864:	b97b      	cbnz	r3, 42886 <rand+0x2a>
   42866:	2018      	movs	r0, #24
   42868:	f7ff fab6 	bl	41dd8 <malloc>
   4286c:	4a10      	ldr	r2, [pc, #64]	; (428b0 <rand+0x54>)
   4286e:	4b11      	ldr	r3, [pc, #68]	; (428b4 <rand+0x58>)
   42870:	63a0      	str	r0, [r4, #56]	; 0x38
   42872:	e9c0 2300 	strd	r2, r3, [r0]
   42876:	4b10      	ldr	r3, [pc, #64]	; (428b8 <rand+0x5c>)
   42878:	2201      	movs	r2, #1
   4287a:	6083      	str	r3, [r0, #8]
   4287c:	230b      	movs	r3, #11
   4287e:	8183      	strh	r3, [r0, #12]
   42880:	2300      	movs	r3, #0
   42882:	e9c0 2304 	strd	r2, r3, [r0, #16]
   42886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   42888:	480c      	ldr	r0, [pc, #48]	; (428bc <rand+0x60>)
   4288a:	690a      	ldr	r2, [r1, #16]
   4288c:	694b      	ldr	r3, [r1, #20]
   4288e:	4c0c      	ldr	r4, [pc, #48]	; (428c0 <rand+0x64>)
   42890:	4350      	muls	r0, r2
   42892:	fb04 0003 	mla	r0, r4, r3, r0
   42896:	fba2 3404 	umull	r3, r4, r2, r4
   4289a:	1c5a      	adds	r2, r3, #1
   4289c:	4404      	add	r4, r0
   4289e:	f144 0000 	adc.w	r0, r4, #0
   428a2:	e9c1 2004 	strd	r2, r0, [r1, #16]
   428a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   428aa:	bd10      	pop	{r4, pc}
   428ac:	200208e0 	.word	0x200208e0
   428b0:	abcd330e 	.word	0xabcd330e
   428b4:	e66d1234 	.word	0xe66d1234
   428b8:	0005deec 	.word	0x0005deec
   428bc:	5851f42d 	.word	0x5851f42d
   428c0:	4c957f2d 	.word	0x4c957f2d

000428c4 <realloc>:
   428c4:	4b02      	ldr	r3, [pc, #8]	; (428d0 <realloc+0xc>)
   428c6:	460a      	mov	r2, r1
   428c8:	4601      	mov	r1, r0
   428ca:	6818      	ldr	r0, [r3, #0]
   428cc:	f006 bc4f 	b.w	4916e <_realloc_r>
   428d0:	200208e0 	.word	0x200208e0

000428d4 <_sbrk_r>:
   428d4:	b538      	push	{r3, r4, r5, lr}
   428d6:	2300      	movs	r3, #0
   428d8:	4c05      	ldr	r4, [pc, #20]	; (428f0 <_sbrk_r+0x1c>)
   428da:	4605      	mov	r5, r0
   428dc:	4608      	mov	r0, r1
   428de:	6023      	str	r3, [r4, #0]
   428e0:	f7e5 fe58 	bl	28594 <_sbrk>
   428e4:	1c43      	adds	r3, r0, #1
   428e6:	d102      	bne.n	428ee <_sbrk_r+0x1a>
   428e8:	6823      	ldr	r3, [r4, #0]
   428ea:	b103      	cbz	r3, 428ee <_sbrk_r+0x1a>
   428ec:	602b      	str	r3, [r5, #0]
   428ee:	bd38      	pop	{r3, r4, r5, pc}
   428f0:	2002d330 	.word	0x2002d330

000428f4 <sniprintf>:
   428f4:	b40c      	push	{r2, r3}
   428f6:	4b18      	ldr	r3, [pc, #96]	; (42958 <sniprintf+0x64>)
   428f8:	b530      	push	{r4, r5, lr}
   428fa:	1e0c      	subs	r4, r1, #0
   428fc:	b09d      	sub	sp, #116	; 0x74
   428fe:	681d      	ldr	r5, [r3, #0]
   42900:	da08      	bge.n	42914 <sniprintf+0x20>
   42902:	238b      	movs	r3, #139	; 0x8b
   42904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42908:	602b      	str	r3, [r5, #0]
   4290a:	b01d      	add	sp, #116	; 0x74
   4290c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   42910:	b002      	add	sp, #8
   42912:	4770      	bx	lr
   42914:	f44f 7302 	mov.w	r3, #520	; 0x208
   42918:	9002      	str	r0, [sp, #8]
   4291a:	9006      	str	r0, [sp, #24]
   4291c:	a902      	add	r1, sp, #8
   4291e:	f8ad 3014 	strh.w	r3, [sp, #20]
   42922:	bf14      	ite	ne
   42924:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   42928:	4623      	moveq	r3, r4
   4292a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   4292c:	4628      	mov	r0, r5
   4292e:	9304      	str	r3, [sp, #16]
   42930:	9307      	str	r3, [sp, #28]
   42932:	f64f 73ff 	movw	r3, #65535	; 0xffff
   42936:	f8ad 3016 	strh.w	r3, [sp, #22]
   4293a:	ab21      	add	r3, sp, #132	; 0x84
   4293c:	9301      	str	r3, [sp, #4]
   4293e:	f000 ff19 	bl	43774 <_svfiprintf_r>
   42942:	1c43      	adds	r3, r0, #1
   42944:	bfbc      	itt	lt
   42946:	238b      	movlt	r3, #139	; 0x8b
   42948:	602b      	strlt	r3, [r5, #0]
   4294a:	2c00      	cmp	r4, #0
   4294c:	d0dd      	beq.n	4290a <sniprintf+0x16>
   4294e:	9b02      	ldr	r3, [sp, #8]
   42950:	2200      	movs	r2, #0
   42952:	701a      	strb	r2, [r3, #0]
   42954:	e7d9      	b.n	4290a <sniprintf+0x16>
   42956:	bf00      	nop
   42958:	200208e0 	.word	0x200208e0

0004295c <siscanf>:
   4295c:	b40e      	push	{r1, r2, r3}
   4295e:	b530      	push	{r4, r5, lr}
   42960:	b09c      	sub	sp, #112	; 0x70
   42962:	f44f 7201 	mov.w	r2, #516	; 0x204
   42966:	ac1f      	add	r4, sp, #124	; 0x7c
   42968:	f8ad 2014 	strh.w	r2, [sp, #20]
   4296c:	9002      	str	r0, [sp, #8]
   4296e:	f854 5b04 	ldr.w	r5, [r4], #4
   42972:	9006      	str	r0, [sp, #24]
   42974:	f7da fc76 	bl	1d264 <strlen>
   42978:	4b0b      	ldr	r3, [pc, #44]	; (429a8 <siscanf+0x4c>)
   4297a:	462a      	mov	r2, r5
   4297c:	9003      	str	r0, [sp, #12]
   4297e:	a902      	add	r1, sp, #8
   42980:	930b      	str	r3, [sp, #44]	; 0x2c
   42982:	2300      	movs	r3, #0
   42984:	9007      	str	r0, [sp, #28]
   42986:	930f      	str	r3, [sp, #60]	; 0x3c
   42988:	9314      	str	r3, [sp, #80]	; 0x50
   4298a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   4298e:	4807      	ldr	r0, [pc, #28]	; (429ac <siscanf+0x50>)
   42990:	f8ad 3016 	strh.w	r3, [sp, #22]
   42994:	4623      	mov	r3, r4
   42996:	6800      	ldr	r0, [r0, #0]
   42998:	9401      	str	r4, [sp, #4]
   4299a:	f000 ffe3 	bl	43964 <__ssvfiscanf_r>
   4299e:	b01c      	add	sp, #112	; 0x70
   429a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   429a4:	b003      	add	sp, #12
   429a6:	4770      	bx	lr
   429a8:	00048491 	.word	0x00048491
   429ac:	200208e0 	.word	0x200208e0

000429b0 <strtod>:
   429b0:	460a      	mov	r2, r1
   429b2:	4601      	mov	r1, r0
   429b4:	4802      	ldr	r0, [pc, #8]	; (429c0 <strtod+0x10>)
   429b6:	4b03      	ldr	r3, [pc, #12]	; (429c4 <strtod+0x14>)
   429b8:	6800      	ldr	r0, [r0, #0]
   429ba:	f7dc be81 	b.w	1f6c0 <_strtod_l>
   429be:	bf00      	nop
   429c0:	200208e0 	.word	0x200208e0
   429c4:	20020944 	.word	0x20020944

000429c8 <_strtol_l.isra.0>:
   429c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   429cc:	4686      	mov	lr, r0
   429ce:	4f39      	ldr	r7, [pc, #228]	; (42ab4 <_strtol_l.isra.0+0xec>)
   429d0:	4608      	mov	r0, r1
   429d2:	4605      	mov	r5, r0
   429d4:	f815 4b01 	ldrb.w	r4, [r5], #1
   429d8:	5de6      	ldrb	r6, [r4, r7]
   429da:	f016 0608 	ands.w	r6, r6, #8
   429de:	d135      	bne.n	42a4c <_strtol_l.isra.0+0x84>
   429e0:	2c2d      	cmp	r4, #45	; 0x2d
   429e2:	d135      	bne.n	42a50 <_strtol_l.isra.0+0x88>
   429e4:	782c      	ldrb	r4, [r5, #0]
   429e6:	f04f 0801 	mov.w	r8, #1
   429ea:	1c85      	adds	r5, r0, #2
   429ec:	2b00      	cmp	r3, #0
   429ee:	d05c      	beq.n	42aaa <_strtol_l.isra.0+0xe2>
   429f0:	2b10      	cmp	r3, #16
   429f2:	d109      	bne.n	42a08 <_strtol_l.isra.0+0x40>
   429f4:	2c30      	cmp	r4, #48	; 0x30
   429f6:	d107      	bne.n	42a08 <_strtol_l.isra.0+0x40>
   429f8:	7828      	ldrb	r0, [r5, #0]
   429fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   429fe:	2858      	cmp	r0, #88	; 0x58
   42a00:	d14e      	bne.n	42aa0 <_strtol_l.isra.0+0xd8>
   42a02:	786c      	ldrb	r4, [r5, #1]
   42a04:	2310      	movs	r3, #16
   42a06:	3502      	adds	r5, #2
   42a08:	f1b8 0f00 	cmp.w	r8, #0
   42a0c:	f04f 0700 	mov.w	r7, #0
   42a10:	bf14      	ite	ne
   42a12:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   42a16:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   42a1a:	4638      	mov	r0, r7
   42a1c:	fbbc f9f3 	udiv	r9, ip, r3
   42a20:	fb03 ca19 	mls	sl, r3, r9, ip
   42a24:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   42a28:	2e09      	cmp	r6, #9
   42a2a:	d817      	bhi.n	42a5c <_strtol_l.isra.0+0x94>
   42a2c:	4634      	mov	r4, r6
   42a2e:	42a3      	cmp	r3, r4
   42a30:	dd23      	ble.n	42a7a <_strtol_l.isra.0+0xb2>
   42a32:	1c7e      	adds	r6, r7, #1
   42a34:	d007      	beq.n	42a46 <_strtol_l.isra.0+0x7e>
   42a36:	4581      	cmp	r9, r0
   42a38:	d31c      	bcc.n	42a74 <_strtol_l.isra.0+0xac>
   42a3a:	d101      	bne.n	42a40 <_strtol_l.isra.0+0x78>
   42a3c:	45a2      	cmp	sl, r4
   42a3e:	db19      	blt.n	42a74 <_strtol_l.isra.0+0xac>
   42a40:	fb00 4003 	mla	r0, r0, r3, r4
   42a44:	2701      	movs	r7, #1
   42a46:	f815 4b01 	ldrb.w	r4, [r5], #1
   42a4a:	e7eb      	b.n	42a24 <_strtol_l.isra.0+0x5c>
   42a4c:	4628      	mov	r0, r5
   42a4e:	e7c0      	b.n	429d2 <_strtol_l.isra.0+0xa>
   42a50:	2c2b      	cmp	r4, #43	; 0x2b
   42a52:	46b0      	mov	r8, r6
   42a54:	bf04      	itt	eq
   42a56:	782c      	ldrbeq	r4, [r5, #0]
   42a58:	1c85      	addeq	r5, r0, #2
   42a5a:	e7c7      	b.n	429ec <_strtol_l.isra.0+0x24>
   42a5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   42a60:	2e19      	cmp	r6, #25
   42a62:	d801      	bhi.n	42a68 <_strtol_l.isra.0+0xa0>
   42a64:	3c37      	subs	r4, #55	; 0x37
   42a66:	e7e2      	b.n	42a2e <_strtol_l.isra.0+0x66>
   42a68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   42a6c:	2e19      	cmp	r6, #25
   42a6e:	d804      	bhi.n	42a7a <_strtol_l.isra.0+0xb2>
   42a70:	3c57      	subs	r4, #87	; 0x57
   42a72:	e7dc      	b.n	42a2e <_strtol_l.isra.0+0x66>
   42a74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   42a78:	e7e5      	b.n	42a46 <_strtol_l.isra.0+0x7e>
   42a7a:	1c7b      	adds	r3, r7, #1
   42a7c:	d106      	bne.n	42a8c <_strtol_l.isra.0+0xc4>
   42a7e:	2322      	movs	r3, #34	; 0x22
   42a80:	4660      	mov	r0, ip
   42a82:	f8ce 3000 	str.w	r3, [lr]
   42a86:	b942      	cbnz	r2, 42a9a <_strtol_l.isra.0+0xd2>
   42a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42a8c:	f1b8 0f00 	cmp.w	r8, #0
   42a90:	d000      	beq.n	42a94 <_strtol_l.isra.0+0xcc>
   42a92:	4240      	negs	r0, r0
   42a94:	2a00      	cmp	r2, #0
   42a96:	d0f7      	beq.n	42a88 <_strtol_l.isra.0+0xc0>
   42a98:	b107      	cbz	r7, 42a9c <_strtol_l.isra.0+0xd4>
   42a9a:	1e69      	subs	r1, r5, #1
   42a9c:	6011      	str	r1, [r2, #0]
   42a9e:	e7f3      	b.n	42a88 <_strtol_l.isra.0+0xc0>
   42aa0:	2430      	movs	r4, #48	; 0x30
   42aa2:	2b00      	cmp	r3, #0
   42aa4:	d1b0      	bne.n	42a08 <_strtol_l.isra.0+0x40>
   42aa6:	2308      	movs	r3, #8
   42aa8:	e7ae      	b.n	42a08 <_strtol_l.isra.0+0x40>
   42aaa:	2c30      	cmp	r4, #48	; 0x30
   42aac:	d0a4      	beq.n	429f8 <_strtol_l.isra.0+0x30>
   42aae:	230a      	movs	r3, #10
   42ab0:	e7aa      	b.n	42a08 <_strtol_l.isra.0+0x40>
   42ab2:	bf00      	nop
   42ab4:	00052acf 	.word	0x00052acf

00042ab8 <strtol>:
   42ab8:	4613      	mov	r3, r2
   42aba:	460a      	mov	r2, r1
   42abc:	4601      	mov	r1, r0
   42abe:	4802      	ldr	r0, [pc, #8]	; (42ac8 <strtol+0x10>)
   42ac0:	6800      	ldr	r0, [r0, #0]
   42ac2:	f7ff bf81 	b.w	429c8 <_strtol_l.isra.0>
   42ac6:	bf00      	nop
   42ac8:	200208e0 	.word	0x200208e0

00042acc <_strtoul_l.isra.0>:
   42acc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   42ad0:	4686      	mov	lr, r0
   42ad2:	4f37      	ldr	r7, [pc, #220]	; (42bb0 <_strtoul_l.isra.0+0xe4>)
   42ad4:	4608      	mov	r0, r1
   42ad6:	4605      	mov	r5, r0
   42ad8:	f815 4b01 	ldrb.w	r4, [r5], #1
   42adc:	5de6      	ldrb	r6, [r4, r7]
   42ade:	f016 0608 	ands.w	r6, r6, #8
   42ae2:	d131      	bne.n	42b48 <_strtoul_l.isra.0+0x7c>
   42ae4:	2c2d      	cmp	r4, #45	; 0x2d
   42ae6:	d131      	bne.n	42b4c <_strtoul_l.isra.0+0x80>
   42ae8:	782c      	ldrb	r4, [r5, #0]
   42aea:	f04f 0801 	mov.w	r8, #1
   42aee:	1c85      	adds	r5, r0, #2
   42af0:	2b00      	cmp	r3, #0
   42af2:	d059      	beq.n	42ba8 <_strtoul_l.isra.0+0xdc>
   42af4:	2b10      	cmp	r3, #16
   42af6:	d109      	bne.n	42b0c <_strtoul_l.isra.0+0x40>
   42af8:	2c30      	cmp	r4, #48	; 0x30
   42afa:	d107      	bne.n	42b0c <_strtoul_l.isra.0+0x40>
   42afc:	7828      	ldrb	r0, [r5, #0]
   42afe:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   42b02:	2858      	cmp	r0, #88	; 0x58
   42b04:	d14b      	bne.n	42b9e <_strtoul_l.isra.0+0xd2>
   42b06:	786c      	ldrb	r4, [r5, #1]
   42b08:	2310      	movs	r3, #16
   42b0a:	3502      	adds	r5, #2
   42b0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   42b10:	2600      	movs	r6, #0
   42b12:	fbbc fcf3 	udiv	ip, ip, r3
   42b16:	fb03 f90c 	mul.w	r9, r3, ip
   42b1a:	4630      	mov	r0, r6
   42b1c:	ea6f 0909 	mvn.w	r9, r9
   42b20:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
   42b24:	2f09      	cmp	r7, #9
   42b26:	d817      	bhi.n	42b58 <_strtoul_l.isra.0+0x8c>
   42b28:	463c      	mov	r4, r7
   42b2a:	42a3      	cmp	r3, r4
   42b2c:	dd23      	ble.n	42b76 <_strtoul_l.isra.0+0xaa>
   42b2e:	2e00      	cmp	r6, #0
   42b30:	db1e      	blt.n	42b70 <_strtoul_l.isra.0+0xa4>
   42b32:	4584      	cmp	ip, r0
   42b34:	d31c      	bcc.n	42b70 <_strtoul_l.isra.0+0xa4>
   42b36:	d101      	bne.n	42b3c <_strtoul_l.isra.0+0x70>
   42b38:	45a1      	cmp	r9, r4
   42b3a:	db19      	blt.n	42b70 <_strtoul_l.isra.0+0xa4>
   42b3c:	fb00 4003 	mla	r0, r0, r3, r4
   42b40:	2601      	movs	r6, #1
   42b42:	f815 4b01 	ldrb.w	r4, [r5], #1
   42b46:	e7eb      	b.n	42b20 <_strtoul_l.isra.0+0x54>
   42b48:	4628      	mov	r0, r5
   42b4a:	e7c4      	b.n	42ad6 <_strtoul_l.isra.0+0xa>
   42b4c:	2c2b      	cmp	r4, #43	; 0x2b
   42b4e:	46b0      	mov	r8, r6
   42b50:	bf04      	itt	eq
   42b52:	782c      	ldrbeq	r4, [r5, #0]
   42b54:	1c85      	addeq	r5, r0, #2
   42b56:	e7cb      	b.n	42af0 <_strtoul_l.isra.0+0x24>
   42b58:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
   42b5c:	2f19      	cmp	r7, #25
   42b5e:	d801      	bhi.n	42b64 <_strtoul_l.isra.0+0x98>
   42b60:	3c37      	subs	r4, #55	; 0x37
   42b62:	e7e2      	b.n	42b2a <_strtoul_l.isra.0+0x5e>
   42b64:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
   42b68:	2f19      	cmp	r7, #25
   42b6a:	d804      	bhi.n	42b76 <_strtoul_l.isra.0+0xaa>
   42b6c:	3c57      	subs	r4, #87	; 0x57
   42b6e:	e7dc      	b.n	42b2a <_strtoul_l.isra.0+0x5e>
   42b70:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   42b74:	e7e5      	b.n	42b42 <_strtoul_l.isra.0+0x76>
   42b76:	2e00      	cmp	r6, #0
   42b78:	da07      	bge.n	42b8a <_strtoul_l.isra.0+0xbe>
   42b7a:	2322      	movs	r3, #34	; 0x22
   42b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42b80:	f8ce 3000 	str.w	r3, [lr]
   42b84:	b942      	cbnz	r2, 42b98 <_strtoul_l.isra.0+0xcc>
   42b86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42b8a:	f1b8 0f00 	cmp.w	r8, #0
   42b8e:	d000      	beq.n	42b92 <_strtoul_l.isra.0+0xc6>
   42b90:	4240      	negs	r0, r0
   42b92:	2a00      	cmp	r2, #0
   42b94:	d0f7      	beq.n	42b86 <_strtoul_l.isra.0+0xba>
   42b96:	b106      	cbz	r6, 42b9a <_strtoul_l.isra.0+0xce>
   42b98:	1e69      	subs	r1, r5, #1
   42b9a:	6011      	str	r1, [r2, #0]
   42b9c:	e7f3      	b.n	42b86 <_strtoul_l.isra.0+0xba>
   42b9e:	2430      	movs	r4, #48	; 0x30
   42ba0:	2b00      	cmp	r3, #0
   42ba2:	d1b3      	bne.n	42b0c <_strtoul_l.isra.0+0x40>
   42ba4:	2308      	movs	r3, #8
   42ba6:	e7b1      	b.n	42b0c <_strtoul_l.isra.0+0x40>
   42ba8:	2c30      	cmp	r4, #48	; 0x30
   42baa:	d0a7      	beq.n	42afc <_strtoul_l.isra.0+0x30>
   42bac:	230a      	movs	r3, #10
   42bae:	e7ad      	b.n	42b0c <_strtoul_l.isra.0+0x40>
   42bb0:	00052acf 	.word	0x00052acf

00042bb4 <strtoul>:
   42bb4:	4613      	mov	r3, r2
   42bb6:	460a      	mov	r2, r1
   42bb8:	4601      	mov	r1, r0
   42bba:	4802      	ldr	r0, [pc, #8]	; (42bc4 <strtoul+0x10>)
   42bbc:	6800      	ldr	r0, [r0, #0]
   42bbe:	f7ff bf85 	b.w	42acc <_strtoul_l.isra.0>
   42bc2:	bf00      	nop
   42bc4:	200208e0 	.word	0x200208e0

00042bc8 <vsniprintf>:
   42bc8:	b507      	push	{r0, r1, r2, lr}
   42bca:	9300      	str	r3, [sp, #0]
   42bcc:	4613      	mov	r3, r2
   42bce:	460a      	mov	r2, r1
   42bd0:	4601      	mov	r1, r0
   42bd2:	4803      	ldr	r0, [pc, #12]	; (42be0 <vsniprintf+0x18>)
   42bd4:	6800      	ldr	r0, [r0, #0]
   42bd6:	f005 fd38 	bl	4864a <_vsniprintf_r>
   42bda:	b003      	add	sp, #12
   42bdc:	f85d fb04 	ldr.w	pc, [sp], #4
   42be0:	200208e0 	.word	0x200208e0

00042be4 <_vsiprintf_r>:
   42be4:	b500      	push	{lr}
   42be6:	b09b      	sub	sp, #108	; 0x6c
   42be8:	9100      	str	r1, [sp, #0]
   42bea:	9104      	str	r1, [sp, #16]
   42bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   42bf0:	9105      	str	r1, [sp, #20]
   42bf2:	9102      	str	r1, [sp, #8]
   42bf4:	4905      	ldr	r1, [pc, #20]	; (42c0c <_vsiprintf_r+0x28>)
   42bf6:	9103      	str	r1, [sp, #12]
   42bf8:	4669      	mov	r1, sp
   42bfa:	f000 fdbb 	bl	43774 <_svfiprintf_r>
   42bfe:	9b00      	ldr	r3, [sp, #0]
   42c00:	2200      	movs	r2, #0
   42c02:	701a      	strb	r2, [r3, #0]
   42c04:	b01b      	add	sp, #108	; 0x6c
   42c06:	f85d fb04 	ldr.w	pc, [sp], #4
   42c0a:	bf00      	nop
   42c0c:	ffff0208 	.word	0xffff0208

00042c10 <vsiprintf>:
   42c10:	4613      	mov	r3, r2
   42c12:	460a      	mov	r2, r1
   42c14:	4601      	mov	r1, r0
   42c16:	4802      	ldr	r0, [pc, #8]	; (42c20 <vsiprintf+0x10>)
   42c18:	6800      	ldr	r0, [r0, #0]
   42c1a:	f7ff bfe3 	b.w	42be4 <_vsiprintf_r>
   42c1e:	bf00      	nop
   42c20:	200208e0 	.word	0x200208e0

00042c24 <__swbuf_r>:
   42c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42c26:	460e      	mov	r6, r1
   42c28:	4614      	mov	r4, r2
   42c2a:	4605      	mov	r5, r0
   42c2c:	b118      	cbz	r0, 42c36 <__swbuf_r+0x12>
   42c2e:	6983      	ldr	r3, [r0, #24]
   42c30:	b90b      	cbnz	r3, 42c36 <__swbuf_r+0x12>
   42c32:	f000 f9db 	bl	42fec <__sinit>
   42c36:	4b21      	ldr	r3, [pc, #132]	; (42cbc <__swbuf_r+0x98>)
   42c38:	429c      	cmp	r4, r3
   42c3a:	d12b      	bne.n	42c94 <__swbuf_r+0x70>
   42c3c:	686c      	ldr	r4, [r5, #4]
   42c3e:	69a3      	ldr	r3, [r4, #24]
   42c40:	60a3      	str	r3, [r4, #8]
   42c42:	89a3      	ldrh	r3, [r4, #12]
   42c44:	071a      	lsls	r2, r3, #28
   42c46:	d52f      	bpl.n	42ca8 <__swbuf_r+0x84>
   42c48:	6923      	ldr	r3, [r4, #16]
   42c4a:	b36b      	cbz	r3, 42ca8 <__swbuf_r+0x84>
   42c4c:	6923      	ldr	r3, [r4, #16]
   42c4e:	b2f6      	uxtb	r6, r6
   42c50:	6820      	ldr	r0, [r4, #0]
   42c52:	4637      	mov	r7, r6
   42c54:	1ac0      	subs	r0, r0, r3
   42c56:	6963      	ldr	r3, [r4, #20]
   42c58:	4283      	cmp	r3, r0
   42c5a:	dc04      	bgt.n	42c66 <__swbuf_r+0x42>
   42c5c:	4621      	mov	r1, r4
   42c5e:	4628      	mov	r0, r5
   42c60:	f000 f946 	bl	42ef0 <_fflush_r>
   42c64:	bb30      	cbnz	r0, 42cb4 <__swbuf_r+0x90>
   42c66:	68a3      	ldr	r3, [r4, #8]
   42c68:	3001      	adds	r0, #1
   42c6a:	3b01      	subs	r3, #1
   42c6c:	60a3      	str	r3, [r4, #8]
   42c6e:	6823      	ldr	r3, [r4, #0]
   42c70:	1c5a      	adds	r2, r3, #1
   42c72:	6022      	str	r2, [r4, #0]
   42c74:	701e      	strb	r6, [r3, #0]
   42c76:	6963      	ldr	r3, [r4, #20]
   42c78:	4283      	cmp	r3, r0
   42c7a:	d004      	beq.n	42c86 <__swbuf_r+0x62>
   42c7c:	89a3      	ldrh	r3, [r4, #12]
   42c7e:	07db      	lsls	r3, r3, #31
   42c80:	d506      	bpl.n	42c90 <__swbuf_r+0x6c>
   42c82:	2e0a      	cmp	r6, #10
   42c84:	d104      	bne.n	42c90 <__swbuf_r+0x6c>
   42c86:	4621      	mov	r1, r4
   42c88:	4628      	mov	r0, r5
   42c8a:	f000 f931 	bl	42ef0 <_fflush_r>
   42c8e:	b988      	cbnz	r0, 42cb4 <__swbuf_r+0x90>
   42c90:	4638      	mov	r0, r7
   42c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   42c94:	4b0a      	ldr	r3, [pc, #40]	; (42cc0 <__swbuf_r+0x9c>)
   42c96:	429c      	cmp	r4, r3
   42c98:	d101      	bne.n	42c9e <__swbuf_r+0x7a>
   42c9a:	68ac      	ldr	r4, [r5, #8]
   42c9c:	e7cf      	b.n	42c3e <__swbuf_r+0x1a>
   42c9e:	4b09      	ldr	r3, [pc, #36]	; (42cc4 <__swbuf_r+0xa0>)
   42ca0:	429c      	cmp	r4, r3
   42ca2:	bf08      	it	eq
   42ca4:	68ec      	ldreq	r4, [r5, #12]
   42ca6:	e7ca      	b.n	42c3e <__swbuf_r+0x1a>
   42ca8:	4621      	mov	r1, r4
   42caa:	4628      	mov	r0, r5
   42cac:	f000 f81e 	bl	42cec <__swsetup_r>
   42cb0:	2800      	cmp	r0, #0
   42cb2:	d0cb      	beq.n	42c4c <__swbuf_r+0x28>
   42cb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   42cb8:	e7ea      	b.n	42c90 <__swbuf_r+0x6c>
   42cba:	bf00      	nop
   42cbc:	0004a99c 	.word	0x0004a99c
   42cc0:	0004a9bc 	.word	0x0004a9bc
   42cc4:	0004a97c 	.word	0x0004a97c

00042cc8 <_write_r>:
   42cc8:	b538      	push	{r3, r4, r5, lr}
   42cca:	4605      	mov	r5, r0
   42ccc:	4c06      	ldr	r4, [pc, #24]	; (42ce8 <_write_r+0x20>)
   42cce:	4608      	mov	r0, r1
   42cd0:	4611      	mov	r1, r2
   42cd2:	2200      	movs	r2, #0
   42cd4:	6022      	str	r2, [r4, #0]
   42cd6:	461a      	mov	r2, r3
   42cd8:	f002 fe70 	bl	459bc <_write>
   42cdc:	1c43      	adds	r3, r0, #1
   42cde:	d102      	bne.n	42ce6 <_write_r+0x1e>
   42ce0:	6823      	ldr	r3, [r4, #0]
   42ce2:	b103      	cbz	r3, 42ce6 <_write_r+0x1e>
   42ce4:	602b      	str	r3, [r5, #0]
   42ce6:	bd38      	pop	{r3, r4, r5, pc}
   42ce8:	2002d330 	.word	0x2002d330

00042cec <__swsetup_r>:
   42cec:	4b32      	ldr	r3, [pc, #200]	; (42db8 <__swsetup_r+0xcc>)
   42cee:	b570      	push	{r4, r5, r6, lr}
   42cf0:	681d      	ldr	r5, [r3, #0]
   42cf2:	4606      	mov	r6, r0
   42cf4:	460c      	mov	r4, r1
   42cf6:	b125      	cbz	r5, 42d02 <__swsetup_r+0x16>
   42cf8:	69ab      	ldr	r3, [r5, #24]
   42cfa:	b913      	cbnz	r3, 42d02 <__swsetup_r+0x16>
   42cfc:	4628      	mov	r0, r5
   42cfe:	f000 f975 	bl	42fec <__sinit>
   42d02:	4b2e      	ldr	r3, [pc, #184]	; (42dbc <__swsetup_r+0xd0>)
   42d04:	429c      	cmp	r4, r3
   42d06:	d10f      	bne.n	42d28 <__swsetup_r+0x3c>
   42d08:	686c      	ldr	r4, [r5, #4]
   42d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   42d0e:	b29a      	uxth	r2, r3
   42d10:	0715      	lsls	r5, r2, #28
   42d12:	d42c      	bmi.n	42d6e <__swsetup_r+0x82>
   42d14:	06d0      	lsls	r0, r2, #27
   42d16:	d411      	bmi.n	42d3c <__swsetup_r+0x50>
   42d18:	2209      	movs	r2, #9
   42d1a:	6032      	str	r2, [r6, #0]
   42d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42d24:	81a3      	strh	r3, [r4, #12]
   42d26:	e03e      	b.n	42da6 <__swsetup_r+0xba>
   42d28:	4b25      	ldr	r3, [pc, #148]	; (42dc0 <__swsetup_r+0xd4>)
   42d2a:	429c      	cmp	r4, r3
   42d2c:	d101      	bne.n	42d32 <__swsetup_r+0x46>
   42d2e:	68ac      	ldr	r4, [r5, #8]
   42d30:	e7eb      	b.n	42d0a <__swsetup_r+0x1e>
   42d32:	4b24      	ldr	r3, [pc, #144]	; (42dc4 <__swsetup_r+0xd8>)
   42d34:	429c      	cmp	r4, r3
   42d36:	bf08      	it	eq
   42d38:	68ec      	ldreq	r4, [r5, #12]
   42d3a:	e7e6      	b.n	42d0a <__swsetup_r+0x1e>
   42d3c:	0751      	lsls	r1, r2, #29
   42d3e:	d512      	bpl.n	42d66 <__swsetup_r+0x7a>
   42d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
   42d42:	b141      	cbz	r1, 42d56 <__swsetup_r+0x6a>
   42d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42d48:	4299      	cmp	r1, r3
   42d4a:	d002      	beq.n	42d52 <__swsetup_r+0x66>
   42d4c:	4630      	mov	r0, r6
   42d4e:	f7ff f853 	bl	41df8 <_free_r>
   42d52:	2300      	movs	r3, #0
   42d54:	6363      	str	r3, [r4, #52]	; 0x34
   42d56:	89a3      	ldrh	r3, [r4, #12]
   42d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   42d5c:	81a3      	strh	r3, [r4, #12]
   42d5e:	2300      	movs	r3, #0
   42d60:	6063      	str	r3, [r4, #4]
   42d62:	6923      	ldr	r3, [r4, #16]
   42d64:	6023      	str	r3, [r4, #0]
   42d66:	89a3      	ldrh	r3, [r4, #12]
   42d68:	f043 0308 	orr.w	r3, r3, #8
   42d6c:	81a3      	strh	r3, [r4, #12]
   42d6e:	6923      	ldr	r3, [r4, #16]
   42d70:	b94b      	cbnz	r3, 42d86 <__swsetup_r+0x9a>
   42d72:	89a3      	ldrh	r3, [r4, #12]
   42d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
   42d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   42d7c:	d003      	beq.n	42d86 <__swsetup_r+0x9a>
   42d7e:	4621      	mov	r1, r4
   42d80:	4630      	mov	r0, r6
   42d82:	f000 fbe9 	bl	43558 <__smakebuf_r>
   42d86:	89a2      	ldrh	r2, [r4, #12]
   42d88:	f012 0301 	ands.w	r3, r2, #1
   42d8c:	d00c      	beq.n	42da8 <__swsetup_r+0xbc>
   42d8e:	2300      	movs	r3, #0
   42d90:	60a3      	str	r3, [r4, #8]
   42d92:	6963      	ldr	r3, [r4, #20]
   42d94:	425b      	negs	r3, r3
   42d96:	61a3      	str	r3, [r4, #24]
   42d98:	6923      	ldr	r3, [r4, #16]
   42d9a:	b953      	cbnz	r3, 42db2 <__swsetup_r+0xc6>
   42d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   42da0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   42da4:	d1ba      	bne.n	42d1c <__swsetup_r+0x30>
   42da6:	bd70      	pop	{r4, r5, r6, pc}
   42da8:	0792      	lsls	r2, r2, #30
   42daa:	bf58      	it	pl
   42dac:	6963      	ldrpl	r3, [r4, #20]
   42dae:	60a3      	str	r3, [r4, #8]
   42db0:	e7f2      	b.n	42d98 <__swsetup_r+0xac>
   42db2:	2000      	movs	r0, #0
   42db4:	e7f7      	b.n	42da6 <__swsetup_r+0xba>
   42db6:	bf00      	nop
   42db8:	200208e0 	.word	0x200208e0
   42dbc:	0004a99c 	.word	0x0004a99c
   42dc0:	0004a9bc 	.word	0x0004a9bc
   42dc4:	0004a97c 	.word	0x0004a97c

00042dc8 <_close_r>:
   42dc8:	b538      	push	{r3, r4, r5, lr}
   42dca:	2300      	movs	r3, #0
   42dcc:	4c05      	ldr	r4, [pc, #20]	; (42de4 <_close_r+0x1c>)
   42dce:	4605      	mov	r5, r0
   42dd0:	4608      	mov	r0, r1
   42dd2:	6023      	str	r3, [r4, #0]
   42dd4:	f002 fdf6 	bl	459c4 <_close>
   42dd8:	1c43      	adds	r3, r0, #1
   42dda:	d102      	bne.n	42de2 <_close_r+0x1a>
   42ddc:	6823      	ldr	r3, [r4, #0]
   42dde:	b103      	cbz	r3, 42de2 <_close_r+0x1a>
   42de0:	602b      	str	r3, [r5, #0]
   42de2:	bd38      	pop	{r3, r4, r5, pc}
   42de4:	2002d330 	.word	0x2002d330

00042de8 <__sflush_r>:
   42de8:	898a      	ldrh	r2, [r1, #12]
   42dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42dee:	4605      	mov	r5, r0
   42df0:	0710      	lsls	r0, r2, #28
   42df2:	460c      	mov	r4, r1
   42df4:	d458      	bmi.n	42ea8 <__sflush_r+0xc0>
   42df6:	684b      	ldr	r3, [r1, #4]
   42df8:	2b00      	cmp	r3, #0
   42dfa:	dc05      	bgt.n	42e08 <__sflush_r+0x20>
   42dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   42dfe:	2b00      	cmp	r3, #0
   42e00:	dc02      	bgt.n	42e08 <__sflush_r+0x20>
   42e02:	2000      	movs	r0, #0
   42e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   42e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   42e0a:	2e00      	cmp	r6, #0
   42e0c:	d0f9      	beq.n	42e02 <__sflush_r+0x1a>
   42e0e:	2300      	movs	r3, #0
   42e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   42e14:	682f      	ldr	r7, [r5, #0]
   42e16:	602b      	str	r3, [r5, #0]
   42e18:	d032      	beq.n	42e80 <__sflush_r+0x98>
   42e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   42e1c:	89a3      	ldrh	r3, [r4, #12]
   42e1e:	075a      	lsls	r2, r3, #29
   42e20:	d505      	bpl.n	42e2e <__sflush_r+0x46>
   42e22:	6863      	ldr	r3, [r4, #4]
   42e24:	1ac0      	subs	r0, r0, r3
   42e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42e28:	b10b      	cbz	r3, 42e2e <__sflush_r+0x46>
   42e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   42e2c:	1ac0      	subs	r0, r0, r3
   42e2e:	2300      	movs	r3, #0
   42e30:	4602      	mov	r2, r0
   42e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   42e34:	4628      	mov	r0, r5
   42e36:	6a21      	ldr	r1, [r4, #32]
   42e38:	47b0      	blx	r6
   42e3a:	1c43      	adds	r3, r0, #1
   42e3c:	89a3      	ldrh	r3, [r4, #12]
   42e3e:	d106      	bne.n	42e4e <__sflush_r+0x66>
   42e40:	6829      	ldr	r1, [r5, #0]
   42e42:	291d      	cmp	r1, #29
   42e44:	d82c      	bhi.n	42ea0 <__sflush_r+0xb8>
   42e46:	4a29      	ldr	r2, [pc, #164]	; (42eec <__sflush_r+0x104>)
   42e48:	40ca      	lsrs	r2, r1
   42e4a:	07d6      	lsls	r6, r2, #31
   42e4c:	d528      	bpl.n	42ea0 <__sflush_r+0xb8>
   42e4e:	2200      	movs	r2, #0
   42e50:	04d9      	lsls	r1, r3, #19
   42e52:	6062      	str	r2, [r4, #4]
   42e54:	6922      	ldr	r2, [r4, #16]
   42e56:	6022      	str	r2, [r4, #0]
   42e58:	d504      	bpl.n	42e64 <__sflush_r+0x7c>
   42e5a:	1c42      	adds	r2, r0, #1
   42e5c:	d101      	bne.n	42e62 <__sflush_r+0x7a>
   42e5e:	682b      	ldr	r3, [r5, #0]
   42e60:	b903      	cbnz	r3, 42e64 <__sflush_r+0x7c>
   42e62:	6560      	str	r0, [r4, #84]	; 0x54
   42e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
   42e66:	602f      	str	r7, [r5, #0]
   42e68:	2900      	cmp	r1, #0
   42e6a:	d0ca      	beq.n	42e02 <__sflush_r+0x1a>
   42e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42e70:	4299      	cmp	r1, r3
   42e72:	d002      	beq.n	42e7a <__sflush_r+0x92>
   42e74:	4628      	mov	r0, r5
   42e76:	f7fe ffbf 	bl	41df8 <_free_r>
   42e7a:	2000      	movs	r0, #0
   42e7c:	6360      	str	r0, [r4, #52]	; 0x34
   42e7e:	e7c1      	b.n	42e04 <__sflush_r+0x1c>
   42e80:	6a21      	ldr	r1, [r4, #32]
   42e82:	2301      	movs	r3, #1
   42e84:	4628      	mov	r0, r5
   42e86:	47b0      	blx	r6
   42e88:	1c41      	adds	r1, r0, #1
   42e8a:	d1c7      	bne.n	42e1c <__sflush_r+0x34>
   42e8c:	682b      	ldr	r3, [r5, #0]
   42e8e:	2b00      	cmp	r3, #0
   42e90:	d0c4      	beq.n	42e1c <__sflush_r+0x34>
   42e92:	2b1d      	cmp	r3, #29
   42e94:	d001      	beq.n	42e9a <__sflush_r+0xb2>
   42e96:	2b16      	cmp	r3, #22
   42e98:	d101      	bne.n	42e9e <__sflush_r+0xb6>
   42e9a:	602f      	str	r7, [r5, #0]
   42e9c:	e7b1      	b.n	42e02 <__sflush_r+0x1a>
   42e9e:	89a3      	ldrh	r3, [r4, #12]
   42ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42ea4:	81a3      	strh	r3, [r4, #12]
   42ea6:	e7ad      	b.n	42e04 <__sflush_r+0x1c>
   42ea8:	690f      	ldr	r7, [r1, #16]
   42eaa:	2f00      	cmp	r7, #0
   42eac:	d0a9      	beq.n	42e02 <__sflush_r+0x1a>
   42eae:	0793      	lsls	r3, r2, #30
   42eb0:	680e      	ldr	r6, [r1, #0]
   42eb2:	600f      	str	r7, [r1, #0]
   42eb4:	bf0c      	ite	eq
   42eb6:	694b      	ldreq	r3, [r1, #20]
   42eb8:	2300      	movne	r3, #0
   42eba:	eba6 0807 	sub.w	r8, r6, r7
   42ebe:	608b      	str	r3, [r1, #8]
   42ec0:	f1b8 0f00 	cmp.w	r8, #0
   42ec4:	dd9d      	ble.n	42e02 <__sflush_r+0x1a>
   42ec6:	4643      	mov	r3, r8
   42ec8:	463a      	mov	r2, r7
   42eca:	6a21      	ldr	r1, [r4, #32]
   42ecc:	4628      	mov	r0, r5
   42ece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   42ed0:	47b0      	blx	r6
   42ed2:	2800      	cmp	r0, #0
   42ed4:	dc06      	bgt.n	42ee4 <__sflush_r+0xfc>
   42ed6:	89a3      	ldrh	r3, [r4, #12]
   42ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   42edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42ee0:	81a3      	strh	r3, [r4, #12]
   42ee2:	e78f      	b.n	42e04 <__sflush_r+0x1c>
   42ee4:	4407      	add	r7, r0
   42ee6:	eba8 0800 	sub.w	r8, r8, r0
   42eea:	e7e9      	b.n	42ec0 <__sflush_r+0xd8>
   42eec:	20400001 	.word	0x20400001

00042ef0 <_fflush_r>:
   42ef0:	b538      	push	{r3, r4, r5, lr}
   42ef2:	690b      	ldr	r3, [r1, #16]
   42ef4:	4605      	mov	r5, r0
   42ef6:	460c      	mov	r4, r1
   42ef8:	b913      	cbnz	r3, 42f00 <_fflush_r+0x10>
   42efa:	2500      	movs	r5, #0
   42efc:	4628      	mov	r0, r5
   42efe:	bd38      	pop	{r3, r4, r5, pc}
   42f00:	b118      	cbz	r0, 42f0a <_fflush_r+0x1a>
   42f02:	6983      	ldr	r3, [r0, #24]
   42f04:	b90b      	cbnz	r3, 42f0a <_fflush_r+0x1a>
   42f06:	f000 f871 	bl	42fec <__sinit>
   42f0a:	4b14      	ldr	r3, [pc, #80]	; (42f5c <_fflush_r+0x6c>)
   42f0c:	429c      	cmp	r4, r3
   42f0e:	d11b      	bne.n	42f48 <_fflush_r+0x58>
   42f10:	686c      	ldr	r4, [r5, #4]
   42f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   42f16:	2b00      	cmp	r3, #0
   42f18:	d0ef      	beq.n	42efa <_fflush_r+0xa>
   42f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   42f1c:	07d0      	lsls	r0, r2, #31
   42f1e:	d404      	bmi.n	42f2a <_fflush_r+0x3a>
   42f20:	0599      	lsls	r1, r3, #22
   42f22:	d402      	bmi.n	42f2a <_fflush_r+0x3a>
   42f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   42f26:	f005 fd8b 	bl	48a40 <__retarget_lock_acquire_recursive>
   42f2a:	4628      	mov	r0, r5
   42f2c:	4621      	mov	r1, r4
   42f2e:	f7ff ff5b 	bl	42de8 <__sflush_r>
   42f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
   42f34:	4605      	mov	r5, r0
   42f36:	07da      	lsls	r2, r3, #31
   42f38:	d4e0      	bmi.n	42efc <_fflush_r+0xc>
   42f3a:	89a3      	ldrh	r3, [r4, #12]
   42f3c:	059b      	lsls	r3, r3, #22
   42f3e:	d4dd      	bmi.n	42efc <_fflush_r+0xc>
   42f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   42f42:	f005 fd7e 	bl	48a42 <__retarget_lock_release_recursive>
   42f46:	e7d9      	b.n	42efc <_fflush_r+0xc>
   42f48:	4b05      	ldr	r3, [pc, #20]	; (42f60 <_fflush_r+0x70>)
   42f4a:	429c      	cmp	r4, r3
   42f4c:	d101      	bne.n	42f52 <_fflush_r+0x62>
   42f4e:	68ac      	ldr	r4, [r5, #8]
   42f50:	e7df      	b.n	42f12 <_fflush_r+0x22>
   42f52:	4b04      	ldr	r3, [pc, #16]	; (42f64 <_fflush_r+0x74>)
   42f54:	429c      	cmp	r4, r3
   42f56:	bf08      	it	eq
   42f58:	68ec      	ldreq	r4, [r5, #12]
   42f5a:	e7da      	b.n	42f12 <_fflush_r+0x22>
   42f5c:	0004a99c 	.word	0x0004a99c
   42f60:	0004a9bc 	.word	0x0004a9bc
   42f64:	0004a97c 	.word	0x0004a97c

00042f68 <std>:
   42f68:	2300      	movs	r3, #0
   42f6a:	b510      	push	{r4, lr}
   42f6c:	4604      	mov	r4, r0
   42f6e:	6083      	str	r3, [r0, #8]
   42f70:	8181      	strh	r1, [r0, #12]
   42f72:	4619      	mov	r1, r3
   42f74:	6643      	str	r3, [r0, #100]	; 0x64
   42f76:	81c2      	strh	r2, [r0, #14]
   42f78:	2208      	movs	r2, #8
   42f7a:	6183      	str	r3, [r0, #24]
   42f7c:	e9c0 3300 	strd	r3, r3, [r0]
   42f80:	e9c0 3304 	strd	r3, r3, [r0, #16]
   42f84:	305c      	adds	r0, #92	; 0x5c
   42f86:	f005 f91f 	bl	481c8 <memset>
   42f8a:	4b05      	ldr	r3, [pc, #20]	; (42fa0 <std+0x38>)
   42f8c:	6224      	str	r4, [r4, #32]
   42f8e:	6263      	str	r3, [r4, #36]	; 0x24
   42f90:	4b04      	ldr	r3, [pc, #16]	; (42fa4 <std+0x3c>)
   42f92:	62a3      	str	r3, [r4, #40]	; 0x28
   42f94:	4b04      	ldr	r3, [pc, #16]	; (42fa8 <std+0x40>)
   42f96:	62e3      	str	r3, [r4, #44]	; 0x2c
   42f98:	4b04      	ldr	r3, [pc, #16]	; (42fac <std+0x44>)
   42f9a:	6323      	str	r3, [r4, #48]	; 0x30
   42f9c:	bd10      	pop	{r4, pc}
   42f9e:	bf00      	nop
   42fa0:	0004846f 	.word	0x0004846f
   42fa4:	00048495 	.word	0x00048495
   42fa8:	000484cd 	.word	0x000484cd
   42fac:	000484f1 	.word	0x000484f1

00042fb0 <_cleanup_r>:
   42fb0:	4901      	ldr	r1, [pc, #4]	; (42fb8 <_cleanup_r+0x8>)
   42fb2:	f005 bc21 	b.w	487f8 <_fwalk_reent>
   42fb6:	bf00      	nop
   42fb8:	00042ef1 	.word	0x00042ef1

00042fbc <__sfp_lock_acquire>:
   42fbc:	4801      	ldr	r0, [pc, #4]	; (42fc4 <__sfp_lock_acquire+0x8>)
   42fbe:	f005 bd3f 	b.w	48a40 <__retarget_lock_acquire_recursive>
   42fc2:	bf00      	nop
   42fc4:	2002d33c 	.word	0x2002d33c

00042fc8 <__sfp_lock_release>:
   42fc8:	4801      	ldr	r0, [pc, #4]	; (42fd0 <__sfp_lock_release+0x8>)
   42fca:	f005 bd3a 	b.w	48a42 <__retarget_lock_release_recursive>
   42fce:	bf00      	nop
   42fd0:	2002d33c 	.word	0x2002d33c

00042fd4 <__sinit_lock_acquire>:
   42fd4:	4801      	ldr	r0, [pc, #4]	; (42fdc <__sinit_lock_acquire+0x8>)
   42fd6:	f005 bd33 	b.w	48a40 <__retarget_lock_acquire_recursive>
   42fda:	bf00      	nop
   42fdc:	2002d337 	.word	0x2002d337

00042fe0 <__sinit_lock_release>:
   42fe0:	4801      	ldr	r0, [pc, #4]	; (42fe8 <__sinit_lock_release+0x8>)
   42fe2:	f005 bd2e 	b.w	48a42 <__retarget_lock_release_recursive>
   42fe6:	bf00      	nop
   42fe8:	2002d337 	.word	0x2002d337

00042fec <__sinit>:
   42fec:	b510      	push	{r4, lr}
   42fee:	4604      	mov	r4, r0
   42ff0:	f7ff fff0 	bl	42fd4 <__sinit_lock_acquire>
   42ff4:	69a3      	ldr	r3, [r4, #24]
   42ff6:	b11b      	cbz	r3, 43000 <__sinit+0x14>
   42ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   42ffc:	f7ff bff0 	b.w	42fe0 <__sinit_lock_release>
   43000:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   43004:	6523      	str	r3, [r4, #80]	; 0x50
   43006:	4620      	mov	r0, r4
   43008:	4b12      	ldr	r3, [pc, #72]	; (43054 <__sinit+0x68>)
   4300a:	4a13      	ldr	r2, [pc, #76]	; (43058 <__sinit+0x6c>)
   4300c:	681b      	ldr	r3, [r3, #0]
   4300e:	62a2      	str	r2, [r4, #40]	; 0x28
   43010:	42a3      	cmp	r3, r4
   43012:	bf04      	itt	eq
   43014:	2301      	moveq	r3, #1
   43016:	61a3      	streq	r3, [r4, #24]
   43018:	f000 f820 	bl	4305c <__sfp>
   4301c:	6060      	str	r0, [r4, #4]
   4301e:	4620      	mov	r0, r4
   43020:	f000 f81c 	bl	4305c <__sfp>
   43024:	60a0      	str	r0, [r4, #8]
   43026:	4620      	mov	r0, r4
   43028:	f000 f818 	bl	4305c <__sfp>
   4302c:	2200      	movs	r2, #0
   4302e:	60e0      	str	r0, [r4, #12]
   43030:	2104      	movs	r1, #4
   43032:	6860      	ldr	r0, [r4, #4]
   43034:	f7ff ff98 	bl	42f68 <std>
   43038:	2201      	movs	r2, #1
   4303a:	2109      	movs	r1, #9
   4303c:	68a0      	ldr	r0, [r4, #8]
   4303e:	f7ff ff93 	bl	42f68 <std>
   43042:	2202      	movs	r2, #2
   43044:	2112      	movs	r1, #18
   43046:	68e0      	ldr	r0, [r4, #12]
   43048:	f7ff ff8e 	bl	42f68 <std>
   4304c:	2301      	movs	r3, #1
   4304e:	61a3      	str	r3, [r4, #24]
   43050:	e7d2      	b.n	42ff8 <__sinit+0xc>
   43052:	bf00      	nop
   43054:	0004a950 	.word	0x0004a950
   43058:	00042fb1 	.word	0x00042fb1

0004305c <__sfp>:
   4305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4305e:	4607      	mov	r7, r0
   43060:	f7ff ffac 	bl	42fbc <__sfp_lock_acquire>
   43064:	4b1e      	ldr	r3, [pc, #120]	; (430e0 <__sfp+0x84>)
   43066:	681e      	ldr	r6, [r3, #0]
   43068:	69b3      	ldr	r3, [r6, #24]
   4306a:	b913      	cbnz	r3, 43072 <__sfp+0x16>
   4306c:	4630      	mov	r0, r6
   4306e:	f7ff ffbd 	bl	42fec <__sinit>
   43072:	3648      	adds	r6, #72	; 0x48
   43074:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   43078:	3b01      	subs	r3, #1
   4307a:	d503      	bpl.n	43084 <__sfp+0x28>
   4307c:	6833      	ldr	r3, [r6, #0]
   4307e:	b30b      	cbz	r3, 430c4 <__sfp+0x68>
   43080:	6836      	ldr	r6, [r6, #0]
   43082:	e7f7      	b.n	43074 <__sfp+0x18>
   43084:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   43088:	b9d5      	cbnz	r5, 430c0 <__sfp+0x64>
   4308a:	4b16      	ldr	r3, [pc, #88]	; (430e4 <__sfp+0x88>)
   4308c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   43090:	6665      	str	r5, [r4, #100]	; 0x64
   43092:	60e3      	str	r3, [r4, #12]
   43094:	f005 fcd3 	bl	48a3e <__retarget_lock_init_recursive>
   43098:	f7ff ff96 	bl	42fc8 <__sfp_lock_release>
   4309c:	6025      	str	r5, [r4, #0]
   4309e:	61a5      	str	r5, [r4, #24]
   430a0:	2208      	movs	r2, #8
   430a2:	4629      	mov	r1, r5
   430a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   430a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
   430ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
   430b0:	f005 f88a 	bl	481c8 <memset>
   430b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   430b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   430bc:	4620      	mov	r0, r4
   430be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   430c0:	3468      	adds	r4, #104	; 0x68
   430c2:	e7d9      	b.n	43078 <__sfp+0x1c>
   430c4:	2104      	movs	r1, #4
   430c6:	4638      	mov	r0, r7
   430c8:	f005 fb80 	bl	487cc <__sfmoreglue>
   430cc:	4604      	mov	r4, r0
   430ce:	6030      	str	r0, [r6, #0]
   430d0:	2800      	cmp	r0, #0
   430d2:	d1d5      	bne.n	43080 <__sfp+0x24>
   430d4:	f7ff ff78 	bl	42fc8 <__sfp_lock_release>
   430d8:	230c      	movs	r3, #12
   430da:	603b      	str	r3, [r7, #0]
   430dc:	e7ee      	b.n	430bc <__sfp+0x60>
   430de:	bf00      	nop
   430e0:	0004a950 	.word	0x0004a950
   430e4:	ffff0001 	.word	0xffff0001

000430e8 <__gethex>:
   430e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   430ec:	b08b      	sub	sp, #44	; 0x2c
   430ee:	468b      	mov	fp, r1
   430f0:	4690      	mov	r8, r2
   430f2:	9306      	str	r3, [sp, #24]
   430f4:	4bb5      	ldr	r3, [pc, #724]	; (433cc <__gethex+0x2e4>)
   430f6:	9002      	str	r0, [sp, #8]
   430f8:	681b      	ldr	r3, [r3, #0]
   430fa:	4618      	mov	r0, r3
   430fc:	9303      	str	r3, [sp, #12]
   430fe:	f7da f8b1 	bl	1d264 <strlen>
   43102:	9b03      	ldr	r3, [sp, #12]
   43104:	f8db 2000 	ldr.w	r2, [fp]
   43108:	4403      	add	r3, r0
   4310a:	9001      	str	r0, [sp, #4]
   4310c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   43110:	9307      	str	r3, [sp, #28]
   43112:	1c93      	adds	r3, r2, #2
   43114:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   43118:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   4311c:	32fe      	adds	r2, #254	; 0xfe
   4311e:	eb02 0a03 	add.w	sl, r2, r3
   43122:	461f      	mov	r7, r3
   43124:	f813 0b01 	ldrb.w	r0, [r3], #1
   43128:	2830      	cmp	r0, #48	; 0x30
   4312a:	d0f8      	beq.n	4311e <__gethex+0x36>
   4312c:	f005 fbbc 	bl	488a8 <__hexdig_fun>
   43130:	4604      	mov	r4, r0
   43132:	2800      	cmp	r0, #0
   43134:	d167      	bne.n	43206 <__gethex+0x11e>
   43136:	9a01      	ldr	r2, [sp, #4]
   43138:	4638      	mov	r0, r7
   4313a:	9903      	ldr	r1, [sp, #12]
   4313c:	f005 fa1d 	bl	4857a <strncmp>
   43140:	4605      	mov	r5, r0
   43142:	2800      	cmp	r0, #0
   43144:	d162      	bne.n	4320c <__gethex+0x124>
   43146:	9b01      	ldr	r3, [sp, #4]
   43148:	5cf8      	ldrb	r0, [r7, r3]
   4314a:	18fe      	adds	r6, r7, r3
   4314c:	f005 fbac 	bl	488a8 <__hexdig_fun>
   43150:	2800      	cmp	r0, #0
   43152:	d05d      	beq.n	43210 <__gethex+0x128>
   43154:	4633      	mov	r3, r6
   43156:	7818      	ldrb	r0, [r3, #0]
   43158:	461f      	mov	r7, r3
   4315a:	3301      	adds	r3, #1
   4315c:	2830      	cmp	r0, #48	; 0x30
   4315e:	d0fa      	beq.n	43156 <__gethex+0x6e>
   43160:	f005 fba2 	bl	488a8 <__hexdig_fun>
   43164:	fab0 f480 	clz	r4, r0
   43168:	4635      	mov	r5, r6
   4316a:	f04f 0a01 	mov.w	sl, #1
   4316e:	0964      	lsrs	r4, r4, #5
   43170:	463a      	mov	r2, r7
   43172:	4616      	mov	r6, r2
   43174:	3201      	adds	r2, #1
   43176:	7830      	ldrb	r0, [r6, #0]
   43178:	f005 fb96 	bl	488a8 <__hexdig_fun>
   4317c:	2800      	cmp	r0, #0
   4317e:	d1f8      	bne.n	43172 <__gethex+0x8a>
   43180:	9a01      	ldr	r2, [sp, #4]
   43182:	4630      	mov	r0, r6
   43184:	9903      	ldr	r1, [sp, #12]
   43186:	f005 f9f8 	bl	4857a <strncmp>
   4318a:	b950      	cbnz	r0, 431a2 <__gethex+0xba>
   4318c:	b955      	cbnz	r5, 431a4 <__gethex+0xbc>
   4318e:	9b01      	ldr	r3, [sp, #4]
   43190:	18f5      	adds	r5, r6, r3
   43192:	462a      	mov	r2, r5
   43194:	4616      	mov	r6, r2
   43196:	3201      	adds	r2, #1
   43198:	7830      	ldrb	r0, [r6, #0]
   4319a:	f005 fb85 	bl	488a8 <__hexdig_fun>
   4319e:	2800      	cmp	r0, #0
   431a0:	d1f8      	bne.n	43194 <__gethex+0xac>
   431a2:	b10d      	cbz	r5, 431a8 <__gethex+0xc0>
   431a4:	1bad      	subs	r5, r5, r6
   431a6:	00ad      	lsls	r5, r5, #2
   431a8:	7833      	ldrb	r3, [r6, #0]
   431aa:	2b50      	cmp	r3, #80	; 0x50
   431ac:	d001      	beq.n	431b2 <__gethex+0xca>
   431ae:	2b70      	cmp	r3, #112	; 0x70
   431b0:	d13c      	bne.n	4322c <__gethex+0x144>
   431b2:	7873      	ldrb	r3, [r6, #1]
   431b4:	2b2b      	cmp	r3, #43	; 0x2b
   431b6:	d02d      	beq.n	43214 <__gethex+0x12c>
   431b8:	2b2d      	cmp	r3, #45	; 0x2d
   431ba:	d02f      	beq.n	4321c <__gethex+0x134>
   431bc:	1c71      	adds	r1, r6, #1
   431be:	f04f 0900 	mov.w	r9, #0
   431c2:	7808      	ldrb	r0, [r1, #0]
   431c4:	f005 fb70 	bl	488a8 <__hexdig_fun>
   431c8:	1e43      	subs	r3, r0, #1
   431ca:	b2db      	uxtb	r3, r3
   431cc:	2b18      	cmp	r3, #24
   431ce:	d82d      	bhi.n	4322c <__gethex+0x144>
   431d0:	f1a0 0210 	sub.w	r2, r0, #16
   431d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   431d8:	f005 fb66 	bl	488a8 <__hexdig_fun>
   431dc:	1e43      	subs	r3, r0, #1
   431de:	b2db      	uxtb	r3, r3
   431e0:	2b18      	cmp	r3, #24
   431e2:	d91e      	bls.n	43222 <__gethex+0x13a>
   431e4:	f1b9 0f00 	cmp.w	r9, #0
   431e8:	d000      	beq.n	431ec <__gethex+0x104>
   431ea:	4252      	negs	r2, r2
   431ec:	4415      	add	r5, r2
   431ee:	f8cb 1000 	str.w	r1, [fp]
   431f2:	b1ec      	cbz	r4, 43230 <__gethex+0x148>
   431f4:	f1ba 0f00 	cmp.w	sl, #0
   431f8:	bf14      	ite	ne
   431fa:	2700      	movne	r7, #0
   431fc:	2706      	moveq	r7, #6
   431fe:	4638      	mov	r0, r7
   43200:	b00b      	add	sp, #44	; 0x2c
   43202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43206:	2400      	movs	r4, #0
   43208:	4625      	mov	r5, r4
   4320a:	e7b1      	b.n	43170 <__gethex+0x88>
   4320c:	463e      	mov	r6, r7
   4320e:	4625      	mov	r5, r4
   43210:	2401      	movs	r4, #1
   43212:	e7c9      	b.n	431a8 <__gethex+0xc0>
   43214:	f04f 0900 	mov.w	r9, #0
   43218:	1cb1      	adds	r1, r6, #2
   4321a:	e7d2      	b.n	431c2 <__gethex+0xda>
   4321c:	f04f 0901 	mov.w	r9, #1
   43220:	e7fa      	b.n	43218 <__gethex+0x130>
   43222:	230a      	movs	r3, #10
   43224:	fb03 0202 	mla	r2, r3, r2, r0
   43228:	3a10      	subs	r2, #16
   4322a:	e7d3      	b.n	431d4 <__gethex+0xec>
   4322c:	4631      	mov	r1, r6
   4322e:	e7de      	b.n	431ee <__gethex+0x106>
   43230:	1bf3      	subs	r3, r6, r7
   43232:	4621      	mov	r1, r4
   43234:	3b01      	subs	r3, #1
   43236:	2b07      	cmp	r3, #7
   43238:	dc4f      	bgt.n	432da <__gethex+0x1f2>
   4323a:	9802      	ldr	r0, [sp, #8]
   4323c:	f04f 0b00 	mov.w	fp, #0
   43240:	f005 fc50 	bl	48ae4 <_Balloc>
   43244:	9b01      	ldr	r3, [sp, #4]
   43246:	f100 0914 	add.w	r9, r0, #20
   4324a:	4604      	mov	r4, r0
   4324c:	f1c3 0301 	rsb	r3, r3, #1
   43250:	46da      	mov	sl, fp
   43252:	f8cd 9010 	str.w	r9, [sp, #16]
   43256:	9308      	str	r3, [sp, #32]
   43258:	42b7      	cmp	r7, r6
   4325a:	d341      	bcc.n	432e0 <__gethex+0x1f8>
   4325c:	9804      	ldr	r0, [sp, #16]
   4325e:	f840 ab04 	str.w	sl, [r0], #4
   43262:	eba0 0009 	sub.w	r0, r0, r9
   43266:	1080      	asrs	r0, r0, #2
   43268:	0147      	lsls	r7, r0, #5
   4326a:	6120      	str	r0, [r4, #16]
   4326c:	4650      	mov	r0, sl
   4326e:	f005 fcff 	bl	48c70 <__hi0bits>
   43272:	f8d8 6000 	ldr.w	r6, [r8]
   43276:	1a3f      	subs	r7, r7, r0
   43278:	42b7      	cmp	r7, r6
   4327a:	dd63      	ble.n	43344 <__gethex+0x25c>
   4327c:	1bbf      	subs	r7, r7, r6
   4327e:	4620      	mov	r0, r4
   43280:	4639      	mov	r1, r7
   43282:	f005 ff45 	bl	49110 <__any_on>
   43286:	4682      	mov	sl, r0
   43288:	b1a8      	cbz	r0, 432b6 <__gethex+0x1ce>
   4328a:	1e7b      	subs	r3, r7, #1
   4328c:	f04f 0a01 	mov.w	sl, #1
   43290:	1159      	asrs	r1, r3, #5
   43292:	f003 021f 	and.w	r2, r3, #31
   43296:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   4329a:	fa0a f202 	lsl.w	r2, sl, r2
   4329e:	420a      	tst	r2, r1
   432a0:	d009      	beq.n	432b6 <__gethex+0x1ce>
   432a2:	4553      	cmp	r3, sl
   432a4:	dd05      	ble.n	432b2 <__gethex+0x1ca>
   432a6:	1eb9      	subs	r1, r7, #2
   432a8:	4620      	mov	r0, r4
   432aa:	f005 ff31 	bl	49110 <__any_on>
   432ae:	2800      	cmp	r0, #0
   432b0:	d145      	bne.n	4333e <__gethex+0x256>
   432b2:	f04f 0a02 	mov.w	sl, #2
   432b6:	443d      	add	r5, r7
   432b8:	4639      	mov	r1, r7
   432ba:	4620      	mov	r0, r4
   432bc:	f005 faba 	bl	48834 <rshift>
   432c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   432c4:	42ab      	cmp	r3, r5
   432c6:	da4b      	bge.n	43360 <__gethex+0x278>
   432c8:	4621      	mov	r1, r4
   432ca:	9802      	ldr	r0, [sp, #8]
   432cc:	f005 fc3e 	bl	48b4c <_Bfree>
   432d0:	2300      	movs	r3, #0
   432d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   432d4:	27a3      	movs	r7, #163	; 0xa3
   432d6:	6013      	str	r3, [r2, #0]
   432d8:	e791      	b.n	431fe <__gethex+0x116>
   432da:	3101      	adds	r1, #1
   432dc:	105b      	asrs	r3, r3, #1
   432de:	e7aa      	b.n	43236 <__gethex+0x14e>
   432e0:	1e73      	subs	r3, r6, #1
   432e2:	9a07      	ldr	r2, [sp, #28]
   432e4:	9305      	str	r3, [sp, #20]
   432e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   432ea:	4293      	cmp	r3, r2
   432ec:	d017      	beq.n	4331e <__gethex+0x236>
   432ee:	f1bb 0f20 	cmp.w	fp, #32
   432f2:	d106      	bne.n	43302 <__gethex+0x21a>
   432f4:	9b04      	ldr	r3, [sp, #16]
   432f6:	f843 ab04 	str.w	sl, [r3], #4
   432fa:	f04f 0a00 	mov.w	sl, #0
   432fe:	9304      	str	r3, [sp, #16]
   43300:	46d3      	mov	fp, sl
   43302:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   43306:	f005 facf 	bl	488a8 <__hexdig_fun>
   4330a:	f000 000f 	and.w	r0, r0, #15
   4330e:	9b05      	ldr	r3, [sp, #20]
   43310:	fa00 f00b 	lsl.w	r0, r0, fp
   43314:	f10b 0b04 	add.w	fp, fp, #4
   43318:	ea4a 0a00 	orr.w	sl, sl, r0
   4331c:	e00d      	b.n	4333a <__gethex+0x252>
   4331e:	9b05      	ldr	r3, [sp, #20]
   43320:	9a08      	ldr	r2, [sp, #32]
   43322:	4413      	add	r3, r2
   43324:	42bb      	cmp	r3, r7
   43326:	d3e2      	bcc.n	432ee <__gethex+0x206>
   43328:	4618      	mov	r0, r3
   4332a:	9a01      	ldr	r2, [sp, #4]
   4332c:	9903      	ldr	r1, [sp, #12]
   4332e:	9309      	str	r3, [sp, #36]	; 0x24
   43330:	f005 f923 	bl	4857a <strncmp>
   43334:	9b09      	ldr	r3, [sp, #36]	; 0x24
   43336:	2800      	cmp	r0, #0
   43338:	d1d9      	bne.n	432ee <__gethex+0x206>
   4333a:	461e      	mov	r6, r3
   4333c:	e78c      	b.n	43258 <__gethex+0x170>
   4333e:	f04f 0a03 	mov.w	sl, #3
   43342:	e7b8      	b.n	432b6 <__gethex+0x1ce>
   43344:	da09      	bge.n	4335a <__gethex+0x272>
   43346:	1bf7      	subs	r7, r6, r7
   43348:	4621      	mov	r1, r4
   4334a:	9802      	ldr	r0, [sp, #8]
   4334c:	463a      	mov	r2, r7
   4334e:	1bed      	subs	r5, r5, r7
   43350:	f005 fd76 	bl	48e40 <__lshift>
   43354:	4604      	mov	r4, r0
   43356:	f100 0914 	add.w	r9, r0, #20
   4335a:	f04f 0a00 	mov.w	sl, #0
   4335e:	e7af      	b.n	432c0 <__gethex+0x1d8>
   43360:	f8d8 3004 	ldr.w	r3, [r8, #4]
   43364:	42ab      	cmp	r3, r5
   43366:	dd6d      	ble.n	43444 <__gethex+0x35c>
   43368:	1b5d      	subs	r5, r3, r5
   4336a:	42ae      	cmp	r6, r5
   4336c:	dc30      	bgt.n	433d0 <__gethex+0x2e8>
   4336e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   43372:	2b02      	cmp	r3, #2
   43374:	d022      	beq.n	433bc <__gethex+0x2d4>
   43376:	2b03      	cmp	r3, #3
   43378:	d024      	beq.n	433c4 <__gethex+0x2dc>
   4337a:	2b01      	cmp	r3, #1
   4337c:	d115      	bne.n	433aa <__gethex+0x2c2>
   4337e:	42ae      	cmp	r6, r5
   43380:	d113      	bne.n	433aa <__gethex+0x2c2>
   43382:	2e01      	cmp	r6, #1
   43384:	d10b      	bne.n	4339e <__gethex+0x2b6>
   43386:	f8d8 3004 	ldr.w	r3, [r8, #4]
   4338a:	2762      	movs	r7, #98	; 0x62
   4338c:	9a06      	ldr	r2, [sp, #24]
   4338e:	6013      	str	r3, [r2, #0]
   43390:	2301      	movs	r3, #1
   43392:	6123      	str	r3, [r4, #16]
   43394:	f8c9 3000 	str.w	r3, [r9]
   43398:	9b14      	ldr	r3, [sp, #80]	; 0x50
   4339a:	601c      	str	r4, [r3, #0]
   4339c:	e72f      	b.n	431fe <__gethex+0x116>
   4339e:	1e71      	subs	r1, r6, #1
   433a0:	4620      	mov	r0, r4
   433a2:	f005 feb5 	bl	49110 <__any_on>
   433a6:	2800      	cmp	r0, #0
   433a8:	d1ed      	bne.n	43386 <__gethex+0x29e>
   433aa:	4621      	mov	r1, r4
   433ac:	9802      	ldr	r0, [sp, #8]
   433ae:	f005 fbcd 	bl	48b4c <_Bfree>
   433b2:	2300      	movs	r3, #0
   433b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   433b6:	2750      	movs	r7, #80	; 0x50
   433b8:	6013      	str	r3, [r2, #0]
   433ba:	e720      	b.n	431fe <__gethex+0x116>
   433bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   433be:	2b00      	cmp	r3, #0
   433c0:	d1f3      	bne.n	433aa <__gethex+0x2c2>
   433c2:	e7e0      	b.n	43386 <__gethex+0x29e>
   433c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   433c6:	2b00      	cmp	r3, #0
   433c8:	d1dd      	bne.n	43386 <__gethex+0x29e>
   433ca:	e7ee      	b.n	433aa <__gethex+0x2c2>
   433cc:	0004a9dc 	.word	0x0004a9dc
   433d0:	1e6f      	subs	r7, r5, #1
   433d2:	f1ba 0f00 	cmp.w	sl, #0
   433d6:	d132      	bne.n	4343e <__gethex+0x356>
   433d8:	b127      	cbz	r7, 433e4 <__gethex+0x2fc>
   433da:	4639      	mov	r1, r7
   433dc:	4620      	mov	r0, r4
   433de:	f005 fe97 	bl	49110 <__any_on>
   433e2:	4682      	mov	sl, r0
   433e4:	117a      	asrs	r2, r7, #5
   433e6:	2301      	movs	r3, #1
   433e8:	f007 071f 	and.w	r7, r7, #31
   433ec:	4629      	mov	r1, r5
   433ee:	4620      	mov	r0, r4
   433f0:	1b76      	subs	r6, r6, r5
   433f2:	fa03 f707 	lsl.w	r7, r3, r7
   433f6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
   433fa:	421f      	tst	r7, r3
   433fc:	f04f 0702 	mov.w	r7, #2
   43400:	bf18      	it	ne
   43402:	f04a 0a02 	orrne.w	sl, sl, #2
   43406:	f005 fa15 	bl	48834 <rshift>
   4340a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   4340e:	f1ba 0f00 	cmp.w	sl, #0
   43412:	d048      	beq.n	434a6 <__gethex+0x3be>
   43414:	f8d8 300c 	ldr.w	r3, [r8, #12]
   43418:	2b02      	cmp	r3, #2
   4341a:	d015      	beq.n	43448 <__gethex+0x360>
   4341c:	2b03      	cmp	r3, #3
   4341e:	d017      	beq.n	43450 <__gethex+0x368>
   43420:	2b01      	cmp	r3, #1
   43422:	d109      	bne.n	43438 <__gethex+0x350>
   43424:	f01a 0f02 	tst.w	sl, #2
   43428:	d006      	beq.n	43438 <__gethex+0x350>
   4342a:	f8d9 3000 	ldr.w	r3, [r9]
   4342e:	ea4a 0a03 	orr.w	sl, sl, r3
   43432:	f01a 0f01 	tst.w	sl, #1
   43436:	d10e      	bne.n	43456 <__gethex+0x36e>
   43438:	f047 0710 	orr.w	r7, r7, #16
   4343c:	e033      	b.n	434a6 <__gethex+0x3be>
   4343e:	f04f 0a01 	mov.w	sl, #1
   43442:	e7cf      	b.n	433e4 <__gethex+0x2fc>
   43444:	2701      	movs	r7, #1
   43446:	e7e2      	b.n	4340e <__gethex+0x326>
   43448:	9b15      	ldr	r3, [sp, #84]	; 0x54
   4344a:	f1c3 0301 	rsb	r3, r3, #1
   4344e:	9315      	str	r3, [sp, #84]	; 0x54
   43450:	9b15      	ldr	r3, [sp, #84]	; 0x54
   43452:	2b00      	cmp	r3, #0
   43454:	d0f0      	beq.n	43438 <__gethex+0x350>
   43456:	f8d4 9010 	ldr.w	r9, [r4, #16]
   4345a:	f104 0314 	add.w	r3, r4, #20
   4345e:	f04f 0c00 	mov.w	ip, #0
   43462:	ea4f 0a89 	mov.w	sl, r9, lsl #2
   43466:	eb03 010a 	add.w	r1, r3, sl
   4346a:	4618      	mov	r0, r3
   4346c:	f853 2b04 	ldr.w	r2, [r3], #4
   43470:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   43474:	d01c      	beq.n	434b0 <__gethex+0x3c8>
   43476:	3201      	adds	r2, #1
   43478:	6002      	str	r2, [r0, #0]
   4347a:	2f02      	cmp	r7, #2
   4347c:	f104 0314 	add.w	r3, r4, #20
   43480:	d138      	bne.n	434f4 <__gethex+0x40c>
   43482:	f8d8 2000 	ldr.w	r2, [r8]
   43486:	3a01      	subs	r2, #1
   43488:	42b2      	cmp	r2, r6
   4348a:	d10a      	bne.n	434a2 <__gethex+0x3ba>
   4348c:	1171      	asrs	r1, r6, #5
   4348e:	2201      	movs	r2, #1
   43490:	f006 061f 	and.w	r6, r6, #31
   43494:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   43498:	fa02 f606 	lsl.w	r6, r2, r6
   4349c:	421e      	tst	r6, r3
   4349e:	bf18      	it	ne
   434a0:	4617      	movne	r7, r2
   434a2:	f047 0720 	orr.w	r7, r7, #32
   434a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   434a8:	601c      	str	r4, [r3, #0]
   434aa:	9b06      	ldr	r3, [sp, #24]
   434ac:	601d      	str	r5, [r3, #0]
   434ae:	e6a6      	b.n	431fe <__gethex+0x116>
   434b0:	4299      	cmp	r1, r3
   434b2:	f843 cc04 	str.w	ip, [r3, #-4]
   434b6:	d8d8      	bhi.n	4346a <__gethex+0x382>
   434b8:	68a3      	ldr	r3, [r4, #8]
   434ba:	4599      	cmp	r9, r3
   434bc:	db12      	blt.n	434e4 <__gethex+0x3fc>
   434be:	6861      	ldr	r1, [r4, #4]
   434c0:	9802      	ldr	r0, [sp, #8]
   434c2:	3101      	adds	r1, #1
   434c4:	f005 fb0e 	bl	48ae4 <_Balloc>
   434c8:	6922      	ldr	r2, [r4, #16]
   434ca:	4683      	mov	fp, r0
   434cc:	f104 010c 	add.w	r1, r4, #12
   434d0:	3202      	adds	r2, #2
   434d2:	300c      	adds	r0, #12
   434d4:	0092      	lsls	r2, r2, #2
   434d6:	f004 fe57 	bl	48188 <memcpy>
   434da:	4621      	mov	r1, r4
   434dc:	465c      	mov	r4, fp
   434de:	9802      	ldr	r0, [sp, #8]
   434e0:	f005 fb34 	bl	48b4c <_Bfree>
   434e4:	6923      	ldr	r3, [r4, #16]
   434e6:	1c5a      	adds	r2, r3, #1
   434e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   434ec:	6122      	str	r2, [r4, #16]
   434ee:	2201      	movs	r2, #1
   434f0:	615a      	str	r2, [r3, #20]
   434f2:	e7c2      	b.n	4347a <__gethex+0x392>
   434f4:	6922      	ldr	r2, [r4, #16]
   434f6:	454a      	cmp	r2, r9
   434f8:	dd0b      	ble.n	43512 <__gethex+0x42a>
   434fa:	2101      	movs	r1, #1
   434fc:	4620      	mov	r0, r4
   434fe:	f005 f999 	bl	48834 <rshift>
   43502:	3501      	adds	r5, #1
   43504:	f8d8 3008 	ldr.w	r3, [r8, #8]
   43508:	42ab      	cmp	r3, r5
   4350a:	f6ff aedd 	blt.w	432c8 <__gethex+0x1e0>
   4350e:	2701      	movs	r7, #1
   43510:	e7c7      	b.n	434a2 <__gethex+0x3ba>
   43512:	f016 061f 	ands.w	r6, r6, #31
   43516:	d0fa      	beq.n	4350e <__gethex+0x426>
   43518:	449a      	add	sl, r3
   4351a:	f1c6 0620 	rsb	r6, r6, #32
   4351e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
   43522:	f005 fba5 	bl	48c70 <__hi0bits>
   43526:	42b0      	cmp	r0, r6
   43528:	dbe7      	blt.n	434fa <__gethex+0x412>
   4352a:	e7f0      	b.n	4350e <__gethex+0x426>

0004352c <_localeconv_r>:
   4352c:	4800      	ldr	r0, [pc, #0]	; (43530 <_localeconv_r+0x4>)
   4352e:	4770      	bx	lr
   43530:	20020a34 	.word	0x20020a34

00043534 <_lseek_r>:
   43534:	b538      	push	{r3, r4, r5, lr}
   43536:	4605      	mov	r5, r0
   43538:	4c06      	ldr	r4, [pc, #24]	; (43554 <_lseek_r+0x20>)
   4353a:	4608      	mov	r0, r1
   4353c:	4611      	mov	r1, r2
   4353e:	2200      	movs	r2, #0
   43540:	6022      	str	r2, [r4, #0]
   43542:	461a      	mov	r2, r3
   43544:	f002 fa41 	bl	459ca <_lseek>
   43548:	1c43      	adds	r3, r0, #1
   4354a:	d102      	bne.n	43552 <_lseek_r+0x1e>
   4354c:	6823      	ldr	r3, [r4, #0]
   4354e:	b103      	cbz	r3, 43552 <_lseek_r+0x1e>
   43550:	602b      	str	r3, [r5, #0]
   43552:	bd38      	pop	{r3, r4, r5, pc}
   43554:	2002d330 	.word	0x2002d330

00043558 <__smakebuf_r>:
   43558:	898b      	ldrh	r3, [r1, #12]
   4355a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4355c:	079d      	lsls	r5, r3, #30
   4355e:	4606      	mov	r6, r0
   43560:	460c      	mov	r4, r1
   43562:	d507      	bpl.n	43574 <__smakebuf_r+0x1c>
   43564:	f104 0347 	add.w	r3, r4, #71	; 0x47
   43568:	6023      	str	r3, [r4, #0]
   4356a:	6123      	str	r3, [r4, #16]
   4356c:	2301      	movs	r3, #1
   4356e:	6163      	str	r3, [r4, #20]
   43570:	b002      	add	sp, #8
   43572:	bd70      	pop	{r4, r5, r6, pc}
   43574:	ab01      	add	r3, sp, #4
   43576:	466a      	mov	r2, sp
   43578:	f005 fa64 	bl	48a44 <__swhatbuf_r>
   4357c:	9900      	ldr	r1, [sp, #0]
   4357e:	4605      	mov	r5, r0
   43580:	4630      	mov	r0, r6
   43582:	f7fe fc87 	bl	41e94 <_malloc_r>
   43586:	b948      	cbnz	r0, 4359c <__smakebuf_r+0x44>
   43588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   4358c:	059a      	lsls	r2, r3, #22
   4358e:	d4ef      	bmi.n	43570 <__smakebuf_r+0x18>
   43590:	f023 0303 	bic.w	r3, r3, #3
   43594:	f043 0302 	orr.w	r3, r3, #2
   43598:	81a3      	strh	r3, [r4, #12]
   4359a:	e7e3      	b.n	43564 <__smakebuf_r+0xc>
   4359c:	4b0d      	ldr	r3, [pc, #52]	; (435d4 <__smakebuf_r+0x7c>)
   4359e:	62b3      	str	r3, [r6, #40]	; 0x28
   435a0:	89a3      	ldrh	r3, [r4, #12]
   435a2:	6020      	str	r0, [r4, #0]
   435a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   435a8:	6120      	str	r0, [r4, #16]
   435aa:	81a3      	strh	r3, [r4, #12]
   435ac:	9b00      	ldr	r3, [sp, #0]
   435ae:	6163      	str	r3, [r4, #20]
   435b0:	9b01      	ldr	r3, [sp, #4]
   435b2:	b15b      	cbz	r3, 435cc <__smakebuf_r+0x74>
   435b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   435b8:	4630      	mov	r0, r6
   435ba:	f000 fca5 	bl	43f08 <_isatty_r>
   435be:	b128      	cbz	r0, 435cc <__smakebuf_r+0x74>
   435c0:	89a3      	ldrh	r3, [r4, #12]
   435c2:	f023 0303 	bic.w	r3, r3, #3
   435c6:	f043 0301 	orr.w	r3, r3, #1
   435ca:	81a3      	strh	r3, [r4, #12]
   435cc:	89a3      	ldrh	r3, [r4, #12]
   435ce:	431d      	orrs	r5, r3
   435d0:	81a5      	strh	r5, [r4, #12]
   435d2:	e7cd      	b.n	43570 <__smakebuf_r+0x18>
   435d4:	00042fb1 	.word	0x00042fb1

000435d8 <__malloc_lock>:
   435d8:	4801      	ldr	r0, [pc, #4]	; (435e0 <__malloc_lock+0x8>)
   435da:	f005 ba31 	b.w	48a40 <__retarget_lock_acquire_recursive>
   435de:	bf00      	nop
   435e0:	2002d338 	.word	0x2002d338

000435e4 <__malloc_unlock>:
   435e4:	4801      	ldr	r0, [pc, #4]	; (435ec <__malloc_unlock+0x8>)
   435e6:	f005 ba2c 	b.w	48a42 <__retarget_lock_release_recursive>
   435ea:	bf00      	nop
   435ec:	2002d338 	.word	0x2002d338

000435f0 <__pow5mult>:
   435f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   435f4:	4615      	mov	r5, r2
   435f6:	f012 0203 	ands.w	r2, r2, #3
   435fa:	4606      	mov	r6, r0
   435fc:	460f      	mov	r7, r1
   435fe:	d007      	beq.n	43610 <__pow5mult+0x20>
   43600:	3a01      	subs	r2, #1
   43602:	4c21      	ldr	r4, [pc, #132]	; (43688 <__pow5mult+0x98>)
   43604:	2300      	movs	r3, #0
   43606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   4360a:	f005 fab6 	bl	48b7a <__multadd>
   4360e:	4607      	mov	r7, r0
   43610:	10ad      	asrs	r5, r5, #2
   43612:	d035      	beq.n	43680 <__pow5mult+0x90>
   43614:	6a74      	ldr	r4, [r6, #36]	; 0x24
   43616:	b93c      	cbnz	r4, 43628 <__pow5mult+0x38>
   43618:	2010      	movs	r0, #16
   4361a:	f7fe fbdd 	bl	41dd8 <malloc>
   4361e:	6270      	str	r0, [r6, #36]	; 0x24
   43620:	6004      	str	r4, [r0, #0]
   43622:	60c4      	str	r4, [r0, #12]
   43624:	e9c0 4401 	strd	r4, r4, [r0, #4]
   43628:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   4362c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   43630:	b94c      	cbnz	r4, 43646 <__pow5mult+0x56>
   43632:	f240 2171 	movw	r1, #625	; 0x271
   43636:	4630      	mov	r0, r6
   43638:	f005 fb6a 	bl	48d10 <__i2b>
   4363c:	2300      	movs	r3, #0
   4363e:	4604      	mov	r4, r0
   43640:	f8c8 0008 	str.w	r0, [r8, #8]
   43644:	6003      	str	r3, [r0, #0]
   43646:	f04f 0800 	mov.w	r8, #0
   4364a:	07eb      	lsls	r3, r5, #31
   4364c:	d50a      	bpl.n	43664 <__pow5mult+0x74>
   4364e:	4639      	mov	r1, r7
   43650:	4622      	mov	r2, r4
   43652:	4630      	mov	r0, r6
   43654:	f005 fb65 	bl	48d22 <__multiply>
   43658:	4681      	mov	r9, r0
   4365a:	4639      	mov	r1, r7
   4365c:	4630      	mov	r0, r6
   4365e:	464f      	mov	r7, r9
   43660:	f005 fa74 	bl	48b4c <_Bfree>
   43664:	106d      	asrs	r5, r5, #1
   43666:	d00b      	beq.n	43680 <__pow5mult+0x90>
   43668:	6820      	ldr	r0, [r4, #0]
   4366a:	b938      	cbnz	r0, 4367c <__pow5mult+0x8c>
   4366c:	4622      	mov	r2, r4
   4366e:	4621      	mov	r1, r4
   43670:	4630      	mov	r0, r6
   43672:	f005 fb56 	bl	48d22 <__multiply>
   43676:	6020      	str	r0, [r4, #0]
   43678:	f8c0 8000 	str.w	r8, [r0]
   4367c:	4604      	mov	r4, r0
   4367e:	e7e4      	b.n	4364a <__pow5mult+0x5a>
   43680:	4638      	mov	r0, r7
   43682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   43686:	bf00      	nop
   43688:	0004a9e8 	.word	0x0004a9e8

0004368c <__ulp>:
   4368c:	4b10      	ldr	r3, [pc, #64]	; (436d0 <__ulp+0x44>)
   4368e:	ee10 2a90 	vmov	r2, s1
   43692:	401a      	ands	r2, r3
   43694:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   43698:	2b00      	cmp	r3, #0
   4369a:	dd04      	ble.n	436a6 <__ulp+0x1a>
   4369c:	2000      	movs	r0, #0
   4369e:	4619      	mov	r1, r3
   436a0:	ec41 0b10 	vmov	d0, r0, r1
   436a4:	4770      	bx	lr
   436a6:	425b      	negs	r3, r3
   436a8:	2000      	movs	r0, #0
   436aa:	2100      	movs	r1, #0
   436ac:	151b      	asrs	r3, r3, #20
   436ae:	2b13      	cmp	r3, #19
   436b0:	dc04      	bgt.n	436bc <__ulp+0x30>
   436b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   436b6:	fa42 f103 	asr.w	r1, r2, r3
   436ba:	e7f1      	b.n	436a0 <__ulp+0x14>
   436bc:	3b14      	subs	r3, #20
   436be:	2b1e      	cmp	r3, #30
   436c0:	bfd6      	itet	le
   436c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
   436c6:	2301      	movgt	r3, #1
   436c8:	fa22 f303 	lsrle.w	r3, r2, r3
   436cc:	4618      	mov	r0, r3
   436ce:	e7e7      	b.n	436a0 <__ulp+0x14>
   436d0:	7ff00000 	.word	0x7ff00000

000436d4 <__b2d>:
   436d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   436d6:	6905      	ldr	r5, [r0, #16]
   436d8:	f100 0714 	add.w	r7, r0, #20
   436dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   436e0:	f855 4c04 	ldr.w	r4, [r5, #-4]
   436e4:	1f2e      	subs	r6, r5, #4
   436e6:	4620      	mov	r0, r4
   436e8:	f005 fac2 	bl	48c70 <__hi0bits>
   436ec:	f1c0 0320 	rsb	r3, r0, #32
   436f0:	280a      	cmp	r0, #10
   436f2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 43770 <__b2d+0x9c>
   436f6:	600b      	str	r3, [r1, #0]
   436f8:	dc15      	bgt.n	43726 <__b2d+0x52>
   436fa:	f1c0 0e0b 	rsb	lr, r0, #11
   436fe:	42b7      	cmp	r7, r6
   43700:	f100 0015 	add.w	r0, r0, #21
   43704:	fa24 f10e 	lsr.w	r1, r4, lr
   43708:	fa04 f000 	lsl.w	r0, r4, r0
   4370c:	ea41 030c 	orr.w	r3, r1, ip
   43710:	bf34      	ite	cc
   43712:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   43716:	2100      	movcs	r1, #0
   43718:	fa21 f10e 	lsr.w	r1, r1, lr
   4371c:	ea40 0201 	orr.w	r2, r0, r1
   43720:	ec43 2b10 	vmov	d0, r2, r3
   43724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   43726:	42b7      	cmp	r7, r6
   43728:	bf3a      	itte	cc
   4372a:	f1a5 0608 	subcc.w	r6, r5, #8
   4372e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   43732:	2100      	movcs	r1, #0
   43734:	380b      	subs	r0, #11
   43736:	d017      	beq.n	43768 <__b2d+0x94>
   43738:	f1c0 0c20 	rsb	ip, r0, #32
   4373c:	fa04 f500 	lsl.w	r5, r4, r0
   43740:	42be      	cmp	r6, r7
   43742:	fa01 f000 	lsl.w	r0, r1, r0
   43746:	fa21 f40c 	lsr.w	r4, r1, ip
   4374a:	ea45 0504 	orr.w	r5, r5, r4
   4374e:	bf8c      	ite	hi
   43750:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   43754:	2400      	movls	r4, #0
   43756:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   4375a:	fa24 f40c 	lsr.w	r4, r4, ip
   4375e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   43762:	ea40 0204 	orr.w	r2, r0, r4
   43766:	e7db      	b.n	43720 <__b2d+0x4c>
   43768:	ea44 030c 	orr.w	r3, r4, ip
   4376c:	460a      	mov	r2, r1
   4376e:	e7d7      	b.n	43720 <__b2d+0x4c>
   43770:	3ff00000 	.word	0x3ff00000

00043774 <_svfiprintf_r>:
   43774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43778:	461e      	mov	r6, r3
   4377a:	898b      	ldrh	r3, [r1, #12]
   4377c:	b09d      	sub	sp, #116	; 0x74
   4377e:	4607      	mov	r7, r0
   43780:	061b      	lsls	r3, r3, #24
   43782:	460d      	mov	r5, r1
   43784:	4614      	mov	r4, r2
   43786:	d50e      	bpl.n	437a6 <_svfiprintf_r+0x32>
   43788:	690b      	ldr	r3, [r1, #16]
   4378a:	b963      	cbnz	r3, 437a6 <_svfiprintf_r+0x32>
   4378c:	2140      	movs	r1, #64	; 0x40
   4378e:	f7fe fb81 	bl	41e94 <_malloc_r>
   43792:	6028      	str	r0, [r5, #0]
   43794:	6128      	str	r0, [r5, #16]
   43796:	b920      	cbnz	r0, 437a2 <_svfiprintf_r+0x2e>
   43798:	230c      	movs	r3, #12
   4379a:	603b      	str	r3, [r7, #0]
   4379c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   437a0:	e0c9      	b.n	43936 <_svfiprintf_r+0x1c2>
   437a2:	2340      	movs	r3, #64	; 0x40
   437a4:	616b      	str	r3, [r5, #20]
   437a6:	2300      	movs	r3, #0
   437a8:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 43950 <_svfiprintf_r+0x1dc>
   437ac:	f04f 0a01 	mov.w	sl, #1
   437b0:	9603      	str	r6, [sp, #12]
   437b2:	9309      	str	r3, [sp, #36]	; 0x24
   437b4:	2320      	movs	r3, #32
   437b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   437ba:	2330      	movs	r3, #48	; 0x30
   437bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   437c0:	4623      	mov	r3, r4
   437c2:	461e      	mov	r6, r3
   437c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   437c8:	b10a      	cbz	r2, 437ce <_svfiprintf_r+0x5a>
   437ca:	2a25      	cmp	r2, #37	; 0x25
   437cc:	d1f9      	bne.n	437c2 <_svfiprintf_r+0x4e>
   437ce:	ebb6 0b04 	subs.w	fp, r6, r4
   437d2:	d00b      	beq.n	437ec <_svfiprintf_r+0x78>
   437d4:	465b      	mov	r3, fp
   437d6:	4622      	mov	r2, r4
   437d8:	4629      	mov	r1, r5
   437da:	4638      	mov	r0, r7
   437dc:	f005 fced 	bl	491ba <__ssputs_r>
   437e0:	3001      	adds	r0, #1
   437e2:	f000 80a3 	beq.w	4392c <_svfiprintf_r+0x1b8>
   437e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   437e8:	445b      	add	r3, fp
   437ea:	9309      	str	r3, [sp, #36]	; 0x24
   437ec:	7833      	ldrb	r3, [r6, #0]
   437ee:	2b00      	cmp	r3, #0
   437f0:	f000 809c 	beq.w	4392c <_svfiprintf_r+0x1b8>
   437f4:	2300      	movs	r3, #0
   437f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   437fa:	3601      	adds	r6, #1
   437fc:	9304      	str	r3, [sp, #16]
   437fe:	9307      	str	r3, [sp, #28]
   43800:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   43804:	931a      	str	r3, [sp, #104]	; 0x68
   43806:	e9cd 2305 	strd	r2, r3, [sp, #20]
   4380a:	4634      	mov	r4, r6
   4380c:	2205      	movs	r2, #5
   4380e:	4850      	ldr	r0, [pc, #320]	; (43950 <_svfiprintf_r+0x1dc>)
   43810:	f814 1b01 	ldrb.w	r1, [r4], #1
   43814:	f004 fc9c 	bl	48150 <memchr>
   43818:	9b04      	ldr	r3, [sp, #16]
   4381a:	b9c0      	cbnz	r0, 4384e <_svfiprintf_r+0xda>
   4381c:	06d9      	lsls	r1, r3, #27
   4381e:	bf44      	itt	mi
   43820:	2220      	movmi	r2, #32
   43822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   43826:	071a      	lsls	r2, r3, #28
   43828:	bf44      	itt	mi
   4382a:	222b      	movmi	r2, #43	; 0x2b
   4382c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
   43830:	7832      	ldrb	r2, [r6, #0]
   43832:	2a2a      	cmp	r2, #42	; 0x2a
   43834:	d013      	beq.n	4385e <_svfiprintf_r+0xea>
   43836:	4634      	mov	r4, r6
   43838:	9a07      	ldr	r2, [sp, #28]
   4383a:	2000      	movs	r0, #0
   4383c:	260a      	movs	r6, #10
   4383e:	4621      	mov	r1, r4
   43840:	f811 3b01 	ldrb.w	r3, [r1], #1
   43844:	3b30      	subs	r3, #48	; 0x30
   43846:	2b09      	cmp	r3, #9
   43848:	d94b      	bls.n	438e2 <_svfiprintf_r+0x16e>
   4384a:	b970      	cbnz	r0, 4386a <_svfiprintf_r+0xf6>
   4384c:	e014      	b.n	43878 <_svfiprintf_r+0x104>
   4384e:	eba0 0009 	sub.w	r0, r0, r9
   43852:	4626      	mov	r6, r4
   43854:	fa0a f000 	lsl.w	r0, sl, r0
   43858:	4318      	orrs	r0, r3
   4385a:	9004      	str	r0, [sp, #16]
   4385c:	e7d5      	b.n	4380a <_svfiprintf_r+0x96>
   4385e:	9a03      	ldr	r2, [sp, #12]
   43860:	1d11      	adds	r1, r2, #4
   43862:	6812      	ldr	r2, [r2, #0]
   43864:	2a00      	cmp	r2, #0
   43866:	9103      	str	r1, [sp, #12]
   43868:	db01      	blt.n	4386e <_svfiprintf_r+0xfa>
   4386a:	9207      	str	r2, [sp, #28]
   4386c:	e004      	b.n	43878 <_svfiprintf_r+0x104>
   4386e:	4252      	negs	r2, r2
   43870:	f043 0302 	orr.w	r3, r3, #2
   43874:	9207      	str	r2, [sp, #28]
   43876:	9304      	str	r3, [sp, #16]
   43878:	7823      	ldrb	r3, [r4, #0]
   4387a:	2b2e      	cmp	r3, #46	; 0x2e
   4387c:	d10c      	bne.n	43898 <_svfiprintf_r+0x124>
   4387e:	7863      	ldrb	r3, [r4, #1]
   43880:	2b2a      	cmp	r3, #42	; 0x2a
   43882:	d133      	bne.n	438ec <_svfiprintf_r+0x178>
   43884:	9b03      	ldr	r3, [sp, #12]
   43886:	3402      	adds	r4, #2
   43888:	1d1a      	adds	r2, r3, #4
   4388a:	681b      	ldr	r3, [r3, #0]
   4388c:	2b00      	cmp	r3, #0
   4388e:	9203      	str	r2, [sp, #12]
   43890:	bfb8      	it	lt
   43892:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   43896:	9305      	str	r3, [sp, #20]
   43898:	4e2e      	ldr	r6, [pc, #184]	; (43954 <_svfiprintf_r+0x1e0>)
   4389a:	2203      	movs	r2, #3
   4389c:	7821      	ldrb	r1, [r4, #0]
   4389e:	4630      	mov	r0, r6
   438a0:	f004 fc56 	bl	48150 <memchr>
   438a4:	b138      	cbz	r0, 438b6 <_svfiprintf_r+0x142>
   438a6:	2340      	movs	r3, #64	; 0x40
   438a8:	1b80      	subs	r0, r0, r6
   438aa:	3401      	adds	r4, #1
   438ac:	fa03 f000 	lsl.w	r0, r3, r0
   438b0:	9b04      	ldr	r3, [sp, #16]
   438b2:	4303      	orrs	r3, r0
   438b4:	9304      	str	r3, [sp, #16]
   438b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   438ba:	2206      	movs	r2, #6
   438bc:	4826      	ldr	r0, [pc, #152]	; (43958 <_svfiprintf_r+0x1e4>)
   438be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   438c2:	f004 fc45 	bl	48150 <memchr>
   438c6:	2800      	cmp	r0, #0
   438c8:	d038      	beq.n	4393c <_svfiprintf_r+0x1c8>
   438ca:	4b24      	ldr	r3, [pc, #144]	; (4395c <_svfiprintf_r+0x1e8>)
   438cc:	bb13      	cbnz	r3, 43914 <_svfiprintf_r+0x1a0>
   438ce:	9b03      	ldr	r3, [sp, #12]
   438d0:	3307      	adds	r3, #7
   438d2:	f023 0307 	bic.w	r3, r3, #7
   438d6:	3308      	adds	r3, #8
   438d8:	9303      	str	r3, [sp, #12]
   438da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   438dc:	4443      	add	r3, r8
   438de:	9309      	str	r3, [sp, #36]	; 0x24
   438e0:	e76e      	b.n	437c0 <_svfiprintf_r+0x4c>
   438e2:	fb06 3202 	mla	r2, r6, r2, r3
   438e6:	2001      	movs	r0, #1
   438e8:	460c      	mov	r4, r1
   438ea:	e7a8      	b.n	4383e <_svfiprintf_r+0xca>
   438ec:	2300      	movs	r3, #0
   438ee:	3401      	adds	r4, #1
   438f0:	260a      	movs	r6, #10
   438f2:	4619      	mov	r1, r3
   438f4:	9305      	str	r3, [sp, #20]
   438f6:	4620      	mov	r0, r4
   438f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   438fc:	3a30      	subs	r2, #48	; 0x30
   438fe:	2a09      	cmp	r2, #9
   43900:	d903      	bls.n	4390a <_svfiprintf_r+0x196>
   43902:	2b00      	cmp	r3, #0
   43904:	d0c8      	beq.n	43898 <_svfiprintf_r+0x124>
   43906:	9105      	str	r1, [sp, #20]
   43908:	e7c6      	b.n	43898 <_svfiprintf_r+0x124>
   4390a:	fb06 2101 	mla	r1, r6, r1, r2
   4390e:	2301      	movs	r3, #1
   43910:	4604      	mov	r4, r0
   43912:	e7f0      	b.n	438f6 <_svfiprintf_r+0x182>
   43914:	ab03      	add	r3, sp, #12
   43916:	462a      	mov	r2, r5
   43918:	a904      	add	r1, sp, #16
   4391a:	4638      	mov	r0, r7
   4391c:	9300      	str	r3, [sp, #0]
   4391e:	4b10      	ldr	r3, [pc, #64]	; (43960 <_svfiprintf_r+0x1ec>)
   43920:	f7fe fc3a 	bl	42198 <_printf_float>
   43924:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   43928:	4680      	mov	r8, r0
   4392a:	d1d6      	bne.n	438da <_svfiprintf_r+0x166>
   4392c:	89ab      	ldrh	r3, [r5, #12]
   4392e:	065b      	lsls	r3, r3, #25
   43930:	f53f af34 	bmi.w	4379c <_svfiprintf_r+0x28>
   43934:	9809      	ldr	r0, [sp, #36]	; 0x24
   43936:	b01d      	add	sp, #116	; 0x74
   43938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4393c:	ab03      	add	r3, sp, #12
   4393e:	462a      	mov	r2, r5
   43940:	a904      	add	r1, sp, #16
   43942:	4638      	mov	r0, r7
   43944:	9300      	str	r3, [sp, #0]
   43946:	4b06      	ldr	r3, [pc, #24]	; (43960 <_svfiprintf_r+0x1ec>)
   43948:	f7fe fe50 	bl	425ec <_printf_i>
   4394c:	e7ea      	b.n	43924 <_svfiprintf_r+0x1b0>
   4394e:	bf00      	nop
   43950:	00052bcf 	.word	0x00052bcf
   43954:	00052bd5 	.word	0x00052bd5
   43958:	00052bd9 	.word	0x00052bd9
   4395c:	00042199 	.word	0x00042199
   43960:	000491bb 	.word	0x000491bb

00043964 <__ssvfiscanf_r>:
   43964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43968:	460c      	mov	r4, r1
   4396a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   4396e:	2100      	movs	r1, #0
   43970:	4606      	mov	r6, r0
   43972:	f10d 0804 	add.w	r8, sp, #4
   43976:	4f9b      	ldr	r7, [pc, #620]	; (43be4 <__ssvfiscanf_r+0x280>)
   43978:	f8df 9274 	ldr.w	r9, [pc, #628]	; 43bf0 <__ssvfiscanf_r+0x28c>
   4397c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   43980:	9300      	str	r3, [sp, #0]
   43982:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   43986:	4998      	ldr	r1, [pc, #608]	; (43be8 <__ssvfiscanf_r+0x284>)
   43988:	91a0      	str	r1, [sp, #640]	; 0x280
   4398a:	4998      	ldr	r1, [pc, #608]	; (43bec <__ssvfiscanf_r+0x288>)
   4398c:	91a1      	str	r1, [sp, #644]	; 0x284
   4398e:	f892 a000 	ldrb.w	sl, [r2]
   43992:	f1ba 0f00 	cmp.w	sl, #0
   43996:	f000 8122 	beq.w	43bde <__ssvfiscanf_r+0x27a>
   4399a:	f81a 3007 	ldrb.w	r3, [sl, r7]
   4399e:	1c55      	adds	r5, r2, #1
   439a0:	f013 0308 	ands.w	r3, r3, #8
   439a4:	d019      	beq.n	439da <__ssvfiscanf_r+0x76>
   439a6:	6863      	ldr	r3, [r4, #4]
   439a8:	2b00      	cmp	r3, #0
   439aa:	dd0f      	ble.n	439cc <__ssvfiscanf_r+0x68>
   439ac:	6823      	ldr	r3, [r4, #0]
   439ae:	781a      	ldrb	r2, [r3, #0]
   439b0:	5cba      	ldrb	r2, [r7, r2]
   439b2:	0712      	lsls	r2, r2, #28
   439b4:	d401      	bmi.n	439ba <__ssvfiscanf_r+0x56>
   439b6:	462a      	mov	r2, r5
   439b8:	e7e9      	b.n	4398e <__ssvfiscanf_r+0x2a>
   439ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
   439bc:	3301      	adds	r3, #1
   439be:	3201      	adds	r2, #1
   439c0:	6023      	str	r3, [r4, #0]
   439c2:	9245      	str	r2, [sp, #276]	; 0x114
   439c4:	6862      	ldr	r2, [r4, #4]
   439c6:	3a01      	subs	r2, #1
   439c8:	6062      	str	r2, [r4, #4]
   439ca:	e7ec      	b.n	439a6 <__ssvfiscanf_r+0x42>
   439cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   439ce:	4621      	mov	r1, r4
   439d0:	4630      	mov	r0, r6
   439d2:	4798      	blx	r3
   439d4:	2800      	cmp	r0, #0
   439d6:	d0e9      	beq.n	439ac <__ssvfiscanf_r+0x48>
   439d8:	e7ed      	b.n	439b6 <__ssvfiscanf_r+0x52>
   439da:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   439de:	d17f      	bne.n	43ae0 <__ssvfiscanf_r+0x17c>
   439e0:	9341      	str	r3, [sp, #260]	; 0x104
   439e2:	9343      	str	r3, [sp, #268]	; 0x10c
   439e4:	7853      	ldrb	r3, [r2, #1]
   439e6:	2b2a      	cmp	r3, #42	; 0x2a
   439e8:	bf04      	itt	eq
   439ea:	2310      	moveq	r3, #16
   439ec:	1c95      	addeq	r5, r2, #2
   439ee:	f04f 020a 	mov.w	r2, #10
   439f2:	bf08      	it	eq
   439f4:	9341      	streq	r3, [sp, #260]	; 0x104
   439f6:	46ab      	mov	fp, r5
   439f8:	f81b 1b01 	ldrb.w	r1, [fp], #1
   439fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   43a00:	2b09      	cmp	r3, #9
   43a02:	d921      	bls.n	43a48 <__ssvfiscanf_r+0xe4>
   43a04:	2203      	movs	r2, #3
   43a06:	487a      	ldr	r0, [pc, #488]	; (43bf0 <__ssvfiscanf_r+0x28c>)
   43a08:	f004 fba2 	bl	48150 <memchr>
   43a0c:	b138      	cbz	r0, 43a1e <__ssvfiscanf_r+0xba>
   43a0e:	eba0 0309 	sub.w	r3, r0, r9
   43a12:	2001      	movs	r0, #1
   43a14:	465d      	mov	r5, fp
   43a16:	4098      	lsls	r0, r3
   43a18:	9b41      	ldr	r3, [sp, #260]	; 0x104
   43a1a:	4318      	orrs	r0, r3
   43a1c:	9041      	str	r0, [sp, #260]	; 0x104
   43a1e:	f815 3b01 	ldrb.w	r3, [r5], #1
   43a22:	2b67      	cmp	r3, #103	; 0x67
   43a24:	d848      	bhi.n	43ab8 <__ssvfiscanf_r+0x154>
   43a26:	2b65      	cmp	r3, #101	; 0x65
   43a28:	f080 809f 	bcs.w	43b6a <__ssvfiscanf_r+0x206>
   43a2c:	2b47      	cmp	r3, #71	; 0x47
   43a2e:	d812      	bhi.n	43a56 <__ssvfiscanf_r+0xf2>
   43a30:	2b45      	cmp	r3, #69	; 0x45
   43a32:	f080 809a 	bcs.w	43b6a <__ssvfiscanf_r+0x206>
   43a36:	2b00      	cmp	r3, #0
   43a38:	d06b      	beq.n	43b12 <__ssvfiscanf_r+0x1ae>
   43a3a:	2b25      	cmp	r3, #37	; 0x25
   43a3c:	d050      	beq.n	43ae0 <__ssvfiscanf_r+0x17c>
   43a3e:	2303      	movs	r3, #3
   43a40:	9347      	str	r3, [sp, #284]	; 0x11c
   43a42:	230a      	movs	r3, #10
   43a44:	9342      	str	r3, [sp, #264]	; 0x108
   43a46:	e016      	b.n	43a76 <__ssvfiscanf_r+0x112>
   43a48:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   43a4a:	465d      	mov	r5, fp
   43a4c:	fb02 1303 	mla	r3, r2, r3, r1
   43a50:	3b30      	subs	r3, #48	; 0x30
   43a52:	9343      	str	r3, [sp, #268]	; 0x10c
   43a54:	e7cf      	b.n	439f6 <__ssvfiscanf_r+0x92>
   43a56:	2b5b      	cmp	r3, #91	; 0x5b
   43a58:	d067      	beq.n	43b2a <__ssvfiscanf_r+0x1c6>
   43a5a:	d827      	bhi.n	43aac <__ssvfiscanf_r+0x148>
   43a5c:	2b58      	cmp	r3, #88	; 0x58
   43a5e:	d1ee      	bne.n	43a3e <__ssvfiscanf_r+0xda>
   43a60:	9a41      	ldr	r2, [sp, #260]	; 0x104
   43a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   43a66:	9241      	str	r2, [sp, #260]	; 0x104
   43a68:	2210      	movs	r2, #16
   43a6a:	2b6f      	cmp	r3, #111	; 0x6f
   43a6c:	9242      	str	r2, [sp, #264]	; 0x108
   43a6e:	bf34      	ite	cc
   43a70:	2303      	movcc	r3, #3
   43a72:	2304      	movcs	r3, #4
   43a74:	9347      	str	r3, [sp, #284]	; 0x11c
   43a76:	6863      	ldr	r3, [r4, #4]
   43a78:	2b00      	cmp	r3, #0
   43a7a:	dd78      	ble.n	43b6e <__ssvfiscanf_r+0x20a>
   43a7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   43a7e:	0659      	lsls	r1, r3, #25
   43a80:	d404      	bmi.n	43a8c <__ssvfiscanf_r+0x128>
   43a82:	6823      	ldr	r3, [r4, #0]
   43a84:	781a      	ldrb	r2, [r3, #0]
   43a86:	5cba      	ldrb	r2, [r7, r2]
   43a88:	0712      	lsls	r2, r2, #28
   43a8a:	d477      	bmi.n	43b7c <__ssvfiscanf_r+0x218>
   43a8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   43a8e:	2b02      	cmp	r3, #2
   43a90:	f300 8087 	bgt.w	43ba2 <__ssvfiscanf_r+0x23e>
   43a94:	466b      	mov	r3, sp
   43a96:	4622      	mov	r2, r4
   43a98:	a941      	add	r1, sp, #260	; 0x104
   43a9a:	4630      	mov	r0, r6
   43a9c:	f000 f8ac 	bl	43bf8 <_scanf_chars>
   43aa0:	2801      	cmp	r0, #1
   43aa2:	f000 809c 	beq.w	43bde <__ssvfiscanf_r+0x27a>
   43aa6:	2802      	cmp	r0, #2
   43aa8:	d185      	bne.n	439b6 <__ssvfiscanf_r+0x52>
   43aaa:	e02f      	b.n	43b0c <__ssvfiscanf_r+0x1a8>
   43aac:	2b63      	cmp	r3, #99	; 0x63
   43aae:	d047      	beq.n	43b40 <__ssvfiscanf_r+0x1dc>
   43ab0:	2b64      	cmp	r3, #100	; 0x64
   43ab2:	d1c4      	bne.n	43a3e <__ssvfiscanf_r+0xda>
   43ab4:	220a      	movs	r2, #10
   43ab6:	e7d8      	b.n	43a6a <__ssvfiscanf_r+0x106>
   43ab8:	2b70      	cmp	r3, #112	; 0x70
   43aba:	d02d      	beq.n	43b18 <__ssvfiscanf_r+0x1b4>
   43abc:	d808      	bhi.n	43ad0 <__ssvfiscanf_r+0x16c>
   43abe:	2b6e      	cmp	r3, #110	; 0x6e
   43ac0:	d044      	beq.n	43b4c <__ssvfiscanf_r+0x1e8>
   43ac2:	d82e      	bhi.n	43b22 <__ssvfiscanf_r+0x1be>
   43ac4:	2b69      	cmp	r3, #105	; 0x69
   43ac6:	d1ba      	bne.n	43a3e <__ssvfiscanf_r+0xda>
   43ac8:	2300      	movs	r3, #0
   43aca:	9342      	str	r3, [sp, #264]	; 0x108
   43acc:	2303      	movs	r3, #3
   43ace:	e7d1      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43ad0:	2b75      	cmp	r3, #117	; 0x75
   43ad2:	d0ef      	beq.n	43ab4 <__ssvfiscanf_r+0x150>
   43ad4:	2b78      	cmp	r3, #120	; 0x78
   43ad6:	d0c3      	beq.n	43a60 <__ssvfiscanf_r+0xfc>
   43ad8:	2b73      	cmp	r3, #115	; 0x73
   43ada:	d1b0      	bne.n	43a3e <__ssvfiscanf_r+0xda>
   43adc:	2302      	movs	r3, #2
   43ade:	e7c9      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43ae0:	6863      	ldr	r3, [r4, #4]
   43ae2:	2b00      	cmp	r3, #0
   43ae4:	dd0c      	ble.n	43b00 <__ssvfiscanf_r+0x19c>
   43ae6:	6823      	ldr	r3, [r4, #0]
   43ae8:	781a      	ldrb	r2, [r3, #0]
   43aea:	4552      	cmp	r2, sl
   43aec:	d177      	bne.n	43bde <__ssvfiscanf_r+0x27a>
   43aee:	3301      	adds	r3, #1
   43af0:	6862      	ldr	r2, [r4, #4]
   43af2:	6023      	str	r3, [r4, #0]
   43af4:	3a01      	subs	r2, #1
   43af6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   43af8:	6062      	str	r2, [r4, #4]
   43afa:	3301      	adds	r3, #1
   43afc:	9345      	str	r3, [sp, #276]	; 0x114
   43afe:	e75a      	b.n	439b6 <__ssvfiscanf_r+0x52>
   43b00:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   43b02:	4621      	mov	r1, r4
   43b04:	4630      	mov	r0, r6
   43b06:	4798      	blx	r3
   43b08:	2800      	cmp	r0, #0
   43b0a:	d0ec      	beq.n	43ae6 <__ssvfiscanf_r+0x182>
   43b0c:	9844      	ldr	r0, [sp, #272]	; 0x110
   43b0e:	2800      	cmp	r0, #0
   43b10:	d15b      	bne.n	43bca <__ssvfiscanf_r+0x266>
   43b12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   43b16:	e05e      	b.n	43bd6 <__ssvfiscanf_r+0x272>
   43b18:	9a41      	ldr	r2, [sp, #260]	; 0x104
   43b1a:	f042 0220 	orr.w	r2, r2, #32
   43b1e:	9241      	str	r2, [sp, #260]	; 0x104
   43b20:	e79e      	b.n	43a60 <__ssvfiscanf_r+0xfc>
   43b22:	2308      	movs	r3, #8
   43b24:	9342      	str	r3, [sp, #264]	; 0x108
   43b26:	2304      	movs	r3, #4
   43b28:	e7a4      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43b2a:	4629      	mov	r1, r5
   43b2c:	4640      	mov	r0, r8
   43b2e:	f005 fbf9 	bl	49324 <__sccl>
   43b32:	9b41      	ldr	r3, [sp, #260]	; 0x104
   43b34:	4605      	mov	r5, r0
   43b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43b3a:	9341      	str	r3, [sp, #260]	; 0x104
   43b3c:	2301      	movs	r3, #1
   43b3e:	e799      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43b40:	9b41      	ldr	r3, [sp, #260]	; 0x104
   43b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   43b46:	9341      	str	r3, [sp, #260]	; 0x104
   43b48:	2300      	movs	r3, #0
   43b4a:	e793      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43b4c:	9841      	ldr	r0, [sp, #260]	; 0x104
   43b4e:	06c3      	lsls	r3, r0, #27
   43b50:	f53f af31 	bmi.w	439b6 <__ssvfiscanf_r+0x52>
   43b54:	9b00      	ldr	r3, [sp, #0]
   43b56:	07c0      	lsls	r0, r0, #31
   43b58:	9a45      	ldr	r2, [sp, #276]	; 0x114
   43b5a:	f103 0104 	add.w	r1, r3, #4
   43b5e:	9100      	str	r1, [sp, #0]
   43b60:	681b      	ldr	r3, [r3, #0]
   43b62:	bf4c      	ite	mi
   43b64:	801a      	strhmi	r2, [r3, #0]
   43b66:	601a      	strpl	r2, [r3, #0]
   43b68:	e725      	b.n	439b6 <__ssvfiscanf_r+0x52>
   43b6a:	2305      	movs	r3, #5
   43b6c:	e782      	b.n	43a74 <__ssvfiscanf_r+0x110>
   43b6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   43b70:	4621      	mov	r1, r4
   43b72:	4630      	mov	r0, r6
   43b74:	4798      	blx	r3
   43b76:	2800      	cmp	r0, #0
   43b78:	d080      	beq.n	43a7c <__ssvfiscanf_r+0x118>
   43b7a:	e7c7      	b.n	43b0c <__ssvfiscanf_r+0x1a8>
   43b7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   43b7e:	3201      	adds	r2, #1
   43b80:	9245      	str	r2, [sp, #276]	; 0x114
   43b82:	6862      	ldr	r2, [r4, #4]
   43b84:	3a01      	subs	r2, #1
   43b86:	2a00      	cmp	r2, #0
   43b88:	6062      	str	r2, [r4, #4]
   43b8a:	dd02      	ble.n	43b92 <__ssvfiscanf_r+0x22e>
   43b8c:	3301      	adds	r3, #1
   43b8e:	6023      	str	r3, [r4, #0]
   43b90:	e777      	b.n	43a82 <__ssvfiscanf_r+0x11e>
   43b92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   43b94:	4621      	mov	r1, r4
   43b96:	4630      	mov	r0, r6
   43b98:	4798      	blx	r3
   43b9a:	2800      	cmp	r0, #0
   43b9c:	f43f af71 	beq.w	43a82 <__ssvfiscanf_r+0x11e>
   43ba0:	e7b4      	b.n	43b0c <__ssvfiscanf_r+0x1a8>
   43ba2:	2b04      	cmp	r3, #4
   43ba4:	dc06      	bgt.n	43bb4 <__ssvfiscanf_r+0x250>
   43ba6:	466b      	mov	r3, sp
   43ba8:	4622      	mov	r2, r4
   43baa:	a941      	add	r1, sp, #260	; 0x104
   43bac:	4630      	mov	r0, r6
   43bae:	f000 f87b 	bl	43ca8 <_scanf_i>
   43bb2:	e775      	b.n	43aa0 <__ssvfiscanf_r+0x13c>
   43bb4:	4b0f      	ldr	r3, [pc, #60]	; (43bf4 <__ssvfiscanf_r+0x290>)
   43bb6:	2b00      	cmp	r3, #0
   43bb8:	f43f aefd 	beq.w	439b6 <__ssvfiscanf_r+0x52>
   43bbc:	466b      	mov	r3, sp
   43bbe:	4622      	mov	r2, r4
   43bc0:	a941      	add	r1, sp, #260	; 0x104
   43bc2:	4630      	mov	r0, r6
   43bc4:	e000      	b.n	43bc8 <__ssvfiscanf_r+0x264>
   43bc6:	bf00      	nop
   43bc8:	e76a      	b.n	43aa0 <__ssvfiscanf_r+0x13c>
   43bca:	89a3      	ldrh	r3, [r4, #12]
   43bcc:	f013 0f40 	tst.w	r3, #64	; 0x40
   43bd0:	bf18      	it	ne
   43bd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   43bd6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   43bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43bde:	9844      	ldr	r0, [sp, #272]	; 0x110
   43be0:	e7f9      	b.n	43bd6 <__ssvfiscanf_r+0x272>
   43be2:	bf00      	nop
   43be4:	00052acf 	.word	0x00052acf
   43be8:	00049271 	.word	0x00049271
   43bec:	000492eb 	.word	0x000492eb
   43bf0:	00052bd5 	.word	0x00052bd5
   43bf4:	00000000 	.word	0x00000000

00043bf8 <_scanf_chars>:
   43bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43bfc:	4615      	mov	r5, r2
   43bfe:	688a      	ldr	r2, [r1, #8]
   43c00:	4680      	mov	r8, r0
   43c02:	460c      	mov	r4, r1
   43c04:	b932      	cbnz	r2, 43c14 <_scanf_chars+0x1c>
   43c06:	698a      	ldr	r2, [r1, #24]
   43c08:	2a00      	cmp	r2, #0
   43c0a:	bf0c      	ite	eq
   43c0c:	2201      	moveq	r2, #1
   43c0e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   43c12:	608a      	str	r2, [r1, #8]
   43c14:	6822      	ldr	r2, [r4, #0]
   43c16:	2700      	movs	r7, #0
   43c18:	f8df 9088 	ldr.w	r9, [pc, #136]	; 43ca4 <_scanf_chars+0xac>
   43c1c:	06d1      	lsls	r1, r2, #27
   43c1e:	bf5f      	itttt	pl
   43c20:	681a      	ldrpl	r2, [r3, #0]
   43c22:	1d11      	addpl	r1, r2, #4
   43c24:	6019      	strpl	r1, [r3, #0]
   43c26:	6816      	ldrpl	r6, [r2, #0]
   43c28:	69a0      	ldr	r0, [r4, #24]
   43c2a:	b188      	cbz	r0, 43c50 <_scanf_chars+0x58>
   43c2c:	2801      	cmp	r0, #1
   43c2e:	d107      	bne.n	43c40 <_scanf_chars+0x48>
   43c30:	682b      	ldr	r3, [r5, #0]
   43c32:	781a      	ldrb	r2, [r3, #0]
   43c34:	6963      	ldr	r3, [r4, #20]
   43c36:	5c9b      	ldrb	r3, [r3, r2]
   43c38:	b953      	cbnz	r3, 43c50 <_scanf_chars+0x58>
   43c3a:	bb27      	cbnz	r7, 43c86 <_scanf_chars+0x8e>
   43c3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   43c40:	2802      	cmp	r0, #2
   43c42:	d120      	bne.n	43c86 <_scanf_chars+0x8e>
   43c44:	682b      	ldr	r3, [r5, #0]
   43c46:	781b      	ldrb	r3, [r3, #0]
   43c48:	f813 3009 	ldrb.w	r3, [r3, r9]
   43c4c:	071b      	lsls	r3, r3, #28
   43c4e:	d41a      	bmi.n	43c86 <_scanf_chars+0x8e>
   43c50:	6823      	ldr	r3, [r4, #0]
   43c52:	3701      	adds	r7, #1
   43c54:	06da      	lsls	r2, r3, #27
   43c56:	bf5e      	ittt	pl
   43c58:	682b      	ldrpl	r3, [r5, #0]
   43c5a:	781b      	ldrbpl	r3, [r3, #0]
   43c5c:	f806 3b01 	strbpl.w	r3, [r6], #1
   43c60:	682a      	ldr	r2, [r5, #0]
   43c62:	686b      	ldr	r3, [r5, #4]
   43c64:	3201      	adds	r2, #1
   43c66:	3b01      	subs	r3, #1
   43c68:	602a      	str	r2, [r5, #0]
   43c6a:	68a2      	ldr	r2, [r4, #8]
   43c6c:	606b      	str	r3, [r5, #4]
   43c6e:	3a01      	subs	r2, #1
   43c70:	60a2      	str	r2, [r4, #8]
   43c72:	b142      	cbz	r2, 43c86 <_scanf_chars+0x8e>
   43c74:	2b00      	cmp	r3, #0
   43c76:	dcd7      	bgt.n	43c28 <_scanf_chars+0x30>
   43c78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   43c7c:	4629      	mov	r1, r5
   43c7e:	4640      	mov	r0, r8
   43c80:	4798      	blx	r3
   43c82:	2800      	cmp	r0, #0
   43c84:	d0d0      	beq.n	43c28 <_scanf_chars+0x30>
   43c86:	6823      	ldr	r3, [r4, #0]
   43c88:	f013 0310 	ands.w	r3, r3, #16
   43c8c:	d105      	bne.n	43c9a <_scanf_chars+0xa2>
   43c8e:	68e2      	ldr	r2, [r4, #12]
   43c90:	3201      	adds	r2, #1
   43c92:	60e2      	str	r2, [r4, #12]
   43c94:	69a2      	ldr	r2, [r4, #24]
   43c96:	b102      	cbz	r2, 43c9a <_scanf_chars+0xa2>
   43c98:	7033      	strb	r3, [r6, #0]
   43c9a:	6923      	ldr	r3, [r4, #16]
   43c9c:	2000      	movs	r0, #0
   43c9e:	441f      	add	r7, r3
   43ca0:	6127      	str	r7, [r4, #16]
   43ca2:	e7cb      	b.n	43c3c <_scanf_chars+0x44>
   43ca4:	00052acf 	.word	0x00052acf

00043ca8 <_scanf_i>:
   43ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43cac:	4699      	mov	r9, r3
   43cae:	b087      	sub	sp, #28
   43cb0:	4b72      	ldr	r3, [pc, #456]	; (43e7c <_scanf_i+0x1d4>)
   43cb2:	460c      	mov	r4, r1
   43cb4:	4682      	mov	sl, r0
   43cb6:	4616      	mov	r6, r2
   43cb8:	4627      	mov	r7, r4
   43cba:	f04f 0b00 	mov.w	fp, #0
   43cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   43cc2:	ab03      	add	r3, sp, #12
   43cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   43cc8:	4b6d      	ldr	r3, [pc, #436]	; (43e80 <_scanf_i+0x1d8>)
   43cca:	69a1      	ldr	r1, [r4, #24]
   43ccc:	4a6d      	ldr	r2, [pc, #436]	; (43e84 <_scanf_i+0x1dc>)
   43cce:	2903      	cmp	r1, #3
   43cd0:	bf18      	it	ne
   43cd2:	461a      	movne	r2, r3
   43cd4:	68a3      	ldr	r3, [r4, #8]
   43cd6:	9201      	str	r2, [sp, #4]
   43cd8:	1e5a      	subs	r2, r3, #1
   43cda:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   43cde:	bf89      	itett	hi
   43ce0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   43ce4:	f04f 0800 	movls.w	r8, #0
   43ce8:	eb03 0805 	addhi.w	r8, r3, r5
   43cec:	f240 135d 	movwhi	r3, #349	; 0x15d
   43cf0:	bf88      	it	hi
   43cf2:	60a3      	strhi	r3, [r4, #8]
   43cf4:	f857 3b1c 	ldr.w	r3, [r7], #28
   43cf8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   43cfc:	463d      	mov	r5, r7
   43cfe:	6023      	str	r3, [r4, #0]
   43d00:	6831      	ldr	r1, [r6, #0]
   43d02:	ab03      	add	r3, sp, #12
   43d04:	2202      	movs	r2, #2
   43d06:	7809      	ldrb	r1, [r1, #0]
   43d08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   43d0c:	f004 fa20 	bl	48150 <memchr>
   43d10:	b328      	cbz	r0, 43d5e <_scanf_i+0xb6>
   43d12:	f1bb 0f01 	cmp.w	fp, #1
   43d16:	d159      	bne.n	43dcc <_scanf_i+0x124>
   43d18:	6862      	ldr	r2, [r4, #4]
   43d1a:	b92a      	cbnz	r2, 43d28 <_scanf_i+0x80>
   43d1c:	6822      	ldr	r2, [r4, #0]
   43d1e:	2308      	movs	r3, #8
   43d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   43d24:	6063      	str	r3, [r4, #4]
   43d26:	6022      	str	r2, [r4, #0]
   43d28:	6822      	ldr	r2, [r4, #0]
   43d2a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   43d2e:	6022      	str	r2, [r4, #0]
   43d30:	68a2      	ldr	r2, [r4, #8]
   43d32:	1e51      	subs	r1, r2, #1
   43d34:	60a1      	str	r1, [r4, #8]
   43d36:	b192      	cbz	r2, 43d5e <_scanf_i+0xb6>
   43d38:	6832      	ldr	r2, [r6, #0]
   43d3a:	1c51      	adds	r1, r2, #1
   43d3c:	6031      	str	r1, [r6, #0]
   43d3e:	7812      	ldrb	r2, [r2, #0]
   43d40:	f805 2b01 	strb.w	r2, [r5], #1
   43d44:	6872      	ldr	r2, [r6, #4]
   43d46:	3a01      	subs	r2, #1
   43d48:	2a00      	cmp	r2, #0
   43d4a:	6072      	str	r2, [r6, #4]
   43d4c:	dc07      	bgt.n	43d5e <_scanf_i+0xb6>
   43d4e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   43d52:	4631      	mov	r1, r6
   43d54:	4650      	mov	r0, sl
   43d56:	4790      	blx	r2
   43d58:	2800      	cmp	r0, #0
   43d5a:	f040 8085 	bne.w	43e68 <_scanf_i+0x1c0>
   43d5e:	f10b 0b01 	add.w	fp, fp, #1
   43d62:	f1bb 0f03 	cmp.w	fp, #3
   43d66:	d1cb      	bne.n	43d00 <_scanf_i+0x58>
   43d68:	6863      	ldr	r3, [r4, #4]
   43d6a:	b90b      	cbnz	r3, 43d70 <_scanf_i+0xc8>
   43d6c:	230a      	movs	r3, #10
   43d6e:	6063      	str	r3, [r4, #4]
   43d70:	6863      	ldr	r3, [r4, #4]
   43d72:	f04f 0b00 	mov.w	fp, #0
   43d76:	4944      	ldr	r1, [pc, #272]	; (43e88 <_scanf_i+0x1e0>)
   43d78:	6960      	ldr	r0, [r4, #20]
   43d7a:	1ac9      	subs	r1, r1, r3
   43d7c:	f005 fad2 	bl	49324 <__sccl>
   43d80:	68a3      	ldr	r3, [r4, #8]
   43d82:	6822      	ldr	r2, [r4, #0]
   43d84:	2b00      	cmp	r3, #0
   43d86:	d03d      	beq.n	43e04 <_scanf_i+0x15c>
   43d88:	6831      	ldr	r1, [r6, #0]
   43d8a:	6960      	ldr	r0, [r4, #20]
   43d8c:	f891 c000 	ldrb.w	ip, [r1]
   43d90:	f810 000c 	ldrb.w	r0, [r0, ip]
   43d94:	2800      	cmp	r0, #0
   43d96:	d035      	beq.n	43e04 <_scanf_i+0x15c>
   43d98:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   43d9c:	d124      	bne.n	43de8 <_scanf_i+0x140>
   43d9e:	0510      	lsls	r0, r2, #20
   43da0:	d522      	bpl.n	43de8 <_scanf_i+0x140>
   43da2:	f10b 0b01 	add.w	fp, fp, #1
   43da6:	f1b8 0f00 	cmp.w	r8, #0
   43daa:	d003      	beq.n	43db4 <_scanf_i+0x10c>
   43dac:	3301      	adds	r3, #1
   43dae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   43db2:	60a3      	str	r3, [r4, #8]
   43db4:	6873      	ldr	r3, [r6, #4]
   43db6:	3b01      	subs	r3, #1
   43db8:	2b00      	cmp	r3, #0
   43dba:	6073      	str	r3, [r6, #4]
   43dbc:	dd1b      	ble.n	43df6 <_scanf_i+0x14e>
   43dbe:	6833      	ldr	r3, [r6, #0]
   43dc0:	3301      	adds	r3, #1
   43dc2:	6033      	str	r3, [r6, #0]
   43dc4:	68a3      	ldr	r3, [r4, #8]
   43dc6:	3b01      	subs	r3, #1
   43dc8:	60a3      	str	r3, [r4, #8]
   43dca:	e7d9      	b.n	43d80 <_scanf_i+0xd8>
   43dcc:	f1bb 0f02 	cmp.w	fp, #2
   43dd0:	d1ae      	bne.n	43d30 <_scanf_i+0x88>
   43dd2:	6822      	ldr	r2, [r4, #0]
   43dd4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   43dd8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   43ddc:	d1bf      	bne.n	43d5e <_scanf_i+0xb6>
   43dde:	2310      	movs	r3, #16
   43de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   43de4:	6063      	str	r3, [r4, #4]
   43de6:	e7a2      	b.n	43d2e <_scanf_i+0x86>
   43de8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   43dec:	6022      	str	r2, [r4, #0]
   43dee:	780b      	ldrb	r3, [r1, #0]
   43df0:	f805 3b01 	strb.w	r3, [r5], #1
   43df4:	e7de      	b.n	43db4 <_scanf_i+0x10c>
   43df6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   43dfa:	4631      	mov	r1, r6
   43dfc:	4650      	mov	r0, sl
   43dfe:	4798      	blx	r3
   43e00:	2800      	cmp	r0, #0
   43e02:	d0df      	beq.n	43dc4 <_scanf_i+0x11c>
   43e04:	6823      	ldr	r3, [r4, #0]
   43e06:	05d9      	lsls	r1, r3, #23
   43e08:	d50d      	bpl.n	43e26 <_scanf_i+0x17e>
   43e0a:	42bd      	cmp	r5, r7
   43e0c:	d909      	bls.n	43e22 <_scanf_i+0x17a>
   43e0e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   43e12:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   43e16:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   43e1a:	4632      	mov	r2, r6
   43e1c:	4645      	mov	r5, r8
   43e1e:	4650      	mov	r0, sl
   43e20:	4798      	blx	r3
   43e22:	42bd      	cmp	r5, r7
   43e24:	d028      	beq.n	43e78 <_scanf_i+0x1d0>
   43e26:	6822      	ldr	r2, [r4, #0]
   43e28:	f012 0210 	ands.w	r2, r2, #16
   43e2c:	d113      	bne.n	43e56 <_scanf_i+0x1ae>
   43e2e:	702a      	strb	r2, [r5, #0]
   43e30:	4639      	mov	r1, r7
   43e32:	6863      	ldr	r3, [r4, #4]
   43e34:	4650      	mov	r0, sl
   43e36:	9e01      	ldr	r6, [sp, #4]
   43e38:	47b0      	blx	r6
   43e3a:	f8d9 3000 	ldr.w	r3, [r9]
   43e3e:	6821      	ldr	r1, [r4, #0]
   43e40:	1d1a      	adds	r2, r3, #4
   43e42:	f011 0f20 	tst.w	r1, #32
   43e46:	f8c9 2000 	str.w	r2, [r9]
   43e4a:	681b      	ldr	r3, [r3, #0]
   43e4c:	d00f      	beq.n	43e6e <_scanf_i+0x1c6>
   43e4e:	6018      	str	r0, [r3, #0]
   43e50:	68e3      	ldr	r3, [r4, #12]
   43e52:	3301      	adds	r3, #1
   43e54:	60e3      	str	r3, [r4, #12]
   43e56:	1bed      	subs	r5, r5, r7
   43e58:	2000      	movs	r0, #0
   43e5a:	44ab      	add	fp, r5
   43e5c:	6925      	ldr	r5, [r4, #16]
   43e5e:	445d      	add	r5, fp
   43e60:	6125      	str	r5, [r4, #16]
   43e62:	b007      	add	sp, #28
   43e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43e68:	f04f 0b00 	mov.w	fp, #0
   43e6c:	e7ca      	b.n	43e04 <_scanf_i+0x15c>
   43e6e:	07ca      	lsls	r2, r1, #31
   43e70:	bf4c      	ite	mi
   43e72:	8018      	strhmi	r0, [r3, #0]
   43e74:	6018      	strpl	r0, [r3, #0]
   43e76:	e7eb      	b.n	43e50 <_scanf_i+0x1a8>
   43e78:	2001      	movs	r0, #1
   43e7a:	e7f2      	b.n	43e62 <_scanf_i+0x1ba>
   43e7c:	00049970 	.word	0x00049970
   43e80:	00048647 	.word	0x00048647
   43e84:	00048643 	.word	0x00048643
   43e88:	00052c20 	.word	0x00052c20

00043e8c <_read_r>:
   43e8c:	b538      	push	{r3, r4, r5, lr}
   43e8e:	4605      	mov	r5, r0
   43e90:	4c06      	ldr	r4, [pc, #24]	; (43eac <_read_r+0x20>)
   43e92:	4608      	mov	r0, r1
   43e94:	4611      	mov	r1, r2
   43e96:	2200      	movs	r2, #0
   43e98:	6022      	str	r2, [r4, #0]
   43e9a:	461a      	mov	r2, r3
   43e9c:	f001 fd8a 	bl	459b4 <_read>
   43ea0:	1c43      	adds	r3, r0, #1
   43ea2:	d102      	bne.n	43eaa <_read_r+0x1e>
   43ea4:	6823      	ldr	r3, [r4, #0]
   43ea6:	b103      	cbz	r3, 43eaa <_read_r+0x1e>
   43ea8:	602b      	str	r3, [r5, #0]
   43eaa:	bd38      	pop	{r3, r4, r5, pc}
   43eac:	2002d330 	.word	0x2002d330

00043eb0 <raise>:
   43eb0:	4b02      	ldr	r3, [pc, #8]	; (43ebc <raise+0xc>)
   43eb2:	4601      	mov	r1, r0
   43eb4:	6818      	ldr	r0, [r3, #0]
   43eb6:	f005 ba66 	b.w	49386 <_raise_r>
   43eba:	bf00      	nop
   43ebc:	200208e0 	.word	0x200208e0

00043ec0 <_kill_r>:
   43ec0:	b538      	push	{r3, r4, r5, lr}
   43ec2:	2300      	movs	r3, #0
   43ec4:	4c06      	ldr	r4, [pc, #24]	; (43ee0 <_kill_r+0x20>)
   43ec6:	4605      	mov	r5, r0
   43ec8:	4608      	mov	r0, r1
   43eca:	4611      	mov	r1, r2
   43ecc:	6023      	str	r3, [r4, #0]
   43ece:	f001 fd80 	bl	459d2 <_kill>
   43ed2:	1c43      	adds	r3, r0, #1
   43ed4:	d102      	bne.n	43edc <_kill_r+0x1c>
   43ed6:	6823      	ldr	r3, [r4, #0]
   43ed8:	b103      	cbz	r3, 43edc <_kill_r+0x1c>
   43eda:	602b      	str	r3, [r5, #0]
   43edc:	bd38      	pop	{r3, r4, r5, pc}
   43ede:	bf00      	nop
   43ee0:	2002d330 	.word	0x2002d330

00043ee4 <_fstat_r>:
   43ee4:	b538      	push	{r3, r4, r5, lr}
   43ee6:	2300      	movs	r3, #0
   43ee8:	4c06      	ldr	r4, [pc, #24]	; (43f04 <_fstat_r+0x20>)
   43eea:	4605      	mov	r5, r0
   43eec:	4608      	mov	r0, r1
   43eee:	4611      	mov	r1, r2
   43ef0:	6023      	str	r3, [r4, #0]
   43ef2:	f001 fd72 	bl	459da <_fstat>
   43ef6:	1c43      	adds	r3, r0, #1
   43ef8:	d102      	bne.n	43f00 <_fstat_r+0x1c>
   43efa:	6823      	ldr	r3, [r4, #0]
   43efc:	b103      	cbz	r3, 43f00 <_fstat_r+0x1c>
   43efe:	602b      	str	r3, [r5, #0]
   43f00:	bd38      	pop	{r3, r4, r5, pc}
   43f02:	bf00      	nop
   43f04:	2002d330 	.word	0x2002d330

00043f08 <_isatty_r>:
   43f08:	b538      	push	{r3, r4, r5, lr}
   43f0a:	2300      	movs	r3, #0
   43f0c:	4c05      	ldr	r4, [pc, #20]	; (43f24 <_isatty_r+0x1c>)
   43f0e:	4605      	mov	r5, r0
   43f10:	4608      	mov	r0, r1
   43f12:	6023      	str	r3, [r4, #0]
   43f14:	f001 fd5b 	bl	459ce <_isatty>
   43f18:	1c43      	adds	r3, r0, #1
   43f1a:	d102      	bne.n	43f22 <_isatty_r+0x1a>
   43f1c:	6823      	ldr	r3, [r4, #0]
   43f1e:	b103      	cbz	r3, 43f22 <_isatty_r+0x1a>
   43f20:	602b      	str	r3, [r5, #0]
   43f22:	bd38      	pop	{r3, r4, r5, pc}
   43f24:	2002d330 	.word	0x2002d330

00043f28 <cloud_send>:
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_send(const struct cloud_backend *const backend,
			     struct cloud_msg *msg)
{
	if (backend == NULL || backend->api == NULL ||
   43f28:	b120      	cbz	r0, 43f34 <cloud_send+0xc>
   43f2a:	6803      	ldr	r3, [r0, #0]
   43f2c:	b113      	cbz	r3, 43f34 <cloud_send+0xc>
	    backend->api->send == NULL) {
   43f2e:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   43f30:	b103      	cbz	r3, 43f34 <cloud_send+0xc>
		return -ENOTSUP;
	}

	return backend->api->send(backend, msg);
   43f32:	4718      	bx	r3
}
   43f34:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43f38:	4770      	bx	lr

00043f3a <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   43f3a:	e8d0 3fef 	ldaex	r3, [r0]
   43f3e:	e8c0 1fe2 	stlex	r2, r1, [r0]
   43f42:	2a00      	cmp	r2, #0
   43f44:	d1f9      	bne.n	43f3a <atomic_set>
}
   43f46:	4618      	mov	r0, r3
   43f48:	4770      	bx	lr

00043f4a <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   43f4a:	e8d0 0faf 	lda	r0, [r0]
}
   43f4e:	4770      	bx	lr

00043f50 <k_uptime_get>:
{
   43f50:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   43f52:	f004 f844 	bl	47fde <z_impl_k_uptime_ticks>
   43f56:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   43f5a:	fba0 2304 	umull	r2, r3, r0, r4
   43f5e:	fb04 3301 	mla	r3, r4, r1, r3
   43f62:	0bd0      	lsrs	r0, r2, #15
}
   43f64:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   43f68:	0bd9      	lsrs	r1, r3, #15
   43f6a:	bd10      	pop	{r4, pc}

00043f6c <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   43f6c:	f06f 0173 	mvn.w	r1, #115	; 0x73
   43f70:	2000      	movs	r0, #0
   43f72:	f7dd bd19 	b.w	219a8 <error_handler>

00043f76 <cloud_error_handler>:
	error_handler(ERROR_CLOUD, err);
   43f76:	4601      	mov	r1, r0
   43f78:	2000      	movs	r0, #0
   43f7a:	f7dd bd15 	b.w	219a8 <error_handler>

00043f7e <bsd_recoverable_error_handler>:
	error_handler(ERROR_BSD_RECOVERABLE, (int)err);
   43f7e:	4601      	mov	r1, r0
   43f80:	2001      	movs	r0, #1
   43f82:	f7dd bd11 	b.w	219a8 <error_handler>

00043f86 <sensors_start_work_fn>:
	sensors_start();
   43f86:	f7de b8a9 	b.w	220dc <sensors_start>

00043f8a <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   43f8a:	6883      	ldr	r3, [r0, #8]
   43f8c:	691b      	ldr	r3, [r3, #16]
   43f8e:	4718      	bx	r3

00043f90 <motion_simulate_trigger>:

void motion_simulate_trigger(void)
{
	sensor_trigger_handler(NULL, NULL);
   43f90:	f7de bc7a 	b.w	22888 <sensor_trigger_handler.isra.0>

00043f94 <ui_led_set_color>:
}
   43f94:	f06f 0085 	mvn.w	r0, #133	; 0x85
   43f98:	4770      	bx	lr

00043f9a <json_value_string_compare>:
{
   43f9a:	b510      	push	{r4, lr}
   43f9c:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   43f9e:	f002 ffca 	bl	46f36 <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   43fa2:	b130      	cbz	r0, 43fb2 <json_value_string_compare+0x18>
   43fa4:	b134      	cbz	r4, 43fb4 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   43fa6:	4621      	mov	r1, r4
   43fa8:	f7d9 f952 	bl	1d250 <strcmp>
   43fac:	fab0 f080 	clz	r0, r0
   43fb0:	0940      	lsrs	r0, r0, #5
}
   43fb2:	bd10      	pop	{r4, pc}
		return false;
   43fb4:	4620      	mov	r0, r4
   43fb6:	e7fc      	b.n	43fb2 <json_value_string_compare+0x18>

00043fb8 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   43fb8:	b108      	cbz	r0, 43fbe <json_object_decode+0x6>
   43fba:	f002 bf5a 	b.w	46e72 <cJSON_GetObjectItem>
}
   43fbe:	4770      	bx	lr

00043fc0 <add_array_obj>:
{
   43fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   43fc4:	4681      	mov	r9, r0
   43fc6:	4688      	mov	r8, r1
   43fc8:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   43fca:	461e      	mov	r6, r3
   43fcc:	b32b      	cbz	r3, 4401a <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   43fce:	f7e7 f8fd 	bl	2b1cc <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   43fd2:	4604      	mov	r4, r0
   43fd4:	b1d0      	cbz	r0, 4400c <add_array_obj+0x4c>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   43fd6:	2500      	movs	r5, #0
   43fd8:	4545      	cmp	r5, r8
   43fda:	d10d      	bne.n	43ff8 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   43fdc:	4620      	mov	r0, r4
   43fde:	f002 ff3a 	bl	46e56 <cJSON_GetArraySize>
   43fe2:	b908      	cbnz	r0, 43fe8 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   43fe4:	2304      	movs	r3, #4
   43fe6:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   43fe8:	4630      	mov	r0, r6
   43fea:	4622      	mov	r2, r4
   43fec:	4639      	mov	r1, r7
   43fee:	f002 ff4c 	bl	46e8a <cJSON_AddItemToObject>
	return 0;
   43ff2:	2000      	movs	r0, #0
}
   43ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   43ff8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
   43ffc:	b158      	cbz	r0, 44016 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   43ffe:	f7e7 f8cd 	bl	2b19c <cJSON_CreateString>
			if (str == NULL) {
   44002:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   44004:	4620      	mov	r0, r4
			if (str == NULL) {
   44006:	b921      	cbnz	r1, 44012 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   44008:	f7e7 f818 	bl	2b03c <cJSON_Delete>
		return -ENOMEM;
   4400c:	f06f 000b 	mvn.w	r0, #11
   44010:	e7f0      	b.n	43ff4 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   44012:	f002 ff38 	bl	46e86 <cJSON_AddItemToArray>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   44016:	3501      	adds	r5, #1
   44018:	e7de      	b.n	43fd8 <add_array_obj+0x18>
		return -EINVAL;
   4401a:	f06f 0015 	mvn.w	r0, #21
   4401e:	e7e9      	b.n	43ff4 <add_array_obj+0x34>

00044020 <env_sensors_get_air_quality>:
}
   44020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   44024:	4770      	bx	lr

00044026 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   44026:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   4402a:	b2db      	uxtb	r3, r3
   4402c:	2b09      	cmp	r3, #9
   4402e:	d802      	bhi.n	44036 <char2hex+0x10>
		*x = c - '0';
   44030:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   44032:	2000      	movs	r0, #0
   44034:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   44036:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   4403a:	2b05      	cmp	r3, #5
   4403c:	d802      	bhi.n	44044 <char2hex+0x1e>
		*x = c - 'a' + 10;
   4403e:	3857      	subs	r0, #87	; 0x57
   44040:	7008      	strb	r0, [r1, #0]
   44042:	e7f6      	b.n	44032 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   44044:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   44048:	2b05      	cmp	r3, #5
   4404a:	d801      	bhi.n	44050 <char2hex+0x2a>
		*x = c - 'A' + 10;
   4404c:	3837      	subs	r0, #55	; 0x37
   4404e:	e7f7      	b.n	44040 <char2hex+0x1a>
		return -EINVAL;
   44050:	f06f 0015 	mvn.w	r0, #21
}
   44054:	4770      	bx	lr

00044056 <sys_notify_validate>:
	if (notify == NULL) {
   44056:	b140      	cbz	r0, 4406a <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   44058:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   4405a:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   4405e:	2b02      	cmp	r3, #2
   44060:	d006      	beq.n	44070 <sys_notify_validate+0x1a>
   44062:	2b03      	cmp	r3, #3
   44064:	d004      	beq.n	44070 <sys_notify_validate+0x1a>
   44066:	2b01      	cmp	r3, #1
   44068:	d005      	beq.n	44076 <sys_notify_validate+0x20>
		return -EINVAL;
   4406a:	f06f 0015 	mvn.w	r0, #21
}
   4406e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   44070:	6803      	ldr	r3, [r0, #0]
   44072:	2b00      	cmp	r3, #0
   44074:	d0f9      	beq.n	4406a <sys_notify_validate+0x14>
		notify->result = 0;
   44076:	2300      	movs	r3, #0
   44078:	6083      	str	r3, [r0, #8]
   4407a:	4618      	mov	r0, r3
   4407c:	4770      	bx	lr

0004407e <arch_printk_char_out>:
}
   4407e:	2000      	movs	r0, #0
   44080:	4770      	bx	lr

00044082 <str_out>:
{
   44082:	b530      	push	{r4, r5, lr}
   44084:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   44086:	680c      	ldr	r4, [r1, #0]
   44088:	1c55      	adds	r5, r2, #1
   4408a:	b114      	cbz	r4, 44092 <str_out+0x10>
   4408c:	684b      	ldr	r3, [r1, #4]
   4408e:	4293      	cmp	r3, r2
   44090:	dc01      	bgt.n	44096 <str_out+0x14>
		ctx->count++;
   44092:	608d      	str	r5, [r1, #8]
}
   44094:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   44096:	3b01      	subs	r3, #1
   44098:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   4409a:	bf08      	it	eq
   4409c:	2200      	moveq	r2, #0
   4409e:	608d      	str	r5, [r1, #8]
   440a0:	bf0c      	ite	eq
   440a2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   440a4:	54a0      	strbne	r0, [r4, r2]
   440a6:	e7f5      	b.n	44094 <str_out+0x12>

000440a8 <z_vprintk>:
{
   440a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   440ac:	2500      	movs	r5, #0
{
   440ae:	4606      	mov	r6, r0
   440b0:	460f      	mov	r7, r1
   440b2:	461c      	mov	r4, r3
	int min_width = -1;
   440b4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   440b8:	46a8      	mov	r8, r5
{
   440ba:	b087      	sub	sp, #28
   440bc:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
			might_format = 0;
   440c0:	f04f 0a00 	mov.w	sl, #0
					break;
   440c4:	e007      	b.n	440d6 <z_vprintk+0x2e>
		if (!might_format) {
   440c6:	f1ba 0f00 	cmp.w	sl, #0
   440ca:	d10b      	bne.n	440e4 <z_vprintk+0x3c>
			if (*fmt != '%') {
   440cc:	2825      	cmp	r0, #37	; 0x25
   440ce:	f000 80f0 	beq.w	442b2 <z_vprintk+0x20a>
				out((int)*fmt, ctx);
   440d2:	4639      	mov	r1, r7
   440d4:	47b0      	blx	r6
	while (*fmt) {
   440d6:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
   440da:	2800      	cmp	r0, #0
   440dc:	d1f3      	bne.n	440c6 <z_vprintk+0x1e>
}
   440de:	b007      	add	sp, #28
   440e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   440e4:	2864      	cmp	r0, #100	; 0x64
   440e6:	d06c      	beq.n	441c2 <z_vprintk+0x11a>
   440e8:	d81a      	bhi.n	44120 <z_vprintk+0x78>
   440ea:	2839      	cmp	r0, #57	; 0x39
   440ec:	d80a      	bhi.n	44104 <z_vprintk+0x5c>
   440ee:	2831      	cmp	r0, #49	; 0x31
   440f0:	d25e      	bcs.n	441b0 <z_vprintk+0x108>
   440f2:	282d      	cmp	r0, #45	; 0x2d
   440f4:	f000 80e4 	beq.w	442c0 <z_vprintk+0x218>
   440f8:	2830      	cmp	r0, #48	; 0x30
   440fa:	d04a      	beq.n	44192 <z_vprintk+0xea>
   440fc:	2825      	cmp	r0, #37	; 0x25
   440fe:	d107      	bne.n	44110 <z_vprintk+0x68>
				out((int)'%', ctx);
   44100:	4639      	mov	r1, r7
   44102:	e00b      	b.n	4411c <z_vprintk+0x74>
			switch (*fmt) {
   44104:	2858      	cmp	r0, #88	; 0x58
   44106:	f000 80a5 	beq.w	44254 <z_vprintk+0x1ac>
   4410a:	2863      	cmp	r0, #99	; 0x63
   4410c:	f000 80cd 	beq.w	442aa <z_vprintk+0x202>
					out((int)'%', ctx);
   44110:	4639      	mov	r1, r7
   44112:	2025      	movs	r0, #37	; 0x25
   44114:	47b0      	blx	r6
					out((int)*fmt, ctx);
   44116:	4639      	mov	r1, r7
   44118:	f89b 0000 	ldrb.w	r0, [fp]
   4411c:	47b0      	blx	r6
   4411e:	e7cf      	b.n	440c0 <z_vprintk+0x18>
			switch (*fmt) {
   44120:	2870      	cmp	r0, #112	; 0x70
   44122:	f000 808d 	beq.w	44240 <z_vprintk+0x198>
   44126:	d80d      	bhi.n	44144 <z_vprintk+0x9c>
   44128:	2869      	cmp	r0, #105	; 0x69
   4412a:	d04a      	beq.n	441c2 <z_vprintk+0x11a>
   4412c:	286c      	cmp	r0, #108	; 0x6c
   4412e:	d103      	bne.n	44138 <z_vprintk+0x90>
				} else if (*fmt == 'l' && length_mod == 'l') {
   44130:	2d6c      	cmp	r5, #108	; 0x6c
   44132:	d12a      	bne.n	4418a <z_vprintk+0xe2>
					length_mod = 'L';
   44134:	254c      	movs	r5, #76	; 0x4c
   44136:	e7ce      	b.n	440d6 <z_vprintk+0x2e>
			switch (*fmt) {
   44138:	2868      	cmp	r0, #104	; 0x68
   4413a:	d1e9      	bne.n	44110 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
   4413c:	2d68      	cmp	r5, #104	; 0x68
   4413e:	d124      	bne.n	4418a <z_vprintk+0xe2>
					length_mod = 'H';
   44140:	2548      	movs	r5, #72	; 0x48
   44142:	e7c8      	b.n	440d6 <z_vprintk+0x2e>
			switch (*fmt) {
   44144:	2875      	cmp	r0, #117	; 0x75
   44146:	d03c      	beq.n	441c2 <z_vprintk+0x11a>
   44148:	d81b      	bhi.n	44182 <z_vprintk+0xda>
   4414a:	2873      	cmp	r0, #115	; 0x73
   4414c:	d1e0      	bne.n	44110 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
   4414e:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
   44152:	469a      	mov	sl, r3
   44154:	4652      	mov	r2, sl
   44156:	f81a 0b01 	ldrb.w	r0, [sl], #1
   4415a:	2800      	cmp	r0, #0
   4415c:	f040 80a0 	bne.w	442a0 <z_vprintk+0x1f8>
				if (padding == PAD_SPACE_AFTER) {
   44160:	f1b8 0f03 	cmp.w	r8, #3
   44164:	f040 80b2 	bne.w	442cc <z_vprintk+0x224>
					int remaining = min_width - (s - start);
   44168:	eba2 0a03 	sub.w	sl, r2, r3
   4416c:	eba9 0a0a 	sub.w	sl, r9, sl
					while (remaining-- > 0) {
   44170:	f1ba 0f00 	cmp.w	sl, #0
   44174:	dda4      	ble.n	440c0 <z_vprintk+0x18>
						out(' ', ctx);
   44176:	4639      	mov	r1, r7
   44178:	2020      	movs	r0, #32
   4417a:	47b0      	blx	r6
   4417c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   44180:	e7f6      	b.n	44170 <z_vprintk+0xc8>
			switch (*fmt) {
   44182:	2878      	cmp	r0, #120	; 0x78
   44184:	d066      	beq.n	44254 <z_vprintk+0x1ac>
   44186:	287a      	cmp	r0, #122	; 0x7a
   44188:	d1c2      	bne.n	44110 <z_vprintk+0x68>
				} else if (length_mod == 0) {
   4418a:	2d00      	cmp	r5, #0
   4418c:	d1c0      	bne.n	44110 <z_vprintk+0x68>
   4418e:	4605      	mov	r5, r0
   44190:	e7a1      	b.n	440d6 <z_vprintk+0x2e>
				if (min_width < 0 && padding == PAD_NONE) {
   44192:	f1b9 0f00 	cmp.w	r9, #0
   44196:	da0e      	bge.n	441b6 <z_vprintk+0x10e>
   44198:	f1b8 0f00 	cmp.w	r8, #0
   4419c:	f000 8093 	beq.w	442c6 <z_vprintk+0x21e>
					min_width = *fmt - '0';
   441a0:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   441a4:	f1b8 0f00 	cmp.w	r8, #0
   441a8:	bf08      	it	eq
   441aa:	f04f 0802 	moveq.w	r8, #2
   441ae:	e792      	b.n	440d6 <z_vprintk+0x2e>
				if (min_width < 0) {
   441b0:	f1b9 0f00 	cmp.w	r9, #0
   441b4:	dbf4      	blt.n	441a0 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
   441b6:	230a      	movs	r3, #10
   441b8:	fb03 0909 	mla	r9, r3, r9, r0
   441bc:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   441c0:	e7f0      	b.n	441a4 <z_vprintk+0xfc>
				if (length_mod == 'z') {
   441c2:	2d7a      	cmp	r5, #122	; 0x7a
   441c4:	d106      	bne.n	441d4 <z_vprintk+0x12c>
					d = va_arg(ap, long);
   441c6:	46a2      	mov	sl, r4
   441c8:	f85a 2b04 	ldr.w	r2, [sl], #4
   441cc:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   441ce:	2875      	cmp	r0, #117	; 0x75
   441d0:	d125      	bne.n	4421e <z_vprintk+0x176>
   441d2:	e00f      	b.n	441f4 <z_vprintk+0x14c>
				} else if (length_mod == 'l') {
   441d4:	2d6c      	cmp	r5, #108	; 0x6c
   441d6:	d0f6      	beq.n	441c6 <z_vprintk+0x11e>
				} else if (length_mod == 'L') {
   441d8:	2d4c      	cmp	r5, #76	; 0x4c
   441da:	d105      	bne.n	441e8 <z_vprintk+0x140>
					long long lld = va_arg(ap, long long);
   441dc:	3407      	adds	r4, #7
   441de:	f024 0a07 	bic.w	sl, r4, #7
					d = (printk_val_t) lld;
   441e2:	e8fa 2302 	ldrd	r2, r3, [sl], #8
   441e6:	e7f2      	b.n	441ce <z_vprintk+0x126>
				} else if (*fmt == 'u') {
   441e8:	2875      	cmp	r0, #117	; 0x75
   441ea:	f104 0a04 	add.w	sl, r4, #4
					d = va_arg(ap, unsigned int);
   441ee:	6822      	ldr	r2, [r4, #0]
				} else if (*fmt == 'u') {
   441f0:	d114      	bne.n	4421c <z_vprintk+0x174>
					d = va_arg(ap, unsigned int);
   441f2:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
   441f4:	f1b8 0103 	subs.w	r1, r8, #3
   441f8:	bf18      	it	ne
   441fa:	2101      	movne	r1, #1
   441fc:	f1b8 0f01 	cmp.w	r8, #1
   44200:	bf0c      	ite	eq
   44202:	2030      	moveq	r0, #48	; 0x30
   44204:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   44206:	9101      	str	r1, [sp, #4]
   44208:	210a      	movs	r1, #10
   4420a:	e9cd 0902 	strd	r0, r9, [sp, #8]
   4420e:	9100      	str	r1, [sp, #0]
   44210:	4630      	mov	r0, r6
   44212:	4639      	mov	r1, r7
   44214:	f7e0 f81a 	bl	2424c <print_digits.part.0>
   44218:	4654      	mov	r4, sl
   4421a:	e751      	b.n	440c0 <z_vprintk+0x18>
					d = va_arg(ap, int);
   4421c:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
   4421e:	2a00      	cmp	r2, #0
   44220:	f173 0100 	sbcs.w	r1, r3, #0
   44224:	dae6      	bge.n	441f4 <z_vprintk+0x14c>
					out((int)'-', ctx);
   44226:	4639      	mov	r1, r7
   44228:	202d      	movs	r0, #45	; 0x2d
   4422a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   4422e:	47b0      	blx	r6
					d = -d;
   44230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   44234:	4252      	negs	r2, r2
   44236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
   4423a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   4423e:	e7d9      	b.n	441f4 <z_vprintk+0x14c>
				out('0', ctx);
   44240:	4639      	mov	r1, r7
   44242:	2030      	movs	r0, #48	; 0x30
   44244:	47b0      	blx	r6
				out('x', ctx);
   44246:	4639      	mov	r1, r7
   44248:	2078      	movs	r0, #120	; 0x78
   4424a:	47b0      	blx	r6
				min_width = sizeof(void *) * 2;
   4424c:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   44250:	f04f 0801 	mov.w	r8, #1
				if (*fmt == 'p') {
   44254:	f89b 3000 	ldrb.w	r3, [fp]
   44258:	2b70      	cmp	r3, #112	; 0x70
   4425a:	d103      	bne.n	44264 <z_vprintk+0x1bc>
					x = va_arg(ap, unsigned int);
   4425c:	f854 2b04 	ldr.w	r2, [r4], #4
   44260:	2300      	movs	r3, #0
   44262:	e00a      	b.n	4427a <z_vprintk+0x1d2>
				} else if (length_mod == 'l') {
   44264:	2d6c      	cmp	r5, #108	; 0x6c
   44266:	d0f9      	beq.n	4425c <z_vprintk+0x1b4>
				} else if (length_mod == 'L') {
   44268:	2d4c      	cmp	r5, #76	; 0x4c
   4426a:	d1f7      	bne.n	4425c <z_vprintk+0x1b4>
					x = va_arg(ap, unsigned long long);
   4426c:	3407      	adds	r4, #7
   4426e:	f024 0307 	bic.w	r3, r4, #7
   44272:	461c      	mov	r4, r3
   44274:	685b      	ldr	r3, [r3, #4]
   44276:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
   4427a:	f1b8 0103 	subs.w	r1, r8, #3
   4427e:	bf18      	it	ne
   44280:	2101      	movne	r1, #1
   44282:	f1b8 0f01 	cmp.w	r8, #1
   44286:	bf0c      	ite	eq
   44288:	2030      	moveq	r0, #48	; 0x30
   4428a:	2020      	movne	r0, #32
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
   4428c:	9101      	str	r1, [sp, #4]
   4428e:	2110      	movs	r1, #16
   44290:	e9cd 0902 	strd	r0, r9, [sp, #8]
   44294:	9100      	str	r1, [sp, #0]
   44296:	4630      	mov	r0, r6
   44298:	4639      	mov	r1, r7
   4429a:	f7df ffd7 	bl	2424c <print_digits.part.0>
   4429e:	e70f      	b.n	440c0 <z_vprintk+0x18>
					out((int)(*s++), ctx);
   442a0:	4639      	mov	r1, r7
   442a2:	9304      	str	r3, [sp, #16]
   442a4:	47b0      	blx	r6
   442a6:	9b04      	ldr	r3, [sp, #16]
   442a8:	e754      	b.n	44154 <z_vprintk+0xac>
				out(c, ctx);
   442aa:	4639      	mov	r1, r7
   442ac:	f854 0b04 	ldr.w	r0, [r4], #4
   442b0:	e734      	b.n	4411c <z_vprintk+0x74>
				length_mod = 0;
   442b2:	4655      	mov	r5, sl
				padding = PAD_NONE;
   442b4:	46d0      	mov	r8, sl
				min_width = -1;
   442b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   442ba:	f04f 0a01 	mov.w	sl, #1
   442be:	e70a      	b.n	440d6 <z_vprintk+0x2e>
				padding = PAD_SPACE_AFTER;
   442c0:	f04f 0803 	mov.w	r8, #3
   442c4:	e707      	b.n	440d6 <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
   442c6:	f04f 0801 	mov.w	r8, #1
   442ca:	e704      	b.n	440d6 <z_vprintk+0x2e>
			might_format = 0;
   442cc:	4682      	mov	sl, r0
   442ce:	e702      	b.n	440d6 <z_vprintk+0x2e>

000442d0 <printk>:
{
   442d0:	b40f      	push	{r0, r1, r2, r3}
   442d2:	b507      	push	{r0, r1, r2, lr}
   442d4:	a904      	add	r1, sp, #16
   442d6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   442da:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   442dc:	f7e0 f806 	bl	242ec <vprintk>
}
   442e0:	b003      	add	sp, #12
   442e2:	f85d eb04 	ldr.w	lr, [sp], #4
   442e6:	b004      	add	sp, #16
   442e8:	4770      	bx	lr

000442ea <snprintk>:
{
   442ea:	b40c      	push	{r2, r3}
   442ec:	b507      	push	{r0, r1, r2, lr}
   442ee:	ab04      	add	r3, sp, #16
   442f0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   442f4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   442f6:	f7e0 f807 	bl	24308 <vsnprintk>
}
   442fa:	b003      	add	sp, #12
   442fc:	f85d eb04 	ldr.w	lr, [sp], #4
   44300:	b002      	add	sp, #8
   44302:	4770      	bx	lr

00044304 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   44304:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   44306:	f013 0307 	ands.w	r3, r3, #7
   4430a:	d105      	bne.n	44318 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   4430c:	6803      	ldr	r3, [r0, #0]
   4430e:	2b00      	cmp	r3, #0
		evt = EVT_START;
   44310:	bf0c      	ite	eq
   44312:	2000      	moveq	r0, #0
   44314:	2003      	movne	r0, #3
   44316:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   44318:	2b02      	cmp	r3, #2
   4431a:	d105      	bne.n	44328 <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   4431c:	8bc3      	ldrh	r3, [r0, #30]
   4431e:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   44320:	bf14      	ite	ne
   44322:	2000      	movne	r0, #0
   44324:	2004      	moveq	r0, #4
   44326:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   44328:	2b01      	cmp	r3, #1
   4432a:	d105      	bne.n	44338 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   4432c:	6803      	ldr	r3, [r0, #0]
   4432e:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   44330:	bf0c      	ite	eq
   44332:	2000      	moveq	r0, #0
   44334:	2005      	movne	r0, #5
   44336:	4770      	bx	lr
	int evt = EVT_NOP;
   44338:	2000      	movs	r0, #0
}
   4433a:	4770      	bx	lr

0004433c <notify_one>:
{
   4433c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44340:	460d      	mov	r5, r1
   44342:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   44344:	4619      	mov	r1, r3
   44346:	1d28      	adds	r0, r5, #4
{
   44348:	4690      	mov	r8, r2
   4434a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   4434c:	f7df ff46 	bl	241dc <sys_notify_finalize>
	if (cb) {
   44350:	4604      	mov	r4, r0
   44352:	b138      	cbz	r0, 44364 <notify_one+0x28>
		cb(mgr, cli, state, res);
   44354:	4633      	mov	r3, r6
   44356:	4642      	mov	r2, r8
   44358:	4629      	mov	r1, r5
   4435a:	4638      	mov	r0, r7
   4435c:	46a4      	mov	ip, r4
}
   4435e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   44362:	4760      	bx	ip
}
   44364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00044368 <validate_args>:
{
   44368:	b510      	push	{r4, lr}
   4436a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   4436c:	b140      	cbz	r0, 44380 <validate_args+0x18>
   4436e:	b139      	cbz	r1, 44380 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   44370:	1d08      	adds	r0, r1, #4
   44372:	f7ff fe70 	bl	44056 <sys_notify_validate>
	if ((rv == 0)
   44376:	b928      	cbnz	r0, 44384 <validate_args+0x1c>
	    && ((cli->notify.flags
   44378:	68a3      	ldr	r3, [r4, #8]
   4437a:	f033 0303 	bics.w	r3, r3, #3
   4437e:	d001      	beq.n	44384 <validate_args+0x1c>
		rv = -EINVAL;
   44380:	f06f 0015 	mvn.w	r0, #21
}
   44384:	bd10      	pop	{r4, pc}

00044386 <onoff_manager_init>:
{
   44386:	b538      	push	{r3, r4, r5, lr}
   44388:	460c      	mov	r4, r1
	if ((mgr == NULL)
   4438a:	4605      	mov	r5, r0
   4438c:	b158      	cbz	r0, 443a6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   4438e:	b151      	cbz	r1, 443a6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   44390:	680b      	ldr	r3, [r1, #0]
   44392:	b143      	cbz	r3, 443a6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   44394:	684b      	ldr	r3, [r1, #4]
   44396:	b133      	cbz	r3, 443a6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   44398:	2220      	movs	r2, #32
   4439a:	2100      	movs	r1, #0
   4439c:	f003 ff14 	bl	481c8 <memset>
	return 0;
   443a0:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   443a2:	612c      	str	r4, [r5, #16]
}
   443a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   443a6:	f06f 0015 	mvn.w	r0, #21
   443aa:	e7fb      	b.n	443a4 <onoff_manager_init+0x1e>

000443ac <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   443ac:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   443ae:	f7fc fa85 	bl	408bc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   443b2:	2000      	movs	r0, #0
   443b4:	bd08      	pop	{r3, pc}

000443b6 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   443b6:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   443b8:	f7fc fac4 	bl	40944 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   443bc:	f110 0f0b 	cmn.w	r0, #11
   443c0:	d005      	beq.n	443ce <sys_sem_take+0x18>
   443c2:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   443c6:	bf08      	it	eq
   443c8:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   443cc:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   443ce:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   443d2:	e7fb      	b.n	443cc <sys_sem_take+0x16>

000443d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   443d4:	4604      	mov	r4, r0
   443d6:	b508      	push	{r3, lr}
   443d8:	4608      	mov	r0, r1
   443da:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   443dc:	461a      	mov	r2, r3
   443de:	47a0      	blx	r4
	return z_impl_k_current_get();
   443e0:	f7fc fa66 	bl	408b0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   443e4:	f7e3 fe4e 	bl	28084 <z_impl_k_thread_abort>

000443e8 <chunk_field>:
	if (big_heap(h)) {
   443e8:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   443ea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   443ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   443f2:	bf2c      	ite	cs
   443f4:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   443f8:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   443fc:	4770      	bx	lr

000443fe <chunk_set>:
	void *cmem = &buf[c];
   443fe:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   44402:	6880      	ldr	r0, [r0, #8]
   44404:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   44408:	bf2c      	ite	cs
   4440a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   4440e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   44412:	4770      	bx	lr

00044414 <chunk_size>:
{
   44414:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   44416:	2201      	movs	r2, #1
   44418:	f7ff ffe6 	bl	443e8 <chunk_field>
}
   4441c:	0840      	lsrs	r0, r0, #1
   4441e:	bd08      	pop	{r3, pc}

00044420 <set_chunk_used>:
	if (big_heap(h)) {
   44420:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   44422:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   44426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4442a:	d308      	bcc.n	4443e <set_chunk_used+0x1e>
		if (used) {
   4442c:	684b      	ldr	r3, [r1, #4]
   4442e:	b11a      	cbz	r2, 44438 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   44430:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   44434:	604b      	str	r3, [r1, #4]
   44436:	4770      	bx	lr
   44438:	f023 0301 	bic.w	r3, r3, #1
   4443c:	e7fa      	b.n	44434 <set_chunk_used+0x14>
		if (used) {
   4443e:	884b      	ldrh	r3, [r1, #2]
   44440:	b11a      	cbz	r2, 4444a <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   44442:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   44446:	804b      	strh	r3, [r1, #2]
}
   44448:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   4444a:	f023 0301 	bic.w	r3, r3, #1
   4444e:	e7fa      	b.n	44446 <set_chunk_used+0x26>

00044450 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   44450:	0053      	lsls	r3, r2, #1
   44452:	2201      	movs	r2, #1
   44454:	f7ff bfd3 	b.w	443fe <chunk_set>

00044458 <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   44458:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   4445a:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   4445c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   44460:	bf2c      	ite	cs
   44462:	2008      	movcs	r0, #8
   44464:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   44466:	4408      	add	r0, r1
}
   44468:	08c0      	lsrs	r0, r0, #3
   4446a:	4770      	bx	lr

0004446c <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   4446c:	460a      	mov	r2, r1
   4446e:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   44470:	2101      	movs	r1, #1
   44472:	f7ff fff1 	bl	44458 <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   44476:	3201      	adds	r2, #1
   44478:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   4447a:	fab0 f080 	clz	r0, r0
}
   4447e:	f1c0 001f 	rsb	r0, r0, #31
   44482:	bd08      	pop	{r3, pc}

00044484 <merge_chunks>:
{
   44484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44488:	4616      	mov	r6, r2
   4448a:	4604      	mov	r4, r0
   4448c:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   4448e:	f7ff ffc1 	bl	44414 <chunk_size>
   44492:	4631      	mov	r1, r6
   44494:	4605      	mov	r5, r0
   44496:	4620      	mov	r0, r4
   44498:	f7ff ffbc 	bl	44414 <chunk_size>
   4449c:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   4449e:	462a      	mov	r2, r5
   444a0:	4639      	mov	r1, r7
   444a2:	4620      	mov	r0, r4
   444a4:	f7ff ffd4 	bl	44450 <set_chunk_size>
	return c + chunk_size(h, c);
   444a8:	4631      	mov	r1, r6
   444aa:	4620      	mov	r0, r4
   444ac:	f7ff ffb2 	bl	44414 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   444b0:	462b      	mov	r3, r5
   444b2:	1831      	adds	r1, r6, r0
   444b4:	2200      	movs	r2, #0
   444b6:	4620      	mov	r0, r4
}
   444b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   444bc:	f7ff bf9f 	b.w	443fe <chunk_set>

000444c0 <split_chunks>:
{
   444c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   444c4:	4614      	mov	r4, r2
   444c6:	460f      	mov	r7, r1
   444c8:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   444ca:	f7ff ffa3 	bl	44414 <chunk_size>
	size_t lsz = rc - lc;
   444ce:	eba4 0807 	sub.w	r8, r4, r7
	size_t rsz = sz0 - lsz;
   444d2:	1b3e      	subs	r6, r7, r4
   444d4:	4406      	add	r6, r0
	set_chunk_size(h, lc, lsz);
   444d6:	4642      	mov	r2, r8
   444d8:	4639      	mov	r1, r7
   444da:	4628      	mov	r0, r5
   444dc:	f7ff ffb8 	bl	44450 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   444e0:	4632      	mov	r2, r6
   444e2:	4621      	mov	r1, r4
   444e4:	4628      	mov	r0, r5
   444e6:	f7ff ffb3 	bl	44450 <set_chunk_size>
   444ea:	4643      	mov	r3, r8
   444ec:	2200      	movs	r2, #0
   444ee:	4621      	mov	r1, r4
   444f0:	4628      	mov	r0, r5
   444f2:	f7ff ff84 	bl	443fe <chunk_set>
	return c + chunk_size(h, c);
   444f6:	4621      	mov	r1, r4
   444f8:	4628      	mov	r0, r5
   444fa:	f7ff ff8b 	bl	44414 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   444fe:	4633      	mov	r3, r6
   44500:	1821      	adds	r1, r4, r0
   44502:	2200      	movs	r2, #0
   44504:	4628      	mov	r0, r5
}
   44506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   4450a:	f7ff bf78 	b.w	443fe <chunk_set>

0004450e <free_list_remove_bidx>:
{
   4450e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44512:	4690      	mov	r8, r2
	return chunk_field(h, c, FREE_NEXT);
   44514:	2203      	movs	r2, #3
   44516:	460e      	mov	r6, r1
   44518:	4604      	mov	r4, r0
   4451a:	f7ff ff65 	bl	443e8 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   4451e:	4286      	cmp	r6, r0
   44520:	4605      	mov	r5, r0
   44522:	f108 0704 	add.w	r7, r8, #4
   44526:	d10b      	bne.n	44540 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   44528:	2301      	movs	r3, #1
   4452a:	fa03 f208 	lsl.w	r2, r3, r8
   4452e:	68e3      	ldr	r3, [r4, #12]
   44530:	ea23 0302 	bic.w	r3, r3, r2
   44534:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   44536:	2300      	movs	r3, #0
   44538:	f844 3027 	str.w	r3, [r4, r7, lsl #2]
}
   4453c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   44540:	4631      	mov	r1, r6
   44542:	2202      	movs	r2, #2
   44544:	4620      	mov	r0, r4
   44546:	f7ff ff4f 	bl	443e8 <chunk_field>
   4454a:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   4454c:	462b      	mov	r3, r5
   4454e:	4601      	mov	r1, r0
		b->next = second;
   44550:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
   44554:	4620      	mov	r0, r4
   44556:	2203      	movs	r2, #3
   44558:	f7ff ff51 	bl	443fe <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   4455c:	4633      	mov	r3, r6
   4455e:	4629      	mov	r1, r5
   44560:	4620      	mov	r0, r4
}
   44562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   44566:	2202      	movs	r2, #2
   44568:	f7ff bf49 	b.w	443fe <chunk_set>

0004456c <free_list_remove>:
{
   4456c:	b538      	push	{r3, r4, r5, lr}
   4456e:	4604      	mov	r4, r0
   44570:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   44572:	f7ff ff4f 	bl	44414 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   44576:	68a3      	ldr	r3, [r4, #8]
   44578:	4601      	mov	r1, r0
   4457a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   4457e:	d301      	bcc.n	44584 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   44580:	2801      	cmp	r0, #1
   44582:	d009      	beq.n	44598 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   44584:	4620      	mov	r0, r4
   44586:	f7ff ff71 	bl	4446c <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   4458a:	4629      	mov	r1, r5
   4458c:	4602      	mov	r2, r0
   4458e:	4620      	mov	r0, r4
}
   44590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   44594:	f7ff bfbb 	b.w	4450e <free_list_remove_bidx>
}
   44598:	bd38      	pop	{r3, r4, r5, pc}

0004459a <alloc_chunk>:
{
   4459a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4459e:	4604      	mov	r4, r0
   445a0:	468a      	mov	sl, r1
	int bi = bucket_idx(h, sz);
   445a2:	f7ff ff63 	bl	4446c <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   445a6:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   445a8:	4606      	mov	r6, r0
	if (bi > bucket_idx(h, h->len)) {
   445aa:	4620      	mov	r0, r4
   445ac:	f7ff ff5e 	bl	4446c <bucket_idx>
   445b0:	42b0      	cmp	r0, r6
   445b2:	da03      	bge.n	445bc <alloc_chunk+0x22>
		return 0;
   445b4:	2500      	movs	r5, #0
}
   445b6:	4628      	mov	r0, r5
   445b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   445bc:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   445c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
   445c4:	f1b9 0f00 	cmp.w	r9, #0
   445c8:	d019      	beq.n	445fe <alloc_chunk+0x64>
   445ca:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   445ce:	693d      	ldr	r5, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   445d0:	4620      	mov	r0, r4
   445d2:	4629      	mov	r1, r5
   445d4:	f7ff ff1e 	bl	44414 <chunk_size>
   445d8:	4550      	cmp	r0, sl
   445da:	d305      	bcc.n	445e8 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   445dc:	4632      	mov	r2, r6
		free_list_remove_bidx(h, c, minbucket);
   445de:	4629      	mov	r1, r5
   445e0:	4620      	mov	r0, r4
   445e2:	f7ff ff94 	bl	4450e <free_list_remove_bidx>
		return c;
   445e6:	e7e6      	b.n	445b6 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   445e8:	2203      	movs	r2, #3
   445ea:	4629      	mov	r1, r5
   445ec:	4620      	mov	r0, r4
   445ee:	f7ff fefb 	bl	443e8 <chunk_field>
		} while (--i && b->next != first);
   445f2:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   445f6:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   445f8:	d001      	beq.n	445fe <alloc_chunk+0x64>
   445fa:	4581      	cmp	r9, r0
   445fc:	d1e7      	bne.n	445ce <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   445fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44602:	3601      	adds	r6, #1
   44604:	68e3      	ldr	r3, [r4, #12]
   44606:	40b2      	lsls	r2, r6
	if ((bmask & h->avail_buckets) != 0) {
   44608:	401a      	ands	r2, r3
   4460a:	d0d3      	beq.n	445b4 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   4460c:	fa92 f2a2 	rbit	r2, r2
   44610:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   44614:	1d13      	adds	r3, r2, #4
   44616:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   4461a:	e7e0      	b.n	445de <alloc_chunk+0x44>

0004461c <free_list_add>:
{
   4461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   44620:	4604      	mov	r4, r0
   44622:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   44624:	f7ff fef6 	bl	44414 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   44628:	68a3      	ldr	r3, [r4, #8]
   4462a:	4601      	mov	r1, r0
   4462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   44630:	d301      	bcc.n	44636 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   44632:	2801      	cmp	r0, #1
   44634:	d035      	beq.n	446a2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   44636:	4620      	mov	r0, r4
   44638:	f7ff ff18 	bl	4446c <bucket_idx>
	if (b->next == 0) {
   4463c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   44640:	6916      	ldr	r6, [r2, #16]
   44642:	b99e      	cbnz	r6, 4466c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   44644:	2301      	movs	r3, #1
   44646:	fa03 f000 	lsl.w	r0, r3, r0
   4464a:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   4464c:	4629      	mov	r1, r5
   4464e:	4303      	orrs	r3, r0
   44650:	60e3      	str	r3, [r4, #12]
   44652:	4620      	mov	r0, r4
		b->next = c;
   44654:	6115      	str	r5, [r2, #16]
   44656:	462b      	mov	r3, r5
   44658:	2202      	movs	r2, #2
   4465a:	f7ff fed0 	bl	443fe <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   4465e:	2203      	movs	r2, #3
   44660:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   44662:	4620      	mov	r0, r4
}
   44664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   44668:	f7ff bec9 	b.w	443fe <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   4466c:	2202      	movs	r2, #2
   4466e:	4631      	mov	r1, r6
   44670:	4620      	mov	r0, r4
   44672:	f7ff feb9 	bl	443e8 <chunk_field>
   44676:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   44678:	4603      	mov	r3, r0
   4467a:	2202      	movs	r2, #2
   4467c:	4629      	mov	r1, r5
   4467e:	4620      	mov	r0, r4
   44680:	f7ff febd 	bl	443fe <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   44684:	4633      	mov	r3, r6
   44686:	2203      	movs	r2, #3
   44688:	4629      	mov	r1, r5
   4468a:	4620      	mov	r0, r4
   4468c:	f7ff feb7 	bl	443fe <chunk_set>
   44690:	2203      	movs	r2, #3
   44692:	4639      	mov	r1, r7
   44694:	462b      	mov	r3, r5
   44696:	4620      	mov	r0, r4
   44698:	f7ff feb1 	bl	443fe <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   4469c:	2202      	movs	r2, #2
   4469e:	4631      	mov	r1, r6
   446a0:	e7df      	b.n	44662 <free_list_add+0x46>
   446a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000446a6 <sys_heap_alloc>:
{
   446a6:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   446a8:	b909      	cbnz	r1, 446ae <sys_heap_alloc+0x8>
		return NULL;
   446aa:	2000      	movs	r0, #0
}
   446ac:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   446ae:	6804      	ldr	r4, [r0, #0]
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   446b0:	4620      	mov	r0, r4
   446b2:	f7ff fed1 	bl	44458 <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   446b6:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   446b8:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   446ba:	4620      	mov	r0, r4
   446bc:	f7ff ff6d 	bl	4459a <alloc_chunk>
	if (c == 0) {
   446c0:	4605      	mov	r5, r0
   446c2:	2800      	cmp	r0, #0
   446c4:	d0f1      	beq.n	446aa <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   446c6:	4601      	mov	r1, r0
   446c8:	4620      	mov	r0, r4
   446ca:	f7ff fea3 	bl	44414 <chunk_size>
   446ce:	42b0      	cmp	r0, r6
   446d0:	d909      	bls.n	446e6 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   446d2:	442e      	add	r6, r5
   446d4:	4629      	mov	r1, r5
   446d6:	4620      	mov	r0, r4
   446d8:	4632      	mov	r2, r6
   446da:	f7ff fef1 	bl	444c0 <split_chunks>
		free_list_add(h, c + chunk_sz);
   446de:	4631      	mov	r1, r6
   446e0:	4620      	mov	r0, r4
   446e2:	f7ff ff9b 	bl	4461c <free_list_add>
	set_chunk_used(h, c, true);
   446e6:	4620      	mov	r0, r4
   446e8:	2201      	movs	r2, #1
   446ea:	4629      	mov	r1, r5
   446ec:	f7ff fe98 	bl	44420 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   446f0:	68a3      	ldr	r3, [r4, #8]
   446f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   446f6:	bf2c      	ite	cs
   446f8:	2008      	movcs	r0, #8
   446fa:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   446fc:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   44700:	4420      	add	r0, r4
	return chunk_mem(h, c);
   44702:	e7d3      	b.n	446ac <sys_heap_alloc+0x6>

00044704 <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   44704:	4040      	eors	r0, r0
   44706:	f380 8811 	msr	BASEPRI, r0
   4470a:	f04f 0004 	mov.w	r0, #4
   4470e:	df02      	svc	2
}
   44710:	4770      	bx	lr

00044712 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   44712:	4770      	bx	lr

00044714 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   44714:	f7f9 bcd8 	b.w	3e0c8 <SystemInit>

00044718 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   44718:	6843      	ldr	r3, [r0, #4]
}
   4471a:	7958      	ldrb	r0, [r3, #5]
   4471c:	4770      	bx	lr

0004471e <k_cycle_get_32_wrapper>:
   4471e:	f7e2 bdb5 	b.w	2728c <z_timer_cycle_get_32>

00044722 <dummy_timestamp>:
   44722:	2000      	movs	r0, #0
   44724:	4770      	bx	lr

00044726 <log_string_sync>:
{
   44726:	b40e      	push	{r1, r2, r3}
   44728:	b503      	push	{r0, r1, lr}
   4472a:	aa03      	add	r2, sp, #12
   4472c:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   44730:	2300      	movs	r3, #0
	va_start(ap, fmt);
   44732:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   44734:	f7e0 fad2 	bl	24cdc <log_generic>
}
   44738:	b002      	add	sp, #8
   4473a:	f85d eb04 	ldr.w	lr, [sp], #4
   4473e:	b003      	add	sp, #12
   44740:	4770      	bx	lr

00044742 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   44742:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   44744:	f7e0 fb40 	bl	24dc8 <log_init>
	}

	return 0;
}
   44748:	2000      	movs	r0, #0
   4474a:	bd08      	pop	{r3, pc}

0004474c <log_strdup>:
}
   4474c:	4770      	bx	lr

0004474e <out_func>:
{
   4474e:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   44750:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   44754:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   44756:	6852      	ldr	r2, [r2, #4]
   44758:	2101      	movs	r1, #1
   4475a:	a801      	add	r0, sp, #4
   4475c:	4798      	blx	r3
}
   4475e:	2000      	movs	r0, #0
   44760:	b003      	add	sp, #12
   44762:	f85d fb04 	ldr.w	pc, [sp], #4

00044766 <buffer_write>:
{
   44766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44768:	4606      	mov	r6, r0
   4476a:	460d      	mov	r5, r1
   4476c:	4614      	mov	r4, r2
   4476e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   44770:	4621      	mov	r1, r4
   44772:	4628      	mov	r0, r5
   44774:	463a      	mov	r2, r7
   44776:	47b0      	blx	r6
	} while (len != 0);
   44778:	1a24      	subs	r4, r4, r0
		buf += processed;
   4477a:	4405      	add	r5, r0
	} while (len != 0);
   4477c:	d1f8      	bne.n	44770 <buffer_write+0xa>
}
   4477e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044780 <log_output_flush>:
		     log_output->control_block->offset,
   44780:	6842      	ldr	r2, [r0, #4]
{
   44782:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   44784:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   44788:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   4478a:	6881      	ldr	r1, [r0, #8]
   4478c:	6800      	ldr	r0, [r0, #0]
   4478e:	f7ff ffea 	bl	44766 <buffer_write>
	log_output->control_block->offset = 0;
   44792:	2200      	movs	r2, #0
   44794:	6863      	ldr	r3, [r4, #4]
   44796:	601a      	str	r2, [r3, #0]
}
   44798:	bd10      	pop	{r4, pc}

0004479a <fcb_append_to_scratch>:
{
   4479a:	b538      	push	{r3, r4, r5, lr}
   4479c:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   4479e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   447a0:	f000 fa0f 	bl	44bc2 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   447a4:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   447a6:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   447a8:	4298      	cmp	r0, r3
   447aa:	d00f      	beq.n	447cc <fcb_append_to_scratch+0x32>
	if (!sector) {
   447ac:	b170      	cbz	r0, 447cc <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   447ae:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   447b0:	4601      	mov	r1, r0
   447b2:	3201      	adds	r2, #1
   447b4:	b292      	uxth	r2, r2
   447b6:	4620      	mov	r0, r4
   447b8:	f000 f8b0 	bl	4491c <fcb_sector_hdr_init>
	if (rc) {
   447bc:	b928      	cbnz	r0, 447ca <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   447be:	2308      	movs	r3, #8
   447c0:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   447c2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   447c4:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   447c6:	3301      	adds	r3, #1
   447c8:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   447ca:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   447cc:	f06f 001b 	mvn.w	r0, #27
   447d0:	e7fb      	b.n	447ca <fcb_append_to_scratch+0x30>

000447d2 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   447d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   447d4:	b083      	sub	sp, #12
   447d6:	4604      	mov	r4, r0
   447d8:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   447da:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   447de:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   447e0:	1dd3      	adds	r3, r2, #7
   447e2:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   447e6:	ebad 0d03 	sub.w	sp, sp, r3
   447ea:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   447ec:	21ff      	movs	r1, #255	; 0xff
   447ee:	4630      	mov	r0, r6
   447f0:	f003 fcea 	bl	481c8 <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   447f4:	4632      	mov	r2, r6
   447f6:	4629      	mov	r1, r5
   447f8:	4620      	mov	r0, r4
   447fa:	f000 f939 	bl	44a70 <fcb_elem_crc8>
	if (rc) {
   447fe:	b9b0      	cbnz	r0, 4482e <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   44800:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   44804:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   44806:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   44808:	bf82      	ittt	hi
   4480a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   4480e:	18d2      	addhi	r2, r2, r3
   44810:	4258      	neghi	r0, r3
   44812:	68a9      	ldr	r1, [r5, #8]
   44814:	bf88      	it	hi
   44816:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   44818:	9300      	str	r3, [sp, #0]
   4481a:	440a      	add	r2, r1
   4481c:	4633      	mov	r3, r6
   4481e:	6829      	ldr	r1, [r5, #0]
   44820:	4620      	mov	r0, r4
   44822:	f000 f821 	bl	44868 <fcb_flash_write>
	if (rc) {
   44826:	2800      	cmp	r0, #0
		return -EIO;
   44828:	bf18      	it	ne
   4482a:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   4482e:	3704      	adds	r7, #4
   44830:	46bd      	mov	sp, r7
   44832:	bdf0      	pop	{r4, r5, r6, r7, pc}

00044834 <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   44834:	6b80      	ldr	r0, [r0, #56]	; 0x38
   44836:	b108      	cbz	r0, 4483c <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   44838:	f000 bc71 	b.w	4511e <flash_area_align>

	return align;
}
   4483c:	4770      	bx	lr

0004483e <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   4483e:	b570      	push	{r4, r5, r6, lr}
   44840:	4614      	mov	r4, r2
   44842:	461a      	mov	r2, r3
   44844:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   44846:	684d      	ldr	r5, [r1, #4]
   44848:	18e6      	adds	r6, r4, r3
   4484a:	42ae      	cmp	r6, r5
   4484c:	d809      	bhi.n	44862 <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   4484e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   44850:	b120      	cbz	r0, 4485c <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   44852:	6809      	ldr	r1, [r1, #0]
   44854:	4421      	add	r1, r4
   44856:	f000 fbf6 	bl	45046 <flash_area_read>

	if (rc != 0) {
   4485a:	b108      	cbz	r0, 44860 <fcb_flash_read+0x22>
		return -EIO;
   4485c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   44860:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   44862:	f06f 0015 	mvn.w	r0, #21
   44866:	e7fb      	b.n	44860 <fcb_flash_read+0x22>

00044868 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   44868:	b570      	push	{r4, r5, r6, lr}
   4486a:	4614      	mov	r4, r2
   4486c:	461a      	mov	r2, r3
   4486e:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   44870:	684d      	ldr	r5, [r1, #4]
   44872:	18e6      	adds	r6, r4, r3
   44874:	42ae      	cmp	r6, r5
   44876:	d809      	bhi.n	4488c <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   44878:	6b80      	ldr	r0, [r0, #56]	; 0x38
   4487a:	b120      	cbz	r0, 44886 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   4487c:	6809      	ldr	r1, [r1, #0]
   4487e:	4421      	add	r1, r4
   44880:	f000 fbfe 	bl	45080 <flash_area_write>

	if (rc != 0) {
   44884:	b108      	cbz	r0, 4488a <fcb_flash_write+0x22>
		return -EIO;
   44886:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   4488a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   4488c:	f06f 0015 	mvn.w	r0, #21
   44890:	e7fb      	b.n	4488a <fcb_flash_write+0x22>

00044892 <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   44892:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   44894:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   44896:	b120      	cbz	r0, 448a2 <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   44898:	e9d1 1200 	ldrd	r1, r2, [r1]
   4489c:	f000 fc19 	bl	450d2 <flash_area_erase>

	if (rc != 0) {
   448a0:	b108      	cbz	r0, 448a6 <fcb_erase_sector+0x14>
		return -EIO;
   448a2:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   448a6:	bd08      	pop	{r3, pc}

000448a8 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   448a8:	b538      	push	{r3, r4, r5, lr}
   448aa:	4605      	mov	r5, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   448ac:	2400      	movs	r4, #0
	fa = fcb->f_active.fe_sector;
   448ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   448b0:	796b      	ldrb	r3, [r5, #5]
   448b2:	42a3      	cmp	r3, r4
   448b4:	dc01      	bgt.n	448ba <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   448b6:	4620      	mov	r0, r4
   448b8:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   448ba:	4628      	mov	r0, r5
   448bc:	f000 f981 	bl	44bc2 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   448c0:	6a2b      	ldr	r3, [r5, #32]
		fa = fcb_getnext_sector(fcb, fa);
   448c2:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   448c4:	4283      	cmp	r3, r0
   448c6:	d0f6      	beq.n	448b6 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   448c8:	3401      	adds	r4, #1
   448ca:	e7f1      	b.n	448b0 <fcb_free_sector_cnt+0x8>

000448cc <fcb_put_len>:
 * 1 byte for lengths < 128 bytes, and 2 bytes for < 16384.
 */
int
fcb_put_len(uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   448cc:	297f      	cmp	r1, #127	; 0x7f
   448ce:	d802      	bhi.n	448d6 <fcb_put_len+0xa>
		buf[0] = len;
   448d0:	7001      	strb	r1, [r0, #0]
		return 1;
   448d2:	2001      	movs	r0, #1
   448d4:	4770      	bx	lr
	} else if (len < FCB_MAX_LEN) {
   448d6:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   448da:	4299      	cmp	r1, r3
		buf[0] = (len & 0x7f) | 0x80;
   448dc:	bf9f      	itttt	ls
   448de:	f061 037f 	ornls	r3, r1, #127	; 0x7f
		buf[1] = len >> 7;
   448e2:	09c9      	lsrls	r1, r1, #7
		buf[0] = (len & 0x7f) | 0x80;
   448e4:	7003      	strbls	r3, [r0, #0]
		buf[1] = len >> 7;
   448e6:	7041      	strbls	r1, [r0, #1]
		return 2;
   448e8:	bf94      	ite	ls
   448ea:	2002      	movls	r0, #2
	} else {
		return -EINVAL;
   448ec:	f06f 0015 	mvnhi.w	r0, #21
	}
}
   448f0:	4770      	bx	lr

000448f2 <fcb_get_len>:
int
fcb_get_len(uint8_t *buf, uint16_t *len)
{
	int rc;

	if (buf[0] & 0x80) {
   448f2:	7803      	ldrb	r3, [r0, #0]
   448f4:	061a      	lsls	r2, r3, #24
   448f6:	d50b      	bpl.n	44910 <fcb_get_len+0x1e>
		if (buf[0] == 0xff && buf[1] == 0xff) {
   448f8:	7842      	ldrb	r2, [r0, #1]
   448fa:	ea03 0002 	and.w	r0, r3, r2
   448fe:	28ff      	cmp	r0, #255	; 0xff
   44900:	d009      	beq.n	44916 <fcb_get_len+0x24>
			return -ENOTSUP;
		}
		*len = (buf[0] & 0x7f) | (buf[1] << 7);
   44902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   44906:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
   4490a:	800b      	strh	r3, [r1, #0]
		rc = 2;
   4490c:	2002      	movs	r0, #2
   4490e:	4770      	bx	lr
	} else {
		*len = buf[0];
   44910:	800b      	strh	r3, [r1, #0]
		rc = 1;
   44912:	2001      	movs	r0, #1
   44914:	4770      	bx	lr
			return -ENOTSUP;
   44916:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}
	return rc;
}
   4491a:	4770      	bx	lr

0004491c <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   4491c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb->f_magic;
	fda.fd_ver = fcb->f_version;
   4491e:	7903      	ldrb	r3, [r0, #4]
	fda.fd_magic = fcb->f_magic;
   44920:	6804      	ldr	r4, [r0, #0]
	fda.fd_ver = fcb->f_version;
   44922:	f88d 300c 	strb.w	r3, [sp, #12]
	fda._pad = 0xff;
   44926:	23ff      	movs	r3, #255	; 0xff
   44928:	f88d 300d 	strb.w	r3, [sp, #13]
	fda.fd_id = id;

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   4492c:	2308      	movs	r3, #8
	fda.fd_id = id;
   4492e:	f8ad 200e 	strh.w	r2, [sp, #14]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   44932:	9300      	str	r3, [sp, #0]
   44934:	2200      	movs	r2, #0
   44936:	446b      	add	r3, sp
	fda.fd_magic = fcb->f_magic;
   44938:	9402      	str	r4, [sp, #8]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   4493a:	f7ff ff95 	bl	44868 <fcb_flash_write>
	if (rc != 0) {
   4493e:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   44940:	bf18      	it	ne
   44942:	f06f 0004 	mvnne.w	r0, #4
   44946:	b004      	add	sp, #16
   44948:	bd10      	pop	{r4, pc}

0004494a <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   4494a:	b530      	push	{r4, r5, lr}
   4494c:	4605      	mov	r5, r0
   4494e:	b085      	sub	sp, #20
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   44950:	4614      	mov	r4, r2
   44952:	b902      	cbnz	r2, 44956 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   44954:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   44956:	2308      	movs	r3, #8
   44958:	2200      	movs	r2, #0
   4495a:	9300      	str	r3, [sp, #0]
   4495c:	4628      	mov	r0, r5
   4495e:	4623      	mov	r3, r4
   44960:	f7ff ff6d 	bl	4483e <fcb_flash_read>
	if (rc) {
   44964:	b950      	cbnz	r0, 4497c <fcb_sector_hdr_read+0x32>
		return -EIO;
	}
	if (fdap->fd_magic == 0xffffffff) {
   44966:	6823      	ldr	r3, [r4, #0]
   44968:	1c5a      	adds	r2, r3, #1
   4496a:	d005      	beq.n	44978 <fcb_sector_hdr_read+0x2e>
		return 0;
	}
	if (fdap->fd_magic != fcb->f_magic) {
   4496c:	682a      	ldr	r2, [r5, #0]
		return -ENOMSG;
   4496e:	4293      	cmp	r3, r2
   44970:	bf0c      	ite	eq
   44972:	2001      	moveq	r0, #1
   44974:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   44978:	b005      	add	sp, #20
   4497a:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   4497c:	f06f 0004 	mvn.w	r0, #4
   44980:	e7fa      	b.n	44978 <fcb_sector_hdr_read+0x2e>

00044982 <fcb_init>:
{
   44982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   44986:	688b      	ldr	r3, [r1, #8]
{
   44988:	b085      	sub	sp, #20
   4498a:	460c      	mov	r4, r1
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   4498c:	b92b      	cbnz	r3, 4499a <fcb_init+0x18>
		return -EINVAL;
   4498e:	f06f 0515 	mvn.w	r5, #21
}
   44992:	4628      	mov	r0, r5
   44994:	b005      	add	sp, #20
   44996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   4499a:	794b      	ldrb	r3, [r1, #5]
   4499c:	798a      	ldrb	r2, [r1, #6]
   4499e:	1a9b      	subs	r3, r3, r2
   449a0:	2b00      	cmp	r3, #0
   449a2:	ddf4      	ble.n	4498e <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   449a4:	3138      	adds	r1, #56	; 0x38
   449a6:	b2c0      	uxtb	r0, r0
   449a8:	f7e0 ff40 	bl	2582c <flash_area_open>
	if (rc != 0) {
   449ac:	4606      	mov	r6, r0
   449ae:	2800      	cmp	r0, #0
   449b0:	d1ed      	bne.n	4498e <fcb_init+0xc>
	align = fcb_get_align(fcb);
   449b2:	4620      	mov	r0, r4
   449b4:	f7ff ff3e 	bl	44834 <fcb_get_align>
	if (align == 0U) {
   449b8:	4683      	mov	fp, r0
   449ba:	2800      	cmp	r0, #0
   449bc:	d0e7      	beq.n	4498e <fcb_init+0xc>
	int oldest = -1, newest = -1;
   449be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   449c2:	46b2      	mov	sl, r6
   449c4:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   449c6:	4698      	mov	r8, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   449c8:	7962      	ldrb	r2, [r4, #5]
   449ca:	42b2      	cmp	r2, r6
   449cc:	dc24      	bgt.n	44a18 <fcb_init+0x96>
	if (oldest < 0) {
   449ce:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   449d2:	d149      	bne.n	44a68 <fcb_init+0xe6>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   449d4:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   449d6:	2200      	movs	r2, #0
   449d8:	4639      	mov	r1, r7
   449da:	4620      	mov	r0, r4
   449dc:	f7ff ff9e 	bl	4491c <fcb_sector_hdr_init>
		if (rc) {
   449e0:	4605      	mov	r5, r0
   449e2:	2800      	cmp	r0, #0
   449e4:	d1d5      	bne.n	44992 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   449e6:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   449e8:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   449ea:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   449ee:	f884 b036 	strb.w	fp, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   449f2:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   449f4:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   449f6:	f104 0624 	add.w	r6, r4, #36	; 0x24
   449fa:	4631      	mov	r1, r6
   449fc:	4620      	mov	r0, r4
   449fe:	f000 f8bd 	bl	44b7c <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   44a02:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   44a06:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   44a08:	d030      	beq.n	44a6c <fcb_init+0xea>
		if (rc != 0) {
   44a0a:	2800      	cmp	r0, #0
   44a0c:	d0f5      	beq.n	449fa <fcb_init+0x78>
	return z_impl_k_mutex_init(mutex);
   44a0e:	f104 000c 	add.w	r0, r4, #12
   44a12:	f003 f9f1 	bl	47df8 <z_impl_k_mutex_init>
   44a16:	e7bc      	b.n	44992 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   44a18:	68a2      	ldr	r2, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   44a1a:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   44a1c:	eb02 09c6 	add.w	r9, r2, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   44a20:	4649      	mov	r1, r9
   44a22:	aa02      	add	r2, sp, #8
   44a24:	9301      	str	r3, [sp, #4]
   44a26:	f7ff ff90 	bl	4494a <fcb_sector_hdr_read>
		if (rc < 0) {
   44a2a:	1e05      	subs	r5, r0, #0
   44a2c:	dbb1      	blt.n	44992 <fcb_init+0x10>
		if (rc == 0) {
   44a2e:	9b01      	ldr	r3, [sp, #4]
   44a30:	d008      	beq.n	44a44 <fcb_init+0xc2>
		if (oldest < 0) {
   44a32:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   44a36:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   44a3a:	d105      	bne.n	44a48 <fcb_init+0xc6>
			oldest = newest = fda.fd_id;
   44a3c:	4690      	mov	r8, r2
			oldest_sector = newest_sector = sector;
   44a3e:	46ca      	mov	sl, r9
   44a40:	464f      	mov	r7, r9
			oldest = newest = fda.fd_id;
   44a42:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   44a44:	3601      	adds	r6, #1
   44a46:	e7bf      	b.n	449c8 <fcb_init+0x46>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   44a48:	b215      	sxth	r5, r2
   44a4a:	b218      	sxth	r0, r3
   44a4c:	1a28      	subs	r0, r5, r0
   44a4e:	2800      	cmp	r0, #0
   44a50:	dd02      	ble.n	44a58 <fcb_init+0xd6>
			newest = fda.fd_id;
   44a52:	4613      	mov	r3, r2
			newest_sector = sector;
   44a54:	46ca      	mov	sl, r9
   44a56:	e7f5      	b.n	44a44 <fcb_init+0xc2>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   44a58:	fa0f f188 	sxth.w	r1, r8
   44a5c:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   44a5e:	2900      	cmp	r1, #0
   44a60:	bfc4      	itt	gt
   44a62:	4690      	movgt	r8, r2
   44a64:	464f      	movgt	r7, r9
   44a66:	e7ed      	b.n	44a44 <fcb_init+0xc2>
   44a68:	461d      	mov	r5, r3
   44a6a:	e7bd      	b.n	449e8 <fcb_init+0x66>
			rc = 0;
   44a6c:	2500      	movs	r5, #0
   44a6e:	e7ce      	b.n	44a0e <fcb_init+0x8c>

00044a70 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   44a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   44a74:	460c      	mov	r4, r1
   44a76:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   44a78:	e9d1 1200 	ldrd	r1, r2, [r1]
   44a7c:	684b      	ldr	r3, [r1, #4]
   44a7e:	1c95      	adds	r5, r2, #2
   44a80:	429d      	cmp	r5, r3
{
   44a82:	b08c      	sub	sp, #48	; 0x30
   44a84:	4606      	mov	r6, r0
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   44a86:	d84b      	bhi.n	44b20 <fcb_elem_crc8+0xb0>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   44a88:	2302      	movs	r3, #2
   44a8a:	9300      	str	r3, [sp, #0]
   44a8c:	ab04      	add	r3, sp, #16
   44a8e:	f7ff fed6 	bl	4483e <fcb_flash_read>
	if (rc) {
   44a92:	b120      	cbz	r0, 44a9e <fcb_elem_crc8+0x2e>
		return -EIO;
   44a94:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   44a98:	b00c      	add	sp, #48	; 0x30
   44a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(tmp_str, &len);
   44a9e:	f10d 010e 	add.w	r1, sp, #14
   44aa2:	a804      	add	r0, sp, #16
   44aa4:	f7ff ff25 	bl	448f2 <fcb_get_len>
	if (cnt < 0) {
   44aa8:	2800      	cmp	r0, #0
   44aaa:	dbf5      	blt.n	44a98 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   44aac:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   44ab0:	b283      	uxth	r3, r0
   44ab2:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   44ab4:	bf84      	itt	hi
   44ab6:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   44aba:	195b      	addhi	r3, r3, r5
   44abc:	6861      	ldr	r1, [r4, #4]
   44abe:	bf84      	itt	hi
   44ac0:	4252      	neghi	r2, r2
   44ac2:	4013      	andhi	r3, r2
   44ac4:	440b      	add	r3, r1
   44ac6:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   44ac8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   44acc:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   44ace:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   44ad0:	a904      	add	r1, sp, #16
   44ad2:	20ff      	movs	r0, #255	; 0xff
   44ad4:	f7df fac8 	bl	24068 <crc8_ccitt>
   44ad8:	4682      	mov	sl, r0
	off = loc->fe_data_off;
   44ada:	68a5      	ldr	r5, [r4, #8]
	end = loc->fe_data_off + len;
   44adc:	f8bd 900e 	ldrh.w	r9, [sp, #14]
   44ae0:	44a9      	add	r9, r5
	for (; off < end; off += blk_sz) {
   44ae2:	454d      	cmp	r5, r9
   44ae4:	d303      	bcc.n	44aee <fcb_elem_crc8+0x7e>
	*c8p = crc8;
   44ae6:	f887 a000 	strb.w	sl, [r7]
	return 0;
   44aea:	2000      	movs	r0, #0
   44aec:	e7d4      	b.n	44a98 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   44aee:	eba9 0805 	sub.w	r8, r9, r5
   44af2:	f1b8 0f20 	cmp.w	r8, #32
   44af6:	bf28      	it	cs
   44af8:	f04f 0820 	movcs.w	r8, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   44afc:	ab04      	add	r3, sp, #16
   44afe:	f8cd 8000 	str.w	r8, [sp]
   44b02:	462a      	mov	r2, r5
   44b04:	6821      	ldr	r1, [r4, #0]
   44b06:	4630      	mov	r0, r6
   44b08:	f7ff fe99 	bl	4483e <fcb_flash_read>
		if (rc) {
   44b0c:	2800      	cmp	r0, #0
   44b0e:	d1c1      	bne.n	44a94 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   44b10:	4650      	mov	r0, sl
   44b12:	4642      	mov	r2, r8
   44b14:	a904      	add	r1, sp, #16
   44b16:	f7df faa7 	bl	24068 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   44b1a:	4445      	add	r5, r8
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   44b1c:	4682      	mov	sl, r0
   44b1e:	e7e0      	b.n	44ae2 <fcb_elem_crc8+0x72>
		return -ENOTSUP;
   44b20:	f06f 0085 	mvn.w	r0, #133	; 0x85
   44b24:	e7b8      	b.n	44a98 <fcb_elem_crc8+0x28>

00044b26 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   44b26:	b530      	push	{r4, r5, lr}
   44b28:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   44b2a:	f10d 020e 	add.w	r2, sp, #14
{
   44b2e:	4605      	mov	r5, r0
   44b30:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   44b32:	f7ff ff9d 	bl	44a70 <fcb_elem_crc8>
	if (rc) {
   44b36:	b9e0      	cbnz	r0, 44b72 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   44b38:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   44b3c:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   44b3e:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   44b40:	bf81      	itttt	hi
   44b42:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   44b46:	18d2      	addhi	r2, r2, r3
   44b48:	425b      	neghi	r3, r3
   44b4a:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   44b4c:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   44b4e:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   44b50:	9300      	str	r3, [sp, #0]
   44b52:	440a      	add	r2, r1
   44b54:	f10d 030f 	add.w	r3, sp, #15
   44b58:	6821      	ldr	r1, [r4, #0]
   44b5a:	4628      	mov	r0, r5
   44b5c:	f7ff fe6f 	bl	4483e <fcb_flash_read>
	if (rc) {
   44b60:	b948      	cbnz	r0, 44b76 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   44b62:	f89d 200f 	ldrb.w	r2, [sp, #15]
   44b66:	f89d 300e 	ldrb.w	r3, [sp, #14]
   44b6a:	429a      	cmp	r2, r3
		return -EBADMSG;
   44b6c:	bf18      	it	ne
   44b6e:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   44b72:	b005      	add	sp, #20
   44b74:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   44b76:	f06f 0004 	mvn.w	r0, #4
   44b7a:	e7fa      	b.n	44b72 <fcb_elem_info+0x4c>

00044b7c <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   44b7c:	b538      	push	{r3, r4, r5, lr}
   44b7e:	4604      	mov	r4, r0
   44b80:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   44b82:	f7ff ffd0 	bl	44b26 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   44b86:	b110      	cbz	r0, 44b8e <fcb_getnext_in_sector+0x12>
   44b88:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   44b8c:	d118      	bne.n	44bc0 <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   44b8e:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   44b92:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   44b94:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   44b96:	bf88      	it	hi
   44b98:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
			loc->fe_elem_off = loc->fe_data_off +
   44b9c:	68aa      	ldr	r2, [r5, #8]
   44b9e:	bf82      	ittt	hi
   44ba0:	185b      	addhi	r3, r3, r1
   44ba2:	4248      	neghi	r0, r1
   44ba4:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   44ba6:	2901      	cmp	r1, #1
   44ba8:	4413      	add	r3, r2
		return len;
   44baa:	bf92      	itee	ls
   44bac:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   44bae:	424a      	neghi	r2, r1
   44bb0:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   44bb2:	4413      	add	r3, r2
			loc->fe_elem_off = loc->fe_data_off +
   44bb4:	606b      	str	r3, [r5, #4]
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   44bb6:	4629      	mov	r1, r5
   44bb8:	4620      	mov	r0, r4
   44bba:	f7ff ffb4 	bl	44b26 <fcb_elem_info>
			if (rc != -EBADMSG) {
   44bbe:	e7e3      	b.n	44b88 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   44bc0:	bd38      	pop	{r3, r4, r5, pc}

00044bc2 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   44bc2:	6882      	ldr	r2, [r0, #8]
   44bc4:	7943      	ldrb	r3, [r0, #5]
	sector++;
   44bc6:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   44bc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   44bcc:	4299      	cmp	r1, r3
   44bce:	bf34      	ite	cc
   44bd0:	4608      	movcc	r0, r1
   44bd2:	4610      	movcs	r0, r2
   44bd4:	4770      	bx	lr

00044bd6 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   44bd6:	680b      	ldr	r3, [r1, #0]
{
   44bd8:	b570      	push	{r4, r5, r6, lr}
   44bda:	4605      	mov	r5, r0
   44bdc:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   44bde:	b90b      	cbnz	r3, 44be4 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   44be0:	6a03      	ldr	r3, [r0, #32]
   44be2:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   44be4:	6863      	ldr	r3, [r4, #4]
   44be6:	b95b      	cbnz	r3, 44c00 <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   44be8:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   44bea:	4621      	mov	r1, r4
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   44bec:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   44bee:	4628      	mov	r0, r5
   44bf0:	f7ff ff99 	bl	44b26 <fcb_elem_info>
		switch (rc) {
   44bf4:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   44bf8:	d021      	beq.n	44c3e <fcb_getnext_nolock+0x68>
   44bfa:	b950      	cbnz	r0, 44c12 <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   44bfc:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   44bfe:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   44c00:	4621      	mov	r1, r4
   44c02:	4628      	mov	r0, r5
   44c04:	f7ff ffba 	bl	44b7c <fcb_getnext_in_sector>
		if (rc == 0) {
   44c08:	2800      	cmp	r0, #0
   44c0a:	d0f7      	beq.n	44bfc <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   44c0c:	f110 0f86 	cmn.w	r0, #134	; 0x86
   44c10:	d113      	bne.n	44c3a <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   44c12:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   44c14:	6821      	ldr	r1, [r4, #0]
   44c16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   44c18:	4299      	cmp	r1, r3
   44c1a:	d019      	beq.n	44c50 <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   44c1c:	4628      	mov	r0, r5
   44c1e:	f7ff ffd0 	bl	44bc2 <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   44c22:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   44c24:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   44c28:	4628      	mov	r0, r5
   44c2a:	f7ff ff7c 	bl	44b26 <fcb_elem_info>
			switch (rc) {
   44c2e:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   44c32:	d004      	beq.n	44c3e <fcb_getnext_nolock+0x68>
   44c34:	2800      	cmp	r0, #0
   44c36:	d0e1      	beq.n	44bfc <fcb_getnext_nolock+0x26>
   44c38:	e7ec      	b.n	44c14 <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   44c3a:	304d      	adds	r0, #77	; 0x4d
   44c3c:	d1de      	bne.n	44bfc <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   44c3e:	4621      	mov	r1, r4
   44c40:	4628      	mov	r0, r5
   44c42:	f7ff ff9b 	bl	44b7c <fcb_getnext_in_sector>
		if (rc == 0) {
   44c46:	2800      	cmp	r0, #0
   44c48:	d0d8      	beq.n	44bfc <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   44c4a:	304d      	adds	r0, #77	; 0x4d
   44c4c:	d0f7      	beq.n	44c3e <fcb_getnext_nolock+0x68>
next_sector:
   44c4e:	e7e0      	b.n	44c12 <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   44c50:	f06f 0085 	mvn.w	r0, #133	; 0x85
   44c54:	e7d3      	b.n	44bfe <fcb_getnext_nolock+0x28>

00044c56 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   44c56:	b570      	push	{r4, r5, r6, lr}
   44c58:	4604      	mov	r4, r0
   44c5a:	460e      	mov	r6, r1
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   44c5c:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   44c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44c68:	4628      	mov	r0, r5
   44c6a:	f7fa f9b9 	bl	3efe0 <z_impl_k_mutex_lock>
	if (rc) {
   44c6e:	b948      	cbnz	r0, 44c84 <fcb_getnext+0x2e>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   44c70:	4631      	mov	r1, r6
   44c72:	4620      	mov	r0, r4
   44c74:	f7ff ffaf 	bl	44bd6 <fcb_getnext_nolock>
   44c78:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   44c7a:	4628      	mov	r0, r5
   44c7c:	f7fa faae 	bl	3f1dc <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   44c80:	4620      	mov	r0, r4
   44c82:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   44c84:	f06f 0415 	mvn.w	r4, #21
   44c88:	e7fa      	b.n	44c80 <fcb_getnext+0x2a>

00044c8a <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   44c8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   44c8c:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   44c8e:	f100 060c 	add.w	r6, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   44c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   44c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   44c9a:	4630      	mov	r0, r6
   44c9c:	f7fa f9a0 	bl	3efe0 <z_impl_k_mutex_lock>
	if (rc) {
   44ca0:	bb48      	cbnz	r0, 44cf6 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   44ca2:	6a21      	ldr	r1, [r4, #32]
   44ca4:	4620      	mov	r0, r4
   44ca6:	f7ff fdf4 	bl	44892 <fcb_erase_sector>
	if (rc) {
   44caa:	bb08      	cbnz	r0, 44cf0 <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   44cac:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   44cb0:	4299      	cmp	r1, r3
   44cb2:	d112      	bne.n	44cda <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   44cb4:	4620      	mov	r0, r4
   44cb6:	f7ff ff84 	bl	44bc2 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   44cba:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   44cbc:	4601      	mov	r1, r0
   44cbe:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   44cc0:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   44cc2:	b292      	uxth	r2, r2
   44cc4:	4620      	mov	r0, r4
   44cc6:	f7ff fe29 	bl	4491c <fcb_sector_hdr_init>
		if (rc) {
   44cca:	4605      	mov	r5, r0
   44ccc:	b958      	cbnz	r0, 44ce6 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   44cce:	2308      	movs	r3, #8
   44cd0:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   44cd2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   44cd4:	6267      	str	r7, [r4, #36]	; 0x24
		fcb->f_active_id++;
   44cd6:	3301      	adds	r3, #1
   44cd8:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   44cda:	6a21      	ldr	r1, [r4, #32]
   44cdc:	4620      	mov	r0, r4
   44cde:	f7ff ff70 	bl	44bc2 <fcb_getnext_sector>
   44ce2:	2500      	movs	r5, #0
   44ce4:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   44ce6:	4630      	mov	r0, r6
   44ce8:	f7fa fa78 	bl	3f1dc <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   44cec:	4628      	mov	r0, r5
   44cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   44cf0:	f06f 0504 	mvn.w	r5, #4
   44cf4:	e7f7      	b.n	44ce6 <fcb_rotate+0x5c>
		return -EINVAL;
   44cf6:	f06f 0515 	mvn.w	r5, #21
   44cfa:	e7f7      	b.n	44cec <fcb_rotate+0x62>

00044cfc <boot_flag_read.constprop.6>:
static int boot_flag_read(int flag, uint8_t bank_id)
   44cfc:	b507      	push	{r0, r1, r2, lr}
	rc = flash_area_open(bank_id, &fa);
   44cfe:	2003      	movs	r0, #3
   44d00:	a901      	add	r1, sp, #4
   44d02:	f7e0 fd93 	bl	2582c <flash_area_open>
	if (rc) {
   44d06:	b950      	cbnz	r0, 44d1e <boot_flag_read.constprop.6+0x22>
	rc = boot_flag_offs(flag, fa, &offs);
   44d08:	9801      	ldr	r0, [sp, #4]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   44d0a:	2301      	movs	r3, #1
		*offs = IMAGE_OK_OFFS(fa);
   44d0c:	6881      	ldr	r1, [r0, #8]
	rc = flash_area_read(fa, offs, &flag_val, sizeof(flag_val));
   44d0e:	f10d 0203 	add.w	r2, sp, #3
   44d12:	3918      	subs	r1, #24
   44d14:	f000 f997 	bl	45046 <flash_area_read>
	if (rc != 0) {
   44d18:	b908      	cbnz	r0, 44d1e <boot_flag_read.constprop.6+0x22>
	return flag_val;
   44d1a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
   44d1e:	b003      	add	sp, #12
   44d20:	f85d fb04 	ldr.w	pc, [sp], #4

00044d24 <boot_flag_write.constprop.7>:
static int boot_flag_write(int flag, uint8_t bank_id)
   44d24:	b513      	push	{r0, r1, r4, lr}
	rc = flash_area_open(bank_id, &fa);
   44d26:	a901      	add	r1, sp, #4
   44d28:	f7e0 fd80 	bl	2582c <flash_area_open>
	if (rc) {
   44d2c:	4604      	mov	r4, r0
   44d2e:	b948      	cbnz	r0, 44d44 <boot_flag_write.constprop.7+0x20>
	rc = boot_flag_offs(flag, fa, &offs);
   44d30:	9801      	ldr	r0, [sp, #4]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   44d32:	2201      	movs	r2, #1
		*offs = IMAGE_OK_OFFS(fa);
   44d34:	6881      	ldr	r1, [r0, #8]
	rc = boot_write_trailer_byte(fa, offs, BOOT_FLAG_SET);
   44d36:	3918      	subs	r1, #24
   44d38:	f7e0 fb36 	bl	253a8 <boot_write_trailer_byte>
   44d3c:	4604      	mov	r4, r0
	flash_area_close(fa);
   44d3e:	9801      	ldr	r0, [sp, #4]
   44d40:	f000 f980 	bl	45044 <flash_area_close>
}
   44d44:	4620      	mov	r0, r4
   44d46:	b002      	add	sp, #8
   44d48:	bd10      	pop	{r4, pc}

00044d4a <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   44d4a:	b508      	push	{r3, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   44d4c:	f7ff ffd6 	bl	44cfc <boot_flag_read.constprop.6>
	return boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) == BOOT_FLAG_SET;
}
   44d50:	1e43      	subs	r3, r0, #1
   44d52:	4258      	negs	r0, r3
   44d54:	4158      	adcs	r0, r3
   44d56:	bd08      	pop	{r3, pc}

00044d58 <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   44d58:	b513      	push	{r0, r1, r4, lr}
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   44d5a:	f7ff ffcf 	bl	44cfc <boot_flag_read.constprop.6>
	rc = flash_area_open(bank_id, &fa);
   44d5e:	a901      	add	r1, sp, #4
	return boot_flag_read(BOOT_FLAG_IMAGE_OK, bank_id);
   44d60:	4604      	mov	r4, r0
	rc = flash_area_open(bank_id, &fa);
   44d62:	2003      	movs	r0, #3
   44d64:	f7e0 fd62 	bl	2582c <flash_area_open>
	if (rc) {
   44d68:	2800      	cmp	r0, #0
		return -EINVAL;
   44d6a:	bf0c      	ite	eq
   44d6c:	23ff      	moveq	r3, #255	; 0xff
   44d6e:	f06f 0315 	mvnne.w	r3, #21
	int rc;

	if (boot_image_ok_read(FLASH_AREA_IMAGE_PRIMARY) !=
   44d72:	42a3      	cmp	r3, r4
   44d74:	d104      	bne.n	44d80 <boot_write_img_confirmed+0x28>
	return boot_flag_write(BOOT_FLAG_IMAGE_OK, bank_id);
   44d76:	2003      	movs	r0, #3
   44d78:	f7ff ffd4 	bl	44d24 <boot_flag_write.constprop.7>
	}

	rc = boot_image_ok_write(FLASH_AREA_IMAGE_PRIMARY);

	return rc;
}
   44d7c:	b002      	add	sp, #8
   44d7e:	bd10      	pop	{r4, pc}
		return 0;
   44d80:	2000      	movs	r0, #0
   44d82:	e7fb      	b.n	44d7c <boot_write_img_confirmed+0x24>

00044d84 <flash_img_buffered_write>:
	     "CONFIG_IMG_BLOCK_BUF_SIZE is not a multiple of "
	     "FLASH_WRITE_BLOCK_SIZE");

int flash_img_buffered_write(struct flash_img_context *ctx, const uint8_t *data,
			     size_t len, bool flush)
{
   44d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;

	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   44d86:	f500 7601 	add.w	r6, r0, #516	; 0x204
{
   44d8a:	4605      	mov	r5, r0
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   44d8c:	4630      	mov	r0, r6
{
   44d8e:	461f      	mov	r7, r3
	rc = stream_flash_buffered_write(&ctx->stream, data, len, flush);
   44d90:	f000 f9da 	bl	45148 <stream_flash_buffered_write>
   44d94:	4604      	mov	r4, r0
	if (!flush) {
   44d96:	b187      	cbz	r7, 44dba <flash_img_buffered_write+0x36>
		return rc;
	}

#ifdef CONFIG_IMG_ERASE_PROGRESSIVELY
	rc = stream_flash_erase_page(&ctx->stream,
				ctx->flash_area->fa_off +
   44d98:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	rc = stream_flash_erase_page(&ctx->stream,
   44d9c:	4630      	mov	r0, r6
				ctx->flash_area->fa_off +
   44d9e:	6899      	ldr	r1, [r3, #8]
   44da0:	685b      	ldr	r3, [r3, #4]
   44da2:	3920      	subs	r1, #32
	rc = stream_flash_erase_page(&ctx->stream,
   44da4:	4419      	add	r1, r3
   44da6:	f7e0 fd7d 	bl	258a4 <stream_flash_erase_page>
				BOOT_TRAILER_IMG_STATUS_OFFS(ctx->flash_area));
	if (rc) {
   44daa:	4604      	mov	r4, r0
   44dac:	b928      	cbnz	r0, 44dba <flash_img_buffered_write+0x36>
		return rc;
	}
#endif

	flash_area_close(ctx->flash_area);
   44dae:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   44db2:	f000 f947 	bl	45044 <flash_area_close>
	ctx->flash_area = NULL;
   44db6:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200

	return rc;
}
   44dba:	4620      	mov	r0, r4
   44dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00044dbe <flash_img_bytes_written>:

size_t flash_img_bytes_written(struct flash_img_context *ctx)
{
	return stream_flash_bytes_written(&ctx->stream);
   44dbe:	f500 7001 	add.w	r0, r0, #516	; 0x204
   44dc2:	f000 ba2b 	b.w	4521c <stream_flash_bytes_written>

00044dc6 <flash_img_init_id>:
}

int flash_img_init_id(struct flash_img_context *ctx, uint8_t area_id)
{
   44dc6:	b530      	push	{r4, r5, lr}
   44dc8:	4605      	mov	r5, r0
   44dca:	b085      	sub	sp, #20
   44dcc:	4608      	mov	r0, r1
	int rc;
	const struct device *flash_dev;

	rc = flash_area_open(area_id,
   44dce:	f505 7100 	add.w	r1, r5, #512	; 0x200
   44dd2:	f7e0 fd2b 	bl	2582c <flash_area_open>
			       (const struct flash_area **)&(ctx->flash_area));
	if (rc) {
   44dd6:	4604      	mov	r4, r0
   44dd8:	b998      	cbnz	r0, 44e02 <flash_img_init_id+0x3c>
		return rc;
	}

	flash_dev = flash_area_get_device(ctx->flash_area);
   44dda:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
   44dde:	f000 f9a7 	bl	45130 <flash_area_get_device>

	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
			CONFIG_IMG_BLOCK_BUF_SIZE, ctx->flash_area->fa_off,
   44de2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
	return stream_flash_init(&ctx->stream, flash_dev, ctx->buf,
   44de6:	9402      	str	r4, [sp, #8]
   44de8:	689a      	ldr	r2, [r3, #8]
   44dea:	4601      	mov	r1, r0
   44dec:	9201      	str	r2, [sp, #4]
   44dee:	685b      	ldr	r3, [r3, #4]
   44df0:	462a      	mov	r2, r5
   44df2:	9300      	str	r3, [sp, #0]
   44df4:	f505 7001 	add.w	r0, r5, #516	; 0x204
   44df8:	f44f 7300 	mov.w	r3, #512	; 0x200
   44dfc:	f7e0 fe32 	bl	25a64 <stream_flash_init>
   44e00:	4604      	mov	r4, r0
			ctx->flash_area->fa_size, NULL);
}
   44e02:	4620      	mov	r0, r4
   44e04:	b005      	add	sp, #20
   44e06:	bd30      	pop	{r4, r5, pc}

00044e08 <flash_img_init>:

int flash_img_init(struct flash_img_context *ctx)
{
	return flash_img_init_id(ctx, FLASH_AREA_IMAGE_SECONDARY);
   44e08:	2107      	movs	r1, #7
   44e0a:	f7ff bfdc 	b.w	44dc6 <flash_img_init_id>

00044e0e <sntp_init>:
{
   44e0e:	b570      	push	{r4, r5, r6, lr}
   44e10:	460d      	mov	r5, r1
   44e12:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   44e14:	4604      	mov	r4, r0
   44e16:	b330      	cbz	r0, 44e66 <sntp_init+0x58>
   44e18:	b329      	cbz	r1, 44e66 <sntp_init+0x58>
   44e1a:	2214      	movs	r2, #20
   44e1c:	2100      	movs	r1, #0
   44e1e:	f003 f9d3 	bl	481c8 <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   44e22:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   44e24:	2211      	movs	r2, #17
   44e26:	2102      	movs	r1, #2
   44e28:	f7e0 fb18 	bl	2545c <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   44e2c:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   44e2e:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   44e30:	da04      	bge.n	44e3c <sntp_init+0x2e>
		return -errno;
   44e32:	f000 fdd7 	bl	459e4 <__errno>
   44e36:	6800      	ldr	r0, [r0, #0]
   44e38:	4240      	negs	r0, r0
}
   44e3a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   44e3c:	4632      	mov	r2, r6
   44e3e:	4629      	mov	r1, r5
   44e40:	f000 f843 	bl	44eca <z_impl_zsock_connect>
	if (ret < 0) {
   44e44:	2800      	cmp	r0, #0
   44e46:	68e0      	ldr	r0, [r4, #12]
   44e48:	da02      	bge.n	44e50 <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   44e4a:	f000 f827 	bl	44e9c <z_impl_zsock_close>
   44e4e:	e7f0      	b.n	44e32 <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   44e50:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   44e52:	68a3      	ldr	r3, [r4, #8]
   44e54:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   44e58:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   44e5c:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   44e5e:	8091      	strh	r1, [r2, #4]
	return 0;
   44e60:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   44e62:	60a3      	str	r3, [r4, #8]
	return 0;
   44e64:	e7e9      	b.n	44e3a <sntp_init+0x2c>
		return -EFAULT;
   44e66:	f06f 000d 	mvn.w	r0, #13
   44e6a:	e7e6      	b.n	44e3a <sntp_init+0x2c>

00044e6c <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   44e6c:	b110      	cbz	r0, 44e74 <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   44e6e:	68c0      	ldr	r0, [r0, #12]
   44e70:	f000 b814 	b.w	44e9c <z_impl_zsock_close>
	}
}
   44e74:	4770      	bx	lr

00044e76 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   44e76:	f7e0 bc63 	b.w	25740 <socket_offload_getaddrinfo>

00044e7a <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   44e7a:	f7e0 bc95 	b.w	257a8 <socket_offload_freeaddrinfo>

00044e7e <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   44e7e:	b40c      	push	{r2, r3}
   44e80:	b513      	push	{r0, r1, r4, lr}
   44e82:	460c      	mov	r4, r1
   44e84:	aa04      	add	r2, sp, #16
   44e86:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   44e8a:	68c3      	ldr	r3, [r0, #12]
   44e8c:	4620      	mov	r0, r4
	va_start(args, request);
   44e8e:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   44e90:	4798      	blx	r3
	va_end(args);

	return res;
}
   44e92:	b002      	add	sp, #8
   44e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   44e98:	b002      	add	sp, #8
   44e9a:	4770      	bx	lr

00044e9c <z_impl_zsock_close>:
{
   44e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   44e9e:	a901      	add	r1, sp, #4
{
   44ea0:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   44ea2:	f7df f92b 	bl	240fc <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   44ea6:	b940      	cbnz	r0, 44eba <z_impl_zsock_close+0x1e>
		errno = EBADF;
   44ea8:	f000 fd9c 	bl	459e4 <__errno>
   44eac:	2309      	movs	r3, #9
		return -1;
   44eae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   44eb2:	6003      	str	r3, [r0, #0]
}
   44eb4:	4620      	mov	r0, r4
   44eb6:	b003      	add	sp, #12
   44eb8:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   44eba:	9b01      	ldr	r3, [sp, #4]
   44ebc:	689b      	ldr	r3, [r3, #8]
   44ebe:	4798      	blx	r3
   44ec0:	4604      	mov	r4, r0
	z_free_fd(sock);
   44ec2:	4628      	mov	r0, r5
   44ec4:	f7df f96a 	bl	2419c <z_free_fd>
	return ret;
   44ec8:	e7f4      	b.n	44eb4 <z_impl_zsock_close+0x18>

00044eca <z_impl_zsock_connect>:
{
   44eca:	b537      	push	{r0, r1, r2, r4, r5, lr}
   44ecc:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44ece:	a901      	add	r1, sp, #4
{
   44ed0:	4615      	mov	r5, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   44ed2:	f7df f913 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   44ed6:	b110      	cbz	r0, 44ede <z_impl_zsock_connect+0x14>
   44ed8:	9b01      	ldr	r3, [sp, #4]
   44eda:	695b      	ldr	r3, [r3, #20]
   44edc:	b93b      	cbnz	r3, 44eee <z_impl_zsock_connect+0x24>
   44ede:	f000 fd81 	bl	459e4 <__errno>
   44ee2:	2309      	movs	r3, #9
   44ee4:	6003      	str	r3, [r0, #0]
   44ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44eea:	b003      	add	sp, #12
   44eec:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   44eee:	462a      	mov	r2, r5
   44ef0:	4621      	mov	r1, r4
   44ef2:	4798      	blx	r3
   44ef4:	e7f9      	b.n	44eea <z_impl_zsock_connect+0x20>

00044ef6 <z_impl_zsock_sendto>:
{
   44ef6:	b5f0      	push	{r4, r5, r6, r7, lr}
   44ef8:	b085      	sub	sp, #20
   44efa:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44efc:	a903      	add	r1, sp, #12
{
   44efe:	4616      	mov	r6, r2
   44f00:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   44f02:	f7df f8fb 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   44f06:	b110      	cbz	r0, 44f0e <z_impl_zsock_sendto+0x18>
   44f08:	9b03      	ldr	r3, [sp, #12]
   44f0a:	6a1c      	ldr	r4, [r3, #32]
   44f0c:	b93c      	cbnz	r4, 44f1e <z_impl_zsock_sendto+0x28>
   44f0e:	f000 fd69 	bl	459e4 <__errno>
   44f12:	2309      	movs	r3, #9
   44f14:	6003      	str	r3, [r0, #0]
   44f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44f1a:	b005      	add	sp, #20
   44f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   44f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   44f20:	4632      	mov	r2, r6
   44f22:	9301      	str	r3, [sp, #4]
   44f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   44f26:	4629      	mov	r1, r5
   44f28:	9300      	str	r3, [sp, #0]
   44f2a:	463b      	mov	r3, r7
   44f2c:	47a0      	blx	r4
   44f2e:	e7f4      	b.n	44f1a <z_impl_zsock_sendto+0x24>

00044f30 <z_impl_zsock_sendmsg>:
{
   44f30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   44f32:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44f34:	a901      	add	r1, sp, #4
{
   44f36:	4615      	mov	r5, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   44f38:	f7df f8e0 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   44f3c:	b110      	cbz	r0, 44f44 <z_impl_zsock_sendmsg+0x14>
   44f3e:	9b01      	ldr	r3, [sp, #4]
   44f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   44f42:	b93b      	cbnz	r3, 44f54 <z_impl_zsock_sendmsg+0x24>
   44f44:	f000 fd4e 	bl	459e4 <__errno>
   44f48:	2309      	movs	r3, #9
   44f4a:	6003      	str	r3, [r0, #0]
   44f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44f50:	b003      	add	sp, #12
   44f52:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   44f54:	462a      	mov	r2, r5
   44f56:	4621      	mov	r1, r4
   44f58:	4798      	blx	r3
   44f5a:	e7f9      	b.n	44f50 <z_impl_zsock_sendmsg+0x20>

00044f5c <z_impl_zsock_recvfrom>:
{
   44f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   44f5e:	b085      	sub	sp, #20
   44f60:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44f62:	a903      	add	r1, sp, #12
{
   44f64:	4616      	mov	r6, r2
   44f66:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   44f68:	f7df f8c8 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   44f6c:	b110      	cbz	r0, 44f74 <z_impl_zsock_recvfrom+0x18>
   44f6e:	9b03      	ldr	r3, [sp, #12]
   44f70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   44f72:	b93c      	cbnz	r4, 44f84 <z_impl_zsock_recvfrom+0x28>
   44f74:	f000 fd36 	bl	459e4 <__errno>
   44f78:	2309      	movs	r3, #9
   44f7a:	6003      	str	r3, [r0, #0]
   44f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44f80:	b005      	add	sp, #20
   44f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   44f84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   44f86:	4632      	mov	r2, r6
   44f88:	9301      	str	r3, [sp, #4]
   44f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   44f8c:	4629      	mov	r1, r5
   44f8e:	9300      	str	r3, [sp, #0]
   44f90:	463b      	mov	r3, r7
   44f92:	47a0      	blx	r4
   44f94:	e7f4      	b.n	44f80 <z_impl_zsock_recvfrom+0x24>

00044f96 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   44f96:	b5f0      	push	{r4, r5, r6, r7, lr}
   44f98:	b085      	sub	sp, #20
   44f9a:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44f9c:	a903      	add	r1, sp, #12
{
   44f9e:	4616      	mov	r6, r2
   44fa0:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   44fa2:	f7df f8ab 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   44fa6:	b110      	cbz	r0, 44fae <z_impl_zsock_getsockopt+0x18>
   44fa8:	9b03      	ldr	r3, [sp, #12]
   44faa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   44fac:	b93c      	cbnz	r4, 44fbe <z_impl_zsock_getsockopt+0x28>
   44fae:	f000 fd19 	bl	459e4 <__errno>
   44fb2:	2309      	movs	r3, #9
   44fb4:	6003      	str	r3, [r0, #0]
   44fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44fba:	b005      	add	sp, #20
   44fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   44fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   44fc0:	4632      	mov	r2, r6
   44fc2:	9300      	str	r3, [sp, #0]
   44fc4:	4629      	mov	r1, r5
   44fc6:	463b      	mov	r3, r7
   44fc8:	47a0      	blx	r4
   44fca:	e7f6      	b.n	44fba <z_impl_zsock_getsockopt+0x24>

00044fcc <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   44fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   44fce:	b085      	sub	sp, #20
   44fd0:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   44fd2:	a903      	add	r1, sp, #12
{
   44fd4:	4616      	mov	r6, r2
   44fd6:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   44fd8:	f7df f890 	bl	240fc <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   44fdc:	b110      	cbz	r0, 44fe4 <z_impl_zsock_setsockopt+0x18>
   44fde:	9b03      	ldr	r3, [sp, #12]
   44fe0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   44fe2:	b93c      	cbnz	r4, 44ff4 <z_impl_zsock_setsockopt+0x28>
   44fe4:	f000 fcfe 	bl	459e4 <__errno>
   44fe8:	2309      	movs	r3, #9
   44fea:	6003      	str	r3, [r0, #0]
   44fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   44ff0:	b005      	add	sp, #20
   44ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   44ff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   44ff6:	4632      	mov	r2, r6
   44ff8:	9300      	str	r3, [sp, #0]
   44ffa:	4629      	mov	r1, r5
   44ffc:	463b      	mov	r3, r7
   44ffe:	47a0      	blx	r4
   45000:	e7f6      	b.n	44ff0 <z_impl_zsock_setsockopt+0x24>

00045002 <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
   45002:	6883      	ldr	r3, [r0, #8]
   45004:	68db      	ldr	r3, [r3, #12]
   45006:	4718      	bx	r3

00045008 <get_sectors_cb>:
{
   45008:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   4500a:	6802      	ldr	r2, [r0, #0]
   4500c:	684c      	ldr	r4, [r1, #4]
   4500e:	42a2      	cmp	r2, r4
   45010:	d316      	bcc.n	45040 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   45012:	688b      	ldr	r3, [r1, #8]
   45014:	4423      	add	r3, r4
   45016:	429a      	cmp	r2, r3
   45018:	d206      	bcs.n	45028 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   4501a:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   4501e:	42ab      	cmp	r3, r5
   45020:	d304      	bcc.n	4502c <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   45022:	f06f 030b 	mvn.w	r3, #11
   45026:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   45028:	2000      	movs	r0, #0
   4502a:	e00a      	b.n	45042 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   4502c:	68cd      	ldr	r5, [r1, #12]
   4502e:	1b12      	subs	r2, r2, r4
   45030:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   45034:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   45036:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   4503a:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   4503c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   4503e:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   45040:	2001      	movs	r0, #1
}
   45042:	bd70      	pop	{r4, r5, r6, pc}

00045044 <flash_area_close>:
}
   45044:	4770      	bx	lr

00045046 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   45046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4504a:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   4504c:	6883      	ldr	r3, [r0, #8]
{
   4504e:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   45050:	428b      	cmp	r3, r1
{
   45052:	460c      	mov	r4, r1
   45054:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   45056:	d30f      	bcc.n	45078 <flash_area_read+0x32>
   45058:	1872      	adds	r2, r6, r1
   4505a:	4293      	cmp	r3, r2
   4505c:	d30c      	bcc.n	45078 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   4505e:	68c0      	ldr	r0, [r0, #12]
   45060:	f7f9 fb6e 	bl	3e740 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   45064:	6869      	ldr	r1, [r5, #4]
   45066:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   45068:	6883      	ldr	r3, [r0, #8]
   4506a:	463a      	mov	r2, r7
   4506c:	681c      	ldr	r4, [r3, #0]
   4506e:	4633      	mov	r3, r6
   45070:	46a4      	mov	ip, r4
}
   45072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   45076:	4760      	bx	ip
   45078:	f06f 0015 	mvn.w	r0, #21
   4507c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045080 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   45080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45084:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   45086:	6883      	ldr	r3, [r0, #8]
{
   45088:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   4508a:	428b      	cmp	r3, r1
{
   4508c:	460d      	mov	r5, r1
   4508e:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   45090:	d31c      	bcc.n	450cc <flash_area_write+0x4c>
   45092:	eb08 0201 	add.w	r2, r8, r1
   45096:	4293      	cmp	r3, r2
   45098:	d318      	bcc.n	450cc <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   4509a:	68c0      	ldr	r0, [r0, #12]
   4509c:	f7f9 fb50 	bl	3e740 <z_impl_device_get_binding>
   450a0:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   450a2:	2100      	movs	r1, #0
   450a4:	f7ff ffad 	bl	45002 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   450a8:	4604      	mov	r4, r0
   450aa:	b960      	cbnz	r0, 450c6 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   450ac:	6879      	ldr	r1, [r7, #4]
   450ae:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   450b0:	68b3      	ldr	r3, [r6, #8]
   450b2:	464a      	mov	r2, r9
   450b4:	685c      	ldr	r4, [r3, #4]
   450b6:	4630      	mov	r0, r6
   450b8:	4643      	mov	r3, r8
   450ba:	47a0      	blx	r4
   450bc:	4604      	mov	r4, r0
   450be:	2101      	movs	r1, #1
   450c0:	4630      	mov	r0, r6
   450c2:	f7ff ff9e 	bl	45002 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   450c6:	4620      	mov	r0, r4
   450c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   450cc:	f06f 0415 	mvn.w	r4, #21
   450d0:	e7f9      	b.n	450c6 <flash_area_write+0x46>

000450d2 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   450d2:	6883      	ldr	r3, [r0, #8]
{
   450d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   450d8:	428b      	cmp	r3, r1
{
   450da:	4607      	mov	r7, r0
   450dc:	460d      	mov	r5, r1
   450de:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   450e0:	d31a      	bcc.n	45118 <flash_area_erase+0x46>
   450e2:	440a      	add	r2, r1
   450e4:	4293      	cmp	r3, r2
   450e6:	d317      	bcc.n	45118 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   450e8:	68c0      	ldr	r0, [r0, #12]
   450ea:	f7f9 fb29 	bl	3e740 <z_impl_device_get_binding>
   450ee:	4606      	mov	r6, r0
   450f0:	2100      	movs	r1, #0
   450f2:	f7ff ff86 	bl	45002 <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   450f6:	4604      	mov	r4, r0
   450f8:	b958      	cbnz	r0, 45112 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   450fa:	6879      	ldr	r1, [r7, #4]
   450fc:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   450fe:	68b3      	ldr	r3, [r6, #8]
   45100:	4642      	mov	r2, r8
   45102:	689b      	ldr	r3, [r3, #8]
   45104:	4630      	mov	r0, r6
   45106:	4798      	blx	r3
   45108:	4604      	mov	r4, r0
   4510a:	2101      	movs	r1, #1
   4510c:	4630      	mov	r0, r6
   4510e:	f7ff ff78 	bl	45002 <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   45112:	4620      	mov	r0, r4
   45114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   45118:	f06f 0415 	mvn.w	r4, #21
   4511c:	e7f9      	b.n	45112 <flash_area_erase+0x40>

0004511e <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   4511e:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   45120:	68c0      	ldr	r0, [r0, #12]
   45122:	f7f9 fb0d 	bl	3e740 <z_impl_device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
   45126:	6883      	ldr	r3, [r0, #8]
   45128:	691b      	ldr	r3, [r3, #16]
   4512a:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   4512c:	7800      	ldrb	r0, [r0, #0]
   4512e:	bd08      	pop	{r3, pc}

00045130 <flash_area_get_device>:
	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
	return device_get_binding(fa->fa_dev_name);
   45130:	68c0      	ldr	r0, [r0, #12]
   45132:	f7f9 bb05 	b.w	3e740 <z_impl_device_get_binding>

00045136 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   45136:	6883      	ldr	r3, [r0, #8]
   45138:	68db      	ldr	r3, [r3, #12]
   4513a:	4718      	bx	r3

0004513c <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   4513c:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   4513e:	6883      	ldr	r3, [r0, #8]
   45140:	691b      	ldr	r3, [r3, #16]
   45142:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   45144:	6800      	ldr	r0, [r0, #0]
   45146:	bd08      	pop	{r3, pc}

00045148 <stream_flash_buffered_write>:
{
   45148:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   4514c:	4689      	mov	r9, r1
   4514e:	4617      	mov	r7, r2
   45150:	4698      	mov	r8, r3
	if (!ctx) {
   45152:	4604      	mov	r4, r0
   45154:	2800      	cmp	r0, #0
   45156:	d059      	beq.n	4520c <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   45158:	6882      	ldr	r2, [r0, #8]
   4515a:	6903      	ldr	r3, [r0, #16]
   4515c:	4413      	add	r3, r2
   4515e:	6982      	ldr	r2, [r0, #24]
   45160:	443b      	add	r3, r7
   45162:	4293      	cmp	r3, r2
   45164:	d855      	bhi.n	45212 <stream_flash_buffered_write+0xca>
	int processed = 0;
   45166:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   45168:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
	while ((len - processed) >=
   4516c:	eba7 0a05 	sub.w	sl, r7, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   45170:	1a36      	subs	r6, r6, r0
	while ((len - processed) >=
   45172:	45b2      	cmp	sl, r6
   45174:	d23a      	bcs.n	451ec <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   45176:	42bd      	cmp	r5, r7
   45178:	d209      	bcs.n	4518e <stream_flash_buffered_write+0x46>
		memcpy(ctx->buf + ctx->buf_bytes,
   4517a:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   4517c:	4652      	mov	r2, sl
   4517e:	eb09 0105 	add.w	r1, r9, r5
   45182:	4418      	add	r0, r3
   45184:	f003 f800 	bl	48188 <memcpy>
		ctx->buf_bytes += len - processed;
   45188:	68a2      	ldr	r2, [r4, #8]
   4518a:	4452      	add	r2, sl
   4518c:	60a2      	str	r2, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   4518e:	f1b8 0f00 	cmp.w	r8, #0
   45192:	d041      	beq.n	45218 <stream_flash_buffered_write+0xd0>
   45194:	68a0      	ldr	r0, [r4, #8]
   45196:	b330      	cbz	r0, 451e6 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   45198:	68e0      	ldr	r0, [r4, #12]
   4519a:	f7ff ffcf 	bl	4513c <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   4519e:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   451a0:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   451a2:	fbb3 f5f0 	udiv	r5, r3, r0
   451a6:	fb00 3515 	mls	r5, r0, r5, r3
   451aa:	b1b5      	cbz	r5, 451da <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   451ac:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   451b0:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   451b2:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   451b4:	6883      	ldr	r3, [r0, #8]
   451b6:	f10d 0207 	add.w	r2, sp, #7
   451ba:	681f      	ldr	r7, [r3, #0]
   451bc:	2301      	movs	r3, #1
   451be:	47b8      	blx	r7
			if (rc != 0) {
   451c0:	b988      	cbnz	r0, 451e6 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   451c2:	68a3      	ldr	r3, [r4, #8]
   451c4:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   451c6:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   451c8:	4418      	add	r0, r3
   451ca:	462a      	mov	r2, r5
   451cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   451d0:	f002 fffa 	bl	481c8 <memset>
			ctx->buf_bytes += fill_length;
   451d4:	68a3      	ldr	r3, [r4, #8]
   451d6:	442b      	add	r3, r5
   451d8:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   451da:	4620      	mov	r0, r4
   451dc:	f7e0 fbb6 	bl	2594c <flash_sync>
		ctx->bytes_written -= fill_length;
   451e0:	6923      	ldr	r3, [r4, #16]
   451e2:	1b5d      	subs	r5, r3, r5
   451e4:	6125      	str	r5, [r4, #16]
}
   451e6:	b002      	add	sp, #8
   451e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   451ec:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   451ee:	4632      	mov	r2, r6
   451f0:	4418      	add	r0, r3
   451f2:	eb09 0105 	add.w	r1, r9, r5
   451f6:	f002 ffc7 	bl	48188 <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   451fa:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   451fc:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   451fe:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   45200:	f7e0 fba4 	bl	2594c <flash_sync>
		if (rc != 0) {
   45204:	2800      	cmp	r0, #0
   45206:	d1ee      	bne.n	451e6 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   45208:	4435      	add	r5, r6
   4520a:	e7ad      	b.n	45168 <stream_flash_buffered_write+0x20>
		return -EFAULT;
   4520c:	f06f 000d 	mvn.w	r0, #13
   45210:	e7e9      	b.n	451e6 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   45212:	f06f 000b 	mvn.w	r0, #11
   45216:	e7e6      	b.n	451e6 <stream_flash_buffered_write+0x9e>
   45218:	4640      	mov	r0, r8
   4521a:	e7e4      	b.n	451e6 <stream_flash_buffered_write+0x9e>

0004521c <stream_flash_bytes_written>:
}
   4521c:	6900      	ldr	r0, [r0, #16]
   4521e:	4770      	bx	lr

00045220 <settings_name_steq>:
{
   45220:	b530      	push	{r4, r5, lr}
	if (next) {
   45222:	b10a      	cbz	r2, 45228 <settings_name_steq+0x8>
		*next = NULL;
   45224:	2300      	movs	r3, #0
   45226:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   45228:	b190      	cbz	r0, 45250 <settings_name_steq+0x30>
   4522a:	b151      	cbz	r1, 45242 <settings_name_steq+0x22>
   4522c:	1e4d      	subs	r5, r1, #1
	while ((*key != '\0') && (*key == *name) &&
   4522e:	f815 4f01 	ldrb.w	r4, [r5, #1]!
   45232:	4603      	mov	r3, r0
   45234:	f810 1b01 	ldrb.w	r1, [r0], #1
   45238:	b15c      	cbz	r4, 45252 <settings_name_steq+0x32>
   4523a:	428c      	cmp	r4, r1
   4523c:	d101      	bne.n	45242 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   4523e:	2c3d      	cmp	r4, #61	; 0x3d
   45240:	d1f5      	bne.n	4522e <settings_name_steq+0xe>
	return 0;
   45242:	2000      	movs	r0, #0
   45244:	e004      	b.n	45250 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   45246:	293d      	cmp	r1, #61	; 0x3d
   45248:	d008      	beq.n	4525c <settings_name_steq+0x3c>
   4524a:	fab1 f081 	clz	r0, r1
   4524e:	0940      	lsrs	r0, r0, #5
}
   45250:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   45252:	292f      	cmp	r1, #47	; 0x2f
   45254:	d1f7      	bne.n	45246 <settings_name_steq+0x26>
		if (next) {
   45256:	b10a      	cbz	r2, 4525c <settings_name_steq+0x3c>
			*next = name + 1;
   45258:	3301      	adds	r3, #1
   4525a:	6013      	str	r3, [r2, #0]
		return 1;
   4525c:	2001      	movs	r0, #1
   4525e:	e7f7      	b.n	45250 <settings_name_steq+0x30>

00045260 <settings_line_len_calc>:
{
   45260:	b510      	push	{r4, lr}
   45262:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   45264:	f7d7 fffe 	bl	1d264 <strlen>
   45268:	3401      	adds	r4, #1
}
   4526a:	4420      	add	r0, r4
   4526c:	bd10      	pop	{r4, pc}

0004526e <settings_line_raw_read>:
{
   4526e:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   45270:	9c04      	ldr	r4, [sp, #16]
   45272:	9401      	str	r4, [sp, #4]
   45274:	2400      	movs	r4, #0
   45276:	9400      	str	r4, [sp, #0]
   45278:	f7e0 fdfe 	bl	25e78 <settings_line_raw_read_until>
}
   4527c:	b002      	add	sp, #8
   4527e:	bd10      	pop	{r4, pc}

00045280 <settings_line_read_cb>:
{
   45280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   45282:	6803      	ldr	r3, [r0, #0]
   45284:	9300      	str	r3, [sp, #0]
   45286:	6840      	ldr	r0, [r0, #4]
   45288:	ab03      	add	r3, sp, #12
   4528a:	f7ff fff0 	bl	4526e <settings_line_raw_read>
	if (rc == 0) {
   4528e:	b918      	cbnz	r0, 45298 <settings_line_read_cb+0x18>
		return len_read;
   45290:	9803      	ldr	r0, [sp, #12]
}
   45292:	b005      	add	sp, #20
   45294:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   45298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4529c:	e7f9      	b.n	45292 <settings_line_read_cb+0x12>

0004529e <settings_line_name_read>:
{
   4529e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   452a0:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   452a2:	9301      	str	r3, [sp, #4]
   452a4:	f10d 030f 	add.w	r3, sp, #15
   452a8:	9300      	str	r3, [sp, #0]
   452aa:	4613      	mov	r3, r2
   452ac:	460a      	mov	r2, r1
   452ae:	4601      	mov	r1, r0
   452b0:	2000      	movs	r0, #0
	char const until_char = '=';
   452b2:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   452b6:	f7e0 fddf 	bl	25e78 <settings_line_raw_read_until>
}
   452ba:	b004      	add	sp, #16
   452bc:	bd10      	pop	{r4, pc}

000452be <settings_line_dup_check_cb>:
{
   452be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   452c2:	4689      	mov	r9, r1
   452c4:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   452c6:	6819      	ldr	r1, [r3, #0]
{
   452c8:	4692      	mov	sl, r2
   452ca:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   452cc:	f7d7 ffc0 	bl	1d250 <strcmp>
   452d0:	4606      	mov	r6, r0
   452d2:	b940      	cbnz	r0, 452e6 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   452d4:	4649      	mov	r1, r9
   452d6:	4650      	mov	r0, sl
   452d8:	f7e0 fe8c 	bl	25ff4 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   452dc:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   452de:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   452e0:	4283      	cmp	r3, r0
   452e2:	d004      	beq.n	452ee <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   452e4:	60e6      	str	r6, [r4, #12]
}
   452e6:	2000      	movs	r0, #0
   452e8:	b008      	add	sp, #32
   452ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   452ee:	b913      	cbnz	r3, 452f6 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   452f0:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   452f2:	60e3      	str	r3, [r4, #12]
   452f4:	e7f7      	b.n	452e6 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   452f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   452fa:	2d10      	cmp	r5, #16
   452fc:	462f      	mov	r7, r5
   452fe:	bf28      	it	cs
   45300:	2710      	movcs	r7, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   45302:	f8cd 9000 	str.w	r9, [sp]
   45306:	ab03      	add	r3, sp, #12
   45308:	463a      	mov	r2, r7
   4530a:	a904      	add	r1, sp, #16
   4530c:	eb0a 0006 	add.w	r0, sl, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   45310:	9703      	str	r7, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   45312:	f7ff ffac 	bl	4526e <settings_line_raw_read>
		if (rc) {
   45316:	b970      	cbnz	r0, 45336 <settings_line_dup_check_cb+0x78>
		if (len_read != exp_len) {
   45318:	9b03      	ldr	r3, [sp, #12]
   4531a:	429f      	cmp	r7, r3
   4531c:	d10b      	bne.n	45336 <settings_line_dup_check_cb+0x78>
		rc = memcmp(val, buf, len_read);
   4531e:	463a      	mov	r2, r7
   45320:	a904      	add	r1, sp, #16
   45322:	4640      	mov	r0, r8
   45324:	f002 ff22 	bl	4816c <memcmp>
		if (rc) {
   45328:	b928      	cbnz	r0, 45336 <settings_line_dup_check_cb+0x78>
		val += len_read;
   4532a:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   4532c:	1aed      	subs	r5, r5, r3
		val += len_read;
   4532e:	4498      	add	r8, r3
		off += len_read;
   45330:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   45332:	d1e2      	bne.n	452fa <settings_line_dup_check_cb+0x3c>
   45334:	e7dc      	b.n	452f0 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   45336:	2300      	movs	r3, #0
   45338:	e7db      	b.n	452f2 <settings_line_dup_check_cb+0x34>

0004533a <get_len_cb>:
}
   4533a:	8980      	ldrh	r0, [r0, #12]
   4533c:	4770      	bx	lr

0004533e <write_handler>:
{
   4533e:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   45340:	6805      	ldr	r5, [r0, #0]
   45342:	6884      	ldr	r4, [r0, #8]
	return flash_area_write(entry_ctx->fap,
   45344:	6900      	ldr	r0, [r0, #16]
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   45346:	4421      	add	r1, r4
   45348:	682c      	ldr	r4, [r5, #0]
	return flash_area_write(entry_ctx->fap,
   4534a:	4421      	add	r1, r4
}
   4534c:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   4534e:	f7ff be97 	b.w	45080 <flash_area_write>

00045352 <read_handler>:
{
   45352:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   45354:	8984      	ldrh	r4, [r0, #12]
   45356:	428c      	cmp	r4, r1
   45358:	dd0f      	ble.n	4537a <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   4535a:	681d      	ldr	r5, [r3, #0]
   4535c:	440d      	add	r5, r1
   4535e:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   45360:	bf84      	itt	hi
   45362:	1a64      	subhi	r4, r4, r1
   45364:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   45366:	6804      	ldr	r4, [r0, #0]
   45368:	6885      	ldr	r5, [r0, #8]
   4536a:	6824      	ldr	r4, [r4, #0]
   4536c:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   4536e:	4421      	add	r1, r4
   45370:	681b      	ldr	r3, [r3, #0]
   45372:	6900      	ldr	r0, [r0, #16]
}
   45374:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   45376:	f7ff be66 	b.w	45046 <flash_area_read>
		*len = 0;
   4537a:	2000      	movs	r0, #0
}
   4537c:	bc30      	pop	{r4, r5}
		*len = 0;
   4537e:	6018      	str	r0, [r3, #0]
}
   45380:	4770      	bx	lr

00045382 <uart_poll_out>:
	api->poll_out(dev, out_char);
   45382:	6883      	ldr	r3, [r0, #8]
   45384:	685b      	ldr	r3, [r3, #4]
   45386:	4718      	bx	r3

00045388 <debug_hook_out_nop>:
}
   45388:	2000      	movs	r0, #0
   4538a:	4770      	bx	lr

0004538c <set_starting_state>:
{
   4538c:	b510      	push	{r4, lr}
	__asm__ volatile(
   4538e:	f04f 0320 	mov.w	r3, #32
   45392:	f3ef 8211 	mrs	r2, BASEPRI
   45396:	f383 8811 	msr	BASEPRI, r3
   4539a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   4539e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   453a0:	f003 0407 	and.w	r4, r3, #7
   453a4:	2c01      	cmp	r4, #1
   453a6:	d106      	bne.n	453b6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   453a8:	6001      	str	r1, [r0, #0]
	int err = 0;
   453aa:	2000      	movs	r0, #0
	__asm__ volatile(
   453ac:	f382 8811 	msr	BASEPRI, r2
   453b0:	f3bf 8f6f 	isb	sy
}
   453b4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   453b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   453ba:	428b      	cmp	r3, r1
		err = -EBUSY;
   453bc:	bf14      	ite	ne
   453be:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   453c2:	f06f 000f 	mvneq.w	r0, #15
   453c6:	e7f1      	b.n	453ac <set_starting_state+0x20>

000453c8 <set_on_state>:
	__asm__ volatile(
   453c8:	f04f 0320 	mov.w	r3, #32
   453cc:	f3ef 8211 	mrs	r2, BASEPRI
   453d0:	f383 8811 	msr	BASEPRI, r3
   453d4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   453d8:	6803      	ldr	r3, [r0, #0]
   453da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   453de:	f043 0302 	orr.w	r3, r3, #2
   453e2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   453e4:	f382 8811 	msr	BASEPRI, r2
   453e8:	f3bf 8f6f 	isb	sy
}
   453ec:	4770      	bx	lr

000453ee <onoff_started_callback>:
	return &data->mgr[type];
   453ee:	68c0      	ldr	r0, [r0, #12]
   453f0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   453f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   453f6:	2100      	movs	r1, #0
   453f8:	4710      	bx	r2

000453fa <api_stop>:
	return stop(dev, subsys, CTX_API);
   453fa:	2280      	movs	r2, #128	; 0x80
   453fc:	f7e1 b8d6 	b.w	265ac <stop>

00045400 <blocking_start_callback>:
	z_impl_k_sem_give(sem);
   45400:	4610      	mov	r0, r2
   45402:	f7fb ba5b 	b.w	408bc <z_impl_k_sem_give>

00045406 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   45406:	2000      	movs	r0, #0
   45408:	f7f8 bf3e 	b.w	3e288 <nrfx_clock_stop>

0004540c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   4540c:	2000      	movs	r0, #0
   4540e:	f7f8 bee5 	b.w	3e1dc <nrfx_clock_start>

00045412 <api_start>:
{
   45412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = set_starting_state(&subdata->flags, ctx);
   45414:	240c      	movs	r4, #12
   45416:	b2c9      	uxtb	r1, r1
   45418:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   4541a:	68c5      	ldr	r5, [r0, #12]
{
   4541c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   4541e:	f104 0048 	add.w	r0, r4, #72	; 0x48
   45422:	2180      	movs	r1, #128	; 0x80
   45424:	4428      	add	r0, r5
{
   45426:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   45428:	f7ff ffb0 	bl	4538c <set_starting_state>
	if (err < 0) {
   4542c:	2800      	cmp	r0, #0
   4542e:	db08      	blt.n	45442 <api_start+0x30>
	subdata->cb = data->cb;
   45430:	687b      	ldr	r3, [r7, #4]
   45432:	4425      	add	r5, r4
   45434:	642b      	str	r3, [r5, #64]	; 0x40
	subdata->user_data = data->user_data;
   45436:	68bb      	ldr	r3, [r7, #8]
   45438:	646b      	str	r3, [r5, #68]	; 0x44
	 get_sub_config(dev, type)->start();
   4543a:	6873      	ldr	r3, [r6, #4]
   4543c:	591b      	ldr	r3, [r3, r4]
   4543e:	4798      	blx	r3
	return 0;
   45440:	2000      	movs	r0, #0
}
   45442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00045444 <wdt_nrf_disable>:
}
   45444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   45448:	4770      	bx	lr

0004544a <wdt_nrf_feed>:
{
   4544a:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   4544c:	68c3      	ldr	r3, [r0, #12]
   4544e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   45452:	428b      	cmp	r3, r1
   45454:	db05      	blt.n	45462 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   45456:	6840      	ldr	r0, [r0, #4]
   45458:	b2c9      	uxtb	r1, r1
   4545a:	f7f9 f8ff 	bl	3e65c <nrfx_wdt_channel_feed>
	return 0;
   4545e:	2000      	movs	r0, #0
}
   45460:	bd08      	pop	{r3, pc}
		return -EINVAL;
   45462:	f06f 0015 	mvn.w	r0, #21
   45466:	e7fb      	b.n	45460 <wdt_nrf_feed+0x16>

00045468 <wdt_nrf_setup>:
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   45468:	f011 0f01 	tst.w	r1, #1
{
   4546c:	b538      	push	{r3, r4, r5, lr}
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_SLEEP;
   4546e:	bf0c      	ite	eq
   45470:	2309      	moveq	r3, #9
   45472:	2308      	movne	r3, #8
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   45474:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   45476:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   45478:	6825      	ldr	r5, [r4, #0]
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   4547a:	bf48      	it	mi
   4547c:	f003 0301 	andmi.w	r3, r3, #1
    p_reg->CONFIG = behaviour;
   45480:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   45484:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   45486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   4548a:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   4548c:	2300      	movs	r3, #0
   4548e:	03c8      	lsls	r0, r1, #15
   45490:	0c49      	lsrs	r1, r1, #17
   45492:	f7d7 fd13 	bl	1cebc <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   45496:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   4549a:	4620      	mov	r0, r4
   4549c:	f7f9 f860 	bl	3e560 <nrfx_wdt_enable>
}
   454a0:	2000      	movs	r0, #0
   454a2:	bd38      	pop	{r3, r4, r5, pc}

000454a4 <uart_fifo_read>:
	if (api->fifo_read) {
   454a4:	6883      	ldr	r3, [r0, #8]
   454a6:	699b      	ldr	r3, [r3, #24]
   454a8:	b103      	cbz	r3, 454ac <uart_fifo_read+0x8>
		return api->fifo_read(dev, rx_data, size);
   454aa:	4718      	bx	r3
}
   454ac:	4618      	mov	r0, r3
   454ae:	4770      	bx	lr

000454b0 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable) {
   454b0:	6883      	ldr	r3, [r0, #8]
   454b2:	6a1b      	ldr	r3, [r3, #32]
   454b4:	b103      	cbz	r3, 454b8 <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   454b6:	4718      	bx	r3
}
   454b8:	4770      	bx	lr

000454ba <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   454ba:	6883      	ldr	r3, [r0, #8]
   454bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   454be:	b103      	cbz	r3, 454c2 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   454c0:	4718      	bx	r3
}
   454c2:	4770      	bx	lr

000454c4 <z_impl_uart_irq_rx_disable>:
	if (api->irq_rx_disable) {
   454c4:	6883      	ldr	r3, [r0, #8]
   454c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   454c8:	b103      	cbz	r3, 454cc <z_impl_uart_irq_rx_disable+0x8>
		api->irq_rx_disable(dev);
   454ca:	4718      	bx	r3
}
   454cc:	4770      	bx	lr

000454ce <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   454ce:	4770      	bx	lr

000454d0 <sys_clock_disable>:
   454d0:	4770      	bx	lr

000454d2 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   454d2:	428b      	cmp	r3, r1
{
   454d4:	b538      	push	{r3, r4, r5, lr}
   454d6:	4615      	mov	r5, r2
   454d8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   454da:	d805      	bhi.n	454e8 <_copy+0x16>
   454dc:	461a      	mov	r2, r3
   454de:	4629      	mov	r1, r5
   454e0:	f002 fe52 	bl	48188 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   454e4:	4620      	mov	r0, r4
   454e6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   454e8:	2400      	movs	r4, #0
   454ea:	e7fb      	b.n	454e4 <_copy+0x12>

000454ec <_set>:
__ssp_bos_icheck3(memset, void *, int)
   454ec:	f002 be6c 	b.w	481c8 <memset>

000454f0 <tc_sha256_update>:
{
   454f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   454f4:	460d      	mov	r5, r1
	if (s == (TCSha256State_t) 0 ||
   454f6:	4604      	mov	r4, r0
   454f8:	b110      	cbz	r0, 45500 <tc_sha256_update+0x10>
   454fa:	b319      	cbz	r1, 45544 <tc_sha256_update+0x54>
	} else if (datalen == 0) {
   454fc:	b912      	cbnz	r2, 45504 <tc_sha256_update+0x14>
		return TC_CRYPTO_SUCCESS;
   454fe:	2001      	movs	r0, #1
}
   45500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			s->leftover_offset = 0;
   45504:	f04f 0800 	mov.w	r8, #0
   45508:	188e      	adds	r6, r1, r2
			compress(s->iv, s->leftover);
   4550a:	f100 0728 	add.w	r7, r0, #40	; 0x28
	while (datalen-- > 0) {
   4550e:	42ae      	cmp	r6, r5
   45510:	d0f5      	beq.n	454fe <tc_sha256_update+0xe>
		s->leftover[s->leftover_offset++] = *(data++);
   45512:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   45514:	1c5a      	adds	r2, r3, #1
   45516:	66a2      	str	r2, [r4, #104]	; 0x68
   45518:	f815 1b01 	ldrb.w	r1, [r5], #1
   4551c:	4423      	add	r3, r4
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   4551e:	2a3f      	cmp	r2, #63	; 0x3f
		s->leftover[s->leftover_offset++] = *(data++);
   45520:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   45524:	d9f3      	bls.n	4550e <tc_sha256_update+0x1e>
			compress(s->iv, s->leftover);
   45526:	4639      	mov	r1, r7
   45528:	4620      	mov	r0, r4
   4552a:	f7e1 ff4d 	bl	273c8 <compress>
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   4552e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   45532:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   45536:	f142 0200 	adc.w	r2, r2, #0
			s->leftover_offset = 0;
   4553a:	f8c4 8068 	str.w	r8, [r4, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   4553e:	e9c4 3208 	strd	r3, r2, [r4, #32]
   45542:	e7e4      	b.n	4550e <tc_sha256_update+0x1e>
		return TC_CRYPTO_FAIL;
   45544:	4608      	mov	r0, r1
   45546:	e7db      	b.n	45500 <tc_sha256_update+0x10>

00045548 <tc_sha256_final>:
{
   45548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4554a:	460c      	mov	r4, r1
	if (digest == (uint8_t *) 0 ||
   4554c:	4605      	mov	r5, r0
   4554e:	2800      	cmp	r0, #0
   45550:	d054      	beq.n	455fc <tc_sha256_final+0xb4>
   45552:	2900      	cmp	r1, #0
   45554:	d053      	beq.n	455fe <tc_sha256_final+0xb6>
	s->bits_hashed += (s->leftover_offset << 3);
   45556:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   4555a:	6e89      	ldr	r1, [r1, #104]	; 0x68
   4555c:	00c8      	lsls	r0, r1, #3
   4555e:	1816      	adds	r6, r2, r0
   45560:	f143 0700 	adc.w	r7, r3, #0
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   45564:	2380      	movs	r3, #128	; 0x80
   45566:	1c48      	adds	r0, r1, #1
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   45568:	2838      	cmp	r0, #56	; 0x38
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   4556a:	4421      	add	r1, r4
	s->bits_hashed += (s->leftover_offset << 3);
   4556c:	e9c4 6708 	strd	r6, r7, [r4, #32]
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   45570:	66a0      	str	r0, [r4, #104]	; 0x68
   45572:	f104 0628 	add.w	r6, r4, #40	; 0x28
   45576:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   4557a:	d90b      	bls.n	45594 <tc_sha256_final+0x4c>
		_set(s->leftover + s->leftover_offset, 0x00,
   4557c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   45580:	2100      	movs	r1, #0
   45582:	4430      	add	r0, r6
   45584:	f7ff ffb2 	bl	454ec <_set>
		compress(s->iv, s->leftover);
   45588:	4631      	mov	r1, r6
   4558a:	4620      	mov	r0, r4
   4558c:	f7e1 ff1c 	bl	273c8 <compress>
		s->leftover_offset = 0;
   45590:	2300      	movs	r3, #0
   45592:	66a3      	str	r3, [r4, #104]	; 0x68
	_set(s->leftover + s->leftover_offset, 0x00,
   45594:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   45596:	2100      	movs	r1, #0
   45598:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   4559c:	4430      	add	r0, r6
   4559e:	f7ff ffa5 	bl	454ec <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   455a2:	6a23      	ldr	r3, [r4, #32]
	compress(s->iv, s->leftover);
   455a4:	4631      	mov	r1, r6
   455a6:	ba1a      	rev	r2, r3
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   455a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   455aa:	6662      	str	r2, [r4, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   455ac:	0a1a      	lsrs	r2, r3, #8
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   455ae:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   455b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   455b6:	0c1a      	lsrs	r2, r3, #16
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   455b8:	0e1b      	lsrs	r3, r3, #24
   455ba:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	compress(s->iv, s->leftover);
   455be:	4620      	mov	r0, r4
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   455c0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
	compress(s->iv, s->leftover);
   455c4:	f7e1 ff00 	bl	273c8 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   455c8:	1d2b      	adds	r3, r5, #4
   455ca:	1f21      	subs	r1, r4, #4
   455cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
		unsigned int t = *((unsigned int *) &s->iv[i]);
   455d0:	f851 2f04 	ldr.w	r2, [r1, #4]!
		*digest++ = (uint8_t)(t >> 24);
   455d4:	3304      	adds	r3, #4
   455d6:	0e15      	lsrs	r5, r2, #24
   455d8:	f803 5c08 	strb.w	r5, [r3, #-8]
		*digest++ = (uint8_t)(t >> 16);
   455dc:	0c15      	lsrs	r5, r2, #16
   455de:	f803 5c07 	strb.w	r5, [r3, #-7]
		*digest++ = (uint8_t)(t >> 8);
   455e2:	0a15      	lsrs	r5, r2, #8
   455e4:	f803 5c06 	strb.w	r5, [r3, #-6]
		*digest++ = (uint8_t)(t);
   455e8:	f803 2c05 	strb.w	r2, [r3, #-5]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   455ec:	4283      	cmp	r3, r0
   455ee:	d1ef      	bne.n	455d0 <tc_sha256_final+0x88>
	_set(s, 0, sizeof(*s));
   455f0:	4620      	mov	r0, r4
   455f2:	2270      	movs	r2, #112	; 0x70
   455f4:	2100      	movs	r1, #0
   455f6:	f7ff ff79 	bl	454ec <_set>
	return TC_CRYPTO_SUCCESS;
   455fa:	2001      	movs	r0, #1
}
   455fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   455fe:	4608      	mov	r0, r1
   45600:	e7fc      	b.n	455fc <tc_sha256_final+0xb4>

00045602 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   45602:	b530      	push	{r4, r5, lr}
   45604:	1e43      	subs	r3, r0, #1
   45606:	188d      	adds	r5, r1, r2
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   45608:	42a9      	cmp	r1, r5
   4560a:	d106      	bne.n	4561a <rekey+0x18>
		key[i] = inner_pad ^ new_key[i];
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   4560c:	2136      	movs	r1, #54	; 0x36
   4560e:	245c      	movs	r4, #92	; 0x5c
   45610:	4402      	add	r2, r0
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   45612:	1a13      	subs	r3, r2, r0
   45614:	2b3f      	cmp	r3, #63	; 0x3f
   45616:	d90c      	bls.n	45632 <rekey+0x30>
	}
}
   45618:	bd30      	pop	{r4, r5, pc}
		key[i] = inner_pad ^ new_key[i];
   4561a:	780c      	ldrb	r4, [r1, #0]
   4561c:	f084 0436 	eor.w	r4, r4, #54	; 0x36
   45620:	f803 4f01 	strb.w	r4, [r3, #1]!
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   45624:	f811 4b01 	ldrb.w	r4, [r1], #1
   45628:	f084 045c 	eor.w	r4, r4, #92	; 0x5c
   4562c:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
   45630:	e7ea      	b.n	45608 <rekey+0x6>
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   45632:	f802 1b01 	strb.w	r1, [r2], #1
   45636:	f882 403f 	strb.w	r4, [r2, #63]	; 0x3f
   4563a:	e7ea      	b.n	45612 <rekey+0x10>

0004563c <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
   4563c:	b5f0      	push	{r4, r5, r6, r7, lr}
   4563e:	460e      	mov	r6, r1
   45640:	b0cd      	sub	sp, #308	; 0x134
   45642:	4614      	mov	r4, r2
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   45644:	4605      	mov	r5, r0
   45646:	b1b8      	cbz	r0, 45678 <tc_hmac_set_key+0x3c>
   45648:	b341      	cbz	r1, 4569c <tc_hmac_set_key+0x60>
	    key == (const uint8_t *) 0 ||
   4564a:	b34a      	cbz	r2, 456a0 <tc_hmac_set_key+0x64>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   4564c:	2a40      	cmp	r2, #64	; 0x40
   4564e:	f100 0770 	add.w	r7, r0, #112	; 0x70
   45652:	d813      	bhi.n	4567c <tc_hmac_set_key+0x40>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   45654:	a810      	add	r0, sp, #64	; 0x40
   45656:	f7e1 ff93 	bl	27580 <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   4565a:	4622      	mov	r2, r4
   4565c:	4669      	mov	r1, sp
   4565e:	a810      	add	r0, sp, #64	; 0x40
   45660:	f7ff ff46 	bl	454f0 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   45664:	a910      	add	r1, sp, #64	; 0x40
   45666:	a834      	add	r0, sp, #208	; 0xd0
   45668:	f7ff ff6e 	bl	45548 <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   4566c:	4622      	mov	r2, r4
   4566e:	4631      	mov	r1, r6
	} else {
		(void)tc_sha256_init(&ctx->hash_state);
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
				      &ctx->hash_state);
		rekey(ctx->key,
   45670:	4638      	mov	r0, r7
   45672:	f7ff ffc6 	bl	45602 <rekey>
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   45676:	2001      	movs	r0, #1
}
   45678:	b04d      	add	sp, #308	; 0x134
   4567a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(void)tc_sha256_init(&ctx->hash_state);
   4567c:	f7e1 ff80 	bl	27580 <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   45680:	4622      	mov	r2, r4
   45682:	4631      	mov	r1, r6
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   45684:	f105 0490 	add.w	r4, r5, #144	; 0x90
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   45688:	4628      	mov	r0, r5
   4568a:	f7ff ff31 	bl	454f0 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   4568e:	4629      	mov	r1, r5
   45690:	4620      	mov	r0, r4
   45692:	f7ff ff59 	bl	45548 <tc_sha256_final>
		rekey(ctx->key,
   45696:	2220      	movs	r2, #32
   45698:	4621      	mov	r1, r4
   4569a:	e7e9      	b.n	45670 <tc_hmac_set_key+0x34>
		return TC_CRYPTO_FAIL;
   4569c:	4608      	mov	r0, r1
   4569e:	e7eb      	b.n	45678 <tc_hmac_set_key+0x3c>
   456a0:	4610      	mov	r0, r2
   456a2:	e7e9      	b.n	45678 <tc_hmac_set_key+0x3c>

000456a4 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{
   456a4:	b510      	push	{r4, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   456a6:	4604      	mov	r4, r0
   456a8:	b140      	cbz	r0, 456bc <tc_hmac_init+0x18>
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   456aa:	f7e1 ff69 	bl	27580 <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   456ae:	2240      	movs	r2, #64	; 0x40
   456b0:	f104 0170 	add.w	r1, r4, #112	; 0x70
   456b4:	4620      	mov	r0, r4
   456b6:	f7ff ff1b 	bl	454f0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   456ba:	2001      	movs	r0, #1
}
   456bc:	bd10      	pop	{r4, pc}

000456be <tc_hmac_update>:

int tc_hmac_update(TCHmacState_t ctx,
		   const void *data,
		   unsigned int data_length)
{
   456be:	b508      	push	{r3, lr}

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   456c0:	b110      	cbz	r0, 456c8 <tc_hmac_update+0xa>
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   456c2:	f7ff ff15 	bl	454f0 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   456c6:	2001      	movs	r0, #1
}
   456c8:	bd08      	pop	{r3, pc}

000456ca <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{
   456ca:	b570      	push	{r4, r5, r6, lr}
   456cc:	460e      	mov	r6, r1
   456ce:	4614      	mov	r4, r2

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   456d0:	4605      	mov	r5, r0
   456d2:	b1f0      	cbz	r0, 45712 <tc_hmac_final+0x48>
   456d4:	2920      	cmp	r1, #32
   456d6:	d11c      	bne.n	45712 <tc_hmac_final+0x48>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   456d8:	b1ea      	cbz	r2, 45716 <tc_hmac_final+0x4c>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   456da:	4611      	mov	r1, r2
   456dc:	f7ff ff34 	bl	45548 <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   456e0:	4620      	mov	r0, r4
   456e2:	f7e1 ff4d 	bl	27580 <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   456e6:	2240      	movs	r2, #64	; 0x40
   456e8:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   456ec:	4620      	mov	r0, r4
   456ee:	f7ff feff 	bl	454f0 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   456f2:	4632      	mov	r2, r6
   456f4:	4629      	mov	r1, r5
   456f6:	4620      	mov	r0, r4
   456f8:	f7ff fefa 	bl	454f0 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   456fc:	4621      	mov	r1, r4
   456fe:	4628      	mov	r0, r5
   45700:	f7ff ff22 	bl	45548 <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   45704:	4620      	mov	r0, r4
   45706:	22f0      	movs	r2, #240	; 0xf0
   45708:	2100      	movs	r1, #0
   4570a:	f7ff feef 	bl	454ec <_set>

	return TC_CRYPTO_SUCCESS;
   4570e:	2001      	movs	r0, #1
}
   45710:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   45712:	2000      	movs	r0, #0
   45714:	e7fc      	b.n	45710 <tc_hmac_final+0x46>
   45716:	4610      	mov	r0, r2
   45718:	e7fa      	b.n	45710 <tc_hmac_final+0x46>

0004571a <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   4571a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4571e:	4604      	mov	r4, r0
	const uint8_t separator0 = 0x00;
	const uint8_t separator1 = 0x01;
   45720:	f04f 0b01 	mov.w	fp, #1
{
   45724:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   45726:	2300      	movs	r3, #0
{
   45728:	4689      	mov	r9, r1

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   4572a:	f100 06f0 	add.w	r6, r0, #240	; 0xf0
   4572e:	4631      	mov	r1, r6
{
   45730:	4692      	mov	sl, r2
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   45732:	2220      	movs	r2, #32
	const uint8_t separator0 = 0x00;
   45734:	f88d 3006 	strb.w	r3, [sp, #6]
{
   45738:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	const uint8_t separator1 = 0x01;
   4573c:	f88d b007 	strb.w	fp, [sp, #7]

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   45740:	f504 7588 	add.w	r5, r4, #272	; 0x110
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   45744:	f7ff ff7a 	bl	4563c <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   45748:	4620      	mov	r0, r4
   4574a:	f7ff ffab 	bl	456a4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   4574e:	2220      	movs	r2, #32
   45750:	4629      	mov	r1, r5
   45752:	4620      	mov	r0, r4
   45754:	f7ff ffb3 	bl	456be <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   45758:	465a      	mov	r2, fp
   4575a:	f10d 0106 	add.w	r1, sp, #6
   4575e:	4620      	mov	r0, r4
   45760:	f7ff ffad 	bl	456be <tc_hmac_update>

	if (data && datalen)
   45764:	f1b9 0f00 	cmp.w	r9, #0
   45768:	d007      	beq.n	4577a <update+0x60>
   4576a:	f1ba 0f00 	cmp.w	sl, #0
   4576e:	d004      	beq.n	4577a <update+0x60>
		(void)tc_hmac_update(&prng->h, data, datalen);
   45770:	4652      	mov	r2, sl
   45772:	4649      	mov	r1, r9
   45774:	4620      	mov	r0, r4
   45776:	f7ff ffa2 	bl	456be <tc_hmac_update>
	if (additional_data && additional_datalen)
   4577a:	b13f      	cbz	r7, 4578c <update+0x72>
   4577c:	f1b8 0f00 	cmp.w	r8, #0
   45780:	d004      	beq.n	4578c <update+0x72>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   45782:	4642      	mov	r2, r8
   45784:	4639      	mov	r1, r7
   45786:	4620      	mov	r0, r4
   45788:	f7ff ff99 	bl	456be <tc_hmac_update>

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   4578c:	4622      	mov	r2, r4
   4578e:	2120      	movs	r1, #32
   45790:	4630      	mov	r0, r6
   45792:	f7ff ff9a 	bl	456ca <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   45796:	2220      	movs	r2, #32
   45798:	4631      	mov	r1, r6
   4579a:	4620      	mov	r0, r4
   4579c:	f7ff ff4e 	bl	4563c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   457a0:	4620      	mov	r0, r4
   457a2:	f7ff ff7f 	bl	456a4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   457a6:	2220      	movs	r2, #32
   457a8:	4629      	mov	r1, r5
   457aa:	4620      	mov	r0, r4
   457ac:	f7ff ff87 	bl	456be <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   457b0:	4622      	mov	r2, r4
   457b2:	2120      	movs	r1, #32
   457b4:	4628      	mov	r0, r5
   457b6:	f7ff ff88 	bl	456ca <tc_hmac_final>

	if (data == 0 || datalen == 0)
   457ba:	f1b9 0f00 	cmp.w	r9, #0
   457be:	d03a      	beq.n	45836 <update+0x11c>
   457c0:	f1ba 0f00 	cmp.w	sl, #0
   457c4:	d037      	beq.n	45836 <update+0x11c>
		return;

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   457c6:	2220      	movs	r2, #32
   457c8:	4631      	mov	r1, r6
   457ca:	4620      	mov	r0, r4
   457cc:	f7ff ff36 	bl	4563c <tc_hmac_set_key>

	/* use current state, e and separator 1 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   457d0:	4620      	mov	r0, r4
   457d2:	f7ff ff67 	bl	456a4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   457d6:	2220      	movs	r2, #32
   457d8:	4629      	mov	r1, r5
   457da:	4620      	mov	r0, r4
   457dc:	f7ff ff6f 	bl	456be <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   457e0:	2201      	movs	r2, #1
   457e2:	f10d 0107 	add.w	r1, sp, #7
   457e6:	4620      	mov	r0, r4
   457e8:	f7ff ff69 	bl	456be <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   457ec:	4652      	mov	r2, sl
   457ee:	4649      	mov	r1, r9
   457f0:	4620      	mov	r0, r4
   457f2:	f7ff ff64 	bl	456be <tc_hmac_update>
	if (additional_data && additional_datalen)
   457f6:	b13f      	cbz	r7, 45808 <update+0xee>
   457f8:	f1b8 0f00 	cmp.w	r8, #0
   457fc:	d004      	beq.n	45808 <update+0xee>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   457fe:	4642      	mov	r2, r8
   45800:	4639      	mov	r1, r7
   45802:	4620      	mov	r0, r4
   45804:	f7ff ff5b 	bl	456be <tc_hmac_update>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   45808:	4622      	mov	r2, r4
   4580a:	2120      	movs	r1, #32
   4580c:	4630      	mov	r0, r6
   4580e:	f7ff ff5c 	bl	456ca <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   45812:	2220      	movs	r2, #32
   45814:	4631      	mov	r1, r6
   45816:	4620      	mov	r0, r4
   45818:	f7ff ff10 	bl	4563c <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   4581c:	4620      	mov	r0, r4
   4581e:	f7ff ff41 	bl	456a4 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   45822:	2220      	movs	r2, #32
   45824:	4629      	mov	r1, r5
   45826:	4620      	mov	r0, r4
   45828:	f7ff ff49 	bl	456be <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   4582c:	4622      	mov	r2, r4
   4582e:	2120      	movs	r1, #32
   45830:	4628      	mov	r0, r5
   45832:	f7ff ff4a 	bl	456ca <tc_hmac_final>
}
   45836:	b003      	add	sp, #12
   45838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0004583c <tc_hmac_prng_init>:

int tc_hmac_prng_init(TCHmacPrng_t prng,
		      const uint8_t *personalization,
		      unsigned int plen)
{
   4583c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4583e:	460c      	mov	r4, r1
   45840:	4617      	mov	r7, r2

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   45842:	4605      	mov	r5, r0
   45844:	b1b0      	cbz	r0, 45874 <tc_hmac_prng_init+0x38>
	    personalization == (uint8_t *) 0 ||
   45846:	b1b9      	cbz	r1, 45878 <tc_hmac_prng_init+0x3c>

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
	_set(prng->v, 0x01, sizeof(prng->v));

	update(prng, personalization, plen, 0, 0);
   45848:	2600      	movs	r6, #0
	_set(prng->key, 0x00, sizeof(prng->key));
   4584a:	2220      	movs	r2, #32
   4584c:	2100      	movs	r1, #0
   4584e:	30f0      	adds	r0, #240	; 0xf0
   45850:	f7ff fe4c 	bl	454ec <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   45854:	2220      	movs	r2, #32
   45856:	2101      	movs	r1, #1
   45858:	f505 7088 	add.w	r0, r5, #272	; 0x110
   4585c:	f7ff fe46 	bl	454ec <_set>
	update(prng, personalization, plen, 0, 0);
   45860:	4628      	mov	r0, r5
   45862:	9600      	str	r6, [sp, #0]
   45864:	4633      	mov	r3, r6
   45866:	463a      	mov	r2, r7
   45868:	4621      	mov	r1, r4
   4586a:	f7ff ff56 	bl	4571a <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;

	return TC_CRYPTO_SUCCESS;
   4586e:	2001      	movs	r0, #1
	prng->countdown = 0;
   45870:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
}
   45874:	b003      	add	sp, #12
   45876:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   45878:	4608      	mov	r0, r1
   4587a:	e7fb      	b.n	45874 <tc_hmac_prng_init+0x38>

0004587c <tc_hmac_prng_reseed>:
int tc_hmac_prng_reseed(TCHmacPrng_t prng,
			const uint8_t *seed,
			unsigned int seedlen,
			const uint8_t *additional_input,
			unsigned int additionallen)
{
   4587c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4587e:	9c08      	ldr	r4, [sp, #32]

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   45880:	4606      	mov	r6, r0
   45882:	b180      	cbz	r0, 458a6 <tc_hmac_prng_reseed+0x2a>
   45884:	b179      	cbz	r1, 458a6 <tc_hmac_prng_reseed+0x2a>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   45886:	2a1f      	cmp	r2, #31
   45888:	d90d      	bls.n	458a6 <tc_hmac_prng_reseed+0x2a>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   4588a:	b153      	cbz	r3, 458a2 <tc_hmac_prng_reseed+0x26>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   4588c:	b16c      	cbz	r4, 458aa <tc_hmac_prng_reseed+0x2e>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   4588e:	9400      	str	r4, [sp, #0]
		}
	} else {
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
   45890:	f7ff ff43 	bl	4571a <update>
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   45894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

	return TC_CRYPTO_SUCCESS;
   45898:	2001      	movs	r0, #1
	prng->countdown = MAX_GENS;
   4589a:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
}
   4589e:	b003      	add	sp, #12
   458a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		update(prng, seed, seedlen, 0, 0);
   458a2:	9300      	str	r3, [sp, #0]
   458a4:	e7f4      	b.n	45890 <tc_hmac_prng_reseed+0x14>
		return TC_CRYPTO_FAIL;
   458a6:	2000      	movs	r0, #0
   458a8:	e7f9      	b.n	4589e <tc_hmac_prng_reseed+0x22>
   458aa:	4620      	mov	r0, r4
   458ac:	e7f7      	b.n	4589e <tc_hmac_prng_reseed+0x22>

000458ae <tc_hmac_prng_generate>:

int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
   458ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   458b2:	460d      	mov	r5, r1
   458b4:	4614      	mov	r4, r2
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   458b6:	4680      	mov	r8, r0
   458b8:	b3d8      	cbz	r0, 45932 <tc_hmac_prng_generate+0x84>
   458ba:	b3d2      	cbz	r2, 45932 <tc_hmac_prng_generate+0x84>
	    prng == (TCHmacPrng_t) 0 ||
   458bc:	1e4b      	subs	r3, r1, #1
   458be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
   458c2:	d236      	bcs.n	45932 <tc_hmac_prng_generate+0x84>
	    outlen == 0 ||
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   458c4:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   458c8:	b3ab      	cbz	r3, 45936 <tc_hmac_prng_generate+0x88>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   458ca:	3b01      	subs	r3, #1
   458cc:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   458d0:	f102 09f0 	add.w	r9, r2, #240	; 0xf0

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   458d4:	f502 7788 	add.w	r7, r2, #272	; 0x110
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   458d8:	2220      	movs	r2, #32
   458da:	4649      	mov	r1, r9
   458dc:	4620      	mov	r0, r4
   458de:	f7ff fead 	bl	4563c <tc_hmac_set_key>
		(void)tc_hmac_init(&prng->h);
   458e2:	4620      	mov	r0, r4
   458e4:	f7ff fede 	bl	456a4 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   458e8:	2220      	movs	r2, #32
   458ea:	4639      	mov	r1, r7
   458ec:	4620      	mov	r0, r4
   458ee:	f7ff fee6 	bl	456be <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   458f2:	4622      	mov	r2, r4
   458f4:	2120      	movs	r1, #32
   458f6:	4638      	mov	r0, r7
   458f8:	f7ff fee7 	bl	456ca <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   458fc:	2d20      	cmp	r5, #32
   458fe:	462e      	mov	r6, r5
   45900:	bf28      	it	cs
   45902:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   45904:	4640      	mov	r0, r8
   45906:	4633      	mov	r3, r6
   45908:	463a      	mov	r2, r7
   4590a:	4631      	mov	r1, r6
   4590c:	f7ff fde1 	bl	454d2 <_copy>

		out += bufferlen;
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   45910:	2d20      	cmp	r5, #32
   45912:	bf38      	it	cc
   45914:	2520      	movcc	r5, #32
	while (outlen != 0) {
   45916:	3d20      	subs	r5, #32
		out += bufferlen;
   45918:	44b0      	add	r8, r6
	while (outlen != 0) {
   4591a:	d1dd      	bne.n	458d8 <tc_hmac_prng_generate+0x2a>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   4591c:	4620      	mov	r0, r4
   4591e:	9500      	str	r5, [sp, #0]
   45920:	462b      	mov	r3, r5
   45922:	462a      	mov	r2, r5
   45924:	4629      	mov	r1, r5
   45926:	f7ff fef8 	bl	4571a <update>

	return TC_CRYPTO_SUCCESS;
   4592a:	2001      	movs	r0, #1
}
   4592c:	b003      	add	sp, #12
   4592e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   45932:	2000      	movs	r0, #0
   45934:	e7fa      	b.n	4592c <tc_hmac_prng_generate+0x7e>
		return TC_HMAC_PRNG_RESEED_REQ;
   45936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4593a:	e7f7      	b.n	4592c <tc_hmac_prng_generate+0x7e>

0004593c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   4593c:	2100      	movs	r1, #0
   4593e:	2001      	movs	r0, #1
   45940:	f7e1 bf8c 	b.w	2785c <z_arm_fatal_error>

00045944 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   45944:	6e83      	ldr	r3, [r0, #104]	; 0x68
   45946:	f383 880b 	msr	PSPLIM, r3
}
   4594a:	4770      	bx	lr

0004594c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   4594c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   4594e:	6800      	ldr	r0, [r0, #0]
   45950:	f7e1 bf84 	b.w	2785c <z_arm_fatal_error>

00045954 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   45954:	b508      	push	{r3, lr}
	handler();
   45956:	f7e2 f815 	bl	27984 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   4595a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   4595e:	f7e2 bb65 	b.w	2802c <z_arm_exc_exit>

00045962 <mpu_configure_region>:
{
   45962:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   45964:	684b      	ldr	r3, [r1, #4]
{
   45966:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   45968:	680c      	ldr	r4, [r1, #0]
	p_attr->rbar = attr->rbar &
   4596a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   4596e:	890d      	ldrh	r5, [r1, #8]
   45970:	9400      	str	r4, [sp, #0]
	p_attr->mair_idx = attr->mair_idx;
   45972:	8949      	ldrh	r1, [r1, #10]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   45974:	f024 041f 	bic.w	r4, r4, #31
   45978:	3b01      	subs	r3, #1
	p_attr->rbar = attr->rbar &
   4597a:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   4597e:	4423      	add	r3, r4
	p_attr->mair_idx = attr->mair_idx;
   45980:	f361 1247 	bfi	r2, r1, #5, #3
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   45984:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   45988:	4669      	mov	r1, sp
	p_attr->mair_idx = attr->mair_idx;
   4598a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   4598e:	9303      	str	r3, [sp, #12]
   45990:	f7e2 fbe6 	bl	28160 <region_allocate_and_init>
}
   45994:	b005      	add	sp, #20
   45996:	bd30      	pop	{r4, r5, pc}

00045998 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   45998:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   4599c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   459a0:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   459a2:	bf08      	it	eq
   459a4:	f06f 0015 	mvneq.w	r0, #21
   459a8:	4770      	bx	lr

000459aa <_stdout_hook_default>:
}
   459aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   459ae:	4770      	bx	lr

000459b0 <_stdin_hook_default>:
}
   459b0:	2000      	movs	r0, #0
   459b2:	4770      	bx	lr

000459b4 <_read>:
{
   459b4:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   459b6:	4611      	mov	r1, r2
   459b8:	f7e2 bdb8 	b.w	2852c <z_impl_zephyr_read_stdin>

000459bc <_write>:
{
   459bc:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   459be:	4611      	mov	r1, r2
   459c0:	f7e2 bdc8 	b.w	28554 <z_impl_zephyr_write_stdout>

000459c4 <_close>:
   459c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   459c8:	4770      	bx	lr

000459ca <_lseek>:
}
   459ca:	2000      	movs	r0, #0
   459cc:	4770      	bx	lr

000459ce <_isatty>:
}
   459ce:	2001      	movs	r0, #1
   459d0:	4770      	bx	lr

000459d2 <_kill>:
}
   459d2:	2000      	movs	r0, #0
   459d4:	4770      	bx	lr

000459d6 <_getpid>:
}
   459d6:	2000      	movs	r0, #0
   459d8:	4770      	bx	lr

000459da <_fstat>:
	st->st_mode = S_IFCHR;
   459da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   459de:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   459e0:	604b      	str	r3, [r1, #4]
}
   459e2:	4770      	bx	lr

000459e4 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   459e4:	f7f8 bed4 	b.w	3e790 <z_impl_z_errno>

000459e8 <hci_vendor_event>:
}
   459e8:	4770      	bx	lr

000459ea <atomic_and>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   459ea:	e8d0 3fef 	ldaex	r3, [r0]
   459ee:	ea03 0201 	and.w	r2, r3, r1
   459f2:	e8c0 2fec 	stlex	ip, r2, [r0]
   459f6:	f1bc 0f00 	cmp.w	ip, #0
   459fa:	d1f6      	bne.n	459ea <atomic_and>
}
   459fc:	4618      	mov	r0, r3
   459fe:	4770      	bx	lr

00045a00 <atomic_set_bit_to>:
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a00:	2301      	movs	r3, #1
{
   45a02:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   45a04:	f001 041f 	and.w	r4, r1, #31
   45a08:	0949      	lsrs	r1, r1, #5
   45a0a:	40a3      	lsls	r3, r4

	if (val) {
   45a0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   45a10:	b14a      	cbz	r2, 45a26 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   45a12:	e8d0 2fef 	ldaex	r2, [r0]
   45a16:	431a      	orrs	r2, r3
   45a18:	e8c0 2fe1 	stlex	r1, r2, [r0]
   45a1c:	2900      	cmp	r1, #0
   45a1e:	d1f8      	bne.n	45a12 <atomic_set_bit_to+0x12>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   45a20:	f85d 4b04 	ldr.w	r4, [sp], #4
   45a24:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45a26:	43d9      	mvns	r1, r3
}
   45a28:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   45a2c:	f7ff bfdd 	b.w	459ea <atomic_and>

00045a30 <bt_addr_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   45a30:	680b      	ldr	r3, [r1, #0]
   45a32:	6003      	str	r3, [r0, #0]
   45a34:	888b      	ldrh	r3, [r1, #4]
   45a36:	8083      	strh	r3, [r0, #4]
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   45a38:	4770      	bx	lr

00045a3a <bt_addr_le_copy>:
   45a3a:	680b      	ldr	r3, [r1, #0]
   45a3c:	6003      	str	r3, [r0, #0]
   45a3e:	888b      	ldrh	r3, [r1, #4]
   45a40:	8083      	strh	r3, [r0, #4]
   45a42:	798b      	ldrb	r3, [r1, #6]
   45a44:	7183      	strb	r3, [r0, #6]

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
}
   45a46:	4770      	bx	lr

00045a48 <bt_addr_from_str>:
{
   45a48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   45a4c:	4606      	mov	r6, r0
   45a4e:	460f      	mov	r7, r1
	if (strlen(str) != 17U) {
   45a50:	f7d7 fc08 	bl	1d264 <strlen>
   45a54:	2811      	cmp	r0, #17
   45a56:	d114      	bne.n	45a82 <bt_addr_from_str+0x3a>
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   45a58:	2405      	movs	r4, #5
		if (!(j % 3) && (*str != ':')) {
   45a5a:	f04f 0803 	mov.w	r8, #3
   45a5e:	1e75      	subs	r5, r6, #1
   45a60:	f1c6 0602 	rsb	r6, r6, #2
   45a64:	1972      	adds	r2, r6, r5
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   45a66:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   45a6a:	b910      	cbnz	r0, 45a72 <bt_addr_from_str+0x2a>
}
   45a6c:	b002      	add	sp, #8
   45a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(j % 3) && (*str != ':')) {
   45a72:	fb92 f3f8 	sdiv	r3, r2, r8
   45a76:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   45a7a:	429a      	cmp	r2, r3
   45a7c:	d104      	bne.n	45a88 <bt_addr_from_str+0x40>
   45a7e:	283a      	cmp	r0, #58	; 0x3a
   45a80:	d004      	beq.n	45a8c <bt_addr_from_str+0x44>
		return -EINVAL;
   45a82:	f06f 0015 	mvn.w	r0, #21
   45a86:	e7f1      	b.n	45a6c <bt_addr_from_str+0x24>
		} else if (*str == ':') {
   45a88:	283a      	cmp	r0, #58	; 0x3a
   45a8a:	d101      	bne.n	45a90 <bt_addr_from_str+0x48>
			i--;
   45a8c:	3c01      	subs	r4, #1
			continue;
   45a8e:	e7e9      	b.n	45a64 <bt_addr_from_str+0x1c>
		addr->val[i] = addr->val[i] << 4;
   45a90:	5d3b      	ldrb	r3, [r7, r4]
		if (char2hex(*str, &tmp) < 0) {
   45a92:	f10d 0107 	add.w	r1, sp, #7
		addr->val[i] = addr->val[i] << 4;
   45a96:	011b      	lsls	r3, r3, #4
   45a98:	553b      	strb	r3, [r7, r4]
		if (char2hex(*str, &tmp) < 0) {
   45a9a:	7828      	ldrb	r0, [r5, #0]
   45a9c:	f7fe fac3 	bl	44026 <char2hex>
   45aa0:	2800      	cmp	r0, #0
   45aa2:	dbee      	blt.n	45a82 <bt_addr_from_str+0x3a>
		addr->val[i] |= tmp;
   45aa4:	5d3b      	ldrb	r3, [r7, r4]
   45aa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   45aaa:	4313      	orrs	r3, r2
   45aac:	553b      	strb	r3, [r7, r4]
   45aae:	e7d9      	b.n	45a64 <bt_addr_from_str+0x1c>

00045ab0 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   45ab0:	2301      	movs	r3, #1
{
   45ab2:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   45ab4:	2106      	movs	r1, #6
{
   45ab6:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   45ab8:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   45abc:	f7e3 fcb8 	bl	29430 <bt_rand>
	if (err) {
   45ac0:	b918      	cbnz	r0, 45aca <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   45ac2:	79a3      	ldrb	r3, [r4, #6]
   45ac4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   45ac8:	71a3      	strb	r3, [r4, #6]
}
   45aca:	bd10      	pop	{r4, pc}

00045acc <bt_setup_random_id_addr>:
	return bt_id_create(NULL, NULL);
   45acc:	2100      	movs	r1, #0
   45ace:	4608      	mov	r0, r1
   45ad0:	f7e3 b9a8 	b.w	28e24 <bt_id_create>

00045ad4 <fixed_data_unref>:
}
   45ad4:	4770      	bx	lr

00045ad6 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   45ad6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   45ad8:	6849      	ldr	r1, [r1, #4]
   45ada:	6809      	ldr	r1, [r1, #0]
   45adc:	f7e3 bd18 	b.w	29510 <net_buf_alloc_len>

00045ae0 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   45ae0:	6802      	ldr	r2, [r0, #0]
   45ae2:	6880      	ldr	r0, [r0, #8]
}
   45ae4:	1a10      	subs	r0, r2, r0
   45ae6:	4770      	bx	lr

00045ae8 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   45ae8:	8883      	ldrh	r3, [r0, #4]
   45aea:	88c2      	ldrh	r2, [r0, #6]
   45aec:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   45aee:	6803      	ldr	r3, [r0, #0]
   45af0:	6880      	ldr	r0, [r0, #8]
   45af2:	1a18      	subs	r0, r3, r0
}
   45af4:	1a10      	subs	r0, r2, r0
   45af6:	4770      	bx	lr

00045af8 <net_buf_simple_add_mem>:
{
   45af8:	b538      	push	{r3, r4, r5, lr}
   45afa:	460d      	mov	r5, r1
   45afc:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   45afe:	4611      	mov	r1, r2
   45b00:	f7e3 feee 	bl	298e0 <net_buf_simple_add>
   45b04:	4622      	mov	r2, r4
   45b06:	4629      	mov	r1, r5
}
   45b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   45b0c:	f002 bb3c 	b.w	48188 <memcpy>

00045b10 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   45b10:	b508      	push	{r3, lr}
	net_if_init();
   45b12:	f7e3 ff8d 	bl	29a30 <net_if_init>
	net_if_post_init();
   45b16:	f7e3 ffbf 	bl	29a98 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   45b1a:	2000      	movs	r0, #0
   45b1c:	bd08      	pop	{r3, pc}

00045b1e <net_if_l2>:
	if (!iface || !iface->if_dev) {
   45b1e:	b110      	cbz	r0, 45b26 <net_if_l2+0x8>
   45b20:	6800      	ldr	r0, [r0, #0]
   45b22:	b100      	cbz	r0, 45b26 <net_if_l2+0x8>
	return iface->if_dev->l2;
   45b24:	6840      	ldr	r0, [r0, #4]
}
   45b26:	4770      	bx	lr

00045b28 <l2_flags_get>:
{
   45b28:	b510      	push	{r4, lr}
   45b2a:	4602      	mov	r2, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   45b2c:	f7ff fff7 	bl	45b1e <net_if_l2>
   45b30:	b128      	cbz	r0, 45b3e <l2_flags_get+0x16>
   45b32:	68c3      	ldr	r3, [r0, #12]
   45b34:	b11b      	cbz	r3, 45b3e <l2_flags_get+0x16>
}
   45b36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   45b3a:	4610      	mov	r0, r2
   45b3c:	4718      	bx	r3
}
   45b3e:	2000      	movs	r0, #0
   45b40:	bd10      	pop	{r4, pc}

00045b42 <net_byte_to_hex>:
{
   45b42:	b570      	push	{r4, r5, r6, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   45b44:	090e      	lsrs	r6, r1, #4
		if (i == 0 && !pad && !val) {
   45b46:	b1b3      	cbz	r3, 45b76 <net_byte_to_hex+0x34>
		if (val < 10) {
   45b48:	2e09      	cmp	r6, #9
			*ptr++ = (char) (val - 10 + base);
   45b4a:	b274      	sxtb	r4, r6
   45b4c:	bf86      	itte	hi
   45b4e:	f1a2 030a 	subhi.w	r3, r2, #10
   45b52:	18e4      	addhi	r4, r4, r3
			*ptr++ = (char) (val + '0');
   45b54:	3430      	addls	r4, #48	; 0x30
   45b56:	1c45      	adds	r5, r0, #1
   45b58:	7004      	strb	r4, [r0, #0]
   45b5a:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   45b5e:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   45b60:	b24b      	sxtb	r3, r1
   45b62:	bf83      	ittte	hi
   45b64:	3a0a      	subhi	r2, #10
   45b66:	189b      	addhi	r3, r3, r2
   45b68:	b2db      	uxtbhi	r3, r3
			*ptr++ = (char) (val + '0');
   45b6a:	3330      	addls	r3, #48	; 0x30
   45b6c:	702b      	strb	r3, [r5, #0]
	*ptr = '\0';
   45b6e:	2300      	movs	r3, #0
   45b70:	706b      	strb	r3, [r5, #1]
   45b72:	1c68      	adds	r0, r5, #1
}
   45b74:	bd70      	pop	{r4, r5, r6, pc}
		if (i == 0 && !pad && !val) {
   45b76:	2e00      	cmp	r6, #0
   45b78:	d1e6      	bne.n	45b48 <net_byte_to_hex+0x6>
   45b7a:	4605      	mov	r5, r0
   45b7c:	e7ed      	b.n	45b5a <net_byte_to_hex+0x18>

00045b7e <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   45b7e:	e9d0 2300 	ldrd	r2, r3, [r0]
   45b82:	1a9b      	subs	r3, r3, r2
   45b84:	2b01      	cmp	r3, #1
{
   45b86:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   45b88:	d90c      	bls.n	45ba4 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   45b8a:	4614      	mov	r4, r2
   45b8c:	1c53      	adds	r3, r2, #1
   45b8e:	6003      	str	r3, [r0, #0]
   45b90:	f814 3b02 	ldrb.w	r3, [r4], #2
   45b94:	021b      	lsls	r3, r3, #8
   45b96:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   45b98:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   45b9a:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   45b9c:	7852      	ldrb	r2, [r2, #1]
   45b9e:	4313      	orrs	r3, r2
   45ba0:	800b      	strh	r3, [r1, #0]
}
   45ba2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   45ba4:	f06f 0015 	mvn.w	r0, #21
   45ba8:	e7fb      	b.n	45ba2 <unpack_uint16+0x24>

00045baa <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   45baa:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45bac:	e9d0 3400 	ldrd	r3, r4, [r0]
   45bb0:	429c      	cmp	r4, r3
   45bb2:	d01f      	beq.n	45bf4 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   45bb4:	1c5c      	adds	r4, r3, #1
   45bb6:	6004      	str	r4, [r0, #0]
   45bb8:	781b      	ldrb	r3, [r3, #0]
   45bba:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   45bbc:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   45bbe:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   45bc0:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   45bc2:	6804      	ldr	r4, [r0, #0]
   45bc4:	42bc      	cmp	r4, r7
   45bc6:	d218      	bcs.n	45bfa <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   45bc8:	4625      	mov	r5, r4
   45bca:	f815 3b01 	ldrb.w	r3, [r5], #1
   45bce:	6816      	ldr	r6, [r2, #0]
   45bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   45bd4:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   45bd6:	4433      	add	r3, r6
   45bd8:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   45bda:	6005      	str	r5, [r0, #0]
   45bdc:	f994 4000 	ldrsb.w	r4, [r4]
   45be0:	2c00      	cmp	r4, #0
   45be2:	db04      	blt.n	45bee <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   45be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   45be8:	d204      	bcs.n	45bf4 <fixed_header_decode+0x4a>
	return 0;
   45bea:	2000      	movs	r0, #0
   45bec:	e004      	b.n	45bf8 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   45bee:	3107      	adds	r1, #7
   45bf0:	291c      	cmp	r1, #28
   45bf2:	d1e6      	bne.n	45bc2 <fixed_header_decode+0x18>
		return -EINVAL;
   45bf4:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   45bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   45bfa:	f06f 000a 	mvn.w	r0, #10
   45bfe:	e7fb      	b.n	45bf8 <fixed_header_decode+0x4e>

00045c00 <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   45c00:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45c02:	e9d1 3500 	ldrd	r3, r5, [r1]
   45c06:	429d      	cmp	r5, r3
   45c08:	d102      	bne.n	45c10 <connect_ack_decode+0x10>
		return -EINVAL;
   45c0a:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   45c0e:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   45c10:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45c12:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   45c14:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45c16:	d0f8      	beq.n	45c0a <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   45c18:	461d      	mov	r5, r3
   45c1a:	f815 4b02 	ldrb.w	r4, [r5], #2
   45c1e:	600d      	str	r5, [r1, #0]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   45c20:	f890 107a 	ldrb.w	r1, [r0, #122]	; 0x7a
	*val = *(buf->cur++);
   45c24:	785b      	ldrb	r3, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   45c26:	2904      	cmp	r1, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   45c28:	bf04      	itt	eq
   45c2a:	f004 0401 	andeq.w	r4, r4, #1
		param->session_present_flag =
   45c2e:	7014      	strbeq	r4, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   45c30:	7053      	strb	r3, [r2, #1]
	return 0;
   45c32:	2000      	movs	r0, #0
   45c34:	e7eb      	b.n	45c0e <connect_ack_decode+0xe>

00045c36 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   45c36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   45c3a:	461d      	mov	r5, r3
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   45c3c:	7d9b      	ldrb	r3, [r3, #22]
{
   45c3e:	4688      	mov	r8, r1
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   45c40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   45c44:	f360 0341 	bfi	r3, r0, #1, #1
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   45c48:	f3c0 0041 	ubfx	r0, r0, #1, #2
   45c4c:	7228      	strb	r0, [r5, #8]
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
   45c4e:	75ab      	strb	r3, [r5, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   45c50:	f10d 0106 	add.w	r1, sp, #6
   45c54:	4610      	mov	r0, r2
{
   45c56:	4617      	mov	r7, r2
	err_code = unpack_uint16(buf, &utf8_strlen);
   45c58:	f7ff ff91 	bl	45b7e <unpack_uint16>
	if (err_code != 0) {
   45c5c:	4606      	mov	r6, r0
   45c5e:	b9c0      	cbnz	r0, 45c92 <publish_decode+0x5c>
	if ((buf->end - buf->cur) < utf8_strlen) {
   45c60:	683b      	ldr	r3, [r7, #0]
   45c62:	687a      	ldr	r2, [r7, #4]
   45c64:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   45c68:	1ad2      	subs	r2, r2, r3
   45c6a:	42a2      	cmp	r2, r4
   45c6c:	da02      	bge.n	45c74 <publish_decode+0x3e>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   45c6e:	f06f 0615 	mvn.w	r6, #21
   45c72:	e00e      	b.n	45c92 <publish_decode+0x5c>
	str->size = utf8_strlen;
   45c74:	606c      	str	r4, [r5, #4]
	if (utf8_strlen) {
   45c76:	b184      	cbz	r4, 45c9a <publish_decode+0x64>
		str->utf8 = buf->cur;
   45c78:	602b      	str	r3, [r5, #0]
		buf->cur += utf8_strlen;
   45c7a:	4423      	add	r3, r4
   45c7c:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   45c7e:	7a2b      	ldrb	r3, [r5, #8]
   45c80:	b96b      	cbnz	r3, 45c9e <publish_decode+0x68>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   45c82:	3402      	adds	r4, #2
	if (var_length < var_header_length) {
   45c84:	4544      	cmp	r4, r8
   45c86:	d8f2      	bhi.n	45c6e <publish_decode+0x38>
	}

	param->message.payload.data = NULL;
   45c88:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   45c8a:	eba8 0404 	sub.w	r4, r8, r4
	param->message.payload.data = NULL;
   45c8e:	60eb      	str	r3, [r5, #12]
	param->message.payload.len = var_length - var_header_length;
   45c90:	612c      	str	r4, [r5, #16]

	return 0;
}
   45c92:	4630      	mov	r0, r6
   45c94:	b002      	add	sp, #8
   45c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   45c9a:	602c      	str	r4, [r5, #0]
	if (err_code != 0) {
   45c9c:	e7ef      	b.n	45c7e <publish_decode+0x48>
		err_code = unpack_uint16(buf, &param->message_id);
   45c9e:	f105 0114 	add.w	r1, r5, #20
   45ca2:	4638      	mov	r0, r7
   45ca4:	f7ff ff6b 	bl	45b7e <unpack_uint16>
		if (err_code != 0) {
   45ca8:	b908      	cbnz	r0, 45cae <publish_decode+0x78>
		var_header_length += sizeof(uint16_t);
   45caa:	3404      	adds	r4, #4
   45cac:	e7ea      	b.n	45c84 <publish_decode+0x4e>
   45cae:	4606      	mov	r6, r0
   45cb0:	e7ef      	b.n	45c92 <publish_decode+0x5c>

00045cb2 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   45cb2:	f7ff bf64 	b.w	45b7e <unpack_uint16>

00045cb6 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   45cb6:	f7ff bf62 	b.w	45b7e <unpack_uint16>

00045cba <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   45cba:	f7ff bf60 	b.w	45b7e <unpack_uint16>

00045cbe <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   45cbe:	f7ff bf5e 	b.w	45b7e <unpack_uint16>

00045cc2 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   45cc2:	b538      	push	{r3, r4, r5, lr}
   45cc4:	4605      	mov	r5, r0
   45cc6:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   45cc8:	f7ff ff59 	bl	45b7e <unpack_uint16>
	if (err_code != 0) {
   45ccc:	b930      	cbnz	r0, 45cdc <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   45cce:	e9d5 2300 	ldrd	r2, r3, [r5]
   45cd2:	1a99      	subs	r1, r3, r2
	str->len = length;
   45cd4:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   45cd6:	b111      	cbz	r1, 45cde <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   45cd8:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   45cda:	602b      	str	r3, [r5, #0]
}
   45cdc:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   45cde:	6060      	str	r0, [r4, #4]
   45ce0:	e7fc      	b.n	45cdc <subscribe_ack_decode+0x1a>

00045ce2 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   45ce2:	f7ff bf4c 	b.w	45b7e <unpack_uint16>

00045ce6 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   45ce6:	e9d1 3200 	ldrd	r3, r2, [r1]
   45cea:	1ad2      	subs	r2, r2, r3
   45cec:	2a01      	cmp	r2, #1
   45cee:	d909      	bls.n	45d04 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   45cf0:	1c5a      	adds	r2, r3, #1
   45cf2:	600a      	str	r2, [r1, #0]
   45cf4:	0a02      	lsrs	r2, r0, #8
   45cf6:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   45cf8:	680b      	ldr	r3, [r1, #0]
   45cfa:	1c5a      	adds	r2, r3, #1
   45cfc:	600a      	str	r2, [r1, #0]
   45cfe:	7018      	strb	r0, [r3, #0]
	return 0;
   45d00:	2000      	movs	r0, #0
   45d02:	4770      	bx	lr
		return -ENOMEM;
   45d04:	f06f 000b 	mvn.w	r0, #11
}
   45d08:	4770      	bx	lr

00045d0a <pack_utf8_str>:
{
   45d0a:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   45d0c:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   45d10:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   45d12:	6840      	ldr	r0, [r0, #4]
   45d14:	1a9b      	subs	r3, r3, r2
   45d16:	1c82      	adds	r2, r0, #2
   45d18:	4293      	cmp	r3, r2
{
   45d1a:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   45d1c:	d30d      	bcc.n	45d3a <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   45d1e:	b280      	uxth	r0, r0
   45d20:	f7ff ffe1 	bl	45ce6 <pack_uint16>
   45d24:	e9d5 1200 	ldrd	r1, r2, [r5]
   45d28:	6820      	ldr	r0, [r4, #0]
   45d2a:	f002 fa2d 	bl	48188 <memcpy>
	return 0;
   45d2e:	2000      	movs	r0, #0
	buf->cur += str->size;
   45d30:	6823      	ldr	r3, [r4, #0]
   45d32:	686a      	ldr	r2, [r5, #4]
   45d34:	4413      	add	r3, r2
   45d36:	6023      	str	r3, [r4, #0]
}
   45d38:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   45d3a:	f06f 000b 	mvn.w	r0, #11
   45d3e:	e7fb      	b.n	45d38 <pack_utf8_str+0x2e>

00045d40 <mqtt_encode_fixed_header>:
{
   45d40:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   45d42:	6815      	ldr	r5, [r2, #0]
   45d44:	1a6d      	subs	r5, r5, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   45d46:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
   45d4a:	d227      	bcs.n	45d9c <mqtt_encode_fixed_header+0x5c>
   45d4c:	462c      	mov	r4, r5
   45d4e:	2600      	movs	r6, #0
	} while (length > 0);
   45d50:	09e4      	lsrs	r4, r4, #7
   45d52:	b2f3      	uxtb	r3, r6
		if (buf != NULL) {
   45d54:	f106 0601 	add.w	r6, r6, #1
	} while (length > 0);
   45d58:	d1fa      	bne.n	45d50 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   45d5a:	3302      	adds	r3, #2
	buf->cur = start - fixed_header_length;
   45d5c:	b2db      	uxtb	r3, r3
   45d5e:	425b      	negs	r3, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45d60:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   45d62:	18cc      	adds	r4, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45d64:	42b4      	cmp	r4, r6
	buf->cur = start - fixed_header_length;
   45d66:	6014      	str	r4, [r2, #0]
	*(buf->cur++) = val;
   45d68:	bf1e      	ittt	ne
   45d6a:	3401      	addne	r4, #1
   45d6c:	6014      	strne	r4, [r2, #0]
   45d6e:	54c8      	strbne	r0, [r1, r3]
	return 0;
   45d70:	4628      	mov	r0, r5
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   45d72:	6811      	ldr	r1, [r2, #0]
   45d74:	f000 047f 	and.w	r4, r0, #127	; 0x7f
   45d78:	700c      	strb	r4, [r1, #0]
			if (length > 0) {
   45d7a:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   45d7c:	bf1f      	itttt	ne
   45d7e:	6814      	ldrne	r4, [r2, #0]
   45d80:	7821      	ldrbne	r1, [r4, #0]
   45d82:	f061 017f 	ornne	r1, r1, #127	; 0x7f
   45d86:	7021      	strbne	r1, [r4, #0]
			buf->cur++;
   45d88:	6811      	ldr	r1, [r2, #0]
   45d8a:	3101      	adds	r1, #1
   45d8c:	6011      	str	r1, [r2, #0]
	} while (length > 0);
   45d8e:	2800      	cmp	r0, #0
   45d90:	d1ef      	bne.n	45d72 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   45d92:	440b      	add	r3, r1
	buf->end = buf->cur + length + fixed_header_length;
   45d94:	4429      	add	r1, r5
	buf->cur = buf->cur - fixed_header_length;
   45d96:	6013      	str	r3, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   45d98:	6051      	str	r1, [r2, #4]
}
   45d9a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   45d9c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   45da0:	e7fb      	b.n	45d9a <mqtt_encode_fixed_header+0x5a>

00045da2 <mqtt_message_id_only_enc>:
{
   45da2:	b570      	push	{r4, r5, r6, lr}
   45da4:	4606      	mov	r6, r0
   45da6:	4615      	mov	r5, r2
	if (message_id == 0U) {
   45da8:	4608      	mov	r0, r1
   45daa:	b169      	cbz	r1, 45dc8 <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45dac:	6814      	ldr	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   45dae:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45db0:	3405      	adds	r4, #5
   45db2:	6014      	str	r4, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   45db4:	f7ff ff97 	bl	45ce6 <pack_uint16>
	if (err_code != 0) {
   45db8:	b940      	cbnz	r0, 45dcc <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   45dba:	462a      	mov	r2, r5
   45dbc:	4621      	mov	r1, r4
   45dbe:	4630      	mov	r0, r6
}
   45dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   45dc4:	f7ff bfbc 	b.w	45d40 <mqtt_encode_fixed_header>
		return -EINVAL;
   45dc8:	f06f 0015 	mvn.w	r0, #21
}
   45dcc:	bd70      	pop	{r4, r5, r6, pc}

00045dce <publish_encode>:
{
   45dce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45dd2:	4607      	mov	r7, r0
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   45dd4:	7d80      	ldrb	r0, [r0, #22]
   45dd6:	7a3c      	ldrb	r4, [r7, #8]
{
   45dd8:	460d      	mov	r5, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   45dda:	f000 0801 	and.w	r8, r0, #1
   45dde:	f3c0 0940 	ubfx	r9, r0, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   45de2:	b10c      	cbz	r4, 45de8 <publish_encode+0x1a>
   45de4:	8abb      	ldrh	r3, [r7, #20]
   45de6:	b35b      	cbz	r3, 45e40 <publish_encode+0x72>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45de8:	682e      	ldr	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   45dea:	4629      	mov	r1, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45dec:	3605      	adds	r6, #5
   45dee:	602e      	str	r6, [r5, #0]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   45df0:	4638      	mov	r0, r7
   45df2:	f7ff ff8a 	bl	45d0a <pack_utf8_str>
	if (err_code != 0) {
   45df6:	b9a8      	cbnz	r0, 45e24 <publish_encode+0x56>
	if (param->message.topic.qos) {
   45df8:	7a3b      	ldrb	r3, [r7, #8]
   45dfa:	b9ab      	cbnz	r3, 45e28 <publish_encode+0x5a>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   45dfc:	0060      	lsls	r0, r4, #1
   45dfe:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   45e02:	693a      	ldr	r2, [r7, #16]
   45e04:	682b      	ldr	r3, [r5, #0]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   45e06:	ea40 0009 	orr.w	r0, r0, r9
   45e0a:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   45e0e:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   45e10:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	buf->cur += param->message.payload.len;
   45e14:	602b      	str	r3, [r5, #0]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   45e16:	462a      	mov	r2, r5
   45e18:	4631      	mov	r1, r6
   45e1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   45e1e:	f7ff ff8f 	bl	45d40 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   45e22:	b140      	cbz	r0, 45e36 <publish_encode+0x68>
}
   45e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   45e28:	4629      	mov	r1, r5
   45e2a:	8ab8      	ldrh	r0, [r7, #20]
   45e2c:	f7ff ff5b 	bl	45ce6 <pack_uint16>
		if (err_code != 0) {
   45e30:	2800      	cmp	r0, #0
   45e32:	d0e3      	beq.n	45dfc <publish_encode+0x2e>
   45e34:	e7f6      	b.n	45e24 <publish_encode+0x56>
	buf->end -= param->message.payload.len;
   45e36:	686b      	ldr	r3, [r5, #4]
   45e38:	693a      	ldr	r2, [r7, #16]
   45e3a:	1a9b      	subs	r3, r3, r2
   45e3c:	606b      	str	r3, [r5, #4]
	return 0;
   45e3e:	e7f1      	b.n	45e24 <publish_encode+0x56>
		return -EINVAL;
   45e40:	f06f 0015 	mvn.w	r0, #21
   45e44:	e7ee      	b.n	45e24 <publish_encode+0x56>

00045e46 <publish_ack_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   45e46:	460a      	mov	r2, r1
   45e48:	8801      	ldrh	r1, [r0, #0]
   45e4a:	2040      	movs	r0, #64	; 0x40
   45e4c:	f7ff bfa9 	b.w	45da2 <mqtt_message_id_only_enc>

00045e50 <subscribe_encode>:
{
   45e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   45e54:	4607      	mov	r7, r0
	if (param->message_id == 0U) {
   45e56:	88c0      	ldrh	r0, [r0, #6]
{
   45e58:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   45e5a:	b330      	cbz	r0, 45eaa <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45e5c:	680e      	ldr	r6, [r1, #0]
   45e5e:	3605      	adds	r6, #5
   45e60:	600e      	str	r6, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   45e62:	f7ff ff40 	bl	45ce6 <pack_uint16>
	if (err_code != 0) {
   45e66:	4604      	mov	r4, r0
   45e68:	bb08      	cbnz	r0, 45eae <subscribe_encode+0x5e>
   45e6a:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < param->list_count; i++) {
   45e6e:	88bb      	ldrh	r3, [r7, #4]
   45e70:	42a3      	cmp	r3, r4
   45e72:	dc06      	bgt.n	45e82 <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   45e74:	462a      	mov	r2, r5
   45e76:	4631      	mov	r1, r6
}
   45e78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   45e7c:	2082      	movs	r0, #130	; 0x82
   45e7e:	f7ff bf5f 	b.w	45d40 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   45e82:	fb09 f804 	mul.w	r8, r9, r4
   45e86:	6838      	ldr	r0, [r7, #0]
   45e88:	4629      	mov	r1, r5
   45e8a:	4440      	add	r0, r8
   45e8c:	f7ff ff3d 	bl	45d0a <pack_utf8_str>
		if (err_code != 0) {
   45e90:	b980      	cbnz	r0, 45eb4 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   45e92:	683b      	ldr	r3, [r7, #0]
   45e94:	4443      	add	r3, r8
   45e96:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   45e98:	e9d5 3100 	ldrd	r3, r1, [r5]
   45e9c:	4299      	cmp	r1, r3
   45e9e:	d00b      	beq.n	45eb8 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   45ea0:	1c59      	adds	r1, r3, #1
   45ea2:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   45ea4:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   45ea6:	701a      	strb	r2, [r3, #0]
		if (err_code != 0) {
   45ea8:	e7e1      	b.n	45e6e <subscribe_encode+0x1e>
		return -EINVAL;
   45eaa:	f06f 0415 	mvn.w	r4, #21
}
   45eae:	4620      	mov	r0, r4
   45eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   45eb4:	4604      	mov	r4, r0
   45eb6:	e7fa      	b.n	45eae <subscribe_encode+0x5e>
		return -ENOMEM;
   45eb8:	f06f 040b 	mvn.w	r4, #11
   45ebc:	e7f7      	b.n	45eae <subscribe_encode+0x5e>

00045ebe <unsubscribe_encode>:
{
   45ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45ec2:	680d      	ldr	r5, [r1, #0]
{
   45ec4:	4607      	mov	r7, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   45ec6:	3505      	adds	r5, #5
   45ec8:	600d      	str	r5, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   45eca:	88c0      	ldrh	r0, [r0, #6]
{
   45ecc:	460e      	mov	r6, r1
	err_code = pack_uint16(param->message_id, buf);
   45ece:	f7ff ff0a 	bl	45ce6 <pack_uint16>
	if (err_code != 0) {
   45ed2:	4604      	mov	r4, r0
   45ed4:	b9a8      	cbnz	r0, 45f02 <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   45ed6:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   45eda:	88bb      	ldrh	r3, [r7, #4]
   45edc:	42a3      	cmp	r3, r4
   45ede:	dc06      	bgt.n	45eee <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   45ee0:	4632      	mov	r2, r6
   45ee2:	4629      	mov	r1, r5
}
   45ee4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   45ee8:	20a2      	movs	r0, #162	; 0xa2
   45eea:	f7ff bf29 	b.w	45d40 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   45eee:	6838      	ldr	r0, [r7, #0]
   45ef0:	4631      	mov	r1, r6
   45ef2:	fb08 0004 	mla	r0, r8, r4, r0
   45ef6:	f7ff ff08 	bl	45d0a <pack_utf8_str>
		if (err_code != 0) {
   45efa:	b908      	cbnz	r0, 45f00 <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   45efc:	3401      	adds	r4, #1
   45efe:	e7ec      	b.n	45eda <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   45f00:	4604      	mov	r4, r0
}
   45f02:	4620      	mov	r0, r4
   45f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00045f08 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   45f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   45f0a:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   45f0c:	e9d1 3100 	ldrd	r3, r1, [r1]
   45f10:	1acb      	subs	r3, r1, r3
   45f12:	4293      	cmp	r3, r2
{
   45f14:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   45f16:	d301      	bcc.n	45f1c <mqtt_read_message_chunk+0x14>
		return 0;
   45f18:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   45f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   45f1c:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   45f1e:	190f      	adds	r7, r1, r4
   45f20:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   45f24:	4413      	add	r3, r2
   45f26:	429f      	cmp	r7, r3
   45f28:	d813      	bhi.n	45f52 <mqtt_read_message_chunk+0x4a>
   45f2a:	4297      	cmp	r7, r2
   45f2c:	d311      	bcc.n	45f52 <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   45f2e:	2300      	movs	r3, #0
   45f30:	4622      	mov	r2, r4
   45f32:	f7e3 ff83 	bl	29e3c <mqtt_transport_read>
	if (len < 0) {
   45f36:	2800      	cmp	r0, #0
   45f38:	dbef      	blt.n	45f1a <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   45f3a:	d00d      	beq.n	45f58 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   45f3c:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   45f3e:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   45f40:	4403      	add	r3, r0
   45f42:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   45f44:	686b      	ldr	r3, [r5, #4]
   45f46:	4403      	add	r3, r0
   45f48:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   45f4a:	d2e5      	bcs.n	45f18 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   45f4c:	f06f 000a 	mvn.w	r0, #10
   45f50:	e7e3      	b.n	45f1a <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   45f52:	f06f 000b 	mvn.w	r0, #11
   45f56:	e7e0      	b.n	45f1a <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   45f58:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   45f5c:	e7dd      	b.n	45f1a <mqtt_read_message_chunk+0x12>

00045f5e <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   45f5e:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   45f60:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   45f62:	69c2      	ldr	r2, [r0, #28]
{
   45f64:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   45f66:	9302      	str	r3, [sp, #8]
{
   45f68:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   45f6a:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   45f6c:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   45f6e:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   45f70:	a902      	add	r1, sp, #8
   45f72:	4628      	mov	r0, r5
   45f74:	f7ff ffc8 	bl	45f08 <mqtt_read_message_chunk>
		if (err_code < 0) {
   45f78:	1e04      	subs	r4, r0, #0
   45f7a:	db2b      	blt.n	45fd4 <mqtt_handle_rx+0x76>
		buf->cur = client->rx_buf;
   45f7c:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   45f7e:	aa01      	add	r2, sp, #4
   45f80:	f10d 0103 	add.w	r1, sp, #3
   45f84:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   45f86:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   45f88:	f7ff fe0f 	bl	45baa <fixed_header_decode>
	} while (err_code == -EAGAIN);
   45f8c:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   45f90:	4604      	mov	r4, r0
		chunk_size = 1U;
   45f92:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   45f96:	d0eb      	beq.n	45f70 <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   45f98:	2800      	cmp	r0, #0
   45f9a:	db1f      	blt.n	45fdc <mqtt_handle_rx+0x7e>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   45f9c:	f89d 6003 	ldrb.w	r6, [sp, #3]
   45fa0:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   45fa4:	2b30      	cmp	r3, #48	; 0x30
   45fa6:	d11c      	bne.n	45fe2 <mqtt_handle_rx+0x84>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   45fa8:	2202      	movs	r2, #2
   45faa:	a902      	add	r1, sp, #8
   45fac:	4628      	mov	r0, r5
   45fae:	f7ff ffab 	bl	45f08 <mqtt_read_message_chunk>
	if (err_code < 0) {
   45fb2:	1e04      	subs	r4, r0, #0
   45fb4:	db0e      	blt.n	45fd4 <mqtt_handle_rx+0x76>
	variable_header_length = *buf->cur << 8; /* MSB */
   45fb6:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   45fb8:	f016 0f06 	tst.w	r6, #6
   45fbc:	881a      	ldrh	r2, [r3, #0]
   45fbe:	ba52      	rev16	r2, r2
   45fc0:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   45fc2:	bf0c      	ite	eq
   45fc4:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   45fc6:	3204      	addne	r2, #4
		err_code = mqtt_read_publish_var_header(client, type_and_flags,
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   45fc8:	a902      	add	r1, sp, #8
   45fca:	4628      	mov	r0, r5
   45fcc:	f7ff ff9c 	bl	45f08 <mqtt_read_message_chunk>
	}

	if (err_code < 0) {
   45fd0:	1e04      	subs	r4, r0, #0
   45fd2:	da08      	bge.n	45fe6 <mqtt_handle_rx+0x88>
		return (err_code == -EAGAIN) ? 0 : err_code;
   45fd4:	f114 0f0b 	cmn.w	r4, #11
   45fd8:	d100      	bne.n	45fdc <mqtt_handle_rx+0x7e>
   45fda:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   45fdc:	4620      	mov	r0, r4
   45fde:	b00c      	add	sp, #48	; 0x30
   45fe0:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   45fe2:	9a01      	ldr	r2, [sp, #4]
   45fe4:	e7f0      	b.n	45fc8 <mqtt_handle_rx+0x6a>
	evt.result = 0;
   45fe6:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   45fe8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   45fec:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   45fee:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   45ff2:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   45ff4:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   45ff6:	d066      	beq.n	460c6 <mqtt_handle_rx+0x168>
   45ff8:	d813      	bhi.n	46022 <mqtt_handle_rx+0xc4>
   45ffa:	2b30      	cmp	r3, #48	; 0x30
   45ffc:	d04d      	beq.n	4609a <mqtt_handle_rx+0x13c>
   45ffe:	d804      	bhi.n	4600a <mqtt_handle_rx+0xac>
   46000:	2b20      	cmp	r3, #32
   46002:	d02f      	beq.n	46064 <mqtt_handle_rx+0x106>
	client->internal.rx_buf_datalen = 0U;
   46004:	2400      	movs	r4, #0
   46006:	61ec      	str	r4, [r5, #28]
	return 0;
   46008:	e7e8      	b.n	45fdc <mqtt_handle_rx+0x7e>
	switch (type_and_flags & 0xF0) {
   4600a:	2b40      	cmp	r3, #64	; 0x40
   4600c:	d051      	beq.n	460b2 <mqtt_handle_rx+0x154>
   4600e:	2b50      	cmp	r3, #80	; 0x50
   46010:	d1f8      	bne.n	46004 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBREC;
   46012:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   46014:	a905      	add	r1, sp, #20
   46016:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   46018:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   4601c:	f7ff fe4b 	bl	45cb6 <publish_receive_decode>
   46020:	e04e      	b.n	460c0 <mqtt_handle_rx+0x162>
	switch (type_and_flags & 0xF0) {
   46022:	2b90      	cmp	r3, #144	; 0x90
   46024:	d057      	beq.n	460d6 <mqtt_handle_rx+0x178>
   46026:	d809      	bhi.n	4603c <mqtt_handle_rx+0xde>
   46028:	2b70      	cmp	r3, #112	; 0x70
   4602a:	d1eb      	bne.n	46004 <mqtt_handle_rx+0xa6>
		evt.type = MQTT_EVT_PUBCOMP;
   4602c:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   4602e:	a905      	add	r1, sp, #20
   46030:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   46032:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   46036:	f7ff fe42 	bl	45cbe <publish_complete_decode>
   4603a:	e041      	b.n	460c0 <mqtt_handle_rx+0x162>
	switch (type_and_flags & 0xF0) {
   4603c:	2bb0      	cmp	r3, #176	; 0xb0
   4603e:	d052      	beq.n	460e6 <mqtt_handle_rx+0x188>
   46040:	2bd0      	cmp	r3, #208	; 0xd0
   46042:	d1df      	bne.n	46004 <mqtt_handle_rx+0xa6>
		if (client->unacked_ping <= 0) {
   46044:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   46048:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   4604a:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   4604c:	bfc8      	it	gt
   4604e:	f103 32ff 	addgt.w	r2, r3, #4294967295	; 0xffffffff
		evt.type = MQTT_EVT_PINGRESP;
   46052:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   46056:	bfc8      	it	gt
   46058:	b252      	sxtbgt	r2, r2
   4605a:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   4605e:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   46062:	e010      	b.n	46086 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_CONNACK;
   46064:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   46068:	a902      	add	r1, sp, #8
   4606a:	aa05      	add	r2, sp, #20
   4606c:	4628      	mov	r0, r5
   4606e:	f7ff fdc7 	bl	45c00 <connect_ack_decode>
		if (err_code == 0) {
   46072:	4604      	mov	r4, r0
   46074:	bb28      	cbnz	r0, 460c2 <mqtt_handle_rx+0x164>
			if (evt.param.connack.return_code ==
   46076:	f89d 2015 	ldrb.w	r2, [sp, #21]
   4607a:	b95a      	cbnz	r2, 46094 <mqtt_handle_rx+0x136>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   4607c:	69ab      	ldr	r3, [r5, #24]
   4607e:	f043 0304 	orr.w	r3, r3, #4
   46082:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   46084:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   46086:	a904      	add	r1, sp, #16
   46088:	4628      	mov	r0, r5
   4608a:	f000 f8be 	bl	4620a <event_notify>
	if (err_code < 0) {
   4608e:	2c00      	cmp	r4, #0
   46090:	dab8      	bge.n	46004 <mqtt_handle_rx+0xa6>
   46092:	e7a3      	b.n	45fdc <mqtt_handle_rx+0x7e>
				err_code = -ECONNREFUSED;
   46094:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   46098:	e7f4      	b.n	46084 <mqtt_handle_rx+0x126>
		evt.type = MQTT_EVT_PUBLISH;
   4609a:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   4609c:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   4609e:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   460a2:	ab05      	add	r3, sp, #20
   460a4:	f7ff fdc7 	bl	45c36 <publish_decode>
		client->internal.remaining_payload =
   460a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   460aa:	4604      	mov	r4, r0
		evt.result = err_code;
   460ac:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   460ae:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   460b0:	e7e9      	b.n	46086 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBACK;
   460b2:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   460b4:	a905      	add	r1, sp, #20
   460b6:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   460b8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   460bc:	f7ff fdf9 	bl	45cb2 <publish_ack_decode>
   460c0:	4604      	mov	r4, r0
		evt.result = err_code;
   460c2:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   460c4:	e7df      	b.n	46086 <mqtt_handle_rx+0x128>
		evt.type = MQTT_EVT_PUBREL;
   460c6:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   460c8:	a905      	add	r1, sp, #20
   460ca:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   460cc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   460d0:	f7ff fdf3 	bl	45cba <publish_release_decode>
   460d4:	e7f4      	b.n	460c0 <mqtt_handle_rx+0x162>
		evt.type = MQTT_EVT_SUBACK;
   460d6:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   460d8:	a905      	add	r1, sp, #20
   460da:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   460dc:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   460e0:	f7ff fdef 	bl	45cc2 <subscribe_ack_decode>
   460e4:	e7ec      	b.n	460c0 <mqtt_handle_rx+0x162>
		evt.type = MQTT_EVT_UNSUBACK;
   460e6:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   460e8:	a905      	add	r1, sp, #20
   460ea:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   460ee:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   460f2:	f7ff fdf6 	bl	45ce2 <unsubscribe_ack_decode>
   460f6:	e7e3      	b.n	460c0 <mqtt_handle_rx+0x162>

000460f8 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   460f8:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   460fa:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   460fc:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   460fe:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   46100:	2206      	movs	r2, #6
   46102:	2101      	movs	r1, #1
   46104:	f7df f9aa 	bl	2545c <z_impl_zsock_socket>
					    IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   46108:	2800      	cmp	r0, #0
	client->transport.tcp.sock = socket(broker->sa_family, SOCK_STREAM,
   4610a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   4610c:	da04      	bge.n	46118 <mqtt_client_tcp_connect+0x20>

	ret = connect(client->transport.tcp.sock, client->broker,
		      peer_addr_size);
	if (ret < 0) {
		(void)close(client->transport.tcp.sock);
		return -errno;
   4610e:	f7ff fc69 	bl	459e4 <__errno>
   46112:	6800      	ldr	r0, [r0, #0]
   46114:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   46116:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   46118:	882b      	ldrh	r3, [r5, #0]
	ret = connect(client->transport.tcp.sock, client->broker,
   4611a:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   4611c:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   4611e:	bf14      	ite	ne
   46120:	2218      	movne	r2, #24
   46122:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   46124:	f7fe fed1 	bl	44eca <z_impl_zsock_connect>
	if (ret < 0) {
   46128:	2800      	cmp	r0, #0
   4612a:	da03      	bge.n	46134 <mqtt_client_tcp_connect+0x3c>
		(void)close(client->transport.tcp.sock);
   4612c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   4612e:	f7fe feb5 	bl	44e9c <z_impl_zsock_close>
   46132:	e7ec      	b.n	4610e <mqtt_client_tcp_connect+0x16>
	return 0;
   46134:	2000      	movs	r0, #0
   46136:	e7ee      	b.n	46116 <mqtt_client_tcp_connect+0x1e>

00046138 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   46138:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   4613c:	2400      	movs	r4, #0
{
   4613e:	4607      	mov	r7, r0
   46140:	4688      	mov	r8, r1
   46142:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   46144:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   46146:	42ac      	cmp	r4, r5
   46148:	d301      	bcc.n	4614e <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   4614a:	2000      	movs	r0, #0
   4614c:	e00e      	b.n	4616c <mqtt_client_tcp_write+0x34>
		ret = send(client->transport.tcp.sock, data + offset,
   4614e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   46150:	2300      	movs	r3, #0
   46152:	e9cd 6600 	strd	r6, r6, [sp]
   46156:	1b2a      	subs	r2, r5, r4
   46158:	eb08 0104 	add.w	r1, r8, r4
   4615c:	f7fe fecb 	bl	44ef6 <z_impl_zsock_sendto>
		if (ret < 0) {
   46160:	2800      	cmp	r0, #0
   46162:	da06      	bge.n	46172 <mqtt_client_tcp_write+0x3a>
			return -errno;
   46164:	f7ff fc3e 	bl	459e4 <__errno>
   46168:	6800      	ldr	r0, [r0, #0]
   4616a:	4240      	negs	r0, r0
}
   4616c:	b002      	add	sp, #8
   4616e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   46172:	4404      	add	r4, r0
   46174:	e7e7      	b.n	46146 <mqtt_client_tcp_write+0xe>

00046176 <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   46176:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tcp.sock, message, 0);
   46178:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   4617a:	2200      	movs	r2, #0
   4617c:	f7fe fed8 	bl	44f30 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   46180:	2800      	cmp	r0, #0
   46182:	da04      	bge.n	4618e <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   46184:	f7ff fc2e 	bl	459e4 <__errno>
   46188:	6800      	ldr	r0, [r0, #0]
   4618a:	4240      	negs	r0, r0
	}

	return 0;
}
   4618c:	bd08      	pop	{r3, pc}
	return 0;
   4618e:	2000      	movs	r0, #0
   46190:	e7fc      	b.n	4618c <mqtt_client_tcp_write_msg+0x16>

00046192 <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   46192:	b513      	push	{r0, r1, r4, lr}
   46194:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   46196:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   46198:	bf14      	ite	ne
   4619a:	4623      	movne	r3, r4
   4619c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tcp.sock, data, buflen, flags);
   4619e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   461a0:	e9cd 4400 	strd	r4, r4, [sp]
   461a4:	f7fe feda 	bl	44f5c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   461a8:	2800      	cmp	r0, #0
   461aa:	da03      	bge.n	461b4 <mqtt_client_tcp_read+0x22>
		return -errno;
   461ac:	f7ff fc1a 	bl	459e4 <__errno>
   461b0:	6800      	ldr	r0, [r0, #0]
   461b2:	4240      	negs	r0, r0
	}

	return ret;
}
   461b4:	b002      	add	sp, #8
   461b6:	bd10      	pop	{r4, pc}

000461b8 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   461b8:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = close(client->transport.tcp.sock);
   461ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   461bc:	f7fe fe6e 	bl	44e9c <z_impl_zsock_close>
	if (ret < 0) {
   461c0:	2800      	cmp	r0, #0
   461c2:	da04      	bge.n	461ce <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   461c4:	f7ff fc0e 	bl	459e4 <__errno>
   461c8:	6800      	ldr	r0, [r0, #0]
   461ca:	4240      	negs	r0, r0
	}

	return 0;
}
   461cc:	bd08      	pop	{r3, pc}
	return 0;
   461ce:	2000      	movs	r0, #0
   461d0:	e7fc      	b.n	461cc <mqtt_client_tcp_disconnect+0x14>

000461d2 <k_uptime_get>:
{
   461d2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   461d4:	f001 ff03 	bl	47fde <z_impl_k_uptime_ticks>
   461d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   461dc:	fba0 2304 	umull	r2, r3, r0, r4
   461e0:	fb04 3301 	mla	r3, r4, r1, r3
   461e4:	0bd0      	lsrs	r0, r2, #15
}
   461e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   461ea:	0bd9      	lsrs	r1, r3, #15
   461ec:	bd10      	pop	{r4, pc}

000461ee <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   461ee:	b538      	push	{r3, r4, r5, lr}
   461f0:	4604      	mov	r4, r0
   461f2:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   461f4:	6f42      	ldr	r2, [r0, #116]	; 0x74
   461f6:	2100      	movs	r1, #0
   461f8:	6f00      	ldr	r0, [r0, #112]	; 0x70
   461fa:	f001 ffe5 	bl	481c8 <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   461fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   46200:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   46202:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   46204:	4413      	add	r3, r2
   46206:	606b      	str	r3, [r5, #4]
}
   46208:	bd38      	pop	{r3, r4, r5, pc}

0004620a <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   4620a:	b538      	push	{r3, r4, r5, lr}
	if (client->evt_cb != NULL) {
   4620c:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   4620e:	4604      	mov	r4, r0
   46210:	460d      	mov	r5, r1
	if (client->evt_cb != NULL) {
   46212:	b153      	cbz	r3, 4622a <event_notify+0x20>
		mqtt_mutex_unlock(client);
   46214:	f7e3 fe2a 	bl	29e6c <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   46218:	4620      	mov	r0, r4
   4621a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   4621c:	4629      	mov	r1, r5
   4621e:	4798      	blx	r3

		mqtt_mutex_lock(client);
   46220:	4620      	mov	r0, r4
	}
}
   46222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		mqtt_mutex_lock(client);
   46226:	f7e3 be4d 	b.w	29ec4 <mqtt_mutex_lock>
}
   4622a:	bd38      	pop	{r3, r4, r5, pc}

0004622c <client_disconnect.constprop.3>:

static void client_disconnect(struct mqtt_client *client, int result,
   4622c:	b530      	push	{r4, r5, lr}
   4622e:	b089      	sub	sp, #36	; 0x24
   46230:	4604      	mov	r4, r0
   46232:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   46234:	f7e3 fe10 	bl	29e58 <mqtt_transport_disconnect>
	if (err_code < 0) {
		MQTT_ERR("Failed to disconnect transport!");
	}

	if (notify) {
		struct mqtt_evt evt = {
   46238:	221c      	movs	r2, #28
   4623a:	2100      	movs	r1, #0
   4623c:	4668      	mov	r0, sp
   4623e:	f001 ffc3 	bl	481c8 <memset>
   46242:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   46244:	4669      	mov	r1, sp
   46246:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   46248:	f88d 3000 	strb.w	r3, [sp]
   4624c:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   4624e:	f7ff ffdc 	bl	4620a <event_notify>
	MQTT_STATE_INIT(client);
   46252:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   46254:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   46258:	e9c4 3307 	strd	r3, r3, [r4, #28]
	}

	/* Reset internal state. */
	client_reset(client);
}
   4625c:	b009      	add	sp, #36	; 0x24
   4625e:	bd30      	pop	{r4, r5, pc}

00046260 <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   46260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   46264:	460f      	mov	r7, r1
   46266:	4690      	mov	r8, r2
   46268:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   4626a:	4605      	mov	r5, r0
   4626c:	b320      	cbz	r0, 462b8 <read_publish_payload+0x58>

	mqtt_mutex_lock(client);
   4626e:	f7e3 fe29 	bl	29ec4 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   46272:	6a2c      	ldr	r4, [r5, #32]
   46274:	b1b4      	cbz	r4, 462a4 <read_publish_payload+0x44>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   46276:	4544      	cmp	r4, r8
   46278:	4622      	mov	r2, r4
   4627a:	4633      	mov	r3, r6
   4627c:	bf28      	it	cs
   4627e:	4642      	movcs	r2, r8
   46280:	4639      	mov	r1, r7
   46282:	4628      	mov	r0, r5
   46284:	f7e3 fdda 	bl	29e3c <mqtt_transport_read>
   46288:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   4628a:	b916      	cbnz	r6, 46292 <read_publish_payload+0x32>
   4628c:	f110 0f0b 	cmn.w	r0, #11
   46290:	d008      	beq.n	462a4 <read_publish_payload+0x44>
		goto exit;
	}

	if (ret <= 0) {
   46292:	2c00      	cmp	r4, #0
   46294:	dc0c      	bgt.n	462b0 <read_publish_payload+0x50>
		if (ret == 0) {
			ret = -ENOTCONN;
   46296:	bf08      	it	eq
   46298:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   4629c:	4628      	mov	r0, r5
   4629e:	4621      	mov	r1, r4
   462a0:	f7ff ffc4 	bl	4622c <client_disconnect.constprop.3>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   462a4:	4628      	mov	r0, r5
   462a6:	f7e3 fde1 	bl	29e6c <mqtt_mutex_unlock>

	return ret;
}
   462aa:	4620      	mov	r0, r4
   462ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	client->internal.remaining_payload -= ret;
   462b0:	6a2b      	ldr	r3, [r5, #32]
   462b2:	1b1b      	subs	r3, r3, r4
   462b4:	622b      	str	r3, [r5, #32]
   462b6:	e7f5      	b.n	462a4 <read_publish_payload+0x44>
	NULL_PARAM_CHECK(client);
   462b8:	f06f 0415 	mvn.w	r4, #21
   462bc:	e7f5      	b.n	462aa <read_publish_payload+0x4a>

000462be <client_write>:
{
   462be:	b538      	push	{r3, r4, r5, lr}
   462c0:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   462c2:	f7e3 fda1 	bl	29e08 <mqtt_transport_write>
	if (err_code < 0) {
   462c6:	1e04      	subs	r4, r0, #0
   462c8:	da05      	bge.n	462d6 <client_write+0x18>
		client_disconnect(client, err_code, true);
   462ca:	4621      	mov	r1, r4
   462cc:	4628      	mov	r0, r5
   462ce:	f7ff ffad 	bl	4622c <client_disconnect.constprop.3>
}
   462d2:	4620      	mov	r0, r4
   462d4:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   462d6:	f7ff ff7c 	bl	461d2 <k_uptime_get>
	return 0;
   462da:	2400      	movs	r4, #0
   462dc:	6168      	str	r0, [r5, #20]
   462de:	e7f8      	b.n	462d2 <client_write+0x14>

000462e0 <mqtt_client_init>:
{
   462e0:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK_VOID(client);
   462e2:	4604      	mov	r4, r0
   462e4:	b1a0      	cbz	r0, 46310 <mqtt_client_init+0x30>
	MQTT_STATE_INIT(client);
   462e6:	2500      	movs	r5, #0
   462e8:	2280      	movs	r2, #128	; 0x80
   462ea:	2100      	movs	r1, #0
   462ec:	f001 ff6c 	bl	481c8 <memset>
   462f0:	61a5      	str	r5, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   462f2:	4620      	mov	r0, r4
   462f4:	f001 fd80 	bl	47df8 <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   462f8:	2304      	movs	r3, #4
   462fa:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   462fe:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   46302:	f365 0341 	bfi	r3, r5, #1, #1
   46306:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   4630a:	2378      	movs	r3, #120	; 0x78
   4630c:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   46310:	bd38      	pop	{r3, r4, r5, pc}

00046312 <mqtt_connect>:
{
   46312:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   46314:	4604      	mov	r4, r0
   46316:	2800      	cmp	r0, #0
   46318:	d03b      	beq.n	46392 <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   4631a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   4631c:	2b00      	cmp	r3, #0
   4631e:	d038      	beq.n	46392 <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   46320:	f7e3 fdd0 	bl	29ec4 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   46324:	6f23      	ldr	r3, [r4, #112]	; 0x70
   46326:	b38b      	cbz	r3, 4638c <mqtt_connect+0x7a>
   46328:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   4632a:	b37b      	cbz	r3, 4638c <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   4632c:	4620      	mov	r0, r4
   4632e:	f7e3 fd61 	bl	29df4 <mqtt_transport_connect>
	if (err_code < 0) {
   46332:	1e05      	subs	r5, r0, #0
   46334:	db24      	blt.n	46380 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   46336:	4669      	mov	r1, sp
   46338:	4620      	mov	r0, r4
   4633a:	f7ff ff58 	bl	461ee <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   4633e:	69a3      	ldr	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   46340:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   46342:	f043 0302 	orr.w	r3, r3, #2
   46346:	61a3      	str	r3, [r4, #24]
	err_code = connect_request_encode(client, &packet);
   46348:	4620      	mov	r0, r4
   4634a:	f7e3 fcaf 	bl	29cac <connect_request_encode>
	if (err_code < 0) {
   4634e:	1e05      	subs	r5, r0, #0
   46350:	db13      	blt.n	4637a <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   46352:	e9dd 1200 	ldrd	r1, r2, [sp]
   46356:	4620      	mov	r0, r4
   46358:	1a52      	subs	r2, r2, r1
   4635a:	f7e3 fd55 	bl	29e08 <mqtt_transport_write>
	if (err_code < 0) {
   4635e:	1e05      	subs	r5, r0, #0
   46360:	db0b      	blt.n	4637a <mqtt_connect+0x68>
   46362:	f7ff ff36 	bl	461d2 <k_uptime_get>
	client->unacked_ping = 0;
   46366:	2500      	movs	r5, #0
   46368:	6160      	str	r0, [r4, #20]
   4636a:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   4636e:	4620      	mov	r0, r4
   46370:	f7e3 fd7c 	bl	29e6c <mqtt_mutex_unlock>
}
   46374:	4628      	mov	r0, r5
   46376:	b003      	add	sp, #12
   46378:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   4637a:	4620      	mov	r0, r4
   4637c:	f7e3 fd6c 	bl	29e58 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   46380:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   46382:	e9c4 3305 	strd	r3, r3, [r4, #20]
	client->internal.remaining_payload = 0U;
   46386:	e9c4 3307 	strd	r3, r3, [r4, #28]
   4638a:	e7f0      	b.n	4636e <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   4638c:	f06f 050b 	mvn.w	r5, #11
   46390:	e7f6      	b.n	46380 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   46392:	f06f 0515 	mvn.w	r5, #21
   46396:	e7ed      	b.n	46374 <mqtt_connect+0x62>

00046398 <mqtt_publish>:
{
   46398:	b570      	push	{r4, r5, r6, lr}
   4639a:	460e      	mov	r6, r1
   4639c:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   4639e:	4605      	mov	r5, r0
   463a0:	2800      	cmp	r0, #0
   463a2:	d03b      	beq.n	4641c <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   463a4:	2900      	cmp	r1, #0
   463a6:	d039      	beq.n	4641c <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   463a8:	f7e3 fd8c 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   463ac:	a901      	add	r1, sp, #4
   463ae:	4628      	mov	r0, r5
   463b0:	f7ff ff1d 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   463b4:	69ab      	ldr	r3, [r5, #24]
   463b6:	075b      	lsls	r3, r3, #29
   463b8:	d52d      	bpl.n	46416 <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   463ba:	a901      	add	r1, sp, #4
   463bc:	4630      	mov	r0, r6
   463be:	f7ff fd06 	bl	45dce <publish_encode>
	if (err_code < 0) {
   463c2:	1e04      	subs	r4, r0, #0
   463c4:	db1c      	blt.n	46400 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   463c6:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   463c8:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   463ca:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   463cc:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   463ce:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   463d0:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   463d2:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   463d4:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   463d6:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   463d8:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   463da:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   463de:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   463e0:	f001 fef2 	bl	481c8 <memset>
	msg.msg_iov = io_vector;
   463e4:	ab03      	add	r3, sp, #12
   463e6:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   463e8:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   463ea:	a907      	add	r1, sp, #28
   463ec:	4628      	mov	r0, r5
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   463ee:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   463f0:	f7e3 fd16 	bl	29e20 <mqtt_transport_write_msg>
	if (err_code < 0) {
   463f4:	1e04      	subs	r4, r0, #0
   463f6:	da09      	bge.n	4640c <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   463f8:	4621      	mov	r1, r4
   463fa:	4628      	mov	r0, r5
   463fc:	f7ff ff16 	bl	4622c <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   46400:	4628      	mov	r0, r5
   46402:	f7e3 fd33 	bl	29e6c <mqtt_mutex_unlock>
}
   46406:	4620      	mov	r0, r4
   46408:	b00e      	add	sp, #56	; 0x38
   4640a:	bd70      	pop	{r4, r5, r6, pc}
   4640c:	f7ff fee1 	bl	461d2 <k_uptime_get>
	return 0;
   46410:	2400      	movs	r4, #0
   46412:	6168      	str	r0, [r5, #20]
   46414:	e7f4      	b.n	46400 <mqtt_publish+0x68>
		return -ENOTCONN;
   46416:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   4641a:	e7f1      	b.n	46400 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   4641c:	f06f 0415 	mvn.w	r4, #21
   46420:	e7f1      	b.n	46406 <mqtt_publish+0x6e>

00046422 <mqtt_publish_qos1_ack>:
{
   46422:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46424:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   46426:	4605      	mov	r5, r0
   46428:	b1f8      	cbz	r0, 4646a <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   4642a:	b1f1      	cbz	r1, 4646a <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   4642c:	f7e3 fd4a 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   46430:	4669      	mov	r1, sp
   46432:	4628      	mov	r0, r5
   46434:	f7ff fedb 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   46438:	69ab      	ldr	r3, [r5, #24]
   4643a:	075b      	lsls	r3, r3, #29
   4643c:	d512      	bpl.n	46464 <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   4643e:	4620      	mov	r0, r4
   46440:	4669      	mov	r1, sp
   46442:	f7ff fd00 	bl	45e46 <publish_ack_encode>
	if (err_code < 0) {
   46446:	1e04      	subs	r4, r0, #0
   46448:	db06      	blt.n	46458 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   4644a:	e9dd 1200 	ldrd	r1, r2, [sp]
   4644e:	4628      	mov	r0, r5
   46450:	1a52      	subs	r2, r2, r1
   46452:	f7ff ff34 	bl	462be <client_write>
   46456:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   46458:	4628      	mov	r0, r5
   4645a:	f7e3 fd07 	bl	29e6c <mqtt_mutex_unlock>
}
   4645e:	4620      	mov	r0, r4
   46460:	b003      	add	sp, #12
   46462:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   46464:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   46468:	e7f6      	b.n	46458 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   4646a:	f06f 0415 	mvn.w	r4, #21
   4646e:	e7f6      	b.n	4645e <mqtt_publish_qos1_ack+0x3c>

00046470 <mqtt_disconnect>:
{
   46470:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   46472:	4604      	mov	r4, r0
   46474:	b310      	cbz	r0, 464bc <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   46476:	f7e3 fd25 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4647a:	4669      	mov	r1, sp
   4647c:	4620      	mov	r0, r4
   4647e:	f7ff feb6 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   46482:	69a3      	ldr	r3, [r4, #24]
   46484:	075b      	lsls	r3, r3, #29
   46486:	d516      	bpl.n	464b6 <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   46488:	4668      	mov	r0, sp
   4648a:	f7e3 fc8f 	bl	29dac <disconnect_encode>
	if (err_code < 0) {
   4648e:	1e05      	subs	r5, r0, #0
   46490:	db0b      	blt.n	464aa <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   46492:	e9dd 1200 	ldrd	r1, r2, [sp]
   46496:	4620      	mov	r0, r4
   46498:	1a52      	subs	r2, r2, r1
   4649a:	f7ff ff10 	bl	462be <client_write>
	if (err_code < 0) {
   4649e:	1e05      	subs	r5, r0, #0
   464a0:	db03      	blt.n	464aa <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   464a2:	2100      	movs	r1, #0
   464a4:	4620      	mov	r0, r4
   464a6:	f7ff fec1 	bl	4622c <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   464aa:	4620      	mov	r0, r4
   464ac:	f7e3 fcde 	bl	29e6c <mqtt_mutex_unlock>
}
   464b0:	4628      	mov	r0, r5
   464b2:	b003      	add	sp, #12
   464b4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   464b6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   464ba:	e7f6      	b.n	464aa <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   464bc:	f06f 0515 	mvn.w	r5, #21
   464c0:	e7f6      	b.n	464b0 <mqtt_disconnect+0x40>

000464c2 <mqtt_subscribe>:
{
   464c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   464c4:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   464c6:	4605      	mov	r5, r0
   464c8:	b1f8      	cbz	r0, 4650a <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   464ca:	b1f1      	cbz	r1, 4650a <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   464cc:	f7e3 fcfa 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   464d0:	4669      	mov	r1, sp
   464d2:	4628      	mov	r0, r5
   464d4:	f7ff fe8b 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   464d8:	69ab      	ldr	r3, [r5, #24]
   464da:	075b      	lsls	r3, r3, #29
   464dc:	d512      	bpl.n	46504 <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   464de:	4620      	mov	r0, r4
   464e0:	4669      	mov	r1, sp
   464e2:	f7ff fcb5 	bl	45e50 <subscribe_encode>
	if (err_code < 0) {
   464e6:	1e04      	subs	r4, r0, #0
   464e8:	db06      	blt.n	464f8 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   464ea:	e9dd 1200 	ldrd	r1, r2, [sp]
   464ee:	4628      	mov	r0, r5
   464f0:	1a52      	subs	r2, r2, r1
   464f2:	f7ff fee4 	bl	462be <client_write>
   464f6:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   464f8:	4628      	mov	r0, r5
   464fa:	f7e3 fcb7 	bl	29e6c <mqtt_mutex_unlock>
}
   464fe:	4620      	mov	r0, r4
   46500:	b003      	add	sp, #12
   46502:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   46504:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   46508:	e7f6      	b.n	464f8 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   4650a:	f06f 0415 	mvn.w	r4, #21
   4650e:	e7f6      	b.n	464fe <mqtt_subscribe+0x3c>

00046510 <mqtt_unsubscribe>:
{
   46510:	b537      	push	{r0, r1, r2, r4, r5, lr}
   46512:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   46514:	4605      	mov	r5, r0
   46516:	b1f8      	cbz	r0, 46558 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   46518:	b1f1      	cbz	r1, 46558 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   4651a:	f7e3 fcd3 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   4651e:	4669      	mov	r1, sp
   46520:	4628      	mov	r0, r5
   46522:	f7ff fe64 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   46526:	69ab      	ldr	r3, [r5, #24]
   46528:	075b      	lsls	r3, r3, #29
   4652a:	d512      	bpl.n	46552 <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   4652c:	4620      	mov	r0, r4
   4652e:	4669      	mov	r1, sp
   46530:	f7ff fcc5 	bl	45ebe <unsubscribe_encode>
	if (err_code < 0) {
   46534:	1e04      	subs	r4, r0, #0
   46536:	db06      	blt.n	46546 <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   46538:	e9dd 1200 	ldrd	r1, r2, [sp]
   4653c:	4628      	mov	r0, r5
   4653e:	1a52      	subs	r2, r2, r1
   46540:	f7ff febd 	bl	462be <client_write>
   46544:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   46546:	4628      	mov	r0, r5
   46548:	f7e3 fc90 	bl	29e6c <mqtt_mutex_unlock>
}
   4654c:	4620      	mov	r0, r4
   4654e:	b003      	add	sp, #12
   46550:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   46552:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   46556:	e7f6      	b.n	46546 <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   46558:	f06f 0415 	mvn.w	r4, #21
   4655c:	e7f6      	b.n	4654c <mqtt_unsubscribe+0x3c>

0004655e <mqtt_ping>:
{
   4655e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   46560:	4604      	mov	r4, r0
   46562:	b320      	cbz	r0, 465ae <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   46564:	f7e3 fcae 	bl	29ec4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   46568:	4669      	mov	r1, sp
   4656a:	4620      	mov	r0, r4
   4656c:	f7ff fe3f 	bl	461ee <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   46570:	69a3      	ldr	r3, [r4, #24]
   46572:	075b      	lsls	r3, r3, #29
   46574:	d518      	bpl.n	465a8 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   46576:	4668      	mov	r0, sp
   46578:	f7e3 fc2a 	bl	29dd0 <ping_request_encode>
	if (err_code < 0) {
   4657c:	1e05      	subs	r5, r0, #0
   4657e:	db0d      	blt.n	4659c <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   46580:	e9dd 1200 	ldrd	r1, r2, [sp]
   46584:	4620      	mov	r0, r4
   46586:	1a52      	subs	r2, r2, r1
   46588:	f7ff fe99 	bl	462be <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   4658c:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   46590:	4605      	mov	r5, r0
	if (client->unacked_ping >= INT8_MAX) {
   46592:	2b7f      	cmp	r3, #127	; 0x7f
   46594:	d002      	beq.n	4659c <mqtt_ping+0x3e>
		client->unacked_ping++;
   46596:	3301      	adds	r3, #1
   46598:	f884 307b 	strb.w	r3, [r4, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   4659c:	4620      	mov	r0, r4
   4659e:	f7e3 fc65 	bl	29e6c <mqtt_mutex_unlock>
}
   465a2:	4628      	mov	r0, r5
   465a4:	b003      	add	sp, #12
   465a6:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   465a8:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   465ac:	e7f6      	b.n	4659c <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   465ae:	f06f 0515 	mvn.w	r5, #21
   465b2:	e7f6      	b.n	465a2 <mqtt_ping+0x44>

000465b4 <mqtt_live>:
{
   465b4:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   465b6:	4606      	mov	r6, r0
   465b8:	b300      	cbz	r0, 465fc <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   465ba:	f7e3 fc83 	bl	29ec4 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   465be:	6974      	ldr	r4, [r6, #20]
   465c0:	f7ff fe07 	bl	461d2 <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   465c4:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   465c6:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   465ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   465ce:	b19c      	cbz	r4, 465f8 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   465d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   465d4:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   465d6:	4284      	cmp	r4, r0
   465d8:	d80d      	bhi.n	465f6 <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   465da:	4630      	mov	r0, r6
   465dc:	f7ff ffbf 	bl	4655e <mqtt_ping>
		ping_sent = true;
   465e0:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   465e2:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   465e4:	4630      	mov	r0, r6
   465e6:	f7e3 fc41 	bl	29e6c <mqtt_mutex_unlock>
		return -EAGAIN;
   465ea:	2c00      	cmp	r4, #0
   465ec:	bf08      	it	eq
   465ee:	f06f 050a 	mvneq.w	r5, #10
}
   465f2:	4628      	mov	r0, r5
   465f4:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   465f6:	2400      	movs	r4, #0
	int err_code = 0;
   465f8:	4625      	mov	r5, r4
   465fa:	e7f3      	b.n	465e4 <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   465fc:	f06f 0515 	mvn.w	r5, #21
   46600:	e7f7      	b.n	465f2 <mqtt_live+0x3e>

00046602 <mqtt_keepalive_time_left>:
{
   46602:	b538      	push	{r3, r4, r5, lr}
   46604:	4605      	mov	r5, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   46606:	6944      	ldr	r4, [r0, #20]
   46608:	f7ff fde3 	bl	461d2 <k_uptime_get>
	int32_t diff = k_uptime_get_32() - last_activity;
   4660c:	1b04      	subs	r4, r0, r4
	uint32_t keepalive_ms = 1000U * client->keepalive;
   4660e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   46612:	f8b5 2078 	ldrh.w	r2, [r5, #120]	; 0x78
		return 0;
   46616:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   4661a:	4350      	muls	r0, r2
	if (client->keepalive == 0) {
   4661c:	b11a      	cbz	r2, 46626 <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   4661e:	42a0      	cmp	r0, r4
   46620:	d904      	bls.n	4662c <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   46622:	1b00      	subs	r0, r0, r4
}
   46624:	bd38      	pop	{r3, r4, r5, pc}
		return UINT32_MAX;
   46626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4662a:	e7fb      	b.n	46624 <mqtt_keepalive_time_left+0x22>
		return 0;
   4662c:	2000      	movs	r0, #0
   4662e:	e7f9      	b.n	46624 <mqtt_keepalive_time_left+0x22>

00046630 <mqtt_input>:
{
   46630:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   46632:	4605      	mov	r5, r0
   46634:	b1d0      	cbz	r0, 4666c <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   46636:	f7e3 fc45 	bl	29ec4 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   4663a:	69ab      	ldr	r3, [r5, #24]
   4663c:	079b      	lsls	r3, r3, #30
   4663e:	d50f      	bpl.n	46660 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   46640:	6a2b      	ldr	r3, [r5, #32]
   46642:	b983      	cbnz	r3, 46666 <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   46644:	4628      	mov	r0, r5
   46646:	f7ff fc8a 	bl	45f5e <mqtt_handle_rx>
	if (err_code < 0) {
   4664a:	1e04      	subs	r4, r0, #0
   4664c:	da03      	bge.n	46656 <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   4664e:	4621      	mov	r1, r4
   46650:	4628      	mov	r0, r5
   46652:	f7ff fdeb 	bl	4622c <client_disconnect.constprop.3>
	mqtt_mutex_unlock(client);
   46656:	4628      	mov	r0, r5
   46658:	f7e3 fc08 	bl	29e6c <mqtt_mutex_unlock>
}
   4665c:	4620      	mov	r0, r4
   4665e:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   46660:	f06f 040c 	mvn.w	r4, #12
   46664:	e7f7      	b.n	46656 <mqtt_input+0x26>
		return -EBUSY;
   46666:	f06f 040f 	mvn.w	r4, #15
   4666a:	e7f4      	b.n	46656 <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   4666c:	f06f 0415 	mvn.w	r4, #21
   46670:	e7f4      	b.n	4665c <mqtt_input+0x2c>

00046672 <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   46672:	2301      	movs	r3, #1
   46674:	f7ff bdf4 	b.w	46260 <read_publish_payload>

00046678 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   46678:	b570      	push	{r4, r5, r6, lr}
   4667a:	4606      	mov	r6, r0
   4667c:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   4667e:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   46680:	42ac      	cmp	r4, r5
   46682:	d301      	bcc.n	46688 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   46684:	2000      	movs	r0, #0
}
   46686:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   46688:	1b2a      	subs	r2, r5, r4
   4668a:	4621      	mov	r1, r4
   4668c:	4630      	mov	r0, r6
   4668e:	f7ff fff0 	bl	46672 <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   46692:	2800      	cmp	r0, #0
   46694:	dbf7      	blt.n	46686 <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   46696:	d001      	beq.n	4669c <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   46698:	4404      	add	r4, r0
   4669a:	e7f1      	b.n	46680 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   4669c:	f06f 0004 	mvn.w	r0, #4
   466a0:	e7f1      	b.n	46686 <mqtt_readall_publish_payload+0xe>

000466a2 <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   466a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct sockaddr *broker = client->broker;
   466a4:	6d06      	ldr	r6, [r0, #80]	; 0x50
{
   466a6:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = socket(broker->sa_family,
   466a8:	8830      	ldrh	r0, [r6, #0]
	return z_impl_zsock_socket(family, type, proto);
   466aa:	f44f 7281 	mov.w	r2, #258	; 0x102
   466ae:	2101      	movs	r1, #1
   466b0:	f7de fed4 	bl	2545c <z_impl_zsock_socket>
					    SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   466b4:	2800      	cmp	r0, #0
	client->transport.tls.sock = socket(broker->sa_family,
   466b6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   466b8:	da05      	bge.n	466c6 <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void)close(client->transport.tls.sock);
	return -errno;
   466ba:	f7ff f993 	bl	459e4 <__errno>
   466be:	6800      	ldr	r0, [r0, #0]
   466c0:	4240      	negs	r0, r0
}
   466c2:	b003      	add	sp, #12
   466c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   466c6:	2304      	movs	r3, #4
   466c8:	2205      	movs	r2, #5
   466ca:	9300      	str	r3, [sp, #0]
   466cc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   466d0:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   466d4:	f7fe fc7a 	bl	44fcc <z_impl_zsock_setsockopt>
	if (ret < 0) {
   466d8:	2800      	cmp	r0, #0
   466da:	da03      	bge.n	466e4 <mqtt_client_tls_connect+0x42>
	(void)close(client->transport.tls.sock);
   466dc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   466de:	f7fe fbdd 	bl	44e9c <z_impl_zsock_close>
   466e2:	e7ea      	b.n	466ba <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   466e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   466e6:	bb03      	cbnz	r3, 4672a <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   466e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   466ea:	bb63      	cbnz	r3, 46746 <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   466ec:	6c25      	ldr	r5, [r4, #64]	; 0x40
   466ee:	2d00      	cmp	r5, #0
   466f0:	d137      	bne.n	46762 <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   466f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   466f4:	2b01      	cmp	r3, #1
   466f6:	d10b      	bne.n	46710 <mqtt_client_tls_connect+0x6e>
   466f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   466fa:	2304      	movs	r3, #4
   466fc:	2207      	movs	r2, #7
   466fe:	9300      	str	r3, [sp, #0]
   46700:	f44f 718d 	mov.w	r1, #282	; 0x11a
   46704:	f104 0344 	add.w	r3, r4, #68	; 0x44
   46708:	f7fe fc60 	bl	44fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4670c:	2800      	cmp	r0, #0
   4670e:	dbe5      	blt.n	466dc <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   46710:	8833      	ldrh	r3, [r6, #0]
	ret = connect(client->transport.tls.sock, client->broker,
   46712:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   46714:	2b01      	cmp	r3, #1
   46716:	bf0c      	ite	eq
   46718:	2208      	moveq	r2, #8
   4671a:	2218      	movne	r2, #24
	ret = connect(client->transport.tls.sock, client->broker,
   4671c:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   4671e:	f7fe fbd4 	bl	44eca <z_impl_zsock_connect>
	if (ret < 0) {
   46722:	2800      	cmp	r0, #0
   46724:	dbda      	blt.n	466dc <mqtt_client_tls_connect+0x3a>
	return 0;
   46726:	2000      	movs	r0, #0
   46728:	e7cb      	b.n	466c2 <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   4672a:	6b22      	ldr	r2, [r4, #48]	; 0x30
   4672c:	2a00      	cmp	r2, #0
   4672e:	d0db      	beq.n	466e8 <mqtt_client_tls_connect+0x46>
   46730:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   46732:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   46734:	9200      	str	r2, [sp, #0]
   46736:	f44f 718d 	mov.w	r1, #282	; 0x11a
   4673a:	2203      	movs	r2, #3
   4673c:	f7fe fc46 	bl	44fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   46740:	2800      	cmp	r0, #0
   46742:	dad1      	bge.n	466e8 <mqtt_client_tls_connect+0x46>
   46744:	e7ca      	b.n	466dc <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   46746:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   46748:	2a00      	cmp	r2, #0
   4674a:	d0cf      	beq.n	466ec <mqtt_client_tls_connect+0x4a>
   4674c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   4674e:	0092      	lsls	r2, r2, #2
   46750:	9200      	str	r2, [sp, #0]
   46752:	f44f 718d 	mov.w	r1, #282	; 0x11a
   46756:	2201      	movs	r2, #1
   46758:	f7fe fc38 	bl	44fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4675c:	2800      	cmp	r0, #0
   4675e:	dac5      	bge.n	466ec <mqtt_client_tls_connect+0x4a>
   46760:	e7bc      	b.n	466dc <mqtt_client_tls_connect+0x3a>
		ret = setsockopt(client->transport.tls.sock, SOL_TLS,
   46762:	4628      	mov	r0, r5
   46764:	6aa7      	ldr	r7, [r4, #40]	; 0x28
   46766:	f7d6 fd7d 	bl	1d264 <strlen>
   4676a:	2202      	movs	r2, #2
   4676c:	9000      	str	r0, [sp, #0]
   4676e:	462b      	mov	r3, r5
   46770:	f44f 718d 	mov.w	r1, #282	; 0x11a
   46774:	4638      	mov	r0, r7
   46776:	f7fe fc29 	bl	44fcc <z_impl_zsock_setsockopt>
		if (ret < 0) {
   4677a:	2800      	cmp	r0, #0
   4677c:	dab9      	bge.n	466f2 <mqtt_client_tls_connect+0x50>
   4677e:	e7ad      	b.n	466dc <mqtt_client_tls_connect+0x3a>

00046780 <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   46780:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   46784:	2400      	movs	r4, #0
{
   46786:	4607      	mov	r7, r0
   46788:	4688      	mov	r8, r1
   4678a:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   4678c:	4626      	mov	r6, r4
	int ret;

	while (offset < datalen) {
   4678e:	42ac      	cmp	r4, r5
   46790:	d301      	bcc.n	46796 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   46792:	2000      	movs	r0, #0
   46794:	e00e      	b.n	467b4 <mqtt_client_tls_write+0x34>
		ret = send(client->transport.tls.sock, data + offset,
   46796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   46798:	2300      	movs	r3, #0
   4679a:	e9cd 6600 	strd	r6, r6, [sp]
   4679e:	1b2a      	subs	r2, r5, r4
   467a0:	eb08 0104 	add.w	r1, r8, r4
   467a4:	f7fe fba7 	bl	44ef6 <z_impl_zsock_sendto>
		if (ret < 0) {
   467a8:	2800      	cmp	r0, #0
   467aa:	da06      	bge.n	467ba <mqtt_client_tls_write+0x3a>
			return -errno;
   467ac:	f7ff f91a 	bl	459e4 <__errno>
   467b0:	6800      	ldr	r0, [r0, #0]
   467b2:	4240      	negs	r0, r0
}
   467b4:	b002      	add	sp, #8
   467b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   467ba:	4404      	add	r4, r0
   467bc:	e7e7      	b.n	4678e <mqtt_client_tls_write+0xe>

000467be <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   467be:	b508      	push	{r3, lr}
	int ret;

	ret = sendmsg(client->transport.tls.sock, message, 0);
   467c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   467c2:	2200      	movs	r2, #0
   467c4:	f7fe fbb4 	bl	44f30 <z_impl_zsock_sendmsg>
	if (ret < 0) {
   467c8:	2800      	cmp	r0, #0
   467ca:	da04      	bge.n	467d6 <mqtt_client_tls_write_msg+0x18>
		return -errno;
   467cc:	f7ff f90a 	bl	459e4 <__errno>
   467d0:	6800      	ldr	r0, [r0, #0]
   467d2:	4240      	negs	r0, r0
	}

	return 0;
}
   467d4:	bd08      	pop	{r3, pc}
	return 0;
   467d6:	2000      	movs	r0, #0
   467d8:	e7fc      	b.n	467d4 <mqtt_client_tls_write_msg+0x16>

000467da <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   467da:	b513      	push	{r0, r1, r4, lr}
   467dc:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   467de:	2b00      	cmp	r3, #0
		flags |= MSG_DONTWAIT;
   467e0:	bf14      	ite	ne
   467e2:	4623      	movne	r3, r4
   467e4:	2340      	moveq	r3, #64	; 0x40
	}

	ret = recv(client->transport.tls.sock, data, buflen, flags);
   467e6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   467e8:	e9cd 4400 	strd	r4, r4, [sp]
   467ec:	f7fe fbb6 	bl	44f5c <z_impl_zsock_recvfrom>
	if (ret < 0) {
   467f0:	2800      	cmp	r0, #0
   467f2:	da03      	bge.n	467fc <mqtt_client_tls_read+0x22>
		return -errno;
   467f4:	f7ff f8f6 	bl	459e4 <__errno>
   467f8:	6800      	ldr	r0, [r0, #0]
   467fa:	4240      	negs	r0, r0
	}

	return ret;
}
   467fc:	b002      	add	sp, #8
   467fe:	bd10      	pop	{r4, pc}

00046800 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   46800:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = close(client->transport.tls.sock);
   46802:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   46804:	f7fe fb4a 	bl	44e9c <z_impl_zsock_close>
	if (ret < 0) {
   46808:	2800      	cmp	r0, #0
   4680a:	da04      	bge.n	46816 <mqtt_client_tls_disconnect+0x16>
		return -errno;
   4680c:	f7ff f8ea 	bl	459e4 <__errno>
   46810:	6800      	ldr	r0, [r0, #0]
   46812:	4240      	negs	r0, r0
	}

	return 0;
}
   46814:	bd08      	pop	{r3, pc}
	return 0;
   46816:	2000      	movs	r0, #0
   46818:	e7fc      	b.n	46814 <mqtt_client_tls_disconnect+0x14>

0004681a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4681a:	6843      	ldr	r3, [r0, #4]
}
   4681c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4681e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   46820:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   46822:	600b      	str	r3, [r1, #0]
}
   46824:	4770      	bx	lr

00046826 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   46826:	6843      	ldr	r3, [r0, #4]
   46828:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   4682a:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   4682c:	4042      	eors	r2, r0
   4682e:	400a      	ands	r2, r1
   46830:	4042      	eors	r2, r0
    p_reg->OUT = value;
   46832:	605a      	str	r2, [r3, #4]
}
   46834:	2000      	movs	r0, #0
   46836:	4770      	bx	lr

00046838 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   46838:	6843      	ldr	r3, [r0, #4]
}
   4683a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4683c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   4683e:	6099      	str	r1, [r3, #8]
}
   46840:	4770      	bx	lr

00046842 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   46842:	6843      	ldr	r3, [r0, #4]
}
   46844:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   46846:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   46848:	60d9      	str	r1, [r3, #12]
}
   4684a:	4770      	bx	lr

0004684c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   4684c:	6843      	ldr	r3, [r0, #4]
}
   4684e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   46850:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   46852:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   46854:	4059      	eors	r1, r3
    p_reg->OUT = value;
   46856:	6051      	str	r1, [r2, #4]
}
   46858:	4770      	bx	lr

0004685a <nrf_gpio_cfg_sense_set>:
{
   4685a:	b513      	push	{r0, r1, r4, lr}
   4685c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   4685e:	a801      	add	r0, sp, #4
{
   46860:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46862:	f7e3 fba7 	bl	29fb4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   46866:	9a01      	ldr	r2, [sp, #4]
   46868:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   4686c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   46870:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   46874:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   46878:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   4687c:	b002      	add	sp, #8
   4687e:	bd10      	pop	{r4, pc}

00046880 <flash_nrf_write_protection>:
}
   46880:	2000      	movs	r0, #0
   46882:	4770      	bx	lr

00046884 <is_regular_addr_valid>:
{
   46884:	b538      	push	{r3, r4, r5, lr}
   46886:	4604      	mov	r4, r0
   46888:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   4688a:	f001 fa84 	bl	47d96 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   4688e:	4284      	cmp	r4, r0
   46890:	d209      	bcs.n	468a6 <is_regular_addr_valid+0x22>
   46892:	2c00      	cmp	r4, #0
   46894:	db07      	blt.n	468a6 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   46896:	42a8      	cmp	r0, r5
   46898:	d305      	bcc.n	468a6 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   4689a:	442c      	add	r4, r5
	    len > flash_size ||
   4689c:	4284      	cmp	r4, r0
   4689e:	bf8c      	ite	hi
   468a0:	2000      	movhi	r0, #0
   468a2:	2001      	movls	r0, #1
}
   468a4:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   468a6:	2000      	movs	r0, #0
   468a8:	e7fc      	b.n	468a4 <is_regular_addr_valid+0x20>

000468aa <flash_nrf_read>:
{
   468aa:	b570      	push	{r4, r5, r6, lr}
   468ac:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   468ae:	4619      	mov	r1, r3
   468b0:	4628      	mov	r0, r5
{
   468b2:	4616      	mov	r6, r2
   468b4:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   468b6:	f7ff ffe5 	bl	46884 <is_regular_addr_valid>
   468ba:	b170      	cbz	r0, 468da <flash_nrf_read+0x30>
	if (!len) {
   468bc:	b184      	cbz	r4, 468e0 <flash_nrf_read+0x36>
	if (addr < PM_APP_ADDRESS) {
   468be:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   468c2:	4622      	mov	r2, r4
   468c4:	4629      	mov	r1, r5
   468c6:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   468c8:	da03      	bge.n	468d2 <flash_nrf_read+0x28>
}
   468ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return spm_request_read(data, addr, len);
   468ce:	f7d1 bb87 	b.w	17fe0 <spm_request_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   468d2:	f001 fc59 	bl	48188 <memcpy>
   468d6:	2000      	movs	r0, #0
}
   468d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   468da:	f06f 0015 	mvn.w	r0, #21
   468de:	e7fb      	b.n	468d8 <flash_nrf_read+0x2e>
		return 0;
   468e0:	4620      	mov	r0, r4
   468e2:	e7f9      	b.n	468d8 <flash_nrf_read+0x2e>

000468e4 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   468e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   468e8:	461d      	mov	r5, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   468ea:	6883      	ldr	r3, [r0, #8]
{
   468ec:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   468ee:	695b      	ldr	r3, [r3, #20]
   468f0:	4669      	mov	r1, sp
{
   468f2:	4616      	mov	r6, r2
	api->page_layout(dev, &layout, &layout_size);
   468f4:	aa01      	add	r2, sp, #4
   468f6:	4798      	blx	r3

	while (layout_size--) {
   468f8:	e9dd 1200 	ldrd	r1, r2, [sp]
   468fc:	2300      	movs	r3, #0
	off_t end = 0;
   468fe:	4618      	mov	r0, r3
	off_t group_offs = 0;
   46900:	469e      	mov	lr, r3
	size_t page_count = 0;
   46902:	469c      	mov	ip, r3
   46904:	3a01      	subs	r2, #1
	while (layout_size--) {
   46906:	1c57      	adds	r7, r2, #1
   46908:	d102      	bne.n	46910 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   4690a:	f06f 0015 	mvn.w	r0, #21
   4690e:	e01a      	b.n	46946 <flash_get_page_info+0x62>
		if (use_addr) {
   46910:	f8d1 8000 	ldr.w	r8, [r1]
   46914:	b1d6      	cbz	r6, 4694c <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   46916:	684f      	ldr	r7, [r1, #4]
   46918:	fb07 0008 	mla	r0, r7, r8, r0
		if (offs < end) {
   4691c:	42a0      	cmp	r0, r4
   4691e:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
   46922:	dd18      	ble.n	46956 <flash_get_page_info+0x72>
   46924:	9201      	str	r2, [sp, #4]
   46926:	b103      	cbz	r3, 4692a <flash_get_page_info+0x46>
   46928:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   4692a:	9b00      	ldr	r3, [sp, #0]
   4692c:	685b      	ldr	r3, [r3, #4]
   4692e:	606b      	str	r3, [r5, #4]
			if (use_addr) {
   46930:	b176      	cbz	r6, 46950 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   46932:	eba4 040e 	sub.w	r4, r4, lr
   46936:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   4693a:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   4693c:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   46940:	4464      	add	r4, ip
			info->start_offset = group_offs +
   46942:	602b      	str	r3, [r5, #0]
			info->index = page_count + num_in_group;
   46944:	60ac      	str	r4, [r5, #8]
}
   46946:	b002      	add	sp, #8
   46948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   4694c:	4440      	add	r0, r8
   4694e:	e7e5      	b.n	4691c <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   46950:	eba4 040c 	sub.w	r4, r4, ip
   46954:	e7f1      	b.n	4693a <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   46956:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   46958:	44c4      	add	ip, r8
		group_offs += layout->pages_count * layout->pages_size;
   4695a:	fb03 ee08 	mla	lr, r3, r8, lr
		layout++;
   4695e:	3108      	adds	r1, #8
   46960:	2301      	movs	r3, #1
   46962:	463a      	mov	r2, r7
   46964:	e7cf      	b.n	46906 <flash_get_page_info+0x22>

00046966 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
	return flash_get_page_info(dev, offs, true, info);
   46966:	4613      	mov	r3, r2
   46968:	2201      	movs	r2, #1
   4696a:	f7ff bfbb 	b.w	468e4 <flash_get_page_info>

0004696e <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   4696e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   46972:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   46974:	6883      	ldr	r3, [r0, #8]
{
   46976:	b086      	sub	sp, #24
   46978:	4689      	mov	r9, r1
   4697a:	4692      	mov	sl, r2
	api->page_layout(dev, &layout, &num_blocks);
   4697c:	695b      	ldr	r3, [r3, #20]
   4697e:	aa02      	add	r2, sp, #8
   46980:	a901      	add	r1, sp, #4
   46982:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   46984:	46a0      	mov	r8, r4

	for (block = 0; block < num_blocks; block++) {
   46986:	4625      	mov	r5, r4
   46988:	9b02      	ldr	r3, [sp, #8]
   4698a:	42ab      	cmp	r3, r5
   4698c:	d802      	bhi.n	46994 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   4698e:	b006      	add	sp, #24
   46990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   46994:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   46996:	9f01      	ldr	r7, [sp, #4]
   46998:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   4699c:	687b      	ldr	r3, [r7, #4]
   4699e:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   469a0:	683a      	ldr	r2, [r7, #0]
   469a2:	eb08 0306 	add.w	r3, r8, r6
   469a6:	42b2      	cmp	r2, r6
   469a8:	d802      	bhi.n	469b0 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   469aa:	3501      	adds	r5, #1
   469ac:	4698      	mov	r8, r3
   469ae:	e7eb      	b.n	46988 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   469b0:	4651      	mov	r1, sl
   469b2:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   469b4:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   469b6:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   469b8:	47c8      	blx	r9
   469ba:	2800      	cmp	r0, #0
   469bc:	d0e7      	beq.n	4698e <flash_page_foreach+0x20>
			off += page_info.size;
   469be:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   469c0:	3601      	adds	r6, #1
			off += page_info.size;
   469c2:	441c      	add	r4, r3
			page++;
   469c4:	e7ec      	b.n	469a0 <flash_page_foreach+0x32>

000469c6 <uarte_nrfx_isr_int>:
	if (data->int_driven->disable_tx_irq &&
   469c6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   469c8:	6843      	ldr	r3, [r0, #4]
	if (data->int_driven->disable_tx_irq &&
   469ca:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   469cc:	681b      	ldr	r3, [r3, #0]
	if (data->int_driven->disable_tx_irq &&
   469ce:	7b91      	ldrb	r1, [r2, #14]
   469d0:	b159      	cbz	r1, 469ea <uarte_nrfx_isr_int+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   469d2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   469d6:	b141      	cbz	r1, 469ea <uarte_nrfx_isr_int+0x24>
    p_reg->INTENCLR = mask;
   469d8:	f44f 7180 	mov.w	r1, #256	; 0x100
   469dc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   469e0:	2101      	movs	r1, #1
   469e2:	60d9      	str	r1, [r3, #12]
		data->int_driven->disable_tx_irq = false;
   469e4:	2300      	movs	r3, #0
   469e6:	7393      	strb	r3, [r2, #14]
		return;
   469e8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   469ea:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   469ee:	b121      	cbz	r1, 469fa <uarte_nrfx_isr_int+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   469f0:	2100      	movs	r1, #0
   469f2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   469f6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   469fa:	6813      	ldr	r3, [r2, #0]
   469fc:	b10b      	cbz	r3, 46a02 <uarte_nrfx_isr_int+0x3c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   469fe:	6851      	ldr	r1, [r2, #4]
   46a00:	4718      	bx	r3
}
   46a02:	4770      	bx	lr

00046a04 <uarte_nrfx_config_get>:
{
   46a04:	460a      	mov	r2, r1
	*cfg = get_dev_data(dev)->uart_config;
   46a06:	68c3      	ldr	r3, [r0, #12]
   46a08:	3304      	adds	r3, #4
   46a0a:	e893 0003 	ldmia.w	r3, {r0, r1}
   46a0e:	e882 0003 	stmia.w	r2, {r0, r1}
}
   46a12:	2000      	movs	r0, #0
   46a14:	4770      	bx	lr

00046a16 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   46a16:	6843      	ldr	r3, [r0, #4]
   46a18:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   46a1a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   46a1e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   46a22:	4770      	bx	lr

00046a24 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   46a24:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   46a26:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   46a28:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46a2a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   46a2e:	b148      	cbz	r0, 46a44 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46a30:	2000      	movs	r0, #0
	*c = data->rx_data;
   46a32:	7d12      	ldrb	r2, [r2, #20]
   46a34:	700a      	strb	r2, [r1, #0]
   46a36:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   46a3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46a3e:	2201      	movs	r2, #1
   46a40:	601a      	str	r2, [r3, #0]
	return 0;
   46a42:	4770      	bx	lr
		return -1;
   46a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   46a48:	4770      	bx	lr

00046a4a <uarte_nrfx_fifo_fill>:
	return config->uarte_regs;
   46a4a:	6843      	ldr	r3, [r0, #4]
{
   46a4c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   46a4e:	681c      	ldr	r4, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46a50:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   46a54:	b1cb      	cbz	r3, 46a8a <uarte_nrfx_fifo_fill+0x40>
	struct uarte_nrfx_data *data = get_dev_data(dev);
   46a56:	68c5      	ldr	r5, [r0, #12]
	if (len > data->int_driven->tx_buff_size) {
   46a58:	68eb      	ldr	r3, [r5, #12]
   46a5a:	8998      	ldrh	r0, [r3, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46a5c:	2300      	movs	r3, #0
   46a5e:	4290      	cmp	r0, r2
   46a60:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   46a64:	bfa8      	it	ge
   46a66:	4610      	movge	r0, r2
   46a68:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
	for (int i = 0; i < len; i++) {
   46a6c:	68ea      	ldr	r2, [r5, #12]
   46a6e:	4283      	cmp	r3, r0
   46a70:	6892      	ldr	r2, [r2, #8]
   46a72:	db06      	blt.n	46a82 <uarte_nrfx_fifo_fill+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46a74:	2301      	movs	r3, #1

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   46a76:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   46a7a:	f8c4 0548 	str.w	r0, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46a7e:	60a3      	str	r3, [r4, #8]
}
   46a80:	bd70      	pop	{r4, r5, r6, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   46a82:	5cce      	ldrb	r6, [r1, r3]
   46a84:	54d6      	strb	r6, [r2, r3]
	for (int i = 0; i < len; i++) {
   46a86:	3301      	adds	r3, #1
   46a88:	e7f0      	b.n	46a6c <uarte_nrfx_fifo_fill+0x22>
		return 0;
   46a8a:	4618      	mov	r0, r3
   46a8c:	e7f8      	b.n	46a80 <uarte_nrfx_fifo_fill+0x36>

00046a8e <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   46a8e:	6843      	ldr	r3, [r0, #4]
   46a90:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46a92:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   46a96:	b153      	cbz	r3, 46aae <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   46a98:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46a9a:	2000      	movs	r0, #0
   46a9c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   46aa0:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46aa4:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   46aa6:	7d1b      	ldrb	r3, [r3, #20]
   46aa8:	700b      	strb	r3, [r1, #0]
   46aaa:	6010      	str	r0, [r2, #0]
   46aac:	4770      	bx	lr
	int num_rx = 0;
   46aae:	4618      	mov	r0, r3
}
   46ab0:	4770      	bx	lr

00046ab2 <uarte_nrfx_irq_tx_enable>:
	data->int_driven->disable_tx_irq = false;
   46ab2:	2100      	movs	r1, #0
   46ab4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   46ab6:	6843      	ldr	r3, [r0, #4]
	data->int_driven->disable_tx_irq = false;
   46ab8:	68d2      	ldr	r2, [r2, #12]
	return config->uarte_regs;
   46aba:	681b      	ldr	r3, [r3, #0]
	data->int_driven->disable_tx_irq = false;
   46abc:	7391      	strb	r1, [r2, #14]
    p_reg->INTENSET = mask;
   46abe:	f44f 7280 	mov.w	r2, #256	; 0x100
   46ac2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   46ac6:	4770      	bx	lr

00046ac8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   46ac8:	2201      	movs	r2, #1
   46aca:	68c3      	ldr	r3, [r0, #12]
   46acc:	68db      	ldr	r3, [r3, #12]
   46ace:	739a      	strb	r2, [r3, #14]
}
   46ad0:	4770      	bx	lr

00046ad2 <uarte_nrfx_irq_tx_ready_complete>:
	return !data->int_driven->disable_tx_irq &&
   46ad2:	68c3      	ldr	r3, [r0, #12]
   46ad4:	68db      	ldr	r3, [r3, #12]
   46ad6:	7b9b      	ldrb	r3, [r3, #14]
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   46ad8:	b94b      	cbnz	r3, 46aee <uarte_nrfx_irq_tx_ready_complete+0x1c>
	return config->uarte_regs;
   46ada:	6843      	ldr	r3, [r0, #4]
   46adc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46ade:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	return !data->int_driven->disable_tx_irq &&
   46ae2:	b128      	cbz	r0, 46af0 <uarte_nrfx_irq_tx_ready_complete+0x1e>
    return p_reg->INTENSET & mask;
   46ae4:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
	       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) &&
   46ae8:	f3c0 2000 	ubfx	r0, r0, #8, #1
   46aec:	4770      	bx	lr
   46aee:	2000      	movs	r0, #0
}
   46af0:	4770      	bx	lr

00046af2 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   46af2:	6843      	ldr	r3, [r0, #4]
   46af4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46af6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   46afa:	3000      	adds	r0, #0
   46afc:	bf18      	it	ne
   46afe:	2001      	movne	r0, #1
   46b00:	4770      	bx	lr

00046b02 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   46b02:	2210      	movs	r2, #16
	return config->uarte_regs;
   46b04:	6843      	ldr	r3, [r0, #4]
   46b06:	681b      	ldr	r3, [r3, #0]
   46b08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   46b0c:	4770      	bx	lr

00046b0e <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   46b0e:	2210      	movs	r2, #16
	return config->uarte_regs;
   46b10:	6843      	ldr	r3, [r0, #4]
   46b12:	681b      	ldr	r3, [r3, #0]
   46b14:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   46b18:	4770      	bx	lr

00046b1a <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   46b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   46b1e:	6843      	ldr	r3, [r0, #4]
   46b20:	681b      	ldr	r3, [r3, #0]
   46b22:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   46b26:	4770      	bx	lr

00046b28 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   46b28:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   46b2c:	6843      	ldr	r3, [r0, #4]
   46b2e:	681b      	ldr	r3, [r3, #0]
   46b30:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   46b34:	4770      	bx	lr

00046b36 <uarte_nrfx_irq_update>:
}
   46b36:	2001      	movs	r0, #1
   46b38:	4770      	bx	lr

00046b3a <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   46b3a:	68c3      	ldr	r3, [r0, #12]
   46b3c:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   46b3e:	e9c3 1200 	strd	r1, r2, [r3]
}
   46b42:	4770      	bx	lr

00046b44 <uarte_nrfx_irq_is_pending>:
{
   46b44:	b508      	push	{r3, lr}
	return config->uarte_regs;
   46b46:	6843      	ldr	r3, [r0, #4]
{
   46b48:	4602      	mov	r2, r0
	return config->uarte_regs;
   46b4a:	6819      	ldr	r1, [r3, #0]
    return p_reg->INTENSET & mask;
   46b4c:	f8d1 3304 	ldr.w	r3, [r1, #772]	; 0x304
		||
   46b50:	05db      	lsls	r3, r3, #23
   46b52:	d405      	bmi.n	46b60 <uarte_nrfx_irq_is_pending+0x1c>
   46b54:	f8d1 0304 	ldr.w	r0, [r1, #772]	; 0x304
   46b58:	f010 0010 	ands.w	r0, r0, #16
   46b5c:	d106      	bne.n	46b6c <uarte_nrfx_irq_is_pending+0x28>
}
   46b5e:	bd08      	pop	{r3, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   46b60:	f7ff ffb7 	bl	46ad2 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_ENDTX_MASK) &&
   46b64:	2800      	cmp	r0, #0
   46b66:	d0f5      	beq.n	46b54 <uarte_nrfx_irq_is_pending+0x10>
		||
   46b68:	2001      	movs	r0, #1
   46b6a:	e7f8      	b.n	46b5e <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   46b6c:	4610      	mov	r0, r2
   46b6e:	f7ff ffc0 	bl	46af2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   46b72:	3000      	adds	r0, #0
   46b74:	bf18      	it	ne
   46b76:	2001      	movne	r0, #1
   46b78:	e7f1      	b.n	46b5e <uarte_nrfx_irq_is_pending+0x1a>

00046b7a <uarte_nrfx_poll_out>:
{
   46b7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   46b7e:	6843      	ldr	r3, [r0, #4]
{
   46b80:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   46b84:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   46b86:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   46b88:	f001 f9b4 	bl	47ef4 <k_is_in_isr>
   46b8c:	bb98      	cbnz	r0, 46bf6 <uarte_nrfx_poll_out+0x7c>
   46b8e:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   46b90:	f04f 0801 	mov.w	r8, #1
   46b94:	f106 0710 	add.w	r7, r6, #16
   46b98:	e8d7 3fef 	ldaex	r3, [r7]
   46b9c:	2b00      	cmp	r3, #0
   46b9e:	d103      	bne.n	46ba8 <uarte_nrfx_poll_out+0x2e>
   46ba0:	e8c7 8fe2 	stlex	r2, r8, [r7]
   46ba4:	2a00      	cmp	r2, #0
   46ba6:	d1f7      	bne.n	46b98 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   46ba8:	d007      	beq.n	46bba <uarte_nrfx_poll_out+0x40>
	return z_impl_k_sleep(timeout);
   46baa:	2021      	movs	r0, #33	; 0x21
   46bac:	2100      	movs	r1, #0
   46bae:	3d01      	subs	r5, #1
   46bb0:	f7f9 fe48 	bl	40844 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   46bb4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   46bb8:	d1ee      	bne.n	46b98 <uarte_nrfx_poll_out+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46bba:	2300      	movs	r3, #0
   46bbc:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   46bc0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   46bc4:	f10d 0307 	add.w	r3, sp, #7
   46bc8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   46bcc:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46bce:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   46bd2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46bd6:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   46bd8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   46bdc:	b923      	cbnz	r3, 46be8 <uarte_nrfx_poll_out+0x6e>
   46bde:	2001      	movs	r0, #1
   46be0:	f001 f8d7 	bl	47d92 <nrfx_busy_wait>
   46be4:	3d01      	subs	r5, #1
   46be6:	d1f7      	bne.n	46bd8 <uarte_nrfx_poll_out+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46be8:	2301      	movs	r3, #1
   46bea:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   46bec:	2300      	movs	r3, #0
   46bee:	6133      	str	r3, [r6, #16]
}
   46bf0:	b002      	add	sp, #8
   46bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   46bf6:	2301      	movs	r3, #1
   46bf8:	6133      	str	r3, [r6, #16]
   46bfa:	e7de      	b.n	46bba <uarte_nrfx_poll_out+0x40>

00046bfc <uarte_instance_init.constprop.4>:
static int uarte_instance_init(const struct device *dev,
   46bfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   46c00:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   46c04:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   46c06:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   46c08:	681c      	ldr	r4, [r3, #0]
   46c0a:	680b      	ldr	r3, [r1, #0]
   46c0c:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   46c10:	4606      	mov	r6, r0
	data->dev = dev;
   46c12:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c14:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   46c16:	460d      	mov	r5, r1
   46c18:	9301      	str	r3, [sp, #4]
   46c1a:	f7e3 fd55 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   46c1e:	2301      	movs	r3, #1
   46c20:	9a01      	ldr	r2, [sp, #4]
   46c22:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   46c24:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   46c26:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c28:	a801      	add	r0, sp, #4
   46c2a:	9301      	str	r3, [sp, #4]
   46c2c:	f7e3 fd4c 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   46c30:	2203      	movs	r2, #3
   46c32:	9b01      	ldr	r3, [sp, #4]
   46c34:	3380      	adds	r3, #128	; 0x80
   46c36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   46c3a:	686b      	ldr	r3, [r5, #4]
   46c3c:	1c58      	adds	r0, r3, #1
   46c3e:	d007      	beq.n	46c50 <uarte_instance_init.constprop.4+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c40:	a801      	add	r0, sp, #4
   46c42:	9301      	str	r3, [sp, #4]
   46c44:	f7e3 fd40 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   46c48:	9b01      	ldr	r3, [sp, #4]
   46c4a:	3380      	adds	r3, #128	; 0x80
   46c4c:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   46c50:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   46c54:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   46c58:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   46c5c:	68ab      	ldr	r3, [r5, #8]
   46c5e:	1c59      	adds	r1, r3, #1
   46c60:	d008      	beq.n	46c74 <uarte_instance_init.constprop.4+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c62:	a801      	add	r0, sp, #4
   46c64:	9301      	str	r3, [sp, #4]
   46c66:	f7e3 fd2f 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   46c6a:	2200      	movs	r2, #0
   46c6c:	9b01      	ldr	r3, [sp, #4]
   46c6e:	3380      	adds	r3, #128	; 0x80
   46c70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   46c74:	68eb      	ldr	r3, [r5, #12]
   46c76:	1c5a      	adds	r2, r3, #1
   46c78:	d011      	beq.n	46c9e <uarte_instance_init.constprop.4+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c7a:	a801      	add	r0, sp, #4
   46c7c:	9301      	str	r3, [sp, #4]
   46c7e:	f7e3 fd23 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   46c82:	2301      	movs	r3, #1
   46c84:	9a01      	ldr	r2, [sp, #4]
   46c86:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   46c88:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   46c8a:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   46c8c:	a801      	add	r0, sp, #4
   46c8e:	9301      	str	r3, [sp, #4]
   46c90:	f7e3 fd1a 	bl	2a6c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   46c94:	2203      	movs	r2, #3
   46c96:	9b01      	ldr	r3, [sp, #4]
   46c98:	3380      	adds	r3, #128	; 0x80
   46c9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   46c9e:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   46ca0:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   46ca4:	3104      	adds	r1, #4
    p_reg->PSEL.RTS = pselrts;
   46ca6:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   46caa:	4630      	mov	r0, r6
    p_reg->PSEL.CTS = pselcts;
   46cac:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   46cb0:	f7e3 fc54 	bl	2a55c <uarte_nrfx_configure>
	if (err) {
   46cb4:	b9d8      	cbnz	r0, 46cee <uarte_instance_init.constprop.4+0xf2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   46cb6:	2308      	movs	r3, #8
   46cb8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   46cbc:	686b      	ldr	r3, [r5, #4]
   46cbe:	3301      	adds	r3, #1
   46cc0:	d00b      	beq.n	46cda <uarte_instance_init.constprop.4+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   46cc2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
   46cc6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   46cca:	f107 0314 	add.w	r3, r7, #20

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   46cce:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   46cd2:	2301      	movs	r3, #1
   46cd4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46cd8:	6023      	str	r3, [r4, #0]
		nrf_uarte_tx_buffer_set(uarte, data->int_driven->tx_buffer, 0);
   46cda:	68fb      	ldr	r3, [r7, #12]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   46cdc:	689b      	ldr	r3, [r3, #8]
   46cde:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   46ce2:	2300      	movs	r3, #0
   46ce4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   46ce8:	2301      	movs	r3, #1
   46cea:	60a3      	str	r3, [r4, #8]
   46cec:	60e3      	str	r3, [r4, #12]
}
   46cee:	b002      	add	sp, #8
   46cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00046cf4 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   46cf4:	2000      	movs	r0, #0
   46cf6:	4770      	bx	lr

00046cf8 <parse_hex4>:
    for (i = 0; i < 4; i++)
   46cf8:	2200      	movs	r2, #0
    unsigned int h = 0;
   46cfa:	4613      	mov	r3, r2
{
   46cfc:	b510      	push	{r4, lr}
        if ((input[i] >= '0') && (input[i] <= '9'))
   46cfe:	5c81      	ldrb	r1, [r0, r2]
   46d00:	f1a1 0430 	sub.w	r4, r1, #48	; 0x30
   46d04:	2c09      	cmp	r4, #9
   46d06:	d80a      	bhi.n	46d1e <parse_hex4+0x26>
            h += (unsigned int) input[i] - '0';
   46d08:	3b30      	subs	r3, #48	; 0x30
        if (i < 3)
   46d0a:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   46d0c:	440b      	add	r3, r1
    for (i = 0; i < 4; i++)
   46d0e:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   46d12:	bf18      	it	ne
   46d14:	011b      	lslne	r3, r3, #4
    for (i = 0; i < 4; i++)
   46d16:	2a04      	cmp	r2, #4
   46d18:	d1f1      	bne.n	46cfe <parse_hex4+0x6>
}
   46d1a:	4618      	mov	r0, r3
   46d1c:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   46d1e:	f1a1 0441 	sub.w	r4, r1, #65	; 0x41
   46d22:	2c05      	cmp	r4, #5
   46d24:	d801      	bhi.n	46d2a <parse_hex4+0x32>
            h += (unsigned int) 10 + input[i] - 'A';
   46d26:	3b37      	subs	r3, #55	; 0x37
   46d28:	e7ef      	b.n	46d0a <parse_hex4+0x12>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   46d2a:	f1a1 0461 	sub.w	r4, r1, #97	; 0x61
   46d2e:	2c05      	cmp	r4, #5
   46d30:	d801      	bhi.n	46d36 <parse_hex4+0x3e>
            h += (unsigned int) 10 + input[i] - 'a';
   46d32:	3b57      	subs	r3, #87	; 0x57
   46d34:	e7e9      	b.n	46d0a <parse_hex4+0x12>
            return 0;
   46d36:	2300      	movs	r3, #0
   46d38:	e7ef      	b.n	46d1a <parse_hex4+0x22>

00046d3a <buffer_skip_whitespace>:
{
   46d3a:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   46d3c:	b140      	cbz	r0, 46d50 <buffer_skip_whitespace+0x16>
   46d3e:	6801      	ldr	r1, [r0, #0]
   46d40:	b171      	cbz	r1, 46d60 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   46d42:	6842      	ldr	r2, [r0, #4]
   46d44:	6883      	ldr	r3, [r0, #8]
   46d46:	4293      	cmp	r3, r2
   46d48:	d206      	bcs.n	46d58 <buffer_skip_whitespace+0x1e>
   46d4a:	5ccc      	ldrb	r4, [r1, r3]
   46d4c:	2c20      	cmp	r4, #32
   46d4e:	d900      	bls.n	46d52 <buffer_skip_whitespace+0x18>
}
   46d50:	bd10      	pop	{r4, pc}
       buffer->offset++;
   46d52:	3301      	adds	r3, #1
   46d54:	6083      	str	r3, [r0, #8]
   46d56:	e7f5      	b.n	46d44 <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   46d58:	d1fa      	bne.n	46d50 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   46d5a:	3a01      	subs	r2, #1
   46d5c:	6082      	str	r2, [r0, #8]
   46d5e:	e7f7      	b.n	46d50 <buffer_skip_whitespace+0x16>
        return NULL;
   46d60:	4608      	mov	r0, r1
   46d62:	e7f5      	b.n	46d50 <buffer_skip_whitespace+0x16>

00046d64 <get_array_item>:
    if (array == NULL)
   46d64:	b110      	cbz	r0, 46d6c <get_array_item+0x8>
    current_child = array->child;
   46d66:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   46d68:	b100      	cbz	r0, 46d6c <get_array_item+0x8>
   46d6a:	b901      	cbnz	r1, 46d6e <get_array_item+0xa>
}
   46d6c:	4770      	bx	lr
        index--;
   46d6e:	3901      	subs	r1, #1
        current_child = current_child->next;
   46d70:	6800      	ldr	r0, [r0, #0]
   46d72:	e7f9      	b.n	46d68 <get_array_item+0x4>

00046d74 <update_offset>:
{
   46d74:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   46d76:	4604      	mov	r4, r0
   46d78:	b140      	cbz	r0, 46d8c <update_offset+0x18>
   46d7a:	6803      	ldr	r3, [r0, #0]
   46d7c:	b133      	cbz	r3, 46d8c <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   46d7e:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   46d80:	4418      	add	r0, r3
   46d82:	f7d6 fa6f 	bl	1d264 <strlen>
   46d86:	68a3      	ldr	r3, [r4, #8]
   46d88:	4418      	add	r0, r3
   46d8a:	60a0      	str	r0, [r4, #8]
}
   46d8c:	bd10      	pop	{r4, pc}

00046d8e <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   46d8e:	b161      	cbz	r1, 46daa <add_item_to_array+0x1c>
   46d90:	b160      	cbz	r0, 46dac <add_item_to_array+0x1e>
    child = array->child;
   46d92:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   46d94:	b91b      	cbnz	r3, 46d9e <add_item_to_array+0x10>
        array->child = item;
   46d96:	6081      	str	r1, [r0, #8]
    item->prev = prev;
   46d98:	2001      	movs	r0, #1
   46d9a:	4770      	bx	lr
        while (child->next)
   46d9c:	4613      	mov	r3, r2
   46d9e:	681a      	ldr	r2, [r3, #0]
   46da0:	2a00      	cmp	r2, #0
   46da2:	d1fb      	bne.n	46d9c <add_item_to_array+0xe>
    prev->next = item;
   46da4:	6019      	str	r1, [r3, #0]
    item->prev = prev;
   46da6:	604b      	str	r3, [r1, #4]
   46da8:	e7f6      	b.n	46d98 <add_item_to_array+0xa>
        return false;
   46daa:	4608      	mov	r0, r1
}
   46dac:	4770      	bx	lr

00046dae <cJSON_New_Item.isra.1>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   46dae:	b510      	push	{r4, lr}
   46db0:	4603      	mov	r3, r0
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   46db2:	2028      	movs	r0, #40	; 0x28
   46db4:	4798      	blx	r3
    if (node)
   46db6:	4604      	mov	r4, r0
   46db8:	b118      	cbz	r0, 46dc2 <cJSON_New_Item.isra.1+0x14>
__ssp_bos_icheck3(memset, void *, int)
   46dba:	2228      	movs	r2, #40	; 0x28
   46dbc:	2100      	movs	r1, #0
   46dbe:	f001 fa03 	bl	481c8 <memset>
}
   46dc2:	4620      	mov	r0, r4
   46dc4:	bd10      	pop	{r4, pc}

00046dc6 <ensure>:
{
   46dc6:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   46dc8:	4604      	mov	r4, r0
   46dca:	b1b8      	cbz	r0, 46dfc <ensure+0x36>
   46dcc:	6805      	ldr	r5, [r0, #0]
   46dce:	b165      	cbz	r5, 46dea <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   46dd0:	6842      	ldr	r2, [r0, #4]
   46dd2:	b112      	cbz	r2, 46dda <ensure+0x14>
   46dd4:	6883      	ldr	r3, [r0, #8]
   46dd6:	429a      	cmp	r2, r3
   46dd8:	d910      	bls.n	46dfc <ensure+0x36>
    if (needed > INT_MAX)
   46dda:	2900      	cmp	r1, #0
   46ddc:	db0e      	blt.n	46dfc <ensure+0x36>
    needed += p->offset + 1;
   46dde:	68a0      	ldr	r0, [r4, #8]
   46de0:	4401      	add	r1, r0
   46de2:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   46de4:	429a      	cmp	r2, r3
   46de6:	d302      	bcc.n	46dee <ensure+0x28>
        return p->buffer + p->offset;
   46de8:	4405      	add	r5, r0
}
   46dea:	4628      	mov	r0, r5
   46dec:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   46dee:	6922      	ldr	r2, [r4, #16]
   46df0:	b922      	cbnz	r2, 46dfc <ensure+0x36>
    if (needed > (INT_MAX / 2))
   46df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   46df6:	d303      	bcc.n	46e00 <ensure+0x3a>
        if (needed <= INT_MAX)
   46df8:	2b00      	cmp	r3, #0
   46dfa:	da0f      	bge.n	46e1c <ensure+0x56>
        return NULL;
   46dfc:	2500      	movs	r5, #0
   46dfe:	e7f4      	b.n	46dea <ensure+0x24>
        newsize = needed + 1;
   46e00:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   46e02:	6a23      	ldr	r3, [r4, #32]
   46e04:	b16b      	cbz	r3, 46e22 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   46e06:	4628      	mov	r0, r5
   46e08:	4631      	mov	r1, r6
   46e0a:	4798      	blx	r3
        if (newbuffer == NULL)
   46e0c:	4605      	mov	r5, r0
   46e0e:	b9b0      	cbnz	r0, 46e3e <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   46e10:	69e3      	ldr	r3, [r4, #28]
   46e12:	6820      	ldr	r0, [r4, #0]
   46e14:	4798      	blx	r3
            p->buffer = NULL;
   46e16:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   46e1a:	e7e6      	b.n	46dea <ensure+0x24>
            newsize = INT_MAX;
   46e1c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   46e20:	e7ef      	b.n	46e02 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   46e22:	69a3      	ldr	r3, [r4, #24]
   46e24:	4630      	mov	r0, r6
   46e26:	4798      	blx	r3
        if (!newbuffer)
   46e28:	4605      	mov	r5, r0
   46e2a:	2800      	cmp	r0, #0
   46e2c:	d0f0      	beq.n	46e10 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   46e2e:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   46e30:	6821      	ldr	r1, [r4, #0]
   46e32:	3201      	adds	r2, #1
   46e34:	f001 f9a8 	bl	48188 <memcpy>
        p->hooks.deallocate(p->buffer);
   46e38:	69e3      	ldr	r3, [r4, #28]
   46e3a:	6820      	ldr	r0, [r4, #0]
   46e3c:	4798      	blx	r3
    return newbuffer + p->offset;
   46e3e:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   46e40:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   46e44:	441d      	add	r5, r3
   46e46:	e7d0      	b.n	46dea <ensure+0x24>

00046e48 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   46e48:	2200      	movs	r2, #0
   46e4a:	4611      	mov	r1, r2
   46e4c:	f7e4 b91a 	b.w	2b084 <cJSON_ParseWithOpts>

00046e50 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   46e50:	2100      	movs	r1, #0
   46e52:	f7e4 b845 	b.w	2aee0 <print.constprop.14>

00046e56 <cJSON_GetArraySize>:
    if (array == NULL)
   46e56:	b110      	cbz	r0, 46e5e <cJSON_GetArraySize+0x8>
    child = array->child;
   46e58:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   46e5a:	2000      	movs	r0, #0
    while(child != NULL)
   46e5c:	b903      	cbnz	r3, 46e60 <cJSON_GetArraySize+0xa>
}
   46e5e:	4770      	bx	lr
        size++;
   46e60:	3001      	adds	r0, #1
        child = child->next;
   46e62:	681b      	ldr	r3, [r3, #0]
   46e64:	e7fa      	b.n	46e5c <cJSON_GetArraySize+0x6>

00046e66 <cJSON_GetArrayItem>:
    if (index < 0)
   46e66:	2900      	cmp	r1, #0
   46e68:	db01      	blt.n	46e6e <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   46e6a:	f7ff bf7b 	b.w	46d64 <get_array_item>
}
   46e6e:	2000      	movs	r0, #0
   46e70:	4770      	bx	lr

00046e72 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   46e72:	2200      	movs	r2, #0
   46e74:	f7e3 bdc4 	b.w	2aa00 <get_object_item>

00046e78 <cJSON_HasObjectItem>:
{
   46e78:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   46e7a:	f7ff fffa 	bl	46e72 <cJSON_GetObjectItem>
}
   46e7e:	3000      	adds	r0, #0
   46e80:	bf18      	it	ne
   46e82:	2001      	movne	r0, #1
   46e84:	bd08      	pop	{r3, pc}

00046e86 <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   46e86:	f7ff bf82 	b.w	46d8e <add_item_to_array>

00046e8a <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   46e8a:	2300      	movs	r3, #0
   46e8c:	f7e4 b88a 	b.w	2afa4 <add_item_to_object.constprop.12>

00046e90 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   46e90:	b180      	cbz	r0, 46eb4 <cJSON_DetachItemViaPointer+0x24>
   46e92:	b169      	cbz	r1, 46eb0 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   46e94:	684a      	ldr	r2, [r1, #4]
   46e96:	b10a      	cbz	r2, 46e9c <cJSON_DetachItemViaPointer+0xc>
   46e98:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   46e9a:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   46e9c:	680b      	ldr	r3, [r1, #0]
   46e9e:	b103      	cbz	r3, 46ea2 <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   46ea0:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   46ea2:	6882      	ldr	r2, [r0, #8]
   46ea4:	428a      	cmp	r2, r1
        parent->child = item->next;
   46ea6:	bf08      	it	eq
   46ea8:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   46eaa:	2300      	movs	r3, #0
    item->next = NULL;
   46eac:	e9c1 3300 	strd	r3, r3, [r1]
}
   46eb0:	4608      	mov	r0, r1
   46eb2:	4770      	bx	lr
        return NULL;
   46eb4:	4601      	mov	r1, r0
   46eb6:	e7fb      	b.n	46eb0 <cJSON_DetachItemViaPointer+0x20>

00046eb8 <cJSON_DetachItemFromObject>:
{
   46eb8:	b510      	push	{r4, lr}
   46eba:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   46ebc:	f7ff ffd9 	bl	46e72 <cJSON_GetObjectItem>
    return cJSON_DetachItemViaPointer(object, to_detach);
   46ec0:	4601      	mov	r1, r0
   46ec2:	4620      	mov	r0, r4
}
   46ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   46ec8:	f7ff bfe2 	b.w	46e90 <cJSON_DetachItemViaPointer>

00046ecc <cJSON_AddNullToObject>:
{
   46ecc:	b570      	push	{r4, r5, r6, lr}
   46ece:	4605      	mov	r5, r0
   46ed0:	460e      	mov	r6, r1
    cJSON *null = cJSON_CreateNull();
   46ed2:	f7e4 f947 	bl	2b164 <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   46ed6:	2300      	movs	r3, #0
   46ed8:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   46eda:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   46edc:	4631      	mov	r1, r6
   46ede:	4628      	mov	r0, r5
   46ee0:	f7e4 f860 	bl	2afa4 <add_item_to_object.constprop.12>
   46ee4:	4605      	mov	r5, r0
   46ee6:	b918      	cbnz	r0, 46ef0 <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   46ee8:	4620      	mov	r0, r4
   46eea:	f7e4 f8a7 	bl	2b03c <cJSON_Delete>
    return NULL;
   46eee:	462c      	mov	r4, r5
}
   46ef0:	4620      	mov	r0, r4
   46ef2:	bd70      	pop	{r4, r5, r6, pc}

00046ef4 <cJSON_IsTrue>:
    if (item == NULL)
   46ef4:	b118      	cbz	r0, 46efe <cJSON_IsTrue+0xa>
    return (item->type & 0xff) == cJSON_True;
   46ef6:	7b00      	ldrb	r0, [r0, #12]
   46ef8:	1e83      	subs	r3, r0, #2
   46efa:	4258      	negs	r0, r3
   46efc:	4158      	adcs	r0, r3
}
   46efe:	4770      	bx	lr

00046f00 <cJSON_IsBool>:
    if (item == NULL)
   46f00:	b120      	cbz	r0, 46f0c <cJSON_IsBool+0xc>
    return (item->type & (cJSON_True | cJSON_False)) != 0;
   46f02:	68c0      	ldr	r0, [r0, #12]
   46f04:	f010 0003 	ands.w	r0, r0, #3
   46f08:	bf18      	it	ne
   46f0a:	2001      	movne	r0, #1
}
   46f0c:	4770      	bx	lr

00046f0e <cJSON_IsNull>:
    if (item == NULL)
   46f0e:	b118      	cbz	r0, 46f18 <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   46f10:	7b00      	ldrb	r0, [r0, #12]
   46f12:	1f03      	subs	r3, r0, #4
   46f14:	4258      	negs	r0, r3
   46f16:	4158      	adcs	r0, r3
}
   46f18:	4770      	bx	lr

00046f1a <cJSON_IsNumber>:
    if (item == NULL)
   46f1a:	b120      	cbz	r0, 46f26 <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   46f1c:	7b00      	ldrb	r0, [r0, #12]
   46f1e:	f1a0 0308 	sub.w	r3, r0, #8
   46f22:	4258      	negs	r0, r3
   46f24:	4158      	adcs	r0, r3
}
   46f26:	4770      	bx	lr

00046f28 <cJSON_IsString>:
    if (item == NULL)
   46f28:	b120      	cbz	r0, 46f34 <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   46f2a:	7b00      	ldrb	r0, [r0, #12]
   46f2c:	f1a0 0310 	sub.w	r3, r0, #16
   46f30:	4258      	negs	r0, r3
   46f32:	4158      	adcs	r0, r3
}
   46f34:	4770      	bx	lr

00046f36 <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   46f36:	b508      	push	{r3, lr}
   46f38:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   46f3a:	f7ff fff5 	bl	46f28 <cJSON_IsString>
   46f3e:	b100      	cbz	r0, 46f42 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   46f40:	6910      	ldr	r0, [r2, #16]
}
   46f42:	bd08      	pop	{r3, pc}

00046f44 <cJSON_IsArray>:
    if (item == NULL)
   46f44:	b120      	cbz	r0, 46f50 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   46f46:	7b00      	ldrb	r0, [r0, #12]
   46f48:	f1a0 0320 	sub.w	r3, r0, #32
   46f4c:	4258      	negs	r0, r3
   46f4e:	4158      	adcs	r0, r3
}
   46f50:	4770      	bx	lr

00046f52 <cJSON_IsObject>:
    if (item == NULL)
   46f52:	b120      	cbz	r0, 46f5e <cJSON_IsObject+0xc>
    return (item->type & 0xFF) == cJSON_Object;
   46f54:	7b00      	ldrb	r0, [r0, #12]
   46f56:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   46f5a:	4258      	negs	r0, r3
   46f5c:	4158      	adcs	r0, r3
}
   46f5e:	4770      	bx	lr

00046f60 <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   46f60:	f001 b8d7 	b.w	48112 <k_free>

00046f64 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   46f64:	f7fa bee2 	b.w	41d2c <k_malloc>

00046f68 <bsdlib_shutdown>:

int bsdlib_shutdown(void)
{
   46f68:	b508      	push	{r3, lr}
#ifdef CONFIG_LTE_LINK_CONTROL
	lte_lc_deinit();
   46f6a:	f7e6 fc2b 	bl	2d7c4 <lte_lc_deinit>
#endif
	bsd_shutdown();
   46f6e:	f7f4 fed5 	bl	3bd1c <bsd_shutdown>

	return 0;
}
   46f72:	2000      	movs	r0, #0
   46f74:	bd08      	pop	{r3, pc}

00046f76 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   46f76:	4668      	mov	r0, sp
   46f78:	f020 0107 	bic.w	r1, r0, #7
   46f7c:	468d      	mov	sp, r1
   46f7e:	b501      	push	{r0, lr}
	bsd_os_trace_irq_handler();
   46f80:	f7ee feea 	bl	35d58 <bsd_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   46f84:	f7e0 fbfa 	bl	2777c <_arch_isr_direct_pm>
   46f88:	f7e1 f850 	bl	2802c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   46f8c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   46f90:	4685      	mov	sp, r0
   46f92:	4770      	bx	lr

00046f94 <ipc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   46f94:	4668      	mov	r0, sp
   46f96:	f020 0107 	bic.w	r1, r0, #7
   46f9a:	468d      	mov	sp, r1
   46f9c:	b501      	push	{r0, lr}
	IPC_IRQHandler();
   46f9e:	f7ef fa81 	bl	364a4 <IPC_IRQHandler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   46fa2:	f7e0 fbeb 	bl	2777c <_arch_isr_direct_pm>
   46fa6:	f7e1 f841 	bl	2802c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ipc_proxy_irq_handler)
   46faa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   46fae:	4685      	mov	sp, r0
   46fb0:	4770      	bx	lr

00046fb2 <trace_task_create>:
{
   46fb2:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   46fb4:	201d      	movs	r0, #29
   46fb6:	2200      	movs	r2, #0
   46fb8:	2106      	movs	r1, #6
   46fba:	f7e0 fbad 	bl	27718 <z_arm_irq_priority_set>
}
   46fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   46fc2:	201d      	movs	r0, #29
   46fc4:	f7e0 bb8a 	b.w	276dc <arch_irq_enable>

00046fc8 <read_task_create>:
{
   46fc8:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(BSD_APPLICATION_IRQ, BSD_APPLICATION_IRQ_PRIORITY,
   46fca:	201c      	movs	r0, #28
   46fcc:	2200      	movs	r2, #0
   46fce:	2106      	movs	r1, #6
   46fd0:	f7e0 fba2 	bl	27718 <z_arm_irq_priority_set>
}
   46fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(BSD_APPLICATION_IRQ);
   46fd8:	201c      	movs	r0, #28
   46fda:	f7e0 bb7f 	b.w	276dc <arch_irq_enable>

00046fde <bsd_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   46fde:	2000      	movs	r0, #0
   46fe0:	4770      	bx	lr

00046fe2 <z_to_nrf_flags>:
		nrf_flags |= NRF_MSG_DONTWAIT;
   46fe2:	f010 0340 	ands.w	r3, r0, #64	; 0x40
   46fe6:	bf18      	it	ne
   46fe8:	2302      	movne	r3, #2
	if (z_flags & MSG_PEEK) {
   46fea:	0781      	lsls	r1, r0, #30
		nrf_flags |= NRF_MSG_PEEK;
   46fec:	bf48      	it	mi
   46fee:	f043 0308 	orrmi.w	r3, r3, #8
	if (z_flags & MSG_TRUNC) {
   46ff2:	06c2      	lsls	r2, r0, #27
		nrf_flags |= NRF_MSG_TRUNC;
   46ff4:	bf48      	it	mi
   46ff6:	f043 0320 	orrmi.w	r3, r3, #32
}
   46ffa:	4618      	mov	r0, r3
   46ffc:	4770      	bx	lr

00046ffe <z_to_nrf_family>:
	switch (z_family) {
   46ffe:	2803      	cmp	r0, #3
   47000:	d00f      	beq.n	47022 <z_to_nrf_family+0x24>
   47002:	d808      	bhi.n	47016 <z_to_nrf_family+0x18>
   47004:	2801      	cmp	r0, #1
   47006:	d00e      	beq.n	47026 <z_to_nrf_family+0x28>
   47008:	2802      	cmp	r0, #2
		return -EAFNOSUPPORT;
   4700a:	bf08      	it	eq
   4700c:	200a      	moveq	r0, #10
   4700e:	bf18      	it	ne
   47010:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   47014:	4770      	bx	lr
	switch (z_family) {
   47016:	2806      	cmp	r0, #6
   47018:	d007      	beq.n	4702a <z_to_nrf_family+0x2c>
   4701a:	2866      	cmp	r0, #102	; 0x66
		return -EAFNOSUPPORT;
   4701c:	bf08      	it	eq
   4701e:	2066      	moveq	r0, #102	; 0x66
   47020:	e7f5      	b.n	4700e <z_to_nrf_family+0x10>
		return NRF_AF_PACKET;
   47022:	2005      	movs	r0, #5
   47024:	4770      	bx	lr
		return NRF_AF_INET;
   47026:	2002      	movs	r0, #2
   47028:	4770      	bx	lr
		return NRF_AF_LOCAL;
   4702a:	2001      	movs	r0, #1
}
   4702c:	4770      	bx	lr

0004702e <z_to_nrf_protocol>:
	switch (proto) {
   4702e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   47032:	d01d      	beq.n	47070 <z_to_nrf_protocol+0x42>
   47034:	dc08      	bgt.n	47048 <z_to_nrf_protocol+0x1a>
   47036:	2806      	cmp	r0, #6
   47038:	d01d      	beq.n	47076 <z_to_nrf_protocol+0x48>
   4703a:	2811      	cmp	r0, #17
   4703c:	d01d      	beq.n	4707a <z_to_nrf_protocol+0x4c>
   4703e:	2800      	cmp	r0, #0
		return -EPROTONOSUPPORT;
   47040:	bf18      	it	ne
   47042:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   47046:	4770      	bx	lr
	switch (proto) {
   47048:	f240 2301 	movw	r3, #513	; 0x201
   4704c:	4298      	cmp	r0, r3
   4704e:	d015      	beq.n	4707c <z_to_nrf_protocol+0x4e>
   47050:	dc06      	bgt.n	47060 <z_to_nrf_protocol+0x32>
   47052:	f240 1311 	movw	r3, #273	; 0x111
   47056:	4298      	cmp	r0, r3
		return -EPROTONOSUPPORT;
   47058:	bf08      	it	eq
   4705a:	f44f 7087 	moveq.w	r0, #270	; 0x10e
   4705e:	e7ef      	b.n	47040 <z_to_nrf_protocol+0x12>
	switch (proto) {
   47060:	f240 2302 	movw	r3, #514	; 0x202
   47064:	4298      	cmp	r0, r3
   47066:	d009      	beq.n	4707c <z_to_nrf_protocol+0x4e>
   47068:	f240 2303 	movw	r3, #515	; 0x203
   4706c:	4298      	cmp	r0, r3
   4706e:	e7e7      	b.n	47040 <z_to_nrf_protocol+0x12>
		return NRF_SPROTO_TLS1v2;
   47070:	f44f 7082 	mov.w	r0, #260	; 0x104
   47074:	4770      	bx	lr
		return NRF_IPPROTO_TCP;
   47076:	2001      	movs	r0, #1
   47078:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   4707a:	2002      	movs	r0, #2
}
   4707c:	4770      	bx	lr

0004707e <nrf91_socket_is_supported>:
}
   4707e:	2001      	movs	r0, #1
   47080:	4770      	bx	lr

00047082 <nrf91_bsdlib_socket_offload_init>:
}
   47082:	2000      	movs	r0, #0
   47084:	4770      	bx	lr

00047086 <nrf91_socket_offload_getsockopt>:
{
   47086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   4708a:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   4708c:	2300      	movs	r3, #0
{
   4708e:	b086      	sub	sp, #24
   47090:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   47094:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   47098:	f8d8 3000 	ldr.w	r3, [r8]
	switch (z_in_level) {
   4709c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   470a0:	460c      	mov	r4, r1
   470a2:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   470a4:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   470a8:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   470aa:	d002      	beq.n	470b2 <nrf91_socket_offload_getsockopt+0x2c>
   470ac:	dc2d      	bgt.n	4710a <nrf91_socket_offload_getsockopt+0x84>
   470ae:	2901      	cmp	r1, #1
   470b0:	d140      	bne.n	47134 <nrf91_socket_offload_getsockopt+0xae>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   470b2:	aa02      	add	r2, sp, #8
   470b4:	4631      	mov	r1, r6
   470b6:	4620      	mov	r0, r4
   470b8:	f7e4 fb78 	bl	2b7ac <z_to_nrf_optname>
   470bc:	2800      	cmp	r0, #0
   470be:	db39      	blt.n	47134 <nrf91_socket_offload_getsockopt+0xae>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   470c0:	2c01      	cmp	r4, #1
   470c2:	d12a      	bne.n	4711a <nrf91_socket_offload_getsockopt+0x94>
   470c4:	f1a6 0314 	sub.w	r3, r6, #20
   470c8:	2b01      	cmp	r3, #1
   470ca:	d826      	bhi.n	4711a <nrf91_socket_offload_getsockopt+0x94>
		nrf_optlen = sizeof(struct nrf_timeval);
   470cc:	2308      	movs	r3, #8
   470ce:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   470d0:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   470d2:	aa03      	add	r2, sp, #12
   470d4:	9200      	str	r2, [sp, #0]
   470d6:	4638      	mov	r0, r7
   470d8:	9a02      	ldr	r2, [sp, #8]
   470da:	4621      	mov	r1, r4
   470dc:	f7f5 f9c0 	bl	3c460 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   470e0:	4607      	mov	r7, r0
   470e2:	b970      	cbnz	r0, 47102 <nrf91_socket_offload_getsockopt+0x7c>
   470e4:	b16d      	cbz	r5, 47102 <nrf91_socket_offload_getsockopt+0x7c>
		*optlen = nrf_optlen;
   470e6:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   470e8:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   470ea:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   470ee:	d108      	bne.n	47102 <nrf91_socket_offload_getsockopt+0x7c>
			if (optname == SO_ERROR) {
   470f0:	2e04      	cmp	r6, #4
   470f2:	d114      	bne.n	4711e <nrf91_socket_offload_getsockopt+0x98>
				bsd_os_errno_set(*(int *)optval);
   470f4:	6828      	ldr	r0, [r5, #0]
   470f6:	f7e4 fa27 	bl	2b548 <bsd_os_errno_set>
				*(int *)optval = errno;
   470fa:	f7fe fc73 	bl	459e4 <__errno>
   470fe:	6803      	ldr	r3, [r0, #0]
   47100:	602b      	str	r3, [r5, #0]
}
   47102:	4638      	mov	r0, r7
   47104:	b006      	add	sp, #24
   47106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   4710a:	f240 2302 	movw	r3, #514	; 0x202
   4710e:	4299      	cmp	r1, r3
   47110:	d0cf      	beq.n	470b2 <nrf91_socket_offload_getsockopt+0x2c>
   47112:	f240 2303 	movw	r3, #515	; 0x203
   47116:	4299      	cmp	r1, r3
   47118:	e7ca      	b.n	470b0 <nrf91_socket_offload_getsockopt+0x2a>
   4711a:	462b      	mov	r3, r5
   4711c:	e7d9      	b.n	470d2 <nrf91_socket_offload_getsockopt+0x4c>
			} else if ((optname == SO_RCVTIMEO) ||
   4711e:	3e14      	subs	r6, #20
   47120:	2e01      	cmp	r6, #1
   47122:	d8ee      	bhi.n	47102 <nrf91_socket_offload_getsockopt+0x7c>
				((struct timeval *)optval)->tv_sec =
   47124:	9b04      	ldr	r3, [sp, #16]
   47126:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   47128:	9b05      	ldr	r3, [sp, #20]
   4712a:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   4712c:	2308      	movs	r3, #8
   4712e:	f8c8 3000 	str.w	r3, [r8]
   47132:	e7e6      	b.n	47102 <nrf91_socket_offload_getsockopt+0x7c>
	errno = ENOPROTOOPT;
   47134:	f7fe fc56 	bl	459e4 <__errno>
   47138:	236d      	movs	r3, #109	; 0x6d
	return retval;
   4713a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	errno = ENOPROTOOPT;
   4713e:	6003      	str	r3, [r0, #0]
	return retval;
   47140:	e7df      	b.n	47102 <nrf91_socket_offload_getsockopt+0x7c>

00047142 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   47142:	3801      	subs	r0, #1
   47144:	f7f5 b938 	b.w	3c3b8 <nrf_listen>

00047148 <nrf91_socket_offload_close>:
	return nrf_close(sd);
   47148:	3801      	subs	r0, #1
   4714a:	f7f5 b897 	b.w	3c27c <nrf_close>

0004714e <nrf91_socket_offload_freeaddrinfo>:
{
   4714e:	b538      	push	{r3, r4, r5, lr}
   47150:	4604      	mov	r4, r0
	while (next != NULL) {
   47152:	b904      	cbnz	r4, 47156 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   47154:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   47156:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   47158:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   4715a:	f000 ffda 	bl	48112 <k_free>
		k_free(this);
   4715e:	4620      	mov	r0, r4
   47160:	f000 ffd7 	bl	48112 <k_free>
		next = next->ai_next;
   47164:	462c      	mov	r4, r5
   47166:	e7f4      	b.n	47152 <nrf91_socket_offload_freeaddrinfo+0x4>

00047168 <z_to_nrf_addrinfo_hints>:
{
   47168:	b538      	push	{r3, r4, r5, lr}
   4716a:	460c      	mov	r4, r1
   4716c:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   4716e:	221c      	movs	r2, #28
   47170:	2100      	movs	r1, #0
   47172:	1d20      	adds	r0, r4, #4
   47174:	f001 f828 	bl	481c8 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   47178:	2300      	movs	r3, #0
   4717a:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4717c:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   4717e:	2b03      	cmp	r3, #3
   47180:	d003      	beq.n	4718a <z_to_nrf_addrinfo_hints+0x22>
		return NRF_SOCK_MGMT;
   47182:	2b04      	cmp	r3, #4
   47184:	bf08      	it	eq
   47186:	f44f 7300 	moveq.w	r3, #512	; 0x200
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   4718a:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   4718c:	8928      	ldrh	r0, [r5, #8]
   4718e:	f7ff ff36 	bl	46ffe <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   47192:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   47196:	d00b      	beq.n	471b0 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   47198:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   4719a:	6928      	ldr	r0, [r5, #16]
   4719c:	f7ff ff47 	bl	4702e <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   471a0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   471a4:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   471a6:	d003      	beq.n	471b0 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   471a8:	69e8      	ldr	r0, [r5, #28]
   471aa:	b108      	cbz	r0, 471b0 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   471ac:	61a0      	str	r0, [r4, #24]
	return 0;
   471ae:	2000      	movs	r0, #0
}
   471b0:	bd38      	pop	{r3, r4, r5, pc}

000471b2 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   471b2:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   471b4:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   471b6:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   471b8:	4603      	mov	r3, r0
{
   471ba:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   471bc:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   471c0:	f101 0210 	add.w	r2, r1, #16
   471c4:	f102 0410 	add.w	r4, r2, #16
   471c8:	f852 5b04 	ldr.w	r5, [r2], #4
   471cc:	42a2      	cmp	r2, r4
   471ce:	f843 5b04 	str.w	r5, [r3], #4
   471d2:	d1f9      	bne.n	471c8 <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   471d4:	6a0b      	ldr	r3, [r1, #32]
   471d6:	7503      	strb	r3, [r0, #20]
}
   471d8:	bd30      	pop	{r4, r5, pc}

000471da <nrf91_socket_offload_recvfrom>:
{
   471da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int sd = OBJ_TO_SD(obj);
   471de:	1e45      	subs	r5, r0, #1
{
   471e0:	b08d      	sub	sp, #52	; 0x34
   471e2:	4618      	mov	r0, r3
   471e4:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   471e8:	4688      	mov	r8, r1
   471ea:	4691      	mov	r9, r2
   471ec:	f7ff fef9 	bl	46fe2 <z_to_nrf_flags>
   471f0:	4603      	mov	r3, r0
	if (from == NULL) {
   471f2:	b95c      	cbnz	r4, 4720c <nrf91_socket_offload_recvfrom+0x32>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   471f4:	4628      	mov	r0, r5
   471f6:	e9cd 4400 	strd	r4, r4, [sp]
   471fa:	464a      	mov	r2, r9
   471fc:	4641      	mov	r1, r8
   471fe:	f7f5 f87d 	bl	3c2fc <nrf_recvfrom>
   47202:	4605      	mov	r5, r0
}
   47204:	4628      	mov	r0, r5
   47206:	b00d      	add	sp, #52	; 0x34
   47208:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   4720c:	2224      	movs	r2, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   4720e:	af03      	add	r7, sp, #12
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   47210:	9202      	str	r2, [sp, #8]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   47212:	aa02      	add	r2, sp, #8
   47214:	9201      	str	r2, [sp, #4]
   47216:	4628      	mov	r0, r5
   47218:	9700      	str	r7, [sp, #0]
   4721a:	464a      	mov	r2, r9
   4721c:	4641      	mov	r1, r8
   4721e:	f7f5 f86d 	bl	3c2fc <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   47222:	9b04      	ldr	r3, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   47224:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   47226:	2b02      	cmp	r3, #2
   47228:	d109      	bne.n	4723e <nrf91_socket_offload_recvfrom+0x64>
	ptr->sin_port = nrf_in->sin_port;
   4722a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   4722e:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   47230:	2301      	movs	r3, #1
   47232:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   47234:	9b06      	ldr	r3, [sp, #24]
   47236:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   47238:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   4723a:	6033      	str	r3, [r6, #0]
	return retval;
   4723c:	e7e2      	b.n	47204 <nrf91_socket_offload_recvfrom+0x2a>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   4723e:	2b0a      	cmp	r3, #10
   47240:	d1e0      	bne.n	47204 <nrf91_socket_offload_recvfrom+0x2a>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   47242:	4639      	mov	r1, r7
   47244:	4620      	mov	r0, r4
   47246:	f7ff ffb4 	bl	471b2 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   4724a:	2318      	movs	r3, #24
   4724c:	e7f5      	b.n	4723a <nrf91_socket_offload_recvfrom+0x60>

0004724e <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   4724e:	2300      	movs	r3, #0
{
   47250:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   47252:	e9cd 3300 	strd	r3, r3, [sp]
   47256:	f7ff ffc0 	bl	471da <nrf91_socket_offload_recvfrom>
}
   4725a:	b003      	add	sp, #12
   4725c:	f85d fb04 	ldr.w	pc, [sp], #4

00047260 <nrf91_socket_offload_getaddrinfo>:
{
   47260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   47264:	4614      	mov	r4, r2
   47266:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   47268:	2100      	movs	r1, #0
{
   4726a:	b093      	sub	sp, #76	; 0x4c
   4726c:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   4726e:	2220      	movs	r2, #32
   47270:	a802      	add	r0, sp, #8
{
   47272:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   47274:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   47276:	f000 ffa7 	bl	481c8 <memset>
	if (hints != NULL) {
   4727a:	b194      	cbz	r4, 472a2 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   4727c:	a902      	add	r1, sp, #8
   4727e:	4620      	mov	r0, r4
   47280:	f7ff ff72 	bl	47168 <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   47284:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   47288:	f000 80ca 	beq.w	47420 <nrf91_socket_offload_getaddrinfo+0x1c0>
		} else if (error == -EAFNOSUPPORT) {
   4728c:	306a      	adds	r0, #106	; 0x6a
   4728e:	f000 80ca 	beq.w	47426 <nrf91_socket_offload_getaddrinfo+0x1c6>
		if (hints->ai_next != NULL) {
   47292:	6820      	ldr	r0, [r4, #0]
   47294:	b120      	cbz	r0, 472a0 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   47296:	ac0a      	add	r4, sp, #40	; 0x28
   47298:	4621      	mov	r1, r4
   4729a:	f7ff ff65 	bl	47168 <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   4729e:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   472a0:	ac02      	add	r4, sp, #8
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   472a2:	4628      	mov	r0, r5
   472a4:	ab01      	add	r3, sp, #4
   472a6:	4622      	mov	r2, r4
   472a8:	4631      	mov	r1, r6
   472aa:	f7f5 f8f5 	bl	3c498 <nrf_getaddrinfo>
	if (retval != 0) {
   472ae:	4605      	mov	r5, r0
   472b0:	b1f8      	cbz	r0, 472f2 <nrf91_socket_offload_getaddrinfo+0x92>
	switch (nrf_error) {
   472b2:	282f      	cmp	r0, #47	; 0x2f
   472b4:	f000 80ba 	beq.w	4742c <nrf91_socket_offload_getaddrinfo+0x1cc>
   472b8:	dc0d      	bgt.n	472d6 <nrf91_socket_offload_getaddrinfo+0x76>
   472ba:	280c      	cmp	r0, #12
   472bc:	f000 80b9 	beq.w	47432 <nrf91_socket_offload_getaddrinfo+0x1d2>
		return DNS_EAI_SYSTEM;
   472c0:	2823      	cmp	r0, #35	; 0x23
   472c2:	bf08      	it	eq
   472c4:	f06f 0502 	mvneq.w	r5, #2
   472c8:	bf18      	it	ne
   472ca:	f06f 050a 	mvnne.w	r5, #10
}
   472ce:	4628      	mov	r0, r5
   472d0:	b013      	add	sp, #76	; 0x4c
   472d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   472d6:	2833      	cmp	r0, #51	; 0x33
   472d8:	d004      	beq.n	472e4 <nrf91_socket_offload_getaddrinfo+0x84>
		return DNS_EAI_SYSTEM;
   472da:	2873      	cmp	r0, #115	; 0x73
   472dc:	bf08      	it	eq
   472de:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   472e2:	e7f1      	b.n	472c8 <nrf91_socket_offload_getaddrinfo+0x68>
		errno = ENETUNREACH;
   472e4:	f7fe fb7e 	bl	459e4 <__errno>
   472e8:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   472ea:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   472ee:	6003      	str	r3, [r0, #0]
   472f0:	e7ed      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>
	struct zsock_addrinfo *latest_z_res = NULL;
   472f2:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   472f4:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   472f6:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   472f8:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   472fa:	b91e      	cbnz	r6, 47304 <nrf91_socket_offload_getaddrinfo+0xa4>
	nrf_freeaddrinfo(nrf_res);
   472fc:	9801      	ldr	r0, [sp, #4]
   472fe:	f7f5 f8cd 	bl	3c49c <nrf_freeaddrinfo>
	return retval;
   47302:	e7e4      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>
					k_malloc(sizeof(struct zsock_addrinfo));
   47304:	2050      	movs	r0, #80	; 0x50
   47306:	f7fa fd11 	bl	41d2c <k_malloc>
		if (next_z_res == NULL) {
   4730a:	4604      	mov	r4, r0
   4730c:	2800      	cmp	r0, #0
   4730e:	d07c      	beq.n	4740a <nrf91_socket_offload_getaddrinfo+0x1aa>
	family = nrf_to_z_family(nrf_in->ai_family);
   47310:	6872      	ldr	r2, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   47312:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   47314:	2a05      	cmp	r2, #5
	z_out->ai_next = NULL;
   47316:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   4731a:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   4731e:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   47322:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   47324:	d033      	beq.n	4738e <nrf91_socket_offload_getaddrinfo+0x12e>
   47326:	dc09      	bgt.n	4733c <nrf91_socket_offload_getaddrinfo+0xdc>
   47328:	2a01      	cmp	r2, #1
   4732a:	d032      	beq.n	47392 <nrf91_socket_offload_getaddrinfo+0x132>
   4732c:	2a02      	cmp	r2, #2
   4732e:	d032      	beq.n	47396 <nrf91_socket_offload_getaddrinfo+0x136>
			k_free(next_z_res);
   47330:	4620      	mov	r0, r4
   47332:	f000 feee 	bl	48112 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   47336:	f06f 0508 	mvn.w	r5, #8
   4733a:	e068      	b.n	4740e <nrf91_socket_offload_getaddrinfo+0x1ae>
	switch (nrf_family) {
   4733c:	2a0a      	cmp	r2, #10
   4733e:	d02c      	beq.n	4739a <nrf91_socket_offload_getaddrinfo+0x13a>
   47340:	2a66      	cmp	r2, #102	; 0x66
   47342:	d1f5      	bne.n	47330 <nrf91_socket_offload_getaddrinfo+0xd0>
		return AF_LTE;
   47344:	4613      	mov	r3, r2
	z_out->ai_family = family;
   47346:	60a3      	str	r3, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   47348:	68f3      	ldr	r3, [r6, #12]
	switch (proto) {
   4734a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   4734e:	d045      	beq.n	473dc <nrf91_socket_offload_getaddrinfo+0x17c>
   47350:	dc25      	bgt.n	4739e <nrf91_socket_offload_getaddrinfo+0x13e>
   47352:	2b01      	cmp	r3, #1
   47354:	d047      	beq.n	473e6 <nrf91_socket_offload_getaddrinfo+0x186>
   47356:	2b02      	cmp	r3, #2
   47358:	d043      	beq.n	473e2 <nrf91_socket_offload_getaddrinfo+0x182>
   4735a:	bb43      	cbnz	r3, 473ae <nrf91_socket_offload_getaddrinfo+0x14e>
	if (nrf_in->ai_family == NRF_AF_INET) {
   4735c:	2a02      	cmp	r2, #2
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   4735e:	6123      	str	r3, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   47360:	d143      	bne.n	473ea <nrf91_socket_offload_getaddrinfo+0x18a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   47362:	2008      	movs	r0, #8
   47364:	f7fa fce2 	bl	41d2c <k_malloc>
   47368:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   4736a:	2800      	cmp	r0, #0
   4736c:	d04a      	beq.n	47404 <nrf91_socket_offload_getaddrinfo+0x1a4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   4736e:	2308      	movs	r3, #8
   47370:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   47372:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   47374:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   47376:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   47378:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   4737a:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   4737c:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   4737e:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   47380:	f1b8 0f00 	cmp.w	r8, #0
   47384:	d149      	bne.n	4741a <nrf91_socket_offload_getaddrinfo+0x1ba>
			*res = next_z_res;
   47386:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   47388:	69f6      	ldr	r6, [r6, #28]
   4738a:	46a0      	mov	r8, r4
   4738c:	e7b5      	b.n	472fa <nrf91_socket_offload_getaddrinfo+0x9a>
		return AF_PACKET;
   4738e:	2303      	movs	r3, #3
   47390:	e7d9      	b.n	47346 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_LOCAL;
   47392:	2306      	movs	r3, #6
   47394:	e7d7      	b.n	47346 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_INET;
   47396:	2301      	movs	r3, #1
   47398:	e7d5      	b.n	47346 <nrf91_socket_offload_getaddrinfo+0xe6>
		return AF_INET6;
   4739a:	2302      	movs	r3, #2
   4739c:	e7d3      	b.n	47346 <nrf91_socket_offload_getaddrinfo+0xe6>
	switch (proto) {
   4739e:	f240 2101 	movw	r1, #513	; 0x201
   473a2:	428b      	cmp	r3, r1
   473a4:	d0da      	beq.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473a6:	dc0d      	bgt.n	473c4 <nrf91_socket_offload_getaddrinfo+0x164>
   473a8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   473ac:	d013      	beq.n	473d6 <nrf91_socket_offload_getaddrinfo+0x176>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   473ae:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   473b2:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   473b4:	2300      	movs	r3, #0
   473b6:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   473b8:	4620      	mov	r0, r4
   473ba:	f000 feaa 	bl	48112 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   473be:	f06f 0506 	mvn.w	r5, #6
   473c2:	e024      	b.n	4740e <nrf91_socket_offload_getaddrinfo+0x1ae>
	switch (proto) {
   473c4:	f240 2102 	movw	r1, #514	; 0x202
   473c8:	428b      	cmp	r3, r1
   473ca:	d0c7      	beq.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473cc:	f240 2103 	movw	r1, #515	; 0x203
   473d0:	428b      	cmp	r3, r1
   473d2:	d0c3      	beq.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473d4:	e7eb      	b.n	473ae <nrf91_socket_offload_getaddrinfo+0x14e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   473d6:	f240 1311 	movw	r3, #273	; 0x111
   473da:	e7bf      	b.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473dc:	f44f 7381 	mov.w	r3, #258	; 0x102
   473e0:	e7bc      	b.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473e2:	2311      	movs	r3, #17
   473e4:	e7ba      	b.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
   473e6:	2306      	movs	r3, #6
   473e8:	e7b8      	b.n	4735c <nrf91_socket_offload_getaddrinfo+0xfc>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   473ea:	2a0a      	cmp	r2, #10
   473ec:	d1e4      	bne.n	473b8 <nrf91_socket_offload_getaddrinfo+0x158>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   473ee:	2018      	movs	r0, #24
   473f0:	f7fa fc9c 	bl	41d2c <k_malloc>
   473f4:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   473f6:	b128      	cbz	r0, 47404 <nrf91_socket_offload_getaddrinfo+0x1a4>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   473f8:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   473fa:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   473fc:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   473fe:	f7ff fed8 	bl	471b2 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   47402:	e7bd      	b.n	47380 <nrf91_socket_offload_getaddrinfo+0x120>
			k_free(next_z_res);
   47404:	4620      	mov	r0, r4
   47406:	f000 fe84 	bl	48112 <k_free>
			retval = DNS_EAI_MEMORY;
   4740a:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   4740e:	6838      	ldr	r0, [r7, #0]
   47410:	f7ff fe9d 	bl	4714e <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   47414:	2300      	movs	r3, #0
   47416:	603b      	str	r3, [r7, #0]
   47418:	e770      	b.n	472fc <nrf91_socket_offload_getaddrinfo+0x9c>
			latest_z_res->ai_next = next_z_res;
   4741a:	f8c8 4000 	str.w	r4, [r8]
   4741e:	e7b3      	b.n	47388 <nrf91_socket_offload_getaddrinfo+0x128>
			return DNS_EAI_SOCKTYPE;
   47420:	f06f 0506 	mvn.w	r5, #6
   47424:	e753      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>
			return DNS_EAI_ADDRFAMILY;
   47426:	f06f 0508 	mvn.w	r5, #8
   4742a:	e750      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>
		return DNS_EAI_NONAME;
   4742c:	f06f 0501 	mvn.w	r5, #1
   47430:	e74d      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>
		return DNS_EAI_MEMORY;
   47432:	f06f 0509 	mvn.w	r5, #9
   47436:	e74a      	b.n	472ce <nrf91_socket_offload_getaddrinfo+0x6e>

00047438 <z_to_nrf_ipv6>:
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   47438:	2224      	movs	r2, #36	; 0x24
{
   4743a:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   4743c:	700a      	strb	r2, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   4743e:	8842      	ldrh	r2, [r0, #2]
{
   47440:	4604      	mov	r4, r0
	nrf_out->sin6_port = ptr->sin6_port;
   47442:	810a      	strh	r2, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   47444:	220a      	movs	r2, #10
{
   47446:	460b      	mov	r3, r1
	nrf_out->sin6_family = NRF_AF_INET6;
   47448:	604a      	str	r2, [r1, #4]
   4744a:	f101 0610 	add.w	r6, r1, #16
   4744e:	1d02      	adds	r2, r0, #4
   47450:	f100 0714 	add.w	r7, r0, #20
   47454:	4635      	mov	r5, r6
   47456:	6810      	ldr	r0, [r2, #0]
   47458:	6851      	ldr	r1, [r2, #4]
   4745a:	3208      	adds	r2, #8
   4745c:	c503      	stmia	r5!, {r0, r1}
   4745e:	42ba      	cmp	r2, r7
   47460:	462e      	mov	r6, r5
   47462:	d1f7      	bne.n	47454 <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   47464:	7d22      	ldrb	r2, [r4, #20]
   47466:	621a      	str	r2, [r3, #32]
}
   47468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0004746a <nrf91_socket_offload_sendto>:
{
   4746a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4746e:	b08d      	sub	sp, #52	; 0x34
   47470:	9c14      	ldr	r4, [sp, #80]	; 0x50
   47472:	460e      	mov	r6, r1
   47474:	4617      	mov	r7, r2
   47476:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   47478:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   4747a:	b96c      	cbnz	r4, 47498 <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   4747c:	4618      	mov	r0, r3
   4747e:	f7ff fdb0 	bl	46fe2 <z_to_nrf_flags>
   47482:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   47486:	4603      	mov	r3, r0
   47488:	463a      	mov	r2, r7
   4748a:	4631      	mov	r1, r6
   4748c:	4628      	mov	r0, r5
   4748e:	f7f4 ff03 	bl	3c298 <nrf_sendto>
}
   47492:	b00d      	add	sp, #52	; 0x34
   47494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET) {
   47498:	8823      	ldrh	r3, [r4, #0]
   4749a:	2b01      	cmp	r3, #1
   4749c:	d112      	bne.n	474c4 <nrf91_socket_offload_sendto+0x5a>
	nrf_out->sin_port = ptr->sin_port;
   4749e:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   474a0:	f04f 0910 	mov.w	r9, #16
	nrf_out->sin_port = ptr->sin_port;
   474a4:	f8ad 3014 	strh.w	r3, [sp, #20]
	nrf_out->sin_family = NRF_AF_INET;
   474a8:	2302      	movs	r3, #2
   474aa:	9304      	str	r3, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   474ac:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   474ae:	4640      	mov	r0, r8
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   474b0:	9306      	str	r3, [sp, #24]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   474b2:	f88d 900c 	strb.w	r9, [sp, #12]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   474b6:	f7ff fd94 	bl	46fe2 <z_to_nrf_flags>
   474ba:	ab03      	add	r3, sp, #12
   474bc:	f8cd 9004 	str.w	r9, [sp, #4]
   474c0:	9300      	str	r3, [sp, #0]
   474c2:	e7e0      	b.n	47486 <nrf91_socket_offload_sendto+0x1c>
	} else if (to->sa_family == AF_INET6) {
   474c4:	2b02      	cmp	r3, #2
   474c6:	d10c      	bne.n	474e2 <nrf91_socket_offload_sendto+0x78>
		z_to_nrf_ipv6(to, &ipv6);
   474c8:	f10d 090c 	add.w	r9, sp, #12
   474cc:	4649      	mov	r1, r9
   474ce:	4620      	mov	r0, r4
   474d0:	f7ff ffb2 	bl	47438 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   474d4:	4640      	mov	r0, r8
   474d6:	f7ff fd84 	bl	46fe2 <z_to_nrf_flags>
   474da:	2324      	movs	r3, #36	; 0x24
   474dc:	e9cd 9300 	strd	r9, r3, [sp]
   474e0:	e7d1      	b.n	47486 <nrf91_socket_offload_sendto+0x1c>
	errno = ENOTSUP;
   474e2:	f7fe fa7f 	bl	459e4 <__errno>
   474e6:	2386      	movs	r3, #134	; 0x86
   474e8:	6003      	str	r3, [r0, #0]
	return retval;
   474ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   474ee:	e7d0      	b.n	47492 <nrf91_socket_offload_sendto+0x28>

000474f0 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   474f0:	2300      	movs	r3, #0
{
   474f2:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   474f4:	e9cd 3300 	strd	r3, r3, [sp]
   474f8:	f7ff ffb7 	bl	4746a <nrf91_socket_offload_sendto>
}
   474fc:	b003      	add	sp, #12
   474fe:	f85d fb04 	ldr.w	pc, [sp], #4

00047502 <nrf91_socket_offload_connect>:
{
   47502:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   47504:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   47506:	8808      	ldrh	r0, [r1, #0]
{
   47508:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   4750a:	2801      	cmp	r0, #1
{
   4750c:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   4750e:	d10f      	bne.n	47530 <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   47510:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   47512:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   47514:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   47518:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   4751a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   4751c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   47520:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   47522:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   47524:	a901      	add	r1, sp, #4
   47526:	4620      	mov	r0, r4
   47528:	f7f4 ff34 	bl	3c394 <nrf_connect>
}
   4752c:	b00a      	add	sp, #40	; 0x28
   4752e:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   47530:	2802      	cmp	r0, #2
   47532:	d105      	bne.n	47540 <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   47534:	a901      	add	r1, sp, #4
   47536:	4618      	mov	r0, r3
   47538:	f7ff ff7e 	bl	47438 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   4753c:	2224      	movs	r2, #36	; 0x24
   4753e:	e7f1      	b.n	47524 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   47540:	4620      	mov	r0, r4
   47542:	f7f4 ff27 	bl	3c394 <nrf_connect>
		if (retval < 0) {
   47546:	2800      	cmp	r0, #0
   47548:	daf0      	bge.n	4752c <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   4754a:	f7fe fa4b 	bl	459e4 <__errno>
   4754e:	2386      	movs	r3, #134	; 0x86
   47550:	6003      	str	r3, [r0, #0]
   47552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47556:	e7e9      	b.n	4752c <nrf91_socket_offload_connect+0x2a>

00047558 <nrf91_socket_offload_setsockopt>:
{
   47558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (z_in_level) {
   4755c:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
{
   47560:	b086      	sub	sp, #24
   47562:	460c      	mov	r4, r1
   47564:	4615      	mov	r5, r2
   47566:	461e      	mov	r6, r3
   47568:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   4756a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	switch (z_in_level) {
   4756e:	d002      	beq.n	47576 <nrf91_socket_offload_setsockopt+0x1e>
   47570:	dc1d      	bgt.n	475ae <nrf91_socket_offload_setsockopt+0x56>
   47572:	2901      	cmp	r1, #1
   47574:	d12a      	bne.n	475cc <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   47576:	aa03      	add	r2, sp, #12
   47578:	4629      	mov	r1, r5
   4757a:	4620      	mov	r0, r4
   4757c:	f7e4 f916 	bl	2b7ac <z_to_nrf_optname>
   47580:	2800      	cmp	r0, #0
   47582:	db23      	blt.n	475cc <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   47584:	2c01      	cmp	r4, #1
   47586:	d11a      	bne.n	475be <nrf91_socket_offload_setsockopt+0x66>
   47588:	3d14      	subs	r5, #20
   4758a:	2d01      	cmp	r5, #1
   4758c:	d805      	bhi.n	4759a <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(struct nrf_timeval);
   4758e:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   47590:	6833      	ldr	r3, [r6, #0]
   47592:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   47594:	6873      	ldr	r3, [r6, #4]
		nrf_optval = &nrf_timeo;
   47596:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   47598:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   4759a:	9700      	str	r7, [sp, #0]
   4759c:	4633      	mov	r3, r6
   4759e:	9a03      	ldr	r2, [sp, #12]
   475a0:	4621      	mov	r1, r4
   475a2:	4640      	mov	r0, r8
   475a4:	f7f4 ff40 	bl	3c428 <nrf_setsockopt>
}
   475a8:	b006      	add	sp, #24
   475aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   475ae:	f240 2302 	movw	r3, #514	; 0x202
   475b2:	4299      	cmp	r1, r3
   475b4:	d0df      	beq.n	47576 <nrf91_socket_offload_setsockopt+0x1e>
   475b6:	f240 2303 	movw	r3, #515	; 0x203
   475ba:	4299      	cmp	r1, r3
   475bc:	e7da      	b.n	47574 <nrf91_socket_offload_setsockopt+0x1c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   475be:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   475c2:	d1ea      	bne.n	4759a <nrf91_socket_offload_setsockopt+0x42>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   475c4:	2d07      	cmp	r5, #7
   475c6:	bf08      	it	eq
   475c8:	2701      	moveq	r7, #1
   475ca:	e7e6      	b.n	4759a <nrf91_socket_offload_setsockopt+0x42>
	errno = ENOPROTOOPT;
   475cc:	f7fe fa0a 	bl	459e4 <__errno>
   475d0:	236d      	movs	r3, #109	; 0x6d
   475d2:	6003      	str	r3, [r0, #0]
   475d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   475d8:	e7e6      	b.n	475a8 <nrf91_socket_offload_setsockopt+0x50>

000475da <nrf91_socket_offload_bind>:
{
   475da:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   475dc:	880a      	ldrh	r2, [r1, #0]
{
   475de:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   475e0:	2a01      	cmp	r2, #1
{
   475e2:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   475e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
	if (addr->sa_family == AF_INET) {
   475e8:	d10f      	bne.n	4760a <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   475ea:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   475ec:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   475ee:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   475f2:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   475f4:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   475f6:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   475fa:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   475fc:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   475fe:	a901      	add	r1, sp, #4
   47600:	4620      	mov	r0, r4
   47602:	f7f4 feff 	bl	3c404 <nrf_bind>
}
   47606:	b00a      	add	sp, #40	; 0x28
   47608:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   4760a:	2a02      	cmp	r2, #2
   4760c:	d105      	bne.n	4761a <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   4760e:	a901      	add	r1, sp, #4
   47610:	4618      	mov	r0, r3
   47612:	f7ff ff11 	bl	47438 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   47616:	2224      	movs	r2, #36	; 0x24
   47618:	e7f1      	b.n	475fe <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   4761a:	f7fe f9e3 	bl	459e4 <__errno>
   4761e:	2386      	movs	r3, #134	; 0x86
   47620:	6003      	str	r3, [r0, #0]
   47622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   47626:	e7ee      	b.n	47606 <nrf91_socket_offload_bind+0x2c>

00047628 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   47628:	ea40 0301 	orr.w	r3, r0, r1
   4762c:	f033 030f 	bics.w	r3, r3, #15
   47630:	d101      	bne.n	47636 <dk_set_leds_state+0xe>
   47632:	f7e4 bbcb 	b.w	2bdcc <dk_set_leds_state.part.6>
}
   47636:	f06f 0015 	mvn.w	r0, #21
   4763a:	4770      	bx	lr

0004763c <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   4763c:	210f      	movs	r1, #15
   4763e:	f7ff bff3 	b.w	47628 <dk_set_leds_state>

00047642 <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   47642:	6883      	ldr	r3, [r0, #8]
   47644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   47646:	b103      	cbz	r3, 4764a <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   47648:	4718      	bx	r3
}
   4764a:	4770      	bx	lr

0004764c <response_handler>:
	write_uart_string(response);
   4764c:	4608      	mov	r0, r1
   4764e:	f7e5 bb2b 	b.w	2cca8 <write_uart_string>

00047652 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   47652:	280d      	cmp	r0, #13
   47654:	d004      	beq.n	47660 <is_lfcr+0xe>
   47656:	f1a0 030a 	sub.w	r3, r0, #10
   4765a:	4258      	negs	r0, r3
   4765c:	4158      	adcs	r0, r3
   4765e:	4770      	bx	lr
		return true;
   47660:	2001      	movs	r0, #1
}
   47662:	4770      	bx	lr

00047664 <skip_command_prefix>:
{
   47664:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   47666:	6802      	ldr	r2, [r0, #0]
{
   47668:	4601      	mov	r1, r0
	*cmd += sizeof("AT") - 1;
   4766a:	1c93      	adds	r3, r2, #2
   4766c:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   4766e:	7894      	ldrb	r4, [r2, #2]
   47670:	4620      	mov	r0, r4
   47672:	f7ff ffee 	bl	47652 <is_lfcr>
   47676:	b910      	cbnz	r0, 4767e <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   47678:	b10c      	cbz	r4, 4767e <skip_command_prefix+0x1a>
	(*cmd)++;
   4767a:	3203      	adds	r2, #3
   4767c:	600a      	str	r2, [r1, #0]
}
   4767e:	bd10      	pop	{r4, pc}

00047680 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   47680:	6813      	ldr	r3, [r2, #0]
   47682:	f7e5 be7d 	b.w	2d380 <at_parser_max_params_from_str>

00047686 <at_params_list_init>:
{
   47686:	b538      	push	{r3, r4, r5, lr}
   47688:	460d      	mov	r5, r1
	if (list == NULL) {
   4768a:	4604      	mov	r4, r0
   4768c:	b140      	cbz	r0, 476a0 <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   4768e:	210c      	movs	r1, #12
   47690:	4628      	mov	r0, r5
   47692:	f000 fd43 	bl	4811c <k_calloc>
   47696:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   47698:	b128      	cbz	r0, 476a6 <at_params_list_init+0x20>
	return 0;
   4769a:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   4769c:	6025      	str	r5, [r4, #0]
}
   4769e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   476a0:	f06f 0015 	mvn.w	r0, #21
   476a4:	e7fb      	b.n	4769e <at_params_list_init+0x18>
		return -ENOMEM;
   476a6:	f06f 000b 	mvn.w	r0, #11
   476aa:	e7f8      	b.n	4769e <at_params_list_init+0x18>

000476ac <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   476ac:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   476ae:	4604      	mov	r4, r0
   476b0:	b148      	cbz	r0, 476c6 <at_params_list_free+0x1a>
   476b2:	6843      	ldr	r3, [r0, #4]
   476b4:	b13b      	cbz	r3, 476c6 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   476b6:	2500      	movs	r5, #0
	at_params_list_clear(list);
   476b8:	f7e5 ff5e 	bl	2d578 <at_params_list_clear>
	list->param_count = 0;
   476bc:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   476be:	6860      	ldr	r0, [r4, #4]
   476c0:	f000 fd27 	bl	48112 <k_free>
	list->params = NULL;
   476c4:	6065      	str	r5, [r4, #4]
}
   476c6:	bd38      	pop	{r3, r4, r5, pc}

000476c8 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			uint16_t value)
{
   476c8:	b538      	push	{r3, r4, r5, lr}
   476ca:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   476cc:	b910      	cbnz	r0, 476d4 <at_params_short_put+0xc>
		return -EINVAL;
   476ce:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
	return 0;
}
   476d2:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   476d4:	6843      	ldr	r3, [r0, #4]
   476d6:	2b00      	cmp	r3, #0
   476d8:	d0f9      	beq.n	476ce <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   476da:	f7e5 fee1 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   476de:	4604      	mov	r4, r0
   476e0:	2800      	cmp	r0, #0
   476e2:	d0f4      	beq.n	476ce <at_params_short_put+0x6>
	at_param_clear(param);
   476e4:	f7e5 ff26 	bl	2d534 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   476e8:	2301      	movs	r3, #1
	param->value.int_val = (uint32_t)(value & USHRT_MAX);
   476ea:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   476ec:	7023      	strb	r3, [r4, #0]
	return 0;
   476ee:	2000      	movs	r0, #0
   476f0:	e7ef      	b.n	476d2 <at_params_short_put+0xa>

000476f2 <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   476f2:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   476f4:	b910      	cbnz	r0, 476fc <at_params_empty_put+0xa>
		return -EINVAL;
   476f6:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   476fa:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   476fc:	6843      	ldr	r3, [r0, #4]
   476fe:	2b00      	cmp	r3, #0
   47700:	d0f9      	beq.n	476f6 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   47702:	f7e5 fecd 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   47706:	4604      	mov	r4, r0
   47708:	2800      	cmp	r0, #0
   4770a:	d0f4      	beq.n	476f6 <at_params_empty_put+0x4>
	at_param_clear(param);
   4770c:	f7e5 ff12 	bl	2d534 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   47710:	2305      	movs	r3, #5
	param->value.int_val = 0;
   47712:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   47714:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   47716:	60a0      	str	r0, [r4, #8]
	return 0;
   47718:	e7ef      	b.n	476fa <at_params_empty_put+0x8>

0004771a <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      uint32_t value)
{
   4771a:	b538      	push	{r3, r4, r5, lr}
   4771c:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   4771e:	b910      	cbnz	r0, 47726 <at_params_int_put+0xc>
		return -EINVAL;
   47720:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   47724:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   47726:	6843      	ldr	r3, [r0, #4]
   47728:	2b00      	cmp	r3, #0
   4772a:	d0f9      	beq.n	47720 <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   4772c:	f7e5 feb8 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   47730:	4604      	mov	r4, r0
   47732:	2800      	cmp	r0, #0
   47734:	d0f4      	beq.n	47720 <at_params_int_put+0x6>
	at_param_clear(param);
   47736:	f7e5 fefd 	bl	2d534 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   4773a:	2302      	movs	r3, #2
	param->value.int_val = value;
   4773c:	60a5      	str	r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   4773e:	7023      	strb	r3, [r4, #0]
	return 0;
   47740:	2000      	movs	r0, #0
   47742:	e7ef      	b.n	47724 <at_params_int_put+0xa>

00047744 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   47744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47746:	4616      	mov	r6, r2
   47748:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   4774a:	b910      	cbnz	r0, 47752 <at_params_string_put+0xe>
		return -EINVAL;
   4774c:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   47750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   47752:	6843      	ldr	r3, [r0, #4]
   47754:	2b00      	cmp	r3, #0
   47756:	d0f9      	beq.n	4774c <at_params_string_put+0x8>
   47758:	2a00      	cmp	r2, #0
   4775a:	d0f7      	beq.n	4774c <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   4775c:	f7e5 fea0 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   47760:	4604      	mov	r4, r0
   47762:	2800      	cmp	r0, #0
   47764:	d0f2      	beq.n	4774c <at_params_string_put+0x8>
	char *param_value = (char *)k_malloc(str_len + 1);
   47766:	1c68      	adds	r0, r5, #1
   47768:	f7fa fae0 	bl	41d2c <k_malloc>
	if (param_value == NULL) {
   4776c:	4607      	mov	r7, r0
   4776e:	b160      	cbz	r0, 4778a <at_params_string_put+0x46>
   47770:	462a      	mov	r2, r5
   47772:	4631      	mov	r1, r6
   47774:	f000 fd08 	bl	48188 <memcpy>
	at_param_clear(param);
   47778:	4620      	mov	r0, r4
   4777a:	f7e5 fedb 	bl	2d534 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   4777e:	2303      	movs	r3, #3
	param->size = str_len;
   47780:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   47782:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   47784:	60a7      	str	r7, [r4, #8]
	return 0;
   47786:	2000      	movs	r0, #0
   47788:	e7e2      	b.n	47750 <at_params_string_put+0xc>
		return -ENOMEM;
   4778a:	f06f 000b 	mvn.w	r0, #11
   4778e:	e7df      	b.n	47750 <at_params_string_put+0xc>

00047790 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   47790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47792:	4616      	mov	r6, r2
   47794:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   47796:	b910      	cbnz	r0, 4779e <at_params_array_put+0xe>
		return -EINVAL;
   47798:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   4779c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   4779e:	6843      	ldr	r3, [r0, #4]
   477a0:	2b00      	cmp	r3, #0
   477a2:	d0f9      	beq.n	47798 <at_params_array_put+0x8>
   477a4:	2a00      	cmp	r2, #0
   477a6:	d0f7      	beq.n	47798 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   477a8:	f7e5 fe7a 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   477ac:	4604      	mov	r4, r0
   477ae:	2800      	cmp	r0, #0
   477b0:	d0f2      	beq.n	47798 <at_params_array_put+0x8>
	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   477b2:	4628      	mov	r0, r5
   477b4:	f7fa faba 	bl	41d2c <k_malloc>
	if (param_value == NULL) {
   477b8:	4607      	mov	r7, r0
   477ba:	b160      	cbz	r0, 477d6 <at_params_array_put+0x46>
   477bc:	462a      	mov	r2, r5
   477be:	4631      	mov	r1, r6
   477c0:	f000 fce2 	bl	48188 <memcpy>
	at_param_clear(param);
   477c4:	4620      	mov	r0, r4
   477c6:	f7e5 feb5 	bl	2d534 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   477ca:	2304      	movs	r3, #4
	param->size = array_len;
   477cc:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   477ce:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   477d0:	60a7      	str	r7, [r4, #8]
	return 0;
   477d2:	2000      	movs	r0, #0
   477d4:	e7e2      	b.n	4779c <at_params_array_put+0xc>
		return -ENOMEM;
   477d6:	f06f 000b 	mvn.w	r0, #11
   477da:	e7df      	b.n	4779c <at_params_array_put+0xc>

000477dc <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   477dc:	b510      	push	{r4, lr}
   477de:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   477e0:	b910      	cbnz	r0, 477e8 <at_params_short_get+0xc>
		return -EINVAL;
   477e2:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
}
   477e6:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   477e8:	6843      	ldr	r3, [r0, #4]
   477ea:	2b00      	cmp	r3, #0
   477ec:	d0f9      	beq.n	477e2 <at_params_short_get+0x6>
   477ee:	2a00      	cmp	r2, #0
   477f0:	d0f7      	beq.n	477e2 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   477f2:	f7e5 fe55 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   477f6:	2800      	cmp	r0, #0
   477f8:	d0f3      	beq.n	477e2 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   477fa:	7803      	ldrb	r3, [r0, #0]
   477fc:	2b01      	cmp	r3, #1
   477fe:	d1f0      	bne.n	477e2 <at_params_short_get+0x6>
	*value = (uint16_t)param->value.int_val;
   47800:	6883      	ldr	r3, [r0, #8]
	return 0;
   47802:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   47804:	8023      	strh	r3, [r4, #0]
	return 0;
   47806:	e7ee      	b.n	477e6 <at_params_short_get+0xa>

00047808 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      uint32_t *value)
{
   47808:	b510      	push	{r4, lr}
   4780a:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   4780c:	b910      	cbnz	r0, 47814 <at_params_int_get+0xc>
		return -EINVAL;
   4780e:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   47812:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   47814:	6843      	ldr	r3, [r0, #4]
   47816:	2b00      	cmp	r3, #0
   47818:	d0f9      	beq.n	4780e <at_params_int_get+0x6>
   4781a:	2a00      	cmp	r2, #0
   4781c:	d0f7      	beq.n	4780e <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   4781e:	f7e5 fe3f 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   47822:	2800      	cmp	r0, #0
   47824:	d0f3      	beq.n	4780e <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   47826:	7803      	ldrb	r3, [r0, #0]
   47828:	3b01      	subs	r3, #1
   4782a:	2b01      	cmp	r3, #1
   4782c:	d8ef      	bhi.n	4780e <at_params_int_get+0x6>
	*value = param->value.int_val;
   4782e:	6883      	ldr	r3, [r0, #8]
	return 0;
   47830:	2000      	movs	r0, #0
	*value = param->value.int_val;
   47832:	6023      	str	r3, [r4, #0]
	return 0;
   47834:	e7ed      	b.n	47812 <at_params_int_get+0xa>

00047836 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   47836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47838:	4616      	mov	r6, r2
   4783a:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   4783c:	b910      	cbnz	r0, 47844 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   4783e:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   47842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   47844:	6843      	ldr	r3, [r0, #4]
   47846:	2b00      	cmp	r3, #0
   47848:	d0f9      	beq.n	4783e <at_params_string_get+0x8>
   4784a:	2a00      	cmp	r2, #0
   4784c:	d0f7      	beq.n	4783e <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   4784e:	2c00      	cmp	r4, #0
   47850:	d0f5      	beq.n	4783e <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   47852:	f7e5 fe25 	bl	2d4a0 <at_params_get>
	if (param == NULL) {
   47856:	4607      	mov	r7, r0
   47858:	2800      	cmp	r0, #0
   4785a:	d0f0      	beq.n	4783e <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   4785c:	7803      	ldrb	r3, [r0, #0]
   4785e:	2b03      	cmp	r3, #3
   47860:	d1ed      	bne.n	4783e <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   47862:	f7e5 fe3f 	bl	2d4e4 <at_param_size>
	if (*len < param_len) {
   47866:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   47868:	4605      	mov	r5, r0
	if (*len < param_len) {
   4786a:	4283      	cmp	r3, r0
   4786c:	d307      	bcc.n	4787e <at_params_string_get+0x48>
   4786e:	4602      	mov	r2, r0
   47870:	68b9      	ldr	r1, [r7, #8]
   47872:	4630      	mov	r0, r6
   47874:	f000 fc88 	bl	48188 <memcpy>
	*len = param_len;
   47878:	6025      	str	r5, [r4, #0]
	return 0;
   4787a:	2000      	movs	r0, #0
   4787c:	e7e1      	b.n	47842 <at_params_string_get+0xc>
		return -ENOMEM;
   4787e:	f06f 000b 	mvn.w	r0, #11
   47882:	e7de      	b.n	47842 <at_params_string_get+0xc>

00047884 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   47884:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   47886:	4605      	mov	r5, r0
   47888:	b180      	cbz	r0, 478ac <at_params_valid_count_get+0x28>
   4788a:	6843      	ldr	r3, [r0, #4]
   4788c:	b173      	cbz	r3, 478ac <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   4788e:	2100      	movs	r1, #0
   47890:	f7e5 fe06 	bl	2d4a0 <at_params_get>
	size_t valid_i = 0;
   47894:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   47896:	b108      	cbz	r0, 4789c <at_params_valid_count_get+0x18>
   47898:	7803      	ldrb	r3, [r0, #0]
   4789a:	b90b      	cbnz	r3, 478a0 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   4789c:	4620      	mov	r0, r4
   4789e:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   478a0:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   478a2:	4621      	mov	r1, r4
   478a4:	4628      	mov	r0, r5
   478a6:	f7e5 fdfb 	bl	2d4a0 <at_params_get>
   478aa:	e7f4      	b.n	47896 <at_params_valid_count_get+0x12>
		return -EINVAL;
   478ac:	f06f 0415 	mvn.w	r4, #21
   478b0:	e7f4      	b.n	4789c <at_params_valid_count_get+0x18>

000478b2 <response_is_valid>:
{
   478b2:	b570      	push	{r4, r5, r6, lr}
   478b4:	4606      	mov	r6, r0
	if ((response_len < strlen(check)) ||
   478b6:	4610      	mov	r0, r2
{
   478b8:	460d      	mov	r5, r1
   478ba:	4614      	mov	r4, r2
	if ((response_len < strlen(check)) ||
   478bc:	f7d5 fcd2 	bl	1d264 <strlen>
   478c0:	42a8      	cmp	r0, r5
   478c2:	d808      	bhi.n	478d6 <response_is_valid+0x24>
	    (memcmp(response, check, response_len) != 0)) {
   478c4:	462a      	mov	r2, r5
   478c6:	4621      	mov	r1, r4
   478c8:	4630      	mov	r0, r6
   478ca:	f000 fc4f 	bl	4816c <memcmp>
	if ((response_len < strlen(check)) ||
   478ce:	fab0 f080 	clz	r0, r0
   478d2:	0940      	lsrs	r0, r0, #5
}
   478d4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   478d6:	2000      	movs	r0, #0
   478d8:	e7fc      	b.n	478d4 <response_is_valid+0x22>

000478da <lte_lc_init_and_connect>:
{
   478da:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   478dc:	f7e6 f984 	bl	2dbe8 <w_lte_lc_init>
	if (ret) {
   478e0:	b920      	cbnz	r0, 478ec <lte_lc_init_and_connect+0x12>
}
   478e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   478e6:	2001      	movs	r0, #1
   478e8:	f7e6 b818 	b.w	2d91c <w_lte_lc_connect>
}
   478ec:	bd08      	pop	{r3, pc}

000478ee <json_add_str>:
{
   478ee:	b538      	push	{r3, r4, r5, lr}
   478f0:	460d      	mov	r5, r1
	if (parent == NULL || str == NULL || item == NULL) {
   478f2:	4604      	mov	r4, r0
   478f4:	b158      	cbz	r0, 4790e <json_add_str+0x20>
   478f6:	b152      	cbz	r2, 4790e <json_add_str+0x20>
	json_str = cJSON_CreateString(item);
   478f8:	4610      	mov	r0, r2
   478fa:	f7e3 fc4f 	bl	2b19c <cJSON_CreateString>
	if (json_str == NULL) {
   478fe:	4602      	mov	r2, r0
   47900:	b140      	cbz	r0, 47914 <json_add_str+0x26>
	cJSON_AddItemToObject(parent, str, item);
   47902:	4620      	mov	r0, r4
   47904:	4629      	mov	r1, r5
   47906:	f7ff fac0 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   4790a:	2000      	movs	r0, #0
}
   4790c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   4790e:	f06f 0015 	mvn.w	r0, #21
   47912:	e7fb      	b.n	4790c <json_add_str+0x1e>
		return -ENOMEM;
   47914:	f06f 000b 	mvn.w	r0, #11
   47918:	e7f8      	b.n	4790c <json_add_str+0x1e>

0004791a <json_add_data>:
{
   4791a:	b5f0      	push	{r4, r5, r6, r7, lr}
   4791c:	4604      	mov	r4, r0
   4791e:	b09b      	sub	sp, #108	; 0x6c
	if (param == NULL || json_obj == NULL) {
   47920:	460f      	mov	r7, r1
   47922:	b921      	cbnz	r1, 4792e <json_add_data+0x14>
		return -EINVAL;
   47924:	f06f 0615 	mvn.w	r6, #21
}
   47928:	4630      	mov	r0, r6
   4792a:	b01b      	add	sp, #108	; 0x6c
   4792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   4792e:	2264      	movs	r2, #100	; 0x64
   47930:	2100      	movs	r1, #0
   47932:	a801      	add	r0, sp, #4
   47934:	f000 fc48 	bl	481c8 <memset>
	ret = modem_info_name_get(param->type,
   47938:	a901      	add	r1, sp, #4
   4793a:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   4793e:	f7e6 fb33 	bl	2dfa8 <modem_info_name_get>
	if (ret < 0) {
   47942:	1e05      	subs	r5, r0, #0
   47944:	dbee      	blt.n	47924 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   47946:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   4794a:	f7e6 fb23 	bl	2df94 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   4794e:	2803      	cmp	r0, #3
   47950:	d113      	bne.n	4797a <json_add_data+0x60>
   47952:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   47956:	2b03      	cmp	r3, #3
   47958:	d00f      	beq.n	4797a <json_add_data+0x60>
		total_len += strlen(param->value_string);
   4795a:	3402      	adds	r4, #2
   4795c:	4620      	mov	r0, r4
   4795e:	f7d5 fc81 	bl	1d264 <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   47962:	4622      	mov	r2, r4
		total_len += strlen(param->value_string);
   47964:	4606      	mov	r6, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   47966:	a901      	add	r1, sp, #4
   47968:	4638      	mov	r0, r7
   4796a:	f7ff ffc0 	bl	478ee <json_add_str>
   4796e:	4428      	add	r0, r5
	if (ret < 0) {
   47970:	ea36 0620 	bics.w	r6, r6, r0, asr #32
   47974:	bf28      	it	cs
   47976:	4606      	movcs	r6, r0
   47978:	e7d6      	b.n	47928 <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   4797a:	8820      	ldrh	r0, [r4, #0]
   4797c:	f7d4 fea2 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   47980:	ec41 0b10 	vmov	d0, r0, r1
   47984:	f7d6 f8b0 	bl	1dae8 <cJSON_CreateNumber>
	if (json_num == NULL) {
   47988:	4602      	mov	r2, r0
   4798a:	b138      	cbz	r0, 4799c <json_add_data+0x82>
	cJSON_AddItemToObject(parent, str, item);
   4798c:	4638      	mov	r0, r7
   4798e:	a901      	add	r1, sp, #4
   47990:	f7ff fa7b 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   47994:	2000      	movs	r0, #0
		ret += json_add_num(json_obj, data_name, param->value);
   47996:	4428      	add	r0, r5
		total_len += sizeof(uint16_t);
   47998:	2602      	movs	r6, #2
   4799a:	e7e9      	b.n	47970 <json_add_data+0x56>
		return -ENOMEM;
   4799c:	f06f 000b 	mvn.w	r0, #11
   479a0:	e7f9      	b.n	47996 <json_add_data+0x7c>

000479a2 <sim_data_add>:
{
   479a2:	b570      	push	{r4, r5, r6, lr}
   479a4:	460d      	mov	r5, r1
	if (sim == NULL || json_obj == NULL) {
   479a6:	4606      	mov	r6, r0
   479a8:	b180      	cbz	r0, 479cc <sim_data_add+0x2a>
   479aa:	b179      	cbz	r1, 479cc <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   479ac:	f7ff ffb5 	bl	4791a <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   479b0:	4629      	mov	r1, r5
	total_len = json_add_data(&sim->uicc, json_obj);
   479b2:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   479b4:	f106 0070 	add.w	r0, r6, #112	; 0x70
   479b8:	f7ff ffaf 	bl	4791a <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   479bc:	4629      	mov	r1, r5
	total_len += json_add_data(&sim->iccid, json_obj);
   479be:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   479c0:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
   479c4:	f7ff ffa9 	bl	4791a <json_add_data>
   479c8:	4420      	add	r0, r4
}
   479ca:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   479cc:	f06f 0015 	mvn.w	r0, #21
   479d0:	e7fb      	b.n	479ca <sim_data_add+0x28>

000479d2 <k_uptime_get>:
{
   479d2:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   479d4:	f000 fb03 	bl	47fde <z_impl_k_uptime_ticks>
   479d8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   479dc:	fba0 2304 	umull	r2, r3, r0, r4
   479e0:	fb04 3301 	mla	r3, r4, r1, r3
   479e4:	0bd0      	lsrs	r0, r2, #15
}
   479e6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   479ea:	0bd9      	lsrs	r1, r3, #15
   479ec:	bd10      	pop	{r4, pc}

000479ee <date_time_timestamp_clear>:
	return 0;
}

int date_time_timestamp_clear(int64_t *unix_timestamp)
{
	if (unix_timestamp == NULL) {
   479ee:	b128      	cbz	r0, 479fc <date_time_timestamp_clear+0xe>
		return -EINVAL;
	}

	*unix_timestamp = 0;
   479f0:	2200      	movs	r2, #0
   479f2:	2300      	movs	r3, #0
   479f4:	e9c0 2300 	strd	r2, r3, [r0]

	return 0;
   479f8:	2000      	movs	r0, #0
   479fa:	4770      	bx	lr
		return -EINVAL;
   479fc:	f06f 0015 	mvn.w	r0, #21
}
   47a00:	4770      	bx	lr

00047a02 <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   47a02:	6843      	ldr	r3, [r0, #4]
   47a04:	685b      	ldr	r3, [r3, #4]
   47a06:	b103      	cbz	r3, 47a0a <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   47a08:	4718      	bx	r3
	}
}
   47a0a:	4770      	bx	lr

00047a0c <api_user_data_set>:
	backend->config->user_data = user_data;
   47a0c:	6843      	ldr	r3, [r0, #4]
}
   47a0e:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   47a10:	60d9      	str	r1, [r3, #12]
}
   47a12:	4770      	bx	lr

00047a14 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   47a14:	e8d0 3fef 	ldaex	r3, [r0]
   47a18:	e8c0 1fe2 	stlex	r2, r1, [r0]
   47a1c:	2a00      	cmp	r2, #0
   47a1e:	d1f9      	bne.n	47a14 <atomic_set>
}
   47a20:	4618      	mov	r0, r3
   47a22:	4770      	bx	lr

00047a24 <api_ping>:
{
   47a24:	b508      	push	{r3, lr}
	nct_process();
   47a26:	f7e9 fb0f 	bl	31048 <nct_process>
}
   47a2a:	2000      	movs	r0, #0
   47a2c:	bd08      	pop	{r3, pc}

00047a2e <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   47a2e:	f7e9 bb17 	b.w	31060 <nct_keepalive_time_left>

00047a32 <api_input>:
   47a32:	b508      	push	{r3, lr}
   47a34:	f7e9 fb08 	bl	31048 <nct_process>
   47a38:	2000      	movs	r0, #0
   47a3a:	bd08      	pop	{r3, pc}

00047a3c <api_disconnect>:
	return nrf_cloud_disconnect();
   47a3c:	f7e7 bc38 	b.w	2f2b0 <nrf_cloud_disconnect>

00047a40 <json_add_str>:
{
   47a40:	b538      	push	{r3, r4, r5, lr}
   47a42:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   47a44:	4610      	mov	r0, r2
{
   47a46:	460d      	mov	r5, r1
	json_str = cJSON_CreateString(item);
   47a48:	f7e3 fba8 	bl	2b19c <cJSON_CreateString>
	if (json_str == NULL) {
   47a4c:	4602      	mov	r2, r0
   47a4e:	b128      	cbz	r0, 47a5c <json_add_str+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   47a50:	4620      	mov	r0, r4
   47a52:	4629      	mov	r1, r5
   47a54:	f7ff fa19 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   47a58:	2000      	movs	r0, #0
}
   47a5a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   47a5c:	f06f 000b 	mvn.w	r0, #11
   47a60:	e7fb      	b.n	47a5a <json_add_str+0x1a>

00047a62 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   47a62:	b108      	cbz	r0, 47a68 <json_object_decode+0x6>
   47a64:	f7ff ba05 	b.w	46e72 <cJSON_GetObjectItem>
}
   47a68:	4770      	bx	lr

00047a6a <json_add_null>:
{
   47a6a:	b538      	push	{r3, r4, r5, lr}
   47a6c:	4604      	mov	r4, r0
   47a6e:	460d      	mov	r5, r1
	json_null = cJSON_CreateNull();
   47a70:	f7e3 fb78 	bl	2b164 <cJSON_CreateNull>
	if (json_null == NULL) {
   47a74:	4602      	mov	r2, r0
   47a76:	b128      	cbz	r0, 47a84 <json_add_null+0x1a>
	cJSON_AddItemToObject(parent, str, item);
   47a78:	4620      	mov	r0, r4
   47a7a:	4629      	mov	r1, r5
   47a7c:	f7ff fa05 	bl	46e8a <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   47a80:	2000      	movs	r0, #0
}
   47a82:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   47a84:	f06f 000b 	mvn.w	r0, #11
   47a88:	e7fb      	b.n	47a82 <json_add_null+0x18>

00047a8a <json_decode_and_alloc>:
{
   47a8a:	b538      	push	{r3, r4, r5, lr}
   47a8c:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   47a8e:	4604      	mov	r4, r0
   47a90:	b110      	cbz	r0, 47a98 <json_decode_and_alloc+0xe>
   47a92:	68c3      	ldr	r3, [r0, #12]
   47a94:	2b10      	cmp	r3, #16
   47a96:	d004      	beq.n	47aa2 <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   47a98:	2300      	movs	r3, #0
		return -ENOENT;
   47a9a:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   47a9e:	606b      	str	r3, [r5, #4]
}
   47aa0:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   47aa2:	6900      	ldr	r0, [r0, #16]
   47aa4:	f7d5 fbde 	bl	1d264 <strlen>
   47aa8:	6028      	str	r0, [r5, #0]
	data->ptr = nrf_cloud_malloc(data->len + 1);
   47aaa:	3001      	adds	r0, #1
   47aac:	f7fa f93e 	bl	41d2c <k_malloc>
   47ab0:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   47ab2:	b130      	cbz	r0, 47ac2 <json_decode_and_alloc+0x38>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   47ab4:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   47ab6:	6921      	ldr	r1, [r4, #16]
   47ab8:	3201      	adds	r2, #1
   47aba:	f000 fd70 	bl	4859e <strncpy>
	return 0;
   47abe:	2000      	movs	r0, #0
   47ac0:	e7ee      	b.n	47aa0 <json_decode_and_alloc+0x16>
		return -ENOMEM;
   47ac2:	f06f 000b 	mvn.w	r0, #11
   47ac6:	e7eb      	b.n	47aa0 <json_decode_and_alloc+0x16>

00047ac8 <nrf_codec_init>:
{
   47ac8:	b508      	push	{r3, lr}
	cJSON_Init();
   47aca:	f7e3 fb9d 	bl	2b208 <cJSON_Init>
}
   47ace:	2000      	movs	r0, #0
   47ad0:	bd08      	pop	{r3, pc}

00047ad2 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   47ad2:	2000      	movs	r0, #0
   47ad4:	4770      	bx	lr

00047ad6 <disconnection_handler>:
{
   47ad6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct nrf_cloud_evt evt = {
   47ad8:	2218      	movs	r2, #24
   47ada:	2100      	movs	r1, #0
   47adc:	4668      	mov	r0, sp
   47ade:	f000 fb73 	bl	481c8 <memset>
   47ae2:	2308      	movs	r3, #8
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   47ae4:	4669      	mov	r1, sp
   47ae6:	2001      	movs	r0, #1
	const struct nrf_cloud_evt evt = {
   47ae8:	f88d 3000 	strb.w	r3, [sp]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   47aec:	f7e7 fb64 	bl	2f1b8 <nfsm_set_current_state_and_notify>
}
   47af0:	2000      	movs	r0, #0
   47af2:	b007      	add	sp, #28
   47af4:	f85d fb04 	ldr.w	pc, [sp], #4

00047af8 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   47af8:	b510      	push	{r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   47afa:	2306      	movs	r3, #6
   47afc:	2400      	movs	r4, #0
{
   47afe:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   47b00:	e9cd 4400 	strd	r4, r4, [sp]
   47b04:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   47b08:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   47b0a:	aa02      	add	r2, sp, #8
   47b0c:	e893 0003 	ldmia.w	r3, {r0, r1}
   47b10:	3308      	adds	r3, #8
   47b12:	e882 0003 	stmia.w	r2, {r0, r1}
   47b16:	e893 0003 	ldmia.w	r3, {r0, r1}
   47b1a:	ab06      	add	r3, sp, #24
   47b1c:	e903 0003 	stmdb	r3, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   47b20:	f7e7 fb44 	bl	2f1ac <nfsm_get_current_state>
   47b24:	4669      	mov	r1, sp
   47b26:	f7e7 fb47 	bl	2f1b8 <nfsm_set_current_state_and_notify>

	return 0;
}
   47b2a:	4620      	mov	r0, r4
   47b2c:	b006      	add	sp, #24
   47b2e:	bd10      	pop	{r4, pc}

00047b30 <dc_connection_handler>:
{
   47b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   47b32:	6801      	ldr	r1, [r0, #0]
   47b34:	b951      	cbnz	r1, 47b4c <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   47b36:	2218      	movs	r2, #24
   47b38:	4668      	mov	r0, sp
   47b3a:	f000 fb45 	bl	481c8 <memset>
   47b3e:	2304      	movs	r3, #4
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   47b40:	4669      	mov	r1, sp
   47b42:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   47b44:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   47b48:	f7e7 fb36 	bl	2f1b8 <nfsm_set_current_state_and_notify>
}
   47b4c:	2000      	movs	r0, #0
   47b4e:	b007      	add	sp, #28
   47b50:	f85d fb04 	ldr.w	pc, [sp], #4

00047b54 <cc_tx_ack_in_state_requested_handler>:
{
   47b54:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   47b56:	f241 632e 	movw	r3, #5678	; 0x162e
   47b5a:	6842      	ldr	r2, [r0, #4]
   47b5c:	429a      	cmp	r2, r3
   47b5e:	d103      	bne.n	47b68 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   47b60:	2100      	movs	r1, #0
   47b62:	2005      	movs	r0, #5
   47b64:	f7e7 fb28 	bl	2f1b8 <nfsm_set_current_state_and_notify>
}
   47b68:	2000      	movs	r0, #0
   47b6a:	bd08      	pop	{r3, pc}

00047b6c <dc_disconnection_handler>:
   47b6c:	2000      	movs	r0, #0
   47b6e:	4770      	bx	lr

00047b70 <dc_tx_ack_handler>:
   47b70:	2000      	movs	r0, #0
   47b72:	4770      	bx	lr

00047b74 <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   47b74:	2101      	movs	r1, #1
   47b76:	f7e8 bbf9 	b.w	3036c <dc_send>

00047b7a <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   47b7a:	2100      	movs	r1, #0
   47b7c:	f7e8 bbf6 	b.w	3036c <dc_send>

00047b80 <add_number_to_array>:
{
   47b80:	b510      	push	{r4, lr}
   47b82:	4604      	mov	r4, r0
	cJSON * item = cJSON_CreateNumber(number);
   47b84:	4608      	mov	r0, r1
   47b86:	f7d4 fdad 	bl	1c6e4 <__aeabi_i2d>
   47b8a:	ec41 0b10 	vmov	d0, r0, r1
   47b8e:	f7d5 ffab 	bl	1dae8 <cJSON_CreateNumber>
	if (item && array) {
   47b92:	b128      	cbz	r0, 47ba0 <add_number_to_array+0x20>
   47b94:	b12c      	cbz	r4, 47ba2 <add_number_to_array+0x22>
		cJSON_AddItemToArray(array, item);
   47b96:	4601      	mov	r1, r0
   47b98:	4620      	mov	r0, r4
   47b9a:	f7ff f974 	bl	46e86 <cJSON_AddItemToArray>
	return item && array;
   47b9e:	2001      	movs	r0, #1
}
   47ba0:	bd10      	pop	{r4, pc}
	return item && array;
   47ba2:	4620      	mov	r0, r4
   47ba4:	e7fc      	b.n	47ba0 <add_number_to_array+0x20>

00047ba6 <add_string_to_array>:
{
   47ba6:	b510      	push	{r4, lr}
   47ba8:	4604      	mov	r4, r0
	cJSON * item = cJSON_CreateString(string);
   47baa:	4608      	mov	r0, r1
   47bac:	f7e3 faf6 	bl	2b19c <cJSON_CreateString>
	if (item && array) {
   47bb0:	b128      	cbz	r0, 47bbe <add_string_to_array+0x18>
   47bb2:	b12c      	cbz	r4, 47bc0 <add_string_to_array+0x1a>
		cJSON_AddItemToArray(array, item);
   47bb4:	4601      	mov	r1, r0
   47bb6:	4620      	mov	r0, r4
   47bb8:	f7ff f965 	bl	46e86 <cJSON_AddItemToArray>
	return item && array;
   47bbc:	2001      	movs	r0, #1
}
   47bbe:	bd10      	pop	{r4, pc}
	return item && array;
   47bc0:	4620      	mov	r0, r4
   47bc2:	e7fc      	b.n	47bbe <add_string_to_array+0x18>

00047bc4 <publish_and_free_array>:
{	if (!array) {
   47bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47bc6:	460e      	mov	r6, r1
   47bc8:	4614      	mov	r4, r2
   47bca:	4607      	mov	r7, r0
   47bcc:	b1c0      	cbz	r0, 47c00 <publish_and_free_array+0x3c>
	char * array_str = cJSON_PrintUnformatted(array);
   47bce:	f7ff f93f 	bl	46e50 <cJSON_PrintUnformatted>
   47bd2:	4605      	mov	r5, r0
	cJSON_free(array);
   47bd4:	4638      	mov	r0, r7
   47bd6:	f7e3 fb11 	bl	2b1fc <cJSON_free>
	if (array_str == NULL) {
   47bda:	b1a5      	cbz	r5, 47c06 <publish_and_free_array+0x42>
		pub_param->message.topic = *topic;
   47bdc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.data = array_str;
   47be0:	60e5      	str	r5, [r4, #12]
		pub_param->message.topic = *topic;
   47be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   47be6:	4628      	mov	r0, r5
   47be8:	f7d5 fb3c 	bl	1d264 <strlen>
   47bec:	6120      	str	r0, [r4, #16]
		ret = publish(pub_param);
   47bee:	4620      	mov	r0, r4
   47bf0:	f7ea f852 	bl	31c98 <publish>
   47bf4:	4604      	mov	r4, r0
	cJSON_free(array_str);
   47bf6:	4628      	mov	r0, r5
   47bf8:	f7e3 fb00 	bl	2b1fc <cJSON_free>
}
   47bfc:	4620      	mov	r0, r4
   47bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   47c00:	f06f 0415 	mvn.w	r4, #21
   47c04:	e7fa      	b.n	47bfc <publish_and_free_array+0x38>
		return -ENOMEM;
   47c06:	f06f 040b 	mvn.w	r4, #11
   47c0a:	e7f7      	b.n	47bfc <publish_and_free_array+0x38>

00047c0c <reset_topic>:
{
   47c0c:	b510      	push	{r4, lr}
   47c0e:	4604      	mov	r4, r0
	if (topic->utf8) {
   47c10:	6800      	ldr	r0, [r0, #0]
   47c12:	b118      	cbz	r0, 47c1c <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   47c14:	f000 fa7d 	bl	48112 <k_free>
		topic->utf8 = NULL;
   47c18:	2300      	movs	r3, #0
   47c1a:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   47c1c:	2300      	movs	r3, #0
   47c1e:	6063      	str	r3, [r4, #4]
}
   47c20:	bd10      	pop	{r4, pc}

00047c22 <get_string_from_array>:
{
   47c22:	b538      	push	{r3, r4, r5, lr}
   47c24:	4614      	mov	r4, r2
	cJSON * item = cJSON_GetArrayItem(array, index);
   47c26:	f7ff f91e 	bl	46e66 <cJSON_GetArrayItem>
   47c2a:	4605      	mov	r5, r0
	if(!cJSON_IsString(item)) {
   47c2c:	f7ff f97c 	bl	46f28 <cJSON_IsString>
   47c30:	b118      	cbz	r0, 47c3a <get_string_from_array+0x18>
	return 0;
   47c32:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   47c34:	692b      	ldr	r3, [r5, #16]
   47c36:	6023      	str	r3, [r4, #0]
}
   47c38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   47c3a:	f06f 0015 	mvn.w	r0, #21
   47c3e:	e7fb      	b.n	47c38 <get_string_from_array+0x16>

00047c40 <request_send>:
	switch (dl->proto) {
   47c40:	f8d0 3824 	ldr.w	r3, [r0, #2084]	; 0x824
   47c44:	2b06      	cmp	r3, #6
   47c46:	d002      	beq.n	47c4e <request_send+0xe>
   47c48:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   47c4c:	d101      	bne.n	47c52 <request_send+0x12>
		return http_get_request_send(dl);
   47c4e:	f7eb bd07 	b.w	33660 <http_get_request_send>
}
   47c52:	2000      	movs	r0, #0
   47c54:	4770      	bx	lr

00047c56 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   47c56:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   47c58:	2300      	movs	r3, #0
   47c5a:	9301      	str	r3, [sp, #4]
   47c5c:	9303      	str	r3, [sp, #12]
   47c5e:	2301      	movs	r3, #1
		.error = -error
   47c60:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   47c62:	f88d 3004 	strb.w	r3, [sp, #4]
   47c66:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   47c68:	6803      	ldr	r3, [r0, #0]
   47c6a:	a801      	add	r0, sp, #4
   47c6c:	4798      	blx	r3
}
   47c6e:	b005      	add	sp, #20
   47c70:	f85d fb04 	ldr.w	pc, [sp], #4

00047c74 <socket_send>:
{
   47c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   47c78:	2500      	movs	r5, #0
{
   47c7a:	4606      	mov	r6, r0
   47c7c:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   47c7e:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   47c80:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   47c84:	b90c      	cbnz	r4, 47c8a <socket_send+0x16>
	return 0;
   47c86:	4620      	mov	r0, r4
   47c88:	e00e      	b.n	47ca8 <socket_send+0x34>
		sent = send(client->fd, client->buf + off, len, 0);
   47c8a:	6830      	ldr	r0, [r6, #0]
   47c8c:	2300      	movs	r3, #0
   47c8e:	e9cd 7700 	strd	r7, r7, [sp]
   47c92:	4622      	mov	r2, r4
   47c94:	eb08 0105 	add.w	r1, r8, r5
   47c98:	f7fd f92d 	bl	44ef6 <z_impl_zsock_sendto>
		if (sent <= 0) {
   47c9c:	2800      	cmp	r0, #0
   47c9e:	dc06      	bgt.n	47cae <socket_send+0x3a>
			return -errno;
   47ca0:	f7fd fea0 	bl	459e4 <__errno>
   47ca4:	6800      	ldr	r0, [r0, #0]
   47ca6:	4240      	negs	r0, r0
}
   47ca8:	b002      	add	sp, #8
   47caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   47cae:	4405      	add	r5, r0
		len -= sent;
   47cb0:	1a24      	subs	r4, r4, r0
   47cb2:	e7e7      	b.n	47c84 <socket_send+0x10>

00047cb4 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   47cb4:	b128      	cbz	r0, 47cc2 <download_client_file_size_get+0xe>
   47cb6:	b121      	cbz	r1, 47cc2 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   47cb8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   47cbc:	2000      	movs	r0, #0
	*size = client->file_size;
   47cbe:	600b      	str	r3, [r1, #0]
	return 0;
   47cc0:	4770      	bx	lr
		return -EINVAL;
   47cc2:	f06f 0015 	mvn.w	r0, #21
}
   47cc6:	4770      	bx	lr

00047cc8 <swallow>:
{
   47cc8:	b570      	push	{r4, r5, r6, lr}
   47cca:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   47ccc:	6800      	ldr	r0, [r0, #0]
{
   47cce:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   47cd0:	f000 fc84 	bl	485dc <strstr>
	if (!p) {
   47cd4:	4604      	mov	r4, r0
   47cd6:	b130      	cbz	r0, 47ce6 <swallow+0x1e>
	*str = p + strlen(swallow);
   47cd8:	4630      	mov	r0, r6
   47cda:	f7d5 fac3 	bl	1d264 <strlen>
   47cde:	4420      	add	r0, r4
   47ce0:	6028      	str	r0, [r5, #0]
	return 0;
   47ce2:	2000      	movs	r0, #0
}
   47ce4:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   47ce6:	2001      	movs	r0, #1
   47ce8:	e7fc      	b.n	47ce4 <swallow+0x1c>

00047cea <sensor_sim_attr_set>:
}
   47cea:	2000      	movs	r0, #0
   47cec:	4770      	bx	lr

00047cee <sensor_sim_thread>:
{
   47cee:	b570      	push	{r4, r5, r6, lr}
   47cf0:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->data;
   47cf2:	68c5      	ldr	r5, [r0, #12]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   47cf4:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(timeout);
   47cf8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   47cfc:	2100      	movs	r1, #0
   47cfe:	f7f8 fda1 	bl	40844 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   47d02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   47d04:	2b00      	cmp	r3, #0
   47d06:	d0f7      	beq.n	47cf8 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   47d08:	4631      	mov	r1, r6
   47d0a:	4620      	mov	r0, r4
   47d0c:	4798      	blx	r3
   47d0e:	e7f3      	b.n	47cf8 <sensor_sim_thread+0xa>

00047d10 <notify_event>:
	if (drv_data->handler) {
   47d10:	68c3      	ldr	r3, [r0, #12]
   47d12:	685b      	ldr	r3, [r3, #4]
   47d14:	b103      	cbz	r3, 47d18 <notify_event+0x8>
		drv_data->handler(dev, evt);
   47d16:	4718      	bx	r3
}
   47d18:	4770      	bx	lr

00047d1a <stop_work_fn>:
{
   47d1a:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   47d1c:	f5a0 6011 	sub.w	r0, r0, #2320	; 0x910
{
   47d20:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   47d22:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   47d24:	22c0      	movs	r2, #192	; 0xc0
   47d26:	2100      	movs	r1, #0
   47d28:	4668      	mov	r0, sp
   47d2a:	f000 fa4d 	bl	481c8 <memset>
   47d2e:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   47d30:	4669      	mov	r1, sp
   47d32:	4620      	mov	r0, r4
	struct gps_event evt = {
   47d34:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   47d38:	f7ff ffea 	bl	47d10 <notify_event>
}
   47d3c:	b030      	add	sp, #192	; 0xc0
   47d3e:	bd10      	pop	{r4, pc}

00047d40 <timeout_work_fn>:
{
   47d40:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   47d42:	f5a0 6014 	sub.w	r0, r0, #2368	; 0x940
{
   47d46:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   47d48:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   47d4a:	22c0      	movs	r2, #192	; 0xc0
   47d4c:	2100      	movs	r1, #0
   47d4e:	4668      	mov	r0, sp
   47d50:	f000 fa3a 	bl	481c8 <memset>
   47d54:	2302      	movs	r3, #2
	notify_event(dev, &evt);
   47d56:	4669      	mov	r1, sp
   47d58:	4620      	mov	r0, r4
	struct gps_event evt = {
   47d5a:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   47d5e:	f7ff ffd7 	bl	47d10 <notify_event>
}
   47d62:	b030      	add	sp, #192	; 0xc0
   47d64:	bd10      	pop	{r4, pc}

00047d66 <atomic_set>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   47d66:	e8d0 3fef 	ldaex	r3, [r0]
   47d6a:	e8c0 1fe2 	stlex	r2, r1, [r0]
   47d6e:	2a00      	cmp	r2, #0
   47d70:	d1f9      	bne.n	47d66 <atomic_set>
}
   47d72:	4618      	mov	r0, r3
   47d74:	4770      	bx	lr

00047d76 <setup>:
{
   47d76:	4602      	mov	r2, r0
	drv_data->socket = -1;
   47d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
   47d7c:	b508      	push	{r3, lr}
	struct gps_drv_data *drv_data = dev->data;
   47d7e:	68c0      	ldr	r0, [r0, #12]
	drv_data->socket = -1;
   47d80:	6241      	str	r1, [r0, #36]	; 0x24
	drv_data->dev = dev;
   47d82:	f840 2b1c 	str.w	r2, [r0], #28
	atomic_set(&drv_data->is_active, 0);
   47d86:	2100      	movs	r1, #0
   47d88:	f7ff ffed 	bl	47d66 <atomic_set>
}
   47d8c:	2000      	movs	r0, #0
   47d8e:	bd08      	pop	{r3, pc}

00047d90 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   47d90:	4700      	bx	r0

00047d92 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   47d92:	f000 b8b5 	b.w	47f00 <z_impl_k_busy_wait>

00047d96 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   47d96:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   47d9a:	4770      	bx	lr

00047d9c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   47d9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   47da0:	4770      	bx	lr

00047da2 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   47da2:	f44f 7080 	mov.w	r0, #256	; 0x100
   47da6:	4770      	bx	lr

00047da8 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   47da8:	f7fd bb91 	b.w	454ce <z_clock_idle_exit>

00047dac <k_heap_init>:
{
   47dac:	b410      	push	{r4}
   47dae:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   47db2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   47db6:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   47dba:	f7dc bed5 	b.w	24b68 <sys_heap_init>

00047dbe <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   47dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   47dc0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   47dc4:	4614      	mov	r4, r2
	block->id.heap = p->heap;
   47dc6:	6800      	ldr	r0, [r0, #0]
{
   47dc8:	460d      	mov	r5, r1
	block->id.heap = p->heap;
   47dca:	6048      	str	r0, [r1, #4]
	block->data = k_heap_alloc(p->heap, size, timeout);
   47dcc:	4632      	mov	r2, r6
   47dce:	463b      	mov	r3, r7
   47dd0:	4621      	mov	r1, r4
   47dd2:	f7f6 fe7b 	bl	3eacc <k_heap_alloc>
   47dd6:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   47dd8:	b144      	cbz	r4, 47dec <k_mem_pool_alloc+0x2e>
   47dda:	b938      	cbnz	r0, 47dec <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   47ddc:	ea56 0307 	orrs.w	r3, r6, r7
   47de0:	bf0c      	ite	eq
   47de2:	f06f 000b 	mvneq.w	r0, #11
   47de6:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   47dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   47dec:	2000      	movs	r0, #0
   47dee:	e7fc      	b.n	47dea <k_mem_pool_alloc+0x2c>

00047df0 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   47df0:	e9d0 1000 	ldrd	r1, r0, [r0]
   47df4:	f7f6 bf14 	b.w	3ec20 <k_heap_free>

00047df8 <z_impl_k_mutex_init>:
{
   47df8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   47dfa:	2000      	movs	r0, #0
   47dfc:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
   47e00:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
   47e04:	4770      	bx	lr

00047e06 <z_queue_node_peek>:
{
   47e06:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   47e08:	4604      	mov	r4, r0
   47e0a:	b130      	cbz	r0, 47e1a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47e0c:	6802      	ldr	r2, [r0, #0]
   47e0e:	0793      	lsls	r3, r2, #30
   47e10:	d003      	beq.n	47e1a <z_queue_node_peek+0x14>
		ret = anode->data;
   47e12:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   47e14:	b109      	cbz	r1, 47e1a <z_queue_node_peek+0x14>
			k_free(anode);
   47e16:	f000 f97c 	bl	48112 <k_free>
}
   47e1a:	4620      	mov	r0, r4
   47e1c:	bd10      	pop	{r4, pc}

00047e1e <z_impl_k_queue_init>:
	list->head = NULL;
   47e1e:	2300      	movs	r3, #0
	list->tail = NULL;
   47e20:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   47e24:	6083      	str	r3, [r0, #8]
   47e26:	f100 030c 	add.w	r3, r0, #12
   47e2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   47e2e:	f100 0314 	add.w	r3, r0, #20
   47e32:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   47e36:	4770      	bx	lr

00047e38 <k_queue_append>:
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   47e38:	460a      	mov	r2, r1
   47e3a:	2300      	movs	r3, #0
   47e3c:	6841      	ldr	r1, [r0, #4]
   47e3e:	f7f7 ba99 	b.w	3f374 <queue_insert>

00047e42 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   47e42:	2300      	movs	r3, #0
   47e44:	460a      	mov	r2, r1
   47e46:	4619      	mov	r1, r3
   47e48:	f7f7 ba94 	b.w	3f374 <queue_insert>

00047e4c <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   47e4c:	f990 000e 	ldrsb.w	r0, [r0, #14]
   47e50:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   47e54:	4298      	cmp	r0, r3
   47e56:	bfac      	ite	ge
   47e58:	2000      	movge	r0, #0
   47e5a:	2001      	movlt	r0, #1
   47e5c:	4770      	bx	lr

00047e5e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   47e5e:	4603      	mov	r3, r0
   47e60:	b920      	cbnz	r0, 47e6c <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   47e62:	f3ef 8205 	mrs	r2, IPSR
   47e66:	b90a      	cbnz	r2, 47e6c <z_reschedule_irqlock+0xe>
   47e68:	f7df bbb6 	b.w	275d8 <arch_swap>
   47e6c:	f383 8811 	msr	BASEPRI, r3
   47e70:	f3bf 8f6f 	isb	sy
}
   47e74:	4770      	bx	lr

00047e76 <z_reschedule_unlocked>:
	__asm__ volatile(
   47e76:	f04f 0320 	mov.w	r3, #32
   47e7a:	f3ef 8011 	mrs	r0, BASEPRI
   47e7e:	f383 8811 	msr	BASEPRI, r3
   47e82:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   47e86:	f7ff bfea 	b.w	47e5e <z_reschedule_irqlock>

00047e8a <unpend_thread_no_timeout>:
{
   47e8a:	b510      	push	{r4, lr}
   47e8c:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   47e8e:	3008      	adds	r0, #8
   47e90:	f7f7 fbce 	bl	3f630 <pended_on.isra.18>
   47e94:	4621      	mov	r1, r4
   47e96:	f7f7 fd15 	bl	3f8c4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   47e9a:	7b63      	ldrb	r3, [r4, #13]
   47e9c:	f023 0302 	bic.w	r3, r3, #2
   47ea0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   47ea2:	2300      	movs	r3, #0
   47ea4:	60a3      	str	r3, [r4, #8]
}
   47ea6:	bd10      	pop	{r4, pc}

00047ea8 <z_priq_dumb_best>:
	return list->head == list;
   47ea8:	6803      	ldr	r3, [r0, #0]
}
   47eaa:	4298      	cmp	r0, r3
   47eac:	bf14      	ite	ne
   47eae:	4618      	movne	r0, r3
   47eb0:	2000      	moveq	r0, #0
   47eb2:	4770      	bx	lr

00047eb4 <z_unpend_all>:
{
   47eb4:	b538      	push	{r3, r4, r5, lr}
   47eb6:	4605      	mov	r5, r0
	int need_sched = 0;
   47eb8:	2000      	movs	r0, #0
   47eba:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   47ebc:	42a5      	cmp	r5, r4
   47ebe:	d000      	beq.n	47ec2 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   47ec0:	b904      	cbnz	r4, 47ec4 <z_unpend_all+0x10>
}
   47ec2:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   47ec4:	4620      	mov	r0, r4
   47ec6:	f7f7 fd2b 	bl	3f920 <z_unpend_thread>
		z_ready_thread(thread);
   47eca:	4620      	mov	r0, r4
   47ecc:	f7f7 fe5e 	bl	3fb8c <z_ready_thread>
		need_sched = 1;
   47ed0:	2001      	movs	r0, #1
   47ed2:	e7f2      	b.n	47eba <z_unpend_all+0x6>

00047ed4 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   47ed4:	b15a      	cbz	r2, 47eee <z_impl_k_sem_init+0x1a>
   47ed6:	428a      	cmp	r2, r1
   47ed8:	d309      	bcc.n	47eee <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   47eda:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   47ede:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   47ee2:	e9c0 0000 	strd	r0, r0, [r0]
   47ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   47eea:	2000      	movs	r0, #0
   47eec:	4770      	bx	lr
		return -EINVAL;
   47eee:	f06f 0015 	mvn.w	r0, #21
}
   47ef2:	4770      	bx	lr

00047ef4 <k_is_in_isr>:
   47ef4:	f3ef 8005 	mrs	r0, IPSR
}
   47ef8:	3000      	adds	r0, #0
   47efa:	bf18      	it	ne
   47efc:	2001      	movne	r0, #1
   47efe:	4770      	bx	lr

00047f00 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   47f00:	f7dc bee2 	b.w	24cc8 <arch_busy_wait>

00047f04 <z_impl_k_thread_name_set>:
}
   47f04:	f06f 0057 	mvn.w	r0, #87	; 0x57
   47f08:	4770      	bx	lr

00047f0a <k_thread_name_get>:
}
   47f0a:	2000      	movs	r0, #0
   47f0c:	4770      	bx	lr

00047f0e <k_work_submit_to_queue>:
{
   47f0e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   47f10:	f101 0308 	add.w	r3, r1, #8
   47f14:	e8d3 2fef 	ldaex	r2, [r3]
   47f18:	f042 0c01 	orr.w	ip, r2, #1
   47f1c:	e8c3 cfee 	stlex	lr, ip, [r3]
   47f20:	f1be 0f00 	cmp.w	lr, #0
   47f24:	d1f6      	bne.n	47f14 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   47f26:	07d3      	lsls	r3, r2, #31
   47f28:	d403      	bmi.n	47f32 <k_work_submit_to_queue+0x24>
}
   47f2a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   47f2e:	f7ff bf83 	b.w	47e38 <k_queue_append>
}
   47f32:	f85d fb04 	ldr.w	pc, [sp], #4

00047f36 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   47f36:	f1a0 0110 	sub.w	r1, r0, #16
   47f3a:	6980      	ldr	r0, [r0, #24]
   47f3c:	f7ff bfe7 	b.w	47f0e <k_work_submit_to_queue>

00047f40 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   47f40:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   47f42:	b570      	push	{r4, r5, r6, lr}
   47f44:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   47f46:	b913      	cbnz	r3, 47f4e <work_cancel+0xe>
		return -EALREADY;
   47f48:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   47f4c:	bd70      	pop	{r4, r5, r6, pc}
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   47f4e:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   47f52:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   47f56:	07db      	lsls	r3, r3, #31
   47f58:	d52f      	bpl.n	47fba <work_cancel+0x7a>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   47f5a:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   47f5c:	6a82      	ldr	r2, [r0, #40]	; 0x28
   47f5e:	6813      	ldr	r3, [r2, #0]
   47f60:	b913      	cbnz	r3, 47f68 <work_cancel+0x28>
			return -EINVAL;
   47f62:	f06f 0015 	mvn.w	r0, #21
   47f66:	e7f1      	b.n	47f4c <work_cancel+0xc>
   47f68:	429c      	cmp	r4, r3
   47f6a:	d121      	bne.n	47fb0 <work_cancel+0x70>
Z_GENLIST_REMOVE(sflist, sfnode)
   47f6c:	6823      	ldr	r3, [r4, #0]
   47f6e:	6856      	ldr	r6, [r2, #4]
   47f70:	f023 0003 	bic.w	r0, r3, #3
   47f74:	b991      	cbnz	r1, 47f9c <work_cancel+0x5c>
   47f76:	42b4      	cmp	r4, r6
	list->head = node;
   47f78:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   47f7a:	d100      	bne.n	47f7e <work_cancel+0x3e>
	list->tail = node;
   47f7c:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47f7e:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   47f80:	f003 0303 	and.w	r3, r3, #3
   47f84:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   47f86:	2000      	movs	r0, #0
   47f88:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   47f8a:	e8d5 3fef 	ldaex	r3, [r5]
   47f8e:	f023 0301 	bic.w	r3, r3, #1
   47f92:	e8c5 3fe2 	stlex	r2, r3, [r5]
   47f96:	2a00      	cmp	r2, #0
   47f98:	d0d8      	beq.n	47f4c <work_cancel+0xc>
   47f9a:	e7f6      	b.n	47f8a <work_cancel+0x4a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   47f9c:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   47f9e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   47fa0:	f003 0303 	and.w	r3, r3, #3
   47fa4:	ea43 0300 	orr.w	r3, r3, r0
   47fa8:	600b      	str	r3, [r1, #0]
	list->tail = node;
   47faa:	bf08      	it	eq
   47fac:	6051      	streq	r1, [r2, #4]
   47fae:	e7e6      	b.n	47f7e <work_cancel+0x3e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   47fb0:	6818      	ldr	r0, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   47fb2:	4619      	mov	r1, r3
   47fb4:	f020 0303 	bic.w	r3, r0, #3
   47fb8:	e7d2      	b.n	47f60 <work_cancel+0x20>
		int err = z_abort_timeout(&work->timeout);
   47fba:	3010      	adds	r0, #16
   47fbc:	f7f9 f90c 	bl	411d8 <z_abort_timeout>
		if (err) {
   47fc0:	2800      	cmp	r0, #0
   47fc2:	d0e0      	beq.n	47f86 <work_cancel+0x46>
   47fc4:	e7c0      	b.n	47f48 <work_cancel+0x8>

00047fc6 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   47fc6:	2300      	movs	r3, #0
   47fc8:	e9c0 3100 	strd	r3, r1, [r0]
   47fcc:	6083      	str	r3, [r0, #8]
	node->prev = NULL;
   47fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
	work->work_q = NULL;
   47fd2:	6283      	str	r3, [r0, #40]	; 0x28
}
   47fd4:	4770      	bx	lr

00047fd6 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   47fd6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   47fd8:	f7f9 faf8 	bl	415cc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   47fdc:	bd08      	pop	{r3, pc}

00047fde <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   47fde:	f7f9 baf5 	b.w	415cc <z_tick_get>

00047fe2 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   47fe2:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   47fe4:	1c4b      	adds	r3, r1, #1
   47fe6:	bf08      	it	eq
   47fe8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   47fec:	4604      	mov	r4, r0
   47fee:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   47ff0:	d013      	beq.n	4801a <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   47ff2:	ea54 0105 	orrs.w	r1, r4, r5
   47ff6:	d103      	bne.n	48000 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   47ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   47ffc:	f7f9 bae6 	b.w	415cc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   48000:	f06f 0101 	mvn.w	r1, #1
   48004:	1a0a      	subs	r2, r1, r0
   48006:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   4800a:	eb61 0305 	sbc.w	r3, r1, r5
   4800e:	2a00      	cmp	r2, #0
   48010:	f173 0100 	sbcs.w	r1, r3, #0
   48014:	db02      	blt.n	4801c <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   48016:	4610      	mov	r0, r2
   48018:	4619      	mov	r1, r3
}
   4801a:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   4801c:	f7f9 fad6 	bl	415cc <z_tick_get>
   48020:	2c01      	cmp	r4, #1
   48022:	f175 0300 	sbcs.w	r3, r5, #0
   48026:	bfbc      	itt	lt
   48028:	2401      	movlt	r4, #1
   4802a:	2500      	movlt	r5, #0
   4802c:	1820      	adds	r0, r4, r0
   4802e:	eb45 0101 	adc.w	r1, r5, r1
   48032:	e7f2      	b.n	4801a <z_timeout_end_calc+0x38>

00048034 <signal_poll_event>:
{
   48034:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   48036:	6884      	ldr	r4, [r0, #8]
{
   48038:	4605      	mov	r5, r0
   4803a:	460e      	mov	r6, r1
	if (poller) {
   4803c:	b19c      	cbz	r4, 48066 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   4803e:	68a3      	ldr	r3, [r4, #8]
   48040:	b95b      	cbnz	r3, 4805a <signal_poll_event+0x26>
	int retcode = 0;
   48042:	4618      	mov	r0, r3
		poller->is_polling = false;
   48044:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   48046:	2300      	movs	r3, #0
   48048:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   4804a:	68eb      	ldr	r3, [r5, #12]
   4804c:	f3c3 3204 	ubfx	r2, r3, #12, #5
   48050:	4316      	orrs	r6, r2
   48052:	f366 3310 	bfi	r3, r6, #12, #5
   48056:	60eb      	str	r3, [r5, #12]
	return retcode;
   48058:	e004      	b.n	48064 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   4805a:	4798      	blx	r3
		poller->is_polling = false;
   4805c:	2300      	movs	r3, #0
		if (retcode < 0) {
   4805e:	2800      	cmp	r0, #0
		poller->is_polling = false;
   48060:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   48062:	daf0      	bge.n	48046 <signal_poll_event+0x12>
}
   48064:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   48066:	4620      	mov	r0, r4
   48068:	e7ed      	b.n	48046 <signal_poll_event+0x12>

0004806a <add_event>:
{
   4806a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4806c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   4806e:	e9d0 2300 	ldrd	r2, r3, [r0]
   48072:	4290      	cmp	r0, r2
   48074:	4604      	mov	r4, r0
   48076:	460d      	mov	r5, r1
   48078:	d106      	bne.n	48088 <add_event+0x1e>
	node->prev = list->tail;
   4807a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   4807c:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   4807e:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   48080:	6863      	ldr	r3, [r4, #4]
   48082:	601d      	str	r5, [r3, #0]
	list->tail = node;
   48084:	6065      	str	r5, [r4, #4]
}
   48086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   48088:	2b00      	cmp	r3, #0
   4808a:	d0f6      	beq.n	4807a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   4808c:	689b      	ldr	r3, [r3, #8]
   4808e:	6879      	ldr	r1, [r7, #4]
   48090:	6858      	ldr	r0, [r3, #4]
   48092:	f7ff fedb 	bl	47e4c <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   48096:	2800      	cmp	r0, #0
   48098:	d1ef      	bne.n	4807a <add_event+0x10>
	return list->head == list;
   4809a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   4809c:	42b4      	cmp	r4, r6
   4809e:	d0ec      	beq.n	4807a <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   480a0:	2e00      	cmp	r6, #0
   480a2:	d0ea      	beq.n	4807a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   480a4:	68b3      	ldr	r3, [r6, #8]
   480a6:	6878      	ldr	r0, [r7, #4]
   480a8:	6859      	ldr	r1, [r3, #4]
   480aa:	f7ff fecf 	bl	47e4c <z_is_t1_higher_prio_than_t2>
   480ae:	b128      	cbz	r0, 480bc <add_event+0x52>
	node->prev = successor->prev;
   480b0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   480b2:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   480b6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   480b8:	6075      	str	r5, [r6, #4]
			return;
   480ba:	e7e4      	b.n	48086 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   480bc:	6863      	ldr	r3, [r4, #4]
   480be:	429e      	cmp	r6, r3
   480c0:	d0db      	beq.n	4807a <add_event+0x10>
   480c2:	6836      	ldr	r6, [r6, #0]
   480c4:	e7ec      	b.n	480a0 <add_event+0x36>

000480c6 <z_handle_obj_poll_events>:
	return list->head == list;
   480c6:	6803      	ldr	r3, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   480c8:	4298      	cmp	r0, r3
   480ca:	d009      	beq.n	480e0 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   480cc:	e9d3 2000 	ldrd	r2, r0, [r3]
   480d0:	6002      	str	r2, [r0, #0]
	node->next->prev = node->prev;
   480d2:	6050      	str	r0, [r2, #4]
	node->next = NULL;
   480d4:	2200      	movs	r2, #0
		(void) signal_poll_event(poll_event, state);
   480d6:	4618      	mov	r0, r3
	node->prev = NULL;
   480d8:	e9c3 2200 	strd	r2, r2, [r3]
   480dc:	f7ff bfaa 	b.w	48034 <signal_poll_event>
}
   480e0:	4770      	bx	lr

000480e2 <k_mem_pool_malloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   480e2:	2208      	movs	r2, #8
{
   480e4:	b530      	push	{r4, r5, lr}
   480e6:	188a      	adds	r2, r1, r2
   480e8:	b085      	sub	sp, #20
   480ea:	d207      	bcs.n	480fc <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   480ec:	2400      	movs	r4, #0
   480ee:	2500      	movs	r5, #0
   480f0:	a902      	add	r1, sp, #8
   480f2:	e9cd 4500 	strd	r4, r5, [sp]
   480f6:	f7ff fe62 	bl	47dbe <k_mem_pool_alloc>
   480fa:	b110      	cbz	r0, 48102 <k_mem_pool_malloc+0x20>
		return NULL;
   480fc:	2000      	movs	r0, #0
}
   480fe:	b005      	add	sp, #20
   48100:	bd30      	pop	{r4, r5, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   48102:	9a02      	ldr	r2, [sp, #8]
   48104:	ab02      	add	r3, sp, #8
   48106:	cb03      	ldmia	r3!, {r0, r1}
   48108:	6010      	str	r0, [r2, #0]
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   4810a:	9802      	ldr	r0, [sp, #8]
   4810c:	6051      	str	r1, [r2, #4]
   4810e:	3008      	adds	r0, #8
   48110:	e7f5      	b.n	480fe <k_mem_pool_malloc+0x1c>

00048112 <k_free>:
	if (ptr != NULL) {
   48112:	b110      	cbz	r0, 4811a <k_free+0x8>
		k_mem_pool_free_id(ptr);
   48114:	3808      	subs	r0, #8
   48116:	f7ff be6b 	b.w	47df0 <k_mem_pool_free_id>
}
   4811a:	4770      	bx	lr

0004811c <k_calloc>:
{
   4811c:	b538      	push	{r3, r4, r5, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   4811e:	fb01 f400 	mul.w	r4, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   48122:	b118      	cbz	r0, 4812c <k_calloc+0x10>
   48124:	fbb4 f0f0 	udiv	r0, r4, r0
   48128:	4281      	cmp	r1, r0
   4812a:	d10a      	bne.n	48142 <k_calloc+0x26>
	ret = k_malloc(bounds);
   4812c:	4620      	mov	r0, r4
   4812e:	f7f9 fdfd 	bl	41d2c <k_malloc>
	if (ret != NULL) {
   48132:	4605      	mov	r5, r0
   48134:	b118      	cbz	r0, 4813e <k_calloc+0x22>
__ssp_bos_icheck3(memset, void *, int)
   48136:	4622      	mov	r2, r4
   48138:	2100      	movs	r1, #0
   4813a:	f000 f845 	bl	481c8 <memset>
}
   4813e:	4628      	mov	r0, r5
   48140:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   48142:	2500      	movs	r5, #0
   48144:	e7fb      	b.n	4813e <k_calloc+0x22>

00048146 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   48146:	4770      	bx	lr

00048148 <atoi>:
   48148:	220a      	movs	r2, #10
   4814a:	2100      	movs	r1, #0
   4814c:	f7fa bcb4 	b.w	42ab8 <strtol>

00048150 <memchr>:
   48150:	b2c9      	uxtb	r1, r1
   48152:	4402      	add	r2, r0
   48154:	b510      	push	{r4, lr}
   48156:	4290      	cmp	r0, r2
   48158:	4603      	mov	r3, r0
   4815a:	d101      	bne.n	48160 <memchr+0x10>
   4815c:	2300      	movs	r3, #0
   4815e:	e003      	b.n	48168 <memchr+0x18>
   48160:	781c      	ldrb	r4, [r3, #0]
   48162:	3001      	adds	r0, #1
   48164:	428c      	cmp	r4, r1
   48166:	d1f6      	bne.n	48156 <memchr+0x6>
   48168:	4618      	mov	r0, r3
   4816a:	bd10      	pop	{r4, pc}

0004816c <memcmp>:
   4816c:	b530      	push	{r4, r5, lr}
   4816e:	3901      	subs	r1, #1
   48170:	2400      	movs	r4, #0
   48172:	42a2      	cmp	r2, r4
   48174:	d101      	bne.n	4817a <memcmp+0xe>
   48176:	2000      	movs	r0, #0
   48178:	e005      	b.n	48186 <memcmp+0x1a>
   4817a:	5d03      	ldrb	r3, [r0, r4]
   4817c:	3401      	adds	r4, #1
   4817e:	5d0d      	ldrb	r5, [r1, r4]
   48180:	42ab      	cmp	r3, r5
   48182:	d0f6      	beq.n	48172 <memcmp+0x6>
   48184:	1b58      	subs	r0, r3, r5
   48186:	bd30      	pop	{r4, r5, pc}

00048188 <memcpy>:
   48188:	440a      	add	r2, r1
   4818a:	1e43      	subs	r3, r0, #1
   4818c:	4291      	cmp	r1, r2
   4818e:	d100      	bne.n	48192 <memcpy+0xa>
   48190:	4770      	bx	lr
   48192:	b510      	push	{r4, lr}
   48194:	f811 4b01 	ldrb.w	r4, [r1], #1
   48198:	4291      	cmp	r1, r2
   4819a:	f803 4f01 	strb.w	r4, [r3, #1]!
   4819e:	d1f9      	bne.n	48194 <memcpy+0xc>
   481a0:	bd10      	pop	{r4, pc}

000481a2 <__memcpy_chk>:
   481a2:	429a      	cmp	r2, r3
   481a4:	b508      	push	{r3, lr}
   481a6:	d901      	bls.n	481ac <__memcpy_chk+0xa>
   481a8:	f7e0 fa18 	bl	285dc <__chk_fail>
   481ac:	4281      	cmp	r1, r0
   481ae:	d804      	bhi.n	481ba <__memcpy_chk+0x18>
   481b0:	188b      	adds	r3, r1, r2
   481b2:	4298      	cmp	r0, r3
   481b4:	d3f8      	bcc.n	481a8 <__memcpy_chk+0x6>
   481b6:	4281      	cmp	r1, r0
   481b8:	d102      	bne.n	481c0 <__memcpy_chk+0x1e>
   481ba:	1883      	adds	r3, r0, r2
   481bc:	4299      	cmp	r1, r3
   481be:	d3f3      	bcc.n	481a8 <__memcpy_chk+0x6>
   481c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   481c4:	f7ff bfe0 	b.w	48188 <memcpy>

000481c8 <memset>:
   481c8:	4402      	add	r2, r0
   481ca:	4603      	mov	r3, r0
   481cc:	4293      	cmp	r3, r2
   481ce:	d100      	bne.n	481d2 <memset+0xa>
   481d0:	4770      	bx	lr
   481d2:	f803 1b01 	strb.w	r1, [r3], #1
   481d6:	e7f9      	b.n	481cc <memset+0x4>

000481d8 <__sfputc_r>:
   481d8:	6893      	ldr	r3, [r2, #8]
   481da:	3b01      	subs	r3, #1
   481dc:	2b00      	cmp	r3, #0
   481de:	6093      	str	r3, [r2, #8]
   481e0:	b410      	push	{r4}
   481e2:	da08      	bge.n	481f6 <__sfputc_r+0x1e>
   481e4:	6994      	ldr	r4, [r2, #24]
   481e6:	42a3      	cmp	r3, r4
   481e8:	db01      	blt.n	481ee <__sfputc_r+0x16>
   481ea:	290a      	cmp	r1, #10
   481ec:	d103      	bne.n	481f6 <__sfputc_r+0x1e>
   481ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   481f2:	f7fa bd17 	b.w	42c24 <__swbuf_r>
   481f6:	6813      	ldr	r3, [r2, #0]
   481f8:	1c58      	adds	r0, r3, #1
   481fa:	6010      	str	r0, [r2, #0]
   481fc:	4608      	mov	r0, r1
   481fe:	7019      	strb	r1, [r3, #0]
   48200:	f85d 4b04 	ldr.w	r4, [sp], #4
   48204:	4770      	bx	lr

00048206 <__sfputs_r>:
   48206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   48208:	4606      	mov	r6, r0
   4820a:	460f      	mov	r7, r1
   4820c:	4614      	mov	r4, r2
   4820e:	18d5      	adds	r5, r2, r3
   48210:	42ac      	cmp	r4, r5
   48212:	d101      	bne.n	48218 <__sfputs_r+0x12>
   48214:	2000      	movs	r0, #0
   48216:	e007      	b.n	48228 <__sfputs_r+0x22>
   48218:	463a      	mov	r2, r7
   4821a:	f814 1b01 	ldrb.w	r1, [r4], #1
   4821e:	4630      	mov	r0, r6
   48220:	f7ff ffda 	bl	481d8 <__sfputc_r>
   48224:	1c43      	adds	r3, r0, #1
   48226:	d1f3      	bne.n	48210 <__sfputs_r+0xa>
   48228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0004822a <__cvt>:
   4822a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   4822e:	ec55 4b10 	vmov	r4, r5, d0
   48232:	2d00      	cmp	r5, #0
   48234:	460e      	mov	r6, r1
   48236:	4691      	mov	r9, r2
   48238:	4619      	mov	r1, r3
   4823a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   4823e:	f04f 0200 	mov.w	r2, #0
   48242:	da03      	bge.n	4824c <__cvt+0x22>
   48244:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   48248:	222d      	movs	r2, #45	; 0x2d
   4824a:	461d      	mov	r5, r3
   4824c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   4824e:	700a      	strb	r2, [r1, #0]
   48250:	f027 0720 	bic.w	r7, r7, #32
   48254:	2f46      	cmp	r7, #70	; 0x46
   48256:	d004      	beq.n	48262 <__cvt+0x38>
   48258:	2f45      	cmp	r7, #69	; 0x45
   4825a:	d100      	bne.n	4825e <__cvt+0x34>
   4825c:	3601      	adds	r6, #1
   4825e:	2102      	movs	r1, #2
   48260:	e000      	b.n	48264 <__cvt+0x3a>
   48262:	2103      	movs	r1, #3
   48264:	ab03      	add	r3, sp, #12
   48266:	4632      	mov	r2, r6
   48268:	9301      	str	r3, [sp, #4]
   4826a:	ab02      	add	r3, sp, #8
   4826c:	ec45 4b10 	vmov	d0, r4, r5
   48270:	9300      	str	r3, [sp, #0]
   48272:	4653      	mov	r3, sl
   48274:	f7d7 ffec 	bl	20250 <_dtoa_r>
   48278:	2f47      	cmp	r7, #71	; 0x47
   4827a:	4680      	mov	r8, r0
   4827c:	d102      	bne.n	48284 <__cvt+0x5a>
   4827e:	f019 0f01 	tst.w	r9, #1
   48282:	d022      	beq.n	482ca <__cvt+0xa0>
   48284:	2f46      	cmp	r7, #70	; 0x46
   48286:	eb08 0906 	add.w	r9, r8, r6
   4828a:	d111      	bne.n	482b0 <__cvt+0x86>
   4828c:	f898 3000 	ldrb.w	r3, [r8]
   48290:	2b30      	cmp	r3, #48	; 0x30
   48292:	d10a      	bne.n	482aa <__cvt+0x80>
   48294:	2200      	movs	r2, #0
   48296:	2300      	movs	r3, #0
   48298:	4620      	mov	r0, r4
   4829a:	4629      	mov	r1, r5
   4829c:	f7d4 fcf4 	bl	1cc88 <__aeabi_dcmpeq>
   482a0:	b918      	cbnz	r0, 482aa <__cvt+0x80>
   482a2:	f1c6 0601 	rsb	r6, r6, #1
   482a6:	f8ca 6000 	str.w	r6, [sl]
   482aa:	f8da 3000 	ldr.w	r3, [sl]
   482ae:	4499      	add	r9, r3
   482b0:	2200      	movs	r2, #0
   482b2:	2300      	movs	r3, #0
   482b4:	4620      	mov	r0, r4
   482b6:	4629      	mov	r1, r5
   482b8:	f7d4 fce6 	bl	1cc88 <__aeabi_dcmpeq>
   482bc:	b108      	cbz	r0, 482c2 <__cvt+0x98>
   482be:	f8cd 900c 	str.w	r9, [sp, #12]
   482c2:	2230      	movs	r2, #48	; 0x30
   482c4:	9b03      	ldr	r3, [sp, #12]
   482c6:	454b      	cmp	r3, r9
   482c8:	d308      	bcc.n	482dc <__cvt+0xb2>
   482ca:	9b03      	ldr	r3, [sp, #12]
   482cc:	4640      	mov	r0, r8
   482ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   482d0:	eba3 0308 	sub.w	r3, r3, r8
   482d4:	6013      	str	r3, [r2, #0]
   482d6:	b004      	add	sp, #16
   482d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   482dc:	1c59      	adds	r1, r3, #1
   482de:	9103      	str	r1, [sp, #12]
   482e0:	701a      	strb	r2, [r3, #0]
   482e2:	e7ef      	b.n	482c4 <__cvt+0x9a>

000482e4 <__exponent>:
   482e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   482e6:	2900      	cmp	r1, #0
   482e8:	7002      	strb	r2, [r0, #0]
   482ea:	bfba      	itte	lt
   482ec:	4249      	neglt	r1, r1
   482ee:	232d      	movlt	r3, #45	; 0x2d
   482f0:	232b      	movge	r3, #43	; 0x2b
   482f2:	2909      	cmp	r1, #9
   482f4:	7043      	strb	r3, [r0, #1]
   482f6:	dd22      	ble.n	4833e <__exponent+0x5a>
   482f8:	f10d 0307 	add.w	r3, sp, #7
   482fc:	260a      	movs	r6, #10
   482fe:	461f      	mov	r7, r3
   48300:	2963      	cmp	r1, #99	; 0x63
   48302:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   48306:	fb91 f2f6 	sdiv	r2, r1, r6
   4830a:	fb06 1412 	mls	r4, r6, r2, r1
   4830e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   48312:	f803 4c01 	strb.w	r4, [r3, #-1]
   48316:	dc0a      	bgt.n	4832e <__exponent+0x4a>
   48318:	3230      	adds	r2, #48	; 0x30
   4831a:	3b02      	subs	r3, #2
   4831c:	f805 2c01 	strb.w	r2, [r5, #-1]
   48320:	1c82      	adds	r2, r0, #2
   48322:	42bb      	cmp	r3, r7
   48324:	4614      	mov	r4, r2
   48326:	d305      	bcc.n	48334 <__exponent+0x50>
   48328:	1a20      	subs	r0, r4, r0
   4832a:	b003      	add	sp, #12
   4832c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   4832e:	462b      	mov	r3, r5
   48330:	4611      	mov	r1, r2
   48332:	e7e5      	b.n	48300 <__exponent+0x1c>
   48334:	f813 1b01 	ldrb.w	r1, [r3], #1
   48338:	f802 1b01 	strb.w	r1, [r2], #1
   4833c:	e7f1      	b.n	48322 <__exponent+0x3e>
   4833e:	2330      	movs	r3, #48	; 0x30
   48340:	1d04      	adds	r4, r0, #4
   48342:	4419      	add	r1, r3
   48344:	7083      	strb	r3, [r0, #2]
   48346:	70c1      	strb	r1, [r0, #3]
   48348:	e7ee      	b.n	48328 <__exponent+0x44>

0004834a <_printf_common>:
   4834a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   4834e:	4691      	mov	r9, r2
   48350:	461f      	mov	r7, r3
   48352:	688a      	ldr	r2, [r1, #8]
   48354:	4606      	mov	r6, r0
   48356:	690b      	ldr	r3, [r1, #16]
   48358:	460c      	mov	r4, r1
   4835a:	f8dd 8020 	ldr.w	r8, [sp, #32]
   4835e:	4293      	cmp	r3, r2
   48360:	bfb8      	it	lt
   48362:	4613      	movlt	r3, r2
   48364:	f8c9 3000 	str.w	r3, [r9]
   48368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   4836c:	b112      	cbz	r2, 48374 <_printf_common+0x2a>
   4836e:	3301      	adds	r3, #1
   48370:	f8c9 3000 	str.w	r3, [r9]
   48374:	6823      	ldr	r3, [r4, #0]
   48376:	0699      	lsls	r1, r3, #26
   48378:	bf42      	ittt	mi
   4837a:	f8d9 3000 	ldrmi.w	r3, [r9]
   4837e:	3302      	addmi	r3, #2
   48380:	f8c9 3000 	strmi.w	r3, [r9]
   48384:	6825      	ldr	r5, [r4, #0]
   48386:	f015 0506 	ands.w	r5, r5, #6
   4838a:	d107      	bne.n	4839c <_printf_common+0x52>
   4838c:	f104 0a19 	add.w	sl, r4, #25
   48390:	68e3      	ldr	r3, [r4, #12]
   48392:	f8d9 2000 	ldr.w	r2, [r9]
   48396:	1a9b      	subs	r3, r3, r2
   48398:	42ab      	cmp	r3, r5
   4839a:	dc2b      	bgt.n	483f4 <_printf_common+0xaa>
   4839c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
   483a0:	6822      	ldr	r2, [r4, #0]
   483a2:	3300      	adds	r3, #0
   483a4:	bf18      	it	ne
   483a6:	2301      	movne	r3, #1
   483a8:	0692      	lsls	r2, r2, #26
   483aa:	d430      	bmi.n	4840e <_printf_common+0xc4>
   483ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
   483b0:	4639      	mov	r1, r7
   483b2:	4630      	mov	r0, r6
   483b4:	47c0      	blx	r8
   483b6:	3001      	adds	r0, #1
   483b8:	d023      	beq.n	48402 <_printf_common+0xb8>
   483ba:	6823      	ldr	r3, [r4, #0]
   483bc:	341a      	adds	r4, #26
   483be:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   483c2:	f003 0306 	and.w	r3, r3, #6
   483c6:	f8d9 2000 	ldr.w	r2, [r9]
   483ca:	f04f 0900 	mov.w	r9, #0
   483ce:	2b04      	cmp	r3, #4
   483d0:	f854 3c12 	ldr.w	r3, [r4, #-18]
   483d4:	bf08      	it	eq
   483d6:	1aad      	subeq	r5, r5, r2
   483d8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   483dc:	bf14      	ite	ne
   483de:	2500      	movne	r5, #0
   483e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   483e4:	4293      	cmp	r3, r2
   483e6:	bfc4      	itt	gt
   483e8:	1a9b      	subgt	r3, r3, r2
   483ea:	18ed      	addgt	r5, r5, r3
   483ec:	454d      	cmp	r5, r9
   483ee:	d11a      	bne.n	48426 <_printf_common+0xdc>
   483f0:	2000      	movs	r0, #0
   483f2:	e008      	b.n	48406 <_printf_common+0xbc>
   483f4:	2301      	movs	r3, #1
   483f6:	4652      	mov	r2, sl
   483f8:	4639      	mov	r1, r7
   483fa:	4630      	mov	r0, r6
   483fc:	47c0      	blx	r8
   483fe:	3001      	adds	r0, #1
   48400:	d103      	bne.n	4840a <_printf_common+0xc0>
   48402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   48406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   4840a:	3501      	adds	r5, #1
   4840c:	e7c0      	b.n	48390 <_printf_common+0x46>
   4840e:	18e1      	adds	r1, r4, r3
   48410:	1c5a      	adds	r2, r3, #1
   48412:	2030      	movs	r0, #48	; 0x30
   48414:	3302      	adds	r3, #2
   48416:	4422      	add	r2, r4
   48418:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   4841c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   48420:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   48424:	e7c2      	b.n	483ac <_printf_common+0x62>
   48426:	2301      	movs	r3, #1
   48428:	4622      	mov	r2, r4
   4842a:	4639      	mov	r1, r7
   4842c:	4630      	mov	r0, r6
   4842e:	47c0      	blx	r8
   48430:	3001      	adds	r0, #1
   48432:	d0e6      	beq.n	48402 <_printf_common+0xb8>
   48434:	f109 0901 	add.w	r9, r9, #1
   48438:	e7d8      	b.n	483ec <_printf_common+0xa2>

0004843a <__sprintf_chk>:
   4843a:	b408      	push	{r3}
   4843c:	b517      	push	{r0, r1, r2, r4, lr}
   4843e:	ab05      	add	r3, sp, #20
   48440:	1e14      	subs	r4, r2, #0
   48442:	f853 1b04 	ldr.w	r1, [r3], #4
   48446:	9301      	str	r3, [sp, #4]
   48448:	da07      	bge.n	4845a <__sprintf_chk+0x20>
   4844a:	461a      	mov	r2, r3
   4844c:	f7fa fbe0 	bl	42c10 <vsiprintf>
   48450:	b003      	add	sp, #12
   48452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   48456:	b001      	add	sp, #4
   48458:	4770      	bx	lr
   4845a:	460a      	mov	r2, r1
   4845c:	4621      	mov	r1, r4
   4845e:	f7fa fbb3 	bl	42bc8 <vsniprintf>
   48462:	2800      	cmp	r0, #0
   48464:	dbf4      	blt.n	48450 <__sprintf_chk+0x16>
   48466:	42a0      	cmp	r0, r4
   48468:	d3f2      	bcc.n	48450 <__sprintf_chk+0x16>
   4846a:	f7e0 f8b7 	bl	285dc <__chk_fail>

0004846e <__sread>:
   4846e:	b510      	push	{r4, lr}
   48470:	460c      	mov	r4, r1
   48472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   48476:	f7fb fd09 	bl	43e8c <_read_r>
   4847a:	2800      	cmp	r0, #0
   4847c:	bfab      	itete	ge
   4847e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   48480:	89a3      	ldrhlt	r3, [r4, #12]
   48482:	181b      	addge	r3, r3, r0
   48484:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   48488:	bfac      	ite	ge
   4848a:	6563      	strge	r3, [r4, #84]	; 0x54
   4848c:	81a3      	strhlt	r3, [r4, #12]
   4848e:	bd10      	pop	{r4, pc}

00048490 <__seofread>:
   48490:	2000      	movs	r0, #0
   48492:	4770      	bx	lr

00048494 <__swrite>:
   48494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48498:	461f      	mov	r7, r3
   4849a:	898b      	ldrh	r3, [r1, #12]
   4849c:	4605      	mov	r5, r0
   4849e:	460c      	mov	r4, r1
   484a0:	05db      	lsls	r3, r3, #23
   484a2:	4616      	mov	r6, r2
   484a4:	d505      	bpl.n	484b2 <__swrite+0x1e>
   484a6:	2302      	movs	r3, #2
   484a8:	2200      	movs	r2, #0
   484aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   484ae:	f7fb f841 	bl	43534 <_lseek_r>
   484b2:	89a3      	ldrh	r3, [r4, #12]
   484b4:	4632      	mov	r2, r6
   484b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   484ba:	4628      	mov	r0, r5
   484bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   484c0:	81a3      	strh	r3, [r4, #12]
   484c2:	463b      	mov	r3, r7
   484c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   484c8:	f7fa bbfe 	b.w	42cc8 <_write_r>

000484cc <__sseek>:
   484cc:	b510      	push	{r4, lr}
   484ce:	460c      	mov	r4, r1
   484d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   484d4:	f7fb f82e 	bl	43534 <_lseek_r>
   484d8:	1c43      	adds	r3, r0, #1
   484da:	89a3      	ldrh	r3, [r4, #12]
   484dc:	bf15      	itete	ne
   484de:	6560      	strne	r0, [r4, #84]	; 0x54
   484e0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   484e4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   484e8:	81a3      	strheq	r3, [r4, #12]
   484ea:	bf18      	it	ne
   484ec:	81a3      	strhne	r3, [r4, #12]
   484ee:	bd10      	pop	{r4, pc}

000484f0 <__sclose>:
   484f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   484f4:	f7fa bc68 	b.w	42dc8 <_close_r>

000484f8 <strcat>:
   484f8:	4603      	mov	r3, r0
   484fa:	b510      	push	{r4, lr}
   484fc:	461a      	mov	r2, r3
   484fe:	f812 4b01 	ldrb.w	r4, [r2], #1
   48502:	b93c      	cbnz	r4, 48514 <strcat+0x1c>
   48504:	3b01      	subs	r3, #1
   48506:	f811 2b01 	ldrb.w	r2, [r1], #1
   4850a:	f803 2f01 	strb.w	r2, [r3, #1]!
   4850e:	2a00      	cmp	r2, #0
   48510:	d1f9      	bne.n	48506 <strcat+0xe>
   48512:	bd10      	pop	{r4, pc}
   48514:	4613      	mov	r3, r2
   48516:	e7f1      	b.n	484fc <strcat+0x4>

00048518 <strchr>:
   48518:	b2c9      	uxtb	r1, r1
   4851a:	4603      	mov	r3, r0
   4851c:	f810 2b01 	ldrb.w	r2, [r0], #1
   48520:	b11a      	cbz	r2, 4852a <strchr+0x12>
   48522:	428a      	cmp	r2, r1
   48524:	d1f9      	bne.n	4851a <strchr+0x2>
   48526:	4618      	mov	r0, r3
   48528:	4770      	bx	lr
   4852a:	2900      	cmp	r1, #0
   4852c:	bf18      	it	ne
   4852e:	2300      	movne	r3, #0
   48530:	e7f9      	b.n	48526 <strchr+0xe>

00048532 <strcpy>:
   48532:	4603      	mov	r3, r0
   48534:	f811 2b01 	ldrb.w	r2, [r1], #1
   48538:	f803 2b01 	strb.w	r2, [r3], #1
   4853c:	2a00      	cmp	r2, #0
   4853e:	d1f9      	bne.n	48534 <strcpy+0x2>
   48540:	4770      	bx	lr

00048542 <__strcpy_chk>:
   48542:	b570      	push	{r4, r5, r6, lr}
   48544:	4605      	mov	r5, r0
   48546:	4608      	mov	r0, r1
   48548:	4616      	mov	r6, r2
   4854a:	460c      	mov	r4, r1
   4854c:	f7d4 fe8a 	bl	1d264 <strlen>
   48550:	1c42      	adds	r2, r0, #1
   48552:	42b2      	cmp	r2, r6
   48554:	d901      	bls.n	4855a <__strcpy_chk+0x18>
   48556:	f7e0 f841 	bl	285dc <__chk_fail>
   4855a:	42ac      	cmp	r4, r5
   4855c:	d804      	bhi.n	48568 <__strcpy_chk+0x26>
   4855e:	18a3      	adds	r3, r4, r2
   48560:	429d      	cmp	r5, r3
   48562:	d3f8      	bcc.n	48556 <__strcpy_chk+0x14>
   48564:	42ac      	cmp	r4, r5
   48566:	d102      	bne.n	4856e <__strcpy_chk+0x2c>
   48568:	18ab      	adds	r3, r5, r2
   4856a:	429c      	cmp	r4, r3
   4856c:	d3f3      	bcc.n	48556 <__strcpy_chk+0x14>
   4856e:	4621      	mov	r1, r4
   48570:	4628      	mov	r0, r5
   48572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   48576:	f7ff be07 	b.w	48188 <memcpy>

0004857a <strncmp>:
   4857a:	b510      	push	{r4, lr}
   4857c:	b16a      	cbz	r2, 4859a <strncmp+0x20>
   4857e:	3901      	subs	r1, #1
   48580:	1884      	adds	r4, r0, r2
   48582:	f810 3b01 	ldrb.w	r3, [r0], #1
   48586:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   4858a:	4293      	cmp	r3, r2
   4858c:	d103      	bne.n	48596 <strncmp+0x1c>
   4858e:	42a0      	cmp	r0, r4
   48590:	d001      	beq.n	48596 <strncmp+0x1c>
   48592:	2b00      	cmp	r3, #0
   48594:	d1f5      	bne.n	48582 <strncmp+0x8>
   48596:	1a98      	subs	r0, r3, r2
   48598:	bd10      	pop	{r4, pc}
   4859a:	4610      	mov	r0, r2
   4859c:	e7fc      	b.n	48598 <strncmp+0x1e>

0004859e <strncpy>:
   4859e:	3901      	subs	r1, #1
   485a0:	4603      	mov	r3, r0
   485a2:	b510      	push	{r4, lr}
   485a4:	b132      	cbz	r2, 485b4 <strncpy+0x16>
   485a6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   485aa:	3a01      	subs	r2, #1
   485ac:	f803 4b01 	strb.w	r4, [r3], #1
   485b0:	2c00      	cmp	r4, #0
   485b2:	d1f7      	bne.n	485a4 <strncpy+0x6>
   485b4:	441a      	add	r2, r3
   485b6:	2100      	movs	r1, #0
   485b8:	4293      	cmp	r3, r2
   485ba:	d100      	bne.n	485be <strncpy+0x20>
   485bc:	bd10      	pop	{r4, pc}
   485be:	f803 1b01 	strb.w	r1, [r3], #1
   485c2:	e7f9      	b.n	485b8 <strncpy+0x1a>

000485c4 <strnlen>:
   485c4:	4602      	mov	r2, r0
   485c6:	4401      	add	r1, r0
   485c8:	b510      	push	{r4, lr}
   485ca:	428a      	cmp	r2, r1
   485cc:	4613      	mov	r3, r2
   485ce:	d003      	beq.n	485d8 <strnlen+0x14>
   485d0:	781c      	ldrb	r4, [r3, #0]
   485d2:	3201      	adds	r2, #1
   485d4:	2c00      	cmp	r4, #0
   485d6:	d1f8      	bne.n	485ca <strnlen+0x6>
   485d8:	1a18      	subs	r0, r3, r0
   485da:	bd10      	pop	{r4, pc}

000485dc <strstr>:
   485dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   485de:	780c      	ldrb	r4, [r1, #0]
   485e0:	b164      	cbz	r4, 485fc <strstr+0x20>
   485e2:	4603      	mov	r3, r0
   485e4:	781a      	ldrb	r2, [r3, #0]
   485e6:	4618      	mov	r0, r3
   485e8:	1c5e      	adds	r6, r3, #1
   485ea:	b90a      	cbnz	r2, 485f0 <strstr+0x14>
   485ec:	4610      	mov	r0, r2
   485ee:	e005      	b.n	485fc <strstr+0x20>
   485f0:	4294      	cmp	r4, r2
   485f2:	d108      	bne.n	48606 <strstr+0x2a>
   485f4:	460d      	mov	r5, r1
   485f6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   485fa:	b902      	cbnz	r2, 485fe <strstr+0x22>
   485fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   485fe:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   48602:	4297      	cmp	r7, r2
   48604:	d0f7      	beq.n	485f6 <strstr+0x1a>
   48606:	4633      	mov	r3, r6
   48608:	e7ec      	b.n	485e4 <strstr+0x8>

0004860a <sulp>:
   4860a:	b570      	push	{r4, r5, r6, lr}
   4860c:	4604      	mov	r4, r0
   4860e:	460d      	mov	r5, r1
   48610:	4616      	mov	r6, r2
   48612:	ec45 4b10 	vmov	d0, r4, r5
   48616:	f7fb f839 	bl	4368c <__ulp>
   4861a:	ec51 0b10 	vmov	r0, r1, d0
   4861e:	b17e      	cbz	r6, 48640 <sulp+0x36>
   48620:	f3c5 530a 	ubfx	r3, r5, #20, #11
   48624:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   48628:	2b00      	cmp	r3, #0
   4862a:	dd09      	ble.n	48640 <sulp+0x36>
   4862c:	051b      	lsls	r3, r3, #20
   4862e:	2400      	movs	r4, #0
   48630:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   48634:	4622      	mov	r2, r4
   48636:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   4863a:	462b      	mov	r3, r5
   4863c:	f7d4 f8bc 	bl	1c7b8 <__aeabi_dmul>
   48640:	bd70      	pop	{r4, r5, r6, pc}

00048642 <_strtol_r>:
   48642:	f7fa b9c1 	b.w	429c8 <_strtol_l.isra.0>

00048646 <_strtoul_r>:
   48646:	f7fa ba41 	b.w	42acc <_strtoul_l.isra.0>

0004864a <_vsniprintf_r>:
   4864a:	b530      	push	{r4, r5, lr}
   4864c:	1e14      	subs	r4, r2, #0
   4864e:	4605      	mov	r5, r0
   48650:	b09b      	sub	sp, #108	; 0x6c
   48652:	4618      	mov	r0, r3
   48654:	da05      	bge.n	48662 <_vsniprintf_r+0x18>
   48656:	238b      	movs	r3, #139	; 0x8b
   48658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   4865c:	602b      	str	r3, [r5, #0]
   4865e:	b01b      	add	sp, #108	; 0x6c
   48660:	bd30      	pop	{r4, r5, pc}
   48662:	f44f 7302 	mov.w	r3, #520	; 0x208
   48666:	9100      	str	r1, [sp, #0]
   48668:	9104      	str	r1, [sp, #16]
   4866a:	4602      	mov	r2, r0
   4866c:	f8ad 300c 	strh.w	r3, [sp, #12]
   48670:	bf14      	ite	ne
   48672:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   48676:	4623      	moveq	r3, r4
   48678:	4669      	mov	r1, sp
   4867a:	4628      	mov	r0, r5
   4867c:	9302      	str	r3, [sp, #8]
   4867e:	9305      	str	r3, [sp, #20]
   48680:	f64f 73ff 	movw	r3, #65535	; 0xffff
   48684:	f8ad 300e 	strh.w	r3, [sp, #14]
   48688:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   4868a:	f7fb f873 	bl	43774 <_svfiprintf_r>
   4868e:	1c43      	adds	r3, r0, #1
   48690:	bfbc      	itt	lt
   48692:	238b      	movlt	r3, #139	; 0x8b
   48694:	602b      	strlt	r3, [r5, #0]
   48696:	2c00      	cmp	r4, #0
   48698:	d0e1      	beq.n	4865e <_vsniprintf_r+0x14>
   4869a:	9b00      	ldr	r3, [sp, #0]
   4869c:	2200      	movs	r2, #0
   4869e:	701a      	strb	r2, [r3, #0]
   486a0:	e7dd      	b.n	4865e <_vsniprintf_r+0x14>

000486a2 <abort>:
   486a2:	b508      	push	{r3, lr}
   486a4:	2006      	movs	r0, #6
   486a6:	f7fb fc03 	bl	43eb0 <raise>
   486aa:	2001      	movs	r0, #1
   486ac:	f7df ff6a 	bl	28584 <_exit>

000486b0 <quorem>:
   486b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   486b4:	6903      	ldr	r3, [r0, #16]
   486b6:	4680      	mov	r8, r0
   486b8:	690c      	ldr	r4, [r1, #16]
   486ba:	42a3      	cmp	r3, r4
   486bc:	f2c0 8084 	blt.w	487c8 <quorem+0x118>
   486c0:	3c01      	subs	r4, #1
   486c2:	f108 0514 	add.w	r5, r8, #20
   486c6:	f101 0714 	add.w	r7, r1, #20
   486ca:	00a0      	lsls	r0, r4, #2
   486cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   486d0:	182b      	adds	r3, r5, r0
   486d2:	eb07 0900 	add.w	r9, r7, r0
   486d6:	9301      	str	r3, [sp, #4]
   486d8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   486dc:	3301      	adds	r3, #1
   486de:	429a      	cmp	r2, r3
   486e0:	fbb2 f6f3 	udiv	r6, r2, r3
   486e4:	d333      	bcc.n	4874e <quorem+0x9e>
   486e6:	f04f 0a00 	mov.w	sl, #0
   486ea:	46bc      	mov	ip, r7
   486ec:	46ae      	mov	lr, r5
   486ee:	46d3      	mov	fp, sl
   486f0:	f85c 2b04 	ldr.w	r2, [ip], #4
   486f4:	b293      	uxth	r3, r2
   486f6:	45e1      	cmp	r9, ip
   486f8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   486fc:	fb06 a303 	mla	r3, r6, r3, sl
   48700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   48704:	b29b      	uxth	r3, r3
   48706:	fb06 a202 	mla	r2, r6, r2, sl
   4870a:	ebab 0303 	sub.w	r3, fp, r3
   4870e:	f8de b000 	ldr.w	fp, [lr]
   48712:	ea4f 4a12 	mov.w	sl, r2, lsr #16
   48716:	fa1f fb8b 	uxth.w	fp, fp
   4871a:	445b      	add	r3, fp
   4871c:	fa1f fb82 	uxth.w	fp, r2
   48720:	f8de 2000 	ldr.w	r2, [lr]
   48724:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
   48728:	eb02 4223 	add.w	r2, r2, r3, asr #16
   4872c:	b29b      	uxth	r3, r3
   4872e:	ea4f 4b22 	mov.w	fp, r2, asr #16
   48732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   48736:	f84e 3b04 	str.w	r3, [lr], #4
   4873a:	d2d9      	bcs.n	486f0 <quorem+0x40>
   4873c:	582b      	ldr	r3, [r5, r0]
   4873e:	b933      	cbnz	r3, 4874e <quorem+0x9e>
   48740:	9b01      	ldr	r3, [sp, #4]
   48742:	3b04      	subs	r3, #4
   48744:	429d      	cmp	r5, r3
   48746:	461a      	mov	r2, r3
   48748:	d332      	bcc.n	487b0 <quorem+0x100>
   4874a:	f8c8 4010 	str.w	r4, [r8, #16]
   4874e:	4640      	mov	r0, r8
   48750:	f000 fbc9 	bl	48ee6 <__mcmp>
   48754:	2800      	cmp	r0, #0
   48756:	db27      	blt.n	487a8 <quorem+0xf8>
   48758:	3601      	adds	r6, #1
   4875a:	4628      	mov	r0, r5
   4875c:	f04f 0c00 	mov.w	ip, #0
   48760:	f857 1b04 	ldr.w	r1, [r7], #4
   48764:	f8d0 e000 	ldr.w	lr, [r0]
   48768:	b28b      	uxth	r3, r1
   4876a:	45b9      	cmp	r9, r7
   4876c:	fa1f f28e 	uxth.w	r2, lr
   48770:	ebac 0303 	sub.w	r3, ip, r3
   48774:	4413      	add	r3, r2
   48776:	ea4f 4211 	mov.w	r2, r1, lsr #16
   4877a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   4877e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   48782:	b29b      	uxth	r3, r3
   48784:	ea4f 4c22 	mov.w	ip, r2, asr #16
   48788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   4878c:	f840 3b04 	str.w	r3, [r0], #4
   48790:	d2e6      	bcs.n	48760 <quorem+0xb0>
   48792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   48796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   4879a:	b92a      	cbnz	r2, 487a8 <quorem+0xf8>
   4879c:	3b04      	subs	r3, #4
   4879e:	429d      	cmp	r5, r3
   487a0:	461a      	mov	r2, r3
   487a2:	d30b      	bcc.n	487bc <quorem+0x10c>
   487a4:	f8c8 4010 	str.w	r4, [r8, #16]
   487a8:	4630      	mov	r0, r6
   487aa:	b003      	add	sp, #12
   487ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   487b0:	6812      	ldr	r2, [r2, #0]
   487b2:	3b04      	subs	r3, #4
   487b4:	2a00      	cmp	r2, #0
   487b6:	d1c8      	bne.n	4874a <quorem+0x9a>
   487b8:	3c01      	subs	r4, #1
   487ba:	e7c3      	b.n	48744 <quorem+0x94>
   487bc:	6812      	ldr	r2, [r2, #0]
   487be:	3b04      	subs	r3, #4
   487c0:	2a00      	cmp	r2, #0
   487c2:	d1ef      	bne.n	487a4 <quorem+0xf4>
   487c4:	3c01      	subs	r4, #1
   487c6:	e7ea      	b.n	4879e <quorem+0xee>
   487c8:	2000      	movs	r0, #0
   487ca:	e7ee      	b.n	487aa <quorem+0xfa>

000487cc <__sfmoreglue>:
   487cc:	b570      	push	{r4, r5, r6, lr}
   487ce:	1e4a      	subs	r2, r1, #1
   487d0:	2568      	movs	r5, #104	; 0x68
   487d2:	460e      	mov	r6, r1
   487d4:	4355      	muls	r5, r2
   487d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
   487da:	f7f9 fb5b 	bl	41e94 <_malloc_r>
   487de:	4604      	mov	r4, r0
   487e0:	b140      	cbz	r0, 487f4 <__sfmoreglue+0x28>
   487e2:	2100      	movs	r1, #0
   487e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
   487e8:	e9c0 1600 	strd	r1, r6, [r0]
   487ec:	300c      	adds	r0, #12
   487ee:	60a0      	str	r0, [r4, #8]
   487f0:	f7ff fcea 	bl	481c8 <memset>
   487f4:	4620      	mov	r0, r4
   487f6:	bd70      	pop	{r4, r5, r6, pc}

000487f8 <_fwalk_reent>:
   487f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   487fc:	4680      	mov	r8, r0
   487fe:	4689      	mov	r9, r1
   48800:	f100 0448 	add.w	r4, r0, #72	; 0x48
   48804:	2600      	movs	r6, #0
   48806:	b914      	cbnz	r4, 4880e <_fwalk_reent+0x16>
   48808:	4630      	mov	r0, r6
   4880a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   4880e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
   48812:	3f01      	subs	r7, #1
   48814:	d501      	bpl.n	4881a <_fwalk_reent+0x22>
   48816:	6824      	ldr	r4, [r4, #0]
   48818:	e7f5      	b.n	48806 <_fwalk_reent+0xe>
   4881a:	89ab      	ldrh	r3, [r5, #12]
   4881c:	2b01      	cmp	r3, #1
   4881e:	d907      	bls.n	48830 <_fwalk_reent+0x38>
   48820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   48824:	3301      	adds	r3, #1
   48826:	d003      	beq.n	48830 <_fwalk_reent+0x38>
   48828:	4629      	mov	r1, r5
   4882a:	4640      	mov	r0, r8
   4882c:	47c8      	blx	r9
   4882e:	4306      	orrs	r6, r0
   48830:	3568      	adds	r5, #104	; 0x68
   48832:	e7ee      	b.n	48812 <_fwalk_reent+0x1a>

00048834 <rshift>:
   48834:	b5f0      	push	{r4, r5, r6, r7, lr}
   48836:	114b      	asrs	r3, r1, #5
   48838:	6906      	ldr	r6, [r0, #16]
   4883a:	f100 0414 	add.w	r4, r0, #20
   4883e:	429e      	cmp	r6, r3
   48840:	dd30      	ble.n	488a4 <rshift+0x70>
   48842:	f011 011f 	ands.w	r1, r1, #31
   48846:	eb04 0686 	add.w	r6, r4, r6, lsl #2
   4884a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   4884e:	d108      	bne.n	48862 <rshift+0x2e>
   48850:	4621      	mov	r1, r4
   48852:	42b2      	cmp	r2, r6
   48854:	460b      	mov	r3, r1
   48856:	d211      	bcs.n	4887c <rshift+0x48>
   48858:	f852 3b04 	ldr.w	r3, [r2], #4
   4885c:	f841 3b04 	str.w	r3, [r1], #4
   48860:	e7f7      	b.n	48852 <rshift+0x1e>
   48862:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
   48866:	f1c1 0c20 	rsb	ip, r1, #32
   4886a:	3204      	adds	r2, #4
   4886c:	4623      	mov	r3, r4
   4886e:	40cd      	lsrs	r5, r1
   48870:	4296      	cmp	r6, r2
   48872:	4617      	mov	r7, r2
   48874:	d80c      	bhi.n	48890 <rshift+0x5c>
   48876:	601d      	str	r5, [r3, #0]
   48878:	b105      	cbz	r5, 4887c <rshift+0x48>
   4887a:	3304      	adds	r3, #4
   4887c:	1b1a      	subs	r2, r3, r4
   4887e:	42a3      	cmp	r3, r4
   48880:	ea4f 02a2 	mov.w	r2, r2, asr #2
   48884:	bf08      	it	eq
   48886:	2300      	moveq	r3, #0
   48888:	6102      	str	r2, [r0, #16]
   4888a:	bf08      	it	eq
   4888c:	6143      	streq	r3, [r0, #20]
   4888e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   48890:	683f      	ldr	r7, [r7, #0]
   48892:	fa07 f70c 	lsl.w	r7, r7, ip
   48896:	433d      	orrs	r5, r7
   48898:	f843 5b04 	str.w	r5, [r3], #4
   4889c:	f852 5b04 	ldr.w	r5, [r2], #4
   488a0:	40cd      	lsrs	r5, r1
   488a2:	e7e5      	b.n	48870 <rshift+0x3c>
   488a4:	4623      	mov	r3, r4
   488a6:	e7e9      	b.n	4887c <rshift+0x48>

000488a8 <__hexdig_fun>:
   488a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   488ac:	2b09      	cmp	r3, #9
   488ae:	d802      	bhi.n	488b6 <__hexdig_fun+0xe>
   488b0:	3820      	subs	r0, #32
   488b2:	b2c0      	uxtb	r0, r0
   488b4:	4770      	bx	lr
   488b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   488ba:	2b05      	cmp	r3, #5
   488bc:	d801      	bhi.n	488c2 <__hexdig_fun+0x1a>
   488be:	3847      	subs	r0, #71	; 0x47
   488c0:	e7f7      	b.n	488b2 <__hexdig_fun+0xa>
   488c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   488c6:	2b05      	cmp	r3, #5
   488c8:	d801      	bhi.n	488ce <__hexdig_fun+0x26>
   488ca:	3827      	subs	r0, #39	; 0x27
   488cc:	e7f1      	b.n	488b2 <__hexdig_fun+0xa>
   488ce:	2000      	movs	r0, #0
   488d0:	4770      	bx	lr

000488d2 <L_shift>:
   488d2:	f1c2 0208 	rsb	r2, r2, #8
   488d6:	0092      	lsls	r2, r2, #2
   488d8:	b570      	push	{r4, r5, r6, lr}
   488da:	f1c2 0620 	rsb	r6, r2, #32
   488de:	6843      	ldr	r3, [r0, #4]
   488e0:	6804      	ldr	r4, [r0, #0]
   488e2:	fa03 f506 	lsl.w	r5, r3, r6
   488e6:	40d3      	lsrs	r3, r2
   488e8:	432c      	orrs	r4, r5
   488ea:	6004      	str	r4, [r0, #0]
   488ec:	f840 3f04 	str.w	r3, [r0, #4]!
   488f0:	4288      	cmp	r0, r1
   488f2:	d3f4      	bcc.n	488de <L_shift+0xc>
   488f4:	bd70      	pop	{r4, r5, r6, pc}

000488f6 <__match>:
   488f6:	6803      	ldr	r3, [r0, #0]
   488f8:	3301      	adds	r3, #1
   488fa:	b530      	push	{r4, r5, lr}
   488fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   48900:	b914      	cbnz	r4, 48908 <__match+0x12>
   48902:	6003      	str	r3, [r0, #0]
   48904:	2001      	movs	r0, #1
   48906:	bd30      	pop	{r4, r5, pc}
   48908:	f813 2b01 	ldrb.w	r2, [r3], #1
   4890c:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   48910:	2d19      	cmp	r5, #25
   48912:	bf98      	it	ls
   48914:	3220      	addls	r2, #32
   48916:	42a2      	cmp	r2, r4
   48918:	d0f0      	beq.n	488fc <__match+0x6>
   4891a:	2000      	movs	r0, #0
   4891c:	e7f3      	b.n	48906 <__match+0x10>

0004891e <__hexnan>:
   4891e:	680b      	ldr	r3, [r1, #0]
   48920:	6801      	ldr	r1, [r0, #0]
   48922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48926:	115f      	asrs	r7, r3, #5
   48928:	f013 031f 	ands.w	r3, r3, #31
   4892c:	f04f 0500 	mov.w	r5, #0
   48930:	b087      	sub	sp, #28
   48932:	eb02 0787 	add.w	r7, r2, r7, lsl #2
   48936:	4682      	mov	sl, r0
   48938:	4690      	mov	r8, r2
   4893a:	46ab      	mov	fp, r5
   4893c:	bf18      	it	ne
   4893e:	3704      	addne	r7, #4
   48940:	9301      	str	r3, [sp, #4]
   48942:	9502      	str	r5, [sp, #8]
   48944:	1f3e      	subs	r6, r7, #4
   48946:	f847 5c04 	str.w	r5, [r7, #-4]
   4894a:	46b1      	mov	r9, r6
   4894c:	4634      	mov	r4, r6
   4894e:	1c4b      	adds	r3, r1, #1
   48950:	784a      	ldrb	r2, [r1, #1]
   48952:	9303      	str	r3, [sp, #12]
   48954:	b342      	cbz	r2, 489a8 <__hexnan+0x8a>
   48956:	4610      	mov	r0, r2
   48958:	9105      	str	r1, [sp, #20]
   4895a:	9204      	str	r2, [sp, #16]
   4895c:	f7ff ffa4 	bl	488a8 <__hexdig_fun>
   48960:	2800      	cmp	r0, #0
   48962:	d143      	bne.n	489ec <__hexnan+0xce>
   48964:	9a04      	ldr	r2, [sp, #16]
   48966:	9905      	ldr	r1, [sp, #20]
   48968:	2a20      	cmp	r2, #32
   4896a:	d818      	bhi.n	4899e <__hexnan+0x80>
   4896c:	9b02      	ldr	r3, [sp, #8]
   4896e:	459b      	cmp	fp, r3
   48970:	dd13      	ble.n	4899a <__hexnan+0x7c>
   48972:	454c      	cmp	r4, r9
   48974:	d206      	bcs.n	48984 <__hexnan+0x66>
   48976:	2d07      	cmp	r5, #7
   48978:	dc04      	bgt.n	48984 <__hexnan+0x66>
   4897a:	462a      	mov	r2, r5
   4897c:	4649      	mov	r1, r9
   4897e:	4620      	mov	r0, r4
   48980:	f7ff ffa7 	bl	488d2 <L_shift>
   48984:	4544      	cmp	r4, r8
   48986:	d943      	bls.n	48a10 <__hexnan+0xf2>
   48988:	2300      	movs	r3, #0
   4898a:	f1a4 0904 	sub.w	r9, r4, #4
   4898e:	f8cd b008 	str.w	fp, [sp, #8]
   48992:	f844 3c04 	str.w	r3, [r4, #-4]
   48996:	461d      	mov	r5, r3
   48998:	464c      	mov	r4, r9
   4899a:	9903      	ldr	r1, [sp, #12]
   4899c:	e7d7      	b.n	4894e <__hexnan+0x30>
   4899e:	2a29      	cmp	r2, #41	; 0x29
   489a0:	d149      	bne.n	48a36 <__hexnan+0x118>
   489a2:	3102      	adds	r1, #2
   489a4:	f8ca 1000 	str.w	r1, [sl]
   489a8:	f1bb 0f00 	cmp.w	fp, #0
   489ac:	d043      	beq.n	48a36 <__hexnan+0x118>
   489ae:	454c      	cmp	r4, r9
   489b0:	d206      	bcs.n	489c0 <__hexnan+0xa2>
   489b2:	2d07      	cmp	r5, #7
   489b4:	dc04      	bgt.n	489c0 <__hexnan+0xa2>
   489b6:	462a      	mov	r2, r5
   489b8:	4649      	mov	r1, r9
   489ba:	4620      	mov	r0, r4
   489bc:	f7ff ff89 	bl	488d2 <L_shift>
   489c0:	4544      	cmp	r4, r8
   489c2:	d927      	bls.n	48a14 <__hexnan+0xf6>
   489c4:	4643      	mov	r3, r8
   489c6:	f854 2b04 	ldr.w	r2, [r4], #4
   489ca:	42a6      	cmp	r6, r4
   489cc:	f843 2b04 	str.w	r2, [r3], #4
   489d0:	d2f9      	bcs.n	489c6 <__hexnan+0xa8>
   489d2:	2200      	movs	r2, #0
   489d4:	f843 2b04 	str.w	r2, [r3], #4
   489d8:	429e      	cmp	r6, r3
   489da:	d2fb      	bcs.n	489d4 <__hexnan+0xb6>
   489dc:	6833      	ldr	r3, [r6, #0]
   489de:	b91b      	cbnz	r3, 489e8 <__hexnan+0xca>
   489e0:	4546      	cmp	r6, r8
   489e2:	d126      	bne.n	48a32 <__hexnan+0x114>
   489e4:	2301      	movs	r3, #1
   489e6:	6033      	str	r3, [r6, #0]
   489e8:	2005      	movs	r0, #5
   489ea:	e025      	b.n	48a38 <__hexnan+0x11a>
   489ec:	3501      	adds	r5, #1
   489ee:	f10b 0b01 	add.w	fp, fp, #1
   489f2:	2d08      	cmp	r5, #8
   489f4:	dd05      	ble.n	48a02 <__hexnan+0xe4>
   489f6:	4544      	cmp	r4, r8
   489f8:	d9cf      	bls.n	4899a <__hexnan+0x7c>
   489fa:	2300      	movs	r3, #0
   489fc:	3c04      	subs	r4, #4
   489fe:	2501      	movs	r5, #1
   48a00:	6023      	str	r3, [r4, #0]
   48a02:	6822      	ldr	r2, [r4, #0]
   48a04:	f000 000f 	and.w	r0, r0, #15
   48a08:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
   48a0c:	6020      	str	r0, [r4, #0]
   48a0e:	e7c4      	b.n	4899a <__hexnan+0x7c>
   48a10:	2508      	movs	r5, #8
   48a12:	e7c2      	b.n	4899a <__hexnan+0x7c>
   48a14:	9b01      	ldr	r3, [sp, #4]
   48a16:	2b00      	cmp	r3, #0
   48a18:	d0e0      	beq.n	489dc <__hexnan+0xbe>
   48a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   48a1e:	f1c3 0320 	rsb	r3, r3, #32
   48a22:	fa22 f303 	lsr.w	r3, r2, r3
   48a26:	f857 2c04 	ldr.w	r2, [r7, #-4]
   48a2a:	401a      	ands	r2, r3
   48a2c:	f847 2c04 	str.w	r2, [r7, #-4]
   48a30:	e7d4      	b.n	489dc <__hexnan+0xbe>
   48a32:	3e04      	subs	r6, #4
   48a34:	e7d2      	b.n	489dc <__hexnan+0xbe>
   48a36:	2004      	movs	r0, #4
   48a38:	b007      	add	sp, #28
   48a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00048a3e <__retarget_lock_init_recursive>:
   48a3e:	4770      	bx	lr

00048a40 <__retarget_lock_acquire_recursive>:
   48a40:	4770      	bx	lr

00048a42 <__retarget_lock_release_recursive>:
   48a42:	4770      	bx	lr

00048a44 <__swhatbuf_r>:
   48a44:	b570      	push	{r4, r5, r6, lr}
   48a46:	460e      	mov	r6, r1
   48a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   48a4c:	b096      	sub	sp, #88	; 0x58
   48a4e:	4614      	mov	r4, r2
   48a50:	2900      	cmp	r1, #0
   48a52:	461d      	mov	r5, r3
   48a54:	da07      	bge.n	48a66 <__swhatbuf_r+0x22>
   48a56:	2300      	movs	r3, #0
   48a58:	602b      	str	r3, [r5, #0]
   48a5a:	89b3      	ldrh	r3, [r6, #12]
   48a5c:	061a      	lsls	r2, r3, #24
   48a5e:	d410      	bmi.n	48a82 <__swhatbuf_r+0x3e>
   48a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
   48a64:	e00e      	b.n	48a84 <__swhatbuf_r+0x40>
   48a66:	466a      	mov	r2, sp
   48a68:	f7fb fa3c 	bl	43ee4 <_fstat_r>
   48a6c:	2800      	cmp	r0, #0
   48a6e:	dbf2      	blt.n	48a56 <__swhatbuf_r+0x12>
   48a70:	9a01      	ldr	r2, [sp, #4]
   48a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   48a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   48a7a:	425a      	negs	r2, r3
   48a7c:	415a      	adcs	r2, r3
   48a7e:	602a      	str	r2, [r5, #0]
   48a80:	e7ee      	b.n	48a60 <__swhatbuf_r+0x1c>
   48a82:	2340      	movs	r3, #64	; 0x40
   48a84:	2000      	movs	r0, #0
   48a86:	6023      	str	r3, [r4, #0]
   48a88:	b016      	add	sp, #88	; 0x58
   48a8a:	bd70      	pop	{r4, r5, r6, pc}

00048a8c <__ascii_mbtowc>:
   48a8c:	b082      	sub	sp, #8
   48a8e:	b901      	cbnz	r1, 48a92 <__ascii_mbtowc+0x6>
   48a90:	a901      	add	r1, sp, #4
   48a92:	b142      	cbz	r2, 48aa6 <__ascii_mbtowc+0x1a>
   48a94:	b14b      	cbz	r3, 48aaa <__ascii_mbtowc+0x1e>
   48a96:	7813      	ldrb	r3, [r2, #0]
   48a98:	600b      	str	r3, [r1, #0]
   48a9a:	7812      	ldrb	r2, [r2, #0]
   48a9c:	1c10      	adds	r0, r2, #0
   48a9e:	bf18      	it	ne
   48aa0:	2001      	movne	r0, #1
   48aa2:	b002      	add	sp, #8
   48aa4:	4770      	bx	lr
   48aa6:	4610      	mov	r0, r2
   48aa8:	e7fb      	b.n	48aa2 <__ascii_mbtowc+0x16>
   48aaa:	f06f 0001 	mvn.w	r0, #1
   48aae:	e7f8      	b.n	48aa2 <__ascii_mbtowc+0x16>

00048ab0 <memmove>:
   48ab0:	4288      	cmp	r0, r1
   48ab2:	eb01 0302 	add.w	r3, r1, r2
   48ab6:	b510      	push	{r4, lr}
   48ab8:	d902      	bls.n	48ac0 <memmove+0x10>
   48aba:	4283      	cmp	r3, r0
   48abc:	461c      	mov	r4, r3
   48abe:	d807      	bhi.n	48ad0 <memmove+0x20>
   48ac0:	1e42      	subs	r2, r0, #1
   48ac2:	4299      	cmp	r1, r3
   48ac4:	d008      	beq.n	48ad8 <memmove+0x28>
   48ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
   48aca:	f802 4f01 	strb.w	r4, [r2, #1]!
   48ace:	e7f8      	b.n	48ac2 <memmove+0x12>
   48ad0:	1883      	adds	r3, r0, r2
   48ad2:	1a9a      	subs	r2, r3, r2
   48ad4:	429a      	cmp	r2, r3
   48ad6:	d100      	bne.n	48ada <memmove+0x2a>
   48ad8:	bd10      	pop	{r4, pc}
   48ada:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   48ade:	f803 1d01 	strb.w	r1, [r3, #-1]!
   48ae2:	e7f7      	b.n	48ad4 <memmove+0x24>

00048ae4 <_Balloc>:
   48ae4:	b570      	push	{r4, r5, r6, lr}
   48ae6:	6a45      	ldr	r5, [r0, #36]	; 0x24
   48ae8:	4604      	mov	r4, r0
   48aea:	460e      	mov	r6, r1
   48aec:	b93d      	cbnz	r5, 48afe <_Balloc+0x1a>
   48aee:	2010      	movs	r0, #16
   48af0:	f7f9 f972 	bl	41dd8 <malloc>
   48af4:	6260      	str	r0, [r4, #36]	; 0x24
   48af6:	6005      	str	r5, [r0, #0]
   48af8:	60c5      	str	r5, [r0, #12]
   48afa:	e9c0 5501 	strd	r5, r5, [r0, #4]
   48afe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   48b00:	68eb      	ldr	r3, [r5, #12]
   48b02:	b183      	cbz	r3, 48b26 <_Balloc+0x42>
   48b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   48b06:	68db      	ldr	r3, [r3, #12]
   48b08:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   48b0c:	b9b8      	cbnz	r0, 48b3e <_Balloc+0x5a>
   48b0e:	2101      	movs	r1, #1
   48b10:	4620      	mov	r0, r4
   48b12:	fa01 f506 	lsl.w	r5, r1, r6
   48b16:	1d6a      	adds	r2, r5, #5
   48b18:	0092      	lsls	r2, r2, #2
   48b1a:	f000 fb1a 	bl	49152 <_calloc_r>
   48b1e:	b160      	cbz	r0, 48b3a <_Balloc+0x56>
   48b20:	e9c0 6501 	strd	r6, r5, [r0, #4]
   48b24:	e00e      	b.n	48b44 <_Balloc+0x60>
   48b26:	2221      	movs	r2, #33	; 0x21
   48b28:	2104      	movs	r1, #4
   48b2a:	4620      	mov	r0, r4
   48b2c:	f000 fb11 	bl	49152 <_calloc_r>
   48b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   48b32:	60e8      	str	r0, [r5, #12]
   48b34:	68db      	ldr	r3, [r3, #12]
   48b36:	2b00      	cmp	r3, #0
   48b38:	d1e4      	bne.n	48b04 <_Balloc+0x20>
   48b3a:	2000      	movs	r0, #0
   48b3c:	bd70      	pop	{r4, r5, r6, pc}
   48b3e:	6802      	ldr	r2, [r0, #0]
   48b40:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   48b44:	2300      	movs	r3, #0
   48b46:	e9c0 3303 	strd	r3, r3, [r0, #12]
   48b4a:	e7f7      	b.n	48b3c <_Balloc+0x58>

00048b4c <_Bfree>:
   48b4c:	b570      	push	{r4, r5, r6, lr}
   48b4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   48b50:	4606      	mov	r6, r0
   48b52:	460d      	mov	r5, r1
   48b54:	b93c      	cbnz	r4, 48b66 <_Bfree+0x1a>
   48b56:	2010      	movs	r0, #16
   48b58:	f7f9 f93e 	bl	41dd8 <malloc>
   48b5c:	6270      	str	r0, [r6, #36]	; 0x24
   48b5e:	6004      	str	r4, [r0, #0]
   48b60:	60c4      	str	r4, [r0, #12]
   48b62:	e9c0 4401 	strd	r4, r4, [r0, #4]
   48b66:	b13d      	cbz	r5, 48b78 <_Bfree+0x2c>
   48b68:	6a73      	ldr	r3, [r6, #36]	; 0x24
   48b6a:	686a      	ldr	r2, [r5, #4]
   48b6c:	68db      	ldr	r3, [r3, #12]
   48b6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   48b72:	6029      	str	r1, [r5, #0]
   48b74:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   48b78:	bd70      	pop	{r4, r5, r6, pc}

00048b7a <__multadd>:
   48b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   48b7e:	f101 0c14 	add.w	ip, r1, #20
   48b82:	461f      	mov	r7, r3
   48b84:	4606      	mov	r6, r0
   48b86:	460c      	mov	r4, r1
   48b88:	690d      	ldr	r5, [r1, #16]
   48b8a:	2300      	movs	r3, #0
   48b8c:	f8dc 0000 	ldr.w	r0, [ip]
   48b90:	3301      	adds	r3, #1
   48b92:	b281      	uxth	r1, r0
   48b94:	429d      	cmp	r5, r3
   48b96:	ea4f 4010 	mov.w	r0, r0, lsr #16
   48b9a:	fb02 7101 	mla	r1, r2, r1, r7
   48b9e:	ea4f 4711 	mov.w	r7, r1, lsr #16
   48ba2:	b289      	uxth	r1, r1
   48ba4:	fb02 7000 	mla	r0, r2, r0, r7
   48ba8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   48bac:	ea4f 4710 	mov.w	r7, r0, lsr #16
   48bb0:	f84c 1b04 	str.w	r1, [ip], #4
   48bb4:	dcea      	bgt.n	48b8c <__multadd+0x12>
   48bb6:	b1d7      	cbz	r7, 48bee <__multadd+0x74>
   48bb8:	68a3      	ldr	r3, [r4, #8]
   48bba:	42ab      	cmp	r3, r5
   48bbc:	dc12      	bgt.n	48be4 <__multadd+0x6a>
   48bbe:	6861      	ldr	r1, [r4, #4]
   48bc0:	4630      	mov	r0, r6
   48bc2:	3101      	adds	r1, #1
   48bc4:	f7ff ff8e 	bl	48ae4 <_Balloc>
   48bc8:	6922      	ldr	r2, [r4, #16]
   48bca:	4680      	mov	r8, r0
   48bcc:	f104 010c 	add.w	r1, r4, #12
   48bd0:	3202      	adds	r2, #2
   48bd2:	300c      	adds	r0, #12
   48bd4:	0092      	lsls	r2, r2, #2
   48bd6:	f7ff fad7 	bl	48188 <memcpy>
   48bda:	4621      	mov	r1, r4
   48bdc:	4644      	mov	r4, r8
   48bde:	4630      	mov	r0, r6
   48be0:	f7ff ffb4 	bl	48b4c <_Bfree>
   48be4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   48be8:	3501      	adds	r5, #1
   48bea:	615f      	str	r7, [r3, #20]
   48bec:	6125      	str	r5, [r4, #16]
   48bee:	4620      	mov	r0, r4
   48bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00048bf4 <__s2b>:
   48bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   48bf8:	4615      	mov	r5, r2
   48bfa:	461f      	mov	r7, r3
   48bfc:	2209      	movs	r2, #9
   48bfe:	3308      	adds	r3, #8
   48c00:	460c      	mov	r4, r1
   48c02:	4606      	mov	r6, r0
   48c04:	2100      	movs	r1, #0
   48c06:	fb93 f3f2 	sdiv	r3, r3, r2
   48c0a:	2201      	movs	r2, #1
   48c0c:	429a      	cmp	r2, r3
   48c0e:	db20      	blt.n	48c52 <__s2b+0x5e>
   48c10:	4630      	mov	r0, r6
   48c12:	f7ff ff67 	bl	48ae4 <_Balloc>
   48c16:	9b08      	ldr	r3, [sp, #32]
   48c18:	2d09      	cmp	r5, #9
   48c1a:	6143      	str	r3, [r0, #20]
   48c1c:	f04f 0301 	mov.w	r3, #1
   48c20:	6103      	str	r3, [r0, #16]
   48c22:	dd19      	ble.n	48c58 <__s2b+0x64>
   48c24:	f104 0909 	add.w	r9, r4, #9
   48c28:	442c      	add	r4, r5
   48c2a:	46c8      	mov	r8, r9
   48c2c:	f818 3b01 	ldrb.w	r3, [r8], #1
   48c30:	4601      	mov	r1, r0
   48c32:	220a      	movs	r2, #10
   48c34:	4630      	mov	r0, r6
   48c36:	3b30      	subs	r3, #48	; 0x30
   48c38:	f7ff ff9f 	bl	48b7a <__multadd>
   48c3c:	45a0      	cmp	r8, r4
   48c3e:	d1f5      	bne.n	48c2c <__s2b+0x38>
   48c40:	f1a5 0408 	sub.w	r4, r5, #8
   48c44:	444c      	add	r4, r9
   48c46:	1b2d      	subs	r5, r5, r4
   48c48:	1963      	adds	r3, r4, r5
   48c4a:	42bb      	cmp	r3, r7
   48c4c:	db07      	blt.n	48c5e <__s2b+0x6a>
   48c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   48c52:	0052      	lsls	r2, r2, #1
   48c54:	3101      	adds	r1, #1
   48c56:	e7d9      	b.n	48c0c <__s2b+0x18>
   48c58:	340a      	adds	r4, #10
   48c5a:	2509      	movs	r5, #9
   48c5c:	e7f3      	b.n	48c46 <__s2b+0x52>
   48c5e:	f814 3b01 	ldrb.w	r3, [r4], #1
   48c62:	4601      	mov	r1, r0
   48c64:	220a      	movs	r2, #10
   48c66:	4630      	mov	r0, r6
   48c68:	3b30      	subs	r3, #48	; 0x30
   48c6a:	f7ff ff86 	bl	48b7a <__multadd>
   48c6e:	e7eb      	b.n	48c48 <__s2b+0x54>

00048c70 <__hi0bits>:
   48c70:	0c02      	lsrs	r2, r0, #16
   48c72:	4603      	mov	r3, r0
   48c74:	0412      	lsls	r2, r2, #16
   48c76:	b9ca      	cbnz	r2, 48cac <__hi0bits+0x3c>
   48c78:	0403      	lsls	r3, r0, #16
   48c7a:	2010      	movs	r0, #16
   48c7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   48c80:	bf04      	itt	eq
   48c82:	021b      	lsleq	r3, r3, #8
   48c84:	3008      	addeq	r0, #8
   48c86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   48c8a:	bf04      	itt	eq
   48c8c:	011b      	lsleq	r3, r3, #4
   48c8e:	3004      	addeq	r0, #4
   48c90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   48c94:	bf04      	itt	eq
   48c96:	009b      	lsleq	r3, r3, #2
   48c98:	3002      	addeq	r0, #2
   48c9a:	2b00      	cmp	r3, #0
   48c9c:	db05      	blt.n	48caa <__hi0bits+0x3a>
   48c9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   48ca2:	f100 0001 	add.w	r0, r0, #1
   48ca6:	bf08      	it	eq
   48ca8:	2020      	moveq	r0, #32
   48caa:	4770      	bx	lr
   48cac:	2000      	movs	r0, #0
   48cae:	e7e5      	b.n	48c7c <__hi0bits+0xc>

00048cb0 <__lo0bits>:
   48cb0:	6803      	ldr	r3, [r0, #0]
   48cb2:	4601      	mov	r1, r0
   48cb4:	f013 0207 	ands.w	r2, r3, #7
   48cb8:	d00b      	beq.n	48cd2 <__lo0bits+0x22>
   48cba:	07da      	lsls	r2, r3, #31
   48cbc:	d424      	bmi.n	48d08 <__lo0bits+0x58>
   48cbe:	0798      	lsls	r0, r3, #30
   48cc0:	bf47      	ittee	mi
   48cc2:	085b      	lsrmi	r3, r3, #1
   48cc4:	2001      	movmi	r0, #1
   48cc6:	089b      	lsrpl	r3, r3, #2
   48cc8:	2002      	movpl	r0, #2
   48cca:	bf4c      	ite	mi
   48ccc:	600b      	strmi	r3, [r1, #0]
   48cce:	600b      	strpl	r3, [r1, #0]
   48cd0:	4770      	bx	lr
   48cd2:	b298      	uxth	r0, r3
   48cd4:	b9b0      	cbnz	r0, 48d04 <__lo0bits+0x54>
   48cd6:	0c1b      	lsrs	r3, r3, #16
   48cd8:	2010      	movs	r0, #16
   48cda:	f013 0fff 	tst.w	r3, #255	; 0xff
   48cde:	bf04      	itt	eq
   48ce0:	0a1b      	lsreq	r3, r3, #8
   48ce2:	3008      	addeq	r0, #8
   48ce4:	071a      	lsls	r2, r3, #28
   48ce6:	bf04      	itt	eq
   48ce8:	091b      	lsreq	r3, r3, #4
   48cea:	3004      	addeq	r0, #4
   48cec:	079a      	lsls	r2, r3, #30
   48cee:	bf04      	itt	eq
   48cf0:	089b      	lsreq	r3, r3, #2
   48cf2:	3002      	addeq	r0, #2
   48cf4:	07da      	lsls	r2, r3, #31
   48cf6:	d403      	bmi.n	48d00 <__lo0bits+0x50>
   48cf8:	085b      	lsrs	r3, r3, #1
   48cfa:	f100 0001 	add.w	r0, r0, #1
   48cfe:	d005      	beq.n	48d0c <__lo0bits+0x5c>
   48d00:	600b      	str	r3, [r1, #0]
   48d02:	4770      	bx	lr
   48d04:	4610      	mov	r0, r2
   48d06:	e7e8      	b.n	48cda <__lo0bits+0x2a>
   48d08:	2000      	movs	r0, #0
   48d0a:	4770      	bx	lr
   48d0c:	2020      	movs	r0, #32
   48d0e:	4770      	bx	lr

00048d10 <__i2b>:
   48d10:	b510      	push	{r4, lr}
   48d12:	460c      	mov	r4, r1
   48d14:	2101      	movs	r1, #1
   48d16:	f7ff fee5 	bl	48ae4 <_Balloc>
   48d1a:	2201      	movs	r2, #1
   48d1c:	6144      	str	r4, [r0, #20]
   48d1e:	6102      	str	r2, [r0, #16]
   48d20:	bd10      	pop	{r4, pc}

00048d22 <__multiply>:
   48d22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48d26:	4690      	mov	r8, r2
   48d28:	690a      	ldr	r2, [r1, #16]
   48d2a:	460c      	mov	r4, r1
   48d2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   48d30:	429a      	cmp	r2, r3
   48d32:	bfbe      	ittt	lt
   48d34:	460b      	movlt	r3, r1
   48d36:	4644      	movlt	r4, r8
   48d38:	4698      	movlt	r8, r3
   48d3a:	6927      	ldr	r7, [r4, #16]
   48d3c:	68a3      	ldr	r3, [r4, #8]
   48d3e:	f8d8 9010 	ldr.w	r9, [r8, #16]
   48d42:	6861      	ldr	r1, [r4, #4]
   48d44:	eb07 0609 	add.w	r6, r7, r9
   48d48:	42b3      	cmp	r3, r6
   48d4a:	bfb8      	it	lt
   48d4c:	3101      	addlt	r1, #1
   48d4e:	f7ff fec9 	bl	48ae4 <_Balloc>
   48d52:	f100 0514 	add.w	r5, r0, #20
   48d56:	2200      	movs	r2, #0
   48d58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
   48d5c:	462b      	mov	r3, r5
   48d5e:	4573      	cmp	r3, lr
   48d60:	d316      	bcc.n	48d90 <__multiply+0x6e>
   48d62:	f104 0314 	add.w	r3, r4, #20
   48d66:	f108 0214 	add.w	r2, r8, #20
   48d6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   48d6e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   48d72:	9300      	str	r3, [sp, #0]
   48d74:	9b00      	ldr	r3, [sp, #0]
   48d76:	9201      	str	r2, [sp, #4]
   48d78:	4293      	cmp	r3, r2
   48d7a:	d80c      	bhi.n	48d96 <__multiply+0x74>
   48d7c:	2e00      	cmp	r6, #0
   48d7e:	dd03      	ble.n	48d88 <__multiply+0x66>
   48d80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
   48d84:	2b00      	cmp	r3, #0
   48d86:	d059      	beq.n	48e3c <__multiply+0x11a>
   48d88:	6106      	str	r6, [r0, #16]
   48d8a:	b003      	add	sp, #12
   48d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48d90:	f843 2b04 	str.w	r2, [r3], #4
   48d94:	e7e3      	b.n	48d5e <__multiply+0x3c>
   48d96:	f8b2 a000 	ldrh.w	sl, [r2]
   48d9a:	f1ba 0f00 	cmp.w	sl, #0
   48d9e:	d023      	beq.n	48de8 <__multiply+0xc6>
   48da0:	f104 0914 	add.w	r9, r4, #20
   48da4:	46ac      	mov	ip, r5
   48da6:	f04f 0800 	mov.w	r8, #0
   48daa:	f859 1b04 	ldr.w	r1, [r9], #4
   48dae:	f8dc b000 	ldr.w	fp, [ip]
   48db2:	b28b      	uxth	r3, r1
   48db4:	454f      	cmp	r7, r9
   48db6:	fa1f fb8b 	uxth.w	fp, fp
   48dba:	fb0a b303 	mla	r3, sl, r3, fp
   48dbe:	ea4f 4b11 	mov.w	fp, r1, lsr #16
   48dc2:	f8dc 1000 	ldr.w	r1, [ip]
   48dc6:	4443      	add	r3, r8
   48dc8:	ea4f 4811 	mov.w	r8, r1, lsr #16
   48dcc:	fb0a 810b 	mla	r1, sl, fp, r8
   48dd0:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   48dd4:	b29b      	uxth	r3, r3
   48dd6:	ea4f 4811 	mov.w	r8, r1, lsr #16
   48dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   48dde:	f84c 3b04 	str.w	r3, [ip], #4
   48de2:	d8e2      	bhi.n	48daa <__multiply+0x88>
   48de4:	f8cc 8000 	str.w	r8, [ip]
   48de8:	9b01      	ldr	r3, [sp, #4]
   48dea:	3204      	adds	r2, #4
   48dec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   48df0:	f1b9 0f00 	cmp.w	r9, #0
   48df4:	d020      	beq.n	48e38 <__multiply+0x116>
   48df6:	682b      	ldr	r3, [r5, #0]
   48df8:	f104 0814 	add.w	r8, r4, #20
   48dfc:	46ac      	mov	ip, r5
   48dfe:	f04f 0a00 	mov.w	sl, #0
   48e02:	f8b8 1000 	ldrh.w	r1, [r8]
   48e06:	b29b      	uxth	r3, r3
   48e08:	f8bc b002 	ldrh.w	fp, [ip, #2]
   48e0c:	fb09 b101 	mla	r1, r9, r1, fp
   48e10:	448a      	add	sl, r1
   48e12:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   48e16:	f84c 3b04 	str.w	r3, [ip], #4
   48e1a:	f858 3b04 	ldr.w	r3, [r8], #4
   48e1e:	f8bc 1000 	ldrh.w	r1, [ip]
   48e22:	0c1b      	lsrs	r3, r3, #16
   48e24:	4547      	cmp	r7, r8
   48e26:	fb09 1303 	mla	r3, r9, r3, r1
   48e2a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   48e2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   48e32:	d8e6      	bhi.n	48e02 <__multiply+0xe0>
   48e34:	f8cc 3000 	str.w	r3, [ip]
   48e38:	3504      	adds	r5, #4
   48e3a:	e79b      	b.n	48d74 <__multiply+0x52>
   48e3c:	3e01      	subs	r6, #1
   48e3e:	e79d      	b.n	48d7c <__multiply+0x5a>

00048e40 <__lshift>:
   48e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   48e44:	460c      	mov	r4, r1
   48e46:	ea4f 1a62 	mov.w	sl, r2, asr #5
   48e4a:	4607      	mov	r7, r0
   48e4c:	4616      	mov	r6, r2
   48e4e:	6923      	ldr	r3, [r4, #16]
   48e50:	6849      	ldr	r1, [r1, #4]
   48e52:	eb0a 0903 	add.w	r9, sl, r3
   48e56:	68a3      	ldr	r3, [r4, #8]
   48e58:	f109 0501 	add.w	r5, r9, #1
   48e5c:	42ab      	cmp	r3, r5
   48e5e:	db33      	blt.n	48ec8 <__lshift+0x88>
   48e60:	4638      	mov	r0, r7
   48e62:	f7ff fe3f 	bl	48ae4 <_Balloc>
   48e66:	2300      	movs	r3, #0
   48e68:	4680      	mov	r8, r0
   48e6a:	f100 0114 	add.w	r1, r0, #20
   48e6e:	f100 0210 	add.w	r2, r0, #16
   48e72:	4618      	mov	r0, r3
   48e74:	4553      	cmp	r3, sl
   48e76:	db2a      	blt.n	48ece <__lshift+0x8e>
   48e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   48e7c:	f104 0314 	add.w	r3, r4, #20
   48e80:	6920      	ldr	r0, [r4, #16]
   48e82:	f016 021f 	ands.w	r2, r6, #31
   48e86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   48e8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   48e8e:	d022      	beq.n	48ed6 <__lshift+0x96>
   48e90:	f1c2 0e20 	rsb	lr, r2, #32
   48e94:	2000      	movs	r0, #0
   48e96:	681e      	ldr	r6, [r3, #0]
   48e98:	4096      	lsls	r6, r2
   48e9a:	4330      	orrs	r0, r6
   48e9c:	f841 0b04 	str.w	r0, [r1], #4
   48ea0:	f853 0b04 	ldr.w	r0, [r3], #4
   48ea4:	459c      	cmp	ip, r3
   48ea6:	fa20 f00e 	lsr.w	r0, r0, lr
   48eaa:	d8f4      	bhi.n	48e96 <__lshift+0x56>
   48eac:	6008      	str	r0, [r1, #0]
   48eae:	b108      	cbz	r0, 48eb4 <__lshift+0x74>
   48eb0:	f109 0502 	add.w	r5, r9, #2
   48eb4:	3d01      	subs	r5, #1
   48eb6:	4638      	mov	r0, r7
   48eb8:	4621      	mov	r1, r4
   48eba:	f8c8 5010 	str.w	r5, [r8, #16]
   48ebe:	f7ff fe45 	bl	48b4c <_Bfree>
   48ec2:	4640      	mov	r0, r8
   48ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48ec8:	3101      	adds	r1, #1
   48eca:	005b      	lsls	r3, r3, #1
   48ecc:	e7c6      	b.n	48e5c <__lshift+0x1c>
   48ece:	f842 0f04 	str.w	r0, [r2, #4]!
   48ed2:	3301      	adds	r3, #1
   48ed4:	e7ce      	b.n	48e74 <__lshift+0x34>
   48ed6:	3904      	subs	r1, #4
   48ed8:	f853 2b04 	ldr.w	r2, [r3], #4
   48edc:	459c      	cmp	ip, r3
   48ede:	f841 2f04 	str.w	r2, [r1, #4]!
   48ee2:	d8f9      	bhi.n	48ed8 <__lshift+0x98>
   48ee4:	e7e6      	b.n	48eb4 <__lshift+0x74>

00048ee6 <__mcmp>:
   48ee6:	6903      	ldr	r3, [r0, #16]
   48ee8:	690a      	ldr	r2, [r1, #16]
   48eea:	1a9b      	subs	r3, r3, r2
   48eec:	b530      	push	{r4, r5, lr}
   48eee:	d10c      	bne.n	48f0a <__mcmp+0x24>
   48ef0:	0092      	lsls	r2, r2, #2
   48ef2:	3014      	adds	r0, #20
   48ef4:	3114      	adds	r1, #20
   48ef6:	1884      	adds	r4, r0, r2
   48ef8:	4411      	add	r1, r2
   48efa:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   48efe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   48f02:	4295      	cmp	r5, r2
   48f04:	d003      	beq.n	48f0e <__mcmp+0x28>
   48f06:	d305      	bcc.n	48f14 <__mcmp+0x2e>
   48f08:	2301      	movs	r3, #1
   48f0a:	4618      	mov	r0, r3
   48f0c:	bd30      	pop	{r4, r5, pc}
   48f0e:	42a0      	cmp	r0, r4
   48f10:	d3f3      	bcc.n	48efa <__mcmp+0x14>
   48f12:	e7fa      	b.n	48f0a <__mcmp+0x24>
   48f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   48f18:	e7f7      	b.n	48f0a <__mcmp+0x24>

00048f1a <__mdiff>:
   48f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   48f1e:	460d      	mov	r5, r1
   48f20:	4607      	mov	r7, r0
   48f22:	4611      	mov	r1, r2
   48f24:	4614      	mov	r4, r2
   48f26:	4628      	mov	r0, r5
   48f28:	f7ff ffdd 	bl	48ee6 <__mcmp>
   48f2c:	1e06      	subs	r6, r0, #0
   48f2e:	d108      	bne.n	48f42 <__mdiff+0x28>
   48f30:	4631      	mov	r1, r6
   48f32:	4638      	mov	r0, r7
   48f34:	f7ff fdd6 	bl	48ae4 <_Balloc>
   48f38:	2301      	movs	r3, #1
   48f3a:	e9c0 3604 	strd	r3, r6, [r0, #16]
   48f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   48f42:	bfa3      	ittte	ge
   48f44:	4623      	movge	r3, r4
   48f46:	462c      	movge	r4, r5
   48f48:	2600      	movge	r6, #0
   48f4a:	2601      	movlt	r6, #1
   48f4c:	bfa8      	it	ge
   48f4e:	461d      	movge	r5, r3
   48f50:	6861      	ldr	r1, [r4, #4]
   48f52:	4638      	mov	r0, r7
   48f54:	f7ff fdc6 	bl	48ae4 <_Balloc>
   48f58:	f105 0914 	add.w	r9, r5, #20
   48f5c:	60c6      	str	r6, [r0, #12]
   48f5e:	f104 0214 	add.w	r2, r4, #20
   48f62:	6926      	ldr	r6, [r4, #16]
   48f64:	f100 0114 	add.w	r1, r0, #20
   48f68:	692b      	ldr	r3, [r5, #16]
   48f6a:	f04f 0e00 	mov.w	lr, #0
   48f6e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
   48f72:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   48f76:	f852 ab04 	ldr.w	sl, [r2], #4
   48f7a:	f859 5b04 	ldr.w	r5, [r9], #4
   48f7e:	fa1f f38a 	uxth.w	r3, sl
   48f82:	4694      	mov	ip, r2
   48f84:	b2ac      	uxth	r4, r5
   48f86:	45c8      	cmp	r8, r9
   48f88:	4473      	add	r3, lr
   48f8a:	eba3 0304 	sub.w	r3, r3, r4
   48f8e:	ea4f 4415 	mov.w	r4, r5, lsr #16
   48f92:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
   48f96:	eb04 4423 	add.w	r4, r4, r3, asr #16
   48f9a:	b29b      	uxth	r3, r3
   48f9c:	ea4f 4e24 	mov.w	lr, r4, asr #16
   48fa0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   48fa4:	f841 4b04 	str.w	r4, [r1], #4
   48fa8:	d8e5      	bhi.n	48f76 <__mdiff+0x5c>
   48faa:	45bc      	cmp	ip, r7
   48fac:	d304      	bcc.n	48fb8 <__mdiff+0x9e>
   48fae:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   48fb2:	b183      	cbz	r3, 48fd6 <__mdiff+0xbc>
   48fb4:	6106      	str	r6, [r0, #16]
   48fb6:	e7c2      	b.n	48f3e <__mdiff+0x24>
   48fb8:	f85c 4b04 	ldr.w	r4, [ip], #4
   48fbc:	b2a2      	uxth	r2, r4
   48fbe:	4472      	add	r2, lr
   48fc0:	1413      	asrs	r3, r2, #16
   48fc2:	b292      	uxth	r2, r2
   48fc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
   48fc8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   48fcc:	ea4f 4e23 	mov.w	lr, r3, asr #16
   48fd0:	f841 2b04 	str.w	r2, [r1], #4
   48fd4:	e7e9      	b.n	48faa <__mdiff+0x90>
   48fd6:	3e01      	subs	r6, #1
   48fd8:	e7e9      	b.n	48fae <__mdiff+0x94>

00048fda <__d2b>:
   48fda:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   48fde:	ec59 8b10 	vmov	r8, r9, d0
   48fe2:	f3c9 540a 	ubfx	r4, r9, #20, #11
   48fe6:	460e      	mov	r6, r1
   48fe8:	2101      	movs	r1, #1
   48fea:	4615      	mov	r5, r2
   48fec:	f7ff fd7a 	bl	48ae4 <_Balloc>
   48ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
   48ff4:	4607      	mov	r7, r0
   48ff6:	bb2c      	cbnz	r4, 49044 <__d2b+0x6a>
   48ff8:	9301      	str	r3, [sp, #4]
   48ffa:	f1b8 0300 	subs.w	r3, r8, #0
   48ffe:	d026      	beq.n	4904e <__d2b+0x74>
   49000:	4668      	mov	r0, sp
   49002:	9300      	str	r3, [sp, #0]
   49004:	f7ff fe54 	bl	48cb0 <__lo0bits>
   49008:	9900      	ldr	r1, [sp, #0]
   4900a:	b1f0      	cbz	r0, 4904a <__d2b+0x70>
   4900c:	9a01      	ldr	r2, [sp, #4]
   4900e:	f1c0 0320 	rsb	r3, r0, #32
   49012:	fa02 f303 	lsl.w	r3, r2, r3
   49016:	40c2      	lsrs	r2, r0
   49018:	430b      	orrs	r3, r1
   4901a:	9201      	str	r2, [sp, #4]
   4901c:	617b      	str	r3, [r7, #20]
   4901e:	9b01      	ldr	r3, [sp, #4]
   49020:	2b00      	cmp	r3, #0
   49022:	61bb      	str	r3, [r7, #24]
   49024:	bf14      	ite	ne
   49026:	2102      	movne	r1, #2
   49028:	2101      	moveq	r1, #1
   4902a:	6139      	str	r1, [r7, #16]
   4902c:	b1c4      	cbz	r4, 49060 <__d2b+0x86>
   4902e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   49032:	4404      	add	r4, r0
   49034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   49038:	6034      	str	r4, [r6, #0]
   4903a:	6028      	str	r0, [r5, #0]
   4903c:	4638      	mov	r0, r7
   4903e:	b003      	add	sp, #12
   49040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   49044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   49048:	e7d6      	b.n	48ff8 <__d2b+0x1e>
   4904a:	6179      	str	r1, [r7, #20]
   4904c:	e7e7      	b.n	4901e <__d2b+0x44>
   4904e:	a801      	add	r0, sp, #4
   49050:	f7ff fe2e 	bl	48cb0 <__lo0bits>
   49054:	9b01      	ldr	r3, [sp, #4]
   49056:	2101      	movs	r1, #1
   49058:	3020      	adds	r0, #32
   4905a:	617b      	str	r3, [r7, #20]
   4905c:	6139      	str	r1, [r7, #16]
   4905e:	e7e5      	b.n	4902c <__d2b+0x52>
   49060:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   49064:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   49068:	6030      	str	r0, [r6, #0]
   4906a:	6918      	ldr	r0, [r3, #16]
   4906c:	f7ff fe00 	bl	48c70 <__hi0bits>
   49070:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   49074:	e7e1      	b.n	4903a <__d2b+0x60>

00049076 <__ratio>:
   49076:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4907a:	4688      	mov	r8, r1
   4907c:	4681      	mov	r9, r0
   4907e:	4669      	mov	r1, sp
   49080:	f7fa fb28 	bl	436d4 <__b2d>
   49084:	a901      	add	r1, sp, #4
   49086:	4640      	mov	r0, r8
   49088:	ec57 6b10 	vmov	r6, r7, d0
   4908c:	f7fa fb22 	bl	436d4 <__b2d>
   49090:	f8d9 3010 	ldr.w	r3, [r9, #16]
   49094:	f8d8 2010 	ldr.w	r2, [r8, #16]
   49098:	463d      	mov	r5, r7
   4909a:	4630      	mov	r0, r6
   4909c:	eba3 0c02 	sub.w	ip, r3, r2
   490a0:	e9dd 3200 	ldrd	r3, r2, [sp]
   490a4:	ec5b ab10 	vmov	sl, fp, d0
   490a8:	1a9b      	subs	r3, r3, r2
   490aa:	4659      	mov	r1, fp
   490ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   490b0:	2b00      	cmp	r3, #0
   490b2:	bfcd      	iteet	gt
   490b4:	463a      	movgt	r2, r7
   490b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   490ba:	465a      	movle	r2, fp
   490bc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
   490c0:	bfd8      	it	le
   490c2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
   490c6:	ee10 2a10 	vmov	r2, s0
   490ca:	460b      	mov	r3, r1
   490cc:	4629      	mov	r1, r5
   490ce:	f7d3 fc9d 	bl	1ca0c <__aeabi_ddiv>
   490d2:	ec41 0b10 	vmov	d0, r0, r1
   490d6:	b003      	add	sp, #12
   490d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000490dc <__copybits>:
   490dc:	3901      	subs	r1, #1
   490de:	f102 0314 	add.w	r3, r2, #20
   490e2:	1149      	asrs	r1, r1, #5
   490e4:	b510      	push	{r4, lr}
   490e6:	3101      	adds	r1, #1
   490e8:	6914      	ldr	r4, [r2, #16]
   490ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   490ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   490f2:	42a3      	cmp	r3, r4
   490f4:	4602      	mov	r2, r0
   490f6:	d303      	bcc.n	49100 <__copybits+0x24>
   490f8:	2300      	movs	r3, #0
   490fa:	428a      	cmp	r2, r1
   490fc:	d305      	bcc.n	4910a <__copybits+0x2e>
   490fe:	bd10      	pop	{r4, pc}
   49100:	f853 2b04 	ldr.w	r2, [r3], #4
   49104:	f840 2b04 	str.w	r2, [r0], #4
   49108:	e7f3      	b.n	490f2 <__copybits+0x16>
   4910a:	f842 3b04 	str.w	r3, [r2], #4
   4910e:	e7f4      	b.n	490fa <__copybits+0x1e>

00049110 <__any_on>:
   49110:	f100 0214 	add.w	r2, r0, #20
   49114:	114b      	asrs	r3, r1, #5
   49116:	6900      	ldr	r0, [r0, #16]
   49118:	4298      	cmp	r0, r3
   4911a:	b510      	push	{r4, lr}
   4911c:	db11      	blt.n	49142 <__any_on+0x32>
   4911e:	dd0a      	ble.n	49136 <__any_on+0x26>
   49120:	f011 011f 	ands.w	r1, r1, #31
   49124:	d007      	beq.n	49136 <__any_on+0x26>
   49126:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   4912a:	fa24 f001 	lsr.w	r0, r4, r1
   4912e:	fa00 f101 	lsl.w	r1, r0, r1
   49132:	428c      	cmp	r4, r1
   49134:	d10b      	bne.n	4914e <__any_on+0x3e>
   49136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   4913a:	4293      	cmp	r3, r2
   4913c:	d803      	bhi.n	49146 <__any_on+0x36>
   4913e:	2000      	movs	r0, #0
   49140:	bd10      	pop	{r4, pc}
   49142:	4603      	mov	r3, r0
   49144:	e7f7      	b.n	49136 <__any_on+0x26>
   49146:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   4914a:	2900      	cmp	r1, #0
   4914c:	d0f5      	beq.n	4913a <__any_on+0x2a>
   4914e:	2001      	movs	r0, #1
   49150:	e7f6      	b.n	49140 <__any_on+0x30>

00049152 <_calloc_r>:
   49152:	b538      	push	{r3, r4, r5, lr}
   49154:	fb02 f401 	mul.w	r4, r2, r1
   49158:	4621      	mov	r1, r4
   4915a:	f7f8 fe9b 	bl	41e94 <_malloc_r>
   4915e:	4605      	mov	r5, r0
   49160:	b118      	cbz	r0, 4916a <_calloc_r+0x18>
   49162:	4622      	mov	r2, r4
   49164:	2100      	movs	r1, #0
   49166:	f7ff f82f 	bl	481c8 <memset>
   4916a:	4628      	mov	r0, r5
   4916c:	bd38      	pop	{r3, r4, r5, pc}

0004916e <_realloc_r>:
   4916e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   49170:	4607      	mov	r7, r0
   49172:	4614      	mov	r4, r2
   49174:	460e      	mov	r6, r1
   49176:	b921      	cbnz	r1, 49182 <_realloc_r+0x14>
   49178:	4611      	mov	r1, r2
   4917a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   4917e:	f7f8 be89 	b.w	41e94 <_malloc_r>
   49182:	b922      	cbnz	r2, 4918e <_realloc_r+0x20>
   49184:	4625      	mov	r5, r4
   49186:	f7f8 fe37 	bl	41df8 <_free_r>
   4918a:	4628      	mov	r0, r5
   4918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4918e:	f000 f968 	bl	49462 <_malloc_usable_size_r>
   49192:	42a0      	cmp	r0, r4
   49194:	d20f      	bcs.n	491b6 <_realloc_r+0x48>
   49196:	4621      	mov	r1, r4
   49198:	4638      	mov	r0, r7
   4919a:	f7f8 fe7b 	bl	41e94 <_malloc_r>
   4919e:	4605      	mov	r5, r0
   491a0:	2800      	cmp	r0, #0
   491a2:	d0f2      	beq.n	4918a <_realloc_r+0x1c>
   491a4:	4631      	mov	r1, r6
   491a6:	4622      	mov	r2, r4
   491a8:	f7fe ffee 	bl	48188 <memcpy>
   491ac:	4631      	mov	r1, r6
   491ae:	4638      	mov	r0, r7
   491b0:	f7f8 fe22 	bl	41df8 <_free_r>
   491b4:	e7e9      	b.n	4918a <_realloc_r+0x1c>
   491b6:	4635      	mov	r5, r6
   491b8:	e7e7      	b.n	4918a <_realloc_r+0x1c>

000491ba <__ssputs_r>:
   491ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   491be:	688e      	ldr	r6, [r1, #8]
   491c0:	4682      	mov	sl, r0
   491c2:	460c      	mov	r4, r1
   491c4:	4691      	mov	r9, r2
   491c6:	429e      	cmp	r6, r3
   491c8:	4698      	mov	r8, r3
   491ca:	d838      	bhi.n	4923e <__ssputs_r+0x84>
   491cc:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   491d0:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   491d4:	d031      	beq.n	4923a <__ssputs_r+0x80>
   491d6:	6962      	ldr	r2, [r4, #20]
   491d8:	3301      	adds	r3, #1
   491da:	6825      	ldr	r5, [r4, #0]
   491dc:	6909      	ldr	r1, [r1, #16]
   491de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   491e2:	1a6f      	subs	r7, r5, r1
   491e4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   491e8:	443b      	add	r3, r7
   491ea:	1055      	asrs	r5, r2, #1
   491ec:	429d      	cmp	r5, r3
   491ee:	bf38      	it	cc
   491f0:	461d      	movcc	r5, r3
   491f2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   491f6:	d030      	beq.n	4925a <__ssputs_r+0xa0>
   491f8:	4629      	mov	r1, r5
   491fa:	f7f8 fe4b 	bl	41e94 <_malloc_r>
   491fe:	4606      	mov	r6, r0
   49200:	b950      	cbnz	r0, 49218 <__ssputs_r+0x5e>
   49202:	230c      	movs	r3, #12
   49204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49208:	f8ca 3000 	str.w	r3, [sl]
   4920c:	89a3      	ldrh	r3, [r4, #12]
   4920e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   49212:	81a3      	strh	r3, [r4, #12]
   49214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   49218:	463a      	mov	r2, r7
   4921a:	6921      	ldr	r1, [r4, #16]
   4921c:	f7fe ffb4 	bl	48188 <memcpy>
   49220:	89a3      	ldrh	r3, [r4, #12]
   49222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   49226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   4922a:	81a3      	strh	r3, [r4, #12]
   4922c:	6126      	str	r6, [r4, #16]
   4922e:	443e      	add	r6, r7
   49230:	6165      	str	r5, [r4, #20]
   49232:	1bed      	subs	r5, r5, r7
   49234:	6026      	str	r6, [r4, #0]
   49236:	4646      	mov	r6, r8
   49238:	60a5      	str	r5, [r4, #8]
   4923a:	4546      	cmp	r6, r8
   4923c:	d900      	bls.n	49240 <__ssputs_r+0x86>
   4923e:	4646      	mov	r6, r8
   49240:	4632      	mov	r2, r6
   49242:	4649      	mov	r1, r9
   49244:	6820      	ldr	r0, [r4, #0]
   49246:	f7ff fc33 	bl	48ab0 <memmove>
   4924a:	68a3      	ldr	r3, [r4, #8]
   4924c:	2000      	movs	r0, #0
   4924e:	1b9b      	subs	r3, r3, r6
   49250:	60a3      	str	r3, [r4, #8]
   49252:	6823      	ldr	r3, [r4, #0]
   49254:	441e      	add	r6, r3
   49256:	6026      	str	r6, [r4, #0]
   49258:	e7dc      	b.n	49214 <__ssputs_r+0x5a>
   4925a:	462a      	mov	r2, r5
   4925c:	f7ff ff87 	bl	4916e <_realloc_r>
   49260:	4606      	mov	r6, r0
   49262:	2800      	cmp	r0, #0
   49264:	d1e2      	bne.n	4922c <__ssputs_r+0x72>
   49266:	6921      	ldr	r1, [r4, #16]
   49268:	4650      	mov	r0, sl
   4926a:	f7f8 fdc5 	bl	41df8 <_free_r>
   4926e:	e7c8      	b.n	49202 <__ssputs_r+0x48>

00049270 <_sungetc_r>:
   49270:	b538      	push	{r3, r4, r5, lr}
   49272:	1c4b      	adds	r3, r1, #1
   49274:	4614      	mov	r4, r2
   49276:	d103      	bne.n	49280 <_sungetc_r+0x10>
   49278:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   4927c:	4628      	mov	r0, r5
   4927e:	bd38      	pop	{r3, r4, r5, pc}
   49280:	8993      	ldrh	r3, [r2, #12]
   49282:	b2cd      	uxtb	r5, r1
   49284:	f023 0320 	bic.w	r3, r3, #32
   49288:	8193      	strh	r3, [r2, #12]
   4928a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   4928c:	6852      	ldr	r2, [r2, #4]
   4928e:	b18b      	cbz	r3, 492b4 <_sungetc_r+0x44>
   49290:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   49292:	4293      	cmp	r3, r2
   49294:	dd08      	ble.n	492a8 <_sungetc_r+0x38>
   49296:	6823      	ldr	r3, [r4, #0]
   49298:	1e5a      	subs	r2, r3, #1
   4929a:	6022      	str	r2, [r4, #0]
   4929c:	f803 5c01 	strb.w	r5, [r3, #-1]
   492a0:	6863      	ldr	r3, [r4, #4]
   492a2:	3301      	adds	r3, #1
   492a4:	6063      	str	r3, [r4, #4]
   492a6:	e7e9      	b.n	4927c <_sungetc_r+0xc>
   492a8:	4621      	mov	r1, r4
   492aa:	f000 f896 	bl	493da <__submore>
   492ae:	2800      	cmp	r0, #0
   492b0:	d0f1      	beq.n	49296 <_sungetc_r+0x26>
   492b2:	e7e1      	b.n	49278 <_sungetc_r+0x8>
   492b4:	6921      	ldr	r1, [r4, #16]
   492b6:	6823      	ldr	r3, [r4, #0]
   492b8:	b151      	cbz	r1, 492d0 <_sungetc_r+0x60>
   492ba:	4299      	cmp	r1, r3
   492bc:	d208      	bcs.n	492d0 <_sungetc_r+0x60>
   492be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   492c2:	42a9      	cmp	r1, r5
   492c4:	d104      	bne.n	492d0 <_sungetc_r+0x60>
   492c6:	3b01      	subs	r3, #1
   492c8:	3201      	adds	r2, #1
   492ca:	6023      	str	r3, [r4, #0]
   492cc:	6062      	str	r2, [r4, #4]
   492ce:	e7d5      	b.n	4927c <_sungetc_r+0xc>
   492d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   492d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   492d8:	6363      	str	r3, [r4, #52]	; 0x34
   492da:	2303      	movs	r3, #3
   492dc:	63a3      	str	r3, [r4, #56]	; 0x38
   492de:	4623      	mov	r3, r4
   492e0:	f803 5f46 	strb.w	r5, [r3, #70]!
   492e4:	6023      	str	r3, [r4, #0]
   492e6:	2301      	movs	r3, #1
   492e8:	e7dc      	b.n	492a4 <_sungetc_r+0x34>

000492ea <__ssrefill_r>:
   492ea:	b510      	push	{r4, lr}
   492ec:	460c      	mov	r4, r1
   492ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
   492f0:	b169      	cbz	r1, 4930e <__ssrefill_r+0x24>
   492f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   492f6:	4299      	cmp	r1, r3
   492f8:	d001      	beq.n	492fe <__ssrefill_r+0x14>
   492fa:	f7f8 fd7d 	bl	41df8 <_free_r>
   492fe:	2000      	movs	r0, #0
   49300:	6c23      	ldr	r3, [r4, #64]	; 0x40
   49302:	6360      	str	r0, [r4, #52]	; 0x34
   49304:	6063      	str	r3, [r4, #4]
   49306:	b113      	cbz	r3, 4930e <__ssrefill_r+0x24>
   49308:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   4930a:	6023      	str	r3, [r4, #0]
   4930c:	bd10      	pop	{r4, pc}
   4930e:	6923      	ldr	r3, [r4, #16]
   49310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49314:	6023      	str	r3, [r4, #0]
   49316:	2300      	movs	r3, #0
   49318:	6063      	str	r3, [r4, #4]
   4931a:	89a3      	ldrh	r3, [r4, #12]
   4931c:	f043 0320 	orr.w	r3, r3, #32
   49320:	81a3      	strh	r3, [r4, #12]
   49322:	e7f3      	b.n	4930c <__ssrefill_r+0x22>

00049324 <__sccl>:
   49324:	b570      	push	{r4, r5, r6, lr}
   49326:	780b      	ldrb	r3, [r1, #0]
   49328:	1e44      	subs	r4, r0, #1
   4932a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
   4932e:	2b5e      	cmp	r3, #94	; 0x5e
   49330:	bf13      	iteet	ne
   49332:	1c4a      	addne	r2, r1, #1
   49334:	1c8a      	addeq	r2, r1, #2
   49336:	784b      	ldrbeq	r3, [r1, #1]
   49338:	2100      	movne	r1, #0
   4933a:	bf08      	it	eq
   4933c:	2101      	moveq	r1, #1
   4933e:	f804 1f01 	strb.w	r1, [r4, #1]!
   49342:	42ac      	cmp	r4, r5
   49344:	d1fb      	bne.n	4933e <__sccl+0x1a>
   49346:	b913      	cbnz	r3, 4934e <__sccl+0x2a>
   49348:	3a01      	subs	r2, #1
   4934a:	4610      	mov	r0, r2
   4934c:	bd70      	pop	{r4, r5, r6, pc}
   4934e:	f081 0401 	eor.w	r4, r1, #1
   49352:	1c51      	adds	r1, r2, #1
   49354:	54c4      	strb	r4, [r0, r3]
   49356:	f811 5c01 	ldrb.w	r5, [r1, #-1]
   4935a:	1e4e      	subs	r6, r1, #1
   4935c:	460a      	mov	r2, r1
   4935e:	2d2d      	cmp	r5, #45	; 0x2d
   49360:	d006      	beq.n	49370 <__sccl+0x4c>
   49362:	2d5d      	cmp	r5, #93	; 0x5d
   49364:	d0f1      	beq.n	4934a <__sccl+0x26>
   49366:	b90d      	cbnz	r5, 4936c <__sccl+0x48>
   49368:	4632      	mov	r2, r6
   4936a:	e7ee      	b.n	4934a <__sccl+0x26>
   4936c:	462b      	mov	r3, r5
   4936e:	e7f0      	b.n	49352 <__sccl+0x2e>
   49370:	780e      	ldrb	r6, [r1, #0]
   49372:	2e5d      	cmp	r6, #93	; 0x5d
   49374:	d0fa      	beq.n	4936c <__sccl+0x48>
   49376:	42b3      	cmp	r3, r6
   49378:	dcf8      	bgt.n	4936c <__sccl+0x48>
   4937a:	3301      	adds	r3, #1
   4937c:	429e      	cmp	r6, r3
   4937e:	54c4      	strb	r4, [r0, r3]
   49380:	dcfb      	bgt.n	4937a <__sccl+0x56>
   49382:	3102      	adds	r1, #2
   49384:	e7e7      	b.n	49356 <__sccl+0x32>

00049386 <_raise_r>:
   49386:	291f      	cmp	r1, #31
   49388:	b538      	push	{r3, r4, r5, lr}
   4938a:	4604      	mov	r4, r0
   4938c:	460d      	mov	r5, r1
   4938e:	d904      	bls.n	4939a <_raise_r+0x14>
   49390:	2316      	movs	r3, #22
   49392:	6003      	str	r3, [r0, #0]
   49394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   49398:	bd38      	pop	{r3, r4, r5, pc}
   4939a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   4939c:	b112      	cbz	r2, 493a4 <_raise_r+0x1e>
   4939e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   493a2:	b94b      	cbnz	r3, 493b8 <_raise_r+0x32>
   493a4:	4620      	mov	r0, r4
   493a6:	f000 f816 	bl	493d6 <_getpid_r>
   493aa:	462a      	mov	r2, r5
   493ac:	4601      	mov	r1, r0
   493ae:	4620      	mov	r0, r4
   493b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   493b4:	f7fa bd84 	b.w	43ec0 <_kill_r>
   493b8:	2b01      	cmp	r3, #1
   493ba:	d00a      	beq.n	493d2 <_raise_r+0x4c>
   493bc:	1c59      	adds	r1, r3, #1
   493be:	d103      	bne.n	493c8 <_raise_r+0x42>
   493c0:	2316      	movs	r3, #22
   493c2:	6003      	str	r3, [r0, #0]
   493c4:	2001      	movs	r0, #1
   493c6:	e7e7      	b.n	49398 <_raise_r+0x12>
   493c8:	2400      	movs	r4, #0
   493ca:	4628      	mov	r0, r5
   493cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   493d0:	4798      	blx	r3
   493d2:	2000      	movs	r0, #0
   493d4:	e7e0      	b.n	49398 <_raise_r+0x12>

000493d6 <_getpid_r>:
   493d6:	f7fc bafe 	b.w	459d6 <_getpid>

000493da <__submore>:
   493da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   493de:	460c      	mov	r4, r1
   493e0:	6b49      	ldr	r1, [r1, #52]	; 0x34
   493e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   493e6:	4299      	cmp	r1, r3
   493e8:	d11a      	bne.n	49420 <__submore+0x46>
   493ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   493ee:	f7f8 fd51 	bl	41e94 <_malloc_r>
   493f2:	b918      	cbnz	r0, 493fc <__submore+0x22>
   493f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   493f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   493fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   49400:	6360      	str	r0, [r4, #52]	; 0x34
   49402:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   49406:	63a3      	str	r3, [r4, #56]	; 0x38
   49408:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   4940c:	7083      	strb	r3, [r0, #2]
   4940e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   49412:	7043      	strb	r3, [r0, #1]
   49414:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   49418:	7003      	strb	r3, [r0, #0]
   4941a:	6020      	str	r0, [r4, #0]
   4941c:	2000      	movs	r0, #0
   4941e:	e7eb      	b.n	493f8 <__submore+0x1e>
   49420:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   49422:	0077      	lsls	r7, r6, #1
   49424:	463a      	mov	r2, r7
   49426:	f7ff fea2 	bl	4916e <_realloc_r>
   4942a:	4605      	mov	r5, r0
   4942c:	2800      	cmp	r0, #0
   4942e:	d0e1      	beq.n	493f4 <__submore+0x1a>
   49430:	eb00 0806 	add.w	r8, r0, r6
   49434:	4601      	mov	r1, r0
   49436:	4632      	mov	r2, r6
   49438:	4640      	mov	r0, r8
   4943a:	f7fe fea5 	bl	48188 <memcpy>
   4943e:	f8c4 8000 	str.w	r8, [r4]
   49442:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   49446:	e7e9      	b.n	4941c <__submore+0x42>

00049448 <__ascii_wctomb>:
   49448:	b149      	cbz	r1, 4945e <__ascii_wctomb+0x16>
   4944a:	2aff      	cmp	r2, #255	; 0xff
   4944c:	bf8d      	iteet	hi
   4944e:	238a      	movhi	r3, #138	; 0x8a
   49450:	700a      	strbls	r2, [r1, #0]
   49452:	2001      	movls	r0, #1
   49454:	6003      	strhi	r3, [r0, #0]
   49456:	bf88      	it	hi
   49458:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   4945c:	4770      	bx	lr
   4945e:	4608      	mov	r0, r1
   49460:	4770      	bx	lr

00049462 <_malloc_usable_size_r>:
   49462:	f851 3c04 	ldr.w	r3, [r1, #-4]
   49466:	1f18      	subs	r0, r3, #4
   49468:	2b00      	cmp	r3, #0
   4946a:	bfbc      	itt	lt
   4946c:	580b      	ldrlt	r3, [r1, r0]
   4946e:	18c0      	addlt	r0, r0, r3
   49470:	4770      	bx	lr
